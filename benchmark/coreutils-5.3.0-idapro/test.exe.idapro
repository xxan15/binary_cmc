.text:00401000 ;
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
.text:00401000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
.text:00401000 ; |                      License info: 48-357D-7BC4-C6                      |
.text:00401000 ; |                              Virginia Tech                              |
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ;
.text:00401000 ; Input SHA256 : B1D6AF85C27A897EFE5C61324310B14BDB65D0830C538662F2912EAE564FBA74
.text:00401000 ; Input MD5    : 22672804D26103AB7D9B6A117F0F718D
.text:00401000 ; Input CRC32  : A531BDF4
.text:00401000
.text:00401000 ; File Name   : /home/cindy/Documents/Projects/binary_cmc/benchmark/coreutils-5.3.0-bin/bin/test.exe
.text:00401000 ; Format      : Portable executable for 80386 (PE)
.text:00401000 ; Imagebase   : 400000
.text:00401000 ; Timestamp   : 4266A271 (Wed Apr 20 18:41:53 2005)
.text:00401000 ; Section 1. (virtual address 00001000)
.text:00401000 ; Virtual size                  : 0000D140 (  53568.)
.text:00401000 ; Section size in file          : 0000D200 (  53760.)
.text:00401000 ; Offset to raw data for section: 00000400
.text:00401000 ; Flags 60000020: Text Executable Readable
.text:00401000 ; Alignment     : default
.text:00401000
.text:00401000                 .686p
.text:00401000                 .mmx
.text:00401000                 .model flat
.text:00401000
.text:00401000 ; ===========================================================================
.text:00401000
.text:00401000 ; Segment type: Pure code
.text:00401000 ; Segment permissions: Read/Execute
.text:00401000 _text           segment para public 'CODE' use32
.text:00401000                 assume cs:_text
.text:00401000                 ;org 401000h
.text:00401000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00401000
.text:00401000 ; =============== S U B R O U T I N E =======================================
.text:00401000
.text:00401000 ; Attributes: noreturn bp-based frame
.text:00401000
.text:00401000                 public start
.text:00401000 start           proc near
.text:00401000
.text:00401000 Type            = dword ptr -8
.text:00401000
.text:00401000                 push    ebp
.text:00401001                 mov     ebp, esp
.text:00401003                 sub     esp, 8
.text:00401006                 mov     [esp+8+Type], 1 ; Type
.text:0040100D                 call    ds:__set_app_type
.text:00401013                 call    sub_401080
.text:00401013 start           endp
.text:00401013
.text:00401018 ; ---------------------------------------------------------------------------
.text:00401018                 mov     esp, ebp
.text:0040101A                 xor     eax, eax
.text:0040101C                 pop     ebp
.text:0040101D                 retn
.text:0040101D ; ---------------------------------------------------------------------------
.text:0040101E                 align 10h
.text:00401020                 push    ebp
.text:00401021                 mov     ebp, esp
.text:00401023                 sub     esp, 8
.text:00401026                 mov     dword ptr [esp], 2
.text:0040102D                 call    ds:__set_app_type
.text:00401033                 call    sub_401080
.text:00401038 ; ---------------------------------------------------------------------------
.text:00401038                 mov     esp, ebp
.text:0040103A                 xor     eax, eax
.text:0040103C                 pop     ebp
.text:0040103D                 retn
.text:0040103D ; ---------------------------------------------------------------------------
.text:0040103E                 align 10h
.text:00401040
.text:00401040 ; =============== S U B R O U T I N E =======================================
.text:00401040
.text:00401040 ; Attributes: bp-based frame
.text:00401040
.text:00401040 ; int __cdecl sub_401040(void (__cdecl *)())
.text:00401040 sub_401040      proc near               ; CODE XREF: sub_402FC0+6C↓p
.text:00401040                                         ; .text:0040D3F0↓p ...
.text:00401040
.text:00401040 var_8           = dword ptr -8
.text:00401040 arg_0           = dword ptr  8
.text:00401040
.text:00401040                 push    ebp
.text:00401041                 mov     ebp, esp
.text:00401043                 sub     esp, 8
.text:00401046                 mov     edx, [ebp+arg_0]
.text:00401049                 mov     [esp+8+var_8], edx ; void (__cdecl *)()
.text:0040104C                 call    ds:atexit
.text:00401052                 mov     esp, ebp
.text:00401054                 pop     ebp
.text:00401055                 retn
.text:00401055 sub_401040      endp
.text:00401055
.text:00401055 ; ---------------------------------------------------------------------------
.text:00401056                 align 10h
.text:00401060                 push    ebp
.text:00401061                 mov     ebp, esp
.text:00401063                 sub     esp, 8
.text:00401066                 mov     edx, [ebp+8]
.text:00401069                 mov     [esp], edx
.text:0040106C                 call    ds:_onexit
.text:00401072                 mov     esp, ebp
.text:00401074                 pop     ebp
.text:00401075                 retn
.text:00401075 ; ---------------------------------------------------------------------------
.text:00401076                 align 10h
.text:00401080
.text:00401080 ; =============== S U B R O U T I N E =======================================
.text:00401080
.text:00401080 ; Attributes: noreturn bp-based frame
.text:00401080
.text:00401080 sub_401080      proc near               ; CODE XREF: start+13↑p
.text:00401080                                         ; .text:00401033↑p
.text:00401080
.text:00401080 lpTopLevelExceptionFilter= dword ptr -28h
.text:00401080 Mode            = dword ptr -24h
.text:00401080 var_20          = dword ptr -20h
.text:00401080 var_1C          = dword ptr -1Ch
.text:00401080 var_18          = dword ptr -18h
.text:00401080 var_C           = byte ptr -0Ch
.text:00401080 var_8           = dword ptr -8
.text:00401080
.text:00401080                 push    ebp
.text:00401081                 mov     ebp, esp
.text:00401083                 push    ebx
.text:00401084                 sub     esp, 24h
.text:00401087                 mov     [esp+28h+lpTopLevelExceptionFilter], offset TopLevelExceptionFilter ; lpTopLevelExceptionFilter
.text:0040108E                 call    SetUnhandledExceptionFilter
.text:00401093                 sub     esp, 4
.text:00401096                 call    sub_40D390
.text:0040109B                 mov     [esp+28h+lpTopLevelExceptionFilter], offset dword_40F000
.text:004010A2                 mov     edx, dword_40F070
.text:004010A8                 lea     ecx, [ebp+var_8]
.text:004010AB                 mov     [ebp+var_8], 0
.text:004010B2                 mov     [esp+28h+var_18], ecx
.text:004010B6                 mov     [esp+28h+var_1C], edx
.text:004010BA                 lea     edx, [ebp+var_C]
.text:004010BD                 mov     [esp+28h+var_20], edx
.text:004010C1                 mov     [esp+28h+Mode], offset dword_40F004
.text:004010C9                 call    __getmainargs
.text:004010CE                 mov     eax, Mode
.text:004010D3                 test    eax, eax
.text:004010D5                 jz      short loc_401135
.text:004010D7                 mov     dword_40F090, eax
.text:004010DC                 mov     edx, ds:_iob
.text:004010E2                 test    edx, edx
.text:004010E4                 jz      short loc_4010FB
.text:004010E6                 mov     [esp+28h+Mode], eax ; Mode
.text:004010EA                 mov     ebx, [edx+10h]
.text:004010ED                 mov     [esp+28h+lpTopLevelExceptionFilter], ebx ; FileHandle
.text:004010F0                 call    _setmode
.text:004010F5                 mov     edx, ds:_iob
.text:004010FB
.text:004010FB loc_4010FB:                             ; CODE XREF: sub_401080+64↑j
.text:004010FB                 cmp     edx, 0FFFFFFE0h
.text:004010FE                 jz      short loc_40111B
.text:00401100                 mov     ebx, Mode
.text:00401106                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040110A                 mov     ecx, [edx+30h]
.text:0040110D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401110                 call    _setmode
.text:00401115                 mov     edx, ds:_iob
.text:0040111B
.text:0040111B loc_40111B:                             ; CODE XREF: sub_401080+7E↑j
.text:0040111B                 cmp     edx, 0FFFFFFC0h
.text:0040111E                 jz      short loc_401135
.text:00401120                 mov     ebx, Mode
.text:00401126                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040112A                 mov     ecx, [edx+50h]
.text:0040112D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401130                 call    _setmode
.text:00401135
.text:00401135 loc_401135:                             ; CODE XREF: sub_401080+55↑j
.text:00401135                                         ; sub_401080+9E↑j
.text:00401135                 call    __p__fmode
.text:0040113A                 mov     ecx, dword_40F090
.text:00401140                 mov     [eax], ecx
.text:00401142                 call    sub_40D360
.text:00401147                 call    __p__environ
.text:0040114C                 mov     edx, dword_40F000
.text:00401152                 mov     ebx, [eax]
.text:00401154                 mov     ecx, dword_40F004
.text:0040115A                 mov     [esp+28h+lpTopLevelExceptionFilter], edx
.text:0040115D                 mov     [esp+28h+var_20], ebx
.text:00401161                 mov     [esp+28h+Mode], ecx
.text:00401165                 call    sub_402FC0
.text:00401165 sub_401080      endp
.text:00401165
.text:0040116A ; ---------------------------------------------------------------------------
.text:0040116A                 mov     ebx, eax
.text:0040116C                 call    _cexit
.text:00401171                 mov     [esp], ebx
.text:00401174                 call    ExitProcess
.text:00401174 ; ---------------------------------------------------------------------------
.text:00401179                 align 10h
.text:00401180
.text:00401180 ; =============== S U B R O U T I N E =======================================
.text:00401180
.text:00401180 ; Attributes: bp-based frame
.text:00401180
.text:00401180 ; LONG __stdcall TopLevelExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo)
.text:00401180 TopLevelExceptionFilter proc near       ; DATA XREF: sub_401080+7↑o
.text:00401180
.text:00401180 Signal          = dword ptr -18h
.text:00401180 Function        = dword ptr -14h
.text:00401180 var_8           = dword ptr -8
.text:00401180 var_4           = dword ptr -4
.text:00401180 ExceptionInfo   = dword ptr  8
.text:00401180
.text:00401180                 push    ebp
.text:00401181                 mov     ebp, esp
.text:00401183                 sub     esp, 18h
.text:00401186                 mov     [ebp+var_8], ebx
.text:00401189                 mov     ecx, [ebp+ExceptionInfo]
.text:0040118C                 xor     ebx, ebx
.text:0040118E                 mov     [ebp+var_4], esi
.text:00401191                 xor     esi, esi
.text:00401193                 mov     edx, [ecx]
.text:00401195                 mov     eax, [edx]
.text:00401197                 cmp     eax, 0C0000091h
.text:0040119C                 ja      loc_401260
.text:004011A2                 cmp     eax, 0C000008Dh
.text:004011A7                 jnb     short loc_401210
.text:004011A9                 cmp     eax, 0C0000005h
.text:004011AE                 jz      short loc_4011BE
.text:004011B0
.text:004011B0 loc_4011B0:                             ; CODE XREF: TopLevelExceptionFilter+59↓j
.text:004011B0                                         ; TopLevelExceptionFilter+77↓j ...
.text:004011B0                 mov     eax, ebx
.text:004011B2                 mov     esi, [ebp+var_4]
.text:004011B5                 mov     ebx, [ebp+var_8]
.text:004011B8                 mov     esp, ebp
.text:004011BA                 pop     ebp
.text:004011BB                 retn    4
.text:004011BE ; ---------------------------------------------------------------------------
.text:004011BE
.text:004011BE loc_4011BE:                             ; CODE XREF: TopLevelExceptionFilter+2E↑j
.text:004011BE                 mov     [esp+18h+Function], 0 ; Function
.text:004011C6                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:004011CD                 call    signal
.text:004011D2                 cmp     eax, 1
.text:004011D5                 jz      short loc_4011F9
.text:004011D7                 test    eax, eax
.text:004011D9                 jz      short loc_4011B0
.text:004011DB                 mov     [esp+18h+Signal], 0Bh
.text:004011E2                 lea     esi, [esi+0]
.text:004011E9                 lea     edi, [edi+0]
.text:004011F0
.text:004011F0 loc_4011F0:                             ; CODE XREF: TopLevelExceptionFilter+BD↓j
.text:004011F0                 call    eax
.text:004011F2
.text:004011F2 loc_4011F2:                             ; CODE XREF: TopLevelExceptionFilter+8D↓j
.text:004011F2                                         ; TopLevelExceptionFilter+D5↓j ...
.text:004011F2                 mov     ebx, 0FFFFFFFFh
.text:004011F7                 jmp     short loc_4011B0
.text:004011F9 ; ---------------------------------------------------------------------------
.text:004011F9
.text:004011F9 loc_4011F9:                             ; CODE XREF: TopLevelExceptionFilter+55↑j
.text:004011F9                 mov     [esp+18h+Function], 1 ; Function
.text:00401201                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:00401208                 call    signal
.text:0040120D                 jmp     short loc_4011F2
.text:0040120D ; ---------------------------------------------------------------------------
.text:0040120F                 align 10h
.text:00401210
.text:00401210 loc_401210:                             ; CODE XREF: TopLevelExceptionFilter+27↑j
.text:00401210                                         ; TopLevelExceptionFilter+E5↓j
.text:00401210                 mov     esi, 1
.text:00401215
.text:00401215 loc_401215:                             ; CODE XREF: TopLevelExceptionFilter+EC↓j
.text:00401215                 mov     [esp+18h+Function], 0 ; Function
.text:0040121D                 mov     [esp+18h+Signal], 8 ; Signal
.text:00401224                 call    signal
.text:00401229                 cmp     eax, 1
.text:0040122C                 jz      short loc_40123F
.text:0040122E                 test    eax, eax
.text:00401230                 jz      loc_4011B0
.text:00401236                 mov     [esp+18h+Signal], 8
.text:0040123D                 jmp     short loc_4011F0
.text:0040123F ; ---------------------------------------------------------------------------
.text:0040123F
.text:0040123F loc_40123F:                             ; CODE XREF: TopLevelExceptionFilter+AC↑j
.text:0040123F                 mov     [esp+18h+Function], 1 ; Function
.text:00401247                 mov     [esp+18h+Signal], 8 ; Signal
.text:0040124E                 call    signal
.text:00401253                 test    esi, esi
.text:00401255                 jz      short loc_4011F2
.text:00401257                 call    sub_40D390
.text:0040125C                 jmp     short loc_4011F2
.text:0040125C ; ---------------------------------------------------------------------------
.text:0040125E                 align 10h
.text:00401260
.text:00401260 loc_401260:                             ; CODE XREF: TopLevelExceptionFilter+1C↑j
.text:00401260                 cmp     eax, 0C0000093h
.text:00401265                 jz      short loc_401210
.text:00401267                 cmp     eax, 0C0000094h
.text:0040126C                 jz      short loc_401215
.text:0040126E                 jmp     loc_4011B0
.text:0040126E TopLevelExceptionFilter endp
.text:0040126E
.text:0040126E ; ---------------------------------------------------------------------------
.text:00401273                 align 10h
.text:00401280 byte_401280     db 2Dh, 6Ch, 0          ; DATA XREF: sub_4013A0+44↓o
.text:00401280                                         ; sub_403EE0+71↓o
.text:00401283 byte_401283     db 21h                  ; DATA XREF: sub_4013A0+82↓o
.text:00401283                                         ; sub_402550+2F↓o
.text:00401284                 db 3Dh, 0
.text:00401286 aUnknownBinaryO db 'unknown binary operator',0Ah,0
.text:00401286                                         ; DATA XREF: sub_4013A0:def_40149C↓o
.text:0040129F ; const char Format[]
.text:0040129F Format          db '%s: ',0             ; DATA XREF: sub_4013A0+173↓o
.text:0040129F                                         ; sub_4013A0+288↓o ...
.text:004012A4 aAfterLe        db 'after -le',0        ; DATA XREF: sub_4013A0+25E↓o
.text:004012AE                 align 20h
.text:004012C0 aSIntegerExpres db '%s: integer expression expected',0Ah,0
.text:004012C0                                         ; DATA XREF: sub_4013A0+26B↓o
.text:004012C0                                         ; sub_401DB0+682↓o
.text:004012E1 aBeforeLe       db 'before -le',0       ; DATA XREF: sub_4013A0+2CA↓o
.text:004012EC aAfterLt        db 'after -lt',0        ; DATA XREF: sub_4013A0+37A↓o
.text:004012F6 aBeforeLt       db 'before -lt',0       ; DATA XREF: sub_4013A0+3A2↓o
.text:00401301 aEfDoesNotAccep db '-ef does not accept -l',0Ah,0
.text:00401301                                         ; DATA XREF: sub_4013A0:loc_401789↓o
.text:00401319 aAfterEq        db 'after -eq',0        ; DATA XREF: sub_4013A0+55D↓o
.text:00401323 aBeforeEq       db 'before -eq',0       ; DATA XREF: sub_4013A0+58C↓o
.text:0040132E aAfterGe        db 'after -ge',0        ; DATA XREF: sub_4013A0+659↓o
.text:00401338 aBeforeGe       db 'before -ge',0       ; DATA XREF: sub_4013A0+681↓o
.text:00401343 aAfterGt        db 'after -gt',0        ; DATA XREF: sub_4013A0+737↓o
.text:0040134D aBeforeGt       db 'before -gt',0       ; DATA XREF: sub_4013A0+75F↓o
.text:00401358 aAfterNe        db 'after -ne',0        ; DATA XREF: sub_4013A0+81F↓o
.text:00401362 aBeforeNe       db 'before -ne',0       ; DATA XREF: sub_4013A0+84C↓o
.text:0040136D aNtDoesNotAccep db '-nt does not accept -l',0Ah,0
.text:0040136D                                         ; DATA XREF: sub_4013A0:loc_401C17↓o
.text:00401385 aOtDoesNotAccep db '-ot does not accept -l',0Ah,0
.text:00401385                                         ; DATA XREF: sub_4013A0:loc_401CD0↓o
.text:0040139D                 align 10h
.text:004013A0
.text:004013A0 ; =============== S U B R O U T I N E =======================================
.text:004013A0
.text:004013A0
.text:004013A0 sub_4013A0      proc near               ; CODE XREF: sub_4027A0+3BA↓p
.text:004013A0                                         ; sub_4027A0+61B↓p ...
.text:004013A0
.text:004013A0 Str1            = dword ptr -2FCh
.text:004013A0 Str2            = dword ptr -2F8h
.text:004013A0 var_2F4         = dword ptr -2F4h
.text:004013A0 var_2E4         = dword ptr -2E4h
.text:004013A0 var_2E0         = dword ptr -2E0h
.text:004013A0 var_2D9         = byte ptr -2D9h
.text:004013A0 var_2D8         = dword ptr -2D8h
.text:004013A0 var_2D4         = dword ptr -2D4h
.text:004013A0 var_2CE         = byte ptr -2CEh
.text:004013A0 var_2CD         = byte ptr -2CDh
.text:004013A0 var_2CC         = dword ptr -2CCh
.text:004013A0 var_2C8         = dword ptr -2C8h
.text:004013A0 var_2C4         = dword ptr -2C4h
.text:004013A0 var_2C0         = dword ptr -2C0h
.text:004013A0 var_2BC         = dword ptr -2BCh
.text:004013A0 var_27C         = dword ptr -27Ch
.text:004013A0 var_24C         = dword ptr -24Ch
.text:004013A0 var_20C         = dword ptr -20Ch
.text:004013A0 var_1DC         = dword ptr -1DCh
.text:004013A0 var_19C         = dword ptr -19Ch
.text:004013A0 var_16C         = dword ptr -16Ch
.text:004013A0 var_12C         = dword ptr -12Ch
.text:004013A0 var_FC          = dword ptr -0FCh
.text:004013A0 var_F4          = dword ptr -0F4h
.text:004013A0 var_F0          = dword ptr -0F0h
.text:004013A0 var_EC          = dword ptr -0ECh
.text:004013A0 var_E8          = dword ptr -0E8h
.text:004013A0 var_8C          = dword ptr -8Ch
.text:004013A0 var_84          = dword ptr -84h
.text:004013A0 var_80          = dword ptr -80h
.text:004013A0 var_7C          = dword ptr -7Ch
.text:004013A0 var_78          = dword ptr -78h
.text:004013A0 arg_0           = byte ptr  4
.text:004013A0
.text:004013A0                 push    ebp
.text:004013A1                 push    edi
.text:004013A2                 push    esi
.text:004013A3                 push    ebx
.text:004013A4                 sub     esp, 2ECh
.text:004013AA                 movzx   edx, [esp+2FCh+arg_0]
.text:004013B2                 test    dl, dl
.text:004013B4                 mov     [esp+2FCh+var_2CD], dl
.text:004013B8                 jz      loc_401D78
.text:004013BE                 mov     eax, ds:dword_410000
.text:004013C3                 inc     eax
.text:004013C4                 mov     ds:dword_410000, eax
.text:004013C9
.text:004013C9 loc_4013C9:                             ; CODE XREF: sub_4013A0+9DD↓j
.text:004013C9                 mov     edx, ds:dword_410010
.text:004013CF                 lea     ebp, [eax+1]
.text:004013D2                 sub     edx, 2
.text:004013D5                 cmp     ebp, edx
.text:004013D7                 jge     loc_401D70
.text:004013DD                 cld
.text:004013DE                 mov     ebx, ds:dword_410020
.text:004013E4                 mov     edi, offset byte_401280
.text:004013E9                 mov     ecx, 3
.text:004013EE                 mov     esi, [ebx+ebp*4+4]
.text:004013F2                 repe cmpsb
.text:004013F4                 jnz     loc_401D60
.text:004013FA                 mov     [esp+2FCh+var_2CE], 1
.text:004013FF                 mov     ds:dword_410000, ebp
.text:00401405                 lea     esi, [esi+0]
.text:00401409                 lea     edi, [edi+0]
.text:00401410
.text:00401410 loc_401410:                             ; CODE XREF: sub_4013A0+9C5↓j
.text:00401410                 mov     edx, [ebx+ebp*4]
.text:00401413                 movzx   eax, byte ptr [edx]
.text:00401416                 cmp     al, 2Dh ; '-'
.text:00401418                 jz      short loc_401490
.text:0040141A                 cmp     al, 3Dh ; '='
.text:0040141C                 jz      short loc_401467
.text:0040141E
.text:0040141E loc_40141E:                             ; CODE XREF: sub_4013A0+CB↓j
.text:0040141E                 cld
.text:0040141F                 mov     esi, [ebx+ebp*4]
.text:00401422                 mov     edi, offset byte_401283
.text:00401427                 mov     ecx, 3
.text:0040142C                 repe cmpsb
.text:0040142E                 jnz     loc_401D82
.text:00401434                 mov     edi, ds:dword_410000
.text:0040143A                 mov     esi, [ebx+edi*4+8]
.text:0040143E                 mov     [esp+2FCh+Str2], esi ; Str2
.text:00401442                 mov     ebp, [ebx+edi*4]
.text:00401445                 mov     [esp+2FCh+Str1], ebp ; Str1
.text:00401448                 call    strcmp
.text:0040144D                 test    eax, eax
.text:0040144F                 setnz   al
.text:00401452
.text:00401452 loc_401452:                             ; CODE XREF: sub_4013A0+EB↓j
.text:00401452                 add     ds:dword_410000, 3
.text:00401459
.text:00401459 loc_401459:                             ; CODE XREF: sub_4013A0+53A↓j
.text:00401459                                         ; sub_4013A0+7FC↓j ...
.text:00401459                 movzx   eax, al
.text:0040145C
.text:0040145C loc_40145C:                             ; CODE XREF: sub_4013A0+229↓j
.text:0040145C                                         ; sub_4013A0+233↓j ...
.text:0040145C                 add     esp, 2ECh
.text:00401462                 pop     ebx
.text:00401463                 pop     esi
.text:00401464                 pop     edi
.text:00401465                 pop     ebp
.text:00401466                 retn
.text:00401467 ; ---------------------------------------------------------------------------
.text:00401467
.text:00401467 loc_401467:                             ; CODE XREF: sub_4013A0+7C↑j
.text:00401467                 cmp     byte ptr [edx+1], 0
.text:0040146B                 jnz     short loc_40141E
.text:0040146D                 mov     ecx, ds:dword_410000
.text:00401473                 mov     edx, [ebx+ecx*4+8]
.text:00401477                 mov     [esp+2FCh+Str2], edx ; Str2
.text:0040147B                 mov     esi, [ebx+ecx*4]
.text:0040147E                 mov     [esp+2FCh+Str1], esi ; Str1
.text:00401481                 call    strcmp
.text:00401486                 test    eax, eax
.text:00401488                 setz    al
.text:0040148B                 jmp     short loc_401452
.text:0040148B ; ---------------------------------------------------------------------------
.text:0040148D                 align 10h
.text:00401490
.text:00401490 loc_401490:                             ; CODE XREF: sub_4013A0+78↑j
.text:00401490                 movsx   eax, byte ptr [edx+1]
.text:00401494                 sub     eax, 65h ; 'e'  ; switch 11 cases
.text:00401497                 cmp     eax, 0Ah
.text:0040149A                 ja      short def_40149C ; jumptable 0040149C default case, cases 102,104-107,109
.text:0040149C                 jmp     ds:jpt_40149C[eax*4] ; switch jump
.text:0040149C ; ---------------------------------------------------------------------------
.text:004014A3                 align 4
.text:004014A4 jpt_40149C      dd offset loc_401750    ; DATA XREF: sub_4013A0+FC↑r
.text:004014A4                 dd offset def_40149C    ; jump table for switch statement
.text:004014A4                 dd offset loc_401938
.text:004014A4                 dd offset def_40149C
.text:004014A4                 dd offset def_40149C
.text:004014A4                 dd offset def_40149C
.text:004014A4                 dd offset def_40149C
.text:004014A4                 dd offset loc_4014D0
.text:004014A4                 dd offset def_40149C
.text:004014A4                 dd offset loc_401B10
.text:004014A4                 dd offset loc_401CA4
.text:004014D0 ; ---------------------------------------------------------------------------
.text:004014D0
.text:004014D0 loc_4014D0:                             ; CODE XREF: sub_4013A0+FC↑j
.text:004014D0                                         ; DATA XREF: sub_4013A0:jpt_40149C↑o
.text:004014D0                 mov     eax, [ebx+ebp*4] ; jumptable 0040149C case 108
.text:004014D3                 cmp     byte ptr [eax+2], 74h ; 't'
.text:004014D7                 jz      loc_401673
.text:004014DD
.text:004014DD loc_4014DD:                             ; CODE XREF: sub_4013A0+2D7↓j
.text:004014DD                 mov     eax, [ebx+ebp*4]
.text:004014E0                 cmp     byte ptr [eax+2], 65h ; 'e'
.text:004014E4                 jz      short loc_40155D
.text:004014E6                 lea     esi, [esi+0]
.text:004014E9                 lea     edi, [edi+0]
.text:004014F0
.text:004014F0 def_40149C:                             ; CODE XREF: sub_4013A0+FA↑j
.text:004014F0                                         ; sub_4013A0+FC↑j ...
.text:004014F0                 mov     [esp+2FCh+Str1], offset aUnknownBinaryO ; jumptable 0040149C default case, cases 102,104-107,109
.text:004014F7                 call    ds:__imp_libintl_gettext
.text:004014FD                 mov     ebx, ds:dword_410020
.text:00401503                 mov     ecx, ds:_iob
.text:00401509                 mov     esi, [ebx+ebp*4]
.text:0040150C                 mov     edx, [ebx]
.text:0040150E                 mov     edi, eax
.text:00401510                 add     ecx, 40h ; '@'
.text:00401513                 mov     [esp+2FCh+Str2], offset Format ; "%s: "
.text:0040151B                 mov     [esp+2FCh+Str1], ecx ; Stream
.text:0040151E                 mov     [esp+2FCh+var_2F4], edx
.text:00401522                 call    fprintf
.text:00401527                 mov     [esp+2FCh+var_2F4], esi
.text:0040152B                 mov     [esp+2FCh+Str2], edi ; Format
.text:0040152F
.text:0040152F loc_40152F:                             ; CODE XREF: sub_4013A0+2A9↓j
.text:0040152F                 mov     edi, ds:_iob
.text:00401535                 add     edi, 40h ; '@'
.text:00401538                 mov     [esp+2FCh+Str1], edi ; Stream
.text:0040153B                 call    fprintf
.text:00401540                 mov     ebp, ds:_iob
.text:00401546                 add     ebp, 40h ; '@'
.text:00401549                 mov     [esp+2FCh+Str1], ebp ; Stream
.text:0040154C                 call    fflush
.text:00401551                 mov     [esp+2FCh+Str1], 2 ; Code
.text:00401558                 call    exit
.text:0040155D ; ---------------------------------------------------------------------------
.text:0040155D
.text:0040155D loc_40155D:                             ; CODE XREF: sub_4013A0+144↑j
.text:0040155D                 cmp     byte ptr [eax+3], 0
.text:00401561                 jnz     short def_40149C ; jumptable 0040149C default case, cases 102,104-107,109
.text:00401563                 cmp     [esp+2FCh+var_2CD], 0
.text:00401568                 jz      loc_40164E
.text:0040156E                 mov     edx, [ebx+ebp*4-4]
.text:00401572                 mov     [esp+2FCh+Str1], edx ; Str
.text:00401575                 call    strlen
.text:0040157A                 mov     [esp+2FCh+var_2C4], eax
.text:0040157E                 mov     [esp+2FCh+var_2C0], 0
.text:00401586
.text:00401586 loc_401586:                             ; CODE XREF: sub_4013A0+2C4↓j
.text:00401586                 cmp     [esp+2FCh+var_2CE], 0
.text:0040158B                 jz      short loc_4015E0
.text:0040158D                 mov     edi, ds:dword_410020
.text:00401593                 mov     ebx, [edi+ebp*4+8]
.text:00401597                 mov     [esp+2FCh+Str1], ebx ; Str
.text:0040159A                 call    strlen
.text:0040159F                 mov     [esp+2FCh+var_2CC], eax
.text:004015A3                 mov     [esp+2FCh+var_2C8], 0
.text:004015AB
.text:004015AB loc_4015AB:                             ; CODE XREF: sub_4013A0+25C↓j
.text:004015AB                 add     ds:dword_410000, 3
.text:004015B2                 mov     eax, 1
.text:004015B7                 mov     edi, [esp+2FCh+var_2C0]
.text:004015BB                 mov     ebp, [esp+2FCh+var_2C8]
.text:004015BF                 mov     ebx, [esp+2FCh+var_2C4]
.text:004015C3                 mov     edx, [esp+2FCh+var_2CC]
.text:004015C7                 cmp     edi, ebp
.text:004015C9                 jl      loc_40145C
.text:004015CF                 jg      short loc_4015D9
.text:004015D1                 cmp     ebx, edx
.text:004015D3                 jbe     loc_40145C
.text:004015D9
.text:004015D9 loc_4015D9:                             ; CODE XREF: sub_4013A0+22F↑j
.text:004015D9                                         ; sub_4013A0+349↓j ...
.text:004015D9                 xor     eax, eax
.text:004015DB                 jmp     loc_40145C
.text:004015E0 ; ---------------------------------------------------------------------------
.text:004015E0
.text:004015E0 loc_4015E0:                             ; CODE XREF: sub_4013A0+1EB↑j
.text:004015E0                 mov     ecx, ds:dword_410020
.text:004015E6                 lea     esi, [esp+2FCh+var_2CC]
.text:004015EA                 mov     [esp+2FCh+Str2], esi
.text:004015EE                 mov     edx, [ecx+ebp*4+4]
.text:004015F2                 mov     [esp+2FCh+Str1], edx
.text:004015F5                 call    sub_404250
.text:004015FA                 test    al, al
.text:004015FC                 jnz     short loc_4015AB
.text:004015FE                 mov     [esp+2FCh+Str1], offset aAfterLe ; "after -le"
.text:00401605
.text:00401605 loc_401605:                             ; CODE XREF: sub_4013A0+2D1↓j
.text:00401605                                         ; sub_4013A0+381↓j ...
.text:00401605                 call    ds:__imp_libintl_gettext
.text:0040160B                 mov     [esp+2FCh+Str1], offset aSIntegerExpres ; "%s: integer expression expected\n"
.text:00401612                 mov     ebp, eax
.text:00401614                 call    ds:__imp_libintl_gettext
.text:0040161A                 mov     esi, ds:dword_410020
.text:00401620                 mov     edx, ds:_iob
.text:00401626                 mov     ecx, [esi]
.text:00401628                 mov     [esp+2FCh+Str2], offset Format ; "%s: "
.text:00401630                 add     edx, 40h ; '@'
.text:00401633                 mov     ebx, eax
.text:00401635                 mov     [esp+2FCh+Str1], edx ; Stream
.text:00401638                 mov     [esp+2FCh+var_2F4], ecx
.text:0040163C                 call    fprintf
.text:00401641                 mov     [esp+2FCh+var_2F4], ebp
.text:00401645
.text:00401645 loc_401645:                             ; CODE XREF: sub_4013A0+425↓j
.text:00401645                 mov     [esp+2FCh+Str2], ebx
.text:00401649                 jmp     loc_40152F
.text:0040164E ; ---------------------------------------------------------------------------
.text:0040164E
.text:0040164E loc_40164E:                             ; CODE XREF: sub_4013A0+1C8↑j
.text:0040164E                 lea     esi, [esp+2FCh+var_2C4]
.text:00401652                 mov     [esp+2FCh+Str2], esi
.text:00401656                 mov     ecx, [ebx+ebp*4-4]
.text:0040165A                 mov     [esp+2FCh+Str1], ecx
.text:0040165D                 call    sub_404250
.text:00401662                 test    al, al
.text:00401664                 jnz     loc_401586
.text:0040166A                 mov     [esp+2FCh+Str1], offset aBeforeLe ; "before -le"
.text:00401671                 jmp     short loc_401605
.text:00401673 ; ---------------------------------------------------------------------------
.text:00401673
.text:00401673 loc_401673:                             ; CODE XREF: sub_4013A0+137↑j
.text:00401673                 cmp     byte ptr [eax+3], 0
.text:00401677                 jnz     loc_4014DD
.text:0040167D                 cmp     [esp+2FCh+var_2CD], 0
.text:00401682                 jz      loc_401726
.text:00401688                 mov     ecx, [ebx+ebp*4-4]
.text:0040168C                 mov     [esp+2FCh+Str1], ecx ; Str
.text:0040168F                 call    strlen
.text:00401694                 mov     [esp+2FCh+var_2C4], eax
.text:00401698                 mov     [esp+2FCh+var_2C0], 0
.text:004016A0
.text:004016A0 loc_4016A0:                             ; CODE XREF: sub_4013A0+39C↓j
.text:004016A0                 cmp     [esp+2FCh+var_2CE], 0
.text:004016A5                 jz      short loc_4016FC
.text:004016A7                 mov     edx, ds:dword_410020
.text:004016AD                 mov     ebx, [edx+ebp*4+8]
.text:004016B1                 mov     [esp+2FCh+Str1], ebx ; Str
.text:004016B4                 call    strlen
.text:004016B9                 mov     [esp+2FCh+var_2CC], eax
.text:004016BD                 mov     [esp+2FCh+var_2C8], 0
.text:004016C5
.text:004016C5 loc_4016C5:                             ; CODE XREF: sub_4013A0+378↓j
.text:004016C5                 add     ds:dword_410000, 3
.text:004016CC                 mov     eax, 1
.text:004016D1                 mov     ebp, [esp+2FCh+var_2C0]
.text:004016D5                 mov     edi, [esp+2FCh+var_2C8]
.text:004016D9                 mov     ebx, [esp+2FCh+var_2C4]
.text:004016DD                 mov     edx, [esp+2FCh+var_2CC]
.text:004016E1                 cmp     ebp, edi
.text:004016E3                 jl      loc_40145C
.text:004016E9                 jg      loc_4015D9
.text:004016EF                 cmp     ebx, edx
.text:004016F1                 jb      loc_40145C
.text:004016F7                 jmp     loc_4015D9
.text:004016FC ; ---------------------------------------------------------------------------
.text:004016FC
.text:004016FC loc_4016FC:                             ; CODE XREF: sub_4013A0+305↑j
.text:004016FC                 mov     esi, ds:dword_410020
.text:00401702                 lea     edi, [esp+2FCh+var_2CC]
.text:00401706                 mov     [esp+2FCh+Str2], edi
.text:0040170A                 mov     ecx, [esi+ebp*4+4]
.text:0040170E                 mov     [esp+2FCh+Str1], ecx
.text:00401711                 call    sub_404250
.text:00401716                 test    al, al
.text:00401718                 jnz     short loc_4016C5
.text:0040171A                 mov     [esp+2FCh+Str1], offset aAfterLt ; "after -lt"
.text:00401721                 jmp     loc_401605
.text:00401726 ; ---------------------------------------------------------------------------
.text:00401726
.text:00401726 loc_401726:                             ; CODE XREF: sub_4013A0+2E2↑j
.text:00401726                 lea     edi, [esp+2FCh+var_2C4]
.text:0040172A                 mov     [esp+2FCh+Str2], edi
.text:0040172E                 mov     esi, [ebx+ebp*4-4]
.text:00401732                 mov     [esp+2FCh+Str1], esi
.text:00401735                 call    sub_404250
.text:0040173A                 test    al, al
.text:0040173C                 jnz     loc_4016A0
.text:00401742                 mov     [esp+2FCh+Str1], offset aBeforeLt ; "before -lt"
.text:00401749                 jmp     loc_401605
.text:00401749 ; ---------------------------------------------------------------------------
.text:0040174E                 align 10h
.text:00401750
.text:00401750 loc_401750:                             ; CODE XREF: sub_4013A0+FC↑j
.text:00401750                                         ; DATA XREF: sub_4013A0:jpt_40149C↑o
.text:00401750                 mov     eax, [ebx+ebp*4] ; jumptable 0040149C case 101
.text:00401753                 cmp     byte ptr [eax+2], 71h ; 'q'
.text:00401757                 jz      loc_401868
.text:0040175D
.text:0040175D loc_40175D:                             ; CODE XREF: sub_4013A0+4CC↓j
.text:0040175D                 mov     eax, [ebx+ebp*4]
.text:00401760                 cmp     byte ptr [eax+2], 66h ; 'f'
.text:00401764                 jnz     def_40149C      ; jumptable 0040149C default case, cases 102,104-107,109
.text:0040176A                 cmp     byte ptr [eax+3], 0
.text:0040176E                 jnz     def_40149C      ; jumptable 0040149C default case, cases 102,104-107,109
.text:00401774                 add     ds:dword_410000, 3
.text:0040177B                 cmp     [esp+2FCh+var_2CE], 0
.text:00401780                 jnz     short loc_401789
.text:00401782                 cmp     [esp+2FCh+var_2CD], 0
.text:00401787                 jz      short loc_4017CA
.text:00401789
.text:00401789 loc_401789:                             ; CODE XREF: sub_4013A0+3E0↑j
.text:00401789                 mov     [esp+2FCh+Str1], offset aEfDoesNotAccep ; "-ef does not accept -l\n"
.text:00401790
.text:00401790 loc_401790:                             ; CODE XREF: sub_4013A0+87E↓j
.text:00401790                                         ; sub_4013A0+937↓j
.text:00401790                 call    ds:__imp_libintl_gettext
.text:00401796                 mov     esi, ds:dword_410020
.text:0040179C                 mov     edx, ds:_iob
.text:004017A2                 mov     ebp, [esi]
.text:004017A4                 mov     [esp+2FCh+Str2], offset Format ; "%s: "
.text:004017AC                 add     edx, 40h ; '@'
.text:004017AF                 mov     ebx, eax
.text:004017B1                 mov     [esp+2FCh+Str1], edx ; Stream
.text:004017B4                 mov     [esp+2FCh+var_2F4], ebp
.text:004017B8                 call    fprintf
.text:004017BD                 mov     [esp+2FCh+var_2F4], 0
.text:004017C5                 jmp     loc_401645
.text:004017CA ; ---------------------------------------------------------------------------
.text:004017CA
.text:004017CA loc_4017CA:                             ; CODE XREF: sub_4013A0+3E7↑j
.text:004017CA                 mov     [esp+2FCh+var_2D9], 0
.text:004017CF                 lea     edx, [esp+2FCh+var_8C]
.text:004017D6                 mov     [esp+2FCh+Str2], edx ; int
.text:004017DA                 mov     ecx, [ebx+ebp*4-4]
.text:004017DE                 mov     [esp+2FCh+Str1], ecx ; char *
.text:004017E1                 call    sub_406060
.text:004017E6                 test    eax, eax
.text:004017E8                 jz      short loc_4017F4
.text:004017EA
.text:004017EA loc_4017EA:                             ; CODE XREF: sub_4013A0+473↓j
.text:004017EA                                         ; sub_4013A0+499↓j ...
.text:004017EA                 movzx   eax, [esp+2FCh+var_2D9]
.text:004017EF                 jmp     loc_40145C
.text:004017F4 ; ---------------------------------------------------------------------------
.text:004017F4
.text:004017F4 loc_4017F4:                             ; CODE XREF: sub_4013A0+448↑j
.text:004017F4                 mov     esi, ds:dword_410020
.text:004017FA                 lea     ebx, [esp+2FCh+var_FC]
.text:00401801                 mov     [esp+2FCh+Str2], ebx ; int
.text:00401805                 mov     edi, [esi+ebp*4+4]
.text:00401809                 mov     [esp+2FCh+Str1], edi ; char *
.text:0040180C                 call    sub_406060
.text:00401811                 test    eax, eax
.text:00401813                 jnz     short loc_4017EA
.text:00401815                 mov     edx, [esp+2FCh+var_78]
.text:0040181C                 mov     edi, [esp+2FCh+var_7C]
.text:00401823                 mov     ebp, [esp+2FCh+var_EC]
.text:0040182A                 mov     ecx, [esp+2FCh+var_E8]
.text:00401831                 mov     eax, edx
.text:00401833                 xor     ebp, edi
.text:00401835                 xor     eax, ecx
.text:00401837                 or      eax, ebp
.text:00401839                 jnz     short loc_4017EA
.text:0040183B                 mov     ecx, [esp+2FCh+var_80]
.text:00401842                 mov     esi, [esp+2FCh+var_84]
.text:00401849                 mov     ebp, [esp+2FCh+var_F4]
.text:00401850                 mov     edi, [esp+2FCh+var_F0]
.text:00401857                 mov     eax, ecx
.text:00401859                 xor     ebp, esi
.text:0040185B                 xor     eax, edi
.text:0040185D                 or      eax, ebp
.text:0040185F                 jnz     short loc_4017EA
.text:00401861                 mov     [esp+2FCh+var_2D9], 1
.text:00401866                 jmp     short loc_4017EA
.text:00401868 ; ---------------------------------------------------------------------------
.text:00401868
.text:00401868 loc_401868:                             ; CODE XREF: sub_4013A0+3B7↑j
.text:00401868                 cmp     byte ptr [eax+3], 0
.text:0040186C                 jnz     loc_40175D
.text:00401872                 cmp     [esp+2FCh+var_2CD], 0
.text:00401877                 jz      loc_401910
.text:0040187D                 mov     ecx, [ebx+ebp*4-4]
.text:00401881                 mov     [esp+2FCh+Str1], ecx ; Str
.text:00401884                 call    strlen
.text:00401889                 mov     [esp+2FCh+var_2C4], eax
.text:0040188D                 mov     [esp+2FCh+var_2C0], 0
.text:00401895
.text:00401895 loc_401895:                             ; CODE XREF: sub_4013A0+586↓j
.text:00401895                 cmp     [esp+2FCh+var_2CE], 0
.text:0040189A                 jz      short loc_4018DF
.text:0040189C                 mov     ebx, ds:dword_410020
.text:004018A2                 mov     esi, [ebx+ebp*4+8]
.text:004018A6                 mov     [esp+2FCh+Str1], esi ; Str
.text:004018A9                 call    strlen
.text:004018AE                 mov     [esp+2FCh+var_2CC], eax
.text:004018B2                 mov     [esp+2FCh+var_2C8], 0
.text:004018BA
.text:004018BA loc_4018BA:                             ; CODE XREF: sub_4013A0+55B↓j
.text:004018BA                 add     ds:dword_410000, 3
.text:004018C1                 mov     eax, [esp+2FCh+var_2C8]
.text:004018C5                 mov     esi, [esp+2FCh+var_2C4]
.text:004018C9                 mov     ebp, [esp+2FCh+var_2C0]
.text:004018CD                 mov     ebx, [esp+2FCh+var_2CC]
.text:004018D1                 xor     ebp, eax
.text:004018D3                 xor     esi, ebx
.text:004018D5                 or      esi, ebp
.text:004018D7                 setz    al
.text:004018DA                 jmp     loc_401459
.text:004018DF ; ---------------------------------------------------------------------------
.text:004018DF
.text:004018DF loc_4018DF:                             ; CODE XREF: sub_4013A0+4FA↑j
.text:004018DF                 mov     edx, ds:dword_410020
.text:004018E5                 lea     edi, [esp+2FCh+var_2CC]
.text:004018E9                 mov     [esp+2FCh+Str2], edi
.text:004018ED                 mov     ecx, [edx+ebp*4+4]
.text:004018F1                 mov     [esp+2FCh+Str1], ecx
.text:004018F4                 call    sub_404250
.text:004018F9                 test    al, al
.text:004018FB                 jnz     short loc_4018BA
.text:004018FD                 mov     [esp+2FCh+Str1], offset aAfterEq ; "after -eq"
.text:00401904                 jmp     loc_401605
.text:00401904 ; ---------------------------------------------------------------------------
.text:00401909                 align 10h
.text:00401910
.text:00401910 loc_401910:                             ; CODE XREF: sub_4013A0+4D7↑j
.text:00401910                 lea     edi, [esp+2FCh+var_2C4]
.text:00401914                 mov     [esp+2FCh+Str2], edi
.text:00401918                 mov     edx, [ebx+ebp*4-4]
.text:0040191C                 mov     [esp+2FCh+Str1], edx
.text:0040191F                 call    sub_404250
.text:00401924                 test    al, al
.text:00401926                 jnz     loc_401895
.text:0040192C                 mov     [esp+2FCh+Str1], offset aBeforeEq ; "before -eq"
.text:00401933                 jmp     loc_401605
.text:00401938 ; ---------------------------------------------------------------------------
.text:00401938
.text:00401938 loc_401938:                             ; CODE XREF: sub_4013A0+FC↑j
.text:00401938                                         ; DATA XREF: sub_4013A0:jpt_40149C↑o
.text:00401938                 mov     eax, [ebx+ebp*4] ; jumptable 0040149C case 103
.text:0040193B                 cmp     byte ptr [eax+2], 74h ; 't'
.text:0040193F                 jz      loc_401A30
.text:00401945
.text:00401945 loc_401945:                             ; CODE XREF: sub_4013A0+694↓j
.text:00401945                 mov     eax, [ebx+ebp*4]
.text:00401948                 cmp     byte ptr [eax+2], 65h ; 'e'
.text:0040194C                 jnz     def_40149C      ; jumptable 0040149C default case, cases 102,104-107,109
.text:00401952                 cmp     byte ptr [eax+3], 0
.text:00401956                 jnz     def_40149C      ; jumptable 0040149C default case, cases 102,104-107,109
.text:0040195C                 cmp     [esp+2FCh+var_2CD], 0
.text:00401961                 jz      loc_401A05
.text:00401967                 mov     edx, [ebx+ebp*4-4]
.text:0040196B                 mov     [esp+2FCh+Str1], edx ; Str
.text:0040196E                 call    strlen
.text:00401973                 mov     [esp+2FCh+var_2C4], eax
.text:00401977                 mov     [esp+2FCh+var_2C0], 0
.text:0040197F
.text:0040197F loc_40197F:                             ; CODE XREF: sub_4013A0+67B↓j
.text:0040197F                 cmp     [esp+2FCh+var_2CE], 0
.text:00401984                 jz      short loc_4019DB
.text:00401986                 mov     edi, ds:dword_410020
.text:0040198C                 mov     ebx, [edi+ebp*4+8]
.text:00401990                 mov     [esp+2FCh+Str1], ebx ; Str
.text:00401993                 call    strlen
.text:00401998                 mov     [esp+2FCh+var_2CC], eax
.text:0040199C                 mov     [esp+2FCh+var_2C8], 0
.text:004019A4
.text:004019A4 loc_4019A4:                             ; CODE XREF: sub_4013A0+657↓j
.text:004019A4                 add     ds:dword_410000, 3
.text:004019AB                 mov     eax, 1
.text:004019B0                 mov     edi, [esp+2FCh+var_2C0]
.text:004019B4                 mov     ebp, [esp+2FCh+var_2C8]
.text:004019B8                 mov     ebx, [esp+2FCh+var_2C4]
.text:004019BC                 mov     edx, [esp+2FCh+var_2CC]
.text:004019C0                 cmp     edi, ebp
.text:004019C2                 jg      loc_40145C
.text:004019C8                 jl      loc_4015D9
.text:004019CE                 cmp     ebx, edx
.text:004019D0                 jnb     loc_40145C
.text:004019D6                 jmp     loc_4015D9
.text:004019DB ; ---------------------------------------------------------------------------
.text:004019DB
.text:004019DB loc_4019DB:                             ; CODE XREF: sub_4013A0+5E4↑j
.text:004019DB                 mov     ecx, ds:dword_410020
.text:004019E1                 lea     esi, [esp+2FCh+var_2CC]
.text:004019E5                 mov     [esp+2FCh+Str2], esi
.text:004019E9                 mov     edx, [ecx+ebp*4+4]
.text:004019ED                 mov     [esp+2FCh+Str1], edx
.text:004019F0                 call    sub_404250
.text:004019F5                 test    al, al
.text:004019F7                 jnz     short loc_4019A4
.text:004019F9                 mov     [esp+2FCh+Str1], offset aAfterGe ; "after -ge"
.text:00401A00                 jmp     loc_401605
.text:00401A05 ; ---------------------------------------------------------------------------
.text:00401A05
.text:00401A05 loc_401A05:                             ; CODE XREF: sub_4013A0+5C1↑j
.text:00401A05                 lea     esi, [esp+2FCh+var_2C4]
.text:00401A09                 mov     [esp+2FCh+Str2], esi
.text:00401A0D                 mov     ecx, [ebx+ebp*4-4]
.text:00401A11                 mov     [esp+2FCh+Str1], ecx
.text:00401A14                 call    sub_404250
.text:00401A19                 test    al, al
.text:00401A1B                 jnz     loc_40197F
.text:00401A21                 mov     [esp+2FCh+Str1], offset aBeforeGe ; "before -ge"
.text:00401A28                 jmp     loc_401605
.text:00401A28 ; ---------------------------------------------------------------------------
.text:00401A2D                 align 10h
.text:00401A30
.text:00401A30 loc_401A30:                             ; CODE XREF: sub_4013A0+59F↑j
.text:00401A30                 cmp     byte ptr [eax+3], 0
.text:00401A34                 jnz     loc_401945
.text:00401A3A                 cmp     [esp+2FCh+var_2CD], 0
.text:00401A3F                 jz      loc_401AE3
.text:00401A45                 mov     edx, [ebx+ebp*4-4]
.text:00401A49                 mov     [esp+2FCh+Str1], edx ; Str
.text:00401A4C                 call    strlen
.text:00401A51                 mov     [esp+2FCh+var_2C4], eax
.text:00401A55                 mov     [esp+2FCh+var_2C0], 0
.text:00401A5D
.text:00401A5D loc_401A5D:                             ; CODE XREF: sub_4013A0+759↓j
.text:00401A5D                 cmp     [esp+2FCh+var_2CE], 0
.text:00401A62                 jz      short loc_401AB9
.text:00401A64                 mov     edi, ds:dword_410020
.text:00401A6A                 mov     ebx, [edi+ebp*4+8]
.text:00401A6E                 mov     [esp+2FCh+Str1], ebx ; Str
.text:00401A71                 call    strlen
.text:00401A76                 mov     [esp+2FCh+var_2CC], eax
.text:00401A7A                 mov     [esp+2FCh+var_2C8], 0
.text:00401A82
.text:00401A82 loc_401A82:                             ; CODE XREF: sub_4013A0+735↓j
.text:00401A82                 add     ds:dword_410000, 3
.text:00401A89                 mov     eax, 1
.text:00401A8E                 mov     edi, [esp+2FCh+var_2C0]
.text:00401A92                 mov     ebp, [esp+2FCh+var_2C8]
.text:00401A96                 mov     ebx, [esp+2FCh+var_2C4]
.text:00401A9A                 mov     edx, [esp+2FCh+var_2CC]
.text:00401A9E                 cmp     edi, ebp
.text:00401AA0                 jg      loc_40145C
.text:00401AA6                 jl      loc_4015D9
.text:00401AAC                 cmp     ebx, edx
.text:00401AAE                 ja      loc_40145C
.text:00401AB4                 jmp     loc_4015D9
.text:00401AB9 ; ---------------------------------------------------------------------------
.text:00401AB9
.text:00401AB9 loc_401AB9:                             ; CODE XREF: sub_4013A0+6C2↑j
.text:00401AB9                 mov     ecx, ds:dword_410020
.text:00401ABF                 lea     esi, [esp+2FCh+var_2CC]
.text:00401AC3                 mov     [esp+2FCh+Str2], esi
.text:00401AC7                 mov     edx, [ecx+ebp*4+4]
.text:00401ACB                 mov     [esp+2FCh+Str1], edx
.text:00401ACE                 call    sub_404250
.text:00401AD3                 test    al, al
.text:00401AD5                 jnz     short loc_401A82
.text:00401AD7                 mov     [esp+2FCh+Str1], offset aAfterGt ; "after -gt"
.text:00401ADE                 jmp     loc_401605
.text:00401AE3 ; ---------------------------------------------------------------------------
.text:00401AE3
.text:00401AE3 loc_401AE3:                             ; CODE XREF: sub_4013A0+69F↑j
.text:00401AE3                 lea     esi, [esp+2FCh+var_2C4]
.text:00401AE7                 mov     [esp+2FCh+Str2], esi
.text:00401AEB                 mov     ecx, [ebx+ebp*4-4]
.text:00401AEF                 mov     [esp+2FCh+Str1], ecx
.text:00401AF2                 call    sub_404250
.text:00401AF7                 test    al, al
.text:00401AF9                 jnz     loc_401A5D
.text:00401AFF                 mov     [esp+2FCh+Str1], offset aBeforeGt ; "before -gt"
.text:00401B06                 jmp     loc_401605
.text:00401B06 ; ---------------------------------------------------------------------------
.text:00401B0B                 align 10h
.text:00401B10
.text:00401B10 loc_401B10:                             ; CODE XREF: sub_4013A0+FC↑j
.text:00401B10                                         ; DATA XREF: sub_4013A0:jpt_40149C↑o
.text:00401B10                 mov     eax, [ebx+ebp*4] ; jumptable 0040149C case 110
.text:00401B13                 cmp     byte ptr [eax+2], 74h ; 't'
.text:00401B17                 jz      loc_401BF8
.text:00401B1D
.text:00401B1D loc_401B1D:                             ; CODE XREF: sub_4013A0+85C↓j
.text:00401B1D                 mov     eax, [ebx+ebp*4]
.text:00401B20                 cmp     byte ptr [eax+2], 65h ; 'e'
.text:00401B24                 jnz     def_40149C      ; jumptable 0040149C default case, cases 102,104-107,109
.text:00401B2A                 cmp     byte ptr [eax+3], 0
.text:00401B2E                 jnz     def_40149C      ; jumptable 0040149C default case, cases 102,104-107,109
.text:00401B34                 cmp     [esp+2FCh+var_2CD], 0
.text:00401B39                 jz      loc_401BD0
.text:00401B3F                 mov     esi, [ebx+ebp*4-4]
.text:00401B43                 mov     [esp+2FCh+Str1], esi ; Str
.text:00401B46                 call    strlen
.text:00401B4B                 mov     [esp+2FCh+var_2C4], eax
.text:00401B4F                 mov     [esp+2FCh+var_2C0], 0
.text:00401B57
.text:00401B57 loc_401B57:                             ; CODE XREF: sub_4013A0+846↓j
.text:00401B57                 cmp     [esp+2FCh+var_2CE], 0
.text:00401B5C                 jz      short loc_401BA1
.text:00401B5E                 mov     ecx, ds:dword_410020
.text:00401B64                 mov     ebx, [ecx+ebp*4+8]
.text:00401B68                 mov     [esp+2FCh+Str1], ebx ; Str
.text:00401B6B                 call    strlen
.text:00401B70                 mov     [esp+2FCh+var_2CC], eax
.text:00401B74                 mov     [esp+2FCh+var_2C8], 0
.text:00401B7C
.text:00401B7C loc_401B7C:                             ; CODE XREF: sub_4013A0+81D↓j
.text:00401B7C                 add     ds:dword_410000, 3
.text:00401B83                 mov     eax, [esp+2FCh+var_2C8]
.text:00401B87                 mov     esi, [esp+2FCh+var_2C4]
.text:00401B8B                 mov     ebp, [esp+2FCh+var_2C0]
.text:00401B8F                 mov     ebx, [esp+2FCh+var_2CC]
.text:00401B93                 xor     ebp, eax
.text:00401B95                 xor     esi, ebx
.text:00401B97                 or      esi, ebp
.text:00401B99                 setnz   al
.text:00401B9C                 jmp     loc_401459
.text:00401BA1 ; ---------------------------------------------------------------------------
.text:00401BA1
.text:00401BA1 loc_401BA1:                             ; CODE XREF: sub_4013A0+7BC↑j
.text:00401BA1                 mov     edx, ds:dword_410020
.text:00401BA7                 lea     edi, [esp+2FCh+var_2CC]
.text:00401BAB                 mov     [esp+2FCh+Str2], edi
.text:00401BAF                 mov     esi, [edx+ebp*4+4]
.text:00401BB3                 mov     [esp+2FCh+Str1], esi
.text:00401BB6                 call    sub_404250
.text:00401BBB                 test    al, al
.text:00401BBD                 jnz     short loc_401B7C
.text:00401BBF                 mov     [esp+2FCh+Str1], offset aAfterNe ; "after -ne"
.text:00401BC6                 jmp     loc_401605
.text:00401BC6 ; ---------------------------------------------------------------------------
.text:00401BCB                 align 10h
.text:00401BD0
.text:00401BD0 loc_401BD0:                             ; CODE XREF: sub_4013A0+799↑j
.text:00401BD0                 lea     edi, [esp+2FCh+var_2C4]
.text:00401BD4                 mov     [esp+2FCh+Str2], edi
.text:00401BD8                 mov     edx, [ebx+ebp*4-4]
.text:00401BDC                 mov     [esp+2FCh+Str1], edx
.text:00401BDF                 call    sub_404250
.text:00401BE4                 test    al, al
.text:00401BE6                 jnz     loc_401B57
.text:00401BEC                 mov     [esp+2FCh+Str1], offset aBeforeNe ; "before -ne"
.text:00401BF3                 jmp     loc_401605
.text:00401BF8 ; ---------------------------------------------------------------------------
.text:00401BF8
.text:00401BF8 loc_401BF8:                             ; CODE XREF: sub_4013A0+777↑j
.text:00401BF8                 cmp     byte ptr [eax+3], 0
.text:00401BFC                 jnz     loc_401B1D
.text:00401C02                 add     ds:dword_410000, 3
.text:00401C09                 cmp     [esp+2FCh+var_2CE], 0
.text:00401C0E                 jnz     short loc_401C17
.text:00401C10                 cmp     [esp+2FCh+var_2CD], 0
.text:00401C15                 jz      short loc_401C23
.text:00401C17
.text:00401C17 loc_401C17:                             ; CODE XREF: sub_4013A0+86E↑j
.text:00401C17                 mov     [esp+2FCh+Str1], offset aNtDoesNotAccep ; "-nt does not accept -l\n"
.text:00401C1E                 jmp     loc_401790
.text:00401C23 ; ---------------------------------------------------------------------------
.text:00401C23
.text:00401C23 loc_401C23:                             ; CODE XREF: sub_4013A0+875↑j
.text:00401C23                 mov     ecx, [ebx+ebp*4-4]
.text:00401C27                 lea     eax, [esp+2FCh+var_16C]
.text:00401C2E                 mov     [esp+2FCh+Str2], eax ; int
.text:00401C32                 mov     [esp+2FCh+Str1], ecx ; char *
.text:00401C35                 call    sub_406060
.text:00401C3A                 test    eax, eax
.text:00401C3C                 setz    al
.text:00401C3F                 test    al, al
.text:00401C41                 jz      short loc_401C4E
.text:00401C43                 mov     ebx, [esp+2FCh+var_12C]
.text:00401C4A                 mov     [esp+2FCh+var_2D4], ebx
.text:00401C4E
.text:00401C4E loc_401C4E:                             ; CODE XREF: sub_4013A0+8A1↑j
.text:00401C4E                 mov     edi, ds:dword_410020
.text:00401C54                 lea     edx, [esp+2FCh+var_1DC]
.text:00401C5B                 mov     bl, al
.text:00401C5D                 mov     esi, [edi+ebp*4+4]
.text:00401C61                 mov     [esp+2FCh+Str2], edx ; int
.text:00401C65                 mov     [esp+2FCh+Str1], esi ; char *
.text:00401C68                 call    sub_406060
.text:00401C6D                 test    eax, eax
.text:00401C6F                 setz    dl
.text:00401C72                 test    dl, dl
.text:00401C74                 jz      short loc_401C81
.text:00401C76                 mov     ebp, [esp+2FCh+var_19C]
.text:00401C7D                 mov     [esp+2FCh+var_2D8], ebp
.text:00401C81
.text:00401C81 loc_401C81:                             ; CODE XREF: sub_4013A0+8D4↑j
.text:00401C81                 xor     eax, eax
.text:00401C83                 cmp     bl, dl
.text:00401C85                 ja      short loc_401C9D
.text:00401C87                 test    bl, bl
.text:00401C89                 jz      loc_401459
.text:00401C8F                 mov     ecx, [esp+2FCh+var_2D8]
.text:00401C93                 cmp     [esp+2FCh+var_2D4], ecx
.text:00401C97                 jle     loc_401459
.text:00401C9D
.text:00401C9D loc_401C9D:                             ; CODE XREF: sub_4013A0+8E5↑j
.text:00401C9D                                         ; sub_4013A0+99D↓j ...
.text:00401C9D                 mov     al, 1
.text:00401C9F                 jmp     loc_401459
.text:00401CA4 ; ---------------------------------------------------------------------------
.text:00401CA4
.text:00401CA4 loc_401CA4:                             ; CODE XREF: sub_4013A0+FC↑j
.text:00401CA4                                         ; DATA XREF: sub_4013A0:jpt_40149C↑o
.text:00401CA4                 mov     eax, [ebx+ebp*4] ; jumptable 0040149C case 111
.text:00401CA7                 cmp     byte ptr [eax+2], 74h ; 't'
.text:00401CAB                 jnz     def_40149C      ; jumptable 0040149C default case, cases 102,104-107,109
.text:00401CB1                 cmp     byte ptr [eax+3], 0
.text:00401CB5                 jnz     def_40149C      ; jumptable 0040149C default case, cases 102,104-107,109
.text:00401CBB                 add     ds:dword_410000, 3
.text:00401CC2                 cmp     [esp+2FCh+var_2CE], 0
.text:00401CC7                 jnz     short loc_401CD0
.text:00401CC9                 cmp     [esp+2FCh+var_2CD], 0
.text:00401CCE                 jz      short loc_401CDC
.text:00401CD0
.text:00401CD0 loc_401CD0:                             ; CODE XREF: sub_4013A0+927↑j
.text:00401CD0                 mov     [esp+2FCh+Str1], offset aOtDoesNotAccep ; "-ot does not accept -l\n"
.text:00401CD7                 jmp     loc_401790
.text:00401CDC ; ---------------------------------------------------------------------------
.text:00401CDC
.text:00401CDC loc_401CDC:                             ; CODE XREF: sub_4013A0+92E↑j
.text:00401CDC                 mov     edi, [ebx+ebp*4-4]
.text:00401CE0                 lea     ebx, [esp+2FCh+var_24C]
.text:00401CE7                 mov     [esp+2FCh+Str2], ebx ; int
.text:00401CEB                 mov     [esp+2FCh+Str1], edi ; char *
.text:00401CEE                 call    sub_406060
.text:00401CF3                 test    eax, eax
.text:00401CF5                 setz    al
.text:00401CF8                 test    al, al
.text:00401CFA                 jz      short loc_401D07
.text:00401CFC                 mov     ecx, [esp+2FCh+var_20C]
.text:00401D03                 mov     [esp+2FCh+var_2E0], ecx
.text:00401D07
.text:00401D07 loc_401D07:                             ; CODE XREF: sub_4013A0+95A↑j
.text:00401D07                 mov     edi, ds:dword_410020
.text:00401D0D                 lea     edx, [esp+2FCh+var_2BC]
.text:00401D11                 mov     bl, al
.text:00401D13                 mov     esi, [edi+ebp*4+4]
.text:00401D17                 mov     [esp+2FCh+Str2], edx ; int
.text:00401D1B                 mov     [esp+2FCh+Str1], esi ; char *
.text:00401D1E                 call    sub_406060
.text:00401D23                 test    eax, eax
.text:00401D25                 setz    al
.text:00401D28                 test    al, al
.text:00401D2A                 jz      short loc_401D37
.text:00401D2C                 mov     ebp, [esp+2FCh+var_27C]
.text:00401D33                 mov     [esp+2FCh+var_2E4], ebp
.text:00401D37
.text:00401D37 loc_401D37:                             ; CODE XREF: sub_4013A0+98A↑j
.text:00401D37                 mov     dl, al
.text:00401D39                 xor     eax, eax
.text:00401D3B                 cmp     bl, dl
.text:00401D3D                 jb      loc_401C9D
.text:00401D43                 test    dl, dl
.text:00401D45                 jz      loc_401459
.text:00401D4B                 mov     ebx, [esp+2FCh+var_2E4]
.text:00401D4F                 cmp     [esp+2FCh+var_2E0], ebx
.text:00401D53                 jge     loc_401459
.text:00401D59                 jmp     loc_401C9D
.text:00401D59 ; ---------------------------------------------------------------------------
.text:00401D5E                 align 10h
.text:00401D60
.text:00401D60 loc_401D60:                             ; CODE XREF: sub_4013A0+54↑j
.text:00401D60                                         ; sub_4013A0+9D6↓j
.text:00401D60                 mov     [esp+2FCh+var_2CE], 0
.text:00401D65                 jmp     loc_401410
.text:00401D65 ; ---------------------------------------------------------------------------
.text:00401D6A                 align 10h
.text:00401D70
.text:00401D70 loc_401D70:                             ; CODE XREF: sub_4013A0+37↑j
.text:00401D70                 mov     ebx, ds:dword_410020
.text:00401D76                 jmp     short loc_401D60
.text:00401D78 ; ---------------------------------------------------------------------------
.text:00401D78
.text:00401D78 loc_401D78:                             ; CODE XREF: sub_4013A0+18↑j
.text:00401D78                 mov     eax, ds:dword_410000
.text:00401D7D                 jmp     loc_4013C9
.text:00401D82 ; ---------------------------------------------------------------------------
.text:00401D82
.text:00401D82 loc_401D82:                             ; CODE XREF: sub_4013A0+8E↑j
.text:00401D82                 call    abort
.text:00401D82 sub_4013A0      endp
.text:00401D82
.text:00401D82 ; ---------------------------------------------------------------------------
.text:00401D87 aMissingArgumen db 'missing argument after %s',0
.text:00401D87                                         ; DATA XREF: sub_401DB0:loc_401F24↓o
.text:00401D87                                         ; sub_4027A0:loc_402853↓o ...
.text:00401DA1 aAfterT         db 'after -t',0         ; DATA XREF: sub_401DB0:loc_402425↓o
.text:00401DAA                 align 10h
.text:00401DB0
.text:00401DB0 ; =============== S U B R O U T I N E =======================================
.text:00401DB0
.text:00401DB0
.text:00401DB0 sub_401DB0      proc near               ; CODE XREF: sub_4027A0+14C↓p
.text:00401DB0                                         ; sub_4027A0+238↓p ...
.text:00401DB0
.text:00401DB0 Stream          = dword ptr -9Ch
.text:00401DB0 Format          = dword ptr -98h
.text:00401DB0 var_94          = dword ptr -94h
.text:00401DB0 FileHandle      = dword ptr -84h
.text:00401DB0 var_80          = dword ptr -80h
.text:00401DB0 var_7C          = dword ptr -7Ch
.text:00401DB0 var_60          = dword ptr -60h
.text:00401DB0 var_5C          = dword ptr -5Ch
.text:00401DB0 var_4C          = dword ptr -4Ch
.text:00401DB0 var_48          = dword ptr -48h
.text:00401DB0 var_8           = dword ptr -8
.text:00401DB0 var_4           = dword ptr -4
.text:00401DB0
.text:00401DB0                 sub     esp, 9Ch
.text:00401DB6                 mov     edx, ds:dword_410000
.text:00401DBC                 mov     [esp+9Ch+var_8], ebx
.text:00401DC3                 mov     ecx, ds:dword_410020
.text:00401DC9                 mov     [esp+9Ch+var_4], esi
.text:00401DD0                 mov     ebx, [ecx+edx*4]
.text:00401DD3                 movsx   eax, byte ptr [ebx+1]
.text:00401DD7                 sub     eax, 47h ; 'G'  ; switch 52 cases
.text:00401DDA                 cmp     eax, 33h
.text:00401DDD                 ja      def_401DE3      ; jumptable 00401DE3 default case, cases 72-75,77,78,80-82,84-96,105,106,108,109,111,113,118,121
.text:00401DE3                 jmp     ds:jpt_401DE3[eax*4] ; switch jump
.text:00401DE3 ; ---------------------------------------------------------------------------
.text:00401DEA                 align 4
.text:00401DEC jpt_401DE3      dd offset loc_401ED7, offset def_401DE3, offset def_401DE3
.text:00401DEC                                         ; DATA XREF: sub_401DB0+33↑r
.text:00401DEC                 dd offset def_401DE3, offset def_401DE3, offset loc_402211 ; jump table for switch statement
.text:00401DEC                 dd offset def_401DE3, offset def_401DE3, offset loc_401FA7
.text:00401DEC                 dd offset def_401DE3, offset def_401DE3, offset def_401DE3
.text:00401DEC                 dd offset loc_401FF1, offset def_401DE3, offset def_401DE3
.text:00401DEC                 dd offset def_401DE3, offset def_401DE3, offset def_401DE3
.text:00401DEC                 dd offset def_401DE3, offset def_401DE3, offset def_401DE3
.text:00401DEC                 dd offset def_401DE3, offset def_401DE3, offset def_401DE3
.text:00401DEC                 dd offset def_401DE3, offset def_401DE3, offset loc_402135
.text:00401DEC                 dd offset loc_402042, offset loc_402093, offset loc_4020E4
.text:00401DEC                 dd offset loc_402135, offset loc_402174, offset loc_4021C5
.text:00401DEC                 dd offset loc_402211, offset def_401DE3, offset def_401DE3
.text:00401DEC                 dd offset loc_402262, offset def_401DE3, offset def_401DE3
.text:00401DEC                 dd offset loc_4022A8, offset def_401DE3, offset loc_4022D5
.text:00401DEC                 dd offset def_401DE3, offset loc_402326, offset loc_40235C
.text:00401DEC                 dd offset loc_4023C0, offset loc_402475, offset def_401DE3
.text:00401DEC                 dd offset loc_4024BB, offset loc_4024DD, offset def_401DE3
.text:00401DEC                 dd offset loc_4024FF
.text:00401EBC                 align 10h
.text:00401EC0
.text:00401EC0 def_401DE3:                             ; CODE XREF: sub_401DB0+2D↑j
.text:00401EC0                                         ; sub_401DB0+33↑j
.text:00401EC0                                         ; DATA XREF: ...
.text:00401EC0                 xor     eax, eax        ; jumptable 00401DE3 default case, cases 72-75,77,78,80-82,84-96,105,106,108,109,111,113,118,121
.text:00401EC2
.text:00401EC2 loc_401EC2:                             ; CODE XREF: sub_401DB0+163↓j
.text:00401EC2                                         ; sub_401DB0+3BF↓j
.text:00401EC2                 mov     ebx, [esp+9Ch+var_8]
.text:00401EC9                 mov     esi, [esp+9Ch+var_4]
.text:00401ED0                 add     esp, 9Ch
.text:00401ED6                 retn
.text:00401ED7 ; ---------------------------------------------------------------------------
.text:00401ED7
.text:00401ED7 loc_401ED7:                             ; CODE XREF: sub_401DB0+33↑j
.text:00401ED7                                         ; DATA XREF: sub_401DB0:jpt_401DE3↑o
.text:00401ED7                 lea     ebx, [edx+1]    ; jumptable 00401DE3 case 71
.text:00401EDA                 cmp     ebx, ds:dword_410010
.text:00401EE0                 mov     ds:dword_410000, ebx
.text:00401EE6                 jge     short loc_401F24
.text:00401EE8                 lea     esi, [esp+9Ch+var_7C]
.text:00401EEC                 add     edx, 2
.text:00401EEF                 xor     ebx, ebx
.text:00401EF1                 mov     [esp+9Ch+Format], esi ; int
.text:00401EF5                 mov     esi, [ecx+edx*4-4]
.text:00401EF9                 mov     ds:dword_410000, edx
.text:00401EFF                 mov     [esp+9Ch+Stream], esi ; char *
.text:00401F02                 call    sub_406060
.text:00401F07                 test    eax, eax
.text:00401F09                 jz      short loc_401F15
.text:00401F0B                 nop
.text:00401F0C                 lea     esi, [esi+0]
.text:00401F10
.text:00401F10 loc_401F10:                             ; CODE XREF: sub_401DB0:loc_401F1E↓j
.text:00401F10                                         ; sub_401DB0+172↓j ...
.text:00401F10                 movzx   eax, bl
.text:00401F13                 jmp     short loc_401EC2
.text:00401F15 ; ---------------------------------------------------------------------------
.text:00401F15
.text:00401F15 loc_401F15:                             ; CODE XREF: sub_401DB0+159↑j
.text:00401F15                 call    sub_406150
.text:00401F1A                 cmp     eax, [esp+9Ch+var_5C]
.text:00401F1E
.text:00401F1E loc_401F1E:                             ; CODE XREF: sub_401DB0+23C↓j
.text:00401F1E                                         ; sub_401DB0+28D↓j ...
.text:00401F1E                 jnz     short loc_401F10
.text:00401F20
.text:00401F20 loc_401F20:                             ; CODE XREF: sub_401DB0+45C↓j
.text:00401F20                                         ; sub_401DB0+5FA↓j ...
.text:00401F20                 mov     bl, 1
.text:00401F22                 jmp     short loc_401F10
.text:00401F24 ; ---------------------------------------------------------------------------
.text:00401F24
.text:00401F24 loc_401F24:                             ; CODE XREF: sub_401DB0+136↑j
.text:00401F24                                         ; sub_401DB0+206↓j ...
.text:00401F24                 mov     [esp+9Ch+Stream], offset aMissingArgumen ; "missing argument after %s"
.text:00401F2B                 call    ds:__imp_libintl_gettext
.text:00401F31                 mov     ecx, ds:dword_410020
.text:00401F37                 mov     esi, eax
.text:00401F39                 mov     eax, ds:dword_410010
.text:00401F3E                 mov     ebx, [ecx+eax*4-4]
.text:00401F42                 mov     [esp+9Ch+Stream], ebx ; char *
.text:00401F45                 call    sub_4044E0
.text:00401F4A                 mov     ecx, ds:dword_410020
.text:00401F50                 mov     ebx, eax
.text:00401F52                 mov     edx, [ecx]
.text:00401F54                 mov     [esp+9Ch+Format], offset Format ; "%s: "
.text:00401F5C                 mov     ecx, ds:_iob
.text:00401F62                 mov     [esp+9Ch+var_94], edx
.text:00401F66                 add     ecx, 40h ; '@'
.text:00401F69                 mov     [esp+9Ch+Stream], ecx ; Stream
.text:00401F6C                 call    fprintf
.text:00401F71                 mov     [esp+9Ch+var_94], ebx
.text:00401F75                 mov     [esp+9Ch+Format], esi ; Format
.text:00401F79
.text:00401F79 loc_401F79:                             ; CODE XREF: sub_401DB0+6C0↓j
.text:00401F79                 mov     edx, ds:_iob
.text:00401F7F                 add     edx, 40h ; '@'
.text:00401F82                 mov     [esp+9Ch+Stream], edx ; Stream
.text:00401F85                 call    fprintf
.text:00401F8A                 mov     esi, ds:_iob
.text:00401F90                 add     esi, 40h ; '@'
.text:00401F93                 mov     [esp+9Ch+Stream], esi ; Stream
.text:00401F96                 call    fflush
.text:00401F9B                 mov     [esp+9Ch+Stream], 2 ; Code
.text:00401FA2                 call    exit
.text:00401FA7 ; ---------------------------------------------------------------------------
.text:00401FA7
.text:00401FA7 loc_401FA7:                             ; CODE XREF: sub_401DB0+33↑j
.text:00401FA7                                         ; DATA XREF: sub_401DB0:jpt_401DE3↑o
.text:00401FA7                 lea     ebx, [edx+1]    ; jumptable 00401DE3 case 79
.text:00401FAA                 cmp     ebx, ds:dword_410010
.text:00401FB0                 mov     ds:dword_410000, ebx
.text:00401FB6                 jge     loc_401F24
.text:00401FBC                 lea     esi, [esp+9Ch+var_7C]
.text:00401FC0                 add     edx, 2
.text:00401FC3                 xor     ebx, ebx
.text:00401FC5                 mov     [esp+9Ch+Format], esi ; int
.text:00401FC9                 mov     esi, [ecx+edx*4-4]
.text:00401FCD                 mov     ds:dword_410000, edx
.text:00401FD3                 mov     [esp+9Ch+Stream], esi ; char *
.text:00401FD6                 call    sub_406060
.text:00401FDB                 test    eax, eax
.text:00401FDD                 jnz     loc_401F10
.text:00401FE3                 call    sub_406160
.text:00401FE8                 cmp     eax, [esp+9Ch+var_60]
.text:00401FEC                 jmp     loc_401F1E
.text:00401FF1 ; ---------------------------------------------------------------------------
.text:00401FF1
.text:00401FF1 loc_401FF1:                             ; CODE XREF: sub_401DB0+33↑j
.text:00401FF1                                         ; DATA XREF: sub_401DB0:jpt_401DE3↑o
.text:00401FF1                 lea     ebx, [edx+1]    ; jumptable 00401DE3 case 83
.text:00401FF4                 cmp     ebx, ds:dword_410010
.text:00401FFA                 mov     ds:dword_410000, ebx
.text:00402000                 jge     loc_401F24
.text:00402006                 lea     esi, [esp+9Ch+var_7C]
.text:0040200A                 add     edx, 2
.text:0040200D                 xor     ebx, ebx
.text:0040200F                 mov     [esp+9Ch+Format], esi ; int
.text:00402013                 mov     esi, [ecx+edx*4-4]
.text:00402017                 mov     ds:dword_410000, edx
.text:0040201D                 mov     [esp+9Ch+Stream], esi ; char *
.text:00402020                 call    sub_406060
.text:00402025                 test    eax, eax
.text:00402027                 jnz     loc_401F10
.text:0040202D                 mov     ecx, [esp+9Ch+var_7C]
.text:00402031                 and     ecx, 0F000h
.text:00402037                 cmp     ecx, 0C000h
.text:0040203D                 jmp     loc_401F1E
.text:00402042 ; ---------------------------------------------------------------------------
.text:00402042
.text:00402042 loc_402042:                             ; CODE XREF: sub_401DB0+33↑j
.text:00402042                                         ; DATA XREF: sub_401DB0:jpt_401DE3↑o
.text:00402042                 lea     ebx, [edx+1]    ; jumptable 00401DE3 case 98
.text:00402045                 cmp     ebx, ds:dword_410010
.text:0040204B                 mov     ds:dword_410000, ebx
.text:00402051                 jge     loc_401F24
.text:00402057                 lea     esi, [esp+9Ch+var_7C]
.text:0040205B                 add     edx, 2
.text:0040205E                 xor     ebx, ebx
.text:00402060                 mov     [esp+9Ch+Format], esi ; int
.text:00402064                 mov     esi, [ecx+edx*4-4]
.text:00402068                 mov     ds:dword_410000, edx
.text:0040206E                 mov     [esp+9Ch+Stream], esi ; char *
.text:00402071                 call    sub_406060
.text:00402076                 test    eax, eax
.text:00402078                 jnz     loc_401F10
.text:0040207E                 mov     ecx, [esp+9Ch+var_7C]
.text:00402082                 and     ecx, 0F000h
.text:00402088                 cmp     ecx, 6000h
.text:0040208E                 jmp     loc_401F1E
.text:00402093 ; ---------------------------------------------------------------------------
.text:00402093
.text:00402093 loc_402093:                             ; CODE XREF: sub_401DB0+33↑j
.text:00402093                                         ; DATA XREF: sub_401DB0:jpt_401DE3↑o
.text:00402093                 lea     ebx, [edx+1]    ; jumptable 00401DE3 case 99
.text:00402096                 cmp     ebx, ds:dword_410010
.text:0040209C                 mov     ds:dword_410000, ebx
.text:004020A2                 jge     loc_401F24
.text:004020A8                 lea     esi, [esp+9Ch+var_7C]
.text:004020AC                 add     edx, 2
.text:004020AF                 xor     ebx, ebx
.text:004020B1                 mov     [esp+9Ch+Format], esi ; int
.text:004020B5                 mov     esi, [ecx+edx*4-4]
.text:004020B9                 mov     ds:dword_410000, edx
.text:004020BF                 mov     [esp+9Ch+Stream], esi ; char *
.text:004020C2                 call    sub_406060
.text:004020C7                 test    eax, eax
.text:004020C9                 jnz     loc_401F10
.text:004020CF                 mov     edx, [esp+9Ch+var_7C]
.text:004020D3                 and     edx, 0F000h
.text:004020D9                 cmp     edx, 2000h
.text:004020DF                 jmp     loc_401F1E
.text:004020E4 ; ---------------------------------------------------------------------------
.text:004020E4
.text:004020E4 loc_4020E4:                             ; CODE XREF: sub_401DB0+33↑j
.text:004020E4                                         ; DATA XREF: sub_401DB0:jpt_401DE3↑o
.text:004020E4                 lea     ebx, [edx+1]    ; jumptable 00401DE3 case 100
.text:004020E7                 cmp     ebx, ds:dword_410010
.text:004020ED                 mov     ds:dword_410000, ebx
.text:004020F3                 jge     loc_401F24
.text:004020F9                 lea     esi, [esp+9Ch+var_7C]
.text:004020FD                 add     edx, 2
.text:00402100                 xor     ebx, ebx
.text:00402102                 mov     [esp+9Ch+Format], esi ; int
.text:00402106                 mov     esi, [ecx+edx*4-4]
.text:0040210A                 mov     ds:dword_410000, edx
.text:00402110                 mov     [esp+9Ch+Stream], esi ; char *
.text:00402113                 call    sub_406060
.text:00402118                 test    eax, eax
.text:0040211A                 jnz     loc_401F10
.text:00402120                 mov     edx, [esp+9Ch+var_7C]
.text:00402124                 and     edx, 0F000h
.text:0040212A                 cmp     edx, 4000h
.text:00402130                 jmp     loc_401F1E
.text:00402135 ; ---------------------------------------------------------------------------
.text:00402135
.text:00402135 loc_402135:                             ; CODE XREF: sub_401DB0+33↑j
.text:00402135                                         ; DATA XREF: sub_401DB0:jpt_401DE3↑o
.text:00402135                 lea     ebx, [edx+1]    ; jumptable 00401DE3 cases 97,101
.text:00402138                 cmp     ebx, ds:dword_410010
.text:0040213E                 mov     ds:dword_410000, ebx
.text:00402144                 jge     loc_401F24
.text:0040214A                 lea     ebx, [esp+9Ch+var_7C]
.text:0040214E                 add     edx, 2
.text:00402151                 mov     [esp+9Ch+Format], ebx ; int
.text:00402155                 mov     esi, [ecx+edx*4-4]
.text:00402159                 mov     ds:dword_410000, edx
.text:0040215F                 mov     [esp+9Ch+Stream], esi ; char *
.text:00402162                 call    sub_406060
.text:00402167
.text:00402167 loc_402167:                             ; CODE XREF: sub_401DB0+5A7↓j
.text:00402167                 test    eax, eax
.text:00402169
.text:00402169 loc_402169:                             ; CODE XREF: sub_401DB0+774↓j
.text:00402169                 setz    al
.text:0040216C
.text:0040216C loc_40216C:                             ; CODE XREF: sub_401DB0+520↓j
.text:0040216C                 movzx   eax, al
.text:0040216F                 jmp     loc_401EC2
.text:00402174 ; ---------------------------------------------------------------------------
.text:00402174
.text:00402174 loc_402174:                             ; CODE XREF: sub_401DB0+33↑j
.text:00402174                                         ; DATA XREF: sub_401DB0:jpt_401DE3↑o
.text:00402174                 lea     ebx, [edx+1]    ; jumptable 00401DE3 case 102
.text:00402177                 cmp     ebx, ds:dword_410010
.text:0040217D                 mov     ds:dword_410000, ebx
.text:00402183                 jge     loc_401F24
.text:00402189                 lea     esi, [esp+9Ch+var_7C]
.text:0040218D                 add     edx, 2
.text:00402190                 xor     ebx, ebx
.text:00402192                 mov     [esp+9Ch+Format], esi ; int
.text:00402196                 mov     esi, [ecx+edx*4-4]
.text:0040219A                 mov     ds:dword_410000, edx
.text:004021A0                 mov     [esp+9Ch+Stream], esi ; char *
.text:004021A3                 call    sub_406060
.text:004021A8                 test    eax, eax
.text:004021AA                 jnz     loc_401F10
.text:004021B0                 mov     ecx, [esp+9Ch+var_7C]
.text:004021B4                 and     ecx, 0F000h
.text:004021BA                 cmp     ecx, 8000h
.text:004021C0                 jmp     loc_401F1E
.text:004021C5 ; ---------------------------------------------------------------------------
.text:004021C5
.text:004021C5 loc_4021C5:                             ; CODE XREF: sub_401DB0+33↑j
.text:004021C5                                         ; DATA XREF: sub_401DB0:jpt_401DE3↑o
.text:004021C5                 lea     ebx, [edx+1]    ; jumptable 00401DE3 case 103
.text:004021C8                 cmp     ebx, ds:dword_410010
.text:004021CE                 mov     ds:dword_410000, ebx
.text:004021D4                 jge     loc_401F24
.text:004021DA                 lea     esi, [esp+9Ch+var_7C]
.text:004021DE                 add     edx, 2
.text:004021E1                 xor     ebx, ebx
.text:004021E3                 mov     [esp+9Ch+Format], esi ; int
.text:004021E7                 mov     esi, [ecx+edx*4-4]
.text:004021EB                 mov     ds:dword_410000, edx
.text:004021F1                 mov     [esp+9Ch+Stream], esi ; char *
.text:004021F4                 call    sub_406060
.text:004021F9                 test    eax, eax
.text:004021FB                 jnz     loc_401F10
.text:00402201                 test    byte ptr [esp+9Ch+var_7C+1], 4
.text:00402206
.text:00402206 loc_402206:                             ; CODE XREF: sub_401DB0+4F3↓j
.text:00402206                                         ; sub_401DB0+670↓j ...
.text:00402206                 jz      loc_401F10
.text:0040220C                 jmp     loc_401F20
.text:00402211 ; ---------------------------------------------------------------------------
.text:00402211
.text:00402211 loc_402211:                             ; CODE XREF: sub_401DB0+33↑j
.text:00402211                                         ; DATA XREF: sub_401DB0:jpt_401DE3↑o
.text:00402211                 lea     ebx, [edx+1]    ; jumptable 00401DE3 cases 76,104
.text:00402214                 cmp     ebx, ds:dword_410010
.text:0040221A                 mov     ds:dword_410000, ebx
.text:00402220                 jge     loc_401F24
.text:00402226                 lea     esi, [esp+9Ch+var_7C]
.text:0040222A                 add     edx, 2
.text:0040222D                 xor     ebx, ebx
.text:0040222F                 mov     [esp+9Ch+Format], esi
.text:00402233                 mov     esi, [ecx+edx*4-4]
.text:00402237                 mov     ds:dword_410000, edx
.text:0040223D                 mov     [esp+9Ch+Stream], esi
.text:00402240                 call    sub_405FE0
.text:00402245                 test    eax, eax
.text:00402247                 jnz     loc_401F10
.text:0040224D                 mov     ecx, [esp+9Ch+var_7C]
.text:00402251                 and     ecx, 0F000h
.text:00402257                 cmp     ecx, 0A000h
.text:0040225D                 jmp     loc_401F1E
.text:00402262 ; ---------------------------------------------------------------------------
.text:00402262
.text:00402262 loc_402262:                             ; CODE XREF: sub_401DB0+33↑j
.text:00402262                                         ; DATA XREF: sub_401DB0:jpt_401DE3↑o
.text:00402262                 lea     ebx, [edx+1]    ; jumptable 00401DE3 case 107
.text:00402265                 cmp     ebx, ds:dword_410010
.text:0040226B                 mov     ds:dword_410000, ebx
.text:00402271                 jge     loc_401F24
.text:00402277                 lea     esi, [esp+9Ch+var_7C]
.text:0040227B                 add     edx, 2
.text:0040227E                 xor     ebx, ebx
.text:00402280                 mov     [esp+9Ch+Format], esi ; int
.text:00402284                 mov     esi, [ecx+edx*4-4]
.text:00402288                 mov     ds:dword_410000, edx
.text:0040228E                 mov     [esp+9Ch+Stream], esi ; char *
.text:00402291                 call    sub_406060
.text:00402296                 test    eax, eax
.text:00402298                 jnz     loc_401F10
.text:0040229E                 test    byte ptr [esp+9Ch+var_7C+1], 2
.text:004022A3                 jmp     loc_402206
.text:004022A8 ; ---------------------------------------------------------------------------
.text:004022A8
.text:004022A8 loc_4022A8:                             ; CODE XREF: sub_401DB0+33↑j
.text:004022A8                                         ; DATA XREF: sub_401DB0:jpt_401DE3↑o
.text:004022A8                 lea     ebx, [edx+1]    ; jumptable 00401DE3 case 110
.text:004022AB                 cmp     ebx, ds:dword_410010
.text:004022B1                 mov     ds:dword_410000, ebx
.text:004022B7                 jge     loc_401F24
.text:004022BD                 lea     ebx, [edx+2]
.text:004022C0                 mov     esi, [ecx+ebx*4-4]
.text:004022C4                 mov     ds:dword_410000, ebx
.text:004022CA                 cmp     byte ptr [esi], 0
.text:004022CD                 setnz   al
.text:004022D0                 jmp     loc_40216C
.text:004022D5 ; ---------------------------------------------------------------------------
.text:004022D5
.text:004022D5 loc_4022D5:                             ; CODE XREF: sub_401DB0+33↑j
.text:004022D5                                         ; DATA XREF: sub_401DB0:jpt_401DE3↑o
.text:004022D5                 lea     ebx, [edx+1]    ; jumptable 00401DE3 case 112
.text:004022D8                 cmp     ebx, ds:dword_410010
.text:004022DE                 mov     ds:dword_410000, ebx
.text:004022E4                 jge     loc_401F24
.text:004022EA                 lea     esi, [esp+9Ch+var_7C]
.text:004022EE                 add     edx, 2
.text:004022F1                 xor     ebx, ebx
.text:004022F3                 mov     [esp+9Ch+Format], esi ; int
.text:004022F7                 mov     esi, [ecx+edx*4-4]
.text:004022FB                 mov     ds:dword_410000, edx
.text:00402301                 mov     [esp+9Ch+Stream], esi ; char *
.text:00402304                 call    sub_406060
.text:00402309                 test    eax, eax
.text:0040230B                 jnz     loc_401F10
.text:00402311                 mov     edx, [esp+9Ch+var_7C]
.text:00402315                 and     edx, 0F000h
.text:0040231B                 cmp     edx, 1000h
.text:00402321                 jmp     loc_401F1E
.text:00402326 ; ---------------------------------------------------------------------------
.text:00402326
.text:00402326 loc_402326:                             ; CODE XREF: sub_401DB0+33↑j
.text:00402326                                         ; DATA XREF: sub_401DB0:jpt_401DE3↑o
.text:00402326                 lea     esi, [edx+1]    ; jumptable 00401DE3 case 114
.text:00402329                 cmp     esi, ds:dword_410010
.text:0040232F                 mov     ds:dword_410000, esi
.text:00402335                 jge     loc_401F24
.text:0040233B                 mov     [esp+9Ch+Format], 4 ; int
.text:00402343
.text:00402343 loc_402343:                             ; CODE XREF: sub_401DB0+728↓j
.text:00402343                                         ; sub_401DB0+74A↓j
.text:00402343                 lea     eax, [edx+2]
.text:00402346                 mov     ds:dword_410000, eax
.text:0040234B                 mov     edx, [ecx+eax*4-4]
.text:0040234F                 mov     [esp+9Ch+Stream], edx ; LPCSTR
.text:00402352                 call    sub_405ED0
.text:00402357                 jmp     loc_402167
.text:0040235C ; ---------------------------------------------------------------------------
.text:0040235C
.text:0040235C loc_40235C:                             ; CODE XREF: sub_401DB0+33↑j
.text:0040235C                                         ; DATA XREF: sub_401DB0:jpt_401DE3↑o
.text:0040235C                 lea     ebx, [edx+1]    ; jumptable 00401DE3 case 115
.text:0040235F                 cmp     ebx, ds:dword_410010
.text:00402365                 mov     ds:dword_410000, ebx
.text:0040236B                 jge     loc_401F24
.text:00402371                 lea     esi, [esp+9Ch+var_7C]
.text:00402375                 add     edx, 2
.text:00402378                 xor     ebx, ebx
.text:0040237A                 mov     [esp+9Ch+Format], esi ; int
.text:0040237E                 mov     esi, [ecx+edx*4-4]
.text:00402382                 mov     ds:dword_410000, edx
.text:00402388                 mov     [esp+9Ch+Stream], esi ; char *
.text:0040238B                 call    sub_406060
.text:00402390                 test    eax, eax
.text:00402392                 jnz     loc_401F10
.text:00402398                 mov     edx, [esp+9Ch+var_48]
.text:0040239C                 mov     eax, [esp+9Ch+var_4C]
.text:004023A0                 test    edx, edx
.text:004023A2                 js      loc_401F10
.text:004023A8                 test    edx, edx
.text:004023AA                 jg      loc_401F20
.text:004023B0                 cmp     eax, 0
.text:004023B3                 jbe     loc_401F10
.text:004023B9                 jmp     loc_401F20
.text:004023B9 ; ---------------------------------------------------------------------------
.text:004023BE                 align 10h
.text:004023C0
.text:004023C0 loc_4023C0:                             ; CODE XREF: sub_401DB0+33↑j
.text:004023C0                                         ; DATA XREF: sub_401DB0:jpt_401DE3↑o
.text:004023C0                 lea     ebx, [edx+1]    ; jumptable 00401DE3 case 116
.text:004023C3                 cmp     ebx, ds:dword_410010
.text:004023C9                 mov     ds:dword_410000, ebx
.text:004023CF                 jge     loc_401F24
.text:004023D5                 lea     ebx, [esp+9Ch+FileHandle]
.text:004023D9                 add     edx, 2
.text:004023DC                 mov     [esp+9Ch+Format], ebx
.text:004023E0                 mov     esi, [ecx+edx*4-4]
.text:004023E4                 mov     ds:dword_410000, edx
.text:004023EA                 mov     [esp+9Ch+Stream], esi
.text:004023ED                 call    sub_404250
.text:004023F2                 test    al, al
.text:004023F4                 jz      short loc_402425
.text:004023F6                 mov     ecx, [esp+9Ch+FileHandle]
.text:004023FA                 xor     ebx, ebx
.text:004023FC                 mov     esi, [esp+9Ch+var_80]
.text:00402400                 add     ecx, 80000000h
.text:00402406                 adc     esi, 0
.text:00402409                 cmp     esi, 0
.text:0040240C                 ja      loc_401F10
.text:00402412                 mov     edx, [esp+9Ch+FileHandle]
.text:00402416                 mov     [esp+9Ch+Stream], edx ; FileHandle
.text:00402419                 call    _isatty
.text:0040241E                 test    eax, eax
.text:00402420                 jmp     loc_402206
.text:00402425 ; ---------------------------------------------------------------------------
.text:00402425
.text:00402425 loc_402425:                             ; CODE XREF: sub_401DB0+644↑j
.text:00402425                 mov     [esp+9Ch+Stream], offset aAfterT ; "after -t"
.text:0040242C                 call    ds:__imp_libintl_gettext
.text:00402432                 mov     [esp+9Ch+Stream], offset aSIntegerExpres ; "%s: integer expression expected\n"
.text:00402439                 mov     esi, eax
.text:0040243B                 call    ds:__imp_libintl_gettext
.text:00402441                 mov     edx, ds:dword_410020
.text:00402447                 mov     ecx, [edx]
.text:00402449                 mov     ebx, eax
.text:0040244B                 mov     [esp+9Ch+Format], offset Format ; "%s: "
.text:00402453                 mov     edx, ds:_iob
.text:00402459                 mov     [esp+9Ch+var_94], ecx
.text:0040245D                 add     edx, 40h ; '@'
.text:00402460                 mov     [esp+9Ch+Stream], edx ; Stream
.text:00402463                 call    fprintf
.text:00402468                 mov     [esp+9Ch+var_94], esi
.text:0040246C                 mov     [esp+9Ch+Format], ebx
.text:00402470                 jmp     loc_401F79
.text:00402475 ; ---------------------------------------------------------------------------
.text:00402475
.text:00402475 loc_402475:                             ; CODE XREF: sub_401DB0+33↑j
.text:00402475                                         ; DATA XREF: sub_401DB0:jpt_401DE3↑o
.text:00402475                 lea     ebx, [edx+1]    ; jumptable 00401DE3 case 117
.text:00402478                 cmp     ebx, ds:dword_410010
.text:0040247E                 mov     ds:dword_410000, ebx
.text:00402484                 jge     loc_401F24
.text:0040248A                 lea     esi, [esp+9Ch+var_7C]
.text:0040248E                 add     edx, 2
.text:00402491                 xor     ebx, ebx
.text:00402493                 mov     [esp+9Ch+Format], esi ; int
.text:00402497                 mov     esi, [ecx+edx*4-4]
.text:0040249B                 mov     ds:dword_410000, edx
.text:004024A1                 mov     [esp+9Ch+Stream], esi ; char *
.text:004024A4                 call    sub_406060
.text:004024A9                 test    eax, eax
.text:004024AB                 jnz     loc_401F10
.text:004024B1                 test    byte ptr [esp+9Ch+var_7C+1], 8
.text:004024B6                 jmp     loc_402206
.text:004024BB ; ---------------------------------------------------------------------------
.text:004024BB
.text:004024BB loc_4024BB:                             ; CODE XREF: sub_401DB0+33↑j
.text:004024BB                                         ; DATA XREF: sub_401DB0:jpt_401DE3↑o
.text:004024BB                 lea     ebx, [edx+1]    ; jumptable 00401DE3 case 119
.text:004024BE                 cmp     ebx, ds:dword_410010
.text:004024C4                 mov     ds:dword_410000, ebx
.text:004024CA                 jge     loc_401F24
.text:004024D0                 mov     [esp+9Ch+Format], 2
.text:004024D8                 jmp     loc_402343
.text:004024DD ; ---------------------------------------------------------------------------
.text:004024DD
.text:004024DD loc_4024DD:                             ; CODE XREF: sub_401DB0+33↑j
.text:004024DD                                         ; DATA XREF: sub_401DB0:jpt_401DE3↑o
.text:004024DD                 lea     esi, [edx+1]    ; jumptable 00401DE3 case 120
.text:004024E0                 cmp     esi, ds:dword_410010
.text:004024E6                 mov     ds:dword_410000, esi
.text:004024EC                 jge     loc_401F24
.text:004024F2                 mov     [esp+9Ch+Format], 1
.text:004024FA                 jmp     loc_402343
.text:004024FF ; ---------------------------------------------------------------------------
.text:004024FF
.text:004024FF loc_4024FF:                             ; CODE XREF: sub_401DB0+33↑j
.text:004024FF                                         ; DATA XREF: sub_401DB0:jpt_401DE3↑o
.text:004024FF                 lea     esi, [edx+1]    ; jumptable 00401DE3 case 122
.text:00402502                 cmp     esi, ds:dword_410010
.text:00402508                 mov     ds:dword_410000, esi
.text:0040250E                 jge     loc_401F24
.text:00402514                 lea     esi, [edx+2]
.text:00402517                 mov     ebx, [ecx+esi*4-4]
.text:0040251B                 mov     ds:dword_410000, esi
.text:00402521                 cmp     byte ptr [ebx], 0
.text:00402524                 jmp     loc_402169
.text:00402524 sub_401DB0      endp
.text:00402524
.text:00402524 ; ---------------------------------------------------------------------------
.text:00402529 byte_402529     db 3Dh, 0               ; DATA XREF: sub_402550+1B↓o
.text:0040252B byte_40252B     db 2Dh                  ; DATA XREF: sub_402550+43↓o
.text:0040252C                 db 6Eh, 74h, 0
.text:0040252F                 db 2Dh                  ; DATA XREF: sub_402550+57↓o
.text:00402530                 db 6Fh, 74h, 0
.text:00402533                 db 2Dh                  ; DATA XREF: sub_402550+67↓o
.text:00402534                 db 65h, 66h, 0
.text:00402537                 db 2Dh                  ; DATA XREF: sub_402550+77↓o
.text:00402538                 db 65h, 71h, 0
.text:0040253B                 db 2Dh                  ; DATA XREF: sub_402550+87↓o
.text:0040253C                 db 6Eh, 65h, 0
.text:0040253F                 db 2Dh                  ; DATA XREF: sub_402550+97↓o
.text:00402540                 db 6Ch, 74h, 0
.text:00402543 ; ---------------------------------------------------------------------------
.text:00402543                 sub     eax, 2D00656Ch  ; DATA XREF: sub_402550+A7↓o
.text:00402543                                         ; sub_402550+B7↓o
.text:00402548                 db      67h
.text:00402548                 jz      $+3
.text:0040254B
.text:0040254B loc_40254B:                             ; CODE XREF: .text:00402548↑j
.text:0040254B                                         ; DATA XREF: sub_402550+C7↓o
.text:0040254B                 sub     eax, 90006567h
.text:00402550
.text:00402550 ; =============== S U B R O U T I N E =======================================
.text:00402550
.text:00402550
.text:00402550 sub_402550      proc near               ; CODE XREF: sub_4027A0+197↓p
.text:00402550                                         ; sub_4027A0+415↓p ...
.text:00402550
.text:00402550 var_D           = byte ptr -0Dh
.text:00402550 var_C           = dword ptr -0Ch
.text:00402550 var_8           = dword ptr -8
.text:00402550 var_4           = dword ptr -4
.text:00402550 arg_0           = dword ptr  4
.text:00402550
.text:00402550                 cld
.text:00402551                 sub     esp, 10h
.text:00402554                 mov     ecx, 2
.text:00402559                 mov     [esp+10h+var_C], ebx
.text:0040255D                 mov     ebx, [esp+10h+arg_0]
.text:00402561                 mov     [esp+10h+var_8], esi
.text:00402565                 mov     [esp+10h+var_4], edi
.text:00402569                 mov     esi, ebx
.text:0040256B                 mov     edi, offset byte_402529
.text:00402570                 mov     [esp+10h+var_D], 0
.text:00402575                 repe cmpsb
.text:00402577                 jz      loc_402630
.text:0040257D                 mov     esi, ebx
.text:0040257F                 mov     edi, offset byte_401283
.text:00402584                 mov     ecx, 3
.text:00402589                 repe cmpsb
.text:0040258B                 jz      loc_402630
.text:00402591                 mov     esi, ebx
.text:00402593                 mov     edi, offset byte_40252B
.text:00402598                 mov     ecx, 4
.text:0040259D                 repe cmpsb
.text:0040259F                 jz      loc_402630
.text:004025A5                 mov     esi, ebx
.text:004025A7                 mov     edi, offset byte_40252F
.text:004025AC                 mov     ecx, 4
.text:004025B1                 repe cmpsb
.text:004025B3                 jz      short loc_402630
.text:004025B5                 mov     esi, ebx
.text:004025B7                 mov     edi, offset byte_402533
.text:004025BC                 mov     ecx, 4
.text:004025C1                 repe cmpsb
.text:004025C3                 jz      short loc_402630
.text:004025C5                 mov     esi, ebx
.text:004025C7                 mov     edi, offset byte_402537
.text:004025CC                 mov     ecx, 4
.text:004025D1                 repe cmpsb
.text:004025D3                 jz      short loc_402630
.text:004025D5                 mov     esi, ebx
.text:004025D7                 mov     edi, offset byte_40253B
.text:004025DC                 mov     ecx, 4
.text:004025E1                 repe cmpsb
.text:004025E3                 jz      short loc_402630
.text:004025E5                 mov     esi, ebx
.text:004025E7                 mov     edi, offset byte_40253F
.text:004025EC                 mov     ecx, 4
.text:004025F1                 repe cmpsb
.text:004025F3                 jz      short loc_402630
.text:004025F5                 mov     esi, ebx
.text:004025F7                 mov     edi, offset loc_402543
.text:004025FC                 mov     ecx, 4
.text:00402601                 repe cmpsb
.text:00402603                 jz      short loc_402630
.text:00402605                 mov     esi, ebx
.text:00402607                 mov     edi, (offset loc_402543+4)
.text:0040260C                 mov     ecx, 4
.text:00402611                 repe cmpsb
.text:00402613                 jz      short loc_402630
.text:00402615                 mov     esi, ebx
.text:00402617                 mov     edi, offset loc_40254B
.text:0040261C                 mov     ecx, 4
.text:00402621                 repe cmpsb
.text:00402623                 jnz     short loc_402635
.text:00402625                 lea     esi, [esi+0]
.text:00402629                 lea     edi, [edi+0]
.text:00402630
.text:00402630 loc_402630:                             ; CODE XREF: sub_402550+27↑j
.text:00402630                                         ; sub_402550+3B↑j ...
.text:00402630                 mov     [esp+10h+var_D], 1
.text:00402635
.text:00402635 loc_402635:                             ; CODE XREF: sub_402550+D3↑j
.text:00402635                 movzx   eax, [esp+10h+var_D]
.text:0040263A                 mov     ebx, [esp+10h+var_C]
.text:0040263E                 mov     esi, [esp+10h+var_8]
.text:00402642                 mov     edi, [esp+10h+var_4]
.text:00402646                 add     esp, 10h
.text:00402649                 retn
.text:00402649 sub_402550      endp
.text:00402649
.text:00402649 ; ---------------------------------------------------------------------------
.text:0040264A                 align 10h
.text:00402650
.text:00402650 ; =============== S U B R O U T I N E =======================================
.text:00402650
.text:00402650
.text:00402650 sub_402650      proc near               ; CODE XREF: sub_4027A0+143↓p
.text:00402650                                         ; sub_4027A0+22B↓p ...
.text:00402650
.text:00402650 arg_0           = dword ptr  4
.text:00402650
.text:00402650                 mov     eax, [esp+arg_0]
.text:00402654                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00402657                 jz      short loc_402660
.text:00402659                 xor     eax, eax
.text:0040265B                 retn
.text:0040265B ; ---------------------------------------------------------------------------
.text:0040265C                 align 10h
.text:00402660
.text:00402660 loc_402660:                             ; CODE XREF: sub_402650+7↑j
.text:00402660                 movsx   eax, byte ptr [eax+1]
.text:00402664                 sub     eax, 47h ; 'G'  ; switch 52 cases
.text:00402667                 cmp     eax, 33h
.text:0040266A                 ja      def_402670      ; jumptable 00402670 default case, cases 72-75,77,80-82,84-96,105,106,108,109,113,118,121
.text:00402670                 jmp     ds:jpt_402670[eax*4] ; switch jump
.text:00402670 ; ---------------------------------------------------------------------------
.text:00402677                 align 4
.text:00402678 jpt_402670      dd offset loc_402748, offset def_402670, offset def_402670
.text:00402678                                         ; DATA XREF: sub_402650+20↑r
.text:00402678                 dd offset def_402670, offset def_402670, offset loc_402748 ; jump table for switch statement
.text:00402678                 dd offset def_402670, offset loc_402748, offset loc_402748
.text:00402678                 dd offset def_402670, offset def_402670, offset def_402670
.text:00402678                 dd offset loc_402748, offset def_402670, offset def_402670
.text:00402678                 dd offset def_402670, offset def_402670, offset def_402670
.text:00402678                 dd offset def_402670, offset def_402670, offset def_402670
.text:00402678                 dd offset def_402670, offset def_402670, offset def_402670
.text:00402678                 dd offset def_402670, offset def_402670, offset loc_402748
.text:00402678                 dd offset loc_402748, offset loc_402748, offset loc_402748
.text:00402678                 dd offset loc_402748, offset loc_402748, offset loc_402748
.text:00402678                 dd offset loc_402748, offset def_402670, offset def_402670
.text:00402678                 dd offset loc_402748, offset def_402670, offset def_402670
.text:00402678                 dd offset loc_402748, offset loc_402748, offset loc_402748
.text:00402678                 dd offset def_402670, offset loc_402748, offset loc_402748
.text:00402678                 dd offset loc_402748, offset loc_402748, offset def_402670
.text:00402678                 dd offset loc_402748, offset loc_402748, offset def_402670
.text:00402678                 dd offset loc_402748
.text:00402748 ; ---------------------------------------------------------------------------
.text:00402748
.text:00402748 loc_402748:                             ; CODE XREF: sub_402650+20↑j
.text:00402748                                         ; DATA XREF: sub_402650:jpt_402670↑o
.text:00402748                 mov     eax, 1          ; jumptable 00402670 cases 71,76,78,79,83,97-104,107,110-112,114-117,119,120,122
.text:0040274D                 retn
.text:0040274D ; ---------------------------------------------------------------------------
.text:0040274E                 align 10h
.text:00402750
.text:00402750 def_402670:                             ; CODE XREF: sub_402650+1A↑j
.text:00402750                                         ; sub_402650+20↑j
.text:00402750                                         ; DATA XREF: ...
.text:00402750                 xor     eax, eax        ; jumptable 00402670 default case, cases 72-75,77,80-82,84-96,105,106,108,109,113,118,121
.text:00402752                 retn
.text:00402752 sub_402650      endp
.text:00402752
.text:00402752 ; ---------------------------------------------------------------------------
.text:00402753 byte_402753     db 21h                  ; DATA XREF: sub_4027A0+72↓o
.text:00402753                                         ; sub_4027A0+1A9↓o ...
.text:00402754                 db 0
.text:00402755 aSUnaryOperator db '%s: unary operator expected',0Ah,0
.text:00402755                                         ; DATA XREF: sub_4027A0:loc_4028F6↓o
.text:00402755                                         ; sub_403EE0:loc_403FF1↓o
.text:00402772 asc_402772      db '(',0                ; DATA XREF: sub_4027A0+245↓o
.text:00402772                                         ; sub_4027A0+4C6↓o ...
.text:00402774 asc_402774      db ')',0                ; DATA XREF: sub_4027A0+257↓o
.text:00402774                                         ; sub_4027A0+4D8↓o ...
.text:00402776 aA              db '-a',0               ; DATA XREF: sub_4027A0+295↓o
.text:00402776                                         ; sub_4027A0+31A↓o ...
.text:00402779 aO              db '-o',0               ; DATA XREF: sub_4027A0+2A9↓o
.text:00402779                                         ; sub_4027A0+36B↓o ...
.text:0040277C aSBinaryOperato db '%s: binary operator expected',0Ah,0
.text:0040277C                                         ; DATA XREF: sub_4027A0:loc_402B2F↓o
.text:0040279A                 align 10h
.text:004027A0
.text:004027A0 ; =============== S U B R O U T I N E =======================================
.text:004027A0
.text:004027A0
.text:004027A0 sub_4027A0      proc near               ; CODE XREF: sub_402FC0+96↓p
.text:004027A0                                         ; sub_403EE0+26D↓p
.text:004027A0
.text:004027A0 Stream          = dword ptr -6Ch
.text:004027A0 Format          = dword ptr -68h
.text:004027A0 var_64          = dword ptr -64h
.text:004027A0 var_54          = dword ptr -54h
.text:004027A0 var_50          = dword ptr -50h
.text:004027A0 var_4C          = dword ptr -4Ch
.text:004027A0 var_48          = byte ptr -48h
.text:004027A0 var_47          = byte ptr -47h
.text:004027A0 var_46          = byte ptr -46h
.text:004027A0 var_45          = byte ptr -45h
.text:004027A0 var_40          = dword ptr -40h
.text:004027A0 var_3C          = byte ptr -3Ch
.text:004027A0 var_3B          = byte ptr -3Bh
.text:004027A0 var_3A          = byte ptr -3Ah
.text:004027A0 var_39          = byte ptr -39h
.text:004027A0 var_38          = dword ptr -38h
.text:004027A0 var_34          = dword ptr -34h
.text:004027A0 var_30          = dword ptr -30h
.text:004027A0 var_2C          = dword ptr -2Ch
.text:004027A0 var_28          = dword ptr -28h
.text:004027A0 var_24          = dword ptr -24h
.text:004027A0 var_20          = byte ptr -20h
.text:004027A0 var_1F          = byte ptr -1Fh
.text:004027A0 var_1E          = byte ptr -1Eh
.text:004027A0 var_1D          = byte ptr -1Dh
.text:004027A0 var_1C          = dword ptr -1Ch
.text:004027A0 var_18          = dword ptr -18h
.text:004027A0 var_14          = dword ptr -14h
.text:004027A0 arg_0           = dword ptr  4
.text:004027A0
.text:004027A0                 push    ebp
.text:004027A1                 push    edi
.text:004027A2                 push    esi
.text:004027A3                 push    ebx
.text:004027A4                 sub     esp, 5Ch
.text:004027A7                 cmp     [esp+6Ch+arg_0], 5 ; switch 6 cases
.text:004027AC                 ja      def_4027B6      ; jumptable 004027B6 default case, cases 0,5
.text:004027B2                 mov     edx, [esp+6Ch+arg_0]
.text:004027B6                 jmp     ds:jpt_4027B6[edx*4] ; switch jump
.text:004027B6 ; ---------------------------------------------------------------------------
.text:004027BD                 align 10h
.text:004027C0 jpt_4027B6      dd offset def_4027B6    ; DATA XREF: sub_4027A0+16↑r
.text:004027C0                 dd offset loc_4027D8    ; jump table for switch statement
.text:004027C0                 dd offset loc_402800
.text:004027C0                 dd offset loc_402920
.text:004027C0                 dd offset loc_402B64
.text:004027C0                 dd offset def_4027B6
.text:004027D8 ; ---------------------------------------------------------------------------
.text:004027D8
.text:004027D8 loc_4027D8:                             ; CODE XREF: sub_4027A0+16↑j
.text:004027D8                                         ; DATA XREF: sub_4027A0:jpt_4027B6↑o
.text:004027D8                 mov     ebx, ds:dword_410000 ; jumptable 004027B6 case 1
.text:004027DE                 mov     eax, ds:dword_410020
.text:004027E3                 lea     esi, [ebx+1]
.text:004027E6                 mov     ds:dword_410000, esi
.text:004027EC                 mov     ecx, [eax+ebx*4]
.text:004027EF                 cmp     byte ptr [ecx], 0
.text:004027F2                 setnz   al
.text:004027F5
.text:004027F5 loc_4027F5:                             ; CODE XREF: sub_4027A0+9E↓j
.text:004027F5                                         ; sub_4027A0+151↓j ...
.text:004027F5                 add     esp, 5Ch
.text:004027F8                 movzx   eax, al
.text:004027FB                 pop     ebx
.text:004027FC                 pop     esi
.text:004027FD                 pop     edi
.text:004027FE                 pop     ebp
.text:004027FF                 retn
.text:00402800 ; ---------------------------------------------------------------------------
.text:00402800
.text:00402800 loc_402800:                             ; CODE XREF: sub_4027A0+16↑j
.text:00402800                                         ; DATA XREF: sub_4027A0:jpt_4027B6↑o
.text:00402800                 cld                     ; jumptable 004027B6 case 2
.text:00402801                 mov     ebx, ds:dword_410000
.text:00402807                 mov     eax, 2
.text:0040280C                 mov     ebp, ds:dword_410020
.text:00402812                 mov     edi, offset byte_402753
.text:00402817                 mov     [esp+6Ch+var_14], ebx
.text:0040281B                 mov     ecx, [ebp+ebx*4+0]
.text:0040281F                 mov     esi, ecx
.text:00402821                 mov     [esp+6Ch+var_50], ecx
.text:00402825                 mov     ecx, eax
.text:00402827                 repe cmpsb
.text:00402829                 jnz     short loc_402840
.text:0040282B                 mov     edx, [ebp+ebx*4+4]
.text:0040282F                 add     ebx, 2
.text:00402832                 mov     ds:dword_410000, ebx
.text:00402838                 cmp     byte ptr [edx], 0
.text:0040283B
.text:0040283B loc_40283B:                             ; CODE XREF: sub_4027A0+206↓j
.text:0040283B                 setz    al
.text:0040283E                 jmp     short loc_4027F5
.text:00402840 ; ---------------------------------------------------------------------------
.text:00402840
.text:00402840 loc_402840:                             ; CODE XREF: sub_4027A0+89↑j
.text:00402840                 mov     eax, [esp+6Ch+var_50]
.text:00402844                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00402847                 jnz     short loc_402853
.text:00402849                 cmp     byte ptr [eax+1], 0
.text:0040284D                 jnz     loc_4028D6
.text:00402853
.text:00402853 loc_402853:                             ; CODE XREF: sub_4027A0+A7↑j
.text:00402853                                         ; sub_4027A0+13A↓j ...
.text:00402853                 mov     [esp+6Ch+Stream], offset aMissingArgumen ; "missing argument after %s"
.text:0040285A                 call    ds:__imp_libintl_gettext
.text:00402860                 mov     ebp, ds:dword_410020
.text:00402866                 mov     edi, eax
.text:00402868                 mov     eax, ds:dword_410010
.text:0040286D                 mov     esi, [ebp+eax*4-4]
.text:00402871                 mov     [esp+6Ch+Stream], esi ; char *
.text:00402874                 call    sub_4044E0
.text:00402879                 mov     edx, ds:dword_410020
.text:0040287F                 mov     ebx, eax
.text:00402881
.text:00402881 loc_402881:                             ; CODE XREF: sub_4027A0+174↓j
.text:00402881                                         ; sub_4027A0+3AE↓j
.text:00402881                 mov     eax, [edx]
.text:00402883                 mov     [esp+6Ch+var_64], eax
.text:00402887                 mov     ecx, ds:_iob
.text:0040288D                 mov     [esp+6Ch+Format], offset Format ; "%s: "
.text:00402895                 add     ecx, 40h ; '@'
.text:00402898                 mov     [esp+6Ch+Stream], ecx ; Stream
.text:0040289B                 call    fprintf
.text:004028A0                 mov     [esp+6Ch+var_64], ebx
.text:004028A4                 mov     ebx, ds:_iob
.text:004028AA                 mov     [esp+6Ch+Format], edi ; Format
.text:004028AE                 add     ebx, 40h ; '@'
.text:004028B1                 mov     [esp+6Ch+Stream], ebx ; Stream
.text:004028B4                 call    fprintf
.text:004028B9                 mov     edi, ds:_iob
.text:004028BF                 add     edi, 40h ; '@'
.text:004028C2                 mov     [esp+6Ch+Stream], edi ; Stream
.text:004028C5                 call    fflush
.text:004028CA                 mov     [esp+6Ch+Stream], 2 ; Code
.text:004028D1                 call    exit
.text:004028D6 ; ---------------------------------------------------------------------------
.text:004028D6
.text:004028D6 loc_4028D6:                             ; CODE XREF: sub_4027A0+AD↑j
.text:004028D6                 cmp     byte ptr [eax+2], 0
.text:004028DA                 jnz     loc_402853
.text:004028E0                 mov     [esp+6Ch+Stream], eax
.text:004028E3                 call    sub_402650
.text:004028E8                 test    al, al
.text:004028EA                 jz      short loc_4028F6
.text:004028EC                 call    sub_401DB0
.text:004028F1                 jmp     loc_4027F5
.text:004028F6 ; ---------------------------------------------------------------------------
.text:004028F6
.text:004028F6 loc_4028F6:                             ; CODE XREF: sub_4027A0+14A↑j
.text:004028F6                                         ; sub_4027A0+232↓j ...
.text:004028F6                 mov     [esp+6Ch+Stream], offset aSUnaryOperator ; "%s: unary operator expected\n"
.text:004028FD                 call    ds:__imp_libintl_gettext
.text:00402903                 mov     edx, ds:dword_410020
.text:00402909                 mov     ebp, ds:dword_410000
.text:0040290F                 mov     edi, eax
.text:00402911                 mov     ebx, [edx+ebp*4]
.text:00402914                 jmp     loc_402881
.text:00402914 ; ---------------------------------------------------------------------------
.text:00402919                 align 10h
.text:00402920
.text:00402920 loc_402920:                             ; CODE XREF: sub_4027A0+16↑j
.text:00402920                                         ; DATA XREF: sub_4027A0:jpt_4027B6↑o
.text:00402920                 mov     ebx, ds:dword_410000 ; jumptable 004027B6 case 3
.text:00402926                 mov     ebp, ds:dword_410020
.text:0040292C                 mov     [esp+6Ch+var_18], ebx
.text:00402930                 mov     edi, [ebp+ebx*4+4]
.text:00402934                 mov     [esp+6Ch+Stream], edi
.text:00402937                 call    sub_402550
.text:0040293C                 test    al, al
.text:0040293E                 jnz     loc_402B53
.text:00402944                 cld
.text:00402945                 mov     eax, [ebp+ebx*4+0]
.text:00402949                 mov     edi, offset byte_402753
.text:0040294E                 mov     ecx, 2
.text:00402953                 mov     esi, eax
.text:00402955                 mov     [esp+6Ch+var_1C], eax
.text:00402959                 repe cmpsb
.text:0040295B                 jnz     loc_4029E0
.text:00402961                 inc     ebx
.text:00402962                 cmp     ebx, ds:dword_410010
.text:00402968                 mov     ds:dword_410000, ebx
.text:0040296E                 jge     loc_402853
.text:00402974                 cld
.text:00402975                 mov     ebx, [ebp+ebx*4+0]
.text:00402979                 mov     edx, 2
.text:0040297E                 mov     edi, offset byte_402753
.text:00402983                 mov     ecx, edx
.text:00402985                 mov     esi, ebx
.text:00402987                 repe cmpsb
.text:00402989                 jnz     short loc_4029AB
.text:0040298B                 mov     ebx, [esp+6Ch+var_18]
.text:0040298F                 mov     esi, [ebp+ebx*4+8]
.text:00402993                 mov     ebp, ebx
.text:00402995                 add     ebp, 3
.text:00402998                 mov     ds:dword_410000, ebp
.text:0040299E                 cmp     byte ptr [esi], 0
.text:004029A1
.text:004029A1 loc_4029A1:                             ; CODE XREF: sub_4027A0+488↓j
.text:004029A1                 setz    al
.text:004029A4
.text:004029A4 loc_4029A4:                             ; CODE XREF: sub_4027A0+23D↓j
.text:004029A4                                         ; sub_4027A0+50B↓j ...
.text:004029A4                 test    al, al
.text:004029A6                 jmp     loc_40283B
.text:004029AB ; ---------------------------------------------------------------------------
.text:004029AB
.text:004029AB loc_4029AB:                             ; CODE XREF: sub_4027A0+1E9↑j
.text:004029AB                 cmp     byte ptr [ebx], 2Dh ; '-'
.text:004029AE                 jnz     loc_402853
.text:004029B4                 cmp     byte ptr [ebx+1], 0
.text:004029B8                 jz      loc_402853
.text:004029BE                 cmp     byte ptr [ebx+2], 0
.text:004029C2                 jnz     loc_402853
.text:004029C8                 mov     [esp+6Ch+Stream], ebx
.text:004029CB                 call    sub_402650
.text:004029D0                 test    al, al
.text:004029D2                 jz      loc_4028F6
.text:004029D8                 call    sub_401DB0
.text:004029DD                 jmp     short loc_4029A4
.text:004029DD ; ---------------------------------------------------------------------------
.text:004029DF                 align 10h
.text:004029E0
.text:004029E0 loc_4029E0:                             ; CODE XREF: sub_4027A0+1BB↑j
.text:004029E0                 cld
.text:004029E1                 mov     esi, [esp+6Ch+var_1C]
.text:004029E5                 mov     edi, offset asc_402772 ; "("
.text:004029EA                 mov     ecx, 2
.text:004029EF                 repe cmpsb
.text:004029F1                 jnz     short loc_402A30
.text:004029F3                 mov     edx, [ebp+ebx*4+8]
.text:004029F7                 mov     edi, offset asc_402774 ; ")"
.text:004029FC                 mov     ecx, 2
.text:00402A01                 mov     esi, edx
.text:00402A03                 repe cmpsb
.text:00402A05                 jnz     short loc_402A30
.text:00402A07                 mov     edi, [esp+6Ch+var_18]
.text:00402A0B                 mov     ecx, [ebp+ebx*4+4]
.text:00402A0F                 mov     ebx, [esp+6Ch+var_18]
.text:00402A13                 add     edi, 2
.text:00402A16                 mov     ds:dword_410000, edi
.text:00402A1C                 cmp     byte ptr [ecx], 0
.text:00402A1F                 setnz   al
.text:00402A22                 add     ebx, 3
.text:00402A25
.text:00402A25 loc_402A25:                             ; CODE XREF: sub_4027A0+68B↓j
.text:00402A25                 mov     ds:dword_410000, ebx
.text:00402A2B                 jmp     loc_4027F5
.text:00402A30 ; ---------------------------------------------------------------------------
.text:00402A30
.text:00402A30 loc_402A30:                             ; CODE XREF: sub_4027A0+251↑j
.text:00402A30                                         ; sub_4027A0+265↑j
.text:00402A30                 cld
.text:00402A31                 mov     esi, [esp+6Ch+var_18]
.text:00402A35                 mov     edi, offset aA  ; "-a"
.text:00402A3A                 mov     ecx, 3
.text:00402A3F                 mov     ebx, [ebp+esi*4+4]
.text:00402A43                 mov     esi, ebx
.text:00402A45                 repe cmpsb
.text:00402A47                 jz      short loc_402A5D
.text:00402A49                 mov     edi, offset aO  ; "-o"
.text:00402A4E                 mov     ecx, 3
.text:00402A53                 mov     esi, ebx
.text:00402A55                 repe cmpsb
.text:00402A57                 jnz     loc_402B2F
.text:00402A5D
.text:00402A5D loc_402A5D:                             ; CODE XREF: sub_4027A0+2A7↑j
.text:00402A5D                 mov     ebp, [esp+6Ch+var_18]
.text:00402A61                 cmp     ebp, ds:dword_410010
.text:00402A67                 jge     loc_402853
.text:00402A6D                 mov     [esp+6Ch+var_1D], 0
.text:00402A72
.text:00402A72 loc_402A72:                             ; CODE XREF: sub_4027A0+380↓j
.text:00402A72                 mov     [esp+6Ch+var_1E], 0
.text:00402A77                 mov     [esp+6Ch+var_1F], 1
.text:00402A7C
.text:00402A7C loc_402A7C:                             ; CODE XREF: sub_4027A0+334↓j
.text:00402A7C                 mov     [esp+6Ch+var_20], 0
.text:00402A81                 call    sub_403EE0
.text:00402A86                 test    al, al
.text:00402A88                 jz      short loc_402A96
.text:00402A8A                 cmp     [esp+6Ch+var_1F], 0
.text:00402A8F                 jz      short loc_402A96
.text:00402A91                 mov     [esp+6Ch+var_20], 1
.text:00402A96
.text:00402A96 loc_402A96:                             ; CODE XREF: sub_4027A0+2E8↑j
.text:00402A96                                         ; sub_4027A0+2EF↑j
.text:00402A96                 movzx   eax, [esp+6Ch+var_20]
.text:00402A9B                 mov     ebx, ds:dword_410000
.text:00402AA1                 mov     ebp, ds:dword_410010
.text:00402AA7                 mov     [esp+6Ch+var_1F], al
.text:00402AAB                 cmp     ebx, ebp
.text:00402AAD                 mov     [esp+6Ch+var_24], ebx
.text:00402AB1                 jge     short loc_402AD6
.text:00402AB3                 cld
.text:00402AB4                 mov     ecx, ds:dword_410020
.text:00402ABA                 mov     edi, offset aA  ; "-a"
.text:00402ABF                 mov     edx, [ecx+ebx*4]
.text:00402AC2                 mov     ecx, 3
.text:00402AC7                 mov     esi, edx
.text:00402AC9                 repe cmpsb
.text:00402ACB                 jnz     short loc_402AD6
.text:00402ACD                 inc     ebx
.text:00402ACE                 mov     ds:dword_410000, ebx
.text:00402AD4                 jmp     short loc_402A7C
.text:00402AD6 ; ---------------------------------------------------------------------------
.text:00402AD6
.text:00402AD6 loc_402AD6:                             ; CODE XREF: sub_4027A0+311↑j
.text:00402AD6                                         ; sub_4027A0+32B↑j
.text:00402AD6                 cmp     [esp+6Ch+var_20], 0
.text:00402ADB                 jnz     short loc_402AE4
.text:00402ADD                 cmp     [esp+6Ch+var_1D], 0
.text:00402AE2                 jz      short loc_402AE9
.text:00402AE4
.text:00402AE4 loc_402AE4:                             ; CODE XREF: sub_4027A0+33B↑j
.text:00402AE4                 mov     [esp+6Ch+var_1E], 1
.text:00402AE9
.text:00402AE9 loc_402AE9:                             ; CODE XREF: sub_4027A0+342↑j
.text:00402AE9                 movzx   ebx, [esp+6Ch+var_1E]
.text:00402AEE                 cmp     [esp+6Ch+var_24], ebp
.text:00402AF2                 mov     [esp+6Ch+var_1D], bl
.text:00402AF6                 jge     short loc_402B25
.text:00402AF8                 cld
.text:00402AF9                 mov     edi, ds:dword_410020
.text:00402AFF                 mov     ecx, 3
.text:00402B04                 mov     esi, [esp+6Ch+var_24]
.text:00402B08                 mov     ebp, [edi+esi*4]
.text:00402B0B                 mov     edi, offset aO  ; "-o"
.text:00402B10                 mov     esi, ebp
.text:00402B12                 repe cmpsb
.text:00402B14                 jnz     short loc_402B25
.text:00402B16                 mov     eax, [esp+6Ch+var_24]
.text:00402B1A                 inc     eax
.text:00402B1B                 mov     ds:dword_410000, eax
.text:00402B20                 jmp     loc_402A72
.text:00402B25 ; ---------------------------------------------------------------------------
.text:00402B25
.text:00402B25 loc_402B25:                             ; CODE XREF: sub_4027A0+356↑j
.text:00402B25                                         ; sub_4027A0+374↑j
.text:00402B25                 movzx   eax, [esp+6Ch+var_1E]
.text:00402B2A                 jmp     loc_4027F5
.text:00402B2F ; ---------------------------------------------------------------------------
.text:00402B2F
.text:00402B2F loc_402B2F:                             ; CODE XREF: sub_4027A0+2B7↑j
.text:00402B2F                                         ; sub_4027A0+53D↓j
.text:00402B2F                 mov     [esp+6Ch+Stream], offset aSBinaryOperato ; "%s: binary operator expected\n"
.text:00402B36                 call    ds:__imp_libintl_gettext
.text:00402B3C                 mov     edx, ds:dword_410020
.text:00402B42                 mov     ecx, ds:dword_410000
.text:00402B48                 mov     edi, eax
.text:00402B4A                 mov     ebx, [edx+ecx*4+4]
.text:00402B4E                 jmp     loc_402881
.text:00402B53 ; ---------------------------------------------------------------------------
.text:00402B53
.text:00402B53 loc_402B53:                             ; CODE XREF: sub_4027A0+19E↑j
.text:00402B53                 mov     [esp+6Ch+Stream], 0
.text:00402B5A                 call    sub_4013A0
.text:00402B5F                 jmp     loc_4027F5
.text:00402B64 ; ---------------------------------------------------------------------------
.text:00402B64
.text:00402B64 loc_402B64:                             ; CODE XREF: sub_4027A0+16↑j
.text:00402B64                                         ; DATA XREF: sub_4027A0:jpt_4027B6↑o
.text:00402B64                 cld                     ; jumptable 004027B6 case 4
.text:00402B65                 mov     ebx, ds:dword_410000
.text:00402B6B                 mov     edx, 2
.text:00402B70                 mov     ebp, ds:dword_410020
.text:00402B76                 mov     ecx, edx
.text:00402B78                 mov     [esp+6Ch+var_28], ebx
.text:00402B7C                 mov     edi, [ebp+ebx*4+0]
.text:00402B80                 mov     [esp+6Ch+var_2C], edi
.text:00402B84                 mov     esi, [esp+6Ch+var_2C]
.text:00402B88                 mov     edi, offset byte_402753
.text:00402B8D                 repe cmpsb
.text:00402B8F                 jnz     loc_402DC5
.text:00402B95                 mov     esi, ds:dword_410010
.text:00402B9B                 inc     ebx
.text:00402B9C                 mov     ds:dword_410000, ebx
.text:00402BA2                 cmp     ebx, esi
.text:00402BA4                 mov     [esp+6Ch+var_30], esi
.text:00402BA8                 jge     loc_402853
.text:00402BAE                 mov     ecx, [ebp+ebx*4+4]
.text:00402BB2                 mov     [esp+6Ch+Stream], ecx
.text:00402BB5                 call    sub_402550
.text:00402BBA                 test    al, al
.text:00402BBC                 jnz     loc_402DB4
.text:00402BC2                 cld
.text:00402BC3                 mov     eax, [ebp+ebx*4+0]
.text:00402BC7                 mov     ecx, 2
.text:00402BCC                 mov     edi, offset byte_402753
.text:00402BD1                 mov     esi, eax
.text:00402BD3                 mov     [esp+6Ch+var_34], eax
.text:00402BD7                 repe cmpsb
.text:00402BD9                 jnz     loc_402C61
.text:00402BDF                 mov     ebx, [esp+6Ch+var_28]
.text:00402BE3                 add     ebx, 2
.text:00402BE6                 cmp     ebx, [esp+6Ch+var_30]
.text:00402BEA                 mov     ds:dword_410000, ebx
.text:00402BF0                 jge     loc_402853
.text:00402BF6                 cld
.text:00402BF7                 mov     ebx, [ebp+ebx*4+0]
.text:00402BFB                 mov     edx, 2
.text:00402C00                 mov     edi, offset byte_402753
.text:00402C05                 mov     ecx, edx
.text:00402C07                 mov     esi, ebx
.text:00402C09                 repe cmpsb
.text:00402C0B                 jnz     short loc_402C2D
.text:00402C0D                 mov     ebx, [esp+6Ch+var_28]
.text:00402C11                 mov     edi, [ebp+ebx*4+0Ch]
.text:00402C15                 mov     ebp, ebx
.text:00402C17                 add     ebp, 4
.text:00402C1A                 mov     ds:dword_410000, ebp
.text:00402C20                 cmp     byte ptr [edi], 0
.text:00402C23                 setz    al
.text:00402C26
.text:00402C26 loc_402C26:                             ; CODE XREF: sub_4027A0+4BF↓j
.text:00402C26                 test    al, al
.text:00402C28                 jmp     loc_4029A1
.text:00402C2D ; ---------------------------------------------------------------------------
.text:00402C2D
.text:00402C2D loc_402C2D:                             ; CODE XREF: sub_4027A0+46B↑j
.text:00402C2D                 cmp     byte ptr [ebx], 2Dh ; '-'
.text:00402C30                 jnz     loc_402853
.text:00402C36                 cmp     byte ptr [ebx+1], 0
.text:00402C3A                 jz      loc_402853
.text:00402C40                 cmp     byte ptr [ebx+2], 0
.text:00402C44                 jnz     loc_402853
.text:00402C4A                 mov     [esp+6Ch+Stream], ebx
.text:00402C4D                 call    sub_402650
.text:00402C52                 test    al, al
.text:00402C54                 jz      loc_4028F6
.text:00402C5A                 call    sub_401DB0
.text:00402C5F                 jmp     short loc_402C26
.text:00402C61 ; ---------------------------------------------------------------------------
.text:00402C61
.text:00402C61 loc_402C61:                             ; CODE XREF: sub_4027A0+439↑j
.text:00402C61                 cld
.text:00402C62                 mov     esi, [esp+6Ch+var_34]
.text:00402C66                 mov     edi, offset asc_402772 ; "("
.text:00402C6B                 mov     ecx, 2
.text:00402C70                 repe cmpsb
.text:00402C72                 jnz     short loc_402CB0
.text:00402C74                 mov     edx, [ebp+ebx*4+8]
.text:00402C78                 mov     edi, offset asc_402774 ; ")"
.text:00402C7D                 mov     ecx, 2
.text:00402C82                 mov     esi, edx
.text:00402C84                 repe cmpsb
.text:00402C86                 jnz     short loc_402CB0
.text:00402C88                 mov     ecx, [esp+6Ch+var_28]
.text:00402C8C                 mov     edi, [ebp+ecx*4+8]
.text:00402C90                 mov     eax, ecx
.text:00402C92                 add     eax, 3
.text:00402C95                 mov     esi, ecx
.text:00402C97                 mov     ds:dword_410000, eax
.text:00402C9C                 cmp     byte ptr [edi], 0
.text:00402C9F                 setnz   al
.text:00402CA2                 add     esi, 4
.text:00402CA5                 mov     ds:dword_410000, esi
.text:00402CAB                 jmp     loc_4029A4
.text:00402CB0 ; ---------------------------------------------------------------------------
.text:00402CB0
.text:00402CB0 loc_402CB0:                             ; CODE XREF: sub_4027A0+4D2↑j
.text:00402CB0                                         ; sub_4027A0+4E6↑j
.text:00402CB0                 cld
.text:00402CB1                 mov     edx, ds:dword_410000
.text:00402CB7                 mov     edi, offset aA  ; "-a"
.text:00402CBC                 mov     ecx, 3
.text:00402CC1                 mov     ebx, [ebp+edx*4+4]
.text:00402CC5                 mov     [esp+6Ch+var_38], edx
.text:00402CC9                 mov     esi, ebx
.text:00402CCB                 repe cmpsb
.text:00402CCD                 jz      short loc_402CE3
.text:00402CCF                 mov     edi, offset aO  ; "-o"
.text:00402CD4                 mov     ecx, 3
.text:00402CD9                 mov     esi, ebx
.text:00402CDB                 repe cmpsb
.text:00402CDD                 jnz     loc_402B2F
.text:00402CE3
.text:00402CE3 loc_402CE3:                             ; CODE XREF: sub_4027A0+52D↑j
.text:00402CE3                 mov     [esp+6Ch+var_39], 0
.text:00402CE8                 mov     ebp, [esp+6Ch+var_30]
.text:00402CEC                 cmp     [esp+6Ch+var_38], ebp
.text:00402CF0                 jge     loc_402853
.text:00402CF6
.text:00402CF6 loc_402CF6:                             ; CODE XREF: sub_4027A0+605↓j
.text:00402CF6                 mov     [esp+6Ch+var_3A], 0
.text:00402CFB                 mov     [esp+6Ch+var_3B], 1
.text:00402D00
.text:00402D00 loc_402D00:                             ; CODE XREF: sub_4027A0+5B8↓j
.text:00402D00                 mov     [esp+6Ch+var_3C], 0
.text:00402D05                 call    sub_403EE0
.text:00402D0A                 test    al, al
.text:00402D0C                 jz      short loc_402D1A
.text:00402D0E                 cmp     [esp+6Ch+var_3B], 0
.text:00402D13                 jz      short loc_402D1A
.text:00402D15                 mov     [esp+6Ch+var_3C], 1
.text:00402D1A
.text:00402D1A loc_402D1A:                             ; CODE XREF: sub_4027A0+56C↑j
.text:00402D1A                                         ; sub_4027A0+573↑j
.text:00402D1A                 movzx   ebx, [esp+6Ch+var_3C]
.text:00402D1F                 mov     ebp, ds:dword_410010
.text:00402D25                 mov     [esp+6Ch+var_3B], bl
.text:00402D29                 mov     ebx, ds:dword_410000
.text:00402D2F                 cmp     ebx, ebp
.text:00402D31                 mov     [esp+6Ch+var_40], ebx
.text:00402D35                 jge     short loc_402D5A
.text:00402D37                 cld
.text:00402D38                 mov     esi, ds:dword_410020
.text:00402D3E                 mov     ecx, 3
.text:00402D43                 mov     edi, [esi+ebx*4]
.text:00402D46                 mov     esi, edi
.text:00402D48                 mov     edi, offset aA  ; "-a"
.text:00402D4D                 repe cmpsb
.text:00402D4F                 jnz     short loc_402D5A
.text:00402D51                 inc     ebx
.text:00402D52                 mov     ds:dword_410000, ebx
.text:00402D58                 jmp     short loc_402D00
.text:00402D5A ; ---------------------------------------------------------------------------
.text:00402D5A
.text:00402D5A loc_402D5A:                             ; CODE XREF: sub_4027A0+595↑j
.text:00402D5A                                         ; sub_4027A0+5AF↑j
.text:00402D5A                 cmp     [esp+6Ch+var_3C], 0
.text:00402D5F                 jnz     short loc_402D68
.text:00402D61                 cmp     [esp+6Ch+var_39], 0
.text:00402D66                 jz      short loc_402D6D
.text:00402D68
.text:00402D68 loc_402D68:                             ; CODE XREF: sub_4027A0+5BF↑j
.text:00402D68                 mov     [esp+6Ch+var_3A], 1
.text:00402D6D
.text:00402D6D loc_402D6D:                             ; CODE XREF: sub_4027A0+5C6↑j
.text:00402D6D                 movzx   ecx, [esp+6Ch+var_3A]
.text:00402D72                 cmp     [esp+6Ch+var_40], ebp
.text:00402D76                 mov     [esp+6Ch+var_39], cl
.text:00402D7A                 jge     short loc_402DAA
.text:00402D7C                 cld
.text:00402D7D                 mov     ebx, ds:dword_410020
.text:00402D83                 mov     edi, offset aO  ; "-o"
.text:00402D88                 mov     eax, [esp+6Ch+var_40]
.text:00402D8C                 mov     ecx, 3
.text:00402D91                 mov     ebp, [ebx+eax*4]
.text:00402D94                 mov     esi, ebp
.text:00402D96                 repe cmpsb
.text:00402D98                 jnz     short loc_402DAA
.text:00402D9A                 mov     edx, [esp+6Ch+var_40]
.text:00402D9E                 inc     edx
.text:00402D9F                 mov     ds:dword_410000, edx
.text:00402DA5                 jmp     loc_402CF6
.text:00402DAA ; ---------------------------------------------------------------------------
.text:00402DAA
.text:00402DAA loc_402DAA:                             ; CODE XREF: sub_4027A0+5DA↑j
.text:00402DAA                                         ; sub_4027A0+5F8↑j
.text:00402DAA                 movzx   eax, [esp+6Ch+var_3A]
.text:00402DAF                 jmp     loc_4029A4
.text:00402DB4 ; ---------------------------------------------------------------------------
.text:00402DB4
.text:00402DB4 loc_402DB4:                             ; CODE XREF: sub_4027A0+41C↑j
.text:00402DB4                 mov     [esp+6Ch+Stream], 0
.text:00402DBB                 call    sub_4013A0
.text:00402DC0                 jmp     loc_4029A4
.text:00402DC5 ; ---------------------------------------------------------------------------
.text:00402DC5
.text:00402DC5 loc_402DC5:                             ; CODE XREF: sub_4027A0+3EF↑j
.text:00402DC5                 cld
.text:00402DC6                 mov     esi, [esp+6Ch+var_2C]
.text:00402DCA                 mov     edx, 2
.text:00402DCF                 mov     edi, offset asc_402772 ; "("
.text:00402DD4                 mov     ecx, edx
.text:00402DD6                 repe cmpsb
.text:00402DD8                 jnz     def_4027B6      ; jumptable 004027B6 default case, cases 0,5
.text:00402DDE                 mov     ecx, [ebp+ebx*4+0Ch]
.text:00402DE2                 mov     edx, 2
.text:00402DE7                 mov     edi, offset asc_402774 ; ")"
.text:00402DEC                 mov     esi, ecx
.text:00402DEE                 mov     ecx, edx
.text:00402DF0                 repe cmpsb
.text:00402DF2                 jnz     short def_4027B6 ; jumptable 004027B6 default case, cases 0,5
.text:00402DF4                 inc     ebx
.text:00402DF5                 mov     edx, 2
.text:00402DFA                 mov     edi, offset byte_402753
.text:00402DFF                 mov     ds:dword_410000, ebx
.text:00402E05                 mov     ecx, edx
.text:00402E07                 mov     ebx, [ebp+ebx*4+0]
.text:00402E0B                 mov     esi, ebx
.text:00402E0D                 repe cmpsb
.text:00402E0F                 jnz     short loc_402E30
.text:00402E11                 mov     esi, [esp+6Ch+var_28]
.text:00402E15                 mov     edi, [ebp+esi*4+8]
.text:00402E19                 mov     ebx, esi
.text:00402E1B                 add     ebx, 3
.text:00402E1E                 mov     ds:dword_410000, ebx
.text:00402E24                 cmp     byte ptr [edi], 0
.text:00402E27                 setz    al
.text:00402E2A
.text:00402E2A loc_402E2A:                             ; CODE XREF: sub_4027A0+6C8↓j
.text:00402E2A                 inc     ebx
.text:00402E2B                 jmp     loc_402A25
.text:00402E30 ; ---------------------------------------------------------------------------
.text:00402E30
.text:00402E30 loc_402E30:                             ; CODE XREF: sub_4027A0+66F↑j
.text:00402E30                 cmp     byte ptr [ebx], 2Dh ; '-'
.text:00402E33                 jnz     loc_402853
.text:00402E39                 cmp     byte ptr [ebx+1], 0
.text:00402E3D                 jz      loc_402853
.text:00402E43                 cmp     byte ptr [ebx+2], 0
.text:00402E47                 jnz     loc_402853
.text:00402E4D                 mov     [esp+6Ch+Stream], ebx
.text:00402E50                 call    sub_402650
.text:00402E55                 test    al, al
.text:00402E57                 jz      loc_4028F6
.text:00402E5D                 call    sub_401DB0
.text:00402E62                 mov     ebx, ds:dword_410000
.text:00402E68                 jmp     short loc_402E2A
.text:00402E68 ; ---------------------------------------------------------------------------
.text:00402E6A                 align 10h
.text:00402E70
.text:00402E70 def_4027B6:                             ; CODE XREF: sub_4027A0+C↑j
.text:00402E70                                         ; sub_4027A0+16↑j ...
.text:00402E70                 mov     ebx, [esp+6Ch+arg_0] ; jumptable 004027B6 default case, cases 0,5
.text:00402E74                 test    ebx, ebx
.text:00402E76                 jle     loc_402F5E
.text:00402E7C                 mov     ecx, ds:dword_410010
.text:00402E82                 cmp     ds:dword_410000, ecx
.text:00402E88                 jge     loc_402853
.text:00402E8E                 mov     [esp+6Ch+var_45], 0
.text:00402E93
.text:00402E93 loc_402E93:                             ; CODE XREF: sub_4027A0+7AF↓j
.text:00402E93                 mov     [esp+6Ch+var_46], 0
.text:00402E98                 mov     [esp+6Ch+var_47], 1
.text:00402E9D                 lea     esi, [esi+0]
.text:00402EA0
.text:00402EA0 loc_402EA0:                             ; CODE XREF: sub_4027A0+762↓j
.text:00402EA0                 mov     [esp+6Ch+var_48], 0
.text:00402EA5                 call    sub_403EE0
.text:00402EAA                 test    al, al
.text:00402EAC                 jz      short loc_402EC0
.text:00402EAE                 cmp     [esp+6Ch+var_47], 0
.text:00402EB3                 jz      short loc_402EC0
.text:00402EB5                 mov     [esp+6Ch+var_48], 1
.text:00402EBA                 lea     esi, [esi+0]
.text:00402EC0
.text:00402EC0 loc_402EC0:                             ; CODE XREF: sub_4027A0+70C↑j
.text:00402EC0                                         ; sub_4027A0+713↑j
.text:00402EC0                 movzx   edx, [esp+6Ch+var_48]
.text:00402EC5                 mov     ebx, ds:dword_410000
.text:00402ECB                 mov     ebp, ds:dword_410010
.text:00402ED1                 mov     [esp+6Ch+var_47], dl
.text:00402ED5                 cmp     ebx, ebp
.text:00402ED7                 mov     [esp+6Ch+var_54], ebx
.text:00402EDB                 jge     short loc_402F04
.text:00402EDD                 cld
.text:00402EDE                 mov     esi, ds:dword_410020
.text:00402EE4                 mov     edi, offset aA  ; "-a"
.text:00402EE9                 mov     ecx, 3
.text:00402EEE                 mov     edx, [esi+ebx*4]
.text:00402EF1                 mov     esi, edx
.text:00402EF3                 mov     [esp+6Ch+var_4C], edx
.text:00402EF7                 repe cmpsb
.text:00402EF9                 jnz     short loc_402F04
.text:00402EFB                 inc     ebx
.text:00402EFC                 mov     ds:dword_410000, ebx
.text:00402F02                 jmp     short loc_402EA0
.text:00402F04 ; ---------------------------------------------------------------------------
.text:00402F04
.text:00402F04 loc_402F04:                             ; CODE XREF: sub_4027A0+73B↑j
.text:00402F04                                         ; sub_4027A0+759↑j
.text:00402F04                 cmp     [esp+6Ch+var_48], 0
.text:00402F09                 jnz     short loc_402F12
.text:00402F0B                 cmp     [esp+6Ch+var_45], 0
.text:00402F10                 jz      short loc_402F17
.text:00402F12
.text:00402F12 loc_402F12:                             ; CODE XREF: sub_4027A0+769↑j
.text:00402F12                 mov     [esp+6Ch+var_46], 1
.text:00402F17
.text:00402F17 loc_402F17:                             ; CODE XREF: sub_4027A0+770↑j
.text:00402F17                 movzx   ebx, [esp+6Ch+var_46]
.text:00402F1C                 cmp     [esp+6Ch+var_54], ebp
.text:00402F20                 mov     [esp+6Ch+var_45], bl
.text:00402F24                 jge     short loc_402F54
.text:00402F26                 cld
.text:00402F27                 mov     edi, ds:dword_410020
.text:00402F2D                 mov     ecx, 3
.text:00402F32                 mov     eax, [esp+6Ch+var_54]
.text:00402F36                 mov     ebp, [edi+eax*4]
.text:00402F39                 mov     edi, offset aO  ; "-o"
.text:00402F3E                 mov     esi, ebp
.text:00402F40                 repe cmpsb
.text:00402F42                 jnz     short loc_402F54
.text:00402F44                 mov     ecx, [esp+6Ch+var_54]
.text:00402F48                 inc     ecx
.text:00402F49                 mov     ds:dword_410000, ecx
.text:00402F4F                 jmp     loc_402E93
.text:00402F54 ; ---------------------------------------------------------------------------
.text:00402F54
.text:00402F54 loc_402F54:                             ; CODE XREF: sub_4027A0+784↑j
.text:00402F54                                         ; sub_4027A0+7A2↑j
.text:00402F54                 movzx   eax, [esp+6Ch+var_46]
.text:00402F59                 jmp     loc_4027F5
.text:00402F5E ; ---------------------------------------------------------------------------
.text:00402F5E
.text:00402F5E loc_402F5E:                             ; CODE XREF: sub_4027A0+6D6↑j
.text:00402F5E                 call    abort
.text:00402F5E sub_4027A0      endp
.text:00402F5E
.text:00402F5E ; ---------------------------------------------------------------------------
.text:00402F63 ; const char Locale
.text:00402F63 Locale          db 0                    ; DATA XREF: sub_402FC0+1F↓o
.text:00402F64                 align 20h
.text:00402F80
.text:00402F80 loc_402F80:                             ; DATA XREF: sub_402FC0:loc_402FF9↓o
.text:00402F80                 arpl    [edx], di
.text:00402F82                 das
.text:00402F83                 jo      short near ptr loc_402FF4+3
.text:00402F85                 outsd
.text:00402F86                 db      67h
.text:00402F86                 jb      near ptr loc_402FE7+3
.text:00402F89                 jle     short near ptr aExtraArgumentS+0Fh ; "%s"
.text:00402F8B                 das
.text:00402F8C                 inc     ebx
.text:00402F8D                 outsd
.text:00402F8E                 jb      short near ptr loc_402FF4+1
.text:00402F90                 push    ebp
.text:00402F91                 jz      short near ptr loc_402FF9+3
.text:00402F93                 insb
.text:00402F94                 jnb     short loc_402FC5
.text:00402F96                 jnb     short near ptr loc_402FF9+7
.text:00402F98                 popa
.text:00402F99                 jb      short near ptr loc_402FF9+7
.text:00402F9B                 das
.text:00402F9C                 insb
.text:00402F9D                 outsd
.text:00402F9E                 arpl    [ecx+6Ch], sp
.text:00402F9E ; ---------------------------------------------------------------------------
.text:00402FA1                 db 65h, 0
.text:00402FA3 aCoreutils      db 'coreutils',0        ; DATA XREF: sub_402FC0+41↓o
.text:00402FA3                                         ; sub_402FC0+4E↓o
.text:00402FAD aExtraArgumentS db 'extra argument %s',0
.text:00402FAD                                         ; CODE XREF: .text:00402F89↑j
.text:00402FAD                                         ; DATA XREF: sub_402FC0+AD↓o
.text:00402FBF                 align 10h
.text:00402FC0
.text:00402FC0 ; =============== S U B R O U T I N E =======================================
.text:00402FC0
.text:00402FC0 ; Attributes: noreturn bp-based frame fuzzy-sp
.text:00402FC0
.text:00402FC0 sub_402FC0      proc near               ; CODE XREF: sub_401080+E5↑p
.text:00402FC0
.text:00402FC0 Category        = dword ptr -38h
.text:00402FC0 Locale          = dword ptr -34h
.text:00402FC0 var_30          = dword ptr -30h
.text:00402FC0 arg_0           = dword ptr  8
.text:00402FC0 arg_4           = dword ptr  0Ch
.text:00402FC0
.text:00402FC0                 push    ebp
.text:00402FC1                 xor     eax, eax
.text:00402FC3                 mov     ebp, esp
.text:00402FC5
.text:00402FC5 loc_402FC5:                             ; CODE XREF: .text:00402F94↑j
.text:00402FC5                 push    esi
.text:00402FC6                 push    ebx
.text:00402FC7                 sub     esp, 30h
.text:00402FCA                 mov     ebx, [ebp+arg_4]
.text:00402FCD                 and     esp, 0FFFFFFF0h
.text:00402FD0                 mov     esi, [ebp+arg_0]
.text:00402FD3                 call    __alloca
.text:00402FD8                 call    sub_40D430
.text:00402FDD                 mov     edx, [ebx]
.text:00402FDF                 mov     [esp+38h+Locale], offset Locale ; Locale
.text:00402FE7
.text:00402FE7 loc_402FE7:                             ; CODE XREF: .text:00402F86↑j
.text:00402FE7                 mov     [esp+38h+Category], 0 ; Category
.text:00402FEE                 mov     ds:dword_4104E0, edx
.text:00402FF4
.text:00402FF4 loc_402FF4:                             ; CODE XREF: .text:00402F8E↑j
.text:00402FF4                                         ; .text:00402F83↑j
.text:00402FF4                 call    setlocale
.text:00402FF9
.text:00402FF9 loc_402FF9:                             ; CODE XREF: .text:00402F91↑j
.text:00402FF9                                         ; .text:00402F96↑j ...
.text:00402FF9                 mov     [esp+38h+Locale], offset loc_402F80
.text:00403001                 mov     [esp+38h+Category], offset aCoreutils ; "coreutils"
.text:00403008                 call    ds:libintl_bindtextdomain
.text:0040300E                 mov     [esp+38h+Category], offset aCoreutils ; "coreutils"
.text:00403015                 call    ds:libintl_textdomain
.text:0040301B                 mov     [esp+38h+Category], offset sub_4043D0 ; void (__cdecl *)()
.text:00403022                 mov     eax, 2
.text:00403027                 mov     Code, eax
.text:0040302C                 call    sub_401040
.text:00403031                 mov     ds:dword_410020, ebx
.text:00403037                 mov     eax, 1
.text:0040303C                 cmp     esi, 1
.text:0040303F                 mov     ds:dword_410010, esi
.text:00403045                 mov     ds:dword_410000, eax
.text:0040304A                 jle     loc_4030FB
.text:00403050                 lea     ebx, [esi-1]
.text:00403053                 mov     [esp+38h+Category], ebx
.text:00403056                 call    sub_4027A0
.text:0040305B                 mov     ecx, ds:dword_410010
.text:00403061                 cmp     ds:dword_410000, ecx
.text:00403067                 jz      loc_4030EF
.text:0040306D                 mov     [esp+38h+Category], offset aExtraArgumentS ; "extra argument %s"
.text:00403074                 call    ds:__imp_libintl_gettext
.text:0040307A                 mov     ecx, ds:dword_410020
.text:00403080                 mov     esi, eax
.text:00403082                 mov     eax, ds:dword_410000
.text:00403087                 mov     ebx, [ecx+eax*4]
.text:0040308A                 mov     [esp+38h+Category], ebx ; char *
.text:0040308D                 call    sub_4044E0
.text:00403092                 mov     ecx, ds:dword_410020
.text:00403098                 mov     ebx, eax
.text:0040309A                 mov     edx, [ecx]
.text:0040309C                 mov     [esp+38h+Locale], offset Format ; "%s: "
.text:004030A4                 mov     ecx, ds:_iob
.text:004030AA                 mov     [esp+38h+var_30], edx
.text:004030AE                 add     ecx, 40h ; '@'
.text:004030B1                 mov     [esp+38h+Category], ecx ; Stream
.text:004030B4                 call    fprintf
.text:004030B9                 mov     [esp+38h+Locale], esi ; Format
.text:004030BD                 mov     edx, ds:_iob
.text:004030C3                 mov     [esp+38h+var_30], ebx
.text:004030C7                 add     edx, 40h ; '@'
.text:004030CA                 mov     [esp+38h+Category], edx ; Stream
.text:004030CD                 call    fprintf
.text:004030D2                 mov     esi, ds:_iob
.text:004030D8                 add     esi, 40h ; '@'
.text:004030DB                 mov     [esp+38h+Category], esi ; Stream
.text:004030DE                 call    fflush
.text:004030E3                 mov     [esp+38h+Category], 2 ; Code
.text:004030EA
.text:004030EA loc_4030EA:                             ; CODE XREF: sub_402FC0+139↓j
.text:004030EA                                         ; sub_402FC0+142↓j
.text:004030EA                 call    exit
.text:004030EF ; ---------------------------------------------------------------------------
.text:004030EF
.text:004030EF loc_4030EF:                             ; CODE XREF: sub_402FC0+A7↑j
.text:004030EF                 xor     ebx, ebx
.text:004030F1                 test    al, al
.text:004030F3                 setz    bl
.text:004030F6                 mov     [esp+38h+Category], ebx
.text:004030F9                 jmp     short loc_4030EA
.text:004030FB ; ---------------------------------------------------------------------------
.text:004030FB
.text:004030FB loc_4030FB:                             ; CODE XREF: sub_402FC0+8A↑j
.text:004030FB                 mov     [esp+38h+Category], 1
.text:00403102                 jmp     short loc_4030EA
.text:00403102 sub_402FC0      endp
.text:00403102
.text:00403102 ; ---------------------------------------------------------------------------
.text:00403104                 align 20h
.text:00403120 aTrySHelpForMor db 'Try `%s --help',27h,' for more information.',0Ah,0
.text:00403120                                         ; DATA XREF: .text:00403C9C↓o
.text:00403147                 align 20h
.text:00403160 aUsageTestExpre db 'Usage: test EXPRESSION',0Ah
.text:00403160                                         ; DATA XREF: .text:loc_403CD0↓o
.text:00403160                 db '  or:  test',0Ah
.text:00403160                 db '  or:  [ EXPRESSION ]',0Ah
.text:00403160                 db '  or:  [ ]',0Ah
.text:00403160                 db '  or:  [ OPTION',0Ah
.text:00403160                 db 'Exit with the status determined by EXPRESSION.',0Ah
.text:00403160                 db 0Ah,0
.text:004031E5                 align 20h
.text:00403200 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.text:00403200                                         ; DATA XREF: .text:00403CF2↓o
.text:0040322D                 align 20h
.text:00403240 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.text:00403240                                         ; DATA XREF: .text:00403D14↓o
.text:00403276                 align 10h
.text:00403280 aAnOmittedExpre db 0Ah                  ; DATA XREF: .text:00403D36↓o
.text:00403280                 db 'An omitted EXPRESSION defaults to false.  Otherwise,',0Ah
.text:00403280                 db 'EXPRESSION is true or false and sets exit status.  It is one of:',0Ah
.text:00403280                 db 0
.text:004032F8                 align 10h
.text:00403300 aExpressionExpr db 0Ah                  ; DATA XREF: .text:00403D58↓o
.text:00403300                 db '  ( EXPRESSION )               EXPRESSION is true',0Ah
.text:00403300                 db '  ! EXPRESSION                 EXPRESSION is false',0Ah
.text:00403300                 db '  EXPRESSION1 -a EXPRESSION2   both EXPRESSION1 and EXPRESSION2 a'
.text:00403300                 db 're true',0Ah
.text:00403300                 db '  EXPRESSION1 -o EXPRESSION2   either EXPRESSION1 or EXPRESSION2 '
.text:00403300                 db 'is true',0Ah,0
.text:004033F9                 align 10h
.text:00403400 aNStringTheLeng db 0Ah                  ; DATA XREF: .text:00403D7A↓o
.text:00403400                 db '  -n STRING            the length of STRING is nonzero',0Ah
.text:00403400                 db '  STRING               equivalent to -n STRING',0Ah
.text:00403400                 db '  -z STRING            the length of STRING is zero',0Ah
.text:00403400                 db '  STRING1 = STRING2    the strings are equal',0Ah
.text:00403400                 db '  STRING1 != STRING2   the strings are not equal',0Ah,0
.text:004034FA                 align 10h
.text:00403500 aInteger1EqInte db 0Ah                  ; DATA XREF: .text:00403D9C↓o
.text:00403500                 db '  INTEGER1 -eq INTEGER2   INTEGER1 is equal to INTEGER2',0Ah
.text:00403500                 db '  INTEGER1 -ge INTEGER2   INTEGER1 is greater than or equal to IN'
.text:00403500                 db 'TEGER2',0Ah
.text:00403500                 db '  INTEGER1 -gt INTEGER2   INTEGER1 is greater than INTEGER2',0Ah
.text:00403500                 db '  INTEGER1 -le INTEGER2   INTEGER1 is less than or equal to INTEG'
.text:00403500                 db 'ER2',0Ah
.text:00403500                 db '  INTEGER1 -lt INTEGER2   INTEGER1 is less than INTEGER2',0Ah
.text:00403500                 db '  INTEGER1 -ne INTEGER2   INTEGER1 is not equal to INTEGER2',0Ah,0
.text:00403678                 align 10h
.text:00403680 aFile1EfFile2Fi db 0Ah                  ; DATA XREF: .text:00403DBE↓o
.text:00403680                 db '  FILE1 -ef FILE2   FILE1 and FILE2 have the same device and inod'
.text:00403680                 db 'e numbers',0Ah
.text:00403680                 db '  FILE1 -nt FILE2   FILE1 is newer (modification date) than FILE2'
.text:00403680                 db 0Ah
.text:00403680                 db '  FILE1 -ot FILE2   FILE1 is older than FILE2',0Ah,0
.text:0040373D                 align 10h
.text:00403740 aBFileFileExist db 0Ah                  ; DATA XREF: .text:00403DE0↓o
.text:00403740                 db '  -b FILE     FILE exists and is block special',0Ah
.text:00403740                 db '  -c FILE     FILE exists and is character special',0Ah
.text:00403740                 db '  -d FILE     FILE exists and is a directory',0Ah
.text:00403740                 db '  -e FILE     FILE exists',0Ah,0
.text:004037EB                 align 20h
.text:00403800 aFFileFileExist db '  -f FILE     FILE exists and is a regular file',0Ah
.text:00403800                                         ; DATA XREF: .text:00403E02↓o
.text:00403800                 db '  -g FILE     FILE exists and is set-group-ID',0Ah
.text:00403800                 db '  -G FILE     FILE exists and is owned by the effective group ID',0Ah
.text:00403800                 db '  -h FILE     FILE exists and is a symbolic link (same as -L)',0Ah
.text:00403800                 db '  -k FILE     FILE exists and has its sticky bit set',0Ah,0
.text:00403913                 align 10h
.text:00403920 aLFileFileExist db '  -L FILE     FILE exists and is a symbolic link (same as -h)',0Ah
.text:00403920                                         ; DATA XREF: .text:00403E24↓o
.text:00403920                 db '  -O FILE     FILE exists and is owned by the effective user ID',0Ah
.text:00403920                 db '  -p FILE     FILE exists and is a named pipe',0Ah
.text:00403920                 db '  -r FILE     FILE exists and read permission is granted',0Ah
.text:00403920                 db '  -s FILE     FILE exists and has a size greater than zero',0Ah,0
.text:00403A41                 align 20h
.text:00403A60 aSFileFileExist db '  -S FILE     FILE exists and is a socket',0Ah
.text:00403A60                                         ; DATA XREF: .text:00403E46↓o
.text:00403A60                 db '  -t FD       file descriptor FD is opened on a terminal',0Ah
.text:00403A60                 db '  -u FILE     FILE exists and its set-user-ID bit is set',0Ah
.text:00403A60                 db '  -w FILE     FILE exists and write permission is granted',0Ah
.text:00403A60                 db '  -x FILE     FILE exists and execute (or search) permission is g'
.text:00403A60                 db 'ranted',0Ah,0
.text:00403B7F                 align 10h
.text:00403B80 aExceptForHAndL db 0Ah                  ; DATA XREF: .text:00403E68↓o
.text:00403B80                 db 'Except for -h and -L, all FILE-related tests dereference symbolic'
.text:00403B80                 db ' links.',0Ah
.text:00403B80                 db 'Beware that parentheses need to be escaped (e.g., by backslashes)'
.text:00403B80                 db ' for shells.',0Ah
.text:00403B80                 db 'INTEGER may also be -l STRING, which evaluates to the length of S'
.text:00403B80                 db 'TRING.',0Ah,0
.text:00403C61 aReportBugsToS  db 0Ah                  ; DATA XREF: .text:00403E8A↓o
.text:00403C61                 db 'Report bugs to <%s>.',0Ah,0
.text:00403C78 aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.text:00403C78                                         ; DATA XREF: .text:00403E97↓o
.text:00403C8E                 align 10h
.text:00403C90                 push    ebx
.text:00403C91                 sub     esp, 18h
.text:00403C94                 mov     ebx, [esp+20h]
.text:00403C98                 test    ebx, ebx
.text:00403C9A                 jz      short loc_403CD0
.text:00403C9C                 mov     dword ptr [esp], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:00403CA3                 call    ds:__imp_libintl_gettext
.text:00403CA9                 mov     edx, ds:_iob
.text:00403CAF                 mov     ecx, ds:dword_4104E0
.text:00403CB5                 add     edx, 40h ; '@'
.text:00403CB8                 mov     [esp+8], ecx
.text:00403CBC                 mov     [esp+4], eax
.text:00403CC0                 mov     [esp], edx
.text:00403CC3                 call    fprintf
.text:00403CC8
.text:00403CC8 loc_403CC8:                             ; CODE XREF: .text:00403EA7↓j
.text:00403CC8                 mov     [esp], ebx
.text:00403CCB                 call    exit
.text:00403CD0 ; ---------------------------------------------------------------------------
.text:00403CD0
.text:00403CD0 loc_403CD0:                             ; CODE XREF: .text:00403C9A↑j
.text:00403CD0                 mov     dword ptr [esp], offset aUsageTestExpre ; "Usage: test EXPRESSION\n  or:  test\n  "...
.text:00403CD7                 call    ds:__imp_libintl_gettext
.text:00403CDD                 mov     ecx, ds:_iob
.text:00403CE3                 add     ecx, 20h ; ' '
.text:00403CE6                 mov     [esp+4], ecx
.text:00403CEA                 mov     [esp], eax
.text:00403CED                 call    fputs
.text:00403CF2                 mov     dword ptr [esp], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:00403CF9                 call    ds:__imp_libintl_gettext
.text:00403CFF                 mov     ecx, ds:_iob
.text:00403D05                 add     ecx, 20h ; ' '
.text:00403D08                 mov     [esp+4], ecx
.text:00403D0C                 mov     [esp], eax
.text:00403D0F                 call    fputs
.text:00403D14                 mov     dword ptr [esp], offset aVersionOutputV ; "      --version  output version informa"...
.text:00403D1B                 call    ds:__imp_libintl_gettext
.text:00403D21                 mov     ecx, ds:_iob
.text:00403D27                 add     ecx, 20h ; ' '
.text:00403D2A                 mov     [esp+4], ecx
.text:00403D2E                 mov     [esp], eax
.text:00403D31                 call    fputs
.text:00403D36                 mov     dword ptr [esp], offset aAnOmittedExpre ; "\nAn omitted EXPRESSION defaults to fal"...
.text:00403D3D                 call    ds:__imp_libintl_gettext
.text:00403D43                 mov     ecx, ds:_iob
.text:00403D49                 add     ecx, 20h ; ' '
.text:00403D4C                 mov     [esp+4], ecx
.text:00403D50                 mov     [esp], eax
.text:00403D53                 call    fputs
.text:00403D58                 mov     dword ptr [esp], offset aExpressionExpr ; "\n  ( EXPRESSION )               EXPRES"...
.text:00403D5F                 call    ds:__imp_libintl_gettext
.text:00403D65                 mov     ecx, ds:_iob
.text:00403D6B                 add     ecx, 20h ; ' '
.text:00403D6E                 mov     [esp+4], ecx
.text:00403D72                 mov     [esp], eax
.text:00403D75                 call    fputs
.text:00403D7A                 mov     dword ptr [esp], offset aNStringTheLeng ; "\n  -n STRING            the length of "...
.text:00403D81                 call    ds:__imp_libintl_gettext
.text:00403D87                 mov     ecx, ds:_iob
.text:00403D8D                 add     ecx, 20h ; ' '
.text:00403D90                 mov     [esp+4], ecx
.text:00403D94                 mov     [esp], eax
.text:00403D97                 call    fputs
.text:00403D9C                 mov     dword ptr [esp], offset aInteger1EqInte ; "\n  INTEGER1 -eq INTEGER2   INTEGER1 is"...
.text:00403DA3                 call    ds:__imp_libintl_gettext
.text:00403DA9                 mov     ecx, ds:_iob
.text:00403DAF                 add     ecx, 20h ; ' '
.text:00403DB2                 mov     [esp+4], ecx
.text:00403DB6                 mov     [esp], eax
.text:00403DB9                 call    fputs
.text:00403DBE                 mov     dword ptr [esp], offset aFile1EfFile2Fi ; "\n  FILE1 -ef FILE2   FILE1 and FILE2 h"...
.text:00403DC5                 call    ds:__imp_libintl_gettext
.text:00403DCB                 mov     ecx, ds:_iob
.text:00403DD1                 add     ecx, 20h ; ' '
.text:00403DD4                 mov     [esp+4], ecx
.text:00403DD8                 mov     [esp], eax
.text:00403DDB                 call    fputs
.text:00403DE0                 mov     dword ptr [esp], offset aBFileFileExist ; "\n  -b FILE     FILE exists and is bloc"...
.text:00403DE7                 call    ds:__imp_libintl_gettext
.text:00403DED                 mov     ecx, ds:_iob
.text:00403DF3                 add     ecx, 20h ; ' '
.text:00403DF6                 mov     [esp+4], ecx
.text:00403DFA                 mov     [esp], eax
.text:00403DFD                 call    fputs
.text:00403E02                 mov     dword ptr [esp], offset aFFileFileExist ; "  -f FILE     FILE exists and is a regu"...
.text:00403E09                 call    ds:__imp_libintl_gettext
.text:00403E0F                 mov     ecx, ds:_iob
.text:00403E15                 add     ecx, 20h ; ' '
.text:00403E18                 mov     [esp+4], ecx
.text:00403E1C                 mov     [esp], eax
.text:00403E1F                 call    fputs
.text:00403E24                 mov     dword ptr [esp], offset aLFileFileExist ; "  -L FILE     FILE exists and is a symb"...
.text:00403E2B                 call    ds:__imp_libintl_gettext
.text:00403E31                 mov     ecx, ds:_iob
.text:00403E37                 add     ecx, 20h ; ' '
.text:00403E3A                 mov     [esp+4], ecx
.text:00403E3E                 mov     [esp], eax
.text:00403E41                 call    fputs
.text:00403E46                 mov     dword ptr [esp], offset aSFileFileExist ; "  -S FILE     FILE exists and is a sock"...
.text:00403E4D                 call    ds:__imp_libintl_gettext
.text:00403E53                 mov     ecx, ds:_iob
.text:00403E59                 add     ecx, 20h ; ' '
.text:00403E5C                 mov     [esp+4], ecx
.text:00403E60                 mov     [esp], eax
.text:00403E63                 call    fputs
.text:00403E68                 mov     dword ptr [esp], offset aExceptForHAndL ; "\nExcept for -h and -L, all FILE-relate"...
.text:00403E6F                 call    ds:__imp_libintl_gettext
.text:00403E75                 mov     ecx, ds:_iob
.text:00403E7B                 add     ecx, 20h ; ' '
.text:00403E7E                 mov     [esp+4], ecx
.text:00403E82                 mov     [esp], eax
.text:00403E85                 call    fputs
.text:00403E8A                 mov     dword ptr [esp], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:00403E91                 call    ds:__imp_libintl_gettext
.text:00403E97                 mov     dword ptr [esp+4], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:00403E9F                 mov     [esp], eax
.text:00403EA2                 call    printf
.text:00403EA7                 jmp     loc_403CC8
.text:00403EA7 ; ---------------------------------------------------------------------------
.text:00403EAC aExpectedFoundS db 27h,')',27h,' expected, found %s',0Ah,0
.text:00403EAC                                         ; DATA XREF: sub_403EE0:loc_404172↓o
.text:00403EC4 aExpected       db 27h,')',27h,' expected',0Ah,0
.text:00403EC4                                         ; DATA XREF: sub_403EE0:loc_40418A↓o
.text:00403ED2                 align 10h
.text:00403EE0
.text:00403EE0 ; =============== S U B R O U T I N E =======================================
.text:00403EE0
.text:00403EE0
.text:00403EE0 sub_403EE0      proc near               ; CODE XREF: sub_4027A0+2E1↑p
.text:00403EE0                                         ; sub_4027A0+565↑p ...
.text:00403EE0
.text:00403EE0 Stream          = dword ptr -5Ch
.text:00403EE0 Format          = dword ptr -58h
.text:00403EE0 var_54          = dword ptr -54h
.text:00403EE0 var_48          = dword ptr -48h
.text:00403EE0 var_44          = dword ptr -44h
.text:00403EE0 var_40          = dword ptr -40h
.text:00403EE0 var_34          = dword ptr -34h
.text:00403EE0 var_30          = dword ptr -30h
.text:00403EE0 var_2C          = byte ptr -2Ch
.text:00403EE0
.text:00403EE0                 push    ebp
.text:00403EE1                 push    edi
.text:00403EE2                 push    esi
.text:00403EE3                 push    ebx
.text:00403EE4                 sub     esp, 4Ch
.text:00403EE7                 mov     ecx, ds:dword_410010
.text:00403EED                 mov     [esp+5Ch+var_2C], 0
.text:00403EF2                 mov     eax, ds:dword_410000
.text:00403EF7                 mov     ebp, ecx
.text:00403EF9                 mov     [esp+5Ch+var_44], eax
.text:00403EFD                 cmp     eax, ecx
.text:00403EFF                 mov     [esp+5Ch+var_48], ecx
.text:00403F03                 jge     loc_4041D0
.text:00403F09                 mov     ebx, ds:dword_410020
.text:00403F0F                 mov     ecx, eax
.text:00403F11                 mov     eax, [ebx+eax*4]
.text:00403F14                 cmp     byte ptr [eax], 21h ; '!'
.text:00403F17                 jz      loc_404206
.text:00403F1D
.text:00403F1D loc_403F1D:                             ; CODE XREF: sub_403EE0+32A↓j
.text:00403F1D                                         ; sub_403EE0+35E↓j ...
.text:00403F1D                 cmp     [esp+5Ch+var_44], ebp
.text:00403F21                 jge     loc_4041D0
.text:00403F27                 mov     ebx, ds:dword_410020
.text:00403F2D                 mov     edi, [esp+5Ch+var_44]
.text:00403F31                 mov     [esp+5Ch+var_40], ebx
.text:00403F35                 mov     eax, [ebx+edi*4]
.text:00403F38                 cmp     byte ptr [eax], 28h ; '('
.text:00403F3B                 jz      loc_4040E0
.text:00403F41
.text:00403F41 loc_403F41:                             ; CODE XREF: sub_403EE0+204↓j
.text:00403F41                 mov     eax, [esp+5Ch+var_44]
.text:00403F45                 sub     ebp, eax
.text:00403F47                 cmp     ebp, 3
.text:00403F4A                 jle     short loc_403F74
.text:00403F4C                 cld
.text:00403F4D                 mov     esi, [esp+5Ch+var_44]
.text:00403F51                 mov     ecx, offset byte_401280
.text:00403F56                 mov     edi, [esp+5Ch+var_40]
.text:00403F5A                 mov     ebp, 3
.text:00403F5F                 mov     edx, [edi+esi*4]
.text:00403F62                 mov     edi, ecx
.text:00403F64                 mov     ecx, ebp
.text:00403F66                 mov     esi, edx
.text:00403F68                 mov     [esp+5Ch+var_34], edx
.text:00403F6C                 repe cmpsb
.text:00403F6E                 jz      loc_40409A
.text:00403F74
.text:00403F74 loc_403F74:                             ; CODE XREF: sub_403EE0+6A↑j
.text:00403F74                                         ; sub_403EE0+1EC↓j
.text:00403F74                 mov     eax, [esp+5Ch+var_44]
.text:00403F78                 sub     [esp+5Ch+var_48], eax
.text:00403F7C                 cmp     [esp+5Ch+var_48], 2
.text:00403F81                 jg      loc_404064
.text:00403F87
.text:00403F87 loc_403F87:                             ; CODE XREF: sub_403EE0+1A4↓j
.text:00403F87                 mov     ebp, [esp+5Ch+var_44]
.text:00403F8B                 mov     eax, [ebx+ebp*4]
.text:00403F8E                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00403F91                 jz      short loc_403FD0
.text:00403F93
.text:00403F93 loc_403F93:                             ; CODE XREF: sub_403EE0+F4↓j
.text:00403F93                                         ; sub_403EE0+FA↓j
.text:00403F93                 mov     ecx, [esp+5Ch+var_44]
.text:00403F97                 mov     edx, [ebx+ecx*4]
.text:00403F9A                 mov     ebp, ecx
.text:00403F9C                 cmp     byte ptr [edx], 0
.text:00403F9F                 setnz   dl
.text:00403FA2                 inc     ebp
.text:00403FA3                 mov     ds:dword_410000, ebp
.text:00403FA9
.text:00403FA9 loc_403FA9:                             ; CODE XREF: sub_403EE0+10F↓j
.text:00403FA9                                         ; sub_403EE0+2A5↓j
.text:00403FA9                 test    dl, dl
.text:00403FAB                 jz      short loc_403FC0
.text:00403FAD                 xor     [esp+5Ch+var_2C], 1
.text:00403FB2                 movzx   eax, [esp+5Ch+var_2C]
.text:00403FB7
.text:00403FB7 loc_403FB7:                             ; CODE XREF: sub_403EE0+EB↓j
.text:00403FB7                 add     esp, 4Ch
.text:00403FBA                 pop     ebx
.text:00403FBB                 pop     esi
.text:00403FBC                 pop     edi
.text:00403FBD                 pop     ebp
.text:00403FBE                 retn
.text:00403FBE ; ---------------------------------------------------------------------------
.text:00403FBF                 align 10h
.text:00403FC0
.text:00403FC0 loc_403FC0:                             ; CODE XREF: sub_403EE0+CB↑j
.text:00403FC0                 movzx   ebx, [esp+5Ch+var_2C]
.text:00403FC5                 and     ebx, 1
.text:00403FC8                 movzx   eax, bl
.text:00403FCB                 jmp     short loc_403FB7
.text:00403FCB ; ---------------------------------------------------------------------------
.text:00403FCD                 align 10h
.text:00403FD0
.text:00403FD0 loc_403FD0:                             ; CODE XREF: sub_403EE0+B1↑j
.text:00403FD0                 cmp     byte ptr [eax+1], 0
.text:00403FD4                 jz      short loc_403F93
.text:00403FD6                 cmp     byte ptr [eax+2], 0
.text:00403FDA                 jnz     short loc_403F93
.text:00403FDC                 mov     [esp+5Ch+Stream], eax
.text:00403FDF                 call    sub_402650
.text:00403FE4                 test    al, al
.text:00403FE6                 jz      short loc_403FF1
.text:00403FE8                 call    sub_401DB0
.text:00403FED
.text:00403FED loc_403FED:                             ; CODE XREF: sub_403EE0+1B5↓j
.text:00403FED                 mov     dl, al
.text:00403FEF                 jmp     short loc_403FA9
.text:00403FF1 ; ---------------------------------------------------------------------------
.text:00403FF1
.text:00403FF1 loc_403FF1:                             ; CODE XREF: sub_403EE0+106↑j
.text:00403FF1                 mov     [esp+5Ch+Stream], offset aSUnaryOperator ; "%s: unary operator expected\n"
.text:00403FF8
.text:00403FF8 loc_403FF8:                             ; CODE XREF: sub_403EE0+299↓j
.text:00403FF8                 call    ds:__imp_libintl_gettext
.text:00403FFE                 mov     ecx, ds:dword_410020
.text:00404004                 mov     edx, ds:dword_410000
.text:0040400A                 mov     edi, eax
.text:0040400C                 mov     ebx, [ecx+edx*4]
.text:0040400F                 mov     eax, [ecx]
.text:00404011
.text:00404011 loc_404011:                             ; CODE XREF: sub_403EE0+321↓j
.text:00404011                 mov     [esp+5Ch+var_54], eax
.text:00404015                 mov     esi, ds:_iob
.text:0040401B                 mov     [esp+5Ch+Format], offset Format ; "%s: "
.text:00404023                 add     esi, 40h ; '@'
.text:00404026                 mov     [esp+5Ch+Stream], esi ; Stream
.text:00404029                 call    fprintf
.text:0040402E                 mov     [esp+5Ch+var_54], ebx
.text:00404032                 mov     [esp+5Ch+Format], edi ; Format
.text:00404036
.text:00404036 loc_404036:                             ; CODE XREF: sub_403EE0+2EA↓j
.text:00404036                 mov     ebx, ds:_iob
.text:0040403C                 add     ebx, 40h ; '@'
.text:0040403F                 mov     [esp+5Ch+Stream], ebx ; Stream
.text:00404042                 call    fprintf
.text:00404047                 mov     edi, ds:_iob
.text:0040404D                 add     edi, 40h ; '@'
.text:00404050                 mov     [esp+5Ch+Stream], edi ; Stream
.text:00404053                 call    fflush
.text:00404058                 mov     [esp+5Ch+Stream], 2 ; Code
.text:0040405F                 call    exit
.text:00404064 ; ---------------------------------------------------------------------------
.text:00404064
.text:00404064 loc_404064:                             ; CODE XREF: sub_403EE0+A1↑j
.text:00404064                 mov     esi, [ebx+eax*4+4]
.text:00404068                 mov     [esp+5Ch+Stream], esi
.text:0040406B                 call    sub_402550
.text:00404070                 test    al, al
.text:00404072                 jnz     short loc_404089
.text:00404074                 mov     ebx, ds:dword_410000
.text:0040407A                 mov     [esp+5Ch+var_44], ebx
.text:0040407E                 mov     ebx, ds:dword_410020
.text:00404084                 jmp     loc_403F87
.text:00404089 ; ---------------------------------------------------------------------------
.text:00404089
.text:00404089 loc_404089:                             ; CODE XREF: sub_403EE0+192↑j
.text:00404089                 mov     [esp+5Ch+Stream], 0
.text:00404090
.text:00404090 loc_404090:                             ; CODE XREF: sub_403EE0+1F8↓j
.text:00404090                 call    sub_4013A0
.text:00404095                 jmp     loc_403FED
.text:0040409A ; ---------------------------------------------------------------------------
.text:0040409A
.text:0040409A loc_40409A:                             ; CODE XREF: sub_403EE0+8E↑j
.text:0040409A                 mov     ebp, [esp+5Ch+var_44]
.text:0040409E                 mov     eax, [esp+5Ch+var_40]
.text:004040A2                 mov     ebx, [eax+ebp*4+8]
.text:004040A6                 mov     [esp+5Ch+Stream], ebx
.text:004040A9                 call    sub_402550
.text:004040AE                 test    al, al
.text:004040B0                 jnz     short loc_4040D1
.text:004040B2                 mov     edx, ds:dword_410000
.text:004040B8                 mov     ecx, ds:dword_410010
.text:004040BE                 mov     ebx, ds:dword_410020
.text:004040C4                 mov     [esp+5Ch+var_44], edx
.text:004040C8                 mov     [esp+5Ch+var_48], ecx
.text:004040CC                 jmp     loc_403F74
.text:004040D1 ; ---------------------------------------------------------------------------
.text:004040D1
.text:004040D1 loc_4040D1:                             ; CODE XREF: sub_403EE0+1D0↑j
.text:004040D1                 mov     [esp+5Ch+Stream], 1
.text:004040D8                 jmp     short loc_404090
.text:004040D8 ; ---------------------------------------------------------------------------
.text:004040DA                 align 10h
.text:004040E0
.text:004040E0 loc_4040E0:                             ; CODE XREF: sub_403EE0+5B↑j
.text:004040E0                 cmp     byte ptr [eax+1], 0
.text:004040E4                 jnz     loc_403F41
.text:004040EA                 inc     edi
.text:004040EB                 mov     ebx, 1
.text:004040F0                 cmp     edi, ebp
.text:004040F2                 mov     [esp+5Ch+var_44], edi
.text:004040F6                 mov     ds:dword_410000, edi
.text:004040FC                 jge     loc_4041D0
.text:00404102                 lea     esi, [esi+0]
.text:00404109                 lea     edi, [edi+0]
.text:00404110
.text:00404110 loc_404110:                             ; CODE XREF: sub_403EE0+260↓j
.text:00404110                 mov     eax, [esp+5Ch+var_44]
.text:00404114                 add     eax, ebx
.text:00404116                 cmp     eax, ebp
.text:00404118                 jge     short loc_40414A
.text:0040411A                 cld
.text:0040411B                 mov     ecx, [esp+5Ch+var_40]
.text:0040411F                 mov     edx, 2
.text:00404124                 mov     edi, [ecx+eax*4]
.text:00404127                 mov     ecx, edx
.text:00404129                 mov     [esp+5Ch+var_30], edi
.text:0040412D                 mov     esi, [esp+5Ch+var_30]
.text:00404131                 mov     edi, offset asc_402774 ; ")"
.text:00404136                 repe cmpsb
.text:00404138                 jz      short loc_40414A
.text:0040413A                 cmp     ebx, 4
.text:0040413D                 jz      short loc_404142
.text:0040413F                 inc     ebx
.text:00404140                 jmp     short loc_404110
.text:00404142 ; ---------------------------------------------------------------------------
.text:00404142
.text:00404142 loc_404142:                             ; CODE XREF: sub_403EE0+25D↑j
.text:00404142                 mov     ebx, ebp
.text:00404144                 mov     ebp, [esp+5Ch+var_44]
.text:00404148                 sub     ebx, ebp
.text:0040414A
.text:0040414A loc_40414A:                             ; CODE XREF: sub_403EE0+238↑j
.text:0040414A                                         ; sub_403EE0+258↑j
.text:0040414A                 mov     [esp+5Ch+Stream], ebx
.text:0040414D                 call    sub_4027A0
.text:00404152                 mov     ecx, ds:dword_410000
.text:00404158                 mov     dl, al
.text:0040415A                 mov     ebx, ds:dword_410020
.text:00404160                 mov     eax, [ebx+ecx*4]
.text:00404163                 test    eax, eax
.text:00404165                 jz      short loc_40418A
.text:00404167                 cmp     byte ptr [eax], 29h ; ')'
.text:0040416A                 jnz     short loc_404172
.text:0040416C                 cmp     byte ptr [eax+1], 0
.text:00404170                 jz      short loc_40417E
.text:00404172
.text:00404172 loc_404172:                             ; CODE XREF: sub_403EE0+28A↑j
.text:00404172                 mov     [esp+5Ch+Stream], offset aExpectedFoundS ; "')' expected, found %s\n"
.text:00404179                 jmp     loc_403FF8
.text:0040417E ; ---------------------------------------------------------------------------
.text:0040417E
.text:0040417E loc_40417E:                             ; CODE XREF: sub_403EE0+290↑j
.text:0040417E                 inc     ecx
.text:0040417F                 mov     ds:dword_410000, ecx
.text:00404185                 jmp     loc_403FA9
.text:0040418A ; ---------------------------------------------------------------------------
.text:0040418A
.text:0040418A loc_40418A:                             ; CODE XREF: sub_403EE0+285↑j
.text:0040418A                 mov     [esp+5Ch+Stream], offset aExpected ; "')' expected\n"
.text:00404191                 call    ds:__imp_libintl_gettext
.text:00404197                 mov     edi, ds:dword_410020
.text:0040419D                 mov     ebp, ds:_iob
.text:004041A3                 mov     edx, [edi]
.text:004041A5                 mov     [esp+5Ch+Format], offset Format ; "%s: "
.text:004041AD                 add     ebp, 40h ; '@'
.text:004041B0                 mov     esi, eax
.text:004041B2                 mov     [esp+5Ch+Stream], ebp ; Stream
.text:004041B5                 mov     [esp+5Ch+var_54], edx
.text:004041B9                 call    fprintf
.text:004041BE                 mov     [esp+5Ch+var_54], 0
.text:004041C6                 mov     [esp+5Ch+Format], esi
.text:004041CA                 jmp     loc_404036
.text:004041CA ; ---------------------------------------------------------------------------
.text:004041CF                 align 10h
.text:004041D0
.text:004041D0 loc_4041D0:                             ; CODE XREF: sub_403EE0+23↑j
.text:004041D0                                         ; sub_403EE0+41↑j ...
.text:004041D0                 mov     [esp+5Ch+Stream], offset aMissingArgumen ; "missing argument after %s"
.text:004041D7                 call    ds:__imp_libintl_gettext
.text:004041DD                 mov     ebx, ds:dword_410020
.text:004041E3                 mov     esi, ds:dword_410010
.text:004041E9                 mov     edi, eax
.text:004041EB                 mov     ecx, [ebx+esi*4-4]
.text:004041EF                 mov     [esp+5Ch+Stream], ecx ; char *
.text:004041F2                 call    sub_4044E0
.text:004041F7                 mov     edx, ds:dword_410020
.text:004041FD                 mov     ebx, eax
.text:004041FF                 mov     eax, [edx]
.text:00404201                 jmp     loc_404011
.text:00404206 ; ---------------------------------------------------------------------------
.text:00404206
.text:00404206 loc_404206:                             ; CODE XREF: sub_403EE0+37↑j
.text:00404206                 cmp     byte ptr [eax+1], 0
.text:0040420A                 jnz     loc_403F1D
.text:00404210                 mov     edx, ecx
.text:00404212                 inc     edx
.text:00404213                 lea     esi, [esi+0]
.text:00404219                 lea     edi, [edi+0]
.text:00404220
.text:00404220 loc_404220:                             ; CODE XREF: sub_403EE0+368↓j
.text:00404220                 mov     [esp+5Ch+var_44], edx
.text:00404224                 mov     eax, [esp+5Ch+var_44]
.text:00404228                 inc     edx
.text:00404229                 mov     ds:dword_410000, eax
.text:0040422E                 cmp     eax, ebp
.text:00404230                 jge     short loc_4041D0
.text:00404232                 xor     [esp+5Ch+var_2C], 1
.text:00404237                 mov     eax, [ebx+edx*4-4]
.text:0040423B                 cmp     byte ptr [eax], 21h ; '!'
.text:0040423E                 jnz     loc_403F1D
.text:00404244                 cmp     byte ptr [eax+1], 0
.text:00404248                 jz      short loc_404220
.text:0040424A                 jmp     loc_403F1D
.text:0040424A sub_403EE0      endp
.text:0040424A
.text:0040424A ; ---------------------------------------------------------------------------
.text:0040424F                 align 10h
.text:00404250
.text:00404250 ; =============== S U B R O U T I N E =======================================
.text:00404250
.text:00404250
.text:00404250 sub_404250      proc near               ; CODE XREF: sub_4013A0+255↑p
.text:00404250                                         ; sub_4013A0+2BD↑p ...
.text:00404250
.text:00404250 var_24          = dword ptr -24h
.text:00404250 var_20          = dword ptr -20h
.text:00404250 var_1C          = dword ptr -1Ch
.text:00404250 var_18          = dword ptr -18h
.text:00404250 arg_0           = dword ptr  4
.text:00404250 arg_4           = dword ptr  8
.text:00404250
.text:00404250                 push    ebp
.text:00404251                 push    edi
.text:00404252                 push    esi
.text:00404253                 push    ebx
.text:00404254                 sub     esp, 14h
.text:00404257                 mov     ebx, 1
.text:0040425C                 mov     [esp+24h+var_1C], 0
.text:00404264                 mov     ebp, [esp+24h+arg_4]
.text:00404268                 mov     edi, [esp+24h+arg_0]
.text:0040426C                 mov     [esp+24h+var_18], 0
.text:00404274                 test    ebp, ebp
.text:00404276                 jz      short loc_404286
.text:00404278                 mov     dword ptr [ebp+0], 0
.text:0040427F                 mov     dword ptr [ebp+4], 0
.text:00404286
.text:00404286 loc_404286:                             ; CODE XREF: sub_404250+26↑j
.text:00404286                                         ; sub_404250+137↓j
.text:00404286                 movzx   ecx, byte ptr [edi]
.text:00404289                 cmp     cl, 20h ; ' '
.text:0040428C                 jz      loc_404386
.text:00404292                 cmp     cl, 9
.text:00404295                 jz      loc_404386
.text:0040429B                 xor     edx, edx
.text:0040429D                 test    cl, cl
.text:0040429F                 jz      loc_404360
.text:004042A5                 cmp     cl, 2Dh ; '-'
.text:004042A8                 jz      loc_40436A
.text:004042AE                 cmp     cl, 2Bh ; '+'
.text:004042B1                 jz      loc_40436A
.text:004042B7
.text:004042B7 loc_4042B7:                             ; CODE XREF: sub_404250+B5↓j
.text:004042B7                 mov     dl, cl
.text:004042B9                 sub     dl, 30h ; '0'
.text:004042BC                 cmp     dl, 9
.text:004042BF                 ja      short loc_404307
.text:004042C1                 test    ebp, ebp
.text:004042C3                 jz      short loc_404301
.text:004042C5                 mov     edx, [esp+24h+var_1C]
.text:004042C9                 movsx   eax, cl
.text:004042CC                 mov     esi, [esp+24h+var_18]
.text:004042D0                 shld    esi, edx, 2
.text:004042D4                 shl     edx, 2
.text:004042D7                 add     [esp+24h+var_1C], edx
.text:004042DB                 mov     edx, [esp+24h+var_1C]
.text:004042DF                 adc     [esp+24h+var_18], esi
.text:004042E3                 sub     eax, 30h ; '0'
.text:004042E6                 mov     esi, [esp+24h+var_18]
.text:004042EA                 shld    esi, edx, 1
.text:004042EE                 add     edx, edx
.text:004042F0                 mov     [esp+24h+var_1C], edx
.text:004042F4                 cdq
.text:004042F5                 add     [esp+24h+var_1C], eax
.text:004042F9                 mov     [esp+24h+var_18], esi
.text:004042FD                 adc     [esp+24h+var_18], edx
.text:00404301
.text:00404301 loc_404301:                             ; CODE XREF: sub_404250+73↑j
.text:00404301                                         ; sub_404250+131↓j
.text:00404301                 inc     edi
.text:00404302                 movzx   ecx, byte ptr [edi]
.text:00404305                 jmp     short loc_4042B7
.text:00404307 ; ---------------------------------------------------------------------------
.text:00404307
.text:00404307 loc_404307:                             ; CODE XREF: sub_404250+6F↑j
.text:00404307                                         ; sub_404250+C5↓j
.text:00404307                 cmp     cl, 20h ; ' '
.text:0040430A                 jz      short loc_404311
.text:0040430C                 cmp     cl, 9
.text:0040430F                 jnz     short loc_404317
.text:00404311
.text:00404311 loc_404311:                             ; CODE XREF: sub_404250+BA↑j
.text:00404311                 inc     edi
.text:00404312                 movzx   ecx, byte ptr [edi]
.text:00404315                 jmp     short loc_404307
.text:00404317 ; ---------------------------------------------------------------------------
.text:00404317
.text:00404317 loc_404317:                             ; CODE XREF: sub_404250+BF↑j
.text:00404317                 xor     edx, edx
.text:00404319                 test    cl, cl
.text:0040431B                 jnz     short loc_404360
.text:0040431D                 test    ebp, ebp
.text:0040431F                 jz      short loc_404354
.text:00404321                 mov     eax, [esp+24h+var_1C]
.text:00404325                 mov     ecx, ebx
.text:00404327                 mov     edi, [esp+24h+var_18]
.text:0040432B                 sar     ecx, 1Fh
.text:0040432E                 mul     ebx
.text:00404330                 imul    ebx, edi
.text:00404333                 mov     esi, edx
.text:00404335                 mov     [esp+24h+var_24], eax
.text:00404338                 mov     eax, [esp+24h+var_1C]
.text:0040433C                 imul    eax, ecx
.text:0040433F                 add     esi, eax
.text:00404341                 add     esi, ebx
.text:00404343                 mov     ebx, [esp+24h+var_24]
.text:00404346                 mov     [esp+24h+var_20], esi
.text:0040434A                 mov     ecx, [esp+24h+var_20]
.text:0040434E                 mov     [ebp+0], ebx
.text:00404351                 mov     [ebp+4], ecx
.text:00404354
.text:00404354 loc_404354:                             ; CODE XREF: sub_404250+CF↑j
.text:00404354                 mov     edx, 1
.text:00404359                 lea     esi, [esi+0]
.text:00404360
.text:00404360 loc_404360:                             ; CODE XREF: sub_404250+4F↑j
.text:00404360                                         ; sub_404250+CB↑j ...
.text:00404360                 add     esp, 14h
.text:00404363                 mov     eax, edx
.text:00404365                 pop     ebx
.text:00404366                 pop     esi
.text:00404367                 pop     edi
.text:00404368                 pop     ebp
.text:00404369                 retn
.text:0040436A ; ---------------------------------------------------------------------------
.text:0040436A
.text:0040436A loc_40436A:                             ; CODE XREF: sub_404250+58↑j
.text:0040436A                                         ; sub_404250+61↑j
.text:0040436A                 movzx   eax, byte ptr [edi+1]
.text:0040436E                 xor     edx, edx
.text:00404370                 sub     al, 30h ; '0'
.text:00404372                 cmp     al, 9
.text:00404374                 ja      short loc_404360
.text:00404376                 xor     edx, edx
.text:00404378                 cmp     cl, 2Dh ; '-'
.text:0040437B                 setnz   dl
.text:0040437E                 dec     edx
.text:0040437F                 or      ebx, edx
.text:00404381                 jmp     loc_404301
.text:00404386 ; ---------------------------------------------------------------------------
.text:00404386
.text:00404386 loc_404386:                             ; CODE XREF: sub_404250+3C↑j
.text:00404386                                         ; sub_404250+45↑j
.text:00404386                 inc     edi
.text:00404387                 jmp     loc_404286
.text:00404387 sub_404250      endp
.text:00404387
.text:00404387 ; ---------------------------------------------------------------------------
.text:0040438C                 align 20h
.text:004043A0                 mov     edx, [esp+4]
.text:004043A4                 mov     ds:dword_410030, edx
.text:004043AA                 retn
.text:004043AA ; ---------------------------------------------------------------------------
.text:004043AB aWriteError     db 'write error',0      ; DATA XREF: sub_4043D0:loc_404419↓o
.text:004043B7 ; const char aSS[]
.text:004043B7 aSS             db '%s: %s',0           ; DATA XREF: sub_4043D0+77↓o
.text:004043BE ; const char aS_3[]
.text:004043BE aS_3            db '%s',0               ; DATA XREF: sub_4043D0+A0↓o
.text:004043C1 ; ---------------------------------------------------------------------------
.text:004043C1                 jmp     short sub_4043D0
.text:004043C1 ; ---------------------------------------------------------------------------
.text:004043C3                 align 10h
.text:004043D0
.text:004043D0 ; =============== S U B R O U T I N E =======================================
.text:004043D0
.text:004043D0
.text:004043D0 ; void __cdecl sub_4043D0()
.text:004043D0 sub_4043D0      proc near               ; CODE XREF: .text:004043C1↑j
.text:004043D0                                         ; DATA XREF: sub_402FC0+5B↑o
.text:004043D0
.text:004043D0 Stream          = dword ptr -2Ch
.text:004043D0 ErrorMessage    = dword ptr -28h
.text:004043D0 var_24          = dword ptr -24h
.text:004043D0 var_20          = byte ptr -20h
.text:004043D0 var_1C          = dword ptr -1Ch
.text:004043D0 var_9           = byte ptr -9
.text:004043D0
.text:004043D0                 push    esi
.text:004043D1                 push    ebx
.text:004043D2                 sub     esp, 24h
.text:004043D5                 mov     edx, ds:_iob
.text:004043DB                 mov     ecx, [edx+2Ch]
.text:004043DE                 lea     esi, [edx+20h]
.text:004043E1                 shr     ecx, 5
.text:004043E4                 mov     bl, cl
.text:004043E6                 mov     ecx, [edx+20h]
.text:004043E9                 and     bl, 1
.text:004043EC                 cmp     ecx, [esi+8]
.text:004043EF                 mov     [esp+2Ch+Stream], esi ; Stream
.text:004043F2                 setz    [esp+2Ch+var_9]
.text:004043F7                 call    fclose
.text:004043FC                 test    eax, eax
.text:004043FE                 setnz   al
.text:00404401                 test    bl, bl
.text:00404403                 jnz     loc_404493
.text:00404409                 test    al, al
.text:0040440B                 jz      short loc_404460
.text:0040440D
.text:0040440D loc_40440D:                             ; CODE XREF: sub_4043D0+CD↓j
.text:0040440D                 call    _errno
.text:00404412                 mov     esi, [eax]
.text:00404414
.text:00404414 loc_404414:                             ; CODE XREF: sub_4043D0+C7↓j
.text:00404414                 cmp     esi, 9
.text:00404417                 jz      short loc_404486
.text:00404419
.text:00404419 loc_404419:                             ; CODE XREF: sub_4043D0+B8↓j
.text:00404419                                         ; sub_4043D0+C1↓j
.text:00404419                 mov     [esp+2Ch+Stream], offset aWriteError ; "write error"
.text:00404420                 call    ds:__imp_libintl_gettext
.text:00404426                 mov     ebx, eax
.text:00404428                 mov     eax, ds:dword_410030
.text:0040442D                 test    eax, eax
.text:0040442F                 jz      short loc_404466
.text:00404431                 mov     [esp+2Ch+Stream], eax ; char *
.text:00404434                 call    sub_405640
.text:00404439                 mov     dword ptr [esp+2Ch+var_20], eax ; char
.text:0040443D                 mov     edx, Code
.text:00404443                 mov     [esp+2Ch+var_1C], ebx
.text:00404447                 mov     [esp+2Ch+var_24], offset aSS ; "%s: %s"
.text:0040444F                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:00404453                 mov     [esp+2Ch+Stream], edx ; Code
.text:00404456                 call    sub_405C30
.text:0040445B                 nop
.text:0040445C                 lea     esi, [esi+0]
.text:00404460
.text:00404460 loc_404460:                             ; CODE XREF: sub_4043D0+3B↑j
.text:00404460                                         ; sub_4043D0+B4↓j ...
.text:00404460                 add     esp, 24h
.text:00404463                 pop     ebx
.text:00404464                 pop     esi
.text:00404465                 retn
.text:00404466 ; ---------------------------------------------------------------------------
.text:00404466
.text:00404466 loc_404466:                             ; CODE XREF: sub_4043D0+5F↑j
.text:00404466                 mov     dword ptr [esp+2Ch+var_20], ebx ; char
.text:0040446A                 mov     ebx, Code
.text:00404470                 mov     [esp+2Ch+var_24], offset aS_3 ; "%s"
.text:00404478                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:0040447C                 mov     [esp+2Ch+Stream], ebx ; Code
.text:0040447F                 call    sub_405C30
.text:00404484                 jmp     short loc_404460
.text:00404486 ; ---------------------------------------------------------------------------
.text:00404486
.text:00404486 loc_404486:                             ; CODE XREF: sub_4043D0+47↑j
.text:00404486                 test    bl, bl
.text:00404488                 jnz     short loc_404419
.text:0040448A                 cmp     [esp+2Ch+var_9], 0
.text:0040448F                 jnz     short loc_404460
.text:00404491                 jmp     short loc_404419
.text:00404493 ; ---------------------------------------------------------------------------
.text:00404493
.text:00404493 loc_404493:                             ; CODE XREF: sub_4043D0+33↑j
.text:00404493                 xor     esi, esi
.text:00404495                 test    al, al
.text:00404497                 jz      loc_404414
.text:0040449D                 jmp     loc_40440D
.text:0040449D sub_4043D0      endp
.text:0040449D
.text:0040449D ; ---------------------------------------------------------------------------
.text:004044A2                 align 10h
.text:004044B0                 sub     esp, 0Ch
.text:004044B3                 mov     edx, [esp+14h]
.text:004044B7                 mov     dword ptr [esp+4], 5
.text:004044BF                 mov     [esp+8], edx
.text:004044C3                 mov     edx, [esp+10h]
.text:004044C7                 mov     [esp], edx
.text:004044CA                 call    sub_4052D0
.text:004044CF                 add     esp, 0Ch
.text:004044D2                 retn
.text:004044D2 ; ---------------------------------------------------------------------------
.text:004044D3                 align 10h
.text:004044E0
.text:004044E0 ; =============== S U B R O U T I N E =======================================
.text:004044E0
.text:004044E0
.text:004044E0 ; int __cdecl sub_4044E0(char *)
.text:004044E0 sub_4044E0      proc near               ; CODE XREF: sub_401DB0+195↑p
.text:004044E0                                         ; sub_4027A0+D4↑p ...
.text:004044E0
.text:004044E0 var_C           = dword ptr -0Ch
.text:004044E0 var_8           = dword ptr -8
.text:004044E0 var_4           = dword ptr -4
.text:004044E0 arg_0           = dword ptr  4
.text:004044E0
.text:004044E0                 sub     esp, 0Ch
.text:004044E3                 mov     edx, [esp+0Ch+arg_0]
.text:004044E7                 mov     [esp+0Ch+var_8], 5 ; int
.text:004044EF                 mov     [esp+0Ch+var_C], 0 ; int
.text:004044F6                 mov     [esp+0Ch+var_4], edx ; char *
.text:004044FA                 call    sub_4052D0
.text:004044FF                 add     esp, 0Ch
.text:00404502                 retn
.text:00404502 sub_4044E0      endp
.text:00404502
.text:00404502 ; ---------------------------------------------------------------------------
.text:00404503                 align 10h
.text:00404510 aLiteral        db 'literal',0          ; DATA XREF: .text:00404550↓o
.text:00404518 aShell          db 'shell',0            ; DATA XREF: .text:00404554↓o
.text:0040451E aShellAlways    db 'shell-always',0     ; DATA XREF: .text:00404558↓o
.text:0040452B aC              db 'c',0                ; DATA XREF: .text:0040455C↓o
.text:0040452D aEscape         db 'escape',0           ; DATA XREF: .text:00404560↓o
.text:00404534 aLocale         db 'locale',0           ; DATA XREF: .text:00404564↓o
.text:0040453B aClocale        db 'clocale',0          ; DATA XREF: .text:00404568↓o
.text:00404543                 align 10h
.text:00404550                 dd offset aLiteral      ; "literal"
.text:00404554                 dd offset aShell        ; "shell"
.text:00404558                 dd offset aShellAlways  ; "shell-always"
.text:0040455C                 dd offset aC            ; "c"
.text:00404560                 dd offset aEscape       ; "escape"
.text:00404564                 dd offset aLocale       ; "locale"
.text:00404568                 dd offset aClocale      ; "clocale"
.text:0040456C                 dd 2 dup(0)
.text:00404574                 dd 1, 2, 3, 4, 5, 6
.text:0040458C asc_40458C:                             ; DATA XREF: sub_4045A0+7E↓o
.text:0040458C                                         ; sub_4045A0+A39↓o ...
.text:0040458C                 text "UTF-16LE", '"',27h,'`'
.text:00404592                 align 10h
.text:004045A0
.text:004045A0 ; =============== S U B R O U T I N E =======================================
.text:004045A0
.text:004045A0
.text:004045A0 ; int __cdecl sub_4045A0(int, int, char *Str, int, int, int)
.text:004045A0 sub_4045A0      proc near               ; CODE XREF: sub_4045A0+43A↓p
.text:004045A0                                         ; .text:00405163↓p ...
.text:004045A0
.text:004045A0 C               = dword ptr -4Ch
.text:004045A0 Type            = dword ptr -48h
.text:004045A0 SizeInBytes     = dword ptr -44h
.text:004045A0 State           = dword ptr -40h
.text:004045A0 var_3C          = dword ptr -3Ch
.text:004045A0 var_38          = dword ptr -38h
.text:004045A0 var_34          = dword ptr -34h
.text:004045A0 var_30          = dword ptr -30h
.text:004045A0 var_29          = byte ptr -29h
.text:004045A0 var_28          = dword ptr -28h
.text:004045A0 var_22          = byte ptr -22h
.text:004045A0 var_21          = byte ptr -21h
.text:004045A0 var_20          = dword ptr -20h
.text:004045A0 var_1C          = dword ptr -1Ch
.text:004045A0 var_18          = mbstate_t ptr -18h
.text:004045A0 arg_0           = dword ptr  4
.text:004045A0 arg_4           = dword ptr  8
.text:004045A0 Str             = dword ptr  0Ch
.text:004045A0 arg_C           = dword ptr  10h
.text:004045A0 arg_10          = dword ptr  14h
.text:004045A0 arg_14          = dword ptr  18h
.text:004045A0
.text:004045A0                 push    ebp
.text:004045A1                 push    edi
.text:004045A2                 push    esi
.text:004045A3                 push    ebx
.text:004045A4                 sub     esp, 3Ch
.text:004045A7                 mov     edx, ds:__mb_cur_max
.text:004045AD                 mov     [esp+4Ch+var_34], 0
.text:004045B5                 mov     [esp+4Ch+var_1C], 0
.text:004045BD                 cmp     dword ptr [edx], 1
.text:004045C0                 mov     [esp+4Ch+var_20], 0
.text:004045C8                 mov     [esp+4Ch+var_21], 0
.text:004045CD                 setz    [esp+4Ch+var_22]
.text:004045D2                 cmp     [esp+4Ch+arg_10], 6 ; switch 7 cases
.text:004045D7                 ja      short def_4045DD ; jumptable 004045DD default case, cases 0,1
.text:004045D9                 mov     edx, [esp+4Ch+arg_10]
.text:004045DD                 jmp     ds:jpt_4045DD[edx*4] ; switch jump
.text:004045DD ; ---------------------------------------------------------------------------
.text:004045E4 jpt_4045DD      dd offset def_4045DD    ; DATA XREF: sub_4045A0+3D↑r
.text:004045E4                 dd offset def_4045DD    ; jump table for switch statement
.text:004045E4                 dd offset loc_404F25
.text:004045E4                 dd offset loc_404600
.text:004045E4                 dd offset loc_404F4B
.text:004045E4                 dd offset loc_404F55
.text:004045E4                 dd offset loc_404F55
.text:00404600 ; ---------------------------------------------------------------------------
.text:00404600
.text:00404600 loc_404600:                             ; CODE XREF: sub_4045A0+3D↑j
.text:00404600                                         ; DATA XREF: sub_4045A0:jpt_4045DD↑o
.text:00404600                 mov     eax, [esp+4Ch+arg_4] ; jumptable 004045DD case 3
.text:00404604                 cmp     [esp+4Ch+var_34], eax
.text:00404608                 jnb     short loc_404611
.text:0040460A                 mov     ebx, [esp+4Ch+arg_0]
.text:0040460E                 mov     byte ptr [ebx], 22h ; '"'
.text:00404611
.text:00404611 loc_404611:                             ; CODE XREF: sub_4045A0+68↑j
.text:00404611                 mov     [esp+4Ch+var_34], 1
.text:00404619                 mov     [esp+4Ch+var_21], 1
.text:0040461E                 mov     [esp+4Ch+var_1C], offset asc_40458C ; "\"'`"
.text:00404626
.text:00404626 loc_404626:                             ; CODE XREF: sub_4045A0+9A6↓j
.text:00404626                 mov     [esp+4Ch+var_20], 1
.text:0040462E
.text:0040462E def_4045DD:                             ; CODE XREF: sub_4045A0+37↑j
.text:0040462E                                         ; sub_4045A0+3D↑j ...
.text:0040462E                 xor     ebp, ebp        ; jumptable 004045DD default case, cases 0,1
.text:00404630
.text:00404630 loc_404630:                             ; CODE XREF: sub_4045A0+3DB↓j
.text:00404630                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00404635                 jz      loc_404F17
.text:0040463B                 cmp     ebp, [esp+4Ch+arg_C]
.text:0040463F
.text:0040463F loc_40463F:                             ; CODE XREF: sub_4045A0+980↓j
.text:0040463F                 jz      loc_404EAE
.text:00404645                 cmp     [esp+4Ch+var_21], 0
.text:0040464A                 jz      short loc_404690
.text:0040464C                 mov     esi, [esp+4Ch+var_20]
.text:00404650                 test    esi, esi
.text:00404652                 jz      short loc_404690
.text:00404654                 mov     ecx, [esp+4Ch+var_20]
.text:00404658                 lea     edi, [ecx+ebp]
.text:0040465B                 cmp     edi, [esp+4Ch+arg_C]
.text:0040465F                 ja      short loc_404690
.text:00404661                 cld
.text:00404662                 mov     ebx, [esp+4Ch+Str]
.text:00404666                 mov     edi, [esp+4Ch+var_1C]
.text:0040466A                 add     ebx, ebp
.text:0040466C                 mov     esi, ebx
.text:0040466E                 cmp     ecx, ecx
.text:00404670                 repe cmpsb
.text:00404672                 jnz     short loc_404690
.text:00404674                 mov     edx, [esp+4Ch+arg_4]
.text:00404678                 cmp     [esp+4Ch+var_34], edx
.text:0040467C                 jnb     short loc_40468A
.text:0040467E                 mov     ecx, [esp+4Ch+arg_0]
.text:00404682                 mov     eax, [esp+4Ch+var_34]
.text:00404686                 mov     byte ptr [eax+ecx], 5Ch ; '\'
.text:0040468A
.text:0040468A loc_40468A:                             ; CODE XREF: sub_4045A0+DC↑j
.text:0040468A                 inc     [esp+4Ch+var_34]
.text:0040468E                 mov     esi, esi
.text:00404690
.text:00404690 loc_404690:                             ; CODE XREF: sub_4045A0+AA↑j
.text:00404690                                         ; sub_4045A0+B2↑j ...
.text:00404690                 mov     edi, [esp+4Ch+Str]
.text:00404694                 movzx   ebx, byte ptr [ebp+edi+0]
.text:00404699                 movzx   eax, bl
.text:0040469C                 cmp     eax, 7Eh        ; switch 127 cases
.text:0040469F                 ja      def_4046A5      ; jumptable 004046A5 default case, cases 1-6,14-31,64
.text:004046A5                 jmp     ds:jpt_4046A5[eax*4] ; switch jump
.text:004046A5 ; ---------------------------------------------------------------------------
.text:004046AC jpt_4046A5      dd offset loc_4048A8, offset def_4046A5, offset def_4046A5
.text:004046AC                                         ; DATA XREF: sub_4045A0+105↑r
.text:004046AC                 dd offset def_4046A5, offset def_4046A5, offset def_4046A5 ; jump table for switch statement
.text:004046AC                 dd offset def_4046A5, offset loc_404980, offset loc_40499E
.text:004046AC                 dd offset loc_4049A2, offset loc_4049E7, offset loc_4049EB
.text:004046AC                 dd offset loc_4049EF, offset loc_4049F3, offset def_4046A5
.text:004046AC                 dd offset def_4046A5, offset def_4046A5, offset def_4046A5
.text:004046AC                 dd offset def_4046A5, offset def_4046A5, offset def_4046A5
.text:004046AC                 dd offset def_4046A5, offset def_4046A5, offset def_4046A5
.text:004046AC                 dd offset def_4046A5, offset def_4046A5, offset def_4046A5
.text:004046AC                 dd offset def_4046A5, offset def_4046A5, offset def_4046A5
.text:004046AC                 dd offset def_4046A5, offset def_4046A5, offset loc_404E78
.text:004046AC                 dd offset loc_404E78, offset loc_404E78, offset loc_404E9A
.text:004046AC                 dd offset loc_404E78, offset def_404AA2, offset loc_404E78
.text:004046AC                 dd offset loc_4049F7, offset loc_404E78, offset loc_404E78
.text:004046AC                 dd offset loc_404E78, offset def_404AA2, offset def_404AA2
.text:004046AC                 dd offset def_404AA2, offset def_404AA2, offset def_404AA2
.text:004046AC                 dd offset def_404AA2, offset def_404AA2, offset def_404AA2
.text:004046AC                 dd offset def_404AA2, offset def_404AA2, offset def_404AA2
.text:004046AC                 dd offset def_404AA2, offset def_404AA2, offset def_404AA2
.text:004046AC                 dd offset def_404AA2, offset def_404AA2, offset loc_404E78
.text:004046AC                 dd offset loc_404E78, offset loc_404E78, offset loc_404E78
.text:004046AC                 dd offset loc_404A5C, offset def_4046A5, offset def_404AA2
.text:004046AC                 dd offset def_404AA2, offset def_404AA2, offset def_404AA2
.text:004046AC                 dd offset def_404AA2, offset def_404AA2, offset def_404AA2
.text:004046AC                 dd offset def_404AA2, offset def_404AA2, offset def_404AA2
.text:004046AC                 dd offset def_404AA2, offset def_404AA2, offset def_404AA2
.text:004046AC                 dd offset def_404AA2, offset def_404AA2, offset def_404AA2
.text:004046AC                 dd offset def_404AA2, offset def_404AA2, offset def_404AA2
.text:004046AC                 dd offset def_404AA2, offset def_404AA2, offset def_404AA2
.text:004046AC                 dd offset def_404AA2, offset def_404AA2, offset def_404AA2
.text:004046AC                 dd offset def_404AA2, offset loc_404E78, offset loc_404E71
.text:004046AC                 dd offset def_404AA2, offset loc_404E78, offset def_404AA2
.text:004046AC                 dd offset loc_404E78, offset def_404AA2, offset def_404AA2
.text:004046AC                 dd offset def_404AA2, offset def_404AA2, offset def_404AA2
.text:004046AC                 dd offset def_404AA2, offset def_404AA2, offset def_404AA2
.text:004046AC                 dd offset def_404AA2, offset def_404AA2, offset def_404AA2
.text:004046AC                 dd offset def_404AA2, offset def_404AA2, offset def_404AA2
.text:004046AC                 dd offset def_404AA2, offset def_404AA2, offset def_404AA2
.text:004046AC                 dd offset def_404AA2, offset def_404AA2, offset def_404AA2
.text:004046AC                 dd offset def_404AA2, offset def_404AA2, offset def_404AA2
.text:004046AC                 dd offset def_404AA2, offset def_404AA2, offset def_404AA2
.text:004046AC                 dd offset loc_404E88, offset loc_404E78, offset loc_404E88
.text:004046AC                 dd offset loc_404E9A
.text:004048A8 ; ---------------------------------------------------------------------------
.text:004048A8
.text:004048A8 loc_4048A8:                             ; CODE XREF: sub_4045A0+105↑j
.text:004048A8                                         ; DATA XREF: sub_4045A0:jpt_4046A5↑o
.text:004048A8                 cmp     [esp+4Ch+var_21], 0 ; jumptable 004046A5 case 0
.text:004048AD                 lea     eax, [ebp+1]
.text:004048B0                 jz      loc_404960
.text:004048B6                 mov     esi, [esp+4Ch+arg_4]
.text:004048BA                 cmp     [esp+4Ch+var_34], esi
.text:004048BE                 jnb     short loc_4048CC
.text:004048C0                 mov     eax, [esp+4Ch+arg_0]
.text:004048C4                 mov     ebx, [esp+4Ch+var_34]
.text:004048C8                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:004048CC
.text:004048CC loc_4048CC:                             ; CODE XREF: sub_4045A0+31E↑j
.text:004048CC                 inc     [esp+4Ch+var_34]
.text:004048D0                 mov     edx, [esp+4Ch+arg_4]
.text:004048D4                 cmp     [esp+4Ch+var_34], edx
.text:004048D8                 jnb     short loc_4048E6
.text:004048DA                 mov     edi, [esp+4Ch+arg_0]
.text:004048DE                 mov     ecx, [esp+4Ch+var_34]
.text:004048E2                 mov     byte ptr [ecx+edi], 30h ; '0'
.text:004048E6
.text:004048E6 loc_4048E6:                             ; CODE XREF: sub_4045A0+338↑j
.text:004048E6                 inc     [esp+4Ch+var_34]
.text:004048EA                 mov     esi, [esp+4Ch+arg_4]
.text:004048EE                 cmp     [esp+4Ch+var_34], esi
.text:004048F2                 jnb     short loc_404900
.text:004048F4                 mov     ebx, [esp+4Ch+arg_0]
.text:004048F8                 mov     eax, [esp+4Ch+var_34]
.text:004048FC                 mov     byte ptr [eax+ebx], 30h ; '0'
.text:00404900
.text:00404900 loc_404900:                             ; CODE XREF: sub_4045A0+352↑j
.text:00404900                 inc     [esp+4Ch+var_34]
.text:00404904                 mov     bl, 30h ; '0'
.text:00404906                 lea     esi, [esi+0]
.text:00404909                 lea     edi, [edi+0]
.text:00404910
.text:00404910 def_404AA2:                             ; CODE XREF: sub_4045A0+105↑j
.text:00404910                                         ; sub_4045A0+463↓j ...
.text:00404910                 cmp     [esp+4Ch+var_21], 0 ; jumptable 004046A5 cases 37,43-58,65-90,93,95,97-122
.text:00404910                                         ; jumptable 00404AA2 default case, cases 34-38,42-44,46,48-59
.text:00404915                 lea     eax, [ebp+1]
.text:00404918                 jz      short loc_404960
.text:0040491A                 mov     cl, bl
.text:0040491C                 mov     edi, [esp+4Ch+arg_14]
.text:00404920                 mov     esi, 1
.text:00404925                 shr     cl, 5
.text:00404928                 movzx   edx, cl
.text:0040492B                 mov     ecx, ebx
.text:0040492D                 and     ecx, 1Fh
.text:00404930                 shl     esi, cl
.text:00404932                 test    [edi+edx*4+4], esi
.text:00404936                 jz      short loc_404952
.text:00404938
.text:00404938 loc_404938:                             ; CODE XREF: sub_4045A0+3FC↓j
.text:00404938                 mov     edx, [esp+4Ch+arg_4]
.text:0040493C                 cmp     [esp+4Ch+var_34], edx
.text:00404940                 jnb     short loc_40494E
.text:00404942                 mov     edi, [esp+4Ch+arg_0]
.text:00404946                 mov     esi, [esp+4Ch+var_34]
.text:0040494A                 mov     byte ptr [esi+edi], 5Ch ; '\'
.text:0040494E
.text:0040494E loc_40494E:                             ; CODE XREF: sub_4045A0+3A0↑j
.text:0040494E                 inc     [esp+4Ch+var_34]
.text:00404952
.text:00404952 loc_404952:                             ; CODE XREF: sub_4045A0+396↑j
.text:00404952                 lea     eax, [ebp+1]
.text:00404955                 lea     esi, [esi+0]
.text:00404959                 lea     edi, [edi+0]
.text:00404960
.text:00404960 loc_404960:                             ; CODE XREF: sub_4045A0+310↑j
.text:00404960                                         ; sub_4045A0+378↑j ...
.text:00404960                 mov     ebp, [esp+4Ch+arg_4]
.text:00404964                 cmp     [esp+4Ch+var_34], ebp
.text:00404968                 jnb     short loc_404975
.text:0040496A                 mov     edx, [esp+4Ch+arg_0]
.text:0040496E                 mov     ecx, [esp+4Ch+var_34]
.text:00404972                 mov     [ecx+edx], bl
.text:00404975
.text:00404975 loc_404975:                             ; CODE XREF: sub_4045A0+3C8↑j
.text:00404975                 inc     [esp+4Ch+var_34]
.text:00404979                 mov     ebp, eax
.text:0040497B                 jmp     loc_404630
.text:00404980 ; ---------------------------------------------------------------------------
.text:00404980
.text:00404980 loc_404980:                             ; CODE XREF: sub_4045A0+105↑j
.text:00404980                                         ; DATA XREF: sub_4045A0:jpt_4046A5↑o
.text:00404980                 mov     dl, 61h ; 'a'   ; jumptable 004046A5 case 7
.text:00404982                 lea     esi, [esi+0]
.text:00404989                 lea     edi, [edi+0]
.text:00404990
.text:00404990 loc_404990:                             ; CODE XREF: sub_4045A0+400↓j
.text:00404990                                         ; sub_4045A0+409↓j ...
.text:00404990                 cmp     [esp+4Ch+var_21], 0
.text:00404995                 lea     eax, [ebp+1]
.text:00404998                 jz      short loc_404960
.text:0040499A                 mov     bl, dl
.text:0040499C                 jmp     short loc_404938
.text:0040499E ; ---------------------------------------------------------------------------
.text:0040499E
.text:0040499E loc_40499E:                             ; CODE XREF: sub_4045A0+105↑j
.text:0040499E                                         ; DATA XREF: sub_4045A0:jpt_4046A5↑o
.text:0040499E                 mov     dl, 62h ; 'b'   ; jumptable 004046A5 case 8
.text:004049A0                 jmp     short loc_404990
.text:004049A2 ; ---------------------------------------------------------------------------
.text:004049A2
.text:004049A2 loc_4049A2:                             ; CODE XREF: sub_4045A0+105↑j
.text:004049A2                                         ; DATA XREF: sub_4045A0:jpt_4046A5↑o
.text:004049A2                 mov     dl, 74h ; 't'   ; jumptable 004046A5 case 9
.text:004049A4
.text:004049A4 loc_4049A4:                             ; CODE XREF: sub_4045A0+449↓j
.text:004049A4                                         ; sub_4045A0+455↓j ...
.text:004049A4                 cmp     [esp+4Ch+arg_10], 1
.text:004049A9                 jnz     short loc_404990
.text:004049AB
.text:004049AB loc_4049AB:                             ; CODE XREF: sub_4045A0+45C↓j
.text:004049AB                                         ; sub_4045A0+4C1↓j ...
.text:004049AB                 mov     [esp+4Ch+var_3C], 2 ; jumptable 00404D72 cases 91,92,94,96,124
.text:004049B3                 mov     eax, [esp+4Ch+arg_14]
.text:004049B7                 mov     edx, [esp+4Ch+arg_C]
.text:004049BB                 mov     ecx, [esp+4Ch+Str]
.text:004049BF                 mov     ebx, [esp+4Ch+arg_4]
.text:004049C3                 mov     [esp+4Ch+var_38], eax ; int
.text:004049C7                 mov     ebp, [esp+4Ch+arg_0]
.text:004049CB                 mov     [esp+4Ch+State], edx ; int
.text:004049CF                 mov     [esp+4Ch+SizeInBytes], ecx ; Str
.text:004049D3                 mov     [esp+4Ch+Type], ebx ; int
.text:004049D7                 mov     [esp+4Ch+C], ebp ; int
.text:004049DA                 call    sub_4045A0
.text:004049DF
.text:004049DF loc_4049DF:                             ; CODE XREF: sub_4045A0+972↓j
.text:004049DF                 add     esp, 3Ch
.text:004049E2                 pop     ebx
.text:004049E3                 pop     esi
.text:004049E4                 pop     edi
.text:004049E5                 pop     ebp
.text:004049E6                 retn
.text:004049E7 ; ---------------------------------------------------------------------------
.text:004049E7
.text:004049E7 loc_4049E7:                             ; CODE XREF: sub_4045A0+105↑j
.text:004049E7                                         ; DATA XREF: sub_4045A0:jpt_4046A5↑o
.text:004049E7                 mov     dl, 6Eh ; 'n'   ; jumptable 004046A5 case 10
.text:004049E9                 jmp     short loc_4049A4
.text:004049EB ; ---------------------------------------------------------------------------
.text:004049EB
.text:004049EB loc_4049EB:                             ; CODE XREF: sub_4045A0+105↑j
.text:004049EB                                         ; DATA XREF: sub_4045A0:jpt_4046A5↑o
.text:004049EB                 mov     dl, 76h ; 'v'   ; jumptable 004046A5 case 11
.text:004049ED                 jmp     short loc_404990
.text:004049EF ; ---------------------------------------------------------------------------
.text:004049EF
.text:004049EF loc_4049EF:                             ; CODE XREF: sub_4045A0+105↑j
.text:004049EF                                         ; DATA XREF: sub_4045A0:jpt_4046A5↑o
.text:004049EF                 mov     dl, 66h ; 'f'   ; jumptable 004046A5 case 12
.text:004049F1                 jmp     short loc_404990
.text:004049F3 ; ---------------------------------------------------------------------------
.text:004049F3
.text:004049F3 loc_4049F3:                             ; CODE XREF: sub_4045A0+105↑j
.text:004049F3                                         ; DATA XREF: sub_4045A0:jpt_4046A5↑o
.text:004049F3                 mov     dl, 72h ; 'r'   ; jumptable 004046A5 case 13
.text:004049F5                 jmp     short loc_4049A4
.text:004049F7 ; ---------------------------------------------------------------------------
.text:004049F7
.text:004049F7 loc_4049F7:                             ; CODE XREF: sub_4045A0+105↑j
.text:004049F7                                         ; DATA XREF: sub_4045A0:jpt_4046A5↑o
.text:004049F7                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 004046A5 case 39
.text:004049FC                 jz      short loc_4049AB ; jumptable 00404D72 cases 91,92,94,96,124
.text:004049FE                 cmp     [esp+4Ch+arg_10], 2
.text:00404A03                 jnz     def_404AA2      ; jumptable 004046A5 cases 37,43-58,65-90,93,95,97-122
.text:00404A03                                         ; jumptable 00404AA2 default case, cases 34-38,42-44,46,48-59
.text:00404A09                 mov     edx, [esp+4Ch+arg_4]
.text:00404A0D                 cmp     [esp+4Ch+var_34], edx
.text:00404A11                 jnb     short loc_404A1F
.text:00404A13                 mov     ecx, [esp+4Ch+arg_0]
.text:00404A17                 mov     edi, [esp+4Ch+var_34]
.text:00404A1B                 mov     byte ptr [edi+ecx], 27h ; '''
.text:00404A1F
.text:00404A1F loc_404A1F:                             ; CODE XREF: sub_4045A0+471↑j
.text:00404A1F                 inc     [esp+4Ch+var_34]
.text:00404A23                 mov     eax, [esp+4Ch+arg_4]
.text:00404A27                 cmp     [esp+4Ch+var_34], eax
.text:00404A2B                 jnb     short loc_404A39
.text:00404A2D                 mov     esi, [esp+4Ch+arg_0]
.text:00404A31                 mov     edx, [esp+4Ch+var_34]
.text:00404A35                 mov     byte ptr [edx+esi], 5Ch ; '\'
.text:00404A39
.text:00404A39 loc_404A39:                             ; CODE XREF: sub_4045A0+48B↑j
.text:00404A39                 inc     [esp+4Ch+var_34]
.text:00404A3D                 mov     edi, [esp+4Ch+arg_4]
.text:00404A41                 cmp     [esp+4Ch+var_34], edi
.text:00404A45                 jnb     short loc_404A53
.text:00404A47                 mov     ecx, [esp+4Ch+arg_0]
.text:00404A4B                 mov     eax, [esp+4Ch+var_34]
.text:00404A4F                 mov     byte ptr [eax+ecx], 27h ; '''
.text:00404A53
.text:00404A53 loc_404A53:                             ; CODE XREF: sub_4045A0+4A5↑j
.text:00404A53                                         ; sub_4045A0+5C4↓j ...
.text:00404A53                 inc     [esp+4Ch+var_34]
.text:00404A57                 jmp     def_404AA2      ; jumptable 004046A5 cases 37,43-58,65-90,93,95,97-122
.text:00404A57                                         ; jumptable 00404AA2 default case, cases 34-38,42-44,46,48-59
.text:00404A5C ; ---------------------------------------------------------------------------
.text:00404A5C
.text:00404A5C loc_404A5C:                             ; CODE XREF: sub_4045A0+105↑j
.text:00404A5C                                         ; DATA XREF: sub_4045A0:jpt_4046A5↑o
.text:00404A5C                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 004046A5 case 63
.text:00404A61                 jz      loc_4049AB      ; jumptable 00404D72 cases 91,92,94,96,124
.text:00404A67                 cmp     [esp+4Ch+arg_10], 3
.text:00404A6C                 jnz     def_404AA2      ; jumptable 004046A5 cases 37,43-58,65-90,93,95,97-122
.text:00404A6C                                         ; jumptable 00404AA2 default case, cases 34-38,42-44,46,48-59
.text:00404A72                 lea     edx, [ebp+2]
.text:00404A75                 cmp     edx, [esp+4Ch+arg_C]
.text:00404A79                 jnb     def_404AA2      ; jumptable 004046A5 cases 37,43-58,65-90,93,95,97-122
.text:00404A79                                         ; jumptable 00404AA2 default case, cases 34-38,42-44,46,48-59
.text:00404A7F                 mov     esi, [esp+4Ch+Str]
.text:00404A83                 cmp     byte ptr [ebp+esi+1], 3Fh ; '?'
.text:00404A88                 jnz     def_404AA2      ; jumptable 004046A5 cases 37,43-58,65-90,93,95,97-122
.text:00404A88                                         ; jumptable 00404AA2 default case, cases 34-38,42-44,46,48-59
.text:00404A8E                 movzx   ecx, byte ptr [ebp+esi+2]
.text:00404A93                 movsx   eax, cl
.text:00404A96                 sub     eax, 21h ; '!'  ; switch 30 cases
.text:00404A99                 cmp     eax, 1Dh
.text:00404A9C                 ja      def_404AA2      ; jumptable 004046A5 cases 37,43-58,65-90,93,95,97-122
.text:00404A9C                                         ; jumptable 00404AA2 default case, cases 34-38,42-44,46,48-59
.text:00404AA2                 jmp     ds:jpt_404AA2[eax*4] ; switch jump
.text:00404AA2 ; ---------------------------------------------------------------------------
.text:00404AA9                 align 4
.text:00404AAC jpt_404AA2      dd offset loc_404B24    ; DATA XREF: sub_4045A0+502↑r
.text:00404AAC                 dd offset def_404AA2    ; jump table for switch statement
.text:00404AAC                 dd offset def_404AA2
.text:00404AAC                 dd offset def_404AA2
.text:00404AAC                 dd offset def_404AA2
.text:00404AAC                 dd offset def_404AA2
.text:00404AAC                 dd offset loc_404B24
.text:00404AAC                 dd offset loc_404B24
.text:00404AAC                 dd offset loc_404B24
.text:00404AAC                 dd offset def_404AA2
.text:00404AAC                 dd offset def_404AA2
.text:00404AAC                 dd offset def_404AA2
.text:00404AAC                 dd offset loc_404B24
.text:00404AAC                 dd offset def_404AA2
.text:00404AAC                 dd offset loc_404B24
.text:00404AAC                 dd offset def_404AA2
.text:00404AAC                 dd offset def_404AA2
.text:00404AAC                 dd offset def_404AA2
.text:00404AAC                 dd offset def_404AA2
.text:00404AAC                 dd offset def_404AA2
.text:00404AAC                 dd offset def_404AA2
.text:00404AAC                 dd offset def_404AA2
.text:00404AAC                 dd offset def_404AA2
.text:00404AAC                 dd offset def_404AA2
.text:00404AAC                 dd offset def_404AA2
.text:00404AAC                 dd offset def_404AA2
.text:00404AAC                 dd offset def_404AA2
.text:00404AAC                 dd offset loc_404B24
.text:00404AAC                 dd offset loc_404B24
.text:00404AAC                 dd offset loc_404B24
.text:00404B24 ; ---------------------------------------------------------------------------
.text:00404B24
.text:00404B24 loc_404B24:                             ; CODE XREF: sub_4045A0+502↑j
.text:00404B24                                         ; DATA XREF: sub_4045A0:jpt_404AA2↑o
.text:00404B24                 mov     ebp, edx        ; jumptable 00404AA2 cases 33,39-41,45,47,60-62
.text:00404B26                 mov     bl, cl
.text:00404B28                 mov     edx, [esp+4Ch+arg_4]
.text:00404B2C                 cmp     [esp+4Ch+var_34], edx
.text:00404B30                 jnb     short loc_404B3E
.text:00404B32                 mov     ecx, [esp+4Ch+arg_0]
.text:00404B36                 mov     edi, [esp+4Ch+var_34]
.text:00404B3A                 mov     byte ptr [edi+ecx], 3Fh ; '?'
.text:00404B3E
.text:00404B3E loc_404B3E:                             ; CODE XREF: sub_4045A0+590↑j
.text:00404B3E                 inc     [esp+4Ch+var_34]
.text:00404B42                 mov     eax, [esp+4Ch+arg_4]
.text:00404B46                 cmp     [esp+4Ch+var_34], eax
.text:00404B4A                 jnb     short loc_404B58
.text:00404B4C                 mov     edx, [esp+4Ch+arg_0]
.text:00404B50                 mov     esi, [esp+4Ch+var_34]
.text:00404B54                 mov     byte ptr [esi+edx], 5Ch ; '\'
.text:00404B58
.text:00404B58 loc_404B58:                             ; CODE XREF: sub_4045A0+5AA↑j
.text:00404B58                 inc     [esp+4Ch+var_34]
.text:00404B5C                 mov     edi, [esp+4Ch+arg_4]
.text:00404B60                 cmp     [esp+4Ch+var_34], edi
.text:00404B64                 jnb     loc_404A53
.text:00404B6A                 mov     eax, [esp+4Ch+arg_0]
.text:00404B6E                 mov     ecx, [esp+4Ch+var_34]
.text:00404B72                 mov     byte ptr [ecx+eax], 3Fh ; '?'
.text:00404B76                 jmp     loc_404A53
.text:00404B76 ; ---------------------------------------------------------------------------
.text:00404B7B                 align 10h
.text:00404B80
.text:00404B80 def_4046A5:                             ; CODE XREF: sub_4045A0+FF↑j
.text:00404B80                                         ; sub_4045A0+105↑j
.text:00404B80                                         ; DATA XREF: ...
.text:00404B80                 cmp     [esp+4Ch+var_22], 0 ; jumptable 004046A5 default case, cases 1-6,14-31,64
.text:00404B85                 jz      loc_404CB0
.text:00404B8B                 mov     [esp+4Ch+var_28], 1
.text:00404B93                 mov     esi, ds:__mb_cur_max
.text:00404B99                 movzx   edx, bl
.text:00404B9C                 cmp     dword ptr [esi], 1
.text:00404B9F                 jz      loc_404C94
.text:00404BA5                 mov     [esp+4Ch+Type], 157h ; Type
.text:00404BAD                 mov     [esp+4Ch+C], edx ; C
.text:00404BB0                 call    _isctype
.text:00404BB5
.text:00404BB5 loc_404BB5:                             ; CODE XREF: sub_4045A0+705↓j
.text:00404BB5                 test    eax, eax
.text:00404BB7                 setnz   [esp+4Ch+var_29]
.text:00404BBC
.text:00404BBC loc_404BBC:                             ; CODE XREF: sub_4045A0+7A5↓j
.text:00404BBC                 cmp     [esp+4Ch+var_21], 0
.text:00404BC1                 lea     eax, [ebp+1]
.text:00404BC4                 jz      loc_404960
.text:00404BCA                 cmp     [esp+4Ch+var_29], 0
.text:00404BCF                 jnz     def_404AA2      ; jumptable 004046A5 cases 37,43-58,65-90,93,95,97-122
.text:00404BCF                                         ; jumptable 00404AA2 default case, cases 34-38,42-44,46,48-59
.text:00404BD5
.text:00404BD5 loc_404BD5:                             ; CODE XREF: sub_4045A0+7AB↓j
.text:00404BD5                 mov     eax, [esp+4Ch+var_28]
.text:00404BD9                 lea     edx, [eax+ebp]
.text:00404BDC                 lea     esi, [esi+0]
.text:00404BE0
.text:00404BE0 loc_404BE0:                             ; CODE XREF: sub_4045A0+6EF↓j
.text:00404BE0                 cmp     [esp+4Ch+var_21], 0
.text:00404BE5                 jz      short loc_404C60
.text:00404BE7                 cmp     [esp+4Ch+var_29], 0
.text:00404BEC                 jnz     short loc_404C60
.text:00404BEE                 mov     edi, [esp+4Ch+arg_4]
.text:00404BF2                 cmp     [esp+4Ch+var_34], edi
.text:00404BF6                 jnb     short loc_404C04
.text:00404BF8                 mov     esi, [esp+4Ch+arg_0]
.text:00404BFC                 mov     eax, [esp+4Ch+var_34]
.text:00404C00                 mov     byte ptr [eax+esi], 5Ch ; '\'
.text:00404C04
.text:00404C04 loc_404C04:                             ; CODE XREF: sub_4045A0+656↑j
.text:00404C04                 inc     [esp+4Ch+var_34]
.text:00404C08                 mov     ecx, [esp+4Ch+arg_4]
.text:00404C0C                 cmp     [esp+4Ch+var_34], ecx
.text:00404C10                 jnb     short loc_404C25
.text:00404C12                 mov     cl, bl
.text:00404C14                 mov     esi, [esp+4Ch+arg_0]
.text:00404C18                 mov     edi, [esp+4Ch+var_34]
.text:00404C1C                 shr     cl, 6
.text:00404C1F                 add     cl, 30h ; '0'
.text:00404C22                 mov     [edi+esi], cl
.text:00404C25
.text:00404C25 loc_404C25:                             ; CODE XREF: sub_4045A0+670↑j
.text:00404C25                 inc     [esp+4Ch+var_34]
.text:00404C29                 mov     edi, [esp+4Ch+arg_4]
.text:00404C2D                 cmp     [esp+4Ch+var_34], edi
.text:00404C31                 jnb     short loc_404C49
.text:00404C33                 mov     cl, bl
.text:00404C35                 mov     esi, [esp+4Ch+arg_0]
.text:00404C39                 shr     cl, 3
.text:00404C3C                 mov     edi, [esp+4Ch+var_34]
.text:00404C40                 and     cl, 7
.text:00404C43                 add     cl, 30h ; '0'
.text:00404C46                 mov     [edi+esi], cl
.text:00404C49
.text:00404C49 loc_404C49:                             ; CODE XREF: sub_4045A0+691↑j
.text:00404C49                 inc     [esp+4Ch+var_34]
.text:00404C4D                 and     bl, 7
.text:00404C50                 add     bl, 30h ; '0'
.text:00404C53                 lea     esi, [esi+0]
.text:00404C59                 lea     edi, [edi+0]
.text:00404C60
.text:00404C60 loc_404C60:                             ; CODE XREF: sub_4045A0+645↑j
.text:00404C60                                         ; sub_4045A0+64C↑j
.text:00404C60                 lea     eax, [ebp+1]
.text:00404C63                 cmp     edx, eax
.text:00404C65                 jbe     loc_404960
.text:00404C6B                 mov     ebp, [esp+4Ch+arg_4]
.text:00404C6F                 cmp     [esp+4Ch+var_34], ebp
.text:00404C73                 jnb     short loc_404C80
.text:00404C75                 mov     ecx, [esp+4Ch+arg_0]
.text:00404C79                 mov     edi, [esp+4Ch+var_34]
.text:00404C7D                 mov     [edi+ecx], bl
.text:00404C80
.text:00404C80 loc_404C80:                             ; CODE XREF: sub_4045A0+6D3↑j
.text:00404C80                 inc     [esp+4Ch+var_34]
.text:00404C84                 mov     ebp, eax
.text:00404C86                 mov     eax, [esp+4Ch+Str]
.text:00404C8A                 movzx   ebx, byte ptr [ebp+eax+0]
.text:00404C8F                 jmp     loc_404BE0
.text:00404C94 ; ---------------------------------------------------------------------------
.text:00404C94
.text:00404C94 loc_404C94:                             ; CODE XREF: sub_4045A0+5FF↑j
.text:00404C94                 mov     ecx, ds:_pctype
.text:00404C9A                 mov     edi, [ecx]
.text:00404C9C                 movzx   eax, word ptr [edi+edx*2]
.text:00404CA0                 and     eax, 157h
.text:00404CA5                 jmp     loc_404BB5
.text:00404CA5 ; ---------------------------------------------------------------------------
.text:00404CAA                 align 10h
.text:00404CB0
.text:00404CB0 loc_404CB0:                             ; CODE XREF: sub_4045A0+5E5↑j
.text:00404CB0                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00404CB5                 mov     [esp+4Ch+var_18._Wchar], 0
.text:00404CBD                 mov     [esp+4Ch+var_28], 0
.text:00404CC5                 mov     [esp+4Ch+var_29], 1
.text:00404CCA                 jz      loc_404E5C
.text:00404CD0
.text:00404CD0 loc_404CD0:                             ; CODE XREF: sub_4045A0+8CC↓j
.text:00404CD0                 mov     ecx, [esp+4Ch+arg_C]
.text:00404CD4                 lea     edx, [esp+4Ch+var_18]
.text:00404CD8                 mov     edi, [esp+4Ch+Str]
.text:00404CDC                 mov     [esp+4Ch+State], edx ; State
.text:00404CE0                 lea     esi, [esp+4Ch+var_18._State]
.text:00404CE4                 sub     ecx, ebp
.text:00404CE6                 mov     [esp+4Ch+SizeInBytes], ecx ; SizeInBytes
.text:00404CEA                 add     edi, ebp
.text:00404CEC                 mov     [esp+4Ch+var_30], edi
.text:00404CF0                 mov     [esp+4Ch+Type], edi ; SrcCh
.text:00404CF4                 mov     [esp+4Ch+C], esi ; DstCh
.text:00404CF7                 call    mbrtowc
.text:00404CFC                 test    eax, eax
.text:00404CFE                 mov     edi, eax
.text:00404D00                 jz      short loc_404D40
.text:00404D02                 cmp     eax, 0FFFFFFFFh
.text:00404D05                 jz      loc_404E52
.text:00404D0B                 cmp     eax, 0FFFFFFFEh
.text:00404D0E                 jz      loc_404E12
.text:00404D14                 cmp     [esp+4Ch+arg_10], 1
.text:00404D19                 jz      short loc_404D50
.text:00404D1B
.text:00404D1B loc_404D1B:                             ; CODE XREF: sub_4045A0+7B9↓j
.text:00404D1B                                         ; sub_4045A0+86D↓j
.text:00404D1B                 movzx   ecx, [esp+4Ch+var_18._State]
.text:00404D20                 mov     [esp+4Ch+Type], 157h ; Type
.text:00404D28                 mov     [esp+4Ch+C], ecx ; C
.text:00404D2B                 call    iswctype
.text:00404D30                 test    eax, eax
.text:00404D32                 jnz     short loc_404D39
.text:00404D34                 mov     [esp+4Ch+var_29], 0
.text:00404D39
.text:00404D39 loc_404D39:                             ; CODE XREF: sub_4045A0+792↑j
.text:00404D39                 mov     [esp+4Ch+var_28], edi
.text:00404D3D                 lea     esi, [esi+0]
.text:00404D40
.text:00404D40 loc_404D40:                             ; CODE XREF: sub_4045A0+760↑j
.text:00404D40                                         ; sub_4045A0+87B↓j ...
.text:00404D40                 cmp     [esp+4Ch+var_28], 1
.text:00404D45                 jbe     loc_404BBC
.text:00404D4B                 jmp     loc_404BD5
.text:00404D50 ; ---------------------------------------------------------------------------
.text:00404D50
.text:00404D50 loc_404D50:                             ; CODE XREF: sub_4045A0+779↑j
.text:00404D50                 cmp     [esp+4Ch+arg_10], eax
.text:00404D54                 mov     edx, 1
.text:00404D59                 jnb     short loc_404D1B
.text:00404D5B
.text:00404D5B loc_404D5B:                             ; CODE XREF: sub_4045A0+867↓j
.text:00404D5B                 mov     ecx, [esp+4Ch+Str]
.text:00404D5F                 lea     esi, [edx+ebp]
.text:00404D62                 movsx   eax, byte ptr [esi+ecx]
.text:00404D66                 sub     eax, 5Bh ; '['  ; switch 34 cases
.text:00404D69                 cmp     eax, 21h
.text:00404D6C                 ja      def_404D72      ; jumptable 00404D72 default case, cases 93,95,97-123
.text:00404D72                 jmp     ds:jpt_404D72[eax*4] ; switch jump
.text:00404D72 ; ---------------------------------------------------------------------------
.text:00404D79                 align 4
.text:00404D7C jpt_404D72      dd offset loc_4049AB    ; DATA XREF: sub_4045A0+7D2↑r
.text:00404D7C                 dd offset loc_4049AB    ; jump table for switch statement
.text:00404D7C                 dd offset def_404D72
.text:00404D7C                 dd offset loc_4049AB
.text:00404D7C                 dd offset def_404D72
.text:00404D7C                 dd offset loc_4049AB
.text:00404D7C                 dd offset def_404D72
.text:00404D7C                 dd offset def_404D72
.text:00404D7C                 dd offset def_404D72
.text:00404D7C                 dd offset def_404D72
.text:00404D7C                 dd offset def_404D72
.text:00404D7C                 dd offset def_404D72
.text:00404D7C                 dd offset def_404D72
.text:00404D7C                 dd offset def_404D72
.text:00404D7C                 dd offset def_404D72
.text:00404D7C                 dd offset def_404D72
.text:00404D7C                 dd offset def_404D72
.text:00404D7C                 dd offset def_404D72
.text:00404D7C                 dd offset def_404D72
.text:00404D7C                 dd offset def_404D72
.text:00404D7C                 dd offset def_404D72
.text:00404D7C                 dd offset def_404D72
.text:00404D7C                 dd offset def_404D72
.text:00404D7C                 dd offset def_404D72
.text:00404D7C                 dd offset def_404D72
.text:00404D7C                 dd offset def_404D72
.text:00404D7C                 dd offset def_404D72
.text:00404D7C                 dd offset def_404D72
.text:00404D7C                 dd offset def_404D72
.text:00404D7C                 dd offset def_404D72
.text:00404D7C                 dd offset def_404D72
.text:00404D7C                 dd offset def_404D72
.text:00404D7C                 dd offset def_404D72
.text:00404D7C                 dd offset loc_4049AB
.text:00404E04 ; ---------------------------------------------------------------------------
.text:00404E04
.text:00404E04 def_404D72:                             ; CODE XREF: sub_4045A0+7CC↑j
.text:00404E04                                         ; sub_4045A0+7D2↑j
.text:00404E04                                         ; DATA XREF: ...
.text:00404E04                 inc     edx             ; jumptable 00404D72 default case, cases 93,95,97-123
.text:00404E05                 cmp     edx, edi
.text:00404E07                 jb      loc_404D5B
.text:00404E0D                 jmp     loc_404D1B
.text:00404E12 ; ---------------------------------------------------------------------------
.text:00404E12
.text:00404E12 loc_404E12:                             ; CODE XREF: sub_4045A0+76E↑j
.text:00404E12                 cmp     ebp, [esp+4Ch+arg_C]
.text:00404E16                 mov     [esp+4Ch+var_29], 0
.text:00404E1B                 jnb     loc_404D40
.text:00404E21                 mov     eax, [esp+4Ch+var_30]
.text:00404E25                 cmp     byte ptr [eax], 0
.text:00404E28                 jz      loc_404D40
.text:00404E2E
.text:00404E2E loc_404E2E:                             ; CODE XREF: sub_4045A0+8AB↓j
.text:00404E2E                 inc     [esp+4Ch+var_28]
.text:00404E32                 mov     esi, [esp+4Ch+var_28]
.text:00404E36                 lea     eax, [esi+ebp]
.text:00404E39                 cmp     eax, [esp+4Ch+arg_C]
.text:00404E3D                 jnb     loc_404D40
.text:00404E43                 mov     edi, [esp+4Ch+Str]
.text:00404E47                 cmp     byte ptr [eax+edi], 0
.text:00404E4B                 jnz     short loc_404E2E
.text:00404E4D                 jmp     loc_404D40
.text:00404E52 ; ---------------------------------------------------------------------------
.text:00404E52
.text:00404E52 loc_404E52:                             ; CODE XREF: sub_4045A0+765↑j
.text:00404E52                 mov     [esp+4Ch+var_29], 0
.text:00404E57                 jmp     loc_404D40
.text:00404E5C ; ---------------------------------------------------------------------------
.text:00404E5C
.text:00404E5C loc_404E5C:                             ; CODE XREF: sub_4045A0+72A↑j
.text:00404E5C                 mov     edx, [esp+4Ch+Str]
.text:00404E60                 mov     [esp+4Ch+C], edx ; Str
.text:00404E63                 call    strlen
.text:00404E68                 mov     [esp+4Ch+arg_C], eax
.text:00404E6C                 jmp     loc_404CD0
.text:00404E71 ; ---------------------------------------------------------------------------
.text:00404E71
.text:00404E71 loc_404E71:                             ; CODE XREF: sub_4045A0+105↑j
.text:00404E71                                         ; DATA XREF: sub_4045A0:jpt_4046A5↑o
.text:00404E71                 mov     dl, bl          ; jumptable 004046A5 case 92
.text:00404E73                 jmp     loc_4049A4
.text:00404E78 ; ---------------------------------------------------------------------------
.text:00404E78
.text:00404E78 loc_404E78:                             ; CODE XREF: sub_4045A0+105↑j
.text:00404E78                                         ; sub_4045A0+902↓j
.text:00404E78                                         ; DATA XREF: ...
.text:00404E78                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 004046A5 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:00404E7D                 jnz     def_404AA2      ; jumptable 004046A5 cases 37,43-58,65-90,93,95,97-122
.text:00404E7D                                         ; jumptable 00404AA2 default case, cases 34-38,42-44,46,48-59
.text:00404E83                 jmp     loc_4049AB      ; jumptable 00404D72 cases 91,92,94,96,124
.text:00404E88 ; ---------------------------------------------------------------------------
.text:00404E88
.text:00404E88 loc_404E88:                             ; CODE XREF: sub_4045A0+105↑j
.text:00404E88                                         ; DATA XREF: sub_4045A0:jpt_4046A5↑o
.text:00404E88                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh ; jumptable 004046A5 cases 123,125
.text:00404E8D                 jz      short loc_404EA4
.text:00404E8F                 cmp     [esp+4Ch+arg_C], 1
.text:00404E94
.text:00404E94 loc_404E94:                             ; CODE XREF: sub_4045A0+90C↓j
.text:00404E94                 jnz     def_404AA2      ; jumptable 004046A5 cases 37,43-58,65-90,93,95,97-122
.text:00404E94                                         ; jumptable 00404AA2 default case, cases 34-38,42-44,46,48-59
.text:00404E9A
.text:00404E9A loc_404E9A:                             ; CODE XREF: sub_4045A0+105↑j
.text:00404E9A                                         ; DATA XREF: sub_4045A0:jpt_4046A5↑o
.text:00404E9A                 test    ebp, ebp        ; jumptable 004046A5 cases 35,126
.text:00404E9C                 jnz     def_404AA2      ; jumptable 004046A5 cases 37,43-58,65-90,93,95,97-122
.text:00404E9C                                         ; jumptable 00404AA2 default case, cases 34-38,42-44,46,48-59
.text:00404EA2                 jmp     short loc_404E78 ; jumptable 004046A5 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:00404EA4 ; ---------------------------------------------------------------------------
.text:00404EA4
.text:00404EA4 loc_404EA4:                             ; CODE XREF: sub_4045A0+8ED↑j
.text:00404EA4                 mov     esi, [esp+4Ch+Str]
.text:00404EA8                 cmp     byte ptr [esi+1], 0
.text:00404EAC                 jmp     short loc_404E94
.text:00404EAE ; ---------------------------------------------------------------------------
.text:00404EAE
.text:00404EAE loc_404EAE:                             ; CODE XREF: sub_4045A0:loc_40463F↑j
.text:00404EAE                 test    ebp, ebp
.text:00404EB0                 jnz     short loc_404EBD
.text:00404EB2                 cmp     [esp+4Ch+arg_10], 1
.text:00404EB7                 jz      loc_4049AB      ; jumptable 00404D72 cases 91,92,94,96,124
.text:00404EBD
.text:00404EBD loc_404EBD:                             ; CODE XREF: sub_4045A0+910↑j
.text:00404EBD                 mov     esi, [esp+4Ch+var_1C]
.text:00404EC1                 test    esi, esi
.text:00404EC3                 jz      short loc_404EF8
.text:00404EC5                 mov     edi, [esp+4Ch+var_1C]
.text:00404EC9                 movzx   eax, byte ptr [edi]
.text:00404ECC                 test    al, al
.text:00404ECE                 jz      short loc_404EF8
.text:00404ED0
.text:00404ED0 loc_404ED0:                             ; CODE XREF: sub_4045A0+956↓j
.text:00404ED0                 mov     ebp, [esp+4Ch+arg_4]
.text:00404ED4                 cmp     [esp+4Ch+var_34], ebp
.text:00404ED8                 jnb     short loc_404EE5
.text:00404EDA                 mov     ecx, [esp+4Ch+arg_0]
.text:00404EDE                 mov     ebx, [esp+4Ch+var_34]
.text:00404EE2                 mov     [ebx+ecx], al
.text:00404EE5
.text:00404EE5 loc_404EE5:                             ; CODE XREF: sub_4045A0+938↑j
.text:00404EE5                 inc     [esp+4Ch+var_1C]
.text:00404EE9                 inc     [esp+4Ch+var_34]
.text:00404EED                 mov     edx, [esp+4Ch+var_1C]
.text:00404EF1                 movzx   eax, byte ptr [edx]
.text:00404EF4                 test    al, al
.text:00404EF6                 jnz     short loc_404ED0
.text:00404EF8
.text:00404EF8 loc_404EF8:                             ; CODE XREF: sub_4045A0+923↑j
.text:00404EF8                                         ; sub_4045A0+92E↑j
.text:00404EF8                 mov     eax, [esp+4Ch+arg_4]
.text:00404EFC                 cmp     [esp+4Ch+var_34], eax
.text:00404F00                 jnb     short loc_404F0E
.text:00404F02                 mov     edi, [esp+4Ch+arg_0]
.text:00404F06                 mov     esi, [esp+4Ch+var_34]
.text:00404F0A                 mov     byte ptr [esi+edi], 0
.text:00404F0E
.text:00404F0E loc_404F0E:                             ; CODE XREF: sub_4045A0+960↑j
.text:00404F0E                 mov     eax, [esp+4Ch+var_34]
.text:00404F12                 jmp     loc_4049DF
.text:00404F17 ; ---------------------------------------------------------------------------
.text:00404F17
.text:00404F17 loc_404F17:                             ; CODE XREF: sub_4045A0+95↑j
.text:00404F17                 mov     ebx, [esp+4Ch+Str]
.text:00404F1B                 cmp     byte ptr [ebp+ebx+0], 0
.text:00404F20                 jmp     loc_40463F
.text:00404F25 ; ---------------------------------------------------------------------------
.text:00404F25
.text:00404F25 loc_404F25:                             ; CODE XREF: sub_4045A0+3D↑j
.text:00404F25                                         ; DATA XREF: sub_4045A0:jpt_4045DD↑o
.text:00404F25                 mov     edx, [esp+4Ch+arg_4] ; jumptable 004045DD case 2
.text:00404F29                 cmp     [esp+4Ch+var_34], edx
.text:00404F2D                 jnb     short loc_404F36
.text:00404F2F                 mov     ecx, [esp+4Ch+arg_0]
.text:00404F33                 mov     byte ptr [ecx], 27h ; '''
.text:00404F36
.text:00404F36 loc_404F36:                             ; CODE XREF: sub_4045A0+98D↑j
.text:00404F36                 mov     [esp+4Ch+var_34], 1
.text:00404F3E                 mov     [esp+4Ch+var_1C], 40458Eh
.text:00404F46                 jmp     loc_404626
.text:00404F4B ; ---------------------------------------------------------------------------
.text:00404F4B
.text:00404F4B loc_404F4B:                             ; CODE XREF: sub_4045A0+3D↑j
.text:00404F4B                                         ; DATA XREF: sub_4045A0:jpt_4045DD↑o
.text:00404F4B                 mov     [esp+4Ch+var_21], 1 ; jumptable 004045DD case 4
.text:00404F50                 jmp     def_4045DD      ; jumptable 004045DD default case, cases 0,1
.text:00404F55 ; ---------------------------------------------------------------------------
.text:00404F55
.text:00404F55 loc_404F55:                             ; CODE XREF: sub_4045A0+3D↑j
.text:00404F55                                         ; DATA XREF: sub_4045A0:jpt_4045DD↑o
.text:00404F55                 mov     [esp+4Ch+C], 404590h ; jumptable 004045DD cases 5,6
.text:00404F5C                 call    ds:__imp_libintl_gettext
.text:00404F62                 cmp     eax, 404590h
.text:00404F67                 mov     edi, eax
.text:00404F69                 jz      short loc_404FE0
.text:00404F6B
.text:00404F6B loc_404F6B:                             ; CODE XREF: sub_4045A0+A45↓j
.text:00404F6B                                         ; sub_4045A0+A4C↓j
.text:00404F6B                 mov     [esp+4Ch+C], 40458Eh
.text:00404F72                 call    ds:__imp_libintl_gettext
.text:00404F78                 cmp     eax, 40458Eh
.text:00404F7D                 mov     edx, eax
.text:00404F7F                 jz      short loc_404FD2
.text:00404F81
.text:00404F81 loc_404F81:                             ; CODE XREF: sub_4045A0+A37↓j
.text:00404F81                                         ; sub_4045A0+A3E↓j
.text:00404F81                 mov     [esp+4Ch+var_1C], edi
.text:00404F85                 cmp     byte ptr [edi], 0
.text:00404F88                 jz      short loc_404FB8
.text:00404F8A
.text:00404F8A loc_404F8A:                             ; CODE XREF: sub_4045A0+A16↓j
.text:00404F8A                 mov     ecx, [esp+4Ch+arg_4]
.text:00404F8E                 cmp     [esp+4Ch+var_34], ecx
.text:00404F92                 jnb     short loc_404FA7
.text:00404F94                 mov     ebp, [esp+4Ch+var_1C]
.text:00404F98                 mov     edi, [esp+4Ch+arg_0]
.text:00404F9C                 mov     esi, [esp+4Ch+var_34]
.text:00404FA0                 movzx   ebx, byte ptr [ebp+0]
.text:00404FA4                 mov     [esi+edi], bl
.text:00404FA7
.text:00404FA7 loc_404FA7:                             ; CODE XREF: sub_4045A0+9F2↑j
.text:00404FA7                 inc     [esp+4Ch+var_1C]
.text:00404FAB                 inc     [esp+4Ch+var_34]
.text:00404FAF                 mov     eax, [esp+4Ch+var_1C]
.text:00404FB3                 cmp     byte ptr [eax], 0
.text:00404FB6                 jnz     short loc_404F8A
.text:00404FB8
.text:00404FB8 loc_404FB8:                             ; CODE XREF: sub_4045A0+9E8↑j
.text:00404FB8                 mov     [esp+4Ch+var_21], 1
.text:00404FBD                 mov     [esp+4Ch+var_1C], edx
.text:00404FC1                 mov     [esp+4Ch+C], edx ; Str
.text:00404FC4                 call    strlen
.text:00404FC9                 mov     [esp+4Ch+var_20], eax
.text:00404FCD                 jmp     def_4045DD      ; jumptable 004045DD default case, cases 0,1
.text:00404FD2 ; ---------------------------------------------------------------------------
.text:00404FD2
.text:00404FD2 loc_404FD2:                             ; CODE XREF: sub_4045A0+9DF↑j
.text:00404FD2                 cmp     [esp+4Ch+arg_10], 6
.text:00404FD7                 jnz     short loc_404F81
.text:00404FD9                 mov     edx, offset asc_40458C ; "\"'`"
.text:00404FDE                 jmp     short loc_404F81
.text:00404FE0 ; ---------------------------------------------------------------------------
.text:00404FE0
.text:00404FE0 loc_404FE0:                             ; CODE XREF: sub_4045A0+9C9↑j
.text:00404FE0                 cmp     [esp+4Ch+arg_10], 6
.text:00404FE5                 jnz     short loc_404F6B
.text:00404FE7                 mov     edi, offset asc_40458C ; "\"'`"
.text:00404FEC                 jmp     loc_404F6B
.text:00404FEC sub_4045A0      endp
.text:00404FEC
.text:00404FF1 ; ---------------------------------------------------------------------------
.text:00404FF1                 jmp     short loc_405000
.text:00404FF1 ; ---------------------------------------------------------------------------
.text:00404FF3                 align 10h
.text:00405000
.text:00405000 loc_405000:                             ; CODE XREF: .text:00404FF1↑j
.text:00405000                 sub     esp, 0Ch
.text:00405003                 mov     [esp+4], ebx
.text:00405007                 mov     [esp+8], esi
.text:0040500B                 call    _errno
.text:00405010                 mov     esi, [eax]
.text:00405012                 mov     dword ptr [esp], 24h ; '$'
.text:00405019                 call    sub_4058F0
.text:0040501E                 mov     edx, [esp+10h]
.text:00405022                 mov     ebx, eax
.text:00405024                 test    edx, edx
.text:00405026                 jz      short loc_405071
.text:00405028
.text:00405028 loc_405028:                             ; CODE XREF: .text:00405076↓j
.text:00405028                 mov     ecx, [edx]
.text:0040502A                 mov     [ebx], ecx
.text:0040502C                 mov     ecx, [edx+4]
.text:0040502F                 mov     [ebx+4], ecx
.text:00405032                 mov     ecx, [edx+8]
.text:00405035                 mov     [ebx+8], ecx
.text:00405038                 mov     ecx, [edx+0Ch]
.text:0040503B                 mov     [ebx+0Ch], ecx
.text:0040503E                 mov     ecx, [edx+10h]
.text:00405041                 mov     [ebx+10h], ecx
.text:00405044                 mov     ecx, [edx+14h]
.text:00405047                 mov     [ebx+14h], ecx
.text:0040504A                 mov     ecx, [edx+18h]
.text:0040504D                 mov     [ebx+18h], ecx
.text:00405050                 mov     ecx, [edx+1Ch]
.text:00405053                 mov     [ebx+1Ch], ecx
.text:00405056                 mov     ecx, [edx+20h]
.text:00405059                 mov     [ebx+20h], ecx
.text:0040505C                 call    _errno
.text:00405061                 mov     [eax], esi
.text:00405063                 mov     esi, [esp+8]
.text:00405067                 mov     eax, ebx
.text:00405069                 mov     ebx, [esp+4]
.text:0040506D                 add     esp, 0Ch
.text:00405070                 retn
.text:00405071 ; ---------------------------------------------------------------------------
.text:00405071
.text:00405071 loc_405071:                             ; CODE XREF: .text:00405026↑j
.text:00405071                 mov     edx, offset dword_410140
.text:00405076                 jmp     short loc_405028
.text:00405076 ; ---------------------------------------------------------------------------
.text:00405078                 align 10h
.text:00405080                 mov     eax, [esp+4]
.text:00405084                 test    eax, eax
.text:00405086                 jz      short loc_405090
.text:00405088
.text:00405088 loc_405088:                             ; CODE XREF: .text:00405095↓j
.text:00405088                 mov     eax, [eax]
.text:0040508A                 retn
.text:0040508A ; ---------------------------------------------------------------------------
.text:0040508B                 align 10h
.text:00405090
.text:00405090 loc_405090:                             ; CODE XREF: .text:00405086↑j
.text:00405090                 mov     eax, offset dword_410140
.text:00405095                 jmp     short loc_405088
.text:00405095 ; ---------------------------------------------------------------------------
.text:00405097                 align 10h
.text:004050A0                 mov     edx, [esp+4]
.text:004050A4                 test    edx, edx
.text:004050A6                 jz      short loc_4050B0
.text:004050A8
.text:004050A8 loc_4050A8:                             ; CODE XREF: .text:004050B5↓j
.text:004050A8                 mov     ecx, [esp+8]
.text:004050AC                 mov     [edx], ecx
.text:004050AE                 retn
.text:004050AE ; ---------------------------------------------------------------------------
.text:004050AF                 align 10h
.text:004050B0
.text:004050B0 loc_4050B0:                             ; CODE XREF: .text:004050A6↑j
.text:004050B0                 mov     edx, offset dword_410140
.text:004050B5                 jmp     short loc_4050A8
.text:004050B5 ; ---------------------------------------------------------------------------
.text:004050B7                 align 10h
.text:004050C0                 sub     esp, 8
.text:004050C3                 mov     eax, [esp+0Ch]
.text:004050C7                 movzx   ecx, byte ptr [esp+10h]
.text:004050CC                 mov     [esp], ebx
.text:004050CF                 mov     ebx, [esp+14h]
.text:004050D3                 mov     [esp+4], esi
.text:004050D7                 mov     dl, cl
.text:004050D9                 shr     dl, 5
.text:004050DC                 movzx   edx, dl
.text:004050DF                 shl     edx, 2
.text:004050E2                 test    eax, eax
.text:004050E4                 lea     esi, [edx+eax+4]
.text:004050E8                 jz      short loc_405110
.text:004050EA
.text:004050EA loc_4050EA:                             ; CODE XREF: .text:00405116↓j
.text:004050EA                 mov     edx, [esi]
.text:004050EC                 and     ecx, 1Fh
.text:004050EF                 and     ebx, 1
.text:004050F2                 mov     eax, edx
.text:004050F4                 shr     eax, cl
.text:004050F6                 and     eax, 1
.text:004050F9                 xor     ebx, eax
.text:004050FB                 shl     ebx, cl
.text:004050FD                 xor     edx, ebx
.text:004050FF                 mov     [esi], edx
.text:00405101                 mov     ebx, [esp]
.text:00405104                 mov     esi, [esp+4]
.text:00405108                 add     esp, 8
.text:0040510B                 retn
.text:0040510B ; ---------------------------------------------------------------------------
.text:0040510C                 align 10h
.text:00405110
.text:00405110 loc_405110:                             ; CODE XREF: .text:004050E8↑j
.text:00405110                 lea     esi, dword_410144[edx]
.text:00405116                 jmp     short loc_4050EA
.text:00405116 ; ---------------------------------------------------------------------------
.text:00405118                 align 10h
.text:00405120                 sub     esp, 2Ch
.text:00405123                 mov     [esp+24h], ebx
.text:00405127                 mov     ebx, [esp+40h]
.text:0040512B                 mov     [esp+28h], esi
.text:0040512F                 test    ebx, ebx
.text:00405131                 jz      short loc_405180
.text:00405133
.text:00405133 loc_405133:                             ; CODE XREF: .text:00405185↓j
.text:00405133                 call    _errno
.text:00405138                 mov     esi, [eax]
.text:0040513A                 mov     [esp+14h], ebx
.text:0040513E                 mov     edx, [ebx]
.text:00405140                 mov     ecx, [esp+38h]
.text:00405144                 mov     ebx, [esp+3Ch]
.text:00405148                 mov     [esp+10h], edx
.text:0040514C                 mov     edx, [esp+34h]
.text:00405150                 mov     [esp+0Ch], ebx
.text:00405154                 mov     [esp+8], ecx
.text:00405158                 mov     [esp+4], edx
.text:0040515C                 mov     edx, [esp+30h]
.text:00405160                 mov     [esp], edx
.text:00405163                 call    sub_4045A0
.text:00405168                 mov     ebx, eax
.text:0040516A                 call    _errno
.text:0040516F                 mov     [eax], esi
.text:00405171                 mov     esi, [esp+28h]
.text:00405175                 mov     eax, ebx
.text:00405177                 mov     ebx, [esp+24h]
.text:0040517B                 add     esp, 2Ch
.text:0040517E                 retn
.text:0040517E ; ---------------------------------------------------------------------------
.text:0040517F                 align 10h
.text:00405180
.text:00405180 loc_405180:                             ; CODE XREF: .text:00405131↑j
.text:00405180                 mov     ebx, offset dword_410140
.text:00405185                 jmp     short loc_405133
.text:00405185 ; ---------------------------------------------------------------------------
.text:00405187                 align 10h
.text:00405190                 push    ebp
.text:00405191                 push    edi
.text:00405192                 push    esi
.text:00405193                 push    ebx
.text:00405194                 sub     esp, 2Ch
.text:00405197                 mov     ebp, [esp+48h]
.text:0040519B                 call    _errno
.text:004051A0                 mov     edx, [eax]
.text:004051A2                 test    ebp, ebp
.text:004051A4                 mov     ebx, ebp
.text:004051A6                 mov     [esp+28h], edx
.text:004051AA                 jz      loc_405260
.text:004051B0
.text:004051B0 loc_4051B0:                             ; CODE XREF: .text:00405265↓j
.text:004051B0                 call    _errno
.text:004051B5                 mov     edi, [eax]
.text:004051B7                 mov     esi, ebp
.text:004051B9                 mov     [esp+14h], ebx
.text:004051BD                 mov     ecx, [ebx]
.text:004051BF                 mov     dword ptr [esp], 0
.text:004051C6                 mov     edx, [esp+44h]
.text:004051CA                 mov     dword ptr [esp+4], 0
.text:004051D2                 mov     eax, [esp+40h]
.text:004051D6                 mov     [esp+10h], ecx
.text:004051DA                 mov     [esp+0Ch], edx
.text:004051DE                 mov     [esp+8], eax
.text:004051E2                 call    sub_4045A0
.text:004051E7                 mov     ebx, eax
.text:004051E9                 call    _errno
.text:004051EE                 mov     [eax], edi
.text:004051F0                 lea     edi, [ebx+1]
.text:004051F3                 mov     [esp], edi
.text:004051F6                 call    sub_4058F0
.text:004051FB                 mov     [esp+24h], eax
.text:004051FF                 test    ebp, ebp
.text:00405201                 jz      short loc_405252
.text:00405203
.text:00405203 loc_405203:                             ; CODE XREF: .text:00405257↓j
.text:00405203                 call    _errno
.text:00405208                 mov     ebp, [eax]
.text:0040520A                 mov     [esp+14h], esi
.text:0040520E                 mov     ecx, [esi]
.text:00405210                 mov     [esp+4], edi
.text:00405214                 mov     edx, [esp+44h]
.text:00405218                 mov     esi, [esp+24h]
.text:0040521C                 mov     [esp+10h], ecx
.text:00405220                 mov     eax, [esp+40h]
.text:00405224                 mov     [esp+0Ch], edx
.text:00405228                 mov     [esp], esi
.text:0040522B                 mov     [esp+8], eax
.text:0040522F                 call    sub_4045A0
.text:00405234                 call    _errno
.text:00405239                 mov     [eax], ebp
.text:0040523B                 call    _errno
.text:00405240                 mov     ebx, [esp+28h]
.text:00405244                 mov     [eax], ebx
.text:00405246                 mov     eax, [esp+24h]
.text:0040524A                 add     esp, 2Ch
.text:0040524D                 pop     ebx
.text:0040524E                 pop     esi
.text:0040524F                 pop     edi
.text:00405250                 pop     ebp
.text:00405251                 retn
.text:00405252 ; ---------------------------------------------------------------------------
.text:00405252
.text:00405252 loc_405252:                             ; CODE XREF: .text:00405201↑j
.text:00405252                 mov     esi, offset dword_410140
.text:00405257                 jmp     short loc_405203
.text:00405257 ; ---------------------------------------------------------------------------
.text:00405259                 align 10h
.text:00405260
.text:00405260 loc_405260:                             ; CODE XREF: .text:004051AA↑j
.text:00405260                 mov     ebx, offset dword_410140
.text:00405265                 jmp     loc_4051B0
.text:00405265 ; ---------------------------------------------------------------------------
.text:0040526A                 align 10h
.text:00405270                 sub     esp, 1Ch
.text:00405273                 mov     edx, [esp+24h]
.text:00405277                 mov     dword ptr [esp+0Ch], offset dword_410140
.text:0040527F                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00405287                 mov     [esp+4], edx
.text:0040528B                 mov     edx, [esp+20h]
.text:0040528F                 mov     [esp], edx
.text:00405292                 call    sub_4056E0
.text:00405297                 add     esp, 1Ch
.text:0040529A                 retn
.text:0040529A ; ---------------------------------------------------------------------------
.text:0040529B                 align 10h
.text:004052A0                 sub     esp, 1Ch
.text:004052A3                 mov     edx, [esp+20h]
.text:004052A7                 mov     dword ptr [esp+0Ch], offset dword_410140
.text:004052AF                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:004052B7                 mov     [esp+4], edx
.text:004052BB                 mov     dword ptr [esp], 0
.text:004052C2                 call    sub_4056E0
.text:004052C7                 add     esp, 1Ch
.text:004052CA                 retn
.text:004052CA ; ---------------------------------------------------------------------------
.text:004052CB                 align 10h
.text:004052D0
.text:004052D0 ; =============== S U B R O U T I N E =======================================
.text:004052D0
.text:004052D0
.text:004052D0 ; int __cdecl sub_4052D0(int, int, char *)
.text:004052D0 sub_4052D0      proc near               ; CODE XREF: .text:004044CA↑p
.text:004052D0                                         ; sub_4044E0+1A↑p
.text:004052D0
.text:004052D0 var_BC          = dword ptr -0BCh
.text:004052D0 var_B8          = dword ptr -0B8h
.text:004052D0 var_B4          = dword ptr -0B4h
.text:004052D0 var_B0          = dword ptr -0B0h
.text:004052D0 var_AC          = dword ptr -0ACh
.text:004052D0 var_A8          = dword ptr -0A8h
.text:004052D0 var_A4          = dword ptr -0A4h
.text:004052D0 var_A0          = dword ptr -0A0h
.text:004052D0 var_9C          = dword ptr -9Ch
.text:004052D0 var_98          = dword ptr -98h
.text:004052D0 var_94          = dword ptr -94h
.text:004052D0 var_90          = dword ptr -90h
.text:004052D0 var_8C          = dword ptr -8Ch
.text:004052D0 var_7C          = dword ptr -7Ch
.text:004052D0 var_78          = dword ptr -78h
.text:004052D0 var_74          = dword ptr -74h
.text:004052D0 var_70          = dword ptr -70h
.text:004052D0 var_6C          = dword ptr -6Ch
.text:004052D0 var_68          = dword ptr -68h
.text:004052D0 var_64          = dword ptr -64h
.text:004052D0 var_60          = dword ptr -60h
.text:004052D0 var_5C          = dword ptr -5Ch
.text:004052D0 var_4C          = dword ptr -4Ch
.text:004052D0 var_48          = dword ptr -48h
.text:004052D0 var_44          = dword ptr -44h
.text:004052D0 var_40          = dword ptr -40h
.text:004052D0 var_3C          = dword ptr -3Ch
.text:004052D0 var_38          = dword ptr -38h
.text:004052D0 var_34          = dword ptr -34h
.text:004052D0 var_30          = dword ptr -30h
.text:004052D0 var_2C          = dword ptr -2Ch
.text:004052D0 arg_0           = dword ptr  4
.text:004052D0 arg_4           = dword ptr  8
.text:004052D0 arg_8           = dword ptr  0Ch
.text:004052D0
.text:004052D0                 push    ebp
.text:004052D1                 xor     eax, eax
.text:004052D3                 mov     ecx, 8
.text:004052D8                 push    edi
.text:004052D9                 push    esi
.text:004052DA                 push    ebx
.text:004052DB                 sub     esp, 0ACh
.text:004052E1                 mov     ebp, [esp+0BCh+arg_4]
.text:004052E8                 cld
.text:004052E9                 lea     edi, [esp+0BCh+var_A8]
.text:004052ED                 mov     [esp+0BCh+var_AC], ebp
.text:004052F1                 rep stosd
.text:004052F3                 mov     eax, [esp+0BCh+var_8C]
.text:004052F7                 mov     edi, [esp+0BCh+var_AC]
.text:004052FB                 mov     esi, [esp+0BCh+var_A8]
.text:004052FF                 mov     [esp+0BCh+var_5C], eax
.text:00405303                 mov     ebp, [esp+0BCh+var_A4]
.text:00405307                 mov     eax, [esp+0BCh+var_AC]
.text:0040530B                 mov     [esp+0BCh+var_7C], edi
.text:0040530F                 mov     ecx, [esp+0BCh+var_94]
.text:00405313                 mov     edi, [esp+0BCh+var_A0]
.text:00405317                 mov     [esp+0BCh+var_78], esi
.text:0040531B                 mov     edx, [esp+0BCh+var_90]
.text:0040531F                 mov     esi, [esp+0BCh+var_9C]
.text:00405323                 mov     [esp+0BCh+var_4C], eax
.text:00405327                 mov     ebx, [esp+0BCh+var_98]
.text:0040532B                 mov     eax, [esp+0BCh+var_A8]
.text:0040532F                 mov     [esp+0BCh+var_74], ebp
.text:00405333                 mov     [esp+0BCh+var_70], edi
.text:00405337                 mov     [esp+0BCh+var_6C], esi
.text:0040533B                 mov     [esp+0BCh+var_68], ebx
.text:0040533F                 mov     [esp+0BCh+var_64], ecx
.text:00405343                 mov     [esp+0BCh+var_60], edx
.text:00405347                 mov     [esp+0BCh+var_48], eax
.text:0040534B                 mov     [esp+0BCh+var_44], ebp
.text:0040534F                 mov     [esp+0BCh+var_40], edi
.text:00405353                 mov     [esp+0BCh+var_3C], esi
.text:0040535A                 mov     [esp+0BCh+var_38], ebx
.text:00405361                 mov     ebx, [esp+0BCh+var_8C]
.text:00405365                 mov     [esp+0BCh+var_30], edx
.text:0040536C                 mov     edx, [esp+0BCh+arg_8]
.text:00405373                 mov     [esp+0BCh+var_34], ecx
.text:0040537A                 lea     ecx, [esp+0BCh+var_4C]
.text:0040537E                 mov     [esp+0BCh+var_B8], edx ; char *
.text:00405382                 mov     edx, [esp+0BCh+arg_0]
.text:00405389                 mov     [esp+0BCh+var_2C], ebx
.text:00405390                 mov     [esp+0BCh+var_B0], ecx ; int
.text:00405394                 mov     [esp+0BCh+var_B4], 0FFFFFFFFh ; int
.text:0040539C                 mov     [esp+0BCh+var_BC], edx ; int
.text:0040539F                 call    sub_4056E0
.text:004053A4                 add     esp, 0ACh
.text:004053AA                 pop     ebx
.text:004053AB                 pop     esi
.text:004053AC                 pop     edi
.text:004053AD                 pop     ebp
.text:004053AE                 retn
.text:004053AE sub_4052D0      endp
.text:004053AE
.text:004053AE ; ---------------------------------------------------------------------------
.text:004053AF                 align 10h
.text:004053B0                 push    ebp
.text:004053B1                 xor     eax, eax
.text:004053B3                 mov     ecx, 8
.text:004053B8                 push    edi
.text:004053B9                 push    esi
.text:004053BA                 push    ebx
.text:004053BB                 sub     esp, 0ACh
.text:004053C1                 mov     edx, [esp+0C4h]
.text:004053C8                 cld
.text:004053C9                 lea     edi, [esp+14h]
.text:004053CD                 mov     [esp+10h], edx
.text:004053D1                 rep stosd
.text:004053D3                 mov     eax, [esp+30h]
.text:004053D7                 mov     ebp, [esp+10h]
.text:004053DB                 mov     edi, [esp+14h]
.text:004053DF                 mov     [esp+60h], eax
.text:004053E3                 mov     esi, [esp+20h]
.text:004053E7                 mov     eax, [esp+10h]
.text:004053EB                 mov     [esp+40h], ebp
.text:004053EF                 mov     ecx, [esp+28h]
.text:004053F3                 mov     ebp, [esp+18h]
.text:004053F7                 mov     [esp+44h], edi
.text:004053FB                 mov     edx, [esp+2Ch]
.text:004053FF                 mov     edi, [esp+1Ch]
.text:00405403                 mov     [esp+70h], eax
.text:00405407                 mov     ebx, [esp+24h]
.text:0040540B                 mov     eax, [esp+14h]
.text:0040540F                 mov     [esp+48h], ebp
.text:00405413                 mov     [esp+4Ch], edi
.text:00405417                 mov     [esp+50h], esi
.text:0040541B                 mov     [esp+54h], ebx
.text:0040541F                 mov     [esp+58h], ecx
.text:00405423                 mov     [esp+5Ch], edx
.text:00405427                 mov     [esp+74h], eax
.text:0040542B                 mov     [esp+78h], ebp
.text:0040542F                 mov     [esp+7Ch], edi
.text:00405433                 mov     [esp+80h], esi
.text:0040543A                 mov     [esp+84h], ebx
.text:00405441                 mov     esi, [esp+30h]
.text:00405445                 lea     ebx, [esp+70h]
.text:00405449                 mov     [esp+8Ch], edx
.text:00405450                 mov     edx, [esp+0C8h]
.text:00405457                 mov     [esp+88h], ecx
.text:0040545E                 mov     ecx, [esp+0CCh]
.text:00405465                 mov     [esp+4], edx
.text:00405469                 mov     edx, [esp+0C0h]
.text:00405470                 mov     [esp+90h], esi
.text:00405477                 mov     [esp+0Ch], ebx
.text:0040547B                 mov     [esp+8], ecx
.text:0040547F                 mov     [esp], edx
.text:00405482                 call    sub_4056E0
.text:00405487                 add     esp, 0ACh
.text:0040548D                 pop     ebx
.text:0040548E                 pop     esi
.text:0040548F                 pop     edi
.text:00405490                 pop     ebp
.text:00405491                 retn
.text:00405491 ; ---------------------------------------------------------------------------
.text:00405492                 align 10h
.text:004054A0                 push    ebp
.text:004054A1                 xor     eax, eax
.text:004054A3                 mov     ecx, 8
.text:004054A8                 push    edi
.text:004054A9                 push    esi
.text:004054AA                 push    ebx
.text:004054AB                 sub     esp, 0ACh
.text:004054B1                 mov     edi, [esp+0C0h]
.text:004054B8                 cld
.text:004054B9                 mov     [esp+10h], edi
.text:004054BD                 lea     edi, [esp+14h]
.text:004054C1                 rep stosd
.text:004054C3                 mov     eax, [esp+30h]
.text:004054C7                 mov     esi, [esp+10h]
.text:004054CB                 mov     ebx, [esp+14h]
.text:004054CF                 mov     [esp+60h], eax
.text:004054D3                 mov     ebp, [esp+18h]
.text:004054D7                 mov     eax, [esp+10h]
.text:004054DB                 mov     [esp+40h], esi
.text:004054DF                 mov     edi, [esp+1Ch]
.text:004054E3                 mov     esi, [esp+20h]
.text:004054E7                 mov     [esp+44h], ebx
.text:004054EB                 mov     ecx, [esp+28h]
.text:004054EF                 mov     edx, [esp+2Ch]
.text:004054F3                 mov     [esp+70h], eax
.text:004054F7                 mov     ebx, [esp+24h]
.text:004054FB                 mov     eax, [esp+14h]
.text:004054FF                 mov     [esp+48h], ebp
.text:00405503                 mov     [esp+4Ch], edi
.text:00405507                 mov     [esp+50h], esi
.text:0040550B                 mov     [esp+54h], ebx
.text:0040550F                 mov     [esp+58h], ecx
.text:00405513                 mov     [esp+5Ch], edx
.text:00405517                 mov     [esp+74h], eax
.text:0040551B                 mov     [esp+78h], ebp
.text:0040551F                 mov     [esp+7Ch], edi
.text:00405523                 mov     [esp+80h], esi
.text:0040552A                 mov     [esp+84h], ebx
.text:00405531                 mov     [esp+8Ch], edx
.text:00405538                 lea     edx, [esp+70h]
.text:0040553C                 mov     [esp+88h], ecx
.text:00405543                 mov     ecx, [esp+30h]
.text:00405547                 mov     [esp+0Ch], edx
.text:0040554B                 mov     edx, [esp+0C4h]
.text:00405552                 mov     [esp+90h], ecx
.text:00405559                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00405561                 mov     [esp+4], edx
.text:00405565                 mov     dword ptr [esp], 0
.text:0040556C                 call    sub_4056E0
.text:00405571                 add     esp, 0ACh
.text:00405577                 pop     ebx
.text:00405578                 pop     esi
.text:00405579                 pop     edi
.text:0040557A                 pop     ebp
.text:0040557B                 retn
.text:0040557B ; ---------------------------------------------------------------------------
.text:0040557C                 align 10h
.text:00405580                 push    edi
.text:00405581                 push    esi
.text:00405582                 push    ebx
.text:00405583                 sub     esp, 40h
.text:00405586                 mov     edx, ds:dword_41014C
.text:0040558C                 mov     ebx, ds:dword_410140
.text:00405592                 mov     esi, ds:dword_410148
.text:00405598                 mov     edi, ds:dword_410144
.text:0040559E                 mov     [esp+1Ch], edx
.text:004055A2                 mov     ecx, ds:dword_410150
.text:004055A8                 mov     edx, ds:dword_410160
.text:004055AE                 mov     [esp+10h], ebx
.text:004055B2                 mov     ebx, ds:dword_410154
.text:004055B8                 mov     [esp+30h], edx
.text:004055BC                 movzx   edx, byte ptr [esp+54h]
.text:004055C1                 mov     [esp+18h], esi
.text:004055C5                 mov     esi, ds:dword_41015C
.text:004055CB                 mov     [esp+14h], edi
.text:004055CF                 mov     edi, ds:dword_410158
.text:004055D5                 mov     [esp+20h], ecx
.text:004055D9                 mov     cl, dl
.text:004055DB                 shr     cl, 5
.text:004055DE                 mov     [esp+24h], ebx
.text:004055E2                 movzx   ebx, cl
.text:004055E5                 mov     [esp+2Ch], esi
.text:004055E9                 lea     esi, [esp+10h]
.text:004055ED                 mov     [esp+28h], edi
.text:004055F1                 lea     edi, [esi+ebx*4]
.text:004055F4                 mov     ebx, edx
.text:004055F6                 mov     edx, [edi+4]
.text:004055F9                 and     ebx, 1Fh
.text:004055FC                 mov     cl, bl
.text:004055FE                 mov     eax, edx
.text:00405600                 shr     eax, cl
.text:00405602                 and     eax, 1
.text:00405605                 xor     eax, 1
.text:00405608                 shl     eax, cl
.text:0040560A                 xor     edx, eax
.text:0040560C                 mov     [edi+4], edx
.text:0040560F                 mov     edx, [esp+50h]
.text:00405613                 mov     [esp+0Ch], esi
.text:00405617                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:0040561F                 mov     [esp+4], edx
.text:00405623                 mov     dword ptr [esp], 0
.text:0040562A                 call    sub_4056E0
.text:0040562F                 add     esp, 40h
.text:00405632                 pop     ebx
.text:00405633                 pop     esi
.text:00405634                 pop     edi
.text:00405635                 retn
.text:00405635 ; ---------------------------------------------------------------------------
.text:00405636                 align 10h
.text:00405640
.text:00405640 ; =============== S U B R O U T I N E =======================================
.text:00405640
.text:00405640
.text:00405640 ; int __cdecl sub_405640(char *)
.text:00405640 sub_405640      proc near               ; CODE XREF: sub_4043D0+64↑p
.text:00405640
.text:00405640 var_4C          = dword ptr -4Ch
.text:00405640 var_48          = dword ptr -48h
.text:00405640 var_44          = dword ptr -44h
.text:00405640 var_40          = dword ptr -40h
.text:00405640 var_3C          = dword ptr -3Ch
.text:00405640 var_38          = dword ptr -38h
.text:00405640 var_34          = dword ptr -34h
.text:00405640 var_30          = dword ptr -30h
.text:00405640 var_2C          = dword ptr -2Ch
.text:00405640 var_28          = dword ptr -28h
.text:00405640 var_24          = dword ptr -24h
.text:00405640 var_20          = dword ptr -20h
.text:00405640 var_1C          = dword ptr -1Ch
.text:00405640 arg_0           = dword ptr  4
.text:00405640
.text:00405640                 sub     esp, 4Ch
.text:00405643                 mov     ecx, ds:dword_410140
.text:00405649                 mov     [esp+4Ch+var_44], 0FFFFFFFFh ; int
.text:00405651                 mov     edx, ds:dword_410144
.text:00405657                 mov     [esp+4Ch+var_4C], 0 ; int
.text:0040565E                 mov     [esp+4Ch+var_3C], ecx
.text:00405662                 mov     ecx, ds:dword_41014C
.text:00405668                 mov     [esp+4Ch+var_38], edx
.text:0040566C                 mov     edx, ds:dword_410148
.text:00405672                 mov     [esp+4Ch+var_30], ecx
.text:00405676                 mov     ecx, ds:dword_410150
.text:0040567C                 mov     eax, edx
.text:0040567E                 shr     eax, 1Ah
.text:00405681                 and     eax, 1
.text:00405684                 xor     eax, 1
.text:00405687                 mov     [esp+4Ch+var_2C], ecx
.text:0040568B                 shl     eax, 1Ah
.text:0040568E                 mov     ecx, ds:dword_410154
.text:00405694                 xor     edx, eax
.text:00405696                 mov     [esp+4Ch+var_34], edx
.text:0040569A                 mov     edx, [esp+4Ch+arg_0]
.text:0040569E                 mov     [esp+4Ch+var_28], ecx
.text:004056A2                 mov     ecx, ds:dword_410158
.text:004056A8                 mov     [esp+4Ch+var_48], edx ; char *
.text:004056AC                 mov     [esp+4Ch+var_24], ecx
.text:004056B0                 mov     ecx, ds:dword_41015C
.text:004056B6                 mov     [esp+4Ch+var_20], ecx
.text:004056BA                 mov     ecx, ds:dword_410160
.text:004056C0                 mov     [esp+4Ch+var_1C], ecx
.text:004056C4                 lea     ecx, [esp+4Ch+var_3C]
.text:004056C8                 mov     [esp+4Ch+var_40], ecx ; int
.text:004056CC                 call    sub_4056E0
.text:004056D1                 add     esp, 4Ch
.text:004056D4                 retn
.text:004056D4 sub_405640      endp
.text:004056D4
.text:004056D4 ; ---------------------------------------------------------------------------
.text:004056D5                 align 10h
.text:004056E0
.text:004056E0 ; =============== S U B R O U T I N E =======================================
.text:004056E0
.text:004056E0
.text:004056E0 ; int __cdecl sub_4056E0(int, char *, int, int)
.text:004056E0 sub_4056E0      proc near               ; CODE XREF: .text:00405292↑p
.text:004056E0                                         ; .text:004052C2↑p ...
.text:004056E0
.text:004056E0 Block           = dword ptr -2Ch
.text:004056E0 var_28          = dword ptr -28h
.text:004056E0 Str             = dword ptr -24h
.text:004056E0 var_20          = dword ptr -20h
.text:004056E0 var_1C          = dword ptr -1Ch
.text:004056E0 var_18          = dword ptr -18h
.text:004056E0 var_14          = dword ptr -14h
.text:004056E0 arg_0           = dword ptr  4
.text:004056E0 arg_4           = dword ptr  8
.text:004056E0 arg_8           = dword ptr  0Ch
.text:004056E0 arg_C           = dword ptr  10h
.text:004056E0
.text:004056E0                 push    ebp
.text:004056E1                 push    edi
.text:004056E2                 push    esi
.text:004056E3                 push    ebx
.text:004056E4                 sub     esp, 1Ch
.text:004056E7                 call    _errno
.text:004056EC                 mov     edx, [eax]
.text:004056EE                 mov     eax, [esp+2Ch+arg_0]
.text:004056F2                 mov     [esp+2Ch+var_14], edx
.text:004056F6                 test    eax, eax
.text:004056F8                 js      loc_40589A
.text:004056FE                 mov     eax, [esp+2Ch+arg_0]
.text:00405702                 cmp     dword_40F020, eax
.text:00405708                 ja      short loc_405780
.text:0040570A                 mov     esi, eax
.text:0040570C                 inc     esi
.text:0040570D                 cmp     esi, 1FFFFFFFh
.text:00405713                 ja      loc_40589F
.text:00405719                 mov     ebx, off_40F02C
.text:0040571F                 cmp     ebx, offset dword_40F024
.text:00405725                 jz      loc_405871
.text:0040572B
.text:0040572B loc_40572B:                             ; CODE XREF: sub_4056E0+1B5↓j
.text:0040572B                 mov     [esp+2Ch+Block], ebx ; void *
.text:0040572E                 lea     ecx, ds:0[esi*8]
.text:00405735                 mov     ebp, esi
.text:00405737                 mov     [esp+2Ch+var_28], ecx ; size_t
.text:0040573B                 call    sub_405980
.text:00405740                 mov     off_40F02C, eax
.text:00405745                 mov     ebx, dword_40F020
.text:0040574B                 sub     ebp, ebx
.text:0040574D                 lea     edi, [eax+ebx*8]
.text:00405750                 lea     eax, ds:0[ebp*8]
.text:00405757                 cmp     eax, 7
.text:0040575A                 jbe     short loc_405770
.text:0040575C                 test    edi, 4
.text:00405762                 jz      short loc_405770
.text:00405764                 mov     dword ptr [edi], 0
.text:0040576A                 sub     eax, 4
.text:0040576D                 add     edi, 4
.text:00405770
.text:00405770 loc_405770:                             ; CODE XREF: sub_4056E0+7A↑j
.text:00405770                                         ; sub_4056E0+82↑j
.text:00405770                 cld
.text:00405771                 mov     ecx, eax
.text:00405773                 shr     ecx, 2
.text:00405776                 xor     eax, eax
.text:00405778                 rep stosd
.text:0040577A                 mov     dword_40F020, esi
.text:00405780
.text:00405780 loc_405780:                             ; CODE XREF: sub_4056E0+28↑j
.text:00405780                 mov     esi, off_40F02C
.text:00405786                 mov     eax, [esp+2Ch+arg_0]
.text:0040578A                 mov     ebp, [esi+eax*8]
.text:0040578D                 mov     edi, [esi+eax*8+4]
.text:00405791                 mov     esi, [esp+2Ch+arg_C]
.text:00405795                 test    esi, esi
.text:00405797                 jz      loc_405867
.text:0040579D
.text:0040579D loc_40579D:                             ; CODE XREF: sub_4056E0+18C↓j
.text:0040579D                 call    _errno
.text:004057A2                 mov     ebx, [eax]
.text:004057A4                 mov     [esp+2Ch+var_18], esi ; int
.text:004057A8                 mov     ecx, [esi]
.text:004057AA                 mov     [esp+2Ch+Block], edi ; int
.text:004057AD                 mov     edx, [esp+2Ch+arg_8]
.text:004057B1                 mov     [esp+2Ch+var_28], ebp ; int
.text:004057B5                 mov     [esp+2Ch+var_1C], ecx ; int
.text:004057B9                 mov     ecx, [esp+2Ch+arg_4]
.text:004057BD                 mov     [esp+2Ch+var_20], edx ; int
.text:004057C1                 mov     [esp+2Ch+Str], ecx ; Str
.text:004057C5                 call    sub_4045A0
.text:004057CA                 mov     esi, eax
.text:004057CC                 call    _errno
.text:004057D1                 mov     [eax], ebx
.text:004057D3                 cmp     ebp, esi
.text:004057D5                 ja      short loc_40584B
.text:004057D7                 lea     ebp, [esi+1]
.text:004057DA                 mov     ebx, off_40F02C
.text:004057E0                 cmp     edi, offset unk_410040
.text:004057E6                 mov     esi, [esp+2Ch+arg_0]
.text:004057EA                 mov     [ebx+esi*8], ebp
.text:004057ED                 jz      short loc_4057FD
.text:004057EF                 mov     [esp+2Ch+Block], edi ; Block
.text:004057F2                 call    free
.text:004057F7                 mov     ebx, off_40F02C
.text:004057FD
.text:004057FD loc_4057FD:                             ; CODE XREF: sub_4056E0+10D↑j
.text:004057FD                 mov     [esp+2Ch+Block], ebp ; size_t
.text:00405800                 call    sub_4058F0
.text:00405805                 mov     esi, [esp+2Ch+arg_C]
.text:00405809                 mov     edi, eax
.text:0040580B                 mov     eax, [esp+2Ch+arg_0]
.text:0040580F                 test    esi, esi
.text:00405811                 mov     [ebx+eax*8+4], edi
.text:00405815                 jz      short loc_405860
.text:00405817
.text:00405817 loc_405817:                             ; CODE XREF: sub_4056E0+185↓j
.text:00405817                 call    _errno
.text:0040581C                 mov     ebx, [eax]
.text:0040581E                 mov     [esp+2Ch+var_18], esi ; int
.text:00405822                 mov     ecx, [esi]
.text:00405824                 mov     [esp+2Ch+Block], edi ; int
.text:00405827                 mov     edx, [esp+2Ch+arg_8]
.text:0040582B                 mov     [esp+2Ch+var_28], ebp ; int
.text:0040582F                 mov     [esp+2Ch+var_1C], ecx ; int
.text:00405833                 mov     ecx, [esp+2Ch+arg_4]
.text:00405837                 mov     [esp+2Ch+var_20], edx ; int
.text:0040583B                 mov     [esp+2Ch+Str], ecx ; Str
.text:0040583F                 call    sub_4045A0
.text:00405844                 call    _errno
.text:00405849                 mov     [eax], ebx
.text:0040584B
.text:0040584B loc_40584B:                             ; CODE XREF: sub_4056E0+F5↑j
.text:0040584B                 call    _errno
.text:00405850                 mov     ebp, [esp+2Ch+var_14]
.text:00405854                 mov     [eax], ebp
.text:00405856                 add     esp, 1Ch
.text:00405859                 mov     eax, edi
.text:0040585B                 pop     ebx
.text:0040585C                 pop     esi
.text:0040585D                 pop     edi
.text:0040585E                 pop     ebp
.text:0040585F                 retn
.text:00405860 ; ---------------------------------------------------------------------------
.text:00405860
.text:00405860 loc_405860:                             ; CODE XREF: sub_4056E0+135↑j
.text:00405860                 mov     esi, offset dword_410140
.text:00405865                 jmp     short loc_405817
.text:00405867 ; ---------------------------------------------------------------------------
.text:00405867
.text:00405867 loc_405867:                             ; CODE XREF: sub_4056E0+B7↑j
.text:00405867                 mov     esi, offset dword_410140
.text:0040586C                 jmp     loc_40579D
.text:00405871 ; ---------------------------------------------------------------------------
.text:00405871
.text:00405871 loc_405871:                             ; CODE XREF: sub_4056E0+45↑j
.text:00405871                 mov     [esp+2Ch+Block], 8 ; size_t
.text:00405878                 call    sub_4058F0
.text:0040587D                 mov     off_40F02C, eax
.text:00405882                 mov     edi, dword_40F024
.text:00405888                 mov     ebx, eax
.text:0040588A                 mov     ecx, off_40F028
.text:00405890                 mov     [eax], edi
.text:00405892                 mov     [eax+4], ecx
.text:00405895                 jmp     loc_40572B
.text:0040589A ; ---------------------------------------------------------------------------
.text:0040589A
.text:0040589A loc_40589A:                             ; CODE XREF: sub_4056E0+18↑j
.text:0040589A                 call    abort
.text:0040589F ; ---------------------------------------------------------------------------
.text:0040589F
.text:0040589F loc_40589F:                             ; CODE XREF: sub_4056E0+33↑j
.text:0040589F                 call    sub_405BA0
.text:0040589F sub_4056E0      endp
.text:0040589F
.text:0040589F ; ---------------------------------------------------------------------------
.text:004058A4                 align 10h
.text:004058B0
.text:004058B0 ; =============== S U B R O U T I N E =======================================
.text:004058B0
.text:004058B0
.text:004058B0 sub_4058B0      proc near
.text:004058B0
.text:004058B0 Size            = dword ptr -0Ch
.text:004058B0 var_4           = dword ptr -4
.text:004058B0 arg_0           = dword ptr  4
.text:004058B0 arg_4           = dword ptr  8
.text:004058B0
.text:004058B0                 sub     esp, 0Ch
.text:004058B3                 xor     edx, edx
.text:004058B5                 mov     ecx, [esp+0Ch+arg_4]
.text:004058B9                 mov     [esp+0Ch+var_4], ebx
.text:004058BD                 mov     eax, 0FFFFFFFFh
.text:004058C2                 mov     ebx, [esp+0Ch+arg_0]
.text:004058C6                 div     ecx
.text:004058C8                 cmp     eax, ebx
.text:004058CA                 jb      short loc_4058E9
.text:004058CC                 mov     edx, ebx
.text:004058CE                 imul    edx, ecx
.text:004058D1                 mov     [esp+0Ch+Size], edx ; Size
.text:004058D4                 call    malloc
.text:004058D9                 test    eax, eax
.text:004058DB                 jz      short loc_4058E5
.text:004058DD
.text:004058DD loc_4058DD:                             ; CODE XREF: sub_4058B0+37↓j
.text:004058DD                 mov     ebx, [esp+0Ch+var_4]
.text:004058E1                 add     esp, 0Ch
.text:004058E4                 retn
.text:004058E5 ; ---------------------------------------------------------------------------
.text:004058E5
.text:004058E5 loc_4058E5:                             ; CODE XREF: sub_4058B0+2B↑j
.text:004058E5                 test    ebx, ebx
.text:004058E7                 jz      short loc_4058DD
.text:004058E9
.text:004058E9 loc_4058E9:                             ; CODE XREF: sub_4058B0+1A↑j
.text:004058E9                 call    sub_405BA0
.text:004058E9 sub_4058B0      endp
.text:004058E9
.text:004058E9 ; ---------------------------------------------------------------------------
.text:004058EE                 align 10h
.text:004058F0
.text:004058F0 ; =============== S U B R O U T I N E =======================================
.text:004058F0
.text:004058F0
.text:004058F0 ; int __cdecl sub_4058F0(size_t)
.text:004058F0 sub_4058F0      proc near               ; CODE XREF: .text:00405019↑p
.text:004058F0                                         ; .text:004051F6↑p ...
.text:004058F0
.text:004058F0 Size            = dword ptr -0Ch
.text:004058F0 var_4           = dword ptr -4
.text:004058F0 arg_0           = dword ptr  4
.text:004058F0
.text:004058F0                 sub     esp, 0Ch
.text:004058F3                 mov     [esp+0Ch+var_4], ebx
.text:004058F7                 mov     ebx, [esp+0Ch+arg_0]
.text:004058FB                 mov     [esp+0Ch+Size], ebx ; Size
.text:004058FE                 call    malloc
.text:00405903                 test    eax, eax
.text:00405905                 jz      short loc_405910
.text:00405907
.text:00405907 loc_405907:                             ; CODE XREF: sub_4058F0+22↓j
.text:00405907                 mov     ebx, [esp+0Ch+var_4]
.text:0040590B                 add     esp, 0Ch
.text:0040590E                 retn
.text:0040590E ; ---------------------------------------------------------------------------
.text:0040590F                 align 10h
.text:00405910
.text:00405910 loc_405910:                             ; CODE XREF: sub_4058F0+15↑j
.text:00405910                 test    ebx, ebx
.text:00405912                 jz      short loc_405907
.text:00405914                 call    sub_405BA0
.text:00405914 sub_4058F0      endp
.text:00405914
.text:00405914 ; ---------------------------------------------------------------------------
.text:00405919                 align 10h
.text:00405920                 sub     esp, 1Ch
.text:00405923                 xor     edx, edx
.text:00405925                 mov     eax, 0FFFFFFFFh
.text:0040592A                 mov     [esp+14h], ebx
.text:0040592E                 mov     ecx, [esp+20h]
.text:00405932                 mov     ebx, [esp+28h]
.text:00405936                 mov     [esp+18h], esi
.text:0040593A                 mov     esi, [esp+24h]
.text:0040593E                 div     ebx
.text:00405940                 cmp     eax, esi
.text:00405942                 jb      short loc_405974
.text:00405944                 mov     [esp], ecx
.text:00405947                 mov     edx, esi
.text:00405949                 imul    edx, ebx
.text:0040594C                 mov     [esp+4], edx
.text:00405950                 call    realloc
.text:00405955                 test    eax, eax
.text:00405957                 mov     ecx, eax
.text:00405959                 jz      short loc_405970
.text:0040595B
.text:0040595B loc_40595B:                             ; CODE XREF: .text:00405972↓j
.text:0040595B                 mov     ebx, [esp+14h]
.text:0040595F                 mov     eax, ecx
.text:00405961                 mov     esi, [esp+18h]
.text:00405965                 add     esp, 1Ch
.text:00405968                 retn
.text:00405968 ; ---------------------------------------------------------------------------
.text:00405969                 align 10h
.text:00405970
.text:00405970 loc_405970:                             ; CODE XREF: .text:00405959↑j
.text:00405970                 test    esi, esi
.text:00405972                 jz      short loc_40595B
.text:00405974
.text:00405974 loc_405974:                             ; CODE XREF: .text:00405942↑j
.text:00405974                 call    sub_405BA0
.text:00405974 ; ---------------------------------------------------------------------------
.text:00405979                 align 10h
.text:00405980
.text:00405980 ; =============== S U B R O U T I N E =======================================
.text:00405980
.text:00405980
.text:00405980 ; int __cdecl sub_405980(void *, size_t)
.text:00405980 sub_405980      proc near               ; CODE XREF: sub_4056E0+5B↑p
.text:00405980
.text:00405980 Block           = dword ptr -0Ch
.text:00405980 Size            = dword ptr -8
.text:00405980 var_4           = dword ptr -4
.text:00405980 arg_0           = dword ptr  4
.text:00405980 arg_4           = dword ptr  8
.text:00405980
.text:00405980                 sub     esp, 0Ch
.text:00405983                 mov     edx, [esp+0Ch+arg_0]
.text:00405987                 mov     [esp+0Ch+var_4], ebx
.text:0040598B                 mov     ebx, [esp+0Ch+arg_4]
.text:0040598F                 mov     [esp+0Ch+Block], edx ; Block
.text:00405992                 mov     [esp+0Ch+Size], ebx ; Size
.text:00405996                 call    realloc
.text:0040599B                 test    eax, eax
.text:0040599D                 jz      short loc_4059A7
.text:0040599F
.text:0040599F loc_40599F:                             ; CODE XREF: sub_405980+29↓j
.text:0040599F                 mov     ebx, [esp+0Ch+var_4]
.text:004059A3                 add     esp, 0Ch
.text:004059A6                 retn
.text:004059A7 ; ---------------------------------------------------------------------------
.text:004059A7
.text:004059A7 loc_4059A7:                             ; CODE XREF: sub_405980+1D↑j
.text:004059A7                 test    ebx, ebx
.text:004059A9                 jz      short loc_40599F
.text:004059AB                 call    sub_405BA0
.text:004059AB sub_405980      endp
.text:004059AB
.text:004059B0 ; ---------------------------------------------------------------------------
.text:004059B0                 jmp     sub_405B00
.text:004059B0 ; ---------------------------------------------------------------------------
.text:004059B5                 align 10h
.text:004059C0                 sub     esp, 0Ch
.text:004059C3                 mov     edx, [esp+14h]
.text:004059C7                 mov     dword ptr [esp+8], 1
.text:004059CF                 mov     [esp+4], edx
.text:004059D3                 mov     edx, [esp+10h]
.text:004059D7                 mov     [esp], edx
.text:004059DA                 call    sub_405B00
.text:004059DF                 add     esp, 0Ch
.text:004059E2                 retn
.text:004059E2 ; ---------------------------------------------------------------------------
.text:004059E3                 align 10h
.text:004059F0                 sub     esp, 1Ch
.text:004059F3                 mov     [esp+18h], ebx
.text:004059F7                 mov     ebx, [esp+20h]
.text:004059FB                 mov     [esp], ebx
.text:004059FE                 call    malloc
.text:00405A03                 test    eax, eax
.text:00405A05                 jz      short loc_405A23
.text:00405A07
.text:00405A07 loc_405A07:                             ; CODE XREF: .text:00405A25↓j
.text:00405A07                 mov     [esp+8], ebx
.text:00405A0B                 mov     dword ptr [esp+4], 0
.text:00405A13                 mov     [esp], eax
.text:00405A16                 call    memset
.text:00405A1B                 mov     ebx, [esp+18h]
.text:00405A1F                 add     esp, 1Ch
.text:00405A22                 retn
.text:00405A23 ; ---------------------------------------------------------------------------
.text:00405A23
.text:00405A23 loc_405A23:                             ; CODE XREF: .text:00405A05↑j
.text:00405A23                 test    ebx, ebx
.text:00405A25                 jz      short loc_405A07
.text:00405A27                 call    sub_405BA0
.text:00405A27 ; ---------------------------------------------------------------------------
.text:00405A2C                 align 10h
.text:00405A30                 sub     esp, 0Ch
.text:00405A33                 xor     edx, edx
.text:00405A35                 mov     ecx, [esp+14h]
.text:00405A39                 mov     [esp+8], ebx
.text:00405A3D                 mov     eax, 0FFFFFFFFh
.text:00405A42                 mov     ebx, [esp+10h]
.text:00405A46                 div     ecx
.text:00405A48                 cmp     eax, ebx
.text:00405A4A                 jb      short loc_405A68
.text:00405A4C                 mov     [esp+4], ecx
.text:00405A50                 mov     [esp], ebx
.text:00405A53                 call    calloc
.text:00405A58                 test    eax, eax
.text:00405A5A                 jz      short loc_405A64
.text:00405A5C
.text:00405A5C loc_405A5C:                             ; CODE XREF: .text:00405A66↓j
.text:00405A5C                 mov     ebx, [esp+8]
.text:00405A60                 add     esp, 0Ch
.text:00405A63                 retn
.text:00405A64 ; ---------------------------------------------------------------------------
.text:00405A64
.text:00405A64 loc_405A64:                             ; CODE XREF: .text:00405A5A↑j
.text:00405A64                 test    ebx, ebx
.text:00405A66                 jz      short loc_405A5C
.text:00405A68
.text:00405A68 loc_405A68:                             ; CODE XREF: .text:00405A4A↑j
.text:00405A68                 call    sub_405BA0
.text:00405A68 ; ---------------------------------------------------------------------------
.text:00405A6D                 align 10h
.text:00405A70                 sub     esp, 1Ch
.text:00405A73                 mov     [esp+18h], ebx
.text:00405A77                 mov     ebx, [esp+24h]
.text:00405A7B                 mov     [esp], ebx
.text:00405A7E                 call    malloc
.text:00405A83                 test    eax, eax
.text:00405A85                 mov     edx, eax
.text:00405A87                 jz      short loc_405AA5
.text:00405A89
.text:00405A89 loc_405A89:                             ; CODE XREF: .text:00405AA7↓j
.text:00405A89                 mov     [esp+8], ebx
.text:00405A8D                 mov     ecx, [esp+20h]
.text:00405A91                 mov     [esp], edx
.text:00405A94                 mov     [esp+4], ecx
.text:00405A98                 call    memcpy
.text:00405A9D                 mov     ebx, [esp+18h]
.text:00405AA1                 add     esp, 1Ch
.text:00405AA4                 retn
.text:00405AA5 ; ---------------------------------------------------------------------------
.text:00405AA5
.text:00405AA5 loc_405AA5:                             ; CODE XREF: .text:00405A87↑j
.text:00405AA5                 test    ebx, ebx
.text:00405AA7                 jz      short loc_405A89
.text:00405AA9                 call    sub_405BA0
.text:00405AA9 ; ---------------------------------------------------------------------------
.text:00405AAE                 align 10h
.text:00405AB0                 sub     esp, 1Ch
.text:00405AB3                 mov     [esp+18h], esi
.text:00405AB7                 mov     esi, [esp+20h]
.text:00405ABB                 mov     [esp+14h], ebx
.text:00405ABF                 mov     [esp], esi
.text:00405AC2                 call    strlen
.text:00405AC7                 lea     ebx, [eax+1]
.text:00405ACA                 mov     [esp], ebx
.text:00405ACD                 call    malloc
.text:00405AD2                 test    eax, eax
.text:00405AD4                 jz      short loc_405AF2
.text:00405AD6
.text:00405AD6 loc_405AD6:                             ; CODE XREF: .text:00405AF4↓j
.text:00405AD6                 mov     [esp+8], ebx
.text:00405ADA                 mov     [esp+4], esi
.text:00405ADE                 mov     [esp], eax
.text:00405AE1                 call    memcpy
.text:00405AE6                 mov     ebx, [esp+14h]
.text:00405AEA                 mov     esi, [esp+18h]
.text:00405AEE                 add     esp, 1Ch
.text:00405AF1                 retn
.text:00405AF2 ; ---------------------------------------------------------------------------
.text:00405AF2
.text:00405AF2 loc_405AF2:                             ; CODE XREF: .text:00405AD4↑j
.text:00405AF2                 test    ebx, ebx
.text:00405AF4                 jz      short loc_405AD6
.text:00405AF6                 call    sub_405BA0
.text:00405AF6 ; ---------------------------------------------------------------------------
.text:00405AFB                 align 10h
.text:00405B00
.text:00405B00 ; =============== S U B R O U T I N E =======================================
.text:00405B00
.text:00405B00
.text:00405B00 ; int __cdecl sub_405B00(void *, int, int)
.text:00405B00 sub_405B00      proc near               ; CODE XREF: .text:004059B0↑j
.text:00405B00                                         ; .text:004059DA↑p
.text:00405B00
.text:00405B00 Block           = dword ptr -1Ch
.text:00405B00 Size            = dword ptr -18h
.text:00405B00 var_C           = dword ptr -0Ch
.text:00405B00 var_8           = dword ptr -8
.text:00405B00 var_4           = dword ptr -4
.text:00405B00 arg_0           = dword ptr  4
.text:00405B00 arg_4           = dword ptr  8
.text:00405B00 arg_8           = dword ptr  0Ch
.text:00405B00
.text:00405B00                 sub     esp, 1Ch
.text:00405B03                 mov     [esp+1Ch+var_8], esi
.text:00405B07                 mov     esi, [esp+1Ch+arg_0]
.text:00405B0B                 mov     [esp+1Ch+var_4], edi
.text:00405B0F                 mov     edi, [esp+1Ch+arg_4]
.text:00405B13                 test    esi, esi
.text:00405B15                 mov     [esp+1Ch+var_C], ebx
.text:00405B19                 mov     ecx, [edi]
.text:00405B1B                 mov     ebx, [esp+1Ch+arg_8]
.text:00405B1F                 jz      short loc_405B60
.text:00405B21                 xor     edx, edx
.text:00405B23                 mov     eax, 7FFFFFFFh
.text:00405B28                 div     ebx
.text:00405B2A                 cmp     eax, ecx
.text:00405B2C                 jb      short loc_405B59
.text:00405B2E                 add     ecx, ecx
.text:00405B30
.text:00405B30 loc_405B30:                             ; CODE XREF: sub_405B00+62↓j
.text:00405B30                                         ; sub_405B00+71↓j ...
.text:00405B30                 mov     [edi], ecx
.text:00405B32                 imul    ebx, ecx
.text:00405B35                 mov     [esp+1Ch+Block], esi ; Block
.text:00405B38                 mov     [esp+1Ch+Size], ebx ; Size
.text:00405B3C                 call    realloc
.text:00405B41                 test    eax, eax
.text:00405B43                 jz      short loc_405B55
.text:00405B45
.text:00405B45 loc_405B45:                             ; CODE XREF: sub_405B00+57↓j
.text:00405B45                 mov     ebx, [esp+1Ch+var_C]
.text:00405B49                 mov     esi, [esp+1Ch+var_8]
.text:00405B4D                 mov     edi, [esp+1Ch+var_4]
.text:00405B51                 add     esp, 1Ch
.text:00405B54                 retn
.text:00405B55 ; ---------------------------------------------------------------------------
.text:00405B55
.text:00405B55 loc_405B55:                             ; CODE XREF: sub_405B00+43↑j
.text:00405B55                 test    ebx, ebx
.text:00405B57                 jz      short loc_405B45
.text:00405B59
.text:00405B59 loc_405B59:                             ; CODE XREF: sub_405B00+2C↑j
.text:00405B59                 call    sub_405BA0
.text:00405B59 ; ---------------------------------------------------------------------------
.text:00405B5E                 align 10h
.text:00405B60
.text:00405B60 loc_405B60:                             ; CODE XREF: sub_405B00+1F↑j
.text:00405B60                 test    ecx, ecx
.text:00405B62                 jnz     short loc_405B30
.text:00405B64                 xor     edx, edx
.text:00405B66                 mov     eax, 40h ; '@'
.text:00405B6B                 div     ebx
.text:00405B6D                 test    eax, eax
.text:00405B6F                 mov     ecx, eax
.text:00405B71                 jnz     short loc_405B30
.text:00405B73                 mov     ecx, 1
.text:00405B78                 jmp     short loc_405B30
.text:00405B78 sub_405B00      endp
.text:00405B78
.text:00405B78 ; ---------------------------------------------------------------------------
.text:00405B7A                 align 10h
.text:00405B80 aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: sub_405BA0+3↓o
.text:00405B91 ; const char aS_0[]
.text:00405B91 aS_0            db '%s',0               ; DATA XREF: sub_405BA0+10↓o
.text:00405B94                 align 10h
.text:00405BA0
.text:00405BA0 ; =============== S U B R O U T I N E =======================================
.text:00405BA0
.text:00405BA0 ; Attributes: noreturn
.text:00405BA0
.text:00405BA0 sub_405BA0      proc near               ; CODE XREF: sub_4056E0:loc_40589F↑p
.text:00405BA0                                         ; sub_4058B0:loc_4058E9↑p ...
.text:00405BA0
.text:00405BA0 Code            = dword ptr -1Ch
.text:00405BA0 ErrorMessage    = dword ptr -18h
.text:00405BA0 var_14          = dword ptr -14h
.text:00405BA0 var_10          = byte ptr -10h
.text:00405BA0
.text:00405BA0                 sub     esp, 1Ch
.text:00405BA3                 mov     [esp+1Ch+Code], offset aMemoryExhauste ; "memory exhausted"
.text:00405BAA                 call    ds:__imp_libintl_gettext
.text:00405BB0                 mov     [esp+1Ch+var_14], offset aS_0 ; "%s"
.text:00405BB8                 mov     edx, Code
.text:00405BBE                 mov     [esp+1Ch+ErrorMessage], 0 ; ErrorMessage
.text:00405BC6                 mov     dword ptr [esp+1Ch+var_10], eax ; char
.text:00405BCA                 mov     [esp+1Ch+Code], edx ; Code
.text:00405BCD                 call    sub_405C30
.text:00405BD2                 call    abort
.text:00405BD2 sub_405BA0      endp
.text:00405BD2
.text:00405BD2 ; ---------------------------------------------------------------------------
.text:00405BD7                 align 10h
.text:00405BE0
.text:00405BE0 ; =============== S U B R O U T I N E =======================================
.text:00405BE0
.text:00405BE0 ; Attributes: thunk
.text:00405BE0
.text:00405BE0 libintl_gettext proc near
.text:00405BE0                 jmp     ds:__imp_libintl_gettext
.text:00405BE0 libintl_gettext endp
.text:00405BE0
.text:00405BE0 ; ---------------------------------------------------------------------------
.text:00405BE6                 align 10h
.text:00405BF0                 jmp     ds:libintl_bindtextdomain
.text:00405BF0 ; ---------------------------------------------------------------------------
.text:00405BF6                 align 10h
.text:00405C00                 jmp     ds:libintl_textdomain
.text:00405C00 ; ---------------------------------------------------------------------------
.text:00405C06                 align 10h
.text:00405C10 ; const char aS_1[]
.text:00405C10 aS_1            db ': %s',0             ; DATA XREF: sub_405C30+B8↓o
.text:00405C10                                         ; sub_405D34+122↓o
.text:00405C15 aUnknownSystemE db 'Unknown system error',0
.text:00405C15                                         ; DATA XREF: sub_405C30:loc_405CFD↓o
.text:00405C15                                         ; sub_405D34:loc_405E6E↓o
.text:00405C2A ; const char aS_2[]
.text:00405C2A aS_2            db '%s: ',0             ; DATA XREF: sub_405C30:loc_405D04↓o
.text:00405C2F                 align 10h
.text:00405C30
.text:00405C30 ; =============== S U B R O U T I N E =======================================
.text:00405C30
.text:00405C30
.text:00405C30 ; int __cdecl sub_405C30(int Code, int ErrorMessage, char *, char)
.text:00405C30 sub_405C30      proc near               ; CODE XREF: sub_4043D0+86↑p
.text:00405C30                                         ; sub_4043D0+AF↑p ...
.text:00405C30
.text:00405C30 Stream          = dword ptr -1Ch
.text:00405C30 Format          = dword ptr -18h
.text:00405C30 ArgList         = dword ptr -14h
.text:00405C30 Code            = dword ptr  4
.text:00405C30 ErrorMessage    = dword ptr  8
.text:00405C30 arg_8           = dword ptr  0Ch
.text:00405C30 arg_C           = byte ptr  10h
.text:00405C30
.text:00405C30                 push    esi
.text:00405C31                 push    ebx
.text:00405C32                 sub     esp, 14h
.text:00405C35                 mov     edx, ds:_iob
.text:00405C3B                 mov     esi, [esp+1Ch+Code]
.text:00405C3F                 mov     ebx, [esp+1Ch+ErrorMessage]
.text:00405C43                 add     edx, 20h ; ' '
.text:00405C46                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00405C49                 call    fflush
.text:00405C4E                 mov     eax, ds:dword_410500
.text:00405C53                 test    eax, eax
.text:00405C55                 jz      loc_405D04
.text:00405C5B                 call    eax ; dword_410500
.text:00405C5D
.text:00405C5D loc_405C5D:                             ; CODE XREF: sub_405C30+F7↓j
.text:00405C5D                 lea     edx, [esp+1Ch+arg_C]
.text:00405C61                 mov     ecx, [esp+1Ch+arg_8]
.text:00405C65                 mov     [esp+1Ch+ArgList], edx ; ArgList
.text:00405C69                 mov     edx, ds:_iob
.text:00405C6F                 mov     [esp+1Ch+Format], ecx ; Format
.text:00405C73                 add     edx, 40h ; '@'
.text:00405C76                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00405C79                 call    vfprintf
.text:00405C7E                 inc     ds:dword_410510
.text:00405C84                 test    ebx, ebx
.text:00405C86                 jnz     short loc_405CD2
.text:00405C88
.text:00405C88 loc_405C88:                             ; CODE XREF: sub_405C30+CB↓j
.text:00405C88                 mov     edx, ds:_iob
.text:00405C8E                 lea     ecx, [edx+40h]
.text:00405C91                 mov     ebx, [ecx+4]
.text:00405C94                 dec     ebx
.text:00405C95                 test    ebx, ebx
.text:00405C97                 mov     [ecx+4], ebx
.text:00405C9A                 js      short loc_405CC0
.text:00405C9C                 mov     ecx, [edx+40h]
.text:00405C9F                 mov     byte ptr [ecx], 0Ah
.text:00405CA2                 inc     dword ptr [edx+40h]
.text:00405CA5
.text:00405CA5 loc_405CA5:                             ; CODE XREF: sub_405C30+A0↓j
.text:00405CA5                 mov     edx, ds:_iob
.text:00405CAB                 add     edx, 40h ; '@'
.text:00405CAE                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00405CB1                 call    fflush
.text:00405CB6                 test    esi, esi
.text:00405CB8                 jnz     short loc_405D2C
.text:00405CBA                 add     esp, 14h
.text:00405CBD                 pop     ebx
.text:00405CBE                 pop     esi
.text:00405CBF                 retn
.text:00405CC0 ; ---------------------------------------------------------------------------
.text:00405CC0
.text:00405CC0 loc_405CC0:                             ; CODE XREF: sub_405C30+6A↑j
.text:00405CC0                 mov     [esp+1Ch+Format], ecx ; File
.text:00405CC4                 mov     [esp+1Ch+Stream], 0Ah ; Ch
.text:00405CCB                 call    _flsbuf
.text:00405CD0                 jmp     short loc_405CA5
.text:00405CD2 ; ---------------------------------------------------------------------------
.text:00405CD2
.text:00405CD2 loc_405CD2:                             ; CODE XREF: sub_405C30+56↑j
.text:00405CD2                 mov     [esp+1Ch+Stream], ebx ; ErrorMessage
.text:00405CD5                 call    strerror
.text:00405CDA                 test    eax, eax
.text:00405CDC                 jz      short loc_405CFD
.text:00405CDE
.text:00405CDE loc_405CDE:                             ; CODE XREF: sub_405C30+D2↓j
.text:00405CDE                 mov     [esp+1Ch+ArgList], eax
.text:00405CE2                 mov     ebx, ds:_iob
.text:00405CE8                 mov     [esp+1Ch+Format], offset aS_1 ; ": %s"
.text:00405CF0                 add     ebx, 40h ; '@'
.text:00405CF3                 mov     [esp+1Ch+Stream], ebx ; Stream
.text:00405CF6                 call    fprintf
.text:00405CFB                 jmp     short loc_405C88
.text:00405CFD ; ---------------------------------------------------------------------------
.text:00405CFD
.text:00405CFD loc_405CFD:                             ; CODE XREF: sub_405C30+AC↑j
.text:00405CFD                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:00405D02                 jmp     short loc_405CDE
.text:00405D04 ; ---------------------------------------------------------------------------
.text:00405D04
.text:00405D04 loc_405D04:                             ; CODE XREF: sub_405C30+25↑j
.text:00405D04                 mov     [esp+1Ch+Format], offset aS_2 ; "%s: "
.text:00405D0C                 mov     edx, ds:_iob
.text:00405D12                 mov     ecx, ds:dword_4104E0
.text:00405D18                 add     edx, 40h ; '@'
.text:00405D1B                 mov     [esp+1Ch+ArgList], ecx
.text:00405D1F                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00405D22                 call    fprintf
.text:00405D27                 jmp     loc_405C5D
.text:00405D2C ; ---------------------------------------------------------------------------
.text:00405D2C
.text:00405D2C loc_405D2C:                             ; CODE XREF: sub_405C30+88↑j
.text:00405D2C                 mov     [esp+1Ch+Stream], esi ; Code
.text:00405D2F                 call    exit
.text:00405D2F sub_405C30      endp
.text:00405D2F
.text:00405D34
.text:00405D34 ; =============== S U B R O U T I N E =======================================
.text:00405D34
.text:00405D34
.text:00405D34 ; int __cdecl sub_405D34(int, int Code, int ErrorMessage, char *Str2, int, char *, char)
.text:00405D34 sub_405D34      proc near               ; DATA XREF: sub_405D34+77↓o
.text:00405D34
.text:00405D34 Stream          = dword ptr -28h
.text:00405D34 Format          = dword ptr -24h
.text:00405D34 ArgList         = dword ptr -20h
.text:00405D34 var_1C          = dword ptr -1Ch
.text:00405D34 Code            = dword ptr  8
.text:00405D34 ErrorMessage    = dword ptr  0Ch
.text:00405D34 Str2            = dword ptr  10h
.text:00405D34 arg_10          = dword ptr  14h
.text:00405D34 arg_14          = dword ptr  18h
.text:00405D34 arg_18          = byte ptr  1Ch
.text:00405D34
.text:00405D34                 and     eax, 64253A73h
.text:00405D39                 cmp     ah, [eax]
.text:00405D3B
.text:00405D3B loc_405D3B:                             ; DATA XREF: sub_405D34:loc_405E75↓o
.text:00405D3B                 add     ds:55003A73h, ah
.text:00405D41                 push    edi
.text:00405D42                 push    esi
.text:00405D43                 push    ebx
.text:00405D44                 sub     esp, 1Ch
.text:00405D47                 mov     edx, ds:dword_410540
.text:00405D4D                 mov     ebp, [esp+28h+Code]
.text:00405D51                 mov     edi, [esp+28h+ErrorMessage]
.text:00405D55                 test    edx, edx
.text:00405D57                 mov     ebx, [esp+28h+Str2]
.text:00405D5B                 mov     esi, [esp+28h+arg_10]
.text:00405D5F                 jz      short loc_405D79
.text:00405D61                 cmp     ds:dword_410180, esi
.text:00405D67                 jz      loc_405EA0
.text:00405D6D
.text:00405D6D loc_405D6D:                             ; CODE XREF: sub_405D34+18D↓j
.text:00405D6D                 mov     ds:Str1, ebx
.text:00405D73                 mov     ds:dword_410180, esi
.text:00405D79
.text:00405D79 loc_405D79:                             ; CODE XREF: sub_405D34+2B↑j
.text:00405D79                 mov     edx, ds:_iob
.text:00405D7F                 add     edx, 20h ; ' '
.text:00405D82                 mov     [esp+28h+Stream], edx ; Stream
.text:00405D85                 call    fflush
.text:00405D8A                 mov     eax, ds:dword_410500
.text:00405D8F                 test    eax, eax
.text:00405D91                 jz      loc_405E75
.text:00405D97                 call    eax ; dword_410500
.text:00405D99
.text:00405D99 loc_405D99:                             ; CODE XREF: sub_405D34+164↓j
.text:00405D99                 test    ebx, ebx
.text:00405D9B                 jz      short loc_405DBE
.text:00405D9D                 mov     [esp+28h+ArgList], ebx
.text:00405DA1                 mov     ebx, ds:_iob
.text:00405DA7                 mov     [esp+28h+var_1C], esi
.text:00405DAB                 mov     [esp+28h+Format], offset sub_405D34 ; Format
.text:00405DB3                 add     ebx, 40h ; '@'
.text:00405DB6                 mov     [esp+28h+Stream], ebx ; Stream
.text:00405DB9                 call    fprintf
.text:00405DBE
.text:00405DBE loc_405DBE:                             ; CODE XREF: sub_405D34+67↑j
.text:00405DBE                 mov     esi, ds:_iob
.text:00405DC4                 lea     edx, [esp+28h+arg_18]
.text:00405DC8                 mov     ecx, [esp+28h+arg_14]
.text:00405DCC                 mov     [esp+28h+ArgList], edx ; ArgList
.text:00405DD0                 add     esi, 40h ; '@'
.text:00405DD3                 mov     [esp+28h+Format], ecx ; Format
.text:00405DD7                 mov     [esp+28h+Stream], esi ; Stream
.text:00405DDA                 call    vfprintf
.text:00405DDF                 inc     ds:dword_410510
.text:00405DE5                 test    edi, edi
.text:00405DE7                 jnz     short loc_405E40
.text:00405DE9
.text:00405DE9 loc_405DE9:                             ; CODE XREF: sub_405D34+135↓j
.text:00405DE9                 mov     edx, ds:_iob
.text:00405DEF                 lea     ecx, [edx+40h]
.text:00405DF2                 mov     ebx, [ecx+4]
.text:00405DF5                 dec     ebx
.text:00405DF6                 test    ebx, ebx
.text:00405DF8                 mov     [ecx+4], ebx
.text:00405DFB                 js      short loc_405E27
.text:00405DFD                 mov     esi, [edx+40h]
.text:00405E00                 mov     byte ptr [esi], 0Ah
.text:00405E03                 inc     dword ptr [edx+40h]
.text:00405E06
.text:00405E06 loc_405E06:                             ; CODE XREF: sub_405D34+103↓j
.text:00405E06                 mov     ecx, ds:_iob
.text:00405E0C                 add     ecx, 40h ; '@'
.text:00405E0F                 mov     [esp+28h+Stream], ecx ; Stream
.text:00405E12                 call    fflush
.text:00405E17                 test    ebp, ebp
.text:00405E19                 jnz     loc_405EC6
.text:00405E1F
.text:00405E1F loc_405E1F:                             ; CODE XREF: sub_405D34+173↓j
.text:00405E1F                                         ; sub_405D34+187↓j
.text:00405E1F                 add     esp, 1Ch
.text:00405E22                 pop     ebx
.text:00405E23                 pop     esi
.text:00405E24                 pop     edi
.text:00405E25                 pop     ebp
.text:00405E26                 retn
.text:00405E27 ; ---------------------------------------------------------------------------
.text:00405E27
.text:00405E27 loc_405E27:                             ; CODE XREF: sub_405D34+C7↑j
.text:00405E27                 mov     [esp+28h+Format], ecx ; File
.text:00405E2B                 mov     [esp+28h+Stream], 0Ah ; Ch
.text:00405E32                 call    _flsbuf
.text:00405E37                 jmp     short loc_405E06
.text:00405E37 ; ---------------------------------------------------------------------------
.text:00405E39                 align 10h
.text:00405E40
.text:00405E40 loc_405E40:                             ; CODE XREF: sub_405D34+B3↑j
.text:00405E40                 mov     [esp+28h+Stream], edi ; ErrorMessage
.text:00405E43                 call    strerror
.text:00405E48                 test    eax, eax
.text:00405E4A                 jz      short loc_405E6E
.text:00405E4C
.text:00405E4C loc_405E4C:                             ; CODE XREF: sub_405D34+13F↓j
.text:00405E4C                 mov     [esp+28h+ArgList], eax
.text:00405E50                 mov     edi, ds:_iob
.text:00405E56                 mov     [esp+28h+Format], offset aS_1 ; ": %s"
.text:00405E5E                 add     edi, 40h ; '@'
.text:00405E61                 mov     [esp+28h+Stream], edi ; Stream
.text:00405E64                 call    fprintf
.text:00405E69                 jmp     loc_405DE9
.text:00405E6E ; ---------------------------------------------------------------------------
.text:00405E6E
.text:00405E6E loc_405E6E:                             ; CODE XREF: sub_405D34+116↑j
.text:00405E6E                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:00405E73                 jmp     short loc_405E4C
.text:00405E75 ; ---------------------------------------------------------------------------
.text:00405E75
.text:00405E75 loc_405E75:                             ; CODE XREF: sub_405D34+5D↑j
.text:00405E75                 mov     [esp+28h+Format], (offset loc_405D3B+1) ; Format
.text:00405E7D                 mov     ecx, ds:_iob
.text:00405E83                 mov     edx, ds:dword_4104E0
.text:00405E89                 add     ecx, 40h ; '@'
.text:00405E8C                 mov     [esp+28h+ArgList], edx
.text:00405E90                 mov     [esp+28h+Stream], ecx ; Stream
.text:00405E93                 call    fprintf
.text:00405E98                 jmp     loc_405D99
.text:00405E98 ; ---------------------------------------------------------------------------
.text:00405E9D                 align 10h
.text:00405EA0
.text:00405EA0 loc_405EA0:                             ; CODE XREF: sub_405D34+33↑j
.text:00405EA0                 mov     eax, ds:Str1
.text:00405EA5                 cmp     ebx, eax
.text:00405EA7                 jz      loc_405E1F
.text:00405EAD                 mov     [esp+28h+Format], ebx ; Str2
.text:00405EB1                 mov     [esp+28h+Stream], eax ; Str1
.text:00405EB4                 call    strcmp
.text:00405EB9                 test    eax, eax
.text:00405EBB                 jz      loc_405E1F
.text:00405EC1                 jmp     loc_405D6D
.text:00405EC6 ; ---------------------------------------------------------------------------
.text:00405EC6
.text:00405EC6 loc_405EC6:                             ; CODE XREF: sub_405D34+E5↑j
.text:00405EC6                 mov     [esp+28h+Stream], ebp ; Code
.text:00405EC9                 call    exit
.text:00405EC9 sub_405D34      endp ; sp-analysis failed
.text:00405EC9
.text:00405EC9 ; ---------------------------------------------------------------------------
.text:00405ECE                 align 10h
.text:00405ED0
.text:00405ED0 ; =============== S U B R O U T I N E =======================================
.text:00405ED0
.text:00405ED0
.text:00405ED0 ; int __cdecl sub_405ED0(LPCSTR, int)
.text:00405ED0 sub_405ED0      proc near               ; CODE XREF: sub_401DB0+5A2↑p
.text:00405ED0
.text:00405ED0 lpFileName      = dword ptr -7Ch
.text:00405ED0 var_78          = dword ptr -78h
.text:00405ED0 var_74          = dword ptr -74h
.text:00405ED0 var_6C          = dword ptr -6Ch
.text:00405ED0 var_50          = dword ptr -50h
.text:00405ED0 var_4C          = dword ptr -4Ch
.text:00405ED0 var_4           = dword ptr -4
.text:00405ED0 arg_0           = dword ptr  4
.text:00405ED0 arg_4           = dword ptr  8
.text:00405ED0
.text:00405ED0                 sub     esp, 7Ch
.text:00405ED3                 mov     ecx, ds:dword_4101C0
.text:00405ED9                 mov     [esp+7Ch+var_4], ebx
.text:00405EDD                 mov     edx, [esp+7Ch+arg_0]
.text:00405EE4                 mov     ebx, [esp+7Ch+arg_4]
.text:00405EEB                 test    ecx, ecx
.text:00405EED                 jnz     short loc_405F07
.text:00405EEF                 mov     [esp+7Ch+lpFileName], edx ; lpFileName
.text:00405EF2                 mov     [esp+7Ch+var_78], ebx ; int
.text:00405EF6                 call    sub_406220
.text:00405EFB                 mov     edx, eax
.text:00405EFD
.text:00405EFD loc_405EFD:                             ; CODE XREF: sub_405ED0+56↓j
.text:00405EFD                                         ; sub_405ED0+82↓j ...
.text:00405EFD                 mov     ebx, [esp+7Ch+var_4]
.text:00405F01                 mov     eax, edx
.text:00405F03                 add     esp, 7Ch
.text:00405F06                 retn
.text:00405F07 ; ---------------------------------------------------------------------------
.text:00405F07
.text:00405F07 loc_405F07:                             ; CODE XREF: sub_405ED0+1D↑j
.text:00405F07                 mov     [esp+7Ch+var_78], edx ; char *
.text:00405F0B                 lea     ecx, [esp+7Ch+var_6C]
.text:00405F0F                 mov     [esp+7Ch+var_74], ecx ; int
.text:00405F13                 mov     [esp+7Ch+lpFileName], 0 ; LPCSTR
.text:00405F1A                 call    sub_406090
.text:00405F1F                 test    eax, eax
.text:00405F21                 mov     edx, 0FFFFFFFFh
.text:00405F26                 jnz     short loc_405EFD
.text:00405F28                 and     ebx, 7
.text:00405F2B                 jz      short loc_405F50
.text:00405F2D                 mov     edx, ds:dword_4101B0
.text:00405F33                 test    edx, edx
.text:00405F35                 jz      loc_405FB9
.text:00405F3B
.text:00405F3B loc_405F3B:                             ; CODE XREF: sub_405ED0+108↓j
.text:00405F3B                 mov     eax, ds:dword_410190
.text:00405F40                 test    eax, eax
.text:00405F42                 jnz     short loc_405F54
.text:00405F44                 test    bl, 1
.text:00405F47                 jz      short loc_405F50
.text:00405F49                 test    byte ptr [esp+7Ch+var_6C], 49h
.text:00405F4E                 jz      short loc_405F54
.text:00405F50
.text:00405F50 loc_405F50:                             ; CODE XREF: sub_405ED0+5B↑j
.text:00405F50                                         ; sub_405ED0+77↑j
.text:00405F50                 xor     edx, edx
.text:00405F52                 jmp     short loc_405EFD
.text:00405F54 ; ---------------------------------------------------------------------------
.text:00405F54
.text:00405F54 loc_405F54:                             ; CODE XREF: sub_405ED0+72↑j
.text:00405F54                                         ; sub_405ED0+7E↑j
.text:00405F54                 cmp     eax, [esp+7Ch+var_50]
.text:00405F58                 jz      short loc_405FA9
.text:00405F5A                 mov     eax, [esp+7Ch+var_4C]
.text:00405F5E                 cmp     ds:dword_4101A0, eax
.text:00405F64                 jz      short loc_405F72
.text:00405F66                 mov     [esp+7Ch+lpFileName], eax
.text:00405F69                 call    sub_4061C0
.text:00405F6E                 test    eax, eax
.text:00405F70                 jz      short loc_405FA1
.text:00405F72
.text:00405F72 loc_405F72:                             ; CODE XREF: sub_405ED0+94↑j
.text:00405F72                 mov     ecx, [esp+7Ch+var_6C]
.text:00405F76                 lea     eax, ds:0[ebx*8]
.text:00405F7D                 and     eax, ecx
.text:00405F7F                 shr     eax, 3
.text:00405F82
.text:00405F82 loc_405F82:                             ; CODE XREF: sub_405ED0+D7↓j
.text:00405F82                                         ; sub_405ED0+E7↓j
.text:00405F82                 xor     edx, edx
.text:00405F84                 cmp     eax, ebx
.text:00405F86                 jz      loc_405EFD
.text:00405F8C                 call    _errno
.text:00405F91                 mov     dword ptr [eax], 0Dh
.text:00405F97                 mov     edx, 0FFFFFFFFh
.text:00405F9C                 jmp     loc_405EFD
.text:00405FA1 ; ---------------------------------------------------------------------------
.text:00405FA1
.text:00405FA1 loc_405FA1:                             ; CODE XREF: sub_405ED0+A0↑j
.text:00405FA1                 mov     eax, [esp+7Ch+var_6C]
.text:00405FA5                 and     eax, ebx
.text:00405FA7                 jmp     short loc_405F82
.text:00405FA9 ; ---------------------------------------------------------------------------
.text:00405FA9
.text:00405FA9 loc_405FA9:                             ; CODE XREF: sub_405ED0+88↑j
.text:00405FA9                 mov     edx, [esp+7Ch+var_6C]
.text:00405FAD                 mov     eax, ebx
.text:00405FAF                 shl     eax, 6
.text:00405FB2                 and     eax, edx
.text:00405FB4                 shr     eax, 6
.text:00405FB7                 jmp     short loc_405F82
.text:00405FB9 ; ---------------------------------------------------------------------------
.text:00405FB9
.text:00405FB9 loc_405FB9:                             ; CODE XREF: sub_405ED0+65↑j
.text:00405FB9                 mov     ecx, 1
.text:00405FBE                 mov     ds:dword_4101B0, ecx
.text:00405FC4                 call    sub_406160
.text:00405FC9                 mov     ds:dword_410190, eax
.text:00405FCE                 call    sub_406150
.text:00405FD3                 mov     ds:dword_4101A0, eax
.text:00405FD8                 jmp     loc_405F3B
.text:00405FD8 sub_405ED0      endp
.text:00405FD8
.text:00405FD8 ; ---------------------------------------------------------------------------
.text:00405FDD                 align 10h
.text:00405FE0
.text:00405FE0 ; =============== S U B R O U T I N E =======================================
.text:00405FE0
.text:00405FE0
.text:00405FE0 sub_405FE0      proc near               ; CODE XREF: sub_401DB0+490↑p
.text:00405FE0
.text:00405FE0 var_C           = dword ptr -0Ch
.text:00405FE0 var_8           = dword ptr -8
.text:00405FE0 var_4           = dword ptr -4
.text:00405FE0 arg_0           = dword ptr  4
.text:00405FE0 arg_4           = dword ptr  8
.text:00405FE0
.text:00405FE0                 sub     esp, 0Ch
.text:00405FE3                 mov     edx, [esp+0Ch+arg_4]
.text:00405FE7                 mov     [esp+0Ch+var_C], 0 ; LPCSTR
.text:00405FEE                 mov     [esp+0Ch+var_4], edx ; int
.text:00405FF2                 mov     edx, [esp+0Ch+arg_0]
.text:00405FF6                 mov     [esp+0Ch+var_8], edx ; int
.text:00405FFA                 call    sub_406010
.text:00405FFF                 add     esp, 0Ch
.text:00406002                 retn
.text:00406002 sub_405FE0      endp
.text:00406002
.text:00406002 ; ---------------------------------------------------------------------------
.text:00406003                 align 10h
.text:00406010
.text:00406010 ; =============== S U B R O U T I N E =======================================
.text:00406010
.text:00406010
.text:00406010 ; int __cdecl sub_406010(LPCSTR, int, int)
.text:00406010 sub_406010      proc near               ; CODE XREF: sub_405FE0+1A↑p
.text:00406010                                         ; sub_406090+42↓p ...
.text:00406010
.text:00406010 lpFileName      = dword ptr -2Ch
.text:00406010 dwDesiredAccess = dword ptr -28h
.text:00406010 dwShareMode     = dword ptr -24h
.text:00406010 lpSecurityAttributes= dword ptr -20h
.text:00406010 dwCreationDisposition= dword ptr -1Ch
.text:00406010 dwFlagsAndAttributes= dword ptr -18h
.text:00406010 hTemplateFile   = dword ptr -14h
.text:00406010 var_10          = dword ptr -10h
.text:00406010 var_C           = dword ptr -0Ch
.text:00406010 var_8           = dword ptr -8
.text:00406010 var_4           = dword ptr -4
.text:00406010 arg_0           = dword ptr  4
.text:00406010 arg_4           = dword ptr  8
.text:00406010 arg_8           = dword ptr  0Ch
.text:00406010
.text:00406010 ; FUNCTION CHUNK AT .text:00407CE0 SIZE 0000013A BYTES
.text:00406010
.text:00406010                 sub     esp, 0Ch
.text:00406013                 mov     ecx, [esp+0Ch+arg_0]
.text:00406017                 mov     edx, [esp+0Ch+arg_4]
.text:0040601B                 mov     eax, [esp+0Ch+arg_8]
.text:0040601F                 test    ecx, ecx
.text:00406021                 jnz     short loc_406040
.text:00406023                 test    edx, edx
.text:00406025                 jz      short loc_406040
.text:00406027                 test    eax, eax
.text:00406029                 jz      short loc_406040
.text:0040602B                 mov     [esp+0Ch+arg_4], eax
.text:0040602F                 mov     [esp+0Ch+arg_0], edx
.text:00406033                 add     esp, 0Ch
.text:00406036                 jmp     loc_407CE0
.text:00406036 ; ---------------------------------------------------------------------------
.text:0040603B                 align 10h
.text:00406040
.text:00406040 loc_406040:                             ; CODE XREF: sub_406010+11↑j
.text:00406040                                         ; sub_406010+15↑j ...
.text:00406040                 call    _errno
.text:00406045                 mov     dword ptr [eax], 16h
.text:0040604B                 mov     eax, 0FFFFFFFFh
.text:00406050                 add     esp, 0Ch
.text:00406053                 retn
.text:00406053 sub_406010      endp
.text:00406053
.text:00406053 ; ---------------------------------------------------------------------------
.text:00406054                 align 10h
.text:00406060
.text:00406060 ; =============== S U B R O U T I N E =======================================
.text:00406060
.text:00406060
.text:00406060 ; int __cdecl sub_406060(char *, int)
.text:00406060 sub_406060      proc near               ; CODE XREF: sub_4013A0+441↑p
.text:00406060                                         ; sub_4013A0+46C↑p ...
.text:00406060
.text:00406060 var_C           = dword ptr -0Ch
.text:00406060 var_8           = dword ptr -8
.text:00406060 var_4           = dword ptr -4
.text:00406060 arg_0           = dword ptr  4
.text:00406060 arg_4           = dword ptr  8
.text:00406060
.text:00406060                 sub     esp, 0Ch
.text:00406063                 mov     edx, [esp+0Ch+arg_4]
.text:00406067                 mov     [esp+0Ch+var_C], 0 ; LPCSTR
.text:0040606E                 mov     [esp+0Ch+var_4], edx ; int
.text:00406072                 mov     edx, [esp+0Ch+arg_0]
.text:00406076                 mov     [esp+0Ch+var_8], edx ; char *
.text:0040607A                 call    sub_406090
.text:0040607F                 add     esp, 0Ch
.text:00406082                 retn
.text:00406082 sub_406060      endp
.text:00406082
.text:00406082 ; ---------------------------------------------------------------------------
.text:00406083                 align 10h
.text:00406090
.text:00406090 ; =============== S U B R O U T I N E =======================================
.text:00406090
.text:00406090
.text:00406090 ; int __cdecl sub_406090(LPCSTR, char *, int)
.text:00406090 sub_406090      proc near               ; CODE XREF: sub_405ED0+4A↑p
.text:00406090                                         ; sub_406060+1A↑p ...
.text:00406090
.text:00406090 var_13C         = dword ptr -13Ch
.text:00406090 lpString1       = dword ptr -138h
.text:00406090 var_134         = dword ptr -134h
.text:00406090 String1         = byte ptr -12Ch
.text:00406090 var_10          = dword ptr -10h
.text:00406090 var_C           = dword ptr -0Ch
.text:00406090 var_8           = dword ptr -8
.text:00406090 var_4           = dword ptr -4
.text:00406090 arg_0           = dword ptr  4
.text:00406090 arg_4           = dword ptr  8
.text:00406090 arg_8           = dword ptr  0Ch
.text:00406090
.text:00406090                 sub     esp, 13Ch
.text:00406096                 mov     [esp+13Ch+var_10], ebx
.text:0040609D                 mov     ebx, [esp+13Ch+arg_8]
.text:004060A4                 mov     [esp+13Ch+var_C], esi
.text:004060AB                 mov     esi, [esp+13Ch+arg_4]
.text:004060B2                 mov     [esp+13Ch+var_8], edi
.text:004060B9                 mov     edi, [esp+13Ch+arg_0]
.text:004060C0                 mov     [esp+13Ch+var_4], ebp
.text:004060C7                 mov     [esp+13Ch+var_134], ebx ; int
.text:004060CB                 mov     [esp+13Ch+lpString1], esi ; int
.text:004060CF                 mov     [esp+13Ch+var_13C], edi ; LPCSTR
.text:004060D2                 call    sub_406010
.text:004060D7                 cmp     eax, 0FFFFFFFFh
.text:004060DA                 mov     edx, eax
.text:004060DC                 jz      short loc_4060EE
.text:004060DE                 mov     ecx, [ebx]
.text:004060E0                 and     ecx, 0F000h
.text:004060E6                 cmp     ecx, 0A000h
.text:004060EC                 jz      short loc_406113
.text:004060EE
.text:004060EE loc_4060EE:                             ; CODE XREF: sub_406090+4C↑j
.text:004060EE                                         ; sub_406090+A1↓j ...
.text:004060EE                 mov     ebx, [esp+13Ch+var_10]
.text:004060F5                 mov     eax, edx
.text:004060F7                 mov     esi, [esp+13Ch+var_C]
.text:004060FE                 mov     edi, [esp+13Ch+var_8]
.text:00406105                 mov     ebp, [esp+13Ch+var_4]
.text:0040610C                 add     esp, 13Ch
.text:00406112                 retn
.text:00406113 ; ---------------------------------------------------------------------------
.text:00406113
.text:00406113 loc_406113:                             ; CODE XREF: sub_406090+5C↑j
.text:00406113                 mov     [esp+13Ch+var_134], 104h
.text:0040611B                 lea     ebp, [esp+13Ch+String1]
.text:0040611F                 mov     [esp+13Ch+lpString1], ebp ; lpString1
.text:00406123                 mov     [esp+13Ch+var_13C], esi ; char *
.text:00406126                 call    sub_407FA0
.text:0040612B                 inc     eax
.text:0040612C                 mov     edx, 0FFFFFFFFh
.text:00406131                 jz      short loc_4060EE
.text:00406133                 mov     [esp+13Ch+var_134], ebx ; int
.text:00406137                 mov     [esp+13Ch+lpString1], ebp ; int
.text:0040613B                 mov     [esp+13Ch+var_13C], edi ; LPCSTR
.text:0040613E                 call    sub_406010
.text:00406143                 mov     edx, eax
.text:00406145                 jmp     short loc_4060EE
.text:00406145 sub_406090      endp
.text:00406145
.text:00406145 ; ---------------------------------------------------------------------------
.text:00406147                 align 10h
.text:00406150
.text:00406150 ; =============== S U B R O U T I N E =======================================
.text:00406150
.text:00406150
.text:00406150 sub_406150      proc near               ; CODE XREF: sub_401DB0:loc_401F15↑p
.text:00406150                                         ; sub_405ED0+FE↑p ...
.text:00406150                 xor     eax, eax
.text:00406152                 retn
.text:00406152 sub_406150      endp
.text:00406152
.text:00406152 ; ---------------------------------------------------------------------------
.text:00406153                 align 10h
.text:00406160
.text:00406160 ; =============== S U B R O U T I N E =======================================
.text:00406160
.text:00406160
.text:00406160 sub_406160      proc near               ; CODE XREF: sub_401DB0+233↑p
.text:00406160                                         ; sub_405ED0+F4↑p ...
.text:00406160                 xor     eax, eax
.text:00406162                 retn
.text:00406162 sub_406160      endp
.text:00406162
.text:00406162 ; ---------------------------------------------------------------------------
.text:00406163                 align 10h
.text:00406170                 sub     esp, 0Ch
.text:00406173                 mov     [esp+4], ebx
.text:00406177                 mov     [esp+8], esi
.text:0040617B                 xor     esi, esi
.text:0040617D                 call    sub_406160
.text:00406182                 mov     ebx, eax
.text:00406184                 call    sub_408090
.text:00406189                 cmp     ebx, eax
.text:0040618B                 jz      short loc_4061A4
.text:0040618D
.text:0040618D loc_40618D:                             ; CODE XREF: .text:004061B2↓j
.text:0040618D                 mov     esi, 1
.text:00406192
.text:00406192 loc_406192:                             ; CODE XREF: .text:004061B4↓j
.text:00406192                 mov     ds:dword_4101C0, esi
.text:00406198                 mov     ebx, [esp+4]
.text:0040619C                 mov     esi, [esp+8]
.text:004061A0                 add     esp, 0Ch
.text:004061A3                 retn
.text:004061A4 ; ---------------------------------------------------------------------------
.text:004061A4
.text:004061A4 loc_4061A4:                             ; CODE XREF: .text:0040618B↑j
.text:004061A4                 call    sub_406150
.text:004061A9                 mov     ebx, eax
.text:004061AB                 call    sub_408080
.text:004061B0                 cmp     ebx, eax
.text:004061B2                 jnz     short loc_40618D
.text:004061B4                 jmp     short loc_406192
.text:004061B4 ; ---------------------------------------------------------------------------
.text:004061B6                 align 10h
.text:004061C0
.text:004061C0 ; =============== S U B R O U T I N E =======================================
.text:004061C0
.text:004061C0
.text:004061C0 sub_4061C0      proc near               ; CODE XREF: sub_405ED0+99↑p
.text:004061C0
.text:004061C0 Size            = dword ptr -1Ch
.text:004061C0 var_18          = dword ptr -18h
.text:004061C0 arg_0           = dword ptr  4
.text:004061C0
.text:004061C0                 push    edi
.text:004061C1                 push    esi
.text:004061C2                 push    ebx
.text:004061C3                 sub     esp, 10h
.text:004061C6                 xor     ebx, ebx
.text:004061C8                 mov     edi, [esp+1Ch+arg_0]
.text:004061CC                 lea     esi, [esi+0]
.text:004061D0
.text:004061D0 loc_4061D0:                             ; CODE XREF: sub_4061C0+38↓j
.text:004061D0                 lea     edx, ds:0[ebx*4]
.text:004061D7                 mov     [esp+1Ch+Size], edx ; Size
.text:004061DA                 call    malloc
.text:004061DF                 mov     [esp+1Ch+var_18], eax
.text:004061E3                 mov     esi, eax
.text:004061E5                 mov     [esp+1Ch+Size], ebx
.text:004061E8                 call    sub_4080A0
.text:004061ED                 lea     ecx, [ebx+ebx]
.text:004061F0                 mov     edx, eax
.text:004061F2                 mov     ebx, ecx
.text:004061F4                 sar     ecx, 1
.text:004061F6                 cmp     eax, ecx
.text:004061F8                 jz      short loc_4061D0
.text:004061FA                 test    eax, eax
.text:004061FC                 js      short loc_40620C
.text:004061FE                 mov     esi, esi
.text:00406200
.text:00406200 loc_406200:                             ; CODE XREF: sub_4061C0+4A↓j
.text:00406200                 mov     ecx, edx
.text:00406202                 dec     edx
.text:00406203                 cmp     [esi+ecx*4], edi
.text:00406206                 jz      short loc_406215
.text:00406208                 test    edx, edx
.text:0040620A                 jns     short loc_406200
.text:0040620C
.text:0040620C loc_40620C:                             ; CODE XREF: sub_4061C0+3C↑j
.text:0040620C                 xor     eax, eax
.text:0040620E
.text:0040620E loc_40620E:                             ; CODE XREF: sub_4061C0+5A↓j
.text:0040620E                 add     esp, 10h
.text:00406211                 pop     ebx
.text:00406212                 pop     esi
.text:00406213                 pop     edi
.text:00406214                 retn
.text:00406215 ; ---------------------------------------------------------------------------
.text:00406215
.text:00406215 loc_406215:                             ; CODE XREF: sub_4061C0+46↑j
.text:00406215                 mov     eax, 1
.text:0040621A                 jmp     short loc_40620E
.text:0040621A sub_4061C0      endp
.text:0040621A
.text:0040621A ; ---------------------------------------------------------------------------
.text:0040621C                 align 10h
.text:00406220
.text:00406220 ; =============== S U B R O U T I N E =======================================
.text:00406220
.text:00406220
.text:00406220 ; int __cdecl sub_406220(LPCSTR lpFileName, int)
.text:00406220 sub_406220      proc near               ; CODE XREF: sub_405ED0+26↑p
.text:00406220                                         ; sub_406010+1D23↓p ...
.text:00406220
.text:00406220 uMode           = dword ptr -1Ch
.text:00406220 var_10          = dword ptr -10h
.text:00406220 var_C           = dword ptr -0Ch
.text:00406220 var_8           = dword ptr -8
.text:00406220 var_4           = dword ptr -4
.text:00406220 lpFileName      = dword ptr  4
.text:00406220 arg_4           = dword ptr  8
.text:00406220
.text:00406220                 sub     esp, 1Ch
.text:00406223                 mov     [esp+1Ch+var_10], ebx
.text:00406227                 mov     ebx, [esp+1Ch+lpFileName]
.text:0040622B                 mov     [esp+1Ch+var_4], ebp
.text:0040622F                 xor     ebp, ebp
.text:00406231                 test    ebx, ebx
.text:00406233                 mov     [esp+1Ch+var_C], esi
.text:00406237                 mov     esi, [esp+1Ch+arg_4]
.text:0040623B                 mov     [esp+1Ch+var_8], edi
.text:0040623F                 jz      short loc_406249
.text:00406241                 test    esi, 0FFFFFFE8h
.text:00406247                 jz      short loc_406270
.text:00406249
.text:00406249 loc_406249:                             ; CODE XREF: sub_406220+1F↑j
.text:00406249                 call    _errno
.text:0040624E                 mov     dword ptr [eax], 16h
.text:00406254
.text:00406254 loc_406254:                             ; CODE XREF: sub_406220+B1↓j
.text:00406254                 mov     eax, 0FFFFFFFFh
.text:00406259
.text:00406259 loc_406259:                             ; CODE XREF: sub_406220+86↓j
.text:00406259                                         ; sub_406220+A4↓j
.text:00406259                 mov     ebx, [esp+1Ch+var_10]
.text:0040625D                 mov     esi, [esp+1Ch+var_C]
.text:00406261                 mov     edi, [esp+1Ch+var_8]
.text:00406265                 mov     ebp, [esp+1Ch+var_4]
.text:00406269                 add     esp, 1Ch
.text:0040626C                 retn
.text:0040626C ; ---------------------------------------------------------------------------
.text:0040626D                 align 10h
.text:00406270
.text:00406270 loc_406270:                             ; CODE XREF: sub_406220+27↑j
.text:00406270                 mov     [esp+1Ch+uMode], 8001h ; uMode
.text:00406277                 call    SetErrorMode
.text:0040627C                 sub     esp, 4
.text:0040627F                 mov     [esp+1Ch+uMode], ebx ; lpFileName
.text:00406282                 call    GetFileAttributesA
.text:00406287                 sub     esp, 4
.text:0040628A                 mov     edi, eax
.text:0040628C                 cmp     eax, 0FFFFFFFFh
.text:0040628F                 jz      short loc_4062D3
.text:00406291
.text:00406291 loc_406291:                             ; CODE XREF: sub_406220+C6↓j
.text:00406291                 mov     [esp+1Ch+uMode], 0 ; uMode
.text:00406298                 call    SetErrorMode
.text:0040629D                 sub     esp, 4
.text:004062A0                 mov     eax, 0FFFFFFFFh
.text:004062A5                 inc     ebp
.text:004062A6                 jz      short loc_406259
.text:004062A8                 test    esi, 10h
.text:004062AE                 jz      short loc_4062B8
.text:004062B0                 test    edi, 10h
.text:004062B6                 jz      short loc_4062C6
.text:004062B8
.text:004062B8 loc_4062B8:                             ; CODE XREF: sub_406220+8E↑j
.text:004062B8                 and     esi, 2
.text:004062BB                 jz      short loc_4062C2
.text:004062BD                 and     edi, 1
.text:004062C0                 jnz     short loc_4062C6
.text:004062C2
.text:004062C2 loc_4062C2:                             ; CODE XREF: sub_406220+9B↑j
.text:004062C2                 xor     eax, eax
.text:004062C4                 jmp     short loc_406259
.text:004062C6 ; ---------------------------------------------------------------------------
.text:004062C6
.text:004062C6 loc_4062C6:                             ; CODE XREF: sub_406220+96↑j
.text:004062C6                                         ; sub_406220+A0↑j
.text:004062C6                 call    _errno
.text:004062CB                 mov     dword ptr [eax], 0Dh
.text:004062D1                 jmp     short loc_406254
.text:004062D3 ; ---------------------------------------------------------------------------
.text:004062D3
.text:004062D3 loc_4062D3:                             ; CODE XREF: sub_406220+6F↑j
.text:004062D3                 call    sub_408340
.text:004062D8                 mov     ebp, eax
.text:004062DA                 call    _errno
.text:004062DF                 mov     [eax], ebp
.text:004062E1                 mov     ebp, 0FFFFFFFFh
.text:004062E6                 jmp     short loc_406291
.text:004062E6 sub_406220      endp
.text:004062E6
.text:004062E6 ; ---------------------------------------------------------------------------
.text:004062E8                 align 10h
.text:004062F0 aComExeBatCmd   db '.com;.exe;.bat;.cmd',0
.text:004062F0                                         ; DATA XREF: .data:off_40F034↓o
.text:00406304 ; const CHAR LibFileName[]
.text:00406304 LibFileName     db 'KERNEL32.DLL',0     ; DATA XREF: sub_406330+11↓o
.text:00406304                                         ; sub_4064A0+C↓o ...
.text:00406311 ; const CHAR ProcName[]
.text:00406311 ProcName        db 'GetFileAttributesExA',0
.text:00406311                                         ; DATA XREF: sub_406330+28↓o
.text:00406326                 align 10h
.text:00406330
.text:00406330 ; =============== S U B R O U T I N E =======================================
.text:00406330
.text:00406330
.text:00406330 ; int __cdecl sub_406330(LPCSTR lpFileName, int)
.text:00406330 sub_406330      proc near               ; CODE XREF: .text:004074D4↓p
.text:00406330                                         ; sub_4078D0+37↓p
.text:00406330
.text:00406330 lpModuleName    = dword ptr -18Ch
.text:00406330 lpProcName      = dword ptr -188h
.text:00406330 var_184         = dword ptr -184h
.text:00406330 var_170         = dword ptr -170h
.text:00406330 var_164         = dword ptr -164h
.text:00406330 hModule         = dword ptr -160h
.text:00406330 FindFileData    = _WIN32_FIND_DATAA ptr -15Ch
.text:00406330 lpFileName      = dword ptr  4
.text:00406330 arg_4           = dword ptr  8
.text:00406330
.text:00406330                 push    ebp
.text:00406331                 push    edi
.text:00406332                 push    esi
.text:00406333                 push    ebx
.text:00406334                 sub     esp, 17Ch
.text:0040633A                 mov     ebx, [esp+18Ch+arg_4]
.text:00406341                 mov     [esp+18Ch+lpModuleName], offset LibFileName ; "KERNEL32.DLL"
.text:00406348                 call    GetModuleHandleA
.text:0040634D                 sub     esp, 4
.text:00406350                 mov     [esp+18Ch+hModule], eax
.text:00406354                 mov     edx, [esp+18Ch+hModule]
.text:00406358                 mov     [esp+18Ch+lpProcName], offset ProcName ; "GetFileAttributesExA"
.text:00406360                 mov     [esp+18Ch+lpModuleName], edx ; hModule
.text:00406363                 call    GetProcAddress
.text:00406368                 sub     esp, 8
.text:0040636B                 mov     ebp, eax
.text:0040636D                 mov     eax, [esp+18Ch+lpFileName]
.text:00406374                 mov     [esp+18Ch+lpModuleName], eax ; lpFileName
.text:00406377                 call    GetFileAttributesA
.text:0040637C                 sub     esp, 4
.text:0040637F                 mov     [esp+18Ch+var_164], eax
.text:00406383                 xor     eax, eax
.text:00406385                 cmp     [esp+18Ch+var_164], 0FFFFFFFFh
.text:0040638A                 jz      short loc_4063E1
.text:0040638C                 cld
.text:0040638D                 mov     ecx, 50h ; 'P'
.text:00406392                 lea     esi, [esp+18Ch+FindFileData]
.text:00406396                 mov     edi, esi
.text:00406398                 test    ebp, ebp
.text:0040639A                 rep stosd
.text:0040639C                 mov     [esp+18Ch+var_170], 0
.text:004063A4                 jz      short loc_4063C5
.text:004063A6                 mov     [esp+18Ch+var_184], ebx
.text:004063AA                 mov     ecx, [esp+18Ch+lpFileName]
.text:004063B1                 mov     [esp+18Ch+lpProcName], 0
.text:004063B9                 mov     [esp+18Ch+lpModuleName], ecx
.text:004063BC                 call    ebp
.text:004063BE                 sub     esp, 0Ch
.text:004063C1                 mov     [esp+18Ch+var_170], eax
.text:004063C5
.text:004063C5 loc_4063C5:                             ; CODE XREF: sub_406330+74↑j
.text:004063C5                 mov     eax, [esp+18Ch+var_170]
.text:004063C9                 test    eax, eax
.text:004063CB                 jz      short loc_4063F0
.text:004063CD
.text:004063CD loc_4063CD:                             ; CODE XREF: sub_406330+131↓j
.text:004063CD                                         ; sub_406330+14B↓j
.text:004063CD                 mov     ebx, [esp+18Ch+hModule]
.text:004063D1                 mov     [esp+18Ch+lpModuleName], ebx ; hLibModule
.text:004063D4                 call    FreeLibrary
.text:004063D9                 sub     esp, 4
.text:004063DC                 mov     eax, 1
.text:004063E1
.text:004063E1 loc_4063E1:                             ; CODE XREF: sub_406330+5A↑j
.text:004063E1                 add     esp, 17Ch
.text:004063E7                 pop     ebx
.text:004063E8                 pop     esi
.text:004063E9                 pop     edi
.text:004063EA                 pop     ebp
.text:004063EB                 retn
.text:004063EB ; ---------------------------------------------------------------------------
.text:004063EC                 align 10h
.text:004063F0
.text:004063F0 loc_4063F0:                             ; CODE XREF: sub_406330+9B↑j
.text:004063F0                 mov     [esp+18Ch+lpProcName], esi ; lpFindFileData
.text:004063F4                 mov     edx, [esp+18Ch+lpFileName]
.text:004063FB                 mov     [esp+18Ch+lpModuleName], edx ; lpFileName
.text:004063FE                 call    FindFirstFileA
.text:00406403                 sub     esp, 8
.text:00406406                 xor     ecx, ecx
.text:00406408                 cmp     eax, 0FFFFFFFFh
.text:0040640B                 setnz   cl
.text:0040640E                 mov     edi, [esp+18Ch+FindFileData.dwFileAttributes]
.text:00406412                 mov     [ebx], edi
.text:00406414                 mov     esi, [esp+18Ch+FindFileData.ftCreationTime.dwHighDateTime]
.text:00406418                 mov     [esp+18Ch+var_170], ecx
.text:0040641C                 mov     ecx, [esp+18Ch+FindFileData.ftCreationTime.dwLowDateTime]
.text:00406420                 mov     [ebx+8], esi
.text:00406423                 mov     [ebx+4], ecx
.text:00406426                 mov     ebp, [esp+18Ch+FindFileData.ftLastAccessTime.dwLowDateTime]
.text:0040642A                 mov     edi, [esp+18Ch+FindFileData.ftLastAccessTime.dwHighDateTime]
.text:0040642E                 mov     [ebx+0Ch], ebp
.text:00406431                 mov     [ebx+10h], edi
.text:00406434                 mov     esi, [esp+18Ch+FindFileData.ftLastWriteTime.dwHighDateTime]
.text:00406438                 mov     ecx, [esp+18Ch+FindFileData.ftLastWriteTime.dwLowDateTime]
.text:0040643C                 mov     [ebx+18h], esi
.text:0040643F                 mov     [ebx+14h], ecx
.text:00406442                 mov     ebp, [esp+18Ch+FindFileData.nFileSizeHigh]
.text:00406446                 mov     [ebx+1Ch], ebp
.text:00406449                 mov     edi, [esp+18Ch+FindFileData.nFileSizeLow]
.text:0040644D                 mov     [ebx+20h], edi
.text:00406450                 mov     [esp+18Ch+lpModuleName], eax ; hFindFile
.text:00406453                 call    FindClose
.text:00406458                 sub     esp, 4
.text:0040645B                 mov     esi, [esp+18Ch+var_170]
.text:0040645F                 test    esi, esi
.text:00406461                 jnz     loc_4063CD
.text:00406467                 cld
.text:00406468                 mov     eax, [esp+18Ch+var_170]
.text:0040646C                 mov     ecx, 9
.text:00406471                 mov     edi, ebx
.text:00406473                 rep stosd
.text:00406475                 mov     ebp, [esp+18Ch+var_164]
.text:00406479                 mov     [ebx], ebp
.text:0040647B                 jmp     loc_4063CD
.text:0040647B sub_406330      endp
.text:0040647B
.text:0040647B ; ---------------------------------------------------------------------------
.text:00406480 ; const CHAR aFindfirstfilee[]
.text:00406480 aFindfirstfilee db 'FindFirstFileExA',0 ; DATA XREF: sub_4064A0+23↓o
.text:00406491 ; const char Source[]
.text:00406491 Source          db '\*',0               ; DATA XREF: sub_4064A0:loc_40652D↓o
.text:00406494                 align 10h
.text:004064A0
.text:004064A0 ; =============== S U B R O U T I N E =======================================
.text:004064A0
.text:004064A0
.text:004064A0 ; int __cdecl sub_4064A0(char *Str)
.text:004064A0 sub_4064A0      proc near               ; CODE XREF: .text:004075D3↓p
.text:004064A0                                         ; sub_4078D0+3FA↓p ...
.text:004064A0
.text:004064A0 lpLibFileName   = dword ptr -18Ch
.text:004064A0 lpProcName      = dword ptr -188h
.text:004064A0 var_184         = dword ptr -184h
.text:004064A0 var_180         = dword ptr -180h
.text:004064A0 var_17C         = dword ptr -17Ch
.text:004064A0 var_178         = dword ptr -178h
.text:004064A0 var_164         = dword ptr -164h
.text:004064A0 hModule         = dword ptr -160h
.text:004064A0 FindFileData    = _WIN32_FIND_DATAA ptr -15Ch
.text:004064A0 Str             = dword ptr  4
.text:004064A0
.text:004064A0                 push    ebp
.text:004064A1                 push    edi
.text:004064A2                 xor     edi, edi
.text:004064A4                 push    esi
.text:004064A5                 push    ebx
.text:004064A6                 sub     esp, 17Ch
.text:004064AC                 mov     [esp+18Ch+lpLibFileName], offset LibFileName ; "KERNEL32.DLL"
.text:004064B3                 call    LoadLibraryA
.text:004064B8                 sub     esp, 4
.text:004064BB                 mov     [esp+18Ch+hModule], eax
.text:004064BF                 mov     ecx, [esp+18Ch+hModule]
.text:004064C3                 mov     [esp+18Ch+lpProcName], offset aFindfirstfilee ; "FindFirstFileExA"
.text:004064CB                 mov     [esp+18Ch+lpLibFileName], ecx ; hModule
.text:004064CE                 call    GetProcAddress
.text:004064D3                 sub     esp, 8
.text:004064D6                 mov     edx, [esp+18Ch+Str]
.text:004064DD                 mov     [esp+18Ch+var_164], eax
.text:004064E1                 mov     [esp+18Ch+lpLibFileName], edx ; Str
.text:004064E4                 call    strlen
.text:004064E9                 lea     edx, [eax+5]
.text:004064EC                 mov     ebx, eax
.text:004064EE                 mov     [esp+18Ch+lpLibFileName], edx ; Size
.text:004064F1                 call    malloc
.text:004064F6                 mov     esi, eax
.text:004064F8                 test    esi, esi
.text:004064FA                 mov     eax, 1
.text:004064FF                 jz      loc_4065DD
.text:00406505                 mov     [esp+18Ch+lpLibFileName], esi ; Destination
.text:00406508                 mov     ebp, [esp+18Ch+Str]
.text:0040650F                 mov     [esp+18Ch+lpProcName], ebp ; Source
.text:00406513                 call    strcpy
.text:00406518                 movzx   eax, byte ptr [ebx+esi-1]
.text:0040651D                 cmp     al, 2Fh ; '/'
.text:0040651F                 jz      loc_40660B
.text:00406525                 cmp     al, 5Ch ; '\'
.text:00406527                 jz      loc_40660B
.text:0040652D
.text:0040652D loc_40652D:                             ; CODE XREF: sub_4064A0+170↓j
.text:0040652D                 mov     [esp+18Ch+lpProcName], offset Source ; "\\*"
.text:00406535                 mov     [esp+18Ch+lpLibFileName], esi ; Destination
.text:00406538                 call    strcat
.text:0040653D                 mov     eax, [esp+18Ch+var_164]
.text:00406541                 test    eax, eax
.text:00406543                 jz      loc_406605
.text:00406549                 mov     [esp+18Ch+var_178], 0
.text:00406551                 lea     ebp, [esp+18Ch+FindFileData]
.text:00406555                 mov     [esp+18Ch+var_17C], 0
.text:0040655D                 mov     [esp+18Ch+var_180], 1
.text:00406565                 mov     [esp+18Ch+var_184], ebp
.text:00406569                 mov     [esp+18Ch+lpProcName], 0
.text:00406571                 mov     [esp+18Ch+lpLibFileName], esi
.text:00406574                 call    [esp+18Ch+var_164]
.text:00406578                 sub     esp, 18h
.text:0040657B                 mov     ebx, eax
.text:0040657D                 cmp     eax, 0FFFFFFFFh
.text:00406580                 jz      short loc_4065E8
.text:00406582                 lea     esi, [esi+0]
.text:00406589                 lea     edi, [edi+0]
.text:00406590
.text:00406590 loc_406590:                             ; CODE XREF: sub_4064A0+109↓j
.text:00406590                                         ; sub_4064A0+161↓j
.text:00406590                 test    byte ptr [esp+18Ch+FindFileData.dwFileAttributes], 10h
.text:00406595                 jz      short loc_406598
.text:00406597                 inc     edi
.text:00406598
.text:00406598 loc_406598:                             ; CODE XREF: sub_4064A0+F5↑j
.text:00406598                 mov     [esp+18Ch+lpProcName], ebp ; lpFindFileData
.text:0040659C                 mov     [esp+18Ch+lpLibFileName], ebx ; hFindFile
.text:0040659F                 call    FindNextFileA
.text:004065A4                 sub     esp, 8
.text:004065A7                 test    eax, eax
.text:004065A9                 jnz     short loc_406590
.text:004065AB                 mov     [esp+18Ch+lpLibFileName], ebx ; hFindFile
.text:004065AE                 call    FindClose
.text:004065B3                 sub     esp, 4
.text:004065B6                 mov     esi, [esp+18Ch+hModule]
.text:004065BA                 mov     [esp+18Ch+lpLibFileName], esi ; hLibModule
.text:004065BD                 call    FreeLibrary
.text:004065C2                 sub     esp, 4
.text:004065C5                 mov     ebx, [esp+18Ch+Str]
.text:004065CC                 mov     [esp+18Ch+lpLibFileName], ebx ; LPCSTR
.text:004065CF                 call    sub_4088C0
.text:004065D4                 test    eax, eax
.text:004065D6                 jz      short loc_4065DB
.text:004065D8                 add     edi, 2
.text:004065DB
.text:004065DB loc_4065DB:                             ; CODE XREF: sub_4064A0+136↑j
.text:004065DB                 mov     eax, edi
.text:004065DD
.text:004065DD loc_4065DD:                             ; CODE XREF: sub_4064A0+5F↑j
.text:004065DD                                         ; sub_4064A0+163↓j
.text:004065DD                 add     esp, 17Ch
.text:004065E3                 pop     ebx
.text:004065E4                 pop     esi
.text:004065E5                 pop     edi
.text:004065E6                 pop     ebp
.text:004065E7                 retn
.text:004065E8 ; ---------------------------------------------------------------------------
.text:004065E8
.text:004065E8 loc_4065E8:                             ; CODE XREF: sub_4064A0+E0↑j
.text:004065E8                                         ; sub_4064A0+169↓j
.text:004065E8                 mov     [esp+18Ch+lpProcName], ebp ; lpFindFileData
.text:004065EC                 mov     [esp+18Ch+lpLibFileName], esi ; lpFileName
.text:004065EF                 call    FindFirstFileA
.text:004065F4                 mov     ebx, eax
.text:004065F6                 sub     esp, 8
.text:004065F9                 cmp     ebx, 0FFFFFFFFh
.text:004065FC                 mov     eax, 2
.text:00406601                 jnz     short loc_406590
.text:00406603                 jmp     short loc_4065DD
.text:00406605 ; ---------------------------------------------------------------------------
.text:00406605
.text:00406605 loc_406605:                             ; CODE XREF: sub_4064A0+A3↑j
.text:00406605                 lea     ebp, [esp+18Ch+FindFileData]
.text:00406609                 jmp     short loc_4065E8
.text:0040660B ; ---------------------------------------------------------------------------
.text:0040660B
.text:0040660B loc_40660B:                             ; CODE XREF: sub_4064A0+7F↑j
.text:0040660B                                         ; sub_4064A0+87↑j
.text:0040660B                 mov     byte ptr [ebx+esi-1], 0
.text:00406610                 jmp     loc_40652D
.text:00406610 sub_4064A0      endp
.text:00406610
.text:00406610 ; ---------------------------------------------------------------------------
.text:00406615                 align 10h
.text:00406620
.text:00406620 ; =============== S U B R O U T I N E =======================================
.text:00406620
.text:00406620
.text:00406620 ; int __cdecl sub_406620(HANDLE hNamedPipe, int)
.text:00406620 sub_406620      proc near               ; CODE XREF: sub_406010+1D87↓p
.text:00406620                                         ; sub_40A760+52↓j
.text:00406620
.text:00406620 hFile           = dword ptr -0ECh
.text:00406620 lpFileInformation= dword ptr -0E8h
.text:00406620 nBufferSize     = dword ptr -0E4h
.text:00406620 lpBytesRead     = dword ptr -0E0h
.text:00406620 lpTotalBytesAvail= dword ptr -0DCh
.text:00406620 lpBytesLeftThisMessage= dword ptr -0D8h
.text:00406620 var_C4          = dword ptr -0C4h
.text:00406620 var_C0          = dword ptr -0C0h
.text:00406620 var_BC          = dword ptr -0BCh
.text:00406620 var_B8          = dword ptr -0B8h
.text:00406620 var_B4          = dword ptr -0B4h
.text:00406620 var_B0          = dword ptr -0B0h
.text:00406620 var_AC          = dword ptr -0ACh
.text:00406620 var_A8          = dword ptr -0A8h
.text:00406620 TotalBytesAvail = dword ptr -0A0h
.text:00406620 var_9C          = dword ptr -9Ch
.text:00406620 var_98          = dword ptr -98h
.text:00406620 var_94          = dword ptr -94h
.text:00406620 var_90          = dword ptr -90h
.text:00406620 var_8C          = dword ptr -8Ch
.text:00406620 var_88          = dword ptr -88h
.text:00406620 var_84          = dword ptr -84h
.text:00406620 var_80          = dword ptr -80h
.text:00406620 var_7C          = dword ptr -7Ch
.text:00406620 var_78          = dword ptr -78h
.text:00406620 var_74          = dword ptr -74h
.text:00406620 var_70          = dword ptr -70h
.text:00406620 var_6C          = dword ptr -6Ch
.text:00406620 FileInformation = _BY_HANDLE_FILE_INFORMATION ptr -5Ch
.text:00406620 hNamedPipe      = dword ptr  4
.text:00406620 arg_4           = dword ptr  8
.text:00406620
.text:00406620                 push    ebp
.text:00406621                 mov     eax, 0FFFFFFFFh
.text:00406626                 push    edi
.text:00406627                 push    esi
.text:00406628                 push    ebx
.text:00406629                 sub     esp, 0DCh
.text:0040662F                 mov     esi, [esp+0ECh+hNamedPipe]
.text:00406636                 mov     ebp, [esp+0ECh+arg_4]
.text:0040663D                 cmp     esi, 0FFFFFFFFh
.text:00406640                 jz      loc_4069C1
.text:00406646                 cld
.text:00406647                 xor     eax, eax
.text:00406649                 lea     ebx, [esp+0ECh+FileInformation]
.text:00406650                 mov     ecx, 0Dh
.text:00406655                 mov     edi, ebx
.text:00406657                 rep stosd
.text:00406659                 mov     dword ptr [ebp+18h], 1
.text:00406660                 mov     [esp+0ECh+hFile], esi ; hFile
.text:00406663                 call    GetFileType
.text:00406668                 sub     esp, 4
.text:0040666B                 xor     edx, edx
.text:0040666D                 cmp     eax, 2
.text:00406670                 jz      loc_406AA0
.text:00406676                 cmp     eax, 3
.text:00406679                 jz      loc_406A90
.text:0040667F
.text:0040667F loc_40667F:                             ; CODE XREF: sub_406620+475↓j
.text:0040667F                                         ; sub_406620+485↓j
.text:0040667F                 or      [ebp+0], edx
.text:00406682                 mov     [esp+0ECh+lpFileInformation], ebx ; lpFileInformation
.text:00406686                 mov     [esp+0ECh+hFile], esi ; hFile
.text:00406689                 call    GetFileInformationByHandle
.text:0040668E                 sub     esp, 8
.text:00406691                 mov     ecx, [esp+0ECh+FileInformation.nFileSizeLow]
.text:00406698                 test    ecx, ecx
.text:0040669A                 jnz     short loc_4066D0
.text:0040669C                 mov     edx, [esp+0ECh+FileInformation.nFileSizeHigh]
.text:004066A3                 test    edx, edx
.text:004066A5                 jnz     short loc_4066D0
.text:004066A7                 mov     edx, [ebp+0]
.text:004066AA                 and     edx, 0F000h
.text:004066B0                 cmp     edx, 1000h
.text:004066B6                 jz      loc_406A26
.text:004066BC
.text:004066BC loc_4066BC:                             ; CODE XREF: sub_406620+459↓j
.text:004066BC                                         ; sub_406620+465↓j
.text:004066BC                 test    ecx, ecx
.text:004066BE                 jnz     short loc_4066D0
.text:004066C0                 mov     edx, [esp+0ECh+FileInformation.nFileSizeHigh]
.text:004066C7                 test    edx, edx
.text:004066C9                 jz      loc_406A04
.text:004066CF                 nop
.text:004066D0
.text:004066D0 loc_4066D0:                             ; CODE XREF: sub_406620+7A↑j
.text:004066D0                                         ; sub_406620+85↑j ...
.text:004066D0                 cld
.text:004066D1                 mov     esi, ebx
.text:004066D3                 mov     dword ptr [ebp+14h], 0
.text:004066DA                 lea     edi, [esp+0ECh+var_9C]
.text:004066DE                 mov     ecx, 0Dh
.text:004066E3                 rep movsd
.text:004066E5                 xor     ebx, ebx
.text:004066E7                 xor     edi, edi
.text:004066E9                 mov     edx, [esp+0ECh+var_6C]
.text:004066F0                 mov     esi, [esp+0ECh+var_70]
.text:004066F4                 or      edx, ebx
.text:004066F6                 mov     ebx, [esp+0ECh+var_9C]
.text:004066FA                 mov     [ebp+8], edx
.text:004066FD                 or      edi, esi
.text:004066FF                 xor     edx, edx
.text:00406701                 mov     [ebp+0Ch], edi
.text:00406704                 test    bl, 10h
.text:00406707                 mov     esi, [esp+0ECh+var_80]
.text:0040670B                 setz    dl
.text:0040670E                 mov     [ebp+10h], esi
.text:00406711                 dec     edx
.text:00406712                 and     edx, 0FFFFC000h
.text:00406718                 add     edx, 8000h
.text:0040671E                 or      edx, 124h
.text:00406724                 test    bl, 1
.text:00406727                 movzx   eax, dx
.text:0040672A                 jnz     short loc_406731
.text:0040672C                 or      eax, 92h
.text:00406731
.text:00406731 loc_406731:                             ; CODE XREF: sub_406620+10A↑j
.text:00406731                 or      [ebp+0], eax
.text:00406734                 xor     edx, edx
.text:00406736                 mov     ebx, [esp+0ECh+var_7C]
.text:0040673A                 mov     ecx, [esp+0ECh+var_78]
.text:0040673E                 mov     eax, edx
.text:00406740                 xor     esi, esi
.text:00406742                 mov     edx, [esp+0ECh+var_8C]
.text:00406746                 mov     edi, ebx
.text:00406748                 or      eax, edi
.text:0040674A                 mov     [esp+0ECh+var_A8], eax
.text:0040674E                 mov     ebx, ecx
.text:00406750                 mov     edi, [esp+0ECh+var_74]
.text:00406754                 or      ebx, esi
.text:00406756                 mov     esi, [esp+0ECh+var_A8]
.text:0040675A                 mov     [esp+0ECh+var_AC], ebx
.text:0040675E                 xor     ebx, ebx
.text:00406760                 mov     ecx, [esp+0ECh+var_AC]
.text:00406764                 mov     [ebp+34h], esi
.text:00406767                 mov     esi, [esp+0ECh+var_90]
.text:0040676B                 mov     [ebp+18h], edi
.text:0040676E                 xor     edi, edi
.text:00406770                 or      esi, ebx
.text:00406772                 mov     [ebp+30h], ecx
.text:00406775                 or      edi, edx
.text:00406777                 mov     edx, esi
.text:00406779                 mov     [esp+0ECh+nBufferSize], 989680h
.text:00406781                 sub     edx, 0D53E8000h
.text:00406787                 mov     ebx, edi
.text:00406789                 sbb     ebx, 19DB1DEh
.text:0040678F                 mov     [esp+0ECh+lpFileInformation], ebx
.text:00406793                 mov     [esp+0ECh+lpBytesRead], 0
.text:0040679B                 mov     [esp+0ECh+hFile], edx
.text:0040679E                 call    sub_40D4D0
.text:004067A3                 mov     ecx, eax
.text:004067A5                 shr     eax, 1Fh
.text:004067A8                 dec     eax
.text:004067A9                 and     ecx, eax
.text:004067AB                 mov     [ebp+38h], ecx
.text:004067AE                 mov     [esp+0ECh+hFile], esi
.text:004067B1                 mov     [esp+0ECh+lpFileInformation], edi
.text:004067B5                 mov     [esp+0ECh+nBufferSize], 989680h
.text:004067BD                 mov     [esp+0ECh+lpBytesRead], 0
.text:004067C5                 call    sub_40D5F0
.text:004067CA                 lea     ebx, [eax+eax*4]
.text:004067CD                 xor     ecx, ecx
.text:004067CF                 lea     esi, [ebx+ebx*4]
.text:004067D2                 shl     esi, 2
.text:004067D5                 mov     edi, esi
.text:004067D7                 shr     edi, 1Fh
.text:004067DA                 dec     edi
.text:004067DB                 and     edi, esi
.text:004067DD                 mov     [ebp+3Ch], edi
.text:004067E0                 mov     esi, [esp+0ECh+var_98]
.text:004067E4                 xor     edi, edi
.text:004067E6                 mov     [esp+0ECh+nBufferSize], 989680h
.text:004067EE                 mov     edx, [esp+0ECh+var_94]
.text:004067F2                 mov     [esp+0ECh+lpBytesRead], 0
.text:004067FA                 or      esi, ecx
.text:004067FC                 or      edi, edx
.text:004067FE                 mov     edx, esi
.text:00406800                 mov     ecx, edi
.text:00406802                 sub     edx, 0D53E8000h
.text:00406808                 sbb     ecx, 19DB1DEh
.text:0040680E                 mov     [esp+0ECh+lpFileInformation], ecx
.text:00406812                 mov     [esp+0ECh+hFile], edx
.text:00406815                 call    sub_40D4D0
.text:0040681A                 mov     ebx, eax
.text:0040681C                 shr     eax, 1Fh
.text:0040681F                 dec     eax
.text:00406820                 and     ebx, eax
.text:00406822                 mov     [ebp+48h], ebx
.text:00406825                 xor     ebx, ebx
.text:00406827                 mov     [esp+0ECh+hFile], esi
.text:0040682A                 mov     [esp+0ECh+lpFileInformation], edi
.text:0040682E                 mov     [esp+0ECh+nBufferSize], 989680h
.text:00406836                 mov     [esp+0ECh+lpBytesRead], 0
.text:0040683E                 call    sub_40D5F0
.text:00406843                 lea     ecx, [eax+eax*4]
.text:00406846                 lea     esi, [ecx+ecx*4]
.text:00406849                 shl     esi, 2
.text:0040684C                 mov     edi, esi
.text:0040684E                 shr     edi, 1Fh
.text:00406851                 dec     edi
.text:00406852                 and     edi, esi
.text:00406854                 mov     [ebp+4Ch], edi
.text:00406857                 mov     esi, [esp+0ECh+var_88]
.text:0040685B                 xor     edi, edi
.text:0040685D                 mov     [esp+0ECh+nBufferSize], 989680h
.text:00406865                 mov     edx, [esp+0ECh+var_84]
.text:00406869                 mov     [esp+0ECh+lpBytesRead], 0
.text:00406871                 or      esi, ebx
.text:00406873                 or      edi, edx
.text:00406875                 mov     edx, esi
.text:00406877                 mov     ebx, edi
.text:00406879                 sub     edx, 0D53E8000h
.text:0040687F                 sbb     ebx, 19DB1DEh
.text:00406885                 mov     [esp+0ECh+lpFileInformation], ebx
.text:00406889                 mov     [esp+0ECh+hFile], edx
.text:0040688C                 call    sub_40D4D0
.text:00406891                 mov     ecx, eax
.text:00406893                 shr     eax, 1Fh
.text:00406896                 dec     eax
.text:00406897                 and     ecx, eax
.text:00406899                 mov     [ebp+40h], ecx
.text:0040689C                 mov     [esp+0ECh+lpFileInformation], edi
.text:004068A0                 mov     [esp+0ECh+nBufferSize], 989680h
.text:004068A8                 mov     [esp+0ECh+lpBytesRead], 0
.text:004068B0                 mov     [esp+0ECh+hFile], esi
.text:004068B3                 call    sub_40D5F0
.text:004068B8                 mov     dword ptr [ebp+50h], 200h
.text:004068BF                 lea     ebx, [eax+eax*4]
.text:004068C2                 mov     edi, [esp+0ECh+var_A8]
.text:004068C6                 lea     edx, [ebx+ebx*4]
.text:004068C9                 mov     eax, [esp+0ECh+var_AC]
.text:004068CD                 shl     edx, 2
.text:004068D0                 mov     ecx, edx
.text:004068D2                 shr     ecx, 1Fh
.text:004068D5                 dec     ecx
.text:004068D6                 and     ecx, edx
.text:004068D8                 test    edi, edi
.text:004068DA                 mov     edx, [esp+0ECh+var_A8]
.text:004068DE                 mov     [ebp+44h], ecx
.text:004068E1                 js      loc_4069F7
.text:004068E7
.text:004068E7 loc_4068E7:                             ; CODE XREF: sub_406620+3DF↓j
.text:004068E7                 mov     edi, [esp+0ECh+var_AC]
.text:004068EB                 xor     esi, esi
.text:004068ED                 mov     ecx, eax
.text:004068EF                 shrd    ecx, edx, 9
.text:004068F3                 mov     ebx, edx
.text:004068F5                 mov     eax, esi
.text:004068F7                 and     edi, 1FFh
.text:004068FD                 sar     ebx, 9
.text:00406900                 or      eax, edi
.text:00406902                 jz      short loc_40690A
.text:00406904                 add     ecx, 1
.text:00406907                 adc     ebx, 0
.text:0040690A
.text:0040690A loc_40690A:                             ; CODE XREF: sub_406620+2E2↑j
.text:0040690A                 mov     [ebp+5Ch], ebx
.text:0040690D                 mov     esi, dword_40F030
.text:00406913                 xor     edi, edi
.text:00406915                 mov     [ebp+58h], ecx
.text:00406918                 mov     ebx, dword_40F030
.text:0040691E                 mov     ecx, [esp+0ECh+var_A8]
.text:00406922                 mov     edx, [esp+0ECh+var_AC]
.text:00406926                 mov     [ebp+50h], ebx
.text:00406929                 shr     ebx, 9
.text:0040692C                 mov     [esp+0ECh+lpBytesRead], edi
.text:00406930                 mov     [esp+0ECh+lpFileInformation], ecx
.text:00406934                 mov     [esp+0ECh+nBufferSize], esi
.text:00406938                 mov     [esp+0ECh+hFile], edx
.text:0040693B                 call    sub_40D4D0
.text:00406940                 mov     [esp+0ECh+lpBytesRead], edi
.text:00406944                 mov     ecx, [esp+0ECh+var_AC]
.text:00406948                 mov     edi, [esp+0ECh+var_A8]
.text:0040694C                 mov     [esp+0ECh+var_BC], ebx
.text:00406950                 mov     [esp+0ECh+var_B4], eax
.text:00406954                 mov     [esp+0ECh+var_B0], edx
.text:00406958                 mov     [esp+0ECh+var_B8], 0
.text:00406960                 mov     [esp+0ECh+nBufferSize], esi
.text:00406964                 mov     [esp+0ECh+hFile], ecx
.text:00406967                 mov     [esp+0ECh+lpFileInformation], edi
.text:0040696B                 call    sub_40D5F0
.text:00406970                 mov     ebx, edx
.text:00406972                 or      ebx, eax
.text:00406974                 jz      short loc_4069D0
.text:00406976                 mov     edi, [esp+0ECh+var_B4]
.text:0040697A                 mov     esi, [esp+0ECh+var_B0]
.text:0040697E                 mov     eax, [esp+0ECh+var_BC]
.text:00406982                 mov     [esp+0ECh+var_C4], edi
.text:00406986                 mov     ecx, [esp+0ECh+var_B8]
.text:0040698A                 add     [esp+0ECh+var_C4], 1
.text:0040698F                 mov     [esp+0ECh+var_C0], esi
.text:00406993                 adc     [esp+0ECh+var_C0], 0
.text:00406998                 mul     [esp+0ECh+var_C4]
.text:0040699C                 mov     edi, [esp+0ECh+var_C0]
.text:004069A0                 mov     ebx, edx
.text:004069A2                 mov     edx, [esp+0ECh+var_C4]
.text:004069A6                 mov     esi, eax
.text:004069A8                 mov     eax, ebx
.text:004069AA                 imul    ecx, edx
.text:004069AD                 mov     edx, [esp+0ECh+var_BC]
.text:004069B1                 imul    edx, edi
.text:004069B4                 add     eax, ecx
.text:004069B6                 lea     edi, [edx+eax]
.text:004069B9
.text:004069B9 loc_4069B9:                             ; CODE XREF: sub_406620+3D5↓j
.text:004069B9                 mov     [ebp+58h], esi
.text:004069BC                 xor     eax, eax
.text:004069BE                 mov     [ebp+5Ch], edi
.text:004069C1
.text:004069C1 loc_4069C1:                             ; CODE XREF: sub_406620+20↑j
.text:004069C1                 add     esp, 0DCh
.text:004069C7                 pop     ebx
.text:004069C8                 pop     esi
.text:004069C9                 pop     edi
.text:004069CA                 pop     ebp
.text:004069CB                 retn
.text:004069CB ; ---------------------------------------------------------------------------
.text:004069CC                 align 10h
.text:004069D0
.text:004069D0 loc_4069D0:                             ; CODE XREF: sub_406620+354↑j
.text:004069D0                 mov     eax, [esp+0ECh+var_B4]
.text:004069D4                 mov     edi, [esp+0ECh+var_B8]
.text:004069D8                 mov     ebx, [esp+0ECh+var_B4]
.text:004069DC                 mul     [esp+0ECh+var_BC]
.text:004069E0                 mov     ecx, [esp+0ECh+var_BC]
.text:004069E4                 imul    ebx, edi
.text:004069E7                 mov     esi, eax
.text:004069E9                 mov     eax, [esp+0ECh+var_B0]
.text:004069ED                 add     edx, ebx
.text:004069EF                 imul    ecx, eax
.text:004069F2                 lea     edi, [ecx+edx]
.text:004069F5                 jmp     short loc_4069B9
.text:004069F7 ; ---------------------------------------------------------------------------
.text:004069F7
.text:004069F7 loc_4069F7:                             ; CODE XREF: sub_406620+2C1↑j
.text:004069F7                 add     eax, 1FFh
.text:004069FC                 adc     edx, 0
.text:004069FF                 jmp     loc_4068E7
.text:00406A04 ; ---------------------------------------------------------------------------
.text:00406A04
.text:00406A04 loc_406A04:                             ; CODE XREF: sub_406620+A9↑j
.text:00406A04                 mov     [esp+0ECh+hFile], esi ; hFile
.text:00406A07                 lea     ecx, [esp+0ECh+FileInformation.nFileSizeHigh]
.text:00406A0E                 mov     [esp+0ECh+lpFileInformation], ecx ; lpFileSizeHigh
.text:00406A12                 call    GetFileSize
.text:00406A17                 sub     esp, 8
.text:00406A1A                 mov     [esp+0ECh+FileInformation.nFileSizeLow], eax
.text:00406A21                 jmp     loc_4066D0
.text:00406A26 ; ---------------------------------------------------------------------------
.text:00406A26
.text:00406A26 loc_406A26:                             ; CODE XREF: sub_406620+96↑j
.text:00406A26                 mov     [esp+0ECh+TotalBytesAvail], 0
.text:00406A2E                 lea     ecx, [esp+0ECh+TotalBytesAvail]
.text:00406A32                 mov     [esp+0ECh+lpBytesLeftThisMessage], 0 ; lpBytesLeftThisMessage
.text:00406A3A                 mov     [esp+0ECh+lpTotalBytesAvail], ecx ; lpTotalBytesAvail
.text:00406A3E                 mov     [esp+0ECh+lpBytesRead], 0 ; lpBytesRead
.text:00406A46                 mov     [esp+0ECh+nBufferSize], 0 ; nBufferSize
.text:00406A4E                 mov     [esp+0ECh+lpFileInformation], 0 ; lpBuffer
.text:00406A56                 mov     [esp+0ECh+hFile], esi ; hNamedPipe
.text:00406A59                 call    PeekNamedPipe
.text:00406A5E                 sub     esp, 18h
.text:00406A61                 test    eax, eax
.text:00406A63                 jz      short loc_406A7E
.text:00406A65                 mov     ecx, [esp+0ECh+TotalBytesAvail]
.text:00406A69                 xor     eax, eax
.text:00406A6B                 mov     [esp+0ECh+FileInformation.nFileSizeHigh], eax
.text:00406A72                 mov     [esp+0ECh+FileInformation.nFileSizeLow], ecx
.text:00406A79                 jmp     loc_4066BC
.text:00406A7E ; ---------------------------------------------------------------------------
.text:00406A7E
.text:00406A7E loc_406A7E:                             ; CODE XREF: sub_406620+443↑j
.text:00406A7E                 mov     ecx, [esp+0ECh+FileInformation.nFileSizeLow]
.text:00406A85                 jmp     loc_4066BC
.text:00406A85 ; ---------------------------------------------------------------------------
.text:00406A8A                 align 10h
.text:00406A90
.text:00406A90 loc_406A90:                             ; CODE XREF: sub_406620+59↑j
.text:00406A90                 mov     edx, 1000h
.text:00406A95                 jmp     loc_40667F
.text:00406A95 ; ---------------------------------------------------------------------------
.text:00406A9A                 align 10h
.text:00406AA0
.text:00406AA0 loc_406AA0:                             ; CODE XREF: sub_406620+50↑j
.text:00406AA0                 mov     edx, 2000h
.text:00406AA5                 jmp     loc_40667F
.text:00406AA5 sub_406620      endp
.text:00406AA5
.text:00406AA5 ; ---------------------------------------------------------------------------
.text:00406AAA aLnk            db '.lnk',0             ; DATA XREF: sub_406AF0+E0↓o
.text:00406AAA                                         ; .text:0040719A↓o ...
.text:00406AAF ; const CHAR aKernel32[]
.text:00406AAF aKernel32       db 'KERNEL32',0         ; DATA XREF: sub_406AF0+12D↓o
.text:00406AAF                                         ; .text:0040784B↓o
.text:00406AB8 ; const CHAR aGetcompressedf[]
.text:00406AB8 aGetcompressedf db 'GetCompressedFileSizeA',0
.text:00406AB8                                         ; DATA XREF: sub_406AF0+13E↓o
.text:00406AB8                                         ; .text:0040785C↓o
.text:00406ACF ; const CHAR aGetbinarytypea[]
.text:00406ACF aGetbinarytypea db 'GetBinaryTypeA',0   ; DATA XREF: sub_406AF0+333↓o
.text:00406ACF                                         ; .text:004071F6↓o ...
.text:00406ADE ; const char VarName[]
.text:00406ADE VarName         db 'PATHEXT',0          ; DATA XREF: sub_406AF0:loc_406ED7↓o
.text:00406ADE                                         ; .text:loc_4072A0↓o ...
.text:00406AE6                 align 10h
.text:00406AF0
.text:00406AF0 ; =============== S U B R O U T I N E =======================================
.text:00406AF0
.text:00406AF0
.text:00406AF0 ; int __cdecl sub_406AF0(char *String1, int)
.text:00406AF0 sub_406AF0      proc near               ; CODE XREF: sub_4078D0+3CD↓p
.text:00406AF0                                         ; sub_406010+1DA5↓p
.text:00406AF0
.text:00406AF0 Str             = dword ptr -6Ch
.text:00406AF0 lpProcName      = dword ptr -68h
.text:00406AF0 var_64          = dword ptr -64h
.text:00406AF0 var_60          = dword ptr -60h
.text:00406AF0 var_5C          = dword ptr -5Ch
.text:00406AF0 var_4C          = dword ptr -4Ch
.text:00406AF0 var_48          = dword ptr -48h
.text:00406AF0 var_44          = dword ptr -44h
.text:00406AF0 var_40          = dword ptr -40h
.text:00406AF0 var_3C          = dword ptr -3Ch
.text:00406AF0 var_38          = dword ptr -38h
.text:00406AF0 lpRootPathName  = dword ptr -30h
.text:00406AF0 var_2C          = byte ptr -2Ch
.text:00406AF0 var_28          = dword ptr -28h
.text:00406AF0 var_24          = dword ptr -24h
.text:00406AF0 var_20          = dword ptr -20h
.text:00406AF0 var_1C          = dword ptr -1Ch
.text:00406AF0 var_18          = byte ptr -18h
.text:00406AF0 String1         = dword ptr  4
.text:00406AF0 arg_4           = dword ptr  8
.text:00406AF0
.text:00406AF0                 push    ebp
.text:00406AF1                 push    edi
.text:00406AF2                 push    esi
.text:00406AF3                 push    ebx
.text:00406AF4                 sub     esp, 5Ch
.text:00406AF7                 mov     edx, [esp+6Ch+String1]
.text:00406AFB                 mov     [esp+6Ch+Str], edx ; LPCSTR
.text:00406AFE                 call    sub_4084F0
.text:00406B03                 mov     [esp+6Ch+Str], eax
.text:00406B06                 call    sub_409600
.text:00406B0B                 mov     [esp+6Ch+lpRootPathName], eax
.text:00406B0F                 test    eax, eax
.text:00406B11                 jz      loc_406D43
.text:00406B17                 mov     [esp+6Ch+Str], eax ; Str
.text:00406B1A                 call    strlen
.text:00406B1F                 mov     edx, [esp+6Ch+arg_4]
.text:00406B23                 mov     ebx, eax
.text:00406B25                 mov     esi, [edx+0Ch]
.text:00406B28                 mov     edi, [edx+8]
.text:00406B2B                 mov     eax, esi
.text:00406B2D                 or      eax, edi
.text:00406B2F                 jz      loc_406F50
.text:00406B35                 mov     ecx, [esp+6Ch+lpRootPathName]
.text:00406B39                 mov     [esp+6Ch+Str], ecx ; lpRootPathName
.text:00406B3C                 call    GetDriveTypeA
.text:00406B41                 sub     esp, 4
.text:00406B44                 cmp     eax, 4
.text:00406B47                 jz      loc_406F50
.text:00406B4D
.text:00406B4D loc_406B4D:                             ; CODE XREF: sub_406AF0+48A↓j
.text:00406B4D                                         ; sub_406AF0+4B2↓j
.text:00406B4D                 mov     edx, [esp+6Ch+arg_4]
.text:00406B51                 mov     esi, [edx+14h]
.text:00406B54                 mov     edi, [edx+10h]
.text:00406B57                 mov     ecx, esi
.text:00406B59                 or      ecx, edi
.text:00406B5B                 jnz     short loc_406B85
.text:00406B5D                 mov     ebp, [esp+6Ch+lpRootPathName]
.text:00406B61                 xor     esi, esi
.text:00406B63                 xor     edi, edi
.text:00406B65                 test    ebp, ebp
.text:00406B67                 jz      short loc_406B77
.text:00406B69                 movzx   ebx, byte ptr [ebp+0]
.text:00406B6D                 test    bl, bl
.text:00406B6F                 mov     cl, bl
.text:00406B71                 jnz     loc_406F01
.text:00406B77
.text:00406B77 loc_406B77:                             ; CODE XREF: sub_406AF0+77↑j
.text:00406B77                 xor     eax, eax
.text:00406B79                 xor     edx, edx
.text:00406B7B
.text:00406B7B loc_406B7B:                             ; CODE XREF: sub_406AF0+458↓j
.text:00406B7B                 mov     ebp, [esp+6Ch+arg_4]
.text:00406B7F                 mov     [ebp+10h], eax
.text:00406B82                 mov     [ebp+14h], edx
.text:00406B85
.text:00406B85 loc_406B85:                             ; CODE XREF: sub_406AF0+6B↑j
.text:00406B85                 mov     edi, [esp+6Ch+String1]
.text:00406B89                 xor     ebx, ebx
.text:00406B8B                 test    edi, edi
.text:00406B8D                 jz      loc_406E03
.text:00406B93                 mov     esi, [esp+6Ch+String1]
.text:00406B97                 cmp     byte ptr [esi], 0
.text:00406B9A                 jnz     loc_406E10
.text:00406BA0
.text:00406BA0 loc_406BA0:                             ; CODE XREF: sub_406AF0+38C↓j
.text:00406BA0                                         ; sub_406AF0+397↓j
.text:00406BA0                 mov     ebp, [esp+6Ch+String1]
.text:00406BA4                 test    ebp, ebp
.text:00406BA6                 jz      loc_406E03
.text:00406BAC                 mov     [esp+6Ch+lpProcName], 2Eh ; '.' ; Ch
.text:00406BB4                 mov     edi, [esp+6Ch+String1]
.text:00406BB8                 mov     [esp+6Ch+Str], edi ; Str
.text:00406BBB                 call    strrchr
.text:00406BC0                 test    eax, eax
.text:00406BC2                 jz      loc_406E03
.text:00406BC8                 cld
.text:00406BC9                 mov     ecx, 5
.text:00406BCE                 mov     esi, eax
.text:00406BD0                 mov     edi, offset aLnk ; ".lnk"
.text:00406BD5                 repe cmpsb
.text:00406BD7                 setz    cl
.text:00406BDA                 movzx   eax, cl
.text:00406BDD                 lea     esi, [esi+0]
.text:00406BE0
.text:00406BE0 loc_406BE0:                             ; CODE XREF: sub_406AF0+315↓j
.text:00406BE0                 test    eax, eax
.text:00406BE2                 jz      short loc_406BEA
.text:00406BE4                 or      ebx, 0A000h
.text:00406BEA
.text:00406BEA loc_406BEA:                             ; CODE XREF: sub_406AF0+F2↑j
.text:00406BEA                 mov     esi, [esp+6Ch+arg_4]
.text:00406BEE                 xor     ecx, ecx
.text:00406BF0                 mov     edi, ds:dword_4101D0
.text:00406BF6                 or      [esi], ebx
.text:00406BF8                 mov     ebx, [esi+14h]
.text:00406BFB                 mov     ebp, [esi+10h]
.text:00406BFE                 mov     eax, ebx
.text:00406C00                 xor     eax, ecx
.text:00406C02                 xor     ebp, edi
.text:00406C04                 or      eax, ebp
.text:00406C06                 jnz     loc_406D90
.text:00406C0C
.text:00406C0C loc_406C0C:                             ; CODE XREF: sub_406AF0+30E↓j
.text:00406C0C                 mov     ecx, dword_40F030
.text:00406C12                 xor     esi, esi
.text:00406C14                 xor     edi, edi
.text:00406C16                 mov     edx, [esp+6Ch+arg_4]
.text:00406C1A                 mov     [edx+50h], ecx
.text:00406C1D                 mov     [esp+6Ch+Str], offset aKernel32 ; "KERNEL32"
.text:00406C24                 call    LoadLibraryA
.text:00406C29                 sub     esp, 4
.text:00406C2C                 mov     ebp, eax
.text:00406C2E                 mov     [esp+6Ch+lpProcName], offset aGetcompressedf ; "GetCompressedFileSizeA"
.text:00406C36                 mov     [esp+6Ch+Str], eax ; hModule
.text:00406C39                 call    GetProcAddress
.text:00406C3E                 sub     esp, 8
.text:00406C41                 test    eax, eax
.text:00406C43                 jz      short loc_406C78
.text:00406C45                 mov     ebx, [esp+6Ch+String1]
.text:00406C49                 lea     esi, [esp+6Ch+var_2C]
.text:00406C4D                 mov     [esp+6Ch+lpProcName], esi
.text:00406C51                 mov     [esp+6Ch+Str], ebx
.text:00406C54                 call    eax
.text:00406C56                 sub     esp, 8
.text:00406C59                 mov     ebx, eax
.text:00406C5B                 cmp     eax, 0FFFFFFFFh
.text:00406C5E                 jz      loc_406D79
.text:00406C64
.text:00406C64 loc_406C64:                             ; CODE XREF: sub_406AF0+29A↓j
.text:00406C64                 mov     esi, dword ptr [esp+6Ch+var_2C]
.text:00406C68                 mov     ecx, ebx
.text:00406C6A                 xor     edi, edi
.text:00406C6C                 xor     ebx, ebx
.text:00406C6E                 mov     edx, esi
.text:00406C70                 mov     esi, ecx
.text:00406C72                 or      esi, edi
.text:00406C74                 mov     edi, ebx
.text:00406C76                 or      edi, edx
.text:00406C78
.text:00406C78 loc_406C78:                             ; CODE XREF: sub_406AF0+153↑j
.text:00406C78                                         ; sub_406AF0+294↓j
.text:00406C78                 test    ebp, ebp
.text:00406C7A                 jz      short loc_406C87
.text:00406C7C                 mov     [esp+6Ch+Str], ebp ; hLibModule
.text:00406C7F                 call    FreeLibrary
.text:00406C84                 sub     esp, 4
.text:00406C87
.text:00406C87 loc_406C87:                             ; CODE XREF: sub_406AF0+18A↑j
.text:00406C87                 mov     ebp, edi
.text:00406C89                 mov     edx, ebp
.text:00406C8B                 mov     edi, esi
.text:00406C8D                 or      edx, esi
.text:00406C8F                 jnz     short loc_406C9B
.text:00406C91                 mov     eax, [esp+6Ch+arg_4]
.text:00406C95                 mov     edi, [eax+30h]
.text:00406C98                 mov     ebp, [eax+34h]
.text:00406C9B
.text:00406C9B loc_406C9B:                             ; CODE XREF: sub_406AF0+19F↑j
.text:00406C9B                 mov     [esp+6Ch+lpProcName], ebp
.text:00406C9F                 mov     ebx, dword_40F030
.text:00406CA5                 xor     esi, esi
.text:00406CA7                 mov     [esp+6Ch+var_60], esi
.text:00406CAB                 mov     [esp+6Ch+Str], edi
.text:00406CAE                 mov     [esp+6Ch+var_64], ebx
.text:00406CB2                 call    sub_40D4D0
.text:00406CB7                 mov     [esp+6Ch+var_3C], eax
.text:00406CBB                 mov     ecx, dword_40F030
.text:00406CC1                 mov     [esp+6Ch+lpProcName], ebp
.text:00406CC5                 mov     [esp+6Ch+var_38], edx
.text:00406CC9                 shr     ecx, 9
.text:00406CCC                 mov     [esp+6Ch+var_44], ecx
.text:00406CD0                 mov     [esp+6Ch+var_40], 0
.text:00406CD8                 mov     [esp+6Ch+var_64], ebx
.text:00406CDC                 mov     [esp+6Ch+var_60], esi
.text:00406CE0                 mov     [esp+6Ch+Str], edi
.text:00406CE3                 call    sub_40D5F0
.text:00406CE8                 mov     ebp, edx
.text:00406CEA                 or      ebp, eax
.text:00406CEC                 jz      short loc_406D50
.text:00406CEE                 mov     ebp, [esp+6Ch+var_3C]
.text:00406CF2                 mov     esi, [esp+6Ch+var_38]
.text:00406CF6                 mov     eax, [esp+6Ch+var_44]
.text:00406CFA                 mov     [esp+6Ch+var_4C], ebp
.text:00406CFE                 mov     ecx, [esp+6Ch+var_40]
.text:00406D02                 mov     ebx, [esp+6Ch+var_44]
.text:00406D06                 add     [esp+6Ch+var_4C], 1
.text:00406D0B                 mov     [esp+6Ch+var_48], esi
.text:00406D0F                 mov     edi, [esp+6Ch+var_4C]
.text:00406D13                 adc     [esp+6Ch+var_48], 0
.text:00406D18                 mul     [esp+6Ch+var_4C]
.text:00406D1C                 imul    ecx, edi
.text:00406D1F                 mov     esi, eax
.text:00406D21                 mov     eax, [esp+6Ch+var_48]
.text:00406D25                 add     edx, ecx
.text:00406D27                 imul    ebx, eax
.text:00406D2A                 lea     edi, [ebx+edx]
.text:00406D2D
.text:00406D2D loc_406D2D:                             ; CODE XREF: sub_406AF0+287↓j
.text:00406D2D                 mov     ebx, [esp+6Ch+arg_4]
.text:00406D31                 mov     [ebx+58h], esi
.text:00406D34                 mov     esi, [esp+6Ch+lpRootPathName]
.text:00406D38                 mov     [ebx+5Ch], edi
.text:00406D3B                 mov     [esp+6Ch+Str], esi ; Block
.text:00406D3E                 call    free
.text:00406D43
.text:00406D43 loc_406D43:                             ; CODE XREF: sub_406AF0+21↑j
.text:00406D43                 add     esp, 5Ch
.text:00406D46                 xor     eax, eax
.text:00406D48                 pop     ebx
.text:00406D49                 pop     esi
.text:00406D4A                 pop     edi
.text:00406D4B                 pop     ebp
.text:00406D4C                 retn
.text:00406D4C ; ---------------------------------------------------------------------------
.text:00406D4D                 align 10h
.text:00406D50
.text:00406D50 loc_406D50:                             ; CODE XREF: sub_406AF0+1FC↑j
.text:00406D50                 mov     eax, [esp+6Ch+var_3C]
.text:00406D54                 mov     edi, [esp+6Ch+var_40]
.text:00406D58                 mov     ecx, [esp+6Ch+var_3C]
.text:00406D5C                 mul     [esp+6Ch+var_44]
.text:00406D60                 mov     ebx, [esp+6Ch+var_44]
.text:00406D64                 imul    ecx, edi
.text:00406D67                 mov     ebp, edx
.text:00406D69                 mov     esi, eax
.text:00406D6B                 mov     edx, [esp+6Ch+var_38]
.text:00406D6F                 add     ebp, ecx
.text:00406D71                 imul    ebx, edx
.text:00406D74                 lea     edi, [ebx+ebp]
.text:00406D77                 jmp     short loc_406D2D
.text:00406D79 ; ---------------------------------------------------------------------------
.text:00406D79
.text:00406D79 loc_406D79:                             ; CODE XREF: sub_406AF0+16E↑j
.text:00406D79                 call    GetLastError
.text:00406D7E                 xor     esi, esi
.text:00406D80                 xor     edi, edi
.text:00406D82                 test    eax, eax
.text:00406D84                 jnz     loc_406C78
.text:00406D8A                 jmp     loc_406C64
.text:00406D8A ; ---------------------------------------------------------------------------
.text:00406D8F                 align 10h
.text:00406D90
.text:00406D90 loc_406D90:                             ; CODE XREF: sub_406AF0+116↑j
.text:00406D90                 mov     edx, [esp+6Ch+lpRootPathName]
.text:00406D94                 lea     ecx, [esp+6Ch+var_20]
.text:00406D98                 lea     ebx, [esp+6Ch+var_1C]
.text:00406D9C                 mov     [esp+6Ch+var_5C], ebx ; LPDWORD
.text:00406DA0                 lea     edi, [esp+6Ch+var_24]
.text:00406DA4                 lea     ebp, [esp+6Ch+var_28]
.text:00406DA8                 mov     [esp+6Ch+var_60], ecx ; LPDWORD
.text:00406DAC                 mov     [esp+6Ch+var_64], edi ; LPDWORD
.text:00406DB0                 mov     [esp+6Ch+lpProcName], ebp ; LPDWORD
.text:00406DB4                 mov     [esp+6Ch+Str], edx ; LPCSTR
.text:00406DB7                 call    sub_408F10
.text:00406DBC                 test    eax, eax
.text:00406DBE                 jnz     short loc_406DE0
.text:00406DC0                 mov     [esp+6Ch+var_28], 1
.text:00406DC8                 mov     [esp+6Ch+var_24], 200h
.text:00406DD0                 mov     [esp+6Ch+var_20], 0
.text:00406DD8                 mov     [esp+6Ch+var_1C], 0
.text:00406DE0
.text:00406DE0 loc_406DE0:                             ; CODE XREF: sub_406AF0+2CE↑j
.text:00406DE0                 mov     ebp, [esp+6Ch+var_24]
.text:00406DE4                 mov     edi, [esp+6Ch+var_28]
.text:00406DE8                 mov     eax, [esp+6Ch+arg_4]
.text:00406DEC                 imul    ebp, edi
.text:00406DEF                 mov     esi, [eax+10h]
.text:00406DF2                 mov     dword_40F030, ebp
.text:00406DF8                 mov     ds:dword_4101D0, esi
.text:00406DFE                 jmp     loc_406C0C
.text:00406E03 ; ---------------------------------------------------------------------------
.text:00406E03
.text:00406E03 loc_406E03:                             ; CODE XREF: sub_406AF0+9D↑j
.text:00406E03                                         ; sub_406AF0+B6↑j ...
.text:00406E03                 xor     eax, eax
.text:00406E05                 jmp     loc_406BE0
.text:00406E05 ; ---------------------------------------------------------------------------
.text:00406E0A                 align 10h
.text:00406E10
.text:00406E10 loc_406E10:                             ; CODE XREF: sub_406AF0+AA↑j
.text:00406E10                 mov     [esp+6Ch+Str], offset LibFileName ; "KERNEL32.DLL"
.text:00406E17                 xor     ebp, ebp
.text:00406E19                 call    GetModuleHandleA
.text:00406E1E                 sub     esp, 4
.text:00406E21                 mov     edi, eax
.text:00406E23                 mov     [esp+6Ch+lpProcName], offset aGetbinarytypea ; "GetBinaryTypeA"
.text:00406E2B                 mov     [esp+6Ch+Str], eax ; hModule
.text:00406E2E                 call    GetProcAddress
.text:00406E33                 sub     esp, 8
.text:00406E36                 mov     edx, eax
.text:00406E38                 test    eax, eax
.text:00406E3A                 jz      short loc_406E54
.text:00406E3C                 mov     eax, [esp+6Ch+String1]
.text:00406E40                 lea     ecx, [esp+6Ch+var_18]
.text:00406E44                 mov     [esp+6Ch+lpProcName], ecx
.text:00406E48                 mov     [esp+6Ch+Str], eax
.text:00406E4B                 call    edx
.text:00406E4D                 sub     esp, 8
.text:00406E50                 test    eax, eax
.text:00406E52                 jnz     short loc_406EB8
.text:00406E54
.text:00406E54 loc_406E54:                             ; CODE XREF: sub_406AF0+34A↑j
.text:00406E54                 mov     edx, ds:Str
.text:00406E5A                 test    edx, edx
.text:00406E5C                 jz      short loc_406ED7
.text:00406E5E
.text:00406E5E loc_406E5E:                             ; CODE XREF: sub_406AF0+3FA↓j
.text:00406E5E                                         ; sub_406AF0+40C↓j
.text:00406E5E                 mov     eax, [esp+6Ch+String1]
.text:00406E62                 test    eax, eax
.text:00406E64                 jz      short loc_406E6F
.text:00406E66                 mov     esi, [esp+6Ch+String1]
.text:00406E6A                 cmp     byte ptr [esi], 0
.text:00406E6D                 jnz     short loc_406E8C
.text:00406E6F
.text:00406E6F loc_406E6F:                             ; CODE XREF: sub_406AF0+374↑j
.text:00406E6F                                         ; sub_406AF0+3B0↓j ...
.text:00406E6F                 mov     [esp+6Ch+Str], edi ; hLibModule
.text:00406E72                 call    FreeLibrary
.text:00406E77                 sub     esp, 4
.text:00406E7A                 test    ebp, ebp
.text:00406E7C                 jz      loc_406BA0
.text:00406E82                 mov     ebx, 49h ; 'I'
.text:00406E87                 jmp     loc_406BA0
.text:00406E8C ; ---------------------------------------------------------------------------
.text:00406E8C
.text:00406E8C loc_406E8C:                             ; CODE XREF: sub_406AF0+37D↑j
.text:00406E8C                 mov     [esp+6Ch+Str], esi ; Str
.text:00406E8F                 mov     [esp+6Ch+lpProcName], 2Eh ; '.' ; Ch
.text:00406E97                 call    strrchr
.text:00406E9C                 test    eax, eax
.text:00406E9E                 mov     esi, eax
.text:00406EA0                 jz      short loc_406E6F
.text:00406EA2                 mov     [esp+6Ch+lpProcName], eax ; SubStr
.text:00406EA6                 mov     ecx, ds:Str
.text:00406EAC                 mov     [esp+6Ch+Str], ecx ; Str
.text:00406EAF                 call    strstr
.text:00406EB4                 test    eax, eax
.text:00406EB6                 jz      short loc_406EBF
.text:00406EB8
.text:00406EB8 loc_406EB8:                             ; CODE XREF: sub_406AF0+362↑j
.text:00406EB8                                         ; sub_406AF0+3E5↓j
.text:00406EB8                 mov     ebp, 1
.text:00406EBD                 jmp     short loc_406E6F
.text:00406EBF ; ---------------------------------------------------------------------------
.text:00406EBF
.text:00406EBF loc_406EBF:                             ; CODE XREF: sub_406AF0+3C6↑j
.text:00406EBF                 mov     [esp+6Ch+lpProcName], esi ; SubStr
.text:00406EC3                 mov     edx, off_40F034 ; ".com;.exe;.bat;.cmd"
.text:00406EC9                 mov     [esp+6Ch+Str], edx ; Str
.text:00406ECC                 call    strstr
.text:00406ED1                 test    eax, eax
.text:00406ED3                 jz      short loc_406E6F
.text:00406ED5                 jmp     short loc_406EB8
.text:00406ED7 ; ---------------------------------------------------------------------------
.text:00406ED7
.text:00406ED7 loc_406ED7:                             ; CODE XREF: sub_406AF0+36C↑j
.text:00406ED7                 mov     [esp+6Ch+Str], offset VarName ; "PATHEXT"
.text:00406EDE                 call    getenv
.text:00406EE3                 mov     ds:Str, eax
.text:00406EE8                 test    eax, eax
.text:00406EEA                 jnz     loc_406E5E
.text:00406EF0                 mov     esi, off_40F034 ; ".com;.exe;.bat;.cmd"
.text:00406EF6                 mov     ds:Str, esi
.text:00406EFC                 jmp     loc_406E5E
.text:00406F01 ; ---------------------------------------------------------------------------
.text:00406F01
.text:00406F01 loc_406F01:                             ; CODE XREF: sub_406AF0+81↑j
.text:00406F01                                         ; sub_406AF0+452↓j
.text:00406F01                 shld    edi, esi, 8
.text:00406F05                 movsx   eax, cl
.text:00406F08                 shl     esi, 8
.text:00406F0B                 cdq
.text:00406F0C                 add     esi, eax
.text:00406F0E                 adc     edi, edx
.text:00406F10                 mov     edx, edi
.text:00406F12                 xor     ebx, ebx
.text:00406F14                 and     edx, 0FF000000h
.text:00406F1A                 mov     eax, edx
.text:00406F1C                 or      eax, ebx
.text:00406F1E                 jz      short loc_406F39
.text:00406F20                 mov     ecx, edx
.text:00406F22                 xor     eax, eax
.text:00406F24                 shr     ecx, 10h
.text:00406F27                 mov     edx, esi
.text:00406F29                 xor     edx, ecx
.text:00406F2B                 mov     ecx, edi
.text:00406F2D                 xor     ecx, eax
.text:00406F2F                 mov     esi, edx
.text:00406F31                 mov     edi, ecx
.text:00406F33                 and     edi, 0FFFFFFh
.text:00406F39
.text:00406F39 loc_406F39:                             ; CODE XREF: sub_406AF0+42E↑j
.text:00406F39                 inc     ebp
.text:00406F3A                 movzx   ebx, byte ptr [ebp+0]
.text:00406F3E                 test    bl, bl
.text:00406F40                 mov     cl, bl
.text:00406F42                 jnz     short loc_406F01
.text:00406F44                 mov     eax, esi
.text:00406F46                 mov     edx, edi
.text:00406F48                 jmp     loc_406B7B
.text:00406F48 ; ---------------------------------------------------------------------------
.text:00406F4D                 align 10h
.text:00406F50
.text:00406F50 loc_406F50:                             ; CODE XREF: sub_406AF0+3F↑j
.text:00406F50                                         ; sub_406AF0+57↑j
.text:00406F50                 mov     edi, [esp+6Ch+lpRootPathName]
.text:00406F54                 mov     ebp, [esp+6Ch+String1]
.text:00406F58                 mov     [esp+6Ch+lpProcName], edi ; String2
.text:00406F5C                 mov     [esp+6Ch+Str], ebp ; String1
.text:00406F5F                 call    _stricmp
.text:00406F64                 test    eax, eax
.text:00406F66                 jnz     short loc_406F80
.text:00406F68                 mov     ebx, [esp+6Ch+arg_4]
.text:00406F6C                 mov     dword ptr [ebx+8], 5
.text:00406F73                 mov     dword ptr [ebx+0Ch], 50000h
.text:00406F7A                 jmp     loc_406B4D
.text:00406F7A ; ---------------------------------------------------------------------------
.text:00406F7F                 align 10h
.text:00406F80
.text:00406F80 loc_406F80:                             ; CODE XREF: sub_406AF0+476↑j
.text:00406F80                 mov     ebp, [esp+6Ch+String1]
.text:00406F84                 xor     esi, esi
.text:00406F86                 xor     edi, edi
.text:00406F88                 add     ebp, ebx
.text:00406F8A                 jz      short loc_406F94
.text:00406F8C                 movzx   ecx, byte ptr [ebp+0]
.text:00406F90                 test    cl, cl
.text:00406F92                 jnz     short loc_406FA7
.text:00406F94
.text:00406F94 loc_406F94:                             ; CODE XREF: sub_406AF0+49A↑j
.text:00406F94                 xor     eax, eax
.text:00406F96                 xor     edx, edx
.text:00406F98
.text:00406F98 loc_406F98:                             ; CODE XREF: sub_406AF0+4FE↓j
.text:00406F98                 mov     ebp, [esp+6Ch+arg_4]
.text:00406F9C                 mov     [ebp+8], eax
.text:00406F9F                 mov     [ebp+0Ch], edx
.text:00406FA2                 jmp     loc_406B4D
.text:00406FA7 ; ---------------------------------------------------------------------------
.text:00406FA7
.text:00406FA7 loc_406FA7:                             ; CODE XREF: sub_406AF0+4A2↑j
.text:00406FA7                                         ; sub_406AF0+4F8↓j
.text:00406FA7                 shld    edi, esi, 8
.text:00406FAB                 movsx   eax, cl
.text:00406FAE                 shl     esi, 8
.text:00406FB1                 cdq
.text:00406FB2                 add     esi, eax
.text:00406FB4                 adc     edi, edx
.text:00406FB6                 mov     edx, edi
.text:00406FB8                 xor     ebx, ebx
.text:00406FBA                 and     edx, 0FF000000h
.text:00406FC0                 mov     eax, edx
.text:00406FC2                 or      eax, ebx
.text:00406FC4                 jz      short loc_406FDF
.text:00406FC6                 mov     ecx, edx
.text:00406FC8                 xor     eax, eax
.text:00406FCA                 shr     ecx, 10h
.text:00406FCD                 mov     edx, esi
.text:00406FCF                 xor     edx, ecx
.text:00406FD1                 mov     ecx, edi
.text:00406FD3                 xor     ecx, eax
.text:00406FD5                 mov     esi, edx
.text:00406FD7                 mov     edi, ecx
.text:00406FD9                 and     edi, 0FFFFFFh
.text:00406FDF
.text:00406FDF loc_406FDF:                             ; CODE XREF: sub_406AF0+4D4↑j
.text:00406FDF                 inc     ebp
.text:00406FE0                 movzx   ebx, byte ptr [ebp+0]
.text:00406FE4                 test    bl, bl
.text:00406FE6                 mov     cl, bl
.text:00406FE8                 jnz     short loc_406FA7
.text:00406FEA                 mov     eax, esi
.text:00406FEC                 mov     edx, edi
.text:00406FEE                 jmp     short loc_406F98
.text:00406FEE sub_406AF0      endp
.text:00406FEE
.text:00406FF0
.text:00406FF0 ; =============== S U B R O U T I N E =======================================
.text:00406FF0
.text:00406FF0
.text:00406FF0 ; int __cdecl sub_406FF0(LPCSTR)
.text:00406FF0 sub_406FF0      proc near               ; CODE XREF: sub_408610+CA↓p
.text:00406FF0
.text:00406FF0 lpRootPathName  = dword ptr -83Ch
.text:00406FF0 lpVolumeNameBuffer= dword ptr -838h
.text:00406FF0 nVolumeNameSize = dword ptr -834h
.text:00406FF0 lpVolumeSerialNumber= dword ptr -830h
.text:00406FF0 lpMaximumComponentLength= dword ptr -82Ch
.text:00406FF0 lpFileSystemFlags= dword ptr -828h
.text:00406FF0 lpFileSystemNameBuffer= dword ptr -824h
.text:00406FF0 nFileSystemNameSize= dword ptr -820h
.text:00406FF0 VolumeSerialNumber= dword ptr -818h
.text:00406FF0 MaximumComponentLength= dword ptr -814h
.text:00406FF0 FileSystemFlags = dword ptr -810h
.text:00406FF0 FileSystemNameBuffer= byte ptr -80Ch
.text:00406FF0 VolumeNameBuffer= byte ptr -40Ch
.text:00406FF0 var_4           = dword ptr -4
.text:00406FF0 arg_0           = dword ptr  4
.text:00406FF0
.text:00406FF0                 sub     esp, 83Ch
.text:00406FF6                 mov     [esp+83Ch+var_4], ebx
.text:00406FFD                 mov     ebx, [esp+83Ch+arg_0]
.text:00407004                 mov     [esp+83Ch+lpRootPathName], ebx ; LPCSTR
.text:00407007                 call    sub_4084F0
.text:0040700C                 mov     [esp+83Ch+lpRootPathName], eax
.text:0040700F                 call    sub_409600
.text:00407014                 mov     [esp+83Ch+lpRootPathName], eax ; lpRootPathName
.text:00407017                 lea     edx, [esp+83Ch+FileSystemNameBuffer]
.text:0040701B                 mov     ebx, eax
.text:0040701D                 mov     [esp+83Ch+lpFileSystemNameBuffer], edx ; lpFileSystemNameBuffer
.text:00407021                 lea     ecx, [esp+83Ch+FileSystemFlags]
.text:00407025                 lea     edx, [esp+83Ch+MaximumComponentLength]
.text:00407029                 mov     [esp+83Ch+lpFileSystemFlags], ecx ; lpFileSystemFlags
.text:0040702D                 lea     ecx, [esp+83Ch+VolumeSerialNumber]
.text:00407031                 mov     [esp+83Ch+lpMaximumComponentLength], edx ; lpMaximumComponentLength
.text:00407035                 lea     edx, [esp+83Ch+VolumeNameBuffer]
.text:0040703C                 mov     [esp+83Ch+lpVolumeSerialNumber], ecx ; lpVolumeSerialNumber
.text:00407040                 mov     [esp+83Ch+lpVolumeNameBuffer], edx ; lpVolumeNameBuffer
.text:00407044                 mov     [esp+83Ch+nFileSystemNameSize], 400h ; nFileSystemNameSize
.text:0040704C                 mov     [esp+83Ch+nVolumeNameSize], 400h ; nVolumeNameSize
.text:00407054                 call    GetVolumeInformationA
.text:00407059                 sub     esp, 20h
.text:0040705C                 test    eax, eax
.text:0040705E                 setz    cl
.text:00407061                 mov     [esp+83Ch+lpRootPathName], ebx ; Block
.text:00407064                 movzx   edx, cl
.text:00407067                 dec     edx
.text:00407068                 and     [esp+83Ch+VolumeSerialNumber], edx
.text:0040706C                 call    free
.text:00407071                 mov     eax, [esp+83Ch+VolumeSerialNumber]
.text:00407075                 mov     ebx, [esp+83Ch+var_4]
.text:0040707C                 add     esp, 83Ch
.text:00407082                 retn
.text:00407082 sub_406FF0      endp
.text:00407082
.text:00407082 ; ---------------------------------------------------------------------------
.text:00407083                 align 10h
.text:00407090                 push    ebp
.text:00407091                 push    edi
.text:00407092                 xor     edi, edi
.text:00407094                 push    esi
.text:00407095                 xor     esi, esi
.text:00407097                 push    ebx
.text:00407098                 mov     ebp, [esp+14h]
.text:0040709C                 test    ebp, ebp
.text:0040709E                 jz      short loc_4070A8
.text:004070A0                 movzx   ecx, byte ptr [ebp+0]
.text:004070A4                 test    cl, cl
.text:004070A6                 jnz     short loc_4070B1
.text:004070A8
.text:004070A8 loc_4070A8:                             ; CODE XREF: .text:0040709E↑j
.text:004070A8                 xor     eax, eax
.text:004070AA                 xor     edx, edx
.text:004070AC
.text:004070AC loc_4070AC:                             ; CODE XREF: .text:004070F8↓j
.text:004070AC                 pop     ebx
.text:004070AD                 pop     esi
.text:004070AE                 pop     edi
.text:004070AF                 pop     ebp
.text:004070B0                 retn
.text:004070B1 ; ---------------------------------------------------------------------------
.text:004070B1
.text:004070B1 loc_4070B1:                             ; CODE XREF: .text:004070A6↑j
.text:004070B1                                         ; .text:004070F2↓j
.text:004070B1                 shld    edi, esi, 8
.text:004070B5                 movsx   eax, cl
.text:004070B8                 shl     esi, 8
.text:004070BB                 cdq
.text:004070BC                 add     esi, eax
.text:004070BE                 adc     edi, edx
.text:004070C0                 mov     edx, edi
.text:004070C2                 xor     ebx, ebx
.text:004070C4                 and     edx, 0FF000000h
.text:004070CA                 mov     eax, edx
.text:004070CC                 or      eax, ebx
.text:004070CE                 jz      short loc_4070E9
.text:004070D0                 mov     ecx, edx
.text:004070D2                 xor     eax, eax
.text:004070D4                 shr     ecx, 10h
.text:004070D7                 mov     edx, esi
.text:004070D9                 xor     edx, ecx
.text:004070DB                 mov     ecx, edi
.text:004070DD                 xor     ecx, eax
.text:004070DF                 mov     esi, edx
.text:004070E1                 mov     edi, ecx
.text:004070E3                 and     edi, 0FFFFFFh
.text:004070E9
.text:004070E9 loc_4070E9:                             ; CODE XREF: .text:004070CE↑j
.text:004070E9                 inc     ebp
.text:004070EA                 movzx   ebx, byte ptr [ebp+0]
.text:004070EE                 test    bl, bl
.text:004070F0                 mov     cl, bl
.text:004070F2                 jnz     short loc_4070B1
.text:004070F4                 mov     eax, esi
.text:004070F6                 mov     edx, edi
.text:004070F8                 jmp     short loc_4070AC
.text:004070F8 ; ---------------------------------------------------------------------------
.text:004070FA                 align 10h
.text:00407100                 sub     esp, 2Ch
.text:00407103                 lea     edx, [esp+24h]
.text:00407107                 lea     ecx, [esp+28h]
.text:0040710B                 mov     [esp+0Ch], edx
.text:0040710F                 lea     edx, [esp+1Ch]
.text:00407113                 mov     [esp+4], edx
.text:00407117                 mov     edx, [esp+30h]
.text:0040711B                 mov     [esp+10h], ecx
.text:0040711F                 lea     ecx, [esp+20h]
.text:00407123                 mov     [esp+8], ecx
.text:00407127                 mov     [esp], edx
.text:0040712A                 call    sub_408F10
.text:0040712F                 test    eax, eax
.text:00407131                 jnz     short loc_407153
.text:00407133                 mov     dword ptr [esp+1Ch], 1
.text:0040713B                 mov     dword ptr [esp+20h], 200h
.text:00407143                 mov     dword ptr [esp+24h], 0
.text:0040714B                 mov     dword ptr [esp+28h], 0
.text:00407153
.text:00407153 loc_407153:                             ; CODE XREF: .text:00407131↑j
.text:00407153                 mov     eax, [esp+20h]
.text:00407157                 mov     ecx, [esp+1Ch]
.text:0040715B                 add     esp, 2Ch
.text:0040715E                 imul    eax, ecx
.text:00407161                 retn
.text:00407161 ; ---------------------------------------------------------------------------
.text:00407162                 align 10h
.text:00407170                 sub     esp, 1Ch
.text:00407173                 mov     eax, [esp+20h]
.text:00407177                 mov     [esp+14h], esi
.text:0040717B                 mov     [esp+18h], edi
.text:0040717F                 test    eax, eax
.text:00407181                 jz      short loc_4071C0
.text:00407183                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:0040718B                 mov     [esp], eax
.text:0040718E                 call    strrchr
.text:00407193                 test    eax, eax
.text:00407195                 jz      short loc_4071C0
.text:00407197                 cld
.text:00407198                 mov     esi, eax
.text:0040719A                 mov     edi, offset aLnk ; ".lnk"
.text:0040719F                 mov     ecx, 5
.text:004071A4                 repe cmpsb
.text:004071A6                 setz    dl
.text:004071A9                 movzx   eax, dl
.text:004071AC                 lea     esi, [esi+0]
.text:004071B0
.text:004071B0 loc_4071B0:                             ; CODE XREF: .text:004071C2↓j
.text:004071B0                 mov     esi, [esp+14h]
.text:004071B4                 mov     edi, [esp+18h]
.text:004071B8                 add     esp, 1Ch
.text:004071BB                 retn
.text:004071BB ; ---------------------------------------------------------------------------
.text:004071BC                 align 10h
.text:004071C0
.text:004071C0 loc_4071C0:                             ; CODE XREF: .text:00407181↑j
.text:004071C0                                         ; .text:00407195↑j
.text:004071C0                 xor     eax, eax
.text:004071C2                 jmp     short loc_4071B0
.text:004071C2 ; ---------------------------------------------------------------------------
.text:004071C4                 align 10h
.text:004071D0                 sub     esp, 1Ch
.text:004071D3                 mov     [esp+10h], ebx
.text:004071D7                 mov     ebx, [esp+20h]
.text:004071DB                 mov     [esp+14h], esi
.text:004071DF                 mov     [esp+18h], edi
.text:004071E3                 xor     edi, edi
.text:004071E5                 mov     dword ptr [esp], offset LibFileName ; "KERNEL32.DLL"
.text:004071EC                 call    GetModuleHandleA
.text:004071F1                 sub     esp, 4
.text:004071F4                 mov     esi, eax
.text:004071F6                 mov     dword ptr [esp+4], offset aGetbinarytypea ; "GetBinaryTypeA"
.text:004071FE                 mov     [esp], eax
.text:00407201                 call    GetProcAddress
.text:00407206                 sub     esp, 8
.text:00407209                 test    eax, eax
.text:0040720B                 jz      short loc_407221
.text:0040720D                 mov     [esp], ebx
.text:00407210                 lea     ecx, [esp+0Ch]
.text:00407214                 mov     [esp+4], ecx
.text:00407218                 call    eax
.text:0040721A                 sub     esp, 8
.text:0040721D                 test    eax, eax
.text:0040721F                 jnz     short loc_407280
.text:00407221
.text:00407221 loc_407221:                             ; CODE XREF: .text:0040720B↑j
.text:00407221                 mov     eax, ds:Str
.text:00407226                 test    eax, eax
.text:00407228                 jz      short loc_4072A0
.text:0040722A
.text:0040722A loc_40722A:                             ; CODE XREF: .text:004072B3↓j
.text:0040722A                                         ; .text:004072C5↓j
.text:0040722A                 test    ebx, ebx
.text:0040722C                 jz      short loc_407233
.text:0040722E                 cmp     byte ptr [ebx], 0
.text:00407231                 jnz     short loc_407250
.text:00407233
.text:00407233 loc_407233:                             ; CODE XREF: .text:0040722C↑j
.text:00407233                                         ; .text:00407264↓j ...
.text:00407233                 mov     [esp], esi
.text:00407236                 call    FreeLibrary
.text:0040723B                 sub     esp, 4
.text:0040723E                 mov     eax, edi
.text:00407240                 mov     ebx, [esp+10h]
.text:00407244                 mov     esi, [esp+14h]
.text:00407248                 mov     edi, [esp+18h]
.text:0040724C                 add     esp, 1Ch
.text:0040724F                 retn
.text:00407250 ; ---------------------------------------------------------------------------
.text:00407250
.text:00407250 loc_407250:                             ; CODE XREF: .text:00407231↑j
.text:00407250                 mov     [esp], ebx
.text:00407253                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:0040725B                 call    strrchr
.text:00407260                 test    eax, eax
.text:00407262                 mov     ebx, eax
.text:00407264                 jz      short loc_407233
.text:00407266                 mov     [esp+4], eax
.text:0040726A                 mov     ecx, ds:Str
.text:00407270                 mov     [esp], ecx
.text:00407273                 call    strstr
.text:00407278                 test    eax, eax
.text:0040727A                 jz      short loc_407287
.text:0040727C                 lea     esi, [esi+0]
.text:00407280
.text:00407280 loc_407280:                             ; CODE XREF: .text:0040721F↑j
.text:00407280                                         ; .text:0040729D↓j
.text:00407280                 mov     edi, 1
.text:00407285                 jmp     short loc_407233
.text:00407287 ; ---------------------------------------------------------------------------
.text:00407287
.text:00407287 loc_407287:                             ; CODE XREF: .text:0040727A↑j
.text:00407287                 mov     [esp+4], ebx
.text:0040728B                 mov     ebx, off_40F034 ; ".com;.exe;.bat;.cmd"
.text:00407291                 mov     [esp], ebx
.text:00407294                 call    strstr
.text:00407299                 test    eax, eax
.text:0040729B                 jz      short loc_407233
.text:0040729D                 jmp     short loc_407280
.text:0040729D ; ---------------------------------------------------------------------------
.text:0040729F                 align 10h
.text:004072A0
.text:004072A0 loc_4072A0:                             ; CODE XREF: .text:00407228↑j
.text:004072A0                 mov     dword ptr [esp], offset VarName ; "PATHEXT"
.text:004072A7                 call    getenv
.text:004072AC                 mov     ds:Str, eax
.text:004072B1                 test    eax, eax
.text:004072B3                 jnz     loc_40722A
.text:004072B9                 mov     edx, off_40F034 ; ".com;.exe;.bat;.cmd"
.text:004072BF                 mov     ds:Str, edx
.text:004072C5                 jmp     loc_40722A
.text:004072C5 ; ---------------------------------------------------------------------------
.text:004072CA                 align 10h
.text:004072D0                 sub     esp, 0Ch
.text:004072D3                 mov     edx, [esp+10h]
.text:004072D7                 mov     [esp], edx
.text:004072DA                 call    GetFileType
.text:004072DF                 sub     esp, 4
.text:004072E2                 xor     edx, edx
.text:004072E4                 cmp     eax, 2
.text:004072E7                 jz      short loc_407300
.text:004072E9                 cmp     eax, 3
.text:004072EC                 jz      short loc_4072F4
.text:004072EE
.text:004072EE loc_4072EE:                             ; CODE XREF: .text:004072F9↓j
.text:004072EE                                         ; .text:00407305↓j
.text:004072EE                 mov     eax, edx
.text:004072F0                 add     esp, 0Ch
.text:004072F3                 retn
.text:004072F4 ; ---------------------------------------------------------------------------
.text:004072F4
.text:004072F4 loc_4072F4:                             ; CODE XREF: .text:004072EC↑j
.text:004072F4                 mov     edx, 1000h
.text:004072F9                 jmp     short loc_4072EE
.text:004072F9 ; ---------------------------------------------------------------------------
.text:004072FB                 align 10h
.text:00407300
.text:00407300 loc_407300:                             ; CODE XREF: .text:004072E7↑j
.text:00407300                 mov     edx, 2000h
.text:00407305                 jmp     short loc_4072EE
.text:00407305 ; ---------------------------------------------------------------------------
.text:00407307                 align 10h
.text:00407310                 mov     ecx, [esp+4]
.text:00407314                 xor     edx, edx
.text:00407316                 test    cl, 10h
.text:00407319                 setz    dl
.text:0040731C                 dec     edx
.text:0040731D                 and     edx, 0FFFFC000h
.text:00407323                 add     edx, 8000h
.text:00407329                 or      edx, 124h
.text:0040732F                 test    cl, 1
.text:00407332                 movzx   eax, dx
.text:00407335                 jnz     short locret_40733C
.text:00407337                 or      eax, 92h
.text:0040733C
.text:0040733C locret_40733C:                          ; CODE XREF: .text:00407335↑j
.text:0040733C                 retn
.text:0040733C ; ---------------------------------------------------------------------------
.text:0040733D                 align 10h
.text:00407340                 sub     esp, 2Ch
.text:00407343                 mov     [esp+20h], esi
.text:00407347                 mov     esi, [esp+30h]
.text:0040734B                 mov     [esp+1Ch], ebx
.text:0040734F                 xor     ebx, ebx
.text:00407351                 test    esi, esi
.text:00407353                 mov     [esp+24h], edi
.text:00407357                 mov     [esp+28h], ebp
.text:0040735B                 jz      short loc_4073B0
.text:0040735D                 cmp     byte ptr [esi], 0
.text:00407360                 jnz     short loc_4073B4
.text:00407362
.text:00407362 loc_407362:                             ; CODE XREF: .text:0040741C↓j
.text:00407362                                         ; .text:00407427↓j
.text:00407362                 test    esi, esi
.text:00407364                 jz      short loc_4073B0
.text:00407366                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:0040736E                 mov     [esp], esi
.text:00407371                 call    strrchr
.text:00407376                 test    eax, eax
.text:00407378                 jz      short loc_4073B0
.text:0040737A                 cld
.text:0040737B                 mov     ecx, 5
.text:00407380                 mov     esi, eax
.text:00407382                 mov     edi, offset aLnk ; ".lnk"
.text:00407387                 repe cmpsb
.text:00407389                 setz    cl
.text:0040738C                 movzx   eax, cl
.text:0040738F                 nop
.text:00407390
.text:00407390 loc_407390:                             ; CODE XREF: .text:004073B2↓j
.text:00407390                 test    eax, eax
.text:00407392                 jz      short loc_40739A
.text:00407394                 or      ebx, 0A000h
.text:0040739A
.text:0040739A loc_40739A:                             ; CODE XREF: .text:00407392↑j
.text:0040739A                 mov     eax, ebx
.text:0040739C                 mov     esi, [esp+20h]
.text:004073A0                 mov     ebx, [esp+1Ch]
.text:004073A4                 mov     edi, [esp+24h]
.text:004073A8                 mov     ebp, [esp+28h]
.text:004073AC                 add     esp, 2Ch
.text:004073AF                 retn
.text:004073B0 ; ---------------------------------------------------------------------------
.text:004073B0
.text:004073B0 loc_4073B0:                             ; CODE XREF: .text:0040735B↑j
.text:004073B0                                         ; .text:00407364↑j ...
.text:004073B0                 xor     eax, eax
.text:004073B2                 jmp     short loc_407390
.text:004073B4 ; ---------------------------------------------------------------------------
.text:004073B4
.text:004073B4 loc_4073B4:                             ; CODE XREF: .text:00407360↑j
.text:004073B4                 mov     dword ptr [esp], offset LibFileName ; "KERNEL32.DLL"
.text:004073BB                 call    GetModuleHandleA
.text:004073C0                 sub     esp, 4
.text:004073C3                 mov     ebp, eax
.text:004073C5                 mov     dword ptr [esp+4], offset aGetbinarytypea ; "GetBinaryTypeA"
.text:004073CD                 mov     [esp], eax
.text:004073D0                 call    GetProcAddress
.text:004073D5                 sub     esp, 8
.text:004073D8                 test    eax, eax
.text:004073DA                 mov     dword ptr [esp+14h], 0
.text:004073E2                 jz      short loc_4073F8
.text:004073E4                 mov     [esp], esi
.text:004073E7                 lea     ecx, [esp+18h]
.text:004073EB                 mov     [esp+4], ecx
.text:004073EF                 call    eax
.text:004073F1                 sub     esp, 8
.text:004073F4                 test    eax, eax
.text:004073F6                 jnz     short loc_407458
.text:004073F8
.text:004073F8 loc_4073F8:                             ; CODE XREF: .text:004073E2↑j
.text:004073F8                 mov     edx, ds:Str
.text:004073FE                 test    edx, edx
.text:00407400                 jz      short loc_407480
.text:00407402
.text:00407402 loc_407402:                             ; CODE XREF: .text:00407493↓j
.text:00407402                                         ; .text:004074A5↓j
.text:00407402                 test    esi, esi
.text:00407404                 jz      short loc_40740B
.text:00407406                 cmp     byte ptr [esi], 0
.text:00407409                 jnz     short loc_40742C
.text:0040740B
.text:0040740B loc_40740B:                             ; CODE XREF: .text:00407404↑j
.text:0040740B                                         ; .text:00407440↓j ...
.text:0040740B                 mov     [esp], ebp
.text:0040740E                 call    FreeLibrary
.text:00407413                 sub     esp, 4
.text:00407416                 mov     eax, [esp+14h]
.text:0040741A                 test    eax, eax
.text:0040741C                 jz      loc_407362
.text:00407422                 mov     ebx, 49h ; 'I'
.text:00407427                 jmp     loc_407362
.text:0040742C ; ---------------------------------------------------------------------------
.text:0040742C
.text:0040742C loc_40742C:                             ; CODE XREF: .text:00407409↑j
.text:0040742C                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:00407434                 mov     [esp], esi
.text:00407437                 call    strrchr
.text:0040743C                 test    eax, eax
.text:0040743E                 mov     edi, eax
.text:00407440                 jz      short loc_40740B
.text:00407442                 mov     [esp+4], eax
.text:00407446                 mov     edx, ds:Str
.text:0040744C                 mov     [esp], edx
.text:0040744F                 call    strstr
.text:00407454                 test    eax, eax
.text:00407456                 jz      short loc_407462
.text:00407458
.text:00407458 loc_407458:                             ; CODE XREF: .text:004073F6↑j
.text:00407458                                         ; .text:00407478↓j
.text:00407458                 mov     dword ptr [esp+14h], 1
.text:00407460                 jmp     short loc_40740B
.text:00407462 ; ---------------------------------------------------------------------------
.text:00407462
.text:00407462 loc_407462:                             ; CODE XREF: .text:00407456↑j
.text:00407462                 mov     [esp+4], edi
.text:00407466                 mov     edi, off_40F034 ; ".com;.exe;.bat;.cmd"
.text:0040746C                 mov     [esp], edi
.text:0040746F                 call    strstr
.text:00407474                 test    eax, eax
.text:00407476                 jz      short loc_40740B
.text:00407478                 jmp     short loc_407458
.text:00407478 ; ---------------------------------------------------------------------------
.text:0040747A                 align 10h
.text:00407480
.text:00407480 loc_407480:                             ; CODE XREF: .text:00407400↑j
.text:00407480                 mov     dword ptr [esp], offset VarName ; "PATHEXT"
.text:00407487                 call    getenv
.text:0040748C                 mov     ds:Str, eax
.text:00407491                 test    eax, eax
.text:00407493                 jnz     loc_407402
.text:00407499                 mov     ecx, off_40F034 ; ".com;.exe;.bat;.cmd"
.text:0040749F                 mov     ds:Str, ecx
.text:004074A5                 jmp     loc_407402
.text:004074A5 ; ---------------------------------------------------------------------------
.text:004074AA                 align 10h
.text:004074B0                 push    esi
.text:004074B1                 push    ebx
.text:004074B2                 sub     esp, 864h
.text:004074B8                 mov     ebx, [esp+870h]
.text:004074BF                 lea     edx, [esp+830h]
.text:004074C6                 mov     esi, [esp+874h]
.text:004074CD                 mov     [esp+4], edx
.text:004074D1                 mov     [esp], ebx
.text:004074D4                 call    sub_406330
.text:004074D9                 xor     edx, edx
.text:004074DB                 test    eax, eax
.text:004074DD                 jz      loc_4075C5
.text:004074E3                 mov     ecx, [esp+830h]
.text:004074EA                 test    cl, 10h
.text:004074ED                 mov     [esi], ecx
.text:004074EF                 mov     eax, [esp+834h]
.text:004074F6                 mov     edx, [esp+838h]
.text:004074FD                 mov     [esi+4], eax
.text:00407500                 mov     [esi+8], edx
.text:00407503                 mov     eax, [esp+83Ch]
.text:0040750A                 mov     edx, [esp+840h]
.text:00407511                 mov     [esi+0Ch], eax
.text:00407514                 mov     [esi+10h], edx
.text:00407517                 mov     edx, [esp+848h]
.text:0040751E                 mov     eax, [esp+844h]
.text:00407525                 mov     [esi+18h], edx
.text:00407528                 mov     [esi+14h], eax
.text:0040752B                 mov     edx, [esp+84Ch]
.text:00407532                 mov     [esi+20h], edx
.text:00407535                 mov     edx, [esp+850h]
.text:0040753C                 mov     [esi+24h], edx
.text:0040753F                 jnz     loc_4075D0
.text:00407545                 mov     dword ptr [esi+28h], 1
.text:0040754C
.text:0040754C loc_40754C:                             ; CODE XREF: .text:004075DB↓j
.text:0040754C                 mov     [esp], ebx
.text:0040754F                 call    sub_4084F0
.text:00407554                 mov     [esp], eax
.text:00407557                 call    sub_409600
.text:0040755C                 mov     [esp], eax
.text:0040755F                 lea     edx, [esp+30h]
.text:00407563                 mov     ebx, eax
.text:00407565                 mov     [esp+18h], edx
.text:00407569                 lea     ecx, [esp+2Ch]
.text:0040756D                 lea     edx, [esp+28h]
.text:00407571                 mov     [esp+14h], ecx
.text:00407575                 lea     ecx, [esp+24h]
.text:00407579                 mov     [esp+10h], edx
.text:0040757D                 lea     edx, [esp+430h]
.text:00407584                 mov     [esp+0Ch], ecx
.text:00407588                 mov     [esp+4], edx
.text:0040758C                 mov     dword ptr [esp+1Ch], 400h
.text:00407594                 mov     dword ptr [esp+8], 400h
.text:0040759C                 call    GetVolumeInformationA
.text:004075A1                 sub     esp, 20h
.text:004075A4                 test    eax, eax
.text:004075A6                 setz    cl
.text:004075A9                 mov     [esp], ebx
.text:004075AC                 movzx   edx, cl
.text:004075AF                 dec     edx
.text:004075B0                 and     [esp+24h], edx
.text:004075B4                 call    free
.text:004075B9                 mov     ecx, [esp+24h]
.text:004075BD                 mov     edx, 1
.text:004075C2                 mov     [esi+1Ch], ecx
.text:004075C5
.text:004075C5 loc_4075C5:                             ; CODE XREF: .text:004074DD↑j
.text:004075C5                 add     esp, 864h
.text:004075CB                 mov     eax, edx
.text:004075CD                 pop     ebx
.text:004075CE                 pop     esi
.text:004075CF                 retn
.text:004075D0 ; ---------------------------------------------------------------------------
.text:004075D0
.text:004075D0 loc_4075D0:                             ; CODE XREF: .text:0040753F↑j
.text:004075D0                 mov     [esp], ebx
.text:004075D3                 call    sub_4064A0
.text:004075D8                 mov     [esi+28h], eax
.text:004075DB                 jmp     loc_40754C
.text:004075E0 ; ---------------------------------------------------------------------------
.text:004075E0                 push    ebp
.text:004075E1                 xor     edx, edx
.text:004075E3                 push    edi
.text:004075E4                 push    esi
.text:004075E5                 xor     esi, esi
.text:004075E7                 push    ebx
.text:004075E8                 sub     esp, 1Ch
.text:004075EB                 mov     ebx, [esp+5Ch]
.text:004075EF                 mov     ecx, [esp+30h]
.text:004075F3                 mov     edi, [esp+60h]
.text:004075F7                 or      esi, ebx
.text:004075F9                 mov     eax, [esp+4Ch]
.text:004075FD                 or      edi, edx
.text:004075FF                 mov     ebx, [esp+64h]
.text:00407603                 xor     edx, edx
.text:00407605                 test    cl, 10h
.text:00407608                 setz    dl
.text:0040760B                 mov     [ebx+10h], eax
.text:0040760E                 mov     [ebx+8], edi
.text:00407611                 mov     [ebx+0Ch], esi
.text:00407614                 dec     edx
.text:00407615                 and     edx, 0FFFFC000h
.text:0040761B                 mov     dword ptr [ebx+14h], 0
.text:00407622                 add     edx, 8000h
.text:00407628                 or      edx, 124h
.text:0040762E                 test    cl, 1
.text:00407631                 movzx   eax, dx
.text:00407634                 jnz     short loc_40763B
.text:00407636                 or      eax, 92h
.text:0040763B
.text:0040763B loc_40763B:                             ; CODE XREF: .text:00407634↑j
.text:0040763B                 mov     ebx, [esp+54h]
.text:0040763F                 xor     edx, edx
.text:00407641                 xor     ebp, ebp
.text:00407643                 mov     edi, [esp+50h]
.text:00407647                 mov     ecx, [esp+64h]
.text:0040764B                 mov     esi, edi
.text:0040764D                 or      [ecx], eax
.text:0040764F                 mov     edi, ebx
.text:00407651                 or      edi, ebp
.text:00407653                 mov     ebp, edx
.text:00407655                 mov     ebx, [esp+64h]
.text:00407659                 or      ebp, esi
.text:0040765B                 mov     esi, [esp+58h]
.text:0040765F                 mov     edx, [esp+40h]
.text:00407663                 mov     [ebx+30h], edi
.text:00407666                 mov     [ebx+18h], esi
.text:00407669                 mov     ecx, edx
.text:0040766B                 xor     esi, esi
.text:0040766D                 mov     [ebx+34h], ebp
.text:00407670                 xor     edx, edx
.text:00407672                 or      esi, ecx
.text:00407674                 mov     dword ptr [esp+8], 989680h
.text:0040767C                 mov     ebx, [esp+3Ch]
.text:00407680                 mov     ecx, esi
.text:00407682                 mov     dword ptr [esp+0Ch], 0
.text:0040768A                 or      ebx, edx
.text:0040768C                 mov     edx, ebx
.text:0040768E                 sub     edx, 0D53E8000h
.text:00407694                 sbb     ecx, 19DB1DEh
.text:0040769A                 mov     [esp+4], ecx
.text:0040769E                 mov     [esp], edx
.text:004076A1                 call    sub_40D4D0
.text:004076A6                 mov     edx, eax
.text:004076A8                 mov     ecx, [esp+64h]
.text:004076AC                 shr     eax, 1Fh
.text:004076AF                 dec     eax
.text:004076B0                 and     edx, eax
.text:004076B2                 mov     [ecx+38h], edx
.text:004076B5                 mov     [esp], ebx
.text:004076B8                 mov     [esp+4], esi
.text:004076BC                 mov     dword ptr [esp+8], 989680h
.text:004076C4                 mov     dword ptr [esp+0Ch], 0
.text:004076CC                 call    sub_40D5F0
.text:004076D1                 lea     ecx, [eax+eax*4]
.text:004076D4                 lea     esi, [ecx+ecx*4]
.text:004076D7                 mov     eax, [esp+64h]
.text:004076DB                 shl     esi, 2
.text:004076DE                 mov     ebx, esi
.text:004076E0                 shr     ebx, 1Fh
.text:004076E3                 dec     ebx
.text:004076E4                 and     ebx, esi
.text:004076E6                 xor     esi, esi
.text:004076E8                 mov     [eax+3Ch], ebx
.text:004076EB                 mov     edx, [esp+38h]
.text:004076EF                 mov     dword ptr [esp+8], 989680h
.text:004076F7                 mov     ebx, [esp+34h]
.text:004076FB                 mov     dword ptr [esp+0Ch], 0
.text:00407703                 mov     ecx, edx
.text:00407705                 xor     edx, edx
.text:00407707                 or      ebx, edx
.text:00407709                 or      esi, ecx
.text:0040770B                 mov     edx, ebx
.text:0040770D                 sub     edx, 0D53E8000h
.text:00407713                 mov     ecx, esi
.text:00407715                 sbb     ecx, 19DB1DEh
.text:0040771B                 mov     [esp+4], ecx
.text:0040771F                 mov     [esp], edx
.text:00407722                 call    sub_40D4D0
.text:00407727                 mov     edx, eax
.text:00407729                 mov     ecx, [esp+64h]
.text:0040772D                 shr     eax, 1Fh
.text:00407730                 dec     eax
.text:00407731                 and     edx, eax
.text:00407733                 mov     [ecx+48h], edx
.text:00407736                 mov     [esp], ebx
.text:00407739                 mov     [esp+4], esi
.text:0040773D                 mov     dword ptr [esp+8], 989680h
.text:00407745                 mov     dword ptr [esp+0Ch], 0
.text:0040774D                 call    sub_40D5F0
.text:00407752                 lea     edx, [eax+eax*4]
.text:00407755                 mov     ebx, [esp+64h]
.text:00407759                 lea     ecx, [edx+edx*4]
.text:0040775C                 shl     ecx, 2
.text:0040775F                 mov     esi, ecx
.text:00407761                 shr     esi, 1Fh
.text:00407764                 dec     esi
.text:00407765                 and     esi, ecx
.text:00407767                 mov     [ebx+4Ch], esi
.text:0040776A                 mov     edx, [esp+48h]
.text:0040776E                 xor     esi, esi
.text:00407770                 mov     dword ptr [esp+8], 989680h
.text:00407778                 mov     ebx, [esp+44h]
.text:0040777C                 mov     dword ptr [esp+0Ch], 0
.text:00407784                 mov     ecx, edx
.text:00407786                 xor     edx, edx
.text:00407788                 or      ebx, edx
.text:0040778A                 or      esi, ecx
.text:0040778C                 mov     edx, ebx
.text:0040778E                 sub     edx, 0D53E8000h
.text:00407794                 mov     ecx, esi
.text:00407796                 sbb     ecx, 19DB1DEh
.text:0040779C                 mov     [esp+4], ecx
.text:004077A0                 mov     [esp], edx
.text:004077A3                 call    sub_40D4D0
.text:004077A8                 mov     edx, eax
.text:004077AA                 mov     ecx, [esp+64h]
.text:004077AE                 shr     eax, 1Fh
.text:004077B1                 dec     eax
.text:004077B2                 and     edx, eax
.text:004077B4                 mov     [ecx+40h], edx
.text:004077B7                 mov     [esp+4], esi
.text:004077BB                 mov     dword ptr [esp+8], 989680h
.text:004077C3                 mov     dword ptr [esp+0Ch], 0
.text:004077CB                 mov     [esp], ebx
.text:004077CE                 call    sub_40D5F0
.text:004077D3                 lea     edx, [eax+eax*4]
.text:004077D6                 lea     esi, [edx+edx*4]
.text:004077D9                 mov     eax, [esp+64h]
.text:004077DD                 shl     esi, 2
.text:004077E0                 mov     edx, ebp
.text:004077E2                 mov     ecx, esi
.text:004077E4                 mov     dword ptr [eax+50h], 200h
.text:004077EB                 shr     ecx, 1Fh
.text:004077EE                 dec     ecx
.text:004077EF                 and     ecx, esi
.text:004077F1                 test    ebp, ebp
.text:004077F3                 mov     [eax+44h], ecx
.text:004077F6                 mov     eax, edi
.text:004077F8                 js      short loc_407832
.text:004077FA
.text:004077FA loc_4077FA:                             ; CODE XREF: .text:0040783A↓j
.text:004077FA                 xor     esi, esi
.text:004077FC                 mov     ebp, edi
.text:004077FE                 mov     ecx, eax
.text:00407800                 shrd    ecx, edx, 9
.text:00407804                 mov     ebx, edx
.text:00407806                 and     ebp, 1FFh
.text:0040780C                 mov     eax, esi
.text:0040780E                 sar     ebx, 9
.text:00407811                 or      eax, ebp
.text:00407813                 jz      short loc_40781B
.text:00407815                 add     ecx, 1
.text:00407818                 adc     ebx, 0
.text:0040781B
.text:0040781B loc_40781B:                             ; CODE XREF: .text:00407813↑j
.text:0040781B                 mov     edx, [esp+64h]
.text:0040781F                 mov     eax, 1
.text:00407824                 mov     [edx+58h], ecx
.text:00407827                 mov     [edx+5Ch], ebx
.text:0040782A                 add     esp, 1Ch
.text:0040782D                 pop     ebx
.text:0040782E                 pop     esi
.text:0040782F                 pop     edi
.text:00407830                 pop     ebp
.text:00407831                 retn
.text:00407832 ; ---------------------------------------------------------------------------
.text:00407832
.text:00407832 loc_407832:                             ; CODE XREF: .text:004077F8↑j
.text:00407832                 add     eax, 1FFh
.text:00407837                 adc     edx, 0
.text:0040783A                 jmp     short loc_4077FA
.text:0040783A ; ---------------------------------------------------------------------------
.text:0040783C                 align 10h
.text:00407840                 push    ebp
.text:00407841                 push    edi
.text:00407842                 xor     edi, edi
.text:00407844                 push    esi
.text:00407845                 xor     esi, esi
.text:00407847                 push    ebx
.text:00407848                 sub     esp, 0Ch
.text:0040784B                 mov     dword ptr [esp], offset aKernel32 ; "KERNEL32"
.text:00407852                 call    LoadLibraryA
.text:00407857                 sub     esp, 4
.text:0040785A                 mov     ebp, eax
.text:0040785C                 mov     dword ptr [esp+4], offset aGetcompressedf ; "GetCompressedFileSizeA"
.text:00407864                 mov     [esp], eax
.text:00407867                 call    GetProcAddress
.text:0040786C                 sub     esp, 8
.text:0040786F                 test    eax, eax
.text:00407871                 jz      short loc_4078A2
.text:00407873                 lea     ecx, [esp+8]
.text:00407877                 mov     [esp+4], ecx
.text:0040787B                 mov     ecx, [esp+20h]
.text:0040787F                 mov     [esp], ecx
.text:00407882                 call    eax
.text:00407884                 sub     esp, 8
.text:00407887                 mov     ebx, eax
.text:00407889                 cmp     eax, 0FFFFFFFFh
.text:0040788C                 jz      short loc_4078BD
.text:0040788E
.text:0040788E loc_40788E:                             ; CODE XREF: .text:004078C6↓j
.text:0040788E                 mov     esi, [esp+8]
.text:00407892                 mov     ecx, ebx
.text:00407894                 xor     edi, edi
.text:00407896                 xor     ebx, ebx
.text:00407898                 mov     edx, esi
.text:0040789A                 mov     esi, ecx
.text:0040789C                 or      esi, edi
.text:0040789E                 mov     edi, ebx
.text:004078A0                 or      edi, edx
.text:004078A2
.text:004078A2 loc_4078A2:                             ; CODE XREF: .text:00407871↑j
.text:004078A2                                         ; .text:004078C4↓j
.text:004078A2                 test    ebp, ebp
.text:004078A4                 jz      short loc_4078B1
.text:004078A6                 mov     [esp], ebp
.text:004078A9                 call    FreeLibrary
.text:004078AE                 sub     esp, 4
.text:004078B1
.text:004078B1 loc_4078B1:                             ; CODE XREF: .text:004078A4↑j
.text:004078B1                 add     esp, 0Ch
.text:004078B4                 mov     eax, esi
.text:004078B6                 mov     edx, edi
.text:004078B8                 pop     ebx
.text:004078B9                 pop     esi
.text:004078BA                 pop     edi
.text:004078BB                 pop     ebp
.text:004078BC                 retn
.text:004078BD ; ---------------------------------------------------------------------------
.text:004078BD
.text:004078BD loc_4078BD:                             ; CODE XREF: .text:0040788C↑j
.text:004078BD                 call    GetLastError
.text:004078C2                 test    eax, eax
.text:004078C4                 jnz     short loc_4078A2
.text:004078C6                 jmp     short loc_40788E
.text:004078C6 ; ---------------------------------------------------------------------------
.text:004078C8                 align 10h
.text:004078D0
.text:004078D0 ; =============== S U B R O U T I N E =======================================
.text:004078D0
.text:004078D0
.text:004078D0 ; int __cdecl sub_4078D0(LPCSTR lpFileName, int)
.text:004078D0 sub_4078D0      proc near               ; CODE XREF: sub_406010+1E01↓p
.text:004078D0
.text:004078D0 lpRootPathName  = dword ptr -8FCh
.text:004078D0 lpVolumeNameBuffer= dword ptr -8F8h
.text:004078D0 nVolumeNameSize = dword ptr -8F4h
.text:004078D0 lpVolumeSerialNumber= dword ptr -8F0h
.text:004078D0 lpMaximumComponentLength= dword ptr -8ECh
.text:004078D0 lpFileSystemFlags= dword ptr -8E8h
.text:004078D0 lpFileSystemNameBuffer= dword ptr -8E4h
.text:004078D0 nFileSystemNameSize= dword ptr -8E0h
.text:004078D0 VolumeSerialNumber= dword ptr -8D8h
.text:004078D0 MaximumComponentLength= dword ptr -8D4h
.text:004078D0 FileSystemFlags = dword ptr -8D0h
.text:004078D0 var_8CC         = dword ptr -8CCh
.text:004078D0 var_8C8         = dword ptr -8C8h
.text:004078D0 var_8C4         = dword ptr -8C4h
.text:004078D0 var_8C0         = dword ptr -8C0h
.text:004078D0 var_8BC         = dword ptr -8BCh
.text:004078D0 var_8B8         = dword ptr -8B8h
.text:004078D0 var_8B4         = dword ptr -8B4h
.text:004078D0 var_8B0         = dword ptr -8B0h
.text:004078D0 var_8AC         = dword ptr -8ACh
.text:004078D0 var_8A8         = dword ptr -8A8h
.text:004078D0 var_8A4         = dword ptr -8A4h
.text:004078D0 var_8A0         = dword ptr -8A0h
.text:004078D0 var_89C         = dword ptr -89Ch
.text:004078D0 FileSystemNameBuffer= byte ptr -88Ch
.text:004078D0 VolumeNameBuffer= byte ptr -48Ch
.text:004078D0 var_8C          = dword ptr -8Ch
.text:004078D0 var_88          = dword ptr -88h
.text:004078D0 var_84          = dword ptr -84h
.text:004078D0 var_80          = dword ptr -80h
.text:004078D0 var_7C          = dword ptr -7Ch
.text:004078D0 var_78          = dword ptr -78h
.text:004078D0 var_74          = dword ptr -74h
.text:004078D0 var_70          = dword ptr -70h
.text:004078D0 var_6C          = dword ptr -6Ch
.text:004078D0 var_5C          = dword ptr -5Ch
.text:004078D0 var_58          = dword ptr -58h
.text:004078D0 var_54          = dword ptr -54h
.text:004078D0 var_50          = dword ptr -50h
.text:004078D0 var_4C          = dword ptr -4Ch
.text:004078D0 var_48          = dword ptr -48h
.text:004078D0 var_44          = dword ptr -44h
.text:004078D0 var_3C          = dword ptr -3Ch
.text:004078D0 var_38          = dword ptr -38h
.text:004078D0 var_34          = dword ptr -34h
.text:004078D0 lpFileName      = dword ptr  4
.text:004078D0 arg_4           = dword ptr  8
.text:004078D0
.text:004078D0                 push    ebp
.text:004078D1                 xor     eax, eax
.text:004078D3                 mov     ecx, 0Dh
.text:004078D8                 push    edi
.text:004078D9                 push    esi
.text:004078DA                 push    ebx
.text:004078DB                 sub     esp, 8ECh
.text:004078E1                 lea     edi, [esp+8FCh+var_5C]
.text:004078E8                 cld
.text:004078E9                 lea     edx, [esp+8FCh+var_8C]
.text:004078F0                 rep stosd
.text:004078F2                 mov     [esp+8FCh+lpVolumeNameBuffer], edx ; int
.text:004078F6                 lea     esi, [esp+8FCh+var_5C]
.text:004078FD                 mov     edx, [esp+8FCh+lpFileName]
.text:00407904                 mov     [esp+8FCh+lpRootPathName], edx ; lpFileName
.text:00407907                 call    sub_406330
.text:0040790C                 test    eax, eax
.text:0040790E                 mov     edx, 0FFFFFFFFh
.text:00407913                 jz      loc_407CA4
.text:00407919                 mov     edx, [esp+8FCh+var_88]
.text:00407920                 mov     ebp, [esp+8FCh+var_84]
.text:00407927                 mov     edi, [esp+8FCh+var_80]
.text:0040792E                 mov     [esp+8FCh+var_58], edx
.text:00407935                 mov     ecx, [esp+8FCh+var_7C]
.text:0040793C                 mov     ebx, [esp+8FCh+var_8C]
.text:00407943                 mov     [esp+8FCh+var_54], ebp
.text:0040794A                 mov     edx, [esp+8FCh+var_78]
.text:00407951                 mov     ebp, [esp+8FCh+var_74]
.text:00407958                 mov     [esp+8FCh+var_50], edi
.text:0040795F                 test    bl, 10h
.text:00407962                 mov     edi, [esp+8FCh+var_70]
.text:00407969                 mov     [esp+8FCh+var_4C], ecx
.text:00407970                 mov     ecx, [esp+8FCh+var_6C]
.text:00407977                 mov     [esp+8FCh+var_5C], ebx
.text:0040797E                 mov     [esp+8FCh+var_48], edx
.text:00407985                 mov     [esp+8FCh+var_44], ebp
.text:0040798C                 mov     [esp+8FCh+var_3C], edi
.text:00407993                 mov     [esp+8FCh+var_38], ecx
.text:0040799A                 jnz     loc_407CC0
.text:004079A0                 mov     ebx, 1
.text:004079A5                 mov     [esp+8FCh+var_34], ebx
.text:004079AC
.text:004079AC loc_4079AC:                             ; CODE XREF: sub_4078D0+406↓j
.text:004079AC                 mov     eax, [esp+8FCh+lpFileName]
.text:004079B3                 lea     edi, [esp+8FCh+FileSystemNameBuffer]
.text:004079B7                 lea     ebx, [esp+8FCh+FileSystemFlags]
.text:004079BB                 mov     [esp+8FCh+lpRootPathName], eax ; LPCSTR
.text:004079BE                 call    sub_4084F0
.text:004079C3                 mov     [esp+8FCh+lpRootPathName], eax
.text:004079C6                 call    sub_409600
.text:004079CB                 mov     [esp+8FCh+lpFileSystemNameBuffer], edi ; lpFileSystemNameBuffer
.text:004079CF                 lea     ecx, [esp+8FCh+VolumeSerialNumber]
.text:004079D3                 mov     ebp, eax
.text:004079D5                 mov     [esp+8FCh+lpVolumeSerialNumber], ecx ; lpVolumeSerialNumber
.text:004079D9                 lea     edx, [esp+8FCh+MaximumComponentLength]
.text:004079DD                 lea     edi, [esp+8FCh+VolumeNameBuffer]
.text:004079E4                 mov     [esp+8FCh+lpFileSystemFlags], ebx ; lpFileSystemFlags
.text:004079E8                 mov     [esp+8FCh+lpMaximumComponentLength], edx ; lpMaximumComponentLength
.text:004079EC                 mov     [esp+8FCh+lpVolumeNameBuffer], edi ; lpVolumeNameBuffer
.text:004079F0                 mov     [esp+8FCh+nFileSystemNameSize], 400h ; nFileSystemNameSize
.text:004079F8                 mov     [esp+8FCh+nVolumeNameSize], 400h ; nVolumeNameSize
.text:00407A00                 mov     [esp+8FCh+lpRootPathName], eax ; lpRootPathName
.text:00407A03                 call    GetVolumeInformationA
.text:00407A08                 sub     esp, 20h
.text:00407A0B                 test    eax, eax
.text:00407A0D                 lea     edi, [esp+8FCh+var_8CC]
.text:00407A11                 setz    bl
.text:00407A14                 mov     [esp+8FCh+lpRootPathName], ebp ; Block
.text:00407A17                 xor     ebp, ebp
.text:00407A19                 movzx   edx, bl
.text:00407A1C                 dec     edx
.text:00407A1D                 xor     ebx, ebx
.text:00407A1F                 and     [esp+8FCh+VolumeSerialNumber], edx
.text:00407A23                 call    free
.text:00407A28                 cld
.text:00407A29                 mov     ecx, [esp+8FCh+VolumeSerialNumber]
.text:00407A2D                 mov     [esi+1Ch], ecx
.text:00407A30                 mov     ecx, 0Dh
.text:00407A35                 rep movsd
.text:00407A37                 mov     edi, [esp+8FCh+var_8A0]
.text:00407A3B                 mov     edx, [esp+8FCh+var_89C]
.text:00407A3F                 mov     ecx, [esp+8FCh+var_8CC]
.text:00407A43                 or      ebp, edi
.text:00407A45                 mov     esi, [esp+8FCh+var_8B0]
.text:00407A49                 mov     edi, [esp+8FCh+arg_4]
.text:00407A50                 or      edx, ebx
.text:00407A52                 mov     [edi+8], edx
.text:00407A55                 xor     edx, edx
.text:00407A57                 test    cl, 10h
.text:00407A5A                 setz    dl
.text:00407A5D                 mov     [edi+0Ch], ebp
.text:00407A60                 mov     [edi+10h], esi
.text:00407A63                 mov     dword ptr [edi+14h], 0
.text:00407A6A                 dec     edx
.text:00407A6B                 and     edx, 0FFFFC000h
.text:00407A71                 add     edx, 8000h
.text:00407A77                 or      edx, 124h
.text:00407A7D                 test    cl, 1
.text:00407A80                 movzx   eax, dx
.text:00407A83                 jnz     short loc_407A8A
.text:00407A85                 or      eax, 92h
.text:00407A8A
.text:00407A8A loc_407A8A:                             ; CODE XREF: sub_4078D0+1B3↑j
.text:00407A8A                 mov     ebx, [esp+8FCh+var_8A8]
.text:00407A8E                 xor     edx, edx
.text:00407A90                 xor     ebp, ebp
.text:00407A92                 mov     edi, [esp+8FCh+var_8AC]
.text:00407A96                 mov     ecx, [esp+8FCh+arg_4]
.text:00407A9D                 mov     esi, edi
.text:00407A9F                 or      [ecx], eax
.text:00407AA1                 mov     edi, ebx
.text:00407AA3                 or      edi, ebp
.text:00407AA5                 mov     ebp, edx
.text:00407AA7                 mov     ebx, [esp+8FCh+var_8A4]
.text:00407AAB                 or      ebp, esi
.text:00407AAD                 mov     esi, [esp+8FCh+arg_4]
.text:00407AB4                 mov     edx, [esp+8FCh+var_8BC]
.text:00407AB8                 mov     [esi+18h], ebx
.text:00407ABB                 mov     ebx, [esp+8FCh+var_8C0]
.text:00407ABF                 mov     ecx, edx
.text:00407AC1                 mov     [esi+30h], edi
.text:00407AC4                 xor     edx, edx
.text:00407AC6                 mov     [esi+34h], ebp
.text:00407AC9                 or      ebx, edx
.text:00407ACB                 xor     esi, esi
.text:00407ACD                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:00407AD5                 or      esi, ecx
.text:00407AD7                 mov     edx, ebx
.text:00407AD9                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:00407AE1                 sub     edx, 0D53E8000h
.text:00407AE7                 mov     ecx, esi
.text:00407AE9                 sbb     ecx, 19DB1DEh
.text:00407AEF                 mov     [esp+8FCh+lpVolumeNameBuffer], ecx
.text:00407AF3                 mov     [esp+8FCh+lpRootPathName], edx
.text:00407AF6                 call    sub_40D4D0
.text:00407AFB                 mov     edx, eax
.text:00407AFD                 mov     ecx, [esp+8FCh+arg_4]
.text:00407B04                 shr     eax, 1Fh
.text:00407B07                 dec     eax
.text:00407B08                 and     edx, eax
.text:00407B0A                 mov     [ecx+38h], edx
.text:00407B0D                 mov     [esp+8FCh+lpRootPathName], ebx
.text:00407B10                 mov     [esp+8FCh+lpVolumeNameBuffer], esi
.text:00407B14                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:00407B1C                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:00407B24                 call    sub_40D5F0
.text:00407B29                 lea     ecx, [eax+eax*4]
.text:00407B2C                 lea     ebx, [ecx+ecx*4]
.text:00407B2F                 mov     eax, [esp+8FCh+arg_4]
.text:00407B36                 shl     ebx, 2
.text:00407B39                 mov     esi, ebx
.text:00407B3B                 shr     esi, 1Fh
.text:00407B3E                 dec     esi
.text:00407B3F                 and     esi, ebx
.text:00407B41                 mov     [eax+3Ch], esi
.text:00407B44                 mov     edx, [esp+8FCh+var_8C4]
.text:00407B48                 xor     esi, esi
.text:00407B4A                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:00407B52                 mov     ebx, [esp+8FCh+var_8C8]
.text:00407B56                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:00407B5E                 mov     ecx, edx
.text:00407B60                 xor     edx, edx
.text:00407B62                 or      ebx, edx
.text:00407B64                 or      esi, ecx
.text:00407B66                 mov     edx, ebx
.text:00407B68                 sub     edx, 0D53E8000h
.text:00407B6E                 mov     ecx, esi
.text:00407B70                 sbb     ecx, 19DB1DEh
.text:00407B76                 mov     [esp+8FCh+lpVolumeNameBuffer], ecx
.text:00407B7A                 mov     [esp+8FCh+lpRootPathName], edx
.text:00407B7D                 call    sub_40D4D0
.text:00407B82                 mov     edx, eax
.text:00407B84                 mov     ecx, [esp+8FCh+arg_4]
.text:00407B8B                 shr     eax, 1Fh
.text:00407B8E                 dec     eax
.text:00407B8F                 and     edx, eax
.text:00407B91                 mov     [ecx+48h], edx
.text:00407B94                 mov     [esp+8FCh+lpRootPathName], ebx
.text:00407B97                 mov     [esp+8FCh+lpVolumeNameBuffer], esi
.text:00407B9B                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:00407BA3                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:00407BAB                 call    sub_40D5F0
.text:00407BB0                 lea     ecx, [eax+eax*4]
.text:00407BB3                 lea     ebx, [ecx+ecx*4]
.text:00407BB6                 mov     eax, [esp+8FCh+arg_4]
.text:00407BBD                 shl     ebx, 2
.text:00407BC0                 mov     esi, ebx
.text:00407BC2                 shr     esi, 1Fh
.text:00407BC5                 dec     esi
.text:00407BC6                 and     esi, ebx
.text:00407BC8                 mov     [eax+4Ch], esi
.text:00407BCB                 mov     edx, [esp+8FCh+var_8B4]
.text:00407BCF                 xor     esi, esi
.text:00407BD1                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:00407BD9                 mov     ebx, [esp+8FCh+var_8B8]
.text:00407BDD                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:00407BE5                 mov     ecx, edx
.text:00407BE7                 xor     edx, edx
.text:00407BE9                 or      ebx, edx
.text:00407BEB                 or      esi, ecx
.text:00407BED                 mov     edx, ebx
.text:00407BEF                 sub     edx, 0D53E8000h
.text:00407BF5                 mov     ecx, esi
.text:00407BF7                 sbb     ecx, 19DB1DEh
.text:00407BFD                 mov     [esp+8FCh+lpVolumeNameBuffer], ecx
.text:00407C01                 mov     [esp+8FCh+lpRootPathName], edx
.text:00407C04                 call    sub_40D4D0
.text:00407C09                 mov     edx, eax
.text:00407C0B                 mov     ecx, [esp+8FCh+arg_4]
.text:00407C12                 shr     eax, 1Fh
.text:00407C15                 dec     eax
.text:00407C16                 and     edx, eax
.text:00407C18                 mov     [ecx+40h], edx
.text:00407C1B                 mov     [esp+8FCh+lpRootPathName], ebx
.text:00407C1E                 mov     [esp+8FCh+lpVolumeNameBuffer], esi
.text:00407C22                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:00407C2A                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:00407C32                 call    sub_40D5F0
.text:00407C37                 lea     ebx, [eax+eax*4]
.text:00407C3A                 mov     esi, [esp+8FCh+arg_4]
.text:00407C41                 lea     edx, [ebx+ebx*4]
.text:00407C44                 shl     edx, 2
.text:00407C47                 mov     eax, edi
.text:00407C49                 mov     ecx, edx
.text:00407C4B                 mov     dword ptr [esi+50h], 200h
.text:00407C52                 shr     ecx, 1Fh
.text:00407C55                 dec     ecx
.text:00407C56                 and     ecx, edx
.text:00407C58                 test    ebp, ebp
.text:00407C5A                 mov     edx, ebp
.text:00407C5C                 mov     [esi+44h], ecx
.text:00407C5F                 js      short loc_407CB1
.text:00407C61
.text:00407C61 loc_407C61:                             ; CODE XREF: sub_4078D0+3E9↓j
.text:00407C61                 xor     esi, esi
.text:00407C63                 mov     ebp, edi
.text:00407C65                 mov     ecx, eax
.text:00407C67                 shrd    ecx, edx, 9
.text:00407C6B                 mov     ebx, edx
.text:00407C6D                 and     ebp, 1FFh
.text:00407C73                 mov     eax, esi
.text:00407C75                 sar     ebx, 9
.text:00407C78                 or      eax, ebp
.text:00407C7A                 jz      short loc_407C82
.text:00407C7C                 add     ecx, 1
.text:00407C7F                 adc     ebx, 0
.text:00407C82
.text:00407C82 loc_407C82:                             ; CODE XREF: sub_4078D0+3AA↑j
.text:00407C82                 mov     edx, [esp+8FCh+arg_4]
.text:00407C89                 mov     [edx+5Ch], ebx
.text:00407C8C                 mov     ebx, [esp+8FCh+lpFileName]
.text:00407C93                 mov     [edx+58h], ecx
.text:00407C96                 mov     [esp+8FCh+lpVolumeNameBuffer], edx ; int
.text:00407C9A                 mov     [esp+8FCh+lpRootPathName], ebx ; String1
.text:00407C9D                 call    sub_406AF0
.text:00407CA2                 xor     edx, edx
.text:00407CA4
.text:00407CA4 loc_407CA4:                             ; CODE XREF: sub_4078D0+43↑j
.text:00407CA4                 add     esp, 8ECh
.text:00407CAA                 mov     eax, edx
.text:00407CAC                 pop     ebx
.text:00407CAD                 pop     esi
.text:00407CAE                 pop     edi
.text:00407CAF                 pop     ebp
.text:00407CB0                 retn
.text:00407CB1 ; ---------------------------------------------------------------------------
.text:00407CB1
.text:00407CB1 loc_407CB1:                             ; CODE XREF: sub_4078D0+38F↑j
.text:00407CB1                 add     eax, 1FFh
.text:00407CB6                 adc     edx, 0
.text:00407CB9                 jmp     short loc_407C61
.text:00407CB9 ; ---------------------------------------------------------------------------
.text:00407CBB                 align 10h
.text:00407CC0
.text:00407CC0 loc_407CC0:                             ; CODE XREF: sub_4078D0+CA↑j
.text:00407CC0                 mov     eax, [esp+8FCh+lpFileName]
.text:00407CC7                 mov     [esp+8FCh+lpRootPathName], eax ; Str
.text:00407CCA                 call    sub_4064A0
.text:00407CCF                 mov     [esp+8FCh+var_34], eax
.text:00407CD6                 jmp     loc_4079AC
.text:00407CD6 sub_4078D0      endp
.text:00407CD6
.text:00407CD6 ; ---------------------------------------------------------------------------
.text:00407CDB                 align 10h
.text:00407CE0 ; START OF FUNCTION CHUNK FOR sub_406010
.text:00407CE0
.text:00407CE0 loc_407CE0:                             ; CODE XREF: sub_406010+26↑j
.text:00407CE0                 cld
.text:00407CE1                 sub     esp, 2Ch
.text:00407CE4                 xor     eax, eax
.text:00407CE6                 mov     [esp+2Ch+var_10], ebx
.text:00407CEA                 mov     ecx, 18h
.text:00407CEF                 mov     ebx, [esp+2Ch+arg_0]
.text:00407CF3                 mov     [esp+2Ch+var_C], esi
.text:00407CF7                 mov     esi, [esp+2Ch+arg_4]
.text:00407CFB                 test    ebx, ebx
.text:00407CFD                 mov     [esp+2Ch+var_8], edi
.text:00407D01                 mov     edi, esi
.text:00407D03                 mov     [esp+2Ch+var_4], ebp
.text:00407D07                 rep stosd
.text:00407D09                 jz      short loc_407D10
.text:00407D0B                 cmp     byte ptr [ebx], 0
.text:00407D0E                 jnz     short loc_407D28
.text:00407D10
.text:00407D10 loc_407D10:                             ; CODE XREF: sub_406010+1CF9↑j
.text:00407D10                 xor     edx, edx
.text:00407D12
.text:00407D12 loc_407D12:                             ; CODE XREF: sub_406010+1D2F↓j
.text:00407D12                                         ; sub_406010+1DD8↓j
.text:00407D12                 mov     ebx, [esp+2Ch+var_10]
.text:00407D16                 mov     eax, edx
.text:00407D18                 mov     esi, [esp+2Ch+var_C]
.text:00407D1C                 mov     edi, [esp+2Ch+var_8]
.text:00407D20                 mov     ebp, [esp+2Ch+var_4]
.text:00407D24                 add     esp, 2Ch
.text:00407D27                 retn
.text:00407D28 ; ---------------------------------------------------------------------------
.text:00407D28
.text:00407D28 loc_407D28:                             ; CODE XREF: sub_406010+1CFE↑j
.text:00407D28                 mov     [esp+2Ch+dwDesiredAccess], 0 ; int
.text:00407D30                 mov     [esp+2Ch+lpFileName], ebx ; lpFileName
.text:00407D33                 call    sub_406220
.text:00407D38                 test    eax, eax
.text:00407D3A                 mov     edx, 0FFFFFFFFh
.text:00407D3F                 jnz     short loc_407D12
.text:00407D41                 mov     [esp+2Ch+lpFileName], ebx ; LPCSTR
.text:00407D44                 call    sub_408390
.text:00407D49                 mov     [esp+2Ch+lpFileName], eax
.text:00407D4C                 call    sub_409600
.text:00407D51                 mov     [esp+2Ch+lpFileName], eax ; lpFileName
.text:00407D54                 mov     ebp, eax
.text:00407D56                 mov     [esp+2Ch+hTemplateFile], 0 ; hTemplateFile
.text:00407D5E                 mov     [esp+2Ch+dwFlagsAndAttributes], 2000001h ; dwFlagsAndAttributes
.text:00407D66                 mov     [esp+2Ch+dwCreationDisposition], 3 ; dwCreationDisposition
.text:00407D6E                 mov     [esp+2Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:00407D76                 mov     [esp+2Ch+dwShareMode], 0 ; dwShareMode
.text:00407D7E                 mov     [esp+2Ch+dwDesiredAccess], 0 ; dwDesiredAccess
.text:00407D86                 call    CreateFileA
.text:00407D8B                 sub     esp, 1Ch
.text:00407D8E                 mov     ebx, eax
.text:00407D90                 mov     [esp+2Ch+dwDesiredAccess], esi ; int
.text:00407D94                 mov     [esp+2Ch+lpFileName], eax ; hNamedPipe
.text:00407D97                 call    sub_406620
.text:00407D9C                 mov     [esp+2Ch+lpFileName], ebx ; hObject
.text:00407D9F                 mov     edi, eax
.text:00407DA1                 call    CloseHandle
.text:00407DA6                 sub     esp, 4
.text:00407DA9                 cmp     edi, 0FFFFFFFFh
.text:00407DAC                 jz      short loc_407E0A
.text:00407DAE                 mov     [esp+2Ch+dwDesiredAccess], esi ; int
.text:00407DB2                 mov     [esp+2Ch+lpFileName], ebp ; String1
.text:00407DB5                 call    sub_406AF0
.text:00407DBA
.text:00407DBA loc_407DBA:                             ; CODE XREF: sub_406010+1E08↓j
.text:00407DBA                 mov     edx, [esi]
.text:00407DBC                 and     edx, 0F000h
.text:00407DC2                 cmp     edx, 4000h
.text:00407DC8                 jz      short loc_407DFD
.text:00407DCA
.text:00407DCA loc_407DCA:                             ; CODE XREF: sub_406010+1DF8↓j
.text:00407DCA                 cmp     edi, 0FFFFFFFFh
.text:00407DCD                 jz      short loc_407DED
.text:00407DCF
.text:00407DCF loc_407DCF:                             ; CODE XREF: sub_406010+1DEB↓j
.text:00407DCF                 mov     [esp+2Ch+lpFileName], 0 ; uMode
.text:00407DD6                 call    SetErrorMode
.text:00407DDB                 sub     esp, 4
.text:00407DDE                 mov     [esp+2Ch+lpFileName], ebp ; Block
.text:00407DE1                 call    free
.text:00407DE6                 mov     edx, edi
.text:00407DE8                 jmp     loc_407D12
.text:00407DED ; ---------------------------------------------------------------------------
.text:00407DED
.text:00407DED loc_407DED:                             ; CODE XREF: sub_406010+1DBD↑j
.text:00407DED                 call    sub_408340
.text:00407DF2                 mov     esi, eax
.text:00407DF4                 call    _errno
.text:00407DF9                 mov     [eax], esi
.text:00407DFB                 jmp     short loc_407DCF
.text:00407DFD ; ---------------------------------------------------------------------------
.text:00407DFD
.text:00407DFD loc_407DFD:                             ; CODE XREF: sub_406010+1DB8↑j
.text:00407DFD                 mov     [esp+2Ch+lpFileName], ebp ; Str
.text:00407E00                 call    sub_4064A0
.text:00407E05                 mov     [esi+18h], eax
.text:00407E08                 jmp     short loc_407DCA
.text:00407E0A ; ---------------------------------------------------------------------------
.text:00407E0A
.text:00407E0A loc_407E0A:                             ; CODE XREF: sub_406010+1D9C↑j
.text:00407E0A                 mov     [esp+2Ch+dwDesiredAccess], esi ; int
.text:00407E0E                 mov     [esp+2Ch+lpFileName], ebp ; lpFileName
.text:00407E11                 call    sub_4078D0
.text:00407E16                 mov     edi, eax
.text:00407E18                 jmp     short loc_407DBA
.text:00407E18 ; END OF FUNCTION CHUNK FOR sub_406010
.text:00407E18 ; ---------------------------------------------------------------------------
.text:00407E1A                 align 10h
.text:00407E20
.text:00407E20 ; =============== S U B R O U T I N E =======================================
.text:00407E20
.text:00407E20
.text:00407E20 ; int __cdecl sub_407E20(LPCCH lpMultiByteStr, LPSTR lpString1)
.text:00407E20 sub_407E20      proc near               ; CODE XREF: sub_407FA0+93↓p
.text:00407E20
.text:00407E20 pvReserved      = dword ptr -35Ch
.text:00407E20 pUnkOuter       = dword ptr -358h
.text:00407E20 dwClsContext    = dword ptr -354h
.text:00407E20 riid            = dword ptr -350h
.text:00407E20 ppv             = dword ptr -34Ch
.text:00407E20 cchWideChar     = dword ptr -348h
.text:00407E20 var_334         = byte ptr -334h
.text:00407E20 var_330         = dword ptr -330h
.text:00407E20 String2         = byte ptr -32Ch
.text:00407E20 WideCharStr     = word ptr -21Ch
.text:00407E20 lpMultiByteStr  = dword ptr  4
.text:00407E20 lpString1       = dword ptr  8
.text:00407E20
.text:00407E20                 push    edi
.text:00407E21                 push    esi
.text:00407E22                 push    ebx
.text:00407E23                 sub     esp, 350h
.text:00407E29                 mov     edi, [esp+35Ch+lpString1]
.text:00407E30                 mov     byte ptr [edi], 0
.text:00407E33                 mov     [esp+35Ch+pvReserved], 0 ; pvReserved
.text:00407E3A                 call    OleInitialize
.text:00407E3F                 sub     esp, 4
.text:00407E42                 cmp     eax, 1
.text:00407E45                 ja      loc_407F7F
.text:00407E4B                 mov     [esp+35Ch+riid], offset riid ; riid
.text:00407E53                 lea     ecx, [esp+35Ch+var_330]
.text:00407E57                 mov     [esp+35Ch+ppv], ecx ; ppv
.text:00407E5B                 mov     [esp+35Ch+dwClsContext], 1 ; dwClsContext
.text:00407E63                 mov     [esp+35Ch+pUnkOuter], 0 ; pUnkOuter
.text:00407E6B                 mov     [esp+35Ch+pvReserved], offset rclsid ; rclsid
.text:00407E72                 call    CoCreateInstance
.text:00407E77                 sub     esp, 14h
.text:00407E7A                 test    eax, eax
.text:00407E7C                 js      loc_407F7F
.text:00407E82                 mov     ebx, [esp+35Ch+var_330]
.text:00407E86                 lea     edx, [esp+35Ch+var_334]
.text:00407E8A                 mov     esi, [ebx]
.text:00407E8C                 mov     [esp+35Ch+dwClsContext], edx
.text:00407E90                 mov     [esp+35Ch+pvReserved], ebx
.text:00407E93                 xor     ebx, ebx
.text:00407E95                 mov     [esp+35Ch+pUnkOuter], offset dword_40CC80
.text:00407E9D                 call    dword ptr [esi]
.text:00407E9F                 sub     esp, 0Ch
.text:00407EA2                 lea     esi, [esp+35Ch+WideCharStr]
.text:00407EA9                 call    AreFileApisANSI
.text:00407EAE                 mov     [esp+35Ch+cchWideChar], 104h ; cchWideChar
.text:00407EB6                 test    eax, eax
.text:00407EB8                 mov     ecx, [esp+35Ch+lpMultiByteStr]
.text:00407EBF                 setz    bl
.text:00407EC2                 mov     [esp+35Ch+ppv], esi ; lpWideCharStr
.text:00407EC6                 mov     [esp+35Ch+riid], 0FFFFFFFFh ; cbMultiByte
.text:00407ECE                 mov     [esp+35Ch+dwClsContext], ecx ; lpMultiByteStr
.text:00407ED2                 mov     [esp+35Ch+pUnkOuter], 0 ; dwFlags
.text:00407EDA                 mov     [esp+35Ch+pvReserved], ebx ; CodePage
.text:00407EDD                 call    MultiByteToWideChar
.text:00407EE2                 sub     esp, 18h
.text:00407EE5                 test    eax, eax
.text:00407EE7                 js      loc_407F7F
.text:00407EED                 mov     edx, dword ptr [esp+35Ch+var_334]
.text:00407EF1                 mov     ebx, [edx]
.text:00407EF3                 mov     [esp+35Ch+dwClsContext], 0
.text:00407EFB                 mov     [esp+35Ch+pUnkOuter], esi
.text:00407EFF                 mov     [esp+35Ch+pvReserved], edx
.text:00407F02                 call    dword ptr [ebx+14h]
.text:00407F05                 sub     esp, 0Ch
.text:00407F08                 test    eax, eax
.text:00407F0A                 js      short loc_407F7F
.text:00407F0C                 mov     ebx, [esp+35Ch+var_330]
.text:00407F10                 lea     esi, [esp+35Ch+String2]
.text:00407F14                 mov     ecx, [ebx]
.text:00407F16                 mov     [esp+35Ch+pvReserved], ebx
.text:00407F19                 mov     [esp+35Ch+ppv], 0
.text:00407F21                 mov     [esp+35Ch+riid], 0
.text:00407F29                 mov     [esp+35Ch+dwClsContext], 104h
.text:00407F31                 mov     [esp+35Ch+pUnkOuter], esi
.text:00407F35                 call    dword ptr [ecx+0Ch]
.text:00407F38                 sub     esp, 14h
.text:00407F3B                 mov     ebx, eax
.text:00407F3D                 test    eax, eax
.text:00407F3F                 js      short loc_407F7F
.text:00407F41                 mov     [esp+35Ch+pUnkOuter], esi ; lpString2
.text:00407F45                 mov     [esp+35Ch+pvReserved], edi ; lpString1
.text:00407F48                 call    lstrcpyA
.text:00407F4D                 sub     esp, 8
.text:00407F50                 mov     edi, dword ptr [esp+35Ch+var_334]
.text:00407F54                 mov     ecx, [edi]
.text:00407F56                 mov     [esp+35Ch+pvReserved], edi
.text:00407F59                 call    dword ptr [ecx+8]
.text:00407F5C                 sub     esp, 4
.text:00407F5F                 mov     edx, [esp+35Ch+var_330]
.text:00407F63                 mov     esi, [edx]
.text:00407F65                 mov     [esp+35Ch+pvReserved], edx
.text:00407F68                 call    dword ptr [esi+8]
.text:00407F6B                 sub     esp, 4
.text:00407F6E                 call    CoUninitialize
.text:00407F73                 mov     eax, ebx
.text:00407F75
.text:00407F75 loc_407F75:                             ; CODE XREF: sub_407E20+177↓j
.text:00407F75                 add     esp, 350h
.text:00407F7B                 pop     ebx
.text:00407F7C                 pop     esi
.text:00407F7D                 pop     edi
.text:00407F7E                 retn
.text:00407F7F ; ---------------------------------------------------------------------------
.text:00407F7F
.text:00407F7F loc_407F7F:                             ; CODE XREF: sub_407E20+25↑j
.text:00407F7F                                         ; sub_407E20+5C↑j ...
.text:00407F7F                 call    sub_408340
.text:00407F84                 mov     edi, eax
.text:00407F86                 call    _errno
.text:00407F8B                 mov     [eax], edi
.text:00407F8D                 call    CoUninitialize
.text:00407F92                 mov     eax, 0FFFFFFFFh
.text:00407F97                 jmp     short loc_407F75
.text:00407F97 sub_407E20      endp
.text:00407F97
.text:00407F97 ; ---------------------------------------------------------------------------
.text:00407F99 ; const char aLnk_0[]
.text:00407F99 aLnk_0          db '.lnk',0             ; DATA XREF: sub_407FA0+53↓o
.text:00407F99                                         ; sub_407FA0:loc_408005↓o
.text:00407F9E                 align 10h
.text:00407FA0
.text:00407FA0 ; =============== S U B R O U T I N E =======================================
.text:00407FA0
.text:00407FA0
.text:00407FA0 ; int __cdecl sub_407FA0(char *, LPSTR lpString1)
.text:00407FA0 sub_407FA0      proc near               ; CODE XREF: sub_406090+96↑p
.text:00407FA0
.text:00407FA0 Str             = dword ptr -1Ch
.text:00407FA0 Source          = dword ptr -18h
.text:00407FA0 Destination     = dword ptr -14h
.text:00407FA0 arg_0           = dword ptr  4
.text:00407FA0 lpString1       = dword ptr  8
.text:00407FA0
.text:00407FA0                 push    ebp
.text:00407FA1                 push    edi
.text:00407FA2                 push    esi
.text:00407FA3                 push    ebx
.text:00407FA4                 sub     esp, 0Ch
.text:00407FA7                 mov     ebx, [esp+1Ch+arg_0]
.text:00407FAB                 mov     ebp, [esp+1Ch+lpString1]
.text:00407FAF                 mov     [esp+1Ch+Str], ebx ; Str
.text:00407FB2                 call    strlen
.text:00407FB7                 add     eax, 5
.text:00407FBA                 mov     [esp+1Ch+Str], eax ; Size
.text:00407FBD                 call    malloc
.text:00407FC2                 mov     [esp+1Ch+Destination], eax
.text:00407FC6                 test    eax, eax
.text:00407FC8                 jz      loc_408070
.text:00407FCE                 mov     [esp+1Ch+Source], ebx ; Source
.text:00407FD2                 mov     [esp+1Ch+Str], eax ; Destination
.text:00407FD5                 call    strcpy
.text:00407FDA                 mov     [esp+1Ch+Source], 2Eh ; '.' ; Ch
.text:00407FE2                 mov     eax, [esp+1Ch+Destination]
.text:00407FE6                 mov     [esp+1Ch+Str], eax ; Str
.text:00407FE9                 call    strrchr
.text:00407FEE                 test    eax, eax
.text:00407FF0                 jz      short loc_408005
.text:00407FF2                 cld
.text:00407FF3                 mov     ebx, offset aLnk_0 ; ".lnk"
.text:00407FF8                 mov     ecx, 5
.text:00407FFD                 mov     esi, eax
.text:00407FFF                 mov     edi, ebx
.text:00408001                 repe cmpsb
.text:00408003                 jz      short loc_408019
.text:00408005
.text:00408005 loc_408005:                             ; CODE XREF: sub_407FA0+50↑j
.text:00408005                 mov     [esp+1Ch+Source], offset aLnk_0 ; ".lnk"
.text:0040800D                 mov     edx, [esp+1Ch+Destination]
.text:00408011                 mov     [esp+1Ch+Str], edx ; Destination
.text:00408014                 call    strcat
.text:00408019
.text:00408019 loc_408019:                             ; CODE XREF: sub_407FA0+63↑j
.text:00408019                 mov     [esp+1Ch+Str], 8001h ; uMode
.text:00408020                 call    SetErrorMode
.text:00408025                 sub     esp, 4
.text:00408028                 mov     ebx, [esp+1Ch+Destination]
.text:0040802C                 mov     [esp+1Ch+Source], ebp ; lpString1
.text:00408030                 mov     [esp+1Ch+Str], ebx ; lpMultiByteStr
.text:00408033                 call    sub_407E20
.text:00408038                 mov     [esp+1Ch+Str], ebx ; Block
.text:0040803B                 mov     esi, eax
.text:0040803D                 call    free
.text:00408042                 mov     [esp+1Ch+Str], 0 ; uMode
.text:00408049                 call    SetErrorMode
.text:0040804E                 sub     esp, 4
.text:00408051                 mov     [esp+1Ch+Str], ebp
.text:00408054                 call    sub_409580
.text:00408059                 inc     esi
.text:0040805A                 jz      short loc_408070
.text:0040805C                 mov     [esp+1Ch+arg_0], ebp ; Str
.text:00408060                 add     esp, 0Ch
.text:00408063                 pop     ebx
.text:00408064                 pop     esi
.text:00408065                 pop     edi
.text:00408066                 pop     ebp
.text:00408067                 jmp     strlen
.text:00408067 ; ---------------------------------------------------------------------------
.text:0040806C                 align 10h
.text:00408070
.text:00408070 loc_408070:                             ; CODE XREF: sub_407FA0+28↑j
.text:00408070                                         ; sub_407FA0+BA↑j
.text:00408070                 add     esp, 0Ch
.text:00408073                 mov     eax, 0FFFFFFFFh
.text:00408078                 pop     ebx
.text:00408079                 pop     esi
.text:0040807A                 pop     edi
.text:0040807B                 pop     ebp
.text:0040807C                 retn
.text:0040807C sub_407FA0      endp
.text:0040807C
.text:0040807C ; ---------------------------------------------------------------------------
.text:0040807D                 align 10h
.text:00408080
.text:00408080 ; =============== S U B R O U T I N E =======================================
.text:00408080
.text:00408080
.text:00408080 sub_408080      proc near               ; CODE XREF: .text:004061AB↑p
.text:00408080                 xor     eax, eax
.text:00408082                 retn
.text:00408082 sub_408080      endp
.text:00408082
.text:00408082 ; ---------------------------------------------------------------------------
.text:00408083                 align 10h
.text:00408090
.text:00408090 ; =============== S U B R O U T I N E =======================================
.text:00408090
.text:00408090
.text:00408090 sub_408090      proc near               ; CODE XREF: .text:00406184↑p
.text:00408090                 xor     eax, eax
.text:00408092                 retn
.text:00408092 sub_408090      endp
.text:00408092
.text:00408092 ; ---------------------------------------------------------------------------
.text:00408093                 align 10h
.text:004080A0
.text:004080A0 ; =============== S U B R O U T I N E =======================================
.text:004080A0
.text:004080A0
.text:004080A0 sub_4080A0      proc near               ; CODE XREF: sub_4061C0+28↑p
.text:004080A0                 xor     eax, eax
.text:004080A2                 retn
.text:004080A2 sub_4080A0      endp
.text:004080A2
.text:004080A2 ; ---------------------------------------------------------------------------
.text:004080A3                 align 10h
.text:004080B0
.text:004080B0 ; =============== S U B R O U T I N E =======================================
.text:004080B0
.text:004080B0 ; Attributes: info_from_lumina
.text:004080B0
.text:004080B0 ___get_errno    proc near               ; CODE XREF: sub_408340+B↓p
.text:004080B0
.text:004080B0 arg_0           = dword ptr  4
.text:004080B0
.text:004080B0                 mov     eax, [esp+arg_0]
.text:004080B4                 cmp     eax, 53h ; 'S'
.text:004080B7                 jg      loc_4081B0
.text:004080BD                 cmp     eax, 52h ; 'R'
.text:004080C0                 jge     short loc_408112
.text:004080C2                 cmp     eax, 0Fh
.text:004080C5                 jz      short loc_4080E0
.text:004080C7                 cmp     eax, 0Fh
.text:004080CA                 jg      short loc_408140
.text:004080CC                 cmp     eax, 9
.text:004080CF                 jg      short loc_408120
.text:004080D1                 cmp     eax, 7
.text:004080D4                 jge     short loc_408119
.text:004080D6                 cmp     eax, 3
.text:004080D9                 jg      short loc_4080FA
.text:004080DB                 cmp     eax, 2
.text:004080DE                 jl      short loc_4080F3
.text:004080E0
.text:004080E0 loc_4080E0:                             ; CODE XREF: ___get_errno+15↑j
.text:004080E0                                         ; ___get_errno+9D↓j ...
.text:004080E0                 mov     edx, 2
.text:004080E5                 lea     esi, [esi+0]
.text:004080E9                 lea     edi, [edi+0]
.text:004080F0
.text:004080F0 loc_4080F0:                             ; CODE XREF: ___get_errno+48↓j
.text:004080F0                                         ; ___get_errno+59↓j ...
.text:004080F0                 mov     eax, edx
.text:004080F2                 retn
.text:004080F3 ; ---------------------------------------------------------------------------
.text:004080F3
.text:004080F3 loc_4080F3:                             ; CODE XREF: ___get_errno+2E↑j
.text:004080F3                                         ; ___get_errno+78↓j ...
.text:004080F3                 mov     edx, 16h
.text:004080F8                 jmp     short loc_4080F0
.text:004080FA ; ---------------------------------------------------------------------------
.text:004080FA
.text:004080FA loc_4080FA:                             ; CODE XREF: ___get_errno+29↑j
.text:004080FA                 cmp     eax, 5
.text:004080FD                 jz      short loc_408112
.text:004080FF                 cmp     eax, 5
.text:00408102                 jg      short loc_40810B
.text:00408104                 mov     edx, 18h
.text:00408109                 jmp     short loc_4080F0
.text:0040810B ; ---------------------------------------------------------------------------
.text:0040810B
.text:0040810B loc_40810B:                             ; CODE XREF: ___get_errno+52↑j
.text:0040810B                                         ; ___get_errno+180↓j
.text:0040810B                 mov     edx, 9
.text:00408110                 jmp     short loc_4080F0
.text:00408112 ; ---------------------------------------------------------------------------
.text:00408112
.text:00408112 loc_408112:                             ; CODE XREF: ___get_errno+10↑j
.text:00408112                                         ; ___get_errno+4D↑j ...
.text:00408112                 mov     edx, 0Dh
.text:00408117                 jmp     short loc_4080F0
.text:00408119 ; ---------------------------------------------------------------------------
.text:00408119
.text:00408119 loc_408119:                             ; CODE XREF: ___get_errno+24↑j
.text:00408119                                         ; ___get_errno+73↓j ...
.text:00408119                 mov     edx, 0Ch
.text:0040811E                 jmp     short loc_4080F0
.text:00408120 ; ---------------------------------------------------------------------------
.text:00408120
.text:00408120 loc_408120:                             ; CODE XREF: ___get_errno+1F↑j
.text:00408120                 cmp     eax, 0Dh
.text:00408123                 jg      short loc_408119
.text:00408125                 cmp     eax, 0Ch
.text:00408128                 jge     short loc_4080F3
.text:0040812A                 cmp     eax, 0Ah
.text:0040812D                 mov     edx, 7
.text:00408132                 jz      short loc_4080F0
.text:00408134                 cmp     eax, 0Bh
.text:00408137                 jnz     short loc_4080F3
.text:00408139
.text:00408139 loc_408139:                             ; CODE XREF: ___get_errno+21A↓j
.text:00408139                 mov     edx, 8
.text:0040813E                 jmp     short loc_4080F0
.text:00408140 ; ---------------------------------------------------------------------------
.text:00408140
.text:00408140 loc_408140:                             ; CODE XREF: ___get_errno+1A↑j
.text:00408140                 cmp     eax, 22h ; '"'
.text:00408143                 jg      short loc_408174
.text:00408145                 cmp     eax, 16h
.text:00408148                 jge     short loc_408112
.text:0040814A                 cmp     eax, 12h
.text:0040814D                 jz      short loc_4080E0
.text:0040814F                 cmp     eax, 12h
.text:00408152                 jg      short loc_408165
.text:00408154                 cmp     eax, 10h
.text:00408157                 jz      short loc_408112
.text:00408159                 mov     edx, 12h
.text:0040815E                 cmp     eax, 11h
.text:00408161
.text:00408161 loc_408161:                             ; CODE XREF: ___get_errno+172↓j
.text:00408161                                         ; ___get_errno+24C↓j ...
.text:00408161                 jnz     short loc_4080F3
.text:00408163                 jmp     short loc_4080F0
.text:00408165 ; ---------------------------------------------------------------------------
.text:00408165
.text:00408165 loc_408165:                             ; CODE XREF: ___get_errno+A2↑j
.text:00408165                 cmp     eax, 14h
.text:00408168                 jle     short loc_408112
.text:0040816A
.text:0040816A loc_40816A:                             ; CODE XREF: ___get_errno+1D7↓j
.text:0040816A                 mov     edx, 10h
.text:0040816F                 jmp     loc_4080F0
.text:00408174 ; ---------------------------------------------------------------------------
.text:00408174
.text:00408174 loc_408174:                             ; CODE XREF: ___get_errno+93↑j
.text:00408174                 cmp     eax, 41h ; 'A'
.text:00408177                 jz      short loc_408112
.text:00408179                 cmp     eax, 41h ; 'A'
.text:0040817C                 jg      short loc_408191
.text:0040817E                 cmp     eax, 24h ; '$'
.text:00408181                 jz      short loc_408112
.text:00408183                 cmp     eax, 35h ; '5'
.text:00408186                 jnz     loc_4080F3
.text:0040818C                 jmp     loc_4080E0
.text:00408191 ; ---------------------------------------------------------------------------
.text:00408191
.text:00408191 loc_408191:                             ; CODE XREF: ___get_errno+CC↑j
.text:00408191                 cmp     eax, 43h ; 'C'
.text:00408194                 jz      loc_4080E0
.text:0040819A                 cmp     eax, 50h ; 'P'
.text:0040819D                 jnz     loc_4080F3
.text:004081A3
.text:004081A3 loc_4081A3:                             ; CODE XREF: ___get_errno+1FB↓j
.text:004081A3                 mov     edx, 11h
.text:004081A8                 jmp     loc_4080F0
.text:004081A8 ; ---------------------------------------------------------------------------
.text:004081AD                 align 10h
.text:004081B0
.text:004081B0 loc_4081B0:                             ; CODE XREF: ___get_errno+7↑j
.text:004081B0                 cmp     eax, 0A1h ; '¡'
.text:004081B5                 jz      loc_4080E0
.text:004081BB                 cmp     eax, 0A1h ; '¡'
.text:004081C0                 jg      loc_408270
.text:004081C6                 cmp     eax, 81h
.text:004081CB                 jg      short loc_408235
.text:004081CD                 cmp     eax, 80h ; '€'
.text:004081D2                 mov     edx, 0Ah
.text:004081D7                 jge     loc_4080F0
.text:004081DD                 cmp     eax, 6Ch ; 'l'
.text:004081E0                 jz      loc_408112
.text:004081E6                 cmp     eax, 6Ch ; 'l'
.text:004081E9                 jg      short loc_408207
.text:004081EB                 cmp     eax, 57h ; 'W'
.text:004081EE                 jz      loc_4080F3
.text:004081F4                 cmp     eax, 59h ; 'Y'
.text:004081F7                 jnz     loc_4080F3
.text:004081FD
.text:004081FD loc_4081FD:                             ; CODE XREF: ___get_errno+1E9↓j
.text:004081FD                                         ; ___get_errno+23C↓j
.text:004081FD                 mov     edx, 0Bh
.text:00408202                 jmp     loc_4080F0
.text:00408207 ; ---------------------------------------------------------------------------
.text:00408207
.text:00408207 loc_408207:                             ; CODE XREF: ___get_errno+139↑j
.text:00408207                 cmp     eax, 70h ; 'p'
.text:0040820A                 mov     edx, 1Ch
.text:0040820F                 jz      loc_4080F0
.text:00408215                 cmp     eax, 70h ; 'p'
.text:00408218                 jg      short loc_408227
.text:0040821A                 mov     edx, 20h ; ' '
.text:0040821F                 cmp     eax, 6Dh ; 'm'
.text:00408222                 jmp     loc_408161
.text:00408227 ; ---------------------------------------------------------------------------
.text:00408227
.text:00408227 loc_408227:                             ; CODE XREF: ___get_errno+168↑j
.text:00408227                 cmp     eax, 72h ; 'r'
.text:0040822A
.text:0040822A loc_40822A:                             ; CODE XREF: ___get_errno+19C↓j
.text:0040822A                 jnz     loc_4080F3
.text:00408230                 jmp     loc_40810B
.text:00408235 ; ---------------------------------------------------------------------------
.text:00408235
.text:00408235 loc_408235:                             ; CODE XREF: ___get_errno+11B↑j
.text:00408235                 cmp     eax, 84h ; '„'
.text:0040823A                 jz      loc_408112
.text:00408240                 cmp     eax, 84h ; '„'
.text:00408245                 jg      short loc_40824E
.text:00408247                 cmp     eax, 82h ; '‚'
.text:0040824C                 jmp     short loc_40822A
.text:0040824E ; ---------------------------------------------------------------------------
.text:0040824E
.text:0040824E loc_40824E:                             ; CODE XREF: ___get_errno+195↑j
.text:0040824E                 cmp     eax, 91h ; '‘'
.text:00408253                 mov     edx, 29h ; ')'
.text:00408258                 jz      loc_4080F0
.text:0040825E                 cmp     eax, 9Eh ; 'ž'
.text:00408263
.text:00408263 loc_408263:                             ; CODE XREF: ___get_errno+1F4↓j
.text:00408263                 jnz     loc_4080F3
.text:00408269                 jmp     loc_408112
.text:00408269 ; ---------------------------------------------------------------------------
.text:0040826E                 align 10h
.text:00408270
.text:00408270 loc_408270:                             ; CODE XREF: ___get_errno+110↑j
.text:00408270                 cmp     eax, 0CEh ; 'Î'
.text:00408275                 jz      loc_4080E0
.text:0040827B                 cmp     eax, 0CEh ; 'Î'
.text:00408280                 jg      short loc_4082D0
.text:00408282                 cmp     eax, 0AAh ; 'ª'
.text:00408287                 jz      loc_40816A
.text:0040828D                 cmp     eax, 0AAh ; 'ª'
.text:00408292                 jg      short loc_4082A6
.text:00408294                 cmp     eax, 0A4h ; '¤'
.text:00408299                 jz      loc_4081FD
.text:0040829F                 cmp     eax, 0A7h ; '§'
.text:004082A4                 jmp     short loc_408263
.text:004082A6 ; ---------------------------------------------------------------------------
.text:004082A6
.text:004082A6 loc_4082A6:                             ; CODE XREF: ___get_errno+1E2↑j
.text:004082A6                 cmp     eax, 0B7h ; '·'
.text:004082AB                 jz      loc_4081A3
.text:004082B1                 cmp     eax, 0B7h ; '·'
.text:004082B6                 jl      loc_4080F3
.text:004082BC                 sub     eax, 0BCh ; '¼'
.text:004082C1                 cmp     eax, 0Eh
.text:004082C4                 ja      loc_4080F3
.text:004082CA                 jmp     loc_408139
.text:004082CA ; ---------------------------------------------------------------------------
.text:004082CF                 align 10h
.text:004082D0
.text:004082D0 loc_4082D0:                             ; CODE XREF: ___get_errno+1D0↑j
.text:004082D0                 cmp     eax, 46Bh
.text:004082D5                 mov     edx, 24h ; '$'
.text:004082DA                 jz      loc_4080F0
.text:004082E0                 cmp     eax, 46Bh
.text:004082E5                 jg      short loc_408301
.text:004082E7                 cmp     eax, 0D7h ; '×'
.text:004082EC                 jz      loc_4081FD
.text:004082F2                 mov     edx, 5
.text:004082F7                 cmp     eax, 45Dh
.text:004082FC                 jmp     loc_408161
.text:00408301 ; ---------------------------------------------------------------------------
.text:00408301
.text:00408301 loc_408301:                             ; CODE XREF: ___get_errno+235↑j
.text:00408301                 cmp     eax, 4D5h
.text:00408306                 mov     edx, 4
.text:0040830B                 jz      loc_4080F0
.text:00408311                 cmp     eax, 4D5h
.text:00408316                 jg      short loc_408327
.text:00408318                 mov     edx, 13h
.text:0040831D                 cmp     eax, 4B0h
.text:00408322                 jmp     loc_408161
.text:00408327 ; ---------------------------------------------------------------------------
.text:00408327
.text:00408327 loc_408327:                             ; CODE XREF: ___get_errno+266↑j
.text:00408327                 cmp     eax, 718h
.text:0040832C                 jnz     loc_4080F3
.text:00408332                 jmp     loc_408119
.text:00408332 ___get_errno    endp
.text:00408332
.text:00408332 ; ---------------------------------------------------------------------------
.text:00408337                 align 10h
.text:00408340
.text:00408340 ; =============== S U B R O U T I N E =======================================
.text:00408340
.text:00408340
.text:00408340 sub_408340      proc near               ; CODE XREF: sub_406220:loc_4062D3↑p
.text:00408340                                         ; sub_406010:loc_407DED↑p ...
.text:00408340
.text:00408340 var_C           = dword ptr -0Ch
.text:00408340
.text:00408340                 sub     esp, 0Ch
.text:00408343                 call    GetLastError
.text:00408348                 mov     [esp+0Ch+var_C], eax
.text:0040834B                 call    ___get_errno
.text:00408350                 add     esp, 0Ch
.text:00408353                 retn
.text:00408353 sub_408340      endp
.text:00408353
.text:00408353 ; ---------------------------------------------------------------------------
.text:00408354                 align 10h
.text:00408360
.text:00408360 ; =============== S U B R O U T I N E =======================================
.text:00408360
.text:00408360
.text:00408360 sub_408360      proc near               ; CODE XREF: .text:00409693↓p
.text:00408360                                         ; .text:004096E3↓p
.text:00408360
.text:00408360 arg_4           = dword ptr  8
.text:00408360
.text:00408360                 sub     esp, 0Ch
.text:00408363                 mov     edx, [esp+0Ch+arg_4]
.text:00408367                 test    edx, edx
.text:00408369                 jz      short loc_408370
.text:0040836B                 add     esp, 0Ch
.text:0040836E                 jmp     short sub_4083B0
.text:00408370 ; ---------------------------------------------------------------------------
.text:00408370
.text:00408370 loc_408370:                             ; CODE XREF: sub_408360+9↑j
.text:00408370                 call    _errno
.text:00408375                 mov     dword ptr [eax], 16h
.text:0040837B                 xor     eax, eax
.text:0040837D                 add     esp, 0Ch
.text:00408380                 retn
.text:00408380 sub_408360      endp
.text:00408380
.text:00408381 ; ---------------------------------------------------------------------------
.text:00408381                 jmp     short sub_408390
.text:00408381 ; ---------------------------------------------------------------------------
.text:00408383                 align 10h
.text:00408390
.text:00408390 ; =============== S U B R O U T I N E =======================================
.text:00408390
.text:00408390
.text:00408390 ; int __cdecl sub_408390(LPCSTR)
.text:00408390 sub_408390      proc near               ; CODE XREF: sub_406010+1D34↑p
.text:00408390                                         ; .text:00408381↑j ...
.text:00408390
.text:00408390 lpFileName      = dword ptr -0Ch
.text:00408390 Destination     = dword ptr -8
.text:00408390 arg_0           = dword ptr  4
.text:00408390
.text:00408390                 sub     esp, 0Ch
.text:00408393                 mov     edx, [esp+0Ch+arg_0]
.text:00408397                 mov     [esp+0Ch+Destination], 0 ; Destination
.text:0040839F                 mov     [esp+0Ch+lpFileName], edx ; lpFileName
.text:004083A2                 call    sub_4083B0
.text:004083A7                 add     esp, 0Ch
.text:004083AA                 retn
.text:004083AA sub_408390      endp
.text:004083AA
.text:004083AA ; ---------------------------------------------------------------------------
.text:004083AB                 align 10h
.text:004083B0
.text:004083B0 ; =============== S U B R O U T I N E =======================================
.text:004083B0
.text:004083B0
.text:004083B0 ; int __cdecl sub_4083B0(LPCSTR lpFileName, char *Destination)
.text:004083B0 sub_4083B0      proc near               ; CODE XREF: sub_408360+E↑j
.text:004083B0                                         ; sub_408390+12↑p
.text:004083B0
.text:004083B0 Size            = dword ptr -2Ch
.text:004083B0 nBufferLength   = dword ptr -28h
.text:004083B0 lpBuffer        = dword ptr -24h
.text:004083B0 lpFilePart      = dword ptr -20h
.text:004083B0 FilePart        = dword ptr -14h
.text:004083B0 lpFileName      = dword ptr  4
.text:004083B0 Destination     = dword ptr  8
.text:004083B0
.text:004083B0                 push    ebp
.text:004083B1                 push    edi
.text:004083B2                 push    esi
.text:004083B3                 push    ebx
.text:004083B4                 sub     esp, 1Ch
.text:004083B7                 mov     edi, [esp+2Ch+lpFileName]
.text:004083BB                 mov     ebp, [esp+2Ch+Destination]
.text:004083BF                 test    edi, edi
.text:004083C1                 jz      loc_4084C9
.text:004083C7                 cmp     byte ptr [edi], 0
.text:004083CA                 jz      loc_4084BC
.text:004083D0                 mov     [esp+2Ch+Size], 104h ; Size
.text:004083D7                 call    malloc
.text:004083DC                 mov     [esp+2Ch+lpBuffer], eax ; lpBuffer
.text:004083E0                 lea     edx, [esp+2Ch+FilePart]
.text:004083E4                 mov     ebx, eax
.text:004083E6                 mov     [esp+2Ch+lpFilePart], edx ; lpFilePart
.text:004083EA                 mov     [esp+2Ch+nBufferLength], 104h ; nBufferLength
.text:004083F2                 mov     [esp+2Ch+Size], edi ; lpFileName
.text:004083F5                 call    GetFullPathNameA
.text:004083FA                 sub     esp, 10h
.text:004083FD                 mov     esi, eax
.text:004083FF                 test    eax, eax
.text:00408401                 jz      loc_4084AA
.text:00408407                 cmp     eax, 104h
.text:0040840C                 jle     short loc_40841D
.text:0040840E                 test    ebp, ebp
.text:00408410                 jz      short loc_408479
.text:00408412                 call    _errno
.text:00408417                 mov     dword ptr [eax], 26h ; '&'
.text:0040841D
.text:0040841D loc_40841D:                             ; CODE XREF: sub_4083B0+5C↑j
.text:0040841D                                         ; sub_4083B0+F5↓j
.text:0040841D                 call    _errno
.text:00408422                 mov     edi, [eax]
.text:00408424                 mov     [esp+2Ch+nBufferLength], 10h ; int
.text:0040842C                 mov     [esp+2Ch+Size], ebx ; lpFileName
.text:0040842F                 call    sub_406220
.text:00408434                 test    eax, eax
.text:00408436                 jnz     short loc_408450
.text:00408438                 movzx   eax, byte ptr [esi+ebx-1]
.text:0040843D                 cmp     al, 2Fh ; '/'
.text:0040843F                 jz      short loc_408450
.text:00408441                 cmp     al, 5Ch ; '\'
.text:00408443                 jz      short loc_408450
.text:00408445                 mov     byte ptr [esi+ebx], 5Ch ; '\'
.text:00408449                 mov     byte ptr [esi+ebx+1], 0
.text:0040844E                 mov     esi, esi
.text:00408450
.text:00408450 loc_408450:                             ; CODE XREF: sub_4083B0+86↑j
.text:00408450                                         ; sub_4083B0+8F↑j ...
.text:00408450                 call    _errno
.text:00408455                 mov     [eax], edi
.text:00408457                 mov     [esp+2Ch+Size], ebx
.text:0040845A                 call    sub_409580
.text:0040845F                 test    ebp, ebp
.text:00408461                 mov     eax, ebx
.text:00408463                 jz      short loc_408471
.text:00408465                 mov     [esp+2Ch+nBufferLength], ebx ; Source
.text:00408469                 mov     [esp+2Ch+Size], ebp ; Destination
.text:0040846C                 call    strcpy
.text:00408471
.text:00408471 loc_408471:                             ; CODE XREF: sub_4083B0+B3↑j
.text:00408471                                         ; sub_4083B0+10A↓j
.text:00408471                 add     esp, 1Ch
.text:00408474                 pop     ebx
.text:00408475                 pop     esi
.text:00408476                 pop     edi
.text:00408477                 pop     ebp
.text:00408478                 retn
.text:00408479 ; ---------------------------------------------------------------------------
.text:00408479
.text:00408479 loc_408479:                             ; CODE XREF: sub_4083B0+60↑j
.text:00408479                 mov     [esp+2Ch+Size], ebx ; Block
.text:0040847C                 lea     ecx, [eax+2]
.text:0040847F                 mov     [esp+2Ch+nBufferLength], ecx ; Size
.text:00408483                 call    realloc
.text:00408488                 mov     [esp+2Ch+lpBuffer], eax ; lpBuffer
.text:0040848C                 lea     edx, [esp+2Ch+FilePart]
.text:00408490                 mov     ebx, eax
.text:00408492                 mov     [esp+2Ch+lpFilePart], edx ; lpFilePart
.text:00408496                 mov     [esp+2Ch+nBufferLength], esi ; nBufferLength
.text:0040849A                 mov     [esp+2Ch+Size], edi ; lpFileName
.text:0040849D                 call    GetFullPathNameA
.text:004084A2                 sub     esp, 10h
.text:004084A5                 jmp     loc_40841D
.text:004084AA ; ---------------------------------------------------------------------------
.text:004084AA
.text:004084AA loc_4084AA:                             ; CODE XREF: sub_4083B0+51↑j
.text:004084AA                 call    sub_408340
.text:004084AF                 mov     esi, eax
.text:004084B1                 call    _errno
.text:004084B6                 mov     [eax], esi
.text:004084B8
.text:004084B8 loc_4084B8:                             ; CODE XREF: sub_4083B0+117↓j
.text:004084B8                                         ; sub_4083B0+124↓j
.text:004084B8                 xor     eax, eax
.text:004084BA                 jmp     short loc_408471
.text:004084BC ; ---------------------------------------------------------------------------
.text:004084BC
.text:004084BC loc_4084BC:                             ; CODE XREF: sub_4083B0+1A↑j
.text:004084BC                 call    _errno
.text:004084C1                 mov     dword ptr [eax], 2
.text:004084C7                 jmp     short loc_4084B8
.text:004084C9 ; ---------------------------------------------------------------------------
.text:004084C9
.text:004084C9 loc_4084C9:                             ; CODE XREF: sub_4083B0+11↑j
.text:004084C9                 call    _errno
.text:004084CE                 mov     dword ptr [eax], 16h
.text:004084D4                 jmp     short loc_4084B8
.text:004084D4 sub_4083B0      endp
.text:004084D4
.text:004084D4 ; ---------------------------------------------------------------------------
.text:004084D6                 align 10h
.text:004084E0 ; const char String[4]
.text:004084E0 String          db ' :/',0              ; DATA XREF: sub_4084F0+FA↓o
.text:004084E4                 align 10h
.text:004084F0
.text:004084F0 ; =============== S U B R O U T I N E =======================================
.text:004084F0
.text:004084F0
.text:004084F0 ; int __cdecl sub_4084F0(LPCSTR)
.text:004084F0 sub_4084F0      proc near               ; CODE XREF: sub_406AF0+E↑p
.text:004084F0                                         ; sub_406FF0+17↑p ...
.text:004084F0
.text:004084F0 Str             = dword ptr -1Ch
.text:004084F0 Val             = dword ptr -18h
.text:004084F0 Count           = dword ptr -14h
.text:004084F0 var_10          = dword ptr -10h
.text:004084F0 var_C           = dword ptr -0Ch
.text:004084F0 var_8           = dword ptr -8
.text:004084F0 var_4           = dword ptr -4
.text:004084F0 arg_0           = dword ptr  4
.text:004084F0
.text:004084F0                 sub     esp, 1Ch
.text:004084F3                 mov     edx, [esp+1Ch+arg_0]
.text:004084F7                 mov     [esp+1Ch+var_8], edi
.text:004084FB                 mov     [esp+1Ch+var_10], ebx
.text:004084FF                 mov     [esp+1Ch+var_C], esi
.text:00408503                 mov     [esp+1Ch+var_4], ebp
.text:00408507                 mov     [esp+1Ch+Str], edx ; LPCSTR
.text:0040850A                 call    sub_408390
.text:0040850F                 test    eax, eax
.text:00408511                 mov     edi, eax
.text:00408513                 jz      short loc_408550
.text:00408515                 mov     [esp+1Ch+Str], eax ; Str
.text:00408518                 call    strlen
.text:0040851D                 cmp     eax, 2
.text:00408520                 jbe     short loc_40852C
.text:00408522                 cmp     byte ptr [edi+1], 3Ah ; ':'
.text:00408526                 jz      loc_4085E0
.text:0040852C
.text:0040852C loc_40852C:                             ; CODE XREF: sub_4084F0+30↑j
.text:0040852C                                         ; sub_4084F0+F4↓j
.text:0040852C                 test    edi, edi
.text:0040852E                 jz      short loc_408550
.text:00408530                 mov     [esp+1Ch+Str], edi ; Str
.text:00408533                 call    strlen
.text:00408538                 cmp     eax, 4
.text:0040853B                 mov     ebp, eax
.text:0040853D                 jle     short loc_408550
.text:0040853F                 cmp     byte ptr [edi], 2Fh ; '/'
.text:00408542                 jz      short loc_408570
.text:00408544                 lea     esi, [esi+0]
.text:0040854A                 lea     edi, [edi+0]
.text:00408550
.text:00408550 loc_408550:                             ; CODE XREF: sub_4084F0+23↑j
.text:00408550                                         ; sub_4084F0+3E↑j ...
.text:00408550                 xor     esi, esi
.text:00408552
.text:00408552 loc_408552:                             ; CODE XREF: sub_4084F0+CD↓j
.text:00408552                                         ; sub_4084F0+115↓j
.text:00408552                 mov     [esp+1Ch+Str], edi ; Block
.text:00408555                 call    free
.text:0040855A                 mov     eax, esi
.text:0040855C                 mov     ebx, [esp+1Ch+var_10]
.text:00408560                 mov     esi, [esp+1Ch+var_C]
.text:00408564                 mov     edi, [esp+1Ch+var_8]
.text:00408568                 mov     ebp, [esp+1Ch+var_4]
.text:0040856C                 add     esp, 1Ch
.text:0040856F                 retn
.text:00408570 ; ---------------------------------------------------------------------------
.text:00408570
.text:00408570 loc_408570:                             ; CODE XREF: sub_4084F0+52↑j
.text:00408570                 cmp     byte ptr [edi+1], 2Fh ; '/'
.text:00408574                 jnz     short loc_408550
.text:00408576                 mov     [esp+1Ch+Val], 2Fh ; '/' ; Val
.text:0040857E                 lea     ecx, [edi+2]
.text:00408581                 mov     [esp+1Ch+Str], ecx ; Str
.text:00408584                 call    strchr
.text:00408589                 test    eax, eax
.text:0040858B                 jnz     short loc_4085BF
.text:0040858D
.text:0040858D loc_40858D:                             ; CODE XREF: sub_4084F0+E2↓j
.text:0040858D                 inc     ebp
.text:0040858E
.text:0040858E loc_40858E:                             ; CODE XREF: sub_4084F0+E9↓j
.text:0040858E                 mov     [esp+1Ch+Val], 1 ; Size
.text:00408596                 lea     ebx, [ebp+1]
.text:00408599                 mov     [esp+1Ch+Str], ebx ; Count
.text:0040859C                 call    calloc
.text:004085A1                 mov     [esp+1Ch+Str], eax ; Destination
.text:004085A4                 mov     esi, eax
.text:004085A6                 mov     [esp+1Ch+Count], ebx ; Count
.text:004085AA                 mov     [esp+1Ch+Val], edi ; Source
.text:004085AE                 call    strncpy
.text:004085B3                 mov     byte ptr [ebp+esi-1], 2Fh ; '/'
.text:004085B8                 mov     byte ptr [ebp+esi+0], 0
.text:004085BD                 jmp     short loc_408552
.text:004085BF ; ---------------------------------------------------------------------------
.text:004085BF
.text:004085BF loc_4085BF:                             ; CODE XREF: sub_4084F0+9B↑j
.text:004085BF                 mov     [esp+1Ch+Val], 2Fh ; '/' ; Val
.text:004085C7                 inc     eax
.text:004085C8                 mov     [esp+1Ch+Str], eax ; Str
.text:004085CB                 call    strchr
.text:004085D0                 test    eax, eax
.text:004085D2                 jz      short loc_40858D
.text:004085D4                 sub     eax, edi
.text:004085D6                 lea     ebp, [eax+1]
.text:004085D9                 jmp     short loc_40858E
.text:004085D9 ; ---------------------------------------------------------------------------
.text:004085DB                 align 10h
.text:004085E0
.text:004085E0 loc_4085E0:                             ; CODE XREF: sub_4084F0+36↑j
.text:004085E0                 cmp     byte ptr [edi+2], 2Fh ; '/'
.text:004085E4                 jnz     loc_40852C
.text:004085EA                 mov     [esp+1Ch+Str], offset String ; " :/"
.text:004085F1                 call    _strdup
.text:004085F6                 movsx   edx, byte ptr [edi]
.text:004085F9                 mov     esi, eax
.text:004085FB                 mov     [esp+1Ch+Str], edx ; C
.text:004085FE                 call    toupper
.text:00408603                 mov     [esi], al
.text:00408605                 jmp     loc_408552
.text:00408605 sub_4084F0      endp
.text:00408605
.text:00408605 ; ---------------------------------------------------------------------------
.text:0040860A                 align 10h
.text:00408610
.text:00408610 ; =============== S U B R O U T I N E =======================================
.text:00408610
.text:00408610
.text:00408610 sub_408610      proc near               ; CODE XREF: .text:00408764↓p
.text:00408610                                         ; .text:00408848↓p
.text:00408610
.text:00408610 Str             = dword ptr -2Ch
.text:00408610 Val             = dword ptr -28h
.text:00408610 var_18          = dword ptr -18h
.text:00408610 var_11          = byte ptr -11h
.text:00408610 arg_0           = dword ptr  4
.text:00408610
.text:00408610                 push    ebp
.text:00408611                 push    edi
.text:00408612                 push    esi
.text:00408613                 push    ebx
.text:00408614                 sub     esp, 1Ch
.text:00408617                 mov     edx, [esp+2Ch+arg_0]
.text:0040861B                 cmp     edx, ds:dword_410200
.text:00408621                 mov     [esp+2Ch+var_11], 0
.text:00408626                 jz      loc_408724
.text:0040862C                 mov     ebx, ds:dword_4101F0
.text:00408632                 test    ebx, ebx
.text:00408634                 jz      short loc_4086A2
.text:00408636
.text:00408636 loc_408636:                             ; CODE XREF: sub_408610+10F↓j
.text:00408636                 mov     ebx, [esp+2Ch+arg_0]
.text:0040863A                 xor     edi, edi
.text:0040863C                 xor     esi, esi
.text:0040863E                 mov     ebp, offset dword_410218
.text:00408643                 lea     esi, [esi+0]
.text:00408649                 lea     edi, [edi+0]
.text:00408650
.text:00408650 loc_408650:                             ; CODE XREF: sub_408610+60↓j
.text:00408650                 mov     edx, [ebp+4]
.text:00408653                 mov     ecx, edi
.text:00408655                 mov     eax, [ebp+0]
.text:00408658                 shl     ecx, 4
.text:0040865B                 mov     [esp+2Ch+var_18], ecx
.text:0040865F                 mov     ecx, edx
.text:00408661                 xor     eax, ebx
.text:00408663                 xor     ecx, esi
.text:00408665                 or      ecx, eax
.text:00408667                 jz      short loc_408691
.text:00408669                 inc     edi
.text:0040866A                 add     ebp, 10h
.text:0040866D                 cmp     edi, 20h ; ' '
.text:00408670                 jle     short loc_408650
.text:00408672
.text:00408672 loc_408672:                             ; CODE XREF: sub_408610+90↓j
.text:00408672                 movzx   ebx, [esp+2Ch+var_11]
.text:00408677                 mov     eax, [esp+2Ch+arg_0]
.text:0040867B                 mov     byte_40F040, bl
.text:00408681                 mov     ds:dword_410200, eax
.text:00408686                 movsx   eax, bl
.text:00408689
.text:00408689 loc_408689:                             ; CODE XREF: sub_408610+11B↓j
.text:00408689                 add     esp, 1Ch
.text:0040868C                 pop     ebx
.text:0040868D                 pop     esi
.text:0040868E                 pop     edi
.text:0040868F                 pop     ebp
.text:00408690                 retn
.text:00408691 ; ---------------------------------------------------------------------------
.text:00408691
.text:00408691 loc_408691:                             ; CODE XREF: sub_408610+57↑j
.text:00408691                 mov     edx, [esp+2Ch+var_18]
.text:00408695                 movzx   eax, byte ptr ds:dword_410210[edx]
.text:0040869C                 mov     [esp+2Ch+var_11], al
.text:004086A0                 jmp     short loc_408672
.text:004086A2 ; ---------------------------------------------------------------------------
.text:004086A2
.text:004086A2 loc_4086A2:                             ; CODE XREF: sub_408610+24↑j
.text:004086A2                 mov     [esp+2Ch+Str], 0
.text:004086A9                 call    sub_40A550
.text:004086AE                 test    eax, eax
.text:004086B0                 mov     ebx, eax
.text:004086B2                 jz      short loc_40870C
.text:004086B4                 movzx   ecx, byte ptr [eax]
.text:004086B7                 mov     esi, 0FFFFFFF0h
.text:004086BC                 test    cl, cl
.text:004086BE                 jz      short loc_40870C
.text:004086C0
.text:004086C0 loc_4086C0:                             ; CODE XREF: sub_408610+FA↓j
.text:004086C0                 mov     [esp+2Ch+Str], ebx ; LPCSTR
.text:004086C3                 movsx   ebp, cl
.text:004086C6                 add     esi, 10h
.text:004086C9                 mov     ds:dword_410210[esi], ebp
.text:004086CF                 mov     edi, ebp
.text:004086D1                 sar     edi, 1Fh
.text:004086D4                 mov     ds:dword_410214[esi], edi
.text:004086DA                 call    sub_406FF0
.text:004086DF                 mov     ds:dword_410218[esi], eax
.text:004086E5                 xor     ecx, ecx
.text:004086E7                 mov     [esp+2Ch+Str], ebx ; Str
.text:004086EA                 mov     ds:dword_41021C[esi], ecx
.text:004086F0                 mov     [esp+2Ch+Val], 0 ; Val
.text:004086F8                 call    strchr
.text:004086FD                 mov     ebx, eax
.text:004086FF                 inc     ebx
.text:00408700                 jz      short loc_40870C
.text:00408702                 movzx   edx, byte ptr [eax+1]
.text:00408706                 test    dl, dl
.text:00408708                 mov     cl, dl
.text:0040870A                 jnz     short loc_4086C0
.text:0040870C
.text:0040870C loc_40870C:                             ; CODE XREF: sub_408610+A2↑j
.text:0040870C                                         ; sub_408610+AE↑j ...
.text:0040870C                 mov     [esp+2Ch+Str], ebx ; Block
.text:0040870F                 mov     esi, 1
.text:00408714                 mov     ds:dword_4101F0, esi
.text:0040871A                 call    free
.text:0040871F                 jmp     loc_408636
.text:00408724 ; ---------------------------------------------------------------------------
.text:00408724
.text:00408724 loc_408724:                             ; CODE XREF: sub_408610+16↑j
.text:00408724                 movsx   eax, byte_40F040
.text:0040872B                 jmp     loc_408689
.text:0040872B sub_408610      endp
.text:0040872B
.text:0040872B ; ---------------------------------------------------------------------------
.text:00408730 dword_408730    dd 5C3A20h, 5C3A43h, 26B48D90h, 0
.text:00408730                                         ; DATA XREF: .text:00408753↓o
.text:00408730                                         ; .text:00408833↓o
.text:00408740 ; ---------------------------------------------------------------------------
.text:00408740                 sub     esp, 1Ch
.text:00408743                 mov     [esp+14h], esi
.text:00408747                 mov     esi, [esp+20h]
.text:0040874B                 mov     [esp+18h], edi
.text:0040874F                 mov     [esp+10h], ebx
.text:00408753                 mov     dword ptr [esp], offset dword_408730
.text:0040875A                 call    _strdup
.text:0040875F                 mov     [esp], esi
.text:00408762                 mov     edi, eax
.text:00408764                 call    sub_408610
.text:00408769                 mov     [edi], al
.text:0040876B                 test    al, al
.text:0040876D                 jz      short loc_408781
.text:0040876F                 mov     eax, edi
.text:00408771                 mov     ebx, [esp+10h]
.text:00408775                 mov     esi, [esp+14h]
.text:00408779                 mov     edi, [esp+18h]
.text:0040877D                 add     esp, 1Ch
.text:00408780                 retn
.text:00408781 ; ---------------------------------------------------------------------------
.text:00408781
.text:00408781 loc_408781:                             ; CODE XREF: .text:0040876D↑j
.text:00408781                 mov     [esp], edi
.text:00408784                 call    free
.text:00408789                 mov     dword ptr [esp+4], 0
.text:00408791                 mov     dword ptr [esp], 0
.text:00408798                 call    GetCurrentDirectoryA
.text:0040879D                 sub     esp, 8
.text:004087A0                 lea     esi, [eax+1]
.text:004087A3                 mov     [esp], esi
.text:004087A6                 call    malloc
.text:004087AB                 mov     [esp+4], eax
.text:004087AF                 mov     edi, eax
.text:004087B1                 mov     [esp], esi
.text:004087B4                 call    GetCurrentDirectoryA
.text:004087B9                 sub     esp, 8
.text:004087BC                 test    eax, eax
.text:004087BE                 jnz     short loc_4087E0
.text:004087C0                 mov     dword ptr [esp+20h], 408734h
.text:004087C8                 mov     ebx, [esp+10h]
.text:004087CC                 mov     esi, [esp+14h]
.text:004087D0                 mov     edi, [esp+18h]
.text:004087D4                 add     esp, 1Ch
.text:004087D7                 jmp     _strdup
.text:004087D7 ; ---------------------------------------------------------------------------
.text:004087DC                 align 10h
.text:004087E0
.text:004087E0 loc_4087E0:                             ; CODE XREF: .text:004087BE↑j
.text:004087E0                 mov     [esp+20h], edi
.text:004087E4                 mov     ebx, [esp+10h]
.text:004087E8                 mov     esi, [esp+14h]
.text:004087EC                 mov     edi, [esp+18h]
.text:004087F0                 add     esp, 1Ch
.text:004087F3                 jmp     sub_4084F0
.text:004087F3 ; ---------------------------------------------------------------------------
.text:004087F8                 align 10h
.text:00408800                 sub     esp, 7Ch
.text:00408803                 lea     edx, [esp+10h]
.text:00408807                 mov     [esp+8], edx
.text:0040880B                 mov     edx, [esp+80h]
.text:00408812                 mov     [esp+70h], ebx
.text:00408816                 mov     [esp+74h], esi
.text:0040881A                 mov     [esp+4], edx
.text:0040881E                 mov     [esp+78h], edi
.text:00408822                 mov     dword ptr [esp], 0
.text:00408829                 call    sub_40A760
.text:0040882E                 xor     edx, edx
.text:00408830                 inc     eax
.text:00408831                 jz      short loc_408855
.text:00408833                 mov     dword ptr [esp], offset dword_408730
.text:0040883A                 mov     esi, [esp+20h]
.text:0040883E                 call    _strdup
.text:00408843                 mov     edi, eax
.text:00408845                 mov     [esp], esi
.text:00408848                 call    sub_408610
.text:0040884D                 mov     [edi], al
.text:0040884F                 test    al, al
.text:00408851                 mov     edx, edi
.text:00408853                 jz      short loc_408867
.text:00408855
.text:00408855 loc_408855:                             ; CODE XREF: .text:00408831↑j
.text:00408855                                         ; .text:004088B4↓j
.text:00408855                 mov     ebx, [esp+70h]
.text:00408859                 mov     eax, edx
.text:0040885B                 mov     esi, [esp+74h]
.text:0040885F                 mov     edi, [esp+78h]
.text:00408863                 add     esp, 7Ch
.text:00408866                 retn
.text:00408867 ; ---------------------------------------------------------------------------
.text:00408867
.text:00408867 loc_408867:                             ; CODE XREF: .text:00408853↑j
.text:00408867                 mov     [esp], edi
.text:0040886A                 call    free
.text:0040886F                 mov     dword ptr [esp+4], 0
.text:00408877                 mov     dword ptr [esp], 0
.text:0040887E                 call    GetCurrentDirectoryA
.text:00408883                 sub     esp, 8
.text:00408886                 lea     esi, [eax+1]
.text:00408889                 mov     [esp], esi
.text:0040888C                 call    malloc
.text:00408891                 mov     [esp+4], eax
.text:00408895                 mov     edi, eax
.text:00408897                 mov     [esp], esi
.text:0040889A                 call    GetCurrentDirectoryA
.text:0040889F                 sub     esp, 8
.text:004088A2                 test    eax, eax
.text:004088A4                 jnz     short loc_4088B6
.text:004088A6                 mov     dword ptr [esp], 408734h
.text:004088AD                 call    _strdup
.text:004088B2
.text:004088B2 loc_4088B2:                             ; CODE XREF: .text:004088BE↓j
.text:004088B2                 mov     edx, eax
.text:004088B4                 jmp     short loc_408855
.text:004088B6 ; ---------------------------------------------------------------------------
.text:004088B6
.text:004088B6 loc_4088B6:                             ; CODE XREF: .text:004088A4↑j
.text:004088B6                 mov     [esp], edi
.text:004088B9                 call    sub_4084F0
.text:004088BE                 jmp     short loc_4088B2
.text:004088C0
.text:004088C0 ; =============== S U B R O U T I N E =======================================
.text:004088C0
.text:004088C0
.text:004088C0 ; int __cdecl sub_4088C0(LPCSTR)
.text:004088C0 sub_4088C0      proc near               ; CODE XREF: sub_4064A0+12F↑p
.text:004088C0
.text:004088C0 String1         = dword ptr -1Ch
.text:004088C0 String2         = dword ptr -18h
.text:004088C0 var_C           = dword ptr -0Ch
.text:004088C0 var_8           = dword ptr -8
.text:004088C0 var_4           = dword ptr -4
.text:004088C0 arg_0           = dword ptr  4
.text:004088C0
.text:004088C0                 sub     esp, 1Ch
.text:004088C3                 mov     [esp+1Ch+var_4], edi
.text:004088C7                 mov     edi, [esp+1Ch+arg_0]
.text:004088CB                 mov     [esp+1Ch+var_C], ebx
.text:004088CF                 mov     [esp+1Ch+var_8], esi
.text:004088D3                 mov     [esp+1Ch+String1], edi ; LPCSTR
.text:004088D6                 call    sub_408390
.text:004088DB                 mov     [esp+1Ch+String1], edi ; LPCSTR
.text:004088DE                 mov     esi, eax
.text:004088E0                 call    sub_4084F0
.text:004088E5                 mov     [esp+1Ch+String2], eax ; String2
.text:004088E9                 mov     ebx, eax
.text:004088EB                 mov     [esp+1Ch+String1], esi ; String1
.text:004088EE                 call    _stricmp
.text:004088F3                 test    eax, eax
.text:004088F5                 setz    dl
.text:004088F8                 test    esi, esi
.text:004088FA                 movzx   edi, dl
.text:004088FD                 jz      short loc_408907
.text:004088FF                 mov     [esp+1Ch+String1], esi ; Block
.text:00408902                 call    free
.text:00408907
.text:00408907 loc_408907:                             ; CODE XREF: sub_4088C0+3D↑j
.text:00408907                 test    ebx, ebx
.text:00408909                 jz      short loc_408913
.text:0040890B                 mov     [esp+1Ch+String1], ebx ; Block
.text:0040890E                 call    free
.text:00408913
.text:00408913 loc_408913:                             ; CODE XREF: sub_4088C0+49↑j
.text:00408913                 mov     eax, edi
.text:00408915                 mov     ebx, [esp+1Ch+var_C]
.text:00408919                 mov     esi, [esp+1Ch+var_8]
.text:0040891D                 mov     edi, [esp+1Ch+var_4]
.text:00408921                 add     esp, 1Ch
.text:00408924                 retn
.text:00408924 sub_4088C0      endp
.text:00408924
.text:00408924 ; ---------------------------------------------------------------------------
.text:00408925                 align 10h
.text:00408930 aKernel32_0     db 'KERNEL32',0         ; DATA XREF: .text:00408981↓o
.text:00408939 aGetdiskfreespa db 'GetDiskFreeSpaceExA',0
.text:00408939                                         ; DATA XREF: .text:00408992↓o
.text:0040894D ; const CHAR FileName[]
.text:0040894D FileName        db '\\.\vwin32',0       ; DATA XREF: .text:00408ADC↓o
.text:0040894D                                         ; sub_408F10+17C↓o
.text:00408958 ; ---------------------------------------------------------------------------
.text:00408958
.text:00408958 loc_408958:                             ; DATA XREF: .text:00408BF2↓o
.text:00408958                 dec     esi
.text:00408959                 push    esp
.text:0040895A                 inc     esi
.text:0040895B                 push    ebx
.text:0040895C                 add     [esi+41h], al
.text:0040895F                 push    esp
.text:00408960                 xor     esi, [edx]
.text:00408962                 add     [esi+41h], al
.text:00408965                 push    esp
.text:00408966                 add     [ebx+44h], al
.text:00408969                 inc     esi
.text:0040896A                 push    ebx
.text:0040896B
.text:0040896B loc_40896B:                             ; CODE XREF: sub_408F10+101↓p
.text:0040896B                 add     [ebp+55002674h], cl
.text:00408971                 push    edi
.text:00408972                 push    esi
.text:00408973                 push    ebx
.text:00408974                 sub     esp, 8BCh
.text:0040897A                 mov     ebp, [esp+8D0h]
.text:00408981                 mov     dword ptr [esp], offset aKernel32_0 ; "KERNEL32"
.text:00408988                 call    LoadLibraryA
.text:0040898D                 sub     esp, 4
.text:00408990                 mov     edi, eax
.text:00408992                 mov     dword ptr [esp+4], offset aGetdiskfreespa ; "GetDiskFreeSpaceExA"
.text:0040899A                 mov     [esp], eax
.text:0040899D                 call    GetProcAddress
.text:004089A2                 sub     esp, 8
.text:004089A5                 mov     esi, eax
.text:004089A7                 test    ebp, ebp
.text:004089A9                 mov     dword ptr [esp+20h], 0
.text:004089B1                 jz      loc_408EF1
.text:004089B7                 mov     [esp], ebp
.text:004089BA                 call    sub_409600
.text:004089BF                 mov     [esp], eax
.text:004089C2                 mov     ebp, eax
.text:004089C4                 call    strlen
.text:004089C9                 cmp     byte ptr [eax+ebp-1], 5Ch ; '\'
.text:004089CE                 mov     ebx, eax
.text:004089D0                 jz      short loc_4089EC
.text:004089D2                 mov     [esp], ebp
.text:004089D5                 lea     edx, [eax+1]
.text:004089D8                 mov     [esp+4], edx
.text:004089DC                 call    realloc
.text:004089E1                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:004089E5                 mov     ebp, eax
.text:004089E7                 mov     byte ptr [ebx+eax+1], 0
.text:004089EC
.text:004089EC loc_4089EC:                             ; CODE XREF: .text:004089D0↑j
.text:004089EC                 mov     dword ptr [esp+1Ch], 400h
.text:004089F4                 lea     edx, [esp+0B0h]
.text:004089FB                 lea     ebx, [esp+5Ch]
.text:004089FF                 mov     [esp+18h], edx
.text:00408A03                 lea     ecx, [esp+58h]
.text:00408A07                 lea     edx, [esp+54h]
.text:00408A0B                 mov     [esp+14h], ebx
.text:00408A0F                 lea     eax, [esp+4B0h]
.text:00408A16                 mov     [esp+10h], ecx
.text:00408A1A                 mov     [esp+0Ch], edx
.text:00408A1E                 mov     dword ptr [esp+8], 400h
.text:00408A26                 mov     [esp+4], eax
.text:00408A2A                 mov     [esp], ebp
.text:00408A2D                 call    GetVolumeInformationA
.text:00408A32                 sub     esp, 20h
.text:00408A35                 test    eax, eax
.text:00408A37                 jz      loc_408ECE
.text:00408A3D                 test    esi, esi
.text:00408A3F                 jz      short loc_408A65
.text:00408A41                 mov     [esp], ebp
.text:00408A44                 lea     edx, [esp+48h]
.text:00408A48                 lea     ebx, [esp+40h]
.text:00408A4C                 mov     [esp+0Ch], edx
.text:00408A50                 lea     ecx, [esp+38h]
.text:00408A54                 mov     [esp+8], ebx
.text:00408A58                 mov     [esp+4], ecx
.text:00408A5C                 call    esi
.text:00408A5E                 sub     esp, 10h
.text:00408A61                 mov     [esp+20h], eax
.text:00408A65
.text:00408A65 loc_408A65:                             ; CODE XREF: .text:00408A3F↑j
.text:00408A65                 test    edi, edi
.text:00408A67                 jz      short loc_408A74
.text:00408A69                 mov     [esp], edi
.text:00408A6C                 call    FreeLibrary
.text:00408A71                 sub     esp, 4
.text:00408A74
.text:00408A74 loc_408A74:                             ; CODE XREF: .text:00408A67↑j
.text:00408A74                 call    sub_40B080
.text:00408A79                 test    eax, eax
.text:00408A7B                 lea     esi, [esp+28h]
.text:00408A7F                 jz      loc_408EB0
.text:00408A85                 call    sub_40B080
.text:00408A8A                 test    eax, eax
.text:00408A8C                 jz      short loc_408A9C
.text:00408A8E                 call    sub_40AFD0
.text:00408A93                 cmp     eax, 0Bh
.text:00408A96                 jle     loc_408E84
.text:00408A9C
.text:00408A9C loc_408A9C:                             ; CODE XREF: .text:00408A8C↑j
.text:00408A9C                 cld
.text:00408A9D                 xor     eax, eax
.text:00408A9F                 lea     ebx, [esp+60h]
.text:00408AA3                 mov     ecx, 7
.text:00408AA8                 mov     edi, ebx
.text:00408AAA                 rep stosd
.text:00408AAC                 mov     dword ptr [esp+18h], 0
.text:00408AB4                 mov     dword ptr [esp+14h], 4000000h
.text:00408ABC                 mov     dword ptr [esp+10h], 0
.text:00408AC4                 mov     dword ptr [esp+0Ch], 0
.text:00408ACC                 mov     dword ptr [esp+8], 0
.text:00408AD4                 mov     dword ptr [esp+4], 0
.text:00408ADC                 mov     dword ptr [esp], offset FileName ; "\\\\.\\vwin32"
.text:00408AE3                 call    CreateFileA
.text:00408AE8                 sub     esp, 1Ch
.text:00408AEB                 mov     edi, eax
.text:00408AED                 cmp     eax, 0FFFFFFFFh
.text:00408AF0                 jz      short loc_408B70
.text:00408AF2                 mov     [esp+10h], ebx
.text:00408AF6                 lea     edx, [esp+80h]
.text:00408AFD                 lea     ecx, [esp+24h]
.text:00408B01                 mov     [esp+70h], edx
.text:00408B05                 mov     [esp+18h], ecx
.text:00408B09                 mov     [esp+8], ebx
.text:00408B0D                 mov     dword ptr [esp+6Ch], 7303h
.text:00408B15                 mov     dword ptr [esp+68h], 2Ch ; ','
.text:00408B1D                 mov     [esp+64h], ebp
.text:00408B21                 mov     dword ptr [esp+78h], 1
.text:00408B29                 mov     dword ptr [esp+1Ch], 0
.text:00408B31                 mov     dword ptr [esp+14h], 1Ch
.text:00408B39                 mov     dword ptr [esp+0Ch], 1Ch
.text:00408B41                 mov     dword ptr [esp+4], 6
.text:00408B49                 mov     [esp], eax
.text:00408B4C                 call    DeviceIoControl
.text:00408B51                 sub     esp, 20h
.text:00408B54                 mov     ebx, eax
.text:00408B56                 mov     [esp], edi
.text:00408B59                 call    CloseHandle
.text:00408B5E                 sub     esp, 4
.text:00408B61                 test    ebx, ebx
.text:00408B63                 jz      short loc_408B70
.text:00408B65                 test    byte ptr [esp+78h], 1
.text:00408B6A                 jz      loc_408E50
.text:00408B70
.text:00408B70 loc_408B70:                             ; CODE XREF: .text:00408AF0↑j
.text:00408B70                                         ; .text:00408B63↑j
.text:00408B70                 call    sub_408340
.text:00408B75                 mov     edi, eax
.text:00408B77                 call    _errno
.text:00408B7C                 mov     [eax], edi
.text:00408B7E                 xor     eax, eax
.text:00408B80
.text:00408B80 loc_408B80:                             ; CODE XREF: .text:00408E7F↓j
.text:00408B80                                         ; .text:00408EAB↓j
.text:00408B80                 test    eax, eax
.text:00408B82                 jnz     short loc_408BA4
.text:00408B84                 mov     dword ptr [esp+34h], 1
.text:00408B8C                 mov     dword ptr [esp+30h], 200h
.text:00408B94                 mov     dword ptr [esp+2Ch], 0
.text:00408B9C                 mov     dword ptr [esp+28h], 0
.text:00408BA4
.text:00408BA4 loc_408BA4:                             ; CODE XREF: .text:00408B82↑j
.text:00408BA4                 mov     edx, [esp+30h]
.text:00408BA8                 mov     edi, [esp+34h]
.text:00408BAC                 mov     ecx, [esp+20h]
.text:00408BB0                 imul    edi, edx
.text:00408BB3                 test    ecx, ecx
.text:00408BB5                 jnz     short loc_408BDD
.text:00408BB7                 mov     eax, [esp+28h]
.text:00408BBB                 mul     edi
.text:00408BBD                 mov     esi, eax
.text:00408BBF                 mov     eax, [esp+2Ch]
.text:00408BC3                 mov     [esp+44h], edx
.text:00408BC7                 mov     [esp+40h], esi
.text:00408BCB                 mul     edi
.text:00408BCD                 mov     [esp+48h], eax
.text:00408BD1                 mov     [esp+4Ch], edx
.text:00408BD5                 mov     [esp+38h], eax
.text:00408BD9                 mov     [esp+3Ch], edx
.text:00408BDD
.text:00408BDD loc_408BDD:                             ; CODE XREF: .text:00408BB5↑j
.text:00408BDD                 mov     ebx, [esp+5Ch]
.text:00408BE1                 lea     edx, [esp+0B0h]
.text:00408BE8                 mov     ecx, [esp+8D4h]
.text:00408BEF                 mov     [ecx+48h], ebx
.text:00408BF2                 mov     dword ptr [esp+4], offset loc_408958
.text:00408BFA                 mov     [esp], edx
.text:00408BFD                 call    _stricmp
.text:00408C02                 test    eax, eax
.text:00408C04                 jnz     loc_408DC0
.text:00408C0A                 mov     esi, [esp+8D4h]
.text:00408C11                 mov     dword ptr [esi], 5346544Eh
.text:00408C17
.text:00408C17 loc_408C17:                             ; CODE XREF: .text:00408DE8↓j
.text:00408C17                                         ; .text:00408E15↓j ...
.text:00408C17                 mov     ebx, [esp+30h]
.text:00408C1B                 mov     esi, [esp+8D4h]
.text:00408C22                 mov     [esi+4], ebx
.text:00408C25                 mov     [esi+8], ebx
.text:00408C28                 mov     ebx, [esi+8]
.text:00408C2B                 mov     [esi+0Ch], edi
.text:00408C2E                 mov     ecx, [esp+44h]
.text:00408C32                 xor     esi, esi
.text:00408C34                 mov     [esp+8], ebx
.text:00408C38                 mov     edx, [esp+40h]
.text:00408C3C                 mov     [esp+0Ch], esi
.text:00408C40                 mov     [esp+4], ecx
.text:00408C44                 mov     [esp], edx
.text:00408C47                 call    sub_40D4D0
.text:00408C4C                 mov     ecx, [esp+8D4h]
.text:00408C53                 mov     [ecx+10h], eax
.text:00408C56                 mov     [ecx+14h], edx
.text:00408C59                 mov     ecx, [esp+4Ch]
.text:00408C5D                 mov     [esp+8], ebx
.text:00408C61                 mov     edx, [esp+48h]
.text:00408C65                 mov     [esp+0Ch], esi
.text:00408C69                 mov     [esp+4], ecx
.text:00408C6D                 mov     [esp], edx
.text:00408C70                 call    sub_40D4D0
.text:00408C75                 mov     ecx, [esp+8D4h]
.text:00408C7C                 mov     [ecx+18h], eax
.text:00408C7F                 mov     [ecx+1Ch], edx
.text:00408C82                 mov     ecx, [esp+38h]
.text:00408C86                 mov     [esp+8], ebx
.text:00408C8A                 mov     ebx, [esp+3Ch]
.text:00408C8E                 mov     [esp+0Ch], esi
.text:00408C92                 mov     [esp], ecx
.text:00408C95                 mov     [esp+4], ebx
.text:00408C99                 call    sub_40D4D0
.text:00408C9E                 mov     esi, [esp+8D4h]
.text:00408CA5                 mov     [esi+20h], eax
.text:00408CA8                 mov     [esi+24h], edx
.text:00408CAB                 mov     ecx, [esp+44h]
.text:00408CAF                 mov     esi, edi
.text:00408CB1                 mov     [esp+8], esi
.text:00408CB5                 mov     edx, [esp+40h]
.text:00408CB9                 xor     edi, edi
.text:00408CBB                 mov     [esp+0Ch], edi
.text:00408CBF                 mov     [esp+4], ecx
.text:00408CC3                 mov     [esp], edx
.text:00408CC6                 call    sub_40D4D0
.text:00408CCB                 mov     ebx, [esp+8D4h]
.text:00408CD2                 mov     [ebx+28h], eax
.text:00408CD5                 mov     [ebx+2Ch], edx
.text:00408CD8                 mov     ecx, [esp+4Ch]
.text:00408CDC                 mov     [esp+8], esi
.text:00408CE0                 mov     edx, [esp+48h]
.text:00408CE4                 mov     [esp+0Ch], edi
.text:00408CE8                 mov     [esp+4], ecx
.text:00408CEC                 mov     [esp], edx
.text:00408CEF                 call    sub_40D4D0
.text:00408CF4                 mov     ebx, [esp+8D4h]
.text:00408CFB                 mov     [ebx+30h], eax
.text:00408CFE                 mov     [ebx+34h], edx
.text:00408D01                 mov     ecx, [esp+3Ch]
.text:00408D05                 mov     [esp+8], esi
.text:00408D09                 mov     edx, [esp+38h]
.text:00408D0D                 mov     [esp+0Ch], edi
.text:00408D11                 mov     [esp+4], ecx
.text:00408D15                 mov     [esp], edx
.text:00408D18                 call    sub_40D4D0
.text:00408D1D                 mov     edx, [esp+8D4h]
.text:00408D24                 lea     ecx, [esp+0B0h]
.text:00408D2B                 mov     [edx+38h], eax
.text:00408D2E                 mov     esi, [esp+58h]
.text:00408D32                 mov     dword ptr [edx+44h], 0FFFFFFFFh
.text:00408D39                 mov     [edx+110h], esi
.text:00408D3F                 mov     esi, edx
.text:00408D41                 add     esi, 4Ch ; 'L'
.text:00408D44                 movzx   ebx, word ptr [esp+56h]
.text:00408D49                 movzx   edi, word ptr [esp+54h]
.text:00408D4E                 mov     [edx+3Ch], ebx
.text:00408D51                 lea     ebx, [esp+4B0h]
.text:00408D58                 mov     [edx+40h], edi
.text:00408D5B                 mov     [esp+4], ecx
.text:00408D5F                 mov     dword ptr [esp+8], 10h
.text:00408D67                 mov     [esp], esi
.text:00408D6A                 call    strncpy
.text:00408D6F                 mov     dword ptr [esp+8], 5Ah ; 'Z'
.text:00408D77                 mov     edi, [esp+8D4h]
.text:00408D7E                 mov     [esp+4], ebx
.text:00408D82                 add     edi, 5Ch ; '\'
.text:00408D85                 mov     [esp], edi
.text:00408D88                 call    strncpy
.text:00408D8D                 mov     [esp+4], ebp
.text:00408D91                 mov     ebp, [esp+8D4h]
.text:00408D98                 mov     dword ptr [esp+8], 5Ah ; 'Z'
.text:00408DA0                 add     ebp, 0B6h ; '¶'
.text:00408DA6                 mov     [esp], ebp
.text:00408DA9                 call    strncpy
.text:00408DAE                 xor     eax, eax
.text:00408DB0
.text:00408DB0 loc_408DB0:                             ; CODE XREF: .text:00408EEC↓j
.text:00408DB0                 add     esp, 8BCh
.text:00408DB6                 pop     ebx
.text:00408DB7                 pop     esi
.text:00408DB8                 pop     edi
.text:00408DB9                 pop     ebp
.text:00408DBA                 retn
.text:00408DBA ; ---------------------------------------------------------------------------
.text:00408DBB                 align 10h
.text:00408DC0
.text:00408DC0 loc_408DC0:                             ; CODE XREF: .text:00408C04↑j
.text:00408DC0                 mov     dword ptr [esp+4], 40895Dh
.text:00408DC8                 lea     eax, [esp+0B0h]
.text:00408DCF                 mov     [esp], eax
.text:00408DD2                 call    _stricmp
.text:00408DD7                 test    eax, eax
.text:00408DD9                 jnz     short loc_408DED
.text:00408DDB                 mov     edx, [esp+8D4h]
.text:00408DE2                 mov     dword ptr [edx], 4008h
.text:00408DE8                 jmp     loc_408C17
.text:00408DED ; ---------------------------------------------------------------------------
.text:00408DED
.text:00408DED loc_408DED:                             ; CODE XREF: .text:00408DD9↑j
.text:00408DED                 mov     dword ptr [esp+4], 408963h
.text:00408DF5                 lea     ecx, [esp+0B0h]
.text:00408DFC                 mov     [esp], ecx
.text:00408DFF                 call    _stricmp
.text:00408E04                 test    eax, eax
.text:00408E06                 jnz     short loc_408E1A
.text:00408E08                 mov     ebx, [esp+8D4h]
.text:00408E0F                 mov     dword ptr [ebx], 4006h
.text:00408E15                 jmp     loc_408C17
.text:00408E1A ; ---------------------------------------------------------------------------
.text:00408E1A
.text:00408E1A loc_408E1A:                             ; CODE XREF: .text:00408E06↑j
.text:00408E1A                 mov     dword ptr [esp+4], 408967h
.text:00408E22                 lea     eax, [esp+0B0h]
.text:00408E29                 mov     [esp], eax
.text:00408E2C                 call    _stricmp
.text:00408E31                 test    eax, eax
.text:00408E33                 mov     esi, [esp+8D4h]
.text:00408E3A                 setnz   cl
.text:00408E3D                 movzx   edx, cl
.text:00408E40                 dec     edx
.text:00408E41                 and     edx, 4000h
.text:00408E47                 mov     [esi], edx
.text:00408E49                 jmp     loc_408C17
.text:00408E49 ; ---------------------------------------------------------------------------
.text:00408E4E                 align 10h
.text:00408E50
.text:00408E50 loc_408E50:                             ; CODE XREF: .text:00408B6A↑j
.text:00408E50                 mov     edi, [esp+84h]
.text:00408E57                 mov     eax, 1
.text:00408E5C                 mov     edx, [esp+88h]
.text:00408E63                 mov     ecx, [esp+8Ch]
.text:00408E6A                 mov     ebx, [esp+90h]
.text:00408E71                 mov     [esp+34h], edi
.text:00408E75                 mov     [esp+30h], edx
.text:00408E79                 mov     [esp+2Ch], ecx
.text:00408E7D                 mov     [esi], ebx
.text:00408E7F                 jmp     loc_408B80
.text:00408E84 ; ---------------------------------------------------------------------------
.text:00408E84
.text:00408E84 loc_408E84:                             ; CODE XREF: .text:00408A96↑j
.text:00408E84                 mov     [esp+10h], esi
.text:00408E88                 lea     eax, [esp+2Ch]
.text:00408E8C                 lea     esi, [esp+30h]
.text:00408E90                 mov     [esp+0Ch], eax
.text:00408E94                 lea     edi, [esp+34h]
.text:00408E98                 mov     [esp+8], esi
.text:00408E9C                 mov     [esp+4], edi
.text:00408EA0
.text:00408EA0 loc_408EA0:                             ; CODE XREF: .text:00408ECC↓j
.text:00408EA0                 mov     [esp], ebp
.text:00408EA3                 call    GetDiskFreeSpaceA
.text:00408EA8                 sub     esp, 14h
.text:00408EAB                 jmp     loc_408B80
.text:00408EB0 ; ---------------------------------------------------------------------------
.text:00408EB0
.text:00408EB0 loc_408EB0:                             ; CODE XREF: .text:00408A7F↑j
.text:00408EB0                 mov     [esp+10h], esi
.text:00408EB4                 lea     ebx, [esp+2Ch]
.text:00408EB8                 lea     eax, [esp+30h]
.text:00408EBC                 mov     [esp+0Ch], ebx
.text:00408EC0                 lea     esi, [esp+34h]
.text:00408EC4                 mov     [esp+8], eax
.text:00408EC8                 mov     [esp+4], esi
.text:00408ECC                 jmp     short loc_408EA0
.text:00408ECE ; ---------------------------------------------------------------------------
.text:00408ECE
.text:00408ECE loc_408ECE:                             ; CODE XREF: .text:00408A37↑j
.text:00408ECE                 mov     [esp], edi
.text:00408ED1                 call    FreeLibrary
.text:00408ED6                 sub     esp, 4
.text:00408ED9                 call    sub_408340
.text:00408EDE                 mov     esi, eax
.text:00408EE0                 call    _errno
.text:00408EE5                 mov     [eax], esi
.text:00408EE7
.text:00408EE7 loc_408EE7:                             ; CODE XREF: .text:00408F07↓j
.text:00408EE7                 mov     eax, 0FFFFFFFFh
.text:00408EEC                 jmp     loc_408DB0
.text:00408EF1 ; ---------------------------------------------------------------------------
.text:00408EF1
.text:00408EF1 loc_408EF1:                             ; CODE XREF: .text:004089B1↑j
.text:00408EF1                 mov     [esp], edi
.text:00408EF4                 call    FreeLibrary
.text:00408EF9                 sub     esp, 4
.text:00408EFC                 call    _errno
.text:00408F01                 mov     dword ptr [eax], 2
.text:00408F07                 jmp     short loc_408EE7
.text:00408F07 ; ---------------------------------------------------------------------------
.text:00408F09                 align 10h
.text:00408F10
.text:00408F10 ; =============== S U B R O U T I N E =======================================
.text:00408F10
.text:00408F10
.text:00408F10 ; int __cdecl sub_408F10(LPCSTR, LPDWORD, LPDWORD, LPDWORD, LPDWORD)
.text:00408F10 sub_408F10      proc near               ; CODE XREF: sub_406AF0+2C7↑p
.text:00408F10                                         ; .text:0040712A↑p
.text:00408F10
.text:00408F10 lpFileName      = dword ptr -9Ch
.text:00408F10 dwDesiredAccess = dword ptr -98h
.text:00408F10 dwShareMode     = dword ptr -94h
.text:00408F10 lpSecurityAttributes= dword ptr -90h
.text:00408F10 dwCreationDisposition= dword ptr -8Ch
.text:00408F10 dwFlagsAndAttributes= dword ptr -88h
.text:00408F10 hTemplateFile   = dword ptr -84h
.text:00408F10 lpOverlapped    = dword ptr -80h
.text:00408F10 BytesReturned   = dword ptr -70h
.text:00408F10 InBuffer        = byte ptr -6Ch
.text:00408F10 var_68          = dword ptr -68h
.text:00408F10 var_64          = dword ptr -64h
.text:00408F10 var_60          = dword ptr -60h
.text:00408F10 var_5C          = dword ptr -5Ch
.text:00408F10 var_54          = dword ptr -54h
.text:00408F10 var_4C          = byte ptr -4Ch
.text:00408F10 var_48          = dword ptr -48h
.text:00408F10 var_44          = dword ptr -44h
.text:00408F10 var_40          = dword ptr -40h
.text:00408F10 var_3C          = dword ptr -3Ch
.text:00408F10 lpRootPathName  = dword ptr -2Ch
.text:00408F10 lpSectorsPerCluster= dword ptr -28h
.text:00408F10 lpBytesPerSector= dword ptr -24h
.text:00408F10 lpNumberOfFreeClusters= dword ptr -20h
.text:00408F10 lpTotalNumberOfClusters= dword ptr -1Ch
.text:00408F10 var_18          = dword ptr -18h
.text:00408F10 var_14          = dword ptr -14h
.text:00408F10 var_10          = dword ptr -10h
.text:00408F10 var_C           = dword ptr -0Ch
.text:00408F10 var_8           = dword ptr -8
.text:00408F10 var_4           = dword ptr -4
.text:00408F10 arg_0           = dword ptr  4
.text:00408F10 arg_4           = dword ptr  8
.text:00408F10 arg_8           = dword ptr  0Ch
.text:00408F10 arg_C           = dword ptr  10h
.text:00408F10 arg_10          = dword ptr  14h
.text:00408F10
.text:00408F10                 sub     esp, 2Ch
.text:00408F13                 mov     edx, [esp+2Ch+arg_0]
.text:00408F17                 mov     [esp+2Ch+var_10], ebx
.text:00408F1B                 mov     ebx, [esp+2Ch+arg_10]
.text:00408F1F                 mov     [esp+2Ch+var_C], esi
.text:00408F23                 mov     esi, [esp+2Ch+arg_C]
.text:00408F27                 mov     [esp+2Ch+var_8], edi
.text:00408F2B                 mov     edi, [esp+2Ch+arg_8]
.text:00408F2F                 mov     [esp+2Ch+var_4], ebp
.text:00408F33                 mov     ebp, [esp+2Ch+arg_4]
.text:00408F37                 mov     [esp+2Ch+var_14], edx
.text:00408F3B                 call    sub_40B080
.text:00408F40                 test    eax, eax
.text:00408F42                 jz      short loc_408F74
.text:00408F44                 mov     [esp+2Ch+arg_10], ebx
.text:00408F48                 mov     edx, [esp+2Ch+var_14]
.text:00408F4C                 mov     ebx, [esp+2Ch+var_10]
.text:00408F50                 mov     [esp+2Ch+arg_C], esi
.text:00408F54                 mov     esi, [esp+2Ch+var_C]
.text:00408F58                 mov     [esp+2Ch+arg_8], edi
.text:00408F5C                 mov     edi, [esp+2Ch+var_8]
.text:00408F60                 mov     [esp+2Ch+arg_4], ebp
.text:00408F64                 mov     ebp, [esp+2Ch+var_4]
.text:00408F68                 mov     [esp+2Ch+arg_0], edx
.text:00408F6C                 add     esp, 2Ch
.text:00408F6F                 jmp     loc_409020
.text:00408F74 ; ---------------------------------------------------------------------------
.text:00408F74
.text:00408F74 loc_408F74:                             ; CODE XREF: sub_408F10+32↑j
.text:00408F74                 mov     [esp+2Ch+lpTotalNumberOfClusters], ebx ; lpTotalNumberOfClusters
.text:00408F78                 mov     ecx, [esp+2Ch+var_14]
.text:00408F7C                 mov     [esp+2Ch+lpNumberOfFreeClusters], esi ; lpNumberOfFreeClusters
.text:00408F80                 mov     [esp+2Ch+lpBytesPerSector], edi ; lpBytesPerSector
.text:00408F84                 mov     [esp+2Ch+lpSectorsPerCluster], ebp ; lpSectorsPerCluster
.text:00408F88                 mov     [esp+2Ch+lpRootPathName], ecx ; lpRootPathName
.text:00408F8B                 call    GetDiskFreeSpaceA
.text:00408F90                 sub     esp, 14h
.text:00408F93                 mov     ebx, [esp+2Ch+var_10]
.text:00408F97                 mov     esi, [esp+2Ch+var_C]
.text:00408F9B                 mov     edi, [esp+2Ch+var_8]
.text:00408F9F                 mov     ebp, [esp+2Ch+var_4]
.text:00408FA3                 add     esp, 2Ch
.text:00408FA6                 retn
.text:00408FA6 ; ---------------------------------------------------------------------------
.text:00408FA7                 align 10h
.text:00408FB0
.text:00408FB0 loc_408FB0:                             ; CODE XREF: .text:00409A8D↓p
.text:00408FB0                 sub     esp, 1Ch
.text:00408FB3                 mov     [esp+1Ch+var_4], esi
.text:00408FB7                 mov     esi, [esp+1Ch+arg_0]
.text:00408FBB                 mov     [esp+1Ch+var_8], ebx
.text:00408FBF                 mov     [esp+1Ch+lpTotalNumberOfClusters], esi ; LPCSTR
.text:00408FC2                 call    sub_4084F0
.text:00408FC7                 test    eax, eax
.text:00408FC9                 mov     ebx, eax
.text:00408FCB                 jz      short loc_408FE0
.text:00408FCD                 cmp     byte ptr [eax], 0
.text:00408FD0                 jz      short loc_408FE0
.text:00408FD2                 test    esi, esi
.text:00408FD4                 jz      short loc_408FE0
.text:00408FD6                 cmp     byte ptr [esi], 0
.text:00408FD9                 jnz     short loc_409006
.text:00408FDB                 nop
.text:00408FDC                 lea     esi, [esi+0]
.text:00408FE0
.text:00408FE0 loc_408FE0:                             ; CODE XREF: sub_408F10+BB↑j
.text:00408FE0                                         ; sub_408F10+C0↑j ...
.text:00408FE0                 call    _errno
.text:00408FE5                 mov     dword ptr [eax], 2
.text:00408FEB                 mov     esi, 0FFFFFFFFh
.text:00408FF0
.text:00408FF0 loc_408FF0:                             ; CODE XREF: sub_408F10+108↓j
.text:00408FF0                 mov     [esp+1Ch+lpTotalNumberOfClusters], ebx ; Block
.text:00408FF3                 call    free
.text:00408FF8                 mov     eax, esi
.text:00408FFA                 mov     ebx, [esp+1Ch+var_8]
.text:00408FFE                 mov     esi, [esp+1Ch+var_4]
.text:00409002                 add     esp, 1Ch
.text:00409005                 retn
.text:00409006 ; ---------------------------------------------------------------------------
.text:00409006
.text:00409006 loc_409006:                             ; CODE XREF: sub_408F10+C9↑j
.text:00409006                 mov     [esp+1Ch+lpTotalNumberOfClusters], eax
.text:00409009                 mov     edx, [esp+1Ch+arg_4]
.text:0040900D                 mov     [esp+1Ch+var_18], edx
.text:00409011                 call    near ptr loc_40896B+5
.text:00409016                 mov     esi, eax
.text:00409018                 jmp     short loc_408FF0
.text:00409018 ; ---------------------------------------------------------------------------
.text:0040901A                 align 10h
.text:00409020
.text:00409020 loc_409020:                             ; CODE XREF: sub_408F10+5F↑j
.text:00409020                 push    ebp
.text:00409021                 push    edi
.text:00409022                 push    esi
.text:00409023                 push    ebx
.text:00409024                 sub     esp, 8Ch
.text:0040902A                 mov     ebp, [esp+9Ch+arg_0]
.text:00409031                 call    sub_40B080
.text:00409036                 test    eax, eax
.text:00409038                 jz      short loc_409048
.text:0040903A                 call    sub_40AFD0
.text:0040903F                 cmp     eax, 0Bh
.text:00409042                 jle     loc_409170
.text:00409048
.text:00409048 loc_409048:                             ; CODE XREF: sub_408F10+128↑j
.text:00409048                 cld
.text:00409049                 xor     eax, eax
.text:0040904B                 lea     ebx, [esp+9Ch+InBuffer]
.text:0040904F                 mov     ecx, 7
.text:00409054                 mov     edi, ebx
.text:00409056                 lea     esi, [esp+9Ch+var_4C]
.text:0040905A                 rep stosd
.text:0040905C                 mov     [esp+9Ch+hTemplateFile], 0 ; hTemplateFile
.text:00409064                 mov     [esp+9Ch+dwFlagsAndAttributes], 4000000h ; dwFlagsAndAttributes
.text:0040906C                 mov     [esp+9Ch+dwCreationDisposition], 0 ; dwCreationDisposition
.text:00409074                 mov     [esp+9Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:0040907C                 mov     [esp+9Ch+dwShareMode], 0 ; dwShareMode
.text:00409084                 mov     [esp+9Ch+dwDesiredAccess], 0 ; dwDesiredAccess
.text:0040908C                 mov     [esp+9Ch+lpFileName], offset FileName ; "\\\\.\\vwin32"
.text:00409093                 call    CreateFileA
.text:00409098                 sub     esp, 1Ch
.text:0040909B                 mov     edi, eax
.text:0040909D                 cmp     eax, 0FFFFFFFFh
.text:004090A0                 jz      short loc_409115
.text:004090A2                 mov     [esp+9Ch+var_68], ebp
.text:004090A6                 lea     ebp, [esp+9Ch+BytesReturned]
.text:004090AA                 mov     [esp+9Ch+var_5C], esi
.text:004090AE                 mov     [esp+9Ch+var_60], 7303h
.text:004090B6                 mov     [esp+9Ch+var_64], 2Ch ; ','
.text:004090BE                 mov     [esp+9Ch+var_54], 1
.text:004090C6                 mov     [esp+9Ch+lpOverlapped], 0 ; lpOverlapped
.text:004090CE                 mov     [esp+9Ch+hTemplateFile], ebp ; lpBytesReturned
.text:004090D2                 mov     [esp+9Ch+dwFlagsAndAttributes], 1Ch ; nOutBufferSize
.text:004090DA                 mov     [esp+9Ch+dwCreationDisposition], ebx ; lpOutBuffer
.text:004090DE                 mov     [esp+9Ch+lpSecurityAttributes], 1Ch ; nInBufferSize
.text:004090E6                 mov     [esp+9Ch+dwShareMode], ebx ; lpInBuffer
.text:004090EA                 mov     [esp+9Ch+dwDesiredAccess], 6 ; dwIoControlCode
.text:004090F2                 mov     [esp+9Ch+lpFileName], eax ; hDevice
.text:004090F5                 call    DeviceIoControl
.text:004090FA                 sub     esp, 20h
.text:004090FD                 mov     esi, eax
.text:004090FF                 mov     [esp+9Ch+lpFileName], edi ; hObject
.text:00409102                 call    CloseHandle
.text:00409107                 sub     esp, 4
.text:0040910A                 test    esi, esi
.text:0040910C                 jz      short loc_409115
.text:0040910E                 test    byte ptr [esp+9Ch+var_54], 1
.text:00409113                 jz      short loc_409130
.text:00409115
.text:00409115 loc_409115:                             ; CODE XREF: sub_408F10+190↑j
.text:00409115                                         ; sub_408F10+1FC↑j
.text:00409115                 call    sub_408340
.text:0040911A                 mov     edi, eax
.text:0040911C                 call    _errno
.text:00409121                 mov     [eax], edi
.text:00409123                 xor     eax, eax
.text:00409125
.text:00409125 loc_409125:                             ; CODE XREF: sub_408F10+25A↓j
.text:00409125                                         ; sub_408F10+297↓j
.text:00409125                 add     esp, 8Ch
.text:0040912B                 pop     ebx
.text:0040912C                 pop     esi
.text:0040912D                 pop     edi
.text:0040912E                 pop     ebp
.text:0040912F                 retn
.text:00409130 ; ---------------------------------------------------------------------------
.text:00409130
.text:00409130 loc_409130:                             ; CODE XREF: sub_408F10+203↑j
.text:00409130                 mov     edx, [esp+9Ch+var_48]
.text:00409134                 mov     eax, 1
.text:00409139                 mov     ebx, [esp+9Ch+arg_4]
.text:00409140                 mov     ebp, [esp+9Ch+arg_8]
.text:00409147                 mov     ecx, [esp+9Ch+arg_C]
.text:0040914E                 mov     [ebx], edx
.text:00409150                 mov     edi, [esp+9Ch+var_44]
.text:00409154                 mov     ebx, [esp+9Ch+arg_10]
.text:0040915B                 mov     [ebp+0], edi
.text:0040915E                 mov     esi, [esp+9Ch+var_40]
.text:00409162                 mov     [ecx], esi
.text:00409164                 mov     edx, [esp+9Ch+var_3C]
.text:00409168                 mov     [ebx], edx
.text:0040916A                 jmp     short loc_409125
.text:0040916A ; ---------------------------------------------------------------------------
.text:0040916C                 align 10h
.text:00409170
.text:00409170 loc_409170:                             ; CODE XREF: sub_408F10+132↑j
.text:00409170                 mov     [esp+9Ch+lpFileName], ebp ; lpRootPathName
.text:00409173                 mov     eax, [esp+9Ch+arg_C]
.text:0040917A                 mov     ecx, [esp+9Ch+arg_10]
.text:00409181                 mov     edx, [esp+9Ch+arg_8]
.text:00409188                 mov     [esp+9Ch+lpSecurityAttributes], eax ; lpNumberOfFreeClusters
.text:0040918C                 mov     eax, [esp+9Ch+arg_4]
.text:00409193                 mov     [esp+9Ch+dwCreationDisposition], ecx ; lpTotalNumberOfClusters
.text:00409197                 mov     [esp+9Ch+dwShareMode], edx ; lpBytesPerSector
.text:0040919B                 mov     [esp+9Ch+dwDesiredAccess], eax ; lpSectorsPerCluster
.text:0040919F                 call    GetDiskFreeSpaceA
.text:004091A4                 sub     esp, 14h
.text:004091A7                 jmp     loc_409125
.text:004091A7 sub_408F10      endp ; sp-analysis failed
.text:004091A7
.text:004091A7 ; ---------------------------------------------------------------------------
.text:004091AC                 align 10h
.text:004091B0
.text:004091B0 ; =============== S U B R O U T I N E =======================================
.text:004091B0
.text:004091B0 ; Attributes: bp-based frame info_from_lumina fpd=268h
.text:004091B0
.text:004091B0 ; int __cdecl win32_longpath(LPCSTR lpFileName)
.text:004091B0 _win32_longpath proc near               ; CODE XREF: .text:00409974↓p
.text:004091B0
.text:004091B0 C               = dword ptr -278h
.text:004091B0 lpFindFileData  = dword ptr -274h
.text:004091B0 Destination     = byte ptr -268h
.text:004091B0 var_267         = byte ptr -267h
.text:004091B0 FindFileData    = _WIN32_FIND_DATAA ptr -158h
.text:004091B0 lpFileName      = dword ptr  8
.text:004091B0
.text:004091B0                 push    ebp
.text:004091B1                 xor     eax, eax
.text:004091B3                 push    edi
.text:004091B4                 push    esi
.text:004091B5                 push    ebx
.text:004091B6                 sub     esp, 26Ch
.text:004091BC                 mov     esi, [esp+278h+lpFileName]
.text:004091C3                 lea     ebp, [esp+278h+Destination]
.text:004091C7                 test    esi, esi
.text:004091C9                 jz      loc_409327
.text:004091CF                 movsx   edx, byte ptr [esi]
.text:004091D2                 mov     [esp+278h+C], edx ; C
.text:004091D5                 call    isalpha
.text:004091DA                 test    eax, eax
.text:004091DC                 jz      short loc_4091EF
.text:004091DE                 mov     eax, [esp+278h+lpFileName]
.text:004091E5                 cmp     byte ptr [eax+1], 3Ah ; ':'
.text:004091E9                 jz      loc_40952B
.text:004091EF
.text:004091EF loc_4091EF:                             ; CODE XREF: _win32_longpath+2C↑j
.text:004091EF                 mov     edx, [esp+278h+lpFileName]
.text:004091F6                 movzx   eax, byte ptr [edx]
.text:004091F9                 cmp     al, 2Fh ; '/'
.text:004091FB                 jz      loc_40940B
.text:00409201                 cmp     al, 5Ch ; '\'
.text:00409203                 jz      loc_40940B
.text:00409209
.text:00409209 loc_409209:                             ; CODE XREF: _win32_longpath+26E↓j
.text:00409209                                         ; _win32_longpath+2B1↓j ...
.text:00409209                 mov     [ebp+268h+Destination], 0
.text:0040920D                 movzx   ebx, byte ptr [esi]
.text:00409210                 test    bl, bl
.text:00409212                 jz      loc_409309
.text:00409218                 nop
.text:00409219                 lea     esi, [esi+0]
.text:00409220
.text:00409220 loc_409220:                             ; CODE XREF: _win32_longpath+153↓j
.text:00409220                 cmp     bl, 2Fh ; '/'
.text:00409223                 jz      loc_4093C0
.text:00409229                 cmp     bl, 5Ch ; '\'
.text:0040922C                 jz      loc_4093C0
.text:00409232
.text:00409232 loc_409232:                             ; CODE XREF: _win32_longpath+21E↓j
.text:00409232                                         ; _win32_longpath+22C↓j ...
.text:00409232                 cmp     bl, 2Eh ; '.'
.text:00409235                 jz      loc_409360
.text:0040923B
.text:0040923B loc_40923B:                             ; CODE XREF: _win32_longpath+1EF↓j
.text:0040923B                                         ; _win32_longpath+203↓j
.text:0040923B                 test    bl, bl
.text:0040923D                 jz      loc_409309
.text:00409243                 cmp     bl, 2Fh ; '/'
.text:00409246                 jz      short loc_409262
.text:00409248                 cmp     bl, 5Ch ; '\'
.text:0040924B                 jz      short loc_409262
.text:0040924D                 lea     esi, [esi+0]
.text:00409250
.text:00409250 loc_409250:                             ; CODE XREF: _win32_longpath+B0↓j
.text:00409250                 inc     esi
.text:00409251                 movzx   ebx, byte ptr [esi]
.text:00409254                 test    bl, bl
.text:00409256                 jz      short loc_409262
.text:00409258                 cmp     bl, 2Fh ; '/'
.text:0040925B                 jz      short loc_409262
.text:0040925D                 cmp     bl, 5Ch ; '\'
.text:00409260                 jnz     short loc_409250
.text:00409262
.text:00409262 loc_409262:                             ; CODE XREF: _win32_longpath+96↑j
.text:00409262                                         ; _win32_longpath+9B↑j ...
.text:00409262                 mov     byte ptr [esi], 0
.text:00409265                 lea     edx, [esp+278h+FindFileData]
.text:0040926C                 mov     eax, [esp+278h+lpFileName]
.text:00409273                 mov     [esp+278h+lpFindFileData], edx ; lpFindFileData
.text:00409277                 mov     [esp+278h+C], eax ; lpFileName
.text:0040927A                 call    FindFirstFileA
.text:0040927F                 mov     [esi], bl
.text:00409281                 sub     esp, 8
.text:00409284                 mov     edi, eax
.text:00409286                 cmp     eax, 0FFFFFFFFh
.text:00409289                 jz      loc_40934C
.text:0040928F                 lea     ebx, [esp+278h+FindFileData.cFileName]
.text:00409296                 mov     ecx, ebx
.text:00409298                 nop
.text:00409299                 lea     esi, [esi+0]
.text:004092A0
.text:004092A0 loc_4092A0:                             ; CODE XREF: _win32_longpath+105↓j
.text:004092A0                 mov     eax, [ebx]
.text:004092A2                 add     ebx, 4
.text:004092A5                 lea     edx, [eax-1010101h]
.text:004092AB                 not     eax
.text:004092AD                 and     edx, eax
.text:004092AF                 and     edx, 80808080h
.text:004092B5                 jz      short loc_4092A0
.text:004092B7                 test    edx, 8080h
.text:004092BD                 jnz     short loc_4092C5
.text:004092BF                 shr     edx, 10h
.text:004092C2                 add     ebx, 2
.text:004092C5
.text:004092C5 loc_4092C5:                             ; CODE XREF: _win32_longpath+10D↑j
.text:004092C5                 add     dl, dl
.text:004092C7                 sbb     ebx, 3
.text:004092CA                 sub     ebx, ecx
.text:004092CC                 lea     ecx, [esp+278h+Destination]
.text:004092D0                 sub     ecx, ebp
.text:004092D2                 add     ecx, 105h
.text:004092D8                 cmp     ecx, ebx
.text:004092DA                 jle     short loc_409332
.text:004092DC                 mov     [esp+278h+C], ebp ; Destination
.text:004092DF                 lea     edx, [esp+278h+FindFileData.cFileName]
.text:004092E6                 add     ebp, ebx
.text:004092E8                 mov     [esp+278h+lpFindFileData], edx ; Source
.text:004092EC                 call    strcpy
.text:004092F1                 mov     [esp+278h+C], edi ; hFindFile
.text:004092F4                 call    FindClose
.text:004092F9                 sub     esp, 4
.text:004092FC
.text:004092FC loc_4092FC:                             ; CODE XREF: _win32_longpath+1E0↓j
.text:004092FC                 movzx   ecx, byte ptr [esi]
.text:004092FF                 test    cl, cl
.text:00409301                 mov     bl, cl
.text:00409303                 jnz     loc_409220
.text:00409309
.text:00409309 loc_409309:                             ; CODE XREF: _win32_longpath+62↑j
.text:00409309                                         ; _win32_longpath+8D↑j
.text:00409309                 mov     esi, [esp+278h+lpFileName]
.text:00409310                 lea     ebp, [esp+278h+Destination]
.text:00409314                 mov     [esp+278h+lpFindFileData], ebp ; Source
.text:00409318                 mov     [esp+278h+C], esi ; Destination
.text:0040931B                 call    strcpy
.text:00409320                 mov     eax, [esp+278h+lpFileName]
.text:00409327
.text:00409327 loc_409327:                             ; CODE XREF: _win32_longpath+19↑j
.text:00409327                                         ; _win32_longpath+19A↓j
.text:00409327                 add     esp, 26Ch
.text:0040932D                 pop     ebx
.text:0040932E                 pop     esi
.text:0040932F                 pop     edi
.text:00409330                 pop     ebp
.text:00409331                 retn
.text:00409332 ; ---------------------------------------------------------------------------
.text:00409332
.text:00409332 loc_409332:                             ; CODE XREF: _win32_longpath+12A↑j
.text:00409332                 mov     [esp+278h+C], edi ; hFindFile
.text:00409335                 call    FindClose
.text:0040933A                 sub     esp, 4
.text:0040933D                 call    _errno
.text:00409342                 mov     dword ptr [eax], 22h ; '"'
.text:00409348
.text:00409348 loc_409348:                             ; CODE XREF: _win32_longpath+1A7↓j
.text:00409348                 xor     eax, eax
.text:0040934A                 jmp     short loc_409327
.text:0040934C ; ---------------------------------------------------------------------------
.text:0040934C
.text:0040934C loc_40934C:                             ; CODE XREF: _win32_longpath+D9↑j
.text:0040934C                 call    _errno
.text:00409351                 mov     dword ptr [eax], 16h
.text:00409357                 jmp     short loc_409348
.text:00409357 ; ---------------------------------------------------------------------------
.text:00409359                 align 10h
.text:00409360
.text:00409360 loc_409360:                             ; CODE XREF: _win32_longpath+85↑j
.text:00409360                 movzx   eax, byte ptr [esi+1]
.text:00409364                 test    al, al
.text:00409366                 jnz     short loc_409395
.text:00409368
.text:00409368 loc_409368:                             ; CODE XREF: _win32_longpath+1E7↓j
.text:00409368                                         ; _win32_longpath+1EB↓j ...
.text:00409368                 test    bl, bl
.text:0040936A                 jz      short loc_40938C
.text:0040936C                 cmp     bl, 2Fh ; '/'
.text:0040936F                 jz      short loc_40938C
.text:00409371                 cmp     bl, 5Ch ; '\'
.text:00409374                 jz      short loc_40938C
.text:00409376
.text:00409376 loc_409376:                             ; CODE XREF: _win32_longpath+1DA↓j
.text:00409376                 mov     [ebp+268h+Destination], bl
.text:00409379                 inc     esi
.text:0040937A                 inc     ebp
.text:0040937B                 movzx   ebx, byte ptr [esi]
.text:0040937E                 test    bl, bl
.text:00409380                 jz      short loc_40938C
.text:00409382                 cmp     bl, 2Fh ; '/'
.text:00409385                 jz      short loc_40938C
.text:00409387                 cmp     bl, 5Ch ; '\'
.text:0040938A                 jnz     short loc_409376
.text:0040938C
.text:0040938C loc_40938C:                             ; CODE XREF: _win32_longpath+1BA↑j
.text:0040938C                                         ; _win32_longpath+1BF↑j ...
.text:0040938C                 mov     [ebp+268h+Destination], 0
.text:00409390                 jmp     loc_4092FC
.text:00409395 ; ---------------------------------------------------------------------------
.text:00409395
.text:00409395 loc_409395:                             ; CODE XREF: _win32_longpath+1B6↑j
.text:00409395                 cmp     al, 2Fh ; '/'
.text:00409397                 jz      short loc_409368
.text:00409399                 cmp     al, 5Ch ; '\'
.text:0040939B                 jz      short loc_409368
.text:0040939D                 cmp     al, 2Eh ; '.'
.text:0040939F                 jnz     loc_40923B
.text:004093A5                 movzx   eax, byte ptr [esi+2]
.text:004093A9                 test    al, al
.text:004093AB                 jz      short loc_409368
.text:004093AD                 cmp     al, 2Fh ; '/'
.text:004093AF                 jz      short loc_409368
.text:004093B1                 cmp     al, 5Ch ; '\'
.text:004093B3                 jnz     loc_40923B
.text:004093B9                 jmp     short loc_409368
.text:004093B9 ; ---------------------------------------------------------------------------
.text:004093BB                 align 10h
.text:004093C0
.text:004093C0 loc_4093C0:                             ; CODE XREF: _win32_longpath+73↑j
.text:004093C0                                         ; _win32_longpath+7C↑j
.text:004093C0                 mov     [ebp+268h+Destination], bl
.text:004093C3                 inc     esi
.text:004093C4                 inc     ebp
.text:004093C5                 mov     [ebp+268h+Destination], 0
.text:004093C9                 movzx   ebx, byte ptr [esi]
.text:004093CC                 test    bl, bl
.text:004093CE                 jz      loc_409232
.text:004093D4                 cmp     bl, 2Fh ; '/'
.text:004093D7                 jz      short loc_4093F0
.text:004093D9                 cmp     bl, 5Ch ; '\'
.text:004093DC                 jnz     loc_409232
.text:004093E2                 lea     esi, [esi+0]
.text:004093E9                 lea     edi, [edi+0]
.text:004093F0
.text:004093F0 loc_4093F0:                             ; CODE XREF: _win32_longpath+227↑j
.text:004093F0                                         ; _win32_longpath+24F↓j ...
.text:004093F0                 inc     esi
.text:004093F1                 movzx   ebx, byte ptr [esi]
.text:004093F4                 test    bl, bl
.text:004093F6                 jz      loc_409232
.text:004093FC                 cmp     bl, 2Fh ; '/'
.text:004093FF                 jz      short loc_4093F0
.text:00409401                 cmp     bl, 5Ch ; '\'
.text:00409404                 jz      short loc_4093F0
.text:00409406                 jmp     loc_409232
.text:0040940B ; ---------------------------------------------------------------------------
.text:0040940B
.text:0040940B loc_40940B:                             ; CODE XREF: _win32_longpath+4B↑j
.text:0040940B                                         ; _win32_longpath+53↑j
.text:0040940B                 mov     edi, [esp+278h+lpFileName]
.text:00409412                 movzx   edx, byte ptr [edi+1]
.text:00409416                 cmp     dl, 2Fh ; '/'
.text:00409419                 jz      short loc_409424
.text:0040941B                 cmp     dl, 5Ch ; '\'
.text:0040941E                 jnz     loc_409209
.text:00409424
.text:00409424 loc_409424:                             ; CODE XREF: _win32_longpath+269↑j
.text:00409424                 mov     esi, [esp+278h+lpFileName]
.text:0040942B                 mov     [ebp+268h+Destination], al
.text:0040942E                 mov     ecx, [esp+278h+lpFileName]
.text:00409435                 inc     ebp
.text:00409436                 add     esi, 2
.text:00409439                 movzx   ebx, byte ptr [ecx+1]
.text:0040943D                 mov     [ebp+268h+Destination], bl
.text:00409440                 inc     ebp
.text:00409441                 movzx   eax, byte ptr [ecx+2]
.text:00409445                 test    al, al
.text:00409447                 jz      loc_409523
.text:0040944D                 cmp     al, 2Fh ; '/'
.text:0040944F                 jz      loc_409508
.text:00409455                 cmp     al, 5Ch ; '\'
.text:00409457                 mov     bl, al
.text:00409459                 jz      loc_409508
.text:0040945F
.text:0040945F loc_40945F:                             ; CODE XREF: _win32_longpath+36E↓j
.text:0040945F                                         ; _win32_longpath+376↓j
.text:0040945F                 test    bl, bl
.text:00409461                 jz      loc_409209
.text:00409467                 cmp     bl, 2Fh ; '/'
.text:0040946A                 jz      short loc_40948B
.text:0040946C                 cmp     bl, 5Ch ; '\'
.text:0040946F                 jz      short loc_40948B
.text:00409471
.text:00409471 loc_409471:                             ; CODE XREF: _win32_longpath+2D9↓j
.text:00409471                 mov     [ebp+268h+Destination], bl
.text:00409474                 inc     esi
.text:00409475                 inc     ebp
.text:00409476                 movzx   ebx, byte ptr [esi]
.text:00409479                 test    bl, bl
.text:0040947B                 jz      loc_409209
.text:00409481                 cmp     bl, 2Fh ; '/'
.text:00409484                 jz      short loc_40948B
.text:00409486                 cmp     bl, 5Ch ; '\'
.text:00409489                 jnz     short loc_409471
.text:0040948B
.text:0040948B loc_40948B:                             ; CODE XREF: _win32_longpath+2BA↑j
.text:0040948B                                         ; _win32_longpath+2BF↑j ...
.text:0040948B                 test    bl, bl
.text:0040948D                 jz      loc_409209
.text:00409493                 mov     [ebp+268h+Destination], bl
.text:00409496                 inc     esi
.text:00409497                 inc     ebp
.text:00409498                 movzx   ebx, byte ptr [esi]
.text:0040949B                 test    bl, bl
.text:0040949D                 jz      loc_409209
.text:004094A3                 cmp     bl, 2Fh ; '/'
.text:004094A6                 jz      short loc_4094F0
.text:004094A8                 cmp     bl, 5Ch ; '\'
.text:004094AB                 jz      short loc_4094F0
.text:004094AD
.text:004094AD loc_4094AD:                             ; CODE XREF: _win32_longpath+356↓j
.text:004094AD                 test    bl, bl
.text:004094AF                 jz      loc_409209
.text:004094B5                 cmp     bl, 2Fh ; '/'
.text:004094B8                 jz      loc_409209
.text:004094BE                 cmp     bl, 5Ch ; '\'
.text:004094C1                 jz      loc_409209
.text:004094C7
.text:004094C7 loc_4094C7:                             ; CODE XREF: _win32_longpath+333↓j
.text:004094C7                 mov     [ebp+268h+Destination], bl
.text:004094CA                 inc     esi
.text:004094CB                 inc     ebp
.text:004094CC                 movzx   ebx, byte ptr [esi]
.text:004094CF                 test    bl, bl
.text:004094D1                 jz      loc_409209
.text:004094D7                 cmp     bl, 2Fh ; '/'
.text:004094DA                 jz      loc_409209
.text:004094E0                 cmp     bl, 5Ch ; '\'
.text:004094E3                 jnz     short loc_4094C7
.text:004094E5                 jmp     loc_409209
.text:004094E5 ; ---------------------------------------------------------------------------
.text:004094EA                 align 10h
.text:004094F0
.text:004094F0 loc_4094F0:                             ; CODE XREF: _win32_longpath+2F6↑j
.text:004094F0                                         ; _win32_longpath+2FB↑j ...
.text:004094F0                 inc     esi
.text:004094F1                 movzx   ebx, byte ptr [esi]
.text:004094F4                 test    bl, bl
.text:004094F6                 jz      loc_409209
.text:004094FC                 cmp     bl, 2Fh ; '/'
.text:004094FF                 jz      short loc_4094F0
.text:00409501                 cmp     bl, 5Ch ; '\'
.text:00409504                 jz      short loc_4094F0
.text:00409506                 jmp     short loc_4094AD
.text:00409508 ; ---------------------------------------------------------------------------
.text:00409508
.text:00409508 loc_409508:                             ; CODE XREF: _win32_longpath+29F↑j
.text:00409508                                         ; _win32_longpath+2A9↑j ...
.text:00409508                 inc     esi
.text:00409509                 movzx   ebx, byte ptr [esi]
.text:0040950C                 test    bl, bl
.text:0040950E                 jz      loc_409209
.text:00409514                 cmp     bl, 2Fh ; '/'
.text:00409517                 jz      short loc_409508
.text:00409519                 cmp     bl, 5Ch ; '\'
.text:0040951C                 jz      short loc_409508
.text:0040951E                 jmp     loc_40945F
.text:00409523 ; ---------------------------------------------------------------------------
.text:00409523
.text:00409523 loc_409523:                             ; CODE XREF: _win32_longpath+297↑j
.text:00409523                 movzx   ebx, byte ptr [esi]
.text:00409526                 jmp     loc_40945F
.text:0040952B ; ---------------------------------------------------------------------------
.text:0040952B
.text:0040952B loc_40952B:                             ; CODE XREF: _win32_longpath+39↑j
.text:0040952B                 movzx   ecx, byte ptr [eax]
.text:0040952E                 mov     esi, eax
.text:00409530                 mov     [esp+278h+var_267], 3Ah ; ':'
.text:00409535                 add     esi, 2
.text:00409538                 lea     ebp, [esp+12h]
.text:0040953C                 mov     [esp+278h+Destination], cl
.text:00409540                 jmp     loc_409209
.text:00409540 _win32_longpath endp
.text:00409540
.text:00409540 ; ---------------------------------------------------------------------------
.text:00409545                 align 10h
.text:00409550                 sub     esp, 0Ch
.text:00409553                 mov     edx, [esp+10h]
.text:00409557                 mov     dword ptr [esp+4], 0
.text:0040955F                 mov     [esp], edx
.text:00409562                 call    sub_406220
.text:00409567                 inc     eax
.text:00409568                 setnz   dl
.text:0040956B                 add     esp, 0Ch
.text:0040956E                 movzx   eax, dl
.text:00409571                 retn
.text:00409571 ; ---------------------------------------------------------------------------
.text:00409572                 align 10h
.text:00409580
.text:00409580 ; =============== S U B R O U T I N E =======================================
.text:00409580
.text:00409580
.text:00409580 sub_409580      proc near               ; CODE XREF: sub_407FA0+B4↑p
.text:00409580                                         ; sub_4083B0+AA↑p
.text:00409580
.text:00409580 arg_0           = dword ptr  4
.text:00409580
.text:00409580                 mov     ecx, [esp+arg_0]
.text:00409584                 mov     edx, ecx
.text:00409586                 movzx   eax, byte ptr [ecx]
.text:00409589                 test    al, al
.text:0040958B                 jz      short loc_40959C
.text:0040958D                 lea     esi, [esi+0]
.text:00409590
.text:00409590 loc_409590:                             ; CODE XREF: sub_409580+1A↓j
.text:00409590                 cmp     al, 5Ch ; '\'
.text:00409592                 jz      short loc_4095A0
.text:00409594
.text:00409594 loc_409594:                             ; CODE XREF: sub_409580+23↓j
.text:00409594                 inc     edx
.text:00409595                 movzx   eax, byte ptr [edx]
.text:00409598                 test    al, al
.text:0040959A                 jnz     short loc_409590
.text:0040959C
.text:0040959C loc_40959C:                             ; CODE XREF: sub_409580+B↑j
.text:0040959C                 mov     eax, ecx
.text:0040959E                 retn
.text:0040959E ; ---------------------------------------------------------------------------
.text:0040959F                 align 10h
.text:004095A0
.text:004095A0 loc_4095A0:                             ; CODE XREF: sub_409580+12↑j
.text:004095A0                 mov     byte ptr [edx], 2Fh ; '/'
.text:004095A3                 jmp     short loc_409594
.text:004095A3 sub_409580      endp
.text:004095A3
.text:004095A3 ; ---------------------------------------------------------------------------
.text:004095A5                 align 10h
.text:004095B0                 push    ebx
.text:004095B1                 sub     esp, 8
.text:004095B4                 mov     ebx, [esp+14h]
.text:004095B8                 mov     edx, [esp+10h]
.text:004095BC                 mov     [esp], ebx
.text:004095BF                 mov     [esp+4], edx
.text:004095C3                 call    strcpy
.text:004095C8                 movzx   eax, byte ptr [ebx]
.text:004095CB                 mov     edx, ebx
.text:004095CD                 test    al, al
.text:004095CF                 jz      short loc_4095EC
.text:004095D1                 jmp     short loc_4095E0
.text:004095D1 ; ---------------------------------------------------------------------------
.text:004095D3                 align 10h
.text:004095E0
.text:004095E0 loc_4095E0:                             ; CODE XREF: .text:004095D1↑j
.text:004095E0                                         ; .text:004095EA↓j
.text:004095E0                 cmp     al, 5Ch ; '\'
.text:004095E2                 jz      short loc_4095F3
.text:004095E4
.text:004095E4 loc_4095E4:                             ; CODE XREF: .text:004095F6↓j
.text:004095E4                 inc     edx
.text:004095E5                 movzx   eax, byte ptr [edx]
.text:004095E8                 test    al, al
.text:004095EA                 jnz     short loc_4095E0
.text:004095EC
.text:004095EC loc_4095EC:                             ; CODE XREF: .text:004095CF↑j
.text:004095EC                 add     esp, 8
.text:004095EF                 xor     eax, eax
.text:004095F1                 pop     ebx
.text:004095F2                 retn
.text:004095F3 ; ---------------------------------------------------------------------------
.text:004095F3
.text:004095F3 loc_4095F3:                             ; CODE XREF: .text:004095E2↑j
.text:004095F3                 mov     byte ptr [edx], 2Fh ; '/'
.text:004095F6                 jmp     short loc_4095E4
.text:004095F6 ; ---------------------------------------------------------------------------
.text:004095F8                 align 10h
.text:00409600
.text:00409600 ; =============== S U B R O U T I N E =======================================
.text:00409600
.text:00409600
.text:00409600 sub_409600      proc near               ; CODE XREF: sub_406AF0+16↑p
.text:00409600                                         ; sub_406FF0+1F↑p ...
.text:00409600
.text:00409600 arg_0           = dword ptr  4
.text:00409600
.text:00409600                 mov     ecx, [esp+arg_0]
.text:00409604                 mov     edx, ecx
.text:00409606                 movzx   eax, byte ptr [ecx]
.text:00409609                 test    al, al
.text:0040960B                 jz      short loc_40961C
.text:0040960D                 lea     esi, [esi+0]
.text:00409610
.text:00409610 loc_409610:                             ; CODE XREF: sub_409600+1A↓j
.text:00409610                 cmp     al, 2Fh ; '/'
.text:00409612                 jz      short loc_409620
.text:00409614
.text:00409614 loc_409614:                             ; CODE XREF: sub_409600+23↓j
.text:00409614                 inc     edx
.text:00409615                 movzx   eax, byte ptr [edx]
.text:00409618                 test    al, al
.text:0040961A                 jnz     short loc_409610
.text:0040961C
.text:0040961C loc_40961C:                             ; CODE XREF: sub_409600+B↑j
.text:0040961C                 mov     eax, ecx
.text:0040961E                 retn
.text:0040961E ; ---------------------------------------------------------------------------
.text:0040961F                 align 10h
.text:00409620
.text:00409620 loc_409620:                             ; CODE XREF: sub_409600+12↑j
.text:00409620                 mov     byte ptr [edx], 5Ch ; '\'
.text:00409623                 jmp     short loc_409614
.text:00409623 sub_409600      endp
.text:00409623
.text:00409623 ; ---------------------------------------------------------------------------
.text:00409625                 align 10h
.text:00409630                 push    ebx
.text:00409631                 sub     esp, 8
.text:00409634                 mov     ebx, [esp+14h]
.text:00409638                 mov     edx, [esp+10h]
.text:0040963C                 mov     [esp], ebx
.text:0040963F                 mov     [esp+4], edx
.text:00409643                 call    strcpy
.text:00409648                 movzx   eax, byte ptr [ebx]
.text:0040964B                 mov     edx, ebx
.text:0040964D                 test    al, al
.text:0040964F                 jz      short loc_40966C
.text:00409651                 jmp     short loc_409660
.text:00409651 ; ---------------------------------------------------------------------------
.text:00409653                 align 10h
.text:00409660
.text:00409660 loc_409660:                             ; CODE XREF: .text:00409651↑j
.text:00409660                                         ; .text:0040966A↓j
.text:00409660                 cmp     al, 2Fh ; '/'
.text:00409662                 jz      short loc_409673
.text:00409664
.text:00409664 loc_409664:                             ; CODE XREF: .text:00409676↓j
.text:00409664                 inc     edx
.text:00409665                 movzx   eax, byte ptr [edx]
.text:00409668                 test    al, al
.text:0040966A                 jnz     short loc_409660
.text:0040966C
.text:0040966C loc_40966C:                             ; CODE XREF: .text:0040964F↑j
.text:0040966C                 add     esp, 8
.text:0040966F                 xor     eax, eax
.text:00409671                 pop     ebx
.text:00409672                 retn
.text:00409673 ; ---------------------------------------------------------------------------
.text:00409673
.text:00409673 loc_409673:                             ; CODE XREF: .text:00409662↑j
.text:00409673                 mov     byte ptr [edx], 5Ch ; '\'
.text:00409676                 jmp     short loc_409664
.text:00409676 ; ---------------------------------------------------------------------------
.text:00409678                 align 10h
.text:00409680                 push    ebx
.text:00409681                 sub     esp, 8
.text:00409684                 mov     ebx, [esp+14h]
.text:00409688                 mov     edx, [esp+10h]
.text:0040968C                 mov     [esp+4], ebx
.text:00409690                 mov     [esp], edx
.text:00409693                 call    sub_408360
.text:00409698                 movzx   eax, byte ptr [ebx]
.text:0040969B                 mov     edx, ebx
.text:0040969D                 test    al, al
.text:0040969F                 jz      short loc_4096BC
.text:004096A1                 jmp     short loc_4096B0
.text:004096A1 ; ---------------------------------------------------------------------------
.text:004096A3                 align 10h
.text:004096B0
.text:004096B0 loc_4096B0:                             ; CODE XREF: .text:004096A1↑j
.text:004096B0                                         ; .text:004096BA↓j
.text:004096B0                 cmp     al, 2Fh ; '/'
.text:004096B2                 jz      short loc_4096C3
.text:004096B4
.text:004096B4 loc_4096B4:                             ; CODE XREF: .text:004096C6↓j
.text:004096B4                 inc     edx
.text:004096B5                 movzx   eax, byte ptr [edx]
.text:004096B8                 test    al, al
.text:004096BA                 jnz     short loc_4096B0
.text:004096BC
.text:004096BC loc_4096BC:                             ; CODE XREF: .text:0040969F↑j
.text:004096BC                 add     esp, 8
.text:004096BF                 xor     eax, eax
.text:004096C1                 pop     ebx
.text:004096C2                 retn
.text:004096C3 ; ---------------------------------------------------------------------------
.text:004096C3
.text:004096C3 loc_4096C3:                             ; CODE XREF: .text:004096B2↑j
.text:004096C3                 mov     byte ptr [edx], 5Ch ; '\'
.text:004096C6                 jmp     short loc_4096B4
.text:004096C6 ; ---------------------------------------------------------------------------
.text:004096C8                 align 10h
.text:004096D0                 push    ebx
.text:004096D1                 sub     esp, 8
.text:004096D4                 mov     ebx, [esp+14h]
.text:004096D8                 mov     edx, [esp+10h]
.text:004096DC                 mov     [esp], ebx
.text:004096DF                 mov     [esp+4], edx
.text:004096E3                 call    sub_408360
.text:004096E8                 movzx   eax, byte ptr [ebx]
.text:004096EB                 mov     edx, ebx
.text:004096ED                 test    al, al
.text:004096EF                 jz      short loc_40970C
.text:004096F1                 jmp     short loc_409700
.text:004096F1 ; ---------------------------------------------------------------------------
.text:004096F3                 align 10h
.text:00409700
.text:00409700 loc_409700:                             ; CODE XREF: .text:004096F1↑j
.text:00409700                                         ; .text:0040970A↓j
.text:00409700                 cmp     al, 5Ch ; '\'
.text:00409702                 jz      short loc_409711
.text:00409704
.text:00409704 loc_409704:                             ; CODE XREF: .text:00409714↓j
.text:00409704                 inc     edx
.text:00409705                 movzx   eax, byte ptr [edx]
.text:00409708                 test    al, al
.text:0040970A                 jnz     short loc_409700
.text:0040970C
.text:0040970C loc_40970C:                             ; CODE XREF: .text:004096EF↑j
.text:0040970C                 add     esp, 8
.text:0040970F                 pop     ebx
.text:00409710                 retn
.text:00409711 ; ---------------------------------------------------------------------------
.text:00409711
.text:00409711 loc_409711:                             ; CODE XREF: .text:00409702↑j
.text:00409711                 mov     byte ptr [edx], 2Fh ; '/'
.text:00409714                 jmp     short loc_409704
.text:00409714 ; ---------------------------------------------------------------------------
.text:00409716                 align 10h
.text:00409720
.text:00409720 ; =============== S U B R O U T I N E =======================================
.text:00409720
.text:00409720
.text:00409720 ; int __cdecl sub_409720(LPSTR)
.text:00409720 sub_409720      proc near               ; CODE XREF: .text:004097AE↓p
.text:00409720                                         ; .text:004097EE↓p ...
.text:00409720
.text:00409720 hModule         = dword ptr -1Ch
.text:00409720 lpFilename      = dword ptr -18h
.text:00409720 nSize           = dword ptr -14h
.text:00409720 arg_0           = dword ptr  4
.text:00409720
.text:00409720                 push    esi
.text:00409721                 push    ebx
.text:00409722                 sub     esp, 14h
.text:00409725                 mov     esi, [esp+1Ch+arg_0]
.text:00409729                 mov     [esp+1Ch+nSize], 104h ; nSize
.text:00409731                 mov     [esp+1Ch+hModule], 0 ; hModule
.text:00409738                 mov     [esp+1Ch+lpFilename], esi ; lpFilename
.text:0040973C                 call    GetModuleFileNameA
.text:00409741                 sub     esp, 0Ch
.text:00409744                 test    eax, eax
.text:00409746                 jz      short loc_409788
.text:00409748                 cmp     eax, 104h
.text:0040974D                 jg      short loc_409779
.text:0040974F
.text:0040974F loc_40974F:                             ; CODE XREF: sub_409720+66↓j
.text:0040974F                                         ; sub_409720+78↓j
.text:0040974F                 movzx   eax, byte ptr [esi]
.text:00409752                 mov     edx, esi
.text:00409754                 test    al, al
.text:00409756                 jz      short loc_40976C
.text:00409758                 nop
.text:00409759                 lea     esi, [esi+0]
.text:00409760
.text:00409760 loc_409760:                             ; CODE XREF: sub_409720+4A↓j
.text:00409760                 cmp     al, 5Ch ; '\'
.text:00409762                 jz      short loc_409774
.text:00409764
.text:00409764 loc_409764:                             ; CODE XREF: sub_409720+57↓j
.text:00409764                 inc     edx
.text:00409765                 movzx   eax, byte ptr [edx]
.text:00409768                 test    al, al
.text:0040976A                 jnz     short loc_409760
.text:0040976C
.text:0040976C loc_40976C:                             ; CODE XREF: sub_409720+36↑j
.text:0040976C                 add     esp, 14h
.text:0040976F                 mov     eax, esi
.text:00409771                 pop     ebx
.text:00409772                 pop     esi
.text:00409773                 retn
.text:00409774 ; ---------------------------------------------------------------------------
.text:00409774
.text:00409774 loc_409774:                             ; CODE XREF: sub_409720+42↑j
.text:00409774                 mov     byte ptr [edx], 2Fh ; '/'
.text:00409777                 jmp     short loc_409764
.text:00409779 ; ---------------------------------------------------------------------------
.text:00409779
.text:00409779 loc_409779:                             ; CODE XREF: sub_409720+2D↑j
.text:00409779                 call    _errno
.text:0040977E                 mov     dword ptr [eax], 26h ; '&'
.text:00409784                 xor     esi, esi
.text:00409786                 jmp     short loc_40974F
.text:00409788 ; ---------------------------------------------------------------------------
.text:00409788
.text:00409788 loc_409788:                             ; CODE XREF: sub_409720+26↑j
.text:00409788                 call    sub_408340
.text:0040978D                 mov     ebx, eax
.text:0040978F                 xor     esi, esi
.text:00409791                 call    _errno
.text:00409796                 mov     [eax], ebx
.text:00409798                 jmp     short loc_40974F
.text:00409798 sub_409720      endp
.text:00409798
.text:00409798 ; ---------------------------------------------------------------------------
.text:0040979A                 align 10h
.text:004097A0                 sub     esp, 0Ch
.text:004097A3                 mov     [esp+8], ebx
.text:004097A7                 mov     ebx, [esp+10h]
.text:004097AB                 mov     [esp], ebx
.text:004097AE                 call    sub_409720
.text:004097B3                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:004097BB                 mov     [esp], ebx
.text:004097BE                 call    strrchr
.text:004097C3                 test    eax, eax
.text:004097C5                 jz      short loc_4097CA
.text:004097C7                 lea     ebx, [eax+1]
.text:004097CA
.text:004097CA loc_4097CA:                             ; CODE XREF: .text:004097C5↑j
.text:004097CA                 mov     eax, ebx
.text:004097CC                 mov     ebx, [esp+8]
.text:004097D0                 add     esp, 0Ch
.text:004097D3                 retn
.text:004097D3 ; ---------------------------------------------------------------------------
.text:004097D4                 align 10h
.text:004097E0                 sub     esp, 0Ch
.text:004097E3                 mov     [esp+8], ebx
.text:004097E7                 mov     ebx, [esp+10h]
.text:004097EB                 mov     [esp], ebx
.text:004097EE                 call    sub_409720
.text:004097F3                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:004097FB                 mov     [esp], ebx
.text:004097FE                 call    strrchr
.text:00409803                 test    eax, eax
.text:00409805                 jz      short loc_40980A
.text:00409807                 mov     byte ptr [eax], 0
.text:0040980A
.text:0040980A loc_40980A:                             ; CODE XREF: .text:00409805↑j
.text:0040980A                 mov     eax, ebx
.text:0040980C                 mov     ebx, [esp+8]
.text:00409810                 add     esp, 0Ch
.text:00409813                 retn
.text:00409813 ; ---------------------------------------------------------------------------
.text:00409814                 align 10h
.text:00409820                 sub     esp, 0Ch
.text:00409823                 mov     [esp+8], ebx
.text:00409827                 mov     ebx, [esp+10h]
.text:0040982B                 mov     [esp], ebx
.text:0040982E                 call    sub_409720
.text:00409833                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:0040983B                 mov     [esp], ebx
.text:0040983E                 call    strrchr
.text:00409843                 test    eax, eax
.text:00409845                 jz      short loc_40984A
.text:00409847                 mov     byte ptr [eax], 0
.text:0040984A
.text:0040984A loc_40984A:                             ; CODE XREF: .text:00409845↑j
.text:0040984A                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:00409852                 mov     [esp], ebx
.text:00409855                 call    strrchr
.text:0040985A                 test    eax, eax
.text:0040985C                 jz      short loc_409861
.text:0040985E                 mov     byte ptr [eax], 0
.text:00409861
.text:00409861 loc_409861:                             ; CODE XREF: .text:0040985C↑j
.text:00409861                 mov     eax, ebx
.text:00409863                 mov     ebx, [esp+8]
.text:00409867                 add     esp, 0Ch
.text:0040986A                 retn
.text:0040986A ; ---------------------------------------------------------------------------
.text:0040986B                 align 10h
.text:00409870                 sub     esp, 1Ch
.text:00409873                 mov     edx, [esp+20h]
.text:00409877                 mov     [esp+10h], ebx
.text:0040987B                 xor     ebx, ebx
.text:0040987D                 mov     [esp+14h], esi
.text:00409881                 mov     [esp+18h], edi
.text:00409885                 mov     [esp], edx
.text:00409888                 call    sub_408390
.text:0040988D                 mov     edx, [esp+24h]
.text:00409891                 mov     edi, eax
.text:00409893                 mov     [esp], edx
.text:00409896                 call    sub_408390
.text:0040989B                 mov     [esp+4], eax
.text:0040989F                 mov     esi, eax
.text:004098A1                 mov     [esp], edi
.text:004098A4                 call    _stricmp_0
.text:004098A9                 mov     [esp], edi
.text:004098AC                 test    eax, eax
.text:004098AE                 setz    bl
.text:004098B1                 call    free
.text:004098B6                 mov     [esp], esi
.text:004098B9                 call    free
.text:004098BE                 mov     eax, ebx
.text:004098C0                 mov     esi, [esp+14h]
.text:004098C4                 mov     ebx, [esp+10h]
.text:004098C8                 mov     edi, [esp+18h]
.text:004098CC                 add     esp, 1Ch
.text:004098CF                 retn
.text:004098D0 ; ---------------------------------------------------------------------------
.text:004098D0                 xor     eax, eax
.text:004098D2                 retn
.text:004098D2 ; ---------------------------------------------------------------------------
.text:004098D3 aKernel32Dll    db 'kernel32.dll',0     ; DATA XREF: .text:00409907↓o
.text:004098E0 aGetlongpathnam db 'GetLongPathName',0  ; DATA XREF: .text:00409916↓o
.text:004098F0 ; ---------------------------------------------------------------------------
.text:004098F0                 sub     esp, 1Ch
.text:004098F3                 mov     [esp+10h], ebx
.text:004098F7                 mov     ebx, [esp+20h]
.text:004098FB                 mov     [esp+18h], edi
.text:004098FF                 mov     edi, [esp+24h]
.text:00409903                 mov     [esp+14h], esi
.text:00409907                 mov     dword ptr [esp], offset aKernel32Dll ; "kernel32.dll"
.text:0040990E                 call    GetModuleHandleA
.text:00409913                 sub     esp, 4
.text:00409916                 mov     dword ptr [esp+4], offset aGetlongpathnam ; "GetLongPathName"
.text:0040991E                 mov     [esp], eax
.text:00409921                 call    GetProcAddress
.text:00409926                 sub     esp, 8
.text:00409929                 test    eax, eax
.text:0040992B                 jz      short loc_409943
.text:0040992D                 mov     dword ptr [esp+8], 104h
.text:00409935                 mov     [esp+4], ebx
.text:00409939                 mov     [esp], edi
.text:0040993C                 call    eax
.text:0040993E                 sub     esp, 0Ch
.text:00409941                 mov     esi, eax
.text:00409943
.text:00409943 loc_409943:                             ; CODE XREF: .text:0040992B↑j
.text:00409943                 test    esi, esi
.text:00409945                 jz      short loc_409960
.text:00409947
.text:00409947 loc_409947:                             ; CODE XREF: .text:0040997B↓j
.text:00409947                 mov     eax, ebx
.text:00409949                 mov     esi, [esp+14h]
.text:0040994D                 mov     ebx, [esp+10h]
.text:00409951                 mov     edi, [esp+18h]
.text:00409955                 add     esp, 1Ch
.text:00409958                 retn
.text:00409958 ; ---------------------------------------------------------------------------
.text:00409959                 align 10h
.text:00409960
.text:00409960 loc_409960:                             ; CODE XREF: .text:00409945↑j
.text:00409960                 call    sub_40B080
.text:00409965                 mov     [esp], ebx
.text:00409968                 mov     [esp+4], edi
.text:0040996C                 call    strcpy
.text:00409971                 mov     [esp], ebx
.text:00409974                 call    _win32_longpath
.text:00409979                 mov     ebx, eax
.text:0040997B                 jmp     short loc_409947
.text:0040997B ; ---------------------------------------------------------------------------
.text:0040997D                 align 10h
.text:00409980                 sub     esp, 1Ch
.text:00409983                 mov     [esp+18h], edi
.text:00409987                 mov     edi, [esp+20h]
.text:0040998B                 mov     [esp+10h], ebx
.text:0040998F                 mov     [esp+14h], esi
.text:00409993                 mov     dword ptr [esp+8], 0
.text:0040999B                 mov     dword ptr [esp+4], 0
.text:004099A3                 mov     [esp], edi
.text:004099A6                 call    GetShortPathNameA
.text:004099AB                 sub     esp, 0Ch
.text:004099AE                 mov     ebx, eax
.text:004099B0                 test    eax, eax
.text:004099B2                 jz      short loc_409A00
.text:004099B4                 lea     edx, [eax+1]
.text:004099B7                 mov     [esp], edx
.text:004099BA                 call    malloc
.text:004099BF                 test    eax, eax
.text:004099C1                 mov     esi, eax
.text:004099C3                 jz      short loc_409A00
.text:004099C5                 mov     [esp+8], ebx
.text:004099C9                 mov     [esp+4], eax
.text:004099CD                 mov     [esp], edi
.text:004099D0                 call    GetShortPathNameA
.text:004099D5                 sub     esp, 0Ch
.text:004099D8                 mov     edx, esi
.text:004099DA                 test    eax, eax
.text:004099DC                 jz      short loc_4099F2
.text:004099DE                 mov     esi, esi
.text:004099E0
.text:004099E0 loc_4099E0:                             ; CODE XREF: .text:00409A10↓j
.text:004099E0                 mov     ebx, [esp+10h]
.text:004099E4                 mov     eax, edx
.text:004099E6                 mov     esi, [esp+14h]
.text:004099EA                 mov     edi, [esp+18h]
.text:004099EE                 add     esp, 1Ch
.text:004099F1                 retn
.text:004099F2 ; ---------------------------------------------------------------------------
.text:004099F2
.text:004099F2 loc_4099F2:                             ; CODE XREF: .text:004099DC↑j
.text:004099F2                 mov     [esp], esi
.text:004099F5                 call    free
.text:004099FA                 lea     esi, [esi+0]
.text:00409A00
.text:00409A00 loc_409A00:                             ; CODE XREF: .text:004099B2↑j
.text:00409A00                                         ; .text:004099C3↑j
.text:00409A00                 call    sub_408340
.text:00409A05                 mov     esi, eax
.text:00409A07                 call    _errno
.text:00409A0C                 mov     [eax], esi
.text:00409A0E                 mov     edx, edi
.text:00409A10                 jmp     short loc_4099E0
.text:00409A10 ; ---------------------------------------------------------------------------
.text:00409A12                 align 10h
.text:00409A20 aNotset         db 'notset',0           ; DATA XREF: .data:off_40F050↓o
.text:00409A20                                         ; .data:off_40F054↓o
.text:00409A27 ; ---------------------------------------------------------------------------
.text:00409A27
.text:00409A27 loc_409A27:                             ; DATA XREF: .text:loc_409AC5↓o
.text:00409A27                 jb      short loc_409AA0
.text:00409A29                 add     [eax], ah
.text:00409A2B                 or      [eax], eax
.text:00409A2D
.text:00409A2D loc_409A2D:                             ; DATA XREF: .text:00409B18↓o
.text:00409A2D                                         ; .text:00409B7E↓o ...
.text:00409A2D                 add     [eax], ah
.text:00409A2F                 and     eax, 64252064h
.text:00409A34                 and     [eax], al
.text:00409A36                 lea     esi, [esi+0]
.text:00409A39                 lea     edi, [edi+0]
.text:00409A40                 push    ebp
.text:00409A41                 push    edi
.text:00409A42                 push    esi
.text:00409A43                 push    ebx
.text:00409A44                 sub     esp, 14Ch
.text:00409A4A                 mov     edx, off_40F050 ; "notset"
.text:00409A50                 mov     edi, [esp+164h]
.text:00409A57                 mov     ebp, [esp+168h]
.text:00409A5E                 mov     [esp+4], edx
.text:00409A62                 mov     edx, off_40F054 ; "notset"
.text:00409A68                 mov     [esp], edx
.text:00409A6B                 call    strcmp
.text:00409A70                 test    eax, eax
.text:00409A72                 jz      loc_409E60
.text:00409A78
.text:00409A78 loc_409A78:                             ; CODE XREF: .text:00409EAC↓j
.text:00409A78                 lea     ebx, [esp+20h]
.text:00409A7C                 lea     esi, [esi+0]
.text:00409A80
.text:00409A80 loc_409A80:                             ; CODE XREF: .text:00409AB6↓j
.text:00409A80                 mov     [esp+4], ebx
.text:00409A84                 mov     ecx, off_40F054 ; "notset"
.text:00409A8A                 mov     [esp], ecx
.text:00409A8D                 call    loc_408FB0
.text:00409A92                 test    eax, eax
.text:00409A94                 jns     short loc_409AC5
.text:00409A96                 mov     eax, off_40F054 ; "notset"
.text:00409A9B                 cmp     byte ptr [eax], 0
.text:00409A9E                 jz      short loc_409AB8
.text:00409AA0
.text:00409AA0 loc_409AA0:                             ; CODE XREF: .text:loc_409A27↑j
.text:00409AA0                 mov     dword ptr [esp+4], 0
.text:00409AA8                 mov     [esp], eax
.text:00409AAB                 call    strchr
.text:00409AB0                 inc     eax
.text:00409AB1                 mov     off_40F054, eax ; "notset"
.text:00409AB6                 jmp     short loc_409A80
.text:00409AB8 ; ---------------------------------------------------------------------------
.text:00409AB8
.text:00409AB8 loc_409AB8:                             ; CODE XREF: .text:00409A9E↑j
.text:00409AB8                 xor     eax, eax
.text:00409ABA
.text:00409ABA loc_409ABA:                             ; CODE XREF: .text:00409C7C↓j
.text:00409ABA                 add     esp, 14Ch
.text:00409AC0                 pop     ebx
.text:00409AC1                 pop     esi
.text:00409AC2                 pop     edi
.text:00409AC3                 pop     ebp
.text:00409AC4                 retn
.text:00409AC5 ; ---------------------------------------------------------------------------
.text:00409AC5
.text:00409AC5 loc_409AC5:                             ; CODE XREF: .text:00409A94↑j
.text:00409AC5                 mov     dword ptr [edi+0Ch], offset loc_409A27
.text:00409ACC                 lea     ecx, [esp+0D6h]
.text:00409AD3                 lea     edx, [esp+6Ch]
.text:00409AD7                 mov     [edi+4], ecx
.text:00409ADA                 lea     ebx, [esp+7Ch]
.text:00409ADE                 mov     [edi+8], edx
.text:00409AE1                 mov     [edi], ebx
.text:00409AE3                 mov     [esp], ebp
.text:00409AE6                 mov     [esp+4], edi
.text:00409AEA                 call    ___addmntentstr
.text:00409AEF                 mov     [esp], ebp
.text:00409AF2                 mov     dword ptr [esp+4], 409A2Ah
.text:00409AFA                 call    strspn
.text:00409AFF                 mov     dword ptr [esp+4], 0
.text:00409B07                 mov     ebx, off_40F054 ; "notset"
.text:00409B0D                 lea     esi, [eax+ebp]
.text:00409B10                 mov     [esp+1Ch], esi
.text:00409B14                 lea     ebp, [esp+1Ch]
.text:00409B18                 mov     esi, offset loc_409A2D
.text:00409B1D                 mov     [esp], ebx
.text:00409B20                 call    strchr
.text:00409B25                 mov     dword ptr [esp+4], 409A2Ah
.text:00409B2D                 inc     eax
.text:00409B2E                 mov     off_40F054, eax ; "notset"
.text:00409B33                 mov     [esp], ebp
.text:00409B36                 call    sub_40B3A0
.text:00409B3B                 test    eax, eax
.text:00409B3D                 mov     ebx, eax
.text:00409B3F                 jz      short loc_409B68
.text:00409B41                 mov     edx, eax
.text:00409B43                 mov     ecx, eax
.text:00409B45                 lea     esi, [esi+0]
.text:00409B49                 lea     edi, [edi+0]
.text:00409B50
.text:00409B50 loc_409B50:                             ; CODE XREF: .text:00409B66↓j
.text:00409B50                 movzx   eax, byte ptr [edx]
.text:00409B53                 cmp     al, 5Ch ; '\'
.text:00409B55                 jz      loc_409E04
.text:00409B5B
.text:00409B5B loc_409B5B:                             ; CODE XREF: .text:00409E0C↓j
.text:00409B5B                                         ; .text:00409E1A↓j ...
.text:00409B5B                 mov     [ecx], al
.text:00409B5D
.text:00409B5D loc_409B5D:                             ; CODE XREF: .text:00409E2E↓j
.text:00409B5D                 inc     ecx
.text:00409B5E
.text:00409B5E loc_409B5E:                             ; CODE XREF: .text:00409E46↓j
.text:00409B5E                 movzx   eax, byte ptr [edx]
.text:00409B61                 mov     esi, ebx
.text:00409B63                 inc     edx
.text:00409B64                 test    al, al
.text:00409B66                 jnz     short loc_409B50
.text:00409B68
.text:00409B68 loc_409B68:                             ; CODE XREF: .text:00409B3F↑j
.text:00409B68                 mov     [edi], esi
.text:00409B6A                 mov     eax, [esp+1Ch]
.text:00409B6E                 test    eax, eax
.text:00409B70                 jnz     loc_409DEB
.text:00409B76
.text:00409B76 loc_409B76:                             ; CODE XREF: .text:00409DFF↓j
.text:00409B76                 mov     dword ptr [esp+4], 409A2Ah
.text:00409B7E                 mov     esi, offset loc_409A2D
.text:00409B83                 mov     [esp], ebp
.text:00409B86                 call    sub_40B3A0
.text:00409B8B                 test    eax, eax
.text:00409B8D                 mov     ebx, eax
.text:00409B8F                 jz      short loc_409BB8
.text:00409B91                 mov     edx, eax
.text:00409B93                 mov     ecx, eax
.text:00409B95                 lea     esi, [esi+0]
.text:00409B99                 lea     edi, [edi+0]
.text:00409BA0
.text:00409BA0 loc_409BA0:                             ; CODE XREF: .text:00409BB6↓j
.text:00409BA0                 movzx   eax, byte ptr [edx]
.text:00409BA3                 cmp     al, 5Ch ; '\'
.text:00409BA5                 jz      loc_409D93
.text:00409BAB
.text:00409BAB loc_409BAB:                             ; CODE XREF: .text:00409D9B↓j
.text:00409BAB                                         ; .text:00409DA9↓j ...
.text:00409BAB                 mov     [ecx], al
.text:00409BAD
.text:00409BAD loc_409BAD:                             ; CODE XREF: .text:00409DBD↓j
.text:00409BAD                 inc     ecx
.text:00409BAE
.text:00409BAE loc_409BAE:                             ; CODE XREF: .text:00409DD5↓j
.text:00409BAE                 movzx   eax, byte ptr [edx]
.text:00409BB1                 mov     esi, ebx
.text:00409BB3                 inc     edx
.text:00409BB4                 test    al, al
.text:00409BB6                 jnz     short loc_409BA0
.text:00409BB8
.text:00409BB8 loc_409BB8:                             ; CODE XREF: .text:00409B8F↑j
.text:00409BB8                 mov     [edi+4], esi
.text:00409BBB                 mov     eax, [esp+1Ch]
.text:00409BBF                 test    eax, eax
.text:00409BC1                 jnz     loc_409D7A
.text:00409BC7
.text:00409BC7 loc_409BC7:                             ; CODE XREF: .text:00409D8E↓j
.text:00409BC7                 mov     dword ptr [esp+4], 409A2Ah
.text:00409BCF                 mov     esi, offset loc_409A2D
.text:00409BD4                 mov     [esp], ebp
.text:00409BD7                 call    sub_40B3A0
.text:00409BDC                 test    eax, eax
.text:00409BDE                 mov     ebx, eax
.text:00409BE0                 jz      short loc_409C08
.text:00409BE2                 mov     edx, eax
.text:00409BE4                 mov     ecx, eax
.text:00409BE6                 lea     esi, [esi+0]
.text:00409BE9                 lea     edi, [edi+0]
.text:00409BF0
.text:00409BF0 loc_409BF0:                             ; CODE XREF: .text:00409C06↓j
.text:00409BF0                 movzx   eax, byte ptr [edx]
.text:00409BF3                 cmp     al, 5Ch ; '\'
.text:00409BF5                 jz      loc_409D22
.text:00409BFB
.text:00409BFB loc_409BFB:                             ; CODE XREF: .text:00409D2A↓j
.text:00409BFB                                         ; .text:00409D38↓j ...
.text:00409BFB                 mov     [ecx], al
.text:00409BFD
.text:00409BFD loc_409BFD:                             ; CODE XREF: .text:00409D4C↓j
.text:00409BFD                 inc     ecx
.text:00409BFE
.text:00409BFE loc_409BFE:                             ; CODE XREF: .text:00409D64↓j
.text:00409BFE                 movzx   eax, byte ptr [edx]
.text:00409C01                 mov     esi, ebx
.text:00409C03                 inc     edx
.text:00409C04                 test    al, al
.text:00409C06                 jnz     short loc_409BF0
.text:00409C08
.text:00409C08 loc_409C08:                             ; CODE XREF: .text:00409BE0↑j
.text:00409C08                 mov     [edi+8], esi
.text:00409C0B                 mov     eax, [esp+1Ch]
.text:00409C0F                 test    eax, eax
.text:00409C11                 jnz     loc_409D09
.text:00409C17
.text:00409C17 loc_409C17:                             ; CODE XREF: .text:00409D1D↓j
.text:00409C17                 mov     dword ptr [esp+4], 409A2Ah
.text:00409C1F                 mov     esi, offset loc_409A2D
.text:00409C24                 mov     [esp], ebp
.text:00409C27                 call    sub_40B3A0
.text:00409C2C                 test    eax, eax
.text:00409C2E                 mov     ebx, eax
.text:00409C30                 jz      short loc_409C54
.text:00409C32                 mov     edx, eax
.text:00409C34                 mov     ecx, eax
.text:00409C36                 lea     esi, [esi+0]
.text:00409C39                 lea     edi, [edi+0]
.text:00409C40
.text:00409C40 loc_409C40:                             ; CODE XREF: .text:00409C52↓j
.text:00409C40                 movzx   eax, byte ptr [edx]
.text:00409C43                 cmp     al, 5Ch ; '\'
.text:00409C45                 jz      short loc_409CB5
.text:00409C47
.text:00409C47 loc_409C47:                             ; CODE XREF: .text:00409CBD↓j
.text:00409C47                                         ; .text:00409CC7↓j ...
.text:00409C47                 mov     [ecx], al
.text:00409C49
.text:00409C49 loc_409C49:                             ; CODE XREF: .text:00409CDB↓j
.text:00409C49                 inc     ecx
.text:00409C4A
.text:00409C4A loc_409C4A:                             ; CODE XREF: .text:00409CF3↓j
.text:00409C4A                 movzx   eax, byte ptr [edx]
.text:00409C4D                 mov     esi, ebx
.text:00409C4F                 inc     edx
.text:00409C50                 test    al, al
.text:00409C52                 jnz     short loc_409C40
.text:00409C54
.text:00409C54 loc_409C54:                             ; CODE XREF: .text:00409C30↑j
.text:00409C54                 mov     [edi+0Ch], esi
.text:00409C57                 xor     eax, eax
.text:00409C59                 mov     edx, [esp+1Ch]
.text:00409C5D                 test    edx, edx
.text:00409C5F                 jnz     short loc_409C95
.text:00409C61
.text:00409C61 loc_409C61:                             ; CODE XREF: .text:00409CB3↓j
.text:00409C61                 cmp     eax, 1
.text:00409C64                 jz      short loc_409C8C
.text:00409C66                 cmp     eax, 1
.text:00409C69                 jle     short loc_409C81
.text:00409C6B
.text:00409C6B loc_409C6B:                             ; CODE XREF: .text:00409C83↓j
.text:00409C6B                                         ; .text:00409C93↓j
.text:00409C6B                 mov     edx, [esp+160h]
.text:00409C72                 mov     [esp], edx
.text:00409C75                 call    sub_40B340
.text:00409C7A                 mov     eax, edi
.text:00409C7C                 jmp     loc_409ABA
.text:00409C81 ; ---------------------------------------------------------------------------
.text:00409C81
.text:00409C81 loc_409C81:                             ; CODE XREF: .text:00409C69↑j
.text:00409C81                 test    eax, eax
.text:00409C83                 jnz     short loc_409C6B
.text:00409C85                 mov     dword ptr [edi+10h], 0
.text:00409C8C
.text:00409C8C loc_409C8C:                             ; CODE XREF: .text:00409C64↑j
.text:00409C8C                 mov     dword ptr [edi+14h], 0
.text:00409C93                 jmp     short loc_409C6B
.text:00409C95 ; ---------------------------------------------------------------------------
.text:00409C95
.text:00409C95 loc_409C95:                             ; CODE XREF: .text:00409C5F↑j
.text:00409C95                 mov     dword ptr [esp+4], 409A2Eh
.text:00409C9D                 lea     esi, [edi+14h]
.text:00409CA0                 lea     ebp, [edi+10h]
.text:00409CA3                 mov     [esp+0Ch], esi
.text:00409CA7                 mov     [esp+8], ebp
.text:00409CAB                 mov     [esp], edx
.text:00409CAE                 call    sscanf
.text:00409CB3                 jmp     short loc_409C61
.text:00409CB5 ; ---------------------------------------------------------------------------
.text:00409CB5
.text:00409CB5 loc_409CB5:                             ; CODE XREF: .text:00409C45↑j
.text:00409CB5                 cmp     byte ptr [edx+1], 30h ; '0'
.text:00409CB9                 jz      short loc_409CF8
.text:00409CBB
.text:00409CBB loc_409CBB:                             ; CODE XREF: .text:00409CFC↓j
.text:00409CBB                                         ; .text:00409D02↓j
.text:00409CBB                 cmp     al, 5Ch ; '\'
.text:00409CBD                 jnz     short loc_409C47
.text:00409CBF                 cmp     byte ptr [edx+1], 30h ; '0'
.text:00409CC3                 jz      short loc_409CE0
.text:00409CC5
.text:00409CC5 loc_409CC5:                             ; CODE XREF: .text:00409CE4↓j
.text:00409CC5                                         ; .text:00409CEA↓j
.text:00409CC5                 cmp     al, 5Ch ; '\'
.text:00409CC7                 jnz     loc_409C47
.text:00409CCD                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:00409CD1                 jnz     loc_409C47
.text:00409CD7                 mov     byte ptr [ecx], 5Ch ; '\'
.text:00409CDA                 inc     edx
.text:00409CDB                 jmp     loc_409C49
.text:00409CE0 ; ---------------------------------------------------------------------------
.text:00409CE0
.text:00409CE0 loc_409CE0:                             ; CODE XREF: .text:00409CC3↑j
.text:00409CE0                 cmp     byte ptr [edx+2], 31h ; '1'
.text:00409CE4                 jnz     short loc_409CC5
.text:00409CE6                 cmp     byte ptr [edx+3], 32h ; '2'
.text:00409CEA                 jnz     short loc_409CC5
.text:00409CEC                 mov     byte ptr [ecx], 9
.text:00409CEF
.text:00409CEF loc_409CEF:                             ; CODE XREF: .text:00409D07↓j
.text:00409CEF                 inc     ecx
.text:00409CF0                 add     edx, 3
.text:00409CF3                 jmp     loc_409C4A
.text:00409CF8 ; ---------------------------------------------------------------------------
.text:00409CF8
.text:00409CF8 loc_409CF8:                             ; CODE XREF: .text:00409CB9↑j
.text:00409CF8                 cmp     byte ptr [edx+2], 34h ; '4'
.text:00409CFC                 jnz     short loc_409CBB
.text:00409CFE                 cmp     byte ptr [edx+3], 30h ; '0'
.text:00409D02                 jnz     short loc_409CBB
.text:00409D04                 mov     byte ptr [ecx], 20h ; ' '
.text:00409D07                 jmp     short loc_409CEF
.text:00409D09 ; ---------------------------------------------------------------------------
.text:00409D09
.text:00409D09 loc_409D09:                             ; CODE XREF: .text:00409C11↑j
.text:00409D09                 mov     dword ptr [esp+4], 409A2Ah
.text:00409D11                 mov     [esp], eax
.text:00409D14                 call    strspn
.text:00409D19                 add     [esp+1Ch], eax
.text:00409D1D                 jmp     loc_409C17
.text:00409D22 ; ---------------------------------------------------------------------------
.text:00409D22
.text:00409D22 loc_409D22:                             ; CODE XREF: .text:00409BF5↑j
.text:00409D22                 cmp     byte ptr [edx+1], 30h ; '0'
.text:00409D26                 jz      short loc_409D69
.text:00409D28
.text:00409D28 loc_409D28:                             ; CODE XREF: .text:00409D6D↓j
.text:00409D28                                         ; .text:00409D73↓j
.text:00409D28                 cmp     al, 5Ch ; '\'
.text:00409D2A                 jnz     loc_409BFB
.text:00409D30                 cmp     byte ptr [edx+1], 30h ; '0'
.text:00409D34                 jz      short loc_409D51
.text:00409D36
.text:00409D36 loc_409D36:                             ; CODE XREF: .text:00409D55↓j
.text:00409D36                                         ; .text:00409D5B↓j
.text:00409D36                 cmp     al, 5Ch ; '\'
.text:00409D38                 jnz     loc_409BFB
.text:00409D3E                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:00409D42                 jnz     loc_409BFB
.text:00409D48                 mov     byte ptr [ecx], 5Ch ; '\'
.text:00409D4B                 inc     edx
.text:00409D4C                 jmp     loc_409BFD
.text:00409D51 ; ---------------------------------------------------------------------------
.text:00409D51
.text:00409D51 loc_409D51:                             ; CODE XREF: .text:00409D34↑j
.text:00409D51                 cmp     byte ptr [edx+2], 31h ; '1'
.text:00409D55                 jnz     short loc_409D36
.text:00409D57                 cmp     byte ptr [edx+3], 32h ; '2'
.text:00409D5B                 jnz     short loc_409D36
.text:00409D5D                 mov     byte ptr [ecx], 9
.text:00409D60
.text:00409D60 loc_409D60:                             ; CODE XREF: .text:00409D78↓j
.text:00409D60                 inc     ecx
.text:00409D61                 add     edx, 3
.text:00409D64                 jmp     loc_409BFE
.text:00409D69 ; ---------------------------------------------------------------------------
.text:00409D69
.text:00409D69 loc_409D69:                             ; CODE XREF: .text:00409D26↑j
.text:00409D69                 cmp     byte ptr [edx+2], 34h ; '4'
.text:00409D6D                 jnz     short loc_409D28
.text:00409D6F                 cmp     byte ptr [edx+3], 30h ; '0'
.text:00409D73                 jnz     short loc_409D28
.text:00409D75                 mov     byte ptr [ecx], 20h ; ' '
.text:00409D78                 jmp     short loc_409D60
.text:00409D7A ; ---------------------------------------------------------------------------
.text:00409D7A
.text:00409D7A loc_409D7A:                             ; CODE XREF: .text:00409BC1↑j
.text:00409D7A                 mov     dword ptr [esp+4], 409A2Ah
.text:00409D82                 mov     [esp], eax
.text:00409D85                 call    strspn
.text:00409D8A                 add     [esp+1Ch], eax
.text:00409D8E                 jmp     loc_409BC7
.text:00409D93 ; ---------------------------------------------------------------------------
.text:00409D93
.text:00409D93 loc_409D93:                             ; CODE XREF: .text:00409BA5↑j
.text:00409D93                 cmp     byte ptr [edx+1], 30h ; '0'
.text:00409D97                 jz      short loc_409DDA
.text:00409D99
.text:00409D99 loc_409D99:                             ; CODE XREF: .text:00409DDE↓j
.text:00409D99                                         ; .text:00409DE4↓j
.text:00409D99                 cmp     al, 5Ch ; '\'
.text:00409D9B                 jnz     loc_409BAB
.text:00409DA1                 cmp     byte ptr [edx+1], 30h ; '0'
.text:00409DA5                 jz      short loc_409DC2
.text:00409DA7
.text:00409DA7 loc_409DA7:                             ; CODE XREF: .text:00409DC6↓j
.text:00409DA7                                         ; .text:00409DCC↓j
.text:00409DA7                 cmp     al, 5Ch ; '\'
.text:00409DA9                 jnz     loc_409BAB
.text:00409DAF                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:00409DB3                 jnz     loc_409BAB
.text:00409DB9                 mov     byte ptr [ecx], 5Ch ; '\'
.text:00409DBC                 inc     edx
.text:00409DBD                 jmp     loc_409BAD
.text:00409DC2 ; ---------------------------------------------------------------------------
.text:00409DC2
.text:00409DC2 loc_409DC2:                             ; CODE XREF: .text:00409DA5↑j
.text:00409DC2                 cmp     byte ptr [edx+2], 31h ; '1'
.text:00409DC6                 jnz     short loc_409DA7
.text:00409DC8                 cmp     byte ptr [edx+3], 32h ; '2'
.text:00409DCC                 jnz     short loc_409DA7
.text:00409DCE                 mov     byte ptr [ecx], 9
.text:00409DD1
.text:00409DD1 loc_409DD1:                             ; CODE XREF: .text:00409DE9↓j
.text:00409DD1                 inc     ecx
.text:00409DD2                 add     edx, 3
.text:00409DD5                 jmp     loc_409BAE
.text:00409DDA ; ---------------------------------------------------------------------------
.text:00409DDA
.text:00409DDA loc_409DDA:                             ; CODE XREF: .text:00409D97↑j
.text:00409DDA                 cmp     byte ptr [edx+2], 34h ; '4'
.text:00409DDE                 jnz     short loc_409D99
.text:00409DE0                 cmp     byte ptr [edx+3], 30h ; '0'
.text:00409DE4                 jnz     short loc_409D99
.text:00409DE6                 mov     byte ptr [ecx], 20h ; ' '
.text:00409DE9                 jmp     short loc_409DD1
.text:00409DEB ; ---------------------------------------------------------------------------
.text:00409DEB
.text:00409DEB loc_409DEB:                             ; CODE XREF: .text:00409B70↑j
.text:00409DEB                 mov     dword ptr [esp+4], 409A2Ah
.text:00409DF3                 mov     [esp], eax
.text:00409DF6                 call    strspn
.text:00409DFB                 add     [esp+1Ch], eax
.text:00409DFF                 jmp     loc_409B76
.text:00409E04 ; ---------------------------------------------------------------------------
.text:00409E04
.text:00409E04 loc_409E04:                             ; CODE XREF: .text:00409B55↑j
.text:00409E04                 cmp     byte ptr [edx+1], 30h ; '0'
.text:00409E08                 jz      short loc_409E4B
.text:00409E0A
.text:00409E0A loc_409E0A:                             ; CODE XREF: .text:00409E4F↓j
.text:00409E0A                                         ; .text:00409E55↓j
.text:00409E0A                 cmp     al, 5Ch ; '\'
.text:00409E0C                 jnz     loc_409B5B
.text:00409E12                 cmp     byte ptr [edx+1], 30h ; '0'
.text:00409E16                 jz      short loc_409E33
.text:00409E18
.text:00409E18 loc_409E18:                             ; CODE XREF: .text:00409E37↓j
.text:00409E18                                         ; .text:00409E3D↓j
.text:00409E18                 cmp     al, 5Ch ; '\'
.text:00409E1A                 jnz     loc_409B5B
.text:00409E20                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:00409E24                 jnz     loc_409B5B
.text:00409E2A                 mov     byte ptr [ecx], 5Ch ; '\'
.text:00409E2D                 inc     edx
.text:00409E2E                 jmp     loc_409B5D
.text:00409E33 ; ---------------------------------------------------------------------------
.text:00409E33
.text:00409E33 loc_409E33:                             ; CODE XREF: .text:00409E16↑j
.text:00409E33                 cmp     byte ptr [edx+2], 31h ; '1'
.text:00409E37                 jnz     short loc_409E18
.text:00409E39                 cmp     byte ptr [edx+3], 32h ; '2'
.text:00409E3D                 jnz     short loc_409E18
.text:00409E3F                 mov     byte ptr [ecx], 9
.text:00409E42
.text:00409E42 loc_409E42:                             ; CODE XREF: .text:00409E5A↓j
.text:00409E42                 inc     ecx
.text:00409E43                 add     edx, 3
.text:00409E46                 jmp     loc_409B5E
.text:00409E4B ; ---------------------------------------------------------------------------
.text:00409E4B
.text:00409E4B loc_409E4B:                             ; CODE XREF: .text:00409E08↑j
.text:00409E4B                 cmp     byte ptr [edx+2], 34h ; '4'
.text:00409E4F                 jnz     short loc_409E0A
.text:00409E51                 cmp     byte ptr [edx+3], 30h ; '0'
.text:00409E55                 jnz     short loc_409E0A
.text:00409E57                 mov     byte ptr [ecx], 20h ; ' '
.text:00409E5A                 jmp     short loc_409E42
.text:00409E5A ; ---------------------------------------------------------------------------
.text:00409E5C                 align 10h
.text:00409E60
.text:00409E60 loc_409E60:                             ; CODE XREF: .text:00409A72↑j
.text:00409E60                 mov     dword ptr [esp+4], 0
.text:00409E68                 mov     dword ptr [esp], 0
.text:00409E6F                 call    GetLogicalDriveStringsA
.text:00409E74                 sub     esp, 8
.text:00409E77                 mov     ebx, eax
.text:00409E79                 call    GetProcessHeap
.text:00409E7E                 mov     [esp], eax
.text:00409E81                 mov     [esp+8], ebx
.text:00409E85                 mov     dword ptr [esp+4], 0
.text:00409E8D                 call    HeapAlloc
.text:00409E92                 sub     esp, 0Ch
.text:00409E95                 mov     esi, eax
.text:00409E97                 mov     [esp+4], eax
.text:00409E9B                 mov     [esp], ebx
.text:00409E9E                 call    GetLogicalDriveStringsA
.text:00409EA3                 mov     off_40F054, esi ; "notset"
.text:00409EA9                 sub     esp, 8
.text:00409EAC                 jmp     loc_409A78
.text:00409EAC ; ---------------------------------------------------------------------------
.text:00409EB1 ; const char aSSSSDD[]
.text:00409EB1 aSSSSDD         db '%s %s %s %s %d %d',0Ah,0
.text:00409EB1                                         ; DATA XREF: .text:00409FF0↓o
.text:00409EB1                                         ; ___addmntentstr+F0↓o
.text:00409EC4                 align 10h
.text:00409ED0                 push    esi
.text:00409ED1                 push    ebx
.text:00409ED2                 sub     esp, 44h
.text:00409ED5                 mov     ebx, [esp+54h]
.text:00409ED9                 mov     esi, [esp+50h]
.text:00409EDD                 mov     edx, [ebx]
.text:00409EDF                 mov     [esp+20h], edx
.text:00409EE3                 mov     ecx, [ebx+4]
.text:00409EE6                 mov     [esp+24h], ecx
.text:00409EEA                 mov     edx, [ebx+8]
.text:00409EED                 mov     [esp+28h], edx
.text:00409EF1                 mov     ecx, [ebx+0Ch]
.text:00409EF4                 mov     [esp+2Ch], ecx
.text:00409EF8                 mov     edx, [ebx+10h]
.text:00409EFB                 mov     [esp+30h], edx
.text:00409EFF                 mov     ecx, [ebx+14h]
.text:00409F02                 mov     dword ptr [esp+8], 2
.text:00409F0A                 mov     dword ptr [esp+4], 0
.text:00409F12                 mov     [esp+34h], ecx
.text:00409F16                 mov     [esp], esi
.text:00409F19                 call    sub_40B330
.text:00409F1E ; ---------------------------------------------------------------------------
.text:00409F1E                 test    eax, eax
.text:00409F20                 mov     edx, 1
.text:00409F25                 jnz     loc_40A025
.text:00409F2B                 mov     ebx, [esp+20h]
.text:00409F2F                 mov     edx, ebx
.text:00409F31                 movzx   eax, byte ptr [ebx]
.text:00409F34                 test    al, al
.text:00409F36                 jz      short loc_409F60
.text:00409F38                 nop
.text:00409F39                 lea     esi, [esi+0]
.text:00409F40
.text:00409F40 loc_409F40:                             ; CODE XREF: .text:00409F5E↓j
.text:00409F40                 cmp     al, 20h ; ' '
.text:00409F42                 jz      loc_40A19A
.text:00409F48                 cmp     al, 9
.text:00409F4A                 jz      loc_40A19A
.text:00409F50                 cmp     al, 5Ch ; '\'
.text:00409F52                 jz      loc_40A19A
.text:00409F58                 inc     ebx
.text:00409F59                 movzx   eax, byte ptr [ebx]
.text:00409F5C                 test    al, al
.text:00409F5E                 jnz     short loc_409F40
.text:00409F60
.text:00409F60 loc_409F60:                             ; CODE XREF: .text:00409F36↑j
.text:00409F60                                         ; .text:0040A19C↓j ...
.text:00409F60                 mov     ebx, [esp+24h]
.text:00409F64                 mov     edx, ebx
.text:00409F66                 movzx   eax, byte ptr [ebx]
.text:00409F69                 test    al, al
.text:00409F6B                 jz      short loc_409F90
.text:00409F6D                 lea     esi, [esi+0]
.text:00409F70
.text:00409F70 loc_409F70:                             ; CODE XREF: .text:00409F8E↓j
.text:00409F70                 cmp     al, 20h ; ' '
.text:00409F72                 jz      loc_40A11A
.text:00409F78                 cmp     al, 9
.text:00409F7A                 jz      loc_40A11A
.text:00409F80                 cmp     al, 5Ch ; '\'
.text:00409F82                 jz      loc_40A11A
.text:00409F88                 inc     ebx
.text:00409F89                 movzx   eax, byte ptr [ebx]
.text:00409F8C                 test    al, al
.text:00409F8E                 jnz     short loc_409F70
.text:00409F90
.text:00409F90 loc_409F90:                             ; CODE XREF: .text:00409F6B↑j
.text:00409F90                                         ; .text:0040A11C↓j ...
.text:00409F90                 mov     ebx, [esp+28h]
.text:00409F94                 mov     edx, ebx
.text:00409F96                 movzx   eax, byte ptr [ebx]
.text:00409F99                 test    al, al
.text:00409F9B                 jz      short loc_409FC0
.text:00409F9D                 lea     esi, [esi+0]
.text:00409FA0
.text:00409FA0 loc_409FA0:                             ; CODE XREF: .text:00409FBE↓j
.text:00409FA0                 cmp     al, 20h ; ' '
.text:00409FA2                 jz      loc_40A09E
.text:00409FA8                 cmp     al, 9
.text:00409FAA                 jz      loc_40A09E
.text:00409FB0                 cmp     al, 5Ch ; '\'
.text:00409FB2                 jz      loc_40A09E
.text:00409FB8                 inc     ebx
.text:00409FB9                 movzx   eax, byte ptr [ebx]
.text:00409FBC                 test    al, al
.text:00409FBE                 jnz     short loc_409FA0
.text:00409FC0
.text:00409FC0 loc_409FC0:                             ; CODE XREF: .text:00409F9B↑j
.text:00409FC0                                         ; .text:0040A0A0↓j ...
.text:00409FC0                 mov     edx, [esp+2Ch]
.text:00409FC4                 mov     ebx, edx
.text:00409FC6                 movzx   eax, byte ptr [edx]
.text:00409FC9                 test    al, al
.text:00409FCB                 jz      short loc_409FE4
.text:00409FCD                 lea     esi, [esi+0]
.text:00409FD0
.text:00409FD0 loc_409FD0:                             ; CODE XREF: .text:00409FE2↓j
.text:00409FD0                 cmp     al, 20h ; ' '
.text:00409FD2                 jz      short loc_40A02D
.text:00409FD4                 cmp     al, 9
.text:00409FD6                 jz      short loc_40A02D
.text:00409FD8                 cmp     al, 5Ch ; '\'
.text:00409FDA                 jz      short loc_40A02D
.text:00409FDC                 inc     ebx
.text:00409FDD                 movzx   eax, byte ptr [ebx]
.text:00409FE0                 test    al, al
.text:00409FE2                 jnz     short loc_409FD0
.text:00409FE4
.text:00409FE4 loc_409FE4:                             ; CODE XREF: .text:00409FCB↑j
.text:00409FE4                                         ; .text:0040A02F↓j ...
.text:00409FE4                 mov     [esp+14h], edx
.text:00409FE8                 mov     ecx, [esp+34h]
.text:00409FEC                 mov     ebx, [esp+30h]
.text:00409FF0                 mov     dword ptr [esp+4], offset aSSSSDD ; "%s %s %s %s %d %d\n"
.text:00409FF8                 mov     edx, [esp+24h]
.text:00409FFC                 mov     [esp+1Ch], ecx
.text:0040A000                 mov     ecx, [esp+28h]
.text:0040A004                 mov     [esp+18h], ebx
.text:0040A008                 mov     ebx, [esp+20h]
.text:0040A00C                 mov     [esp+0Ch], edx
.text:0040A010                 mov     [esp+10h], ecx
.text:0040A014                 mov     [esp+8], ebx
.text:0040A018                 mov     [esp], esi
.text:0040A01B                 call    fprintf
.text:0040A020                 mov     edx, eax
.text:0040A022                 shr     edx, 1Fh
.text:0040A025
.text:0040A025 loc_40A025:                             ; CODE XREF: .text:00409F25↑j
.text:0040A025                 add     esp, 44h
.text:0040A028                 mov     eax, edx
.text:0040A02A                 pop     ebx
.text:0040A02B                 pop     esi
.text:0040A02C                 retn
.text:0040A02D ; ---------------------------------------------------------------------------
.text:0040A02D
.text:0040A02D loc_40A02D:                             ; CODE XREF: .text:00409FD2↑j
.text:0040A02D                                         ; .text:00409FD6↑j ...
.text:0040A02D                 test    al, al
.text:0040A02F                 jz      short loc_409FE4
.text:0040A031                 mov     [esp], edx
.text:0040A034                 mov     ebx, edx
.text:0040A036                 call    strlen
.text:0040A03B                 lea     edx, ds:1[eax*4]
.text:0040A042                 mov     [esp], edx
.text:0040A045                 call    malloc
.text:0040A04A                 mov     [esp+2Ch], eax
.text:0040A04E                 mov     edx, eax
.text:0040A050
.text:0040A050 loc_40A050:                             ; CODE XREF: .text:0040A068↓j
.text:0040A050                 movzx   eax, byte ptr [ebx]
.text:0040A053                 cmp     al, 20h ; ' '
.text:0040A055                 jz      short loc_40A08D
.text:0040A057                 cmp     al, 9
.text:0040A059                 jz      short loc_40A07C
.text:0040A05B                 cmp     al, 5Ch ; '\'
.text:0040A05D                 jz      short loc_40A073
.text:0040A05F                 mov     [edx], al
.text:0040A061
.text:0040A061 loc_40A061:                             ; CODE XREF: .text:0040A07A↓j
.text:0040A061                                         ; .text:0040A08B↓j ...
.text:0040A061                 movzx   ecx, byte ptr [ebx]
.text:0040A064                 inc     edx
.text:0040A065                 inc     ebx
.text:0040A066                 test    cl, cl
.text:0040A068                 jnz     short loc_40A050
.text:0040A06A                 mov     edx, [esp+2Ch]
.text:0040A06E                 jmp     loc_409FE4
.text:0040A073 ; ---------------------------------------------------------------------------
.text:0040A073
.text:0040A073 loc_40A073:                             ; CODE XREF: .text:0040A05D↑j
.text:0040A073                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A076                 inc     edx
.text:0040A077                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A07A                 jmp     short loc_40A061
.text:0040A07C ; ---------------------------------------------------------------------------
.text:0040A07C
.text:0040A07C loc_40A07C:                             ; CODE XREF: .text:0040A059↑j
.text:0040A07C                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A07F                 inc     edx
.text:0040A080                 mov     byte ptr [edx], 30h ; '0'
.text:0040A083                 inc     edx
.text:0040A084                 mov     byte ptr [edx], 31h ; '1'
.text:0040A087                 inc     edx
.text:0040A088                 mov     byte ptr [edx], 32h ; '2'
.text:0040A08B                 jmp     short loc_40A061
.text:0040A08D ; ---------------------------------------------------------------------------
.text:0040A08D
.text:0040A08D loc_40A08D:                             ; CODE XREF: .text:0040A055↑j
.text:0040A08D                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A090                 inc     edx
.text:0040A091                 mov     byte ptr [edx], 30h ; '0'
.text:0040A094                 inc     edx
.text:0040A095                 mov     byte ptr [edx], 34h ; '4'
.text:0040A098                 inc     edx
.text:0040A099                 mov     byte ptr [edx], 30h ; '0'
.text:0040A09C                 jmp     short loc_40A061
.text:0040A09E ; ---------------------------------------------------------------------------
.text:0040A09E
.text:0040A09E loc_40A09E:                             ; CODE XREF: .text:00409FA2↑j
.text:0040A09E                                         ; .text:00409FAA↑j ...
.text:0040A09E                 test    al, al
.text:0040A0A0                 jz      loc_409FC0
.text:0040A0A6                 mov     [esp], edx
.text:0040A0A9                 mov     ebx, edx
.text:0040A0AB                 call    strlen
.text:0040A0B0                 lea     edx, ds:1[eax*4]
.text:0040A0B7                 mov     [esp], edx
.text:0040A0BA                 call    malloc
.text:0040A0BF                 mov     [esp+28h], eax
.text:0040A0C3                 mov     edx, eax
.text:0040A0C5                 lea     esi, [esi+0]
.text:0040A0C9                 lea     edi, [edi+0]
.text:0040A0D0
.text:0040A0D0 loc_40A0D0:                             ; CODE XREF: .text:0040A0E8↓j
.text:0040A0D0                 movzx   eax, byte ptr [ebx]
.text:0040A0D3                 cmp     al, 20h ; ' '
.text:0040A0D5                 jz      short loc_40A109
.text:0040A0D7                 cmp     al, 9
.text:0040A0D9                 jz      short loc_40A0F8
.text:0040A0DB                 cmp     al, 5Ch ; '\'
.text:0040A0DD                 jz      short loc_40A0EF
.text:0040A0DF                 mov     [edx], al
.text:0040A0E1
.text:0040A0E1 loc_40A0E1:                             ; CODE XREF: .text:0040A0F6↓j
.text:0040A0E1                                         ; .text:0040A107↓j ...
.text:0040A0E1                 movzx   ecx, byte ptr [ebx]
.text:0040A0E4                 inc     edx
.text:0040A0E5                 inc     ebx
.text:0040A0E6                 test    cl, cl
.text:0040A0E8                 jnz     short loc_40A0D0
.text:0040A0EA                 jmp     loc_409FC0
.text:0040A0EF ; ---------------------------------------------------------------------------
.text:0040A0EF
.text:0040A0EF loc_40A0EF:                             ; CODE XREF: .text:0040A0DD↑j
.text:0040A0EF                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A0F2                 inc     edx
.text:0040A0F3                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A0F6                 jmp     short loc_40A0E1
.text:0040A0F8 ; ---------------------------------------------------------------------------
.text:0040A0F8
.text:0040A0F8 loc_40A0F8:                             ; CODE XREF: .text:0040A0D9↑j
.text:0040A0F8                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A0FB                 inc     edx
.text:0040A0FC                 mov     byte ptr [edx], 30h ; '0'
.text:0040A0FF                 inc     edx
.text:0040A100                 mov     byte ptr [edx], 31h ; '1'
.text:0040A103                 inc     edx
.text:0040A104                 mov     byte ptr [edx], 32h ; '2'
.text:0040A107                 jmp     short loc_40A0E1
.text:0040A109 ; ---------------------------------------------------------------------------
.text:0040A109
.text:0040A109 loc_40A109:                             ; CODE XREF: .text:0040A0D5↑j
.text:0040A109                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A10C                 inc     edx
.text:0040A10D                 mov     byte ptr [edx], 30h ; '0'
.text:0040A110                 inc     edx
.text:0040A111                 mov     byte ptr [edx], 34h ; '4'
.text:0040A114                 inc     edx
.text:0040A115                 mov     byte ptr [edx], 30h ; '0'
.text:0040A118                 jmp     short loc_40A0E1
.text:0040A11A ; ---------------------------------------------------------------------------
.text:0040A11A
.text:0040A11A loc_40A11A:                             ; CODE XREF: .text:00409F72↑j
.text:0040A11A                                         ; .text:00409F7A↑j ...
.text:0040A11A                 test    al, al
.text:0040A11C                 jz      loc_409F90
.text:0040A122                 mov     [esp], edx
.text:0040A125                 mov     ebx, edx
.text:0040A127                 call    strlen
.text:0040A12C                 lea     edx, ds:1[eax*4]
.text:0040A133                 mov     [esp], edx
.text:0040A136                 call    malloc
.text:0040A13B                 mov     [esp+24h], eax
.text:0040A13F                 mov     edx, eax
.text:0040A141                 jmp     short loc_40A150
.text:0040A141 ; ---------------------------------------------------------------------------
.text:0040A143                 align 10h
.text:0040A150
.text:0040A150 loc_40A150:                             ; CODE XREF: .text:0040A141↑j
.text:0040A150                                         ; .text:0040A168↓j
.text:0040A150                 movzx   eax, byte ptr [ebx]
.text:0040A153                 cmp     al, 20h ; ' '
.text:0040A155                 jz      short loc_40A189
.text:0040A157                 cmp     al, 9
.text:0040A159                 jz      short loc_40A178
.text:0040A15B                 cmp     al, 5Ch ; '\'
.text:0040A15D                 jz      short loc_40A16F
.text:0040A15F                 mov     [edx], al
.text:0040A161
.text:0040A161 loc_40A161:                             ; CODE XREF: .text:0040A176↓j
.text:0040A161                                         ; .text:0040A187↓j ...
.text:0040A161                 movzx   ecx, byte ptr [ebx]
.text:0040A164                 inc     edx
.text:0040A165                 inc     ebx
.text:0040A166                 test    cl, cl
.text:0040A168                 jnz     short loc_40A150
.text:0040A16A                 jmp     loc_409F90
.text:0040A16F ; ---------------------------------------------------------------------------
.text:0040A16F
.text:0040A16F loc_40A16F:                             ; CODE XREF: .text:0040A15D↑j
.text:0040A16F                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A172                 inc     edx
.text:0040A173                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A176                 jmp     short loc_40A161
.text:0040A178 ; ---------------------------------------------------------------------------
.text:0040A178
.text:0040A178 loc_40A178:                             ; CODE XREF: .text:0040A159↑j
.text:0040A178                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A17B                 inc     edx
.text:0040A17C                 mov     byte ptr [edx], 30h ; '0'
.text:0040A17F                 inc     edx
.text:0040A180                 mov     byte ptr [edx], 31h ; '1'
.text:0040A183                 inc     edx
.text:0040A184                 mov     byte ptr [edx], 32h ; '2'
.text:0040A187                 jmp     short loc_40A161
.text:0040A189 ; ---------------------------------------------------------------------------
.text:0040A189
.text:0040A189 loc_40A189:                             ; CODE XREF: .text:0040A155↑j
.text:0040A189                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A18C                 inc     edx
.text:0040A18D                 mov     byte ptr [edx], 30h ; '0'
.text:0040A190                 inc     edx
.text:0040A191                 mov     byte ptr [edx], 34h ; '4'
.text:0040A194                 inc     edx
.text:0040A195                 mov     byte ptr [edx], 30h ; '0'
.text:0040A198                 jmp     short loc_40A161
.text:0040A19A ; ---------------------------------------------------------------------------
.text:0040A19A
.text:0040A19A loc_40A19A:                             ; CODE XREF: .text:00409F42↑j
.text:0040A19A                                         ; .text:00409F4A↑j ...
.text:0040A19A                 test    al, al
.text:0040A19C                 jz      loc_409F60
.text:0040A1A2                 mov     [esp], edx
.text:0040A1A5                 mov     ebx, edx
.text:0040A1A7                 call    strlen
.text:0040A1AC                 lea     ecx, ds:1[eax*4]
.text:0040A1B3                 mov     [esp], ecx
.text:0040A1B6                 call    malloc
.text:0040A1BB                 mov     [esp+20h], eax
.text:0040A1BF                 mov     edx, eax
.text:0040A1C1                 jmp     short loc_40A1D0
.text:0040A1C1 ; ---------------------------------------------------------------------------
.text:0040A1C3                 align 10h
.text:0040A1D0
.text:0040A1D0 loc_40A1D0:                             ; CODE XREF: .text:0040A1C1↑j
.text:0040A1D0                                         ; .text:0040A1E8↓j
.text:0040A1D0                 movzx   eax, byte ptr [ebx]
.text:0040A1D3                 cmp     al, 20h ; ' '
.text:0040A1D5                 jz      short loc_40A209
.text:0040A1D7                 cmp     al, 9
.text:0040A1D9                 jz      short loc_40A1F8
.text:0040A1DB                 cmp     al, 5Ch ; '\'
.text:0040A1DD                 jz      short loc_40A1EF
.text:0040A1DF                 mov     [edx], al
.text:0040A1E1
.text:0040A1E1 loc_40A1E1:                             ; CODE XREF: .text:0040A1F6↓j
.text:0040A1E1                                         ; .text:0040A207↓j ...
.text:0040A1E1                 movzx   ecx, byte ptr [ebx]
.text:0040A1E4                 inc     edx
.text:0040A1E5                 inc     ebx
.text:0040A1E6                 test    cl, cl
.text:0040A1E8                 jnz     short loc_40A1D0
.text:0040A1EA                 jmp     loc_409F60
.text:0040A1EF ; ---------------------------------------------------------------------------
.text:0040A1EF
.text:0040A1EF loc_40A1EF:                             ; CODE XREF: .text:0040A1DD↑j
.text:0040A1EF                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A1F2                 inc     edx
.text:0040A1F3                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A1F6                 jmp     short loc_40A1E1
.text:0040A1F8 ; ---------------------------------------------------------------------------
.text:0040A1F8
.text:0040A1F8 loc_40A1F8:                             ; CODE XREF: .text:0040A1D9↑j
.text:0040A1F8                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A1FB                 inc     edx
.text:0040A1FC                 mov     byte ptr [edx], 30h ; '0'
.text:0040A1FF                 inc     edx
.text:0040A200                 mov     byte ptr [edx], 31h ; '1'
.text:0040A203                 inc     edx
.text:0040A204                 mov     byte ptr [edx], 32h ; '2'
.text:0040A207                 jmp     short loc_40A1E1
.text:0040A209 ; ---------------------------------------------------------------------------
.text:0040A209
.text:0040A209 loc_40A209:                             ; CODE XREF: .text:0040A1D5↑j
.text:0040A209                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A20C                 inc     edx
.text:0040A20D                 mov     byte ptr [edx], 30h ; '0'
.text:0040A210                 inc     edx
.text:0040A211                 mov     byte ptr [edx], 34h ; '4'
.text:0040A214                 inc     edx
.text:0040A215                 mov     byte ptr [edx], 30h ; '0'
.text:0040A218                 jmp     short loc_40A1E1
.text:0040A218 ; ---------------------------------------------------------------------------
.text:0040A21A                 align 10h
.text:0040A220
.text:0040A220 ; =============== S U B R O U T I N E =======================================
.text:0040A220
.text:0040A220 ; Attributes: info_from_lumina
.text:0040A220
.text:0040A220 ; int __cdecl __addmntentstr(char *, int)
.text:0040A220 ___addmntentstr proc near               ; CODE XREF: .text:00409AEA↑p
.text:0040A220
.text:0040A220 Buffer          = dword ptr -4Ch
.text:0040A220 Format          = dword ptr -48h
.text:0040A220 var_44          = dword ptr -44h
.text:0040A220 var_40          = dword ptr -40h
.text:0040A220 var_3C          = dword ptr -3Ch
.text:0040A220 var_38          = dword ptr -38h
.text:0040A220 var_34          = dword ptr -34h
.text:0040A220 var_30          = dword ptr -30h
.text:0040A220 var_2C          = dword ptr -2Ch
.text:0040A220 var_28          = dword ptr -28h
.text:0040A220 var_24          = dword ptr -24h
.text:0040A220 Str             = dword ptr -20h
.text:0040A220 var_1C          = dword ptr -1Ch
.text:0040A220 var_18          = dword ptr -18h
.text:0040A220 arg_0           = dword ptr  4
.text:0040A220 arg_4           = dword ptr  8
.text:0040A220
.text:0040A220                 push    ebx
.text:0040A221                 sub     esp, 48h
.text:0040A224                 mov     edx, [esp+4Ch+arg_4]
.text:0040A228                 mov     ecx, [edx]
.text:0040A22A                 mov     [esp+4Ch+var_2C], ecx
.text:0040A22E                 mov     ebx, [edx+4]
.text:0040A231                 mov     [esp+4Ch+var_28], ebx
.text:0040A235                 mov     ebx, [edx+8]
.text:0040A238                 mov     [esp+4Ch+var_24], ebx
.text:0040A23C                 mov     ebx, [edx+0Ch]
.text:0040A23F                 mov     [esp+4Ch+Str], ebx
.text:0040A243                 mov     ebx, [edx+10h]
.text:0040A246                 mov     [esp+4Ch+var_1C], ebx
.text:0040A24A                 mov     ebx, [edx+14h]
.text:0040A24D                 mov     [esp+4Ch+var_18], ebx
.text:0040A251                 mov     ebx, ecx
.text:0040A253                 movzx   eax, byte ptr [ecx]
.text:0040A256                 test    al, al
.text:0040A258                 jz      loc_40A541
.text:0040A25E                 mov     esi, esi
.text:0040A260
.text:0040A260 loc_40A260:                             ; CODE XREF: ___addmntentstr+5E↓j
.text:0040A260                 cmp     al, 20h ; ' '
.text:0040A262                 jz      loc_40A4C0
.text:0040A268                 cmp     al, 9
.text:0040A26A                 jz      loc_40A4C0
.text:0040A270                 cmp     al, 5Ch ; '\'
.text:0040A272                 jz      loc_40A4C0
.text:0040A278                 inc     ebx
.text:0040A279                 movzx   eax, byte ptr [ebx]
.text:0040A27C                 test    al, al
.text:0040A27E                 jnz     short loc_40A260
.text:0040A280
.text:0040A280 loc_40A280:                             ; CODE XREF: ___addmntentstr+2A2↓j
.text:0040A280                                         ; ___addmntentstr+2EA↓j
.text:0040A280                 mov     ebx, [esp+4Ch+var_28]
.text:0040A284                 mov     edx, ebx
.text:0040A286                 movzx   eax, byte ptr [ebx]
.text:0040A289                 test    al, al
.text:0040A28B                 jz      short loc_40A2B0
.text:0040A28D                 lea     esi, [esi+0]
.text:0040A290
.text:0040A290 loc_40A290:                             ; CODE XREF: ___addmntentstr+8E↓j
.text:0040A290                 cmp     al, 20h ; ' '
.text:0040A292                 jz      loc_40A43A
.text:0040A298                 cmp     al, 9
.text:0040A29A                 jz      loc_40A43A
.text:0040A2A0                 cmp     al, 5Ch ; '\'
.text:0040A2A2                 jz      loc_40A43A
.text:0040A2A8                 inc     ebx
.text:0040A2A9                 movzx   eax, byte ptr [ebx]
.text:0040A2AC                 test    al, al
.text:0040A2AE                 jnz     short loc_40A290
.text:0040A2B0
.text:0040A2B0 loc_40A2B0:                             ; CODE XREF: ___addmntentstr+6B↑j
.text:0040A2B0                                         ; ___addmntentstr+21C↓j ...
.text:0040A2B0                 mov     ebx, [esp+4Ch+var_24]
.text:0040A2B4                 mov     edx, ebx
.text:0040A2B6                 movzx   eax, byte ptr [ebx]
.text:0040A2B9                 test    al, al
.text:0040A2BB                 jz      short loc_40A2E0
.text:0040A2BD                 lea     esi, [esi+0]
.text:0040A2C0
.text:0040A2C0 loc_40A2C0:                             ; CODE XREF: ___addmntentstr+BE↓j
.text:0040A2C0                 cmp     al, 20h ; ' '
.text:0040A2C2                 jz      loc_40A3BE
.text:0040A2C8                 cmp     al, 9
.text:0040A2CA                 jz      loc_40A3BE
.text:0040A2D0                 cmp     al, 5Ch ; '\'
.text:0040A2D2                 jz      loc_40A3BE
.text:0040A2D8                 inc     ebx
.text:0040A2D9                 movzx   eax, byte ptr [ebx]
.text:0040A2DC                 test    al, al
.text:0040A2DE                 jnz     short loc_40A2C0
.text:0040A2E0
.text:0040A2E0 loc_40A2E0:                             ; CODE XREF: ___addmntentstr+9B↑j
.text:0040A2E0                                         ; ___addmntentstr+1A0↓j ...
.text:0040A2E0                 mov     edx, [esp+4Ch+Str]
.text:0040A2E4                 mov     ebx, edx
.text:0040A2E6                 movzx   eax, byte ptr [edx]
.text:0040A2E9                 test    al, al
.text:0040A2EB                 jz      short loc_40A304
.text:0040A2ED                 lea     esi, [esi+0]
.text:0040A2F0
.text:0040A2F0 loc_40A2F0:                             ; CODE XREF: ___addmntentstr+E2↓j
.text:0040A2F0                 cmp     al, 20h ; ' '
.text:0040A2F2                 jz      short loc_40A34C
.text:0040A2F4                 cmp     al, 9
.text:0040A2F6                 jz      short loc_40A34C
.text:0040A2F8                 cmp     al, 5Ch ; '\'
.text:0040A2FA                 jz      short loc_40A34C
.text:0040A2FC                 inc     ebx
.text:0040A2FD                 movzx   eax, byte ptr [ebx]
.text:0040A300                 test    al, al
.text:0040A302                 jnz     short loc_40A2F0
.text:0040A304
.text:0040A304 loc_40A304:                             ; CODE XREF: ___addmntentstr+CB↑j
.text:0040A304                                         ; ___addmntentstr+12E↓j ...
.text:0040A304                 mov     [esp+4Ch+var_38], edx
.text:0040A308                 mov     ebx, [esp+4Ch+var_18]
.text:0040A30C                 mov     ecx, [esp+4Ch+var_1C]
.text:0040A310                 mov     [esp+4Ch+Format], offset aSSSSDD ; "%s %s %s %s %d %d\n"
.text:0040A318                 mov     edx, [esp+4Ch+var_2C]
.text:0040A31C                 mov     [esp+4Ch+var_30], ebx
.text:0040A320                 mov     ebx, [esp+4Ch+var_24]
.text:0040A324                 mov     [esp+4Ch+var_34], ecx
.text:0040A328                 mov     ecx, [esp+4Ch+var_28]
.text:0040A32C                 mov     [esp+4Ch+var_3C], ebx
.text:0040A330                 mov     ebx, [esp+4Ch+arg_0]
.text:0040A334                 mov     [esp+4Ch+var_40], ecx
.text:0040A338                 mov     [esp+4Ch+var_44], edx
.text:0040A33C                 mov     [esp+4Ch+Buffer], ebx ; Buffer
.text:0040A33F                 call    sprintf
.text:0040A344                 add     esp, 48h
.text:0040A347                 shr     eax, 1Fh
.text:0040A34A                 pop     ebx
.text:0040A34B                 retn
.text:0040A34C ; ---------------------------------------------------------------------------
.text:0040A34C
.text:0040A34C loc_40A34C:                             ; CODE XREF: ___addmntentstr+D2↑j
.text:0040A34C                                         ; ___addmntentstr+D6↑j ...
.text:0040A34C                 test    al, al
.text:0040A34E                 jz      short loc_40A304
.text:0040A350                 mov     [esp+4Ch+Buffer], edx ; Str
.text:0040A353                 mov     ebx, edx
.text:0040A355                 call    strlen
.text:0040A35A                 lea     edx, ds:1[eax*4]
.text:0040A361                 mov     [esp+4Ch+Buffer], edx ; Size
.text:0040A364                 call    malloc
.text:0040A369                 mov     [esp+4Ch+Str], eax
.text:0040A36D                 mov     edx, eax
.text:0040A36F                 nop
.text:0040A370
.text:0040A370 loc_40A370:                             ; CODE XREF: ___addmntentstr+168↓j
.text:0040A370                 movzx   eax, byte ptr [ebx]
.text:0040A373                 cmp     al, 20h ; ' '
.text:0040A375                 jz      short loc_40A3AD
.text:0040A377                 cmp     al, 9
.text:0040A379                 jz      short loc_40A39C
.text:0040A37B                 cmp     al, 5Ch ; '\'
.text:0040A37D                 jz      short loc_40A393
.text:0040A37F                 mov     [edx], al
.text:0040A381
.text:0040A381 loc_40A381:                             ; CODE XREF: ___addmntentstr+17A↓j
.text:0040A381                                         ; ___addmntentstr+18B↓j ...
.text:0040A381                 movzx   ecx, byte ptr [ebx]
.text:0040A384                 inc     edx
.text:0040A385                 inc     ebx
.text:0040A386                 test    cl, cl
.text:0040A388                 jnz     short loc_40A370
.text:0040A38A                 mov     edx, [esp+4Ch+Str]
.text:0040A38E                 jmp     loc_40A304
.text:0040A393 ; ---------------------------------------------------------------------------
.text:0040A393
.text:0040A393 loc_40A393:                             ; CODE XREF: ___addmntentstr+15D↑j
.text:0040A393                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A396                 inc     edx
.text:0040A397                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A39A                 jmp     short loc_40A381
.text:0040A39C ; ---------------------------------------------------------------------------
.text:0040A39C
.text:0040A39C loc_40A39C:                             ; CODE XREF: ___addmntentstr+159↑j
.text:0040A39C                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A39F                 inc     edx
.text:0040A3A0                 mov     byte ptr [edx], 30h ; '0'
.text:0040A3A3                 inc     edx
.text:0040A3A4                 mov     byte ptr [edx], 31h ; '1'
.text:0040A3A7                 inc     edx
.text:0040A3A8                 mov     byte ptr [edx], 32h ; '2'
.text:0040A3AB                 jmp     short loc_40A381
.text:0040A3AD ; ---------------------------------------------------------------------------
.text:0040A3AD
.text:0040A3AD loc_40A3AD:                             ; CODE XREF: ___addmntentstr+155↑j
.text:0040A3AD                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A3B0                 inc     edx
.text:0040A3B1                 mov     byte ptr [edx], 30h ; '0'
.text:0040A3B4                 inc     edx
.text:0040A3B5                 mov     byte ptr [edx], 34h ; '4'
.text:0040A3B8                 inc     edx
.text:0040A3B9                 mov     byte ptr [edx], 30h ; '0'
.text:0040A3BC                 jmp     short loc_40A381
.text:0040A3BE ; ---------------------------------------------------------------------------
.text:0040A3BE
.text:0040A3BE loc_40A3BE:                             ; CODE XREF: ___addmntentstr+A2↑j
.text:0040A3BE                                         ; ___addmntentstr+AA↑j ...
.text:0040A3BE                 test    al, al
.text:0040A3C0                 jz      loc_40A2E0
.text:0040A3C6                 mov     [esp+4Ch+Buffer], edx ; Str
.text:0040A3C9                 mov     ebx, edx
.text:0040A3CB                 call    strlen
.text:0040A3D0                 lea     edx, ds:1[eax*4]
.text:0040A3D7                 mov     [esp+4Ch+Buffer], edx ; Size
.text:0040A3DA                 call    malloc
.text:0040A3DF                 mov     [esp+4Ch+var_24], eax
.text:0040A3E3                 mov     edx, eax
.text:0040A3E5                 lea     esi, [esi+0]
.text:0040A3E9                 lea     edi, [edi+0]
.text:0040A3F0
.text:0040A3F0 loc_40A3F0:                             ; CODE XREF: ___addmntentstr+1E8↓j
.text:0040A3F0                 movzx   eax, byte ptr [ebx]
.text:0040A3F3                 cmp     al, 20h ; ' '
.text:0040A3F5                 jz      short loc_40A429
.text:0040A3F7                 cmp     al, 9
.text:0040A3F9                 jz      short loc_40A418
.text:0040A3FB                 cmp     al, 5Ch ; '\'
.text:0040A3FD                 jz      short loc_40A40F
.text:0040A3FF                 mov     [edx], al
.text:0040A401
.text:0040A401 loc_40A401:                             ; CODE XREF: ___addmntentstr+1F6↓j
.text:0040A401                                         ; ___addmntentstr+207↓j ...
.text:0040A401                 movzx   ecx, byte ptr [ebx]
.text:0040A404                 inc     edx
.text:0040A405                 inc     ebx
.text:0040A406                 test    cl, cl
.text:0040A408                 jnz     short loc_40A3F0
.text:0040A40A                 jmp     loc_40A2E0
.text:0040A40F ; ---------------------------------------------------------------------------
.text:0040A40F
.text:0040A40F loc_40A40F:                             ; CODE XREF: ___addmntentstr+1DD↑j
.text:0040A40F                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A412                 inc     edx
.text:0040A413                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A416                 jmp     short loc_40A401
.text:0040A418 ; ---------------------------------------------------------------------------
.text:0040A418
.text:0040A418 loc_40A418:                             ; CODE XREF: ___addmntentstr+1D9↑j
.text:0040A418                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A41B                 inc     edx
.text:0040A41C                 mov     byte ptr [edx], 30h ; '0'
.text:0040A41F                 inc     edx
.text:0040A420                 mov     byte ptr [edx], 31h ; '1'
.text:0040A423                 inc     edx
.text:0040A424                 mov     byte ptr [edx], 32h ; '2'
.text:0040A427                 jmp     short loc_40A401
.text:0040A429 ; ---------------------------------------------------------------------------
.text:0040A429
.text:0040A429 loc_40A429:                             ; CODE XREF: ___addmntentstr+1D5↑j
.text:0040A429                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A42C                 inc     edx
.text:0040A42D                 mov     byte ptr [edx], 30h ; '0'
.text:0040A430                 inc     edx
.text:0040A431                 mov     byte ptr [edx], 34h ; '4'
.text:0040A434                 inc     edx
.text:0040A435                 mov     byte ptr [edx], 30h ; '0'
.text:0040A438                 jmp     short loc_40A401
.text:0040A43A ; ---------------------------------------------------------------------------
.text:0040A43A
.text:0040A43A loc_40A43A:                             ; CODE XREF: ___addmntentstr+72↑j
.text:0040A43A                                         ; ___addmntentstr+7A↑j ...
.text:0040A43A                 test    al, al
.text:0040A43C                 jz      loc_40A2B0
.text:0040A442                 mov     [esp+4Ch+Buffer], edx ; Str
.text:0040A445                 mov     ebx, edx
.text:0040A447                 call    strlen
.text:0040A44C                 lea     edx, ds:1[eax*4]
.text:0040A453                 mov     [esp+4Ch+Buffer], edx ; Size
.text:0040A456                 call    malloc
.text:0040A45B                 mov     [esp+4Ch+var_28], eax
.text:0040A45F                 mov     edx, eax
.text:0040A461                 jmp     short loc_40A470
.text:0040A461 ; ---------------------------------------------------------------------------
.text:0040A463                 align 10h
.text:0040A470
.text:0040A470 loc_40A470:                             ; CODE XREF: ___addmntentstr+241↑j
.text:0040A470                                         ; ___addmntentstr+268↓j
.text:0040A470                 movzx   eax, byte ptr [ebx]
.text:0040A473                 cmp     al, 20h ; ' '
.text:0040A475                 jz      short loc_40A4A9
.text:0040A477                 cmp     al, 9
.text:0040A479                 jz      short loc_40A498
.text:0040A47B                 cmp     al, 5Ch ; '\'
.text:0040A47D                 jz      short loc_40A48F
.text:0040A47F                 mov     [edx], al
.text:0040A481
.text:0040A481 loc_40A481:                             ; CODE XREF: ___addmntentstr+276↓j
.text:0040A481                                         ; ___addmntentstr+287↓j ...
.text:0040A481                 movzx   ecx, byte ptr [ebx]
.text:0040A484                 inc     edx
.text:0040A485                 inc     ebx
.text:0040A486                 test    cl, cl
.text:0040A488                 jnz     short loc_40A470
.text:0040A48A                 jmp     loc_40A2B0
.text:0040A48F ; ---------------------------------------------------------------------------
.text:0040A48F
.text:0040A48F loc_40A48F:                             ; CODE XREF: ___addmntentstr+25D↑j
.text:0040A48F                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A492                 inc     edx
.text:0040A493                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A496                 jmp     short loc_40A481
.text:0040A498 ; ---------------------------------------------------------------------------
.text:0040A498
.text:0040A498 loc_40A498:                             ; CODE XREF: ___addmntentstr+259↑j
.text:0040A498                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A49B                 inc     edx
.text:0040A49C                 mov     byte ptr [edx], 30h ; '0'
.text:0040A49F                 inc     edx
.text:0040A4A0                 mov     byte ptr [edx], 31h ; '1'
.text:0040A4A3                 inc     edx
.text:0040A4A4                 mov     byte ptr [edx], 32h ; '2'
.text:0040A4A7                 jmp     short loc_40A481
.text:0040A4A9 ; ---------------------------------------------------------------------------
.text:0040A4A9
.text:0040A4A9 loc_40A4A9:                             ; CODE XREF: ___addmntentstr+255↑j
.text:0040A4A9                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A4AC                 inc     edx
.text:0040A4AD                 mov     byte ptr [edx], 30h ; '0'
.text:0040A4B0                 inc     edx
.text:0040A4B1                 mov     byte ptr [edx], 34h ; '4'
.text:0040A4B4                 inc     edx
.text:0040A4B5                 mov     byte ptr [edx], 30h ; '0'
.text:0040A4B8                 jmp     short loc_40A481
.text:0040A4B8 ; ---------------------------------------------------------------------------
.text:0040A4BA                 align 10h
.text:0040A4C0
.text:0040A4C0 loc_40A4C0:                             ; CODE XREF: ___addmntentstr+42↑j
.text:0040A4C0                                         ; ___addmntentstr+4A↑j ...
.text:0040A4C0                 test    al, al
.text:0040A4C2                 jz      loc_40A280
.text:0040A4C8                 mov     ebx, [esp+4Ch+var_2C]
.text:0040A4CC                 mov     [esp+4Ch+Buffer], ebx ; Str
.text:0040A4CF                 call    strlen
.text:0040A4D4                 lea     edx, ds:1[eax*4]
.text:0040A4DB                 mov     [esp+4Ch+Buffer], edx ; Size
.text:0040A4DE                 call    malloc
.text:0040A4E3                 mov     [esp+4Ch+var_2C], eax
.text:0040A4E7                 mov     edx, eax
.text:0040A4E9                 lea     esi, [esi+0]
.text:0040A4F0
.text:0040A4F0 loc_40A4F0:                             ; CODE XREF: ___addmntentstr+2E8↓j
.text:0040A4F0                 movzx   eax, byte ptr [ebx]
.text:0040A4F3                 cmp     al, 20h ; ' '
.text:0040A4F5                 jz      short loc_40A530
.text:0040A4F7                 cmp     al, 9
.text:0040A4F9                 jz      short loc_40A518
.text:0040A4FB                 cmp     al, 5Ch ; '\'
.text:0040A4FD                 jz      short loc_40A50F
.text:0040A4FF                 mov     [edx], al
.text:0040A501
.text:0040A501 loc_40A501:                             ; CODE XREF: ___addmntentstr+2F6↓j
.text:0040A501                                         ; ___addmntentstr+307↓j ...
.text:0040A501                 movzx   ecx, byte ptr [ebx]
.text:0040A504                 inc     edx
.text:0040A505                 inc     ebx
.text:0040A506                 test    cl, cl
.text:0040A508                 jnz     short loc_40A4F0
.text:0040A50A                 jmp     loc_40A280
.text:0040A50F ; ---------------------------------------------------------------------------
.text:0040A50F
.text:0040A50F loc_40A50F:                             ; CODE XREF: ___addmntentstr+2DD↑j
.text:0040A50F                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A512                 inc     edx
.text:0040A513                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A516                 jmp     short loc_40A501
.text:0040A518 ; ---------------------------------------------------------------------------
.text:0040A518
.text:0040A518 loc_40A518:                             ; CODE XREF: ___addmntentstr+2D9↑j
.text:0040A518                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A51B                 inc     edx
.text:0040A51C                 mov     byte ptr [edx], 30h ; '0'
.text:0040A51F                 inc     edx
.text:0040A520                 mov     byte ptr [edx], 31h ; '1'
.text:0040A523                 inc     edx
.text:0040A524                 mov     byte ptr [edx], 32h ; '2'
.text:0040A527                 jmp     short loc_40A501
.text:0040A527 ; ---------------------------------------------------------------------------
.text:0040A529                 align 10h
.text:0040A530
.text:0040A530 loc_40A530:                             ; CODE XREF: ___addmntentstr+2D5↑j
.text:0040A530                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A533                 inc     edx
.text:0040A534                 mov     byte ptr [edx], 30h ; '0'
.text:0040A537                 inc     edx
.text:0040A538                 mov     byte ptr [edx], 34h ; '4'
.text:0040A53B                 inc     edx
.text:0040A53C                 mov     byte ptr [edx], 30h ; '0'
.text:0040A53F                 jmp     short loc_40A501
.text:0040A541 ; ---------------------------------------------------------------------------
.text:0040A541
.text:0040A541 loc_40A541:                             ; CODE XREF: ___addmntentstr+38↑j
.text:0040A541                 movzx   eax, byte ptr [ecx]
.text:0040A544                 jmp     loc_40A4C0
.text:0040A544 ___addmntentstr endp
.text:0040A544
.text:0040A544 ; ---------------------------------------------------------------------------
.text:0040A549                 align 10h
.text:0040A550
.text:0040A550 ; =============== S U B R O U T I N E =======================================
.text:0040A550
.text:0040A550
.text:0040A550 sub_40A550      proc near               ; CODE XREF: sub_408610+99↑p
.text:0040A550
.text:0040A550 nBufferLength   = dword ptr -1Ch
.text:0040A550 lpBuffer        = dword ptr -18h
.text:0040A550 dwBytes         = dword ptr -14h
.text:0040A550 var_8           = dword ptr -8
.text:0040A550 var_4           = dword ptr -4
.text:0040A550
.text:0040A550                 sub     esp, 1Ch
.text:0040A553                 mov     [esp+1Ch+var_8], ebx
.text:0040A557                 mov     [esp+1Ch+var_4], esi
.text:0040A55B                 mov     [esp+1Ch+lpBuffer], 0 ; lpBuffer
.text:0040A563                 mov     [esp+1Ch+nBufferLength], 0 ; nBufferLength
.text:0040A56A                 call    GetLogicalDriveStringsA
.text:0040A56F                 sub     esp, 8
.text:0040A572                 mov     ebx, eax
.text:0040A574                 call    GetProcessHeap
.text:0040A579                 mov     [esp+1Ch+nBufferLength], eax ; hHeap
.text:0040A57C                 mov     [esp+1Ch+dwBytes], ebx ; dwBytes
.text:0040A580                 mov     [esp+1Ch+lpBuffer], 0 ; dwFlags
.text:0040A588                 call    HeapAlloc
.text:0040A58D                 sub     esp, 0Ch
.text:0040A590                 mov     esi, eax
.text:0040A592                 mov     [esp+1Ch+nBufferLength], ebx ; nBufferLength
.text:0040A595                 mov     [esp+1Ch+lpBuffer], eax ; lpBuffer
.text:0040A599                 call    GetLogicalDriveStringsA
.text:0040A59E                 sub     esp, 8
.text:0040A5A1                 mov     eax, esi
.text:0040A5A3                 mov     ebx, [esp+1Ch+var_8]
.text:0040A5A7                 mov     esi, [esp+1Ch+var_4]
.text:0040A5AB                 add     esp, 1Ch
.text:0040A5AE                 retn
.text:0040A5AE sub_40A550      endp
.text:0040A5AE
.text:0040A5AF
.text:0040A5AF ; =============== S U B R O U T I N E =======================================
.text:0040A5AF
.text:0040A5AF
.text:0040A5AF ; int __cdecl sub_40A5AF(char *, char *)
.text:0040A5AF sub_40A5AF      proc near               ; DATA XREF: sub_40A5AF:loc_40A63D↓o
.text:0040A5AF
.text:0040A5AF FileName        = dword ptr -1Ch
.text:0040A5AF Mode            = dword ptr -18h
.text:0040A5AF dwBytes         = dword ptr -14h
.text:0040A5AF arg_0           = dword ptr  4
.text:0040A5AF arg_4           = dword ptr  8
.text:0040A5AF
.text:0040A5AF                 ja      short $+2
.text:0040A5B1
.text:0040A5B1 loc_40A5B1:                             ; CODE XREF: sub_40A5AF↑j
.text:0040A5B1                 jmp     short loc_40A5C0
.text:0040A5B1 ; ---------------------------------------------------------------------------
.text:0040A5B3                 align 10h
.text:0040A5C0
.text:0040A5C0 loc_40A5C0:                             ; CODE XREF: sub_40A5AF:loc_40A5B1↑j
.text:0040A5C0                 push    edi
.text:0040A5C1                 push    esi
.text:0040A5C2                 push    ebx
.text:0040A5C3                 sub     esp, 10h
.text:0040A5C6                 mov     ebx, [esp+1Ch+arg_0]
.text:0040A5CA                 mov     edx, [esp+1Ch+arg_4]
.text:0040A5CE                 mov     [esp+1Ch+FileName], ebx ; FileName
.text:0040A5D1                 mov     [esp+1Ch+Mode], edx ; Mode
.text:0040A5D5                 call    fopen
.text:0040A5DA                 test    eax, eax
.text:0040A5DC                 mov     edi, eax
.text:0040A5DE                 jz      short loc_40A63D
.text:0040A5E0
.text:0040A5E0 loc_40A5E0:                             ; CODE XREF: sub_40A5AF+A2↓j
.text:0040A5E0                                         ; sub_40A5AF+AB↓j
.text:0040A5E0                 mov     [esp+1Ch+Mode], 0 ; lpBuffer
.text:0040A5E8                 mov     [esp+1Ch+FileName], 0 ; nBufferLength
.text:0040A5EF                 call    GetLogicalDriveStringsA
.text:0040A5F4                 sub     esp, 8
.text:0040A5F7                 mov     esi, eax
.text:0040A5F9                 call    GetProcessHeap
.text:0040A5FE                 mov     [esp+1Ch+FileName], eax ; hHeap
.text:0040A601                 mov     [esp+1Ch+dwBytes], esi ; dwBytes
.text:0040A605                 mov     [esp+1Ch+Mode], 0 ; dwFlags
.text:0040A60D                 call    HeapAlloc
.text:0040A612                 sub     esp, 0Ch
.text:0040A615                 mov     ebx, eax
.text:0040A617                 mov     [esp+1Ch+FileName], esi ; nBufferLength
.text:0040A61A                 mov     [esp+1Ch+Mode], eax ; lpBuffer
.text:0040A61E                 call    GetLogicalDriveStringsA
.text:0040A623                 mov     off_40F054, ebx ; "notset"
.text:0040A629                 sub     esp, 8
.text:0040A62C                 xor     eax, eax
.text:0040A62E                 test    ebx, ebx
.text:0040A630                 setz    al
.text:0040A633                 add     esp, 10h
.text:0040A636                 pop     ebx
.text:0040A637                 dec     eax
.text:0040A638                 and     eax, edi
.text:0040A63A                 pop     esi
.text:0040A63B                 pop     edi
.text:0040A63C                 retn
.text:0040A63D ; ---------------------------------------------------------------------------
.text:0040A63D
.text:0040A63D loc_40A63D:                             ; CODE XREF: sub_40A5AF+2F↑j
.text:0040A63D                 mov     [esp+1Ch+Mode], offset sub_40A5AF ; Mode
.text:0040A645                 mov     [esp+1Ch+FileName], ebx ; FileName
.text:0040A648                 call    fopen
.text:0040A64D                 test    eax, eax
.text:0040A64F                 mov     edi, eax
.text:0040A651                 jnz     short loc_40A5E0
.text:0040A653                 call    sub_40B440
.text:0040A658                 mov     edi, eax
.text:0040A65A                 jmp     short loc_40A5E0
.text:0040A65A sub_40A5AF      endp
.text:0040A65A
.text:0040A65A ; ---------------------------------------------------------------------------
.text:0040A65C                 align 10h
.text:0040A660                 sub     esp, 0Ch
.text:0040A663                 mov     eax, [esp+10h]
.text:0040A667                 test    eax, eax
.text:0040A669                 jz      short loc_40A673
.text:0040A66B                 mov     [esp], eax
.text:0040A66E                 call    fclose
.text:0040A673
.text:0040A673 loc_40A673:                             ; CODE XREF: .text:0040A669↑j
.text:0040A673                 call    GetProcessHeap
.text:0040A678                 mov     [esp], eax
.text:0040A67B                 mov     ecx, off_40F054 ; "notset"
.text:0040A681                 mov     dword ptr [esp+4], 0
.text:0040A689                 mov     [esp+8], ecx
.text:0040A68D                 call    HeapFree
.text:0040A692                 mov     edx, off_40F050 ; "notset"
.text:0040A698                 sub     esp, 0Ch
.text:0040A69B                 mov     eax, 1
.text:0040A6A0                 mov     off_40F054, edx ; "notset"
.text:0040A6A6                 add     esp, 0Ch
.text:0040A6A9                 retn
.text:0040A6A9 ; ---------------------------------------------------------------------------
.text:0040A6AA                 align 10h
.text:0040A6B0                 push    edi
.text:0040A6B1                 push    esi
.text:0040A6B2                 push    ebx
.text:0040A6B3                 sub     esp, 10h
.text:0040A6B6                 mov     edi, [esp+24h]
.text:0040A6BA                 mov     [esp], edi
.text:0040A6BD                 call    strlen
.text:0040A6C2                 mov     edx, [esp+20h]
.text:0040A6C6                 mov     esi, eax
.text:0040A6C8                 mov     ebx, [edx+0Ch]
.text:0040A6CB                 nop
.text:0040A6CC                 lea     esi, [esi+0]
.text:0040A6D0
.text:0040A6D0 loc_40A6D0:                             ; CODE XREF: .text:0040A701↓j
.text:0040A6D0                 mov     [esp+4], edi
.text:0040A6D4                 mov     [esp], ebx
.text:0040A6D7                 call    strstr
.text:0040A6DC                 test    eax, eax
.text:0040A6DE                 jz      short loc_40A703
.text:0040A6E0                 cmp     eax, ebx
.text:0040A6E2                 jz      short loc_40A705
.text:0040A6E4                 cmp     byte ptr [eax-1], 2Ch ; ','
.text:0040A6E8                 jz      short loc_40A710
.text:0040A6EA
.text:0040A6EA loc_40A6EA:                             ; CODE XREF: .text:0040A720↓j
.text:0040A6EA                 mov     [esp], ebx
.text:0040A6ED                 mov     dword ptr [esp+4], 2Ch ; ','
.text:0040A6F5                 call    strchr
.text:0040A6FA                 test    eax, eax
.text:0040A6FC                 mov     ebx, eax
.text:0040A6FE                 jz      short loc_40A703
.text:0040A700                 inc     ebx
.text:0040A701                 jmp     short loc_40A6D0
.text:0040A703 ; ---------------------------------------------------------------------------
.text:0040A703
.text:0040A703 loc_40A703:                             ; CODE XREF: .text:0040A6DE↑j
.text:0040A703                                         ; .text:0040A6FE↑j
.text:0040A703                 xor     eax, eax
.text:0040A705
.text:0040A705 loc_40A705:                             ; CODE XREF: .text:0040A6E2↑j
.text:0040A705                                         ; .text:0040A716↓j ...
.text:0040A705                 add     esp, 10h
.text:0040A708                 pop     ebx
.text:0040A709                 pop     esi
.text:0040A70A                 pop     edi
.text:0040A70B                 retn
.text:0040A70B ; ---------------------------------------------------------------------------
.text:0040A70C                 align 10h
.text:0040A710
.text:0040A710 loc_40A710:                             ; CODE XREF: .text:0040A6E8↑j
.text:0040A710                 movzx   edx, byte ptr [esi+eax]
.text:0040A714                 test    dl, dl
.text:0040A716                 jz      short loc_40A705
.text:0040A718                 cmp     dl, 3Dh ; '='
.text:0040A71B                 jz      short loc_40A705
.text:0040A71D                 cmp     dl, 2Ch ; ','
.text:0040A720                 jnz     short loc_40A6EA
.text:0040A722                 jmp     short loc_40A705
.text:0040A722 ; ---------------------------------------------------------------------------
.text:0040A724                 align 10h
.text:0040A730 ; const char aFxstat64BadFil[]
.text:0040A730 aFxstat64BadFil db '__fxstat64: bad file descriptor %d',0Ah,0
.text:0040A730                                         ; DATA XREF: sub_40A760+7B↓o
.text:0040A754                 align 10h
.text:0040A760
.text:0040A760 ; =============== S U B R O U T I N E =======================================
.text:0040A760
.text:0040A760
.text:0040A760 ; int __cdecl sub_40A760(HANDLE hNamedPipe, int, int)
.text:0040A760 sub_40A760      proc near               ; CODE XREF: .text:00408829↑p
.text:0040A760
.text:0040A760 FileHandle      = dword ptr -1Ch
.text:0040A760 var_18          = dword ptr -18h
.text:0040A760 var_C           = dword ptr -0Ch
.text:0040A760 var_8           = dword ptr -8
.text:0040A760 var_4           = dword ptr -4
.text:0040A760 hNamedPipe      = dword ptr  4
.text:0040A760 arg_4           = dword ptr  8
.text:0040A760 arg_8           = dword ptr  0Ch
.text:0040A760
.text:0040A760                 sub     esp, 1Ch
.text:0040A763                 mov     edx, [esp+1Ch+arg_4]
.text:0040A767                 mov     [esp+1Ch+var_C], ebx
.text:0040A76B                 mov     ebx, [esp+1Ch+hNamedPipe]
.text:0040A76F                 mov     [esp+1Ch+var_8], esi
.text:0040A773                 mov     esi, [esp+1Ch+arg_8]
.text:0040A777                 test    ebx, ebx
.text:0040A779                 mov     [esp+1Ch+var_4], edi
.text:0040A77D                 jnz     short loc_40A7B7
.text:0040A77F                 test    edx, edx
.text:0040A781                 js      short loc_40A7D7
.text:0040A783                 test    esi, esi
.text:0040A785                 jz      short loc_40A7B7
.text:0040A787                 cld
.text:0040A788                 mov     eax, ebx
.text:0040A78A                 mov     edi, esi
.text:0040A78C                 mov     ecx, 18h
.text:0040A791                 rep stosd
.text:0040A793                 mov     [esp+1Ch+arg_4], esi ; int
.text:0040A797                 mov     [esp+1Ch+FileHandle], edx ; FileHandle
.text:0040A79A                 call    _get_osfhandle
.text:0040A79F                 mov     [esp+1Ch+hNamedPipe], eax ; hNamedPipe
.text:0040A7A3                 mov     ebx, [esp+1Ch+var_C]
.text:0040A7A7                 mov     esi, [esp+1Ch+var_8]
.text:0040A7AB                 mov     edi, [esp+1Ch+var_4]
.text:0040A7AF                 add     esp, 1Ch
.text:0040A7B2                 jmp     sub_406620
.text:0040A7B7 ; ---------------------------------------------------------------------------
.text:0040A7B7
.text:0040A7B7 loc_40A7B7:                             ; CODE XREF: sub_40A760+1D↑j
.text:0040A7B7                                         ; sub_40A760+25↑j
.text:0040A7B7                 call    _errno
.text:0040A7BC                 mov     dword ptr [eax], 16h
.text:0040A7C2
.text:0040A7C2 loc_40A7C2:                             ; CODE XREF: sub_40A760+92↓j
.text:0040A7C2                 mov     ebx, [esp+1Ch+var_C]
.text:0040A7C6                 mov     eax, 0FFFFFFFFh
.text:0040A7CB                 mov     esi, [esp+1Ch+var_8]
.text:0040A7CF                 mov     edi, [esp+1Ch+var_4]
.text:0040A7D3                 add     esp, 1Ch
.text:0040A7D6                 retn
.text:0040A7D7 ; ---------------------------------------------------------------------------
.text:0040A7D7
.text:0040A7D7 loc_40A7D7:                             ; CODE XREF: sub_40A760+21↑j
.text:0040A7D7                 mov     [esp+1Ch+var_18], edx
.text:0040A7DB                 mov     [esp+1Ch+FileHandle], offset aFxstat64BadFil ; "__fxstat64: bad file descriptor %d\n"
.text:0040A7E2                 call    printf
.text:0040A7E7                 call    _errno
.text:0040A7EC                 mov     dword ptr [eax], 9
.text:0040A7F2                 jmp     short loc_40A7C2
.text:0040A7F2 sub_40A760      endp
.text:0040A7F2
.text:0040A7F2 ; ---------------------------------------------------------------------------
.text:0040A7F4                 db 1Ch dup(90h)
.text:0040A810 aLuLuLu         db '%lu.%lu.%lu',0      ; DATA XREF: .text:0040AA2F↓o
.text:0040A81C aLu             db '%lu',0              ; DATA XREF: .text:0040AA3F↓o
.text:0040A820 asc_40A820      db ' ',0                ; DATA XREF: .text:loc_40AB28↓o
.text:0040A822                 align 10h
.text:0040A830 aServer40Enterp db 'Server 4.0, Enterprise Edition ',0
.text:0040A830                                         ; DATA XREF: .text:0040AB5F↓o
.text:0040A850 aServer40       db 'Server 4.0 ',0      ; DATA XREF: .text:loc_40AB6D↓o
.text:0040A85C aServer         db ' Server',0          ; DATA XREF: .text:0040AB96↓o
.text:0040A85C                                         ; .text:loc_40AD0E↓o
.text:0040A864 aAdvancedServer db ' Advanced Server',0 ; DATA XREF: .text:loc_40ABA8↓o
.text:0040A875 aDatacenterServ db ' Datacenter Server',0
.text:0040A875                                         ; DATA XREF: .text:loc_40ABB2↓o
.text:0040A888 aStandardEditio db ' Standard Edition',0
.text:0040A888                                         ; DATA XREF: .text:0040ABDA↓o
.text:0040A89A aWebEdition     db ' Web Edition',0     ; DATA XREF: .text:loc_40ABE4↓o
.text:0040A8A7 aEnterpriseEdit db ' Enterprise Edition',0
.text:0040A8A7                                         ; DATA XREF: .text:loc_40ABEE↓o
.text:0040A8BB aDatacenterEdit db ' Datacenter Edition',0
.text:0040A8BB                                         ; DATA XREF: .text:loc_40ABF8↓o
.text:0040A8CF aHomeEdition    db ' Home Edition',0    ; DATA XREF: .text:0040AC0B↓o
.text:0040A8DD aProfessional   db ' Professional',0    ; DATA XREF: .text:loc_40AC15↓o
.text:0040A8DD                                         ; .text:loc_40AD20↓o
.text:0040A8EB                 align 10h
.text:0040A8F0 aSystemCurrentc db 'SYSTEM\CurrentControlSet\Control\ProductOptions',0
.text:0040A8F0                                         ; DATA XREF: .text:0040AC42↓o
.text:0040A920 aProducttype    db 'ProductType',0      ; DATA XREF: .text:0040AC89↓o
.text:0040A92C aWinnt          db 'WINNT',0            ; DATA XREF: .text:0040ACC4↓o
.text:0040A932 aLanmannt       db 'LANMANNT',0         ; DATA XREF: .text:0040ACDB↓o
.text:0040A93B aServernt       db 'SERVERNT',0         ; DATA XREF: .text:0040ACF2↓o
.text:0040A944                 align 10h
.text:0040A950 aMicrosoftWindo db 'Microsoft Windows 3.1 with Win32s ',0
.text:0040A950                                         ; DATA XREF: .text:0040AE67↓o
.text:0040A973                 db 1Dh dup(90h)
.text:0040A990 aMicrosoftWindo_0 db 'Microsoft Windows Millennium Edition ',0
.text:0040A990                                         ; DATA XREF: .text:0040AEC6↓o
.text:0040A9B6 ; ---------------------------------------------------------------------------
.text:0040A9B6
.text:0040A9B6 loc_40A9B6:                             ; DATA XREF: .text:loc_40AF31↓o
.text:0040A9B6                 and     [ebx+45h], dl
.text:0040A9B9                 add     [eax], ah
.text:0040A9BB                 push    ebx
.text:0040A9BC                 push    eax
.text:0040A9BD                 xor     [eax], eax
.text:0040A9BF
.text:0040A9BF loc_40A9BF:                             ; DATA XREF: .text:loc_40AFAB↓o
.text:0040A9BF                 and     [edi+53h], cl
.text:0040A9C2                 push    edx
.text:0040A9C3                 xor     al, [eax]
.text:0040A9C5                 lea     esi, [esi+0]
.text:0040A9C9                 lea     edi, [edi+0]
.text:0040A9D0                 push    edi
.text:0040A9D1                 push    esi
.text:0040A9D2                 push    ebx
.text:0040A9D3                 sub     esp, 130h
.text:0040A9D9                 mov     ebx, [esp+140h]
.text:0040A9E0                 call    sub_40B0E0
.text:0040A9E5                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0040A9EA                 cmp     eax, 1
.text:0040A9ED                 jz      loc_40AE90
.text:0040A9F3                 cmp     eax, 1
.text:0040A9F6                 jb      loc_40AE66
.text:0040A9FC                 cmp     eax, 2
.text:0040A9FF                 jz      loc_40AAB0
.text:0040AA05                 cmp     eax, 3
.text:0040AA08                 jz      short loc_40AA6F
.text:0040AA0A                 lea     esi, [esi+0]
.text:0040AA10
.text:0040AA10 loc_40AA10:                             ; CODE XREF: .text:0040AAA5↓j
.text:0040AA10                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:0040AA16                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0040AA1C
.text:0040AA1C loc_40AA1C:                             ; CODE XREF: .text:0040AEAF↓j
.text:0040AA1C                 mov     [esp+10h], edx
.text:0040AA20                 mov     ebx, [esp+144h]
.text:0040AA27                 mov     [esp+0Ch], ecx
.text:0040AA2B                 mov     [esp+8], eax
.text:0040AA2F                 mov     dword ptr [esp+4], offset aLuLuLu ; "%lu.%lu.%lu"
.text:0040AA37                 mov     [esp], ebx
.text:0040AA3A                 call    sprintf
.text:0040AA3F                 mov     dword ptr [esp+4], offset aLu ; "%lu"
.text:0040AA47                 mov     edi, ds:VersionInformation.dwBuildNumber
.text:0040AA4D                 mov     ecx, [esp+148h]
.text:0040AA54                 mov     [esp+8], edi
.text:0040AA58                 mov     [esp], ecx
.text:0040AA5B                 call    sprintf
.text:0040AA60                 mov     eax, 1
.text:0040AA65
.text:0040AA65 loc_40AA65:                             ; CODE XREF: .text:0040AC5F↓j
.text:0040AA65                                         ; .text:0040ACAC↓j
.text:0040AA65                 add     esp, 130h
.text:0040AA6B                 pop     ebx
.text:0040AA6C                 pop     esi
.text:0040AA6D                 pop     edi
.text:0040AA6E                 retn
.text:0040AA6F ; ---------------------------------------------------------------------------
.text:0040AA6F
.text:0040AA6F loc_40AA6F:                             ; CODE XREF: .text:0040AA08↑j
.text:0040AA6F                 mov     dword ptr [ebx], 7263694Dh
.text:0040AA75                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040AA7C                 mov     dword ptr [ebx+8], 69572074h
.text:0040AA83                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040AA8A                 mov     dword ptr [ebx+10h], 45432073h
.text:0040AA91                 mov     word ptr [ebx+14h], 20h ; ' '
.text:0040AA97                 mov     esi, esi
.text:0040AA99                 lea     edi, [edi+0]
.text:0040AAA0
.text:0040AAA0 loc_40AAA0:                             ; CODE XREF: .text:0040AB48↓j
.text:0040AAA0                                         ; .text:0040AE89↓j ...
.text:0040AAA0                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0040AAA5                 jmp     loc_40AA10
.text:0040AAA5 ; ---------------------------------------------------------------------------
.text:0040AAAA                 align 10h
.text:0040AAB0
.text:0040AAB0 loc_40AAB0:                             ; CODE XREF: .text:0040A9FF↑j
.text:0040AAB0                 mov     edx, ds:VersionInformation.dwMajorVersion
.text:0040AAB6                 cmp     edx, 3
.text:0040AAB9                 mov     eax, edx
.text:0040AABB                 jz      loc_40AE25
.text:0040AAC1
.text:0040AAC1 loc_40AAC1:                             ; CODE XREF: .text:0040AE2C↓j
.text:0040AAC1                 cmp     eax, 4
.text:0040AAC4                 jz      loc_40ADE5
.text:0040AACA
.text:0040AACA loc_40AACA:                             ; CODE XREF: .text:0040ADED↓j
.text:0040AACA                 cmp     eax, 4
.text:0040AACD                 ja      loc_40AD32
.text:0040AAD3                 mov     ecx, ds:VersionInformation.dwMinorVersion
.text:0040AAD9                 test    ecx, ecx
.text:0040AADB                 jnz     loc_40AD32
.text:0040AAE1                 mov     dword ptr [ebx], 7263694Dh
.text:0040AAE7                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040AAEE                 mov     dword ptr [ebx+8], 69572074h
.text:0040AAF5                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040AAFC                 mov     dword ptr [ebx+10h], 544E2073h
.text:0040AB03
.text:0040AB03 loc_40AB03:                             ; CODE XREF: .text:0040ADA5↓j
.text:0040AB03                 mov     byte ptr [ebx+14h], 0
.text:0040AB07
.text:0040AB07 loc_40AB07:                             ; CODE XREF: .text:0040AD35↓j
.text:0040AB07                                         ; .text:0040AD4C↓j ...
.text:0040AB07                 mov     esi, dword_40F060
.text:0040AB0D                 test    esi, esi
.text:0040AB0F                 jz      loc_40AC22
.text:0040AB15                 movzx   eax, ds:byte_4104BA
.text:0040AB1C                 cmp     al, 1
.text:0040AB1E                 jz      loc_40AC02
.text:0040AB24                 cmp     al, 3
.text:0040AB26                 jz      short loc_40AB4D
.text:0040AB28
.text:0040AB28 loc_40AB28:                             ; CODE XREF: .text:0040AB6B↓j
.text:0040AB28                                         ; .text:0040ABA6↓j ...
.text:0040AB28                 mov     dword ptr [esp+4], offset asc_40A820 ; " "
.text:0040AB30                 mov     [esp], ebx
.text:0040AB33                 call    strcat
.text:0040AB38                 mov     dword ptr [esp+4], offset VersionInformation.szCSDVersion
.text:0040AB40                 mov     [esp], ebx
.text:0040AB43                 call    strcat
.text:0040AB48                 jmp     loc_40AAA0
.text:0040AB4D ; ---------------------------------------------------------------------------
.text:0040AB4D
.text:0040AB4D loc_40AB4D:                             ; CODE XREF: .text:0040AB26↑j
.text:0040AB4D                 cmp     ds:VersionInformation.dwMajorVersion, 5
.text:0040AB54                 jz      short loc_40AB76
.text:0040AB56
.text:0040AB56 loc_40AB56:                             ; CODE XREF: .text:0040AB82↓j
.text:0040AB56                 test    byte ptr ds:word_4104B8, 2
.text:0040AB5D                 jz      short loc_40AB6D
.text:0040AB5F                 mov     dword ptr [esp], offset aServer40Enterp ; "Server 4.0, Enterprise Edition "
.text:0040AB66
.text:0040AB66 loc_40AB66:                             ; CODE XREF: .text:0040AB74↓j
.text:0040AB66                 call    printf
.text:0040AB6B                 jmp     short loc_40AB28
.text:0040AB6D ; ---------------------------------------------------------------------------
.text:0040AB6D
.text:0040AB6D loc_40AB6D:                             ; CODE XREF: .text:0040AB5D↑j
.text:0040AB6D                 mov     dword ptr [esp], offset aServer40 ; "Server 4.0 "
.text:0040AB74                 jmp     short loc_40AB66
.text:0040AB76 ; ---------------------------------------------------------------------------
.text:0040AB76
.text:0040AB76 loc_40AB76:                             ; CODE XREF: .text:0040AB54↑j
.text:0040AB76                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0040AB7B                 cmp     eax, 2
.text:0040AB7E                 jz      short loc_40ABC0
.text:0040AB80                 test    eax, eax
.text:0040AB82                 jnz     short loc_40AB56
.text:0040AB84                 cmp     byte ptr ds:word_4104B8, 0
.text:0040AB8B                 js      short loc_40ABB2
.text:0040AB8D                 test    byte ptr ds:word_4104B8, 2
.text:0040AB94                 jnz     short loc_40ABA8
.text:0040AB96                 mov     dword ptr [esp+4], offset aServer ; " Server"
.text:0040AB9E
.text:0040AB9E loc_40AB9E:                             ; CODE XREF: .text:0040ABB0↓j
.text:0040AB9E                                         ; .text:0040ABBA↓j ...
.text:0040AB9E                 mov     [esp], ebx
.text:0040ABA1                 call    strcat
.text:0040ABA6                 jmp     short loc_40AB28
.text:0040ABA8 ; ---------------------------------------------------------------------------
.text:0040ABA8
.text:0040ABA8 loc_40ABA8:                             ; CODE XREF: .text:0040AB94↑j
.text:0040ABA8                                         ; .text:0040AD09↓j
.text:0040ABA8                 mov     dword ptr [esp+4], offset aAdvancedServer ; " Advanced Server"
.text:0040ABB0                 jmp     short loc_40AB9E
.text:0040ABB2 ; ---------------------------------------------------------------------------
.text:0040ABB2
.text:0040ABB2 loc_40ABB2:                             ; CODE XREF: .text:0040AB8B↑j
.text:0040ABB2                 mov     dword ptr [esp+4], offset aDatacenterServ ; " Datacenter Server"
.text:0040ABBA                 jmp     short loc_40AB9E
.text:0040ABBA ; ---------------------------------------------------------------------------
.text:0040ABBC                 align 10h
.text:0040ABC0
.text:0040ABC0 loc_40ABC0:                             ; CODE XREF: .text:0040AB7E↑j
.text:0040ABC0                 cmp     byte ptr ds:word_4104B8, 0
.text:0040ABC7                 js      short loc_40ABF8
.text:0040ABC9                 movzx   eax, ds:word_4104B8
.text:0040ABD0                 test    al, 2
.text:0040ABD2                 jnz     short loc_40ABEE
.text:0040ABD4                 cmp     ax, 400h
.text:0040ABD8                 jz      short loc_40ABE4
.text:0040ABDA                 mov     dword ptr [esp+4], offset aStandardEditio ; " Standard Edition"
.text:0040ABE2                 jmp     short loc_40AB9E
.text:0040ABE4 ; ---------------------------------------------------------------------------
.text:0040ABE4
.text:0040ABE4 loc_40ABE4:                             ; CODE XREF: .text:0040ABD8↑j
.text:0040ABE4                 mov     dword ptr [esp+4], offset aWebEdition ; " Web Edition"
.text:0040ABEC                 jmp     short loc_40AB9E
.text:0040ABEE ; ---------------------------------------------------------------------------
.text:0040ABEE
.text:0040ABEE loc_40ABEE:                             ; CODE XREF: .text:0040ABD2↑j
.text:0040ABEE                 mov     dword ptr [esp+4], offset aEnterpriseEdit ; " Enterprise Edition"
.text:0040ABF6                 jmp     short loc_40AB9E
.text:0040ABF8 ; ---------------------------------------------------------------------------
.text:0040ABF8
.text:0040ABF8 loc_40ABF8:                             ; CODE XREF: .text:0040ABC7↑j
.text:0040ABF8                 mov     dword ptr [esp+4], offset aDatacenterEdit ; " Datacenter Edition"
.text:0040AC00                 jmp     short loc_40AB9E
.text:0040AC02 ; ---------------------------------------------------------------------------
.text:0040AC02
.text:0040AC02 loc_40AC02:                             ; CODE XREF: .text:0040AB1E↑j
.text:0040AC02                 test    byte ptr ds:word_4104B8+1, 2
.text:0040AC09                 jz      short loc_40AC15
.text:0040AC0B                 mov     dword ptr [esp+4], offset aHomeEdition ; " Home Edition"
.text:0040AC13                 jmp     short loc_40AB9E
.text:0040AC15 ; ---------------------------------------------------------------------------
.text:0040AC15
.text:0040AC15 loc_40AC15:                             ; CODE XREF: .text:0040AC09↑j
.text:0040AC15                 mov     dword ptr [esp+4], offset aProfessional ; " Professional"
.text:0040AC1D                 jmp     loc_40AB9E
.text:0040AC22 ; ---------------------------------------------------------------------------
.text:0040AC22
.text:0040AC22 loc_40AC22:                             ; CODE XREF: .text:0040AB0F↑j
.text:0040AC22                 mov     dword ptr [esp+28h], 0FFh
.text:0040AC2A                 lea     edx, [esp+2Ch]
.text:0040AC2E                 mov     [esp+10h], edx
.text:0040AC32                 mov     dword ptr [esp+0Ch], 1
.text:0040AC3A                 mov     dword ptr [esp+8], 0
.text:0040AC42                 mov     dword ptr [esp+4], offset aSystemCurrentc ; "SYSTEM\\CurrentControlSet\\Control\\Pro"...
.text:0040AC4A                 mov     dword ptr [esp], 80000002h
.text:0040AC51                 call    RegOpenKeyExA
.text:0040AC56                 mov     edi, eax
.text:0040AC58                 sub     esp, 14h
.text:0040AC5B                 xor     eax, eax
.text:0040AC5D                 test    edi, edi
.text:0040AC5F                 jnz     loc_40AA65
.text:0040AC65                 mov     dword ptr [esp+0Ch], 0
.text:0040AC6D                 mov     edi, [esp+2Ch]
.text:0040AC71                 lea     esi, [esp+28h]
.text:0040AC75                 mov     [esp+14h], esi
.text:0040AC79                 lea     esi, [esp+30h]
.text:0040AC7D                 mov     [esp+10h], esi
.text:0040AC81                 mov     dword ptr [esp+8], 0
.text:0040AC89                 mov     dword ptr [esp+4], offset aProducttype ; "ProductType"
.text:0040AC91                 mov     [esp], edi
.text:0040AC94                 call    RegQueryValueExA
.text:0040AC99                 sub     esp, 18h
.text:0040AC9C                 test    eax, eax
.text:0040AC9E                 jnz     short loc_40ACAA
.text:0040ACA0                 cmp     dword ptr [esp+28h], 0FFh
.text:0040ACA8                 jbe     short loc_40ACB1
.text:0040ACAA
.text:0040ACAA loc_40ACAA:                             ; CODE XREF: .text:0040AC9E↑j
.text:0040ACAA                 xor     eax, eax
.text:0040ACAC                 jmp     loc_40AA65
.text:0040ACB1 ; ---------------------------------------------------------------------------
.text:0040ACB1
.text:0040ACB1 loc_40ACB1:                             ; CODE XREF: .text:0040ACA8↑j
.text:0040ACB1                 mov     edx, [esp+2Ch]
.text:0040ACB5                 mov     [esp], edx
.text:0040ACB8                 call    RegCloseKey
.text:0040ACBD                 sub     esp, 4
.text:0040ACC0                 mov     [esp+4], esi
.text:0040ACC4                 mov     dword ptr [esp], offset aWinnt ; "WINNT"
.text:0040ACCB                 call    lstrcmpiA
.text:0040ACD0                 sub     esp, 8
.text:0040ACD3                 test    eax, eax
.text:0040ACD5                 jz      short loc_40AD20
.text:0040ACD7
.text:0040ACD7 loc_40ACD7:                             ; CODE XREF: .text:0040AD30↓j
.text:0040ACD7                 mov     [esp+4], esi
.text:0040ACDB                 mov     dword ptr [esp], offset aLanmannt ; "LANMANNT"
.text:0040ACE2                 call    lstrcmpiA
.text:0040ACE7                 sub     esp, 8
.text:0040ACEA                 test    eax, eax
.text:0040ACEC                 jz      short loc_40AD0E
.text:0040ACEE
.text:0040ACEE loc_40ACEE:                             ; CODE XREF: .text:0040AD1E↓j
.text:0040ACEE                 mov     [esp+4], esi
.text:0040ACF2                 mov     dword ptr [esp], offset aServernt ; "SERVERNT"
.text:0040ACF9                 call    lstrcmpiA
.text:0040ACFE                 sub     esp, 8
.text:0040AD01                 test    eax, eax
.text:0040AD03                 jnz     loc_40AB28
.text:0040AD09                 jmp     loc_40ABA8
.text:0040AD0E ; ---------------------------------------------------------------------------
.text:0040AD0E
.text:0040AD0E loc_40AD0E:                             ; CODE XREF: .text:0040ACEC↑j
.text:0040AD0E                 mov     dword ptr [esp+4], offset aServer ; " Server"
.text:0040AD16                 mov     [esp], ebx
.text:0040AD19                 call    strcat
.text:0040AD1E                 jmp     short loc_40ACEE
.text:0040AD20 ; ---------------------------------------------------------------------------
.text:0040AD20
.text:0040AD20 loc_40AD20:                             ; CODE XREF: .text:0040ACD5↑j
.text:0040AD20                 mov     dword ptr [esp+4], offset aProfessional ; " Professional"
.text:0040AD28                 mov     [esp], ebx
.text:0040AD2B                 call    strcat
.text:0040AD30                 jmp     short loc_40ACD7
.text:0040AD32 ; ---------------------------------------------------------------------------
.text:0040AD32
.text:0040AD32 loc_40AD32:                             ; CODE XREF: .text:0040AACD↑j
.text:0040AD32                                         ; .text:0040AADB↑j
.text:0040AD32                 cmp     eax, 5
.text:0040AD35                 jnz     loc_40AB07
.text:0040AD3B                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0040AD40                 cmp     eax, 2
.text:0040AD43                 jz      short loc_40ADAA
.text:0040AD45                 cmp     eax, 1
.text:0040AD48                 jz      short loc_40AD83
.text:0040AD4A                 test    eax, eax
.text:0040AD4C                 jnz     loc_40AB07
.text:0040AD52                 mov     dword ptr [ebx], 7263694Dh
.text:0040AD58                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040AD5F                 mov     dword ptr [ebx+8], 69572074h
.text:0040AD66                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040AD6D                 mov     dword ptr [ebx+10h], 30322073h
.text:0040AD74                 mov     word ptr [ebx+14h], 3030h
.text:0040AD7A                 mov     byte ptr [ebx+16h], 0
.text:0040AD7E                 jmp     loc_40AB07
.text:0040AD83 ; ---------------------------------------------------------------------------
.text:0040AD83
.text:0040AD83 loc_40AD83:                             ; CODE XREF: .text:0040AD48↑j
.text:0040AD83                 mov     dword ptr [ebx], 7263694Dh
.text:0040AD89                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040AD90                 mov     dword ptr [ebx+8], 69572074h
.text:0040AD97                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040AD9E                 mov     dword ptr [ebx+10h], 50582073h
.text:0040ADA5                 jmp     loc_40AB03
.text:0040ADAA ; ---------------------------------------------------------------------------
.text:0040ADAA
.text:0040ADAA loc_40ADAA:                             ; CODE XREF: .text:0040AD43↑j
.text:0040ADAA                 mov     dword ptr [ebx], 7263694Dh
.text:0040ADB0                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040ADB7                 mov     dword ptr [ebx+8], 69572074h
.text:0040ADBE                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040ADC5                 mov     dword ptr [ebx+10h], 65532073h
.text:0040ADCC                 mov     dword ptr [ebx+14h], 72657672h
.text:0040ADD3                 mov     dword ptr [ebx+18h], 30303220h
.text:0040ADDA                 mov     word ptr [ebx+1Ch], 33h ; '3'
.text:0040ADE0                 jmp     loc_40AB07
.text:0040ADE5 ; ---------------------------------------------------------------------------
.text:0040ADE5
.text:0040ADE5 loc_40ADE5:                             ; CODE XREF: .text:0040AAC4↑j
.text:0040ADE5                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0040ADEB                 test    edx, edx
.text:0040ADED                 jnz     loc_40AACA
.text:0040ADF3                 mov     dword ptr [ebx], 7263694Dh
.text:0040ADF9                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040AE00                 mov     dword ptr [ebx+8], 69572074h
.text:0040AE07                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040AE0E                 mov     dword ptr [ebx+10h], 544E2073h
.text:0040AE15                 mov     dword ptr [ebx+14h], 302E3420h
.text:0040AE1C                 mov     byte ptr [ebx+18h], 0
.text:0040AE20                 jmp     loc_40AB07
.text:0040AE25 ; ---------------------------------------------------------------------------
.text:0040AE25
.text:0040AE25 loc_40AE25:                             ; CODE XREF: .text:0040AABB↑j
.text:0040AE25                 cmp     ds:VersionInformation.dwMinorVersion, 33h ; '3'
.text:0040AE2C                 jnz     loc_40AAC1
.text:0040AE32                 mov     dword ptr [ebx], 7263694Dh
.text:0040AE38                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040AE3F                 mov     dword ptr [ebx+8], 69572074h
.text:0040AE46                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040AE4D                 mov     dword ptr [ebx+10h], 544E2073h
.text:0040AE54                 mov     dword ptr [ebx+14h], 352E3320h
.text:0040AE5B                 mov     word ptr [ebx+18h], 31h ; '1'
.text:0040AE61                 jmp     loc_40AB07
.text:0040AE66 ; ---------------------------------------------------------------------------
.text:0040AE66
.text:0040AE66 loc_40AE66:                             ; CODE XREF: .text:0040A9F6↑j
.text:0040AE66                 cld
.text:0040AE67                 mov     esi, offset aMicrosoftWindo ; "Microsoft Windows 3.1 with Win32s "
.text:0040AE6C                 mov     ecx, 8
.text:0040AE71                 movzx   edx, byte ptr ds:aMicrosoftWindo+22h ; ""
.text:0040AE78                 mov     edi, ebx
.text:0040AE7A                 rep movsd
.text:0040AE7C                 movzx   esi, word ptr ds:aMicrosoftWindo+20h ; "s "
.text:0040AE83                 mov     [edi+2], dl
.text:0040AE86                 mov     [edi], si
.text:0040AE89                 jmp     loc_40AAA0
.text:0040AE89 ; ---------------------------------------------------------------------------
.text:0040AE8E                 align 10h
.text:0040AE90
.text:0040AE90 loc_40AE90:                             ; CODE XREF: .text:0040A9ED↑j
.text:0040AE90                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:0040AE96                 cmp     ecx, 4
.text:0040AE99                 jz      loc_40AF50
.text:0040AE9F
.text:0040AE9F loc_40AE9F:                             ; CODE XREF: .text:0040AFA6↓j
.text:0040AE9F                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0040AEA5
.text:0040AEA5 loc_40AEA5:                             ; CODE XREF: .text:0040AF58↓j
.text:0040AEA5                 cmp     ecx, 4
.text:0040AEA8                 jz      short loc_40AEB4
.text:0040AEAA
.text:0040AEAA loc_40AEAA:                             ; CODE XREF: .text:0040AEBC↓j
.text:0040AEAA                                         ; .text:0040AEC1↓j
.text:0040AEAA                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0040AEAF                 jmp     loc_40AA1C
.text:0040AEB4 ; ---------------------------------------------------------------------------
.text:0040AEB4
.text:0040AEB4 loc_40AEB4:                             ; CODE XREF: .text:0040AEA8↑j
.text:0040AEB4                 cmp     edx, 0Ah
.text:0040AEB7                 jz      short loc_40AEE1
.text:0040AEB9
.text:0040AEB9 loc_40AEB9:                             ; CODE XREF: .text:0040AF2F↓j
.text:0040AEB9                 cmp     ecx, 4
.text:0040AEBC                 jnz     short loc_40AEAA
.text:0040AEBE                 cmp     edx, 5Ah ; 'Z'
.text:0040AEC1                 jnz     short loc_40AEAA
.text:0040AEC3                 cld
.text:0040AEC4                 mov     edi, ebx
.text:0040AEC6                 mov     esi, offset aMicrosoftWindo_0 ; "Microsoft Windows Millennium Edition "
.text:0040AECB                 movzx   ebx, word ptr ds:aMicrosoftWindo_0+24h ; " "
.text:0040AED2                 mov     ecx, 9
.text:0040AED7                 rep movsd
.text:0040AED9                 mov     [edi], bx
.text:0040AEDC                 jmp     loc_40AAA0
.text:0040AEE1 ; ---------------------------------------------------------------------------
.text:0040AEE1
.text:0040AEE1 loc_40AEE1:                             ; CODE XREF: .text:0040AEB7↑j
.text:0040AEE1                 mov     dword ptr [ebx], 7263694Dh
.text:0040AEE7                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040AEEE                 mov     dword ptr [ebx+8], 69572074h
.text:0040AEF5                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040AEFC                 mov     dword ptr [ebx+10h], 38392073h
.text:0040AF03                 mov     byte ptr [ebx+14h], 0
.text:0040AF07                 mov     edx, ds:VersionInformation.dwBuildNumber
.text:0040AF0D                 lea     edi, [edx-7CFh]
.text:0040AF13                 cmp     edi, 0B7h ; '·'
.text:0040AF19                 jbe     short loc_40AF43
.text:0040AF1B                 cmp     edx, 886h
.text:0040AF21                 ja      short loc_40AF31
.text:0040AF23
.text:0040AF23 loc_40AF23:                             ; CODE XREF: .text:0040AF41↓j
.text:0040AF23                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:0040AF29                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0040AF2F                 jmp     short loc_40AEB9
.text:0040AF31 ; ---------------------------------------------------------------------------
.text:0040AF31
.text:0040AF31 loc_40AF31:                             ; CODE XREF: .text:0040AF21↑j
.text:0040AF31                 mov     dword ptr [esp+4], offset loc_40A9B6
.text:0040AF39
.text:0040AF39 loc_40AF39:                             ; CODE XREF: .text:0040AF4B↓j
.text:0040AF39                 mov     [esp], ebx
.text:0040AF3C                 call    strcat
.text:0040AF41                 jmp     short loc_40AF23
.text:0040AF43 ; ---------------------------------------------------------------------------
.text:0040AF43
.text:0040AF43 loc_40AF43:                             ; CODE XREF: .text:0040AF19↑j
.text:0040AF43                 mov     dword ptr [esp+4], 40A9BAh
.text:0040AF4B                 jmp     short loc_40AF39
.text:0040AF4B ; ---------------------------------------------------------------------------
.text:0040AF4D                 align 10h
.text:0040AF50
.text:0040AF50 loc_40AF50:                             ; CODE XREF: .text:0040AE99↑j
.text:0040AF50                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0040AF56                 test    edx, edx
.text:0040AF58                 jnz     loc_40AEA5
.text:0040AF5E                 mov     dword ptr [ebx], 7263694Dh
.text:0040AF64                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040AF6B                 mov     dword ptr [ebx+8], 69572074h
.text:0040AF72                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040AF79                 mov     dword ptr [ebx+10h], 35392073h
.text:0040AF80                 mov     byte ptr [ebx+14h], 0
.text:0040AF84                 mov     edx, ds:VersionInformation.dwBuildNumber
.text:0040AF8A                 lea     ecx, [edx-3B7h]
.text:0040AF90                 cmp     ecx, 81h
.text:0040AF96                 jbe     short loc_40AFBD
.text:0040AF98                 cmp     edx, 438h
.text:0040AF9E                 ja      short loc_40AFAB
.text:0040AFA0
.text:0040AFA0 loc_40AFA0:                             ; CODE XREF: .text:0040AFBB↓j
.text:0040AFA0                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:0040AFA6                 jmp     loc_40AE9F
.text:0040AFAB ; ---------------------------------------------------------------------------
.text:0040AFAB
.text:0040AFAB loc_40AFAB:                             ; CODE XREF: .text:0040AF9E↑j
.text:0040AFAB                 mov     dword ptr [esp+4], offset loc_40A9BF
.text:0040AFB3
.text:0040AFB3 loc_40AFB3:                             ; CODE XREF: .text:0040AFC5↓j
.text:0040AFB3                 mov     [esp], ebx
.text:0040AFB6                 call    strcat
.text:0040AFBB                 jmp     short loc_40AFA0
.text:0040AFBD ; ---------------------------------------------------------------------------
.text:0040AFBD
.text:0040AFBD loc_40AFBD:                             ; CODE XREF: .text:0040AF96↑j
.text:0040AFBD                 mov     dword ptr [esp+4], 40A9BAh
.text:0040AFC5                 jmp     short loc_40AFB3
.text:0040AFC5 ; ---------------------------------------------------------------------------
.text:0040AFC7                 align 10h
.text:0040AFD0
.text:0040AFD0 ; =============== S U B R O U T I N E =======================================
.text:0040AFD0
.text:0040AFD0
.text:0040AFD0 sub_40AFD0      proc near               ; CODE XREF: .text:00408A8E↑p
.text:0040AFD0                                         ; sub_408F10+12A↑p
.text:0040AFD0                 sub     esp, 0Ch
.text:0040AFD3                 call    sub_40B0E0
.text:0040AFD8                 mov     eax, ds:dword_410410
.text:0040AFDD                 add     esp, 0Ch
.text:0040AFE0                 retn
.text:0040AFE0 sub_40AFD0      endp
.text:0040AFE0
.text:0040AFE1 ; ---------------------------------------------------------------------------
.text:0040AFE1                 jmp     short loc_40AFF0
.text:0040AFE1 ; ---------------------------------------------------------------------------
.text:0040AFE3                 align 10h
.text:0040AFF0
.text:0040AFF0 loc_40AFF0:                             ; CODE XREF: .text:0040AFE1↑j
.text:0040AFF0                 sub     esp, 0Ch
.text:0040AFF3                 call    sub_40B0E0
.text:0040AFF8                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0040AFFD                 add     esp, 0Ch
.text:0040B000                 retn
.text:0040B001 ; ---------------------------------------------------------------------------
.text:0040B001                 jmp     short loc_40B010
.text:0040B001 ; ---------------------------------------------------------------------------
.text:0040B003                 align 10h
.text:0040B010
.text:0040B010 loc_40B010:                             ; CODE XREF: .text:0040B001↑j
.text:0040B010                 sub     esp, 0Ch
.text:0040B013                 call    sub_40B0E0
.text:0040B018                 mov     eax, ds:VersionInformation.dwMajorVersion
.text:0040B01D                 add     esp, 0Ch
.text:0040B020                 retn
.text:0040B021 ; ---------------------------------------------------------------------------
.text:0040B021                 jmp     short loc_40B030
.text:0040B021 ; ---------------------------------------------------------------------------
.text:0040B023                 align 10h
.text:0040B030
.text:0040B030 loc_40B030:                             ; CODE XREF: .text:0040B021↑j
.text:0040B030                 sub     esp, 0Ch
.text:0040B033                 call    sub_40B0E0
.text:0040B038                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0040B03D                 add     esp, 0Ch
.text:0040B040                 retn
.text:0040B041 ; ---------------------------------------------------------------------------
.text:0040B041                 jmp     short loc_40B050
.text:0040B041 ; ---------------------------------------------------------------------------
.text:0040B043                 align 10h
.text:0040B050
.text:0040B050 loc_40B050:                             ; CODE XREF: .text:0040B041↑j
.text:0040B050                 sub     esp, 0Ch
.text:0040B053                 call    GetVersion
.text:0040B058                 shr     eax, 10h
.text:0040B05B                 add     esp, 0Ch
.text:0040B05E                 retn
.text:0040B05E ; ---------------------------------------------------------------------------
.text:0040B05F                 align 10h
.text:0040B060                 sub     esp, 0Ch
.text:0040B063                 call    sub_40B0E0
.text:0040B068                 xor     eax, eax
.text:0040B06A                 cmp     ds:VersionInformation.dwPlatformId, 2
.text:0040B071                 setz    al
.text:0040B074                 add     esp, 0Ch
.text:0040B077                 retn
.text:0040B077 ; ---------------------------------------------------------------------------
.text:0040B078                 align 10h
.text:0040B080
.text:0040B080 ; =============== S U B R O U T I N E =======================================
.text:0040B080
.text:0040B080
.text:0040B080 sub_40B080      proc near               ; CODE XREF: .text:loc_408A74↑p
.text:0040B080                                         ; .text:00408A85↑p ...
.text:0040B080                 sub     esp, 0Ch
.text:0040B083                 call    sub_40B0E0
.text:0040B088                 xor     eax, eax
.text:0040B08A                 cmp     ds:VersionInformation.dwPlatformId, 1
.text:0040B091                 setz    al
.text:0040B094                 add     esp, 0Ch
.text:0040B097                 retn
.text:0040B097 sub_40B080      endp
.text:0040B097
.text:0040B097 ; ---------------------------------------------------------------------------
.text:0040B098                 align 10h
.text:0040B0A0                 sub     esp, 0Ch
.text:0040B0A3                 call    sub_40B0E0
.text:0040B0A8                 xor     eax, eax
.text:0040B0AA                 cmp     ds:VersionInformation.dwPlatformId, 0
.text:0040B0B1                 setz    al
.text:0040B0B4                 add     esp, 0Ch
.text:0040B0B7                 retn
.text:0040B0B7 ; ---------------------------------------------------------------------------
.text:0040B0B8                 align 10h
.text:0040B0C0                 sub     esp, 0Ch
.text:0040B0C3                 call    sub_40B0E0
.text:0040B0C8                 xor     eax, eax
.text:0040B0CA                 cmp     ds:VersionInformation.dwPlatformId, 3
.text:0040B0D1                 setz    al
.text:0040B0D4                 add     esp, 0Ch
.text:0040B0D7                 retn
.text:0040B0D7 ; ---------------------------------------------------------------------------
.text:0040B0D8                 align 10h
.text:0040B0E0
.text:0040B0E0 ; =============== S U B R O U T I N E =======================================
.text:0040B0E0
.text:0040B0E0
.text:0040B0E0 sub_40B0E0      proc near               ; CODE XREF: .text:0040A9E0↑p
.text:0040B0E0                                         ; sub_40AFD0+3↑p ...
.text:0040B0E0
.text:0040B0E0 lpVersionInformation= dword ptr -0BCh
.text:0040B0E0 VersionInformation= _OSVERSIONINFOA ptr -0ACh
.text:0040B0E0
.text:0040B0E0                 sub     esp, 0BCh
.text:0040B0E6                 mov     edx, ds:dword_4104C0
.text:0040B0EC                 test    edx, edx
.text:0040B0EE                 jz      short loc_40B100
.text:0040B0F0
.text:0040B0F0 loc_40B0F0:                             ; CODE XREF: sub_40B0E0+7B↓j
.text:0040B0F0                 mov     edx, 1
.text:0040B0F5
.text:0040B0F5 loc_40B0F5:                             ; CODE XREF: sub_40B0E0+217↓j
.text:0040B0F5                 mov     eax, edx
.text:0040B0F7                 add     esp, 0BCh
.text:0040B0FD                 retn
.text:0040B0FD ; ---------------------------------------------------------------------------
.text:0040B0FE                 align 10h
.text:0040B100
.text:0040B100 loc_40B100:                             ; CODE XREF: sub_40B0E0+E↑j
.text:0040B100                 mov     [esp+0BCh+lpVersionInformation], offset VersionInformation ; lpVersionInformation
.text:0040B107                 mov     edx, 9Ch ; 'œ'
.text:0040B10C                 mov     ds:VersionInformation.dwOSVersionInfoSize, edx
.text:0040B112                 call    GetVersionExA
.text:0040B117                 sub     esp, 4
.text:0040B11A                 test    eax, eax
.text:0040B11C                 jz      loc_40B2D4
.text:0040B122
.text:0040B122 loc_40B122:                             ; CODE XREF: sub_40B0E0+245↓j
.text:0040B122                 movzx   edx, word ptr ds:VersionInformation.dwBuildNumber
.text:0040B129                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0040B12E                 cmp     eax, 1
.text:0040B131                 mov     ds:VersionInformation.dwBuildNumber, edx
.text:0040B137                 jz      loc_40B220
.text:0040B13D                 cmp     eax, 1
.text:0040B140                 jb      loc_40B210
.text:0040B146                 cmp     eax, 2
.text:0040B149                 jz      short loc_40B16A
.text:0040B14B                 cmp     eax, 3
.text:0040B14E                 jz      short loc_40B15D
.text:0040B150
.text:0040B150 loc_40B150:                             ; CODE XREF: sub_40B0E0+88↓j
.text:0040B150                                         ; sub_40B0E0+C0↓j ...
.text:0040B150                 mov     edx, 1
.text:0040B155                 mov     ds:dword_4104C0, edx
.text:0040B15B                 jmp     short loc_40B0F0
.text:0040B15D ; ---------------------------------------------------------------------------
.text:0040B15D
.text:0040B15D loc_40B15D:                             ; CODE XREF: sub_40B0E0+6E↑j
.text:0040B15D                 mov     ecx, 17h
.text:0040B162
.text:0040B162 loc_40B162:                             ; CODE XREF: sub_40B0E0+1A7↓j
.text:0040B162                 mov     ds:dword_410410, ecx
.text:0040B168                 jmp     short loc_40B150
.text:0040B16A ; ---------------------------------------------------------------------------
.text:0040B16A
.text:0040B16A loc_40B16A:                             ; CODE XREF: sub_40B0E0+69↑j
.text:0040B16A                 mov     eax, ds:VersionInformation.dwMajorVersion
.text:0040B16F                 cmp     eax, 3
.text:0040B172                 jz      short loc_40B1EB
.text:0040B174                 cmp     eax, 4
.text:0040B177                 jz      short loc_40B1DA
.text:0040B179
.text:0040B179 loc_40B179:                             ; CODE XREF: sub_40B0E0+102↓j
.text:0040B179                 cmp     eax, 4
.text:0040B17C                 ja      short loc_40B1A2
.text:0040B17E                 mov     ecx, ds:VersionInformation.dwMinorVersion
.text:0040B184                 test    ecx, ecx
.text:0040B186                 jnz     short loc_40B1A2
.text:0040B188                 mov     edx, 1Eh
.text:0040B18D
.text:0040B18D loc_40B18D:                             ; CODE XREF: sub_40B0E0+DF↓j
.text:0040B18D                 mov     ds:dword_410410, edx
.text:0040B193
.text:0040B193 loc_40B193:                             ; CODE XREF: sub_40B0E0+C5↓j
.text:0040B193                                         ; sub_40B0E0+D8↓j ...
.text:0040B193                 movzx   ecx, ds:word_4104B4
.text:0040B19A                 add     ds:dword_410410, ecx
.text:0040B1A0                 jmp     short loc_40B150
.text:0040B1A2 ; ---------------------------------------------------------------------------
.text:0040B1A2
.text:0040B1A2 loc_40B1A2:                             ; CODE XREF: sub_40B0E0+9C↑j
.text:0040B1A2                                         ; sub_40B0E0+A6↑j
.text:0040B1A2                 cmp     eax, 5
.text:0040B1A5                 jnz     short loc_40B193
.text:0040B1A7                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0040B1AC                 cmp     eax, 2
.text:0040B1AF                 jz      short loc_40B1CE
.text:0040B1B1                 cmp     eax, 1
.text:0040B1B4                 jz      short loc_40B1C1
.text:0040B1B6                 test    eax, eax
.text:0040B1B8                 jnz     short loc_40B193
.text:0040B1BA                 mov     edx, 32h ; '2'
.text:0040B1BF                 jmp     short loc_40B18D
.text:0040B1C1 ; ---------------------------------------------------------------------------
.text:0040B1C1
.text:0040B1C1 loc_40B1C1:                             ; CODE XREF: sub_40B0E0+D4↑j
.text:0040B1C1                 mov     ecx, 3Ch ; '<'
.text:0040B1C6
.text:0040B1C6 loc_40B1C6:                             ; CODE XREF: sub_40B0E0+122↓j
.text:0040B1C6                 mov     ds:dword_410410, ecx
.text:0040B1CC                 jmp     short loc_40B193
.text:0040B1CE ; ---------------------------------------------------------------------------
.text:0040B1CE
.text:0040B1CE loc_40B1CE:                             ; CODE XREF: sub_40B0E0+CF↑j
.text:0040B1CE                 mov     eax, 46h ; 'F'
.text:0040B1D3
.text:0040B1D3 loc_40B1D3:                             ; CODE XREF: sub_40B0E0+109↓j
.text:0040B1D3                                         ; sub_40B0E0+129↓j
.text:0040B1D3                 mov     ds:dword_410410, eax
.text:0040B1D8                 jmp     short loc_40B193
.text:0040B1DA ; ---------------------------------------------------------------------------
.text:0040B1DA
.text:0040B1DA loc_40B1DA:                             ; CODE XREF: sub_40B0E0+97↑j
.text:0040B1DA                 mov     ecx, ds:VersionInformation.dwMinorVersion
.text:0040B1E0                 test    ecx, ecx
.text:0040B1E2                 jnz     short loc_40B179
.text:0040B1E4                 mov     eax, 28h ; '('
.text:0040B1E9                 jmp     short loc_40B1D3
.text:0040B1EB ; ---------------------------------------------------------------------------
.text:0040B1EB
.text:0040B1EB loc_40B1EB:                             ; CODE XREF: sub_40B0E0+92↑j
.text:0040B1EB                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0040B1F0                 cmp     eax, 33h ; '3'
.text:0040B1F3                 jz      short loc_40B204
.text:0040B1F5                 cmp     eax, 5
.text:0040B1F8                 setz    cl
.text:0040B1FB                 movzx   edx, cl
.text:0040B1FE                 lea     ecx, [edx+edx*4+1Eh]
.text:0040B202                 jmp     short loc_40B1C6
.text:0040B204 ; ---------------------------------------------------------------------------
.text:0040B204
.text:0040B204 loc_40B204:                             ; CODE XREF: sub_40B0E0+113↑j
.text:0040B204                 mov     eax, 24h ; '$'
.text:0040B209                 jmp     short loc_40B1D3
.text:0040B209 ; ---------------------------------------------------------------------------
.text:0040B20B                 align 10h
.text:0040B210
.text:0040B210 loc_40B210:                             ; CODE XREF: sub_40B0E0+60↑j
.text:0040B210                 mov     edx, 2
.text:0040B215                 mov     ds:dword_410410, edx
.text:0040B21B                 jmp     loc_40B150
.text:0040B220 ; ---------------------------------------------------------------------------
.text:0040B220
.text:0040B220 loc_40B220:                             ; CODE XREF: sub_40B0E0+57↑j
.text:0040B220                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:0040B226                 cmp     ecx, 4
.text:0040B229                 jnz     loc_40B150
.text:0040B22F                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0040B234                 test    eax, eax
.text:0040B236                 jnz     short loc_40B25A
.text:0040B238                 mov     eax, 0Ah
.text:0040B23D                 mov     ds:dword_410410, eax
.text:0040B242                 lea     eax, [edx-3B7h]
.text:0040B248                 cmp     eax, 81h
.text:0040B24D                 ja      short loc_40B2C5
.text:0040B24F                 mov     edx, 0Bh
.text:0040B254
.text:0040B254 loc_40B254:                             ; CODE XREF: sub_40B0E0+1F2↓j
.text:0040B254                 mov     ds:dword_410410, edx
.text:0040B25A
.text:0040B25A loc_40B25A:                             ; CODE XREF: sub_40B0E0+156↑j
.text:0040B25A                                         ; sub_40B0E0+1EB↓j
.text:0040B25A                 cmp     ecx, 4
.text:0040B25D                 jnz     loc_40B150
.text:0040B263                 cmp     ds:VersionInformation.dwMinorVersion, 0Ah
.text:0040B26A                 jz      short loc_40B28C
.text:0040B26C
.text:0040B26C loc_40B26C:                             ; CODE XREF: sub_40B0E0+1D4↓j
.text:0040B26C                                         ; sub_40B0E0+1DC↓j
.text:0040B26C                 cmp     ecx, 4
.text:0040B26F                 jnz     loc_40B150
.text:0040B275                 cmp     ds:VersionInformation.dwMinorVersion, 5Ah ; 'Z'
.text:0040B27C                 jnz     loc_40B150
.text:0040B282                 mov     ecx, 12h
.text:0040B287                 jmp     loc_40B162
.text:0040B28C ; ---------------------------------------------------------------------------
.text:0040B28C
.text:0040B28C loc_40B28C:                             ; CODE XREF: sub_40B0E0+18A↑j
.text:0040B28C                 mov     edx, ds:VersionInformation.dwBuildNumber
.text:0040B292                 mov     eax, 0Eh
.text:0040B297                 mov     ds:dword_410410, eax
.text:0040B29C                 lea     eax, [edx-7CFh]
.text:0040B2A2                 cmp     eax, 0B7h ; '·'
.text:0040B2A7                 ja      short loc_40B2B6
.text:0040B2A9                 mov     edx, 0Fh
.text:0040B2AE
.text:0040B2AE loc_40B2AE:                             ; CODE XREF: sub_40B0E0+1E3↓j
.text:0040B2AE                 mov     ds:dword_410410, edx
.text:0040B2B4                 jmp     short loc_40B26C
.text:0040B2B6 ; ---------------------------------------------------------------------------
.text:0040B2B6
.text:0040B2B6 loc_40B2B6:                             ; CODE XREF: sub_40B0E0+1C7↑j
.text:0040B2B6                 cmp     edx, 886h
.text:0040B2BC                 jbe     short loc_40B26C
.text:0040B2BE                 mov     edx, 10h
.text:0040B2C3                 jmp     short loc_40B2AE
.text:0040B2C5 ; ---------------------------------------------------------------------------
.text:0040B2C5
.text:0040B2C5 loc_40B2C5:                             ; CODE XREF: sub_40B0E0+16D↑j
.text:0040B2C5                 cmp     edx, 438h
.text:0040B2CB                 jbe     short loc_40B25A
.text:0040B2CD                 mov     edx, 0Ch
.text:0040B2D2                 jmp     short loc_40B254
.text:0040B2D4 ; ---------------------------------------------------------------------------
.text:0040B2D4
.text:0040B2D4 loc_40B2D4:                             ; CODE XREF: sub_40B0E0+3C↑j
.text:0040B2D4                 mov     [esp+0BCh+VersionInformation.dwOSVersionInfoSize], 94h ; '”'
.text:0040B2DC                 xor     edx, edx
.text:0040B2DE                 lea     ecx, [esp+0BCh+VersionInformation]
.text:0040B2E2                 mov     dword_40F060, edx
.text:0040B2E8                 mov     [esp+0BCh+lpVersionInformation], ecx ; lpVersionInformation
.text:0040B2EB                 call    GetVersionExA
.text:0040B2F0                 sub     esp, 4
.text:0040B2F3                 xor     edx, edx
.text:0040B2F5                 test    eax, eax
.text:0040B2F7                 jz      loc_40B0F5
.text:0040B2FD                 mov     edx, [esp+0BCh+VersionInformation.dwMajorVersion]
.text:0040B301                 mov     ecx, [esp+0BCh+VersionInformation.dwMinorVersion]
.text:0040B305                 mov     ds:VersionInformation.dwMajorVersion, edx
.text:0040B30B                 mov     edx, [esp+0BCh+VersionInformation.dwBuildNumber]
.text:0040B30F                 mov     ds:VersionInformation.dwMinorVersion, ecx
.text:0040B315                 mov     ecx, [esp+0BCh+VersionInformation.dwPlatformId]
.text:0040B319                 mov     ds:VersionInformation.dwBuildNumber, edx
.text:0040B31F                 mov     ds:VersionInformation.dwPlatformId, ecx
.text:0040B325                 jmp     loc_40B122
.text:0040B325 sub_40B0E0      endp
.text:0040B325
.text:0040B325 ; ---------------------------------------------------------------------------
.text:0040B32A                 align 10h
.text:0040B330
.text:0040B330 ; =============== S U B R O U T I N E =======================================
.text:0040B330
.text:0040B330 ; Attributes: noreturn
.text:0040B330
.text:0040B330 sub_40B330      proc near               ; CODE XREF: .text:00409F19↑p
.text:0040B330                                         ; sub_40B330↓j
.text:0040B330                 jmp     short sub_40B330
.text:0040B330 sub_40B330      endp
.text:0040B330
.text:0040B330 ; ---------------------------------------------------------------------------
.text:0040B332                 align 10h
.text:0040B340
.text:0040B340 ; =============== S U B R O U T I N E =======================================
.text:0040B340
.text:0040B340
.text:0040B340 sub_40B340      proc near               ; CODE XREF: .text:00409C75↑p
.text:0040B340
.text:0040B340 FileHandle      = dword ptr -1Ch
.text:0040B340 dwFileOffsetLow = dword ptr -18h
.text:0040B340 dwFileOffsetHigh= dword ptr -14h
.text:0040B340 nNumberOfBytesToUnlockLow= dword ptr -10h
.text:0040B340 nNumberOfBytesToUnlockHigh= dword ptr -0Ch
.text:0040B340 var_8           = dword ptr -8
.text:0040B340 var_4           = dword ptr -4
.text:0040B340 arg_0           = dword ptr  4
.text:0040B340
.text:0040B340                 sub     esp, 1Ch
.text:0040B343                 mov     edx, [esp+1Ch+arg_0]
.text:0040B347                 mov     [esp+1Ch+var_4], esi
.text:0040B34B                 mov     [esp+1Ch+var_8], ebx
.text:0040B34F                 mov     ebx, [edx+10h]
.text:0040B352                 mov     [esp+1Ch+FileHandle], ebx ; FileHandle
.text:0040B355                 call    _get_osfhandle
.text:0040B35A                 mov     [esp+1Ch+FileHandle], ebx ; FileHandle
.text:0040B35D                 mov     esi, eax
.text:0040B35F                 call    _filelengthi64
.text:0040B364                 mov     [esp+1Ch+nNumberOfBytesToUnlockLow], eax ; nNumberOfBytesToUnlockLow
.text:0040B368                 cdq
.text:0040B369                 mov     [esp+1Ch+FileHandle], esi ; hFile
.text:0040B36C                 mov     [esp+1Ch+nNumberOfBytesToUnlockHigh], edx ; nNumberOfBytesToUnlockHigh
.text:0040B370                 mov     [esp+1Ch+dwFileOffsetHigh], 0 ; dwFileOffsetHigh
.text:0040B378                 mov     [esp+1Ch+dwFileOffsetLow], 0 ; dwFileOffsetLow
.text:0040B380                 call    UnlockFile
.text:0040B385                 sub     esp, 14h
.text:0040B388                 mov     ebx, [esp+1Ch+var_8]
.text:0040B38C                 mov     esi, [esp+1Ch+var_4]
.text:0040B390                 add     esp, 1Ch
.text:0040B393                 retn
.text:0040B393 sub_40B340      endp
.text:0040B393
.text:0040B393 ; ---------------------------------------------------------------------------
.text:0040B394                 align 10h
.text:0040B3A0
.text:0040B3A0 ; =============== S U B R O U T I N E =======================================
.text:0040B3A0
.text:0040B3A0
.text:0040B3A0 ; int __cdecl sub_40B3A0(int, char *Control)
.text:0040B3A0 sub_40B3A0      proc near               ; CODE XREF: .text:00409B36↑p
.text:0040B3A0                                         ; .text:00409B86↑p ...
.text:0040B3A0
.text:0040B3A0 Str             = dword ptr -1Ch
.text:0040B3A0 Val             = dword ptr -18h
.text:0040B3A0 var_8           = dword ptr -8
.text:0040B3A0 var_4           = dword ptr -4
.text:0040B3A0 arg_0           = dword ptr  4
.text:0040B3A0 Control         = dword ptr  8
.text:0040B3A0
.text:0040B3A0                 sub     esp, 1Ch
.text:0040B3A3                 xor     eax, eax
.text:0040B3A5                 mov     edx, [esp+1Ch+Control]
.text:0040B3A9                 mov     [esp+1Ch+var_4], esi
.text:0040B3AD                 mov     esi, [esp+1Ch+arg_0]
.text:0040B3B1                 mov     [esp+1Ch+var_8], ebx
.text:0040B3B5                 mov     ebx, [esi]
.text:0040B3B7                 test    ebx, ebx
.text:0040B3B9                 jz      short loc_40B3E8
.text:0040B3BB                 movzx   eax, byte ptr [edx]
.text:0040B3BE                 test    al, al
.text:0040B3C0                 jz      short loc_40B3E0
.text:0040B3C2                 cmp     byte ptr [edx+1], 0
.text:0040B3C6                 jnz     short loc_40B420
.text:0040B3C8                 movzx   ecx, byte ptr [ebx]
.text:0040B3CB                 mov     edx, ebx
.text:0040B3CD                 cmp     cl, al
.text:0040B3CF                 jz      short loc_40B412
.text:0040B3D1                 test    cl, cl
.text:0040B3D3                 jnz     short loc_40B3F4
.text:0040B3D5                 lea     esi, [esi+0]
.text:0040B3D9                 lea     edi, [edi+0]
.text:0040B3E0
.text:0040B3E0 loc_40B3E0:                             ; CODE XREF: sub_40B3A0+20↑j
.text:0040B3E0                                         ; sub_40B3A0+74↓j
.text:0040B3E0                 mov     dword ptr [esi], 0
.text:0040B3E6
.text:0040B3E6 loc_40B3E6:                             ; CODE XREF: sub_40B3A0+7C↓j
.text:0040B3E6                 mov     eax, ebx
.text:0040B3E8
.text:0040B3E8 loc_40B3E8:                             ; CODE XREF: sub_40B3A0+19↑j
.text:0040B3E8                 mov     ebx, [esp+1Ch+var_8]
.text:0040B3EC                 mov     esi, [esp+1Ch+var_4]
.text:0040B3F0                 add     esp, 1Ch
.text:0040B3F3                 retn
.text:0040B3F4 ; ---------------------------------------------------------------------------
.text:0040B3F4
.text:0040B3F4 loc_40B3F4:                             ; CODE XREF: sub_40B3A0+33↑j
.text:0040B3F4                 movsx   edx, al
.text:0040B3F7                 mov     [esp+1Ch+Val], edx ; Val
.text:0040B3FB                 lea     edx, [ebx+1]
.text:0040B3FE                 mov     [esp+1Ch+Str], edx ; Str
.text:0040B401                 call    strchr
.text:0040B406                 lea     esi, [esi+0]
.text:0040B409                 lea     edi, [edi+0]
.text:0040B410
.text:0040B410 loc_40B410:                             ; CODE XREF: sub_40B3A0+8C↓j
.text:0040B410                 mov     edx, eax
.text:0040B412
.text:0040B412 loc_40B412:                             ; CODE XREF: sub_40B3A0+2F↑j
.text:0040B412                 test    edx, edx
.text:0040B414                 jz      short loc_40B3E0
.text:0040B416                 mov     byte ptr [edx], 0
.text:0040B419                 inc     edx
.text:0040B41A                 mov     [esi], edx
.text:0040B41C                 jmp     short loc_40B3E6
.text:0040B41C ; ---------------------------------------------------------------------------
.text:0040B41E                 align 10h
.text:0040B420
.text:0040B420 loc_40B420:                             ; CODE XREF: sub_40B3A0+26↑j
.text:0040B420                 mov     [esp+1Ch+Val], edx ; Control
.text:0040B424                 mov     [esp+1Ch+Str], ebx ; Str
.text:0040B427                 call    strpbrk
.text:0040B42C                 jmp     short loc_40B410
.text:0040B42C sub_40B3A0      endp
.text:0040B42C
.text:0040B42C ; ---------------------------------------------------------------------------
.text:0040B42E                 align 10h
.text:0040B430 ; const char aTmpf[]
.text:0040B430 aTmpf           db 'tmpf',0             ; DATA XREF: sub_40B440+20↓o
.text:0040B435 ; const char aWBd[]
.text:0040B435 aWBd            db 'w+bD',0             ; DATA XREF: sub_40B440+5E↓o
.text:0040B43A                 align 10h
.text:0040B440
.text:0040B440 ; =============== S U B R O U T I N E =======================================
.text:0040B440
.text:0040B440
.text:0040B440 sub_40B440      proc near               ; CODE XREF: sub_40A5AF+A4↑p
.text:0040B440
.text:0040B440 FileHandle      = dword ptr -13Ch
.text:0040B440 Format          = dword ptr -138h
.text:0040B440 var_134         = dword ptr -134h
.text:0040B440 var_130         = dword ptr -130h
.text:0040B440 var_12C         = dword ptr -12Ch
.text:0040B440 Buffer          = byte ptr -11Ch
.text:0040B440 var_8           = dword ptr -8
.text:0040B440 var_4           = dword ptr -4
.text:0040B440
.text:0040B440                 sub     esp, 13Ch
.text:0040B446                 mov     [esp+13Ch+var_8], ebx
.text:0040B44D                 lea     ebx, [esp+13Ch+Buffer]
.text:0040B451                 mov     [esp+13Ch+var_4], esi
.text:0040B458                 mov     [esp+13Ch+var_12C], 0 ; int
.text:0040B460                 mov     [esp+13Ch+var_130], offset aTmpf ; "tmpf"
.text:0040B468                 mov     [esp+13Ch+var_134], 0 ; char *
.text:0040B470                 mov     [esp+13Ch+Format], 104h ; int
.text:0040B478                 mov     [esp+13Ch+FileHandle], ebx ; Buffer
.text:0040B47B                 call    sub_40B510
.text:0040B480                 xor     edx, edx
.text:0040B482                 test    eax, eax
.text:0040B484                 jnz     short loc_40B4B6
.text:0040B486                 mov     [esp+13Ch+FileHandle], ebx ; FileName
.text:0040B489                 mov     [esp+13Ch+Format], 0 ; int
.text:0040B491                 call    sub_40B890
.text:0040B496                 xor     edx, edx
.text:0040B498                 mov     ebx, eax
.text:0040B49A                 test    eax, eax
.text:0040B49C                 js      short loc_40B4B6
.text:0040B49E                 mov     [esp+13Ch+Format], offset aWBd ; "w+bD"
.text:0040B4A6                 mov     [esp+13Ch+FileHandle], eax ; FileHandle
.text:0040B4A9                 call    _fdopen
.text:0040B4AE                 test    eax, eax
.text:0040B4B0                 mov     esi, eax
.text:0040B4B2                 jz      short loc_40B4CD
.text:0040B4B4
.text:0040B4B4 loc_40B4B4:                             ; CODE XREF: sub_40B440+95↓j
.text:0040B4B4                 mov     edx, esi
.text:0040B4B6
.text:0040B4B6 loc_40B4B6:                             ; CODE XREF: sub_40B440+44↑j
.text:0040B4B6                                         ; sub_40B440+5C↑j
.text:0040B4B6                 mov     ebx, [esp+13Ch+var_8]
.text:0040B4BD                 mov     eax, edx
.text:0040B4BF                 mov     esi, [esp+13Ch+var_4]
.text:0040B4C6                 add     esp, 13Ch
.text:0040B4CC                 retn
.text:0040B4CD ; ---------------------------------------------------------------------------
.text:0040B4CD
.text:0040B4CD loc_40B4CD:                             ; CODE XREF: sub_40B440+72↑j
.text:0040B4CD                 mov     [esp+13Ch+FileHandle], ebx ; FileHandle
.text:0040B4D0                 call    _close
.text:0040B4D5                 jmp     short loc_40B4B4
.text:0040B4D5 sub_40B440      endp
.text:0040B4D5
.text:0040B4D5 ; ---------------------------------------------------------------------------
.text:0040B4D7                 align 10h
.text:0040B4E0 aFile           db 'file',0             ; DATA XREF: sub_40B510:loc_40B53C↓o
.text:0040B4E5 ; const char aSSxxxxxx[]
.text:0040B4E5 aSSxxxxxx       db '%.*s/%.*sXXXXXX',0  ; DATA XREF: sub_40B510+9B↓o
.text:0040B4F5 ; const char aTemp[]
.text:0040B4F5 aTemp           db 'TEMP',0             ; DATA XREF: sub_40B510:loc_40B5F2↓o
.text:0040B4F5                                         ; sub_40B510:loc_40B632↓o ...
.text:0040B4FA ; const char aTmp[]
.text:0040B4FA aTmp            db '/tmp',0             ; DATA XREF: sub_40B510+12F↓o
.text:0040B4FA                                         ; sub_40B510+141↓o ...
.text:0040B4FF aTmpdir         db 'TMPDIR',0           ; DATA XREF: sub_40B510:loc_40B6B0↓o
.text:0040B506 aTmp_0          db 'TMP',0              ; DATA XREF: sub_40B510:loc_40B740↓o
.text:0040B50A                 align 10h
.text:0040B510
.text:0040B510 ; =============== S U B R O U T I N E =======================================
.text:0040B510
.text:0040B510
.text:0040B510 ; int __cdecl sub_40B510(char *Buffer, int, char *, char *, int)
.text:0040B510 sub_40B510      proc near               ; CODE XREF: sub_40B440+3B↑p
.text:0040B510
.text:0040B510 Str             = dword ptr -1BCh
.text:0040B510 Format          = dword ptr -1B8h
.text:0040B510 var_1B4         = dword ptr -1B4h
.text:0040B510 var_1B0         = dword ptr -1B0h
.text:0040B510 var_1AC         = dword ptr -1ACh
.text:0040B510 var_1A8         = dword ptr -1A8h
.text:0040B510 var_19C         = dword ptr -19Ch
.text:0040B510 var_13C         = dword ptr -13Ch
.text:0040B510 var_DC          = dword ptr -0DCh
.text:0040B510 var_7C          = dword ptr -7Ch
.text:0040B510 Buffer          = dword ptr  4
.text:0040B510 arg_4           = dword ptr  8
.text:0040B510 arg_8           = dword ptr  0Ch
.text:0040B510 arg_C           = dword ptr  10h
.text:0040B510 arg_10          = dword ptr  14h
.text:0040B510
.text:0040B510                 push    ebp
.text:0040B511                 push    edi
.text:0040B512                 push    esi
.text:0040B513                 push    ebx
.text:0040B514                 sub     esp, 1ACh
.text:0040B51A                 mov     eax, [esp+1BCh+arg_C]
.text:0040B521                 mov     esi, [esp+1BCh+arg_8]
.text:0040B528                 test    eax, eax
.text:0040B52A                 jz      short loc_40B53C
.text:0040B52C                 mov     edx, [esp+1BCh+arg_C]
.text:0040B533                 cmp     byte ptr [edx], 0
.text:0040B536                 jnz     loc_40B770
.text:0040B53C
.text:0040B53C loc_40B53C:                             ; CODE XREF: sub_40B510+1A↑j
.text:0040B53C                 mov     eax, offset aFile ; "file"
.text:0040B541                 mov     ebp, 4
.text:0040B546                 mov     [esp+1BCh+arg_C], eax
.text:0040B54D
.text:0040B54D loc_40B54D:                             ; CODE XREF: sub_40B510+274↓j
.text:0040B54D                                         ; sub_40B510+27F↓j
.text:0040B54D                 mov     ebx, [esp+1BCh+arg_10]
.text:0040B554                 test    ebx, ebx
.text:0040B556                 jnz     loc_40B6B0
.text:0040B55C
.text:0040B55C loc_40B55C:                             ; CODE XREF: sub_40B510+21C↓j
.text:0040B55C                                         ; sub_40B510+224↓j ...
.text:0040B55C                 test    esi, esi
.text:0040B55E                 jz      loc_40B5F2
.text:0040B564
.text:0040B564 loc_40B564:                             ; CODE XREF: sub_40B510+176↓j
.text:0040B564                                         ; sub_40B510+19A↓j
.text:0040B564                 mov     [esp+1BCh+Str], esi ; Str
.text:0040B567                 call    strlen
.text:0040B56C                 test    eax, eax
.text:0040B56E                 mov     edx, eax
.text:0040B570                 jz      short loc_40B580
.text:0040B572                 movzx   eax, byte ptr [eax+esi-1]
.text:0040B577                 cmp     al, 2Fh ; '/'
.text:0040B579                 jz      short loc_40B5E0
.text:0040B57B                 cmp     al, 5Ch ; '\'
.text:0040B57D                 jz      short loc_40B5E0
.text:0040B57F                 nop
.text:0040B580
.text:0040B580 loc_40B580:                             ; CODE XREF: sub_40B510+60↑j
.text:0040B580                                         ; sub_40B510+D1↓j ...
.text:0040B580                 lea     edi, [ebp+edx+8]
.text:0040B584                 cmp     [esp+1BCh+arg_4], edi
.text:0040B58B                 jb      short loc_40B5C8
.text:0040B58D                 mov     [esp+1BCh+var_1AC], ebp
.text:0040B591                 mov     ecx, [esp+1BCh+arg_C]
.text:0040B598                 mov     ebp, [esp+1BCh+Buffer]
.text:0040B59F                 mov     [esp+1BCh+var_1B0], esi
.text:0040B5A3                 mov     [esp+1BCh+var_1A8], ecx
.text:0040B5A7                 mov     [esp+1BCh+var_1B4], edx
.text:0040B5AB                 mov     [esp+1BCh+Format], offset aSSxxxxxx ; "%.*s/%.*sXXXXXX"
.text:0040B5B3                 mov     [esp+1BCh+Str], ebp ; Buffer
.text:0040B5B6                 call    sprintf
.text:0040B5BB                 xor     eax, eax
.text:0040B5BD
.text:0040B5BD loc_40B5BD:                             ; CODE XREF: sub_40B510+C8↓j
.text:0040B5BD                 add     esp, 1ACh
.text:0040B5C3                 pop     ebx
.text:0040B5C4                 pop     esi
.text:0040B5C5                 pop     edi
.text:0040B5C6                 pop     ebp
.text:0040B5C7                 retn
.text:0040B5C8 ; ---------------------------------------------------------------------------
.text:0040B5C8
.text:0040B5C8 loc_40B5C8:                             ; CODE XREF: sub_40B510+7B↑j
.text:0040B5C8                 call    _errno
.text:0040B5CD                 mov     dword ptr [eax], 16h
.text:0040B5D3
.text:0040B5D3 loc_40B5D3:                             ; CODE XREF: sub_40B510+187↓j
.text:0040B5D3                 mov     eax, 0FFFFFFFFh
.text:0040B5D8                 jmp     short loc_40B5BD
.text:0040B5D8 ; ---------------------------------------------------------------------------
.text:0040B5DA                 align 10h
.text:0040B5E0
.text:0040B5E0 loc_40B5E0:                             ; CODE XREF: sub_40B510+69↑j
.text:0040B5E0                                         ; sub_40B510+6D↑j ...
.text:0040B5E0                 dec     edx
.text:0040B5E1                 jz      short loc_40B580
.text:0040B5E3                 movzx   eax, byte ptr [edx+esi-1]
.text:0040B5E8                 cmp     al, 2Fh ; '/'
.text:0040B5EA                 jz      short loc_40B5E0
.text:0040B5EC                 cmp     al, 5Ch ; '\'
.text:0040B5EE                 jz      short loc_40B5E0
.text:0040B5F0                 jmp     short loc_40B580
.text:0040B5F2 ; ---------------------------------------------------------------------------
.text:0040B5F2
.text:0040B5F2 loc_40B5F2:                             ; CODE XREF: sub_40B510+4E↑j
.text:0040B5F2                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:0040B5F9                 lea     esi, [esp+1BCh+var_13C]
.text:0040B600                 call    getenv
.text:0040B605                 mov     [esp+1BCh+Format], eax ; char *
.text:0040B609                 mov     [esp+1BCh+var_1B4], esi ; int
.text:0040B60D                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:0040B614                 call    sub_406090
.text:0040B619                 test    eax, eax
.text:0040B61B                 jnz     short loc_40B632
.text:0040B61D                 mov     edi, [esp+1BCh+var_13C]
.text:0040B624                 and     edi, 0F000h
.text:0040B62A                 cmp     edi, 4000h
.text:0040B630                 jz      short loc_40B69C
.text:0040B632
.text:0040B632 loc_40B632:                             ; CODE XREF: sub_40B510+10B↑j
.text:0040B632                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:0040B639                 call    getenv
.text:0040B63E                 cld
.text:0040B63F                 mov     edx, offset aTmp ; "/tmp"
.text:0040B644                 mov     esi, eax
.text:0040B646                 mov     ecx, 5
.text:0040B64B                 mov     edi, edx
.text:0040B64D                 repe cmpsb
.text:0040B64F                 jz      short loc_40B68C
.text:0040B651                 mov     [esp+1BCh+Format], offset aTmp ; "/tmp"
.text:0040B659                 lea     ecx, [esp+1BCh+var_19C]
.text:0040B65D                 mov     [esp+1BCh+var_1B4], ecx ; int
.text:0040B661                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:0040B668                 call    sub_406090
.text:0040B66D                 test    eax, eax
.text:0040B66F                 jnz     short loc_40B68C
.text:0040B671                 mov     ebx, [esp+1BCh+var_19C]
.text:0040B675                 mov     esi, offset aTmp ; "/tmp"
.text:0040B67A                 and     ebx, 0F000h
.text:0040B680                 cmp     ebx, 4000h
.text:0040B686                 jz      loc_40B564
.text:0040B68C
.text:0040B68C loc_40B68C:                             ; CODE XREF: sub_40B510+13F↑j
.text:0040B68C                                         ; sub_40B510+15F↑j
.text:0040B68C                 call    _errno
.text:0040B691                 mov     dword ptr [eax], 2
.text:0040B697                 jmp     loc_40B5D3
.text:0040B69C ; ---------------------------------------------------------------------------
.text:0040B69C
.text:0040B69C loc_40B69C:                             ; CODE XREF: sub_40B510+120↑j
.text:0040B69C                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:0040B6A3                 call    getenv
.text:0040B6A8                 mov     esi, eax
.text:0040B6AA                 jmp     loc_40B564
.text:0040B6AA ; ---------------------------------------------------------------------------
.text:0040B6AF                 align 10h
.text:0040B6B0
.text:0040B6B0 loc_40B6B0:                             ; CODE XREF: sub_40B510+46↑j
.text:0040B6B0                 mov     [esp+1BCh+Str], offset aTmpdir ; "TMPDIR"
.text:0040B6B7                 call    sub_40BDA0
.text:0040B6BC                 test    eax, eax
.text:0040B6BE                 mov     ebx, eax
.text:0040B6C0                 jz      short loc_40B740
.text:0040B6C2
.text:0040B6C2 loc_40B6C2:                             ; CODE XREF: sub_40B510+240↓j
.text:0040B6C2                                         ; sub_40B510+256↓j
.text:0040B6C2                 mov     [esp+1BCh+Format], ebx ; char *
.text:0040B6C6                 lea     edi, [esp+1BCh+var_7C]
.text:0040B6CD                 mov     [esp+1BCh+var_1B4], edi ; int
.text:0040B6D1                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:0040B6D8                 call    sub_406090
.text:0040B6DD                 test    eax, eax
.text:0040B6DF                 jnz     short loc_40B6F6
.text:0040B6E1                 mov     edx, [esp+1BCh+var_7C]
.text:0040B6E8                 and     edx, 0F000h
.text:0040B6EE                 cmp     edx, 4000h
.text:0040B6F4                 jz      short loc_40B739
.text:0040B6F6
.text:0040B6F6 loc_40B6F6:                             ; CODE XREF: sub_40B510+1CF↑j
.text:0040B6F6                                         ; sub_40B510+25C↓j
.text:0040B6F6                 test    esi, esi
.text:0040B6F8                 jz      short loc_40B732
.text:0040B6FA                 mov     [esp+1BCh+Format], esi ; char *
.text:0040B6FE                 lea     ecx, [esp+1BCh+var_DC]
.text:0040B705                 mov     [esp+1BCh+var_1B4], ecx ; int
.text:0040B709                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:0040B710                 call    sub_406090
.text:0040B715                 test    eax, eax
.text:0040B717                 jnz     short loc_40B732
.text:0040B719                 mov     ebx, [esp+1BCh+var_DC]
.text:0040B720                 and     ebx, 0F000h
.text:0040B726                 cmp     ebx, 4000h
.text:0040B72C                 jz      loc_40B55C
.text:0040B732
.text:0040B732 loc_40B732:                             ; CODE XREF: sub_40B510+1E8↑j
.text:0040B732                                         ; sub_40B510+207↑j
.text:0040B732                 xor     esi, esi
.text:0040B734                 jmp     loc_40B55C
.text:0040B739 ; ---------------------------------------------------------------------------
.text:0040B739
.text:0040B739 loc_40B739:                             ; CODE XREF: sub_40B510+1E4↑j
.text:0040B739                 mov     esi, ebx
.text:0040B73B                 jmp     loc_40B55C
.text:0040B740 ; ---------------------------------------------------------------------------
.text:0040B740
.text:0040B740 loc_40B740:                             ; CODE XREF: sub_40B510+1B0↑j
.text:0040B740                 mov     [esp+1BCh+Str], offset aTmp_0 ; "TMP"
.text:0040B747                 call    sub_40BDA0
.text:0040B74C                 test    eax, eax
.text:0040B74E                 mov     ebx, eax
.text:0040B750                 jnz     loc_40B6C2
.text:0040B756                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:0040B75D                 call    sub_40BDA0
.text:0040B762                 test    eax, eax
.text:0040B764                 mov     ebx, eax
.text:0040B766                 jnz     loc_40B6C2
.text:0040B76C                 jmp     short loc_40B6F6
.text:0040B76C ; ---------------------------------------------------------------------------
.text:0040B76E                 align 10h
.text:0040B770
.text:0040B770 loc_40B770:                             ; CODE XREF: sub_40B510+26↑j
.text:0040B770                 mov     ecx, [esp+1BCh+arg_C]
.text:0040B777                 mov     [esp+1BCh+Str], ecx ; Str
.text:0040B77A                 call    strlen
.text:0040B77F                 cmp     eax, 5
.text:0040B782                 mov     ebp, eax
.text:0040B784                 jbe     loc_40B54D
.text:0040B78A                 mov     ebp, 5
.text:0040B78F                 jmp     loc_40B54D
.text:0040B78F sub_40B510      endp
.text:0040B78F
.text:0040B78F ; ---------------------------------------------------------------------------
.text:0040B794                 align 10h
.text:0040B7A0 byte_40B7A0     db 61h                  ; DATA XREF: sub_40B890+DC↓r
.text:0040B7A0                                         ; sub_40B890+122↓r ...
.text:0040B7A1 aBcdefghijklmno db 'bcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789',0
.text:0040B7DF aXxxxxx         db 'XXXXXX',0           ; DATA XREF: sub_40B890+39↓o
.text:0040B7E6                 align 20h
.text:0040B800 aInvalidKindInG db 'invalid KIND in __gen_tempname',0
.text:0040B800                                         ; DATA XREF: sub_40B890:loc_40BB08↓o
.text:0040B81F                 align 10h
.text:0040B820 aLibc05SrcStdio db '../../libc-0.5-src/stdio-common/tempname.c',0
.text:0040B820                                         ; DATA XREF: sub_40B890+405↓o
.text:0040B84B                 align 20h
.text:0040B860 aInvalidKindInG_0 db '! "invalid KIND in __gen_tempname"',0
.text:0040B860                                         ; DATA XREF: sub_40B890+40D↓o
.text:0040B883                 align 10h
.text:0040B890
.text:0040B890 ; =============== S U B R O U T I N E =======================================
.text:0040B890
.text:0040B890
.text:0040B890 ; int __cdecl sub_40B890(char *FileName, int)
.text:0040B890 sub_40B890      proc near               ; CODE XREF: sub_40B440+51↑p
.text:0040B890
.text:0040B890 Str             = dword ptr -9Ch
.text:0040B890 OpenFlag        = dword ptr -98h
.text:0040B890 var_94          = dword ptr -94h
.text:0040B890 var_90          = dword ptr -90h
.text:0040B890 var_8C          = dword ptr -8Ch
.text:0040B890 var_88          = dword ptr -88h
.text:0040B890 var_84          = dword ptr -84h
.text:0040B890 var_80          = dword ptr -80h
.text:0040B890 var_7C          = dword ptr -7Ch
.text:0040B890 FileName        = dword ptr  4
.text:0040B890 arg_4           = dword ptr  8
.text:0040B890
.text:0040B890                 push    ebp
.text:0040B891                 push    edi
.text:0040B892                 push    esi
.text:0040B893                 push    ebx
.text:0040B894                 sub     esp, 8Ch
.text:0040B89A                 mov     [esp+9Ch+var_88], 0FFFFFFFFh
.text:0040B8A2                 call    _errno
.text:0040B8A7                 mov     edx, [eax]
.text:0040B8A9                 mov     [esp+9Ch+var_8C], edx
.text:0040B8AD                 mov     edx, [esp+9Ch+FileName]
.text:0040B8B4                 mov     [esp+9Ch+Str], edx ; Str
.text:0040B8B7                 call    strlen
.text:0040B8BC                 cmp     eax, 5
.text:0040B8BF                 jle     short loc_40B8DD
.text:0040B8C1                 cld
.text:0040B8C2                 mov     ecx, [esp+9Ch+FileName]
.text:0040B8C9                 mov     edi, offset aXxxxxx ; "XXXXXX"
.text:0040B8CE                 lea     esi, [eax+ecx-6]
.text:0040B8D2                 mov     ecx, 7
.text:0040B8D7                 mov     ebp, esi
.text:0040B8D9                 repe cmpsb
.text:0040B8DB                 jz      short loc_40B8F8
.text:0040B8DD
.text:0040B8DD loc_40B8DD:                             ; CODE XREF: sub_40B890+2F↑j
.text:0040B8DD                 call    _errno
.text:0040B8E2                 mov     dword ptr [eax], 16h
.text:0040B8E8
.text:0040B8E8 loc_40B8E8:                             ; CODE XREF: sub_40B890+295↓j
.text:0040B8E8                                         ; sub_40B890+2D8↓j ...
.text:0040B8E8                 mov     eax, 0FFFFFFFFh
.text:0040B8ED
.text:0040B8ED loc_40B8ED:                             ; CODE XREF: sub_40B890+2EF↓j
.text:0040B8ED                                         ; sub_40B890+332↓j
.text:0040B8ED                 add     esp, 8Ch
.text:0040B8F3                 pop     ebx
.text:0040B8F4                 pop     esi
.text:0040B8F5                 pop     edi
.text:0040B8F6                 pop     ebp
.text:0040B8F7                 retn
.text:0040B8F8 ; ---------------------------------------------------------------------------
.text:0040B8F8
.text:0040B8F8 loc_40B8F8:                             ; CODE XREF: sub_40B890+4B↑j
.text:0040B8F8                 mov     ecx, ds:dword_4104D4
.text:0040B8FE                 mov     edi, ds:dword_4104D0
.text:0040B904                 mov     eax, ecx
.text:0040B906                 or      eax, edi
.text:0040B908                 jz      loc_40BC43
.text:0040B90E
.text:0040B90E loc_40B90E:                             ; CODE XREF: sub_40B890+3F8↓j
.text:0040B90E                 rdtsc
.text:0040B910                 mov     edi, edx
.text:0040B912                 mov     esi, eax
.text:0040B914                 call    _getpid
.text:0040B919                 mov     ebx, eax
.text:0040B91B                 mov     edx, esi
.text:0040B91D                 sar     ebx, 1Fh
.text:0040B920                 xor     edx, eax
.text:0040B922                 mov     ecx, edi
.text:0040B924                 xor     ecx, ebx
.text:0040B926                 mov     ebx, edx
.text:0040B928                 mov     esi, ecx
.text:0040B92A                 add     ebx, ds:dword_4104D0
.text:0040B930                 adc     esi, ds:dword_4104D4
.text:0040B936                 xor     edi, edi
.text:0040B938                 mov     ds:dword_4104D0, ebx
.text:0040B93E                 mov     ds:dword_4104D4, esi
.text:0040B944                 lea     esi, [esi+0]
.text:0040B94A                 lea     edi, [edi+0]
.text:0040B950
.text:0040B950 loc_40B950:                             ; CODE XREF: sub_40B890+2C7↓j
.text:0040B950                 mov     [esp+9Ch+Str], ebx
.text:0040B953                 mov     [esp+9Ch+OpenFlag], esi
.text:0040B957                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040B95F                 mov     [esp+9Ch+var_90], 0
.text:0040B967                 call    sub_40D5F0
.text:0040B96C                 movzx   ecx, ds:byte_40B7A0[eax]
.text:0040B973                 mov     [ebp+0], cl
.text:0040B976                 mov     [esp+9Ch+Str], ebx
.text:0040B979                 mov     [esp+9Ch+OpenFlag], esi
.text:0040B97D                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040B985                 mov     [esp+9Ch+var_90], 0
.text:0040B98D                 call    sub_40D4D0
.text:0040B992                 mov     [esp+9Ch+Str], eax
.text:0040B995                 mov     ebx, eax
.text:0040B997                 mov     esi, edx
.text:0040B999                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040B9A1                 mov     [esp+9Ch+var_90], 0
.text:0040B9A9                 mov     [esp+9Ch+OpenFlag], edx
.text:0040B9AD                 call    sub_40D5F0
.text:0040B9B2                 movzx   edx, ds:byte_40B7A0[eax]
.text:0040B9B9                 mov     [ebp+1], dl
.text:0040B9BC                 mov     [esp+9Ch+Str], ebx
.text:0040B9BF                 mov     [esp+9Ch+OpenFlag], esi
.text:0040B9C3                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040B9CB                 mov     [esp+9Ch+var_90], 0
.text:0040B9D3                 call    sub_40D4D0
.text:0040B9D8                 mov     [esp+9Ch+Str], eax
.text:0040B9DB                 mov     ebx, eax
.text:0040B9DD                 mov     esi, edx
.text:0040B9DF                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040B9E7                 mov     [esp+9Ch+var_90], 0
.text:0040B9EF                 mov     [esp+9Ch+OpenFlag], edx
.text:0040B9F3                 call    sub_40D5F0
.text:0040B9F8                 movzx   ecx, ds:byte_40B7A0[eax]
.text:0040B9FF                 mov     [ebp+2], cl
.text:0040BA02                 mov     [esp+9Ch+Str], ebx
.text:0040BA05                 mov     [esp+9Ch+OpenFlag], esi
.text:0040BA09                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040BA11                 mov     [esp+9Ch+var_90], 0
.text:0040BA19                 call    sub_40D4D0
.text:0040BA1E                 mov     [esp+9Ch+Str], eax
.text:0040BA21                 mov     ebx, eax
.text:0040BA23                 mov     esi, edx
.text:0040BA25                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040BA2D                 mov     [esp+9Ch+var_90], 0
.text:0040BA35                 mov     [esp+9Ch+OpenFlag], edx
.text:0040BA39                 call    sub_40D5F0
.text:0040BA3E                 movzx   edx, ds:byte_40B7A0[eax]
.text:0040BA45                 mov     [ebp+3], dl
.text:0040BA48                 mov     [esp+9Ch+Str], ebx
.text:0040BA4B                 mov     [esp+9Ch+OpenFlag], esi
.text:0040BA4F                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040BA57                 mov     [esp+9Ch+var_90], 0
.text:0040BA5F                 call    sub_40D4D0
.text:0040BA64                 mov     [esp+9Ch+Str], eax
.text:0040BA67                 mov     ebx, eax
.text:0040BA69                 mov     esi, edx
.text:0040BA6B                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040BA73                 mov     [esp+9Ch+var_90], 0
.text:0040BA7B                 mov     [esp+9Ch+OpenFlag], edx
.text:0040BA7F                 call    sub_40D5F0
.text:0040BA84                 movzx   ecx, ds:byte_40B7A0[eax]
.text:0040BA8B                 mov     [ebp+4], cl
.text:0040BA8E                 mov     [esp+9Ch+Str], ebx
.text:0040BA91                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040BA99                 mov     [esp+9Ch+var_90], 0
.text:0040BAA1                 mov     [esp+9Ch+OpenFlag], esi
.text:0040BAA5                 call    sub_40D4D0
.text:0040BAAA                 mov     [esp+9Ch+Str], eax
.text:0040BAAD                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040BAB5                 mov     [esp+9Ch+var_90], 0
.text:0040BABD                 mov     [esp+9Ch+OpenFlag], edx
.text:0040BAC1                 call    sub_40D5F0
.text:0040BAC6                 movzx   ebx, ds:byte_40B7A0[eax]
.text:0040BACD                 mov     [ebp+5], bl
.text:0040BAD0                 cmp     [esp+9Ch+arg_4], 1
.text:0040BAD8                 jz      loc_40BC27
.text:0040BADE                 cmp     [esp+9Ch+arg_4], 1
.text:0040BAE6                 jle     loc_40BBF0
.text:0040BAEC                 cmp     [esp+9Ch+arg_4], 2
.text:0040BAF4                 jz      loc_40BBC7
.text:0040BAFA                 cmp     [esp+9Ch+arg_4], 3
.text:0040BB02                 jz      loc_40BB84
.text:0040BB08
.text:0040BB08 loc_40BB08:                             ; CODE XREF: sub_40B890+369↓j
.text:0040BB08                 mov     ebx, offset aInvalidKindInG ; "invalid KIND in __gen_tempname"
.text:0040BB0D                 test    ebx, ebx
.text:0040BB0F                 jnz     loc_40BC8D
.text:0040BB15
.text:0040BB15 loc_40BB15:                             ; CODE XREF: sub_40B890+354↓j
.text:0040BB15                 mov     eax, [esp+9Ch+var_88]
.text:0040BB19                 test    eax, eax
.text:0040BB1B                 jns     short loc_40BB70
.text:0040BB1D                 call    _errno
.text:0040BB22                 cmp     dword ptr [eax], 11h
.text:0040BB25                 jnz     loc_40B8E8
.text:0040BB2B
.text:0040BB2B loc_40BB2B:                             ; CODE XREF: sub_40B890+315↓j
.text:0040BB2B                 mov     edx, ds:dword_4104D0
.text:0040BB31                 mov     ecx, ds:dword_4104D4
.text:0040BB37                 add     edx, 1E61h
.text:0040BB3D                 adc     ecx, 0
.text:0040BB40                 mov     ebx, edx
.text:0040BB42                 inc     edi
.text:0040BB43                 mov     ds:dword_4104D0, edx
.text:0040BB49                 cmp     edi, 3A2F8h
.text:0040BB4F                 mov     esi, ecx
.text:0040BB51                 mov     ds:dword_4104D4, ecx
.text:0040BB57                 jb      loc_40B950
.text:0040BB5D                 call    _errno
.text:0040BB62                 mov     dword ptr [eax], 11h
.text:0040BB68                 jmp     loc_40B8E8
.text:0040BB68 ; ---------------------------------------------------------------------------
.text:0040BB6D                 align 10h
.text:0040BB70
.text:0040BB70 loc_40BB70:                             ; CODE XREF: sub_40B890+28B↑j
.text:0040BB70                 call    _errno
.text:0040BB75                 mov     esi, [esp+9Ch+var_8C]
.text:0040BB79                 mov     [eax], esi
.text:0040BB7B                 mov     eax, [esp+9Ch+var_88]
.text:0040BB7F                 jmp     loc_40B8ED
.text:0040BB84 ; ---------------------------------------------------------------------------
.text:0040BB84
.text:0040BB84 loc_40BB84:                             ; CODE XREF: sub_40B890+272↑j
.text:0040BB84                 mov     [esp+9Ch+Str], 0 ; LPCSTR
.text:0040BB8B                 mov     ecx, [esp+9Ch+FileName]
.text:0040BB92                 lea     esi, [esp+9Ch+var_7C]
.text:0040BB96                 mov     [esp+9Ch+var_94], esi ; int
.text:0040BB9A                 mov     [esp+9Ch+OpenFlag], ecx ; int
.text:0040BB9E                 call    sub_406010
.text:0040BBA3                 test    eax, eax
.text:0040BBA5                 jns     short loc_40BB2B
.text:0040BBA7                 call    _errno
.text:0040BBAC                 cmp     dword ptr [eax], 2
.text:0040BBAF                 jnz     loc_40B8E8
.text:0040BBB5                 call    _errno
.text:0040BBBA                 mov     ebx, [esp+9Ch+var_8C]
.text:0040BBBE                 mov     [eax], ebx
.text:0040BBC0                 xor     eax, eax
.text:0040BBC2                 jmp     loc_40B8ED
.text:0040BBC7 ; ---------------------------------------------------------------------------
.text:0040BBC7
.text:0040BBC7 loc_40BBC7:                             ; CODE XREF: sub_40B890+264↑j
.text:0040BBC7                 mov     [esp+9Ch+OpenFlag], 1C0h ; AccessMode
.text:0040BBCF                 mov     edx, [esp+9Ch+FileName]
.text:0040BBD6                 mov     [esp+9Ch+Str], edx ; LPCSTR
.text:0040BBD9                 call    sub_40BCC0
.text:0040BBDE                 mov     esi, esi
.text:0040BBE0
.text:0040BBE0 loc_40BBE0:                             ; CODE XREF: sub_40B890+395↓j
.text:0040BBE0                 mov     [esp+9Ch+var_88], eax
.text:0040BBE4                 jmp     loc_40BB15
.text:0040BBE4 ; ---------------------------------------------------------------------------
.text:0040BBE9                 align 10h
.text:0040BBF0
.text:0040BBF0 loc_40BBF0:                             ; CODE XREF: sub_40B890+256↑j
.text:0040BBF0                 mov     eax, [esp+9Ch+arg_4]
.text:0040BBF7                 test    eax, eax
.text:0040BBF9                 jnz     loc_40BB08
.text:0040BBFF                 mov     [esp+9Ch+var_94], 180h
.text:0040BC07                 mov     esi, [esp+9Ch+FileName]
.text:0040BC0E                 mov     [esp+9Ch+OpenFlag], 8502h ; OpenFlag
.text:0040BC16                 mov     [esp+9Ch+Str], esi ; FileName
.text:0040BC19                 lea     esi, [esi+0]
.text:0040BC20
.text:0040BC20 loc_40BC20:                             ; CODE XREF: sub_40B890+3B1↓j
.text:0040BC20                 call    _open
.text:0040BC25                 jmp     short loc_40BBE0
.text:0040BC27 ; ---------------------------------------------------------------------------
.text:0040BC27
.text:0040BC27 loc_40BC27:                             ; CODE XREF: sub_40B890+248↑j
.text:0040BC27                 mov     [esp+9Ch+var_94], 180h
.text:0040BC2F                 mov     ebx, [esp+9Ch+FileName]
.text:0040BC36                 mov     [esp+9Ch+OpenFlag], 8502h
.text:0040BC3E                 mov     [esp+9Ch+Str], ebx
.text:0040BC41                 jmp     short loc_40BC20
.text:0040BC43 ; ---------------------------------------------------------------------------
.text:0040BC43
.text:0040BC43 loc_40BC43:                             ; CODE XREF: sub_40B890+78↑j
.text:0040BC43                 mov     [esp+9Ch+OpenFlag], 0
.text:0040BC4B                 lea     ebx, [esp+9Ch+var_84]
.text:0040BC4F                 mov     [esp+9Ch+Str], ebx
.text:0040BC52                 call    sub_40BD40
.text:0040BC57                 mov     edi, [esp+9Ch+var_80]
.text:0040BC5B                 mov     edx, [esp+9Ch+var_84]
.text:0040BC5F                 mov     ecx, edi
.text:0040BC61                 mov     ebx, edi
.text:0040BC63                 shl     ecx, 10h
.text:0040BC66                 sar     ebx, 1Fh
.text:0040BC69                 shld    ebx, edi, 10h
.text:0040BC6D                 mov     esi, edx
.text:0040BC6F                 mov     edi, edx
.text:0040BC71                 mov     edx, ecx
.text:0040BC73                 sar     edi, 1Fh
.text:0040BC76                 xor     edx, esi
.text:0040BC78                 mov     ds:dword_4104D0, edx
.text:0040BC7E                 mov     esi, ebx
.text:0040BC80                 xor     esi, edi
.text:0040BC82                 mov     ds:dword_4104D4, esi
.text:0040BC88                 jmp     loc_40B90E
.text:0040BC8D ; ---------------------------------------------------------------------------
.text:0040BC8D
.text:0040BC8D loc_40BC8D:                             ; CODE XREF: sub_40B890+27F↑j
.text:0040BC8D                 mov     [esp+9Ch+var_94], 151h
.text:0040BC95                 mov     [esp+9Ch+OpenFlag], offset aLibc05SrcStdio ; "../../libc-0.5-src/stdio-common/tempnam"...
.text:0040BC9D                 mov     [esp+9Ch+Str], offset aInvalidKindInG_0 ; "! \"invalid KIND in __gen_tempname\""
.text:0040BCA4                 call    _assert
.text:0040BCA4 sub_40B890      endp
.text:0040BCA4
.text:0040BCA4 ; ---------------------------------------------------------------------------
.text:0040BCA9                 align 20h
.text:0040BCC0
.text:0040BCC0 ; =============== S U B R O U T I N E =======================================
.text:0040BCC0
.text:0040BCC0
.text:0040BCC0 ; int __cdecl sub_40BCC0(LPCSTR, int AccessMode)
.text:0040BCC0 sub_40BCC0      proc near               ; CODE XREF: sub_40B890+349↑p
.text:0040BCC0
.text:0040BCC0 lpPathName      = dword ptr -1Ch
.text:0040BCC0 lpSecurityAttributes= dword ptr -18h
.text:0040BCC0 var_8           = dword ptr -8
.text:0040BCC0 var_4           = dword ptr -4
.text:0040BCC0 arg_0           = dword ptr  4
.text:0040BCC0 AccessMode      = dword ptr  8
.text:0040BCC0
.text:0040BCC0                 sub     esp, 1Ch
.text:0040BCC3                 mov     [esp+1Ch+var_8], ebx
.text:0040BCC7                 mov     ebx, [esp+1Ch+arg_0]
.text:0040BCCB                 mov     [esp+1Ch+var_4], esi
.text:0040BCCF                 mov     esi, [esp+1Ch+AccessMode]
.text:0040BCD3                 test    ebx, ebx
.text:0040BCD5                 jz      short loc_40BD25
.text:0040BCD7                 mov     [esp+1Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:0040BCDF                 mov     [esp+1Ch+lpPathName], ebx ; lpPathName
.text:0040BCE2                 call    CreateDirectoryA
.text:0040BCE7                 sub     esp, 8
.text:0040BCEA                 test    eax, eax
.text:0040BCEC                 jz      short loc_40BD06
.text:0040BCEE                 mov     [esp+1Ch+AccessMode], esi ; AccessMode
.text:0040BCF2                 mov     esi, [esp+1Ch+var_4]
.text:0040BCF6                 mov     [esp+1Ch+arg_0], ebx ; FileName
.text:0040BCFA                 mov     ebx, [esp+1Ch+var_8]
.text:0040BCFE                 add     esp, 1Ch
.text:0040BD01                 jmp     _chmod
.text:0040BD06 ; ---------------------------------------------------------------------------
.text:0040BD06
.text:0040BD06 loc_40BD06:                             ; CODE XREF: sub_40BCC0+2C↑j
.text:0040BD06                 call    sub_408340
.text:0040BD0B                 mov     esi, eax
.text:0040BD0D                 call    _errno
.text:0040BD12                 mov     [eax], esi
.text:0040BD14
.text:0040BD14 loc_40BD14:                             ; CODE XREF: sub_40BCC0+70↓j
.text:0040BD14                 mov     ebx, [esp+1Ch+var_8]
.text:0040BD18                 mov     eax, 0FFFFFFFFh
.text:0040BD1D                 mov     esi, [esp+1Ch+var_4]
.text:0040BD21                 add     esp, 1Ch
.text:0040BD24                 retn
.text:0040BD25 ; ---------------------------------------------------------------------------
.text:0040BD25
.text:0040BD25 loc_40BD25:                             ; CODE XREF: sub_40BCC0+15↑j
.text:0040BD25                 call    _errno
.text:0040BD2A                 mov     dword ptr [eax], 16h
.text:0040BD30                 jmp     short loc_40BD14
.text:0040BD30 sub_40BCC0      endp
.text:0040BD30
.text:0040BD30 ; ---------------------------------------------------------------------------
.text:0040BD32                 align 10h
.text:0040BD40
.text:0040BD40 ; =============== S U B R O U T I N E =======================================
.text:0040BD40
.text:0040BD40
.text:0040BD40 sub_40BD40      proc near               ; CODE XREF: sub_40B890+3C2↑p
.text:0040BD40
.text:0040BD40 var_1C          = dword ptr -1Ch
.text:0040BD40 var_18          = dword ptr -18h
.text:0040BD40 var_C           = dword ptr -0Ch
.text:0040BD40 var_8           = dword ptr -8
.text:0040BD40 var_4           = dword ptr -4
.text:0040BD40 arg_0           = dword ptr  4
.text:0040BD40 arg_4           = dword ptr  8
.text:0040BD40
.text:0040BD40                 sub     esp, 1Ch
.text:0040BD43                 mov     edx, [esp+1Ch+arg_4]
.text:0040BD47                 mov     [esp+1Ch+var_4], ebx
.text:0040BD4B                 mov     ebx, [esp+1Ch+arg_0]
.text:0040BD4F                 mov     [esp+1Ch+var_18], edx
.text:0040BD53                 lea     edx, [esp+1Ch+var_C]
.text:0040BD57                 mov     [esp+1Ch+var_1C], edx
.text:0040BD5A                 call    sub_40BDC0
.text:0040BD5F                 test    eax, eax
.text:0040BD61                 mov     edx, 0FFFFFFFFh
.text:0040BD66                 jnz     short loc_40BD8A
.text:0040BD68                 mov     ecx, [esp+1Ch+var_C]
.text:0040BD6C                 mov     edx, 10624DD3h
.text:0040BD71                 mov     [ebx], ecx
.text:0040BD73                 mov     ecx, [esp+1Ch+var_8]
.text:0040BD77                 mov     eax, ecx
.text:0040BD79                 imul    edx
.text:0040BD7B                 mov     eax, ecx
.text:0040BD7D                 sar     eax, 1Fh
.text:0040BD80                 sar     edx, 6
.text:0040BD83                 sub     edx, eax
.text:0040BD85                 mov     [ebx+4], edx
.text:0040BD88                 xor     edx, edx
.text:0040BD8A
.text:0040BD8A loc_40BD8A:                             ; CODE XREF: sub_40BD40+26↑j
.text:0040BD8A                 mov     ebx, [esp+1Ch+var_4]
.text:0040BD8E                 mov     eax, edx
.text:0040BD90                 add     esp, 1Ch
.text:0040BD93                 retn
.text:0040BD93 sub_40BD40      endp
.text:0040BD93
.text:0040BD93 ; ---------------------------------------------------------------------------
.text:0040BD94                 align 10h
.text:0040BDA0
.text:0040BDA0 ; =============== S U B R O U T I N E =======================================
.text:0040BDA0
.text:0040BDA0
.text:0040BDA0 sub_40BDA0      proc near               ; CODE XREF: sub_40B510+1A7↑p
.text:0040BDA0                                         ; sub_40B510+237↑p ...
.text:0040BDA0                 mov     edx, ds:dword_4101C0
.text:0040BDA6                 test    edx, edx
.text:0040BDA8                 jnz     short loc_40BDB0
.text:0040BDAA                 jmp     getenv
.text:0040BDAA ; ---------------------------------------------------------------------------
.text:0040BDAF                 align 10h
.text:0040BDB0
.text:0040BDB0 loc_40BDB0:                             ; CODE XREF: sub_40BDA0+8↑j
.text:0040BDB0                 xor     eax, eax
.text:0040BDB2                 retn
.text:0040BDB2 sub_40BDA0      endp
.text:0040BDB2
.text:0040BDB2 ; ---------------------------------------------------------------------------
.text:0040BDB3                 align 10h
.text:0040BDC0
.text:0040BDC0 ; =============== S U B R O U T I N E =======================================
.text:0040BDC0
.text:0040BDC0
.text:0040BDC0 sub_40BDC0      proc near               ; CODE XREF: sub_40BD40+1A↑p
.text:0040BDC0
.text:0040BDC0 lpTimeZoneInformation= dword ptr -0DCh
.text:0040BDC0 var_D8          = dword ptr -0D8h
.text:0040BDC0 var_D4          = dword ptr -0D4h
.text:0040BDC0 var_D0          = dword ptr -0D0h
.text:0040BDC0 SystemTimeAsFileTime= _FILETIME ptr -0C4h
.text:0040BDC0 TimeZoneInformation= _TIME_ZONE_INFORMATION ptr -0BCh
.text:0040BDC0 arg_0           = dword ptr  4
.text:0040BDC0 arg_4           = dword ptr  8
.text:0040BDC0
.text:0040BDC0                 push    edi
.text:0040BDC1                 push    esi
.text:0040BDC2                 push    ebx
.text:0040BDC3                 sub     esp, 0D0h
.text:0040BDC9                 mov     ebx, [esp+0DCh+arg_4]
.text:0040BDD0                 mov     edi, [esp+0DCh+arg_0]
.text:0040BDD7                 test    ebx, ebx
.text:0040BDD9                 jz      short loc_40BE04
.text:0040BDDB                 lea     edx, [esp+0DCh+TimeZoneInformation]
.text:0040BDDF                 mov     [esp+0DCh+lpTimeZoneInformation], edx ; lpTimeZoneInformation
.text:0040BDE2                 call    GetTimeZoneInformation
.text:0040BDE7                 sub     esp, 4
.text:0040BDEA                 cmp     eax, 0FFFFFFFFh
.text:0040BDED                 jz      loc_40BE85
.text:0040BDF3                 xor     ecx, ecx
.text:0040BDF5                 mov     esi, [esp+0DCh+TimeZoneInformation.Bias]
.text:0040BDF9                 cmp     eax, 2
.text:0040BDFC                 setz    cl
.text:0040BDFF                 mov     [ebx], esi
.text:0040BE01                 mov     [ebx+4], ecx
.text:0040BE04
.text:0040BE04 loc_40BE04:                             ; CODE XREF: sub_40BDC0+19↑j
.text:0040BE04                                         ; sub_40BDC0+E0↓j
.text:0040BE04                 test    edi, edi
.text:0040BE06                 jz      short loc_40BE79
.text:0040BE08                 lea     ecx, [esp+0DCh+SystemTimeAsFileTime]
.text:0040BE0C                 mov     [esp+0DCh+lpTimeZoneInformation], ecx ; lpSystemTimeAsFileTime
.text:0040BE0F                 call    GetSystemTimeAsFileTime
.text:0040BE14                 sub     esp, 4
.text:0040BE17                 mov     ebx, [esp+0DCh+SystemTimeAsFileTime.dwLowDateTime]
.text:0040BE1B                 mov     [esp+0DCh+var_D4], 989680h
.text:0040BE23                 mov     esi, [esp+0DCh+SystemTimeAsFileTime.dwHighDateTime]
.text:0040BE27                 mov     [esp+0DCh+var_D0], 0
.text:0040BE2F                 add     ebx, 2AC18000h
.text:0040BE35                 adc     esi, 0FE624E21h
.text:0040BE3B                 mov     [esp+0DCh+SystemTimeAsFileTime.dwLowDateTime], ebx
.text:0040BE3F                 mov     [esp+0DCh+lpTimeZoneInformation], ebx
.text:0040BE42                 mov     [esp+0DCh+SystemTimeAsFileTime.dwHighDateTime], esi
.text:0040BE46                 mov     [esp+0DCh+var_D8], esi
.text:0040BE4A                 call    sub_40D4D0
.text:0040BE4F                 mov     [edi], eax
.text:0040BE51                 mov     [esp+0DCh+lpTimeZoneInformation], ebx
.text:0040BE54                 mov     [esp+0DCh+var_D4], 989680h
.text:0040BE5C                 mov     [esp+0DCh+var_D0], 0
.text:0040BE64                 mov     [esp+0DCh+var_D8], esi
.text:0040BE68                 call    sub_40D5F0
.text:0040BE6D                 lea     ebx, [eax+eax*4]
.text:0040BE70                 lea     edx, [ebx+ebx*4]
.text:0040BE73                 shl     edx, 2
.text:0040BE76                 mov     [edi+4], edx
.text:0040BE79
.text:0040BE79 loc_40BE79:                             ; CODE XREF: sub_40BDC0+46↑j
.text:0040BE79                 add     esp, 0D0h
.text:0040BE7F                 xor     eax, eax
.text:0040BE81                 pop     ebx
.text:0040BE82                 pop     esi
.text:0040BE83                 pop     edi
.text:0040BE84                 retn
.text:0040BE85 ; ---------------------------------------------------------------------------
.text:0040BE85
.text:0040BE85 loc_40BE85:                             ; CODE XREF: sub_40BDC0+2D↑j
.text:0040BE85                 mov     dword ptr [ebx], 0
.text:0040BE8B                 mov     dword ptr [ebx+4], 0
.text:0040BE92                 call    sub_408340
.text:0040BE97                 mov     esi, eax
.text:0040BE99                 call    _errno
.text:0040BE9E                 mov     [eax], esi
.text:0040BEA0                 jmp     loc_40BE04
.text:0040BEA0 sub_40BDC0      endp
.text:0040BEA0
.text:0040BEA0 ; ---------------------------------------------------------------------------
.text:0040BEA5                 align 10h
.text:0040BEB0
.text:0040BEB0 ; =============== S U B R O U T I N E =======================================
.text:0040BEB0
.text:0040BEB0 ; Attributes: thunk
.text:0040BEB0
.text:0040BEB0 ; HRESULT __stdcall OleInitialize(LPVOID pvReserved)
.text:0040BEB0 OleInitialize   proc near               ; CODE XREF: sub_407E20+1A↑p
.text:0040BEB0
.text:0040BEB0 pvReserved      = dword ptr  4
.text:0040BEB0
.text:0040BEB0                 jmp     ds:__imp_OleInitialize
.text:0040BEB0 OleInitialize   endp
.text:0040BEB0
.text:0040BEB0 ; ---------------------------------------------------------------------------
.text:0040BEB6                 align 10h
.text:0040BEC0
.text:0040BEC0 ; =============== S U B R O U T I N E =======================================
.text:0040BEC0
.text:0040BEC0 ; Attributes: thunk
.text:0040BEC0
.text:0040BEC0 ; HRESULT __stdcall CoCreateInstance(const IID *const rclsid, LPUNKNOWN pUnkOuter, DWORD dwClsContext, const IID *const riid, LPVOID *ppv)
.text:0040BEC0 CoCreateInstance proc near              ; CODE XREF: sub_407E20+52↑p
.text:0040BEC0
.text:0040BEC0 rclsid          = dword ptr  4
.text:0040BEC0 pUnkOuter       = dword ptr  8
.text:0040BEC0 dwClsContext    = dword ptr  0Ch
.text:0040BEC0 riid            = dword ptr  10h
.text:0040BEC0 ppv             = dword ptr  14h
.text:0040BEC0
.text:0040BEC0                 jmp     ds:__imp_CoCreateInstance
.text:0040BEC0 CoCreateInstance endp
.text:0040BEC0
.text:0040BEC0 ; ---------------------------------------------------------------------------
.text:0040BEC6                 align 10h
.text:0040BED0
.text:0040BED0 ; =============== S U B R O U T I N E =======================================
.text:0040BED0
.text:0040BED0 ; Attributes: thunk
.text:0040BED0
.text:0040BED0 ; void __stdcall CoUninitialize()
.text:0040BED0 CoUninitialize  proc near               ; CODE XREF: sub_407E20+14E↑p
.text:0040BED0                                         ; sub_407E20+16D↑p
.text:0040BED0                 jmp     ds:__imp_CoUninitialize
.text:0040BED0 CoUninitialize  endp
.text:0040BED0
.text:0040BED0 ; ---------------------------------------------------------------------------
.text:0040BED6                 align 10h
.text:0040BEE0                 add     al, 0BAh ; 'º'
.text:0040BEE2                 retf
.text:0040BEE2 ; ---------------------------------------------------------------------------
.text:0040BEE3                 db 7Eh
.text:0040BEE4                 dd 11CF2D97h, 0AA0029A2h, 52733D00h, 40FC6ED4h, 11CF2438h
.text:0040BEE4                 dd 8DBA3h, 225F136h, 40FC6ED8h, 11CF2438h, 8DBA3h, 225F136h
.text:0040BEE4                 dd 40FC6ED3h, 11CF2438h, 8DBA3h, 225F136h, 0DE86A58h, 11CF2BAAh
.text:0040BEE4                 dd 0AA0029A2h, 52733D00h, 40FC6ED6h, 11CF2438h, 8DBA3h
.text:0040BEE4                 dd 225F136h, 40FC6ED7h, 11CF2438h, 8DBA3h, 225F136h, 0DE86A56h
.text:0040BEE4                 dd 11CF2BAAh, 0AA0029A2h, 52733D00h, 0DE86A55h, 11CF2BAAh
.text:0040BEE4                 dd 0AA0029A2h, 52733D00h, 0DE86A51h, 11CF2BAAh, 0AA0029A2h
.text:0040BEE4                 dd 52733D00h, 0DE86A57h, 11CF2BAAh, 0AA0029A2h, 52733D00h
.text:0040BEE4                 dd 0DE86A52h, 11CF2BAAh, 0AA0029A2h, 52733D00h, 0DE86A54h
.text:0040BEE4                 dd 11CF2BAAh, 0AA0029A2h, 52733D00h, 0DE86A53h, 11CF2BAAh
.text:0040BEE4                 dd 0AA0029A2h, 52733D00h, 40FC6ED9h, 11CF2438h, 8DBA3h
.text:0040BEE4                 dd 225F136h, 40FC6ED5h, 11CF2438h, 8DBA3h, 225F136h, 0DE86A50h
.text:0040BEE4                 dd 11CF2BAAh, 0AA0029A2h, 52733D00h, 7DD95802h, 11CF9882h
.text:0040BEE4                 dd 0AA00A99Fh, 0C4426C00h, 7DD95801h, 11CF9882h, 0AA00A99Fh
.text:0040BEE4                 dd 0C4426C00h, 330h, 0
.text:0040C018                 dd 0C0h, 46000000h, 0BE35201h, 11CE8F91h, 0AA00E39Dh, 51B84B00h
.text:0040C018                 dd 0BE35200h, 11CE8F91h, 0AA00E39Dh, 51B84B00h, 0BE35202h
.text:0040C018                 dd 11CE8F91h, 0AA00E39Dh, 51B84B00h, 0FB8F0822h, 101B0164h
.text:0040C018                 dd 8ED84h, 13C72E2Bh, 332h, 0
.text:0040C068                 dd 0C0h, 46000000h, 79EAC9E7h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0040C068                 dd 79EAC9E3h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9E4h
.text:0040C068                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9E2h, 11CEBAF9h
.text:0040C068                 dd 0AA00828Ch, 0BA94B00h, 79EAC9E5h, 11CEBAF9h, 0AA00828Ch
.text:0040C068                 dd 0BA94B00h, 1Bh, 0
.text:0040C0C8                 dd 0C0h, 46000000h, 1Ch, 0
.text:0040C0D8                 dd 0C0h, 46000000h, 331h, 0
.text:0040C0E8                 dd 0C0h, 46000000h, 79EAC9E6h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0040C0E8                 dd 312h, 0
.text:0040C108                 dd 0C0h, 46000000h, 30Eh, 0
.text:0040C118                 dd 0C0h, 46000000h, 30Dh, 0
.text:0040C128                 dd 0C0h, 46000000h, 311h, 0
.text:0040C138                 dd 0C0h, 46000000h, 313h, 0
.text:0040C148                 dd 0C0h, 46000000h, 30Ch, 0
.text:0040C158                 dd 0C0h, 46000000h, 30Fh, 0
.text:0040C168                 dd 0C0h, 46000000h, 310h, 0
.text:0040C178                 dd 0C0h, 46000000h, 79EAC9F1h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0040C178                 dd 0FB8F0821h, 101B0164h, 8ED84h, 13C72E2Bh, 316h, 0
.text:0040C1A8                 dd 0C0h, 46000000h, 319h, 0
.text:0040C1B8                 dd 0C0h, 46000000h, 315h, 0
.text:0040C1C8                 dd 0C0h, 46000000h, 316h, 0
.text:0040C1D8                 dd 0C0h, 46000000h, 315h, 0
.text:0040C1E8                 dd 0C0h, 46000000h, 2E005h, 0
.text:0040C1F8                 dd 0C0h, 46000000h, 0BE35203h, 11CE8F91h, 0AA00E39Dh, 51B84B00h
.text:0040C1F8                 dd 79EAC9D0h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9D1h
.text:0040C1F8                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 17h, 0
.text:0040C238                 dd 0C0h, 46000000h, 0BE35204h, 11CE8F91h, 0AA00E39Dh, 51B84B00h
.text:0040C238                 dd 79EAC9E0h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9E1h
.text:0040C238                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 8856F961h, 11D0340Ah
.text:0040C238                 dd 0C0006BA9h, 0A205D74Fh, 0EAB22AC2h, 11CF30C1h, 0EBA7h
.text:0040C238                 dd 0BAE5BC0h, 34A715A0h, 11D06587h, 20004A92h, 4DACC7AFh
.text:0040C238                 dd 96300DA0h, 11CF2BABh, 0AA0029A2h, 52733D00h, 0D5CDD502h
.text:0040C238                 dd 101B2E9Ch, 89793h, 0AEF92C2Bh, 0F29F85E0h, 10684FF9h
.text:0040C238                 dd 891ABh, 0D9B3272Bh, 0D5CDD505h, 101B2E9Ch, 89793h, 0AEF92C2Bh
.text:0040C238                 dd 6650430Ch, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504301h
.text:0040C238                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 6650430Fh, 101ABE0Fh
.text:0040C238                 dd 0AA00BB8Bh, 0AB0C3000h, 66504310h, 101ABE0Fh, 0AA00BB8Bh
.text:0040C238                 dd 0AB0C3000h, 6650430Dh, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:0040C238                 dd 6650430Eh, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504312h
.text:0040C238                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504311h, 101ABE0Fh
.text:0040C238                 dd 0AA00BB8Bh, 0AB0C3000h, 66504313h, 101ABE0Fh, 0AA00BB8Bh
.text:0040C238                 dd 0AB0C3000h, 66504300h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:0040C238                 dd 2DE81h, 0
.text:0040C388                 dd 0C0h, 46000000h, 4 dup(0)
.text:0040C3A0                 dd 6650430Bh, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 2DE80h
.text:0040C3A0                 dd 0
.text:0040C3B8                 dd 0C0h, 46000000h, 6650430Ah, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:0040C3B8                 dd 66504306h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504302h
.text:0040C3B8                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504308h, 101ABE0Fh
.text:0040C3B8                 dd 0AA00BB8Bh, 0AB0C3000h, 66504304h, 101ABE0Fh, 0AA00BB8Bh
.text:0040C3B8                 dd 0AB0C3000h, 66504307h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:0040C3B8                 dd 66504303h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504309h
.text:0040C3B8                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504305h, 101ABE0Fh
.text:0040C3B8                 dd 0AA00BB8Bh, 0AB0C3000h, 618736E0h, 11CF3C3Dh, 0AA000C81h
.text:0040C3B8                 dd 719B3800h, 1EA4DBF0h, 11CF3C3Bh, 0AA000C81h, 719B3800h
.text:0040C3B8                 dd 0BB1A2AE1h, 11CFA4F9h, 8000208Fh, 64D02C5Fh, 0EAE1BA61h
.text:0040C3B8                 dd 11CFA4EDh, 8000208Fh, 64D02C5Fh, 0BB1A2AE2h, 11CFA4F9h
.text:0040C3B8                 dd 8000208Fh, 64D02C5Fh, 0DB01A1E3h, 11CFA42Bh, 8000208Fh
.text:0040C3B8                 dd 64D02C5Fh, 0D10F6761h, 11CF83E9h, 8000208Fh, 64D02C5Fh
.text:0040C3B8                 dd 10Fh, 0
.text:0040C4C8                 dd 0C0h, 46000000h, 125h, 0
.text:0040C4D8                 dd 0C0h, 46000000h, 3AF24290h, 11CE0C96h, 0AA00CFA0h, 0B80A6000h
.text:0040C4D8                 dd 79EAC9D3h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9D0h
.text:0040C4D8                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 0Eh, 0
.text:0040C518                 dd 0C0h, 46000000h, 0FC4801A1h, 11CF2BA9h, 0AA0029A2h
.text:0040C518                 dd 52733D00h, 79EAC9CDh, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0040C518                 dd 79EAC9C1h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9CBh
.text:0040C518                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9C0h, 11CEBAF9h
.text:0040C518                 dd 0AA00828Ch, 0BA94B00h, 2E013h, 0
.text:0040C578                 dd 0C0h, 46000000h, 2E012h, 0
.text:0040C588                 dd 0C0h, 46000000h, 1008C4A0h, 11CF7613h, 2000F19Ah, 0F4726EAFh
.text:0040C588                 dd 140h, 0
.text:0040C5A8                 dd 0C0h, 46000000h, 1, 0
.text:0040C5B8                 dd 0C0h, 46000000h, 0B196B28Fh, 101ABAB4h, 0AA009CB6h
.text:0040C5B8                 dd 71D3400h, 13Dh, 0
.text:0040C5D8                 dd 0C0h, 46000000h, 0F4F569D1h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:0040C5D8                 dd 79EAC9D1h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 0B196B286h
.text:0040C5D8                 dd 101ABAB4h, 0AA009CB6h, 71D3400h, 0B196B284h, 101ABAB4h
.text:0040C5D8                 dd 0AA009CB6h, 71D3400h, 12Ah, 0
.text:0040C628                 dd 0C0h, 46000000h, 0B722BCCAh, 101B4E68h, 0AA00BCA2h
.text:0040C628                 dd 70474000h, 22F03340h, 101B547Dh, 8658Eh, 19D12B2Bh
.text:0040C628                 dd 20405h, 0
.text:0040C658                 dd 0C0h, 46000000h, 2040Eh, 0
.text:0040C668                 dd 0C0h, 46000000h, 20406h, 0
.text:0040C678                 dd 0C0h, 46000000h, 2040Fh, 0
.text:0040C688                 dd 0C0h, 46000000h, 110h, 0
.text:0040C698                 dd 0C0h, 46000000h, 10Eh, 0
.text:0040C6A8                 dd 0C0h, 46000000h, 123h, 0
.text:0040C6B8                 dd 0C0h, 46000000h, 124h, 0
.text:0040C6C8                 dd 0C0h, 46000000h, 13h, 0
.text:0040C6D8                 dd 0C0h, 46000000h, 14h, 0
.text:0040C6E8                 dd 0C0h, 46000000h, 15h, 0
.text:0040C6F8                 dd 0C0h, 46000000h, 20400h, 0
.text:0040C708                 dd 0C0h, 46000000h, 121h, 0
.text:0040C718                 dd 0C0h, 46000000h, 122h, 0
.text:0040C728                 dd 0C0h, 46000000h, 2E011h, 0
.text:0040C738                 dd 0C0h, 46000000h, 108h, 0
.text:0040C748                 dd 0C0h, 46000000h, 0B196B285h, 101ABAB4h, 0AA009CB6h
.text:0040C748                 dd 71D3400h, 0B196B287h, 101ABAB4h, 0AA009CB6h, 71D3400h
.text:0040C748                 dd 103h, 0
.text:0040C778                 dd 0C0h, 46000000h, 2E000h, 0
.text:0040C788                 dd 0C0h, 46000000h, 106h, 0
.text:0040C798                 dd 0C0h, 46000000h, 79EAC9C6h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0040C798                 dd 107h, 0
.text:0040C7B8                 dd 0C0h, 46000000h, 102h, 0
.text:0040C7C8                 dd 0C0h, 46000000h, 104h, 0
.text:0040C7D8                 dd 0C0h, 46000000h, 0B722BCC8h, 101B4E68h, 0AA00BCA2h
.text:0040C7D8                 dd 70474000h, 0B3E7C340h, 11CEEF97h, 0AA00C99Bh, 18E6000h
.text:0040C7D8                 dd 105h, 0
.text:0040C808                 dd 0C0h, 46000000h, 13Bh, 0
.text:0040C818                 dd 0C0h, 46000000h, 139h, 0
.text:0040C828                 dd 0C0h, 46000000h, 0Dh, 0
.text:0040C838                 dd 0C0h, 46000000h, 3C374A42h, 11CFBAE4h, 0AA007DBFh, 0EE466900h
.text:0040C838                 dd 101h, 0
.text:0040C858                 dd 0C0h, 46000000h, 100h, 0
.text:0040C868                 dd 0C0h, 46000000h, 20404h, 0
.text:0040C878                 dd 0C0h, 46000000h, 1CF2B120h, 101B547Dh, 8658Eh, 19D12B2Bh
.text:0040C878                 dd 3127CA40h, 11CE446Eh, 0AA003581h, 51B84B00h, 19h, 0
.text:0040C8A8                 dd 0C0h, 46000000h, 99CAF010h, 11CF415Eh, 0AA001488h, 0F569B500h
.text:0040C8A8                 dd 89BCB740h, 101A6119h, 0DD00B7BCh, 0AF550601h, 0BEF6E002h
.text:0040C8A8                 dd 101AA874h, 0AA00BA8Bh, 0AB0C3000h, 0BEF6E003h, 101AA874h
.text:0040C8A8                 dd 0AA00BA8Bh, 0AB0C3000h, 146h, 0
.text:0040C8F8                 dd 0C0h, 46000000h, 79EAC9C3h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0040C8F8                 dd 79EAC9C7h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9C5h
.text:0040C8F8                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9C2h, 11CEBAF9h
.text:0040C8F8                 dd 0AA00828Ch, 0BA94B00h, 79EAC9C4h, 11CEBAF9h, 0AA00828Ch
.text:0040C8F8                 dd 0BA94B00h, 79EAC9D2h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0040C8F8                 dd 79EAC9D7h, 11CEBAFAh, 0AA00828Ch, 0BA94B00h, 11h, 0
.text:0040C978                 dd 0C0h, 46000000h, 0E6D4D90h, 11CF6738h, 0AA000896h, 0B40D6800h
.text:0040C978                 dd 0Ah, 0
.text:0040C998                 dd 0C0h, 46000000h, 2, 0
.text:0040C9A8                 dd 0C0h, 46000000h, 1Dh, 0
.text:0040C9B8                 dd 0C0h, 46000000h, 3, 0
.text:0040C9C8                 dd 0C0h, 46000000h, 16h, 0
.text:0040C9D8                 dd 0C0h, 46000000h, 0F77459A0h, 11CFBF9Ah, 0C0004EBAh
.text:0040C9D8                 dd 1608D74Fh, 0Fh, 0
.text:0040C9F8                 dd 0C0h, 46000000h, 20h, 0
.text:0040CA08                 dd 0C0h, 46000000h, 0CB5BDC81h, 11CF93C1h, 8000208Fh, 64D02C5Fh
.text:0040CA08                 dd 0FC4801A3h, 11CF2BA9h, 0AA0029A2h, 52733D00h, 111h
.text:0040CA08                 dd 0
.text:0040CA38                 dd 0C0h, 46000000h, 11Eh, 0
.text:0040CA48                 dd 0C0h, 46000000h, 128h, 0
.text:0040CA58                 dd 0C0h, 46000000h, 129h, 0
.text:0040CA68                 dd 0C0h, 46000000h, 118h, 0
.text:0040CA78                 dd 0C0h, 46000000h, 0B722BCCBh, 101B4E68h, 0AA00BCA2h
.text:0040CA78                 dd 70474000h, 11Bh, 0
.text:0040CA98                 dd 0C0h, 46000000h, 0B196B288h, 101ABAB4h, 0AA009CB6h
.text:0040CA98                 dd 71D3400h, 0B196B289h, 101ABAB4h, 0AA009CB6h, 71D3400h
.text:0040CA98                 dd 0B722BCC5h, 101B4E68h, 0AA00BCA2h, 70474000h, 0B722BCC7h
.text:0040CA98                 dd 101B4E68h, 0AA00BCA2h, 70474000h, 0B722BCC6h, 101B4E68h
.text:0040CA98                 dd 0AA00BCA2h, 70474000h, 117h, 0
.text:0040CAF8                 dd 0C0h, 46000000h, 116h, 0
.text:0040CB08                 dd 0C0h, 46000000h, 113h, 0
.text:0040CB18                 dd 0C0h, 46000000h, 1C2056CCh, 101B5EF4h, 0AA00C88Bh, 293B3E00h
.text:0040CB18                 dd 119h, 0
.text:0040CB38                 dd 0C0h, 46000000h, 9C2CAD80h, 11CF3424h, 0AA0070B6h, 0D8D64C00h
.text:0040CB38                 dd 922EADA0h, 11CF3424h, 0AA0070B6h, 0D8D64C00h, 115h
.text:0040CB38                 dd 0
.text:0040CB68                 dd 0C0h, 46000000h, 11Ch, 0
.text:0040CB78                 dd 0C0h, 46000000h, 11Dh, 0
.text:0040CB88                 dd 0C0h, 46000000h, 11Fh, 0
.text:0040CB98                 dd 0C0h, 46000000h, 112h, 0
.text:0040CBA8                 dd 0C0h, 46000000h, 0A1FAF330h, 11CEEF97h, 0AA00C99Bh
.text:0040CBA8                 dd 18E6000h, 120h, 0
.text:0040CBC8                 dd 0C0h, 46000000h, 97D001F2h, 9B11CEEFh, 0AA00C9h, 18E60h
.text:0040CBC8                 dd 0D001F200h, 11CEEF97h, 0AA00C99Bh, 18E6000h, 894AD3B0h
.text:0040CBC8                 dd 11CEEF97h, 0AA00C99Bh, 18E6000h, 114h, 0
.text:0040CC08                 dd 0C0h, 46000000h, 521A28F0h, 11CEE40Bh, 0AA00C9B2h, 37096800h
.text:0040CC08                 dd 49384070h, 11CEE40Ah, 0AA00C9B2h, 37096800h, 9, 0
.text:0040CC38                 dd 0C0h, 46000000h, 0D5F569D0h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:0040CC38                 dd 11Ah, 0
.text:0040CC58                 dd 0C0h, 46000000h, 376BD3AAh, 101B3845h, 8ED84h, 13C72E2Bh
.text:0040CC58                 dd 10Ch, 0
.text:0040CC78                 dd 0C0h, 46000000h
.text:0040CC80 dword_40CC80    dd 10Bh, 0              ; DATA XREF: sub_407E20+75↑o
.text:0040CC88                 dd 0C0h, 46000000h, 0BD1AE5E0h, 11CEA6AEh, 425037BDh, 0C100h
.text:0040CC88                 dd 79EAC9C9h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 37D84F60h
.text:0040CC88                 dd 11CE42CBh, 0AA003581h, 51B84B00h, 22F55881h, 11D0280Bh
.text:0040CC88                 dd 0A000A9A8h, 4200CC9h, 10Ah, 0
.text:0040CCD8                 dd 0C0h, 46000000h, 109h, 0
.text:0040CCE8                 dd 0C0h, 46000000h, 7FD52380h, 101B4E07h, 82DAEh, 13C72E2Bh
.text:0040CCE8                 dd 7BF80980h, 101ABF32h, 0AA00BB8Bh, 0AB0C3000h, 7BF80981h
.text:0040CCE8                 dd 101ABF32h, 0AA00BB8Bh, 0AB0C3000h, 55980BA0h, 11CF35AAh
.text:0040CCE8                 dd 0AA0071B6h, 0D8D64C00h, 0B722BCC9h, 101B4E68h, 0AA00BCA2h
.text:0040CCE8                 dd 70474000h, 0A9D758A0h, 11CF4617h, 0AA00FC95h, 0B40D6800h
.text:0040CCE8                 dd 55272A00h, 11CE42CBh, 0AA003581h, 51B84B00h, 22F55882h
.text:0040CCE8                 dd 11D0280Bh, 0A000A9A8h, 4200CC9h, 0B196B28Ah, 101ABAB4h
.text:0040CCE8                 dd 0AA009CB6h, 71D3400h, 9BFBBC02h, 101AEFF1h, 0AA00ED84h
.text:0040CCE8                 dd 71D3400h, 0B196B28Dh, 101ABAB4h, 0AA009CB6h, 71D3400h
.text:0040CCE8                 dd 1E44665h, 101B24ACh, 8ED84h, 13C72E2Bh, 0B196B28Ch
.text:0040CCE8                 dd 101ABAB4h, 0AA009CB6h, 71D3400h, 13Ah, 0
.text:0040CDC8                 dd 0C0h, 46000000h, 138h, 0
.text:0040CDD8                 dd 0C0h, 46000000h, 0B196B283h, 101ABAB4h, 0AA009CB6h
.text:0040CDD8                 dd 71D3400h, 0A6BC3AC0h, 11CEDBAAh, 0AA00E39Dh, 51B84B00h
.text:0040CDD8                 dd 27h, 0
.text:0040CE08                 dd 0C0h, 46000000h, 8, 0
.text:0040CE18                 dd 0C0h, 46000000h, 0CF51ED10h, 11CF62FEh, 0A00086BFh
.text:0040CE18                 dd 364803C9h, 0F29F6BC0h, 11CE5021h, 15AAh, 3F290169h
.text:0040CE18                 dd 20D00h, 0
.text:0040CE48                 dd 0C0h, 46000000h, 20D03h, 0
.text:0040CE58                 dd 0C0h, 46000000h, 12h, 0
.text:0040CE68                 dd 0C0h, 46000000h, 4, 0
.text:0040CE78                 dd 0C0h, 46000000h, 0D5F56B60h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:0040CE78                 dd 7, 0
.text:0040CE98                 dd 0C0h, 46000000h, 0D5F56A34h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:0040CE98                 dd 3BD5F56Ah, 0B5101A59h, 2B000869h, 7ABF2Dh, 5, 0
.text:0040CEC8                 dd 0C0h, 46000000h, 0D5F56AFCh, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:0040CEC8                 dd 126h, 0
.text:0040CEE8                 dd 0C0h, 46000000h, 10h, 0
.text:0040CEF8                 dd 0C0h, 46000000h, 0C733A30h, 11CE2A1Ch, 0AA00E5ADh, 3D774400h
.text:0040CEF8                 dd 0F4F569D0h, 101A593Bh, 869B5h, 7ABF2D2Bh, 13Eh, 0
.text:0040CF28                 dd 0C0h, 46000000h, 6D5140C1h, 11CE7436h, 0AA003480h, 0FA096000h
.text:0040CF28                 dd 742B0E01h, 101B14E6h, 0AA004E91h, 0AB0C3000h, 0B196B28Bh
.text:0040CF28                 dd 101ABAB4h, 0AA009CB6h, 71D3400h, 18h, 0
.text:0040CF68                 dd 0C0h, 46000000h, 0Bh, 0
.text:0040CF78                 dd 0C0h, 46000000h, 0Ch, 0
.text:0040CF88                 dd 0C0h, 46000000h, 26h, 0
.text:0040CF98                 dd 0C0h, 46000000h, 6, 0
.text:0040CFA8                 dd 0C0h, 46000000h, 0DF0B3D60h, 101B548Fh, 8658Eh, 19D12B2Bh
.text:0040CFA8                 dd 548793C0h, 11CF9E74h, 0A0005596h, 234903C9h, 0D5F78C80h
.text:0040CFA8                 dd 11CF5252h, 0AA00FA90h, 6E104200h, 20410h, 0
.text:0040CFE8                 dd 0C0h, 46000000h, 20403h, 0
.text:0040CFF8                 dd 0C0h, 46000000h, 20401h, 0
.text:0040D008                 dd 0C0h, 46000000h, 20412h, 0
.text:0040D018                 dd 0C0h, 46000000h, 20402h, 0
.text:0040D028                 dd 0C0h, 46000000h, 20411h, 0
.text:0040D038                 dd 0C0h, 46000000h, 2 dup(0)
.text:0040D048                 dd 0C0h, 46000000h, 3C374A41h, 11CFBAE4h, 0AA007DBFh, 0EE466900h
.text:0040D048                 dd 10Dh, 0
.text:0040D068                 dd 0C0h, 46000000h, 127h, 0
.text:0040D078                 dd 0C0h, 46000000h, 3AF24292h, 11CE0C96h, 0AA00CFA0h, 0B80A6000h
.text:0040D078                 dd 0EAB22AC1h, 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0D30C1661h
.text:0040D078                 dd 11D0CDAFh, 0C0003E8Ah, 6EE2C94Fh, 2DF05h, 0
.text:0040D0B8                 dd 0C0h, 46000000h, 79EAC9D8h, 11CEBAFAh, 0AA00828Ch, 0BA94B00h
.text:0040D0B8                 dd 79EAC9D6h, 11CEBAFAh, 0AA00828Ch, 0BA94B00h, 79EAC9D5h
.text:0040D0B8                 dd 11CEBAFAh, 0AA00828Ch, 0BA94B00h, 20430h, 0
.text:0040D0F8                 dd 0C0h, 46000000h, 2DE0Eh, 0
.text:0040D108                 dd 0C0h, 46000000h, 2DE18h, 0
.text:0040D118                 dd 0C0h, 46000000h, 2DE1Eh, 0
.text:0040D128                 dd 0C0h, 46000000h, 2DE19h, 0
.text:0040D138                 dd 0C0h, 46000000h, 2DE0Fh, 0
.text:0040D148                 dd 0C0h, 46000000h, 2DE12h, 0
.text:0040D158                 dd 0C0h, 46000000h, 2DE21h, 0
.text:0040D168                 dd 0C0h, 46000000h, 2DE01h, 0
.text:0040D178                 dd 0C0h, 46000000h, 2DE0Bh, 0
.text:0040D188                 dd 0C0h, 46000000h, 2DE0Dh, 0
.text:0040D198                 dd 0C0h, 46000000h, 2DE02h, 0
.text:0040D1A8                 dd 0C0h, 46000000h, 2DE1Fh, 0
.text:0040D1B8                 dd 0C0h, 46000000h, 2DE04h, 0
.text:0040D1C8                 dd 0C0h, 46000000h, 2DE0Ch, 0
.text:0040D1D8                 dd 0C0h, 46000000h, 2DE05h, 0
.text:0040D1E8                 dd 0C0h, 46000000h, 2DE1Ch, 0
.text:0040D1F8                 dd 0C0h, 46000000h, 2DE06h, 0
.text:0040D208                 dd 0C0h, 46000000h, 2DE13h, 0
.text:0040D218                 dd 0C0h, 46000000h, 2DE10h, 0
.text:0040D228                 dd 0C0h, 46000000h, 2DE22h, 0
.text:0040D238                 dd 0C0h, 46000000h, 2DE09h, 0
.text:0040D248                 dd 0C0h, 46000000h, 2DE23h, 0
.text:0040D258                 dd 0C0h, 46000000h, 2DE0Ah, 0
.text:0040D268                 dd 0C0h, 46000000h, 2DE1Dh, 0
.text:0040D278                 dd 0C0h, 46000000h, 2DE11h, 0
.text:0040D288                 dd 0C0h, 46000000h, 2DE15h, 0
.text:0040D298                 dd 0C0h, 46000000h, 2DE1Bh, 0
.text:0040D2A8                 dd 0C0h, 46000000h, 2DE16h, 0
.text:0040D2B8                 dd 0C0h, 46000000h, 2DE20h, 0
.text:0040D2C8                 dd 0C0h, 46000000h, 2DE07h, 0
.text:0040D2D8                 dd 0C0h, 46000000h, 2DE1Ah, 0
.text:0040D2E8                 dd 0C0h, 46000000h, 2DE17h, 0
.text:0040D2F8                 dd 0C0h, 46000000h, 2DE14h, 0
.text:0040D308                 dd 0C0h, 46000000h, 2DE03h, 0
.text:0040D318                 dd 0C0h, 46000000h, 2DE08h, 0
.text:0040D328                 dd 0C0h, 46000000h, 0B722BE00h, 101B4E68h, 0AA00BCA2h
.text:0040D328                 dd 70474000h, 0FC4801A5h, 11CF2BA9h, 0AA0029A2h, 52733D00h
.text:0040D350
.text:0040D350 ; =============== S U B R O U T I N E =======================================
.text:0040D350
.text:0040D350 ; Attributes: thunk
.text:0040D350
.text:0040D350 ; size_t __cdecl mbrtowc(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.text:0040D350 mbrtowc         proc near               ; CODE XREF: sub_4045A0+757↑p
.text:0040D350
.text:0040D350 DstCh           = dword ptr  4
.text:0040D350 SrcCh           = dword ptr  8
.text:0040D350 SizeInBytes     = dword ptr  0Ch
.text:0040D350 State           = dword ptr  10h
.text:0040D350
.text:0040D350                 jmp     ds:__imp_mbrtowc
.text:0040D350 mbrtowc         endp
.text:0040D350
.text:0040D350 ; ---------------------------------------------------------------------------
.text:0040D356                 align 10h
.text:0040D360
.text:0040D360 ; =============== S U B R O U T I N E =======================================
.text:0040D360
.text:0040D360 ; Attributes: bp-based frame
.text:0040D360
.text:0040D360 sub_40D360      proc near               ; CODE XREF: sub_401080+C2↑p
.text:0040D360                 push    ebp
.text:0040D361                 mov     ecx, offset dword_410000
.text:0040D366                 cmp     ecx, offset dword_410000
.text:0040D36C                 mov     ebp, esp
.text:0040D36E                 jnb     short loc_40D386
.text:0040D370
.text:0040D370 loc_40D370:                             ; CODE XREF: sub_40D360+24↓j
.text:0040D370                 mov     edx, [ecx+4]
.text:0040D373                 mov     eax, [ecx]
.text:0040D375                 add     ecx, 8
.text:0040D378                 add     [edx+400000h], eax
.text:0040D37E                 cmp     ecx, offset dword_410000
.text:0040D384                 jb      short loc_40D370
.text:0040D386
.text:0040D386 loc_40D386:                             ; CODE XREF: sub_40D360+E↑j
.text:0040D386                 pop     ebp
.text:0040D387                 retn
.text:0040D387 sub_40D360      endp
.text:0040D387
.text:0040D387 ; ---------------------------------------------------------------------------
.text:0040D388                 align 10h
.text:0040D390
.text:0040D390 ; =============== S U B R O U T I N E =======================================
.text:0040D390
.text:0040D390 ; Attributes: bp-based frame
.text:0040D390
.text:0040D390 sub_40D390      proc near               ; CODE XREF: sub_401080+16↑p
.text:0040D390                                         ; TopLevelExceptionFilter+D7↑p
.text:0040D390                 push    ebp
.text:0040D391                 mov     ebp, esp
.text:0040D393                 fninit
.text:0040D395                 pop     ebp
.text:0040D396                 retn
.text:0040D396 sub_40D390      endp
.text:0040D396
.text:0040D396 ; ---------------------------------------------------------------------------
.text:0040D397                 align 10h
.text:0040D3A0
.text:0040D3A0 ; =============== S U B R O U T I N E =======================================
.text:0040D3A0
.text:0040D3A0 ; Attributes: bp-based frame
.text:0040D3A0
.text:0040D3A0 ; void __cdecl sub_40D3A0()
.text:0040D3A0 sub_40D3A0      proc near               ; DATA XREF: .text:loc_40D3E9↓o
.text:0040D3A0                                         ; sub_40D430:loc_40D45E↓o
.text:0040D3A0                 push    ebp
.text:0040D3A1                 mov     ebp, esp
.text:0040D3A3                 sub     esp, 8
.text:0040D3A6                 mov     eax, off_40F0A4
.text:0040D3AB                 mov     edx, [eax]
.text:0040D3AD                 test    edx, edx
.text:0040D3AF                 jnz     short loc_40D3B5
.text:0040D3B1
.text:0040D3B1 loc_40D3B1:                             ; CODE XREF: sub_40D3A0+2C↓j
.text:0040D3B1                 mov     esp, ebp
.text:0040D3B3                 pop     ebp
.text:0040D3B4                 retn
.text:0040D3B5 ; ---------------------------------------------------------------------------
.text:0040D3B5
.text:0040D3B5 loc_40D3B5:                             ; CODE XREF: sub_40D3A0+F↑j
.text:0040D3B5                                         ; sub_40D3A0+2A↓j
.text:0040D3B5                 call    dword ptr [eax]
.text:0040D3B7                 mov     edx, off_40F0A4
.text:0040D3BD                 mov     ecx, [edx+4]
.text:0040D3C0                 lea     eax, [edx+4]
.text:0040D3C3                 mov     off_40F0A4, eax
.text:0040D3C8                 test    ecx, ecx
.text:0040D3CA                 jnz     short loc_40D3B5
.text:0040D3CC                 jmp     short loc_40D3B1
.text:0040D3CC sub_40D3A0      endp
.text:0040D3CC
.text:0040D3CC ; ---------------------------------------------------------------------------
.text:0040D3CE                 align 10h
.text:0040D3D0                 push    ebp
.text:0040D3D1                 mov     ebp, esp
.text:0040D3D3                 sub     esp, 8
.text:0040D3D6                 mov     [ebp-4], ebx
.text:0040D3D9                 mov     eax, ds:dword_40E130
.text:0040D3DE                 cmp     eax, 0FFFFFFFFh
.text:0040D3E1                 jz      short loc_40D40C
.text:0040D3E3
.text:0040D3E3 loc_40D3E3:                             ; CODE XREF: .text:0040D416↓j
.text:0040D3E3                                         ; .text:0040D429↓j
.text:0040D3E3                 test    eax, eax
.text:0040D3E5                 mov     ebx, eax
.text:0040D3E7                 jnz     short loc_40D400
.text:0040D3E9
.text:0040D3E9 loc_40D3E9:                             ; CODE XREF: .text:0040D40A↓j
.text:0040D3E9                 mov     dword ptr [esp], offset sub_40D3A0
.text:0040D3F0                 call    sub_401040
.text:0040D3F5                 mov     ebx, [ebp-4]
.text:0040D3F8                 mov     esp, ebp
.text:0040D3FA                 pop     ebp
.text:0040D3FB                 retn
.text:0040D3FB ; ---------------------------------------------------------------------------
.text:0040D3FC                 align 10h
.text:0040D400
.text:0040D400 loc_40D400:                             ; CODE XREF: .text:0040D3E7↑j
.text:0040D400                                         ; .text:0040D408↓j
.text:0040D400                 call    ds:dword_40E130[ebx*4]
.text:0040D407                 dec     ebx
.text:0040D408                 jnz     short loc_40D400
.text:0040D40A                 jmp     short loc_40D3E9
.text:0040D40C ; ---------------------------------------------------------------------------
.text:0040D40C
.text:0040D40C loc_40D40C:                             ; CODE XREF: .text:0040D3E1↑j
.text:0040D40C                 mov     ecx, ds:dword_40E134
.text:0040D412                 xor     eax, eax
.text:0040D414                 test    ecx, ecx
.text:0040D416                 jz      short loc_40D3E3
.text:0040D418                 mov     edx, offset dword_40E130
.text:0040D41D                 lea     esi, [esi+0]
.text:0040D420
.text:0040D420 loc_40D420:                             ; CODE XREF: .text:0040D427↓j
.text:0040D420                 inc     eax
.text:0040D421                 mov     ecx, [edx+eax*4+4]
.text:0040D425                 test    ecx, ecx
.text:0040D427                 jnz     short loc_40D420
.text:0040D429                 jmp     short loc_40D3E3
.text:0040D429 ; ---------------------------------------------------------------------------
.text:0040D42B                 align 10h
.text:0040D430
.text:0040D430 ; =============== S U B R O U T I N E =======================================
.text:0040D430
.text:0040D430 ; Attributes: bp-based frame
.text:0040D430
.text:0040D430 sub_40D430      proc near               ; CODE XREF: sub_402FC0+18↑p
.text:0040D430
.text:0040D430 var_8           = dword ptr -8
.text:0040D430 var_4           = dword ptr -4
.text:0040D430
.text:0040D430                 push    ebp
.text:0040D431                 mov     ebp, esp
.text:0040D433                 sub     esp, 8
.text:0040D436                 mov     [ebp+var_4], ebx
.text:0040D439                 mov     edx, dword_40F0A0
.text:0040D43F                 test    edx, edx
.text:0040D441                 jnz     short loc_40D46A
.text:0040D443                 mov     eax, ds:dword_40E130
.text:0040D448                 mov     edx, 1
.text:0040D44D                 mov     dword_40F0A0, edx
.text:0040D453                 cmp     eax, 0FFFFFFFFh
.text:0040D456                 jz      short loc_40D47D
.text:0040D458
.text:0040D458 loc_40D458:                             ; CODE XREF: sub_40D430+57↓j
.text:0040D458                                         ; sub_40D430+69↓j
.text:0040D458                 test    eax, eax
.text:0040D45A                 mov     ebx, eax
.text:0040D45C                 jnz     short loc_40D471
.text:0040D45E
.text:0040D45E loc_40D45E:                             ; CODE XREF: sub_40D430+4B↓j
.text:0040D45E                 mov     [esp+8+var_8], offset sub_40D3A0 ; void (__cdecl *)()
.text:0040D465                 call    sub_401040
.text:0040D46A
.text:0040D46A loc_40D46A:                             ; CODE XREF: sub_40D430+11↑j
.text:0040D46A                 mov     ebx, [ebp+var_4]
.text:0040D46D                 mov     esp, ebp
.text:0040D46F                 pop     ebp
.text:0040D470                 retn
.text:0040D471 ; ---------------------------------------------------------------------------
.text:0040D471
.text:0040D471 loc_40D471:                             ; CODE XREF: sub_40D430+2C↑j
.text:0040D471                                         ; sub_40D430+49↓j
.text:0040D471                 call    ds:dword_40E130[ebx*4]
.text:0040D478                 dec     ebx
.text:0040D479                 jnz     short loc_40D471
.text:0040D47B                 jmp     short loc_40D45E
.text:0040D47D ; ---------------------------------------------------------------------------
.text:0040D47D
.text:0040D47D loc_40D47D:                             ; CODE XREF: sub_40D430+26↑j
.text:0040D47D                 mov     ecx, ds:dword_40E134
.text:0040D483                 xor     eax, eax
.text:0040D485                 test    ecx, ecx
.text:0040D487                 jz      short loc_40D458
.text:0040D489                 mov     edx, offset dword_40E130
.text:0040D48E                 mov     esi, esi
.text:0040D490
.text:0040D490 loc_40D490:                             ; CODE XREF: sub_40D430+67↓j
.text:0040D490                 inc     eax
.text:0040D491                 mov     ebx, [edx+eax*4+4]
.text:0040D495                 test    ebx, ebx
.text:0040D497                 jnz     short loc_40D490
.text:0040D499                 jmp     short loc_40D458
.text:0040D499 sub_40D430      endp
.text:0040D499
.text:0040D499 ; ---------------------------------------------------------------------------
.text:0040D49B                 align 10h
.text:0040D4A0
.text:0040D4A0 ; =============== S U B R O U T I N E =======================================
.text:0040D4A0
.text:0040D4A0 ; Attributes: info_from_lumina
.text:0040D4A0
.text:0040D4A0 ; void *__cdecl _alloca(size_t Size)
.text:0040D4A0 __alloca        proc near               ; CODE XREF: sub_402FC0+13↑p
.text:0040D4A0                 push    ecx
.text:0040D4A1                 mov     ecx, esp
.text:0040D4A3                 add     ecx, 8
.text:0040D4A6
.text:0040D4A6 loc_40D4A6:                             ; CODE XREF: __alloca+1B↓j
.text:0040D4A6                 cmp     eax, 1000h
.text:0040D4AB                 jb      short loc_40D4BD
.text:0040D4AD                 sub     ecx, 1000h
.text:0040D4B3                 or      dword ptr [ecx], 0
.text:0040D4B6                 sub     eax, 1000h
.text:0040D4BB                 jmp     short loc_40D4A6
.text:0040D4BD ; ---------------------------------------------------------------------------
.text:0040D4BD
.text:0040D4BD loc_40D4BD:                             ; CODE XREF: __alloca+B↑j
.text:0040D4BD                 sub     ecx, eax
.text:0040D4BF                 or      dword ptr [ecx], 0
.text:0040D4C2                 mov     eax, esp
.text:0040D4C4                 mov     esp, ecx
.text:0040D4C6                 mov     ecx, [eax]
.text:0040D4C8                 mov     eax, [eax+4]
.text:0040D4CB                 jmp     eax
.text:0040D4CB __alloca        endp
.text:0040D4CB
.text:0040D4CB ; ---------------------------------------------------------------------------
.text:0040D4CD                 align 10h
.text:0040D4D0
.text:0040D4D0 ; =============== S U B R O U T I N E =======================================
.text:0040D4D0
.text:0040D4D0 ; Attributes: bp-based frame
.text:0040D4D0
.text:0040D4D0 sub_40D4D0      proc near               ; CODE XREF: sub_406620+17E↑p
.text:0040D4D0                                         ; sub_406620+1F5↑p ...
.text:0040D4D0
.text:0040D4D0 var_24          = dword ptr -24h
.text:0040D4D0 var_20          = dword ptr -20h
.text:0040D4D0 var_1C          = dword ptr -1Ch
.text:0040D4D0 var_18          = dword ptr -18h
.text:0040D4D0 var_14          = dword ptr -14h
.text:0040D4D0 var_C           = dword ptr -0Ch
.text:0040D4D0 var_8           = dword ptr -8
.text:0040D4D0 var_4           = dword ptr -4
.text:0040D4D0 arg_0           = dword ptr  8
.text:0040D4D0 arg_4           = dword ptr  0Ch
.text:0040D4D0 arg_8           = dword ptr  10h
.text:0040D4D0 arg_C           = dword ptr  14h
.text:0040D4D0
.text:0040D4D0                 push    ebp
.text:0040D4D1                 mov     ebp, esp
.text:0040D4D3                 sub     esp, 28h
.text:0040D4D6                 mov     [ebp+var_C], ebx
.text:0040D4D9                 mov     edx, [ebp+arg_C]
.text:0040D4DC                 mov     ecx, [ebp+arg_0]
.text:0040D4DF                 mov     [ebp+var_8], esi
.text:0040D4E2                 mov     eax, [ebp+arg_8]
.text:0040D4E5                 test    edx, edx
.text:0040D4E7                 mov     [ebp+var_4], edi
.text:0040D4EA                 mov     ebx, [ebp+arg_4]
.text:0040D4ED                 mov     esi, eax
.text:0040D4EF                 mov     [ebp+var_18], 0
.text:0040D4F6                 mov     [ebp+var_14], 0
.text:0040D4FD                 mov     [ebp+var_1C], ecx
.text:0040D500                 jnz     short loc_40D552
.text:0040D502                 cmp     eax, ebx
.text:0040D504                 jbe     short loc_40D530
.text:0040D506                 mov     eax, ecx
.text:0040D508                 mov     edx, ebx
.text:0040D50A                 div     esi
.text:0040D50C                 mov     edi, eax
.text:0040D50E                 mov     esi, esi
.text:0040D510
.text:0040D510 loc_40D510:                             ; CODE XREF: sub_40D4D0+88↓j
.text:0040D510                                         ; sub_40D4D0+A4↓j ...
.text:0040D510                 xor     ecx, ecx
.text:0040D512
.text:0040D512 loc_40D512:                             ; CODE XREF: sub_40D4D0+80↓j
.text:0040D512                 mov     [ebp+var_18], edi
.text:0040D515                 mov     ebx, [ebp+var_C]
.text:0040D518                 mov     eax, [ebp+var_18]
.text:0040D51B                 mov     [ebp+var_14], ecx
.text:0040D51E                 mov     esi, [ebp+var_8]
.text:0040D521                 mov     edx, [ebp+var_14]
.text:0040D524                 mov     edi, [ebp+var_4]
.text:0040D527                 mov     esp, ebp
.text:0040D529                 pop     ebp
.text:0040D52A                 retn
.text:0040D52A ; ---------------------------------------------------------------------------
.text:0040D52B                 align 10h
.text:0040D530
.text:0040D530 loc_40D530:                             ; CODE XREF: sub_40D4D0+34↑j
.text:0040D530                 test    eax, eax
.text:0040D532                 jnz     short loc_40D541
.text:0040D534                 mov     eax, 1
.text:0040D539                 xor     ecx, ecx
.text:0040D53B                 xor     edx, edx
.text:0040D53D                 div     ecx
.text:0040D53F                 mov     esi, eax
.text:0040D541
.text:0040D541 loc_40D541:                             ; CODE XREF: sub_40D4D0+62↑j
.text:0040D541                 mov     eax, ebx
.text:0040D543                 xor     edx, edx
.text:0040D545                 div     esi
.text:0040D547                 mov     ecx, eax
.text:0040D549                 mov     eax, [ebp+var_1C]
.text:0040D54C                 div     esi
.text:0040D54E                 mov     edi, eax
.text:0040D550                 jmp     short loc_40D512
.text:0040D552 ; ---------------------------------------------------------------------------
.text:0040D552
.text:0040D552 loc_40D552:                             ; CODE XREF: sub_40D4D0+30↑j
.text:0040D552                 cmp     edx, ebx
.text:0040D554                 jbe     short loc_40D560
.text:0040D556                 xor     edi, edi
.text:0040D558                 jmp     short loc_40D510
.text:0040D558 ; ---------------------------------------------------------------------------
.text:0040D55A                 align 10h
.text:0040D560
.text:0040D560 loc_40D560:                             ; CODE XREF: sub_40D4D0+84↑j
.text:0040D560                 bsr     eax, edx
.text:0040D563                 xor     eax, 1Fh
.text:0040D566                 mov     [ebp+var_20], eax
.text:0040D569                 jnz     short loc_40D580
.text:0040D56B                 cmp     ebx, edx
.text:0040D56D                 ja      short loc_40D576
.text:0040D56F                 xor     edi, edi
.text:0040D571                 cmp     [ebp+var_1C], esi
.text:0040D574                 jb      short loc_40D510
.text:0040D576
.text:0040D576 loc_40D576:                             ; CODE XREF: sub_40D4D0+9D↑j
.text:0040D576                 mov     edi, 1
.text:0040D57B                 jmp     short loc_40D510
.text:0040D57B ; ---------------------------------------------------------------------------
.text:0040D57D                 align 10h
.text:0040D580
.text:0040D580 loc_40D580:                             ; CODE XREF: sub_40D4D0+99↑j
.text:0040D580                 mov     eax, [ebp+var_20]
.text:0040D583                 mov     ecx, 20h ; ' '
.text:0040D588                 sub     ecx, eax
.text:0040D58A                 mov     [ebp+var_24], ecx
.text:0040D58D                 mov     eax, esi
.text:0040D58F                 movzx   ecx, byte ptr [ebp+var_20]
.text:0040D593                 shl     edx, cl
.text:0040D595                 mov     edi, edx
.text:0040D597                 movzx   ecx, byte ptr [ebp+var_24]
.text:0040D59B                 mov     edx, ebx
.text:0040D59D                 shr     eax, cl
.text:0040D59F                 movzx   ecx, byte ptr [ebp+var_20]
.text:0040D5A3                 or      edi, eax
.text:0040D5A5                 mov     eax, [ebp+var_1C]
.text:0040D5A8                 shl     esi, cl
.text:0040D5AA                 movzx   ecx, byte ptr [ebp+var_24]
.text:0040D5AE                 shr     edx, cl
.text:0040D5B0                 movzx   ecx, byte ptr [ebp+var_20]
.text:0040D5B4                 shl     ebx, cl
.text:0040D5B6                 movzx   ecx, byte ptr [ebp+var_24]
.text:0040D5BA                 shr     eax, cl
.text:0040D5BC                 or      ebx, eax
.text:0040D5BE                 movzx   ecx, byte ptr [ebp+var_20]
.text:0040D5C2                 mov     eax, ebx
.text:0040D5C4                 div     edi
.text:0040D5C6                 mov     ebx, edx
.text:0040D5C8                 mov     edi, eax
.text:0040D5CA                 shl     [ebp+var_1C], cl
.text:0040D5CD                 mul     esi
.text:0040D5CF                 cmp     edx, ebx
.text:0040D5D1                 ja      short loc_40D5E4
.text:0040D5D3                 cmp     edx, ebx
.text:0040D5D5                 jnz     loc_40D510
.text:0040D5DB                 cmp     eax, [ebp+var_1C]
.text:0040D5DE                 jbe     loc_40D510
.text:0040D5E4
.text:0040D5E4 loc_40D5E4:                             ; CODE XREF: sub_40D4D0+101↑j
.text:0040D5E4                 dec     edi
.text:0040D5E5                 jmp     loc_40D510
.text:0040D5E5 sub_40D4D0      endp
.text:0040D5E5
.text:0040D5E5 ; ---------------------------------------------------------------------------
.text:0040D5EA                 align 10h
.text:0040D5F0
.text:0040D5F0 ; =============== S U B R O U T I N E =======================================
.text:0040D5F0
.text:0040D5F0 ; Attributes: bp-based frame
.text:0040D5F0
.text:0040D5F0 sub_40D5F0      proc near               ; CODE XREF: sub_406620+1A5↑p
.text:0040D5F0                                         ; sub_406620+21E↑p ...
.text:0040D5F0
.text:0040D5F0 var_34          = dword ptr -34h
.text:0040D5F0 var_2C          = dword ptr -2Ch
.text:0040D5F0 var_28          = dword ptr -28h
.text:0040D5F0 var_24          = dword ptr -24h
.text:0040D5F0 var_20          = dword ptr -20h
.text:0040D5F0 var_1C          = dword ptr -1Ch
.text:0040D5F0 var_18          = dword ptr -18h
.text:0040D5F0 var_14          = dword ptr -14h
.text:0040D5F0 arg_0           = dword ptr  8
.text:0040D5F0 arg_4           = dword ptr  0Ch
.text:0040D5F0 arg_8           = dword ptr  10h
.text:0040D5F0 arg_C           = dword ptr  14h
.text:0040D5F0
.text:0040D5F0                 push    ebp
.text:0040D5F1                 mov     ebp, esp
.text:0040D5F3                 push    edi
.text:0040D5F4                 push    esi
.text:0040D5F5                 push    ebx
.text:0040D5F6                 sub     esp, 2Ch
.text:0040D5F9                 mov     edx, [ebp+arg_C]
.text:0040D5FC                 mov     [ebp+var_20], 0
.text:0040D603                 mov     ecx, [ebp+arg_0]
.text:0040D606                 mov     ebx, [ebp+arg_4]
.text:0040D609                 mov     [ebp+var_1C], 0
.text:0040D610                 mov     eax, [ebp+arg_8]
.text:0040D613                 test    edx, edx
.text:0040D615                 mov     [ebp+var_24], edx
.text:0040D618                 mov     edi, ebx
.text:0040D61A                 mov     esi, eax
.text:0040D61C                 mov     [ebp+var_28], ecx
.text:0040D61F                 jnz     short loc_40D680
.text:0040D621                 cmp     eax, ebx
.text:0040D623                 jbe     short loc_40D660
.text:0040D625                 mov     eax, ecx
.text:0040D627                 mov     edx, ebx
.text:0040D629                 div     esi
.text:0040D62B
.text:0040D62B loc_40D62B:                             ; CODE XREF: sub_40D5F0+8B↓j
.text:0040D62B                 mov     [ebp+var_28], edx
.text:0040D62E                 lea     ecx, [ebp+var_18]
.text:0040D631                 test    ecx, ecx
.text:0040D633                 jz      short loc_40D64E
.text:0040D635                 mov     [ebp+var_1C], 0
.text:0040D63C
.text:0040D63C loc_40D63C:                             ; CODE XREF: sub_40D5F0+DA↓j
.text:0040D63C                 mov     eax, [ebp+var_28]
.text:0040D63F                 mov     [ebp+var_20], eax
.text:0040D642                 mov     edx, [ebp+var_20]
.text:0040D645                 mov     ecx, [ebp+var_1C]
.text:0040D648                 mov     [ebp+var_18], edx
.text:0040D64B                 mov     [ebp+var_14], ecx
.text:0040D64E
.text:0040D64E loc_40D64E:                             ; CODE XREF: sub_40D5F0+43↑j
.text:0040D64E                                         ; sub_40D5F0+A7↓j ...
.text:0040D64E                 mov     eax, [ebp+var_18]
.text:0040D651                 mov     edx, [ebp+var_14]
.text:0040D654                 add     esp, 2Ch
.text:0040D657                 pop     ebx
.text:0040D658                 pop     esi
.text:0040D659                 pop     edi
.text:0040D65A                 pop     ebp
.text:0040D65B                 retn
.text:0040D65B ; ---------------------------------------------------------------------------
.text:0040D65C                 align 10h
.text:0040D660
.text:0040D660 loc_40D660:                             ; CODE XREF: sub_40D5F0+33↑j
.text:0040D660                 test    eax, eax
.text:0040D662                 jnz     short loc_40D66F
.text:0040D664                 mov     eax, 1
.text:0040D669                 xor     edx, edx
.text:0040D66B                 div     esi
.text:0040D66D                 mov     esi, eax
.text:0040D66F
.text:0040D66F loc_40D66F:                             ; CODE XREF: sub_40D5F0+72↑j
.text:0040D66F                 mov     eax, edi
.text:0040D671                 mov     edx, [ebp+var_24]
.text:0040D674                 div     esi
.text:0040D676                 mov     eax, [ebp+var_28]
.text:0040D679                 div     esi
.text:0040D67B                 jmp     short loc_40D62B
.text:0040D67B ; ---------------------------------------------------------------------------
.text:0040D67D                 align 10h
.text:0040D680
.text:0040D680 loc_40D680:                             ; CODE XREF: sub_40D5F0+2F↑j
.text:0040D680                 cmp     [ebp+var_24], ebx
.text:0040D683                 jbe     short loc_40D6A0
.text:0040D685                 mov     [ebp+var_20], ecx
.text:0040D688
.text:0040D688 loc_40D688:                             ; CODE XREF: sub_40D5F0+15B↓j
.text:0040D688                 mov     [ebp+var_1C], edi
.text:0040D68B                 mov     eax, [ebp+var_20]
.text:0040D68E                 mov     edx, [ebp+var_1C]
.text:0040D691                 mov     [ebp+var_18], eax
.text:0040D694                 mov     [ebp+var_14], edx
.text:0040D697                 jmp     short loc_40D64E
.text:0040D697 ; ---------------------------------------------------------------------------
.text:0040D699                 align 10h
.text:0040D6A0
.text:0040D6A0 loc_40D6A0:                             ; CODE XREF: sub_40D5F0+93↑j
.text:0040D6A0                 bsr     eax, [ebp+var_24]
.text:0040D6A4                 mov     ebx, eax
.text:0040D6A6                 xor     ebx, 1Fh
.text:0040D6A9                 jnz     short loc_40D6D0
.text:0040D6AB                 cmp     edi, [ebp+var_24]
.text:0040D6AE                 ja      short loc_40D6B5
.text:0040D6B0                 cmp     [ebp+var_28], esi
.text:0040D6B3                 jb      short loc_40D6C0
.text:0040D6B5
.text:0040D6B5 loc_40D6B5:                             ; CODE XREF: sub_40D5F0+BE↑j
.text:0040D6B5                 mov     edx, [ebp+var_28]
.text:0040D6B8                 sub     edx, esi
.text:0040D6BA                 sbb     edi, [ebp+var_24]
.text:0040D6BD                 mov     [ebp+var_28], edx
.text:0040D6C0
.text:0040D6C0 loc_40D6C0:                             ; CODE XREF: sub_40D5F0+C3↑j
.text:0040D6C0                 lea     ecx, [ebp+var_18]
.text:0040D6C3                 test    ecx, ecx
.text:0040D6C5                 jz      short loc_40D64E
.text:0040D6C7                 mov     [ebp+var_1C], edi
.text:0040D6CA                 jmp     loc_40D63C
.text:0040D6CA ; ---------------------------------------------------------------------------
.text:0040D6CF                 align 10h
.text:0040D6D0
.text:0040D6D0 loc_40D6D0:                             ; CODE XREF: sub_40D5F0+B9↑j
.text:0040D6D0                 mov     edx, [ebp+var_24]
.text:0040D6D3                 mov     eax, 20h ; ' '
.text:0040D6D8                 mov     cl, bl
.text:0040D6DA                 sub     eax, ebx
.text:0040D6DC                 mov     [ebp+var_2C], eax
.text:0040D6DF                 shl     edx, cl
.text:0040D6E1                 mov     eax, esi
.text:0040D6E3                 movzx   ecx, byte ptr [ebp+var_2C]
.text:0040D6E7                 shr     eax, cl
.text:0040D6E9                 mov     cl, bl
.text:0040D6EB                 shl     esi, cl
.text:0040D6ED                 or      edx, eax
.text:0040D6EF                 mov     eax, [ebp+var_28]
.text:0040D6F2                 movzx   ecx, byte ptr [ebp+var_2C]
.text:0040D6F6                 mov     [ebp+var_24], edx
.text:0040D6F9                 mov     edx, edi
.text:0040D6FB                 shr     edx, cl
.text:0040D6FD                 mov     cl, bl
.text:0040D6FF                 shl     edi, cl
.text:0040D701                 movzx   ecx, byte ptr [ebp+var_2C]
.text:0040D705                 shr     eax, cl
.text:0040D707                 or      edi, eax
.text:0040D709                 mov     eax, edi
.text:0040D70B                 mov     cl, bl
.text:0040D70D                 div     [ebp+var_24]
.text:0040D710                 shl     [ebp+var_28], cl
.text:0040D713                 mov     edi, edx
.text:0040D715                 mul     esi
.text:0040D717                 mov     [ebp+var_34], eax
.text:0040D71A                 cmp     edx, edi
.text:0040D71C                 ja      short loc_40D758
.text:0040D71E                 cmp     edx, edi
.text:0040D720                 jz      short loc_40D750
.text:0040D722
.text:0040D722 loc_40D722:                             ; CODE XREF: sub_40D5F0+166↓j
.text:0040D722                                         ; sub_40D5F0+173↓j
.text:0040D722                 lea     eax, [ebp+var_18]
.text:0040D725                 test    eax, eax
.text:0040D727                 jz      loc_40D64E
.text:0040D72D                 movzx   ecx, byte ptr [ebp+var_2C]
.text:0040D731                 mov     eax, [ebp+var_28]
.text:0040D734                 sub     eax, [ebp+var_34]
.text:0040D737                 sbb     edi, edx
.text:0040D739                 mov     [ebp+var_28], eax
.text:0040D73C                 mov     edx, edi
.text:0040D73E                 shl     edx, cl
.text:0040D740                 mov     cl, bl
.text:0040D742                 shr     eax, cl
.text:0040D744                 or      edx, eax
.text:0040D746                 mov     [ebp+var_20], edx
.text:0040D749                 shr     edi, cl
.text:0040D74B                 jmp     loc_40D688
.text:0040D750 ; ---------------------------------------------------------------------------
.text:0040D750
.text:0040D750 loc_40D750:                             ; CODE XREF: sub_40D5F0+130↑j
.text:0040D750                 mov     eax, [ebp+var_28]
.text:0040D753                 cmp     [ebp+var_34], eax
.text:0040D756                 jbe     short loc_40D722
.text:0040D758
.text:0040D758 loc_40D758:                             ; CODE XREF: sub_40D5F0+12C↑j
.text:0040D758                 mov     ecx, [ebp+var_34]
.text:0040D75B                 sub     ecx, esi
.text:0040D75D                 sbb     edx, [ebp+var_24]
.text:0040D760                 mov     [ebp+var_34], ecx
.text:0040D763                 jmp     short loc_40D722
.text:0040D763 sub_40D5F0      endp
.text:0040D763
.text:0040D763 ; ---------------------------------------------------------------------------
.text:0040D765                 align 10h
.text:0040D770
.text:0040D770 ; =============== S U B R O U T I N E =======================================
.text:0040D770
.text:0040D770 ; Attributes: thunk
.text:0040D770
.text:0040D770 ; int __cdecl isatty(int FileHandle)
.text:0040D770 _isatty         proc near               ; CODE XREF: sub_401DB0+669↑p
.text:0040D770
.text:0040D770 FileHandle      = dword ptr  4
.text:0040D770
.text:0040D770                 jmp     ds:__imp__isatty
.text:0040D770 _isatty         endp
.text:0040D770
.text:0040D770 ; ---------------------------------------------------------------------------
.text:0040D776                 align 10h
.text:0040D780
.text:0040D780 ; =============== S U B R O U T I N E =======================================
.text:0040D780
.text:0040D780 ; Attributes: thunk
.text:0040D780
.text:0040D780 ; int __cdecl stricmp(const char *String1, const char *String2)
.text:0040D780 _stricmp        proc near               ; CODE XREF: sub_406AF0+46F↑p
.text:0040D780                                         ; sub_4088C0+2E↑p ...
.text:0040D780
.text:0040D780 String1         = dword ptr  4
.text:0040D780 String2         = dword ptr  8
.text:0040D780
.text:0040D780                 jmp     ds:__imp__stricmp
.text:0040D780 _stricmp        endp
.text:0040D780
.text:0040D780 ; ---------------------------------------------------------------------------
.text:0040D786                 align 10h
.text:0040D790
.text:0040D790 ; =============== S U B R O U T I N E =======================================
.text:0040D790
.text:0040D790 ; Attributes: thunk
.text:0040D790
.text:0040D790 ; char *__cdecl strdup(const char *String)
.text:0040D790 _strdup         proc near               ; CODE XREF: sub_4084F0+101↑p
.text:0040D790                                         ; .text:0040875A↑p ...
.text:0040D790
.text:0040D790 String          = dword ptr  4
.text:0040D790
.text:0040D790                 jmp     ds:__imp__strdup
.text:0040D790 _strdup         endp
.text:0040D790
.text:0040D790 ; ---------------------------------------------------------------------------
.text:0040D796                 align 10h
.text:0040D7A0
.text:0040D7A0 ; =============== S U B R O U T I N E =======================================
.text:0040D7A0
.text:0040D7A0 ; Attributes: thunk
.text:0040D7A0
.text:0040D7A0 ; int __cdecl getpid()
.text:0040D7A0 _getpid         proc near               ; CODE XREF: sub_40B890+84↑p
.text:0040D7A0                 jmp     ds:__imp__getpid
.text:0040D7A0 _getpid         endp
.text:0040D7A0
.text:0040D7A0 ; ---------------------------------------------------------------------------
.text:0040D7A6                 align 10h
.text:0040D7B0
.text:0040D7B0 ; =============== S U B R O U T I N E =======================================
.text:0040D7B0
.text:0040D7B0 ; Attributes: thunk
.text:0040D7B0
.text:0040D7B0 ; int __cdecl chmod(const char *FileName, int AccessMode)
.text:0040D7B0 _chmod          proc near               ; CODE XREF: sub_40BCC0+41↑j
.text:0040D7B0
.text:0040D7B0 FileName        = dword ptr  4
.text:0040D7B0 AccessMode      = dword ptr  8
.text:0040D7B0
.text:0040D7B0                 jmp     ds:__imp__chmod
.text:0040D7B0 _chmod          endp
.text:0040D7B0
.text:0040D7B0 ; ---------------------------------------------------------------------------
.text:0040D7B6                 align 10h
.text:0040D7C0                 jmp     ds:__set_app_type
.text:0040D7C0 ; ---------------------------------------------------------------------------
.text:0040D7C6                 align 10h
.text:0040D7D0
.text:0040D7D0 ; =============== S U B R O U T I N E =======================================
.text:0040D7D0
.text:0040D7D0 ; Attributes: thunk
.text:0040D7D0
.text:0040D7D0 ; void __cdecl cexit()
.text:0040D7D0 _cexit          proc near               ; CODE XREF: .text:0040116C↑p
.text:0040D7D0                 jmp     ds:__imp__cexit
.text:0040D7D0 _cexit          endp
.text:0040D7D0
.text:0040D7D0 ; ---------------------------------------------------------------------------
.text:0040D7D6                 align 10h
.text:0040D7E0
.text:0040D7E0 ; =============== S U B R O U T I N E =======================================
.text:0040D7E0
.text:0040D7E0 ; Attributes: thunk
.text:0040D7E0
.text:0040D7E0 ; char ***__cdecl _p__environ()
.text:0040D7E0 __p__environ    proc near               ; CODE XREF: sub_401080+C7↑p
.text:0040D7E0                 jmp     ds:__imp___p__environ
.text:0040D7E0 __p__environ    endp
.text:0040D7E0
.text:0040D7E0 ; ---------------------------------------------------------------------------
.text:0040D7E6                 align 10h
.text:0040D7F0
.text:0040D7F0 ; =============== S U B R O U T I N E =======================================
.text:0040D7F0
.text:0040D7F0 ; Attributes: thunk
.text:0040D7F0
.text:0040D7F0 ; _crt_signal_t __cdecl signal(int Signal, _crt_signal_t Function)
.text:0040D7F0 signal          proc near               ; CODE XREF: TopLevelExceptionFilter+4D↑p
.text:0040D7F0                                         ; TopLevelExceptionFilter+88↑p ...
.text:0040D7F0
.text:0040D7F0 Signal          = dword ptr  4
.text:0040D7F0 Function        = dword ptr  8
.text:0040D7F0
.text:0040D7F0                 jmp     ds:__imp_signal
.text:0040D7F0 signal          endp
.text:0040D7F0
.text:0040D7F0 ; ---------------------------------------------------------------------------
.text:0040D7F6                 align 10h
.text:0040D800
.text:0040D800 ; =============== S U B R O U T I N E =======================================
.text:0040D800
.text:0040D800 ; Attributes: thunk
.text:0040D800
.text:0040D800 ; int *__cdecl _p__fmode()
.text:0040D800 __p__fmode      proc near               ; CODE XREF: sub_401080:loc_401135↑p
.text:0040D800                 jmp     ds:__imp___p__fmode
.text:0040D800 __p__fmode      endp
.text:0040D800
.text:0040D800 ; ---------------------------------------------------------------------------
.text:0040D806                 align 10h
.text:0040D810
.text:0040D810 ; =============== S U B R O U T I N E =======================================
.text:0040D810
.text:0040D810 ; Attributes: thunk
.text:0040D810
.text:0040D810 ; int __cdecl setmode(int FileHandle, int Mode)
.text:0040D810 _setmode        proc near               ; CODE XREF: sub_401080+70↑p
.text:0040D810                                         ; sub_401080+90↑p ...
.text:0040D810
.text:0040D810 FileHandle      = dword ptr  4
.text:0040D810 Mode            = dword ptr  8
.text:0040D810
.text:0040D810                 jmp     ds:__imp__setmode
.text:0040D810 _setmode        endp
.text:0040D810
.text:0040D810 ; ---------------------------------------------------------------------------
.text:0040D816                 align 10h
.text:0040D820
.text:0040D820 ; =============== S U B R O U T I N E =======================================
.text:0040D820
.text:0040D820 ; Attributes: thunk
.text:0040D820
.text:0040D820 __getmainargs   proc near               ; CODE XREF: sub_401080+49↑p
.text:0040D820                 jmp     ds:__imp___getmainargs
.text:0040D820 __getmainargs   endp
.text:0040D820
.text:0040D820 ; ---------------------------------------------------------------------------
.text:0040D826                 align 10h
.text:0040D830
.text:0040D830 ; =============== S U B R O U T I N E =======================================
.text:0040D830
.text:0040D830 ; Attributes: thunk
.text:0040D830
.text:0040D830 ; char *__cdecl setlocale(int Category, const char *Locale)
.text:0040D830 setlocale       proc near               ; CODE XREF: sub_402FC0:loc_402FF4↑p
.text:0040D830
.text:0040D830 Category        = dword ptr  4
.text:0040D830 Locale          = dword ptr  8
.text:0040D830
.text:0040D830                 jmp     ds:__imp_setlocale
.text:0040D830 setlocale       endp
.text:0040D830
.text:0040D830 ; ---------------------------------------------------------------------------
.text:0040D836                 align 10h
.text:0040D840
.text:0040D840 ; =============== S U B R O U T I N E =======================================
.text:0040D840
.text:0040D840 ; Attributes: thunk
.text:0040D840
.text:0040D840 ; int printf(const char *const Format, ...)
.text:0040D840 printf          proc near               ; CODE XREF: .text:00403EA2↑p
.text:0040D840                                         ; sub_40A760+82↑p ...
.text:0040D840
.text:0040D840 Format          = dword ptr  4
.text:0040D840
.text:0040D840                 jmp     ds:__imp_printf
.text:0040D840 printf          endp
.text:0040D840
.text:0040D840 ; ---------------------------------------------------------------------------
.text:0040D846                 align 10h
.text:0040D850
.text:0040D850 ; =============== S U B R O U T I N E =======================================
.text:0040D850
.text:0040D850 ; Attributes: thunk
.text:0040D850
.text:0040D850 ; int __cdecl fputs(const char *Buffer, FILE *Stream)
.text:0040D850 fputs           proc near               ; CODE XREF: .text:00403CED↑p
.text:0040D850                                         ; .text:00403D0F↑p ...
.text:0040D850
.text:0040D850 Buffer          = dword ptr  4
.text:0040D850 Stream          = dword ptr  8
.text:0040D850
.text:0040D850                 jmp     ds:__imp_fputs
.text:0040D850 fputs           endp
.text:0040D850
.text:0040D850 ; ---------------------------------------------------------------------------
.text:0040D856                 align 10h
.text:0040D860
.text:0040D860 ; =============== S U B R O U T I N E =======================================
.text:0040D860
.text:0040D860 ; Attributes: noreturn thunk
.text:0040D860
.text:0040D860 ; void __cdecl __noreturn abort()
.text:0040D860 abort           proc near               ; CODE XREF: sub_4013A0:loc_401D82↑p
.text:0040D860                                         ; sub_4027A0:loc_402F5E↑p ...
.text:0040D860                 jmp     ds:__imp_abort
.text:0040D860 abort           endp
.text:0040D860
.text:0040D860 ; ---------------------------------------------------------------------------
.text:0040D866                 align 10h
.text:0040D870
.text:0040D870 ; =============== S U B R O U T I N E =======================================
.text:0040D870
.text:0040D870 ; Attributes: thunk
.text:0040D870
.text:0040D870 ; size_t __cdecl strlen(const char *Str)
.text:0040D870 strlen          proc near               ; CODE XREF: sub_4013A0+1D5↑p
.text:0040D870                                         ; sub_4013A0+1FA↑p ...
.text:0040D870
.text:0040D870 Str             = dword ptr  4
.text:0040D870
.text:0040D870                 jmp     ds:__imp_strlen
.text:0040D870 strlen          endp
.text:0040D870
.text:0040D870 ; ---------------------------------------------------------------------------
.text:0040D876                 align 10h
.text:0040D880
.text:0040D880 ; =============== S U B R O U T I N E =======================================
.text:0040D880
.text:0040D880 ; Attributes: thunk
.text:0040D880
.text:0040D880 ; int __cdecl strcmp(const char *Str1, const char *Str2)
.text:0040D880 strcmp          proc near               ; CODE XREF: sub_4013A0+A8↑p
.text:0040D880                                         ; sub_4013A0+E1↑p ...
.text:0040D880
.text:0040D880 Str1            = dword ptr  4
.text:0040D880 Str2            = dword ptr  8
.text:0040D880
.text:0040D880                 jmp     ds:__imp_strcmp
.text:0040D880 strcmp          endp
.text:0040D880
.text:0040D880 ; ---------------------------------------------------------------------------
.text:0040D886                 align 10h
.text:0040D890
.text:0040D890 ; =============== S U B R O U T I N E =======================================
.text:0040D890
.text:0040D890 ; Attributes: noreturn thunk
.text:0040D890
.text:0040D890 ; void __cdecl __noreturn exit(int Code)
.text:0040D890 exit            proc near               ; CODE XREF: sub_4013A0+1B8↑p
.text:0040D890                                         ; sub_401DB0+1F2↑p ...
.text:0040D890
.text:0040D890 Code            = dword ptr  4
.text:0040D890
.text:0040D890                 jmp     ds:__imp_exit
.text:0040D890 exit            endp
.text:0040D890
.text:0040D890 ; ---------------------------------------------------------------------------
.text:0040D896                 align 10h
.text:0040D8A0
.text:0040D8A0 ; =============== S U B R O U T I N E =======================================
.text:0040D8A0
.text:0040D8A0 ; Attributes: thunk
.text:0040D8A0
.text:0040D8A0 ; int __cdecl fflush(FILE *Stream)
.text:0040D8A0 fflush          proc near               ; CODE XREF: sub_4013A0+1AC↑p
.text:0040D8A0                                         ; sub_401DB0+1E6↑p ...
.text:0040D8A0
.text:0040D8A0 Stream          = dword ptr  4
.text:0040D8A0
.text:0040D8A0                 jmp     ds:__imp_fflush
.text:0040D8A0 fflush          endp
.text:0040D8A0
.text:0040D8A0 ; ---------------------------------------------------------------------------
.text:0040D8A6                 align 10h
.text:0040D8B0
.text:0040D8B0 ; =============== S U B R O U T I N E =======================================
.text:0040D8B0
.text:0040D8B0 ; Attributes: thunk
.text:0040D8B0
.text:0040D8B0 ; int fprintf(FILE *const Stream, const char *const Format, ...)
.text:0040D8B0 fprintf         proc near               ; CODE XREF: sub_4013A0+182↑p
.text:0040D8B0                                         ; sub_4013A0+19B↑p ...
.text:0040D8B0
.text:0040D8B0 Stream          = dword ptr  4
.text:0040D8B0 Format          = dword ptr  8
.text:0040D8B0
.text:0040D8B0                 jmp     ds:__imp_fprintf
.text:0040D8B0 fprintf         endp
.text:0040D8B0
.text:0040D8B0 ; ---------------------------------------------------------------------------
.text:0040D8B6                 align 10h
.text:0040D8C0
.text:0040D8C0 ; =============== S U B R O U T I N E =======================================
.text:0040D8C0
.text:0040D8C0 ; Attributes: thunk
.text:0040D8C0
.text:0040D8C0 ; int *__cdecl errno()
.text:0040D8C0 _errno          proc near               ; CODE XREF: sub_4043D0:loc_40440D↑p
.text:0040D8C0                                         ; .text:0040500B↑p ...
.text:0040D8C0                 jmp     ds:__imp__errno
.text:0040D8C0 _errno          endp
.text:0040D8C0
.text:0040D8C0 ; ---------------------------------------------------------------------------
.text:0040D8C6                 align 10h
.text:0040D8D0
.text:0040D8D0 ; =============== S U B R O U T I N E =======================================
.text:0040D8D0
.text:0040D8D0 ; Attributes: thunk
.text:0040D8D0
.text:0040D8D0 ; int __cdecl fclose(FILE *Stream)
.text:0040D8D0 fclose          proc near               ; CODE XREF: sub_4043D0+27↑p
.text:0040D8D0                                         ; .text:0040A66E↑p
.text:0040D8D0
.text:0040D8D0 Stream          = dword ptr  4
.text:0040D8D0
.text:0040D8D0                 jmp     ds:__imp_fclose
.text:0040D8D0 fclose          endp
.text:0040D8D0
.text:0040D8D0 ; ---------------------------------------------------------------------------
.text:0040D8D6                 align 10h
.text:0040D8E0
.text:0040D8E0 ; =============== S U B R O U T I N E =======================================
.text:0040D8E0
.text:0040D8E0 ; Attributes: thunk
.text:0040D8E0
.text:0040D8E0 ; void __cdecl free(void *Block)
.text:0040D8E0 free            proc near               ; CODE XREF: sub_4056E0+112↑p
.text:0040D8E0                                         ; sub_406AF0+24E↑p ...
.text:0040D8E0
.text:0040D8E0 Block           = dword ptr  4
.text:0040D8E0
.text:0040D8E0                 jmp     ds:__imp_free
.text:0040D8E0 free            endp
.text:0040D8E0
.text:0040D8E0 ; ---------------------------------------------------------------------------
.text:0040D8E6                 align 10h
.text:0040D8F0
.text:0040D8F0 ; =============== S U B R O U T I N E =======================================
.text:0040D8F0
.text:0040D8F0 ; Attributes: thunk
.text:0040D8F0
.text:0040D8F0 ; int __cdecl iswctype(wint_t C, wctype_t Type)
.text:0040D8F0 iswctype        proc near               ; CODE XREF: sub_4045A0+78B↑p
.text:0040D8F0
.text:0040D8F0 C               = word ptr  4
.text:0040D8F0 Type            = word ptr  8
.text:0040D8F0
.text:0040D8F0                 jmp     ds:__imp_iswctype
.text:0040D8F0 iswctype        endp
.text:0040D8F0
.text:0040D8F0 ; ---------------------------------------------------------------------------
.text:0040D8F6                 align 10h
.text:0040D900
.text:0040D900 ; =============== S U B R O U T I N E =======================================
.text:0040D900
.text:0040D900 ; Attributes: thunk
.text:0040D900
.text:0040D900 ; int __cdecl isctype(int C, int Type)
.text:0040D900 _isctype        proc near               ; CODE XREF: sub_4045A0+610↑p
.text:0040D900
.text:0040D900 C               = dword ptr  4
.text:0040D900 Type            = dword ptr  8
.text:0040D900
.text:0040D900                 jmp     ds:__imp__isctype
.text:0040D900 _isctype        endp
.text:0040D900
.text:0040D900 ; ---------------------------------------------------------------------------
.text:0040D906                 align 10h
.text:0040D910
.text:0040D910 ; =============== S U B R O U T I N E =======================================
.text:0040D910
.text:0040D910 ; Attributes: thunk
.text:0040D910
.text:0040D910 ; void *__cdecl memcpy(void *, const void *Src, size_t Size)
.text:0040D910 memcpy          proc near               ; CODE XREF: .text:00405A98↑p
.text:0040D910                                         ; .text:00405AE1↑p
.text:0040D910
.text:0040D910 Src             = dword ptr  8
.text:0040D910 Size            = dword ptr  0Ch
.text:0040D910
.text:0040D910                 jmp     ds:__imp_memcpy
.text:0040D910 memcpy          endp
.text:0040D910
.text:0040D910 ; ---------------------------------------------------------------------------
.text:0040D916                 align 10h
.text:0040D920
.text:0040D920 ; =============== S U B R O U T I N E =======================================
.text:0040D920
.text:0040D920 ; Attributes: thunk
.text:0040D920
.text:0040D920 ; void *__cdecl memset(void *, int Val, size_t Size)
.text:0040D920 memset          proc near               ; CODE XREF: .text:00405A16↑p
.text:0040D920
.text:0040D920 Val             = dword ptr  8
.text:0040D920 Size            = dword ptr  0Ch
.text:0040D920
.text:0040D920                 jmp     ds:__imp_memset
.text:0040D920 memset          endp
.text:0040D920
.text:0040D920 ; ---------------------------------------------------------------------------
.text:0040D926                 align 10h
.text:0040D930
.text:0040D930 ; =============== S U B R O U T I N E =======================================
.text:0040D930
.text:0040D930 ; Attributes: thunk
.text:0040D930
.text:0040D930 ; void *__cdecl calloc(size_t Count, size_t Size)
.text:0040D930 calloc          proc near               ; CODE XREF: .text:00405A53↑p
.text:0040D930                                         ; sub_4084F0+AC↑p
.text:0040D930
.text:0040D930 Count           = dword ptr  4
.text:0040D930 Size            = dword ptr  8
.text:0040D930
.text:0040D930                 jmp     ds:__imp_calloc
.text:0040D930 calloc          endp
.text:0040D930
.text:0040D930 ; ---------------------------------------------------------------------------
.text:0040D936                 align 10h
.text:0040D940
.text:0040D940 ; =============== S U B R O U T I N E =======================================
.text:0040D940
.text:0040D940 ; Attributes: thunk
.text:0040D940
.text:0040D940 ; void *__cdecl realloc(void *Block, size_t Size)
.text:0040D940 realloc         proc near               ; CODE XREF: .text:00405950↑p
.text:0040D940                                         ; sub_405980+16↑p ...
.text:0040D940
.text:0040D940 Block           = dword ptr  4
.text:0040D940 Size            = dword ptr  8
.text:0040D940
.text:0040D940                 jmp     ds:__imp_realloc
.text:0040D940 realloc         endp
.text:0040D940
.text:0040D940 ; ---------------------------------------------------------------------------
.text:0040D946                 align 10h
.text:0040D950
.text:0040D950 ; =============== S U B R O U T I N E =======================================
.text:0040D950
.text:0040D950 ; Attributes: thunk
.text:0040D950
.text:0040D950 ; void *__cdecl malloc(size_t Size)
.text:0040D950 malloc          proc near               ; CODE XREF: sub_4058B0+24↑p
.text:0040D950                                         ; sub_4058F0+E↑p ...
.text:0040D950
.text:0040D950 Size            = dword ptr  4
.text:0040D950
.text:0040D950                 jmp     ds:__imp_malloc
.text:0040D950 malloc          endp
.text:0040D950
.text:0040D950 ; ---------------------------------------------------------------------------
.text:0040D956                 align 10h
.text:0040D960
.text:0040D960 ; =============== S U B R O U T I N E =======================================
.text:0040D960
.text:0040D960 ; Attributes: thunk
.text:0040D960
.text:0040D960 ; int __cdecl vfprintf(FILE *const Stream, const char *const Format, va_list ArgList)
.text:0040D960 vfprintf        proc near               ; CODE XREF: sub_405C30+49↑p
.text:0040D960                                         ; sub_405D34+A6↑p
.text:0040D960
.text:0040D960 Stream          = dword ptr  4
.text:0040D960 Format          = dword ptr  8
.text:0040D960 ArgList         = dword ptr  0Ch
.text:0040D960
.text:0040D960                 jmp     ds:__imp_vfprintf
.text:0040D960 vfprintf        endp
.text:0040D960
.text:0040D960 ; ---------------------------------------------------------------------------
.text:0040D966                 align 10h
.text:0040D970
.text:0040D970 ; =============== S U B R O U T I N E =======================================
.text:0040D970
.text:0040D970 ; Attributes: thunk
.text:0040D970
.text:0040D970 ; char *__cdecl strerror(int ErrorMessage)
.text:0040D970 strerror        proc near               ; CODE XREF: sub_405C30+A5↑p
.text:0040D970                                         ; sub_405D34+10F↑p
.text:0040D970
.text:0040D970 ErrorMessage    = dword ptr  4
.text:0040D970
.text:0040D970                 jmp     ds:__imp_strerror
.text:0040D970 strerror        endp
.text:0040D970
.text:0040D970 ; ---------------------------------------------------------------------------
.text:0040D976                 align 10h
.text:0040D980
.text:0040D980 ; =============== S U B R O U T I N E =======================================
.text:0040D980
.text:0040D980 ; Attributes: thunk
.text:0040D980
.text:0040D980 ; int __cdecl flsbuf(int Ch, FILE *File)
.text:0040D980 _flsbuf         proc near               ; CODE XREF: sub_405C30+9B↑p
.text:0040D980                                         ; sub_405D34+FE↑p
.text:0040D980
.text:0040D980 File            = dword ptr  8
.text:0040D980
.text:0040D980                 jmp     ds:__imp__flsbuf
.text:0040D980 _flsbuf         endp
.text:0040D980
.text:0040D980 ; ---------------------------------------------------------------------------
.text:0040D986                 align 10h
.text:0040D990
.text:0040D990 ; =============== S U B R O U T I N E =======================================
.text:0040D990
.text:0040D990 ; Attributes: thunk
.text:0040D990
.text:0040D990 ; char *__cdecl strcat(char *Destination, const char *Source)
.text:0040D990 strcat          proc near               ; CODE XREF: sub_4064A0+98↑p
.text:0040D990                                         ; sub_407FA0+74↑p ...
.text:0040D990
.text:0040D990 Destination     = dword ptr  4
.text:0040D990 Source          = dword ptr  8
.text:0040D990
.text:0040D990                 jmp     ds:__imp_strcat
.text:0040D990 strcat          endp
.text:0040D990
.text:0040D990 ; ---------------------------------------------------------------------------
.text:0040D996                 align 10h
.text:0040D9A0
.text:0040D9A0 ; =============== S U B R O U T I N E =======================================
.text:0040D9A0
.text:0040D9A0 ; Attributes: thunk
.text:0040D9A0
.text:0040D9A0 ; char *__cdecl strcpy(char *Destination, const char *Source)
.text:0040D9A0 strcpy          proc near               ; CODE XREF: sub_4064A0+73↑p
.text:0040D9A0                                         ; sub_407FA0+35↑p ...
.text:0040D9A0
.text:0040D9A0 Destination     = dword ptr  4
.text:0040D9A0 Source          = dword ptr  8
.text:0040D9A0
.text:0040D9A0                 jmp     ds:__imp_strcpy
.text:0040D9A0 strcpy          endp
.text:0040D9A0
.text:0040D9A0 ; ---------------------------------------------------------------------------
.text:0040D9A6                 align 10h
.text:0040D9B0
.text:0040D9B0 ; =============== S U B R O U T I N E =======================================
.text:0040D9B0
.text:0040D9B0 ; Attributes: thunk
.text:0040D9B0
.text:0040D9B0 ; char *__cdecl strstr(const char *Str, const char *SubStr)
.text:0040D9B0 strstr          proc near               ; CODE XREF: sub_406AF0+3BF↑p
.text:0040D9B0                                         ; sub_406AF0+3DC↑p ...
.text:0040D9B0
.text:0040D9B0 Str             = dword ptr  4
.text:0040D9B0 SubStr          = dword ptr  8
.text:0040D9B0
.text:0040D9B0                 jmp     ds:__imp_strstr
.text:0040D9B0 strstr          endp
.text:0040D9B0
.text:0040D9B0 ; ---------------------------------------------------------------------------
.text:0040D9B6                 align 10h
.text:0040D9C0
.text:0040D9C0 ; =============== S U B R O U T I N E =======================================
.text:0040D9C0
.text:0040D9C0 ; Attributes: thunk
.text:0040D9C0
.text:0040D9C0 ; char *__cdecl getenv(const char *VarName)
.text:0040D9C0 getenv          proc near               ; CODE XREF: sub_406AF0+3EE↑p
.text:0040D9C0                                         ; .text:004072A7↑p ...
.text:0040D9C0
.text:0040D9C0 VarName         = dword ptr  4
.text:0040D9C0
.text:0040D9C0                 jmp     ds:__imp_getenv
.text:0040D9C0 getenv          endp
.text:0040D9C0
.text:0040D9C0 ; ---------------------------------------------------------------------------
.text:0040D9C6                 align 10h
.text:0040D9D0
.text:0040D9D0 ; =============== S U B R O U T I N E =======================================
.text:0040D9D0
.text:0040D9D0 ; Attributes: thunk
.text:0040D9D0
.text:0040D9D0 ; char *__cdecl strrchr(const char *Str, int Ch)
.text:0040D9D0 strrchr         proc near               ; CODE XREF: sub_406AF0+CB↑p
.text:0040D9D0                                         ; sub_406AF0+3A7↑p ...
.text:0040D9D0
.text:0040D9D0 Str             = dword ptr  4
.text:0040D9D0
.text:0040D9D0                 jmp     ds:__imp_strrchr
.text:0040D9D0 strrchr         endp
.text:0040D9D0
.text:0040D9D0 ; ---------------------------------------------------------------------------
.text:0040D9D6                 align 10h
.text:0040D9E0
.text:0040D9E0 ; =============== S U B R O U T I N E =======================================
.text:0040D9E0
.text:0040D9E0 ; Attributes: thunk
.text:0040D9E0
.text:0040D9E0 ; char *__cdecl strncpy(char *Destination, const char *Source, size_t Count)
.text:0040D9E0 strncpy         proc near               ; CODE XREF: sub_4084F0+BE↑p
.text:0040D9E0                                         ; .text:00408D6A↑p ...
.text:0040D9E0
.text:0040D9E0 Destination     = dword ptr  4
.text:0040D9E0 Source          = dword ptr  8
.text:0040D9E0 Count           = dword ptr  0Ch
.text:0040D9E0
.text:0040D9E0                 jmp     ds:__imp_strncpy
.text:0040D9E0 strncpy         endp
.text:0040D9E0
.text:0040D9E0 ; ---------------------------------------------------------------------------
.text:0040D9E6                 align 10h
.text:0040D9F0
.text:0040D9F0 ; =============== S U B R O U T I N E =======================================
.text:0040D9F0
.text:0040D9F0 ; Attributes: thunk
.text:0040D9F0
.text:0040D9F0 ; int __cdecl toupper(int C)
.text:0040D9F0 toupper         proc near               ; CODE XREF: sub_4084F0+10E↑p
.text:0040D9F0
.text:0040D9F0 C               = dword ptr  4
.text:0040D9F0
.text:0040D9F0                 jmp     ds:__imp_toupper
.text:0040D9F0 toupper         endp
.text:0040D9F0
.text:0040D9F0 ; ---------------------------------------------------------------------------
.text:0040D9F6                 align 10h
.text:0040DA00
.text:0040DA00 ; =============== S U B R O U T I N E =======================================
.text:0040DA00
.text:0040DA00 ; Attributes: thunk
.text:0040DA00
.text:0040DA00 ; char *__cdecl strchr(const char *Str, int Val)
.text:0040DA00 strchr          proc near               ; CODE XREF: sub_4084F0+94↑p
.text:0040DA00                                         ; sub_4084F0+DB↑p ...
.text:0040DA00
.text:0040DA00 Str             = dword ptr  4
.text:0040DA00 Val             = dword ptr  8
.text:0040DA00
.text:0040DA00                 jmp     ds:__imp_strchr
.text:0040DA00 strchr          endp
.text:0040DA00
.text:0040DA00 ; ---------------------------------------------------------------------------
.text:0040DA06                 align 10h
.text:0040DA10
.text:0040DA10 ; =============== S U B R O U T I N E =======================================
.text:0040DA10
.text:0040DA10 ; Attributes: thunk
.text:0040DA10
.text:0040DA10 ; int __cdecl isalpha(int C)
.text:0040DA10 isalpha         proc near               ; CODE XREF: _win32_longpath+25↑p
.text:0040DA10
.text:0040DA10 C               = dword ptr  4
.text:0040DA10
.text:0040DA10                 jmp     ds:__imp_isalpha
.text:0040DA10 isalpha         endp
.text:0040DA10
.text:0040DA10 ; ---------------------------------------------------------------------------
.text:0040DA16                 align 10h
.text:0040DA20
.text:0040DA20 ; =============== S U B R O U T I N E =======================================
.text:0040DA20
.text:0040DA20 ; Attributes: thunk
.text:0040DA20
.text:0040DA20 ; int __cdecl stricmp_0(const char *String1, const char *String2)
.text:0040DA20 _stricmp_0      proc near               ; CODE XREF: .text:004098A4↑p
.text:0040DA20
.text:0040DA20 String1         = dword ptr  4
.text:0040DA20 String2         = dword ptr  8
.text:0040DA20
.text:0040DA20                 jmp     ds:__imp__stricmp_0
.text:0040DA20 _stricmp_0      endp
.text:0040DA20
.text:0040DA20 ; ---------------------------------------------------------------------------
.text:0040DA26                 align 10h
.text:0040DA30
.text:0040DA30 ; =============== S U B R O U T I N E =======================================
.text:0040DA30
.text:0040DA30 ; Attributes: thunk
.text:0040DA30
.text:0040DA30 ; int sprintf(char *const Buffer, const char *const Format, ...)
.text:0040DA30 sprintf         proc near               ; CODE XREF: ___addmntentstr+11F↑p
.text:0040DA30                                         ; .text:0040AA3A↑p ...
.text:0040DA30
.text:0040DA30 Buffer          = dword ptr  4
.text:0040DA30 Format          = dword ptr  8
.text:0040DA30
.text:0040DA30                 jmp     ds:__imp_sprintf
.text:0040DA30 sprintf         endp
.text:0040DA30
.text:0040DA30 ; ---------------------------------------------------------------------------
.text:0040DA36                 align 10h
.text:0040DA40
.text:0040DA40 ; =============== S U B R O U T I N E =======================================
.text:0040DA40
.text:0040DA40 ; Attributes: thunk
.text:0040DA40
.text:0040DA40 ; int sscanf(const char *const Buffer, const char *const Format, ...)
.text:0040DA40 sscanf          proc near               ; CODE XREF: .text:00409CAE↑p
.text:0040DA40
.text:0040DA40 Buffer          = dword ptr  4
.text:0040DA40 Format          = dword ptr  8
.text:0040DA40
.text:0040DA40                 jmp     ds:__imp_sscanf
.text:0040DA40 sscanf          endp
.text:0040DA40
.text:0040DA40 ; ---------------------------------------------------------------------------
.text:0040DA46                 align 10h
.text:0040DA50
.text:0040DA50 ; =============== S U B R O U T I N E =======================================
.text:0040DA50
.text:0040DA50 ; Attributes: thunk
.text:0040DA50
.text:0040DA50 ; size_t __cdecl strspn(const char *Str, const char *Control)
.text:0040DA50 strspn          proc near               ; CODE XREF: .text:00409AFA↑p
.text:0040DA50                                         ; .text:00409D14↑p ...
.text:0040DA50
.text:0040DA50 Str             = dword ptr  4
.text:0040DA50 Control         = dword ptr  8
.text:0040DA50
.text:0040DA50                 jmp     ds:__imp_strspn
.text:0040DA50 strspn          endp
.text:0040DA50
.text:0040DA50 ; ---------------------------------------------------------------------------
.text:0040DA56                 align 10h
.text:0040DA60
.text:0040DA60 ; =============== S U B R O U T I N E =======================================
.text:0040DA60
.text:0040DA60 ; Attributes: thunk
.text:0040DA60
.text:0040DA60 ; FILE *__cdecl fopen(const char *FileName, const char *Mode)
.text:0040DA60 fopen           proc near               ; CODE XREF: sub_40A5AF+26↑p
.text:0040DA60                                         ; sub_40A5AF+99↑p
.text:0040DA60
.text:0040DA60 FileName        = dword ptr  4
.text:0040DA60 Mode            = dword ptr  8
.text:0040DA60
.text:0040DA60                 jmp     ds:__imp_fopen
.text:0040DA60 fopen           endp
.text:0040DA60
.text:0040DA60 ; ---------------------------------------------------------------------------
.text:0040DA66                 align 10h
.text:0040DA70
.text:0040DA70 ; =============== S U B R O U T I N E =======================================
.text:0040DA70
.text:0040DA70 ; Attributes: thunk
.text:0040DA70
.text:0040DA70 ; intptr_t __cdecl get_osfhandle(int FileHandle)
.text:0040DA70 _get_osfhandle  proc near               ; CODE XREF: sub_40A760+3A↑p
.text:0040DA70                                         ; sub_40B340+15↑p
.text:0040DA70
.text:0040DA70 FileHandle      = dword ptr  4
.text:0040DA70
.text:0040DA70                 jmp     ds:__imp__get_osfhandle
.text:0040DA70 _get_osfhandle  endp
.text:0040DA70
.text:0040DA70 ; ---------------------------------------------------------------------------
.text:0040DA76                 align 10h
.text:0040DA80
.text:0040DA80 ; =============== S U B R O U T I N E =======================================
.text:0040DA80
.text:0040DA80 ; Attributes: thunk
.text:0040DA80
.text:0040DA80 ; __int64 __cdecl filelengthi64(int FileHandle)
.text:0040DA80 _filelengthi64  proc near               ; CODE XREF: sub_40B340+1F↑p
.text:0040DA80
.text:0040DA80 FileHandle      = dword ptr  4
.text:0040DA80
.text:0040DA80                 jmp     ds:__imp__filelengthi64
.text:0040DA80 _filelengthi64  endp
.text:0040DA80
.text:0040DA80 ; ---------------------------------------------------------------------------
.text:0040DA86                 align 10h
.text:0040DA90
.text:0040DA90 ; =============== S U B R O U T I N E =======================================
.text:0040DA90
.text:0040DA90 ; Attributes: thunk
.text:0040DA90
.text:0040DA90 ; char *__cdecl strpbrk(const char *Str, const char *Control)
.text:0040DA90 strpbrk         proc near               ; CODE XREF: sub_40B3A0+87↑p
.text:0040DA90
.text:0040DA90 Str             = dword ptr  4
.text:0040DA90 Control         = dword ptr  8
.text:0040DA90
.text:0040DA90                 jmp     ds:__imp_strpbrk
.text:0040DA90 strpbrk         endp
.text:0040DA90
.text:0040DA90 ; ---------------------------------------------------------------------------
.text:0040DA96                 align 10h
.text:0040DAA0
.text:0040DAA0 ; =============== S U B R O U T I N E =======================================
.text:0040DAA0
.text:0040DAA0 ; Attributes: thunk
.text:0040DAA0
.text:0040DAA0 ; FILE *__cdecl fdopen(int FileHandle, const char *Format)
.text:0040DAA0 _fdopen         proc near               ; CODE XREF: sub_40B440+69↑p
.text:0040DAA0
.text:0040DAA0 FileHandle      = dword ptr  4
.text:0040DAA0 Format          = dword ptr  8
.text:0040DAA0
.text:0040DAA0                 jmp     ds:__imp__fdopen
.text:0040DAA0 _fdopen         endp
.text:0040DAA0
.text:0040DAA0 ; ---------------------------------------------------------------------------
.text:0040DAA6                 align 10h
.text:0040DAB0
.text:0040DAB0 ; =============== S U B R O U T I N E =======================================
.text:0040DAB0
.text:0040DAB0 ; Attributes: thunk
.text:0040DAB0
.text:0040DAB0 ; int __cdecl close(int FileHandle)
.text:0040DAB0 _close          proc near               ; CODE XREF: sub_40B440+90↑p
.text:0040DAB0
.text:0040DAB0 FileHandle      = dword ptr  4
.text:0040DAB0
.text:0040DAB0                 jmp     ds:__imp__close
.text:0040DAB0 _close          endp
.text:0040DAB0
.text:0040DAB0 ; ---------------------------------------------------------------------------
.text:0040DAB6                 align 10h
.text:0040DAC0
.text:0040DAC0 ; =============== S U B R O U T I N E =======================================
.text:0040DAC0
.text:0040DAC0 ; Attributes: thunk
.text:0040DAC0
.text:0040DAC0 ; int open(const char *FileName, int OpenFlag, ...)
.text:0040DAC0 _open           proc near               ; CODE XREF: sub_40B890:loc_40BC20↑p
.text:0040DAC0
.text:0040DAC0 FileName        = dword ptr  4
.text:0040DAC0 OpenFlag        = dword ptr  8
.text:0040DAC0
.text:0040DAC0                 jmp     ds:__imp__open
.text:0040DAC0 _open           endp
.text:0040DAC0
.text:0040DAC0 ; ---------------------------------------------------------------------------
.text:0040DAC6                 align 10h
.text:0040DAD0
.text:0040DAD0 ; =============== S U B R O U T I N E =======================================
.text:0040DAD0
.text:0040DAD0 ; Attributes: noreturn thunk
.text:0040DAD0
.text:0040DAD0 _assert         proc near               ; CODE XREF: sub_40B890+414↑p
.text:0040DAD0                 jmp     ds:__imp__assert
.text:0040DAD0 _assert         endp
.text:0040DAD0
.text:0040DAD0 ; ---------------------------------------------------------------------------
.text:0040DAD6                 align 10h
.text:0040DAE0
.text:0040DAE0 ; =============== S U B R O U T I N E =======================================
.text:0040DAE0
.text:0040DAE0 ; Attributes: thunk
.text:0040DAE0
.text:0040DAE0 ; LPTOP_LEVEL_EXCEPTION_FILTER __stdcall SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.text:0040DAE0 SetUnhandledExceptionFilter proc near   ; CODE XREF: sub_401080+E↑p
.text:0040DAE0
.text:0040DAE0 lpTopLevelExceptionFilter= dword ptr  4
.text:0040DAE0
.text:0040DAE0                 jmp     ds:__imp_SetUnhandledExceptionFilter
.text:0040DAE0 SetUnhandledExceptionFilter endp
.text:0040DAE0
.text:0040DAE0 ; ---------------------------------------------------------------------------
.text:0040DAE6                 align 10h
.text:0040DAF0
.text:0040DAF0 ; =============== S U B R O U T I N E =======================================
.text:0040DAF0
.text:0040DAF0 ; Attributes: noreturn thunk
.text:0040DAF0
.text:0040DAF0 ; void __stdcall __noreturn ExitProcess(UINT uExitCode)
.text:0040DAF0 ExitProcess     proc near               ; CODE XREF: .text:00401174↑p
.text:0040DAF0
.text:0040DAF0 uExitCode       = dword ptr  4
.text:0040DAF0
.text:0040DAF0                 jmp     ds:__imp_ExitProcess
.text:0040DAF0 ExitProcess     endp
.text:0040DAF0
.text:0040DAF0 ; ---------------------------------------------------------------------------
.text:0040DAF6                 align 10h
.text:0040DB00
.text:0040DB00 ; =============== S U B R O U T I N E =======================================
.text:0040DB00
.text:0040DB00 ; Attributes: thunk
.text:0040DB00
.text:0040DB00 ; UINT __stdcall SetErrorMode(UINT uMode)
.text:0040DB00 SetErrorMode    proc near               ; CODE XREF: sub_406220+57↑p
.text:0040DB00                                         ; sub_406220+78↑p ...
.text:0040DB00
.text:0040DB00 uMode           = dword ptr  4
.text:0040DB00
.text:0040DB00                 jmp     ds:__imp_SetErrorMode
.text:0040DB00 SetErrorMode    endp
.text:0040DB00
.text:0040DB00 ; ---------------------------------------------------------------------------
.text:0040DB06                 align 10h
.text:0040DB10
.text:0040DB10 ; =============== S U B R O U T I N E =======================================
.text:0040DB10
.text:0040DB10 ; Attributes: thunk
.text:0040DB10
.text:0040DB10 ; DWORD __stdcall GetFileAttributesA(LPCSTR lpFileName)
.text:0040DB10 GetFileAttributesA proc near            ; CODE XREF: sub_406220+62↑p
.text:0040DB10                                         ; sub_406330+47↑p
.text:0040DB10
.text:0040DB10 lpFileName      = dword ptr  4
.text:0040DB10
.text:0040DB10                 jmp     ds:__imp_GetFileAttributesA
.text:0040DB10 GetFileAttributesA endp
.text:0040DB10
.text:0040DB10 ; ---------------------------------------------------------------------------
.text:0040DB16                 align 10h
.text:0040DB20
.text:0040DB20 ; =============== S U B R O U T I N E =======================================
.text:0040DB20
.text:0040DB20 ; Attributes: thunk
.text:0040DB20
.text:0040DB20 ; HMODULE __stdcall GetModuleHandleA(LPCSTR lpModuleName)
.text:0040DB20 GetModuleHandleA proc near              ; CODE XREF: sub_406330+18↑p
.text:0040DB20                                         ; sub_406AF0+329↑p ...
.text:0040DB20
.text:0040DB20 lpModuleName    = dword ptr  4
.text:0040DB20
.text:0040DB20                 jmp     ds:__imp_GetModuleHandleA
.text:0040DB20 GetModuleHandleA endp
.text:0040DB20
.text:0040DB20 ; ---------------------------------------------------------------------------
.text:0040DB26                 align 10h
.text:0040DB30
.text:0040DB30 ; =============== S U B R O U T I N E =======================================
.text:0040DB30
.text:0040DB30 ; Attributes: thunk
.text:0040DB30
.text:0040DB30 ; FARPROC __stdcall GetProcAddress(HMODULE hModule, LPCSTR lpProcName)
.text:0040DB30 GetProcAddress  proc near               ; CODE XREF: sub_406330+33↑p
.text:0040DB30                                         ; sub_4064A0+2E↑p ...
.text:0040DB30
.text:0040DB30 hModule         = dword ptr  4
.text:0040DB30 lpProcName      = dword ptr  8
.text:0040DB30
.text:0040DB30                 jmp     ds:__imp_GetProcAddress
.text:0040DB30 GetProcAddress  endp
.text:0040DB30
.text:0040DB30 ; ---------------------------------------------------------------------------
.text:0040DB36                 align 10h
.text:0040DB40
.text:0040DB40 ; =============== S U B R O U T I N E =======================================
.text:0040DB40
.text:0040DB40 ; Attributes: thunk
.text:0040DB40
.text:0040DB40 ; BOOL __stdcall FreeLibrary(HMODULE hLibModule)
.text:0040DB40 FreeLibrary     proc near               ; CODE XREF: sub_406330+A4↑p
.text:0040DB40                                         ; sub_4064A0+11D↑p ...
.text:0040DB40
.text:0040DB40 hLibModule      = dword ptr  4
.text:0040DB40
.text:0040DB40                 jmp     ds:__imp_FreeLibrary
.text:0040DB40 FreeLibrary     endp
.text:0040DB40
.text:0040DB40 ; ---------------------------------------------------------------------------
.text:0040DB46                 align 10h
.text:0040DB50
.text:0040DB50 ; =============== S U B R O U T I N E =======================================
.text:0040DB50
.text:0040DB50 ; Attributes: thunk
.text:0040DB50
.text:0040DB50 ; HANDLE __stdcall FindFirstFileA(LPCSTR lpFileName, LPWIN32_FIND_DATAA lpFindFileData)
.text:0040DB50 FindFirstFileA  proc near               ; CODE XREF: sub_406330+CE↑p
.text:0040DB50                                         ; sub_4064A0+14F↑p ...
.text:0040DB50
.text:0040DB50 lpFileName      = dword ptr  4
.text:0040DB50 lpFindFileData  = dword ptr  8
.text:0040DB50
.text:0040DB50                 jmp     ds:__imp_FindFirstFileA
.text:0040DB50 FindFirstFileA  endp
.text:0040DB50
.text:0040DB50 ; ---------------------------------------------------------------------------
.text:0040DB56                 align 10h
.text:0040DB60
.text:0040DB60 ; =============== S U B R O U T I N E =======================================
.text:0040DB60
.text:0040DB60 ; Attributes: thunk
.text:0040DB60
.text:0040DB60 ; BOOL __stdcall FindClose(HANDLE hFindFile)
.text:0040DB60 FindClose       proc near               ; CODE XREF: sub_406330+123↑p
.text:0040DB60                                         ; sub_4064A0+10E↑p ...
.text:0040DB60
.text:0040DB60 hFindFile       = dword ptr  4
.text:0040DB60
.text:0040DB60                 jmp     ds:__imp_FindClose
.text:0040DB60 FindClose       endp
.text:0040DB60
.text:0040DB60 ; ---------------------------------------------------------------------------
.text:0040DB66                 align 10h
.text:0040DB70
.text:0040DB70 ; =============== S U B R O U T I N E =======================================
.text:0040DB70
.text:0040DB70 ; Attributes: thunk
.text:0040DB70
.text:0040DB70 ; HMODULE __stdcall LoadLibraryA(LPCSTR lpLibFileName)
.text:0040DB70 LoadLibraryA    proc near               ; CODE XREF: sub_4064A0+13↑p
.text:0040DB70                                         ; sub_406AF0+134↑p ...
.text:0040DB70
.text:0040DB70 lpLibFileName   = dword ptr  4
.text:0040DB70
.text:0040DB70                 jmp     ds:__imp_LoadLibraryA
.text:0040DB70 LoadLibraryA    endp
.text:0040DB70
.text:0040DB70 ; ---------------------------------------------------------------------------
.text:0040DB76                 align 10h
.text:0040DB80
.text:0040DB80 ; =============== S U B R O U T I N E =======================================
.text:0040DB80
.text:0040DB80 ; Attributes: thunk
.text:0040DB80
.text:0040DB80 ; BOOL __stdcall FindNextFileA(HANDLE hFindFile, LPWIN32_FIND_DATAA lpFindFileData)
.text:0040DB80 FindNextFileA   proc near               ; CODE XREF: sub_4064A0+FF↑p
.text:0040DB80
.text:0040DB80 hFindFile       = dword ptr  4
.text:0040DB80 lpFindFileData  = dword ptr  8
.text:0040DB80
.text:0040DB80                 jmp     ds:__imp_FindNextFileA
.text:0040DB80 FindNextFileA   endp
.text:0040DB80
.text:0040DB80 ; ---------------------------------------------------------------------------
.text:0040DB86                 align 10h
.text:0040DB90
.text:0040DB90 ; =============== S U B R O U T I N E =======================================
.text:0040DB90
.text:0040DB90 ; Attributes: thunk
.text:0040DB90
.text:0040DB90 ; DWORD __stdcall GetFileType(HANDLE hFile)
.text:0040DB90 GetFileType     proc near               ; CODE XREF: sub_406620+43↑p
.text:0040DB90                                         ; .text:004072DA↑p
.text:0040DB90
.text:0040DB90 hFile           = dword ptr  4
.text:0040DB90
.text:0040DB90                 jmp     ds:__imp_GetFileType
.text:0040DB90 GetFileType     endp
.text:0040DB90
.text:0040DB90 ; ---------------------------------------------------------------------------
.text:0040DB96                 align 10h
.text:0040DBA0
.text:0040DBA0 ; =============== S U B R O U T I N E =======================================
.text:0040DBA0
.text:0040DBA0 ; Attributes: thunk
.text:0040DBA0
.text:0040DBA0 ; BOOL __stdcall GetFileInformationByHandle(HANDLE hFile, LPBY_HANDLE_FILE_INFORMATION lpFileInformation)
.text:0040DBA0 GetFileInformationByHandle proc near    ; CODE XREF: sub_406620+69↑p
.text:0040DBA0
.text:0040DBA0 hFile           = dword ptr  4
.text:0040DBA0 lpFileInformation= dword ptr  8
.text:0040DBA0
.text:0040DBA0                 jmp     ds:__imp_GetFileInformationByHandle
.text:0040DBA0 GetFileInformationByHandle endp
.text:0040DBA0
.text:0040DBA0 ; ---------------------------------------------------------------------------
.text:0040DBA6                 align 10h
.text:0040DBB0
.text:0040DBB0 ; =============== S U B R O U T I N E =======================================
.text:0040DBB0
.text:0040DBB0 ; Attributes: thunk
.text:0040DBB0
.text:0040DBB0 ; DWORD __stdcall GetFileSize(HANDLE hFile, LPDWORD lpFileSizeHigh)
.text:0040DBB0 GetFileSize     proc near               ; CODE XREF: sub_406620+3F2↑p
.text:0040DBB0
.text:0040DBB0 hFile           = dword ptr  4
.text:0040DBB0 lpFileSizeHigh  = dword ptr  8
.text:0040DBB0
.text:0040DBB0                 jmp     ds:__imp_GetFileSize
.text:0040DBB0 GetFileSize     endp
.text:0040DBB0
.text:0040DBB0 ; ---------------------------------------------------------------------------
.text:0040DBB6                 align 10h
.text:0040DBC0
.text:0040DBC0 ; =============== S U B R O U T I N E =======================================
.text:0040DBC0
.text:0040DBC0 ; Attributes: thunk
.text:0040DBC0
.text:0040DBC0 ; BOOL __stdcall PeekNamedPipe(HANDLE hNamedPipe, LPVOID lpBuffer, DWORD nBufferSize, LPDWORD lpBytesRead, LPDWORD lpTotalBytesAvail, LPDWORD lpBytesLeftThisMessage)
.text:0040DBC0 PeekNamedPipe   proc near               ; CODE XREF: sub_406620+439↑p
.text:0040DBC0
.text:0040DBC0 hNamedPipe      = dword ptr  4
.text:0040DBC0 lpBuffer        = dword ptr  8
.text:0040DBC0 nBufferSize     = dword ptr  0Ch
.text:0040DBC0 lpBytesRead     = dword ptr  10h
.text:0040DBC0 lpTotalBytesAvail= dword ptr  14h
.text:0040DBC0 lpBytesLeftThisMessage= dword ptr  18h
.text:0040DBC0
.text:0040DBC0                 jmp     ds:__imp_PeekNamedPipe
.text:0040DBC0 PeekNamedPipe   endp
.text:0040DBC0
.text:0040DBC0 ; ---------------------------------------------------------------------------
.text:0040DBC6                 align 10h
.text:0040DBD0
.text:0040DBD0 ; =============== S U B R O U T I N E =======================================
.text:0040DBD0
.text:0040DBD0 ; Attributes: thunk
.text:0040DBD0
.text:0040DBD0 ; UINT __stdcall GetDriveTypeA(LPCSTR lpRootPathName)
.text:0040DBD0 GetDriveTypeA   proc near               ; CODE XREF: sub_406AF0+4C↑p
.text:0040DBD0
.text:0040DBD0 lpRootPathName  = dword ptr  4
.text:0040DBD0
.text:0040DBD0                 jmp     ds:__imp_GetDriveTypeA
.text:0040DBD0 GetDriveTypeA   endp
.text:0040DBD0
.text:0040DBD0 ; ---------------------------------------------------------------------------
.text:0040DBD6                 align 10h
.text:0040DBE0
.text:0040DBE0 ; =============== S U B R O U T I N E =======================================
.text:0040DBE0
.text:0040DBE0 ; Attributes: thunk
.text:0040DBE0
.text:0040DBE0 ; DWORD __stdcall GetLastError()
.text:0040DBE0 GetLastError    proc near               ; CODE XREF: sub_406AF0:loc_406D79↑p
.text:0040DBE0                                         ; .text:loc_4078BD↑p ...
.text:0040DBE0                 jmp     ds:__imp_GetLastError
.text:0040DBE0 GetLastError    endp
.text:0040DBE0
.text:0040DBE0 ; ---------------------------------------------------------------------------
.text:0040DBE6                 align 10h
.text:0040DBF0
.text:0040DBF0 ; =============== S U B R O U T I N E =======================================
.text:0040DBF0
.text:0040DBF0 ; Attributes: thunk
.text:0040DBF0
.text:0040DBF0 ; BOOL __stdcall GetVolumeInformationA(LPCSTR lpRootPathName, LPSTR lpVolumeNameBuffer, DWORD nVolumeNameSize, LPDWORD lpVolumeSerialNumber, LPDWORD lpMaximumComponentLength, LPDWORD lpFileSystemFlags, LPSTR lpFileSystemNameBuffer, DWORD nFileSystemNameSize)
.text:0040DBF0 GetVolumeInformationA proc near         ; CODE XREF: sub_406FF0+64↑p
.text:0040DBF0                                         ; .text:0040759C↑p ...
.text:0040DBF0
.text:0040DBF0 lpRootPathName  = dword ptr  4
.text:0040DBF0 lpVolumeNameBuffer= dword ptr  8
.text:0040DBF0 nVolumeNameSize = dword ptr  0Ch
.text:0040DBF0 lpVolumeSerialNumber= dword ptr  10h
.text:0040DBF0 lpMaximumComponentLength= dword ptr  14h
.text:0040DBF0 lpFileSystemFlags= dword ptr  18h
.text:0040DBF0 lpFileSystemNameBuffer= dword ptr  1Ch
.text:0040DBF0 nFileSystemNameSize= dword ptr  20h
.text:0040DBF0
.text:0040DBF0                 jmp     ds:__imp_GetVolumeInformationA
.text:0040DBF0 GetVolumeInformationA endp
.text:0040DBF0
.text:0040DBF0 ; ---------------------------------------------------------------------------
.text:0040DBF6                 align 10h
.text:0040DC00
.text:0040DC00 ; =============== S U B R O U T I N E =======================================
.text:0040DC00
.text:0040DC00 ; Attributes: thunk
.text:0040DC00
.text:0040DC00 ; HANDLE __stdcall CreateFileA(LPCSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile)
.text:0040DC00 CreateFileA     proc near               ; CODE XREF: sub_406010+1D76↑p
.text:0040DC00                                         ; .text:00408AE3↑p ...
.text:0040DC00
.text:0040DC00 lpFileName      = dword ptr  4
.text:0040DC00 dwDesiredAccess = dword ptr  8
.text:0040DC00 dwShareMode     = dword ptr  0Ch
.text:0040DC00 lpSecurityAttributes= dword ptr  10h
.text:0040DC00 dwCreationDisposition= dword ptr  14h
.text:0040DC00 dwFlagsAndAttributes= dword ptr  18h
.text:0040DC00 hTemplateFile   = dword ptr  1Ch
.text:0040DC00
.text:0040DC00                 jmp     ds:__imp_CreateFileA
.text:0040DC00 CreateFileA     endp
.text:0040DC00
.text:0040DC00 ; ---------------------------------------------------------------------------
.text:0040DC06                 align 10h
.text:0040DC10
.text:0040DC10 ; =============== S U B R O U T I N E =======================================
.text:0040DC10
.text:0040DC10 ; Attributes: thunk
.text:0040DC10
.text:0040DC10 ; BOOL __stdcall CloseHandle(HANDLE hObject)
.text:0040DC10 CloseHandle     proc near               ; CODE XREF: sub_406010+1D91↑p
.text:0040DC10                                         ; .text:00408B59↑p ...
.text:0040DC10
.text:0040DC10 hObject         = dword ptr  4
.text:0040DC10
.text:0040DC10                 jmp     ds:__imp_CloseHandle
.text:0040DC10 CloseHandle     endp
.text:0040DC10
.text:0040DC10 ; ---------------------------------------------------------------------------
.text:0040DC16                 align 10h
.text:0040DC20
.text:0040DC20 ; =============== S U B R O U T I N E =======================================
.text:0040DC20
.text:0040DC20 ; Attributes: thunk
.text:0040DC20
.text:0040DC20 ; BOOL __stdcall AreFileApisANSI()
.text:0040DC20 AreFileApisANSI proc near               ; CODE XREF: sub_407E20+89↑p
.text:0040DC20                 jmp     ds:__imp_AreFileApisANSI
.text:0040DC20 AreFileApisANSI endp
.text:0040DC20
.text:0040DC20 ; ---------------------------------------------------------------------------
.text:0040DC26                 align 10h
.text:0040DC30
.text:0040DC30 ; =============== S U B R O U T I N E =======================================
.text:0040DC30
.text:0040DC30 ; Attributes: thunk
.text:0040DC30
.text:0040DC30 ; int __stdcall MultiByteToWideChar(UINT CodePage, DWORD dwFlags, LPCCH lpMultiByteStr, int cbMultiByte, LPWSTR lpWideCharStr, int cchWideChar)
.text:0040DC30 MultiByteToWideChar proc near           ; CODE XREF: sub_407E20+BD↑p
.text:0040DC30
.text:0040DC30 CodePage        = dword ptr  4
.text:0040DC30 dwFlags         = dword ptr  8
.text:0040DC30 lpMultiByteStr  = dword ptr  0Ch
.text:0040DC30 cbMultiByte     = dword ptr  10h
.text:0040DC30 lpWideCharStr   = dword ptr  14h
.text:0040DC30 cchWideChar     = dword ptr  18h
.text:0040DC30
.text:0040DC30                 jmp     ds:__imp_MultiByteToWideChar
.text:0040DC30 MultiByteToWideChar endp
.text:0040DC30
.text:0040DC30 ; ---------------------------------------------------------------------------
.text:0040DC36                 align 10h
.text:0040DC40
.text:0040DC40 ; =============== S U B R O U T I N E =======================================
.text:0040DC40
.text:0040DC40 ; Attributes: thunk
.text:0040DC40
.text:0040DC40 ; LPSTR __stdcall lstrcpyA(LPSTR lpString1, LPCSTR lpString2)
.text:0040DC40 lstrcpyA        proc near               ; CODE XREF: sub_407E20+128↑p
.text:0040DC40
.text:0040DC40 lpString1       = dword ptr  4
.text:0040DC40 lpString2       = dword ptr  8
.text:0040DC40
.text:0040DC40                 jmp     ds:__imp_lstrcpyA
.text:0040DC40 lstrcpyA        endp
.text:0040DC40
.text:0040DC40 ; ---------------------------------------------------------------------------
.text:0040DC46                 align 10h
.text:0040DC50
.text:0040DC50 ; =============== S U B R O U T I N E =======================================
.text:0040DC50
.text:0040DC50 ; Attributes: thunk
.text:0040DC50
.text:0040DC50 ; DWORD __stdcall GetFullPathNameA(LPCSTR lpFileName, DWORD nBufferLength, LPSTR lpBuffer, LPSTR *lpFilePart)
.text:0040DC50 GetFullPathNameA proc near              ; CODE XREF: sub_4083B0+45↑p
.text:0040DC50                                         ; sub_4083B0+ED↑p
.text:0040DC50
.text:0040DC50 lpFileName      = dword ptr  4
.text:0040DC50 nBufferLength   = dword ptr  8
.text:0040DC50 lpBuffer        = dword ptr  0Ch
.text:0040DC50 lpFilePart      = dword ptr  10h
.text:0040DC50
.text:0040DC50                 jmp     ds:__imp_GetFullPathNameA
.text:0040DC50 GetFullPathNameA endp
.text:0040DC50
.text:0040DC50 ; ---------------------------------------------------------------------------
.text:0040DC56                 align 10h
.text:0040DC60
.text:0040DC60 ; =============== S U B R O U T I N E =======================================
.text:0040DC60
.text:0040DC60 ; Attributes: thunk
.text:0040DC60
.text:0040DC60 ; DWORD __stdcall GetCurrentDirectoryA(DWORD nBufferLength, LPSTR lpBuffer)
.text:0040DC60 GetCurrentDirectoryA proc near          ; CODE XREF: .text:00408798↑p
.text:0040DC60                                         ; .text:004087B4↑p ...
.text:0040DC60
.text:0040DC60 nBufferLength   = dword ptr  4
.text:0040DC60 lpBuffer        = dword ptr  8
.text:0040DC60
.text:0040DC60                 jmp     ds:__imp_GetCurrentDirectoryA
.text:0040DC60 GetCurrentDirectoryA endp
.text:0040DC60
.text:0040DC60 ; ---------------------------------------------------------------------------
.text:0040DC66                 align 10h
.text:0040DC70
.text:0040DC70 ; =============== S U B R O U T I N E =======================================
.text:0040DC70
.text:0040DC70 ; Attributes: thunk
.text:0040DC70
.text:0040DC70 ; BOOL __stdcall DeviceIoControl(HANDLE hDevice, DWORD dwIoControlCode, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesReturned, LPOVERLAPPED lpOverlapped)
.text:0040DC70 DeviceIoControl proc near               ; CODE XREF: .text:00408B4C↑p
.text:0040DC70                                         ; sub_408F10+1E5↑p
.text:0040DC70
.text:0040DC70 hDevice         = dword ptr  4
.text:0040DC70 dwIoControlCode = dword ptr  8
.text:0040DC70 lpInBuffer      = dword ptr  0Ch
.text:0040DC70 nInBufferSize   = dword ptr  10h
.text:0040DC70 lpOutBuffer     = dword ptr  14h
.text:0040DC70 nOutBufferSize  = dword ptr  18h
.text:0040DC70 lpBytesReturned = dword ptr  1Ch
.text:0040DC70 lpOverlapped    = dword ptr  20h
.text:0040DC70
.text:0040DC70                 jmp     ds:__imp_DeviceIoControl
.text:0040DC70 DeviceIoControl endp
.text:0040DC70
.text:0040DC70 ; ---------------------------------------------------------------------------
.text:0040DC76                 align 10h
.text:0040DC80
.text:0040DC80 ; =============== S U B R O U T I N E =======================================
.text:0040DC80
.text:0040DC80 ; Attributes: thunk
.text:0040DC80
.text:0040DC80 ; BOOL __stdcall GetDiskFreeSpaceA(LPCSTR lpRootPathName, LPDWORD lpSectorsPerCluster, LPDWORD lpBytesPerSector, LPDWORD lpNumberOfFreeClusters, LPDWORD lpTotalNumberOfClusters)
.text:0040DC80 GetDiskFreeSpaceA proc near             ; CODE XREF: .text:00408EA3↑p
.text:0040DC80                                         ; sub_408F10+7B↑p ...
.text:0040DC80
.text:0040DC80 lpRootPathName  = dword ptr  4
.text:0040DC80 lpSectorsPerCluster= dword ptr  8
.text:0040DC80 lpBytesPerSector= dword ptr  0Ch
.text:0040DC80 lpNumberOfFreeClusters= dword ptr  10h
.text:0040DC80 lpTotalNumberOfClusters= dword ptr  14h
.text:0040DC80
.text:0040DC80                 jmp     ds:__imp_GetDiskFreeSpaceA
.text:0040DC80 GetDiskFreeSpaceA endp
.text:0040DC80
.text:0040DC80 ; ---------------------------------------------------------------------------
.text:0040DC86                 align 10h
.text:0040DC90
.text:0040DC90 ; =============== S U B R O U T I N E =======================================
.text:0040DC90
.text:0040DC90 ; Attributes: thunk
.text:0040DC90
.text:0040DC90 ; DWORD __stdcall GetModuleFileNameA(HMODULE hModule, LPSTR lpFilename, DWORD nSize)
.text:0040DC90 GetModuleFileNameA proc near            ; CODE XREF: sub_409720+1C↑p
.text:0040DC90
.text:0040DC90 hModule         = dword ptr  4
.text:0040DC90 lpFilename      = dword ptr  8
.text:0040DC90 nSize           = dword ptr  0Ch
.text:0040DC90
.text:0040DC90                 jmp     ds:__imp_GetModuleFileNameA
.text:0040DC90 GetModuleFileNameA endp
.text:0040DC90
.text:0040DC90 ; ---------------------------------------------------------------------------
.text:0040DC96                 align 10h
.text:0040DCA0
.text:0040DCA0 ; =============== S U B R O U T I N E =======================================
.text:0040DCA0
.text:0040DCA0 ; Attributes: thunk
.text:0040DCA0
.text:0040DCA0 ; DWORD __stdcall GetShortPathNameA(LPCSTR lpszLongPath, LPSTR lpszShortPath, DWORD cchBuffer)
.text:0040DCA0 GetShortPathNameA proc near             ; CODE XREF: .text:004099A6↑p
.text:0040DCA0                                         ; .text:004099D0↑p
.text:0040DCA0
.text:0040DCA0 lpszLongPath    = dword ptr  4
.text:0040DCA0 lpszShortPath   = dword ptr  8
.text:0040DCA0 cchBuffer       = dword ptr  0Ch
.text:0040DCA0
.text:0040DCA0                 jmp     ds:__imp_GetShortPathNameA
.text:0040DCA0 GetShortPathNameA endp
.text:0040DCA0
.text:0040DCA0 ; ---------------------------------------------------------------------------
.text:0040DCA6                 align 10h
.text:0040DCB0
.text:0040DCB0 ; =============== S U B R O U T I N E =======================================
.text:0040DCB0
.text:0040DCB0 ; Attributes: thunk
.text:0040DCB0
.text:0040DCB0 ; DWORD __stdcall GetLogicalDriveStringsA(DWORD nBufferLength, LPSTR lpBuffer)
.text:0040DCB0 GetLogicalDriveStringsA proc near       ; CODE XREF: .text:00409E6F↑p
.text:0040DCB0                                         ; .text:00409E9E↑p ...
.text:0040DCB0
.text:0040DCB0 nBufferLength   = dword ptr  4
.text:0040DCB0 lpBuffer        = dword ptr  8
.text:0040DCB0
.text:0040DCB0                 jmp     ds:__imp_GetLogicalDriveStringsA
.text:0040DCB0 GetLogicalDriveStringsA endp
.text:0040DCB0
.text:0040DCB0 ; ---------------------------------------------------------------------------
.text:0040DCB6                 align 10h
.text:0040DCC0
.text:0040DCC0 ; =============== S U B R O U T I N E =======================================
.text:0040DCC0
.text:0040DCC0 ; Attributes: thunk
.text:0040DCC0
.text:0040DCC0 ; HANDLE __stdcall GetProcessHeap()
.text:0040DCC0 GetProcessHeap  proc near               ; CODE XREF: .text:00409E79↑p
.text:0040DCC0                                         ; sub_40A550+24↑p ...
.text:0040DCC0                 jmp     ds:__imp_GetProcessHeap
.text:0040DCC0 GetProcessHeap  endp
.text:0040DCC0
.text:0040DCC0 ; ---------------------------------------------------------------------------
.text:0040DCC6                 align 10h
.text:0040DCD0
.text:0040DCD0 ; =============== S U B R O U T I N E =======================================
.text:0040DCD0
.text:0040DCD0 ; Attributes: thunk
.text:0040DCD0
.text:0040DCD0 ; LPVOID __stdcall HeapAlloc(HANDLE hHeap, DWORD dwFlags, SIZE_T dwBytes)
.text:0040DCD0 HeapAlloc       proc near               ; CODE XREF: .text:00409E8D↑p
.text:0040DCD0                                         ; sub_40A550+38↑p ...
.text:0040DCD0
.text:0040DCD0 hHeap           = dword ptr  4
.text:0040DCD0 dwFlags         = dword ptr  8
.text:0040DCD0 dwBytes         = dword ptr  0Ch
.text:0040DCD0
.text:0040DCD0                 jmp     ds:__imp_HeapAlloc
.text:0040DCD0 HeapAlloc       endp
.text:0040DCD0
.text:0040DCD0 ; ---------------------------------------------------------------------------
.text:0040DCD6                 align 10h
.text:0040DCE0
.text:0040DCE0 ; =============== S U B R O U T I N E =======================================
.text:0040DCE0
.text:0040DCE0 ; Attributes: thunk
.text:0040DCE0
.text:0040DCE0 ; BOOL __stdcall HeapFree(HANDLE hHeap, DWORD dwFlags, LPVOID lpMem)
.text:0040DCE0 HeapFree        proc near               ; CODE XREF: .text:0040A68D↑p
.text:0040DCE0
.text:0040DCE0 hHeap           = dword ptr  4
.text:0040DCE0 dwFlags         = dword ptr  8
.text:0040DCE0 lpMem           = dword ptr  0Ch
.text:0040DCE0
.text:0040DCE0                 jmp     ds:__imp_HeapFree
.text:0040DCE0 HeapFree        endp
.text:0040DCE0
.text:0040DCE0 ; ---------------------------------------------------------------------------
.text:0040DCE6                 align 10h
.text:0040DCF0
.text:0040DCF0 ; =============== S U B R O U T I N E =======================================
.text:0040DCF0
.text:0040DCF0 ; Attributes: thunk
.text:0040DCF0
.text:0040DCF0 ; int __stdcall lstrcmpiA(LPCSTR lpString1, LPCSTR lpString2)
.text:0040DCF0 lstrcmpiA       proc near               ; CODE XREF: .text:0040ACCB↑p
.text:0040DCF0                                         ; .text:0040ACE2↑p ...
.text:0040DCF0
.text:0040DCF0 lpString1       = dword ptr  4
.text:0040DCF0 lpString2       = dword ptr  8
.text:0040DCF0
.text:0040DCF0                 jmp     ds:__imp_lstrcmpiA
.text:0040DCF0 lstrcmpiA       endp
.text:0040DCF0
.text:0040DCF0 ; ---------------------------------------------------------------------------
.text:0040DCF6                 align 10h
.text:0040DD00
.text:0040DD00 ; =============== S U B R O U T I N E =======================================
.text:0040DD00
.text:0040DD00 ; Attributes: thunk
.text:0040DD00
.text:0040DD00 ; DWORD __stdcall GetVersion()
.text:0040DD00 GetVersion      proc near               ; CODE XREF: .text:0040B053↑p
.text:0040DD00                 jmp     ds:__imp_GetVersion
.text:0040DD00 GetVersion      endp
.text:0040DD00
.text:0040DD00 ; ---------------------------------------------------------------------------
.text:0040DD06                 align 10h
.text:0040DD10
.text:0040DD10 ; =============== S U B R O U T I N E =======================================
.text:0040DD10
.text:0040DD10 ; Attributes: thunk
.text:0040DD10
.text:0040DD10 ; BOOL __stdcall GetVersionExA(LPOSVERSIONINFOA lpVersionInformation)
.text:0040DD10 GetVersionExA   proc near               ; CODE XREF: sub_40B0E0+32↑p
.text:0040DD10                                         ; sub_40B0E0+20B↑p
.text:0040DD10
.text:0040DD10 lpVersionInformation= dword ptr  4
.text:0040DD10
.text:0040DD10                 jmp     ds:__imp_GetVersionExA
.text:0040DD10 GetVersionExA   endp
.text:0040DD10
.text:0040DD10 ; ---------------------------------------------------------------------------
.text:0040DD16                 align 10h
.text:0040DD20
.text:0040DD20 ; =============== S U B R O U T I N E =======================================
.text:0040DD20
.text:0040DD20 ; Attributes: thunk
.text:0040DD20
.text:0040DD20 ; BOOL __stdcall UnlockFile(HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToUnlockLow, DWORD nNumberOfBytesToUnlockHigh)
.text:0040DD20 UnlockFile      proc near               ; CODE XREF: sub_40B340+40↑p
.text:0040DD20
.text:0040DD20 hFile           = dword ptr  4
.text:0040DD20 dwFileOffsetLow = dword ptr  8
.text:0040DD20 dwFileOffsetHigh= dword ptr  0Ch
.text:0040DD20 nNumberOfBytesToUnlockLow= dword ptr  10h
.text:0040DD20 nNumberOfBytesToUnlockHigh= dword ptr  14h
.text:0040DD20
.text:0040DD20                 jmp     ds:__imp_UnlockFile
.text:0040DD20 UnlockFile      endp
.text:0040DD20
.text:0040DD20 ; ---------------------------------------------------------------------------
.text:0040DD26                 align 10h
.text:0040DD30
.text:0040DD30 ; =============== S U B R O U T I N E =======================================
.text:0040DD30
.text:0040DD30 ; Attributes: thunk
.text:0040DD30
.text:0040DD30 ; BOOL __stdcall CreateDirectoryA(LPCSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes)
.text:0040DD30 CreateDirectoryA proc near              ; CODE XREF: sub_40BCC0+22↑p
.text:0040DD30
.text:0040DD30 lpPathName      = dword ptr  4
.text:0040DD30 lpSecurityAttributes= dword ptr  8
.text:0040DD30
.text:0040DD30                 jmp     ds:__imp_CreateDirectoryA
.text:0040DD30 CreateDirectoryA endp
.text:0040DD30
.text:0040DD30 ; ---------------------------------------------------------------------------
.text:0040DD36                 align 10h
.text:0040DD40
.text:0040DD40 ; =============== S U B R O U T I N E =======================================
.text:0040DD40
.text:0040DD40 ; Attributes: thunk
.text:0040DD40
.text:0040DD40 ; DWORD __stdcall GetTimeZoneInformation(LPTIME_ZONE_INFORMATION lpTimeZoneInformation)
.text:0040DD40 GetTimeZoneInformation proc near        ; CODE XREF: sub_40BDC0+22↑p
.text:0040DD40
.text:0040DD40 lpTimeZoneInformation= dword ptr  4
.text:0040DD40
.text:0040DD40                 jmp     ds:__imp_GetTimeZoneInformation
.text:0040DD40 GetTimeZoneInformation endp
.text:0040DD40
.text:0040DD40 ; ---------------------------------------------------------------------------
.text:0040DD46                 align 10h
.text:0040DD50
.text:0040DD50 ; =============== S U B R O U T I N E =======================================
.text:0040DD50
.text:0040DD50 ; Attributes: thunk
.text:0040DD50
.text:0040DD50 ; void __stdcall GetSystemTimeAsFileTime(LPFILETIME lpSystemTimeAsFileTime)
.text:0040DD50 GetSystemTimeAsFileTime proc near       ; CODE XREF: sub_40BDC0+4F↑p
.text:0040DD50
.text:0040DD50 lpSystemTimeAsFileTime= dword ptr  4
.text:0040DD50
.text:0040DD50                 jmp     ds:__imp_GetSystemTimeAsFileTime
.text:0040DD50 GetSystemTimeAsFileTime endp
.text:0040DD50
.text:0040DD50 ; ---------------------------------------------------------------------------
.text:0040DD56                 align 10h
.text:0040DD60
.text:0040DD60 ; =============== S U B R O U T I N E =======================================
.text:0040DD60
.text:0040DD60 ; Attributes: thunk
.text:0040DD60
.text:0040DD60 ; LSTATUS __stdcall RegOpenKeyExA(HKEY hKey, LPCSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult)
.text:0040DD60 RegOpenKeyExA   proc near               ; CODE XREF: .text:0040AC51↑p
.text:0040DD60
.text:0040DD60 hKey            = dword ptr  4
.text:0040DD60 lpSubKey        = dword ptr  8
.text:0040DD60 ulOptions       = dword ptr  0Ch
.text:0040DD60 samDesired      = dword ptr  10h
.text:0040DD60 phkResult       = dword ptr  14h
.text:0040DD60
.text:0040DD60                 jmp     ds:__imp_RegOpenKeyExA
.text:0040DD60 RegOpenKeyExA   endp
.text:0040DD60
.text:0040DD60 ; ---------------------------------------------------------------------------
.text:0040DD66                 align 10h
.text:0040DD70
.text:0040DD70 ; =============== S U B R O U T I N E =======================================
.text:0040DD70
.text:0040DD70 ; Attributes: thunk
.text:0040DD70
.text:0040DD70 ; LSTATUS __stdcall RegQueryValueExA(HKEY hKey, LPCSTR lpValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData)
.text:0040DD70 RegQueryValueExA proc near              ; CODE XREF: .text:0040AC94↑p
.text:0040DD70
.text:0040DD70 hKey            = dword ptr  4
.text:0040DD70 lpValueName     = dword ptr  8
.text:0040DD70 lpReserved      = dword ptr  0Ch
.text:0040DD70 lpType          = dword ptr  10h
.text:0040DD70 lpData          = dword ptr  14h
.text:0040DD70 lpcbData        = dword ptr  18h
.text:0040DD70
.text:0040DD70                 jmp     ds:__imp_RegQueryValueExA
.text:0040DD70 RegQueryValueExA endp
.text:0040DD70
.text:0040DD70 ; ---------------------------------------------------------------------------
.text:0040DD76                 align 10h
.text:0040DD80
.text:0040DD80 ; =============== S U B R O U T I N E =======================================
.text:0040DD80
.text:0040DD80 ; Attributes: thunk
.text:0040DD80
.text:0040DD80 ; LSTATUS __stdcall RegCloseKey(HKEY hKey)
.text:0040DD80 RegCloseKey     proc near               ; CODE XREF: .text:0040ACB8↑p
.text:0040DD80
.text:0040DD80 hKey            = dword ptr  4
.text:0040DD80
.text:0040DD80                 jmp     ds:__imp_RegCloseKey
.text:0040DD80 RegCloseKey     endp
.text:0040DD80
.text:0040DD80 ; ---------------------------------------------------------------------------
.text:0040DD86                 db 2 dup(90h)
.text:0040DD88                 dd 2 dup(0)
.text:0040DD90                 dd 21400h, 0
.text:0040DD98                 dd 0C0h, 46000000h
.text:0040DDA0 ; const IID rclsid
.text:0040DDA0 rclsid          dd 21401h               ; Data1
.text:0040DDA0                                         ; DATA XREF: sub_407E20+4B↑o
.text:0040DDA0                 dw 0                    ; Data2
.text:0040DDA0                 dw 0                    ; Data3
.text:0040DDA0                 db 0C0h, 6 dup(0), 46h  ; Data4
.text:0040DDB0                 dd 214A0h, 0
.text:0040DDB8                 dd 0C0h, 46000000h, 214A1h, 0
.text:0040DDC8                 dd 0C0h, 46000000h, 214D0h, 0
.text:0040DDD8                 dd 0C0h, 46000000h, 214D1h, 0
.text:0040DDE8                 dd 0C0h, 46000000h, 214D2h, 0
.text:0040DDF8                 dd 0C0h, 46000000h, 214E1h, 0
.text:0040DE08                 dd 0C0h, 46000000h, 214E2h, 0
.text:0040DE18                 dd 0C0h, 46000000h, 214E3h, 0
.text:0040DE28                 dd 0C0h, 46000000h, 214E4h, 0
.text:0040DE38                 dd 0C0h, 46000000h, 21500h, 0
.text:0040DE48                 dd 0C0h, 46000000h, 214E5h, 0
.text:0040DE58                 dd 0C0h, 46000000h, 214E6h, 0
.text:0040DE68                 dd 0C0h, 46000000h, 214E8h, 0
.text:0040DE78                 dd 0C0h, 46000000h, 214E9h, 0
.text:0040DE88                 dd 0C0h, 46000000h, 214EAh, 0
.text:0040DE98                 dd 0C0h, 46000000h, 214EBh, 0
.text:0040DEA8                 dd 0C0h, 46000000h
.text:0040DEB0 ; const IID riid
.text:0040DEB0 riid            dd 214EEh               ; Data1
.text:0040DEB0                                         ; DATA XREF: sub_407E20+2B↑o
.text:0040DEB0                 dw 0                    ; Data2
.text:0040DEB0                 dw 0                    ; Data3
.text:0040DEB0                 db 0C0h, 6 dup(0), 46h  ; Data4
.text:0040DEC0                 dd 214EFh, 0
.text:0040DEC8                 dd 0C0h, 46000000h, 214F0h, 0
.text:0040DED8                 dd 0C0h, 46000000h, 214F1h, 0
.text:0040DEE8                 dd 0C0h, 46000000h, 214F2h, 0
.text:0040DEF8                 dd 0C0h, 46000000h, 214F3h, 0
.text:0040DF08                 dd 0C0h, 46000000h, 214F4h, 0
.text:0040DF18                 dd 0C0h, 46000000h, 214F5h, 0
.text:0040DF28                 dd 0C0h, 46000000h, 214F6h, 0
.text:0040DF38                 dd 0C0h, 46000000h, 214F7h, 0
.text:0040DF48                 dd 0C0h, 46000000h, 214F8h, 0
.text:0040DF58                 dd 0C0h, 46000000h, 214F9h, 0
.text:0040DF68                 dd 0C0h, 46000000h, 214FAh, 0
.text:0040DF78                 dd 0C0h, 46000000h, 214FBh, 0
.text:0040DF88                 dd 0C0h, 46000000h, 214FCh, 0
.text:0040DF98                 dd 0C0h, 46000000h, 88E39E80h, 11CF3578h, 869AEh, 62122E2Bh
.text:0040DF98                 dd 93F2F68Ch, 11D31D1Bh, 0C0000EA3h, 0D1AB794Fh, 1AC3D9F0h
.text:0040DF98                 dd 11D1175Ch, 6000BE95h, 4FEA9797h, 0CEF04FDFh, 11D2FE72h
.text:0040DF98                 dd 0C000A587h, 0CF37684Fh, 1E18D10h, 11D24D8Bh, 60005D85h
.text:0040DF98                 dd 67930508h, 0EAB22AC0h, 11CF30C1h, 0EBA7h, 0BAE5BC0h
.text:0040DF98                 dd 0EAB22AC1h, 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0EAB22AC2h
.text:0040DF98                 dd 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0EAB22AC3h, 11CF30C1h
.text:0040DF98                 dd 0EBA7h, 0BAE5BC0h, 0EAB22AC4h, 11CF30C1h, 0EBA7h, 0BAE5BC0h
.text:0040DF98                 dd 0EAB22AC5h, 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0EAB22AC6h
.text:0040DF98                 dd 11CF30C1h, 0EBA7h, 0BAE5BC0h, 2DF07h, 0
.text:0040E068                 dd 0C0h, 46000000h, 2DF05h, 0
.text:0040E078                 dd 0C0h, 46000000h, 2DF06h, 0
.text:0040E088                 dd 0C0h, 46000000h, 2DF01h, 0
.text:0040E098                 dd 0C0h, 46000000h, 2DF09h, 0
.text:0040E0A8                 dd 0C0h, 46000000h, 0B091E540h, 11CF83E3h, 200013A7h, 6297D7AFh
.text:0040E0A8                 dd 0FBF23B40h, 101BE3F0h, 0AA008884h, 0F8563E00h, 0FBF23B80h
.text:0040E0A8                 dd 101BE3F0h, 0AA008884h, 0F8563E00h, 4657278Ah, 11D2411Bh
.text:0040E0A8                 dd 0C0009A83h, 0D018D94Fh, 4657278Bh, 11D2411Bh, 0C0009A83h
.text:0040E0A8                 dd 0D018D94Fh, 0DE5BF786h, 11D2477Ah, 0C0009D83h, 0D018D94Fh
.text:0040E0A8                 dd 0E8025004h, 11D21C42h, 0A0002CBEh, 0A13DA8C9h, 0C6C4200h
.text:0040E0A8                 dd 11D0C589h, 0C0009A99h, 0E155D64Fh
.text:0040E130 dword_40E130    dd 0FFFFFFFFh           ; DATA XREF: .text:0040D3D9↑r
.text:0040E130                                         ; .text:loc_40D400↑r ...
.text:0040E134 dword_40E134    dd 0                    ; DATA XREF: .text:loc_40D40C↑r
.text:0040E134                                         ; sub_40D430:loc_40D47D↑r
.text:0040E138                 dd 0FFFFFFFFh
.text:0040E13C dword_40E13C    dd 31h dup(0)           ; DATA XREF: .data:off_40F0A4↓o
.text:0040E200                 dd 380h dup(?)
.text:0040E200 _text           ends
.text:0040E200
.data:0040F000 ; Section 2. (virtual address 0000F000)
.data:0040F000 ; Virtual size                  : 000000C0 (    192.)
.data:0040F000 ; Section size in file          : 00000200 (    512.)
.data:0040F000 ; Offset to raw data for section: 0000D600
.data:0040F000 ; Flags C0000040: Data Readable Writable
.data:0040F000 ; Alignment     : default
.data:0040F000 ; ===========================================================================
.data:0040F000
.data:0040F000 ; Segment type: Pure data
.data:0040F000 ; Segment permissions: Read/Write
.data:0040F000 _data           segment para public 'DATA' use32
.data:0040F000                 assume cs:_data
.data:0040F000                 ;org 40F000h
.data:0040F000 dword_40F000    dd 0                    ; DATA XREF: sub_401080+1B↑o
.data:0040F000                                         ; sub_401080+CC↑r
.data:0040F004 dword_40F004    dd 0                    ; DATA XREF: sub_401080+41↑o
.data:0040F004                                         ; sub_401080+D4↑r
.data:0040F008                 align 10h
.data:0040F010 ; int Code
.data:0040F010 Code            dd 1                    ; DATA XREF: sub_402FC0+67↑w
.data:0040F010                                         ; sub_4043D0+6D↑r ...
.data:0040F014                 align 10h
.data:0040F020 dword_40F020    dd 1                    ; DATA XREF: sub_4056E0+22↑r
.data:0040F020                                         ; sub_4056E0+65↑r ...
.data:0040F024 dword_40F024    dd 100h                 ; DATA XREF: sub_4056E0+3F↑o
.data:0040F024                                         ; sub_4056E0+1A2↑r ...
.data:0040F028 off_40F028      dd offset unk_410040    ; DATA XREF: sub_4056E0+1AA↑r
.data:0040F02C ; void *off_40F02C
.data:0040F02C off_40F02C      dd offset dword_40F024  ; DATA XREF: sub_4056E0+39↑r
.data:0040F02C                                         ; sub_4056E0+60↑w ...
.data:0040F030 dword_40F030    dd 200h                 ; DATA XREF: sub_406620+2ED↑r
.data:0040F030                                         ; sub_406620+2F8↑r ...
.data:0040F034 ; char *off_40F034
.data:0040F034 off_40F034      dd offset aComExeBatCmd ; DATA XREF: sub_406AF0+3D3↑r
.data:0040F034                                         ; sub_406AF0+400↑r ...
.data:0040F034                                         ; ".com;.exe;.bat;.cmd"
.data:0040F038                 align 10h
.data:0040F040 byte_40F040     db 41h                  ; DATA XREF: sub_408610+6B↑w
.data:0040F040                                         ; sub_408610:loc_408724↑r
.data:0040F041                 align 10h
.data:0040F050 off_40F050      dd offset aNotset       ; DATA XREF: .text:00409A4A↑r
.data:0040F050                                         ; .text:0040A692↑r
.data:0040F050                                         ; "notset"
.data:0040F054 off_40F054      dd offset aNotset       ; DATA XREF: .text:00409A62↑r
.data:0040F054                                         ; .text:00409A84↑r ...
.data:0040F054                                         ; "notset"
.data:0040F058                 align 10h
.data:0040F060 dword_40F060    dd 1                    ; DATA XREF: .text:loc_40AB07↑r
.data:0040F060                                         ; sub_40B0E0+202↑w
.data:0040F064                 align 10h
.data:0040F070 dword_40F070    dd 0FFFFFFFFh           ; DATA XREF: sub_401080+22↑r
.data:0040F074                 align 10h
.data:0040F080 ; int Mode
.data:0040F080 Mode            dd 0                    ; DATA XREF: sub_401080+4E↑r
.data:0040F080                                         ; sub_401080+80↑r ...
.data:0040F084                 align 10h
.data:0040F090 dword_40F090    dd 4000h                ; DATA XREF: sub_401080+57↑w
.data:0040F090                                         ; sub_401080+BA↑r
.data:0040F094                 align 10h
.data:0040F0A0 dword_40F0A0    dd 0                    ; DATA XREF: sub_40D430+9↑r
.data:0040F0A0                                         ; sub_40D430+1D↑w
.data:0040F0A4 off_40F0A4      dd offset dword_40E13C  ; DATA XREF: sub_40D3A0+6↑r
.data:0040F0A4                                         ; sub_40D3A0+17↑r ...
.data:0040F0A8                 align 1000h
.data:0040F0A8 _data           ends
.data:0040F0A8
.bss:00410000 ; Section 3. (virtual address 00010000)
.bss:00410000 ; Virtual size                  : 00000570 (   1392.)
.bss:00410000 ; Section size in file          : 00000000 (      0.)
.bss:00410000 ; Offset to raw data for section: 00000000
.bss:00410000 ; Flags C0000080: Bss Readable Writable
.bss:00410000 ; Alignment     : default
.bss:00410000 ; ===========================================================================
.bss:00410000
.bss:00410000 ; Segment type: Uninitialized
.bss:00410000 ; Segment permissions: Read/Write
.bss:00410000 _bss            segment para public 'BSS' use32
.bss:00410000                 assume cs:_bss
.bss:00410000                 ;org 410000h
.bss:00410000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00410000 dword_410000    dd ?                    ; DATA XREF: sub_4013A0+1E↑r
.bss:00410000                                         ; sub_4013A0+24↑w ...
.bss:00410004                 align 10h
.bss:00410010 dword_410010    dd ?                    ; DATA XREF: sub_4013A0:loc_4013C9↑r
.bss:00410010                                         ; sub_401DB0+12A↑r ...
.bss:00410014                 align 10h
.bss:00410020 dword_410020    dd ?                    ; DATA XREF: sub_4013A0+3E↑r
.bss:00410020                                         ; sub_4013A0+15D↑r ...
.bss:00410024                 align 10h
.bss:00410030 ; char *dword_410030
.bss:00410030 dword_410030    dd ?                    ; DATA XREF: .text:004043A4↑w
.bss:00410030                                         ; sub_4043D0+58↑r
.bss:00410034                 align 10h
.bss:00410040 unk_410040      db    ? ;               ; DATA XREF: sub_4056E0+100↑o
.bss:00410040                                         ; .data:off_40F028↑o
.bss:00410041                 db    ? ;
.bss:00410042                 db    ? ;
.bss:00410043                 db    ? ;
.bss:00410044                 db    ? ;
.bss:00410045                 db    ? ;
.bss:00410046                 db    ? ;
.bss:00410047                 db    ? ;
.bss:00410048                 db    ? ;
.bss:00410049                 db    ? ;
.bss:0041004A                 db    ? ;
.bss:0041004B                 db    ? ;
.bss:0041004C                 db    ? ;
.bss:0041004D                 db    ? ;
.bss:0041004E                 db    ? ;
.bss:0041004F                 db    ? ;
.bss:00410050                 db    ? ;
.bss:00410051                 db    ? ;
.bss:00410052                 db    ? ;
.bss:00410053                 db    ? ;
.bss:00410054                 db    ? ;
.bss:00410055                 db    ? ;
.bss:00410056                 db    ? ;
.bss:00410057                 db    ? ;
.bss:00410058                 db    ? ;
.bss:00410059                 db    ? ;
.bss:0041005A                 db    ? ;
.bss:0041005B                 db    ? ;
.bss:0041005C                 db    ? ;
.bss:0041005D                 db    ? ;
.bss:0041005E                 db    ? ;
.bss:0041005F                 db    ? ;
.bss:00410060                 db    ? ;
.bss:00410061                 db    ? ;
.bss:00410062                 db    ? ;
.bss:00410063                 db    ? ;
.bss:00410064                 db    ? ;
.bss:00410065                 db    ? ;
.bss:00410066                 db    ? ;
.bss:00410067                 db    ? ;
.bss:00410068                 db    ? ;
.bss:00410069                 db    ? ;
.bss:0041006A                 db    ? ;
.bss:0041006B                 db    ? ;
.bss:0041006C                 db    ? ;
.bss:0041006D                 db    ? ;
.bss:0041006E                 db    ? ;
.bss:0041006F                 db    ? ;
.bss:00410070                 db    ? ;
.bss:00410071                 db    ? ;
.bss:00410072                 db    ? ;
.bss:00410073                 db    ? ;
.bss:00410074                 db    ? ;
.bss:00410075                 db    ? ;
.bss:00410076                 db    ? ;
.bss:00410077                 db    ? ;
.bss:00410078                 db    ? ;
.bss:00410079                 db    ? ;
.bss:0041007A                 db    ? ;
.bss:0041007B                 db    ? ;
.bss:0041007C                 db    ? ;
.bss:0041007D                 db    ? ;
.bss:0041007E                 db    ? ;
.bss:0041007F                 db    ? ;
.bss:00410080                 db    ? ;
.bss:00410081                 db    ? ;
.bss:00410082                 db    ? ;
.bss:00410083                 db    ? ;
.bss:00410084                 db    ? ;
.bss:00410085                 db    ? ;
.bss:00410086                 db    ? ;
.bss:00410087                 db    ? ;
.bss:00410088                 db    ? ;
.bss:00410089                 db    ? ;
.bss:0041008A                 db    ? ;
.bss:0041008B                 db    ? ;
.bss:0041008C                 db    ? ;
.bss:0041008D                 db    ? ;
.bss:0041008E                 db    ? ;
.bss:0041008F                 db    ? ;
.bss:00410090                 db    ? ;
.bss:00410091                 db    ? ;
.bss:00410092                 db    ? ;
.bss:00410093                 db    ? ;
.bss:00410094                 db    ? ;
.bss:00410095                 db    ? ;
.bss:00410096                 db    ? ;
.bss:00410097                 db    ? ;
.bss:00410098                 db    ? ;
.bss:00410099                 db    ? ;
.bss:0041009A                 db    ? ;
.bss:0041009B                 db    ? ;
.bss:0041009C                 db    ? ;
.bss:0041009D                 db    ? ;
.bss:0041009E                 db    ? ;
.bss:0041009F                 db    ? ;
.bss:004100A0                 db    ? ;
.bss:004100A1                 db    ? ;
.bss:004100A2                 db    ? ;
.bss:004100A3                 db    ? ;
.bss:004100A4                 db    ? ;
.bss:004100A5                 db    ? ;
.bss:004100A6                 db    ? ;
.bss:004100A7                 db    ? ;
.bss:004100A8                 db    ? ;
.bss:004100A9                 db    ? ;
.bss:004100AA                 db    ? ;
.bss:004100AB                 db    ? ;
.bss:004100AC                 db    ? ;
.bss:004100AD                 db    ? ;
.bss:004100AE                 db    ? ;
.bss:004100AF                 db    ? ;
.bss:004100B0                 db    ? ;
.bss:004100B1                 db    ? ;
.bss:004100B2                 db    ? ;
.bss:004100B3                 db    ? ;
.bss:004100B4                 db    ? ;
.bss:004100B5                 db    ? ;
.bss:004100B6                 db    ? ;
.bss:004100B7                 db    ? ;
.bss:004100B8                 db    ? ;
.bss:004100B9                 db    ? ;
.bss:004100BA                 db    ? ;
.bss:004100BB                 db    ? ;
.bss:004100BC                 db    ? ;
.bss:004100BD                 db    ? ;
.bss:004100BE                 db    ? ;
.bss:004100BF                 db    ? ;
.bss:004100C0                 db    ? ;
.bss:004100C1                 db    ? ;
.bss:004100C2                 db    ? ;
.bss:004100C3                 db    ? ;
.bss:004100C4                 db    ? ;
.bss:004100C5                 db    ? ;
.bss:004100C6                 db    ? ;
.bss:004100C7                 db    ? ;
.bss:004100C8                 db    ? ;
.bss:004100C9                 db    ? ;
.bss:004100CA                 db    ? ;
.bss:004100CB                 db    ? ;
.bss:004100CC                 db    ? ;
.bss:004100CD                 db    ? ;
.bss:004100CE                 db    ? ;
.bss:004100CF                 db    ? ;
.bss:004100D0                 db    ? ;
.bss:004100D1                 db    ? ;
.bss:004100D2                 db    ? ;
.bss:004100D3                 db    ? ;
.bss:004100D4                 db    ? ;
.bss:004100D5                 db    ? ;
.bss:004100D6                 db    ? ;
.bss:004100D7                 db    ? ;
.bss:004100D8                 db    ? ;
.bss:004100D9                 db    ? ;
.bss:004100DA                 db    ? ;
.bss:004100DB                 db    ? ;
.bss:004100DC                 db    ? ;
.bss:004100DD                 db    ? ;
.bss:004100DE                 db    ? ;
.bss:004100DF                 db    ? ;
.bss:004100E0                 db    ? ;
.bss:004100E1                 db    ? ;
.bss:004100E2                 db    ? ;
.bss:004100E3                 db    ? ;
.bss:004100E4                 db    ? ;
.bss:004100E5                 db    ? ;
.bss:004100E6                 db    ? ;
.bss:004100E7                 db    ? ;
.bss:004100E8                 db    ? ;
.bss:004100E9                 db    ? ;
.bss:004100EA                 db    ? ;
.bss:004100EB                 db    ? ;
.bss:004100EC                 db    ? ;
.bss:004100ED                 db    ? ;
.bss:004100EE                 db    ? ;
.bss:004100EF                 db    ? ;
.bss:004100F0                 db    ? ;
.bss:004100F1                 db    ? ;
.bss:004100F2                 db    ? ;
.bss:004100F3                 db    ? ;
.bss:004100F4                 db    ? ;
.bss:004100F5                 db    ? ;
.bss:004100F6                 db    ? ;
.bss:004100F7                 db    ? ;
.bss:004100F8                 db    ? ;
.bss:004100F9                 db    ? ;
.bss:004100FA                 db    ? ;
.bss:004100FB                 db    ? ;
.bss:004100FC                 db    ? ;
.bss:004100FD                 db    ? ;
.bss:004100FE                 db    ? ;
.bss:004100FF                 db    ? ;
.bss:00410100                 db    ? ;
.bss:00410101                 db    ? ;
.bss:00410102                 db    ? ;
.bss:00410103                 db    ? ;
.bss:00410104                 db    ? ;
.bss:00410105                 db    ? ;
.bss:00410106                 db    ? ;
.bss:00410107                 db    ? ;
.bss:00410108                 db    ? ;
.bss:00410109                 db    ? ;
.bss:0041010A                 db    ? ;
.bss:0041010B                 db    ? ;
.bss:0041010C                 db    ? ;
.bss:0041010D                 db    ? ;
.bss:0041010E                 db    ? ;
.bss:0041010F                 db    ? ;
.bss:00410110                 db    ? ;
.bss:00410111                 db    ? ;
.bss:00410112                 db    ? ;
.bss:00410113                 db    ? ;
.bss:00410114                 db    ? ;
.bss:00410115                 db    ? ;
.bss:00410116                 db    ? ;
.bss:00410117                 db    ? ;
.bss:00410118                 db    ? ;
.bss:00410119                 db    ? ;
.bss:0041011A                 db    ? ;
.bss:0041011B                 db    ? ;
.bss:0041011C                 db    ? ;
.bss:0041011D                 db    ? ;
.bss:0041011E                 db    ? ;
.bss:0041011F                 db    ? ;
.bss:00410120                 db    ? ;
.bss:00410121                 db    ? ;
.bss:00410122                 db    ? ;
.bss:00410123                 db    ? ;
.bss:00410124                 db    ? ;
.bss:00410125                 db    ? ;
.bss:00410126                 db    ? ;
.bss:00410127                 db    ? ;
.bss:00410128                 db    ? ;
.bss:00410129                 db    ? ;
.bss:0041012A                 db    ? ;
.bss:0041012B                 db    ? ;
.bss:0041012C                 db    ? ;
.bss:0041012D                 db    ? ;
.bss:0041012E                 db    ? ;
.bss:0041012F                 db    ? ;
.bss:00410130                 db    ? ;
.bss:00410131                 db    ? ;
.bss:00410132                 db    ? ;
.bss:00410133                 db    ? ;
.bss:00410134                 db    ? ;
.bss:00410135                 db    ? ;
.bss:00410136                 db    ? ;
.bss:00410137                 db    ? ;
.bss:00410138                 db    ? ;
.bss:00410139                 db    ? ;
.bss:0041013A                 db    ? ;
.bss:0041013B                 db    ? ;
.bss:0041013C                 db    ? ;
.bss:0041013D                 db    ? ;
.bss:0041013E                 db    ? ;
.bss:0041013F                 db    ? ;
.bss:00410140 dword_410140    dd ?                    ; DATA XREF: .text:loc_405071↑o
.bss:00410140                                         ; .text:loc_405090↑o ...
.bss:00410144 dword_410144    dd ?                    ; DATA XREF: .text:loc_405110↑o
.bss:00410144                                         ; .text:00405598↑r ...
.bss:00410148 dword_410148    dd ?                    ; DATA XREF: .text:00405592↑r
.bss:00410148                                         ; sub_405640+2C↑r
.bss:0041014C dword_41014C    dd ?                    ; DATA XREF: .text:00405586↑r
.bss:0041014C                                         ; sub_405640+22↑r
.bss:00410150 dword_410150    dd ?                    ; DATA XREF: .text:004055A2↑r
.bss:00410150                                         ; sub_405640+36↑r
.bss:00410154 dword_410154    dd ?                    ; DATA XREF: .text:004055B2↑r
.bss:00410154                                         ; sub_405640+4E↑r
.bss:00410158 dword_410158    dd ?                    ; DATA XREF: .text:004055CF↑r
.bss:00410158                                         ; sub_405640+62↑r
.bss:0041015C dword_41015C    dd ?                    ; DATA XREF: .text:004055C5↑r
.bss:0041015C                                         ; sub_405640+70↑r
.bss:00410160 dword_410160    dd ?                    ; DATA XREF: .text:004055A8↑r
.bss:00410160                                         ; sub_405640+7A↑r
.bss:00410164                 align 10h
.bss:00410170 ; char *Str1
.bss:00410170 Str1            dd ?                    ; DATA XREF: sub_405D34:loc_405D6D↑w
.bss:00410170                                         ; sub_405D34:loc_405EA0↑r
.bss:00410174                 align 10h
.bss:00410180 dword_410180    dd ?                    ; DATA XREF: sub_405D34+2D↑r
.bss:00410180                                         ; sub_405D34+3F↑w
.bss:00410184                 align 10h
.bss:00410190 dword_410190    dd ?                    ; DATA XREF: sub_405ED0:loc_405F3B↑r
.bss:00410190                                         ; sub_405ED0+F9↑w
.bss:00410194                 align 10h
.bss:004101A0 dword_4101A0    dd ?                    ; DATA XREF: sub_405ED0+8E↑r
.bss:004101A0                                         ; sub_405ED0+103↑w
.bss:004101A4                 align 10h
.bss:004101B0 dword_4101B0    dd ?                    ; DATA XREF: sub_405ED0+5D↑r
.bss:004101B0                                         ; sub_405ED0+EE↑w
.bss:004101B4                 align 10h
.bss:004101C0 dword_4101C0    dd ?                    ; DATA XREF: sub_405ED0+3↑r
.bss:004101C0                                         ; .text:loc_406192↑w ...
.bss:004101C4                 align 10h
.bss:004101D0 dword_4101D0    dd ?                    ; DATA XREF: sub_406AF0+100↑r
.bss:004101D0                                         ; sub_406AF0+308↑w
.bss:004101D4                 align 10h
.bss:004101E0 ; char *Str
.bss:004101E0 Str             dd ?                    ; DATA XREF: sub_406AF0:loc_406E54↑r
.bss:004101E0                                         ; sub_406AF0+3B6↑r ...
.bss:004101E4                 align 10h
.bss:004101F0 dword_4101F0    dd ?                    ; DATA XREF: sub_408610+1C↑r
.bss:004101F0                                         ; sub_408610+104↑w
.bss:004101F4                 align 10h
.bss:00410200 dword_410200    dd ?                    ; DATA XREF: sub_408610+B↑r
.bss:00410200                                         ; sub_408610+71↑w
.bss:00410204                 align 10h
.bss:00410210 dword_410210    dd ?                    ; DATA XREF: sub_408610+85↑r
.bss:00410210                                         ; sub_408610+B9↑w
.bss:00410214 dword_410214    dd ?                    ; DATA XREF: sub_408610+C4↑w
.bss:00410218 dword_410218    dd ?                    ; DATA XREF: sub_408610+2E↑o
.bss:00410218                                         ; sub_408610+CF↑w
.bss:0041021C dword_41021C    dd ?                    ; DATA XREF: sub_408610+DA↑w
.bss:00410220                 db    ? ;
.bss:00410221                 db    ? ;
.bss:00410222                 db    ? ;
.bss:00410223                 db    ? ;
.bss:00410224                 db    ? ;
.bss:00410225                 db    ? ;
.bss:00410226                 db    ? ;
.bss:00410227                 db    ? ;
.bss:00410228                 db    ? ;
.bss:00410229                 db    ? ;
.bss:0041022A                 db    ? ;
.bss:0041022B                 db    ? ;
.bss:0041022C                 db    ? ;
.bss:0041022D                 db    ? ;
.bss:0041022E                 db    ? ;
.bss:0041022F                 db    ? ;
.bss:00410230                 db    ? ;
.bss:00410231                 db    ? ;
.bss:00410232                 db    ? ;
.bss:00410233                 db    ? ;
.bss:00410234                 db    ? ;
.bss:00410235                 db    ? ;
.bss:00410236                 db    ? ;
.bss:00410237                 db    ? ;
.bss:00410238                 db    ? ;
.bss:00410239                 db    ? ;
.bss:0041023A                 db    ? ;
.bss:0041023B                 db    ? ;
.bss:0041023C                 db    ? ;
.bss:0041023D                 db    ? ;
.bss:0041023E                 db    ? ;
.bss:0041023F                 db    ? ;
.bss:00410240                 db    ? ;
.bss:00410241                 db    ? ;
.bss:00410242                 db    ? ;
.bss:00410243                 db    ? ;
.bss:00410244                 db    ? ;
.bss:00410245                 db    ? ;
.bss:00410246                 db    ? ;
.bss:00410247                 db    ? ;
.bss:00410248                 db    ? ;
.bss:00410249                 db    ? ;
.bss:0041024A                 db    ? ;
.bss:0041024B                 db    ? ;
.bss:0041024C                 db    ? ;
.bss:0041024D                 db    ? ;
.bss:0041024E                 db    ? ;
.bss:0041024F                 db    ? ;
.bss:00410250                 db    ? ;
.bss:00410251                 db    ? ;
.bss:00410252                 db    ? ;
.bss:00410253                 db    ? ;
.bss:00410254                 db    ? ;
.bss:00410255                 db    ? ;
.bss:00410256                 db    ? ;
.bss:00410257                 db    ? ;
.bss:00410258                 db    ? ;
.bss:00410259                 db    ? ;
.bss:0041025A                 db    ? ;
.bss:0041025B                 db    ? ;
.bss:0041025C                 db    ? ;
.bss:0041025D                 db    ? ;
.bss:0041025E                 db    ? ;
.bss:0041025F                 db    ? ;
.bss:00410260                 db    ? ;
.bss:00410261                 db    ? ;
.bss:00410262                 db    ? ;
.bss:00410263                 db    ? ;
.bss:00410264                 db    ? ;
.bss:00410265                 db    ? ;
.bss:00410266                 db    ? ;
.bss:00410267                 db    ? ;
.bss:00410268                 db    ? ;
.bss:00410269                 db    ? ;
.bss:0041026A                 db    ? ;
.bss:0041026B                 db    ? ;
.bss:0041026C                 db    ? ;
.bss:0041026D                 db    ? ;
.bss:0041026E                 db    ? ;
.bss:0041026F                 db    ? ;
.bss:00410270                 db    ? ;
.bss:00410271                 db    ? ;
.bss:00410272                 db    ? ;
.bss:00410273                 db    ? ;
.bss:00410274                 db    ? ;
.bss:00410275                 db    ? ;
.bss:00410276                 db    ? ;
.bss:00410277                 db    ? ;
.bss:00410278                 db    ? ;
.bss:00410279                 db    ? ;
.bss:0041027A                 db    ? ;
.bss:0041027B                 db    ? ;
.bss:0041027C                 db    ? ;
.bss:0041027D                 db    ? ;
.bss:0041027E                 db    ? ;
.bss:0041027F                 db    ? ;
.bss:00410280                 db    ? ;
.bss:00410281                 db    ? ;
.bss:00410282                 db    ? ;
.bss:00410283                 db    ? ;
.bss:00410284                 db    ? ;
.bss:00410285                 db    ? ;
.bss:00410286                 db    ? ;
.bss:00410287                 db    ? ;
.bss:00410288                 db    ? ;
.bss:00410289                 db    ? ;
.bss:0041028A                 db    ? ;
.bss:0041028B                 db    ? ;
.bss:0041028C                 db    ? ;
.bss:0041028D                 db    ? ;
.bss:0041028E                 db    ? ;
.bss:0041028F                 db    ? ;
.bss:00410290                 db    ? ;
.bss:00410291                 db    ? ;
.bss:00410292                 db    ? ;
.bss:00410293                 db    ? ;
.bss:00410294                 db    ? ;
.bss:00410295                 db    ? ;
.bss:00410296                 db    ? ;
.bss:00410297                 db    ? ;
.bss:00410298                 db    ? ;
.bss:00410299                 db    ? ;
.bss:0041029A                 db    ? ;
.bss:0041029B                 db    ? ;
.bss:0041029C                 db    ? ;
.bss:0041029D                 db    ? ;
.bss:0041029E                 db    ? ;
.bss:0041029F                 db    ? ;
.bss:004102A0                 db    ? ;
.bss:004102A1                 db    ? ;
.bss:004102A2                 db    ? ;
.bss:004102A3                 db    ? ;
.bss:004102A4                 db    ? ;
.bss:004102A5                 db    ? ;
.bss:004102A6                 db    ? ;
.bss:004102A7                 db    ? ;
.bss:004102A8                 db    ? ;
.bss:004102A9                 db    ? ;
.bss:004102AA                 db    ? ;
.bss:004102AB                 db    ? ;
.bss:004102AC                 db    ? ;
.bss:004102AD                 db    ? ;
.bss:004102AE                 db    ? ;
.bss:004102AF                 db    ? ;
.bss:004102B0                 db    ? ;
.bss:004102B1                 db    ? ;
.bss:004102B2                 db    ? ;
.bss:004102B3                 db    ? ;
.bss:004102B4                 db    ? ;
.bss:004102B5                 db    ? ;
.bss:004102B6                 db    ? ;
.bss:004102B7                 db    ? ;
.bss:004102B8                 db    ? ;
.bss:004102B9                 db    ? ;
.bss:004102BA                 db    ? ;
.bss:004102BB                 db    ? ;
.bss:004102BC                 db    ? ;
.bss:004102BD                 db    ? ;
.bss:004102BE                 db    ? ;
.bss:004102BF                 db    ? ;
.bss:004102C0                 db    ? ;
.bss:004102C1                 db    ? ;
.bss:004102C2                 db    ? ;
.bss:004102C3                 db    ? ;
.bss:004102C4                 db    ? ;
.bss:004102C5                 db    ? ;
.bss:004102C6                 db    ? ;
.bss:004102C7                 db    ? ;
.bss:004102C8                 db    ? ;
.bss:004102C9                 db    ? ;
.bss:004102CA                 db    ? ;
.bss:004102CB                 db    ? ;
.bss:004102CC                 db    ? ;
.bss:004102CD                 db    ? ;
.bss:004102CE                 db    ? ;
.bss:004102CF                 db    ? ;
.bss:004102D0                 db    ? ;
.bss:004102D1                 db    ? ;
.bss:004102D2                 db    ? ;
.bss:004102D3                 db    ? ;
.bss:004102D4                 db    ? ;
.bss:004102D5                 db    ? ;
.bss:004102D6                 db    ? ;
.bss:004102D7                 db    ? ;
.bss:004102D8                 db    ? ;
.bss:004102D9                 db    ? ;
.bss:004102DA                 db    ? ;
.bss:004102DB                 db    ? ;
.bss:004102DC                 db    ? ;
.bss:004102DD                 db    ? ;
.bss:004102DE                 db    ? ;
.bss:004102DF                 db    ? ;
.bss:004102E0                 db    ? ;
.bss:004102E1                 db    ? ;
.bss:004102E2                 db    ? ;
.bss:004102E3                 db    ? ;
.bss:004102E4                 db    ? ;
.bss:004102E5                 db    ? ;
.bss:004102E6                 db    ? ;
.bss:004102E7                 db    ? ;
.bss:004102E8                 db    ? ;
.bss:004102E9                 db    ? ;
.bss:004102EA                 db    ? ;
.bss:004102EB                 db    ? ;
.bss:004102EC                 db    ? ;
.bss:004102ED                 db    ? ;
.bss:004102EE                 db    ? ;
.bss:004102EF                 db    ? ;
.bss:004102F0                 db    ? ;
.bss:004102F1                 db    ? ;
.bss:004102F2                 db    ? ;
.bss:004102F3                 db    ? ;
.bss:004102F4                 db    ? ;
.bss:004102F5                 db    ? ;
.bss:004102F6                 db    ? ;
.bss:004102F7                 db    ? ;
.bss:004102F8                 db    ? ;
.bss:004102F9                 db    ? ;
.bss:004102FA                 db    ? ;
.bss:004102FB                 db    ? ;
.bss:004102FC                 db    ? ;
.bss:004102FD                 db    ? ;
.bss:004102FE                 db    ? ;
.bss:004102FF                 db    ? ;
.bss:00410300                 db    ? ;
.bss:00410301                 db    ? ;
.bss:00410302                 db    ? ;
.bss:00410303                 db    ? ;
.bss:00410304                 db    ? ;
.bss:00410305                 db    ? ;
.bss:00410306                 db    ? ;
.bss:00410307                 db    ? ;
.bss:00410308                 db    ? ;
.bss:00410309                 db    ? ;
.bss:0041030A                 db    ? ;
.bss:0041030B                 db    ? ;
.bss:0041030C                 db    ? ;
.bss:0041030D                 db    ? ;
.bss:0041030E                 db    ? ;
.bss:0041030F                 db    ? ;
.bss:00410310                 db    ? ;
.bss:00410311                 db    ? ;
.bss:00410312                 db    ? ;
.bss:00410313                 db    ? ;
.bss:00410314                 db    ? ;
.bss:00410315                 db    ? ;
.bss:00410316                 db    ? ;
.bss:00410317                 db    ? ;
.bss:00410318                 db    ? ;
.bss:00410319                 db    ? ;
.bss:0041031A                 db    ? ;
.bss:0041031B                 db    ? ;
.bss:0041031C                 db    ? ;
.bss:0041031D                 db    ? ;
.bss:0041031E                 db    ? ;
.bss:0041031F                 db    ? ;
.bss:00410320                 db    ? ;
.bss:00410321                 db    ? ;
.bss:00410322                 db    ? ;
.bss:00410323                 db    ? ;
.bss:00410324                 db    ? ;
.bss:00410325                 db    ? ;
.bss:00410326                 db    ? ;
.bss:00410327                 db    ? ;
.bss:00410328                 db    ? ;
.bss:00410329                 db    ? ;
.bss:0041032A                 db    ? ;
.bss:0041032B                 db    ? ;
.bss:0041032C                 db    ? ;
.bss:0041032D                 db    ? ;
.bss:0041032E                 db    ? ;
.bss:0041032F                 db    ? ;
.bss:00410330                 db    ? ;
.bss:00410331                 db    ? ;
.bss:00410332                 db    ? ;
.bss:00410333                 db    ? ;
.bss:00410334                 db    ? ;
.bss:00410335                 db    ? ;
.bss:00410336                 db    ? ;
.bss:00410337                 db    ? ;
.bss:00410338                 db    ? ;
.bss:00410339                 db    ? ;
.bss:0041033A                 db    ? ;
.bss:0041033B                 db    ? ;
.bss:0041033C                 db    ? ;
.bss:0041033D                 db    ? ;
.bss:0041033E                 db    ? ;
.bss:0041033F                 db    ? ;
.bss:00410340                 db    ? ;
.bss:00410341                 db    ? ;
.bss:00410342                 db    ? ;
.bss:00410343                 db    ? ;
.bss:00410344                 db    ? ;
.bss:00410345                 db    ? ;
.bss:00410346                 db    ? ;
.bss:00410347                 db    ? ;
.bss:00410348                 db    ? ;
.bss:00410349                 db    ? ;
.bss:0041034A                 db    ? ;
.bss:0041034B                 db    ? ;
.bss:0041034C                 db    ? ;
.bss:0041034D                 db    ? ;
.bss:0041034E                 db    ? ;
.bss:0041034F                 db    ? ;
.bss:00410350                 db    ? ;
.bss:00410351                 db    ? ;
.bss:00410352                 db    ? ;
.bss:00410353                 db    ? ;
.bss:00410354                 db    ? ;
.bss:00410355                 db    ? ;
.bss:00410356                 db    ? ;
.bss:00410357                 db    ? ;
.bss:00410358                 db    ? ;
.bss:00410359                 db    ? ;
.bss:0041035A                 db    ? ;
.bss:0041035B                 db    ? ;
.bss:0041035C                 db    ? ;
.bss:0041035D                 db    ? ;
.bss:0041035E                 db    ? ;
.bss:0041035F                 db    ? ;
.bss:00410360                 db    ? ;
.bss:00410361                 db    ? ;
.bss:00410362                 db    ? ;
.bss:00410363                 db    ? ;
.bss:00410364                 db    ? ;
.bss:00410365                 db    ? ;
.bss:00410366                 db    ? ;
.bss:00410367                 db    ? ;
.bss:00410368                 db    ? ;
.bss:00410369                 db    ? ;
.bss:0041036A                 db    ? ;
.bss:0041036B                 db    ? ;
.bss:0041036C                 db    ? ;
.bss:0041036D                 db    ? ;
.bss:0041036E                 db    ? ;
.bss:0041036F                 db    ? ;
.bss:00410370                 db    ? ;
.bss:00410371                 db    ? ;
.bss:00410372                 db    ? ;
.bss:00410373                 db    ? ;
.bss:00410374                 db    ? ;
.bss:00410375                 db    ? ;
.bss:00410376                 db    ? ;
.bss:00410377                 db    ? ;
.bss:00410378                 db    ? ;
.bss:00410379                 db    ? ;
.bss:0041037A                 db    ? ;
.bss:0041037B                 db    ? ;
.bss:0041037C                 db    ? ;
.bss:0041037D                 db    ? ;
.bss:0041037E                 db    ? ;
.bss:0041037F                 db    ? ;
.bss:00410380                 db    ? ;
.bss:00410381                 db    ? ;
.bss:00410382                 db    ? ;
.bss:00410383                 db    ? ;
.bss:00410384                 db    ? ;
.bss:00410385                 db    ? ;
.bss:00410386                 db    ? ;
.bss:00410387                 db    ? ;
.bss:00410388                 db    ? ;
.bss:00410389                 db    ? ;
.bss:0041038A                 db    ? ;
.bss:0041038B                 db    ? ;
.bss:0041038C                 db    ? ;
.bss:0041038D                 db    ? ;
.bss:0041038E                 db    ? ;
.bss:0041038F                 db    ? ;
.bss:00410390                 db    ? ;
.bss:00410391                 db    ? ;
.bss:00410392                 db    ? ;
.bss:00410393                 db    ? ;
.bss:00410394                 db    ? ;
.bss:00410395                 db    ? ;
.bss:00410396                 db    ? ;
.bss:00410397                 db    ? ;
.bss:00410398                 db    ? ;
.bss:00410399                 db    ? ;
.bss:0041039A                 db    ? ;
.bss:0041039B                 db    ? ;
.bss:0041039C                 db    ? ;
.bss:0041039D                 db    ? ;
.bss:0041039E                 db    ? ;
.bss:0041039F                 db    ? ;
.bss:004103A0                 db    ? ;
.bss:004103A1                 db    ? ;
.bss:004103A2                 db    ? ;
.bss:004103A3                 db    ? ;
.bss:004103A4                 db    ? ;
.bss:004103A5                 db    ? ;
.bss:004103A6                 db    ? ;
.bss:004103A7                 db    ? ;
.bss:004103A8                 db    ? ;
.bss:004103A9                 db    ? ;
.bss:004103AA                 db    ? ;
.bss:004103AB                 db    ? ;
.bss:004103AC                 db    ? ;
.bss:004103AD                 db    ? ;
.bss:004103AE                 db    ? ;
.bss:004103AF                 db    ? ;
.bss:004103B0                 db    ? ;
.bss:004103B1                 db    ? ;
.bss:004103B2                 db    ? ;
.bss:004103B3                 db    ? ;
.bss:004103B4                 db    ? ;
.bss:004103B5                 db    ? ;
.bss:004103B6                 db    ? ;
.bss:004103B7                 db    ? ;
.bss:004103B8                 db    ? ;
.bss:004103B9                 db    ? ;
.bss:004103BA                 db    ? ;
.bss:004103BB                 db    ? ;
.bss:004103BC                 db    ? ;
.bss:004103BD                 db    ? ;
.bss:004103BE                 db    ? ;
.bss:004103BF                 db    ? ;
.bss:004103C0                 db    ? ;
.bss:004103C1                 db    ? ;
.bss:004103C2                 db    ? ;
.bss:004103C3                 db    ? ;
.bss:004103C4                 db    ? ;
.bss:004103C5                 db    ? ;
.bss:004103C6                 db    ? ;
.bss:004103C7                 db    ? ;
.bss:004103C8                 db    ? ;
.bss:004103C9                 db    ? ;
.bss:004103CA                 db    ? ;
.bss:004103CB                 db    ? ;
.bss:004103CC                 db    ? ;
.bss:004103CD                 db    ? ;
.bss:004103CE                 db    ? ;
.bss:004103CF                 db    ? ;
.bss:004103D0                 db    ? ;
.bss:004103D1                 db    ? ;
.bss:004103D2                 db    ? ;
.bss:004103D3                 db    ? ;
.bss:004103D4                 db    ? ;
.bss:004103D5                 db    ? ;
.bss:004103D6                 db    ? ;
.bss:004103D7                 db    ? ;
.bss:004103D8                 db    ? ;
.bss:004103D9                 db    ? ;
.bss:004103DA                 db    ? ;
.bss:004103DB                 db    ? ;
.bss:004103DC                 db    ? ;
.bss:004103DD                 db    ? ;
.bss:004103DE                 db    ? ;
.bss:004103DF                 db    ? ;
.bss:004103E0                 db    ? ;
.bss:004103E1                 db    ? ;
.bss:004103E2                 db    ? ;
.bss:004103E3                 db    ? ;
.bss:004103E4                 db    ? ;
.bss:004103E5                 db    ? ;
.bss:004103E6                 db    ? ;
.bss:004103E7                 db    ? ;
.bss:004103E8                 db    ? ;
.bss:004103E9                 db    ? ;
.bss:004103EA                 db    ? ;
.bss:004103EB                 db    ? ;
.bss:004103EC                 db    ? ;
.bss:004103ED                 db    ? ;
.bss:004103EE                 db    ? ;
.bss:004103EF                 db    ? ;
.bss:004103F0                 db    ? ;
.bss:004103F1                 db    ? ;
.bss:004103F2                 db    ? ;
.bss:004103F3                 db    ? ;
.bss:004103F4                 db    ? ;
.bss:004103F5                 db    ? ;
.bss:004103F6                 db    ? ;
.bss:004103F7                 db    ? ;
.bss:004103F8                 db    ? ;
.bss:004103F9                 db    ? ;
.bss:004103FA                 db    ? ;
.bss:004103FB                 db    ? ;
.bss:004103FC                 db    ? ;
.bss:004103FD                 db    ? ;
.bss:004103FE                 db    ? ;
.bss:004103FF                 db    ? ;
.bss:00410400                 db    ? ;
.bss:00410401                 db    ? ;
.bss:00410402                 db    ? ;
.bss:00410403                 db    ? ;
.bss:00410404                 db    ? ;
.bss:00410405                 db    ? ;
.bss:00410406                 db    ? ;
.bss:00410407                 db    ? ;
.bss:00410408                 db    ? ;
.bss:00410409                 db    ? ;
.bss:0041040A                 db    ? ;
.bss:0041040B                 db    ? ;
.bss:0041040C                 db    ? ;
.bss:0041040D                 db    ? ;
.bss:0041040E                 db    ? ;
.bss:0041040F                 db    ? ;
.bss:00410410 dword_410410    dd ?                    ; DATA XREF: sub_40AFD0+8↑r
.bss:00410410                                         ; sub_40B0E0:loc_40B162↑w ...
.bss:00410414                 align 10h
.bss:00410420 ; struct _OSVERSIONINFOA VersionInformation
.bss:00410420 VersionInformation _OSVERSIONINFOA <?>  ; DATA XREF: sub_40B0E0:loc_40B100↑o
.bss:00410420                                         ; sub_40B0E0+2C↑w ...
.bss:004104B4 word_4104B4     dw ?                    ; DATA XREF: sub_40B0E0:loc_40B193↑r
.bss:004104B6                 align 4
.bss:004104B8 word_4104B8     dw ?                    ; DATA XREF: .text:loc_40AB56↑r
.bss:004104B8                                         ; .text:0040AB84↑r ...
.bss:004104BA byte_4104BA     db ?                    ; DATA XREF: .text:0040AB15↑r
.bss:004104BB                 align 10h
.bss:004104C0 dword_4104C0    dd ?                    ; DATA XREF: sub_40B0E0+6↑r
.bss:004104C0                                         ; sub_40B0E0+75↑w
.bss:004104C4                 align 10h
.bss:004104D0 dword_4104D0    dd ?                    ; DATA XREF: sub_40B890+6E↑r
.bss:004104D0                                         ; sub_40B890+9A↑r ...
.bss:004104D4 dword_4104D4    dd ?                    ; DATA XREF: sub_40B890:loc_40B8F8↑r
.bss:004104D4                                         ; sub_40B890+A0↑r ...
.bss:004104D8                 align 10h
.bss:004104E0 dword_4104E0    dd ?                    ; DATA XREF: sub_402FC0+2E↑w
.bss:004104E0                                         ; .text:00403CAF↑r ...
.bss:004104E4                 align 20h
.bss:00410500 dword_410500    dd ?                    ; CODE XREF: sub_405D34+63↑p
.bss:00410500                                         ; DATA XREF: sub_405C30+1E↑r ...
.bss:00410504                 align 10h
.bss:00410510 dword_410510    dd ?                    ; DATA XREF: sub_405C30+4E↑w
.bss:00410510                                         ; sub_405D34+AB↑w
.bss:00410514                 align 40h
.bss:00410540 dword_410540    dd ?                    ; DATA XREF: sub_405D34+13↑r
.bss:00410544                 align 1000h
.bss:00410544 _bss            ends
.bss:00410544
.idata:00411000 ; Section 4. (virtual address 00011000)
.idata:00411000 ; Virtual size                  : 00000D34 (   3380.)
.idata:00411000 ; Section size in file          : 00000E00 (   3584.)
.idata:00411000 ; Offset to raw data for section: 0000D800
.idata:00411000 ; Flags C0000040: Data Readable Writable
.idata:00411000 ; Alignment     : default
.idata:00411000 ; ===========================================================================
.idata:00411000
.idata:00411000 ; Segment type: Externs
.idata:00411000 ; _idata
.idata:00411000
.idata:00411001
.idata:00411294 ;
.idata:00411294 ; Imports from libintl3.dll
.idata:00411294 ;
.idata:00411294                 extrn libintl_bindtextdomain:dword
.idata:00411294                                         ; CODE XREF: sub_402FC0+48↑p
.idata:00411294                                         ; DATA XREF: sub_402FC0+48↑r ...
.idata:00411298                 extrn __imp_libintl_gettext:dword
.idata:00411298                                         ; CODE XREF: sub_4013A0+157↑p
.idata:00411298                                         ; sub_4013A0:loc_401605↑p ...
.idata:0041129C                 extrn libintl_textdomain:dword
.idata:0041129C                                         ; CODE XREF: sub_402FC0+55↑p
.idata:0041129C                                         ; DATA XREF: sub_402FC0+55↑r ...
.idata:004112A0
.idata:004112A8 ;
.idata:004112A8 ; Imports from ADVAPI32.DLL
.idata:004112A8 ;
.idata:004112A8 ; LSTATUS (__stdcall *RegCloseKey)(HKEY hKey)
.idata:004112A8                 extrn __imp_RegCloseKey:dword
.idata:004112A8                                         ; DATA XREF: RegCloseKey↑r
.idata:004112AC ; LSTATUS (__stdcall *RegOpenKeyExA)(HKEY hKey, LPCSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult)
.idata:004112AC                 extrn __imp_RegOpenKeyExA:dword
.idata:004112AC                                         ; DATA XREF: RegOpenKeyExA↑r
.idata:004112B0 ; LSTATUS (__stdcall *RegQueryValueExA)(HKEY hKey, LPCSTR lpValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData)
.idata:004112B0                 extrn __imp_RegQueryValueExA:dword
.idata:004112B0                                         ; DATA XREF: RegQueryValueExA↑r
.idata:004112B4
.idata:004112BC ;
.idata:004112BC ; Imports from KERNEL32.dll
.idata:004112BC ;
.idata:004112BC ; BOOL (__stdcall *AreFileApisANSI)()
.idata:004112BC                 extrn __imp_AreFileApisANSI:dword
.idata:004112BC                                         ; DATA XREF: AreFileApisANSI↑r
.idata:004112C0 ; BOOL (__stdcall *CloseHandle)(HANDLE hObject)
.idata:004112C0                 extrn __imp_CloseHandle:dword
.idata:004112C0                                         ; DATA XREF: CloseHandle↑r
.idata:004112C4 ; BOOL (__stdcall *CreateDirectoryA)(LPCSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes)
.idata:004112C4                 extrn __imp_CreateDirectoryA:dword
.idata:004112C4                                         ; DATA XREF: CreateDirectoryA↑r
.idata:004112C8 ; HANDLE (__stdcall *CreateFileA)(LPCSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile)
.idata:004112C8                 extrn __imp_CreateFileA:dword
.idata:004112C8                                         ; DATA XREF: CreateFileA↑r
.idata:004112CC ; BOOL (__stdcall *DeviceIoControl)(HANDLE hDevice, DWORD dwIoControlCode, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesReturned, LPOVERLAPPED lpOverlapped)
.idata:004112CC                 extrn __imp_DeviceIoControl:dword
.idata:004112CC                                         ; DATA XREF: DeviceIoControl↑r
.idata:004112D0 ; void (__stdcall __noreturn *ExitProcess)(UINT uExitCode)
.idata:004112D0                 extrn __imp_ExitProcess:dword
.idata:004112D0                                         ; DATA XREF: ExitProcess↑r
.idata:004112D4 ; BOOL (__stdcall *FindClose)(HANDLE hFindFile)
.idata:004112D4                 extrn __imp_FindClose:dword
.idata:004112D4                                         ; DATA XREF: FindClose↑r
.idata:004112D8 ; HANDLE (__stdcall *FindFirstFileA)(LPCSTR lpFileName, LPWIN32_FIND_DATAA lpFindFileData)
.idata:004112D8                 extrn __imp_FindFirstFileA:dword
.idata:004112D8                                         ; DATA XREF: FindFirstFileA↑r
.idata:004112DC ; BOOL (__stdcall *FindNextFileA)(HANDLE hFindFile, LPWIN32_FIND_DATAA lpFindFileData)
.idata:004112DC                 extrn __imp_FindNextFileA:dword
.idata:004112DC                                         ; DATA XREF: FindNextFileA↑r
.idata:004112E0 ; BOOL (__stdcall *FreeLibrary)(HMODULE hLibModule)
.idata:004112E0                 extrn __imp_FreeLibrary:dword
.idata:004112E0                                         ; DATA XREF: FreeLibrary↑r
.idata:004112E4 ; DWORD (__stdcall *GetCurrentDirectoryA)(DWORD nBufferLength, LPSTR lpBuffer)
.idata:004112E4                 extrn __imp_GetCurrentDirectoryA:dword
.idata:004112E4                                         ; DATA XREF: GetCurrentDirectoryA↑r
.idata:004112E8 ; BOOL (__stdcall *GetDiskFreeSpaceA)(LPCSTR lpRootPathName, LPDWORD lpSectorsPerCluster, LPDWORD lpBytesPerSector, LPDWORD lpNumberOfFreeClusters, LPDWORD lpTotalNumberOfClusters)
.idata:004112E8                 extrn __imp_GetDiskFreeSpaceA:dword
.idata:004112E8                                         ; DATA XREF: GetDiskFreeSpaceA↑r
.idata:004112EC ; UINT (__stdcall *GetDriveTypeA)(LPCSTR lpRootPathName)
.idata:004112EC                 extrn __imp_GetDriveTypeA:dword
.idata:004112EC                                         ; DATA XREF: GetDriveTypeA↑r
.idata:004112F0 ; DWORD (__stdcall *GetFileAttributesA)(LPCSTR lpFileName)
.idata:004112F0                 extrn __imp_GetFileAttributesA:dword
.idata:004112F0                                         ; DATA XREF: GetFileAttributesA↑r
.idata:004112F4 ; BOOL (__stdcall *GetFileInformationByHandle)(HANDLE hFile, LPBY_HANDLE_FILE_INFORMATION lpFileInformation)
.idata:004112F4                 extrn __imp_GetFileInformationByHandle:dword
.idata:004112F4                                         ; DATA XREF: GetFileInformationByHandle↑r
.idata:004112F8 ; DWORD (__stdcall *GetFileSize)(HANDLE hFile, LPDWORD lpFileSizeHigh)
.idata:004112F8                 extrn __imp_GetFileSize:dword
.idata:004112F8                                         ; DATA XREF: GetFileSize↑r
.idata:004112FC ; DWORD (__stdcall *GetFileType)(HANDLE hFile)
.idata:004112FC                 extrn __imp_GetFileType:dword
.idata:004112FC                                         ; DATA XREF: GetFileType↑r
.idata:00411300 ; DWORD (__stdcall *GetFullPathNameA)(LPCSTR lpFileName, DWORD nBufferLength, LPSTR lpBuffer, LPSTR *lpFilePart)
.idata:00411300                 extrn __imp_GetFullPathNameA:dword
.idata:00411300                                         ; DATA XREF: GetFullPathNameA↑r
.idata:00411304 ; DWORD (__stdcall *GetLastError)()
.idata:00411304                 extrn __imp_GetLastError:dword
.idata:00411304                                         ; DATA XREF: GetLastError↑r
.idata:00411308 ; DWORD (__stdcall *GetLogicalDriveStringsA)(DWORD nBufferLength, LPSTR lpBuffer)
.idata:00411308                 extrn __imp_GetLogicalDriveStringsA:dword
.idata:00411308                                         ; DATA XREF: GetLogicalDriveStringsA↑r
.idata:0041130C ; DWORD (__stdcall *GetModuleFileNameA)(HMODULE hModule, LPSTR lpFilename, DWORD nSize)
.idata:0041130C                 extrn __imp_GetModuleFileNameA:dword
.idata:0041130C                                         ; DATA XREF: GetModuleFileNameA↑r
.idata:00411310 ; HMODULE (__stdcall *GetModuleHandleA)(LPCSTR lpModuleName)
.idata:00411310                 extrn __imp_GetModuleHandleA:dword
.idata:00411310                                         ; DATA XREF: GetModuleHandleA↑r
.idata:00411314 ; FARPROC (__stdcall *GetProcAddress)(HMODULE hModule, LPCSTR lpProcName)
.idata:00411314                 extrn __imp_GetProcAddress:dword
.idata:00411314                                         ; DATA XREF: GetProcAddress↑r
.idata:00411318 ; HANDLE (__stdcall *GetProcessHeap)()
.idata:00411318                 extrn __imp_GetProcessHeap:dword
.idata:00411318                                         ; DATA XREF: GetProcessHeap↑r
.idata:0041131C ; DWORD (__stdcall *GetShortPathNameA)(LPCSTR lpszLongPath, LPSTR lpszShortPath, DWORD cchBuffer)
.idata:0041131C                 extrn __imp_GetShortPathNameA:dword
.idata:0041131C                                         ; DATA XREF: GetShortPathNameA↑r
.idata:00411320 ; void (__stdcall *GetSystemTimeAsFileTime)(LPFILETIME lpSystemTimeAsFileTime)
.idata:00411320                 extrn __imp_GetSystemTimeAsFileTime:dword
.idata:00411320                                         ; DATA XREF: GetSystemTimeAsFileTime↑r
.idata:00411324 ; DWORD (__stdcall *GetTimeZoneInformation)(LPTIME_ZONE_INFORMATION lpTimeZoneInformation)
.idata:00411324                 extrn __imp_GetTimeZoneInformation:dword
.idata:00411324                                         ; DATA XREF: GetTimeZoneInformation↑r
.idata:00411328 ; DWORD (__stdcall *GetVersion)()
.idata:00411328                 extrn __imp_GetVersion:dword
.idata:00411328                                         ; DATA XREF: GetVersion↑r
.idata:0041132C ; BOOL (__stdcall *GetVersionExA)(LPOSVERSIONINFOA lpVersionInformation)
.idata:0041132C                 extrn __imp_GetVersionExA:dword
.idata:0041132C                                         ; DATA XREF: GetVersionExA↑r
.idata:00411330 ; BOOL (__stdcall *GetVolumeInformationA)(LPCSTR lpRootPathName, LPSTR lpVolumeNameBuffer, DWORD nVolumeNameSize, LPDWORD lpVolumeSerialNumber, LPDWORD lpMaximumComponentLength, LPDWORD lpFileSystemFlags, LPSTR lpFileSystemNameBuffer, DWORD nFileSystemNameSize)
.idata:00411330                 extrn __imp_GetVolumeInformationA:dword
.idata:00411330                                         ; DATA XREF: GetVolumeInformationA↑r
.idata:00411334 ; LPVOID (__stdcall *HeapAlloc)(HANDLE hHeap, DWORD dwFlags, SIZE_T dwBytes)
.idata:00411334                 extrn __imp_HeapAlloc:dword
.idata:00411334                                         ; DATA XREF: HeapAlloc↑r
.idata:00411338 ; BOOL (__stdcall *HeapFree)(HANDLE hHeap, DWORD dwFlags, LPVOID lpMem)
.idata:00411338                 extrn __imp_HeapFree:dword
.idata:00411338                                         ; DATA XREF: HeapFree↑r
.idata:0041133C ; HMODULE (__stdcall *LoadLibraryA)(LPCSTR lpLibFileName)
.idata:0041133C                 extrn __imp_LoadLibraryA:dword
.idata:0041133C                                         ; DATA XREF: LoadLibraryA↑r
.idata:00411340 ; int (__stdcall *MultiByteToWideChar)(UINT CodePage, DWORD dwFlags, LPCCH lpMultiByteStr, int cbMultiByte, LPWSTR lpWideCharStr, int cchWideChar)
.idata:00411340                 extrn __imp_MultiByteToWideChar:dword
.idata:00411340                                         ; DATA XREF: MultiByteToWideChar↑r
.idata:00411344 ; BOOL (__stdcall *PeekNamedPipe)(HANDLE hNamedPipe, LPVOID lpBuffer, DWORD nBufferSize, LPDWORD lpBytesRead, LPDWORD lpTotalBytesAvail, LPDWORD lpBytesLeftThisMessage)
.idata:00411344                 extrn __imp_PeekNamedPipe:dword
.idata:00411344                                         ; DATA XREF: PeekNamedPipe↑r
.idata:00411348 ; UINT (__stdcall *SetErrorMode)(UINT uMode)
.idata:00411348                 extrn __imp_SetErrorMode:dword
.idata:00411348                                         ; DATA XREF: SetErrorMode↑r
.idata:0041134C ; LPTOP_LEVEL_EXCEPTION_FILTER (__stdcall *SetUnhandledExceptionFilter)(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.idata:0041134C                 extrn __imp_SetUnhandledExceptionFilter:dword
.idata:0041134C                                         ; DATA XREF: SetUnhandledExceptionFilter↑r
.idata:00411350 ; BOOL (__stdcall *UnlockFile)(HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToUnlockLow, DWORD nNumberOfBytesToUnlockHigh)
.idata:00411350                 extrn __imp_UnlockFile:dword
.idata:00411350                                         ; DATA XREF: UnlockFile↑r
.idata:00411354 ; int (__stdcall *lstrcmpiA)(LPCSTR lpString1, LPCSTR lpString2)
.idata:00411354                 extrn __imp_lstrcmpiA:dword
.idata:00411354                                         ; DATA XREF: lstrcmpiA↑r
.idata:00411358 ; LPSTR (__stdcall *lstrcpyA)(LPSTR lpString1, LPCSTR lpString2)
.idata:00411358                 extrn __imp_lstrcpyA:dword
.idata:00411358                                         ; DATA XREF: lstrcpyA↑r
.idata:0041135C
.idata:00411364 ;
.idata:00411364 ; Imports from msvcrt.dll
.idata:00411364 ;
.idata:00411364 ; int (__cdecl *_chmod)(const char *FileName, int AccessMode)
.idata:00411364                 extrn __imp__chmod:dword
.idata:00411364                                         ; DATA XREF: _chmod↑r
.idata:00411368 ; int (__cdecl *_getpid)()
.idata:00411368                 extrn __imp__getpid:dword
.idata:00411368                                         ; DATA XREF: _getpid↑r
.idata:0041136C ; int (__cdecl *_isatty)(int FileHandle)
.idata:0041136C                 extrn __imp__isatty:dword
.idata:0041136C                                         ; DATA XREF: _isatty↑r
.idata:00411370 ; char *(__cdecl *_strdup)(const char *String)
.idata:00411370                 extrn __imp__strdup:dword
.idata:00411370                                         ; DATA XREF: _strdup↑r
.idata:00411374 ; int (__cdecl *_stricmp)(const char *String1, const char *String2)
.idata:00411374                 extrn __imp__stricmp:dword
.idata:00411374                                         ; DATA XREF: _stricmp↑r
.idata:00411378
.idata:00411380 ;
.idata:00411380 ; Imports from MSVCP60.DLL
.idata:00411380 ;
.idata:00411380 ; size_t (__cdecl *mbrtowc)(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.idata:00411380                 extrn __imp_mbrtowc:dword
.idata:00411380                                         ; DATA XREF: mbrtowc↑r
.idata:00411384
.idata:0041138C ;
.idata:0041138C ; Imports from msvcrt.dll
.idata:0041138C ;
.idata:0041138C                 extrn __imp___getmainargs:dword
.idata:0041138C                                         ; DATA XREF: __getmainargs↑r
.idata:00411390 ; int _mb_cur_max
.idata:00411390                 extrn __mb_cur_max:dword
.idata:00411390                                         ; DATA XREF: sub_4045A0+7↑r
.idata:00411390                                         ; sub_4045A0+5F3↑r
.idata:00411394 ; char ***(__cdecl *__p__environ)()
.idata:00411394                 extrn __imp___p__environ:dword
.idata:00411394                                         ; DATA XREF: __p__environ↑r
.idata:00411398 ; int *(__cdecl *__p__fmode)()
.idata:00411398                 extrn __imp___p__fmode:dword
.idata:00411398                                         ; DATA XREF: __p__fmode↑r
.idata:0041139C ; void (__cdecl *_set_app_type)(_crt_app_type Type)
.idata:0041139C                 extrn __set_app_type:dword
.idata:0041139C                                         ; CODE XREF: start+D↑p
.idata:0041139C                                         ; .text:0040102D↑p
.idata:0041139C                                         ; DATA XREF: ...
.idata:004113A0                 extrn __imp__assert:dword
.idata:004113A0                                         ; DATA XREF: _assert↑r
.idata:004113A4 ; void (__cdecl *_cexit)()
.idata:004113A4                 extrn __imp__cexit:dword
.idata:004113A4                                         ; DATA XREF: _cexit↑r
.idata:004113A8 ; int (__cdecl *_close)(int FileHandle)
.idata:004113A8                 extrn __imp__close:dword
.idata:004113A8                                         ; DATA XREF: _close↑r
.idata:004113AC ; int *(__cdecl *_errno)()
.idata:004113AC                 extrn __imp__errno:dword
.idata:004113AC                                         ; DATA XREF: _errno↑r
.idata:004113B0 ; FILE *(__cdecl *_fdopen)(int FileHandle, const char *Format)
.idata:004113B0                 extrn __imp__fdopen:dword
.idata:004113B0                                         ; DATA XREF: _fdopen↑r
.idata:004113B4 ; __int64 (__cdecl *_filelengthi64)(int FileHandle)
.idata:004113B4                 extrn __imp__filelengthi64:dword
.idata:004113B4                                         ; DATA XREF: _filelengthi64↑r
.idata:004113B8 ; int (__cdecl *_flsbuf)(int Ch, FILE *File)
.idata:004113B8                 extrn __imp__flsbuf:dword
.idata:004113B8                                         ; DATA XREF: _flsbuf↑r
.idata:004113BC ; intptr_t (__cdecl *_get_osfhandle)(int FileHandle)
.idata:004113BC                 extrn __imp__get_osfhandle:dword
.idata:004113BC                                         ; DATA XREF: _get_osfhandle↑r
.idata:004113C0 ; FILE iob[]
.idata:004113C0                 extrn _iob:dword        ; DATA XREF: sub_401080+5C↑r
.idata:004113C0                                         ; sub_401080+75↑r ...
.idata:004113C4 ; int (__cdecl *_isctype)(int C, int Type)
.idata:004113C4                 extrn __imp__isctype:dword
.idata:004113C4                                         ; DATA XREF: _isctype↑r
.idata:004113C8 ; _onexit_t (__cdecl *onexit)(_onexit_t Func)
.idata:004113C8                 extrn _onexit:dword     ; CODE XREF: .text:0040106C↑p
.idata:004113C8                                         ; DATA XREF: .text:0040106C↑r
.idata:004113CC ; int (*_open)(const char *FileName, int OpenFlag, ...)
.idata:004113CC                 extrn __imp__open:dword ; DATA XREF: _open↑r
.idata:004113D0 ; const unsigned __int16 *pctype
.idata:004113D0                 extrn _pctype:dword     ; DATA XREF: sub_4045A0:loc_404C94↑r
.idata:004113D4 ; int (__cdecl *_setmode)(int FileHandle, int Mode)
.idata:004113D4                 extrn __imp__setmode:dword
.idata:004113D4                                         ; DATA XREF: _setmode↑r
.idata:004113D8 ; int (__cdecl *_stricmp_0)(const char *String1, const char *String2)
.idata:004113D8                 extrn __imp__stricmp_0:dword
.idata:004113D8                                         ; DATA XREF: _stricmp_0↑r
.idata:004113DC ; void (__cdecl __noreturn *abort)()
.idata:004113DC                 extrn __imp_abort:dword ; DATA XREF: abort↑r
.idata:004113E0 ; int (__cdecl *atexit)(void (__cdecl *)())
.idata:004113E0                 extrn atexit:dword      ; CODE XREF: sub_401040+C↑p
.idata:004113E0                                         ; DATA XREF: sub_401040+C↑r
.idata:004113E4 ; void *(__cdecl *calloc)(size_t Count, size_t Size)
.idata:004113E4                 extrn __imp_calloc:dword
.idata:004113E4                                         ; DATA XREF: calloc↑r
.idata:004113E8 ; void (__cdecl __noreturn *exit)(int Code)
.idata:004113E8                 extrn __imp_exit:dword  ; DATA XREF: exit↑r
.idata:004113EC ; int (__cdecl *fclose)(FILE *Stream)
.idata:004113EC                 extrn __imp_fclose:dword
.idata:004113EC                                         ; DATA XREF: fclose↑r
.idata:004113F0 ; int (__cdecl *fflush)(FILE *Stream)
.idata:004113F0                 extrn __imp_fflush:dword
.idata:004113F0                                         ; DATA XREF: fflush↑r
.idata:004113F4 ; FILE *(__cdecl *fopen)(const char *FileName, const char *Mode)
.idata:004113F4                 extrn __imp_fopen:dword ; DATA XREF: fopen↑r
.idata:004113F8 ; int (*fprintf)(FILE *const Stream, const char *const Format, ...)
.idata:004113F8                 extrn __imp_fprintf:dword
.idata:004113F8                                         ; DATA XREF: fprintf↑r
.idata:004113FC ; int (__cdecl *fputs)(const char *Buffer, FILE *Stream)
.idata:004113FC                 extrn __imp_fputs:dword ; DATA XREF: fputs↑r
.idata:00411400 ; void (__cdecl *free)(void *Block)
.idata:00411400                 extrn __imp_free:dword  ; DATA XREF: free↑r
.idata:00411404 ; char *(__cdecl *getenv)(const char *VarName)
.idata:00411404                 extrn __imp_getenv:dword
.idata:00411404                                         ; DATA XREF: getenv↑r
.idata:00411408 ; int (__cdecl *isalpha)(int C)
.idata:00411408                 extrn __imp_isalpha:dword
.idata:00411408                                         ; DATA XREF: isalpha↑r
.idata:0041140C ; int (__cdecl *iswctype)(wint_t C, wctype_t Type)
.idata:0041140C                 extrn __imp_iswctype:dword
.idata:0041140C                                         ; DATA XREF: iswctype↑r
.idata:00411410 ; void *(__cdecl *malloc)(size_t Size)
.idata:00411410                 extrn __imp_malloc:dword
.idata:00411410                                         ; DATA XREF: malloc↑r
.idata:00411414 ; void *(__cdecl *memcpy)(void *, const void *Src, size_t Size)
.idata:00411414                 extrn __imp_memcpy:dword
.idata:00411414                                         ; DATA XREF: memcpy↑r
.idata:00411418 ; void *(__cdecl *memset)(void *, int Val, size_t Size)
.idata:00411418                 extrn __imp_memset:dword
.idata:00411418                                         ; DATA XREF: memset↑r
.idata:0041141C ; int (*printf)(const char *const Format, ...)
.idata:0041141C                 extrn __imp_printf:dword
.idata:0041141C                                         ; DATA XREF: printf↑r
.idata:00411420 ; void *(__cdecl *realloc)(void *Block, size_t Size)
.idata:00411420                 extrn __imp_realloc:dword
.idata:00411420                                         ; DATA XREF: realloc↑r
.idata:00411424 ; char *(__cdecl *setlocale)(int Category, const char *Locale)
.idata:00411424                 extrn __imp_setlocale:dword
.idata:00411424                                         ; DATA XREF: setlocale↑r
.idata:00411428 ; _crt_signal_t (__cdecl *signal)(int Signal, _crt_signal_t Function)
.idata:00411428                 extrn __imp_signal:dword
.idata:00411428                                         ; DATA XREF: signal↑r
.idata:0041142C ; int (*sprintf)(char *const Buffer, const char *const Format, ...)
.idata:0041142C                 extrn __imp_sprintf:dword
.idata:0041142C                                         ; DATA XREF: sprintf↑r
.idata:00411430 ; int (*sscanf)(const char *const Buffer, const char *const Format, ...)
.idata:00411430                 extrn __imp_sscanf:dword
.idata:00411430                                         ; DATA XREF: sscanf↑r
.idata:00411434 ; char *(__cdecl *strcat)(char *Destination, const char *Source)
.idata:00411434                 extrn __imp_strcat:dword
.idata:00411434                                         ; DATA XREF: strcat↑r
.idata:00411438 ; char *(__cdecl *strchr)(const char *Str, int Val)
.idata:00411438                 extrn __imp_strchr:dword
.idata:00411438                                         ; DATA XREF: strchr↑r
.idata:0041143C ; int (__cdecl *strcmp)(const char *Str1, const char *Str2)
.idata:0041143C                 extrn __imp_strcmp:dword
.idata:0041143C                                         ; DATA XREF: strcmp↑r
.idata:00411440 ; char *(__cdecl *strcpy)(char *Destination, const char *Source)
.idata:00411440                 extrn __imp_strcpy:dword
.idata:00411440                                         ; DATA XREF: strcpy↑r
.idata:00411444 ; char *(__cdecl *strerror)(int ErrorMessage)
.idata:00411444                 extrn __imp_strerror:dword
.idata:00411444                                         ; DATA XREF: strerror↑r
.idata:00411448 ; size_t (__cdecl *strlen)(const char *Str)
.idata:00411448                 extrn __imp_strlen:dword
.idata:00411448                                         ; DATA XREF: strlen↑r
.idata:0041144C ; char *(__cdecl *strncpy)(char *Destination, const char *Source, size_t Count)
.idata:0041144C                 extrn __imp_strncpy:dword
.idata:0041144C                                         ; DATA XREF: strncpy↑r
.idata:00411450 ; char *(__cdecl *strpbrk)(const char *Str, const char *Control)
.idata:00411450                 extrn __imp_strpbrk:dword
.idata:00411450                                         ; DATA XREF: strpbrk↑r
.idata:00411454 ; char *(__cdecl *strrchr)(const char *Str, int Ch)
.idata:00411454                 extrn __imp_strrchr:dword
.idata:00411454                                         ; DATA XREF: strrchr↑r
.idata:00411458 ; size_t (__cdecl *strspn)(const char *Str, const char *Control)
.idata:00411458                 extrn __imp_strspn:dword
.idata:00411458                                         ; DATA XREF: strspn↑r
.idata:0041145C ; char *(__cdecl *strstr)(const char *Str, const char *SubStr)
.idata:0041145C                 extrn __imp_strstr:dword
.idata:0041145C                                         ; DATA XREF: strstr↑r
.idata:00411460 ; int (__cdecl *toupper)(int C)
.idata:00411460                 extrn __imp_toupper:dword
.idata:00411460                                         ; DATA XREF: toupper↑r
.idata:00411464 ; int (__cdecl *vfprintf)(FILE *const Stream, const char *const Format, va_list ArgList)
.idata:00411464                 extrn __imp_vfprintf:dword
.idata:00411464                                         ; DATA XREF: vfprintf↑r
.idata:00411468
.idata:00411470 ;
.idata:00411470 ; Imports from OLE32.dll
.idata:00411470 ;
.idata:00411470 ; HRESULT (__stdcall *CoCreateInstance)(const IID *const rclsid, LPUNKNOWN pUnkOuter, DWORD dwClsContext, const IID *const riid, LPVOID *ppv)
.idata:00411470                 extrn __imp_CoCreateInstance:dword
.idata:00411470                                         ; DATA XREF: CoCreateInstance↑r
.idata:00411474 ; void (__stdcall *CoUninitialize)()
.idata:00411474                 extrn __imp_CoUninitialize:dword
.idata:00411474                                         ; DATA XREF: CoUninitialize↑r
.idata:00411478 ; HRESULT (__stdcall *OleInitialize)(LPVOID pvReserved)
.idata:00411478                 extrn __imp_OleInitialize:dword
.idata:00411478                                         ; DATA XREF: OleInitialize↑r
.idata:0041147C
.idata:0041147C
.idata:0041147C
.idata:0041147C                 end start
