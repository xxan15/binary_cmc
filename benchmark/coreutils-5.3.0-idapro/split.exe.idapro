.text:00401000 ;
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
.text:00401000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
.text:00401000 ; |                      License info: 48-357D-7BC4-C6                      |
.text:00401000 ; |                              Virginia Tech                              |
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ;
.text:00401000 ; Input SHA256 : 68EFC0A334514C5F6FDD8A66B6CCABECA4EB09B4E7F4C87D9539FC44B58D283D
.text:00401000 ; Input MD5    : 458503F52A6D05BFE820135F53BB1AC4
.text:00401000 ; Input CRC32  : 1B2473EE
.text:00401000
.text:00401000 ; File Name   : /home/cindy/Documents/Projects/binary_cmc/benchmark/coreutils-5.3.0-bin/bin/split.exe
.text:00401000 ; Format      : Portable executable for 80386 (PE)
.text:00401000 ; Imagebase   : 400000
.text:00401000 ; Timestamp   : 4266A25E (Wed Apr 20 18:41:34 2005)
.text:00401000 ; Section 1. (virtual address 00001000)
.text:00401000 ; Virtual size                  : 0000F260 (  62048.)
.text:00401000 ; Section size in file          : 0000F400 (  62464.)
.text:00401000 ; Offset to raw data for section: 00000400
.text:00401000 ; Flags 60000020: Text Executable Readable
.text:00401000 ; Alignment     : default
.text:00401000
.text:00401000                 .686p
.text:00401000                 .mmx
.text:00401000                 .model flat
.text:00401000
.text:00401000 ; ===========================================================================
.text:00401000
.text:00401000 ; Segment type: Pure code
.text:00401000 ; Segment permissions: Read/Execute
.text:00401000 _text           segment para public 'CODE' use32
.text:00401000                 assume cs:_text
.text:00401000                 ;org 401000h
.text:00401000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00401000
.text:00401000 ; =============== S U B R O U T I N E =======================================
.text:00401000
.text:00401000 ; Attributes: noreturn bp-based frame
.text:00401000
.text:00401000                 public start
.text:00401000 start           proc near
.text:00401000
.text:00401000 Type            = dword ptr -8
.text:00401000
.text:00401000                 push    ebp
.text:00401001                 mov     ebp, esp
.text:00401003                 sub     esp, 8
.text:00401006                 mov     [esp+8+Type], 1 ; Type
.text:0040100D                 call    ds:__set_app_type
.text:00401013                 call    sub_401080
.text:00401013 start           endp
.text:00401013
.text:00401018 ; ---------------------------------------------------------------------------
.text:00401018                 mov     esp, ebp
.text:0040101A                 xor     eax, eax
.text:0040101C                 pop     ebp
.text:0040101D                 retn
.text:0040101D ; ---------------------------------------------------------------------------
.text:0040101E                 align 10h
.text:00401020                 push    ebp
.text:00401021                 mov     ebp, esp
.text:00401023                 sub     esp, 8
.text:00401026                 mov     dword ptr [esp], 2
.text:0040102D                 call    ds:__set_app_type
.text:00401033                 call    sub_401080
.text:00401038 ; ---------------------------------------------------------------------------
.text:00401038                 mov     esp, ebp
.text:0040103A                 xor     eax, eax
.text:0040103C                 pop     ebp
.text:0040103D                 retn
.text:0040103D ; ---------------------------------------------------------------------------
.text:0040103E                 align 10h
.text:00401040
.text:00401040 ; =============== S U B R O U T I N E =======================================
.text:00401040
.text:00401040 ; Attributes: bp-based frame
.text:00401040
.text:00401040 ; int __cdecl sub_401040(void (__cdecl *)())
.text:00401040 sub_401040      proc near               ; CODE XREF: sub_401A30+7E↓p
.text:00401040                                         ; .text:0040F010↓p ...
.text:00401040
.text:00401040 var_8           = dword ptr -8
.text:00401040 arg_0           = dword ptr  8
.text:00401040
.text:00401040                 push    ebp
.text:00401041                 mov     ebp, esp
.text:00401043                 sub     esp, 8
.text:00401046                 mov     edx, [ebp+arg_0]
.text:00401049                 mov     [esp+8+var_8], edx ; void (__cdecl *)()
.text:0040104C                 call    ds:atexit
.text:00401052                 mov     esp, ebp
.text:00401054                 pop     ebp
.text:00401055                 retn
.text:00401055 sub_401040      endp
.text:00401055
.text:00401055 ; ---------------------------------------------------------------------------
.text:00401056                 align 10h
.text:00401060                 push    ebp
.text:00401061                 mov     ebp, esp
.text:00401063                 sub     esp, 8
.text:00401066                 mov     edx, [ebp+8]
.text:00401069                 mov     [esp], edx
.text:0040106C                 call    ds:_onexit
.text:00401072                 mov     esp, ebp
.text:00401074                 pop     ebp
.text:00401075                 retn
.text:00401075 ; ---------------------------------------------------------------------------
.text:00401076                 align 10h
.text:00401080
.text:00401080 ; =============== S U B R O U T I N E =======================================
.text:00401080
.text:00401080 ; Attributes: noreturn bp-based frame
.text:00401080
.text:00401080 sub_401080      proc near               ; CODE XREF: start+13↑p
.text:00401080                                         ; .text:00401033↑p
.text:00401080
.text:00401080 lpTopLevelExceptionFilter= dword ptr -28h
.text:00401080 Mode            = dword ptr -24h
.text:00401080 var_20          = dword ptr -20h
.text:00401080 var_1C          = dword ptr -1Ch
.text:00401080 var_18          = dword ptr -18h
.text:00401080 var_C           = byte ptr -0Ch
.text:00401080 var_8           = dword ptr -8
.text:00401080
.text:00401080                 push    ebp
.text:00401081                 mov     ebp, esp
.text:00401083                 push    ebx
.text:00401084                 sub     esp, 24h
.text:00401087                 mov     [esp+28h+lpTopLevelExceptionFilter], offset TopLevelExceptionFilter ; lpTopLevelExceptionFilter
.text:0040108E                 call    SetUnhandledExceptionFilter
.text:00401093                 sub     esp, 4
.text:00401096                 call    sub_40EFB0
.text:0040109B                 mov     [esp+28h+lpTopLevelExceptionFilter], offset dword_411000
.text:004010A2                 mov     edx, dword_4110A0
.text:004010A8                 lea     ecx, [ebp+var_8]
.text:004010AB                 mov     [ebp+var_8], 0
.text:004010B2                 mov     [esp+28h+var_18], ecx
.text:004010B6                 mov     [esp+28h+var_1C], edx
.text:004010BA                 lea     edx, [ebp+var_C]
.text:004010BD                 mov     [esp+28h+var_20], edx
.text:004010C1                 mov     [esp+28h+Mode], offset dword_411004
.text:004010C9                 call    __getmainargs
.text:004010CE                 mov     eax, Mode
.text:004010D3                 test    eax, eax
.text:004010D5                 jz      short loc_401135
.text:004010D7                 mov     dword_4110C0, eax
.text:004010DC                 mov     edx, ds:_iob
.text:004010E2                 test    edx, edx
.text:004010E4                 jz      short loc_4010FB
.text:004010E6                 mov     [esp+28h+Mode], eax ; Mode
.text:004010EA                 mov     ebx, [edx+10h]
.text:004010ED                 mov     [esp+28h+lpTopLevelExceptionFilter], ebx ; FileHandle
.text:004010F0                 call    _setmode
.text:004010F5                 mov     edx, ds:_iob
.text:004010FB
.text:004010FB loc_4010FB:                             ; CODE XREF: sub_401080+64↑j
.text:004010FB                 cmp     edx, 0FFFFFFE0h
.text:004010FE                 jz      short loc_40111B
.text:00401100                 mov     ebx, Mode
.text:00401106                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040110A                 mov     ecx, [edx+30h]
.text:0040110D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401110                 call    _setmode
.text:00401115                 mov     edx, ds:_iob
.text:0040111B
.text:0040111B loc_40111B:                             ; CODE XREF: sub_401080+7E↑j
.text:0040111B                 cmp     edx, 0FFFFFFC0h
.text:0040111E                 jz      short loc_401135
.text:00401120                 mov     ebx, Mode
.text:00401126                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040112A                 mov     ecx, [edx+50h]
.text:0040112D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401130                 call    _setmode
.text:00401135
.text:00401135 loc_401135:                             ; CODE XREF: sub_401080+55↑j
.text:00401135                                         ; sub_401080+9E↑j
.text:00401135                 call    __p__fmode
.text:0040113A                 mov     ecx, dword_4110C0
.text:00401140                 mov     [eax], ecx
.text:00401142                 call    sub_40EF80
.text:00401147                 call    __p__environ
.text:0040114C                 mov     edx, dword_411000
.text:00401152                 mov     ebx, [eax]
.text:00401154                 mov     ecx, dword_411004
.text:0040115A                 mov     [esp+28h+lpTopLevelExceptionFilter], edx
.text:0040115D                 mov     [esp+28h+var_20], ebx
.text:00401161                 mov     [esp+28h+Mode], ecx
.text:00401165                 call    sub_401A30
.text:00401165 sub_401080      endp
.text:00401165
.text:0040116A ; ---------------------------------------------------------------------------
.text:0040116A                 mov     ebx, eax
.text:0040116C                 call    _cexit
.text:00401171                 mov     [esp], ebx
.text:00401174                 call    ExitProcess
.text:00401174 ; ---------------------------------------------------------------------------
.text:00401179                 align 10h
.text:00401180
.text:00401180 ; =============== S U B R O U T I N E =======================================
.text:00401180
.text:00401180 ; Attributes: bp-based frame
.text:00401180
.text:00401180 ; LONG __stdcall TopLevelExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo)
.text:00401180 TopLevelExceptionFilter proc near       ; DATA XREF: sub_401080+7↑o
.text:00401180
.text:00401180 Signal          = dword ptr -18h
.text:00401180 Function        = dword ptr -14h
.text:00401180 var_8           = dword ptr -8
.text:00401180 var_4           = dword ptr -4
.text:00401180 ExceptionInfo   = dword ptr  8
.text:00401180
.text:00401180                 push    ebp
.text:00401181                 mov     ebp, esp
.text:00401183                 sub     esp, 18h
.text:00401186                 mov     [ebp+var_8], ebx
.text:00401189                 mov     ecx, [ebp+ExceptionInfo]
.text:0040118C                 xor     ebx, ebx
.text:0040118E                 mov     [ebp+var_4], esi
.text:00401191                 xor     esi, esi
.text:00401193                 mov     edx, [ecx]
.text:00401195                 mov     eax, [edx]
.text:00401197                 cmp     eax, 0C0000091h
.text:0040119C                 ja      loc_401260
.text:004011A2                 cmp     eax, 0C000008Dh
.text:004011A7                 jnb     short loc_401210
.text:004011A9                 cmp     eax, 0C0000005h
.text:004011AE                 jz      short loc_4011BE
.text:004011B0
.text:004011B0 loc_4011B0:                             ; CODE XREF: TopLevelExceptionFilter+59↓j
.text:004011B0                                         ; TopLevelExceptionFilter+77↓j ...
.text:004011B0                 mov     eax, ebx
.text:004011B2                 mov     esi, [ebp+var_4]
.text:004011B5                 mov     ebx, [ebp+var_8]
.text:004011B8                 mov     esp, ebp
.text:004011BA                 pop     ebp
.text:004011BB                 retn    4
.text:004011BE ; ---------------------------------------------------------------------------
.text:004011BE
.text:004011BE loc_4011BE:                             ; CODE XREF: TopLevelExceptionFilter+2E↑j
.text:004011BE                 mov     [esp+18h+Function], 0 ; Function
.text:004011C6                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:004011CD                 call    signal
.text:004011D2                 cmp     eax, 1
.text:004011D5                 jz      short loc_4011F9
.text:004011D7                 test    eax, eax
.text:004011D9                 jz      short loc_4011B0
.text:004011DB                 mov     [esp+18h+Signal], 0Bh
.text:004011E2                 lea     esi, [esi+0]
.text:004011E9                 lea     edi, [edi+0]
.text:004011F0
.text:004011F0 loc_4011F0:                             ; CODE XREF: TopLevelExceptionFilter+BD↓j
.text:004011F0                 call    eax
.text:004011F2
.text:004011F2 loc_4011F2:                             ; CODE XREF: TopLevelExceptionFilter+8D↓j
.text:004011F2                                         ; TopLevelExceptionFilter+D5↓j ...
.text:004011F2                 mov     ebx, 0FFFFFFFFh
.text:004011F7                 jmp     short loc_4011B0
.text:004011F9 ; ---------------------------------------------------------------------------
.text:004011F9
.text:004011F9 loc_4011F9:                             ; CODE XREF: TopLevelExceptionFilter+55↑j
.text:004011F9                 mov     [esp+18h+Function], 1 ; Function
.text:00401201                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:00401208                 call    signal
.text:0040120D                 jmp     short loc_4011F2
.text:0040120D ; ---------------------------------------------------------------------------
.text:0040120F                 align 10h
.text:00401210
.text:00401210 loc_401210:                             ; CODE XREF: TopLevelExceptionFilter+27↑j
.text:00401210                                         ; TopLevelExceptionFilter+E5↓j
.text:00401210                 mov     esi, 1
.text:00401215
.text:00401215 loc_401215:                             ; CODE XREF: TopLevelExceptionFilter+EC↓j
.text:00401215                 mov     [esp+18h+Function], 0 ; Function
.text:0040121D                 mov     [esp+18h+Signal], 8 ; Signal
.text:00401224                 call    signal
.text:00401229                 cmp     eax, 1
.text:0040122C                 jz      short loc_40123F
.text:0040122E                 test    eax, eax
.text:00401230                 jz      loc_4011B0
.text:00401236                 mov     [esp+18h+Signal], 8
.text:0040123D                 jmp     short loc_4011F0
.text:0040123F ; ---------------------------------------------------------------------------
.text:0040123F
.text:0040123F loc_40123F:                             ; CODE XREF: TopLevelExceptionFilter+AC↑j
.text:0040123F                 mov     [esp+18h+Function], 1 ; Function
.text:00401247                 mov     [esp+18h+Signal], 8 ; Signal
.text:0040124E                 call    signal
.text:00401253                 test    esi, esi
.text:00401255                 jz      short loc_4011F2
.text:00401257                 call    sub_40EFB0
.text:0040125C                 jmp     short loc_4011F2
.text:0040125C ; ---------------------------------------------------------------------------
.text:0040125E                 align 10h
.text:00401260
.text:00401260 loc_401260:                             ; CODE XREF: TopLevelExceptionFilter+1C↑j
.text:00401260                 cmp     eax, 0C0000093h
.text:00401265                 jz      short loc_401210
.text:00401267                 cmp     eax, 0C0000094h
.text:0040126C                 jz      short loc_401215
.text:0040126E                 jmp     loc_4011B0
.text:0040126E TopLevelExceptionFilter endp
.text:0040126E
.text:0040126E ; ---------------------------------------------------------------------------
.text:00401273                 align 10h
.text:00401280 aAbcdefghijklmn db 'abcdefghijklmnopqrstuvwxyz',0
.text:00401280                                         ; DATA XREF: .data:off_411014↓o
.text:0040129B aBytes          db 'bytes',0            ; DATA XREF: .text:off_401300↓o
.text:004012A1 aLines          db 'lines',0            ; DATA XREF: .text:00401310↓o
.text:004012A7 aLineBytes      db 'line-bytes',0       ; DATA XREF: .text:00401320↓o
.text:004012B2 aSuffixLength   db 'suffix-length',0    ; DATA XREF: .text:00401330↓o
.text:004012C0 aNumericSuffixe db 'numeric-suffixes',0 ; DATA XREF: .text:00401340↓o
.text:004012D1 aVerbose        db 'verbose',0          ; DATA XREF: .text:00401350↓o
.text:004012D9 aHelp           db 'help',0             ; DATA XREF: .text:00401360↓o
.text:004012DE aVersion        db 'version',0          ; DATA XREF: .text:00401370↓o
.text:004012E6                 align 20h
.text:00401300 off_401300      dd offset aBytes        ; DATA XREF: sub_401A30+BD↓o
.text:00401300                                         ; "bytes"
.text:00401304                 dd 1, 0
.text:0040130C                 dd 62h
.text:00401310                 dd offset aLines        ; "lines"
.text:00401314                 dd 1, 0
.text:0040131C                 dd 6Ch
.text:00401320                 dd offset aLineBytes    ; "line-bytes"
.text:00401324                 dd 1, 0
.text:0040132C                 dd 43h
.text:00401330                 dd offset aSuffixLength ; "suffix-length"
.text:00401334                 dd 1, 0
.text:0040133C                 dd 61h
.text:00401340                 dd offset aNumericSuffixe ; "numeric-suffixes"
.text:00401344                 dd 2 dup(0)
.text:0040134C                 dd 64h
.text:00401350                 dd offset aVerbose      ; "verbose"
.text:00401354                 dd 2 dup(0)
.text:0040135C                 dd 80h
.text:00401360                 dd offset aHelp         ; "help"
.text:00401364                 dd 2 dup(0)
.text:0040136C                 dd 0FFFFFF7Eh
.text:00401370                 dd offset aVersion      ; "version"
.text:00401374                 dd 2 dup(0)
.text:0040137C                 dd 0FFFFFF7Dh, 4 dup(0)
.text:00401390 ; const char Locale
.text:00401390 Locale          db 0                    ; DATA XREF: sub_401A30+3B↓o
.text:00401390                                         ; sub_401A30:loc_401F7E↓o ...
.text:00401391                 db 0EBh, 0Dh, 90h
.text:00401394                 align 10h
.text:004013A0 aCProgra1Coreut db 'c:/progra~1/CoreUtils/share/locale',0
.text:004013A0                                         ; DATA XREF: sub_401A30+55↓o
.text:004013C3 aCoreutils      db 'coreutils',0        ; DATA XREF: sub_401A30+5D↓o
.text:004013C3                                         ; sub_401A30+6A↓o
.text:004013CD asc_4013CD      db '-',0                ; DATA XREF: sub_401A30+83↓o
.text:004013CD                                         ; sub_401A30+755↓o
.text:004013CF asc_4013CF      db 'x',0                ; DATA XREF: sub_401A30+88↓o
.text:004013D1 a0123456789cABD db '0123456789C:a:b:dl:',0
.text:004013D1                                         ; DATA XREF: sub_401A30+C5↓o
.text:004013E5                 align 20h
.text:00401400 aLineCountOptio db 'line count option -%s%c... is too large',0
.text:00401400                                         ; DATA XREF: sub_401A30+222↓o
.text:00401428                 align 20h
.text:00401440 aCannotSplitInM db 'cannot split in more than one way',0
.text:00401440                                         ; DATA XREF: sub_401A30:loc_401CCE↓o
.text:00401462                 align 20h
.text:00401480 aTrySHelpForMor db 'Try `%s --help',27h,' for more information.',0Ah,0
.text:00401480                                         ; DATA XREF: sub_401A30:loc_401CF3↓o
.text:00401480                                         ; .text:0040247C↓o
.text:004014A7 aRichardMStallm db 'Richard M. Stallman',0
.text:004014A7                                         ; DATA XREF: sub_401A30+310↓o
.text:004014BB aTorbjornGranlu db 'Torbjorn Granlund',0
.text:004014BB                                         ; DATA XREF: sub_401A30+318↓o
.text:004014CD a530            db '5.3.0',0            ; DATA XREF: sub_401A30+323↓o
.text:004014D3 aGnuCoreutils   db 'GNU coreutils',0    ; DATA XREF: sub_401A30+32B↓o
.text:004014E1 ; const FILE stru_4014E1
.text:004014E1 stru_4014E1     FILE <696C7073h, 90900074h, 90909090h, 90909090h, 90909090h, \
.text:004014E1                                         ; DATA XREF: sub_401A30+333↓o
.text:004014E1                       90909090h, 90909090h, 55909090h>
.text:00401501                 db  73h ; s
.text:00401502                 db  61h ; a
.text:00401503                 db  67h ; g
.text:00401504                 db  65h ; e
.text:00401505                 db  3Ah ; :
.text:00401506                 db  20h
.text:00401507                 db  25h ; %
.text:00401508                 db  73h ; s
.text:00401509                 db  20h
.text:0040150A                 db  5Bh ; [
.text:0040150B                 db  4Fh ; O
.text:0040150C                 db  50h ; P
.text:0040150D                 db  54h ; T
.text:0040150E                 db  49h ; I
.text:0040150F                 db  4Fh ; O
.text:00401510                 db  4Eh ; N
.text:00401511                 db  5Dh ; ]
.text:00401512                 db  20h
.text:00401513                 db  5Bh ; [
.text:00401514                 db  49h ; I
.text:00401515                 db  4Eh ; N
.text:00401516                 db  50h ; P
.text:00401517                 db  55h ; U
.text:00401518                 db  54h ; T
.text:00401519                 db  20h
.text:0040151A                 db  5Bh ; [
.text:0040151B                 db  50h ; P
.text:0040151C                 db  52h ; R
.text:0040151D                 db  45h ; E
.text:0040151E                 db  46h ; F
.text:0040151F                 db  49h ; I
.text:00401520                 db  58h ; X
.text:00401521                 db  5Dh ; ]
.text:00401522                 db  5Dh ; ]
.text:00401523                 db  0Ah
.text:00401524                 db    0
.text:00401525                 align 20h
.text:00401540 aOutputFixedSiz db 'Output fixed-size pieces of INPUT to PREFIXaa, PREFIXab, ...; def'
.text:00401540                                         ; DATA XREF: sub_401A30+36B↓o
.text:00401540                                         ; .text:004024CF↓o
.text:00401540                 db 'ault',0Ah
.text:00401540                 db 'size is 1000 lines, and default PREFIX is `x',27h,'.  With no INP'
.text:00401540                 db 'UT, or when INPUT',0Ah
.text:00401540                 db 'is -, read standard input.',0Ah
.text:00401540                 db 0Ah,0
.text:004015F0                 align 20h
.text:00401600 aMandatoryArgum db 'Mandatory arguments to long options are mandatory for short optio'
.text:00401600                                         ; DATA XREF: sub_401A30+38D↓o
.text:00401600                                         ; .text:004024F1↓o
.text:00401600                 db 'ns too.',0Ah,0
.text:0040164A                 align 20h
.text:00401660 aASuffixLengthN db '  -a, --suffix-length=N   use suffixes of length N (default %d)',0Ah
.text:00401660                                         ; DATA XREF: sub_401A30+3AF↓o
.text:00401660                                         ; .text:00402513↓o
.text:00401660                 db '  -b, --bytes=SIZE        put SIZE bytes per output file',0Ah
.text:00401660                 db '  -C, --line-bytes=SIZE   put at most SIZE bytes of lines per out'
.text:00401660                 db 'put file',0Ah
.text:00401660                 db '  -d, --numeric-suffixes  use numeric suffixes instead of alphabe'
.text:00401660                 db 'tic',0Ah
.text:00401660                 db '  -l, --lines=NUMBER      put NUMBER lines per output file',0Ah,0
.text:004017A4                 align 20h
.text:004017C0 aVerbosePrintAD db '      --verbose           print a diagnostic to standard error ju'
.text:004017C0                                         ; DATA XREF: sub_401A30+3D9↓o
.text:004017C0                                         ; .text:0040253D↓o
.text:004017C0                 db 'st',0Ah
.text:004017C0                 db '                            before each output file is opened',0Ah
.text:004017C0                 db 0
.text:00401843                 align 20h
.text:00401860 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.text:00401860                                         ; DATA XREF: sub_401A30+3FB↓o
.text:00401860                                         ; .text:0040255F↓o
.text:0040188D                 align 20h
.text:004018A0 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.text:004018A0                                         ; DATA XREF: sub_401A30+41D↓o
.text:004018A0                                         ; .text:00402581↓o
.text:004018D6                 align 10h
.text:004018E0 aSizeMayHaveAMu db 0Ah                  ; DATA XREF: sub_401A30+43F↓o
.text:004018E0                                         ; .text:004025A3↓o
.text:004018E0                 db 'SIZE may have a multiplier suffix: b for 512, k for 1K, m for 1 M'
.text:004018E0                 db 'eg.',0Ah,0
.text:00401927 aReportBugsToS  db 0Ah                  ; DATA XREF: sub_401A30+461↓o
.text:00401927                                         ; .text:004025C5↓o
.text:00401927                 db 'Report bugs to <%s>.',0Ah,0
.text:0040193E aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.text:0040193E                                         ; DATA XREF: sub_401A30+46E↓o
.text:0040193E                                         ; .text:004025D2↓o
.text:00401954 ; const char aBkm[]
.text:00401954 aBkm            db 'bkm',0              ; DATA XREF: sub_401A30+4C5↓o
.text:00401954                                         ; sub_401A30+65E↓o
.text:00401958 aSInvalidNumber db '%s: invalid number of bytes',0
.text:00401958                                         ; DATA XREF: sub_401A30:loc_401F4A↓o
.text:00401974 aSInvalidSuffix db '%s: invalid suffix length',0
.text:00401974                                         ; DATA XREF: sub_401A30:loc_401FC9↓o
.text:0040198E aSInvalidNumber_0 db '%s: invalid number of lines',0
.text:0040198E                                         ; DATA XREF: sub_401A30:loc_40205D↓o
.text:004019AA a0123456789     db '0123456789',0       ; DATA XREF: sub_401A30:loc_402070↓o
.text:004019B5 ; const char aS[]
.text:004019B5 aS              db '%s',0               ; DATA XREF: sub_401A30+868↓o
.text:004019B5                                         ; sub_401A30+896↓o ...
.text:004019B8 aExtraOperandS  db 'extra operand %s',0 ; DATA XREF: sub_401A30+9A4↓o
.text:004019C9 aInvalidNumberO db 'invalid number of lines: 0',0
.text:004019C9                                         ; DATA XREF: sub_401A30:loc_4023F0↓o
.text:004019E4                 align 20h
.text:00401A00 aSOptionIsObsol db '`-%s',27h,' option is obsolete; use `-l %s',27h,0
.text:00401A00                                         ; DATA XREF: sub_401A30+A02↓o
.text:00401A26                 align 10h
.text:00401A30
.text:00401A30 ; =============== S U B R O U T I N E =======================================
.text:00401A30
.text:00401A30 ; Attributes: noreturn bp-based frame fuzzy-sp
.text:00401A30
.text:00401A30 sub_401A30      proc near               ; CODE XREF: sub_401080+E5↑p
.text:00401A30
.text:00401A30 Category        = dword ptr -108h
.text:00401A30 Locale          = dword ptr -104h
.text:00401A30 var_100         = dword ptr -100h
.text:00401A30 var_FC          = byte ptr -0FCh
.text:00401A30 Str             = dword ptr -0F8h
.text:00401A30 var_F4          = dword ptr -0F4h
.text:00401A30 var_F0          = dword ptr -0F0h
.text:00401A30 var_E0          = dword ptr -0E0h
.text:00401A30 var_DC          = dword ptr -0DCh
.text:00401A30 var_D0          = dword ptr -0D0h
.text:00401A30 var_CC          = dword ptr -0CCh
.text:00401A30 var_C8          = dword ptr -0C8h
.text:00401A30 var_C4          = dword ptr -0C4h
.text:00401A30 var_C0          = dword ptr -0C0h
.text:00401A30 var_BC          = dword ptr -0BCh
.text:00401A30 Block           = dword ptr -0B8h
.text:00401A30 var_B4          = dword ptr -0B4h
.text:00401A30 var_AC          = dword ptr -0ACh
.text:00401A30 var_A8          = byte ptr -0A8h
.text:00401A30 var_88          = dword ptr -88h
.text:00401A30 var_38          = dword ptr -38h
.text:00401A30 arg_0           = dword ptr  8
.text:00401A30 arg_4           = dword ptr  0Ch
.text:00401A30
.text:00401A30                 push    ebp
.text:00401A31                 xor     eax, eax
.text:00401A33                 mov     ebp, esp
.text:00401A35                 push    edi
.text:00401A36                 push    esi
.text:00401A37                 xor     esi, esi
.text:00401A39                 push    ebx
.text:00401A3A                 sub     esp, 0FCh
.text:00401A40                 and     esp, 0FFFFFFF0h
.text:00401A43                 call    __alloca
.text:00401A48                 call    sub_40F050
.text:00401A4D                 mov     [ebp+var_BC], esi
.text:00401A53                 call    sub_40AD50
.text:00401A58                 mov     [ebp+var_C0], eax
.text:00401A5E                 mov     ebx, [ebp+arg_4]
.text:00401A61                 xor     edx, edx
.text:00401A63                 mov     [ebp+var_C8], edx
.text:00401A69                 mov     ecx, [ebx]
.text:00401A6B                 mov     [esp+108h+Locale], offset Locale ; Locale
.text:00401A73                 mov     [esp+108h+Category], 0 ; Category
.text:00401A7A                 mov     ds:dword_412570, ecx
.text:00401A80                 call    setlocale
.text:00401A85                 mov     [esp+108h+Locale], offset aCProgra1Coreut ; "c:/progra~1/CoreUtils/share/locale"
.text:00401A8D                 mov     [esp+108h+Category], offset aCoreutils ; "coreutils"
.text:00401A94                 call    ds:libintl_bindtextdomain
.text:00401A9A                 mov     [esp+108h+Category], offset aCoreutils ; "coreutils"
.text:00401AA1                 call    ds:libintl_textdomain
.text:00401AA7                 mov     [esp+108h+Category], offset sub_405B90 ; void (__cdecl *)()
.text:00401AAE                 call    sub_401040
.text:00401AB3                 mov     eax, offset asc_4013CD ; "-"
.text:00401AB8                 mov     edx, offset asc_4013CF ; "x"
.text:00401ABD                 mov     ds:FileName, eax
.text:00401AC2                 mov     ds:Str, edx
.text:00401AC8                 nop
.text:00401AC9                 lea     esi, [esi+0]
.text:00401AD0
.text:00401AD0 loc_401AD0:                             ; CODE XREF: sub_401A30+299↓j
.text:00401AD0                                         ; sub_401A30+514↓j ...
.text:00401AD0                 mov     ebx, dword_411020
.text:00401AD6                 test    ebx, ebx
.text:00401AD8                 jnz     short loc_401ADF
.text:00401ADA                 mov     ebx, 1
.text:00401ADF
.text:00401ADF loc_401ADF:                             ; CODE XREF: sub_401A30+A8↑j
.text:00401ADF                 mov     [esp+108h+Str], 0
.text:00401AE7                 mov     eax, [ebp+arg_4]
.text:00401AEA                 mov     edi, [ebp+arg_0]
.text:00401AED                 mov     dword ptr [esp+108h+var_FC], offset off_401300 ; char
.text:00401AF5                 mov     [esp+108h+var_100], offset a0123456789cABD ; "0123456789C:a:b:dl:"
.text:00401AFD                 mov     [esp+108h+Locale], eax
.text:00401B01                 mov     [esp+108h+Category], edi
.text:00401B04                 call    sub_405A20
.text:00401B09                 mov     [ebp+var_C4], eax
.text:00401B0F                 cmp     eax, 0FFFFFFFFh
.text:00401B12                 jz      loc_4020F5
.text:00401B18                 cmp     eax, 43h ; 'C'
.text:00401B1B                 jz      loc_402080
.text:00401B21                 cmp     eax, 43h ; 'C'
.text:00401B24                 jg      loc_401EB3
.text:00401B2A                 cmp     eax, 0FFFFFF7Eh
.text:00401B2F                 jz      loc_401D7C
.text:00401B35                 cmp     eax, 0FFFFFF7Eh
.text:00401B3A                 jle     loc_401D2B
.text:00401B40                 mov     ecx, [ebp+var_C4]
.text:00401B46                 sub     ecx, 30h ; '0'
.text:00401B49                 cmp     ecx, 9
.text:00401B4C                 ja      loc_401CF3
.text:00401B52                 mov     edx, [ebp+var_BC]
.text:00401B58                 test    edx, edx
.text:00401B5A                 jnz     short loc_401B77
.text:00401B5C                 mov     eax, 4
.text:00401B61                 xor     edi, edi
.text:00401B63                 xor     esi, esi
.text:00401B65                 mov     [ebp+var_BC], eax
.text:00401B6B                 mov     [ebp+Block], edi
.text:00401B71                 mov     [ebp+var_B4], esi
.text:00401B77
.text:00401B77 loc_401B77:                             ; CODE XREF: sub_401A30+12A↑j
.text:00401B77                 cmp     [ebp+var_BC], 4
.text:00401B7E                 jnz     loc_401CCE
.text:00401B84                 mov     ecx, [ebp+var_C8]
.text:00401B8A                 test    ecx, ecx
.text:00401B8C                 jz      short loc_401BA6
.text:00401B8E                 cmp     [ebp+var_C8], ebx
.text:00401B94                 jz      short loc_401BA6
.text:00401B96                 xor     esi, esi
.text:00401B98                 xor     edx, edx
.text:00401B9A                 mov     [ebp+Block], esi
.text:00401BA0                 mov     [ebp+var_B4], edx
.text:00401BA6
.text:00401BA6 loc_401BA6:                             ; CODE XREF: sub_401A30+15C↑j
.text:00401BA6                                         ; sub_401A30+164↑j
.text:00401BA6                 mov     [ebp+var_C8], ebx
.text:00401BAC                 mov     ecx, [ebp+Block]
.text:00401BB2                 mov     ebx, [ebp+var_B4]
.text:00401BB8                 mov     [ebp+var_D0], ecx
.text:00401BBE                 cmp     ebx, 19999999h
.text:00401BC4                 mov     [ebp+var_CC], ebx
.text:00401BCA                 ja      short loc_401C30
.text:00401BCC                 jb      short loc_401BD6
.text:00401BCE                 cmp     ecx, 99999999h
.text:00401BD4                 ja      short loc_401C30
.text:00401BD6
.text:00401BD6 loc_401BD6:                             ; CODE XREF: sub_401A30+19C↑j
.text:00401BD6                 mov     esi, ecx
.text:00401BD8                 mov     eax, [ebp+var_C4]
.text:00401BDE                 mov     edi, ebx
.text:00401BE0                 shld    edi, ecx, 2
.text:00401BE4                 shl     esi, 2
.text:00401BE7                 add     esi, ecx
.text:00401BE9                 adc     edi, ebx
.text:00401BEB                 cdq
.text:00401BEC                 shld    edi, esi, 1
.text:00401BF0                 add     esi, esi
.text:00401BF2                 mov     [ebp+var_E0], eax
.text:00401BF8                 add     [ebp+var_E0], esi
.text:00401BFE                 mov     [ebp+var_DC], edx
.text:00401C04                 adc     [ebp+var_DC], edi
.text:00401C0A                 add     [ebp+var_E0], 0FFFFFFD0h
.text:00401C11                 adc     [ebp+var_DC], 0FFFFFFFFh
.text:00401C18                 cmp     [ebp+var_DC], edi
.text:00401C1E                 jb      short loc_401C30
.text:00401C20                 ja      short loc_401C93
.text:00401C22                 cmp     [ebp+var_E0], esi
.text:00401C28                 jnb     short loc_401C93
.text:00401C2A                 lea     esi, [esi+0]
.text:00401C30
.text:00401C30 loc_401C30:                             ; CODE XREF: sub_401A30+19A↑j
.text:00401C30                                         ; sub_401A30+1A4↑j ...
.text:00401C30                 mov     ecx, [ebp+var_D0]
.text:00401C36                 lea     edx, [ebp+var_A8]
.text:00401C3C                 mov     eax, [ebp+var_CC]
.text:00401C42                 mov     [esp+108h+var_100], edx
.text:00401C46                 mov     [esp+108h+Category], ecx
.text:00401C49                 mov     [esp+108h+Locale], eax
.text:00401C4D                 call    sub_4046D0
.text:00401C52                 mov     [esp+108h+Category], offset aLineCountOptio ; "line count option -%s%c... is too large"
.text:00401C59                 mov     edi, eax
.text:00401C5B                 call    ds:libintl_gettext
.text:00401C61                 mov     dword ptr [esp+108h+var_FC], edi ; char
.text:00401C65                 mov     ebx, [ebp+var_C4]
.text:00401C6B                 mov     [esp+108h+Locale], 0 ; ErrorMessage
.text:00401C73                 mov     [esp+108h+Category], 1 ; Code
.text:00401C7A                 mov     [esp+108h+Str], ebx
.text:00401C7E                 mov     [esp+108h+var_100], eax ; char *
.text:00401C82                 call    sub_407720
.text:00401C87                 mov     ecx, [ebp+Block]
.text:00401C8D                 mov     ebx, [ebp+var_B4]
.text:00401C93
.text:00401C93 loc_401C93:                             ; CODE XREF: sub_401A30+1F0↑j
.text:00401C93                                         ; sub_401A30+1F8↑j
.text:00401C93                 mov     eax, ecx
.text:00401C95                 mov     edi, [ebp+var_C4]
.text:00401C9B                 mov     edx, ebx
.text:00401C9D                 shld    edx, ecx, 2
.text:00401CA1                 shl     eax, 2
.text:00401CA4                 add     eax, ecx
.text:00401CA6                 adc     edx, ebx
.text:00401CA8                 mov     ecx, edi
.text:00401CAA                 sar     ecx, 1Fh
.text:00401CAD                 shld    edx, eax, 1
.text:00401CB1                 add     eax, eax
.text:00401CB3                 add     eax, edi
.text:00401CB5                 adc     edx, ecx
.text:00401CB7                 add     eax, 0FFFFFFD0h
.text:00401CBA                 adc     edx, 0FFFFFFFFh
.text:00401CBD                 mov     [ebp+Block], eax
.text:00401CC3                 mov     [ebp+var_B4], edx
.text:00401CC9                 jmp     loc_401AD0
.text:00401CCE ; ---------------------------------------------------------------------------
.text:00401CCE
.text:00401CCE loc_401CCE:                             ; CODE XREF: sub_401A30+14E↑j
.text:00401CCE                                         ; sub_401A30+4BF↓j ...
.text:00401CCE                 mov     [esp+108h+Category], offset aCannotSplitInM ; "cannot split in more than one way"
.text:00401CD5
.text:00401CD5 loc_401CD5:                             ; CODE XREF: sub_401A30+9C7↓j
.text:00401CD5                 call    ds:libintl_gettext
.text:00401CDB                 mov     [esp+108h+Locale], 0 ; ErrorMessage
.text:00401CE3                 mov     [esp+108h+Category], 0 ; Code
.text:00401CEA                 mov     [esp+108h+var_100], eax ; char *
.text:00401CEE                 call    sub_407720
.text:00401CF3
.text:00401CF3 loc_401CF3:                             ; CODE XREF: sub_401A30+11C↑j
.text:00401CF3                                         ; sub_401A30+300↓j ...
.text:00401CF3                 mov     [esp+108h+Category], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:00401CFA                 call    ds:libintl_gettext
.text:00401D00                 mov     edi, ds:_iob
.text:00401D06                 mov     ecx, ds:dword_412570
.text:00401D0C                 add     edi, 40h ; '@'
.text:00401D0F                 mov     [esp+108h+var_100], ecx
.text:00401D13                 mov     [esp+108h+Locale], eax ; Format
.text:00401D17                 mov     [esp+108h+Category], edi ; Stream
.text:00401D1A                 call    fprintf
.text:00401D1F                 mov     [esp+108h+Category], 1 ; Code
.text:00401D26
.text:00401D26 loc_401D26:                             ; CODE XREF: sub_401A30+34A↓j
.text:00401D26                 call    exit
.text:00401D2B ; ---------------------------------------------------------------------------
.text:00401D2B
.text:00401D2B loc_401D2B:                             ; CODE XREF: sub_401A30+10A↑j
.text:00401D2B                 cmp     eax, 0FFFFFF7Dh
.text:00401D30                 jnz     short loc_401CF3
.text:00401D32                 mov     [esp+108h+var_F0], 0
.text:00401D3A                 mov     edi, ds:_iob
.text:00401D40                 mov     [esp+108h+var_F4], offset aRichardMStallm ; "Richard M. Stallman"
.text:00401D48                 mov     [esp+108h+Str], offset aTorbjornGranlu ; "Torbjorn Granlund"
.text:00401D50                 add     edi, 20h ; ' '
.text:00401D53                 mov     dword ptr [esp+108h+var_FC], offset a530 ; "5.3.0"
.text:00401D5B                 mov     [esp+108h+var_100], offset aGnuCoreutils ; "GNU coreutils"
.text:00401D63                 mov     [esp+108h+Locale], offset stru_4014E1 ; FILE *
.text:00401D6B                 mov     [esp+108h+Category], edi ; FILE *
.text:00401D6E                 call    sub_404690
.text:00401D73
.text:00401D73 loc_401D73:                             ; CODE XREF: sub_401A30+47E↓j
.text:00401D73                                         ; sub_401A30+84D↓j ...
.text:00401D73                 mov     [esp+108h+Category], 0
.text:00401D7A                 jmp     short loc_401D26
.text:00401D7C ; ---------------------------------------------------------------------------
.text:00401D7C
.text:00401D7C loc_401D7C:                             ; CODE XREF: sub_401A30+FF↑j
.text:00401D7C                 mov     [esp+108h+Category], (offset stru_4014E1._tmpfname+3)
.text:00401D83                 call    ds:libintl_gettext
.text:00401D89                 mov     ecx, ds:dword_412570
.text:00401D8F                 mov     [esp+108h+Category], eax ; Format
.text:00401D92                 mov     [esp+108h+Locale], ecx
.text:00401D96                 call    printf
.text:00401D9B                 mov     [esp+108h+Category], offset aOutputFixedSiz ; "Output fixed-size pieces of INPUT to PR"...
.text:00401DA2                 call    ds:libintl_gettext
.text:00401DA8                 mov     ebx, ds:_iob
.text:00401DAE                 add     ebx, 20h ; ' '
.text:00401DB1                 mov     [esp+108h+Locale], ebx ; Stream
.text:00401DB5                 mov     [esp+108h+Category], eax ; Buffer
.text:00401DB8                 call    fputs
.text:00401DBD                 mov     [esp+108h+Category], offset aMandatoryArgum ; "Mandatory arguments to long options are"...
.text:00401DC4                 call    ds:libintl_gettext
.text:00401DCA                 mov     esi, ds:_iob
.text:00401DD0                 add     esi, 20h ; ' '
.text:00401DD3                 mov     [esp+108h+Locale], esi ; Stream
.text:00401DD7                 mov     [esp+108h+Category], eax ; Buffer
.text:00401DDA                 call    fputs
.text:00401DDF                 mov     [esp+108h+Category], offset aASuffixLengthN ; "  -a, --suffix-length=N   use suffixes "...
.text:00401DE6                 call    ds:libintl_gettext
.text:00401DEC                 mov     [esp+108h+var_100], 2
.text:00401DF4                 mov     edx, ds:_iob
.text:00401DFA                 add     edx, 20h ; ' '
.text:00401DFD                 mov     [esp+108h+Category], edx ; Stream
.text:00401E00                 mov     [esp+108h+Locale], eax ; Format
.text:00401E04                 call    fprintf
.text:00401E09                 mov     [esp+108h+Category], offset aVerbosePrintAD ; "      --verbose           print a diagn"...
.text:00401E10                 call    ds:libintl_gettext
.text:00401E16                 mov     edi, ds:_iob
.text:00401E1C                 add     edi, 20h ; ' '
.text:00401E1F                 mov     [esp+108h+Locale], edi ; Stream
.text:00401E23                 mov     [esp+108h+Category], eax ; Buffer
.text:00401E26                 call    fputs
.text:00401E2B                 mov     [esp+108h+Category], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:00401E32                 call    ds:libintl_gettext
.text:00401E38                 mov     ecx, ds:_iob
.text:00401E3E                 add     ecx, 20h ; ' '
.text:00401E41                 mov     [esp+108h+Locale], ecx ; Stream
.text:00401E45                 mov     [esp+108h+Category], eax ; Buffer
.text:00401E48                 call    fputs
.text:00401E4D                 mov     [esp+108h+Category], offset aVersionOutputV ; "      --version  output version informa"...
.text:00401E54                 call    ds:libintl_gettext
.text:00401E5A                 mov     ebx, ds:_iob
.text:00401E60                 add     ebx, 20h ; ' '
.text:00401E63                 mov     [esp+108h+Locale], ebx ; Stream
.text:00401E67                 mov     [esp+108h+Category], eax ; Buffer
.text:00401E6A                 call    fputs
.text:00401E6F                 mov     [esp+108h+Category], offset aSizeMayHaveAMu ; "\nSIZE may have a multiplier suffix: b "...
.text:00401E76                 call    ds:libintl_gettext
.text:00401E7C                 mov     esi, ds:_iob
.text:00401E82                 add     esi, 20h ; ' '
.text:00401E85                 mov     [esp+108h+Locale], esi ; Stream
.text:00401E89                 mov     [esp+108h+Category], eax ; Buffer
.text:00401E8C                 call    fputs
.text:00401E91                 mov     [esp+108h+Category], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:00401E98                 call    ds:libintl_gettext
.text:00401E9E                 mov     [esp+108h+Locale], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:00401EA6                 mov     [esp+108h+Category], eax ; Format
.text:00401EA9                 call    printf
.text:00401EAE                 jmp     loc_401D73
.text:00401EB3 ; ---------------------------------------------------------------------------
.text:00401EB3
.text:00401EB3 loc_401EB3:                             ; CODE XREF: sub_401A30+F4↑j
.text:00401EB3                 cmp     [ebp+var_C4], 64h ; 'd'
.text:00401EBA                 jz      loc_402070
.text:00401EC0                 cmp     [ebp+var_C4], 64h ; 'd'
.text:00401EC7                 jg      loc_401FD5
.text:00401ECD                 cmp     [ebp+var_C4], 61h ; 'a'
.text:00401ED4                 jz      loc_401F7E
.text:00401EDA                 cmp     [ebp+var_C4], 62h ; 'b'
.text:00401EE1                 jnz     loc_401CF3
.text:00401EE7                 mov     esi, [ebp+var_BC]
.text:00401EED                 test    esi, esi
.text:00401EEF                 jnz     loc_401CCE
.text:00401EF5                 mov     [esp+108h+Str], offset aBkm ; "bkm"
.text:00401EFD                 mov     ebx, ds:dword_412590
.text:00401F03                 lea     edx, [ebp+Block]
.text:00401F09                 mov     dword ptr [esp+108h+var_FC], edx ; int
.text:00401F0D                 mov     esi, 1
.text:00401F12                 mov     [ebp+var_BC], esi
.text:00401F18                 mov     [esp+108h+var_100], 0Ah ; int
.text:00401F20                 mov     [esp+108h+Locale], 0 ; int
.text:00401F28                 mov     [esp+108h+Category], ebx ; int
.text:00401F2B                 call    sub_4047B0
.text:00401F30                 test    eax, eax
.text:00401F32                 jnz     short loc_401F4A
.text:00401F34                 mov     edi, [ebp+var_B4]
.text:00401F3A                 mov     ecx, [ebp+Block]
.text:00401F40                 mov     eax, edi
.text:00401F42                 or      eax, ecx
.text:00401F44                 jnz     loc_401AD0
.text:00401F4A
.text:00401F4A loc_401F4A:                             ; CODE XREF: sub_401A30+502↑j
.text:00401F4A                                         ; sub_401A30+69B↓j ...
.text:00401F4A                 mov     [esp+108h+Category], offset aSInvalidNumber ; "%s: invalid number of bytes"
.text:00401F51
.text:00401F51 loc_401F51:                             ; CODE XREF: sub_401A30+5A0↓j
.text:00401F51                                         ; sub_401A30+634↓j
.text:00401F51                 call    ds:libintl_gettext
.text:00401F57                 mov     ebx, ds:dword_412590
.text:00401F5D                 mov     dword ptr [esp+108h+var_FC], ebx ; char
.text:00401F61
.text:00401F61 loc_401F61:                             ; CODE XREF: sub_401A30+9B7↓j
.text:00401F61                 mov     [esp+108h+var_100], eax ; char *
.text:00401F65                 mov     [esp+108h+Locale], 0 ; ErrorMessage
.text:00401F6D                 mov     [esp+108h+Category], 0 ; Code
.text:00401F74                 call    sub_407720
.text:00401F79                 jmp     loc_401CF3
.text:00401F7E ; ---------------------------------------------------------------------------
.text:00401F7E
.text:00401F7E loc_401F7E:                             ; CODE XREF: sub_401A30+4A4↑j
.text:00401F7E                 mov     [esp+108h+Str], offset Locale ; Str
.text:00401F86                 mov     ebx, ds:dword_412590
.text:00401F8C                 lea     edx, [ebp+var_AC]
.text:00401F92                 mov     dword ptr [esp+108h+var_FC], edx ; int
.text:00401F96                 mov     [esp+108h+var_100], 0Ah ; int
.text:00401F9E                 mov     [esp+108h+Locale], 0 ; int
.text:00401FA6                 mov     [esp+108h+Category], ebx ; int
.text:00401FA9                 call    sub_4054B0
.text:00401FAE                 test    eax, eax
.text:00401FB0                 jnz     short loc_401FC9
.text:00401FB2                 mov     eax, [ebp+var_AC]
.text:00401FB8                 cmp     eax, 3FFFFFFFh
.text:00401FBD                 ja      short loc_401FC9
.text:00401FBF                 mov     Size, eax
.text:00401FC4                 jmp     loc_401AD0
.text:00401FC9 ; ---------------------------------------------------------------------------
.text:00401FC9
.text:00401FC9 loc_401FC9:                             ; CODE XREF: sub_401A30+580↑j
.text:00401FC9                                         ; sub_401A30+58D↑j
.text:00401FC9                 mov     [esp+108h+Category], offset aSInvalidSuffix ; "%s: invalid suffix length"
.text:00401FD0                 jmp     loc_401F51
.text:00401FD5 ; ---------------------------------------------------------------------------
.text:00401FD5
.text:00401FD5 loc_401FD5:                             ; CODE XREF: sub_401A30+497↑j
.text:00401FD5                 cmp     [ebp+var_C4], 6Ch ; 'l'
.text:00401FDC                 jz      short loc_401FFA
.text:00401FDE                 cmp     [ebp+var_C4], 80h ; '€'
.text:00401FE8                 jnz     loc_401CF3
.text:00401FEE                 mov     ds:byte_412070, 1
.text:00401FF5                 jmp     loc_401AD0
.text:00401FFA ; ---------------------------------------------------------------------------
.text:00401FFA
.text:00401FFA loc_401FFA:                             ; CODE XREF: sub_401A30+5AC↑j
.text:00401FFA                 mov     edx, [ebp+var_BC]
.text:00402000                 test    edx, edx
.text:00402002                 jnz     loc_401CCE
.text:00402008                 mov     [esp+108h+Str], offset Locale ; Str
.text:00402010                 mov     esi, ds:dword_412590
.text:00402016                 lea     ecx, [ebp+Block]
.text:0040201C                 mov     dword ptr [esp+108h+var_FC], ecx ; int
.text:00402020                 mov     edi, 3
.text:00402025                 mov     [ebp+var_BC], edi
.text:0040202B                 mov     [esp+108h+var_100], 0Ah ; int
.text:00402033                 mov     [esp+108h+Locale], 0 ; int
.text:0040203B                 mov     [esp+108h+Category], esi ; int
.text:0040203E                 call    sub_4047B0
.text:00402043                 test    eax, eax
.text:00402045                 jnz     short loc_40205D
.text:00402047                 mov     esi, [ebp+var_B4]
.text:0040204D                 mov     ebx, [ebp+Block]
.text:00402053                 mov     eax, esi
.text:00402055                 or      eax, ebx
.text:00402057                 jnz     loc_401AD0
.text:0040205D
.text:0040205D loc_40205D:                             ; CODE XREF: sub_401A30+615↑j
.text:0040205D                 mov     [esp+108h+Category], offset aSInvalidNumber_0 ; "%s: invalid number of lines"
.text:00402064                 jmp     loc_401F51
.text:00402064 ; ---------------------------------------------------------------------------
.text:00402069                 align 10h
.text:00402070
.text:00402070 loc_402070:                             ; CODE XREF: sub_401A30+48A↑j
.text:00402070                 mov     edx, offset a0123456789 ; "0123456789"
.text:00402075                 mov     off_411014, edx ; "abcdefghijklmnopqrstuvwxyz"
.text:0040207B                 jmp     loc_401AD0
.text:00402080 ; ---------------------------------------------------------------------------
.text:00402080
.text:00402080 loc_402080:                             ; CODE XREF: sub_401A30+EB↑j
.text:00402080                 mov     edx, [ebp+var_BC]
.text:00402086                 test    edx, edx
.text:00402088                 jnz     loc_401CCE
.text:0040208E                 mov     [esp+108h+Str], offset aBkm ; "bkm"
.text:00402096                 mov     ecx, ds:dword_412590
.text:0040209C                 mov     ebx, 2
.text:004020A1                 mov     [ebp+var_BC], ebx
.text:004020A7                 lea     edi, [ebp+Block]
.text:004020AD                 mov     dword ptr [esp+108h+var_FC], edi ; int
.text:004020B1                 mov     [esp+108h+var_100], 0Ah ; int
.text:004020B9                 mov     [esp+108h+Locale], 0 ; int
.text:004020C1                 mov     [esp+108h+Category], ecx ; int
.text:004020C4                 call    sub_4047B0
.text:004020C9                 test    eax, eax
.text:004020CB                 jnz     loc_401F4A
.text:004020D1                 mov     edx, [ebp+var_B4]
.text:004020D7                 mov     ecx, [ebp+Block]
.text:004020DD                 mov     eax, edx
.text:004020DF                 or      eax, ecx
.text:004020E1                 jz      loc_401F4A
.text:004020E7                 cmp     edx, 0
.text:004020EA                 jbe     loc_401AD0
.text:004020F0                 jmp     loc_401F4A
.text:004020F5 ; ---------------------------------------------------------------------------
.text:004020F5
.text:004020F5 loc_4020F5:                             ; CODE XREF: sub_401A30+E2↑j
.text:004020F5                 mov     edx, [ebp+var_C8]
.text:004020FB                 test    edx, edx
.text:004020FD                 jnz     loc_402400
.text:00402103
.text:00402103 loc_402103:                             ; CODE XREF: sub_401A30+9DA↓j
.text:00402103                 mov     eax, [ebp+var_BC]
.text:00402109                 test    eax, eax
.text:0040210B                 jnz     short loc_40212B
.text:0040210D                 mov     ebx, 3
.text:00402112                 mov     esi, 3E8h
.text:00402117                 xor     edx, edx
.text:00402119                 mov     [ebp+var_BC], ebx
.text:0040211F                 mov     [ebp+Block], esi
.text:00402125                 mov     [ebp+var_B4], edx
.text:0040212B
.text:0040212B loc_40212B:                             ; CODE XREF: sub_401A30+6DB↑j
.text:0040212B                 mov     edi, [ebp+var_B4]
.text:00402131                 mov     ecx, [ebp+Block]
.text:00402137                 mov     eax, edi
.text:00402139                 or      eax, ecx
.text:0040213B                 jz      loc_4023F0
.text:00402141                 mov     edx, dword_411020
.text:00402147                 cmp     edx, [ebp+arg_0]
.text:0040214A                 jge     short loc_40217E
.text:0040214C                 mov     ecx, [ebp+arg_4]
.text:0040214F                 mov     esi, [ecx+edx*4]
.text:00402152                 inc     edx
.text:00402153                 cmp     edx, [ebp+arg_0]
.text:00402156                 mov     ds:FileName, esi
.text:0040215C                 mov     dword_411020, edx
.text:00402162                 jge     short loc_40217E
.text:00402164                 lea     eax, [edx+1]
.text:00402167                 mov     ebx, [ecx+edx*4]
.text:0040216A                 cmp     eax, [ebp+arg_0]
.text:0040216D                 mov     dword_411020, eax
.text:00402172                 mov     ds:Str, ebx
.text:00402178                 jl      loc_4023C9
.text:0040217E
.text:0040217E loc_40217E:                             ; CODE XREF: sub_401A30+71A↑j
.text:0040217E                                         ; sub_401A30+732↑j
.text:0040217E                 cld
.text:0040217F                 mov     ebx, ds:FileName
.text:00402185                 mov     edi, offset asc_4013CD ; "-"
.text:0040218A                 mov     ecx, 2
.text:0040218F                 mov     esi, ebx
.text:00402191                 repe cmpsb
.text:00402193                 jnz     loc_40237E
.text:00402199                 xor     ecx, ecx
.text:0040219B                 mov     ds:FileHandle, ecx
.text:004021A1
.text:004021A1 loc_4021A1:                             ; CODE XREF: sub_401A30+965↓j
.text:004021A1                                         ; sub_401A30+994↓j
.text:004021A1                 mov     edi, ds:FileHandle
.text:004021A7                 mov     [esp+108h+Category], edi ; FileHandle
.text:004021AA                 call    _isatty
.text:004021AF                 test    eax, eax
.text:004021B1                 jz      loc_402363
.text:004021B7
.text:004021B7 loc_4021B7:                             ; CODE XREF: sub_401A30+949↓j
.text:004021B7                 mov     ecx, ds:FileHandle
.text:004021BD                 mov     ebx, 0FFFFFFFFh
.text:004021C2                 lea     esi, [ebp+var_88]
.text:004021C8                 mov     ds:dword_412060, ebx
.text:004021CE                 mov     [esp+108h+Locale], esi ; int
.text:004021D2                 mov     [esp+108h+Category], ecx ; char *
.text:004021D5                 call    sub_4079C0
.text:004021DA                 test    eax, eax
.text:004021DC                 js      loc_402335
.text:004021E2
.text:004021E2 loc_4021E2:                             ; CODE XREF: sub_401A30+92E↓j
.text:004021E2                 mov     edx, [ebp+var_38]
.text:004021E5                 lea     esi, [edx-1]
.text:004021E8                 mov     ebx, edx
.text:004021EA                 cmp     esi, 3FFFFFh
.text:004021F0                 jbe     short loc_4021F7
.text:004021F2                 mov     ebx, 200h
.text:004021F7
.text:004021F7 loc_4021F7:                             ; CODE XREF: sub_401A30+7C0↑j
.text:004021F7                 mov     eax, [ebp+var_C0]
.text:004021FD                 lea     edi, [eax+ebx]
.text:00402200                 mov     [esp+108h+Category], edi ; size_t
.text:00402203                 call    sub_405F60
.text:00402208                 mov     esi, [ebp+var_C0]
.text:0040220E                 xor     edx, edx
.text:00402210                 lea     ecx, [esi+eax-1]
.text:00402214                 mov     eax, ecx
.text:00402216                 div     esi
.text:00402218                 mov     eax, ecx
.text:0040221A                 sub     eax, edx
.text:0040221C                 cmp     [ebp+var_BC], 2
.text:00402223                 jz      loc_402322
.text:00402229                 cmp     [ebp+var_BC], 2
.text:00402230                 ja      loc_4022F0
.text:00402236                 cmp     [ebp+var_BC], 1
.text:0040223D                 jz      short loc_402244
.text:0040223F
.text:0040223F loc_40223F:                             ; CODE XREF: sub_401A30+8C7↓j
.text:0040223F                 call    abort
.text:00402244 ; ---------------------------------------------------------------------------
.text:00402244
.text:00402244 loc_402244:                             ; CODE XREF: sub_401A30+80D↑j
.text:00402244                 mov     dword ptr [esp+108h+var_FC], ebx
.text:00402248                 mov     esi, [ebp+Block]
.text:0040224E                 mov     ecx, [ebp+var_B4]
.text:00402254                 mov     [esp+108h+var_100], eax
.text:00402258                 mov     [esp+108h+Category], esi
.text:0040225B                 mov     [esp+108h+Locale], ecx
.text:0040225F                 call    sub_402600
.text:00402264
.text:00402264 loc_402264:                             ; CODE XREF: sub_401A30+8ED↓j
.text:00402264                                         ; sub_401A30+900↓j
.text:00402264                 mov     ebx, ds:FileHandle
.text:0040226A                 mov     [esp+108h+Category], ebx ; FileHandle
.text:0040226D                 call    _close
.text:00402272                 test    eax, eax
.text:00402274                 js      short loc_4022C1
.text:00402276
.text:00402276 loc_402276:                             ; CODE XREF: sub_401A30+8BA↓j
.text:00402276                 mov     eax, ds:dword_412060
.text:0040227B                 test    eax, eax
.text:0040227D                 js      loc_401D73
.text:00402283                 mov     [esp+108h+Category], eax ; FileHandle
.text:00402286                 call    _close
.text:0040228B                 test    eax, eax
.text:0040228D                 jns     loc_401D73
.text:00402293                 call    _errno
.text:00402298                 mov     [esp+108h+var_100], offset aS ; "%s"
.text:004022A0                 mov     edi, ds:dword_412020
.text:004022A6                 mov     dword ptr [esp+108h+var_FC], edi ; char
.text:004022AA                 mov     esi, [eax]
.text:004022AC                 mov     [esp+108h+Category], 1 ; Code
.text:004022B3                 mov     [esp+108h+Locale], esi ; ErrorMessage
.text:004022B7                 call    sub_407720
.text:004022BC                 jmp     loc_401D73
.text:004022C1 ; ---------------------------------------------------------------------------
.text:004022C1
.text:004022C1 loc_4022C1:                             ; CODE XREF: sub_401A30+844↑j
.text:004022C1                 call    _errno
.text:004022C6                 mov     [esp+108h+var_100], offset aS ; "%s"
.text:004022CE                 mov     ecx, ds:FileName
.text:004022D4                 mov     dword ptr [esp+108h+var_FC], ecx ; char
.text:004022D8                 mov     edx, [eax]
.text:004022DA                 mov     [esp+108h+Category], 1 ; Code
.text:004022E1                 mov     [esp+108h+Locale], edx ; ErrorMessage
.text:004022E5                 call    sub_407720
.text:004022EA                 jmp     short loc_402276
.text:004022EA ; ---------------------------------------------------------------------------
.text:004022EC                 align 10h
.text:004022F0
.text:004022F0 loc_4022F0:                             ; CODE XREF: sub_401A30+800↑j
.text:004022F0                 cmp     [ebp+var_BC], 4
.text:004022F7                 ja      loc_40223F
.text:004022FD                 mov     dword ptr [esp+108h+var_FC], ebx ; int
.text:00402301                 mov     edx, [ebp+Block]
.text:00402307                 mov     ebx, [ebp+var_B4]
.text:0040230D                 mov     [esp+108h+var_100], eax ; void *
.text:00402311                 mov     [esp+108h+Category], edx ; int
.text:00402314                 mov     [esp+108h+Locale], ebx ; int
.text:00402318                 call    sub_402950
.text:0040231D                 jmp     loc_402264
.text:00402322 ; ---------------------------------------------------------------------------
.text:00402322
.text:00402322 loc_402322:                             ; CODE XREF: sub_401A30+7F3↑j
.text:00402322                 mov     edi, [ebp+Block]
.text:00402328                 mov     [esp+108h+Category], edi ; Block
.text:0040232B                 call    sub_402CC0
.text:00402330                 jmp     loc_402264
.text:00402335 ; ---------------------------------------------------------------------------
.text:00402335
.text:00402335 loc_402335:                             ; CODE XREF: sub_401A30+7AC↑j
.text:00402335                 call    _errno
.text:0040233A                 mov     [esp+108h+var_100], offset aS ; "%s"
.text:00402342                 mov     ecx, ds:FileName
.text:00402348                 mov     dword ptr [esp+108h+var_FC], ecx ; char
.text:0040234C                 mov     edi, [eax]
.text:0040234E                 mov     [esp+108h+Category], 1 ; Code
.text:00402355                 mov     [esp+108h+Locale], edi ; ErrorMessage
.text:00402359                 call    sub_407720
.text:0040235E                 jmp     loc_4021E2
.text:00402363 ; ---------------------------------------------------------------------------
.text:00402363
.text:00402363 loc_402363:                             ; CODE XREF: sub_401A30+781↑j
.text:00402363                 mov     [esp+108h+Locale], 8000h ; Mode
.text:0040236B                 mov     edx, ds:FileHandle
.text:00402371                 mov     [esp+108h+Category], edx ; FileHandle
.text:00402374                 call    _setmode
.text:00402379                 jmp     loc_4021B7
.text:0040237E ; ---------------------------------------------------------------------------
.text:0040237E
.text:0040237E loc_40237E:                             ; CODE XREF: sub_401A30+763↑j
.text:0040237E                 mov     [esp+108h+Locale], 0 ; OpenFlag
.text:00402386                 mov     [esp+108h+Category], ebx ; FileName
.text:00402389                 call    _open
.text:0040238E                 mov     ds:FileHandle, eax
.text:00402393                 test    eax, eax
.text:00402395                 jns     loc_4021A1
.text:0040239B                 call    _errno
.text:004023A0                 mov     [esp+108h+var_100], offset aS ; "%s"
.text:004023A8                 mov     ebx, ds:FileName
.text:004023AE                 mov     dword ptr [esp+108h+var_FC], ebx ; char
.text:004023B2                 mov     esi, [eax]
.text:004023B4                 mov     [esp+108h+Category], 1 ; Code
.text:004023BB                 mov     [esp+108h+Locale], esi ; ErrorMessage
.text:004023BF                 call    sub_407720
.text:004023C4                 jmp     loc_4021A1
.text:004023C9 ; ---------------------------------------------------------------------------
.text:004023C9
.text:004023C9 loc_4023C9:                             ; CODE XREF: sub_401A30+748↑j
.text:004023C9                 mov     edx, [ecx+eax*4]
.text:004023CC                 mov     [esp+108h+Category], edx ; char *
.text:004023CF                 call    sub_404130
.text:004023D4                 mov     [esp+108h+Category], offset aExtraOperandS ; "extra operand %s"
.text:004023DB                 mov     edi, eax
.text:004023DD                 call    ds:libintl_gettext
.text:004023E3                 mov     dword ptr [esp+108h+var_FC], edi
.text:004023E7                 jmp     loc_401F61
.text:004023E7 ; ---------------------------------------------------------------------------
.text:004023EC                 align 10h
.text:004023F0
.text:004023F0 loc_4023F0:                             ; CODE XREF: sub_401A30+70B↑j
.text:004023F0                 mov     [esp+108h+Category], offset aInvalidNumberO ; "invalid number of lines: 0"
.text:004023F7                 jmp     loc_401CD5
.text:004023F7 ; ---------------------------------------------------------------------------
.text:004023FC                 align 10h
.text:00402400
.text:00402400 loc_402400:                             ; CODE XREF: sub_401A30+6CD↑j
.text:00402400                 call    sub_404170
.text:00402405                 cmp     eax, 30DAFh
.text:0040240A                 jle     loc_402103
.text:00402410                 mov     ecx, [ebp+Block]
.text:00402416                 lea     edi, [ebp+var_A8]
.text:0040241C                 mov     ebx, [ebp+var_B4]
.text:00402422                 mov     [esp+108h+var_100], edi
.text:00402426                 mov     [esp+108h+Category], ecx
.text:00402429                 mov     [esp+108h+Locale], ebx
.text:0040242D                 call    sub_4046D0
.text:00402432                 mov     [esp+108h+Category], offset aSOptionIsObsol ; "`-%s' option is obsolete; use `-l %s'"
.text:00402439                 mov     esi, eax
.text:0040243B                 call    ds:libintl_gettext
.text:00402441                 mov     [esp+108h+Str], esi
.text:00402445                 mov     dword ptr [esp+108h+var_FC], esi ; char
.text:00402449                 mov     [esp+108h+Locale], 0 ; ErrorMessage
.text:00402451                 mov     [esp+108h+var_100], eax ; char *
.text:00402455                 mov     [esp+108h+Category], 0 ; Code
.text:0040245C                 call    sub_407720
.text:00402461                 jmp     loc_401CF3
.text:00402461 sub_401A30      endp
.text:00402461
.text:00402461 ; ---------------------------------------------------------------------------
.text:00402466                 align 10h
.text:00402470                 push    ebx
.text:00402471                 sub     esp, 18h
.text:00402474                 mov     ebx, [esp+20h]
.text:00402478                 test    ebx, ebx
.text:0040247A                 jz      short loc_4024B0
.text:0040247C                 mov     dword ptr [esp], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:00402483                 call    ds:libintl_gettext
.text:00402489                 mov     edx, ds:_iob
.text:0040248F                 mov     ecx, ds:dword_412570
.text:00402495                 add     edx, 40h ; '@'
.text:00402498                 mov     [esp+8], ecx
.text:0040249C                 mov     [esp+4], eax
.text:004024A0                 mov     [esp], edx
.text:004024A3                 call    fprintf
.text:004024A8
.text:004024A8 loc_4024A8:                             ; CODE XREF: .text:004025E2↓j
.text:004024A8                 mov     [esp], ebx
.text:004024AB                 call    exit
.text:004024B0 ; ---------------------------------------------------------------------------
.text:004024B0
.text:004024B0 loc_4024B0:                             ; CODE XREF: .text:0040247A↑j
.text:004024B0                 mov     dword ptr [esp], (offset stru_4014E1._tmpfname+3)
.text:004024B7                 call    ds:libintl_gettext
.text:004024BD                 mov     ecx, ds:dword_412570
.text:004024C3                 mov     [esp], eax
.text:004024C6                 mov     [esp+4], ecx
.text:004024CA                 call    printf
.text:004024CF                 mov     dword ptr [esp], offset aOutputFixedSiz ; "Output fixed-size pieces of INPUT to PR"...
.text:004024D6                 call    ds:libintl_gettext
.text:004024DC                 mov     ecx, ds:_iob
.text:004024E2                 add     ecx, 20h ; ' '
.text:004024E5                 mov     [esp+4], ecx
.text:004024E9                 mov     [esp], eax
.text:004024EC                 call    fputs
.text:004024F1                 mov     dword ptr [esp], offset aMandatoryArgum ; "Mandatory arguments to long options are"...
.text:004024F8                 call    ds:libintl_gettext
.text:004024FE                 mov     ecx, ds:_iob
.text:00402504                 add     ecx, 20h ; ' '
.text:00402507                 mov     [esp+4], ecx
.text:0040250B                 mov     [esp], eax
.text:0040250E                 call    fputs
.text:00402513                 mov     dword ptr [esp], offset aASuffixLengthN ; "  -a, --suffix-length=N   use suffixes "...
.text:0040251A                 call    ds:libintl_gettext
.text:00402520                 mov     dword ptr [esp+8], 2
.text:00402528                 mov     edx, ds:_iob
.text:0040252E                 add     edx, 20h ; ' '
.text:00402531                 mov     [esp], edx
.text:00402534                 mov     [esp+4], eax
.text:00402538                 call    fprintf
.text:0040253D                 mov     dword ptr [esp], offset aVerbosePrintAD ; "      --verbose           print a diagn"...
.text:00402544                 call    ds:libintl_gettext
.text:0040254A                 mov     ecx, ds:_iob
.text:00402550                 add     ecx, 20h ; ' '
.text:00402553                 mov     [esp+4], ecx
.text:00402557                 mov     [esp], eax
.text:0040255A                 call    fputs
.text:0040255F                 mov     dword ptr [esp], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:00402566                 call    ds:libintl_gettext
.text:0040256C                 mov     ecx, ds:_iob
.text:00402572                 add     ecx, 20h ; ' '
.text:00402575                 mov     [esp+4], ecx
.text:00402579                 mov     [esp], eax
.text:0040257C                 call    fputs
.text:00402581                 mov     dword ptr [esp], offset aVersionOutputV ; "      --version  output version informa"...
.text:00402588                 call    ds:libintl_gettext
.text:0040258E                 mov     ecx, ds:_iob
.text:00402594                 add     ecx, 20h ; ' '
.text:00402597                 mov     [esp+4], ecx
.text:0040259B                 mov     [esp], eax
.text:0040259E                 call    fputs
.text:004025A3                 mov     dword ptr [esp], offset aSizeMayHaveAMu ; "\nSIZE may have a multiplier suffix: b "...
.text:004025AA                 call    ds:libintl_gettext
.text:004025B0                 mov     ecx, ds:_iob
.text:004025B6                 add     ecx, 20h ; ' '
.text:004025B9                 mov     [esp+4], ecx
.text:004025BD                 mov     [esp], eax
.text:004025C0                 call    fputs
.text:004025C5                 mov     dword ptr [esp], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:004025CC                 call    ds:libintl_gettext
.text:004025D2                 mov     dword ptr [esp+4], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:004025DA                 mov     [esp], eax
.text:004025DD                 call    printf
.text:004025E2                 jmp     loc_4024A8
.text:004025E2 ; ---------------------------------------------------------------------------
.text:004025E7 aCreatingFileS  db 'creating file `%s',27h,0Ah,0
.text:004025E7                                         ; DATA XREF: sub_402600:loc_402760↓o
.text:004025E7                                         ; sub_402600:loc_4028B4↓o ...
.text:004025FB                 align 10h
.text:00402600
.text:00402600 ; =============== S U B R O U T I N E =======================================
.text:00402600
.text:00402600
.text:00402600 sub_402600      proc near               ; CODE XREF: sub_401A30+82F↑p
.text:00402600
.text:00402600 FileHandle      = dword ptr -3Ch
.text:00402600 OpenFlag        = dword ptr -38h
.text:00402600 var_34          = dword ptr -34h
.text:00402600 var_30          = byte ptr -30h
.text:00402600 var_28          = dword ptr -28h
.text:00402600 var_21          = byte ptr -21h
.text:00402600 var_20          = dword ptr -20h
.text:00402600 var_1C          = dword ptr -1Ch
.text:00402600 var_18          = dword ptr -18h
.text:00402600 arg_0           = dword ptr  4
.text:00402600 arg_4           = dword ptr  8
.text:00402600 arg_8           = dword ptr  0Ch
.text:00402600 arg_C           = dword ptr  10h
.text:00402600
.text:00402600                 push    ebp
.text:00402601                 push    edi
.text:00402602                 push    esi
.text:00402603                 push    ebx
.text:00402604                 sub     esp, 2Ch
.text:00402607                 mov     edx, [esp+3Ch+arg_0]
.text:0040260B                 mov     [esp+3Ch+var_21], 1
.text:00402610                 mov     ecx, [esp+3Ch+arg_4]
.text:00402614                 mov     ebx, edx
.text:00402616                 mov     [esp+3Ch+var_1C], edx
.text:0040261A                 mov     esi, ecx
.text:0040261C                 mov     [esp+3Ch+var_18], ecx
.text:00402620
.text:00402620 loc_402620:                             ; CODE XREF: sub_402600+278↓j
.text:00402620                 mov     eax, [esp+3Ch+arg_C]
.text:00402624                 mov     edi, [esp+3Ch+arg_8]
.text:00402628                 mov     ecx, ds:FileHandle
.text:0040262E                 mov     [esp+3Ch+var_34], eax
.text:00402632                 mov     [esp+3Ch+OpenFlag], edi
.text:00402636                 mov     [esp+3Ch+FileHandle], ecx
.text:00402639                 call    sub_405C70
.text:0040263E                 mov     [esp+3Ch+var_20], eax
.text:00402642                 inc     eax
.text:00402643                 jz      loc_402913
.text:00402649
.text:00402649 loc_402649:                             ; CODE XREF: sub_402600+33C↓j
.text:00402649                 mov     ebp, [esp+3Ch+arg_8]
.text:0040264D                 mov     edi, [esp+3Ch+var_20]
.text:00402651                 jmp     short loc_402660
.text:00402651 ; ---------------------------------------------------------------------------
.text:00402653                 align 10h
.text:00402660
.text:00402660 loc_402660:                             ; CODE XREF: sub_402600+51↑j
.text:00402660                                         ; sub_402600+12D↓j
.text:00402660                 xor     ecx, ecx
.text:00402662                 cmp     ecx, esi
.text:00402664                 ja      short loc_402674
.text:00402666                 jb      loc_4027BF
.text:0040266C                 cmp     edi, ebx
.text:0040266E                 jb      loc_4027BF
.text:00402674
.text:00402674 loc_402674:                             ; CODE XREF: sub_402600+64↑j
.text:00402674                 cmp     [esp+3Ch+var_21], 0
.text:00402679                 mov     [esp+3Ch+var_28], ebx
.text:0040267D                 jz      short loc_4026D1
.text:0040267F                 mov     eax, ds:dword_412060
.text:00402684                 test    eax, eax
.text:00402686                 js      short loc_402698
.text:00402688                 mov     [esp+3Ch+FileHandle], eax ; FileHandle
.text:0040268B                 call    _close
.text:00402690                 test    eax, eax
.text:00402692                 js      loc_402791
.text:00402698
.text:00402698 loc_402698:                             ; CODE XREF: sub_402600+86↑j
.text:00402698                                         ; sub_402600+1BA↓j
.text:00402698                 call    sub_402F20
.text:0040269D                 cmp     ds:byte_412070, 0
.text:004026A4                 jnz     loc_402760
.text:004026AA
.text:004026AA loc_4026AA:                             ; CODE XREF: sub_402600+18C↓j
.text:004026AA                 mov     [esp+3Ch+var_34], 1B6h
.text:004026B2                 mov     ecx, ds:dword_412020
.text:004026B8                 mov     [esp+3Ch+OpenFlag], 8301h ; OpenFlag
.text:004026C0                 mov     [esp+3Ch+FileHandle], ecx ; FileName
.text:004026C3                 call    _open
.text:004026C8                 mov     ds:dword_412060, eax
.text:004026CD                 test    eax, eax
.text:004026CF                 js      short loc_402732
.text:004026D1
.text:004026D1 loc_4026D1:                             ; CODE XREF: sub_402600+7D↑j
.text:004026D1                                         ; sub_402600+15B↓j
.text:004026D1                 mov     [esp+3Ch+var_34], ebx
.text:004026D5                 mov     ecx, ds:dword_412060
.text:004026DB                 mov     [esp+3Ch+OpenFlag], ebp
.text:004026DF                 mov     [esp+3Ch+FileHandle], ecx
.text:004026E2                 call    sub_405CD0
.text:004026E7                 cmp     eax, ebx
.text:004026E9                 jz      short loc_402714
.text:004026EB                 call    _errno
.text:004026F0                 mov     [esp+3Ch+var_34], offset aS ; "%s"
.text:004026F8                 mov     esi, ds:dword_412020
.text:004026FE                 mov     dword ptr [esp+3Ch+var_30], esi ; char
.text:00402702                 mov     ebx, [eax]
.text:00402704                 mov     [esp+3Ch+FileHandle], 1 ; Code
.text:0040270B                 mov     [esp+3Ch+OpenFlag], ebx ; ErrorMessage
.text:0040270F                 call    sub_407720
.text:00402714
.text:00402714 loc_402714:                             ; CODE XREF: sub_402600+E9↑j
.text:00402714                 mov     [esp+3Ch+var_21], 1
.text:00402719                 mov     edx, [esp+3Ch+var_28]
.text:0040271D                 mov     eax, [esp+3Ch+var_28]
.text:00402721                 mov     ebx, [esp+3Ch+var_1C]
.text:00402725                 mov     esi, [esp+3Ch+var_18]
.text:00402729                 add     ebp, edx
.text:0040272B                 sub     edi, eax
.text:0040272D                 jmp     loc_402660
.text:00402732 ; ---------------------------------------------------------------------------
.text:00402732
.text:00402732 loc_402732:                             ; CODE XREF: sub_402600+CF↑j
.text:00402732                 call    _errno
.text:00402737                 mov     [esp+3Ch+var_34], offset aS ; "%s"
.text:0040273F                 mov     esi, ds:dword_412020
.text:00402745                 mov     dword ptr [esp+3Ch+var_30], esi ; char
.text:00402749                 mov     edx, [eax]
.text:0040274B                 mov     [esp+3Ch+FileHandle], 1 ; Code
.text:00402752                 mov     [esp+3Ch+OpenFlag], edx ; ErrorMessage
.text:00402756                 call    sub_407720
.text:0040275B                 jmp     loc_4026D1
.text:00402760 ; ---------------------------------------------------------------------------
.text:00402760
.text:00402760 loc_402760:                             ; CODE XREF: sub_402600+A4↑j
.text:00402760                 mov     [esp+3Ch+FileHandle], offset aCreatingFileS ; "creating file `%s'\n"
.text:00402767                 call    ds:libintl_gettext
.text:0040276D                 mov     edx, ds:_iob
.text:00402773                 mov     esi, ds:dword_412020
.text:00402779                 add     edx, 40h ; '@'
.text:0040277C                 mov     [esp+3Ch+var_34], esi
.text:00402780                 mov     [esp+3Ch+OpenFlag], eax ; Format
.text:00402784                 mov     [esp+3Ch+FileHandle], edx ; Stream
.text:00402787                 call    fprintf
.text:0040278C                 jmp     loc_4026AA
.text:00402791 ; ---------------------------------------------------------------------------
.text:00402791
.text:00402791 loc_402791:                             ; CODE XREF: sub_402600+92↑j
.text:00402791                 call    _errno
.text:00402796                 mov     [esp+3Ch+var_34], offset aS ; "%s"
.text:0040279E                 mov     ecx, ds:dword_412020
.text:004027A4                 mov     dword ptr [esp+3Ch+var_30], ecx ; char
.text:004027A8                 mov     esi, [eax]
.text:004027AA                 mov     [esp+3Ch+FileHandle], 1 ; Code
.text:004027B1                 mov     [esp+3Ch+OpenFlag], esi ; ErrorMessage
.text:004027B5                 call    sub_407720
.text:004027BA                 jmp     loc_402698
.text:004027BF ; ---------------------------------------------------------------------------
.text:004027BF
.text:004027BF loc_4027BF:                             ; CODE XREF: sub_402600+66↑j
.text:004027BF                                         ; sub_402600+6E↑j
.text:004027BF                 test    edi, edi
.text:004027C1                 jz      loc_402870
.text:004027C7                 cmp     [esp+3Ch+var_21], 0
.text:004027CC                 jz      short loc_402820
.text:004027CE                 mov     eax, ds:dword_412060
.text:004027D3                 test    eax, eax
.text:004027D5                 js      short loc_4027E7
.text:004027D7                 mov     [esp+3Ch+FileHandle], eax ; FileHandle
.text:004027DA                 call    _close
.text:004027DF                 test    eax, eax
.text:004027E1                 js      loc_4028E5
.text:004027E7
.text:004027E7 loc_4027E7:                             ; CODE XREF: sub_402600+1D5↑j
.text:004027E7                                         ; sub_402600+30E↓j
.text:004027E7                 call    sub_402F20
.text:004027EC                 cmp     ds:byte_412070, 0
.text:004027F3                 jnz     loc_4028B4
.text:004027F9
.text:004027F9 loc_4027F9:                             ; CODE XREF: sub_402600+2E0↓j
.text:004027F9                 mov     [esp+3Ch+var_34], 1B6h
.text:00402801                 mov     edx, ds:dword_412020
.text:00402807                 mov     [esp+3Ch+OpenFlag], 8301h ; OpenFlag
.text:0040280F                 mov     [esp+3Ch+FileHandle], edx ; FileName
.text:00402812                 call    _open
.text:00402817                 mov     ds:dword_412060, eax
.text:0040281C                 test    eax, eax
.text:0040281E                 js      short loc_402886
.text:00402820
.text:00402820 loc_402820:                             ; CODE XREF: sub_402600+1CC↑j
.text:00402820                                         ; sub_402600+2AF↓j
.text:00402820                 mov     [esp+3Ch+OpenFlag], ebp
.text:00402824                 mov     ebp, ds:dword_412060
.text:0040282A                 mov     [esp+3Ch+var_34], edi
.text:0040282E                 mov     [esp+3Ch+FileHandle], ebp
.text:00402831                 call    sub_405CD0
.text:00402836                 cmp     eax, edi
.text:00402838                 jz      short loc_402863
.text:0040283A                 call    _errno
.text:0040283F                 mov     [esp+3Ch+var_34], offset aS ; "%s"
.text:00402847                 mov     ecx, ds:dword_412020
.text:0040284D                 mov     dword ptr [esp+3Ch+var_30], ecx ; char
.text:00402851                 mov     edx, [eax]
.text:00402853                 mov     [esp+3Ch+FileHandle], 1 ; Code
.text:0040285A                 mov     [esp+3Ch+OpenFlag], edx ; ErrorMessage
.text:0040285E                 call    sub_407720
.text:00402863
.text:00402863 loc_402863:                             ; CODE XREF: sub_402600+238↑j
.text:00402863                 mov     [esp+3Ch+var_21], 0
.text:00402868                 mov     ebp, edi
.text:0040286A                 xor     edi, edi
.text:0040286C                 sub     ebx, ebp
.text:0040286E                 sbb     esi, edi
.text:00402870
.text:00402870 loc_402870:                             ; CODE XREF: sub_402600+1C1↑j
.text:00402870                 mov     edi, [esp+3Ch+arg_C]
.text:00402874                 cmp     [esp+3Ch+var_20], edi
.text:00402878                 jz      loc_402620
.text:0040287E                 add     esp, 2Ch
.text:00402881                 pop     ebx
.text:00402882                 pop     esi
.text:00402883                 pop     edi
.text:00402884                 pop     ebp
.text:00402885                 retn
.text:00402886 ; ---------------------------------------------------------------------------
.text:00402886
.text:00402886 loc_402886:                             ; CODE XREF: sub_402600+21E↑j
.text:00402886                 call    _errno
.text:0040288B                 mov     [esp+3Ch+var_34], offset aS ; "%s"
.text:00402893                 mov     ecx, ds:dword_412020
.text:00402899                 mov     dword ptr [esp+3Ch+var_30], ecx ; char
.text:0040289D                 mov     ecx, [eax]
.text:0040289F                 mov     [esp+3Ch+FileHandle], 1 ; Code
.text:004028A6                 mov     [esp+3Ch+OpenFlag], ecx ; ErrorMessage
.text:004028AA                 call    sub_407720
.text:004028AF                 jmp     loc_402820
.text:004028B4 ; ---------------------------------------------------------------------------
.text:004028B4
.text:004028B4 loc_4028B4:                             ; CODE XREF: sub_402600+1F3↑j
.text:004028B4                 mov     [esp+3Ch+FileHandle], offset aCreatingFileS ; "creating file `%s'\n"
.text:004028BB                 call    ds:libintl_gettext
.text:004028C1                 mov     edx, ds:_iob
.text:004028C7                 mov     ecx, ds:dword_412020
.text:004028CD                 add     edx, 40h ; '@'
.text:004028D0                 mov     [esp+3Ch+var_34], ecx
.text:004028D4                 mov     [esp+3Ch+OpenFlag], eax ; Format
.text:004028D8                 mov     [esp+3Ch+FileHandle], edx ; Stream
.text:004028DB                 call    fprintf
.text:004028E0                 jmp     loc_4027F9
.text:004028E5 ; ---------------------------------------------------------------------------
.text:004028E5
.text:004028E5 loc_4028E5:                             ; CODE XREF: sub_402600+1E1↑j
.text:004028E5                 call    _errno
.text:004028EA                 mov     [esp+3Ch+var_34], offset aS ; "%s"
.text:004028F2                 mov     ecx, ds:dword_412020
.text:004028F8                 mov     dword ptr [esp+3Ch+var_30], ecx ; char
.text:004028FC                 mov     edx, [eax]
.text:004028FE                 mov     [esp+3Ch+FileHandle], 1 ; Code
.text:00402905                 mov     [esp+3Ch+OpenFlag], edx ; ErrorMessage
.text:00402909                 call    sub_407720
.text:0040290E                 jmp     loc_4027E7
.text:00402913 ; ---------------------------------------------------------------------------
.text:00402913
.text:00402913 loc_402913:                             ; CODE XREF: sub_402600+43↑j
.text:00402913                 call    _errno
.text:00402918                 mov     [esp+3Ch+var_34], offset aS ; "%s"
.text:00402920                 mov     ecx, ds:FileName
.text:00402926                 mov     dword ptr [esp+3Ch+var_30], ecx ; char
.text:0040292A                 mov     ebp, [eax]
.text:0040292C                 mov     [esp+3Ch+FileHandle], 1 ; Code
.text:00402933                 mov     [esp+3Ch+OpenFlag], ebp ; ErrorMessage
.text:00402937                 call    sub_407720
.text:0040293C                 jmp     loc_402649
.text:0040293C sub_402600      endp
.text:0040293C
.text:00402941 ; ---------------------------------------------------------------------------
.text:00402941                 jmp     short sub_402950
.text:00402941 ; ---------------------------------------------------------------------------
.text:00402943                 align 10h
.text:00402950
.text:00402950 ; =============== S U B R O U T I N E =======================================
.text:00402950
.text:00402950
.text:00402950 ; int __cdecl sub_402950(int, int, void *, int)
.text:00402950 sub_402950      proc near               ; CODE XREF: sub_401A30+8E8↑p
.text:00402950                                         ; .text:00402941↑j
.text:00402950
.text:00402950 Buf             = dword ptr -3Ch
.text:00402950 Val             = dword ptr -38h
.text:00402950 MaxCount        = dword ptr -34h
.text:00402950 var_30          = byte ptr -30h
.text:00402950 var_25          = byte ptr -25h
.text:00402950 var_24          = dword ptr -24h
.text:00402950 var_20          = dword ptr -20h
.text:00402950 var_1C          = dword ptr -1Ch
.text:00402950 var_18          = dword ptr -18h
.text:00402950 arg_0           = dword ptr  4
.text:00402950 arg_4           = dword ptr  8
.text:00402950 arg_8           = dword ptr  0Ch
.text:00402950 arg_C           = dword ptr  10h
.text:00402950
.text:00402950                 push    ebp
.text:00402951                 push    edi
.text:00402952                 xor     edi, edi
.text:00402954                 push    esi
.text:00402955                 xor     esi, esi
.text:00402957                 push    ebx
.text:00402958                 sub     esp, 2Ch
.text:0040295B                 mov     edx, [esp+3Ch+arg_0]
.text:0040295F                 mov     [esp+3Ch+var_25], 1
.text:00402964                 mov     ecx, [esp+3Ch+arg_4]
.text:00402968                 mov     [esp+3Ch+var_1C], edx
.text:0040296C                 mov     [esp+3Ch+var_18], ecx
.text:00402970
.text:00402970 loc_402970:                             ; CODE XREF: sub_402950+29C↓j
.text:00402970                 mov     eax, [esp+3Ch+arg_C]
.text:00402974                 mov     ebx, [esp+3Ch+arg_8]
.text:00402978                 mov     ecx, ds:FileHandle
.text:0040297E                 mov     [esp+3Ch+MaxCount], eax
.text:00402982                 mov     [esp+3Ch+Val], ebx
.text:00402986                 mov     [esp+3Ch+Buf], ecx
.text:00402989                 call    sub_405C70
.text:0040298E                 mov     [esp+3Ch+var_20], eax
.text:00402992                 inc     eax
.text:00402993                 jz      loc_402C87
.text:00402999
.text:00402999 loc_402999:                             ; CODE XREF: sub_402950+360↓j
.text:00402999                 mov     eax, [esp+3Ch+arg_8]
.text:0040299D                 mov     edx, [esp+3Ch+var_20]
.text:004029A1                 mov     ebp, eax
.text:004029A3                 mov     [esp+3Ch+var_24], eax
.text:004029A7                 add     ebp, edx
.text:004029A9                 mov     ebx, eax
.text:004029AB                 mov     byte ptr [ebp+0], 0Ah
.text:004029AF                 nop
.text:004029B0
.text:004029B0 loc_4029B0:                             ; CODE XREF: sub_402950+8E↓j
.text:004029B0                                         ; sub_402950+96↓j ...
.text:004029B0                 mov     [esp+3Ch+Buf], ebx ; Buf
.text:004029B3                 mov     ecx, ebp
.text:004029B5                 sub     ecx, ebx
.text:004029B7                 mov     [esp+3Ch+Val], 0Ah ; Val
.text:004029BF                 inc     ecx
.text:004029C0                 mov     [esp+3Ch+MaxCount], ecx ; MaxCount
.text:004029C4                 call    memchr
.text:004029C9                 cmp     eax, ebp
.text:004029CB                 mov     ebx, eax
.text:004029CD                 jz      loc_402B2F
.text:004029D3                 inc     ebx
.text:004029D4                 add     esi, 1
.text:004029D7                 adc     edi, 0
.text:004029DA                 cmp     edi, [esp+3Ch+var_18]
.text:004029DE                 jb      short loc_4029B0
.text:004029E0                 ja      short loc_4029E8
.text:004029E2                 cmp     esi, [esp+3Ch+var_1C]
.text:004029E6                 jb      short loc_4029B0
.text:004029E8
.text:004029E8 loc_4029E8:                             ; CODE XREF: sub_402950+90↑j
.text:004029E8                 mov     edi, [esp+3Ch+var_24]
.text:004029EC                 mov     esi, ebx
.text:004029EE                 sub     esi, edi
.text:004029F0                 cmp     [esp+3Ch+var_25], 0
.text:004029F5                 jz      short loc_402A49
.text:004029F7                 mov     eax, ds:dword_412060
.text:004029FC                 test    eax, eax
.text:004029FE                 js      short loc_402A10
.text:00402A00                 mov     [esp+3Ch+Buf], eax ; FileHandle
.text:00402A03                 call    _close
.text:00402A08                 test    eax, eax
.text:00402A0A                 js      loc_402B01
.text:00402A10
.text:00402A10 loc_402A10:                             ; CODE XREF: sub_402950+AE↑j
.text:00402A10                                         ; sub_402950+1DA↓j
.text:00402A10                 call    sub_402F20
.text:00402A15                 cmp     ds:byte_412070, 0
.text:00402A1C                 jnz     loc_402AD0
.text:00402A22
.text:00402A22 loc_402A22:                             ; CODE XREF: sub_402950+1AC↓j
.text:00402A22                 mov     [esp+3Ch+MaxCount], 1B6h
.text:00402A2A                 mov     edx, ds:dword_412020
.text:00402A30                 mov     [esp+3Ch+Val], 8301h ; OpenFlag
.text:00402A38                 mov     [esp+3Ch+Buf], edx ; FileName
.text:00402A3B                 call    _open
.text:00402A40                 mov     ds:dword_412060, eax
.text:00402A45                 test    eax, eax
.text:00402A47                 js      short loc_402AA2
.text:00402A49
.text:00402A49 loc_402A49:                             ; CODE XREF: sub_402950+A5↑j
.text:00402A49                                         ; sub_402950+17B↓j
.text:00402A49                 mov     [esp+3Ch+MaxCount], esi
.text:00402A4D                 mov     eax, [esp+3Ch+var_24]
.text:00402A51                 mov     edx, ds:dword_412060
.text:00402A57                 mov     [esp+3Ch+Val], eax
.text:00402A5B                 mov     [esp+3Ch+Buf], edx
.text:00402A5E                 call    sub_405CD0
.text:00402A63                 cmp     eax, esi
.text:00402A65                 jz      short loc_402A90
.text:00402A67                 call    _errno
.text:00402A6C                 mov     [esp+3Ch+MaxCount], offset aS ; "%s"
.text:00402A74                 mov     edi, ds:dword_412020
.text:00402A7A                 mov     dword ptr [esp+3Ch+var_30], edi ; char
.text:00402A7E                 mov     esi, [eax]
.text:00402A80                 mov     [esp+3Ch+Buf], 1 ; Code
.text:00402A87                 mov     [esp+3Ch+Val], esi ; ErrorMessage
.text:00402A8B                 call    sub_407720
.text:00402A90
.text:00402A90 loc_402A90:                             ; CODE XREF: sub_402950+115↑j
.text:00402A90                 mov     [esp+3Ch+var_24], ebx
.text:00402A94                 xor     esi, esi
.text:00402A96                 xor     edi, edi
.text:00402A98                 mov     [esp+3Ch+var_25], 1
.text:00402A9D                 jmp     loc_4029B0
.text:00402AA2 ; ---------------------------------------------------------------------------
.text:00402AA2
.text:00402AA2 loc_402AA2:                             ; CODE XREF: sub_402950+F7↑j
.text:00402AA2                 call    _errno
.text:00402AA7                 mov     [esp+3Ch+MaxCount], offset aS ; "%s"
.text:00402AAF                 mov     ecx, ds:dword_412020
.text:00402AB5                 mov     dword ptr [esp+3Ch+var_30], ecx ; char
.text:00402AB9                 mov     edi, [eax]
.text:00402ABB                 mov     [esp+3Ch+Buf], 1 ; Code
.text:00402AC2                 mov     [esp+3Ch+Val], edi ; ErrorMessage
.text:00402AC6                 call    sub_407720
.text:00402ACB                 jmp     loc_402A49
.text:00402AD0 ; ---------------------------------------------------------------------------
.text:00402AD0
.text:00402AD0 loc_402AD0:                             ; CODE XREF: sub_402950+CC↑j
.text:00402AD0                 mov     [esp+3Ch+Buf], offset aCreatingFileS ; "creating file `%s'\n"
.text:00402AD7                 call    ds:libintl_gettext
.text:00402ADD                 mov     edi, ds:_iob
.text:00402AE3                 mov     ecx, ds:dword_412020
.text:00402AE9                 add     edi, 40h ; '@'
.text:00402AEC                 mov     [esp+3Ch+MaxCount], ecx
.text:00402AF0                 mov     [esp+3Ch+Val], eax ; Format
.text:00402AF4                 mov     [esp+3Ch+Buf], edi ; Stream
.text:00402AF7                 call    fprintf
.text:00402AFC                 jmp     loc_402A22
.text:00402B01 ; ---------------------------------------------------------------------------
.text:00402B01
.text:00402B01 loc_402B01:                             ; CODE XREF: sub_402950+BA↑j
.text:00402B01                 call    _errno
.text:00402B06                 mov     [esp+3Ch+MaxCount], offset aS ; "%s"
.text:00402B0E                 mov     ecx, ds:dword_412020
.text:00402B14                 mov     dword ptr [esp+3Ch+var_30], ecx ; char
.text:00402B18                 mov     edx, [eax]
.text:00402B1A                 mov     [esp+3Ch+Buf], 1 ; Code
.text:00402B21                 mov     [esp+3Ch+Val], edx ; ErrorMessage
.text:00402B25                 call    sub_407720
.text:00402B2A                 jmp     loc_402A10
.text:00402B2F ; ---------------------------------------------------------------------------
.text:00402B2F
.text:00402B2F loc_402B2F:                             ; CODE XREF: sub_402950+7D↑j
.text:00402B2F                 cmp     eax, [esp+3Ch+var_24]
.text:00402B33                 jz      loc_402BE4
.text:00402B39                 mov     ebp, [esp+3Ch+var_24]
.text:00402B3D                 sub     ebx, ebp
.text:00402B3F                 cmp     [esp+3Ch+var_25], 0
.text:00402B44                 jz      short loc_402B98
.text:00402B46                 mov     eax, ds:dword_412060
.text:00402B4B                 test    eax, eax
.text:00402B4D                 js      short loc_402B5F
.text:00402B4F                 mov     [esp+3Ch+Buf], eax ; FileHandle
.text:00402B52                 call    _close
.text:00402B57                 test    eax, eax
.text:00402B59                 js      loc_402C59
.text:00402B5F
.text:00402B5F loc_402B5F:                             ; CODE XREF: sub_402950+1FD↑j
.text:00402B5F                                         ; sub_402950+332↓j
.text:00402B5F                 call    sub_402F20
.text:00402B64                 cmp     ds:byte_412070, 0
.text:00402B6B                 jnz     loc_402C28
.text:00402B71
.text:00402B71 loc_402B71:                             ; CODE XREF: sub_402950+304↓j
.text:00402B71                 mov     [esp+3Ch+MaxCount], 1B6h
.text:00402B79                 mov     edx, ds:dword_412020
.text:00402B7F                 mov     [esp+3Ch+Val], 8301h ; OpenFlag
.text:00402B87                 mov     [esp+3Ch+Buf], edx ; FileName
.text:00402B8A                 call    _open
.text:00402B8F                 mov     ds:dword_412060, eax
.text:00402B94                 test    eax, eax
.text:00402B96                 js      short loc_402BFA
.text:00402B98
.text:00402B98 loc_402B98:                             ; CODE XREF: sub_402950+1F4↑j
.text:00402B98                                         ; sub_402950+2D3↓j
.text:00402B98                 mov     [esp+3Ch+MaxCount], ebx
.text:00402B9C                 mov     ebp, [esp+3Ch+var_24]
.text:00402BA0                 mov     edx, ds:dword_412060
.text:00402BA6                 mov     [esp+3Ch+Val], ebp
.text:00402BAA                 mov     [esp+3Ch+Buf], edx
.text:00402BAD                 call    sub_405CD0
.text:00402BB2                 cmp     eax, ebx
.text:00402BB4                 jz      short loc_402BDF
.text:00402BB6                 call    _errno
.text:00402BBB                 mov     [esp+3Ch+MaxCount], offset aS ; "%s"
.text:00402BC3                 mov     ecx, ds:dword_412020
.text:00402BC9                 mov     dword ptr [esp+3Ch+var_30], ecx ; char
.text:00402BCD                 mov     ebx, [eax]
.text:00402BCF                 mov     [esp+3Ch+Buf], 1 ; Code
.text:00402BD6                 mov     [esp+3Ch+Val], ebx ; ErrorMessage
.text:00402BDA                 call    sub_407720
.text:00402BDF
.text:00402BDF loc_402BDF:                             ; CODE XREF: sub_402950+264↑j
.text:00402BDF                 mov     [esp+3Ch+var_25], 0
.text:00402BE4
.text:00402BE4 loc_402BE4:                             ; CODE XREF: sub_402950+1E3↑j
.text:00402BE4                 mov     ebp, [esp+3Ch+arg_C]
.text:00402BE8                 cmp     [esp+3Ch+var_20], ebp
.text:00402BEC                 jz      loc_402970
.text:00402BF2                 add     esp, 2Ch
.text:00402BF5                 pop     ebx
.text:00402BF6                 pop     esi
.text:00402BF7                 pop     edi
.text:00402BF8                 pop     ebp
.text:00402BF9                 retn
.text:00402BFA ; ---------------------------------------------------------------------------
.text:00402BFA
.text:00402BFA loc_402BFA:                             ; CODE XREF: sub_402950+246↑j
.text:00402BFA                 call    _errno
.text:00402BFF                 mov     [esp+3Ch+MaxCount], offset aS ; "%s"
.text:00402C07                 mov     ecx, ds:dword_412020
.text:00402C0D                 mov     dword ptr [esp+3Ch+var_30], ecx ; char
.text:00402C11                 mov     ebp, [eax]
.text:00402C13                 mov     [esp+3Ch+Buf], 1 ; Code
.text:00402C1A                 mov     [esp+3Ch+Val], ebp ; ErrorMessage
.text:00402C1E                 call    sub_407720
.text:00402C23                 jmp     loc_402B98
.text:00402C28 ; ---------------------------------------------------------------------------
.text:00402C28
.text:00402C28 loc_402C28:                             ; CODE XREF: sub_402950+21B↑j
.text:00402C28                 mov     [esp+3Ch+Buf], offset aCreatingFileS ; "creating file `%s'\n"
.text:00402C2F                 call    ds:libintl_gettext
.text:00402C35                 mov     ebp, ds:_iob
.text:00402C3B                 mov     ecx, ds:dword_412020
.text:00402C41                 add     ebp, 40h ; '@'
.text:00402C44                 mov     [esp+3Ch+MaxCount], ecx
.text:00402C48                 mov     [esp+3Ch+Val], eax ; Format
.text:00402C4C                 mov     [esp+3Ch+Buf], ebp ; Stream
.text:00402C4F                 call    fprintf
.text:00402C54                 jmp     loc_402B71
.text:00402C59 ; ---------------------------------------------------------------------------
.text:00402C59
.text:00402C59 loc_402C59:                             ; CODE XREF: sub_402950+209↑j
.text:00402C59                 call    _errno
.text:00402C5E                 mov     [esp+3Ch+MaxCount], offset aS ; "%s"
.text:00402C66                 mov     ecx, ds:dword_412020
.text:00402C6C                 mov     dword ptr [esp+3Ch+var_30], ecx ; char
.text:00402C70                 mov     edx, [eax]
.text:00402C72                 mov     [esp+3Ch+Buf], 1 ; Code
.text:00402C79                 mov     [esp+3Ch+Val], edx ; ErrorMessage
.text:00402C7D                 call    sub_407720
.text:00402C82                 jmp     loc_402B5F
.text:00402C87 ; ---------------------------------------------------------------------------
.text:00402C87
.text:00402C87 loc_402C87:                             ; CODE XREF: sub_402950+43↑j
.text:00402C87                 call    _errno
.text:00402C8C                 mov     [esp+3Ch+MaxCount], offset aS ; "%s"
.text:00402C94                 mov     ecx, ds:FileName
.text:00402C9A                 mov     dword ptr [esp+3Ch+var_30], ecx ; char
.text:00402C9E                 mov     ebp, [eax]
.text:00402CA0                 mov     [esp+3Ch+Buf], 1 ; Code
.text:00402CA7                 mov     [esp+3Ch+Val], ebp ; ErrorMessage
.text:00402CAB                 call    sub_407720
.text:00402CB0                 jmp     loc_402999
.text:00402CB0 sub_402950      endp
.text:00402CB0
.text:00402CB0 ; ---------------------------------------------------------------------------
.text:00402CB5                 align 10h
.text:00402CC0
.text:00402CC0 ; =============== S U B R O U T I N E =======================================
.text:00402CC0
.text:00402CC0
.text:00402CC0 ; int __cdecl sub_402CC0(void *Block)
.text:00402CC0 sub_402CC0      proc near               ; CODE XREF: sub_401A30+8FB↑p
.text:00402CC0
.text:00402CC0 FileHandle      = dword ptr -2Ch
.text:00402CC0 OpenFlag        = dword ptr -28h
.text:00402CC0 Size            = dword ptr -24h
.text:00402CC0 var_20          = byte ptr -20h
.text:00402CC0 var_15          = byte ptr -15h
.text:00402CC0 var_14          = dword ptr -14h
.text:00402CC0 Block           = dword ptr  4
.text:00402CC0
.text:00402CC0                 push    ebp
.text:00402CC1                 push    edi
.text:00402CC2                 xor     edi, edi
.text:00402CC4                 push    esi
.text:00402CC5                 push    ebx
.text:00402CC6                 sub     esp, 1Ch
.text:00402CC9                 mov     edx, [esp+2Ch+Block]
.text:00402CCD                 mov     [esp+2Ch+var_15], 0
.text:00402CD2                 mov     [esp+2Ch+var_14], edx
.text:00402CD6                 mov     [esp+2Ch+FileHandle], edx ; size_t
.text:00402CD9                 call    sub_405F60
.text:00402CDE                 mov     esi, eax
.text:00402CE0
.text:00402CE0 loc_402CE0:                             ; CODE XREF: sub_402CC0+114↓j
.text:00402CE0                 mov     ebx, [esp+2Ch+var_14]
.text:00402CE4                 lea     ecx, [edi+esi]
.text:00402CE7                 mov     edx, ds:FileHandle
.text:00402CED                 mov     [esp+2Ch+OpenFlag], ecx
.text:00402CF1                 sub     ebx, edi
.text:00402CF3                 mov     [esp+2Ch+Size], ebx
.text:00402CF7                 mov     [esp+2Ch+FileHandle], edx
.text:00402CFA                 call    sub_405C70
.text:00402CFF                 cmp     eax, 0FFFFFFFFh
.text:00402D02                 mov     ebx, eax
.text:00402D04                 jz      loc_402EC4
.text:00402D0A
.text:00402D0A loc_402D0A:                             ; CODE XREF: sub_402CC0+22D↓j
.text:00402D0A                 add     edi, ebx
.text:00402D0C                 cmp     edi, [esp+2Ch+var_14]
.text:00402D10                 jz      short loc_402D17
.text:00402D12                 mov     [esp+2Ch+var_15], 1
.text:00402D17
.text:00402D17 loc_402D17:                             ; CODE XREF: sub_402CC0+50↑j
.text:00402D17                 cmp     edi, [esp+2Ch+var_14]
.text:00402D1B                 lea     ebx, [edi+esi]
.text:00402D1E                 mov     eax, ebx
.text:00402D20                 jz      loc_402E97
.text:00402D26
.text:00402D26 loc_402D26:                             ; CODE XREF: sub_402CC0+1D9↓j
.text:00402D26                                         ; sub_402CC0+1E3↓j ...
.text:00402D26                 cmp     ebx, esi
.text:00402D28                 jz      loc_402E90
.text:00402D2E
.text:00402D2E loc_402D2E:                             ; CODE XREF: sub_402CC0+1D2↓j
.text:00402D2E                 mov     eax, ds:dword_412060
.text:00402D33                 mov     ebp, ebx
.text:00402D35                 sub     ebp, esi
.text:00402D37                 test    eax, eax
.text:00402D39                 js      short loc_402D4B
.text:00402D3B                 mov     [esp+2Ch+FileHandle], eax ; FileHandle
.text:00402D3E                 call    _close
.text:00402D43                 test    eax, eax
.text:00402D45                 js      loc_402E61
.text:00402D4B
.text:00402D4B loc_402D4B:                             ; CODE XREF: sub_402CC0+79↑j
.text:00402D4B                                         ; sub_402CC0+1CA↓j
.text:00402D4B                 call    sub_402F20
.text:00402D50                 cmp     ds:byte_412070, 0
.text:00402D57                 jnz     loc_402E30
.text:00402D5D
.text:00402D5D loc_402D5D:                             ; CODE XREF: sub_402CC0+19C↓j
.text:00402D5D                 mov     [esp+2Ch+Size], 1B6h
.text:00402D65                 mov     edx, ds:dword_412020
.text:00402D6B                 mov     [esp+2Ch+OpenFlag], 8301h ; OpenFlag
.text:00402D73                 mov     [esp+2Ch+FileHandle], edx ; FileName
.text:00402D76                 call    _open
.text:00402D7B                 mov     ds:dword_412060, eax
.text:00402D80                 test    eax, eax
.text:00402D82                 js      short loc_402E02
.text:00402D84
.text:00402D84 loc_402D84:                             ; CODE XREF: sub_402CC0+16B↓j
.text:00402D84                 mov     [esp+2Ch+Size], ebp
.text:00402D88                 mov     edx, ds:dword_412060
.text:00402D8E                 mov     [esp+2Ch+OpenFlag], esi
.text:00402D92                 mov     [esp+2Ch+FileHandle], edx
.text:00402D95                 call    sub_405CD0
.text:00402D9A                 cmp     eax, ebp
.text:00402D9C                 jz      short loc_402DC7
.text:00402D9E                 call    _errno
.text:00402DA3                 mov     [esp+2Ch+Size], offset aS ; "%s"
.text:00402DAB                 mov     ecx, ds:dword_412020
.text:00402DB1                 mov     dword ptr [esp+2Ch+var_20], ecx ; char
.text:00402DB5                 mov     ebp, [eax]
.text:00402DB7                 mov     [esp+2Ch+FileHandle], 1 ; Code
.text:00402DBE                 mov     [esp+2Ch+OpenFlag], ebp ; ErrorMessage
.text:00402DC2                 call    sub_407720
.text:00402DC7
.text:00402DC7 loc_402DC7:                             ; CODE XREF: sub_402CC0+DC↑j
.text:00402DC7                 mov     edx, ebx
.text:00402DC9                 sub     edx, esi
.text:00402DCB                 sub     edi, edx
.text:00402DCD                 jnz     short loc_402DF0
.text:00402DCF
.text:00402DCF loc_402DCF:                             ; CODE XREF: sub_402CC0+140↓j
.text:00402DCF                 cmp     [esp+2Ch+var_15], 0
.text:00402DD4                 jz      loc_402CE0
.text:00402DDA                 mov     [esp+2Ch+Block], esi ; Block
.text:00402DDE                 add     esp, 1Ch
.text:00402DE1                 pop     ebx
.text:00402DE2                 pop     esi
.text:00402DE3                 pop     edi
.text:00402DE4                 pop     ebp
.text:00402DE5                 jmp     free
.text:00402DE5 ; ---------------------------------------------------------------------------
.text:00402DEA                 align 10h
.text:00402DF0
.text:00402DF0 loc_402DF0:                             ; CODE XREF: sub_402CC0+10D↑j
.text:00402DF0                 mov     [esp+2Ch+Size], edi ; Size
.text:00402DF4                 mov     [esp+2Ch+OpenFlag], ebx ; Src
.text:00402DF8                 mov     [esp+2Ch+FileHandle], esi ; void *
.text:00402DFB                 call    memmove
.text:00402E00                 jmp     short loc_402DCF
.text:00402E02 ; ---------------------------------------------------------------------------
.text:00402E02
.text:00402E02 loc_402E02:                             ; CODE XREF: sub_402CC0+C2↑j
.text:00402E02                 call    _errno
.text:00402E07                 mov     [esp+2Ch+Size], offset aS ; "%s"
.text:00402E0F                 mov     ecx, ds:dword_412020
.text:00402E15                 mov     dword ptr [esp+2Ch+var_20], ecx ; char
.text:00402E19                 mov     ecx, [eax]
.text:00402E1B                 mov     [esp+2Ch+FileHandle], 1 ; Code
.text:00402E22                 mov     [esp+2Ch+OpenFlag], ecx ; ErrorMessage
.text:00402E26                 call    sub_407720
.text:00402E2B                 jmp     loc_402D84
.text:00402E30 ; ---------------------------------------------------------------------------
.text:00402E30
.text:00402E30 loc_402E30:                             ; CODE XREF: sub_402CC0+97↑j
.text:00402E30                 mov     [esp+2Ch+FileHandle], offset aCreatingFileS ; "creating file `%s'\n"
.text:00402E37                 call    ds:libintl_gettext
.text:00402E3D                 mov     edx, ds:_iob
.text:00402E43                 mov     ecx, ds:dword_412020
.text:00402E49                 add     edx, 40h ; '@'
.text:00402E4C                 mov     [esp+2Ch+Size], ecx
.text:00402E50                 mov     [esp+2Ch+OpenFlag], eax ; Format
.text:00402E54                 mov     [esp+2Ch+FileHandle], edx ; Stream
.text:00402E57                 call    fprintf
.text:00402E5C                 jmp     loc_402D5D
.text:00402E61 ; ---------------------------------------------------------------------------
.text:00402E61
.text:00402E61 loc_402E61:                             ; CODE XREF: sub_402CC0+85↑j
.text:00402E61                 call    _errno
.text:00402E66                 mov     [esp+2Ch+Size], offset aS ; "%s"
.text:00402E6E                 mov     ecx, ds:dword_412020
.text:00402E74                 mov     dword ptr [esp+2Ch+var_20], ecx ; char
.text:00402E78                 mov     edx, [eax]
.text:00402E7A                 mov     [esp+2Ch+FileHandle], 1 ; Code
.text:00402E81                 mov     [esp+2Ch+OpenFlag], edx ; ErrorMessage
.text:00402E85                 call    sub_407720
.text:00402E8A                 jmp     loc_402D4B
.text:00402E8A ; ---------------------------------------------------------------------------
.text:00402E8F                 align 10h
.text:00402E90
.text:00402E90 loc_402E90:                             ; CODE XREF: sub_402CC0+68↑j
.text:00402E90                 mov     ebx, eax
.text:00402E92                 jmp     loc_402D2E
.text:00402E97 ; ---------------------------------------------------------------------------
.text:00402E97
.text:00402E97 loc_402E97:                             ; CODE XREF: sub_402CC0+60↑j
.text:00402E97                 cmp     ebx, esi
.text:00402E99                 jbe     loc_402D26
.text:00402E9F                 cmp     byte ptr [ebx-1], 0Ah
.text:00402EA3                 jz      loc_402D26
.text:00402EA9                 lea     esi, [esi+0]
.text:00402EB0
.text:00402EB0 loc_402EB0:                             ; CODE XREF: sub_402CC0+1FD↓j
.text:00402EB0                 dec     ebx
.text:00402EB1                 cmp     ebx, esi
.text:00402EB3                 jbe     loc_402D26
.text:00402EB9                 cmp     byte ptr [ebx-1], 0Ah
.text:00402EBD                 jnz     short loc_402EB0
.text:00402EBF                 jmp     loc_402D26
.text:00402EC4 ; ---------------------------------------------------------------------------
.text:00402EC4
.text:00402EC4 loc_402EC4:                             ; CODE XREF: sub_402CC0+44↑j
.text:00402EC4                 call    _errno
.text:00402EC9                 mov     [esp+2Ch+Size], offset aS ; "%s"
.text:00402ED1                 mov     ecx, ds:FileName
.text:00402ED7                 mov     dword ptr [esp+2Ch+var_20], ecx ; char
.text:00402EDB                 mov     ebp, [eax]
.text:00402EDD                 mov     [esp+2Ch+FileHandle], 1 ; Code
.text:00402EE4                 mov     [esp+2Ch+OpenFlag], ebp ; ErrorMessage
.text:00402EE8                 call    sub_407720
.text:00402EED                 jmp     loc_402D0A
.text:00402EED sub_402CC0      endp
.text:00402EED
.text:00402EED ; ---------------------------------------------------------------------------
.text:00402EF2                 align 10h
.text:00402F00 aOutputFileSuff db 'Output file suffixes exhausted',0
.text:00402F00                                         ; DATA XREF: sub_402F20:loc_402F8B↓o
.text:00402F1F                 align 10h
.text:00402F20
.text:00402F20 ; =============== S U B R O U T I N E =======================================
.text:00402F20
.text:00402F20
.text:00402F20 sub_402F20      proc near               ; CODE XREF: sub_402600:loc_402698↑p
.text:00402F20                                         ; sub_402600:loc_4027E7↑p ...
.text:00402F20
.text:00402F20 Str             = dword ptr -1Ch
.text:00402F20 Src             = dword ptr -18h
.text:00402F20 Size            = dword ptr -14h
.text:00402F20 var_10          = byte ptr -10h
.text:00402F20
.text:00402F20                 push    esi
.text:00402F21                 push    ebx
.text:00402F22                 sub     esp, 14h
.text:00402F25                 mov     edx, ds:dword_412020
.text:00402F2B                 test    edx, edx
.text:00402F2D                 jz      loc_402FB6
.text:00402F33                 mov     ecx, Size
.text:00402F39                 dec     ecx
.text:00402F3A                 cmp     ecx, 0FFFFFFFFh
.text:00402F3D                 jz      short loc_402F8B
.text:00402F3F                 nop
.text:00402F40
.text:00402F40 loc_402F40:                             ; CODE XREF: sub_402F20+69↓j
.text:00402F40                 mov     ebx, ds:dword_412000
.text:00402F46                 mov     edx, off_411014 ; "abcdefghijklmnopqrstuvwxyz"
.text:00402F4C                 mov     esi, [ebx+ecx*4]
.text:00402F4F                 inc     esi
.text:00402F50                 mov     [ebx+ecx*4], esi
.text:00402F53                 movzx   ebx, byte ptr [esi+edx]
.text:00402F57                 mov     esi, ds:dword_412030
.text:00402F5D                 mov     [ecx+esi], bl
.text:00402F60                 mov     edx, ds:dword_412030
.text:00402F66                 cmp     byte ptr [ecx+edx], 0
.text:00402F6A                 jnz     short loc_402FB0
.text:00402F6C                 mov     ebx, ds:dword_412000
.text:00402F72                 mov     esi, off_411014 ; "abcdefghijklmnopqrstuvwxyz"
.text:00402F78                 mov     dword ptr [ebx+ecx*4], 0
.text:00402F7F                 movzx   ebx, byte ptr [esi]
.text:00402F82                 mov     [ecx+edx], bl
.text:00402F85                 dec     ecx
.text:00402F86                 cmp     ecx, 0FFFFFFFFh
.text:00402F89                 jnz     short loc_402F40
.text:00402F8B
.text:00402F8B loc_402F8B:                             ; CODE XREF: sub_402F20+1D↑j
.text:00402F8B                 mov     [esp+1Ch+Str], offset aOutputFileSuff ; "Output file suffixes exhausted"
.text:00402F92                 call    ds:libintl_gettext
.text:00402F98                 mov     [esp+1Ch+Src], 0 ; ErrorMessage
.text:00402FA0                 mov     [esp+1Ch+Str], 1 ; Code
.text:00402FA7                 mov     [esp+1Ch+Size], eax ; char *
.text:00402FAB                 call    sub_407720
.text:00402FB0
.text:00402FB0 loc_402FB0:                             ; CODE XREF: sub_402F20+4A↑j
.text:00402FB0                                         ; sub_402F20+179↓j
.text:00402FB0                 add     esp, 14h
.text:00402FB3                 pop     ebx
.text:00402FB4                 pop     esi
.text:00402FB5                 retn
.text:00402FB6 ; ---------------------------------------------------------------------------
.text:00402FB6
.text:00402FB6 loc_402FB6:                             ; CODE XREF: sub_402F20+D↑j
.text:00402FB6                 mov     ecx, ds:Str
.text:00402FBC                 mov     [esp+1Ch+Str], ecx ; Str
.text:00402FBF                 call    strlen
.text:00402FC4                 mov     edx, Size
.text:00402FCA                 mov     esi, eax
.text:00402FCC                 mov     ebx, eax
.text:00402FCE                 add     esi, edx
.text:00402FD0                 lea     eax, [esi+1]
.text:00402FD3                 cmp     eax, ebx
.text:00402FD5                 jb      loc_4030C6
.text:00402FDB                 mov     [esp+1Ch+Str], eax ; size_t
.text:00402FDE                 call    sub_405F60
.text:00402FE3                 mov     [esp+1Ch+Size], ebx ; Size
.text:00402FE7                 lea     ecx, [ebx+eax]
.text:00402FEA                 mov     ebx, ds:Str
.text:00402FF0                 mov     ds:dword_412030, ecx
.text:00402FF6                 mov     ds:dword_412020, eax
.text:00402FFB                 mov     [esp+1Ch+Src], ebx ; Src
.text:00402FFF                 mov     [esp+1Ch+Str], eax ; void *
.text:00403002                 call    memcpy
.text:00403007                 mov     ecx, Size
.text:0040300D                 mov     edx, off_411014 ; "abcdefghijklmnopqrstuvwxyz"
.text:00403013                 mov     [esp+1Ch+Size], ecx ; Size
.text:00403017                 mov     ecx, ds:dword_412030
.text:0040301D                 movsx   ebx, byte ptr [edx]
.text:00403020                 mov     [esp+1Ch+Str], ecx ; void *
.text:00403023                 mov     [esp+1Ch+Src], ebx ; Val
.text:00403027                 call    memset
.text:0040302C                 mov     edx, ds:dword_412020
.text:00403032                 mov     byte ptr [esi+edx], 0
.text:00403036                 mov     esi, Size
.text:0040303C                 mov     [esp+1Ch+Src], 4 ; size_t
.text:00403044                 mov     [esp+1Ch+Str], esi ; size_t
.text:00403047                 call    sub_4060A0
.text:0040304C                 mov     ds:dword_412000, eax
.text:00403051                 mov     ebx, ds:dword_412020
.text:00403057                 mov     [esp+1Ch+Str], ebx ; void *
.text:0040305A                 call    sub_405E50
.text:0040305F                 mov     [esp+1Ch+Str], eax
.text:00403062                 mov     esi, eax
.text:00403064                 mov     [esp+1Ch+Src], 3
.text:0040306C                 call    sub_40ADA0
.text:00403071                 test    eax, eax
.text:00403073                 mov     ebx, eax
.text:00403075                 js      short loc_403091
.text:00403077                 mov     edx, ds:dword_412020
.text:0040307D                 mov     [esp+1Ch+Str], edx
.text:00403080                 call    sub_405D30
.text:00403085                 mov     [esp+1Ch+Str], eax ; char *
.text:00403088                 call    sub_405D90
.text:0040308D                 cmp     ebx, eax
.text:0040308F                 jb      short loc_40309E
.text:00403091
.text:00403091 loc_403091:                             ; CODE XREF: sub_402F20+155↑j
.text:00403091                                         ; sub_402F20+1A4↓j
.text:00403091                 mov     [esp+1Ch+Str], esi ; Block
.text:00403094                 call    free
.text:00403099                 jmp     loc_402FB0
.text:0040309E ; ---------------------------------------------------------------------------
.text:0040309E
.text:0040309E loc_40309E:                             ; CODE XREF: sub_402F20+16F↑j
.text:0040309E                 mov     [esp+1Ch+Size], offset aS ; "%s"
.text:004030A6                 mov     ebx, ds:dword_412020
.text:004030AC                 mov     [esp+1Ch+Src], 26h ; '&' ; ErrorMessage
.text:004030B4                 mov     [esp+1Ch+Str], 1 ; Code
.text:004030BB                 mov     dword ptr [esp+1Ch+var_10], ebx ; char
.text:004030BF                 call    sub_407720
.text:004030C4                 jmp     short loc_403091
.text:004030C6 ; ---------------------------------------------------------------------------
.text:004030C6
.text:004030C6 loc_4030C6:                             ; CODE XREF: sub_402F20+B5↑j
.text:004030C6                 call    sub_406210
.text:004030C6 sub_402F20      endp
.text:004030C6
.text:004030C6 ; ---------------------------------------------------------------------------
.text:004030CB                 align 20h
.text:004030E0
.text:004030E0 ; =============== S U B R O U T I N E =======================================
.text:004030E0
.text:004030E0
.text:004030E0 sub_4030E0      proc near               ; DATA XREF: sub_403260+1B4↓o
.text:004030E0                 sub     eax, 9090002Dh
.text:004030E5                 nop
.text:004030E6                 nop
.text:004030E7                 nop
.text:004030E8                 nop
.text:004030E9                 nop
.text:004030EA                 nop
.text:004030EB                 nop
.text:004030EC                 nop
.text:004030ED                 nop
.text:004030EE                 nop
.text:004030EF                 nop
.text:004030F0                 nop
.text:004030F1                 nop
.text:004030F2                 nop
.text:004030F3                 nop
.text:004030F4                 nop
.text:004030F5                 nop
.text:004030F6                 nop
.text:004030F7                 nop
.text:004030F8                 nop
.text:004030F9                 nop
.text:004030FA                 nop
.text:004030FB                 nop
.text:004030FC                 nop
.text:004030FD                 nop
.text:004030FE                 nop
.text:004030FF                 nop
.text:004030FF sub_4030E0      endp
.text:004030FF
.text:00403100
.text:00403100 ; =============== S U B R O U T I N E =======================================
.text:00403100
.text:00403100
.text:00403100 sub_403100      proc near               ; DATA XREF: sub_403260+3CC↓o
.text:00403100                 and     eax, 6F203A73h
.text:00403105                 jo      short loc_40317B
.text:00403107                 imul    ebp, [edi+6Eh], 63256020h
.text:0040310E                 and     eax, 64202773h
.text:00403113                 outsd
.text:00403114                 db      65h
.text:00403114                 jnb     short loc_403185
.text:00403117                 daa
.text:00403118                 jz      short loc_40313A
.text:0040311A                 popa
.text:0040311B                 insb
.text:0040311C                 insb
.text:0040311D                 outsd
.text:0040311E                 ja      short sub_403140
.text:00403120                 popa
.text:00403121                 outsb
.text:00403122                 and     [ecx+72h], ah
.text:00403125                 db      67h
.text:00403125                 jnz     near ptr loc_403194+1
.text:00403128                 outs    dx, byte ptr gs:[esi]
.text:0040312A                 jz      short loc_403136
.text:0040312C                 add     [eax-6F6F6F70h], dl
.text:00403132                 nop
.text:00403133                 nop
.text:00403134                 nop
.text:00403135                 nop
.text:00403136
.text:00403136 loc_403136:                             ; CODE XREF: sub_403100+2A↑j
.text:00403136                 nop
.text:00403137                 nop
.text:00403138                 nop
.text:00403139                 nop
.text:0040313A
.text:0040313A loc_40313A:                             ; CODE XREF: sub_403100+18↑j
.text:0040313A                 nop
.text:0040313B                 nop
.text:0040313C                 nop
.text:0040313D                 nop
.text:0040313E                 nop
.text:0040313F                 nop
.text:0040313F sub_403100      endp ; sp-analysis failed
.text:0040313F
.text:00403140
.text:00403140 ; =============== S U B R O U T I N E =======================================
.text:00403140
.text:00403140
.text:00403140 sub_403140      proc near               ; CODE XREF: sub_403100+1E↑j
.text:00403140                                         ; DATA XREF: sub_403260:loc_403692↓o
.text:00403140                 and     eax, 6F203A73h
.text:00403145                 jo      short loc_4031BB
.text:00403147                 imul    ebp, [edi+6Eh], 2D2D6020h
.text:0040314E                 and     eax, 64202773h
.text:00403153                 outsd
.text:00403154                 db      65h
.text:00403154                 jnb     short loc_4031C5
.text:00403157                 daa
.text:00403158                 jz      short loc_40317A
.text:0040315A                 popa
.text:0040315B                 insb
.text:0040315C                 insb
.text:0040315D                 outsd
.text:0040315E                 ja      short sub_403180
.text:00403160                 popa
.text:00403161                 outsb
.text:00403162                 and     [ecx+72h], ah
.text:00403165                 db      67h
.text:00403165                 jnz     loc_4031D5
.text:00403168                 outs    dx, byte ptr gs:[esi]
.text:0040316A                 jz      short loc_403176
.text:0040316C                 add     [eax-6F6F6F70h], dl
.text:00403172                 nop
.text:00403173                 nop
.text:00403174                 nop
.text:00403175                 nop
.text:00403176
.text:00403176 loc_403176:                             ; CODE XREF: sub_403140+2A↑j
.text:00403176                 nop
.text:00403177                 nop
.text:00403178                 nop
.text:00403179                 nop
.text:0040317A
.text:0040317A loc_40317A:                             ; CODE XREF: sub_403140+18↑j
.text:0040317A                 nop
.text:0040317B
.text:0040317B loc_40317B:                             ; CODE XREF: sub_403100+5↑j
.text:0040317B                 nop
.text:0040317C                 nop
.text:0040317D                 nop
.text:0040317E                 nop
.text:0040317F                 nop
.text:0040317F sub_403140      endp ; sp-analysis failed
.text:0040317F
.text:00403180
.text:00403180 ; =============== S U B R O U T I N E =======================================
.text:00403180
.text:00403180
.text:00403180 sub_403180      proc near               ; CODE XREF: sub_403140+1E↑j
.text:00403180                                         ; DATA XREF: sub_403260:loc_403730↓o ...
.text:00403180                 and     eax, 6F203A73h
.text:00403185
.text:00403185 loc_403185:                             ; CODE XREF: sub_403100+14↑j
.text:00403185                 jo      short loc_4031FB
.text:00403187                 imul    ebp, [edi+6Eh], 73256020h
.text:0040318E                 daa
.text:0040318F                 and     [edx+65h], dh
.text:00403192                 jno     short near ptr loc_403208+1
.text:00403194
.text:00403194 loc_403194:                             ; CODE XREF: sub_403100+25↑j
.text:00403194                 imul    esi, [edx+65h], 6E612073h
.text:0040319B                 and     [ecx+72h], ah
.text:0040319E                 db      67h
.text:0040319E                 jnz     near ptr loc_40320C+2
.text:004031A1                 outs    dx, byte ptr gs:[esi]
.text:004031A3                 jz      short loc_4031AF
.text:004031A5                 add     [eax-6F6F6F70h], dl
.text:004031AB                 nop
.text:004031AC                 nop
.text:004031AD                 nop
.text:004031AE                 nop
.text:004031AF
.text:004031AF loc_4031AF:                             ; CODE XREF: sub_403180+23↑j
.text:004031AF                 nop
.text:004031B0                 nop
.text:004031B1                 nop
.text:004031B2                 nop
.text:004031B3                 nop
.text:004031B4                 nop
.text:004031B5                 nop
.text:004031B6                 nop
.text:004031B7                 nop
.text:004031B8                 nop
.text:004031B9                 nop
.text:004031BA                 nop
.text:004031BB
.text:004031BB loc_4031BB:                             ; CODE XREF: sub_403140+5↑j
.text:004031BB                 nop
.text:004031BC                 nop
.text:004031BD                 nop
.text:004031BE                 nop
.text:004031BF                 nop
.text:004031BF sub_403180      endp
.text:004031BF
.text:004031C0
.text:004031C0 ; =============== S U B R O U T I N E =======================================
.text:004031C0
.text:004031C0
.text:004031C0 sub_4031C0      proc near               ; DATA XREF: sub_403260+55E↓o
.text:004031C0                 and     eax, 75203A73h
.text:004031C5
.text:004031C5 loc_4031C5:                             ; CODE XREF: sub_403140+14↑j
.text:004031C5                 outsb
.text:004031C6                 jb      short near ptr loc_403227+6
.text:004031C8                 arpl    [edi+67h], bp
.text:004031CB                 outsb
.text:004031CC                 imul    edi, [edx+65h], 706F2064h
.text:004031D3                 jz      short loc_40323E
.text:004031D5
.text:004031D5 loc_4031D5:                             ; CODE XREF: sub_403140+25↑j
.text:004031D5                 outsd
.text:004031D6                 outsb
.text:004031D7                 and     [eax+25h], ah
.text:004031DA                 arpl    ds:0A2773h, sp
.text:004031E0
.text:004031E0 loc_4031E0:                             ; DATA XREF: sub_403260:loc_403801↓o
.text:004031E0                 add     [eax-6F6F6F70h], dl
.text:004031E6                 nop
.text:004031E7                 nop
.text:004031E8                 nop
.text:004031E9                 nop
.text:004031EA                 nop
.text:004031EB                 nop
.text:004031EC                 nop
.text:004031ED                 nop
.text:004031EE                 nop
.text:004031EF                 nop
.text:004031F0                 nop
.text:004031F1                 nop
.text:004031F2                 nop
.text:004031F3                 nop
.text:004031F4                 nop
.text:004031F5                 nop
.text:004031F6                 nop
.text:004031F7                 nop
.text:004031F8                 nop
.text:004031F9                 nop
.text:004031FA                 nop
.text:004031FB
.text:004031FB loc_4031FB:                             ; CODE XREF: sub_403180:loc_403185↑j
.text:004031FB                 nop
.text:004031FC                 nop
.text:004031FD                 nop
.text:004031FE                 nop
.text:004031FF                 nop
.text:004031FF sub_4031C0      endp
.text:004031FF
.text:00403200
.text:00403200 ; =============== S U B R O U T I N E =======================================
.text:00403200
.text:00403200
.text:00403200 sub_403200      proc near               ; DATA XREF: sub_403260:loc_40381A↓o
.text:00403200                 and     eax, 75203A73h
.text:00403205                 outsb
.text:00403206                 jb      short near ptr loc_403267+6
.text:00403208
.text:00403208 loc_403208:                             ; CODE XREF: sub_403180+12↑j
.text:00403208                 arpl    [edi+67h], bp
.text:0040320B                 outsb
.text:0040320C
.text:0040320C loc_40320C:                             ; CODE XREF: sub_403180+1E↑j
.text:0040320C                 imul    edi, [edx+65h], 706F2064h
.text:00403213                 jz      short loc_40327E
.text:00403215                 outsd
.text:00403216                 outsb
.text:00403217                 and     [eax+2Dh], ah
.text:0040321A                 sub     eax, 0A277325h
.text:0040321F                 add     ds:6F203A73h, ah
.text:00403225                 jo      short loc_40329B
.text:00403227
.text:00403227 loc_403227:                             ; CODE XREF: sub_4031C0+6↑j
.text:00403227                 imul    ebp, [edi+6Eh], 71657220h
.text:0040322E                 jnz     short loc_403299
.text:00403230                 jb      short loc_403297
.text:00403232                 jnb     short loc_403254
.text:00403234                 popa
.text:00403235                 outsb
.text:00403236                 and     [ecx+72h], ah
.text:00403239                 db      67h
.text:00403239                 jnz     near ptr loc_4032A7+2
.text:0040323C                 outs    dx, byte ptr gs:[esi]
.text:0040323E
.text:0040323E loc_40323E:                             ; CODE XREF: sub_4031C0+13↑j
.text:0040323E                 jz      short sub_403260
.text:00403240                 sub     eax, 6325202Dh
.text:00403245                 or      al, [eax]
.text:00403247                 nop
.text:00403248                 nop
.text:00403249                 nop
.text:0040324A                 nop
.text:0040324B                 nop
.text:0040324C                 nop
.text:0040324D                 nop
.text:0040324E                 nop
.text:0040324F                 nop
.text:00403250                 nop
.text:00403251                 nop
.text:00403252                 nop
.text:00403253                 nop
.text:00403254
.text:00403254 loc_403254:                             ; CODE XREF: sub_403200+32↑j
.text:00403254                 nop
.text:00403255                 nop
.text:00403256                 nop
.text:00403257                 nop
.text:00403258                 nop
.text:00403259                 nop
.text:0040325A                 nop
.text:0040325B                 nop
.text:0040325C                 nop
.text:0040325D                 nop
.text:0040325E                 nop
.text:0040325F                 nop
.text:0040325F sub_403200      endp ; sp-analysis failed
.text:0040325F
.text:00403260
.text:00403260 ; =============== S U B R O U T I N E =======================================
.text:00403260
.text:00403260
.text:00403260 ; int __cdecl sub_403260(char *Str2, size_t MaxCount, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, char *Str, int, int, int, int)
.text:00403260 sub_403260      proc near               ; CODE XREF: sub_403200:loc_40323E↑j
.text:00403260                                         ; DATA XREF: sub_403260:loc_403A73↓o
.text:00403260
.text:00403260 Str2            = dword ptr  4
.text:00403260 MaxCount        = dword ptr  8
.text:00403260 arg_8           = dword ptr  0Ch
.text:00403260 arg_C           = dword ptr  10h
.text:00403260 arg_1C          = dword ptr  20h
.text:00403260 arg_20          = dword ptr  24h
.text:00403260 arg_24          = dword ptr  28h
.text:00403260 arg_28          = dword ptr  2Ch
.text:00403260 arg_2C          = dword ptr  30h
.text:00403260 arg_30          = dword ptr  34h
.text:00403260 arg_34          = dword ptr  38h
.text:00403260 arg_38          = dword ptr  3Ch
.text:00403260 arg_3C          = dword ptr  40h
.text:00403260 arg_40          = dword ptr  44h
.text:00403260 arg_44          = dword ptr  48h
.text:00403260 arg_5C          = dword ptr  60h
.text:00403260 arg_60          = dword ptr  64h
.text:00403260 Str             = dword ptr  68h
.text:00403260 arg_68          = dword ptr  6Ch
.text:00403260 arg_6C          = dword ptr  70h
.text:00403260 arg_70          = dword ptr  74h
.text:00403260 arg_74          = dword ptr  78h
.text:00403260
.text:00403260 ; FUNCTION CHUNK AT .text:004032DB SIZE 00000053 BYTES
.text:00403260 ; FUNCTION CHUNK AT .text:00403344 SIZE 0000014B BYTES
.text:00403260 ; FUNCTION CHUNK AT .text:00403490 SIZE 0000023A BYTES
.text:00403260 ; FUNCTION CHUNK AT .text:004036D0 SIZE 00000099 BYTES
.text:00403260 ; FUNCTION CHUNK AT .text:00403770 SIZE 000000DF BYTES
.text:00403260 ; FUNCTION CHUNK AT .text:00403850 SIZE 0000025B BYTES
.text:00403260 ; FUNCTION CHUNK AT .text:00403AB0 SIZE 000001AE BYTES
.text:00403260 ; FUNCTION CHUNK AT .text:00403C60 SIZE 000000F9 BYTES
.text:00403260 ; FUNCTION CHUNK AT .text:00403D60 SIZE 000000CE BYTES
.text:00403260 ; FUNCTION CHUNK AT .text:00403E30 SIZE 0000003A BYTES
.text:00403260 ; FUNCTION CHUNK AT .text:00403E70 SIZE 0000000B BYTES
.text:00403260 ; FUNCTION CHUNK AT .text:00403E80 SIZE 00000019 BYTES
.text:00403260 ; FUNCTION CHUNK AT .text:00403EA0 SIZE 00000011 BYTES
.text:00403260
.text:00403260                 and     eax, 6F203A73h
.text:00403265                 jo      short loc_4032DB
.text:00403267
.text:00403267 loc_403267:                             ; CODE XREF: sub_403200+6↑j
.text:00403267                 imul    ebp, [edi+6Eh], 572D6020h
.text:0040326E                 and     ds:64202773h, ah
.text:00403274                 outsd
.text:00403275                 db      65h
.text:00403275                 jnb     short near ptr loc_4032E4+2
.text:00403278                 daa
.text:00403279                 jz      short loc_40329B
.text:0040327B                 popa
.text:0040327C                 insb
.text:0040327D                 insb
.text:0040327E
.text:0040327E loc_40327E:                             ; CODE XREF: sub_403200+13↑j
.text:0040327E                 outsd
.text:0040327F                 ja      short near ptr sub_4032A0+1
.text:00403281                 popa
.text:00403282                 outsb
.text:00403283                 and     [ecx+72h], ah
.text:00403286                 db      67h
.text:00403286                 jnz     near ptr loc_4032F5+1
.text:00403289                 outs    dx, byte ptr gs:[esi]
.text:0040328B                 jz      short loc_403297
.text:0040328D                 add     [eax-6F6F6F70h], dl
.text:00403293                 nop
.text:00403294                 nop
.text:00403295                 nop
.text:00403296                 nop
.text:00403297
.text:00403297 loc_403297:                             ; CODE XREF: sub_403200+30↑j
.text:00403297                                         ; sub_403260+2B↑j
.text:00403297                 nop
.text:00403298                 nop
.text:00403299
.text:00403299 loc_403299:                             ; CODE XREF: sub_403200+2E↑j
.text:00403299                 nop
.text:0040329A                 nop
.text:0040329B
.text:0040329B loc_40329B:                             ; CODE XREF: sub_403200+25↑j
.text:0040329B                                         ; sub_403260+19↑j
.text:0040329B                 nop
.text:0040329C                 nop
.text:0040329D                 nop
.text:0040329E                 nop
.text:0040329F                 nop
.text:0040329F sub_403260      endp ; sp-analysis failed
.text:0040329F
.text:004032A0
.text:004032A0 ; =============== S U B R O U T I N E =======================================
.text:004032A0
.text:004032A0
.text:004032A0 sub_4032A0      proc near               ; CODE XREF: sub_403260+1F↑j
.text:004032A0                                         ; DATA XREF: sub_403260:loc_403B5F↓o
.text:004032A0
.text:004032A0 arg_A4          = dword ptr  0A8h
.text:004032A0 arg_B8          = dword ptr  0BCh
.text:004032A0
.text:004032A0 ; FUNCTION CHUNK AT .text:0040333A SIZE 0000000A BYTES
.text:004032A0
.text:004032A0                 and     eax, 6F203A73h
.text:004032A5                 jo      short loc_40331B
.text:004032A7
.text:004032A7 loc_4032A7:                             ; CODE XREF: sub_403200+39↑j
.text:004032A7                 imul    ebp, [edi+6Eh], 572D6020h
.text:004032AE                 and     ds:69202773h, ah
.text:004032B4                 jnb     short near ptr loc_4032D3+3
.text:004032B6                 popa
.text:004032B7                 insd
.text:004032B8                 bound   ebp, [ecx+67h]
.text:004032BB                 jnz     short near ptr loc_403328+4
.text:004032BD                 jnz     short near ptr loc_403331+1
.text:004032BF                 or      al, [eax]
.text:004032C1
.text:004032C1 loc_4032C1:                             ; DATA XREF: sub_403260+A0F↓o
.text:004032C1                 and     eax, 69203A73h
.text:004032C6                 insb
.text:004032C7                 insb
.text:004032C8                 db      65h, 67h
.text:004032C8                 popa
.text:004032CB                 insb
.text:004032CC                 and     [edi+70h], ch
.text:004032CF                 jz      short loc_40333A
.text:004032D1                 outsd
.text:004032D2                 outsb
.text:004032D3
.text:004032D3 loc_4032D3:                             ; CODE XREF: sub_4032A0+14↑j
.text:004032D3                 and     ds:6325202Dh, ch
.text:004032D9                 or      al, [eax]
.text:004032D9 sub_4032A0      endp ; sp-analysis failed
.text:004032D9
.text:004032DB ; START OF FUNCTION CHUNK FOR sub_403260
.text:004032DB
.text:004032DB loc_4032DB:                             ; CODE XREF: sub_403260+5↑j
.text:004032DB                                         ; DATA XREF: sub_403260:loc_403CA7↓o
.text:004032DB                 and     eax, 69203A73h
.text:004032E0                 outsb
.text:004032E1                 jbe     short loc_403344
.text:004032E3                 insb
.text:004032E4
.text:004032E4 loc_4032E4:                             ; CODE XREF: sub_403260+15↑j
.text:004032E4                 imul    esp, [eax+6Fh], 6F697470h
.text:004032EC                 outsb
.text:004032ED                 and     ds:6325202Dh, ch
.text:004032F3                 or      al, [eax]
.text:004032F5
.text:004032F5 loc_4032F5:                             ; CODE XREF: sub_403260+26↑j
.text:004032F5                                         ; DATA XREF: sub_403260:loc_403CCE↓o
.text:004032F5                 and     eax, 6F203A73h
.text:004032FA                 jo      short near ptr loc_40336F+1
.text:004032FC                 imul    ebp, [edi+6Eh], 73256020h
.text:00403303                 daa
.text:00403304                 and     [ecx+73h], ch
.text:00403307                 and     [ecx+6Dh], ah
.text:0040330A                 bound   ebp, [ecx+67h]
.text:0040330D                 jnz     short near ptr loc_40337C+2
.text:0040330F                 jnz     short near ptr loc_403383+1
.text:00403311                 or      al, [eax]
.text:00403313
.text:00403313 loc_403313:                             ; DATA XREF: sub_403260:loc_403E80↓o
.text:00403313                 push    eax
.text:00403314                 dec     edi
.text:00403315                 push    ebx
.text:00403316                 dec     ecx
.text:00403317                 pop     eax
.text:00403318                 dec     esp
.text:00403319                 pop     ecx
.text:0040331A                 pop     edi
.text:0040331B
.text:0040331B loc_40331B:                             ; CODE XREF: sub_4032A0+5↑j
.text:0040331B                 inc     ebx
.text:0040331C                 dec     edi
.text:0040331D                 push    edx
.text:0040331E                 push    edx
.text:0040331F                 inc     ebp
.text:00403320                 inc     ebx
.text:00403321                 push    esp
.text:00403322                 add     [ebp+0B6h], cl
.text:00403328
.text:00403328 loc_403328:                             ; CODE XREF: sub_4032A0+1B↑j
.text:00403328                 add     [ebp+27BCh], cl
.text:00403328 ; END OF FUNCTION CHUNK FOR sub_403260
.text:00403328 ; ---------------------------------------------------------------------------
.text:0040332E                 dw 0
.text:00403330 ; ---------------------------------------------------------------------------
.text:00403330
.text:00403330 loc_403330:                             ; CODE XREF: sub_403EC0+5A↓p
.text:00403330                                         ; .text:00403FAA↓p ...
.text:00403330                 push    ebp
.text:00403331
.text:00403331 loc_403331:                             ; CODE XREF: sub_4032A0+1D↑j
.text:00403331                 mov     eax, 0FFFFFFFFh
.text:00403336                 push    edi
.text:00403337                 push    esi
.text:00403338                 push    ebx
.text:00403338 ; ---------------------------------------------------------------------------
.text:00403339                 db 83h
.text:0040333A ; ---------------------------------------------------------------------------
.text:0040333A ; START OF FUNCTION CHUNK FOR sub_4032A0
.text:0040333A
.text:0040333A loc_40333A:                             ; CODE XREF: sub_4032A0+2F↑j
.text:0040333A                 in      al, dx
.text:0040333B                 dec     esp
.text:0040333C                 mov     esi, [esp-40h+arg_A4]
.text:00403340                 mov     ebp, [esp-40h+arg_B8]
.text:00403340 ; END OF FUNCTION CHUNK FOR sub_4032A0
.text:00403344 ; START OF FUNCTION CHUNK FOR sub_403260
.text:00403344
.text:00403344 loc_403344:                             ; CODE XREF: sub_403260+81↑j
.text:00403344                 cmp     byte ptr [esi], 3Ah ; ':'
.text:00403347                 mov     ebx, [ebp+4]
.text:0040334A                 setz    dl
.text:0040334D                 movzx   ecx, dl
.text:00403350                 dec     ecx
.text:00403351                 and     ecx, ebx
.text:00403353                 mov     [esp+arg_44], ecx
.text:00403357                 mov     ecx, [esp+arg_5C]
.text:0040335B                 test    ecx, ecx
.text:0040335D                 jle     loc_403487
.text:00403363                 mov     dword ptr [ebp+0Ch], 0
.text:0040336A                 mov     ebx, [ebp+0]
.text:0040336D                 test    ebx, ebx
.text:0040336F
.text:0040336F loc_40336F:                             ; CODE XREF: sub_403260+9A↑j
.text:0040336F                 jz      loc_403EA0
.text:00403375                 mov     edi, [ebp+10h]
.text:00403378                 test    edi, edi
.text:0040337A                 jnz     short loc_4033D3
.text:0040337C
.text:0040337C loc_40337C:                             ; CODE XREF: sub_403260+AD↑j
.text:0040337C                 lea     esi, [esi+0]
.text:00403380
.text:00403380 loc_403380:                             ; CODE XREF: sub_403260+C4C↓j
.text:00403380                 mov     [ebp+24h], ebx
.text:00403383
.text:00403383 loc_403383:                             ; CODE XREF: sub_403260+AF↑j
.text:00403383                 mov     esi, [esp+Str]
.text:00403387                 mov     [ebp+20h], ebx
.text:0040338A                 mov     ecx, [esp+arg_74]
.text:0040338E                 xor     ebx, ebx
.text:00403390                 mov     dword ptr [ebp+14h], 0
.text:00403397                 test    ecx, ecx
.text:00403399                 jz      loc_403E80
.text:0040339F
.text:0040339F loc_40339F:                             ; CODE XREF: sub_403260+C34↓j
.text:0040339F                 mov     ebx, 1
.text:004033A4
.text:004033A4 loc_4033A4:                             ; CODE XREF: sub_403260+C2E↓j
.text:004033A4                 mov     [ebp+1Ch], ebx
.text:004033A7                 mov     ecx, [esp+Str]
.text:004033AB                 movzx   eax, byte ptr [ecx]
.text:004033AE                 cmp     al, 2Dh ; '-'
.text:004033B0                 jz      loc_403E70
.text:004033B6                 cmp     al, 2Bh ; '+'
.text:004033B8                 jz      loc_403E59
.text:004033BE                 xor     edx, edx
.text:004033C0                 test    ebx, ebx
.text:004033C2                 setz    dl
.text:004033C5                 mov     [ebp+18h], edx
.text:004033C8
.text:004033C8 loc_4033C8:                             ; CODE XREF: sub_403260+C05↓j
.text:004033C8                 mov     [esp+Str], esi
.text:004033CC                 mov     dword ptr [ebp+10h], 1
.text:004033D3
.text:004033D3 loc_4033D3:                             ; CODE XREF: sub_403260+11A↑j
.text:004033D3                 mov     eax, [ebp+14h]
.text:004033D6                 test    eax, eax
.text:004033D8                 jz      short loc_4033E3
.text:004033DA                 cmp     byte ptr [eax], 0
.text:004033DD                 jnz     loc_4034C0
.text:004033E3
.text:004033E3 loc_4033E3:                             ; CODE XREF: sub_403260+178↑j
.text:004033E3                 mov     ebx, [ebp+0]
.text:004033E6                 cmp     [ebp+24h], ebx
.text:004033E9                 jle     short loc_4033EE
.text:004033EB                 mov     [ebp+24h], ebx
.text:004033EE
.text:004033EE loc_4033EE:                             ; CODE XREF: sub_403260+189↑j
.text:004033EE                 cmp     [ebp+20h], ebx
.text:004033F1                 jle     short loc_4033F6
.text:004033F3                 mov     [ebp+20h], ebx
.text:004033F6
.text:004033F6 loc_4033F6:                             ; CODE XREF: sub_403260+191↑j
.text:004033F6                 cmp     dword ptr [ebp+18h], 1
.text:004033FA                 jz      loc_403DD0
.text:00403400
.text:00403400 loc_403400:                             ; CODE XREF: sub_403260+BE3↓j
.text:00403400                 cmp     ebx, [esp+arg_5C]
.text:00403404                 jz      loc_403DB4
.text:0040340A                 cld
.text:0040340B                 mov     ecx, [esp+arg_60]
.text:0040340F                 mov     edx, 3
.text:00403414                 mov     edi, offset sub_4030E0
.text:00403419                 mov     esi, [ecx+ebx*4]
.text:0040341C                 mov     ecx, edx
.text:0040341E                 repe cmpsb
.text:00403420                 jnz     short loc_40345C
.text:00403422                 mov     edx, [ebp+24h]
.text:00403425                 lea     eax, [ebx+1]
.text:00403428                 cmp     [ebp+20h], edx
.text:0040342B                 mov     [ebp+0], eax
.text:0040342E                 jz      loc_403DC8
.text:00403434                 cmp     edx, eax
.text:00403436                 jz      short loc_403450
.text:00403438                 mov     [esp+Str2], ebp
.text:0040343C                 mov     ebx, [esp+arg_60]
.text:00403440                 mov     [esp+0], ebx
.text:00403443                 call    sub_403FE0
.text:00403448                 nop
.text:00403449                 lea     esi, [esi+0]
.text:00403450
.text:00403450 loc_403450:                             ; CODE XREF: sub_403260+1D6↑j
.text:00403450                                         ; sub_403260+B6B↓j
.text:00403450                 mov     eax, [esp+arg_5C]
.text:00403454                 mov     ebx, eax
.text:00403456                 mov     [ebp+24h], eax
.text:00403459                 mov     [ebp+0], eax
.text:0040345C
.text:0040345C loc_40345C:                             ; CODE XREF: sub_403260+1C0↑j
.text:0040345C                 cmp     ebx, [esp+arg_5C]
.text:00403460                 jz      loc_403DB4
.text:00403466                 mov     esi, [esp+arg_60]
.text:0040346A                 mov     eax, [esi+ebx*4]
.text:0040346D                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00403470                 jz      short loc_403497
.text:00403472
.text:00403472 loc_403472:                             ; CODE XREF: sub_403260+23D↓j
.text:00403472                 mov     edx, [ebp+18h]
.text:00403475                 test    edx, edx
.text:00403477                 jz      short loc_403490
.text:00403479                 mov     [ebp+0Ch], eax
.text:0040347C                 lea     edi, [ebx+1]
.text:0040347F                 mov     eax, 1
.text:00403484                 mov     [ebp+0], edi
.text:00403487
.text:00403487 loc_403487:                             ; CODE XREF: sub_403260+FD↑j
.text:00403487                                         ; sub_403260+235↓j ...
.text:00403487                 add     esp, 4Ch
.text:0040348A                 pop     ebx
.text:0040348B                 pop     esi
.text:0040348C                 pop     edi
.text:0040348D                 pop     ebp
.text:0040348E                 retn
.text:0040348E ; END OF FUNCTION CHUNK FOR sub_403260
.text:0040348E ; ---------------------------------------------------------------------------
.text:0040348F                 align 10h
.text:00403490 ; START OF FUNCTION CHUNK FOR sub_403260
.text:00403490
.text:00403490 loc_403490:                             ; CODE XREF: sub_403260+217↑j
.text:00403490                                         ; sub_403260+B5A↓j ...
.text:00403490                 mov     eax, 0FFFFFFFFh
.text:00403495                 jmp     short loc_403487
.text:00403497 ; ---------------------------------------------------------------------------
.text:00403497
.text:00403497 loc_403497:                             ; CODE XREF: sub_403260+210↑j
.text:00403497                 movzx   edx, byte ptr [eax+1]
.text:0040349B                 test    dl, dl
.text:0040349D                 jz      short loc_403472
.text:0040349F                 mov     ebx, [esp+arg_68]
.text:004034A3                 xor     ecx, ecx
.text:004034A5                 test    ebx, ebx
.text:004034A7                 jz      short loc_4034B2
.text:004034A9                 cmp     dl, 2Dh ; '-'
.text:004034AC                 jz      loc_403DAA
.text:004034B2
.text:004034B2 loc_4034B2:                             ; CODE XREF: sub_403260+247↑j
.text:004034B2                                         ; sub_403260+B4F↓j
.text:004034B2                 lea     esi, [ecx+eax+1]
.text:004034B6                 mov     [ebp+14h], esi
.text:004034B9                 lea     esi, [esi+0]
.text:004034C0
.text:004034C0 loc_4034C0:                             ; CODE XREF: sub_403260+17D↑j
.text:004034C0                 mov     ecx, [esp+arg_68]
.text:004034C4                 test    ecx, ecx
.text:004034C6                 jz      loc_403850
.text:004034CC                 mov     edx, [ebp+0]
.text:004034CF                 mov     edi, [esp+arg_60]
.text:004034D3                 mov     eax, [edi+edx*4]
.text:004034D6                 movzx   edx, byte ptr [eax+1]
.text:004034DA                 cmp     dl, 2Dh ; '-'
.text:004034DD                 jz      short loc_4034F5
.text:004034DF                 mov     ebx, [esp+arg_70]
.text:004034E3                 test    ebx, ebx
.text:004034E5                 jz      loc_403850
.text:004034EB                 cmp     byte ptr [eax+2], 0
.text:004034EF                 jz      loc_403D8A
.text:004034F5
.text:004034F5 loc_4034F5:                             ; CODE XREF: sub_403260+27D↑j
.text:004034F5                                         ; sub_403260+B45↓j
.text:004034F5                 mov     [esp+arg_40], 0
.text:004034FD                 mov     ecx, [ebp+14h]
.text:00403500                 mov     [esp+arg_3C], 0
.text:00403508                 mov     [esp+arg_38], 0
.text:00403510                 mov     edi, ecx
.text:00403512                 mov     [esp+arg_34], 0FFFFFFFFh
.text:0040351A                 movzx   eax, byte ptr [ecx]
.text:0040351D                 test    al, al
.text:0040351F                 jz      short loc_40353C
.text:00403521                 cmp     al, 3Dh ; '='
.text:00403523                 jz      short loc_40353C
.text:00403525                 lea     esi, [esi+0]
.text:00403529                 lea     edi, [edi+0]
.text:00403530
.text:00403530 loc_403530:                             ; CODE XREF: sub_403260+2DA↓j
.text:00403530                 inc     edi
.text:00403531                 movzx   eax, byte ptr [edi]
.text:00403534                 test    al, al
.text:00403536                 jz      short loc_40353C
.text:00403538                 cmp     al, 3Dh ; '='
.text:0040353A                 jnz     short loc_403530
.text:0040353C
.text:0040353C loc_40353C:                             ; CODE XREF: sub_403260+2BF↑j
.text:0040353C                                         ; sub_403260+2C3↑j ...
.text:0040353C                 mov     [esp+arg_30], 0
.text:00403544                 mov     esi, [esp+arg_68]
.text:00403548                 mov     ebx, [esi]
.text:0040354A                 test    ebx, ebx
.text:0040354C                 mov     edx, ebx
.text:0040354E                 jz      loc_403770
.text:00403554                 lea     esi, [esi+0]
.text:0040355A                 lea     edi, [edi+0]
.text:00403560
.text:00403560 loc_403560:                             ; CODE XREF: sub_403260+32E↓j
.text:00403560                 mov     [esp+Str2], ecx ; Str2
.text:00403564                 mov     ebx, edi
.text:00403566                 sub     ebx, ecx
.text:00403568                 mov     [esp+MaxCount], ebx ; MaxCount
.text:0040356C                 mov     [esp+0], edx    ; Str1
.text:0040356F                 call    strncmp
.text:00403574                 test    eax, eax
.text:00403576                 jz      loc_403D06
.text:0040357C
.text:0040357C loc_40357C:                             ; CODE XREF: sub_403260+ADF↓j
.text:0040357C                                         ; sub_403260+AF4↓j ...
.text:0040357C                 inc     [esp+arg_30]
.text:00403580                 add     esi, 10h
.text:00403583                 mov     ecx, [esi]
.text:00403585                 test    ecx, ecx
.text:00403587                 mov     edx, ecx
.text:00403589                 jz      short loc_403590
.text:0040358B                 mov     ecx, [ebp+14h]
.text:0040358E                 jmp     short loc_403560
.text:00403590 ; ---------------------------------------------------------------------------
.text:00403590
.text:00403590 loc_403590:                             ; CODE XREF: sub_403260+329↑j
.text:00403590                                         ; sub_403260+B25↓j
.text:00403590                 mov     esi, [esp+arg_38]
.text:00403594                 test    esi, esi
.text:00403596                 jz      short loc_4035A4
.text:00403598                 mov     edx, [esp+arg_3C]
.text:0040359C                 test    edx, edx
.text:0040359E                 jz      loc_403CB0
.text:004035A4
.text:004035A4 loc_4035A4:                             ; CODE XREF: sub_403260+336↑j
.text:004035A4                 mov     eax, [esp+arg_40]
.text:004035A8                 test    eax, eax
.text:004035AA                 jz      loc_403770
.text:004035B0                 mov     ecx, [ebp+0]
.text:004035B3                 lea     eax, [ecx+1]
.text:004035B6                 mov     [ebp+0], eax
.text:004035B9                 cmp     byte ptr [edi], 0
.text:004035BC                 jz      loc_4036D0
.text:004035C2                 mov     ecx, [esp+arg_40]
.text:004035C6                 mov     esi, [ecx+4]
.text:004035C9                 test    esi, esi
.text:004035CB                 jz      short loc_403616
.text:004035CD                 lea     ebx, [edi+1]
.text:004035D0                 mov     [ebp+0Ch], ebx
.text:004035D3
.text:004035D3 loc_4035D3:                             ; CODE XREF: sub_403260+478↓j
.text:004035D3                                         ; sub_403260+494↓j
.text:004035D3                 mov     ebx, [ebp+14h]
.text:004035D6                 mov     [esp+0], ebx    ; Str
.text:004035D9                 call    strlen
.text:004035DE                 add     [ebp+14h], eax
.text:004035E1                 mov     esi, [esp+arg_6C]
.text:004035E5                 test    esi, esi
.text:004035E7                 jz      short loc_4035F3
.text:004035E9                 mov     ebp, [esp+arg_34]
.text:004035ED                 mov     ecx, [esp+arg_6C]
.text:004035F1                 mov     [ecx], ebp
.text:004035F3
.text:004035F3 loc_4035F3:                             ; CODE XREF: sub_403260+387↑j
.text:004035F3                 mov     eax, [esp+arg_40]
.text:004035F7                 mov     ecx, [eax+8]
.text:004035FA                 test    ecx, ecx
.text:004035FC                 jnz     short loc_40360A
.text:004035FE                 mov     ecx, [esp+arg_40]
.text:00403602
.text:00403602 loc_403602:                             ; CODE XREF: sub_403260+7F3↓j
.text:00403602                 mov     eax, [ecx+0Ch]
.text:00403605                 jmp     loc_403487
.text:0040360A ; ---------------------------------------------------------------------------
.text:0040360A
.text:0040360A loc_40360A:                             ; CODE XREF: sub_403260+39C↑j
.text:0040360A                                         ; sub_403260+7E9↓j
.text:0040360A                 mov     esi, [eax+0Ch]
.text:0040360D                 xor     eax, eax
.text:0040360F                 mov     [ecx], esi
.text:00403611                 jmp     loc_403487
.text:00403616 ; ---------------------------------------------------------------------------
.text:00403616
.text:00403616 loc_403616:                             ; CODE XREF: sub_403260+36B↑j
.text:00403616                 mov     edi, [esp+arg_44]
.text:0040361A                 test    edi, edi
.text:0040361C                 jz      short loc_403670
.text:0040361E                 mov     esi, [esp+arg_60]
.text:00403622                 mov     edx, [esi+eax*4-4]
.text:00403626                 cmp     byte ptr [edx+1], 2Dh ; '-'
.text:0040362A                 jz      short loc_403692
.text:0040362C                 mov     dword ptr [esp+0], offset sub_403100
.text:00403633                 call    ds:libintl_gettext
.text:00403639                 mov     edx, [esp+arg_40]
.text:0040363D                 mov     edi, [edx]
.text:0040363F                 mov     [esp+arg_C], edi
.text:00403643                 mov     ebx, [ebp+0]
.text:00403646                 mov     edi, [esp+arg_60]
.text:0040364A                 mov     ecx, [edi+ebx*4-4]
.text:0040364E                 movsx   esi, byte ptr [ecx]
.text:00403651                 mov     ecx, ds:_iob
.text:00403657                 add     ecx, 40h ; '@'
.text:0040365A                 mov     [esp+arg_8], esi
.text:0040365E                 mov     ebx, [edi]
.text:00403660                 mov     [esp+Str2], eax ; Format
.text:00403664                 mov     [esp+0], ecx    ; Stream
.text:00403667                 mov     [esp+MaxCount], ebx
.text:0040366B                 call    fprintf
.text:00403670
.text:00403670 loc_403670:                             ; CODE XREF: sub_403260+3BC↑j
.text:00403670                                         ; sub_403260+468↓j
.text:00403670                 mov     ecx, [ebp+14h]
.text:00403673                 mov     [esp+0], ecx    ; Str
.text:00403676                 call    strlen
.text:0040367B                 add     [ebp+14h], eax
.text:0040367E                 mov     eax, [esp+arg_40]
.text:00403682                 mov     esi, [eax+0Ch]
.text:00403685                 mov     [ebp+8], esi
.text:00403688
.text:00403688 loc_403688:                             ; CODE XREF: sub_403260+5B5↓j
.text:00403688                                         ; sub_403260+80E↓j ...
.text:00403688                 mov     eax, 3Fh ; '?'
.text:0040368D                 jmp     loc_403487
.text:00403692 ; ---------------------------------------------------------------------------
.text:00403692
.text:00403692 loc_403692:                             ; CODE XREF: sub_403260+3CA↑j
.text:00403692                 mov     dword ptr [esp+0], offset sub_403140
.text:00403699                 call    ds:libintl_gettext
.text:0040369F                 mov     edx, [esp+arg_40]
.text:004036A3                 mov     edi, [esp+arg_60]
.text:004036A7                 mov     ecx, ds:_iob
.text:004036AD                 mov     esi, [edx]
.text:004036AF                 add     ecx, 40h ; '@'
.text:004036B2                 mov     [esp+arg_8], esi
.text:004036B6                 mov     ebx, [edi]
.text:004036B8                 mov     [esp+Str2], eax ; Format
.text:004036BC                 mov     [esp+0], ecx    ; Stream
.text:004036BF                 mov     [esp+MaxCount], ebx
.text:004036C3                 call    fprintf
.text:004036C8                 jmp     short loc_403670
.text:004036C8 ; END OF FUNCTION CHUNK FOR sub_403260
.text:004036C8 ; ---------------------------------------------------------------------------
.text:004036CA                 align 10h
.text:004036D0 ; START OF FUNCTION CHUNK FOR sub_403260
.text:004036D0
.text:004036D0 loc_4036D0:                             ; CODE XREF: sub_403260+35C↑j
.text:004036D0                 mov     ebx, [esp+arg_40]
.text:004036D4                 cmp     dword ptr [ebx+4], 1
.text:004036D8                 jnz     loc_4035D3
.text:004036DE                 cmp     eax, [esp+arg_5C]
.text:004036E2                 jge     short loc_4036F9
.text:004036E4                 mov     ebx, [esp+arg_60]
.text:004036E8                 lea     edi, [ecx+2]
.text:004036EB                 mov     [ebp+0], edi
.text:004036EE                 mov     esi, [ebx+eax*4]
.text:004036F1                 mov     [ebp+0Ch], esi
.text:004036F4                 jmp     loc_4035D3
.text:004036F9 ; ---------------------------------------------------------------------------
.text:004036F9
.text:004036F9 loc_4036F9:                             ; CODE XREF: sub_403260+482↑j
.text:004036F9                 mov     edx, [esp+arg_44]
.text:004036FD                 test    edx, edx
.text:004036FF                 jnz     short loc_403730
.text:00403701
.text:00403701 loc_403701:                             ; CODE XREF: sub_403260+507↓j
.text:00403701                 mov     edx, [ebp+14h]
.text:00403704                 mov     [esp+0], edx    ; Str
.text:00403707                 call    strlen
.text:0040370C                 add     [ebp+14h], eax
.text:0040370F                 mov     eax, [esp+arg_40]
.text:00403713                 mov     edi, [eax+0Ch]
.text:00403716                 mov     [ebp+8], edi
.text:00403719
.text:00403719 loc_403719:                             ; CODE XREF: sub_403260+892↓j
.text:00403719                 mov     ebp, [esp+Str]
.text:0040371D                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:00403721                 setnz   bl
.text:00403724                 movzx   esi, bl
.text:00403727                 lea     eax, [esi+esi*4+3Ah]
.text:0040372B                 jmp     loc_403487
.text:00403730 ; ---------------------------------------------------------------------------
.text:00403730
.text:00403730 loc_403730:                             ; CODE XREF: sub_403260+49F↑j
.text:00403730                 mov     dword ptr [esp+0], offset sub_403180
.text:00403737                 call    ds:libintl_gettext
.text:0040373D                 mov     ecx, [ebp+0]
.text:00403740                 mov     esi, [esp+arg_60]
.text:00403744                 mov     ebx, [esi+ecx*4-4]
.text:00403748                 mov     ecx, ds:_iob
.text:0040374E                 mov     [esp+arg_8], ebx
.text:00403752                 mov     edi, [esi]
.text:00403754                 add     ecx, 40h ; '@'
.text:00403757                 mov     [esp+Str2], eax ; Format
.text:0040375B                 mov     [esp+0], ecx    ; Stream
.text:0040375E                 mov     [esp+MaxCount], edi
.text:00403762                 call    fprintf
.text:00403767                 jmp     short loc_403701
.text:00403767 ; END OF FUNCTION CHUNK FOR sub_403260
.text:00403767 ; ---------------------------------------------------------------------------
.text:00403769                 align 10h
.text:00403770 ; START OF FUNCTION CHUNK FOR sub_403260
.text:00403770
.text:00403770 loc_403770:                             ; CODE XREF: sub_403260+2EE↑j
.text:00403770                                         ; sub_403260+34A↑j
.text:00403770                 mov     eax, [esp+arg_70]
.text:00403774                 test    eax, eax
.text:00403776                 jz      short loc_4037A6
.text:00403778                 mov     ebx, [ebp+0]
.text:0040377B                 mov     esi, [esp+arg_60]
.text:0040377F                 mov     edi, [esi+ebx*4]
.text:00403782                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:00403786                 jz      short loc_4037A9
.text:00403788                 mov     ecx, [ebp+14h]
.text:0040378B                 mov     edx, [esp+Str]
.text:0040378F                 movsx   ebx, byte ptr [ecx]
.text:00403792                 mov     [esp+0], edx    ; Str
.text:00403795                 mov     [esp+Str2], ebx ; Val
.text:00403799                 call    strchr
.text:0040379E                 test    eax, eax
.text:004037A0                 jnz     loc_403850
.text:004037A6
.text:004037A6 loc_4037A6:                             ; CODE XREF: sub_403260+516↑j
.text:004037A6                 mov     ebx, [ebp+0]
.text:004037A9
.text:004037A9 loc_4037A9:                             ; CODE XREF: sub_403260+526↑j
.text:004037A9                 mov     eax, [esp+arg_44]
.text:004037AD                 test    eax, eax
.text:004037AF                 jz      short loc_403801
.text:004037B1                 mov     esi, [esp+arg_60]
.text:004037B5                 mov     edi, [esi+ebx*4]
.text:004037B8                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:004037BC                 jz      short loc_40381A
.text:004037BE                 mov     dword ptr [esp+0], offset sub_4031C0
.text:004037C5                 call    ds:libintl_gettext
.text:004037CB                 mov     edi, [ebp+14h]
.text:004037CE                 mov     [esp+arg_C], edi
.text:004037D2                 mov     ebx, [ebp+0]
.text:004037D5                 mov     edi, [esp+arg_60]
.text:004037D9                 mov     esi, [edi+ebx*4]
.text:004037DC                 movsx   ecx, byte ptr [esi]
.text:004037DF                 mov     esi, ds:_iob
.text:004037E5                 add     esi, 40h ; '@'
.text:004037E8                 mov     [esp+arg_8], ecx
.text:004037EC                 mov     ebx, [edi]
.text:004037EE                 mov     [esp+Str2], eax ; Format
.text:004037F2                 mov     [esp+0], esi    ; Stream
.text:004037F5                 mov     [esp+MaxCount], ebx
.text:004037F9                 call    fprintf
.text:004037FE
.text:004037FE loc_4037FE:                             ; CODE XREF: sub_403260+5ED↓j
.text:004037FE                 mov     ebx, [ebp+0]
.text:00403801
.text:00403801 loc_403801:                             ; CODE XREF: sub_403260+54F↑j
.text:00403801                 mov     dword ptr [ebp+14h], offset loc_4031E0
.text:00403808                 lea     edx, [ebx+1]
.text:0040380B                 mov     [ebp+0], edx
.text:0040380E
.text:0040380E loc_40380E:                             ; CODE XREF: sub_403260+A69↓j
.text:0040380E                 mov     dword ptr [ebp+8], 0
.text:00403815                 jmp     loc_403688
.text:0040381A ; ---------------------------------------------------------------------------
.text:0040381A
.text:0040381A loc_40381A:                             ; CODE XREF: sub_403260+55C↑j
.text:0040381A                 mov     dword ptr [esp+0], offset sub_403200
.text:00403821                 call    ds:libintl_gettext
.text:00403827                 mov     ecx, [ebp+14h]
.text:0040382A                 mov     edi, [esp+arg_60]
.text:0040382E                 mov     edx, ds:_iob
.text:00403834                 mov     [esp+arg_8], ecx
.text:00403838                 mov     ebx, [edi]
.text:0040383A                 add     edx, 40h ; '@'
.text:0040383D                 mov     [esp+Str2], eax ; Format
.text:00403841                 mov     [esp+MaxCount], ebx
.text:00403845                 mov     [esp+0], edx    ; Stream
.text:00403848                 call    fprintf
.text:0040384D                 jmp     short loc_4037FE
.text:0040384D ; END OF FUNCTION CHUNK FOR sub_403260
.text:0040384D ; ---------------------------------------------------------------------------
.text:0040384F                 align 10h
.text:00403850 ; START OF FUNCTION CHUNK FOR sub_403260
.text:00403850
.text:00403850 loc_403850:                             ; CODE XREF: sub_403260+266↑j
.text:00403850                                         ; sub_403260+285↑j ...
.text:00403850                 mov     esi, [ebp+14h]
.text:00403853                 movzx   ebx, byte ptr [esi]
.text:00403856                 inc     esi
.text:00403857                 mov     [ebp+14h], esi
.text:0040385A                 mov     ecx, [esp+Str]
.text:0040385E                 movsx   esi, bl
.text:00403861                 mov     [esp+Str2], esi ; Val
.text:00403865                 mov     edi, esi
.text:00403867                 mov     [esp+0], ecx    ; Str
.text:0040386A                 call    strchr
.text:0040386F                 mov     ecx, [ebp+14h]
.text:00403872                 cmp     byte ptr [ecx], 0
.text:00403875                 jnz     short loc_40387A
.text:00403877                 inc     dword ptr [ebp+0]
.text:0040387A
.text:0040387A loc_40387A:                             ; CODE XREF: sub_403260+615↑j
.text:0040387A                 test    eax, eax
.text:0040387C                 jz      loc_403C60
.text:00403882                 cmp     bl, 3Ah ; ':'
.text:00403885                 jz      loc_403C60
.text:0040388B                 cmp     byte ptr [eax], 57h ; 'W'
.text:0040388E                 jz      loc_403946
.text:00403894                 movzx   edx, byte ptr [eax+1]
.text:00403898
.text:00403898 loc_403898:                             ; CODE XREF: sub_403260+6ED↓j
.text:00403898                 cmp     dl, 3Ah ; ':'
.text:0040389B                 jz      short loc_4038A4
.text:0040389D
.text:0040389D loc_40389D:                             ; CODE XREF: sub_403260+660↓j
.text:0040389D                 mov     eax, esi
.text:0040389F                 jmp     loc_403487
.text:004038A4 ; ---------------------------------------------------------------------------
.text:004038A4
.text:004038A4 loc_4038A4:                             ; CODE XREF: sub_403260+63B↑j
.text:004038A4                 cmp     byte ptr [eax+2], 3Ah ; ':'
.text:004038A8                 jz      loc_403931
.text:004038AE                 cmp     byte ptr [ecx], 0
.text:004038B1                 jz      short loc_4038C2
.text:004038B3
.text:004038B3 loc_4038B3:                             ; CODE XREF: sub_403260+6D4↓j
.text:004038B3                 inc     dword ptr [ebp+0]
.text:004038B6                 mov     [ebp+0Ch], ecx
.text:004038B9
.text:004038B9 loc_4038B9:                             ; CODE XREF: sub_403260+67B↓j
.text:004038B9                                         ; sub_403260+696↓j ...
.text:004038B9                 mov     dword ptr [ebp+14h], 0
.text:004038C0                 jmp     short loc_40389D
.text:004038C2 ; ---------------------------------------------------------------------------
.text:004038C2
.text:004038C2 loc_4038C2:                             ; CODE XREF: sub_403260+651↑j
.text:004038C2                 mov     ecx, [ebp+0]
.text:004038C5                 cmp     ecx, [esp+arg_5C]
.text:004038C9                 jz      short loc_4038DD
.text:004038CB                 mov     eax, [esp+arg_60]
.text:004038CF                 lea     edx, [ecx+1]
.text:004038D2                 mov     [ebp+0], edx
.text:004038D5                 mov     ebx, [eax+ecx*4]
.text:004038D8                 mov     [ebp+0Ch], ebx
.text:004038DB                 jmp     short loc_4038B9
.text:004038DD ; ---------------------------------------------------------------------------
.text:004038DD
.text:004038DD loc_4038DD:                             ; CODE XREF: sub_403260+669↑j
.text:004038DD                 mov     ecx, [esp+arg_44]
.text:004038E1                 test    ecx, ecx
.text:004038E3                 jnz     short loc_4038FF
.text:004038E5
.text:004038E5 loc_4038E5:                             ; CODE XREF: sub_403260+6CF↓j
.text:004038E5                 mov     [ebp+8], edi
.text:004038E8                 mov     edi, [esp+Str]
.text:004038EC                 cmp     byte ptr [edi], 3Ah ; ':'
.text:004038EF                 jz      short loc_4038F8
.text:004038F1                 mov     esi, 3Fh ; '?'
.text:004038F6                 jmp     short loc_4038B9
.text:004038F8 ; ---------------------------------------------------------------------------
.text:004038F8
.text:004038F8 loc_4038F8:                             ; CODE XREF: sub_403260+68F↑j
.text:004038F8                 mov     esi, 3Ah ; ':'
.text:004038FD                 jmp     short loc_4038B9
.text:004038FF ; ---------------------------------------------------------------------------
.text:004038FF
.text:004038FF loc_4038FF:                             ; CODE XREF: sub_403260+683↑j
.text:004038FF                 mov     dword ptr [esp+0], 403220h
.text:00403906                 call    ds:libintl_gettext
.text:0040390C                 mov     [esp+arg_8], edi
.text:00403910                 mov     ebx, [esp+arg_60]
.text:00403914                 mov     edx, ds:_iob
.text:0040391A                 mov     esi, [ebx]
.text:0040391C                 add     edx, 40h ; '@'
.text:0040391F                 mov     [esp+Str2], eax ; Format
.text:00403923                 mov     [esp+MaxCount], esi
.text:00403927                 mov     [esp+0], edx    ; Stream
.text:0040392A                 call    fprintf
.text:0040392F                 jmp     short loc_4038E5
.text:00403931 ; ---------------------------------------------------------------------------
.text:00403931
.text:00403931 loc_403931:                             ; CODE XREF: sub_403260+648↑j
.text:00403931                 cmp     byte ptr [ecx], 0
.text:00403934                 jnz     loc_4038B3
.text:0040393A                 mov     dword ptr [ebp+0Ch], 0
.text:00403941                 jmp     loc_4038B9
.text:00403946 ; ---------------------------------------------------------------------------
.text:00403946
.text:00403946 loc_403946:                             ; CODE XREF: sub_403260+62E↑j
.text:00403946                 movzx   edx, byte ptr [eax+1]
.text:0040394A                 cmp     dl, 3Bh ; ';'
.text:0040394D                 jnz     loc_403898
.text:00403953                 mov     [esp+arg_2C], 0
.text:0040395B                 mov     [esp+arg_28], 0
.text:00403963                 mov     [esp+arg_24], 0
.text:0040396B                 mov     [esp+arg_20], 0
.text:00403973                 cmp     byte ptr [ecx], 0
.text:00403976                 jz      loc_403BEB
.text:0040397C                 inc     dword ptr [ebp+0]
.text:0040397F                 mov     [ebp+0Ch], ecx
.text:00403982
.text:00403982 loc_403982:                             ; CODE XREF: sub_403260+9A4↓j
.text:00403982                 mov     edi, [ebp+0Ch]
.text:00403985                 mov     [ebp+14h], edi
.text:00403988                 movzx   eax, byte ptr [edi]
.text:0040398B                 test    al, al
.text:0040398D                 jz      short loc_40399F
.text:0040398F                 cmp     al, 3Dh ; '='
.text:00403991                 jz      short loc_40399F
.text:00403993
.text:00403993 loc_403993:                             ; CODE XREF: sub_403260+73D↓j
.text:00403993                 inc     edi
.text:00403994                 movzx   eax, byte ptr [edi]
.text:00403997                 test    al, al
.text:00403999                 jz      short loc_40399F
.text:0040399B                 cmp     al, 3Dh ; '='
.text:0040399D                 jnz     short loc_403993
.text:0040399F
.text:0040399F loc_40399F:                             ; CODE XREF: sub_403260+72D↑j
.text:0040399F                                         ; sub_403260+731↑j ...
.text:0040399F                 mov     [esp+arg_1C], 0
.text:004039A7                 mov     esi, [esp+arg_68]
.text:004039AB                 mov     eax, [esi]
.text:004039AD                 test    eax, eax
.text:004039AF                 jz      loc_403B30
.text:004039B5                 mov     ecx, eax
.text:004039B7
.text:004039B7 loc_4039B7:                             ; CODE XREF: sub_403260+783↓j
.text:004039B7                 mov     ebx, [ebp+14h]
.text:004039BA                 mov     eax, edi
.text:004039BC                 mov     [esp+0], ecx    ; Str1
.text:004039BF                 sub     eax, ebx
.text:004039C1                 mov     [esp+MaxCount], eax ; MaxCount
.text:004039C5                 mov     [esp+Str2], ebx ; Str2
.text:004039C9                 call    strncmp
.text:004039CE                 test    eax, eax
.text:004039D0                 jz      loc_403B97
.text:004039D6
.text:004039D6 loc_4039D6:                             ; CODE XREF: sub_403260+95C↓j
.text:004039D6                                         ; sub_403260+96D↓j
.text:004039D6                 inc     [esp+arg_1C]
.text:004039DA                 add     esi, 10h
.text:004039DD                 mov     edx, [esi]
.text:004039DF                 test    edx, edx
.text:004039E1                 mov     ecx, edx
.text:004039E3                 jnz     short loc_4039B7
.text:004039E5
.text:004039E5 loc_4039E5:                             ; CODE XREF: sub_403260+986↓j
.text:004039E5                 mov     esi, [esp+arg_24]
.text:004039E9                 test    esi, esi
.text:004039EB                 jz      short loc_4039F9
.text:004039ED                 mov     ebx, [esp+arg_28]
.text:004039F1                 test    ebx, ebx
.text:004039F3                 jz      loc_403B41
.text:004039F9
.text:004039F9 loc_4039F9:                             ; CODE XREF: sub_403260+78B↑j
.text:004039F9                 mov     esi, [esp+arg_2C]
.text:004039FD                 test    esi, esi
.text:004039FF                 jz      loc_403B30
.text:00403A05                 cmp     byte ptr [edi], 0
.text:00403A08                 jz      loc_403AB0
.text:00403A0E                 mov     ecx, [esp+arg_2C]
.text:00403A12                 mov     ebx, [ecx+4]
.text:00403A15                 test    ebx, ebx
.text:00403A17                 jz      short loc_403A58
.text:00403A19                 lea     edx, [edi+1]
.text:00403A1C                 mov     [ebp+0Ch], edx
.text:00403A1F
.text:00403A1F loc_403A1F:                             ; CODE XREF: sub_403260+858↓j
.text:00403A1F                                         ; sub_403260+877↓j
.text:00403A1F                 mov     edi, [ebp+14h]
.text:00403A22                 mov     [esp+0], edi    ; Str
.text:00403A25                 call    strlen
.text:00403A2A                 add     [ebp+14h], eax
.text:00403A2D                 mov     eax, [esp+arg_6C]
.text:00403A31                 test    eax, eax
.text:00403A33                 jz      short loc_403A40
.text:00403A35                 mov     edx, [esp+arg_20]
.text:00403A39                 mov     ebp, [esp+arg_6C]
.text:00403A3D                 mov     [ebp+0], edx
.text:00403A40
.text:00403A40 loc_403A40:                             ; CODE XREF: sub_403260+7D3↑j
.text:00403A40                 mov     eax, [esp+arg_2C]
.text:00403A44                 mov     ecx, [eax+8]
.text:00403A47                 test    ecx, ecx
.text:00403A49                 jnz     loc_40360A
.text:00403A4F                 mov     ecx, [esp+arg_2C]
.text:00403A53                 jmp     loc_403602
.text:00403A58 ; ---------------------------------------------------------------------------
.text:00403A58
.text:00403A58 loc_403A58:                             ; CODE XREF: sub_403260+7B7↑j
.text:00403A58                 mov     eax, [esp+arg_44]
.text:00403A5C                 test    eax, eax
.text:00403A5E                 jnz     short loc_403A73
.text:00403A60
.text:00403A60 loc_403A60:                             ; CODE XREF: sub_403260+849↓j
.text:00403A60                 mov     ecx, [ebp+14h]
.text:00403A63                 mov     [esp+0], ecx    ; Str
.text:00403A66                 call    strlen
.text:00403A6B                 add     [ebp+14h], eax
.text:00403A6E                 jmp     loc_403688
.text:00403A73 ; ---------------------------------------------------------------------------
.text:00403A73
.text:00403A73 loc_403A73:                             ; CODE XREF: sub_403260+7FE↑j
.text:00403A73                 mov     dword ptr [esp+0], offset sub_403260
.text:00403A7A                 call    ds:libintl_gettext
.text:00403A80                 mov     edx, [esp+arg_2C]
.text:00403A84                 mov     ebx, [esp+arg_60]
.text:00403A88                 mov     edi, [edx]
.text:00403A8A                 mov     [esp+arg_8], edi
.text:00403A8E                 mov     edi, ds:_iob
.text:00403A94                 mov     esi, [ebx]
.text:00403A96                 mov     [esp+Str2], eax ; Format
.text:00403A9A                 add     edi, 40h ; '@'
.text:00403A9D                 mov     [esp+MaxCount], esi
.text:00403AA1                 mov     [esp+0], edi    ; Stream
.text:00403AA4                 call    fprintf
.text:00403AA9                 jmp     short loc_403A60
.text:00403AA9 ; END OF FUNCTION CHUNK FOR sub_403260
.text:00403AA9 ; ---------------------------------------------------------------------------
.text:00403AAB                 align 10h
.text:00403AB0 ; START OF FUNCTION CHUNK FOR sub_403260
.text:00403AB0
.text:00403AB0 loc_403AB0:                             ; CODE XREF: sub_403260+7A8↑j
.text:00403AB0                 mov     esi, [esp+arg_2C]
.text:00403AB4                 cmp     dword ptr [esi+4], 1
.text:00403AB8                 jnz     loc_403A1F
.text:00403ABE                 mov     ecx, [ebp+0]
.text:00403AC1                 cmp     ecx, [esp+arg_5C]
.text:00403AC5                 jge     short loc_403ADC
.text:00403AC7                 mov     eax, [esp+arg_60]
.text:00403ACB                 lea     ebx, [ecx+1]
.text:00403ACE                 mov     [ebp+0], ebx
.text:00403AD1                 mov     edi, [eax+ecx*4]
.text:00403AD4                 mov     [ebp+0Ch], edi
.text:00403AD7                 jmp     loc_403A1F
.text:00403ADC ; ---------------------------------------------------------------------------
.text:00403ADC
.text:00403ADC loc_403ADC:                             ; CODE XREF: sub_403260+865↑j
.text:00403ADC                 mov     edx, [esp+arg_44]
.text:00403AE0                 test    edx, edx
.text:00403AE2                 jnz     short loc_403AF7
.text:00403AE4
.text:00403AE4 loc_403AE4:                             ; CODE XREF: sub_403260+8CE↓j
.text:00403AE4                 mov     edx, [ebp+14h]
.text:00403AE7                 mov     [esp+0], edx    ; Str
.text:00403AEA                 call    strlen
.text:00403AEF                 add     [ebp+14h], eax
.text:00403AF2                 jmp     loc_403719
.text:00403AF7 ; ---------------------------------------------------------------------------
.text:00403AF7
.text:00403AF7 loc_403AF7:                             ; CODE XREF: sub_403260+882↑j
.text:00403AF7                 mov     dword ptr [esp+0], offset sub_403180
.text:00403AFE                 call    ds:libintl_gettext
.text:00403B04                 mov     ecx, [ebp+0]
.text:00403B07                 mov     ebx, [esp+arg_60]
.text:00403B0B                 mov     edi, [ebx+ecx*4-4]
.text:00403B0F                 mov     ecx, ds:_iob
.text:00403B15                 mov     [esp+arg_8], edi
.text:00403B19                 mov     esi, [ebx]
.text:00403B1B                 add     ecx, 40h ; '@'
.text:00403B1E                 mov     [esp+Str2], eax ; Format
.text:00403B22                 mov     [esp+0], ecx    ; Stream
.text:00403B25                 mov     [esp+MaxCount], esi
.text:00403B29                 call    fprintf
.text:00403B2E                 jmp     short loc_403AE4
.text:00403B30 ; ---------------------------------------------------------------------------
.text:00403B30
.text:00403B30 loc_403B30:                             ; CODE XREF: sub_403260+74F↑j
.text:00403B30                                         ; sub_403260+79F↑j
.text:00403B30                 mov     dword ptr [ebp+14h], 0
.text:00403B37                 mov     eax, 57h ; 'W'
.text:00403B3C                 jmp     loc_403487
.text:00403B41 ; ---------------------------------------------------------------------------
.text:00403B41
.text:00403B41 loc_403B41:                             ; CODE XREF: sub_403260+793↑j
.text:00403B41                 mov     edi, [esp+arg_44]
.text:00403B45                 test    edi, edi
.text:00403B47                 jnz     short loc_403B5F
.text:00403B49
.text:00403B49 loc_403B49:                             ; CODE XREF: sub_403260+935↓j
.text:00403B49                 mov     edx, [ebp+14h]
.text:00403B4C                 mov     [esp+0], edx    ; Str
.text:00403B4F                 call    strlen
.text:00403B54                 add     [ebp+14h], eax
.text:00403B57                 inc     dword ptr [ebp+0]
.text:00403B5A                 jmp     loc_403688
.text:00403B5F ; ---------------------------------------------------------------------------
.text:00403B5F
.text:00403B5F loc_403B5F:                             ; CODE XREF: sub_403260+8E7↑j
.text:00403B5F                 mov     dword ptr [esp+0], offset sub_4032A0
.text:00403B66                 call    ds:libintl_gettext
.text:00403B6C                 mov     ecx, [ebp+0]
.text:00403B6F                 mov     ebx, [esp+arg_60]
.text:00403B73                 mov     edi, [ebx+ecx*4]
.text:00403B76                 mov     ecx, ds:_iob
.text:00403B7C                 mov     [esp+arg_8], edi
.text:00403B80                 mov     esi, [ebx]
.text:00403B82                 add     ecx, 40h ; '@'
.text:00403B85                 mov     [esp+Str2], eax ; Format
.text:00403B89                 mov     [esp+0], ecx    ; Stream
.text:00403B8C                 mov     [esp+MaxCount], esi
.text:00403B90                 call    fprintf
.text:00403B95                 jmp     short loc_403B49
.text:00403B97 ; ---------------------------------------------------------------------------
.text:00403B97
.text:00403B97 loc_403B97:                             ; CODE XREF: sub_403260+770↑j
.text:00403B97                 mov     edx, [ebp+14h]
.text:00403B9A                 mov     ebx, edi
.text:00403B9C                 mov     ecx, [esi]
.text:00403B9E                 sub     ebx, edx
.text:00403BA0                 mov     [esp+0], ecx    ; Str
.text:00403BA3                 call    strlen
.text:00403BA8                 cmp     ebx, eax
.text:00403BAA                 jz      short loc_403BD2
.text:00403BAC                 mov     ebx, [esp+arg_2C]
.text:00403BB0                 test    ebx, ebx
.text:00403BB2                 jz      short loc_403BC1
.text:00403BB4                 mov     [esp+arg_24], 1
.text:00403BBC                 jmp     loc_4039D6
.text:00403BC1 ; ---------------------------------------------------------------------------
.text:00403BC1
.text:00403BC1 loc_403BC1:                             ; CODE XREF: sub_403260+952↑j
.text:00403BC1                 mov     [esp+arg_2C], esi
.text:00403BC5                 mov     ecx, [esp+arg_1C]
.text:00403BC9                 mov     [esp+arg_20], ecx
.text:00403BCD                 jmp     loc_4039D6
.text:00403BD2 ; ---------------------------------------------------------------------------
.text:00403BD2
.text:00403BD2 loc_403BD2:                             ; CODE XREF: sub_403260+94A↑j
.text:00403BD2                 mov     [esp+arg_2C], esi
.text:00403BD6                 mov     eax, [esp+arg_1C]
.text:00403BDA                 mov     [esp+arg_28], 1
.text:00403BE2                 mov     [esp+arg_20], eax
.text:00403BE6                 jmp     loc_4039E5
.text:00403BEB ; ---------------------------------------------------------------------------
.text:00403BEB
.text:00403BEB loc_403BEB:                             ; CODE XREF: sub_403260+716↑j
.text:00403BEB                 mov     edx, [ebp+0]
.text:00403BEE                 cmp     edx, [esp+arg_5C]
.text:00403BF2                 jz      short loc_403C09
.text:00403BF4                 mov     ebx, [esp+arg_60]
.text:00403BF8                 lea     esi, [edx+1]
.text:00403BFB                 mov     [ebp+0], esi
.text:00403BFE                 mov     edi, [ebx+edx*4]
.text:00403C01                 mov     [ebp+0Ch], edi
.text:00403C04                 jmp     loc_403982
.text:00403C09 ; ---------------------------------------------------------------------------
.text:00403C09
.text:00403C09 loc_403C09:                             ; CODE XREF: sub_403260+992↑j
.text:00403C09                 mov     edi, [esp+arg_44]
.text:00403C0D                 test    edi, edi
.text:00403C0F                 jnz     short loc_403C2C
.text:00403C11
.text:00403C11 loc_403C11:                             ; CODE XREF: sub_403260+9FC↓j
.text:00403C11                 mov     [ebp+8], esi
.text:00403C14                 mov     ebp, [esp+Str]
.text:00403C18                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:00403C1C                 jz      short loc_403C28
.text:00403C1E                 mov     bl, 3Fh ; '?'
.text:00403C20
.text:00403C20 loc_403C20:                             ; CODE XREF: sub_403260+9CA↓j
.text:00403C20                 movsx   eax, bl
.text:00403C23                 jmp     loc_403487
.text:00403C28 ; ---------------------------------------------------------------------------
.text:00403C28
.text:00403C28 loc_403C28:                             ; CODE XREF: sub_403260+9BC↑j
.text:00403C28                 mov     bl, 3Ah ; ':'
.text:00403C2A                 jmp     short loc_403C20
.text:00403C2C ; ---------------------------------------------------------------------------
.text:00403C2C
.text:00403C2C loc_403C2C:                             ; CODE XREF: sub_403260+9AF↑j
.text:00403C2C                 mov     dword ptr [esp+0], 403220h
.text:00403C33                 call    ds:libintl_gettext
.text:00403C39                 mov     [esp+arg_8], esi
.text:00403C3D                 mov     edx, [esp+arg_60]
.text:00403C41                 mov     ecx, ds:_iob
.text:00403C47                 mov     ebx, [edx]
.text:00403C49                 add     ecx, 40h ; '@'
.text:00403C4C                 mov     [esp+Str2], eax ; Format
.text:00403C50                 mov     [esp+MaxCount], ebx
.text:00403C54                 mov     [esp+0], ecx    ; Stream
.text:00403C57                 call    fprintf
.text:00403C5C                 jmp     short loc_403C11
.text:00403C5C ; END OF FUNCTION CHUNK FOR sub_403260
.text:00403C5C ; ---------------------------------------------------------------------------
.text:00403C5E                 align 10h
.text:00403C60 ; START OF FUNCTION CHUNK FOR sub_403260
.text:00403C60
.text:00403C60 loc_403C60:                             ; CODE XREF: sub_403260+61C↑j
.text:00403C60                                         ; sub_403260+625↑j
.text:00403C60                 mov     eax, [esp+arg_44]
.text:00403C64                 test    eax, eax
.text:00403C66                 jz      short loc_403C9F
.text:00403C68                 mov     ebx, [ebp+1Ch]
.text:00403C6B                 test    ebx, ebx
.text:00403C6D                 jz      short loc_403CA7
.text:00403C6F                 mov     dword ptr [esp+0], offset loc_4032C1
.text:00403C76
.text:00403C76 loc_403C76:                             ; CODE XREF: sub_403260+A4E↓j
.text:00403C76                 call    ds:libintl_gettext
.text:00403C7C                 mov     [esp+arg_8], esi
.text:00403C80                 mov     ebx, [esp+arg_60]
.text:00403C84                 mov     edx, ds:_iob
.text:00403C8A                 mov     esi, [ebx]
.text:00403C8C                 add     edx, 40h ; '@'
.text:00403C8F                 mov     [esp+Str2], eax ; Format
.text:00403C93                 mov     [esp+MaxCount], esi
.text:00403C97                 mov     [esp+0], edx    ; Stream
.text:00403C9A                 call    fprintf
.text:00403C9F
.text:00403C9F loc_403C9F:                             ; CODE XREF: sub_403260+A06↑j
.text:00403C9F                 mov     [ebp+8], edi
.text:00403CA2                 jmp     loc_403688
.text:00403CA7 ; ---------------------------------------------------------------------------
.text:00403CA7
.text:00403CA7 loc_403CA7:                             ; CODE XREF: sub_403260+A0D↑j
.text:00403CA7                 mov     dword ptr [esp+0], offset loc_4032DB
.text:00403CAE                 jmp     short loc_403C76
.text:00403CB0 ; ---------------------------------------------------------------------------
.text:00403CB0
.text:00403CB0 loc_403CB0:                             ; CODE XREF: sub_403260+33E↑j
.text:00403CB0                 mov     edi, [esp+arg_44]
.text:00403CB4                 test    edi, edi
.text:00403CB6                 jnz     short loc_403CCE
.text:00403CB8
.text:00403CB8 loc_403CB8:                             ; CODE XREF: sub_403260+AA4↓j
.text:00403CB8                 mov     edx, [ebp+14h]
.text:00403CBB                 mov     [esp+0], edx    ; Str
.text:00403CBE                 call    strlen
.text:00403CC3                 add     [ebp+14h], eax
.text:00403CC6                 inc     dword ptr [ebp+0]
.text:00403CC9                 jmp     loc_40380E
.text:00403CCE ; ---------------------------------------------------------------------------
.text:00403CCE
.text:00403CCE loc_403CCE:                             ; CODE XREF: sub_403260+A56↑j
.text:00403CCE                 mov     dword ptr [esp+0], offset loc_4032F5
.text:00403CD5                 call    ds:libintl_gettext
.text:00403CDB                 mov     ebx, [ebp+0]
.text:00403CDE                 mov     edi, [esp+arg_60]
.text:00403CE2                 mov     ecx, [edi+ebx*4]
.text:00403CE5                 mov     ebx, ds:_iob
.text:00403CEB                 mov     [esp+arg_8], ecx
.text:00403CEF                 mov     esi, [edi]
.text:00403CF1                 add     ebx, 40h ; '@'
.text:00403CF4                 mov     [esp+Str2], eax ; Format
.text:00403CF8                 mov     [esp+0], ebx    ; Stream
.text:00403CFB                 mov     [esp+MaxCount], esi
.text:00403CFF                 call    fprintf
.text:00403D04                 jmp     short loc_403CB8
.text:00403D06 ; ---------------------------------------------------------------------------
.text:00403D06
.text:00403D06 loc_403D06:                             ; CODE XREF: sub_403260+316↑j
.text:00403D06                 mov     ecx, [ebp+14h]
.text:00403D09                 mov     ebx, edi
.text:00403D0B                 mov     edx, [esi]
.text:00403D0D                 sub     ebx, ecx
.text:00403D0F                 mov     [esp+0], edx    ; Str
.text:00403D12                 call    strlen
.text:00403D17                 cmp     ebx, eax
.text:00403D19                 jz      short loc_403D71
.text:00403D1B                 mov     ebx, [esp+arg_40]
.text:00403D1F                 test    ebx, ebx
.text:00403D21                 jz      short loc_403D60
.text:00403D23                 mov     edx, [esp+arg_70]
.text:00403D27                 test    edx, edx
.text:00403D29                 jnz     short loc_403D37
.text:00403D2B                 mov     ecx, [esp+arg_40]
.text:00403D2F                 mov     ebx, [esi+4]
.text:00403D32                 cmp     [ecx+4], ebx
.text:00403D35                 jz      short loc_403D44
.text:00403D37
.text:00403D37 loc_403D37:                             ; CODE XREF: sub_403260+AC9↑j
.text:00403D37                                         ; sub_403260+AEA↓j ...
.text:00403D37                 mov     [esp+arg_38], 1
.text:00403D3F                 jmp     loc_40357C
.text:00403D44 ; ---------------------------------------------------------------------------
.text:00403D44
.text:00403D44 loc_403D44:                             ; CODE XREF: sub_403260+AD5↑j
.text:00403D44                 mov     edx, [esi+8]
.text:00403D47                 cmp     [ecx+8], edx
.text:00403D4A                 jnz     short loc_403D37
.text:00403D4C                 mov     ebx, [esi+0Ch]
.text:00403D4F                 cmp     [ecx+0Ch], ebx
.text:00403D52                 jnz     short loc_403D37
.text:00403D54                 jmp     loc_40357C
.text:00403D54 ; END OF FUNCTION CHUNK FOR sub_403260
.text:00403D54 ; ---------------------------------------------------------------------------
.text:00403D59                 align 10h
.text:00403D60 ; START OF FUNCTION CHUNK FOR sub_403260
.text:00403D60
.text:00403D60 loc_403D60:                             ; CODE XREF: sub_403260+AC1↑j
.text:00403D60                 mov     [esp+arg_40], esi
.text:00403D64                 mov     eax, [esp+arg_30]
.text:00403D68                 mov     [esp+arg_34], eax
.text:00403D6C                 jmp     loc_40357C
.text:00403D71 ; ---------------------------------------------------------------------------
.text:00403D71
.text:00403D71 loc_403D71:                             ; CODE XREF: sub_403260+AB9↑j
.text:00403D71                 mov     [esp+arg_40], esi
.text:00403D75                 mov     ecx, [esp+arg_30]
.text:00403D79                 mov     [esp+arg_3C], 1
.text:00403D81                 mov     [esp+arg_34], ecx
.text:00403D85                 jmp     loc_403590
.text:00403D8A ; ---------------------------------------------------------------------------
.text:00403D8A
.text:00403D8A loc_403D8A:                             ; CODE XREF: sub_403260+28F↑j
.text:00403D8A                 mov     eax, [esp+Str]
.text:00403D8E                 movsx   esi, dl
.text:00403D91                 mov     [esp+Str2], esi ; Val
.text:00403D95                 mov     [esp+0], eax    ; Str
.text:00403D98                 call    strchr
.text:00403D9D                 test    eax, eax
.text:00403D9F                 jnz     loc_403850
.text:00403DA5                 jmp     loc_4034F5
.text:00403DAA ; ---------------------------------------------------------------------------
.text:00403DAA
.text:00403DAA loc_403DAA:                             ; CODE XREF: sub_403260+24C↑j
.text:00403DAA                 mov     ecx, 1
.text:00403DAF                 jmp     loc_4034B2
.text:00403DB4 ; ---------------------------------------------------------------------------
.text:00403DB4
.text:00403DB4 loc_403DB4:                             ; CODE XREF: sub_403260+1A4↑j
.text:00403DB4                                         ; sub_403260+200↑j
.text:00403DB4                 mov     eax, [ebp+20h]
.text:00403DB7                 cmp     eax, [ebp+24h]
.text:00403DBA                 jz      loc_403490
.text:00403DC0                 mov     [ebp+0], eax
.text:00403DC3                 jmp     loc_403490
.text:00403DC8 ; ---------------------------------------------------------------------------
.text:00403DC8
.text:00403DC8 loc_403DC8:                             ; CODE XREF: sub_403260+1CE↑j
.text:00403DC8                 mov     [ebp+20h], eax
.text:00403DCB                 jmp     loc_403450
.text:00403DD0 ; ---------------------------------------------------------------------------
.text:00403DD0
.text:00403DD0 loc_403DD0:                             ; CODE XREF: sub_403260+19A↑j
.text:00403DD0                 mov     edx, [ebp+20h]
.text:00403DD3                 mov     eax, [ebp+24h]
.text:00403DD6                 cmp     edx, eax
.text:00403DD8                 jz      short loc_403E50
.text:00403DDA                 cmp     eax, ebx
.text:00403DDC                 jz      short loc_403DF1
.text:00403DDE                 mov     [esp+Str2], ebp
.text:00403DE2                 mov     ebx, [esp+arg_60]
.text:00403DE6                 mov     [esp+0], ebx
.text:00403DE9                 call    sub_403FE0
.text:00403DEE                 mov     ebx, [ebp+0]
.text:00403DF1
.text:00403DF1 loc_403DF1:                             ; CODE XREF: sub_403260+B7C↑j
.text:00403DF1                                         ; sub_403260+BF2↓j ...
.text:00403DF1                 cmp     ebx, [esp+arg_5C]
.text:00403DF5                 jge     short loc_403E40
.text:00403DF7                 mov     esi, [esp+arg_60]
.text:00403DFB                 mov     eax, [esi+ebx*4]
.text:00403DFE                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00403E01                 jz      short loc_403E48
.text:00403E03                 lea     esi, [esi+0]
.text:00403E09                 lea     edi, [edi+0]
.text:00403E10
.text:00403E10 loc_403E10:                             ; CODE XREF: sub_403260+BCC↓j
.text:00403E10                                         ; sub_403260+BEC↓j
.text:00403E10                 lea     eax, [ebx+1]
.text:00403E13                 mov     ebx, eax
.text:00403E15                 mov     [ebp+0], eax
.text:00403E18                 cmp     eax, [esp+arg_5C]
.text:00403E1C                 jge     short loc_403E40
.text:00403E1E                 mov     edi, [esp+arg_60]
.text:00403E22                 mov     edx, [edi+eax*4]
.text:00403E25                 cmp     byte ptr [edx], 2Dh ; '-'
.text:00403E28                 jz      short loc_403E30
.text:00403E2A
.text:00403E2A loc_403E2A:                             ; CODE XREF: sub_403260+BD4↓j
.text:00403E2A                 mov     ebx, eax
.text:00403E2C                 jmp     short loc_403E10
.text:00403E2C ; END OF FUNCTION CHUNK FOR sub_403260
.text:00403E2C ; ---------------------------------------------------------------------------
.text:00403E2E                 align 10h
.text:00403E30 ; START OF FUNCTION CHUNK FOR sub_403260
.text:00403E30
.text:00403E30 loc_403E30:                             ; CODE XREF: sub_403260+BC8↑j
.text:00403E30                 cmp     byte ptr [edx+1], 0
.text:00403E34                 jz      short loc_403E2A
.text:00403E36                 lea     esi, [esi+0]
.text:00403E39                 lea     edi, [edi+0]
.text:00403E40
.text:00403E40 loc_403E40:                             ; CODE XREF: sub_403260+B95↑j
.text:00403E40                                         ; sub_403260+BBC↑j ...
.text:00403E40                 mov     [ebp+24h], ebx
.text:00403E43                 jmp     loc_403400
.text:00403E48 ; ---------------------------------------------------------------------------
.text:00403E48
.text:00403E48 loc_403E48:                             ; CODE XREF: sub_403260+BA1↑j
.text:00403E48                 cmp     byte ptr [eax+1], 0
.text:00403E4C                 jz      short loc_403E10
.text:00403E4E                 jmp     short loc_403E40
.text:00403E50 ; ---------------------------------------------------------------------------
.text:00403E50
.text:00403E50 loc_403E50:                             ; CODE XREF: sub_403260+B78↑j
.text:00403E50                 cmp     edx, ebx
.text:00403E52                 jz      short loc_403DF1
.text:00403E54                 mov     [ebp+20h], ebx
.text:00403E57                 jmp     short loc_403DF1
.text:00403E59 ; ---------------------------------------------------------------------------
.text:00403E59
.text:00403E59 loc_403E59:                             ; CODE XREF: sub_403260+158↑j
.text:00403E59                 mov     dword ptr [ebp+18h], 0
.text:00403E60                 mov     esi, [esp+Str]
.text:00403E64
.text:00403E64 loc_403E64:                             ; CODE XREF: sub_403260+C19↓j
.text:00403E64                 inc     esi
.text:00403E65                 jmp     loc_4033C8
.text:00403E65 ; END OF FUNCTION CHUNK FOR sub_403260
.text:00403E65 ; ---------------------------------------------------------------------------
.text:00403E6A                 align 10h
.text:00403E70 ; START OF FUNCTION CHUNK FOR sub_403260
.text:00403E70
.text:00403E70 loc_403E70:                             ; CODE XREF: sub_403260+150↑j
.text:00403E70                 mov     dword ptr [ebp+18h], 2
.text:00403E77                 mov     esi, ecx
.text:00403E79                 jmp     short loc_403E64
.text:00403E79 ; END OF FUNCTION CHUNK FOR sub_403260
.text:00403E79 ; ---------------------------------------------------------------------------
.text:00403E7B                 align 10h
.text:00403E80 ; START OF FUNCTION CHUNK FOR sub_403260
.text:00403E80
.text:00403E80 loc_403E80:                             ; CODE XREF: sub_403260+139↑j
.text:00403E80                 mov     dword ptr [esp+0], offset loc_403313 ; VarName
.text:00403E87                 call    getenv
.text:00403E8C                 test    eax, eax
.text:00403E8E                 jz      loc_4033A4
.text:00403E94                 jmp     loc_40339F
.text:00403E94 ; END OF FUNCTION CHUNK FOR sub_403260
.text:00403E94 ; ---------------------------------------------------------------------------
.text:00403E99                 align 10h
.text:00403EA0 ; START OF FUNCTION CHUNK FOR sub_403260
.text:00403EA0
.text:00403EA0 loc_403EA0:                             ; CODE XREF: sub_403260:loc_40336F↑j
.text:00403EA0                 mov     dword ptr [ebp+0], 1
.text:00403EA7                 mov     ebx, 1
.text:00403EAC                 jmp     loc_403380
.text:00403EAC ; END OF FUNCTION CHUNK FOR sub_403260
.text:00403EB1 ; ---------------------------------------------------------------------------
.text:00403EB1                 jmp     short sub_403EC0
.text:00403EB1 ; ---------------------------------------------------------------------------
.text:00403EB3                 align 10h
.text:00403EC0
.text:00403EC0 ; =============== S U B R O U T I N E =======================================
.text:00403EC0
.text:00403EC0
.text:00403EC0 sub_403EC0      proc near               ; CODE XREF: .text:00403EB1↑j
.text:00403EC0                                         ; sub_405A20+3A↓p ...
.text:00403EC0
.text:00403EC0 var_2C          = dword ptr -2Ch
.text:00403EC0 var_28          = dword ptr -28h
.text:00403EC0 var_24          = dword ptr -24h
.text:00403EC0 var_20          = dword ptr -20h
.text:00403EC0 var_1C          = dword ptr -1Ch
.text:00403EC0 var_18          = dword ptr -18h
.text:00403EC0 var_14          = dword ptr -14h
.text:00403EC0 var_10          = dword ptr -10h
.text:00403EC0 arg_0           = dword ptr  4
.text:00403EC0 arg_4           = dword ptr  8
.text:00403EC0 arg_8           = dword ptr  0Ch
.text:00403EC0 arg_C           = dword ptr  10h
.text:00403EC0 arg_10          = dword ptr  14h
.text:00403EC0 arg_14          = dword ptr  18h
.text:00403EC0 arg_18          = dword ptr  1Ch
.text:00403EC0
.text:00403EC0                 sub     esp, 2Ch
.text:00403EC3                 mov     edx, dword_411020
.text:00403EC9                 mov     [esp+2Ch+var_10], offset dword_412080
.text:00403ED1                 mov     ecx, dword_411024
.text:00403ED7                 mov     ds:dword_412080, edx
.text:00403EDD                 mov     edx, [esp+2Ch+arg_18]
.text:00403EE1                 mov     ds:dword_412084, ecx
.text:00403EE7                 mov     ecx, [esp+2Ch+arg_14]
.text:00403EEB                 mov     [esp+2Ch+var_14], edx
.text:00403EEF                 mov     edx, [esp+2Ch+arg_10]
.text:00403EF3                 mov     [esp+2Ch+var_18], ecx
.text:00403EF7                 mov     ecx, [esp+2Ch+arg_C]
.text:00403EFB                 mov     [esp+2Ch+var_1C], edx
.text:00403EFF                 mov     edx, [esp+2Ch+arg_8]
.text:00403F03                 mov     [esp+2Ch+var_20], ecx
.text:00403F07                 mov     ecx, [esp+2Ch+arg_4]
.text:00403F0B                 mov     [esp+2Ch+var_24], edx
.text:00403F0F                 mov     edx, [esp+2Ch+arg_0]
.text:00403F13                 mov     [esp+2Ch+var_28], ecx
.text:00403F17                 mov     [esp+2Ch+var_2C], edx
.text:00403F1A                 call    loc_403330
.text:00403F1F                 mov     ecx, ds:dword_412080
.text:00403F25                 mov     dword_411020, ecx
.text:00403F2B                 mov     ecx, ds:dword_41208C
.text:00403F31                 mov     ds:dword_412590, ecx
.text:00403F37                 mov     ecx, ds:dword_412088
.text:00403F3D                 mov     dword_411028, ecx
.text:00403F43                 add     esp, 2Ch
.text:00403F46                 retn
.text:00403F46 sub_403EC0      endp
.text:00403F46
.text:00403F46 ; ---------------------------------------------------------------------------
.text:00403F47                 align 10h
.text:00403F50                 sub     esp, 2Ch
.text:00403F53                 mov     edx, dword_411020
.text:00403F59                 mov     dword ptr [esp+1Ch], offset dword_412080
.text:00403F61                 mov     ecx, dword_411024
.text:00403F67                 mov     dword ptr [esp+18h], 1
.text:00403F6F                 mov     ds:dword_412080, edx
.text:00403F75                 mov     edx, [esp+38h]
.text:00403F79                 mov     ds:dword_412084, ecx
.text:00403F7F                 mov     ecx, [esp+34h]
.text:00403F83                 mov     [esp+8], edx
.text:00403F87                 mov     edx, [esp+30h]
.text:00403F8B                 mov     [esp+4], ecx
.text:00403F8F                 mov     dword ptr [esp+14h], 0
.text:00403F97                 mov     dword ptr [esp+10h], 0
.text:00403F9F                 mov     dword ptr [esp+0Ch], 0
.text:00403FA7                 mov     [esp], edx
.text:00403FAA                 call    loc_403330
.text:00403FAF                 mov     ecx, ds:dword_412080
.text:00403FB5                 mov     dword_411020, ecx
.text:00403FBB                 mov     ecx, ds:dword_41208C
.text:00403FC1                 mov     ds:dword_412590, ecx
.text:00403FC7                 mov     ecx, ds:dword_412088
.text:00403FCD                 mov     dword_411028, ecx
.text:00403FD3                 add     esp, 2Ch
.text:00403FD6                 retn
.text:00403FD6 ; ---------------------------------------------------------------------------
.text:00403FD7                 align 10h
.text:00403FE0
.text:00403FE0 ; =============== S U B R O U T I N E =======================================
.text:00403FE0
.text:00403FE0
.text:00403FE0 sub_403FE0      proc near               ; CODE XREF: sub_403260+1E3↑p
.text:00403FE0                                         ; sub_403260+B89↑p
.text:00403FE0
.text:00403FE0 var_2C          = dword ptr -2Ch
.text:00403FE0 var_28          = dword ptr -28h
.text:00403FE0 var_24          = dword ptr -24h
.text:00403FE0 var_20          = dword ptr -20h
.text:00403FE0 var_1C          = dword ptr -1Ch
.text:00403FE0 var_18          = dword ptr -18h
.text:00403FE0 var_14          = dword ptr -14h
.text:00403FE0 arg_0           = dword ptr  4
.text:00403FE0 arg_4           = dword ptr  8
.text:00403FE0
.text:00403FE0                 push    ebp
.text:00403FE1                 push    edi
.text:00403FE2                 push    esi
.text:00403FE3                 push    ebx
.text:00403FE4                 sub     esp, 1Ch
.text:00403FE7                 mov     ecx, [esp+2Ch+arg_4]
.text:00403FEB                 mov     eax, [esp+2Ch+arg_4]
.text:00403FEF                 mov     ebx, [esp+2Ch+arg_4]
.text:00403FF3                 mov     edx, [ecx+20h]
.text:00403FF6                 mov     edi, [esp+2Ch+arg_0]
.text:00403FFA                 mov     ecx, [ebx]
.text:00403FFC                 mov     [esp+2Ch+var_2C], edx
.text:00403FFF                 mov     [esp+2Ch+var_14], edx
.text:00404003                 mov     edx, [eax+24h]
.text:00404006                 mov     [esp+2Ch+var_28], ecx
.text:0040400A                 mov     [esp+2Ch+var_1C], ecx
.text:0040400E                 cmp     ecx, edx
.text:00404010                 mov     [esp+2Ch+var_18], edx
.text:00404014                 jle     short loc_404090
.text:00404016                 mov     esi, [esp+2Ch+var_2C]
.text:00404019                 cmp     edx, esi
.text:0040401B                 jle     short loc_404090
.text:0040401D                 lea     esi, [esi+0]
.text:00404020
.text:00404020 loc_404020:                             ; CODE XREF: sub_403FE0+A1↓j
.text:00404020                 mov     ebx, [esp+2Ch+var_1C]
.text:00404024                 mov     edx, [esp+2Ch+var_18]
.text:00404028                 mov     ebp, [esp+2Ch+var_18]
.text:0040402C                 mov     eax, [esp+2Ch+var_14]
.text:00404030                 sub     ebx, edx
.text:00404032                 mov     [esp+2Ch+var_20], ebx
.text:00404036                 sub     ebp, eax
.text:00404038                 cmp     ebx, ebp
.text:0040403A                 jle     short loc_4040B5
.text:0040403C                 xor     esi, esi
.text:0040403E                 cmp     esi, ebp
.text:00404040                 jge     short loc_40406D
.text:00404042                 mov     ecx, [esp+2Ch+var_1C]
.text:00404046                 sub     ecx, ebp
.text:00404048                 mov     [esp+2Ch+var_24], ecx
.text:0040404C                 lea     esi, [esi+0]
.text:00404050
.text:00404050 loc_404050:                             ; CODE XREF: sub_403FE0+8B↓j
.text:00404050                 mov     ecx, [esp+2Ch+var_14]
.text:00404054                 mov     edx, [esp+2Ch+var_24]
.text:00404058                 add     ecx, esi
.text:0040405A                 add     edx, esi
.text:0040405C                 mov     ebx, [edi+ecx*4]
.text:0040405F                 mov     eax, [edi+edx*4]
.text:00404062                 inc     esi
.text:00404063                 cmp     esi, ebp
.text:00404065                 mov     [edi+ecx*4], eax
.text:00404068                 mov     [edi+edx*4], ebx
.text:0040406B                 jl      short loc_404050
.text:0040406D
.text:0040406D loc_40406D:                             ; CODE XREF: sub_403FE0+60↑j
.text:0040406D                 sub     [esp+2Ch+var_1C], ebp
.text:00404071
.text:00404071 loc_404071:                             ; CODE XREF: sub_403FE0+107↓j
.text:00404071                 mov     eax, [esp+2Ch+var_18]
.text:00404075                 cmp     [esp+2Ch+var_1C], eax
.text:00404079                 jle     short loc_404090
.text:0040407B                 mov     ebp, [esp+2Ch+var_14]
.text:0040407F                 cmp     eax, ebp
.text:00404081                 jg      short loc_404020
.text:00404083                 lea     esi, [esi+0]
.text:00404089                 lea     edi, [edi+0]
.text:00404090
.text:00404090 loc_404090:                             ; CODE XREF: sub_403FE0+34↑j
.text:00404090                                         ; sub_403FE0+3B↑j ...
.text:00404090                 mov     esi, [esp+2Ch+var_28]
.text:00404094                 mov     ecx, [esp+2Ch+var_18]
.text:00404098                 mov     eax, [esp+2Ch+var_2C]
.text:0040409B                 mov     edi, [esp+2Ch+arg_4]
.text:0040409F                 mov     edx, [esp+2Ch+var_28]
.text:004040A3                 sub     esi, ecx
.text:004040A5                 add     esi, eax
.text:004040A7                 mov     [edi+20h], esi
.text:004040AA                 mov     [edi+24h], edx
.text:004040AD                 add     esp, 1Ch
.text:004040B0                 pop     ebx
.text:004040B1                 pop     esi
.text:004040B2                 pop     edi
.text:004040B3                 pop     ebp
.text:004040B4                 retn
.text:004040B5 ; ---------------------------------------------------------------------------
.text:004040B5
.text:004040B5 loc_4040B5:                             ; CODE XREF: sub_403FE0+5A↑j
.text:004040B5                 xor     esi, esi
.text:004040B7                 cmp     esi, [esp+2Ch+var_20]
.text:004040BB                 jge     short loc_4040DF
.text:004040BD                 lea     esi, [esi+0]
.text:004040C0
.text:004040C0 loc_4040C0:                             ; CODE XREF: sub_403FE0+FD↓j
.text:004040C0                 mov     ebx, [esp+2Ch+var_14]
.text:004040C4                 mov     ebp, [esp+2Ch+var_18]
.text:004040C8                 add     ebx, esi
.text:004040CA                 add     ebp, esi
.text:004040CC                 mov     edx, [edi+ebx*4]
.text:004040CF                 inc     esi
.text:004040D0                 cmp     esi, [esp+2Ch+var_20]
.text:004040D4                 mov     ecx, [edi+ebp*4]
.text:004040D7                 mov     [edi+ebx*4], ecx
.text:004040DA                 mov     [edi+ebp*4], edx
.text:004040DD                 jl      short loc_4040C0
.text:004040DF
.text:004040DF loc_4040DF:                             ; CODE XREF: sub_403FE0+DB↑j
.text:004040DF                 mov     esi, [esp+2Ch+var_20]
.text:004040E3                 add     [esp+2Ch+var_14], esi
.text:004040E7                 jmp     short loc_404071
.text:004040E7 sub_403FE0      endp
.text:004040E7
.text:004040E7 ; ---------------------------------------------------------------------------
.text:004040E9                 align 20h
.text:00404100                 sub     esp, 0Ch
.text:00404103                 mov     edx, [esp+14h]
.text:00404107                 mov     dword ptr [esp+4], 5
.text:0040410F                 mov     [esp+8], edx
.text:00404113                 mov     edx, [esp+10h]
.text:00404117                 mov     [esp], edx
.text:0040411A                 call    sub_407010
.text:0040411F                 add     esp, 0Ch
.text:00404122                 retn
.text:00404122 ; ---------------------------------------------------------------------------
.text:00404123                 align 10h
.text:00404130
.text:00404130 ; =============== S U B R O U T I N E =======================================
.text:00404130
.text:00404130
.text:00404130 ; int __cdecl sub_404130(char *)
.text:00404130 sub_404130      proc near               ; CODE XREF: sub_401A30+99F↑p
.text:00404130
.text:00404130 var_C           = dword ptr -0Ch
.text:00404130 var_8           = dword ptr -8
.text:00404130 var_4           = dword ptr -4
.text:00404130 arg_0           = dword ptr  4
.text:00404130
.text:00404130                 sub     esp, 0Ch
.text:00404133                 mov     edx, [esp+0Ch+arg_0]
.text:00404137                 mov     [esp+0Ch+var_8], 5 ; int
.text:0040413F                 mov     [esp+0Ch+var_C], 0 ; int
.text:00404146                 mov     [esp+0Ch+var_4], edx ; char *
.text:0040414A                 call    sub_407010
.text:0040414F                 add     esp, 0Ch
.text:00404152                 retn
.text:00404152 sub_404130      endp
.text:00404152
.text:00404152 ; ---------------------------------------------------------------------------
.text:00404153                 align 10h
.text:00404160 ; const char VarName[]
.text:00404160 VarName         db '_POSIX2_VERSION',0  ; DATA XREF: sub_404170+C↓o
.text:00404170
.text:00404170 ; =============== S U B R O U T I N E =======================================
.text:00404170
.text:00404170
.text:00404170 sub_404170      proc near               ; CODE XREF: sub_401A30:loc_402400↑p
.text:00404170
.text:00404170 VarName         = dword ptr -1Ch
.text:00404170 EndPtr          = dword ptr -18h
.text:00404170 Radix           = dword ptr -14h
.text:00404170 var_8           = dword ptr -8
.text:00404170 var_4           = dword ptr -4
.text:00404170
.text:00404170                 sub     esp, 1Ch
.text:00404173                 mov     [esp+1Ch+var_4], ebx
.text:00404177                 mov     ebx, 30A29h
.text:0040417C                 mov     [esp+1Ch+VarName], offset VarName ; "_POSIX2_VERSION"
.text:00404183                 call    getenv
.text:00404188                 test    eax, eax
.text:0040418A                 jz      short loc_404191
.text:0040418C                 cmp     byte ptr [eax], 0
.text:0040418F                 jnz     short loc_4041A0
.text:00404191
.text:00404191 loc_404191:                             ; CODE XREF: sub_404170+1A↑j
.text:00404191                                         ; sub_404170+4F↓j ...
.text:00404191                 mov     eax, ebx
.text:00404193                 mov     ebx, [esp+1Ch+var_4]
.text:00404197                 add     esp, 1Ch
.text:0040419A                 retn
.text:0040419A ; ---------------------------------------------------------------------------
.text:0040419B                 align 10h
.text:004041A0
.text:004041A0 loc_4041A0:                             ; CODE XREF: sub_404170+1F↑j
.text:004041A0                 mov     [esp+1Ch+Radix], 0Ah ; Radix
.text:004041A8                 lea     ecx, [esp+1Ch+var_8]
.text:004041AC                 mov     [esp+1Ch+EndPtr], ecx ; EndPtr
.text:004041B0                 mov     [esp+1Ch+VarName], eax ; String
.text:004041B3                 call    strtol
.text:004041B8                 mov     ecx, [esp+1Ch+var_8]
.text:004041BC                 cmp     byte ptr [ecx], 0
.text:004041BF                 jnz     short loc_404191
.text:004041C1                 mov     ebx, eax
.text:004041C3                 jmp     short loc_404191
.text:004041C3 sub_404170      endp
.text:004041C3
.text:004041C3 ; ---------------------------------------------------------------------------
.text:004041C5                 align 10h
.text:004041D0 aCopyrightC2005 db 'Copyright (C) 2005 Free Software Foundation, Inc.',0
.text:004041D0                                         ; DATA XREF: .data:Buffer↓o
.text:00404202 ; const char Format[]
.text:00404202 Format          db '%s (%s) %s',0Ah,0   ; DATA XREF: sub_4044C0+50↓o
.text:0040420E aWrittenByS     db 'Written by %s.',0Ah,0
.text:0040420E                                         ; DATA XREF: sub_4044C0:loc_404561↓o
.text:0040421E                 db 12h dup(90h)
.text:00404230 aThisIsFreeSoft db 'This is free software; see the source for copying conditions.  Th'
.text:00404230                                         ; DATA XREF: sub_4044C0+100↓o
.text:00404230                 db 'ere is NO',0Ah
.text:00404230                 db 'warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULA'
.text:00404230                 db 'R PURPOSE.',0Ah,0
.text:004042C8 aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.text:004042C8                                         ; DATA XREF: sub_4044C0:loc_404601↓o
.text:004042DF aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.text:004042DF                                         ; DATA XREF: sub_4044C0:loc_40460D↓o
.text:004042FB                 db 15h dup(90h)
.text:00404310 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.text:00404310                                         ; DATA XREF: sub_4044C0:loc_404619↓o
.text:00404310                 db 'and %s.',0Ah,0
.text:00404330 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.text:00404330                                         ; DATA XREF: sub_4044C0:loc_404625↓o
.text:00404330                 db '%s, and %s.',0Ah,0
.text:00404354                 db 1Ch dup(90h)
.text:00404370 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.text:00404370                                         ; DATA XREF: sub_4044C0:loc_404631↓o
.text:00404370                 db '%s, %s, and %s.',0Ah,0
.text:00404398                 db 18h dup(90h)
.text:004043B0 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.text:004043B0                                         ; DATA XREF: sub_4044C0:loc_40463D↓o
.text:004043B0                 db '%s, %s, %s, and %s.',0Ah,0
.text:004043DC                 db 14h dup(90h)
.text:004043F0 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.text:004043F0                                         ; DATA XREF: sub_4044C0:loc_404649↓o
.text:004043F0                 db '%s, %s, %s, %s,',0Ah
.text:004043F0                 db 'and %s.',0Ah,0
.text:00404420                 db 10h dup(90h)
.text:00404430 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.text:00404430                                         ; DATA XREF: sub_4044C0:loc_404655↓o
.text:00404430                 db '%s, %s, %s, %s,',0Ah
.text:00404430                 db '%s, and %s.',0Ah,0
.text:00404464                 align 10h
.text:00404470 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.text:00404470                                         ; DATA XREF: sub_4044C0:def_40452D↓o
.text:00404470                 db '%s, %s, %s, %s,',0Ah
.text:00404470                 db '%s, %s, and others.',0Ah,0
.text:004044AC ; const char aSS[]
.text:004044AC aSS             db '%s %s',0Ah,0        ; DATA XREF: sub_4044C0+1B5↓o
.text:004044B3                 align 10h
.text:004044C0
.text:004044C0 ; =============== S U B R O U T I N E =======================================
.text:004044C0
.text:004044C0
.text:004044C0 ; int __cdecl sub_4044C0(FILE *, FILE *, int, int, va_list)
.text:004044C0 sub_4044C0      proc near               ; CODE XREF: sub_404690+2A↓p
.text:004044C0
.text:004044C0 Stream          = dword ptr -2Ch
.text:004044C0 Format          = dword ptr -28h
.text:004044C0 ArgList         = dword ptr -24h
.text:004044C0 var_20          = dword ptr -20h
.text:004044C0 var_1C          = dword ptr -1Ch
.text:004044C0 var_14          = dword ptr -14h
.text:004044C0 arg_0           = dword ptr  4
.text:004044C0 arg_4           = dword ptr  8
.text:004044C0 arg_8           = dword ptr  0Ch
.text:004044C0 arg_C           = dword ptr  10h
.text:004044C0 arg_10          = dword ptr  14h
.text:004044C0
.text:004044C0                 push    ebp
.text:004044C1                 push    edi
.text:004044C2                 push    esi
.text:004044C3                 push    ebx
.text:004044C4                 sub     esp, 1Ch
.text:004044C7                 xor     ebx, ebx
.text:004044C9                 mov     edi, [esp+2Ch+arg_10]
.text:004044CD                 mov     edx, [esp+2Ch+arg_8]
.text:004044D1                 mov     esi, [esp+2Ch+arg_0]
.text:004044D5                 mov     eax, [edi]
.text:004044D7                 mov     ecx, [esp+2Ch+arg_4]
.text:004044DB                 mov     [esp+2Ch+var_14], edx
.text:004044DF                 mov     ebp, [esp+2Ch+arg_C]
.text:004044E3                 lea     edx, [edi+4]
.text:004044E6                 test    eax, eax
.text:004044E8                 jz      short loc_4044FC
.text:004044EA                 lea     esi, [esi+0]
.text:004044F0
.text:004044F0 loc_4044F0:                             ; CODE XREF: sub_4044C0+3A↓j
.text:004044F0                 mov     eax, edx
.text:004044F2                 inc     ebx
.text:004044F3                 mov     eax, [eax]
.text:004044F5                 add     edx, 4
.text:004044F8                 test    eax, eax
.text:004044FA                 jnz     short loc_4044F0
.text:004044FC
.text:004044FC loc_4044FC:                             ; CODE XREF: sub_4044C0+28↑j
.text:004044FC                 test    ecx, ecx
.text:004044FE                 jz      loc_40466D
.text:00404504                 mov     [esp+2Ch+var_1C], ebp
.text:00404508                 mov     edx, [esp+2Ch+var_14]
.text:0040450C                 mov     [esp+2Ch+ArgList], ecx
.text:00404510                 mov     [esp+2Ch+Format], offset Format ; "%s (%s) %s\n"
.text:00404518                 mov     [esp+2Ch+var_20], edx
.text:0040451C                 mov     [esp+2Ch+Stream], esi ; Stream
.text:0040451F                 call    fprintf
.text:00404524
.text:00404524 loc_404524:                             ; CODE XREF: sub_4044C0+1C9↓j
.text:00404524                 cmp     ebx, 9          ; switch 10 cases
.text:00404527                 ja      def_40452D      ; jumptable 0040452D default case
.text:0040452D                 jmp     ds:jpt_40452D[ebx*4] ; switch jump
.text:0040452D ; ---------------------------------------------------------------------------
.text:00404534 jpt_40452D      dd offset loc_40455C    ; DATA XREF: sub_4044C0+6D↑r
.text:00404534                 dd offset loc_404561    ; jump table for switch statement
.text:00404534                 dd offset loc_404601
.text:00404534                 dd offset loc_40460D
.text:00404534                 dd offset loc_404619
.text:00404534                 dd offset loc_404625
.text:00404534                 dd offset loc_404631
.text:00404534                 dd offset loc_40463D
.text:00404534                 dd offset loc_404649
.text:00404534                 dd offset loc_404655
.text:0040455C ; ---------------------------------------------------------------------------
.text:0040455C
.text:0040455C loc_40455C:                             ; CODE XREF: sub_4044C0+6D↑j
.text:0040455C                                         ; DATA XREF: sub_4044C0:jpt_40452D↑o
.text:0040455C                 call    abort           ; jumptable 0040452D case 0
.text:00404561 ; ---------------------------------------------------------------------------
.text:00404561
.text:00404561 loc_404561:                             ; CODE XREF: sub_4044C0+6D↑j
.text:00404561                                         ; DATA XREF: sub_4044C0:jpt_40452D↑o
.text:00404561                 mov     [esp+2Ch+Stream], offset aWrittenByS ; jumptable 0040452D case 1
.text:00404568                 nop
.text:00404569                 lea     esi, [esi+0]
.text:00404570
.text:00404570 loc_404570:                             ; CODE XREF: sub_4044C0+148↓j
.text:00404570                                         ; sub_4044C0+154↓j ...
.text:00404570                 call    ds:libintl_gettext
.text:00404576                 mov     [esp+2Ch+ArgList], edi ; ArgList
.text:0040457A                 mov     [esp+2Ch+Stream], esi ; Stream
.text:0040457D                 mov     [esp+2Ch+Format], eax ; Format
.text:00404581                 call    vfprintf
.text:00404586                 mov     ebx, [esi+4]
.text:00404589                 dec     ebx
.text:0040458A                 test    ebx, ebx
.text:0040458C                 mov     [esi+4], ebx
.text:0040458F                 js      short loc_4045EF
.text:00404591                 mov     edi, [esi]
.text:00404593                 mov     byte ptr [edi], 0Ah
.text:00404596                 inc     dword ptr [esi]
.text:00404598
.text:00404598 loc_404598:                             ; CODE XREF: sub_4044C0+13F↓j
.text:00404598                 mov     [esp+2Ch+Format], esi ; Stream
.text:0040459C                 mov     edx, Buffer
.text:004045A2                 mov     [esp+2Ch+Stream], edx ; Buffer
.text:004045A5                 call    fputs
.text:004045AA                 mov     ebp, [esi+4]
.text:004045AD                 dec     ebp
.text:004045AE                 test    ebp, ebp
.text:004045B0                 mov     [esi+4], ebp
.text:004045B3                 js      short loc_4045DD
.text:004045B5                 mov     ecx, [esi]
.text:004045B7                 mov     byte ptr [ecx], 0Ah
.text:004045BA                 inc     dword ptr [esi]
.text:004045BC
.text:004045BC loc_4045BC:                             ; CODE XREF: sub_4044C0+12D↓j
.text:004045BC                 mov     [esp+2Ch+arg_4], esi ; Stream
.text:004045C0                 mov     [esp+2Ch+Stream], offset aThisIsFreeSoft ; "This is free software; see the source f"...
.text:004045C7                 call    ds:libintl_gettext
.text:004045CD                 mov     [esp+2Ch+arg_0], eax ; Buffer
.text:004045D1                 add     esp, 1Ch
.text:004045D4                 pop     ebx
.text:004045D5                 pop     esi
.text:004045D6                 pop     edi
.text:004045D7                 pop     ebp
.text:004045D8                 jmp     fputs
.text:004045DD ; ---------------------------------------------------------------------------
.text:004045DD
.text:004045DD loc_4045DD:                             ; CODE XREF: sub_4044C0+F3↑j
.text:004045DD                 mov     [esp+2Ch+Format], esi ; File
.text:004045E1                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:004045E8                 call    _flsbuf
.text:004045ED                 jmp     short loc_4045BC
.text:004045EF ; ---------------------------------------------------------------------------
.text:004045EF
.text:004045EF loc_4045EF:                             ; CODE XREF: sub_4044C0+CF↑j
.text:004045EF                 mov     [esp+2Ch+Format], esi ; File
.text:004045F3                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:004045FA                 call    _flsbuf
.text:004045FF                 jmp     short loc_404598
.text:00404601 ; ---------------------------------------------------------------------------
.text:00404601
.text:00404601 loc_404601:                             ; CODE XREF: sub_4044C0+6D↑j
.text:00404601                                         ; DATA XREF: sub_4044C0:jpt_40452D↑o
.text:00404601                 mov     [esp+2Ch+Stream], offset aWrittenBySAndS ; jumptable 0040452D case 2
.text:00404608                 jmp     loc_404570
.text:0040460D ; ---------------------------------------------------------------------------
.text:0040460D
.text:0040460D loc_40460D:                             ; CODE XREF: sub_4044C0+6D↑j
.text:0040460D                                         ; DATA XREF: sub_4044C0:jpt_40452D↑o
.text:0040460D                 mov     [esp+2Ch+Stream], offset aWrittenBySSAnd ; jumptable 0040452D case 3
.text:00404614                 jmp     loc_404570
.text:00404619 ; ---------------------------------------------------------------------------
.text:00404619
.text:00404619 loc_404619:                             ; CODE XREF: sub_4044C0+6D↑j
.text:00404619                                         ; DATA XREF: sub_4044C0:jpt_40452D↑o
.text:00404619                 mov     [esp+2Ch+Stream], offset aWrittenBySSSAn ; jumptable 0040452D case 4
.text:00404620                 jmp     loc_404570
.text:00404625 ; ---------------------------------------------------------------------------
.text:00404625
.text:00404625 loc_404625:                             ; CODE XREF: sub_4044C0+6D↑j
.text:00404625                                         ; DATA XREF: sub_4044C0:jpt_40452D↑o
.text:00404625                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSA ; jumptable 0040452D case 5
.text:0040462C                 jmp     loc_404570
.text:00404631 ; ---------------------------------------------------------------------------
.text:00404631
.text:00404631 loc_404631:                             ; CODE XREF: sub_4044C0+6D↑j
.text:00404631                                         ; DATA XREF: sub_4044C0:jpt_40452D↑o
.text:00404631                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_0 ; jumptable 0040452D case 6
.text:00404638                 jmp     loc_404570
.text:0040463D ; ---------------------------------------------------------------------------
.text:0040463D
.text:0040463D loc_40463D:                             ; CODE XREF: sub_4044C0+6D↑j
.text:0040463D                                         ; DATA XREF: sub_4044C0:jpt_40452D↑o
.text:0040463D                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_1 ; jumptable 0040452D case 7
.text:00404644                 jmp     loc_404570
.text:00404649 ; ---------------------------------------------------------------------------
.text:00404649
.text:00404649 loc_404649:                             ; CODE XREF: sub_4044C0+6D↑j
.text:00404649                                         ; DATA XREF: sub_4044C0:jpt_40452D↑o
.text:00404649                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_2 ; jumptable 0040452D case 8
.text:00404650                 jmp     loc_404570
.text:00404655 ; ---------------------------------------------------------------------------
.text:00404655
.text:00404655 loc_404655:                             ; CODE XREF: sub_4044C0+6D↑j
.text:00404655                                         ; DATA XREF: sub_4044C0:jpt_40452D↑o
.text:00404655                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_3 ; jumptable 0040452D case 9
.text:0040465C                 jmp     loc_404570
.text:00404661 ; ---------------------------------------------------------------------------
.text:00404661
.text:00404661 def_40452D:                             ; CODE XREF: sub_4044C0+67↑j
.text:00404661                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS ; jumptable 0040452D default case
.text:00404668                 jmp     loc_404570
.text:0040466D ; ---------------------------------------------------------------------------
.text:0040466D
.text:0040466D loc_40466D:                             ; CODE XREF: sub_4044C0+3E↑j
.text:0040466D                 mov     [esp+2Ch+var_20], ebp
.text:00404671                 mov     ecx, [esp+2Ch+var_14]
.text:00404675                 mov     [esp+2Ch+Format], offset aSS ; "%s %s\n"
.text:0040467D                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00404680                 mov     [esp+2Ch+ArgList], ecx
.text:00404684                 call    fprintf
.text:00404689                 jmp     loc_404524
.text:00404689 sub_4044C0      endp
.text:00404689
.text:00404689 ; ---------------------------------------------------------------------------
.text:0040468E                 align 10h
.text:00404690
.text:00404690 ; =============== S U B R O U T I N E =======================================
.text:00404690
.text:00404690
.text:00404690 ; int __cdecl sub_404690(FILE *, FILE *, int, int, char)
.text:00404690 sub_404690      proc near               ; CODE XREF: sub_401A30+33E↑p
.text:00404690
.text:00404690 var_1C          = dword ptr -1Ch
.text:00404690 var_18          = dword ptr -18h
.text:00404690 var_14          = dword ptr -14h
.text:00404690 var_10          = dword ptr -10h
.text:00404690 var_C           = dword ptr -0Ch
.text:00404690 arg_0           = dword ptr  4
.text:00404690 arg_4           = dword ptr  8
.text:00404690 arg_8           = dword ptr  0Ch
.text:00404690 arg_C           = dword ptr  10h
.text:00404690 arg_10          = byte ptr  14h
.text:00404690
.text:00404690                 sub     esp, 1Ch
.text:00404693                 mov     edx, [esp+1Ch+arg_C]
.text:00404697                 lea     ecx, [esp+1Ch+arg_10]
.text:0040469B                 mov     [esp+1Ch+var_C], ecx ; va_list
.text:0040469F                 mov     ecx, [esp+1Ch+arg_8]
.text:004046A3                 mov     [esp+1Ch+var_10], edx ; int
.text:004046A7                 mov     edx, [esp+1Ch+arg_4]
.text:004046AB                 mov     [esp+1Ch+var_14], ecx ; int
.text:004046AF                 mov     [esp+1Ch+var_18], edx ; FILE *
.text:004046B3                 mov     edx, [esp+1Ch+arg_0]
.text:004046B7                 mov     [esp+1Ch+var_1C], edx ; FILE *
.text:004046BA                 call    sub_4044C0
.text:004046BF                 add     esp, 1Ch
.text:004046C2                 retn
.text:004046C2 sub_404690      endp
.text:004046C2
.text:004046C2 ; ---------------------------------------------------------------------------
.text:004046C3                 align 10h
.text:004046D0
.text:004046D0 ; =============== S U B R O U T I N E =======================================
.text:004046D0
.text:004046D0
.text:004046D0 sub_4046D0      proc near               ; CODE XREF: sub_401A30+21D↑p
.text:004046D0                                         ; sub_401A30+9FD↑p
.text:004046D0
.text:004046D0 var_1C          = dword ptr -1Ch
.text:004046D0 var_18          = dword ptr -18h
.text:004046D0 var_14          = dword ptr -14h
.text:004046D0 var_10          = dword ptr -10h
.text:004046D0 arg_0           = dword ptr  4
.text:004046D0 arg_4           = dword ptr  8
.text:004046D0 arg_8           = dword ptr  0Ch
.text:004046D0
.text:004046D0                 push    edi
.text:004046D1                 push    esi
.text:004046D2                 push    ebx
.text:004046D3                 sub     esp, 10h
.text:004046D6                 mov     edx, [esp+1Ch+arg_8]
.text:004046DA                 mov     ebx, [esp+1Ch+arg_0]
.text:004046DE                 mov     esi, [esp+1Ch+arg_4]
.text:004046E2                 lea     edi, [edx+15h]
.text:004046E5                 mov     byte ptr [edx+15h], 0
.text:004046E9                 lea     esi, [esi+0]
.text:004046F0
.text:004046F0 loc_4046F0:                             ; CODE XREF: sub_4046D0+63↓j
.text:004046F0                 mov     [esp+1Ch+var_1C], ebx
.text:004046F3                 dec     edi
.text:004046F4                 mov     [esp+1Ch+var_18], esi
.text:004046F8                 mov     [esp+1Ch+var_14], 0Ah
.text:00404700                 mov     [esp+1Ch+var_10], 0
.text:00404708                 call    sub_40F0F0
.text:0040470D                 add     al, 30h ; '0'
.text:0040470F                 mov     [edi], al
.text:00404711                 mov     [esp+1Ch+var_1C], ebx
.text:00404714                 mov     [esp+1Ch+var_18], esi
.text:00404718                 mov     [esp+1Ch+var_14], 0Ah
.text:00404720                 mov     [esp+1Ch+var_10], 0
.text:00404728                 call    sub_40F270
.text:0040472D                 mov     ebx, eax
.text:0040472F                 mov     esi, edx
.text:00404731                 or      edx, ebx
.text:00404733                 jnz     short loc_4046F0
.text:00404735                 add     esp, 10h
.text:00404738                 mov     eax, edi
.text:0040473A                 pop     ebx
.text:0040473B                 pop     esi
.text:0040473C                 pop     edi
.text:0040473D                 retn
.text:0040473D sub_4046D0      endp
.text:0040473D
.text:0040473D ; ---------------------------------------------------------------------------
.text:0040473E                 align 10h
.text:00404740 aCoreutils530Sr db '../../coreutils-5.3.0-src/lib/xstrtol.c',0
.text:00404740                                         ; DATA XREF: sub_4047B0+C79↓o
.text:00404768                 align 20h
.text:00404780 a0StrtolBaseStr db '0 <= strtol_base && strtol_base <= 36',0
.text:00404780                                         ; DATA XREF: sub_4047B0+C81↓o
.text:004047A6                 align 10h
.text:004047B0
.text:004047B0 ; =============== S U B R O U T I N E =======================================
.text:004047B0
.text:004047B0
.text:004047B0 ; int __cdecl sub_4047B0(int, int, int, int, char *Str)
.text:004047B0 sub_4047B0      proc near               ; CODE XREF: sub_401A30+4FB↑p
.text:004047B0                                         ; sub_401A30+60E↑p ...
.text:004047B0
.text:004047B0 C               = dword ptr -13Ch
.text:004047B0 Type            = dword ptr -138h
.text:004047B0 Radix           = dword ptr -134h
.text:004047B0 var_130         = dword ptr -130h
.text:004047B0 var_124         = dword ptr -124h
.text:004047B0 var_120         = dword ptr -120h
.text:004047B0 var_11C         = dword ptr -11Ch
.text:004047B0 var_118         = dword ptr -118h
.text:004047B0 var_114         = dword ptr -114h
.text:004047B0 var_110         = dword ptr -110h
.text:004047B0 var_10C         = dword ptr -10Ch
.text:004047B0 var_108         = dword ptr -108h
.text:004047B0 var_104         = dword ptr -104h
.text:004047B0 var_100         = dword ptr -100h
.text:004047B0 var_F8          = dword ptr -0F8h
.text:004047B0 var_F4          = dword ptr -0F4h
.text:004047B0 var_F0          = dword ptr -0F0h
.text:004047B0 var_EC          = dword ptr -0ECh
.text:004047B0 var_E8          = dword ptr -0E8h
.text:004047B0 var_E4          = dword ptr -0E4h
.text:004047B0 var_E0          = dword ptr -0E0h
.text:004047B0 var_D8          = dword ptr -0D8h
.text:004047B0 var_D4          = dword ptr -0D4h
.text:004047B0 var_D0          = dword ptr -0D0h
.text:004047B0 var_CC          = dword ptr -0CCh
.text:004047B0 var_C8          = dword ptr -0C8h
.text:004047B0 var_C4          = dword ptr -0C4h
.text:004047B0 var_C0          = dword ptr -0C0h
.text:004047B0 var_B8          = dword ptr -0B8h
.text:004047B0 var_B4          = dword ptr -0B4h
.text:004047B0 var_B0          = dword ptr -0B0h
.text:004047B0 var_AC          = dword ptr -0ACh
.text:004047B0 var_A8          = dword ptr -0A8h
.text:004047B0 var_A4          = dword ptr -0A4h
.text:004047B0 var_A0          = dword ptr -0A0h
.text:004047B0 var_98          = dword ptr -98h
.text:004047B0 var_94          = dword ptr -94h
.text:004047B0 var_90          = dword ptr -90h
.text:004047B0 var_8C          = dword ptr -8Ch
.text:004047B0 var_88          = dword ptr -88h
.text:004047B0 var_84          = dword ptr -84h
.text:004047B0 var_80          = dword ptr -80h
.text:004047B0 var_78          = dword ptr -78h
.text:004047B0 var_74          = dword ptr -74h
.text:004047B0 var_70          = dword ptr -70h
.text:004047B0 var_6C          = dword ptr -6Ch
.text:004047B0 var_68          = dword ptr -68h
.text:004047B0 var_64          = dword ptr -64h
.text:004047B0 var_60          = dword ptr -60h
.text:004047B0 var_5C          = dword ptr -5Ch
.text:004047B0 var_58          = dword ptr -58h
.text:004047B0 var_50          = dword ptr -50h
.text:004047B0 var_4C          = dword ptr -4Ch
.text:004047B0 var_48          = dword ptr -48h
.text:004047B0 var_44          = dword ptr -44h
.text:004047B0 var_40          = dword ptr -40h
.text:004047B0 var_3C          = dword ptr -3Ch
.text:004047B0 var_38          = dword ptr -38h
.text:004047B0 var_34          = dword ptr -34h
.text:004047B0 var_30          = dword ptr -30h
.text:004047B0 var_29          = byte ptr -29h
.text:004047B0 var_28          = dword ptr -28h
.text:004047B0 var_24          = dword ptr -24h
.text:004047B0 var_20          = dword ptr -20h
.text:004047B0 var_18          = byte ptr -18h
.text:004047B0 arg_0           = dword ptr  4
.text:004047B0 arg_4           = dword ptr  8
.text:004047B0 arg_8           = dword ptr  0Ch
.text:004047B0 arg_C           = dword ptr  10h
.text:004047B0 Str             = dword ptr  14h
.text:004047B0
.text:004047B0                 push    ebp
.text:004047B1                 xor     eax, eax
.text:004047B3                 push    edi
.text:004047B4                 push    esi
.text:004047B5                 push    ebx
.text:004047B6                 sub     esp, 12Ch
.text:004047BC                 mov     ebp, [esp+13Ch+arg_8]
.text:004047C3                 mov     [esp+13Ch+var_28], eax
.text:004047CA                 mov     esi, [esp+13Ch+arg_0]
.text:004047D1                 cmp     ebp, 24h ; '$'
.text:004047D4                 ja      loc_405421
.text:004047DA                 mov     edi, [esp+13Ch+arg_4]
.text:004047E1                 test    edi, edi
.text:004047E3                 jz      loc_405415
.text:004047E9
.text:004047E9 loc_4047E9:                             ; CODE XREF: sub_4047B0+C6C↓j
.text:004047E9                 movzx   edx, byte ptr [esi]
.text:004047EC                 mov     ebx, esi
.text:004047EE                 mov     [esp+13Ch+var_29], dl
.text:004047F5                 lea     esi, [esi+0]
.text:004047F9                 lea     edi, [edi+0]
.text:00404800
.text:00404800 loc_404800:                             ; CODE XREF: sub_4047B0+86↓j
.text:00404800                 movzx   edx, [esp+13Ch+var_29]
.text:00404808                 mov     ecx, ds:__mb_cur_max
.text:0040480E                 cmp     dword ptr [ecx], 1
.text:00404811                 jz      loc_405402
.text:00404817                 mov     [esp+13Ch+Type], 8 ; Type
.text:0040481F                 mov     [esp+13Ch+C], edx ; C
.text:00404822                 call    _isctype
.text:00404827
.text:00404827 loc_404827:                             ; CODE XREF: sub_4047B0+C60↓j
.text:00404827                 test    eax, eax
.text:00404829                 jz      short loc_404838
.text:0040482B                 inc     ebx
.text:0040482C                 movzx   eax, byte ptr [ebx]
.text:0040482F                 mov     [esp+13Ch+var_29], al
.text:00404836                 jmp     short loc_404800
.text:00404838 ; ---------------------------------------------------------------------------
.text:00404838
.text:00404838 loc_404838:                             ; CODE XREF: sub_4047B0+79↑j
.text:00404838                 cmp     [esp+13Ch+var_29], 2Dh ; '-'
.text:00404840                 mov     eax, 4
.text:00404845                 jz      short loc_4048C2
.text:00404847                 call    _errno
.text:0040484C                 mov     dword ptr [eax], 0
.text:00404852                 mov     [esp+13Ch+Radix], ebp ; Radix
.text:00404856                 mov     [esp+13Ch+Type], edi ; EndPtr
.text:0040485A                 mov     [esp+13Ch+C], esi ; String
.text:0040485D                 call    _strtoull
.text:00404862                 mov     [esp+13Ch+var_24], eax
.text:00404869                 mov     eax, [edi]
.text:0040486B                 mov     [esp+13Ch+var_20], edx
.text:00404872                 cmp     eax, esi
.text:00404874                 jz      loc_4053BC
.text:0040487A                 call    _errno
.text:0040487F                 mov     ebx, [eax]
.text:00404881                 test    ebx, ebx
.text:00404883                 jnz     loc_405397
.text:00404889
.text:00404889 loc_404889:                             ; CODE XREF: sub_4047B0+BFD↓j
.text:00404889                                         ; sub_4047B0+C4D↓j
.text:00404889                 mov     ebp, [esp+13Ch+Str]
.text:00404890                 test    ebp, ebp
.text:00404892                 jz      loc_405378
.text:00404898                 mov     ebx, [edi]
.text:0040489A                 movzx   eax, byte ptr [ebx]
.text:0040489D                 test    al, al
.text:0040489F                 jnz     short loc_4048CD
.text:004048A1
.text:004048A1 loc_4048A1:                             ; CODE XREF: sub_4047B0+312↓j
.text:004048A1                                         ; sub_4047B0+320↓j
.text:004048A1                 mov     edx, [esp+13Ch+var_24]
.text:004048A8                 mov     edi, [esp+13Ch+var_20]
.text:004048AF                 mov     ebx, [esp+13Ch+arg_C]
.text:004048B6                 mov     [ebx], edx
.text:004048B8                 mov     [ebx+4], edi
.text:004048BB
.text:004048BB loc_4048BB:                             ; CODE XREF: sub_4047B0+BE2↓j
.text:004048BB                 mov     eax, [esp+13Ch+var_28]
.text:004048C2
.text:004048C2 loc_4048C2:                             ; CODE XREF: sub_4047B0+95↑j
.text:004048C2                                         ; sub_4047B0+16C↓j ...
.text:004048C2                 add     esp, 12Ch
.text:004048C8                 pop     ebx
.text:004048C9                 pop     esi
.text:004048CA                 pop     edi
.text:004048CB                 pop     ebp
.text:004048CC                 retn
.text:004048CD ; ---------------------------------------------------------------------------
.text:004048CD
.text:004048CD loc_4048CD:                             ; CODE XREF: sub_4047B0+EF↑j
.text:004048CD                 mov     esi, [esp+13Ch+Str]
.text:004048D4                 mov     ecx, 1
.text:004048D9                 movsx   ebp, al
.text:004048DC                 mov     [esp+13Ch+var_30], ecx
.text:004048E3                 mov     ebx, 400h
.text:004048E8                 mov     [esp+13Ch+Type], ebp ; Val
.text:004048EC                 mov     [esp+13Ch+C], esi ; Str
.text:004048EF                 call    strchr
.text:004048F4                 test    eax, eax
.text:004048F6                 jnz     short loc_40491E
.text:004048F8
.text:004048F8 def_404969:                             ; CODE XREF: sub_4047B0+1B7↓j
.text:004048F8                                         ; sub_4047B0+1B9↓j
.text:004048F8                                         ; DATA XREF: ...
.text:004048F8                 mov     eax, [esp+13Ch+var_28] ; jumptable 00404969 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:004048FF                 mov     esi, [esp+13Ch+var_24]
.text:00404906                 mov     ebp, [esp+13Ch+var_20]
.text:0040490D                 mov     edi, [esp+13Ch+arg_C]
.text:00404914                 or      eax, 2
.text:00404917                 mov     [edi], esi
.text:00404919                 mov     [edi+4], ebp
.text:0040491C                 jmp     short loc_4048C2
.text:0040491E ; ---------------------------------------------------------------------------
.text:0040491E
.text:0040491E loc_40491E:                             ; CODE XREF: sub_4047B0+146↑j
.text:0040491E                 mov     [esp+13Ch+Type], 30h ; '0' ; Val
.text:00404926                 mov     edx, [esp+13Ch+Str]
.text:0040492D                 mov     [esp+13Ch+C], edx ; Str
.text:00404930                 call    strchr
.text:00404935                 test    eax, eax
.text:00404937                 jz      loc_405371
.text:0040493D                 mov     edx, [edi]
.text:0040493F                 movsx   eax, byte ptr [edx+1]
.text:00404943                 cmp     eax, 44h ; 'D'
.text:00404946                 jz      loc_405337
.text:0040494C                 cmp     eax, 44h ; 'D'
.text:0040494F                 jg      loc_40534D
.text:00404955                 cmp     eax, 42h ; 'B'
.text:00404958                 jz      loc_405337
.text:0040495E
.text:0040495E loc_40495E:                             ; CODE XREF: sub_4047B0+B98↓j
.text:0040495E                                         ; sub_4047B0+BA0↓j ...
.text:0040495E                 movsx   eax, byte ptr [edx]
.text:00404961                 sub     eax, 42h ; 'B'  ; switch 54 cases
.text:00404964                 cmp     eax, 35h
.text:00404967                 ja      short def_404969 ; jumptable 00404969 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:00404969                 jmp     ds:jpt_404969[eax*4] ; switch jump
.text:00404969 ; ---------------------------------------------------------------------------
.text:00404970 jpt_404969      dd offset loc_404AF4, offset def_404969, offset def_404969
.text:00404970                                         ; DATA XREF: sub_4047B0+1B9↑r
.text:00404970                 dd offset loc_404B4E, offset def_404969, offset loc_404F17 ; jump table for switch statement
.text:00404970                 dd offset def_404969, offset def_404969, offset def_404969
.text:00404970                 dd offset loc_405026, offset def_404969, offset loc_4050EF
.text:00404970                 dd offset def_404969, offset def_404969, offset loc_404C5D
.text:00404970                 dd offset def_404969, offset def_404969, offset def_404969
.text:00404970                 dd offset loc_4051FE, offset def_404969, offset def_404969
.text:00404970                 dd offset def_404969, offset def_404969, offset loc_404D6C
.text:00404970                 dd offset loc_404E3E, offset def_404969, offset def_404969
.text:00404970                 dd offset def_404969, offset def_404969, offset def_404969
.text:00404970                 dd offset def_404969, offset def_404969, offset loc_404A48
.text:00404970                 dd offset loc_404F10, offset def_404969, offset def_404969
.text:00404970                 dd offset def_404969, offset loc_404F17, offset def_404969
.text:00404970                 dd offset def_404969, offset def_404969, offset loc_405026
.text:00404970                 dd offset def_404969, offset loc_4050EF, offset def_404969
.text:00404970                 dd offset def_404969, offset def_404969, offset def_404969
.text:00404970                 dd offset def_404969, offset def_404969, offset loc_4051FE
.text:00404970                 dd offset def_404969, offset def_404969, offset loc_4052D7
.text:00404A48 ; ---------------------------------------------------------------------------
.text:00404A48
.text:00404A48 loc_404A48:                             ; CODE XREF: sub_4047B0+1B9↑j
.text:00404A48                                         ; DATA XREF: sub_4047B0:jpt_404969↑o
.text:00404A48                 mov     [esp+13Ch+Radix], 200h ; jumptable 00404969 case 98
.text:00404A50                 lea     ebp, [esp+13Ch+var_24]
.text:00404A57                 mov     [esp+13Ch+var_130], 0
.text:00404A5F                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:00404A66                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:00404A6E                 call    sub_40F270
.text:00404A73                 mov     esi, [esp+13Ch+var_20]
.text:00404A7A                 mov     ecx, [esp+13Ch+var_24]
.text:00404A81                 cmp     edx, esi
.text:00404A83                 ja      short loc_404A8B
.text:00404A85                 jb      short loc_404AD5
.text:00404A87                 cmp     eax, ecx
.text:00404A89                 jb      short loc_404AD5
.text:00404A8B
.text:00404A8B loc_404A8B:                             ; CODE XREF: sub_4047B0+2D3↑j
.text:00404A8B                 mov     esi, [ebp+0]
.text:00404A8E                 mov     eax, 200h
.text:00404A93                 mov     ebx, [ebp+4]
.text:00404A96                 mul     esi
.text:00404A98                 mov     ecx, ebx
.text:00404A9A                 shl     ecx, 9
.text:00404A9D
.text:00404A9D loc_404A9D:                             ; CODE XREF: sub_4047B0+399↓j
.text:00404A9D                 mov     esi, edx
.text:00404A9F                 lea     edx, [ecx+esi]
.text:00404AA2
.text:00404AA2 loc_404AA2:                             ; CODE XREF: sub_4047B0+B82↓j
.text:00404AA2                 mov     [ebp+0], eax
.text:00404AA5                 xor     eax, eax
.text:00404AA7                 mov     [ebp+4], edx
.text:00404AAA
.text:00404AAA loc_404AAA:                             ; CODE XREF: sub_4047B0+342↓j
.text:00404AAA                                         ; sub_4047B0+459↓j ...
.text:00404AAA                 mov     edx, [edi]
.text:00404AAC
.text:00404AAC loc_404AAC:                             ; CODE XREF: sub_4047B0+762↓j
.text:00404AAC                 or      [esp+13Ch+var_28], eax
.text:00404AB3                 mov     eax, [esp+13Ch+var_30]
.text:00404ABA                 lea     ecx, [eax+edx]
.text:00404ABD                 mov     [edi], ecx
.text:00404ABF                 cmp     byte ptr [ecx], 0
.text:00404AC2                 jz      loc_4048A1
.text:00404AC8                 or      [esp+13Ch+var_28], 2
.text:00404AD0                 jmp     loc_4048A1
.text:00404AD5 ; ---------------------------------------------------------------------------
.text:00404AD5
.text:00404AD5 loc_404AD5:                             ; CODE XREF: sub_4047B0+2D5↑j
.text:00404AD5                                         ; sub_4047B0+2D9↑j ...
.text:00404AD5                 mov     edx, 0FFFFFFFFh
.text:00404ADA                 mov     ebp, 0FFFFFFFFh
.text:00404ADF                 mov     eax, 1
.text:00404AE4                 mov     [esp+13Ch+var_24], edx
.text:00404AEB                 mov     [esp+13Ch+var_20], ebp
.text:00404AF2                 jmp     short loc_404AAA
.text:00404AF4 ; ---------------------------------------------------------------------------
.text:00404AF4
.text:00404AF4 loc_404AF4:                             ; CODE XREF: sub_4047B0+1B9↑j
.text:00404AF4                                         ; DATA XREF: sub_4047B0:jpt_404969↑o
.text:00404AF4                 mov     [esp+13Ch+Radix], 400h ; jumptable 00404969 case 66
.text:00404AFC                 lea     ebp, [esp+13Ch+var_24]
.text:00404B03                 mov     [esp+13Ch+var_130], 0
.text:00404B0B                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:00404B12                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:00404B1A                 call    sub_40F270
.text:00404B1F                 mov     esi, [esp+13Ch+var_20]
.text:00404B26                 mov     ecx, [esp+13Ch+var_24]
.text:00404B2D                 cmp     edx, esi
.text:00404B2F                 ja      short loc_404B37
.text:00404B31                 jb      short loc_404AD5
.text:00404B33                 cmp     eax, ecx
.text:00404B35                 jb      short loc_404AD5
.text:00404B37
.text:00404B37 loc_404B37:                             ; CODE XREF: sub_4047B0+37F↑j
.text:00404B37                 mov     esi, [ebp+0]
.text:00404B3A                 mov     eax, 400h
.text:00404B3F                 mov     ebx, [ebp+4]
.text:00404B42                 mul     esi
.text:00404B44                 mov     ecx, ebx
.text:00404B46                 shl     ecx, 0Ah
.text:00404B49                 jmp     loc_404A9D
.text:00404B4E ; ---------------------------------------------------------------------------
.text:00404B4E
.text:00404B4E loc_404B4E:                             ; CODE XREF: sub_4047B0+1B9↑j
.text:00404B4E                                         ; DATA XREF: sub_4047B0:jpt_404969↑o
.text:00404B4E                 mov     [esp+13Ch+var_3C], ebx ; jumptable 00404969 case 69
.text:00404B55                 mov     ecx, ebx
.text:00404B57                 xor     ebp, ebp
.text:00404B59                 mov     [esp+13Ch+var_34], ebp
.text:00404B60                 sar     ecx, 1Fh
.text:00404B63                 mov     ebx, [esp+13Ch+var_3C]
.text:00404B6A                 mov     [esp+13Ch+var_38], ecx
.text:00404B71                 lea     esi, [esp+13Ch+var_24]
.text:00404B78                 mov     ebp, 5
.text:00404B7D                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:00404B84                 mov     edx, [esp+13Ch+var_38]
.text:00404B8B                 mov     [esp+13Ch+Radix], ebx
.text:00404B8F                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:00404B97                 mov     [esp+13Ch+var_130], edx
.text:00404B9B                 call    sub_40F270
.text:00404BA0                 mov     [esp+13Ch+var_44], eax
.text:00404BA7                 mov     [esp+13Ch+var_40], edx
.text:00404BAE
.text:00404BAE loc_404BAE:                             ; CODE XREF: sub_4047B0+450↓j
.text:00404BAE                 mov     ebx, [esi+4]
.text:00404BB1                 mov     eax, [esi]
.text:00404BB3                 cmp     [esp+13Ch+var_40], ebx
.text:00404BBA                 mov     [esp+13Ch+var_48], ebx
.text:00404BC1                 mov     [esp+13Ch+var_4C], eax
.text:00404BC8                 ja      short loc_404C0E
.text:00404BCA                 mov     ecx, [esp+13Ch+var_48]
.text:00404BD1                 cmp     [esp+13Ch+var_40], ecx
.text:00404BD8                 jb      short loc_404BE3
.text:00404BDA                 cmp     [esp+13Ch+var_44], eax
.text:00404BE1                 jnb     short loc_404C0E
.text:00404BE3
.text:00404BE3 loc_404BE3:                             ; CODE XREF: sub_4047B0+428↑j
.text:00404BE3                 mov     dword ptr [esi], 0FFFFFFFFh
.text:00404BE9                 mov     eax, 1
.text:00404BEE                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:00404BF5
.text:00404BF5 loc_404BF5:                             ; CODE XREF: sub_4047B0+4AB↓j
.text:00404BF5                 or      [esp+13Ch+var_34], eax
.text:00404BFC                 dec     ebp
.text:00404BFD                 cmp     ebp, 0FFFFFFFFh
.text:00404C00                 jnz     short loc_404BAE
.text:00404C02                 mov     eax, [esp+13Ch+var_34]
.text:00404C09                 jmp     loc_404AAA
.text:00404C0E ; ---------------------------------------------------------------------------
.text:00404C0E
.text:00404C0E loc_404C0E:                             ; CODE XREF: sub_4047B0+418↑j
.text:00404C0E                                         ; sub_4047B0+431↑j
.text:00404C0E                 mov     ecx, [esp+13Ch+var_38]
.text:00404C15                 mov     eax, [esp+13Ch+var_4C]
.text:00404C1C                 mov     ebx, [esp+13Ch+var_4C]
.text:00404C23                 mul     [esp+13Ch+var_3C]
.text:00404C2A                 imul    ebx, ecx
.text:00404C2D                 mov     ecx, edx
.text:00404C2F                 mov     [esp+13Ch+var_124], eax
.text:00404C33                 add     ecx, ebx
.text:00404C35                 mov     edx, [esp+13Ch+var_3C]
.text:00404C3C                 mov     ebx, [esp+13Ch+var_48]
.text:00404C43                 imul    edx, ebx
.text:00404C46                 mov     ebx, [esp+13Ch+var_124]
.text:00404C4A                 mov     [esi], ebx
.text:00404C4C                 add     ecx, edx
.text:00404C4E                 mov     [esp+13Ch+var_120], ecx
.text:00404C52                 mov     eax, [esp+13Ch+var_120]
.text:00404C56                 mov     [esi+4], eax
.text:00404C59                 xor     eax, eax
.text:00404C5B                 jmp     short loc_404BF5
.text:00404C5D ; ---------------------------------------------------------------------------
.text:00404C5D
.text:00404C5D loc_404C5D:                             ; CODE XREF: sub_4047B0+1B9↑j
.text:00404C5D                                         ; DATA XREF: sub_4047B0:jpt_404969↑o
.text:00404C5D                 mov     [esp+13Ch+var_A4], ebx ; jumptable 00404969 case 80
.text:00404C64                 mov     eax, ebx
.text:00404C66                 xor     ebp, ebp
.text:00404C68                 mov     [esp+13Ch+var_98], ebp
.text:00404C6F                 sar     eax, 1Fh
.text:00404C72                 mov     edx, [esp+13Ch+var_A4]
.text:00404C79                 mov     [esp+13Ch+var_A0], eax
.text:00404C80                 lea     esi, [esp+13Ch+var_24]
.text:00404C87                 mov     ebp, 4
.text:00404C8C                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:00404C93                 mov     ebx, [esp+13Ch+var_A0]
.text:00404C9A                 mov     [esp+13Ch+Radix], edx
.text:00404C9E                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:00404CA6                 mov     [esp+13Ch+var_130], ebx
.text:00404CAA                 call    sub_40F270
.text:00404CAF                 mov     [esp+13Ch+var_AC], eax
.text:00404CB6                 mov     [esp+13Ch+var_A8], edx
.text:00404CBD
.text:00404CBD loc_404CBD:                             ; CODE XREF: sub_4047B0+55F↓j
.text:00404CBD                 mov     ebx, [esi+4]
.text:00404CC0                 mov     edx, [esi]
.text:00404CC2                 cmp     [esp+13Ch+var_A8], ebx
.text:00404CC9                 mov     [esp+13Ch+var_B0], ebx
.text:00404CD0                 mov     [esp+13Ch+var_B4], edx
.text:00404CD7                 ja      short loc_404D1D
.text:00404CD9                 mov     eax, [esp+13Ch+var_B0]
.text:00404CE0                 cmp     [esp+13Ch+var_A8], eax
.text:00404CE7                 jb      short loc_404CF2
.text:00404CE9                 cmp     [esp+13Ch+var_AC], edx
.text:00404CF0                 jnb     short loc_404D1D
.text:00404CF2
.text:00404CF2 loc_404CF2:                             ; CODE XREF: sub_4047B0+537↑j
.text:00404CF2                 mov     dword ptr [esi], 0FFFFFFFFh
.text:00404CF8                 mov     eax, 1
.text:00404CFD                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:00404D04
.text:00404D04 loc_404D04:                             ; CODE XREF: sub_4047B0+5BA↓j
.text:00404D04                 or      [esp+13Ch+var_98], eax
.text:00404D0B                 dec     ebp
.text:00404D0C                 cmp     ebp, 0FFFFFFFFh
.text:00404D0F                 jnz     short loc_404CBD
.text:00404D11                 mov     eax, [esp+13Ch+var_98]
.text:00404D18                 jmp     loc_404AAA
.text:00404D1D ; ---------------------------------------------------------------------------
.text:00404D1D
.text:00404D1D loc_404D1D:                             ; CODE XREF: sub_4047B0+527↑j
.text:00404D1D                                         ; sub_4047B0+540↑j
.text:00404D1D                 mov     ecx, [esp+13Ch+var_A0]
.text:00404D24                 mov     eax, [esp+13Ch+var_B4]
.text:00404D2B                 mov     ebx, [esp+13Ch+var_B4]
.text:00404D32                 mul     [esp+13Ch+var_A4]
.text:00404D39                 imul    ebx, ecx
.text:00404D3C                 mov     ecx, edx
.text:00404D3E                 mov     [esp+13Ch+var_124], eax
.text:00404D42                 add     ecx, ebx
.text:00404D44                 mov     edx, [esp+13Ch+var_A4]
.text:00404D4B                 mov     ebx, [esp+13Ch+var_B0]
.text:00404D52                 xor     eax, eax
.text:00404D54                 imul    edx, ebx
.text:00404D57                 add     ecx, edx
.text:00404D59                 mov     [esp+13Ch+var_120], ecx
.text:00404D5D                 mov     ebx, [esp+13Ch+var_120]
.text:00404D61                 mov     ecx, [esp+13Ch+var_124]
.text:00404D65                 mov     [esi+4], ebx
.text:00404D68                 mov     [esi], ecx
.text:00404D6A                 jmp     short loc_404D04
.text:00404D6C ; ---------------------------------------------------------------------------
.text:00404D6C
.text:00404D6C loc_404D6C:                             ; CODE XREF: sub_4047B0+1B9↑j
.text:00404D6C                                         ; DATA XREF: sub_4047B0:jpt_404969↑o
.text:00404D6C                 mov     [esp+13Ch+var_E4], ebx ; jumptable 00404969 case 89
.text:00404D70                 mov     eax, ebx
.text:00404D72                 lea     esi, [esp+13Ch+var_24]
.text:00404D79                 mov     [esp+13Ch+var_D8], 0
.text:00404D81                 sar     eax, 1Fh
.text:00404D84                 mov     edx, [esp+13Ch+var_E4]
.text:00404D88                 mov     [esp+13Ch+var_E0], eax
.text:00404D8C                 mov     ebp, 7
.text:00404D91                 mov     ebx, [esp+13Ch+var_E0]
.text:00404D95                 mov     [esp+13Ch+Radix], edx
.text:00404D99                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:00404DA0                 mov     [esp+13Ch+var_130], ebx
.text:00404DA4                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:00404DAC                 call    sub_40F270
.text:00404DB1                 mov     [esp+13Ch+var_EC], eax
.text:00404DB5                 mov     [esp+13Ch+var_E8], edx
.text:00404DB9
.text:00404DB9 loc_404DB9:                             ; CODE XREF: sub_4047B0+646↓j
.text:00404DB9                 mov     ebx, [esi+4]
.text:00404DBC                 mov     edx, [esi]
.text:00404DBE                 cmp     [esp+13Ch+var_E8], ebx
.text:00404DC2                 mov     [esp+13Ch+var_F0], ebx
.text:00404DC6                 mov     [esp+13Ch+var_F4], edx
.text:00404DCA                 ja      short loc_404E01
.text:00404DCC                 mov     eax, [esp+13Ch+var_F0]
.text:00404DD0                 cmp     [esp+13Ch+var_E8], eax
.text:00404DD4                 jb      short loc_404DDC
.text:00404DD6                 cmp     [esp+13Ch+var_EC], edx
.text:00404DDA                 jnb     short loc_404E01
.text:00404DDC
.text:00404DDC loc_404DDC:                             ; CODE XREF: sub_4047B0+624↑j
.text:00404DDC                 mov     dword ptr [esi], 0FFFFFFFFh
.text:00404DE2                 mov     eax, 1
.text:00404DE7                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:00404DEE
.text:00404DEE loc_404DEE:                             ; CODE XREF: sub_4047B0+68C↓j
.text:00404DEE                 or      [esp+13Ch+var_D8], eax
.text:00404DF2                 dec     ebp
.text:00404DF3                 cmp     ebp, 0FFFFFFFFh
.text:00404DF6                 jnz     short loc_404DB9
.text:00404DF8                 mov     eax, [esp+13Ch+var_D8]
.text:00404DFC                 jmp     loc_404AAA
.text:00404E01 ; ---------------------------------------------------------------------------
.text:00404E01
.text:00404E01 loc_404E01:                             ; CODE XREF: sub_4047B0+61A↑j
.text:00404E01                                         ; sub_4047B0+62A↑j
.text:00404E01                 mov     ecx, [esp+13Ch+var_E0]
.text:00404E05                 mov     eax, [esp+13Ch+var_F4]
.text:00404E09                 mov     ebx, [esp+13Ch+var_F4]
.text:00404E0D                 mul     [esp+13Ch+var_E4]
.text:00404E11                 imul    ebx, ecx
.text:00404E14                 mov     ecx, edx
.text:00404E16                 mov     [esp+13Ch+var_124], eax
.text:00404E1A                 add     ecx, ebx
.text:00404E1C                 mov     edx, [esp+13Ch+var_E4]
.text:00404E20                 mov     ebx, [esp+13Ch+var_F0]
.text:00404E24                 xor     eax, eax
.text:00404E26                 imul    edx, ebx
.text:00404E29                 add     ecx, edx
.text:00404E2B                 mov     [esp+13Ch+var_120], ecx
.text:00404E2F                 mov     ebx, [esp+13Ch+var_120]
.text:00404E33                 mov     ecx, [esp+13Ch+var_124]
.text:00404E37                 mov     [esi+4], ebx
.text:00404E3A                 mov     [esi], ecx
.text:00404E3C                 jmp     short loc_404DEE
.text:00404E3E ; ---------------------------------------------------------------------------
.text:00404E3E
.text:00404E3E loc_404E3E:                             ; CODE XREF: sub_4047B0+1B9↑j
.text:00404E3E                                         ; DATA XREF: sub_4047B0:jpt_404969↑o
.text:00404E3E                 mov     [esp+13Ch+var_104], ebx ; jumptable 00404969 case 90
.text:00404E42                 mov     eax, ebx
.text:00404E44                 lea     esi, [esp+13Ch+var_24]
.text:00404E4B                 mov     [esp+13Ch+var_F8], 0
.text:00404E53                 sar     eax, 1Fh
.text:00404E56                 mov     edx, [esp+13Ch+var_104]
.text:00404E5A                 mov     [esp+13Ch+var_100], eax
.text:00404E5E                 mov     ebp, 6
.text:00404E63                 mov     ebx, [esp+13Ch+var_100]
.text:00404E67                 mov     [esp+13Ch+Radix], edx
.text:00404E6B                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:00404E72                 mov     [esp+13Ch+var_130], ebx
.text:00404E76                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:00404E7E                 call    sub_40F270
.text:00404E83                 mov     [esp+13Ch+var_10C], eax
.text:00404E87                 mov     [esp+13Ch+var_108], edx
.text:00404E8B
.text:00404E8B loc_404E8B:                             ; CODE XREF: sub_4047B0+718↓j
.text:00404E8B                 mov     ebx, [esi+4]
.text:00404E8E                 mov     edx, [esi]
.text:00404E90                 cmp     [esp+13Ch+var_108], ebx
.text:00404E94                 mov     [esp+13Ch+var_110], ebx
.text:00404E98                 mov     [esp+13Ch+var_114], edx
.text:00404E9C                 ja      short loc_404ED3
.text:00404E9E                 mov     eax, [esp+13Ch+var_110]
.text:00404EA2                 cmp     [esp+13Ch+var_108], eax
.text:00404EA6                 jb      short loc_404EAE
.text:00404EA8                 cmp     [esp+13Ch+var_10C], edx
.text:00404EAC                 jnb     short loc_404ED3
.text:00404EAE
.text:00404EAE loc_404EAE:                             ; CODE XREF: sub_4047B0+6F6↑j
.text:00404EAE                 mov     dword ptr [esi], 0FFFFFFFFh
.text:00404EB4                 mov     eax, 1
.text:00404EB9                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:00404EC0
.text:00404EC0 loc_404EC0:                             ; CODE XREF: sub_4047B0+75E↓j
.text:00404EC0                 or      [esp+13Ch+var_F8], eax
.text:00404EC4                 dec     ebp
.text:00404EC5                 cmp     ebp, 0FFFFFFFFh
.text:00404EC8                 jnz     short loc_404E8B
.text:00404ECA                 mov     eax, [esp+13Ch+var_F8]
.text:00404ECE                 jmp     loc_404AAA
.text:00404ED3 ; ---------------------------------------------------------------------------
.text:00404ED3
.text:00404ED3 loc_404ED3:                             ; CODE XREF: sub_4047B0+6EC↑j
.text:00404ED3                                         ; sub_4047B0+6FC↑j
.text:00404ED3                 mov     eax, [esp+13Ch+var_114]
.text:00404ED7                 mov     ebx, [esp+13Ch+var_100]
.text:00404EDB                 mul     [esp+13Ch+var_104]
.text:00404EDF                 mov     ecx, edx
.text:00404EE1                 mov     edx, [esp+13Ch+var_104]
.text:00404EE5                 mov     [esp+13Ch+var_124], eax
.text:00404EE9                 mov     eax, [esp+13Ch+var_114]
.text:00404EED                 imul    eax, ebx
.text:00404EF0                 mov     ebx, [esp+13Ch+var_110]
.text:00404EF4                 imul    edx, ebx
.text:00404EF7                 add     ecx, eax
.text:00404EF9                 xor     eax, eax
.text:00404EFB                 add     ecx, edx
.text:00404EFD                 mov     [esp+13Ch+var_120], ecx
.text:00404F01                 mov     ebx, [esp+13Ch+var_120]
.text:00404F05                 mov     ecx, [esp+13Ch+var_124]
.text:00404F09                 mov     [esi+4], ebx
.text:00404F0C                 mov     [esi], ecx
.text:00404F0E                 jmp     short loc_404EC0
.text:00404F10 ; ---------------------------------------------------------------------------
.text:00404F10
.text:00404F10 loc_404F10:                             ; CODE XREF: sub_4047B0+1B9↑j
.text:00404F10                                         ; DATA XREF: sub_4047B0:jpt_404969↑o
.text:00404F10                 xor     eax, eax        ; jumptable 00404969 case 99
.text:00404F12                 jmp     loc_404AAC
.text:00404F17 ; ---------------------------------------------------------------------------
.text:00404F17
.text:00404F17 loc_404F17:                             ; CODE XREF: sub_4047B0+1B9↑j
.text:00404F17                                         ; DATA XREF: sub_4047B0:jpt_404969↑o
.text:00404F17                 mov     [esp+13Ch+var_5C], ebx ; jumptable 00404969 cases 71,103
.text:00404F1E                 mov     eax, ebx
.text:00404F20                 xor     ebp, ebp
.text:00404F22                 mov     [esp+13Ch+var_50], ebp
.text:00404F29                 sar     eax, 1Fh
.text:00404F2C                 mov     edx, [esp+13Ch+var_5C]
.text:00404F33                 mov     [esp+13Ch+var_58], eax
.text:00404F3A                 lea     esi, [esp+13Ch+var_24]
.text:00404F41                 mov     ebp, 2
.text:00404F46                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:00404F4D                 mov     ebx, [esp+13Ch+var_58]
.text:00404F54                 mov     [esp+13Ch+Radix], edx
.text:00404F58                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:00404F60                 mov     [esp+13Ch+var_130], ebx
.text:00404F64                 call    sub_40F270
.text:00404F69                 mov     [esp+13Ch+var_64], eax
.text:00404F70                 mov     [esp+13Ch+var_60], edx
.text:00404F77
.text:00404F77 loc_404F77:                             ; CODE XREF: sub_4047B0+819↓j
.text:00404F77                 mov     ebx, [esi+4]
.text:00404F7A                 mov     edx, [esi]
.text:00404F7C                 cmp     [esp+13Ch+var_60], ebx
.text:00404F83                 mov     [esp+13Ch+var_68], ebx
.text:00404F8A                 mov     [esp+13Ch+var_6C], edx
.text:00404F91                 ja      short loc_404FD7
.text:00404F93                 mov     eax, [esp+13Ch+var_68]
.text:00404F9A                 cmp     [esp+13Ch+var_60], eax
.text:00404FA1                 jb      short loc_404FAC
.text:00404FA3                 cmp     [esp+13Ch+var_64], edx
.text:00404FAA                 jnb     short loc_404FD7
.text:00404FAC
.text:00404FAC loc_404FAC:                             ; CODE XREF: sub_4047B0+7F1↑j
.text:00404FAC                 mov     dword ptr [esi], 0FFFFFFFFh
.text:00404FB2                 mov     eax, 1
.text:00404FB7                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:00404FBE
.text:00404FBE loc_404FBE:                             ; CODE XREF: sub_4047B0+874↓j
.text:00404FBE                 or      [esp+13Ch+var_50], eax
.text:00404FC5                 dec     ebp
.text:00404FC6                 cmp     ebp, 0FFFFFFFFh
.text:00404FC9                 jnz     short loc_404F77
.text:00404FCB                 mov     eax, [esp+13Ch+var_50]
.text:00404FD2                 jmp     loc_404AAA
.text:00404FD7 ; ---------------------------------------------------------------------------
.text:00404FD7
.text:00404FD7 loc_404FD7:                             ; CODE XREF: sub_4047B0+7E1↑j
.text:00404FD7                                         ; sub_4047B0+7FA↑j
.text:00404FD7                 mov     ecx, [esp+13Ch+var_58]
.text:00404FDE                 mov     eax, [esp+13Ch+var_6C]
.text:00404FE5                 mov     ebx, [esp+13Ch+var_6C]
.text:00404FEC                 mul     [esp+13Ch+var_5C]
.text:00404FF3                 imul    ebx, ecx
.text:00404FF6                 mov     ecx, edx
.text:00404FF8                 mov     [esp+13Ch+var_124], eax
.text:00404FFC                 add     ecx, ebx
.text:00404FFE                 mov     edx, [esp+13Ch+var_5C]
.text:00405005                 mov     ebx, [esp+13Ch+var_68]
.text:0040500C                 xor     eax, eax
.text:0040500E                 imul    edx, ebx
.text:00405011                 add     ecx, edx
.text:00405013                 mov     [esp+13Ch+var_120], ecx
.text:00405017                 mov     ebx, [esp+13Ch+var_120]
.text:0040501B                 mov     ecx, [esp+13Ch+var_124]
.text:0040501F                 mov     [esi+4], ebx
.text:00405022                 mov     [esi], ecx
.text:00405024                 jmp     short loc_404FBE
.text:00405026 ; ---------------------------------------------------------------------------
.text:00405026
.text:00405026 loc_405026:                             ; CODE XREF: sub_4047B0+1B9↑j
.text:00405026                                         ; DATA XREF: sub_4047B0:jpt_404969↑o
.text:00405026                 mov     [esp+13Ch+var_74], ebx ; jumptable 00404969 cases 75,107
.text:0040502D                 mov     eax, ebx
.text:0040502F                 lea     esi, [esp+13Ch+var_24]
.text:00405036                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:0040503D                 sar     eax, 1Fh
.text:00405040                 mov     edx, [esp+13Ch+var_74]
.text:00405047                 mov     [esp+13Ch+var_70], eax
.text:0040504E                 mov     ebx, [esp+13Ch+var_70]
.text:00405055                 mov     [esp+13Ch+Radix], edx
.text:00405059                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:00405061                 mov     [esp+13Ch+var_130], ebx
.text:00405065                 call    sub_40F270
.text:0040506A                 mov     ebp, [esp+13Ch+var_20]
.text:00405071                 mov     ecx, [esp+13Ch+var_24]
.text:00405078                 cmp     edx, ebp
.text:0040507A                 mov     [esp+13Ch+var_11C], ecx
.text:0040507E                 mov     [esp+13Ch+var_118], ebp
.text:00405082                 ja      short loc_4050A9
.text:00405084                 cmp     edx, [esp+13Ch+var_118]
.text:00405088                 jb      short loc_40508E
.text:0040508A                 cmp     eax, ecx
.text:0040508C                 jnb     short loc_4050A9
.text:0040508E
.text:0040508E loc_40508E:                             ; CODE XREF: sub_4047B0+8D8↑j
.text:0040508E                 mov     dword ptr [esi], 0FFFFFFFFh
.text:00405094                 mov     edx, 1
.text:00405099                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:004050A0
.text:004050A0 loc_4050A0:                             ; CODE XREF: sub_4047B0+93D↓j
.text:004050A0                 xor     eax, eax
.text:004050A2                 or      eax, edx
.text:004050A4                 jmp     loc_404AAA
.text:004050A9 ; ---------------------------------------------------------------------------
.text:004050A9
.text:004050A9 loc_4050A9:                             ; CODE XREF: sub_4047B0+8D2↑j
.text:004050A9                                         ; sub_4047B0+8DC↑j
.text:004050A9                 mov     eax, [esp+13Ch+var_11C]
.text:004050AD                 mov     ebp, [esp+13Ch+var_11C]
.text:004050B1                 mov     ebx, [esp+13Ch+var_118]
.text:004050B5                 mul     [esp+13Ch+var_74]
.text:004050BC                 mov     [esp+13Ch+var_124], eax
.text:004050C0                 mov     eax, [esp+13Ch+var_70]
.text:004050C7                 mov     ecx, [esp+13Ch+var_124]
.text:004050CB                 imul    ebp, eax
.text:004050CE                 mov     eax, edx
.text:004050D0                 xor     edx, edx
.text:004050D2                 mov     [esi], ecx
.text:004050D4                 add     eax, ebp
.text:004050D6                 mov     ebp, [esp+13Ch+var_74]
.text:004050DD                 imul    ebp, ebx
.text:004050E0                 add     eax, ebp
.text:004050E2                 mov     [esp+13Ch+var_120], eax
.text:004050E6                 mov     ebp, [esp+13Ch+var_120]
.text:004050EA                 mov     [esi+4], ebp
.text:004050ED                 jmp     short loc_4050A0
.text:004050EF ; ---------------------------------------------------------------------------
.text:004050EF
.text:004050EF loc_4050EF:                             ; CODE XREF: sub_4047B0+1B9↑j
.text:004050EF                                         ; DATA XREF: sub_4047B0:jpt_404969↑o
.text:004050EF                 mov     [esp+13Ch+var_84], ebx ; jumptable 00404969 cases 77,109
.text:004050F6                 mov     eax, ebx
.text:004050F8                 xor     ebp, ebp
.text:004050FA                 mov     [esp+13Ch+var_78], ebp
.text:00405101                 sar     eax, 1Fh
.text:00405104                 mov     edx, [esp+13Ch+var_84]
.text:0040510B                 mov     [esp+13Ch+var_80], eax
.text:00405112                 lea     esi, [esp+13Ch+var_24]
.text:00405119                 mov     ebp, 1
.text:0040511E                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:00405125                 mov     ecx, [esp+13Ch+var_80]
.text:0040512C                 mov     [esp+13Ch+Radix], edx
.text:00405130                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:00405138                 mov     [esp+13Ch+var_130], ecx
.text:0040513C                 call    sub_40F270
.text:00405141                 mov     [esp+13Ch+var_8C], eax
.text:00405148                 mov     [esp+13Ch+var_88], edx
.text:0040514F
.text:0040514F loc_40514F:                             ; CODE XREF: sub_4047B0+9F1↓j
.text:0040514F                 mov     ebx, [esi+4]
.text:00405152                 mov     edx, [esi]
.text:00405154                 cmp     [esp+13Ch+var_88], ebx
.text:0040515B                 mov     [esp+13Ch+var_90], ebx
.text:00405162                 mov     [esp+13Ch+var_94], edx
.text:00405169                 ja      short loc_4051AF
.text:0040516B                 mov     eax, [esp+13Ch+var_90]
.text:00405172                 cmp     [esp+13Ch+var_88], eax
.text:00405179                 jb      short loc_405184
.text:0040517B                 cmp     [esp+13Ch+var_8C], edx
.text:00405182                 jnb     short loc_4051AF
.text:00405184
.text:00405184 loc_405184:                             ; CODE XREF: sub_4047B0+9C9↑j
.text:00405184                 mov     dword ptr [esi], 0FFFFFFFFh
.text:0040518A                 mov     eax, 1
.text:0040518F                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:00405196
.text:00405196 loc_405196:                             ; CODE XREF: sub_4047B0+A4C↓j
.text:00405196                 or      [esp+13Ch+var_78], eax
.text:0040519D                 dec     ebp
.text:0040519E                 cmp     ebp, 0FFFFFFFFh
.text:004051A1                 jnz     short loc_40514F
.text:004051A3                 mov     eax, [esp+13Ch+var_78]
.text:004051AA                 jmp     loc_404AAA
.text:004051AF ; ---------------------------------------------------------------------------
.text:004051AF
.text:004051AF loc_4051AF:                             ; CODE XREF: sub_4047B0+9B9↑j
.text:004051AF                                         ; sub_4047B0+9D2↑j
.text:004051AF                 mov     ecx, [esp+13Ch+var_80]
.text:004051B6                 mov     eax, [esp+13Ch+var_94]
.text:004051BD                 mov     ebx, [esp+13Ch+var_94]
.text:004051C4                 mul     [esp+13Ch+var_84]
.text:004051CB                 imul    ebx, ecx
.text:004051CE                 mov     ecx, edx
.text:004051D0                 mov     [esp+13Ch+var_124], eax
.text:004051D4                 add     ecx, ebx
.text:004051D6                 mov     edx, [esp+13Ch+var_84]
.text:004051DD                 mov     ebx, [esp+13Ch+var_90]
.text:004051E4                 xor     eax, eax
.text:004051E6                 imul    edx, ebx
.text:004051E9                 add     ecx, edx
.text:004051EB                 mov     [esp+13Ch+var_120], ecx
.text:004051EF                 mov     ebx, [esp+13Ch+var_120]
.text:004051F3                 mov     ecx, [esp+13Ch+var_124]
.text:004051F7                 mov     [esi+4], ebx
.text:004051FA                 mov     [esi], ecx
.text:004051FC                 jmp     short loc_405196
.text:004051FE ; ---------------------------------------------------------------------------
.text:004051FE
.text:004051FE loc_4051FE:                             ; CODE XREF: sub_4047B0+1B9↑j
.text:004051FE                                         ; DATA XREF: sub_4047B0:jpt_404969↑o
.text:004051FE                 mov     [esp+13Ch+var_C4], ebx ; jumptable 00404969 cases 84,116
.text:00405202                 mov     eax, ebx
.text:00405204                 xor     ebp, ebp
.text:00405206                 mov     [esp+13Ch+var_B8], ebp
.text:0040520D                 sar     eax, 1Fh
.text:00405210                 mov     edx, [esp+13Ch+var_C4]
.text:00405214                 mov     [esp+13Ch+var_C0], eax
.text:00405218                 lea     esi, [esp+13Ch+var_24]
.text:0040521F                 mov     ebp, 3
.text:00405224                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:0040522B                 mov     ebx, [esp+13Ch+var_C0]
.text:0040522F                 mov     [esp+13Ch+Radix], edx
.text:00405233                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:0040523B                 mov     [esp+13Ch+var_130], ebx
.text:0040523F                 call    sub_40F270
.text:00405244                 mov     [esp+13Ch+var_CC], eax
.text:00405248                 mov     [esp+13Ch+var_C8], edx
.text:0040524C
.text:0040524C loc_40524C:                             ; CODE XREF: sub_4047B0+ADC↓j
.text:0040524C                 mov     ebx, [esi+4]
.text:0040524F                 mov     edx, [esi]
.text:00405251                 cmp     [esp+13Ch+var_C8], ebx
.text:00405255                 mov     [esp+13Ch+var_D0], ebx
.text:00405259                 mov     [esp+13Ch+var_D4], edx
.text:0040525D                 ja      short loc_40529A
.text:0040525F                 mov     eax, [esp+13Ch+var_D0]
.text:00405263                 cmp     [esp+13Ch+var_C8], eax
.text:00405267                 jb      short loc_40526F
.text:00405269                 cmp     [esp+13Ch+var_CC], edx
.text:0040526D                 jnb     short loc_40529A
.text:0040526F
.text:0040526F loc_40526F:                             ; CODE XREF: sub_4047B0+AB7↑j
.text:0040526F                 mov     dword ptr [esi], 0FFFFFFFFh
.text:00405275                 mov     eax, 1
.text:0040527A                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:00405281
.text:00405281 loc_405281:                             ; CODE XREF: sub_4047B0+B25↓j
.text:00405281                 or      [esp+13Ch+var_B8], eax
.text:00405288                 dec     ebp
.text:00405289                 cmp     ebp, 0FFFFFFFFh
.text:0040528C                 jnz     short loc_40524C
.text:0040528E                 mov     eax, [esp+13Ch+var_B8]
.text:00405295                 jmp     loc_404AAA
.text:0040529A ; ---------------------------------------------------------------------------
.text:0040529A
.text:0040529A loc_40529A:                             ; CODE XREF: sub_4047B0+AAD↑j
.text:0040529A                                         ; sub_4047B0+ABD↑j
.text:0040529A                 mov     ecx, [esp+13Ch+var_C0]
.text:0040529E                 mov     eax, [esp+13Ch+var_D4]
.text:004052A2                 mov     ebx, [esp+13Ch+var_D4]
.text:004052A6                 mul     [esp+13Ch+var_C4]
.text:004052AA                 imul    ebx, ecx
.text:004052AD                 mov     ecx, edx
.text:004052AF                 mov     [esp+13Ch+var_124], eax
.text:004052B3                 add     ecx, ebx
.text:004052B5                 mov     edx, [esp+13Ch+var_C4]
.text:004052B9                 mov     ebx, [esp+13Ch+var_D0]
.text:004052BD                 xor     eax, eax
.text:004052BF                 imul    edx, ebx
.text:004052C2                 add     ecx, edx
.text:004052C4                 mov     [esp+13Ch+var_120], ecx
.text:004052C8                 mov     ebx, [esp+13Ch+var_120]
.text:004052CC                 mov     ecx, [esp+13Ch+var_124]
.text:004052D0                 mov     [esi+4], ebx
.text:004052D3                 mov     [esi], ecx
.text:004052D5                 jmp     short loc_405281
.text:004052D7 ; ---------------------------------------------------------------------------
.text:004052D7
.text:004052D7 loc_4052D7:                             ; CODE XREF: sub_4047B0+1B9↑j
.text:004052D7                                         ; DATA XREF: sub_4047B0:jpt_404969↑o
.text:004052D7                 mov     [esp+13Ch+Radix], 2 ; jumptable 00404969 case 119
.text:004052DF                 lea     ebp, [esp+13Ch+var_24]
.text:004052E6                 mov     [esp+13Ch+var_130], 0
.text:004052EE                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:004052F5                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:004052FD                 call    sub_40F270
.text:00405302                 mov     esi, [esp+13Ch+var_20]
.text:00405309                 mov     ecx, [esp+13Ch+var_24]
.text:00405310                 cmp     edx, esi
.text:00405312                 ja      short loc_405322
.text:00405314                 jb      loc_404AD5
.text:0040531A                 cmp     eax, ecx
.text:0040531C                 jb      loc_404AD5
.text:00405322
.text:00405322 loc_405322:                             ; CODE XREF: sub_4047B0+B62↑j
.text:00405322                 mov     esi, [ebp+0]
.text:00405325                 mov     eax, 2
.text:0040532A                 mov     ecx, [ebp+4]
.text:0040532D                 mul     esi
.text:0040532F                 lea     edx, [edx+ecx*2]
.text:00405332                 jmp     loc_404AA2
.text:00405337 ; ---------------------------------------------------------------------------
.text:00405337
.text:00405337 loc_405337:                             ; CODE XREF: sub_4047B0+196↑j
.text:00405337                                         ; sub_4047B0+1A8↑j
.text:00405337                 mov     esi, 2
.text:0040533C                 mov     ebx, 3E8h
.text:00405341                 mov     [esp+13Ch+var_30], esi
.text:00405348                 jmp     loc_40495E
.text:0040534D ; ---------------------------------------------------------------------------
.text:0040534D
.text:0040534D loc_40534D:                             ; CODE XREF: sub_4047B0+19F↑j
.text:0040534D                 cmp     eax, 69h ; 'i'
.text:00405350                 jnz     loc_40495E
.text:00405356                 cmp     byte ptr [edx+2], 42h ; 'B'
.text:0040535A                 jnz     loc_40495E
.text:00405360                 mov     eax, 3
.text:00405365                 mov     [esp+13Ch+var_30], eax
.text:0040536C                 jmp     loc_40495E
.text:00405371 ; ---------------------------------------------------------------------------
.text:00405371
.text:00405371 loc_405371:                             ; CODE XREF: sub_4047B0+187↑j
.text:00405371                 mov     edx, [edi]
.text:00405373                 jmp     loc_40495E
.text:00405378 ; ---------------------------------------------------------------------------
.text:00405378
.text:00405378 loc_405378:                             ; CODE XREF: sub_4047B0+E2↑j
.text:00405378                 mov     edx, [esp+13Ch+var_24]
.text:0040537F                 mov     ecx, [esp+13Ch+var_20]
.text:00405386                 mov     edi, [esp+13Ch+arg_C]
.text:0040538D                 mov     [edi], edx
.text:0040538F                 mov     [edi+4], ecx
.text:00405392                 jmp     loc_4048BB
.text:00405397 ; ---------------------------------------------------------------------------
.text:00405397
.text:00405397 loc_405397:                             ; CODE XREF: sub_4047B0+D3↑j
.text:00405397                 call    _errno
.text:0040539C                 cmp     dword ptr [eax], 22h ; '"'
.text:0040539F                 jnz     short loc_4053B2
.text:004053A1                 mov     esi, 1
.text:004053A6                 mov     [esp+13Ch+var_28], esi
.text:004053AD                 jmp     loc_404889
.text:004053B2 ; ---------------------------------------------------------------------------
.text:004053B2
.text:004053B2 loc_4053B2:                             ; CODE XREF: sub_4047B0+BEF↑j
.text:004053B2                                         ; sub_4047B0+C15↓j ...
.text:004053B2                 mov     eax, 4
.text:004053B7                 jmp     loc_4048C2
.text:004053BC ; ---------------------------------------------------------------------------
.text:004053BC
.text:004053BC loc_4053BC:                             ; CODE XREF: sub_4047B0+C4↑j
.text:004053BC                 mov     ebx, [esp+13Ch+Str]
.text:004053C3                 test    ebx, ebx
.text:004053C5                 jz      short loc_4053B2
.text:004053C7                 movzx   eax, byte ptr [eax]
.text:004053CA                 test    al, al
.text:004053CC                 jz      short loc_4053B2
.text:004053CE                 mov     esi, [esp+13Ch+Str]
.text:004053D5                 movsx   ebp, al
.text:004053D8                 mov     [esp+13Ch+Type], ebp ; Val
.text:004053DC                 mov     [esp+13Ch+C], esi ; Str
.text:004053DF                 call    strchr
.text:004053E4                 test    eax, eax
.text:004053E6                 jz      short loc_4053B2
.text:004053E8                 mov     ecx, 1
.text:004053ED                 xor     edx, edx
.text:004053EF                 mov     [esp+13Ch+var_24], ecx
.text:004053F6                 mov     [esp+13Ch+var_20], edx
.text:004053FD                 jmp     loc_404889
.text:00405402 ; ---------------------------------------------------------------------------
.text:00405402
.text:00405402 loc_405402:                             ; CODE XREF: sub_4047B0+61↑j
.text:00405402                 mov     eax, ds:_pctype
.text:00405407                 mov     ecx, [eax]
.text:00405409                 movzx   eax, word ptr [ecx+edx*2]
.text:0040540D                 and     eax, 8
.text:00405410                 jmp     loc_404827
.text:00405415 ; ---------------------------------------------------------------------------
.text:00405415
.text:00405415 loc_405415:                             ; CODE XREF: sub_4047B0+33↑j
.text:00405415                 lea     edi, [esp+13Ch+var_18]
.text:0040541C                 jmp     loc_4047E9
.text:00405421 ; ---------------------------------------------------------------------------
.text:00405421
.text:00405421 loc_405421:                             ; CODE XREF: sub_4047B0+24↑j
.text:00405421                 mov     [esp+13Ch+Radix], 70h ; 'p'
.text:00405429                 mov     [esp+13Ch+Type], offset aCoreutils530Sr ; "../../coreutils-5.3.0-src/lib/xstrtol.c"
.text:00405431                 mov     [esp+13Ch+C], offset a0StrtolBaseStr ; "0 <= strtol_base && strtol_base <= 36"
.text:00405438                 call    _assert
.text:00405438 sub_4047B0      endp
.text:00405438
.text:00405438 ; ---------------------------------------------------------------------------
.text:0040543D                 align 10h
.text:00405440
.text:00405440 loc_405440:                             ; DATA XREF: sub_4054B0+544↓o
.text:00405440                 db      2Eh, 2Eh
.text:00405440                 das
.text:00405443                 db      2Eh, 2Eh
.text:00405443                 das
.text:00405446                 arpl    [edi+72h], bp
.text:00405449                 db      65h
.text:00405449                 jnz     short near ptr loc_4054BB+5
.text:0040544C                 imul    ebp, [ebx+esi*2+2Dh], 2E332E35h
.text:00405454                 xor     ds:2F637273h, ch
.text:0040545A                 insb
.text:0040545B                 imul    esp, [edx+2Fh], 72747378h
.text:00405462                 jz      short near ptr loc_4054D0+3
.text:00405464                 insb
.text:00405465                 arpl    cs:[eax], ax
.text:00405468                 nop
.text:00405469                 nop
.text:0040546A                 nop
.text:0040546B                 nop
.text:0040546C                 nop
.text:0040546D                 nop
.text:0040546E                 nop
.text:0040546F                 nop
.text:00405470                 nop
.text:00405471                 nop
.text:00405472                 nop
.text:00405473                 nop
.text:00405474                 nop
.text:00405475                 nop
.text:00405476                 nop
.text:00405477                 nop
.text:00405478                 nop
.text:00405479                 nop
.text:0040547A                 nop
.text:0040547B                 nop
.text:0040547C                 nop
.text:0040547D                 nop
.text:0040547E                 nop
.text:0040547F                 nop
.text:00405480
.text:00405480 loc_405480:                             ; DATA XREF: sub_4054B0+54C↓o
.text:00405480                 xor     [eax], ah
.text:00405482                 cmp     al, 3Dh ; '='
.text:00405484                 and     [ebx+74h], dh
.text:00405487                 jb      short near ptr loc_4054FB+2
.text:00405489                 outsd
.text:0040548A                 insb
.text:0040548B                 pop     edi
.text:0040548C                 bound   esp, [ecx+73h]
.text:0040548F                 and     gs:[esi], ah
.text:00405492                 and     es:[ebx+74h], dh
.text:00405496                 jb      short loc_40550C
.text:00405498                 outsd
.text:00405499                 insb
.text:0040549A                 pop     edi
.text:0040549B                 bound   esp, [ecx+73h]
.text:0040549E                 and     gs:363320h[edi], bh
.text:004054A6                 lea     esi, [esi+0]
.text:004054A9                 lea     edi, [edi+0]
.text:004054B0
.text:004054B0 ; =============== S U B R O U T I N E =======================================
.text:004054B0
.text:004054B0
.text:004054B0 ; int __cdecl sub_4054B0(int, int, int, int, char *Str)
.text:004054B0 sub_4054B0      proc near               ; CODE XREF: sub_401A30+579↑p
.text:004054B0
.text:004054B0 C               = dword ptr -3Ch
.text:004054B0 Type            = dword ptr -38h
.text:004054B0 Radix           = dword ptr -34h
.text:004054B0 var_28          = dword ptr -28h
.text:004054B0 var_24          = dword ptr -24h
.text:004054B0 var_1D          = byte ptr -1Dh
.text:004054B0 var_1C          = dword ptr -1Ch
.text:004054B0 var_18          = dword ptr -18h
.text:004054B0 var_14          = byte ptr -14h
.text:004054B0 arg_0           = dword ptr  4
.text:004054B0 arg_4           = dword ptr  8
.text:004054B0 arg_8           = dword ptr  0Ch
.text:004054B0 arg_C           = dword ptr  10h
.text:004054B0 Str             = dword ptr  14h
.text:004054B0
.text:004054B0                 push    ebp
.text:004054B1                 push    edi
.text:004054B2                 push    esi
.text:004054B3                 push    ebx
.text:004054B4                 sub     esp, 2Ch
.text:004054B7                 mov     ebp, [esp+3Ch+arg_8]
.text:004054BB
.text:004054BB loc_4054BB:                             ; CODE XREF: .text:00405449↑j
.text:004054BB                 mov     [esp+3Ch+var_1C], 0
.text:004054C3                 mov     esi, [esp+3Ch+arg_0]
.text:004054C7                 cmp     ebp, 24h ; '$'
.text:004054CA                 ja      loc_4059EC
.text:004054D0
.text:004054D0 loc_4054D0:                             ; CODE XREF: .text:00405462↑j
.text:004054D0                 mov     edi, [esp+3Ch+arg_4]
.text:004054D4                 test    edi, edi
.text:004054D6                 jz      loc_4059E3
.text:004054DC
.text:004054DC loc_4054DC:                             ; CODE XREF: sub_4054B0+537↓j
.text:004054DC                 movzx   edx, byte ptr [esi]
.text:004054DF                 mov     ebx, esi
.text:004054E1                 mov     [esp+3Ch+var_1D], dl
.text:004054E5                 lea     esi, [esi+0]
.text:004054E9                 lea     edi, [edi+0]
.text:004054F0
.text:004054F0 loc_4054F0:                             ; CODE XREF: sub_4054B0+70↓j
.text:004054F0                 movzx   edx, [esp+3Ch+var_1D]
.text:004054F5                 mov     ecx, ds:__mb_cur_max
.text:004054FB
.text:004054FB loc_4054FB:                             ; CODE XREF: .text:00405487↑j
.text:004054FB                 cmp     dword ptr [ecx], 1
.text:004054FE                 jz      loc_4059D0
.text:00405504                 mov     [esp+3Ch+Type], 8 ; Type
.text:0040550C
.text:0040550C loc_40550C:                             ; CODE XREF: .text:00405496↑j
.text:0040550C                 mov     [esp+3Ch+C], edx ; C
.text:0040550F                 call    _isctype
.text:00405514
.text:00405514 loc_405514:                             ; CODE XREF: sub_4054B0+52E↓j
.text:00405514                 test    eax, eax
.text:00405516                 jz      short loc_405522
.text:00405518                 inc     ebx
.text:00405519                 movzx   eax, byte ptr [ebx]
.text:0040551C                 mov     [esp+3Ch+var_1D], al
.text:00405520                 jmp     short loc_4054F0
.text:00405522 ; ---------------------------------------------------------------------------
.text:00405522
.text:00405522 loc_405522:                             ; CODE XREF: sub_4054B0+66↑j
.text:00405522                 cmp     [esp+3Ch+var_1D], 2Dh ; '-'
.text:00405527                 mov     eax, 4
.text:0040552C                 jz      short loc_405585
.text:0040552E                 call    _errno
.text:00405533                 mov     dword ptr [eax], 0
.text:00405539                 mov     [esp+3Ch+Radix], ebp ; Radix
.text:0040553D                 mov     [esp+3Ch+Type], edi ; EndPtr
.text:00405541                 mov     [esp+3Ch+C], esi ; String
.text:00405544                 call    strtoul
.text:00405549                 mov     [esp+3Ch+var_18], eax
.text:0040554D                 mov     eax, [edi]
.text:0040554F                 cmp     eax, esi
.text:00405551                 jz      loc_40599C
.text:00405557                 call    _errno
.text:0040555C                 mov     ebp, [eax]
.text:0040555E                 test    ebp, ebp
.text:00405560                 jnz     loc_40597B
.text:00405566
.text:00405566 loc_405566:                             ; CODE XREF: sub_4054B0+4DD↓j
.text:00405566                                         ; sub_4054B0+51A↓j
.text:00405566                 mov     eax, [esp+3Ch+Str]
.text:0040556A                 test    eax, eax
.text:0040556C                 jz      short loc_405577
.text:0040556E                 mov     ecx, [edi]
.text:00405570                 movzx   eax, byte ptr [ecx]
.text:00405573                 test    al, al
.text:00405575                 jnz     short loc_40558D
.text:00405577
.text:00405577 loc_405577:                             ; CODE XREF: sub_4054B0+BC↑j
.text:00405577                                         ; sub_4054B0+26C↓j ...
.text:00405577                 mov     edx, [esp+3Ch+var_18]
.text:0040557B                 mov     esi, [esp+3Ch+arg_C]
.text:0040557F                 mov     eax, [esp+3Ch+var_1C]
.text:00405583                 mov     [esi], edx
.text:00405585
.text:00405585 loc_405585:                             ; CODE XREF: sub_4054B0+7C↑j
.text:00405585                                         ; sub_4054B0+112↓j ...
.text:00405585                 add     esp, 2Ch
.text:00405588                 pop     ebx
.text:00405589                 pop     esi
.text:0040558A                 pop     edi
.text:0040558B                 pop     ebp
.text:0040558C                 retn
.text:0040558D ; ---------------------------------------------------------------------------
.text:0040558D
.text:0040558D loc_40558D:                             ; CODE XREF: sub_4054B0+C5↑j
.text:0040558D                 mov     [esp+3Ch+var_24], 1
.text:00405595                 mov     edx, [esp+3Ch+Str]
.text:00405599                 movsx   esi, al
.text:0040559C                 mov     [esp+3Ch+Type], esi ; Val
.text:004055A0                 mov     ebx, 400h
.text:004055A5                 mov     [esp+3Ch+C], edx ; Str
.text:004055A8                 call    strchr
.text:004055AD                 test    eax, eax
.text:004055AF                 jnz     short loc_4055C4
.text:004055B1
.text:004055B1 def_405614:                             ; CODE XREF: sub_4054B0+162↓j
.text:004055B1                                         ; sub_4054B0+164↓j
.text:004055B1                                         ; DATA XREF: ...
.text:004055B1                 mov     eax, [esp+3Ch+var_1C] ; jumptable 00405614 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:004055B5                 mov     ebx, [esp+3Ch+var_18]
.text:004055B9                 mov     edi, [esp+3Ch+arg_C]
.text:004055BD                 or      eax, 2
.text:004055C0                 mov     [edi], ebx
.text:004055C2                 jmp     short loc_405585
.text:004055C4 ; ---------------------------------------------------------------------------
.text:004055C4
.text:004055C4 loc_4055C4:                             ; CODE XREF: sub_4054B0+FF↑j
.text:004055C4                 mov     [esp+3Ch+Type], 30h ; '0' ; Val
.text:004055CC                 mov     ebp, [esp+3Ch+Str]
.text:004055D0                 mov     [esp+3Ch+C], ebp ; Str
.text:004055D3                 call    strchr
.text:004055D8                 test    eax, eax
.text:004055DA                 jz      loc_405970
.text:004055E0                 mov     ecx, [edi]
.text:004055E2                 mov     [esp+3Ch+var_28], ecx
.text:004055E6                 movsx   eax, byte ptr [ecx+1]
.text:004055EA                 cmp     eax, 44h ; 'D'
.text:004055ED                 jz      loc_405939
.text:004055F3                 cmp     eax, 44h ; 'D'
.text:004055F6                 jg      loc_40594B
.text:004055FC                 cmp     eax, 42h ; 'B'
.text:004055FF                 jz      loc_405939
.text:00405605
.text:00405605 loc_405605:                             ; CODE XREF: sub_4054B0+496↓j
.text:00405605                                         ; sub_4054B0+49E↓j ...
.text:00405605                 mov     esi, [esp+3Ch+var_28]
.text:00405609                 movsx   eax, byte ptr [esi]
.text:0040560C                 sub     eax, 42h ; 'B'  ; switch 54 cases
.text:0040560F                 cmp     eax, 35h
.text:00405612                 ja      short def_405614 ; jumptable 00405614 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:00405614                 jmp     ds:jpt_405614[eax*4] ; switch jump
.text:00405614 ; ---------------------------------------------------------------------------
.text:0040561B                 align 4
.text:0040561C jpt_405614      dd offset loc_40573B, offset def_405614, offset def_405614
.text:0040561C                                         ; DATA XREF: sub_4054B0+164↑r
.text:0040561C                 dd offset loc_40574B, offset def_405614, offset loc_40583C ; jump table for switch statement
.text:0040561C                 dd offset def_405614, offset def_405614, offset def_405614
.text:0040561C                 dd offset loc_405879, offset def_405614, offset loc_4058AB
.text:0040561C                 dd offset def_405614, offset def_405614, offset loc_405785
.text:0040561C                 dd offset def_405614, offset def_405614, offset def_405614
.text:0040561C                 dd offset loc_4058E9, offset def_405614, offset def_405614
.text:0040561C                 dd offset def_405614, offset def_405614, offset loc_4057C2
.text:0040561C                 dd offset loc_4057FF, offset def_405614, offset def_405614
.text:0040561C                 dd offset def_405614, offset def_405614, offset def_405614
.text:0040561C                 dd offset def_405614, offset def_405614, offset loc_4056F4
.text:0040561C                 dd offset loc_405706, offset def_405614, offset def_405614
.text:0040561C                 dd offset def_405614, offset loc_40583C, offset def_405614
.text:0040561C                 dd offset def_405614, offset def_405614, offset loc_405879
.text:0040561C                 dd offset def_405614, offset loc_4058AB, offset def_405614
.text:0040561C                 dd offset def_405614, offset def_405614, offset def_405614
.text:0040561C                 dd offset def_405614, offset def_405614, offset loc_4058E9
.text:0040561C                 dd offset def_405614, offset def_405614, offset loc_405926
.text:004056F4 ; ---------------------------------------------------------------------------
.text:004056F4
.text:004056F4 loc_4056F4:                             ; CODE XREF: sub_4054B0+164↑j
.text:004056F4                                         ; DATA XREF: sub_4054B0:jpt_405614↑o
.text:004056F4                 mov     eax, [esp+3Ch+var_18] ; jumptable 00405614 case 98
.text:004056F8                 cmp     eax, 7FFFFFh
.text:004056FD                 ja      short loc_40572C
.text:004056FF                 shl     eax, 9
.text:00405702
.text:00405702 loc_405702:                             ; CODE XREF: sub_4054B0+299↓j
.text:00405702                                         ; sub_4054B0+484↓j
.text:00405702                 mov     [esp+3Ch+var_18], eax
.text:00405706
.text:00405706 loc_405706:                             ; CODE XREF: sub_4054B0+164↑j
.text:00405706                                         ; DATA XREF: sub_4054B0:jpt_405614↑o
.text:00405706                 xor     eax, eax        ; jumptable 00405614 case 99
.text:00405708
.text:00405708 loc_405708:                             ; CODE XREF: sub_4054B0+289↓j
.text:00405708                                         ; sub_4054B0+2CA↓j ...
.text:00405708                 or      [esp+3Ch+var_1C], eax
.text:0040570C                 mov     ebp, [esp+3Ch+var_28]
.text:00405710                 mov     ecx, [esp+3Ch+var_24]
.text:00405714                 add     ebp, ecx
.text:00405716                 mov     [edi], ebp
.text:00405718                 cmp     byte ptr [ebp+0], 0
.text:0040571C                 jz      loc_405577
.text:00405722                 or      [esp+3Ch+var_1C], 2
.text:00405727                 jmp     loc_405577
.text:0040572C ; ---------------------------------------------------------------------------
.text:0040572C
.text:0040572C loc_40572C:                             ; CODE XREF: sub_4054B0+24D↑j
.text:0040572C                                         ; sub_4054B0+294↓j ...
.text:0040572C                 mov     [esp+3Ch+var_18], 0FFFFFFFFh
.text:00405734                 mov     eax, 1
.text:00405739                 jmp     short loc_405708
.text:0040573B ; ---------------------------------------------------------------------------
.text:0040573B
.text:0040573B loc_40573B:                             ; CODE XREF: sub_4054B0+164↑j
.text:0040573B                                         ; DATA XREF: sub_4054B0:jpt_405614↑o
.text:0040573B                 mov     eax, [esp+3Ch+var_18] ; jumptable 00405614 case 66
.text:0040573F                 cmp     eax, 3FFFFFh
.text:00405744                 ja      short loc_40572C
.text:00405746                 shl     eax, 0Ah
.text:00405749                 jmp     short loc_405702
.text:0040574B ; ---------------------------------------------------------------------------
.text:0040574B
.text:0040574B loc_40574B:                             ; CODE XREF: sub_4054B0+164↑j
.text:0040574B                                         ; DATA XREF: sub_4054B0:jpt_405614↑o
.text:0040574B                 lea     ecx, [esp+3Ch+var_18] ; jumptable 00405614 case 69
.text:0040574F                 xor     ebp, ebp
.text:00405751                 mov     esi, 5
.text:00405756
.text:00405756 loc_405756:                             ; CODE XREF: sub_4054B0+2C8↓j
.text:00405756                 xor     edx, edx
.text:00405758                 mov     eax, 0FFFFFFFFh
.text:0040575D                 div     ebx
.text:0040575F                 mov     edx, [ecx]
.text:00405761                 cmp     eax, edx
.text:00405763                 jnb     short loc_40577C
.text:00405765                 mov     dword ptr [ecx], 0FFFFFFFFh
.text:0040576B                 mov     eax, 1
.text:00405770
.text:00405770 loc_405770:                             ; CODE XREF: sub_4054B0+2D3↓j
.text:00405770                 dec     esi
.text:00405771                 or      ebp, eax
.text:00405773                 cmp     esi, 0FFFFFFFFh
.text:00405776                 mov     eax, ebp
.text:00405778                 jnz     short loc_405756
.text:0040577A                 jmp     short loc_405708
.text:0040577C ; ---------------------------------------------------------------------------
.text:0040577C
.text:0040577C loc_40577C:                             ; CODE XREF: sub_4054B0+2B3↑j
.text:0040577C                 imul    edx, ebx
.text:0040577F                 xor     eax, eax
.text:00405781                 mov     [ecx], edx
.text:00405783                 jmp     short loc_405770
.text:00405785 ; ---------------------------------------------------------------------------
.text:00405785
.text:00405785 loc_405785:                             ; CODE XREF: sub_4054B0+164↑j
.text:00405785                                         ; DATA XREF: sub_4054B0:jpt_405614↑o
.text:00405785                 lea     ecx, [esp+3Ch+var_18] ; jumptable 00405614 case 80
.text:00405789                 xor     ebp, ebp
.text:0040578B                 mov     esi, 4
.text:00405790
.text:00405790 loc_405790:                             ; CODE XREF: sub_4054B0+302↓j
.text:00405790                 xor     edx, edx
.text:00405792                 mov     eax, 0FFFFFFFFh
.text:00405797                 div     ebx
.text:00405799                 mov     edx, [ecx]
.text:0040579B                 cmp     eax, edx
.text:0040579D                 jnb     short loc_4057B9
.text:0040579F                 mov     dword ptr [ecx], 0FFFFFFFFh
.text:004057A5                 mov     eax, 1
.text:004057AA
.text:004057AA loc_4057AA:                             ; CODE XREF: sub_4054B0+310↓j
.text:004057AA                 dec     esi
.text:004057AB                 or      ebp, eax
.text:004057AD                 cmp     esi, 0FFFFFFFFh
.text:004057B0                 mov     eax, ebp
.text:004057B2                 jnz     short loc_405790
.text:004057B4                 jmp     loc_405708
.text:004057B9 ; ---------------------------------------------------------------------------
.text:004057B9
.text:004057B9 loc_4057B9:                             ; CODE XREF: sub_4054B0+2ED↑j
.text:004057B9                 imul    edx, ebx
.text:004057BC                 xor     eax, eax
.text:004057BE                 mov     [ecx], edx
.text:004057C0                 jmp     short loc_4057AA
.text:004057C2 ; ---------------------------------------------------------------------------
.text:004057C2
.text:004057C2 loc_4057C2:                             ; CODE XREF: sub_4054B0+164↑j
.text:004057C2                                         ; DATA XREF: sub_4054B0:jpt_405614↑o
.text:004057C2                 lea     ecx, [esp+3Ch+var_18] ; jumptable 00405614 case 89
.text:004057C6                 xor     ebp, ebp
.text:004057C8                 mov     esi, 7
.text:004057CD
.text:004057CD loc_4057CD:                             ; CODE XREF: sub_4054B0+33F↓j
.text:004057CD                 xor     edx, edx
.text:004057CF                 mov     eax, 0FFFFFFFFh
.text:004057D4                 div     ebx
.text:004057D6                 mov     edx, [ecx]
.text:004057D8                 cmp     eax, edx
.text:004057DA                 jnb     short loc_4057F6
.text:004057DC                 mov     dword ptr [ecx], 0FFFFFFFFh
.text:004057E2                 mov     eax, 1
.text:004057E7
.text:004057E7 loc_4057E7:                             ; CODE XREF: sub_4054B0+34D↓j
.text:004057E7                 dec     esi
.text:004057E8                 or      ebp, eax
.text:004057EA                 cmp     esi, 0FFFFFFFFh
.text:004057ED                 mov     eax, ebp
.text:004057EF                 jnz     short loc_4057CD
.text:004057F1                 jmp     loc_405708
.text:004057F6 ; ---------------------------------------------------------------------------
.text:004057F6
.text:004057F6 loc_4057F6:                             ; CODE XREF: sub_4054B0+32A↑j
.text:004057F6                 imul    edx, ebx
.text:004057F9                 xor     eax, eax
.text:004057FB                 mov     [ecx], edx
.text:004057FD                 jmp     short loc_4057E7
.text:004057FF ; ---------------------------------------------------------------------------
.text:004057FF
.text:004057FF loc_4057FF:                             ; CODE XREF: sub_4054B0+164↑j
.text:004057FF                                         ; DATA XREF: sub_4054B0:jpt_405614↑o
.text:004057FF                 lea     ecx, [esp+3Ch+var_18] ; jumptable 00405614 case 90
.text:00405803                 xor     ebp, ebp
.text:00405805                 mov     esi, 6
.text:0040580A
.text:0040580A loc_40580A:                             ; CODE XREF: sub_4054B0+37C↓j
.text:0040580A                 xor     edx, edx
.text:0040580C                 mov     eax, 0FFFFFFFFh
.text:00405811                 div     ebx
.text:00405813                 mov     edx, [ecx]
.text:00405815                 cmp     eax, edx
.text:00405817                 jnb     short loc_405833
.text:00405819                 mov     dword ptr [ecx], 0FFFFFFFFh
.text:0040581F                 mov     eax, 1
.text:00405824
.text:00405824 loc_405824:                             ; CODE XREF: sub_4054B0+38A↓j
.text:00405824                 dec     esi
.text:00405825                 or      ebp, eax
.text:00405827                 cmp     esi, 0FFFFFFFFh
.text:0040582A                 mov     eax, ebp
.text:0040582C                 jnz     short loc_40580A
.text:0040582E                 jmp     loc_405708
.text:00405833 ; ---------------------------------------------------------------------------
.text:00405833
.text:00405833 loc_405833:                             ; CODE XREF: sub_4054B0+367↑j
.text:00405833                 imul    edx, ebx
.text:00405836                 xor     eax, eax
.text:00405838                 mov     [ecx], edx
.text:0040583A                 jmp     short loc_405824
.text:0040583C ; ---------------------------------------------------------------------------
.text:0040583C
.text:0040583C loc_40583C:                             ; CODE XREF: sub_4054B0+164↑j
.text:0040583C                                         ; DATA XREF: sub_4054B0:jpt_405614↑o
.text:0040583C                 lea     ecx, [esp+3Ch+var_18] ; jumptable 00405614 cases 71,103
.text:00405840                 xor     ebp, ebp
.text:00405842                 mov     esi, 2
.text:00405847
.text:00405847 loc_405847:                             ; CODE XREF: sub_4054B0+3B9↓j
.text:00405847                 xor     edx, edx
.text:00405849                 mov     eax, 0FFFFFFFFh
.text:0040584E                 div     ebx
.text:00405850                 mov     edx, [ecx]
.text:00405852                 cmp     eax, edx
.text:00405854                 jnb     short loc_405870
.text:00405856                 mov     dword ptr [ecx], 0FFFFFFFFh
.text:0040585C                 mov     eax, 1
.text:00405861
.text:00405861 loc_405861:                             ; CODE XREF: sub_4054B0+3C7↓j
.text:00405861                 dec     esi
.text:00405862                 or      ebp, eax
.text:00405864                 cmp     esi, 0FFFFFFFFh
.text:00405867                 mov     eax, ebp
.text:00405869                 jnz     short loc_405847
.text:0040586B                 jmp     loc_405708
.text:00405870 ; ---------------------------------------------------------------------------
.text:00405870
.text:00405870 loc_405870:                             ; CODE XREF: sub_4054B0+3A4↑j
.text:00405870                 imul    edx, ebx
.text:00405873                 xor     eax, eax
.text:00405875                 mov     [ecx], edx
.text:00405877                 jmp     short loc_405861
.text:00405879 ; ---------------------------------------------------------------------------
.text:00405879
.text:00405879 loc_405879:                             ; CODE XREF: sub_4054B0+164↑j
.text:00405879                                         ; DATA XREF: sub_4054B0:jpt_405614↑o
.text:00405879                 xor     edx, edx        ; jumptable 00405614 cases 75,107
.text:0040587B                 mov     eax, 0FFFFFFFFh
.text:00405880                 div     ebx
.text:00405882                 mov     edx, [esp+3Ch+var_18]
.text:00405886                 cmp     eax, edx
.text:00405888                 jnb     short loc_4058A0
.text:0040588A                 mov     [esp+3Ch+var_18], 0FFFFFFFFh
.text:00405892                 mov     edx, 1
.text:00405897
.text:00405897 loc_405897:                             ; CODE XREF: sub_4054B0+3F9↓j
.text:00405897                 xor     eax, eax
.text:00405899                 or      eax, edx
.text:0040589B                 jmp     loc_405708
.text:004058A0 ; ---------------------------------------------------------------------------
.text:004058A0
.text:004058A0 loc_4058A0:                             ; CODE XREF: sub_4054B0+3D8↑j
.text:004058A0                 imul    edx, ebx
.text:004058A3                 mov     [esp+3Ch+var_18], edx
.text:004058A7                 xor     edx, edx
.text:004058A9                 jmp     short loc_405897
.text:004058AB ; ---------------------------------------------------------------------------
.text:004058AB
.text:004058AB loc_4058AB:                             ; CODE XREF: sub_4054B0+164↑j
.text:004058AB                                         ; DATA XREF: sub_4054B0:jpt_405614↑o
.text:004058AB                 lea     ecx, [esp+3Ch+var_18] ; jumptable 00405614 cases 77,109
.text:004058AF                 xor     ebp, ebp
.text:004058B1                 mov     esi, 1
.text:004058B6
.text:004058B6 loc_4058B6:                             ; CODE XREF: sub_4054B0+42E↓j
.text:004058B6                 xor     edx, edx
.text:004058B8                 mov     eax, 0FFFFFFFFh
.text:004058BD                 div     ebx
.text:004058BF                 mov     edx, [ecx]
.text:004058C1                 cmp     eax, edx
.text:004058C3                 jnb     short loc_4058E0
.text:004058C5                 mov     dword ptr [ecx], 0FFFFFFFFh
.text:004058CB                 mov     eax, 1
.text:004058D0
.text:004058D0 loc_4058D0:                             ; CODE XREF: sub_4054B0+437↓j
.text:004058D0                 dec     esi
.text:004058D1                 or      ebp, eax
.text:004058D3                 cmp     esi, 0FFFFFFFFh
.text:004058D6                 mov     eax, ebp
.text:004058D8                 jz      loc_405708
.text:004058DE                 jmp     short loc_4058B6
.text:004058E0 ; ---------------------------------------------------------------------------
.text:004058E0
.text:004058E0 loc_4058E0:                             ; CODE XREF: sub_4054B0+413↑j
.text:004058E0                 imul    edx, ebx
.text:004058E3                 xor     eax, eax
.text:004058E5                 mov     [ecx], edx
.text:004058E7                 jmp     short loc_4058D0
.text:004058E9 ; ---------------------------------------------------------------------------
.text:004058E9
.text:004058E9 loc_4058E9:                             ; CODE XREF: sub_4054B0+164↑j
.text:004058E9                                         ; DATA XREF: sub_4054B0:jpt_405614↑o
.text:004058E9                 lea     ecx, [esp+3Ch+var_18] ; jumptable 00405614 cases 84,116
.text:004058ED                 xor     ebp, ebp
.text:004058EF                 mov     esi, 3
.text:004058F4
.text:004058F4 loc_4058F4:                             ; CODE XREF: sub_4054B0+466↓j
.text:004058F4                 xor     edx, edx
.text:004058F6                 mov     eax, 0FFFFFFFFh
.text:004058FB                 div     ebx
.text:004058FD                 mov     edx, [ecx]
.text:004058FF                 cmp     eax, edx
.text:00405901                 jnb     short loc_40591D
.text:00405903                 mov     dword ptr [ecx], 0FFFFFFFFh
.text:00405909                 mov     eax, 1
.text:0040590E
.text:0040590E loc_40590E:                             ; CODE XREF: sub_4054B0+474↓j
.text:0040590E                 dec     esi
.text:0040590F                 or      ebp, eax
.text:00405911                 cmp     esi, 0FFFFFFFFh
.text:00405914                 mov     eax, ebp
.text:00405916                 jnz     short loc_4058F4
.text:00405918                 jmp     loc_405708
.text:0040591D ; ---------------------------------------------------------------------------
.text:0040591D
.text:0040591D loc_40591D:                             ; CODE XREF: sub_4054B0+451↑j
.text:0040591D                 imul    edx, ebx
.text:00405920                 xor     eax, eax
.text:00405922                 mov     [ecx], edx
.text:00405924                 jmp     short loc_40590E
.text:00405926 ; ---------------------------------------------------------------------------
.text:00405926
.text:00405926 loc_405926:                             ; CODE XREF: sub_4054B0+164↑j
.text:00405926                                         ; DATA XREF: sub_4054B0:jpt_405614↑o
.text:00405926                 mov     eax, [esp+3Ch+var_18] ; jumptable 00405614 case 119
.text:0040592A                 test    eax, eax
.text:0040592C                 js      loc_40572C
.text:00405932                 add     eax, eax
.text:00405934                 jmp     loc_405702
.text:00405939 ; ---------------------------------------------------------------------------
.text:00405939
.text:00405939 loc_405939:                             ; CODE XREF: sub_4054B0+13D↑j
.text:00405939                                         ; sub_4054B0+14F↑j
.text:00405939                 mov     [esp+3Ch+var_24], 2
.text:00405941                 mov     ebx, 3E8h
.text:00405946                 jmp     loc_405605
.text:0040594B ; ---------------------------------------------------------------------------
.text:0040594B
.text:0040594B loc_40594B:                             ; CODE XREF: sub_4054B0+146↑j
.text:0040594B                 cmp     eax, 69h ; 'i'
.text:0040594E                 jnz     loc_405605
.text:00405954                 mov     edx, [esp+3Ch+var_28]
.text:00405958                 cmp     byte ptr [edx+2], 42h ; 'B'
.text:0040595C                 jnz     loc_405605
.text:00405962                 mov     [esp+3Ch+var_24], 3
.text:0040596A                 jmp     loc_405605
.text:0040596A ; ---------------------------------------------------------------------------
.text:0040596F                 align 10h
.text:00405970
.text:00405970 loc_405970:                             ; CODE XREF: sub_4054B0+12A↑j
.text:00405970                 mov     eax, [edi]
.text:00405972                 mov     [esp+3Ch+var_28], eax
.text:00405976                 jmp     loc_405605
.text:0040597B ; ---------------------------------------------------------------------------
.text:0040597B
.text:0040597B loc_40597B:                             ; CODE XREF: sub_4054B0+B0↑j
.text:0040597B                 call    _errno
.text:00405980                 cmp     dword ptr [eax], 22h ; '"'
.text:00405983                 jnz     short loc_405992
.text:00405985                 mov     [esp+3Ch+var_1C], 1
.text:0040598D                 jmp     loc_405566
.text:00405992 ; ---------------------------------------------------------------------------
.text:00405992
.text:00405992 loc_405992:                             ; CODE XREF: sub_4054B0+4D3↑j
.text:00405992                                         ; sub_4054B0+4F2↓j ...
.text:00405992                 mov     eax, 4
.text:00405997                 jmp     loc_405585
.text:0040599C ; ---------------------------------------------------------------------------
.text:0040599C
.text:0040599C loc_40599C:                             ; CODE XREF: sub_4054B0+A1↑j
.text:0040599C                 mov     edx, [esp+3Ch+Str]
.text:004059A0                 test    edx, edx
.text:004059A2                 jz      short loc_405992
.text:004059A4                 movzx   eax, byte ptr [eax]
.text:004059A7                 test    al, al
.text:004059A9                 jz      short loc_405992
.text:004059AB                 mov     ebx, [esp+3Ch+Str]
.text:004059AF                 movsx   esi, al
.text:004059B2                 mov     [esp+3Ch+Type], esi ; Val
.text:004059B6                 mov     [esp+3Ch+C], ebx ; Str
.text:004059B9                 call    strchr
.text:004059BE                 test    eax, eax
.text:004059C0                 jz      short loc_405992
.text:004059C2                 mov     [esp+3Ch+var_18], 1
.text:004059CA                 jmp     loc_405566
.text:004059CA ; ---------------------------------------------------------------------------
.text:004059CF                 align 10h
.text:004059D0
.text:004059D0 loc_4059D0:                             ; CODE XREF: sub_4054B0+4E↑j
.text:004059D0                 mov     eax, ds:_pctype
.text:004059D5                 mov     ecx, [eax]
.text:004059D7                 movzx   eax, word ptr [ecx+edx*2]
.text:004059DB                 and     eax, 8
.text:004059DE                 jmp     loc_405514
.text:004059E3 ; ---------------------------------------------------------------------------
.text:004059E3
.text:004059E3 loc_4059E3:                             ; CODE XREF: sub_4054B0+26↑j
.text:004059E3                 lea     edi, [esp+3Ch+var_14]
.text:004059E7                 jmp     loc_4054DC
.text:004059EC ; ---------------------------------------------------------------------------
.text:004059EC
.text:004059EC loc_4059EC:                             ; CODE XREF: sub_4054B0+1A↑j
.text:004059EC                 mov     [esp+3Ch+Radix], 70h ; 'p'
.text:004059F4                 mov     [esp+3Ch+Type], offset loc_405440
.text:004059FC                 mov     [esp+3Ch+C], offset loc_405480
.text:00405A03                 call    _assert
.text:00405A03 sub_4054B0      endp
.text:00405A03
.text:00405A03 ; ---------------------------------------------------------------------------
.text:00405A08                 align 20h
.text:00405A20
.text:00405A20 ; =============== S U B R O U T I N E =======================================
.text:00405A20
.text:00405A20
.text:00405A20 sub_405A20      proc near               ; CODE XREF: sub_401A30+D4↑p
.text:00405A20
.text:00405A20 var_1C          = dword ptr -1Ch
.text:00405A20 var_18          = dword ptr -18h
.text:00405A20 var_14          = dword ptr -14h
.text:00405A20 var_10          = dword ptr -10h
.text:00405A20 var_C           = dword ptr -0Ch
.text:00405A20 var_8           = dword ptr -8
.text:00405A20 var_4           = dword ptr -4
.text:00405A20 arg_0           = dword ptr  4
.text:00405A20 arg_4           = dword ptr  8
.text:00405A20 arg_8           = dword ptr  0Ch
.text:00405A20 arg_C           = dword ptr  10h
.text:00405A20 arg_10          = dword ptr  14h
.text:00405A20
.text:00405A20                 sub     esp, 1Ch
.text:00405A23                 mov     edx, [esp+1Ch+arg_C]
.text:00405A27                 mov     [esp+1Ch+var_4], 0
.text:00405A2F                 mov     ecx, [esp+1Ch+arg_10]
.text:00405A33                 mov     [esp+1Ch+var_8], 0
.text:00405A3B                 mov     [esp+1Ch+var_10], edx
.text:00405A3F                 mov     edx, [esp+1Ch+arg_4]
.text:00405A43                 mov     [esp+1Ch+var_C], ecx
.text:00405A47                 mov     ecx, [esp+1Ch+arg_8]
.text:00405A4B                 mov     [esp+1Ch+var_18], edx
.text:00405A4F                 mov     edx, [esp+1Ch+arg_0]
.text:00405A53                 mov     [esp+1Ch+var_14], ecx
.text:00405A57                 mov     [esp+1Ch+var_1C], edx
.text:00405A5A                 call    sub_403EC0
.text:00405A5F                 add     esp, 1Ch
.text:00405A62                 retn
.text:00405A62 sub_405A20      endp
.text:00405A62
.text:00405A62 ; ---------------------------------------------------------------------------
.text:00405A63                 align 10h
.text:00405A70                 sub     esp, 2Ch
.text:00405A73                 mov     edx, [esp+44h]
.text:00405A77                 mov     dword ptr [esp+18h], 0
.text:00405A7F                 mov     ecx, [esp+40h]
.text:00405A83                 mov     dword ptr [esp+14h], 0
.text:00405A8B                 mov     [esp+1Ch], edx
.text:00405A8F                 mov     edx, [esp+3Ch]
.text:00405A93                 mov     [esp+10h], ecx
.text:00405A97                 mov     ecx, [esp+38h]
.text:00405A9B                 mov     [esp+0Ch], edx
.text:00405A9F                 mov     edx, [esp+34h]
.text:00405AA3                 mov     [esp+8], ecx
.text:00405AA7                 mov     [esp+4], edx
.text:00405AAB                 mov     edx, [esp+30h]
.text:00405AAF                 mov     [esp], edx
.text:00405AB2                 call    loc_403330
.text:00405AB7                 add     esp, 2Ch
.text:00405ABA                 retn
.text:00405ABA ; ---------------------------------------------------------------------------
.text:00405ABB                 align 10h
.text:00405AC0                 sub     esp, 1Ch
.text:00405AC3                 mov     edx, [esp+2Ch]
.text:00405AC7                 mov     dword ptr [esp+18h], 0
.text:00405ACF                 mov     ecx, [esp+30h]
.text:00405AD3                 mov     dword ptr [esp+14h], 1
.text:00405ADB                 mov     [esp+0Ch], edx
.text:00405ADF                 mov     edx, [esp+24h]
.text:00405AE3                 mov     [esp+10h], ecx
.text:00405AE7                 mov     ecx, [esp+28h]
.text:00405AEB                 mov     [esp+4], edx
.text:00405AEF                 mov     edx, [esp+20h]
.text:00405AF3                 mov     [esp+8], ecx
.text:00405AF7                 mov     [esp], edx
.text:00405AFA                 call    sub_403EC0
.text:00405AFF                 add     esp, 1Ch
.text:00405B02                 retn
.text:00405B02 ; ---------------------------------------------------------------------------
.text:00405B03                 align 10h
.text:00405B10                 sub     esp, 2Ch
.text:00405B13                 mov     edx, [esp+44h]
.text:00405B17                 mov     dword ptr [esp+18h], 0
.text:00405B1F                 mov     ecx, [esp+40h]
.text:00405B23                 mov     dword ptr [esp+14h], 1
.text:00405B2B                 mov     [esp+1Ch], edx
.text:00405B2F                 mov     edx, [esp+3Ch]
.text:00405B33                 mov     [esp+10h], ecx
.text:00405B37                 mov     ecx, [esp+38h]
.text:00405B3B                 mov     [esp+0Ch], edx
.text:00405B3F                 mov     edx, [esp+34h]
.text:00405B43                 mov     [esp+8], ecx
.text:00405B47                 mov     [esp+4], edx
.text:00405B4B                 mov     edx, [esp+30h]
.text:00405B4F                 mov     [esp], edx
.text:00405B52                 call    loc_403330
.text:00405B57                 add     esp, 2Ch
.text:00405B5A                 retn
.text:00405B5A ; ---------------------------------------------------------------------------
.text:00405B5B                 align 10h
.text:00405B60                 mov     edx, [esp+4]
.text:00405B64                 mov     ds:dword_4120B0, edx
.text:00405B6A                 retn
.text:00405B6A ; ---------------------------------------------------------------------------
.text:00405B6B aWriteError     db 'write error',0      ; DATA XREF: sub_405B90:loc_405BD9↓o
.text:00405B77 ; const char aSS_0[]
.text:00405B77 aSS_0           db '%s: %s',0           ; DATA XREF: sub_405B90+77↓o
.text:00405B7E ; const char aS_3[]
.text:00405B7E aS_3            db '%s',0               ; DATA XREF: sub_405B90+A0↓o
.text:00405B81 ; ---------------------------------------------------------------------------
.text:00405B81                 jmp     short sub_405B90
.text:00405B81 ; ---------------------------------------------------------------------------
.text:00405B83                 align 10h
.text:00405B90
.text:00405B90 ; =============== S U B R O U T I N E =======================================
.text:00405B90
.text:00405B90
.text:00405B90 ; void __cdecl sub_405B90()
.text:00405B90 sub_405B90      proc near               ; CODE XREF: .text:00405B81↑j
.text:00405B90                                         ; DATA XREF: sub_401A30+77↑o
.text:00405B90
.text:00405B90 Stream          = dword ptr -2Ch
.text:00405B90 ErrorMessage    = dword ptr -28h
.text:00405B90 var_24          = dword ptr -24h
.text:00405B90 var_20          = byte ptr -20h
.text:00405B90 var_1C          = dword ptr -1Ch
.text:00405B90 var_9           = byte ptr -9
.text:00405B90
.text:00405B90                 push    esi
.text:00405B91                 push    ebx
.text:00405B92                 sub     esp, 24h
.text:00405B95                 mov     edx, ds:_iob
.text:00405B9B                 mov     ecx, [edx+2Ch]
.text:00405B9E                 lea     esi, [edx+20h]
.text:00405BA1                 shr     ecx, 5
.text:00405BA4                 mov     bl, cl
.text:00405BA6                 mov     ecx, [edx+20h]
.text:00405BA9                 and     bl, 1
.text:00405BAC                 cmp     ecx, [esi+8]
.text:00405BAF                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00405BB2                 setz    [esp+2Ch+var_9]
.text:00405BB7                 call    fclose
.text:00405BBC                 test    eax, eax
.text:00405BBE                 setnz   al
.text:00405BC1                 test    bl, bl
.text:00405BC3                 jnz     loc_405C53
.text:00405BC9                 test    al, al
.text:00405BCB                 jz      short loc_405C20
.text:00405BCD
.text:00405BCD loc_405BCD:                             ; CODE XREF: sub_405B90+CD↓j
.text:00405BCD                 call    _errno
.text:00405BD2                 mov     esi, [eax]
.text:00405BD4
.text:00405BD4 loc_405BD4:                             ; CODE XREF: sub_405B90+C7↓j
.text:00405BD4                 cmp     esi, 9
.text:00405BD7                 jz      short loc_405C46
.text:00405BD9
.text:00405BD9 loc_405BD9:                             ; CODE XREF: sub_405B90+B8↓j
.text:00405BD9                                         ; sub_405B90+C1↓j
.text:00405BD9                 mov     [esp+2Ch+Stream], offset aWriteError ; "write error"
.text:00405BE0                 call    ds:libintl_gettext
.text:00405BE6                 mov     ebx, eax
.text:00405BE8                 mov     eax, ds:dword_4120B0
.text:00405BED                 test    eax, eax
.text:00405BEF                 jz      short loc_405C26
.text:00405BF1                 mov     [esp+2Ch+Stream], eax ; char *
.text:00405BF4                 call    sub_407380
.text:00405BF9                 mov     dword ptr [esp+2Ch+var_20], eax ; char
.text:00405BFD                 mov     edx, Code
.text:00405C03                 mov     [esp+2Ch+var_1C], ebx
.text:00405C07                 mov     [esp+2Ch+var_24], offset aSS_0 ; "%s: %s"
.text:00405C0F                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:00405C13                 mov     [esp+2Ch+Stream], edx ; Code
.text:00405C16                 call    sub_407720
.text:00405C1B                 nop
.text:00405C1C                 lea     esi, [esi+0]
.text:00405C20
.text:00405C20 loc_405C20:                             ; CODE XREF: sub_405B90+3B↑j
.text:00405C20                                         ; sub_405B90+B4↓j ...
.text:00405C20                 add     esp, 24h
.text:00405C23                 pop     ebx
.text:00405C24                 pop     esi
.text:00405C25                 retn
.text:00405C26 ; ---------------------------------------------------------------------------
.text:00405C26
.text:00405C26 loc_405C26:                             ; CODE XREF: sub_405B90+5F↑j
.text:00405C26                 mov     dword ptr [esp+2Ch+var_20], ebx ; char
.text:00405C2A                 mov     ebx, Code
.text:00405C30                 mov     [esp+2Ch+var_24], offset aS_3 ; "%s"
.text:00405C38                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:00405C3C                 mov     [esp+2Ch+Stream], ebx ; Code
.text:00405C3F                 call    sub_407720
.text:00405C44                 jmp     short loc_405C20
.text:00405C46 ; ---------------------------------------------------------------------------
.text:00405C46
.text:00405C46 loc_405C46:                             ; CODE XREF: sub_405B90+47↑j
.text:00405C46                 test    bl, bl
.text:00405C48                 jnz     short loc_405BD9
.text:00405C4A                 cmp     [esp+2Ch+var_9], 0
.text:00405C4F                 jnz     short loc_405C20
.text:00405C51                 jmp     short loc_405BD9
.text:00405C53 ; ---------------------------------------------------------------------------
.text:00405C53
.text:00405C53 loc_405C53:                             ; CODE XREF: sub_405B90+33↑j
.text:00405C53                 xor     esi, esi
.text:00405C55                 test    al, al
.text:00405C57                 jz      loc_405BD4
.text:00405C5D                 jmp     loc_405BCD
.text:00405C5D sub_405B90      endp
.text:00405C5D
.text:00405C5D ; ---------------------------------------------------------------------------
.text:00405C62                 align 10h
.text:00405C70
.text:00405C70 ; =============== S U B R O U T I N E =======================================
.text:00405C70
.text:00405C70
.text:00405C70 sub_405C70      proc near               ; CODE XREF: sub_402600+39↑p
.text:00405C70                                         ; sub_402950+39↑p ...
.text:00405C70
.text:00405C70 var_1C          = dword ptr -1Ch
.text:00405C70 var_18          = dword ptr -18h
.text:00405C70 var_14          = dword ptr -14h
.text:00405C70 arg_0           = dword ptr  4
.text:00405C70 arg_4           = dword ptr  8
.text:00405C70 arg_8           = dword ptr  0Ch
.text:00405C70
.text:00405C70                 push    ebp
.text:00405C71                 push    edi
.text:00405C72                 xor     edi, edi
.text:00405C74                 push    esi
.text:00405C75                 push    ebx
.text:00405C76                 sub     esp, 0Ch
.text:00405C79                 mov     ebx, [esp+1Ch+arg_8]
.text:00405C7D                 mov     ebp, [esp+1Ch+arg_0]
.text:00405C81                 mov     esi, [esp+1Ch+arg_4]
.text:00405C85                 test    ebx, ebx
.text:00405C87                 jnz     short loc_405C93
.text:00405C89
.text:00405C89 loc_405C89:                             ; CODE XREF: sub_405C70+36↓j
.text:00405C89                                         ; sub_405C70+44↓j ...
.text:00405C89                 add     esp, 0Ch
.text:00405C8C                 mov     eax, edi
.text:00405C8E                 pop     ebx
.text:00405C8F                 pop     esi
.text:00405C90                 pop     edi
.text:00405C91                 pop     ebp
.text:00405C92                 retn
.text:00405C93 ; ---------------------------------------------------------------------------
.text:00405C93
.text:00405C93 loc_405C93:                             ; CODE XREF: sub_405C70+17↑j
.text:00405C93                                         ; sub_405C70+42↓j
.text:00405C93                 mov     [esp+1Ch+var_14], ebx
.text:00405C97                 mov     [esp+1Ch+var_18], esi
.text:00405C9B                 mov     [esp+1Ch+var_1C], ebp
.text:00405C9E                 call    sub_4075F0
.text:00405CA3                 cmp     eax, 0FFFFFFFFh
.text:00405CA6                 jz      short loc_405C89
.text:00405CA8                 test    eax, eax
.text:00405CAA                 jz      short loc_405CB6
.text:00405CAC                 add     edi, eax
.text:00405CAE                 add     esi, eax
.text:00405CB0                 sub     ebx, eax
.text:00405CB2                 jnz     short loc_405C93
.text:00405CB4                 jmp     short loc_405C89
.text:00405CB6 ; ---------------------------------------------------------------------------
.text:00405CB6
.text:00405CB6 loc_405CB6:                             ; CODE XREF: sub_405C70+3A↑j
.text:00405CB6                 call    _errno
.text:00405CBB                 mov     dword ptr [eax], 0
.text:00405CC1                 jmp     short loc_405C89
.text:00405CC1 sub_405C70      endp
.text:00405CC1
.text:00405CC1 ; ---------------------------------------------------------------------------
.text:00405CC3                 align 10h
.text:00405CD0
.text:00405CD0 ; =============== S U B R O U T I N E =======================================
.text:00405CD0
.text:00405CD0
.text:00405CD0 sub_405CD0      proc near               ; CODE XREF: sub_402600+E2↑p
.text:00405CD0                                         ; sub_402600+231↑p ...
.text:00405CD0
.text:00405CD0 var_1C          = dword ptr -1Ch
.text:00405CD0 var_18          = dword ptr -18h
.text:00405CD0 var_14          = dword ptr -14h
.text:00405CD0 arg_0           = dword ptr  4
.text:00405CD0 arg_4           = dword ptr  8
.text:00405CD0 arg_8           = dword ptr  0Ch
.text:00405CD0
.text:00405CD0                 push    ebp
.text:00405CD1                 push    edi
.text:00405CD2                 xor     edi, edi
.text:00405CD4                 push    esi
.text:00405CD5                 push    ebx
.text:00405CD6                 sub     esp, 0Ch
.text:00405CD9                 mov     ebx, [esp+1Ch+arg_8]
.text:00405CDD                 mov     ebp, [esp+1Ch+arg_0]
.text:00405CE1                 mov     esi, [esp+1Ch+arg_4]
.text:00405CE5                 test    ebx, ebx
.text:00405CE7                 jnz     short loc_405CF3
.text:00405CE9
.text:00405CE9 loc_405CE9:                             ; CODE XREF: sub_405CD0+36↓j
.text:00405CE9                                         ; sub_405CD0+44↓j ...
.text:00405CE9                 add     esp, 0Ch
.text:00405CEC                 mov     eax, edi
.text:00405CEE                 pop     ebx
.text:00405CEF                 pop     esi
.text:00405CF0                 pop     edi
.text:00405CF1                 pop     ebp
.text:00405CF2                 retn
.text:00405CF3 ; ---------------------------------------------------------------------------
.text:00405CF3
.text:00405CF3 loc_405CF3:                             ; CODE XREF: sub_405CD0+17↑j
.text:00405CF3                                         ; sub_405CD0+42↓j
.text:00405CF3                 mov     [esp+1Ch+var_14], ebx
.text:00405CF7                 mov     [esp+1Ch+var_18], esi
.text:00405CFB                 mov     [esp+1Ch+var_1C], ebp
.text:00405CFE                 call    sub_407660
.text:00405D03                 cmp     eax, 0FFFFFFFFh
.text:00405D06                 jz      short loc_405CE9
.text:00405D08                 test    eax, eax
.text:00405D0A                 jz      short loc_405D16
.text:00405D0C                 add     edi, eax
.text:00405D0E                 add     esi, eax
.text:00405D10                 sub     ebx, eax
.text:00405D12                 jnz     short loc_405CF3
.text:00405D14                 jmp     short loc_405CE9
.text:00405D16 ; ---------------------------------------------------------------------------
.text:00405D16
.text:00405D16 loc_405D16:                             ; CODE XREF: sub_405CD0+3A↑j
.text:00405D16                 call    _errno
.text:00405D1B                 mov     dword ptr [eax], 1Ch
.text:00405D21                 jmp     short loc_405CE9
.text:00405D21 sub_405CD0      endp
.text:00405D21
.text:00405D21 ; ---------------------------------------------------------------------------
.text:00405D23                 align 10h
.text:00405D30
.text:00405D30 ; =============== S U B R O U T I N E =======================================
.text:00405D30
.text:00405D30
.text:00405D30 sub_405D30      proc near               ; CODE XREF: sub_402F20+160↑p
.text:00405D30                                         ; .text:00405DF9↓p ...
.text:00405D30
.text:00405D30 arg_0           = dword ptr  4
.text:00405D30
.text:00405D30                 mov     ecx, [esp+arg_0]
.text:00405D34                 movzx   eax, byte ptr [ecx]
.text:00405D37                 test    al, al
.text:00405D39                 jz      short loc_405D41
.text:00405D3B                 cmp     byte ptr [ecx+1], 3Ah ; ':'
.text:00405D3F                 jz      short loc_405D87
.text:00405D41
.text:00405D41 loc_405D41:                             ; CODE XREF: sub_405D30+9↑j
.text:00405D41                                         ; sub_405D30+5D↓j
.text:00405D41                 test    al, al
.text:00405D43                 mov     edx, ecx
.text:00405D45                 jz      short loc_405D60
.text:00405D47                 movzx   eax, byte ptr [ecx]
.text:00405D4A                 lea     esi, [esi+0]
.text:00405D50
.text:00405D50 loc_405D50:                             ; CODE XREF: sub_405D30+2E↓j
.text:00405D50                 cmp     al, 2Fh ; '/'
.text:00405D52                 jz      short loc_405D63
.text:00405D54                 cmp     al, 5Ch ; '\'
.text:00405D56                 jz      short loc_405D63
.text:00405D58
.text:00405D58 loc_405D58:                             ; CODE XREF: sub_405D30+45↓j
.text:00405D58                 inc     edx
.text:00405D59                 movzx   eax, byte ptr [edx]
.text:00405D5C                 test    al, al
.text:00405D5E                 jnz     short loc_405D50
.text:00405D60
.text:00405D60 loc_405D60:                             ; CODE XREF: sub_405D30+15↑j
.text:00405D60                                         ; sub_405D30+50↓j ...
.text:00405D60                 mov     eax, ecx
.text:00405D62                 retn
.text:00405D63 ; ---------------------------------------------------------------------------
.text:00405D63
.text:00405D63 loc_405D63:                             ; CODE XREF: sub_405D30+22↑j
.text:00405D63                                         ; sub_405D30+26↑j ...
.text:00405D63                 inc     edx
.text:00405D64                 movzx   eax, byte ptr [edx]
.text:00405D67                 cmp     al, 2Fh ; '/'
.text:00405D69                 jz      short loc_405D63
.text:00405D6B                 cmp     al, 5Ch ; '\'
.text:00405D6D                 jz      short loc_405D63
.text:00405D6F                 test    al, al
.text:00405D71                 jz      short loc_405D77
.text:00405D73                 mov     ecx, edx
.text:00405D75                 jmp     short loc_405D58
.text:00405D77 ; ---------------------------------------------------------------------------
.text:00405D77
.text:00405D77 loc_405D77:                             ; CODE XREF: sub_405D30+41↑j
.text:00405D77                 movzx   eax, byte ptr [ecx]
.text:00405D7A                 cmp     al, 2Fh ; '/'
.text:00405D7C                 jz      short loc_405D82
.text:00405D7E                 cmp     al, 5Ch ; '\'
.text:00405D80                 jnz     short loc_405D60
.text:00405D82
.text:00405D82 loc_405D82:                             ; CODE XREF: sub_405D30+4C↑j
.text:00405D82                 lea     ecx, [edx-1]
.text:00405D85                 jmp     short loc_405D60
.text:00405D87 ; ---------------------------------------------------------------------------
.text:00405D87
.text:00405D87 loc_405D87:                             ; CODE XREF: sub_405D30+F↑j
.text:00405D87                 add     ecx, 2
.text:00405D8A                 movzx   eax, byte ptr [ecx]
.text:00405D8D                 jmp     short loc_405D41
.text:00405D8D sub_405D30      endp
.text:00405D8D
.text:00405D8D ; ---------------------------------------------------------------------------
.text:00405D8F                 align 10h
.text:00405D90
.text:00405D90 ; =============== S U B R O U T I N E =======================================
.text:00405D90
.text:00405D90
.text:00405D90 ; int __cdecl sub_405D90(char *)
.text:00405D90 sub_405D90      proc near               ; CODE XREF: sub_402F20+168↑p
.text:00405D90
.text:00405D90 Str             = dword ptr -0Ch
.text:00405D90 arg_0           = dword ptr  4
.text:00405D90
.text:00405D90                 push    ebx
.text:00405D91                 sub     esp, 8
.text:00405D94                 mov     ebx, [esp+0Ch+arg_0]
.text:00405D98                 mov     [esp+0Ch+Str], ebx ; Str
.text:00405D9B                 call    strlen
.text:00405DA0                 cmp     eax, 1
.text:00405DA3                 jbe     short loc_405DC0
.text:00405DA5                 movzx   edx, byte ptr [eax+ebx-1]
.text:00405DAA                 cmp     dl, 2Fh ; '/'
.text:00405DAD                 jz      short loc_405DC5
.text:00405DAF                 cmp     dl, 5Ch ; '\'
.text:00405DB2                 jz      short loc_405DC5
.text:00405DB4                 lea     esi, [esi+0]
.text:00405DBA                 lea     edi, [edi+0]
.text:00405DC0
.text:00405DC0 loc_405DC0:                             ; CODE XREF: sub_405D90+13↑j
.text:00405DC0                                         ; sub_405D90+39↓j ...
.text:00405DC0                 add     esp, 8
.text:00405DC3                 pop     ebx
.text:00405DC4                 retn
.text:00405DC5 ; ---------------------------------------------------------------------------
.text:00405DC5
.text:00405DC5 loc_405DC5:                             ; CODE XREF: sub_405D90+1D↑j
.text:00405DC5                                         ; sub_405D90+22↑j ...
.text:00405DC5                 dec     eax
.text:00405DC6                 cmp     eax, 1
.text:00405DC9                 jbe     short loc_405DC0
.text:00405DCB                 movzx   edx, byte ptr [eax+ebx-1]
.text:00405DD0                 cmp     dl, 2Fh ; '/'
.text:00405DD3                 jz      short loc_405DC5
.text:00405DD5                 cmp     dl, 5Ch ; '\'
.text:00405DD8                 jz      short loc_405DC5
.text:00405DDA                 jmp     short loc_405DC0
.text:00405DDA sub_405D90      endp
.text:00405DDA
.text:00405DDA ; ---------------------------------------------------------------------------
.text:00405DDC                 align 10h
.text:00405DE0                 push    esi
.text:00405DE1                 push    ebx
.text:00405DE2                 sub     esp, 4
.text:00405DE5                 mov     ebx, [esp+10h]
.text:00405DE9                 cmp     byte ptr [ebx], 0
.text:00405DEC                 jz      short loc_405DF4
.text:00405DEE                 cmp     byte ptr [ebx+1], 3Ah ; ':'
.text:00405DF2                 jz      short loc_405E46
.text:00405DF4
.text:00405DF4 loc_405DF4:                             ; CODE XREF: .text:00405DEC↑j
.text:00405DF4                 xor     esi, esi
.text:00405DF6
.text:00405DF6 loc_405DF6:                             ; CODE XREF: .text:00405E4B↓j
.text:00405DF6                 mov     [esp], ebx
.text:00405DF9                 call    sub_405D30
.text:00405DFE                 sub     eax, ebx
.text:00405E00                 cmp     esi, eax
.text:00405E02                 jnb     short loc_405E26
.text:00405E04                 lea     esi, [esi+0]
.text:00405E0A                 lea     edi, [edi+0]
.text:00405E10
.text:00405E10 loc_405E10:                             ; CODE XREF: .text:00405E24↓j
.text:00405E10                 movzx   edx, byte ptr [eax+ebx-1]
.text:00405E15                 cmp     dl, 2Fh ; '/'
.text:00405E18                 jz      short loc_405E21
.text:00405E1A                 cmp     dl, 5Ch ; '\'
.text:00405E1D                 mov     ecx, eax
.text:00405E1F                 jnz     short loc_405E39
.text:00405E21
.text:00405E21 loc_405E21:                             ; CODE XREF: .text:00405E18↑j
.text:00405E21                 dec     eax
.text:00405E22                 cmp     esi, eax
.text:00405E24                 jb      short loc_405E10
.text:00405E26
.text:00405E26 loc_405E26:                             ; CODE XREF: .text:00405E02↑j
.text:00405E26                 movzx   edx, byte ptr [esi+ebx]
.text:00405E2A                 xor     eax, eax
.text:00405E2C                 cmp     dl, 2Fh ; '/'
.text:00405E2F                 jz      short loc_405E3F
.text:00405E31                 cmp     dl, 5Ch ; '\'
.text:00405E34                 jz      short loc_405E3F
.text:00405E36
.text:00405E36 loc_405E36:                             ; CODE XREF: .text:00405E44↓j
.text:00405E36                 lea     ecx, [eax+esi]
.text:00405E39
.text:00405E39 loc_405E39:                             ; CODE XREF: .text:00405E1F↑j
.text:00405E39                 pop     edx
.text:00405E3A                 mov     eax, ecx
.text:00405E3C                 pop     ebx
.text:00405E3D                 pop     esi
.text:00405E3E                 retn
.text:00405E3F ; ---------------------------------------------------------------------------
.text:00405E3F
.text:00405E3F loc_405E3F:                             ; CODE XREF: .text:00405E2F↑j
.text:00405E3F                                         ; .text:00405E34↑j
.text:00405E3F                 mov     eax, 1
.text:00405E44                 jmp     short loc_405E36
.text:00405E46 ; ---------------------------------------------------------------------------
.text:00405E46
.text:00405E46 loc_405E46:                             ; CODE XREF: .text:00405DF2↑j
.text:00405E46                 mov     esi, 2
.text:00405E4B                 jmp     short loc_405DF6
.text:00405E4B ; ---------------------------------------------------------------------------
.text:00405E4D                 align 10h
.text:00405E50
.text:00405E50 ; =============== S U B R O U T I N E =======================================
.text:00405E50
.text:00405E50
.text:00405E50 ; int __cdecl sub_405E50(void *)
.text:00405E50 sub_405E50      proc near               ; CODE XREF: sub_402F20+13A↑p
.text:00405E50
.text:00405E50 var_2C          = dword ptr -2Ch
.text:00405E50 Src             = dword ptr -28h
.text:00405E50 Size            = dword ptr -24h
.text:00405E50 var_11          = byte ptr -11h
.text:00405E50 arg_0           = dword ptr  4
.text:00405E50
.text:00405E50                 push    ebp
.text:00405E51                 push    edi
.text:00405E52                 push    esi
.text:00405E53                 push    ebx
.text:00405E54                 sub     esp, 1Ch
.text:00405E57                 mov     edi, [esp+2Ch+arg_0]
.text:00405E5B                 cmp     byte ptr [edi], 0
.text:00405E5E                 jz      short loc_405E6A
.text:00405E60                 cmp     byte ptr [edi+1], 3Ah ; ':'
.text:00405E64                 jz      loc_405F07
.text:00405E6A
.text:00405E6A loc_405E6A:                             ; CODE XREF: sub_405E50+E↑j
.text:00405E6A                 xor     esi, esi
.text:00405E6C
.text:00405E6C loc_405E6C:                             ; CODE XREF: sub_405E50+BC↓j
.text:00405E6C                 mov     [esp+2Ch+var_2C], edi
.text:00405E6F                 call    sub_405D30
.text:00405E74                 sub     eax, edi
.text:00405E76                 cmp     esi, eax
.text:00405E78                 jnb     short loc_405E96
.text:00405E7A                 lea     esi, [esi+0]
.text:00405E80
.text:00405E80 loc_405E80:                             ; CODE XREF: sub_405E50+44↓j
.text:00405E80                 movzx   edx, byte ptr [eax+edi-1]
.text:00405E85                 cmp     dl, 2Fh ; '/'
.text:00405E88                 jz      short loc_405E91
.text:00405E8A                 cmp     dl, 5Ch ; '\'
.text:00405E8D                 mov     ebx, eax
.text:00405E8F                 jnz     short loc_405EA7
.text:00405E91
.text:00405E91 loc_405E91:                             ; CODE XREF: sub_405E50+38↑j
.text:00405E91                 dec     eax
.text:00405E92                 cmp     esi, eax
.text:00405E94                 jb      short loc_405E80
.text:00405E96
.text:00405E96 loc_405E96:                             ; CODE XREF: sub_405E50+28↑j
.text:00405E96                 movzx   eax, byte ptr [esi+edi]
.text:00405E9A                 xor     edx, edx
.text:00405E9C                 cmp     al, 2Fh ; '/'
.text:00405E9E                 jz      short loc_405F00
.text:00405EA0                 cmp     al, 5Ch ; '\'
.text:00405EA2                 jz      short loc_405F00
.text:00405EA4
.text:00405EA4 loc_405EA4:                             ; CODE XREF: sub_405E50+B5↓j
.text:00405EA4                 lea     ebx, [edx+esi]
.text:00405EA7
.text:00405EA7 loc_405EA7:                             ; CODE XREF: sub_405E50+3F↑j
.text:00405EA7                 cmp     byte ptr [edi], 0
.text:00405EAA                 mov     ebp, ebx
.text:00405EAC                 jz      short loc_405EB4
.text:00405EAE                 cmp     byte ptr [edi+1], 3Ah ; ':'
.text:00405EB2                 jz      short loc_405EFB
.text:00405EB4
.text:00405EB4 loc_405EB4:                             ; CODE XREF: sub_405E50+5C↑j
.text:00405EB4                 test    ebx, ebx
.text:00405EB6
.text:00405EB6 loc_405EB6:                             ; CODE XREF: sub_405E50+AE↓j
.text:00405EB6                 setz    [esp+2Ch+var_11]
.text:00405EBB                 movzx   ecx, [esp+2Ch+var_11]
.text:00405EC0                 lea     edx, [ecx+ebx+1]
.text:00405EC4                 mov     [esp+2Ch+var_2C], edx ; size_t
.text:00405EC7                 call    sub_405F60
.text:00405ECC                 mov     [esp+2Ch+var_2C], eax ; void *
.text:00405ECF                 mov     esi, eax
.text:00405ED1                 mov     [esp+2Ch+Size], ebx ; Size
.text:00405ED5                 mov     [esp+2Ch+Src], edi ; Src
.text:00405ED9                 call    memcpy
.text:00405EDE                 cmp     [esp+2Ch+var_11], 0
.text:00405EE3                 jz      short loc_405EEC
.text:00405EE5                 mov     byte ptr [ebx+esi], 2Eh ; '.'
.text:00405EE9                 lea     ebp, [ebx+1]
.text:00405EEC
.text:00405EEC loc_405EEC:                             ; CODE XREF: sub_405E50+93↑j
.text:00405EEC                 mov     byte ptr [ebp+esi+0], 0
.text:00405EF1                 mov     eax, esi
.text:00405EF3                 add     esp, 1Ch
.text:00405EF6                 pop     ebx
.text:00405EF7                 pop     esi
.text:00405EF8                 pop     edi
.text:00405EF9                 pop     ebp
.text:00405EFA                 retn
.text:00405EFB ; ---------------------------------------------------------------------------
.text:00405EFB
.text:00405EFB loc_405EFB:                             ; CODE XREF: sub_405E50+62↑j
.text:00405EFB                 cmp     ebx, 2
.text:00405EFE                 jmp     short loc_405EB6
.text:00405F00 ; ---------------------------------------------------------------------------
.text:00405F00
.text:00405F00 loc_405F00:                             ; CODE XREF: sub_405E50+4E↑j
.text:00405F00                                         ; sub_405E50+52↑j
.text:00405F00                 mov     edx, 1
.text:00405F05                 jmp     short loc_405EA4
.text:00405F07 ; ---------------------------------------------------------------------------
.text:00405F07
.text:00405F07 loc_405F07:                             ; CODE XREF: sub_405E50+14↑j
.text:00405F07                 mov     esi, 2
.text:00405F0C                 jmp     loc_405E6C
.text:00405F0C sub_405E50      endp
.text:00405F0C
.text:00405F0C ; ---------------------------------------------------------------------------
.text:00405F11                 align 10h
.text:00405F20                 sub     esp, 0Ch
.text:00405F23                 xor     edx, edx
.text:00405F25                 mov     ecx, [esp+14h]
.text:00405F29                 mov     [esp+8], ebx
.text:00405F2D                 mov     eax, 0FFFFFFFFh
.text:00405F32                 mov     ebx, [esp+10h]
.text:00405F36                 div     ecx
.text:00405F38                 cmp     eax, ebx
.text:00405F3A                 jb      short loc_405F59
.text:00405F3C                 mov     edx, ebx
.text:00405F3E                 imul    edx, ecx
.text:00405F41                 mov     [esp], edx
.text:00405F44                 call    malloc
.text:00405F49                 test    eax, eax
.text:00405F4B                 jz      short loc_405F55
.text:00405F4D
.text:00405F4D loc_405F4D:                             ; CODE XREF: .text:00405F57↓j
.text:00405F4D                 mov     ebx, [esp+8]
.text:00405F51                 add     esp, 0Ch
.text:00405F54                 retn
.text:00405F55 ; ---------------------------------------------------------------------------
.text:00405F55
.text:00405F55 loc_405F55:                             ; CODE XREF: .text:00405F4B↑j
.text:00405F55                 test    ebx, ebx
.text:00405F57                 jz      short loc_405F4D
.text:00405F59
.text:00405F59 loc_405F59:                             ; CODE XREF: .text:00405F3A↑j
.text:00405F59                 call    sub_406210
.text:00405F59 ; ---------------------------------------------------------------------------
.text:00405F5E                 align 10h
.text:00405F60
.text:00405F60 ; =============== S U B R O U T I N E =======================================
.text:00405F60
.text:00405F60
.text:00405F60 ; int __cdecl sub_405F60(size_t)
.text:00405F60 sub_405F60      proc near               ; CODE XREF: sub_401A30+7D3↑p
.text:00405F60                                         ; sub_402CC0+19↑p ...
.text:00405F60
.text:00405F60 Size            = dword ptr -0Ch
.text:00405F60 var_4           = dword ptr -4
.text:00405F60 arg_0           = dword ptr  4
.text:00405F60
.text:00405F60                 sub     esp, 0Ch
.text:00405F63                 mov     [esp+0Ch+var_4], ebx
.text:00405F67                 mov     ebx, [esp+0Ch+arg_0]
.text:00405F6B                 mov     [esp+0Ch+Size], ebx ; Size
.text:00405F6E                 call    malloc
.text:00405F73                 test    eax, eax
.text:00405F75                 jz      short loc_405F80
.text:00405F77
.text:00405F77 loc_405F77:                             ; CODE XREF: sub_405F60+22↓j
.text:00405F77                 mov     ebx, [esp+0Ch+var_4]
.text:00405F7B                 add     esp, 0Ch
.text:00405F7E                 retn
.text:00405F7E ; ---------------------------------------------------------------------------
.text:00405F7F                 align 10h
.text:00405F80
.text:00405F80 loc_405F80:                             ; CODE XREF: sub_405F60+15↑j
.text:00405F80                 test    ebx, ebx
.text:00405F82                 jz      short loc_405F77
.text:00405F84                 call    sub_406210
.text:00405F84 sub_405F60      endp
.text:00405F84
.text:00405F84 ; ---------------------------------------------------------------------------
.text:00405F89                 align 10h
.text:00405F90                 sub     esp, 1Ch
.text:00405F93                 xor     edx, edx
.text:00405F95                 mov     eax, 0FFFFFFFFh
.text:00405F9A                 mov     [esp+14h], ebx
.text:00405F9E                 mov     ecx, [esp+20h]
.text:00405FA2                 mov     ebx, [esp+28h]
.text:00405FA6                 mov     [esp+18h], esi
.text:00405FAA                 mov     esi, [esp+24h]
.text:00405FAE                 div     ebx
.text:00405FB0                 cmp     eax, esi
.text:00405FB2                 jb      short loc_405FE4
.text:00405FB4                 mov     [esp], ecx
.text:00405FB7                 mov     edx, esi
.text:00405FB9                 imul    edx, ebx
.text:00405FBC                 mov     [esp+4], edx
.text:00405FC0                 call    realloc
.text:00405FC5                 test    eax, eax
.text:00405FC7                 mov     ecx, eax
.text:00405FC9                 jz      short loc_405FE0
.text:00405FCB
.text:00405FCB loc_405FCB:                             ; CODE XREF: .text:00405FE2↓j
.text:00405FCB                 mov     ebx, [esp+14h]
.text:00405FCF                 mov     eax, ecx
.text:00405FD1                 mov     esi, [esp+18h]
.text:00405FD5                 add     esp, 1Ch
.text:00405FD8                 retn
.text:00405FD8 ; ---------------------------------------------------------------------------
.text:00405FD9                 align 10h
.text:00405FE0
.text:00405FE0 loc_405FE0:                             ; CODE XREF: .text:00405FC9↑j
.text:00405FE0                 test    esi, esi
.text:00405FE2                 jz      short loc_405FCB
.text:00405FE4
.text:00405FE4 loc_405FE4:                             ; CODE XREF: .text:00405FB2↑j
.text:00405FE4                 call    sub_406210
.text:00405FE4 ; ---------------------------------------------------------------------------
.text:00405FE9                 align 10h
.text:00405FF0
.text:00405FF0 ; =============== S U B R O U T I N E =======================================
.text:00405FF0
.text:00405FF0
.text:00405FF0 ; int __cdecl sub_405FF0(void *, size_t)
.text:00405FF0 sub_405FF0      proc near               ; CODE XREF: sub_407420+5B↓p
.text:00405FF0
.text:00405FF0 Block           = dword ptr -0Ch
.text:00405FF0 Size            = dword ptr -8
.text:00405FF0 var_4           = dword ptr -4
.text:00405FF0 arg_0           = dword ptr  4
.text:00405FF0 arg_4           = dword ptr  8
.text:00405FF0
.text:00405FF0                 sub     esp, 0Ch
.text:00405FF3                 mov     edx, [esp+0Ch+arg_0]
.text:00405FF7                 mov     [esp+0Ch+var_4], ebx
.text:00405FFB                 mov     ebx, [esp+0Ch+arg_4]
.text:00405FFF                 mov     [esp+0Ch+Block], edx ; Block
.text:00406002                 mov     [esp+0Ch+Size], ebx ; Size
.text:00406006                 call    realloc
.text:0040600B                 test    eax, eax
.text:0040600D                 jz      short loc_406017
.text:0040600F
.text:0040600F loc_40600F:                             ; CODE XREF: sub_405FF0+29↓j
.text:0040600F                 mov     ebx, [esp+0Ch+var_4]
.text:00406013                 add     esp, 0Ch
.text:00406016                 retn
.text:00406017 ; ---------------------------------------------------------------------------
.text:00406017
.text:00406017 loc_406017:                             ; CODE XREF: sub_405FF0+1D↑j
.text:00406017                 test    ebx, ebx
.text:00406019                 jz      short loc_40600F
.text:0040601B                 call    sub_406210
.text:0040601B sub_405FF0      endp
.text:0040601B
.text:00406020 ; ---------------------------------------------------------------------------
.text:00406020                 jmp     sub_406170
.text:00406020 ; ---------------------------------------------------------------------------
.text:00406025                 align 10h
.text:00406030                 sub     esp, 0Ch
.text:00406033                 mov     edx, [esp+14h]
.text:00406037                 mov     dword ptr [esp+8], 1
.text:0040603F                 mov     [esp+4], edx
.text:00406043                 mov     edx, [esp+10h]
.text:00406047                 mov     [esp], edx
.text:0040604A                 call    sub_406170
.text:0040604F                 add     esp, 0Ch
.text:00406052                 retn
.text:00406052 ; ---------------------------------------------------------------------------
.text:00406053                 align 10h
.text:00406060                 sub     esp, 1Ch
.text:00406063                 mov     [esp+18h], ebx
.text:00406067                 mov     ebx, [esp+20h]
.text:0040606B                 mov     [esp], ebx
.text:0040606E                 call    malloc
.text:00406073                 test    eax, eax
.text:00406075                 jz      short loc_406093
.text:00406077
.text:00406077 loc_406077:                             ; CODE XREF: .text:00406095↓j
.text:00406077                 mov     [esp+8], ebx
.text:0040607B                 mov     dword ptr [esp+4], 0
.text:00406083                 mov     [esp], eax
.text:00406086                 call    memset
.text:0040608B                 mov     ebx, [esp+18h]
.text:0040608F                 add     esp, 1Ch
.text:00406092                 retn
.text:00406093 ; ---------------------------------------------------------------------------
.text:00406093
.text:00406093 loc_406093:                             ; CODE XREF: .text:00406075↑j
.text:00406093                 test    ebx, ebx
.text:00406095                 jz      short loc_406077
.text:00406097                 call    sub_406210
.text:00406097 ; ---------------------------------------------------------------------------
.text:0040609C                 align 10h
.text:004060A0
.text:004060A0 ; =============== S U B R O U T I N E =======================================
.text:004060A0
.text:004060A0
.text:004060A0 ; int __cdecl sub_4060A0(size_t, size_t)
.text:004060A0 sub_4060A0      proc near               ; CODE XREF: sub_402F20+127↑p
.text:004060A0
.text:004060A0 Count           = dword ptr -0Ch
.text:004060A0 Size            = dword ptr -8
.text:004060A0 var_4           = dword ptr -4
.text:004060A0 arg_0           = dword ptr  4
.text:004060A0 arg_4           = dword ptr  8
.text:004060A0
.text:004060A0                 sub     esp, 0Ch
.text:004060A3                 xor     edx, edx
.text:004060A5                 mov     ecx, [esp+0Ch+arg_4]
.text:004060A9                 mov     [esp+0Ch+var_4], ebx
.text:004060AD                 mov     eax, 0FFFFFFFFh
.text:004060B2                 mov     ebx, [esp+0Ch+arg_0]
.text:004060B6                 div     ecx
.text:004060B8                 cmp     eax, ebx
.text:004060BA                 jb      short loc_4060D8
.text:004060BC                 mov     [esp+0Ch+Size], ecx ; Size
.text:004060C0                 mov     [esp+0Ch+Count], ebx ; Count
.text:004060C3                 call    calloc
.text:004060C8                 test    eax, eax
.text:004060CA                 jz      short loc_4060D4
.text:004060CC
.text:004060CC loc_4060CC:                             ; CODE XREF: sub_4060A0+36↓j
.text:004060CC                 mov     ebx, [esp+0Ch+var_4]
.text:004060D0                 add     esp, 0Ch
.text:004060D3                 retn
.text:004060D4 ; ---------------------------------------------------------------------------
.text:004060D4
.text:004060D4 loc_4060D4:                             ; CODE XREF: sub_4060A0+2A↑j
.text:004060D4                 test    ebx, ebx
.text:004060D6                 jz      short loc_4060CC
.text:004060D8
.text:004060D8 loc_4060D8:                             ; CODE XREF: sub_4060A0+1A↑j
.text:004060D8                 call    sub_406210
.text:004060D8 sub_4060A0      endp
.text:004060D8
.text:004060D8 ; ---------------------------------------------------------------------------
.text:004060DD                 align 10h
.text:004060E0                 sub     esp, 1Ch
.text:004060E3                 mov     [esp+18h], ebx
.text:004060E7                 mov     ebx, [esp+24h]
.text:004060EB                 mov     [esp], ebx
.text:004060EE                 call    malloc
.text:004060F3                 test    eax, eax
.text:004060F5                 mov     edx, eax
.text:004060F7                 jz      short loc_406115
.text:004060F9
.text:004060F9 loc_4060F9:                             ; CODE XREF: .text:00406117↓j
.text:004060F9                 mov     [esp+8], ebx
.text:004060FD                 mov     ecx, [esp+20h]
.text:00406101                 mov     [esp], edx
.text:00406104                 mov     [esp+4], ecx
.text:00406108                 call    memcpy
.text:0040610D                 mov     ebx, [esp+18h]
.text:00406111                 add     esp, 1Ch
.text:00406114                 retn
.text:00406115 ; ---------------------------------------------------------------------------
.text:00406115
.text:00406115 loc_406115:                             ; CODE XREF: .text:004060F7↑j
.text:00406115                 test    ebx, ebx
.text:00406117                 jz      short loc_4060F9
.text:00406119                 call    sub_406210
.text:00406119 ; ---------------------------------------------------------------------------
.text:0040611E                 align 10h
.text:00406120                 sub     esp, 1Ch
.text:00406123                 mov     [esp+18h], esi
.text:00406127                 mov     esi, [esp+20h]
.text:0040612B                 mov     [esp+14h], ebx
.text:0040612F                 mov     [esp], esi
.text:00406132                 call    strlen
.text:00406137                 lea     ebx, [eax+1]
.text:0040613A                 mov     [esp], ebx
.text:0040613D                 call    malloc
.text:00406142                 test    eax, eax
.text:00406144                 jz      short loc_406162
.text:00406146
.text:00406146 loc_406146:                             ; CODE XREF: .text:00406164↓j
.text:00406146                 mov     [esp+8], ebx
.text:0040614A                 mov     [esp+4], esi
.text:0040614E                 mov     [esp], eax
.text:00406151                 call    memcpy
.text:00406156                 mov     ebx, [esp+14h]
.text:0040615A                 mov     esi, [esp+18h]
.text:0040615E                 add     esp, 1Ch
.text:00406161                 retn
.text:00406162 ; ---------------------------------------------------------------------------
.text:00406162
.text:00406162 loc_406162:                             ; CODE XREF: .text:00406144↑j
.text:00406162                 test    ebx, ebx
.text:00406164                 jz      short loc_406146
.text:00406166                 call    sub_406210
.text:00406166 ; ---------------------------------------------------------------------------
.text:0040616B                 align 10h
.text:00406170
.text:00406170 ; =============== S U B R O U T I N E =======================================
.text:00406170
.text:00406170
.text:00406170 ; int __cdecl sub_406170(void *, int, int)
.text:00406170 sub_406170      proc near               ; CODE XREF: .text:00406020↑j
.text:00406170                                         ; .text:0040604A↑p
.text:00406170
.text:00406170 Block           = dword ptr -1Ch
.text:00406170 Size            = dword ptr -18h
.text:00406170 var_C           = dword ptr -0Ch
.text:00406170 var_8           = dword ptr -8
.text:00406170 var_4           = dword ptr -4
.text:00406170 arg_0           = dword ptr  4
.text:00406170 arg_4           = dword ptr  8
.text:00406170 arg_8           = dword ptr  0Ch
.text:00406170
.text:00406170                 sub     esp, 1Ch
.text:00406173                 mov     [esp+1Ch+var_8], esi
.text:00406177                 mov     esi, [esp+1Ch+arg_0]
.text:0040617B                 mov     [esp+1Ch+var_4], edi
.text:0040617F                 mov     edi, [esp+1Ch+arg_4]
.text:00406183                 test    esi, esi
.text:00406185                 mov     [esp+1Ch+var_C], ebx
.text:00406189                 mov     ecx, [edi]
.text:0040618B                 mov     ebx, [esp+1Ch+arg_8]
.text:0040618F                 jz      short loc_4061D0
.text:00406191                 xor     edx, edx
.text:00406193                 mov     eax, 7FFFFFFFh
.text:00406198                 div     ebx
.text:0040619A                 cmp     eax, ecx
.text:0040619C                 jb      short loc_4061C9
.text:0040619E                 add     ecx, ecx
.text:004061A0
.text:004061A0 loc_4061A0:                             ; CODE XREF: sub_406170+62↓j
.text:004061A0                                         ; sub_406170+71↓j ...
.text:004061A0                 mov     [edi], ecx
.text:004061A2                 imul    ebx, ecx
.text:004061A5                 mov     [esp+1Ch+Block], esi ; Block
.text:004061A8                 mov     [esp+1Ch+Size], ebx ; Size
.text:004061AC                 call    realloc
.text:004061B1                 test    eax, eax
.text:004061B3                 jz      short loc_4061C5
.text:004061B5
.text:004061B5 loc_4061B5:                             ; CODE XREF: sub_406170+57↓j
.text:004061B5                 mov     ebx, [esp+1Ch+var_C]
.text:004061B9                 mov     esi, [esp+1Ch+var_8]
.text:004061BD                 mov     edi, [esp+1Ch+var_4]
.text:004061C1                 add     esp, 1Ch
.text:004061C4                 retn
.text:004061C5 ; ---------------------------------------------------------------------------
.text:004061C5
.text:004061C5 loc_4061C5:                             ; CODE XREF: sub_406170+43↑j
.text:004061C5                 test    ebx, ebx
.text:004061C7                 jz      short loc_4061B5
.text:004061C9
.text:004061C9 loc_4061C9:                             ; CODE XREF: sub_406170+2C↑j
.text:004061C9                 call    sub_406210
.text:004061C9 ; ---------------------------------------------------------------------------
.text:004061CE                 align 10h
.text:004061D0
.text:004061D0 loc_4061D0:                             ; CODE XREF: sub_406170+1F↑j
.text:004061D0                 test    ecx, ecx
.text:004061D2                 jnz     short loc_4061A0
.text:004061D4                 xor     edx, edx
.text:004061D6                 mov     eax, 40h ; '@'
.text:004061DB                 div     ebx
.text:004061DD                 test    eax, eax
.text:004061DF                 mov     ecx, eax
.text:004061E1                 jnz     short loc_4061A0
.text:004061E3                 mov     ecx, 1
.text:004061E8                 jmp     short loc_4061A0
.text:004061E8 sub_406170      endp
.text:004061E8
.text:004061E8 ; ---------------------------------------------------------------------------
.text:004061EA                 align 10h
.text:004061F0 aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: sub_406210+3↓o
.text:00406201 ; const char aS_0[]
.text:00406201 aS_0            db '%s',0               ; DATA XREF: sub_406210+10↓o
.text:00406204                 align 10h
.text:00406210
.text:00406210 ; =============== S U B R O U T I N E =======================================
.text:00406210
.text:00406210 ; Attributes: noreturn
.text:00406210
.text:00406210 sub_406210      proc near               ; CODE XREF: sub_402F20:loc_4030C6↑p
.text:00406210                                         ; .text:loc_405F59↑p ...
.text:00406210
.text:00406210 Code            = dword ptr -1Ch
.text:00406210 ErrorMessage    = dword ptr -18h
.text:00406210 var_14          = dword ptr -14h
.text:00406210 var_10          = byte ptr -10h
.text:00406210
.text:00406210                 sub     esp, 1Ch
.text:00406213                 mov     [esp+1Ch+Code], offset aMemoryExhauste ; "memory exhausted"
.text:0040621A                 call    ds:libintl_gettext
.text:00406220                 mov     [esp+1Ch+var_14], offset aS_0 ; "%s"
.text:00406228                 mov     edx, Code
.text:0040622E                 mov     [esp+1Ch+ErrorMessage], 0 ; ErrorMessage
.text:00406236                 mov     dword ptr [esp+1Ch+var_10], eax ; char
.text:0040623A                 mov     [esp+1Ch+Code], edx ; Code
.text:0040623D                 call    sub_407720
.text:00406242                 call    abort
.text:00406242 sub_406210      endp
.text:00406242
.text:00406242 ; ---------------------------------------------------------------------------
.text:00406247                 align 10h
.text:00406250 aLiteral        db 'literal',0          ; DATA XREF: .text:00406290↓o
.text:00406258 aShell          db 'shell',0            ; DATA XREF: .text:00406294↓o
.text:0040625E aShellAlways    db 'shell-always',0     ; DATA XREF: .text:00406298↓o
.text:0040626B aC              db 'c',0                ; DATA XREF: .text:0040629C↓o
.text:0040626D aEscape         db 'escape',0           ; DATA XREF: .text:004062A0↓o
.text:00406274 aLocale         db 'locale',0           ; DATA XREF: .text:004062A4↓o
.text:0040627B aClocale        db 'clocale',0          ; DATA XREF: .text:004062A8↓o
.text:00406283                 align 10h
.text:00406290                 dd offset aLiteral      ; "literal"
.text:00406294                 dd offset aShell        ; "shell"
.text:00406298                 dd offset aShellAlways  ; "shell-always"
.text:0040629C                 dd offset aC            ; "c"
.text:004062A0                 dd offset aEscape       ; "escape"
.text:004062A4                 dd offset aLocale       ; "locale"
.text:004062A8                 dd offset aClocale      ; "clocale"
.text:004062AC                 dd 2 dup(0)
.text:004062B4                 dd 1, 2, 3, 4, 5, 6
.text:004062CC asc_4062CC:                             ; DATA XREF: sub_4062E0+7E↓o
.text:004062CC                                         ; sub_4062E0+A39↓o ...
.text:004062CC                 text "UTF-16LE", '"',27h,'`'
.text:004062D2                 align 10h
.text:004062E0
.text:004062E0 ; =============== S U B R O U T I N E =======================================
.text:004062E0
.text:004062E0
.text:004062E0 ; int __cdecl sub_4062E0(int, int, char *Str, int, int, int)
.text:004062E0 sub_4062E0      proc near               ; CODE XREF: sub_4062E0+43A↓p
.text:004062E0                                         ; .text:00406EA3↓p ...
.text:004062E0
.text:004062E0 C               = dword ptr -4Ch
.text:004062E0 Type            = dword ptr -48h
.text:004062E0 SizeInBytes     = dword ptr -44h
.text:004062E0 State           = dword ptr -40h
.text:004062E0 var_3C          = dword ptr -3Ch
.text:004062E0 var_38          = dword ptr -38h
.text:004062E0 var_34          = dword ptr -34h
.text:004062E0 var_30          = dword ptr -30h
.text:004062E0 var_29          = byte ptr -29h
.text:004062E0 var_28          = dword ptr -28h
.text:004062E0 var_22          = byte ptr -22h
.text:004062E0 var_21          = byte ptr -21h
.text:004062E0 var_20          = dword ptr -20h
.text:004062E0 var_1C          = dword ptr -1Ch
.text:004062E0 var_18          = mbstate_t ptr -18h
.text:004062E0 arg_0           = dword ptr  4
.text:004062E0 arg_4           = dword ptr  8
.text:004062E0 Str             = dword ptr  0Ch
.text:004062E0 arg_C           = dword ptr  10h
.text:004062E0 arg_10          = dword ptr  14h
.text:004062E0 arg_14          = dword ptr  18h
.text:004062E0
.text:004062E0                 push    ebp
.text:004062E1                 push    edi
.text:004062E2                 push    esi
.text:004062E3                 push    ebx
.text:004062E4                 sub     esp, 3Ch
.text:004062E7                 mov     edx, ds:__mb_cur_max
.text:004062ED                 mov     [esp+4Ch+var_34], 0
.text:004062F5                 mov     [esp+4Ch+var_1C], 0
.text:004062FD                 cmp     dword ptr [edx], 1
.text:00406300                 mov     [esp+4Ch+var_20], 0
.text:00406308                 mov     [esp+4Ch+var_21], 0
.text:0040630D                 setz    [esp+4Ch+var_22]
.text:00406312                 cmp     [esp+4Ch+arg_10], 6 ; switch 7 cases
.text:00406317                 ja      short def_40631D ; jumptable 0040631D default case, cases 0,1
.text:00406319                 mov     edx, [esp+4Ch+arg_10]
.text:0040631D                 jmp     ds:jpt_40631D[edx*4] ; switch jump
.text:0040631D ; ---------------------------------------------------------------------------
.text:00406324 jpt_40631D      dd offset def_40631D    ; DATA XREF: sub_4062E0+3D↑r
.text:00406324                 dd offset def_40631D    ; jump table for switch statement
.text:00406324                 dd offset loc_406C65
.text:00406324                 dd offset loc_406340
.text:00406324                 dd offset loc_406C8B
.text:00406324                 dd offset loc_406C95
.text:00406324                 dd offset loc_406C95
.text:00406340 ; ---------------------------------------------------------------------------
.text:00406340
.text:00406340 loc_406340:                             ; CODE XREF: sub_4062E0+3D↑j
.text:00406340                                         ; DATA XREF: sub_4062E0:jpt_40631D↑o
.text:00406340                 mov     eax, [esp+4Ch+arg_4] ; jumptable 0040631D case 3
.text:00406344                 cmp     [esp+4Ch+var_34], eax
.text:00406348                 jnb     short loc_406351
.text:0040634A                 mov     ebx, [esp+4Ch+arg_0]
.text:0040634E                 mov     byte ptr [ebx], 22h ; '"'
.text:00406351
.text:00406351 loc_406351:                             ; CODE XREF: sub_4062E0+68↑j
.text:00406351                 mov     [esp+4Ch+var_34], 1
.text:00406359                 mov     [esp+4Ch+var_21], 1
.text:0040635E                 mov     [esp+4Ch+var_1C], offset asc_4062CC ; "\"'`"
.text:00406366
.text:00406366 loc_406366:                             ; CODE XREF: sub_4062E0+9A6↓j
.text:00406366                 mov     [esp+4Ch+var_20], 1
.text:0040636E
.text:0040636E def_40631D:                             ; CODE XREF: sub_4062E0+37↑j
.text:0040636E                                         ; sub_4062E0+3D↑j ...
.text:0040636E                 xor     ebp, ebp        ; jumptable 0040631D default case, cases 0,1
.text:00406370
.text:00406370 loc_406370:                             ; CODE XREF: sub_4062E0+3DB↓j
.text:00406370                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00406375                 jz      loc_406C57
.text:0040637B                 cmp     ebp, [esp+4Ch+arg_C]
.text:0040637F
.text:0040637F loc_40637F:                             ; CODE XREF: sub_4062E0+980↓j
.text:0040637F                 jz      loc_406BEE
.text:00406385                 cmp     [esp+4Ch+var_21], 0
.text:0040638A                 jz      short loc_4063D0
.text:0040638C                 mov     esi, [esp+4Ch+var_20]
.text:00406390                 test    esi, esi
.text:00406392                 jz      short loc_4063D0
.text:00406394                 mov     ecx, [esp+4Ch+var_20]
.text:00406398                 lea     edi, [ecx+ebp]
.text:0040639B                 cmp     edi, [esp+4Ch+arg_C]
.text:0040639F                 ja      short loc_4063D0
.text:004063A1                 cld
.text:004063A2                 mov     ebx, [esp+4Ch+Str]
.text:004063A6                 mov     edi, [esp+4Ch+var_1C]
.text:004063AA                 add     ebx, ebp
.text:004063AC                 mov     esi, ebx
.text:004063AE                 cmp     ecx, ecx
.text:004063B0                 repe cmpsb
.text:004063B2                 jnz     short loc_4063D0
.text:004063B4                 mov     edx, [esp+4Ch+arg_4]
.text:004063B8                 cmp     [esp+4Ch+var_34], edx
.text:004063BC                 jnb     short loc_4063CA
.text:004063BE                 mov     ecx, [esp+4Ch+arg_0]
.text:004063C2                 mov     eax, [esp+4Ch+var_34]
.text:004063C6                 mov     byte ptr [eax+ecx], 5Ch ; '\'
.text:004063CA
.text:004063CA loc_4063CA:                             ; CODE XREF: sub_4062E0+DC↑j
.text:004063CA                 inc     [esp+4Ch+var_34]
.text:004063CE                 mov     esi, esi
.text:004063D0
.text:004063D0 loc_4063D0:                             ; CODE XREF: sub_4062E0+AA↑j
.text:004063D0                                         ; sub_4062E0+B2↑j ...
.text:004063D0                 mov     edi, [esp+4Ch+Str]
.text:004063D4                 movzx   ebx, byte ptr [ebp+edi+0]
.text:004063D9                 movzx   eax, bl
.text:004063DC                 cmp     eax, 7Eh        ; switch 127 cases
.text:004063DF                 ja      def_4063E5      ; jumptable 004063E5 default case, cases 1-6,14-31,64
.text:004063E5                 jmp     ds:jpt_4063E5[eax*4] ; switch jump
.text:004063E5 ; ---------------------------------------------------------------------------
.text:004063EC jpt_4063E5      dd offset loc_4065E8, offset def_4063E5, offset def_4063E5
.text:004063EC                                         ; DATA XREF: sub_4062E0+105↑r
.text:004063EC                 dd offset def_4063E5, offset def_4063E5, offset def_4063E5 ; jump table for switch statement
.text:004063EC                 dd offset def_4063E5, offset loc_4066C0, offset loc_4066DE
.text:004063EC                 dd offset loc_4066E2, offset loc_406727, offset loc_40672B
.text:004063EC                 dd offset loc_40672F, offset loc_406733, offset def_4063E5
.text:004063EC                 dd offset def_4063E5, offset def_4063E5, offset def_4063E5
.text:004063EC                 dd offset def_4063E5, offset def_4063E5, offset def_4063E5
.text:004063EC                 dd offset def_4063E5, offset def_4063E5, offset def_4063E5
.text:004063EC                 dd offset def_4063E5, offset def_4063E5, offset def_4063E5
.text:004063EC                 dd offset def_4063E5, offset def_4063E5, offset def_4063E5
.text:004063EC                 dd offset def_4063E5, offset def_4063E5, offset loc_406BB8
.text:004063EC                 dd offset loc_406BB8, offset loc_406BB8, offset loc_406BDA
.text:004063EC                 dd offset loc_406BB8, offset def_4067E2, offset loc_406BB8
.text:004063EC                 dd offset loc_406737, offset loc_406BB8, offset loc_406BB8
.text:004063EC                 dd offset loc_406BB8, offset def_4067E2, offset def_4067E2
.text:004063EC                 dd offset def_4067E2, offset def_4067E2, offset def_4067E2
.text:004063EC                 dd offset def_4067E2, offset def_4067E2, offset def_4067E2
.text:004063EC                 dd offset def_4067E2, offset def_4067E2, offset def_4067E2
.text:004063EC                 dd offset def_4067E2, offset def_4067E2, offset def_4067E2
.text:004063EC                 dd offset def_4067E2, offset def_4067E2, offset loc_406BB8
.text:004063EC                 dd offset loc_406BB8, offset loc_406BB8, offset loc_406BB8
.text:004063EC                 dd offset loc_40679C, offset def_4063E5, offset def_4067E2
.text:004063EC                 dd offset def_4067E2, offset def_4067E2, offset def_4067E2
.text:004063EC                 dd offset def_4067E2, offset def_4067E2, offset def_4067E2
.text:004063EC                 dd offset def_4067E2, offset def_4067E2, offset def_4067E2
.text:004063EC                 dd offset def_4067E2, offset def_4067E2, offset def_4067E2
.text:004063EC                 dd offset def_4067E2, offset def_4067E2, offset def_4067E2
.text:004063EC                 dd offset def_4067E2, offset def_4067E2, offset def_4067E2
.text:004063EC                 dd offset def_4067E2, offset def_4067E2, offset def_4067E2
.text:004063EC                 dd offset def_4067E2, offset def_4067E2, offset def_4067E2
.text:004063EC                 dd offset def_4067E2, offset loc_406BB8, offset loc_406BB1
.text:004063EC                 dd offset def_4067E2, offset loc_406BB8, offset def_4067E2
.text:004063EC                 dd offset loc_406BB8, offset def_4067E2, offset def_4067E2
.text:004063EC                 dd offset def_4067E2, offset def_4067E2, offset def_4067E2
.text:004063EC                 dd offset def_4067E2, offset def_4067E2, offset def_4067E2
.text:004063EC                 dd offset def_4067E2, offset def_4067E2, offset def_4067E2
.text:004063EC                 dd offset def_4067E2, offset def_4067E2, offset def_4067E2
.text:004063EC                 dd offset def_4067E2, offset def_4067E2, offset def_4067E2
.text:004063EC                 dd offset def_4067E2, offset def_4067E2, offset def_4067E2
.text:004063EC                 dd offset def_4067E2, offset def_4067E2, offset def_4067E2
.text:004063EC                 dd offset def_4067E2, offset def_4067E2, offset def_4067E2
.text:004063EC                 dd offset loc_406BC8, offset loc_406BB8, offset loc_406BC8
.text:004063EC                 dd offset loc_406BDA
.text:004065E8 ; ---------------------------------------------------------------------------
.text:004065E8
.text:004065E8 loc_4065E8:                             ; CODE XREF: sub_4062E0+105↑j
.text:004065E8                                         ; DATA XREF: sub_4062E0:jpt_4063E5↑o
.text:004065E8                 cmp     [esp+4Ch+var_21], 0 ; jumptable 004063E5 case 0
.text:004065ED                 lea     eax, [ebp+1]
.text:004065F0                 jz      loc_4066A0
.text:004065F6                 mov     esi, [esp+4Ch+arg_4]
.text:004065FA                 cmp     [esp+4Ch+var_34], esi
.text:004065FE                 jnb     short loc_40660C
.text:00406600                 mov     eax, [esp+4Ch+arg_0]
.text:00406604                 mov     ebx, [esp+4Ch+var_34]
.text:00406608                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:0040660C
.text:0040660C loc_40660C:                             ; CODE XREF: sub_4062E0+31E↑j
.text:0040660C                 inc     [esp+4Ch+var_34]
.text:00406610                 mov     edx, [esp+4Ch+arg_4]
.text:00406614                 cmp     [esp+4Ch+var_34], edx
.text:00406618                 jnb     short loc_406626
.text:0040661A                 mov     edi, [esp+4Ch+arg_0]
.text:0040661E                 mov     ecx, [esp+4Ch+var_34]
.text:00406622                 mov     byte ptr [ecx+edi], 30h ; '0'
.text:00406626
.text:00406626 loc_406626:                             ; CODE XREF: sub_4062E0+338↑j
.text:00406626                 inc     [esp+4Ch+var_34]
.text:0040662A                 mov     esi, [esp+4Ch+arg_4]
.text:0040662E                 cmp     [esp+4Ch+var_34], esi
.text:00406632                 jnb     short loc_406640
.text:00406634                 mov     ebx, [esp+4Ch+arg_0]
.text:00406638                 mov     eax, [esp+4Ch+var_34]
.text:0040663C                 mov     byte ptr [eax+ebx], 30h ; '0'
.text:00406640
.text:00406640 loc_406640:                             ; CODE XREF: sub_4062E0+352↑j
.text:00406640                 inc     [esp+4Ch+var_34]
.text:00406644                 mov     bl, 30h ; '0'
.text:00406646                 lea     esi, [esi+0]
.text:00406649                 lea     edi, [edi+0]
.text:00406650
.text:00406650 def_4067E2:                             ; CODE XREF: sub_4062E0+105↑j
.text:00406650                                         ; sub_4062E0+463↓j ...
.text:00406650                 cmp     [esp+4Ch+var_21], 0 ; jumptable 004063E5 cases 37,43-58,65-90,93,95,97-122
.text:00406650                                         ; jumptable 004067E2 default case, cases 34-38,42-44,46,48-59
.text:00406655                 lea     eax, [ebp+1]
.text:00406658                 jz      short loc_4066A0
.text:0040665A                 mov     cl, bl
.text:0040665C                 mov     edi, [esp+4Ch+arg_14]
.text:00406660                 mov     esi, 1
.text:00406665                 shr     cl, 5
.text:00406668                 movzx   edx, cl
.text:0040666B                 mov     ecx, ebx
.text:0040666D                 and     ecx, 1Fh
.text:00406670                 shl     esi, cl
.text:00406672                 test    [edi+edx*4+4], esi
.text:00406676                 jz      short loc_406692
.text:00406678
.text:00406678 loc_406678:                             ; CODE XREF: sub_4062E0+3FC↓j
.text:00406678                 mov     edx, [esp+4Ch+arg_4]
.text:0040667C                 cmp     [esp+4Ch+var_34], edx
.text:00406680                 jnb     short loc_40668E
.text:00406682                 mov     edi, [esp+4Ch+arg_0]
.text:00406686                 mov     esi, [esp+4Ch+var_34]
.text:0040668A                 mov     byte ptr [esi+edi], 5Ch ; '\'
.text:0040668E
.text:0040668E loc_40668E:                             ; CODE XREF: sub_4062E0+3A0↑j
.text:0040668E                 inc     [esp+4Ch+var_34]
.text:00406692
.text:00406692 loc_406692:                             ; CODE XREF: sub_4062E0+396↑j
.text:00406692                 lea     eax, [ebp+1]
.text:00406695                 lea     esi, [esi+0]
.text:00406699                 lea     edi, [edi+0]
.text:004066A0
.text:004066A0 loc_4066A0:                             ; CODE XREF: sub_4062E0+310↑j
.text:004066A0                                         ; sub_4062E0+378↑j ...
.text:004066A0                 mov     ebp, [esp+4Ch+arg_4]
.text:004066A4                 cmp     [esp+4Ch+var_34], ebp
.text:004066A8                 jnb     short loc_4066B5
.text:004066AA                 mov     edx, [esp+4Ch+arg_0]
.text:004066AE                 mov     ecx, [esp+4Ch+var_34]
.text:004066B2                 mov     [ecx+edx], bl
.text:004066B5
.text:004066B5 loc_4066B5:                             ; CODE XREF: sub_4062E0+3C8↑j
.text:004066B5                 inc     [esp+4Ch+var_34]
.text:004066B9                 mov     ebp, eax
.text:004066BB                 jmp     loc_406370
.text:004066C0 ; ---------------------------------------------------------------------------
.text:004066C0
.text:004066C0 loc_4066C0:                             ; CODE XREF: sub_4062E0+105↑j
.text:004066C0                                         ; DATA XREF: sub_4062E0:jpt_4063E5↑o
.text:004066C0                 mov     dl, 61h ; 'a'   ; jumptable 004063E5 case 7
.text:004066C2                 lea     esi, [esi+0]
.text:004066C9                 lea     edi, [edi+0]
.text:004066D0
.text:004066D0 loc_4066D0:                             ; CODE XREF: sub_4062E0+400↓j
.text:004066D0                                         ; sub_4062E0+409↓j ...
.text:004066D0                 cmp     [esp+4Ch+var_21], 0
.text:004066D5                 lea     eax, [ebp+1]
.text:004066D8                 jz      short loc_4066A0
.text:004066DA                 mov     bl, dl
.text:004066DC                 jmp     short loc_406678
.text:004066DE ; ---------------------------------------------------------------------------
.text:004066DE
.text:004066DE loc_4066DE:                             ; CODE XREF: sub_4062E0+105↑j
.text:004066DE                                         ; DATA XREF: sub_4062E0:jpt_4063E5↑o
.text:004066DE                 mov     dl, 62h ; 'b'   ; jumptable 004063E5 case 8
.text:004066E0                 jmp     short loc_4066D0
.text:004066E2 ; ---------------------------------------------------------------------------
.text:004066E2
.text:004066E2 loc_4066E2:                             ; CODE XREF: sub_4062E0+105↑j
.text:004066E2                                         ; DATA XREF: sub_4062E0:jpt_4063E5↑o
.text:004066E2                 mov     dl, 74h ; 't'   ; jumptable 004063E5 case 9
.text:004066E4
.text:004066E4 loc_4066E4:                             ; CODE XREF: sub_4062E0+449↓j
.text:004066E4                                         ; sub_4062E0+455↓j ...
.text:004066E4                 cmp     [esp+4Ch+arg_10], 1
.text:004066E9                 jnz     short loc_4066D0
.text:004066EB
.text:004066EB loc_4066EB:                             ; CODE XREF: sub_4062E0+45C↓j
.text:004066EB                                         ; sub_4062E0+4C1↓j ...
.text:004066EB                 mov     [esp+4Ch+var_3C], 2 ; jumptable 00406AB2 cases 91,92,94,96,124
.text:004066F3                 mov     eax, [esp+4Ch+arg_14]
.text:004066F7                 mov     edx, [esp+4Ch+arg_C]
.text:004066FB                 mov     ecx, [esp+4Ch+Str]
.text:004066FF                 mov     ebx, [esp+4Ch+arg_4]
.text:00406703                 mov     [esp+4Ch+var_38], eax ; int
.text:00406707                 mov     ebp, [esp+4Ch+arg_0]
.text:0040670B                 mov     [esp+4Ch+State], edx ; int
.text:0040670F                 mov     [esp+4Ch+SizeInBytes], ecx ; Str
.text:00406713                 mov     [esp+4Ch+Type], ebx ; int
.text:00406717                 mov     [esp+4Ch+C], ebp ; int
.text:0040671A                 call    sub_4062E0
.text:0040671F
.text:0040671F loc_40671F:                             ; CODE XREF: sub_4062E0+972↓j
.text:0040671F                 add     esp, 3Ch
.text:00406722                 pop     ebx
.text:00406723                 pop     esi
.text:00406724                 pop     edi
.text:00406725                 pop     ebp
.text:00406726                 retn
.text:00406727 ; ---------------------------------------------------------------------------
.text:00406727
.text:00406727 loc_406727:                             ; CODE XREF: sub_4062E0+105↑j
.text:00406727                                         ; DATA XREF: sub_4062E0:jpt_4063E5↑o
.text:00406727                 mov     dl, 6Eh ; 'n'   ; jumptable 004063E5 case 10
.text:00406729                 jmp     short loc_4066E4
.text:0040672B ; ---------------------------------------------------------------------------
.text:0040672B
.text:0040672B loc_40672B:                             ; CODE XREF: sub_4062E0+105↑j
.text:0040672B                                         ; DATA XREF: sub_4062E0:jpt_4063E5↑o
.text:0040672B                 mov     dl, 76h ; 'v'   ; jumptable 004063E5 case 11
.text:0040672D                 jmp     short loc_4066D0
.text:0040672F ; ---------------------------------------------------------------------------
.text:0040672F
.text:0040672F loc_40672F:                             ; CODE XREF: sub_4062E0+105↑j
.text:0040672F                                         ; DATA XREF: sub_4062E0:jpt_4063E5↑o
.text:0040672F                 mov     dl, 66h ; 'f'   ; jumptable 004063E5 case 12
.text:00406731                 jmp     short loc_4066D0
.text:00406733 ; ---------------------------------------------------------------------------
.text:00406733
.text:00406733 loc_406733:                             ; CODE XREF: sub_4062E0+105↑j
.text:00406733                                         ; DATA XREF: sub_4062E0:jpt_4063E5↑o
.text:00406733                 mov     dl, 72h ; 'r'   ; jumptable 004063E5 case 13
.text:00406735                 jmp     short loc_4066E4
.text:00406737 ; ---------------------------------------------------------------------------
.text:00406737
.text:00406737 loc_406737:                             ; CODE XREF: sub_4062E0+105↑j
.text:00406737                                         ; DATA XREF: sub_4062E0:jpt_4063E5↑o
.text:00406737                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 004063E5 case 39
.text:0040673C                 jz      short loc_4066EB ; jumptable 00406AB2 cases 91,92,94,96,124
.text:0040673E                 cmp     [esp+4Ch+arg_10], 2
.text:00406743                 jnz     def_4067E2      ; jumptable 004063E5 cases 37,43-58,65-90,93,95,97-122
.text:00406743                                         ; jumptable 004067E2 default case, cases 34-38,42-44,46,48-59
.text:00406749                 mov     edx, [esp+4Ch+arg_4]
.text:0040674D                 cmp     [esp+4Ch+var_34], edx
.text:00406751                 jnb     short loc_40675F
.text:00406753                 mov     ecx, [esp+4Ch+arg_0]
.text:00406757                 mov     edi, [esp+4Ch+var_34]
.text:0040675B                 mov     byte ptr [edi+ecx], 27h ; '''
.text:0040675F
.text:0040675F loc_40675F:                             ; CODE XREF: sub_4062E0+471↑j
.text:0040675F                 inc     [esp+4Ch+var_34]
.text:00406763                 mov     eax, [esp+4Ch+arg_4]
.text:00406767                 cmp     [esp+4Ch+var_34], eax
.text:0040676B                 jnb     short loc_406779
.text:0040676D                 mov     esi, [esp+4Ch+arg_0]
.text:00406771                 mov     edx, [esp+4Ch+var_34]
.text:00406775                 mov     byte ptr [edx+esi], 5Ch ; '\'
.text:00406779
.text:00406779 loc_406779:                             ; CODE XREF: sub_4062E0+48B↑j
.text:00406779                 inc     [esp+4Ch+var_34]
.text:0040677D                 mov     edi, [esp+4Ch+arg_4]
.text:00406781                 cmp     [esp+4Ch+var_34], edi
.text:00406785                 jnb     short loc_406793
.text:00406787                 mov     ecx, [esp+4Ch+arg_0]
.text:0040678B                 mov     eax, [esp+4Ch+var_34]
.text:0040678F                 mov     byte ptr [eax+ecx], 27h ; '''
.text:00406793
.text:00406793 loc_406793:                             ; CODE XREF: sub_4062E0+4A5↑j
.text:00406793                                         ; sub_4062E0+5C4↓j ...
.text:00406793                 inc     [esp+4Ch+var_34]
.text:00406797                 jmp     def_4067E2      ; jumptable 004063E5 cases 37,43-58,65-90,93,95,97-122
.text:00406797                                         ; jumptable 004067E2 default case, cases 34-38,42-44,46,48-59
.text:0040679C ; ---------------------------------------------------------------------------
.text:0040679C
.text:0040679C loc_40679C:                             ; CODE XREF: sub_4062E0+105↑j
.text:0040679C                                         ; DATA XREF: sub_4062E0:jpt_4063E5↑o
.text:0040679C                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 004063E5 case 63
.text:004067A1                 jz      loc_4066EB      ; jumptable 00406AB2 cases 91,92,94,96,124
.text:004067A7                 cmp     [esp+4Ch+arg_10], 3
.text:004067AC                 jnz     def_4067E2      ; jumptable 004063E5 cases 37,43-58,65-90,93,95,97-122
.text:004067AC                                         ; jumptable 004067E2 default case, cases 34-38,42-44,46,48-59
.text:004067B2                 lea     edx, [ebp+2]
.text:004067B5                 cmp     edx, [esp+4Ch+arg_C]
.text:004067B9                 jnb     def_4067E2      ; jumptable 004063E5 cases 37,43-58,65-90,93,95,97-122
.text:004067B9                                         ; jumptable 004067E2 default case, cases 34-38,42-44,46,48-59
.text:004067BF                 mov     esi, [esp+4Ch+Str]
.text:004067C3                 cmp     byte ptr [ebp+esi+1], 3Fh ; '?'
.text:004067C8                 jnz     def_4067E2      ; jumptable 004063E5 cases 37,43-58,65-90,93,95,97-122
.text:004067C8                                         ; jumptable 004067E2 default case, cases 34-38,42-44,46,48-59
.text:004067CE                 movzx   ecx, byte ptr [ebp+esi+2]
.text:004067D3                 movsx   eax, cl
.text:004067D6                 sub     eax, 21h ; '!'  ; switch 30 cases
.text:004067D9                 cmp     eax, 1Dh
.text:004067DC                 ja      def_4067E2      ; jumptable 004063E5 cases 37,43-58,65-90,93,95,97-122
.text:004067DC                                         ; jumptable 004067E2 default case, cases 34-38,42-44,46,48-59
.text:004067E2                 jmp     ds:jpt_4067E2[eax*4] ; switch jump
.text:004067E2 ; ---------------------------------------------------------------------------
.text:004067E9                 align 4
.text:004067EC jpt_4067E2      dd offset loc_406864    ; DATA XREF: sub_4062E0+502↑r
.text:004067EC                 dd offset def_4067E2    ; jump table for switch statement
.text:004067EC                 dd offset def_4067E2
.text:004067EC                 dd offset def_4067E2
.text:004067EC                 dd offset def_4067E2
.text:004067EC                 dd offset def_4067E2
.text:004067EC                 dd offset loc_406864
.text:004067EC                 dd offset loc_406864
.text:004067EC                 dd offset loc_406864
.text:004067EC                 dd offset def_4067E2
.text:004067EC                 dd offset def_4067E2
.text:004067EC                 dd offset def_4067E2
.text:004067EC                 dd offset loc_406864
.text:004067EC                 dd offset def_4067E2
.text:004067EC                 dd offset loc_406864
.text:004067EC                 dd offset def_4067E2
.text:004067EC                 dd offset def_4067E2
.text:004067EC                 dd offset def_4067E2
.text:004067EC                 dd offset def_4067E2
.text:004067EC                 dd offset def_4067E2
.text:004067EC                 dd offset def_4067E2
.text:004067EC                 dd offset def_4067E2
.text:004067EC                 dd offset def_4067E2
.text:004067EC                 dd offset def_4067E2
.text:004067EC                 dd offset def_4067E2
.text:004067EC                 dd offset def_4067E2
.text:004067EC                 dd offset def_4067E2
.text:004067EC                 dd offset loc_406864
.text:004067EC                 dd offset loc_406864
.text:004067EC                 dd offset loc_406864
.text:00406864 ; ---------------------------------------------------------------------------
.text:00406864
.text:00406864 loc_406864:                             ; CODE XREF: sub_4062E0+502↑j
.text:00406864                                         ; DATA XREF: sub_4062E0:jpt_4067E2↑o
.text:00406864                 mov     ebp, edx        ; jumptable 004067E2 cases 33,39-41,45,47,60-62
.text:00406866                 mov     bl, cl
.text:00406868                 mov     edx, [esp+4Ch+arg_4]
.text:0040686C                 cmp     [esp+4Ch+var_34], edx
.text:00406870                 jnb     short loc_40687E
.text:00406872                 mov     ecx, [esp+4Ch+arg_0]
.text:00406876                 mov     edi, [esp+4Ch+var_34]
.text:0040687A                 mov     byte ptr [edi+ecx], 3Fh ; '?'
.text:0040687E
.text:0040687E loc_40687E:                             ; CODE XREF: sub_4062E0+590↑j
.text:0040687E                 inc     [esp+4Ch+var_34]
.text:00406882                 mov     eax, [esp+4Ch+arg_4]
.text:00406886                 cmp     [esp+4Ch+var_34], eax
.text:0040688A                 jnb     short loc_406898
.text:0040688C                 mov     edx, [esp+4Ch+arg_0]
.text:00406890                 mov     esi, [esp+4Ch+var_34]
.text:00406894                 mov     byte ptr [esi+edx], 5Ch ; '\'
.text:00406898
.text:00406898 loc_406898:                             ; CODE XREF: sub_4062E0+5AA↑j
.text:00406898                 inc     [esp+4Ch+var_34]
.text:0040689C                 mov     edi, [esp+4Ch+arg_4]
.text:004068A0                 cmp     [esp+4Ch+var_34], edi
.text:004068A4                 jnb     loc_406793
.text:004068AA                 mov     eax, [esp+4Ch+arg_0]
.text:004068AE                 mov     ecx, [esp+4Ch+var_34]
.text:004068B2                 mov     byte ptr [ecx+eax], 3Fh ; '?'
.text:004068B6                 jmp     loc_406793
.text:004068B6 ; ---------------------------------------------------------------------------
.text:004068BB                 align 10h
.text:004068C0
.text:004068C0 def_4063E5:                             ; CODE XREF: sub_4062E0+FF↑j
.text:004068C0                                         ; sub_4062E0+105↑j
.text:004068C0                                         ; DATA XREF: ...
.text:004068C0                 cmp     [esp+4Ch+var_22], 0 ; jumptable 004063E5 default case, cases 1-6,14-31,64
.text:004068C5                 jz      loc_4069F0
.text:004068CB                 mov     [esp+4Ch+var_28], 1
.text:004068D3                 mov     esi, ds:__mb_cur_max
.text:004068D9                 movzx   edx, bl
.text:004068DC                 cmp     dword ptr [esi], 1
.text:004068DF                 jz      loc_4069D4
.text:004068E5                 mov     [esp+4Ch+Type], 157h ; Type
.text:004068ED                 mov     [esp+4Ch+C], edx ; C
.text:004068F0                 call    _isctype
.text:004068F5
.text:004068F5 loc_4068F5:                             ; CODE XREF: sub_4062E0+705↓j
.text:004068F5                 test    eax, eax
.text:004068F7                 setnz   [esp+4Ch+var_29]
.text:004068FC
.text:004068FC loc_4068FC:                             ; CODE XREF: sub_4062E0+7A5↓j
.text:004068FC                 cmp     [esp+4Ch+var_21], 0
.text:00406901                 lea     eax, [ebp+1]
.text:00406904                 jz      loc_4066A0
.text:0040690A                 cmp     [esp+4Ch+var_29], 0
.text:0040690F                 jnz     def_4067E2      ; jumptable 004063E5 cases 37,43-58,65-90,93,95,97-122
.text:0040690F                                         ; jumptable 004067E2 default case, cases 34-38,42-44,46,48-59
.text:00406915
.text:00406915 loc_406915:                             ; CODE XREF: sub_4062E0+7AB↓j
.text:00406915                 mov     eax, [esp+4Ch+var_28]
.text:00406919                 lea     edx, [eax+ebp]
.text:0040691C                 lea     esi, [esi+0]
.text:00406920
.text:00406920 loc_406920:                             ; CODE XREF: sub_4062E0+6EF↓j
.text:00406920                 cmp     [esp+4Ch+var_21], 0
.text:00406925                 jz      short loc_4069A0
.text:00406927                 cmp     [esp+4Ch+var_29], 0
.text:0040692C                 jnz     short loc_4069A0
.text:0040692E                 mov     edi, [esp+4Ch+arg_4]
.text:00406932                 cmp     [esp+4Ch+var_34], edi
.text:00406936                 jnb     short loc_406944
.text:00406938                 mov     esi, [esp+4Ch+arg_0]
.text:0040693C                 mov     eax, [esp+4Ch+var_34]
.text:00406940                 mov     byte ptr [eax+esi], 5Ch ; '\'
.text:00406944
.text:00406944 loc_406944:                             ; CODE XREF: sub_4062E0+656↑j
.text:00406944                 inc     [esp+4Ch+var_34]
.text:00406948                 mov     ecx, [esp+4Ch+arg_4]
.text:0040694C                 cmp     [esp+4Ch+var_34], ecx
.text:00406950                 jnb     short loc_406965
.text:00406952                 mov     cl, bl
.text:00406954                 mov     esi, [esp+4Ch+arg_0]
.text:00406958                 mov     edi, [esp+4Ch+var_34]
.text:0040695C                 shr     cl, 6
.text:0040695F                 add     cl, 30h ; '0'
.text:00406962                 mov     [edi+esi], cl
.text:00406965
.text:00406965 loc_406965:                             ; CODE XREF: sub_4062E0+670↑j
.text:00406965                 inc     [esp+4Ch+var_34]
.text:00406969                 mov     edi, [esp+4Ch+arg_4]
.text:0040696D                 cmp     [esp+4Ch+var_34], edi
.text:00406971                 jnb     short loc_406989
.text:00406973                 mov     cl, bl
.text:00406975                 mov     esi, [esp+4Ch+arg_0]
.text:00406979                 shr     cl, 3
.text:0040697C                 mov     edi, [esp+4Ch+var_34]
.text:00406980                 and     cl, 7
.text:00406983                 add     cl, 30h ; '0'
.text:00406986                 mov     [edi+esi], cl
.text:00406989
.text:00406989 loc_406989:                             ; CODE XREF: sub_4062E0+691↑j
.text:00406989                 inc     [esp+4Ch+var_34]
.text:0040698D                 and     bl, 7
.text:00406990                 add     bl, 30h ; '0'
.text:00406993                 lea     esi, [esi+0]
.text:00406999                 lea     edi, [edi+0]
.text:004069A0
.text:004069A0 loc_4069A0:                             ; CODE XREF: sub_4062E0+645↑j
.text:004069A0                                         ; sub_4062E0+64C↑j
.text:004069A0                 lea     eax, [ebp+1]
.text:004069A3                 cmp     edx, eax
.text:004069A5                 jbe     loc_4066A0
.text:004069AB                 mov     ebp, [esp+4Ch+arg_4]
.text:004069AF                 cmp     [esp+4Ch+var_34], ebp
.text:004069B3                 jnb     short loc_4069C0
.text:004069B5                 mov     ecx, [esp+4Ch+arg_0]
.text:004069B9                 mov     edi, [esp+4Ch+var_34]
.text:004069BD                 mov     [edi+ecx], bl
.text:004069C0
.text:004069C0 loc_4069C0:                             ; CODE XREF: sub_4062E0+6D3↑j
.text:004069C0                 inc     [esp+4Ch+var_34]
.text:004069C4                 mov     ebp, eax
.text:004069C6                 mov     eax, [esp+4Ch+Str]
.text:004069CA                 movzx   ebx, byte ptr [ebp+eax+0]
.text:004069CF                 jmp     loc_406920
.text:004069D4 ; ---------------------------------------------------------------------------
.text:004069D4
.text:004069D4 loc_4069D4:                             ; CODE XREF: sub_4062E0+5FF↑j
.text:004069D4                 mov     ecx, ds:_pctype
.text:004069DA                 mov     edi, [ecx]
.text:004069DC                 movzx   eax, word ptr [edi+edx*2]
.text:004069E0                 and     eax, 157h
.text:004069E5                 jmp     loc_4068F5
.text:004069E5 ; ---------------------------------------------------------------------------
.text:004069EA                 align 10h
.text:004069F0
.text:004069F0 loc_4069F0:                             ; CODE XREF: sub_4062E0+5E5↑j
.text:004069F0                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:004069F5                 mov     [esp+4Ch+var_18._Wchar], 0
.text:004069FD                 mov     [esp+4Ch+var_28], 0
.text:00406A05                 mov     [esp+4Ch+var_29], 1
.text:00406A0A                 jz      loc_406B9C
.text:00406A10
.text:00406A10 loc_406A10:                             ; CODE XREF: sub_4062E0+8CC↓j
.text:00406A10                 mov     ecx, [esp+4Ch+arg_C]
.text:00406A14                 lea     edx, [esp+4Ch+var_18]
.text:00406A18                 mov     edi, [esp+4Ch+Str]
.text:00406A1C                 mov     [esp+4Ch+State], edx ; State
.text:00406A20                 lea     esi, [esp+4Ch+var_18._State]
.text:00406A24                 sub     ecx, ebp
.text:00406A26                 mov     [esp+4Ch+SizeInBytes], ecx ; SizeInBytes
.text:00406A2A                 add     edi, ebp
.text:00406A2C                 mov     [esp+4Ch+var_30], edi
.text:00406A30                 mov     [esp+4Ch+Type], edi ; SrcCh
.text:00406A34                 mov     [esp+4Ch+C], esi ; DstCh
.text:00406A37                 call    mbrtowc
.text:00406A3C                 test    eax, eax
.text:00406A3E                 mov     edi, eax
.text:00406A40                 jz      short loc_406A80
.text:00406A42                 cmp     eax, 0FFFFFFFFh
.text:00406A45                 jz      loc_406B92
.text:00406A4B                 cmp     eax, 0FFFFFFFEh
.text:00406A4E                 jz      loc_406B52
.text:00406A54                 cmp     [esp+4Ch+arg_10], 1
.text:00406A59                 jz      short loc_406A90
.text:00406A5B
.text:00406A5B loc_406A5B:                             ; CODE XREF: sub_4062E0+7B9↓j
.text:00406A5B                                         ; sub_4062E0+86D↓j
.text:00406A5B                 movzx   ecx, [esp+4Ch+var_18._State]
.text:00406A60                 mov     [esp+4Ch+Type], 157h ; Type
.text:00406A68                 mov     [esp+4Ch+C], ecx ; C
.text:00406A6B                 call    iswctype
.text:00406A70                 test    eax, eax
.text:00406A72                 jnz     short loc_406A79
.text:00406A74                 mov     [esp+4Ch+var_29], 0
.text:00406A79
.text:00406A79 loc_406A79:                             ; CODE XREF: sub_4062E0+792↑j
.text:00406A79                 mov     [esp+4Ch+var_28], edi
.text:00406A7D                 lea     esi, [esi+0]
.text:00406A80
.text:00406A80 loc_406A80:                             ; CODE XREF: sub_4062E0+760↑j
.text:00406A80                                         ; sub_4062E0+87B↓j ...
.text:00406A80                 cmp     [esp+4Ch+var_28], 1
.text:00406A85                 jbe     loc_4068FC
.text:00406A8B                 jmp     loc_406915
.text:00406A90 ; ---------------------------------------------------------------------------
.text:00406A90
.text:00406A90 loc_406A90:                             ; CODE XREF: sub_4062E0+779↑j
.text:00406A90                 cmp     [esp+4Ch+arg_10], eax
.text:00406A94                 mov     edx, 1
.text:00406A99                 jnb     short loc_406A5B
.text:00406A9B
.text:00406A9B loc_406A9B:                             ; CODE XREF: sub_4062E0+867↓j
.text:00406A9B                 mov     ecx, [esp+4Ch+Str]
.text:00406A9F                 lea     esi, [edx+ebp]
.text:00406AA2                 movsx   eax, byte ptr [esi+ecx]
.text:00406AA6                 sub     eax, 5Bh ; '['  ; switch 34 cases
.text:00406AA9                 cmp     eax, 21h
.text:00406AAC                 ja      def_406AB2      ; jumptable 00406AB2 default case, cases 93,95,97-123
.text:00406AB2                 jmp     ds:jpt_406AB2[eax*4] ; switch jump
.text:00406AB2 ; ---------------------------------------------------------------------------
.text:00406AB9                 align 4
.text:00406ABC jpt_406AB2      dd offset loc_4066EB    ; DATA XREF: sub_4062E0+7D2↑r
.text:00406ABC                 dd offset loc_4066EB    ; jump table for switch statement
.text:00406ABC                 dd offset def_406AB2
.text:00406ABC                 dd offset loc_4066EB
.text:00406ABC                 dd offset def_406AB2
.text:00406ABC                 dd offset loc_4066EB
.text:00406ABC                 dd offset def_406AB2
.text:00406ABC                 dd offset def_406AB2
.text:00406ABC                 dd offset def_406AB2
.text:00406ABC                 dd offset def_406AB2
.text:00406ABC                 dd offset def_406AB2
.text:00406ABC                 dd offset def_406AB2
.text:00406ABC                 dd offset def_406AB2
.text:00406ABC                 dd offset def_406AB2
.text:00406ABC                 dd offset def_406AB2
.text:00406ABC                 dd offset def_406AB2
.text:00406ABC                 dd offset def_406AB2
.text:00406ABC                 dd offset def_406AB2
.text:00406ABC                 dd offset def_406AB2
.text:00406ABC                 dd offset def_406AB2
.text:00406ABC                 dd offset def_406AB2
.text:00406ABC                 dd offset def_406AB2
.text:00406ABC                 dd offset def_406AB2
.text:00406ABC                 dd offset def_406AB2
.text:00406ABC                 dd offset def_406AB2
.text:00406ABC                 dd offset def_406AB2
.text:00406ABC                 dd offset def_406AB2
.text:00406ABC                 dd offset def_406AB2
.text:00406ABC                 dd offset def_406AB2
.text:00406ABC                 dd offset def_406AB2
.text:00406ABC                 dd offset def_406AB2
.text:00406ABC                 dd offset def_406AB2
.text:00406ABC                 dd offset def_406AB2
.text:00406ABC                 dd offset loc_4066EB
.text:00406B44 ; ---------------------------------------------------------------------------
.text:00406B44
.text:00406B44 def_406AB2:                             ; CODE XREF: sub_4062E0+7CC↑j
.text:00406B44                                         ; sub_4062E0+7D2↑j
.text:00406B44                                         ; DATA XREF: ...
.text:00406B44                 inc     edx             ; jumptable 00406AB2 default case, cases 93,95,97-123
.text:00406B45                 cmp     edx, edi
.text:00406B47                 jb      loc_406A9B
.text:00406B4D                 jmp     loc_406A5B
.text:00406B52 ; ---------------------------------------------------------------------------
.text:00406B52
.text:00406B52 loc_406B52:                             ; CODE XREF: sub_4062E0+76E↑j
.text:00406B52                 cmp     ebp, [esp+4Ch+arg_C]
.text:00406B56                 mov     [esp+4Ch+var_29], 0
.text:00406B5B                 jnb     loc_406A80
.text:00406B61                 mov     eax, [esp+4Ch+var_30]
.text:00406B65                 cmp     byte ptr [eax], 0
.text:00406B68                 jz      loc_406A80
.text:00406B6E
.text:00406B6E loc_406B6E:                             ; CODE XREF: sub_4062E0+8AB↓j
.text:00406B6E                 inc     [esp+4Ch+var_28]
.text:00406B72                 mov     esi, [esp+4Ch+var_28]
.text:00406B76                 lea     eax, [esi+ebp]
.text:00406B79                 cmp     eax, [esp+4Ch+arg_C]
.text:00406B7D                 jnb     loc_406A80
.text:00406B83                 mov     edi, [esp+4Ch+Str]
.text:00406B87                 cmp     byte ptr [eax+edi], 0
.text:00406B8B                 jnz     short loc_406B6E
.text:00406B8D                 jmp     loc_406A80
.text:00406B92 ; ---------------------------------------------------------------------------
.text:00406B92
.text:00406B92 loc_406B92:                             ; CODE XREF: sub_4062E0+765↑j
.text:00406B92                 mov     [esp+4Ch+var_29], 0
.text:00406B97                 jmp     loc_406A80
.text:00406B9C ; ---------------------------------------------------------------------------
.text:00406B9C
.text:00406B9C loc_406B9C:                             ; CODE XREF: sub_4062E0+72A↑j
.text:00406B9C                 mov     edx, [esp+4Ch+Str]
.text:00406BA0                 mov     [esp+4Ch+C], edx ; Str
.text:00406BA3                 call    strlen
.text:00406BA8                 mov     [esp+4Ch+arg_C], eax
.text:00406BAC                 jmp     loc_406A10
.text:00406BB1 ; ---------------------------------------------------------------------------
.text:00406BB1
.text:00406BB1 loc_406BB1:                             ; CODE XREF: sub_4062E0+105↑j
.text:00406BB1                                         ; DATA XREF: sub_4062E0:jpt_4063E5↑o
.text:00406BB1                 mov     dl, bl          ; jumptable 004063E5 case 92
.text:00406BB3                 jmp     loc_4066E4
.text:00406BB8 ; ---------------------------------------------------------------------------
.text:00406BB8
.text:00406BB8 loc_406BB8:                             ; CODE XREF: sub_4062E0+105↑j
.text:00406BB8                                         ; sub_4062E0+902↓j
.text:00406BB8                                         ; DATA XREF: ...
.text:00406BB8                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 004063E5 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:00406BBD                 jnz     def_4067E2      ; jumptable 004063E5 cases 37,43-58,65-90,93,95,97-122
.text:00406BBD                                         ; jumptable 004067E2 default case, cases 34-38,42-44,46,48-59
.text:00406BC3                 jmp     loc_4066EB      ; jumptable 00406AB2 cases 91,92,94,96,124
.text:00406BC8 ; ---------------------------------------------------------------------------
.text:00406BC8
.text:00406BC8 loc_406BC8:                             ; CODE XREF: sub_4062E0+105↑j
.text:00406BC8                                         ; DATA XREF: sub_4062E0:jpt_4063E5↑o
.text:00406BC8                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh ; jumptable 004063E5 cases 123,125
.text:00406BCD                 jz      short loc_406BE4
.text:00406BCF                 cmp     [esp+4Ch+arg_C], 1
.text:00406BD4
.text:00406BD4 loc_406BD4:                             ; CODE XREF: sub_4062E0+90C↓j
.text:00406BD4                 jnz     def_4067E2      ; jumptable 004063E5 cases 37,43-58,65-90,93,95,97-122
.text:00406BD4                                         ; jumptable 004067E2 default case, cases 34-38,42-44,46,48-59
.text:00406BDA
.text:00406BDA loc_406BDA:                             ; CODE XREF: sub_4062E0+105↑j
.text:00406BDA                                         ; DATA XREF: sub_4062E0:jpt_4063E5↑o
.text:00406BDA                 test    ebp, ebp        ; jumptable 004063E5 cases 35,126
.text:00406BDC                 jnz     def_4067E2      ; jumptable 004063E5 cases 37,43-58,65-90,93,95,97-122
.text:00406BDC                                         ; jumptable 004067E2 default case, cases 34-38,42-44,46,48-59
.text:00406BE2                 jmp     short loc_406BB8 ; jumptable 004063E5 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:00406BE4 ; ---------------------------------------------------------------------------
.text:00406BE4
.text:00406BE4 loc_406BE4:                             ; CODE XREF: sub_4062E0+8ED↑j
.text:00406BE4                 mov     esi, [esp+4Ch+Str]
.text:00406BE8                 cmp     byte ptr [esi+1], 0
.text:00406BEC                 jmp     short loc_406BD4
.text:00406BEE ; ---------------------------------------------------------------------------
.text:00406BEE
.text:00406BEE loc_406BEE:                             ; CODE XREF: sub_4062E0:loc_40637F↑j
.text:00406BEE                 test    ebp, ebp
.text:00406BF0                 jnz     short loc_406BFD
.text:00406BF2                 cmp     [esp+4Ch+arg_10], 1
.text:00406BF7                 jz      loc_4066EB      ; jumptable 00406AB2 cases 91,92,94,96,124
.text:00406BFD
.text:00406BFD loc_406BFD:                             ; CODE XREF: sub_4062E0+910↑j
.text:00406BFD                 mov     esi, [esp+4Ch+var_1C]
.text:00406C01                 test    esi, esi
.text:00406C03                 jz      short loc_406C38
.text:00406C05                 mov     edi, [esp+4Ch+var_1C]
.text:00406C09                 movzx   eax, byte ptr [edi]
.text:00406C0C                 test    al, al
.text:00406C0E                 jz      short loc_406C38
.text:00406C10
.text:00406C10 loc_406C10:                             ; CODE XREF: sub_4062E0+956↓j
.text:00406C10                 mov     ebp, [esp+4Ch+arg_4]
.text:00406C14                 cmp     [esp+4Ch+var_34], ebp
.text:00406C18                 jnb     short loc_406C25
.text:00406C1A                 mov     ecx, [esp+4Ch+arg_0]
.text:00406C1E                 mov     ebx, [esp+4Ch+var_34]
.text:00406C22                 mov     [ebx+ecx], al
.text:00406C25
.text:00406C25 loc_406C25:                             ; CODE XREF: sub_4062E0+938↑j
.text:00406C25                 inc     [esp+4Ch+var_1C]
.text:00406C29                 inc     [esp+4Ch+var_34]
.text:00406C2D                 mov     edx, [esp+4Ch+var_1C]
.text:00406C31                 movzx   eax, byte ptr [edx]
.text:00406C34                 test    al, al
.text:00406C36                 jnz     short loc_406C10
.text:00406C38
.text:00406C38 loc_406C38:                             ; CODE XREF: sub_4062E0+923↑j
.text:00406C38                                         ; sub_4062E0+92E↑j
.text:00406C38                 mov     eax, [esp+4Ch+arg_4]
.text:00406C3C                 cmp     [esp+4Ch+var_34], eax
.text:00406C40                 jnb     short loc_406C4E
.text:00406C42                 mov     edi, [esp+4Ch+arg_0]
.text:00406C46                 mov     esi, [esp+4Ch+var_34]
.text:00406C4A                 mov     byte ptr [esi+edi], 0
.text:00406C4E
.text:00406C4E loc_406C4E:                             ; CODE XREF: sub_4062E0+960↑j
.text:00406C4E                 mov     eax, [esp+4Ch+var_34]
.text:00406C52                 jmp     loc_40671F
.text:00406C57 ; ---------------------------------------------------------------------------
.text:00406C57
.text:00406C57 loc_406C57:                             ; CODE XREF: sub_4062E0+95↑j
.text:00406C57                 mov     ebx, [esp+4Ch+Str]
.text:00406C5B                 cmp     byte ptr [ebp+ebx+0], 0
.text:00406C60                 jmp     loc_40637F
.text:00406C65 ; ---------------------------------------------------------------------------
.text:00406C65
.text:00406C65 loc_406C65:                             ; CODE XREF: sub_4062E0+3D↑j
.text:00406C65                                         ; DATA XREF: sub_4062E0:jpt_40631D↑o
.text:00406C65                 mov     edx, [esp+4Ch+arg_4] ; jumptable 0040631D case 2
.text:00406C69                 cmp     [esp+4Ch+var_34], edx
.text:00406C6D                 jnb     short loc_406C76
.text:00406C6F                 mov     ecx, [esp+4Ch+arg_0]
.text:00406C73                 mov     byte ptr [ecx], 27h ; '''
.text:00406C76
.text:00406C76 loc_406C76:                             ; CODE XREF: sub_4062E0+98D↑j
.text:00406C76                 mov     [esp+4Ch+var_34], 1
.text:00406C7E                 mov     [esp+4Ch+var_1C], 4062CEh
.text:00406C86                 jmp     loc_406366
.text:00406C8B ; ---------------------------------------------------------------------------
.text:00406C8B
.text:00406C8B loc_406C8B:                             ; CODE XREF: sub_4062E0+3D↑j
.text:00406C8B                                         ; DATA XREF: sub_4062E0:jpt_40631D↑o
.text:00406C8B                 mov     [esp+4Ch+var_21], 1 ; jumptable 0040631D case 4
.text:00406C90                 jmp     def_40631D      ; jumptable 0040631D default case, cases 0,1
.text:00406C95 ; ---------------------------------------------------------------------------
.text:00406C95
.text:00406C95 loc_406C95:                             ; CODE XREF: sub_4062E0+3D↑j
.text:00406C95                                         ; DATA XREF: sub_4062E0:jpt_40631D↑o
.text:00406C95                 mov     [esp+4Ch+C], 4062D0h ; jumptable 0040631D cases 5,6
.text:00406C9C                 call    ds:libintl_gettext
.text:00406CA2                 cmp     eax, 4062D0h
.text:00406CA7                 mov     edi, eax
.text:00406CA9                 jz      short loc_406D20
.text:00406CAB
.text:00406CAB loc_406CAB:                             ; CODE XREF: sub_4062E0+A45↓j
.text:00406CAB                                         ; sub_4062E0+A4C↓j
.text:00406CAB                 mov     [esp+4Ch+C], 4062CEh
.text:00406CB2                 call    ds:libintl_gettext
.text:00406CB8                 cmp     eax, 4062CEh
.text:00406CBD                 mov     edx, eax
.text:00406CBF                 jz      short loc_406D12
.text:00406CC1
.text:00406CC1 loc_406CC1:                             ; CODE XREF: sub_4062E0+A37↓j
.text:00406CC1                                         ; sub_4062E0+A3E↓j
.text:00406CC1                 mov     [esp+4Ch+var_1C], edi
.text:00406CC5                 cmp     byte ptr [edi], 0
.text:00406CC8                 jz      short loc_406CF8
.text:00406CCA
.text:00406CCA loc_406CCA:                             ; CODE XREF: sub_4062E0+A16↓j
.text:00406CCA                 mov     ecx, [esp+4Ch+arg_4]
.text:00406CCE                 cmp     [esp+4Ch+var_34], ecx
.text:00406CD2                 jnb     short loc_406CE7
.text:00406CD4                 mov     ebp, [esp+4Ch+var_1C]
.text:00406CD8                 mov     edi, [esp+4Ch+arg_0]
.text:00406CDC                 mov     esi, [esp+4Ch+var_34]
.text:00406CE0                 movzx   ebx, byte ptr [ebp+0]
.text:00406CE4                 mov     [esi+edi], bl
.text:00406CE7
.text:00406CE7 loc_406CE7:                             ; CODE XREF: sub_4062E0+9F2↑j
.text:00406CE7                 inc     [esp+4Ch+var_1C]
.text:00406CEB                 inc     [esp+4Ch+var_34]
.text:00406CEF                 mov     eax, [esp+4Ch+var_1C]
.text:00406CF3                 cmp     byte ptr [eax], 0
.text:00406CF6                 jnz     short loc_406CCA
.text:00406CF8
.text:00406CF8 loc_406CF8:                             ; CODE XREF: sub_4062E0+9E8↑j
.text:00406CF8                 mov     [esp+4Ch+var_21], 1
.text:00406CFD                 mov     [esp+4Ch+var_1C], edx
.text:00406D01                 mov     [esp+4Ch+C], edx ; Str
.text:00406D04                 call    strlen
.text:00406D09                 mov     [esp+4Ch+var_20], eax
.text:00406D0D                 jmp     def_40631D      ; jumptable 0040631D default case, cases 0,1
.text:00406D12 ; ---------------------------------------------------------------------------
.text:00406D12
.text:00406D12 loc_406D12:                             ; CODE XREF: sub_4062E0+9DF↑j
.text:00406D12                 cmp     [esp+4Ch+arg_10], 6
.text:00406D17                 jnz     short loc_406CC1
.text:00406D19                 mov     edx, offset asc_4062CC ; "\"'`"
.text:00406D1E                 jmp     short loc_406CC1
.text:00406D20 ; ---------------------------------------------------------------------------
.text:00406D20
.text:00406D20 loc_406D20:                             ; CODE XREF: sub_4062E0+9C9↑j
.text:00406D20                 cmp     [esp+4Ch+arg_10], 6
.text:00406D25                 jnz     short loc_406CAB
.text:00406D27                 mov     edi, offset asc_4062CC ; "\"'`"
.text:00406D2C                 jmp     loc_406CAB
.text:00406D2C sub_4062E0      endp
.text:00406D2C
.text:00406D31 ; ---------------------------------------------------------------------------
.text:00406D31                 jmp     short loc_406D40
.text:00406D31 ; ---------------------------------------------------------------------------
.text:00406D33                 align 10h
.text:00406D40
.text:00406D40 loc_406D40:                             ; CODE XREF: .text:00406D31↑j
.text:00406D40                 sub     esp, 0Ch
.text:00406D43                 mov     [esp+4], ebx
.text:00406D47                 mov     [esp+8], esi
.text:00406D4B                 call    _errno
.text:00406D50                 mov     esi, [eax]
.text:00406D52                 mov     dword ptr [esp], 24h ; '$'
.text:00406D59                 call    sub_405F60
.text:00406D5E                 mov     edx, [esp+10h]
.text:00406D62                 mov     ebx, eax
.text:00406D64                 test    edx, edx
.text:00406D66                 jz      short loc_406DB1
.text:00406D68
.text:00406D68 loc_406D68:                             ; CODE XREF: .text:00406DB6↓j
.text:00406D68                 mov     ecx, [edx]
.text:00406D6A                 mov     [ebx], ecx
.text:00406D6C                 mov     ecx, [edx+4]
.text:00406D6F                 mov     [ebx+4], ecx
.text:00406D72                 mov     ecx, [edx+8]
.text:00406D75                 mov     [ebx+8], ecx
.text:00406D78                 mov     ecx, [edx+0Ch]
.text:00406D7B                 mov     [ebx+0Ch], ecx
.text:00406D7E                 mov     ecx, [edx+10h]
.text:00406D81                 mov     [ebx+10h], ecx
.text:00406D84                 mov     ecx, [edx+14h]
.text:00406D87                 mov     [ebx+14h], ecx
.text:00406D8A                 mov     ecx, [edx+18h]
.text:00406D8D                 mov     [ebx+18h], ecx
.text:00406D90                 mov     ecx, [edx+1Ch]
.text:00406D93                 mov     [ebx+1Ch], ecx
.text:00406D96                 mov     ecx, [edx+20h]
.text:00406D99                 mov     [ebx+20h], ecx
.text:00406D9C                 call    _errno
.text:00406DA1                 mov     [eax], esi
.text:00406DA3                 mov     esi, [esp+8]
.text:00406DA7                 mov     eax, ebx
.text:00406DA9                 mov     ebx, [esp+4]
.text:00406DAD                 add     esp, 0Ch
.text:00406DB0                 retn
.text:00406DB1 ; ---------------------------------------------------------------------------
.text:00406DB1
.text:00406DB1 loc_406DB1:                             ; CODE XREF: .text:00406D66↑j
.text:00406DB1                 mov     edx, offset dword_4121C0
.text:00406DB6                 jmp     short loc_406D68
.text:00406DB6 ; ---------------------------------------------------------------------------
.text:00406DB8                 align 10h
.text:00406DC0                 mov     eax, [esp+4]
.text:00406DC4                 test    eax, eax
.text:00406DC6                 jz      short loc_406DD0
.text:00406DC8
.text:00406DC8 loc_406DC8:                             ; CODE XREF: .text:00406DD5↓j
.text:00406DC8                 mov     eax, [eax]
.text:00406DCA                 retn
.text:00406DCA ; ---------------------------------------------------------------------------
.text:00406DCB                 align 10h
.text:00406DD0
.text:00406DD0 loc_406DD0:                             ; CODE XREF: .text:00406DC6↑j
.text:00406DD0                 mov     eax, offset dword_4121C0
.text:00406DD5                 jmp     short loc_406DC8
.text:00406DD5 ; ---------------------------------------------------------------------------
.text:00406DD7                 align 10h
.text:00406DE0                 mov     edx, [esp+4]
.text:00406DE4                 test    edx, edx
.text:00406DE6                 jz      short loc_406DF0
.text:00406DE8
.text:00406DE8 loc_406DE8:                             ; CODE XREF: .text:00406DF5↓j
.text:00406DE8                 mov     ecx, [esp+8]
.text:00406DEC                 mov     [edx], ecx
.text:00406DEE                 retn
.text:00406DEE ; ---------------------------------------------------------------------------
.text:00406DEF                 align 10h
.text:00406DF0
.text:00406DF0 loc_406DF0:                             ; CODE XREF: .text:00406DE6↑j
.text:00406DF0                 mov     edx, offset dword_4121C0
.text:00406DF5                 jmp     short loc_406DE8
.text:00406DF5 ; ---------------------------------------------------------------------------
.text:00406DF7                 align 10h
.text:00406E00                 sub     esp, 8
.text:00406E03                 mov     eax, [esp+0Ch]
.text:00406E07                 movzx   ecx, byte ptr [esp+10h]
.text:00406E0C                 mov     [esp], ebx
.text:00406E0F                 mov     ebx, [esp+14h]
.text:00406E13                 mov     [esp+4], esi
.text:00406E17                 mov     dl, cl
.text:00406E19                 shr     dl, 5
.text:00406E1C                 movzx   edx, dl
.text:00406E1F                 shl     edx, 2
.text:00406E22                 test    eax, eax
.text:00406E24                 lea     esi, [edx+eax+4]
.text:00406E28                 jz      short loc_406E50
.text:00406E2A
.text:00406E2A loc_406E2A:                             ; CODE XREF: .text:00406E56↓j
.text:00406E2A                 mov     edx, [esi]
.text:00406E2C                 and     ecx, 1Fh
.text:00406E2F                 and     ebx, 1
.text:00406E32                 mov     eax, edx
.text:00406E34                 shr     eax, cl
.text:00406E36                 and     eax, 1
.text:00406E39                 xor     ebx, eax
.text:00406E3B                 shl     ebx, cl
.text:00406E3D                 xor     edx, ebx
.text:00406E3F                 mov     [esi], edx
.text:00406E41                 mov     ebx, [esp]
.text:00406E44                 mov     esi, [esp+4]
.text:00406E48                 add     esp, 8
.text:00406E4B                 retn
.text:00406E4B ; ---------------------------------------------------------------------------
.text:00406E4C                 align 10h
.text:00406E50
.text:00406E50 loc_406E50:                             ; CODE XREF: .text:00406E28↑j
.text:00406E50                 lea     esi, dword_4121C4[edx]
.text:00406E56                 jmp     short loc_406E2A
.text:00406E56 ; ---------------------------------------------------------------------------
.text:00406E58                 align 10h
.text:00406E60                 sub     esp, 2Ch
.text:00406E63                 mov     [esp+24h], ebx
.text:00406E67                 mov     ebx, [esp+40h]
.text:00406E6B                 mov     [esp+28h], esi
.text:00406E6F                 test    ebx, ebx
.text:00406E71                 jz      short loc_406EC0
.text:00406E73
.text:00406E73 loc_406E73:                             ; CODE XREF: .text:00406EC5↓j
.text:00406E73                 call    _errno
.text:00406E78                 mov     esi, [eax]
.text:00406E7A                 mov     [esp+14h], ebx
.text:00406E7E                 mov     edx, [ebx]
.text:00406E80                 mov     ecx, [esp+38h]
.text:00406E84                 mov     ebx, [esp+3Ch]
.text:00406E88                 mov     [esp+10h], edx
.text:00406E8C                 mov     edx, [esp+34h]
.text:00406E90                 mov     [esp+0Ch], ebx
.text:00406E94                 mov     [esp+8], ecx
.text:00406E98                 mov     [esp+4], edx
.text:00406E9C                 mov     edx, [esp+30h]
.text:00406EA0                 mov     [esp], edx
.text:00406EA3                 call    sub_4062E0
.text:00406EA8                 mov     ebx, eax
.text:00406EAA                 call    _errno
.text:00406EAF                 mov     [eax], esi
.text:00406EB1                 mov     esi, [esp+28h]
.text:00406EB5                 mov     eax, ebx
.text:00406EB7                 mov     ebx, [esp+24h]
.text:00406EBB                 add     esp, 2Ch
.text:00406EBE                 retn
.text:00406EBE ; ---------------------------------------------------------------------------
.text:00406EBF                 align 10h
.text:00406EC0
.text:00406EC0 loc_406EC0:                             ; CODE XREF: .text:00406E71↑j
.text:00406EC0                 mov     ebx, offset dword_4121C0
.text:00406EC5                 jmp     short loc_406E73
.text:00406EC5 ; ---------------------------------------------------------------------------
.text:00406EC7                 align 10h
.text:00406ED0                 push    ebp
.text:00406ED1                 push    edi
.text:00406ED2                 push    esi
.text:00406ED3                 push    ebx
.text:00406ED4                 sub     esp, 2Ch
.text:00406ED7                 mov     ebp, [esp+48h]
.text:00406EDB                 call    _errno
.text:00406EE0                 mov     edx, [eax]
.text:00406EE2                 test    ebp, ebp
.text:00406EE4                 mov     ebx, ebp
.text:00406EE6                 mov     [esp+28h], edx
.text:00406EEA                 jz      loc_406FA0
.text:00406EF0
.text:00406EF0 loc_406EF0:                             ; CODE XREF: .text:00406FA5↓j
.text:00406EF0                 call    _errno
.text:00406EF5                 mov     edi, [eax]
.text:00406EF7                 mov     esi, ebp
.text:00406EF9                 mov     [esp+14h], ebx
.text:00406EFD                 mov     ecx, [ebx]
.text:00406EFF                 mov     dword ptr [esp], 0
.text:00406F06                 mov     edx, [esp+44h]
.text:00406F0A                 mov     dword ptr [esp+4], 0
.text:00406F12                 mov     eax, [esp+40h]
.text:00406F16                 mov     [esp+10h], ecx
.text:00406F1A                 mov     [esp+0Ch], edx
.text:00406F1E                 mov     [esp+8], eax
.text:00406F22                 call    sub_4062E0
.text:00406F27                 mov     ebx, eax
.text:00406F29                 call    _errno
.text:00406F2E                 mov     [eax], edi
.text:00406F30                 lea     edi, [ebx+1]
.text:00406F33                 mov     [esp], edi
.text:00406F36                 call    sub_405F60
.text:00406F3B                 mov     [esp+24h], eax
.text:00406F3F                 test    ebp, ebp
.text:00406F41                 jz      short loc_406F92
.text:00406F43
.text:00406F43 loc_406F43:                             ; CODE XREF: .text:00406F97↓j
.text:00406F43                 call    _errno
.text:00406F48                 mov     ebp, [eax]
.text:00406F4A                 mov     [esp+14h], esi
.text:00406F4E                 mov     ecx, [esi]
.text:00406F50                 mov     [esp+4], edi
.text:00406F54                 mov     edx, [esp+44h]
.text:00406F58                 mov     esi, [esp+24h]
.text:00406F5C                 mov     [esp+10h], ecx
.text:00406F60                 mov     eax, [esp+40h]
.text:00406F64                 mov     [esp+0Ch], edx
.text:00406F68                 mov     [esp], esi
.text:00406F6B                 mov     [esp+8], eax
.text:00406F6F                 call    sub_4062E0
.text:00406F74                 call    _errno
.text:00406F79                 mov     [eax], ebp
.text:00406F7B                 call    _errno
.text:00406F80                 mov     ebx, [esp+28h]
.text:00406F84                 mov     [eax], ebx
.text:00406F86                 mov     eax, [esp+24h]
.text:00406F8A                 add     esp, 2Ch
.text:00406F8D                 pop     ebx
.text:00406F8E                 pop     esi
.text:00406F8F                 pop     edi
.text:00406F90                 pop     ebp
.text:00406F91                 retn
.text:00406F92 ; ---------------------------------------------------------------------------
.text:00406F92
.text:00406F92 loc_406F92:                             ; CODE XREF: .text:00406F41↑j
.text:00406F92                 mov     esi, offset dword_4121C0
.text:00406F97                 jmp     short loc_406F43
.text:00406F97 ; ---------------------------------------------------------------------------
.text:00406F99                 align 10h
.text:00406FA0
.text:00406FA0 loc_406FA0:                             ; CODE XREF: .text:00406EEA↑j
.text:00406FA0                 mov     ebx, offset dword_4121C0
.text:00406FA5                 jmp     loc_406EF0
.text:00406FA5 ; ---------------------------------------------------------------------------
.text:00406FAA                 align 10h
.text:00406FB0                 sub     esp, 1Ch
.text:00406FB3                 mov     edx, [esp+24h]
.text:00406FB7                 mov     dword ptr [esp+0Ch], offset dword_4121C0
.text:00406FBF                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00406FC7                 mov     [esp+4], edx
.text:00406FCB                 mov     edx, [esp+20h]
.text:00406FCF                 mov     [esp], edx
.text:00406FD2                 call    sub_407420
.text:00406FD7                 add     esp, 1Ch
.text:00406FDA                 retn
.text:00406FDA ; ---------------------------------------------------------------------------
.text:00406FDB                 align 10h
.text:00406FE0                 sub     esp, 1Ch
.text:00406FE3                 mov     edx, [esp+20h]
.text:00406FE7                 mov     dword ptr [esp+0Ch], offset dword_4121C0
.text:00406FEF                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00406FF7                 mov     [esp+4], edx
.text:00406FFB                 mov     dword ptr [esp], 0
.text:00407002                 call    sub_407420
.text:00407007                 add     esp, 1Ch
.text:0040700A                 retn
.text:0040700A ; ---------------------------------------------------------------------------
.text:0040700B                 align 10h
.text:00407010
.text:00407010 ; =============== S U B R O U T I N E =======================================
.text:00407010
.text:00407010
.text:00407010 ; int __cdecl sub_407010(int, int, char *)
.text:00407010 sub_407010      proc near               ; CODE XREF: .text:0040411A↑p
.text:00407010                                         ; sub_404130+1A↑p
.text:00407010
.text:00407010 var_BC          = dword ptr -0BCh
.text:00407010 var_B8          = dword ptr -0B8h
.text:00407010 var_B4          = dword ptr -0B4h
.text:00407010 var_B0          = dword ptr -0B0h
.text:00407010 var_AC          = dword ptr -0ACh
.text:00407010 var_A8          = dword ptr -0A8h
.text:00407010 var_A4          = dword ptr -0A4h
.text:00407010 var_A0          = dword ptr -0A0h
.text:00407010 var_9C          = dword ptr -9Ch
.text:00407010 var_98          = dword ptr -98h
.text:00407010 var_94          = dword ptr -94h
.text:00407010 var_90          = dword ptr -90h
.text:00407010 var_8C          = dword ptr -8Ch
.text:00407010 var_7C          = dword ptr -7Ch
.text:00407010 var_78          = dword ptr -78h
.text:00407010 var_74          = dword ptr -74h
.text:00407010 var_70          = dword ptr -70h
.text:00407010 var_6C          = dword ptr -6Ch
.text:00407010 var_68          = dword ptr -68h
.text:00407010 var_64          = dword ptr -64h
.text:00407010 var_60          = dword ptr -60h
.text:00407010 var_5C          = dword ptr -5Ch
.text:00407010 var_4C          = dword ptr -4Ch
.text:00407010 var_48          = dword ptr -48h
.text:00407010 var_44          = dword ptr -44h
.text:00407010 var_40          = dword ptr -40h
.text:00407010 var_3C          = dword ptr -3Ch
.text:00407010 var_38          = dword ptr -38h
.text:00407010 var_34          = dword ptr -34h
.text:00407010 var_30          = dword ptr -30h
.text:00407010 var_2C          = dword ptr -2Ch
.text:00407010 arg_0           = dword ptr  4
.text:00407010 arg_4           = dword ptr  8
.text:00407010 arg_8           = dword ptr  0Ch
.text:00407010
.text:00407010                 push    ebp
.text:00407011                 xor     eax, eax
.text:00407013                 mov     ecx, 8
.text:00407018                 push    edi
.text:00407019                 push    esi
.text:0040701A                 push    ebx
.text:0040701B                 sub     esp, 0ACh
.text:00407021                 mov     ebp, [esp+0BCh+arg_4]
.text:00407028                 cld
.text:00407029                 lea     edi, [esp+0BCh+var_A8]
.text:0040702D                 mov     [esp+0BCh+var_AC], ebp
.text:00407031                 rep stosd
.text:00407033                 mov     eax, [esp+0BCh+var_8C]
.text:00407037                 mov     edi, [esp+0BCh+var_AC]
.text:0040703B                 mov     esi, [esp+0BCh+var_A8]
.text:0040703F                 mov     [esp+0BCh+var_5C], eax
.text:00407043                 mov     ebp, [esp+0BCh+var_A4]
.text:00407047                 mov     eax, [esp+0BCh+var_AC]
.text:0040704B                 mov     [esp+0BCh+var_7C], edi
.text:0040704F                 mov     ecx, [esp+0BCh+var_94]
.text:00407053                 mov     edi, [esp+0BCh+var_A0]
.text:00407057                 mov     [esp+0BCh+var_78], esi
.text:0040705B                 mov     edx, [esp+0BCh+var_90]
.text:0040705F                 mov     esi, [esp+0BCh+var_9C]
.text:00407063                 mov     [esp+0BCh+var_4C], eax
.text:00407067                 mov     ebx, [esp+0BCh+var_98]
.text:0040706B                 mov     eax, [esp+0BCh+var_A8]
.text:0040706F                 mov     [esp+0BCh+var_74], ebp
.text:00407073                 mov     [esp+0BCh+var_70], edi
.text:00407077                 mov     [esp+0BCh+var_6C], esi
.text:0040707B                 mov     [esp+0BCh+var_68], ebx
.text:0040707F                 mov     [esp+0BCh+var_64], ecx
.text:00407083                 mov     [esp+0BCh+var_60], edx
.text:00407087                 mov     [esp+0BCh+var_48], eax
.text:0040708B                 mov     [esp+0BCh+var_44], ebp
.text:0040708F                 mov     [esp+0BCh+var_40], edi
.text:00407093                 mov     [esp+0BCh+var_3C], esi
.text:0040709A                 mov     [esp+0BCh+var_38], ebx
.text:004070A1                 mov     ebx, [esp+0BCh+var_8C]
.text:004070A5                 mov     [esp+0BCh+var_30], edx
.text:004070AC                 mov     edx, [esp+0BCh+arg_8]
.text:004070B3                 mov     [esp+0BCh+var_34], ecx
.text:004070BA                 lea     ecx, [esp+0BCh+var_4C]
.text:004070BE                 mov     [esp+0BCh+var_B8], edx ; char *
.text:004070C2                 mov     edx, [esp+0BCh+arg_0]
.text:004070C9                 mov     [esp+0BCh+var_2C], ebx
.text:004070D0                 mov     [esp+0BCh+var_B0], ecx ; int
.text:004070D4                 mov     [esp+0BCh+var_B4], 0FFFFFFFFh ; int
.text:004070DC                 mov     [esp+0BCh+var_BC], edx ; int
.text:004070DF                 call    sub_407420
.text:004070E4                 add     esp, 0ACh
.text:004070EA                 pop     ebx
.text:004070EB                 pop     esi
.text:004070EC                 pop     edi
.text:004070ED                 pop     ebp
.text:004070EE                 retn
.text:004070EE sub_407010      endp
.text:004070EE
.text:004070EE ; ---------------------------------------------------------------------------
.text:004070EF                 align 10h
.text:004070F0                 push    ebp
.text:004070F1                 xor     eax, eax
.text:004070F3                 mov     ecx, 8
.text:004070F8                 push    edi
.text:004070F9                 push    esi
.text:004070FA                 push    ebx
.text:004070FB                 sub     esp, 0ACh
.text:00407101                 mov     edx, [esp+0C4h]
.text:00407108                 cld
.text:00407109                 lea     edi, [esp+14h]
.text:0040710D                 mov     [esp+10h], edx
.text:00407111                 rep stosd
.text:00407113                 mov     eax, [esp+30h]
.text:00407117                 mov     ebp, [esp+10h]
.text:0040711B                 mov     edi, [esp+14h]
.text:0040711F                 mov     [esp+60h], eax
.text:00407123                 mov     esi, [esp+20h]
.text:00407127                 mov     eax, [esp+10h]
.text:0040712B                 mov     [esp+40h], ebp
.text:0040712F                 mov     ecx, [esp+28h]
.text:00407133                 mov     ebp, [esp+18h]
.text:00407137                 mov     [esp+44h], edi
.text:0040713B                 mov     edx, [esp+2Ch]
.text:0040713F                 mov     edi, [esp+1Ch]
.text:00407143                 mov     [esp+70h], eax
.text:00407147                 mov     ebx, [esp+24h]
.text:0040714B                 mov     eax, [esp+14h]
.text:0040714F                 mov     [esp+48h], ebp
.text:00407153                 mov     [esp+4Ch], edi
.text:00407157                 mov     [esp+50h], esi
.text:0040715B                 mov     [esp+54h], ebx
.text:0040715F                 mov     [esp+58h], ecx
.text:00407163                 mov     [esp+5Ch], edx
.text:00407167                 mov     [esp+74h], eax
.text:0040716B                 mov     [esp+78h], ebp
.text:0040716F                 mov     [esp+7Ch], edi
.text:00407173                 mov     [esp+80h], esi
.text:0040717A                 mov     [esp+84h], ebx
.text:00407181                 mov     esi, [esp+30h]
.text:00407185                 lea     ebx, [esp+70h]
.text:00407189                 mov     [esp+8Ch], edx
.text:00407190                 mov     edx, [esp+0C8h]
.text:00407197                 mov     [esp+88h], ecx
.text:0040719E                 mov     ecx, [esp+0CCh]
.text:004071A5                 mov     [esp+4], edx
.text:004071A9                 mov     edx, [esp+0C0h]
.text:004071B0                 mov     [esp+90h], esi
.text:004071B7                 mov     [esp+0Ch], ebx
.text:004071BB                 mov     [esp+8], ecx
.text:004071BF                 mov     [esp], edx
.text:004071C2                 call    sub_407420
.text:004071C7                 add     esp, 0ACh
.text:004071CD                 pop     ebx
.text:004071CE                 pop     esi
.text:004071CF                 pop     edi
.text:004071D0                 pop     ebp
.text:004071D1                 retn
.text:004071D1 ; ---------------------------------------------------------------------------
.text:004071D2                 align 10h
.text:004071E0                 push    ebp
.text:004071E1                 xor     eax, eax
.text:004071E3                 mov     ecx, 8
.text:004071E8                 push    edi
.text:004071E9                 push    esi
.text:004071EA                 push    ebx
.text:004071EB                 sub     esp, 0ACh
.text:004071F1                 mov     edi, [esp+0C0h]
.text:004071F8                 cld
.text:004071F9                 mov     [esp+10h], edi
.text:004071FD                 lea     edi, [esp+14h]
.text:00407201                 rep stosd
.text:00407203                 mov     eax, [esp+30h]
.text:00407207                 mov     esi, [esp+10h]
.text:0040720B                 mov     ebx, [esp+14h]
.text:0040720F                 mov     [esp+60h], eax
.text:00407213                 mov     ebp, [esp+18h]
.text:00407217                 mov     eax, [esp+10h]
.text:0040721B                 mov     [esp+40h], esi
.text:0040721F                 mov     edi, [esp+1Ch]
.text:00407223                 mov     esi, [esp+20h]
.text:00407227                 mov     [esp+44h], ebx
.text:0040722B                 mov     ecx, [esp+28h]
.text:0040722F                 mov     edx, [esp+2Ch]
.text:00407233                 mov     [esp+70h], eax
.text:00407237                 mov     ebx, [esp+24h]
.text:0040723B                 mov     eax, [esp+14h]
.text:0040723F                 mov     [esp+48h], ebp
.text:00407243                 mov     [esp+4Ch], edi
.text:00407247                 mov     [esp+50h], esi
.text:0040724B                 mov     [esp+54h], ebx
.text:0040724F                 mov     [esp+58h], ecx
.text:00407253                 mov     [esp+5Ch], edx
.text:00407257                 mov     [esp+74h], eax
.text:0040725B                 mov     [esp+78h], ebp
.text:0040725F                 mov     [esp+7Ch], edi
.text:00407263                 mov     [esp+80h], esi
.text:0040726A                 mov     [esp+84h], ebx
.text:00407271                 mov     [esp+8Ch], edx
.text:00407278                 lea     edx, [esp+70h]
.text:0040727C                 mov     [esp+88h], ecx
.text:00407283                 mov     ecx, [esp+30h]
.text:00407287                 mov     [esp+0Ch], edx
.text:0040728B                 mov     edx, [esp+0C4h]
.text:00407292                 mov     [esp+90h], ecx
.text:00407299                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:004072A1                 mov     [esp+4], edx
.text:004072A5                 mov     dword ptr [esp], 0
.text:004072AC                 call    sub_407420
.text:004072B1                 add     esp, 0ACh
.text:004072B7                 pop     ebx
.text:004072B8                 pop     esi
.text:004072B9                 pop     edi
.text:004072BA                 pop     ebp
.text:004072BB                 retn
.text:004072BB ; ---------------------------------------------------------------------------
.text:004072BC                 align 10h
.text:004072C0                 push    edi
.text:004072C1                 push    esi
.text:004072C2                 push    ebx
.text:004072C3                 sub     esp, 40h
.text:004072C6                 mov     edx, ds:dword_4121CC
.text:004072CC                 mov     ebx, ds:dword_4121C0
.text:004072D2                 mov     esi, ds:dword_4121C8
.text:004072D8                 mov     edi, ds:dword_4121C4
.text:004072DE                 mov     [esp+1Ch], edx
.text:004072E2                 mov     ecx, ds:dword_4121D0
.text:004072E8                 mov     edx, ds:dword_4121E0
.text:004072EE                 mov     [esp+10h], ebx
.text:004072F2                 mov     ebx, ds:dword_4121D4
.text:004072F8                 mov     [esp+30h], edx
.text:004072FC                 movzx   edx, byte ptr [esp+54h]
.text:00407301                 mov     [esp+18h], esi
.text:00407305                 mov     esi, ds:dword_4121DC
.text:0040730B                 mov     [esp+14h], edi
.text:0040730F                 mov     edi, ds:dword_4121D8
.text:00407315                 mov     [esp+20h], ecx
.text:00407319                 mov     cl, dl
.text:0040731B                 shr     cl, 5
.text:0040731E                 mov     [esp+24h], ebx
.text:00407322                 movzx   ebx, cl
.text:00407325                 mov     [esp+2Ch], esi
.text:00407329                 lea     esi, [esp+10h]
.text:0040732D                 mov     [esp+28h], edi
.text:00407331                 lea     edi, [esi+ebx*4]
.text:00407334                 mov     ebx, edx
.text:00407336                 mov     edx, [edi+4]
.text:00407339                 and     ebx, 1Fh
.text:0040733C                 mov     cl, bl
.text:0040733E                 mov     eax, edx
.text:00407340                 shr     eax, cl
.text:00407342                 and     eax, 1
.text:00407345                 xor     eax, 1
.text:00407348                 shl     eax, cl
.text:0040734A                 xor     edx, eax
.text:0040734C                 mov     [edi+4], edx
.text:0040734F                 mov     edx, [esp+50h]
.text:00407353                 mov     [esp+0Ch], esi
.text:00407357                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:0040735F                 mov     [esp+4], edx
.text:00407363                 mov     dword ptr [esp], 0
.text:0040736A                 call    sub_407420
.text:0040736F                 add     esp, 40h
.text:00407372                 pop     ebx
.text:00407373                 pop     esi
.text:00407374                 pop     edi
.text:00407375                 retn
.text:00407375 ; ---------------------------------------------------------------------------
.text:00407376                 align 10h
.text:00407380
.text:00407380 ; =============== S U B R O U T I N E =======================================
.text:00407380
.text:00407380
.text:00407380 ; int __cdecl sub_407380(char *)
.text:00407380 sub_407380      proc near               ; CODE XREF: sub_405B90+64↑p
.text:00407380
.text:00407380 var_4C          = dword ptr -4Ch
.text:00407380 var_48          = dword ptr -48h
.text:00407380 var_44          = dword ptr -44h
.text:00407380 var_40          = dword ptr -40h
.text:00407380 var_3C          = dword ptr -3Ch
.text:00407380 var_38          = dword ptr -38h
.text:00407380 var_34          = dword ptr -34h
.text:00407380 var_30          = dword ptr -30h
.text:00407380 var_2C          = dword ptr -2Ch
.text:00407380 var_28          = dword ptr -28h
.text:00407380 var_24          = dword ptr -24h
.text:00407380 var_20          = dword ptr -20h
.text:00407380 var_1C          = dword ptr -1Ch
.text:00407380 arg_0           = dword ptr  4
.text:00407380
.text:00407380                 sub     esp, 4Ch
.text:00407383                 mov     ecx, ds:dword_4121C0
.text:00407389                 mov     [esp+4Ch+var_44], 0FFFFFFFFh ; int
.text:00407391                 mov     edx, ds:dword_4121C4
.text:00407397                 mov     [esp+4Ch+var_4C], 0 ; int
.text:0040739E                 mov     [esp+4Ch+var_3C], ecx
.text:004073A2                 mov     ecx, ds:dword_4121CC
.text:004073A8                 mov     [esp+4Ch+var_38], edx
.text:004073AC                 mov     edx, ds:dword_4121C8
.text:004073B2                 mov     [esp+4Ch+var_30], ecx
.text:004073B6                 mov     ecx, ds:dword_4121D0
.text:004073BC                 mov     eax, edx
.text:004073BE                 shr     eax, 1Ah
.text:004073C1                 and     eax, 1
.text:004073C4                 xor     eax, 1
.text:004073C7                 mov     [esp+4Ch+var_2C], ecx
.text:004073CB                 shl     eax, 1Ah
.text:004073CE                 mov     ecx, ds:dword_4121D4
.text:004073D4                 xor     edx, eax
.text:004073D6                 mov     [esp+4Ch+var_34], edx
.text:004073DA                 mov     edx, [esp+4Ch+arg_0]
.text:004073DE                 mov     [esp+4Ch+var_28], ecx
.text:004073E2                 mov     ecx, ds:dword_4121D8
.text:004073E8                 mov     [esp+4Ch+var_48], edx ; char *
.text:004073EC                 mov     [esp+4Ch+var_24], ecx
.text:004073F0                 mov     ecx, ds:dword_4121DC
.text:004073F6                 mov     [esp+4Ch+var_20], ecx
.text:004073FA                 mov     ecx, ds:dword_4121E0
.text:00407400                 mov     [esp+4Ch+var_1C], ecx
.text:00407404                 lea     ecx, [esp+4Ch+var_3C]
.text:00407408                 mov     [esp+4Ch+var_40], ecx ; int
.text:0040740C                 call    sub_407420
.text:00407411                 add     esp, 4Ch
.text:00407414                 retn
.text:00407414 sub_407380      endp
.text:00407414
.text:00407414 ; ---------------------------------------------------------------------------
.text:00407415                 align 10h
.text:00407420
.text:00407420 ; =============== S U B R O U T I N E =======================================
.text:00407420
.text:00407420
.text:00407420 ; int __cdecl sub_407420(int, char *, int, int)
.text:00407420 sub_407420      proc near               ; CODE XREF: .text:00406FD2↑p
.text:00407420                                         ; .text:00407002↑p ...
.text:00407420
.text:00407420 Block           = dword ptr -2Ch
.text:00407420 var_28          = dword ptr -28h
.text:00407420 Str             = dword ptr -24h
.text:00407420 var_20          = dword ptr -20h
.text:00407420 var_1C          = dword ptr -1Ch
.text:00407420 var_18          = dword ptr -18h
.text:00407420 var_14          = dword ptr -14h
.text:00407420 arg_0           = dword ptr  4
.text:00407420 arg_4           = dword ptr  8
.text:00407420 arg_8           = dword ptr  0Ch
.text:00407420 arg_C           = dword ptr  10h
.text:00407420
.text:00407420                 push    ebp
.text:00407421                 push    edi
.text:00407422                 push    esi
.text:00407423                 push    ebx
.text:00407424                 sub     esp, 1Ch
.text:00407427                 call    _errno
.text:0040742C                 mov     edx, [eax]
.text:0040742E                 mov     eax, [esp+2Ch+arg_0]
.text:00407432                 mov     [esp+2Ch+var_14], edx
.text:00407436                 test    eax, eax
.text:00407438                 js      loc_4075DA
.text:0040743E                 mov     eax, [esp+2Ch+arg_0]
.text:00407442                 cmp     dword_411040, eax
.text:00407448                 ja      short loc_4074C0
.text:0040744A                 mov     esi, eax
.text:0040744C                 inc     esi
.text:0040744D                 cmp     esi, 1FFFFFFFh
.text:00407453                 ja      loc_4075DF
.text:00407459                 mov     ebx, off_41104C
.text:0040745F                 cmp     ebx, offset dword_411044
.text:00407465                 jz      loc_4075B1
.text:0040746B
.text:0040746B loc_40746B:                             ; CODE XREF: sub_407420+1B5↓j
.text:0040746B                 mov     [esp+2Ch+Block], ebx ; void *
.text:0040746E                 lea     ecx, ds:0[esi*8]
.text:00407475                 mov     ebp, esi
.text:00407477                 mov     [esp+2Ch+var_28], ecx ; size_t
.text:0040747B                 call    sub_405FF0
.text:00407480                 mov     off_41104C, eax
.text:00407485                 mov     ebx, dword_411040
.text:0040748B                 sub     ebp, ebx
.text:0040748D                 lea     edi, [eax+ebx*8]
.text:00407490                 lea     eax, ds:0[ebp*8]
.text:00407497                 cmp     eax, 7
.text:0040749A                 jbe     short loc_4074B0
.text:0040749C                 test    edi, 4
.text:004074A2                 jz      short loc_4074B0
.text:004074A4                 mov     dword ptr [edi], 0
.text:004074AA                 sub     eax, 4
.text:004074AD                 add     edi, 4
.text:004074B0
.text:004074B0 loc_4074B0:                             ; CODE XREF: sub_407420+7A↑j
.text:004074B0                                         ; sub_407420+82↑j
.text:004074B0                 cld
.text:004074B1                 mov     ecx, eax
.text:004074B3                 shr     ecx, 2
.text:004074B6                 xor     eax, eax
.text:004074B8                 rep stosd
.text:004074BA                 mov     dword_411040, esi
.text:004074C0
.text:004074C0 loc_4074C0:                             ; CODE XREF: sub_407420+28↑j
.text:004074C0                 mov     esi, off_41104C
.text:004074C6                 mov     eax, [esp+2Ch+arg_0]
.text:004074CA                 mov     ebp, [esi+eax*8]
.text:004074CD                 mov     edi, [esi+eax*8+4]
.text:004074D1                 mov     esi, [esp+2Ch+arg_C]
.text:004074D5                 test    esi, esi
.text:004074D7                 jz      loc_4075A7
.text:004074DD
.text:004074DD loc_4074DD:                             ; CODE XREF: sub_407420+18C↓j
.text:004074DD                 call    _errno
.text:004074E2                 mov     ebx, [eax]
.text:004074E4                 mov     [esp+2Ch+var_18], esi ; int
.text:004074E8                 mov     ecx, [esi]
.text:004074EA                 mov     [esp+2Ch+Block], edi ; int
.text:004074ED                 mov     edx, [esp+2Ch+arg_8]
.text:004074F1                 mov     [esp+2Ch+var_28], ebp ; int
.text:004074F5                 mov     [esp+2Ch+var_1C], ecx ; int
.text:004074F9                 mov     ecx, [esp+2Ch+arg_4]
.text:004074FD                 mov     [esp+2Ch+var_20], edx ; int
.text:00407501                 mov     [esp+2Ch+Str], ecx ; Str
.text:00407505                 call    sub_4062E0
.text:0040750A                 mov     esi, eax
.text:0040750C                 call    _errno
.text:00407511                 mov     [eax], ebx
.text:00407513                 cmp     ebp, esi
.text:00407515                 ja      short loc_40758B
.text:00407517                 lea     ebp, [esi+1]
.text:0040751A                 mov     ebx, off_41104C
.text:00407520                 cmp     edi, offset unk_4120C0
.text:00407526                 mov     esi, [esp+2Ch+arg_0]
.text:0040752A                 mov     [ebx+esi*8], ebp
.text:0040752D                 jz      short loc_40753D
.text:0040752F                 mov     [esp+2Ch+Block], edi ; Block
.text:00407532                 call    free
.text:00407537                 mov     ebx, off_41104C
.text:0040753D
.text:0040753D loc_40753D:                             ; CODE XREF: sub_407420+10D↑j
.text:0040753D                 mov     [esp+2Ch+Block], ebp ; size_t
.text:00407540                 call    sub_405F60
.text:00407545                 mov     esi, [esp+2Ch+arg_C]
.text:00407549                 mov     edi, eax
.text:0040754B                 mov     eax, [esp+2Ch+arg_0]
.text:0040754F                 test    esi, esi
.text:00407551                 mov     [ebx+eax*8+4], edi
.text:00407555                 jz      short loc_4075A0
.text:00407557
.text:00407557 loc_407557:                             ; CODE XREF: sub_407420+185↓j
.text:00407557                 call    _errno
.text:0040755C                 mov     ebx, [eax]
.text:0040755E                 mov     [esp+2Ch+var_18], esi ; int
.text:00407562                 mov     ecx, [esi]
.text:00407564                 mov     [esp+2Ch+Block], edi ; int
.text:00407567                 mov     edx, [esp+2Ch+arg_8]
.text:0040756B                 mov     [esp+2Ch+var_28], ebp ; int
.text:0040756F                 mov     [esp+2Ch+var_1C], ecx ; int
.text:00407573                 mov     ecx, [esp+2Ch+arg_4]
.text:00407577                 mov     [esp+2Ch+var_20], edx ; int
.text:0040757B                 mov     [esp+2Ch+Str], ecx ; Str
.text:0040757F                 call    sub_4062E0
.text:00407584                 call    _errno
.text:00407589                 mov     [eax], ebx
.text:0040758B
.text:0040758B loc_40758B:                             ; CODE XREF: sub_407420+F5↑j
.text:0040758B                 call    _errno
.text:00407590                 mov     ebp, [esp+2Ch+var_14]
.text:00407594                 mov     [eax], ebp
.text:00407596                 add     esp, 1Ch
.text:00407599                 mov     eax, edi
.text:0040759B                 pop     ebx
.text:0040759C                 pop     esi
.text:0040759D                 pop     edi
.text:0040759E                 pop     ebp
.text:0040759F                 retn
.text:004075A0 ; ---------------------------------------------------------------------------
.text:004075A0
.text:004075A0 loc_4075A0:                             ; CODE XREF: sub_407420+135↑j
.text:004075A0                 mov     esi, offset dword_4121C0
.text:004075A5                 jmp     short loc_407557
.text:004075A7 ; ---------------------------------------------------------------------------
.text:004075A7
.text:004075A7 loc_4075A7:                             ; CODE XREF: sub_407420+B7↑j
.text:004075A7                 mov     esi, offset dword_4121C0
.text:004075AC                 jmp     loc_4074DD
.text:004075B1 ; ---------------------------------------------------------------------------
.text:004075B1
.text:004075B1 loc_4075B1:                             ; CODE XREF: sub_407420+45↑j
.text:004075B1                 mov     [esp+2Ch+Block], 8 ; size_t
.text:004075B8                 call    sub_405F60
.text:004075BD                 mov     off_41104C, eax
.text:004075C2                 mov     edi, dword_411044
.text:004075C8                 mov     ebx, eax
.text:004075CA                 mov     ecx, off_411048
.text:004075D0                 mov     [eax], edi
.text:004075D2                 mov     [eax+4], ecx
.text:004075D5                 jmp     loc_40746B
.text:004075DA ; ---------------------------------------------------------------------------
.text:004075DA
.text:004075DA loc_4075DA:                             ; CODE XREF: sub_407420+18↑j
.text:004075DA                 call    abort
.text:004075DF ; ---------------------------------------------------------------------------
.text:004075DF
.text:004075DF loc_4075DF:                             ; CODE XREF: sub_407420+33↑j
.text:004075DF                 call    sub_406210
.text:004075DF sub_407420      endp
.text:004075DF
.text:004075DF ; ---------------------------------------------------------------------------
.text:004075E4                 align 10h
.text:004075F0
.text:004075F0 ; =============== S U B R O U T I N E =======================================
.text:004075F0
.text:004075F0
.text:004075F0 sub_4075F0      proc near               ; CODE XREF: sub_405C70+2E↑p
.text:004075F0
.text:004075F0 FileHandle      = dword ptr -1Ch
.text:004075F0 DstBuf          = dword ptr -18h
.text:004075F0 MaxCharCount    = dword ptr -14h
.text:004075F0 arg_0           = dword ptr  4
.text:004075F0 arg_4           = dword ptr  8
.text:004075F0 arg_8           = dword ptr  0Ch
.text:004075F0
.text:004075F0                 push    ebp
.text:004075F1                 push    edi
.text:004075F2                 push    esi
.text:004075F3                 push    ebx
.text:004075F4                 sub     esp, 0Ch
.text:004075F7                 mov     ebp, [esp+1Ch+arg_0]
.text:004075FB                 mov     edi, [esp+1Ch+arg_4]
.text:004075FF                 mov     ebx, [esp+1Ch+arg_8]
.text:00407603                 lea     esi, [esi+0]
.text:00407609                 lea     edi, [edi+0]
.text:00407610
.text:00407610 loc_407610:                             ; CODE XREF: sub_4075F0+3E↓j
.text:00407610                                         ; sub_4075F0+57↓j
.text:00407610                 mov     [esp+1Ch+MaxCharCount], ebx ; MaxCharCount
.text:00407614                 mov     [esp+1Ch+DstBuf], edi ; DstBuf
.text:00407618                 mov     [esp+1Ch+FileHandle], ebp ; FileHandle
.text:0040761B                 call    _read
.text:00407620                 test    eax, eax
.text:00407622                 mov     esi, eax
.text:00407624                 jns     short loc_407649
.text:00407626                 call    _errno
.text:0040762B                 cmp     dword ptr [eax], 4
.text:0040762E                 jz      short loc_407610
.text:00407630                 call    _errno
.text:00407635                 cmp     dword ptr [eax], 16h
.text:00407638                 jnz     short loc_407649
.text:0040763A                 cmp     ebx, 7FFFE000h
.text:00407640                 jbe     short loc_407649
.text:00407642                 mov     ebx, 7FFFE000h
.text:00407647                 jmp     short loc_407610
.text:00407649 ; ---------------------------------------------------------------------------
.text:00407649
.text:00407649 loc_407649:                             ; CODE XREF: sub_4075F0+34↑j
.text:00407649                                         ; sub_4075F0+48↑j ...
.text:00407649                 add     esp, 0Ch
.text:0040764C                 mov     eax, esi
.text:0040764E                 pop     ebx
.text:0040764F                 pop     esi
.text:00407650                 pop     edi
.text:00407651                 pop     ebp
.text:00407652                 retn
.text:00407652 sub_4075F0      endp
.text:00407652
.text:00407652 ; ---------------------------------------------------------------------------
.text:00407653                 align 10h
.text:00407660
.text:00407660 ; =============== S U B R O U T I N E =======================================
.text:00407660
.text:00407660
.text:00407660 sub_407660      proc near               ; CODE XREF: sub_405CD0+2E↑p
.text:00407660
.text:00407660 FileHandle      = dword ptr -1Ch
.text:00407660 Buf             = dword ptr -18h
.text:00407660 MaxCharCount    = dword ptr -14h
.text:00407660 arg_0           = dword ptr  4
.text:00407660 arg_4           = dword ptr  8
.text:00407660 arg_8           = dword ptr  0Ch
.text:00407660
.text:00407660                 push    ebp
.text:00407661                 push    edi
.text:00407662                 push    esi
.text:00407663                 push    ebx
.text:00407664                 sub     esp, 0Ch
.text:00407667                 mov     ebp, [esp+1Ch+arg_0]
.text:0040766B                 mov     edi, [esp+1Ch+arg_4]
.text:0040766F                 mov     ebx, [esp+1Ch+arg_8]
.text:00407673                 lea     esi, [esi+0]
.text:00407679                 lea     edi, [edi+0]
.text:00407680
.text:00407680 loc_407680:                             ; CODE XREF: sub_407660+3E↓j
.text:00407680                                         ; sub_407660+57↓j
.text:00407680                 mov     [esp+1Ch+MaxCharCount], ebx ; MaxCharCount
.text:00407684                 mov     [esp+1Ch+Buf], edi ; Buf
.text:00407688                 mov     [esp+1Ch+FileHandle], ebp ; FileHandle
.text:0040768B                 call    _write
.text:00407690                 test    eax, eax
.text:00407692                 mov     esi, eax
.text:00407694                 jns     short loc_4076B9
.text:00407696                 call    _errno
.text:0040769B                 cmp     dword ptr [eax], 4
.text:0040769E                 jz      short loc_407680
.text:004076A0                 call    _errno
.text:004076A5                 cmp     dword ptr [eax], 16h
.text:004076A8                 jnz     short loc_4076B9
.text:004076AA                 cmp     ebx, 7FFFE000h
.text:004076B0                 jbe     short loc_4076B9
.text:004076B2                 mov     ebx, 7FFFE000h
.text:004076B7                 jmp     short loc_407680
.text:004076B9 ; ---------------------------------------------------------------------------
.text:004076B9
.text:004076B9 loc_4076B9:                             ; CODE XREF: sub_407660+34↑j
.text:004076B9                                         ; sub_407660+48↑j ...
.text:004076B9                 add     esp, 0Ch
.text:004076BC                 mov     eax, esi
.text:004076BE                 pop     ebx
.text:004076BF                 pop     esi
.text:004076C0                 pop     edi
.text:004076C1                 pop     ebp
.text:004076C2                 retn
.text:004076C2 sub_407660      endp
.text:004076C2
.text:004076C2 ; ---------------------------------------------------------------------------
.text:004076C3                 align 10h
.text:004076D0                 jmp     ds:libintl_bindtextdomain
.text:004076D0 ; ---------------------------------------------------------------------------
.text:004076D6                 align 10h
.text:004076E0                 jmp     ds:libintl_textdomain
.text:004076E0 ; ---------------------------------------------------------------------------
.text:004076E6                 align 10h
.text:004076F0                 jmp     ds:libintl_gettext
.text:004076F0 ; ---------------------------------------------------------------------------
.text:004076F6                 align 10h
.text:00407700 ; const char aS_1[]
.text:00407700 aS_1            db ': %s',0             ; DATA XREF: sub_407720+B8↓o
.text:00407700                                         ; sub_407824+122↓o
.text:00407705 aUnknownSystemE db 'Unknown system error',0
.text:00407705                                         ; DATA XREF: sub_407720:loc_4077ED↓o
.text:00407705                                         ; sub_407824:loc_40795E↓o
.text:0040771A ; const char aS_2[]
.text:0040771A aS_2            db '%s: ',0             ; DATA XREF: sub_407720:loc_4077F4↓o
.text:0040771F                 align 10h
.text:00407720
.text:00407720 ; =============== S U B R O U T I N E =======================================
.text:00407720
.text:00407720
.text:00407720 ; int __cdecl sub_407720(int Code, int ErrorMessage, char *, char)
.text:00407720 sub_407720      proc near               ; CODE XREF: sub_401A30+252↑p
.text:00407720                                         ; sub_401A30+2BE↑p ...
.text:00407720
.text:00407720 Stream          = dword ptr -1Ch
.text:00407720 Format          = dword ptr -18h
.text:00407720 ArgList         = dword ptr -14h
.text:00407720 Code            = dword ptr  4
.text:00407720 ErrorMessage    = dword ptr  8
.text:00407720 arg_8           = dword ptr  0Ch
.text:00407720 arg_C           = byte ptr  10h
.text:00407720
.text:00407720                 push    esi
.text:00407721                 push    ebx
.text:00407722                 sub     esp, 14h
.text:00407725                 mov     edx, ds:_iob
.text:0040772B                 mov     esi, [esp+1Ch+Code]
.text:0040772F                 mov     ebx, [esp+1Ch+ErrorMessage]
.text:00407733                 add     edx, 20h ; ' '
.text:00407736                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00407739                 call    fflush
.text:0040773E                 mov     eax, ds:dword_4125A0
.text:00407743                 test    eax, eax
.text:00407745                 jz      loc_4077F4
.text:0040774B                 call    eax ; dword_4125A0
.text:0040774D
.text:0040774D loc_40774D:                             ; CODE XREF: sub_407720+F7↓j
.text:0040774D                 lea     edx, [esp+1Ch+arg_C]
.text:00407751                 mov     ecx, [esp+1Ch+arg_8]
.text:00407755                 mov     [esp+1Ch+ArgList], edx ; ArgList
.text:00407759                 mov     edx, ds:_iob
.text:0040775F                 mov     [esp+1Ch+Format], ecx ; Format
.text:00407763                 add     edx, 40h ; '@'
.text:00407766                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00407769                 call    vfprintf
.text:0040776E                 inc     ds:dword_4125B0
.text:00407774                 test    ebx, ebx
.text:00407776                 jnz     short loc_4077C2
.text:00407778
.text:00407778 loc_407778:                             ; CODE XREF: sub_407720+CB↓j
.text:00407778                 mov     edx, ds:_iob
.text:0040777E                 lea     ecx, [edx+40h]
.text:00407781                 mov     ebx, [ecx+4]
.text:00407784                 dec     ebx
.text:00407785                 test    ebx, ebx
.text:00407787                 mov     [ecx+4], ebx
.text:0040778A                 js      short loc_4077B0
.text:0040778C                 mov     ecx, [edx+40h]
.text:0040778F                 mov     byte ptr [ecx], 0Ah
.text:00407792                 inc     dword ptr [edx+40h]
.text:00407795
.text:00407795 loc_407795:                             ; CODE XREF: sub_407720+A0↓j
.text:00407795                 mov     edx, ds:_iob
.text:0040779B                 add     edx, 40h ; '@'
.text:0040779E                 mov     [esp+1Ch+Stream], edx ; Stream
.text:004077A1                 call    fflush
.text:004077A6                 test    esi, esi
.text:004077A8                 jnz     short loc_40781C
.text:004077AA                 add     esp, 14h
.text:004077AD                 pop     ebx
.text:004077AE                 pop     esi
.text:004077AF                 retn
.text:004077B0 ; ---------------------------------------------------------------------------
.text:004077B0
.text:004077B0 loc_4077B0:                             ; CODE XREF: sub_407720+6A↑j
.text:004077B0                 mov     [esp+1Ch+Format], ecx ; File
.text:004077B4                 mov     [esp+1Ch+Stream], 0Ah ; Ch
.text:004077BB                 call    _flsbuf
.text:004077C0                 jmp     short loc_407795
.text:004077C2 ; ---------------------------------------------------------------------------
.text:004077C2
.text:004077C2 loc_4077C2:                             ; CODE XREF: sub_407720+56↑j
.text:004077C2                 mov     [esp+1Ch+Stream], ebx ; ErrorMessage
.text:004077C5                 call    strerror
.text:004077CA                 test    eax, eax
.text:004077CC                 jz      short loc_4077ED
.text:004077CE
.text:004077CE loc_4077CE:                             ; CODE XREF: sub_407720+D2↓j
.text:004077CE                 mov     [esp+1Ch+ArgList], eax
.text:004077D2                 mov     ebx, ds:_iob
.text:004077D8                 mov     [esp+1Ch+Format], offset aS_1 ; ": %s"
.text:004077E0                 add     ebx, 40h ; '@'
.text:004077E3                 mov     [esp+1Ch+Stream], ebx ; Stream
.text:004077E6                 call    fprintf
.text:004077EB                 jmp     short loc_407778
.text:004077ED ; ---------------------------------------------------------------------------
.text:004077ED
.text:004077ED loc_4077ED:                             ; CODE XREF: sub_407720+AC↑j
.text:004077ED                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:004077F2                 jmp     short loc_4077CE
.text:004077F4 ; ---------------------------------------------------------------------------
.text:004077F4
.text:004077F4 loc_4077F4:                             ; CODE XREF: sub_407720+25↑j
.text:004077F4                 mov     [esp+1Ch+Format], offset aS_2 ; "%s: "
.text:004077FC                 mov     edx, ds:_iob
.text:00407802                 mov     ecx, ds:dword_412570
.text:00407808                 add     edx, 40h ; '@'
.text:0040780B                 mov     [esp+1Ch+ArgList], ecx
.text:0040780F                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00407812                 call    fprintf
.text:00407817                 jmp     loc_40774D
.text:0040781C ; ---------------------------------------------------------------------------
.text:0040781C
.text:0040781C loc_40781C:                             ; CODE XREF: sub_407720+88↑j
.text:0040781C                 mov     [esp+1Ch+Stream], esi ; Code
.text:0040781F                 call    exit
.text:0040781F sub_407720      endp
.text:0040781F
.text:00407824
.text:00407824 ; =============== S U B R O U T I N E =======================================
.text:00407824
.text:00407824
.text:00407824 ; int __cdecl sub_407824(int, int Code, int ErrorMessage, char *Str2, int, char *, char)
.text:00407824 sub_407824      proc near               ; DATA XREF: sub_407824+77↓o
.text:00407824
.text:00407824 Stream          = dword ptr -28h
.text:00407824 Format          = dword ptr -24h
.text:00407824 ArgList         = dword ptr -20h
.text:00407824 var_1C          = dword ptr -1Ch
.text:00407824 Code            = dword ptr  8
.text:00407824 ErrorMessage    = dword ptr  0Ch
.text:00407824 Str2            = dword ptr  10h
.text:00407824 arg_10          = dword ptr  14h
.text:00407824 arg_14          = dword ptr  18h
.text:00407824 arg_18          = byte ptr  1Ch
.text:00407824
.text:00407824                 and     eax, 64253A73h
.text:00407829                 cmp     ah, [eax]
.text:0040782B
.text:0040782B loc_40782B:                             ; DATA XREF: sub_407824:loc_407965↓o
.text:0040782B                 add     ds:55003A73h, ah
.text:00407831                 push    edi
.text:00407832                 push    esi
.text:00407833                 push    ebx
.text:00407834                 sub     esp, 1Ch
.text:00407837                 mov     edx, ds:dword_4125E0
.text:0040783D                 mov     ebp, [esp+28h+Code]
.text:00407841                 mov     edi, [esp+28h+ErrorMessage]
.text:00407845                 test    edx, edx
.text:00407847                 mov     ebx, [esp+28h+Str2]
.text:0040784B                 mov     esi, [esp+28h+arg_10]
.text:0040784F                 jz      short loc_407869
.text:00407851                 cmp     ds:dword_412200, esi
.text:00407857                 jz      loc_407990
.text:0040785D
.text:0040785D loc_40785D:                             ; CODE XREF: sub_407824+18D↓j
.text:0040785D                 mov     ds:Str1, ebx
.text:00407863                 mov     ds:dword_412200, esi
.text:00407869
.text:00407869 loc_407869:                             ; CODE XREF: sub_407824+2B↑j
.text:00407869                 mov     edx, ds:_iob
.text:0040786F                 add     edx, 20h ; ' '
.text:00407872                 mov     [esp+28h+Stream], edx ; Stream
.text:00407875                 call    fflush
.text:0040787A                 mov     eax, ds:dword_4125A0
.text:0040787F                 test    eax, eax
.text:00407881                 jz      loc_407965
.text:00407887                 call    eax ; dword_4125A0
.text:00407889
.text:00407889 loc_407889:                             ; CODE XREF: sub_407824+164↓j
.text:00407889                 test    ebx, ebx
.text:0040788B                 jz      short loc_4078AE
.text:0040788D                 mov     [esp+28h+ArgList], ebx
.text:00407891                 mov     ebx, ds:_iob
.text:00407897                 mov     [esp+28h+var_1C], esi
.text:0040789B                 mov     [esp+28h+Format], offset sub_407824 ; Format
.text:004078A3                 add     ebx, 40h ; '@'
.text:004078A6                 mov     [esp+28h+Stream], ebx ; Stream
.text:004078A9                 call    fprintf
.text:004078AE
.text:004078AE loc_4078AE:                             ; CODE XREF: sub_407824+67↑j
.text:004078AE                 mov     esi, ds:_iob
.text:004078B4                 lea     edx, [esp+28h+arg_18]
.text:004078B8                 mov     ecx, [esp+28h+arg_14]
.text:004078BC                 mov     [esp+28h+ArgList], edx ; ArgList
.text:004078C0                 add     esi, 40h ; '@'
.text:004078C3                 mov     [esp+28h+Format], ecx ; Format
.text:004078C7                 mov     [esp+28h+Stream], esi ; Stream
.text:004078CA                 call    vfprintf
.text:004078CF                 inc     ds:dword_4125B0
.text:004078D5                 test    edi, edi
.text:004078D7                 jnz     short loc_407930
.text:004078D9
.text:004078D9 loc_4078D9:                             ; CODE XREF: sub_407824+135↓j
.text:004078D9                 mov     edx, ds:_iob
.text:004078DF                 lea     ecx, [edx+40h]
.text:004078E2                 mov     ebx, [ecx+4]
.text:004078E5                 dec     ebx
.text:004078E6                 test    ebx, ebx
.text:004078E8                 mov     [ecx+4], ebx
.text:004078EB                 js      short loc_407917
.text:004078ED                 mov     esi, [edx+40h]
.text:004078F0                 mov     byte ptr [esi], 0Ah
.text:004078F3                 inc     dword ptr [edx+40h]
.text:004078F6
.text:004078F6 loc_4078F6:                             ; CODE XREF: sub_407824+103↓j
.text:004078F6                 mov     ecx, ds:_iob
.text:004078FC                 add     ecx, 40h ; '@'
.text:004078FF                 mov     [esp+28h+Stream], ecx ; Stream
.text:00407902                 call    fflush
.text:00407907                 test    ebp, ebp
.text:00407909                 jnz     loc_4079B6
.text:0040790F
.text:0040790F loc_40790F:                             ; CODE XREF: sub_407824+173↓j
.text:0040790F                                         ; sub_407824+187↓j
.text:0040790F                 add     esp, 1Ch
.text:00407912                 pop     ebx
.text:00407913                 pop     esi
.text:00407914                 pop     edi
.text:00407915                 pop     ebp
.text:00407916                 retn
.text:00407917 ; ---------------------------------------------------------------------------
.text:00407917
.text:00407917 loc_407917:                             ; CODE XREF: sub_407824+C7↑j
.text:00407917                 mov     [esp+28h+Format], ecx ; File
.text:0040791B                 mov     [esp+28h+Stream], 0Ah ; Ch
.text:00407922                 call    _flsbuf
.text:00407927                 jmp     short loc_4078F6
.text:00407927 ; ---------------------------------------------------------------------------
.text:00407929                 align 10h
.text:00407930
.text:00407930 loc_407930:                             ; CODE XREF: sub_407824+B3↑j
.text:00407930                 mov     [esp+28h+Stream], edi ; ErrorMessage
.text:00407933                 call    strerror
.text:00407938                 test    eax, eax
.text:0040793A                 jz      short loc_40795E
.text:0040793C
.text:0040793C loc_40793C:                             ; CODE XREF: sub_407824+13F↓j
.text:0040793C                 mov     [esp+28h+ArgList], eax
.text:00407940                 mov     edi, ds:_iob
.text:00407946                 mov     [esp+28h+Format], offset aS_1 ; ": %s"
.text:0040794E                 add     edi, 40h ; '@'
.text:00407951                 mov     [esp+28h+Stream], edi ; Stream
.text:00407954                 call    fprintf
.text:00407959                 jmp     loc_4078D9
.text:0040795E ; ---------------------------------------------------------------------------
.text:0040795E
.text:0040795E loc_40795E:                             ; CODE XREF: sub_407824+116↑j
.text:0040795E                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:00407963                 jmp     short loc_40793C
.text:00407965 ; ---------------------------------------------------------------------------
.text:00407965
.text:00407965 loc_407965:                             ; CODE XREF: sub_407824+5D↑j
.text:00407965                 mov     [esp+28h+Format], (offset loc_40782B+1) ; Format
.text:0040796D                 mov     ecx, ds:_iob
.text:00407973                 mov     edx, ds:dword_412570
.text:00407979                 add     ecx, 40h ; '@'
.text:0040797C                 mov     [esp+28h+ArgList], edx
.text:00407980                 mov     [esp+28h+Stream], ecx ; Stream
.text:00407983                 call    fprintf
.text:00407988                 jmp     loc_407889
.text:00407988 ; ---------------------------------------------------------------------------
.text:0040798D                 align 10h
.text:00407990
.text:00407990 loc_407990:                             ; CODE XREF: sub_407824+33↑j
.text:00407990                 mov     eax, ds:Str1
.text:00407995                 cmp     ebx, eax
.text:00407997                 jz      loc_40790F
.text:0040799D                 mov     [esp+28h+Format], ebx ; Str2
.text:004079A1                 mov     [esp+28h+Stream], eax ; Str1
.text:004079A4                 call    strcmp
.text:004079A9                 test    eax, eax
.text:004079AB                 jz      loc_40790F
.text:004079B1                 jmp     loc_40785D
.text:004079B6 ; ---------------------------------------------------------------------------
.text:004079B6
.text:004079B6 loc_4079B6:                             ; CODE XREF: sub_407824+E5↑j
.text:004079B6                 mov     [esp+28h+Stream], ebp ; Code
.text:004079B9                 call    exit
.text:004079B9 sub_407824      endp ; sp-analysis failed
.text:004079B9
.text:004079B9 ; ---------------------------------------------------------------------------
.text:004079BE                 align 10h
.text:004079C0
.text:004079C0 ; =============== S U B R O U T I N E =======================================
.text:004079C0
.text:004079C0
.text:004079C0 ; int __cdecl sub_4079C0(char *, int)
.text:004079C0 sub_4079C0      proc near               ; CODE XREF: sub_401A30+7A5↑p
.text:004079C0
.text:004079C0 hNamedPipe      = dword ptr -0Ch
.text:004079C0 Str             = dword ptr -8
.text:004079C0 var_4           = dword ptr -4
.text:004079C0 arg_0           = dword ptr  4
.text:004079C0 arg_4           = dword ptr  8
.text:004079C0
.text:004079C0                 sub     esp, 0Ch
.text:004079C3                 mov     edx, [esp+0Ch+arg_4]
.text:004079C7                 mov     [esp+0Ch+hNamedPipe], 0 ; hNamedPipe
.text:004079CE                 mov     [esp+0Ch+var_4], edx ; int
.text:004079D2                 mov     edx, [esp+0Ch+arg_0]
.text:004079D6                 mov     [esp+0Ch+Str], edx ; Str
.text:004079DA                 call    sub_407C30
.text:004079DF                 add     esp, 0Ch
.text:004079E2                 retn
.text:004079E2 sub_4079C0      endp
.text:004079E2
.text:004079E2 ; ---------------------------------------------------------------------------
.text:004079E3 aInoI64x        db 'ino:       %#I64X',0Ah,0
.text:004079E3                                         ; DATA XREF: .text:00407ACE↓o
.text:004079F6 aModeO          db 'mode:      %#o',0Ah,0
.text:004079F6                                         ; DATA XREF: .text:00407AE4↓o
.text:00407A06 aUidLd          db 'uid:       %ld',0Ah,0
.text:00407A06                                         ; DATA XREF: .text:00407AF7↓o
.text:00407A16 aGidLd          db 'gid:       %ld',0Ah,0
.text:00407A16                                         ; DATA XREF: .text:00407B0A↓o
.text:00407A26 aDevLu          db 'dev:       %lu',0Ah,0
.text:00407A26                                         ; DATA XREF: .text:00407B1D↓o
.text:00407A36 aNlinkLd        db 'nlink:     %ld',0Ah,0
.text:00407A36                                         ; DATA XREF: .text:00407B30↓o
.text:00407A46 aSizeI64d       db 'size:      %I64d',0Ah,0
.text:00407A46                                         ; DATA XREF: .text:00407B46↓o
.text:00407A58 aBlocksizeD     db 'blocksize: %d',0Ah,0
.text:00407A58                                         ; DATA XREF: .text:00407B5D↓o
.text:00407A67 aBlocksI64d     db 'blocks:    %I64d',0Ah,0
.text:00407A67                                         ; DATA XREF: .text:00407B73↓o
.text:00407A79 aAtimeLdS       db 'atime:     %ld: %s',0
.text:00407A79                                         ; DATA XREF: .text:00407B99↓o
.text:00407A8C aMtimeLdS       db 'mtime:     %ld: %s',0
.text:00407A8C                                         ; DATA XREF: .text:00407BBB↓o
.text:00407A9F aCtimeLdS       db 'ctime:     %ld: %s',0Ah,0
.text:00407A9F                                         ; DATA XREF: .text:00407BDD↓o
.text:00407AB3                 align 10h
.text:00407AC0                 push    ebx
.text:00407AC1                 sub     esp, 18h
.text:00407AC4                 mov     ebx, [esp+20h]
.text:00407AC8                 mov     edx, [ebx+8]
.text:00407ACB                 mov     ecx, [ebx+0Ch]
.text:00407ACE                 mov     dword ptr [esp], offset aInoI64x ; "ino:       %#I64X\n"
.text:00407AD5                 mov     [esp+4], edx
.text:00407AD9                 mov     [esp+8], ecx
.text:00407ADD                 call    printf
.text:00407AE2                 mov     ecx, [ebx]
.text:00407AE4                 mov     dword ptr [esp], offset aModeO ; "mode:      %#o\n"
.text:00407AEB                 mov     [esp+4], ecx
.text:00407AEF                 call    printf
.text:00407AF4                 mov     edx, [ebx+1Ch]
.text:00407AF7                 mov     dword ptr [esp], offset aUidLd ; "uid:       %ld\n"
.text:00407AFE                 mov     [esp+4], edx
.text:00407B02                 call    printf
.text:00407B07                 mov     ecx, [ebx+20h]
.text:00407B0A                 mov     dword ptr [esp], offset aGidLd ; "gid:       %ld\n"
.text:00407B11                 mov     [esp+4], ecx
.text:00407B15                 call    printf
.text:00407B1A                 mov     edx, [ebx+10h]
.text:00407B1D                 mov     dword ptr [esp], offset aDevLu ; "dev:       %lu\n"
.text:00407B24                 mov     [esp+4], edx
.text:00407B28                 call    printf
.text:00407B2D                 mov     ecx, [ebx+18h]
.text:00407B30                 mov     dword ptr [esp], offset aNlinkLd ; "nlink:     %ld\n"
.text:00407B37                 mov     [esp+4], ecx
.text:00407B3B                 call    printf
.text:00407B40                 mov     edx, [ebx+30h]
.text:00407B43                 mov     ecx, [ebx+34h]
.text:00407B46                 mov     dword ptr [esp], offset aSizeI64d ; "size:      %I64d\n"
.text:00407B4D                 mov     [esp+4], edx
.text:00407B51                 mov     [esp+8], ecx
.text:00407B55                 call    printf
.text:00407B5A                 mov     ecx, [ebx+50h]
.text:00407B5D                 mov     dword ptr [esp], offset aBlocksizeD ; "blocksize: %d\n"
.text:00407B64                 mov     [esp+4], ecx
.text:00407B68                 call    printf
.text:00407B6D                 mov     ecx, [ebx+5Ch]
.text:00407B70                 mov     edx, [ebx+58h]
.text:00407B73                 mov     dword ptr [esp], offset aBlocksI64d ; "blocks:    %I64d\n"
.text:00407B7A                 mov     [esp+8], ecx
.text:00407B7E                 mov     [esp+4], edx
.text:00407B82                 call    printf
.text:00407B87                 lea     edx, [ebx+38h]
.text:00407B8A                 mov     [esp], edx
.text:00407B8D                 call    ctime
.text:00407B92                 mov     [esp+8], eax
.text:00407B96                 mov     ecx, [ebx+38h]
.text:00407B99                 mov     dword ptr [esp], offset aAtimeLdS ; "atime:     %ld: %s"
.text:00407BA0                 mov     [esp+4], ecx
.text:00407BA4                 call    printf
.text:00407BA9                 lea     edx, [ebx+40h]
.text:00407BAC                 mov     [esp], edx
.text:00407BAF                 call    ctime
.text:00407BB4                 mov     [esp+8], eax
.text:00407BB8                 mov     ecx, [ebx+40h]
.text:00407BBB                 mov     dword ptr [esp], offset aMtimeLdS ; "mtime:     %ld: %s"
.text:00407BC2                 mov     [esp+4], ecx
.text:00407BC6                 call    printf
.text:00407BCB                 lea     edx, [ebx+48h]
.text:00407BCE                 mov     [esp], edx
.text:00407BD1                 call    ctime
.text:00407BD6                 mov     [esp+8], eax
.text:00407BDA                 mov     edx, [ebx+48h]
.text:00407BDD                 mov     dword ptr [esp], offset aCtimeLdS ; "ctime:     %ld: %s\n"
.text:00407BE4                 mov     [esp+4], edx
.text:00407BE8                 call    printf
.text:00407BED                 add     esp, 18h
.text:00407BF0                 xor     eax, eax
.text:00407BF2                 pop     ebx
.text:00407BF3                 retn
.text:00407BF3 ; ---------------------------------------------------------------------------
.text:00407BF4                 align 10h
.text:00407C00 ; const char aFxstat64BadFil[]
.text:00407C00 aFxstat64BadFil db '__fxstat64: bad file descriptor %d',0Ah,0
.text:00407C00                                         ; DATA XREF: sub_407C30+7B↓o
.text:00407C24                 align 10h
.text:00407C30
.text:00407C30 ; =============== S U B R O U T I N E =======================================
.text:00407C30
.text:00407C30
.text:00407C30 ; int __cdecl sub_407C30(HANDLE hNamedPipe, char *Str, int)
.text:00407C30 sub_407C30      proc near               ; CODE XREF: sub_4079C0+1A↑p
.text:00407C30                                         ; .text:0040A3C9↓p
.text:00407C30
.text:00407C30 hFindFile       = dword ptr -1A0h
.text:00407C30 var_19C         = dword ptr -19Ch
.text:00407C30 hLibModule      = dword ptr -198h
.text:00407C30 lpFindFileData  = dword ptr -194h
.text:00407C30 lpModuleName    = dword ptr -18Ch
.text:00407C30 lpProcName      = dword ptr -188h
.text:00407C30 var_184         = dword ptr -184h
.text:00407C30 var_180         = dword ptr -180h
.text:00407C30 var_17C         = dword ptr -17Ch
.text:00407C30 var_178         = dword ptr -178h
.text:00407C30 var_174         = dword ptr -174h
.text:00407C30 var_170         = dword ptr -170h
.text:00407C30 var_16C         = dword ptr -16Ch
.text:00407C30 var_168         = dword ptr -168h
.text:00407C30 var_164         = dword ptr -164h
.text:00407C30 hModule         = dword ptr -160h
.text:00407C30 FindFileData    = _WIN32_FIND_DATAA ptr -15Ch
.text:00407C30 FileHandle      = dword ptr -1Ch
.text:00407C30 var_18          = dword ptr -18h
.text:00407C30 var_10          = dword ptr -10h
.text:00407C30 var_C           = dword ptr -0Ch
.text:00407C30 lpFileName      = dword ptr -8
.text:00407C30 var_4           = dword ptr -4
.text:00407C30 hNamedPipe      = dword ptr  4
.text:00407C30 Str             = dword ptr  8
.text:00407C30 arg_8           = dword ptr  0Ch
.text:00407C30
.text:00407C30                 sub     esp, 1Ch
.text:00407C33                 mov     edx, [esp+1Ch+Str]
.text:00407C37                 mov     [esp+1Ch+var_C], ebx
.text:00407C3B                 mov     ebx, [esp+1Ch+hNamedPipe]
.text:00407C3F                 mov     [esp+1Ch+lpFileName], esi
.text:00407C43                 mov     esi, [esp+1Ch+arg_8]
.text:00407C47                 test    ebx, ebx
.text:00407C49                 mov     [esp+1Ch+var_4], edi
.text:00407C4D                 jnz     short loc_407C87
.text:00407C4F                 test    edx, edx
.text:00407C51                 js      short loc_407CA7
.text:00407C53                 test    esi, esi
.text:00407C55                 jz      short loc_407C87
.text:00407C57                 cld
.text:00407C58                 mov     eax, ebx
.text:00407C5A                 mov     edi, esi
.text:00407C5C                 mov     ecx, 18h
.text:00407C61                 rep stosd
.text:00407C63                 mov     [esp+1Ch+Str], esi
.text:00407C67                 mov     [esp+1Ch+FileHandle], edx ; FileHandle
.text:00407C6A                 call    _get_osfhandle
.text:00407C6F                 mov     [esp+1Ch+hNamedPipe], eax
.text:00407C73                 mov     ebx, [esp+1Ch+var_C]
.text:00407C77                 mov     esi, [esp+1Ch+lpFileName]
.text:00407C7B                 mov     edi, [esp+1Ch+var_4]
.text:00407C7F                 add     esp, 1Ch
.text:00407C82                 jmp     loc_408010
.text:00407C87 ; ---------------------------------------------------------------------------
.text:00407C87
.text:00407C87 loc_407C87:                             ; CODE XREF: sub_407C30+1D↑j
.text:00407C87                                         ; sub_407C30+25↑j
.text:00407C87                 call    _errno
.text:00407C8C                 mov     dword ptr [eax], 16h
.text:00407C92
.text:00407C92 loc_407C92:                             ; CODE XREF: sub_407C30+92↓j
.text:00407C92                 mov     ebx, [esp+1Ch+var_C]
.text:00407C96                 mov     eax, 0FFFFFFFFh
.text:00407C9B                 mov     esi, [esp+1Ch+lpFileName]
.text:00407C9F                 mov     edi, [esp+1Ch+var_4]
.text:00407CA3                 add     esp, 1Ch
.text:00407CA6                 retn
.text:00407CA7 ; ---------------------------------------------------------------------------
.text:00407CA7
.text:00407CA7 loc_407CA7:                             ; CODE XREF: sub_407C30+21↑j
.text:00407CA7                 mov     [esp+1Ch+var_18], edx
.text:00407CAB                 mov     [esp+1Ch+FileHandle], offset aFxstat64BadFil ; "__fxstat64: bad file descriptor %d\n"
.text:00407CB2                 call    printf
.text:00407CB7                 call    _errno
.text:00407CBC                 mov     dword ptr [eax], 9
.text:00407CC2                 jmp     short loc_407C92
.text:00407CC2 ; ---------------------------------------------------------------------------
.text:00407CC4                 align 20h
.text:00407CE0 aComExeBatCmd   db '.com;.exe;.bat;.cmd',0
.text:00407CE0                                         ; DATA XREF: .data:off_411064↓o
.text:00407CF4 ; const CHAR ModuleName[]
.text:00407CF4 ModuleName      db 'KERNEL32.DLL',0     ; DATA XREF: sub_407C30+101↓o
.text:00407CF4                                         ; sub_407C30+26C↓o ...
.text:00407D01 ; const CHAR ProcName[]
.text:00407D01 ProcName        db 'GetFileAttributesExA',0
.text:00407D01                                         ; DATA XREF: sub_407C30+118↓o
.text:00407D16                 align 10h
.text:00407D20
.text:00407D20 loc_407D20:                             ; CODE XREF: .text:00408EC4↓p
.text:00407D20                                         ; sub_4092C0+37↓p
.text:00407D20                 push    ebp
.text:00407D21                 push    edi
.text:00407D22                 push    esi
.text:00407D23                 push    ebx
.text:00407D24                 sub     esp, 17Ch
.text:00407D2A                 mov     ebx, [esp+18Ch+Str]
.text:00407D31                 mov     [esp+18Ch+lpModuleName], offset ModuleName ; "KERNEL32.DLL"
.text:00407D38                 call    GetModuleHandleA
.text:00407D3D                 sub     esp, 4
.text:00407D40                 mov     [esp+18Ch+hModule], eax
.text:00407D44                 mov     edx, [esp+18Ch+hModule]
.text:00407D48                 mov     [esp+18Ch+lpProcName], offset ProcName ; "GetFileAttributesExA"
.text:00407D50                 mov     [esp+18Ch+lpModuleName], edx ; hModule
.text:00407D53                 call    GetProcAddress
.text:00407D58                 sub     esp, 8
.text:00407D5B                 mov     ebp, eax
.text:00407D5D                 mov     eax, [esp+18Ch+hNamedPipe]
.text:00407D64                 mov     [esp+18Ch+lpModuleName], eax ; lpFileName
.text:00407D67                 call    GetFileAttributesA
.text:00407D6C                 sub     esp, 4
.text:00407D6F                 mov     [esp+18Ch+var_164], eax
.text:00407D73                 xor     eax, eax
.text:00407D75                 cmp     [esp+18Ch+var_164], 0FFFFFFFFh
.text:00407D7A                 jz      short loc_407DD1
.text:00407D7C                 cld
.text:00407D7D                 mov     ecx, 50h ; 'P'
.text:00407D82                 lea     esi, [esp+18Ch+FindFileData]
.text:00407D86                 mov     edi, esi
.text:00407D88                 test    ebp, ebp
.text:00407D8A                 rep stosd
.text:00407D8C                 mov     [esp+18Ch+var_170], 0
.text:00407D94                 jz      short loc_407DB5
.text:00407D96                 mov     [esp+18Ch+var_184], ebx
.text:00407D9A                 mov     ecx, [esp+18Ch+hNamedPipe]
.text:00407DA1                 mov     [esp+18Ch+lpProcName], 0
.text:00407DA9                 mov     [esp+18Ch+lpModuleName], ecx
.text:00407DAC                 call    ebp
.text:00407DAE                 sub     esp, 0Ch
.text:00407DB1                 mov     [esp+198h+var_17C], eax
.text:00407DB5
.text:00407DB5 loc_407DB5:                             ; CODE XREF: sub_407C30+164↑j
.text:00407DB5                 mov     eax, [esp+198h+var_17C]
.text:00407DB9                 test    eax, eax
.text:00407DBB                 jz      short loc_407DE0
.text:00407DBD
.text:00407DBD loc_407DBD:                             ; CODE XREF: sub_407C30+221↓j
.text:00407DBD                                         ; sub_407C30+23B↓j
.text:00407DBD                 mov     ebx, [esp+198h+var_16C]
.text:00407DC1                 mov     [esp+198h+hLibModule], ebx ; hLibModule
.text:00407DC4                 call    FreeLibrary
.text:00407DC9                 sub     esp, 4
.text:00407DCC                 mov     eax, 1
.text:00407DD1
.text:00407DD1 loc_407DD1:                             ; CODE XREF: sub_407C30+14A↑j
.text:00407DD1                 add     esp, 17Ch
.text:00407DD7                 pop     ebx
.text:00407DD8                 pop     esi
.text:00407DD9                 pop     edi
.text:00407DDA                 pop     ebp
.text:00407DDB                 retn
.text:00407DDB ; ---------------------------------------------------------------------------
.text:00407DDC                 align 10h
.text:00407DE0
.text:00407DE0 loc_407DE0:                             ; CODE XREF: sub_407C30+18B↑j
.text:00407DE0                 mov     [esp+198h+lpFindFileData], esi ; lpFindFileData
.text:00407DE4                 mov     edx, [esp+198h+lpFileName]
.text:00407DEB                 mov     [esp+198h+hLibModule], edx ; lpFileName
.text:00407DEE                 call    FindFirstFileA
.text:00407DF3                 sub     esp, 8
.text:00407DF6                 xor     ecx, ecx
.text:00407DF8                 cmp     eax, 0FFFFFFFFh
.text:00407DFB                 setnz   cl
.text:00407DFE                 mov     edi, [esp+198h+var_168]
.text:00407E02                 mov     [ebx], edi
.text:00407E04                 mov     esi, [esp+198h+hModule]
.text:00407E08                 mov     [esp+198h+var_17C], ecx
.text:00407E0C                 mov     ecx, [esp+198h+var_164]
.text:00407E10                 mov     [ebx+8], esi
.text:00407E13                 mov     [ebx+4], ecx
.text:00407E16                 mov     ebp, [esp+198h+FindFileData.dwFileAttributes]
.text:00407E1A                 mov     edi, [esp+198h+FindFileData.ftCreationTime.dwLowDateTime]
.text:00407E1E                 mov     [ebx+0Ch], ebp
.text:00407E21                 mov     [ebx+10h], edi
.text:00407E24                 mov     esi, [esp+198h+FindFileData.ftLastAccessTime.dwLowDateTime]
.text:00407E28                 mov     ecx, [esp+198h+FindFileData.ftCreationTime.dwHighDateTime]
.text:00407E2C                 mov     [ebx+18h], esi
.text:00407E2F                 mov     [ebx+14h], ecx
.text:00407E32                 mov     ebp, [esp+198h+FindFileData.ftLastAccessTime.dwHighDateTime]
.text:00407E36                 mov     [ebx+1Ch], ebp
.text:00407E39                 mov     edi, [esp+198h+FindFileData.ftLastWriteTime.dwLowDateTime]
.text:00407E3D                 mov     [ebx+20h], edi
.text:00407E40                 mov     [esp+198h+hLibModule], eax ; hFindFile
.text:00407E43                 call    FindClose
.text:00407E48                 sub     esp, 4
.text:00407E4B                 mov     esi, [esp+198h+var_17C]
.text:00407E4F                 test    esi, esi
.text:00407E51                 jnz     loc_407DBD
.text:00407E57                 cld
.text:00407E58                 mov     eax, [esp+198h+var_17C]
.text:00407E5C                 mov     ecx, 9
.text:00407E61                 mov     edi, ebx
.text:00407E63                 rep stosd
.text:00407E65                 mov     ebp, [esp+198h+var_170]
.text:00407E69                 mov     [ebx], ebp
.text:00407E6B                 jmp     loc_407DBD
.text:00407E6B ; ---------------------------------------------------------------------------
.text:00407E70 ; const CHAR aFindfirstfilee[]
.text:00407E70 aFindfirstfilee db 'FindFirstFileExA',0 ; DATA XREF: sub_407C30+283↓o
.text:00407E81 ; ---------------------------------------------------------------------------
.text:00407E81
.text:00407E81 loc_407E81:                             ; DATA XREF: sub_407C30:loc_407F1D↓o
.text:00407E81                 pop     esp
.text:00407E82                 sub     al, [eax]
.text:00407E84                 lea     esi, [esi+0]
.text:00407E8A                 lea     edi, [edi+0]
.text:00407E90
.text:00407E90 loc_407E90:                             ; CODE XREF: .text:00408FC3↓p
.text:00407E90                                         ; sub_4092C0+3FA↓p ...
.text:00407E90                 push    ebp
.text:00407E91                 push    edi
.text:00407E92                 xor     edi, edi
.text:00407E94                 push    esi
.text:00407E95                 push    ebx
.text:00407E96                 sub     esp, 17Ch
.text:00407E9C                 mov     [esp+188h+lpProcName], offset ModuleName ; "KERNEL32.DLL"
.text:00407EA3                 call    LoadLibraryA
.text:00407EA8                 sub     esp, 4
.text:00407EAB                 mov     [esp+188h+FindFileData.dwFileAttributes], eax
.text:00407EAF                 mov     ecx, [esp+188h+FindFileData.dwFileAttributes]
.text:00407EB3                 mov     [esp+188h+var_184], offset aFindfirstfilee ; "FindFirstFileExA"
.text:00407EBB                 mov     [esp+188h+lpProcName], ecx ; hModule
.text:00407EBE                 call    GetProcAddress
.text:00407EC3                 sub     esp, 8
.text:00407EC6                 mov     edx, [esp+188h+Str]
.text:00407ECD                 mov     [esp+188h+hModule], eax
.text:00407ED1                 mov     [esp+188h+lpProcName], edx ; Str
.text:00407ED4                 call    strlen
.text:00407ED9                 lea     edx, [eax+5]
.text:00407EDC                 mov     ebx, eax
.text:00407EDE                 mov     [esp+188h+lpProcName], edx ; Size
.text:00407EE1                 call    malloc
.text:00407EE6                 mov     esi, eax
.text:00407EE8                 test    esi, esi
.text:00407EEA                 mov     eax, 1
.text:00407EEF                 jz      loc_407FCD
.text:00407EF5                 mov     [esp+188h+lpProcName], esi ; Destination
.text:00407EF8                 mov     ebp, [esp+188h+Str]
.text:00407EFF                 mov     [esp+188h+var_184], ebp ; Source
.text:00407F03                 call    strcpy
.text:00407F08                 movzx   eax, byte ptr [ebx+esi-1]
.text:00407F0D                 cmp     al, 2Fh ; '/'
.text:00407F0F                 jz      loc_407FFB
.text:00407F15                 cmp     al, 5Ch ; '\'
.text:00407F17                 jz      loc_407FFB
.text:00407F1D
.text:00407F1D loc_407F1D:                             ; CODE XREF: sub_407C30+3D0↓j
.text:00407F1D                 mov     [esp+188h+var_184], offset loc_407E81 ; Source
.text:00407F25                 mov     [esp+188h+lpProcName], esi ; Destination
.text:00407F28                 call    strcat
.text:00407F2D                 mov     eax, [esp+188h+hModule]
.text:00407F31                 test    eax, eax
.text:00407F33                 jz      loc_407FF5
.text:00407F39                 mov     [esp+188h+var_174], 0
.text:00407F41                 lea     ebp, [esp+188h+FindFileData.ftCreationTime]
.text:00407F45                 mov     [esp+188h+var_178], 0
.text:00407F4D                 mov     [esp+188h+var_17C], 1
.text:00407F55                 mov     [esp+188h+var_180], ebp
.text:00407F59                 mov     [esp+188h+var_184], 0
.text:00407F61                 mov     [esp+188h+lpProcName], esi
.text:00407F64                 call    [esp+188h+hModule]
.text:00407F68                 sub     esp, 18h
.text:00407F6B                 mov     ebx, eax
.text:00407F6D                 cmp     eax, 0FFFFFFFFh
.text:00407F70                 jz      short loc_407FD8
.text:00407F72                 lea     esi, [esi+0]
.text:00407F79                 lea     edi, [edi+0]
.text:00407F80
.text:00407F80 loc_407F80:                             ; CODE XREF: sub_407C30+369↓j
.text:00407F80                                         ; sub_407C30+3C1↓j
.text:00407F80                 test    byte ptr [esp+1A0h+var_170], 10h
.text:00407F85                 jz      short loc_407F88
.text:00407F87                 inc     edi
.text:00407F88
.text:00407F88 loc_407F88:                             ; CODE XREF: sub_407C30+355↑j
.text:00407F88                 mov     [esp+1A0h+var_19C], ebp ; lpFindFileData
.text:00407F8C                 mov     [esp+1A0h+hFindFile], ebx ; hFindFile
.text:00407F8F                 call    FindNextFileA
.text:00407F94                 sub     esp, 8
.text:00407F97                 test    eax, eax
.text:00407F99                 jnz     short loc_407F80
.text:00407F9B                 mov     [esp+1A0h+hFindFile], ebx ; hFindFile
.text:00407F9E                 call    FindClose
.text:00407FA3                 sub     esp, 4
.text:00407FA6                 mov     esi, [esp+1A0h+var_174]
.text:00407FAA                 mov     [esp+1A0h+hFindFile], esi ; hLibModule
.text:00407FAD                 call    FreeLibrary
.text:00407FB2                 sub     esp, 4
.text:00407FB5                 mov     ebx, [esp+1A0h+var_10]
.text:00407FBC                 mov     [esp+1A0h+hFindFile], ebx ; LPCSTR
.text:00407FBF                 call    sub_40A460
.text:00407FC4                 test    eax, eax
.text:00407FC6                 jz      short loc_407FCB
.text:00407FC8                 add     edi, 2
.text:00407FCB
.text:00407FCB loc_407FCB:                             ; CODE XREF: sub_407C30+396↑j
.text:00407FCB                 mov     eax, edi
.text:00407FCD
.text:00407FCD loc_407FCD:                             ; CODE XREF: sub_407C30+2BF↑j
.text:00407FCD                                         ; sub_407C30+3C3↓j
.text:00407FCD                 add     esp, 17Ch
.text:00407FD3                 pop     ebx
.text:00407FD4                 pop     esi
.text:00407FD5                 pop     edi
.text:00407FD6                 pop     ebp
.text:00407FD7                 retn
.text:00407FD8 ; ---------------------------------------------------------------------------
.text:00407FD8
.text:00407FD8 loc_407FD8:                             ; CODE XREF: sub_407C30+340↑j
.text:00407FD8                                         ; sub_407C30+3C9↓j
.text:00407FD8                 mov     [esp+1A0h+var_19C], ebp ; lpFindFileData
.text:00407FDC                 mov     [esp+1A0h+hFindFile], esi ; lpFileName
.text:00407FDF                 call    FindFirstFileA
.text:00407FE4                 mov     ebx, eax
.text:00407FE6                 sub     esp, 8
.text:00407FE9                 cmp     ebx, 0FFFFFFFFh
.text:00407FEC                 mov     eax, 2
.text:00407FF1                 jnz     short loc_407F80
.text:00407FF3                 jmp     short loc_407FCD
.text:00407FF5 ; ---------------------------------------------------------------------------
.text:00407FF5
.text:00407FF5 loc_407FF5:                             ; CODE XREF: sub_407C30+303↑j
.text:00407FF5                 lea     ebp, [esp+188h+FindFileData.ftCreationTime]
.text:00407FF9                 jmp     short loc_407FD8
.text:00407FFB ; ---------------------------------------------------------------------------
.text:00407FFB
.text:00407FFB loc_407FFB:                             ; CODE XREF: sub_407C30+2DF↑j
.text:00407FFB                                         ; sub_407C30+2E7↑j
.text:00407FFB                 mov     byte ptr [ebx+esi-1], 0
.text:00408000                 jmp     loc_407F1D
.text:00408000 ; ---------------------------------------------------------------------------
.text:00408005                 align 10h
.text:00408010
.text:00408010 loc_408010:                             ; CODE XREF: sub_407C30+52↑j
.text:00408010                                         ; sub_40D5E0-3E59↓p
.text:00408010                 push    ebp
.text:00408011                 mov     eax, 0FFFFFFFFh
.text:00408016                 push    edi
.text:00408017                 push    esi
.text:00408018                 push    ebx
.text:00408019                 sub     esp, 0DCh
.text:0040801F                 mov     esi, [esp+0ECh+hNamedPipe]
.text:00408026                 mov     ebp, [esp+0ECh+Str]
.text:0040802D                 cmp     esi, 0FFFFFFFFh
.text:00408030                 jz      loc_4083B1
.text:00408036                 cld
.text:00408037                 xor     eax, eax
.text:00408039                 lea     ebx, [esp+0ECh+FindFileData.cFileName+0D4h]
.text:00408040                 mov     ecx, 0Dh
.text:00408045                 mov     edi, ebx
.text:00408047                 rep stosd
.text:00408049                 mov     dword ptr [ebp+18h], 1
.text:00408050                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+44h], esi ; hFile
.text:00408053                 call    GetFileType
.text:00408058                 sub     esp, 4
.text:0040805B                 xor     edx, edx
.text:0040805D                 cmp     eax, 2
.text:00408060                 jz      loc_408490
.text:00408066                 cmp     eax, 3
.text:00408069                 jz      loc_408480
.text:0040806F
.text:0040806F loc_40806F:                             ; CODE XREF: sub_407C30+855↓j
.text:0040806F                                         ; sub_407C30+865↓j
.text:0040806F                 or      [ebp+0], edx
.text:00408072                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+48h], ebx ; lpFileInformation
.text:00408076                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+44h], esi ; hFile
.text:00408079                 call    GetFileInformationByHandle
.text:0040807E                 sub     esp, 8
.text:00408081                 mov     ecx, dword ptr [esp+0ECh+FindFileData.cFileName+0F8h]
.text:00408088                 test    ecx, ecx
.text:0040808A                 jnz     short loc_4080C0
.text:0040808C                 mov     edx, dword ptr [esp+0ECh+FindFileData.cFileName+0F4h]
.text:00408093                 test    edx, edx
.text:00408095                 jnz     short loc_4080C0
.text:00408097                 mov     edx, [ebp+0]
.text:0040809A                 and     edx, 0F000h
.text:004080A0                 cmp     edx, 1000h
.text:004080A6                 jz      loc_408416
.text:004080AC
.text:004080AC loc_4080AC:                             ; CODE XREF: sub_407C30+839↓j
.text:004080AC                                         ; sub_407C30+845↓j
.text:004080AC                 test    ecx, ecx
.text:004080AE                 jnz     short loc_4080C0
.text:004080B0                 mov     edx, dword ptr [esp+0ECh+FindFileData.cFileName+0F4h]
.text:004080B7                 test    edx, edx
.text:004080B9                 jz      loc_4083F4
.text:004080BF                 nop
.text:004080C0
.text:004080C0 loc_4080C0:                             ; CODE XREF: sub_407C30+45A↑j
.text:004080C0                                         ; sub_407C30+465↑j ...
.text:004080C0                 cld
.text:004080C1                 mov     esi, ebx
.text:004080C3                 mov     dword ptr [ebp+14h], 0
.text:004080CA                 lea     edi, [esp+0ECh+FindFileData.cFileName+94h]
.text:004080CE                 mov     ecx, 0Dh
.text:004080D3                 rep movsd
.text:004080D5                 xor     ebx, ebx
.text:004080D7                 xor     edi, edi
.text:004080D9                 mov     edx, dword ptr [esp+0ECh+FindFileData.cFileName+0C4h]
.text:004080E0                 mov     esi, dword ptr [esp+0ECh+FindFileData.cFileName+0C0h]
.text:004080E4                 or      edx, ebx
.text:004080E6                 mov     ebx, dword ptr [esp+0ECh+FindFileData.cFileName+94h]
.text:004080EA                 mov     [ebp+8], edx
.text:004080ED                 or      edi, esi
.text:004080EF                 xor     edx, edx
.text:004080F1                 mov     [ebp+0Ch], edi
.text:004080F4                 test    bl, 10h
.text:004080F7                 mov     esi, dword ptr [esp+0ECh+FindFileData.cFileName+0B0h]
.text:004080FB                 setz    dl
.text:004080FE                 mov     [ebp+10h], esi
.text:00408101                 dec     edx
.text:00408102                 and     edx, 0FFFFC000h
.text:00408108                 add     edx, 8000h
.text:0040810E                 or      edx, 124h
.text:00408114                 test    bl, 1
.text:00408117                 movzx   eax, dx
.text:0040811A                 jnz     short loc_408121
.text:0040811C                 or      eax, 92h
.text:00408121
.text:00408121 loc_408121:                             ; CODE XREF: sub_407C30+4EA↑j
.text:00408121                 or      [ebp+0], eax
.text:00408124                 xor     edx, edx
.text:00408126                 mov     ebx, dword ptr [esp+0ECh+FindFileData.cFileName+0B4h]
.text:0040812A                 mov     ecx, dword ptr [esp+0ECh+FindFileData.cFileName+0B8h]
.text:0040812E                 mov     eax, edx
.text:00408130                 xor     esi, esi
.text:00408132                 mov     edx, dword ptr [esp+0ECh+FindFileData.cFileName+0A4h]
.text:00408136                 mov     edi, ebx
.text:00408138                 or      eax, edi
.text:0040813A                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+88h], eax
.text:0040813E                 mov     ebx, ecx
.text:00408140                 mov     edi, dword ptr [esp+0ECh+FindFileData.cFileName+0BCh]
.text:00408144                 or      ebx, esi
.text:00408146                 mov     esi, dword ptr [esp+0ECh+FindFileData.cFileName+88h]
.text:0040814A                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+84h], ebx
.text:0040814E                 xor     ebx, ebx
.text:00408150                 mov     ecx, dword ptr [esp+0ECh+FindFileData.cFileName+84h]
.text:00408154                 mov     [ebp+34h], esi
.text:00408157                 mov     esi, dword ptr [esp+0ECh+FindFileData.cFileName+0A0h]
.text:0040815B                 mov     [ebp+18h], edi
.text:0040815E                 xor     edi, edi
.text:00408160                 or      esi, ebx
.text:00408162                 mov     [ebp+30h], ecx
.text:00408165                 or      edi, edx
.text:00408167                 mov     edx, esi
.text:00408169                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+4Ch], 989680h
.text:00408171                 sub     edx, 0D53E8000h
.text:00408177                 mov     ebx, edi
.text:00408179                 sbb     ebx, 19DB1DEh
.text:0040817F                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+48h], ebx
.text:00408183                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+50h], 0
.text:0040818B                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+44h], edx
.text:0040818E                 call    sub_40F270
.text:00408193                 mov     ecx, eax
.text:00408195                 shr     eax, 1Fh
.text:00408198                 dec     eax
.text:00408199                 and     ecx, eax
.text:0040819B                 mov     [ebp+38h], ecx
.text:0040819E                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+44h], esi
.text:004081A1                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+48h], edi
.text:004081A5                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+4Ch], 989680h
.text:004081AD                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+50h], 0
.text:004081B5                 call    sub_40F0F0
.text:004081BA                 lea     ebx, [eax+eax*4]
.text:004081BD                 xor     ecx, ecx
.text:004081BF                 lea     esi, [ebx+ebx*4]
.text:004081C2                 shl     esi, 2
.text:004081C5                 mov     edi, esi
.text:004081C7                 shr     edi, 1Fh
.text:004081CA                 dec     edi
.text:004081CB                 and     edi, esi
.text:004081CD                 mov     [ebp+3Ch], edi
.text:004081D0                 mov     esi, dword ptr [esp+0ECh+FindFileData.cFileName+98h]
.text:004081D4                 xor     edi, edi
.text:004081D6                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+4Ch], 989680h
.text:004081DE                 mov     edx, dword ptr [esp+0ECh+FindFileData.cFileName+9Ch]
.text:004081E2                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+50h], 0
.text:004081EA                 or      esi, ecx
.text:004081EC                 or      edi, edx
.text:004081EE                 mov     edx, esi
.text:004081F0                 mov     ecx, edi
.text:004081F2                 sub     edx, 0D53E8000h
.text:004081F8                 sbb     ecx, 19DB1DEh
.text:004081FE                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+48h], ecx
.text:00408202                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+44h], edx
.text:00408205                 call    sub_40F270
.text:0040820A                 mov     ebx, eax
.text:0040820C                 shr     eax, 1Fh
.text:0040820F                 dec     eax
.text:00408210                 and     ebx, eax
.text:00408212                 mov     [ebp+48h], ebx
.text:00408215                 xor     ebx, ebx
.text:00408217                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+44h], esi
.text:0040821A                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+48h], edi
.text:0040821E                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+4Ch], 989680h
.text:00408226                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+50h], 0
.text:0040822E                 call    sub_40F0F0
.text:00408233                 lea     ecx, [eax+eax*4]
.text:00408236                 lea     esi, [ecx+ecx*4]
.text:00408239                 shl     esi, 2
.text:0040823C                 mov     edi, esi
.text:0040823E                 shr     edi, 1Fh
.text:00408241                 dec     edi
.text:00408242                 and     edi, esi
.text:00408244                 mov     [ebp+4Ch], edi
.text:00408247                 mov     esi, dword ptr [esp+0ECh+FindFileData.cFileName+0A8h]
.text:0040824B                 xor     edi, edi
.text:0040824D                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+4Ch], 989680h
.text:00408255                 mov     edx, dword ptr [esp+0ECh+FindFileData.cFileName+0ACh]
.text:00408259                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+50h], 0
.text:00408261                 or      esi, ebx
.text:00408263                 or      edi, edx
.text:00408265                 mov     edx, esi
.text:00408267                 mov     ebx, edi
.text:00408269                 sub     edx, 0D53E8000h
.text:0040826F                 sbb     ebx, 19DB1DEh
.text:00408275                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+48h], ebx
.text:00408279                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+44h], edx
.text:0040827C                 call    sub_40F270
.text:00408281                 mov     ecx, eax
.text:00408283                 shr     eax, 1Fh
.text:00408286                 dec     eax
.text:00408287                 and     ecx, eax
.text:00408289                 mov     [ebp+40h], ecx
.text:0040828C                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+48h], edi
.text:00408290                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+4Ch], 989680h
.text:00408298                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+50h], 0
.text:004082A0                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+44h], esi
.text:004082A3                 call    sub_40F0F0
.text:004082A8                 mov     dword ptr [ebp+50h], 200h
.text:004082AF                 lea     ebx, [eax+eax*4]
.text:004082B2                 mov     edi, dword ptr [esp+0ECh+FindFileData.cFileName+88h]
.text:004082B6                 lea     edx, [ebx+ebx*4]
.text:004082B9                 mov     eax, dword ptr [esp+0ECh+FindFileData.cFileName+84h]
.text:004082BD                 shl     edx, 2
.text:004082C0                 mov     ecx, edx
.text:004082C2                 shr     ecx, 1Fh
.text:004082C5                 dec     ecx
.text:004082C6                 and     ecx, edx
.text:004082C8                 test    edi, edi
.text:004082CA                 mov     edx, dword ptr [esp+0ECh+FindFileData.cFileName+88h]
.text:004082CE                 mov     [ebp+44h], ecx
.text:004082D1                 js      loc_4083E7
.text:004082D7
.text:004082D7 loc_4082D7:                             ; CODE XREF: sub_407C30+7BF↓j
.text:004082D7                 mov     edi, dword ptr [esp+0ECh+FindFileData.cFileName+84h]
.text:004082DB                 xor     esi, esi
.text:004082DD                 mov     ecx, eax
.text:004082DF                 shrd    ecx, edx, 9
.text:004082E3                 mov     ebx, edx
.text:004082E5                 mov     eax, esi
.text:004082E7                 and     edi, 1FFh
.text:004082ED                 sar     ebx, 9
.text:004082F0                 or      eax, edi
.text:004082F2                 jz      short loc_4082FA
.text:004082F4                 add     ecx, 1
.text:004082F7                 adc     ebx, 0
.text:004082FA
.text:004082FA loc_4082FA:                             ; CODE XREF: sub_407C30+6C2↑j
.text:004082FA                 mov     [ebp+5Ch], ebx
.text:004082FD                 mov     esi, dword_411060
.text:00408303                 xor     edi, edi
.text:00408305                 mov     [ebp+58h], ecx
.text:00408308                 mov     ebx, dword_411060
.text:0040830E                 mov     ecx, dword ptr [esp+0ECh+FindFileData.cFileName+88h]
.text:00408312                 mov     edx, dword ptr [esp+0ECh+FindFileData.cFileName+84h]
.text:00408316                 mov     [ebp+50h], ebx
.text:00408319                 shr     ebx, 9
.text:0040831C                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+50h], edi
.text:00408320                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+48h], ecx
.text:00408324                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+4Ch], esi
.text:00408328                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+44h], edx
.text:0040832B                 call    sub_40F270
.text:00408330                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+50h], edi
.text:00408334                 mov     ecx, dword ptr [esp+0ECh+FindFileData.cFileName+84h]
.text:00408338                 mov     edi, dword ptr [esp+0ECh+FindFileData.cFileName+88h]
.text:0040833C                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+74h], ebx
.text:00408340                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+7Ch], eax
.text:00408344                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+80h], edx
.text:00408348                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+78h], 0
.text:00408350                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+4Ch], esi
.text:00408354                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+44h], ecx
.text:00408357                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+48h], edi
.text:0040835B                 call    sub_40F0F0
.text:00408360                 mov     ebx, edx
.text:00408362                 or      ebx, eax
.text:00408364                 jz      short loc_4083C0
.text:00408366                 mov     edi, dword ptr [esp+0ECh+FindFileData.cFileName+7Ch]
.text:0040836A                 mov     esi, dword ptr [esp+0ECh+FindFileData.cFileName+80h]
.text:0040836E                 mov     eax, dword ptr [esp+0ECh+FindFileData.cFileName+74h]
.text:00408372                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+6Ch], edi
.text:00408376                 mov     ecx, dword ptr [esp+0ECh+FindFileData.cFileName+78h]
.text:0040837A                 add     dword ptr [esp+0ECh+FindFileData.cFileName+6Ch], 1
.text:0040837F                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+70h], esi
.text:00408383                 adc     dword ptr [esp+0ECh+FindFileData.cFileName+70h], 0
.text:00408388                 mul     dword ptr [esp+0ECh+FindFileData.cFileName+6Ch]
.text:0040838C                 mov     edi, dword ptr [esp+0ECh+FindFileData.cFileName+70h]
.text:00408390                 mov     ebx, edx
.text:00408392                 mov     edx, dword ptr [esp+0ECh+FindFileData.cFileName+6Ch]
.text:00408396                 mov     esi, eax
.text:00408398                 mov     eax, ebx
.text:0040839A                 imul    ecx, edx
.text:0040839D                 mov     edx, dword ptr [esp+0ECh+FindFileData.cFileName+74h]
.text:004083A1                 imul    edx, edi
.text:004083A4                 add     eax, ecx
.text:004083A6                 lea     edi, [edx+eax]
.text:004083A9
.text:004083A9 loc_4083A9:                             ; CODE XREF: sub_407C30+7B5↓j
.text:004083A9                 mov     [ebp+58h], esi
.text:004083AC                 xor     eax, eax
.text:004083AE                 mov     [ebp+5Ch], edi
.text:004083B1
.text:004083B1 loc_4083B1:                             ; CODE XREF: sub_407C30+400↑j
.text:004083B1                 add     esp, 0DCh
.text:004083B7                 pop     ebx
.text:004083B8                 pop     esi
.text:004083B9                 pop     edi
.text:004083BA                 pop     ebp
.text:004083BB                 retn
.text:004083BB ; ---------------------------------------------------------------------------
.text:004083BC                 align 10h
.text:004083C0
.text:004083C0 loc_4083C0:                             ; CODE XREF: sub_407C30+734↑j
.text:004083C0                 mov     eax, dword ptr [esp+0ECh+FindFileData.cFileName+7Ch]
.text:004083C4                 mov     edi, dword ptr [esp+0ECh+FindFileData.cFileName+78h]
.text:004083C8                 mov     ebx, dword ptr [esp+0ECh+FindFileData.cFileName+7Ch]
.text:004083CC                 mul     dword ptr [esp+0ECh+FindFileData.cFileName+74h]
.text:004083D0                 mov     ecx, dword ptr [esp+0ECh+FindFileData.cFileName+74h]
.text:004083D4                 imul    ebx, edi
.text:004083D7                 mov     esi, eax
.text:004083D9                 mov     eax, dword ptr [esp+0ECh+FindFileData.cFileName+80h]
.text:004083DD                 add     edx, ebx
.text:004083DF                 imul    ecx, eax
.text:004083E2                 lea     edi, [ecx+edx]
.text:004083E5                 jmp     short loc_4083A9
.text:004083E7 ; ---------------------------------------------------------------------------
.text:004083E7
.text:004083E7 loc_4083E7:                             ; CODE XREF: sub_407C30+6A1↑j
.text:004083E7                 add     eax, 1FFh
.text:004083EC                 adc     edx, 0
.text:004083EF                 jmp     loc_4082D7
.text:004083F4 ; ---------------------------------------------------------------------------
.text:004083F4
.text:004083F4 loc_4083F4:                             ; CODE XREF: sub_407C30+489↑j
.text:004083F4                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+44h], esi ; hFile
.text:004083F7                 lea     ecx, [esp+0ECh+FindFileData.cFileName+0F4h]
.text:004083FE                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+48h], ecx ; lpFileSizeHigh
.text:00408402                 call    GetFileSize
.text:00408407                 sub     esp, 8
.text:0040840A                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+0F8h], eax
.text:00408411                 jmp     loc_4080C0
.text:00408416 ; ---------------------------------------------------------------------------
.text:00408416
.text:00408416 loc_408416:                             ; CODE XREF: sub_407C30+476↑j
.text:00408416                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+90h], 0
.text:0040841E                 lea     ecx, [esp+0ECh+FindFileData.cFileName+90h]
.text:00408422                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+58h], 0 ; lpBytesLeftThisMessage
.text:0040842A                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+54h], ecx ; lpTotalBytesAvail
.text:0040842E                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+50h], 0 ; lpBytesRead
.text:00408436                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+4Ch], 0 ; nBufferSize
.text:0040843E                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+48h], 0 ; lpBuffer
.text:00408446                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+44h], esi ; hNamedPipe
.text:00408449                 call    PeekNamedPipe
.text:0040844E                 sub     esp, 18h
.text:00408451                 test    eax, eax
.text:00408453                 jz      short loc_40846E
.text:00408455                 mov     ecx, dword ptr [esp+0ECh+FindFileData.cFileName+90h]
.text:00408459                 xor     eax, eax
.text:0040845B                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+0F4h], eax
.text:00408462                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+0F8h], ecx
.text:00408469                 jmp     loc_4080AC
.text:0040846E ; ---------------------------------------------------------------------------
.text:0040846E
.text:0040846E loc_40846E:                             ; CODE XREF: sub_407C30+823↑j
.text:0040846E                 mov     ecx, dword ptr [esp+0ECh+FindFileData.cFileName+0F8h]
.text:00408475                 jmp     loc_4080AC
.text:00408475 ; ---------------------------------------------------------------------------
.text:0040847A                 align 10h
.text:00408480
.text:00408480 loc_408480:                             ; CODE XREF: sub_407C30+439↑j
.text:00408480                 mov     edx, 1000h
.text:00408485                 jmp     loc_40806F
.text:00408485 ; ---------------------------------------------------------------------------
.text:0040848A                 align 10h
.text:00408490
.text:00408490 loc_408490:                             ; CODE XREF: sub_407C30+430↑j
.text:00408490                 mov     edx, 2000h
.text:00408495                 jmp     loc_40806F
.text:00408495 sub_407C30      endp ; sp-analysis failed
.text:00408495
.text:00408495 ; ---------------------------------------------------------------------------
.text:0040849A aLnk            db '.lnk',0             ; DATA XREF: sub_4084E0+E0↓o
.text:0040849A                                         ; .text:00408B8A↓o ...
.text:0040849F ; const CHAR aKernel32[]
.text:0040849F aKernel32       db 'KERNEL32',0         ; DATA XREF: sub_4084E0+12D↓o
.text:0040849F                                         ; .text:0040923B↓o
.text:004084A8 ; const CHAR aGetcompressedf[]
.text:004084A8 aGetcompressedf db 'GetCompressedFileSizeA',0
.text:004084A8                                         ; DATA XREF: sub_4084E0+13E↓o
.text:004084A8                                         ; .text:0040924C↓o
.text:004084BF ; const CHAR aGetbinarytypea[]
.text:004084BF aGetbinarytypea db 'GetBinaryTypeA',0   ; DATA XREF: sub_4084E0+333↓o
.text:004084BF                                         ; .text:00408BE6↓o ...
.text:004084CE ; const char aPathext[]
.text:004084CE aPathext        db 'PATHEXT',0          ; DATA XREF: sub_4084E0:loc_4088C7↓o
.text:004084CE                                         ; .text:loc_408C90↓o ...
.text:004084D6                 align 10h
.text:004084E0
.text:004084E0 ; =============== S U B R O U T I N E =======================================
.text:004084E0
.text:004084E0
.text:004084E0 ; int __cdecl sub_4084E0(char *String1, int)
.text:004084E0 sub_4084E0      proc near               ; CODE XREF: sub_4092C0+3CD↓p
.text:004084E0                                         ; sub_40D5E0-3E3B↓p
.text:004084E0
.text:004084E0 Str             = dword ptr -6Ch
.text:004084E0 lpProcName      = dword ptr -68h
.text:004084E0 var_64          = dword ptr -64h
.text:004084E0 var_60          = dword ptr -60h
.text:004084E0 var_5C          = dword ptr -5Ch
.text:004084E0 var_4C          = dword ptr -4Ch
.text:004084E0 var_48          = dword ptr -48h
.text:004084E0 var_44          = dword ptr -44h
.text:004084E0 var_40          = dword ptr -40h
.text:004084E0 var_3C          = dword ptr -3Ch
.text:004084E0 var_38          = dword ptr -38h
.text:004084E0 lpRootPathName  = dword ptr -30h
.text:004084E0 var_2C          = byte ptr -2Ch
.text:004084E0 var_28          = dword ptr -28h
.text:004084E0 var_24          = dword ptr -24h
.text:004084E0 var_20          = dword ptr -20h
.text:004084E0 var_1C          = dword ptr -1Ch
.text:004084E0 var_18          = byte ptr -18h
.text:004084E0 String1         = dword ptr  4
.text:004084E0 arg_4           = dword ptr  8
.text:004084E0
.text:004084E0                 push    ebp
.text:004084E1                 push    edi
.text:004084E2                 push    esi
.text:004084E3                 push    ebx
.text:004084E4                 sub     esp, 5Ch
.text:004084E7                 mov     edx, [esp+6Ch+String1]
.text:004084EB                 mov     [esp+6Ch+Str], edx ; LPCSTR
.text:004084EE                 call    sub_40A090
.text:004084F3                 mov     [esp+6Ch+Str], eax
.text:004084F6                 call    sub_409C60
.text:004084FB                 mov     [esp+6Ch+lpRootPathName], eax
.text:004084FF                 test    eax, eax
.text:00408501                 jz      loc_408733
.text:00408507                 mov     [esp+6Ch+Str], eax ; Str
.text:0040850A                 call    strlen
.text:0040850F                 mov     edx, [esp+6Ch+arg_4]
.text:00408513                 mov     ebx, eax
.text:00408515                 mov     esi, [edx+0Ch]
.text:00408518                 mov     edi, [edx+8]
.text:0040851B                 mov     eax, esi
.text:0040851D                 or      eax, edi
.text:0040851F                 jz      loc_408940
.text:00408525                 mov     ecx, [esp+6Ch+lpRootPathName]
.text:00408529                 mov     [esp+6Ch+Str], ecx ; lpRootPathName
.text:0040852C                 call    GetDriveTypeA
.text:00408531                 sub     esp, 4
.text:00408534                 cmp     eax, 4
.text:00408537                 jz      loc_408940
.text:0040853D
.text:0040853D loc_40853D:                             ; CODE XREF: sub_4084E0+48A↓j
.text:0040853D                                         ; sub_4084E0+4B2↓j
.text:0040853D                 mov     edx, [esp+6Ch+arg_4]
.text:00408541                 mov     esi, [edx+14h]
.text:00408544                 mov     edi, [edx+10h]
.text:00408547                 mov     ecx, esi
.text:00408549                 or      ecx, edi
.text:0040854B                 jnz     short loc_408575
.text:0040854D                 mov     ebp, [esp+6Ch+lpRootPathName]
.text:00408551                 xor     esi, esi
.text:00408553                 xor     edi, edi
.text:00408555                 test    ebp, ebp
.text:00408557                 jz      short loc_408567
.text:00408559                 movzx   ebx, byte ptr [ebp+0]
.text:0040855D                 test    bl, bl
.text:0040855F                 mov     cl, bl
.text:00408561                 jnz     loc_4088F1
.text:00408567
.text:00408567 loc_408567:                             ; CODE XREF: sub_4084E0+77↑j
.text:00408567                 xor     eax, eax
.text:00408569                 xor     edx, edx
.text:0040856B
.text:0040856B loc_40856B:                             ; CODE XREF: sub_4084E0+458↓j
.text:0040856B                 mov     ebp, [esp+6Ch+arg_4]
.text:0040856F                 mov     [ebp+10h], eax
.text:00408572                 mov     [ebp+14h], edx
.text:00408575
.text:00408575 loc_408575:                             ; CODE XREF: sub_4084E0+6B↑j
.text:00408575                 mov     edi, [esp+6Ch+String1]
.text:00408579                 xor     ebx, ebx
.text:0040857B                 test    edi, edi
.text:0040857D                 jz      loc_4087F3
.text:00408583                 mov     esi, [esp+6Ch+String1]
.text:00408587                 cmp     byte ptr [esi], 0
.text:0040858A                 jnz     loc_408800
.text:00408590
.text:00408590 loc_408590:                             ; CODE XREF: sub_4084E0+38C↓j
.text:00408590                                         ; sub_4084E0+397↓j
.text:00408590                 mov     ebp, [esp+6Ch+String1]
.text:00408594                 test    ebp, ebp
.text:00408596                 jz      loc_4087F3
.text:0040859C                 mov     [esp+6Ch+lpProcName], 2Eh ; '.' ; Ch
.text:004085A4                 mov     edi, [esp+6Ch+String1]
.text:004085A8                 mov     [esp+6Ch+Str], edi ; Str
.text:004085AB                 call    strrchr
.text:004085B0                 test    eax, eax
.text:004085B2                 jz      loc_4087F3
.text:004085B8                 cld
.text:004085B9                 mov     ecx, 5
.text:004085BE                 mov     esi, eax
.text:004085C0                 mov     edi, offset aLnk ; ".lnk"
.text:004085C5                 repe cmpsb
.text:004085C7                 setz    cl
.text:004085CA                 movzx   eax, cl
.text:004085CD                 lea     esi, [esi+0]
.text:004085D0
.text:004085D0 loc_4085D0:                             ; CODE XREF: sub_4084E0+315↓j
.text:004085D0                 test    eax, eax
.text:004085D2                 jz      short loc_4085DA
.text:004085D4                 or      ebx, 0A000h
.text:004085DA
.text:004085DA loc_4085DA:                             ; CODE XREF: sub_4084E0+F2↑j
.text:004085DA                 mov     esi, [esp+6Ch+arg_4]
.text:004085DE                 xor     ecx, ecx
.text:004085E0                 mov     edi, ds:dword_412210
.text:004085E6                 or      [esi], ebx
.text:004085E8                 mov     ebx, [esi+14h]
.text:004085EB                 mov     ebp, [esi+10h]
.text:004085EE                 mov     eax, ebx
.text:004085F0                 xor     eax, ecx
.text:004085F2                 xor     ebp, edi
.text:004085F4                 or      eax, ebp
.text:004085F6                 jnz     loc_408780
.text:004085FC
.text:004085FC loc_4085FC:                             ; CODE XREF: sub_4084E0+30E↓j
.text:004085FC                 mov     ecx, dword_411060
.text:00408602                 xor     esi, esi
.text:00408604                 xor     edi, edi
.text:00408606                 mov     edx, [esp+6Ch+arg_4]
.text:0040860A                 mov     [edx+50h], ecx
.text:0040860D                 mov     [esp+6Ch+Str], offset aKernel32 ; "KERNEL32"
.text:00408614                 call    LoadLibraryA
.text:00408619                 sub     esp, 4
.text:0040861C                 mov     ebp, eax
.text:0040861E                 mov     [esp+6Ch+lpProcName], offset aGetcompressedf ; "GetCompressedFileSizeA"
.text:00408626                 mov     [esp+6Ch+Str], eax ; hModule
.text:00408629                 call    GetProcAddress
.text:0040862E                 sub     esp, 8
.text:00408631                 test    eax, eax
.text:00408633                 jz      short loc_408668
.text:00408635                 mov     ebx, [esp+6Ch+String1]
.text:00408639                 lea     esi, [esp+6Ch+var_2C]
.text:0040863D                 mov     [esp+6Ch+lpProcName], esi
.text:00408641                 mov     [esp+6Ch+Str], ebx
.text:00408644                 call    eax
.text:00408646                 sub     esp, 8
.text:00408649                 mov     ebx, eax
.text:0040864B                 cmp     eax, 0FFFFFFFFh
.text:0040864E                 jz      loc_408769
.text:00408654
.text:00408654 loc_408654:                             ; CODE XREF: sub_4084E0+29A↓j
.text:00408654                 mov     esi, dword ptr [esp+6Ch+var_2C]
.text:00408658                 mov     ecx, ebx
.text:0040865A                 xor     edi, edi
.text:0040865C                 xor     ebx, ebx
.text:0040865E                 mov     edx, esi
.text:00408660                 mov     esi, ecx
.text:00408662                 or      esi, edi
.text:00408664                 mov     edi, ebx
.text:00408666                 or      edi, edx
.text:00408668
.text:00408668 loc_408668:                             ; CODE XREF: sub_4084E0+153↑j
.text:00408668                                         ; sub_4084E0+294↓j
.text:00408668                 test    ebp, ebp
.text:0040866A                 jz      short loc_408677
.text:0040866C                 mov     [esp+6Ch+Str], ebp ; hLibModule
.text:0040866F                 call    FreeLibrary
.text:00408674                 sub     esp, 4
.text:00408677
.text:00408677 loc_408677:                             ; CODE XREF: sub_4084E0+18A↑j
.text:00408677                 mov     ebp, edi
.text:00408679                 mov     edx, ebp
.text:0040867B                 mov     edi, esi
.text:0040867D                 or      edx, esi
.text:0040867F                 jnz     short loc_40868B
.text:00408681                 mov     eax, [esp+6Ch+arg_4]
.text:00408685                 mov     edi, [eax+30h]
.text:00408688                 mov     ebp, [eax+34h]
.text:0040868B
.text:0040868B loc_40868B:                             ; CODE XREF: sub_4084E0+19F↑j
.text:0040868B                 mov     [esp+6Ch+lpProcName], ebp
.text:0040868F                 mov     ebx, dword_411060
.text:00408695                 xor     esi, esi
.text:00408697                 mov     [esp+6Ch+var_60], esi
.text:0040869B                 mov     [esp+6Ch+Str], edi
.text:0040869E                 mov     [esp+6Ch+var_64], ebx
.text:004086A2                 call    sub_40F270
.text:004086A7                 mov     [esp+6Ch+var_3C], eax
.text:004086AB                 mov     ecx, dword_411060
.text:004086B1                 mov     [esp+6Ch+lpProcName], ebp
.text:004086B5                 mov     [esp+6Ch+var_38], edx
.text:004086B9                 shr     ecx, 9
.text:004086BC                 mov     [esp+6Ch+var_44], ecx
.text:004086C0                 mov     [esp+6Ch+var_40], 0
.text:004086C8                 mov     [esp+6Ch+var_64], ebx
.text:004086CC                 mov     [esp+6Ch+var_60], esi
.text:004086D0                 mov     [esp+6Ch+Str], edi
.text:004086D3                 call    sub_40F0F0
.text:004086D8                 mov     ebp, edx
.text:004086DA                 or      ebp, eax
.text:004086DC                 jz      short loc_408740
.text:004086DE                 mov     ebp, [esp+6Ch+var_3C]
.text:004086E2                 mov     esi, [esp+6Ch+var_38]
.text:004086E6                 mov     eax, [esp+6Ch+var_44]
.text:004086EA                 mov     [esp+6Ch+var_4C], ebp
.text:004086EE                 mov     ecx, [esp+6Ch+var_40]
.text:004086F2                 mov     ebx, [esp+6Ch+var_44]
.text:004086F6                 add     [esp+6Ch+var_4C], 1
.text:004086FB                 mov     [esp+6Ch+var_48], esi
.text:004086FF                 mov     edi, [esp+6Ch+var_4C]
.text:00408703                 adc     [esp+6Ch+var_48], 0
.text:00408708                 mul     [esp+6Ch+var_4C]
.text:0040870C                 imul    ecx, edi
.text:0040870F                 mov     esi, eax
.text:00408711                 mov     eax, [esp+6Ch+var_48]
.text:00408715                 add     edx, ecx
.text:00408717                 imul    ebx, eax
.text:0040871A                 lea     edi, [ebx+edx]
.text:0040871D
.text:0040871D loc_40871D:                             ; CODE XREF: sub_4084E0+287↓j
.text:0040871D                 mov     ebx, [esp+6Ch+arg_4]
.text:00408721                 mov     [ebx+58h], esi
.text:00408724                 mov     esi, [esp+6Ch+lpRootPathName]
.text:00408728                 mov     [ebx+5Ch], edi
.text:0040872B                 mov     [esp+6Ch+Str], esi ; Block
.text:0040872E                 call    free
.text:00408733
.text:00408733 loc_408733:                             ; CODE XREF: sub_4084E0+21↑j
.text:00408733                 add     esp, 5Ch
.text:00408736                 xor     eax, eax
.text:00408738                 pop     ebx
.text:00408739                 pop     esi
.text:0040873A                 pop     edi
.text:0040873B                 pop     ebp
.text:0040873C                 retn
.text:0040873C ; ---------------------------------------------------------------------------
.text:0040873D                 align 10h
.text:00408740
.text:00408740 loc_408740:                             ; CODE XREF: sub_4084E0+1FC↑j
.text:00408740                 mov     eax, [esp+6Ch+var_3C]
.text:00408744                 mov     edi, [esp+6Ch+var_40]
.text:00408748                 mov     ecx, [esp+6Ch+var_3C]
.text:0040874C                 mul     [esp+6Ch+var_44]
.text:00408750                 mov     ebx, [esp+6Ch+var_44]
.text:00408754                 imul    ecx, edi
.text:00408757                 mov     ebp, edx
.text:00408759                 mov     esi, eax
.text:0040875B                 mov     edx, [esp+6Ch+var_38]
.text:0040875F                 add     ebp, ecx
.text:00408761                 imul    ebx, edx
.text:00408764                 lea     edi, [ebx+ebp]
.text:00408767                 jmp     short loc_40871D
.text:00408769 ; ---------------------------------------------------------------------------
.text:00408769
.text:00408769 loc_408769:                             ; CODE XREF: sub_4084E0+16E↑j
.text:00408769                 call    GetLastError
.text:0040876E                 xor     esi, esi
.text:00408770                 xor     edi, edi
.text:00408772                 test    eax, eax
.text:00408774                 jnz     loc_408668
.text:0040877A                 jmp     loc_408654
.text:0040877A ; ---------------------------------------------------------------------------
.text:0040877F                 align 10h
.text:00408780
.text:00408780 loc_408780:                             ; CODE XREF: sub_4084E0+116↑j
.text:00408780                 mov     edx, [esp+6Ch+lpRootPathName]
.text:00408784                 lea     ecx, [esp+6Ch+var_20]
.text:00408788                 lea     ebx, [esp+6Ch+var_1C]
.text:0040878C                 mov     [esp+6Ch+var_5C], ebx ; LPDWORD
.text:00408790                 lea     edi, [esp+6Ch+var_24]
.text:00408794                 lea     ebp, [esp+6Ch+var_28]
.text:00408798                 mov     [esp+6Ch+var_60], ecx ; LPDWORD
.text:0040879C                 mov     [esp+6Ch+var_64], edi ; LPDWORD
.text:004087A0                 mov     [esp+6Ch+lpProcName], ebp ; LPDWORD
.text:004087A4                 mov     [esp+6Ch+Str], edx ; LPCSTR
.text:004087A7                 call    sub_40AAB0
.text:004087AC                 test    eax, eax
.text:004087AE                 jnz     short loc_4087D0
.text:004087B0                 mov     [esp+6Ch+var_28], 1
.text:004087B8                 mov     [esp+6Ch+var_24], 200h
.text:004087C0                 mov     [esp+6Ch+var_20], 0
.text:004087C8                 mov     [esp+6Ch+var_1C], 0
.text:004087D0
.text:004087D0 loc_4087D0:                             ; CODE XREF: sub_4084E0+2CE↑j
.text:004087D0                 mov     ebp, [esp+6Ch+var_24]
.text:004087D4                 mov     edi, [esp+6Ch+var_28]
.text:004087D8                 mov     eax, [esp+6Ch+arg_4]
.text:004087DC                 imul    ebp, edi
.text:004087DF                 mov     esi, [eax+10h]
.text:004087E2                 mov     dword_411060, ebp
.text:004087E8                 mov     ds:dword_412210, esi
.text:004087EE                 jmp     loc_4085FC
.text:004087F3 ; ---------------------------------------------------------------------------
.text:004087F3
.text:004087F3 loc_4087F3:                             ; CODE XREF: sub_4084E0+9D↑j
.text:004087F3                                         ; sub_4084E0+B6↑j ...
.text:004087F3                 xor     eax, eax
.text:004087F5                 jmp     loc_4085D0
.text:004087F5 ; ---------------------------------------------------------------------------
.text:004087FA                 align 10h
.text:00408800
.text:00408800 loc_408800:                             ; CODE XREF: sub_4084E0+AA↑j
.text:00408800                 mov     [esp+6Ch+Str], offset ModuleName ; "KERNEL32.DLL"
.text:00408807                 xor     ebp, ebp
.text:00408809                 call    GetModuleHandleA
.text:0040880E                 sub     esp, 4
.text:00408811                 mov     edi, eax
.text:00408813                 mov     [esp+6Ch+lpProcName], offset aGetbinarytypea ; "GetBinaryTypeA"
.text:0040881B                 mov     [esp+6Ch+Str], eax ; hModule
.text:0040881E                 call    GetProcAddress
.text:00408823                 sub     esp, 8
.text:00408826                 mov     edx, eax
.text:00408828                 test    eax, eax
.text:0040882A                 jz      short loc_408844
.text:0040882C                 mov     eax, [esp+6Ch+String1]
.text:00408830                 lea     ecx, [esp+6Ch+var_18]
.text:00408834                 mov     [esp+6Ch+lpProcName], ecx
.text:00408838                 mov     [esp+6Ch+Str], eax
.text:0040883B                 call    edx
.text:0040883D                 sub     esp, 8
.text:00408840                 test    eax, eax
.text:00408842                 jnz     short loc_4088A8
.text:00408844
.text:00408844 loc_408844:                             ; CODE XREF: sub_4084E0+34A↑j
.text:00408844                 mov     edx, ds:dword_412220
.text:0040884A                 test    edx, edx
.text:0040884C                 jz      short loc_4088C7
.text:0040884E
.text:0040884E loc_40884E:                             ; CODE XREF: sub_4084E0+3FA↓j
.text:0040884E                                         ; sub_4084E0+40C↓j
.text:0040884E                 mov     eax, [esp+6Ch+String1]
.text:00408852                 test    eax, eax
.text:00408854                 jz      short loc_40885F
.text:00408856                 mov     esi, [esp+6Ch+String1]
.text:0040885A                 cmp     byte ptr [esi], 0
.text:0040885D                 jnz     short loc_40887C
.text:0040885F
.text:0040885F loc_40885F:                             ; CODE XREF: sub_4084E0+374↑j
.text:0040885F                                         ; sub_4084E0+3B0↓j ...
.text:0040885F                 mov     [esp+6Ch+Str], edi ; hLibModule
.text:00408862                 call    FreeLibrary
.text:00408867                 sub     esp, 4
.text:0040886A                 test    ebp, ebp
.text:0040886C                 jz      loc_408590
.text:00408872                 mov     ebx, 49h ; 'I'
.text:00408877                 jmp     loc_408590
.text:0040887C ; ---------------------------------------------------------------------------
.text:0040887C
.text:0040887C loc_40887C:                             ; CODE XREF: sub_4084E0+37D↑j
.text:0040887C                 mov     [esp+6Ch+Str], esi ; Str
.text:0040887F                 mov     [esp+6Ch+lpProcName], 2Eh ; '.' ; Ch
.text:00408887                 call    strrchr
.text:0040888C                 test    eax, eax
.text:0040888E                 mov     esi, eax
.text:00408890                 jz      short loc_40885F
.text:00408892                 mov     [esp+6Ch+lpProcName], eax ; SubStr
.text:00408896                 mov     ecx, ds:dword_412220
.text:0040889C                 mov     [esp+6Ch+Str], ecx ; Str
.text:0040889F                 call    strstr
.text:004088A4                 test    eax, eax
.text:004088A6                 jz      short loc_4088AF
.text:004088A8
.text:004088A8 loc_4088A8:                             ; CODE XREF: sub_4084E0+362↑j
.text:004088A8                                         ; sub_4084E0+3E5↓j
.text:004088A8                 mov     ebp, 1
.text:004088AD                 jmp     short loc_40885F
.text:004088AF ; ---------------------------------------------------------------------------
.text:004088AF
.text:004088AF loc_4088AF:                             ; CODE XREF: sub_4084E0+3C6↑j
.text:004088AF                 mov     [esp+6Ch+lpProcName], esi ; SubStr
.text:004088B3                 mov     edx, off_411064 ; ".com;.exe;.bat;.cmd"
.text:004088B9                 mov     [esp+6Ch+Str], edx ; Str
.text:004088BC                 call    strstr
.text:004088C1                 test    eax, eax
.text:004088C3                 jz      short loc_40885F
.text:004088C5                 jmp     short loc_4088A8
.text:004088C7 ; ---------------------------------------------------------------------------
.text:004088C7
.text:004088C7 loc_4088C7:                             ; CODE XREF: sub_4084E0+36C↑j
.text:004088C7                 mov     [esp+6Ch+Str], offset aPathext ; "PATHEXT"
.text:004088CE                 call    getenv
.text:004088D3                 mov     ds:dword_412220, eax
.text:004088D8                 test    eax, eax
.text:004088DA                 jnz     loc_40884E
.text:004088E0                 mov     esi, off_411064 ; ".com;.exe;.bat;.cmd"
.text:004088E6                 mov     ds:dword_412220, esi
.text:004088EC                 jmp     loc_40884E
.text:004088F1 ; ---------------------------------------------------------------------------
.text:004088F1
.text:004088F1 loc_4088F1:                             ; CODE XREF: sub_4084E0+81↑j
.text:004088F1                                         ; sub_4084E0+452↓j
.text:004088F1                 shld    edi, esi, 8
.text:004088F5                 movsx   eax, cl
.text:004088F8                 shl     esi, 8
.text:004088FB                 cdq
.text:004088FC                 add     esi, eax
.text:004088FE                 adc     edi, edx
.text:00408900                 mov     edx, edi
.text:00408902                 xor     ebx, ebx
.text:00408904                 and     edx, 0FF000000h
.text:0040890A                 mov     eax, edx
.text:0040890C                 or      eax, ebx
.text:0040890E                 jz      short loc_408929
.text:00408910                 mov     ecx, edx
.text:00408912                 xor     eax, eax
.text:00408914                 shr     ecx, 10h
.text:00408917                 mov     edx, esi
.text:00408919                 xor     edx, ecx
.text:0040891B                 mov     ecx, edi
.text:0040891D                 xor     ecx, eax
.text:0040891F                 mov     esi, edx
.text:00408921                 mov     edi, ecx
.text:00408923                 and     edi, 0FFFFFFh
.text:00408929
.text:00408929 loc_408929:                             ; CODE XREF: sub_4084E0+42E↑j
.text:00408929                 inc     ebp
.text:0040892A                 movzx   ebx, byte ptr [ebp+0]
.text:0040892E                 test    bl, bl
.text:00408930                 mov     cl, bl
.text:00408932                 jnz     short loc_4088F1
.text:00408934                 mov     eax, esi
.text:00408936                 mov     edx, edi
.text:00408938                 jmp     loc_40856B
.text:00408938 ; ---------------------------------------------------------------------------
.text:0040893D                 align 10h
.text:00408940
.text:00408940 loc_408940:                             ; CODE XREF: sub_4084E0+3F↑j
.text:00408940                                         ; sub_4084E0+57↑j
.text:00408940                 mov     edi, [esp+6Ch+lpRootPathName]
.text:00408944                 mov     ebp, [esp+6Ch+String1]
.text:00408948                 mov     [esp+6Ch+lpProcName], edi ; String2
.text:0040894C                 mov     [esp+6Ch+Str], ebp ; String1
.text:0040894F                 call    _stricmp
.text:00408954                 test    eax, eax
.text:00408956                 jnz     short loc_408970
.text:00408958                 mov     ebx, [esp+6Ch+arg_4]
.text:0040895C                 mov     dword ptr [ebx+8], 5
.text:00408963                 mov     dword ptr [ebx+0Ch], 50000h
.text:0040896A                 jmp     loc_40853D
.text:0040896A ; ---------------------------------------------------------------------------
.text:0040896F                 align 10h
.text:00408970
.text:00408970 loc_408970:                             ; CODE XREF: sub_4084E0+476↑j
.text:00408970                 mov     ebp, [esp+6Ch+String1]
.text:00408974                 xor     esi, esi
.text:00408976                 xor     edi, edi
.text:00408978                 add     ebp, ebx
.text:0040897A                 jz      short loc_408984
.text:0040897C                 movzx   ecx, byte ptr [ebp+0]
.text:00408980                 test    cl, cl
.text:00408982                 jnz     short loc_408997
.text:00408984
.text:00408984 loc_408984:                             ; CODE XREF: sub_4084E0+49A↑j
.text:00408984                 xor     eax, eax
.text:00408986                 xor     edx, edx
.text:00408988
.text:00408988 loc_408988:                             ; CODE XREF: sub_4084E0+4FE↓j
.text:00408988                 mov     ebp, [esp+6Ch+arg_4]
.text:0040898C                 mov     [ebp+8], eax
.text:0040898F                 mov     [ebp+0Ch], edx
.text:00408992                 jmp     loc_40853D
.text:00408997 ; ---------------------------------------------------------------------------
.text:00408997
.text:00408997 loc_408997:                             ; CODE XREF: sub_4084E0+4A2↑j
.text:00408997                                         ; sub_4084E0+4F8↓j
.text:00408997                 shld    edi, esi, 8
.text:0040899B                 movsx   eax, cl
.text:0040899E                 shl     esi, 8
.text:004089A1                 cdq
.text:004089A2                 add     esi, eax
.text:004089A4                 adc     edi, edx
.text:004089A6                 mov     edx, edi
.text:004089A8                 xor     ebx, ebx
.text:004089AA                 and     edx, 0FF000000h
.text:004089B0                 mov     eax, edx
.text:004089B2                 or      eax, ebx
.text:004089B4                 jz      short loc_4089CF
.text:004089B6                 mov     ecx, edx
.text:004089B8                 xor     eax, eax
.text:004089BA                 shr     ecx, 10h
.text:004089BD                 mov     edx, esi
.text:004089BF                 xor     edx, ecx
.text:004089C1                 mov     ecx, edi
.text:004089C3                 xor     ecx, eax
.text:004089C5                 mov     esi, edx
.text:004089C7                 mov     edi, ecx
.text:004089C9                 and     edi, 0FFFFFFh
.text:004089CF
.text:004089CF loc_4089CF:                             ; CODE XREF: sub_4084E0+4D4↑j
.text:004089CF                 inc     ebp
.text:004089D0                 movzx   ebx, byte ptr [ebp+0]
.text:004089D4                 test    bl, bl
.text:004089D6                 mov     cl, bl
.text:004089D8                 jnz     short loc_408997
.text:004089DA                 mov     eax, esi
.text:004089DC                 mov     edx, edi
.text:004089DE                 jmp     short loc_408988
.text:004089DE sub_4084E0      endp
.text:004089DE
.text:004089E0
.text:004089E0 ; =============== S U B R O U T I N E =======================================
.text:004089E0
.text:004089E0
.text:004089E0 ; int __cdecl sub_4089E0(LPCSTR)
.text:004089E0 sub_4089E0      proc near               ; CODE XREF: sub_40A1B0+CA↓p
.text:004089E0
.text:004089E0 lpRootPathName  = dword ptr -83Ch
.text:004089E0 lpVolumeNameBuffer= dword ptr -838h
.text:004089E0 nVolumeNameSize = dword ptr -834h
.text:004089E0 lpVolumeSerialNumber= dword ptr -830h
.text:004089E0 lpMaximumComponentLength= dword ptr -82Ch
.text:004089E0 lpFileSystemFlags= dword ptr -828h
.text:004089E0 lpFileSystemNameBuffer= dword ptr -824h
.text:004089E0 nFileSystemNameSize= dword ptr -820h
.text:004089E0 VolumeSerialNumber= dword ptr -818h
.text:004089E0 MaximumComponentLength= dword ptr -814h
.text:004089E0 FileSystemFlags = dword ptr -810h
.text:004089E0 FileSystemNameBuffer= byte ptr -80Ch
.text:004089E0 VolumeNameBuffer= byte ptr -40Ch
.text:004089E0 var_4           = dword ptr -4
.text:004089E0 arg_0           = dword ptr  4
.text:004089E0
.text:004089E0                 sub     esp, 83Ch
.text:004089E6                 mov     [esp+83Ch+var_4], ebx
.text:004089ED                 mov     ebx, [esp+83Ch+arg_0]
.text:004089F4                 mov     [esp+83Ch+lpRootPathName], ebx ; LPCSTR
.text:004089F7                 call    sub_40A090
.text:004089FC                 mov     [esp+83Ch+lpRootPathName], eax
.text:004089FF                 call    sub_409C60
.text:00408A04                 mov     [esp+83Ch+lpRootPathName], eax ; lpRootPathName
.text:00408A07                 lea     edx, [esp+83Ch+FileSystemNameBuffer]
.text:00408A0B                 mov     ebx, eax
.text:00408A0D                 mov     [esp+83Ch+lpFileSystemNameBuffer], edx ; lpFileSystemNameBuffer
.text:00408A11                 lea     ecx, [esp+83Ch+FileSystemFlags]
.text:00408A15                 lea     edx, [esp+83Ch+MaximumComponentLength]
.text:00408A19                 mov     [esp+83Ch+lpFileSystemFlags], ecx ; lpFileSystemFlags
.text:00408A1D                 lea     ecx, [esp+83Ch+VolumeSerialNumber]
.text:00408A21                 mov     [esp+83Ch+lpMaximumComponentLength], edx ; lpMaximumComponentLength
.text:00408A25                 lea     edx, [esp+83Ch+VolumeNameBuffer]
.text:00408A2C                 mov     [esp+83Ch+lpVolumeSerialNumber], ecx ; lpVolumeSerialNumber
.text:00408A30                 mov     [esp+83Ch+lpVolumeNameBuffer], edx ; lpVolumeNameBuffer
.text:00408A34                 mov     [esp+83Ch+nFileSystemNameSize], 400h ; nFileSystemNameSize
.text:00408A3C                 mov     [esp+83Ch+nVolumeNameSize], 400h ; nVolumeNameSize
.text:00408A44                 call    GetVolumeInformationA
.text:00408A49                 sub     esp, 20h
.text:00408A4C                 test    eax, eax
.text:00408A4E                 setz    cl
.text:00408A51                 mov     [esp+83Ch+lpRootPathName], ebx ; Block
.text:00408A54                 movzx   edx, cl
.text:00408A57                 dec     edx
.text:00408A58                 and     [esp+83Ch+VolumeSerialNumber], edx
.text:00408A5C                 call    free
.text:00408A61                 mov     eax, [esp+83Ch+VolumeSerialNumber]
.text:00408A65                 mov     ebx, [esp+83Ch+var_4]
.text:00408A6C                 add     esp, 83Ch
.text:00408A72                 retn
.text:00408A72 sub_4089E0      endp
.text:00408A72
.text:00408A72 ; ---------------------------------------------------------------------------
.text:00408A73                 align 10h
.text:00408A80                 push    ebp
.text:00408A81                 push    edi
.text:00408A82                 xor     edi, edi
.text:00408A84                 push    esi
.text:00408A85                 xor     esi, esi
.text:00408A87                 push    ebx
.text:00408A88                 mov     ebp, [esp+14h]
.text:00408A8C                 test    ebp, ebp
.text:00408A8E                 jz      short loc_408A98
.text:00408A90                 movzx   ecx, byte ptr [ebp+0]
.text:00408A94                 test    cl, cl
.text:00408A96                 jnz     short loc_408AA1
.text:00408A98
.text:00408A98 loc_408A98:                             ; CODE XREF: .text:00408A8E↑j
.text:00408A98                 xor     eax, eax
.text:00408A9A                 xor     edx, edx
.text:00408A9C
.text:00408A9C loc_408A9C:                             ; CODE XREF: .text:00408AE8↓j
.text:00408A9C                 pop     ebx
.text:00408A9D                 pop     esi
.text:00408A9E                 pop     edi
.text:00408A9F                 pop     ebp
.text:00408AA0                 retn
.text:00408AA1 ; ---------------------------------------------------------------------------
.text:00408AA1
.text:00408AA1 loc_408AA1:                             ; CODE XREF: .text:00408A96↑j
.text:00408AA1                                         ; .text:00408AE2↓j
.text:00408AA1                 shld    edi, esi, 8
.text:00408AA5                 movsx   eax, cl
.text:00408AA8                 shl     esi, 8
.text:00408AAB                 cdq
.text:00408AAC                 add     esi, eax
.text:00408AAE                 adc     edi, edx
.text:00408AB0                 mov     edx, edi
.text:00408AB2                 xor     ebx, ebx
.text:00408AB4                 and     edx, 0FF000000h
.text:00408ABA                 mov     eax, edx
.text:00408ABC                 or      eax, ebx
.text:00408ABE                 jz      short loc_408AD9
.text:00408AC0                 mov     ecx, edx
.text:00408AC2                 xor     eax, eax
.text:00408AC4                 shr     ecx, 10h
.text:00408AC7                 mov     edx, esi
.text:00408AC9                 xor     edx, ecx
.text:00408ACB                 mov     ecx, edi
.text:00408ACD                 xor     ecx, eax
.text:00408ACF                 mov     esi, edx
.text:00408AD1                 mov     edi, ecx
.text:00408AD3                 and     edi, 0FFFFFFh
.text:00408AD9
.text:00408AD9 loc_408AD9:                             ; CODE XREF: .text:00408ABE↑j
.text:00408AD9                 inc     ebp
.text:00408ADA                 movzx   ebx, byte ptr [ebp+0]
.text:00408ADE                 test    bl, bl
.text:00408AE0                 mov     cl, bl
.text:00408AE2                 jnz     short loc_408AA1
.text:00408AE4                 mov     eax, esi
.text:00408AE6                 mov     edx, edi
.text:00408AE8                 jmp     short loc_408A9C
.text:00408AE8 ; ---------------------------------------------------------------------------
.text:00408AEA                 align 10h
.text:00408AF0                 sub     esp, 2Ch
.text:00408AF3                 lea     edx, [esp+24h]
.text:00408AF7                 lea     ecx, [esp+28h]
.text:00408AFB                 mov     [esp+0Ch], edx
.text:00408AFF                 lea     edx, [esp+1Ch]
.text:00408B03                 mov     [esp+4], edx
.text:00408B07                 mov     edx, [esp+30h]
.text:00408B0B                 mov     [esp+10h], ecx
.text:00408B0F                 lea     ecx, [esp+20h]
.text:00408B13                 mov     [esp+8], ecx
.text:00408B17                 mov     [esp], edx
.text:00408B1A                 call    sub_40AAB0
.text:00408B1F                 test    eax, eax
.text:00408B21                 jnz     short loc_408B43
.text:00408B23                 mov     dword ptr [esp+1Ch], 1
.text:00408B2B                 mov     dword ptr [esp+20h], 200h
.text:00408B33                 mov     dword ptr [esp+24h], 0
.text:00408B3B                 mov     dword ptr [esp+28h], 0
.text:00408B43
.text:00408B43 loc_408B43:                             ; CODE XREF: .text:00408B21↑j
.text:00408B43                 mov     eax, [esp+20h]
.text:00408B47                 mov     ecx, [esp+1Ch]
.text:00408B4B                 add     esp, 2Ch
.text:00408B4E                 imul    eax, ecx
.text:00408B51                 retn
.text:00408B51 ; ---------------------------------------------------------------------------
.text:00408B52                 align 10h
.text:00408B60                 sub     esp, 1Ch
.text:00408B63                 mov     eax, [esp+20h]
.text:00408B67                 mov     [esp+14h], esi
.text:00408B6B                 mov     [esp+18h], edi
.text:00408B6F                 test    eax, eax
.text:00408B71                 jz      short loc_408BB0
.text:00408B73                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:00408B7B                 mov     [esp], eax
.text:00408B7E                 call    strrchr
.text:00408B83                 test    eax, eax
.text:00408B85                 jz      short loc_408BB0
.text:00408B87                 cld
.text:00408B88                 mov     esi, eax
.text:00408B8A                 mov     edi, offset aLnk ; ".lnk"
.text:00408B8F                 mov     ecx, 5
.text:00408B94                 repe cmpsb
.text:00408B96                 setz    dl
.text:00408B99                 movzx   eax, dl
.text:00408B9C                 lea     esi, [esi+0]
.text:00408BA0
.text:00408BA0 loc_408BA0:                             ; CODE XREF: .text:00408BB2↓j
.text:00408BA0                 mov     esi, [esp+14h]
.text:00408BA4                 mov     edi, [esp+18h]
.text:00408BA8                 add     esp, 1Ch
.text:00408BAB                 retn
.text:00408BAB ; ---------------------------------------------------------------------------
.text:00408BAC                 align 10h
.text:00408BB0
.text:00408BB0 loc_408BB0:                             ; CODE XREF: .text:00408B71↑j
.text:00408BB0                                         ; .text:00408B85↑j
.text:00408BB0                 xor     eax, eax
.text:00408BB2                 jmp     short loc_408BA0
.text:00408BB2 ; ---------------------------------------------------------------------------
.text:00408BB4                 align 10h
.text:00408BC0                 sub     esp, 1Ch
.text:00408BC3                 mov     [esp+10h], ebx
.text:00408BC7                 mov     ebx, [esp+20h]
.text:00408BCB                 mov     [esp+14h], esi
.text:00408BCF                 mov     [esp+18h], edi
.text:00408BD3                 xor     edi, edi
.text:00408BD5                 mov     dword ptr [esp], offset ModuleName ; "KERNEL32.DLL"
.text:00408BDC                 call    GetModuleHandleA
.text:00408BE1                 sub     esp, 4
.text:00408BE4                 mov     esi, eax
.text:00408BE6                 mov     dword ptr [esp+4], offset aGetbinarytypea ; "GetBinaryTypeA"
.text:00408BEE                 mov     [esp], eax
.text:00408BF1                 call    GetProcAddress
.text:00408BF6                 sub     esp, 8
.text:00408BF9                 test    eax, eax
.text:00408BFB                 jz      short loc_408C11
.text:00408BFD                 mov     [esp], ebx
.text:00408C00                 lea     ecx, [esp+0Ch]
.text:00408C04                 mov     [esp+4], ecx
.text:00408C08                 call    eax
.text:00408C0A                 sub     esp, 8
.text:00408C0D                 test    eax, eax
.text:00408C0F                 jnz     short loc_408C70
.text:00408C11
.text:00408C11 loc_408C11:                             ; CODE XREF: .text:00408BFB↑j
.text:00408C11                 mov     eax, ds:dword_412220
.text:00408C16                 test    eax, eax
.text:00408C18                 jz      short loc_408C90
.text:00408C1A
.text:00408C1A loc_408C1A:                             ; CODE XREF: .text:00408CA3↓j
.text:00408C1A                                         ; .text:00408CB5↓j
.text:00408C1A                 test    ebx, ebx
.text:00408C1C                 jz      short loc_408C23
.text:00408C1E                 cmp     byte ptr [ebx], 0
.text:00408C21                 jnz     short loc_408C40
.text:00408C23
.text:00408C23 loc_408C23:                             ; CODE XREF: .text:00408C1C↑j
.text:00408C23                                         ; .text:00408C54↓j ...
.text:00408C23                 mov     [esp], esi
.text:00408C26                 call    FreeLibrary
.text:00408C2B                 sub     esp, 4
.text:00408C2E                 mov     eax, edi
.text:00408C30                 mov     ebx, [esp+10h]
.text:00408C34                 mov     esi, [esp+14h]
.text:00408C38                 mov     edi, [esp+18h]
.text:00408C3C                 add     esp, 1Ch
.text:00408C3F                 retn
.text:00408C40 ; ---------------------------------------------------------------------------
.text:00408C40
.text:00408C40 loc_408C40:                             ; CODE XREF: .text:00408C21↑j
.text:00408C40                 mov     [esp], ebx
.text:00408C43                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:00408C4B                 call    strrchr
.text:00408C50                 test    eax, eax
.text:00408C52                 mov     ebx, eax
.text:00408C54                 jz      short loc_408C23
.text:00408C56                 mov     [esp+4], eax
.text:00408C5A                 mov     ecx, ds:dword_412220
.text:00408C60                 mov     [esp], ecx
.text:00408C63                 call    strstr
.text:00408C68                 test    eax, eax
.text:00408C6A                 jz      short loc_408C77
.text:00408C6C                 lea     esi, [esi+0]
.text:00408C70
.text:00408C70 loc_408C70:                             ; CODE XREF: .text:00408C0F↑j
.text:00408C70                                         ; .text:00408C8D↓j
.text:00408C70                 mov     edi, 1
.text:00408C75                 jmp     short loc_408C23
.text:00408C77 ; ---------------------------------------------------------------------------
.text:00408C77
.text:00408C77 loc_408C77:                             ; CODE XREF: .text:00408C6A↑j
.text:00408C77                 mov     [esp+4], ebx
.text:00408C7B                 mov     ebx, off_411064 ; ".com;.exe;.bat;.cmd"
.text:00408C81                 mov     [esp], ebx
.text:00408C84                 call    strstr
.text:00408C89                 test    eax, eax
.text:00408C8B                 jz      short loc_408C23
.text:00408C8D                 jmp     short loc_408C70
.text:00408C8D ; ---------------------------------------------------------------------------
.text:00408C8F                 align 10h
.text:00408C90
.text:00408C90 loc_408C90:                             ; CODE XREF: .text:00408C18↑j
.text:00408C90                 mov     dword ptr [esp], offset aPathext ; "PATHEXT"
.text:00408C97                 call    getenv
.text:00408C9C                 mov     ds:dword_412220, eax
.text:00408CA1                 test    eax, eax
.text:00408CA3                 jnz     loc_408C1A
.text:00408CA9                 mov     edx, off_411064 ; ".com;.exe;.bat;.cmd"
.text:00408CAF                 mov     ds:dword_412220, edx
.text:00408CB5                 jmp     loc_408C1A
.text:00408CB5 ; ---------------------------------------------------------------------------
.text:00408CBA                 align 10h
.text:00408CC0                 sub     esp, 0Ch
.text:00408CC3                 mov     edx, [esp+10h]
.text:00408CC7                 mov     [esp], edx
.text:00408CCA                 call    GetFileType
.text:00408CCF                 sub     esp, 4
.text:00408CD2                 xor     edx, edx
.text:00408CD4                 cmp     eax, 2
.text:00408CD7                 jz      short loc_408CF0
.text:00408CD9                 cmp     eax, 3
.text:00408CDC                 jz      short loc_408CE4
.text:00408CDE
.text:00408CDE loc_408CDE:                             ; CODE XREF: .text:00408CE9↓j
.text:00408CDE                                         ; .text:00408CF5↓j
.text:00408CDE                 mov     eax, edx
.text:00408CE0                 add     esp, 0Ch
.text:00408CE3                 retn
.text:00408CE4 ; ---------------------------------------------------------------------------
.text:00408CE4
.text:00408CE4 loc_408CE4:                             ; CODE XREF: .text:00408CDC↑j
.text:00408CE4                 mov     edx, 1000h
.text:00408CE9                 jmp     short loc_408CDE
.text:00408CE9 ; ---------------------------------------------------------------------------
.text:00408CEB                 align 10h
.text:00408CF0
.text:00408CF0 loc_408CF0:                             ; CODE XREF: .text:00408CD7↑j
.text:00408CF0                 mov     edx, 2000h
.text:00408CF5                 jmp     short loc_408CDE
.text:00408CF5 ; ---------------------------------------------------------------------------
.text:00408CF7                 align 10h
.text:00408D00                 mov     ecx, [esp+4]
.text:00408D04                 xor     edx, edx
.text:00408D06                 test    cl, 10h
.text:00408D09                 setz    dl
.text:00408D0C                 dec     edx
.text:00408D0D                 and     edx, 0FFFFC000h
.text:00408D13                 add     edx, 8000h
.text:00408D19                 or      edx, 124h
.text:00408D1F                 test    cl, 1
.text:00408D22                 movzx   eax, dx
.text:00408D25                 jnz     short locret_408D2C
.text:00408D27                 or      eax, 92h
.text:00408D2C
.text:00408D2C locret_408D2C:                          ; CODE XREF: .text:00408D25↑j
.text:00408D2C                 retn
.text:00408D2C ; ---------------------------------------------------------------------------
.text:00408D2D                 align 10h
.text:00408D30                 sub     esp, 2Ch
.text:00408D33                 mov     [esp+20h], esi
.text:00408D37                 mov     esi, [esp+30h]
.text:00408D3B                 mov     [esp+1Ch], ebx
.text:00408D3F                 xor     ebx, ebx
.text:00408D41                 test    esi, esi
.text:00408D43                 mov     [esp+24h], edi
.text:00408D47                 mov     [esp+28h], ebp
.text:00408D4B                 jz      short loc_408DA0
.text:00408D4D                 cmp     byte ptr [esi], 0
.text:00408D50                 jnz     short loc_408DA4
.text:00408D52
.text:00408D52 loc_408D52:                             ; CODE XREF: .text:00408E0C↓j
.text:00408D52                                         ; .text:00408E17↓j
.text:00408D52                 test    esi, esi
.text:00408D54                 jz      short loc_408DA0
.text:00408D56                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:00408D5E                 mov     [esp], esi
.text:00408D61                 call    strrchr
.text:00408D66                 test    eax, eax
.text:00408D68                 jz      short loc_408DA0
.text:00408D6A                 cld
.text:00408D6B                 mov     ecx, 5
.text:00408D70                 mov     esi, eax
.text:00408D72                 mov     edi, offset aLnk ; ".lnk"
.text:00408D77                 repe cmpsb
.text:00408D79                 setz    cl
.text:00408D7C                 movzx   eax, cl
.text:00408D7F                 nop
.text:00408D80
.text:00408D80 loc_408D80:                             ; CODE XREF: .text:00408DA2↓j
.text:00408D80                 test    eax, eax
.text:00408D82                 jz      short loc_408D8A
.text:00408D84                 or      ebx, 0A000h
.text:00408D8A
.text:00408D8A loc_408D8A:                             ; CODE XREF: .text:00408D82↑j
.text:00408D8A                 mov     eax, ebx
.text:00408D8C                 mov     esi, [esp+20h]
.text:00408D90                 mov     ebx, [esp+1Ch]
.text:00408D94                 mov     edi, [esp+24h]
.text:00408D98                 mov     ebp, [esp+28h]
.text:00408D9C                 add     esp, 2Ch
.text:00408D9F                 retn
.text:00408DA0 ; ---------------------------------------------------------------------------
.text:00408DA0
.text:00408DA0 loc_408DA0:                             ; CODE XREF: .text:00408D4B↑j
.text:00408DA0                                         ; .text:00408D54↑j ...
.text:00408DA0                 xor     eax, eax
.text:00408DA2                 jmp     short loc_408D80
.text:00408DA4 ; ---------------------------------------------------------------------------
.text:00408DA4
.text:00408DA4 loc_408DA4:                             ; CODE XREF: .text:00408D50↑j
.text:00408DA4                 mov     dword ptr [esp], offset ModuleName ; "KERNEL32.DLL"
.text:00408DAB                 call    GetModuleHandleA
.text:00408DB0                 sub     esp, 4
.text:00408DB3                 mov     ebp, eax
.text:00408DB5                 mov     dword ptr [esp+4], offset aGetbinarytypea ; "GetBinaryTypeA"
.text:00408DBD                 mov     [esp], eax
.text:00408DC0                 call    GetProcAddress
.text:00408DC5                 sub     esp, 8
.text:00408DC8                 test    eax, eax
.text:00408DCA                 mov     dword ptr [esp+14h], 0
.text:00408DD2                 jz      short loc_408DE8
.text:00408DD4                 mov     [esp], esi
.text:00408DD7                 lea     ecx, [esp+18h]
.text:00408DDB                 mov     [esp+4], ecx
.text:00408DDF                 call    eax
.text:00408DE1                 sub     esp, 8
.text:00408DE4                 test    eax, eax
.text:00408DE6                 jnz     short loc_408E48
.text:00408DE8
.text:00408DE8 loc_408DE8:                             ; CODE XREF: .text:00408DD2↑j
.text:00408DE8                 mov     edx, ds:dword_412220
.text:00408DEE                 test    edx, edx
.text:00408DF0                 jz      short loc_408E70
.text:00408DF2
.text:00408DF2 loc_408DF2:                             ; CODE XREF: .text:00408E83↓j
.text:00408DF2                                         ; .text:00408E95↓j
.text:00408DF2                 test    esi, esi
.text:00408DF4                 jz      short loc_408DFB
.text:00408DF6                 cmp     byte ptr [esi], 0
.text:00408DF9                 jnz     short loc_408E1C
.text:00408DFB
.text:00408DFB loc_408DFB:                             ; CODE XREF: .text:00408DF4↑j
.text:00408DFB                                         ; .text:00408E30↓j ...
.text:00408DFB                 mov     [esp], ebp
.text:00408DFE                 call    FreeLibrary
.text:00408E03                 sub     esp, 4
.text:00408E06                 mov     eax, [esp+14h]
.text:00408E0A                 test    eax, eax
.text:00408E0C                 jz      loc_408D52
.text:00408E12                 mov     ebx, 49h ; 'I'
.text:00408E17                 jmp     loc_408D52
.text:00408E1C ; ---------------------------------------------------------------------------
.text:00408E1C
.text:00408E1C loc_408E1C:                             ; CODE XREF: .text:00408DF9↑j
.text:00408E1C                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:00408E24                 mov     [esp], esi
.text:00408E27                 call    strrchr
.text:00408E2C                 test    eax, eax
.text:00408E2E                 mov     edi, eax
.text:00408E30                 jz      short loc_408DFB
.text:00408E32                 mov     [esp+4], eax
.text:00408E36                 mov     edx, ds:dword_412220
.text:00408E3C                 mov     [esp], edx
.text:00408E3F                 call    strstr
.text:00408E44                 test    eax, eax
.text:00408E46                 jz      short loc_408E52
.text:00408E48
.text:00408E48 loc_408E48:                             ; CODE XREF: .text:00408DE6↑j
.text:00408E48                                         ; .text:00408E68↓j
.text:00408E48                 mov     dword ptr [esp+14h], 1
.text:00408E50                 jmp     short loc_408DFB
.text:00408E52 ; ---------------------------------------------------------------------------
.text:00408E52
.text:00408E52 loc_408E52:                             ; CODE XREF: .text:00408E46↑j
.text:00408E52                 mov     [esp+4], edi
.text:00408E56                 mov     edi, off_411064 ; ".com;.exe;.bat;.cmd"
.text:00408E5C                 mov     [esp], edi
.text:00408E5F                 call    strstr
.text:00408E64                 test    eax, eax
.text:00408E66                 jz      short loc_408DFB
.text:00408E68                 jmp     short loc_408E48
.text:00408E68 ; ---------------------------------------------------------------------------
.text:00408E6A                 align 10h
.text:00408E70
.text:00408E70 loc_408E70:                             ; CODE XREF: .text:00408DF0↑j
.text:00408E70                 mov     dword ptr [esp], offset aPathext ; "PATHEXT"
.text:00408E77                 call    getenv
.text:00408E7C                 mov     ds:dword_412220, eax
.text:00408E81                 test    eax, eax
.text:00408E83                 jnz     loc_408DF2
.text:00408E89                 mov     ecx, off_411064 ; ".com;.exe;.bat;.cmd"
.text:00408E8F                 mov     ds:dword_412220, ecx
.text:00408E95                 jmp     loc_408DF2
.text:00408E95 ; ---------------------------------------------------------------------------
.text:00408E9A                 align 10h
.text:00408EA0                 push    esi
.text:00408EA1                 push    ebx
.text:00408EA2                 sub     esp, 864h
.text:00408EA8                 mov     ebx, [esp+870h]
.text:00408EAF                 lea     edx, [esp+830h]
.text:00408EB6                 mov     esi, [esp+874h]
.text:00408EBD                 mov     [esp+4], edx
.text:00408EC1                 mov     [esp], ebx
.text:00408EC4                 call    loc_407D20
.text:00408EC9                 xor     edx, edx
.text:00408ECB                 test    eax, eax
.text:00408ECD                 jz      loc_408FB5
.text:00408ED3                 mov     ecx, [esp+830h]
.text:00408EDA                 test    cl, 10h
.text:00408EDD                 mov     [esi], ecx
.text:00408EDF                 mov     eax, [esp+834h]
.text:00408EE6                 mov     edx, [esp+838h]
.text:00408EED                 mov     [esi+4], eax
.text:00408EF0                 mov     [esi+8], edx
.text:00408EF3                 mov     eax, [esp+83Ch]
.text:00408EFA                 mov     edx, [esp+840h]
.text:00408F01                 mov     [esi+0Ch], eax
.text:00408F04                 mov     [esi+10h], edx
.text:00408F07                 mov     edx, [esp+848h]
.text:00408F0E                 mov     eax, [esp+844h]
.text:00408F15                 mov     [esi+18h], edx
.text:00408F18                 mov     [esi+14h], eax
.text:00408F1B                 mov     edx, [esp+84Ch]
.text:00408F22                 mov     [esi+20h], edx
.text:00408F25                 mov     edx, [esp+850h]
.text:00408F2C                 mov     [esi+24h], edx
.text:00408F2F                 jnz     loc_408FC0
.text:00408F35                 mov     dword ptr [esi+28h], 1
.text:00408F3C
.text:00408F3C loc_408F3C:                             ; CODE XREF: .text:00408FCB↓j
.text:00408F3C                 mov     [esp], ebx
.text:00408F3F                 call    sub_40A090
.text:00408F44                 mov     [esp], eax
.text:00408F47                 call    sub_409C60
.text:00408F4C                 mov     [esp], eax
.text:00408F4F                 lea     edx, [esp+30h]
.text:00408F53                 mov     ebx, eax
.text:00408F55                 mov     [esp+18h], edx
.text:00408F59                 lea     ecx, [esp+2Ch]
.text:00408F5D                 lea     edx, [esp+28h]
.text:00408F61                 mov     [esp+14h], ecx
.text:00408F65                 lea     ecx, [esp+24h]
.text:00408F69                 mov     [esp+10h], edx
.text:00408F6D                 lea     edx, [esp+430h]
.text:00408F74                 mov     [esp+0Ch], ecx
.text:00408F78                 mov     [esp+4], edx
.text:00408F7C                 mov     dword ptr [esp+1Ch], 400h
.text:00408F84                 mov     dword ptr [esp+8], 400h
.text:00408F8C                 call    GetVolumeInformationA
.text:00408F91                 sub     esp, 20h
.text:00408F94                 test    eax, eax
.text:00408F96                 setz    cl
.text:00408F99                 mov     [esp], ebx
.text:00408F9C                 movzx   edx, cl
.text:00408F9F                 dec     edx
.text:00408FA0                 and     [esp+24h], edx
.text:00408FA4                 call    free
.text:00408FA9                 mov     ecx, [esp+24h]
.text:00408FAD                 mov     edx, 1
.text:00408FB2                 mov     [esi+1Ch], ecx
.text:00408FB5
.text:00408FB5 loc_408FB5:                             ; CODE XREF: .text:00408ECD↑j
.text:00408FB5                 add     esp, 864h
.text:00408FBB                 mov     eax, edx
.text:00408FBD                 pop     ebx
.text:00408FBE                 pop     esi
.text:00408FBF                 retn
.text:00408FC0 ; ---------------------------------------------------------------------------
.text:00408FC0
.text:00408FC0 loc_408FC0:                             ; CODE XREF: .text:00408F2F↑j
.text:00408FC0                 mov     [esp], ebx
.text:00408FC3                 call    loc_407E90
.text:00408FC8                 mov     [esi+28h], eax
.text:00408FCB                 jmp     loc_408F3C
.text:00408FD0 ; ---------------------------------------------------------------------------
.text:00408FD0                 push    ebp
.text:00408FD1                 xor     edx, edx
.text:00408FD3                 push    edi
.text:00408FD4                 push    esi
.text:00408FD5                 xor     esi, esi
.text:00408FD7                 push    ebx
.text:00408FD8                 sub     esp, 1Ch
.text:00408FDB                 mov     ebx, [esp+5Ch]
.text:00408FDF                 mov     ecx, [esp+30h]
.text:00408FE3                 mov     edi, [esp+60h]
.text:00408FE7                 or      esi, ebx
.text:00408FE9                 mov     eax, [esp+4Ch]
.text:00408FED                 or      edi, edx
.text:00408FEF                 mov     ebx, [esp+64h]
.text:00408FF3                 xor     edx, edx
.text:00408FF5                 test    cl, 10h
.text:00408FF8                 setz    dl
.text:00408FFB                 mov     [ebx+10h], eax
.text:00408FFE                 mov     [ebx+8], edi
.text:00409001                 mov     [ebx+0Ch], esi
.text:00409004                 dec     edx
.text:00409005                 and     edx, 0FFFFC000h
.text:0040900B                 mov     dword ptr [ebx+14h], 0
.text:00409012                 add     edx, 8000h
.text:00409018                 or      edx, 124h
.text:0040901E                 test    cl, 1
.text:00409021                 movzx   eax, dx
.text:00409024                 jnz     short loc_40902B
.text:00409026                 or      eax, 92h
.text:0040902B
.text:0040902B loc_40902B:                             ; CODE XREF: .text:00409024↑j
.text:0040902B                 mov     ebx, [esp+54h]
.text:0040902F                 xor     edx, edx
.text:00409031                 xor     ebp, ebp
.text:00409033                 mov     edi, [esp+50h]
.text:00409037                 mov     ecx, [esp+64h]
.text:0040903B                 mov     esi, edi
.text:0040903D                 or      [ecx], eax
.text:0040903F                 mov     edi, ebx
.text:00409041                 or      edi, ebp
.text:00409043                 mov     ebp, edx
.text:00409045                 mov     ebx, [esp+64h]
.text:00409049                 or      ebp, esi
.text:0040904B                 mov     esi, [esp+58h]
.text:0040904F                 mov     edx, [esp+40h]
.text:00409053                 mov     [ebx+30h], edi
.text:00409056                 mov     [ebx+18h], esi
.text:00409059                 mov     ecx, edx
.text:0040905B                 xor     esi, esi
.text:0040905D                 mov     [ebx+34h], ebp
.text:00409060                 xor     edx, edx
.text:00409062                 or      esi, ecx
.text:00409064                 mov     dword ptr [esp+8], 989680h
.text:0040906C                 mov     ebx, [esp+3Ch]
.text:00409070                 mov     ecx, esi
.text:00409072                 mov     dword ptr [esp+0Ch], 0
.text:0040907A                 or      ebx, edx
.text:0040907C                 mov     edx, ebx
.text:0040907E                 sub     edx, 0D53E8000h
.text:00409084                 sbb     ecx, 19DB1DEh
.text:0040908A                 mov     [esp+4], ecx
.text:0040908E                 mov     [esp], edx
.text:00409091                 call    sub_40F270
.text:00409096                 mov     edx, eax
.text:00409098                 mov     ecx, [esp+64h]
.text:0040909C                 shr     eax, 1Fh
.text:0040909F                 dec     eax
.text:004090A0                 and     edx, eax
.text:004090A2                 mov     [ecx+38h], edx
.text:004090A5                 mov     [esp], ebx
.text:004090A8                 mov     [esp+4], esi
.text:004090AC                 mov     dword ptr [esp+8], 989680h
.text:004090B4                 mov     dword ptr [esp+0Ch], 0
.text:004090BC                 call    sub_40F0F0
.text:004090C1                 lea     ecx, [eax+eax*4]
.text:004090C4                 lea     esi, [ecx+ecx*4]
.text:004090C7                 mov     eax, [esp+64h]
.text:004090CB                 shl     esi, 2
.text:004090CE                 mov     ebx, esi
.text:004090D0                 shr     ebx, 1Fh
.text:004090D3                 dec     ebx
.text:004090D4                 and     ebx, esi
.text:004090D6                 xor     esi, esi
.text:004090D8                 mov     [eax+3Ch], ebx
.text:004090DB                 mov     edx, [esp+38h]
.text:004090DF                 mov     dword ptr [esp+8], 989680h
.text:004090E7                 mov     ebx, [esp+34h]
.text:004090EB                 mov     dword ptr [esp+0Ch], 0
.text:004090F3                 mov     ecx, edx
.text:004090F5                 xor     edx, edx
.text:004090F7                 or      ebx, edx
.text:004090F9                 or      esi, ecx
.text:004090FB                 mov     edx, ebx
.text:004090FD                 sub     edx, 0D53E8000h
.text:00409103                 mov     ecx, esi
.text:00409105                 sbb     ecx, 19DB1DEh
.text:0040910B                 mov     [esp+4], ecx
.text:0040910F                 mov     [esp], edx
.text:00409112                 call    sub_40F270
.text:00409117                 mov     edx, eax
.text:00409119                 mov     ecx, [esp+64h]
.text:0040911D                 shr     eax, 1Fh
.text:00409120                 dec     eax
.text:00409121                 and     edx, eax
.text:00409123                 mov     [ecx+48h], edx
.text:00409126                 mov     [esp], ebx
.text:00409129                 mov     [esp+4], esi
.text:0040912D                 mov     dword ptr [esp+8], 989680h
.text:00409135                 mov     dword ptr [esp+0Ch], 0
.text:0040913D                 call    sub_40F0F0
.text:00409142                 lea     edx, [eax+eax*4]
.text:00409145                 mov     ebx, [esp+64h]
.text:00409149                 lea     ecx, [edx+edx*4]
.text:0040914C                 shl     ecx, 2
.text:0040914F                 mov     esi, ecx
.text:00409151                 shr     esi, 1Fh
.text:00409154                 dec     esi
.text:00409155                 and     esi, ecx
.text:00409157                 mov     [ebx+4Ch], esi
.text:0040915A                 mov     edx, [esp+48h]
.text:0040915E                 xor     esi, esi
.text:00409160                 mov     dword ptr [esp+8], 989680h
.text:00409168                 mov     ebx, [esp+44h]
.text:0040916C                 mov     dword ptr [esp+0Ch], 0
.text:00409174                 mov     ecx, edx
.text:00409176                 xor     edx, edx
.text:00409178                 or      ebx, edx
.text:0040917A                 or      esi, ecx
.text:0040917C                 mov     edx, ebx
.text:0040917E                 sub     edx, 0D53E8000h
.text:00409184                 mov     ecx, esi
.text:00409186                 sbb     ecx, 19DB1DEh
.text:0040918C                 mov     [esp+4], ecx
.text:00409190                 mov     [esp], edx
.text:00409193                 call    sub_40F270
.text:00409198                 mov     edx, eax
.text:0040919A                 mov     ecx, [esp+64h]
.text:0040919E                 shr     eax, 1Fh
.text:004091A1                 dec     eax
.text:004091A2                 and     edx, eax
.text:004091A4                 mov     [ecx+40h], edx
.text:004091A7                 mov     [esp+4], esi
.text:004091AB                 mov     dword ptr [esp+8], 989680h
.text:004091B3                 mov     dword ptr [esp+0Ch], 0
.text:004091BB                 mov     [esp], ebx
.text:004091BE                 call    sub_40F0F0
.text:004091C3                 lea     edx, [eax+eax*4]
.text:004091C6                 lea     esi, [edx+edx*4]
.text:004091C9                 mov     eax, [esp+64h]
.text:004091CD                 shl     esi, 2
.text:004091D0                 mov     edx, ebp
.text:004091D2                 mov     ecx, esi
.text:004091D4                 mov     dword ptr [eax+50h], 200h
.text:004091DB                 shr     ecx, 1Fh
.text:004091DE                 dec     ecx
.text:004091DF                 and     ecx, esi
.text:004091E1                 test    ebp, ebp
.text:004091E3                 mov     [eax+44h], ecx
.text:004091E6                 mov     eax, edi
.text:004091E8                 js      short loc_409222
.text:004091EA
.text:004091EA loc_4091EA:                             ; CODE XREF: .text:0040922A↓j
.text:004091EA                 xor     esi, esi
.text:004091EC                 mov     ebp, edi
.text:004091EE                 mov     ecx, eax
.text:004091F0                 shrd    ecx, edx, 9
.text:004091F4                 mov     ebx, edx
.text:004091F6                 and     ebp, 1FFh
.text:004091FC                 mov     eax, esi
.text:004091FE                 sar     ebx, 9
.text:00409201                 or      eax, ebp
.text:00409203                 jz      short loc_40920B
.text:00409205                 add     ecx, 1
.text:00409208                 adc     ebx, 0
.text:0040920B
.text:0040920B loc_40920B:                             ; CODE XREF: .text:00409203↑j
.text:0040920B                 mov     edx, [esp+64h]
.text:0040920F                 mov     eax, 1
.text:00409214                 mov     [edx+58h], ecx
.text:00409217                 mov     [edx+5Ch], ebx
.text:0040921A                 add     esp, 1Ch
.text:0040921D                 pop     ebx
.text:0040921E                 pop     esi
.text:0040921F                 pop     edi
.text:00409220                 pop     ebp
.text:00409221                 retn
.text:00409222 ; ---------------------------------------------------------------------------
.text:00409222
.text:00409222 loc_409222:                             ; CODE XREF: .text:004091E8↑j
.text:00409222                 add     eax, 1FFh
.text:00409227                 adc     edx, 0
.text:0040922A                 jmp     short loc_4091EA
.text:0040922A ; ---------------------------------------------------------------------------
.text:0040922C                 align 10h
.text:00409230                 push    ebp
.text:00409231                 push    edi
.text:00409232                 xor     edi, edi
.text:00409234                 push    esi
.text:00409235                 xor     esi, esi
.text:00409237                 push    ebx
.text:00409238                 sub     esp, 0Ch
.text:0040923B                 mov     dword ptr [esp], offset aKernel32 ; "KERNEL32"
.text:00409242                 call    LoadLibraryA
.text:00409247                 sub     esp, 4
.text:0040924A                 mov     ebp, eax
.text:0040924C                 mov     dword ptr [esp+4], offset aGetcompressedf ; "GetCompressedFileSizeA"
.text:00409254                 mov     [esp], eax
.text:00409257                 call    GetProcAddress
.text:0040925C                 sub     esp, 8
.text:0040925F                 test    eax, eax
.text:00409261                 jz      short loc_409292
.text:00409263                 lea     ecx, [esp+8]
.text:00409267                 mov     [esp+4], ecx
.text:0040926B                 mov     ecx, [esp+20h]
.text:0040926F                 mov     [esp], ecx
.text:00409272                 call    eax
.text:00409274                 sub     esp, 8
.text:00409277                 mov     ebx, eax
.text:00409279                 cmp     eax, 0FFFFFFFFh
.text:0040927C                 jz      short loc_4092AD
.text:0040927E
.text:0040927E loc_40927E:                             ; CODE XREF: .text:004092B6↓j
.text:0040927E                 mov     esi, [esp+8]
.text:00409282                 mov     ecx, ebx
.text:00409284                 xor     edi, edi
.text:00409286                 xor     ebx, ebx
.text:00409288                 mov     edx, esi
.text:0040928A                 mov     esi, ecx
.text:0040928C                 or      esi, edi
.text:0040928E                 mov     edi, ebx
.text:00409290                 or      edi, edx
.text:00409292
.text:00409292 loc_409292:                             ; CODE XREF: .text:00409261↑j
.text:00409292                                         ; .text:004092B4↓j
.text:00409292                 test    ebp, ebp
.text:00409294                 jz      short loc_4092A1
.text:00409296                 mov     [esp], ebp
.text:00409299                 call    FreeLibrary
.text:0040929E                 sub     esp, 4
.text:004092A1
.text:004092A1 loc_4092A1:                             ; CODE XREF: .text:00409294↑j
.text:004092A1                 add     esp, 0Ch
.text:004092A4                 mov     eax, esi
.text:004092A6                 mov     edx, edi
.text:004092A8                 pop     ebx
.text:004092A9                 pop     esi
.text:004092AA                 pop     edi
.text:004092AB                 pop     ebp
.text:004092AC                 retn
.text:004092AD ; ---------------------------------------------------------------------------
.text:004092AD
.text:004092AD loc_4092AD:                             ; CODE XREF: .text:0040927C↑j
.text:004092AD                 call    GetLastError
.text:004092B2                 test    eax, eax
.text:004092B4                 jnz     short loc_409292
.text:004092B6                 jmp     short loc_40927E
.text:004092B6 ; ---------------------------------------------------------------------------
.text:004092B8                 align 10h
.text:004092C0
.text:004092C0 ; =============== S U B R O U T I N E =======================================
.text:004092C0
.text:004092C0
.text:004092C0 ; int __cdecl sub_4092C0(LPCSTR, int)
.text:004092C0 sub_4092C0      proc near               ; CODE XREF: sub_40D5E0-3DDF↓p
.text:004092C0
.text:004092C0 lpRootPathName  = dword ptr -8FCh
.text:004092C0 lpVolumeNameBuffer= dword ptr -8F8h
.text:004092C0 nVolumeNameSize = dword ptr -8F4h
.text:004092C0 lpVolumeSerialNumber= dword ptr -8F0h
.text:004092C0 lpMaximumComponentLength= dword ptr -8ECh
.text:004092C0 lpFileSystemFlags= dword ptr -8E8h
.text:004092C0 lpFileSystemNameBuffer= dword ptr -8E4h
.text:004092C0 nFileSystemNameSize= dword ptr -8E0h
.text:004092C0 VolumeSerialNumber= dword ptr -8D8h
.text:004092C0 MaximumComponentLength= dword ptr -8D4h
.text:004092C0 FileSystemFlags = dword ptr -8D0h
.text:004092C0 var_8CC         = dword ptr -8CCh
.text:004092C0 var_8C8         = dword ptr -8C8h
.text:004092C0 var_8C4         = dword ptr -8C4h
.text:004092C0 var_8C0         = dword ptr -8C0h
.text:004092C0 var_8BC         = dword ptr -8BCh
.text:004092C0 var_8B8         = dword ptr -8B8h
.text:004092C0 var_8B4         = dword ptr -8B4h
.text:004092C0 var_8B0         = dword ptr -8B0h
.text:004092C0 var_8AC         = dword ptr -8ACh
.text:004092C0 var_8A8         = dword ptr -8A8h
.text:004092C0 var_8A4         = dword ptr -8A4h
.text:004092C0 var_8A0         = dword ptr -8A0h
.text:004092C0 var_89C         = dword ptr -89Ch
.text:004092C0 FileSystemNameBuffer= byte ptr -88Ch
.text:004092C0 VolumeNameBuffer= byte ptr -48Ch
.text:004092C0 var_8C          = dword ptr -8Ch
.text:004092C0 var_88          = dword ptr -88h
.text:004092C0 var_84          = dword ptr -84h
.text:004092C0 var_80          = dword ptr -80h
.text:004092C0 var_7C          = dword ptr -7Ch
.text:004092C0 var_78          = dword ptr -78h
.text:004092C0 var_74          = dword ptr -74h
.text:004092C0 var_70          = dword ptr -70h
.text:004092C0 var_6C          = dword ptr -6Ch
.text:004092C0 var_5C          = dword ptr -5Ch
.text:004092C0 var_58          = dword ptr -58h
.text:004092C0 var_54          = dword ptr -54h
.text:004092C0 var_50          = dword ptr -50h
.text:004092C0 var_4C          = dword ptr -4Ch
.text:004092C0 var_48          = dword ptr -48h
.text:004092C0 var_44          = dword ptr -44h
.text:004092C0 var_3C          = dword ptr -3Ch
.text:004092C0 var_38          = dword ptr -38h
.text:004092C0 var_34          = dword ptr -34h
.text:004092C0 arg_0           = dword ptr  4
.text:004092C0 arg_4           = dword ptr  8
.text:004092C0
.text:004092C0                 push    ebp
.text:004092C1                 xor     eax, eax
.text:004092C3                 mov     ecx, 0Dh
.text:004092C8                 push    edi
.text:004092C9                 push    esi
.text:004092CA                 push    ebx
.text:004092CB                 sub     esp, 8ECh
.text:004092D1                 lea     edi, [esp+8FCh+var_5C]
.text:004092D8                 cld
.text:004092D9                 lea     edx, [esp+8FCh+var_8C]
.text:004092E0                 rep stosd
.text:004092E2                 mov     [esp+8FCh+lpVolumeNameBuffer], edx
.text:004092E6                 lea     esi, [esp+8FCh+var_5C]
.text:004092ED                 mov     edx, [esp+8FCh+arg_0]
.text:004092F4                 mov     [esp+8FCh+lpRootPathName], edx
.text:004092F7                 call    loc_407D20
.text:004092FC                 test    eax, eax
.text:004092FE                 mov     edx, 0FFFFFFFFh
.text:00409303                 jz      loc_409694
.text:00409309                 mov     edx, [esp+8FCh+var_88]
.text:00409310                 mov     ebp, [esp+8FCh+var_84]
.text:00409317                 mov     edi, [esp+8FCh+var_80]
.text:0040931E                 mov     [esp+8FCh+var_58], edx
.text:00409325                 mov     ecx, [esp+8FCh+var_7C]
.text:0040932C                 mov     ebx, [esp+8FCh+var_8C]
.text:00409333                 mov     [esp+8FCh+var_54], ebp
.text:0040933A                 mov     edx, [esp+8FCh+var_78]
.text:00409341                 mov     ebp, [esp+8FCh+var_74]
.text:00409348                 mov     [esp+8FCh+var_50], edi
.text:0040934F                 test    bl, 10h
.text:00409352                 mov     edi, [esp+8FCh+var_70]
.text:00409359                 mov     [esp+8FCh+var_4C], ecx
.text:00409360                 mov     ecx, [esp+8FCh+var_6C]
.text:00409367                 mov     [esp+8FCh+var_5C], ebx
.text:0040936E                 mov     [esp+8FCh+var_48], edx
.text:00409375                 mov     [esp+8FCh+var_44], ebp
.text:0040937C                 mov     [esp+8FCh+var_3C], edi
.text:00409383                 mov     [esp+8FCh+var_38], ecx
.text:0040938A                 jnz     loc_4096B0
.text:00409390                 mov     ebx, 1
.text:00409395                 mov     [esp+8FCh+var_34], ebx
.text:0040939C
.text:0040939C loc_40939C:                             ; CODE XREF: sub_4092C0+406↓j
.text:0040939C                 mov     eax, [esp+8FCh+arg_0]
.text:004093A3                 lea     edi, [esp+8FCh+FileSystemNameBuffer]
.text:004093A7                 lea     ebx, [esp+8FCh+FileSystemFlags]
.text:004093AB                 mov     [esp+8FCh+lpRootPathName], eax ; LPCSTR
.text:004093AE                 call    sub_40A090
.text:004093B3                 mov     [esp+8FCh+lpRootPathName], eax
.text:004093B6                 call    sub_409C60
.text:004093BB                 mov     [esp+8FCh+lpFileSystemNameBuffer], edi ; lpFileSystemNameBuffer
.text:004093BF                 lea     ecx, [esp+8FCh+VolumeSerialNumber]
.text:004093C3                 mov     ebp, eax
.text:004093C5                 mov     [esp+8FCh+lpVolumeSerialNumber], ecx ; lpVolumeSerialNumber
.text:004093C9                 lea     edx, [esp+8FCh+MaximumComponentLength]
.text:004093CD                 lea     edi, [esp+8FCh+VolumeNameBuffer]
.text:004093D4                 mov     [esp+8FCh+lpFileSystemFlags], ebx ; lpFileSystemFlags
.text:004093D8                 mov     [esp+8FCh+lpMaximumComponentLength], edx ; lpMaximumComponentLength
.text:004093DC                 mov     [esp+8FCh+lpVolumeNameBuffer], edi ; lpVolumeNameBuffer
.text:004093E0                 mov     [esp+8FCh+nFileSystemNameSize], 400h ; nFileSystemNameSize
.text:004093E8                 mov     [esp+8FCh+nVolumeNameSize], 400h ; nVolumeNameSize
.text:004093F0                 mov     [esp+8FCh+lpRootPathName], eax ; lpRootPathName
.text:004093F3                 call    GetVolumeInformationA
.text:004093F8                 sub     esp, 20h
.text:004093FB                 test    eax, eax
.text:004093FD                 lea     edi, [esp+8FCh+var_8CC]
.text:00409401                 setz    bl
.text:00409404                 mov     [esp+8FCh+lpRootPathName], ebp ; Block
.text:00409407                 xor     ebp, ebp
.text:00409409                 movzx   edx, bl
.text:0040940C                 dec     edx
.text:0040940D                 xor     ebx, ebx
.text:0040940F                 and     [esp+8FCh+VolumeSerialNumber], edx
.text:00409413                 call    free
.text:00409418                 cld
.text:00409419                 mov     ecx, [esp+8FCh+VolumeSerialNumber]
.text:0040941D                 mov     [esi+1Ch], ecx
.text:00409420                 mov     ecx, 0Dh
.text:00409425                 rep movsd
.text:00409427                 mov     edi, [esp+8FCh+var_8A0]
.text:0040942B                 mov     edx, [esp+8FCh+var_89C]
.text:0040942F                 mov     ecx, [esp+8FCh+var_8CC]
.text:00409433                 or      ebp, edi
.text:00409435                 mov     esi, [esp+8FCh+var_8B0]
.text:00409439                 mov     edi, [esp+8FCh+arg_4]
.text:00409440                 or      edx, ebx
.text:00409442                 mov     [edi+8], edx
.text:00409445                 xor     edx, edx
.text:00409447                 test    cl, 10h
.text:0040944A                 setz    dl
.text:0040944D                 mov     [edi+0Ch], ebp
.text:00409450                 mov     [edi+10h], esi
.text:00409453                 mov     dword ptr [edi+14h], 0
.text:0040945A                 dec     edx
.text:0040945B                 and     edx, 0FFFFC000h
.text:00409461                 add     edx, 8000h
.text:00409467                 or      edx, 124h
.text:0040946D                 test    cl, 1
.text:00409470                 movzx   eax, dx
.text:00409473                 jnz     short loc_40947A
.text:00409475                 or      eax, 92h
.text:0040947A
.text:0040947A loc_40947A:                             ; CODE XREF: sub_4092C0+1B3↑j
.text:0040947A                 mov     ebx, [esp+8FCh+var_8A8]
.text:0040947E                 xor     edx, edx
.text:00409480                 xor     ebp, ebp
.text:00409482                 mov     edi, [esp+8FCh+var_8AC]
.text:00409486                 mov     ecx, [esp+8FCh+arg_4]
.text:0040948D                 mov     esi, edi
.text:0040948F                 or      [ecx], eax
.text:00409491                 mov     edi, ebx
.text:00409493                 or      edi, ebp
.text:00409495                 mov     ebp, edx
.text:00409497                 mov     ebx, [esp+8FCh+var_8A4]
.text:0040949B                 or      ebp, esi
.text:0040949D                 mov     esi, [esp+8FCh+arg_4]
.text:004094A4                 mov     edx, [esp+8FCh+var_8BC]
.text:004094A8                 mov     [esi+18h], ebx
.text:004094AB                 mov     ebx, [esp+8FCh+var_8C0]
.text:004094AF                 mov     ecx, edx
.text:004094B1                 mov     [esi+30h], edi
.text:004094B4                 xor     edx, edx
.text:004094B6                 mov     [esi+34h], ebp
.text:004094B9                 or      ebx, edx
.text:004094BB                 xor     esi, esi
.text:004094BD                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:004094C5                 or      esi, ecx
.text:004094C7                 mov     edx, ebx
.text:004094C9                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:004094D1                 sub     edx, 0D53E8000h
.text:004094D7                 mov     ecx, esi
.text:004094D9                 sbb     ecx, 19DB1DEh
.text:004094DF                 mov     [esp+8FCh+lpVolumeNameBuffer], ecx
.text:004094E3                 mov     [esp+8FCh+lpRootPathName], edx
.text:004094E6                 call    sub_40F270
.text:004094EB                 mov     edx, eax
.text:004094ED                 mov     ecx, [esp+8FCh+arg_4]
.text:004094F4                 shr     eax, 1Fh
.text:004094F7                 dec     eax
.text:004094F8                 and     edx, eax
.text:004094FA                 mov     [ecx+38h], edx
.text:004094FD                 mov     [esp+8FCh+lpRootPathName], ebx
.text:00409500                 mov     [esp+8FCh+lpVolumeNameBuffer], esi
.text:00409504                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:0040950C                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:00409514                 call    sub_40F0F0
.text:00409519                 lea     ecx, [eax+eax*4]
.text:0040951C                 lea     ebx, [ecx+ecx*4]
.text:0040951F                 mov     eax, [esp+8FCh+arg_4]
.text:00409526                 shl     ebx, 2
.text:00409529                 mov     esi, ebx
.text:0040952B                 shr     esi, 1Fh
.text:0040952E                 dec     esi
.text:0040952F                 and     esi, ebx
.text:00409531                 mov     [eax+3Ch], esi
.text:00409534                 mov     edx, [esp+8FCh+var_8C4]
.text:00409538                 xor     esi, esi
.text:0040953A                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:00409542                 mov     ebx, [esp+8FCh+var_8C8]
.text:00409546                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:0040954E                 mov     ecx, edx
.text:00409550                 xor     edx, edx
.text:00409552                 or      ebx, edx
.text:00409554                 or      esi, ecx
.text:00409556                 mov     edx, ebx
.text:00409558                 sub     edx, 0D53E8000h
.text:0040955E                 mov     ecx, esi
.text:00409560                 sbb     ecx, 19DB1DEh
.text:00409566                 mov     [esp+8FCh+lpVolumeNameBuffer], ecx
.text:0040956A                 mov     [esp+8FCh+lpRootPathName], edx
.text:0040956D                 call    sub_40F270
.text:00409572                 mov     edx, eax
.text:00409574                 mov     ecx, [esp+8FCh+arg_4]
.text:0040957B                 shr     eax, 1Fh
.text:0040957E                 dec     eax
.text:0040957F                 and     edx, eax
.text:00409581                 mov     [ecx+48h], edx
.text:00409584                 mov     [esp+8FCh+lpRootPathName], ebx
.text:00409587                 mov     [esp+8FCh+lpVolumeNameBuffer], esi
.text:0040958B                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:00409593                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:0040959B                 call    sub_40F0F0
.text:004095A0                 lea     ecx, [eax+eax*4]
.text:004095A3                 lea     ebx, [ecx+ecx*4]
.text:004095A6                 mov     eax, [esp+8FCh+arg_4]
.text:004095AD                 shl     ebx, 2
.text:004095B0                 mov     esi, ebx
.text:004095B2                 shr     esi, 1Fh
.text:004095B5                 dec     esi
.text:004095B6                 and     esi, ebx
.text:004095B8                 mov     [eax+4Ch], esi
.text:004095BB                 mov     edx, [esp+8FCh+var_8B4]
.text:004095BF                 xor     esi, esi
.text:004095C1                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:004095C9                 mov     ebx, [esp+8FCh+var_8B8]
.text:004095CD                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:004095D5                 mov     ecx, edx
.text:004095D7                 xor     edx, edx
.text:004095D9                 or      ebx, edx
.text:004095DB                 or      esi, ecx
.text:004095DD                 mov     edx, ebx
.text:004095DF                 sub     edx, 0D53E8000h
.text:004095E5                 mov     ecx, esi
.text:004095E7                 sbb     ecx, 19DB1DEh
.text:004095ED                 mov     [esp+8FCh+lpVolumeNameBuffer], ecx
.text:004095F1                 mov     [esp+8FCh+lpRootPathName], edx
.text:004095F4                 call    sub_40F270
.text:004095F9                 mov     edx, eax
.text:004095FB                 mov     ecx, [esp+8FCh+arg_4]
.text:00409602                 shr     eax, 1Fh
.text:00409605                 dec     eax
.text:00409606                 and     edx, eax
.text:00409608                 mov     [ecx+40h], edx
.text:0040960B                 mov     [esp+8FCh+lpRootPathName], ebx
.text:0040960E                 mov     [esp+8FCh+lpVolumeNameBuffer], esi
.text:00409612                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:0040961A                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:00409622                 call    sub_40F0F0
.text:00409627                 lea     ebx, [eax+eax*4]
.text:0040962A                 mov     esi, [esp+8FCh+arg_4]
.text:00409631                 lea     edx, [ebx+ebx*4]
.text:00409634                 shl     edx, 2
.text:00409637                 mov     eax, edi
.text:00409639                 mov     ecx, edx
.text:0040963B                 mov     dword ptr [esi+50h], 200h
.text:00409642                 shr     ecx, 1Fh
.text:00409645                 dec     ecx
.text:00409646                 and     ecx, edx
.text:00409648                 test    ebp, ebp
.text:0040964A                 mov     edx, ebp
.text:0040964C                 mov     [esi+44h], ecx
.text:0040964F                 js      short loc_4096A1
.text:00409651
.text:00409651 loc_409651:                             ; CODE XREF: sub_4092C0+3E9↓j
.text:00409651                 xor     esi, esi
.text:00409653                 mov     ebp, edi
.text:00409655                 mov     ecx, eax
.text:00409657                 shrd    ecx, edx, 9
.text:0040965B                 mov     ebx, edx
.text:0040965D                 and     ebp, 1FFh
.text:00409663                 mov     eax, esi
.text:00409665                 sar     ebx, 9
.text:00409668                 or      eax, ebp
.text:0040966A                 jz      short loc_409672
.text:0040966C                 add     ecx, 1
.text:0040966F                 adc     ebx, 0
.text:00409672
.text:00409672 loc_409672:                             ; CODE XREF: sub_4092C0+3AA↑j
.text:00409672                 mov     edx, [esp+8FCh+arg_4]
.text:00409679                 mov     [edx+5Ch], ebx
.text:0040967C                 mov     ebx, [esp+8FCh+arg_0]
.text:00409683                 mov     [edx+58h], ecx
.text:00409686                 mov     [esp+8FCh+lpVolumeNameBuffer], edx ; int
.text:0040968A                 mov     [esp+8FCh+lpRootPathName], ebx ; String1
.text:0040968D                 call    sub_4084E0
.text:00409692                 xor     edx, edx
.text:00409694
.text:00409694 loc_409694:                             ; CODE XREF: sub_4092C0+43↑j
.text:00409694                 add     esp, 8ECh
.text:0040969A                 mov     eax, edx
.text:0040969C                 pop     ebx
.text:0040969D                 pop     esi
.text:0040969E                 pop     edi
.text:0040969F                 pop     ebp
.text:004096A0                 retn
.text:004096A1 ; ---------------------------------------------------------------------------
.text:004096A1
.text:004096A1 loc_4096A1:                             ; CODE XREF: sub_4092C0+38F↑j
.text:004096A1                 add     eax, 1FFh
.text:004096A6                 adc     edx, 0
.text:004096A9                 jmp     short loc_409651
.text:004096A9 ; ---------------------------------------------------------------------------
.text:004096AB                 align 10h
.text:004096B0
.text:004096B0 loc_4096B0:                             ; CODE XREF: sub_4092C0+CA↑j
.text:004096B0                 mov     eax, [esp+8FCh+arg_0]
.text:004096B7                 mov     [esp+8FCh+lpRootPathName], eax
.text:004096BA                 call    loc_407E90
.text:004096BF                 mov     [esp+8FCh+var_34], eax
.text:004096C6                 jmp     loc_40939C
.text:004096C6 sub_4092C0      endp
.text:004096C6
.text:004096C6 ; ---------------------------------------------------------------------------
.text:004096CB                 align 10h
.text:004096D0 ; START OF FUNCTION CHUNK FOR sub_40D5E0
.text:004096D0
.text:004096D0 loc_4096D0:                             ; CODE XREF: sub_40D5E0+26↓j
.text:004096D0                 cld
.text:004096D1                 sub     esp, 2Ch
.text:004096D4                 xor     eax, eax
.text:004096D6                 mov     [esp+2Ch+var_10], ebx
.text:004096DA                 mov     ecx, 18h
.text:004096DF                 mov     ebx, [esp+2Ch+arg_0]
.text:004096E3                 mov     [esp+2Ch+var_C], esi
.text:004096E7                 mov     esi, [esp+2Ch+arg_4]
.text:004096EB                 test    ebx, ebx
.text:004096ED                 mov     [esp+2Ch+var_8], edi
.text:004096F1                 mov     edi, esi
.text:004096F3                 mov     [esp+2Ch+var_4], ebp
.text:004096F7                 rep stosd
.text:004096F9                 jz      short loc_409700
.text:004096FB                 cmp     byte ptr [ebx], 0
.text:004096FE                 jnz     short loc_409718
.text:00409700
.text:00409700 loc_409700:                             ; CODE XREF: sub_40D5E0-3EE7↑j
.text:00409700                 xor     edx, edx
.text:00409702
.text:00409702 loc_409702:                             ; CODE XREF: sub_40D5E0-3EB1↓j
.text:00409702                                         ; sub_40D5E0-3E08↓j
.text:00409702                 mov     ebx, [esp+2Ch+var_10]
.text:00409706                 mov     eax, edx
.text:00409708                 mov     esi, [esp+2Ch+var_C]
.text:0040970C                 mov     edi, [esp+2Ch+var_8]
.text:00409710                 mov     ebp, [esp+2Ch+var_4]
.text:00409714                 add     esp, 2Ch
.text:00409717                 retn
.text:00409718 ; ---------------------------------------------------------------------------
.text:00409718
.text:00409718 loc_409718:                             ; CODE XREF: sub_40D5E0-3EE2↑j
.text:00409718                 mov     [esp+2Ch+dwDesiredAccess], 0 ; int
.text:00409720                 mov     [esp+2Ch+lpFileName], ebx ; lpFileName
.text:00409723                 call    sub_40B200
.text:00409728                 test    eax, eax
.text:0040972A                 mov     edx, 0FFFFFFFFh
.text:0040972F                 jnz     short loc_409702
.text:00409731                 mov     [esp+2Ch+lpFileName], ebx ; LPCSTR
.text:00409734                 call    sub_40B0B0
.text:00409739                 mov     [esp+2Ch+lpFileName], eax
.text:0040973C                 call    sub_409C60
.text:00409741                 mov     [esp+2Ch+lpFileName], eax ; lpFileName
.text:00409744                 mov     ebp, eax
.text:00409746                 mov     [esp+2Ch+hTemplateFile], 0 ; hTemplateFile
.text:0040974E                 mov     [esp+2Ch+dwFlagsAndAttributes], 2000001h ; dwFlagsAndAttributes
.text:00409756                 mov     [esp+2Ch+dwCreationDisposition], 3 ; dwCreationDisposition
.text:0040975E                 mov     [esp+2Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:00409766                 mov     [esp+2Ch+dwShareMode], 0 ; dwShareMode
.text:0040976E                 mov     [esp+2Ch+dwDesiredAccess], 0 ; dwDesiredAccess
.text:00409776                 call    CreateFileA
.text:0040977B                 sub     esp, 1Ch
.text:0040977E                 mov     ebx, eax
.text:00409780                 mov     [esp+2Ch+dwDesiredAccess], esi
.text:00409784                 mov     [esp+2Ch+lpFileName], eax
.text:00409787                 call    loc_408010
.text:0040978C                 mov     [esp+2Ch+lpFileName], ebx ; hObject
.text:0040978F                 mov     edi, eax
.text:00409791                 call    CloseHandle
.text:00409796                 sub     esp, 4
.text:00409799                 cmp     edi, 0FFFFFFFFh
.text:0040979C                 jz      short loc_4097FA
.text:0040979E                 mov     [esp+2Ch+dwDesiredAccess], esi ; int
.text:004097A2                 mov     [esp+2Ch+lpFileName], ebp ; String1
.text:004097A5                 call    sub_4084E0
.text:004097AA
.text:004097AA loc_4097AA:                             ; CODE XREF: sub_40D5E0-3DD8↓j
.text:004097AA                 mov     edx, [esi]
.text:004097AC                 and     edx, 0F000h
.text:004097B2                 cmp     edx, 4000h
.text:004097B8                 jz      short loc_4097ED
.text:004097BA
.text:004097BA loc_4097BA:                             ; CODE XREF: sub_40D5E0-3DE8↓j
.text:004097BA                 cmp     edi, 0FFFFFFFFh
.text:004097BD                 jz      short loc_4097DD
.text:004097BF
.text:004097BF loc_4097BF:                             ; CODE XREF: sub_40D5E0-3DF5↓j
.text:004097BF                 mov     [esp+2Ch+lpFileName], 0 ; uMode
.text:004097C6                 call    SetErrorMode
.text:004097CB                 sub     esp, 4
.text:004097CE                 mov     [esp+2Ch+lpFileName], ebp ; Block
.text:004097D1                 call    free
.text:004097D6                 mov     edx, edi
.text:004097D8                 jmp     loc_409702
.text:004097DD ; ---------------------------------------------------------------------------
.text:004097DD
.text:004097DD loc_4097DD:                             ; CODE XREF: sub_40D5E0-3E23↑j
.text:004097DD                 call    sub_40B060
.text:004097E2                 mov     esi, eax
.text:004097E4                 call    _errno
.text:004097E9                 mov     [eax], esi
.text:004097EB                 jmp     short loc_4097BF
.text:004097ED ; ---------------------------------------------------------------------------
.text:004097ED
.text:004097ED loc_4097ED:                             ; CODE XREF: sub_40D5E0-3E28↑j
.text:004097ED                 mov     [esp+2Ch+lpFileName], ebp
.text:004097F0                 call    loc_407E90
.text:004097F5                 mov     [esi+18h], eax
.text:004097F8                 jmp     short loc_4097BA
.text:004097FA ; ---------------------------------------------------------------------------
.text:004097FA
.text:004097FA loc_4097FA:                             ; CODE XREF: sub_40D5E0-3E44↑j
.text:004097FA                 mov     [esp+2Ch+dwDesiredAccess], esi ; int
.text:004097FE                 mov     [esp+2Ch+lpFileName], ebp ; LPCSTR
.text:00409801                 call    sub_4092C0
.text:00409806                 mov     edi, eax
.text:00409808                 jmp     short loc_4097AA
.text:00409808 ; END OF FUNCTION CHUNK FOR sub_40D5E0
.text:00409808 ; ---------------------------------------------------------------------------
.text:0040980A                 align 10h
.text:00409810
.text:00409810 ; =============== S U B R O U T I N E =======================================
.text:00409810
.text:00409810 ; Attributes: bp-based frame info_from_lumina fpd=268h
.text:00409810
.text:00409810 ; int __cdecl win32_longpath(LPCSTR lpFileName)
.text:00409810 _win32_longpath proc near               ; CODE XREF: .text:00409FD4↓p
.text:00409810
.text:00409810 C               = dword ptr -278h
.text:00409810 lpFindFileData  = dword ptr -274h
.text:00409810 Destination     = byte ptr -268h
.text:00409810 var_267         = byte ptr -267h
.text:00409810 FindFileData    = _WIN32_FIND_DATAA ptr -158h
.text:00409810 lpFileName      = dword ptr  8
.text:00409810
.text:00409810                 push    ebp
.text:00409811                 xor     eax, eax
.text:00409813                 push    edi
.text:00409814                 push    esi
.text:00409815                 push    ebx
.text:00409816                 sub     esp, 26Ch
.text:0040981C                 mov     esi, [esp+278h+lpFileName]
.text:00409823                 lea     ebp, [esp+278h+Destination]
.text:00409827                 test    esi, esi
.text:00409829                 jz      loc_409987
.text:0040982F                 movsx   edx, byte ptr [esi]
.text:00409832                 mov     [esp+278h+C], edx ; C
.text:00409835                 call    isalpha
.text:0040983A                 test    eax, eax
.text:0040983C                 jz      short loc_40984F
.text:0040983E                 mov     eax, [esp+278h+lpFileName]
.text:00409845                 cmp     byte ptr [eax+1], 3Ah ; ':'
.text:00409849                 jz      loc_409B8B
.text:0040984F
.text:0040984F loc_40984F:                             ; CODE XREF: _win32_longpath+2C↑j
.text:0040984F                 mov     edx, [esp+278h+lpFileName]
.text:00409856                 movzx   eax, byte ptr [edx]
.text:00409859                 cmp     al, 2Fh ; '/'
.text:0040985B                 jz      loc_409A6B
.text:00409861                 cmp     al, 5Ch ; '\'
.text:00409863                 jz      loc_409A6B
.text:00409869
.text:00409869 loc_409869:                             ; CODE XREF: _win32_longpath+26E↓j
.text:00409869                                         ; _win32_longpath+2B1↓j ...
.text:00409869                 mov     [ebp+268h+Destination], 0
.text:0040986D                 movzx   ebx, byte ptr [esi]
.text:00409870                 test    bl, bl
.text:00409872                 jz      loc_409969
.text:00409878                 nop
.text:00409879                 lea     esi, [esi+0]
.text:00409880
.text:00409880 loc_409880:                             ; CODE XREF: _win32_longpath+153↓j
.text:00409880                 cmp     bl, 2Fh ; '/'
.text:00409883                 jz      loc_409A20
.text:00409889                 cmp     bl, 5Ch ; '\'
.text:0040988C                 jz      loc_409A20
.text:00409892
.text:00409892 loc_409892:                             ; CODE XREF: _win32_longpath+21E↓j
.text:00409892                                         ; _win32_longpath+22C↓j ...
.text:00409892                 cmp     bl, 2Eh ; '.'
.text:00409895                 jz      loc_4099C0
.text:0040989B
.text:0040989B loc_40989B:                             ; CODE XREF: _win32_longpath+1EF↓j
.text:0040989B                                         ; _win32_longpath+203↓j
.text:0040989B                 test    bl, bl
.text:0040989D                 jz      loc_409969
.text:004098A3                 cmp     bl, 2Fh ; '/'
.text:004098A6                 jz      short loc_4098C2
.text:004098A8                 cmp     bl, 5Ch ; '\'
.text:004098AB                 jz      short loc_4098C2
.text:004098AD                 lea     esi, [esi+0]
.text:004098B0
.text:004098B0 loc_4098B0:                             ; CODE XREF: _win32_longpath+B0↓j
.text:004098B0                 inc     esi
.text:004098B1                 movzx   ebx, byte ptr [esi]
.text:004098B4                 test    bl, bl
.text:004098B6                 jz      short loc_4098C2
.text:004098B8                 cmp     bl, 2Fh ; '/'
.text:004098BB                 jz      short loc_4098C2
.text:004098BD                 cmp     bl, 5Ch ; '\'
.text:004098C0                 jnz     short loc_4098B0
.text:004098C2
.text:004098C2 loc_4098C2:                             ; CODE XREF: _win32_longpath+96↑j
.text:004098C2                                         ; _win32_longpath+9B↑j ...
.text:004098C2                 mov     byte ptr [esi], 0
.text:004098C5                 lea     edx, [esp+278h+FindFileData]
.text:004098CC                 mov     eax, [esp+278h+lpFileName]
.text:004098D3                 mov     [esp+278h+lpFindFileData], edx ; lpFindFileData
.text:004098D7                 mov     [esp+278h+C], eax ; lpFileName
.text:004098DA                 call    FindFirstFileA
.text:004098DF                 mov     [esi], bl
.text:004098E1                 sub     esp, 8
.text:004098E4                 mov     edi, eax
.text:004098E6                 cmp     eax, 0FFFFFFFFh
.text:004098E9                 jz      loc_4099AC
.text:004098EF                 lea     ebx, [esp+278h+FindFileData.cFileName]
.text:004098F6                 mov     ecx, ebx
.text:004098F8                 nop
.text:004098F9                 lea     esi, [esi+0]
.text:00409900
.text:00409900 loc_409900:                             ; CODE XREF: _win32_longpath+105↓j
.text:00409900                 mov     eax, [ebx]
.text:00409902                 add     ebx, 4
.text:00409905                 lea     edx, [eax-1010101h]
.text:0040990B                 not     eax
.text:0040990D                 and     edx, eax
.text:0040990F                 and     edx, 80808080h
.text:00409915                 jz      short loc_409900
.text:00409917                 test    edx, 8080h
.text:0040991D                 jnz     short loc_409925
.text:0040991F                 shr     edx, 10h
.text:00409922                 add     ebx, 2
.text:00409925
.text:00409925 loc_409925:                             ; CODE XREF: _win32_longpath+10D↑j
.text:00409925                 add     dl, dl
.text:00409927                 sbb     ebx, 3
.text:0040992A                 sub     ebx, ecx
.text:0040992C                 lea     ecx, [esp+278h+Destination]
.text:00409930                 sub     ecx, ebp
.text:00409932                 add     ecx, 105h
.text:00409938                 cmp     ecx, ebx
.text:0040993A                 jle     short loc_409992
.text:0040993C                 mov     [esp+278h+C], ebp ; Destination
.text:0040993F                 lea     edx, [esp+278h+FindFileData.cFileName]
.text:00409946                 add     ebp, ebx
.text:00409948                 mov     [esp+278h+lpFindFileData], edx ; Source
.text:0040994C                 call    strcpy
.text:00409951                 mov     [esp+278h+C], edi ; hFindFile
.text:00409954                 call    FindClose
.text:00409959                 sub     esp, 4
.text:0040995C
.text:0040995C loc_40995C:                             ; CODE XREF: _win32_longpath+1E0↓j
.text:0040995C                 movzx   ecx, byte ptr [esi]
.text:0040995F                 test    cl, cl
.text:00409961                 mov     bl, cl
.text:00409963                 jnz     loc_409880
.text:00409969
.text:00409969 loc_409969:                             ; CODE XREF: _win32_longpath+62↑j
.text:00409969                                         ; _win32_longpath+8D↑j
.text:00409969                 mov     esi, [esp+278h+lpFileName]
.text:00409970                 lea     ebp, [esp+278h+Destination]
.text:00409974                 mov     [esp+278h+lpFindFileData], ebp ; Source
.text:00409978                 mov     [esp+278h+C], esi ; Destination
.text:0040997B                 call    strcpy
.text:00409980                 mov     eax, [esp+278h+lpFileName]
.text:00409987
.text:00409987 loc_409987:                             ; CODE XREF: _win32_longpath+19↑j
.text:00409987                                         ; _win32_longpath+19A↓j
.text:00409987                 add     esp, 26Ch
.text:0040998D                 pop     ebx
.text:0040998E                 pop     esi
.text:0040998F                 pop     edi
.text:00409990                 pop     ebp
.text:00409991                 retn
.text:00409992 ; ---------------------------------------------------------------------------
.text:00409992
.text:00409992 loc_409992:                             ; CODE XREF: _win32_longpath+12A↑j
.text:00409992                 mov     [esp+278h+C], edi ; hFindFile
.text:00409995                 call    FindClose
.text:0040999A                 sub     esp, 4
.text:0040999D                 call    _errno
.text:004099A2                 mov     dword ptr [eax], 22h ; '"'
.text:004099A8
.text:004099A8 loc_4099A8:                             ; CODE XREF: _win32_longpath+1A7↓j
.text:004099A8                 xor     eax, eax
.text:004099AA                 jmp     short loc_409987
.text:004099AC ; ---------------------------------------------------------------------------
.text:004099AC
.text:004099AC loc_4099AC:                             ; CODE XREF: _win32_longpath+D9↑j
.text:004099AC                 call    _errno
.text:004099B1                 mov     dword ptr [eax], 16h
.text:004099B7                 jmp     short loc_4099A8
.text:004099B7 ; ---------------------------------------------------------------------------
.text:004099B9                 align 10h
.text:004099C0
.text:004099C0 loc_4099C0:                             ; CODE XREF: _win32_longpath+85↑j
.text:004099C0                 movzx   eax, byte ptr [esi+1]
.text:004099C4                 test    al, al
.text:004099C6                 jnz     short loc_4099F5
.text:004099C8
.text:004099C8 loc_4099C8:                             ; CODE XREF: _win32_longpath+1E7↓j
.text:004099C8                                         ; _win32_longpath+1EB↓j ...
.text:004099C8                 test    bl, bl
.text:004099CA                 jz      short loc_4099EC
.text:004099CC                 cmp     bl, 2Fh ; '/'
.text:004099CF                 jz      short loc_4099EC
.text:004099D1                 cmp     bl, 5Ch ; '\'
.text:004099D4                 jz      short loc_4099EC
.text:004099D6
.text:004099D6 loc_4099D6:                             ; CODE XREF: _win32_longpath+1DA↓j
.text:004099D6                 mov     [ebp+268h+Destination], bl
.text:004099D9                 inc     esi
.text:004099DA                 inc     ebp
.text:004099DB                 movzx   ebx, byte ptr [esi]
.text:004099DE                 test    bl, bl
.text:004099E0                 jz      short loc_4099EC
.text:004099E2                 cmp     bl, 2Fh ; '/'
.text:004099E5                 jz      short loc_4099EC
.text:004099E7                 cmp     bl, 5Ch ; '\'
.text:004099EA                 jnz     short loc_4099D6
.text:004099EC
.text:004099EC loc_4099EC:                             ; CODE XREF: _win32_longpath+1BA↑j
.text:004099EC                                         ; _win32_longpath+1BF↑j ...
.text:004099EC                 mov     [ebp+268h+Destination], 0
.text:004099F0                 jmp     loc_40995C
.text:004099F5 ; ---------------------------------------------------------------------------
.text:004099F5
.text:004099F5 loc_4099F5:                             ; CODE XREF: _win32_longpath+1B6↑j
.text:004099F5                 cmp     al, 2Fh ; '/'
.text:004099F7                 jz      short loc_4099C8
.text:004099F9                 cmp     al, 5Ch ; '\'
.text:004099FB                 jz      short loc_4099C8
.text:004099FD                 cmp     al, 2Eh ; '.'
.text:004099FF                 jnz     loc_40989B
.text:00409A05                 movzx   eax, byte ptr [esi+2]
.text:00409A09                 test    al, al
.text:00409A0B                 jz      short loc_4099C8
.text:00409A0D                 cmp     al, 2Fh ; '/'
.text:00409A0F                 jz      short loc_4099C8
.text:00409A11                 cmp     al, 5Ch ; '\'
.text:00409A13                 jnz     loc_40989B
.text:00409A19                 jmp     short loc_4099C8
.text:00409A19 ; ---------------------------------------------------------------------------
.text:00409A1B                 align 10h
.text:00409A20
.text:00409A20 loc_409A20:                             ; CODE XREF: _win32_longpath+73↑j
.text:00409A20                                         ; _win32_longpath+7C↑j
.text:00409A20                 mov     [ebp+268h+Destination], bl
.text:00409A23                 inc     esi
.text:00409A24                 inc     ebp
.text:00409A25                 mov     [ebp+268h+Destination], 0
.text:00409A29                 movzx   ebx, byte ptr [esi]
.text:00409A2C                 test    bl, bl
.text:00409A2E                 jz      loc_409892
.text:00409A34                 cmp     bl, 2Fh ; '/'
.text:00409A37                 jz      short loc_409A50
.text:00409A39                 cmp     bl, 5Ch ; '\'
.text:00409A3C                 jnz     loc_409892
.text:00409A42                 lea     esi, [esi+0]
.text:00409A49                 lea     edi, [edi+0]
.text:00409A50
.text:00409A50 loc_409A50:                             ; CODE XREF: _win32_longpath+227↑j
.text:00409A50                                         ; _win32_longpath+24F↓j ...
.text:00409A50                 inc     esi
.text:00409A51                 movzx   ebx, byte ptr [esi]
.text:00409A54                 test    bl, bl
.text:00409A56                 jz      loc_409892
.text:00409A5C                 cmp     bl, 2Fh ; '/'
.text:00409A5F                 jz      short loc_409A50
.text:00409A61                 cmp     bl, 5Ch ; '\'
.text:00409A64                 jz      short loc_409A50
.text:00409A66                 jmp     loc_409892
.text:00409A6B ; ---------------------------------------------------------------------------
.text:00409A6B
.text:00409A6B loc_409A6B:                             ; CODE XREF: _win32_longpath+4B↑j
.text:00409A6B                                         ; _win32_longpath+53↑j
.text:00409A6B                 mov     edi, [esp+278h+lpFileName]
.text:00409A72                 movzx   edx, byte ptr [edi+1]
.text:00409A76                 cmp     dl, 2Fh ; '/'
.text:00409A79                 jz      short loc_409A84
.text:00409A7B                 cmp     dl, 5Ch ; '\'
.text:00409A7E                 jnz     loc_409869
.text:00409A84
.text:00409A84 loc_409A84:                             ; CODE XREF: _win32_longpath+269↑j
.text:00409A84                 mov     esi, [esp+278h+lpFileName]
.text:00409A8B                 mov     [ebp+268h+Destination], al
.text:00409A8E                 mov     ecx, [esp+278h+lpFileName]
.text:00409A95                 inc     ebp
.text:00409A96                 add     esi, 2
.text:00409A99                 movzx   ebx, byte ptr [ecx+1]
.text:00409A9D                 mov     [ebp+268h+Destination], bl
.text:00409AA0                 inc     ebp
.text:00409AA1                 movzx   eax, byte ptr [ecx+2]
.text:00409AA5                 test    al, al
.text:00409AA7                 jz      loc_409B83
.text:00409AAD                 cmp     al, 2Fh ; '/'
.text:00409AAF                 jz      loc_409B68
.text:00409AB5                 cmp     al, 5Ch ; '\'
.text:00409AB7                 mov     bl, al
.text:00409AB9                 jz      loc_409B68
.text:00409ABF
.text:00409ABF loc_409ABF:                             ; CODE XREF: _win32_longpath+36E↓j
.text:00409ABF                                         ; _win32_longpath+376↓j
.text:00409ABF                 test    bl, bl
.text:00409AC1                 jz      loc_409869
.text:00409AC7                 cmp     bl, 2Fh ; '/'
.text:00409ACA                 jz      short loc_409AEB
.text:00409ACC                 cmp     bl, 5Ch ; '\'
.text:00409ACF                 jz      short loc_409AEB
.text:00409AD1
.text:00409AD1 loc_409AD1:                             ; CODE XREF: _win32_longpath+2D9↓j
.text:00409AD1                 mov     [ebp+268h+Destination], bl
.text:00409AD4                 inc     esi
.text:00409AD5                 inc     ebp
.text:00409AD6                 movzx   ebx, byte ptr [esi]
.text:00409AD9                 test    bl, bl
.text:00409ADB                 jz      loc_409869
.text:00409AE1                 cmp     bl, 2Fh ; '/'
.text:00409AE4                 jz      short loc_409AEB
.text:00409AE6                 cmp     bl, 5Ch ; '\'
.text:00409AE9                 jnz     short loc_409AD1
.text:00409AEB
.text:00409AEB loc_409AEB:                             ; CODE XREF: _win32_longpath+2BA↑j
.text:00409AEB                                         ; _win32_longpath+2BF↑j ...
.text:00409AEB                 test    bl, bl
.text:00409AED                 jz      loc_409869
.text:00409AF3                 mov     [ebp+268h+Destination], bl
.text:00409AF6                 inc     esi
.text:00409AF7                 inc     ebp
.text:00409AF8                 movzx   ebx, byte ptr [esi]
.text:00409AFB                 test    bl, bl
.text:00409AFD                 jz      loc_409869
.text:00409B03                 cmp     bl, 2Fh ; '/'
.text:00409B06                 jz      short loc_409B50
.text:00409B08                 cmp     bl, 5Ch ; '\'
.text:00409B0B                 jz      short loc_409B50
.text:00409B0D
.text:00409B0D loc_409B0D:                             ; CODE XREF: _win32_longpath+356↓j
.text:00409B0D                 test    bl, bl
.text:00409B0F                 jz      loc_409869
.text:00409B15                 cmp     bl, 2Fh ; '/'
.text:00409B18                 jz      loc_409869
.text:00409B1E                 cmp     bl, 5Ch ; '\'
.text:00409B21                 jz      loc_409869
.text:00409B27
.text:00409B27 loc_409B27:                             ; CODE XREF: _win32_longpath+333↓j
.text:00409B27                 mov     [ebp+268h+Destination], bl
.text:00409B2A                 inc     esi
.text:00409B2B                 inc     ebp
.text:00409B2C                 movzx   ebx, byte ptr [esi]
.text:00409B2F                 test    bl, bl
.text:00409B31                 jz      loc_409869
.text:00409B37                 cmp     bl, 2Fh ; '/'
.text:00409B3A                 jz      loc_409869
.text:00409B40                 cmp     bl, 5Ch ; '\'
.text:00409B43                 jnz     short loc_409B27
.text:00409B45                 jmp     loc_409869
.text:00409B45 ; ---------------------------------------------------------------------------
.text:00409B4A                 align 10h
.text:00409B50
.text:00409B50 loc_409B50:                             ; CODE XREF: _win32_longpath+2F6↑j
.text:00409B50                                         ; _win32_longpath+2FB↑j ...
.text:00409B50                 inc     esi
.text:00409B51                 movzx   ebx, byte ptr [esi]
.text:00409B54                 test    bl, bl
.text:00409B56                 jz      loc_409869
.text:00409B5C                 cmp     bl, 2Fh ; '/'
.text:00409B5F                 jz      short loc_409B50
.text:00409B61                 cmp     bl, 5Ch ; '\'
.text:00409B64                 jz      short loc_409B50
.text:00409B66                 jmp     short loc_409B0D
.text:00409B68 ; ---------------------------------------------------------------------------
.text:00409B68
.text:00409B68 loc_409B68:                             ; CODE XREF: _win32_longpath+29F↑j
.text:00409B68                                         ; _win32_longpath+2A9↑j ...
.text:00409B68                 inc     esi
.text:00409B69                 movzx   ebx, byte ptr [esi]
.text:00409B6C                 test    bl, bl
.text:00409B6E                 jz      loc_409869
.text:00409B74                 cmp     bl, 2Fh ; '/'
.text:00409B77                 jz      short loc_409B68
.text:00409B79                 cmp     bl, 5Ch ; '\'
.text:00409B7C                 jz      short loc_409B68
.text:00409B7E                 jmp     loc_409ABF
.text:00409B83 ; ---------------------------------------------------------------------------
.text:00409B83
.text:00409B83 loc_409B83:                             ; CODE XREF: _win32_longpath+297↑j
.text:00409B83                 movzx   ebx, byte ptr [esi]
.text:00409B86                 jmp     loc_409ABF
.text:00409B8B ; ---------------------------------------------------------------------------
.text:00409B8B
.text:00409B8B loc_409B8B:                             ; CODE XREF: _win32_longpath+39↑j
.text:00409B8B                 movzx   ecx, byte ptr [eax]
.text:00409B8E                 mov     esi, eax
.text:00409B90                 mov     [esp+278h+var_267], 3Ah ; ':'
.text:00409B95                 add     esi, 2
.text:00409B98                 lea     ebp, [esp+12h]
.text:00409B9C                 mov     [esp+278h+Destination], cl
.text:00409BA0                 jmp     loc_409869
.text:00409BA0 _win32_longpath endp
.text:00409BA0
.text:00409BA0 ; ---------------------------------------------------------------------------
.text:00409BA5                 align 10h
.text:00409BB0                 sub     esp, 0Ch
.text:00409BB3                 mov     edx, [esp+10h]
.text:00409BB7                 mov     dword ptr [esp+4], 0
.text:00409BBF                 mov     [esp], edx
.text:00409BC2                 call    sub_40B200
.text:00409BC7                 inc     eax
.text:00409BC8                 setnz   dl
.text:00409BCB                 add     esp, 0Ch
.text:00409BCE                 movzx   eax, dl
.text:00409BD1                 retn
.text:00409BD1 ; ---------------------------------------------------------------------------
.text:00409BD2                 align 10h
.text:00409BE0
.text:00409BE0 ; =============== S U B R O U T I N E =======================================
.text:00409BE0
.text:00409BE0
.text:00409BE0 sub_409BE0      proc near               ; CODE XREF: sub_40B0D0+AA↓p
.text:00409BE0                                         ; sub_40D9B0+B4↓p
.text:00409BE0
.text:00409BE0 arg_0           = dword ptr  4
.text:00409BE0
.text:00409BE0                 mov     ecx, [esp+arg_0]
.text:00409BE4                 mov     edx, ecx
.text:00409BE6                 movzx   eax, byte ptr [ecx]
.text:00409BE9                 test    al, al
.text:00409BEB                 jz      short loc_409BFC
.text:00409BED                 lea     esi, [esi+0]
.text:00409BF0
.text:00409BF0 loc_409BF0:                             ; CODE XREF: sub_409BE0+1A↓j
.text:00409BF0                 cmp     al, 5Ch ; '\'
.text:00409BF2                 jz      short loc_409C00
.text:00409BF4
.text:00409BF4 loc_409BF4:                             ; CODE XREF: sub_409BE0+23↓j
.text:00409BF4                 inc     edx
.text:00409BF5                 movzx   eax, byte ptr [edx]
.text:00409BF8                 test    al, al
.text:00409BFA                 jnz     short loc_409BF0
.text:00409BFC
.text:00409BFC loc_409BFC:                             ; CODE XREF: sub_409BE0+B↑j
.text:00409BFC                 mov     eax, ecx
.text:00409BFE                 retn
.text:00409BFE ; ---------------------------------------------------------------------------
.text:00409BFF                 align 10h
.text:00409C00
.text:00409C00 loc_409C00:                             ; CODE XREF: sub_409BE0+12↑j
.text:00409C00                 mov     byte ptr [edx], 2Fh ; '/'
.text:00409C03                 jmp     short loc_409BF4
.text:00409C03 sub_409BE0      endp
.text:00409C03
.text:00409C03 ; ---------------------------------------------------------------------------
.text:00409C05                 align 10h
.text:00409C10                 push    ebx
.text:00409C11                 sub     esp, 8
.text:00409C14                 mov     ebx, [esp+14h]
.text:00409C18                 mov     edx, [esp+10h]
.text:00409C1C                 mov     [esp], ebx
.text:00409C1F                 mov     [esp+4], edx
.text:00409C23                 call    strcpy
.text:00409C28                 movzx   eax, byte ptr [ebx]
.text:00409C2B                 mov     edx, ebx
.text:00409C2D                 test    al, al
.text:00409C2F                 jz      short loc_409C4C
.text:00409C31                 jmp     short loc_409C40
.text:00409C31 ; ---------------------------------------------------------------------------
.text:00409C33                 align 10h
.text:00409C40
.text:00409C40 loc_409C40:                             ; CODE XREF: .text:00409C31↑j
.text:00409C40                                         ; .text:00409C4A↓j
.text:00409C40                 cmp     al, 5Ch ; '\'
.text:00409C42                 jz      short loc_409C53
.text:00409C44
.text:00409C44 loc_409C44:                             ; CODE XREF: .text:00409C56↓j
.text:00409C44                 inc     edx
.text:00409C45                 movzx   eax, byte ptr [edx]
.text:00409C48                 test    al, al
.text:00409C4A                 jnz     short loc_409C40
.text:00409C4C
.text:00409C4C loc_409C4C:                             ; CODE XREF: .text:00409C2F↑j
.text:00409C4C                 add     esp, 8
.text:00409C4F                 xor     eax, eax
.text:00409C51                 pop     ebx
.text:00409C52                 retn
.text:00409C53 ; ---------------------------------------------------------------------------
.text:00409C53
.text:00409C53 loc_409C53:                             ; CODE XREF: .text:00409C42↑j
.text:00409C53                 mov     byte ptr [edx], 2Fh ; '/'
.text:00409C56                 jmp     short loc_409C44
.text:00409C56 ; ---------------------------------------------------------------------------
.text:00409C58                 align 10h
.text:00409C60
.text:00409C60 ; =============== S U B R O U T I N E =======================================
.text:00409C60
.text:00409C60
.text:00409C60 sub_409C60      proc near               ; CODE XREF: sub_4084E0+16↑p
.text:00409C60                                         ; sub_4089E0+1F↑p ...
.text:00409C60
.text:00409C60 arg_0           = dword ptr  4
.text:00409C60
.text:00409C60                 mov     ecx, [esp+arg_0]
.text:00409C64                 mov     edx, ecx
.text:00409C66                 movzx   eax, byte ptr [ecx]
.text:00409C69                 test    al, al
.text:00409C6B                 jz      short loc_409C7C
.text:00409C6D                 lea     esi, [esi+0]
.text:00409C70
.text:00409C70 loc_409C70:                             ; CODE XREF: sub_409C60+1A↓j
.text:00409C70                 cmp     al, 2Fh ; '/'
.text:00409C72                 jz      short loc_409C80
.text:00409C74
.text:00409C74 loc_409C74:                             ; CODE XREF: sub_409C60+23↓j
.text:00409C74                 inc     edx
.text:00409C75                 movzx   eax, byte ptr [edx]
.text:00409C78                 test    al, al
.text:00409C7A                 jnz     short loc_409C70
.text:00409C7C
.text:00409C7C loc_409C7C:                             ; CODE XREF: sub_409C60+B↑j
.text:00409C7C                 mov     eax, ecx
.text:00409C7E                 retn
.text:00409C7E ; ---------------------------------------------------------------------------
.text:00409C7F                 align 10h
.text:00409C80
.text:00409C80 loc_409C80:                             ; CODE XREF: sub_409C60+12↑j
.text:00409C80                 mov     byte ptr [edx], 5Ch ; '\'
.text:00409C83                 jmp     short loc_409C74
.text:00409C83 sub_409C60      endp
.text:00409C83
.text:00409C83 ; ---------------------------------------------------------------------------
.text:00409C85                 align 10h
.text:00409C90                 push    ebx
.text:00409C91                 sub     esp, 8
.text:00409C94                 mov     ebx, [esp+14h]
.text:00409C98                 mov     edx, [esp+10h]
.text:00409C9C                 mov     [esp], ebx
.text:00409C9F                 mov     [esp+4], edx
.text:00409CA3                 call    strcpy
.text:00409CA8                 movzx   eax, byte ptr [ebx]
.text:00409CAB                 mov     edx, ebx
.text:00409CAD                 test    al, al
.text:00409CAF                 jz      short loc_409CCC
.text:00409CB1                 jmp     short loc_409CC0
.text:00409CB1 ; ---------------------------------------------------------------------------
.text:00409CB3                 align 10h
.text:00409CC0
.text:00409CC0 loc_409CC0:                             ; CODE XREF: .text:00409CB1↑j
.text:00409CC0                                         ; .text:00409CCA↓j
.text:00409CC0                 cmp     al, 2Fh ; '/'
.text:00409CC2                 jz      short loc_409CD3
.text:00409CC4
.text:00409CC4 loc_409CC4:                             ; CODE XREF: .text:00409CD6↓j
.text:00409CC4                 inc     edx
.text:00409CC5                 movzx   eax, byte ptr [edx]
.text:00409CC8                 test    al, al
.text:00409CCA                 jnz     short loc_409CC0
.text:00409CCC
.text:00409CCC loc_409CCC:                             ; CODE XREF: .text:00409CAF↑j
.text:00409CCC                 add     esp, 8
.text:00409CCF                 xor     eax, eax
.text:00409CD1                 pop     ebx
.text:00409CD2                 retn
.text:00409CD3 ; ---------------------------------------------------------------------------
.text:00409CD3
.text:00409CD3 loc_409CD3:                             ; CODE XREF: .text:00409CC2↑j
.text:00409CD3                 mov     byte ptr [edx], 5Ch ; '\'
.text:00409CD6                 jmp     short loc_409CC4
.text:00409CD6 ; ---------------------------------------------------------------------------
.text:00409CD8                 align 10h
.text:00409CE0                 push    ebx
.text:00409CE1                 sub     esp, 8
.text:00409CE4                 mov     ebx, [esp+14h]
.text:00409CE8                 mov     edx, [esp+10h]
.text:00409CEC                 mov     [esp+4], ebx
.text:00409CF0                 mov     [esp], edx
.text:00409CF3                 call    sub_40B080
.text:00409CF8                 movzx   eax, byte ptr [ebx]
.text:00409CFB                 mov     edx, ebx
.text:00409CFD                 test    al, al
.text:00409CFF                 jz      short loc_409D1C
.text:00409D01                 jmp     short loc_409D10
.text:00409D01 ; ---------------------------------------------------------------------------
.text:00409D03                 align 10h
.text:00409D10
.text:00409D10 loc_409D10:                             ; CODE XREF: .text:00409D01↑j
.text:00409D10                                         ; .text:00409D1A↓j
.text:00409D10                 cmp     al, 2Fh ; '/'
.text:00409D12                 jz      short loc_409D23
.text:00409D14
.text:00409D14 loc_409D14:                             ; CODE XREF: .text:00409D26↓j
.text:00409D14                 inc     edx
.text:00409D15                 movzx   eax, byte ptr [edx]
.text:00409D18                 test    al, al
.text:00409D1A                 jnz     short loc_409D10
.text:00409D1C
.text:00409D1C loc_409D1C:                             ; CODE XREF: .text:00409CFF↑j
.text:00409D1C                 add     esp, 8
.text:00409D1F                 xor     eax, eax
.text:00409D21                 pop     ebx
.text:00409D22                 retn
.text:00409D23 ; ---------------------------------------------------------------------------
.text:00409D23
.text:00409D23 loc_409D23:                             ; CODE XREF: .text:00409D12↑j
.text:00409D23                 mov     byte ptr [edx], 5Ch ; '\'
.text:00409D26                 jmp     short loc_409D14
.text:00409D26 ; ---------------------------------------------------------------------------
.text:00409D28                 align 10h
.text:00409D30                 push    ebx
.text:00409D31                 sub     esp, 8
.text:00409D34                 mov     ebx, [esp+14h]
.text:00409D38                 mov     edx, [esp+10h]
.text:00409D3C                 mov     [esp], ebx
.text:00409D3F                 mov     [esp+4], edx
.text:00409D43                 call    sub_40B080
.text:00409D48                 movzx   eax, byte ptr [ebx]
.text:00409D4B                 mov     edx, ebx
.text:00409D4D                 test    al, al
.text:00409D4F                 jz      short loc_409D6C
.text:00409D51                 jmp     short loc_409D60
.text:00409D51 ; ---------------------------------------------------------------------------
.text:00409D53                 align 10h
.text:00409D60
.text:00409D60 loc_409D60:                             ; CODE XREF: .text:00409D51↑j
.text:00409D60                                         ; .text:00409D6A↓j
.text:00409D60                 cmp     al, 5Ch ; '\'
.text:00409D62                 jz      short loc_409D71
.text:00409D64
.text:00409D64 loc_409D64:                             ; CODE XREF: .text:00409D74↓j
.text:00409D64                 inc     edx
.text:00409D65                 movzx   eax, byte ptr [edx]
.text:00409D68                 test    al, al
.text:00409D6A                 jnz     short loc_409D60
.text:00409D6C
.text:00409D6C loc_409D6C:                             ; CODE XREF: .text:00409D4F↑j
.text:00409D6C                 add     esp, 8
.text:00409D6F                 pop     ebx
.text:00409D70                 retn
.text:00409D71 ; ---------------------------------------------------------------------------
.text:00409D71
.text:00409D71 loc_409D71:                             ; CODE XREF: .text:00409D62↑j
.text:00409D71                 mov     byte ptr [edx], 2Fh ; '/'
.text:00409D74                 jmp     short loc_409D64
.text:00409D74 ; ---------------------------------------------------------------------------
.text:00409D76                 align 10h
.text:00409D80
.text:00409D80 ; =============== S U B R O U T I N E =======================================
.text:00409D80
.text:00409D80
.text:00409D80 ; int __cdecl sub_409D80(LPSTR)
.text:00409D80 sub_409D80      proc near               ; CODE XREF: .text:00409E0E↓p
.text:00409D80                                         ; .text:00409E4E↓p ...
.text:00409D80
.text:00409D80 hModule         = dword ptr -1Ch
.text:00409D80 lpFilename      = dword ptr -18h
.text:00409D80 nSize           = dword ptr -14h
.text:00409D80 arg_0           = dword ptr  4
.text:00409D80
.text:00409D80                 push    esi
.text:00409D81                 push    ebx
.text:00409D82                 sub     esp, 14h
.text:00409D85                 mov     esi, [esp+1Ch+arg_0]
.text:00409D89                 mov     [esp+1Ch+nSize], 104h ; nSize
.text:00409D91                 mov     [esp+1Ch+hModule], 0 ; hModule
.text:00409D98                 mov     [esp+1Ch+lpFilename], esi ; lpFilename
.text:00409D9C                 call    GetModuleFileNameA
.text:00409DA1                 sub     esp, 0Ch
.text:00409DA4                 test    eax, eax
.text:00409DA6                 jz      short loc_409DE8
.text:00409DA8                 cmp     eax, 104h
.text:00409DAD                 jg      short loc_409DD9
.text:00409DAF
.text:00409DAF loc_409DAF:                             ; CODE XREF: sub_409D80+66↓j
.text:00409DAF                                         ; sub_409D80+78↓j
.text:00409DAF                 movzx   eax, byte ptr [esi]
.text:00409DB2                 mov     edx, esi
.text:00409DB4                 test    al, al
.text:00409DB6                 jz      short loc_409DCC
.text:00409DB8                 nop
.text:00409DB9                 lea     esi, [esi+0]
.text:00409DC0
.text:00409DC0 loc_409DC0:                             ; CODE XREF: sub_409D80+4A↓j
.text:00409DC0                 cmp     al, 5Ch ; '\'
.text:00409DC2                 jz      short loc_409DD4
.text:00409DC4
.text:00409DC4 loc_409DC4:                             ; CODE XREF: sub_409D80+57↓j
.text:00409DC4                 inc     edx
.text:00409DC5                 movzx   eax, byte ptr [edx]
.text:00409DC8                 test    al, al
.text:00409DCA                 jnz     short loc_409DC0
.text:00409DCC
.text:00409DCC loc_409DCC:                             ; CODE XREF: sub_409D80+36↑j
.text:00409DCC                 add     esp, 14h
.text:00409DCF                 mov     eax, esi
.text:00409DD1                 pop     ebx
.text:00409DD2                 pop     esi
.text:00409DD3                 retn
.text:00409DD4 ; ---------------------------------------------------------------------------
.text:00409DD4
.text:00409DD4 loc_409DD4:                             ; CODE XREF: sub_409D80+42↑j
.text:00409DD4                 mov     byte ptr [edx], 2Fh ; '/'
.text:00409DD7                 jmp     short loc_409DC4
.text:00409DD9 ; ---------------------------------------------------------------------------
.text:00409DD9
.text:00409DD9 loc_409DD9:                             ; CODE XREF: sub_409D80+2D↑j
.text:00409DD9                 call    _errno
.text:00409DDE                 mov     dword ptr [eax], 26h ; '&'
.text:00409DE4                 xor     esi, esi
.text:00409DE6                 jmp     short loc_409DAF
.text:00409DE8 ; ---------------------------------------------------------------------------
.text:00409DE8
.text:00409DE8 loc_409DE8:                             ; CODE XREF: sub_409D80+26↑j
.text:00409DE8                 call    sub_40B060
.text:00409DED                 mov     ebx, eax
.text:00409DEF                 xor     esi, esi
.text:00409DF1                 call    _errno
.text:00409DF6                 mov     [eax], ebx
.text:00409DF8                 jmp     short loc_409DAF
.text:00409DF8 sub_409D80      endp
.text:00409DF8
.text:00409DF8 ; ---------------------------------------------------------------------------
.text:00409DFA                 align 10h
.text:00409E00                 sub     esp, 0Ch
.text:00409E03                 mov     [esp+8], ebx
.text:00409E07                 mov     ebx, [esp+10h]
.text:00409E0B                 mov     [esp], ebx
.text:00409E0E                 call    sub_409D80
.text:00409E13                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:00409E1B                 mov     [esp], ebx
.text:00409E1E                 call    strrchr
.text:00409E23                 test    eax, eax
.text:00409E25                 jz      short loc_409E2A
.text:00409E27                 lea     ebx, [eax+1]
.text:00409E2A
.text:00409E2A loc_409E2A:                             ; CODE XREF: .text:00409E25↑j
.text:00409E2A                 mov     eax, ebx
.text:00409E2C                 mov     ebx, [esp+8]
.text:00409E30                 add     esp, 0Ch
.text:00409E33                 retn
.text:00409E33 ; ---------------------------------------------------------------------------
.text:00409E34                 align 10h
.text:00409E40                 sub     esp, 0Ch
.text:00409E43                 mov     [esp+8], ebx
.text:00409E47                 mov     ebx, [esp+10h]
.text:00409E4B                 mov     [esp], ebx
.text:00409E4E                 call    sub_409D80
.text:00409E53                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:00409E5B                 mov     [esp], ebx
.text:00409E5E                 call    strrchr
.text:00409E63                 test    eax, eax
.text:00409E65                 jz      short loc_409E6A
.text:00409E67                 mov     byte ptr [eax], 0
.text:00409E6A
.text:00409E6A loc_409E6A:                             ; CODE XREF: .text:00409E65↑j
.text:00409E6A                 mov     eax, ebx
.text:00409E6C                 mov     ebx, [esp+8]
.text:00409E70                 add     esp, 0Ch
.text:00409E73                 retn
.text:00409E73 ; ---------------------------------------------------------------------------
.text:00409E74                 align 10h
.text:00409E80                 sub     esp, 0Ch
.text:00409E83                 mov     [esp+8], ebx
.text:00409E87                 mov     ebx, [esp+10h]
.text:00409E8B                 mov     [esp], ebx
.text:00409E8E                 call    sub_409D80
.text:00409E93                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:00409E9B                 mov     [esp], ebx
.text:00409E9E                 call    strrchr
.text:00409EA3                 test    eax, eax
.text:00409EA5                 jz      short loc_409EAA
.text:00409EA7                 mov     byte ptr [eax], 0
.text:00409EAA
.text:00409EAA loc_409EAA:                             ; CODE XREF: .text:00409EA5↑j
.text:00409EAA                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:00409EB2                 mov     [esp], ebx
.text:00409EB5                 call    strrchr
.text:00409EBA                 test    eax, eax
.text:00409EBC                 jz      short loc_409EC1
.text:00409EBE                 mov     byte ptr [eax], 0
.text:00409EC1
.text:00409EC1 loc_409EC1:                             ; CODE XREF: .text:00409EBC↑j
.text:00409EC1                 mov     eax, ebx
.text:00409EC3                 mov     ebx, [esp+8]
.text:00409EC7                 add     esp, 0Ch
.text:00409ECA                 retn
.text:00409ECA ; ---------------------------------------------------------------------------
.text:00409ECB                 align 10h
.text:00409ED0                 sub     esp, 1Ch
.text:00409ED3                 mov     edx, [esp+20h]
.text:00409ED7                 mov     [esp+10h], ebx
.text:00409EDB                 xor     ebx, ebx
.text:00409EDD                 mov     [esp+14h], esi
.text:00409EE1                 mov     [esp+18h], edi
.text:00409EE5                 mov     [esp], edx
.text:00409EE8                 call    sub_40B0B0
.text:00409EED                 mov     edx, [esp+24h]
.text:00409EF1                 mov     edi, eax
.text:00409EF3                 mov     [esp], edx
.text:00409EF6                 call    sub_40B0B0
.text:00409EFB                 mov     [esp+4], eax
.text:00409EFF                 mov     esi, eax
.text:00409F01                 mov     [esp], edi
.text:00409F04                 call    _stricmp_0
.text:00409F09                 mov     [esp], edi
.text:00409F0C                 test    eax, eax
.text:00409F0E                 setz    bl
.text:00409F11                 call    free
.text:00409F16                 mov     [esp], esi
.text:00409F19                 call    free
.text:00409F1E                 mov     eax, ebx
.text:00409F20                 mov     esi, [esp+14h]
.text:00409F24                 mov     ebx, [esp+10h]
.text:00409F28                 mov     edi, [esp+18h]
.text:00409F2C                 add     esp, 1Ch
.text:00409F2F                 retn
.text:00409F30 ; ---------------------------------------------------------------------------
.text:00409F30                 xor     eax, eax
.text:00409F32                 retn
.text:00409F32 ; ---------------------------------------------------------------------------
.text:00409F33 aKernel32Dll    db 'kernel32.dll',0     ; DATA XREF: .text:00409F67↓o
.text:00409F40 aGetlongpathnam db 'GetLongPathName',0  ; DATA XREF: .text:00409F76↓o
.text:00409F50 ; ---------------------------------------------------------------------------
.text:00409F50                 sub     esp, 1Ch
.text:00409F53                 mov     [esp+10h], ebx
.text:00409F57                 mov     ebx, [esp+20h]
.text:00409F5B                 mov     [esp+18h], edi
.text:00409F5F                 mov     edi, [esp+24h]
.text:00409F63                 mov     [esp+14h], esi
.text:00409F67                 mov     dword ptr [esp], offset aKernel32Dll ; "kernel32.dll"
.text:00409F6E                 call    GetModuleHandleA
.text:00409F73                 sub     esp, 4
.text:00409F76                 mov     dword ptr [esp+4], offset aGetlongpathnam ; "GetLongPathName"
.text:00409F7E                 mov     [esp], eax
.text:00409F81                 call    GetProcAddress
.text:00409F86                 sub     esp, 8
.text:00409F89                 test    eax, eax
.text:00409F8B                 jz      short loc_409FA3
.text:00409F8D                 mov     dword ptr [esp+8], 104h
.text:00409F95                 mov     [esp+4], ebx
.text:00409F99                 mov     [esp], edi
.text:00409F9C                 call    eax
.text:00409F9E                 sub     esp, 0Ch
.text:00409FA1                 mov     esi, eax
.text:00409FA3
.text:00409FA3 loc_409FA3:                             ; CODE XREF: .text:00409F8B↑j
.text:00409FA3                 test    esi, esi
.text:00409FA5                 jz      short loc_409FC0
.text:00409FA7
.text:00409FA7 loc_409FA7:                             ; CODE XREF: .text:00409FDB↓j
.text:00409FA7                 mov     eax, ebx
.text:00409FA9                 mov     esi, [esp+14h]
.text:00409FAD                 mov     ebx, [esp+10h]
.text:00409FB1                 mov     edi, [esp+18h]
.text:00409FB5                 add     esp, 1Ch
.text:00409FB8                 retn
.text:00409FB8 ; ---------------------------------------------------------------------------
.text:00409FB9                 align 10h
.text:00409FC0
.text:00409FC0 loc_409FC0:                             ; CODE XREF: .text:00409FA5↑j
.text:00409FC0                 call    sub_40BB40
.text:00409FC5                 mov     [esp], ebx
.text:00409FC8                 mov     [esp+4], edi
.text:00409FCC                 call    strcpy
.text:00409FD1                 mov     [esp], ebx
.text:00409FD4                 call    _win32_longpath
.text:00409FD9                 mov     ebx, eax
.text:00409FDB                 jmp     short loc_409FA7
.text:00409FDB ; ---------------------------------------------------------------------------
.text:00409FDD                 align 10h
.text:00409FE0                 sub     esp, 1Ch
.text:00409FE3                 mov     [esp+18h], edi
.text:00409FE7                 mov     edi, [esp+20h]
.text:00409FEB                 mov     [esp+10h], ebx
.text:00409FEF                 mov     [esp+14h], esi
.text:00409FF3                 mov     dword ptr [esp+8], 0
.text:00409FFB                 mov     dword ptr [esp+4], 0
.text:0040A003                 mov     [esp], edi
.text:0040A006                 call    GetShortPathNameA
.text:0040A00B                 sub     esp, 0Ch
.text:0040A00E                 mov     ebx, eax
.text:0040A010                 test    eax, eax
.text:0040A012                 jz      short loc_40A060
.text:0040A014                 lea     edx, [eax+1]
.text:0040A017                 mov     [esp], edx
.text:0040A01A                 call    malloc
.text:0040A01F                 test    eax, eax
.text:0040A021                 mov     esi, eax
.text:0040A023                 jz      short loc_40A060
.text:0040A025                 mov     [esp+8], ebx
.text:0040A029                 mov     [esp+4], eax
.text:0040A02D                 mov     [esp], edi
.text:0040A030                 call    GetShortPathNameA
.text:0040A035                 sub     esp, 0Ch
.text:0040A038                 mov     edx, esi
.text:0040A03A                 test    eax, eax
.text:0040A03C                 jz      short loc_40A052
.text:0040A03E                 mov     esi, esi
.text:0040A040
.text:0040A040 loc_40A040:                             ; CODE XREF: .text:0040A070↓j
.text:0040A040                 mov     ebx, [esp+10h]
.text:0040A044                 mov     eax, edx
.text:0040A046                 mov     esi, [esp+14h]
.text:0040A04A                 mov     edi, [esp+18h]
.text:0040A04E                 add     esp, 1Ch
.text:0040A051                 retn
.text:0040A052 ; ---------------------------------------------------------------------------
.text:0040A052
.text:0040A052 loc_40A052:                             ; CODE XREF: .text:0040A03C↑j
.text:0040A052                 mov     [esp], esi
.text:0040A055                 call    free
.text:0040A05A                 lea     esi, [esi+0]
.text:0040A060
.text:0040A060 loc_40A060:                             ; CODE XREF: .text:0040A012↑j
.text:0040A060                                         ; .text:0040A023↑j
.text:0040A060                 call    sub_40B060
.text:0040A065                 mov     esi, eax
.text:0040A067                 call    _errno
.text:0040A06C                 mov     [eax], esi
.text:0040A06E                 mov     edx, edi
.text:0040A070                 jmp     short loc_40A040
.text:0040A070 ; ---------------------------------------------------------------------------
.text:0040A072                 align 10h
.text:0040A080 ; const char String[4]
.text:0040A080 String          db ' :/',0              ; DATA XREF: sub_40A090+FA↓o
.text:0040A084                 align 10h
.text:0040A090
.text:0040A090 ; =============== S U B R O U T I N E =======================================
.text:0040A090
.text:0040A090
.text:0040A090 ; int __cdecl sub_40A090(LPCSTR)
.text:0040A090 sub_40A090      proc near               ; CODE XREF: sub_4084E0+E↑p
.text:0040A090                                         ; sub_4089E0+17↑p ...
.text:0040A090
.text:0040A090 Str             = dword ptr -1Ch
.text:0040A090 Val             = dword ptr -18h
.text:0040A090 Count           = dword ptr -14h
.text:0040A090 var_10          = dword ptr -10h
.text:0040A090 var_C           = dword ptr -0Ch
.text:0040A090 var_8           = dword ptr -8
.text:0040A090 var_4           = dword ptr -4
.text:0040A090 arg_0           = dword ptr  4
.text:0040A090
.text:0040A090                 sub     esp, 1Ch
.text:0040A093                 mov     edx, [esp+1Ch+arg_0]
.text:0040A097                 mov     [esp+1Ch+var_8], edi
.text:0040A09B                 mov     [esp+1Ch+var_10], ebx
.text:0040A09F                 mov     [esp+1Ch+var_C], esi
.text:0040A0A3                 mov     [esp+1Ch+var_4], ebp
.text:0040A0A7                 mov     [esp+1Ch+Str], edx ; LPCSTR
.text:0040A0AA                 call    sub_40B0B0
.text:0040A0AF                 test    eax, eax
.text:0040A0B1                 mov     edi, eax
.text:0040A0B3                 jz      short loc_40A0F0
.text:0040A0B5                 mov     [esp+1Ch+Str], eax ; Str
.text:0040A0B8                 call    strlen
.text:0040A0BD                 cmp     eax, 2
.text:0040A0C0                 jbe     short loc_40A0CC
.text:0040A0C2                 cmp     byte ptr [edi+1], 3Ah ; ':'
.text:0040A0C6                 jz      loc_40A180
.text:0040A0CC
.text:0040A0CC loc_40A0CC:                             ; CODE XREF: sub_40A090+30↑j
.text:0040A0CC                                         ; sub_40A090+F4↓j
.text:0040A0CC                 test    edi, edi
.text:0040A0CE                 jz      short loc_40A0F0
.text:0040A0D0                 mov     [esp+1Ch+Str], edi ; Str
.text:0040A0D3                 call    strlen
.text:0040A0D8                 cmp     eax, 4
.text:0040A0DB                 mov     ebp, eax
.text:0040A0DD                 jle     short loc_40A0F0
.text:0040A0DF                 cmp     byte ptr [edi], 2Fh ; '/'
.text:0040A0E2                 jz      short loc_40A110
.text:0040A0E4                 lea     esi, [esi+0]
.text:0040A0EA                 lea     edi, [edi+0]
.text:0040A0F0
.text:0040A0F0 loc_40A0F0:                             ; CODE XREF: sub_40A090+23↑j
.text:0040A0F0                                         ; sub_40A090+3E↑j ...
.text:0040A0F0                 xor     esi, esi
.text:0040A0F2
.text:0040A0F2 loc_40A0F2:                             ; CODE XREF: sub_40A090+CD↓j
.text:0040A0F2                                         ; sub_40A090+115↓j
.text:0040A0F2                 mov     [esp+1Ch+Str], edi ; Block
.text:0040A0F5                 call    free
.text:0040A0FA                 mov     eax, esi
.text:0040A0FC                 mov     ebx, [esp+1Ch+var_10]
.text:0040A100                 mov     esi, [esp+1Ch+var_C]
.text:0040A104                 mov     edi, [esp+1Ch+var_8]
.text:0040A108                 mov     ebp, [esp+1Ch+var_4]
.text:0040A10C                 add     esp, 1Ch
.text:0040A10F                 retn
.text:0040A110 ; ---------------------------------------------------------------------------
.text:0040A110
.text:0040A110 loc_40A110:                             ; CODE XREF: sub_40A090+52↑j
.text:0040A110                 cmp     byte ptr [edi+1], 2Fh ; '/'
.text:0040A114                 jnz     short loc_40A0F0
.text:0040A116                 mov     [esp+1Ch+Val], 2Fh ; '/' ; Val
.text:0040A11E                 lea     ecx, [edi+2]
.text:0040A121                 mov     [esp+1Ch+Str], ecx ; Str
.text:0040A124                 call    strchr
.text:0040A129                 test    eax, eax
.text:0040A12B                 jnz     short loc_40A15F
.text:0040A12D
.text:0040A12D loc_40A12D:                             ; CODE XREF: sub_40A090+E2↓j
.text:0040A12D                 inc     ebp
.text:0040A12E
.text:0040A12E loc_40A12E:                             ; CODE XREF: sub_40A090+E9↓j
.text:0040A12E                 mov     [esp+1Ch+Val], 1 ; Size
.text:0040A136                 lea     ebx, [ebp+1]
.text:0040A139                 mov     [esp+1Ch+Str], ebx ; Count
.text:0040A13C                 call    calloc
.text:0040A141                 mov     [esp+1Ch+Str], eax ; Destination
.text:0040A144                 mov     esi, eax
.text:0040A146                 mov     [esp+1Ch+Count], ebx ; Count
.text:0040A14A                 mov     [esp+1Ch+Val], edi ; Source
.text:0040A14E                 call    strncpy
.text:0040A153                 mov     byte ptr [ebp+esi-1], 2Fh ; '/'
.text:0040A158                 mov     byte ptr [ebp+esi+0], 0
.text:0040A15D                 jmp     short loc_40A0F2
.text:0040A15F ; ---------------------------------------------------------------------------
.text:0040A15F
.text:0040A15F loc_40A15F:                             ; CODE XREF: sub_40A090+9B↑j
.text:0040A15F                 mov     [esp+1Ch+Val], 2Fh ; '/' ; Val
.text:0040A167                 inc     eax
.text:0040A168                 mov     [esp+1Ch+Str], eax ; Str
.text:0040A16B                 call    strchr
.text:0040A170                 test    eax, eax
.text:0040A172                 jz      short loc_40A12D
.text:0040A174                 sub     eax, edi
.text:0040A176                 lea     ebp, [eax+1]
.text:0040A179                 jmp     short loc_40A12E
.text:0040A179 ; ---------------------------------------------------------------------------
.text:0040A17B                 align 10h
.text:0040A180
.text:0040A180 loc_40A180:                             ; CODE XREF: sub_40A090+36↑j
.text:0040A180                 cmp     byte ptr [edi+2], 2Fh ; '/'
.text:0040A184                 jnz     loc_40A0CC
.text:0040A18A                 mov     [esp+1Ch+Str], offset String ; " :/"
.text:0040A191                 call    _strdup
.text:0040A196                 movsx   edx, byte ptr [edi]
.text:0040A199                 mov     esi, eax
.text:0040A19B                 mov     [esp+1Ch+Str], edx ; C
.text:0040A19E                 call    toupper
.text:0040A1A3                 mov     [esi], al
.text:0040A1A5                 jmp     loc_40A0F2
.text:0040A1A5 sub_40A090      endp
.text:0040A1A5
.text:0040A1A5 ; ---------------------------------------------------------------------------
.text:0040A1AA                 align 10h
.text:0040A1B0
.text:0040A1B0 ; =============== S U B R O U T I N E =======================================
.text:0040A1B0
.text:0040A1B0
.text:0040A1B0 sub_40A1B0      proc near               ; CODE XREF: .text:0040A304↓p
.text:0040A1B0                                         ; .text:0040A3E8↓p
.text:0040A1B0
.text:0040A1B0 Str             = dword ptr -2Ch
.text:0040A1B0 Val             = dword ptr -28h
.text:0040A1B0 var_18          = dword ptr -18h
.text:0040A1B0 var_11          = byte ptr -11h
.text:0040A1B0 arg_0           = dword ptr  4
.text:0040A1B0
.text:0040A1B0                 push    ebp
.text:0040A1B1                 push    edi
.text:0040A1B2                 push    esi
.text:0040A1B3                 push    ebx
.text:0040A1B4                 sub     esp, 1Ch
.text:0040A1B7                 mov     edx, [esp+2Ch+arg_0]
.text:0040A1BB                 cmp     edx, ds:dword_412240
.text:0040A1C1                 mov     [esp+2Ch+var_11], 0
.text:0040A1C6                 jz      loc_40A2C4
.text:0040A1CC                 mov     ebx, ds:dword_412230
.text:0040A1D2                 test    ebx, ebx
.text:0040A1D4                 jz      short loc_40A242
.text:0040A1D6
.text:0040A1D6 loc_40A1D6:                             ; CODE XREF: sub_40A1B0+10F↓j
.text:0040A1D6                 mov     ebx, [esp+2Ch+arg_0]
.text:0040A1DA                 xor     edi, edi
.text:0040A1DC                 xor     esi, esi
.text:0040A1DE                 mov     ebp, offset dword_412258
.text:0040A1E3                 lea     esi, [esi+0]
.text:0040A1E9                 lea     edi, [edi+0]
.text:0040A1F0
.text:0040A1F0 loc_40A1F0:                             ; CODE XREF: sub_40A1B0+60↓j
.text:0040A1F0                 mov     edx, [ebp+4]
.text:0040A1F3                 mov     ecx, edi
.text:0040A1F5                 mov     eax, [ebp+0]
.text:0040A1F8                 shl     ecx, 4
.text:0040A1FB                 mov     [esp+2Ch+var_18], ecx
.text:0040A1FF                 mov     ecx, edx
.text:0040A201                 xor     eax, ebx
.text:0040A203                 xor     ecx, esi
.text:0040A205                 or      ecx, eax
.text:0040A207                 jz      short loc_40A231
.text:0040A209                 inc     edi
.text:0040A20A                 add     ebp, 10h
.text:0040A20D                 cmp     edi, 20h ; ' '
.text:0040A210                 jle     short loc_40A1F0
.text:0040A212
.text:0040A212 loc_40A212:                             ; CODE XREF: sub_40A1B0+90↓j
.text:0040A212                 movzx   ebx, [esp+2Ch+var_11]
.text:0040A217                 mov     eax, [esp+2Ch+arg_0]
.text:0040A21B                 mov     byte_411070, bl
.text:0040A221                 mov     ds:dword_412240, eax
.text:0040A226                 movsx   eax, bl
.text:0040A229
.text:0040A229 loc_40A229:                             ; CODE XREF: sub_40A1B0+11B↓j
.text:0040A229                 add     esp, 1Ch
.text:0040A22C                 pop     ebx
.text:0040A22D                 pop     esi
.text:0040A22E                 pop     edi
.text:0040A22F                 pop     ebp
.text:0040A230                 retn
.text:0040A231 ; ---------------------------------------------------------------------------
.text:0040A231
.text:0040A231 loc_40A231:                             ; CODE XREF: sub_40A1B0+57↑j
.text:0040A231                 mov     edx, [esp+2Ch+var_18]
.text:0040A235                 movzx   eax, byte ptr ds:dword_412250[edx]
.text:0040A23C                 mov     [esp+2Ch+var_11], al
.text:0040A240                 jmp     short loc_40A212
.text:0040A242 ; ---------------------------------------------------------------------------
.text:0040A242
.text:0040A242 loc_40A242:                             ; CODE XREF: sub_40A1B0+24↑j
.text:0040A242                 mov     [esp+2Ch+Str], 0
.text:0040A249                 call    sub_40C920
.text:0040A24E                 test    eax, eax
.text:0040A250                 mov     ebx, eax
.text:0040A252                 jz      short loc_40A2AC
.text:0040A254                 movzx   ecx, byte ptr [eax]
.text:0040A257                 mov     esi, 0FFFFFFF0h
.text:0040A25C                 test    cl, cl
.text:0040A25E                 jz      short loc_40A2AC
.text:0040A260
.text:0040A260 loc_40A260:                             ; CODE XREF: sub_40A1B0+FA↓j
.text:0040A260                 mov     [esp+2Ch+Str], ebx ; LPCSTR
.text:0040A263                 movsx   ebp, cl
.text:0040A266                 add     esi, 10h
.text:0040A269                 mov     ds:dword_412250[esi], ebp
.text:0040A26F                 mov     edi, ebp
.text:0040A271                 sar     edi, 1Fh
.text:0040A274                 mov     ds:dword_412254[esi], edi
.text:0040A27A                 call    sub_4089E0
.text:0040A27F                 mov     ds:dword_412258[esi], eax
.text:0040A285                 xor     ecx, ecx
.text:0040A287                 mov     [esp+2Ch+Str], ebx ; Str
.text:0040A28A                 mov     ds:dword_41225C[esi], ecx
.text:0040A290                 mov     [esp+2Ch+Val], 0 ; Val
.text:0040A298                 call    strchr
.text:0040A29D                 mov     ebx, eax
.text:0040A29F                 inc     ebx
.text:0040A2A0                 jz      short loc_40A2AC
.text:0040A2A2                 movzx   edx, byte ptr [eax+1]
.text:0040A2A6                 test    dl, dl
.text:0040A2A8                 mov     cl, dl
.text:0040A2AA                 jnz     short loc_40A260
.text:0040A2AC
.text:0040A2AC loc_40A2AC:                             ; CODE XREF: sub_40A1B0+A2↑j
.text:0040A2AC                                         ; sub_40A1B0+AE↑j ...
.text:0040A2AC                 mov     [esp+2Ch+Str], ebx ; Block
.text:0040A2AF                 mov     esi, 1
.text:0040A2B4                 mov     ds:dword_412230, esi
.text:0040A2BA                 call    free
.text:0040A2BF                 jmp     loc_40A1D6
.text:0040A2C4 ; ---------------------------------------------------------------------------
.text:0040A2C4
.text:0040A2C4 loc_40A2C4:                             ; CODE XREF: sub_40A1B0+16↑j
.text:0040A2C4                 movsx   eax, byte_411070
.text:0040A2CB                 jmp     loc_40A229
.text:0040A2CB sub_40A1B0      endp
.text:0040A2CB
.text:0040A2CB ; ---------------------------------------------------------------------------
.text:0040A2D0 dword_40A2D0    dd 5C3A20h, 5C3A43h, 26B48D90h, 0
.text:0040A2D0                                         ; DATA XREF: .text:0040A2F3↓o
.text:0040A2D0                                         ; .text:0040A3D3↓o
.text:0040A2E0 ; ---------------------------------------------------------------------------
.text:0040A2E0                 sub     esp, 1Ch
.text:0040A2E3                 mov     [esp+14h], esi
.text:0040A2E7                 mov     esi, [esp+20h]
.text:0040A2EB                 mov     [esp+18h], edi
.text:0040A2EF                 mov     [esp+10h], ebx
.text:0040A2F3                 mov     dword ptr [esp], offset dword_40A2D0
.text:0040A2FA                 call    _strdup
.text:0040A2FF                 mov     [esp], esi
.text:0040A302                 mov     edi, eax
.text:0040A304                 call    sub_40A1B0
.text:0040A309                 mov     [edi], al
.text:0040A30B                 test    al, al
.text:0040A30D                 jz      short loc_40A321
.text:0040A30F                 mov     eax, edi
.text:0040A311                 mov     ebx, [esp+10h]
.text:0040A315                 mov     esi, [esp+14h]
.text:0040A319                 mov     edi, [esp+18h]
.text:0040A31D                 add     esp, 1Ch
.text:0040A320                 retn
.text:0040A321 ; ---------------------------------------------------------------------------
.text:0040A321
.text:0040A321 loc_40A321:                             ; CODE XREF: .text:0040A30D↑j
.text:0040A321                 mov     [esp], edi
.text:0040A324                 call    free
.text:0040A329                 mov     dword ptr [esp+4], 0
.text:0040A331                 mov     dword ptr [esp], 0
.text:0040A338                 call    GetCurrentDirectoryA
.text:0040A33D                 sub     esp, 8
.text:0040A340                 lea     esi, [eax+1]
.text:0040A343                 mov     [esp], esi
.text:0040A346                 call    malloc
.text:0040A34B                 mov     [esp+4], eax
.text:0040A34F                 mov     edi, eax
.text:0040A351                 mov     [esp], esi
.text:0040A354                 call    GetCurrentDirectoryA
.text:0040A359                 sub     esp, 8
.text:0040A35C                 test    eax, eax
.text:0040A35E                 jnz     short loc_40A380
.text:0040A360                 mov     dword ptr [esp+20h], 40A2D4h
.text:0040A368                 mov     ebx, [esp+10h]
.text:0040A36C                 mov     esi, [esp+14h]
.text:0040A370                 mov     edi, [esp+18h]
.text:0040A374                 add     esp, 1Ch
.text:0040A377                 jmp     _strdup
.text:0040A377 ; ---------------------------------------------------------------------------
.text:0040A37C                 align 10h
.text:0040A380
.text:0040A380 loc_40A380:                             ; CODE XREF: .text:0040A35E↑j
.text:0040A380                 mov     [esp+20h], edi
.text:0040A384                 mov     ebx, [esp+10h]
.text:0040A388                 mov     esi, [esp+14h]
.text:0040A38C                 mov     edi, [esp+18h]
.text:0040A390                 add     esp, 1Ch
.text:0040A393                 jmp     sub_40A090
.text:0040A393 ; ---------------------------------------------------------------------------
.text:0040A398                 align 10h
.text:0040A3A0                 sub     esp, 7Ch
.text:0040A3A3                 lea     edx, [esp+10h]
.text:0040A3A7                 mov     [esp+8], edx
.text:0040A3AB                 mov     edx, [esp+80h]
.text:0040A3B2                 mov     [esp+70h], ebx
.text:0040A3B6                 mov     [esp+74h], esi
.text:0040A3BA                 mov     [esp+4], edx
.text:0040A3BE                 mov     [esp+78h], edi
.text:0040A3C2                 mov     dword ptr [esp], 0
.text:0040A3C9                 call    sub_407C30
.text:0040A3CE                 xor     edx, edx
.text:0040A3D0                 inc     eax
.text:0040A3D1                 jz      short loc_40A3F5
.text:0040A3D3                 mov     dword ptr [esp], offset dword_40A2D0
.text:0040A3DA                 mov     esi, [esp+20h]
.text:0040A3DE                 call    _strdup
.text:0040A3E3                 mov     edi, eax
.text:0040A3E5                 mov     [esp], esi
.text:0040A3E8                 call    sub_40A1B0
.text:0040A3ED                 mov     [edi], al
.text:0040A3EF                 test    al, al
.text:0040A3F1                 mov     edx, edi
.text:0040A3F3                 jz      short loc_40A407
.text:0040A3F5
.text:0040A3F5 loc_40A3F5:                             ; CODE XREF: .text:0040A3D1↑j
.text:0040A3F5                                         ; .text:0040A454↓j
.text:0040A3F5                 mov     ebx, [esp+70h]
.text:0040A3F9                 mov     eax, edx
.text:0040A3FB                 mov     esi, [esp+74h]
.text:0040A3FF                 mov     edi, [esp+78h]
.text:0040A403                 add     esp, 7Ch
.text:0040A406                 retn
.text:0040A407 ; ---------------------------------------------------------------------------
.text:0040A407
.text:0040A407 loc_40A407:                             ; CODE XREF: .text:0040A3F3↑j
.text:0040A407                 mov     [esp], edi
.text:0040A40A                 call    free
.text:0040A40F                 mov     dword ptr [esp+4], 0
.text:0040A417                 mov     dword ptr [esp], 0
.text:0040A41E                 call    GetCurrentDirectoryA
.text:0040A423                 sub     esp, 8
.text:0040A426                 lea     esi, [eax+1]
.text:0040A429                 mov     [esp], esi
.text:0040A42C                 call    malloc
.text:0040A431                 mov     [esp+4], eax
.text:0040A435                 mov     edi, eax
.text:0040A437                 mov     [esp], esi
.text:0040A43A                 call    GetCurrentDirectoryA
.text:0040A43F                 sub     esp, 8
.text:0040A442                 test    eax, eax
.text:0040A444                 jnz     short loc_40A456
.text:0040A446                 mov     dword ptr [esp], 40A2D4h
.text:0040A44D                 call    _strdup
.text:0040A452
.text:0040A452 loc_40A452:                             ; CODE XREF: .text:0040A45E↓j
.text:0040A452                 mov     edx, eax
.text:0040A454                 jmp     short loc_40A3F5
.text:0040A456 ; ---------------------------------------------------------------------------
.text:0040A456
.text:0040A456 loc_40A456:                             ; CODE XREF: .text:0040A444↑j
.text:0040A456                 mov     [esp], edi
.text:0040A459                 call    sub_40A090
.text:0040A45E                 jmp     short loc_40A452
.text:0040A460
.text:0040A460 ; =============== S U B R O U T I N E =======================================
.text:0040A460
.text:0040A460
.text:0040A460 ; int __cdecl sub_40A460(LPCSTR)
.text:0040A460 sub_40A460      proc near               ; CODE XREF: sub_407C30+38F↑p
.text:0040A460
.text:0040A460 String1         = dword ptr -1Ch
.text:0040A460 String2         = dword ptr -18h
.text:0040A460 var_C           = dword ptr -0Ch
.text:0040A460 var_8           = dword ptr -8
.text:0040A460 var_4           = dword ptr -4
.text:0040A460 arg_0           = dword ptr  4
.text:0040A460
.text:0040A460                 sub     esp, 1Ch
.text:0040A463                 mov     [esp+1Ch+var_4], edi
.text:0040A467                 mov     edi, [esp+1Ch+arg_0]
.text:0040A46B                 mov     [esp+1Ch+var_C], ebx
.text:0040A46F                 mov     [esp+1Ch+var_8], esi
.text:0040A473                 mov     [esp+1Ch+String1], edi ; LPCSTR
.text:0040A476                 call    sub_40B0B0
.text:0040A47B                 mov     [esp+1Ch+String1], edi ; LPCSTR
.text:0040A47E                 mov     esi, eax
.text:0040A480                 call    sub_40A090
.text:0040A485                 mov     [esp+1Ch+String2], eax ; String2
.text:0040A489                 mov     ebx, eax
.text:0040A48B                 mov     [esp+1Ch+String1], esi ; String1
.text:0040A48E                 call    _stricmp
.text:0040A493                 test    eax, eax
.text:0040A495                 setz    dl
.text:0040A498                 test    esi, esi
.text:0040A49A                 movzx   edi, dl
.text:0040A49D                 jz      short loc_40A4A7
.text:0040A49F                 mov     [esp+1Ch+String1], esi ; Block
.text:0040A4A2                 call    free
.text:0040A4A7
.text:0040A4A7 loc_40A4A7:                             ; CODE XREF: sub_40A460+3D↑j
.text:0040A4A7                 test    ebx, ebx
.text:0040A4A9                 jz      short loc_40A4B3
.text:0040A4AB                 mov     [esp+1Ch+String1], ebx ; Block
.text:0040A4AE                 call    free
.text:0040A4B3
.text:0040A4B3 loc_40A4B3:                             ; CODE XREF: sub_40A460+49↑j
.text:0040A4B3                 mov     eax, edi
.text:0040A4B5                 mov     ebx, [esp+1Ch+var_C]
.text:0040A4B9                 mov     esi, [esp+1Ch+var_8]
.text:0040A4BD                 mov     edi, [esp+1Ch+var_4]
.text:0040A4C1                 add     esp, 1Ch
.text:0040A4C4                 retn
.text:0040A4C4 sub_40A460      endp
.text:0040A4C4
.text:0040A4C4 ; ---------------------------------------------------------------------------
.text:0040A4C5                 align 10h
.text:0040A4D0 aKernel32_0     db 'KERNEL32',0         ; DATA XREF: .text:0040A521↓o
.text:0040A4D9 aGetdiskfreespa db 'GetDiskFreeSpaceExA',0
.text:0040A4D9                                         ; DATA XREF: .text:0040A532↓o
.text:0040A4ED ; const CHAR aVwin32[]
.text:0040A4ED aVwin32         db '\\.\vwin32',0       ; DATA XREF: .text:0040A67C↓o
.text:0040A4ED                                         ; sub_40AAB0+17C↓o
.text:0040A4F8 ; ---------------------------------------------------------------------------
.text:0040A4F8
.text:0040A4F8 loc_40A4F8:                             ; DATA XREF: .text:0040A792↓o
.text:0040A4F8                 dec     esi
.text:0040A4F9                 push    esp
.text:0040A4FA                 inc     esi
.text:0040A4FB                 push    ebx
.text:0040A4FC                 add     [esi+41h], al
.text:0040A4FF                 push    esp
.text:0040A500                 xor     esi, [edx]
.text:0040A502                 add     [esi+41h], al
.text:0040A505                 push    esp
.text:0040A506                 add     [ebx+44h], al
.text:0040A509                 inc     esi
.text:0040A50A                 push    ebx
.text:0040A50B
.text:0040A50B loc_40A50B:                             ; CODE XREF: sub_40AAB0+101↓p
.text:0040A50B                 add     [ebp+55002674h], cl
.text:0040A511                 push    edi
.text:0040A512                 push    esi
.text:0040A513                 push    ebx
.text:0040A514                 sub     esp, 8BCh
.text:0040A51A                 mov     ebp, [esp+8D0h]
.text:0040A521                 mov     dword ptr [esp], offset aKernel32_0 ; "KERNEL32"
.text:0040A528                 call    LoadLibraryA
.text:0040A52D                 sub     esp, 4
.text:0040A530                 mov     edi, eax
.text:0040A532                 mov     dword ptr [esp+4], offset aGetdiskfreespa ; "GetDiskFreeSpaceExA"
.text:0040A53A                 mov     [esp], eax
.text:0040A53D                 call    GetProcAddress
.text:0040A542                 sub     esp, 8
.text:0040A545                 mov     esi, eax
.text:0040A547                 test    ebp, ebp
.text:0040A549                 mov     dword ptr [esp+20h], 0
.text:0040A551                 jz      loc_40AA91
.text:0040A557                 mov     [esp], ebp
.text:0040A55A                 call    sub_409C60
.text:0040A55F                 mov     [esp], eax
.text:0040A562                 mov     ebp, eax
.text:0040A564                 call    strlen
.text:0040A569                 cmp     byte ptr [eax+ebp-1], 5Ch ; '\'
.text:0040A56E                 mov     ebx, eax
.text:0040A570                 jz      short loc_40A58C
.text:0040A572                 mov     [esp], ebp
.text:0040A575                 lea     edx, [eax+1]
.text:0040A578                 mov     [esp+4], edx
.text:0040A57C                 call    realloc
.text:0040A581                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:0040A585                 mov     ebp, eax
.text:0040A587                 mov     byte ptr [ebx+eax+1], 0
.text:0040A58C
.text:0040A58C loc_40A58C:                             ; CODE XREF: .text:0040A570↑j
.text:0040A58C                 mov     dword ptr [esp+1Ch], 400h
.text:0040A594                 lea     edx, [esp+0B0h]
.text:0040A59B                 lea     ebx, [esp+5Ch]
.text:0040A59F                 mov     [esp+18h], edx
.text:0040A5A3                 lea     ecx, [esp+58h]
.text:0040A5A7                 lea     edx, [esp+54h]
.text:0040A5AB                 mov     [esp+14h], ebx
.text:0040A5AF                 lea     eax, [esp+4B0h]
.text:0040A5B6                 mov     [esp+10h], ecx
.text:0040A5BA                 mov     [esp+0Ch], edx
.text:0040A5BE                 mov     dword ptr [esp+8], 400h
.text:0040A5C6                 mov     [esp+4], eax
.text:0040A5CA                 mov     [esp], ebp
.text:0040A5CD                 call    GetVolumeInformationA
.text:0040A5D2                 sub     esp, 20h
.text:0040A5D5                 test    eax, eax
.text:0040A5D7                 jz      loc_40AA6E
.text:0040A5DD                 test    esi, esi
.text:0040A5DF                 jz      short loc_40A605
.text:0040A5E1                 mov     [esp], ebp
.text:0040A5E4                 lea     edx, [esp+48h]
.text:0040A5E8                 lea     ebx, [esp+40h]
.text:0040A5EC                 mov     [esp+0Ch], edx
.text:0040A5F0                 lea     ecx, [esp+38h]
.text:0040A5F4                 mov     [esp+8], ebx
.text:0040A5F8                 mov     [esp+4], ecx
.text:0040A5FC                 call    esi
.text:0040A5FE                 sub     esp, 10h
.text:0040A601                 mov     [esp+20h], eax
.text:0040A605
.text:0040A605 loc_40A605:                             ; CODE XREF: .text:0040A5DF↑j
.text:0040A605                 test    edi, edi
.text:0040A607                 jz      short loc_40A614
.text:0040A609                 mov     [esp], edi
.text:0040A60C                 call    FreeLibrary
.text:0040A611                 sub     esp, 4
.text:0040A614
.text:0040A614 loc_40A614:                             ; CODE XREF: .text:0040A607↑j
.text:0040A614                 call    sub_40BB40
.text:0040A619                 test    eax, eax
.text:0040A61B                 lea     esi, [esp+28h]
.text:0040A61F                 jz      loc_40AA50
.text:0040A625                 call    sub_40BB40
.text:0040A62A                 test    eax, eax
.text:0040A62C                 jz      short loc_40A63C
.text:0040A62E                 call    sub_40BA90
.text:0040A633                 cmp     eax, 0Bh
.text:0040A636                 jle     loc_40AA24
.text:0040A63C
.text:0040A63C loc_40A63C:                             ; CODE XREF: .text:0040A62C↑j
.text:0040A63C                 cld
.text:0040A63D                 xor     eax, eax
.text:0040A63F                 lea     ebx, [esp+60h]
.text:0040A643                 mov     ecx, 7
.text:0040A648                 mov     edi, ebx
.text:0040A64A                 rep stosd
.text:0040A64C                 mov     dword ptr [esp+18h], 0
.text:0040A654                 mov     dword ptr [esp+14h], 4000000h
.text:0040A65C                 mov     dword ptr [esp+10h], 0
.text:0040A664                 mov     dword ptr [esp+0Ch], 0
.text:0040A66C                 mov     dword ptr [esp+8], 0
.text:0040A674                 mov     dword ptr [esp+4], 0
.text:0040A67C                 mov     dword ptr [esp], offset aVwin32 ; "\\\\.\\vwin32"
.text:0040A683                 call    CreateFileA
.text:0040A688                 sub     esp, 1Ch
.text:0040A68B                 mov     edi, eax
.text:0040A68D                 cmp     eax, 0FFFFFFFFh
.text:0040A690                 jz      short loc_40A710
.text:0040A692                 mov     [esp+10h], ebx
.text:0040A696                 lea     edx, [esp+80h]
.text:0040A69D                 lea     ecx, [esp+24h]
.text:0040A6A1                 mov     [esp+70h], edx
.text:0040A6A5                 mov     [esp+18h], ecx
.text:0040A6A9                 mov     [esp+8], ebx
.text:0040A6AD                 mov     dword ptr [esp+6Ch], 7303h
.text:0040A6B5                 mov     dword ptr [esp+68h], 2Ch ; ','
.text:0040A6BD                 mov     [esp+64h], ebp
.text:0040A6C1                 mov     dword ptr [esp+78h], 1
.text:0040A6C9                 mov     dword ptr [esp+1Ch], 0
.text:0040A6D1                 mov     dword ptr [esp+14h], 1Ch
.text:0040A6D9                 mov     dword ptr [esp+0Ch], 1Ch
.text:0040A6E1                 mov     dword ptr [esp+4], 6
.text:0040A6E9                 mov     [esp], eax
.text:0040A6EC                 call    DeviceIoControl
.text:0040A6F1                 sub     esp, 20h
.text:0040A6F4                 mov     ebx, eax
.text:0040A6F6                 mov     [esp], edi
.text:0040A6F9                 call    CloseHandle
.text:0040A6FE                 sub     esp, 4
.text:0040A701                 test    ebx, ebx
.text:0040A703                 jz      short loc_40A710
.text:0040A705                 test    byte ptr [esp+78h], 1
.text:0040A70A                 jz      loc_40A9F0
.text:0040A710
.text:0040A710 loc_40A710:                             ; CODE XREF: .text:0040A690↑j
.text:0040A710                                         ; .text:0040A703↑j
.text:0040A710                 call    sub_40B060
.text:0040A715                 mov     edi, eax
.text:0040A717                 call    _errno
.text:0040A71C                 mov     [eax], edi
.text:0040A71E                 xor     eax, eax
.text:0040A720
.text:0040A720 loc_40A720:                             ; CODE XREF: .text:0040AA1F↓j
.text:0040A720                                         ; .text:0040AA4B↓j
.text:0040A720                 test    eax, eax
.text:0040A722                 jnz     short loc_40A744
.text:0040A724                 mov     dword ptr [esp+34h], 1
.text:0040A72C                 mov     dword ptr [esp+30h], 200h
.text:0040A734                 mov     dword ptr [esp+2Ch], 0
.text:0040A73C                 mov     dword ptr [esp+28h], 0
.text:0040A744
.text:0040A744 loc_40A744:                             ; CODE XREF: .text:0040A722↑j
.text:0040A744                 mov     edx, [esp+30h]
.text:0040A748                 mov     edi, [esp+34h]
.text:0040A74C                 mov     ecx, [esp+20h]
.text:0040A750                 imul    edi, edx
.text:0040A753                 test    ecx, ecx
.text:0040A755                 jnz     short loc_40A77D
.text:0040A757                 mov     eax, [esp+28h]
.text:0040A75B                 mul     edi
.text:0040A75D                 mov     esi, eax
.text:0040A75F                 mov     eax, [esp+2Ch]
.text:0040A763                 mov     [esp+44h], edx
.text:0040A767                 mov     [esp+40h], esi
.text:0040A76B                 mul     edi
.text:0040A76D                 mov     [esp+48h], eax
.text:0040A771                 mov     [esp+4Ch], edx
.text:0040A775                 mov     [esp+38h], eax
.text:0040A779                 mov     [esp+3Ch], edx
.text:0040A77D
.text:0040A77D loc_40A77D:                             ; CODE XREF: .text:0040A755↑j
.text:0040A77D                 mov     ebx, [esp+5Ch]
.text:0040A781                 lea     edx, [esp+0B0h]
.text:0040A788                 mov     ecx, [esp+8D4h]
.text:0040A78F                 mov     [ecx+48h], ebx
.text:0040A792                 mov     dword ptr [esp+4], offset loc_40A4F8
.text:0040A79A                 mov     [esp], edx
.text:0040A79D                 call    _stricmp
.text:0040A7A2                 test    eax, eax
.text:0040A7A4                 jnz     loc_40A960
.text:0040A7AA                 mov     esi, [esp+8D4h]
.text:0040A7B1                 mov     dword ptr [esi], 5346544Eh
.text:0040A7B7
.text:0040A7B7 loc_40A7B7:                             ; CODE XREF: .text:0040A988↓j
.text:0040A7B7                                         ; .text:0040A9B5↓j ...
.text:0040A7B7                 mov     ebx, [esp+30h]
.text:0040A7BB                 mov     esi, [esp+8D4h]
.text:0040A7C2                 mov     [esi+4], ebx
.text:0040A7C5                 mov     [esi+8], ebx
.text:0040A7C8                 mov     ebx, [esi+8]
.text:0040A7CB                 mov     [esi+0Ch], edi
.text:0040A7CE                 mov     ecx, [esp+44h]
.text:0040A7D2                 xor     esi, esi
.text:0040A7D4                 mov     [esp+8], ebx
.text:0040A7D8                 mov     edx, [esp+40h]
.text:0040A7DC                 mov     [esp+0Ch], esi
.text:0040A7E0                 mov     [esp+4], ecx
.text:0040A7E4                 mov     [esp], edx
.text:0040A7E7                 call    sub_40F270
.text:0040A7EC                 mov     ecx, [esp+8D4h]
.text:0040A7F3                 mov     [ecx+10h], eax
.text:0040A7F6                 mov     [ecx+14h], edx
.text:0040A7F9                 mov     ecx, [esp+4Ch]
.text:0040A7FD                 mov     [esp+8], ebx
.text:0040A801                 mov     edx, [esp+48h]
.text:0040A805                 mov     [esp+0Ch], esi
.text:0040A809                 mov     [esp+4], ecx
.text:0040A80D                 mov     [esp], edx
.text:0040A810                 call    sub_40F270
.text:0040A815                 mov     ecx, [esp+8D4h]
.text:0040A81C                 mov     [ecx+18h], eax
.text:0040A81F                 mov     [ecx+1Ch], edx
.text:0040A822                 mov     ecx, [esp+38h]
.text:0040A826                 mov     [esp+8], ebx
.text:0040A82A                 mov     ebx, [esp+3Ch]
.text:0040A82E                 mov     [esp+0Ch], esi
.text:0040A832                 mov     [esp], ecx
.text:0040A835                 mov     [esp+4], ebx
.text:0040A839                 call    sub_40F270
.text:0040A83E                 mov     esi, [esp+8D4h]
.text:0040A845                 mov     [esi+20h], eax
.text:0040A848                 mov     [esi+24h], edx
.text:0040A84B                 mov     ecx, [esp+44h]
.text:0040A84F                 mov     esi, edi
.text:0040A851                 mov     [esp+8], esi
.text:0040A855                 mov     edx, [esp+40h]
.text:0040A859                 xor     edi, edi
.text:0040A85B                 mov     [esp+0Ch], edi
.text:0040A85F                 mov     [esp+4], ecx
.text:0040A863                 mov     [esp], edx
.text:0040A866                 call    sub_40F270
.text:0040A86B                 mov     ebx, [esp+8D4h]
.text:0040A872                 mov     [ebx+28h], eax
.text:0040A875                 mov     [ebx+2Ch], edx
.text:0040A878                 mov     ecx, [esp+4Ch]
.text:0040A87C                 mov     [esp+8], esi
.text:0040A880                 mov     edx, [esp+48h]
.text:0040A884                 mov     [esp+0Ch], edi
.text:0040A888                 mov     [esp+4], ecx
.text:0040A88C                 mov     [esp], edx
.text:0040A88F                 call    sub_40F270
.text:0040A894                 mov     ebx, [esp+8D4h]
.text:0040A89B                 mov     [ebx+30h], eax
.text:0040A89E                 mov     [ebx+34h], edx
.text:0040A8A1                 mov     ecx, [esp+3Ch]
.text:0040A8A5                 mov     [esp+8], esi
.text:0040A8A9                 mov     edx, [esp+38h]
.text:0040A8AD                 mov     [esp+0Ch], edi
.text:0040A8B1                 mov     [esp+4], ecx
.text:0040A8B5                 mov     [esp], edx
.text:0040A8B8                 call    sub_40F270
.text:0040A8BD                 mov     edx, [esp+8D4h]
.text:0040A8C4                 lea     ecx, [esp+0B0h]
.text:0040A8CB                 mov     [edx+38h], eax
.text:0040A8CE                 mov     esi, [esp+58h]
.text:0040A8D2                 mov     dword ptr [edx+44h], 0FFFFFFFFh
.text:0040A8D9                 mov     [edx+110h], esi
.text:0040A8DF                 mov     esi, edx
.text:0040A8E1                 add     esi, 4Ch ; 'L'
.text:0040A8E4                 movzx   ebx, word ptr [esp+56h]
.text:0040A8E9                 movzx   edi, word ptr [esp+54h]
.text:0040A8EE                 mov     [edx+3Ch], ebx
.text:0040A8F1                 lea     ebx, [esp+4B0h]
.text:0040A8F8                 mov     [edx+40h], edi
.text:0040A8FB                 mov     [esp+4], ecx
.text:0040A8FF                 mov     dword ptr [esp+8], 10h
.text:0040A907                 mov     [esp], esi
.text:0040A90A                 call    strncpy
.text:0040A90F                 mov     dword ptr [esp+8], 5Ah ; 'Z'
.text:0040A917                 mov     edi, [esp+8D4h]
.text:0040A91E                 mov     [esp+4], ebx
.text:0040A922                 add     edi, 5Ch ; '\'
.text:0040A925                 mov     [esp], edi
.text:0040A928                 call    strncpy
.text:0040A92D                 mov     [esp+4], ebp
.text:0040A931                 mov     ebp, [esp+8D4h]
.text:0040A938                 mov     dword ptr [esp+8], 5Ah ; 'Z'
.text:0040A940                 add     ebp, 0B6h ; '¶'
.text:0040A946                 mov     [esp], ebp
.text:0040A949                 call    strncpy
.text:0040A94E                 xor     eax, eax
.text:0040A950
.text:0040A950 loc_40A950:                             ; CODE XREF: .text:0040AA8C↓j
.text:0040A950                 add     esp, 8BCh
.text:0040A956                 pop     ebx
.text:0040A957                 pop     esi
.text:0040A958                 pop     edi
.text:0040A959                 pop     ebp
.text:0040A95A                 retn
.text:0040A95A ; ---------------------------------------------------------------------------
.text:0040A95B                 align 10h
.text:0040A960
.text:0040A960 loc_40A960:                             ; CODE XREF: .text:0040A7A4↑j
.text:0040A960                 mov     dword ptr [esp+4], 40A4FDh
.text:0040A968                 lea     eax, [esp+0B0h]
.text:0040A96F                 mov     [esp], eax
.text:0040A972                 call    _stricmp
.text:0040A977                 test    eax, eax
.text:0040A979                 jnz     short loc_40A98D
.text:0040A97B                 mov     edx, [esp+8D4h]
.text:0040A982                 mov     dword ptr [edx], 4008h
.text:0040A988                 jmp     loc_40A7B7
.text:0040A98D ; ---------------------------------------------------------------------------
.text:0040A98D
.text:0040A98D loc_40A98D:                             ; CODE XREF: .text:0040A979↑j
.text:0040A98D                 mov     dword ptr [esp+4], 40A503h
.text:0040A995                 lea     ecx, [esp+0B0h]
.text:0040A99C                 mov     [esp], ecx
.text:0040A99F                 call    _stricmp
.text:0040A9A4                 test    eax, eax
.text:0040A9A6                 jnz     short loc_40A9BA
.text:0040A9A8                 mov     ebx, [esp+8D4h]
.text:0040A9AF                 mov     dword ptr [ebx], 4006h
.text:0040A9B5                 jmp     loc_40A7B7
.text:0040A9BA ; ---------------------------------------------------------------------------
.text:0040A9BA
.text:0040A9BA loc_40A9BA:                             ; CODE XREF: .text:0040A9A6↑j
.text:0040A9BA                 mov     dword ptr [esp+4], 40A507h
.text:0040A9C2                 lea     eax, [esp+0B0h]
.text:0040A9C9                 mov     [esp], eax
.text:0040A9CC                 call    _stricmp
.text:0040A9D1                 test    eax, eax
.text:0040A9D3                 mov     esi, [esp+8D4h]
.text:0040A9DA                 setnz   cl
.text:0040A9DD                 movzx   edx, cl
.text:0040A9E0                 dec     edx
.text:0040A9E1                 and     edx, 4000h
.text:0040A9E7                 mov     [esi], edx
.text:0040A9E9                 jmp     loc_40A7B7
.text:0040A9E9 ; ---------------------------------------------------------------------------
.text:0040A9EE                 align 10h
.text:0040A9F0
.text:0040A9F0 loc_40A9F0:                             ; CODE XREF: .text:0040A70A↑j
.text:0040A9F0                 mov     edi, [esp+84h]
.text:0040A9F7                 mov     eax, 1
.text:0040A9FC                 mov     edx, [esp+88h]
.text:0040AA03                 mov     ecx, [esp+8Ch]
.text:0040AA0A                 mov     ebx, [esp+90h]
.text:0040AA11                 mov     [esp+34h], edi
.text:0040AA15                 mov     [esp+30h], edx
.text:0040AA19                 mov     [esp+2Ch], ecx
.text:0040AA1D                 mov     [esi], ebx
.text:0040AA1F                 jmp     loc_40A720
.text:0040AA24 ; ---------------------------------------------------------------------------
.text:0040AA24
.text:0040AA24 loc_40AA24:                             ; CODE XREF: .text:0040A636↑j
.text:0040AA24                 mov     [esp+10h], esi
.text:0040AA28                 lea     eax, [esp+2Ch]
.text:0040AA2C                 lea     esi, [esp+30h]
.text:0040AA30                 mov     [esp+0Ch], eax
.text:0040AA34                 lea     edi, [esp+34h]
.text:0040AA38                 mov     [esp+8], esi
.text:0040AA3C                 mov     [esp+4], edi
.text:0040AA40
.text:0040AA40 loc_40AA40:                             ; CODE XREF: .text:0040AA6C↓j
.text:0040AA40                 mov     [esp], ebp
.text:0040AA43                 call    GetDiskFreeSpaceA
.text:0040AA48                 sub     esp, 14h
.text:0040AA4B                 jmp     loc_40A720
.text:0040AA50 ; ---------------------------------------------------------------------------
.text:0040AA50
.text:0040AA50 loc_40AA50:                             ; CODE XREF: .text:0040A61F↑j
.text:0040AA50                 mov     [esp+10h], esi
.text:0040AA54                 lea     ebx, [esp+2Ch]
.text:0040AA58                 lea     eax, [esp+30h]
.text:0040AA5C                 mov     [esp+0Ch], ebx
.text:0040AA60                 lea     esi, [esp+34h]
.text:0040AA64                 mov     [esp+8], eax
.text:0040AA68                 mov     [esp+4], esi
.text:0040AA6C                 jmp     short loc_40AA40
.text:0040AA6E ; ---------------------------------------------------------------------------
.text:0040AA6E
.text:0040AA6E loc_40AA6E:                             ; CODE XREF: .text:0040A5D7↑j
.text:0040AA6E                 mov     [esp], edi
.text:0040AA71                 call    FreeLibrary
.text:0040AA76                 sub     esp, 4
.text:0040AA79                 call    sub_40B060
.text:0040AA7E                 mov     esi, eax
.text:0040AA80                 call    _errno
.text:0040AA85                 mov     [eax], esi
.text:0040AA87
.text:0040AA87 loc_40AA87:                             ; CODE XREF: .text:0040AAA7↓j
.text:0040AA87                 mov     eax, 0FFFFFFFFh
.text:0040AA8C                 jmp     loc_40A950
.text:0040AA91 ; ---------------------------------------------------------------------------
.text:0040AA91
.text:0040AA91 loc_40AA91:                             ; CODE XREF: .text:0040A551↑j
.text:0040AA91                 mov     [esp], edi
.text:0040AA94                 call    FreeLibrary
.text:0040AA99                 sub     esp, 4
.text:0040AA9C                 call    _errno
.text:0040AAA1                 mov     dword ptr [eax], 2
.text:0040AAA7                 jmp     short loc_40AA87
.text:0040AAA7 ; ---------------------------------------------------------------------------
.text:0040AAA9                 align 10h
.text:0040AAB0
.text:0040AAB0 ; =============== S U B R O U T I N E =======================================
.text:0040AAB0
.text:0040AAB0
.text:0040AAB0 ; int __cdecl sub_40AAB0(LPCSTR, LPDWORD, LPDWORD, LPDWORD, LPDWORD)
.text:0040AAB0 sub_40AAB0      proc near               ; CODE XREF: sub_4084E0+2C7↑p
.text:0040AAB0                                         ; .text:00408B1A↑p
.text:0040AAB0
.text:0040AAB0 lpFileName      = dword ptr -9Ch
.text:0040AAB0 dwDesiredAccess = dword ptr -98h
.text:0040AAB0 dwShareMode     = dword ptr -94h
.text:0040AAB0 lpSecurityAttributes= dword ptr -90h
.text:0040AAB0 dwCreationDisposition= dword ptr -8Ch
.text:0040AAB0 dwFlagsAndAttributes= dword ptr -88h
.text:0040AAB0 hTemplateFile   = dword ptr -84h
.text:0040AAB0 lpOverlapped    = dword ptr -80h
.text:0040AAB0 BytesReturned   = dword ptr -70h
.text:0040AAB0 InBuffer        = byte ptr -6Ch
.text:0040AAB0 var_68          = dword ptr -68h
.text:0040AAB0 var_64          = dword ptr -64h
.text:0040AAB0 var_60          = dword ptr -60h
.text:0040AAB0 var_5C          = dword ptr -5Ch
.text:0040AAB0 var_54          = dword ptr -54h
.text:0040AAB0 var_4C          = byte ptr -4Ch
.text:0040AAB0 var_48          = dword ptr -48h
.text:0040AAB0 var_44          = dword ptr -44h
.text:0040AAB0 var_40          = dword ptr -40h
.text:0040AAB0 var_3C          = dword ptr -3Ch
.text:0040AAB0 lpRootPathName  = dword ptr -2Ch
.text:0040AAB0 lpSectorsPerCluster= dword ptr -28h
.text:0040AAB0 lpBytesPerSector= dword ptr -24h
.text:0040AAB0 lpNumberOfFreeClusters= dword ptr -20h
.text:0040AAB0 lpTotalNumberOfClusters= dword ptr -1Ch
.text:0040AAB0 var_18          = dword ptr -18h
.text:0040AAB0 var_14          = dword ptr -14h
.text:0040AAB0 var_10          = dword ptr -10h
.text:0040AAB0 var_C           = dword ptr -0Ch
.text:0040AAB0 var_8           = dword ptr -8
.text:0040AAB0 var_4           = dword ptr -4
.text:0040AAB0 arg_0           = dword ptr  4
.text:0040AAB0 arg_4           = dword ptr  8
.text:0040AAB0 arg_8           = dword ptr  0Ch
.text:0040AAB0 arg_C           = dword ptr  10h
.text:0040AAB0 arg_10          = dword ptr  14h
.text:0040AAB0
.text:0040AAB0                 sub     esp, 2Ch
.text:0040AAB3                 mov     edx, [esp+2Ch+arg_0]
.text:0040AAB7                 mov     [esp+2Ch+var_10], ebx
.text:0040AABB                 mov     ebx, [esp+2Ch+arg_10]
.text:0040AABF                 mov     [esp+2Ch+var_C], esi
.text:0040AAC3                 mov     esi, [esp+2Ch+arg_C]
.text:0040AAC7                 mov     [esp+2Ch+var_8], edi
.text:0040AACB                 mov     edi, [esp+2Ch+arg_8]
.text:0040AACF                 mov     [esp+2Ch+var_4], ebp
.text:0040AAD3                 mov     ebp, [esp+2Ch+arg_4]
.text:0040AAD7                 mov     [esp+2Ch+var_14], edx
.text:0040AADB                 call    sub_40BB40
.text:0040AAE0                 test    eax, eax
.text:0040AAE2                 jz      short loc_40AB14
.text:0040AAE4                 mov     [esp+2Ch+arg_10], ebx
.text:0040AAE8                 mov     edx, [esp+2Ch+var_14]
.text:0040AAEC                 mov     ebx, [esp+2Ch+var_10]
.text:0040AAF0                 mov     [esp+2Ch+arg_C], esi
.text:0040AAF4                 mov     esi, [esp+2Ch+var_C]
.text:0040AAF8                 mov     [esp+2Ch+arg_8], edi
.text:0040AAFC                 mov     edi, [esp+2Ch+var_8]
.text:0040AB00                 mov     [esp+2Ch+arg_4], ebp
.text:0040AB04                 mov     ebp, [esp+2Ch+var_4]
.text:0040AB08                 mov     [esp+2Ch+arg_0], edx
.text:0040AB0C                 add     esp, 2Ch
.text:0040AB0F                 jmp     loc_40ABC0
.text:0040AB14 ; ---------------------------------------------------------------------------
.text:0040AB14
.text:0040AB14 loc_40AB14:                             ; CODE XREF: sub_40AAB0+32↑j
.text:0040AB14                 mov     [esp+2Ch+lpTotalNumberOfClusters], ebx ; lpTotalNumberOfClusters
.text:0040AB18                 mov     ecx, [esp+2Ch+var_14]
.text:0040AB1C                 mov     [esp+2Ch+lpNumberOfFreeClusters], esi ; lpNumberOfFreeClusters
.text:0040AB20                 mov     [esp+2Ch+lpBytesPerSector], edi ; lpBytesPerSector
.text:0040AB24                 mov     [esp+2Ch+lpSectorsPerCluster], ebp ; lpSectorsPerCluster
.text:0040AB28                 mov     [esp+2Ch+lpRootPathName], ecx ; lpRootPathName
.text:0040AB2B                 call    GetDiskFreeSpaceA
.text:0040AB30                 sub     esp, 14h
.text:0040AB33                 mov     ebx, [esp+2Ch+var_10]
.text:0040AB37                 mov     esi, [esp+2Ch+var_C]
.text:0040AB3B                 mov     edi, [esp+2Ch+var_8]
.text:0040AB3F                 mov     ebp, [esp+2Ch+var_4]
.text:0040AB43                 add     esp, 2Ch
.text:0040AB46                 retn
.text:0040AB46 ; ---------------------------------------------------------------------------
.text:0040AB47                 align 10h
.text:0040AB50
.text:0040AB50 loc_40AB50:                             ; CODE XREF: .text:0040BE5D↓p
.text:0040AB50                 sub     esp, 1Ch
.text:0040AB53                 mov     [esp+1Ch+var_4], esi
.text:0040AB57                 mov     esi, [esp+1Ch+arg_0]
.text:0040AB5B                 mov     [esp+1Ch+var_8], ebx
.text:0040AB5F                 mov     [esp+1Ch+lpTotalNumberOfClusters], esi ; LPCSTR
.text:0040AB62                 call    sub_40A090
.text:0040AB67                 test    eax, eax
.text:0040AB69                 mov     ebx, eax
.text:0040AB6B                 jz      short loc_40AB80
.text:0040AB6D                 cmp     byte ptr [eax], 0
.text:0040AB70                 jz      short loc_40AB80
.text:0040AB72                 test    esi, esi
.text:0040AB74                 jz      short loc_40AB80
.text:0040AB76                 cmp     byte ptr [esi], 0
.text:0040AB79                 jnz     short loc_40ABA6
.text:0040AB7B                 nop
.text:0040AB7C                 lea     esi, [esi+0]
.text:0040AB80
.text:0040AB80 loc_40AB80:                             ; CODE XREF: sub_40AAB0+BB↑j
.text:0040AB80                                         ; sub_40AAB0+C0↑j ...
.text:0040AB80                 call    _errno
.text:0040AB85                 mov     dword ptr [eax], 2
.text:0040AB8B                 mov     esi, 0FFFFFFFFh
.text:0040AB90
.text:0040AB90 loc_40AB90:                             ; CODE XREF: sub_40AAB0+108↓j
.text:0040AB90                 mov     [esp+1Ch+lpTotalNumberOfClusters], ebx ; Block
.text:0040AB93                 call    free
.text:0040AB98                 mov     eax, esi
.text:0040AB9A                 mov     ebx, [esp+1Ch+var_8]
.text:0040AB9E                 mov     esi, [esp+1Ch+var_4]
.text:0040ABA2                 add     esp, 1Ch
.text:0040ABA5                 retn
.text:0040ABA6 ; ---------------------------------------------------------------------------
.text:0040ABA6
.text:0040ABA6 loc_40ABA6:                             ; CODE XREF: sub_40AAB0+C9↑j
.text:0040ABA6                 mov     [esp+1Ch+lpTotalNumberOfClusters], eax
.text:0040ABA9                 mov     edx, [esp+1Ch+arg_4]
.text:0040ABAD                 mov     [esp+1Ch+var_18], edx
.text:0040ABB1                 call    near ptr loc_40A50B+5
.text:0040ABB6                 mov     esi, eax
.text:0040ABB8                 jmp     short loc_40AB90
.text:0040ABB8 ; ---------------------------------------------------------------------------
.text:0040ABBA                 align 10h
.text:0040ABC0
.text:0040ABC0 loc_40ABC0:                             ; CODE XREF: sub_40AAB0+5F↑j
.text:0040ABC0                 push    ebp
.text:0040ABC1                 push    edi
.text:0040ABC2                 push    esi
.text:0040ABC3                 push    ebx
.text:0040ABC4                 sub     esp, 8Ch
.text:0040ABCA                 mov     ebp, [esp+9Ch+arg_0]
.text:0040ABD1                 call    sub_40BB40
.text:0040ABD6                 test    eax, eax
.text:0040ABD8                 jz      short loc_40ABE8
.text:0040ABDA                 call    sub_40BA90
.text:0040ABDF                 cmp     eax, 0Bh
.text:0040ABE2                 jle     loc_40AD10
.text:0040ABE8
.text:0040ABE8 loc_40ABE8:                             ; CODE XREF: sub_40AAB0+128↑j
.text:0040ABE8                 cld
.text:0040ABE9                 xor     eax, eax
.text:0040ABEB                 lea     ebx, [esp+9Ch+InBuffer]
.text:0040ABEF                 mov     ecx, 7
.text:0040ABF4                 mov     edi, ebx
.text:0040ABF6                 lea     esi, [esp+9Ch+var_4C]
.text:0040ABFA                 rep stosd
.text:0040ABFC                 mov     [esp+9Ch+hTemplateFile], 0 ; hTemplateFile
.text:0040AC04                 mov     [esp+9Ch+dwFlagsAndAttributes], 4000000h ; dwFlagsAndAttributes
.text:0040AC0C                 mov     [esp+9Ch+dwCreationDisposition], 0 ; dwCreationDisposition
.text:0040AC14                 mov     [esp+9Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:0040AC1C                 mov     [esp+9Ch+dwShareMode], 0 ; dwShareMode
.text:0040AC24                 mov     [esp+9Ch+dwDesiredAccess], 0 ; dwDesiredAccess
.text:0040AC2C                 mov     [esp+9Ch+lpFileName], offset aVwin32 ; "\\\\.\\vwin32"
.text:0040AC33                 call    CreateFileA
.text:0040AC38                 sub     esp, 1Ch
.text:0040AC3B                 mov     edi, eax
.text:0040AC3D                 cmp     eax, 0FFFFFFFFh
.text:0040AC40                 jz      short loc_40ACB5
.text:0040AC42                 mov     [esp+9Ch+var_68], ebp
.text:0040AC46                 lea     ebp, [esp+9Ch+BytesReturned]
.text:0040AC4A                 mov     [esp+9Ch+var_5C], esi
.text:0040AC4E                 mov     [esp+9Ch+var_60], 7303h
.text:0040AC56                 mov     [esp+9Ch+var_64], 2Ch ; ','
.text:0040AC5E                 mov     [esp+9Ch+var_54], 1
.text:0040AC66                 mov     [esp+9Ch+lpOverlapped], 0 ; lpOverlapped
.text:0040AC6E                 mov     [esp+9Ch+hTemplateFile], ebp ; lpBytesReturned
.text:0040AC72                 mov     [esp+9Ch+dwFlagsAndAttributes], 1Ch ; nOutBufferSize
.text:0040AC7A                 mov     [esp+9Ch+dwCreationDisposition], ebx ; lpOutBuffer
.text:0040AC7E                 mov     [esp+9Ch+lpSecurityAttributes], 1Ch ; nInBufferSize
.text:0040AC86                 mov     [esp+9Ch+dwShareMode], ebx ; lpInBuffer
.text:0040AC8A                 mov     [esp+9Ch+dwDesiredAccess], 6 ; dwIoControlCode
.text:0040AC92                 mov     [esp+9Ch+lpFileName], eax ; hDevice
.text:0040AC95                 call    DeviceIoControl
.text:0040AC9A                 sub     esp, 20h
.text:0040AC9D                 mov     esi, eax
.text:0040AC9F                 mov     [esp+9Ch+lpFileName], edi ; hObject
.text:0040ACA2                 call    CloseHandle
.text:0040ACA7                 sub     esp, 4
.text:0040ACAA                 test    esi, esi
.text:0040ACAC                 jz      short loc_40ACB5
.text:0040ACAE                 test    byte ptr [esp+9Ch+var_54], 1
.text:0040ACB3                 jz      short loc_40ACD0
.text:0040ACB5
.text:0040ACB5 loc_40ACB5:                             ; CODE XREF: sub_40AAB0+190↑j
.text:0040ACB5                                         ; sub_40AAB0+1FC↑j
.text:0040ACB5                 call    sub_40B060
.text:0040ACBA                 mov     edi, eax
.text:0040ACBC                 call    _errno
.text:0040ACC1                 mov     [eax], edi
.text:0040ACC3                 xor     eax, eax
.text:0040ACC5
.text:0040ACC5 loc_40ACC5:                             ; CODE XREF: sub_40AAB0+25A↓j
.text:0040ACC5                                         ; sub_40AAB0+297↓j
.text:0040ACC5                 add     esp, 8Ch
.text:0040ACCB                 pop     ebx
.text:0040ACCC                 pop     esi
.text:0040ACCD                 pop     edi
.text:0040ACCE                 pop     ebp
.text:0040ACCF                 retn
.text:0040ACD0 ; ---------------------------------------------------------------------------
.text:0040ACD0
.text:0040ACD0 loc_40ACD0:                             ; CODE XREF: sub_40AAB0+203↑j
.text:0040ACD0                 mov     edx, [esp+9Ch+var_48]
.text:0040ACD4                 mov     eax, 1
.text:0040ACD9                 mov     ebx, [esp+9Ch+arg_4]
.text:0040ACE0                 mov     ebp, [esp+9Ch+arg_8]
.text:0040ACE7                 mov     ecx, [esp+9Ch+arg_C]
.text:0040ACEE                 mov     [ebx], edx
.text:0040ACF0                 mov     edi, [esp+9Ch+var_44]
.text:0040ACF4                 mov     ebx, [esp+9Ch+arg_10]
.text:0040ACFB                 mov     [ebp+0], edi
.text:0040ACFE                 mov     esi, [esp+9Ch+var_40]
.text:0040AD02                 mov     [ecx], esi
.text:0040AD04                 mov     edx, [esp+9Ch+var_3C]
.text:0040AD08                 mov     [ebx], edx
.text:0040AD0A                 jmp     short loc_40ACC5
.text:0040AD0A ; ---------------------------------------------------------------------------
.text:0040AD0C                 align 10h
.text:0040AD10
.text:0040AD10 loc_40AD10:                             ; CODE XREF: sub_40AAB0+132↑j
.text:0040AD10                 mov     [esp+9Ch+lpFileName], ebp ; lpRootPathName
.text:0040AD13                 mov     eax, [esp+9Ch+arg_C]
.text:0040AD1A                 mov     ecx, [esp+9Ch+arg_10]
.text:0040AD21                 mov     edx, [esp+9Ch+arg_8]
.text:0040AD28                 mov     [esp+9Ch+lpSecurityAttributes], eax ; lpNumberOfFreeClusters
.text:0040AD2C                 mov     eax, [esp+9Ch+arg_4]
.text:0040AD33                 mov     [esp+9Ch+dwCreationDisposition], ecx ; lpTotalNumberOfClusters
.text:0040AD37                 mov     [esp+9Ch+dwShareMode], edx ; lpBytesPerSector
.text:0040AD3B                 mov     [esp+9Ch+dwDesiredAccess], eax ; lpSectorsPerCluster
.text:0040AD3F                 call    GetDiskFreeSpaceA
.text:0040AD44                 sub     esp, 14h
.text:0040AD47                 jmp     loc_40ACC5
.text:0040AD47 sub_40AAB0      endp ; sp-analysis failed
.text:0040AD47
.text:0040AD47 ; ---------------------------------------------------------------------------
.text:0040AD4C                 align 10h
.text:0040AD50
.text:0040AD50 ; =============== S U B R O U T I N E =======================================
.text:0040AD50
.text:0040AD50
.text:0040AD50 sub_40AD50      proc near               ; CODE XREF: sub_401A30+23↑p
.text:0040AD50
.text:0040AD50 lpSystemInfo    = dword ptr -0Ch
.text:0040AD50 var_4           = dword ptr -4
.text:0040AD50
.text:0040AD50                 sub     esp, 0Ch
.text:0040AD53                 mov     [esp+0Ch+var_4], edi
.text:0040AD57                 mov     edi, ds:dword_412450
.text:0040AD5D                 test    edi, edi
.text:0040AD5F                 mov     eax, edi
.text:0040AD61                 jz      short loc_40AD70
.text:0040AD63
.text:0040AD63 loc_40AD63:                             ; CODE XREF: sub_40AD50+48↓j
.text:0040AD63                 mov     eax, [edi+4]
.text:0040AD66                 mov     edi, [esp+0Ch+var_4]
.text:0040AD6A                 add     esp, 0Ch
.text:0040AD6D                 retn
.text:0040AD6D ; ---------------------------------------------------------------------------
.text:0040AD6E                 align 10h
.text:0040AD70
.text:0040AD70 loc_40AD70:                             ; CODE XREF: sub_40AD50+11↑j
.text:0040AD70                 cld
.text:0040AD71                 mov     edi, offset SystemInfo
.text:0040AD76                 mov     ecx, 9
.text:0040AD7B                 mov     ds:dword_412450, edi
.text:0040AD81                 rep stosd
.text:0040AD83                 mov     [esp+0Ch+lpSystemInfo], offset SystemInfo ; lpSystemInfo
.text:0040AD8A                 call    GetSystemInfo
.text:0040AD8F                 mov     edi, ds:dword_412450
.text:0040AD95                 sub     esp, 4
.text:0040AD98                 jmp     short loc_40AD63
.text:0040AD98 sub_40AD50      endp
.text:0040AD98
.text:0040AD98 ; ---------------------------------------------------------------------------
.text:0040AD9A                 align 10h
.text:0040ADA0
.text:0040ADA0 ; =============== S U B R O U T I N E =======================================
.text:0040ADA0
.text:0040ADA0
.text:0040ADA0 sub_40ADA0      proc near               ; CODE XREF: sub_402F20+14C↑p
.text:0040ADA0
.text:0040ADA0 arg_0           = dword ptr  4
.text:0040ADA0
.text:0040ADA0                 sub     esp, 0Ch
.text:0040ADA3                 mov     edx, [esp+0Ch+arg_0]
.text:0040ADA7                 test    edx, edx
.text:0040ADA9                 jz      short loc_40ADBB
.text:0040ADAB                 mov     [esp+0Ch+arg_0], 0
.text:0040ADB3                 add     esp, 0Ch
.text:0040ADB6                 jmp     sub_40CB00
.text:0040ADBB ; ---------------------------------------------------------------------------
.text:0040ADBB
.text:0040ADBB loc_40ADBB:                             ; CODE XREF: sub_40ADA0+9↑j
.text:0040ADBB                 call    _errno
.text:0040ADC0                 mov     dword ptr [eax], 16h
.text:0040ADC6                 mov     eax, 0FFFFFFFFh
.text:0040ADCB                 add     esp, 0Ch
.text:0040ADCE                 retn
.text:0040ADCE sub_40ADA0      endp
.text:0040ADCE
.text:0040ADCE ; ---------------------------------------------------------------------------
.text:0040ADCF                 align 10h
.text:0040ADD0
.text:0040ADD0 ; =============== S U B R O U T I N E =======================================
.text:0040ADD0
.text:0040ADD0 ; Attributes: info_from_lumina
.text:0040ADD0
.text:0040ADD0 ___get_errno    proc near               ; CODE XREF: sub_40B060+B↓p
.text:0040ADD0
.text:0040ADD0 arg_0           = dword ptr  4
.text:0040ADD0
.text:0040ADD0                 mov     eax, [esp+arg_0]
.text:0040ADD4                 cmp     eax, 53h ; 'S'
.text:0040ADD7                 jg      loc_40AED0
.text:0040ADDD                 cmp     eax, 52h ; 'R'
.text:0040ADE0                 jge     short loc_40AE32
.text:0040ADE2                 cmp     eax, 0Fh
.text:0040ADE5                 jz      short loc_40AE00
.text:0040ADE7                 cmp     eax, 0Fh
.text:0040ADEA                 jg      short loc_40AE60
.text:0040ADEC                 cmp     eax, 9
.text:0040ADEF                 jg      short loc_40AE40
.text:0040ADF1                 cmp     eax, 7
.text:0040ADF4                 jge     short loc_40AE39
.text:0040ADF6                 cmp     eax, 3
.text:0040ADF9                 jg      short loc_40AE1A
.text:0040ADFB                 cmp     eax, 2
.text:0040ADFE                 jl      short loc_40AE13
.text:0040AE00
.text:0040AE00 loc_40AE00:                             ; CODE XREF: ___get_errno+15↑j
.text:0040AE00                                         ; ___get_errno+9D↓j ...
.text:0040AE00                 mov     edx, 2
.text:0040AE05                 lea     esi, [esi+0]
.text:0040AE09                 lea     edi, [edi+0]
.text:0040AE10
.text:0040AE10 loc_40AE10:                             ; CODE XREF: ___get_errno+48↓j
.text:0040AE10                                         ; ___get_errno+59↓j ...
.text:0040AE10                 mov     eax, edx
.text:0040AE12                 retn
.text:0040AE13 ; ---------------------------------------------------------------------------
.text:0040AE13
.text:0040AE13 loc_40AE13:                             ; CODE XREF: ___get_errno+2E↑j
.text:0040AE13                                         ; ___get_errno+78↓j ...
.text:0040AE13                 mov     edx, 16h
.text:0040AE18                 jmp     short loc_40AE10
.text:0040AE1A ; ---------------------------------------------------------------------------
.text:0040AE1A
.text:0040AE1A loc_40AE1A:                             ; CODE XREF: ___get_errno+29↑j
.text:0040AE1A                 cmp     eax, 5
.text:0040AE1D                 jz      short loc_40AE32
.text:0040AE1F                 cmp     eax, 5
.text:0040AE22                 jg      short loc_40AE2B
.text:0040AE24                 mov     edx, 18h
.text:0040AE29                 jmp     short loc_40AE10
.text:0040AE2B ; ---------------------------------------------------------------------------
.text:0040AE2B
.text:0040AE2B loc_40AE2B:                             ; CODE XREF: ___get_errno+52↑j
.text:0040AE2B                                         ; ___get_errno+180↓j
.text:0040AE2B                 mov     edx, 9
.text:0040AE30                 jmp     short loc_40AE10
.text:0040AE32 ; ---------------------------------------------------------------------------
.text:0040AE32
.text:0040AE32 loc_40AE32:                             ; CODE XREF: ___get_errno+10↑j
.text:0040AE32                                         ; ___get_errno+4D↑j ...
.text:0040AE32                 mov     edx, 0Dh
.text:0040AE37                 jmp     short loc_40AE10
.text:0040AE39 ; ---------------------------------------------------------------------------
.text:0040AE39
.text:0040AE39 loc_40AE39:                             ; CODE XREF: ___get_errno+24↑j
.text:0040AE39                                         ; ___get_errno+73↓j ...
.text:0040AE39                 mov     edx, 0Ch
.text:0040AE3E                 jmp     short loc_40AE10
.text:0040AE40 ; ---------------------------------------------------------------------------
.text:0040AE40
.text:0040AE40 loc_40AE40:                             ; CODE XREF: ___get_errno+1F↑j
.text:0040AE40                 cmp     eax, 0Dh
.text:0040AE43                 jg      short loc_40AE39
.text:0040AE45                 cmp     eax, 0Ch
.text:0040AE48                 jge     short loc_40AE13
.text:0040AE4A                 cmp     eax, 0Ah
.text:0040AE4D                 mov     edx, 7
.text:0040AE52                 jz      short loc_40AE10
.text:0040AE54                 cmp     eax, 0Bh
.text:0040AE57                 jnz     short loc_40AE13
.text:0040AE59
.text:0040AE59 loc_40AE59:                             ; CODE XREF: ___get_errno+21A↓j
.text:0040AE59                 mov     edx, 8
.text:0040AE5E                 jmp     short loc_40AE10
.text:0040AE60 ; ---------------------------------------------------------------------------
.text:0040AE60
.text:0040AE60 loc_40AE60:                             ; CODE XREF: ___get_errno+1A↑j
.text:0040AE60                 cmp     eax, 22h ; '"'
.text:0040AE63                 jg      short loc_40AE94
.text:0040AE65                 cmp     eax, 16h
.text:0040AE68                 jge     short loc_40AE32
.text:0040AE6A                 cmp     eax, 12h
.text:0040AE6D                 jz      short loc_40AE00
.text:0040AE6F                 cmp     eax, 12h
.text:0040AE72                 jg      short loc_40AE85
.text:0040AE74                 cmp     eax, 10h
.text:0040AE77                 jz      short loc_40AE32
.text:0040AE79                 mov     edx, 12h
.text:0040AE7E                 cmp     eax, 11h
.text:0040AE81
.text:0040AE81 loc_40AE81:                             ; CODE XREF: ___get_errno+172↓j
.text:0040AE81                                         ; ___get_errno+24C↓j ...
.text:0040AE81                 jnz     short loc_40AE13
.text:0040AE83                 jmp     short loc_40AE10
.text:0040AE85 ; ---------------------------------------------------------------------------
.text:0040AE85
.text:0040AE85 loc_40AE85:                             ; CODE XREF: ___get_errno+A2↑j
.text:0040AE85                 cmp     eax, 14h
.text:0040AE88                 jle     short loc_40AE32
.text:0040AE8A
.text:0040AE8A loc_40AE8A:                             ; CODE XREF: ___get_errno+1D7↓j
.text:0040AE8A                 mov     edx, 10h
.text:0040AE8F                 jmp     loc_40AE10
.text:0040AE94 ; ---------------------------------------------------------------------------
.text:0040AE94
.text:0040AE94 loc_40AE94:                             ; CODE XREF: ___get_errno+93↑j
.text:0040AE94                 cmp     eax, 41h ; 'A'
.text:0040AE97                 jz      short loc_40AE32
.text:0040AE99                 cmp     eax, 41h ; 'A'
.text:0040AE9C                 jg      short loc_40AEB1
.text:0040AE9E                 cmp     eax, 24h ; '$'
.text:0040AEA1                 jz      short loc_40AE32
.text:0040AEA3                 cmp     eax, 35h ; '5'
.text:0040AEA6                 jnz     loc_40AE13
.text:0040AEAC                 jmp     loc_40AE00
.text:0040AEB1 ; ---------------------------------------------------------------------------
.text:0040AEB1
.text:0040AEB1 loc_40AEB1:                             ; CODE XREF: ___get_errno+CC↑j
.text:0040AEB1                 cmp     eax, 43h ; 'C'
.text:0040AEB4                 jz      loc_40AE00
.text:0040AEBA                 cmp     eax, 50h ; 'P'
.text:0040AEBD                 jnz     loc_40AE13
.text:0040AEC3
.text:0040AEC3 loc_40AEC3:                             ; CODE XREF: ___get_errno+1FB↓j
.text:0040AEC3                 mov     edx, 11h
.text:0040AEC8                 jmp     loc_40AE10
.text:0040AEC8 ; ---------------------------------------------------------------------------
.text:0040AECD                 align 10h
.text:0040AED0
.text:0040AED0 loc_40AED0:                             ; CODE XREF: ___get_errno+7↑j
.text:0040AED0                 cmp     eax, 0A1h ; '¡'
.text:0040AED5                 jz      loc_40AE00
.text:0040AEDB                 cmp     eax, 0A1h ; '¡'
.text:0040AEE0                 jg      loc_40AF90
.text:0040AEE6                 cmp     eax, 81h
.text:0040AEEB                 jg      short loc_40AF55
.text:0040AEED                 cmp     eax, 80h ; '€'
.text:0040AEF2                 mov     edx, 0Ah
.text:0040AEF7                 jge     loc_40AE10
.text:0040AEFD                 cmp     eax, 6Ch ; 'l'
.text:0040AF00                 jz      loc_40AE32
.text:0040AF06                 cmp     eax, 6Ch ; 'l'
.text:0040AF09                 jg      short loc_40AF27
.text:0040AF0B                 cmp     eax, 57h ; 'W'
.text:0040AF0E                 jz      loc_40AE13
.text:0040AF14                 cmp     eax, 59h ; 'Y'
.text:0040AF17                 jnz     loc_40AE13
.text:0040AF1D
.text:0040AF1D loc_40AF1D:                             ; CODE XREF: ___get_errno+1E9↓j
.text:0040AF1D                                         ; ___get_errno+23C↓j
.text:0040AF1D                 mov     edx, 0Bh
.text:0040AF22                 jmp     loc_40AE10
.text:0040AF27 ; ---------------------------------------------------------------------------
.text:0040AF27
.text:0040AF27 loc_40AF27:                             ; CODE XREF: ___get_errno+139↑j
.text:0040AF27                 cmp     eax, 70h ; 'p'
.text:0040AF2A                 mov     edx, 1Ch
.text:0040AF2F                 jz      loc_40AE10
.text:0040AF35                 cmp     eax, 70h ; 'p'
.text:0040AF38                 jg      short loc_40AF47
.text:0040AF3A                 mov     edx, 20h ; ' '
.text:0040AF3F                 cmp     eax, 6Dh ; 'm'
.text:0040AF42                 jmp     loc_40AE81
.text:0040AF47 ; ---------------------------------------------------------------------------
.text:0040AF47
.text:0040AF47 loc_40AF47:                             ; CODE XREF: ___get_errno+168↑j
.text:0040AF47                 cmp     eax, 72h ; 'r'
.text:0040AF4A
.text:0040AF4A loc_40AF4A:                             ; CODE XREF: ___get_errno+19C↓j
.text:0040AF4A                 jnz     loc_40AE13
.text:0040AF50                 jmp     loc_40AE2B
.text:0040AF55 ; ---------------------------------------------------------------------------
.text:0040AF55
.text:0040AF55 loc_40AF55:                             ; CODE XREF: ___get_errno+11B↑j
.text:0040AF55                 cmp     eax, 84h ; '„'
.text:0040AF5A                 jz      loc_40AE32
.text:0040AF60                 cmp     eax, 84h ; '„'
.text:0040AF65                 jg      short loc_40AF6E
.text:0040AF67                 cmp     eax, 82h ; '‚'
.text:0040AF6C                 jmp     short loc_40AF4A
.text:0040AF6E ; ---------------------------------------------------------------------------
.text:0040AF6E
.text:0040AF6E loc_40AF6E:                             ; CODE XREF: ___get_errno+195↑j
.text:0040AF6E                 cmp     eax, 91h ; '‘'
.text:0040AF73                 mov     edx, 29h ; ')'
.text:0040AF78                 jz      loc_40AE10
.text:0040AF7E                 cmp     eax, 9Eh ; 'ž'
.text:0040AF83
.text:0040AF83 loc_40AF83:                             ; CODE XREF: ___get_errno+1F4↓j
.text:0040AF83                 jnz     loc_40AE13
.text:0040AF89                 jmp     loc_40AE32
.text:0040AF89 ; ---------------------------------------------------------------------------
.text:0040AF8E                 align 10h
.text:0040AF90
.text:0040AF90 loc_40AF90:                             ; CODE XREF: ___get_errno+110↑j
.text:0040AF90                 cmp     eax, 0CEh ; 'Î'
.text:0040AF95                 jz      loc_40AE00
.text:0040AF9B                 cmp     eax, 0CEh ; 'Î'
.text:0040AFA0                 jg      short loc_40AFF0
.text:0040AFA2                 cmp     eax, 0AAh ; 'ª'
.text:0040AFA7                 jz      loc_40AE8A
.text:0040AFAD                 cmp     eax, 0AAh ; 'ª'
.text:0040AFB2                 jg      short loc_40AFC6
.text:0040AFB4                 cmp     eax, 0A4h ; '¤'
.text:0040AFB9                 jz      loc_40AF1D
.text:0040AFBF                 cmp     eax, 0A7h ; '§'
.text:0040AFC4                 jmp     short loc_40AF83
.text:0040AFC6 ; ---------------------------------------------------------------------------
.text:0040AFC6
.text:0040AFC6 loc_40AFC6:                             ; CODE XREF: ___get_errno+1E2↑j
.text:0040AFC6                 cmp     eax, 0B7h ; '·'
.text:0040AFCB                 jz      loc_40AEC3
.text:0040AFD1                 cmp     eax, 0B7h ; '·'
.text:0040AFD6                 jl      loc_40AE13
.text:0040AFDC                 sub     eax, 0BCh ; '¼'
.text:0040AFE1                 cmp     eax, 0Eh
.text:0040AFE4                 ja      loc_40AE13
.text:0040AFEA                 jmp     loc_40AE59
.text:0040AFEA ; ---------------------------------------------------------------------------
.text:0040AFEF                 align 10h
.text:0040AFF0
.text:0040AFF0 loc_40AFF0:                             ; CODE XREF: ___get_errno+1D0↑j
.text:0040AFF0                 cmp     eax, 46Bh
.text:0040AFF5                 mov     edx, 24h ; '$'
.text:0040AFFA                 jz      loc_40AE10
.text:0040B000                 cmp     eax, 46Bh
.text:0040B005                 jg      short loc_40B021
.text:0040B007                 cmp     eax, 0D7h ; '×'
.text:0040B00C                 jz      loc_40AF1D
.text:0040B012                 mov     edx, 5
.text:0040B017                 cmp     eax, 45Dh
.text:0040B01C                 jmp     loc_40AE81
.text:0040B021 ; ---------------------------------------------------------------------------
.text:0040B021
.text:0040B021 loc_40B021:                             ; CODE XREF: ___get_errno+235↑j
.text:0040B021                 cmp     eax, 4D5h
.text:0040B026                 mov     edx, 4
.text:0040B02B                 jz      loc_40AE10
.text:0040B031                 cmp     eax, 4D5h
.text:0040B036                 jg      short loc_40B047
.text:0040B038                 mov     edx, 13h
.text:0040B03D                 cmp     eax, 4B0h
.text:0040B042                 jmp     loc_40AE81
.text:0040B047 ; ---------------------------------------------------------------------------
.text:0040B047
.text:0040B047 loc_40B047:                             ; CODE XREF: ___get_errno+266↑j
.text:0040B047                 cmp     eax, 718h
.text:0040B04C                 jnz     loc_40AE13
.text:0040B052                 jmp     loc_40AE39
.text:0040B052 ___get_errno    endp
.text:0040B052
.text:0040B052 ; ---------------------------------------------------------------------------
.text:0040B057                 align 10h
.text:0040B060
.text:0040B060 ; =============== S U B R O U T I N E =======================================
.text:0040B060
.text:0040B060
.text:0040B060 sub_40B060      proc near               ; CODE XREF: sub_40D5E0:loc_4097DD↑p
.text:0040B060                                         ; sub_409D80:loc_409DE8↑p ...
.text:0040B060
.text:0040B060 var_C           = dword ptr -0Ch
.text:0040B060
.text:0040B060                 sub     esp, 0Ch
.text:0040B063                 call    GetLastError
.text:0040B068                 mov     [esp+0Ch+var_C], eax
.text:0040B06B                 call    ___get_errno
.text:0040B070                 add     esp, 0Ch
.text:0040B073                 retn
.text:0040B073 sub_40B060      endp
.text:0040B073
.text:0040B073 ; ---------------------------------------------------------------------------
.text:0040B074                 align 10h
.text:0040B080
.text:0040B080 ; =============== S U B R O U T I N E =======================================
.text:0040B080
.text:0040B080
.text:0040B080 sub_40B080      proc near               ; CODE XREF: .text:00409CF3↑p
.text:0040B080                                         ; .text:00409D43↑p
.text:0040B080
.text:0040B080 arg_4           = dword ptr  8
.text:0040B080
.text:0040B080                 sub     esp, 0Ch
.text:0040B083                 mov     edx, [esp+0Ch+arg_4]
.text:0040B087                 test    edx, edx
.text:0040B089                 jz      short loc_40B090
.text:0040B08B                 add     esp, 0Ch
.text:0040B08E                 jmp     short sub_40B0D0
.text:0040B090 ; ---------------------------------------------------------------------------
.text:0040B090
.text:0040B090 loc_40B090:                             ; CODE XREF: sub_40B080+9↑j
.text:0040B090                 call    _errno
.text:0040B095                 mov     dword ptr [eax], 16h
.text:0040B09B                 xor     eax, eax
.text:0040B09D                 add     esp, 0Ch
.text:0040B0A0                 retn
.text:0040B0A0 sub_40B080      endp
.text:0040B0A0
.text:0040B0A1 ; ---------------------------------------------------------------------------
.text:0040B0A1                 jmp     short sub_40B0B0
.text:0040B0A1 ; ---------------------------------------------------------------------------
.text:0040B0A3                 align 10h
.text:0040B0B0
.text:0040B0B0 ; =============== S U B R O U T I N E =======================================
.text:0040B0B0
.text:0040B0B0
.text:0040B0B0 ; int __cdecl sub_40B0B0(LPCSTR)
.text:0040B0B0 sub_40B0B0      proc near               ; CODE XREF: sub_40D5E0-3EAC↑p
.text:0040B0B0                                         ; .text:00409EE8↑p ...
.text:0040B0B0
.text:0040B0B0 lpFileName      = dword ptr -0Ch
.text:0040B0B0 Destination     = dword ptr -8
.text:0040B0B0 arg_0           = dword ptr  4
.text:0040B0B0
.text:0040B0B0                 sub     esp, 0Ch
.text:0040B0B3                 mov     edx, [esp+0Ch+arg_0]
.text:0040B0B7                 mov     [esp+0Ch+Destination], 0 ; Destination
.text:0040B0BF                 mov     [esp+0Ch+lpFileName], edx ; lpFileName
.text:0040B0C2                 call    sub_40B0D0
.text:0040B0C7                 add     esp, 0Ch
.text:0040B0CA                 retn
.text:0040B0CA sub_40B0B0      endp
.text:0040B0CA
.text:0040B0CA ; ---------------------------------------------------------------------------
.text:0040B0CB                 align 10h
.text:0040B0D0
.text:0040B0D0 ; =============== S U B R O U T I N E =======================================
.text:0040B0D0
.text:0040B0D0
.text:0040B0D0 ; int __cdecl sub_40B0D0(LPCSTR lpFileName, char *Destination)
.text:0040B0D0 sub_40B0D0      proc near               ; CODE XREF: sub_40B080+E↑j
.text:0040B0D0                                         ; sub_40B0B0+12↑p
.text:0040B0D0
.text:0040B0D0 Size            = dword ptr -2Ch
.text:0040B0D0 nBufferLength   = dword ptr -28h
.text:0040B0D0 lpBuffer        = dword ptr -24h
.text:0040B0D0 lpFilePart      = dword ptr -20h
.text:0040B0D0 FilePart        = dword ptr -14h
.text:0040B0D0 lpFileName      = dword ptr  4
.text:0040B0D0 Destination     = dword ptr  8
.text:0040B0D0
.text:0040B0D0                 push    ebp
.text:0040B0D1                 push    edi
.text:0040B0D2                 push    esi
.text:0040B0D3                 push    ebx
.text:0040B0D4                 sub     esp, 1Ch
.text:0040B0D7                 mov     edi, [esp+2Ch+lpFileName]
.text:0040B0DB                 mov     ebp, [esp+2Ch+Destination]
.text:0040B0DF                 test    edi, edi
.text:0040B0E1                 jz      loc_40B1E9
.text:0040B0E7                 cmp     byte ptr [edi], 0
.text:0040B0EA                 jz      loc_40B1DC
.text:0040B0F0                 mov     [esp+2Ch+Size], 104h ; Size
.text:0040B0F7                 call    malloc
.text:0040B0FC                 mov     [esp+2Ch+lpBuffer], eax ; lpBuffer
.text:0040B100                 lea     edx, [esp+2Ch+FilePart]
.text:0040B104                 mov     ebx, eax
.text:0040B106                 mov     [esp+2Ch+lpFilePart], edx ; lpFilePart
.text:0040B10A                 mov     [esp+2Ch+nBufferLength], 104h ; nBufferLength
.text:0040B112                 mov     [esp+2Ch+Size], edi ; lpFileName
.text:0040B115                 call    GetFullPathNameA
.text:0040B11A                 sub     esp, 10h
.text:0040B11D                 mov     esi, eax
.text:0040B11F                 test    eax, eax
.text:0040B121                 jz      loc_40B1CA
.text:0040B127                 cmp     eax, 104h
.text:0040B12C                 jle     short loc_40B13D
.text:0040B12E                 test    ebp, ebp
.text:0040B130                 jz      short loc_40B199
.text:0040B132                 call    _errno
.text:0040B137                 mov     dword ptr [eax], 26h ; '&'
.text:0040B13D
.text:0040B13D loc_40B13D:                             ; CODE XREF: sub_40B0D0+5C↑j
.text:0040B13D                                         ; sub_40B0D0+F5↓j
.text:0040B13D                 call    _errno
.text:0040B142                 mov     edi, [eax]
.text:0040B144                 mov     [esp+2Ch+nBufferLength], 10h ; int
.text:0040B14C                 mov     [esp+2Ch+Size], ebx ; lpFileName
.text:0040B14F                 call    sub_40B200
.text:0040B154                 test    eax, eax
.text:0040B156                 jnz     short loc_40B170
.text:0040B158                 movzx   eax, byte ptr [esi+ebx-1]
.text:0040B15D                 cmp     al, 2Fh ; '/'
.text:0040B15F                 jz      short loc_40B170
.text:0040B161                 cmp     al, 5Ch ; '\'
.text:0040B163                 jz      short loc_40B170
.text:0040B165                 mov     byte ptr [esi+ebx], 5Ch ; '\'
.text:0040B169                 mov     byte ptr [esi+ebx+1], 0
.text:0040B16E                 mov     esi, esi
.text:0040B170
.text:0040B170 loc_40B170:                             ; CODE XREF: sub_40B0D0+86↑j
.text:0040B170                                         ; sub_40B0D0+8F↑j ...
.text:0040B170                 call    _errno
.text:0040B175                 mov     [eax], edi
.text:0040B177                 mov     [esp+2Ch+Size], ebx
.text:0040B17A                 call    sub_409BE0
.text:0040B17F                 test    ebp, ebp
.text:0040B181                 mov     eax, ebx
.text:0040B183                 jz      short loc_40B191
.text:0040B185                 mov     [esp+2Ch+nBufferLength], ebx ; Source
.text:0040B189                 mov     [esp+2Ch+Size], ebp ; Destination
.text:0040B18C                 call    strcpy
.text:0040B191
.text:0040B191 loc_40B191:                             ; CODE XREF: sub_40B0D0+B3↑j
.text:0040B191                                         ; sub_40B0D0+10A↓j
.text:0040B191                 add     esp, 1Ch
.text:0040B194                 pop     ebx
.text:0040B195                 pop     esi
.text:0040B196                 pop     edi
.text:0040B197                 pop     ebp
.text:0040B198                 retn
.text:0040B199 ; ---------------------------------------------------------------------------
.text:0040B199
.text:0040B199 loc_40B199:                             ; CODE XREF: sub_40B0D0+60↑j
.text:0040B199                 mov     [esp+2Ch+Size], ebx ; Block
.text:0040B19C                 lea     ecx, [eax+2]
.text:0040B19F                 mov     [esp+2Ch+nBufferLength], ecx ; Size
.text:0040B1A3                 call    realloc
.text:0040B1A8                 mov     [esp+2Ch+lpBuffer], eax ; lpBuffer
.text:0040B1AC                 lea     edx, [esp+2Ch+FilePart]
.text:0040B1B0                 mov     ebx, eax
.text:0040B1B2                 mov     [esp+2Ch+lpFilePart], edx ; lpFilePart
.text:0040B1B6                 mov     [esp+2Ch+nBufferLength], esi ; nBufferLength
.text:0040B1BA                 mov     [esp+2Ch+Size], edi ; lpFileName
.text:0040B1BD                 call    GetFullPathNameA
.text:0040B1C2                 sub     esp, 10h
.text:0040B1C5                 jmp     loc_40B13D
.text:0040B1CA ; ---------------------------------------------------------------------------
.text:0040B1CA
.text:0040B1CA loc_40B1CA:                             ; CODE XREF: sub_40B0D0+51↑j
.text:0040B1CA                 call    sub_40B060
.text:0040B1CF                 mov     esi, eax
.text:0040B1D1                 call    _errno
.text:0040B1D6                 mov     [eax], esi
.text:0040B1D8
.text:0040B1D8 loc_40B1D8:                             ; CODE XREF: sub_40B0D0+117↓j
.text:0040B1D8                                         ; sub_40B0D0+124↓j
.text:0040B1D8                 xor     eax, eax
.text:0040B1DA                 jmp     short loc_40B191
.text:0040B1DC ; ---------------------------------------------------------------------------
.text:0040B1DC
.text:0040B1DC loc_40B1DC:                             ; CODE XREF: sub_40B0D0+1A↑j
.text:0040B1DC                 call    _errno
.text:0040B1E1                 mov     dword ptr [eax], 2
.text:0040B1E7                 jmp     short loc_40B1D8
.text:0040B1E9 ; ---------------------------------------------------------------------------
.text:0040B1E9
.text:0040B1E9 loc_40B1E9:                             ; CODE XREF: sub_40B0D0+11↑j
.text:0040B1E9                 call    _errno
.text:0040B1EE                 mov     dword ptr [eax], 16h
.text:0040B1F4                 jmp     short loc_40B1D8
.text:0040B1F4 sub_40B0D0      endp
.text:0040B1F4
.text:0040B1F4 ; ---------------------------------------------------------------------------
.text:0040B1F6                 align 10h
.text:0040B200
.text:0040B200 ; =============== S U B R O U T I N E =======================================
.text:0040B200
.text:0040B200
.text:0040B200 ; int __cdecl sub_40B200(LPCSTR lpFileName, int)
.text:0040B200 sub_40B200      proc near               ; CODE XREF: sub_40D5E0-3EBD↑p
.text:0040B200                                         ; .text:00409BC2↑p ...
.text:0040B200
.text:0040B200 uMode           = dword ptr -1Ch
.text:0040B200 var_10          = dword ptr -10h
.text:0040B200 var_C           = dword ptr -0Ch
.text:0040B200 var_8           = dword ptr -8
.text:0040B200 var_4           = dword ptr -4
.text:0040B200 lpFileName      = dword ptr  4
.text:0040B200 arg_4           = dword ptr  8
.text:0040B200
.text:0040B200                 sub     esp, 1Ch
.text:0040B203                 mov     [esp+1Ch+var_10], ebx
.text:0040B207                 mov     ebx, [esp+1Ch+lpFileName]
.text:0040B20B                 mov     [esp+1Ch+var_4], ebp
.text:0040B20F                 xor     ebp, ebp
.text:0040B211                 test    ebx, ebx
.text:0040B213                 mov     [esp+1Ch+var_C], esi
.text:0040B217                 mov     esi, [esp+1Ch+arg_4]
.text:0040B21B                 mov     [esp+1Ch+var_8], edi
.text:0040B21F                 jz      short loc_40B229
.text:0040B221                 test    esi, 0FFFFFFE8h
.text:0040B227                 jz      short loc_40B250
.text:0040B229
.text:0040B229 loc_40B229:                             ; CODE XREF: sub_40B200+1F↑j
.text:0040B229                 call    _errno
.text:0040B22E                 mov     dword ptr [eax], 16h
.text:0040B234
.text:0040B234 loc_40B234:                             ; CODE XREF: sub_40B200+B1↓j
.text:0040B234                 mov     eax, 0FFFFFFFFh
.text:0040B239
.text:0040B239 loc_40B239:                             ; CODE XREF: sub_40B200+86↓j
.text:0040B239                                         ; sub_40B200+A4↓j
.text:0040B239                 mov     ebx, [esp+1Ch+var_10]
.text:0040B23D                 mov     esi, [esp+1Ch+var_C]
.text:0040B241                 mov     edi, [esp+1Ch+var_8]
.text:0040B245                 mov     ebp, [esp+1Ch+var_4]
.text:0040B249                 add     esp, 1Ch
.text:0040B24C                 retn
.text:0040B24C ; ---------------------------------------------------------------------------
.text:0040B24D                 align 10h
.text:0040B250
.text:0040B250 loc_40B250:                             ; CODE XREF: sub_40B200+27↑j
.text:0040B250                 mov     [esp+1Ch+uMode], 8001h ; uMode
.text:0040B257                 call    SetErrorMode
.text:0040B25C                 sub     esp, 4
.text:0040B25F                 mov     [esp+1Ch+uMode], ebx ; lpFileName
.text:0040B262                 call    GetFileAttributesA
.text:0040B267                 sub     esp, 4
.text:0040B26A                 mov     edi, eax
.text:0040B26C                 cmp     eax, 0FFFFFFFFh
.text:0040B26F                 jz      short loc_40B2B3
.text:0040B271
.text:0040B271 loc_40B271:                             ; CODE XREF: sub_40B200+C6↓j
.text:0040B271                 mov     [esp+1Ch+uMode], 0 ; uMode
.text:0040B278                 call    SetErrorMode
.text:0040B27D                 sub     esp, 4
.text:0040B280                 mov     eax, 0FFFFFFFFh
.text:0040B285                 inc     ebp
.text:0040B286                 jz      short loc_40B239
.text:0040B288                 test    esi, 10h
.text:0040B28E                 jz      short loc_40B298
.text:0040B290                 test    edi, 10h
.text:0040B296                 jz      short loc_40B2A6
.text:0040B298
.text:0040B298 loc_40B298:                             ; CODE XREF: sub_40B200+8E↑j
.text:0040B298                 and     esi, 2
.text:0040B29B                 jz      short loc_40B2A2
.text:0040B29D                 and     edi, 1
.text:0040B2A0                 jnz     short loc_40B2A6
.text:0040B2A2
.text:0040B2A2 loc_40B2A2:                             ; CODE XREF: sub_40B200+9B↑j
.text:0040B2A2                 xor     eax, eax
.text:0040B2A4                 jmp     short loc_40B239
.text:0040B2A6 ; ---------------------------------------------------------------------------
.text:0040B2A6
.text:0040B2A6 loc_40B2A6:                             ; CODE XREF: sub_40B200+96↑j
.text:0040B2A6                                         ; sub_40B200+A0↑j
.text:0040B2A6                 call    _errno
.text:0040B2AB                 mov     dword ptr [eax], 0Dh
.text:0040B2B1                 jmp     short loc_40B234
.text:0040B2B3 ; ---------------------------------------------------------------------------
.text:0040B2B3
.text:0040B2B3 loc_40B2B3:                             ; CODE XREF: sub_40B200+6F↑j
.text:0040B2B3                 call    sub_40B060
.text:0040B2B8                 mov     ebp, eax
.text:0040B2BA                 call    _errno
.text:0040B2BF                 mov     [eax], ebp
.text:0040B2C1                 mov     ebp, 0FFFFFFFFh
.text:0040B2C6                 jmp     short loc_40B271
.text:0040B2C6 sub_40B200      endp
.text:0040B2C6
.text:0040B2C6 ; ---------------------------------------------------------------------------
.text:0040B2C8                 align 10h
.text:0040B2D0 aLuLuLu         db '%lu.%lu.%lu',0      ; DATA XREF: .text:0040B4EF↓o
.text:0040B2DC aLu             db '%lu',0              ; DATA XREF: .text:0040B4FF↓o
.text:0040B2E0 asc_40B2E0      db ' ',0                ; DATA XREF: .text:loc_40B5E8↓o
.text:0040B2E2                 align 10h
.text:0040B2F0 aServer40Enterp db 'Server 4.0, Enterprise Edition ',0
.text:0040B2F0                                         ; DATA XREF: .text:0040B61F↓o
.text:0040B310 aServer40       db 'Server 4.0 ',0      ; DATA XREF: .text:loc_40B62D↓o
.text:0040B31C aServer         db ' Server',0          ; DATA XREF: .text:0040B656↓o
.text:0040B31C                                         ; .text:loc_40B7CE↓o
.text:0040B324 aAdvancedServer db ' Advanced Server',0 ; DATA XREF: .text:loc_40B668↓o
.text:0040B335 aDatacenterServ db ' Datacenter Server',0
.text:0040B335                                         ; DATA XREF: .text:loc_40B672↓o
.text:0040B348 aStandardEditio db ' Standard Edition',0
.text:0040B348                                         ; DATA XREF: .text:0040B69A↓o
.text:0040B35A aWebEdition     db ' Web Edition',0     ; DATA XREF: .text:loc_40B6A4↓o
.text:0040B367 aEnterpriseEdit db ' Enterprise Edition',0
.text:0040B367                                         ; DATA XREF: .text:loc_40B6AE↓o
.text:0040B37B aDatacenterEdit db ' Datacenter Edition',0
.text:0040B37B                                         ; DATA XREF: .text:loc_40B6B8↓o
.text:0040B38F aHomeEdition    db ' Home Edition',0    ; DATA XREF: .text:0040B6CB↓o
.text:0040B39D aProfessional   db ' Professional',0    ; DATA XREF: .text:loc_40B6D5↓o
.text:0040B39D                                         ; .text:loc_40B7E0↓o
.text:0040B3AB                 align 10h
.text:0040B3B0 aSystemCurrentc db 'SYSTEM\CurrentControlSet\Control\ProductOptions',0
.text:0040B3B0                                         ; DATA XREF: .text:0040B702↓o
.text:0040B3E0 aProducttype    db 'ProductType',0      ; DATA XREF: .text:0040B749↓o
.text:0040B3EC aWinnt          db 'WINNT',0            ; DATA XREF: .text:0040B784↓o
.text:0040B3F2 aLanmannt       db 'LANMANNT',0         ; DATA XREF: .text:0040B79B↓o
.text:0040B3FB aServernt       db 'SERVERNT',0         ; DATA XREF: .text:0040B7B2↓o
.text:0040B404                 align 10h
.text:0040B410 aMicrosoftWindo db 'Microsoft Windows 3.1 with Win32s ',0
.text:0040B410                                         ; DATA XREF: .text:0040B927↓o
.text:0040B433                 db 1Dh dup(90h)
.text:0040B450 aMicrosoftWindo_0 db 'Microsoft Windows Millennium Edition ',0
.text:0040B450                                         ; DATA XREF: .text:0040B986↓o
.text:0040B476 ; ---------------------------------------------------------------------------
.text:0040B476
.text:0040B476 loc_40B476:                             ; DATA XREF: .text:loc_40B9F1↓o
.text:0040B476                 and     [ebx+45h], dl
.text:0040B479                 add     [eax], ah
.text:0040B47B                 push    ebx
.text:0040B47C                 push    eax
.text:0040B47D                 xor     [eax], eax
.text:0040B47F
.text:0040B47F loc_40B47F:                             ; DATA XREF: .text:loc_40BA6B↓o
.text:0040B47F                 and     [edi+53h], cl
.text:0040B482                 push    edx
.text:0040B483                 xor     al, [eax]
.text:0040B485                 lea     esi, [esi+0]
.text:0040B489                 lea     edi, [edi+0]
.text:0040B490                 push    edi
.text:0040B491                 push    esi
.text:0040B492                 push    ebx
.text:0040B493                 sub     esp, 130h
.text:0040B499                 mov     ebx, [esp+140h]
.text:0040B4A0                 call    sub_40BBA0
.text:0040B4A5                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0040B4AA                 cmp     eax, 1
.text:0040B4AD                 jz      loc_40B950
.text:0040B4B3                 cmp     eax, 1
.text:0040B4B6                 jb      loc_40B926
.text:0040B4BC                 cmp     eax, 2
.text:0040B4BF                 jz      loc_40B570
.text:0040B4C5                 cmp     eax, 3
.text:0040B4C8                 jz      short loc_40B52F
.text:0040B4CA                 lea     esi, [esi+0]
.text:0040B4D0
.text:0040B4D0 loc_40B4D0:                             ; CODE XREF: .text:0040B565↓j
.text:0040B4D0                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:0040B4D6                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0040B4DC
.text:0040B4DC loc_40B4DC:                             ; CODE XREF: .text:0040B96F↓j
.text:0040B4DC                 mov     [esp+10h], edx
.text:0040B4E0                 mov     ebx, [esp+144h]
.text:0040B4E7                 mov     [esp+0Ch], ecx
.text:0040B4EB                 mov     [esp+8], eax
.text:0040B4EF                 mov     dword ptr [esp+4], offset aLuLuLu ; "%lu.%lu.%lu"
.text:0040B4F7                 mov     [esp], ebx
.text:0040B4FA                 call    sprintf
.text:0040B4FF                 mov     dword ptr [esp+4], offset aLu ; "%lu"
.text:0040B507                 mov     edi, ds:VersionInformation.dwBuildNumber
.text:0040B50D                 mov     ecx, [esp+148h]
.text:0040B514                 mov     [esp+8], edi
.text:0040B518                 mov     [esp], ecx
.text:0040B51B                 call    sprintf
.text:0040B520                 mov     eax, 1
.text:0040B525
.text:0040B525 loc_40B525:                             ; CODE XREF: .text:0040B71F↓j
.text:0040B525                                         ; .text:0040B76C↓j
.text:0040B525                 add     esp, 130h
.text:0040B52B                 pop     ebx
.text:0040B52C                 pop     esi
.text:0040B52D                 pop     edi
.text:0040B52E                 retn
.text:0040B52F ; ---------------------------------------------------------------------------
.text:0040B52F
.text:0040B52F loc_40B52F:                             ; CODE XREF: .text:0040B4C8↑j
.text:0040B52F                 mov     dword ptr [ebx], 7263694Dh
.text:0040B535                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040B53C                 mov     dword ptr [ebx+8], 69572074h
.text:0040B543                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040B54A                 mov     dword ptr [ebx+10h], 45432073h
.text:0040B551                 mov     word ptr [ebx+14h], 20h ; ' '
.text:0040B557                 mov     esi, esi
.text:0040B559                 lea     edi, [edi+0]
.text:0040B560
.text:0040B560 loc_40B560:                             ; CODE XREF: .text:0040B608↓j
.text:0040B560                                         ; .text:0040B949↓j ...
.text:0040B560                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0040B565                 jmp     loc_40B4D0
.text:0040B565 ; ---------------------------------------------------------------------------
.text:0040B56A                 align 10h
.text:0040B570
.text:0040B570 loc_40B570:                             ; CODE XREF: .text:0040B4BF↑j
.text:0040B570                 mov     edx, ds:VersionInformation.dwMajorVersion
.text:0040B576                 cmp     edx, 3
.text:0040B579                 mov     eax, edx
.text:0040B57B                 jz      loc_40B8E5
.text:0040B581
.text:0040B581 loc_40B581:                             ; CODE XREF: .text:0040B8EC↓j
.text:0040B581                 cmp     eax, 4
.text:0040B584                 jz      loc_40B8A5
.text:0040B58A
.text:0040B58A loc_40B58A:                             ; CODE XREF: .text:0040B8AD↓j
.text:0040B58A                 cmp     eax, 4
.text:0040B58D                 ja      loc_40B7F2
.text:0040B593                 mov     ecx, ds:VersionInformation.dwMinorVersion
.text:0040B599                 test    ecx, ecx
.text:0040B59B                 jnz     loc_40B7F2
.text:0040B5A1                 mov     dword ptr [ebx], 7263694Dh
.text:0040B5A7                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040B5AE                 mov     dword ptr [ebx+8], 69572074h
.text:0040B5B5                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040B5BC                 mov     dword ptr [ebx+10h], 544E2073h
.text:0040B5C3
.text:0040B5C3 loc_40B5C3:                             ; CODE XREF: .text:0040B865↓j
.text:0040B5C3                 mov     byte ptr [ebx+14h], 0
.text:0040B5C7
.text:0040B5C7 loc_40B5C7:                             ; CODE XREF: .text:0040B7F5↓j
.text:0040B5C7                                         ; .text:0040B80C↓j ...
.text:0040B5C7                 mov     esi, dword_411080
.text:0040B5CD                 test    esi, esi
.text:0040B5CF                 jz      loc_40B6E2
.text:0040B5D5                 movzx   eax, ds:byte_41253A
.text:0040B5DC                 cmp     al, 1
.text:0040B5DE                 jz      loc_40B6C2
.text:0040B5E4                 cmp     al, 3
.text:0040B5E6                 jz      short loc_40B60D
.text:0040B5E8
.text:0040B5E8 loc_40B5E8:                             ; CODE XREF: .text:0040B62B↓j
.text:0040B5E8                                         ; .text:0040B666↓j ...
.text:0040B5E8                 mov     dword ptr [esp+4], offset asc_40B2E0 ; " "
.text:0040B5F0                 mov     [esp], ebx
.text:0040B5F3                 call    strcat
.text:0040B5F8                 mov     dword ptr [esp+4], offset VersionInformation.szCSDVersion
.text:0040B600                 mov     [esp], ebx
.text:0040B603                 call    strcat
.text:0040B608                 jmp     loc_40B560
.text:0040B60D ; ---------------------------------------------------------------------------
.text:0040B60D
.text:0040B60D loc_40B60D:                             ; CODE XREF: .text:0040B5E6↑j
.text:0040B60D                 cmp     ds:VersionInformation.dwMajorVersion, 5
.text:0040B614                 jz      short loc_40B636
.text:0040B616
.text:0040B616 loc_40B616:                             ; CODE XREF: .text:0040B642↓j
.text:0040B616                 test    byte ptr ds:word_412538, 2
.text:0040B61D                 jz      short loc_40B62D
.text:0040B61F                 mov     dword ptr [esp], offset aServer40Enterp ; "Server 4.0, Enterprise Edition "
.text:0040B626
.text:0040B626 loc_40B626:                             ; CODE XREF: .text:0040B634↓j
.text:0040B626                 call    printf
.text:0040B62B                 jmp     short loc_40B5E8
.text:0040B62D ; ---------------------------------------------------------------------------
.text:0040B62D
.text:0040B62D loc_40B62D:                             ; CODE XREF: .text:0040B61D↑j
.text:0040B62D                 mov     dword ptr [esp], offset aServer40 ; "Server 4.0 "
.text:0040B634                 jmp     short loc_40B626
.text:0040B636 ; ---------------------------------------------------------------------------
.text:0040B636
.text:0040B636 loc_40B636:                             ; CODE XREF: .text:0040B614↑j
.text:0040B636                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0040B63B                 cmp     eax, 2
.text:0040B63E                 jz      short loc_40B680
.text:0040B640                 test    eax, eax
.text:0040B642                 jnz     short loc_40B616
.text:0040B644                 cmp     byte ptr ds:word_412538, 0
.text:0040B64B                 js      short loc_40B672
.text:0040B64D                 test    byte ptr ds:word_412538, 2
.text:0040B654                 jnz     short loc_40B668
.text:0040B656                 mov     dword ptr [esp+4], offset aServer ; " Server"
.text:0040B65E
.text:0040B65E loc_40B65E:                             ; CODE XREF: .text:0040B670↓j
.text:0040B65E                                         ; .text:0040B67A↓j ...
.text:0040B65E                 mov     [esp], ebx
.text:0040B661                 call    strcat
.text:0040B666                 jmp     short loc_40B5E8
.text:0040B668 ; ---------------------------------------------------------------------------
.text:0040B668
.text:0040B668 loc_40B668:                             ; CODE XREF: .text:0040B654↑j
.text:0040B668                                         ; .text:0040B7C9↓j
.text:0040B668                 mov     dword ptr [esp+4], offset aAdvancedServer ; " Advanced Server"
.text:0040B670                 jmp     short loc_40B65E
.text:0040B672 ; ---------------------------------------------------------------------------
.text:0040B672
.text:0040B672 loc_40B672:                             ; CODE XREF: .text:0040B64B↑j
.text:0040B672                 mov     dword ptr [esp+4], offset aDatacenterServ ; " Datacenter Server"
.text:0040B67A                 jmp     short loc_40B65E
.text:0040B67A ; ---------------------------------------------------------------------------
.text:0040B67C                 align 10h
.text:0040B680
.text:0040B680 loc_40B680:                             ; CODE XREF: .text:0040B63E↑j
.text:0040B680                 cmp     byte ptr ds:word_412538, 0
.text:0040B687                 js      short loc_40B6B8
.text:0040B689                 movzx   eax, ds:word_412538
.text:0040B690                 test    al, 2
.text:0040B692                 jnz     short loc_40B6AE
.text:0040B694                 cmp     ax, 400h
.text:0040B698                 jz      short loc_40B6A4
.text:0040B69A                 mov     dword ptr [esp+4], offset aStandardEditio ; " Standard Edition"
.text:0040B6A2                 jmp     short loc_40B65E
.text:0040B6A4 ; ---------------------------------------------------------------------------
.text:0040B6A4
.text:0040B6A4 loc_40B6A4:                             ; CODE XREF: .text:0040B698↑j
.text:0040B6A4                 mov     dword ptr [esp+4], offset aWebEdition ; " Web Edition"
.text:0040B6AC                 jmp     short loc_40B65E
.text:0040B6AE ; ---------------------------------------------------------------------------
.text:0040B6AE
.text:0040B6AE loc_40B6AE:                             ; CODE XREF: .text:0040B692↑j
.text:0040B6AE                 mov     dword ptr [esp+4], offset aEnterpriseEdit ; " Enterprise Edition"
.text:0040B6B6                 jmp     short loc_40B65E
.text:0040B6B8 ; ---------------------------------------------------------------------------
.text:0040B6B8
.text:0040B6B8 loc_40B6B8:                             ; CODE XREF: .text:0040B687↑j
.text:0040B6B8                 mov     dword ptr [esp+4], offset aDatacenterEdit ; " Datacenter Edition"
.text:0040B6C0                 jmp     short loc_40B65E
.text:0040B6C2 ; ---------------------------------------------------------------------------
.text:0040B6C2
.text:0040B6C2 loc_40B6C2:                             ; CODE XREF: .text:0040B5DE↑j
.text:0040B6C2                 test    byte ptr ds:word_412538+1, 2
.text:0040B6C9                 jz      short loc_40B6D5
.text:0040B6CB                 mov     dword ptr [esp+4], offset aHomeEdition ; " Home Edition"
.text:0040B6D3                 jmp     short loc_40B65E
.text:0040B6D5 ; ---------------------------------------------------------------------------
.text:0040B6D5
.text:0040B6D5 loc_40B6D5:                             ; CODE XREF: .text:0040B6C9↑j
.text:0040B6D5                 mov     dword ptr [esp+4], offset aProfessional ; " Professional"
.text:0040B6DD                 jmp     loc_40B65E
.text:0040B6E2 ; ---------------------------------------------------------------------------
.text:0040B6E2
.text:0040B6E2 loc_40B6E2:                             ; CODE XREF: .text:0040B5CF↑j
.text:0040B6E2                 mov     dword ptr [esp+28h], 0FFh
.text:0040B6EA                 lea     edx, [esp+2Ch]
.text:0040B6EE                 mov     [esp+10h], edx
.text:0040B6F2                 mov     dword ptr [esp+0Ch], 1
.text:0040B6FA                 mov     dword ptr [esp+8], 0
.text:0040B702                 mov     dword ptr [esp+4], offset aSystemCurrentc ; "SYSTEM\\CurrentControlSet\\Control\\Pro"...
.text:0040B70A                 mov     dword ptr [esp], 80000002h
.text:0040B711                 call    RegOpenKeyExA
.text:0040B716                 mov     edi, eax
.text:0040B718                 sub     esp, 14h
.text:0040B71B                 xor     eax, eax
.text:0040B71D                 test    edi, edi
.text:0040B71F                 jnz     loc_40B525
.text:0040B725                 mov     dword ptr [esp+0Ch], 0
.text:0040B72D                 mov     edi, [esp+2Ch]
.text:0040B731                 lea     esi, [esp+28h]
.text:0040B735                 mov     [esp+14h], esi
.text:0040B739                 lea     esi, [esp+30h]
.text:0040B73D                 mov     [esp+10h], esi
.text:0040B741                 mov     dword ptr [esp+8], 0
.text:0040B749                 mov     dword ptr [esp+4], offset aProducttype ; "ProductType"
.text:0040B751                 mov     [esp], edi
.text:0040B754                 call    RegQueryValueExA
.text:0040B759                 sub     esp, 18h
.text:0040B75C                 test    eax, eax
.text:0040B75E                 jnz     short loc_40B76A
.text:0040B760                 cmp     dword ptr [esp+28h], 0FFh
.text:0040B768                 jbe     short loc_40B771
.text:0040B76A
.text:0040B76A loc_40B76A:                             ; CODE XREF: .text:0040B75E↑j
.text:0040B76A                 xor     eax, eax
.text:0040B76C                 jmp     loc_40B525
.text:0040B771 ; ---------------------------------------------------------------------------
.text:0040B771
.text:0040B771 loc_40B771:                             ; CODE XREF: .text:0040B768↑j
.text:0040B771                 mov     edx, [esp+2Ch]
.text:0040B775                 mov     [esp], edx
.text:0040B778                 call    RegCloseKey
.text:0040B77D                 sub     esp, 4
.text:0040B780                 mov     [esp+4], esi
.text:0040B784                 mov     dword ptr [esp], offset aWinnt ; "WINNT"
.text:0040B78B                 call    lstrcmpiA
.text:0040B790                 sub     esp, 8
.text:0040B793                 test    eax, eax
.text:0040B795                 jz      short loc_40B7E0
.text:0040B797
.text:0040B797 loc_40B797:                             ; CODE XREF: .text:0040B7F0↓j
.text:0040B797                 mov     [esp+4], esi
.text:0040B79B                 mov     dword ptr [esp], offset aLanmannt ; "LANMANNT"
.text:0040B7A2                 call    lstrcmpiA
.text:0040B7A7                 sub     esp, 8
.text:0040B7AA                 test    eax, eax
.text:0040B7AC                 jz      short loc_40B7CE
.text:0040B7AE
.text:0040B7AE loc_40B7AE:                             ; CODE XREF: .text:0040B7DE↓j
.text:0040B7AE                 mov     [esp+4], esi
.text:0040B7B2                 mov     dword ptr [esp], offset aServernt ; "SERVERNT"
.text:0040B7B9                 call    lstrcmpiA
.text:0040B7BE                 sub     esp, 8
.text:0040B7C1                 test    eax, eax
.text:0040B7C3                 jnz     loc_40B5E8
.text:0040B7C9                 jmp     loc_40B668
.text:0040B7CE ; ---------------------------------------------------------------------------
.text:0040B7CE
.text:0040B7CE loc_40B7CE:                             ; CODE XREF: .text:0040B7AC↑j
.text:0040B7CE                 mov     dword ptr [esp+4], offset aServer ; " Server"
.text:0040B7D6                 mov     [esp], ebx
.text:0040B7D9                 call    strcat
.text:0040B7DE                 jmp     short loc_40B7AE
.text:0040B7E0 ; ---------------------------------------------------------------------------
.text:0040B7E0
.text:0040B7E0 loc_40B7E0:                             ; CODE XREF: .text:0040B795↑j
.text:0040B7E0                 mov     dword ptr [esp+4], offset aProfessional ; " Professional"
.text:0040B7E8                 mov     [esp], ebx
.text:0040B7EB                 call    strcat
.text:0040B7F0                 jmp     short loc_40B797
.text:0040B7F2 ; ---------------------------------------------------------------------------
.text:0040B7F2
.text:0040B7F2 loc_40B7F2:                             ; CODE XREF: .text:0040B58D↑j
.text:0040B7F2                                         ; .text:0040B59B↑j
.text:0040B7F2                 cmp     eax, 5
.text:0040B7F5                 jnz     loc_40B5C7
.text:0040B7FB                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0040B800                 cmp     eax, 2
.text:0040B803                 jz      short loc_40B86A
.text:0040B805                 cmp     eax, 1
.text:0040B808                 jz      short loc_40B843
.text:0040B80A                 test    eax, eax
.text:0040B80C                 jnz     loc_40B5C7
.text:0040B812                 mov     dword ptr [ebx], 7263694Dh
.text:0040B818                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040B81F                 mov     dword ptr [ebx+8], 69572074h
.text:0040B826                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040B82D                 mov     dword ptr [ebx+10h], 30322073h
.text:0040B834                 mov     word ptr [ebx+14h], 3030h
.text:0040B83A                 mov     byte ptr [ebx+16h], 0
.text:0040B83E                 jmp     loc_40B5C7
.text:0040B843 ; ---------------------------------------------------------------------------
.text:0040B843
.text:0040B843 loc_40B843:                             ; CODE XREF: .text:0040B808↑j
.text:0040B843                 mov     dword ptr [ebx], 7263694Dh
.text:0040B849                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040B850                 mov     dword ptr [ebx+8], 69572074h
.text:0040B857                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040B85E                 mov     dword ptr [ebx+10h], 50582073h
.text:0040B865                 jmp     loc_40B5C3
.text:0040B86A ; ---------------------------------------------------------------------------
.text:0040B86A
.text:0040B86A loc_40B86A:                             ; CODE XREF: .text:0040B803↑j
.text:0040B86A                 mov     dword ptr [ebx], 7263694Dh
.text:0040B870                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040B877                 mov     dword ptr [ebx+8], 69572074h
.text:0040B87E                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040B885                 mov     dword ptr [ebx+10h], 65532073h
.text:0040B88C                 mov     dword ptr [ebx+14h], 72657672h
.text:0040B893                 mov     dword ptr [ebx+18h], 30303220h
.text:0040B89A                 mov     word ptr [ebx+1Ch], 33h ; '3'
.text:0040B8A0                 jmp     loc_40B5C7
.text:0040B8A5 ; ---------------------------------------------------------------------------
.text:0040B8A5
.text:0040B8A5 loc_40B8A5:                             ; CODE XREF: .text:0040B584↑j
.text:0040B8A5                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0040B8AB                 test    edx, edx
.text:0040B8AD                 jnz     loc_40B58A
.text:0040B8B3                 mov     dword ptr [ebx], 7263694Dh
.text:0040B8B9                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040B8C0                 mov     dword ptr [ebx+8], 69572074h
.text:0040B8C7                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040B8CE                 mov     dword ptr [ebx+10h], 544E2073h
.text:0040B8D5                 mov     dword ptr [ebx+14h], 302E3420h
.text:0040B8DC                 mov     byte ptr [ebx+18h], 0
.text:0040B8E0                 jmp     loc_40B5C7
.text:0040B8E5 ; ---------------------------------------------------------------------------
.text:0040B8E5
.text:0040B8E5 loc_40B8E5:                             ; CODE XREF: .text:0040B57B↑j
.text:0040B8E5                 cmp     ds:VersionInformation.dwMinorVersion, 33h ; '3'
.text:0040B8EC                 jnz     loc_40B581
.text:0040B8F2                 mov     dword ptr [ebx], 7263694Dh
.text:0040B8F8                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040B8FF                 mov     dword ptr [ebx+8], 69572074h
.text:0040B906                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040B90D                 mov     dword ptr [ebx+10h], 544E2073h
.text:0040B914                 mov     dword ptr [ebx+14h], 352E3320h
.text:0040B91B                 mov     word ptr [ebx+18h], 31h ; '1'
.text:0040B921                 jmp     loc_40B5C7
.text:0040B926 ; ---------------------------------------------------------------------------
.text:0040B926
.text:0040B926 loc_40B926:                             ; CODE XREF: .text:0040B4B6↑j
.text:0040B926                 cld
.text:0040B927                 mov     esi, offset aMicrosoftWindo ; "Microsoft Windows 3.1 with Win32s "
.text:0040B92C                 mov     ecx, 8
.text:0040B931                 movzx   edx, byte ptr ds:aMicrosoftWindo+22h ; ""
.text:0040B938                 mov     edi, ebx
.text:0040B93A                 rep movsd
.text:0040B93C                 movzx   esi, word ptr ds:aMicrosoftWindo+20h ; "s "
.text:0040B943                 mov     [edi+2], dl
.text:0040B946                 mov     [edi], si
.text:0040B949                 jmp     loc_40B560
.text:0040B949 ; ---------------------------------------------------------------------------
.text:0040B94E                 align 10h
.text:0040B950
.text:0040B950 loc_40B950:                             ; CODE XREF: .text:0040B4AD↑j
.text:0040B950                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:0040B956                 cmp     ecx, 4
.text:0040B959                 jz      loc_40BA10
.text:0040B95F
.text:0040B95F loc_40B95F:                             ; CODE XREF: .text:0040BA66↓j
.text:0040B95F                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0040B965
.text:0040B965 loc_40B965:                             ; CODE XREF: .text:0040BA18↓j
.text:0040B965                 cmp     ecx, 4
.text:0040B968                 jz      short loc_40B974
.text:0040B96A
.text:0040B96A loc_40B96A:                             ; CODE XREF: .text:0040B97C↓j
.text:0040B96A                                         ; .text:0040B981↓j
.text:0040B96A                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0040B96F                 jmp     loc_40B4DC
.text:0040B974 ; ---------------------------------------------------------------------------
.text:0040B974
.text:0040B974 loc_40B974:                             ; CODE XREF: .text:0040B968↑j
.text:0040B974                 cmp     edx, 0Ah
.text:0040B977                 jz      short loc_40B9A1
.text:0040B979
.text:0040B979 loc_40B979:                             ; CODE XREF: .text:0040B9EF↓j
.text:0040B979                 cmp     ecx, 4
.text:0040B97C                 jnz     short loc_40B96A
.text:0040B97E                 cmp     edx, 5Ah ; 'Z'
.text:0040B981                 jnz     short loc_40B96A
.text:0040B983                 cld
.text:0040B984                 mov     edi, ebx
.text:0040B986                 mov     esi, offset aMicrosoftWindo_0 ; "Microsoft Windows Millennium Edition "
.text:0040B98B                 movzx   ebx, word ptr ds:aMicrosoftWindo_0+24h ; " "
.text:0040B992                 mov     ecx, 9
.text:0040B997                 rep movsd
.text:0040B999                 mov     [edi], bx
.text:0040B99C                 jmp     loc_40B560
.text:0040B9A1 ; ---------------------------------------------------------------------------
.text:0040B9A1
.text:0040B9A1 loc_40B9A1:                             ; CODE XREF: .text:0040B977↑j
.text:0040B9A1                 mov     dword ptr [ebx], 7263694Dh
.text:0040B9A7                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040B9AE                 mov     dword ptr [ebx+8], 69572074h
.text:0040B9B5                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040B9BC                 mov     dword ptr [ebx+10h], 38392073h
.text:0040B9C3                 mov     byte ptr [ebx+14h], 0
.text:0040B9C7                 mov     edx, ds:VersionInformation.dwBuildNumber
.text:0040B9CD                 lea     edi, [edx-7CFh]
.text:0040B9D3                 cmp     edi, 0B7h ; '·'
.text:0040B9D9                 jbe     short loc_40BA03
.text:0040B9DB                 cmp     edx, 886h
.text:0040B9E1                 ja      short loc_40B9F1
.text:0040B9E3
.text:0040B9E3 loc_40B9E3:                             ; CODE XREF: .text:0040BA01↓j
.text:0040B9E3                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:0040B9E9                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0040B9EF                 jmp     short loc_40B979
.text:0040B9F1 ; ---------------------------------------------------------------------------
.text:0040B9F1
.text:0040B9F1 loc_40B9F1:                             ; CODE XREF: .text:0040B9E1↑j
.text:0040B9F1                 mov     dword ptr [esp+4], offset loc_40B476
.text:0040B9F9
.text:0040B9F9 loc_40B9F9:                             ; CODE XREF: .text:0040BA0B↓j
.text:0040B9F9                 mov     [esp], ebx
.text:0040B9FC                 call    strcat
.text:0040BA01                 jmp     short loc_40B9E3
.text:0040BA03 ; ---------------------------------------------------------------------------
.text:0040BA03
.text:0040BA03 loc_40BA03:                             ; CODE XREF: .text:0040B9D9↑j
.text:0040BA03                 mov     dword ptr [esp+4], 40B47Ah
.text:0040BA0B                 jmp     short loc_40B9F9
.text:0040BA0B ; ---------------------------------------------------------------------------
.text:0040BA0D                 align 10h
.text:0040BA10
.text:0040BA10 loc_40BA10:                             ; CODE XREF: .text:0040B959↑j
.text:0040BA10                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0040BA16                 test    edx, edx
.text:0040BA18                 jnz     loc_40B965
.text:0040BA1E                 mov     dword ptr [ebx], 7263694Dh
.text:0040BA24                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040BA2B                 mov     dword ptr [ebx+8], 69572074h
.text:0040BA32                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040BA39                 mov     dword ptr [ebx+10h], 35392073h
.text:0040BA40                 mov     byte ptr [ebx+14h], 0
.text:0040BA44                 mov     edx, ds:VersionInformation.dwBuildNumber
.text:0040BA4A                 lea     ecx, [edx-3B7h]
.text:0040BA50                 cmp     ecx, 81h
.text:0040BA56                 jbe     short loc_40BA7D
.text:0040BA58                 cmp     edx, 438h
.text:0040BA5E                 ja      short loc_40BA6B
.text:0040BA60
.text:0040BA60 loc_40BA60:                             ; CODE XREF: .text:0040BA7B↓j
.text:0040BA60                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:0040BA66                 jmp     loc_40B95F
.text:0040BA6B ; ---------------------------------------------------------------------------
.text:0040BA6B
.text:0040BA6B loc_40BA6B:                             ; CODE XREF: .text:0040BA5E↑j
.text:0040BA6B                 mov     dword ptr [esp+4], offset loc_40B47F
.text:0040BA73
.text:0040BA73 loc_40BA73:                             ; CODE XREF: .text:0040BA85↓j
.text:0040BA73                 mov     [esp], ebx
.text:0040BA76                 call    strcat
.text:0040BA7B                 jmp     short loc_40BA60
.text:0040BA7D ; ---------------------------------------------------------------------------
.text:0040BA7D
.text:0040BA7D loc_40BA7D:                             ; CODE XREF: .text:0040BA56↑j
.text:0040BA7D                 mov     dword ptr [esp+4], 40B47Ah
.text:0040BA85                 jmp     short loc_40BA73
.text:0040BA85 ; ---------------------------------------------------------------------------
.text:0040BA87                 align 10h
.text:0040BA90
.text:0040BA90 ; =============== S U B R O U T I N E =======================================
.text:0040BA90
.text:0040BA90
.text:0040BA90 sub_40BA90      proc near               ; CODE XREF: .text:0040A62E↑p
.text:0040BA90                                         ; sub_40AAB0+12A↑p
.text:0040BA90                 sub     esp, 0Ch
.text:0040BA93                 call    sub_40BBA0
.text:0040BA98                 mov     eax, ds:dword_412490
.text:0040BA9D                 add     esp, 0Ch
.text:0040BAA0                 retn
.text:0040BAA0 sub_40BA90      endp
.text:0040BAA0
.text:0040BAA1 ; ---------------------------------------------------------------------------
.text:0040BAA1                 jmp     short loc_40BAB0
.text:0040BAA1 ; ---------------------------------------------------------------------------
.text:0040BAA3                 align 10h
.text:0040BAB0
.text:0040BAB0 loc_40BAB0:                             ; CODE XREF: .text:0040BAA1↑j
.text:0040BAB0                 sub     esp, 0Ch
.text:0040BAB3                 call    sub_40BBA0
.text:0040BAB8                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0040BABD                 add     esp, 0Ch
.text:0040BAC0                 retn
.text:0040BAC1 ; ---------------------------------------------------------------------------
.text:0040BAC1                 jmp     short loc_40BAD0
.text:0040BAC1 ; ---------------------------------------------------------------------------
.text:0040BAC3                 align 10h
.text:0040BAD0
.text:0040BAD0 loc_40BAD0:                             ; CODE XREF: .text:0040BAC1↑j
.text:0040BAD0                 sub     esp, 0Ch
.text:0040BAD3                 call    sub_40BBA0
.text:0040BAD8                 mov     eax, ds:VersionInformation.dwMajorVersion
.text:0040BADD                 add     esp, 0Ch
.text:0040BAE0                 retn
.text:0040BAE1 ; ---------------------------------------------------------------------------
.text:0040BAE1                 jmp     short loc_40BAF0
.text:0040BAE1 ; ---------------------------------------------------------------------------
.text:0040BAE3                 align 10h
.text:0040BAF0
.text:0040BAF0 loc_40BAF0:                             ; CODE XREF: .text:0040BAE1↑j
.text:0040BAF0                 sub     esp, 0Ch
.text:0040BAF3                 call    sub_40BBA0
.text:0040BAF8                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0040BAFD                 add     esp, 0Ch
.text:0040BB00                 retn
.text:0040BB01 ; ---------------------------------------------------------------------------
.text:0040BB01                 jmp     short loc_40BB10
.text:0040BB01 ; ---------------------------------------------------------------------------
.text:0040BB03                 align 10h
.text:0040BB10
.text:0040BB10 loc_40BB10:                             ; CODE XREF: .text:0040BB01↑j
.text:0040BB10                 sub     esp, 0Ch
.text:0040BB13                 call    GetVersion
.text:0040BB18                 shr     eax, 10h
.text:0040BB1B                 add     esp, 0Ch
.text:0040BB1E                 retn
.text:0040BB1E ; ---------------------------------------------------------------------------
.text:0040BB1F                 align 10h
.text:0040BB20                 sub     esp, 0Ch
.text:0040BB23                 call    sub_40BBA0
.text:0040BB28                 xor     eax, eax
.text:0040BB2A                 cmp     ds:VersionInformation.dwPlatformId, 2
.text:0040BB31                 setz    al
.text:0040BB34                 add     esp, 0Ch
.text:0040BB37                 retn
.text:0040BB37 ; ---------------------------------------------------------------------------
.text:0040BB38                 align 10h
.text:0040BB40
.text:0040BB40 ; =============== S U B R O U T I N E =======================================
.text:0040BB40
.text:0040BB40
.text:0040BB40 sub_40BB40      proc near               ; CODE XREF: .text:loc_409FC0↑p
.text:0040BB40                                         ; .text:loc_40A614↑p ...
.text:0040BB40                 sub     esp, 0Ch
.text:0040BB43                 call    sub_40BBA0
.text:0040BB48                 xor     eax, eax
.text:0040BB4A                 cmp     ds:VersionInformation.dwPlatformId, 1
.text:0040BB51                 setz    al
.text:0040BB54                 add     esp, 0Ch
.text:0040BB57                 retn
.text:0040BB57 sub_40BB40      endp
.text:0040BB57
.text:0040BB57 ; ---------------------------------------------------------------------------
.text:0040BB58                 align 10h
.text:0040BB60                 sub     esp, 0Ch
.text:0040BB63                 call    sub_40BBA0
.text:0040BB68                 xor     eax, eax
.text:0040BB6A                 cmp     ds:VersionInformation.dwPlatformId, 0
.text:0040BB71                 setz    al
.text:0040BB74                 add     esp, 0Ch
.text:0040BB77                 retn
.text:0040BB77 ; ---------------------------------------------------------------------------
.text:0040BB78                 align 10h
.text:0040BB80                 sub     esp, 0Ch
.text:0040BB83                 call    sub_40BBA0
.text:0040BB88                 xor     eax, eax
.text:0040BB8A                 cmp     ds:VersionInformation.dwPlatformId, 3
.text:0040BB91                 setz    al
.text:0040BB94                 add     esp, 0Ch
.text:0040BB97                 retn
.text:0040BB97 ; ---------------------------------------------------------------------------
.text:0040BB98                 align 10h
.text:0040BBA0
.text:0040BBA0 ; =============== S U B R O U T I N E =======================================
.text:0040BBA0
.text:0040BBA0
.text:0040BBA0 sub_40BBA0      proc near               ; CODE XREF: .text:0040B4A0↑p
.text:0040BBA0                                         ; sub_40BA90+3↑p ...
.text:0040BBA0
.text:0040BBA0 lpVersionInformation= dword ptr -0BCh
.text:0040BBA0 VersionInformation= _OSVERSIONINFOA ptr -0ACh
.text:0040BBA0
.text:0040BBA0                 sub     esp, 0BCh
.text:0040BBA6                 mov     edx, ds:dword_412540
.text:0040BBAC                 test    edx, edx
.text:0040BBAE                 jz      short loc_40BBC0
.text:0040BBB0
.text:0040BBB0 loc_40BBB0:                             ; CODE XREF: sub_40BBA0+7B↓j
.text:0040BBB0                 mov     edx, 1
.text:0040BBB5
.text:0040BBB5 loc_40BBB5:                             ; CODE XREF: sub_40BBA0+217↓j
.text:0040BBB5                 mov     eax, edx
.text:0040BBB7                 add     esp, 0BCh
.text:0040BBBD                 retn
.text:0040BBBD ; ---------------------------------------------------------------------------
.text:0040BBBE                 align 10h
.text:0040BBC0
.text:0040BBC0 loc_40BBC0:                             ; CODE XREF: sub_40BBA0+E↑j
.text:0040BBC0                 mov     [esp+0BCh+lpVersionInformation], offset VersionInformation ; lpVersionInformation
.text:0040BBC7                 mov     edx, 9Ch ; 'œ'
.text:0040BBCC                 mov     ds:VersionInformation.dwOSVersionInfoSize, edx
.text:0040BBD2                 call    GetVersionExA
.text:0040BBD7                 sub     esp, 4
.text:0040BBDA                 test    eax, eax
.text:0040BBDC                 jz      loc_40BD94
.text:0040BBE2
.text:0040BBE2 loc_40BBE2:                             ; CODE XREF: sub_40BBA0+245↓j
.text:0040BBE2                 movzx   edx, word ptr ds:VersionInformation.dwBuildNumber
.text:0040BBE9                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0040BBEE                 cmp     eax, 1
.text:0040BBF1                 mov     ds:VersionInformation.dwBuildNumber, edx
.text:0040BBF7                 jz      loc_40BCE0
.text:0040BBFD                 cmp     eax, 1
.text:0040BC00                 jb      loc_40BCD0
.text:0040BC06                 cmp     eax, 2
.text:0040BC09                 jz      short loc_40BC2A
.text:0040BC0B                 cmp     eax, 3
.text:0040BC0E                 jz      short loc_40BC1D
.text:0040BC10
.text:0040BC10 loc_40BC10:                             ; CODE XREF: sub_40BBA0+88↓j
.text:0040BC10                                         ; sub_40BBA0+C0↓j ...
.text:0040BC10                 mov     edx, 1
.text:0040BC15                 mov     ds:dword_412540, edx
.text:0040BC1B                 jmp     short loc_40BBB0
.text:0040BC1D ; ---------------------------------------------------------------------------
.text:0040BC1D
.text:0040BC1D loc_40BC1D:                             ; CODE XREF: sub_40BBA0+6E↑j
.text:0040BC1D                 mov     ecx, 17h
.text:0040BC22
.text:0040BC22 loc_40BC22:                             ; CODE XREF: sub_40BBA0+1A7↓j
.text:0040BC22                 mov     ds:dword_412490, ecx
.text:0040BC28                 jmp     short loc_40BC10
.text:0040BC2A ; ---------------------------------------------------------------------------
.text:0040BC2A
.text:0040BC2A loc_40BC2A:                             ; CODE XREF: sub_40BBA0+69↑j
.text:0040BC2A                 mov     eax, ds:VersionInformation.dwMajorVersion
.text:0040BC2F                 cmp     eax, 3
.text:0040BC32                 jz      short loc_40BCAB
.text:0040BC34                 cmp     eax, 4
.text:0040BC37                 jz      short loc_40BC9A
.text:0040BC39
.text:0040BC39 loc_40BC39:                             ; CODE XREF: sub_40BBA0+102↓j
.text:0040BC39                 cmp     eax, 4
.text:0040BC3C                 ja      short loc_40BC62
.text:0040BC3E                 mov     ecx, ds:VersionInformation.dwMinorVersion
.text:0040BC44                 test    ecx, ecx
.text:0040BC46                 jnz     short loc_40BC62
.text:0040BC48                 mov     edx, 1Eh
.text:0040BC4D
.text:0040BC4D loc_40BC4D:                             ; CODE XREF: sub_40BBA0+DF↓j
.text:0040BC4D                 mov     ds:dword_412490, edx
.text:0040BC53
.text:0040BC53 loc_40BC53:                             ; CODE XREF: sub_40BBA0+C5↓j
.text:0040BC53                                         ; sub_40BBA0+D8↓j ...
.text:0040BC53                 movzx   ecx, ds:word_412534
.text:0040BC5A                 add     ds:dword_412490, ecx
.text:0040BC60                 jmp     short loc_40BC10
.text:0040BC62 ; ---------------------------------------------------------------------------
.text:0040BC62
.text:0040BC62 loc_40BC62:                             ; CODE XREF: sub_40BBA0+9C↑j
.text:0040BC62                                         ; sub_40BBA0+A6↑j
.text:0040BC62                 cmp     eax, 5
.text:0040BC65                 jnz     short loc_40BC53
.text:0040BC67                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0040BC6C                 cmp     eax, 2
.text:0040BC6F                 jz      short loc_40BC8E
.text:0040BC71                 cmp     eax, 1
.text:0040BC74                 jz      short loc_40BC81
.text:0040BC76                 test    eax, eax
.text:0040BC78                 jnz     short loc_40BC53
.text:0040BC7A                 mov     edx, 32h ; '2'
.text:0040BC7F                 jmp     short loc_40BC4D
.text:0040BC81 ; ---------------------------------------------------------------------------
.text:0040BC81
.text:0040BC81 loc_40BC81:                             ; CODE XREF: sub_40BBA0+D4↑j
.text:0040BC81                 mov     ecx, 3Ch ; '<'
.text:0040BC86
.text:0040BC86 loc_40BC86:                             ; CODE XREF: sub_40BBA0+122↓j
.text:0040BC86                 mov     ds:dword_412490, ecx
.text:0040BC8C                 jmp     short loc_40BC53
.text:0040BC8E ; ---------------------------------------------------------------------------
.text:0040BC8E
.text:0040BC8E loc_40BC8E:                             ; CODE XREF: sub_40BBA0+CF↑j
.text:0040BC8E                 mov     eax, 46h ; 'F'
.text:0040BC93
.text:0040BC93 loc_40BC93:                             ; CODE XREF: sub_40BBA0+109↓j
.text:0040BC93                                         ; sub_40BBA0+129↓j
.text:0040BC93                 mov     ds:dword_412490, eax
.text:0040BC98                 jmp     short loc_40BC53
.text:0040BC9A ; ---------------------------------------------------------------------------
.text:0040BC9A
.text:0040BC9A loc_40BC9A:                             ; CODE XREF: sub_40BBA0+97↑j
.text:0040BC9A                 mov     ecx, ds:VersionInformation.dwMinorVersion
.text:0040BCA0                 test    ecx, ecx
.text:0040BCA2                 jnz     short loc_40BC39
.text:0040BCA4                 mov     eax, 28h ; '('
.text:0040BCA9                 jmp     short loc_40BC93
.text:0040BCAB ; ---------------------------------------------------------------------------
.text:0040BCAB
.text:0040BCAB loc_40BCAB:                             ; CODE XREF: sub_40BBA0+92↑j
.text:0040BCAB                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0040BCB0                 cmp     eax, 33h ; '3'
.text:0040BCB3                 jz      short loc_40BCC4
.text:0040BCB5                 cmp     eax, 5
.text:0040BCB8                 setz    cl
.text:0040BCBB                 movzx   edx, cl
.text:0040BCBE                 lea     ecx, [edx+edx*4+1Eh]
.text:0040BCC2                 jmp     short loc_40BC86
.text:0040BCC4 ; ---------------------------------------------------------------------------
.text:0040BCC4
.text:0040BCC4 loc_40BCC4:                             ; CODE XREF: sub_40BBA0+113↑j
.text:0040BCC4                 mov     eax, 24h ; '$'
.text:0040BCC9                 jmp     short loc_40BC93
.text:0040BCC9 ; ---------------------------------------------------------------------------
.text:0040BCCB                 align 10h
.text:0040BCD0
.text:0040BCD0 loc_40BCD0:                             ; CODE XREF: sub_40BBA0+60↑j
.text:0040BCD0                 mov     edx, 2
.text:0040BCD5                 mov     ds:dword_412490, edx
.text:0040BCDB                 jmp     loc_40BC10
.text:0040BCE0 ; ---------------------------------------------------------------------------
.text:0040BCE0
.text:0040BCE0 loc_40BCE0:                             ; CODE XREF: sub_40BBA0+57↑j
.text:0040BCE0                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:0040BCE6                 cmp     ecx, 4
.text:0040BCE9                 jnz     loc_40BC10
.text:0040BCEF                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0040BCF4                 test    eax, eax
.text:0040BCF6                 jnz     short loc_40BD1A
.text:0040BCF8                 mov     eax, 0Ah
.text:0040BCFD                 mov     ds:dword_412490, eax
.text:0040BD02                 lea     eax, [edx-3B7h]
.text:0040BD08                 cmp     eax, 81h
.text:0040BD0D                 ja      short loc_40BD85
.text:0040BD0F                 mov     edx, 0Bh
.text:0040BD14
.text:0040BD14 loc_40BD14:                             ; CODE XREF: sub_40BBA0+1F2↓j
.text:0040BD14                 mov     ds:dword_412490, edx
.text:0040BD1A
.text:0040BD1A loc_40BD1A:                             ; CODE XREF: sub_40BBA0+156↑j
.text:0040BD1A                                         ; sub_40BBA0+1EB↓j
.text:0040BD1A                 cmp     ecx, 4
.text:0040BD1D                 jnz     loc_40BC10
.text:0040BD23                 cmp     ds:VersionInformation.dwMinorVersion, 0Ah
.text:0040BD2A                 jz      short loc_40BD4C
.text:0040BD2C
.text:0040BD2C loc_40BD2C:                             ; CODE XREF: sub_40BBA0+1D4↓j
.text:0040BD2C                                         ; sub_40BBA0+1DC↓j
.text:0040BD2C                 cmp     ecx, 4
.text:0040BD2F                 jnz     loc_40BC10
.text:0040BD35                 cmp     ds:VersionInformation.dwMinorVersion, 5Ah ; 'Z'
.text:0040BD3C                 jnz     loc_40BC10
.text:0040BD42                 mov     ecx, 12h
.text:0040BD47                 jmp     loc_40BC22
.text:0040BD4C ; ---------------------------------------------------------------------------
.text:0040BD4C
.text:0040BD4C loc_40BD4C:                             ; CODE XREF: sub_40BBA0+18A↑j
.text:0040BD4C                 mov     edx, ds:VersionInformation.dwBuildNumber
.text:0040BD52                 mov     eax, 0Eh
.text:0040BD57                 mov     ds:dword_412490, eax
.text:0040BD5C                 lea     eax, [edx-7CFh]
.text:0040BD62                 cmp     eax, 0B7h ; '·'
.text:0040BD67                 ja      short loc_40BD76
.text:0040BD69                 mov     edx, 0Fh
.text:0040BD6E
.text:0040BD6E loc_40BD6E:                             ; CODE XREF: sub_40BBA0+1E3↓j
.text:0040BD6E                 mov     ds:dword_412490, edx
.text:0040BD74                 jmp     short loc_40BD2C
.text:0040BD76 ; ---------------------------------------------------------------------------
.text:0040BD76
.text:0040BD76 loc_40BD76:                             ; CODE XREF: sub_40BBA0+1C7↑j
.text:0040BD76                 cmp     edx, 886h
.text:0040BD7C                 jbe     short loc_40BD2C
.text:0040BD7E                 mov     edx, 10h
.text:0040BD83                 jmp     short loc_40BD6E
.text:0040BD85 ; ---------------------------------------------------------------------------
.text:0040BD85
.text:0040BD85 loc_40BD85:                             ; CODE XREF: sub_40BBA0+16D↑j
.text:0040BD85                 cmp     edx, 438h
.text:0040BD8B                 jbe     short loc_40BD1A
.text:0040BD8D                 mov     edx, 0Ch
.text:0040BD92                 jmp     short loc_40BD14
.text:0040BD94 ; ---------------------------------------------------------------------------
.text:0040BD94
.text:0040BD94 loc_40BD94:                             ; CODE XREF: sub_40BBA0+3C↑j
.text:0040BD94                 mov     [esp+0BCh+VersionInformation.dwOSVersionInfoSize], 94h ; '”'
.text:0040BD9C                 xor     edx, edx
.text:0040BD9E                 lea     ecx, [esp+0BCh+VersionInformation]
.text:0040BDA2                 mov     dword_411080, edx
.text:0040BDA8                 mov     [esp+0BCh+lpVersionInformation], ecx ; lpVersionInformation
.text:0040BDAB                 call    GetVersionExA
.text:0040BDB0                 sub     esp, 4
.text:0040BDB3                 xor     edx, edx
.text:0040BDB5                 test    eax, eax
.text:0040BDB7                 jz      loc_40BBB5
.text:0040BDBD                 mov     edx, [esp+0BCh+VersionInformation.dwMajorVersion]
.text:0040BDC1                 mov     ecx, [esp+0BCh+VersionInformation.dwMinorVersion]
.text:0040BDC5                 mov     ds:VersionInformation.dwMajorVersion, edx
.text:0040BDCB                 mov     edx, [esp+0BCh+VersionInformation.dwBuildNumber]
.text:0040BDCF                 mov     ds:VersionInformation.dwMinorVersion, ecx
.text:0040BDD5                 mov     ecx, [esp+0BCh+VersionInformation.dwPlatformId]
.text:0040BDD9                 mov     ds:VersionInformation.dwBuildNumber, edx
.text:0040BDDF                 mov     ds:VersionInformation.dwPlatformId, ecx
.text:0040BDE5                 jmp     loc_40BBE2
.text:0040BDE5 sub_40BBA0      endp
.text:0040BDE5
.text:0040BDE5 ; ---------------------------------------------------------------------------
.text:0040BDEA                 align 10h
.text:0040BDF0 aNotset         db 'notset',0           ; DATA XREF: .data:off_411090↓o
.text:0040BDF0                                         ; .data:off_411094↓o
.text:0040BDF7 ; ---------------------------------------------------------------------------
.text:0040BDF7
.text:0040BDF7 loc_40BDF7:                             ; DATA XREF: .text:loc_40BE95↓o
.text:0040BDF7                 jb      short loc_40BE70
.text:0040BDF9                 add     [eax], ah
.text:0040BDFB                 or      [eax], eax
.text:0040BDFD
.text:0040BDFD loc_40BDFD:                             ; DATA XREF: .text:0040BEE8↓o
.text:0040BDFD                                         ; .text:0040BF4E↓o ...
.text:0040BDFD                 add     [eax], ah
.text:0040BDFF                 and     eax, 64252064h
.text:0040BE04                 and     [eax], al
.text:0040BE06                 lea     esi, [esi+0]
.text:0040BE09                 lea     edi, [edi+0]
.text:0040BE10                 push    ebp
.text:0040BE11                 push    edi
.text:0040BE12                 push    esi
.text:0040BE13                 push    ebx
.text:0040BE14                 sub     esp, 14Ch
.text:0040BE1A                 mov     edx, off_411090 ; "notset"
.text:0040BE20                 mov     edi, [esp+164h]
.text:0040BE27                 mov     ebp, [esp+168h]
.text:0040BE2E                 mov     [esp+4], edx
.text:0040BE32                 mov     edx, off_411094 ; "notset"
.text:0040BE38                 mov     [esp], edx
.text:0040BE3B                 call    strcmp
.text:0040BE40                 test    eax, eax
.text:0040BE42                 jz      loc_40C230
.text:0040BE48
.text:0040BE48 loc_40BE48:                             ; CODE XREF: .text:0040C27C↓j
.text:0040BE48                 lea     ebx, [esp+20h]
.text:0040BE4C                 lea     esi, [esi+0]
.text:0040BE50
.text:0040BE50 loc_40BE50:                             ; CODE XREF: .text:0040BE86↓j
.text:0040BE50                 mov     [esp+4], ebx
.text:0040BE54                 mov     ecx, off_411094 ; "notset"
.text:0040BE5A                 mov     [esp], ecx
.text:0040BE5D                 call    loc_40AB50
.text:0040BE62                 test    eax, eax
.text:0040BE64                 jns     short loc_40BE95
.text:0040BE66                 mov     eax, off_411094 ; "notset"
.text:0040BE6B                 cmp     byte ptr [eax], 0
.text:0040BE6E                 jz      short loc_40BE88
.text:0040BE70
.text:0040BE70 loc_40BE70:                             ; CODE XREF: .text:loc_40BDF7↑j
.text:0040BE70                 mov     dword ptr [esp+4], 0
.text:0040BE78                 mov     [esp], eax
.text:0040BE7B                 call    strchr
.text:0040BE80                 inc     eax
.text:0040BE81                 mov     off_411094, eax ; "notset"
.text:0040BE86                 jmp     short loc_40BE50
.text:0040BE88 ; ---------------------------------------------------------------------------
.text:0040BE88
.text:0040BE88 loc_40BE88:                             ; CODE XREF: .text:0040BE6E↑j
.text:0040BE88                 xor     eax, eax
.text:0040BE8A
.text:0040BE8A loc_40BE8A:                             ; CODE XREF: .text:0040C04C↓j
.text:0040BE8A                 add     esp, 14Ch
.text:0040BE90                 pop     ebx
.text:0040BE91                 pop     esi
.text:0040BE92                 pop     edi
.text:0040BE93                 pop     ebp
.text:0040BE94                 retn
.text:0040BE95 ; ---------------------------------------------------------------------------
.text:0040BE95
.text:0040BE95 loc_40BE95:                             ; CODE XREF: .text:0040BE64↑j
.text:0040BE95                 mov     dword ptr [edi+0Ch], offset loc_40BDF7
.text:0040BE9C                 lea     ecx, [esp+0D6h]
.text:0040BEA3                 lea     edx, [esp+6Ch]
.text:0040BEA7                 mov     [edi+4], ecx
.text:0040BEAA                 lea     ebx, [esp+7Ch]
.text:0040BEAE                 mov     [edi+8], edx
.text:0040BEB1                 mov     [edi], ebx
.text:0040BEB3                 mov     [esp], ebp
.text:0040BEB6                 mov     [esp+4], edi
.text:0040BEBA                 call    ___addmntentstr
.text:0040BEBF                 mov     [esp], ebp
.text:0040BEC2                 mov     dword ptr [esp+4], 40BDFAh
.text:0040BECA                 call    strspn
.text:0040BECF                 mov     dword ptr [esp+4], 0
.text:0040BED7                 mov     ebx, off_411094 ; "notset"
.text:0040BEDD                 lea     esi, [eax+ebp]
.text:0040BEE0                 mov     [esp+1Ch], esi
.text:0040BEE4                 lea     ebp, [esp+1Ch]
.text:0040BEE8                 mov     esi, offset loc_40BDFD
.text:0040BEED                 mov     [esp], ebx
.text:0040BEF0                 call    strchr
.text:0040BEF5                 mov     dword ptr [esp+4], 40BDFAh
.text:0040BEFD                 inc     eax
.text:0040BEFE                 mov     off_411094, eax ; "notset"
.text:0040BF03                 mov     [esp], ebp
.text:0040BF06                 call    sub_40CBC0
.text:0040BF0B                 test    eax, eax
.text:0040BF0D                 mov     ebx, eax
.text:0040BF0F                 jz      short loc_40BF38
.text:0040BF11                 mov     edx, eax
.text:0040BF13                 mov     ecx, eax
.text:0040BF15                 lea     esi, [esi+0]
.text:0040BF19                 lea     edi, [edi+0]
.text:0040BF20
.text:0040BF20 loc_40BF20:                             ; CODE XREF: .text:0040BF36↓j
.text:0040BF20                 movzx   eax, byte ptr [edx]
.text:0040BF23                 cmp     al, 5Ch ; '\'
.text:0040BF25                 jz      loc_40C1D4
.text:0040BF2B
.text:0040BF2B loc_40BF2B:                             ; CODE XREF: .text:0040C1DC↓j
.text:0040BF2B                                         ; .text:0040C1EA↓j ...
.text:0040BF2B                 mov     [ecx], al
.text:0040BF2D
.text:0040BF2D loc_40BF2D:                             ; CODE XREF: .text:0040C1FE↓j
.text:0040BF2D                 inc     ecx
.text:0040BF2E
.text:0040BF2E loc_40BF2E:                             ; CODE XREF: .text:0040C216↓j
.text:0040BF2E                 movzx   eax, byte ptr [edx]
.text:0040BF31                 mov     esi, ebx
.text:0040BF33                 inc     edx
.text:0040BF34                 test    al, al
.text:0040BF36                 jnz     short loc_40BF20
.text:0040BF38
.text:0040BF38 loc_40BF38:                             ; CODE XREF: .text:0040BF0F↑j
.text:0040BF38                 mov     [edi], esi
.text:0040BF3A                 mov     eax, [esp+1Ch]
.text:0040BF3E                 test    eax, eax
.text:0040BF40                 jnz     loc_40C1BB
.text:0040BF46
.text:0040BF46 loc_40BF46:                             ; CODE XREF: .text:0040C1CF↓j
.text:0040BF46                 mov     dword ptr [esp+4], 40BDFAh
.text:0040BF4E                 mov     esi, offset loc_40BDFD
.text:0040BF53                 mov     [esp], ebp
.text:0040BF56                 call    sub_40CBC0
.text:0040BF5B                 test    eax, eax
.text:0040BF5D                 mov     ebx, eax
.text:0040BF5F                 jz      short loc_40BF88
.text:0040BF61                 mov     edx, eax
.text:0040BF63                 mov     ecx, eax
.text:0040BF65                 lea     esi, [esi+0]
.text:0040BF69                 lea     edi, [edi+0]
.text:0040BF70
.text:0040BF70 loc_40BF70:                             ; CODE XREF: .text:0040BF86↓j
.text:0040BF70                 movzx   eax, byte ptr [edx]
.text:0040BF73                 cmp     al, 5Ch ; '\'
.text:0040BF75                 jz      loc_40C163
.text:0040BF7B
.text:0040BF7B loc_40BF7B:                             ; CODE XREF: .text:0040C16B↓j
.text:0040BF7B                                         ; .text:0040C179↓j ...
.text:0040BF7B                 mov     [ecx], al
.text:0040BF7D
.text:0040BF7D loc_40BF7D:                             ; CODE XREF: .text:0040C18D↓j
.text:0040BF7D                 inc     ecx
.text:0040BF7E
.text:0040BF7E loc_40BF7E:                             ; CODE XREF: .text:0040C1A5↓j
.text:0040BF7E                 movzx   eax, byte ptr [edx]
.text:0040BF81                 mov     esi, ebx
.text:0040BF83                 inc     edx
.text:0040BF84                 test    al, al
.text:0040BF86                 jnz     short loc_40BF70
.text:0040BF88
.text:0040BF88 loc_40BF88:                             ; CODE XREF: .text:0040BF5F↑j
.text:0040BF88                 mov     [edi+4], esi
.text:0040BF8B                 mov     eax, [esp+1Ch]
.text:0040BF8F                 test    eax, eax
.text:0040BF91                 jnz     loc_40C14A
.text:0040BF97
.text:0040BF97 loc_40BF97:                             ; CODE XREF: .text:0040C15E↓j
.text:0040BF97                 mov     dword ptr [esp+4], 40BDFAh
.text:0040BF9F                 mov     esi, offset loc_40BDFD
.text:0040BFA4                 mov     [esp], ebp
.text:0040BFA7                 call    sub_40CBC0
.text:0040BFAC                 test    eax, eax
.text:0040BFAE                 mov     ebx, eax
.text:0040BFB0                 jz      short loc_40BFD8
.text:0040BFB2                 mov     edx, eax
.text:0040BFB4                 mov     ecx, eax
.text:0040BFB6                 lea     esi, [esi+0]
.text:0040BFB9                 lea     edi, [edi+0]
.text:0040BFC0
.text:0040BFC0 loc_40BFC0:                             ; CODE XREF: .text:0040BFD6↓j
.text:0040BFC0                 movzx   eax, byte ptr [edx]
.text:0040BFC3                 cmp     al, 5Ch ; '\'
.text:0040BFC5                 jz      loc_40C0F2
.text:0040BFCB
.text:0040BFCB loc_40BFCB:                             ; CODE XREF: .text:0040C0FA↓j
.text:0040BFCB                                         ; .text:0040C108↓j ...
.text:0040BFCB                 mov     [ecx], al
.text:0040BFCD
.text:0040BFCD loc_40BFCD:                             ; CODE XREF: .text:0040C11C↓j
.text:0040BFCD                 inc     ecx
.text:0040BFCE
.text:0040BFCE loc_40BFCE:                             ; CODE XREF: .text:0040C134↓j
.text:0040BFCE                 movzx   eax, byte ptr [edx]
.text:0040BFD1                 mov     esi, ebx
.text:0040BFD3                 inc     edx
.text:0040BFD4                 test    al, al
.text:0040BFD6                 jnz     short loc_40BFC0
.text:0040BFD8
.text:0040BFD8 loc_40BFD8:                             ; CODE XREF: .text:0040BFB0↑j
.text:0040BFD8                 mov     [edi+8], esi
.text:0040BFDB                 mov     eax, [esp+1Ch]
.text:0040BFDF                 test    eax, eax
.text:0040BFE1                 jnz     loc_40C0D9
.text:0040BFE7
.text:0040BFE7 loc_40BFE7:                             ; CODE XREF: .text:0040C0ED↓j
.text:0040BFE7                 mov     dword ptr [esp+4], 40BDFAh
.text:0040BFEF                 mov     esi, offset loc_40BDFD
.text:0040BFF4                 mov     [esp], ebp
.text:0040BFF7                 call    sub_40CBC0
.text:0040BFFC                 test    eax, eax
.text:0040BFFE                 mov     ebx, eax
.text:0040C000                 jz      short loc_40C024
.text:0040C002                 mov     edx, eax
.text:0040C004                 mov     ecx, eax
.text:0040C006                 lea     esi, [esi+0]
.text:0040C009                 lea     edi, [edi+0]
.text:0040C010
.text:0040C010 loc_40C010:                             ; CODE XREF: .text:0040C022↓j
.text:0040C010                 movzx   eax, byte ptr [edx]
.text:0040C013                 cmp     al, 5Ch ; '\'
.text:0040C015                 jz      short loc_40C085
.text:0040C017
.text:0040C017 loc_40C017:                             ; CODE XREF: .text:0040C08D↓j
.text:0040C017                                         ; .text:0040C097↓j ...
.text:0040C017                 mov     [ecx], al
.text:0040C019
.text:0040C019 loc_40C019:                             ; CODE XREF: .text:0040C0AB↓j
.text:0040C019                 inc     ecx
.text:0040C01A
.text:0040C01A loc_40C01A:                             ; CODE XREF: .text:0040C0C3↓j
.text:0040C01A                 movzx   eax, byte ptr [edx]
.text:0040C01D                 mov     esi, ebx
.text:0040C01F                 inc     edx
.text:0040C020                 test    al, al
.text:0040C022                 jnz     short loc_40C010
.text:0040C024
.text:0040C024 loc_40C024:                             ; CODE XREF: .text:0040C000↑j
.text:0040C024                 mov     [edi+0Ch], esi
.text:0040C027                 xor     eax, eax
.text:0040C029                 mov     edx, [esp+1Ch]
.text:0040C02D                 test    edx, edx
.text:0040C02F                 jnz     short loc_40C065
.text:0040C031
.text:0040C031 loc_40C031:                             ; CODE XREF: .text:0040C083↓j
.text:0040C031                 cmp     eax, 1
.text:0040C034                 jz      short loc_40C05C
.text:0040C036                 cmp     eax, 1
.text:0040C039                 jle     short loc_40C051
.text:0040C03B
.text:0040C03B loc_40C03B:                             ; CODE XREF: .text:0040C053↓j
.text:0040C03B                                         ; .text:0040C063↓j
.text:0040C03B                 mov     edx, [esp+160h]
.text:0040C042                 mov     [esp], edx
.text:0040C045                 call    sub_40CB60
.text:0040C04A                 mov     eax, edi
.text:0040C04C                 jmp     loc_40BE8A
.text:0040C051 ; ---------------------------------------------------------------------------
.text:0040C051
.text:0040C051 loc_40C051:                             ; CODE XREF: .text:0040C039↑j
.text:0040C051                 test    eax, eax
.text:0040C053                 jnz     short loc_40C03B
.text:0040C055                 mov     dword ptr [edi+10h], 0
.text:0040C05C
.text:0040C05C loc_40C05C:                             ; CODE XREF: .text:0040C034↑j
.text:0040C05C                 mov     dword ptr [edi+14h], 0
.text:0040C063                 jmp     short loc_40C03B
.text:0040C065 ; ---------------------------------------------------------------------------
.text:0040C065
.text:0040C065 loc_40C065:                             ; CODE XREF: .text:0040C02F↑j
.text:0040C065                 mov     dword ptr [esp+4], 40BDFEh
.text:0040C06D                 lea     esi, [edi+14h]
.text:0040C070                 lea     ebp, [edi+10h]
.text:0040C073                 mov     [esp+0Ch], esi
.text:0040C077                 mov     [esp+8], ebp
.text:0040C07B                 mov     [esp], edx
.text:0040C07E                 call    sscanf
.text:0040C083                 jmp     short loc_40C031
.text:0040C085 ; ---------------------------------------------------------------------------
.text:0040C085
.text:0040C085 loc_40C085:                             ; CODE XREF: .text:0040C015↑j
.text:0040C085                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040C089                 jz      short loc_40C0C8
.text:0040C08B
.text:0040C08B loc_40C08B:                             ; CODE XREF: .text:0040C0CC↓j
.text:0040C08B                                         ; .text:0040C0D2↓j
.text:0040C08B                 cmp     al, 5Ch ; '\'
.text:0040C08D                 jnz     short loc_40C017
.text:0040C08F                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040C093                 jz      short loc_40C0B0
.text:0040C095
.text:0040C095 loc_40C095:                             ; CODE XREF: .text:0040C0B4↓j
.text:0040C095                                         ; .text:0040C0BA↓j
.text:0040C095                 cmp     al, 5Ch ; '\'
.text:0040C097                 jnz     loc_40C017
.text:0040C09D                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:0040C0A1                 jnz     loc_40C017
.text:0040C0A7                 mov     byte ptr [ecx], 5Ch ; '\'
.text:0040C0AA                 inc     edx
.text:0040C0AB                 jmp     loc_40C019
.text:0040C0B0 ; ---------------------------------------------------------------------------
.text:0040C0B0
.text:0040C0B0 loc_40C0B0:                             ; CODE XREF: .text:0040C093↑j
.text:0040C0B0                 cmp     byte ptr [edx+2], 31h ; '1'
.text:0040C0B4                 jnz     short loc_40C095
.text:0040C0B6                 cmp     byte ptr [edx+3], 32h ; '2'
.text:0040C0BA                 jnz     short loc_40C095
.text:0040C0BC                 mov     byte ptr [ecx], 9
.text:0040C0BF
.text:0040C0BF loc_40C0BF:                             ; CODE XREF: .text:0040C0D7↓j
.text:0040C0BF                 inc     ecx
.text:0040C0C0                 add     edx, 3
.text:0040C0C3                 jmp     loc_40C01A
.text:0040C0C8 ; ---------------------------------------------------------------------------
.text:0040C0C8
.text:0040C0C8 loc_40C0C8:                             ; CODE XREF: .text:0040C089↑j
.text:0040C0C8                 cmp     byte ptr [edx+2], 34h ; '4'
.text:0040C0CC                 jnz     short loc_40C08B
.text:0040C0CE                 cmp     byte ptr [edx+3], 30h ; '0'
.text:0040C0D2                 jnz     short loc_40C08B
.text:0040C0D4                 mov     byte ptr [ecx], 20h ; ' '
.text:0040C0D7                 jmp     short loc_40C0BF
.text:0040C0D9 ; ---------------------------------------------------------------------------
.text:0040C0D9
.text:0040C0D9 loc_40C0D9:                             ; CODE XREF: .text:0040BFE1↑j
.text:0040C0D9                 mov     dword ptr [esp+4], 40BDFAh
.text:0040C0E1                 mov     [esp], eax
.text:0040C0E4                 call    strspn
.text:0040C0E9                 add     [esp+1Ch], eax
.text:0040C0ED                 jmp     loc_40BFE7
.text:0040C0F2 ; ---------------------------------------------------------------------------
.text:0040C0F2
.text:0040C0F2 loc_40C0F2:                             ; CODE XREF: .text:0040BFC5↑j
.text:0040C0F2                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040C0F6                 jz      short loc_40C139
.text:0040C0F8
.text:0040C0F8 loc_40C0F8:                             ; CODE XREF: .text:0040C13D↓j
.text:0040C0F8                                         ; .text:0040C143↓j
.text:0040C0F8                 cmp     al, 5Ch ; '\'
.text:0040C0FA                 jnz     loc_40BFCB
.text:0040C100                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040C104                 jz      short loc_40C121
.text:0040C106
.text:0040C106 loc_40C106:                             ; CODE XREF: .text:0040C125↓j
.text:0040C106                                         ; .text:0040C12B↓j
.text:0040C106                 cmp     al, 5Ch ; '\'
.text:0040C108                 jnz     loc_40BFCB
.text:0040C10E                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:0040C112                 jnz     loc_40BFCB
.text:0040C118                 mov     byte ptr [ecx], 5Ch ; '\'
.text:0040C11B                 inc     edx
.text:0040C11C                 jmp     loc_40BFCD
.text:0040C121 ; ---------------------------------------------------------------------------
.text:0040C121
.text:0040C121 loc_40C121:                             ; CODE XREF: .text:0040C104↑j
.text:0040C121                 cmp     byte ptr [edx+2], 31h ; '1'
.text:0040C125                 jnz     short loc_40C106
.text:0040C127                 cmp     byte ptr [edx+3], 32h ; '2'
.text:0040C12B                 jnz     short loc_40C106
.text:0040C12D                 mov     byte ptr [ecx], 9
.text:0040C130
.text:0040C130 loc_40C130:                             ; CODE XREF: .text:0040C148↓j
.text:0040C130                 inc     ecx
.text:0040C131                 add     edx, 3
.text:0040C134                 jmp     loc_40BFCE
.text:0040C139 ; ---------------------------------------------------------------------------
.text:0040C139
.text:0040C139 loc_40C139:                             ; CODE XREF: .text:0040C0F6↑j
.text:0040C139                 cmp     byte ptr [edx+2], 34h ; '4'
.text:0040C13D                 jnz     short loc_40C0F8
.text:0040C13F                 cmp     byte ptr [edx+3], 30h ; '0'
.text:0040C143                 jnz     short loc_40C0F8
.text:0040C145                 mov     byte ptr [ecx], 20h ; ' '
.text:0040C148                 jmp     short loc_40C130
.text:0040C14A ; ---------------------------------------------------------------------------
.text:0040C14A
.text:0040C14A loc_40C14A:                             ; CODE XREF: .text:0040BF91↑j
.text:0040C14A                 mov     dword ptr [esp+4], 40BDFAh
.text:0040C152                 mov     [esp], eax
.text:0040C155                 call    strspn
.text:0040C15A                 add     [esp+1Ch], eax
.text:0040C15E                 jmp     loc_40BF97
.text:0040C163 ; ---------------------------------------------------------------------------
.text:0040C163
.text:0040C163 loc_40C163:                             ; CODE XREF: .text:0040BF75↑j
.text:0040C163                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040C167                 jz      short loc_40C1AA
.text:0040C169
.text:0040C169 loc_40C169:                             ; CODE XREF: .text:0040C1AE↓j
.text:0040C169                                         ; .text:0040C1B4↓j
.text:0040C169                 cmp     al, 5Ch ; '\'
.text:0040C16B                 jnz     loc_40BF7B
.text:0040C171                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040C175                 jz      short loc_40C192
.text:0040C177
.text:0040C177 loc_40C177:                             ; CODE XREF: .text:0040C196↓j
.text:0040C177                                         ; .text:0040C19C↓j
.text:0040C177                 cmp     al, 5Ch ; '\'
.text:0040C179                 jnz     loc_40BF7B
.text:0040C17F                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:0040C183                 jnz     loc_40BF7B
.text:0040C189                 mov     byte ptr [ecx], 5Ch ; '\'
.text:0040C18C                 inc     edx
.text:0040C18D                 jmp     loc_40BF7D
.text:0040C192 ; ---------------------------------------------------------------------------
.text:0040C192
.text:0040C192 loc_40C192:                             ; CODE XREF: .text:0040C175↑j
.text:0040C192                 cmp     byte ptr [edx+2], 31h ; '1'
.text:0040C196                 jnz     short loc_40C177
.text:0040C198                 cmp     byte ptr [edx+3], 32h ; '2'
.text:0040C19C                 jnz     short loc_40C177
.text:0040C19E                 mov     byte ptr [ecx], 9
.text:0040C1A1
.text:0040C1A1 loc_40C1A1:                             ; CODE XREF: .text:0040C1B9↓j
.text:0040C1A1                 inc     ecx
.text:0040C1A2                 add     edx, 3
.text:0040C1A5                 jmp     loc_40BF7E
.text:0040C1AA ; ---------------------------------------------------------------------------
.text:0040C1AA
.text:0040C1AA loc_40C1AA:                             ; CODE XREF: .text:0040C167↑j
.text:0040C1AA                 cmp     byte ptr [edx+2], 34h ; '4'
.text:0040C1AE                 jnz     short loc_40C169
.text:0040C1B0                 cmp     byte ptr [edx+3], 30h ; '0'
.text:0040C1B4                 jnz     short loc_40C169
.text:0040C1B6                 mov     byte ptr [ecx], 20h ; ' '
.text:0040C1B9                 jmp     short loc_40C1A1
.text:0040C1BB ; ---------------------------------------------------------------------------
.text:0040C1BB
.text:0040C1BB loc_40C1BB:                             ; CODE XREF: .text:0040BF40↑j
.text:0040C1BB                 mov     dword ptr [esp+4], 40BDFAh
.text:0040C1C3                 mov     [esp], eax
.text:0040C1C6                 call    strspn
.text:0040C1CB                 add     [esp+1Ch], eax
.text:0040C1CF                 jmp     loc_40BF46
.text:0040C1D4 ; ---------------------------------------------------------------------------
.text:0040C1D4
.text:0040C1D4 loc_40C1D4:                             ; CODE XREF: .text:0040BF25↑j
.text:0040C1D4                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040C1D8                 jz      short loc_40C21B
.text:0040C1DA
.text:0040C1DA loc_40C1DA:                             ; CODE XREF: .text:0040C21F↓j
.text:0040C1DA                                         ; .text:0040C225↓j
.text:0040C1DA                 cmp     al, 5Ch ; '\'
.text:0040C1DC                 jnz     loc_40BF2B
.text:0040C1E2                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040C1E6                 jz      short loc_40C203
.text:0040C1E8
.text:0040C1E8 loc_40C1E8:                             ; CODE XREF: .text:0040C207↓j
.text:0040C1E8                                         ; .text:0040C20D↓j
.text:0040C1E8                 cmp     al, 5Ch ; '\'
.text:0040C1EA                 jnz     loc_40BF2B
.text:0040C1F0                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:0040C1F4                 jnz     loc_40BF2B
.text:0040C1FA                 mov     byte ptr [ecx], 5Ch ; '\'
.text:0040C1FD                 inc     edx
.text:0040C1FE                 jmp     loc_40BF2D
.text:0040C203 ; ---------------------------------------------------------------------------
.text:0040C203
.text:0040C203 loc_40C203:                             ; CODE XREF: .text:0040C1E6↑j
.text:0040C203                 cmp     byte ptr [edx+2], 31h ; '1'
.text:0040C207                 jnz     short loc_40C1E8
.text:0040C209                 cmp     byte ptr [edx+3], 32h ; '2'
.text:0040C20D                 jnz     short loc_40C1E8
.text:0040C20F                 mov     byte ptr [ecx], 9
.text:0040C212
.text:0040C212 loc_40C212:                             ; CODE XREF: .text:0040C22A↓j
.text:0040C212                 inc     ecx
.text:0040C213                 add     edx, 3
.text:0040C216                 jmp     loc_40BF2E
.text:0040C21B ; ---------------------------------------------------------------------------
.text:0040C21B
.text:0040C21B loc_40C21B:                             ; CODE XREF: .text:0040C1D8↑j
.text:0040C21B                 cmp     byte ptr [edx+2], 34h ; '4'
.text:0040C21F                 jnz     short loc_40C1DA
.text:0040C221                 cmp     byte ptr [edx+3], 30h ; '0'
.text:0040C225                 jnz     short loc_40C1DA
.text:0040C227                 mov     byte ptr [ecx], 20h ; ' '
.text:0040C22A                 jmp     short loc_40C212
.text:0040C22A ; ---------------------------------------------------------------------------
.text:0040C22C                 align 10h
.text:0040C230
.text:0040C230 loc_40C230:                             ; CODE XREF: .text:0040BE42↑j
.text:0040C230                 mov     dword ptr [esp+4], 0
.text:0040C238                 mov     dword ptr [esp], 0
.text:0040C23F                 call    GetLogicalDriveStringsA
.text:0040C244                 sub     esp, 8
.text:0040C247                 mov     ebx, eax
.text:0040C249                 call    GetProcessHeap
.text:0040C24E                 mov     [esp], eax
.text:0040C251                 mov     [esp+8], ebx
.text:0040C255                 mov     dword ptr [esp+4], 0
.text:0040C25D                 call    HeapAlloc
.text:0040C262                 sub     esp, 0Ch
.text:0040C265                 mov     esi, eax
.text:0040C267                 mov     [esp+4], eax
.text:0040C26B                 mov     [esp], ebx
.text:0040C26E                 call    GetLogicalDriveStringsA
.text:0040C273                 mov     off_411094, esi ; "notset"
.text:0040C279                 sub     esp, 8
.text:0040C27C                 jmp     loc_40BE48
.text:0040C27C ; ---------------------------------------------------------------------------
.text:0040C281 ; const char aSSSSDD[]
.text:0040C281 aSSSSDD         db '%s %s %s %s %d %d',0Ah,0
.text:0040C281                                         ; DATA XREF: .text:0040C3C0↓o
.text:0040C281                                         ; ___addmntentstr+F0↓o
.text:0040C294                 align 10h
.text:0040C2A0                 push    esi
.text:0040C2A1                 push    ebx
.text:0040C2A2                 sub     esp, 44h
.text:0040C2A5                 mov     ebx, [esp+54h]
.text:0040C2A9                 mov     esi, [esp+50h]
.text:0040C2AD                 mov     edx, [ebx]
.text:0040C2AF                 mov     [esp+20h], edx
.text:0040C2B3                 mov     ecx, [ebx+4]
.text:0040C2B6                 mov     [esp+24h], ecx
.text:0040C2BA                 mov     edx, [ebx+8]
.text:0040C2BD                 mov     [esp+28h], edx
.text:0040C2C1                 mov     ecx, [ebx+0Ch]
.text:0040C2C4                 mov     [esp+2Ch], ecx
.text:0040C2C8                 mov     edx, [ebx+10h]
.text:0040C2CB                 mov     [esp+30h], edx
.text:0040C2CF                 mov     ecx, [ebx+14h]
.text:0040C2D2                 mov     dword ptr [esp+8], 2
.text:0040C2DA                 mov     dword ptr [esp+4], 0
.text:0040C2E2                 mov     [esp+34h], ecx
.text:0040C2E6                 mov     [esp], esi
.text:0040C2E9                 call    sub_40CB50
.text:0040C2EE ; ---------------------------------------------------------------------------
.text:0040C2EE                 test    eax, eax
.text:0040C2F0                 mov     edx, 1
.text:0040C2F5                 jnz     loc_40C3F5
.text:0040C2FB                 mov     ebx, [esp+20h]
.text:0040C2FF                 mov     edx, ebx
.text:0040C301                 movzx   eax, byte ptr [ebx]
.text:0040C304                 test    al, al
.text:0040C306                 jz      short loc_40C330
.text:0040C308                 nop
.text:0040C309                 lea     esi, [esi+0]
.text:0040C310
.text:0040C310 loc_40C310:                             ; CODE XREF: .text:0040C32E↓j
.text:0040C310                 cmp     al, 20h ; ' '
.text:0040C312                 jz      loc_40C56A
.text:0040C318                 cmp     al, 9
.text:0040C31A                 jz      loc_40C56A
.text:0040C320                 cmp     al, 5Ch ; '\'
.text:0040C322                 jz      loc_40C56A
.text:0040C328                 inc     ebx
.text:0040C329                 movzx   eax, byte ptr [ebx]
.text:0040C32C                 test    al, al
.text:0040C32E                 jnz     short loc_40C310
.text:0040C330
.text:0040C330 loc_40C330:                             ; CODE XREF: .text:0040C306↑j
.text:0040C330                                         ; .text:0040C56C↓j ...
.text:0040C330                 mov     ebx, [esp+24h]
.text:0040C334                 mov     edx, ebx
.text:0040C336                 movzx   eax, byte ptr [ebx]
.text:0040C339                 test    al, al
.text:0040C33B                 jz      short loc_40C360
.text:0040C33D                 lea     esi, [esi+0]
.text:0040C340
.text:0040C340 loc_40C340:                             ; CODE XREF: .text:0040C35E↓j
.text:0040C340                 cmp     al, 20h ; ' '
.text:0040C342                 jz      loc_40C4EA
.text:0040C348                 cmp     al, 9
.text:0040C34A                 jz      loc_40C4EA
.text:0040C350                 cmp     al, 5Ch ; '\'
.text:0040C352                 jz      loc_40C4EA
.text:0040C358                 inc     ebx
.text:0040C359                 movzx   eax, byte ptr [ebx]
.text:0040C35C                 test    al, al
.text:0040C35E                 jnz     short loc_40C340
.text:0040C360
.text:0040C360 loc_40C360:                             ; CODE XREF: .text:0040C33B↑j
.text:0040C360                                         ; .text:0040C4EC↓j ...
.text:0040C360                 mov     ebx, [esp+28h]
.text:0040C364                 mov     edx, ebx
.text:0040C366                 movzx   eax, byte ptr [ebx]
.text:0040C369                 test    al, al
.text:0040C36B                 jz      short loc_40C390
.text:0040C36D                 lea     esi, [esi+0]
.text:0040C370
.text:0040C370 loc_40C370:                             ; CODE XREF: .text:0040C38E↓j
.text:0040C370                 cmp     al, 20h ; ' '
.text:0040C372                 jz      loc_40C46E
.text:0040C378                 cmp     al, 9
.text:0040C37A                 jz      loc_40C46E
.text:0040C380                 cmp     al, 5Ch ; '\'
.text:0040C382                 jz      loc_40C46E
.text:0040C388                 inc     ebx
.text:0040C389                 movzx   eax, byte ptr [ebx]
.text:0040C38C                 test    al, al
.text:0040C38E                 jnz     short loc_40C370
.text:0040C390
.text:0040C390 loc_40C390:                             ; CODE XREF: .text:0040C36B↑j
.text:0040C390                                         ; .text:0040C470↓j ...
.text:0040C390                 mov     edx, [esp+2Ch]
.text:0040C394                 mov     ebx, edx
.text:0040C396                 movzx   eax, byte ptr [edx]
.text:0040C399                 test    al, al
.text:0040C39B                 jz      short loc_40C3B4
.text:0040C39D                 lea     esi, [esi+0]
.text:0040C3A0
.text:0040C3A0 loc_40C3A0:                             ; CODE XREF: .text:0040C3B2↓j
.text:0040C3A0                 cmp     al, 20h ; ' '
.text:0040C3A2                 jz      short loc_40C3FD
.text:0040C3A4                 cmp     al, 9
.text:0040C3A6                 jz      short loc_40C3FD
.text:0040C3A8                 cmp     al, 5Ch ; '\'
.text:0040C3AA                 jz      short loc_40C3FD
.text:0040C3AC                 inc     ebx
.text:0040C3AD                 movzx   eax, byte ptr [ebx]
.text:0040C3B0                 test    al, al
.text:0040C3B2                 jnz     short loc_40C3A0
.text:0040C3B4
.text:0040C3B4 loc_40C3B4:                             ; CODE XREF: .text:0040C39B↑j
.text:0040C3B4                                         ; .text:0040C3FF↓j ...
.text:0040C3B4                 mov     [esp+14h], edx
.text:0040C3B8                 mov     ecx, [esp+34h]
.text:0040C3BC                 mov     ebx, [esp+30h]
.text:0040C3C0                 mov     dword ptr [esp+4], offset aSSSSDD ; "%s %s %s %s %d %d\n"
.text:0040C3C8                 mov     edx, [esp+24h]
.text:0040C3CC                 mov     [esp+1Ch], ecx
.text:0040C3D0                 mov     ecx, [esp+28h]
.text:0040C3D4                 mov     [esp+18h], ebx
.text:0040C3D8                 mov     ebx, [esp+20h]
.text:0040C3DC                 mov     [esp+0Ch], edx
.text:0040C3E0                 mov     [esp+10h], ecx
.text:0040C3E4                 mov     [esp+8], ebx
.text:0040C3E8                 mov     [esp], esi
.text:0040C3EB                 call    fprintf
.text:0040C3F0                 mov     edx, eax
.text:0040C3F2                 shr     edx, 1Fh
.text:0040C3F5
.text:0040C3F5 loc_40C3F5:                             ; CODE XREF: .text:0040C2F5↑j
.text:0040C3F5                 add     esp, 44h
.text:0040C3F8                 mov     eax, edx
.text:0040C3FA                 pop     ebx
.text:0040C3FB                 pop     esi
.text:0040C3FC                 retn
.text:0040C3FD ; ---------------------------------------------------------------------------
.text:0040C3FD
.text:0040C3FD loc_40C3FD:                             ; CODE XREF: .text:0040C3A2↑j
.text:0040C3FD                                         ; .text:0040C3A6↑j ...
.text:0040C3FD                 test    al, al
.text:0040C3FF                 jz      short loc_40C3B4
.text:0040C401                 mov     [esp], edx
.text:0040C404                 mov     ebx, edx
.text:0040C406                 call    strlen
.text:0040C40B                 lea     edx, ds:1[eax*4]
.text:0040C412                 mov     [esp], edx
.text:0040C415                 call    malloc
.text:0040C41A                 mov     [esp+2Ch], eax
.text:0040C41E                 mov     edx, eax
.text:0040C420
.text:0040C420 loc_40C420:                             ; CODE XREF: .text:0040C438↓j
.text:0040C420                 movzx   eax, byte ptr [ebx]
.text:0040C423                 cmp     al, 20h ; ' '
.text:0040C425                 jz      short loc_40C45D
.text:0040C427                 cmp     al, 9
.text:0040C429                 jz      short loc_40C44C
.text:0040C42B                 cmp     al, 5Ch ; '\'
.text:0040C42D                 jz      short loc_40C443
.text:0040C42F                 mov     [edx], al
.text:0040C431
.text:0040C431 loc_40C431:                             ; CODE XREF: .text:0040C44A↓j
.text:0040C431                                         ; .text:0040C45B↓j ...
.text:0040C431                 movzx   ecx, byte ptr [ebx]
.text:0040C434                 inc     edx
.text:0040C435                 inc     ebx
.text:0040C436                 test    cl, cl
.text:0040C438                 jnz     short loc_40C420
.text:0040C43A                 mov     edx, [esp+2Ch]
.text:0040C43E                 jmp     loc_40C3B4
.text:0040C443 ; ---------------------------------------------------------------------------
.text:0040C443
.text:0040C443 loc_40C443:                             ; CODE XREF: .text:0040C42D↑j
.text:0040C443                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040C446                 inc     edx
.text:0040C447                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040C44A                 jmp     short loc_40C431
.text:0040C44C ; ---------------------------------------------------------------------------
.text:0040C44C
.text:0040C44C loc_40C44C:                             ; CODE XREF: .text:0040C429↑j
.text:0040C44C                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040C44F                 inc     edx
.text:0040C450                 mov     byte ptr [edx], 30h ; '0'
.text:0040C453                 inc     edx
.text:0040C454                 mov     byte ptr [edx], 31h ; '1'
.text:0040C457                 inc     edx
.text:0040C458                 mov     byte ptr [edx], 32h ; '2'
.text:0040C45B                 jmp     short loc_40C431
.text:0040C45D ; ---------------------------------------------------------------------------
.text:0040C45D
.text:0040C45D loc_40C45D:                             ; CODE XREF: .text:0040C425↑j
.text:0040C45D                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040C460                 inc     edx
.text:0040C461                 mov     byte ptr [edx], 30h ; '0'
.text:0040C464                 inc     edx
.text:0040C465                 mov     byte ptr [edx], 34h ; '4'
.text:0040C468                 inc     edx
.text:0040C469                 mov     byte ptr [edx], 30h ; '0'
.text:0040C46C                 jmp     short loc_40C431
.text:0040C46E ; ---------------------------------------------------------------------------
.text:0040C46E
.text:0040C46E loc_40C46E:                             ; CODE XREF: .text:0040C372↑j
.text:0040C46E                                         ; .text:0040C37A↑j ...
.text:0040C46E                 test    al, al
.text:0040C470                 jz      loc_40C390
.text:0040C476                 mov     [esp], edx
.text:0040C479                 mov     ebx, edx
.text:0040C47B                 call    strlen
.text:0040C480                 lea     edx, ds:1[eax*4]
.text:0040C487                 mov     [esp], edx
.text:0040C48A                 call    malloc
.text:0040C48F                 mov     [esp+28h], eax
.text:0040C493                 mov     edx, eax
.text:0040C495                 lea     esi, [esi+0]
.text:0040C499                 lea     edi, [edi+0]
.text:0040C4A0
.text:0040C4A0 loc_40C4A0:                             ; CODE XREF: .text:0040C4B8↓j
.text:0040C4A0                 movzx   eax, byte ptr [ebx]
.text:0040C4A3                 cmp     al, 20h ; ' '
.text:0040C4A5                 jz      short loc_40C4D9
.text:0040C4A7                 cmp     al, 9
.text:0040C4A9                 jz      short loc_40C4C8
.text:0040C4AB                 cmp     al, 5Ch ; '\'
.text:0040C4AD                 jz      short loc_40C4BF
.text:0040C4AF                 mov     [edx], al
.text:0040C4B1
.text:0040C4B1 loc_40C4B1:                             ; CODE XREF: .text:0040C4C6↓j
.text:0040C4B1                                         ; .text:0040C4D7↓j ...
.text:0040C4B1                 movzx   ecx, byte ptr [ebx]
.text:0040C4B4                 inc     edx
.text:0040C4B5                 inc     ebx
.text:0040C4B6                 test    cl, cl
.text:0040C4B8                 jnz     short loc_40C4A0
.text:0040C4BA                 jmp     loc_40C390
.text:0040C4BF ; ---------------------------------------------------------------------------
.text:0040C4BF
.text:0040C4BF loc_40C4BF:                             ; CODE XREF: .text:0040C4AD↑j
.text:0040C4BF                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040C4C2                 inc     edx
.text:0040C4C3                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040C4C6                 jmp     short loc_40C4B1
.text:0040C4C8 ; ---------------------------------------------------------------------------
.text:0040C4C8
.text:0040C4C8 loc_40C4C8:                             ; CODE XREF: .text:0040C4A9↑j
.text:0040C4C8                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040C4CB                 inc     edx
.text:0040C4CC                 mov     byte ptr [edx], 30h ; '0'
.text:0040C4CF                 inc     edx
.text:0040C4D0                 mov     byte ptr [edx], 31h ; '1'
.text:0040C4D3                 inc     edx
.text:0040C4D4                 mov     byte ptr [edx], 32h ; '2'
.text:0040C4D7                 jmp     short loc_40C4B1
.text:0040C4D9 ; ---------------------------------------------------------------------------
.text:0040C4D9
.text:0040C4D9 loc_40C4D9:                             ; CODE XREF: .text:0040C4A5↑j
.text:0040C4D9                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040C4DC                 inc     edx
.text:0040C4DD                 mov     byte ptr [edx], 30h ; '0'
.text:0040C4E0                 inc     edx
.text:0040C4E1                 mov     byte ptr [edx], 34h ; '4'
.text:0040C4E4                 inc     edx
.text:0040C4E5                 mov     byte ptr [edx], 30h ; '0'
.text:0040C4E8                 jmp     short loc_40C4B1
.text:0040C4EA ; ---------------------------------------------------------------------------
.text:0040C4EA
.text:0040C4EA loc_40C4EA:                             ; CODE XREF: .text:0040C342↑j
.text:0040C4EA                                         ; .text:0040C34A↑j ...
.text:0040C4EA                 test    al, al
.text:0040C4EC                 jz      loc_40C360
.text:0040C4F2                 mov     [esp], edx
.text:0040C4F5                 mov     ebx, edx
.text:0040C4F7                 call    strlen
.text:0040C4FC                 lea     edx, ds:1[eax*4]
.text:0040C503                 mov     [esp], edx
.text:0040C506                 call    malloc
.text:0040C50B                 mov     [esp+24h], eax
.text:0040C50F                 mov     edx, eax
.text:0040C511                 jmp     short loc_40C520
.text:0040C511 ; ---------------------------------------------------------------------------
.text:0040C513                 align 10h
.text:0040C520
.text:0040C520 loc_40C520:                             ; CODE XREF: .text:0040C511↑j
.text:0040C520                                         ; .text:0040C538↓j
.text:0040C520                 movzx   eax, byte ptr [ebx]
.text:0040C523                 cmp     al, 20h ; ' '
.text:0040C525                 jz      short loc_40C559
.text:0040C527                 cmp     al, 9
.text:0040C529                 jz      short loc_40C548
.text:0040C52B                 cmp     al, 5Ch ; '\'
.text:0040C52D                 jz      short loc_40C53F
.text:0040C52F                 mov     [edx], al
.text:0040C531
.text:0040C531 loc_40C531:                             ; CODE XREF: .text:0040C546↓j
.text:0040C531                                         ; .text:0040C557↓j ...
.text:0040C531                 movzx   ecx, byte ptr [ebx]
.text:0040C534                 inc     edx
.text:0040C535                 inc     ebx
.text:0040C536                 test    cl, cl
.text:0040C538                 jnz     short loc_40C520
.text:0040C53A                 jmp     loc_40C360
.text:0040C53F ; ---------------------------------------------------------------------------
.text:0040C53F
.text:0040C53F loc_40C53F:                             ; CODE XREF: .text:0040C52D↑j
.text:0040C53F                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040C542                 inc     edx
.text:0040C543                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040C546                 jmp     short loc_40C531
.text:0040C548 ; ---------------------------------------------------------------------------
.text:0040C548
.text:0040C548 loc_40C548:                             ; CODE XREF: .text:0040C529↑j
.text:0040C548                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040C54B                 inc     edx
.text:0040C54C                 mov     byte ptr [edx], 30h ; '0'
.text:0040C54F                 inc     edx
.text:0040C550                 mov     byte ptr [edx], 31h ; '1'
.text:0040C553                 inc     edx
.text:0040C554                 mov     byte ptr [edx], 32h ; '2'
.text:0040C557                 jmp     short loc_40C531
.text:0040C559 ; ---------------------------------------------------------------------------
.text:0040C559
.text:0040C559 loc_40C559:                             ; CODE XREF: .text:0040C525↑j
.text:0040C559                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040C55C                 inc     edx
.text:0040C55D                 mov     byte ptr [edx], 30h ; '0'
.text:0040C560                 inc     edx
.text:0040C561                 mov     byte ptr [edx], 34h ; '4'
.text:0040C564                 inc     edx
.text:0040C565                 mov     byte ptr [edx], 30h ; '0'
.text:0040C568                 jmp     short loc_40C531
.text:0040C56A ; ---------------------------------------------------------------------------
.text:0040C56A
.text:0040C56A loc_40C56A:                             ; CODE XREF: .text:0040C312↑j
.text:0040C56A                                         ; .text:0040C31A↑j ...
.text:0040C56A                 test    al, al
.text:0040C56C                 jz      loc_40C330
.text:0040C572                 mov     [esp], edx
.text:0040C575                 mov     ebx, edx
.text:0040C577                 call    strlen
.text:0040C57C                 lea     ecx, ds:1[eax*4]
.text:0040C583                 mov     [esp], ecx
.text:0040C586                 call    malloc
.text:0040C58B                 mov     [esp+20h], eax
.text:0040C58F                 mov     edx, eax
.text:0040C591                 jmp     short loc_40C5A0
.text:0040C591 ; ---------------------------------------------------------------------------
.text:0040C593                 align 10h
.text:0040C5A0
.text:0040C5A0 loc_40C5A0:                             ; CODE XREF: .text:0040C591↑j
.text:0040C5A0                                         ; .text:0040C5B8↓j
.text:0040C5A0                 movzx   eax, byte ptr [ebx]
.text:0040C5A3                 cmp     al, 20h ; ' '
.text:0040C5A5                 jz      short loc_40C5D9
.text:0040C5A7                 cmp     al, 9
.text:0040C5A9                 jz      short loc_40C5C8
.text:0040C5AB                 cmp     al, 5Ch ; '\'
.text:0040C5AD                 jz      short loc_40C5BF
.text:0040C5AF                 mov     [edx], al
.text:0040C5B1
.text:0040C5B1 loc_40C5B1:                             ; CODE XREF: .text:0040C5C6↓j
.text:0040C5B1                                         ; .text:0040C5D7↓j ...
.text:0040C5B1                 movzx   ecx, byte ptr [ebx]
.text:0040C5B4                 inc     edx
.text:0040C5B5                 inc     ebx
.text:0040C5B6                 test    cl, cl
.text:0040C5B8                 jnz     short loc_40C5A0
.text:0040C5BA                 jmp     loc_40C330
.text:0040C5BF ; ---------------------------------------------------------------------------
.text:0040C5BF
.text:0040C5BF loc_40C5BF:                             ; CODE XREF: .text:0040C5AD↑j
.text:0040C5BF                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040C5C2                 inc     edx
.text:0040C5C3                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040C5C6                 jmp     short loc_40C5B1
.text:0040C5C8 ; ---------------------------------------------------------------------------
.text:0040C5C8
.text:0040C5C8 loc_40C5C8:                             ; CODE XREF: .text:0040C5A9↑j
.text:0040C5C8                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040C5CB                 inc     edx
.text:0040C5CC                 mov     byte ptr [edx], 30h ; '0'
.text:0040C5CF                 inc     edx
.text:0040C5D0                 mov     byte ptr [edx], 31h ; '1'
.text:0040C5D3                 inc     edx
.text:0040C5D4                 mov     byte ptr [edx], 32h ; '2'
.text:0040C5D7                 jmp     short loc_40C5B1
.text:0040C5D9 ; ---------------------------------------------------------------------------
.text:0040C5D9
.text:0040C5D9 loc_40C5D9:                             ; CODE XREF: .text:0040C5A5↑j
.text:0040C5D9                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040C5DC                 inc     edx
.text:0040C5DD                 mov     byte ptr [edx], 30h ; '0'
.text:0040C5E0                 inc     edx
.text:0040C5E1                 mov     byte ptr [edx], 34h ; '4'
.text:0040C5E4                 inc     edx
.text:0040C5E5                 mov     byte ptr [edx], 30h ; '0'
.text:0040C5E8                 jmp     short loc_40C5B1
.text:0040C5E8 ; ---------------------------------------------------------------------------
.text:0040C5EA                 align 10h
.text:0040C5F0
.text:0040C5F0 ; =============== S U B R O U T I N E =======================================
.text:0040C5F0
.text:0040C5F0 ; Attributes: info_from_lumina
.text:0040C5F0
.text:0040C5F0 ; int __cdecl __addmntentstr(char *, int)
.text:0040C5F0 ___addmntentstr proc near               ; CODE XREF: .text:0040BEBA↑p
.text:0040C5F0
.text:0040C5F0 Buffer          = dword ptr -4Ch
.text:0040C5F0 Format          = dword ptr -48h
.text:0040C5F0 var_44          = dword ptr -44h
.text:0040C5F0 var_40          = dword ptr -40h
.text:0040C5F0 var_3C          = dword ptr -3Ch
.text:0040C5F0 var_38          = dword ptr -38h
.text:0040C5F0 var_34          = dword ptr -34h
.text:0040C5F0 var_30          = dword ptr -30h
.text:0040C5F0 var_2C          = dword ptr -2Ch
.text:0040C5F0 var_28          = dword ptr -28h
.text:0040C5F0 var_24          = dword ptr -24h
.text:0040C5F0 Str             = dword ptr -20h
.text:0040C5F0 var_1C          = dword ptr -1Ch
.text:0040C5F0 var_18          = dword ptr -18h
.text:0040C5F0 arg_0           = dword ptr  4
.text:0040C5F0 arg_4           = dword ptr  8
.text:0040C5F0
.text:0040C5F0                 push    ebx
.text:0040C5F1                 sub     esp, 48h
.text:0040C5F4                 mov     edx, [esp+4Ch+arg_4]
.text:0040C5F8                 mov     ecx, [edx]
.text:0040C5FA                 mov     [esp+4Ch+var_2C], ecx
.text:0040C5FE                 mov     ebx, [edx+4]
.text:0040C601                 mov     [esp+4Ch+var_28], ebx
.text:0040C605                 mov     ebx, [edx+8]
.text:0040C608                 mov     [esp+4Ch+var_24], ebx
.text:0040C60C                 mov     ebx, [edx+0Ch]
.text:0040C60F                 mov     [esp+4Ch+Str], ebx
.text:0040C613                 mov     ebx, [edx+10h]
.text:0040C616                 mov     [esp+4Ch+var_1C], ebx
.text:0040C61A                 mov     ebx, [edx+14h]
.text:0040C61D                 mov     [esp+4Ch+var_18], ebx
.text:0040C621                 mov     ebx, ecx
.text:0040C623                 movzx   eax, byte ptr [ecx]
.text:0040C626                 test    al, al
.text:0040C628                 jz      loc_40C911
.text:0040C62E                 mov     esi, esi
.text:0040C630
.text:0040C630 loc_40C630:                             ; CODE XREF: ___addmntentstr+5E↓j
.text:0040C630                 cmp     al, 20h ; ' '
.text:0040C632                 jz      loc_40C890
.text:0040C638                 cmp     al, 9
.text:0040C63A                 jz      loc_40C890
.text:0040C640                 cmp     al, 5Ch ; '\'
.text:0040C642                 jz      loc_40C890
.text:0040C648                 inc     ebx
.text:0040C649                 movzx   eax, byte ptr [ebx]
.text:0040C64C                 test    al, al
.text:0040C64E                 jnz     short loc_40C630
.text:0040C650
.text:0040C650 loc_40C650:                             ; CODE XREF: ___addmntentstr+2A2↓j
.text:0040C650                                         ; ___addmntentstr+2EA↓j
.text:0040C650                 mov     ebx, [esp+4Ch+var_28]
.text:0040C654                 mov     edx, ebx
.text:0040C656                 movzx   eax, byte ptr [ebx]
.text:0040C659                 test    al, al
.text:0040C65B                 jz      short loc_40C680
.text:0040C65D                 lea     esi, [esi+0]
.text:0040C660
.text:0040C660 loc_40C660:                             ; CODE XREF: ___addmntentstr+8E↓j
.text:0040C660                 cmp     al, 20h ; ' '
.text:0040C662                 jz      loc_40C80A
.text:0040C668                 cmp     al, 9
.text:0040C66A                 jz      loc_40C80A
.text:0040C670                 cmp     al, 5Ch ; '\'
.text:0040C672                 jz      loc_40C80A
.text:0040C678                 inc     ebx
.text:0040C679                 movzx   eax, byte ptr [ebx]
.text:0040C67C                 test    al, al
.text:0040C67E                 jnz     short loc_40C660
.text:0040C680
.text:0040C680 loc_40C680:                             ; CODE XREF: ___addmntentstr+6B↑j
.text:0040C680                                         ; ___addmntentstr+21C↓j ...
.text:0040C680                 mov     ebx, [esp+4Ch+var_24]
.text:0040C684                 mov     edx, ebx
.text:0040C686                 movzx   eax, byte ptr [ebx]
.text:0040C689                 test    al, al
.text:0040C68B                 jz      short loc_40C6B0
.text:0040C68D                 lea     esi, [esi+0]
.text:0040C690
.text:0040C690 loc_40C690:                             ; CODE XREF: ___addmntentstr+BE↓j
.text:0040C690                 cmp     al, 20h ; ' '
.text:0040C692                 jz      loc_40C78E
.text:0040C698                 cmp     al, 9
.text:0040C69A                 jz      loc_40C78E
.text:0040C6A0                 cmp     al, 5Ch ; '\'
.text:0040C6A2                 jz      loc_40C78E
.text:0040C6A8                 inc     ebx
.text:0040C6A9                 movzx   eax, byte ptr [ebx]
.text:0040C6AC                 test    al, al
.text:0040C6AE                 jnz     short loc_40C690
.text:0040C6B0
.text:0040C6B0 loc_40C6B0:                             ; CODE XREF: ___addmntentstr+9B↑j
.text:0040C6B0                                         ; ___addmntentstr+1A0↓j ...
.text:0040C6B0                 mov     edx, [esp+4Ch+Str]
.text:0040C6B4                 mov     ebx, edx
.text:0040C6B6                 movzx   eax, byte ptr [edx]
.text:0040C6B9                 test    al, al
.text:0040C6BB                 jz      short loc_40C6D4
.text:0040C6BD                 lea     esi, [esi+0]
.text:0040C6C0
.text:0040C6C0 loc_40C6C0:                             ; CODE XREF: ___addmntentstr+E2↓j
.text:0040C6C0                 cmp     al, 20h ; ' '
.text:0040C6C2                 jz      short loc_40C71C
.text:0040C6C4                 cmp     al, 9
.text:0040C6C6                 jz      short loc_40C71C
.text:0040C6C8                 cmp     al, 5Ch ; '\'
.text:0040C6CA                 jz      short loc_40C71C
.text:0040C6CC                 inc     ebx
.text:0040C6CD                 movzx   eax, byte ptr [ebx]
.text:0040C6D0                 test    al, al
.text:0040C6D2                 jnz     short loc_40C6C0
.text:0040C6D4
.text:0040C6D4 loc_40C6D4:                             ; CODE XREF: ___addmntentstr+CB↑j
.text:0040C6D4                                         ; ___addmntentstr+12E↓j ...
.text:0040C6D4                 mov     [esp+4Ch+var_38], edx
.text:0040C6D8                 mov     ebx, [esp+4Ch+var_18]
.text:0040C6DC                 mov     ecx, [esp+4Ch+var_1C]
.text:0040C6E0                 mov     [esp+4Ch+Format], offset aSSSSDD ; "%s %s %s %s %d %d\n"
.text:0040C6E8                 mov     edx, [esp+4Ch+var_2C]
.text:0040C6EC                 mov     [esp+4Ch+var_30], ebx
.text:0040C6F0                 mov     ebx, [esp+4Ch+var_24]
.text:0040C6F4                 mov     [esp+4Ch+var_34], ecx
.text:0040C6F8                 mov     ecx, [esp+4Ch+var_28]
.text:0040C6FC                 mov     [esp+4Ch+var_3C], ebx
.text:0040C700                 mov     ebx, [esp+4Ch+arg_0]
.text:0040C704                 mov     [esp+4Ch+var_40], ecx
.text:0040C708                 mov     [esp+4Ch+var_44], edx
.text:0040C70C                 mov     [esp+4Ch+Buffer], ebx ; Buffer
.text:0040C70F                 call    sprintf
.text:0040C714                 add     esp, 48h
.text:0040C717                 shr     eax, 1Fh
.text:0040C71A                 pop     ebx
.text:0040C71B                 retn
.text:0040C71C ; ---------------------------------------------------------------------------
.text:0040C71C
.text:0040C71C loc_40C71C:                             ; CODE XREF: ___addmntentstr+D2↑j
.text:0040C71C                                         ; ___addmntentstr+D6↑j ...
.text:0040C71C                 test    al, al
.text:0040C71E                 jz      short loc_40C6D4
.text:0040C720                 mov     [esp+4Ch+Buffer], edx ; Str
.text:0040C723                 mov     ebx, edx
.text:0040C725                 call    strlen
.text:0040C72A                 lea     edx, ds:1[eax*4]
.text:0040C731                 mov     [esp+4Ch+Buffer], edx ; Size
.text:0040C734                 call    malloc
.text:0040C739                 mov     [esp+4Ch+Str], eax
.text:0040C73D                 mov     edx, eax
.text:0040C73F                 nop
.text:0040C740
.text:0040C740 loc_40C740:                             ; CODE XREF: ___addmntentstr+168↓j
.text:0040C740                 movzx   eax, byte ptr [ebx]
.text:0040C743                 cmp     al, 20h ; ' '
.text:0040C745                 jz      short loc_40C77D
.text:0040C747                 cmp     al, 9
.text:0040C749                 jz      short loc_40C76C
.text:0040C74B                 cmp     al, 5Ch ; '\'
.text:0040C74D                 jz      short loc_40C763
.text:0040C74F                 mov     [edx], al
.text:0040C751
.text:0040C751 loc_40C751:                             ; CODE XREF: ___addmntentstr+17A↓j
.text:0040C751                                         ; ___addmntentstr+18B↓j ...
.text:0040C751                 movzx   ecx, byte ptr [ebx]
.text:0040C754                 inc     edx
.text:0040C755                 inc     ebx
.text:0040C756                 test    cl, cl
.text:0040C758                 jnz     short loc_40C740
.text:0040C75A                 mov     edx, [esp+4Ch+Str]
.text:0040C75E                 jmp     loc_40C6D4
.text:0040C763 ; ---------------------------------------------------------------------------
.text:0040C763
.text:0040C763 loc_40C763:                             ; CODE XREF: ___addmntentstr+15D↑j
.text:0040C763                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040C766                 inc     edx
.text:0040C767                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040C76A                 jmp     short loc_40C751
.text:0040C76C ; ---------------------------------------------------------------------------
.text:0040C76C
.text:0040C76C loc_40C76C:                             ; CODE XREF: ___addmntentstr+159↑j
.text:0040C76C                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040C76F                 inc     edx
.text:0040C770                 mov     byte ptr [edx], 30h ; '0'
.text:0040C773                 inc     edx
.text:0040C774                 mov     byte ptr [edx], 31h ; '1'
.text:0040C777                 inc     edx
.text:0040C778                 mov     byte ptr [edx], 32h ; '2'
.text:0040C77B                 jmp     short loc_40C751
.text:0040C77D ; ---------------------------------------------------------------------------
.text:0040C77D
.text:0040C77D loc_40C77D:                             ; CODE XREF: ___addmntentstr+155↑j
.text:0040C77D                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040C780                 inc     edx
.text:0040C781                 mov     byte ptr [edx], 30h ; '0'
.text:0040C784                 inc     edx
.text:0040C785                 mov     byte ptr [edx], 34h ; '4'
.text:0040C788                 inc     edx
.text:0040C789                 mov     byte ptr [edx], 30h ; '0'
.text:0040C78C                 jmp     short loc_40C751
.text:0040C78E ; ---------------------------------------------------------------------------
.text:0040C78E
.text:0040C78E loc_40C78E:                             ; CODE XREF: ___addmntentstr+A2↑j
.text:0040C78E                                         ; ___addmntentstr+AA↑j ...
.text:0040C78E                 test    al, al
.text:0040C790                 jz      loc_40C6B0
.text:0040C796                 mov     [esp+4Ch+Buffer], edx ; Str
.text:0040C799                 mov     ebx, edx
.text:0040C79B                 call    strlen
.text:0040C7A0                 lea     edx, ds:1[eax*4]
.text:0040C7A7                 mov     [esp+4Ch+Buffer], edx ; Size
.text:0040C7AA                 call    malloc
.text:0040C7AF                 mov     [esp+4Ch+var_24], eax
.text:0040C7B3                 mov     edx, eax
.text:0040C7B5                 lea     esi, [esi+0]
.text:0040C7B9                 lea     edi, [edi+0]
.text:0040C7C0
.text:0040C7C0 loc_40C7C0:                             ; CODE XREF: ___addmntentstr+1E8↓j
.text:0040C7C0                 movzx   eax, byte ptr [ebx]
.text:0040C7C3                 cmp     al, 20h ; ' '
.text:0040C7C5                 jz      short loc_40C7F9
.text:0040C7C7                 cmp     al, 9
.text:0040C7C9                 jz      short loc_40C7E8
.text:0040C7CB                 cmp     al, 5Ch ; '\'
.text:0040C7CD                 jz      short loc_40C7DF
.text:0040C7CF                 mov     [edx], al
.text:0040C7D1
.text:0040C7D1 loc_40C7D1:                             ; CODE XREF: ___addmntentstr+1F6↓j
.text:0040C7D1                                         ; ___addmntentstr+207↓j ...
.text:0040C7D1                 movzx   ecx, byte ptr [ebx]
.text:0040C7D4                 inc     edx
.text:0040C7D5                 inc     ebx
.text:0040C7D6                 test    cl, cl
.text:0040C7D8                 jnz     short loc_40C7C0
.text:0040C7DA                 jmp     loc_40C6B0
.text:0040C7DF ; ---------------------------------------------------------------------------
.text:0040C7DF
.text:0040C7DF loc_40C7DF:                             ; CODE XREF: ___addmntentstr+1DD↑j
.text:0040C7DF                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040C7E2                 inc     edx
.text:0040C7E3                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040C7E6                 jmp     short loc_40C7D1
.text:0040C7E8 ; ---------------------------------------------------------------------------
.text:0040C7E8
.text:0040C7E8 loc_40C7E8:                             ; CODE XREF: ___addmntentstr+1D9↑j
.text:0040C7E8                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040C7EB                 inc     edx
.text:0040C7EC                 mov     byte ptr [edx], 30h ; '0'
.text:0040C7EF                 inc     edx
.text:0040C7F0                 mov     byte ptr [edx], 31h ; '1'
.text:0040C7F3                 inc     edx
.text:0040C7F4                 mov     byte ptr [edx], 32h ; '2'
.text:0040C7F7                 jmp     short loc_40C7D1
.text:0040C7F9 ; ---------------------------------------------------------------------------
.text:0040C7F9
.text:0040C7F9 loc_40C7F9:                             ; CODE XREF: ___addmntentstr+1D5↑j
.text:0040C7F9                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040C7FC                 inc     edx
.text:0040C7FD                 mov     byte ptr [edx], 30h ; '0'
.text:0040C800                 inc     edx
.text:0040C801                 mov     byte ptr [edx], 34h ; '4'
.text:0040C804                 inc     edx
.text:0040C805                 mov     byte ptr [edx], 30h ; '0'
.text:0040C808                 jmp     short loc_40C7D1
.text:0040C80A ; ---------------------------------------------------------------------------
.text:0040C80A
.text:0040C80A loc_40C80A:                             ; CODE XREF: ___addmntentstr+72↑j
.text:0040C80A                                         ; ___addmntentstr+7A↑j ...
.text:0040C80A                 test    al, al
.text:0040C80C                 jz      loc_40C680
.text:0040C812                 mov     [esp+4Ch+Buffer], edx ; Str
.text:0040C815                 mov     ebx, edx
.text:0040C817                 call    strlen
.text:0040C81C                 lea     edx, ds:1[eax*4]
.text:0040C823                 mov     [esp+4Ch+Buffer], edx ; Size
.text:0040C826                 call    malloc
.text:0040C82B                 mov     [esp+4Ch+var_28], eax
.text:0040C82F                 mov     edx, eax
.text:0040C831                 jmp     short loc_40C840
.text:0040C831 ; ---------------------------------------------------------------------------
.text:0040C833                 align 10h
.text:0040C840
.text:0040C840 loc_40C840:                             ; CODE XREF: ___addmntentstr+241↑j
.text:0040C840                                         ; ___addmntentstr+268↓j
.text:0040C840                 movzx   eax, byte ptr [ebx]
.text:0040C843                 cmp     al, 20h ; ' '
.text:0040C845                 jz      short loc_40C879
.text:0040C847                 cmp     al, 9
.text:0040C849                 jz      short loc_40C868
.text:0040C84B                 cmp     al, 5Ch ; '\'
.text:0040C84D                 jz      short loc_40C85F
.text:0040C84F                 mov     [edx], al
.text:0040C851
.text:0040C851 loc_40C851:                             ; CODE XREF: ___addmntentstr+276↓j
.text:0040C851                                         ; ___addmntentstr+287↓j ...
.text:0040C851                 movzx   ecx, byte ptr [ebx]
.text:0040C854                 inc     edx
.text:0040C855                 inc     ebx
.text:0040C856                 test    cl, cl
.text:0040C858                 jnz     short loc_40C840
.text:0040C85A                 jmp     loc_40C680
.text:0040C85F ; ---------------------------------------------------------------------------
.text:0040C85F
.text:0040C85F loc_40C85F:                             ; CODE XREF: ___addmntentstr+25D↑j
.text:0040C85F                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040C862                 inc     edx
.text:0040C863                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040C866                 jmp     short loc_40C851
.text:0040C868 ; ---------------------------------------------------------------------------
.text:0040C868
.text:0040C868 loc_40C868:                             ; CODE XREF: ___addmntentstr+259↑j
.text:0040C868                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040C86B                 inc     edx
.text:0040C86C                 mov     byte ptr [edx], 30h ; '0'
.text:0040C86F                 inc     edx
.text:0040C870                 mov     byte ptr [edx], 31h ; '1'
.text:0040C873                 inc     edx
.text:0040C874                 mov     byte ptr [edx], 32h ; '2'
.text:0040C877                 jmp     short loc_40C851
.text:0040C879 ; ---------------------------------------------------------------------------
.text:0040C879
.text:0040C879 loc_40C879:                             ; CODE XREF: ___addmntentstr+255↑j
.text:0040C879                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040C87C                 inc     edx
.text:0040C87D                 mov     byte ptr [edx], 30h ; '0'
.text:0040C880                 inc     edx
.text:0040C881                 mov     byte ptr [edx], 34h ; '4'
.text:0040C884                 inc     edx
.text:0040C885                 mov     byte ptr [edx], 30h ; '0'
.text:0040C888                 jmp     short loc_40C851
.text:0040C888 ; ---------------------------------------------------------------------------
.text:0040C88A                 align 10h
.text:0040C890
.text:0040C890 loc_40C890:                             ; CODE XREF: ___addmntentstr+42↑j
.text:0040C890                                         ; ___addmntentstr+4A↑j ...
.text:0040C890                 test    al, al
.text:0040C892                 jz      loc_40C650
.text:0040C898                 mov     ebx, [esp+4Ch+var_2C]
.text:0040C89C                 mov     [esp+4Ch+Buffer], ebx ; Str
.text:0040C89F                 call    strlen
.text:0040C8A4                 lea     edx, ds:1[eax*4]
.text:0040C8AB                 mov     [esp+4Ch+Buffer], edx ; Size
.text:0040C8AE                 call    malloc
.text:0040C8B3                 mov     [esp+4Ch+var_2C], eax
.text:0040C8B7                 mov     edx, eax
.text:0040C8B9                 lea     esi, [esi+0]
.text:0040C8C0
.text:0040C8C0 loc_40C8C0:                             ; CODE XREF: ___addmntentstr+2E8↓j
.text:0040C8C0                 movzx   eax, byte ptr [ebx]
.text:0040C8C3                 cmp     al, 20h ; ' '
.text:0040C8C5                 jz      short loc_40C900
.text:0040C8C7                 cmp     al, 9
.text:0040C8C9                 jz      short loc_40C8E8
.text:0040C8CB                 cmp     al, 5Ch ; '\'
.text:0040C8CD                 jz      short loc_40C8DF
.text:0040C8CF                 mov     [edx], al
.text:0040C8D1
.text:0040C8D1 loc_40C8D1:                             ; CODE XREF: ___addmntentstr+2F6↓j
.text:0040C8D1                                         ; ___addmntentstr+307↓j ...
.text:0040C8D1                 movzx   ecx, byte ptr [ebx]
.text:0040C8D4                 inc     edx
.text:0040C8D5                 inc     ebx
.text:0040C8D6                 test    cl, cl
.text:0040C8D8                 jnz     short loc_40C8C0
.text:0040C8DA                 jmp     loc_40C650
.text:0040C8DF ; ---------------------------------------------------------------------------
.text:0040C8DF
.text:0040C8DF loc_40C8DF:                             ; CODE XREF: ___addmntentstr+2DD↑j
.text:0040C8DF                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040C8E2                 inc     edx
.text:0040C8E3                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040C8E6                 jmp     short loc_40C8D1
.text:0040C8E8 ; ---------------------------------------------------------------------------
.text:0040C8E8
.text:0040C8E8 loc_40C8E8:                             ; CODE XREF: ___addmntentstr+2D9↑j
.text:0040C8E8                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040C8EB                 inc     edx
.text:0040C8EC                 mov     byte ptr [edx], 30h ; '0'
.text:0040C8EF                 inc     edx
.text:0040C8F0                 mov     byte ptr [edx], 31h ; '1'
.text:0040C8F3                 inc     edx
.text:0040C8F4                 mov     byte ptr [edx], 32h ; '2'
.text:0040C8F7                 jmp     short loc_40C8D1
.text:0040C8F7 ; ---------------------------------------------------------------------------
.text:0040C8F9                 align 10h
.text:0040C900
.text:0040C900 loc_40C900:                             ; CODE XREF: ___addmntentstr+2D5↑j
.text:0040C900                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040C903                 inc     edx
.text:0040C904                 mov     byte ptr [edx], 30h ; '0'
.text:0040C907                 inc     edx
.text:0040C908                 mov     byte ptr [edx], 34h ; '4'
.text:0040C90B                 inc     edx
.text:0040C90C                 mov     byte ptr [edx], 30h ; '0'
.text:0040C90F                 jmp     short loc_40C8D1
.text:0040C911 ; ---------------------------------------------------------------------------
.text:0040C911
.text:0040C911 loc_40C911:                             ; CODE XREF: ___addmntentstr+38↑j
.text:0040C911                 movzx   eax, byte ptr [ecx]
.text:0040C914                 jmp     loc_40C890
.text:0040C914 ___addmntentstr endp
.text:0040C914
.text:0040C914 ; ---------------------------------------------------------------------------
.text:0040C919                 align 10h
.text:0040C920
.text:0040C920 ; =============== S U B R O U T I N E =======================================
.text:0040C920
.text:0040C920
.text:0040C920 sub_40C920      proc near               ; CODE XREF: sub_40A1B0+99↑p
.text:0040C920
.text:0040C920 nBufferLength   = dword ptr -1Ch
.text:0040C920 lpBuffer        = dword ptr -18h
.text:0040C920 dwBytes         = dword ptr -14h
.text:0040C920 var_8           = dword ptr -8
.text:0040C920 var_4           = dword ptr -4
.text:0040C920
.text:0040C920                 sub     esp, 1Ch
.text:0040C923                 mov     [esp+1Ch+var_8], ebx
.text:0040C927                 mov     [esp+1Ch+var_4], esi
.text:0040C92B                 mov     [esp+1Ch+lpBuffer], 0 ; lpBuffer
.text:0040C933                 mov     [esp+1Ch+nBufferLength], 0 ; nBufferLength
.text:0040C93A                 call    GetLogicalDriveStringsA
.text:0040C93F                 sub     esp, 8
.text:0040C942                 mov     ebx, eax
.text:0040C944                 call    GetProcessHeap
.text:0040C949                 mov     [esp+1Ch+nBufferLength], eax ; hHeap
.text:0040C94C                 mov     [esp+1Ch+dwBytes], ebx ; dwBytes
.text:0040C950                 mov     [esp+1Ch+lpBuffer], 0 ; dwFlags
.text:0040C958                 call    HeapAlloc
.text:0040C95D                 sub     esp, 0Ch
.text:0040C960                 mov     esi, eax
.text:0040C962                 mov     [esp+1Ch+nBufferLength], ebx ; nBufferLength
.text:0040C965                 mov     [esp+1Ch+lpBuffer], eax ; lpBuffer
.text:0040C969                 call    GetLogicalDriveStringsA
.text:0040C96E                 sub     esp, 8
.text:0040C971                 mov     eax, esi
.text:0040C973                 mov     ebx, [esp+1Ch+var_8]
.text:0040C977                 mov     esi, [esp+1Ch+var_4]
.text:0040C97B                 add     esp, 1Ch
.text:0040C97E                 retn
.text:0040C97E sub_40C920      endp
.text:0040C97E
.text:0040C97F
.text:0040C97F ; =============== S U B R O U T I N E =======================================
.text:0040C97F
.text:0040C97F
.text:0040C97F ; int __cdecl sub_40C97F(char *, char *)
.text:0040C97F sub_40C97F      proc near               ; DATA XREF: sub_40C97F:loc_40CA0D↓o
.text:0040C97F
.text:0040C97F FileName        = dword ptr -1Ch
.text:0040C97F Mode            = dword ptr -18h
.text:0040C97F dwBytes         = dword ptr -14h
.text:0040C97F arg_0           = dword ptr  4
.text:0040C97F arg_4           = dword ptr  8
.text:0040C97F
.text:0040C97F                 ja      short $+2
.text:0040C981
.text:0040C981 loc_40C981:                             ; CODE XREF: sub_40C97F↑j
.text:0040C981                 jmp     short loc_40C990
.text:0040C981 ; ---------------------------------------------------------------------------
.text:0040C983                 align 10h
.text:0040C990
.text:0040C990 loc_40C990:                             ; CODE XREF: sub_40C97F:loc_40C981↑j
.text:0040C990                 push    edi
.text:0040C991                 push    esi
.text:0040C992                 push    ebx
.text:0040C993                 sub     esp, 10h
.text:0040C996                 mov     ebx, [esp+1Ch+arg_0]
.text:0040C99A                 mov     edx, [esp+1Ch+arg_4]
.text:0040C99E                 mov     [esp+1Ch+FileName], ebx ; FileName
.text:0040C9A1                 mov     [esp+1Ch+Mode], edx ; Mode
.text:0040C9A5                 call    fopen
.text:0040C9AA                 test    eax, eax
.text:0040C9AC                 mov     edi, eax
.text:0040C9AE                 jz      short loc_40CA0D
.text:0040C9B0
.text:0040C9B0 loc_40C9B0:                             ; CODE XREF: sub_40C97F+A2↓j
.text:0040C9B0                                         ; sub_40C97F+AB↓j
.text:0040C9B0                 mov     [esp+1Ch+Mode], 0 ; lpBuffer
.text:0040C9B8                 mov     [esp+1Ch+FileName], 0 ; nBufferLength
.text:0040C9BF                 call    GetLogicalDriveStringsA
.text:0040C9C4                 sub     esp, 8
.text:0040C9C7                 mov     esi, eax
.text:0040C9C9                 call    GetProcessHeap
.text:0040C9CE                 mov     [esp+1Ch+FileName], eax ; hHeap
.text:0040C9D1                 mov     [esp+1Ch+dwBytes], esi ; dwBytes
.text:0040C9D5                 mov     [esp+1Ch+Mode], 0 ; dwFlags
.text:0040C9DD                 call    HeapAlloc
.text:0040C9E2                 sub     esp, 0Ch
.text:0040C9E5                 mov     ebx, eax
.text:0040C9E7                 mov     [esp+1Ch+FileName], esi ; nBufferLength
.text:0040C9EA                 mov     [esp+1Ch+Mode], eax ; lpBuffer
.text:0040C9EE                 call    GetLogicalDriveStringsA
.text:0040C9F3                 mov     off_411094, ebx ; "notset"
.text:0040C9F9                 sub     esp, 8
.text:0040C9FC                 xor     eax, eax
.text:0040C9FE                 test    ebx, ebx
.text:0040CA00                 setz    al
.text:0040CA03                 add     esp, 10h
.text:0040CA06                 pop     ebx
.text:0040CA07                 dec     eax
.text:0040CA08                 and     eax, edi
.text:0040CA0A                 pop     esi
.text:0040CA0B                 pop     edi
.text:0040CA0C                 retn
.text:0040CA0D ; ---------------------------------------------------------------------------
.text:0040CA0D
.text:0040CA0D loc_40CA0D:                             ; CODE XREF: sub_40C97F+2F↑j
.text:0040CA0D                 mov     [esp+1Ch+Mode], offset sub_40C97F ; Mode
.text:0040CA15                 mov     [esp+1Ch+FileName], ebx ; FileName
.text:0040CA18                 call    fopen
.text:0040CA1D                 test    eax, eax
.text:0040CA1F                 mov     edi, eax
.text:0040CA21                 jnz     short loc_40C9B0
.text:0040CA23                 call    sub_40CC60
.text:0040CA28                 mov     edi, eax
.text:0040CA2A                 jmp     short loc_40C9B0
.text:0040CA2A sub_40C97F      endp
.text:0040CA2A
.text:0040CA2A ; ---------------------------------------------------------------------------
.text:0040CA2C                 align 10h
.text:0040CA30                 sub     esp, 0Ch
.text:0040CA33                 mov     eax, [esp+10h]
.text:0040CA37                 test    eax, eax
.text:0040CA39                 jz      short loc_40CA43
.text:0040CA3B                 mov     [esp], eax
.text:0040CA3E                 call    fclose
.text:0040CA43
.text:0040CA43 loc_40CA43:                             ; CODE XREF: .text:0040CA39↑j
.text:0040CA43                 call    GetProcessHeap
.text:0040CA48                 mov     [esp], eax
.text:0040CA4B                 mov     ecx, off_411094 ; "notset"
.text:0040CA51                 mov     dword ptr [esp+4], 0
.text:0040CA59                 mov     [esp+8], ecx
.text:0040CA5D                 call    HeapFree
.text:0040CA62                 mov     edx, off_411090 ; "notset"
.text:0040CA68                 sub     esp, 0Ch
.text:0040CA6B                 mov     eax, 1
.text:0040CA70                 mov     off_411094, edx ; "notset"
.text:0040CA76                 add     esp, 0Ch
.text:0040CA79                 retn
.text:0040CA79 ; ---------------------------------------------------------------------------
.text:0040CA7A                 align 10h
.text:0040CA80                 push    edi
.text:0040CA81                 push    esi
.text:0040CA82                 push    ebx
.text:0040CA83                 sub     esp, 10h
.text:0040CA86                 mov     edi, [esp+24h]
.text:0040CA8A                 mov     [esp], edi
.text:0040CA8D                 call    strlen
.text:0040CA92                 mov     edx, [esp+20h]
.text:0040CA96                 mov     esi, eax
.text:0040CA98                 mov     ebx, [edx+0Ch]
.text:0040CA9B                 nop
.text:0040CA9C                 lea     esi, [esi+0]
.text:0040CAA0
.text:0040CAA0 loc_40CAA0:                             ; CODE XREF: .text:0040CAD1↓j
.text:0040CAA0                 mov     [esp+4], edi
.text:0040CAA4                 mov     [esp], ebx
.text:0040CAA7                 call    strstr
.text:0040CAAC                 test    eax, eax
.text:0040CAAE                 jz      short loc_40CAD3
.text:0040CAB0                 cmp     eax, ebx
.text:0040CAB2                 jz      short loc_40CAD5
.text:0040CAB4                 cmp     byte ptr [eax-1], 2Ch ; ','
.text:0040CAB8                 jz      short loc_40CAE0
.text:0040CABA
.text:0040CABA loc_40CABA:                             ; CODE XREF: .text:0040CAF0↓j
.text:0040CABA                 mov     [esp], ebx
.text:0040CABD                 mov     dword ptr [esp+4], 2Ch ; ','
.text:0040CAC5                 call    strchr
.text:0040CACA                 test    eax, eax
.text:0040CACC                 mov     ebx, eax
.text:0040CACE                 jz      short loc_40CAD3
.text:0040CAD0                 inc     ebx
.text:0040CAD1                 jmp     short loc_40CAA0
.text:0040CAD3 ; ---------------------------------------------------------------------------
.text:0040CAD3
.text:0040CAD3 loc_40CAD3:                             ; CODE XREF: .text:0040CAAE↑j
.text:0040CAD3                                         ; .text:0040CACE↑j
.text:0040CAD3                 xor     eax, eax
.text:0040CAD5
.text:0040CAD5 loc_40CAD5:                             ; CODE XREF: .text:0040CAB2↑j
.text:0040CAD5                                         ; .text:0040CAE6↓j ...
.text:0040CAD5                 add     esp, 10h
.text:0040CAD8                 pop     ebx
.text:0040CAD9                 pop     esi
.text:0040CADA                 pop     edi
.text:0040CADB                 retn
.text:0040CADB ; ---------------------------------------------------------------------------
.text:0040CADC                 align 10h
.text:0040CAE0
.text:0040CAE0 loc_40CAE0:                             ; CODE XREF: .text:0040CAB8↑j
.text:0040CAE0                 movzx   edx, byte ptr [esi+eax]
.text:0040CAE4                 test    dl, dl
.text:0040CAE6                 jz      short loc_40CAD5
.text:0040CAE8                 cmp     dl, 3Dh ; '='
.text:0040CAEB                 jz      short loc_40CAD5
.text:0040CAED                 cmp     dl, 2Ch ; ','
.text:0040CAF0                 jnz     short loc_40CABA
.text:0040CAF2                 jmp     short loc_40CAD5
.text:0040CAF2 ; ---------------------------------------------------------------------------
.text:0040CAF4                 align 10h
.text:0040CB00
.text:0040CB00 ; =============== S U B R O U T I N E =======================================
.text:0040CB00
.text:0040CB00
.text:0040CB00 sub_40CB00      proc near               ; CODE XREF: sub_40ADA0+16↑j
.text:0040CB00
.text:0040CB00 arg_0           = dword ptr  4
.text:0040CB00 arg_4           = dword ptr  8
.text:0040CB00
.text:0040CB00                 sub     esp, 0Ch
.text:0040CB03                 mov     ecx, [esp+0Ch+arg_0]
.text:0040CB07                 mov     eax, [esp+0Ch+arg_4]
.text:0040CB0B                 test    ecx, ecx
.text:0040CB0D                 js      short loc_40CB3E
.text:0040CB0F                 test    eax, eax
.text:0040CB11                 js      short loc_40CB1D
.text:0040CB13                 cmp     eax, 8
.text:0040CB16                 jle     short loc_40CB31
.text:0040CB18                 cmp     eax, 0Ch
.text:0040CB1B                 jz      short loc_40CB31
.text:0040CB1D
.text:0040CB1D loc_40CB1D:                             ; CODE XREF: sub_40CB00+11↑j
.text:0040CB1D                 call    _errno
.text:0040CB22                 mov     dword ptr [eax], 16h
.text:0040CB28
.text:0040CB28 loc_40CB28:                             ; CODE XREF: sub_40CB00+3C↓j
.text:0040CB28                                         ; sub_40CB00+49↓j
.text:0040CB28                 mov     eax, 0FFFFFFFFh
.text:0040CB2D                 add     esp, 0Ch
.text:0040CB30                 retn
.text:0040CB31 ; ---------------------------------------------------------------------------
.text:0040CB31
.text:0040CB31 loc_40CB31:                             ; CODE XREF: sub_40CB00+16↑j
.text:0040CB31                                         ; sub_40CB00+1B↑j
.text:0040CB31                 call    _errno
.text:0040CB36                 mov     dword ptr [eax], 28h ; '('
.text:0040CB3C                 jmp     short loc_40CB28
.text:0040CB3E ; ---------------------------------------------------------------------------
.text:0040CB3E
.text:0040CB3E loc_40CB3E:                             ; CODE XREF: sub_40CB00+D↑j
.text:0040CB3E                 call    _errno
.text:0040CB43                 mov     dword ptr [eax], 9
.text:0040CB49                 jmp     short loc_40CB28
.text:0040CB49 sub_40CB00      endp
.text:0040CB49
.text:0040CB49 ; ---------------------------------------------------------------------------
.text:0040CB4B                 align 10h
.text:0040CB50
.text:0040CB50 ; =============== S U B R O U T I N E =======================================
.text:0040CB50
.text:0040CB50 ; Attributes: noreturn
.text:0040CB50
.text:0040CB50 sub_40CB50      proc near               ; CODE XREF: .text:0040C2E9↑p
.text:0040CB50                                         ; sub_40CB50↓j
.text:0040CB50                 jmp     short sub_40CB50
.text:0040CB50 sub_40CB50      endp
.text:0040CB50
.text:0040CB50 ; ---------------------------------------------------------------------------
.text:0040CB52                 align 10h
.text:0040CB60
.text:0040CB60 ; =============== S U B R O U T I N E =======================================
.text:0040CB60
.text:0040CB60
.text:0040CB60 sub_40CB60      proc near               ; CODE XREF: .text:0040C045↑p
.text:0040CB60
.text:0040CB60 FileHandle      = dword ptr -1Ch
.text:0040CB60 dwFileOffsetLow = dword ptr -18h
.text:0040CB60 dwFileOffsetHigh= dword ptr -14h
.text:0040CB60 nNumberOfBytesToUnlockLow= dword ptr -10h
.text:0040CB60 nNumberOfBytesToUnlockHigh= dword ptr -0Ch
.text:0040CB60 var_8           = dword ptr -8
.text:0040CB60 var_4           = dword ptr -4
.text:0040CB60 arg_0           = dword ptr  4
.text:0040CB60
.text:0040CB60                 sub     esp, 1Ch
.text:0040CB63                 mov     edx, [esp+1Ch+arg_0]
.text:0040CB67                 mov     [esp+1Ch+var_4], esi
.text:0040CB6B                 mov     [esp+1Ch+var_8], ebx
.text:0040CB6F                 mov     ebx, [edx+10h]
.text:0040CB72                 mov     [esp+1Ch+FileHandle], ebx ; FileHandle
.text:0040CB75                 call    _get_osfhandle
.text:0040CB7A                 mov     [esp+1Ch+FileHandle], ebx ; FileHandle
.text:0040CB7D                 mov     esi, eax
.text:0040CB7F                 call    _filelengthi64
.text:0040CB84                 mov     [esp+1Ch+nNumberOfBytesToUnlockLow], eax ; nNumberOfBytesToUnlockLow
.text:0040CB88                 cdq
.text:0040CB89                 mov     [esp+1Ch+FileHandle], esi ; hFile
.text:0040CB8C                 mov     [esp+1Ch+nNumberOfBytesToUnlockHigh], edx ; nNumberOfBytesToUnlockHigh
.text:0040CB90                 mov     [esp+1Ch+dwFileOffsetHigh], 0 ; dwFileOffsetHigh
.text:0040CB98                 mov     [esp+1Ch+dwFileOffsetLow], 0 ; dwFileOffsetLow
.text:0040CBA0                 call    UnlockFile
.text:0040CBA5                 sub     esp, 14h
.text:0040CBA8                 mov     ebx, [esp+1Ch+var_8]
.text:0040CBAC                 mov     esi, [esp+1Ch+var_4]
.text:0040CBB0                 add     esp, 1Ch
.text:0040CBB3                 retn
.text:0040CBB3 sub_40CB60      endp
.text:0040CBB3
.text:0040CBB3 ; ---------------------------------------------------------------------------
.text:0040CBB4                 align 10h
.text:0040CBC0
.text:0040CBC0 ; =============== S U B R O U T I N E =======================================
.text:0040CBC0
.text:0040CBC0
.text:0040CBC0 ; int __cdecl sub_40CBC0(int, char *Control)
.text:0040CBC0 sub_40CBC0      proc near               ; CODE XREF: .text:0040BF06↑p
.text:0040CBC0                                         ; .text:0040BF56↑p ...
.text:0040CBC0
.text:0040CBC0 Str             = dword ptr -1Ch
.text:0040CBC0 Val             = dword ptr -18h
.text:0040CBC0 var_8           = dword ptr -8
.text:0040CBC0 var_4           = dword ptr -4
.text:0040CBC0 arg_0           = dword ptr  4
.text:0040CBC0 Control         = dword ptr  8
.text:0040CBC0
.text:0040CBC0                 sub     esp, 1Ch
.text:0040CBC3                 xor     eax, eax
.text:0040CBC5                 mov     edx, [esp+1Ch+Control]
.text:0040CBC9                 mov     [esp+1Ch+var_4], esi
.text:0040CBCD                 mov     esi, [esp+1Ch+arg_0]
.text:0040CBD1                 mov     [esp+1Ch+var_8], ebx
.text:0040CBD5                 mov     ebx, [esi]
.text:0040CBD7                 test    ebx, ebx
.text:0040CBD9                 jz      short loc_40CC08
.text:0040CBDB                 movzx   eax, byte ptr [edx]
.text:0040CBDE                 test    al, al
.text:0040CBE0                 jz      short loc_40CC00
.text:0040CBE2                 cmp     byte ptr [edx+1], 0
.text:0040CBE6                 jnz     short loc_40CC40
.text:0040CBE8                 movzx   ecx, byte ptr [ebx]
.text:0040CBEB                 mov     edx, ebx
.text:0040CBED                 cmp     cl, al
.text:0040CBEF                 jz      short loc_40CC32
.text:0040CBF1                 test    cl, cl
.text:0040CBF3                 jnz     short loc_40CC14
.text:0040CBF5                 lea     esi, [esi+0]
.text:0040CBF9                 lea     edi, [edi+0]
.text:0040CC00
.text:0040CC00 loc_40CC00:                             ; CODE XREF: sub_40CBC0+20↑j
.text:0040CC00                                         ; sub_40CBC0+74↓j
.text:0040CC00                 mov     dword ptr [esi], 0
.text:0040CC06
.text:0040CC06 loc_40CC06:                             ; CODE XREF: sub_40CBC0+7C↓j
.text:0040CC06                 mov     eax, ebx
.text:0040CC08
.text:0040CC08 loc_40CC08:                             ; CODE XREF: sub_40CBC0+19↑j
.text:0040CC08                 mov     ebx, [esp+1Ch+var_8]
.text:0040CC0C                 mov     esi, [esp+1Ch+var_4]
.text:0040CC10                 add     esp, 1Ch
.text:0040CC13                 retn
.text:0040CC14 ; ---------------------------------------------------------------------------
.text:0040CC14
.text:0040CC14 loc_40CC14:                             ; CODE XREF: sub_40CBC0+33↑j
.text:0040CC14                 movsx   edx, al
.text:0040CC17                 mov     [esp+1Ch+Val], edx ; Val
.text:0040CC1B                 lea     edx, [ebx+1]
.text:0040CC1E                 mov     [esp+1Ch+Str], edx ; Str
.text:0040CC21                 call    strchr
.text:0040CC26                 lea     esi, [esi+0]
.text:0040CC29                 lea     edi, [edi+0]
.text:0040CC30
.text:0040CC30 loc_40CC30:                             ; CODE XREF: sub_40CBC0+8C↓j
.text:0040CC30                 mov     edx, eax
.text:0040CC32
.text:0040CC32 loc_40CC32:                             ; CODE XREF: sub_40CBC0+2F↑j
.text:0040CC32                 test    edx, edx
.text:0040CC34                 jz      short loc_40CC00
.text:0040CC36                 mov     byte ptr [edx], 0
.text:0040CC39                 inc     edx
.text:0040CC3A                 mov     [esi], edx
.text:0040CC3C                 jmp     short loc_40CC06
.text:0040CC3C ; ---------------------------------------------------------------------------
.text:0040CC3E                 align 10h
.text:0040CC40
.text:0040CC40 loc_40CC40:                             ; CODE XREF: sub_40CBC0+26↑j
.text:0040CC40                 mov     [esp+1Ch+Val], edx ; Control
.text:0040CC44                 mov     [esp+1Ch+Str], ebx ; Str
.text:0040CC47                 call    strpbrk
.text:0040CC4C                 jmp     short loc_40CC30
.text:0040CC4C sub_40CBC0      endp
.text:0040CC4C
.text:0040CC4C ; ---------------------------------------------------------------------------
.text:0040CC4E                 align 10h
.text:0040CC50 ; const char aTmpf[]
.text:0040CC50 aTmpf           db 'tmpf',0             ; DATA XREF: sub_40CC60+20↓o
.text:0040CC55 ; const char aWBd[]
.text:0040CC55 aWBd            db 'w+bD',0             ; DATA XREF: sub_40CC60+5E↓o
.text:0040CC5A                 align 10h
.text:0040CC60
.text:0040CC60 ; =============== S U B R O U T I N E =======================================
.text:0040CC60
.text:0040CC60
.text:0040CC60 sub_40CC60      proc near               ; CODE XREF: sub_40C97F+A4↑p
.text:0040CC60
.text:0040CC60 FileHandle      = dword ptr -13Ch
.text:0040CC60 Format          = dword ptr -138h
.text:0040CC60 var_134         = dword ptr -134h
.text:0040CC60 var_130         = dword ptr -130h
.text:0040CC60 var_12C         = dword ptr -12Ch
.text:0040CC60 Buffer          = byte ptr -11Ch
.text:0040CC60 var_8           = dword ptr -8
.text:0040CC60 var_4           = dword ptr -4
.text:0040CC60
.text:0040CC60                 sub     esp, 13Ch
.text:0040CC66                 mov     [esp+13Ch+var_8], ebx
.text:0040CC6D                 lea     ebx, [esp+13Ch+Buffer]
.text:0040CC71                 mov     [esp+13Ch+var_4], esi
.text:0040CC78                 mov     [esp+13Ch+var_12C], 0 ; int
.text:0040CC80                 mov     [esp+13Ch+var_130], offset aTmpf ; "tmpf"
.text:0040CC88                 mov     [esp+13Ch+var_134], 0 ; char *
.text:0040CC90                 mov     [esp+13Ch+Format], 104h ; int
.text:0040CC98                 mov     [esp+13Ch+FileHandle], ebx ; Buffer
.text:0040CC9B                 call    sub_40CD30
.text:0040CCA0                 xor     edx, edx
.text:0040CCA2                 test    eax, eax
.text:0040CCA4                 jnz     short loc_40CCD6
.text:0040CCA6                 mov     [esp+13Ch+FileHandle], ebx ; FileName
.text:0040CCA9                 mov     [esp+13Ch+Format], 0 ; int
.text:0040CCB1                 call    sub_40D0B0
.text:0040CCB6                 xor     edx, edx
.text:0040CCB8                 mov     ebx, eax
.text:0040CCBA                 test    eax, eax
.text:0040CCBC                 js      short loc_40CCD6
.text:0040CCBE                 mov     [esp+13Ch+Format], offset aWBd ; "w+bD"
.text:0040CCC6                 mov     [esp+13Ch+FileHandle], eax ; FileHandle
.text:0040CCC9                 call    _fdopen
.text:0040CCCE                 test    eax, eax
.text:0040CCD0                 mov     esi, eax
.text:0040CCD2                 jz      short loc_40CCED
.text:0040CCD4
.text:0040CCD4 loc_40CCD4:                             ; CODE XREF: sub_40CC60+95↓j
.text:0040CCD4                 mov     edx, esi
.text:0040CCD6
.text:0040CCD6 loc_40CCD6:                             ; CODE XREF: sub_40CC60+44↑j
.text:0040CCD6                                         ; sub_40CC60+5C↑j
.text:0040CCD6                 mov     ebx, [esp+13Ch+var_8]
.text:0040CCDD                 mov     eax, edx
.text:0040CCDF                 mov     esi, [esp+13Ch+var_4]
.text:0040CCE6                 add     esp, 13Ch
.text:0040CCEC                 retn
.text:0040CCED ; ---------------------------------------------------------------------------
.text:0040CCED
.text:0040CCED loc_40CCED:                             ; CODE XREF: sub_40CC60+72↑j
.text:0040CCED                 mov     [esp+13Ch+FileHandle], ebx ; FileHandle
.text:0040CCF0                 call    _close_0
.text:0040CCF5                 jmp     short loc_40CCD4
.text:0040CCF5 sub_40CC60      endp
.text:0040CCF5
.text:0040CCF5 ; ---------------------------------------------------------------------------
.text:0040CCF7                 align 10h
.text:0040CD00 aFile           db 'file',0             ; DATA XREF: sub_40CD30:loc_40CD5C↓o
.text:0040CD05 ; const char aSSxxxxxx[]
.text:0040CD05 aSSxxxxxx       db '%.*s/%.*sXXXXXX',0  ; DATA XREF: sub_40CD30+9B↓o
.text:0040CD15 ; const char aTemp[]
.text:0040CD15 aTemp           db 'TEMP',0             ; DATA XREF: sub_40CD30:loc_40CE12↓o
.text:0040CD15                                         ; sub_40CD30:loc_40CE52↓o ...
.text:0040CD1A ; const char aTmp[]
.text:0040CD1A aTmp            db '/tmp',0             ; DATA XREF: sub_40CD30+12F↓o
.text:0040CD1A                                         ; sub_40CD30+141↓o ...
.text:0040CD1F aTmpdir         db 'TMPDIR',0           ; DATA XREF: sub_40CD30:loc_40CED0↓o
.text:0040CD26 aTmp_0          db 'TMP',0              ; DATA XREF: sub_40CD30:loc_40CF60↓o
.text:0040CD2A                 align 10h
.text:0040CD30
.text:0040CD30 ; =============== S U B R O U T I N E =======================================
.text:0040CD30
.text:0040CD30
.text:0040CD30 ; int __cdecl sub_40CD30(char *Buffer, int, char *, char *, int)
.text:0040CD30 sub_40CD30      proc near               ; CODE XREF: sub_40CC60+3B↑p
.text:0040CD30
.text:0040CD30 Str             = dword ptr -1BCh
.text:0040CD30 Format          = dword ptr -1B8h
.text:0040CD30 var_1B4         = dword ptr -1B4h
.text:0040CD30 var_1B0         = dword ptr -1B0h
.text:0040CD30 var_1AC         = dword ptr -1ACh
.text:0040CD30 var_1A8         = dword ptr -1A8h
.text:0040CD30 var_19C         = dword ptr -19Ch
.text:0040CD30 var_13C         = dword ptr -13Ch
.text:0040CD30 var_DC          = dword ptr -0DCh
.text:0040CD30 var_7C          = dword ptr -7Ch
.text:0040CD30 Buffer          = dword ptr  4
.text:0040CD30 arg_4           = dword ptr  8
.text:0040CD30 arg_8           = dword ptr  0Ch
.text:0040CD30 arg_C           = dword ptr  10h
.text:0040CD30 arg_10          = dword ptr  14h
.text:0040CD30
.text:0040CD30                 push    ebp
.text:0040CD31                 push    edi
.text:0040CD32                 push    esi
.text:0040CD33                 push    ebx
.text:0040CD34                 sub     esp, 1ACh
.text:0040CD3A                 mov     eax, [esp+1BCh+arg_C]
.text:0040CD41                 mov     esi, [esp+1BCh+arg_8]
.text:0040CD48                 test    eax, eax
.text:0040CD4A                 jz      short loc_40CD5C
.text:0040CD4C                 mov     edx, [esp+1BCh+arg_C]
.text:0040CD53                 cmp     byte ptr [edx], 0
.text:0040CD56                 jnz     loc_40CF90
.text:0040CD5C
.text:0040CD5C loc_40CD5C:                             ; CODE XREF: sub_40CD30+1A↑j
.text:0040CD5C                 mov     eax, offset aFile ; "file"
.text:0040CD61                 mov     ebp, 4
.text:0040CD66                 mov     [esp+1BCh+arg_C], eax
.text:0040CD6D
.text:0040CD6D loc_40CD6D:                             ; CODE XREF: sub_40CD30+274↓j
.text:0040CD6D                                         ; sub_40CD30+27F↓j
.text:0040CD6D                 mov     ebx, [esp+1BCh+arg_10]
.text:0040CD74                 test    ebx, ebx
.text:0040CD76                 jnz     loc_40CED0
.text:0040CD7C
.text:0040CD7C loc_40CD7C:                             ; CODE XREF: sub_40CD30+21C↓j
.text:0040CD7C                                         ; sub_40CD30+224↓j ...
.text:0040CD7C                 test    esi, esi
.text:0040CD7E                 jz      loc_40CE12
.text:0040CD84
.text:0040CD84 loc_40CD84:                             ; CODE XREF: sub_40CD30+176↓j
.text:0040CD84                                         ; sub_40CD30+19A↓j
.text:0040CD84                 mov     [esp+1BCh+Str], esi ; Str
.text:0040CD87                 call    strlen
.text:0040CD8C                 test    eax, eax
.text:0040CD8E                 mov     edx, eax
.text:0040CD90                 jz      short loc_40CDA0
.text:0040CD92                 movzx   eax, byte ptr [eax+esi-1]
.text:0040CD97                 cmp     al, 2Fh ; '/'
.text:0040CD99                 jz      short loc_40CE00
.text:0040CD9B                 cmp     al, 5Ch ; '\'
.text:0040CD9D                 jz      short loc_40CE00
.text:0040CD9F                 nop
.text:0040CDA0
.text:0040CDA0 loc_40CDA0:                             ; CODE XREF: sub_40CD30+60↑j
.text:0040CDA0                                         ; sub_40CD30+D1↓j ...
.text:0040CDA0                 lea     edi, [ebp+edx+8]
.text:0040CDA4                 cmp     [esp+1BCh+arg_4], edi
.text:0040CDAB                 jb      short loc_40CDE8
.text:0040CDAD                 mov     [esp+1BCh+var_1AC], ebp
.text:0040CDB1                 mov     ecx, [esp+1BCh+arg_C]
.text:0040CDB8                 mov     ebp, [esp+1BCh+Buffer]
.text:0040CDBF                 mov     [esp+1BCh+var_1B0], esi
.text:0040CDC3                 mov     [esp+1BCh+var_1A8], ecx
.text:0040CDC7                 mov     [esp+1BCh+var_1B4], edx
.text:0040CDCB                 mov     [esp+1BCh+Format], offset aSSxxxxxx ; "%.*s/%.*sXXXXXX"
.text:0040CDD3                 mov     [esp+1BCh+Str], ebp ; Buffer
.text:0040CDD6                 call    sprintf
.text:0040CDDB                 xor     eax, eax
.text:0040CDDD
.text:0040CDDD loc_40CDDD:                             ; CODE XREF: sub_40CD30+C8↓j
.text:0040CDDD                 add     esp, 1ACh
.text:0040CDE3                 pop     ebx
.text:0040CDE4                 pop     esi
.text:0040CDE5                 pop     edi
.text:0040CDE6                 pop     ebp
.text:0040CDE7                 retn
.text:0040CDE8 ; ---------------------------------------------------------------------------
.text:0040CDE8
.text:0040CDE8 loc_40CDE8:                             ; CODE XREF: sub_40CD30+7B↑j
.text:0040CDE8                 call    _errno
.text:0040CDED                 mov     dword ptr [eax], 16h
.text:0040CDF3
.text:0040CDF3 loc_40CDF3:                             ; CODE XREF: sub_40CD30+187↓j
.text:0040CDF3                 mov     eax, 0FFFFFFFFh
.text:0040CDF8                 jmp     short loc_40CDDD
.text:0040CDF8 ; ---------------------------------------------------------------------------
.text:0040CDFA                 align 10h
.text:0040CE00
.text:0040CE00 loc_40CE00:                             ; CODE XREF: sub_40CD30+69↑j
.text:0040CE00                                         ; sub_40CD30+6D↑j ...
.text:0040CE00                 dec     edx
.text:0040CE01                 jz      short loc_40CDA0
.text:0040CE03                 movzx   eax, byte ptr [edx+esi-1]
.text:0040CE08                 cmp     al, 2Fh ; '/'
.text:0040CE0A                 jz      short loc_40CE00
.text:0040CE0C                 cmp     al, 5Ch ; '\'
.text:0040CE0E                 jz      short loc_40CE00
.text:0040CE10                 jmp     short loc_40CDA0
.text:0040CE12 ; ---------------------------------------------------------------------------
.text:0040CE12
.text:0040CE12 loc_40CE12:                             ; CODE XREF: sub_40CD30+4E↑j
.text:0040CE12                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:0040CE19                 lea     esi, [esp+1BCh+var_13C]
.text:0040CE20                 call    getenv
.text:0040CE25                 mov     [esp+1BCh+Format], eax ; char *
.text:0040CE29                 mov     [esp+1BCh+var_1B4], esi ; int
.text:0040CE2D                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:0040CE34                 call    sub_40D630
.text:0040CE39                 test    eax, eax
.text:0040CE3B                 jnz     short loc_40CE52
.text:0040CE3D                 mov     edi, [esp+1BCh+var_13C]
.text:0040CE44                 and     edi, 0F000h
.text:0040CE4A                 cmp     edi, 4000h
.text:0040CE50                 jz      short loc_40CEBC
.text:0040CE52
.text:0040CE52 loc_40CE52:                             ; CODE XREF: sub_40CD30+10B↑j
.text:0040CE52                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:0040CE59                 call    getenv
.text:0040CE5E                 cld
.text:0040CE5F                 mov     edx, offset aTmp ; "/tmp"
.text:0040CE64                 mov     esi, eax
.text:0040CE66                 mov     ecx, 5
.text:0040CE6B                 mov     edi, edx
.text:0040CE6D                 repe cmpsb
.text:0040CE6F                 jz      short loc_40CEAC
.text:0040CE71                 mov     [esp+1BCh+Format], offset aTmp ; "/tmp"
.text:0040CE79                 lea     ecx, [esp+1BCh+var_19C]
.text:0040CE7D                 mov     [esp+1BCh+var_1B4], ecx ; int
.text:0040CE81                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:0040CE88                 call    sub_40D630
.text:0040CE8D                 test    eax, eax
.text:0040CE8F                 jnz     short loc_40CEAC
.text:0040CE91                 mov     ebx, [esp+1BCh+var_19C]
.text:0040CE95                 mov     esi, offset aTmp ; "/tmp"
.text:0040CE9A                 and     ebx, 0F000h
.text:0040CEA0                 cmp     ebx, 4000h
.text:0040CEA6                 jz      loc_40CD84
.text:0040CEAC
.text:0040CEAC loc_40CEAC:                             ; CODE XREF: sub_40CD30+13F↑j
.text:0040CEAC                                         ; sub_40CD30+15F↑j
.text:0040CEAC                 call    _errno
.text:0040CEB1                 mov     dword ptr [eax], 2
.text:0040CEB7                 jmp     loc_40CDF3
.text:0040CEBC ; ---------------------------------------------------------------------------
.text:0040CEBC
.text:0040CEBC loc_40CEBC:                             ; CODE XREF: sub_40CD30+120↑j
.text:0040CEBC                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:0040CEC3                 call    getenv
.text:0040CEC8                 mov     esi, eax
.text:0040CECA                 jmp     loc_40CD84
.text:0040CECA ; ---------------------------------------------------------------------------
.text:0040CECF                 align 10h
.text:0040CED0
.text:0040CED0 loc_40CED0:                             ; CODE XREF: sub_40CD30+46↑j
.text:0040CED0                 mov     [esp+1BCh+Str], offset aTmpdir ; "TMPDIR"
.text:0040CED7                 call    sub_40D5C0
.text:0040CEDC                 test    eax, eax
.text:0040CEDE                 mov     ebx, eax
.text:0040CEE0                 jz      short loc_40CF60
.text:0040CEE2
.text:0040CEE2 loc_40CEE2:                             ; CODE XREF: sub_40CD30+240↓j
.text:0040CEE2                                         ; sub_40CD30+256↓j
.text:0040CEE2                 mov     [esp+1BCh+Format], ebx ; char *
.text:0040CEE6                 lea     edi, [esp+1BCh+var_7C]
.text:0040CEED                 mov     [esp+1BCh+var_1B4], edi ; int
.text:0040CEF1                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:0040CEF8                 call    sub_40D630
.text:0040CEFD                 test    eax, eax
.text:0040CEFF                 jnz     short loc_40CF16
.text:0040CF01                 mov     edx, [esp+1BCh+var_7C]
.text:0040CF08                 and     edx, 0F000h
.text:0040CF0E                 cmp     edx, 4000h
.text:0040CF14                 jz      short loc_40CF59
.text:0040CF16
.text:0040CF16 loc_40CF16:                             ; CODE XREF: sub_40CD30+1CF↑j
.text:0040CF16                                         ; sub_40CD30+25C↓j
.text:0040CF16                 test    esi, esi
.text:0040CF18                 jz      short loc_40CF52
.text:0040CF1A                 mov     [esp+1BCh+Format], esi ; char *
.text:0040CF1E                 lea     ecx, [esp+1BCh+var_DC]
.text:0040CF25                 mov     [esp+1BCh+var_1B4], ecx ; int
.text:0040CF29                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:0040CF30                 call    sub_40D630
.text:0040CF35                 test    eax, eax
.text:0040CF37                 jnz     short loc_40CF52
.text:0040CF39                 mov     ebx, [esp+1BCh+var_DC]
.text:0040CF40                 and     ebx, 0F000h
.text:0040CF46                 cmp     ebx, 4000h
.text:0040CF4C                 jz      loc_40CD7C
.text:0040CF52
.text:0040CF52 loc_40CF52:                             ; CODE XREF: sub_40CD30+1E8↑j
.text:0040CF52                                         ; sub_40CD30+207↑j
.text:0040CF52                 xor     esi, esi
.text:0040CF54                 jmp     loc_40CD7C
.text:0040CF59 ; ---------------------------------------------------------------------------
.text:0040CF59
.text:0040CF59 loc_40CF59:                             ; CODE XREF: sub_40CD30+1E4↑j
.text:0040CF59                 mov     esi, ebx
.text:0040CF5B                 jmp     loc_40CD7C
.text:0040CF60 ; ---------------------------------------------------------------------------
.text:0040CF60
.text:0040CF60 loc_40CF60:                             ; CODE XREF: sub_40CD30+1B0↑j
.text:0040CF60                 mov     [esp+1BCh+Str], offset aTmp_0 ; "TMP"
.text:0040CF67                 call    sub_40D5C0
.text:0040CF6C                 test    eax, eax
.text:0040CF6E                 mov     ebx, eax
.text:0040CF70                 jnz     loc_40CEE2
.text:0040CF76                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:0040CF7D                 call    sub_40D5C0
.text:0040CF82                 test    eax, eax
.text:0040CF84                 mov     ebx, eax
.text:0040CF86                 jnz     loc_40CEE2
.text:0040CF8C                 jmp     short loc_40CF16
.text:0040CF8C ; ---------------------------------------------------------------------------
.text:0040CF8E                 align 10h
.text:0040CF90
.text:0040CF90 loc_40CF90:                             ; CODE XREF: sub_40CD30+26↑j
.text:0040CF90                 mov     ecx, [esp+1BCh+arg_C]
.text:0040CF97                 mov     [esp+1BCh+Str], ecx ; Str
.text:0040CF9A                 call    strlen
.text:0040CF9F                 cmp     eax, 5
.text:0040CFA2                 mov     ebp, eax
.text:0040CFA4                 jbe     loc_40CD6D
.text:0040CFAA                 mov     ebp, 5
.text:0040CFAF                 jmp     loc_40CD6D
.text:0040CFAF sub_40CD30      endp
.text:0040CFAF
.text:0040CFAF ; ---------------------------------------------------------------------------
.text:0040CFB4                 align 10h
.text:0040CFC0 byte_40CFC0     db 61h                  ; DATA XREF: sub_40D0B0+DC↓r
.text:0040CFC0                                         ; sub_40D0B0+122↓r ...
.text:0040CFC1 aBcdefghijklmno db 'bcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789',0
.text:0040CFFF aXxxxxx         db 'XXXXXX',0           ; DATA XREF: sub_40D0B0+39↓o
.text:0040D006                 align 20h
.text:0040D020 aInvalidKindInG db 'invalid KIND in __gen_tempname',0
.text:0040D020                                         ; DATA XREF: sub_40D0B0:loc_40D328↓o
.text:0040D03F                 align 10h
.text:0040D040 aLibc05SrcStdio db '../../libc-0.5-src/stdio-common/tempname.c',0
.text:0040D040                                         ; DATA XREF: sub_40D0B0+405↓o
.text:0040D06B                 align 20h
.text:0040D080 aInvalidKindInG_0 db '! "invalid KIND in __gen_tempname"',0
.text:0040D080                                         ; DATA XREF: sub_40D0B0+40D↓o
.text:0040D0A3                 align 10h
.text:0040D0B0
.text:0040D0B0 ; =============== S U B R O U T I N E =======================================
.text:0040D0B0
.text:0040D0B0
.text:0040D0B0 ; int __cdecl sub_40D0B0(char *FileName, int)
.text:0040D0B0 sub_40D0B0      proc near               ; CODE XREF: sub_40CC60+51↑p
.text:0040D0B0
.text:0040D0B0 Str             = dword ptr -9Ch
.text:0040D0B0 OpenFlag        = dword ptr -98h
.text:0040D0B0 var_94          = dword ptr -94h
.text:0040D0B0 var_90          = dword ptr -90h
.text:0040D0B0 var_8C          = dword ptr -8Ch
.text:0040D0B0 var_88          = dword ptr -88h
.text:0040D0B0 var_84          = dword ptr -84h
.text:0040D0B0 var_80          = dword ptr -80h
.text:0040D0B0 var_7C          = dword ptr -7Ch
.text:0040D0B0 FileName        = dword ptr  4
.text:0040D0B0 arg_4           = dword ptr  8
.text:0040D0B0
.text:0040D0B0                 push    ebp
.text:0040D0B1                 push    edi
.text:0040D0B2                 push    esi
.text:0040D0B3                 push    ebx
.text:0040D0B4                 sub     esp, 8Ch
.text:0040D0BA                 mov     [esp+9Ch+var_88], 0FFFFFFFFh
.text:0040D0C2                 call    _errno
.text:0040D0C7                 mov     edx, [eax]
.text:0040D0C9                 mov     [esp+9Ch+var_8C], edx
.text:0040D0CD                 mov     edx, [esp+9Ch+FileName]
.text:0040D0D4                 mov     [esp+9Ch+Str], edx ; Str
.text:0040D0D7                 call    strlen
.text:0040D0DC                 cmp     eax, 5
.text:0040D0DF                 jle     short loc_40D0FD
.text:0040D0E1                 cld
.text:0040D0E2                 mov     ecx, [esp+9Ch+FileName]
.text:0040D0E9                 mov     edi, offset aXxxxxx ; "XXXXXX"
.text:0040D0EE                 lea     esi, [eax+ecx-6]
.text:0040D0F2                 mov     ecx, 7
.text:0040D0F7                 mov     ebp, esi
.text:0040D0F9                 repe cmpsb
.text:0040D0FB                 jz      short loc_40D118
.text:0040D0FD
.text:0040D0FD loc_40D0FD:                             ; CODE XREF: sub_40D0B0+2F↑j
.text:0040D0FD                 call    _errno
.text:0040D102                 mov     dword ptr [eax], 16h
.text:0040D108
.text:0040D108 loc_40D108:                             ; CODE XREF: sub_40D0B0+295↓j
.text:0040D108                                         ; sub_40D0B0+2D8↓j ...
.text:0040D108                 mov     eax, 0FFFFFFFFh
.text:0040D10D
.text:0040D10D loc_40D10D:                             ; CODE XREF: sub_40D0B0+2EF↓j
.text:0040D10D                                         ; sub_40D0B0+332↓j
.text:0040D10D                 add     esp, 8Ch
.text:0040D113                 pop     ebx
.text:0040D114                 pop     esi
.text:0040D115                 pop     edi
.text:0040D116                 pop     ebp
.text:0040D117                 retn
.text:0040D118 ; ---------------------------------------------------------------------------
.text:0040D118
.text:0040D118 loc_40D118:                             ; CODE XREF: sub_40D0B0+4B↑j
.text:0040D118                 mov     ecx, ds:dword_412554
.text:0040D11E                 mov     edi, ds:dword_412550
.text:0040D124                 mov     eax, ecx
.text:0040D126                 or      eax, edi
.text:0040D128                 jz      loc_40D463
.text:0040D12E
.text:0040D12E loc_40D12E:                             ; CODE XREF: sub_40D0B0+3F8↓j
.text:0040D12E                 rdtsc
.text:0040D130                 mov     edi, edx
.text:0040D132                 mov     esi, eax
.text:0040D134                 call    _getpid
.text:0040D139                 mov     ebx, eax
.text:0040D13B                 mov     edx, esi
.text:0040D13D                 sar     ebx, 1Fh
.text:0040D140                 xor     edx, eax
.text:0040D142                 mov     ecx, edi
.text:0040D144                 xor     ecx, ebx
.text:0040D146                 mov     ebx, edx
.text:0040D148                 mov     esi, ecx
.text:0040D14A                 add     ebx, ds:dword_412550
.text:0040D150                 adc     esi, ds:dword_412554
.text:0040D156                 xor     edi, edi
.text:0040D158                 mov     ds:dword_412550, ebx
.text:0040D15E                 mov     ds:dword_412554, esi
.text:0040D164                 lea     esi, [esi+0]
.text:0040D16A                 lea     edi, [edi+0]
.text:0040D170
.text:0040D170 loc_40D170:                             ; CODE XREF: sub_40D0B0+2C7↓j
.text:0040D170                 mov     [esp+9Ch+Str], ebx
.text:0040D173                 mov     [esp+9Ch+OpenFlag], esi
.text:0040D177                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040D17F                 mov     [esp+9Ch+var_90], 0
.text:0040D187                 call    sub_40F0F0
.text:0040D18C                 movzx   ecx, ds:byte_40CFC0[eax]
.text:0040D193                 mov     [ebp+0], cl
.text:0040D196                 mov     [esp+9Ch+Str], ebx
.text:0040D199                 mov     [esp+9Ch+OpenFlag], esi
.text:0040D19D                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040D1A5                 mov     [esp+9Ch+var_90], 0
.text:0040D1AD                 call    sub_40F270
.text:0040D1B2                 mov     [esp+9Ch+Str], eax
.text:0040D1B5                 mov     ebx, eax
.text:0040D1B7                 mov     esi, edx
.text:0040D1B9                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040D1C1                 mov     [esp+9Ch+var_90], 0
.text:0040D1C9                 mov     [esp+9Ch+OpenFlag], edx
.text:0040D1CD                 call    sub_40F0F0
.text:0040D1D2                 movzx   edx, ds:byte_40CFC0[eax]
.text:0040D1D9                 mov     [ebp+1], dl
.text:0040D1DC                 mov     [esp+9Ch+Str], ebx
.text:0040D1DF                 mov     [esp+9Ch+OpenFlag], esi
.text:0040D1E3                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040D1EB                 mov     [esp+9Ch+var_90], 0
.text:0040D1F3                 call    sub_40F270
.text:0040D1F8                 mov     [esp+9Ch+Str], eax
.text:0040D1FB                 mov     ebx, eax
.text:0040D1FD                 mov     esi, edx
.text:0040D1FF                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040D207                 mov     [esp+9Ch+var_90], 0
.text:0040D20F                 mov     [esp+9Ch+OpenFlag], edx
.text:0040D213                 call    sub_40F0F0
.text:0040D218                 movzx   ecx, ds:byte_40CFC0[eax]
.text:0040D21F                 mov     [ebp+2], cl
.text:0040D222                 mov     [esp+9Ch+Str], ebx
.text:0040D225                 mov     [esp+9Ch+OpenFlag], esi
.text:0040D229                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040D231                 mov     [esp+9Ch+var_90], 0
.text:0040D239                 call    sub_40F270
.text:0040D23E                 mov     [esp+9Ch+Str], eax
.text:0040D241                 mov     ebx, eax
.text:0040D243                 mov     esi, edx
.text:0040D245                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040D24D                 mov     [esp+9Ch+var_90], 0
.text:0040D255                 mov     [esp+9Ch+OpenFlag], edx
.text:0040D259                 call    sub_40F0F0
.text:0040D25E                 movzx   edx, ds:byte_40CFC0[eax]
.text:0040D265                 mov     [ebp+3], dl
.text:0040D268                 mov     [esp+9Ch+Str], ebx
.text:0040D26B                 mov     [esp+9Ch+OpenFlag], esi
.text:0040D26F                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040D277                 mov     [esp+9Ch+var_90], 0
.text:0040D27F                 call    sub_40F270
.text:0040D284                 mov     [esp+9Ch+Str], eax
.text:0040D287                 mov     ebx, eax
.text:0040D289                 mov     esi, edx
.text:0040D28B                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040D293                 mov     [esp+9Ch+var_90], 0
.text:0040D29B                 mov     [esp+9Ch+OpenFlag], edx
.text:0040D29F                 call    sub_40F0F0
.text:0040D2A4                 movzx   ecx, ds:byte_40CFC0[eax]
.text:0040D2AB                 mov     [ebp+4], cl
.text:0040D2AE                 mov     [esp+9Ch+Str], ebx
.text:0040D2B1                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040D2B9                 mov     [esp+9Ch+var_90], 0
.text:0040D2C1                 mov     [esp+9Ch+OpenFlag], esi
.text:0040D2C5                 call    sub_40F270
.text:0040D2CA                 mov     [esp+9Ch+Str], eax
.text:0040D2CD                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040D2D5                 mov     [esp+9Ch+var_90], 0
.text:0040D2DD                 mov     [esp+9Ch+OpenFlag], edx
.text:0040D2E1                 call    sub_40F0F0
.text:0040D2E6                 movzx   ebx, ds:byte_40CFC0[eax]
.text:0040D2ED                 mov     [ebp+5], bl
.text:0040D2F0                 cmp     [esp+9Ch+arg_4], 1
.text:0040D2F8                 jz      loc_40D447
.text:0040D2FE                 cmp     [esp+9Ch+arg_4], 1
.text:0040D306                 jle     loc_40D410
.text:0040D30C                 cmp     [esp+9Ch+arg_4], 2
.text:0040D314                 jz      loc_40D3E7
.text:0040D31A                 cmp     [esp+9Ch+arg_4], 3
.text:0040D322                 jz      loc_40D3A4
.text:0040D328
.text:0040D328 loc_40D328:                             ; CODE XREF: sub_40D0B0+369↓j
.text:0040D328                 mov     ebx, offset aInvalidKindInG ; "invalid KIND in __gen_tempname"
.text:0040D32D                 test    ebx, ebx
.text:0040D32F                 jnz     loc_40D4AD
.text:0040D335
.text:0040D335 loc_40D335:                             ; CODE XREF: sub_40D0B0+354↓j
.text:0040D335                 mov     eax, [esp+9Ch+var_88]
.text:0040D339                 test    eax, eax
.text:0040D33B                 jns     short loc_40D390
.text:0040D33D                 call    _errno
.text:0040D342                 cmp     dword ptr [eax], 11h
.text:0040D345                 jnz     loc_40D108
.text:0040D34B
.text:0040D34B loc_40D34B:                             ; CODE XREF: sub_40D0B0+315↓j
.text:0040D34B                 mov     edx, ds:dword_412550
.text:0040D351                 mov     ecx, ds:dword_412554
.text:0040D357                 add     edx, 1E61h
.text:0040D35D                 adc     ecx, 0
.text:0040D360                 mov     ebx, edx
.text:0040D362                 inc     edi
.text:0040D363                 mov     ds:dword_412550, edx
.text:0040D369                 cmp     edi, 3A2F8h
.text:0040D36F                 mov     esi, ecx
.text:0040D371                 mov     ds:dword_412554, ecx
.text:0040D377                 jb      loc_40D170
.text:0040D37D                 call    _errno
.text:0040D382                 mov     dword ptr [eax], 11h
.text:0040D388                 jmp     loc_40D108
.text:0040D388 ; ---------------------------------------------------------------------------
.text:0040D38D                 align 10h
.text:0040D390
.text:0040D390 loc_40D390:                             ; CODE XREF: sub_40D0B0+28B↑j
.text:0040D390                 call    _errno
.text:0040D395                 mov     esi, [esp+9Ch+var_8C]
.text:0040D399                 mov     [eax], esi
.text:0040D39B                 mov     eax, [esp+9Ch+var_88]
.text:0040D39F                 jmp     loc_40D10D
.text:0040D3A4 ; ---------------------------------------------------------------------------
.text:0040D3A4
.text:0040D3A4 loc_40D3A4:                             ; CODE XREF: sub_40D0B0+272↑j
.text:0040D3A4                 mov     [esp+9Ch+Str], 0 ; LPCSTR
.text:0040D3AB                 mov     ecx, [esp+9Ch+FileName]
.text:0040D3B2                 lea     esi, [esp+9Ch+var_7C]
.text:0040D3B6                 mov     [esp+9Ch+var_94], esi ; int
.text:0040D3BA                 mov     [esp+9Ch+OpenFlag], ecx ; int
.text:0040D3BE                 call    sub_40D5E0
.text:0040D3C3                 test    eax, eax
.text:0040D3C5                 jns     short loc_40D34B
.text:0040D3C7                 call    _errno
.text:0040D3CC                 cmp     dword ptr [eax], 2
.text:0040D3CF                 jnz     loc_40D108
.text:0040D3D5                 call    _errno
.text:0040D3DA                 mov     ebx, [esp+9Ch+var_8C]
.text:0040D3DE                 mov     [eax], ebx
.text:0040D3E0                 xor     eax, eax
.text:0040D3E2                 jmp     loc_40D10D
.text:0040D3E7 ; ---------------------------------------------------------------------------
.text:0040D3E7
.text:0040D3E7 loc_40D3E7:                             ; CODE XREF: sub_40D0B0+264↑j
.text:0040D3E7                 mov     [esp+9Ch+OpenFlag], 1C0h ; AccessMode
.text:0040D3EF                 mov     edx, [esp+9Ch+FileName]
.text:0040D3F6                 mov     [esp+9Ch+Str], edx ; LPCSTR
.text:0040D3F9                 call    sub_40D4E0
.text:0040D3FE                 mov     esi, esi
.text:0040D400
.text:0040D400 loc_40D400:                             ; CODE XREF: sub_40D0B0+395↓j
.text:0040D400                 mov     [esp+9Ch+var_88], eax
.text:0040D404                 jmp     loc_40D335
.text:0040D404 ; ---------------------------------------------------------------------------
.text:0040D409                 align 10h
.text:0040D410
.text:0040D410 loc_40D410:                             ; CODE XREF: sub_40D0B0+256↑j
.text:0040D410                 mov     eax, [esp+9Ch+arg_4]
.text:0040D417                 test    eax, eax
.text:0040D419                 jnz     loc_40D328
.text:0040D41F                 mov     [esp+9Ch+var_94], 180h
.text:0040D427                 mov     esi, [esp+9Ch+FileName]
.text:0040D42E                 mov     [esp+9Ch+OpenFlag], 8502h ; OpenFlag
.text:0040D436                 mov     [esp+9Ch+Str], esi ; FileName
.text:0040D439                 lea     esi, [esi+0]
.text:0040D440
.text:0040D440 loc_40D440:                             ; CODE XREF: sub_40D0B0+3B1↓j
.text:0040D440                 call    _open_0
.text:0040D445                 jmp     short loc_40D400
.text:0040D447 ; ---------------------------------------------------------------------------
.text:0040D447
.text:0040D447 loc_40D447:                             ; CODE XREF: sub_40D0B0+248↑j
.text:0040D447                 mov     [esp+9Ch+var_94], 180h
.text:0040D44F                 mov     ebx, [esp+9Ch+FileName]
.text:0040D456                 mov     [esp+9Ch+OpenFlag], 8502h
.text:0040D45E                 mov     [esp+9Ch+Str], ebx
.text:0040D461                 jmp     short loc_40D440
.text:0040D463 ; ---------------------------------------------------------------------------
.text:0040D463
.text:0040D463 loc_40D463:                             ; CODE XREF: sub_40D0B0+78↑j
.text:0040D463                 mov     [esp+9Ch+OpenFlag], 0
.text:0040D46B                 lea     ebx, [esp+9Ch+var_84]
.text:0040D46F                 mov     [esp+9Ch+Str], ebx
.text:0040D472                 call    sub_40D560
.text:0040D477                 mov     edi, [esp+9Ch+var_80]
.text:0040D47B                 mov     edx, [esp+9Ch+var_84]
.text:0040D47F                 mov     ecx, edi
.text:0040D481                 mov     ebx, edi
.text:0040D483                 shl     ecx, 10h
.text:0040D486                 sar     ebx, 1Fh
.text:0040D489                 shld    ebx, edi, 10h
.text:0040D48D                 mov     esi, edx
.text:0040D48F                 mov     edi, edx
.text:0040D491                 mov     edx, ecx
.text:0040D493                 sar     edi, 1Fh
.text:0040D496                 xor     edx, esi
.text:0040D498                 mov     ds:dword_412550, edx
.text:0040D49E                 mov     esi, ebx
.text:0040D4A0                 xor     esi, edi
.text:0040D4A2                 mov     ds:dword_412554, esi
.text:0040D4A8                 jmp     loc_40D12E
.text:0040D4AD ; ---------------------------------------------------------------------------
.text:0040D4AD
.text:0040D4AD loc_40D4AD:                             ; CODE XREF: sub_40D0B0+27F↑j
.text:0040D4AD                 mov     [esp+9Ch+var_94], 151h
.text:0040D4B5                 mov     [esp+9Ch+OpenFlag], offset aLibc05SrcStdio ; "../../libc-0.5-src/stdio-common/tempnam"...
.text:0040D4BD                 mov     [esp+9Ch+Str], offset aInvalidKindInG_0 ; "! \"invalid KIND in __gen_tempname\""
.text:0040D4C4                 call    _assert
.text:0040D4C4 sub_40D0B0      endp
.text:0040D4C4
.text:0040D4C4 ; ---------------------------------------------------------------------------
.text:0040D4C9                 align 20h
.text:0040D4E0
.text:0040D4E0 ; =============== S U B R O U T I N E =======================================
.text:0040D4E0
.text:0040D4E0
.text:0040D4E0 ; int __cdecl sub_40D4E0(LPCSTR, int AccessMode)
.text:0040D4E0 sub_40D4E0      proc near               ; CODE XREF: sub_40D0B0+349↑p
.text:0040D4E0
.text:0040D4E0 lpPathName      = dword ptr -1Ch
.text:0040D4E0 lpSecurityAttributes= dword ptr -18h
.text:0040D4E0 var_8           = dword ptr -8
.text:0040D4E0 var_4           = dword ptr -4
.text:0040D4E0 arg_0           = dword ptr  4
.text:0040D4E0 AccessMode      = dword ptr  8
.text:0040D4E0
.text:0040D4E0                 sub     esp, 1Ch
.text:0040D4E3                 mov     [esp+1Ch+var_8], ebx
.text:0040D4E7                 mov     ebx, [esp+1Ch+arg_0]
.text:0040D4EB                 mov     [esp+1Ch+var_4], esi
.text:0040D4EF                 mov     esi, [esp+1Ch+AccessMode]
.text:0040D4F3                 test    ebx, ebx
.text:0040D4F5                 jz      short loc_40D545
.text:0040D4F7                 mov     [esp+1Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:0040D4FF                 mov     [esp+1Ch+lpPathName], ebx ; lpPathName
.text:0040D502                 call    CreateDirectoryA
.text:0040D507                 sub     esp, 8
.text:0040D50A                 test    eax, eax
.text:0040D50C                 jz      short loc_40D526
.text:0040D50E                 mov     [esp+1Ch+AccessMode], esi ; AccessMode
.text:0040D512                 mov     esi, [esp+1Ch+var_4]
.text:0040D516                 mov     [esp+1Ch+arg_0], ebx ; FileName
.text:0040D51A                 mov     ebx, [esp+1Ch+var_8]
.text:0040D51E                 add     esp, 1Ch
.text:0040D521                 jmp     _chmod
.text:0040D526 ; ---------------------------------------------------------------------------
.text:0040D526
.text:0040D526 loc_40D526:                             ; CODE XREF: sub_40D4E0+2C↑j
.text:0040D526                 call    sub_40B060
.text:0040D52B                 mov     esi, eax
.text:0040D52D                 call    _errno
.text:0040D532                 mov     [eax], esi
.text:0040D534
.text:0040D534 loc_40D534:                             ; CODE XREF: sub_40D4E0+70↓j
.text:0040D534                 mov     ebx, [esp+1Ch+var_8]
.text:0040D538                 mov     eax, 0FFFFFFFFh
.text:0040D53D                 mov     esi, [esp+1Ch+var_4]
.text:0040D541                 add     esp, 1Ch
.text:0040D544                 retn
.text:0040D545 ; ---------------------------------------------------------------------------
.text:0040D545
.text:0040D545 loc_40D545:                             ; CODE XREF: sub_40D4E0+15↑j
.text:0040D545                 call    _errno
.text:0040D54A                 mov     dword ptr [eax], 16h
.text:0040D550                 jmp     short loc_40D534
.text:0040D550 sub_40D4E0      endp
.text:0040D550
.text:0040D550 ; ---------------------------------------------------------------------------
.text:0040D552                 align 10h
.text:0040D560
.text:0040D560 ; =============== S U B R O U T I N E =======================================
.text:0040D560
.text:0040D560
.text:0040D560 sub_40D560      proc near               ; CODE XREF: sub_40D0B0+3C2↑p
.text:0040D560
.text:0040D560 var_1C          = dword ptr -1Ch
.text:0040D560 var_18          = dword ptr -18h
.text:0040D560 var_C           = dword ptr -0Ch
.text:0040D560 var_8           = dword ptr -8
.text:0040D560 var_4           = dword ptr -4
.text:0040D560 arg_0           = dword ptr  4
.text:0040D560 arg_4           = dword ptr  8
.text:0040D560
.text:0040D560                 sub     esp, 1Ch
.text:0040D563                 mov     edx, [esp+1Ch+arg_4]
.text:0040D567                 mov     [esp+1Ch+var_4], ebx
.text:0040D56B                 mov     ebx, [esp+1Ch+arg_0]
.text:0040D56F                 mov     [esp+1Ch+var_18], edx
.text:0040D573                 lea     edx, [esp+1Ch+var_C]
.text:0040D577                 mov     [esp+1Ch+var_1C], edx
.text:0040D57A                 call    sub_40D6F0
.text:0040D57F                 test    eax, eax
.text:0040D581                 mov     edx, 0FFFFFFFFh
.text:0040D586                 jnz     short loc_40D5AA
.text:0040D588                 mov     ecx, [esp+1Ch+var_C]
.text:0040D58C                 mov     edx, 10624DD3h
.text:0040D591                 mov     [ebx], ecx
.text:0040D593                 mov     ecx, [esp+1Ch+var_8]
.text:0040D597                 mov     eax, ecx
.text:0040D599                 imul    edx
.text:0040D59B                 mov     eax, ecx
.text:0040D59D                 sar     eax, 1Fh
.text:0040D5A0                 sar     edx, 6
.text:0040D5A3                 sub     edx, eax
.text:0040D5A5                 mov     [ebx+4], edx
.text:0040D5A8                 xor     edx, edx
.text:0040D5AA
.text:0040D5AA loc_40D5AA:                             ; CODE XREF: sub_40D560+26↑j
.text:0040D5AA                 mov     ebx, [esp+1Ch+var_4]
.text:0040D5AE                 mov     eax, edx
.text:0040D5B0                 add     esp, 1Ch
.text:0040D5B3                 retn
.text:0040D5B3 sub_40D560      endp
.text:0040D5B3
.text:0040D5B3 ; ---------------------------------------------------------------------------
.text:0040D5B4                 align 10h
.text:0040D5C0
.text:0040D5C0 ; =============== S U B R O U T I N E =======================================
.text:0040D5C0
.text:0040D5C0
.text:0040D5C0 sub_40D5C0      proc near               ; CODE XREF: sub_40CD30+1A7↑p
.text:0040D5C0                                         ; sub_40CD30+237↑p ...
.text:0040D5C0                 mov     edx, ds:dword_412560
.text:0040D5C6                 test    edx, edx
.text:0040D5C8                 jnz     short loc_40D5D0
.text:0040D5CA                 jmp     getenv
.text:0040D5CA ; ---------------------------------------------------------------------------
.text:0040D5CF                 align 10h
.text:0040D5D0
.text:0040D5D0 loc_40D5D0:                             ; CODE XREF: sub_40D5C0+8↑j
.text:0040D5D0                 xor     eax, eax
.text:0040D5D2                 retn
.text:0040D5D2 sub_40D5C0      endp
.text:0040D5D2
.text:0040D5D2 ; ---------------------------------------------------------------------------
.text:0040D5D3                 align 10h
.text:0040D5E0
.text:0040D5E0 ; =============== S U B R O U T I N E =======================================
.text:0040D5E0
.text:0040D5E0
.text:0040D5E0 ; int __cdecl sub_40D5E0(LPCSTR, int, int)
.text:0040D5E0 sub_40D5E0      proc near               ; CODE XREF: sub_40D0B0+30E↑p
.text:0040D5E0                                         ; sub_40D630+42↓p ...
.text:0040D5E0
.text:0040D5E0 lpFileName      = dword ptr -2Ch
.text:0040D5E0 dwDesiredAccess = dword ptr -28h
.text:0040D5E0 dwShareMode     = dword ptr -24h
.text:0040D5E0 lpSecurityAttributes= dword ptr -20h
.text:0040D5E0 dwCreationDisposition= dword ptr -1Ch
.text:0040D5E0 dwFlagsAndAttributes= dword ptr -18h
.text:0040D5E0 hTemplateFile   = dword ptr -14h
.text:0040D5E0 var_10          = dword ptr -10h
.text:0040D5E0 var_C           = dword ptr -0Ch
.text:0040D5E0 var_8           = dword ptr -8
.text:0040D5E0 var_4           = dword ptr -4
.text:0040D5E0 arg_0           = dword ptr  4
.text:0040D5E0 arg_4           = dword ptr  8
.text:0040D5E0 arg_8           = dword ptr  0Ch
.text:0040D5E0
.text:0040D5E0 ; FUNCTION CHUNK AT .text:004096D0 SIZE 0000013A BYTES
.text:0040D5E0
.text:0040D5E0                 sub     esp, 0Ch
.text:0040D5E3                 mov     ecx, [esp+0Ch+arg_0]
.text:0040D5E7                 mov     edx, [esp+0Ch+arg_4]
.text:0040D5EB                 mov     eax, [esp+0Ch+arg_8]
.text:0040D5EF                 test    ecx, ecx
.text:0040D5F1                 jnz     short loc_40D610
.text:0040D5F3                 test    edx, edx
.text:0040D5F5                 jz      short loc_40D610
.text:0040D5F7                 test    eax, eax
.text:0040D5F9                 jz      short loc_40D610
.text:0040D5FB                 mov     [esp+0Ch+arg_4], eax
.text:0040D5FF                 mov     [esp+0Ch+arg_0], edx
.text:0040D603                 add     esp, 0Ch
.text:0040D606                 jmp     loc_4096D0
.text:0040D606 ; ---------------------------------------------------------------------------
.text:0040D60B                 align 10h
.text:0040D610
.text:0040D610 loc_40D610:                             ; CODE XREF: sub_40D5E0+11↑j
.text:0040D610                                         ; sub_40D5E0+15↑j ...
.text:0040D610                 call    _errno
.text:0040D615                 mov     dword ptr [eax], 16h
.text:0040D61B                 mov     eax, 0FFFFFFFFh
.text:0040D620                 add     esp, 0Ch
.text:0040D623                 retn
.text:0040D623 sub_40D5E0      endp
.text:0040D623
.text:0040D623 ; ---------------------------------------------------------------------------
.text:0040D624                 align 10h
.text:0040D630
.text:0040D630 ; =============== S U B R O U T I N E =======================================
.text:0040D630
.text:0040D630
.text:0040D630 ; int __cdecl sub_40D630(LPCSTR, char *, int)
.text:0040D630 sub_40D630      proc near               ; CODE XREF: sub_40CD30+104↑p
.text:0040D630                                         ; sub_40CD30+158↑p ...
.text:0040D630
.text:0040D630 var_13C         = dword ptr -13Ch
.text:0040D630 lpString1       = dword ptr -138h
.text:0040D630 var_134         = dword ptr -134h
.text:0040D630 String1         = byte ptr -12Ch
.text:0040D630 var_10          = dword ptr -10h
.text:0040D630 var_C           = dword ptr -0Ch
.text:0040D630 var_8           = dword ptr -8
.text:0040D630 var_4           = dword ptr -4
.text:0040D630 arg_0           = dword ptr  4
.text:0040D630 arg_4           = dword ptr  8
.text:0040D630 arg_8           = dword ptr  0Ch
.text:0040D630
.text:0040D630                 sub     esp, 13Ch
.text:0040D636                 mov     [esp+13Ch+var_10], ebx
.text:0040D63D                 mov     ebx, [esp+13Ch+arg_8]
.text:0040D644                 mov     [esp+13Ch+var_C], esi
.text:0040D64B                 mov     esi, [esp+13Ch+arg_4]
.text:0040D652                 mov     [esp+13Ch+var_8], edi
.text:0040D659                 mov     edi, [esp+13Ch+arg_0]
.text:0040D660                 mov     [esp+13Ch+var_4], ebp
.text:0040D667                 mov     [esp+13Ch+var_134], ebx ; int
.text:0040D66B                 mov     [esp+13Ch+lpString1], esi ; int
.text:0040D66F                 mov     [esp+13Ch+var_13C], edi ; LPCSTR
.text:0040D672                 call    sub_40D5E0
.text:0040D677                 cmp     eax, 0FFFFFFFFh
.text:0040D67A                 mov     edx, eax
.text:0040D67C                 jz      short loc_40D68E
.text:0040D67E                 mov     ecx, [ebx]
.text:0040D680                 and     ecx, 0F000h
.text:0040D686                 cmp     ecx, 0A000h
.text:0040D68C                 jz      short loc_40D6B3
.text:0040D68E
.text:0040D68E loc_40D68E:                             ; CODE XREF: sub_40D630+4C↑j
.text:0040D68E                                         ; sub_40D630+A1↓j ...
.text:0040D68E                 mov     ebx, [esp+13Ch+var_10]
.text:0040D695                 mov     eax, edx
.text:0040D697                 mov     esi, [esp+13Ch+var_C]
.text:0040D69E                 mov     edi, [esp+13Ch+var_8]
.text:0040D6A5                 mov     ebp, [esp+13Ch+var_4]
.text:0040D6AC                 add     esp, 13Ch
.text:0040D6B2                 retn
.text:0040D6B3 ; ---------------------------------------------------------------------------
.text:0040D6B3
.text:0040D6B3 loc_40D6B3:                             ; CODE XREF: sub_40D630+5C↑j
.text:0040D6B3                 mov     [esp+13Ch+var_134], 104h
.text:0040D6BB                 lea     ebp, [esp+13Ch+String1]
.text:0040D6BF                 mov     [esp+13Ch+lpString1], ebp ; lpString1
.text:0040D6C3                 mov     [esp+13Ch+var_13C], esi ; char *
.text:0040D6C6                 call    sub_40D9B0
.text:0040D6CB                 inc     eax
.text:0040D6CC                 mov     edx, 0FFFFFFFFh
.text:0040D6D1                 jz      short loc_40D68E
.text:0040D6D3                 mov     [esp+13Ch+var_134], ebx ; int
.text:0040D6D7                 mov     [esp+13Ch+lpString1], ebp ; int
.text:0040D6DB                 mov     [esp+13Ch+var_13C], edi ; LPCSTR
.text:0040D6DE                 call    sub_40D5E0
.text:0040D6E3                 mov     edx, eax
.text:0040D6E5                 jmp     short loc_40D68E
.text:0040D6E5 sub_40D630      endp
.text:0040D6E5
.text:0040D6E5 ; ---------------------------------------------------------------------------
.text:0040D6E7                 align 10h
.text:0040D6F0
.text:0040D6F0 ; =============== S U B R O U T I N E =======================================
.text:0040D6F0
.text:0040D6F0
.text:0040D6F0 sub_40D6F0      proc near               ; CODE XREF: sub_40D560+1A↑p
.text:0040D6F0
.text:0040D6F0 lpTimeZoneInformation= dword ptr -0DCh
.text:0040D6F0 var_D8          = dword ptr -0D8h
.text:0040D6F0 var_D4          = dword ptr -0D4h
.text:0040D6F0 var_D0          = dword ptr -0D0h
.text:0040D6F0 SystemTimeAsFileTime= _FILETIME ptr -0C4h
.text:0040D6F0 TimeZoneInformation= _TIME_ZONE_INFORMATION ptr -0BCh
.text:0040D6F0 arg_0           = dword ptr  4
.text:0040D6F0 arg_4           = dword ptr  8
.text:0040D6F0
.text:0040D6F0                 push    edi
.text:0040D6F1                 push    esi
.text:0040D6F2                 push    ebx
.text:0040D6F3                 sub     esp, 0D0h
.text:0040D6F9                 mov     ebx, [esp+0DCh+arg_4]
.text:0040D700                 mov     edi, [esp+0DCh+arg_0]
.text:0040D707                 test    ebx, ebx
.text:0040D709                 jz      short loc_40D734
.text:0040D70B                 lea     edx, [esp+0DCh+TimeZoneInformation]
.text:0040D70F                 mov     [esp+0DCh+lpTimeZoneInformation], edx ; lpTimeZoneInformation
.text:0040D712                 call    GetTimeZoneInformation
.text:0040D717                 sub     esp, 4
.text:0040D71A                 cmp     eax, 0FFFFFFFFh
.text:0040D71D                 jz      loc_40D7B5
.text:0040D723                 xor     ecx, ecx
.text:0040D725                 mov     esi, [esp+0DCh+TimeZoneInformation.Bias]
.text:0040D729                 cmp     eax, 2
.text:0040D72C                 setz    cl
.text:0040D72F                 mov     [ebx], esi
.text:0040D731                 mov     [ebx+4], ecx
.text:0040D734
.text:0040D734 loc_40D734:                             ; CODE XREF: sub_40D6F0+19↑j
.text:0040D734                                         ; sub_40D6F0+E0↓j
.text:0040D734                 test    edi, edi
.text:0040D736                 jz      short loc_40D7A9
.text:0040D738                 lea     ecx, [esp+0DCh+SystemTimeAsFileTime]
.text:0040D73C                 mov     [esp+0DCh+lpTimeZoneInformation], ecx ; lpSystemTimeAsFileTime
.text:0040D73F                 call    GetSystemTimeAsFileTime
.text:0040D744                 sub     esp, 4
.text:0040D747                 mov     ebx, [esp+0DCh+SystemTimeAsFileTime.dwLowDateTime]
.text:0040D74B                 mov     [esp+0DCh+var_D4], 989680h
.text:0040D753                 mov     esi, [esp+0DCh+SystemTimeAsFileTime.dwHighDateTime]
.text:0040D757                 mov     [esp+0DCh+var_D0], 0
.text:0040D75F                 add     ebx, 2AC18000h
.text:0040D765                 adc     esi, 0FE624E21h
.text:0040D76B                 mov     [esp+0DCh+SystemTimeAsFileTime.dwLowDateTime], ebx
.text:0040D76F                 mov     [esp+0DCh+lpTimeZoneInformation], ebx
.text:0040D772                 mov     [esp+0DCh+SystemTimeAsFileTime.dwHighDateTime], esi
.text:0040D776                 mov     [esp+0DCh+var_D8], esi
.text:0040D77A                 call    sub_40F270
.text:0040D77F                 mov     [edi], eax
.text:0040D781                 mov     [esp+0DCh+lpTimeZoneInformation], ebx
.text:0040D784                 mov     [esp+0DCh+var_D4], 989680h
.text:0040D78C                 mov     [esp+0DCh+var_D0], 0
.text:0040D794                 mov     [esp+0DCh+var_D8], esi
.text:0040D798                 call    sub_40F0F0
.text:0040D79D                 lea     ebx, [eax+eax*4]
.text:0040D7A0                 lea     edx, [ebx+ebx*4]
.text:0040D7A3                 shl     edx, 2
.text:0040D7A6                 mov     [edi+4], edx
.text:0040D7A9
.text:0040D7A9 loc_40D7A9:                             ; CODE XREF: sub_40D6F0+46↑j
.text:0040D7A9                 add     esp, 0D0h
.text:0040D7AF                 xor     eax, eax
.text:0040D7B1                 pop     ebx
.text:0040D7B2                 pop     esi
.text:0040D7B3                 pop     edi
.text:0040D7B4                 retn
.text:0040D7B5 ; ---------------------------------------------------------------------------
.text:0040D7B5
.text:0040D7B5 loc_40D7B5:                             ; CODE XREF: sub_40D6F0+2D↑j
.text:0040D7B5                 mov     dword ptr [ebx], 0
.text:0040D7BB                 mov     dword ptr [ebx+4], 0
.text:0040D7C2                 call    sub_40B060
.text:0040D7C7                 mov     esi, eax
.text:0040D7C9                 call    _errno
.text:0040D7CE                 mov     [eax], esi
.text:0040D7D0                 jmp     loc_40D734
.text:0040D7D0 sub_40D6F0      endp
.text:0040D7D0
.text:0040D7D0 ; ---------------------------------------------------------------------------
.text:0040D7D5                 align 10h
.text:0040D7E0                 sub     esp, 0Ch
.text:0040D7E3                 mov     [esp+4], ebx
.text:0040D7E7                 mov     [esp+8], esi
.text:0040D7EB                 xor     esi, esi
.text:0040D7ED                 call    sub_40DAC0
.text:0040D7F2                 mov     ebx, eax
.text:0040D7F4                 call    sub_40DAB0
.text:0040D7F9                 cmp     ebx, eax
.text:0040D7FB                 jz      short loc_40D814
.text:0040D7FD
.text:0040D7FD loc_40D7FD:                             ; CODE XREF: .text:0040D822↓j
.text:0040D7FD                 mov     esi, 1
.text:0040D802
.text:0040D802 loc_40D802:                             ; CODE XREF: .text:0040D824↓j
.text:0040D802                 mov     ds:dword_412560, esi
.text:0040D808                 mov     ebx, [esp+4]
.text:0040D80C                 mov     esi, [esp+8]
.text:0040D810                 add     esp, 0Ch
.text:0040D813                 retn
.text:0040D814 ; ---------------------------------------------------------------------------
.text:0040D814
.text:0040D814 loc_40D814:                             ; CODE XREF: .text:0040D7FB↑j
.text:0040D814                 call    sub_40DAA0
.text:0040D819                 mov     ebx, eax
.text:0040D81B                 call    sub_40DA90
.text:0040D820                 cmp     ebx, eax
.text:0040D822                 jnz     short loc_40D7FD
.text:0040D824                 jmp     short loc_40D802
.text:0040D824 ; ---------------------------------------------------------------------------
.text:0040D826                 align 10h
.text:0040D830
.text:0040D830 ; =============== S U B R O U T I N E =======================================
.text:0040D830
.text:0040D830
.text:0040D830 ; int __cdecl sub_40D830(LPCCH lpMultiByteStr, LPSTR lpString1)
.text:0040D830 sub_40D830      proc near               ; CODE XREF: sub_40D9B0+93↓p
.text:0040D830
.text:0040D830 pvReserved      = dword ptr -35Ch
.text:0040D830 pUnkOuter       = dword ptr -358h
.text:0040D830 dwClsContext    = dword ptr -354h
.text:0040D830 riid            = dword ptr -350h
.text:0040D830 ppv             = dword ptr -34Ch
.text:0040D830 cchWideChar     = dword ptr -348h
.text:0040D830 var_334         = byte ptr -334h
.text:0040D830 var_330         = dword ptr -330h
.text:0040D830 String2         = byte ptr -32Ch
.text:0040D830 WideCharStr     = word ptr -21Ch
.text:0040D830 lpMultiByteStr  = dword ptr  4
.text:0040D830 lpString1       = dword ptr  8
.text:0040D830
.text:0040D830                 push    edi
.text:0040D831                 push    esi
.text:0040D832                 push    ebx
.text:0040D833                 sub     esp, 350h
.text:0040D839                 mov     edi, [esp+35Ch+lpString1]
.text:0040D840                 mov     byte ptr [edi], 0
.text:0040D843                 mov     [esp+35Ch+pvReserved], 0 ; pvReserved
.text:0040D84A                 call    OleInitialize
.text:0040D84F                 sub     esp, 4
.text:0040D852                 cmp     eax, 1
.text:0040D855                 ja      loc_40D98F
.text:0040D85B                 mov     [esp+35Ch+riid], offset riid ; riid
.text:0040D863                 lea     ecx, [esp+35Ch+var_330]
.text:0040D867                 mov     [esp+35Ch+ppv], ecx ; ppv
.text:0040D86B                 mov     [esp+35Ch+dwClsContext], 1 ; dwClsContext
.text:0040D873                 mov     [esp+35Ch+pUnkOuter], 0 ; pUnkOuter
.text:0040D87B                 mov     [esp+35Ch+pvReserved], offset rclsid ; rclsid
.text:0040D882                 call    CoCreateInstance
.text:0040D887                 sub     esp, 14h
.text:0040D88A                 test    eax, eax
.text:0040D88C                 js      loc_40D98F
.text:0040D892                 mov     ebx, [esp+35Ch+var_330]
.text:0040D896                 lea     edx, [esp+35Ch+var_334]
.text:0040D89A                 mov     esi, [ebx]
.text:0040D89C                 mov     [esp+35Ch+dwClsContext], edx
.text:0040D8A0                 mov     [esp+35Ch+pvReserved], ebx
.text:0040D8A3                 xor     ebx, ebx
.text:0040D8A5                 mov     [esp+35Ch+pUnkOuter], offset dword_40E8A0
.text:0040D8AD                 call    dword ptr [esi]
.text:0040D8AF                 sub     esp, 0Ch
.text:0040D8B2                 lea     esi, [esp+35Ch+WideCharStr]
.text:0040D8B9                 call    AreFileApisANSI
.text:0040D8BE                 mov     [esp+35Ch+cchWideChar], 104h ; cchWideChar
.text:0040D8C6                 test    eax, eax
.text:0040D8C8                 mov     ecx, [esp+35Ch+lpMultiByteStr]
.text:0040D8CF                 setz    bl
.text:0040D8D2                 mov     [esp+35Ch+ppv], esi ; lpWideCharStr
.text:0040D8D6                 mov     [esp+35Ch+riid], 0FFFFFFFFh ; cbMultiByte
.text:0040D8DE                 mov     [esp+35Ch+dwClsContext], ecx ; lpMultiByteStr
.text:0040D8E2                 mov     [esp+35Ch+pUnkOuter], 0 ; dwFlags
.text:0040D8EA                 mov     [esp+35Ch+pvReserved], ebx ; CodePage
.text:0040D8ED                 call    MultiByteToWideChar
.text:0040D8F2                 sub     esp, 18h
.text:0040D8F5                 test    eax, eax
.text:0040D8F7                 js      loc_40D98F
.text:0040D8FD                 mov     edx, dword ptr [esp+35Ch+var_334]
.text:0040D901                 mov     ebx, [edx]
.text:0040D903                 mov     [esp+35Ch+dwClsContext], 0
.text:0040D90B                 mov     [esp+35Ch+pUnkOuter], esi
.text:0040D90F                 mov     [esp+35Ch+pvReserved], edx
.text:0040D912                 call    dword ptr [ebx+14h]
.text:0040D915                 sub     esp, 0Ch
.text:0040D918                 test    eax, eax
.text:0040D91A                 js      short loc_40D98F
.text:0040D91C                 mov     ebx, [esp+35Ch+var_330]
.text:0040D920                 lea     esi, [esp+35Ch+String2]
.text:0040D924                 mov     ecx, [ebx]
.text:0040D926                 mov     [esp+35Ch+pvReserved], ebx
.text:0040D929                 mov     [esp+35Ch+ppv], 0
.text:0040D931                 mov     [esp+35Ch+riid], 0
.text:0040D939                 mov     [esp+35Ch+dwClsContext], 104h
.text:0040D941                 mov     [esp+35Ch+pUnkOuter], esi
.text:0040D945                 call    dword ptr [ecx+0Ch]
.text:0040D948                 sub     esp, 14h
.text:0040D94B                 mov     ebx, eax
.text:0040D94D                 test    eax, eax
.text:0040D94F                 js      short loc_40D98F
.text:0040D951                 mov     [esp+35Ch+pUnkOuter], esi ; lpString2
.text:0040D955                 mov     [esp+35Ch+pvReserved], edi ; lpString1
.text:0040D958                 call    lstrcpyA
.text:0040D95D                 sub     esp, 8
.text:0040D960                 mov     edi, dword ptr [esp+35Ch+var_334]
.text:0040D964                 mov     ecx, [edi]
.text:0040D966                 mov     [esp+35Ch+pvReserved], edi
.text:0040D969                 call    dword ptr [ecx+8]
.text:0040D96C                 sub     esp, 4
.text:0040D96F                 mov     edx, [esp+35Ch+var_330]
.text:0040D973                 mov     esi, [edx]
.text:0040D975                 mov     [esp+35Ch+pvReserved], edx
.text:0040D978                 call    dword ptr [esi+8]
.text:0040D97B                 sub     esp, 4
.text:0040D97E                 call    CoUninitialize
.text:0040D983                 mov     eax, ebx
.text:0040D985
.text:0040D985 loc_40D985:                             ; CODE XREF: sub_40D830+177↓j
.text:0040D985                 add     esp, 350h
.text:0040D98B                 pop     ebx
.text:0040D98C                 pop     esi
.text:0040D98D                 pop     edi
.text:0040D98E                 retn
.text:0040D98F ; ---------------------------------------------------------------------------
.text:0040D98F
.text:0040D98F loc_40D98F:                             ; CODE XREF: sub_40D830+25↑j
.text:0040D98F                                         ; sub_40D830+5C↑j ...
.text:0040D98F                 call    sub_40B060
.text:0040D994                 mov     edi, eax
.text:0040D996                 call    _errno
.text:0040D99B                 mov     [eax], edi
.text:0040D99D                 call    CoUninitialize
.text:0040D9A2                 mov     eax, 0FFFFFFFFh
.text:0040D9A7                 jmp     short loc_40D985
.text:0040D9A7 sub_40D830      endp
.text:0040D9A7
.text:0040D9A7 ; ---------------------------------------------------------------------------
.text:0040D9A9 ; const char Source[]
.text:0040D9A9 Source          db '.lnk',0             ; DATA XREF: sub_40D9B0+53↓o
.text:0040D9A9                                         ; sub_40D9B0:loc_40DA15↓o
.text:0040D9AE                 align 10h
.text:0040D9B0
.text:0040D9B0 ; =============== S U B R O U T I N E =======================================
.text:0040D9B0
.text:0040D9B0
.text:0040D9B0 ; int __cdecl sub_40D9B0(char *, LPSTR lpString1)
.text:0040D9B0 sub_40D9B0      proc near               ; CODE XREF: sub_40D630+96↑p
.text:0040D9B0
.text:0040D9B0 Str             = dword ptr -1Ch
.text:0040D9B0 Source          = dword ptr -18h
.text:0040D9B0 Destination     = dword ptr -14h
.text:0040D9B0 arg_0           = dword ptr  4
.text:0040D9B0 lpString1       = dword ptr  8
.text:0040D9B0
.text:0040D9B0                 push    ebp
.text:0040D9B1                 push    edi
.text:0040D9B2                 push    esi
.text:0040D9B3                 push    ebx
.text:0040D9B4                 sub     esp, 0Ch
.text:0040D9B7                 mov     ebx, [esp+1Ch+arg_0]
.text:0040D9BB                 mov     ebp, [esp+1Ch+lpString1]
.text:0040D9BF                 mov     [esp+1Ch+Str], ebx ; Str
.text:0040D9C2                 call    strlen
.text:0040D9C7                 add     eax, 5
.text:0040D9CA                 mov     [esp+1Ch+Str], eax ; Size
.text:0040D9CD                 call    malloc
.text:0040D9D2                 mov     [esp+1Ch+Destination], eax
.text:0040D9D6                 test    eax, eax
.text:0040D9D8                 jz      loc_40DA80
.text:0040D9DE                 mov     [esp+1Ch+Source], ebx ; Source
.text:0040D9E2                 mov     [esp+1Ch+Str], eax ; Destination
.text:0040D9E5                 call    strcpy
.text:0040D9EA                 mov     [esp+1Ch+Source], 2Eh ; '.' ; Ch
.text:0040D9F2                 mov     eax, [esp+1Ch+Destination]
.text:0040D9F6                 mov     [esp+1Ch+Str], eax ; Str
.text:0040D9F9                 call    strrchr
.text:0040D9FE                 test    eax, eax
.text:0040DA00                 jz      short loc_40DA15
.text:0040DA02                 cld
.text:0040DA03                 mov     ebx, offset Source ; ".lnk"
.text:0040DA08                 mov     ecx, 5
.text:0040DA0D                 mov     esi, eax
.text:0040DA0F                 mov     edi, ebx
.text:0040DA11                 repe cmpsb
.text:0040DA13                 jz      short loc_40DA29
.text:0040DA15
.text:0040DA15 loc_40DA15:                             ; CODE XREF: sub_40D9B0+50↑j
.text:0040DA15                 mov     [esp+1Ch+Source], offset Source ; ".lnk"
.text:0040DA1D                 mov     edx, [esp+1Ch+Destination]
.text:0040DA21                 mov     [esp+1Ch+Str], edx ; Destination
.text:0040DA24                 call    strcat
.text:0040DA29
.text:0040DA29 loc_40DA29:                             ; CODE XREF: sub_40D9B0+63↑j
.text:0040DA29                 mov     [esp+1Ch+Str], 8001h ; uMode
.text:0040DA30                 call    SetErrorMode
.text:0040DA35                 sub     esp, 4
.text:0040DA38                 mov     ebx, [esp+1Ch+Destination]
.text:0040DA3C                 mov     [esp+1Ch+Source], ebp ; lpString1
.text:0040DA40                 mov     [esp+1Ch+Str], ebx ; lpMultiByteStr
.text:0040DA43                 call    sub_40D830
.text:0040DA48                 mov     [esp+1Ch+Str], ebx ; Block
.text:0040DA4B                 mov     esi, eax
.text:0040DA4D                 call    free
.text:0040DA52                 mov     [esp+1Ch+Str], 0 ; uMode
.text:0040DA59                 call    SetErrorMode
.text:0040DA5E                 sub     esp, 4
.text:0040DA61                 mov     [esp+1Ch+Str], ebp
.text:0040DA64                 call    sub_409BE0
.text:0040DA69                 inc     esi
.text:0040DA6A                 jz      short loc_40DA80
.text:0040DA6C                 mov     [esp+1Ch+arg_0], ebp
.text:0040DA70                 add     esp, 0Ch
.text:0040DA73                 pop     ebx
.text:0040DA74                 pop     esi
.text:0040DA75                 pop     edi
.text:0040DA76                 pop     ebp
.text:0040DA77                 jmp     strlen
.text:0040DA77 ; ---------------------------------------------------------------------------
.text:0040DA7C                 align 10h
.text:0040DA80
.text:0040DA80 loc_40DA80:                             ; CODE XREF: sub_40D9B0+28↑j
.text:0040DA80                                         ; sub_40D9B0+BA↑j
.text:0040DA80                 add     esp, 0Ch
.text:0040DA83                 mov     eax, 0FFFFFFFFh
.text:0040DA88                 pop     ebx
.text:0040DA89                 pop     esi
.text:0040DA8A                 pop     edi
.text:0040DA8B                 pop     ebp
.text:0040DA8C                 retn
.text:0040DA8C sub_40D9B0      endp
.text:0040DA8C
.text:0040DA8C ; ---------------------------------------------------------------------------
.text:0040DA8D                 align 10h
.text:0040DA90
.text:0040DA90 ; =============== S U B R O U T I N E =======================================
.text:0040DA90
.text:0040DA90
.text:0040DA90 sub_40DA90      proc near               ; CODE XREF: .text:0040D81B↑p
.text:0040DA90                 xor     eax, eax
.text:0040DA92                 retn
.text:0040DA92 sub_40DA90      endp
.text:0040DA92
.text:0040DA92 ; ---------------------------------------------------------------------------
.text:0040DA93                 align 10h
.text:0040DAA0
.text:0040DAA0 ; =============== S U B R O U T I N E =======================================
.text:0040DAA0
.text:0040DAA0
.text:0040DAA0 sub_40DAA0      proc near               ; CODE XREF: .text:loc_40D814↑p
.text:0040DAA0                 xor     eax, eax
.text:0040DAA2                 retn
.text:0040DAA2 sub_40DAA0      endp
.text:0040DAA2
.text:0040DAA2 ; ---------------------------------------------------------------------------
.text:0040DAA3                 align 10h
.text:0040DAB0
.text:0040DAB0 ; =============== S U B R O U T I N E =======================================
.text:0040DAB0
.text:0040DAB0
.text:0040DAB0 sub_40DAB0      proc near               ; CODE XREF: .text:0040D7F4↑p
.text:0040DAB0                 xor     eax, eax
.text:0040DAB2                 retn
.text:0040DAB2 sub_40DAB0      endp
.text:0040DAB2
.text:0040DAB2 ; ---------------------------------------------------------------------------
.text:0040DAB3                 align 10h
.text:0040DAC0
.text:0040DAC0 ; =============== S U B R O U T I N E =======================================
.text:0040DAC0
.text:0040DAC0
.text:0040DAC0 sub_40DAC0      proc near               ; CODE XREF: .text:0040D7ED↑p
.text:0040DAC0                 xor     eax, eax
.text:0040DAC2                 retn
.text:0040DAC2 sub_40DAC0      endp
.text:0040DAC2
.text:0040DAC2 ; ---------------------------------------------------------------------------
.text:0040DAC3                 align 10h
.text:0040DAD0
.text:0040DAD0 ; =============== S U B R O U T I N E =======================================
.text:0040DAD0
.text:0040DAD0 ; Attributes: thunk
.text:0040DAD0
.text:0040DAD0 ; HRESULT __stdcall OleInitialize(LPVOID pvReserved)
.text:0040DAD0 OleInitialize   proc near               ; CODE XREF: sub_40D830+1A↑p
.text:0040DAD0
.text:0040DAD0 pvReserved      = dword ptr  4
.text:0040DAD0
.text:0040DAD0                 jmp     ds:__imp_OleInitialize
.text:0040DAD0 OleInitialize   endp
.text:0040DAD0
.text:0040DAD0 ; ---------------------------------------------------------------------------
.text:0040DAD6                 align 10h
.text:0040DAE0
.text:0040DAE0 ; =============== S U B R O U T I N E =======================================
.text:0040DAE0
.text:0040DAE0 ; Attributes: thunk
.text:0040DAE0
.text:0040DAE0 ; HRESULT __stdcall CoCreateInstance(const IID *const rclsid, LPUNKNOWN pUnkOuter, DWORD dwClsContext, const IID *const riid, LPVOID *ppv)
.text:0040DAE0 CoCreateInstance proc near              ; CODE XREF: sub_40D830+52↑p
.text:0040DAE0
.text:0040DAE0 rclsid          = dword ptr  4
.text:0040DAE0 pUnkOuter       = dword ptr  8
.text:0040DAE0 dwClsContext    = dword ptr  0Ch
.text:0040DAE0 riid            = dword ptr  10h
.text:0040DAE0 ppv             = dword ptr  14h
.text:0040DAE0
.text:0040DAE0                 jmp     ds:__imp_CoCreateInstance
.text:0040DAE0 CoCreateInstance endp
.text:0040DAE0
.text:0040DAE0 ; ---------------------------------------------------------------------------
.text:0040DAE6                 align 10h
.text:0040DAF0
.text:0040DAF0 ; =============== S U B R O U T I N E =======================================
.text:0040DAF0
.text:0040DAF0 ; Attributes: thunk
.text:0040DAF0
.text:0040DAF0 ; void __stdcall CoUninitialize()
.text:0040DAF0 CoUninitialize  proc near               ; CODE XREF: sub_40D830+14E↑p
.text:0040DAF0                                         ; sub_40D830+16D↑p
.text:0040DAF0                 jmp     ds:__imp_CoUninitialize
.text:0040DAF0 CoUninitialize  endp
.text:0040DAF0
.text:0040DAF0 ; ---------------------------------------------------------------------------
.text:0040DAF6                 align 10h
.text:0040DB00                 add     al, 0BAh ; 'º'
.text:0040DB02                 retf
.text:0040DB02 ; ---------------------------------------------------------------------------
.text:0040DB03                 db 7Eh
.text:0040DB04                 dd 11CF2D97h, 0AA0029A2h, 52733D00h, 40FC6ED4h, 11CF2438h
.text:0040DB04                 dd 8DBA3h, 225F136h, 40FC6ED8h, 11CF2438h, 8DBA3h, 225F136h
.text:0040DB04                 dd 40FC6ED3h, 11CF2438h, 8DBA3h, 225F136h, 0DE86A58h, 11CF2BAAh
.text:0040DB04                 dd 0AA0029A2h, 52733D00h, 40FC6ED6h, 11CF2438h, 8DBA3h
.text:0040DB04                 dd 225F136h, 40FC6ED7h, 11CF2438h, 8DBA3h, 225F136h, 0DE86A56h
.text:0040DB04                 dd 11CF2BAAh, 0AA0029A2h, 52733D00h, 0DE86A55h, 11CF2BAAh
.text:0040DB04                 dd 0AA0029A2h, 52733D00h, 0DE86A51h, 11CF2BAAh, 0AA0029A2h
.text:0040DB04                 dd 52733D00h, 0DE86A57h, 11CF2BAAh, 0AA0029A2h, 52733D00h
.text:0040DB04                 dd 0DE86A52h, 11CF2BAAh, 0AA0029A2h, 52733D00h, 0DE86A54h
.text:0040DB04                 dd 11CF2BAAh, 0AA0029A2h, 52733D00h, 0DE86A53h, 11CF2BAAh
.text:0040DB04                 dd 0AA0029A2h, 52733D00h, 40FC6ED9h, 11CF2438h, 8DBA3h
.text:0040DB04                 dd 225F136h, 40FC6ED5h, 11CF2438h, 8DBA3h, 225F136h, 0DE86A50h
.text:0040DB04                 dd 11CF2BAAh, 0AA0029A2h, 52733D00h, 7DD95802h, 11CF9882h
.text:0040DB04                 dd 0AA00A99Fh, 0C4426C00h, 7DD95801h, 11CF9882h, 0AA00A99Fh
.text:0040DB04                 dd 0C4426C00h, 330h, 0
.text:0040DC38                 dd 0C0h, 46000000h, 0BE35201h, 11CE8F91h, 0AA00E39Dh, 51B84B00h
.text:0040DC38                 dd 0BE35200h, 11CE8F91h, 0AA00E39Dh, 51B84B00h, 0BE35202h
.text:0040DC38                 dd 11CE8F91h, 0AA00E39Dh, 51B84B00h, 0FB8F0822h, 101B0164h
.text:0040DC38                 dd 8ED84h, 13C72E2Bh, 332h, 0
.text:0040DC88                 dd 0C0h, 46000000h, 79EAC9E7h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0040DC88                 dd 79EAC9E3h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9E4h
.text:0040DC88                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9E2h, 11CEBAF9h
.text:0040DC88                 dd 0AA00828Ch, 0BA94B00h, 79EAC9E5h, 11CEBAF9h, 0AA00828Ch
.text:0040DC88                 dd 0BA94B00h, 1Bh, 0
.text:0040DCE8                 dd 0C0h, 46000000h, 1Ch, 0
.text:0040DCF8                 dd 0C0h, 46000000h, 331h, 0
.text:0040DD08                 dd 0C0h, 46000000h, 79EAC9E6h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0040DD08                 dd 312h, 0
.text:0040DD28                 dd 0C0h, 46000000h, 30Eh, 0
.text:0040DD38                 dd 0C0h, 46000000h, 30Dh, 0
.text:0040DD48                 dd 0C0h, 46000000h, 311h, 0
.text:0040DD58                 dd 0C0h, 46000000h, 313h, 0
.text:0040DD68                 dd 0C0h, 46000000h, 30Ch, 0
.text:0040DD78                 dd 0C0h, 46000000h, 30Fh, 0
.text:0040DD88                 dd 0C0h, 46000000h, 310h, 0
.text:0040DD98                 dd 0C0h, 46000000h, 79EAC9F1h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0040DD98                 dd 0FB8F0821h, 101B0164h, 8ED84h, 13C72E2Bh, 316h, 0
.text:0040DDC8                 dd 0C0h, 46000000h, 319h, 0
.text:0040DDD8                 dd 0C0h, 46000000h, 315h, 0
.text:0040DDE8                 dd 0C0h, 46000000h, 316h, 0
.text:0040DDF8                 dd 0C0h, 46000000h, 315h, 0
.text:0040DE08                 dd 0C0h, 46000000h, 2E005h, 0
.text:0040DE18                 dd 0C0h, 46000000h, 0BE35203h, 11CE8F91h, 0AA00E39Dh, 51B84B00h
.text:0040DE18                 dd 79EAC9D0h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9D1h
.text:0040DE18                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 17h, 0
.text:0040DE58                 dd 0C0h, 46000000h, 0BE35204h, 11CE8F91h, 0AA00E39Dh, 51B84B00h
.text:0040DE58                 dd 79EAC9E0h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9E1h
.text:0040DE58                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 8856F961h, 11D0340Ah
.text:0040DE58                 dd 0C0006BA9h, 0A205D74Fh, 0EAB22AC2h, 11CF30C1h, 0EBA7h
.text:0040DE58                 dd 0BAE5BC0h, 34A715A0h, 11D06587h, 20004A92h, 4DACC7AFh
.text:0040DE58                 dd 96300DA0h, 11CF2BABh, 0AA0029A2h, 52733D00h, 0D5CDD502h
.text:0040DE58                 dd 101B2E9Ch, 89793h, 0AEF92C2Bh, 0F29F85E0h, 10684FF9h
.text:0040DE58                 dd 891ABh, 0D9B3272Bh, 0D5CDD505h, 101B2E9Ch, 89793h, 0AEF92C2Bh
.text:0040DE58                 dd 6650430Ch, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504301h
.text:0040DE58                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 6650430Fh, 101ABE0Fh
.text:0040DE58                 dd 0AA00BB8Bh, 0AB0C3000h, 66504310h, 101ABE0Fh, 0AA00BB8Bh
.text:0040DE58                 dd 0AB0C3000h, 6650430Dh, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:0040DE58                 dd 6650430Eh, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504312h
.text:0040DE58                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504311h, 101ABE0Fh
.text:0040DE58                 dd 0AA00BB8Bh, 0AB0C3000h, 66504313h, 101ABE0Fh, 0AA00BB8Bh
.text:0040DE58                 dd 0AB0C3000h, 66504300h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:0040DE58                 dd 2DE81h, 0
.text:0040DFA8                 dd 0C0h, 46000000h, 4 dup(0)
.text:0040DFC0                 dd 6650430Bh, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 2DE80h
.text:0040DFC0                 dd 0
.text:0040DFD8                 dd 0C0h, 46000000h, 6650430Ah, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:0040DFD8                 dd 66504306h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504302h
.text:0040DFD8                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504308h, 101ABE0Fh
.text:0040DFD8                 dd 0AA00BB8Bh, 0AB0C3000h, 66504304h, 101ABE0Fh, 0AA00BB8Bh
.text:0040DFD8                 dd 0AB0C3000h, 66504307h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:0040DFD8                 dd 66504303h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504309h
.text:0040DFD8                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504305h, 101ABE0Fh
.text:0040DFD8                 dd 0AA00BB8Bh, 0AB0C3000h, 618736E0h, 11CF3C3Dh, 0AA000C81h
.text:0040DFD8                 dd 719B3800h, 1EA4DBF0h, 11CF3C3Bh, 0AA000C81h, 719B3800h
.text:0040DFD8                 dd 0BB1A2AE1h, 11CFA4F9h, 8000208Fh, 64D02C5Fh, 0EAE1BA61h
.text:0040DFD8                 dd 11CFA4EDh, 8000208Fh, 64D02C5Fh, 0BB1A2AE2h, 11CFA4F9h
.text:0040DFD8                 dd 8000208Fh, 64D02C5Fh, 0DB01A1E3h, 11CFA42Bh, 8000208Fh
.text:0040DFD8                 dd 64D02C5Fh, 0D10F6761h, 11CF83E9h, 8000208Fh, 64D02C5Fh
.text:0040DFD8                 dd 10Fh, 0
.text:0040E0E8                 dd 0C0h, 46000000h, 125h, 0
.text:0040E0F8                 dd 0C0h, 46000000h, 3AF24290h, 11CE0C96h, 0AA00CFA0h, 0B80A6000h
.text:0040E0F8                 dd 79EAC9D3h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9D0h
.text:0040E0F8                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 0Eh, 0
.text:0040E138                 dd 0C0h, 46000000h, 0FC4801A1h, 11CF2BA9h, 0AA0029A2h
.text:0040E138                 dd 52733D00h, 79EAC9CDh, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0040E138                 dd 79EAC9C1h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9CBh
.text:0040E138                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9C0h, 11CEBAF9h
.text:0040E138                 dd 0AA00828Ch, 0BA94B00h, 2E013h, 0
.text:0040E198                 dd 0C0h, 46000000h, 2E012h, 0
.text:0040E1A8                 dd 0C0h, 46000000h, 1008C4A0h, 11CF7613h, 2000F19Ah, 0F4726EAFh
.text:0040E1A8                 dd 140h, 0
.text:0040E1C8                 dd 0C0h, 46000000h, 1, 0
.text:0040E1D8                 dd 0C0h, 46000000h, 0B196B28Fh, 101ABAB4h, 0AA009CB6h
.text:0040E1D8                 dd 71D3400h, 13Dh, 0
.text:0040E1F8                 dd 0C0h, 46000000h, 0F4F569D1h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:0040E1F8                 dd 79EAC9D1h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 0B196B286h
.text:0040E1F8                 dd 101ABAB4h, 0AA009CB6h, 71D3400h, 0B196B284h, 101ABAB4h
.text:0040E1F8                 dd 0AA009CB6h, 71D3400h, 12Ah, 0
.text:0040E248                 dd 0C0h, 46000000h, 0B722BCCAh, 101B4E68h, 0AA00BCA2h
.text:0040E248                 dd 70474000h, 22F03340h, 101B547Dh, 8658Eh, 19D12B2Bh
.text:0040E248                 dd 20405h, 0
.text:0040E278                 dd 0C0h, 46000000h, 2040Eh, 0
.text:0040E288                 dd 0C0h, 46000000h, 20406h, 0
.text:0040E298                 dd 0C0h, 46000000h, 2040Fh, 0
.text:0040E2A8                 dd 0C0h, 46000000h, 110h, 0
.text:0040E2B8                 dd 0C0h, 46000000h, 10Eh, 0
.text:0040E2C8                 dd 0C0h, 46000000h, 123h, 0
.text:0040E2D8                 dd 0C0h, 46000000h, 124h, 0
.text:0040E2E8                 dd 0C0h, 46000000h, 13h, 0
.text:0040E2F8                 dd 0C0h, 46000000h, 14h, 0
.text:0040E308                 dd 0C0h, 46000000h, 15h, 0
.text:0040E318                 dd 0C0h, 46000000h, 20400h, 0
.text:0040E328                 dd 0C0h, 46000000h, 121h, 0
.text:0040E338                 dd 0C0h, 46000000h, 122h, 0
.text:0040E348                 dd 0C0h, 46000000h, 2E011h, 0
.text:0040E358                 dd 0C0h, 46000000h, 108h, 0
.text:0040E368                 dd 0C0h, 46000000h, 0B196B285h, 101ABAB4h, 0AA009CB6h
.text:0040E368                 dd 71D3400h, 0B196B287h, 101ABAB4h, 0AA009CB6h, 71D3400h
.text:0040E368                 dd 103h, 0
.text:0040E398                 dd 0C0h, 46000000h, 2E000h, 0
.text:0040E3A8                 dd 0C0h, 46000000h, 106h, 0
.text:0040E3B8                 dd 0C0h, 46000000h, 79EAC9C6h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0040E3B8                 dd 107h, 0
.text:0040E3D8                 dd 0C0h, 46000000h, 102h, 0
.text:0040E3E8                 dd 0C0h, 46000000h, 104h, 0
.text:0040E3F8                 dd 0C0h, 46000000h, 0B722BCC8h, 101B4E68h, 0AA00BCA2h
.text:0040E3F8                 dd 70474000h, 0B3E7C340h, 11CEEF97h, 0AA00C99Bh, 18E6000h
.text:0040E3F8                 dd 105h, 0
.text:0040E428                 dd 0C0h, 46000000h, 13Bh, 0
.text:0040E438                 dd 0C0h, 46000000h, 139h, 0
.text:0040E448                 dd 0C0h, 46000000h, 0Dh, 0
.text:0040E458                 dd 0C0h, 46000000h, 3C374A42h, 11CFBAE4h, 0AA007DBFh, 0EE466900h
.text:0040E458                 dd 101h, 0
.text:0040E478                 dd 0C0h, 46000000h, 100h, 0
.text:0040E488                 dd 0C0h, 46000000h, 20404h, 0
.text:0040E498                 dd 0C0h, 46000000h, 1CF2B120h, 101B547Dh, 8658Eh, 19D12B2Bh
.text:0040E498                 dd 3127CA40h, 11CE446Eh, 0AA003581h, 51B84B00h, 19h, 0
.text:0040E4C8                 dd 0C0h, 46000000h, 99CAF010h, 11CF415Eh, 0AA001488h, 0F569B500h
.text:0040E4C8                 dd 89BCB740h, 101A6119h, 0DD00B7BCh, 0AF550601h, 0BEF6E002h
.text:0040E4C8                 dd 101AA874h, 0AA00BA8Bh, 0AB0C3000h, 0BEF6E003h, 101AA874h
.text:0040E4C8                 dd 0AA00BA8Bh, 0AB0C3000h, 146h, 0
.text:0040E518                 dd 0C0h, 46000000h, 79EAC9C3h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0040E518                 dd 79EAC9C7h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9C5h
.text:0040E518                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9C2h, 11CEBAF9h
.text:0040E518                 dd 0AA00828Ch, 0BA94B00h, 79EAC9C4h, 11CEBAF9h, 0AA00828Ch
.text:0040E518                 dd 0BA94B00h, 79EAC9D2h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0040E518                 dd 79EAC9D7h, 11CEBAFAh, 0AA00828Ch, 0BA94B00h, 11h, 0
.text:0040E598                 dd 0C0h, 46000000h, 0E6D4D90h, 11CF6738h, 0AA000896h, 0B40D6800h
.text:0040E598                 dd 0Ah, 0
.text:0040E5B8                 dd 0C0h, 46000000h, 2, 0
.text:0040E5C8                 dd 0C0h, 46000000h, 1Dh, 0
.text:0040E5D8                 dd 0C0h, 46000000h, 3, 0
.text:0040E5E8                 dd 0C0h, 46000000h, 16h, 0
.text:0040E5F8                 dd 0C0h, 46000000h, 0F77459A0h, 11CFBF9Ah, 0C0004EBAh
.text:0040E5F8                 dd 1608D74Fh, 0Fh, 0
.text:0040E618                 dd 0C0h, 46000000h, 20h, 0
.text:0040E628                 dd 0C0h, 46000000h, 0CB5BDC81h, 11CF93C1h, 8000208Fh, 64D02C5Fh
.text:0040E628                 dd 0FC4801A3h, 11CF2BA9h, 0AA0029A2h, 52733D00h, 111h
.text:0040E628                 dd 0
.text:0040E658                 dd 0C0h, 46000000h, 11Eh, 0
.text:0040E668                 dd 0C0h, 46000000h, 128h, 0
.text:0040E678                 dd 0C0h, 46000000h, 129h, 0
.text:0040E688                 dd 0C0h, 46000000h, 118h, 0
.text:0040E698                 dd 0C0h, 46000000h, 0B722BCCBh, 101B4E68h, 0AA00BCA2h
.text:0040E698                 dd 70474000h, 11Bh, 0
.text:0040E6B8                 dd 0C0h, 46000000h, 0B196B288h, 101ABAB4h, 0AA009CB6h
.text:0040E6B8                 dd 71D3400h, 0B196B289h, 101ABAB4h, 0AA009CB6h, 71D3400h
.text:0040E6B8                 dd 0B722BCC5h, 101B4E68h, 0AA00BCA2h, 70474000h, 0B722BCC7h
.text:0040E6B8                 dd 101B4E68h, 0AA00BCA2h, 70474000h, 0B722BCC6h, 101B4E68h
.text:0040E6B8                 dd 0AA00BCA2h, 70474000h, 117h, 0
.text:0040E718                 dd 0C0h, 46000000h, 116h, 0
.text:0040E728                 dd 0C0h, 46000000h, 113h, 0
.text:0040E738                 dd 0C0h, 46000000h, 1C2056CCh, 101B5EF4h, 0AA00C88Bh, 293B3E00h
.text:0040E738                 dd 119h, 0
.text:0040E758                 dd 0C0h, 46000000h, 9C2CAD80h, 11CF3424h, 0AA0070B6h, 0D8D64C00h
.text:0040E758                 dd 922EADA0h, 11CF3424h, 0AA0070B6h, 0D8D64C00h, 115h
.text:0040E758                 dd 0
.text:0040E788                 dd 0C0h, 46000000h, 11Ch, 0
.text:0040E798                 dd 0C0h, 46000000h, 11Dh, 0
.text:0040E7A8                 dd 0C0h, 46000000h, 11Fh, 0
.text:0040E7B8                 dd 0C0h, 46000000h, 112h, 0
.text:0040E7C8                 dd 0C0h, 46000000h, 0A1FAF330h, 11CEEF97h, 0AA00C99Bh
.text:0040E7C8                 dd 18E6000h, 120h, 0
.text:0040E7E8                 dd 0C0h, 46000000h, 97D001F2h, 9B11CEEFh, 0AA00C9h, 18E60h
.text:0040E7E8                 dd 0D001F200h, 11CEEF97h, 0AA00C99Bh, 18E6000h, 894AD3B0h
.text:0040E7E8                 dd 11CEEF97h, 0AA00C99Bh, 18E6000h, 114h, 0
.text:0040E828                 dd 0C0h, 46000000h, 521A28F0h, 11CEE40Bh, 0AA00C9B2h, 37096800h
.text:0040E828                 dd 49384070h, 11CEE40Ah, 0AA00C9B2h, 37096800h, 9, 0
.text:0040E858                 dd 0C0h, 46000000h, 0D5F569D0h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:0040E858                 dd 11Ah, 0
.text:0040E878                 dd 0C0h, 46000000h, 376BD3AAh, 101B3845h, 8ED84h, 13C72E2Bh
.text:0040E878                 dd 10Ch, 0
.text:0040E898                 dd 0C0h, 46000000h
.text:0040E8A0 dword_40E8A0    dd 10Bh, 0              ; DATA XREF: sub_40D830+75↑o
.text:0040E8A8                 dd 0C0h, 46000000h, 0BD1AE5E0h, 11CEA6AEh, 425037BDh, 0C100h
.text:0040E8A8                 dd 79EAC9C9h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 37D84F60h
.text:0040E8A8                 dd 11CE42CBh, 0AA003581h, 51B84B00h, 22F55881h, 11D0280Bh
.text:0040E8A8                 dd 0A000A9A8h, 4200CC9h, 10Ah, 0
.text:0040E8F8                 dd 0C0h, 46000000h, 109h, 0
.text:0040E908                 dd 0C0h, 46000000h, 7FD52380h, 101B4E07h, 82DAEh, 13C72E2Bh
.text:0040E908                 dd 7BF80980h, 101ABF32h, 0AA00BB8Bh, 0AB0C3000h, 7BF80981h
.text:0040E908                 dd 101ABF32h, 0AA00BB8Bh, 0AB0C3000h, 55980BA0h, 11CF35AAh
.text:0040E908                 dd 0AA0071B6h, 0D8D64C00h, 0B722BCC9h, 101B4E68h, 0AA00BCA2h
.text:0040E908                 dd 70474000h, 0A9D758A0h, 11CF4617h, 0AA00FC95h, 0B40D6800h
.text:0040E908                 dd 55272A00h, 11CE42CBh, 0AA003581h, 51B84B00h, 22F55882h
.text:0040E908                 dd 11D0280Bh, 0A000A9A8h, 4200CC9h, 0B196B28Ah, 101ABAB4h
.text:0040E908                 dd 0AA009CB6h, 71D3400h, 9BFBBC02h, 101AEFF1h, 0AA00ED84h
.text:0040E908                 dd 71D3400h, 0B196B28Dh, 101ABAB4h, 0AA009CB6h, 71D3400h
.text:0040E908                 dd 1E44665h, 101B24ACh, 8ED84h, 13C72E2Bh, 0B196B28Ch
.text:0040E908                 dd 101ABAB4h, 0AA009CB6h, 71D3400h, 13Ah, 0
.text:0040E9E8                 dd 0C0h, 46000000h, 138h, 0
.text:0040E9F8                 dd 0C0h, 46000000h, 0B196B283h, 101ABAB4h, 0AA009CB6h
.text:0040E9F8                 dd 71D3400h, 0A6BC3AC0h, 11CEDBAAh, 0AA00E39Dh, 51B84B00h
.text:0040E9F8                 dd 27h, 0
.text:0040EA28                 dd 0C0h, 46000000h, 8, 0
.text:0040EA38                 dd 0C0h, 46000000h, 0CF51ED10h, 11CF62FEh, 0A00086BFh
.text:0040EA38                 dd 364803C9h, 0F29F6BC0h, 11CE5021h, 15AAh, 3F290169h
.text:0040EA38                 dd 20D00h, 0
.text:0040EA68                 dd 0C0h, 46000000h, 20D03h, 0
.text:0040EA78                 dd 0C0h, 46000000h, 12h, 0
.text:0040EA88                 dd 0C0h, 46000000h, 4, 0
.text:0040EA98                 dd 0C0h, 46000000h, 0D5F56B60h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:0040EA98                 dd 7, 0
.text:0040EAB8                 dd 0C0h, 46000000h, 0D5F56A34h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:0040EAB8                 dd 3BD5F56Ah, 0B5101A59h, 2B000869h, 7ABF2Dh, 5, 0
.text:0040EAE8                 dd 0C0h, 46000000h, 0D5F56AFCh, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:0040EAE8                 dd 126h, 0
.text:0040EB08                 dd 0C0h, 46000000h, 10h, 0
.text:0040EB18                 dd 0C0h, 46000000h, 0C733A30h, 11CE2A1Ch, 0AA00E5ADh, 3D774400h
.text:0040EB18                 dd 0F4F569D0h, 101A593Bh, 869B5h, 7ABF2D2Bh, 13Eh, 0
.text:0040EB48                 dd 0C0h, 46000000h, 6D5140C1h, 11CE7436h, 0AA003480h, 0FA096000h
.text:0040EB48                 dd 742B0E01h, 101B14E6h, 0AA004E91h, 0AB0C3000h, 0B196B28Bh
.text:0040EB48                 dd 101ABAB4h, 0AA009CB6h, 71D3400h, 18h, 0
.text:0040EB88                 dd 0C0h, 46000000h, 0Bh, 0
.text:0040EB98                 dd 0C0h, 46000000h, 0Ch, 0
.text:0040EBA8                 dd 0C0h, 46000000h, 26h, 0
.text:0040EBB8                 dd 0C0h, 46000000h, 6, 0
.text:0040EBC8                 dd 0C0h, 46000000h, 0DF0B3D60h, 101B548Fh, 8658Eh, 19D12B2Bh
.text:0040EBC8                 dd 548793C0h, 11CF9E74h, 0A0005596h, 234903C9h, 0D5F78C80h
.text:0040EBC8                 dd 11CF5252h, 0AA00FA90h, 6E104200h, 20410h, 0
.text:0040EC08                 dd 0C0h, 46000000h, 20403h, 0
.text:0040EC18                 dd 0C0h, 46000000h, 20401h, 0
.text:0040EC28                 dd 0C0h, 46000000h, 20412h, 0
.text:0040EC38                 dd 0C0h, 46000000h, 20402h, 0
.text:0040EC48                 dd 0C0h, 46000000h, 20411h, 0
.text:0040EC58                 dd 0C0h, 46000000h, 2 dup(0)
.text:0040EC68                 dd 0C0h, 46000000h, 3C374A41h, 11CFBAE4h, 0AA007DBFh, 0EE466900h
.text:0040EC68                 dd 10Dh, 0
.text:0040EC88                 dd 0C0h, 46000000h, 127h, 0
.text:0040EC98                 dd 0C0h, 46000000h, 3AF24292h, 11CE0C96h, 0AA00CFA0h, 0B80A6000h
.text:0040EC98                 dd 0EAB22AC1h, 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0D30C1661h
.text:0040EC98                 dd 11D0CDAFh, 0C0003E8Ah, 6EE2C94Fh, 2DF05h, 0
.text:0040ECD8                 dd 0C0h, 46000000h, 79EAC9D8h, 11CEBAFAh, 0AA00828Ch, 0BA94B00h
.text:0040ECD8                 dd 79EAC9D6h, 11CEBAFAh, 0AA00828Ch, 0BA94B00h, 79EAC9D5h
.text:0040ECD8                 dd 11CEBAFAh, 0AA00828Ch, 0BA94B00h, 20430h, 0
.text:0040ED18                 dd 0C0h, 46000000h, 2DE0Eh, 0
.text:0040ED28                 dd 0C0h, 46000000h, 2DE18h, 0
.text:0040ED38                 dd 0C0h, 46000000h, 2DE1Eh, 0
.text:0040ED48                 dd 0C0h, 46000000h, 2DE19h, 0
.text:0040ED58                 dd 0C0h, 46000000h, 2DE0Fh, 0
.text:0040ED68                 dd 0C0h, 46000000h, 2DE12h, 0
.text:0040ED78                 dd 0C0h, 46000000h, 2DE21h, 0
.text:0040ED88                 dd 0C0h, 46000000h, 2DE01h, 0
.text:0040ED98                 dd 0C0h, 46000000h, 2DE0Bh, 0
.text:0040EDA8                 dd 0C0h, 46000000h, 2DE0Dh, 0
.text:0040EDB8                 dd 0C0h, 46000000h, 2DE02h, 0
.text:0040EDC8                 dd 0C0h, 46000000h, 2DE1Fh, 0
.text:0040EDD8                 dd 0C0h, 46000000h, 2DE04h, 0
.text:0040EDE8                 dd 0C0h, 46000000h, 2DE0Ch, 0
.text:0040EDF8                 dd 0C0h, 46000000h, 2DE05h, 0
.text:0040EE08                 dd 0C0h, 46000000h, 2DE1Ch, 0
.text:0040EE18                 dd 0C0h, 46000000h, 2DE06h, 0
.text:0040EE28                 dd 0C0h, 46000000h, 2DE13h, 0
.text:0040EE38                 dd 0C0h, 46000000h, 2DE10h, 0
.text:0040EE48                 dd 0C0h, 46000000h, 2DE22h, 0
.text:0040EE58                 dd 0C0h, 46000000h, 2DE09h, 0
.text:0040EE68                 dd 0C0h, 46000000h, 2DE23h, 0
.text:0040EE78                 dd 0C0h, 46000000h, 2DE0Ah, 0
.text:0040EE88                 dd 0C0h, 46000000h, 2DE1Dh, 0
.text:0040EE98                 dd 0C0h, 46000000h, 2DE11h, 0
.text:0040EEA8                 dd 0C0h, 46000000h, 2DE15h, 0
.text:0040EEB8                 dd 0C0h, 46000000h, 2DE1Bh, 0
.text:0040EEC8                 dd 0C0h, 46000000h, 2DE16h, 0
.text:0040EED8                 dd 0C0h, 46000000h, 2DE20h, 0
.text:0040EEE8                 dd 0C0h, 46000000h, 2DE07h, 0
.text:0040EEF8                 dd 0C0h, 46000000h, 2DE1Ah, 0
.text:0040EF08                 dd 0C0h, 46000000h, 2DE17h, 0
.text:0040EF18                 dd 0C0h, 46000000h, 2DE14h, 0
.text:0040EF28                 dd 0C0h, 46000000h, 2DE03h, 0
.text:0040EF38                 dd 0C0h, 46000000h, 2DE08h, 0
.text:0040EF48                 dd 0C0h, 46000000h, 0B722BE00h, 101B4E68h, 0AA00BCA2h
.text:0040EF48                 dd 70474000h, 0FC4801A5h, 11CF2BA9h, 0AA0029A2h, 52733D00h
.text:0040EF70
.text:0040EF70 ; =============== S U B R O U T I N E =======================================
.text:0040EF70
.text:0040EF70 ; Attributes: thunk
.text:0040EF70
.text:0040EF70 ; size_t __cdecl mbrtowc(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.text:0040EF70 mbrtowc         proc near               ; CODE XREF: sub_4062E0+757↑p
.text:0040EF70
.text:0040EF70 DstCh           = dword ptr  4
.text:0040EF70 SrcCh           = dword ptr  8
.text:0040EF70 SizeInBytes     = dword ptr  0Ch
.text:0040EF70 State           = dword ptr  10h
.text:0040EF70
.text:0040EF70                 jmp     ds:__imp_mbrtowc
.text:0040EF70 mbrtowc         endp
.text:0040EF70
.text:0040EF70 ; ---------------------------------------------------------------------------
.text:0040EF76                 align 10h
.text:0040EF80
.text:0040EF80 ; =============== S U B R O U T I N E =======================================
.text:0040EF80
.text:0040EF80 ; Attributes: bp-based frame
.text:0040EF80
.text:0040EF80 sub_40EF80      proc near               ; CODE XREF: sub_401080+C2↑p
.text:0040EF80                 push    ebp
.text:0040EF81                 mov     ecx, offset dword_412000
.text:0040EF86                 cmp     ecx, offset dword_412000
.text:0040EF8C                 mov     ebp, esp
.text:0040EF8E                 jnb     short loc_40EFA6
.text:0040EF90
.text:0040EF90 loc_40EF90:                             ; CODE XREF: sub_40EF80+24↓j
.text:0040EF90                 mov     edx, [ecx+4]
.text:0040EF93                 mov     eax, [ecx]
.text:0040EF95                 add     ecx, 8
.text:0040EF98                 add     [edx+400000h], eax
.text:0040EF9E                 cmp     ecx, offset dword_412000
.text:0040EFA4                 jb      short loc_40EF90
.text:0040EFA6
.text:0040EFA6 loc_40EFA6:                             ; CODE XREF: sub_40EF80+E↑j
.text:0040EFA6                 pop     ebp
.text:0040EFA7                 retn
.text:0040EFA7 sub_40EF80      endp
.text:0040EFA7
.text:0040EFA7 ; ---------------------------------------------------------------------------
.text:0040EFA8                 align 10h
.text:0040EFB0
.text:0040EFB0 ; =============== S U B R O U T I N E =======================================
.text:0040EFB0
.text:0040EFB0 ; Attributes: bp-based frame
.text:0040EFB0
.text:0040EFB0 sub_40EFB0      proc near               ; CODE XREF: sub_401080+16↑p
.text:0040EFB0                                         ; TopLevelExceptionFilter+D7↑p
.text:0040EFB0                 push    ebp
.text:0040EFB1                 mov     ebp, esp
.text:0040EFB3                 fninit
.text:0040EFB5                 pop     ebp
.text:0040EFB6                 retn
.text:0040EFB6 sub_40EFB0      endp
.text:0040EFB6
.text:0040EFB6 ; ---------------------------------------------------------------------------
.text:0040EFB7                 align 10h
.text:0040EFC0
.text:0040EFC0 ; =============== S U B R O U T I N E =======================================
.text:0040EFC0
.text:0040EFC0 ; Attributes: bp-based frame
.text:0040EFC0
.text:0040EFC0 ; void __cdecl sub_40EFC0()
.text:0040EFC0 sub_40EFC0      proc near               ; DATA XREF: .text:loc_40F009↓o
.text:0040EFC0                                         ; sub_40F050:loc_40F07E↓o
.text:0040EFC0                 push    ebp
.text:0040EFC1                 mov     ebp, esp
.text:0040EFC3                 sub     esp, 8
.text:0040EFC6                 mov     eax, off_4110D4
.text:0040EFCB                 mov     edx, [eax]
.text:0040EFCD                 test    edx, edx
.text:0040EFCF                 jnz     short loc_40EFD5
.text:0040EFD1
.text:0040EFD1 loc_40EFD1:                             ; CODE XREF: sub_40EFC0+2C↓j
.text:0040EFD1                 mov     esp, ebp
.text:0040EFD3                 pop     ebp
.text:0040EFD4                 retn
.text:0040EFD5 ; ---------------------------------------------------------------------------
.text:0040EFD5
.text:0040EFD5 loc_40EFD5:                             ; CODE XREF: sub_40EFC0+F↑j
.text:0040EFD5                                         ; sub_40EFC0+2A↓j
.text:0040EFD5                 call    dword ptr [eax]
.text:0040EFD7                 mov     edx, off_4110D4
.text:0040EFDD                 mov     ecx, [edx+4]
.text:0040EFE0                 lea     eax, [edx+4]
.text:0040EFE3                 mov     off_4110D4, eax
.text:0040EFE8                 test    ecx, ecx
.text:0040EFEA                 jnz     short loc_40EFD5
.text:0040EFEC                 jmp     short loc_40EFD1
.text:0040EFEC sub_40EFC0      endp
.text:0040EFEC
.text:0040EFEC ; ---------------------------------------------------------------------------
.text:0040EFEE                 align 10h
.text:0040EFF0                 push    ebp
.text:0040EFF1                 mov     ebp, esp
.text:0040EFF3                 sub     esp, 8
.text:0040EFF6                 mov     [ebp-4], ebx
.text:0040EFF9                 mov     eax, ds:dword_410250
.text:0040EFFE                 cmp     eax, 0FFFFFFFFh
.text:0040F001                 jz      short loc_40F02C
.text:0040F003
.text:0040F003 loc_40F003:                             ; CODE XREF: .text:0040F036↓j
.text:0040F003                                         ; .text:0040F049↓j
.text:0040F003                 test    eax, eax
.text:0040F005                 mov     ebx, eax
.text:0040F007                 jnz     short loc_40F020
.text:0040F009
.text:0040F009 loc_40F009:                             ; CODE XREF: .text:0040F02A↓j
.text:0040F009                 mov     dword ptr [esp], offset sub_40EFC0
.text:0040F010                 call    sub_401040
.text:0040F015                 mov     ebx, [ebp-4]
.text:0040F018                 mov     esp, ebp
.text:0040F01A                 pop     ebp
.text:0040F01B                 retn
.text:0040F01B ; ---------------------------------------------------------------------------
.text:0040F01C                 align 10h
.text:0040F020
.text:0040F020 loc_40F020:                             ; CODE XREF: .text:0040F007↑j
.text:0040F020                                         ; .text:0040F028↓j
.text:0040F020                 call    ds:dword_410250[ebx*4]
.text:0040F027                 dec     ebx
.text:0040F028                 jnz     short loc_40F020
.text:0040F02A                 jmp     short loc_40F009
.text:0040F02C ; ---------------------------------------------------------------------------
.text:0040F02C
.text:0040F02C loc_40F02C:                             ; CODE XREF: .text:0040F001↑j
.text:0040F02C                 mov     ecx, ds:dword_410254
.text:0040F032                 xor     eax, eax
.text:0040F034                 test    ecx, ecx
.text:0040F036                 jz      short loc_40F003
.text:0040F038                 mov     edx, offset dword_410250
.text:0040F03D                 lea     esi, [esi+0]
.text:0040F040
.text:0040F040 loc_40F040:                             ; CODE XREF: .text:0040F047↓j
.text:0040F040                 inc     eax
.text:0040F041                 mov     ecx, [edx+eax*4+4]
.text:0040F045                 test    ecx, ecx
.text:0040F047                 jnz     short loc_40F040
.text:0040F049                 jmp     short loc_40F003
.text:0040F049 ; ---------------------------------------------------------------------------
.text:0040F04B                 align 10h
.text:0040F050
.text:0040F050 ; =============== S U B R O U T I N E =======================================
.text:0040F050
.text:0040F050 ; Attributes: bp-based frame
.text:0040F050
.text:0040F050 sub_40F050      proc near               ; CODE XREF: sub_401A30+18↑p
.text:0040F050
.text:0040F050 var_8           = dword ptr -8
.text:0040F050 var_4           = dword ptr -4
.text:0040F050
.text:0040F050                 push    ebp
.text:0040F051                 mov     ebp, esp
.text:0040F053                 sub     esp, 8
.text:0040F056                 mov     [ebp+var_4], ebx
.text:0040F059                 mov     edx, dword_4110D0
.text:0040F05F                 test    edx, edx
.text:0040F061                 jnz     short loc_40F08A
.text:0040F063                 mov     eax, ds:dword_410250
.text:0040F068                 mov     edx, 1
.text:0040F06D                 mov     dword_4110D0, edx
.text:0040F073                 cmp     eax, 0FFFFFFFFh
.text:0040F076                 jz      short loc_40F09D
.text:0040F078
.text:0040F078 loc_40F078:                             ; CODE XREF: sub_40F050+57↓j
.text:0040F078                                         ; sub_40F050+69↓j
.text:0040F078                 test    eax, eax
.text:0040F07A                 mov     ebx, eax
.text:0040F07C                 jnz     short loc_40F091
.text:0040F07E
.text:0040F07E loc_40F07E:                             ; CODE XREF: sub_40F050+4B↓j
.text:0040F07E                 mov     [esp+8+var_8], offset sub_40EFC0 ; void (__cdecl *)()
.text:0040F085                 call    sub_401040
.text:0040F08A
.text:0040F08A loc_40F08A:                             ; CODE XREF: sub_40F050+11↑j
.text:0040F08A                 mov     ebx, [ebp+var_4]
.text:0040F08D                 mov     esp, ebp
.text:0040F08F                 pop     ebp
.text:0040F090                 retn
.text:0040F091 ; ---------------------------------------------------------------------------
.text:0040F091
.text:0040F091 loc_40F091:                             ; CODE XREF: sub_40F050+2C↑j
.text:0040F091                                         ; sub_40F050+49↓j
.text:0040F091                 call    ds:dword_410250[ebx*4]
.text:0040F098                 dec     ebx
.text:0040F099                 jnz     short loc_40F091
.text:0040F09B                 jmp     short loc_40F07E
.text:0040F09D ; ---------------------------------------------------------------------------
.text:0040F09D
.text:0040F09D loc_40F09D:                             ; CODE XREF: sub_40F050+26↑j
.text:0040F09D                 mov     ecx, ds:dword_410254
.text:0040F0A3                 xor     eax, eax
.text:0040F0A5                 test    ecx, ecx
.text:0040F0A7                 jz      short loc_40F078
.text:0040F0A9                 mov     edx, offset dword_410250
.text:0040F0AE                 mov     esi, esi
.text:0040F0B0
.text:0040F0B0 loc_40F0B0:                             ; CODE XREF: sub_40F050+67↓j
.text:0040F0B0                 inc     eax
.text:0040F0B1                 mov     ebx, [edx+eax*4+4]
.text:0040F0B5                 test    ebx, ebx
.text:0040F0B7                 jnz     short loc_40F0B0
.text:0040F0B9                 jmp     short loc_40F078
.text:0040F0B9 sub_40F050      endp
.text:0040F0B9
.text:0040F0B9 ; ---------------------------------------------------------------------------
.text:0040F0BB                 align 10h
.text:0040F0C0
.text:0040F0C0 ; =============== S U B R O U T I N E =======================================
.text:0040F0C0
.text:0040F0C0 ; Attributes: info_from_lumina
.text:0040F0C0
.text:0040F0C0 ; void *__cdecl _alloca(size_t Size)
.text:0040F0C0 __alloca        proc near               ; CODE XREF: sub_401A30+13↑p
.text:0040F0C0                 push    ecx
.text:0040F0C1                 mov     ecx, esp
.text:0040F0C3                 add     ecx, 8
.text:0040F0C6
.text:0040F0C6 loc_40F0C6:                             ; CODE XREF: __alloca+1B↓j
.text:0040F0C6                 cmp     eax, 1000h
.text:0040F0CB                 jb      short loc_40F0DD
.text:0040F0CD                 sub     ecx, 1000h
.text:0040F0D3                 or      dword ptr [ecx], 0
.text:0040F0D6                 sub     eax, 1000h
.text:0040F0DB                 jmp     short loc_40F0C6
.text:0040F0DD ; ---------------------------------------------------------------------------
.text:0040F0DD
.text:0040F0DD loc_40F0DD:                             ; CODE XREF: __alloca+B↑j
.text:0040F0DD                 sub     ecx, eax
.text:0040F0DF                 or      dword ptr [ecx], 0
.text:0040F0E2                 mov     eax, esp
.text:0040F0E4                 mov     esp, ecx
.text:0040F0E6                 mov     ecx, [eax]
.text:0040F0E8                 mov     eax, [eax+4]
.text:0040F0EB                 jmp     eax
.text:0040F0EB __alloca        endp
.text:0040F0EB
.text:0040F0EB ; ---------------------------------------------------------------------------
.text:0040F0ED                 align 10h
.text:0040F0F0
.text:0040F0F0 ; =============== S U B R O U T I N E =======================================
.text:0040F0F0
.text:0040F0F0 ; Attributes: bp-based frame
.text:0040F0F0
.text:0040F0F0 sub_40F0F0      proc near               ; CODE XREF: sub_4046D0+38↑p
.text:0040F0F0                                         ; sub_407C30+585↑p ...
.text:0040F0F0
.text:0040F0F0 var_34          = dword ptr -34h
.text:0040F0F0 var_2C          = dword ptr -2Ch
.text:0040F0F0 var_28          = dword ptr -28h
.text:0040F0F0 var_24          = dword ptr -24h
.text:0040F0F0 var_20          = dword ptr -20h
.text:0040F0F0 var_1C          = dword ptr -1Ch
.text:0040F0F0 var_18          = dword ptr -18h
.text:0040F0F0 var_14          = dword ptr -14h
.text:0040F0F0 arg_0           = dword ptr  8
.text:0040F0F0 arg_4           = dword ptr  0Ch
.text:0040F0F0 arg_8           = dword ptr  10h
.text:0040F0F0 arg_C           = dword ptr  14h
.text:0040F0F0
.text:0040F0F0                 push    ebp
.text:0040F0F1                 mov     ebp, esp
.text:0040F0F3                 push    edi
.text:0040F0F4                 push    esi
.text:0040F0F5                 push    ebx
.text:0040F0F6                 sub     esp, 2Ch
.text:0040F0F9                 mov     edx, [ebp+arg_C]
.text:0040F0FC                 mov     [ebp+var_20], 0
.text:0040F103                 mov     ecx, [ebp+arg_0]
.text:0040F106                 mov     ebx, [ebp+arg_4]
.text:0040F109                 mov     [ebp+var_1C], 0
.text:0040F110                 mov     eax, [ebp+arg_8]
.text:0040F113                 test    edx, edx
.text:0040F115                 mov     [ebp+var_24], edx
.text:0040F118                 mov     edi, ebx
.text:0040F11A                 mov     esi, eax
.text:0040F11C                 mov     [ebp+var_28], ecx
.text:0040F11F                 jnz     short loc_40F180
.text:0040F121                 cmp     eax, ebx
.text:0040F123                 jbe     short loc_40F160
.text:0040F125                 mov     eax, ecx
.text:0040F127                 mov     edx, ebx
.text:0040F129                 div     esi
.text:0040F12B
.text:0040F12B loc_40F12B:                             ; CODE XREF: sub_40F0F0+8B↓j
.text:0040F12B                 mov     [ebp+var_28], edx
.text:0040F12E                 lea     ecx, [ebp+var_18]
.text:0040F131                 test    ecx, ecx
.text:0040F133                 jz      short loc_40F14E
.text:0040F135                 mov     [ebp+var_1C], 0
.text:0040F13C
.text:0040F13C loc_40F13C:                             ; CODE XREF: sub_40F0F0+DA↓j
.text:0040F13C                 mov     eax, [ebp+var_28]
.text:0040F13F                 mov     [ebp+var_20], eax
.text:0040F142                 mov     edx, [ebp+var_20]
.text:0040F145                 mov     ecx, [ebp+var_1C]
.text:0040F148                 mov     [ebp+var_18], edx
.text:0040F14B                 mov     [ebp+var_14], ecx
.text:0040F14E
.text:0040F14E loc_40F14E:                             ; CODE XREF: sub_40F0F0+43↑j
.text:0040F14E                                         ; sub_40F0F0+A7↓j ...
.text:0040F14E                 mov     eax, [ebp+var_18]
.text:0040F151                 mov     edx, [ebp+var_14]
.text:0040F154                 add     esp, 2Ch
.text:0040F157                 pop     ebx
.text:0040F158                 pop     esi
.text:0040F159                 pop     edi
.text:0040F15A                 pop     ebp
.text:0040F15B                 retn
.text:0040F15B ; ---------------------------------------------------------------------------
.text:0040F15C                 align 10h
.text:0040F160
.text:0040F160 loc_40F160:                             ; CODE XREF: sub_40F0F0+33↑j
.text:0040F160                 test    eax, eax
.text:0040F162                 jnz     short loc_40F16F
.text:0040F164                 mov     eax, 1
.text:0040F169                 xor     edx, edx
.text:0040F16B                 div     esi
.text:0040F16D                 mov     esi, eax
.text:0040F16F
.text:0040F16F loc_40F16F:                             ; CODE XREF: sub_40F0F0+72↑j
.text:0040F16F                 mov     eax, edi
.text:0040F171                 mov     edx, [ebp+var_24]
.text:0040F174                 div     esi
.text:0040F176                 mov     eax, [ebp+var_28]
.text:0040F179                 div     esi
.text:0040F17B                 jmp     short loc_40F12B
.text:0040F17B ; ---------------------------------------------------------------------------
.text:0040F17D                 align 10h
.text:0040F180
.text:0040F180 loc_40F180:                             ; CODE XREF: sub_40F0F0+2F↑j
.text:0040F180                 cmp     [ebp+var_24], ebx
.text:0040F183                 jbe     short loc_40F1A0
.text:0040F185                 mov     [ebp+var_20], ecx
.text:0040F188
.text:0040F188 loc_40F188:                             ; CODE XREF: sub_40F0F0+15B↓j
.text:0040F188                 mov     [ebp+var_1C], edi
.text:0040F18B                 mov     eax, [ebp+var_20]
.text:0040F18E                 mov     edx, [ebp+var_1C]
.text:0040F191                 mov     [ebp+var_18], eax
.text:0040F194                 mov     [ebp+var_14], edx
.text:0040F197                 jmp     short loc_40F14E
.text:0040F197 ; ---------------------------------------------------------------------------
.text:0040F199                 align 10h
.text:0040F1A0
.text:0040F1A0 loc_40F1A0:                             ; CODE XREF: sub_40F0F0+93↑j
.text:0040F1A0                 bsr     eax, [ebp+var_24]
.text:0040F1A4                 mov     ebx, eax
.text:0040F1A6                 xor     ebx, 1Fh
.text:0040F1A9                 jnz     short loc_40F1D0
.text:0040F1AB                 cmp     edi, [ebp+var_24]
.text:0040F1AE                 ja      short loc_40F1B5
.text:0040F1B0                 cmp     [ebp+var_28], esi
.text:0040F1B3                 jb      short loc_40F1C0
.text:0040F1B5
.text:0040F1B5 loc_40F1B5:                             ; CODE XREF: sub_40F0F0+BE↑j
.text:0040F1B5                 mov     edx, [ebp+var_28]
.text:0040F1B8                 sub     edx, esi
.text:0040F1BA                 sbb     edi, [ebp+var_24]
.text:0040F1BD                 mov     [ebp+var_28], edx
.text:0040F1C0
.text:0040F1C0 loc_40F1C0:                             ; CODE XREF: sub_40F0F0+C3↑j
.text:0040F1C0                 lea     ecx, [ebp+var_18]
.text:0040F1C3                 test    ecx, ecx
.text:0040F1C5                 jz      short loc_40F14E
.text:0040F1C7                 mov     [ebp+var_1C], edi
.text:0040F1CA                 jmp     loc_40F13C
.text:0040F1CA ; ---------------------------------------------------------------------------
.text:0040F1CF                 align 10h
.text:0040F1D0
.text:0040F1D0 loc_40F1D0:                             ; CODE XREF: sub_40F0F0+B9↑j
.text:0040F1D0                 mov     edx, [ebp+var_24]
.text:0040F1D3                 mov     eax, 20h ; ' '
.text:0040F1D8                 mov     cl, bl
.text:0040F1DA                 sub     eax, ebx
.text:0040F1DC                 mov     [ebp+var_2C], eax
.text:0040F1DF                 shl     edx, cl
.text:0040F1E1                 mov     eax, esi
.text:0040F1E3                 movzx   ecx, byte ptr [ebp+var_2C]
.text:0040F1E7                 shr     eax, cl
.text:0040F1E9                 mov     cl, bl
.text:0040F1EB                 shl     esi, cl
.text:0040F1ED                 or      edx, eax
.text:0040F1EF                 mov     eax, [ebp+var_28]
.text:0040F1F2                 movzx   ecx, byte ptr [ebp+var_2C]
.text:0040F1F6                 mov     [ebp+var_24], edx
.text:0040F1F9                 mov     edx, edi
.text:0040F1FB                 shr     edx, cl
.text:0040F1FD                 mov     cl, bl
.text:0040F1FF                 shl     edi, cl
.text:0040F201                 movzx   ecx, byte ptr [ebp+var_2C]
.text:0040F205                 shr     eax, cl
.text:0040F207                 or      edi, eax
.text:0040F209                 mov     eax, edi
.text:0040F20B                 mov     cl, bl
.text:0040F20D                 div     [ebp+var_24]
.text:0040F210                 shl     [ebp+var_28], cl
.text:0040F213                 mov     edi, edx
.text:0040F215                 mul     esi
.text:0040F217                 mov     [ebp+var_34], eax
.text:0040F21A                 cmp     edx, edi
.text:0040F21C                 ja      short loc_40F258
.text:0040F21E                 cmp     edx, edi
.text:0040F220                 jz      short loc_40F250
.text:0040F222
.text:0040F222 loc_40F222:                             ; CODE XREF: sub_40F0F0+166↓j
.text:0040F222                                         ; sub_40F0F0+173↓j
.text:0040F222                 lea     eax, [ebp+var_18]
.text:0040F225                 test    eax, eax
.text:0040F227                 jz      loc_40F14E
.text:0040F22D                 movzx   ecx, byte ptr [ebp+var_2C]
.text:0040F231                 mov     eax, [ebp+var_28]
.text:0040F234                 sub     eax, [ebp+var_34]
.text:0040F237                 sbb     edi, edx
.text:0040F239                 mov     [ebp+var_28], eax
.text:0040F23C                 mov     edx, edi
.text:0040F23E                 shl     edx, cl
.text:0040F240                 mov     cl, bl
.text:0040F242                 shr     eax, cl
.text:0040F244                 or      edx, eax
.text:0040F246                 mov     [ebp+var_20], edx
.text:0040F249                 shr     edi, cl
.text:0040F24B                 jmp     loc_40F188
.text:0040F250 ; ---------------------------------------------------------------------------
.text:0040F250
.text:0040F250 loc_40F250:                             ; CODE XREF: sub_40F0F0+130↑j
.text:0040F250                 mov     eax, [ebp+var_28]
.text:0040F253                 cmp     [ebp+var_34], eax
.text:0040F256                 jbe     short loc_40F222
.text:0040F258
.text:0040F258 loc_40F258:                             ; CODE XREF: sub_40F0F0+12C↑j
.text:0040F258                 mov     ecx, [ebp+var_34]
.text:0040F25B                 sub     ecx, esi
.text:0040F25D                 sbb     edx, [ebp+var_24]
.text:0040F260                 mov     [ebp+var_34], ecx
.text:0040F263                 jmp     short loc_40F222
.text:0040F263 sub_40F0F0      endp
.text:0040F263
.text:0040F263 ; ---------------------------------------------------------------------------
.text:0040F265                 align 10h
.text:0040F270
.text:0040F270 ; =============== S U B R O U T I N E =======================================
.text:0040F270
.text:0040F270 ; Attributes: bp-based frame
.text:0040F270
.text:0040F270 sub_40F270      proc near               ; CODE XREF: sub_4046D0+58↑p
.text:0040F270                                         ; sub_4047B0+2BE↑p ...
.text:0040F270
.text:0040F270 var_24          = dword ptr -24h
.text:0040F270 var_20          = dword ptr -20h
.text:0040F270 var_1C          = dword ptr -1Ch
.text:0040F270 var_18          = dword ptr -18h
.text:0040F270 var_14          = dword ptr -14h
.text:0040F270 var_C           = dword ptr -0Ch
.text:0040F270 var_8           = dword ptr -8
.text:0040F270 var_4           = dword ptr -4
.text:0040F270 arg_0           = dword ptr  8
.text:0040F270 arg_4           = dword ptr  0Ch
.text:0040F270 arg_8           = dword ptr  10h
.text:0040F270 arg_C           = dword ptr  14h
.text:0040F270
.text:0040F270                 push    ebp
.text:0040F271                 mov     ebp, esp
.text:0040F273                 sub     esp, 28h
.text:0040F276                 mov     [ebp+var_C], ebx
.text:0040F279                 mov     edx, [ebp+arg_C]
.text:0040F27C                 mov     ecx, [ebp+arg_0]
.text:0040F27F                 mov     [ebp+var_8], esi
.text:0040F282                 mov     eax, [ebp+arg_8]
.text:0040F285                 test    edx, edx
.text:0040F287                 mov     [ebp+var_4], edi
.text:0040F28A                 mov     ebx, [ebp+arg_4]
.text:0040F28D                 mov     esi, eax
.text:0040F28F                 mov     [ebp+var_18], 0
.text:0040F296                 mov     [ebp+var_14], 0
.text:0040F29D                 mov     [ebp+var_1C], ecx
.text:0040F2A0                 jnz     short loc_40F2F2
.text:0040F2A2                 cmp     eax, ebx
.text:0040F2A4                 jbe     short loc_40F2D0
.text:0040F2A6                 mov     eax, ecx
.text:0040F2A8                 mov     edx, ebx
.text:0040F2AA                 div     esi
.text:0040F2AC                 mov     edi, eax
.text:0040F2AE                 mov     esi, esi
.text:0040F2B0
.text:0040F2B0 loc_40F2B0:                             ; CODE XREF: sub_40F270+88↓j
.text:0040F2B0                                         ; sub_40F270+A4↓j ...
.text:0040F2B0                 xor     ecx, ecx
.text:0040F2B2
.text:0040F2B2 loc_40F2B2:                             ; CODE XREF: sub_40F270+80↓j
.text:0040F2B2                 mov     [ebp+var_18], edi
.text:0040F2B5                 mov     ebx, [ebp+var_C]
.text:0040F2B8                 mov     eax, [ebp+var_18]
.text:0040F2BB                 mov     [ebp+var_14], ecx
.text:0040F2BE                 mov     esi, [ebp+var_8]
.text:0040F2C1                 mov     edx, [ebp+var_14]
.text:0040F2C4                 mov     edi, [ebp+var_4]
.text:0040F2C7                 mov     esp, ebp
.text:0040F2C9                 pop     ebp
.text:0040F2CA                 retn
.text:0040F2CA ; ---------------------------------------------------------------------------
.text:0040F2CB                 align 10h
.text:0040F2D0
.text:0040F2D0 loc_40F2D0:                             ; CODE XREF: sub_40F270+34↑j
.text:0040F2D0                 test    eax, eax
.text:0040F2D2                 jnz     short loc_40F2E1
.text:0040F2D4                 mov     eax, 1
.text:0040F2D9                 xor     ecx, ecx
.text:0040F2DB                 xor     edx, edx
.text:0040F2DD                 div     ecx
.text:0040F2DF                 mov     esi, eax
.text:0040F2E1
.text:0040F2E1 loc_40F2E1:                             ; CODE XREF: sub_40F270+62↑j
.text:0040F2E1                 mov     eax, ebx
.text:0040F2E3                 xor     edx, edx
.text:0040F2E5                 div     esi
.text:0040F2E7                 mov     ecx, eax
.text:0040F2E9                 mov     eax, [ebp+var_1C]
.text:0040F2EC                 div     esi
.text:0040F2EE                 mov     edi, eax
.text:0040F2F0                 jmp     short loc_40F2B2
.text:0040F2F2 ; ---------------------------------------------------------------------------
.text:0040F2F2
.text:0040F2F2 loc_40F2F2:                             ; CODE XREF: sub_40F270+30↑j
.text:0040F2F2                 cmp     edx, ebx
.text:0040F2F4                 jbe     short loc_40F300
.text:0040F2F6                 xor     edi, edi
.text:0040F2F8                 jmp     short loc_40F2B0
.text:0040F2F8 ; ---------------------------------------------------------------------------
.text:0040F2FA                 align 10h
.text:0040F300
.text:0040F300 loc_40F300:                             ; CODE XREF: sub_40F270+84↑j
.text:0040F300                 bsr     eax, edx
.text:0040F303                 xor     eax, 1Fh
.text:0040F306                 mov     [ebp+var_20], eax
.text:0040F309                 jnz     short loc_40F320
.text:0040F30B                 cmp     ebx, edx
.text:0040F30D                 ja      short loc_40F316
.text:0040F30F                 xor     edi, edi
.text:0040F311                 cmp     [ebp+var_1C], esi
.text:0040F314                 jb      short loc_40F2B0
.text:0040F316
.text:0040F316 loc_40F316:                             ; CODE XREF: sub_40F270+9D↑j
.text:0040F316                 mov     edi, 1
.text:0040F31B                 jmp     short loc_40F2B0
.text:0040F31B ; ---------------------------------------------------------------------------
.text:0040F31D                 align 10h
.text:0040F320
.text:0040F320 loc_40F320:                             ; CODE XREF: sub_40F270+99↑j
.text:0040F320                 mov     eax, [ebp+var_20]
.text:0040F323                 mov     ecx, 20h ; ' '
.text:0040F328                 sub     ecx, eax
.text:0040F32A                 mov     [ebp+var_24], ecx
.text:0040F32D                 mov     eax, esi
.text:0040F32F                 movzx   ecx, byte ptr [ebp+var_20]
.text:0040F333                 shl     edx, cl
.text:0040F335                 mov     edi, edx
.text:0040F337                 movzx   ecx, byte ptr [ebp+var_24]
.text:0040F33B                 mov     edx, ebx
.text:0040F33D                 shr     eax, cl
.text:0040F33F                 movzx   ecx, byte ptr [ebp+var_20]
.text:0040F343                 or      edi, eax
.text:0040F345                 mov     eax, [ebp+var_1C]
.text:0040F348                 shl     esi, cl
.text:0040F34A                 movzx   ecx, byte ptr [ebp+var_24]
.text:0040F34E                 shr     edx, cl
.text:0040F350                 movzx   ecx, byte ptr [ebp+var_20]
.text:0040F354                 shl     ebx, cl
.text:0040F356                 movzx   ecx, byte ptr [ebp+var_24]
.text:0040F35A                 shr     eax, cl
.text:0040F35C                 or      ebx, eax
.text:0040F35E                 movzx   ecx, byte ptr [ebp+var_20]
.text:0040F362                 mov     eax, ebx
.text:0040F364                 div     edi
.text:0040F366                 mov     ebx, edx
.text:0040F368                 mov     edi, eax
.text:0040F36A                 shl     [ebp+var_1C], cl
.text:0040F36D                 mul     esi
.text:0040F36F                 cmp     edx, ebx
.text:0040F371                 ja      short loc_40F384
.text:0040F373                 cmp     edx, ebx
.text:0040F375                 jnz     loc_40F2B0
.text:0040F37B                 cmp     eax, [ebp+var_1C]
.text:0040F37E                 jbe     loc_40F2B0
.text:0040F384
.text:0040F384 loc_40F384:                             ; CODE XREF: sub_40F270+101↑j
.text:0040F384                 dec     edi
.text:0040F385                 jmp     loc_40F2B0
.text:0040F385 sub_40F270      endp
.text:0040F385
.text:0040F385 ; ---------------------------------------------------------------------------
.text:0040F38A                 align 10h
.text:0040F390
.text:0040F390 ; =============== S U B R O U T I N E =======================================
.text:0040F390
.text:0040F390 ; Attributes: thunk
.text:0040F390
.text:0040F390 ; int __cdecl isatty(int FileHandle)
.text:0040F390 _isatty         proc near               ; CODE XREF: sub_401A30+77A↑p
.text:0040F390
.text:0040F390 FileHandle      = dword ptr  4
.text:0040F390
.text:0040F390                 jmp     ds:__imp__isatty
.text:0040F390 _isatty         endp
.text:0040F390
.text:0040F390 ; ---------------------------------------------------------------------------
.text:0040F396                 align 10h
.text:0040F3A0
.text:0040F3A0 ; =============== S U B R O U T I N E =======================================
.text:0040F3A0
.text:0040F3A0 ; Attributes: thunk
.text:0040F3A0
.text:0040F3A0 ; int open(const char *FileName, int OpenFlag, ...)
.text:0040F3A0 _open           proc near               ; CODE XREF: sub_401A30+959↑p
.text:0040F3A0                                         ; sub_402600+C3↑p ...
.text:0040F3A0
.text:0040F3A0 FileName        = dword ptr  4
.text:0040F3A0 OpenFlag        = dword ptr  8
.text:0040F3A0
.text:0040F3A0                 jmp     ds:__imp__open
.text:0040F3A0 _open           endp
.text:0040F3A0
.text:0040F3A0 ; ---------------------------------------------------------------------------
.text:0040F3A6                 align 10h
.text:0040F3B0
.text:0040F3B0 ; =============== S U B R O U T I N E =======================================
.text:0040F3B0
.text:0040F3B0 ; Attributes: thunk
.text:0040F3B0
.text:0040F3B0 ; int __cdecl close(int FileHandle)
.text:0040F3B0 _close          proc near               ; CODE XREF: sub_401A30+83D↑p
.text:0040F3B0                                         ; sub_401A30+856↑p ...
.text:0040F3B0
.text:0040F3B0 FileHandle      = dword ptr  4
.text:0040F3B0
.text:0040F3B0                 jmp     ds:__imp__close
.text:0040F3B0 _close          endp
.text:0040F3B0
.text:0040F3B0 ; ---------------------------------------------------------------------------
.text:0040F3B6                 align 10h
.text:0040F3C0
.text:0040F3C0 ; =============== S U B R O U T I N E =======================================
.text:0040F3C0
.text:0040F3C0 ; Attributes: thunk
.text:0040F3C0
.text:0040F3C0 ; int __cdecl read(int FileHandle, void *DstBuf, unsigned int MaxCharCount)
.text:0040F3C0 _read           proc near               ; CODE XREF: sub_4075F0+2B↑p
.text:0040F3C0
.text:0040F3C0 FileHandle      = dword ptr  4
.text:0040F3C0 DstBuf          = dword ptr  8
.text:0040F3C0 MaxCharCount    = dword ptr  0Ch
.text:0040F3C0
.text:0040F3C0                 jmp     ds:__imp__read
.text:0040F3C0 _read           endp
.text:0040F3C0
.text:0040F3C0 ; ---------------------------------------------------------------------------
.text:0040F3C6                 align 10h
.text:0040F3D0
.text:0040F3D0 ; =============== S U B R O U T I N E =======================================
.text:0040F3D0
.text:0040F3D0 ; Attributes: thunk
.text:0040F3D0
.text:0040F3D0 ; int __cdecl write(int FileHandle, const void *Buf, unsigned int MaxCharCount)
.text:0040F3D0 _write          proc near               ; CODE XREF: sub_407660+2B↑p
.text:0040F3D0
.text:0040F3D0 FileHandle      = dword ptr  4
.text:0040F3D0 Buf             = dword ptr  8
.text:0040F3D0 MaxCharCount    = dword ptr  0Ch
.text:0040F3D0
.text:0040F3D0                 jmp     ds:__imp__write
.text:0040F3D0 _write          endp
.text:0040F3D0
.text:0040F3D0 ; ---------------------------------------------------------------------------
.text:0040F3D6                 align 10h
.text:0040F3E0
.text:0040F3E0 ; =============== S U B R O U T I N E =======================================
.text:0040F3E0
.text:0040F3E0 ; Attributes: thunk
.text:0040F3E0
.text:0040F3E0 ; int __cdecl stricmp(const char *String1, const char *String2)
.text:0040F3E0 _stricmp        proc near               ; CODE XREF: sub_4084E0+46F↑p
.text:0040F3E0                                         ; sub_40A460+2E↑p ...
.text:0040F3E0
.text:0040F3E0 String1         = dword ptr  4
.text:0040F3E0 String2         = dword ptr  8
.text:0040F3E0
.text:0040F3E0                 jmp     ds:__imp__stricmp
.text:0040F3E0 _stricmp        endp
.text:0040F3E0
.text:0040F3E0 ; ---------------------------------------------------------------------------
.text:0040F3E6                 align 10h
.text:0040F3F0
.text:0040F3F0 ; =============== S U B R O U T I N E =======================================
.text:0040F3F0
.text:0040F3F0 ; Attributes: thunk
.text:0040F3F0
.text:0040F3F0 ; char *__cdecl strdup(const char *String)
.text:0040F3F0 _strdup         proc near               ; CODE XREF: sub_40A090+101↑p
.text:0040F3F0                                         ; .text:0040A2FA↑p ...
.text:0040F3F0
.text:0040F3F0 String          = dword ptr  4
.text:0040F3F0
.text:0040F3F0                 jmp     ds:__imp__strdup
.text:0040F3F0 _strdup         endp
.text:0040F3F0
.text:0040F3F0 ; ---------------------------------------------------------------------------
.text:0040F3F6                 align 10h
.text:0040F400
.text:0040F400 ; =============== S U B R O U T I N E =======================================
.text:0040F400
.text:0040F400 ; Attributes: thunk
.text:0040F400
.text:0040F400 ; int __cdecl getpid()
.text:0040F400 _getpid         proc near               ; CODE XREF: sub_40D0B0+84↑p
.text:0040F400                 jmp     ds:__imp__getpid
.text:0040F400 _getpid         endp
.text:0040F400
.text:0040F400 ; ---------------------------------------------------------------------------
.text:0040F406                 align 10h
.text:0040F410
.text:0040F410 ; =============== S U B R O U T I N E =======================================
.text:0040F410
.text:0040F410 ; Attributes: thunk
.text:0040F410
.text:0040F410 ; int __cdecl chmod(const char *FileName, int AccessMode)
.text:0040F410 _chmod          proc near               ; CODE XREF: sub_40D4E0+41↑j
.text:0040F410
.text:0040F410 FileName        = dword ptr  4
.text:0040F410 AccessMode      = dword ptr  8
.text:0040F410
.text:0040F410                 jmp     ds:__imp__chmod
.text:0040F410 _chmod          endp
.text:0040F410
.text:0040F410 ; ---------------------------------------------------------------------------
.text:0040F416                 align 10h
.text:0040F420
.text:0040F420 ; =============== S U B R O U T I N E =======================================
.text:0040F420
.text:0040F420 ; Attributes: info_from_lumina
.text:0040F420
.text:0040F420 ; unsigned __int64 __cdecl strtoull(const char *String, char **EndPtr, int Radix)
.text:0040F420 _strtoull       proc near               ; CODE XREF: sub_4047B0+AD↑p
.text:0040F420
.text:0040F420 C               = dword ptr -3Ch
.text:0040F420 Type            = dword ptr -38h
.text:0040F420 var_34          = dword ptr -34h
.text:0040F420 var_30          = dword ptr -30h
.text:0040F420 var_2C          = dword ptr -2Ch
.text:0040F420 var_28          = dword ptr -28h
.text:0040F420 var_24          = dword ptr -24h
.text:0040F420 var_20          = dword ptr -20h
.text:0040F420 var_1C          = dword ptr -1Ch
.text:0040F420 var_18          = dword ptr -18h
.text:0040F420 String          = dword ptr  4
.text:0040F420 EndPtr          = dword ptr  8
.text:0040F420 Radix           = dword ptr  0Ch
.text:0040F420
.text:0040F420                 push    ebp
.text:0040F421                 push    edi
.text:0040F422                 push    esi
.text:0040F423                 push    ebx
.text:0040F424                 sub     esp, 2Ch
.text:0040F427                 mov     edx, [esp+3Ch+EndPtr]
.text:0040F42B                 test    edx, edx
.text:0040F42D                 jz      short loc_40F439
.text:0040F42F                 mov     eax, [esp+3Ch+String]
.text:0040F433                 mov     ecx, [esp+3Ch+EndPtr]
.text:0040F437                 mov     [ecx], eax
.text:0040F439
.text:0040F439 loc_40F439:                             ; CODE XREF: _strtoull+D↑j
.text:0040F439                 mov     edx, [esp+3Ch+Radix]
.text:0040F43D                 test    edx, edx
.text:0040F43F                 js      short loc_40F44F
.text:0040F441                 cmp     [esp+3Ch+Radix], 1
.text:0040F446                 jz      short loc_40F44F
.text:0040F448                 cmp     [esp+3Ch+Radix], 24h ; '$'
.text:0040F44D                 jle     short loc_40F466
.text:0040F44F
.text:0040F44F loc_40F44F:                             ; CODE XREF: _strtoull+1F↑j
.text:0040F44F                                         ; _strtoull+26↑j
.text:0040F44F                 call    _errno
.text:0040F454                 mov     dword ptr [eax], 21h ; '!'
.text:0040F45A
.text:0040F45A loc_40F45A:                             ; CODE XREF: _strtoull+FF↓j
.text:0040F45A                                         ; _strtoull+109↓j
.text:0040F45A                 xor     eax, eax
.text:0040F45C                 xor     edx, edx
.text:0040F45E
.text:0040F45E loc_40F45E:                             ; CODE XREF: _strtoull+244↓j
.text:0040F45E                                         ; _strtoull+251↓j ...
.text:0040F45E                 add     esp, 2Ch
.text:0040F461                 pop     ebx
.text:0040F462                 pop     esi
.text:0040F463                 pop     edi
.text:0040F464                 pop     ebp
.text:0040F465                 retn
.text:0040F466 ; ---------------------------------------------------------------------------
.text:0040F466
.text:0040F466 loc_40F466:                             ; CODE XREF: _strtoull+2D↑j
.text:0040F466                 mov     ecx, ds:__mb_cur_max
.text:0040F46C                 lea     esi, [esi+0]
.text:0040F470
.text:0040F470 loc_40F470:                             ; CODE XREF: _strtoull+7E↓j
.text:0040F470                 cmp     dword ptr [ecx], 1
.text:0040F473                 mov     esi, [esp+3Ch+String]
.text:0040F477                 movsx   edx, byte ptr [esi]
.text:0040F47A                 jz      loc_40F852
.text:0040F480                 mov     [esp+3Ch+Type], 8 ; Type
.text:0040F488                 mov     [esp+3Ch+C], edx ; C
.text:0040F48B                 call    _isctype
.text:0040F490                 mov     ecx, ds:__mb_cur_max
.text:0040F496
.text:0040F496 loc_40F496:                             ; CODE XREF: _strtoull+445↓j
.text:0040F496                 test    eax, eax
.text:0040F498                 jz      short loc_40F4A0
.text:0040F49A                 inc     [esp+3Ch+String]
.text:0040F49E                 jmp     short loc_40F470
.text:0040F4A0 ; ---------------------------------------------------------------------------
.text:0040F4A0
.text:0040F4A0 loc_40F4A0:                             ; CODE XREF: _strtoull+78↑j
.text:0040F4A0                 mov     esi, [esp+3Ch+String]
.text:0040F4A4                 xor     ebx, ebx
.text:0040F4A6                 movzx   edx, byte ptr [esi]
.text:0040F4A9                 cmp     dl, 2Dh ; '-'
.text:0040F4AC                 setz    bl
.text:0040F4AF                 test    ebx, ebx
.text:0040F4B1                 mov     [esp+3Ch+var_20], ebx
.text:0040F4B5                 jnz     loc_40F842
.text:0040F4BB                 cmp     dl, 2Bh ; '+'
.text:0040F4BE                 jz      loc_40F842
.text:0040F4C4
.text:0040F4C4 loc_40F4C4:                             ; CODE XREF: _strtoull+42D↓j
.text:0040F4C4                 mov     ebp, [esp+3Ch+Radix]
.text:0040F4C8                 test    ebp, ebp
.text:0040F4CA                 jnz     short loc_40F4DD
.text:0040F4CC                 cmp     dl, 30h ; '0'
.text:0040F4CF                 jz      loc_40F819
.text:0040F4D5                 mov     [esp+3Ch+Radix], 0Ah
.text:0040F4DD
.text:0040F4DD loc_40F4DD:                             ; CODE XREF: _strtoull+AA↑j
.text:0040F4DD                                         ; _strtoull+40F↓j ...
.text:0040F4DD                 cmp     [esp+3Ch+Radix], 10h
.text:0040F4E2                 jz      loc_40F7EB
.text:0040F4E8
.text:0040F4E8 loc_40F4E8:                             ; CODE XREF: _strtoull+3CE↓j
.text:0040F4E8                                         ; _strtoull+3E2↓j ...
.text:0040F4E8                 cmp     dword ptr [ecx], 1
.text:0040F4EB                 movsx   ebx, dl
.text:0040F4EE                 jz      loc_40F7D3
.text:0040F4F4                 mov     [esp+3Ch+Type], 4 ; Type
.text:0040F4FC                 mov     [esp+3Ch+C], ebx ; C
.text:0040F4FF                 call    _isctype
.text:0040F504                 mov     esi, [esp+3Ch+String]
.text:0040F508                 movzx   edx, byte ptr [esi]
.text:0040F50B
.text:0040F50B loc_40F50B:                             ; CODE XREF: _strtoull+3C6↓j
.text:0040F50B                 test    eax, eax
.text:0040F50D                 jz      loc_40F73C
.text:0040F513                 movsx   eax, dl
.text:0040F516                 sub     eax, 30h ; '0'
.text:0040F519
.text:0040F519 loc_40F519:                             ; CODE XREF: _strtoull+34B↓j
.text:0040F519                                         ; _strtoull+37C↓j ...
.text:0040F519                 inc     [esp+3Ch+String]
.text:0040F51D                 test    eax, eax
.text:0040F51F                 js      loc_40F45A
.text:0040F525                 cmp     eax, [esp+3Ch+Radix]
.text:0040F529                 jge     loc_40F45A
.text:0040F52F                 mov     [esp+3Ch+var_1C], eax
.text:0040F533                 mov     edx, eax
.text:0040F535                 sar     edx, 1Fh
.text:0040F538                 mov     [esp+3Ch+var_18], edx
.text:0040F53C                 mov     [esp+3Ch+var_24], 0
.text:0040F544                 lea     esi, [esi+0]
.text:0040F54A                 lea     edi, [edi+0]
.text:0040F550
.text:0040F550 loc_40F550:                             ; CODE XREF: _strtoull+20C↓j
.text:0040F550                 mov     ebp, [esp+3Ch+String]
.text:0040F554                 mov     ebx, ds:__mb_cur_max
.text:0040F55A                 movzx   edx, byte ptr [ebp+0]
.text:0040F55E                 cmp     dword ptr [ebx], 1
.text:0040F561                 movsx   ecx, dl
.text:0040F564                 jz      loc_40F725
.text:0040F56A                 mov     [esp+3Ch+C], ecx ; C
.text:0040F56D                 mov     [esp+3Ch+Type], 4 ; Type
.text:0040F575                 call    _isctype
.text:0040F57A                 mov     ecx, [esp+3Ch+String]
.text:0040F57E                 movzx   edx, byte ptr [ecx]
.text:0040F581
.text:0040F581 loc_40F581:                             ; CODE XREF: _strtoull+317↓j
.text:0040F581                 test    eax, eax
.text:0040F583                 jz      loc_40F690
.text:0040F589                 movsx   edi, dl
.text:0040F58C                 lea     ebp, [edi-30h]
.text:0040F58F
.text:0040F58F loc_40F58F:                             ; CODE XREF: _strtoull+2A3↓j
.text:0040F58F                 test    ebp, ebp
.text:0040F591                 js      loc_40F63B
.text:0040F597                 cmp     ebp, [esp+3Ch+Radix]
.text:0040F59B                 jge     loc_40F63B
.text:0040F5A1                 mov     [esp+3Ch+C], 0FFFFFFFFh
.text:0040F5A8                 mov     eax, [esp+3Ch+Radix]
.text:0040F5AC                 mov     [esp+3Ch+Type], 0FFFFFFFFh
.text:0040F5B4                 cdq
.text:0040F5B5                 mov     esi, eax
.text:0040F5B7                 mov     [esp+3Ch+var_34], eax
.text:0040F5BB                 mov     edi, edx
.text:0040F5BD                 mov     [esp+3Ch+var_30], edx
.text:0040F5C1                 call    sub_40F270
.text:0040F5C6                 add     eax, 1
.text:0040F5C9                 adc     edx, 0
.text:0040F5CC                 cmp     [esp+3Ch+var_18], edx
.text:0040F5D0                 ja      short loc_40F620
.text:0040F5D2                 jb      short loc_40F5DA
.text:0040F5D4                 cmp     [esp+3Ch+var_1C], eax
.text:0040F5D8                 ja      short loc_40F620
.text:0040F5DA
.text:0040F5DA loc_40F5DA:                             ; CODE XREF: _strtoull+1B2↑j
.text:0040F5DA                 mov     eax, [esp+3Ch+var_1C]
.text:0040F5DE                 mov     ebx, ebp
.text:0040F5E0                 mul     esi
.text:0040F5E2                 mov     ecx, edx
.text:0040F5E4                 mov     [esp+3Ch+var_2C], eax
.text:0040F5E8                 mov     eax, [esp+3Ch+var_18]
.text:0040F5EC                 mov     [esp+3Ch+var_28], edx
.text:0040F5F0                 imul    eax, esi
.text:0040F5F3                 mov     esi, [esp+3Ch+var_1C]
.text:0040F5F7                 imul    esi, edi
.text:0040F5FA                 add     ecx, eax
.text:0040F5FC                 lea     edi, [esi+ecx]
.text:0040F5FF                 mov     esi, ebp
.text:0040F601                 sar     esi, 1Fh
.text:0040F604                 add     ebx, [esp+3Ch+var_2C]
.text:0040F608                 mov     [esp+3Ch+var_28], edi
.text:0040F60C                 adc     esi, [esp+3Ch+var_28]
.text:0040F610                 cmp     esi, [esp+3Ch+var_18]
.text:0040F614                 jb      short loc_40F620
.text:0040F616                 ja      short loc_40F631
.text:0040F618                 cmp     ebx, [esp+3Ch+var_1C]
.text:0040F61C                 jnb     short loc_40F631
.text:0040F61E                 mov     esi, esi
.text:0040F620
.text:0040F620 loc_40F620:                             ; CODE XREF: _strtoull+1B0↑j
.text:0040F620                                         ; _strtoull+1B8↑j ...
.text:0040F620                 mov     [esp+3Ch+var_24], 1
.text:0040F628
.text:0040F628 loc_40F628:                             ; CODE XREF: _strtoull+219↓j
.text:0040F628                 inc     [esp+3Ch+String]
.text:0040F62C                 jmp     loc_40F550
.text:0040F631 ; ---------------------------------------------------------------------------
.text:0040F631
.text:0040F631 loc_40F631:                             ; CODE XREF: _strtoull+1F6↑j
.text:0040F631                                         ; _strtoull+1FC↑j
.text:0040F631                 mov     [esp+3Ch+var_1C], ebx
.text:0040F635                 mov     [esp+3Ch+var_18], esi
.text:0040F639                 jmp     short loc_40F628
.text:0040F63B ; ---------------------------------------------------------------------------
.text:0040F63B
.text:0040F63B loc_40F63B:                             ; CODE XREF: _strtoull+171↑j
.text:0040F63B                                         ; _strtoull+17B↑j
.text:0040F63B                 mov     eax, [esp+3Ch+EndPtr]
.text:0040F63F                 test    eax, eax
.text:0040F641                 jz      short loc_40F64E
.text:0040F643                 mov     ecx, [esp+3Ch+String]
.text:0040F647                 mov     ebp, [esp+3Ch+EndPtr]
.text:0040F64B                 mov     [ebp+0], ecx
.text:0040F64E
.text:0040F64E loc_40F64E:                             ; CODE XREF: _strtoull+221↑j
.text:0040F64E                 mov     esi, [esp+3Ch+var_24]
.text:0040F652                 test    esi, esi
.text:0040F654                 jnz     short loc_40F676
.text:0040F656                 mov     ebx, [esp+3Ch+var_20]
.text:0040F65A                 mov     eax, [esp+3Ch+var_1C]
.text:0040F65E                 mov     edx, [esp+3Ch+var_18]
.text:0040F662                 test    ebx, ebx
.text:0040F664                 jz      loc_40F45E
.text:0040F66A                 neg     eax
.text:0040F66C                 adc     edx, 0
.text:0040F66F                 neg     edx
.text:0040F671                 jmp     loc_40F45E
.text:0040F676 ; ---------------------------------------------------------------------------
.text:0040F676
.text:0040F676 loc_40F676:                             ; CODE XREF: _strtoull+234↑j
.text:0040F676                 call    _errno
.text:0040F67B                 mov     edx, 0FFFFFFFFh
.text:0040F680                 mov     dword ptr [eax], 22h ; '"'
.text:0040F686                 mov     eax, 0FFFFFFFFh
.text:0040F68B                 jmp     loc_40F45E
.text:0040F690 ; ---------------------------------------------------------------------------
.text:0040F690
.text:0040F690 loc_40F690:                             ; CODE XREF: _strtoull+163↑j
.text:0040F690                 mov     ebp, ds:__mb_cur_max
.text:0040F696                 movsx   ecx, dl
.text:0040F699                 cmp     dword ptr [ebp+0], 1
.text:0040F69D                 jz      short loc_40F711
.text:0040F69F                 mov     [esp+3Ch+Type], 1 ; Type
.text:0040F6A7                 mov     [esp+3Ch+C], ecx ; C
.text:0040F6AA                 call    _isctype
.text:0040F6AF                 mov     ebp, [esp+3Ch+String]
.text:0040F6B3                 movzx   edx, byte ptr [ebp+0]
.text:0040F6B7
.text:0040F6B7 loc_40F6B7:                             ; CODE XREF: _strtoull+303↓j
.text:0040F6B7                 test    eax, eax
.text:0040F6B9                 jz      short loc_40F6C8
.text:0040F6BB                 movsx   eax, dl
.text:0040F6BE                 sub     eax, 37h ; '7'
.text:0040F6C1
.text:0040F6C1 loc_40F6C1:                             ; CODE XREF: _strtoull+2D4↓j
.text:0040F6C1                                         ; _strtoull+2DB↓j
.text:0040F6C1                 mov     ebp, eax
.text:0040F6C3                 jmp     loc_40F58F
.text:0040F6C8 ; ---------------------------------------------------------------------------
.text:0040F6C8
.text:0040F6C8 loc_40F6C8:                             ; CODE XREF: _strtoull+299↑j
.text:0040F6C8                 mov     ecx, ds:__mb_cur_max
.text:0040F6CE                 movsx   edx, dl
.text:0040F6D1                 cmp     dword ptr [ecx], 1
.text:0040F6D4                 jz      short loc_40F6FD
.text:0040F6D6                 mov     [esp+3Ch+Type], 2 ; Type
.text:0040F6DE                 mov     [esp+3Ch+C], edx ; C
.text:0040F6E1                 call    _isctype
.text:0040F6E6
.text:0040F6E6 loc_40F6E6:                             ; CODE XREF: _strtoull+2EF↓j
.text:0040F6E6                 test    eax, eax
.text:0040F6E8                 jz      short loc_40F6F6
.text:0040F6EA                 mov     edx, [esp+3Ch+String]
.text:0040F6EE                 movsx   eax, byte ptr [edx]
.text:0040F6F1                 sub     eax, 57h ; 'W'
.text:0040F6F4                 jmp     short loc_40F6C1
.text:0040F6F6 ; ---------------------------------------------------------------------------
.text:0040F6F6
.text:0040F6F6 loc_40F6F6:                             ; CODE XREF: _strtoull+2C8↑j
.text:0040F6F6                 mov     eax, 0FFFFFFFFh
.text:0040F6FB                 jmp     short loc_40F6C1
.text:0040F6FD ; ---------------------------------------------------------------------------
.text:0040F6FD
.text:0040F6FD loc_40F6FD:                             ; CODE XREF: _strtoull+2B4↑j
.text:0040F6FD                 mov     edi, ds:_pctype
.text:0040F703                 mov     ebx, [edi]
.text:0040F705                 movzx   esi, word ptr [ebx+edx*2]
.text:0040F709                 and     esi, 2
.text:0040F70C                 movzx   eax, si
.text:0040F70F                 jmp     short loc_40F6E6
.text:0040F711 ; ---------------------------------------------------------------------------
.text:0040F711
.text:0040F711 loc_40F711:                             ; CODE XREF: _strtoull+27D↑j
.text:0040F711                 mov     edi, ds:_pctype
.text:0040F717                 mov     ebx, [edi]
.text:0040F719                 movzx   esi, word ptr [ebx+ecx*2]
.text:0040F71D                 and     esi, 1
.text:0040F720                 movzx   eax, si
.text:0040F723                 jmp     short loc_40F6B7
.text:0040F725 ; ---------------------------------------------------------------------------
.text:0040F725
.text:0040F725 loc_40F725:                             ; CODE XREF: _strtoull+144↑j
.text:0040F725                 mov     ebx, ds:_pctype
.text:0040F72B                 mov     esi, [ebx]
.text:0040F72D                 movzx   edi, word ptr [esi+ecx*2]
.text:0040F731                 and     edi, 4
.text:0040F734                 movzx   eax, di
.text:0040F737                 jmp     loc_40F581
.text:0040F73C ; ---------------------------------------------------------------------------
.text:0040F73C
.text:0040F73C loc_40F73C:                             ; CODE XREF: _strtoull+ED↑j
.text:0040F73C                 mov     ebx, ds:__mb_cur_max
.text:0040F742                 movsx   ecx, dl
.text:0040F745                 cmp     dword ptr [ebx], 1
.text:0040F748                 jz      short loc_40F7BF
.text:0040F74A                 mov     [esp+3Ch+C], ecx ; C
.text:0040F74D                 mov     [esp+3Ch+Type], 1 ; Type
.text:0040F755                 call    _isctype
.text:0040F75A                 mov     ecx, [esp+3Ch+String]
.text:0040F75E                 movzx   edx, byte ptr [ecx]
.text:0040F761
.text:0040F761 loc_40F761:                             ; CODE XREF: _strtoull+3B1↓j
.text:0040F761                 test    eax, eax
.text:0040F763                 jz      short loc_40F770
.text:0040F765                 movsx   eax, dl
.text:0040F768                 sub     eax, 37h ; '7'
.text:0040F76B                 jmp     loc_40F519
.text:0040F770 ; ---------------------------------------------------------------------------
.text:0040F770
.text:0040F770 loc_40F770:                             ; CODE XREF: _strtoull+343↑j
.text:0040F770                 mov     ebx, ds:__mb_cur_max
.text:0040F776                 movsx   edx, dl
.text:0040F779                 cmp     dword ptr [ebx], 1
.text:0040F77C                 jz      short loc_40F7AB
.text:0040F77E                 mov     [esp+3Ch+Type], 2 ; Type
.text:0040F786                 mov     [esp+3Ch+C], edx ; C
.text:0040F789                 call    _isctype
.text:0040F78E
.text:0040F78E loc_40F78E:                             ; CODE XREF: _strtoull+39D↓j
.text:0040F78E                 test    eax, eax
.text:0040F790                 jz      short loc_40F7A1
.text:0040F792                 mov     ecx, [esp+3Ch+String]
.text:0040F796                 movsx   eax, byte ptr [ecx]
.text:0040F799                 sub     eax, 57h ; 'W'
.text:0040F79C                 jmp     loc_40F519
.text:0040F7A1 ; ---------------------------------------------------------------------------
.text:0040F7A1
.text:0040F7A1 loc_40F7A1:                             ; CODE XREF: _strtoull+370↑j
.text:0040F7A1                 mov     eax, 0FFFFFFFFh
.text:0040F7A6                 jmp     loc_40F519
.text:0040F7AB ; ---------------------------------------------------------------------------
.text:0040F7AB
.text:0040F7AB loc_40F7AB:                             ; CODE XREF: _strtoull+35C↑j
.text:0040F7AB                 mov     esi, ds:_pctype
.text:0040F7B1                 mov     edi, [esi]
.text:0040F7B3                 movzx   ebp, word ptr [edi+edx*2]
.text:0040F7B7                 and     ebp, 2
.text:0040F7BA                 movzx   eax, bp
.text:0040F7BD                 jmp     short loc_40F78E
.text:0040F7BF ; ---------------------------------------------------------------------------
.text:0040F7BF
.text:0040F7BF loc_40F7BF:                             ; CODE XREF: _strtoull+328↑j
.text:0040F7BF                 mov     esi, ds:_pctype
.text:0040F7C5                 mov     edi, [esi]
.text:0040F7C7                 movzx   ebp, word ptr [edi+ecx*2]
.text:0040F7CB                 and     ebp, 1
.text:0040F7CE                 movzx   eax, bp
.text:0040F7D1                 jmp     short loc_40F761
.text:0040F7D3 ; ---------------------------------------------------------------------------
.text:0040F7D3
.text:0040F7D3 loc_40F7D3:                             ; CODE XREF: _strtoull+CE↑j
.text:0040F7D3                 mov     edi, ds:_pctype
.text:0040F7D9                 mov     ebp, [edi]
.text:0040F7DB                 movzx   ecx, word ptr [ebp+ebx*2+0]
.text:0040F7E0                 and     ecx, 4
.text:0040F7E3                 movzx   eax, cx
.text:0040F7E6                 jmp     loc_40F50B
.text:0040F7EB ; ---------------------------------------------------------------------------
.text:0040F7EB
.text:0040F7EB loc_40F7EB:                             ; CODE XREF: _strtoull+C2↑j
.text:0040F7EB                 cmp     dl, 30h ; '0'
.text:0040F7EE                 jnz     loc_40F4E8
.text:0040F7F4                 mov     esi, [esp+3Ch+String]
.text:0040F7F8                 movzx   eax, byte ptr [esi+1]
.text:0040F7FC                 cmp     al, 58h ; 'X'
.text:0040F7FE                 jz      short loc_40F808
.text:0040F800                 cmp     al, 78h ; 'x'
.text:0040F802                 jnz     loc_40F4E8
.text:0040F808
.text:0040F808 loc_40F808:                             ; CODE XREF: _strtoull+3DE↑j
.text:0040F808                 add     [esp+3Ch+String], 2
.text:0040F80D                 mov     ebx, [esp+3Ch+String]
.text:0040F811                 movzx   edx, byte ptr [ebx]
.text:0040F814                 jmp     loc_40F4E8
.text:0040F819 ; ---------------------------------------------------------------------------
.text:0040F819
.text:0040F819 loc_40F819:                             ; CODE XREF: _strtoull+AF↑j
.text:0040F819                 mov     edi, [esp+3Ch+String]
.text:0040F81D                 movzx   eax, byte ptr [edi+1]
.text:0040F821                 cmp     al, 58h ; 'X'
.text:0040F823                 jz      short loc_40F835
.text:0040F825                 mov     [esp+3Ch+Radix], 8
.text:0040F82D                 cmp     al, 78h ; 'x'
.text:0040F82F                 jnz     loc_40F4DD
.text:0040F835
.text:0040F835 loc_40F835:                             ; CODE XREF: _strtoull+403↑j
.text:0040F835                 mov     [esp+3Ch+Radix], 10h
.text:0040F83D                 jmp     loc_40F4DD
.text:0040F842 ; ---------------------------------------------------------------------------
.text:0040F842
.text:0040F842 loc_40F842:                             ; CODE XREF: _strtoull+95↑j
.text:0040F842                                         ; _strtoull+9E↑j
.text:0040F842                 inc     [esp+3Ch+String]
.text:0040F846                 mov     eax, [esp+3Ch+String]
.text:0040F84A                 movzx   edx, byte ptr [eax]
.text:0040F84D                 jmp     loc_40F4C4
.text:0040F852 ; ---------------------------------------------------------------------------
.text:0040F852
.text:0040F852 loc_40F852:                             ; CODE XREF: _strtoull+5A↑j
.text:0040F852                 mov     ebp, ds:_pctype
.text:0040F858                 mov     edi, [ebp+0]
.text:0040F85B                 movzx   ebx, word ptr [edi+edx*2]
.text:0040F85F                 and     ebx, 8
.text:0040F862                 movzx   eax, bx
.text:0040F865                 jmp     loc_40F496
.text:0040F865 _strtoull       endp
.text:0040F865
.text:0040F865 ; ---------------------------------------------------------------------------
.text:0040F86A                 align 10h
.text:0040F870                 jmp     ds:__set_app_type
.text:0040F870 ; ---------------------------------------------------------------------------
.text:0040F876                 align 10h
.text:0040F880
.text:0040F880 ; =============== S U B R O U T I N E =======================================
.text:0040F880
.text:0040F880 ; Attributes: thunk
.text:0040F880
.text:0040F880 ; void __cdecl cexit()
.text:0040F880 _cexit          proc near               ; CODE XREF: .text:0040116C↑p
.text:0040F880                 jmp     ds:__imp__cexit
.text:0040F880 _cexit          endp
.text:0040F880
.text:0040F880 ; ---------------------------------------------------------------------------
.text:0040F886                 align 10h
.text:0040F890
.text:0040F890 ; =============== S U B R O U T I N E =======================================
.text:0040F890
.text:0040F890 ; Attributes: thunk
.text:0040F890
.text:0040F890 ; char ***__cdecl _p__environ()
.text:0040F890 __p__environ    proc near               ; CODE XREF: sub_401080+C7↑p
.text:0040F890                 jmp     ds:__imp___p__environ
.text:0040F890 __p__environ    endp
.text:0040F890
.text:0040F890 ; ---------------------------------------------------------------------------
.text:0040F896                 align 10h
.text:0040F8A0
.text:0040F8A0 ; =============== S U B R O U T I N E =======================================
.text:0040F8A0
.text:0040F8A0 ; Attributes: thunk
.text:0040F8A0
.text:0040F8A0 ; _crt_signal_t __cdecl signal(int Signal, _crt_signal_t Function)
.text:0040F8A0 signal          proc near               ; CODE XREF: TopLevelExceptionFilter+4D↑p
.text:0040F8A0                                         ; TopLevelExceptionFilter+88↑p ...
.text:0040F8A0
.text:0040F8A0 Signal          = dword ptr  4
.text:0040F8A0 Function        = dword ptr  8
.text:0040F8A0
.text:0040F8A0                 jmp     ds:__imp_signal
.text:0040F8A0 signal          endp
.text:0040F8A0
.text:0040F8A0 ; ---------------------------------------------------------------------------
.text:0040F8A6                 align 10h
.text:0040F8B0
.text:0040F8B0 ; =============== S U B R O U T I N E =======================================
.text:0040F8B0
.text:0040F8B0 ; Attributes: thunk
.text:0040F8B0
.text:0040F8B0 ; int *__cdecl _p__fmode()
.text:0040F8B0 __p__fmode      proc near               ; CODE XREF: sub_401080:loc_401135↑p
.text:0040F8B0                 jmp     ds:__imp___p__fmode
.text:0040F8B0 __p__fmode      endp
.text:0040F8B0
.text:0040F8B0 ; ---------------------------------------------------------------------------
.text:0040F8B6                 align 10h
.text:0040F8C0
.text:0040F8C0 ; =============== S U B R O U T I N E =======================================
.text:0040F8C0
.text:0040F8C0 ; Attributes: thunk
.text:0040F8C0
.text:0040F8C0 ; int __cdecl setmode(int FileHandle, int Mode)
.text:0040F8C0 _setmode        proc near               ; CODE XREF: sub_401080+70↑p
.text:0040F8C0                                         ; sub_401080+90↑p ...
.text:0040F8C0
.text:0040F8C0 FileHandle      = dword ptr  4
.text:0040F8C0 Mode            = dword ptr  8
.text:0040F8C0
.text:0040F8C0                 jmp     ds:__imp__setmode
.text:0040F8C0 _setmode        endp
.text:0040F8C0
.text:0040F8C0 ; ---------------------------------------------------------------------------
.text:0040F8C6                 align 10h
.text:0040F8D0
.text:0040F8D0 ; =============== S U B R O U T I N E =======================================
.text:0040F8D0
.text:0040F8D0 ; Attributes: thunk
.text:0040F8D0
.text:0040F8D0 __getmainargs   proc near               ; CODE XREF: sub_401080+49↑p
.text:0040F8D0                 jmp     ds:__imp___getmainargs
.text:0040F8D0 __getmainargs   endp
.text:0040F8D0
.text:0040F8D0 ; ---------------------------------------------------------------------------
.text:0040F8D6                 align 10h
.text:0040F8E0
.text:0040F8E0 ; =============== S U B R O U T I N E =======================================
.text:0040F8E0
.text:0040F8E0 ; Attributes: noreturn thunk
.text:0040F8E0
.text:0040F8E0 ; void __cdecl __noreturn abort()
.text:0040F8E0 abort           proc near               ; CODE XREF: sub_401A30:loc_40223F↑p
.text:0040F8E0                                         ; sub_4044C0:loc_40455C↑p ...
.text:0040F8E0                 jmp     ds:__imp_abort
.text:0040F8E0 abort           endp
.text:0040F8E0
.text:0040F8E0 ; ---------------------------------------------------------------------------
.text:0040F8E6                 align 10h
.text:0040F8F0
.text:0040F8F0 ; =============== S U B R O U T I N E =======================================
.text:0040F8F0
.text:0040F8F0 ; Attributes: thunk
.text:0040F8F0
.text:0040F8F0 ; char *__cdecl setlocale(int Category, const char *Locale)
.text:0040F8F0 setlocale       proc near               ; CODE XREF: sub_401A30+50↑p
.text:0040F8F0
.text:0040F8F0 Category        = dword ptr  4
.text:0040F8F0 Locale          = dword ptr  8
.text:0040F8F0
.text:0040F8F0                 jmp     ds:__imp_setlocale
.text:0040F8F0 setlocale       endp
.text:0040F8F0
.text:0040F8F0 ; ---------------------------------------------------------------------------
.text:0040F8F6                 align 10h
.text:0040F900
.text:0040F900 ; =============== S U B R O U T I N E =======================================
.text:0040F900
.text:0040F900 ; Attributes: thunk
.text:0040F900
.text:0040F900 ; void *__cdecl memmove(void *, const void *Src, size_t Size)
.text:0040F900 memmove         proc near               ; CODE XREF: sub_402CC0+13B↑p
.text:0040F900
.text:0040F900 Src             = dword ptr  8
.text:0040F900 Size            = dword ptr  0Ch
.text:0040F900
.text:0040F900                 jmp     ds:__imp_memmove
.text:0040F900 memmove         endp
.text:0040F900
.text:0040F900 ; ---------------------------------------------------------------------------
.text:0040F906                 align 10h
.text:0040F910
.text:0040F910 ; =============== S U B R O U T I N E =======================================
.text:0040F910
.text:0040F910 ; Attributes: thunk
.text:0040F910
.text:0040F910 ; void *__cdecl memchr(const void *Buf, int Val, size_t MaxCount)
.text:0040F910 memchr          proc near               ; CODE XREF: sub_402950+74↑p
.text:0040F910
.text:0040F910 Buf             = dword ptr  4
.text:0040F910 Val             = dword ptr  8
.text:0040F910 MaxCount        = dword ptr  0Ch
.text:0040F910
.text:0040F910                 jmp     ds:__imp_memchr
.text:0040F910 memchr          endp
.text:0040F910
.text:0040F910 ; ---------------------------------------------------------------------------
.text:0040F916                 align 10h
.text:0040F920
.text:0040F920 ; =============== S U B R O U T I N E =======================================
.text:0040F920
.text:0040F920 ; Attributes: thunk
.text:0040F920
.text:0040F920 ; int *__cdecl errno()
.text:0040F920 _errno          proc near               ; CODE XREF: sub_401A30+863↑p
.text:0040F920                                         ; sub_401A30:loc_4022C1↑p ...
.text:0040F920                 jmp     ds:__imp__errno
.text:0040F920 _errno          endp
.text:0040F920
.text:0040F920 ; ---------------------------------------------------------------------------
.text:0040F926                 align 10h
.text:0040F930
.text:0040F930 ; =============== S U B R O U T I N E =======================================
.text:0040F930
.text:0040F930 ; Attributes: thunk
.text:0040F930
.text:0040F930 ; void *__cdecl memcpy(void *, const void *Src, size_t Size)
.text:0040F930 memcpy          proc near               ; CODE XREF: sub_402F20+E2↑p
.text:0040F930                                         ; sub_405E50+89↑p ...
.text:0040F930
.text:0040F930 Src             = dword ptr  8
.text:0040F930 Size            = dword ptr  0Ch
.text:0040F930
.text:0040F930                 jmp     ds:__imp_memcpy
.text:0040F930 memcpy          endp
.text:0040F930
.text:0040F930 ; ---------------------------------------------------------------------------
.text:0040F936                 align 10h
.text:0040F940
.text:0040F940 ; =============== S U B R O U T I N E =======================================
.text:0040F940
.text:0040F940 ; Attributes: thunk
.text:0040F940
.text:0040F940 ; void __cdecl free(void *Block)
.text:0040F940 free            proc near               ; CODE XREF: sub_402CC0+125↑j
.text:0040F940                                         ; sub_402F20+174↑p ...
.text:0040F940
.text:0040F940 Block           = dword ptr  4
.text:0040F940
.text:0040F940                 jmp     ds:__imp_free
.text:0040F940 free            endp
.text:0040F940
.text:0040F940 ; ---------------------------------------------------------------------------
.text:0040F946                 align 10h
.text:0040F950
.text:0040F950 ; =============== S U B R O U T I N E =======================================
.text:0040F950
.text:0040F950 ; Attributes: thunk
.text:0040F950
.text:0040F950 ; void *__cdecl memset(void *, int Val, size_t Size)
.text:0040F950 memset          proc near               ; CODE XREF: sub_402F20+107↑p
.text:0040F950                                         ; .text:00406086↑p
.text:0040F950
.text:0040F950 Val             = dword ptr  8
.text:0040F950 Size            = dword ptr  0Ch
.text:0040F950
.text:0040F950                 jmp     ds:__imp_memset
.text:0040F950 memset          endp
.text:0040F950
.text:0040F950 ; ---------------------------------------------------------------------------
.text:0040F956                 align 10h
.text:0040F960
.text:0040F960 ; =============== S U B R O U T I N E =======================================
.text:0040F960
.text:0040F960 ; Attributes: thunk
.text:0040F960
.text:0040F960 ; size_t __cdecl strlen(const char *Str)
.text:0040F960 strlen          proc near               ; CODE XREF: sub_402F20+9F↑p
.text:0040F960                                         ; sub_403260+379↑p ...
.text:0040F960
.text:0040F960 Str             = dword ptr  4
.text:0040F960
.text:0040F960                 jmp     ds:__imp_strlen
.text:0040F960 strlen          endp
.text:0040F960
.text:0040F960 ; ---------------------------------------------------------------------------
.text:0040F966                 align 10h
.text:0040F970
.text:0040F970 ; =============== S U B R O U T I N E =======================================
.text:0040F970
.text:0040F970 ; Attributes: noreturn thunk
.text:0040F970
.text:0040F970 ; void __cdecl __noreturn exit(int Code)
.text:0040F970 exit            proc near               ; CODE XREF: sub_401A30:loc_401D26↑p
.text:0040F970                                         ; .text:004024AB↑p ...
.text:0040F970
.text:0040F970 Code            = dword ptr  4
.text:0040F970
.text:0040F970                 jmp     ds:__imp_exit
.text:0040F970 exit            endp
.text:0040F970
.text:0040F970 ; ---------------------------------------------------------------------------
.text:0040F976                 align 10h
.text:0040F980
.text:0040F980 ; =============== S U B R O U T I N E =======================================
.text:0040F980
.text:0040F980 ; Attributes: thunk
.text:0040F980
.text:0040F980 ; int __cdecl fputs(const char *Buffer, FILE *Stream)
.text:0040F980 fputs           proc near               ; CODE XREF: sub_401A30+388↑p
.text:0040F980                                         ; sub_401A30+3AA↑p ...
.text:0040F980
.text:0040F980 Buffer          = dword ptr  4
.text:0040F980 Stream          = dword ptr  8
.text:0040F980
.text:0040F980                 jmp     ds:__imp_fputs
.text:0040F980 fputs           endp
.text:0040F980
.text:0040F980 ; ---------------------------------------------------------------------------
.text:0040F986                 align 10h
.text:0040F990
.text:0040F990 ; =============== S U B R O U T I N E =======================================
.text:0040F990
.text:0040F990 ; Attributes: thunk
.text:0040F990
.text:0040F990 ; int printf(const char *const Format, ...)
.text:0040F990 printf          proc near               ; CODE XREF: sub_401A30+366↑p
.text:0040F990                                         ; sub_401A30+479↑p ...
.text:0040F990
.text:0040F990 Format          = dword ptr  4
.text:0040F990
.text:0040F990                 jmp     ds:__imp_printf
.text:0040F990 printf          endp
.text:0040F990
.text:0040F990 ; ---------------------------------------------------------------------------
.text:0040F996                 align 10h
.text:0040F9A0
.text:0040F9A0 ; =============== S U B R O U T I N E =======================================
.text:0040F9A0
.text:0040F9A0 ; Attributes: thunk
.text:0040F9A0
.text:0040F9A0 ; int fprintf(FILE *const Stream, const char *const Format, ...)
.text:0040F9A0 fprintf         proc near               ; CODE XREF: sub_401A30+2EA↑p
.text:0040F9A0                                         ; sub_401A30+3D4↑p ...
.text:0040F9A0
.text:0040F9A0 Stream          = dword ptr  4
.text:0040F9A0 Format          = dword ptr  8
.text:0040F9A0
.text:0040F9A0                 jmp     ds:__imp_fprintf
.text:0040F9A0 fprintf         endp
.text:0040F9A0
.text:0040F9A0 ; ---------------------------------------------------------------------------
.text:0040F9A6                 align 10h
.text:0040F9B0
.text:0040F9B0 ; =============== S U B R O U T I N E =======================================
.text:0040F9B0
.text:0040F9B0 ; Attributes: thunk
.text:0040F9B0
.text:0040F9B0 ; int __cdecl strncmp(const char *Str1, const char *Str2, size_t MaxCount)
.text:0040F9B0 strncmp         proc near               ; CODE XREF: sub_403260+30F↑p
.text:0040F9B0                                         ; sub_403260+769↑p
.text:0040F9B0
.text:0040F9B0 Str1            = dword ptr  4
.text:0040F9B0 Str2            = dword ptr  8
.text:0040F9B0 MaxCount        = dword ptr  0Ch
.text:0040F9B0
.text:0040F9B0                 jmp     ds:__imp_strncmp
.text:0040F9B0 strncmp         endp
.text:0040F9B0
.text:0040F9B0 ; ---------------------------------------------------------------------------
.text:0040F9B6                 align 10h
.text:0040F9C0
.text:0040F9C0 ; =============== S U B R O U T I N E =======================================
.text:0040F9C0
.text:0040F9C0 ; Attributes: thunk
.text:0040F9C0
.text:0040F9C0 ; char *__cdecl getenv(const char *VarName)
.text:0040F9C0 getenv          proc near               ; CODE XREF: sub_403260+C27↑p
.text:0040F9C0                                         ; sub_404170+13↑p ...
.text:0040F9C0
.text:0040F9C0 VarName         = dword ptr  4
.text:0040F9C0
.text:0040F9C0                 jmp     ds:__imp_getenv
.text:0040F9C0 getenv          endp
.text:0040F9C0
.text:0040F9C0 ; ---------------------------------------------------------------------------
.text:0040F9C6                 align 10h
.text:0040F9D0
.text:0040F9D0 ; =============== S U B R O U T I N E =======================================
.text:0040F9D0
.text:0040F9D0 ; Attributes: thunk
.text:0040F9D0
.text:0040F9D0 ; char *__cdecl strchr(const char *Str, int Val)
.text:0040F9D0 strchr          proc near               ; CODE XREF: sub_403260+539↑p
.text:0040F9D0                                         ; sub_403260+60A↑p ...
.text:0040F9D0
.text:0040F9D0 Str             = dword ptr  4
.text:0040F9D0 Val             = dword ptr  8
.text:0040F9D0
.text:0040F9D0                 jmp     ds:__imp_strchr
.text:0040F9D0 strchr          endp
.text:0040F9D0
.text:0040F9D0 ; ---------------------------------------------------------------------------
.text:0040F9D6                 align 10h
.text:0040F9E0
.text:0040F9E0 ; =============== S U B R O U T I N E =======================================
.text:0040F9E0
.text:0040F9E0 ; Attributes: thunk
.text:0040F9E0
.text:0040F9E0 ; int __cdecl strtol(const char *String, char **EndPtr, int Radix)
.text:0040F9E0 strtol          proc near               ; CODE XREF: sub_404170+43↑p
.text:0040F9E0
.text:0040F9E0 String          = dword ptr  4
.text:0040F9E0 EndPtr          = dword ptr  8
.text:0040F9E0 Radix           = dword ptr  0Ch
.text:0040F9E0
.text:0040F9E0                 jmp     ds:__imp_strtol
.text:0040F9E0 strtol          endp
.text:0040F9E0
.text:0040F9E0 ; ---------------------------------------------------------------------------
.text:0040F9E6                 align 10h
.text:0040F9F0
.text:0040F9F0 ; =============== S U B R O U T I N E =======================================
.text:0040F9F0
.text:0040F9F0 ; Attributes: thunk
.text:0040F9F0
.text:0040F9F0 ; int __cdecl vfprintf(FILE *const Stream, const char *const Format, va_list ArgList)
.text:0040F9F0 vfprintf        proc near               ; CODE XREF: sub_4044C0+C1↑p
.text:0040F9F0                                         ; sub_407720+49↑p ...
.text:0040F9F0
.text:0040F9F0 Stream          = dword ptr  4
.text:0040F9F0 Format          = dword ptr  8
.text:0040F9F0 ArgList         = dword ptr  0Ch
.text:0040F9F0
.text:0040F9F0                 jmp     ds:__imp_vfprintf
.text:0040F9F0 vfprintf        endp
.text:0040F9F0
.text:0040F9F0 ; ---------------------------------------------------------------------------
.text:0040F9F6                 align 10h
.text:0040FA00
.text:0040FA00 ; =============== S U B R O U T I N E =======================================
.text:0040FA00
.text:0040FA00 ; Attributes: thunk
.text:0040FA00
.text:0040FA00 ; int __cdecl flsbuf(int Ch, FILE *File)
.text:0040FA00 _flsbuf         proc near               ; CODE XREF: sub_4044C0+128↑p
.text:0040FA00                                         ; sub_4044C0+13A↑p ...
.text:0040FA00
.text:0040FA00 File            = dword ptr  8
.text:0040FA00
.text:0040FA00                 jmp     ds:__imp__flsbuf
.text:0040FA00 _flsbuf         endp
.text:0040FA00
.text:0040FA00 ; ---------------------------------------------------------------------------
.text:0040FA06                 align 10h
.text:0040FA10
.text:0040FA10 ; =============== S U B R O U T I N E =======================================
.text:0040FA10
.text:0040FA10 ; Attributes: noreturn thunk
.text:0040FA10
.text:0040FA10 _assert         proc near               ; CODE XREF: sub_4047B0+C88↑p
.text:0040FA10                                         ; sub_4054B0+553↑p ...
.text:0040FA10                 jmp     ds:__imp__assert
.text:0040FA10 _assert         endp
.text:0040FA10
.text:0040FA10 ; ---------------------------------------------------------------------------
.text:0040FA16                 align 10h
.text:0040FA20
.text:0040FA20 ; =============== S U B R O U T I N E =======================================
.text:0040FA20
.text:0040FA20 ; Attributes: thunk
.text:0040FA20
.text:0040FA20 ; int __cdecl isctype(int C, int Type)
.text:0040FA20 _isctype        proc near               ; CODE XREF: sub_4047B0+72↑p
.text:0040FA20                                         ; sub_4054B0+5F↑p ...
.text:0040FA20
.text:0040FA20 C               = dword ptr  4
.text:0040FA20 Type            = dword ptr  8
.text:0040FA20
.text:0040FA20                 jmp     ds:__imp__isctype
.text:0040FA20 _isctype        endp
.text:0040FA20
.text:0040FA20 ; ---------------------------------------------------------------------------
.text:0040FA26                 align 10h
.text:0040FA30
.text:0040FA30 ; =============== S U B R O U T I N E =======================================
.text:0040FA30
.text:0040FA30 ; Attributes: thunk
.text:0040FA30
.text:0040FA30 ; unsigned int __cdecl strtoul(const char *String, char **EndPtr, int Radix)
.text:0040FA30 strtoul         proc near               ; CODE XREF: sub_4054B0+94↑p
.text:0040FA30
.text:0040FA30 String          = dword ptr  4
.text:0040FA30 EndPtr          = dword ptr  8
.text:0040FA30 Radix           = dword ptr  0Ch
.text:0040FA30
.text:0040FA30                 jmp     ds:__imp_strtoul
.text:0040FA30 strtoul         endp
.text:0040FA30
.text:0040FA30 ; ---------------------------------------------------------------------------
.text:0040FA36                 align 10h
.text:0040FA40
.text:0040FA40 ; =============== S U B R O U T I N E =======================================
.text:0040FA40
.text:0040FA40 ; Attributes: thunk
.text:0040FA40
.text:0040FA40 ; int __cdecl fclose(FILE *Stream)
.text:0040FA40 fclose          proc near               ; CODE XREF: sub_405B90+27↑p
.text:0040FA40                                         ; .text:0040CA3E↑p
.text:0040FA40
.text:0040FA40 Stream          = dword ptr  4
.text:0040FA40
.text:0040FA40                 jmp     ds:__imp_fclose
.text:0040FA40 fclose          endp
.text:0040FA40
.text:0040FA40 ; ---------------------------------------------------------------------------
.text:0040FA46                 align 10h
.text:0040FA50
.text:0040FA50 ; =============== S U B R O U T I N E =======================================
.text:0040FA50
.text:0040FA50 ; Attributes: thunk
.text:0040FA50
.text:0040FA50 ; void *__cdecl calloc(size_t Count, size_t Size)
.text:0040FA50 calloc          proc near               ; CODE XREF: sub_4060A0+23↑p
.text:0040FA50                                         ; sub_40A090+AC↑p
.text:0040FA50
.text:0040FA50 Count           = dword ptr  4
.text:0040FA50 Size            = dword ptr  8
.text:0040FA50
.text:0040FA50                 jmp     ds:__imp_calloc
.text:0040FA50 calloc          endp
.text:0040FA50
.text:0040FA50 ; ---------------------------------------------------------------------------
.text:0040FA56                 align 10h
.text:0040FA60
.text:0040FA60 ; =============== S U B R O U T I N E =======================================
.text:0040FA60
.text:0040FA60 ; Attributes: thunk
.text:0040FA60
.text:0040FA60 ; void *__cdecl realloc(void *Block, size_t Size)
.text:0040FA60 realloc         proc near               ; CODE XREF: .text:00405FC0↑p
.text:0040FA60                                         ; sub_405FF0+16↑p ...
.text:0040FA60
.text:0040FA60 Block           = dword ptr  4
.text:0040FA60 Size            = dword ptr  8
.text:0040FA60
.text:0040FA60                 jmp     ds:__imp_realloc
.text:0040FA60 realloc         endp
.text:0040FA60
.text:0040FA60 ; ---------------------------------------------------------------------------
.text:0040FA66                 align 10h
.text:0040FA70
.text:0040FA70 ; =============== S U B R O U T I N E =======================================
.text:0040FA70
.text:0040FA70 ; Attributes: thunk
.text:0040FA70
.text:0040FA70 ; void *__cdecl malloc(size_t Size)
.text:0040FA70 malloc          proc near               ; CODE XREF: .text:00405F44↑p
.text:0040FA70                                         ; sub_405F60+E↑p ...
.text:0040FA70
.text:0040FA70 Size            = dword ptr  4
.text:0040FA70
.text:0040FA70                 jmp     ds:__imp_malloc
.text:0040FA70 malloc          endp
.text:0040FA70
.text:0040FA70 ; ---------------------------------------------------------------------------
.text:0040FA76                 align 10h
.text:0040FA80
.text:0040FA80 ; =============== S U B R O U T I N E =======================================
.text:0040FA80
.text:0040FA80 ; Attributes: thunk
.text:0040FA80
.text:0040FA80 ; int __cdecl iswctype(wint_t C, wctype_t Type)
.text:0040FA80 iswctype        proc near               ; CODE XREF: sub_4062E0+78B↑p
.text:0040FA80
.text:0040FA80 C               = word ptr  4
.text:0040FA80 Type            = word ptr  8
.text:0040FA80
.text:0040FA80                 jmp     ds:__imp_iswctype
.text:0040FA80 iswctype        endp
.text:0040FA80
.text:0040FA80 ; ---------------------------------------------------------------------------
.text:0040FA86                 align 10h
.text:0040FA90
.text:0040FA90 ; =============== S U B R O U T I N E =======================================
.text:0040FA90
.text:0040FA90 ; Attributes: thunk
.text:0040FA90
.text:0040FA90 ; int __cdecl strcmp(const char *Str1, const char *Str2)
.text:0040FA90 strcmp          proc near               ; CODE XREF: sub_407824+180↑p
.text:0040FA90                                         ; .text:0040BE3B↑p
.text:0040FA90
.text:0040FA90 Str1            = dword ptr  4
.text:0040FA90 Str2            = dword ptr  8
.text:0040FA90
.text:0040FA90                 jmp     ds:__imp_strcmp
.text:0040FA90 strcmp          endp
.text:0040FA90
.text:0040FA90 ; ---------------------------------------------------------------------------
.text:0040FA96                 align 10h
.text:0040FAA0
.text:0040FAA0 ; =============== S U B R O U T I N E =======================================
.text:0040FAA0
.text:0040FAA0 ; Attributes: thunk
.text:0040FAA0
.text:0040FAA0 ; int __cdecl fflush(FILE *Stream)
.text:0040FAA0 fflush          proc near               ; CODE XREF: sub_407720+19↑p
.text:0040FAA0                                         ; sub_407720+81↑p ...
.text:0040FAA0
.text:0040FAA0 Stream          = dword ptr  4
.text:0040FAA0
.text:0040FAA0                 jmp     ds:__imp_fflush
.text:0040FAA0 fflush          endp
.text:0040FAA0
.text:0040FAA0 ; ---------------------------------------------------------------------------
.text:0040FAA6                 align 10h
.text:0040FAB0
.text:0040FAB0 ; =============== S U B R O U T I N E =======================================
.text:0040FAB0
.text:0040FAB0 ; Attributes: thunk
.text:0040FAB0
.text:0040FAB0 ; char *__cdecl strerror(int ErrorMessage)
.text:0040FAB0 strerror        proc near               ; CODE XREF: sub_407720+A5↑p
.text:0040FAB0                                         ; sub_407824+10F↑p
.text:0040FAB0
.text:0040FAB0 ErrorMessage    = dword ptr  4
.text:0040FAB0
.text:0040FAB0                 jmp     ds:__imp_strerror
.text:0040FAB0 strerror        endp
.text:0040FAB0
.text:0040FAB0 ; ---------------------------------------------------------------------------
.text:0040FAB6                 align 10h
.text:0040FAC0
.text:0040FAC0 ; =============== S U B R O U T I N E =======================================
.text:0040FAC0
.text:0040FAC0 ; Attributes: thunk
.text:0040FAC0
.text:0040FAC0 ; char *__cdecl ctime(const __time32_t *const Time)
.text:0040FAC0 ctime           proc near               ; CODE XREF: .text:00407B8D↑p
.text:0040FAC0                                         ; .text:00407BAF↑p ...
.text:0040FAC0
.text:0040FAC0 Time            = dword ptr  4
.text:0040FAC0
.text:0040FAC0                 jmp     ds:__imp_ctime
.text:0040FAC0 ctime           endp
.text:0040FAC0
.text:0040FAC0 ; ---------------------------------------------------------------------------
.text:0040FAC6                 align 10h
.text:0040FAD0
.text:0040FAD0 ; =============== S U B R O U T I N E =======================================
.text:0040FAD0
.text:0040FAD0 ; Attributes: thunk
.text:0040FAD0
.text:0040FAD0 ; intptr_t __cdecl get_osfhandle(int FileHandle)
.text:0040FAD0 _get_osfhandle  proc near               ; CODE XREF: sub_407C30+3A↑p
.text:0040FAD0                                         ; sub_40CB60+15↑p
.text:0040FAD0
.text:0040FAD0 FileHandle      = dword ptr  4
.text:0040FAD0
.text:0040FAD0                 jmp     ds:__imp__get_osfhandle
.text:0040FAD0 _get_osfhandle  endp
.text:0040FAD0
.text:0040FAD0 ; ---------------------------------------------------------------------------
.text:0040FAD6                 align 10h
.text:0040FAE0
.text:0040FAE0 ; =============== S U B R O U T I N E =======================================
.text:0040FAE0
.text:0040FAE0 ; Attributes: thunk
.text:0040FAE0
.text:0040FAE0 ; char *__cdecl strcat(char *Destination, const char *Source)
.text:0040FAE0 strcat          proc near               ; CODE XREF: sub_407C30+2F8↑p
.text:0040FAE0                                         ; .text:0040B5F3↑p ...
.text:0040FAE0
.text:0040FAE0 Destination     = dword ptr  4
.text:0040FAE0 Source          = dword ptr  8
.text:0040FAE0
.text:0040FAE0                 jmp     ds:__imp_strcat
.text:0040FAE0 strcat          endp
.text:0040FAE0
.text:0040FAE0 ; ---------------------------------------------------------------------------
.text:0040FAE6                 align 10h
.text:0040FAF0
.text:0040FAF0 ; =============== S U B R O U T I N E =======================================
.text:0040FAF0
.text:0040FAF0 ; Attributes: thunk
.text:0040FAF0
.text:0040FAF0 ; char *__cdecl strcpy(char *Destination, const char *Source)
.text:0040FAF0 strcpy          proc near               ; CODE XREF: sub_407C30+2D3↑p
.text:0040FAF0                                         ; _win32_longpath+13C↑p ...
.text:0040FAF0
.text:0040FAF0 Destination     = dword ptr  4
.text:0040FAF0 Source          = dword ptr  8
.text:0040FAF0
.text:0040FAF0                 jmp     ds:__imp_strcpy
.text:0040FAF0 strcpy          endp
.text:0040FAF0
.text:0040FAF0 ; ---------------------------------------------------------------------------
.text:0040FAF6                 align 10h
.text:0040FB00
.text:0040FB00 ; =============== S U B R O U T I N E =======================================
.text:0040FB00
.text:0040FB00 ; Attributes: thunk
.text:0040FB00
.text:0040FB00 ; char *__cdecl strstr(const char *Str, const char *SubStr)
.text:0040FB00 strstr          proc near               ; CODE XREF: sub_4084E0+3BF↑p
.text:0040FB00                                         ; sub_4084E0+3DC↑p ...
.text:0040FB00
.text:0040FB00 Str             = dword ptr  4
.text:0040FB00 SubStr          = dword ptr  8
.text:0040FB00
.text:0040FB00                 jmp     ds:__imp_strstr
.text:0040FB00 strstr          endp
.text:0040FB00
.text:0040FB00 ; ---------------------------------------------------------------------------
.text:0040FB06                 align 10h
.text:0040FB10
.text:0040FB10 ; =============== S U B R O U T I N E =======================================
.text:0040FB10
.text:0040FB10 ; Attributes: thunk
.text:0040FB10
.text:0040FB10 ; char *__cdecl strrchr(const char *Str, int Ch)
.text:0040FB10 strrchr         proc near               ; CODE XREF: sub_4084E0+CB↑p
.text:0040FB10                                         ; sub_4084E0+3A7↑p ...
.text:0040FB10
.text:0040FB10 Str             = dword ptr  4
.text:0040FB10
.text:0040FB10                 jmp     ds:__imp_strrchr
.text:0040FB10 strrchr         endp
.text:0040FB10
.text:0040FB10 ; ---------------------------------------------------------------------------
.text:0040FB16                 align 10h
.text:0040FB20
.text:0040FB20 ; =============== S U B R O U T I N E =======================================
.text:0040FB20
.text:0040FB20 ; Attributes: thunk
.text:0040FB20
.text:0040FB20 ; int __cdecl isalpha(int C)
.text:0040FB20 isalpha         proc near               ; CODE XREF: _win32_longpath+25↑p
.text:0040FB20
.text:0040FB20 C               = dword ptr  4
.text:0040FB20
.text:0040FB20                 jmp     ds:__imp_isalpha
.text:0040FB20 isalpha         endp
.text:0040FB20
.text:0040FB20 ; ---------------------------------------------------------------------------
.text:0040FB26                 align 10h
.text:0040FB30
.text:0040FB30 ; =============== S U B R O U T I N E =======================================
.text:0040FB30
.text:0040FB30 ; Attributes: thunk
.text:0040FB30
.text:0040FB30 ; int __cdecl stricmp_0(const char *String1, const char *String2)
.text:0040FB30 _stricmp_0      proc near               ; CODE XREF: .text:00409F04↑p
.text:0040FB30
.text:0040FB30 String1         = dword ptr  4
.text:0040FB30 String2         = dword ptr  8
.text:0040FB30
.text:0040FB30                 jmp     ds:__imp__stricmp_0
.text:0040FB30 _stricmp_0      endp
.text:0040FB30
.text:0040FB30 ; ---------------------------------------------------------------------------
.text:0040FB36                 align 10h
.text:0040FB40
.text:0040FB40 ; =============== S U B R O U T I N E =======================================
.text:0040FB40
.text:0040FB40 ; Attributes: thunk
.text:0040FB40
.text:0040FB40 ; char *__cdecl strncpy(char *Destination, const char *Source, size_t Count)
.text:0040FB40 strncpy         proc near               ; CODE XREF: sub_40A090+BE↑p
.text:0040FB40                                         ; .text:0040A90A↑p ...
.text:0040FB40
.text:0040FB40 Destination     = dword ptr  4
.text:0040FB40 Source          = dword ptr  8
.text:0040FB40 Count           = dword ptr  0Ch
.text:0040FB40
.text:0040FB40                 jmp     ds:__imp_strncpy
.text:0040FB40 strncpy         endp
.text:0040FB40
.text:0040FB40 ; ---------------------------------------------------------------------------
.text:0040FB46                 align 10h
.text:0040FB50
.text:0040FB50 ; =============== S U B R O U T I N E =======================================
.text:0040FB50
.text:0040FB50 ; Attributes: thunk
.text:0040FB50
.text:0040FB50 ; int __cdecl toupper(int C)
.text:0040FB50 toupper         proc near               ; CODE XREF: sub_40A090+10E↑p
.text:0040FB50
.text:0040FB50 C               = dword ptr  4
.text:0040FB50
.text:0040FB50                 jmp     ds:__imp_toupper
.text:0040FB50 toupper         endp
.text:0040FB50
.text:0040FB50 ; ---------------------------------------------------------------------------
.text:0040FB56                 align 10h
.text:0040FB60
.text:0040FB60 ; =============== S U B R O U T I N E =======================================
.text:0040FB60
.text:0040FB60 ; Attributes: thunk
.text:0040FB60
.text:0040FB60 ; int sprintf(char *const Buffer, const char *const Format, ...)
.text:0040FB60 sprintf         proc near               ; CODE XREF: .text:0040B4FA↑p
.text:0040FB60                                         ; .text:0040B51B↑p ...
.text:0040FB60
.text:0040FB60 Buffer          = dword ptr  4
.text:0040FB60 Format          = dword ptr  8
.text:0040FB60
.text:0040FB60                 jmp     ds:__imp_sprintf
.text:0040FB60 sprintf         endp
.text:0040FB60
.text:0040FB60 ; ---------------------------------------------------------------------------
.text:0040FB66                 align 10h
.text:0040FB70
.text:0040FB70 ; =============== S U B R O U T I N E =======================================
.text:0040FB70
.text:0040FB70 ; Attributes: thunk
.text:0040FB70
.text:0040FB70 ; int sscanf(const char *const Buffer, const char *const Format, ...)
.text:0040FB70 sscanf          proc near               ; CODE XREF: .text:0040C07E↑p
.text:0040FB70
.text:0040FB70 Buffer          = dword ptr  4
.text:0040FB70 Format          = dword ptr  8
.text:0040FB70
.text:0040FB70                 jmp     ds:__imp_sscanf
.text:0040FB70 sscanf          endp
.text:0040FB70
.text:0040FB70 ; ---------------------------------------------------------------------------
.text:0040FB76                 align 10h
.text:0040FB80
.text:0040FB80 ; =============== S U B R O U T I N E =======================================
.text:0040FB80
.text:0040FB80 ; Attributes: thunk
.text:0040FB80
.text:0040FB80 ; size_t __cdecl strspn(const char *Str, const char *Control)
.text:0040FB80 strspn          proc near               ; CODE XREF: .text:0040BECA↑p
.text:0040FB80                                         ; .text:0040C0E4↑p ...
.text:0040FB80
.text:0040FB80 Str             = dword ptr  4
.text:0040FB80 Control         = dword ptr  8
.text:0040FB80
.text:0040FB80                 jmp     ds:__imp_strspn
.text:0040FB80 strspn          endp
.text:0040FB80
.text:0040FB80 ; ---------------------------------------------------------------------------
.text:0040FB86                 align 10h
.text:0040FB90
.text:0040FB90 ; =============== S U B R O U T I N E =======================================
.text:0040FB90
.text:0040FB90 ; Attributes: thunk
.text:0040FB90
.text:0040FB90 ; FILE *__cdecl fopen(const char *FileName, const char *Mode)
.text:0040FB90 fopen           proc near               ; CODE XREF: sub_40C97F+26↑p
.text:0040FB90                                         ; sub_40C97F+99↑p
.text:0040FB90
.text:0040FB90 FileName        = dword ptr  4
.text:0040FB90 Mode            = dword ptr  8
.text:0040FB90
.text:0040FB90                 jmp     ds:__imp_fopen
.text:0040FB90 fopen           endp
.text:0040FB90
.text:0040FB90 ; ---------------------------------------------------------------------------
.text:0040FB96                 align 10h
.text:0040FBA0
.text:0040FBA0 ; =============== S U B R O U T I N E =======================================
.text:0040FBA0
.text:0040FBA0 ; Attributes: thunk
.text:0040FBA0
.text:0040FBA0 ; __int64 __cdecl filelengthi64(int FileHandle)
.text:0040FBA0 _filelengthi64  proc near               ; CODE XREF: sub_40CB60+1F↑p
.text:0040FBA0
.text:0040FBA0 FileHandle      = dword ptr  4
.text:0040FBA0
.text:0040FBA0                 jmp     ds:__imp__filelengthi64
.text:0040FBA0 _filelengthi64  endp
.text:0040FBA0
.text:0040FBA0 ; ---------------------------------------------------------------------------
.text:0040FBA6                 align 10h
.text:0040FBB0
.text:0040FBB0 ; =============== S U B R O U T I N E =======================================
.text:0040FBB0
.text:0040FBB0 ; Attributes: thunk
.text:0040FBB0
.text:0040FBB0 ; char *__cdecl strpbrk(const char *Str, const char *Control)
.text:0040FBB0 strpbrk         proc near               ; CODE XREF: sub_40CBC0+87↑p
.text:0040FBB0
.text:0040FBB0 Str             = dword ptr  4
.text:0040FBB0 Control         = dword ptr  8
.text:0040FBB0
.text:0040FBB0                 jmp     ds:__imp_strpbrk
.text:0040FBB0 strpbrk         endp
.text:0040FBB0
.text:0040FBB0 ; ---------------------------------------------------------------------------
.text:0040FBB6                 align 10h
.text:0040FBC0
.text:0040FBC0 ; =============== S U B R O U T I N E =======================================
.text:0040FBC0
.text:0040FBC0 ; Attributes: thunk
.text:0040FBC0
.text:0040FBC0 ; FILE *__cdecl fdopen(int FileHandle, const char *Format)
.text:0040FBC0 _fdopen         proc near               ; CODE XREF: sub_40CC60+69↑p
.text:0040FBC0
.text:0040FBC0 FileHandle      = dword ptr  4
.text:0040FBC0 Format          = dword ptr  8
.text:0040FBC0
.text:0040FBC0                 jmp     ds:__imp__fdopen
.text:0040FBC0 _fdopen         endp
.text:0040FBC0
.text:0040FBC0 ; ---------------------------------------------------------------------------
.text:0040FBC6                 align 10h
.text:0040FBD0
.text:0040FBD0 ; =============== S U B R O U T I N E =======================================
.text:0040FBD0
.text:0040FBD0 ; Attributes: thunk
.text:0040FBD0
.text:0040FBD0 ; int __cdecl close_0(int FileHandle)
.text:0040FBD0 _close_0        proc near               ; CODE XREF: sub_40CC60+90↑p
.text:0040FBD0
.text:0040FBD0 FileHandle      = dword ptr  4
.text:0040FBD0
.text:0040FBD0                 jmp     ds:__imp__close_0
.text:0040FBD0 _close_0        endp
.text:0040FBD0
.text:0040FBD0 ; ---------------------------------------------------------------------------
.text:0040FBD6                 align 10h
.text:0040FBE0
.text:0040FBE0 ; =============== S U B R O U T I N E =======================================
.text:0040FBE0
.text:0040FBE0 ; Attributes: thunk
.text:0040FBE0
.text:0040FBE0 ; int open_0(const char *FileName, int OpenFlag, ...)
.text:0040FBE0 _open_0         proc near               ; CODE XREF: sub_40D0B0:loc_40D440↑p
.text:0040FBE0
.text:0040FBE0 FileName        = dword ptr  4
.text:0040FBE0 OpenFlag        = dword ptr  8
.text:0040FBE0
.text:0040FBE0                 jmp     ds:__imp__open_0
.text:0040FBE0 _open_0         endp
.text:0040FBE0
.text:0040FBE0 ; ---------------------------------------------------------------------------
.text:0040FBE6                 align 10h
.text:0040FBF0
.text:0040FBF0 ; =============== S U B R O U T I N E =======================================
.text:0040FBF0
.text:0040FBF0 ; Attributes: thunk
.text:0040FBF0
.text:0040FBF0 ; LPTOP_LEVEL_EXCEPTION_FILTER __stdcall SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.text:0040FBF0 SetUnhandledExceptionFilter proc near   ; CODE XREF: sub_401080+E↑p
.text:0040FBF0
.text:0040FBF0 lpTopLevelExceptionFilter= dword ptr  4
.text:0040FBF0
.text:0040FBF0                 jmp     ds:__imp_SetUnhandledExceptionFilter
.text:0040FBF0 SetUnhandledExceptionFilter endp
.text:0040FBF0
.text:0040FBF0 ; ---------------------------------------------------------------------------
.text:0040FBF6                 align 10h
.text:0040FC00
.text:0040FC00 ; =============== S U B R O U T I N E =======================================
.text:0040FC00
.text:0040FC00 ; Attributes: noreturn thunk
.text:0040FC00
.text:0040FC00 ; void __stdcall __noreturn ExitProcess(UINT uExitCode)
.text:0040FC00 ExitProcess     proc near               ; CODE XREF: .text:00401174↑p
.text:0040FC00
.text:0040FC00 uExitCode       = dword ptr  4
.text:0040FC00
.text:0040FC00                 jmp     ds:__imp_ExitProcess
.text:0040FC00 ExitProcess     endp
.text:0040FC00
.text:0040FC00 ; ---------------------------------------------------------------------------
.text:0040FC06                 align 10h
.text:0040FC10
.text:0040FC10 ; =============== S U B R O U T I N E =======================================
.text:0040FC10
.text:0040FC10 ; Attributes: thunk
.text:0040FC10
.text:0040FC10 ; HMODULE __stdcall GetModuleHandleA(LPCSTR lpModuleName)
.text:0040FC10 GetModuleHandleA proc near              ; CODE XREF: sub_407C30+108↑p
.text:0040FC10                                         ; sub_4084E0+329↑p ...
.text:0040FC10
.text:0040FC10 lpModuleName    = dword ptr  4
.text:0040FC10
.text:0040FC10                 jmp     ds:__imp_GetModuleHandleA
.text:0040FC10 GetModuleHandleA endp
.text:0040FC10
.text:0040FC10 ; ---------------------------------------------------------------------------
.text:0040FC16                 align 10h
.text:0040FC20
.text:0040FC20 ; =============== S U B R O U T I N E =======================================
.text:0040FC20
.text:0040FC20 ; Attributes: thunk
.text:0040FC20
.text:0040FC20 ; FARPROC __stdcall GetProcAddress(HMODULE hModule, LPCSTR lpProcName)
.text:0040FC20 GetProcAddress  proc near               ; CODE XREF: sub_407C30+123↑p
.text:0040FC20                                         ; sub_407C30+28E↑p ...
.text:0040FC20
.text:0040FC20 hModule         = dword ptr  4
.text:0040FC20 lpProcName      = dword ptr  8
.text:0040FC20
.text:0040FC20                 jmp     ds:__imp_GetProcAddress
.text:0040FC20 GetProcAddress  endp
.text:0040FC20
.text:0040FC20 ; ---------------------------------------------------------------------------
.text:0040FC26                 align 10h
.text:0040FC30
.text:0040FC30 ; =============== S U B R O U T I N E =======================================
.text:0040FC30
.text:0040FC30 ; Attributes: thunk
.text:0040FC30
.text:0040FC30 ; DWORD __stdcall GetFileAttributesA(LPCSTR lpFileName)
.text:0040FC30 GetFileAttributesA proc near            ; CODE XREF: sub_407C30+137↑p
.text:0040FC30                                         ; sub_40B200+62↑p
.text:0040FC30
.text:0040FC30 lpFileName      = dword ptr  4
.text:0040FC30
.text:0040FC30                 jmp     ds:__imp_GetFileAttributesA
.text:0040FC30 GetFileAttributesA endp
.text:0040FC30
.text:0040FC30 ; ---------------------------------------------------------------------------
.text:0040FC36                 align 10h
.text:0040FC40
.text:0040FC40 ; =============== S U B R O U T I N E =======================================
.text:0040FC40
.text:0040FC40 ; Attributes: thunk
.text:0040FC40
.text:0040FC40 ; BOOL __stdcall FreeLibrary(HMODULE hLibModule)
.text:0040FC40 FreeLibrary     proc near               ; CODE XREF: sub_407C30+194↑p
.text:0040FC40                                         ; sub_407C30+37D↑p ...
.text:0040FC40
.text:0040FC40 hLibModule      = dword ptr  4
.text:0040FC40
.text:0040FC40                 jmp     ds:__imp_FreeLibrary
.text:0040FC40 FreeLibrary     endp
.text:0040FC40
.text:0040FC40 ; ---------------------------------------------------------------------------
.text:0040FC46                 align 10h
.text:0040FC50
.text:0040FC50 ; =============== S U B R O U T I N E =======================================
.text:0040FC50
.text:0040FC50 ; Attributes: thunk
.text:0040FC50
.text:0040FC50 ; HANDLE __stdcall FindFirstFileA(LPCSTR lpFileName, LPWIN32_FIND_DATAA lpFindFileData)
.text:0040FC50 FindFirstFileA  proc near               ; CODE XREF: sub_407C30+1BE↑p
.text:0040FC50                                         ; sub_407C30+3AF↑p ...
.text:0040FC50
.text:0040FC50 lpFileName      = dword ptr  4
.text:0040FC50 lpFindFileData  = dword ptr  8
.text:0040FC50
.text:0040FC50                 jmp     ds:__imp_FindFirstFileA
.text:0040FC50 FindFirstFileA  endp
.text:0040FC50
.text:0040FC50 ; ---------------------------------------------------------------------------
.text:0040FC56                 align 10h
.text:0040FC60
.text:0040FC60 ; =============== S U B R O U T I N E =======================================
.text:0040FC60
.text:0040FC60 ; Attributes: thunk
.text:0040FC60
.text:0040FC60 ; BOOL __stdcall FindClose(HANDLE hFindFile)
.text:0040FC60 FindClose       proc near               ; CODE XREF: sub_407C30+213↑p
.text:0040FC60                                         ; sub_407C30+36E↑p ...
.text:0040FC60
.text:0040FC60 hFindFile       = dword ptr  4
.text:0040FC60
.text:0040FC60                 jmp     ds:__imp_FindClose
.text:0040FC60 FindClose       endp
.text:0040FC60
.text:0040FC60 ; ---------------------------------------------------------------------------
.text:0040FC66                 align 10h
.text:0040FC70
.text:0040FC70 ; =============== S U B R O U T I N E =======================================
.text:0040FC70
.text:0040FC70 ; Attributes: thunk
.text:0040FC70
.text:0040FC70 ; HMODULE __stdcall LoadLibraryA(LPCSTR lpLibFileName)
.text:0040FC70 LoadLibraryA    proc near               ; CODE XREF: sub_407C30+273↑p
.text:0040FC70                                         ; sub_4084E0+134↑p ...
.text:0040FC70
.text:0040FC70 lpLibFileName   = dword ptr  4
.text:0040FC70
.text:0040FC70                 jmp     ds:__imp_LoadLibraryA
.text:0040FC70 LoadLibraryA    endp
.text:0040FC70
.text:0040FC70 ; ---------------------------------------------------------------------------
.text:0040FC76                 align 10h
.text:0040FC80
.text:0040FC80 ; =============== S U B R O U T I N E =======================================
.text:0040FC80
.text:0040FC80 ; Attributes: thunk
.text:0040FC80
.text:0040FC80 ; BOOL __stdcall FindNextFileA(HANDLE hFindFile, LPWIN32_FIND_DATAA lpFindFileData)
.text:0040FC80 FindNextFileA   proc near               ; CODE XREF: sub_407C30+35F↑p
.text:0040FC80
.text:0040FC80 hFindFile       = dword ptr  4
.text:0040FC80 lpFindFileData  = dword ptr  8
.text:0040FC80
.text:0040FC80                 jmp     ds:__imp_FindNextFileA
.text:0040FC80 FindNextFileA   endp
.text:0040FC80
.text:0040FC80 ; ---------------------------------------------------------------------------
.text:0040FC86                 align 10h
.text:0040FC90
.text:0040FC90 ; =============== S U B R O U T I N E =======================================
.text:0040FC90
.text:0040FC90 ; Attributes: thunk
.text:0040FC90
.text:0040FC90 ; DWORD __stdcall GetFileType(HANDLE hFile)
.text:0040FC90 GetFileType     proc near               ; CODE XREF: sub_407C30+423↑p
.text:0040FC90                                         ; .text:00408CCA↑p
.text:0040FC90
.text:0040FC90 hFile           = dword ptr  4
.text:0040FC90
.text:0040FC90                 jmp     ds:__imp_GetFileType
.text:0040FC90 GetFileType     endp
.text:0040FC90
.text:0040FC90 ; ---------------------------------------------------------------------------
.text:0040FC96                 align 10h
.text:0040FCA0
.text:0040FCA0 ; =============== S U B R O U T I N E =======================================
.text:0040FCA0
.text:0040FCA0 ; Attributes: thunk
.text:0040FCA0
.text:0040FCA0 ; BOOL __stdcall GetFileInformationByHandle(HANDLE hFile, LPBY_HANDLE_FILE_INFORMATION lpFileInformation)
.text:0040FCA0 GetFileInformationByHandle proc near    ; CODE XREF: sub_407C30+449↑p
.text:0040FCA0
.text:0040FCA0 hFile           = dword ptr  4
.text:0040FCA0 lpFileInformation= dword ptr  8
.text:0040FCA0
.text:0040FCA0                 jmp     ds:__imp_GetFileInformationByHandle
.text:0040FCA0 GetFileInformationByHandle endp
.text:0040FCA0
.text:0040FCA0 ; ---------------------------------------------------------------------------
.text:0040FCA6                 align 10h
.text:0040FCB0
.text:0040FCB0 ; =============== S U B R O U T I N E =======================================
.text:0040FCB0
.text:0040FCB0 ; Attributes: thunk
.text:0040FCB0
.text:0040FCB0 ; DWORD __stdcall GetFileSize(HANDLE hFile, LPDWORD lpFileSizeHigh)
.text:0040FCB0 GetFileSize     proc near               ; CODE XREF: sub_407C30+7D2↑p
.text:0040FCB0
.text:0040FCB0 hFile           = dword ptr  4
.text:0040FCB0 lpFileSizeHigh  = dword ptr  8
.text:0040FCB0
.text:0040FCB0                 jmp     ds:__imp_GetFileSize
.text:0040FCB0 GetFileSize     endp
.text:0040FCB0
.text:0040FCB0 ; ---------------------------------------------------------------------------
.text:0040FCB6                 align 10h
.text:0040FCC0
.text:0040FCC0 ; =============== S U B R O U T I N E =======================================
.text:0040FCC0
.text:0040FCC0 ; Attributes: thunk
.text:0040FCC0
.text:0040FCC0 ; BOOL __stdcall PeekNamedPipe(HANDLE hNamedPipe, LPVOID lpBuffer, DWORD nBufferSize, LPDWORD lpBytesRead, LPDWORD lpTotalBytesAvail, LPDWORD lpBytesLeftThisMessage)
.text:0040FCC0 PeekNamedPipe   proc near               ; CODE XREF: sub_407C30+819↑p
.text:0040FCC0
.text:0040FCC0 hNamedPipe      = dword ptr  4
.text:0040FCC0 lpBuffer        = dword ptr  8
.text:0040FCC0 nBufferSize     = dword ptr  0Ch
.text:0040FCC0 lpBytesRead     = dword ptr  10h
.text:0040FCC0 lpTotalBytesAvail= dword ptr  14h
.text:0040FCC0 lpBytesLeftThisMessage= dword ptr  18h
.text:0040FCC0
.text:0040FCC0                 jmp     ds:__imp_PeekNamedPipe
.text:0040FCC0 PeekNamedPipe   endp
.text:0040FCC0
.text:0040FCC0 ; ---------------------------------------------------------------------------
.text:0040FCC6                 align 10h
.text:0040FCD0
.text:0040FCD0 ; =============== S U B R O U T I N E =======================================
.text:0040FCD0
.text:0040FCD0 ; Attributes: thunk
.text:0040FCD0
.text:0040FCD0 ; UINT __stdcall GetDriveTypeA(LPCSTR lpRootPathName)
.text:0040FCD0 GetDriveTypeA   proc near               ; CODE XREF: sub_4084E0+4C↑p
.text:0040FCD0
.text:0040FCD0 lpRootPathName  = dword ptr  4
.text:0040FCD0
.text:0040FCD0                 jmp     ds:__imp_GetDriveTypeA
.text:0040FCD0 GetDriveTypeA   endp
.text:0040FCD0
.text:0040FCD0 ; ---------------------------------------------------------------------------
.text:0040FCD6                 align 10h
.text:0040FCE0
.text:0040FCE0 ; =============== S U B R O U T I N E =======================================
.text:0040FCE0
.text:0040FCE0 ; Attributes: thunk
.text:0040FCE0
.text:0040FCE0 ; DWORD __stdcall GetLastError()
.text:0040FCE0 GetLastError    proc near               ; CODE XREF: sub_4084E0:loc_408769↑p
.text:0040FCE0                                         ; .text:loc_4092AD↑p ...
.text:0040FCE0                 jmp     ds:__imp_GetLastError
.text:0040FCE0 GetLastError    endp
.text:0040FCE0
.text:0040FCE0 ; ---------------------------------------------------------------------------
.text:0040FCE6                 align 10h
.text:0040FCF0
.text:0040FCF0 ; =============== S U B R O U T I N E =======================================
.text:0040FCF0
.text:0040FCF0 ; Attributes: thunk
.text:0040FCF0
.text:0040FCF0 ; BOOL __stdcall GetVolumeInformationA(LPCSTR lpRootPathName, LPSTR lpVolumeNameBuffer, DWORD nVolumeNameSize, LPDWORD lpVolumeSerialNumber, LPDWORD lpMaximumComponentLength, LPDWORD lpFileSystemFlags, LPSTR lpFileSystemNameBuffer, DWORD nFileSystemNameSize)
.text:0040FCF0 GetVolumeInformationA proc near         ; CODE XREF: sub_4089E0+64↑p
.text:0040FCF0                                         ; .text:00408F8C↑p ...
.text:0040FCF0
.text:0040FCF0 lpRootPathName  = dword ptr  4
.text:0040FCF0 lpVolumeNameBuffer= dword ptr  8
.text:0040FCF0 nVolumeNameSize = dword ptr  0Ch
.text:0040FCF0 lpVolumeSerialNumber= dword ptr  10h
.text:0040FCF0 lpMaximumComponentLength= dword ptr  14h
.text:0040FCF0 lpFileSystemFlags= dword ptr  18h
.text:0040FCF0 lpFileSystemNameBuffer= dword ptr  1Ch
.text:0040FCF0 nFileSystemNameSize= dword ptr  20h
.text:0040FCF0
.text:0040FCF0                 jmp     ds:__imp_GetVolumeInformationA
.text:0040FCF0 GetVolumeInformationA endp
.text:0040FCF0
.text:0040FCF0 ; ---------------------------------------------------------------------------
.text:0040FCF6                 align 10h
.text:0040FD00
.text:0040FD00 ; =============== S U B R O U T I N E =======================================
.text:0040FD00
.text:0040FD00 ; Attributes: thunk
.text:0040FD00
.text:0040FD00 ; HANDLE __stdcall CreateFileA(LPCSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile)
.text:0040FD00 CreateFileA     proc near               ; CODE XREF: sub_40D5E0-3E6A↑p
.text:0040FD00                                         ; .text:0040A683↑p ...
.text:0040FD00
.text:0040FD00 lpFileName      = dword ptr  4
.text:0040FD00 dwDesiredAccess = dword ptr  8
.text:0040FD00 dwShareMode     = dword ptr  0Ch
.text:0040FD00 lpSecurityAttributes= dword ptr  10h
.text:0040FD00 dwCreationDisposition= dword ptr  14h
.text:0040FD00 dwFlagsAndAttributes= dword ptr  18h
.text:0040FD00 hTemplateFile   = dword ptr  1Ch
.text:0040FD00
.text:0040FD00                 jmp     ds:__imp_CreateFileA
.text:0040FD00 CreateFileA     endp
.text:0040FD00
.text:0040FD00 ; ---------------------------------------------------------------------------
.text:0040FD06                 align 10h
.text:0040FD10
.text:0040FD10 ; =============== S U B R O U T I N E =======================================
.text:0040FD10
.text:0040FD10 ; Attributes: thunk
.text:0040FD10
.text:0040FD10 ; BOOL __stdcall CloseHandle(HANDLE hObject)
.text:0040FD10 CloseHandle     proc near               ; CODE XREF: sub_40D5E0-3E4F↑p
.text:0040FD10                                         ; .text:0040A6F9↑p ...
.text:0040FD10
.text:0040FD10 hObject         = dword ptr  4
.text:0040FD10
.text:0040FD10                 jmp     ds:__imp_CloseHandle
.text:0040FD10 CloseHandle     endp
.text:0040FD10
.text:0040FD10 ; ---------------------------------------------------------------------------
.text:0040FD16                 align 10h
.text:0040FD20
.text:0040FD20 ; =============== S U B R O U T I N E =======================================
.text:0040FD20
.text:0040FD20 ; Attributes: thunk
.text:0040FD20
.text:0040FD20 ; UINT __stdcall SetErrorMode(UINT uMode)
.text:0040FD20 SetErrorMode    proc near               ; CODE XREF: sub_40D5E0-3E1A↑p
.text:0040FD20                                         ; sub_40B200+57↑p ...
.text:0040FD20
.text:0040FD20 uMode           = dword ptr  4
.text:0040FD20
.text:0040FD20                 jmp     ds:__imp_SetErrorMode
.text:0040FD20 SetErrorMode    endp
.text:0040FD20
.text:0040FD20 ; ---------------------------------------------------------------------------
.text:0040FD26                 align 10h
.text:0040FD30
.text:0040FD30 ; =============== S U B R O U T I N E =======================================
.text:0040FD30
.text:0040FD30 ; Attributes: thunk
.text:0040FD30
.text:0040FD30 ; DWORD __stdcall GetModuleFileNameA(HMODULE hModule, LPSTR lpFilename, DWORD nSize)
.text:0040FD30 GetModuleFileNameA proc near            ; CODE XREF: sub_409D80+1C↑p
.text:0040FD30
.text:0040FD30 hModule         = dword ptr  4
.text:0040FD30 lpFilename      = dword ptr  8
.text:0040FD30 nSize           = dword ptr  0Ch
.text:0040FD30
.text:0040FD30                 jmp     ds:__imp_GetModuleFileNameA
.text:0040FD30 GetModuleFileNameA endp
.text:0040FD30
.text:0040FD30 ; ---------------------------------------------------------------------------
.text:0040FD36                 align 10h
.text:0040FD40
.text:0040FD40 ; =============== S U B R O U T I N E =======================================
.text:0040FD40
.text:0040FD40 ; Attributes: thunk
.text:0040FD40
.text:0040FD40 ; DWORD __stdcall GetShortPathNameA(LPCSTR lpszLongPath, LPSTR lpszShortPath, DWORD cchBuffer)
.text:0040FD40 GetShortPathNameA proc near             ; CODE XREF: .text:0040A006↑p
.text:0040FD40                                         ; .text:0040A030↑p
.text:0040FD40
.text:0040FD40 lpszLongPath    = dword ptr  4
.text:0040FD40 lpszShortPath   = dword ptr  8
.text:0040FD40 cchBuffer       = dword ptr  0Ch
.text:0040FD40
.text:0040FD40                 jmp     ds:__imp_GetShortPathNameA
.text:0040FD40 GetShortPathNameA endp
.text:0040FD40
.text:0040FD40 ; ---------------------------------------------------------------------------
.text:0040FD46                 align 10h
.text:0040FD50
.text:0040FD50 ; =============== S U B R O U T I N E =======================================
.text:0040FD50
.text:0040FD50 ; Attributes: thunk
.text:0040FD50
.text:0040FD50 ; DWORD __stdcall GetCurrentDirectoryA(DWORD nBufferLength, LPSTR lpBuffer)
.text:0040FD50 GetCurrentDirectoryA proc near          ; CODE XREF: .text:0040A338↑p
.text:0040FD50                                         ; .text:0040A354↑p ...
.text:0040FD50
.text:0040FD50 nBufferLength   = dword ptr  4
.text:0040FD50 lpBuffer        = dword ptr  8
.text:0040FD50
.text:0040FD50                 jmp     ds:__imp_GetCurrentDirectoryA
.text:0040FD50 GetCurrentDirectoryA endp
.text:0040FD50
.text:0040FD50 ; ---------------------------------------------------------------------------
.text:0040FD56                 align 10h
.text:0040FD60
.text:0040FD60 ; =============== S U B R O U T I N E =======================================
.text:0040FD60
.text:0040FD60 ; Attributes: thunk
.text:0040FD60
.text:0040FD60 ; BOOL __stdcall DeviceIoControl(HANDLE hDevice, DWORD dwIoControlCode, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesReturned, LPOVERLAPPED lpOverlapped)
.text:0040FD60 DeviceIoControl proc near               ; CODE XREF: .text:0040A6EC↑p
.text:0040FD60                                         ; sub_40AAB0+1E5↑p
.text:0040FD60
.text:0040FD60 hDevice         = dword ptr  4
.text:0040FD60 dwIoControlCode = dword ptr  8
.text:0040FD60 lpInBuffer      = dword ptr  0Ch
.text:0040FD60 nInBufferSize   = dword ptr  10h
.text:0040FD60 lpOutBuffer     = dword ptr  14h
.text:0040FD60 nOutBufferSize  = dword ptr  18h
.text:0040FD60 lpBytesReturned = dword ptr  1Ch
.text:0040FD60 lpOverlapped    = dword ptr  20h
.text:0040FD60
.text:0040FD60                 jmp     ds:__imp_DeviceIoControl
.text:0040FD60 DeviceIoControl endp
.text:0040FD60
.text:0040FD60 ; ---------------------------------------------------------------------------
.text:0040FD66                 align 10h
.text:0040FD70
.text:0040FD70 ; =============== S U B R O U T I N E =======================================
.text:0040FD70
.text:0040FD70 ; Attributes: thunk
.text:0040FD70
.text:0040FD70 ; BOOL __stdcall GetDiskFreeSpaceA(LPCSTR lpRootPathName, LPDWORD lpSectorsPerCluster, LPDWORD lpBytesPerSector, LPDWORD lpNumberOfFreeClusters, LPDWORD lpTotalNumberOfClusters)
.text:0040FD70 GetDiskFreeSpaceA proc near             ; CODE XREF: .text:0040AA43↑p
.text:0040FD70                                         ; sub_40AAB0+7B↑p ...
.text:0040FD70
.text:0040FD70 lpRootPathName  = dword ptr  4
.text:0040FD70 lpSectorsPerCluster= dword ptr  8
.text:0040FD70 lpBytesPerSector= dword ptr  0Ch
.text:0040FD70 lpNumberOfFreeClusters= dword ptr  10h
.text:0040FD70 lpTotalNumberOfClusters= dword ptr  14h
.text:0040FD70
.text:0040FD70                 jmp     ds:__imp_GetDiskFreeSpaceA
.text:0040FD70 GetDiskFreeSpaceA endp
.text:0040FD70
.text:0040FD70 ; ---------------------------------------------------------------------------
.text:0040FD76                 align 10h
.text:0040FD80
.text:0040FD80 ; =============== S U B R O U T I N E =======================================
.text:0040FD80
.text:0040FD80 ; Attributes: thunk
.text:0040FD80
.text:0040FD80 ; void __stdcall GetSystemInfo(LPSYSTEM_INFO lpSystemInfo)
.text:0040FD80 GetSystemInfo   proc near               ; CODE XREF: sub_40AD50+3A↑p
.text:0040FD80
.text:0040FD80 lpSystemInfo    = dword ptr  4
.text:0040FD80
.text:0040FD80                 jmp     ds:__imp_GetSystemInfo
.text:0040FD80 GetSystemInfo   endp
.text:0040FD80
.text:0040FD80 ; ---------------------------------------------------------------------------
.text:0040FD86                 align 10h
.text:0040FD90
.text:0040FD90 ; =============== S U B R O U T I N E =======================================
.text:0040FD90
.text:0040FD90 ; Attributes: thunk
.text:0040FD90
.text:0040FD90 ; DWORD __stdcall GetFullPathNameA(LPCSTR lpFileName, DWORD nBufferLength, LPSTR lpBuffer, LPSTR *lpFilePart)
.text:0040FD90 GetFullPathNameA proc near              ; CODE XREF: sub_40B0D0+45↑p
.text:0040FD90                                         ; sub_40B0D0+ED↑p
.text:0040FD90
.text:0040FD90 lpFileName      = dword ptr  4
.text:0040FD90 nBufferLength   = dword ptr  8
.text:0040FD90 lpBuffer        = dword ptr  0Ch
.text:0040FD90 lpFilePart      = dword ptr  10h
.text:0040FD90
.text:0040FD90                 jmp     ds:__imp_GetFullPathNameA
.text:0040FD90 GetFullPathNameA endp
.text:0040FD90
.text:0040FD90 ; ---------------------------------------------------------------------------
.text:0040FD96                 align 10h
.text:0040FDA0
.text:0040FDA0 ; =============== S U B R O U T I N E =======================================
.text:0040FDA0
.text:0040FDA0 ; Attributes: thunk
.text:0040FDA0
.text:0040FDA0 ; int __stdcall lstrcmpiA(LPCSTR lpString1, LPCSTR lpString2)
.text:0040FDA0 lstrcmpiA       proc near               ; CODE XREF: .text:0040B78B↑p
.text:0040FDA0                                         ; .text:0040B7A2↑p ...
.text:0040FDA0
.text:0040FDA0 lpString1       = dword ptr  4
.text:0040FDA0 lpString2       = dword ptr  8
.text:0040FDA0
.text:0040FDA0                 jmp     ds:__imp_lstrcmpiA
.text:0040FDA0 lstrcmpiA       endp
.text:0040FDA0
.text:0040FDA0 ; ---------------------------------------------------------------------------
.text:0040FDA6                 align 10h
.text:0040FDB0
.text:0040FDB0 ; =============== S U B R O U T I N E =======================================
.text:0040FDB0
.text:0040FDB0 ; Attributes: thunk
.text:0040FDB0
.text:0040FDB0 ; DWORD __stdcall GetVersion()
.text:0040FDB0 GetVersion      proc near               ; CODE XREF: .text:0040BB13↑p
.text:0040FDB0                 jmp     ds:__imp_GetVersion
.text:0040FDB0 GetVersion      endp
.text:0040FDB0
.text:0040FDB0 ; ---------------------------------------------------------------------------
.text:0040FDB6                 align 10h
.text:0040FDC0
.text:0040FDC0 ; =============== S U B R O U T I N E =======================================
.text:0040FDC0
.text:0040FDC0 ; Attributes: thunk
.text:0040FDC0
.text:0040FDC0 ; BOOL __stdcall GetVersionExA(LPOSVERSIONINFOA lpVersionInformation)
.text:0040FDC0 GetVersionExA   proc near               ; CODE XREF: sub_40BBA0+32↑p
.text:0040FDC0                                         ; sub_40BBA0+20B↑p
.text:0040FDC0
.text:0040FDC0 lpVersionInformation= dword ptr  4
.text:0040FDC0
.text:0040FDC0                 jmp     ds:__imp_GetVersionExA
.text:0040FDC0 GetVersionExA   endp
.text:0040FDC0
.text:0040FDC0 ; ---------------------------------------------------------------------------
.text:0040FDC6                 align 10h
.text:0040FDD0
.text:0040FDD0 ; =============== S U B R O U T I N E =======================================
.text:0040FDD0
.text:0040FDD0 ; Attributes: thunk
.text:0040FDD0
.text:0040FDD0 ; DWORD __stdcall GetLogicalDriveStringsA(DWORD nBufferLength, LPSTR lpBuffer)
.text:0040FDD0 GetLogicalDriveStringsA proc near       ; CODE XREF: .text:0040C23F↑p
.text:0040FDD0                                         ; .text:0040C26E↑p ...
.text:0040FDD0
.text:0040FDD0 nBufferLength   = dword ptr  4
.text:0040FDD0 lpBuffer        = dword ptr  8
.text:0040FDD0
.text:0040FDD0                 jmp     ds:__imp_GetLogicalDriveStringsA
.text:0040FDD0 GetLogicalDriveStringsA endp
.text:0040FDD0
.text:0040FDD0 ; ---------------------------------------------------------------------------
.text:0040FDD6                 align 10h
.text:0040FDE0
.text:0040FDE0 ; =============== S U B R O U T I N E =======================================
.text:0040FDE0
.text:0040FDE0 ; Attributes: thunk
.text:0040FDE0
.text:0040FDE0 ; HANDLE __stdcall GetProcessHeap()
.text:0040FDE0 GetProcessHeap  proc near               ; CODE XREF: .text:0040C249↑p
.text:0040FDE0                                         ; sub_40C920+24↑p ...
.text:0040FDE0                 jmp     ds:__imp_GetProcessHeap
.text:0040FDE0 GetProcessHeap  endp
.text:0040FDE0
.text:0040FDE0 ; ---------------------------------------------------------------------------
.text:0040FDE6                 align 10h
.text:0040FDF0
.text:0040FDF0 ; =============== S U B R O U T I N E =======================================
.text:0040FDF0
.text:0040FDF0 ; Attributes: thunk
.text:0040FDF0
.text:0040FDF0 ; LPVOID __stdcall HeapAlloc(HANDLE hHeap, DWORD dwFlags, SIZE_T dwBytes)
.text:0040FDF0 HeapAlloc       proc near               ; CODE XREF: .text:0040C25D↑p
.text:0040FDF0                                         ; sub_40C920+38↑p ...
.text:0040FDF0
.text:0040FDF0 hHeap           = dword ptr  4
.text:0040FDF0 dwFlags         = dword ptr  8
.text:0040FDF0 dwBytes         = dword ptr  0Ch
.text:0040FDF0
.text:0040FDF0                 jmp     ds:__imp_HeapAlloc
.text:0040FDF0 HeapAlloc       endp
.text:0040FDF0
.text:0040FDF0 ; ---------------------------------------------------------------------------
.text:0040FDF6                 align 10h
.text:0040FE00
.text:0040FE00 ; =============== S U B R O U T I N E =======================================
.text:0040FE00
.text:0040FE00 ; Attributes: thunk
.text:0040FE00
.text:0040FE00 ; BOOL __stdcall HeapFree(HANDLE hHeap, DWORD dwFlags, LPVOID lpMem)
.text:0040FE00 HeapFree        proc near               ; CODE XREF: .text:0040CA5D↑p
.text:0040FE00
.text:0040FE00 hHeap           = dword ptr  4
.text:0040FE00 dwFlags         = dword ptr  8
.text:0040FE00 lpMem           = dword ptr  0Ch
.text:0040FE00
.text:0040FE00                 jmp     ds:__imp_HeapFree
.text:0040FE00 HeapFree        endp
.text:0040FE00
.text:0040FE00 ; ---------------------------------------------------------------------------
.text:0040FE06                 align 10h
.text:0040FE10
.text:0040FE10 ; =============== S U B R O U T I N E =======================================
.text:0040FE10
.text:0040FE10 ; Attributes: thunk
.text:0040FE10
.text:0040FE10 ; BOOL __stdcall UnlockFile(HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToUnlockLow, DWORD nNumberOfBytesToUnlockHigh)
.text:0040FE10 UnlockFile      proc near               ; CODE XREF: sub_40CB60+40↑p
.text:0040FE10
.text:0040FE10 hFile           = dword ptr  4
.text:0040FE10 dwFileOffsetLow = dword ptr  8
.text:0040FE10 dwFileOffsetHigh= dword ptr  0Ch
.text:0040FE10 nNumberOfBytesToUnlockLow= dword ptr  10h
.text:0040FE10 nNumberOfBytesToUnlockHigh= dword ptr  14h
.text:0040FE10
.text:0040FE10                 jmp     ds:__imp_UnlockFile
.text:0040FE10 UnlockFile      endp
.text:0040FE10
.text:0040FE10 ; ---------------------------------------------------------------------------
.text:0040FE16                 align 10h
.text:0040FE20
.text:0040FE20 ; =============== S U B R O U T I N E =======================================
.text:0040FE20
.text:0040FE20 ; Attributes: thunk
.text:0040FE20
.text:0040FE20 ; BOOL __stdcall CreateDirectoryA(LPCSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes)
.text:0040FE20 CreateDirectoryA proc near              ; CODE XREF: sub_40D4E0+22↑p
.text:0040FE20
.text:0040FE20 lpPathName      = dword ptr  4
.text:0040FE20 lpSecurityAttributes= dword ptr  8
.text:0040FE20
.text:0040FE20                 jmp     ds:__imp_CreateDirectoryA
.text:0040FE20 CreateDirectoryA endp
.text:0040FE20
.text:0040FE20 ; ---------------------------------------------------------------------------
.text:0040FE26                 align 10h
.text:0040FE30
.text:0040FE30 ; =============== S U B R O U T I N E =======================================
.text:0040FE30
.text:0040FE30 ; Attributes: thunk
.text:0040FE30
.text:0040FE30 ; DWORD __stdcall GetTimeZoneInformation(LPTIME_ZONE_INFORMATION lpTimeZoneInformation)
.text:0040FE30 GetTimeZoneInformation proc near        ; CODE XREF: sub_40D6F0+22↑p
.text:0040FE30
.text:0040FE30 lpTimeZoneInformation= dword ptr  4
.text:0040FE30
.text:0040FE30                 jmp     ds:__imp_GetTimeZoneInformation
.text:0040FE30 GetTimeZoneInformation endp
.text:0040FE30
.text:0040FE30 ; ---------------------------------------------------------------------------
.text:0040FE36                 align 10h
.text:0040FE40
.text:0040FE40 ; =============== S U B R O U T I N E =======================================
.text:0040FE40
.text:0040FE40 ; Attributes: thunk
.text:0040FE40
.text:0040FE40 ; void __stdcall GetSystemTimeAsFileTime(LPFILETIME lpSystemTimeAsFileTime)
.text:0040FE40 GetSystemTimeAsFileTime proc near       ; CODE XREF: sub_40D6F0+4F↑p
.text:0040FE40
.text:0040FE40 lpSystemTimeAsFileTime= dword ptr  4
.text:0040FE40
.text:0040FE40                 jmp     ds:__imp_GetSystemTimeAsFileTime
.text:0040FE40 GetSystemTimeAsFileTime endp
.text:0040FE40
.text:0040FE40 ; ---------------------------------------------------------------------------
.text:0040FE46                 align 10h
.text:0040FE50
.text:0040FE50 ; =============== S U B R O U T I N E =======================================
.text:0040FE50
.text:0040FE50 ; Attributes: thunk
.text:0040FE50
.text:0040FE50 ; BOOL __stdcall AreFileApisANSI()
.text:0040FE50 AreFileApisANSI proc near               ; CODE XREF: sub_40D830+89↑p
.text:0040FE50                 jmp     ds:__imp_AreFileApisANSI
.text:0040FE50 AreFileApisANSI endp
.text:0040FE50
.text:0040FE50 ; ---------------------------------------------------------------------------
.text:0040FE56                 align 10h
.text:0040FE60
.text:0040FE60 ; =============== S U B R O U T I N E =======================================
.text:0040FE60
.text:0040FE60 ; Attributes: thunk
.text:0040FE60
.text:0040FE60 ; int __stdcall MultiByteToWideChar(UINT CodePage, DWORD dwFlags, LPCCH lpMultiByteStr, int cbMultiByte, LPWSTR lpWideCharStr, int cchWideChar)
.text:0040FE60 MultiByteToWideChar proc near           ; CODE XREF: sub_40D830+BD↑p
.text:0040FE60
.text:0040FE60 CodePage        = dword ptr  4
.text:0040FE60 dwFlags         = dword ptr  8
.text:0040FE60 lpMultiByteStr  = dword ptr  0Ch
.text:0040FE60 cbMultiByte     = dword ptr  10h
.text:0040FE60 lpWideCharStr   = dword ptr  14h
.text:0040FE60 cchWideChar     = dword ptr  18h
.text:0040FE60
.text:0040FE60                 jmp     ds:__imp_MultiByteToWideChar
.text:0040FE60 MultiByteToWideChar endp
.text:0040FE60
.text:0040FE60 ; ---------------------------------------------------------------------------
.text:0040FE66                 align 10h
.text:0040FE70
.text:0040FE70 ; =============== S U B R O U T I N E =======================================
.text:0040FE70
.text:0040FE70 ; Attributes: thunk
.text:0040FE70
.text:0040FE70 ; LPSTR __stdcall lstrcpyA(LPSTR lpString1, LPCSTR lpString2)
.text:0040FE70 lstrcpyA        proc near               ; CODE XREF: sub_40D830+128↑p
.text:0040FE70
.text:0040FE70 lpString1       = dword ptr  4
.text:0040FE70 lpString2       = dword ptr  8
.text:0040FE70
.text:0040FE70                 jmp     ds:__imp_lstrcpyA
.text:0040FE70 lstrcpyA        endp
.text:0040FE70
.text:0040FE70 ; ---------------------------------------------------------------------------
.text:0040FE76                 align 10h
.text:0040FE80
.text:0040FE80 ; =============== S U B R O U T I N E =======================================
.text:0040FE80
.text:0040FE80 ; Attributes: thunk
.text:0040FE80
.text:0040FE80 ; LSTATUS __stdcall RegOpenKeyExA(HKEY hKey, LPCSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult)
.text:0040FE80 RegOpenKeyExA   proc near               ; CODE XREF: .text:0040B711↑p
.text:0040FE80
.text:0040FE80 hKey            = dword ptr  4
.text:0040FE80 lpSubKey        = dword ptr  8
.text:0040FE80 ulOptions       = dword ptr  0Ch
.text:0040FE80 samDesired      = dword ptr  10h
.text:0040FE80 phkResult       = dword ptr  14h
.text:0040FE80
.text:0040FE80                 jmp     ds:__imp_RegOpenKeyExA
.text:0040FE80 RegOpenKeyExA   endp
.text:0040FE80
.text:0040FE80 ; ---------------------------------------------------------------------------
.text:0040FE86                 align 10h
.text:0040FE90
.text:0040FE90 ; =============== S U B R O U T I N E =======================================
.text:0040FE90
.text:0040FE90 ; Attributes: thunk
.text:0040FE90
.text:0040FE90 ; LSTATUS __stdcall RegQueryValueExA(HKEY hKey, LPCSTR lpValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData)
.text:0040FE90 RegQueryValueExA proc near              ; CODE XREF: .text:0040B754↑p
.text:0040FE90
.text:0040FE90 hKey            = dword ptr  4
.text:0040FE90 lpValueName     = dword ptr  8
.text:0040FE90 lpReserved      = dword ptr  0Ch
.text:0040FE90 lpType          = dword ptr  10h
.text:0040FE90 lpData          = dword ptr  14h
.text:0040FE90 lpcbData        = dword ptr  18h
.text:0040FE90
.text:0040FE90                 jmp     ds:__imp_RegQueryValueExA
.text:0040FE90 RegQueryValueExA endp
.text:0040FE90
.text:0040FE90 ; ---------------------------------------------------------------------------
.text:0040FE96                 align 10h
.text:0040FEA0
.text:0040FEA0 ; =============== S U B R O U T I N E =======================================
.text:0040FEA0
.text:0040FEA0 ; Attributes: thunk
.text:0040FEA0
.text:0040FEA0 ; LSTATUS __stdcall RegCloseKey(HKEY hKey)
.text:0040FEA0 RegCloseKey     proc near               ; CODE XREF: .text:0040B778↑p
.text:0040FEA0
.text:0040FEA0 hKey            = dword ptr  4
.text:0040FEA0
.text:0040FEA0                 jmp     ds:__imp_RegCloseKey
.text:0040FEA0 RegCloseKey     endp
.text:0040FEA0
.text:0040FEA0 ; ---------------------------------------------------------------------------
.text:0040FEA6                 db 2 dup(90h)
.text:0040FEA8                 dd 2 dup(0)
.text:0040FEB0                 dd 21400h, 0
.text:0040FEB8                 dd 0C0h, 46000000h
.text:0040FEC0 ; const IID rclsid
.text:0040FEC0 rclsid          dd 21401h               ; Data1
.text:0040FEC0                                         ; DATA XREF: sub_40D830+4B↑o
.text:0040FEC0                 dw 0                    ; Data2
.text:0040FEC0                 dw 0                    ; Data3
.text:0040FEC0                 db 0C0h, 6 dup(0), 46h  ; Data4
.text:0040FED0                 dd 214A0h, 0
.text:0040FED8                 dd 0C0h, 46000000h, 214A1h, 0
.text:0040FEE8                 dd 0C0h, 46000000h, 214D0h, 0
.text:0040FEF8                 dd 0C0h, 46000000h, 214D1h, 0
.text:0040FF08                 dd 0C0h, 46000000h, 214D2h, 0
.text:0040FF18                 dd 0C0h, 46000000h, 214E1h, 0
.text:0040FF28                 dd 0C0h, 46000000h, 214E2h, 0
.text:0040FF38                 dd 0C0h, 46000000h, 214E3h, 0
.text:0040FF48                 dd 0C0h, 46000000h, 214E4h, 0
.text:0040FF58                 dd 0C0h, 46000000h, 21500h, 0
.text:0040FF68                 dd 0C0h, 46000000h, 214E5h, 0
.text:0040FF78                 dd 0C0h, 46000000h, 214E6h, 0
.text:0040FF88                 dd 0C0h, 46000000h, 214E8h, 0
.text:0040FF98                 dd 0C0h, 46000000h, 214E9h, 0
.text:0040FFA8                 dd 0C0h, 46000000h, 214EAh, 0
.text:0040FFB8                 dd 0C0h, 46000000h, 214EBh, 0
.text:0040FFC8                 dd 0C0h, 46000000h
.text:0040FFD0 ; const IID riid
.text:0040FFD0 riid            dd 214EEh               ; Data1
.text:0040FFD0                                         ; DATA XREF: sub_40D830+2B↑o
.text:0040FFD0                 dw 0                    ; Data2
.text:0040FFD0                 dw 0                    ; Data3
.text:0040FFD0                 db 0C0h, 6 dup(0), 46h  ; Data4
.text:0040FFE0                 dd 214EFh, 0
.text:0040FFE8                 dd 0C0h, 46000000h, 214F0h, 0
.text:0040FFF8                 dd 0C0h, 46000000h, 214F1h, 0
.text:00410008                 dd 0C0h, 46000000h, 214F2h, 0
.text:00410018                 dd 0C0h, 46000000h, 214F3h, 0
.text:00410028                 dd 0C0h, 46000000h, 214F4h, 0
.text:00410038                 dd 0C0h, 46000000h, 214F5h, 0
.text:00410048                 dd 0C0h, 46000000h, 214F6h, 0
.text:00410058                 dd 0C0h, 46000000h, 214F7h, 0
.text:00410068                 dd 0C0h, 46000000h, 214F8h, 0
.text:00410078                 dd 0C0h, 46000000h, 214F9h, 0
.text:00410088                 dd 0C0h, 46000000h, 214FAh, 0
.text:00410098                 dd 0C0h, 46000000h, 214FBh, 0
.text:004100A8                 dd 0C0h, 46000000h, 214FCh, 0
.text:004100B8                 dd 0C0h, 46000000h, 88E39E80h, 11CF3578h, 869AEh, 62122E2Bh
.text:004100B8                 dd 93F2F68Ch, 11D31D1Bh, 0C0000EA3h, 0D1AB794Fh, 1AC3D9F0h
.text:004100B8                 dd 11D1175Ch, 6000BE95h, 4FEA9797h, 0CEF04FDFh, 11D2FE72h
.text:004100B8                 dd 0C000A587h, 0CF37684Fh, 1E18D10h, 11D24D8Bh, 60005D85h
.text:004100B8                 dd 67930508h, 0EAB22AC0h, 11CF30C1h, 0EBA7h, 0BAE5BC0h
.text:004100B8                 dd 0EAB22AC1h, 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0EAB22AC2h
.text:004100B8                 dd 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0EAB22AC3h, 11CF30C1h
.text:004100B8                 dd 0EBA7h, 0BAE5BC0h, 0EAB22AC4h, 11CF30C1h, 0EBA7h, 0BAE5BC0h
.text:004100B8                 dd 0EAB22AC5h, 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0EAB22AC6h
.text:004100B8                 dd 11CF30C1h, 0EBA7h, 0BAE5BC0h, 2DF07h, 0
.text:00410188                 dd 0C0h, 46000000h, 2DF05h, 0
.text:00410198                 dd 0C0h, 46000000h, 2DF06h, 0
.text:004101A8                 dd 0C0h, 46000000h, 2DF01h, 0
.text:004101B8                 dd 0C0h, 46000000h, 2DF09h, 0
.text:004101C8                 dd 0C0h, 46000000h, 0B091E540h, 11CF83E3h, 200013A7h, 6297D7AFh
.text:004101C8                 dd 0FBF23B40h, 101BE3F0h, 0AA008884h, 0F8563E00h, 0FBF23B80h
.text:004101C8                 dd 101BE3F0h, 0AA008884h, 0F8563E00h, 4657278Ah, 11D2411Bh
.text:004101C8                 dd 0C0009A83h, 0D018D94Fh, 4657278Bh, 11D2411Bh, 0C0009A83h
.text:004101C8                 dd 0D018D94Fh, 0DE5BF786h, 11D2477Ah, 0C0009D83h, 0D018D94Fh
.text:004101C8                 dd 0E8025004h, 11D21C42h, 0A0002CBEh, 0A13DA8C9h, 0C6C4200h
.text:004101C8                 dd 11D0C589h, 0C0009A99h, 0E155D64Fh
.text:00410250 dword_410250    dd 0FFFFFFFFh           ; DATA XREF: .text:0040EFF9↑r
.text:00410250                                         ; .text:loc_40F020↑r ...
.text:00410254 dword_410254    dd 0                    ; DATA XREF: .text:loc_40F02C↑r
.text:00410254                                         ; sub_40F050:loc_40F09D↑r
.text:00410258                 dd 0FFFFFFFFh
.text:0041025C dword_41025C    dd 69h dup(0)           ; DATA XREF: .data:off_4110D4↓o
.text:00410400                 dd 300h dup(?)
.text:00410400 _text           ends
.text:00410400
.data:00411000 ; Section 2. (virtual address 00011000)
.data:00411000 ; Virtual size                  : 000000F0 (    240.)
.data:00411000 ; Section size in file          : 00000200 (    512.)
.data:00411000 ; Offset to raw data for section: 0000F800
.data:00411000 ; Flags C0000040: Data Readable Writable
.data:00411000 ; Alignment     : default
.data:00411000 ; ===========================================================================
.data:00411000
.data:00411000 ; Segment type: Pure data
.data:00411000 ; Segment permissions: Read/Write
.data:00411000 _data           segment para public 'DATA' use32
.data:00411000                 assume cs:_data
.data:00411000                 ;org 411000h
.data:00411000 dword_411000    dd 0                    ; DATA XREF: sub_401080+1B↑o
.data:00411000                                         ; sub_401080+CC↑r
.data:00411004 dword_411004    dd 0                    ; DATA XREF: sub_401080+41↑o
.data:00411004                                         ; sub_401080+D4↑r
.data:00411008                 align 10h
.data:00411010 ; size_t Size
.data:00411010 Size            dd 2                    ; DATA XREF: sub_401A30+58F↑w
.data:00411010                                         ; sub_402F20+13↑r ...
.data:00411014 off_411014      dd offset aAbcdefghijklmn
.data:00411014                                         ; DATA XREF: sub_401A30+645↑w
.data:00411014                                         ; sub_402F20+26↑r ...
.data:00411014                                         ; "abcdefghijklmnopqrstuvwxyz"
.data:00411018                 align 10h
.data:00411020 dword_411020    dd 1                    ; DATA XREF: sub_401A30:loc_401AD0↑r
.data:00411020                                         ; sub_401A30+711↑r ...
.data:00411024 dword_411024    dd 1                    ; DATA XREF: sub_403EC0+11↑r
.data:00411024                                         ; .text:00403F61↑r
.data:00411028 dword_411028    dd 3Fh                  ; DATA XREF: sub_403EC0+7D↑w
.data:00411028                                         ; .text:00403FCD↑w
.data:0041102C                 align 10h
.data:00411030 ; char *Buffer
.data:00411030 Buffer          dd offset aCopyrightC2005
.data:00411030                                         ; DATA XREF: sub_4044C0+DC↑r
.data:00411030                                         ; "Copyright (C) 2005 Free Software Founda"...
.data:00411034                 align 10h
.data:00411040 dword_411040    dd 1                    ; DATA XREF: sub_407420+22↑r
.data:00411040                                         ; sub_407420+65↑r ...
.data:00411044 dword_411044    dd 100h                 ; DATA XREF: sub_407420+3F↑o
.data:00411044                                         ; sub_407420+1A2↑r ...
.data:00411048 off_411048      dd offset unk_4120C0    ; DATA XREF: sub_407420+1AA↑r
.data:0041104C ; void *off_41104C
.data:0041104C off_41104C      dd offset dword_411044  ; DATA XREF: sub_407420+39↑r
.data:0041104C                                         ; sub_407420+60↑w ...
.data:00411050 ; int Code
.data:00411050 Code            dd 1                    ; DATA XREF: sub_405B90+6D↑r
.data:00411050                                         ; sub_405B90+9A↑r ...
.data:00411054                 align 10h
.data:00411060 dword_411060    dd 200h                 ; DATA XREF: sub_407C30+6CD↑r
.data:00411060                                         ; sub_407C30+6D8↑r ...
.data:00411064 ; char *off_411064
.data:00411064 off_411064      dd offset aComExeBatCmd ; DATA XREF: sub_4084E0+3D3↑r
.data:00411064                                         ; sub_4084E0+400↑r ...
.data:00411064                                         ; ".com;.exe;.bat;.cmd"
.data:00411068                 align 10h
.data:00411070 byte_411070     db 41h                  ; DATA XREF: sub_40A1B0+6B↑w
.data:00411070                                         ; sub_40A1B0:loc_40A2C4↑r
.data:00411071                 align 10h
.data:00411080 dword_411080    dd 1                    ; DATA XREF: .text:loc_40B5C7↑r
.data:00411080                                         ; sub_40BBA0+202↑w
.data:00411084                 align 10h
.data:00411090 off_411090      dd offset aNotset       ; DATA XREF: .text:0040BE1A↑r
.data:00411090                                         ; .text:0040CA62↑r
.data:00411090                                         ; "notset"
.data:00411094 off_411094      dd offset aNotset       ; DATA XREF: .text:0040BE32↑r
.data:00411094                                         ; .text:0040BE54↑r ...
.data:00411094                                         ; "notset"
.data:00411098                 align 10h
.data:004110A0 dword_4110A0    dd 0FFFFFFFFh           ; DATA XREF: sub_401080+22↑r
.data:004110A4                 align 10h
.data:004110B0 ; int Mode
.data:004110B0 Mode            dd 0                    ; DATA XREF: sub_401080+4E↑r
.data:004110B0                                         ; sub_401080+80↑r ...
.data:004110B4                 align 10h
.data:004110C0 dword_4110C0    dd 4000h                ; DATA XREF: sub_401080+57↑w
.data:004110C0                                         ; sub_401080+BA↑r
.data:004110C4                 align 10h
.data:004110D0 dword_4110D0    dd 0                    ; DATA XREF: sub_40F050+9↑r
.data:004110D0                                         ; sub_40F050+1D↑w
.data:004110D4 off_4110D4      dd offset dword_41025C  ; DATA XREF: sub_40EFC0+6↑r
.data:004110D4                                         ; sub_40EFC0+17↑r ...
.data:004110D8                 align 1000h
.data:004110D8 _data           ends
.data:004110D8
.bss:00412000 ; Section 3. (virtual address 00012000)
.bss:00412000 ; Virtual size                  : 00000610 (   1552.)
.bss:00412000 ; Section size in file          : 00000000 (      0.)
.bss:00412000 ; Offset to raw data for section: 00000000
.bss:00412000 ; Flags C0000080: Bss Readable Writable
.bss:00412000 ; Alignment     : default
.bss:00412000 ; ===========================================================================
.bss:00412000
.bss:00412000 ; Segment type: Uninitialized
.bss:00412000 ; Segment permissions: Read/Write
.bss:00412000 _bss            segment para public 'BSS' use32
.bss:00412000                 assume cs:_bss
.bss:00412000                 ;org 412000h
.bss:00412000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00412000 dword_412000    dd ?                    ; DATA XREF: sub_402F20:loc_402F40↑r
.bss:00412000                                         ; sub_402F20+4C↑r ...
.bss:00412004                 align 10h
.bss:00412010 ; char *Str
.bss:00412010 Str             dd ?                    ; DATA XREF: sub_401A30+92↑w
.bss:00412010                                         ; sub_401A30+742↑w ...
.bss:00412014                 align 10h
.bss:00412020 ; char *dword_412020
.bss:00412020 dword_412020    dd ?                    ; DATA XREF: sub_401A30+870↑r
.bss:00412020                                         ; sub_402600+B2↑r ...
.bss:00412024                 align 10h
.bss:00412030 ; void *dword_412030
.bss:00412030 dword_412030    dd ?                    ; DATA XREF: sub_402F20+37↑r
.bss:00412030                                         ; sub_402F20+40↑r ...
.bss:00412034                 align 10h
.bss:00412040 ; char *FileName
.bss:00412040 FileName        dd ?                    ; DATA XREF: sub_401A30+8D↑w
.bss:00412040                                         ; sub_401A30+726↑w ...
.bss:00412044                 align 10h
.bss:00412050 ; char *FileHandle
.bss:00412050 FileHandle      dd ?                    ; DATA XREF: sub_401A30+76B↑w
.bss:00412050                                         ; sub_401A30:loc_4021A1↑r ...
.bss:00412054                 align 10h
.bss:00412060 ; int dword_412060
.bss:00412060 dword_412060    dd ?                    ; DATA XREF: sub_401A30+798↑w
.bss:00412060                                         ; sub_401A30:loc_402276↑r ...
.bss:00412064                 align 10h
.bss:00412070 byte_412070     db ?                    ; DATA XREF: sub_401A30+5BE↑w
.bss:00412070                                         ; sub_402600+9D↑r ...
.bss:00412071                 align 10h
.bss:00412080 dword_412080    dd ?                    ; DATA XREF: sub_403EC0+9↑o
.bss:00412080                                         ; sub_403EC0+17↑w ...
.bss:00412084 dword_412084    dd ?                    ; DATA XREF: sub_403EC0+21↑w
.bss:00412084                                         ; .text:00403F79↑w
.bss:00412088 dword_412088    dd ?                    ; DATA XREF: sub_403EC0+77↑r
.bss:00412088                                         ; .text:00403FC7↑r
.bss:0041208C dword_41208C    dd ?                    ; DATA XREF: sub_403EC0+6B↑r
.bss:0041208C                                         ; .text:00403FBB↑r
.bss:00412090                 db    ? ;
.bss:00412091                 db    ? ;
.bss:00412092                 db    ? ;
.bss:00412093                 db    ? ;
.bss:00412094                 db    ? ;
.bss:00412095                 db    ? ;
.bss:00412096                 db    ? ;
.bss:00412097                 db    ? ;
.bss:00412098                 db    ? ;
.bss:00412099                 db    ? ;
.bss:0041209A                 db    ? ;
.bss:0041209B                 db    ? ;
.bss:0041209C                 db    ? ;
.bss:0041209D                 db    ? ;
.bss:0041209E                 db    ? ;
.bss:0041209F                 db    ? ;
.bss:004120A0                 db    ? ;
.bss:004120A1                 db    ? ;
.bss:004120A2                 db    ? ;
.bss:004120A3                 db    ? ;
.bss:004120A4                 db    ? ;
.bss:004120A5                 db    ? ;
.bss:004120A6                 db    ? ;
.bss:004120A7                 db    ? ;
.bss:004120A8                 db    ? ;
.bss:004120A9                 db    ? ;
.bss:004120AA                 db    ? ;
.bss:004120AB                 db    ? ;
.bss:004120AC                 db    ? ;
.bss:004120AD                 db    ? ;
.bss:004120AE                 db    ? ;
.bss:004120AF                 db    ? ;
.bss:004120B0 ; char *dword_4120B0
.bss:004120B0 dword_4120B0    dd ?                    ; DATA XREF: .text:00405B64↑w
.bss:004120B0                                         ; sub_405B90+58↑r
.bss:004120B4                 align 10h
.bss:004120C0 unk_4120C0      db    ? ;               ; DATA XREF: sub_407420+100↑o
.bss:004120C0                                         ; .data:off_411048↑o
.bss:004120C1                 db    ? ;
.bss:004120C2                 db    ? ;
.bss:004120C3                 db    ? ;
.bss:004120C4                 db    ? ;
.bss:004120C5                 db    ? ;
.bss:004120C6                 db    ? ;
.bss:004120C7                 db    ? ;
.bss:004120C8                 db    ? ;
.bss:004120C9                 db    ? ;
.bss:004120CA                 db    ? ;
.bss:004120CB                 db    ? ;
.bss:004120CC                 db    ? ;
.bss:004120CD                 db    ? ;
.bss:004120CE                 db    ? ;
.bss:004120CF                 db    ? ;
.bss:004120D0                 db    ? ;
.bss:004120D1                 db    ? ;
.bss:004120D2                 db    ? ;
.bss:004120D3                 db    ? ;
.bss:004120D4                 db    ? ;
.bss:004120D5                 db    ? ;
.bss:004120D6                 db    ? ;
.bss:004120D7                 db    ? ;
.bss:004120D8                 db    ? ;
.bss:004120D9                 db    ? ;
.bss:004120DA                 db    ? ;
.bss:004120DB                 db    ? ;
.bss:004120DC                 db    ? ;
.bss:004120DD                 db    ? ;
.bss:004120DE                 db    ? ;
.bss:004120DF                 db    ? ;
.bss:004120E0                 db    ? ;
.bss:004120E1                 db    ? ;
.bss:004120E2                 db    ? ;
.bss:004120E3                 db    ? ;
.bss:004120E4                 db    ? ;
.bss:004120E5                 db    ? ;
.bss:004120E6                 db    ? ;
.bss:004120E7                 db    ? ;
.bss:004120E8                 db    ? ;
.bss:004120E9                 db    ? ;
.bss:004120EA                 db    ? ;
.bss:004120EB                 db    ? ;
.bss:004120EC                 db    ? ;
.bss:004120ED                 db    ? ;
.bss:004120EE                 db    ? ;
.bss:004120EF                 db    ? ;
.bss:004120F0                 db    ? ;
.bss:004120F1                 db    ? ;
.bss:004120F2                 db    ? ;
.bss:004120F3                 db    ? ;
.bss:004120F4                 db    ? ;
.bss:004120F5                 db    ? ;
.bss:004120F6                 db    ? ;
.bss:004120F7                 db    ? ;
.bss:004120F8                 db    ? ;
.bss:004120F9                 db    ? ;
.bss:004120FA                 db    ? ;
.bss:004120FB                 db    ? ;
.bss:004120FC                 db    ? ;
.bss:004120FD                 db    ? ;
.bss:004120FE                 db    ? ;
.bss:004120FF                 db    ? ;
.bss:00412100                 db    ? ;
.bss:00412101                 db    ? ;
.bss:00412102                 db    ? ;
.bss:00412103                 db    ? ;
.bss:00412104                 db    ? ;
.bss:00412105                 db    ? ;
.bss:00412106                 db    ? ;
.bss:00412107                 db    ? ;
.bss:00412108                 db    ? ;
.bss:00412109                 db    ? ;
.bss:0041210A                 db    ? ;
.bss:0041210B                 db    ? ;
.bss:0041210C                 db    ? ;
.bss:0041210D                 db    ? ;
.bss:0041210E                 db    ? ;
.bss:0041210F                 db    ? ;
.bss:00412110                 db    ? ;
.bss:00412111                 db    ? ;
.bss:00412112                 db    ? ;
.bss:00412113                 db    ? ;
.bss:00412114                 db    ? ;
.bss:00412115                 db    ? ;
.bss:00412116                 db    ? ;
.bss:00412117                 db    ? ;
.bss:00412118                 db    ? ;
.bss:00412119                 db    ? ;
.bss:0041211A                 db    ? ;
.bss:0041211B                 db    ? ;
.bss:0041211C                 db    ? ;
.bss:0041211D                 db    ? ;
.bss:0041211E                 db    ? ;
.bss:0041211F                 db    ? ;
.bss:00412120                 db    ? ;
.bss:00412121                 db    ? ;
.bss:00412122                 db    ? ;
.bss:00412123                 db    ? ;
.bss:00412124                 db    ? ;
.bss:00412125                 db    ? ;
.bss:00412126                 db    ? ;
.bss:00412127                 db    ? ;
.bss:00412128                 db    ? ;
.bss:00412129                 db    ? ;
.bss:0041212A                 db    ? ;
.bss:0041212B                 db    ? ;
.bss:0041212C                 db    ? ;
.bss:0041212D                 db    ? ;
.bss:0041212E                 db    ? ;
.bss:0041212F                 db    ? ;
.bss:00412130                 db    ? ;
.bss:00412131                 db    ? ;
.bss:00412132                 db    ? ;
.bss:00412133                 db    ? ;
.bss:00412134                 db    ? ;
.bss:00412135                 db    ? ;
.bss:00412136                 db    ? ;
.bss:00412137                 db    ? ;
.bss:00412138                 db    ? ;
.bss:00412139                 db    ? ;
.bss:0041213A                 db    ? ;
.bss:0041213B                 db    ? ;
.bss:0041213C                 db    ? ;
.bss:0041213D                 db    ? ;
.bss:0041213E                 db    ? ;
.bss:0041213F                 db    ? ;
.bss:00412140                 db    ? ;
.bss:00412141                 db    ? ;
.bss:00412142                 db    ? ;
.bss:00412143                 db    ? ;
.bss:00412144                 db    ? ;
.bss:00412145                 db    ? ;
.bss:00412146                 db    ? ;
.bss:00412147                 db    ? ;
.bss:00412148                 db    ? ;
.bss:00412149                 db    ? ;
.bss:0041214A                 db    ? ;
.bss:0041214B                 db    ? ;
.bss:0041214C                 db    ? ;
.bss:0041214D                 db    ? ;
.bss:0041214E                 db    ? ;
.bss:0041214F                 db    ? ;
.bss:00412150                 db    ? ;
.bss:00412151                 db    ? ;
.bss:00412152                 db    ? ;
.bss:00412153                 db    ? ;
.bss:00412154                 db    ? ;
.bss:00412155                 db    ? ;
.bss:00412156                 db    ? ;
.bss:00412157                 db    ? ;
.bss:00412158                 db    ? ;
.bss:00412159                 db    ? ;
.bss:0041215A                 db    ? ;
.bss:0041215B                 db    ? ;
.bss:0041215C                 db    ? ;
.bss:0041215D                 db    ? ;
.bss:0041215E                 db    ? ;
.bss:0041215F                 db    ? ;
.bss:00412160                 db    ? ;
.bss:00412161                 db    ? ;
.bss:00412162                 db    ? ;
.bss:00412163                 db    ? ;
.bss:00412164                 db    ? ;
.bss:00412165                 db    ? ;
.bss:00412166                 db    ? ;
.bss:00412167                 db    ? ;
.bss:00412168                 db    ? ;
.bss:00412169                 db    ? ;
.bss:0041216A                 db    ? ;
.bss:0041216B                 db    ? ;
.bss:0041216C                 db    ? ;
.bss:0041216D                 db    ? ;
.bss:0041216E                 db    ? ;
.bss:0041216F                 db    ? ;
.bss:00412170                 db    ? ;
.bss:00412171                 db    ? ;
.bss:00412172                 db    ? ;
.bss:00412173                 db    ? ;
.bss:00412174                 db    ? ;
.bss:00412175                 db    ? ;
.bss:00412176                 db    ? ;
.bss:00412177                 db    ? ;
.bss:00412178                 db    ? ;
.bss:00412179                 db    ? ;
.bss:0041217A                 db    ? ;
.bss:0041217B                 db    ? ;
.bss:0041217C                 db    ? ;
.bss:0041217D                 db    ? ;
.bss:0041217E                 db    ? ;
.bss:0041217F                 db    ? ;
.bss:00412180                 db    ? ;
.bss:00412181                 db    ? ;
.bss:00412182                 db    ? ;
.bss:00412183                 db    ? ;
.bss:00412184                 db    ? ;
.bss:00412185                 db    ? ;
.bss:00412186                 db    ? ;
.bss:00412187                 db    ? ;
.bss:00412188                 db    ? ;
.bss:00412189                 db    ? ;
.bss:0041218A                 db    ? ;
.bss:0041218B                 db    ? ;
.bss:0041218C                 db    ? ;
.bss:0041218D                 db    ? ;
.bss:0041218E                 db    ? ;
.bss:0041218F                 db    ? ;
.bss:00412190                 db    ? ;
.bss:00412191                 db    ? ;
.bss:00412192                 db    ? ;
.bss:00412193                 db    ? ;
.bss:00412194                 db    ? ;
.bss:00412195                 db    ? ;
.bss:00412196                 db    ? ;
.bss:00412197                 db    ? ;
.bss:00412198                 db    ? ;
.bss:00412199                 db    ? ;
.bss:0041219A                 db    ? ;
.bss:0041219B                 db    ? ;
.bss:0041219C                 db    ? ;
.bss:0041219D                 db    ? ;
.bss:0041219E                 db    ? ;
.bss:0041219F                 db    ? ;
.bss:004121A0                 db    ? ;
.bss:004121A1                 db    ? ;
.bss:004121A2                 db    ? ;
.bss:004121A3                 db    ? ;
.bss:004121A4                 db    ? ;
.bss:004121A5                 db    ? ;
.bss:004121A6                 db    ? ;
.bss:004121A7                 db    ? ;
.bss:004121A8                 db    ? ;
.bss:004121A9                 db    ? ;
.bss:004121AA                 db    ? ;
.bss:004121AB                 db    ? ;
.bss:004121AC                 db    ? ;
.bss:004121AD                 db    ? ;
.bss:004121AE                 db    ? ;
.bss:004121AF                 db    ? ;
.bss:004121B0                 db    ? ;
.bss:004121B1                 db    ? ;
.bss:004121B2                 db    ? ;
.bss:004121B3                 db    ? ;
.bss:004121B4                 db    ? ;
.bss:004121B5                 db    ? ;
.bss:004121B6                 db    ? ;
.bss:004121B7                 db    ? ;
.bss:004121B8                 db    ? ;
.bss:004121B9                 db    ? ;
.bss:004121BA                 db    ? ;
.bss:004121BB                 db    ? ;
.bss:004121BC                 db    ? ;
.bss:004121BD                 db    ? ;
.bss:004121BE                 db    ? ;
.bss:004121BF                 db    ? ;
.bss:004121C0 dword_4121C0    dd ?                    ; DATA XREF: .text:loc_406DB1↑o
.bss:004121C0                                         ; .text:loc_406DD0↑o ...
.bss:004121C4 dword_4121C4    dd ?                    ; DATA XREF: .text:loc_406E50↑o
.bss:004121C4                                         ; .text:004072D8↑r ...
.bss:004121C8 dword_4121C8    dd ?                    ; DATA XREF: .text:004072D2↑r
.bss:004121C8                                         ; sub_407380+2C↑r
.bss:004121CC dword_4121CC    dd ?                    ; DATA XREF: .text:004072C6↑r
.bss:004121CC                                         ; sub_407380+22↑r
.bss:004121D0 dword_4121D0    dd ?                    ; DATA XREF: .text:004072E2↑r
.bss:004121D0                                         ; sub_407380+36↑r
.bss:004121D4 dword_4121D4    dd ?                    ; DATA XREF: .text:004072F2↑r
.bss:004121D4                                         ; sub_407380+4E↑r
.bss:004121D8 dword_4121D8    dd ?                    ; DATA XREF: .text:0040730F↑r
.bss:004121D8                                         ; sub_407380+62↑r
.bss:004121DC dword_4121DC    dd ?                    ; DATA XREF: .text:00407305↑r
.bss:004121DC                                         ; sub_407380+70↑r
.bss:004121E0 dword_4121E0    dd ?                    ; DATA XREF: .text:004072E8↑r
.bss:004121E0                                         ; sub_407380+7A↑r
.bss:004121E4                 align 10h
.bss:004121F0 ; char *Str1
.bss:004121F0 Str1            dd ?                    ; DATA XREF: sub_407824:loc_40785D↑w
.bss:004121F0                                         ; sub_407824:loc_407990↑r
.bss:004121F4                 align 10h
.bss:00412200 dword_412200    dd ?                    ; DATA XREF: sub_407824+2D↑r
.bss:00412200                                         ; sub_407824+3F↑w
.bss:00412204                 align 10h
.bss:00412210 dword_412210    dd ?                    ; DATA XREF: sub_4084E0+100↑r
.bss:00412210                                         ; sub_4084E0+308↑w
.bss:00412214                 align 10h
.bss:00412220 ; char *dword_412220
.bss:00412220 dword_412220    dd ?                    ; DATA XREF: sub_4084E0:loc_408844↑r
.bss:00412220                                         ; sub_4084E0+3B6↑r ...
.bss:00412224                 align 10h
.bss:00412230 dword_412230    dd ?                    ; DATA XREF: sub_40A1B0+1C↑r
.bss:00412230                                         ; sub_40A1B0+104↑w
.bss:00412234                 align 10h
.bss:00412240 dword_412240    dd ?                    ; DATA XREF: sub_40A1B0+B↑r
.bss:00412240                                         ; sub_40A1B0+71↑w
.bss:00412244                 align 10h
.bss:00412250 dword_412250    dd ?                    ; DATA XREF: sub_40A1B0+85↑r
.bss:00412250                                         ; sub_40A1B0+B9↑w
.bss:00412254 dword_412254    dd ?                    ; DATA XREF: sub_40A1B0+C4↑w
.bss:00412258 dword_412258    dd ?                    ; DATA XREF: sub_40A1B0+2E↑o
.bss:00412258                                         ; sub_40A1B0+CF↑w
.bss:0041225C dword_41225C    dd ?                    ; DATA XREF: sub_40A1B0+DA↑w
.bss:00412260                 db    ? ;
.bss:00412261                 db    ? ;
.bss:00412262                 db    ? ;
.bss:00412263                 db    ? ;
.bss:00412264                 db    ? ;
.bss:00412265                 db    ? ;
.bss:00412266                 db    ? ;
.bss:00412267                 db    ? ;
.bss:00412268                 db    ? ;
.bss:00412269                 db    ? ;
.bss:0041226A                 db    ? ;
.bss:0041226B                 db    ? ;
.bss:0041226C                 db    ? ;
.bss:0041226D                 db    ? ;
.bss:0041226E                 db    ? ;
.bss:0041226F                 db    ? ;
.bss:00412270                 db    ? ;
.bss:00412271                 db    ? ;
.bss:00412272                 db    ? ;
.bss:00412273                 db    ? ;
.bss:00412274                 db    ? ;
.bss:00412275                 db    ? ;
.bss:00412276                 db    ? ;
.bss:00412277                 db    ? ;
.bss:00412278                 db    ? ;
.bss:00412279                 db    ? ;
.bss:0041227A                 db    ? ;
.bss:0041227B                 db    ? ;
.bss:0041227C                 db    ? ;
.bss:0041227D                 db    ? ;
.bss:0041227E                 db    ? ;
.bss:0041227F                 db    ? ;
.bss:00412280                 db    ? ;
.bss:00412281                 db    ? ;
.bss:00412282                 db    ? ;
.bss:00412283                 db    ? ;
.bss:00412284                 db    ? ;
.bss:00412285                 db    ? ;
.bss:00412286                 db    ? ;
.bss:00412287                 db    ? ;
.bss:00412288                 db    ? ;
.bss:00412289                 db    ? ;
.bss:0041228A                 db    ? ;
.bss:0041228B                 db    ? ;
.bss:0041228C                 db    ? ;
.bss:0041228D                 db    ? ;
.bss:0041228E                 db    ? ;
.bss:0041228F                 db    ? ;
.bss:00412290                 db    ? ;
.bss:00412291                 db    ? ;
.bss:00412292                 db    ? ;
.bss:00412293                 db    ? ;
.bss:00412294                 db    ? ;
.bss:00412295                 db    ? ;
.bss:00412296                 db    ? ;
.bss:00412297                 db    ? ;
.bss:00412298                 db    ? ;
.bss:00412299                 db    ? ;
.bss:0041229A                 db    ? ;
.bss:0041229B                 db    ? ;
.bss:0041229C                 db    ? ;
.bss:0041229D                 db    ? ;
.bss:0041229E                 db    ? ;
.bss:0041229F                 db    ? ;
.bss:004122A0                 db    ? ;
.bss:004122A1                 db    ? ;
.bss:004122A2                 db    ? ;
.bss:004122A3                 db    ? ;
.bss:004122A4                 db    ? ;
.bss:004122A5                 db    ? ;
.bss:004122A6                 db    ? ;
.bss:004122A7                 db    ? ;
.bss:004122A8                 db    ? ;
.bss:004122A9                 db    ? ;
.bss:004122AA                 db    ? ;
.bss:004122AB                 db    ? ;
.bss:004122AC                 db    ? ;
.bss:004122AD                 db    ? ;
.bss:004122AE                 db    ? ;
.bss:004122AF                 db    ? ;
.bss:004122B0                 db    ? ;
.bss:004122B1                 db    ? ;
.bss:004122B2                 db    ? ;
.bss:004122B3                 db    ? ;
.bss:004122B4                 db    ? ;
.bss:004122B5                 db    ? ;
.bss:004122B6                 db    ? ;
.bss:004122B7                 db    ? ;
.bss:004122B8                 db    ? ;
.bss:004122B9                 db    ? ;
.bss:004122BA                 db    ? ;
.bss:004122BB                 db    ? ;
.bss:004122BC                 db    ? ;
.bss:004122BD                 db    ? ;
.bss:004122BE                 db    ? ;
.bss:004122BF                 db    ? ;
.bss:004122C0                 db    ? ;
.bss:004122C1                 db    ? ;
.bss:004122C2                 db    ? ;
.bss:004122C3                 db    ? ;
.bss:004122C4                 db    ? ;
.bss:004122C5                 db    ? ;
.bss:004122C6                 db    ? ;
.bss:004122C7                 db    ? ;
.bss:004122C8                 db    ? ;
.bss:004122C9                 db    ? ;
.bss:004122CA                 db    ? ;
.bss:004122CB                 db    ? ;
.bss:004122CC                 db    ? ;
.bss:004122CD                 db    ? ;
.bss:004122CE                 db    ? ;
.bss:004122CF                 db    ? ;
.bss:004122D0                 db    ? ;
.bss:004122D1                 db    ? ;
.bss:004122D2                 db    ? ;
.bss:004122D3                 db    ? ;
.bss:004122D4                 db    ? ;
.bss:004122D5                 db    ? ;
.bss:004122D6                 db    ? ;
.bss:004122D7                 db    ? ;
.bss:004122D8                 db    ? ;
.bss:004122D9                 db    ? ;
.bss:004122DA                 db    ? ;
.bss:004122DB                 db    ? ;
.bss:004122DC                 db    ? ;
.bss:004122DD                 db    ? ;
.bss:004122DE                 db    ? ;
.bss:004122DF                 db    ? ;
.bss:004122E0                 db    ? ;
.bss:004122E1                 db    ? ;
.bss:004122E2                 db    ? ;
.bss:004122E3                 db    ? ;
.bss:004122E4                 db    ? ;
.bss:004122E5                 db    ? ;
.bss:004122E6                 db    ? ;
.bss:004122E7                 db    ? ;
.bss:004122E8                 db    ? ;
.bss:004122E9                 db    ? ;
.bss:004122EA                 db    ? ;
.bss:004122EB                 db    ? ;
.bss:004122EC                 db    ? ;
.bss:004122ED                 db    ? ;
.bss:004122EE                 db    ? ;
.bss:004122EF                 db    ? ;
.bss:004122F0                 db    ? ;
.bss:004122F1                 db    ? ;
.bss:004122F2                 db    ? ;
.bss:004122F3                 db    ? ;
.bss:004122F4                 db    ? ;
.bss:004122F5                 db    ? ;
.bss:004122F6                 db    ? ;
.bss:004122F7                 db    ? ;
.bss:004122F8                 db    ? ;
.bss:004122F9                 db    ? ;
.bss:004122FA                 db    ? ;
.bss:004122FB                 db    ? ;
.bss:004122FC                 db    ? ;
.bss:004122FD                 db    ? ;
.bss:004122FE                 db    ? ;
.bss:004122FF                 db    ? ;
.bss:00412300                 db    ? ;
.bss:00412301                 db    ? ;
.bss:00412302                 db    ? ;
.bss:00412303                 db    ? ;
.bss:00412304                 db    ? ;
.bss:00412305                 db    ? ;
.bss:00412306                 db    ? ;
.bss:00412307                 db    ? ;
.bss:00412308                 db    ? ;
.bss:00412309                 db    ? ;
.bss:0041230A                 db    ? ;
.bss:0041230B                 db    ? ;
.bss:0041230C                 db    ? ;
.bss:0041230D                 db    ? ;
.bss:0041230E                 db    ? ;
.bss:0041230F                 db    ? ;
.bss:00412310                 db    ? ;
.bss:00412311                 db    ? ;
.bss:00412312                 db    ? ;
.bss:00412313                 db    ? ;
.bss:00412314                 db    ? ;
.bss:00412315                 db    ? ;
.bss:00412316                 db    ? ;
.bss:00412317                 db    ? ;
.bss:00412318                 db    ? ;
.bss:00412319                 db    ? ;
.bss:0041231A                 db    ? ;
.bss:0041231B                 db    ? ;
.bss:0041231C                 db    ? ;
.bss:0041231D                 db    ? ;
.bss:0041231E                 db    ? ;
.bss:0041231F                 db    ? ;
.bss:00412320                 db    ? ;
.bss:00412321                 db    ? ;
.bss:00412322                 db    ? ;
.bss:00412323                 db    ? ;
.bss:00412324                 db    ? ;
.bss:00412325                 db    ? ;
.bss:00412326                 db    ? ;
.bss:00412327                 db    ? ;
.bss:00412328                 db    ? ;
.bss:00412329                 db    ? ;
.bss:0041232A                 db    ? ;
.bss:0041232B                 db    ? ;
.bss:0041232C                 db    ? ;
.bss:0041232D                 db    ? ;
.bss:0041232E                 db    ? ;
.bss:0041232F                 db    ? ;
.bss:00412330                 db    ? ;
.bss:00412331                 db    ? ;
.bss:00412332                 db    ? ;
.bss:00412333                 db    ? ;
.bss:00412334                 db    ? ;
.bss:00412335                 db    ? ;
.bss:00412336                 db    ? ;
.bss:00412337                 db    ? ;
.bss:00412338                 db    ? ;
.bss:00412339                 db    ? ;
.bss:0041233A                 db    ? ;
.bss:0041233B                 db    ? ;
.bss:0041233C                 db    ? ;
.bss:0041233D                 db    ? ;
.bss:0041233E                 db    ? ;
.bss:0041233F                 db    ? ;
.bss:00412340                 db    ? ;
.bss:00412341                 db    ? ;
.bss:00412342                 db    ? ;
.bss:00412343                 db    ? ;
.bss:00412344                 db    ? ;
.bss:00412345                 db    ? ;
.bss:00412346                 db    ? ;
.bss:00412347                 db    ? ;
.bss:00412348                 db    ? ;
.bss:00412349                 db    ? ;
.bss:0041234A                 db    ? ;
.bss:0041234B                 db    ? ;
.bss:0041234C                 db    ? ;
.bss:0041234D                 db    ? ;
.bss:0041234E                 db    ? ;
.bss:0041234F                 db    ? ;
.bss:00412350                 db    ? ;
.bss:00412351                 db    ? ;
.bss:00412352                 db    ? ;
.bss:00412353                 db    ? ;
.bss:00412354                 db    ? ;
.bss:00412355                 db    ? ;
.bss:00412356                 db    ? ;
.bss:00412357                 db    ? ;
.bss:00412358                 db    ? ;
.bss:00412359                 db    ? ;
.bss:0041235A                 db    ? ;
.bss:0041235B                 db    ? ;
.bss:0041235C                 db    ? ;
.bss:0041235D                 db    ? ;
.bss:0041235E                 db    ? ;
.bss:0041235F                 db    ? ;
.bss:00412360                 db    ? ;
.bss:00412361                 db    ? ;
.bss:00412362                 db    ? ;
.bss:00412363                 db    ? ;
.bss:00412364                 db    ? ;
.bss:00412365                 db    ? ;
.bss:00412366                 db    ? ;
.bss:00412367                 db    ? ;
.bss:00412368                 db    ? ;
.bss:00412369                 db    ? ;
.bss:0041236A                 db    ? ;
.bss:0041236B                 db    ? ;
.bss:0041236C                 db    ? ;
.bss:0041236D                 db    ? ;
.bss:0041236E                 db    ? ;
.bss:0041236F                 db    ? ;
.bss:00412370                 db    ? ;
.bss:00412371                 db    ? ;
.bss:00412372                 db    ? ;
.bss:00412373                 db    ? ;
.bss:00412374                 db    ? ;
.bss:00412375                 db    ? ;
.bss:00412376                 db    ? ;
.bss:00412377                 db    ? ;
.bss:00412378                 db    ? ;
.bss:00412379                 db    ? ;
.bss:0041237A                 db    ? ;
.bss:0041237B                 db    ? ;
.bss:0041237C                 db    ? ;
.bss:0041237D                 db    ? ;
.bss:0041237E                 db    ? ;
.bss:0041237F                 db    ? ;
.bss:00412380                 db    ? ;
.bss:00412381                 db    ? ;
.bss:00412382                 db    ? ;
.bss:00412383                 db    ? ;
.bss:00412384                 db    ? ;
.bss:00412385                 db    ? ;
.bss:00412386                 db    ? ;
.bss:00412387                 db    ? ;
.bss:00412388                 db    ? ;
.bss:00412389                 db    ? ;
.bss:0041238A                 db    ? ;
.bss:0041238B                 db    ? ;
.bss:0041238C                 db    ? ;
.bss:0041238D                 db    ? ;
.bss:0041238E                 db    ? ;
.bss:0041238F                 db    ? ;
.bss:00412390                 db    ? ;
.bss:00412391                 db    ? ;
.bss:00412392                 db    ? ;
.bss:00412393                 db    ? ;
.bss:00412394                 db    ? ;
.bss:00412395                 db    ? ;
.bss:00412396                 db    ? ;
.bss:00412397                 db    ? ;
.bss:00412398                 db    ? ;
.bss:00412399                 db    ? ;
.bss:0041239A                 db    ? ;
.bss:0041239B                 db    ? ;
.bss:0041239C                 db    ? ;
.bss:0041239D                 db    ? ;
.bss:0041239E                 db    ? ;
.bss:0041239F                 db    ? ;
.bss:004123A0                 db    ? ;
.bss:004123A1                 db    ? ;
.bss:004123A2                 db    ? ;
.bss:004123A3                 db    ? ;
.bss:004123A4                 db    ? ;
.bss:004123A5                 db    ? ;
.bss:004123A6                 db    ? ;
.bss:004123A7                 db    ? ;
.bss:004123A8                 db    ? ;
.bss:004123A9                 db    ? ;
.bss:004123AA                 db    ? ;
.bss:004123AB                 db    ? ;
.bss:004123AC                 db    ? ;
.bss:004123AD                 db    ? ;
.bss:004123AE                 db    ? ;
.bss:004123AF                 db    ? ;
.bss:004123B0                 db    ? ;
.bss:004123B1                 db    ? ;
.bss:004123B2                 db    ? ;
.bss:004123B3                 db    ? ;
.bss:004123B4                 db    ? ;
.bss:004123B5                 db    ? ;
.bss:004123B6                 db    ? ;
.bss:004123B7                 db    ? ;
.bss:004123B8                 db    ? ;
.bss:004123B9                 db    ? ;
.bss:004123BA                 db    ? ;
.bss:004123BB                 db    ? ;
.bss:004123BC                 db    ? ;
.bss:004123BD                 db    ? ;
.bss:004123BE                 db    ? ;
.bss:004123BF                 db    ? ;
.bss:004123C0                 db    ? ;
.bss:004123C1                 db    ? ;
.bss:004123C2                 db    ? ;
.bss:004123C3                 db    ? ;
.bss:004123C4                 db    ? ;
.bss:004123C5                 db    ? ;
.bss:004123C6                 db    ? ;
.bss:004123C7                 db    ? ;
.bss:004123C8                 db    ? ;
.bss:004123C9                 db    ? ;
.bss:004123CA                 db    ? ;
.bss:004123CB                 db    ? ;
.bss:004123CC                 db    ? ;
.bss:004123CD                 db    ? ;
.bss:004123CE                 db    ? ;
.bss:004123CF                 db    ? ;
.bss:004123D0                 db    ? ;
.bss:004123D1                 db    ? ;
.bss:004123D2                 db    ? ;
.bss:004123D3                 db    ? ;
.bss:004123D4                 db    ? ;
.bss:004123D5                 db    ? ;
.bss:004123D6                 db    ? ;
.bss:004123D7                 db    ? ;
.bss:004123D8                 db    ? ;
.bss:004123D9                 db    ? ;
.bss:004123DA                 db    ? ;
.bss:004123DB                 db    ? ;
.bss:004123DC                 db    ? ;
.bss:004123DD                 db    ? ;
.bss:004123DE                 db    ? ;
.bss:004123DF                 db    ? ;
.bss:004123E0                 db    ? ;
.bss:004123E1                 db    ? ;
.bss:004123E2                 db    ? ;
.bss:004123E3                 db    ? ;
.bss:004123E4                 db    ? ;
.bss:004123E5                 db    ? ;
.bss:004123E6                 db    ? ;
.bss:004123E7                 db    ? ;
.bss:004123E8                 db    ? ;
.bss:004123E9                 db    ? ;
.bss:004123EA                 db    ? ;
.bss:004123EB                 db    ? ;
.bss:004123EC                 db    ? ;
.bss:004123ED                 db    ? ;
.bss:004123EE                 db    ? ;
.bss:004123EF                 db    ? ;
.bss:004123F0                 db    ? ;
.bss:004123F1                 db    ? ;
.bss:004123F2                 db    ? ;
.bss:004123F3                 db    ? ;
.bss:004123F4                 db    ? ;
.bss:004123F5                 db    ? ;
.bss:004123F6                 db    ? ;
.bss:004123F7                 db    ? ;
.bss:004123F8                 db    ? ;
.bss:004123F9                 db    ? ;
.bss:004123FA                 db    ? ;
.bss:004123FB                 db    ? ;
.bss:004123FC                 db    ? ;
.bss:004123FD                 db    ? ;
.bss:004123FE                 db    ? ;
.bss:004123FF                 db    ? ;
.bss:00412400                 db    ? ;
.bss:00412401                 db    ? ;
.bss:00412402                 db    ? ;
.bss:00412403                 db    ? ;
.bss:00412404                 db    ? ;
.bss:00412405                 db    ? ;
.bss:00412406                 db    ? ;
.bss:00412407                 db    ? ;
.bss:00412408                 db    ? ;
.bss:00412409                 db    ? ;
.bss:0041240A                 db    ? ;
.bss:0041240B                 db    ? ;
.bss:0041240C                 db    ? ;
.bss:0041240D                 db    ? ;
.bss:0041240E                 db    ? ;
.bss:0041240F                 db    ? ;
.bss:00412410                 db    ? ;
.bss:00412411                 db    ? ;
.bss:00412412                 db    ? ;
.bss:00412413                 db    ? ;
.bss:00412414                 db    ? ;
.bss:00412415                 db    ? ;
.bss:00412416                 db    ? ;
.bss:00412417                 db    ? ;
.bss:00412418                 db    ? ;
.bss:00412419                 db    ? ;
.bss:0041241A                 db    ? ;
.bss:0041241B                 db    ? ;
.bss:0041241C                 db    ? ;
.bss:0041241D                 db    ? ;
.bss:0041241E                 db    ? ;
.bss:0041241F                 db    ? ;
.bss:00412420                 db    ? ;
.bss:00412421                 db    ? ;
.bss:00412422                 db    ? ;
.bss:00412423                 db    ? ;
.bss:00412424                 db    ? ;
.bss:00412425                 db    ? ;
.bss:00412426                 db    ? ;
.bss:00412427                 db    ? ;
.bss:00412428                 db    ? ;
.bss:00412429                 db    ? ;
.bss:0041242A                 db    ? ;
.bss:0041242B                 db    ? ;
.bss:0041242C                 db    ? ;
.bss:0041242D                 db    ? ;
.bss:0041242E                 db    ? ;
.bss:0041242F                 db    ? ;
.bss:00412430                 db    ? ;
.bss:00412431                 db    ? ;
.bss:00412432                 db    ? ;
.bss:00412433                 db    ? ;
.bss:00412434                 db    ? ;
.bss:00412435                 db    ? ;
.bss:00412436                 db    ? ;
.bss:00412437                 db    ? ;
.bss:00412438                 db    ? ;
.bss:00412439                 db    ? ;
.bss:0041243A                 db    ? ;
.bss:0041243B                 db    ? ;
.bss:0041243C                 db    ? ;
.bss:0041243D                 db    ? ;
.bss:0041243E                 db    ? ;
.bss:0041243F                 db    ? ;
.bss:00412440                 db    ? ;
.bss:00412441                 db    ? ;
.bss:00412442                 db    ? ;
.bss:00412443                 db    ? ;
.bss:00412444                 db    ? ;
.bss:00412445                 db    ? ;
.bss:00412446                 db    ? ;
.bss:00412447                 db    ? ;
.bss:00412448                 db    ? ;
.bss:00412449                 db    ? ;
.bss:0041244A                 db    ? ;
.bss:0041244B                 db    ? ;
.bss:0041244C                 db    ? ;
.bss:0041244D                 db    ? ;
.bss:0041244E                 db    ? ;
.bss:0041244F                 db    ? ;
.bss:00412450 dword_412450    dd ?                    ; DATA XREF: sub_40AD50+7↑r
.bss:00412450                                         ; sub_40AD50+2B↑w ...
.bss:00412454                 align 10h
.bss:00412460 ; struct _SYSTEM_INFO SystemInfo
.bss:00412460 SystemInfo      _SYSTEM_INFO <?>        ; DATA XREF: sub_40AD50+21↑o
.bss:00412460                                         ; sub_40AD50+33↑o
.bss:00412484                 align 10h
.bss:00412490 dword_412490    dd ?                    ; DATA XREF: sub_40BA90+8↑r
.bss:00412490                                         ; sub_40BBA0:loc_40BC22↑w ...
.bss:00412494                 align 10h
.bss:004124A0 ; struct _OSVERSIONINFOA VersionInformation
.bss:004124A0 VersionInformation _OSVERSIONINFOA <?>  ; DATA XREF: sub_40BBA0:loc_40BBC0↑o
.bss:004124A0                                         ; sub_40BBA0+2C↑w ...
.bss:00412534 word_412534     dw ?                    ; DATA XREF: sub_40BBA0:loc_40BC53↑r
.bss:00412536                 align 4
.bss:00412538 word_412538     dw ?                    ; DATA XREF: .text:loc_40B616↑r
.bss:00412538                                         ; .text:0040B644↑r ...
.bss:0041253A byte_41253A     db ?                    ; DATA XREF: .text:0040B5D5↑r
.bss:0041253B                 align 10h
.bss:00412540 dword_412540    dd ?                    ; DATA XREF: sub_40BBA0+6↑r
.bss:00412540                                         ; sub_40BBA0+75↑w
.bss:00412544                 align 10h
.bss:00412550 dword_412550    dd ?                    ; DATA XREF: sub_40D0B0+6E↑r
.bss:00412550                                         ; sub_40D0B0+9A↑r ...
.bss:00412554 dword_412554    dd ?                    ; DATA XREF: sub_40D0B0:loc_40D118↑r
.bss:00412554                                         ; sub_40D0B0+A0↑r ...
.bss:00412558                 align 10h
.bss:00412560 dword_412560    dd ?                    ; DATA XREF: sub_40D5C0↑r
.bss:00412560                                         ; .text:loc_40D802↑w
.bss:00412564                 align 10h
.bss:00412570 dword_412570    dd ?                    ; DATA XREF: sub_401A30+4A↑w
.bss:00412570                                         ; sub_401A30+2D6↑r ...
.bss:00412574                 db    ? ;
.bss:00412575                 db    ? ;
.bss:00412576                 db    ? ;
.bss:00412577                 db    ? ;
.bss:00412578                 db    ? ;
.bss:00412579                 db    ? ;
.bss:0041257A                 db    ? ;
.bss:0041257B                 db    ? ;
.bss:0041257C                 db    ? ;
.bss:0041257D                 db    ? ;
.bss:0041257E                 db    ? ;
.bss:0041257F                 db    ? ;
.bss:00412580                 db    ? ;
.bss:00412581                 db    ? ;
.bss:00412582                 db    ? ;
.bss:00412583                 db    ? ;
.bss:00412584                 db    ? ;
.bss:00412585                 db    ? ;
.bss:00412586                 db    ? ;
.bss:00412587                 db    ? ;
.bss:00412588                 db    ? ;
.bss:00412589                 db    ? ;
.bss:0041258A                 db    ? ;
.bss:0041258B                 db    ? ;
.bss:0041258C                 db    ? ;
.bss:0041258D                 db    ? ;
.bss:0041258E                 db    ? ;
.bss:0041258F                 db    ? ;
.bss:00412590 ; char dword_412590[]
.bss:00412590 dword_412590    dd ?                    ; DATA XREF: sub_401A30+4CD↑r
.bss:00412590                                         ; sub_401A30+527↑r ...
.bss:00412594                 align 10h
.bss:004125A0 dword_4125A0    dd ?                    ; CODE XREF: sub_407824+63↑p
.bss:004125A0                                         ; DATA XREF: sub_407720+1E↑r ...
.bss:004125A4                 align 10h
.bss:004125B0 dword_4125B0    dd ?                    ; DATA XREF: sub_407720+4E↑w
.bss:004125B0                                         ; sub_407824+AB↑w
.bss:004125B4                 db    ? ;
.bss:004125B5                 db    ? ;
.bss:004125B6                 db    ? ;
.bss:004125B7                 db    ? ;
.bss:004125B8                 db    ? ;
.bss:004125B9                 db    ? ;
.bss:004125BA                 db    ? ;
.bss:004125BB                 db    ? ;
.bss:004125BC                 db    ? ;
.bss:004125BD                 db    ? ;
.bss:004125BE                 db    ? ;
.bss:004125BF                 db    ? ;
.bss:004125C0                 db    ? ;
.bss:004125C1                 db    ? ;
.bss:004125C2                 db    ? ;
.bss:004125C3                 db    ? ;
.bss:004125C4                 db    ? ;
.bss:004125C5                 db    ? ;
.bss:004125C6                 db    ? ;
.bss:004125C7                 db    ? ;
.bss:004125C8                 db    ? ;
.bss:004125C9                 db    ? ;
.bss:004125CA                 db    ? ;
.bss:004125CB                 db    ? ;
.bss:004125CC                 db    ? ;
.bss:004125CD                 db    ? ;
.bss:004125CE                 db    ? ;
.bss:004125CF                 db    ? ;
.bss:004125D0                 db    ? ;
.bss:004125D1                 db    ? ;
.bss:004125D2                 db    ? ;
.bss:004125D3                 db    ? ;
.bss:004125D4                 db    ? ;
.bss:004125D5                 db    ? ;
.bss:004125D6                 db    ? ;
.bss:004125D7                 db    ? ;
.bss:004125D8                 db    ? ;
.bss:004125D9                 db    ? ;
.bss:004125DA                 db    ? ;
.bss:004125DB                 db    ? ;
.bss:004125DC                 db    ? ;
.bss:004125DD                 db    ? ;
.bss:004125DE                 db    ? ;
.bss:004125DF                 db    ? ;
.bss:004125E0 dword_4125E0    dd ?                    ; DATA XREF: sub_407824+13↑r
.bss:004125E4                 align 1000h
.bss:004125E4 _bss            ends
.bss:004125E4
.idata:00413000 ; Section 4. (virtual address 00013000)
.idata:00413000 ; Virtual size                  : 00000E34 (   3636.)
.idata:00413000 ; Section size in file          : 00001000 (   4096.)
.idata:00413000 ; Offset to raw data for section: 0000FA00
.idata:00413000 ; Flags C0000040: Data Readable Writable
.idata:00413000 ; Alignment     : default
.idata:00413000 ; ===========================================================================
.idata:00413000
.idata:00413000 ; Segment type: Externs
.idata:00413000 ; _idata
.idata:00413000
.idata:00413001
.idata:004132C0 ;
.idata:004132C0 ; Imports from libintl3.dll
.idata:004132C0 ;
.idata:004132C0                 extrn libintl_bindtextdomain:dword
.idata:004132C0                                         ; CODE XREF: sub_401A30+64↑p
.idata:004132C0                                         ; DATA XREF: sub_401A30+64↑r ...
.idata:004132C4                 extrn libintl_gettext:dword
.idata:004132C4                                         ; CODE XREF: sub_401A30+22B↑p
.idata:004132C4                                         ; sub_401A30:loc_401CD5↑p ...
.idata:004132C8                 extrn libintl_textdomain:dword
.idata:004132C8                                         ; CODE XREF: sub_401A30+71↑p
.idata:004132C8                                         ; DATA XREF: sub_401A30+71↑r ...
.idata:004132CC
.idata:004132D4 ;
.idata:004132D4 ; Imports from ADVAPI32.DLL
.idata:004132D4 ;
.idata:004132D4 ; LSTATUS (__stdcall *RegCloseKey)(HKEY hKey)
.idata:004132D4                 extrn __imp_RegCloseKey:dword
.idata:004132D4                                         ; DATA XREF: RegCloseKey↑r
.idata:004132D8 ; LSTATUS (__stdcall *RegOpenKeyExA)(HKEY hKey, LPCSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult)
.idata:004132D8                 extrn __imp_RegOpenKeyExA:dword
.idata:004132D8                                         ; DATA XREF: RegOpenKeyExA↑r
.idata:004132DC ; LSTATUS (__stdcall *RegQueryValueExA)(HKEY hKey, LPCSTR lpValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData)
.idata:004132DC                 extrn __imp_RegQueryValueExA:dword
.idata:004132DC                                         ; DATA XREF: RegQueryValueExA↑r
.idata:004132E0
.idata:004132E8 ;
.idata:004132E8 ; Imports from KERNEL32.dll
.idata:004132E8 ;
.idata:004132E8 ; BOOL (__stdcall *AreFileApisANSI)()
.idata:004132E8                 extrn __imp_AreFileApisANSI:dword
.idata:004132E8                                         ; DATA XREF: AreFileApisANSI↑r
.idata:004132EC ; BOOL (__stdcall *CloseHandle)(HANDLE hObject)
.idata:004132EC                 extrn __imp_CloseHandle:dword
.idata:004132EC                                         ; DATA XREF: CloseHandle↑r
.idata:004132F0 ; BOOL (__stdcall *CreateDirectoryA)(LPCSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes)
.idata:004132F0                 extrn __imp_CreateDirectoryA:dword
.idata:004132F0                                         ; DATA XREF: CreateDirectoryA↑r
.idata:004132F4 ; HANDLE (__stdcall *CreateFileA)(LPCSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile)
.idata:004132F4                 extrn __imp_CreateFileA:dword
.idata:004132F4                                         ; DATA XREF: CreateFileA↑r
.idata:004132F8 ; BOOL (__stdcall *DeviceIoControl)(HANDLE hDevice, DWORD dwIoControlCode, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesReturned, LPOVERLAPPED lpOverlapped)
.idata:004132F8                 extrn __imp_DeviceIoControl:dword
.idata:004132F8                                         ; DATA XREF: DeviceIoControl↑r
.idata:004132FC ; void (__stdcall __noreturn *ExitProcess)(UINT uExitCode)
.idata:004132FC                 extrn __imp_ExitProcess:dword
.idata:004132FC                                         ; DATA XREF: ExitProcess↑r
.idata:00413300 ; BOOL (__stdcall *FindClose)(HANDLE hFindFile)
.idata:00413300                 extrn __imp_FindClose:dword
.idata:00413300                                         ; DATA XREF: FindClose↑r
.idata:00413304 ; HANDLE (__stdcall *FindFirstFileA)(LPCSTR lpFileName, LPWIN32_FIND_DATAA lpFindFileData)
.idata:00413304                 extrn __imp_FindFirstFileA:dword
.idata:00413304                                         ; DATA XREF: FindFirstFileA↑r
.idata:00413308 ; BOOL (__stdcall *FindNextFileA)(HANDLE hFindFile, LPWIN32_FIND_DATAA lpFindFileData)
.idata:00413308                 extrn __imp_FindNextFileA:dword
.idata:00413308                                         ; DATA XREF: FindNextFileA↑r
.idata:0041330C ; BOOL (__stdcall *FreeLibrary)(HMODULE hLibModule)
.idata:0041330C                 extrn __imp_FreeLibrary:dword
.idata:0041330C                                         ; DATA XREF: FreeLibrary↑r
.idata:00413310 ; DWORD (__stdcall *GetCurrentDirectoryA)(DWORD nBufferLength, LPSTR lpBuffer)
.idata:00413310                 extrn __imp_GetCurrentDirectoryA:dword
.idata:00413310                                         ; DATA XREF: GetCurrentDirectoryA↑r
.idata:00413314 ; BOOL (__stdcall *GetDiskFreeSpaceA)(LPCSTR lpRootPathName, LPDWORD lpSectorsPerCluster, LPDWORD lpBytesPerSector, LPDWORD lpNumberOfFreeClusters, LPDWORD lpTotalNumberOfClusters)
.idata:00413314                 extrn __imp_GetDiskFreeSpaceA:dword
.idata:00413314                                         ; DATA XREF: GetDiskFreeSpaceA↑r
.idata:00413318 ; UINT (__stdcall *GetDriveTypeA)(LPCSTR lpRootPathName)
.idata:00413318                 extrn __imp_GetDriveTypeA:dword
.idata:00413318                                         ; DATA XREF: GetDriveTypeA↑r
.idata:0041331C ; DWORD (__stdcall *GetFileAttributesA)(LPCSTR lpFileName)
.idata:0041331C                 extrn __imp_GetFileAttributesA:dword
.idata:0041331C                                         ; DATA XREF: GetFileAttributesA↑r
.idata:00413320 ; BOOL (__stdcall *GetFileInformationByHandle)(HANDLE hFile, LPBY_HANDLE_FILE_INFORMATION lpFileInformation)
.idata:00413320                 extrn __imp_GetFileInformationByHandle:dword
.idata:00413320                                         ; DATA XREF: GetFileInformationByHandle↑r
.idata:00413324 ; DWORD (__stdcall *GetFileSize)(HANDLE hFile, LPDWORD lpFileSizeHigh)
.idata:00413324                 extrn __imp_GetFileSize:dword
.idata:00413324                                         ; DATA XREF: GetFileSize↑r
.idata:00413328 ; DWORD (__stdcall *GetFileType)(HANDLE hFile)
.idata:00413328                 extrn __imp_GetFileType:dword
.idata:00413328                                         ; DATA XREF: GetFileType↑r
.idata:0041332C ; DWORD (__stdcall *GetFullPathNameA)(LPCSTR lpFileName, DWORD nBufferLength, LPSTR lpBuffer, LPSTR *lpFilePart)
.idata:0041332C                 extrn __imp_GetFullPathNameA:dword
.idata:0041332C                                         ; DATA XREF: GetFullPathNameA↑r
.idata:00413330 ; DWORD (__stdcall *GetLastError)()
.idata:00413330                 extrn __imp_GetLastError:dword
.idata:00413330                                         ; DATA XREF: GetLastError↑r
.idata:00413334 ; DWORD (__stdcall *GetLogicalDriveStringsA)(DWORD nBufferLength, LPSTR lpBuffer)
.idata:00413334                 extrn __imp_GetLogicalDriveStringsA:dword
.idata:00413334                                         ; DATA XREF: GetLogicalDriveStringsA↑r
.idata:00413338 ; DWORD (__stdcall *GetModuleFileNameA)(HMODULE hModule, LPSTR lpFilename, DWORD nSize)
.idata:00413338                 extrn __imp_GetModuleFileNameA:dword
.idata:00413338                                         ; DATA XREF: GetModuleFileNameA↑r
.idata:0041333C ; HMODULE (__stdcall *GetModuleHandleA)(LPCSTR lpModuleName)
.idata:0041333C                 extrn __imp_GetModuleHandleA:dword
.idata:0041333C                                         ; DATA XREF: GetModuleHandleA↑r
.idata:00413340 ; FARPROC (__stdcall *GetProcAddress)(HMODULE hModule, LPCSTR lpProcName)
.idata:00413340                 extrn __imp_GetProcAddress:dword
.idata:00413340                                         ; DATA XREF: GetProcAddress↑r
.idata:00413344 ; HANDLE (__stdcall *GetProcessHeap)()
.idata:00413344                 extrn __imp_GetProcessHeap:dword
.idata:00413344                                         ; DATA XREF: GetProcessHeap↑r
.idata:00413348 ; DWORD (__stdcall *GetShortPathNameA)(LPCSTR lpszLongPath, LPSTR lpszShortPath, DWORD cchBuffer)
.idata:00413348                 extrn __imp_GetShortPathNameA:dword
.idata:00413348                                         ; DATA XREF: GetShortPathNameA↑r
.idata:0041334C ; void (__stdcall *GetSystemInfo)(LPSYSTEM_INFO lpSystemInfo)
.idata:0041334C                 extrn __imp_GetSystemInfo:dword
.idata:0041334C                                         ; DATA XREF: GetSystemInfo↑r
.idata:00413350 ; void (__stdcall *GetSystemTimeAsFileTime)(LPFILETIME lpSystemTimeAsFileTime)
.idata:00413350                 extrn __imp_GetSystemTimeAsFileTime:dword
.idata:00413350                                         ; DATA XREF: GetSystemTimeAsFileTime↑r
.idata:00413354 ; DWORD (__stdcall *GetTimeZoneInformation)(LPTIME_ZONE_INFORMATION lpTimeZoneInformation)
.idata:00413354                 extrn __imp_GetTimeZoneInformation:dword
.idata:00413354                                         ; DATA XREF: GetTimeZoneInformation↑r
.idata:00413358 ; DWORD (__stdcall *GetVersion)()
.idata:00413358                 extrn __imp_GetVersion:dword
.idata:00413358                                         ; DATA XREF: GetVersion↑r
.idata:0041335C ; BOOL (__stdcall *GetVersionExA)(LPOSVERSIONINFOA lpVersionInformation)
.idata:0041335C                 extrn __imp_GetVersionExA:dword
.idata:0041335C                                         ; DATA XREF: GetVersionExA↑r
.idata:00413360 ; BOOL (__stdcall *GetVolumeInformationA)(LPCSTR lpRootPathName, LPSTR lpVolumeNameBuffer, DWORD nVolumeNameSize, LPDWORD lpVolumeSerialNumber, LPDWORD lpMaximumComponentLength, LPDWORD lpFileSystemFlags, LPSTR lpFileSystemNameBuffer, DWORD nFileSystemNameSize)
.idata:00413360                 extrn __imp_GetVolumeInformationA:dword
.idata:00413360                                         ; DATA XREF: GetVolumeInformationA↑r
.idata:00413364 ; LPVOID (__stdcall *HeapAlloc)(HANDLE hHeap, DWORD dwFlags, SIZE_T dwBytes)
.idata:00413364                 extrn __imp_HeapAlloc:dword
.idata:00413364                                         ; DATA XREF: HeapAlloc↑r
.idata:00413368 ; BOOL (__stdcall *HeapFree)(HANDLE hHeap, DWORD dwFlags, LPVOID lpMem)
.idata:00413368                 extrn __imp_HeapFree:dword
.idata:00413368                                         ; DATA XREF: HeapFree↑r
.idata:0041336C ; HMODULE (__stdcall *LoadLibraryA)(LPCSTR lpLibFileName)
.idata:0041336C                 extrn __imp_LoadLibraryA:dword
.idata:0041336C                                         ; DATA XREF: LoadLibraryA↑r
.idata:00413370 ; int (__stdcall *MultiByteToWideChar)(UINT CodePage, DWORD dwFlags, LPCCH lpMultiByteStr, int cbMultiByte, LPWSTR lpWideCharStr, int cchWideChar)
.idata:00413370                 extrn __imp_MultiByteToWideChar:dword
.idata:00413370                                         ; DATA XREF: MultiByteToWideChar↑r
.idata:00413374 ; BOOL (__stdcall *PeekNamedPipe)(HANDLE hNamedPipe, LPVOID lpBuffer, DWORD nBufferSize, LPDWORD lpBytesRead, LPDWORD lpTotalBytesAvail, LPDWORD lpBytesLeftThisMessage)
.idata:00413374                 extrn __imp_PeekNamedPipe:dword
.idata:00413374                                         ; DATA XREF: PeekNamedPipe↑r
.idata:00413378 ; UINT (__stdcall *SetErrorMode)(UINT uMode)
.idata:00413378                 extrn __imp_SetErrorMode:dword
.idata:00413378                                         ; DATA XREF: SetErrorMode↑r
.idata:0041337C ; LPTOP_LEVEL_EXCEPTION_FILTER (__stdcall *SetUnhandledExceptionFilter)(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.idata:0041337C                 extrn __imp_SetUnhandledExceptionFilter:dword
.idata:0041337C                                         ; DATA XREF: SetUnhandledExceptionFilter↑r
.idata:00413380 ; BOOL (__stdcall *UnlockFile)(HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToUnlockLow, DWORD nNumberOfBytesToUnlockHigh)
.idata:00413380                 extrn __imp_UnlockFile:dword
.idata:00413380                                         ; DATA XREF: UnlockFile↑r
.idata:00413384 ; int (__stdcall *lstrcmpiA)(LPCSTR lpString1, LPCSTR lpString2)
.idata:00413384                 extrn __imp_lstrcmpiA:dword
.idata:00413384                                         ; DATA XREF: lstrcmpiA↑r
.idata:00413388 ; LPSTR (__stdcall *lstrcpyA)(LPSTR lpString1, LPCSTR lpString2)
.idata:00413388                 extrn __imp_lstrcpyA:dword
.idata:00413388                                         ; DATA XREF: lstrcpyA↑r
.idata:0041338C
.idata:00413394 ;
.idata:00413394 ; Imports from msvcrt.dll
.idata:00413394 ;
.idata:00413394 ; int (__cdecl *_chmod)(const char *FileName, int AccessMode)
.idata:00413394                 extrn __imp__chmod:dword
.idata:00413394                                         ; DATA XREF: _chmod↑r
.idata:00413398 ; int (__cdecl *_close)(int FileHandle)
.idata:00413398                 extrn __imp__close:dword
.idata:00413398                                         ; DATA XREF: _close↑r
.idata:0041339C ; int (__cdecl *_getpid)()
.idata:0041339C                 extrn __imp__getpid:dword
.idata:0041339C                                         ; DATA XREF: _getpid↑r
.idata:004133A0 ; int (__cdecl *_isatty)(int FileHandle)
.idata:004133A0                 extrn __imp__isatty:dword
.idata:004133A0                                         ; DATA XREF: _isatty↑r
.idata:004133A4 ; int (*_open)(const char *FileName, int OpenFlag, ...)
.idata:004133A4                 extrn __imp__open:dword ; DATA XREF: _open↑r
.idata:004133A8 ; int (__cdecl *_read)(int FileHandle, void *DstBuf, unsigned int MaxCharCount)
.idata:004133A8                 extrn __imp__read:dword ; DATA XREF: _read↑r
.idata:004133AC ; char *(__cdecl *_strdup)(const char *String)
.idata:004133AC                 extrn __imp__strdup:dword
.idata:004133AC                                         ; DATA XREF: _strdup↑r
.idata:004133B0 ; int (__cdecl *_stricmp)(const char *String1, const char *String2)
.idata:004133B0                 extrn __imp__stricmp:dword
.idata:004133B0                                         ; DATA XREF: _stricmp↑r
.idata:004133B4 ; int (__cdecl *_write)(int FileHandle, const void *Buf, unsigned int MaxCharCount)
.idata:004133B4                 extrn __imp__write:dword
.idata:004133B4                                         ; DATA XREF: _write↑r
.idata:004133B8
.idata:004133C0 ;
.idata:004133C0 ; Imports from MSVCP60.DLL
.idata:004133C0 ;
.idata:004133C0 ; size_t (__cdecl *mbrtowc)(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.idata:004133C0                 extrn __imp_mbrtowc:dword
.idata:004133C0                                         ; DATA XREF: mbrtowc↑r
.idata:004133C4
.idata:004133CC ;
.idata:004133CC ; Imports from msvcrt.dll
.idata:004133CC ;
.idata:004133CC                 extrn __imp___getmainargs:dword
.idata:004133CC                                         ; DATA XREF: __getmainargs↑r
.idata:004133D0 ; int _mb_cur_max
.idata:004133D0                 extrn __mb_cur_max:dword
.idata:004133D0                                         ; DATA XREF: sub_4047B0+58↑r
.idata:004133D0                                         ; sub_4054B0+45↑r ...
.idata:004133D4 ; char ***(__cdecl *__p__environ)()
.idata:004133D4                 extrn __imp___p__environ:dword
.idata:004133D4                                         ; DATA XREF: __p__environ↑r
.idata:004133D8 ; int *(__cdecl *__p__fmode)()
.idata:004133D8                 extrn __imp___p__fmode:dword
.idata:004133D8                                         ; DATA XREF: __p__fmode↑r
.idata:004133DC ; void (__cdecl *_set_app_type)(_crt_app_type Type)
.idata:004133DC                 extrn __set_app_type:dword
.idata:004133DC                                         ; CODE XREF: start+D↑p
.idata:004133DC                                         ; .text:0040102D↑p
.idata:004133DC                                         ; DATA XREF: ...
.idata:004133E0                 extrn __imp__assert:dword
.idata:004133E0                                         ; DATA XREF: _assert↑r
.idata:004133E4 ; void (__cdecl *_cexit)()
.idata:004133E4                 extrn __imp__cexit:dword
.idata:004133E4                                         ; DATA XREF: _cexit↑r
.idata:004133E8 ; int (__cdecl *_close_0)(int FileHandle)
.idata:004133E8                 extrn __imp__close_0:dword
.idata:004133E8                                         ; DATA XREF: _close_0↑r
.idata:004133EC ; int *(__cdecl *_errno)()
.idata:004133EC                 extrn __imp__errno:dword
.idata:004133EC                                         ; DATA XREF: _errno↑r
.idata:004133F0 ; FILE *(__cdecl *_fdopen)(int FileHandle, const char *Format)
.idata:004133F0                 extrn __imp__fdopen:dword
.idata:004133F0                                         ; DATA XREF: _fdopen↑r
.idata:004133F4 ; __int64 (__cdecl *_filelengthi64)(int FileHandle)
.idata:004133F4                 extrn __imp__filelengthi64:dword
.idata:004133F4                                         ; DATA XREF: _filelengthi64↑r
.idata:004133F8 ; int (__cdecl *_flsbuf)(int Ch, FILE *File)
.idata:004133F8                 extrn __imp__flsbuf:dword
.idata:004133F8                                         ; DATA XREF: _flsbuf↑r
.idata:004133FC ; intptr_t (__cdecl *_get_osfhandle)(int FileHandle)
.idata:004133FC                 extrn __imp__get_osfhandle:dword
.idata:004133FC                                         ; DATA XREF: _get_osfhandle↑r
.idata:00413400 ; FILE iob[]
.idata:00413400                 extrn _iob:dword        ; DATA XREF: sub_401080+5C↑r
.idata:00413400                                         ; sub_401080+75↑r ...
.idata:00413404 ; int (__cdecl *_isctype)(int C, int Type)
.idata:00413404                 extrn __imp__isctype:dword
.idata:00413404                                         ; DATA XREF: _isctype↑r
.idata:00413408 ; _onexit_t (__cdecl *onexit)(_onexit_t Func)
.idata:00413408                 extrn _onexit:dword     ; CODE XREF: .text:0040106C↑p
.idata:00413408                                         ; DATA XREF: .text:0040106C↑r
.idata:0041340C ; int (*_open_0)(const char *FileName, int OpenFlag, ...)
.idata:0041340C                 extrn __imp__open_0:dword
.idata:0041340C                                         ; DATA XREF: _open_0↑r
.idata:00413410 ; const unsigned __int16 *pctype
.idata:00413410                 extrn _pctype:dword     ; DATA XREF: sub_4047B0:loc_405402↑r
.idata:00413410                                         ; sub_4054B0:loc_4059D0↑r ...
.idata:00413414 ; int (__cdecl *_setmode)(int FileHandle, int Mode)
.idata:00413414                 extrn __imp__setmode:dword
.idata:00413414                                         ; DATA XREF: _setmode↑r
.idata:00413418 ; int (__cdecl *_stricmp_0)(const char *String1, const char *String2)
.idata:00413418                 extrn __imp__stricmp_0:dword
.idata:00413418                                         ; DATA XREF: _stricmp_0↑r
.idata:0041341C ; void (__cdecl __noreturn *abort)()
.idata:0041341C                 extrn __imp_abort:dword ; DATA XREF: abort↑r
.idata:00413420 ; int (__cdecl *atexit)(void (__cdecl *)())
.idata:00413420                 extrn atexit:dword      ; CODE XREF: sub_401040+C↑p
.idata:00413420                                         ; DATA XREF: sub_401040+C↑r
.idata:00413424 ; void *(__cdecl *calloc)(size_t Count, size_t Size)
.idata:00413424                 extrn __imp_calloc:dword
.idata:00413424                                         ; DATA XREF: calloc↑r
.idata:00413428 ; char *(__cdecl *ctime)(const __time32_t *const Time)
.idata:00413428                 extrn __imp_ctime:dword ; DATA XREF: ctime↑r
.idata:0041342C ; void (__cdecl __noreturn *exit)(int Code)
.idata:0041342C                 extrn __imp_exit:dword  ; DATA XREF: exit↑r
.idata:00413430 ; int (__cdecl *fclose)(FILE *Stream)
.idata:00413430                 extrn __imp_fclose:dword
.idata:00413430                                         ; DATA XREF: fclose↑r
.idata:00413434 ; int (__cdecl *fflush)(FILE *Stream)
.idata:00413434                 extrn __imp_fflush:dword
.idata:00413434                                         ; DATA XREF: fflush↑r
.idata:00413438 ; FILE *(__cdecl *fopen)(const char *FileName, const char *Mode)
.idata:00413438                 extrn __imp_fopen:dword ; DATA XREF: fopen↑r
.idata:0041343C ; int (*fprintf)(FILE *const Stream, const char *const Format, ...)
.idata:0041343C                 extrn __imp_fprintf:dword
.idata:0041343C                                         ; DATA XREF: fprintf↑r
.idata:00413440 ; int (__cdecl *fputs)(const char *Buffer, FILE *Stream)
.idata:00413440                 extrn __imp_fputs:dword ; DATA XREF: fputs↑r
.idata:00413444 ; void (__cdecl *free)(void *Block)
.idata:00413444                 extrn __imp_free:dword  ; DATA XREF: free↑r
.idata:00413448 ; char *(__cdecl *getenv)(const char *VarName)
.idata:00413448                 extrn __imp_getenv:dword
.idata:00413448                                         ; DATA XREF: getenv↑r
.idata:0041344C ; int (__cdecl *isalpha)(int C)
.idata:0041344C                 extrn __imp_isalpha:dword
.idata:0041344C                                         ; DATA XREF: isalpha↑r
.idata:00413450 ; int (__cdecl *iswctype)(wint_t C, wctype_t Type)
.idata:00413450                 extrn __imp_iswctype:dword
.idata:00413450                                         ; DATA XREF: iswctype↑r
.idata:00413454 ; void *(__cdecl *malloc)(size_t Size)
.idata:00413454                 extrn __imp_malloc:dword
.idata:00413454                                         ; DATA XREF: malloc↑r
.idata:00413458 ; void *(__cdecl *memchr)(const void *Buf, int Val, size_t MaxCount)
.idata:00413458                 extrn __imp_memchr:dword
.idata:00413458                                         ; DATA XREF: memchr↑r
.idata:0041345C ; void *(__cdecl *memcpy)(void *, const void *Src, size_t Size)
.idata:0041345C                 extrn __imp_memcpy:dword
.idata:0041345C                                         ; DATA XREF: memcpy↑r
.idata:00413460 ; void *(__cdecl *memmove)(void *, const void *Src, size_t Size)
.idata:00413460                 extrn __imp_memmove:dword
.idata:00413460                                         ; DATA XREF: memmove↑r
.idata:00413464 ; void *(__cdecl *memset)(void *, int Val, size_t Size)
.idata:00413464                 extrn __imp_memset:dword
.idata:00413464                                         ; DATA XREF: memset↑r
.idata:00413468 ; int (*printf)(const char *const Format, ...)
.idata:00413468                 extrn __imp_printf:dword
.idata:00413468                                         ; DATA XREF: printf↑r
.idata:0041346C ; void *(__cdecl *realloc)(void *Block, size_t Size)
.idata:0041346C                 extrn __imp_realloc:dword
.idata:0041346C                                         ; DATA XREF: realloc↑r
.idata:00413470 ; char *(__cdecl *setlocale)(int Category, const char *Locale)
.idata:00413470                 extrn __imp_setlocale:dword
.idata:00413470                                         ; DATA XREF: setlocale↑r
.idata:00413474 ; _crt_signal_t (__cdecl *signal)(int Signal, _crt_signal_t Function)
.idata:00413474                 extrn __imp_signal:dword
.idata:00413474                                         ; DATA XREF: signal↑r
.idata:00413478 ; int (*sprintf)(char *const Buffer, const char *const Format, ...)
.idata:00413478                 extrn __imp_sprintf:dword
.idata:00413478                                         ; DATA XREF: sprintf↑r
.idata:0041347C ; int (*sscanf)(const char *const Buffer, const char *const Format, ...)
.idata:0041347C                 extrn __imp_sscanf:dword
.idata:0041347C                                         ; DATA XREF: sscanf↑r
.idata:00413480 ; char *(__cdecl *strcat)(char *Destination, const char *Source)
.idata:00413480                 extrn __imp_strcat:dword
.idata:00413480                                         ; DATA XREF: strcat↑r
.idata:00413484 ; char *(__cdecl *strchr)(const char *Str, int Val)
.idata:00413484                 extrn __imp_strchr:dword
.idata:00413484                                         ; DATA XREF: strchr↑r
.idata:00413488 ; int (__cdecl *strcmp)(const char *Str1, const char *Str2)
.idata:00413488                 extrn __imp_strcmp:dword
.idata:00413488                                         ; DATA XREF: strcmp↑r
.idata:0041348C ; char *(__cdecl *strcpy)(char *Destination, const char *Source)
.idata:0041348C                 extrn __imp_strcpy:dword
.idata:0041348C                                         ; DATA XREF: strcpy↑r
.idata:00413490 ; char *(__cdecl *strerror)(int ErrorMessage)
.idata:00413490                 extrn __imp_strerror:dword
.idata:00413490                                         ; DATA XREF: strerror↑r
.idata:00413494 ; size_t (__cdecl *strlen)(const char *Str)
.idata:00413494                 extrn __imp_strlen:dword
.idata:00413494                                         ; DATA XREF: strlen↑r
.idata:00413498 ; int (__cdecl *strncmp)(const char *Str1, const char *Str2, size_t MaxCount)
.idata:00413498                 extrn __imp_strncmp:dword
.idata:00413498                                         ; DATA XREF: strncmp↑r
.idata:0041349C ; char *(__cdecl *strncpy)(char *Destination, const char *Source, size_t Count)
.idata:0041349C                 extrn __imp_strncpy:dword
.idata:0041349C                                         ; DATA XREF: strncpy↑r
.idata:004134A0 ; char *(__cdecl *strpbrk)(const char *Str, const char *Control)
.idata:004134A0                 extrn __imp_strpbrk:dword
.idata:004134A0                                         ; DATA XREF: strpbrk↑r
.idata:004134A4 ; char *(__cdecl *strrchr)(const char *Str, int Ch)
.idata:004134A4                 extrn __imp_strrchr:dword
.idata:004134A4                                         ; DATA XREF: strrchr↑r
.idata:004134A8 ; size_t (__cdecl *strspn)(const char *Str, const char *Control)
.idata:004134A8                 extrn __imp_strspn:dword
.idata:004134A8                                         ; DATA XREF: strspn↑r
.idata:004134AC ; char *(__cdecl *strstr)(const char *Str, const char *SubStr)
.idata:004134AC                 extrn __imp_strstr:dword
.idata:004134AC                                         ; DATA XREF: strstr↑r
.idata:004134B0 ; int (__cdecl *strtol)(const char *String, char **EndPtr, int Radix)
.idata:004134B0                 extrn __imp_strtol:dword
.idata:004134B0                                         ; DATA XREF: strtol↑r
.idata:004134B4 ; unsigned int (__cdecl *strtoul)(const char *String, char **EndPtr, int Radix)
.idata:004134B4                 extrn __imp_strtoul:dword
.idata:004134B4                                         ; DATA XREF: strtoul↑r
.idata:004134B8 ; int (__cdecl *toupper)(int C)
.idata:004134B8                 extrn __imp_toupper:dword
.idata:004134B8                                         ; DATA XREF: toupper↑r
.idata:004134BC ; int (__cdecl *vfprintf)(FILE *const Stream, const char *const Format, va_list ArgList)
.idata:004134BC                 extrn __imp_vfprintf:dword
.idata:004134BC                                         ; DATA XREF: vfprintf↑r
.idata:004134C0
.idata:004134C8 ;
.idata:004134C8 ; Imports from OLE32.dll
.idata:004134C8 ;
.idata:004134C8 ; HRESULT (__stdcall *CoCreateInstance)(const IID *const rclsid, LPUNKNOWN pUnkOuter, DWORD dwClsContext, const IID *const riid, LPVOID *ppv)
.idata:004134C8                 extrn __imp_CoCreateInstance:dword
.idata:004134C8                                         ; DATA XREF: CoCreateInstance↑r
.idata:004134CC ; void (__stdcall *CoUninitialize)()
.idata:004134CC                 extrn __imp_CoUninitialize:dword
.idata:004134CC                                         ; DATA XREF: CoUninitialize↑r
.idata:004134D0 ; HRESULT (__stdcall *OleInitialize)(LPVOID pvReserved)
.idata:004134D0                 extrn __imp_OleInitialize:dword
.idata:004134D0                                         ; DATA XREF: OleInitialize↑r
.idata:004134D4
.idata:004134D4
.idata:004134D4
.idata:004134D4                 end start
