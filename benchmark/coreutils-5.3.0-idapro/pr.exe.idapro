.text:00401000 ;
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
.text:00401000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
.text:00401000 ; |                      License info: 48-357D-7BC4-C6                      |
.text:00401000 ; |                              Virginia Tech                              |
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ;
.text:00401000 ; Input SHA256 : 215BF01695F2D0A227D7BEDA455ADB355785E2B13ADB39EB1615DDC05DD74089
.text:00401000 ; Input MD5    : 43BA4709C19318C5307CE213051A112D
.text:00401000 ; Input CRC32  : 2724A806
.text:00401000
.text:00401000 ; File Name   : /home/cindy/Documents/Projects/binary_cmc/benchmark/coreutils-5.3.0-bin/bin/pr.exe
.text:00401000 ; Format      : Portable executable for 80386 (PE)
.text:00401000 ; Imagebase   : 400000
.text:00401000 ; Timestamp   : 4266A25B (Wed Apr 20 18:41:31 2005)
.text:00401000 ; Section 1. (virtual address 00001000)
.text:00401000 ; Virtual size                  : 0001B440 ( 111680.)
.text:00401000 ; Section size in file          : 0001B600 ( 112128.)
.text:00401000 ; Offset to raw data for section: 00000400
.text:00401000 ; Flags 60000020: Text Executable Readable
.text:00401000 ; Alignment     : default
.text:00401000
.text:00401000                 .686p
.text:00401000                 .mmx
.text:00401000                 .model flat
.text:00401000
.text:00401000 ; ===========================================================================
.text:00401000
.text:00401000 ; Segment type: Pure code
.text:00401000 ; Segment permissions: Read/Execute
.text:00401000 _text           segment para public 'CODE' use32
.text:00401000                 assume cs:_text
.text:00401000                 ;org 401000h
.text:00401000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00401000
.text:00401000 ; =============== S U B R O U T I N E =======================================
.text:00401000
.text:00401000 ; Attributes: noreturn bp-based frame
.text:00401000
.text:00401000                 public start
.text:00401000 start           proc near
.text:00401000
.text:00401000 Type            = dword ptr -8
.text:00401000
.text:00401000                 push    ebp
.text:00401001                 mov     ebp, esp
.text:00401003                 sub     esp, 8
.text:00401006                 mov     [esp+8+Type], 1 ; Type
.text:0040100D                 call    ds:__set_app_type
.text:00401013                 call    sub_401080
.text:00401013 start           endp
.text:00401013
.text:00401018 ; ---------------------------------------------------------------------------
.text:00401018                 mov     esp, ebp
.text:0040101A                 xor     eax, eax
.text:0040101C                 pop     ebp
.text:0040101D                 retn
.text:0040101D ; ---------------------------------------------------------------------------
.text:0040101E                 align 10h
.text:00401020                 push    ebp
.text:00401021                 mov     ebp, esp
.text:00401023                 sub     esp, 8
.text:00401026                 mov     dword ptr [esp], 2
.text:0040102D                 call    ds:__set_app_type
.text:00401033                 call    sub_401080
.text:00401038 ; ---------------------------------------------------------------------------
.text:00401038                 mov     esp, ebp
.text:0040103A                 xor     eax, eax
.text:0040103C                 pop     ebp
.text:0040103D                 retn
.text:0040103D ; ---------------------------------------------------------------------------
.text:0040103E                 align 10h
.text:00401040
.text:00401040 ; =============== S U B R O U T I N E =======================================
.text:00401040
.text:00401040 ; Attributes: bp-based frame
.text:00401040
.text:00401040 ; int __cdecl sub_401040(void (__cdecl *)())
.text:00401040 sub_401040      proc near               ; CODE XREF: sub_401910+8D↓p
.text:00401040                                         ; .text:0041B220↓p ...
.text:00401040
.text:00401040 var_8           = dword ptr -8
.text:00401040 arg_0           = dword ptr  8
.text:00401040
.text:00401040                 push    ebp
.text:00401041                 mov     ebp, esp
.text:00401043                 sub     esp, 8
.text:00401046                 mov     edx, [ebp+arg_0]
.text:00401049                 mov     [esp+8+var_8], edx ; void (__cdecl *)()
.text:0040104C                 call    ds:atexit
.text:00401052                 mov     esp, ebp
.text:00401054                 pop     ebp
.text:00401055                 retn
.text:00401055 sub_401040      endp
.text:00401055
.text:00401055 ; ---------------------------------------------------------------------------
.text:00401056                 align 10h
.text:00401060                 push    ebp
.text:00401061                 mov     ebp, esp
.text:00401063                 sub     esp, 8
.text:00401066                 mov     edx, [ebp+8]
.text:00401069                 mov     [esp], edx
.text:0040106C                 call    ds:_onexit
.text:00401072                 mov     esp, ebp
.text:00401074                 pop     ebp
.text:00401075                 retn
.text:00401075 ; ---------------------------------------------------------------------------
.text:00401076                 align 10h
.text:00401080
.text:00401080 ; =============== S U B R O U T I N E =======================================
.text:00401080
.text:00401080 ; Attributes: noreturn bp-based frame
.text:00401080
.text:00401080 sub_401080      proc near               ; CODE XREF: start+13↑p
.text:00401080                                         ; .text:00401033↑p
.text:00401080
.text:00401080 lpTopLevelExceptionFilter= dword ptr -28h
.text:00401080 Mode            = dword ptr -24h
.text:00401080 var_20          = dword ptr -20h
.text:00401080 var_1C          = dword ptr -1Ch
.text:00401080 var_18          = dword ptr -18h
.text:00401080 var_C           = byte ptr -0Ch
.text:00401080 var_8           = dword ptr -8
.text:00401080
.text:00401080                 push    ebp
.text:00401081                 mov     ebp, esp
.text:00401083                 push    ebx
.text:00401084                 sub     esp, 24h
.text:00401087                 mov     [esp+28h+lpTopLevelExceptionFilter], offset TopLevelExceptionFilter ; lpTopLevelExceptionFilter
.text:0040108E                 call    SetUnhandledExceptionFilter
.text:00401093                 sub     esp, 4
.text:00401096                 call    sub_41B1C0
.text:0040109B                 mov     [esp+28h+lpTopLevelExceptionFilter], offset dword_41D000
.text:004010A2                 mov     edx, dword_41D160
.text:004010A8                 lea     ecx, [ebp+var_8]
.text:004010AB                 mov     [ebp+var_8], 0
.text:004010B2                 mov     [esp+28h+var_18], ecx
.text:004010B6                 mov     [esp+28h+var_1C], edx
.text:004010BA                 lea     edx, [ebp+var_C]
.text:004010BD                 mov     [esp+28h+var_20], edx
.text:004010C1                 mov     [esp+28h+Mode], offset dword_41D004
.text:004010C9                 call    __getmainargs
.text:004010CE                 mov     eax, Mode
.text:004010D3                 test    eax, eax
.text:004010D5                 jz      short loc_401135
.text:004010D7                 mov     dword_41D180, eax
.text:004010DC                 mov     edx, ds:_iob
.text:004010E2                 test    edx, edx
.text:004010E4                 jz      short loc_4010FB
.text:004010E6                 mov     [esp+28h+Mode], eax ; Mode
.text:004010EA                 mov     ebx, [edx+10h]
.text:004010ED                 mov     [esp+28h+lpTopLevelExceptionFilter], ebx ; FileHandle
.text:004010F0                 call    _setmode
.text:004010F5                 mov     edx, ds:_iob
.text:004010FB
.text:004010FB loc_4010FB:                             ; CODE XREF: sub_401080+64↑j
.text:004010FB                 cmp     edx, 0FFFFFFE0h
.text:004010FE                 jz      short loc_40111B
.text:00401100                 mov     ebx, Mode
.text:00401106                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040110A                 mov     ecx, [edx+30h]
.text:0040110D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401110                 call    _setmode
.text:00401115                 mov     edx, ds:_iob
.text:0040111B
.text:0040111B loc_40111B:                             ; CODE XREF: sub_401080+7E↑j
.text:0040111B                 cmp     edx, 0FFFFFFC0h
.text:0040111E                 jz      short loc_401135
.text:00401120                 mov     ebx, Mode
.text:00401126                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040112A                 mov     ecx, [edx+50h]
.text:0040112D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401130                 call    _setmode
.text:00401135
.text:00401135 loc_401135:                             ; CODE XREF: sub_401080+55↑j
.text:00401135                                         ; sub_401080+9E↑j
.text:00401135                 call    __p__fmode
.text:0040113A                 mov     ecx, dword_41D180
.text:00401140                 mov     [eax], ecx
.text:00401142                 call    sub_41B190
.text:00401147                 call    __p__environ
.text:0040114C                 mov     edx, dword_41D000
.text:00401152                 mov     ebx, [eax]
.text:00401154                 mov     ecx, dword_41D004
.text:0040115A                 mov     [esp+28h+lpTopLevelExceptionFilter], edx
.text:0040115D                 mov     [esp+28h+var_20], ebx
.text:00401161                 mov     [esp+28h+Mode], ecx
.text:00401165                 call    sub_401910
.text:0040116A                 mov     ebx, eax
.text:0040116C                 call    _cexit
.text:00401171                 mov     [esp+28h+lpTopLevelExceptionFilter], ebx ; uExitCode
.text:00401174                 call    ExitProcess
.text:00401174 sub_401080      endp
.text:00401174
.text:00401174 ; ---------------------------------------------------------------------------
.text:00401179                 align 10h
.text:00401180
.text:00401180 ; =============== S U B R O U T I N E =======================================
.text:00401180
.text:00401180 ; Attributes: bp-based frame
.text:00401180
.text:00401180 ; LONG __stdcall TopLevelExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo)
.text:00401180 TopLevelExceptionFilter proc near       ; DATA XREF: sub_401080+7↑o
.text:00401180
.text:00401180 Signal          = dword ptr -18h
.text:00401180 Function        = dword ptr -14h
.text:00401180 var_8           = dword ptr -8
.text:00401180 var_4           = dword ptr -4
.text:00401180 ExceptionInfo   = dword ptr  8
.text:00401180
.text:00401180                 push    ebp
.text:00401181                 mov     ebp, esp
.text:00401183                 sub     esp, 18h
.text:00401186                 mov     [ebp+var_8], ebx
.text:00401189                 mov     ecx, [ebp+ExceptionInfo]
.text:0040118C                 xor     ebx, ebx
.text:0040118E                 mov     [ebp+var_4], esi
.text:00401191                 xor     esi, esi
.text:00401193                 mov     edx, [ecx]
.text:00401195                 mov     eax, [edx]
.text:00401197                 cmp     eax, 0C0000091h
.text:0040119C                 ja      loc_401260
.text:004011A2                 cmp     eax, 0C000008Dh
.text:004011A7                 jnb     short loc_401210
.text:004011A9                 cmp     eax, 0C0000005h
.text:004011AE                 jz      short loc_4011BE
.text:004011B0
.text:004011B0 loc_4011B0:                             ; CODE XREF: TopLevelExceptionFilter+59↓j
.text:004011B0                                         ; TopLevelExceptionFilter+77↓j ...
.text:004011B0                 mov     eax, ebx
.text:004011B2                 mov     esi, [ebp+var_4]
.text:004011B5                 mov     ebx, [ebp+var_8]
.text:004011B8                 mov     esp, ebp
.text:004011BA                 pop     ebp
.text:004011BB                 retn    4
.text:004011BE ; ---------------------------------------------------------------------------
.text:004011BE
.text:004011BE loc_4011BE:                             ; CODE XREF: TopLevelExceptionFilter+2E↑j
.text:004011BE                 mov     [esp+18h+Function], 0 ; Function
.text:004011C6                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:004011CD                 call    signal
.text:004011D2                 cmp     eax, 1
.text:004011D5                 jz      short loc_4011F9
.text:004011D7                 test    eax, eax
.text:004011D9                 jz      short loc_4011B0
.text:004011DB                 mov     [esp+18h+Signal], 0Bh
.text:004011E2                 lea     esi, [esi+0]
.text:004011E9                 lea     edi, [edi+0]
.text:004011F0
.text:004011F0 loc_4011F0:                             ; CODE XREF: TopLevelExceptionFilter+BD↓j
.text:004011F0                 call    eax
.text:004011F2
.text:004011F2 loc_4011F2:                             ; CODE XREF: TopLevelExceptionFilter+8D↓j
.text:004011F2                                         ; TopLevelExceptionFilter+D5↓j ...
.text:004011F2                 mov     ebx, 0FFFFFFFFh
.text:004011F7                 jmp     short loc_4011B0
.text:004011F9 ; ---------------------------------------------------------------------------
.text:004011F9
.text:004011F9 loc_4011F9:                             ; CODE XREF: TopLevelExceptionFilter+55↑j
.text:004011F9                 mov     [esp+18h+Function], 1 ; Function
.text:00401201                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:00401208                 call    signal
.text:0040120D                 jmp     short loc_4011F2
.text:0040120D ; ---------------------------------------------------------------------------
.text:0040120F                 align 10h
.text:00401210
.text:00401210 loc_401210:                             ; CODE XREF: TopLevelExceptionFilter+27↑j
.text:00401210                                         ; TopLevelExceptionFilter+E5↓j
.text:00401210                 mov     esi, 1
.text:00401215
.text:00401215 loc_401215:                             ; CODE XREF: TopLevelExceptionFilter+EC↓j
.text:00401215                 mov     [esp+18h+Function], 0 ; Function
.text:0040121D                 mov     [esp+18h+Signal], 8 ; Signal
.text:00401224                 call    signal
.text:00401229                 cmp     eax, 1
.text:0040122C                 jz      short loc_40123F
.text:0040122E                 test    eax, eax
.text:00401230                 jz      loc_4011B0
.text:00401236                 mov     [esp+18h+Signal], 8
.text:0040123D                 jmp     short loc_4011F0
.text:0040123F ; ---------------------------------------------------------------------------
.text:0040123F
.text:0040123F loc_40123F:                             ; CODE XREF: TopLevelExceptionFilter+AC↑j
.text:0040123F                 mov     [esp+18h+Function], 1 ; Function
.text:00401247                 mov     [esp+18h+Signal], 8 ; Signal
.text:0040124E                 call    signal
.text:00401253                 test    esi, esi
.text:00401255                 jz      short loc_4011F2
.text:00401257                 call    sub_41B1C0
.text:0040125C                 jmp     short loc_4011F2
.text:0040125C ; ---------------------------------------------------------------------------
.text:0040125E                 align 10h
.text:00401260
.text:00401260 loc_401260:                             ; CODE XREF: TopLevelExceptionFilter+1C↑j
.text:00401260                 cmp     eax, 0C0000093h
.text:00401265                 jz      short loc_401210
.text:00401267                 cmp     eax, 0C0000094h
.text:0040126C                 jz      short loc_401215
.text:0040126E                 jmp     loc_4011B0
.text:0040126E TopLevelExceptionFilter endp
.text:0040126E
.text:0040126E ; ---------------------------------------------------------------------------
.text:00401273                 align 10h
.text:00401280 ; const char Locale
.text:00401280 Locale          db 0                    ; DATA XREF: sub_401910+4A↓o
.text:00401280                                         ; sub_401910+757↓o ...
.text:00401281 byte_401281     db 20h, 0               ; DATA XREF: sub_403EF0+209↓o
.text:00401281                                         ; sub_403EF0+215↓o ...
.text:00401283 byte_401283     db 9                    ; DATA XREF: .data:off_41D05C↓o
.text:00401284                 db 0
.text:00401285 aPages          db 'pages',0            ; DATA XREF: .text:off_4013A0↓o
.text:0040128B aColumns        db 'columns',0          ; DATA XREF: .text:004013B0↓o
.text:00401293 aAcross         db 'across',0           ; DATA XREF: .text:004013C0↓o
.text:0040129A aShowControlCha db 'show-control-chars',0
.text:0040129A                                         ; DATA XREF: .text:004013D0↓o
.text:004012AD aDoubleSpace    db 'double-space',0     ; DATA XREF: .text:004013E0↓o
.text:004012BA aDateFormat     db 'date-format',0      ; DATA XREF: .text:004013F0↓o
.text:004012C6 aExpandTabs     db 'expand-tabs',0      ; DATA XREF: .text:00401400↓o
.text:004012D2 aFormFeed       db 'form-feed',0        ; DATA XREF: .text:00401410↓o
.text:004012DC aHeader         db 'header',0           ; DATA XREF: .text:00401420↓o
.text:004012E3 aOutputTabs     db 'output-tabs',0      ; DATA XREF: .text:00401430↓o
.text:004012EF aJoinLines      db 'join-lines',0       ; DATA XREF: .text:00401440↓o
.text:004012FA aLength         db 'length',0           ; DATA XREF: .text:00401450↓o
.text:00401301 aMerge          db 'merge',0            ; DATA XREF: .text:00401460↓o
.text:00401307 aNumberLines    db 'number-lines',0     ; DATA XREF: .text:00401470↓o
.text:00401314 aFirstLineNumbe db 'first-line-number',0
.text:00401314                                         ; DATA XREF: .text:00401480↓o
.text:00401326 aIndent         db 'indent',0           ; DATA XREF: .text:00401490↓o
.text:0040132D aNoFileWarnings db 'no-file-warnings',0 ; DATA XREF: .text:004014A0↓o
.text:0040133E aSeparator      db 'separator',0        ; DATA XREF: .text:004014B0↓o
.text:00401348 aSepString      db 'sep-string',0       ; DATA XREF: .text:004014C0↓o
.text:00401353 aOmitHeader     db 'omit-header',0      ; DATA XREF: .text:004014D0↓o
.text:0040135F aOmitPagination db 'omit-pagination',0  ; DATA XREF: .text:004014E0↓o
.text:0040136F aShowNonprintin db 'show-nonprinting',0 ; DATA XREF: .text:004014F0↓o
.text:00401380 aWidth          db 'width',0            ; DATA XREF: .text:00401500↓o
.text:00401386 aPageWidth      db 'page-width',0       ; DATA XREF: .text:00401510↓o
.text:00401391 aHelp           db 'help',0             ; DATA XREF: .text:00401520↓o
.text:00401396 aVersion        db 'version',0          ; DATA XREF: .text:00401530↓o
.text:0040139E                 align 10h
.text:004013A0 off_4013A0      dd offset aPages        ; DATA XREF: sub_401910+BE↓o
.text:004013A0                                         ; "pages"
.text:004013A4                 dd 1, 0
.text:004013AC                 dd 81h
.text:004013B0                 dd offset aColumns      ; "columns"
.text:004013B4                 dd 1, 0
.text:004013BC                 dd 80h
.text:004013C0                 dd offset aAcross       ; "across"
.text:004013C4                 dd 2 dup(0)
.text:004013CC                 dd 61h
.text:004013D0                 dd offset aShowControlCha ; "show-control-chars"
.text:004013D4                 dd 2 dup(0)
.text:004013DC                 dd 63h
.text:004013E0                 dd offset aDoubleSpace  ; "double-space"
.text:004013E4                 dd 2 dup(0)
.text:004013EC                 dd 64h
.text:004013F0                 dd offset aDateFormat   ; "date-format"
.text:004013F4                 dd 1, 0
.text:004013FC                 dd 44h
.text:00401400                 dd offset aExpandTabs   ; "expand-tabs"
.text:00401404                 dd 2, 0
.text:0040140C                 dd 65h
.text:00401410                 dd offset aFormFeed     ; "form-feed"
.text:00401414                 dd 2 dup(0)
.text:0040141C                 dd 66h
.text:00401420                 dd offset aHeader       ; "header"
.text:00401424                 dd 1, 0
.text:0040142C                 dd 68h
.text:00401430                 dd offset aOutputTabs   ; "output-tabs"
.text:00401434                 dd 2, 0
.text:0040143C                 dd 69h
.text:00401440                 dd offset aJoinLines    ; "join-lines"
.text:00401444                 dd 2 dup(0)
.text:0040144C                 dd 4Ah
.text:00401450                 dd offset aLength       ; "length"
.text:00401454                 dd 1, 0
.text:0040145C                 dd 6Ch
.text:00401460                 dd offset aMerge        ; "merge"
.text:00401464                 dd 2 dup(0)
.text:0040146C                 dd 6Dh
.text:00401470                 dd offset aNumberLines  ; "number-lines"
.text:00401474                 dd 2, 0
.text:0040147C                 dd 6Eh
.text:00401480                 dd offset aFirstLineNumbe ; "first-line-number"
.text:00401484                 dd 1, 0
.text:0040148C                 dd 4Eh
.text:00401490                 dd offset aIndent       ; "indent"
.text:00401494                 dd 1, 0
.text:0040149C                 dd 6Fh
.text:004014A0                 dd offset aNoFileWarnings ; "no-file-warnings"
.text:004014A4                 dd 2 dup(0)
.text:004014AC                 dd 72h
.text:004014B0                 dd offset aSeparator    ; "separator"
.text:004014B4                 dd 2, 0
.text:004014BC                 dd 73h
.text:004014C0                 dd offset aSepString    ; "sep-string"
.text:004014C4                 dd 2, 0
.text:004014CC                 dd 53h
.text:004014D0                 dd offset aOmitHeader   ; "omit-header"
.text:004014D4                 dd 2 dup(0)
.text:004014DC                 dd 74h
.text:004014E0                 dd offset aOmitPagination ; "omit-pagination"
.text:004014E4                 dd 2 dup(0)
.text:004014EC                 dd 54h
.text:004014F0                 dd offset aShowNonprintin ; "show-nonprinting"
.text:004014F4                 dd 2 dup(0)
.text:004014FC                 dd 76h
.text:00401500                 dd offset aWidth        ; "width"
.text:00401504                 dd 1, 0
.text:0040150C                 dd 77h
.text:00401510                 dd offset aPageWidth    ; "page-width"
.text:00401514                 dd 1, 0
.text:0040151C                 dd 57h
.text:00401520                 dd offset aHelp         ; "help"
.text:00401524                 dd 2 dup(0)
.text:0040152C                 dd 0FFFFFF7Eh
.text:00401530                 dd offset aVersion      ; "version"
.text:00401534                 dd 2 dup(0)
.text:0040153C                 dd 0FFFFFF7Dh, 4 dup(0)
.text:00401550                 align 20h
.text:00401560 a0123456789dFjn_0 db '-0123456789D:FJN:TW:abcde::fh:i::l:mn::o:rs::tvw:S::',0
.text:00401560                                         ; DATA XREF: sub_401910+2E↓o
.text:00401595                 align 10h
.text:004015A0 a0123456789dFjn db '-0123456789D:FJN:TW:abcde::fh:i::l:mn::o:rs::tvw:S:',0
.text:004015A0                                         ; DATA XREF: sub_401910+3C↓o
.text:004015D4                 align 10h
.text:004015E0 aCProgra1Coreut db 'c:/progra~1/CoreUtils/share/locale',0
.text:004015E0                                         ; DATA XREF: sub_401910+64↓o
.text:00401603 aCoreutils      db 'coreutils',0        ; DATA XREF: sub_401910+6C↓o
.text:00401603                                         ; sub_401910+79↓o
.text:0040160D aColumnCountToo db 'column count too large',0
.text:0040160D                                         ; DATA XREF: sub_401910:loc_401A20↓o
.text:00401624 aPageRangeS     db 'Page range `%s',27h,0
.text:00401624                                         ; DATA XREF: sub_401910:loc_401F3D↓o
.text:00401624                                         ; sub_401910:loc_4025B6↓o
.text:00401634 aRolandHuebner  db 'Roland Huebner',0   ; DATA XREF: sub_401910+6CF↓o
.text:00401643 aPeteTermaat    db 'Pete TerMaat',0     ; DATA XREF: sub_401910+6D7↓o
.text:00401650 a530            db '5.3.0',0            ; DATA XREF: sub_401910+6E2↓o
.text:00401656 aGnuCoreutils   db 'GNU coreutils',0    ; DATA XREF: sub_401910+6EA↓o
.text:00401664 ; const FILE stru_401664
.text:00401664 stru_401664     FILE <90007270h, 90909090h, 90909090h, 90909090h, 90909090h, \
.text:00401664                                         ; DATA XREF: sub_401910+6F2↓o
.text:00401664                       90909090h, 90909090h, 204E2D60h>
.text:00401684                 db  4Eh ; N
.text:00401685                 db  55h ; U
.text:00401686                 db  4Dh ; M
.text:00401687                 db  42h ; B
.text:00401688                 db  45h ; E
.text:00401689                 db  52h ; R
.text:0040168A                 db  27h ; '
.text:0040168B                 db  20h
.text:0040168C                 db  69h ; i
.text:0040168D                 db  6Eh ; n
.text:0040168E                 db  76h ; v
.text:0040168F                 db  61h ; a
.text:00401690                 db  6Ch ; l
.text:00401691                 db  69h ; i
.text:00401692                 db  64h ; d
.text:00401693                 db  20h
.text:00401694                 db  73h ; s
.text:00401695                 db  74h ; t
.text:00401696                 db  61h ; a
.text:00401697                 db  72h ; r
.text:00401698                 db  74h ; t
.text:00401699                 db  69h ; i
.text:0040169A                 db  6Eh ; n
.text:0040169B                 db  67h ; g
.text:0040169C                 db  20h
.text:0040169D                 db  6Ch ; l
.text:0040169E                 db  69h ; i
.text:0040169F                 db  6Eh ; n
.text:004016A0                 db  65h ; e
.text:004016A1                 db  20h
.text:004016A2                 db  6Eh ; n
.text:004016A3                 db  75h ; u
.text:004016A4                 db  6Dh ; m
.text:004016A5                 db  62h ; b
.text:004016A6                 db  65h ; e
.text:004016A7                 db  72h ; r
.text:004016A8                 db  3Ah ; :
.text:004016A9                 db  20h
.text:004016AA                 db  60h ; `
.text:004016AB                 db  25h ; %
.text:004016AC                 db  73h ; s
.text:004016AD                 db  27h ; '
.text:004016AE                 db    0
.text:004016AF                 align 20h
.text:004016C0 aWPageWidthInva db '`-W PAGE_WIDTH',27h,' invalid number of characters: `%s',27h,0
.text:004016C0                                         ; DATA XREF: sub_401910:loc_402186↓o
.text:004016F3                 align 10h
.text:00401700 aLPageLengthInv db '`-l PAGE_LENGTH',27h,' invalid number of lines: `%s',27h,0
.text:00401700                                         ; DATA XREF: sub_401910:loc_4022BE↓o
.text:0040172F                 align 20h
.text:00401740 aOMarginInvalid db '`-o MARGIN',27h,' invalid line offset: `%s',27h,0
.text:00401740                                         ; DATA XREF: sub_401910:loc_402379↓o
.text:00401766                 align 20h
.text:00401780 aWPageWidthInva_0 db '`-w PAGE_WIDTH',27h,' invalid number of characters: `%s',27h,0
.text:00401780                                         ; DATA XREF: sub_401910:loc_402447↓o
.text:004017B3                 align 10h
.text:004017C0 aColumnsColumnI db '`--columns=COLUMN',27h,' invalid number of columns: `%s',27h,0
.text:004017C0                                         ; DATA XREF: sub_401910:loc_4024C6↓o
.text:004017F3                 align 10h
.text:00401800 aPagesFirstPage db '`--pages=FIRST_PAGE[:LAST_PAGE]',27h,' missing argument',0
.text:00401800                                         ; DATA XREF: sub_401910+BF7↓o
.text:00401832 aInvalidPageRan db 'Invalid page range `%s',27h,0
.text:00401832                                         ; DATA XREF: sub_401910:loc_4025E3↓o
.text:0040184A aStandardInput  db 'standard input',0   ; DATA XREF: sub_401910+E9E↓o
.text:0040184A                                         ; sub_402A20+30↓o ...
.text:00401859                 align 10h
.text:00401860 aCannotSpecifyB db 'Cannot specify both printing across and printing in parallel.',0
.text:00401860                                         ; DATA XREF: sub_401910:loc_402861↓o
.text:0040189E                 align 10h
.text:004018A0 aCannotSpecifyN db 'Cannot specify number of columns when printing in parallel.',0
.text:004018A0                                         ; DATA XREF: sub_401910:loc_40288B↓o
.text:004018DC ; const char VarName[]
.text:004018DC VarName         db 'POSIXLY_CORRECT',0  ; DATA XREF: sub_401910:loc_4028B5↓o
.text:004018EC aYMDHM          db '%Y-%m-%d %H:%M',0   ; DATA XREF: sub_401910:loc_4028C5↓o
.text:004018FB aBEHMY          db '%b %e %H:%M %Y',0   ; DATA XREF: sub_401910+FD3↓o
.text:0040190A                 align 10h
.text:00401910
.text:00401910 ; =============== S U B R O U T I N E =======================================
.text:00401910
.text:00401910 ; Attributes: bp-based frame fuzzy-sp
.text:00401910
.text:00401910 sub_401910      proc near               ; CODE XREF: sub_401080+E5↑p
.text:00401910
.text:00401910 Category        = dword ptr -98h
.text:00401910 Locale          = dword ptr -94h
.text:00401910 var_90          = dword ptr -90h
.text:00401910 var_8C          = byte ptr -8Ch
.text:00401910 Str             = dword ptr -88h
.text:00401910 var_84          = dword ptr -84h
.text:00401910 var_80          = dword ptr -80h
.text:00401910 var_6C          = dword ptr -6Ch
.text:00401910 var_68          = dword ptr -68h
.text:00401910 var_64          = dword ptr -64h
.text:00401910 var_60          = dword ptr -60h
.text:00401910 var_5C          = dword ptr -5Ch
.text:00401910 var_58          = dword ptr -58h
.text:00401910 ErrorMessage    = dword ptr -54h
.text:00401910 var_50          = dword ptr -50h
.text:00401910 var_4C          = dword ptr -4Ch
.text:00401910 var_48          = dword ptr -48h
.text:00401910 var_44          = dword ptr -44h
.text:00401910 String          = dword ptr -40h
.text:00401910 var_3C          = dword ptr -3Ch
.text:00401910 var_38          = dword ptr -38h
.text:00401910 var_33          = byte ptr -33h
.text:00401910 var_32          = byte ptr -32h
.text:00401910 var_31          = byte ptr -31h
.text:00401910 var_30          = dword ptr -30h
.text:00401910 var_2C          = dword ptr -2Ch
.text:00401910 var_28          = dword ptr -28h
.text:00401910 var_24          = dword ptr -24h
.text:00401910 var_20          = dword ptr -20h
.text:00401910 var_1C          = dword ptr -1Ch
.text:00401910 var_18          = dword ptr -18h
.text:00401910 EndPtr          = dword ptr -14h
.text:00401910 arg_0           = dword ptr  8
.text:00401910 arg_4           = dword ptr  0Ch
.text:00401910
.text:00401910                 push    ebp
.text:00401911                 xor     eax, eax
.text:00401913                 mov     ebp, esp
.text:00401915                 push    edi
.text:00401916                 push    esi
.text:00401917                 xor     esi, esi
.text:00401919                 push    ebx
.text:0040191A                 sub     esp, 8Ch
.text:00401920                 and     esp, 0FFFFFFF0h
.text:00401923                 call    __alloca
.text:00401928                 call    sub_41B260
.text:0040192D                 mov     [ebp+var_31], 0
.text:00401931                 mov     [ebp+var_32], 0
.text:00401935                 mov     [ebp+var_33], 0
.text:00401939                 call    sub_409300
.text:0040193E                 mov     [ebp+var_3C], offset a0123456789dFjn_0 ; "-0123456789D:FJN:TW:abcde::fh:i::l:mn::"...
.text:00401945                 cmp     eax, 30DAFh
.text:0040194A                 jle     short loc_401953
.text:0040194C                 mov     [ebp+var_3C], offset a0123456789dFjn ; "-0123456789D:FJN:TW:abcde::fh:i::l:mn::"...
.text:00401953
.text:00401953 loc_401953:                             ; CODE XREF: sub_401910+3A↑j
.text:00401953                 mov     eax, [ebp+arg_4]
.text:00401956                 xor     edi, edi
.text:00401958                 mov     ecx, [eax]
.text:0040195A                 mov     [esp+98h+Locale], offset Locale ; Locale
.text:00401962                 mov     [esp+98h+Category], 0 ; Category
.text:00401969                 mov     ds:dword_41E810, ecx
.text:0040196F                 call    setlocale
.text:00401974                 mov     [esp+98h+Locale], offset aCProgra1Coreut ; "c:/progra~1/CoreUtils/share/locale"
.text:0040197C                 mov     [esp+98h+Category], offset aCoreutils ; "coreutils"
.text:00401983                 call    ds:__imp_libintl_bindtextdomain
.text:00401989                 mov     [esp+98h+Category], offset aCoreutils ; "coreutils"
.text:00401990                 call    ds:libintl_textdomain
.text:00401996                 mov     [esp+98h+Category], offset sub_409210 ; void (__cdecl *)()
.text:0040199D                 call    sub_401040
.text:004019A2                 cmp     [ebp+arg_0], 1
.text:004019A6                 mov     [ebp+var_38], 0
.text:004019AD                 jg      loc_4028EC
.text:004019B3                 lea     esi, [esi+0]
.text:004019B9                 lea     edi, [edi+0]
.text:004019C0
.text:004019C0 loc_4019C0:                             ; CODE XREF: sub_401910+10E↓j
.text:004019C0                                         ; sub_401910+597↓j ...
.text:004019C0                 mov     [esp+98h+Str], 0 ; int
.text:004019C8                 mov     edx, [ebp+arg_4]
.text:004019CB                 mov     ebx, [ebp+var_3C]
.text:004019CE                 mov     dword ptr [esp+98h+var_8C], offset off_4013A0 ; char
.text:004019D6                 mov     eax, [ebp+arg_0]
.text:004019D9                 mov     [esp+98h+Locale], edx ; int
.text:004019DD                 mov     [esp+98h+var_90], ebx ; char *
.text:004019E1                 mov     [esp+98h+Category], eax ; int
.text:004019E4                 call    sub_4090A0
.text:004019E9                 cmp     eax, 0FFFFFFFFh
.text:004019EC                 mov     edx, eax
.text:004019EE                 jz      loc_402672
.text:004019F4                 lea     ecx, [edx-30h]
.text:004019F7                 cmp     ecx, 9
.text:004019FA                 ja      short loc_401A47
.text:004019FC                 lea     ecx, [esi+esi*4]
.text:004019FF                 cmp     esi, 0CCCCCCCh
.text:00401A05                 lea     ebx, [edx+ecx*2-30h]
.text:00401A09                 jg      short loc_401A20
.text:00401A0B                 test    ebx, ebx
.text:00401A0D                 js      short loc_401A20
.text:00401A0F
.text:00401A0F loc_401A0F:                             ; CODE XREF: sub_401910+135↓j
.text:00401A0F                 mov     dword_41D034, ebx
.text:00401A15                 mov     esi, ebx
.text:00401A17
.text:00401A17 loc_401A17:                             ; CODE XREF: sub_401910+BB1↓j
.text:00401A17                 mov     ds:byte_41E010, 1
.text:00401A1E                 jmp     short loc_4019C0
.text:00401A20 ; ---------------------------------------------------------------------------
.text:00401A20
.text:00401A20 loc_401A20:                             ; CODE XREF: sub_401910+F9↑j
.text:00401A20                                         ; sub_401910+FD↑j
.text:00401A20                 mov     [esp+98h+Category], offset aColumnCountToo ; "column count too large"
.text:00401A27                 call    ds:libintl_gettext
.text:00401A2D                 mov     [esp+98h+Locale], 0 ; ErrorMessage
.text:00401A35                 mov     [esp+98h+Category], 1 ; Code
.text:00401A3C                 mov     [esp+98h+var_90], eax ; char *
.text:00401A40                 call    sub_40A7B0
.text:00401A45                 jmp     short loc_401A0F
.text:00401A47 ; ---------------------------------------------------------------------------
.text:00401A47
.text:00401A47 loc_401A47:                             ; CODE XREF: sub_401910+EA↑j
.text:00401A47                 xor     ebx, ebx
.text:00401A49                 lea     eax, [edx+83h]  ; switch 261 cases
.text:00401A4F                 test    esi, esi
.text:00401A51                 setnle  bl
.text:00401A54                 dec     ebx
.text:00401A55                 and     esi, ebx
.text:00401A57                 cmp     eax, 104h
.text:00401A5C                 ja      def_401A62      ; jumptable 00401A62 default case, cases -129-0,2-67,69,71-73,75-77,79-82,85,86,88-96,103,106,107,112,113,117,120-127
.text:00401A62                 jmp     ds:jpt_401A62[eax*4] ; switch jump
.text:00401A62 ; ---------------------------------------------------------------------------
.text:00401A69                 align 4
.text:00401A6C jpt_401A62      dd offset loc_401FD1, offset loc_40201E, offset def_401A62
.text:00401A6C                                         ; DATA XREF: sub_401910+152↑r
.text:00401A6C                 dd offset def_401A62, offset def_401A62, offset def_401A62 ; jump table for switch statement
.text:00401A6C                 dd offset def_401A62, offset def_401A62, offset def_401A62
.text:00401A6C                 dd offset def_401A62, offset def_401A62, offset def_401A62
.text:00401A6C                 dd offset def_401A62, offset def_401A62, offset def_401A62
.text:00401A6C                 dd offset def_401A62, offset def_401A62, offset def_401A62
.text:00401A6C                 dd offset def_401A62, offset def_401A62, offset def_401A62
.text:00401A6C                 dd offset def_401A62, offset def_401A62, offset def_401A62
.text:00401A6C                 dd offset def_401A62, offset def_401A62, offset def_401A62
.text:00401A6C                 dd offset def_401A62, offset def_401A62, offset def_401A62
.text:00401A6C                 dd offset def_401A62, offset def_401A62, offset def_401A62
.text:00401A6C                 dd offset def_401A62, offset def_401A62, offset def_401A62
.text:00401A6C                 dd offset def_401A62, offset def_401A62, offset def_401A62
.text:00401A6C                 dd offset def_401A62, offset def_401A62, offset def_401A62
.text:00401A6C                 dd offset def_401A62, offset def_401A62, offset def_401A62
.text:00401A6C                 dd offset def_401A62, offset def_401A62, offset def_401A62
.text:00401A6C                 dd offset def_401A62, offset def_401A62, offset def_401A62
.text:00401A6C                 dd offset def_401A62, offset def_401A62, offset def_401A62
.text:00401A6C                 dd offset def_401A62, offset def_401A62, offset def_401A62
.text:00401A6C                 dd offset def_401A62, offset def_401A62, offset def_401A62
.text:00401A6C                 dd offset def_401A62, offset def_401A62, offset def_401A62
.text:00401A6C                 dd offset def_401A62, offset def_401A62, offset def_401A62
.text:00401A6C                 dd offset def_401A62, offset def_401A62, offset def_401A62
.text:00401A6C                 dd offset def_401A62, offset def_401A62, offset def_401A62
.text:00401A6C                 dd offset def_401A62, offset def_401A62, offset def_401A62
.text:00401A6C                 dd offset def_401A62, offset def_401A62, offset def_401A62
.text:00401A6C                 dd offset def_401A62, offset def_401A62, offset def_401A62
.text:00401A6C                 dd offset def_401A62, offset def_401A62, offset def_401A62
.text:00401A6C                 dd offset def_401A62, offset def_401A62, offset def_401A62
.text:00401A6C                 dd offset def_401A62, offset def_401A62, offset def_401A62
.text:00401A6C                 dd offset def_401A62, offset def_401A62, offset def_401A62
.text:00401A6C                 dd offset def_401A62, offset def_401A62, offset def_401A62
.text:00401A6C                 dd offset def_401A62, offset def_401A62, offset def_401A62
.text:00401A6C                 dd offset def_401A62, offset def_401A62, offset def_401A62
.text:00401A6C                 dd offset def_401A62, offset def_401A62, offset def_401A62
.text:00401A6C                 dd offset def_401A62, offset def_401A62, offset def_401A62
.text:00401A6C                 dd offset def_401A62, offset def_401A62, offset def_401A62
.text:00401A6C                 dd offset def_401A62, offset def_401A62, offset def_401A62
.text:00401A6C                 dd offset def_401A62, offset def_401A62, offset def_401A62
.text:00401A6C                 dd offset def_401A62, offset def_401A62, offset def_401A62
.text:00401A6C                 dd offset def_401A62, offset def_401A62, offset def_401A62
.text:00401A6C                 dd offset def_401A62, offset def_401A62, offset def_401A62
.text:00401A6C                 dd offset def_401A62, offset def_401A62, offset def_401A62
.text:00401A6C                 dd offset def_401A62, offset def_401A62, offset def_401A62
.text:00401A6C                 dd offset loc_401E80, offset def_401A62, offset def_401A62
.text:00401A6C                 dd offset def_401A62, offset def_401A62, offset def_401A62
.text:00401A6C                 dd offset def_401A62, offset def_401A62, offset def_401A62
.text:00401A6C                 dd offset def_401A62, offset def_401A62, offset def_401A62
.text:00401A6C                 dd offset def_401A62, offset def_401A62, offset def_401A62
.text:00401A6C                 dd offset def_401A62, offset def_401A62, offset def_401A62
.text:00401A6C                 dd offset def_401A62, offset def_401A62, offset def_401A62
.text:00401A6C                 dd offset def_401A62, offset def_401A62, offset def_401A62
.text:00401A6C                 dd offset def_401A62, offset def_401A62, offset def_401A62
.text:00401A6C                 dd offset def_401A62, offset def_401A62, offset def_401A62
.text:00401A6C                 dd offset def_401A62, offset def_401A62, offset def_401A62
.text:00401A6C                 dd offset def_401A62, offset def_401A62, offset def_401A62
.text:00401A6C                 dd offset def_401A62, offset def_401A62, offset def_401A62
.text:00401A6C                 dd offset def_401A62, offset def_401A62, offset def_401A62
.text:00401A6C                 dd offset def_401A62, offset def_401A62, offset def_401A62
.text:00401A6C                 dd offset def_401A62, offset def_401A62, offset def_401A62
.text:00401A6C                 dd offset def_401A62, offset def_401A62, offset def_401A62
.text:00401A6C                 dd offset def_401A62, offset def_401A62, offset def_401A62
.text:00401A6C                 dd offset def_401A62, offset def_401A62, offset def_401A62
.text:00401A6C                 dd offset def_401A62, offset def_401A62, offset def_401A62
.text:00401A6C                 dd offset def_401A62, offset def_401A62, offset def_401A62
.text:00401A6C                 dd offset def_401A62, offset def_401A62, offset def_401A62
.text:00401A6C                 dd offset def_401A62, offset loc_40203A, offset def_401A62
.text:00401A6C                 dd offset loc_402228, offset def_401A62, offset def_401A62
.text:00401A6C                 dd offset def_401A62, offset loc_40204B, offset def_401A62
.text:00401A6C                 dd offset def_401A62, offset def_401A62, offset loc_402057
.text:00401A6C                 dd offset def_401A62, offset def_401A62, offset def_401A62
.text:00401A6C                 dd offset def_401A62, offset loc_4020CE, offset loc_402126
.text:00401A6C                 dd offset def_401A62, offset def_401A62, offset loc_402139
.text:00401A6C                 dd offset def_401A62, offset def_401A62, offset def_401A62
.text:00401A6C                 dd offset def_401A62, offset def_401A62, offset def_401A62
.text:00401A6C                 dd offset def_401A62, offset def_401A62, offset def_401A62
.text:00401A6C                 dd offset loc_4021BA, offset loc_4021CD, offset loc_4021D9
.text:00401A6C                 dd offset loc_4021E5, offset loc_4021F1, offset loc_402228
.text:00401A6C                 dd offset def_401A62, offset loc_402234, offset loc_402245
.text:00401A6C                 dd offset def_401A62, offset def_401A62, offset loc_40227C
.text:00401A6C                 dd offset loc_4022F2, offset loc_4022FE, offset loc_402337
.text:00401A6C                 dd offset def_401A62, offset def_401A62, offset loc_4023AD
.text:00401A6C                 dd offset loc_4023B9, offset loc_4023D3, offset def_401A62
.text:00401A6C                 dd offset loc_4023E6, offset loc_4023F2, offset def_401A62
.text:00401A6C                 dd offset def_401A62, offset def_401A62, offset def_401A62
.text:00401A6C                 dd offset def_401A62, offset def_401A62, offset def_401A62
.text:00401A6C                 dd offset def_401A62, offset loc_402484, offset loc_4024FA
.text:00401E80 ; ---------------------------------------------------------------------------
.text:00401E80
.text:00401E80 loc_401E80:                             ; CODE XREF: sub_401910+152↑j
.text:00401E80                                         ; DATA XREF: sub_401910:jpt_401A62↑o
.text:00401E80                 mov     ecx, ds:dword_41E0E4 ; jumptable 00401A62 case 1
.text:00401E86                 mov     ebx, ds:dword_41E0E0
.text:00401E8C                 mov     eax, ecx
.text:00401E8E                 or      eax, ebx
.text:00401E90                 jnz     loc_401F70
.text:00401E96                 mov     eax, ds:Str
.text:00401E9B                 cmp     byte ptr [eax], 2Bh ; '+'
.text:00401E9E                 jz      short loc_401EAC
.text:00401EA0
.text:00401EA0 loc_401EA0:                             ; CODE XREF: sub_401910+665↓j
.text:00401EA0                 mov     ebx, [ebp+var_38]
.text:00401EA3                 mov     [ebx+edi*4], eax
.text:00401EA6                 inc     edi
.text:00401EA7                 jmp     loc_4019C0
.text:00401EAC ; ---------------------------------------------------------------------------
.text:00401EAC
.text:00401EAC loc_401EAC:                             ; CODE XREF: sub_401910+58E↑j
.text:00401EAC                 mov     [ebp+var_50], 0FFFFFFFFh
.text:00401EB3                 inc     eax
.text:00401EB4                 mov     [ebp+String], eax
.text:00401EB7                 mov     [ebp+var_4C], 0FFFFFFFFh
.text:00401EBE                 call    _errno
.text:00401EC3                 mov     dword ptr [eax], 0
.text:00401EC9                 mov     ebx, [ebp+String]
.text:00401ECC                 lea     ecx, [ebp+EndPtr]
.text:00401ECF                 mov     [esp+98h+Locale], ecx ; EndPtr
.text:00401ED3                 mov     [esp+98h+var_90], 0Ah ; Radix
.text:00401EDB                 mov     [esp+98h+Category], ebx ; String
.text:00401EDE                 call    _strtoull
.text:00401EE3                 mov     [ebp+var_44], edx
.text:00401EE6                 mov     [ebp+var_48], eax
.text:00401EE9                 call    _errno
.text:00401EEE                 mov     edx, [eax]
.text:00401EF0                 mov     eax, [ebp+EndPtr]
.text:00401EF3                 cmp     eax, [ebp+String]
.text:00401EF6                 mov     [ebp+ErrorMessage], edx
.text:00401EF9                 jz      short loc_401F70
.text:00401EFB                 mov     edx, [ebp+var_44]
.text:00401EFE                 or      edx, [ebp+var_48]
.text:00401F01                 jz      short loc_401F70
.text:00401F03                 cmp     byte ptr [eax], 3Ah ; ':'
.text:00401F06                 jz      short loc_401F7A
.text:00401F08
.text:00401F08 loc_401F08:                             ; CODE XREF: sub_401910+6AE↓j
.text:00401F08                                         ; sub_401910+6BC↓j
.text:00401F08                 cmp     byte ptr [eax], 0
.text:00401F0B                 jnz     short loc_401F70
.text:00401F0D                 mov     ecx, [ebp+ErrorMessage]
.text:00401F10                 test    ecx, ecx
.text:00401F12                 jnz     short loc_401F3D
.text:00401F14
.text:00401F14 loc_401F14:                             ; CODE XREF: sub_401910+658↓j
.text:00401F14                 mov     edx, [ebp+var_48]
.text:00401F17                 mov     ecx, [ebp+var_44]
.text:00401F1A                 mov     ds:dword_41E0E0, edx
.text:00401F20                 mov     edx, [ebp+var_50]
.text:00401F23                 mov     ds:dword_41E0E4, ecx
.text:00401F29                 mov     ecx, [ebp+var_4C]
.text:00401F2C
.text:00401F2C loc_401F2C:                             ; CODE XREF: sub_401910+CA1↓j
.text:00401F2C                 mov     dword_41D038, edx
.text:00401F32                 mov     dword_41D03C, ecx
.text:00401F38                 jmp     loc_4019C0
.text:00401F3D ; ---------------------------------------------------------------------------
.text:00401F3D
.text:00401F3D loc_401F3D:                             ; CODE XREF: sub_401910+602↑j
.text:00401F3D                 mov     [esp+98h+Category], offset aPageRangeS ; "Page range `%s'"
.text:00401F44                 call    ds:libintl_gettext
.text:00401F4A                 mov     [esp+98h+Category], 1 ; Code
.text:00401F51                 mov     ebx, [ebp+String]
.text:00401F54                 mov     [esp+98h+var_90], eax ; char *
.text:00401F58                 mov     eax, [ebp+ErrorMessage]
.text:00401F5B                 mov     dword ptr [esp+98h+var_8C], ebx ; char
.text:00401F5F                 mov     [esp+98h+Locale], eax ; ErrorMessage
.text:00401F63                 call    sub_40A7B0
.text:00401F68                 jmp     short loc_401F14
.text:00401F68 ; ---------------------------------------------------------------------------
.text:00401F6A                 align 10h
.text:00401F70
.text:00401F70 loc_401F70:                             ; CODE XREF: sub_401910+580↑j
.text:00401F70                                         ; sub_401910+5E9↑j ...
.text:00401F70                 mov     eax, ds:Str
.text:00401F75                 jmp     loc_401EA0
.text:00401F7A ; ---------------------------------------------------------------------------
.text:00401F7A
.text:00401F7A loc_401F7A:                             ; CODE XREF: sub_401910+5F6↑j
.text:00401F7A                 lea     ebx, [eax+1]
.text:00401F7D                 call    _errno
.text:00401F82                 mov     dword ptr [eax], 0
.text:00401F88                 lea     edx, [ebp+EndPtr]
.text:00401F8B                 mov     [esp+98h+var_90], 0Ah ; Radix
.text:00401F93                 mov     [esp+98h+Locale], edx ; EndPtr
.text:00401F97                 mov     [esp+98h+Category], ebx ; String
.text:00401F9A                 call    _strtoull
.text:00401F9F                 mov     [ebp+var_50], eax
.text:00401FA2                 mov     [ebp+var_4C], edx
.text:00401FA5                 call    _errno
.text:00401FAA                 mov     ecx, [eax]
.text:00401FAC                 mov     eax, [ebp+EndPtr]
.text:00401FAF                 or      [ebp+ErrorMessage], ecx
.text:00401FB2                 cmp     ebx, eax
.text:00401FB4                 jz      short loc_401F70
.text:00401FB6                 mov     ebx, [ebp+var_44]
.text:00401FB9                 cmp     [ebp+var_4C], ebx
.text:00401FBC                 jb      short loc_401F70
.text:00401FBE                 ja      loc_401F08
.text:00401FC4                 mov     edx, [ebp+var_48]
.text:00401FC7                 cmp     [ebp+var_50], edx
.text:00401FCA                 jb      short loc_401F70
.text:00401FCC                 jmp     loc_401F08
.text:00401FD1 ; ---------------------------------------------------------------------------
.text:00401FD1
.text:00401FD1 loc_401FD1:                             ; CODE XREF: sub_401910+152↑j
.text:00401FD1                                         ; DATA XREF: sub_401910:jpt_401A62↑o
.text:00401FD1                 mov     [esp+98h+var_80], 0 ; jumptable 00401A62 case -131
.text:00401FD9                 mov     esi, ds:_iob
.text:00401FDF                 mov     [esp+98h+var_84], offset aRolandHuebner ; "Roland Huebner"
.text:00401FE7                 mov     [esp+98h+Str], offset aPeteTermaat ; "Pete TerMaat"
.text:00401FEF                 add     esi, 20h ; ' '
.text:00401FF2                 mov     dword ptr [esp+98h+var_8C], offset a530 ; "5.3.0"
.text:00401FFA                 mov     [esp+98h+var_90], offset aGnuCoreutils ; "GNU coreutils"
.text:00402002                 mov     [esp+98h+Locale], offset stru_401664 ; FILE *
.text:0040200A                 mov     [esp+98h+Category], esi ; FILE *
.text:0040200D                 call    sub_408980
.text:00402012
.text:00402012 loc_402012:                             ; CODE XREF: sub_401910+E7B↓j
.text:00402012                 mov     [esp+98h+Category], 0 ; Code
.text:00402019
.text:00402019 loc_402019:                             ; CODE XREF: sub_401910+E88↓j
.text:00402019                 call    exit
.text:0040201E ; ---------------------------------------------------------------------------
.text:0040201E
.text:0040201E loc_40201E:                             ; CODE XREF: sub_401910+152↑j
.text:0040201E                                         ; DATA XREF: sub_401910:jpt_401A62↑o
.text:0040201E                 mov     [esp+98h+Category], 0 ; jumptable 00401A62 case -130
.text:00402025                 lea     esi, [esi+0]
.text:00402029                 lea     edi, [edi+0]
.text:00402030
.text:00402030 loc_402030:                             ; CODE XREF: sub_401910+B6F↓j
.text:00402030                 call    sub_4060C0
.text:00402030 ; ---------------------------------------------------------------------------
.text:00402035                 db 0E9h ; é
.text:00402036                 db  86h ; †
.text:00402037                 db 0F9h ; ù
.text:00402038                 db 0FFh ; ÿ
.text:00402039                 db 0FFh ; ÿ
.text:0040203A ; ---------------------------------------------------------------------------
.text:0040203A
.text:0040203A loc_40203A:                             ; CODE XREF: sub_401910+152↑j
.text:0040203A                                         ; DATA XREF: sub_401910:jpt_401A62↑o
.text:0040203A                 mov     ecx, ds:Str     ; jumptable 00401A62 case 68
.text:00402040                 mov     ds:Format, ecx
.text:00402046                 jmp     loc_4019C0
.text:0040204B ; ---------------------------------------------------------------------------
.text:0040204B
.text:0040204B loc_40204B:                             ; CODE XREF: sub_401910+152↑j
.text:0040204B                                         ; DATA XREF: sub_401910:jpt_401A62↑o
.text:0040204B                 mov     ds:byte_41E090, 1 ; jumptable 00401A62 case 74
.text:00402052                 jmp     loc_4019C0
.text:00402057 ; ---------------------------------------------------------------------------
.text:00402057
.text:00402057 loc_402057:                             ; CODE XREF: sub_401910+152↑j
.text:00402057                                         ; DATA XREF: sub_401910:jpt_401A62↑o
.text:00402057                 mov     byte_41D048, 0  ; jumptable 00401A62 case 78
.text:0040205E                 mov     edx, ds:Str
.text:00402064                 lea     ecx, [ebp+var_24]
.text:00402067                 mov     [esp+98h+Str], offset Locale ; Str
.text:0040206F                 mov     dword ptr [esp+98h+var_8C], ecx ; int
.text:00402073                 mov     [esp+98h+var_90], 0Ah ; int
.text:0040207B                 mov     [esp+98h+Locale], 0 ; char **
.text:00402083                 mov     [esp+98h+Category], edx ; char *
.text:00402086                 call    sub_408A30
.text:0040208B                 test    eax, eax
.text:0040208D                 jnz     short loc_40209D
.text:0040208F
.text:0040208F loc_40208F:                             ; CODE XREF: sub_401910+7BC↓j
.text:0040208F                 mov     edx, [ebp+var_24]
.text:00402092                 mov     dword_41D04C, edx
.text:00402098                 jmp     loc_4019C0
.text:0040209D ; ---------------------------------------------------------------------------
.text:0040209D
.text:0040209D loc_40209D:                             ; CODE XREF: sub_401910+77D↑j
.text:0040209D                 mov     [esp+98h+Category], offset stru_401664._tmpfname
.text:004020A4                 call    ds:libintl_gettext
.text:004020AA                 mov     [esp+98h+Locale], 0 ; ErrorMessage
.text:004020B2                 mov     ebx, ds:Str
.text:004020B8                 mov     [esp+98h+Category], 1 ; Code
.text:004020BF                 mov     dword ptr [esp+98h+var_8C], ebx ; char
.text:004020C3                 mov     [esp+98h+var_90], eax ; char *
.text:004020C7                 call    sub_40A7B0
.text:004020CC                 jmp     short loc_40208F
.text:004020CE ; ---------------------------------------------------------------------------
.text:004020CE
.text:004020CE loc_4020CE:                             ; CODE XREF: sub_401910+152↑j
.text:004020CE                                         ; DATA XREF: sub_401910:jpt_401A62↑o
.text:004020CE                 mov     [ebp+var_33], 0 ; jumptable 00401A62 case 83
.text:004020D2                 mov     ebx, offset Locale
.text:004020D7                 xor     edx, edx
.text:004020D9                 mov     off_41D054, ebx
.text:004020DF                 mov     ds:dword_41E170, edx
.text:004020E5                 mov     ds:byte_41E160, 1
.text:004020EC
.text:004020EC loc_4020EC:                             ; CODE XREF: sub_401910+ABE↓j
.text:004020EC                 mov     ebx, ds:Str
.text:004020F2                 test    ebx, ebx
.text:004020F4                 jz      loc_4019C0
.text:004020FA                 mov     [esp+98h+Category], ebx ; Str
.text:004020FD                 call    strlen
.text:00402102                 mov     ds:dword_41E170, eax
.text:00402107                 inc     eax
.text:00402108                 mov     [esp+98h+Category], eax ; size_t
.text:0040210B                 call    sub_4081B0
.text:00402110                 mov     [esp+98h+Category], eax ; Destination
.text:00402113                 mov     [esp+98h+Locale], ebx ; Source
.text:00402117                 mov     off_41D054, eax
.text:0040211C                 call    strcpy
.text:00402121                 jmp     loc_4019C0
.text:00402126 ; ---------------------------------------------------------------------------
.text:00402126
.text:00402126 loc_402126:                             ; CODE XREF: sub_401910+152↑j
.text:00402126                                         ; DATA XREF: sub_401910:jpt_401A62↑o
.text:00402126                 mov     byte_41D010, 0  ; jumptable 00401A62 case 84
.text:0040212D                 mov     ds:byte_41E020, 0
.text:00402134                 jmp     loc_4019C0
.text:00402139 ; ---------------------------------------------------------------------------
.text:00402139
.text:00402139 loc_402139:                             ; CODE XREF: sub_401910+152↑j
.text:00402139                                         ; DATA XREF: sub_401910:jpt_401A62↑o
.text:00402139                 mov     [ebp+var_32], 0 ; jumptable 00401A62 case 87
.text:0040213D                 mov     edx, ds:Str
.text:00402143                 lea     ebx, [ebp+var_30]
.text:00402146                 mov     ds:byte_41E080, 1
.text:0040214D                 mov     [esp+98h+Str], offset Locale ; Str
.text:00402155                 mov     dword ptr [esp+98h+var_8C], ebx ; int
.text:00402159                 mov     [esp+98h+var_90], 0Ah ; int
.text:00402161                 mov     [esp+98h+Locale], 0 ; char **
.text:00402169                 mov     [esp+98h+Category], edx ; char *
.text:0040216C                 call    sub_408A30
.text:00402171                 test    eax, eax
.text:00402173                 jnz     short loc_402186
.text:00402175                 mov     eax, [ebp+var_30]
.text:00402178                 test    eax, eax
.text:0040217A                 jle     short loc_402186
.text:0040217C
.text:0040217C loc_40217C:                             ; CODE XREF: sub_401910+8A8↓j
.text:0040217C                                         ; sub_401910+B32↓j
.text:0040217C                 mov     dword_41D020, eax
.text:00402181                 jmp     loc_4019C0
.text:00402186 ; ---------------------------------------------------------------------------
.text:00402186
.text:00402186 loc_402186:                             ; CODE XREF: sub_401910+863↑j
.text:00402186                                         ; sub_401910+86A↑j
.text:00402186                 mov     [esp+98h+Category], offset aWPageWidthInva ; "`-W PAGE_WIDTH' invalid number of chara"...
.text:0040218D                 call    ds:libintl_gettext
.text:00402193                 mov     [esp+98h+Locale], 0 ; ErrorMessage
.text:0040219B                 mov     ecx, ds:Str
.text:004021A1                 mov     [esp+98h+Category], 1 ; Code
.text:004021A8                 mov     [esp+98h+var_90], eax ; char *
.text:004021AC                 mov     dword ptr [esp+98h+var_8C], ecx ; char
.text:004021B0                 call    sub_40A7B0
.text:004021B5                 mov     eax, [ebp+var_30]
.text:004021B8                 jmp     short loc_40217C
.text:004021BA ; ---------------------------------------------------------------------------
.text:004021BA
.text:004021BA loc_4021BA:                             ; CODE XREF: sub_401910+152↑j
.text:004021BA                                         ; DATA XREF: sub_401910:jpt_401A62↑o
.text:004021BA                 mov     ds:byte_41E060, 1 ; jumptable 00401A62 case 97
.text:004021C1
.text:004021C1 loc_4021C1:                             ; CODE XREF: sub_401910+9E9↓j
.text:004021C1                 mov     byte_41D011, 0
.text:004021C8                 jmp     loc_4019C0
.text:004021CD ; ---------------------------------------------------------------------------
.text:004021CD
.text:004021CD loc_4021CD:                             ; CODE XREF: sub_401910+152↑j
.text:004021CD                                         ; DATA XREF: sub_401910:jpt_401A62↑o
.text:004021CD                 mov     ds:byte_41E070, 1 ; jumptable 00401A62 case 98
.text:004021D4                 jmp     loc_4019C0
.text:004021D9 ; ---------------------------------------------------------------------------
.text:004021D9
.text:004021D9 loc_4021D9:                             ; CODE XREF: sub_401910+152↑j
.text:004021D9                                         ; DATA XREF: sub_401910:jpt_401A62↑o
.text:004021D9                 mov     ds:byte_41E120, 1 ; jumptable 00401A62 case 99
.text:004021E0                 jmp     loc_4019C0
.text:004021E5 ; ---------------------------------------------------------------------------
.text:004021E5
.text:004021E5 loc_4021E5:                             ; CODE XREF: sub_401910+152↑j
.text:004021E5                                         ; DATA XREF: sub_401910:jpt_401A62↑o
.text:004021E5                 mov     ds:byte_41E130, 1 ; jumptable 00401A62 case 100
.text:004021EC                 jmp     loc_4019C0
.text:004021F1 ; ---------------------------------------------------------------------------
.text:004021F1
.text:004021F1 loc_4021F1:                             ; CODE XREF: sub_401910+152↑j
.text:004021F1                                         ; DATA XREF: sub_401910:jpt_401A62↑o
.text:004021F1                 mov     eax, ds:Str     ; jumptable 00401A62 case 101
.text:004021F6                 test    eax, eax
.text:004021F8                 jnz     short loc_402206
.text:004021FA
.text:004021FA loc_4021FA:                             ; CODE XREF: sub_401910+916↓j
.text:004021FA                 mov     ds:byte_41E0A0, 1
.text:00402201                 jmp     loc_4019C0
.text:00402206 ; ---------------------------------------------------------------------------
.text:00402206
.text:00402206 loc_402206:                             ; CODE XREF: sub_401910+8E8↑j
.text:00402206                 mov     dword ptr [esp+98h+var_8C], offset dword_41D028 ; int
.text:0040220E                 mov     [esp+98h+var_90], offset byte_41D024 ; int
.text:00402216                 mov     [esp+98h+Locale], 65h ; 'e' ; char
.text:0040221E                 mov     [esp+98h+Category], eax ; char *
.text:00402221                 call    sub_402960
.text:00402226                 jmp     short loc_4021FA
.text:00402228 ; ---------------------------------------------------------------------------
.text:00402228
.text:00402228 loc_402228:                             ; CODE XREF: sub_401910+152↑j
.text:00402228                                         ; DATA XREF: sub_401910:jpt_401A62↑o
.text:00402228                 mov     ds:byte_41E040, 1 ; jumptable 00401A62 cases 70,102
.text:0040222F                 jmp     loc_4019C0
.text:00402234 ; ---------------------------------------------------------------------------
.text:00402234
.text:00402234 loc_402234:                             ; CODE XREF: sub_401910+152↑j
.text:00402234                                         ; DATA XREF: sub_401910:jpt_401A62↑o
.text:00402234                 mov     edx, ds:Str     ; jumptable 00401A62 case 104
.text:0040223A                 mov     ds:dword_41E300, edx
.text:00402240                 jmp     loc_4019C0
.text:00402245 ; ---------------------------------------------------------------------------
.text:00402245
.text:00402245 loc_402245:                             ; CODE XREF: sub_401910+152↑j
.text:00402245                                         ; DATA XREF: sub_401910:jpt_401A62↑o
.text:00402245                 mov     eax, ds:Str     ; jumptable 00401A62 case 105
.text:0040224A                 test    eax, eax
.text:0040224C                 jnz     short loc_40225A
.text:0040224E
.text:0040224E loc_40224E:                             ; CODE XREF: sub_401910+96A↓j
.text:0040224E                 mov     ds:byte_41E0B0, 1
.text:00402255                 jmp     loc_4019C0
.text:0040225A ; ---------------------------------------------------------------------------
.text:0040225A
.text:0040225A loc_40225A:                             ; CODE XREF: sub_401910+93C↑j
.text:0040225A                 mov     dword ptr [esp+98h+var_8C], offset dword_41D030 ; int
.text:00402262                 mov     [esp+98h+var_90], offset byte_41D02C ; int
.text:0040226A                 mov     [esp+98h+Locale], 69h ; 'i' ; char
.text:00402272                 mov     [esp+98h+Category], eax ; char *
.text:00402275                 call    sub_402960
.text:0040227A                 jmp     short loc_40224E
.text:0040227C ; ---------------------------------------------------------------------------
.text:0040227C
.text:0040227C loc_40227C:                             ; CODE XREF: sub_401910+152↑j
.text:0040227C                                         ; DATA XREF: sub_401910:jpt_401A62↑o
.text:0040227C                 mov     [esp+98h+Str], offset Locale ; jumptable 00401A62 case 108
.text:00402284                 mov     ebx, ds:Str
.text:0040228A                 lea     ecx, [ebp+var_20]
.text:0040228D                 mov     dword ptr [esp+98h+var_8C], ecx ; int
.text:00402291                 mov     [esp+98h+var_90], 0Ah ; int
.text:00402299                 mov     [esp+98h+Locale], 0 ; char **
.text:004022A1                 mov     [esp+98h+Category], ebx ; char *
.text:004022A4                 call    sub_408A30
.text:004022A9                 test    eax, eax
.text:004022AB                 jnz     short loc_4022BE
.text:004022AD                 mov     eax, [ebp+var_20]
.text:004022B0                 test    eax, eax
.text:004022B2                 jle     short loc_4022BE
.text:004022B4
.text:004022B4 loc_4022B4:                             ; CODE XREF: sub_401910+9E0↓j
.text:004022B4                 mov     dword_41D014, eax
.text:004022B9                 jmp     loc_4019C0
.text:004022BE ; ---------------------------------------------------------------------------
.text:004022BE
.text:004022BE loc_4022BE:                             ; CODE XREF: sub_401910+99B↑j
.text:004022BE                                         ; sub_401910+9A2↑j
.text:004022BE                 mov     [esp+98h+Category], offset aLPageLengthInv ; "`-l PAGE_LENGTH' invalid number of line"...
.text:004022C5                 call    ds:libintl_gettext
.text:004022CB                 mov     [esp+98h+Locale], 0 ; ErrorMessage
.text:004022D3                 mov     ebx, ds:Str
.text:004022D9                 mov     [esp+98h+Category], 1 ; Code
.text:004022E0                 mov     [esp+98h+var_90], eax ; char *
.text:004022E4                 mov     dword ptr [esp+98h+var_8C], ebx ; char
.text:004022E8                 call    sub_40A7B0
.text:004022ED                 mov     eax, [ebp+var_20]
.text:004022F0                 jmp     short loc_4022B4
.text:004022F2 ; ---------------------------------------------------------------------------
.text:004022F2
.text:004022F2 loc_4022F2:                             ; CODE XREF: sub_401910+152↑j
.text:004022F2                                         ; DATA XREF: sub_401910:jpt_401A62↑o
.text:004022F2                 mov     ds:byte_41E000, 1 ; jumptable 00401A62 case 109
.text:004022F9                 jmp     loc_4021C1
.text:004022FE ; ---------------------------------------------------------------------------
.text:004022FE
.text:004022FE loc_4022FE:                             ; CODE XREF: sub_401910+152↑j
.text:004022FE                                         ; DATA XREF: sub_401910:jpt_401A62↑o
.text:004022FE                 mov     ds:byte_41E100, 1 ; jumptable 00401A62 case 110
.text:00402305                 mov     eax, ds:Str
.text:0040230A                 test    eax, eax
.text:0040230C                 jz      loc_4019C0
.text:00402312                 mov     dword ptr [esp+98h+var_8C], offset dword_41D050 ; int
.text:0040231A                 mov     [esp+98h+var_90], offset byte_41D040 ; int
.text:00402322                 mov     [esp+98h+Locale], 6Eh ; 'n' ; char
.text:0040232A                 mov     [esp+98h+Category], eax ; char *
.text:0040232D                 call    sub_402960
.text:00402332                 jmp     loc_4019C0
.text:00402337 ; ---------------------------------------------------------------------------
.text:00402337
.text:00402337 loc_402337:                             ; CODE XREF: sub_401910+152↑j
.text:00402337                                         ; DATA XREF: sub_401910:jpt_401A62↑o
.text:00402337                 mov     [esp+98h+Str], offset Locale ; jumptable 00401A62 case 111
.text:0040233F                 mov     ecx, ds:Str
.text:00402345                 lea     ebx, [ebp+var_28]
.text:00402348                 mov     dword ptr [esp+98h+var_8C], ebx ; int
.text:0040234C                 mov     [esp+98h+var_90], 0Ah ; int
.text:00402354                 mov     [esp+98h+Locale], 0 ; char **
.text:0040235C                 mov     [esp+98h+Category], ecx ; char *
.text:0040235F                 call    sub_408A30
.text:00402364                 test    eax, eax
.text:00402366                 jnz     short loc_402379
.text:00402368                 mov     eax, [ebp+var_28]
.text:0040236B                 test    eax, eax
.text:0040236D                 js      short loc_402379
.text:0040236F
.text:0040236F loc_40236F:                             ; CODE XREF: sub_401910+A9B↓j
.text:0040236F                 mov     ds:dword_41E0C0, eax
.text:00402374                 jmp     loc_4019C0
.text:00402379 ; ---------------------------------------------------------------------------
.text:00402379
.text:00402379 loc_402379:                             ; CODE XREF: sub_401910+A56↑j
.text:00402379                                         ; sub_401910+A5D↑j
.text:00402379                 mov     [esp+98h+Category], offset aOMarginInvalid ; "`-o MARGIN' invalid line offset: `%s'"
.text:00402380                 call    ds:libintl_gettext
.text:00402386                 mov     [esp+98h+Locale], 0 ; ErrorMessage
.text:0040238E                 mov     ecx, ds:Str
.text:00402394                 mov     [esp+98h+Category], 1 ; Code
.text:0040239B                 mov     [esp+98h+var_90], eax ; char *
.text:0040239F                 mov     dword ptr [esp+98h+var_8C], ecx ; char
.text:004023A3                 call    sub_40A7B0
.text:004023A8                 mov     eax, [ebp+var_28]
.text:004023AB                 jmp     short loc_40236F
.text:004023AD ; ---------------------------------------------------------------------------
.text:004023AD
.text:004023AD loc_4023AD:                             ; CODE XREF: sub_401910+152↑j
.text:004023AD                                         ; DATA XREF: sub_401910:jpt_401A62↑o
.text:004023AD                 mov     ds:byte_41E150, 1 ; jumptable 00401A62 case 114
.text:004023B4                 jmp     loc_4019C0
.text:004023B9 ; ---------------------------------------------------------------------------
.text:004023B9
.text:004023B9 loc_4023B9:                             ; CODE XREF: sub_401910+152↑j
.text:004023B9                                         ; DATA XREF: sub_401910:jpt_401A62↑o
.text:004023B9                 cmp     ds:byte_41E160, 0 ; jumptable 00401A62 case 115
.text:004023C0                 mov     [ebp+var_31], 1
.text:004023C4                 mov     [ebp+var_33], 1
.text:004023C8                 jnz     loc_4019C0
.text:004023CE                 jmp     loc_4020EC
.text:004023D3 ; ---------------------------------------------------------------------------
.text:004023D3
.text:004023D3 loc_4023D3:                             ; CODE XREF: sub_401910+152↑j
.text:004023D3                                         ; DATA XREF: sub_401910:jpt_401A62↑o
.text:004023D3                 mov     byte_41D010, 0  ; jumptable 00401A62 case 116
.text:004023DA                 mov     ds:byte_41E020, 1
.text:004023E1                 jmp     loc_4019C0
.text:004023E6 ; ---------------------------------------------------------------------------
.text:004023E6
.text:004023E6 loc_4023E6:                             ; CODE XREF: sub_401910+152↑j
.text:004023E6                                         ; DATA XREF: sub_401910:jpt_401A62↑o
.text:004023E6                 mov     ds:byte_41E110, 1 ; jumptable 00401A62 case 118
.text:004023ED                 jmp     loc_4019C0
.text:004023F2 ; ---------------------------------------------------------------------------
.text:004023F2
.text:004023F2 loc_4023F2:                             ; CODE XREF: sub_401910+152↑j
.text:004023F2                                         ; DATA XREF: sub_401910:jpt_401A62↑o
.text:004023F2                 mov     [ebp+var_31], 1 ; jumptable 00401A62 case 119
.text:004023F6                 mov     ecx, ds:Str
.text:004023FC                 lea     edx, [ebp+var_2C]
.text:004023FF                 mov     [ebp+var_32], 1
.text:00402403                 mov     [esp+98h+Str], offset Locale ; Str
.text:0040240B                 mov     dword ptr [esp+98h+var_8C], edx ; int
.text:0040240F                 mov     [esp+98h+var_90], 0Ah ; int
.text:00402417                 mov     [esp+98h+Locale], 0 ; char **
.text:0040241F                 mov     [esp+98h+Category], ecx ; char *
.text:00402422                 call    sub_408A30
.text:00402427                 test    eax, eax
.text:00402429                 jnz     short loc_402447
.text:0040242B                 mov     ebx, [ebp+var_2C]
.text:0040242E                 test    ebx, ebx
.text:00402430                 jle     short loc_402447
.text:00402432
.text:00402432 loc_402432:                             ; CODE XREF: sub_401910+B66↓j
.text:00402432                 cmp     ds:byte_41E080, 0
.text:00402439                 jnz     loc_4019C0
.text:0040243F                 mov     eax, [ebp+var_2C]
.text:00402442                 jmp     loc_40217C
.text:00402447 ; ---------------------------------------------------------------------------
.text:00402447
.text:00402447 loc_402447:                             ; CODE XREF: sub_401910+B19↑j
.text:00402447                                         ; sub_401910+B20↑j
.text:00402447                 mov     [esp+98h+Category], offset aWPageWidthInva_0 ; "`-w PAGE_WIDTH' invalid number of chara"...
.text:0040244E                 call    ds:libintl_gettext
.text:00402454                 mov     [esp+98h+Locale], 0 ; ErrorMessage
.text:0040245C                 mov     ecx, ds:Str
.text:00402462                 mov     [esp+98h+Category], 1 ; Code
.text:00402469                 mov     dword ptr [esp+98h+var_8C], ecx ; char
.text:0040246D                 mov     [esp+98h+var_90], eax ; char *
.text:00402471                 call    sub_40A7B0
.text:00402476                 jmp     short loc_402432
.text:00402478 ; ---------------------------------------------------------------------------
.text:00402478
.text:00402478 def_401A62:                             ; CODE XREF: sub_401910+14C↑j
.text:00402478                                         ; sub_401910+152↑j
.text:00402478                                         ; DATA XREF: ...
.text:00402478                 mov     [esp+98h+Category], 1 ; jumptable 00401A62 default case, cases -129-0,2-67,69,71-73,75-77,79-82,85,86,88-96,103,106,107,112,113,117,120-127
.text:0040247F                 jmp     loc_402030
.text:00402484 ; ---------------------------------------------------------------------------
.text:00402484
.text:00402484 loc_402484:                             ; CODE XREF: sub_401910+152↑j
.text:00402484                                         ; DATA XREF: sub_401910:jpt_401A62↑o
.text:00402484                 mov     [esp+98h+Str], offset Locale ; jumptable 00401A62 case 128
.text:0040248C                 mov     ecx, ds:Str
.text:00402492                 lea     edx, [ebp+var_1C]
.text:00402495                 mov     dword ptr [esp+98h+var_8C], edx ; int
.text:00402499                 mov     [esp+98h+var_90], 0Ah ; int
.text:004024A1                 mov     [esp+98h+Locale], 0 ; char **
.text:004024A9                 mov     [esp+98h+Category], ecx ; char *
.text:004024AC                 call    sub_408A30
.text:004024B1                 test    eax, eax
.text:004024B3                 jnz     short loc_4024C6
.text:004024B5                 mov     eax, [ebp+var_1C]
.text:004024B8                 test    eax, eax
.text:004024BA                 jle     short loc_4024C6
.text:004024BC
.text:004024BC loc_4024BC:                             ; CODE XREF: sub_401910+BE8↓j
.text:004024BC                 mov     dword_41D034, eax
.text:004024C1                 jmp     loc_401A17
.text:004024C6 ; ---------------------------------------------------------------------------
.text:004024C6
.text:004024C6 loc_4024C6:                             ; CODE XREF: sub_401910+BA3↑j
.text:004024C6                                         ; sub_401910+BAA↑j
.text:004024C6                 mov     [esp+98h+Category], offset aColumnsColumnI ; "`--columns=COLUMN' invalid number of co"...
.text:004024CD                 call    ds:libintl_gettext
.text:004024D3                 mov     [esp+98h+Locale], 0 ; ErrorMessage
.text:004024DB                 mov     ebx, ds:Str
.text:004024E1                 mov     [esp+98h+Category], 1 ; Code
.text:004024E8                 mov     [esp+98h+var_90], eax ; char *
.text:004024EC                 mov     dword ptr [esp+98h+var_8C], ebx ; char
.text:004024F0                 call    sub_40A7B0
.text:004024F5                 mov     eax, [ebp+var_1C]
.text:004024F8                 jmp     short loc_4024BC
.text:004024FA ; ---------------------------------------------------------------------------
.text:004024FA
.text:004024FA loc_4024FA:                             ; CODE XREF: sub_401910+152↑j
.text:004024FA                                         ; DATA XREF: sub_401910:jpt_401A62↑o
.text:004024FA                 mov     ecx, ds:Str     ; jumptable 00401A62 case 129
.text:00402500                 test    ecx, ecx
.text:00402502                 mov     [ebp+var_58], ecx
.text:00402505                 jnz     short loc_402531
.text:00402507                 mov     [esp+98h+Category], offset aPagesFirstPage ; "`--pages=FIRST_PAGE[:LAST_PAGE]' missin"...
.text:0040250E                 call    ds:libintl_gettext
.text:00402514                 mov     [esp+98h+Locale], 0 ; ErrorMessage
.text:0040251C                 mov     [esp+98h+Category], 1 ; Code
.text:00402523                 mov     [esp+98h+var_90], eax ; char *
.text:00402527                 call    sub_40A7B0
.text:0040252C                 jmp     loc_4019C0
.text:00402531 ; ---------------------------------------------------------------------------
.text:00402531
.text:00402531 loc_402531:                             ; CODE XREF: sub_401910+BF5↑j
.text:00402531                 mov     [ebp+var_68], 0FFFFFFFFh
.text:00402538                 lea     ebx, [ebp+var_18]
.text:0040253B                 mov     [ebp+var_64], 0FFFFFFFFh
.text:00402542                 call    _errno
.text:00402547                 mov     dword ptr [eax], 0
.text:0040254D                 mov     eax, [ebp+var_58]
.text:00402550                 mov     [esp+98h+var_90], 0Ah ; Radix
.text:00402558                 mov     [esp+98h+Locale], ebx ; EndPtr
.text:0040255C                 mov     [esp+98h+Category], eax ; String
.text:0040255F                 call    _strtoull
.text:00402564                 mov     [ebp+var_5C], edx
.text:00402567                 mov     [ebp+var_60], eax
.text:0040256A                 call    _errno
.text:0040256F                 mov     edx, [eax]
.text:00402571                 mov     eax, [ebp+var_18]
.text:00402574                 cmp     eax, [ebp+var_58]
.text:00402577                 mov     [ebp+var_6C], edx
.text:0040257A                 jz      short loc_4025E3
.text:0040257C                 mov     ecx, [ebp+var_5C]
.text:0040257F                 or      ecx, [ebp+var_60]
.text:00402582                 jz      short loc_4025E3
.text:00402584                 cmp     byte ptr [eax], 3Ah ; ':'
.text:00402587                 jz      loc_402617
.text:0040258D
.text:0040258D loc_40258D:                             ; CODE XREF: sub_401910+D4B↓j
.text:0040258D                                         ; sub_401910+D5D↓j
.text:0040258D                 cmp     byte ptr [eax], 0
.text:00402590                 jnz     short loc_4025E3
.text:00402592                 mov     ecx, [ebp+var_6C]
.text:00402595                 test    ecx, ecx
.text:00402597                 jnz     short loc_4025B6
.text:00402599
.text:00402599 loc_402599:                             ; CODE XREF: sub_401910+CD1↓j
.text:00402599                 mov     edx, [ebp+var_60]
.text:0040259C                 mov     ecx, [ebp+var_5C]
.text:0040259F                 mov     ds:dword_41E0E0, edx
.text:004025A5                 mov     edx, [ebp+var_68]
.text:004025A8                 mov     ds:dword_41E0E4, ecx
.text:004025AE                 mov     ecx, [ebp+var_64]
.text:004025B1                 jmp     loc_401F2C
.text:004025B6 ; ---------------------------------------------------------------------------
.text:004025B6
.text:004025B6 loc_4025B6:                             ; CODE XREF: sub_401910+C87↑j
.text:004025B6                 mov     [esp+98h+Category], offset aPageRangeS ; "Page range `%s'"
.text:004025BD                 call    ds:libintl_gettext
.text:004025C3                 mov     [esp+98h+Category], 1 ; Code
.text:004025CA                 mov     ebx, [ebp+var_58]
.text:004025CD                 mov     [esp+98h+var_90], eax ; char *
.text:004025D1                 mov     eax, [ebp+var_6C]
.text:004025D4                 mov     dword ptr [esp+98h+var_8C], ebx ; char
.text:004025D8                 mov     [esp+98h+Locale], eax ; ErrorMessage
.text:004025DC                 call    sub_40A7B0
.text:004025E1                 jmp     short loc_402599
.text:004025E3 ; ---------------------------------------------------------------------------
.text:004025E3
.text:004025E3 loc_4025E3:                             ; CODE XREF: sub_401910+C6A↑j
.text:004025E3                                         ; sub_401910+C72↑j ...
.text:004025E3                 mov     [esp+98h+Category], offset aInvalidPageRan ; "Invalid page range `%s'"
.text:004025EA                 call    ds:libintl_gettext
.text:004025F0                 mov     [esp+98h+Locale], 0 ; ErrorMessage
.text:004025F8                 mov     ebx, ds:Str
.text:004025FE                 mov     [esp+98h+Category], 1 ; Code
.text:00402605                 mov     dword ptr [esp+98h+var_8C], ebx ; char
.text:00402609                 mov     [esp+98h+var_90], eax ; char *
.text:0040260D                 call    sub_40A7B0
.text:00402612                 jmp     loc_4019C0
.text:00402617 ; ---------------------------------------------------------------------------
.text:00402617
.text:00402617 loc_402617:                             ; CODE XREF: sub_401910+C77↑j
.text:00402617                 lea     ebx, [eax+1]
.text:0040261A                 call    _errno
.text:0040261F                 mov     dword ptr [eax], 0
.text:00402625                 lea     edx, [ebp+var_18]
.text:00402628                 mov     [esp+98h+var_90], 0Ah ; Radix
.text:00402630                 mov     [esp+98h+Locale], edx ; EndPtr
.text:00402634                 mov     [esp+98h+Category], ebx ; String
.text:00402637                 call    _strtoull
.text:0040263C                 mov     [ebp+var_68], eax
.text:0040263F                 mov     [ebp+var_64], edx
.text:00402642                 call    _errno
.text:00402647                 mov     ecx, [eax]
.text:00402649                 mov     eax, [ebp+var_18]
.text:0040264C                 or      [ebp+var_6C], ecx
.text:0040264F                 cmp     ebx, eax
.text:00402651                 jz      short loc_4025E3
.text:00402653                 mov     ebx, [ebp+var_5C]
.text:00402656                 cmp     [ebp+var_64], ebx
.text:00402659                 jb      short loc_4025E3
.text:0040265B                 ja      loc_40258D
.text:00402661                 mov     edx, [ebp+var_60]
.text:00402664                 cmp     [ebp+var_68], edx
.text:00402667                 jb      loc_4025E3
.text:0040266D                 jmp     loc_40258D
.text:00402672 ; ---------------------------------------------------------------------------
.text:00402672
.text:00402672 loc_402672:                             ; CODE XREF: sub_401910+DE↑j
.text:00402672                 mov     ecx, ds:Format
.text:00402678                 test    ecx, ecx
.text:0040267A                 jz      loc_4028B5
.text:00402680
.text:00402680 loc_402680:                             ; CODE XREF: sub_401910+FC0↓j
.text:00402680                 mov     ebx, ds:dword_41E0E4
.text:00402686                 mov     esi, ds:dword_41E0E0
.text:0040268C                 mov     eax, ebx
.text:0040268E                 or      eax, esi
.text:00402690                 jnz     short loc_4026A5
.text:00402692                 mov     edx, 1
.text:00402697                 xor     ecx, ecx
.text:00402699                 mov     ds:dword_41E0E0, edx
.text:0040269F                 mov     ds:dword_41E0E4, ecx
.text:004026A5
.text:004026A5 loc_4026A5:                             ; CODE XREF: sub_401910+D80↑j
.text:004026A5                 cmp     ds:byte_41E010, 0
.text:004026AC                 jz      short loc_4026BB
.text:004026AE                 cmp     ds:byte_41E000, 0
.text:004026B5                 jnz     loc_40288B
.text:004026BB
.text:004026BB loc_4026BB:                             ; CODE XREF: sub_401910+D9C↑j
.text:004026BB                                         ; sub_401910+FA0↓j
.text:004026BB                 cmp     ds:byte_41E060, 0
.text:004026C2                 jz      short loc_4026D1
.text:004026C4                 cmp     ds:byte_41E000, 0
.text:004026CB                 jnz     loc_402861
.text:004026D1
.text:004026D1 loc_4026D1:                             ; CODE XREF: sub_401910+DB2↑j
.text:004026D1                                         ; sub_401910+F76↓j
.text:004026D1                 cmp     [ebp+var_31], 0
.text:004026D5                 jz      short loc_40270B
.text:004026D7                 cmp     [ebp+var_32], 0
.text:004026DB                 jz      loc_402808
.text:004026E1                 cmp     ds:byte_41E010, 0
.text:004026E8                 jnz     short loc_4026F7
.text:004026EA                 cmp     ds:byte_41E000, 0
.text:004026F1                 jz      loc_4027FC
.text:004026F7
.text:004026F7 loc_4026F7:                             ; CODE XREF: sub_401910+DD8↑j
.text:004026F7                 cmp     [ebp+var_33], 0
.text:004026FB                 mov     ds:byte_41E080, 1
.text:00402702                 jz      short loc_40270B
.text:00402704
.text:00402704 loc_402704:                             ; CODE XREF: sub_401910+F31↓j
.text:00402704                                         ; sub_401910+F46↓j
.text:00402704                 mov     ds:byte_41E160, 1
.text:0040270B
.text:0040270B loc_40270B:                             ; CODE XREF: sub_401910+DC5↑j
.text:0040270B                                         ; sub_401910+DF2↑j ...
.text:0040270B                 mov     eax, dword_41D060
.text:00402710                 cmp     eax, [ebp+arg_0]
.text:00402713                 jge     short loc_40273C
.text:00402715                 lea     edx, [eax+1]
.text:00402718                 nop
.text:00402719                 lea     esi, [esi+0]
.text:00402720
.text:00402720 loc_402720:                             ; CODE XREF: sub_401910+E2A↓j
.text:00402720                 mov     dword_41D060, edx
.text:00402726                 mov     eax, [ebp+arg_4]
.text:00402729                 mov     esi, [ebp+var_38]
.text:0040272C                 mov     ebx, [eax+edx*4-4]
.text:00402730                 mov     [esi+edi*4], ebx
.text:00402733                 mov     ebx, edx
.text:00402735                 inc     edi
.text:00402736                 inc     edx
.text:00402737                 cmp     ebx, [ebp+arg_0]
.text:0040273A                 jl      short loc_402720
.text:0040273C
.text:0040273C loc_40273C:                             ; CODE XREF: sub_401910+E03↑j
.text:0040273C                 test    edi, edi
.text:0040273E                 jz      loc_4027EB
.text:00402744                 cmp     ds:byte_41E000, 0
.text:0040274B                 jnz     loc_4027DA
.text:00402751                 test    edi, edi
.text:00402753                 jle     short loc_402776
.text:00402755                 mov     esi, [ebp+var_38]
.text:00402758                 mov     ebx, edi
.text:0040275A                 lea     esi, [esi+0]
.text:00402760
.text:00402760 loc_402760:                             ; CODE XREF: sub_401910+E64↓j
.text:00402760                 mov     [esp+98h+Locale], esi
.text:00402764                 add     esi, 4
.text:00402767                 mov     [esp+98h+Category], 1
.text:0040276E                 call    sub_402B00
.text:00402773                 dec     ebx
.text:00402774                 jnz     short loc_402760
.text:00402776
.text:00402776 loc_402776:                             ; CODE XREF: sub_401910+E43↑j
.text:00402776                                         ; sub_401910+ED9↓j
.text:00402776                 call    sub_404EB0
.text:0040277B                 cmp     ds:byte_41E050, 0
.text:00402782                 jnz     short loc_40279D
.text:00402784
.text:00402784 loc_402784:                             ; CODE XREF: sub_401910+E9C↓j
.text:00402784                                         ; sub_401910+EC8↓j
.text:00402784                 cmp     ds:byte_41E0D0, 0
.text:0040278B                 jz      loc_402012
.text:00402791                 mov     [esp+98h+Category], 1
.text:00402798                 jmp     loc_402019
.text:0040279D ; ---------------------------------------------------------------------------
.text:0040279D
.text:0040279D loc_40279D:                             ; CODE XREF: sub_401910+E72↑j
.text:0040279D                 mov     edi, ds:_iob
.text:004027A3                 mov     [esp+98h+Category], edi ; Stream
.text:004027A6                 call    fclose
.text:004027AB                 inc     eax
.text:004027AC                 jnz     short loc_402784
.text:004027AE                 mov     [esp+98h+Category], offset aStandardInput ; "standard input"
.text:004027B5                 call    ds:libintl_gettext
.text:004027BB                 mov     esi, eax
.text:004027BD                 call    _errno
.text:004027C2                 mov     [esp+98h+var_90], esi ; char *
.text:004027C6                 mov     edx, [eax]
.text:004027C8                 mov     [esp+98h+Category], 1 ; Code
.text:004027CF                 mov     [esp+98h+Locale], edx ; ErrorMessage
.text:004027D3                 call    sub_40A7B0
.text:004027D8                 jmp     short loc_402784
.text:004027DA ; ---------------------------------------------------------------------------
.text:004027DA
.text:004027DA loc_4027DA:                             ; CODE XREF: sub_401910+E3B↑j
.text:004027DA                 mov     [esp+98h+Category], edi
.text:004027DD                 mov     ecx, [ebp+var_38]
.text:004027E0                 mov     [esp+98h+Locale], ecx
.text:004027E4
.text:004027E4 loc_4027E4:                             ; CODE XREF: sub_401910+EEA↓j
.text:004027E4                 call    sub_402B00
.text:004027E9                 jmp     short loc_402776
.text:004027EB ; ---------------------------------------------------------------------------
.text:004027EB
.text:004027EB loc_4027EB:                             ; CODE XREF: sub_401910+E2E↑j
.text:004027EB                 mov     [esp+98h+Locale], 0
.text:004027F3                 mov     [esp+98h+Category], 0
.text:004027FA                 jmp     short loc_4027E4
.text:004027FC ; ---------------------------------------------------------------------------
.text:004027FC
.text:004027FC loc_4027FC:                             ; CODE XREF: sub_401910+DE1↑j
.text:004027FC                 mov     ds:byte_41E090, 1
.text:00402803                 jmp     loc_40270B
.text:00402808 ; ---------------------------------------------------------------------------
.text:00402808
.text:00402808 loc_402808:                             ; CODE XREF: sub_401910+DCB↑j
.text:00402808                 cmp     ds:byte_41E160, 0
.text:0040280F                 jnz     loc_40270B
.text:00402815                 movzx   eax, [ebp+var_33]
.text:00402819                 xor     edx, edx
.text:0040281B                 cmp     ds:byte_41E010, 0
.text:00402822                 jnz     short loc_40282D
.text:00402824                 cmp     ds:byte_41E000, 0
.text:0040282B                 jz      short loc_402832
.text:0040282D
.text:0040282D loc_40282D:                             ; CODE XREF: sub_401910+F12↑j
.text:0040282D                 mov     edx, 1
.text:00402832
.text:00402832 loc_402832:                             ; CODE XREF: sub_401910+F1B↑j
.text:00402832                 test    edx, eax
.text:00402834                 jz      loc_40270B
.text:0040283A                 cmp     ds:byte_41E080, 0
.text:00402841                 jnz     loc_402704
.text:00402847                 mov     ds:byte_41E090, 1
.text:0040284E                 mov     esi, ds:dword_41E170
.text:00402854                 test    esi, esi
.text:00402856                 jg      loc_402704
.text:0040285C                 jmp     loc_40270B
.text:00402861 ; ---------------------------------------------------------------------------
.text:00402861
.text:00402861 loc_402861:                             ; CODE XREF: sub_401910+DBB↑j
.text:00402861                 mov     [esp+98h+Category], offset aCannotSpecifyB ; "Cannot specify both printing across and"...
.text:00402868                 call    ds:libintl_gettext
.text:0040286E                 mov     [esp+98h+Locale], 0 ; ErrorMessage
.text:00402876                 mov     [esp+98h+Category], 1 ; Code
.text:0040287D                 mov     [esp+98h+var_90], eax ; char *
.text:00402881                 call    sub_40A7B0
.text:00402886                 jmp     loc_4026D1
.text:0040288B ; ---------------------------------------------------------------------------
.text:0040288B
.text:0040288B loc_40288B:                             ; CODE XREF: sub_401910+DA5↑j
.text:0040288B                 mov     [esp+98h+Category], offset aCannotSpecifyN ; "Cannot specify number of columns when p"...
.text:00402892                 call    ds:libintl_gettext
.text:00402898                 mov     [esp+98h+Locale], 0 ; ErrorMessage
.text:004028A0                 mov     [esp+98h+Category], 1 ; Code
.text:004028A7                 mov     [esp+98h+var_90], eax ; char *
.text:004028AB                 call    sub_40A7B0
.text:004028B0                 jmp     loc_4026BB
.text:004028B5 ; ---------------------------------------------------------------------------
.text:004028B5
.text:004028B5 loc_4028B5:                             ; CODE XREF: sub_401910+D6A↑j
.text:004028B5                 mov     [esp+98h+Category], offset VarName ; "POSIXLY_CORRECT"
.text:004028BC                 call    getenv
.text:004028C1                 test    eax, eax
.text:004028C3                 jnz     short loc_4028D5
.text:004028C5
.text:004028C5 loc_4028C5:                             ; CODE XREF: sub_401910+FDA↓j
.text:004028C5                 mov     edx, offset aYMDHM ; "%Y-%m-%d %H:%M"
.text:004028CA
.text:004028CA loc_4028CA:                             ; CODE XREF: sub_401910+FD8↓j
.text:004028CA                 mov     ds:Format, edx
.text:004028D0                 jmp     loc_402680
.text:004028D5 ; ---------------------------------------------------------------------------
.text:004028D5
.text:004028D5 loc_4028D5:                             ; CODE XREF: sub_401910+FB3↑j
.text:004028D5                 mov     [esp+98h+Category], 5
.text:004028DC                 call    sub_408450
.text:004028E1                 test    al, al
.text:004028E3                 mov     edx, offset aBEHMY ; "%b %e %H:%M %Y"
.text:004028E8                 jz      short loc_4028CA
.text:004028EA                 jmp     short loc_4028C5
.text:004028EC ; ---------------------------------------------------------------------------
.text:004028EC
.text:004028EC loc_4028EC:                             ; CODE XREF: sub_401910+9D↑j
.text:004028EC                 mov     ebx, [ebp+arg_0]
.text:004028EF                 lea     edx, ds:0FFFFFFFCh[ebx*4]
.text:004028F6                 mov     [esp+98h+Category], edx ; size_t
.text:004028F9                 call    sub_4081B0
.text:004028FE                 mov     [ebp+var_38], eax
.text:00402901                 jmp     loc_4019C0
.text:00402901 sub_401910      endp
.text:00402901
.text:00402901 ; ---------------------------------------------------------------------------
.text:00402906                 align 20h
.text:00402920 aCExtraCharacte db '`-%c',27h,' extra characters or invalid number in the argument: `'
.text:00402920                                         ; DATA XREF: sub_402960:loc_4029D4↓o
.text:00402920                 db '%s',27h,0
.text:0040295F                 align 10h
.text:00402960
.text:00402960 ; =============== S U B R O U T I N E =======================================
.text:00402960
.text:00402960
.text:00402960 ; int __cdecl sub_402960(char *, char, int, int)
.text:00402960 sub_402960      proc near               ; CODE XREF: sub_401910+911↑p
.text:00402960                                         ; sub_401910+965↑p ...
.text:00402960
.text:00402960 Code            = dword ptr -2Ch
.text:00402960 ErrorMessage    = dword ptr -28h
.text:00402960 var_24          = dword ptr -24h
.text:00402960 var_20          = byte ptr -20h
.text:00402960 Str             = dword ptr -1Ch
.text:00402960 var_9           = byte ptr -9
.text:00402960 var_8           = dword ptr -8
.text:00402960 var_4           = dword ptr -4
.text:00402960 arg_0           = dword ptr  4
.text:00402960 arg_4           = byte ptr  8
.text:00402960 arg_8           = dword ptr  0Ch
.text:00402960 arg_C           = dword ptr  10h
.text:00402960
.text:00402960                 sub     esp, 2Ch
.text:00402963                 movzx   edx, [esp+2Ch+arg_4]
.text:00402968                 mov     [esp+2Ch+var_4], ebx
.text:0040296C                 mov     ebx, [esp+2Ch+arg_0]
.text:00402970                 mov     [esp+2Ch+var_9], dl
.text:00402974                 movzx   edx, byte ptr [ebx]
.text:00402977                 movsx   ecx, dl
.text:0040297A                 sub     ecx, 30h ; '0'
.text:0040297D                 cmp     ecx, 9
.text:00402980                 jbe     short loc_40298C
.text:00402982                 mov     ecx, [esp+2Ch+arg_8]
.text:00402986                 inc     ebx
.text:00402987                 mov     [ecx], dl
.text:00402989                 movzx   edx, byte ptr [ebx]
.text:0040298C
.text:0040298C loc_40298C:                             ; CODE XREF: sub_402960+20↑j
.text:0040298C                 test    dl, dl
.text:0040298E                 jnz     short loc_402998
.text:00402990
.text:00402990 loc_402990:                             ; CODE XREF: sub_402960+72↓j
.text:00402990                 mov     ebx, [esp+2Ch+var_4]
.text:00402994                 add     esp, 2Ch
.text:00402997                 retn
.text:00402998 ; ---------------------------------------------------------------------------
.text:00402998
.text:00402998 loc_402998:                             ; CODE XREF: sub_402960+2E↑j
.text:00402998                 mov     [esp+2Ch+Str], offset Locale ; Str
.text:004029A0                 lea     edx, [esp+2Ch+var_8]
.text:004029A4                 mov     dword ptr [esp+2Ch+var_20], edx ; int
.text:004029A8                 mov     [esp+2Ch+var_24], 0Ah ; int
.text:004029B0                 mov     [esp+2Ch+ErrorMessage], 0 ; char **
.text:004029B8                 mov     [esp+2Ch+Code], ebx ; char *
.text:004029BB                 call    sub_408A30
.text:004029C0                 test    eax, eax
.text:004029C2                 jnz     short loc_4029D4
.text:004029C4                 mov     edx, [esp+2Ch+var_8]
.text:004029C8                 test    edx, edx
.text:004029CA                 jle     short loc_4029D4
.text:004029CC                 mov     ecx, [esp+2Ch+arg_C]
.text:004029D0                 mov     [ecx], edx
.text:004029D2                 jmp     short loc_402990
.text:004029D4 ; ---------------------------------------------------------------------------
.text:004029D4
.text:004029D4 loc_4029D4:                             ; CODE XREF: sub_402960+62↑j
.text:004029D4                                         ; sub_402960+6A↑j
.text:004029D4                 mov     [esp+2Ch+Code], offset aCExtraCharacte ; "`-%c' extra characters or invalid numbe"...
.text:004029DB                 call    ds:libintl_gettext
.text:004029E1                 mov     [esp+2Ch+Str], ebx
.text:004029E5                 movsx   ebx, [esp+2Ch+var_9]
.text:004029EA                 mov     [esp+2Ch+ErrorMessage], 0 ; ErrorMessage
.text:004029F2                 mov     [esp+2Ch+var_24], eax ; char *
.text:004029F6                 mov     [esp+2Ch+Code], 0 ; Code
.text:004029FD                 mov     dword ptr [esp+2Ch+var_20], ebx ; char
.text:00402A01                 call    sub_40A7B0
.text:00402A06                 mov     [esp+2Ch+Code], 1 ; Code
.text:00402A0D                 call    sub_4060C0
.text:00402A0D sub_402960      endp
.text:00402A0D
.text:00402A0D ; ---------------------------------------------------------------------------
.text:00402A12                 db  8Bh ; ‹
.text:00402A13                 db  54h ; T
.text:00402A14                 db  24h ; $
.text:00402A15                 db  24h ; $
.text:00402A16                 db 0EBh ; ë
.text:00402A17                 db 0B4h ; ´
.text:00402A18 byte_402A18     db 2Dh, 0               ; DATA XREF: sub_402A20+23↓o
.text:00402A18                                         ; sub_402BB0+9↓o
.text:00402A1A ; const char[]
.text:00402A1A                 dw 7325h                ; DATA XREF: sub_402A20+89↓o
.text:00402A1A                                         ; sub_406DB0+98↓o ...
.text:00402A1C                 db 0
.text:00402A1D ; const char aR[2]
.text:00402A1D aR              db 'r',0                ; DATA XREF: sub_402A20+C3↓o
.text:00402A1F                 align 10h
.text:00402A20
.text:00402A20 ; =============== S U B R O U T I N E =======================================
.text:00402A20
.text:00402A20
.text:00402A20 ; int __cdecl sub_402A20(char *, int)
.text:00402A20 sub_402A20      proc near               ; CODE XREF: sub_406650+69↓p
.text:00402A20                                         ; sub_406650+D3↓p
.text:00402A20
.text:00402A20 FileName        = dword ptr -2Ch
.text:00402A20 Mode            = dword ptr -28h
.text:00402A20 var_24          = dword ptr -24h
.text:00402A20 var_20          = byte ptr -20h
.text:00402A20 var_10          = dword ptr -10h
.text:00402A20 var_C           = dword ptr -0Ch
.text:00402A20 var_8           = dword ptr -8
.text:00402A20 var_4           = dword ptr -4
.text:00402A20 arg_0           = dword ptr  4
.text:00402A20 arg_4           = dword ptr  8
.text:00402A20
.text:00402A20                 cld
.text:00402A21                 sub     esp, 2Ch
.text:00402A24                 mov     ecx, 2
.text:00402A29                 mov     [esp+2Ch+var_4], ebp
.text:00402A2D                 mov     ebp, [esp+2Ch+arg_0]
.text:00402A31                 mov     [esp+2Ch+var_10], ebx
.text:00402A35                 mov     ebx, [esp+2Ch+arg_4]
.text:00402A39                 mov     [esp+2Ch+var_C], esi
.text:00402A3D                 mov     esi, ebp
.text:00402A3F                 mov     [esp+2Ch+var_8], edi
.text:00402A43                 mov     edi, offset byte_402A18
.text:00402A48                 repe cmpsb
.text:00402A4A                 jnz     loc_402AE0
.text:00402A50                 mov     [esp+2Ch+FileName], offset aStandardInput ; "standard input"
.text:00402A57                 call    ds:libintl_gettext
.text:00402A5D                 mov     ds:byte_41E050, 1
.text:00402A64                 mov     [ebx+4], eax
.text:00402A67                 mov     edx, ds:_iob
.text:00402A6D                 mov     [ebx], edx
.text:00402A6F
.text:00402A6F loc_402A6F:                             ; CODE XREF: sub_402A20+D5↓j
.text:00402A6F                 mov     edx, [ebx]
.text:00402A71                 test    edx, edx
.text:00402A73                 jnz     short loc_402AC5
.text:00402A75                 cmp     ds:byte_41E150, 0
.text:00402A7C                 mov     ds:byte_41E0D0, 1
.text:00402A83                 jz      short loc_402AA0
.text:00402A85
.text:00402A85 loc_402A85:                             ; CODE XREF: sub_402A20+A3↓j
.text:00402A85                 xor     eax, eax
.text:00402A87
.text:00402A87 loc_402A87:                             ; CODE XREF: sub_402A20+BB↓j
.text:00402A87                 mov     ebx, [esp+2Ch+var_10]
.text:00402A8B                 mov     esi, [esp+2Ch+var_C]
.text:00402A8F                 mov     edi, [esp+2Ch+var_8]
.text:00402A93                 mov     ebp, [esp+2Ch+var_4]
.text:00402A97                 add     esp, 2Ch
.text:00402A9A                 retn
.text:00402A9A ; ---------------------------------------------------------------------------
.text:00402A9B                 align 10h
.text:00402AA0
.text:00402AA0 loc_402AA0:                             ; CODE XREF: sub_402A20+63↑j
.text:00402AA0                 call    _errno
.text:00402AA5                 mov     dword ptr [esp+2Ch+var_20], ebp ; char
.text:00402AA9                 mov     [esp+2Ch+var_24], offset word_402A1A ; char *
.text:00402AB1                 mov     ecx, [eax]
.text:00402AB3                 mov     [esp+2Ch+FileName], 0 ; Code
.text:00402ABA                 mov     [esp+2Ch+Mode], ecx ; ErrorMessage
.text:00402ABE                 call    sub_40A7B0
.text:00402AC3                 jmp     short loc_402A85
.text:00402AC5 ; ---------------------------------------------------------------------------
.text:00402AC5
.text:00402AC5 loc_402AC5:                             ; CODE XREF: sub_402A20+53↑j
.text:00402AC5                 inc     ds:dword_41E140
.text:00402ACB                 mov     eax, 1
.text:00402AD0                 mov     dword ptr [ebx+8], 0
.text:00402AD7                 mov     byte ptr [ebx+25h], 0
.text:00402ADB                 jmp     short loc_402A87
.text:00402ADB ; ---------------------------------------------------------------------------
.text:00402ADD                 align 10h
.text:00402AE0
.text:00402AE0 loc_402AE0:                             ; CODE XREF: sub_402A20+2A↑j
.text:00402AE0                 mov     [ebx+4], ebp
.text:00402AE3                 mov     [esp+2Ch+Mode], offset aR ; "r"
.text:00402AEB                 mov     [esp+2Ch+FileName], ebp ; FileName
.text:00402AEE                 call    fopen
.text:00402AF3                 mov     [ebx], eax
.text:00402AF5                 jmp     loc_402A6F
.text:00402AF5 sub_402A20      endp
.text:00402AF5
.text:00402AF5 ; ---------------------------------------------------------------------------
.text:00402AFA                 align 10h
.text:00402B00
.text:00402B00 ; =============== S U B R O U T I N E =======================================
.text:00402B00
.text:00402B00
.text:00402B00 sub_402B00      proc near               ; CODE XREF: sub_401910+E5E↑p
.text:00402B00                                         ; sub_401910:loc_4027E4↑p
.text:00402B00
.text:00402B00 var_C           = dword ptr -0Ch
.text:00402B00 var_8           = dword ptr -8
.text:00402B00 var_4           = dword ptr -4
.text:00402B00 arg_0           = dword ptr  4
.text:00402B00 arg_4           = dword ptr  8
.text:00402B00
.text:00402B00                 sub     esp, 0Ch
.text:00402B03                 mov     [esp+0Ch+var_4], ebx
.text:00402B07                 mov     ebx, [esp+0Ch+arg_0]
.text:00402B0B                 mov     [esp+0Ch+var_C], ebx
.text:00402B0E                 call    sub_4063A0
.text:00402B13                 mov     [esp+0Ch+var_C], ebx
.text:00402B16                 mov     edx, [esp+0Ch+arg_4]
.text:00402B1A                 mov     [esp+0Ch+var_8], edx
.text:00402B1E                 call    sub_406650
.text:00402B23                 test    al, al
.text:00402B25                 jz      short loc_402B89
.text:00402B27                 cmp     byte_41D011, 0
.text:00402B2E                 jnz     short loc_402BA5
.text:00402B30
.text:00402B30 loc_402B30:                             ; CODE XREF: sub_402B00+AA↓j
.text:00402B30                 mov     edx, ds:dword_41E0E4
.text:00402B36                 mov     eax, ds:dword_41E0E0
.text:00402B3B                 cmp     edx, 0
.text:00402B3E                 ja      short loc_402B45
.text:00402B40                 cmp     eax, 1
.text:00402B43                 jbe     short loc_402B91
.text:00402B45
.text:00402B45 loc_402B45:                             ; CODE XREF: sub_402B00+3E↑j
.text:00402B45                 mov     [esp+0Ch+var_C], eax
.text:00402B48                 mov     [esp+0Ch+var_8], edx
.text:00402B4C                 call    sub_403CA0
.text:00402B51                 test    al, al
.text:00402B53                 jz      short loc_402B89
.text:00402B55                 mov     edx, ds:dword_41E0E0
.text:00402B5B                 mov     ecx, ds:dword_41E0E4
.text:00402B61                 mov     ds:dword_41E280, edx
.text:00402B67                 mov     ds:dword_41E284, ecx
.text:00402B6D
.text:00402B6D loc_402B6D:                             ; CODE XREF: sub_402B00+A3↓j
.text:00402B6D                 call    sub_4067D0
.text:00402B72                 mov     ecx, dword_41D044
.text:00402B78                 mov     ds:dword_41E290, ecx
.text:00402B7E                 mov     esi, esi
.text:00402B80
.text:00402B80 loc_402B80:                             ; CODE XREF: sub_402B00+87↓j
.text:00402B80                 call    sub_402D20
.text:00402B85                 test    al, al
.text:00402B87                 jnz     short loc_402B80
.text:00402B89
.text:00402B89 loc_402B89:                             ; CODE XREF: sub_402B00+25↑j
.text:00402B89                                         ; sub_402B00+53↑j
.text:00402B89                 mov     ebx, [esp+0Ch+var_4]
.text:00402B8D                 add     esp, 0Ch
.text:00402B90                 retn
.text:00402B91 ; ---------------------------------------------------------------------------
.text:00402B91
.text:00402B91 loc_402B91:                             ; CODE XREF: sub_402B00+43↑j
.text:00402B91                 mov     ebx, 1
.text:00402B96                 xor     eax, eax
.text:00402B98                 mov     ds:dword_41E280, ebx
.text:00402B9E                 mov     ds:dword_41E284, eax
.text:00402BA3                 jmp     short loc_402B6D
.text:00402BA5 ; ---------------------------------------------------------------------------
.text:00402BA5
.text:00402BA5 loc_402BA5:                             ; CODE XREF: sub_402B00+2E↑j
.text:00402BA5                 call    sub_403280
.text:00402BAA                 jmp     short loc_402B30
.text:00402BAA sub_402B00      endp
.text:00402BAA
.text:00402BAA ; ---------------------------------------------------------------------------
.text:00402BAC ; const char aLd[4]
.text:00402BAC aLd             db '%ld',0              ; DATA XREF: sub_402BB0:loc_402CF6↓o
.text:00402BB0
.text:00402BB0 ; =============== S U B R O U T I N E =======================================
.text:00402BB0
.text:00402BB0 ; Attributes: bp-based frame
.text:00402BB0
.text:00402BB0 sub_402BB0      proc near               ; CODE XREF: sub_406650+AC↓p
.text:00402BB0                                         ; sub_406650:loc_40673C↓p
.text:00402BB0
.text:00402BB0 Time            = dword ptr -1A8h
.text:00402BB0 SizeInBytes     = dword ptr -1A4h
.text:00402BB0 Format          = dword ptr -1A0h
.text:00402BB0 Tm              = dword ptr -19Ch
.text:00402BB0 var_198         = byte ptr -198h
.text:00402BB0 var_18C         = dword ptr -18Ch
.text:00402BB0 var_188         = dword ptr -188h
.text:00402BB0 var_148         = dword ptr -148h
.text:00402BB0 Buffer          = byte ptr -118h
.text:00402BB0 arg_0           = dword ptr  8
.text:00402BB0 arg_4           = dword ptr  0Ch
.text:00402BB0
.text:00402BB0                 push    ebp
.text:00402BB1                 mov     ecx, 2
.text:00402BB6                 mov     ebp, esp
.text:00402BB8                 push    edi
.text:00402BB9                 mov     edi, offset byte_402A18
.text:00402BBE                 push    esi
.text:00402BBF                 push    ebx
.text:00402BC0                 sub     esp, 19Ch
.text:00402BC6                 mov     esi, [ebp+arg_0]
.text:00402BC9                 cld
.text:00402BCA                 repe cmpsb
.text:00402BCC                 setnz   cl
.text:00402BCF                 movzx   edx, cl
.text:00402BD2                 dec     edx
.text:00402BD3                 or      edx, [ebp+arg_4]
.text:00402BD6                 mov     [ebp+var_18C], edx
.text:00402BDC                 js      short loc_402BFA
.text:00402BDE                 mov     edx, [ebp+var_18C]
.text:00402BE4                 lea     ebx, [ebp+var_188]
.text:00402BEA                 mov     [esp+1A8h+SizeInBytes], ebx ; int
.text:00402BEE                 mov     [esp+1A8h+Time], edx ; char *
.text:00402BF1                 call    sub_40AA50
.text:00402BF6                 test    eax, eax
.text:00402BF8                 jz      short loc_402C0C
.text:00402BFA
.text:00402BFA loc_402BFA:                             ; CODE XREF: sub_402BB0+2C↑j
.text:00402BFA                 mov     [esp+1A8h+Time], 0 ; Time
.text:00402C01                 call    time
.text:00402C06                 mov     [ebp+var_148], eax
.text:00402C0C
.text:00402C0C loc_402C0C:                             ; CODE XREF: sub_402BB0+48↑j
.text:00402C0C                 lea     edi, [ebp+var_148]
.text:00402C12                 mov     ebx, 100h
.text:00402C17                 lea     esi, [ebp+Buffer]
.text:00402C1D                 mov     [esp+1A8h+Time], edi ; Time
.text:00402C20                 call    localtime
.text:00402C25                 test    eax, eax
.text:00402C27                 mov     edi, eax
.text:00402C29                 jz      loc_402CF6
.text:00402C2F                 nop
.text:00402C30
.text:00402C30 loc_402C30:                             ; CODE XREF: sub_402BB0+BA↓j
.text:00402C30                 mov     byte ptr [esi], 1
.text:00402C33                 mov     edx, ds:Format
.text:00402C39                 mov     [esp+1A8h+Tm], edi ; Tm
.text:00402C3D                 mov     [esp+1A8h+SizeInBytes], ebx ; SizeInBytes
.text:00402C41                 mov     [esp+1A8h+Format], edx ; Format
.text:00402C45                 mov     [esp+1A8h+Time], esi ; Size
.text:00402C48                 call    strftime
.text:00402C4D                 test    eax, eax
.text:00402C4F                 jnz     short loc_402C70
.text:00402C51                 cmp     byte ptr [esi], 0
.text:00402C54                 jz      short loc_402C70
.text:00402C56                 lea     esi, [ebx+ebx]
.text:00402C59                 lea     eax, [esi+0Fh]
.text:00402C5C                 mov     ebx, esi
.text:00402C5E                 and     eax, 0FFFFFFF0h
.text:00402C61                 call    __alloca
.text:00402C66                 lea     esi, [esp+1A8h+var_198]
.text:00402C6A                 jmp     short loc_402C30
.text:00402C6A ; ---------------------------------------------------------------------------
.text:00402C6C                 align 10h
.text:00402C70
.text:00402C70 loc_402C70:                             ; CODE XREF: sub_402BB0+9F↑j
.text:00402C70                                         ; sub_402BB0+A4↑j ...
.text:00402C70                 mov     eax, ds:Block
.text:00402C75                 test    eax, eax
.text:00402C77                 jnz     short loc_402CEC
.text:00402C79
.text:00402C79 loc_402C79:                             ; CODE XREF: sub_402BB0+144↓j
.text:00402C79                 mov     [esp+1A8h+Time], esi ; char *
.text:00402C7C                 call    sub_408370
.text:00402C81                 mov     ds:Block, eax
.text:00402C86                 mov     eax, ds:dword_41E300
.text:00402C8B                 test    eax, eax
.text:00402C8D                 jnz     short loc_402C9C
.text:00402C8F                 mov     edi, [ebp+var_18C]
.text:00402C95                 mov     eax, [ebp+arg_0]
.text:00402C98                 test    edi, edi
.text:00402C9A                 js      short loc_402CE5
.text:00402C9C
.text:00402C9C loc_402C9C:                             ; CODE XREF: sub_402BB0+DD↑j
.text:00402C9C                                         ; sub_402BB0+13A↓j
.text:00402C9C                 mov     [esp+1A8h+SizeInBytes], 0 ; char
.text:00402CA4                 mov     ecx, ds:Block
.text:00402CAA                 mov     ds:dword_41E330, eax
.text:00402CAF                 mov     [esp+1A8h+Time], ecx ; char *
.text:00402CB2                 call    sub_407120
.text:00402CB7                 mov     [esp+1A8h+SizeInBytes], 0 ; char
.text:00402CBF                 mov     ebx, ds:dword_41E330
.text:00402CC5                 mov     esi, dword_41D020
.text:00402CCB                 mov     [esp+1A8h+Time], ebx ; char *
.text:00402CCE                 sub     esi, eax
.text:00402CD0                 call    sub_407120
.text:00402CD5                 sub     esi, eax
.text:00402CD7                 mov     ds:dword_41E340, esi
.text:00402CDD                 lea     esp, [ebp-0Ch]
.text:00402CE0                 pop     ebx
.text:00402CE1                 pop     esi
.text:00402CE2                 pop     edi
.text:00402CE3                 pop     ebp
.text:00402CE4                 retn
.text:00402CE5 ; ---------------------------------------------------------------------------
.text:00402CE5
.text:00402CE5 loc_402CE5:                             ; CODE XREF: sub_402BB0+EA↑j
.text:00402CE5                 mov     eax, offset Locale
.text:00402CEA                 jmp     short loc_402C9C
.text:00402CEC ; ---------------------------------------------------------------------------
.text:00402CEC
.text:00402CEC loc_402CEC:                             ; CODE XREF: sub_402BB0+C7↑j
.text:00402CEC                 mov     [esp+1A8h+Time], eax ; Block
.text:00402CEF                 call    free
.text:00402CF4                 jmp     short loc_402C79
.text:00402CF6 ; ---------------------------------------------------------------------------
.text:00402CF6
.text:00402CF6 loc_402CF6:                             ; CODE XREF: sub_402BB0+79↑j
.text:00402CF6                 mov     [esp+1A8h+SizeInBytes], offset aLd ; "%ld"
.text:00402CFE                 mov     ecx, [ebp+var_148]
.text:00402D04                 mov     [esp+1A8h+Time], esi ; Buffer
.text:00402D07                 mov     [esp+1A8h+Format], ecx
.text:00402D0B                 call    sprintf
.text:00402D10                 jmp     loc_402C70
.text:00402D10 sub_402BB0      endp
.text:00402D10
.text:00402D10 ; ---------------------------------------------------------------------------
.text:00402D15                 align 10h
.text:00402D20
.text:00402D20 ; =============== S U B R O U T I N E =======================================
.text:00402D20
.text:00402D20
.text:00402D20 sub_402D20      proc near               ; CODE XREF: sub_402B00:loc_402B80↑p
.text:00402D20
.text:00402D20 var_2C          = dword ptr -2Ch
.text:00402D20 File            = dword ptr -28h
.text:00402D20 var_1A          = byte ptr -1Ah
.text:00402D20 var_19          = byte ptr -19h
.text:00402D20 var_18          = byte ptr -18h
.text:00402D20 var_17          = byte ptr -17h
.text:00402D20 var_16          = byte ptr -16h
.text:00402D20 var_15          = byte ptr -15h
.text:00402D20 var_14          = dword ptr -14h
.text:00402D20
.text:00402D20                 push    ebp
.text:00402D21                 push    edi
.text:00402D22                 push    esi
.text:00402D23                 push    ebx
.text:00402D24                 sub     esp, 1Ch
.text:00402D27                 xor     ebx, ebx
.text:00402D29                 call    sub_406EA0
.text:00402D2E                 mov     ecx, dword_41D034
.text:00402D34                 mov     edx, ds:dword_41E190
.text:00402D3A                 cmp     ebx, ecx
.text:00402D3C                 jge     loc_4030B4
.text:00402D42                 movzx   eax, byte_41D011
.text:00402D49                 mov     [esp+2Ch+var_16], al
.text:00402D4D                 mov     eax, ecx
.text:00402D4F                 nop
.text:00402D50
.text:00402D50 loc_402D50:                             ; CODE XREF: sub_402D20+55↓j
.text:00402D50                 cmp     dword ptr [edx+8], 1
.text:00402D54                 jbe     short loc_402D70
.text:00402D56                 cmp     [esp+2Ch+var_16], 0
.text:00402D5B                 jz      short loc_402D71
.text:00402D5D                 mov     ecx, [edx+18h]
.text:00402D60                 test    ecx, ecx
.text:00402D62                 jle     short loc_402D71
.text:00402D64                 mov     esi, [edx+1Ch]
.text:00402D67                 test    esi, esi
.text:00402D69                 jle     short loc_402D71
.text:00402D6B                 nop
.text:00402D6C                 lea     esi, [esi+0]
.text:00402D70
.text:00402D70 loc_402D70:                             ; CODE XREF: sub_402D20+34↑j
.text:00402D70                 inc     ebx
.text:00402D71
.text:00402D71 loc_402D71:                             ; CODE XREF: sub_402D20+3B↑j
.text:00402D71                                         ; sub_402D20+42↑j ...
.text:00402D71                 add     edx, 28h ; '('
.text:00402D74                 dec     eax
.text:00402D75                 jnz     short loc_402D50
.text:00402D77                 test    ebx, ebx
.text:00402D79                 jz      loc_4030B4
.text:00402D7F                 cmp     byte_41D010, 0
.text:00402D86                 jz      short loc_402D8F
.text:00402D88                 mov     ds:byte_41E220, 1
.text:00402D8F
.text:00402D8F loc_402D8F:                             ; CODE XREF: sub_402D20+66↑j
.text:00402D8F                 cmp     ds:byte_41E130, 0
.text:00402D96                 mov     ds:byte_41E2F0, 0
.text:00402D9D                 mov     edx, ds:dword_41E230
.text:00402DA3                 mov     [esp+2Ch+var_15], 0
.text:00402DA8                 mov     [esp+2Ch+var_14], edx
.text:00402DAC                 jz      short loc_402DC0
.text:00402DAE                 add     edx, edx
.text:00402DB0                 mov     [esp+2Ch+var_14], edx
.text:00402DB4                 lea     esi, [esi+0]
.text:00402DBA                 lea     edi, [edi+0]
.text:00402DC0
.text:00402DC0 loc_402DC0:                             ; CODE XREF: sub_402D20+8C↑j
.text:00402DC0                                         ; sub_402D20+290↓j ...
.text:00402DC0                 mov     eax, [esp+2Ch+var_14]
.text:00402DC4                 test    eax, eax
.text:00402DC6                 jle     loc_403010
.text:00402DCC                 mov     ecx, dword_41D034
.text:00402DD2                 xor     ebx, ebx
.text:00402DD4                 mov     esi, ds:dword_41E190
.text:00402DDA                 cmp     ebx, ecx
.text:00402DDC                 mov     ebp, ecx
.text:00402DDE                 mov     edx, esi
.text:00402DE0                 jge     loc_403010
.text:00402DE6                 movzx   eax, byte_41D011
.text:00402DED                 mov     [esp+2Ch+var_17], al
.text:00402DF1                 mov     eax, ecx
.text:00402DF3                 lea     esi, [esi+0]
.text:00402DF9                 lea     edi, [edi+0]
.text:00402E00
.text:00402E00 loc_402E00:                             ; CODE XREF: sub_402D20+105↓j
.text:00402E00                 cmp     dword ptr [edx+8], 1
.text:00402E04                 jbe     short loc_402E20
.text:00402E06                 cmp     [esp+2Ch+var_17], 0
.text:00402E0B                 jz      short loc_402E21
.text:00402E0D                 mov     edi, [edx+18h]
.text:00402E10                 test    edi, edi
.text:00402E12                 jle     short loc_402E21
.text:00402E14                 mov     edi, [edx+1Ch]
.text:00402E17                 test    edi, edi
.text:00402E19                 jle     short loc_402E21
.text:00402E1B                 nop
.text:00402E1C                 lea     esi, [esi+0]
.text:00402E20
.text:00402E20 loc_402E20:                             ; CODE XREF: sub_402D20+E4↑j
.text:00402E20                 inc     ebx
.text:00402E21
.text:00402E21 loc_402E21:                             ; CODE XREF: sub_402D20+EB↑j
.text:00402E21                                         ; sub_402D20+F2↑j ...
.text:00402E21                 add     edx, 28h ; '('
.text:00402E24                 dec     eax
.text:00402E25                 jnz     short loc_402E00
.text:00402E27                 test    ebx, ebx
.text:00402E29                 jle     loc_403010
.text:00402E2F                 mov     ds:byte_41E2F0, 0
.text:00402E36                 xor     edi, edi
.text:00402E38                 xor     ebx, ebx
.text:00402E3A                 mov     ds:dword_41E260, edi
.text:00402E40                 xor     edx, edx
.text:00402E42                 mov     edi, 1
.text:00402E47                 mov     ds:dword_41E250, ebx
.text:00402E4D                 cmp     edi, ebp
.text:00402E4F                 mov     ebx, esi
.text:00402E51                 mov     ds:dword_41E2D0, edx
.text:00402E57                 mov     ds:byte_41E1F0, 0
.text:00402E5E                 mov     ds:byte_41E200, 1
.text:00402E65                 jg      loc_403261
.text:00402E6B                 nop
.text:00402E6C                 lea     esi, [esi+0]
.text:00402E70
.text:00402E70 loc_402E70:                             ; CODE XREF: sub_402D20+1FB↓j
.text:00402E70                 mov     ebp, [ebx+1Ch]
.text:00402E73                 xor     esi, esi
.text:00402E75                 mov     ds:dword_41E270, esi
.text:00402E7B                 test    ebp, ebp
.text:00402E7D                 jle     loc_403231
.text:00402E83
.text:00402E83 loc_402E83:                             ; CODE XREF: sub_402D20+515↓j
.text:00402E83                 mov     ds:byte_41E210, 0
.text:00402E8A                 mov     ecx, [ebx+20h]
.text:00402E8D                 mov     [esp+2Ch+var_2C], ebx
.text:00402E90                 mov     ds:dword_41E2E0, ecx
.text:00402E96                 call    dword ptr [ebx+0Ch]
.text:00402E99                 test    al, al
.text:00402E9B                 jz      loc_403224
.text:00402EA1
.text:00402EA1 loc_402EA1:                             ; CODE XREF: sub_402D20+50C↓j
.text:00402EA1                 movzx   ecx, ds:byte_41E2F0
.text:00402EA8                 xor     eax, eax
.text:00402EAA                 test    cl, cl
.text:00402EAC                 mov     [esp+2Ch+var_1A], cl
.text:00402EB0                 jnz     short loc_402EB9
.text:00402EB2                 cmp     [esp+2Ch+var_15], 0
.text:00402EB7                 jz      short loc_402EBB
.text:00402EB9
.text:00402EB9 loc_402EB9:                             ; CODE XREF: sub_402D20+190↑j
.text:00402EB9                 mov     al, 1
.text:00402EBB
.text:00402EBB loc_402EBB:                             ; CODE XREF: sub_402D20+197↑j
.text:00402EBB                 mov     [esp+2Ch+var_15], al
.text:00402EBF                 mov     edx, [ebx+1Ch]
.text:00402EC2                 dec     edx
.text:00402EC3                 mov     [ebx+1Ch], edx
.text:00402EC6                 test    edx, edx
.text:00402EC8                 jle     loc_4031CD
.text:00402ECE
.text:00402ECE loc_402ECE:                             ; CODE XREF: sub_402D20+4F9↓j
.text:00402ECE                 cmp     ds:byte_41E000, 0
.text:00402ED5                 jz      short loc_402F00
.text:00402ED7                 mov     eax, [ebx+8]
.text:00402EDA                 test    eax, eax
.text:00402EDC                 jz      short loc_402F00
.text:00402EDE                 cmp     ds:byte_41E200, 0
.text:00402EE5                 jz      loc_403168
.text:00402EEB                 mov     ds:byte_41E1F0, 1
.text:00402EF2                 lea     esi, [esi+0]
.text:00402EF9                 lea     edi, [edi+0]
.text:00402F00
.text:00402F00 loc_402F00:                             ; CODE XREF: sub_402D20+1B5↑j
.text:00402F00                                         ; sub_402D20+1BC↑j ...
.text:00402F00                 mov     ecx, dword_41D034
.text:00402F06
.text:00402F06 loc_402F06:                             ; CODE XREF: sub_402D20+522↓j
.text:00402F06                                         ; sub_402D20+53C↓j
.text:00402F06                 cmp     ds:byte_41E160, 0
.text:00402F0D                 jz      short loc_402F15
.text:00402F0F                 inc     ds:dword_41E2D0
.text:00402F15
.text:00402F15 loc_402F15:                             ; CODE XREF: sub_402D20+1ED↑j
.text:00402F15                 inc     edi
.text:00402F16                 add     ebx, 28h ; '('
.text:00402F19                 cmp     edi, ecx
.text:00402F1B                 jle     loc_402E70
.text:00402F21                 movzx   ebx, ds:byte_41E2F0
.text:00402F28                 mov     [esp+2Ch+var_1A], bl
.text:00402F2C
.text:00402F2C loc_402F2C:                             ; CODE XREF: sub_402D20+4BD↓j
.text:00402F2C                                         ; sub_402D20+4FF↓j ...
.text:00402F2C                 cmp     [esp+2Ch+var_1A], 0
.text:00402F31                 jz      short loc_402F61
.text:00402F33                 mov     ebp, ds:_iob
.text:00402F39                 mov     edi, [ebp+24h]
.text:00402F3C                 dec     edi
.text:00402F3D                 mov     [ebp+24h], edi
.text:00402F40                 test    edi, edi
.text:00402F42                 js      loc_40314A
.text:00402F48                 mov     ecx, ds:_iob
.text:00402F4E                 mov     esi, [ecx+20h]
.text:00402F51                 mov     byte ptr [esi], 0Ah
.text:00402F54                 inc     dword ptr [ecx+20h]
.text:00402F57
.text:00402F57 loc_402F57:                             ; CODE XREF: sub_402D20+443↓j
.text:00402F57                 dec     [esp+2Ch+var_14]
.text:00402F5B                 mov     ecx, dword_41D034
.text:00402F61
.text:00402F61 loc_402F61:                             ; CODE XREF: sub_402D20+211↑j
.text:00402F61                 xor     ebx, ebx
.text:00402F63                 mov     edx, ds:dword_41E190
.text:00402F69                 cmp     ebx, ecx
.text:00402F6B                 jge     loc_403007
.text:00402F71                 movzx   eax, byte_41D011
.text:00402F78                 mov     [esp+2Ch+var_19], al
.text:00402F7C                 mov     eax, ecx
.text:00402F7E                 mov     esi, esi
.text:00402F80
.text:00402F80 loc_402F80:                             ; CODE XREF: sub_402D20+285↓j
.text:00402F80                 cmp     dword ptr [edx+8], 1
.text:00402F84                 jbe     short loc_402FA0
.text:00402F86                 cmp     [esp+2Ch+var_19], 0
.text:00402F8B                 jz      short loc_402FA1
.text:00402F8D                 mov     edi, [edx+18h]
.text:00402F90                 test    edi, edi
.text:00402F92                 jle     short loc_402FA1
.text:00402F94                 mov     ecx, [edx+1Ch]
.text:00402F97                 test    ecx, ecx
.text:00402F99                 jle     short loc_402FA1
.text:00402F9B                 nop
.text:00402F9C                 lea     esi, [esi+0]
.text:00402FA0
.text:00402FA0 loc_402FA0:                             ; CODE XREF: sub_402D20+264↑j
.text:00402FA0                 inc     ebx
.text:00402FA1
.text:00402FA1 loc_402FA1:                             ; CODE XREF: sub_402D20+26B↑j
.text:00402FA1                                         ; sub_402D20+272↑j ...
.text:00402FA1                 add     edx, 28h ; '('
.text:00402FA4                 dec     eax
.text:00402FA5                 jnz     short loc_402F80
.text:00402FA7                 test    ebx, ebx
.text:00402FA9                 jle     short loc_403007
.text:00402FAB
.text:00402FAB loc_402FAB:                             ; CODE XREF: sub_402D20+2EE↓j
.text:00402FAB                 cmp     [esp+2Ch+var_15], 0
.text:00402FB0                 jz      loc_402DC0
.text:00402FB6                 cmp     ds:byte_41E130, 0
.text:00402FBD                 jz      loc_402DC0
.text:00402FC3                 mov     edx, ds:_iob
.text:00402FC9                 mov     ebp, [edx+24h]
.text:00402FCC                 dec     ebp
.text:00402FCD                 mov     [edx+24h], ebp
.text:00402FD0                 test    ebp, ebp
.text:00402FD2                 js      short loc_402FEC
.text:00402FD4                 mov     esi, ds:_iob
.text:00402FDA                 mov     eax, [esi+20h]
.text:00402FDD                 mov     byte ptr [eax], 0Ah
.text:00402FE0                 inc     dword ptr [esi+20h]
.text:00402FE3
.text:00402FE3 loc_402FE3:                             ; CODE XREF: sub_402D20+2E5↓j
.text:00402FE3                 dec     [esp+2Ch+var_14]
.text:00402FE7                 jmp     loc_402DC0
.text:00402FEC ; ---------------------------------------------------------------------------
.text:00402FEC
.text:00402FEC loc_402FEC:                             ; CODE XREF: sub_402D20+2B2↑j
.text:00402FEC                 mov     [esp+2Ch+var_2C], 0Ah ; Ch
.text:00402FF3                 mov     ebx, ds:_iob
.text:00402FF9                 add     ebx, 20h ; ' '
.text:00402FFC                 mov     [esp+2Ch+File], ebx ; File
.text:00403000                 call    _flsbuf
.text:00403005                 jmp     short loc_402FE3
.text:00403007 ; ---------------------------------------------------------------------------
.text:00403007
.text:00403007 loc_403007:                             ; CODE XREF: sub_402D20+24B↑j
.text:00403007                                         ; sub_402D20+289↑j
.text:00403007                 cmp     byte_41D010, 0
.text:0040300E                 jnz     short loc_402FAB
.text:00403010
.text:00403010 loc_403010:                             ; CODE XREF: sub_402D20+A6↑j
.text:00403010                                         ; sub_402D20+C0↑j ...
.text:00403010                 mov     ecx, [esp+2Ch+var_14]
.text:00403014                 test    ecx, ecx
.text:00403016                 jnz     short loc_40303A
.text:00403018                 mov     eax, dword_41D034
.text:0040301D                 mov     ebx, ds:dword_41E190
.text:00403023                 test    eax, eax
.text:00403025                 jle     short loc_40303A
.text:00403027                 mov     edi, eax
.text:00403029
.text:00403029 loc_403029:                             ; CODE XREF: sub_402D20+318↓j
.text:00403029                 mov     ebp, [ebx+8]
.text:0040302C                 test    ebp, ebp
.text:0040302E                 jnz     short loc_403034
.text:00403030                 mov     byte ptr [ebx+25h], 1
.text:00403034
.text:00403034 loc_403034:                             ; CODE XREF: sub_402D20+30E↑j
.text:00403034                 add     ebx, 28h ; '('
.text:00403037                 dec     edi
.text:00403038                 jnz     short loc_403029
.text:0040303A
.text:0040303A loc_40303A:                             ; CODE XREF: sub_402D20+2F6↑j
.text:0040303A                                         ; sub_402D20+305↑j
.text:0040303A                 movzx   edx, [esp+2Ch+var_15]
.text:0040303F                 cmp     byte_41D010, 0
.text:00403046                 mov     ds:byte_41E2F0, dl
.text:0040304C                 jz      short loc_403056
.text:0040304E                 test    dl, dl
.text:00403050                 jnz     loc_40312F
.text:00403056
.text:00403056 loc_403056:                             ; CODE XREF: sub_402D20+32C↑j
.text:00403056                 cmp     ds:byte_41E030, 0
.text:0040305D                 jz      short loc_403093
.text:0040305F                 cmp     ds:byte_41E020, 0
.text:00403066                 jz      short loc_403093
.text:00403068                 mov     ebx, ds:_iob
.text:0040306E                 mov     esi, [ebx+24h]
.text:00403071                 dec     esi
.text:00403072                 mov     [ebx+24h], esi
.text:00403075                 test    esi, esi
.text:00403077                 js      loc_403111
.text:0040307D                 mov     ecx, ds:_iob
.text:00403083                 mov     eax, [ecx+20h]
.text:00403086                 mov     byte ptr [eax], 0Ch
.text:00403089                 inc     dword ptr [ecx+20h]
.text:0040308C
.text:0040308C loc_40308C:                             ; CODE XREF: sub_402D20+40A↓j
.text:0040308C                 mov     ds:byte_41E030, 0
.text:00403093
.text:00403093 loc_403093:                             ; CODE XREF: sub_402D20+33D↑j
.text:00403093                                         ; sub_402D20+346↑j ...
.text:00403093                 mov     edx, dword_41D03C
.text:00403099                 mov     edi, ds:dword_41E284
.text:0040309F                 mov     ecx, dword_41D038
.text:004030A5                 mov     eax, ds:dword_41E280
.text:004030AA                 cmp     edx, edi
.text:004030AC                 ja      short loc_4030BE
.text:004030AE                 jb      short loc_4030B4
.text:004030B0                 cmp     ecx, eax
.text:004030B2                 jnb     short loc_4030BE
.text:004030B4
.text:004030B4 loc_4030B4:                             ; CODE XREF: sub_402D20+1C↑j
.text:004030B4                                         ; sub_402D20+59↑j ...
.text:004030B4                 xor     eax, eax
.text:004030B6
.text:004030B6 loc_4030B6:                             ; CODE XREF: sub_402D20+3E5↓j
.text:004030B6                 add     esp, 1Ch
.text:004030B9                 pop     ebx
.text:004030BA                 pop     esi
.text:004030BB                 pop     edi
.text:004030BC                 pop     ebp
.text:004030BD                 retn
.text:004030BE ; ---------------------------------------------------------------------------
.text:004030BE
.text:004030BE loc_4030BE:                             ; CODE XREF: sub_402D20+38C↑j
.text:004030BE                                         ; sub_402D20+392↑j
.text:004030BE                 mov     edx, dword_41D034
.text:004030C4                 mov     esi, ds:dword_41E190
.text:004030CA                 test    edx, edx
.text:004030CC                 mov     eax, esi
.text:004030CE                 jz      short loc_4030E8
.text:004030D0                 mov     ecx, ds:dword_41E0F0
.text:004030D6
.text:004030D6 loc_4030D6:                             ; CODE XREF: sub_402D20+3C0↓j
.text:004030D6                 cmp     dword ptr [eax+8], 2
.text:004030DA                 jz      short loc_403107
.text:004030DC
.text:004030DC loc_4030DC:                             ; CODE XREF: sub_402D20+3EF↓j
.text:004030DC                 add     eax, 28h ; '('
.text:004030DF                 dec     edx
.text:004030E0                 jnz     short loc_4030D6
.text:004030E2                 mov     ds:dword_41E0F0, ecx
.text:004030E8
.text:004030E8 loc_4030E8:                             ; CODE XREF: sub_402D20+3AE↑j
.text:004030E8                 cmp     byte_41D011, 0
.text:004030EF                 jz      short loc_403100
.text:004030F1                 xor     ebx, ebx
.text:004030F3                 cmp     dword ptr [esi+8], 3
.text:004030F7                 setnz   bl
.text:004030FA                 mov     ds:dword_41E0F0, ebx
.text:00403100
.text:00403100 loc_403100:                             ; CODE XREF: sub_402D20+3CF↑j
.text:00403100                 mov     eax, 1
.text:00403105                 jmp     short loc_4030B6
.text:00403107 ; ---------------------------------------------------------------------------
.text:00403107
.text:00403107 loc_403107:                             ; CODE XREF: sub_402D20+3BA↑j
.text:00403107                 mov     dword ptr [eax+8], 0
.text:0040310E                 inc     ecx
.text:0040310F                 jmp     short loc_4030DC
.text:00403111 ; ---------------------------------------------------------------------------
.text:00403111
.text:00403111 loc_403111:                             ; CODE XREF: sub_402D20+357↑j
.text:00403111                 mov     [esp+2Ch+var_2C], 0Ch ; Ch
.text:00403118                 mov     ebp, ds:_iob
.text:0040311E                 add     ebp, 20h ; ' '
.text:00403121                 mov     [esp+2Ch+File], ebp ; File
.text:00403125                 call    _flsbuf
.text:0040312A                 jmp     loc_40308C
.text:0040312F ; ---------------------------------------------------------------------------
.text:0040312F
.text:0040312F loc_40312F:                             ; CODE XREF: sub_402D20+330↑j
.text:0040312F                 mov     edx, dword_41D01C
.text:00403135                 add     [esp+2Ch+var_14], edx
.text:00403139                 mov     edi, [esp+2Ch+var_14]
.text:0040313D                 mov     [esp+2Ch+var_2C], edi
.text:00403140                 call    sub_4036F0
.text:00403145                 jmp     loc_403093
.text:0040314A ; ---------------------------------------------------------------------------
.text:0040314A
.text:0040314A loc_40314A:                             ; CODE XREF: sub_402D20+222↑j
.text:0040314A                 mov     [esp+2Ch+var_2C], 0Ah ; Ch
.text:00403151                 mov     ebx, ds:_iob
.text:00403157                 add     ebx, 20h ; ' '
.text:0040315A                 mov     [esp+2Ch+File], ebx ; File
.text:0040315E                 call    _flsbuf
.text:00403163                 jmp     loc_402F57
.text:00403168 ; ---------------------------------------------------------------------------
.text:00403168
.text:00403168 loc_403168:                             ; CODE XREF: sub_402D20+1C5↑j
.text:00403168                 cmp     eax, 3
.text:0040316B                 jz      short loc_403183
.text:0040316D                 cmp     eax, 2
.text:00403170                 jnz     loc_402F00
.text:00403176                 cmp     ds:byte_41E210, 0
.text:0040317D                 jz      loc_402F00
.text:00403183
.text:00403183 loc_403183:                             ; CODE XREF: sub_402D20+44B↑j
.text:00403183                                         ; sub_402D20+52F↓j
.text:00403183                 mov     eax, [ebx+20h]
.text:00403186                 mov     esi, ds:dword_41E170
.text:0040318C                 mov     ds:dword_41E2E0, eax
.text:00403191                 sub     eax, esi
.text:00403193                 test    eax, eax
.text:00403195                 jle     short loc_4031A6
.text:00403197                 mov     [esp+2Ch+var_2C], eax
.text:0040319A                 call    sub_403670
.text:0040319F                 xor     eax, eax
.text:004031A1                 mov     ds:dword_41E2E0, eax
.text:004031A6
.text:004031A6 loc_4031A6:                             ; CODE XREF: sub_402D20+475↑j
.text:004031A6                 cmp     ds:byte_41E160, 0
.text:004031AD                 jnz     short loc_4031C6
.text:004031AF
.text:004031AF loc_4031AF:                             ; CODE XREF: sub_402D20+4AB↓j
.text:004031AF                 cmp     byte ptr [ebx+24h], 0
.text:004031B3                 jz      loc_402F00
.text:004031B9                 mov     [esp+2Ch+var_2C], ebx
.text:004031BC                 call    sub_403530
.text:004031C1                 jmp     loc_402F00
.text:004031C6 ; ---------------------------------------------------------------------------
.text:004031C6
.text:004031C6 loc_4031C6:                             ; CODE XREF: sub_402D20+48D↑j
.text:004031C6                 call    sub_403880
.text:004031CB                 jmp     short loc_4031AF
.text:004031CD ; ---------------------------------------------------------------------------
.text:004031CD
.text:004031CD loc_4031CD:                             ; CODE XREF: sub_402D20+1A8↑j
.text:004031CD                 mov     ecx, dword_41D034
.text:004031D3                 xor     esi, esi
.text:004031D5                 mov     edx, ds:dword_41E190
.text:004031DB                 cmp     esi, ecx
.text:004031DD                 jge     loc_402F2C
.text:004031E3                 movzx   eax, byte_41D011
.text:004031EA                 mov     [esp+2Ch+var_18], al
.text:004031EE                 mov     eax, ecx
.text:004031F0
.text:004031F0 loc_4031F0:                             ; CODE XREF: sub_402D20+4F5↓j
.text:004031F0                 cmp     dword ptr [edx+8], 1
.text:004031F4                 jbe     short loc_403210
.text:004031F6                 cmp     [esp+2Ch+var_18], 0
.text:004031FB                 jz      short loc_403211
.text:004031FD                 mov     ebp, [edx+18h]
.text:00403200                 test    ebp, ebp
.text:00403202                 jle     short loc_403211
.text:00403204                 mov     ebp, [edx+1Ch]
.text:00403207                 test    ebp, ebp
.text:00403209                 jle     short loc_403211
.text:0040320B                 nop
.text:0040320C                 lea     esi, [esi+0]
.text:00403210
.text:00403210 loc_403210:                             ; CODE XREF: sub_402D20+4D4↑j
.text:00403210                 inc     esi
.text:00403211
.text:00403211 loc_403211:                             ; CODE XREF: sub_402D20+4DB↑j
.text:00403211                                         ; sub_402D20+4E2↑j ...
.text:00403211                 add     edx, 28h ; '('
.text:00403214                 dec     eax
.text:00403215                 jnz     short loc_4031F0
.text:00403217                 test    esi, esi
.text:00403219                 jg      loc_402ECE
.text:0040321F                 jmp     loc_402F2C
.text:00403224 ; ---------------------------------------------------------------------------
.text:00403224
.text:00403224 loc_403224:                             ; CODE XREF: sub_402D20+17B↑j
.text:00403224                 mov     [esp+2Ch+var_2C], ebx
.text:00403227                 call    sub_403790
.text:0040322C                 jmp     loc_402EA1
.text:00403231 ; ---------------------------------------------------------------------------
.text:00403231
.text:00403231 loc_403231:                             ; CODE XREF: sub_402D20+15D↑j
.text:00403231                 cmp     dword ptr [ebx+8], 1
.text:00403235                 jz      loc_402E83
.text:0040323B                 cmp     ds:byte_41E000, 0
.text:00403242                 jz      loc_402F06
.text:00403248                 cmp     ds:byte_41E200, 0
.text:0040324F                 jz      loc_403183
.text:00403255                 mov     ds:byte_41E1F0, 1
.text:0040325C                 jmp     loc_402F06
.text:00403261 ; ---------------------------------------------------------------------------
.text:00403261
.text:00403261 loc_403261:                             ; CODE XREF: sub_402D20+145↑j
.text:00403261                 movzx   edx, ds:byte_41E2F0
.text:00403268                 mov     [esp+2Ch+var_1A], dl
.text:0040326C                 jmp     loc_402F2C
.text:0040326C sub_402D20      endp
.text:0040326C
.text:00403271 ; ---------------------------------------------------------------------------
.text:00403271                 jmp     short sub_403280
.text:00403271 ; ---------------------------------------------------------------------------
.text:00403273                 align 10h
.text:00403280
.text:00403280 ; =============== S U B R O U T I N E =======================================
.text:00403280
.text:00403280
.text:00403280 sub_403280      proc near               ; CODE XREF: sub_402B00:loc_402BA5↑p
.text:00403280                                         ; .text:00403271↑j
.text:00403280
.text:00403280 Block           = dword ptr -0Ch
.text:00403280
.text:00403280                 push    esi
.text:00403281                 push    ebx
.text:00403282                 sub     esp, 4
.text:00403285                 mov     edx, dword_41D034
.text:0040328B                 mov     ebx, ds:dword_41E230
.text:00403291                 mov     eax, ds:dword_41E1D0
.text:00403296                 imul    ebx, edx
.text:00403299                 mov     edx, ds:dword_41E240
.text:0040329F                 mov     esi, ebx
.text:004032A1                 inc     edx
.text:004032A2                 imul    esi, edx
.text:004032A5                 test    eax, eax
.text:004032A7                 jnz     short loc_403320
.text:004032A9
.text:004032A9 loc_4032A9:                             ; CODE XREF: sub_403280+A8↓j
.text:004032A9                 shl     ebx, 2
.text:004032AC                 lea     ecx, [ebx+4]
.text:004032AF                 mov     [esp+0Ch+Block], ecx ; size_t
.text:004032B2                 call    sub_4081B0
.text:004032B7                 mov     ds:dword_41E1D0, eax
.text:004032BC                 mov     eax, ds:dword_41E1E0
.text:004032C1                 test    eax, eax
.text:004032C3                 jnz     short loc_403310
.text:004032C5
.text:004032C5 loc_4032C5:                             ; CODE XREF: sub_403280+98↓j
.text:004032C5                 mov     [esp+0Ch+Block], ebx ; size_t
.text:004032C8                 call    sub_4081B0
.text:004032CD                 mov     ds:dword_41E1E0, eax
.text:004032D2                 mov     eax, ds:dword_41E1A0
.text:004032D7                 test    eax, eax
.text:004032D9                 jnz     short loc_403300
.text:004032DB
.text:004032DB loc_4032DB:                             ; CODE XREF: sub_403280+88↓j
.text:004032DB                 cmp     ds:byte_41E160, 0
.text:004032E2                 mov     eax, esi
.text:004032E4                 jz      short loc_4032E8
.text:004032E6                 add     eax, eax
.text:004032E8
.text:004032E8 loc_4032E8:                             ; CODE XREF: sub_403280+64↑j
.text:004032E8                 mov     [esp+0Ch+Block], eax ; size_t
.text:004032EB                 mov     ds:dword_41E1C0, eax
.text:004032F0                 call    sub_4081B0
.text:004032F5                 mov     ds:dword_41E1A0, eax
.text:004032FA                 pop     eax
.text:004032FB                 pop     ebx
.text:004032FC                 pop     esi
.text:004032FD                 retn
.text:004032FD ; ---------------------------------------------------------------------------
.text:004032FE                 align 10h
.text:00403300
.text:00403300 loc_403300:                             ; CODE XREF: sub_403280+59↑j
.text:00403300                 mov     [esp+0Ch+Block], eax ; Block
.text:00403303                 call    free
.text:00403308                 jmp     short loc_4032DB
.text:00403308 ; ---------------------------------------------------------------------------
.text:0040330A                 align 10h
.text:00403310
.text:00403310 loc_403310:                             ; CODE XREF: sub_403280+43↑j
.text:00403310                 mov     [esp+0Ch+Block], eax ; Block
.text:00403313                 call    free
.text:00403318                 jmp     short loc_4032C5
.text:00403318 ; ---------------------------------------------------------------------------
.text:0040331A                 align 10h
.text:00403320
.text:00403320 loc_403320:                             ; CODE XREF: sub_403280+27↑j
.text:00403320                 mov     [esp+0Ch+Block], eax ; Block
.text:00403323                 call    free
.text:00403328                 jmp     loc_4032A9
.text:00403328 sub_403280      endp
.text:00403328
.text:00403328 ; ---------------------------------------------------------------------------
.text:0040332D                 align 10h
.text:00403330
.text:00403330 ; =============== S U B R O U T I N E =======================================
.text:00403330
.text:00403330
.text:00403330 sub_403330      proc near               ; CODE XREF: sub_406EA0:loc_406EEA↓p
.text:00403330
.text:00403330 var_1C          = dword ptr -1Ch
.text:00403330 var_18          = dword ptr -18h
.text:00403330 var_14          = dword ptr -14h
.text:00403330
.text:00403330                 push    ebp
.text:00403331                 xor     eax, eax
.text:00403333                 xor     ebp, ebp
.text:00403335                 push    edi
.text:00403336                 push    esi
.text:00403337                 push    ebx
.text:00403338                 sub     esp, 0Ch
.text:0040333B                 movzx   edx, ds:byte_41E070
.text:00403342                 mov     ds:dword_41E1B0, eax
.text:00403347                 mov     [esp+1Ch+var_14], 0
.text:0040334F                 test    dl, dl
.text:00403351                 jz      loc_403497
.text:00403357                 mov     ecx, dword_41D034
.text:0040335D                 mov     [esp+1Ch+var_18], ecx
.text:00403361
.text:00403361 loc_403361:                             ; CODE XREF: sub_403330+171↓j
.text:00403361                 mov     esi, [esp+1Ch+var_18]
.text:00403365                 mov     ebx, ds:dword_41E190
.text:0040336B                 test    esi, esi
.text:0040336D                 mov     eax, ebx
.text:0040336F                 jle     loc_403410
.text:00403375                 mov     esi, [esp+1Ch+var_18]
.text:00403379                 lea     esi, [esi+0]
.text:00403380
.text:00403380 loc_403380:                             ; CODE XREF: sub_403330+5B↓j
.text:00403380                 mov     dword ptr [ebx+18h], 0
.text:00403387                 add     ebx, 28h ; '('
.text:0040338A                 dec     esi
.text:0040338B                 jnz     short loc_403380
.text:0040338D                 mov     esi, 1
.text:00403392                 mov     ebx, eax
.text:00403394                 cmp     esi, [esp+1Ch+var_18]
.text:00403398                 jg      short loc_403410
.text:0040339A                 mov     edi, ds:dword_41E0F0
.text:004033A0                 test    edi, edi
.text:004033A2                 jz      short loc_403410
.text:004033A4                 lea     esi, [esi+0]
.text:004033AA                 lea     edi, [edi+0]
.text:004033B0
.text:004033B0 loc_4033B0:                             ; CODE XREF: sub_403330+D2↓j
.text:004033B0                 mov     [ebx+14h], ebp
.text:004033B3                 mov     edi, ds:dword_41E230
.text:004033B9                 test    edi, edi
.text:004033BB                 jz      short loc_4033F0
.text:004033BD                 mov     edx, ds:dword_41E0F0
.text:004033C3                 test    edx, edx
.text:004033C5                 jz      short loc_4033F0
.text:004033C7                 mov     ecx, [ebx+8]
.text:004033CA                 lea     esi, [esi+0]
.text:004033D0
.text:004033D0 loc_4033D0:                             ; CODE XREF: sub_403330+AF↓j
.text:004033D0                 test    ecx, ecx
.text:004033D2                 jz      short loc_403433
.text:004033D4
.text:004033D4 loc_4033D4:                             ; CODE XREF: sub_403330+12A↓j
.text:004033D4                                         ; sub_403330+158↓j
.text:004033D4                 dec     edi
.text:004033D5                 jz      short loc_4033F0
.text:004033D7                 mov     edx, ds:dword_41E0F0
.text:004033DD                 test    edx, edx
.text:004033DF                 jnz     short loc_4033D0
.text:004033E1                 jmp     short loc_4033F0
.text:004033E1 ; ---------------------------------------------------------------------------
.text:004033E3                 align 10h
.text:004033F0
.text:004033F0 loc_4033F0:                             ; CODE XREF: sub_403330+8B↑j
.text:004033F0                                         ; sub_403330+95↑j ...
.text:004033F0                 inc     esi
.text:004033F1                 add     ebx, 28h ; '('
.text:004033F4                 cmp     esi, [esp+1Ch+var_18]
.text:004033F8                 jg      short loc_403404
.text:004033FA                 mov     edi, ds:dword_41E0F0
.text:00403400                 test    edi, edi
.text:00403402                 jnz     short loc_4033B0
.text:00403404
.text:00403404 loc_403404:                             ; CODE XREF: sub_403330+C8↑j
.text:00403404                 movzx   edx, ds:byte_41E070
.text:0040340B                 nop
.text:0040340C                 lea     esi, [esi+0]
.text:00403410
.text:00403410 loc_403410:                             ; CODE XREF: sub_403330+3F↑j
.text:00403410                                         ; sub_403330+68↑j ...
.text:00403410                 mov     ebx, ds:dword_41E1D0
.text:00403416                 test    dl, dl
.text:00403418                 mov     eax, [esp+1Ch+var_14]
.text:0040341C                 mov     [ebx+ebp*4], eax
.text:0040341F                 jnz     short loc_403429
.text:00403421
.text:00403421 loc_403421:                             ; CODE XREF: sub_403330+101↓j
.text:00403421                 add     esp, 0Ch
.text:00403424                 pop     ebx
.text:00403425                 pop     esi
.text:00403426                 pop     edi
.text:00403427                 pop     ebp
.text:00403428                 retn
.text:00403429 ; ---------------------------------------------------------------------------
.text:00403429
.text:00403429 loc_403429:                             ; CODE XREF: sub_403330+EF↑j
.text:00403429                 mov     [esp+1Ch+var_1C], ebp
.text:0040342C                 call    sub_4034B0
.text:00403431                 jmp     short loc_403421
.text:00403433 ; ---------------------------------------------------------------------------
.text:00403433
.text:00403433 loc_403433:                             ; CODE XREF: sub_403330+A2↑j
.text:00403433                 mov     [esp+1Ch+var_1C], ebx
.text:00403436                 xor     ecx, ecx
.text:00403438                 mov     ds:dword_41E270, ecx
.text:0040343E                 call    sub_403EF0
.text:00403443                 test    al, al
.text:00403445                 jz      short loc_40348D
.text:00403447
.text:00403447 loc_403447:                             ; CODE XREF: sub_403330+165↓j
.text:00403447                 mov     edx, [ebx+8]
.text:0040344A                 test    edx, edx
.text:0040344C                 mov     ecx, edx
.text:0040344E                 jz      short loc_403460
.text:00403450                 mov     edx, [esp+1Ch+var_14]
.text:00403454                 cmp     edx, ds:dword_41E1B0
.text:0040345A                 jz      loc_4033D4
.text:00403460
.text:00403460 loc_403460:                             ; CODE XREF: sub_403330+11E↑j
.text:00403460                 inc     dword ptr [ebx+18h]
.text:00403463                 mov     edx, [esp+1Ch+var_14]
.text:00403467                 mov     eax, ds:dword_41E1D0
.text:0040346C                 mov     [eax+ebp*4], edx
.text:0040346F                 mov     edx, ds:dword_41E270
.text:00403475                 mov     eax, ds:dword_41E1E0
.text:0040347A                 mov     [eax+ebp*4], edx
.text:0040347D                 mov     edx, ds:dword_41E1B0
.text:00403483                 inc     ebp
.text:00403484                 mov     [esp+1Ch+var_14], edx
.text:00403488                 jmp     loc_4033D4
.text:0040348D ; ---------------------------------------------------------------------------
.text:0040348D
.text:0040348D loc_40348D:                             ; CODE XREF: sub_403330+115↑j
.text:0040348D                 mov     [esp+1Ch+var_1C], ebx
.text:00403490                 call    sub_403790
.text:00403495                 jmp     short loc_403447
.text:00403497 ; ---------------------------------------------------------------------------
.text:00403497
.text:00403497 loc_403497:                             ; CODE XREF: sub_403330+21↑j
.text:00403497                 mov     eax, dword_41D034
.text:0040349C                 dec     eax
.text:0040349D                 mov     [esp+1Ch+var_18], eax
.text:004034A1                 jmp     loc_403361
.text:004034A1 sub_403330      endp
.text:004034A1
.text:004034A1 ; ---------------------------------------------------------------------------
.text:004034A6                 align 10h
.text:004034B0
.text:004034B0 ; =============== S U B R O U T I N E =======================================
.text:004034B0
.text:004034B0
.text:004034B0 sub_4034B0      proc near               ; CODE XREF: sub_403330+FC↑p
.text:004034B0
.text:004034B0 var_18          = dword ptr -18h
.text:004034B0 var_14          = dword ptr -14h
.text:004034B0 arg_0           = dword ptr  4
.text:004034B0
.text:004034B0                 push    ebp
.text:004034B1                 push    edi
.text:004034B2                 xor     edi, edi
.text:004034B4                 push    esi
.text:004034B5                 mov     esi, 1
.text:004034BA                 push    ebx
.text:004034BB                 sub     esp, 8
.text:004034BE                 mov     ecx, dword_41D034
.text:004034C4                 mov     ebp, [esp+18h+arg_0]
.text:004034C8                 mov     ebx, ds:dword_41E190
.text:004034CE                 cmp     esi, ecx
.text:004034D0                 mov     [esp+18h+var_14], ecx
.text:004034D4                 jg      short loc_403510
.text:004034D6                 lea     esi, [esi+0]
.text:004034D9                 lea     edi, [edi+0]
.text:004034E0
.text:004034E0 loc_4034E0:                             ; CODE XREF: sub_4034B0+57↓j
.text:004034E0                 mov     eax, ebp
.text:004034E2                 cdq
.text:004034E3                 idiv    ecx
.text:004034E5                 cmp     esi, edx
.text:004034E7                 mov     [esp+18h+var_18], eax
.text:004034EA                 jg      short loc_4034F0
.text:004034EC                 inc     eax
.text:004034ED                 mov     [esp+18h+var_18], eax
.text:004034F0
.text:004034F0 loc_4034F0:                             ; CODE XREF: sub_4034B0+3A↑j
.text:004034F0                 mov     [ebx+14h], edi
.text:004034F3                 mov     edx, [esp+18h+var_18]
.text:004034F6                 inc     esi
.text:004034F7                 mov     [ebx+18h], edx
.text:004034FA                 add     edi, edx
.text:004034FC                 add     ebx, 28h ; '('
.text:004034FF                 cmp     esi, ecx
.text:00403501                 jg      short loc_403510
.text:00403503                 mov     ecx, [esp+18h+var_14]
.text:00403507                 jmp     short loc_4034E0
.text:00403507 ; ---------------------------------------------------------------------------
.text:00403509                 align 10h
.text:00403510
.text:00403510 loc_403510:                             ; CODE XREF: sub_4034B0+24↑j
.text:00403510                                         ; sub_4034B0+51↑j
.text:00403510                 add     esp, 8
.text:00403513                 pop     ebx
.text:00403514                 pop     esi
.text:00403515                 pop     edi
.text:00403516                 pop     ebp
.text:00403517                 retn
.text:00403517 sub_4034B0      endp
.text:00403517
.text:00403517 ; ---------------------------------------------------------------------------
.text:00403518 ; const char aD[4]
.text:00403518 aD              db '%*d',0              ; DATA XREF: sub_403530+28↓o
.text:0040351C a0D             db '%0*d',0             ; DATA XREF: sub_403530:loc_40364A↓o
.text:00403521 ; ---------------------------------------------------------------------------
.text:00403521                 jmp     short sub_403530
.text:00403521 ; ---------------------------------------------------------------------------
.text:00403523                 align 10h
.text:00403530
.text:00403530 ; =============== S U B R O U T I N E =======================================
.text:00403530
.text:00403530
.text:00403530 sub_403530      proc near               ; CODE XREF: sub_402D20+49C↑p
.text:00403530                                         ; .text:00403521↑j ...
.text:00403530
.text:00403530 Buffer          = dword ptr -1Ch
.text:00403530 Format          = dword ptr -18h
.text:00403530 var_14          = dword ptr -14h
.text:00403530 var_10          = dword ptr -10h
.text:00403530 arg_0           = dword ptr  4
.text:00403530
.text:00403530                 push    edi
.text:00403531                 push    esi
.text:00403532                 push    ebx
.text:00403533                 sub     esp, 10h
.text:00403536                 mov     edx, ds:dword_41E290
.text:0040353C                 mov     ecx, ds:dword_41E2A0
.text:00403542                 mov     edi, [esp+1Ch+arg_0]
.text:00403546                 cmp     edx, ecx
.text:00403548                 jge     loc_40364A
.text:0040354E                 mov     [esp+1Ch+var_10], edx
.text:00403552                 mov     edx, dword_41D050
.text:00403558                 mov     [esp+1Ch+Format], offset aD ; "%*d"
.text:00403560
.text:00403560 loc_403560:                             ; CODE XREF: sub_403530+131↓j
.text:00403560                 mov     [esp+1Ch+var_14], edx
.text:00403564                 mov     ecx, ds:Buffer
.text:0040356A                 mov     [esp+1Ch+Buffer], ecx ; Buffer
.text:0040356D                 call    sprintf
.text:00403572                 inc     ds:dword_41E290
.text:00403578                 mov     ebx, dword_41D050
.text:0040357E                 mov     esi, ds:Buffer
.text:00403584                 test    ebx, ebx
.text:00403586                 jle     short loc_40359F
.text:00403588                 nop
.text:00403589                 lea     esi, [esi+0]
.text:00403590
.text:00403590 loc_403590:                             ; CODE XREF: sub_403530+6D↓j
.text:00403590                 movsx   edx, byte ptr [esi]
.text:00403593                 dec     ebx
.text:00403594                 inc     esi
.text:00403595                 mov     [esp+1Ch+Buffer], edx
.text:00403598                 call    dword ptr [edi+10h]
.text:0040359B                 test    ebx, ebx
.text:0040359D                 jg      short loc_403590
.text:0040359F
.text:0040359F loc_40359F:                             ; CODE XREF: sub_403530+56↑j
.text:0040359F                 cmp     dword_41D034, 1
.text:004035A6                 jle     short loc_403613
.text:004035A8                 movzx   eax, byte_41D040
.text:004035AF                 cmp     al, 9
.text:004035B1                 jz      short loc_4035E7
.text:004035B3                 movsx   ebx, al
.text:004035B6                 mov     [esp+1Ch+Buffer], ebx
.text:004035B9                 call    dword ptr [edi+10h]
.text:004035BC
.text:004035BC loc_4035BC:                             ; CODE XREF: sub_403530+C9↓j
.text:004035BC                                         ; sub_403530+E1↓j ...
.text:004035BC                 cmp     ds:byte_41E000, 0
.text:004035C3                 jnz     short loc_4035E0
.text:004035C5                 cmp     ds:byte_41E080, 0
.text:004035CC                 jz      short loc_4035E0
.text:004035CE                 mov     ebx, ds:dword_41E2B0
.text:004035D4                 add     ds:dword_41E270, ebx
.text:004035DA                 lea     esi, [esi+0]
.text:004035E0
.text:004035E0 loc_4035E0:                             ; CODE XREF: sub_403530+93↑j
.text:004035E0                                         ; sub_403530+9C↑j
.text:004035E0                 add     esp, 10h
.text:004035E3                 pop     ebx
.text:004035E4                 pop     esi
.text:004035E5                 pop     edi
.text:004035E6                 retn
.text:004035E7 ; ---------------------------------------------------------------------------
.text:004035E7
.text:004035E7 loc_4035E7:                             ; CODE XREF: sub_403530+81↑j
.text:004035E7                 mov     ebx, ds:dword_41E2B0
.text:004035ED                 mov     eax, dword_41D050
.text:004035F2                 sub     ebx, eax
.text:004035F4                 mov     esi, ebx
.text:004035F6                 dec     ebx
.text:004035F7                 test    esi, esi
.text:004035F9                 jle     short loc_4035BC
.text:004035FB                 nop
.text:004035FC                 lea     esi, [esi+0]
.text:00403600
.text:00403600 loc_403600:                             ; CODE XREF: sub_403530+DF↓j
.text:00403600                 mov     [esp+1Ch+Buffer], 20h ; ' '
.text:00403607                 call    dword ptr [edi+10h]
.text:0040360A                 mov     ecx, ebx
.text:0040360C                 dec     ebx
.text:0040360D                 test    ecx, ecx
.text:0040360F                 jg      short loc_403600
.text:00403611                 jmp     short loc_4035BC
.text:00403613 ; ---------------------------------------------------------------------------
.text:00403613
.text:00403613 loc_403613:                             ; CODE XREF: sub_403530+76↑j
.text:00403613                 movsx   edx, byte_41D040
.text:0040361A                 mov     [esp+1Ch+Buffer], edx
.text:0040361D                 call    dword ptr [edi+10h]
.text:00403620                 cmp     byte_41D040, 9
.text:00403627                 jnz     short loc_4035BC
.text:00403629                 mov     esi, ds:dword_41E260
.text:0040362F                 mov     ecx, dword_41D030
.text:00403635                 mov     eax, esi
.text:00403637                 cdq
.text:00403638                 idiv    ecx
.text:0040363A                 sub     ecx, edx
.text:0040363C                 lea     edi, [ecx+esi]
.text:0040363F                 mov     ds:dword_41E260, edi
.text:00403645                 jmp     loc_4035BC
.text:0040364A ; ---------------------------------------------------------------------------
.text:0040364A
.text:0040364A loc_40364A:                             ; CODE XREF: sub_403530+18↑j
.text:0040364A                 mov     [esp+1Ch+Format], offset a0D ; "%0*d"
.text:00403652                 mov     eax, edx
.text:00403654                 cdq
.text:00403655                 idiv    ecx
.text:00403657                 mov     [esp+1Ch+var_10], edx
.text:0040365B                 mov     edx, dword_41D050
.text:00403661                 jmp     loc_403560
.text:00403661 sub_403530      endp
.text:00403661
.text:00403661 ; ---------------------------------------------------------------------------
.text:00403666                 align 10h
.text:00403670
.text:00403670 ; =============== S U B R O U T I N E =======================================
.text:00403670
.text:00403670
.text:00403670 sub_403670      proc near               ; CODE XREF: sub_402D20+47A↑p
.text:00403670                                         ; sub_403EF0+CC↓p ...
.text:00403670
.text:00403670 var_1C          = dword ptr -1Ch
.text:00403670 File            = dword ptr -18h
.text:00403670 arg_0           = dword ptr  4
.text:00403670
.text:00403670                 push    esi
.text:00403671                 push    ebx
.text:00403672                 sub     esp, 14h
.text:00403675                 mov     esi, [esp+1Ch+arg_0]
.text:00403679                 cmp     ds:byte_41E0B0, 0
.text:00403680                 mov     ebx, ds:dword_41E260
.text:00403686                 jz      short loc_403696
.text:00403688                 sub     esi, ebx
.text:0040368A                 mov     ds:dword_41E250, esi
.text:00403690
.text:00403690 loc_403690:                             ; CODE XREF: sub_403670+5B↓j
.text:00403690                 add     esp, 14h
.text:00403693                 pop     ebx
.text:00403694                 pop     esi
.text:00403695                 retn
.text:00403696 ; ---------------------------------------------------------------------------
.text:00403696
.text:00403696 loc_403696:                             ; CODE XREF: sub_403670+16↑j
.text:00403696                 inc     ebx
.text:00403697                 cmp     ebx, esi
.text:00403699                 jg      short loc_4036C5
.text:0040369B                 nop
.text:0040369C                 lea     esi, [esi+0]
.text:004036A0
.text:004036A0 loc_4036A0:                             ; CODE XREF: sub_403670+53↓j
.text:004036A0                 mov     edx, ds:_iob
.text:004036A6                 mov     ecx, [edx+24h]
.text:004036A9                 dec     ecx
.text:004036AA                 mov     [edx+24h], ecx
.text:004036AD                 test    ecx, ecx
.text:004036AF                 js      short loc_4036D0
.text:004036B1                 mov     ecx, ds:_iob
.text:004036B7                 mov     eax, [ecx+20h]
.text:004036BA                 mov     byte ptr [eax], 20h ; ' '
.text:004036BD                 inc     dword ptr [ecx+20h]
.text:004036C0
.text:004036C0 loc_4036C0:                             ; CODE XREF: sub_403670+79↓j
.text:004036C0                 inc     ebx
.text:004036C1                 cmp     ebx, esi
.text:004036C3                 jle     short loc_4036A0
.text:004036C5
.text:004036C5 loc_4036C5:                             ; CODE XREF: sub_403670+29↑j
.text:004036C5                 mov     ds:dword_41E260, esi
.text:004036CB                 jmp     short loc_403690
.text:004036CB ; ---------------------------------------------------------------------------
.text:004036CD                 align 10h
.text:004036D0
.text:004036D0 loc_4036D0:                             ; CODE XREF: sub_403670+3F↑j
.text:004036D0                 mov     [esp+1Ch+var_1C], 20h ; ' ' ; Ch
.text:004036D7                 mov     edx, ds:_iob
.text:004036DD                 add     edx, 20h ; ' '
.text:004036E0                 mov     [esp+1Ch+File], edx ; File
.text:004036E4                 call    _flsbuf
.text:004036E9                 jmp     short loc_4036C0
.text:004036E9 sub_403670      endp
.text:004036E9
.text:004036E9 ; ---------------------------------------------------------------------------
.text:004036EB                 align 10h
.text:004036F0
.text:004036F0 ; =============== S U B R O U T I N E =======================================
.text:004036F0
.text:004036F0
.text:004036F0 sub_4036F0      proc near               ; CODE XREF: sub_402D20+420↑p
.text:004036F0
.text:004036F0 var_C           = dword ptr -0Ch
.text:004036F0 File            = dword ptr -8
.text:004036F0 arg_0           = dword ptr  4
.text:004036F0
.text:004036F0                 push    ebx
.text:004036F1                 sub     esp, 8
.text:004036F4                 cmp     ds:byte_41E040, 0
.text:004036FB                 jz      short loc_403740
.text:004036FD                 mov     edx, ds:_iob
.text:00403703                 mov     ecx, [edx+24h]
.text:00403706                 dec     ecx
.text:00403707                 mov     [edx+24h], ecx
.text:0040370A                 test    ecx, ecx
.text:0040370C                 js      short loc_403722
.text:0040370E                 mov     ecx, ds:_iob
.text:00403714                 mov     eax, [ecx+20h]
.text:00403717                 mov     byte ptr [eax], 0Ch
.text:0040371A                 inc     dword ptr [ecx+20h]
.text:0040371D
.text:0040371D loc_40371D:                             ; CODE XREF: sub_4036F0+4B↓j
.text:0040371D                                         ; sub_4036F0+56↓j ...
.text:0040371D                 add     esp, 8
.text:00403720                 pop     ebx
.text:00403721                 retn
.text:00403722 ; ---------------------------------------------------------------------------
.text:00403722
.text:00403722 loc_403722:                             ; CODE XREF: sub_4036F0+1C↑j
.text:00403722                 mov     [esp+0Ch+var_C], 0Ch ; Ch
.text:00403729                 mov     ebx, ds:_iob
.text:0040372F                 add     ebx, 20h ; ' '
.text:00403732                 mov     [esp+0Ch+File], ebx ; File
.text:00403736                 call    _flsbuf
.text:0040373B                 jmp     short loc_40371D
.text:0040373B ; ---------------------------------------------------------------------------
.text:0040373D                 align 10h
.text:00403740
.text:00403740 loc_403740:                             ; CODE XREF: sub_4036F0+B↑j
.text:00403740                 mov     ebx, [esp+0Ch+arg_0]
.text:00403744                 test    ebx, ebx
.text:00403746                 jz      short loc_40371D
.text:00403748                 nop
.text:00403749                 lea     esi, [esi+0]
.text:00403750
.text:00403750 loc_403750:                             ; CODE XREF: sub_4036F0+81↓j
.text:00403750                 mov     edx, ds:_iob
.text:00403756                 mov     ecx, [edx+24h]
.text:00403759                 dec     ecx
.text:0040375A                 mov     [edx+24h], ecx
.text:0040375D                 test    ecx, ecx
.text:0040375F                 js      short loc_403775
.text:00403761                 mov     ecx, ds:_iob
.text:00403767                 mov     eax, [ecx+20h]
.text:0040376A                 mov     byte ptr [eax], 0Ah
.text:0040376D                 inc     dword ptr [ecx+20h]
.text:00403770
.text:00403770 loc_403770:                             ; CODE XREF: sub_4036F0+9E↓j
.text:00403770                 dec     ebx
.text:00403771                 jnz     short loc_403750
.text:00403773                 jmp     short loc_40371D
.text:00403775 ; ---------------------------------------------------------------------------
.text:00403775
.text:00403775 loc_403775:                             ; CODE XREF: sub_4036F0+6F↑j
.text:00403775                 mov     [esp+0Ch+var_C], 0Ah ; Ch
.text:0040377C                 mov     edx, ds:_iob
.text:00403782                 add     edx, 20h ; ' '
.text:00403785                 mov     [esp+0Ch+File], edx ; File
.text:00403789                 call    _flsbuf
.text:0040378E                 jmp     short loc_403770
.text:0040378E sub_4036F0      endp
.text:0040378E
.text:00403790
.text:00403790 ; =============== S U B R O U T I N E =======================================
.text:00403790
.text:00403790
.text:00403790 sub_403790      proc near               ; CODE XREF: sub_402D20+507↑p
.text:00403790                                         ; sub_403330+160↑p
.text:00403790
.text:00403790 Character       = dword ptr -1Ch
.text:00403790 Stream          = dword ptr -18h
.text:00403790 arg_0           = dword ptr  4
.text:00403790
.text:00403790                 push    esi
.text:00403791                 push    ebx
.text:00403792                 sub     esp, 14h
.text:00403795                 mov     esi, [esp+1Ch+arg_0]
.text:00403799                 mov     ebx, [esi]
.text:0040379B                 nop
.text:0040379C                 lea     esi, [esi+0]
.text:004037A0
.text:004037A0 loc_4037A0:                             ; CODE XREF: sub_403790+36↓j
.text:004037A0                 mov     edx, [ebx+4]
.text:004037A3                 dec     edx
.text:004037A4                 test    edx, edx
.text:004037A6                 mov     [ebx+4], edx
.text:004037A9                 js      loc_403863
.text:004037AF                 mov     ecx, [ebx]
.text:004037B1                 movzx   edx, byte ptr [ecx]
.text:004037B4                 inc     ecx
.text:004037B5                 mov     [ebx], ecx
.text:004037B7
.text:004037B7 loc_4037B7:                             ; CODE XREF: sub_403790+DD↓j
.text:004037B7                 cmp     edx, 0Ah
.text:004037BA                 jz      loc_403848
.text:004037C0                 cmp     edx, 0Ch
.text:004037C3                 jz      short loc_4037D6
.text:004037C5                 inc     edx
.text:004037C6                 jnz     short loc_4037A0
.text:004037C8                 mov     [esp+1Ch+arg_0], esi
.text:004037CC                 add     esp, 14h
.text:004037CF                 pop     ebx
.text:004037D0                 pop     esi
.text:004037D1                 jmp     sub_406DB0
.text:004037D6 ; ---------------------------------------------------------------------------
.text:004037D6
.text:004037D6 loc_4037D6:                             ; CODE XREF: sub_403790+33↑j
.text:004037D6                 mov     edx, [ebx+4]
.text:004037D9                 dec     edx
.text:004037DA                 test    edx, edx
.text:004037DC                 mov     [ebx+4], edx
.text:004037DF                 js      short loc_403857
.text:004037E1                 mov     ecx, [ebx]
.text:004037E3                 movzx   edx, byte ptr [ecx]
.text:004037E6                 inc     ecx
.text:004037E7                 mov     [ebx], ecx
.text:004037E9
.text:004037E9 loc_4037E9:                             ; CODE XREF: sub_403790+D1↓j
.text:004037E9                 cmp     edx, 0Ah
.text:004037EC                 jz      short loc_4037FA
.text:004037EE                 mov     [esp+1Ch+Stream], ebx ; Stream
.text:004037F2                 mov     [esp+1Ch+Character], edx ; Character
.text:004037F5                 call    ungetc
.text:004037FA
.text:004037FA loc_4037FA:                             ; CODE XREF: sub_403790+5C↑j
.text:004037FA                 cmp     ds:byte_41E020, 0
.text:00403801                 jz      short loc_40380A
.text:00403803                 mov     ds:byte_41E030, 1
.text:0040380A
.text:0040380A loc_40380A:                             ; CODE XREF: sub_403790+71↑j
.text:0040380A                 cmp     ds:byte_41E000, 0
.text:00403811                 jnz     short loc_40384E
.text:00403813                 mov     edx, dword_41D034
.text:00403819                 mov     ecx, ds:dword_41E190
.text:0040381F                 test    edx, edx
.text:00403821                 jz      short loc_40383B
.text:00403823                 movzx   ebx, byte_41D011
.text:0040382A
.text:0040382A loc_40382A:                             ; CODE XREF: sub_403790+A9↓j
.text:0040382A                 xor     eax, eax
.text:0040382C                 test    bl, bl
.text:0040382E                 setz    al
.text:00403831                 inc     eax
.text:00403832                 mov     [ecx+8], eax
.text:00403835                 add     ecx, 28h ; '('
.text:00403838                 dec     edx
.text:00403839                 jnz     short loc_40382A
.text:0040383B
.text:0040383B loc_40383B:                             ; CODE XREF: sub_403790+91↑j
.text:0040383B                                         ; sub_403790+C5↓j
.text:0040383B                 mov     dword ptr [esi+1Ch], 0
.text:00403842                 dec     ds:dword_41E0F0
.text:00403848
.text:00403848 loc_403848:                             ; CODE XREF: sub_403790+2A↑j
.text:00403848                 add     esp, 14h
.text:0040384B                 pop     ebx
.text:0040384C                 pop     esi
.text:0040384D                 retn
.text:0040384E ; ---------------------------------------------------------------------------
.text:0040384E
.text:0040384E loc_40384E:                             ; CODE XREF: sub_403790+81↑j
.text:0040384E                 mov     dword ptr [esi+8], 2
.text:00403855                 jmp     short loc_40383B
.text:00403857 ; ---------------------------------------------------------------------------
.text:00403857
.text:00403857 loc_403857:                             ; CODE XREF: sub_403790+4F↑j
.text:00403857                 mov     [esp+1Ch+Character], ebx ; File
.text:0040385A                 call    _filbuf
.text:0040385F                 mov     edx, eax
.text:00403861                 jmp     short loc_4037E9
.text:00403863 ; ---------------------------------------------------------------------------
.text:00403863
.text:00403863 loc_403863:                             ; CODE XREF: sub_403790+19↑j
.text:00403863                 mov     [esp+1Ch+Character], ebx ; File
.text:00403866                 call    _filbuf
.text:0040386B                 mov     edx, eax
.text:0040386D                 jmp     loc_4037B7
.text:0040386D sub_403790      endp
.text:0040386D
.text:0040386D ; ---------------------------------------------------------------------------
.text:00403872                 align 10h
.text:00403880
.text:00403880 ; =============== S U B R O U T I N E =======================================
.text:00403880
.text:00403880
.text:00403880 sub_403880      proc near               ; CODE XREF: sub_402D20:loc_4031C6↑p
.text:00403880                                         ; sub_403EF0:loc_4043BC↓p ...
.text:00403880
.text:00403880 var_1C          = dword ptr -1Ch
.text:00403880 File            = dword ptr -18h
.text:00403880 var_14          = dword ptr -14h
.text:00403880
.text:00403880                 push    ebp
.text:00403881                 push    edi
.text:00403882                 push    esi
.text:00403883                 push    ebx
.text:00403884                 sub     esp, 0Ch
.text:00403887                 mov     edx, ds:dword_41E170
.text:0040388D                 mov     ebp, off_41D054
.text:00403893                 mov     [esp+1Ch+var_14], edx
.text:00403897                 mov     edx, ds:dword_41E2D0
.text:0040389D                 test    edx, edx
.text:0040389F                 jle     loc_403B57
.text:004038A5
.text:004038A5 loc_4038A5:                             ; CODE XREF: sub_403880+212↓j
.text:004038A5                 mov     ebx, [esp+1Ch+var_14]
.text:004038A9                 dec     [esp+1Ch+var_14]
.text:004038AD                 test    ebx, ebx
.text:004038AF                 jle     loc_403B4C
.text:004038B5                 mov     edx, ds:dword_41E250
.text:004038BB                 nop
.text:004038BC                 lea     esi, [esi+0]
.text:004038C0
.text:004038C0 loc_4038C0:                             ; CODE XREF: sub_403880+155↓j
.text:004038C0                 cmp     byte ptr [ebp+0], 20h ; ' '
.text:004038C4                 jz      loc_403B3F
.text:004038CA                 test    edx, edx
.text:004038CC                 jle     loc_403997
.text:004038D2                 mov     ebx, ds:dword_41E260
.text:004038D8                 lea     edi, [edx+ebx]
.text:004038DB                 dec     edx
.text:004038DC                 jle     short loc_403950
.text:004038DE                 mov     ecx, dword_41D030
.text:004038E4                 mov     eax, ebx
.text:004038E6                 cdq
.text:004038E7                 idiv    ecx
.text:004038E9                 sub     ecx, edx
.text:004038EB                 lea     esi, [ecx+ebx]
.text:004038EE                 cmp     esi, edi
.text:004038F0                 jg      short loc_403950
.text:004038F2                 lea     esi, [esi+0]
.text:004038F9                 lea     edi, [edi+0]
.text:00403900
.text:00403900 loc_403900:                             ; CODE XREF: sub_403880+C5↓j
.text:00403900                 mov     edx, ds:_iob
.text:00403906                 mov     ebx, [edx+24h]
.text:00403909                 dec     ebx
.text:0040390A                 mov     [edx+24h], ebx
.text:0040390D                 test    ebx, ebx
.text:0040390F                 js      loc_403B1E
.text:00403915                 movzx   ecx, byte_41D02C
.text:0040391C                 mov     ebx, ds:_iob
.text:00403922                 mov     eax, [ebx+20h]
.text:00403925                 mov     [eax], cl
.text:00403927                 inc     dword ptr [ebx+20h]
.text:0040392A
.text:0040392A loc_40392A:                             ; CODE XREF: sub_403880+2BA↓j
.text:0040392A                 mov     ebx, esi
.text:0040392C                 mov     esi, edi
.text:0040392E                 sub     esi, ebx
.text:00403930                 dec     esi
.text:00403931                 jle     short loc_403950
.text:00403933                 mov     ecx, dword_41D030
.text:00403939                 mov     eax, ebx
.text:0040393B                 cdq
.text:0040393C                 idiv    ecx
.text:0040393E                 sub     ecx, edx
.text:00403940                 lea     esi, [ecx+ebx]
.text:00403943                 cmp     esi, edi
.text:00403945                 jle     short loc_403900
.text:00403947                 mov     esi, esi
.text:00403949                 lea     edi, [edi+0]
.text:00403950
.text:00403950 loc_403950:                             ; CODE XREF: sub_403880+5C↑j
.text:00403950                                         ; sub_403880+70↑j ...
.text:00403950                 inc     ebx
.text:00403951                 cmp     ebx, edi
.text:00403953                 jg      short loc_403989
.text:00403955                 lea     esi, [esi+0]
.text:00403959                 lea     edi, [edi+0]
.text:00403960
.text:00403960 loc_403960:                             ; CODE XREF: sub_403880+107↓j
.text:00403960                 mov     edx, ds:_iob
.text:00403966                 mov     esi, [edx+24h]
.text:00403969                 dec     esi
.text:0040396A                 mov     [edx+24h], esi
.text:0040396D                 test    esi, esi
.text:0040396F                 js      loc_403B00
.text:00403975                 mov     ecx, ds:_iob
.text:0040397B                 mov     eax, [ecx+20h]
.text:0040397E                 mov     byte ptr [eax], 20h ; ' '
.text:00403981                 inc     dword ptr [ecx+20h]
.text:00403984
.text:00403984 loc_403984:                             ; CODE XREF: sub_403880+299↓j
.text:00403984                 inc     ebx
.text:00403985                 cmp     ebx, edi
.text:00403987                 jle     short loc_403960
.text:00403989
.text:00403989 loc_403989:                             ; CODE XREF: sub_403880+D3↑j
.text:00403989                 mov     ds:dword_41E260, edi
.text:0040398F                 xor     edi, edi
.text:00403991                 mov     ds:dword_41E250, edi
.text:00403997
.text:00403997 loc_403997:                             ; CODE XREF: sub_403880+4C↑j
.text:00403997                 mov     edx, ds:_iob
.text:0040399D                 mov     ebx, [edx+24h]
.text:004039A0                 dec     ebx
.text:004039A1                 mov     [edx+24h], ebx
.text:004039A4                 test    ebx, ebx
.text:004039A6                 js      loc_403ADC
.text:004039AC                 movzx   ecx, byte ptr [ebp+0]
.text:004039B0                 inc     ebp
.text:004039B1                 mov     esi, ds:_iob
.text:004039B7                 mov     eax, [esi+20h]
.text:004039BA                 mov     [eax], cl
.text:004039BC                 inc     dword ptr [esi+20h]
.text:004039BF
.text:004039BF loc_4039BF:                             ; CODE XREF: sub_403880+276↓j
.text:004039BF                 inc     ds:dword_41E260
.text:004039C5                 mov     edx, ds:dword_41E250
.text:004039CB
.text:004039CB loc_4039CB:                             ; CODE XREF: sub_403880+2C7↓j
.text:004039CB                 mov     esi, [esp+1Ch+var_14]
.text:004039CF                 dec     [esp+1Ch+var_14]
.text:004039D3                 test    esi, esi
.text:004039D5                 jg      loc_4038C0
.text:004039DB
.text:004039DB loc_4039DB:                             ; CODE XREF: sub_403880+2D2↓j
.text:004039DB                 test    edx, edx
.text:004039DD                 jle     loc_403A83
.text:004039E3                 mov     ebx, ds:dword_41E260
.text:004039E9                 lea     edi, [edx+ebx]
.text:004039EC                 dec     edx
.text:004039ED                 jle     short loc_403A4A
.text:004039EF                 mov     ecx, dword_41D030
.text:004039F5                 mov     eax, ebx
.text:004039F7                 cdq
.text:004039F8                 idiv    ecx
.text:004039FA                 sub     ecx, edx
.text:004039FC                 lea     esi, [ecx+ebx]
.text:004039FF                 cmp     esi, edi
.text:00403A01                 jg      short loc_403A4A
.text:00403A03
.text:00403A03 loc_403A03:                             ; CODE XREF: sub_403880+1C8↓j
.text:00403A03                 mov     edx, ds:_iob
.text:00403A09                 mov     ebx, [edx+24h]
.text:00403A0C                 dec     ebx
.text:00403A0D                 mov     [edx+24h], ebx
.text:00403A10                 test    ebx, ebx
.text:00403A12                 js      loc_403ABB
.text:00403A18                 movzx   ecx, byte_41D02C
.text:00403A1F                 mov     ebx, ds:_iob
.text:00403A25                 mov     eax, [ebx+20h]
.text:00403A28                 mov     [eax], cl
.text:00403A2A                 inc     dword ptr [ebx+20h]
.text:00403A2D
.text:00403A2D loc_403A2D:                             ; CODE XREF: sub_403880+257↓j
.text:00403A2D                 mov     ebx, esi
.text:00403A2F                 mov     esi, edi
.text:00403A31                 sub     esi, ebx
.text:00403A33                 dec     esi
.text:00403A34                 jle     short loc_403A4A
.text:00403A36                 mov     ecx, dword_41D030
.text:00403A3C                 mov     eax, ebx
.text:00403A3E                 cdq
.text:00403A3F                 idiv    ecx
.text:00403A41                 sub     ecx, edx
.text:00403A43                 lea     esi, [ecx+ebx]
.text:00403A46                 cmp     esi, edi
.text:00403A48                 jle     short loc_403A03
.text:00403A4A
.text:00403A4A loc_403A4A:                             ; CODE XREF: sub_403880+16D↑j
.text:00403A4A                                         ; sub_403880+181↑j ...
.text:00403A4A                 inc     ebx
.text:00403A4B                 cmp     ebx, edi
.text:00403A4D                 jg      short loc_403A75
.text:00403A4F                 nop
.text:00403A50
.text:00403A50 loc_403A50:                             ; CODE XREF: sub_403880+1F3↓j
.text:00403A50                 mov     edx, ds:_iob
.text:00403A56                 mov     esi, [edx+24h]
.text:00403A59                 dec     esi
.text:00403A5A                 mov     [edx+24h], esi
.text:00403A5D                 test    esi, esi
.text:00403A5F                 js      short loc_403AA0
.text:00403A61                 mov     ecx, ds:_iob
.text:00403A67                 mov     eax, [ecx+20h]
.text:00403A6A                 mov     byte ptr [eax], 20h ; ' '
.text:00403A6D                 inc     dword ptr [ecx+20h]
.text:00403A70
.text:00403A70 loc_403A70:                             ; CODE XREF: sub_403880+239↓j
.text:00403A70                 inc     ebx
.text:00403A71                 cmp     ebx, edi
.text:00403A73                 jle     short loc_403A50
.text:00403A75
.text:00403A75 loc_403A75:                             ; CODE XREF: sub_403880+1CD↑j
.text:00403A75                 mov     ds:dword_41E260, edi
.text:00403A7B                 xor     ebx, ebx
.text:00403A7D                 mov     ds:dword_41E250, ebx
.text:00403A83
.text:00403A83 loc_403A83:                             ; CODE XREF: sub_403880+15D↑j
.text:00403A83                 mov     edi, ds:dword_41E2D0
.text:00403A89                 dec     edi
.text:00403A8A                 test    edi, edi
.text:00403A8C                 mov     ds:dword_41E2D0, edi
.text:00403A92                 jg      loc_4038A5
.text:00403A98
.text:00403A98 loc_403A98:                             ; CODE XREF: sub_403880+2DE↓j
.text:00403A98                                         ; sub_403880+383↓j
.text:00403A98                 add     esp, 0Ch
.text:00403A9B                 pop     ebx
.text:00403A9C                 pop     esi
.text:00403A9D                 pop     edi
.text:00403A9E                 pop     ebp
.text:00403A9F                 retn
.text:00403AA0 ; ---------------------------------------------------------------------------
.text:00403AA0
.text:00403AA0 loc_403AA0:                             ; CODE XREF: sub_403880+1DF↑j
.text:00403AA0                 mov     [esp+1Ch+var_1C], 20h ; ' ' ; Ch
.text:00403AA7                 mov     esi, ds:_iob
.text:00403AAD                 add     esi, 20h ; ' '
.text:00403AB0                 mov     [esp+1Ch+File], esi ; File
.text:00403AB4                 call    _flsbuf
.text:00403AB9                 jmp     short loc_403A70
.text:00403ABB ; ---------------------------------------------------------------------------
.text:00403ABB
.text:00403ABB loc_403ABB:                             ; CODE XREF: sub_403880+192↑j
.text:00403ABB                 movsx   edx, byte_41D02C
.text:00403AC2                 mov     ebx, ds:_iob
.text:00403AC8                 add     ebx, 20h ; ' '
.text:00403ACB                 mov     [esp+1Ch+File], ebx ; File
.text:00403ACF                 mov     [esp+1Ch+var_1C], edx ; Ch
.text:00403AD2                 call    _flsbuf
.text:00403AD7                 jmp     loc_403A2D
.text:00403ADC ; ---------------------------------------------------------------------------
.text:00403ADC
.text:00403ADC loc_403ADC:                             ; CODE XREF: sub_403880+126↑j
.text:00403ADC                 mov     ebx, ds:_iob
.text:00403AE2                 add     ebx, 20h ; ' '
.text:00403AE5                 mov     [esp+1Ch+File], ebx ; File
.text:00403AE9                 movsx   edi, byte ptr [ebp+0]
.text:00403AED                 inc     ebp
.text:00403AEE                 mov     [esp+1Ch+var_1C], edi ; Ch
.text:00403AF1                 call    _flsbuf
.text:00403AF6                 jmp     loc_4039BF
.text:00403AF6 ; ---------------------------------------------------------------------------
.text:00403AFB                 align 10h
.text:00403B00
.text:00403B00 loc_403B00:                             ; CODE XREF: sub_403880+EF↑j
.text:00403B00                 mov     [esp+1Ch+var_1C], 20h ; ' ' ; Ch
.text:00403B07                 mov     esi, ds:_iob
.text:00403B0D                 add     esi, 20h ; ' '
.text:00403B10                 mov     [esp+1Ch+File], esi ; File
.text:00403B14                 call    _flsbuf
.text:00403B19                 jmp     loc_403984
.text:00403B1E ; ---------------------------------------------------------------------------
.text:00403B1E
.text:00403B1E loc_403B1E:                             ; CODE XREF: sub_403880+8F↑j
.text:00403B1E                 movsx   edx, byte_41D02C
.text:00403B25                 mov     ebx, ds:_iob
.text:00403B2B                 add     ebx, 20h ; ' '
.text:00403B2E                 mov     [esp+1Ch+File], ebx ; File
.text:00403B32                 mov     [esp+1Ch+var_1C], edx ; Ch
.text:00403B35                 call    _flsbuf
.text:00403B3A                 jmp     loc_40392A
.text:00403B3F ; ---------------------------------------------------------------------------
.text:00403B3F
.text:00403B3F loc_403B3F:                             ; CODE XREF: sub_403880+44↑j
.text:00403B3F                 inc     edx
.text:00403B40                 inc     ebp
.text:00403B41                 mov     ds:dword_41E250, edx
.text:00403B47                 jmp     loc_4039CB
.text:00403B4C ; ---------------------------------------------------------------------------
.text:00403B4C
.text:00403B4C loc_403B4C:                             ; CODE XREF: sub_403880+2F↑j
.text:00403B4C                 mov     edx, ds:dword_41E250
.text:00403B52                 jmp     loc_4039DB
.text:00403B57 ; ---------------------------------------------------------------------------
.text:00403B57
.text:00403B57 loc_403B57:                             ; CODE XREF: sub_403880+1F↑j
.text:00403B57                 mov     eax, ds:dword_41E250
.text:00403B5C                 test    eax, eax
.text:00403B5E                 jle     loc_403A98
.text:00403B64                 mov     ebx, ds:dword_41E260
.text:00403B6A                 lea     edi, [eax+ebx]
.text:00403B6D                 dec     eax
.text:00403B6E                 jle     short loc_403BCB
.text:00403B70                 mov     ecx, dword_41D030
.text:00403B76                 mov     eax, ebx
.text:00403B78                 cdq
.text:00403B79                 idiv    ecx
.text:00403B7B                 sub     ecx, edx
.text:00403B7D                 lea     esi, [ecx+ebx]
.text:00403B80                 cmp     esi, edi
.text:00403B82                 jg      short loc_403BCB
.text:00403B84
.text:00403B84 loc_403B84:                             ; CODE XREF: sub_403880+349↓j
.text:00403B84                 mov     ebp, ds:_iob
.text:00403B8A                 mov     ebx, [ebp+24h]
.text:00403B8D                 dec     ebx
.text:00403B8E                 mov     [ebp+24h], ebx
.text:00403B91                 test    ebx, ebx
.text:00403B93                 js      loc_403C23
.text:00403B99                 movzx   ecx, byte_41D02C
.text:00403BA0                 mov     ebx, ds:_iob
.text:00403BA6                 mov     eax, [ebx+20h]
.text:00403BA9                 mov     [eax], cl
.text:00403BAB                 inc     dword ptr [ebx+20h]
.text:00403BAE
.text:00403BAE loc_403BAE:                             ; CODE XREF: sub_403880+3BF↓j
.text:00403BAE                 mov     ebx, esi
.text:00403BB0                 mov     esi, edi
.text:00403BB2                 sub     esi, ebx
.text:00403BB4                 dec     esi
.text:00403BB5                 jle     short loc_403BCB
.text:00403BB7                 mov     ecx, dword_41D030
.text:00403BBD                 mov     eax, ebx
.text:00403BBF                 cdq
.text:00403BC0                 idiv    ecx
.text:00403BC2                 sub     ecx, edx
.text:00403BC4                 lea     esi, [ecx+ebx]
.text:00403BC7                 cmp     esi, edi
.text:00403BC9                 jle     short loc_403B84
.text:00403BCB
.text:00403BCB loc_403BCB:                             ; CODE XREF: sub_403880+2EE↑j
.text:00403BCB                                         ; sub_403880+302↑j ...
.text:00403BCB                 inc     ebx
.text:00403BCC                 cmp     ebx, edi
.text:00403BCE                 jg      short loc_403BF5
.text:00403BD0
.text:00403BD0 loc_403BD0:                             ; CODE XREF: sub_403880+373↓j
.text:00403BD0                 mov     edx, ds:_iob
.text:00403BD6                 mov     ebp, [edx+24h]
.text:00403BD9                 dec     ebp
.text:00403BDA                 mov     [edx+24h], ebp
.text:00403BDD                 test    ebp, ebp
.text:00403BDF                 js      short loc_403C08
.text:00403BE1                 mov     esi, ds:_iob
.text:00403BE7                 mov     eax, [esi+20h]
.text:00403BEA                 mov     byte ptr [eax], 20h ; ' '
.text:00403BED                 inc     dword ptr [esi+20h]
.text:00403BF0
.text:00403BF0 loc_403BF0:                             ; CODE XREF: sub_403880+3A1↓j
.text:00403BF0                 inc     ebx
.text:00403BF1                 cmp     ebx, edi
.text:00403BF3                 jle     short loc_403BD0
.text:00403BF5
.text:00403BF5 loc_403BF5:                             ; CODE XREF: sub_403880+34E↑j
.text:00403BF5                 mov     ds:dword_41E260, edi
.text:00403BFB                 xor     edi, edi
.text:00403BFD                 mov     ds:dword_41E250, edi
.text:00403C03                 jmp     loc_403A98
.text:00403C08 ; ---------------------------------------------------------------------------
.text:00403C08
.text:00403C08 loc_403C08:                             ; CODE XREF: sub_403880+35F↑j
.text:00403C08                 mov     [esp+1Ch+var_1C], 20h ; ' ' ; Ch
.text:00403C0F                 mov     ecx, ds:_iob
.text:00403C15                 add     ecx, 20h ; ' '
.text:00403C18                 mov     [esp+1Ch+File], ecx ; File
.text:00403C1C                 call    _flsbuf
.text:00403C21                 jmp     short loc_403BF0
.text:00403C23 ; ---------------------------------------------------------------------------
.text:00403C23
.text:00403C23 loc_403C23:                             ; CODE XREF: sub_403880+313↑j
.text:00403C23                 movsx   edx, byte_41D02C
.text:00403C2A                 mov     ebp, ds:_iob
.text:00403C30                 add     ebp, 20h ; ' '
.text:00403C33                 mov     [esp+1Ch+File], ebp ; File
.text:00403C37                 mov     [esp+1Ch+var_1C], edx ; Ch
.text:00403C3A                 call    _flsbuf
.text:00403C3F                 jmp     loc_403BAE
.text:00403C3F sub_403880      endp
.text:00403C3F
.text:00403C3F ; ---------------------------------------------------------------------------
.text:00403C44                 align 20h
.text:00403C60 aStartingPageNu db 'starting page number %I64u exceeds page count %I64u',0
.text:00403C60                                         ; DATA XREF: sub_403CA0:loc_403E1A↓o
.text:00403C94                 align 10h
.text:00403CA0
.text:00403CA0 ; =============== S U B R O U T I N E =======================================
.text:00403CA0
.text:00403CA0
.text:00403CA0 sub_403CA0      proc near               ; CODE XREF: sub_402B00+4C↑p
.text:00403CA0
.text:00403CA0 Code            = dword ptr -4Ch
.text:00403CA0 ErrorMessage    = dword ptr -48h
.text:00403CA0 var_44          = dword ptr -44h
.text:00403CA0 var_40          = byte ptr -40h
.text:00403CA0 var_3C          = dword ptr -3Ch
.text:00403CA0 var_38          = dword ptr -38h
.text:00403CA0 var_34          = dword ptr -34h
.text:00403CA0 var_25          = byte ptr -25h
.text:00403CA0 var_24          = dword ptr -24h
.text:00403CA0 var_20          = dword ptr -20h
.text:00403CA0 var_1C          = byte ptr -1Ch
.text:00403CA0 var_18          = dword ptr -18h
.text:00403CA0 arg_0           = dword ptr  4
.text:00403CA0 arg_4           = dword ptr  8
.text:00403CA0
.text:00403CA0                 push    ebp
.text:00403CA1                 push    edi
.text:00403CA2                 push    esi
.text:00403CA3                 push    ebx
.text:00403CA4                 sub     esp, 3Ch
.text:00403CA7                 mov     ecx, [esp+4Ch+arg_4]
.text:00403CAB                 mov     [esp+4Ch+var_20], 0
.text:00403CB3                 mov     eax, [esp+4Ch+arg_0]
.text:00403CB7                 cmp     [esp+4Ch+var_20], ecx
.text:00403CBB                 mov     [esp+4Ch+var_18], ecx
.text:00403CBF                 mov     dword ptr [esp+4Ch+var_1C], eax
.text:00403CC3                 mov     [esp+4Ch+var_24], 1
.text:00403CCB                 jnb     loc_403EAE
.text:00403CD1
.text:00403CD1 loc_403CD1:                             ; CODE XREF: sub_403CA0+212↓j
.text:00403CD1                 mov     ebp, ds:dword_41E190
.text:00403CD7                 mov     ecx, dword_41D034
.text:00403CDD
.text:00403CDD loc_403CDD:                             ; CODE XREF: sub_403CA0+154↓j
.text:00403CDD                                         ; sub_403CA0+164↓j
.text:00403CDD                 mov     eax, ds:dword_41E230
.text:00403CE2                 mov     edi, 1
.text:00403CE7                 cmp     edi, eax
.text:00403CE9                 jge     short loc_403D23
.text:00403CEB                 nop
.text:00403CEC                 lea     esi, [esi+0]
.text:00403CF0
.text:00403CF0 loc_403CF0:                             ; CODE XREF: sub_403CA0+81↓j
.text:00403CF0                 mov     esi, 1
.text:00403CF5                 mov     ebx, ebp
.text:00403CF7                 cmp     esi, ecx
.text:00403CF9                 jg      short loc_403D1E
.text:00403CFB                 nop
.text:00403CFC                 lea     esi, [esi+0]
.text:00403D00
.text:00403D00 loc_403D00:                             ; CODE XREF: sub_403CA0+71↓j
.text:00403D00                 mov     eax, [ebx+8]
.text:00403D03                 test    eax, eax
.text:00403D05                 jz      loc_403E97
.text:00403D0B
.text:00403D0B loc_403D0B:                             ; CODE XREF: sub_403CA0+209↓j
.text:00403D0B                 inc     esi
.text:00403D0C                 add     ebx, 28h ; '('
.text:00403D0F                 cmp     esi, ecx
.text:00403D11                 jle     short loc_403D00
.text:00403D13                 mov     eax, ds:dword_41E230
.text:00403D18                 mov     ebp, ds:dword_41E190
.text:00403D1E
.text:00403D1E loc_403D1E:                             ; CODE XREF: sub_403CA0+59↑j
.text:00403D1E                 inc     edi
.text:00403D1F                 cmp     edi, eax
.text:00403D21                 jl      short loc_403CF0
.text:00403D23
.text:00403D23 loc_403D23:                             ; CODE XREF: sub_403CA0+49↑j
.text:00403D23                 mov     ds:byte_41E180, 1
.text:00403D2A                 mov     esi, 1
.text:00403D2F                 mov     ebx, ebp
.text:00403D31                 cmp     esi, ecx
.text:00403D33                 jg      short loc_403D59
.text:00403D35                 lea     esi, [esi+0]
.text:00403D39                 lea     edi, [edi+0]
.text:00403D40
.text:00403D40 loc_403D40:                             ; CODE XREF: sub_403CA0+B1↓j
.text:00403D40                 mov     edx, [ebx+8]
.text:00403D43                 test    edx, edx
.text:00403D45                 jz      loc_403E80
.text:00403D4B
.text:00403D4B loc_403D4B:                             ; CODE XREF: sub_403CA0+1F2↓j
.text:00403D4B                 inc     esi
.text:00403D4C                 add     ebx, 28h ; '('
.text:00403D4F                 cmp     esi, ecx
.text:00403D51                 jle     short loc_403D40
.text:00403D53                 mov     ebp, ds:dword_41E190
.text:00403D59
.text:00403D59 loc_403D59:                             ; CODE XREF: sub_403CA0+93↑j
.text:00403D59                 movzx   ebx, byte_41D011
.text:00403D60                 test    bl, bl
.text:00403D62                 mov     [esp+4Ch+var_25], bl
.text:00403D66                 jz      short loc_403D83
.text:00403D68                 test    ecx, ecx
.text:00403D6A                 mov     ebx, ebp
.text:00403D6C                 jle     short loc_403D83
.text:00403D6E                 mov     esi, ecx
.text:00403D70
.text:00403D70 loc_403D70:                             ; CODE XREF: sub_403CA0+E1↓j
.text:00403D70                 cmp     dword ptr [ebx+8], 3
.text:00403D74                 jz      short loc_403D7D
.text:00403D76                 mov     dword ptr [ebx+8], 2
.text:00403D7D
.text:00403D7D loc_403D7D:                             ; CODE XREF: sub_403CA0+D4↑j
.text:00403D7D                 add     ebx, 28h ; '('
.text:00403D80                 dec     esi
.text:00403D81                 jnz     short loc_403D70
.text:00403D83
.text:00403D83 loc_403D83:                             ; CODE XREF: sub_403CA0+C6↑j
.text:00403D83                                         ; sub_403CA0+CC↑j
.text:00403D83                 test    ecx, ecx
.text:00403D85                 mov     edx, ecx
.text:00403D87                 mov     eax, ebp
.text:00403D89                 jz      short loc_403DB6
.text:00403D8B                 mov     ebx, ds:dword_41E0F0
.text:00403D91                 jmp     short loc_403DA0
.text:00403D91 ; ---------------------------------------------------------------------------
.text:00403D93                 align 10h
.text:00403DA0
.text:00403DA0 loc_403DA0:                             ; CODE XREF: sub_403CA0+F1↑j
.text:00403DA0                                         ; sub_403CA0+10E↓j
.text:00403DA0                 cmp     dword ptr [eax+8], 2
.text:00403DA4                 jz      loc_403E73
.text:00403DAA
.text:00403DAA loc_403DAA:                             ; CODE XREF: sub_403CA0+1DB↓j
.text:00403DAA                 add     eax, 28h ; '('
.text:00403DAD                 dec     edx
.text:00403DAE                 jnz     short loc_403DA0
.text:00403DB0                 mov     ds:dword_41E0F0, ebx
.text:00403DB6
.text:00403DB6 loc_403DB6:                             ; CODE XREF: sub_403CA0+E9↑j
.text:00403DB6                 cmp     [esp+4Ch+var_25], 0
.text:00403DBB                 jz      short loc_403DD2
.text:00403DBD                 cmp     dword ptr [ebp+8], 3
.text:00403DC1                 jz      loc_403E66
.text:00403DC7                 mov     edi, 1
.text:00403DCC                 mov     ds:dword_41E0F0, edi
.text:00403DD2
.text:00403DD2 loc_403DD2:                             ; CODE XREF: sub_403CA0+11B↑j
.text:00403DD2                                         ; sub_403CA0+1CE↓j
.text:00403DD2                 mov     ds:byte_41E180, 0
.text:00403DD9                 mov     eax, ds:dword_41E0F0
.text:00403DDE                 test    eax, eax
.text:00403DE0                 jle     short loc_403E1A
.text:00403DE2                 add     [esp+4Ch+var_24], 1
.text:00403DE7                 mov     edi, [esp+4Ch+var_18]
.text:00403DEB                 adc     [esp+4Ch+var_20], 0
.text:00403DF0                 cmp     [esp+4Ch+var_20], edi
.text:00403DF4                 jb      loc_403CDD
.text:00403DFA                 ja      short loc_403E0A
.text:00403DFC                 mov     ebx, dword ptr [esp+4Ch+var_1C]
.text:00403E00                 cmp     [esp+4Ch+var_24], ebx
.text:00403E04                 jb      loc_403CDD
.text:00403E0A
.text:00403E0A loc_403E0A:                             ; CODE XREF: sub_403CA0+15A↑j
.text:00403E0A                                         ; sub_403CA0+1C4↓j
.text:00403E0A                 test    eax, eax
.text:00403E0C                 setnle  dl
.text:00403E0F                 add     esp, 3Ch
.text:00403E12                 pop     ebx
.text:00403E13                 movzx   eax, dl
.text:00403E16                 pop     esi
.text:00403E17                 pop     edi
.text:00403E18                 pop     ebp
.text:00403E19                 retn
.text:00403E1A ; ---------------------------------------------------------------------------
.text:00403E1A
.text:00403E1A loc_403E1A:                             ; CODE XREF: sub_403CA0+140↑j
.text:00403E1A                 mov     [esp+4Ch+Code], offset aStartingPageNu ; "starting page number %I64u exceeds page"...
.text:00403E21                 call    ds:libintl_gettext
.text:00403E27                 mov     [esp+4Ch+ErrorMessage], 0 ; ErrorMessage
.text:00403E2F                 mov     esi, [esp+4Ch+var_24]
.text:00403E33                 mov     ebx, [esp+4Ch+var_20]
.text:00403E37                 mov     [esp+4Ch+Code], 0 ; Code
.text:00403E3E                 mov     ecx, dword ptr [esp+4Ch+var_1C]
.text:00403E42                 mov     ebp, [esp+4Ch+var_18]
.text:00403E46                 mov     [esp+4Ch+var_38], esi
.text:00403E4A                 mov     [esp+4Ch+var_34], ebx
.text:00403E4E                 mov     dword ptr [esp+4Ch+var_40], ecx ; char
.text:00403E52                 mov     [esp+4Ch+var_3C], ebp
.text:00403E56                 mov     [esp+4Ch+var_44], eax ; char *
.text:00403E5A                 call    sub_40A7B0
.text:00403E5F
.text:00403E5F loc_403E5F:                             ; CODE XREF: sub_403CA0+218↓j
.text:00403E5F                 mov     eax, ds:dword_41E0F0
.text:00403E64                 jmp     short loc_403E0A
.text:00403E66 ; ---------------------------------------------------------------------------
.text:00403E66
.text:00403E66 loc_403E66:                             ; CODE XREF: sub_403CA0+121↑j
.text:00403E66                 xor     esi, esi
.text:00403E68                 mov     ds:dword_41E0F0, esi
.text:00403E6E                 jmp     loc_403DD2
.text:00403E73 ; ---------------------------------------------------------------------------
.text:00403E73
.text:00403E73 loc_403E73:                             ; CODE XREF: sub_403CA0+104↑j
.text:00403E73                 mov     dword ptr [eax+8], 0
.text:00403E7A                 inc     ebx
.text:00403E7B                 jmp     loc_403DAA
.text:00403E80 ; ---------------------------------------------------------------------------
.text:00403E80
.text:00403E80 loc_403E80:                             ; CODE XREF: sub_403CA0+A5↑j
.text:00403E80                 mov     [esp+4Ch+ErrorMessage], esi
.text:00403E84                 mov     [esp+4Ch+Code], ebx
.text:00403E87                 call    sub_4069D0
.text:00403E8C                 mov     ecx, dword_41D034
.text:00403E92                 jmp     loc_403D4B
.text:00403E97 ; ---------------------------------------------------------------------------
.text:00403E97
.text:00403E97 loc_403E97:                             ; CODE XREF: sub_403CA0+65↑j
.text:00403E97                 mov     [esp+4Ch+ErrorMessage], esi
.text:00403E9B                 mov     [esp+4Ch+Code], ebx
.text:00403E9E                 call    sub_4069D0
.text:00403EA3                 mov     ecx, dword_41D034
.text:00403EA9                 jmp     loc_403D0B
.text:00403EAE ; ---------------------------------------------------------------------------
.text:00403EAE
.text:00403EAE loc_403EAE:                             ; CODE XREF: sub_403CA0+2B↑j
.text:00403EAE                 cmp     [esp+4Ch+var_24], eax
.text:00403EB2                 jb      loc_403CD1
.text:00403EB8                 jmp     short loc_403E5F
.text:00403EB8 sub_403CA0      endp
.text:00403EB8
.text:00403EB8 ; ---------------------------------------------------------------------------
.text:00403EBA aPageI64u       db 'Page %I64u',0       ; DATA XREF: sub_403EF0:loc_404096↓o
.text:00403EBA                                         ; sub_403EF0:loc_4045A9↓o ...
.text:00403EC5 ; const char aSSSSS[]
.text:00403EC5 aSSSSS          db '%s%*s%s%*s%s',0Ah   ; DATA XREF: sub_403EF0+229↓o
.text:00403EC5                                         ; sub_403EF0+757↓o ...
.text:00403EC5                 db 0Ah
.text:00403EC5                 db 0Ah,0
.text:00403ED5 aPageNumberOver db 'Page number overflow',0
.text:00403ED5                                         ; DATA XREF: sub_403EF0:loc_4043E9↓o
.text:00403ED5                                         ; sub_403EF0:loc_40469E↓o ...
.text:00403EEA ; const char asc_403EEA[]
.text:00403EEA asc_403EEA      db 0Ah,0                ; DATA XREF: sub_403EF0:loc_404452↓o
.text:00403EEA                                         ; sub_403EF0:loc_404707↓o ...
.text:00403EEC                 align 10h
.text:00403EF0
.text:00403EF0 ; =============== S U B R O U T I N E =======================================
.text:00403EF0
.text:00403EF0
.text:00403EF0 sub_403EF0      proc near               ; CODE XREF: sub_403330+10E↑p
.text:00403EF0                                         ; DATA XREF: sub_4067D0+129↓o ...
.text:00403EF0
.text:00403EF0 Buffer          = dword ptr -28Ch
.text:00403EF0 Format          = dword ptr -288h
.text:00403EF0 var_284         = dword ptr -284h
.text:00403EF0 var_280         = dword ptr -280h
.text:00403EF0 var_27C         = dword ptr -27Ch
.text:00403EF0 var_278         = dword ptr -278h
.text:00403EF0 var_274         = dword ptr -274h
.text:00403EF0 var_270         = dword ptr -270h
.text:00403EF0 var_264         = dword ptr -264h
.text:00403EF0 var_260         = dword ptr -260h
.text:00403EF0 var_25C         = byte ptr -25Ch
.text:00403EF0 var_13C         = byte ptr -13Ch
.text:00403EF0 arg_0           = dword ptr  4
.text:00403EF0
.text:00403EF0                 push    ebp
.text:00403EF1                 push    edi
.text:00403EF2                 push    esi
.text:00403EF3                 push    ebx
.text:00403EF4                 sub     esp, 27Ch
.text:00403EFA                 mov     edi, [esp+28Ch+arg_0]
.text:00403F01                 mov     edx, [edi]
.text:00403F03                 mov     ecx, [edx+4]
.text:00403F06                 dec     ecx
.text:00403F07                 mov     [edx+4], ecx
.text:00403F0A                 test    ecx, ecx
.text:00403F0C                 js      loc_40479F
.text:00403F12                 mov     ecx, [edx]
.text:00403F14                 movzx   esi, byte ptr [ecx]
.text:00403F17                 inc     ecx
.text:00403F18                 mov     [edx], ecx
.text:00403F1A
.text:00403F1A loc_403F1A:                             ; CODE XREF: sub_403EF0+8B9↓j
.text:00403F1A                 cmp     esi, 0Ch
.text:00403F1D                 mov     ebx, ds:dword_41E270
.text:00403F23                 jz      loc_404740
.text:00403F29
.text:00403F29 loc_403F29:                             ; CODE XREF: sub_403EF0+854↓j
.text:00403F29                                         ; sub_403EF0+873↓j ...
.text:00403F29                 mov     byte ptr [edi+25h], 0
.text:00403F2D                 cmp     esi, 0Ah
.text:00403F30                 jz      short loc_403F55
.text:00403F32                 cmp     esi, 0Ah
.text:00403F35                 jg      loc_404463
.text:00403F3B                 cmp     esi, 0FFFFFFFFh
.text:00403F3E                 jz      loc_4042F8
.text:00403F44
.text:00403F44 loc_403F44:                             ; CODE XREF: sub_403EF0+576↓j
.text:00403F44                 mov     eax, esi
.text:00403F46                 movsx   ecx, al
.text:00403F49                 mov     [esp+28Ch+Buffer], ecx
.text:00403F4C                 call    sub_404D00
.text:00403F51                 mov     [esp+28Ch+var_260], eax
.text:00403F55
.text:00403F55 loc_403F55:                             ; CODE XREF: sub_403EF0+40↑j
.text:00403F55                 cmp     ds:byte_41E080, 0
.text:00403F5C                 jz      short loc_403F70
.text:00403F5E                 mov     ebp, ds:dword_41E240
.text:00403F64                 cmp     ds:dword_41E270, ebp
.text:00403F6A                 jg      loc_4042E5
.text:00403F70
.text:00403F70 loc_403F70:                             ; CODE XREF: sub_403EF0+6C↑j
.text:00403F70                 cmp     dword ptr [edi+10h], offset sub_406970
.text:00403F77                 jz      loc_40421A
.text:00403F7D                 cmp     byte_41D011, 0
.text:00403F84                 mov     ds:byte_41E2F0, 1
.text:00403F8B                 jnz     loc_404149
.text:00403F91                 cmp     ds:byte_41E220, 0
.text:00403F98                 jz      loc_404149
.text:00403F9E                 cmp     ds:byte_41E040, 0
.text:00403FA5                 jz      loc_404452
.text:00403FAB
.text:00403FAB loc_403FAB:                             ; CODE XREF: sub_403EF0+56E↓j
.text:00403FAB                 mov     edx, ds:dword_41E0C0
.text:00403FB1                 xor     ebx, ebx
.text:00403FB3                 mov     ds:dword_41E260, ebx
.text:00403FB9                 mov     [esp+28Ch+Buffer], edx
.text:00403FBC                 call    sub_403670
.text:00403FC1                 mov     ebx, ds:dword_41E260
.text:00403FC7                 mov     ecx, ds:dword_41E250
.text:00403FCD                 add     ecx, ebx
.text:00403FCF                 cmp     ds:dword_41E250, 1
.text:00403FD6                 mov     [esp+28Ch+var_264], ecx
.text:00403FDA                 jle     short loc_40403C
.text:00403FDC                 mov     ebp, dword_41D030
.text:00403FE2                 mov     eax, ebx
.text:00403FE4                 cdq
.text:00403FE5                 idiv    ebp
.text:00403FE7                 sub     ebp, edx
.text:00403FE9                 lea     ebp, [ebp+ebx+0]
.text:00403FED                 cmp     ebp, ecx
.text:00403FEF                 jg      short loc_40403C
.text:00403FF1
.text:00403FF1 loc_403FF1:                             ; CODE XREF: sub_403EF0+14A↓j
.text:00403FF1                 mov     edx, ds:_iob
.text:00403FF7                 mov     ecx, [edx+24h]
.text:00403FFA                 dec     ecx
.text:00403FFB                 mov     [edx+24h], ecx
.text:00403FFE                 test    ecx, ecx
.text:00404000                 js      loc_404431
.text:00404006                 movzx   ecx, byte_41D02C
.text:0040400D                 mov     ebx, ds:_iob
.text:00404013                 mov     eax, [ebx+20h]
.text:00404016                 mov     [eax], cl
.text:00404018                 inc     dword ptr [ebx+20h]
.text:0040401B
.text:0040401B loc_40401B:                             ; CODE XREF: sub_403EF0+55D↓j
.text:0040401B                 mov     ebx, ebp
.text:0040401D                 mov     ebp, [esp+28Ch+var_264]
.text:00404021                 sub     ebp, ebx
.text:00404023                 dec     ebp
.text:00404024                 jle     short loc_40403C
.text:00404026                 mov     ecx, dword_41D030
.text:0040402C                 mov     eax, ebx
.text:0040402E                 cdq
.text:0040402F                 idiv    ecx
.text:00404031                 sub     ecx, edx
.text:00404033                 lea     ebp, [ecx+ebx]
.text:00404036                 cmp     ebp, [esp+28Ch+var_264]
.text:0040403A                 jle     short loc_403FF1
.text:0040403C
.text:0040403C loc_40403C:                             ; CODE XREF: sub_403EF0+EA↑j
.text:0040403C                                         ; sub_403EF0+FF↑j ...
.text:0040403C                 inc     ebx
.text:0040403D                 cmp     ebx, [esp+28Ch+var_264]
.text:00404041                 jg      short loc_40406E
.text:00404043
.text:00404043 loc_404043:                             ; CODE XREF: sub_403EF0+17C↓j
.text:00404043                 mov     edx, ds:_iob
.text:00404049                 mov     ebp, [edx+24h]
.text:0040404C                 dec     ebp
.text:0040404D                 mov     [edx+24h], ebp
.text:00404050                 test    ebp, ebp
.text:00404052                 js      loc_404413
.text:00404058                 mov     ecx, ds:_iob
.text:0040405E                 mov     eax, [ecx+20h]
.text:00404061                 mov     byte ptr [eax], 20h ; ' '
.text:00404064                 inc     dword ptr [ecx+20h]
.text:00404067
.text:00404067 loc_404067:                             ; CODE XREF: sub_403EF0+53C↓j
.text:00404067                 inc     ebx
.text:00404068                 cmp     ebx, [esp+28Ch+var_264]
.text:0040406C                 jle     short loc_404043
.text:0040406E
.text:0040406E loc_40406E:                             ; CODE XREF: sub_403EF0+151↑j
.text:0040406E                 mov     ecx, ds:dword_41E284
.text:00404074                 xor     edx, edx
.text:00404076                 mov     ebx, ds:dword_41E280
.text:0040407C                 mov     ds:dword_41E250, edx
.text:00404082                 mov     ebp, [esp+28Ch+var_264]
.text:00404086                 mov     eax, ecx
.text:00404088                 or      eax, ebx
.text:0040408A                 mov     ds:dword_41E260, ebp
.text:00404090                 jz      loc_4043E9
.text:00404096
.text:00404096 loc_404096:                             ; CODE XREF: sub_403EF0+51E↓j
.text:00404096                 mov     [esp+28Ch+Buffer], offset aPageI64u ; "Page %I64u"
.text:0040409D                 call    ds:libintl_gettext
.text:004040A3                 mov     ebp, ds:dword_41E280
.text:004040A9                 mov     ebx, ds:dword_41E284
.text:004040AF                 mov     [esp+28Ch+var_284], ebp
.text:004040B3                 add     ebp, 1
.text:004040B6                 mov     [esp+28Ch+var_280], ebx
.text:004040BA                 adc     ebx, 0
.text:004040BD                 mov     ds:dword_41E284, ebx
.text:004040C3                 lea     ebx, [esp+28Ch+var_25C]
.text:004040C7                 mov     ds:dword_41E280, ebp
.text:004040CD                 mov     [esp+28Ch+Buffer], ebx ; Buffer
.text:004040D0                 mov     [esp+28Ch+Format], eax ; Format
.text:004040D4                 call    sprintf
.text:004040D9                 mov     [esp+28Ch+Buffer], ebx ; char *
.text:004040DC                 mov     [esp+28Ch+Format], 0 ; char
.text:004040E4                 call    sub_407120
.text:004040E9                 mov     [esp+28Ch+var_270], ebx
.text:004040ED                 mov     ecx, ds:dword_41E340
.text:004040F3                 mov     ebx, ds:Block
.text:004040F9                 mov     [esp+28Ch+var_274], offset byte_401281
.text:00404101                 sub     ecx, eax
.text:00404103                 mov     edx, ecx
.text:00404105                 mov     [esp+28Ch+var_280], offset byte_401281
.text:0040410D                 shr     edx, 1Fh
.text:00404110                 dec     edx
.text:00404111                 mov     [esp+28Ch+Format], ebx
.text:00404115                 and     ecx, edx
.text:00404117                 mov     ebp, ecx
.text:00404119                 mov     [esp+28Ch+Buffer], offset aSSSSS ; "%s%*s%s%*s%s\n\n\n"
.text:00404120                 sar     ebp, 1
.text:00404122                 sub     ecx, ebp
.text:00404124                 mov     [esp+28Ch+var_278], ecx
.text:00404128                 mov     ecx, ds:dword_41E330
.text:0040412E                 mov     [esp+28Ch+var_284], ebp
.text:00404132                 mov     [esp+28Ch+var_27C], ecx
.text:00404136                 call    printf
.text:0040413B                 mov     ds:byte_41E220, 0
.text:00404142                 xor     eax, eax
.text:00404144                 mov     ds:dword_41E260, eax
.text:00404149
.text:00404149 loc_404149:                             ; CODE XREF: sub_403EF0+9B↑j
.text:00404149                                         ; sub_403EF0+A8↑j
.text:00404149                 cmp     ds:byte_41E1F0, 0
.text:00404150                 jz      loc_4041EC
.text:00404156                 cmp     ds:byte_41E000, 0
.text:0040415D                 jz      loc_4041EC
.text:00404163                 mov     eax, ds:dword_41E2D0
.text:00404168                 xor     edx, edx
.text:0040416A                 mov     ebx, ds:dword_41E190
.text:00404170                 mov     ds:dword_41E2D0, edx
.text:00404176                 test    eax, eax
.text:00404178                 jle     short loc_4041C3
.text:0040417A                 mov     ebp, eax
.text:0040417C
.text:0040417C loc_40417C:                             ; CODE XREF: sub_403EF0+2D1↓j
.text:0040417C                 mov     eax, [ebx+20h]
.text:0040417F                 mov     ecx, ds:dword_41E170
.text:00404185                 mov     ds:dword_41E2E0, eax
.text:0040418A                 sub     eax, ecx
.text:0040418C                 test    eax, eax
.text:0040418E                 jle     short loc_4041A0
.text:00404190                 mov     [esp+28Ch+Buffer], eax
.text:00404193                 call    sub_403670
.text:00404198                 xor     edx, edx
.text:0040419A                 mov     ds:dword_41E2E0, edx
.text:004041A0
.text:004041A0 loc_4041A0:                             ; CODE XREF: sub_403EF0+29E↑j
.text:004041A0                 cmp     ds:byte_41E160, 0
.text:004041A7                 jnz     loc_4043DF
.text:004041AD
.text:004041AD loc_4041AD:                             ; CODE XREF: sub_403EF0+4F4↓j
.text:004041AD                 cmp     byte ptr [ebx+24h], 0
.text:004041B1                 jnz     loc_4043D2
.text:004041B7
.text:004041B7 loc_4041B7:                             ; CODE XREF: sub_403EF0+4EA↓j
.text:004041B7                 inc     ds:dword_41E2D0
.text:004041BD                 add     ebx, 28h ; '('
.text:004041C0                 dec     ebp
.text:004041C1                 jnz     short loc_40417C
.text:004041C3
.text:004041C3 loc_4041C3:                             ; CODE XREF: sub_403EF0+288↑j
.text:004041C3                 cmp     ds:byte_41E080, 0
.text:004041CA                 mov     ebx, [edi+20h]
.text:004041CD                 mov     ds:dword_41E2E0, ebx
.text:004041D3                 jz      loc_4043C6
.text:004041D9                 mov     ebp, ds:dword_41E240
.text:004041DF                 mov     ds:dword_41E250, ebp
.text:004041E5
.text:004041E5 loc_4041E5:                             ; CODE XREF: sub_403EF0+4DD↓j
.text:004041E5                 mov     ds:byte_41E1F0, 0
.text:004041EC
.text:004041EC loc_4041EC:                             ; CODE XREF: sub_403EF0+260↑j
.text:004041EC                                         ; sub_403EF0+26D↑j
.text:004041EC                 mov     eax, ds:dword_41E2E0
.text:004041F1                 mov     ecx, ds:dword_41E170
.text:004041F7                 sub     eax, ecx
.text:004041F9                 test    eax, eax
.text:004041FB                 jle     short loc_40420D
.text:004041FD                 mov     [esp+28Ch+Buffer], eax
.text:00404200                 call    sub_403670
.text:00404205                 xor     edx, edx
.text:00404207                 mov     ds:dword_41E2E0, edx
.text:0040420D
.text:0040420D loc_40420D:                             ; CODE XREF: sub_403EF0+30B↑j
.text:0040420D                 cmp     ds:byte_41E160, 0
.text:00404214                 jnz     loc_4043BC
.text:0040421A
.text:0040421A loc_40421A:                             ; CODE XREF: sub_403EF0+87↑j
.text:0040421A                                         ; sub_403EF0+4D1↓j
.text:0040421A                 cmp     byte ptr [edi+24h], 0
.text:0040421E                 jnz     loc_4043AF
.text:00404224
.text:00404224 loc_404224:                             ; CODE XREF: sub_403EF0+4C7↓j
.text:00404224                 mov     ds:byte_41E200, 0
.text:0040422B                 cmp     esi, 0Ah
.text:0040422E                 mov     eax, 1
.text:00404233                 jz      loc_4042ED
.text:00404239                 mov     ebx, [esp+28Ch+var_260]
.text:0040423D                 mov     esi, ds:dword_41E350
.text:00404243                 dec     ebx
.text:00404244                 cmp     ebx, 0FFFFFFFFh
.text:00404247                 jz      short loc_404260
.text:00404249
.text:00404249 loc_404249:                             ; CODE XREF: sub_403EF0+367↓j
.text:00404249                 movsx   ebp, byte ptr [esi]
.text:0040424C                 dec     ebx
.text:0040424D                 inc     esi
.text:0040424E                 mov     [esp+28Ch+Buffer], ebp
.text:00404251                 call    dword ptr [edi+10h]
.text:00404254                 cmp     ebx, 0FFFFFFFFh
.text:00404257                 jnz     short loc_404249
.text:00404259                 lea     esi, [esi+0]
.text:00404260
.text:00404260 loc_404260:                             ; CODE XREF: sub_403EF0+357↑j
.text:00404260                                         ; sub_403EF0+3DD↓j ...
.text:00404260                 mov     edx, [edi]
.text:00404262                 mov     esi, [edx+4]
.text:00404265                 dec     esi
.text:00404266                 mov     [edx+4], esi
.text:00404269                 test    esi, esi
.text:0040426B                 js      loc_4043A0
.text:00404271                 mov     ebx, [edx]
.text:00404273                 movzx   esi, byte ptr [ebx]
.text:00404276                 inc     ebx
.text:00404277                 mov     [edx], ebx
.text:00404279
.text:00404279 loc_404279:                             ; CODE XREF: sub_403EF0+4BA↓j
.text:00404279                 cmp     esi, 0Ah
.text:0040427C                 mov     eax, 1
.text:00404281                 jz      short loc_4042ED
.text:00404283                 cmp     esi, 0Ah
.text:00404286                 jg      loc_404307
.text:0040428C                 cmp     esi, 0FFFFFFFFh
.text:0040428F                 jz      short loc_4042F8
.text:00404291
.text:00404291 loc_404291:                             ; CODE XREF: sub_403EF0+41A↓j
.text:00404291                 mov     eax, esi
.text:00404293                 mov     ebx, ds:dword_41E270
.text:00404299                 movsx   esi, al
.text:0040429C                 mov     [esp+28Ch+Buffer], esi
.text:0040429F                 call    sub_404D00
.text:004042A4                 cmp     ds:byte_41E080, 0
.text:004042AB                 mov     [esp+28Ch+var_260], eax
.text:004042AF                 jz      short loc_4042BF
.text:004042B1                 mov     ecx, ds:dword_41E240
.text:004042B7                 cmp     ds:dword_41E270, ecx
.text:004042BD                 jg      short loc_4042E5
.text:004042BF
.text:004042BF loc_4042BF:                             ; CODE XREF: sub_403EF0+3BF↑j
.text:004042BF                 mov     ebx, [esp+28Ch+var_260]
.text:004042C3                 mov     esi, ds:dword_41E350
.text:004042C9                 dec     ebx
.text:004042CA                 cmp     ebx, 0FFFFFFFFh
.text:004042CD                 jz      short loc_404260
.text:004042CF                 nop
.text:004042D0
.text:004042D0 loc_4042D0:                             ; CODE XREF: sub_403EF0+3EE↓j
.text:004042D0                 movsx   ebp, byte ptr [esi]
.text:004042D3                 dec     ebx
.text:004042D4                 inc     esi
.text:004042D5                 mov     [esp+28Ch+Buffer], ebp
.text:004042D8                 call    dword ptr [edi+10h]
.text:004042DB                 cmp     ebx, 0FFFFFFFFh
.text:004042DE                 jnz     short loc_4042D0
.text:004042E0                 jmp     loc_404260
.text:004042E5 ; ---------------------------------------------------------------------------
.text:004042E5
.text:004042E5 loc_4042E5:                             ; CODE XREF: sub_403EF0+7A↑j
.text:004042E5                                         ; sub_403EF0+3CD↑j
.text:004042E5                 mov     ds:dword_41E270, ebx
.text:004042EB                 xor     eax, eax
.text:004042ED
.text:004042ED loc_4042ED:                             ; CODE XREF: sub_403EF0+343↑j
.text:004042ED                                         ; sub_403EF0+391↑j ...
.text:004042ED                 add     esp, 27Ch
.text:004042F3                 pop     ebx
.text:004042F4                 pop     esi
.text:004042F5                 pop     edi
.text:004042F6                 pop     ebp
.text:004042F7                 retn
.text:004042F8 ; ---------------------------------------------------------------------------
.text:004042F8
.text:004042F8 loc_4042F8:                             ; CODE XREF: sub_403EF0+4E↑j
.text:004042F8                                         ; sub_403EF0+39F↑j
.text:004042F8                 mov     [esp+28Ch+Buffer], edi
.text:004042FB                 call    sub_406DB0
.text:00404300
.text:00404300 loc_404300:                             ; CODE XREF: sub_403EF0+493↓j
.text:00404300                 mov     eax, 1
.text:00404305                 jmp     short loc_4042ED
.text:00404307 ; ---------------------------------------------------------------------------
.text:00404307
.text:00404307 loc_404307:                             ; CODE XREF: sub_403EF0+396↑j
.text:00404307                 cmp     esi, 0Ch
.text:0040430A                 jnz     short loc_404291
.text:0040430C                 mov     edx, [edi]
.text:0040430E                 mov     ecx, [edx+4]
.text:00404311                 dec     ecx
.text:00404312                 mov     [edx+4], ecx
.text:00404315                 test    ecx, ecx
.text:00404317                 js      short loc_404391
.text:00404319                 mov     ebp, [edx]
.text:0040431B                 movzx   esi, byte ptr [ebp+0]
.text:0040431F                 inc     ebp
.text:00404320                 mov     [edx], ebp
.text:00404322
.text:00404322 loc_404322:                             ; CODE XREF: sub_403EF0+4AB↓j
.text:00404322                 cmp     esi, 0Ah
.text:00404325                 jz      short loc_404335
.text:00404327                 mov     edx, [edi]
.text:00404329                 mov     [esp+28Ch+Buffer], esi ; Character
.text:0040432C                 mov     [esp+28Ch+Format], edx ; Stream
.text:00404330                 call    ungetc
.text:00404335
.text:00404335 loc_404335:                             ; CODE XREF: sub_403EF0+435↑j
.text:00404335                 cmp     ds:byte_41E020, 0
.text:0040433C                 jz      short loc_404345
.text:0040433E                 mov     ds:byte_41E030, 1
.text:00404345
.text:00404345 loc_404345:                             ; CODE XREF: sub_403EF0+44C↑j
.text:00404345                 cmp     ds:byte_41E000, 0
.text:0040434C                 jnz     short loc_404388
.text:0040434E                 mov     edx, dword_41D034
.text:00404354                 mov     ecx, ds:dword_41E190
.text:0040435A                 test    edx, edx
.text:0040435C                 jz      short loc_404376
.text:0040435E                 movzx   ebx, byte_41D011
.text:00404365
.text:00404365 loc_404365:                             ; CODE XREF: sub_403EF0+484↓j
.text:00404365                 xor     eax, eax
.text:00404367                 test    bl, bl
.text:00404369                 setz    al
.text:0040436C                 inc     eax
.text:0040436D                 mov     [ecx+8], eax
.text:00404370                 add     ecx, 28h ; '('
.text:00404373                 dec     edx
.text:00404374                 jnz     short loc_404365
.text:00404376
.text:00404376 loc_404376:                             ; CODE XREF: sub_403EF0+46C↑j
.text:00404376                                         ; sub_403EF0+49F↓j ...
.text:00404376                 mov     dword ptr [edi+1Ch], 0
.text:0040437D                 dec     ds:dword_41E0F0
.text:00404383                 jmp     loc_404300
.text:00404388 ; ---------------------------------------------------------------------------
.text:00404388
.text:00404388 loc_404388:                             ; CODE XREF: sub_403EF0+45C↑j
.text:00404388                                         ; sub_403EF0+777↓j
.text:00404388                 mov     dword ptr [edi+8], 2
.text:0040438F                 jmp     short loc_404376
.text:00404391 ; ---------------------------------------------------------------------------
.text:00404391
.text:00404391 loc_404391:                             ; CODE XREF: sub_403EF0+427↑j
.text:00404391                 mov     [esp+28Ch+Buffer], edx ; File
.text:00404394                 call    _filbuf
.text:00404399                 mov     esi, eax
.text:0040439B                 jmp     short loc_404322
.text:0040439B ; ---------------------------------------------------------------------------
.text:0040439D                 align 10h
.text:004043A0
.text:004043A0 loc_4043A0:                             ; CODE XREF: sub_403EF0+37B↑j
.text:004043A0                 mov     [esp+28Ch+Buffer], edx ; File
.text:004043A3                 call    _filbuf
.text:004043A8                 mov     esi, eax
.text:004043AA                 jmp     loc_404279
.text:004043AF ; ---------------------------------------------------------------------------
.text:004043AF
.text:004043AF loc_4043AF:                             ; CODE XREF: sub_403EF0+32E↑j
.text:004043AF                 mov     [esp+28Ch+Buffer], edi
.text:004043B2                 call    sub_403530
.text:004043B7                 jmp     loc_404224
.text:004043BC ; ---------------------------------------------------------------------------
.text:004043BC
.text:004043BC loc_4043BC:                             ; CODE XREF: sub_403EF0+324↑j
.text:004043BC                 call    sub_403880
.text:004043C1                 jmp     loc_40421A
.text:004043C6 ; ---------------------------------------------------------------------------
.text:004043C6
.text:004043C6 loc_4043C6:                             ; CODE XREF: sub_403EF0+2E3↑j
.text:004043C6                 xor     eax, eax
.text:004043C8                 mov     ds:dword_41E250, eax
.text:004043CD                 jmp     loc_4041E5
.text:004043D2 ; ---------------------------------------------------------------------------
.text:004043D2
.text:004043D2 loc_4043D2:                             ; CODE XREF: sub_403EF0+2C1↑j
.text:004043D2                 mov     [esp+28Ch+Buffer], ebx
.text:004043D5                 call    sub_403530
.text:004043DA                 jmp     loc_4041B7
.text:004043DF ; ---------------------------------------------------------------------------
.text:004043DF
.text:004043DF loc_4043DF:                             ; CODE XREF: sub_403EF0+2B7↑j
.text:004043DF                 call    sub_403880
.text:004043E4                 jmp     loc_4041AD
.text:004043E9 ; ---------------------------------------------------------------------------
.text:004043E9
.text:004043E9 loc_4043E9:                             ; CODE XREF: sub_403EF0+1A0↑j
.text:004043E9                 mov     [esp+28Ch+Buffer], offset aPageNumberOver ; "Page number overflow"
.text:004043F0                 call    ds:libintl_gettext
.text:004043F6                 mov     [esp+28Ch+Format], 0 ; ErrorMessage
.text:004043FE                 mov     [esp+28Ch+Buffer], 1 ; Code
.text:00404405                 mov     [esp+28Ch+var_284], eax ; char *
.text:00404409                 call    sub_40A7B0
.text:0040440E                 jmp     loc_404096
.text:00404413 ; ---------------------------------------------------------------------------
.text:00404413
.text:00404413 loc_404413:                             ; CODE XREF: sub_403EF0+162↑j
.text:00404413                 mov     [esp+28Ch+Buffer], 20h ; ' ' ; Ch
.text:0040441A                 mov     ebp, ds:_iob
.text:00404420                 add     ebp, 20h ; ' '
.text:00404423                 mov     [esp+28Ch+Format], ebp ; File
.text:00404427                 call    _flsbuf
.text:0040442C                 jmp     loc_404067
.text:00404431 ; ---------------------------------------------------------------------------
.text:00404431
.text:00404431 loc_404431:                             ; CODE XREF: sub_403EF0+110↑j
.text:00404431                 movsx   edx, byte_41D02C
.text:00404438                 mov     ebx, ds:_iob
.text:0040443E                 add     ebx, 20h ; ' '
.text:00404441                 mov     [esp+28Ch+Format], ebx ; File
.text:00404445                 mov     [esp+28Ch+Buffer], edx ; Ch
.text:00404448                 call    _flsbuf
.text:0040444D                 jmp     loc_40401B
.text:00404452 ; ---------------------------------------------------------------------------
.text:00404452
.text:00404452 loc_404452:                             ; CODE XREF: sub_403EF0+B5↑j
.text:00404452                 mov     [esp+28Ch+Buffer], offset asc_403EEA ; "\n"
.text:00404459                 call    puts
.text:0040445E                 jmp     loc_403FAB
.text:00404463 ; ---------------------------------------------------------------------------
.text:00404463
.text:00404463 loc_404463:                             ; CODE XREF: sub_403EF0+45↑j
.text:00404463                 cmp     esi, 0Ch
.text:00404466                 jnz     loc_403F44
.text:0040446C                 mov     edx, [edi]
.text:0040446E                 mov     ebx, [edx+4]
.text:00404471                 dec     ebx
.text:00404472                 mov     [edx+4], ebx
.text:00404475                 test    ebx, ebx
.text:00404477                 js      loc_404731
.text:0040447D                 mov     ecx, [edx]
.text:0040447F                 movzx   esi, byte ptr [ecx]
.text:00404482                 inc     ecx
.text:00404483                 mov     [edx], ecx
.text:00404485
.text:00404485 loc_404485:                             ; CODE XREF: sub_403EF0+84B↓j
.text:00404485                 cmp     esi, 0Ah
.text:00404488                 jz      short loc_404498
.text:0040448A                 mov     edx, [edi]
.text:0040448C                 mov     [esp+28Ch+Buffer], esi ; Character
.text:0040448F                 mov     [esp+28Ch+Format], edx ; Stream
.text:00404493                 call    ungetc
.text:00404498
.text:00404498 loc_404498:                             ; CODE XREF: sub_403EF0+598↑j
.text:00404498                 cmp     byte_41D011, 0
.text:0040449F                 mov     ds:byte_41E210, 1
.text:004044A6                 jnz     loc_404718
.text:004044AC                 cmp     ds:byte_41E220, 0
.text:004044B3                 jz      loc_404718
.text:004044B9                 cmp     ds:byte_41E040, 0
.text:004044C0                 mov     ds:byte_41E2F0, 1
.text:004044C7                 jz      loc_404707
.text:004044CD
.text:004044CD loc_4044CD:                             ; CODE XREF: sub_403EF0+823↓j
.text:004044CD                 mov     ebp, ds:dword_41E0C0
.text:004044D3                 xor     ebx, ebx
.text:004044D5                 mov     ds:dword_41E260, ebx
.text:004044DB                 mov     [esp+28Ch+Buffer], ebp
.text:004044DE                 call    sub_403670
.text:004044E3                 mov     ebx, ds:dword_41E260
.text:004044E9                 mov     esi, ds:dword_41E250
.text:004044EF                 mov     ebp, ebx
.text:004044F1                 add     ebp, esi
.text:004044F3                 cmp     ds:dword_41E250, 1
.text:004044FA                 jle     short loc_404557
.text:004044FC                 mov     ecx, dword_41D030
.text:00404502                 mov     eax, ebx
.text:00404504                 cdq
.text:00404505                 idiv    ecx
.text:00404507                 sub     ecx, edx
.text:00404509                 lea     esi, [ecx+ebx]
.text:0040450C                 cmp     esi, ebp
.text:0040450E                 jg      short loc_404557
.text:00404510
.text:00404510 loc_404510:                             ; CODE XREF: sub_403EF0+665↓j
.text:00404510                 mov     edx, ds:_iob
.text:00404516                 mov     ebx, [edx+24h]
.text:00404519                 dec     ebx
.text:0040451A                 mov     [edx+24h], ebx
.text:0040451D                 test    ebx, ebx
.text:0040451F                 js      loc_4046E6
.text:00404525                 movzx   ecx, byte_41D02C
.text:0040452C                 mov     ebx, ds:_iob
.text:00404532                 mov     eax, [ebx+20h]
.text:00404535                 mov     [eax], cl
.text:00404537                 inc     dword ptr [ebx+20h]
.text:0040453A
.text:0040453A loc_40453A:                             ; CODE XREF: sub_403EF0+812↓j
.text:0040453A                 mov     ebx, esi
.text:0040453C                 mov     esi, ebp
.text:0040453E                 sub     esi, ebx
.text:00404540                 dec     esi
.text:00404541                 jle     short loc_404557
.text:00404543                 mov     ecx, dword_41D030
.text:00404549                 mov     eax, ebx
.text:0040454B                 cdq
.text:0040454C                 idiv    ecx
.text:0040454E                 sub     ecx, edx
.text:00404550                 lea     esi, [ecx+ebx]
.text:00404553                 cmp     esi, ebp
.text:00404555                 jle     short loc_404510
.text:00404557
.text:00404557 loc_404557:                             ; CODE XREF: sub_403EF0+60A↑j
.text:00404557                                         ; sub_403EF0+61E↑j ...
.text:00404557                 inc     ebx
.text:00404558                 cmp     ebx, ebp
.text:0040455A                 jg      short loc_404585
.text:0040455C
.text:0040455C loc_40455C:                             ; CODE XREF: sub_403EF0+693↓j
.text:0040455C                 mov     edx, ds:_iob
.text:00404562                 mov     esi, [edx+24h]
.text:00404565                 dec     esi
.text:00404566                 mov     [edx+24h], esi
.text:00404569                 test    esi, esi
.text:0040456B                 js      loc_4046C8
.text:00404571                 mov     ecx, ds:_iob
.text:00404577                 mov     eax, [ecx+20h]
.text:0040457A                 mov     byte ptr [eax], 20h ; ' '
.text:0040457D                 inc     dword ptr [ecx+20h]
.text:00404580
.text:00404580 loc_404580:                             ; CODE XREF: sub_403EF0+7F1↓j
.text:00404580                 inc     ebx
.text:00404581                 cmp     ebx, ebp
.text:00404583                 jle     short loc_40455C
.text:00404585
.text:00404585 loc_404585:                             ; CODE XREF: sub_403EF0+66A↑j
.text:00404585                 mov     ds:dword_41E260, ebp
.text:0040458B                 mov     ecx, ds:dword_41E284
.text:00404591                 xor     edx, edx
.text:00404593                 mov     ds:dword_41E250, edx
.text:00404599                 mov     ebp, ds:dword_41E280
.text:0040459F                 mov     ebx, ecx
.text:004045A1                 or      ebx, ebp
.text:004045A3                 jz      loc_40469E
.text:004045A9
.text:004045A9 loc_4045A9:                             ; CODE XREF: sub_403EF0+7D3↓j
.text:004045A9                 mov     [esp+28Ch+Buffer], offset aPageI64u ; "Page %I64u"
.text:004045B0                 lea     ebp, [esp+28Ch+var_13C]
.text:004045B7                 call    ds:libintl_gettext
.text:004045BD                 mov     [esp+28Ch+Buffer], ebp ; Buffer
.text:004045C0                 mov     ebx, ds:dword_41E280
.text:004045C6                 mov     esi, ds:dword_41E284
.text:004045CC                 mov     [esp+28Ch+var_284], ebx
.text:004045D0                 add     ebx, 1
.text:004045D3                 mov     [esp+28Ch+var_280], esi
.text:004045D7                 adc     esi, 0
.text:004045DA                 mov     ds:dword_41E280, ebx
.text:004045E0                 mov     ds:dword_41E284, esi
.text:004045E6                 mov     [esp+28Ch+Format], eax ; Format
.text:004045EA                 call    sprintf
.text:004045EF                 mov     [esp+28Ch+Buffer], ebp ; char *
.text:004045F2                 mov     [esp+28Ch+Format], 0 ; char
.text:004045FA                 call    sub_407120
.text:004045FF                 mov     [esp+28Ch+var_270], ebp
.text:00404603                 mov     ecx, ds:dword_41E340
.text:00404609                 mov     ebx, ds:dword_41E330
.text:0040460F                 mov     [esp+28Ch+var_274], offset byte_401281
.text:00404617                 mov     ebp, ds:Block
.text:0040461D                 sub     ecx, eax
.text:0040461F                 mov     [esp+28Ch+var_27C], ebx
.text:00404623                 mov     edx, ecx
.text:00404625                 shr     edx, 1Fh
.text:00404628                 mov     [esp+28Ch+var_280], offset byte_401281
.text:00404630                 dec     edx
.text:00404631                 and     ecx, edx
.text:00404633                 mov     [esp+28Ch+Format], ebp
.text:00404637                 mov     esi, ecx
.text:00404639                 sar     esi, 1
.text:0040463B                 mov     [esp+28Ch+var_284], esi
.text:0040463F                 sub     ecx, esi
.text:00404641                 xor     esi, esi
.text:00404643                 mov     [esp+28Ch+var_278], ecx
.text:00404647                 mov     [esp+28Ch+Buffer], offset aSSSSS ; "%s%*s%s%*s%s\n\n\n"
.text:0040464E                 call    printf
.text:00404653                 mov     ds:byte_41E220, 0
.text:0040465A                 mov     ds:dword_41E260, esi
.text:00404660
.text:00404660 loc_404660:                             ; CODE XREF: sub_403EF0+82F↓j
.text:00404660                                         ; sub_403EF0+83C↓j
.text:00404660                 cmp     ds:byte_41E000, 0
.text:00404667                 jnz     loc_404388
.text:0040466D                 mov     edx, dword_41D034
.text:00404673                 mov     ecx, ds:dword_41E190
.text:00404679                 test    edx, edx
.text:0040467B                 jz      loc_404376
.text:00404681                 movzx   ebx, byte_41D011
.text:00404688
.text:00404688 loc_404688:                             ; CODE XREF: sub_403EF0+7A7↓j
.text:00404688                 xor     eax, eax
.text:0040468A                 test    bl, bl
.text:0040468C                 setz    al
.text:0040468F                 inc     eax
.text:00404690                 mov     [ecx+8], eax
.text:00404693                 add     ecx, 28h ; '('
.text:00404696                 dec     edx
.text:00404697                 jnz     short loc_404688
.text:00404699                 jmp     loc_404376
.text:0040469E ; ---------------------------------------------------------------------------
.text:0040469E
.text:0040469E loc_40469E:                             ; CODE XREF: sub_403EF0+6B3↑j
.text:0040469E                 mov     [esp+28Ch+Buffer], offset aPageNumberOver ; "Page number overflow"
.text:004046A5                 call    ds:libintl_gettext
.text:004046AB                 mov     [esp+28Ch+Format], 0 ; ErrorMessage
.text:004046B3                 mov     [esp+28Ch+Buffer], 1 ; Code
.text:004046BA                 mov     [esp+28Ch+var_284], eax ; char *
.text:004046BE                 call    sub_40A7B0
.text:004046C3                 jmp     loc_4045A9
.text:004046C8 ; ---------------------------------------------------------------------------
.text:004046C8
.text:004046C8 loc_4046C8:                             ; CODE XREF: sub_403EF0+67B↑j
.text:004046C8                 mov     [esp+28Ch+Buffer], 20h ; ' ' ; Ch
.text:004046CF                 mov     esi, ds:_iob
.text:004046D5                 add     esi, 20h ; ' '
.text:004046D8                 mov     [esp+28Ch+Format], esi ; File
.text:004046DC                 call    _flsbuf
.text:004046E1                 jmp     loc_404580
.text:004046E6 ; ---------------------------------------------------------------------------
.text:004046E6
.text:004046E6 loc_4046E6:                             ; CODE XREF: sub_403EF0+62F↑j
.text:004046E6                 movsx   edx, byte_41D02C
.text:004046ED                 mov     ebx, ds:_iob
.text:004046F3                 add     ebx, 20h ; ' '
.text:004046F6                 mov     [esp+28Ch+Format], ebx ; File
.text:004046FA                 mov     [esp+28Ch+Buffer], edx ; Ch
.text:004046FD                 call    _flsbuf
.text:00404702                 jmp     loc_40453A
.text:00404707 ; ---------------------------------------------------------------------------
.text:00404707
.text:00404707 loc_404707:                             ; CODE XREF: sub_403EF0+5D7↑j
.text:00404707                 mov     [esp+28Ch+Buffer], offset asc_403EEA ; "\n"
.text:0040470E                 call    puts
.text:00404713                 jmp     loc_4044CD
.text:00404718 ; ---------------------------------------------------------------------------
.text:00404718
.text:00404718 loc_404718:                             ; CODE XREF: sub_403EF0+5B6↑j
.text:00404718                                         ; sub_403EF0+5C3↑j
.text:00404718                 cmp     ds:byte_41E020, 0
.text:0040471F                 jz      loc_404660
.text:00404725                 mov     ds:byte_41E030, 1
.text:0040472C                 jmp     loc_404660
.text:00404731 ; ---------------------------------------------------------------------------
.text:00404731
.text:00404731 loc_404731:                             ; CODE XREF: sub_403EF0+587↑j
.text:00404731                 mov     [esp+28Ch+Buffer], edx ; File
.text:00404734                 call    _filbuf
.text:00404739                 mov     esi, eax
.text:0040473B                 jmp     loc_404485
.text:00404740 ; ---------------------------------------------------------------------------
.text:00404740
.text:00404740 loc_404740:                             ; CODE XREF: sub_403EF0+33↑j
.text:00404740                 cmp     byte ptr [edi+25h], 0
.text:00404744                 jz      loc_403F29
.text:0040474A                 mov     edx, [edi]
.text:0040474C                 mov     esi, [edx+4]
.text:0040474F                 dec     esi
.text:00404750                 mov     [edx+4], esi
.text:00404753                 test    esi, esi
.text:00404755                 js      short loc_404793
.text:00404757                 mov     ebp, [edx]
.text:00404759                 movzx   esi, byte ptr [ebp+0]
.text:0040475D                 inc     ebp
.text:0040475E                 mov     [edx], ebp
.text:00404760
.text:00404760 loc_404760:                             ; CODE XREF: sub_403EF0+8AD↓j
.text:00404760                 cmp     esi, 0Ah
.text:00404763                 jnz     loc_403F29
.text:00404769                 mov     edx, [edi]
.text:0040476B                 mov     ecx, [edx+4]
.text:0040476E                 dec     ecx
.text:0040476F                 mov     [edx+4], ecx
.text:00404772                 test    ecx, ecx
.text:00404774                 js      short loc_404784
.text:00404776                 mov     ebp, [edx]
.text:00404778                 movzx   esi, byte ptr [ebp+0]
.text:0040477C                 inc     ebp
.text:0040477D                 mov     [edx], ebp
.text:0040477F                 jmp     loc_403F29
.text:00404784 ; ---------------------------------------------------------------------------
.text:00404784
.text:00404784 loc_404784:                             ; CODE XREF: sub_403EF0+884↑j
.text:00404784                 mov     [esp+28Ch+Buffer], edx ; File
.text:00404787                 call    _filbuf
.text:0040478C                 mov     esi, eax
.text:0040478E                 jmp     loc_403F29
.text:00404793 ; ---------------------------------------------------------------------------
.text:00404793
.text:00404793 loc_404793:                             ; CODE XREF: sub_403EF0+865↑j
.text:00404793                 mov     [esp+28Ch+Buffer], edx ; File
.text:00404796                 call    _filbuf
.text:0040479B                 mov     esi, eax
.text:0040479D                 jmp     short loc_404760
.text:0040479F ; ---------------------------------------------------------------------------
.text:0040479F
.text:0040479F loc_40479F:                             ; CODE XREF: sub_403EF0+1C↑j
.text:0040479F                 mov     [esp+28Ch+Buffer], edx ; File
.text:004047A2                 call    _filbuf
.text:004047A7                 mov     esi, eax
.text:004047A9                 jmp     loc_403F1A
.text:004047A9 sub_403EF0      endp
.text:004047A9
.text:004047A9 ; ---------------------------------------------------------------------------
.text:004047AE                 align 10h
.text:004047B0
.text:004047B0 ; =============== S U B R O U T I N E =======================================
.text:004047B0
.text:004047B0
.text:004047B0 sub_4047B0      proc near               ; DATA XREF: sub_4067D0+74↓o
.text:004047B0                                         ; sub_4067D0+E8↓o
.text:004047B0
.text:004047B0 Buffer          = dword ptr -16Ch
.text:004047B0 Format          = dword ptr -168h
.text:004047B0 var_164         = dword ptr -164h
.text:004047B0 var_160         = dword ptr -160h
.text:004047B0 var_15C         = dword ptr -15Ch
.text:004047B0 var_158         = dword ptr -158h
.text:004047B0 var_154         = dword ptr -154h
.text:004047B0 var_150         = dword ptr -150h
.text:004047B0 var_145         = byte ptr -145h
.text:004047B0 var_144         = dword ptr -144h
.text:004047B0 var_140         = dword ptr -140h
.text:004047B0 var_13C         = byte ptr -13Ch
.text:004047B0 arg_0           = dword ptr  4
.text:004047B0
.text:004047B0                 push    ebp
.text:004047B1                 push    edi
.text:004047B2                 push    esi
.text:004047B3                 push    ebx
.text:004047B4                 sub     esp, 15Ch
.text:004047BA                 mov     ebp, [esp+16Ch+arg_0]
.text:004047C1                 mov     ds:byte_41E2F0, 1
.text:004047C8                 mov     esi, [esp+16Ch+arg_0]
.text:004047CF                 mov     ebx, ds:dword_41E1D0
.text:004047D5                 mov     edi, [ebp+14h]
.text:004047D8                 mov     [esp+16Ch+var_140], edi
.text:004047DC                 mov     edx, [esp+16Ch+var_140]
.text:004047E0                 inc     edi
.text:004047E1                 mov     [esi+14h], edi
.text:004047E4                 mov     edi, ds:dword_41E1A0
.text:004047EA                 mov     ecx, [ebx+edx*4]
.text:004047ED                 mov     eax, [ebx+edx*4+4]
.text:004047F1                 mov     ebp, edi
.text:004047F3                 add     ebp, ecx
.text:004047F5                 add     edi, eax
.text:004047F7                 cmp     ds:byte_41E220, 0
.text:004047FE                 mov     [esp+16Ch+var_144], edi
.text:00404802                 jz      loc_4049B0
.text:00404808                 cmp     ds:byte_41E040, 0
.text:0040480F                 jz      loc_404CEA
.text:00404815
.text:00404815 loc_404815:                             ; CODE XREF: sub_4047B0+546↓j
.text:00404815                 mov     ebx, ds:dword_41E0C0
.text:0040481B                 xor     ecx, ecx
.text:0040481D                 mov     ds:dword_41E260, ecx
.text:00404823                 mov     [esp+16Ch+Buffer], ebx
.text:00404826                 call    sub_403670
.text:0040482B                 mov     ebx, ds:dword_41E260
.text:00404831                 mov     edx, ds:dword_41E250
.text:00404837                 mov     edi, ebx
.text:00404839                 add     edi, edx
.text:0040483B                 cmp     ds:dword_41E250, 1
.text:00404842                 jle     short loc_4048A7
.text:00404844                 mov     ecx, dword_41D030
.text:0040484A                 mov     eax, ebx
.text:0040484C                 cdq
.text:0040484D                 idiv    ecx
.text:0040484F                 sub     ecx, edx
.text:00404851                 lea     esi, [ecx+ebx]
.text:00404854                 cmp     esi, edi
.text:00404856                 jg      short loc_4048A7
.text:00404858                 nop
.text:00404859                 lea     esi, [esi+0]
.text:00404860
.text:00404860 loc_404860:                             ; CODE XREF: sub_4047B0+F5↓j
.text:00404860                 mov     edx, ds:_iob
.text:00404866                 mov     ebx, [edx+24h]
.text:00404869                 dec     ebx
.text:0040486A                 mov     [edx+24h], ebx
.text:0040486D                 test    ebx, ebx
.text:0040486F                 js      loc_404CC9
.text:00404875                 movzx   ecx, byte_41D02C
.text:0040487C                 mov     ebx, ds:_iob
.text:00404882                 mov     eax, [ebx+20h]
.text:00404885                 mov     [eax], cl
.text:00404887                 inc     dword ptr [ebx+20h]
.text:0040488A
.text:0040488A loc_40488A:                             ; CODE XREF: sub_4047B0+535↓j
.text:0040488A                 mov     ebx, esi
.text:0040488C                 mov     esi, edi
.text:0040488E                 sub     esi, ebx
.text:00404890                 dec     esi
.text:00404891                 jle     short loc_4048A7
.text:00404893                 mov     ecx, dword_41D030
.text:00404899                 mov     eax, ebx
.text:0040489B                 cdq
.text:0040489C                 idiv    ecx
.text:0040489E                 sub     ecx, edx
.text:004048A0                 lea     esi, [ecx+ebx]
.text:004048A3                 cmp     esi, edi
.text:004048A5                 jle     short loc_404860
.text:004048A7
.text:004048A7 loc_4048A7:                             ; CODE XREF: sub_4047B0+92↑j
.text:004048A7                                         ; sub_4047B0+A6↑j ...
.text:004048A7                 inc     ebx
.text:004048A8                 cmp     ebx, edi
.text:004048AA                 jg      short loc_4048D9
.text:004048AC                 lea     esi, [esi+0]
.text:004048B0
.text:004048B0 loc_4048B0:                             ; CODE XREF: sub_4047B0+127↓j
.text:004048B0                 mov     edx, ds:_iob
.text:004048B6                 mov     esi, [edx+24h]
.text:004048B9                 dec     esi
.text:004048BA                 mov     [edx+24h], esi
.text:004048BD                 test    esi, esi
.text:004048BF                 js      loc_404CAB
.text:004048C5                 mov     ecx, ds:_iob
.text:004048CB                 mov     eax, [ecx+20h]
.text:004048CE                 mov     byte ptr [eax], 20h ; ' '
.text:004048D1                 inc     dword ptr [ecx+20h]
.text:004048D4
.text:004048D4 loc_4048D4:                             ; CODE XREF: sub_4047B0+514↓j
.text:004048D4                 inc     ebx
.text:004048D5                 cmp     ebx, edi
.text:004048D7                 jle     short loc_4048B0
.text:004048D9
.text:004048D9 loc_4048D9:                             ; CODE XREF: sub_4047B0+FA↑j
.text:004048D9                 mov     ds:dword_41E260, edi
.text:004048DF                 mov     ecx, ds:dword_41E284
.text:004048E5                 xor     edx, edx
.text:004048E7                 mov     ds:dword_41E250, edx
.text:004048ED                 mov     edi, ds:dword_41E280
.text:004048F3                 mov     ebx, ecx
.text:004048F5                 or      ebx, edi
.text:004048F7                 jz      loc_404C81
.text:004048FD
.text:004048FD loc_4048FD:                             ; CODE XREF: sub_4047B0+4F6↓j
.text:004048FD                 mov     [esp+16Ch+Buffer], offset aPageI64u ; "Page %I64u"
.text:00404904                 lea     esi, [esp+16Ch+var_13C]
.text:00404908                 call    ds:libintl_gettext
.text:0040490E                 mov     [esp+16Ch+Buffer], esi ; Buffer
.text:00404911                 mov     ebx, ds:dword_41E280
.text:00404917                 mov     edi, ds:dword_41E284
.text:0040491D                 mov     [esp+16Ch+var_164], ebx
.text:00404921                 add     ebx, 1
.text:00404924                 mov     [esp+16Ch+var_160], edi
.text:00404928                 adc     edi, 0
.text:0040492B                 mov     ds:dword_41E280, ebx
.text:00404931                 mov     ds:dword_41E284, edi
.text:00404937                 mov     [esp+16Ch+Format], eax ; Format
.text:0040493B                 call    sprintf
.text:00404940                 mov     [esp+16Ch+Buffer], esi ; char *
.text:00404943                 mov     [esp+16Ch+Format], 0 ; char
.text:0040494B                 call    sub_407120
.text:00404950                 mov     [esp+16Ch+var_150], esi
.text:00404954                 mov     ecx, ds:dword_41E340
.text:0040495A                 mov     ebx, ds:dword_41E330
.text:00404960                 mov     [esp+16Ch+var_154], offset byte_401281
.text:00404968                 mov     esi, ds:Block
.text:0040496E                 sub     ecx, eax
.text:00404970                 mov     [esp+16Ch+var_15C], ebx
.text:00404974                 mov     edx, ecx
.text:00404976                 shr     edx, 1Fh
.text:00404979                 mov     [esp+16Ch+var_160], offset byte_401281
.text:00404981                 dec     edx
.text:00404982                 and     ecx, edx
.text:00404984                 mov     [esp+16Ch+Format], esi
.text:00404988                 mov     edi, ecx
.text:0040498A                 sar     edi, 1
.text:0040498C                 mov     [esp+16Ch+var_164], edi
.text:00404990                 sub     ecx, edi
.text:00404992                 mov     [esp+16Ch+var_158], ecx
.text:00404996                 mov     [esp+16Ch+Buffer], offset aSSSSS ; "%s%*s%s%*s%s\n\n\n"
.text:0040499D                 call    printf
.text:004049A2                 mov     ds:byte_41E220, 0
.text:004049A9                 xor     eax, eax
.text:004049AB                 mov     ds:dword_41E260, eax
.text:004049B0
.text:004049B0 loc_4049B0:                             ; CODE XREF: sub_4047B0+52↑j
.text:004049B0                 mov     ecx, [esp+16Ch+arg_0]
.text:004049B7                 cmp     dword ptr [ecx+8], 1
.text:004049BB                 jz      loc_404C3C
.text:004049C1
.text:004049C1 loc_4049C1:                             ; CODE XREF: sub_4047B0+4B2↓j
.text:004049C1                 mov     eax, ds:dword_41E2E0
.text:004049C6                 mov     esi, ds:dword_41E170
.text:004049CC                 sub     eax, esi
.text:004049CE                 test    eax, eax
.text:004049D0                 jle     short loc_4049E2
.text:004049D2                 mov     [esp+16Ch+Buffer], eax
.text:004049D5                 call    sub_403670
.text:004049DA                 xor     edx, edx
.text:004049DC                 mov     ds:dword_41E2E0, edx
.text:004049E2
.text:004049E2 loc_4049E2:                             ; CODE XREF: sub_4047B0+220↑j
.text:004049E2                 cmp     ds:byte_41E160, 0
.text:004049E9                 jnz     loc_404C32
.text:004049EF
.text:004049EF loc_4049EF:                             ; CODE XREF: sub_4047B0+487↓j
.text:004049EF                 cmp     ebp, [esp+16Ch+var_144]
.text:004049F3                 jz      loc_404B4E
.text:004049F9                 lea     esi, [esi+0]
.text:00404A00
.text:00404A00 loc_404A00:                             ; CODE XREF: sub_4047B0+398↓j
.text:00404A00                 movzx   edx, byte ptr [ebp+0]
.text:00404A04                 inc     ebp
.text:00404A05                 cmp     ds:byte_41E0B0, 0
.text:00404A0C                 mov     [esp+16Ch+var_145], dl
.text:00404A10                 jz      loc_404B20
.text:00404A16                 cmp     dl, 20h ; ' '
.text:00404A19                 jz      loc_404C27
.text:00404A1F                 mov     eax, ds:dword_41E250
.text:00404A24                 test    eax, eax
.text:00404A26                 jle     loc_404AE7
.text:00404A2C                 mov     ebx, ds:dword_41E260
.text:00404A32                 lea     edi, [eax+ebx]
.text:00404A35                 dec     eax
.text:00404A36                 jle     short loc_404AA0
.text:00404A38                 mov     ecx, dword_41D030
.text:00404A3E                 mov     eax, ebx
.text:00404A40                 cdq
.text:00404A41                 idiv    ecx
.text:00404A43                 sub     ecx, edx
.text:00404A45                 lea     esi, [ecx+ebx]
.text:00404A48                 cmp     esi, edi
.text:00404A4A                 jg      short loc_404AA0
.text:00404A4C                 lea     esi, [esi+0]
.text:00404A50
.text:00404A50 loc_404A50:                             ; CODE XREF: sub_4047B0+2E5↓j
.text:00404A50                 mov     edx, ds:_iob
.text:00404A56                 mov     ebx, [edx+24h]
.text:00404A59                 dec     ebx
.text:00404A5A                 mov     [edx+24h], ebx
.text:00404A5D                 test    ebx, ebx
.text:00404A5F                 js      loc_404C06
.text:00404A65                 movzx   ecx, byte_41D02C
.text:00404A6C                 mov     ebx, ds:_iob
.text:00404A72                 mov     eax, [ebx+20h]
.text:00404A75                 mov     [eax], cl
.text:00404A77                 inc     dword ptr [ebx+20h]
.text:00404A7A
.text:00404A7A loc_404A7A:                             ; CODE XREF: sub_4047B0+472↓j
.text:00404A7A                 mov     ebx, esi
.text:00404A7C                 mov     esi, edi
.text:00404A7E                 sub     esi, ebx
.text:00404A80                 dec     esi
.text:00404A81                 jle     short loc_404AA0
.text:00404A83                 mov     ecx, dword_41D030
.text:00404A89                 mov     eax, ebx
.text:00404A8B                 cdq
.text:00404A8C                 idiv    ecx
.text:00404A8E                 sub     ecx, edx
.text:00404A90                 lea     esi, [ecx+ebx]
.text:00404A93                 cmp     esi, edi
.text:00404A95                 jle     short loc_404A50
.text:00404A97                 mov     esi, esi
.text:00404A99                 lea     edi, [edi+0]
.text:00404AA0
.text:00404AA0 loc_404AA0:                             ; CODE XREF: sub_4047B0+286↑j
.text:00404AA0                                         ; sub_4047B0+29A↑j ...
.text:00404AA0                 inc     ebx
.text:00404AA1                 cmp     ebx, edi
.text:00404AA3                 jg      short loc_404AD9
.text:00404AA5                 lea     esi, [esi+0]
.text:00404AA9                 lea     edi, [edi+0]
.text:00404AB0
.text:00404AB0 loc_404AB0:                             ; CODE XREF: sub_4047B0+327↓j
.text:00404AB0                 mov     edx, ds:_iob
.text:00404AB6                 mov     esi, [edx+24h]
.text:00404AB9                 dec     esi
.text:00404ABA                 mov     [edx+24h], esi
.text:00404ABD                 test    esi, esi
.text:00404ABF                 js      loc_404BE8
.text:00404AC5                 mov     ecx, ds:_iob
.text:00404ACB                 mov     eax, [ecx+20h]
.text:00404ACE                 mov     byte ptr [eax], 20h ; ' '
.text:00404AD1                 inc     dword ptr [ecx+20h]
.text:00404AD4
.text:00404AD4 loc_404AD4:                             ; CODE XREF: sub_4047B0+451↓j
.text:00404AD4                 inc     ebx
.text:00404AD5                 cmp     ebx, edi
.text:00404AD7                 jle     short loc_404AB0
.text:00404AD9
.text:00404AD9 loc_404AD9:                             ; CODE XREF: sub_4047B0+2F3↑j
.text:00404AD9                 mov     ds:dword_41E260, edi
.text:00404ADF                 xor     edi, edi
.text:00404AE1                 mov     ds:dword_41E250, edi
.text:00404AE7
.text:00404AE7 loc_404AE7:                             ; CODE XREF: sub_4047B0+276↑j
.text:00404AE7                 movzx   edx, [esp+16Ch+var_145]
.text:00404AEC                 mov     ebx, ds:__mb_cur_max
.text:00404AF2                 cmp     dword ptr [ebx], 1
.text:00404AF5                 jz      loc_404BD2
.text:00404AFB                 mov     [esp+16Ch+Format], 157h ; Type
.text:00404B03                 mov     [esp+16Ch+Buffer], edx ; C
.text:00404B06                 call    _isctype
.text:00404B0B
.text:00404B0B loc_404B0B:                             ; CODE XREF: sub_4047B0+433↓j
.text:00404B0B                 test    eax, eax
.text:00404B0D                 jnz     loc_404BC7
.text:00404B13                 cmp     [esp+16Ch+var_145], 8
.text:00404B18                 jz      loc_404BBC
.text:00404B1E                 mov     esi, esi
.text:00404B20
.text:00404B20 loc_404B20:                             ; CODE XREF: sub_4047B0+260↑j
.text:00404B20                                         ; sub_4047B0+412↓j ...
.text:00404B20                 mov     edx, ds:_iob
.text:00404B26                 mov     edi, [edx+24h]
.text:00404B29                 dec     edi
.text:00404B2A                 mov     [edx+24h], edi
.text:00404B2D                 test    edi, edi
.text:00404B2F                 js      short loc_404BA0
.text:00404B31                 movzx   edx, [esp+16Ch+var_145]
.text:00404B36                 mov     ebx, ds:_iob
.text:00404B3C                 mov     eax, [ebx+20h]
.text:00404B3F                 mov     [eax], dl
.text:00404B41                 inc     dword ptr [ebx+20h]
.text:00404B44
.text:00404B44 loc_404B44:                             ; CODE XREF: sub_4047B0+40A↓j
.text:00404B44                                         ; sub_4047B0+47D↓j
.text:00404B44                 cmp     ebp, [esp+16Ch+var_144]
.text:00404B48                 jnz     loc_404A00
.text:00404B4E
.text:00404B4E loc_404B4E:                             ; CODE XREF: sub_4047B0+243↑j
.text:00404B4E                 mov     ebp, ds:dword_41E250
.text:00404B54                 test    ebp, ebp
.text:00404B56                 jnz     short loc_404B87
.text:00404B58                 mov     ecx, ds:dword_41E1E0
.text:00404B5E                 mov     esi, [esp+16Ch+arg_0]
.text:00404B65                 mov     edx, [esp+16Ch+var_140]
.text:00404B69                 mov     edi, [esi+20h]
.text:00404B6C                 mov     ebx, [ecx+edx*4]
.text:00404B6F                 mov     ecx, ds:dword_41E170
.text:00404B75                 lea     eax, [ebx+edi]
.text:00404B78                 sub     edi, ecx
.text:00404B7A                 cmp     edi, ds:dword_41E0C0
.text:00404B80                 mov     ds:dword_41E260, eax
.text:00404B85                 jz      short loc_404B97
.text:00404B87
.text:00404B87 loc_404B87:                             ; CODE XREF: sub_4047B0+3A6↑j
.text:00404B87                                         ; sub_4047B0+3EE↓j ...
.text:00404B87                 add     esp, 15Ch
.text:00404B8D                 mov     eax, 1
.text:00404B92                 pop     ebx
.text:00404B93                 pop     esi
.text:00404B94                 pop     edi
.text:00404B95                 pop     ebp
.text:00404B96                 retn
.text:00404B97 ; ---------------------------------------------------------------------------
.text:00404B97
.text:00404B97 loc_404B97:                             ; CODE XREF: sub_4047B0+3D5↑j
.text:00404B97                 sub     eax, ecx
.text:00404B99                 mov     ds:dword_41E260, eax
.text:00404B9E                 jmp     short loc_404B87
.text:00404BA0 ; ---------------------------------------------------------------------------
.text:00404BA0
.text:00404BA0 loc_404BA0:                             ; CODE XREF: sub_4047B0+37F↑j
.text:00404BA0                 movsx   ecx, [esp+16Ch+var_145]
.text:00404BA5                 mov     esi, ds:_iob
.text:00404BAB                 add     esi, 20h ; ' '
.text:00404BAE                 mov     [esp+16Ch+Format], esi ; File
.text:00404BB2                 mov     [esp+16Ch+Buffer], ecx ; Ch
.text:00404BB5                 call    _flsbuf
.text:00404BBA                 jmp     short loc_404B44
.text:00404BBC ; ---------------------------------------------------------------------------
.text:00404BBC
.text:00404BBC loc_404BBC:                             ; CODE XREF: sub_4047B0+368↑j
.text:00404BBC                 dec     ds:dword_41E260
.text:00404BC2                 jmp     loc_404B20
.text:00404BC7 ; ---------------------------------------------------------------------------
.text:00404BC7
.text:00404BC7 loc_404BC7:                             ; CODE XREF: sub_4047B0+35D↑j
.text:00404BC7                 inc     ds:dword_41E260
.text:00404BCD                 jmp     loc_404B20
.text:00404BD2 ; ---------------------------------------------------------------------------
.text:00404BD2
.text:00404BD2 loc_404BD2:                             ; CODE XREF: sub_4047B0+345↑j
.text:00404BD2                 mov     esi, ds:_pctype
.text:00404BD8                 mov     ecx, [esi]
.text:00404BDA                 movzx   eax, word ptr [ecx+edx*2]
.text:00404BDE                 and     eax, 157h
.text:00404BE3                 jmp     loc_404B0B
.text:00404BE8 ; ---------------------------------------------------------------------------
.text:00404BE8
.text:00404BE8 loc_404BE8:                             ; CODE XREF: sub_4047B0+30F↑j
.text:00404BE8                 mov     [esp+16Ch+Buffer], 20h ; ' ' ; Ch
.text:00404BEF                 mov     esi, ds:_iob
.text:00404BF5                 add     esi, 20h ; ' '
.text:00404BF8                 mov     [esp+16Ch+Format], esi ; File
.text:00404BFC                 call    _flsbuf
.text:00404C01                 jmp     loc_404AD4
.text:00404C06 ; ---------------------------------------------------------------------------
.text:00404C06
.text:00404C06 loc_404C06:                             ; CODE XREF: sub_4047B0+2AF↑j
.text:00404C06                 movsx   edx, byte_41D02C
.text:00404C0D                 mov     ebx, ds:_iob
.text:00404C13                 add     ebx, 20h ; ' '
.text:00404C16                 mov     [esp+16Ch+Format], ebx ; File
.text:00404C1A                 mov     [esp+16Ch+Buffer], edx ; Ch
.text:00404C1D                 call    _flsbuf
.text:00404C22                 jmp     loc_404A7A
.text:00404C27 ; ---------------------------------------------------------------------------
.text:00404C27
.text:00404C27 loc_404C27:                             ; CODE XREF: sub_4047B0+269↑j
.text:00404C27                 inc     ds:dword_41E250
.text:00404C2D                 jmp     loc_404B44
.text:00404C32 ; ---------------------------------------------------------------------------
.text:00404C32
.text:00404C32 loc_404C32:                             ; CODE XREF: sub_4047B0+239↑j
.text:00404C32                 call    sub_403880
.text:00404C37                 jmp     loc_4049EF
.text:00404C3C ; ---------------------------------------------------------------------------
.text:00404C3C
.text:00404C3C loc_404C3C:                             ; CODE XREF: sub_4047B0+20B↑j
.text:00404C3C                 mov     eax, dword_41D034
.text:00404C41                 mov     ecx, ds:dword_41E190
.text:00404C47                 test    eax, eax
.text:00404C49                 mov     edx, ecx
.text:00404C4B                 jle     short loc_404C5D
.text:00404C4D                 lea     esi, [esi+0]
.text:00404C50
.text:00404C50 loc_404C50:                             ; CODE XREF: sub_4047B0+4AB↓j
.text:00404C50                 mov     dword ptr [edx+8], 2
.text:00404C57                 add     edx, 28h ; '('
.text:00404C5A                 dec     eax
.text:00404C5B                 jnz     short loc_404C50
.text:00404C5D
.text:00404C5D loc_404C5D:                             ; CODE XREF: sub_4047B0+49B↑j
.text:00404C5D                 mov     eax, [ecx+1Ch]
.text:00404C60                 test    eax, eax
.text:00404C62                 jg      loc_4049C1
.text:00404C68                 cmp     byte_41D010, 0
.text:00404C6F                 jnz     loc_404B87
.text:00404C75                 mov     ds:byte_41E2F0, 0
.text:00404C7C                 jmp     loc_404B87
.text:00404C81 ; ---------------------------------------------------------------------------
.text:00404C81
.text:00404C81 loc_404C81:                             ; CODE XREF: sub_4047B0+147↑j
.text:00404C81                 mov     [esp+16Ch+Buffer], offset aPageNumberOver ; "Page number overflow"
.text:00404C88                 call    ds:libintl_gettext
.text:00404C8E                 mov     [esp+16Ch+Format], 0 ; ErrorMessage
.text:00404C96                 mov     [esp+16Ch+Buffer], 1 ; Code
.text:00404C9D                 mov     [esp+16Ch+var_164], eax ; char *
.text:00404CA1                 call    sub_40A7B0
.text:00404CA6                 jmp     loc_4048FD
.text:00404CAB ; ---------------------------------------------------------------------------
.text:00404CAB
.text:00404CAB loc_404CAB:                             ; CODE XREF: sub_4047B0+10F↑j
.text:00404CAB                 mov     [esp+16Ch+Buffer], 20h ; ' ' ; Ch
.text:00404CB2                 mov     esi, ds:_iob
.text:00404CB8                 add     esi, 20h ; ' '
.text:00404CBB                 mov     [esp+16Ch+Format], esi ; File
.text:00404CBF                 call    _flsbuf
.text:00404CC4                 jmp     loc_4048D4
.text:00404CC9 ; ---------------------------------------------------------------------------
.text:00404CC9
.text:00404CC9 loc_404CC9:                             ; CODE XREF: sub_4047B0+BF↑j
.text:00404CC9                 movsx   edx, byte_41D02C
.text:00404CD0                 mov     ebx, ds:_iob
.text:00404CD6                 add     ebx, 20h ; ' '
.text:00404CD9                 mov     [esp+16Ch+Format], ebx ; File
.text:00404CDD                 mov     [esp+16Ch+Buffer], edx ; Ch
.text:00404CE0                 call    _flsbuf
.text:00404CE5                 jmp     loc_40488A
.text:00404CEA ; ---------------------------------------------------------------------------
.text:00404CEA
.text:00404CEA loc_404CEA:                             ; CODE XREF: sub_4047B0+5F↑j
.text:00404CEA                 mov     [esp+16Ch+Buffer], offset asc_403EEA ; "\n"
.text:00404CF1                 call    puts
.text:00404CF6                 jmp     loc_404815
.text:00404CF6 sub_4047B0      endp
.text:00404CF6
.text:00404CF6 ; ---------------------------------------------------------------------------
.text:00404CFB ; const char a03o[]
.text:00404CFB a03o            db '%03o',0             ; DATA XREF: sub_404D00+BC↓o
.text:00404CFB                                         ; sub_404D00+119↓o
.text:00404D00
.text:00404D00 ; =============== S U B R O U T I N E =======================================
.text:00404D00
.text:00404D00
.text:00404D00 sub_404D00      proc near               ; CODE XREF: sub_403EF0+5C↑p
.text:00404D00                                         ; sub_403EF0+3AF↑p
.text:00404D00
.text:00404D00 C               = dword ptr -2Ch
.text:00404D00 Type            = dword ptr -28h
.text:00404D00 var_24          = dword ptr -24h
.text:00404D00 var_15          = byte ptr -15h
.text:00404D00 Buffer          = byte ptr -14h
.text:00404D00 arg_0           = dword ptr  4
.text:00404D00
.text:00404D00                 push    ebp
.text:00404D01                 push    edi
.text:00404D02                 mov     edi, 8
.text:00404D07                 push    esi
.text:00404D08                 push    ebx
.text:00404D09                 sub     esp, 1Ch
.text:00404D0C                 mov     ecx, [esp+2Ch+arg_0]
.text:00404D10                 cmp     cl, byte_41D024
.text:00404D16                 mov     esi, ds:dword_41E350
.text:00404D1C                 mov     bl, cl
.text:00404D1E                 mov     [esp+2Ch+var_15], cl
.text:00404D22                 jz      loc_404EA0
.text:00404D28                 cmp     cl, 9
.text:00404D2B                 jz      loc_404E58
.text:00404D31                 movzx   edx, cl
.text:00404D34                 mov     ecx, ds:__mb_cur_max
.text:00404D3A                 cmp     dword ptr [ecx], 1
.text:00404D3D                 jz      loc_404E42
.text:00404D43                 mov     [esp+2Ch+Type], 157h ; Type
.text:00404D4B                 mov     [esp+2Ch+C], edx ; C
.text:00404D4E                 call    _isctype
.text:00404D53
.text:00404D53 loc_404D53:                             ; CODE XREF: sub_404D00+153↓j
.text:00404D53                 test    eax, eax
.text:00404D55                 mov     edi, 1
.text:00404D5A                 jnz     loc_404DF0
.text:00404D60                 cmp     ds:byte_41E110, 0
.text:00404D67                 jnz     loc_404E03
.text:00404D6D                 cmp     ds:byte_41E120, 0
.text:00404D74                 jz      short loc_404DE5
.text:00404D76                 cmp     [esp+2Ch+var_15], 0
.text:00404D7B                 js      short loc_404DA9
.text:00404D7D                 mov     byte ptr [esi], 5Eh ; '^'
.text:00404D80                 xor     bl, 40h
.text:00404D83                 mov     edi, 2
.text:00404D88                 mov     [esi+1], bl
.text:00404D8B                 mov     ebp, 2
.text:00404D90
.text:00404D90 loc_404D90:                             ; CODE XREF: sub_404D00+E3↓j
.text:00404D90                                         ; sub_404D00+F7↓j ...
.text:00404D90                 mov     ebx, ds:dword_41E270
.text:00404D96
.text:00404D96 loc_404D96:                             ; CODE XREF: sub_404D00+18F↓j
.text:00404D96                 lea     esi, [edi+ebx]
.text:00404D99                 mov     eax, ebp
.text:00404D9B                 mov     ds:dword_41E270, esi
.text:00404DA1                 add     esp, 1Ch
.text:00404DA4                 pop     ebx
.text:00404DA5                 pop     esi
.text:00404DA6                 pop     edi
.text:00404DA7                 pop     ebp
.text:00404DA8                 retn
.text:00404DA9 ; ---------------------------------------------------------------------------
.text:00404DA9
.text:00404DA9 loc_404DA9:                             ; CODE XREF: sub_404D00+7B↑j
.text:00404DA9                 mov     byte ptr [esi], 5Ch ; '\'
.text:00404DAC                 mov     edi, 4
.text:00404DB1                 mov     ebp, 4
.text:00404DB6                 movzx   ebx, [esp+2Ch+var_15]
.text:00404DBB                 inc     esi
.text:00404DBC                 mov     [esp+2Ch+Type], offset a03o ; "%03o"
.text:00404DC4                 mov     [esp+2Ch+var_24], ebx
.text:00404DC8                 lea     ebx, [esp+2Ch+Buffer]
.text:00404DCC                 mov     [esp+2Ch+C], ebx ; Buffer
.text:00404DCF                 call    sprintf
.text:00404DD4                 xor     edx, edx
.text:00404DD6
.text:00404DD6 loc_404DD6:                             ; CODE XREF: sub_404D00+E1↓j
.text:00404DD6                 movzx   ecx, byte ptr [ebx+edx]
.text:00404DDA                 inc     edx
.text:00404DDB                 mov     [esi], cl
.text:00404DDD                 inc     esi
.text:00404DDE                 cmp     edx, 2
.text:00404DE1                 jle     short loc_404DD6
.text:00404DE3                 jmp     short loc_404D90
.text:00404DE5 ; ---------------------------------------------------------------------------
.text:00404DE5
.text:00404DE5 loc_404DE5:                             ; CODE XREF: sub_404D00+74↑j
.text:00404DE5                 cmp     bl, 8
.text:00404DE8                 jz      short loc_404DF9
.text:00404DEA                 xor     edi, edi
.text:00404DEC                 lea     esi, [esi+0]
.text:00404DF0
.text:00404DF0 loc_404DF0:                             ; CODE XREF: sub_404D00+5A↑j
.text:00404DF0                 mov     [esi], bl
.text:00404DF2
.text:00404DF2 loc_404DF2:                             ; CODE XREF: sub_404D00+101↓j
.text:00404DF2                                         ; sub_404D00+196↓j
.text:00404DF2                 mov     ebp, 1
.text:00404DF7                 jmp     short loc_404D90
.text:00404DF9 ; ---------------------------------------------------------------------------
.text:00404DF9
.text:00404DF9 loc_404DF9:                             ; CODE XREF: sub_404D00+E8↑j
.text:00404DF9                 mov     byte ptr [esi], 8
.text:00404DFC                 mov     edi, 0FFFFFFFFh
.text:00404E01                 jmp     short loc_404DF2
.text:00404E03 ; ---------------------------------------------------------------------------
.text:00404E03
.text:00404E03 loc_404E03:                             ; CODE XREF: sub_404D00+67↑j
.text:00404E03                 mov     byte ptr [esi], 5Ch ; '\'
.text:00404E06                 lea     ebx, [esp+2Ch+Buffer]
.text:00404E0A                 mov     edi, 4
.text:00404E0F                 movzx   edx, [esp+2Ch+var_15]
.text:00404E14                 mov     ebp, 4
.text:00404E19                 mov     [esp+2Ch+Type], offset a03o ; "%03o"
.text:00404E21                 inc     esi
.text:00404E22                 mov     [esp+2Ch+C], ebx ; Buffer
.text:00404E25                 mov     [esp+2Ch+var_24], edx
.text:00404E29                 call    sprintf
.text:00404E2E                 xor     edx, edx
.text:00404E30
.text:00404E30 loc_404E30:                             ; CODE XREF: sub_404D00+13B↓j
.text:00404E30                 movzx   ecx, byte ptr [ebx+edx]
.text:00404E34                 inc     edx
.text:00404E35                 mov     [esi], cl
.text:00404E37                 inc     esi
.text:00404E38                 cmp     edx, 2
.text:00404E3B                 jle     short loc_404E30
.text:00404E3D                 jmp     loc_404D90
.text:00404E42 ; ---------------------------------------------------------------------------
.text:00404E42
.text:00404E42 loc_404E42:                             ; CODE XREF: sub_404D00+3D↑j
.text:00404E42                 mov     edi, ds:_pctype
.text:00404E48                 mov     ecx, [edi]
.text:00404E4A                 movzx   eax, word ptr [ecx+edx*2]
.text:00404E4E                 and     eax, 157h
.text:00404E53                 jmp     loc_404D53
.text:00404E58 ; ---------------------------------------------------------------------------
.text:00404E58
.text:00404E58 loc_404E58:                             ; CODE XREF: sub_404D00+2B↑j
.text:00404E58                                         ; sub_404D00+1A6↓j
.text:00404E58                 mov     ebx, ds:dword_41E270
.text:00404E5E                 mov     eax, ebx
.text:00404E60                 cdq
.text:00404E61                 idiv    edi
.text:00404E63                 sub     edi, edx
.text:00404E65                 cmp     ds:byte_41E0A0, 0
.text:00404E6C                 jz      short loc_404E94
.text:00404E6E                 test    edi, edi
.text:00404E70                 mov     edx, edi
.text:00404E72                 jz      short loc_404E8D
.text:00404E74                 lea     esi, [esi+0]
.text:00404E7A                 lea     edi, [edi+0]
.text:00404E80
.text:00404E80 loc_404E80:                             ; CODE XREF: sub_404D00+185↓j
.text:00404E80                 mov     byte ptr [esi], 20h ; ' '
.text:00404E83                 inc     esi
.text:00404E84                 dec     edx
.text:00404E85                 jnz     short loc_404E80
.text:00404E87                 mov     ebx, ds:dword_41E270
.text:00404E8D
.text:00404E8D loc_404E8D:                             ; CODE XREF: sub_404D00+172↑j
.text:00404E8D                 mov     ebp, edi
.text:00404E8F                 jmp     loc_404D96
.text:00404E94 ; ---------------------------------------------------------------------------
.text:00404E94
.text:00404E94 loc_404E94:                             ; CODE XREF: sub_404D00+16C↑j
.text:00404E94                 mov     [esi], cl
.text:00404E96                 jmp     loc_404DF2
.text:00404E96 ; ---------------------------------------------------------------------------
.text:00404E9B                 align 10h
.text:00404EA0
.text:00404EA0 loc_404EA0:                             ; CODE XREF: sub_404D00+22↑j
.text:00404EA0                 mov     edi, dword_41D028
.text:00404EA6                 jmp     short loc_404E58
.text:00404EA6 sub_404D00      endp
.text:00404EA6
.text:00404EA6 ; ---------------------------------------------------------------------------
.text:00404EA8                 align 10h
.text:00404EB0
.text:00404EB0 ; =============== S U B R O U T I N E =======================================
.text:00404EB0
.text:00404EB0
.text:00404EB0 sub_404EB0      proc near               ; CODE XREF: sub_401910:loc_402776↑p
.text:00404EB0
.text:00404EB0 Block           = dword ptr -0Ch
.text:00404EB0
.text:00404EB0                 sub     esp, 0Ch
.text:00404EB3                 mov     eax, ds:Buffer
.text:00404EB8                 test    eax, eax
.text:00404EBA                 jnz     loc_404F40
.text:00404EC0
.text:00404EC0 loc_404EC0:                             ; CODE XREF: sub_404EB0+98↓j
.text:00404EC0                 mov     eax, ds:dword_41E350
.text:00404EC5                 test    eax, eax
.text:00404EC7                 jnz     short loc_404F30
.text:00404EC9
.text:00404EC9 loc_404EC9:                             ; CODE XREF: sub_404EB0+88↓j
.text:00404EC9                 mov     eax, ds:dword_41E190
.text:00404ECE                 test    eax, eax
.text:00404ED0                 jnz     short loc_404F20
.text:00404ED2
.text:00404ED2 loc_404ED2:                             ; CODE XREF: sub_404EB0+78↓j
.text:00404ED2                 mov     eax, ds:dword_41E1D0
.text:00404ED7                 test    eax, eax
.text:00404ED9                 jnz     short loc_404F10
.text:00404EDB
.text:00404EDB loc_404EDB:                             ; CODE XREF: sub_404EB0+68↓j
.text:00404EDB                 mov     eax, ds:dword_41E1E0
.text:00404EE0                 test    eax, eax
.text:00404EE2                 jnz     short loc_404F00
.text:00404EE4
.text:00404EE4 loc_404EE4:                             ; CODE XREF: sub_404EB0+58↓j
.text:00404EE4                 mov     eax, ds:dword_41E1A0
.text:00404EE9                 test    eax, eax
.text:00404EEB                 jnz     short loc_404EF1
.text:00404EED
.text:00404EED loc_404EED:                             ; CODE XREF: sub_404EB0+49↓j
.text:00404EED                 add     esp, 0Ch
.text:00404EF0                 retn
.text:00404EF1 ; ---------------------------------------------------------------------------
.text:00404EF1
.text:00404EF1 loc_404EF1:                             ; CODE XREF: sub_404EB0+3B↑j
.text:00404EF1                 mov     [esp+0Ch+Block], eax ; Block
.text:00404EF4                 call    free
.text:00404EF9                 jmp     short loc_404EED
.text:00404EF9 ; ---------------------------------------------------------------------------
.text:00404EFB                 align 10h
.text:00404F00
.text:00404F00 loc_404F00:                             ; CODE XREF: sub_404EB0+32↑j
.text:00404F00                 mov     [esp+0Ch+Block], eax ; Block
.text:00404F03                 call    free
.text:00404F08                 jmp     short loc_404EE4
.text:00404F08 ; ---------------------------------------------------------------------------
.text:00404F0A                 align 10h
.text:00404F10
.text:00404F10 loc_404F10:                             ; CODE XREF: sub_404EB0+29↑j
.text:00404F10                 mov     [esp+0Ch+Block], eax ; Block
.text:00404F13                 call    free
.text:00404F18                 jmp     short loc_404EDB
.text:00404F18 ; ---------------------------------------------------------------------------
.text:00404F1A                 align 10h
.text:00404F20
.text:00404F20 loc_404F20:                             ; CODE XREF: sub_404EB0+20↑j
.text:00404F20                 mov     [esp+0Ch+Block], eax ; Block
.text:00404F23                 call    free
.text:00404F28                 jmp     short loc_404ED2
.text:00404F28 ; ---------------------------------------------------------------------------
.text:00404F2A                 align 10h
.text:00404F30
.text:00404F30 loc_404F30:                             ; CODE XREF: sub_404EB0+17↑j
.text:00404F30                 mov     [esp+0Ch+Block], eax ; Block
.text:00404F33                 call    free
.text:00404F38                 jmp     short loc_404EC9
.text:00404F38 ; ---------------------------------------------------------------------------
.text:00404F3A                 align 10h
.text:00404F40
.text:00404F40 loc_404F40:                             ; CODE XREF: sub_404EB0+A↑j
.text:00404F40                 mov     [esp+0Ch+Block], eax ; Block
.text:00404F43                 call    free
.text:00404F48                 jmp     loc_404EC0
.text:00404F48 sub_404EB0      endp
.text:00404F48
.text:00404F48 ; ---------------------------------------------------------------------------
.text:00404F4D                 align 20h
.text:00404F60 aTrySHelpForMor db 'Try `%s --help',27h,' for more information.',0Ah,0
.text:00404F60                                         ; DATA XREF: sub_4060C0+C↓o
.text:00404F87                 align 20h
.text:00404FA0 aUsageSOptionFi db 'Usage: %s [OPTION]... [FILE]...',0Ah,0
.text:00404FA0                                         ; DATA XREF: sub_4060C0:loc_406100↓o
.text:00404FC1                 align 20h
.text:00404FE0 aPaginateOrColu db 'Paginate or columnate FILE(s) for printing.',0Ah
.text:00404FE0                                         ; DATA XREF: sub_4060C0+5F↓o
.text:00404FE0                 db 0Ah,0
.text:0040500E                 align 20h
.text:00405020 aMandatoryArgum db 'Mandatory arguments to long options are mandatory for short optio'
.text:00405020                                         ; DATA XREF: sub_4060C0+81↓o
.text:00405020                 db 'ns too.',0Ah,0
.text:0040506A                 align 20h
.text:00405080 aFirstPageLastP db '  +FIRST_PAGE[:LAST_PAGE], --pages=FIRST_PAGE[:LAST_PAGE]',0Ah
.text:00405080                                         ; DATA XREF: sub_4060C0+A3↓o
.text:00405080                 db '                    begin [stop] printing with page FIRST_[LAST_]'
.text:00405080                 db 'PAGE',0Ah
.text:00405080                 db '  -COLUMN, --columns=COLUMN',0Ah
.text:00405080                 db '                    output COLUMN columns and print columns down,'
.text:00405080                 db 0Ah
.text:00405080                 db '                    unless -a is used. Balance number of lines in'
.text:00405080                 db ' the',0Ah
.text:00405080                 db '                    columns on each page.',0Ah,0
.text:004051CF                 align 20h
.text:004051E0 aAAcrossPrintCo db '  -a, --across      print columns across rather than down, used t'
.text:004051E0                                         ; DATA XREF: sub_4060C0+C5↓o
.text:004051E0                 db 'ogether',0Ah
.text:004051E0                 db '                    with -COLUMN',0Ah
.text:004051E0                 db '  -c, --show-control-chars',0Ah
.text:004051E0                 db '                    use hat notation (^G) and octal backslash not'
.text:004051E0                 db 'ation',0Ah
.text:004051E0                 db '  -d, --double-space',0Ah
.text:004051E0                 db '                    double space the output',0Ah,0
.text:004052EE                 align 20h
.text:00405300 aDDateFormatFor db '  -D, --date-format=FORMAT',0Ah
.text:00405300                                         ; DATA XREF: sub_4060C0+E7↓o
.text:00405300                 db '                    use FORMAT for the header date',0Ah
.text:00405300                 db '  -e[CHAR[WIDTH]], --expand-tabs[=CHAR[WIDTH]]',0Ah
.text:00405300                 db '                    expand input CHARs (TABs) to tab WIDTH (8)',0Ah
.text:00405300                 db '  -F, -f, --form-feed',0Ah
.text:00405300                 db '                    use form feeds instead of newlines to separat'
.text:00405300                 db 'e pages',0Ah
.text:00405300                 db '                    (by a 3-line page header with -F or a 5-line '
.text:00405300                 db 'header',0Ah
.text:00405300                 db '                    and trailer without -F)',0Ah,0
.text:00405490                 align 20h
.text:004054A0 aHHeaderHeaderH db '  -h HEADER, --header=HEADER',0Ah
.text:004054A0                                         ; DATA XREF: sub_4060C0+109↓o
.text:004054A0                 db '                    use a centered HEADER instead of filename in '
.text:004054A0                 db 'page header,',0Ah
.text:004054A0                 db '                    -h "" prints a blank line, don',27h,'t use -h'
.text:004054A0                 db '""',0Ah
.text:004054A0                 db '  -i[CHAR[WIDTH]], --output-tabs[=CHAR[WIDTH]]',0Ah
.text:004054A0                 db '                    replace spaces with CHARs (TABs) to tab WIDTH'
.text:004054A0                 db ' (8)',0Ah
.text:004054A0                 db '  -J, --join-lines  merge full lines, turns off -W line truncatio'
.text:004054A0                 db 'n, no column',0Ah
.text:004054A0                 db '                    alignment, --sep-string[=STRING] sets separat'
.text:004054A0                 db 'ors',0Ah,0
.text:00405652                 align 10h
.text:00405660 aLPageLengthLen db '  -l PAGE_LENGTH, --length=PAGE_LENGTH',0Ah
.text:00405660                                         ; DATA XREF: sub_4060C0+12B↓o
.text:00405660                 db '                    set the page length to PAGE_LENGTH (66) lines'
.text:00405660                 db 0Ah
.text:00405660                 db '                    (default number of lines of text 56, and with'
.text:00405660                 db ' -F 63)',0Ah
.text:00405660                 db '  -m, --merge       print all files in parallel, one in each colu'
.text:00405660                 db 'mn,',0Ah
.text:00405660                 db '                    truncate lines, but join lines of full length'
.text:00405660                 db ' with -J',0Ah,0
.text:004057A2                 align 20h
.text:004057C0 aNSepDigitsNumb db '  -n[SEP[DIGITS]], --number-lines[=SEP[DIGITS]]',0Ah
.text:004057C0                                         ; DATA XREF: sub_4060C0+14D↓o
.text:004057C0                 db '                    number lines, use DIGITS (5) digits, then SEP'
.text:004057C0                 db ' (TAB),',0Ah
.text:004057C0                 db '                    default counting starts with 1st line of inpu'
.text:004057C0                 db 't file',0Ah
.text:004057C0                 db '  -N NUMBER, --first-line-number=NUMBER',0Ah
.text:004057C0                 db '                    start counting with NUMBER at 1st line of fir'
.text:004057C0                 db 'st',0Ah
.text:004057C0                 db '                    page printed (see +FIRST_PAGE)',0Ah,0
.text:00405921                 align 20h
.text:00405940 aOMarginIndentM db '  -o MARGIN, --indent=MARGIN',0Ah
.text:00405940                                         ; DATA XREF: sub_4060C0+16F↓o
.text:00405940                 db '                    offset each line with MARGIN (zero) spaces, d'
.text:00405940                 db 'o not',0Ah
.text:00405940                 db '                    affect -w or -W, MARGIN will be added to PAGE'
.text:00405940                 db '_WIDTH',0Ah
.text:00405940                 db '  -r, --no-file-warnings',0Ah
.text:00405940                 db '                    omit warning when a file cannot be opened',0Ah
.text:00405940                 db 0
.text:00405A44                 align 20h
.text:00405A60 aSCharSeparator db '  -s[CHAR],--separator[=CHAR]',0Ah
.text:00405A60                                         ; DATA XREF: sub_4060C0+191↓o
.text:00405A60                 db '                    separate columns by a single character, defau'
.text:00405A60                 db 'lt for CHAR',0Ah
.text:00405A60                 db '                    is the <TAB> character without -w and ',27h,'n'
.text:00405A60                 db 'o char',27h,' with -w',0Ah
.text:00405A60                 db '                    -s[CHAR] turns off line truncation of all 3 c'
.text:00405A60                 db 'olumn',0Ah
.text:00405A60                 db '                    options (-COLUMN|-a -COLUMN|-m) except -w is '
.text:00405A60                 db 'set',0Ah,0
.text:00405BA4                 align 20h
.text:00405BC0 aSstringSepStri db '  -SSTRING, --sep-string[=STRING]',0Ah,0
.text:00405BC0                                         ; DATA XREF: sub_4060C0+1B3↓o
.text:00405BE3                 align 20h
.text:00405C00 aSeparateColumn db '                    separate columns by STRING,',0Ah
.text:00405C00                                         ; DATA XREF: sub_4060C0+1D5↓o
.text:00405C00                 db '                    without -S: Default separator <TAB> with -J a'
.text:00405C00                 db 'nd <space>',0Ah
.text:00405C00                 db '                    otherwise (same as -S" "), no effect on colum'
.text:00405C00                 db 'n options',0Ah
.text:00405C00                 db '  -t, --omit-header omit page headers and trailers',0Ah,0
.text:00405CFB                 align 10h
.text:00405D00 aTOmitPaginatio db '  -T, --omit-pagination',0Ah
.text:00405D00                                         ; DATA XREF: sub_4060C0+1F7↓o
.text:00405D00                 db '                    omit page headers and trailers, eliminate any'
.text:00405D00                 db ' pagination',0Ah
.text:00405D00                 db '                    by form feeds set in input files',0Ah
.text:00405D00                 db '  -v, --show-nonprinting',0Ah
.text:00405D00                 db '                    use octal backslash notation',0Ah
.text:00405D00                 db '  -w PAGE_WIDTH, --width=PAGE_WIDTH',0Ah
.text:00405D00                 db '                    set page width to PAGE_WIDTH (72) characters '
.text:00405D00                 db 'for',0Ah
.text:00405D00                 db '                    multiple text-column output only, -s[char] tu'
.text:00405D00                 db 'rns off (72)',0Ah,0
.text:00405E9C                 align 10h
.text:00405EA0 aWPageWidthPage db '  -W PAGE_WIDTH, --page-width=PAGE_WIDTH',0Ah
.text:00405EA0                                         ; DATA XREF: sub_4060C0+219↓o
.text:00405EA0                 db '                    set page width to PAGE_WIDTH (72) characters '
.text:00405EA0                 db 'always,',0Ah
.text:00405EA0                 db '                    truncate lines, except -J option is set, no i'
.text:00405EA0                 db 'nterference',0Ah
.text:00405EA0                 db '                    with -S or -s',0Ah,0
.text:00405F82                 align 20h
.text:00405FA0 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.text:00405FA0                                         ; DATA XREF: sub_4060C0+23B↓o
.text:00405FCD                 align 20h
.text:00405FE0 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.text:00405FE0                                         ; DATA XREF: sub_4060C0+25D↓o
.text:00406016                 align 10h
.text:00406020 aTImpliedByLNnW db 0Ah                  ; DATA XREF: sub_4060C0+27F↓o
.text:00406020                 db '-T implied by -l nn when nn <= 10 or <= 3 with -F. With no FILE, '
.text:00406020                 db 'or when',0Ah
.text:00406020                 db 'FILE is -, read standard input.',0Ah,0
.text:0040608B aReportBugsToS  db 0Ah                  ; DATA XREF: sub_4060C0+2A1↓o
.text:0040608B                 db 'Report bugs to <%s>.',0Ah,0
.text:004060A2 aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.text:004060A2                                         ; DATA XREF: sub_4060C0+2AE↓o
.text:004060B8                 align 10h
.text:004060C0
.text:004060C0 ; =============== S U B R O U T I N E =======================================
.text:004060C0
.text:004060C0 ; Attributes: noreturn
.text:004060C0
.text:004060C0 ; void __cdecl __noreturn sub_4060C0(int Code)
.text:004060C0 sub_4060C0      proc near               ; CODE XREF: sub_401910:loc_402030↑p
.text:004060C0                                         ; sub_402960+AD↑p
.text:004060C0
.text:004060C0 Stream          = dword ptr -1Ch
.text:004060C0 Format          = dword ptr -18h
.text:004060C0 var_14          = dword ptr -14h
.text:004060C0 Code            = dword ptr  4
.text:004060C0
.text:004060C0                 push    ebx
.text:004060C1                 sub     esp, 18h
.text:004060C4                 mov     ebx, [esp+1Ch+Code]
.text:004060C8                 test    ebx, ebx
.text:004060CA                 jz      short loc_406100
.text:004060CC                 mov     [esp+1Ch+Stream], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:004060D3                 call    ds:libintl_gettext
.text:004060D9                 mov     edx, ds:_iob
.text:004060DF                 mov     ecx, ds:dword_41E810
.text:004060E5                 add     edx, 40h ; '@'
.text:004060E8                 mov     [esp+1Ch+var_14], ecx
.text:004060EC                 mov     [esp+1Ch+Format], eax ; Format
.text:004060F0                 mov     [esp+1Ch+Stream], edx ; Stream
.text:004060F3                 call    fprintf
.text:004060F8
.text:004060F8 loc_4060F8:                             ; CODE XREF: sub_4060C0+2BE↓j
.text:004060F8                 mov     [esp+1Ch+Stream], ebx ; Code
.text:004060FB                 call    exit
.text:00406100 ; ---------------------------------------------------------------------------
.text:00406100
.text:00406100 loc_406100:                             ; CODE XREF: sub_4060C0+A↑j
.text:00406100                 mov     [esp+1Ch+Stream], offset aUsageSOptionFi ; "Usage: %s [OPTION]... [FILE]...\n"
.text:00406107                 call    ds:libintl_gettext
.text:0040610D                 mov     ecx, ds:dword_41E810
.text:00406113                 mov     [esp+1Ch+Stream], eax ; Format
.text:00406116                 mov     [esp+1Ch+Format], ecx
.text:0040611A                 call    printf
.text:0040611F                 mov     [esp+1Ch+Stream], offset aPaginateOrColu ; "Paginate or columnate FILE(s) for print"...
.text:00406126                 call    ds:libintl_gettext
.text:0040612C                 mov     ecx, ds:_iob
.text:00406132                 add     ecx, 20h ; ' '
.text:00406135                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00406139                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:0040613C                 call    fputs
.text:00406141                 mov     [esp+1Ch+Stream], offset aMandatoryArgum ; "Mandatory arguments to long options are"...
.text:00406148                 call    ds:libintl_gettext
.text:0040614E                 mov     ecx, ds:_iob
.text:00406154                 add     ecx, 20h ; ' '
.text:00406157                 mov     [esp+1Ch+Format], ecx ; Stream
.text:0040615B                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:0040615E                 call    fputs
.text:00406163                 mov     [esp+1Ch+Stream], offset aFirstPageLastP ; "  +FIRST_PAGE[:LAST_PAGE], --pages=FIRS"...
.text:0040616A                 call    ds:libintl_gettext
.text:00406170                 mov     ecx, ds:_iob
.text:00406176                 add     ecx, 20h ; ' '
.text:00406179                 mov     [esp+1Ch+Format], ecx ; Stream
.text:0040617D                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00406180                 call    fputs
.text:00406185                 mov     [esp+1Ch+Stream], offset aAAcrossPrintCo ; "  -a, --across      print columns acros"...
.text:0040618C                 call    ds:libintl_gettext
.text:00406192                 mov     ecx, ds:_iob
.text:00406198                 add     ecx, 20h ; ' '
.text:0040619B                 mov     [esp+1Ch+Format], ecx ; Stream
.text:0040619F                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:004061A2                 call    fputs
.text:004061A7                 mov     [esp+1Ch+Stream], offset aDDateFormatFor ; "  -D, --date-format=FORMAT\n           "...
.text:004061AE                 call    ds:libintl_gettext
.text:004061B4                 mov     ecx, ds:_iob
.text:004061BA                 add     ecx, 20h ; ' '
.text:004061BD                 mov     [esp+1Ch+Format], ecx ; Stream
.text:004061C1                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:004061C4                 call    fputs
.text:004061C9                 mov     [esp+1Ch+Stream], offset aHHeaderHeaderH ; "  -h HEADER, --header=HEADER\n         "...
.text:004061D0                 call    ds:libintl_gettext
.text:004061D6                 mov     ecx, ds:_iob
.text:004061DC                 add     ecx, 20h ; ' '
.text:004061DF                 mov     [esp+1Ch+Format], ecx ; Stream
.text:004061E3                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:004061E6                 call    fputs
.text:004061EB                 mov     [esp+1Ch+Stream], offset aLPageLengthLen ; "  -l PAGE_LENGTH, --length=PAGE_LENGTH"...
.text:004061F2                 call    ds:libintl_gettext
.text:004061F8                 mov     ecx, ds:_iob
.text:004061FE                 add     ecx, 20h ; ' '
.text:00406201                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00406205                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00406208                 call    fputs
.text:0040620D                 mov     [esp+1Ch+Stream], offset aNSepDigitsNumb ; "  -n[SEP[DIGITS]], --number-lines[=SEP["...
.text:00406214                 call    ds:libintl_gettext
.text:0040621A                 mov     ecx, ds:_iob
.text:00406220                 add     ecx, 20h ; ' '
.text:00406223                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00406227                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:0040622A                 call    fputs
.text:0040622F                 mov     [esp+1Ch+Stream], offset aOMarginIndentM ; "  -o MARGIN, --indent=MARGIN\n         "...
.text:00406236                 call    ds:libintl_gettext
.text:0040623C                 mov     ecx, ds:_iob
.text:00406242                 add     ecx, 20h ; ' '
.text:00406245                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00406249                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:0040624C                 call    fputs
.text:00406251                 mov     [esp+1Ch+Stream], offset aSCharSeparator ; "  -s[CHAR],--separator[=CHAR]\n        "...
.text:00406258                 call    ds:libintl_gettext
.text:0040625E                 mov     ecx, ds:_iob
.text:00406264                 add     ecx, 20h ; ' '
.text:00406267                 mov     [esp+1Ch+Format], ecx ; Stream
.text:0040626B                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:0040626E                 call    fputs
.text:00406273                 mov     [esp+1Ch+Stream], offset aSstringSepStri ; "  -SSTRING, --sep-string[=STRING]\n"
.text:0040627A                 call    ds:libintl_gettext
.text:00406280                 mov     ecx, ds:_iob
.text:00406286                 add     ecx, 20h ; ' '
.text:00406289                 mov     [esp+1Ch+Format], ecx ; Stream
.text:0040628D                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00406290                 call    fputs
.text:00406295                 mov     [esp+1Ch+Stream], offset aSeparateColumn ; "                    separate columns by"...
.text:0040629C                 call    ds:libintl_gettext
.text:004062A2                 mov     ecx, ds:_iob
.text:004062A8                 add     ecx, 20h ; ' '
.text:004062AB                 mov     [esp+1Ch+Format], ecx ; Stream
.text:004062AF                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:004062B2                 call    fputs
.text:004062B7                 mov     [esp+1Ch+Stream], offset aTOmitPaginatio ; "  -T, --omit-pagination\n              "...
.text:004062BE                 call    ds:libintl_gettext
.text:004062C4                 mov     ecx, ds:_iob
.text:004062CA                 add     ecx, 20h ; ' '
.text:004062CD                 mov     [esp+1Ch+Format], ecx ; Stream
.text:004062D1                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:004062D4                 call    fputs
.text:004062D9                 mov     [esp+1Ch+Stream], offset aWPageWidthPage ; "  -W PAGE_WIDTH, --page-width=PAGE_WIDT"...
.text:004062E0                 call    ds:libintl_gettext
.text:004062E6                 mov     ecx, ds:_iob
.text:004062EC                 add     ecx, 20h ; ' '
.text:004062EF                 mov     [esp+1Ch+Format], ecx ; Stream
.text:004062F3                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:004062F6                 call    fputs
.text:004062FB                 mov     [esp+1Ch+Stream], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:00406302                 call    ds:libintl_gettext
.text:00406308                 mov     ecx, ds:_iob
.text:0040630E                 add     ecx, 20h ; ' '
.text:00406311                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00406315                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00406318                 call    fputs
.text:0040631D                 mov     [esp+1Ch+Stream], offset aVersionOutputV ; "      --version  output version informa"...
.text:00406324                 call    ds:libintl_gettext
.text:0040632A                 mov     ecx, ds:_iob
.text:00406330                 add     ecx, 20h ; ' '
.text:00406333                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00406337                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:0040633A                 call    fputs
.text:0040633F                 mov     [esp+1Ch+Stream], offset aTImpliedByLNnW ; "\n-T implied by -l nn when nn <= 10 or "...
.text:00406346                 call    ds:libintl_gettext
.text:0040634C                 mov     ecx, ds:_iob
.text:00406352                 add     ecx, 20h ; ' '
.text:00406355                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00406359                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:0040635C                 call    fputs
.text:00406361                 mov     [esp+1Ch+Stream], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:00406368                 call    ds:libintl_gettext
.text:0040636E                 mov     [esp+1Ch+Format], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:00406376                 mov     [esp+1Ch+Stream], eax ; Format
.text:00406379                 call    printf
.text:0040637E                 jmp     loc_4060F8
.text:0040637E sub_4060C0      endp
.text:0040637E
.text:0040637E ; ---------------------------------------------------------------------------
.text:00406383 aPageWidthTooNa db 'page width too narrow',0
.text:00406383                                         ; DATA XREF: sub_4063A0:loc_4065A3↓o
.text:00406399                 align 10h
.text:004063A0
.text:004063A0 ; =============== S U B R O U T I N E =======================================
.text:004063A0
.text:004063A0
.text:004063A0 sub_4063A0      proc near               ; CODE XREF: sub_402B00+E↑p
.text:004063A0
.text:004063A0 Block           = dword ptr -2Ch
.text:004063A0 ErrorMessage    = dword ptr -28h
.text:004063A0 var_24          = dword ptr -24h
.text:004063A0 var_11          = byte ptr -11h
.text:004063A0 arg_0           = dword ptr  4
.text:004063A0
.text:004063A0                 push    ebp
.text:004063A1                 xor     ebp, ebp
.text:004063A3                 push    edi
.text:004063A4                 push    esi
.text:004063A5                 push    ebx
.text:004063A6                 sub     esp, 1Ch
.text:004063A9                 mov     ecx, [esp+2Ch+arg_0]
.text:004063AD                 cmp     ds:byte_41E040, 0
.text:004063B4                 jz      short loc_4063C9
.text:004063B6                 mov     edx, 3
.text:004063BB                 mov     dword_41D018, edx
.text:004063C1                 xor     edx, edx
.text:004063C3                 mov     dword_41D01C, edx
.text:004063C9
.text:004063C9 loc_4063C9:                             ; CODE XREF: sub_4063A0+14↑j
.text:004063C9                 mov     edx, dword_41D014
.text:004063CF                 mov     esi, dword_41D018
.text:004063D5                 mov     eax, dword_41D01C
.text:004063DA                 mov     ebx, edx
.text:004063DC                 sub     ebx, esi
.text:004063DE                 sub     ebx, eax
.text:004063E0                 mov     ds:dword_41E230, ebx
.text:004063E6                 test    ebx, ebx
.text:004063E8                 jle     loc_406637
.text:004063EE
.text:004063EE loc_4063EE:                             ; CODE XREF: sub_4063A0+2A5↓j
.text:004063EE                 cmp     byte_41D010, 0
.text:004063F5                 jnz     short loc_4063FD
.text:004063F7                 mov     ds:dword_41E230, edx
.text:004063FD
.text:004063FD loc_4063FD:                             ; CODE XREF: sub_4063A0+55↑j
.text:004063FD                 cmp     ds:byte_41E130, 0
.text:00406404                 jz      short loc_40641B
.text:00406406                 mov     edi, ds:dword_41E230
.text:0040640C                 mov     ebx, edi
.text:0040640E                 shr     ebx, 1Fh
.text:00406411                 add     edi, ebx
.text:00406413                 sar     edi, 1
.text:00406415                 mov     ds:dword_41E230, edi
.text:0040641B
.text:0040641B loc_40641B:                             ; CODE XREF: sub_4063A0+64↑j
.text:0040641B                 test    ecx, ecx
.text:0040641D                 jnz     short loc_406426
.text:0040641F                 mov     ds:byte_41E000, 0
.text:00406426
.text:00406426 loc_406426:                             ; CODE XREF: sub_4063A0+7D↑j
.text:00406426                 movzx   edx, ds:byte_41E000
.text:0040642D                 test    dl, dl
.text:0040642F                 mov     [esp+2Ch+var_11], dl
.text:00406433                 jz      short loc_40643B
.text:00406435                 mov     dword_41D034, ecx
.text:0040643B
.text:0040643B loc_40643B:                             ; CODE XREF: sub_4063A0+93↑j
.text:0040643B                 cmp     byte_41D011, 0
.text:00406442                 jz      short loc_40644B
.text:00406444                 mov     ds:byte_41E070, 1
.text:0040644B
.text:0040644B loc_40644B:                             ; CODE XREF: sub_4063A0+A2↑j
.text:0040644B                 mov     esi, dword_41D034
.text:00406451                 cmp     esi, 1
.text:00406454                 jle     loc_406624
.text:0040645A                 cmp     ds:byte_41E160, 0
.text:00406461                 jnz     loc_4065F5
.text:00406467                 movzx   edx, ds:byte_41E090
.text:0040646E                 test    dl, dl
.text:00406470                 jz      loc_4065EB
.text:00406476                 mov     eax, off_41D05C
.text:0040647B
.text:0040647B loc_40647B:                             ; CODE XREF: sub_4063A0+250↓j
.text:0040647B                 mov     off_41D054, eax
.text:00406480                 mov     ecx, 1
.text:00406485                 mov     ds:dword_41E170, ecx
.text:0040648B                 mov     ds:byte_41E160, 1
.text:00406492
.text:00406492 loc_406492:                             ; CODE XREF: sub_4063A0+25E↓j
.text:00406492                                         ; sub_4063A0+26D↓j ...
.text:00406492                 mov     ds:byte_41E080, 1
.text:00406499                 mov     ds:byte_41E0A0, 1
.text:004064A0                 mov     ds:byte_41E0B0, 1
.text:004064A7
.text:004064A7 loc_4064A7:                             ; CODE XREF: sub_4063A0+292↓j
.text:004064A7                 test    dl, dl
.text:004064A9                 jz      short loc_4064B2
.text:004064AB                 mov     ds:byte_41E080, 0
.text:004064B2
.text:004064B2 loc_4064B2:                             ; CODE XREF: sub_4063A0+109↑j
.text:004064B2                 movzx   ebx, ds:byte_41E100
.text:004064B9                 test    bl, bl
.text:004064BB                 jz      short loc_40651F
.text:004064BD                 cmp     byte_41D040, 9
.text:004064C4                 mov     edi, 8
.text:004064C9                 mov     edx, dword_41D04C
.text:004064CF                 mov     dword_41D044, edx
.text:004064D5                 jz      loc_4065D4
.text:004064DB                 mov     ecx, dword_41D050
.text:004064E1                 lea     eax, [ecx+1]
.text:004064E4
.text:004064E4 loc_4064E4:                             ; CODE XREF: sub_4063A0+246↓j
.text:004064E4                 cmp     [esp+2Ch+var_11], 0
.text:004064E9                 mov     ds:dword_41E2B0, eax
.text:004064EE                 jz      short loc_4064F6
.text:004064F0                 mov     ebp, ds:dword_41E2B0
.text:004064F6
.text:004064F6 loc_4064F6:                             ; CODE XREF: sub_4063A0+14E↑j
.text:004064F6                 mov     edi, 1
.text:004064FB                 test    ecx, ecx
.text:004064FD                 mov     edx, ecx
.text:004064FF                 mov     ds:dword_41E2A0, edi
.text:00406505                 mov     eax, 1
.text:0040650A                 jle     short loc_40651F
.text:0040650C                 lea     esi, [esi+0]
.text:00406510
.text:00406510 loc_406510:                             ; CODE XREF: sub_4063A0+178↓j
.text:00406510                 lea     eax, [eax+eax*4]
.text:00406513                 dec     edx
.text:00406514                 add     eax, eax
.text:00406516                 test    edx, edx
.text:00406518                 jg      short loc_406510
.text:0040651A                 mov     ds:dword_41E2A0, eax
.text:0040651F
.text:0040651F loc_40651F:                             ; CODE XREF: sub_4063A0+11B↑j
.text:0040651F                                         ; sub_4063A0+16A↑j
.text:0040651F                 mov     eax, dword_41D020
.text:00406524                 mov     ecx, ds:dword_41E170
.text:0040652A                 sub     eax, ebp
.text:0040652C                 lea     ebp, [esi-1]
.text:0040652F                 imul    ebp, ecx
.text:00406532                 sub     eax, ebp
.text:00406534                 cdq
.text:00406535                 idiv    esi
.text:00406537                 test    eax, eax
.text:00406539                 mov     ds:dword_41E240, eax
.text:0040653E                 jle     short loc_4065A3
.text:00406540
.text:00406540 loc_406540:                             ; CODE XREF: sub_4063A0+22F↓j
.text:00406540                 test    bl, bl
.text:00406542                 jz      short loc_406562
.text:00406544                 mov     eax, ds:Buffer
.text:00406549                 test    eax, eax
.text:0040654B                 jnz     short loc_406599
.text:0040654D
.text:0040654D loc_40654D:                             ; CODE XREF: sub_4063A0+201↓j
.text:0040654D                 mov     esi, dword_41D050
.text:00406553                 add     esi, esi
.text:00406555                 mov     [esp+2Ch+Block], esi ; size_t
.text:00406558                 call    sub_4081B0
.text:0040655D                 mov     ds:Buffer, eax
.text:00406562
.text:00406562 loc_406562:                             ; CODE XREF: sub_4063A0+1A2↑j
.text:00406562                 mov     eax, ds:dword_41E350
.text:00406567                 test    eax, eax
.text:00406569                 jnz     short loc_40658F
.text:0040656B
.text:0040656B loc_40656B:                             ; CODE XREF: sub_4063A0+1F7↓j
.text:0040656B                 mov     eax, dword_41D028
.text:00406570                 cmp     eax, 8
.text:00406573                 jge     short loc_40657A
.text:00406575                 mov     eax, 8
.text:0040657A
.text:0040657A loc_40657A:                             ; CODE XREF: sub_4063A0+1D3↑j
.text:0040657A                 mov     [esp+2Ch+Block], eax ; size_t
.text:0040657D                 call    sub_4081B0
.text:00406582                 mov     ds:dword_41E350, eax
.text:00406587                 add     esp, 1Ch
.text:0040658A                 pop     ebx
.text:0040658B                 pop     esi
.text:0040658C                 pop     edi
.text:0040658D                 pop     ebp
.text:0040658E                 retn
.text:0040658F ; ---------------------------------------------------------------------------
.text:0040658F
.text:0040658F loc_40658F:                             ; CODE XREF: sub_4063A0+1C9↑j
.text:0040658F                 mov     [esp+2Ch+Block], eax ; Block
.text:00406592                 call    free
.text:00406597                 jmp     short loc_40656B
.text:00406599 ; ---------------------------------------------------------------------------
.text:00406599
.text:00406599 loc_406599:                             ; CODE XREF: sub_4063A0+1AB↑j
.text:00406599                 mov     [esp+2Ch+Block], eax ; Block
.text:0040659C                 call    free
.text:004065A1                 jmp     short loc_40654D
.text:004065A3 ; ---------------------------------------------------------------------------
.text:004065A3
.text:004065A3 loc_4065A3:                             ; CODE XREF: sub_4063A0+19E↑j
.text:004065A3                 mov     [esp+2Ch+Block], offset aPageWidthTooNa ; "page width too narrow"
.text:004065AA                 call    ds:libintl_gettext
.text:004065B0                 mov     [esp+2Ch+ErrorMessage], 0 ; ErrorMessage
.text:004065B8                 mov     [esp+2Ch+Block], 1 ; Code
.text:004065BF                 mov     [esp+2Ch+var_24], eax ; char *
.text:004065C3                 call    sub_40A7B0
.text:004065C8                 movzx   ebx, ds:byte_41E100
.text:004065CF                 jmp     loc_406540
.text:004065D4 ; ---------------------------------------------------------------------------
.text:004065D4
.text:004065D4 loc_4065D4:                             ; CODE XREF: sub_4063A0+135↑j
.text:004065D4                 mov     ecx, dword_41D050
.text:004065DA                 mov     eax, ecx
.text:004065DC                 cdq
.text:004065DD                 idiv    edi
.text:004065DF                 mov     eax, edi
.text:004065E1                 sub     eax, edx
.text:004065E3                 lea     eax, [eax+ecx]
.text:004065E6                 jmp     loc_4064E4
.text:004065EB ; ---------------------------------------------------------------------------
.text:004065EB
.text:004065EB loc_4065EB:                             ; CODE XREF: sub_4063A0+D0↑j
.text:004065EB                 mov     eax, off_41D058
.text:004065F0                 jmp     loc_40647B
.text:004065F5 ; ---------------------------------------------------------------------------
.text:004065F5
.text:004065F5 loc_4065F5:                             ; CODE XREF: sub_4063A0+C1↑j
.text:004065F5                 movzx   edx, ds:byte_41E090
.text:004065FC                 test    dl, dl
.text:004065FE                 jnz     loc_406492
.text:00406604                 mov     edi, off_41D054
.text:0040660A                 cmp     byte ptr [edi], 9
.text:0040660D                 jnz     loc_406492
.text:00406613                 mov     ebx, off_41D058
.text:00406619                 mov     off_41D054, ebx
.text:0040661F                 jmp     loc_406492
.text:00406624 ; ---------------------------------------------------------------------------
.text:00406624
.text:00406624 loc_406624:                             ; CODE XREF: sub_4063A0+B4↑j
.text:00406624                 movzx   edx, ds:byte_41E090
.text:0040662B                 mov     byte_41D011, 0
.text:00406632                 jmp     loc_4064A7
.text:00406637 ; ---------------------------------------------------------------------------
.text:00406637
.text:00406637 loc_406637:                             ; CODE XREF: sub_4063A0+48↑j
.text:00406637                 mov     byte_41D010, 0
.text:0040663E                 mov     ds:byte_41E020, 1
.text:00406645                 jmp     loc_4063EE
.text:00406645 sub_4063A0      endp
.text:00406645
.text:00406645 ; ---------------------------------------------------------------------------
.text:0040664A                 align 10h
.text:00406650
.text:00406650 ; =============== S U B R O U T I N E =======================================
.text:00406650
.text:00406650
.text:00406650 sub_406650      proc near               ; CODE XREF: sub_402B00+1E↑p
.text:00406650
.text:00406650 Block           = dword ptr -1Ch
.text:00406650 var_18          = dword ptr -18h
.text:00406650 arg_0           = dword ptr  4
.text:00406650 arg_4           = dword ptr  8
.text:00406650
.text:00406650                 push    ebp
.text:00406651                 xor     edx, edx
.text:00406653                 push    edi
.text:00406654                 push    esi
.text:00406655                 push    ebx
.text:00406656                 sub     esp, 0Ch
.text:00406659                 mov     eax, ds:dword_41E190
.text:0040665E                 mov     ds:dword_41E140, edx
.text:00406664                 mov     ebp, [esp+1Ch+arg_0]
.text:00406668                 mov     edi, [esp+1Ch+arg_4]
.text:0040666C                 test    eax, eax
.text:0040666E                 jnz     loc_4067C3
.text:00406674
.text:00406674 loc_406674:                             ; CODE XREF: sub_406650+17B↓j
.text:00406674                 mov     [esp+1Ch+var_18], 28h ; '('
.text:0040667C                 mov     edx, dword_41D034
.text:00406682                 mov     [esp+1Ch+Block], edx
.text:00406685                 call    sub_408170
.text:0040668A                 cmp     ds:byte_41E000, 0
.text:00406691                 mov     esi, eax
.text:00406693                 mov     ds:dword_41E190, eax
.text:00406698                 jz      short loc_406714
.text:0040669A                 lea     esi, [ebp-1]
.text:0040669D                 mov     ebx, eax
.text:0040669F                 cmp     esi, 0FFFFFFFFh
.text:004066A2                 jz      short loc_4066D7
.text:004066A4                 lea     esi, [esi+0]
.text:004066AA                 lea     edi, [edi+0]
.text:004066B0
.text:004066B0 loc_4066B0:                             ; CODE XREF: sub_406650+85↓j
.text:004066B0                 mov     [esp+1Ch+var_18], ebx ; int
.text:004066B4                 mov     ecx, [edi]
.text:004066B6                 mov     [esp+1Ch+Block], ecx ; char *
.text:004066B9                 call    sub_402A20
.text:004066BE                 test    al, al
.text:004066C0                 jnz     short loc_4066CB
.text:004066C2                 dec     dword_41D034
.text:004066C8                 sub     ebx, 28h ; '('
.text:004066CB
.text:004066CB loc_4066CB:                             ; CODE XREF: sub_406650+70↑j
.text:004066CB                 dec     esi
.text:004066CC                 add     ebx, 28h ; '('
.text:004066CF                 add     edi, 4
.text:004066D2                 cmp     esi, 0FFFFFFFFh
.text:004066D5                 jnz     short loc_4066B0
.text:004066D7
.text:004066D7 loc_4066D7:                             ; CODE XREF: sub_406650+52↑j
.text:004066D7                 mov     ebx, dword_41D034
.text:004066DD                 test    ebx, ebx
.text:004066DF                 jnz     short loc_4066ED
.text:004066E1                 xor     edx, edx
.text:004066E3
.text:004066E3 loc_4066E3:                             ; CODE XREF: sub_406650+C2↓j
.text:004066E3                                         ; sub_406650+DC↓j
.text:004066E3                 add     esp, 0Ch
.text:004066E6                 mov     eax, edx
.text:004066E8                 pop     ebx
.text:004066E9                 pop     esi
.text:004066EA                 pop     edi
.text:004066EB                 pop     ebp
.text:004066EC                 retn
.text:004066ED ; ---------------------------------------------------------------------------
.text:004066ED
.text:004066ED loc_4066ED:                             ; CODE XREF: sub_406650+8F↑j
.text:004066ED                 mov     [esp+1Ch+var_18], 0FFFFFFFFh
.text:004066F5                 mov     [esp+1Ch+Block], offset Locale
.text:004066FC                 call    sub_402BB0
.text:00406701
.text:00406701 loc_406701:                             ; CODE XREF: sub_406650+106↓j
.text:00406701                                         ; sub_406650+12D↓j
.text:00406701                 mov     esi, ds:dword_41E140
.text:00406707                 mov     edx, 1
.text:0040670C                 mov     ds:dword_41E0F0, esi
.text:00406712                 jmp     short loc_4066E3
.text:00406714 ; ---------------------------------------------------------------------------
.text:00406714
.text:00406714 loc_406714:                             ; CODE XREF: sub_406650+48↑j
.text:00406714                 test    ebp, ebp
.text:00406716                 mov     ebx, eax
.text:00406718                 jle     short loc_40677F
.text:0040671A                 mov     [esp+1Ch+var_18], eax ; int
.text:0040671E                 mov     ebp, [edi]
.text:00406720                 mov     [esp+1Ch+Block], ebp ; char *
.text:00406723                 call    sub_402A20
.text:00406728                 xor     edx, edx
.text:0040672A                 test    al, al
.text:0040672C                 jz      short loc_4066E3
.text:0040672E                 mov     ebp, [esi]
.text:00406730                 mov     ecx, [ebp+10h]
.text:00406733                 mov     [esp+1Ch+var_18], ecx
.text:00406737                 mov     edx, [edi]
.text:00406739                 mov     [esp+1Ch+Block], edx
.text:0040673C
.text:0040673C loc_40673C:                             ; CODE XREF: sub_406650+16E↓j
.text:0040673C                 call    sub_402BB0
.text:00406741                 mov     dword ptr [ebx+18h], 0
.text:00406748                 mov     eax, dword_41D034
.text:0040674D                 lea     ebx, [esi+28h]
.text:00406750                 mov     ecx, [esi+4]
.text:00406753                 mov     edx, [esi]
.text:00406755                 dec     eax
.text:00406756                 jz      short loc_406701
.text:00406758                 nop
.text:00406759                 lea     esi, [esi+0]
.text:00406760
.text:00406760 loc_406760:                             ; CODE XREF: sub_406650+12B↓j
.text:00406760                 mov     [ebx+4], ecx
.text:00406763                 mov     [ebx], edx
.text:00406765                 mov     dword ptr [ebx+8], 0
.text:0040676C                 mov     byte ptr [ebx+25h], 0
.text:00406770                 mov     dword ptr [ebx+18h], 0
.text:00406777                 add     ebx, 28h ; '('
.text:0040677A                 dec     eax
.text:0040677B                 jnz     short loc_406760
.text:0040677D                 jmp     short loc_406701
.text:0040677F ; ---------------------------------------------------------------------------
.text:0040677F
.text:0040677F loc_40677F:                             ; CODE XREF: sub_406650+C8↑j
.text:0040677F                 mov     [esp+1Ch+Block], offset aStandardInput ; "standard input"
.text:00406786                 call    ds:libintl_gettext
.text:0040678C                 inc     ds:dword_41E140
.text:00406792                 mov     ds:byte_41E050, 1
.text:00406799                 mov     [esi+4], eax
.text:0040679C                 mov     edi, ds:_iob
.text:004067A2                 mov     dword ptr [esi+8], 0
.text:004067A9                 mov     byte ptr [esi+25h], 0
.text:004067AD                 mov     [esi], edi
.text:004067AF                 mov     [esp+1Ch+var_18], 0FFFFFFFFh
.text:004067B7                 mov     [esp+1Ch+Block], offset Locale
.text:004067BE                 jmp     loc_40673C
.text:004067C3 ; ---------------------------------------------------------------------------
.text:004067C3
.text:004067C3 loc_4067C3:                             ; CODE XREF: sub_406650+1E↑j
.text:004067C3                 mov     [esp+1Ch+Block], eax ; Block
.text:004067C6                 call    free
.text:004067CB                 jmp     loc_406674
.text:004067CB sub_406650      endp
.text:004067CB
.text:004067D0
.text:004067D0 ; =============== S U B R O U T I N E =======================================
.text:004067D0
.text:004067D0
.text:004067D0 sub_4067D0      proc near               ; CODE XREF: sub_402B00:loc_402B6D↑p
.text:004067D0
.text:004067D0 var_18          = dword ptr -18h
.text:004067D0 var_14          = dword ptr -14h
.text:004067D0
.text:004067D0                 push    ebp
.text:004067D1                 push    edi
.text:004067D2                 push    esi
.text:004067D3                 push    ebx
.text:004067D4                 sub     esp, 8
.text:004067D7                 mov     edx, ds:dword_41E0C0
.text:004067DD                 cmp     ds:byte_41E080, 0
.text:004067E4                 jnz     loc_406933
.text:004067EA                 movzx   ebx, ds:byte_41E100
.text:004067F1                 xor     edi, edi
.text:004067F3
.text:004067F3 loc_4067F3:                             ; CODE XREF: sub_4067D0+188↓j
.text:004067F3                 mov     ebp, ds:dword_41E170
.text:004067F9                 mov     esi, 1
.text:004067FE                 mov     ecx, dword_41D034
.text:00406804                 mov     eax, ds:dword_41E190
.text:00406809                 add     edx, ebp
.text:0040680B                 cmp     esi, ecx
.text:0040680D                 jge     loc_40689F
.text:00406813                 mov     [esp+18h+var_14], ebp
.text:00406817                 mov     ebp, ds:dword_41E240
.text:0040681D                 mov     [esp+18h+var_18], ebp
.text:00406820                 mov     ebp, ecx
.text:00406822                 lea     esi, [esi+0]
.text:00406829                 lea     edi, [edi+0]
.text:00406830
.text:00406830 loc_406830:                             ; CODE XREF: sub_4067D0+C6↓j
.text:00406830                 cmp     byte_41D011, 0
.text:00406837                 jz      loc_406920
.text:0040683D                 mov     dword ptr [eax+10h], offset sub_406970
.text:00406844                 mov     dword ptr [eax+0Ch], offset sub_4047B0
.text:0040684B
.text:0040684B loc_40684B:                             ; CODE XREF: sub_4067D0+15E↓j
.text:0040684B                 xor     ecx, ecx
.text:0040684D                 test    bl, bl
.text:0040684F                 jz      short loc_406870
.text:00406851                 cmp     ds:byte_41E000, 0
.text:00406858                 jz      loc_406914
.text:0040685E                 cmp     esi, 1
.text:00406861                 jz      loc_406914
.text:00406867                 mov     esi, esi
.text:00406869                 lea     edi, [edi+0]
.text:00406870
.text:00406870 loc_406870:                             ; CODE XREF: sub_4067D0+7F↑j
.text:00406870                                         ; sub_4067D0+146↓j
.text:00406870                 mov     [eax+24h], cl
.text:00406873                 cmp     ds:byte_41E080, 0
.text:0040687A                 mov     [eax+20h], edx
.text:0040687D                 jnz     loc_406902
.text:00406883                 xor     edx, edx
.text:00406885                 xor     edi, edi
.text:00406887
.text:00406887 loc_406887:                             ; CODE XREF: sub_4067D0+13F↓j
.text:00406887                 inc     esi
.text:00406888                 add     eax, 28h ; '('
.text:0040688B                 cmp     esi, ebp
.text:0040688D                 jge     short loc_406898
.text:0040688F                 movzx   ebx, ds:byte_41E100
.text:00406896                 jmp     short loc_406830
.text:00406898 ; ---------------------------------------------------------------------------
.text:00406898
.text:00406898 loc_406898:                             ; CODE XREF: sub_4067D0+BD↑j
.text:00406898                 movzx   ebx, ds:byte_41E100
.text:0040689F
.text:0040689F loc_40689F:                             ; CODE XREF: sub_4067D0+3D↑j
.text:0040689F                 cmp     ds:byte_41E070, 0
.text:004068A6                 jz      short loc_4068F2
.text:004068A8                 cmp     byte_41D011, 0
.text:004068AF                 jz      short loc_4068F2
.text:004068B1                 mov     dword ptr [eax+10h], offset sub_406970
.text:004068B8                 mov     dword ptr [eax+0Ch], offset sub_4047B0
.text:004068BF                 nop
.text:004068C0
.text:004068C0 loc_4068C0:                             ; CODE XREF: sub_4067D0+130↓j
.text:004068C0                 xor     ecx, ecx
.text:004068C2                 test    bl, bl
.text:004068C4                 jz      short loc_4068E0
.text:004068C6                 cmp     ds:byte_41E000, 0
.text:004068CD                 jz      short loc_4068EE
.text:004068CF                 dec     esi
.text:004068D0                 jz      short loc_4068EE
.text:004068D2                 lea     esi, [esi+0]
.text:004068D9                 lea     edi, [edi+0]
.text:004068E0
.text:004068E0 loc_4068E0:                             ; CODE XREF: sub_4067D0+F4↑j
.text:004068E0                                         ; sub_4067D0+120↓j
.text:004068E0                 mov     [eax+24h], cl
.text:004068E3                 mov     [eax+20h], edx
.text:004068E6                 add     esp, 8
.text:004068E9                 pop     ebx
.text:004068EA                 pop     esi
.text:004068EB                 pop     edi
.text:004068EC                 pop     ebp
.text:004068ED                 retn
.text:004068EE ; ---------------------------------------------------------------------------
.text:004068EE
.text:004068EE loc_4068EE:                             ; CODE XREF: sub_4067D0+FD↑j
.text:004068EE                                         ; sub_4067D0+100↑j
.text:004068EE                 mov     cl, 1
.text:004068F0                 jmp     short loc_4068E0
.text:004068F2 ; ---------------------------------------------------------------------------
.text:004068F2
.text:004068F2 loc_4068F2:                             ; CODE XREF: sub_4067D0+D6↑j
.text:004068F2                                         ; sub_4067D0+DF↑j
.text:004068F2                 mov     dword ptr [eax+10h], offset loc_406BE0
.text:004068F9                 mov     dword ptr [eax+0Ch], offset sub_403EF0
.text:00406900                 jmp     short loc_4068C0
.text:00406902 ; ---------------------------------------------------------------------------
.text:00406902
.text:00406902 loc_406902:                             ; CODE XREF: sub_4067D0+AD↑j
.text:00406902                 mov     ebx, [esp+18h+var_14]
.text:00406906                 lea     edx, [ebx+edi]
.text:00406909                 mov     ebx, [esp+18h+var_18]
.text:0040690C                 lea     edi, [ebx+edx]
.text:0040690F                 jmp     loc_406887
.text:00406914 ; ---------------------------------------------------------------------------
.text:00406914
.text:00406914 loc_406914:                             ; CODE XREF: sub_4067D0+88↑j
.text:00406914                                         ; sub_4067D0+91↑j
.text:00406914                 mov     cl, 1
.text:00406916                 jmp     loc_406870
.text:00406916 ; ---------------------------------------------------------------------------
.text:0040691B                 align 10h
.text:00406920
.text:00406920 loc_406920:                             ; CODE XREF: sub_4067D0+67↑j
.text:00406920                 mov     dword ptr [eax+10h], offset loc_406BE0
.text:00406927                 mov     dword ptr [eax+0Ch], offset sub_403EF0
.text:0040692E                 jmp     loc_40684B
.text:00406933 ; ---------------------------------------------------------------------------
.text:00406933
.text:00406933 loc_406933:                             ; CODE XREF: sub_4067D0+14↑j
.text:00406933                 movzx   ebx, ds:byte_41E100
.text:0040693A                 test    bl, bl
.text:0040693C                 jz      short loc_40695D
.text:0040693E                 cmp     ds:byte_41E000, 0
.text:00406945                 jz      short loc_40695D
.text:00406947                 mov     eax, ds:dword_41E240
.text:0040694C                 mov     edi, edx
.text:0040694E                 mov     ecx, ds:dword_41E2B0
.text:00406954                 add     edi, eax
.text:00406956
.text:00406956 loc_406956:                             ; CODE XREF: sub_4067D0+195↓j
.text:00406956                 add     edi, ecx
.text:00406958                 jmp     loc_4067F3
.text:0040695D ; ---------------------------------------------------------------------------
.text:0040695D
.text:0040695D loc_40695D:                             ; CODE XREF: sub_4067D0+16C↑j
.text:0040695D                                         ; sub_4067D0+175↑j
.text:0040695D                 mov     ecx, ds:dword_41E240
.text:00406963                 mov     edi, edx
.text:00406965                 jmp     short loc_406956
.text:00406965 sub_4067D0      endp
.text:00406965
.text:00406965 ; ---------------------------------------------------------------------------
.text:00406967                 align 10h
.text:00406970
.text:00406970 ; =============== S U B R O U T I N E =======================================
.text:00406970
.text:00406970
.text:00406970 sub_406970      proc near               ; DATA XREF: sub_403EF0:loc_403F70↑o
.text:00406970                                         ; sub_4067D0+6D↑o ...
.text:00406970
.text:00406970 var_1C          = dword ptr -1Ch
.text:00406970 var_18          = dword ptr -18h
.text:00406970 var_14          = dword ptr -14h
.text:00406970 var_4           = dword ptr -4
.text:00406970 arg_0           = dword ptr  4
.text:00406970
.text:00406970                 sub     esp, 1Ch
.text:00406973                 mov     edx, ds:dword_41E1B0
.text:00406979                 cmp     edx, ds:dword_41E1C0
.text:0040697F                 mov     [esp+1Ch+var_4], ebx
.text:00406983                 mov     ebx, [esp+1Ch+arg_0]
.text:00406987                 jnb     short loc_4069A0
.text:00406989
.text:00406989 loc_406989:                             ; CODE XREF: sub_406970+59↓j
.text:00406989                 mov     ecx, ds:dword_41E1A0
.text:0040698F                 mov     [edx+ecx], bl
.text:00406992                 mov     ebx, [esp+1Ch+var_4]
.text:00406996                 inc     ds:dword_41E1B0
.text:0040699C                 add     esp, 1Ch
.text:0040699F                 retn
.text:004069A0 ; ---------------------------------------------------------------------------
.text:004069A0
.text:004069A0 loc_4069A0:                             ; CODE XREF: sub_406970+17↑j
.text:004069A0                 mov     [esp+1Ch+var_14], 1 ; int
.text:004069A8                 mov     edx, ds:dword_41E1A0
.text:004069AE                 mov     [esp+1Ch+var_18], offset dword_41E1C0 ; int
.text:004069B6                 mov     [esp+1Ch+var_1C], edx ; void *
.text:004069B9                 call    sub_408270
.text:004069BE                 mov     ds:dword_41E1A0, eax
.text:004069C3                 mov     edx, ds:dword_41E1B0
.text:004069C9                 jmp     short loc_406989
.text:004069C9 sub_406970      endp
.text:004069C9
.text:004069C9 ; ---------------------------------------------------------------------------
.text:004069CB                 align 10h
.text:004069D0
.text:004069D0 ; =============== S U B R O U T I N E =======================================
.text:004069D0
.text:004069D0
.text:004069D0 sub_4069D0      proc near               ; CODE XREF: sub_403CA0+1E7↑p
.text:004069D0                                         ; sub_403CA0+1FE↑p
.text:004069D0
.text:004069D0 File            = dword ptr -1Ch
.text:004069D0 Stream          = dword ptr -18h
.text:004069D0 var_9           = byte ptr -9
.text:004069D0 arg_0           = dword ptr  4
.text:004069D0 arg_4           = dword ptr  8
.text:004069D0
.text:004069D0                 push    esi
.text:004069D1                 push    ebx
.text:004069D2                 sub     esp, 14h
.text:004069D5                 mov     esi, [esp+1Ch+arg_0]
.text:004069D9                 mov     [esp+1Ch+var_9], 0
.text:004069DE                 mov     ebx, [esi]
.text:004069E0                 mov     edx, [ebx+4]
.text:004069E3                 dec     edx
.text:004069E4                 test    edx, edx
.text:004069E6                 mov     [ebx+4], edx
.text:004069E9                 js      loc_406BD0
.text:004069EF                 mov     ecx, [ebx]
.text:004069F1                 movzx   edx, byte ptr [ecx]
.text:004069F4                 inc     ecx
.text:004069F5                 mov     [ebx], ecx
.text:004069F7
.text:004069F7 loc_4069F7:                             ; CODE XREF: sub_4069D0+20A↓j
.text:004069F7                 cmp     edx, 0Ch
.text:004069FA                 jz      loc_406B70
.text:00406A00
.text:00406A00 loc_406A00:                             ; CODE XREF: sub_4069D0+1A4↓j
.text:00406A00                                         ; sub_4069D0+1C0↓j ...
.text:00406A00                 mov     byte ptr [esi+25h], 0
.text:00406A04                 cmp     edx, 0Ch
.text:00406A07                 jz      loc_406B63
.text:00406A0D
.text:00406A0D loc_406A0D:                             ; CODE XREF: sub_4069D0+198↓j
.text:00406A0D                 cmp     ds:byte_41E180, 0
.text:00406A14                 jz      short loc_406A1A
.text:00406A16                 mov     byte ptr [esi+25h], 1
.text:00406A1A
.text:00406A1A loc_406A1A:                             ; CODE XREF: sub_4069D0+44↑j
.text:00406A1A                                         ; sub_4069D0+6A↓j ...
.text:00406A1A                 cmp     edx, 0Ah
.text:00406A1D                 jz      short loc_406A50
.text:00406A1F                 cmp     edx, 0Ch
.text:00406A22                 jz      short loc_406A85
.text:00406A24                 inc     edx
.text:00406A25                 jz      short loc_406A48
.text:00406A27                 mov     edx, [ebx+4]
.text:00406A2A                 dec     edx
.text:00406A2B                 test    edx, edx
.text:00406A2D                 mov     [ebx+4], edx
.text:00406A30                 js      short loc_406A3C
.text:00406A32                 mov     ecx, [ebx]
.text:00406A34                 movzx   edx, byte ptr [ecx]
.text:00406A37                 inc     ecx
.text:00406A38                 mov     [ebx], ecx
.text:00406A3A                 jmp     short loc_406A1A
.text:00406A3C ; ---------------------------------------------------------------------------
.text:00406A3C
.text:00406A3C loc_406A3C:                             ; CODE XREF: sub_4069D0+60↑j
.text:00406A3C                 mov     [esp+1Ch+File], ebx ; File
.text:00406A3F                 call    _filbuf
.text:00406A44                 mov     edx, eax
.text:00406A46                 jmp     short loc_406A1A
.text:00406A48 ; ---------------------------------------------------------------------------
.text:00406A48
.text:00406A48 loc_406A48:                             ; CODE XREF: sub_4069D0+55↑j
.text:00406A48                 mov     [esp+1Ch+File], esi
.text:00406A4B                 call    sub_406DB0
.text:00406A50
.text:00406A50 loc_406A50:                             ; CODE XREF: sub_4069D0+4D↑j
.text:00406A50                                         ; sub_4069D0+16D↓j
.text:00406A50                 cmp     byte_41D048, 0
.text:00406A57                 jz      short loc_406A70
.text:00406A59                 cmp     ds:byte_41E000, 0
.text:00406A60                 jz      short loc_406A76
.text:00406A62                 cmp     [esp+1Ch+arg_4], 1
.text:00406A67                 jz      short loc_406A76
.text:00406A69                 lea     esi, [esi+0]
.text:00406A70
.text:00406A70 loc_406A70:                             ; CODE XREF: sub_4069D0+87↑j
.text:00406A70                                         ; sub_4069D0+AB↓j ...
.text:00406A70                 add     esp, 14h
.text:00406A73                 pop     ebx
.text:00406A74                 pop     esi
.text:00406A75                 retn
.text:00406A76 ; ---------------------------------------------------------------------------
.text:00406A76
.text:00406A76 loc_406A76:                             ; CODE XREF: sub_4069D0+90↑j
.text:00406A76                                         ; sub_4069D0+97↑j
.text:00406A76                 cmp     [esp+1Ch+var_9], 0
.text:00406A7B                 jnz     short loc_406A70
.text:00406A7D                 inc     dword_41D044
.text:00406A83                 jmp     short loc_406A70
.text:00406A85 ; ---------------------------------------------------------------------------
.text:00406A85
.text:00406A85 loc_406A85:                             ; CODE XREF: sub_4069D0+52↑j
.text:00406A85                 cmp     ds:byte_41E180, 0
.text:00406A8C                 jz      short loc_406AC0
.text:00406A8E                 cmp     ds:byte_41E000, 0
.text:00406A95                 jnz     loc_406B5A
.text:00406A9B                 mov     eax, dword_41D034
.text:00406AA0                 mov     edx, ds:dword_41E190
.text:00406AA6                 test    eax, eax
.text:00406AA8                 jz      short loc_406AC0
.text:00406AAA                 lea     esi, [esi+0]
.text:00406AB0
.text:00406AB0 loc_406AB0:                             ; CODE XREF: sub_4069D0+E8↓j
.text:00406AB0                 mov     byte ptr [edx+25h], 0
.text:00406AB4                 add     edx, 28h ; '('
.text:00406AB7                 dec     eax
.text:00406AB8                 jnz     short loc_406AB0
.text:00406ABA                 lea     esi, [esi+0]
.text:00406AC0
.text:00406AC0 loc_406AC0:                             ; CODE XREF: sub_4069D0+BC↑j
.text:00406AC0                                         ; sub_4069D0+D8↑j ...
.text:00406AC0                 mov     edx, [ebx+4]
.text:00406AC3                 dec     edx
.text:00406AC4                 test    edx, edx
.text:00406AC6                 mov     [ebx+4], edx
.text:00406AC9                 js      loc_406B4B
.text:00406ACF                 mov     ecx, [ebx]
.text:00406AD1                 movzx   edx, byte ptr [ecx]
.text:00406AD4                 inc     ecx
.text:00406AD5                 mov     [ebx], ecx
.text:00406AD7
.text:00406AD7 loc_406AD7:                             ; CODE XREF: sub_4069D0+185↓j
.text:00406AD7                 cmp     edx, 0Ah
.text:00406ADA                 jz      short loc_406AE8
.text:00406ADC                 mov     [esp+1Ch+Stream], ebx ; Stream
.text:00406AE0                 mov     [esp+1Ch+File], edx ; Character
.text:00406AE3                 call    ungetc
.text:00406AE8
.text:00406AE8 loc_406AE8:                             ; CODE XREF: sub_4069D0+10A↑j
.text:00406AE8                 cmp     ds:byte_41E000, 0
.text:00406AEF                 jnz     short loc_406B42
.text:00406AF1                 mov     edx, dword_41D034
.text:00406AF7                 mov     ecx, ds:dword_41E190
.text:00406AFD                 test    edx, edx
.text:00406AFF                 jz      short loc_406B30
.text:00406B01                 movzx   ebx, byte_41D011
.text:00406B08                 nop
.text:00406B09                 lea     esi, [esi+0]
.text:00406B10
.text:00406B10 loc_406B10:                             ; CODE XREF: sub_4069D0+14F↓j
.text:00406B10                 xor     eax, eax
.text:00406B12                 test    bl, bl
.text:00406B14                 setz    al
.text:00406B17                 inc     eax
.text:00406B18                 mov     [ecx+8], eax
.text:00406B1B                 add     ecx, 28h ; '('
.text:00406B1E                 dec     edx
.text:00406B1F                 jnz     short loc_406B10
.text:00406B21                 jmp     short loc_406B30
.text:00406B21 ; ---------------------------------------------------------------------------
.text:00406B23                 align 10h
.text:00406B30
.text:00406B30 loc_406B30:                             ; CODE XREF: sub_4069D0+12F↑j
.text:00406B30                                         ; sub_4069D0+151↑j ...
.text:00406B30                 mov     dword ptr [esi+1Ch], 0
.text:00406B37                 dec     ds:dword_41E0F0
.text:00406B3D                 jmp     loc_406A50
.text:00406B42 ; ---------------------------------------------------------------------------
.text:00406B42
.text:00406B42 loc_406B42:                             ; CODE XREF: sub_4069D0+11F↑j
.text:00406B42                 mov     dword ptr [esi+8], 2
.text:00406B49                 jmp     short loc_406B30
.text:00406B4B ; ---------------------------------------------------------------------------
.text:00406B4B
.text:00406B4B loc_406B4B:                             ; CODE XREF: sub_4069D0+F9↑j
.text:00406B4B                 mov     [esp+1Ch+File], ebx ; File
.text:00406B4E                 call    _filbuf
.text:00406B53                 mov     edx, eax
.text:00406B55                 jmp     loc_406AD7
.text:00406B5A ; ---------------------------------------------------------------------------
.text:00406B5A
.text:00406B5A loc_406B5A:                             ; CODE XREF: sub_4069D0+C5↑j
.text:00406B5A                 mov     byte ptr [esi+25h], 0
.text:00406B5E                 jmp     loc_406AC0
.text:00406B63 ; ---------------------------------------------------------------------------
.text:00406B63
.text:00406B63 loc_406B63:                             ; CODE XREF: sub_4069D0+37↑j
.text:00406B63                 mov     [esp+1Ch+var_9], 1
.text:00406B68                 jmp     loc_406A0D
.text:00406B68 ; ---------------------------------------------------------------------------
.text:00406B6D                 align 10h
.text:00406B70
.text:00406B70 loc_406B70:                             ; CODE XREF: sub_4069D0+2A↑j
.text:00406B70                 cmp     byte ptr [esi+25h], 0
.text:00406B74                 jz      loc_406A00
.text:00406B7A                 mov     edx, [ebx+4]
.text:00406B7D                 dec     edx
.text:00406B7E                 test    edx, edx
.text:00406B80                 mov     [ebx+4], edx
.text:00406B83                 js      short loc_406BBD
.text:00406B85                 mov     ecx, [ebx]
.text:00406B87                 movzx   edx, byte ptr [ecx]
.text:00406B8A                 inc     ecx
.text:00406B8B                 mov     [ebx], ecx
.text:00406B8D
.text:00406B8D loc_406B8D:                             ; CODE XREF: sub_4069D0+1F7↓j
.text:00406B8D                 cmp     edx, 0Ah
.text:00406B90                 jnz     loc_406A00
.text:00406B96                 mov     edx, [ebx+4]
.text:00406B99                 dec     edx
.text:00406B9A                 test    edx, edx
.text:00406B9C                 mov     [ebx+4], edx
.text:00406B9F                 js      short loc_406BAE
.text:00406BA1                 mov     ecx, [ebx]
.text:00406BA3                 movzx   edx, byte ptr [ecx]
.text:00406BA6                 inc     ecx
.text:00406BA7                 mov     [ebx], ecx
.text:00406BA9                 jmp     loc_406A00
.text:00406BAE ; ---------------------------------------------------------------------------
.text:00406BAE
.text:00406BAE loc_406BAE:                             ; CODE XREF: sub_4069D0+1CF↑j
.text:00406BAE                 mov     [esp+1Ch+File], ebx ; File
.text:00406BB1                 call    _filbuf
.text:00406BB6                 mov     edx, eax
.text:00406BB8                 jmp     loc_406A00
.text:00406BBD ; ---------------------------------------------------------------------------
.text:00406BBD
.text:00406BBD loc_406BBD:                             ; CODE XREF: sub_4069D0+1B3↑j
.text:00406BBD                 mov     [esp+1Ch+File], ebx ; File
.text:00406BC0                 call    _filbuf
.text:00406BC5                 mov     edx, eax
.text:00406BC7                 jmp     short loc_406B8D
.text:00406BC7 ; ---------------------------------------------------------------------------
.text:00406BC9                 align 10h
.text:00406BD0
.text:00406BD0 loc_406BD0:                             ; CODE XREF: sub_4069D0+19↑j
.text:00406BD0                 mov     [esp+1Ch+File], ebx ; File
.text:00406BD3                 call    _filbuf
.text:00406BD8                 mov     edx, eax
.text:00406BDA                 jmp     loc_4069F7
.text:00406BDA sub_4069D0      endp
.text:00406BDA
.text:00406BDA ; ---------------------------------------------------------------------------
.text:00406BDF                 align 10h
.text:00406BE0
.text:00406BE0 loc_406BE0:                             ; DATA XREF: sub_4067D0:loc_4068F2↑o
.text:00406BE0                                         ; sub_4067D0:loc_406920↑o
.text:00406BE0                 push    edi
.text:00406BE1                 push    esi
.text:00406BE2                 push    ebx
.text:00406BE3                 sub     esp, 10h
.text:00406BE6                 movzx   eax, byte ptr [esp+20h]
.text:00406BEB                 cmp     ds:byte_41E0B0, 0
.text:00406BF2                 mov     [esp+0Fh], al
.text:00406BF6                 jz      loc_406D10
.text:00406BFC                 cmp     al, 20h ; ' '
.text:00406BFE                 jz      loc_406D9B
.text:00406C04                 mov     eax, ds:dword_41E250
.text:00406C09                 test    eax, eax
.text:00406C0B                 jle     loc_406CE0
.text:00406C11                 mov     ebx, ds:dword_41E260
.text:00406C17                 lea     edi, [eax+ebx]
.text:00406C1A                 dec     eax
.text:00406C1B                 jle     short loc_406C90
.text:00406C1D                 mov     ecx, dword_41D030
.text:00406C23                 mov     eax, ebx
.text:00406C25                 cdq
.text:00406C26                 idiv    ecx
.text:00406C28                 sub     ecx, edx
.text:00406C2A                 lea     esi, [ecx+ebx]
.text:00406C2D                 cmp     esi, edi
.text:00406C2F                 jg      short loc_406C90
.text:00406C31                 jmp     short loc_406C40
.text:00406C31 ; ---------------------------------------------------------------------------
.text:00406C33                 align 10h
.text:00406C40
.text:00406C40 loc_406C40:                             ; CODE XREF: .text:00406C31↑j
.text:00406C40                                         ; .text:00406C85↓j
.text:00406C40                 mov     edx, ds:_iob
.text:00406C46                 mov     ecx, [edx+24h]
.text:00406C49                 dec     ecx
.text:00406C4A                 mov     [edx+24h], ecx
.text:00406C4D                 test    ecx, ecx
.text:00406C4F                 js      loc_406D7A
.text:00406C55                 movzx   ecx, byte_41D02C
.text:00406C5C                 mov     ebx, ds:_iob
.text:00406C62                 mov     eax, [ebx+20h]
.text:00406C65                 mov     [eax], cl
.text:00406C67                 inc     dword ptr [ebx+20h]
.text:00406C6A
.text:00406C6A loc_406C6A:                             ; CODE XREF: .text:00406D96↓j
.text:00406C6A                 mov     ebx, esi
.text:00406C6C                 mov     esi, edi
.text:00406C6E                 sub     esi, ebx
.text:00406C70                 dec     esi
.text:00406C71                 jle     short loc_406C90
.text:00406C73                 mov     ecx, dword_41D030
.text:00406C79                 mov     eax, ebx
.text:00406C7B                 cdq
.text:00406C7C                 idiv    ecx
.text:00406C7E                 sub     ecx, edx
.text:00406C80                 lea     esi, [ecx+ebx]
.text:00406C83                 cmp     esi, edi
.text:00406C85                 jle     short loc_406C40
.text:00406C87                 mov     esi, esi
.text:00406C89                 lea     edi, [edi+0]
.text:00406C90
.text:00406C90 loc_406C90:                             ; CODE XREF: .text:00406C1B↑j
.text:00406C90                                         ; .text:00406C2F↑j ...
.text:00406C90                 inc     ebx
.text:00406C91                 cmp     ebx, edi
.text:00406C93                 jg      short loc_406CD2
.text:00406C95                 mov     edx, ds:_iob
.text:00406C9B                 mov     esi, [edx+24h]
.text:00406C9E                 dec     esi
.text:00406C9F                 mov     [edx+24h], esi
.text:00406CA2                 test    esi, esi
.text:00406CA4                 js      short loc_406CB7
.text:00406CA6                 mov     ecx, ds:_iob
.text:00406CAC                 mov     eax, [ecx+20h]
.text:00406CAF                 mov     byte ptr [eax], 20h ; ' '
.text:00406CB2                 inc     dword ptr [ecx+20h]
.text:00406CB5                 jmp     short loc_406C90
.text:00406CB7 ; ---------------------------------------------------------------------------
.text:00406CB7
.text:00406CB7 loc_406CB7:                             ; CODE XREF: .text:00406CA4↑j
.text:00406CB7                 mov     dword ptr [esp], 20h ; ' '
.text:00406CBE                 mov     esi, ds:_iob
.text:00406CC4                 add     esi, 20h ; ' '
.text:00406CC7                 mov     [esp+4], esi
.text:00406CCB                 call    _flsbuf
.text:00406CD0                 jmp     short loc_406C90
.text:00406CD2 ; ---------------------------------------------------------------------------
.text:00406CD2
.text:00406CD2 loc_406CD2:                             ; CODE XREF: .text:00406C93↑j
.text:00406CD2                 mov     ds:dword_41E260, edi
.text:00406CD8                 xor     edi, edi
.text:00406CDA                 mov     ds:dword_41E250, edi
.text:00406CE0
.text:00406CE0 loc_406CE0:                             ; CODE XREF: .text:00406C0B↑j
.text:00406CE0                 movzx   edx, byte ptr [esp+0Fh]
.text:00406CE5                 mov     ebx, ds:__mb_cur_max
.text:00406CEB                 cmp     dword ptr [ebx], 1
.text:00406CEE                 jz      short loc_406D67
.text:00406CF0                 mov     dword ptr [esp+4], 157h
.text:00406CF8                 mov     [esp], edx
.text:00406CFB                 call    _isctype
.text:00406D00
.text:00406D00 loc_406D00:                             ; CODE XREF: .text:00406D78↓j
.text:00406D00                 test    eax, eax
.text:00406D02                 jnz     short loc_406D5F
.text:00406D04                 cmp     byte ptr [esp+0Fh], 8
.text:00406D09                 jz      short loc_406D57
.text:00406D0B                 nop
.text:00406D0C                 lea     esi, [esi+0]
.text:00406D10
.text:00406D10 loc_406D10:                             ; CODE XREF: .text:00406BF6↑j
.text:00406D10                                         ; .text:00406D5D↓j ...
.text:00406D10                 mov     edx, ds:_iob
.text:00406D16                 mov     edi, [edx+24h]
.text:00406D19                 dec     edi
.text:00406D1A                 mov     [edx+24h], edi
.text:00406D1D                 test    edi, edi
.text:00406D1F                 js      short loc_406D3B
.text:00406D21                 movzx   edx, byte ptr [esp+0Fh]
.text:00406D26                 mov     ebx, ds:_iob
.text:00406D2C                 mov     eax, [ebx+20h]
.text:00406D2F                 mov     [eax], dl
.text:00406D31                 inc     dword ptr [ebx+20h]
.text:00406D34
.text:00406D34 loc_406D34:                             ; CODE XREF: .text:00406D55↓j
.text:00406D34                                         ; .text:00406DA1↓j
.text:00406D34                 add     esp, 10h
.text:00406D37                 pop     ebx
.text:00406D38                 pop     esi
.text:00406D39                 pop     edi
.text:00406D3A                 retn
.text:00406D3B ; ---------------------------------------------------------------------------
.text:00406D3B
.text:00406D3B loc_406D3B:                             ; CODE XREF: .text:00406D1F↑j
.text:00406D3B                 movsx   ecx, byte ptr [esp+0Fh]
.text:00406D40                 mov     esi, ds:_iob
.text:00406D46                 add     esi, 20h ; ' '
.text:00406D49                 mov     [esp+4], esi
.text:00406D4D                 mov     [esp], ecx
.text:00406D50                 call    _flsbuf
.text:00406D55                 jmp     short loc_406D34
.text:00406D57 ; ---------------------------------------------------------------------------
.text:00406D57
.text:00406D57 loc_406D57:                             ; CODE XREF: .text:00406D09↑j
.text:00406D57                 dec     ds:dword_41E260
.text:00406D5D                 jmp     short loc_406D10
.text:00406D5F ; ---------------------------------------------------------------------------
.text:00406D5F
.text:00406D5F loc_406D5F:                             ; CODE XREF: .text:00406D02↑j
.text:00406D5F                 inc     ds:dword_41E260
.text:00406D65                 jmp     short loc_406D10
.text:00406D67 ; ---------------------------------------------------------------------------
.text:00406D67
.text:00406D67 loc_406D67:                             ; CODE XREF: .text:00406CEE↑j
.text:00406D67                 mov     esi, ds:_pctype
.text:00406D6D                 mov     ecx, [esi]
.text:00406D6F                 movzx   eax, word ptr [ecx+edx*2]
.text:00406D73                 and     eax, 157h
.text:00406D78                 jmp     short loc_406D00
.text:00406D7A ; ---------------------------------------------------------------------------
.text:00406D7A
.text:00406D7A loc_406D7A:                             ; CODE XREF: .text:00406C4F↑j
.text:00406D7A                 movsx   edx, byte_41D02C
.text:00406D81                 mov     ebx, ds:_iob
.text:00406D87                 add     ebx, 20h ; ' '
.text:00406D8A                 mov     [esp+4], ebx
.text:00406D8E                 mov     [esp], edx
.text:00406D91                 call    _flsbuf
.text:00406D96                 jmp     loc_406C6A
.text:00406D9B ; ---------------------------------------------------------------------------
.text:00406D9B
.text:00406D9B loc_406D9B:                             ; CODE XREF: .text:00406BFE↑j
.text:00406D9B                 inc     ds:dword_41E250
.text:00406DA1                 jmp     short loc_406D34
.text:00406DA1 ; ---------------------------------------------------------------------------
.text:00406DA3                 align 10h
.text:00406DB0
.text:00406DB0 ; =============== S U B R O U T I N E =======================================
.text:00406DB0
.text:00406DB0
.text:00406DB0 sub_406DB0      proc near               ; CODE XREF: sub_403790+41↑j
.text:00406DB0                                         ; sub_403EF0+40B↑p ...
.text:00406DB0
.text:00406DB0 Stream          = dword ptr -1Ch
.text:00406DB0 ErrorMessage    = dword ptr -18h
.text:00406DB0 var_14          = dword ptr -14h
.text:00406DB0 var_10          = byte ptr -10h
.text:00406DB0 var_4           = dword ptr -4
.text:00406DB0 arg_0           = dword ptr  4
.text:00406DB0
.text:00406DB0                 sub     esp, 1Ch
.text:00406DB3                 mov     [esp+1Ch+var_4], ebx
.text:00406DB7                 mov     ebx, [esp+1Ch+arg_0]
.text:00406DBB                 cmp     dword ptr [ebx+8], 3
.text:00406DBF                 jz      short loc_406E26
.text:00406DC1                 mov     eax, [ebx]
.text:00406DC3                 test    byte ptr [eax+0Ch], 20h
.text:00406DC7                 jnz     loc_406E70
.text:00406DCD
.text:00406DCD loc_406DCD:                             ; CODE XREF: sub_406DB0+E8↓j
.text:00406DCD                 cmp     eax, ds:_iob
.text:00406DD3                 jz      short loc_406DE0
.text:00406DD5                 mov     [esp+1Ch+Stream], eax ; Stream
.text:00406DD8                 call    fclose
.text:00406DDD                 inc     eax
.text:00406DDE                 jz      short loc_406E40
.text:00406DE0
.text:00406DE0 loc_406DE0:                             ; CODE XREF: sub_406DB0+23↑j
.text:00406DE0                                         ; sub_406DB0+B6↓j
.text:00406DE0                 cmp     ds:byte_41E000, 0
.text:00406DE7                 jnz     short loc_406E30
.text:00406DE9                 mov     edx, dword_41D034
.text:00406DEF                 mov     eax, ds:dword_41E190
.text:00406DF4                 test    edx, edx
.text:00406DF6                 jz      short loc_406E20
.text:00406DF8                 nop
.text:00406DF9                 lea     esi, [esi+0]
.text:00406E00
.text:00406E00 loc_406E00:                             ; CODE XREF: sub_406DB0+69↓j
.text:00406E00                 mov     dword ptr [eax+8], 3
.text:00406E07                 mov     ebx, [eax+18h]
.text:00406E0A                 test    ebx, ebx
.text:00406E0C                 jnz     short loc_406E15
.text:00406E0E                 mov     dword ptr [eax+1Ch], 0
.text:00406E15
.text:00406E15 loc_406E15:                             ; CODE XREF: sub_406DB0+5C↑j
.text:00406E15                 add     eax, 28h ; '('
.text:00406E18                 dec     edx
.text:00406E19                 jnz     short loc_406E00
.text:00406E1B                 nop
.text:00406E1C                 lea     esi, [esi+0]
.text:00406E20
.text:00406E20 loc_406E20:                             ; CODE XREF: sub_406DB0+46↑j
.text:00406E20                                         ; sub_406DB0+8E↓j
.text:00406E20                 dec     ds:dword_41E0F0
.text:00406E26
.text:00406E26 loc_406E26:                             ; CODE XREF: sub_406DB0+F↑j
.text:00406E26                 mov     ebx, [esp+1Ch+var_4]
.text:00406E2A                 add     esp, 1Ch
.text:00406E2D                 retn
.text:00406E2D ; ---------------------------------------------------------------------------
.text:00406E2E                 align 10h
.text:00406E30
.text:00406E30 loc_406E30:                             ; CODE XREF: sub_406DB0+37↑j
.text:00406E30                 mov     dword ptr [ebx+8], 3
.text:00406E37                 mov     dword ptr [ebx+1Ch], 0
.text:00406E3E                 jmp     short loc_406E20
.text:00406E40 ; ---------------------------------------------------------------------------
.text:00406E40
.text:00406E40 loc_406E40:                             ; CODE XREF: sub_406DB0+2E↑j
.text:00406E40                 call    _errno
.text:00406E45                 mov     ecx, [ebx+4]
.text:00406E48                 mov     [esp+1Ch+var_14], offset word_402A1A ; char *
.text:00406E50                 mov     dword ptr [esp+1Ch+var_10], ecx ; char
.text:00406E54                 mov     edx, [eax]
.text:00406E56                 mov     [esp+1Ch+Stream], 1 ; Code
.text:00406E5D                 mov     [esp+1Ch+ErrorMessage], edx ; ErrorMessage
.text:00406E61                 call    sub_40A7B0
.text:00406E66                 jmp     loc_406DE0
.text:00406E66 ; ---------------------------------------------------------------------------
.text:00406E6B                 align 10h
.text:00406E70
.text:00406E70 loc_406E70:                             ; CODE XREF: sub_406DB0+17↑j
.text:00406E70                 call    _errno
.text:00406E75                 mov     ecx, [ebx+4]
.text:00406E78                 mov     [esp+1Ch+var_14], offset word_402A1A ; char *
.text:00406E80                 mov     dword ptr [esp+1Ch+var_10], ecx ; char
.text:00406E84                 mov     edx, [eax]
.text:00406E86                 mov     [esp+1Ch+Stream], 1 ; Code
.text:00406E8D                 mov     [esp+1Ch+ErrorMessage], edx ; ErrorMessage
.text:00406E91                 call    sub_40A7B0
.text:00406E96                 mov     eax, [ebx]
.text:00406E98                 jmp     loc_406DCD
.text:00406E98 sub_406DB0      endp
.text:00406E98
.text:00406E98 ; ---------------------------------------------------------------------------
.text:00406E9D                 align 10h
.text:00406EA0
.text:00406EA0 ; =============== S U B R O U T I N E =======================================
.text:00406EA0
.text:00406EA0
.text:00406EA0 sub_406EA0      proc near               ; CODE XREF: sub_402D20+9↑p
.text:00406EA0                 push    ebx
.text:00406EA1                 sub     esp, 8
.text:00406EA4                 cmp     byte_41D011, 0
.text:00406EAB                 jnz     short loc_406EEA
.text:00406EAD                 mov     edx, dword_41D034
.text:00406EB3                 mov     ecx, ds:dword_41E190
.text:00406EB9                 test    edx, edx
.text:00406EBB                 jz      short loc_406EE5
.text:00406EBD                 mov     ebx, ds:dword_41E230
.text:00406EC3                 lea     esi, [esi+0]
.text:00406EC9                 lea     edi, [edi+0]
.text:00406ED0
.text:00406ED0 loc_406ED0:                             ; CODE XREF: sub_406EA0+43↓j
.text:00406ED0                 xor     eax, eax
.text:00406ED2                 cmp     dword ptr [ecx+8], 0
.text:00406ED6                 setnz   al
.text:00406ED9                 dec     eax
.text:00406EDA                 and     eax, ebx
.text:00406EDC                 mov     [ecx+1Ch], eax
.text:00406EDF                 add     ecx, 28h ; '('
.text:00406EE2                 dec     edx
.text:00406EE3                 jnz     short loc_406ED0
.text:00406EE5
.text:00406EE5 loc_406EE5:                             ; CODE XREF: sub_406EA0+1B↑j
.text:00406EE5                                         ; sub_406EA0+7B↓j ...
.text:00406EE5                 add     esp, 8
.text:00406EE8                 pop     ebx
.text:00406EE9                 retn
.text:00406EEA ; ---------------------------------------------------------------------------
.text:00406EEA
.text:00406EEA loc_406EEA:                             ; CODE XREF: sub_406EA0+B↑j
.text:00406EEA                 call    sub_403330
.text:00406EEF                 mov     edx, dword_41D034
.text:00406EF5                 mov     ecx, ds:dword_41E190
.text:00406EFB                 dec     edx
.text:00406EFC                 jz      short loc_406F0C
.text:00406EFE                 mov     esi, esi
.text:00406F00
.text:00406F00 loc_406F00:                             ; CODE XREF: sub_406EA0+6A↓j
.text:00406F00                 mov     ebx, [ecx+18h]
.text:00406F03                 mov     [ecx+1Ch], ebx
.text:00406F06                 add     ecx, 28h ; '('
.text:00406F09                 dec     edx
.text:00406F0A                 jnz     short loc_406F00
.text:00406F0C
.text:00406F0C loc_406F0C:                             ; CODE XREF: sub_406EA0+5C↑j
.text:00406F0C                 cmp     ds:byte_41E070, 0
.text:00406F13                 jz      short loc_406F1D
.text:00406F15                 mov     eax, [ecx+18h]
.text:00406F18
.text:00406F18 loc_406F18:                             ; CODE XREF: sub_406EA0+89↓j
.text:00406F18                 mov     [ecx+1Ch], eax
.text:00406F1B                 jmp     short loc_406EE5
.text:00406F1D ; ---------------------------------------------------------------------------
.text:00406F1D
.text:00406F1D loc_406F1D:                             ; CODE XREF: sub_406EA0+73↑j
.text:00406F1D                 mov     eax, [ecx+8]
.text:00406F20                 test    eax, eax
.text:00406F22                 jnz     short loc_406F2B
.text:00406F24                 mov     eax, ds:dword_41E230
.text:00406F29                 jmp     short loc_406F18
.text:00406F2B ; ---------------------------------------------------------------------------
.text:00406F2B
.text:00406F2B loc_406F2B:                             ; CODE XREF: sub_406EA0+82↑j
.text:00406F2B                 mov     dword ptr [ecx+1Ch], 0
.text:00406F32                 jmp     short loc_406EE5
.text:00406F32 sub_406EA0      endp
.text:00406F32
.text:00406F32 ; ---------------------------------------------------------------------------
.text:00406F34                 align 10h
.text:00406F40
.text:00406F40 ; =============== S U B R O U T I N E =======================================
.text:00406F40
.text:00406F40
.text:00406F40 ; int __cdecl sub_406F40(char *, int, char)
.text:00406F40 sub_406F40      proc near               ; CODE XREF: sub_407120+22↓p
.text:00406F40
.text:00406F40 DstCh           = dword ptr -2Ch
.text:00406F40 SrcCh           = dword ptr -28h
.text:00406F40 SizeInBytes     = dword ptr -24h
.text:00406F40 State           = dword ptr -20h
.text:00406F40 var_19          = byte ptr -19h
.text:00406F40 var_18          = mbstate_t ptr -18h
.text:00406F40 arg_0           = dword ptr  4
.text:00406F40 arg_4           = dword ptr  8
.text:00406F40 arg_8           = byte ptr  0Ch
.text:00406F40
.text:00406F40                 push    ebp
.text:00406F41                 push    edi
.text:00406F42                 xor     edi, edi
.text:00406F44                 push    esi
.text:00406F45                 push    ebx
.text:00406F46                 sub     esp, 1Ch
.text:00406F49                 mov     ebx, [esp+2Ch+arg_0]
.text:00406F4D                 mov     edx, [esp+2Ch+arg_4]
.text:00406F51                 mov     eax, ds:__mb_cur_max
.text:00406F56                 mov     ebp, ebx
.text:00406F58                 add     ebp, edx
.text:00406F5A                 cmp     dword ptr [eax], 1
.text:00406F5D                 jle     loc_407070
.text:00406F63                 cmp     ebx, ebp
.text:00406F65                 jnb     short loc_406FA8
.text:00406F67                 mov     esi, esi
.text:00406F69                 lea     edi, [edi+0]
.text:00406F70
.text:00406F70 loc_406F70:                             ; CODE XREF: sub_406F40+66↓j
.text:00406F70                 movsx   eax, byte ptr [ebx]
.text:00406F73                 cmp     eax, 5Fh ; '_'
.text:00406F76                 jg      loc_407060
.text:00406F7C                 cmp     eax, 41h ; 'A'
.text:00406F7F                 jge     short loc_406FA2
.text:00406F81                 cmp     eax, 20h ; ' '
.text:00406F84                 jl      short loc_406FB2
.text:00406F86                 cmp     eax, 23h ; '#'
.text:00406F89                 jle     short loc_406FA2
.text:00406F8B                 sub     eax, 25h ; '%'
.text:00406F8E                 cmp     eax, 1Ah
.text:00406F91                 jmp     short loc_406FA0
.text:00406F91 ; ---------------------------------------------------------------------------
.text:00406F93                 align 10h
.text:00406FA0
.text:00406FA0 loc_406FA0:                             ; CODE XREF: sub_406F40+51↑j
.text:00406FA0                                         ; sub_406F40+126↓j
.text:00406FA0                 ja      short loc_406FB2
.text:00406FA2
.text:00406FA2 loc_406FA2:                             ; CODE XREF: sub_406F40+3F↑j
.text:00406FA2                                         ; sub_406F40+49↑j ...
.text:00406FA2                 inc     ebx
.text:00406FA3
.text:00406FA3 loc_406FA3:                             ; CODE XREF: sub_406F40+100↓j
.text:00406FA3                 inc     edi
.text:00406FA4
.text:00406FA4 loc_406FA4:                             ; CODE XREF: sub_406F40+C4↓j
.text:00406FA4                 cmp     ebx, ebp
.text:00406FA6                 jb      short loc_406F70
.text:00406FA8
.text:00406FA8 loc_406FA8:                             ; CODE XREF: sub_406F40+25↑j
.text:00406FA8                                         ; sub_406F40+132↓j ...
.text:00406FA8                 mov     eax, edi
.text:00406FAA
.text:00406FAA loc_406FAA:                             ; CODE XREF: sub_406F40+D0↓j
.text:00406FAA                                         ; sub_406F40+F8↓j ...
.text:00406FAA                 add     esp, 1Ch
.text:00406FAD                 pop     ebx
.text:00406FAE                 pop     esi
.text:00406FAF                 pop     edi
.text:00406FB0                 pop     ebp
.text:00406FB1                 retn
.text:00406FB2 ; ---------------------------------------------------------------------------
.text:00406FB2
.text:00406FB2 loc_406FB2:                             ; CODE XREF: sub_406F40+44↑j
.text:00406FB2                                         ; sub_406F40:loc_406FA0↑j
.text:00406FB2                 mov     [esp+2Ch+var_18._Wchar], 0
.text:00406FBA                 lea     esi, [esp+2Ch+var_18]
.text:00406FBE                 mov     ecx, ebp
.text:00406FC0                 mov     [esp+2Ch+State], esi ; State
.text:00406FC4                 sub     ecx, ebx
.text:00406FC6                 lea     edx, [esp+2Ch+var_18._State]
.text:00406FCA                 mov     [esp+2Ch+SizeInBytes], ecx ; SizeInBytes
.text:00406FCE                 mov     [esp+2Ch+SrcCh], ebx ; SrcCh
.text:00406FD2                 mov     [esp+2Ch+DstCh], edx ; DstCh
.text:00406FD5                 call    mbrtowc
.text:00406FDA                 cmp     eax, 0FFFFFFFFh
.text:00406FDD                 mov     esi, eax
.text:00406FDF                 jz      short loc_407045
.text:00406FE1                 cmp     eax, 0FFFFFFFEh
.text:00406FE4                 jz      short loc_40702E
.text:00406FE6                 test    eax, eax
.text:00406FE8                 jnz     short loc_406FEF
.text:00406FEA                 mov     esi, 1
.text:00406FEF
.text:00406FEF loc_406FEF:                             ; CODE XREF: sub_406F40+A8↑j
.text:00406FEF                 movzx   edx, [esp+2Ch+var_18._State]
.text:00406FF4                 mov     [esp+2Ch+DstCh], edx
.text:00406FF7                 call    sub_40DDE0
.text:00406FFC                 test    eax, eax
.text:00406FFE                 js      short loc_407006
.text:00407000                 add     edi, eax
.text:00407002
.text:00407002 loc_407002:                             ; CODE XREF: sub_406F40+E9↓j
.text:00407002                                         ; sub_406F40+EC↓j
.text:00407002                 add     ebx, esi
.text:00407004                 jmp     short loc_406FA4
.text:00407006 ; ---------------------------------------------------------------------------
.text:00407006
.text:00407006 loc_407006:                             ; CODE XREF: sub_406F40+BE↑j
.text:00407006                 test    [esp+2Ch+arg_8], 2
.text:0040700B                 mov     eax, 0FFFFFFFFh
.text:00407010                 jnz     short loc_406FAA
.text:00407012                 movzx   ecx, [esp+2Ch+var_18._State]
.text:00407017                 mov     [esp+2Ch+SrcCh], 20h ; ' ' ; Type
.text:0040701F                 mov     [esp+2Ch+DstCh], ecx ; C
.text:00407022                 call    iswctype
.text:00407027                 test    eax, eax
.text:00407029                 jnz     short loc_407002
.text:0040702B                 inc     edi
.text:0040702C                 jmp     short loc_407002
.text:0040702E ; ---------------------------------------------------------------------------
.text:0040702E
.text:0040702E loc_40702E:                             ; CODE XREF: sub_406F40+A4↑j
.text:0040702E                 test    [esp+2Ch+arg_8], 1
.text:00407033                 mov     eax, 0FFFFFFFFh
.text:00407038                 jnz     loc_406FAA
.text:0040703E                 mov     ebx, ebp
.text:00407040                 jmp     loc_406FA3
.text:00407045 ; ---------------------------------------------------------------------------
.text:00407045
.text:00407045 loc_407045:                             ; CODE XREF: sub_406F40+9F↑j
.text:00407045                 test    [esp+2Ch+arg_8], 1
.text:0040704A                 mov     eax, 0FFFFFFFFh
.text:0040704F                 jz      loc_406FA2
.text:00407055                 jmp     loc_406FAA
.text:00407055 ; ---------------------------------------------------------------------------
.text:0040705A                 align 10h
.text:00407060
.text:00407060 loc_407060:                             ; CODE XREF: sub_406F40+36↑j
.text:00407060                 sub     eax, 61h ; 'a'
.text:00407063                 cmp     eax, 1Dh
.text:00407066                 jmp     loc_406FA0
.text:00407066 ; ---------------------------------------------------------------------------
.text:0040706B                 align 10h
.text:00407070
.text:00407070 loc_407070:                             ; CODE XREF: sub_406F40+1D↑j
.text:00407070                 cmp     ebx, ebp
.text:00407072                 jnb     loc_406FA8
.text:00407078                 nop
.text:00407079                 lea     esi, [esi+0]
.text:00407080
.text:00407080 loc_407080:                             ; CODE XREF: sub_406F40+1AE↓j
.text:00407080                 movzx   ecx, byte ptr [ebx]
.text:00407083                 inc     ebx
.text:00407084                 cmp     dword ptr [eax], 1
.text:00407087                 movzx   edx, cl
.text:0040708A                 mov     [esp+2Ch+var_19], cl
.text:0040708E                 jz      short loc_407101
.text:00407090                 mov     [esp+2Ch+SrcCh], 157h ; Type
.text:00407098                 mov     [esp+2Ch+DstCh], edx ; C
.text:0040709B                 call    _isctype
.text:004070A0
.text:004070A0 loc_4070A0:                             ; CODE XREF: sub_406F40+1D2↓j
.text:004070A0                 test    eax, eax
.text:004070A2                 jnz     short loc_4070E0
.text:004070A4                 test    [esp+2Ch+arg_8], 2
.text:004070A9                 mov     eax, 0FFFFFFFFh
.text:004070AE                 jnz     loc_406FAA
.text:004070B4                 movzx   edx, [esp+2Ch+var_19]
.text:004070B9                 mov     esi, ds:__mb_cur_max
.text:004070BF                 cmp     dword ptr [esi], 1
.text:004070C2                 jz      short loc_4070F0
.text:004070C4                 mov     [esp+2Ch+SrcCh], 20h ; ' ' ; Type
.text:004070CC                 mov     [esp+2Ch+DstCh], edx ; C
.text:004070CF                 call    _isctype
.text:004070D4
.text:004070D4 loc_4070D4:                             ; CODE XREF: sub_406F40+1BF↓j
.text:004070D4                 test    eax, eax
.text:004070D6                 jnz     short loc_4070E1
.text:004070D8                 nop
.text:004070D9                 lea     esi, [esi+0]
.text:004070E0
.text:004070E0 loc_4070E0:                             ; CODE XREF: sub_406F40+162↑j
.text:004070E0                 inc     edi
.text:004070E1
.text:004070E1 loc_4070E1:                             ; CODE XREF: sub_406F40+196↑j
.text:004070E1                 cmp     ebx, ebp
.text:004070E3                 jnb     loc_406FA8
.text:004070E9                 mov     eax, ds:__mb_cur_max
.text:004070EE                 jmp     short loc_407080
.text:004070F0 ; ---------------------------------------------------------------------------
.text:004070F0
.text:004070F0 loc_4070F0:                             ; CODE XREF: sub_406F40+182↑j
.text:004070F0                 mov     esi, ds:_pctype
.text:004070F6                 mov     ecx, [esi]
.text:004070F8                 movzx   eax, word ptr [ecx+edx*2]
.text:004070FC                 and     eax, 20h
.text:004070FF                 jmp     short loc_4070D4
.text:00407101 ; ---------------------------------------------------------------------------
.text:00407101
.text:00407101 loc_407101:                             ; CODE XREF: sub_406F40+14E↑j
.text:00407101                 mov     ecx, ds:_pctype
.text:00407107                 mov     esi, [ecx]
.text:00407109                 movzx   eax, word ptr [esi+edx*2]
.text:0040710D                 and     eax, 157h
.text:00407112                 jmp     short loc_4070A0
.text:00407112 sub_406F40      endp
.text:00407112
.text:00407112 ; ---------------------------------------------------------------------------
.text:00407114                 align 10h
.text:00407120
.text:00407120 ; =============== S U B R O U T I N E =======================================
.text:00407120
.text:00407120
.text:00407120 ; int __cdecl sub_407120(char *, char)
.text:00407120 sub_407120      proc near               ; CODE XREF: sub_402BB0+102↑p
.text:00407120                                         ; sub_402BB0+120↑p ...
.text:00407120
.text:00407120 Str             = dword ptr -1Ch
.text:00407120 var_18          = dword ptr -18h
.text:00407120 var_14          = byte ptr -14h
.text:00407120 var_4           = dword ptr -4
.text:00407120 arg_0           = dword ptr  4
.text:00407120 arg_4           = byte ptr  8
.text:00407120
.text:00407120                 sub     esp, 1Ch
.text:00407123                 mov     [esp+1Ch+var_4], ebx
.text:00407127                 mov     ebx, [esp+1Ch+arg_0]
.text:0040712B                 mov     [esp+1Ch+Str], ebx ; Str
.text:0040712E                 call    strlen
.text:00407133                 mov     [esp+1Ch+var_18], eax ; int
.text:00407137                 mov     ecx, dword ptr [esp+1Ch+arg_4]
.text:0040713B                 mov     [esp+1Ch+Str], ebx ; char *
.text:0040713E                 mov     dword ptr [esp+1Ch+var_14], ecx ; char
.text:00407142                 call    sub_406F40
.text:00407147                 mov     ebx, [esp+1Ch+var_4]
.text:0040714B                 add     esp, 1Ch
.text:0040714E                 retn
.text:0040714E sub_407120      endp
.text:0040714E
.text:0040714E ; ---------------------------------------------------------------------------
.text:0040714F                 align 10h
.text:00407150 dword_407150    dd 90002D2Dh, 7 dup(90909090h)
.text:00407150                                         ; DATA XREF: sub_4073A0+E4↓o
.text:00407170 aSOptionCSDoesn db '%s: option `%c%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00407170                                         ; DATA XREF: sub_4073A0+2FC↓o
.text:0040719D                 db 13h dup(90h)
.text:004071B0 aSOptionSDoesnT db '%s: option `--%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:004071B0                                         ; DATA XREF: sub_4073A0:loc_407702↓o
.text:004071DD                 db 13h dup(90h)
.text:004071F0 aSOptionSRequir db '%s: option `%s',27h,' requires an argument',0Ah,0
.text:004071F0                                         ; DATA XREF: sub_4073A0:loc_4077A0↓o
.text:004071F0                                         ; sub_4073A0:loc_407B67↓o
.text:00407216                 db 1Ah dup(90h)
.text:00407230 aSUnrecognizedO db '%s: unrecognized option `%c%s',27h,0Ah,0
.text:00407230                                         ; DATA XREF: sub_4073A0+48E↓o
.text:00407250 dword_407250    dd 90909000h, 7 dup(90909090h)
.text:00407250                                         ; DATA XREF: sub_4073A0:loc_407871↓o
.text:00407270 aSUnrecognizedO_0 db '%s: unrecognized option `--%s',27h,0Ah,0
.text:00407270                                         ; DATA XREF: sub_4073A0:loc_40788A↓o
.text:00407290 aSOptionRequire db '%s: option requires an argument -- %c',0Ah,0
.text:00407290                                         ; DATA XREF: sub_4073A0:loc_40796F↓o
.text:00407290                                         ; sub_4073A0:loc_407C9C↓o
.text:004072B7                 db 19h dup(90h)
.text:004072D0 aSOptionWSDoesn db '%s: option `-W %s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:004072D0                                         ; DATA XREF: sub_4073A0:loc_407AE3↓o
.text:004072FE                 db 12h dup(90h)
.text:00407310 aSOptionWSIsAmb db '%s: option `-W %s',27h,' is ambiguous',0Ah,0
.text:00407310                                         ; DATA XREF: sub_4073A0:loc_407BCF↓o
.text:00407331 aSIllegalOption db '%s: illegal option -- %c',0Ah,0
.text:00407331                                         ; DATA XREF: sub_4073A0+93F↓o
.text:0040734B aSInvalidOption db '%s: invalid option -- %c',0Ah,0
.text:0040734B                                         ; DATA XREF: sub_4073A0:loc_407D17↓o
.text:00407365 aSOptionSIsAmbi db '%s: option `%s',27h,' is ambiguous',0Ah,0
.text:00407365                                         ; DATA XREF: sub_4073A0:loc_407D3E↓o
.text:00407383 ; const char aPosixlyCorrect_0[]
.text:00407383 aPosixlyCorrect_0 db 'POSIXLY_CORRECT',0
.text:00407383                                         ; DATA XREF: sub_4073A0:loc_407EF0↓o
.text:00407393                 align 10h
.text:004073A0
.text:004073A0 ; =============== S U B R O U T I N E =======================================
.text:004073A0
.text:004073A0
.text:004073A0 ; int __cdecl sub_4073A0(int, int, char *Str, int, int, int, int, int)
.text:004073A0 sub_4073A0      proc near               ; CODE XREF: sub_407F30+5A↓p
.text:004073A0                                         ; .text:0040801A↓p ...
.text:004073A0
.text:004073A0 Str1            = dword ptr -5Ch
.text:004073A0 Str2            = dword ptr -58h
.text:004073A0 MaxCount        = dword ptr -54h
.text:004073A0 var_50          = dword ptr -50h
.text:004073A0 var_4C          = dword ptr -4Ch
.text:004073A0 var_3C          = dword ptr -3Ch
.text:004073A0 var_38          = dword ptr -38h
.text:004073A0 var_34          = dword ptr -34h
.text:004073A0 var_30          = dword ptr -30h
.text:004073A0 var_2C          = dword ptr -2Ch
.text:004073A0 var_28          = dword ptr -28h
.text:004073A0 var_24          = dword ptr -24h
.text:004073A0 var_20          = dword ptr -20h
.text:004073A0 var_1C          = dword ptr -1Ch
.text:004073A0 var_18          = dword ptr -18h
.text:004073A0 var_14          = dword ptr -14h
.text:004073A0 arg_0           = dword ptr  4
.text:004073A0 arg_4           = dword ptr  8
.text:004073A0 Str             = dword ptr  0Ch
.text:004073A0 arg_C           = dword ptr  10h
.text:004073A0 arg_10          = dword ptr  14h
.text:004073A0 arg_14          = dword ptr  18h
.text:004073A0 arg_18          = dword ptr  1Ch
.text:004073A0 arg_1C          = dword ptr  20h
.text:004073A0
.text:004073A0                 push    ebp
.text:004073A1                 mov     eax, 0FFFFFFFFh
.text:004073A6                 push    edi
.text:004073A7                 push    esi
.text:004073A8                 push    ebx
.text:004073A9                 sub     esp, 4Ch
.text:004073AC                 mov     esi, [esp+5Ch+Str]
.text:004073B0                 mov     ebp, [esp+5Ch+arg_1C]
.text:004073B4                 cmp     byte ptr [esi], 3Ah ; ':'
.text:004073B7                 mov     ebx, [ebp+4]
.text:004073BA                 setz    dl
.text:004073BD                 movzx   ecx, dl
.text:004073C0                 dec     ecx
.text:004073C1                 and     ecx, ebx
.text:004073C3                 mov     [esp+5Ch+var_14], ecx
.text:004073C7                 mov     ecx, [esp+5Ch+arg_0]
.text:004073CB                 test    ecx, ecx
.text:004073CD                 jle     loc_4074F7
.text:004073D3                 mov     dword ptr [ebp+0Ch], 0
.text:004073DA                 mov     ebx, [ebp+0]
.text:004073DD                 test    ebx, ebx
.text:004073DF                 jz      loc_407F10
.text:004073E5                 mov     edi, [ebp+10h]
.text:004073E8                 test    edi, edi
.text:004073EA                 jnz     short loc_407443
.text:004073EC                 lea     esi, [esi+0]
.text:004073F0
.text:004073F0 loc_4073F0:                             ; CODE XREF: sub_4073A0+B7C↓j
.text:004073F0                 mov     [ebp+24h], ebx
.text:004073F3                 mov     esi, [esp+5Ch+Str]
.text:004073F7                 mov     [ebp+20h], ebx
.text:004073FA                 mov     ecx, [esp+5Ch+arg_18]
.text:004073FE                 xor     ebx, ebx
.text:00407400                 mov     dword ptr [ebp+14h], 0
.text:00407407                 test    ecx, ecx
.text:00407409                 jz      loc_407EF0
.text:0040740F
.text:0040740F loc_40740F:                             ; CODE XREF: sub_4073A0+B64↓j
.text:0040740F                 mov     ebx, 1
.text:00407414
.text:00407414 loc_407414:                             ; CODE XREF: sub_4073A0+B5E↓j
.text:00407414                 mov     [ebp+1Ch], ebx
.text:00407417                 mov     ecx, [esp+5Ch+Str]
.text:0040741B                 movzx   eax, byte ptr [ecx]
.text:0040741E                 cmp     al, 2Dh ; '-'
.text:00407420                 jz      loc_407EE0
.text:00407426                 cmp     al, 2Bh ; '+'
.text:00407428                 jz      loc_407EC9
.text:0040742E                 xor     edx, edx
.text:00407430                 test    ebx, ebx
.text:00407432                 setz    dl
.text:00407435                 mov     [ebp+18h], edx
.text:00407438
.text:00407438 loc_407438:                             ; CODE XREF: sub_4073A0+B35↓j
.text:00407438                 mov     [esp+5Ch+Str], esi
.text:0040743C                 mov     dword ptr [ebp+10h], 1
.text:00407443
.text:00407443 loc_407443:                             ; CODE XREF: sub_4073A0+4A↑j
.text:00407443                 mov     eax, [ebp+14h]
.text:00407446                 test    eax, eax
.text:00407448                 jz      short loc_407453
.text:0040744A                 cmp     byte ptr [eax], 0
.text:0040744D                 jnz     loc_407530
.text:00407453
.text:00407453 loc_407453:                             ; CODE XREF: sub_4073A0+A8↑j
.text:00407453                 mov     ebx, [ebp+0]
.text:00407456                 cmp     [ebp+24h], ebx
.text:00407459                 jle     short loc_40745E
.text:0040745B                 mov     [ebp+24h], ebx
.text:0040745E
.text:0040745E loc_40745E:                             ; CODE XREF: sub_4073A0+B9↑j
.text:0040745E                 cmp     [ebp+20h], ebx
.text:00407461                 jle     short loc_407466
.text:00407463                 mov     [ebp+20h], ebx
.text:00407466
.text:00407466 loc_407466:                             ; CODE XREF: sub_4073A0+C1↑j
.text:00407466                 cmp     dword ptr [ebp+18h], 1
.text:0040746A                 jz      loc_407E40
.text:00407470
.text:00407470 loc_407470:                             ; CODE XREF: sub_4073A0+B13↓j
.text:00407470                 cmp     ebx, [esp+5Ch+arg_0]
.text:00407474                 jz      loc_407E24
.text:0040747A                 cld
.text:0040747B                 mov     ecx, [esp+5Ch+arg_4]
.text:0040747F                 mov     edx, 3
.text:00407484                 mov     edi, offset dword_407150
.text:00407489                 mov     esi, [ecx+ebx*4]
.text:0040748C                 mov     ecx, edx
.text:0040748E                 repe cmpsb
.text:00407490                 jnz     short loc_4074CC
.text:00407492                 mov     edx, [ebp+24h]
.text:00407495                 lea     eax, [ebx+1]
.text:00407498                 cmp     [ebp+20h], edx
.text:0040749B                 mov     [ebp+0], eax
.text:0040749E                 jz      loc_407E38
.text:004074A4                 cmp     edx, eax
.text:004074A6                 jz      short loc_4074C0
.text:004074A8                 mov     [esp+5Ch+Str2], ebp
.text:004074AC                 mov     ebx, [esp+5Ch+arg_4]
.text:004074B0                 mov     [esp+5Ch+Str1], ebx
.text:004074B3                 call    sub_408050
.text:004074B8                 nop
.text:004074B9                 lea     esi, [esi+0]
.text:004074C0
.text:004074C0 loc_4074C0:                             ; CODE XREF: sub_4073A0+106↑j
.text:004074C0                                         ; sub_4073A0+A9B↓j
.text:004074C0                 mov     eax, [esp+5Ch+arg_0]
.text:004074C4                 mov     ebx, eax
.text:004074C6                 mov     [ebp+24h], eax
.text:004074C9                 mov     [ebp+0], eax
.text:004074CC
.text:004074CC loc_4074CC:                             ; CODE XREF: sub_4073A0+F0↑j
.text:004074CC                 cmp     ebx, [esp+5Ch+arg_0]
.text:004074D0                 jz      loc_407E24
.text:004074D6                 mov     esi, [esp+5Ch+arg_4]
.text:004074DA                 mov     eax, [esi+ebx*4]
.text:004074DD                 cmp     byte ptr [eax], 2Dh ; '-'
.text:004074E0                 jz      short loc_407507
.text:004074E2
.text:004074E2 loc_4074E2:                             ; CODE XREF: sub_4073A0+16D↓j
.text:004074E2                 mov     edx, [ebp+18h]
.text:004074E5                 test    edx, edx
.text:004074E7                 jz      short loc_407500
.text:004074E9                 mov     [ebp+0Ch], eax
.text:004074EC                 lea     edi, [ebx+1]
.text:004074EF                 mov     eax, 1
.text:004074F4                 mov     [ebp+0], edi
.text:004074F7
.text:004074F7 loc_4074F7:                             ; CODE XREF: sub_4073A0+2D↑j
.text:004074F7                                         ; sub_4073A0+165↓j ...
.text:004074F7                 add     esp, 4Ch
.text:004074FA                 pop     ebx
.text:004074FB                 pop     esi
.text:004074FC                 pop     edi
.text:004074FD                 pop     ebp
.text:004074FE                 retn
.text:004074FE ; ---------------------------------------------------------------------------
.text:004074FF                 align 10h
.text:00407500
.text:00407500 loc_407500:                             ; CODE XREF: sub_4073A0+147↑j
.text:00407500                                         ; sub_4073A0+A8A↓j ...
.text:00407500                 mov     eax, 0FFFFFFFFh
.text:00407505                 jmp     short loc_4074F7
.text:00407507 ; ---------------------------------------------------------------------------
.text:00407507
.text:00407507 loc_407507:                             ; CODE XREF: sub_4073A0+140↑j
.text:00407507                 movzx   edx, byte ptr [eax+1]
.text:0040750B                 test    dl, dl
.text:0040750D                 jz      short loc_4074E2
.text:0040750F                 mov     ebx, [esp+5Ch+arg_C]
.text:00407513                 xor     ecx, ecx
.text:00407515                 test    ebx, ebx
.text:00407517                 jz      short loc_407522
.text:00407519                 cmp     dl, 2Dh ; '-'
.text:0040751C                 jz      loc_407E1A
.text:00407522
.text:00407522 loc_407522:                             ; CODE XREF: sub_4073A0+177↑j
.text:00407522                                         ; sub_4073A0+A7F↓j
.text:00407522                 lea     esi, [ecx+eax+1]
.text:00407526                 mov     [ebp+14h], esi
.text:00407529                 lea     esi, [esi+0]
.text:00407530
.text:00407530 loc_407530:                             ; CODE XREF: sub_4073A0+AD↑j
.text:00407530                 mov     ecx, [esp+5Ch+arg_C]
.text:00407534                 test    ecx, ecx
.text:00407536                 jz      loc_4078C0
.text:0040753C                 mov     edx, [ebp+0]
.text:0040753F                 mov     edi, [esp+5Ch+arg_4]
.text:00407543                 mov     eax, [edi+edx*4]
.text:00407546                 movzx   edx, byte ptr [eax+1]
.text:0040754A                 cmp     dl, 2Dh ; '-'
.text:0040754D                 jz      short loc_407565
.text:0040754F                 mov     ebx, [esp+5Ch+arg_14]
.text:00407553                 test    ebx, ebx
.text:00407555                 jz      loc_4078C0
.text:0040755B                 cmp     byte ptr [eax+2], 0
.text:0040755F                 jz      loc_407DFA
.text:00407565
.text:00407565 loc_407565:                             ; CODE XREF: sub_4073A0+1AD↑j
.text:00407565                                         ; sub_4073A0+A75↓j
.text:00407565                 mov     [esp+5Ch+var_18], 0
.text:0040756D                 mov     ecx, [ebp+14h]
.text:00407570                 mov     [esp+5Ch+var_1C], 0
.text:00407578                 mov     [esp+5Ch+var_20], 0
.text:00407580                 mov     edi, ecx
.text:00407582                 mov     [esp+5Ch+var_24], 0FFFFFFFFh
.text:0040758A                 movzx   eax, byte ptr [ecx]
.text:0040758D                 test    al, al
.text:0040758F                 jz      short loc_4075AC
.text:00407591                 cmp     al, 3Dh ; '='
.text:00407593                 jz      short loc_4075AC
.text:00407595                 lea     esi, [esi+0]
.text:00407599                 lea     edi, [edi+0]
.text:004075A0
.text:004075A0 loc_4075A0:                             ; CODE XREF: sub_4073A0+20A↓j
.text:004075A0                 inc     edi
.text:004075A1                 movzx   eax, byte ptr [edi]
.text:004075A4                 test    al, al
.text:004075A6                 jz      short loc_4075AC
.text:004075A8                 cmp     al, 3Dh ; '='
.text:004075AA                 jnz     short loc_4075A0
.text:004075AC
.text:004075AC loc_4075AC:                             ; CODE XREF: sub_4073A0+1EF↑j
.text:004075AC                                         ; sub_4073A0+1F3↑j ...
.text:004075AC                 mov     [esp+5Ch+var_28], 0
.text:004075B4                 mov     esi, [esp+5Ch+arg_C]
.text:004075B8                 mov     ebx, [esi]
.text:004075BA                 test    ebx, ebx
.text:004075BC                 mov     edx, ebx
.text:004075BE                 jz      loc_4077E0
.text:004075C4                 lea     esi, [esi+0]
.text:004075CA                 lea     edi, [edi+0]
.text:004075D0
.text:004075D0 loc_4075D0:                             ; CODE XREF: sub_4073A0+25E↓j
.text:004075D0                 mov     [esp+5Ch+Str2], ecx ; Str2
.text:004075D4                 mov     ebx, edi
.text:004075D6                 sub     ebx, ecx
.text:004075D8                 mov     [esp+5Ch+MaxCount], ebx ; MaxCount
.text:004075DC                 mov     [esp+5Ch+Str1], edx ; Str1
.text:004075DF                 call    strncmp
.text:004075E4                 test    eax, eax
.text:004075E6                 jz      loc_407D76
.text:004075EC
.text:004075EC loc_4075EC:                             ; CODE XREF: sub_4073A0+A0F↓j
.text:004075EC                                         ; sub_4073A0+A24↓j ...
.text:004075EC                 inc     [esp+5Ch+var_28]
.text:004075F0                 add     esi, 10h
.text:004075F3                 mov     ecx, [esi]
.text:004075F5                 test    ecx, ecx
.text:004075F7                 mov     edx, ecx
.text:004075F9                 jz      short loc_407600
.text:004075FB                 mov     ecx, [ebp+14h]
.text:004075FE                 jmp     short loc_4075D0
.text:00407600 ; ---------------------------------------------------------------------------
.text:00407600
.text:00407600 loc_407600:                             ; CODE XREF: sub_4073A0+259↑j
.text:00407600                                         ; sub_4073A0+A55↓j
.text:00407600                 mov     esi, [esp+5Ch+var_20]
.text:00407604                 test    esi, esi
.text:00407606                 jz      short loc_407614
.text:00407608                 mov     edx, [esp+5Ch+var_1C]
.text:0040760C                 test    edx, edx
.text:0040760E                 jz      loc_407D20
.text:00407614
.text:00407614 loc_407614:                             ; CODE XREF: sub_4073A0+266↑j
.text:00407614                 mov     eax, [esp+5Ch+var_18]
.text:00407618                 test    eax, eax
.text:0040761A                 jz      loc_4077E0
.text:00407620                 mov     ecx, [ebp+0]
.text:00407623                 lea     eax, [ecx+1]
.text:00407626                 mov     [ebp+0], eax
.text:00407629                 cmp     byte ptr [edi], 0
.text:0040762C                 jz      loc_407740
.text:00407632                 mov     ecx, [esp+5Ch+var_18]
.text:00407636                 mov     esi, [ecx+4]
.text:00407639                 test    esi, esi
.text:0040763B                 jz      short loc_407686
.text:0040763D                 lea     ebx, [edi+1]
.text:00407640                 mov     [ebp+0Ch], ebx
.text:00407643
.text:00407643 loc_407643:                             ; CODE XREF: sub_4073A0+3A8↓j
.text:00407643                                         ; sub_4073A0+3C4↓j
.text:00407643                 mov     ebx, [ebp+14h]
.text:00407646                 mov     [esp+5Ch+Str1], ebx ; Str
.text:00407649                 call    strlen
.text:0040764E                 add     [ebp+14h], eax
.text:00407651                 mov     esi, [esp+5Ch+arg_10]
.text:00407655                 test    esi, esi
.text:00407657                 jz      short loc_407663
.text:00407659                 mov     ebp, [esp+5Ch+var_24]
.text:0040765D                 mov     ecx, [esp+5Ch+arg_10]
.text:00407661                 mov     [ecx], ebp
.text:00407663
.text:00407663 loc_407663:                             ; CODE XREF: sub_4073A0+2B7↑j
.text:00407663                 mov     eax, [esp+5Ch+var_18]
.text:00407667                 mov     ecx, [eax+8]
.text:0040766A                 test    ecx, ecx
.text:0040766C                 jnz     short loc_40767A
.text:0040766E                 mov     ecx, [esp+5Ch+var_18]
.text:00407672
.text:00407672 loc_407672:                             ; CODE XREF: sub_4073A0+723↓j
.text:00407672                 mov     eax, [ecx+0Ch]
.text:00407675                 jmp     loc_4074F7
.text:0040767A ; ---------------------------------------------------------------------------
.text:0040767A
.text:0040767A loc_40767A:                             ; CODE XREF: sub_4073A0+2CC↑j
.text:0040767A                                         ; sub_4073A0+719↓j
.text:0040767A                 mov     esi, [eax+0Ch]
.text:0040767D                 xor     eax, eax
.text:0040767F                 mov     [ecx], esi
.text:00407681                 jmp     loc_4074F7
.text:00407686 ; ---------------------------------------------------------------------------
.text:00407686
.text:00407686 loc_407686:                             ; CODE XREF: sub_4073A0+29B↑j
.text:00407686                 mov     edi, [esp+5Ch+var_14]
.text:0040768A                 test    edi, edi
.text:0040768C                 jz      short loc_4076E0
.text:0040768E                 mov     esi, [esp+5Ch+arg_4]
.text:00407692                 mov     edx, [esi+eax*4-4]
.text:00407696                 cmp     byte ptr [edx+1], 2Dh ; '-'
.text:0040769A                 jz      short loc_407702
.text:0040769C                 mov     [esp+5Ch+Str1], offset aSOptionCSDoesn ; "%s: option `%c%s' doesn't allow an argu"...
.text:004076A3                 call    ds:libintl_gettext
.text:004076A9                 mov     edx, [esp+5Ch+var_18]
.text:004076AD                 mov     edi, [edx]
.text:004076AF                 mov     [esp+5Ch+var_4C], edi
.text:004076B3                 mov     ebx, [ebp+0]
.text:004076B6                 mov     edi, [esp+5Ch+arg_4]
.text:004076BA                 mov     ecx, [edi+ebx*4-4]
.text:004076BE                 movsx   esi, byte ptr [ecx]
.text:004076C1                 mov     ecx, ds:_iob
.text:004076C7                 add     ecx, 40h ; '@'
.text:004076CA                 mov     [esp+5Ch+var_50], esi
.text:004076CE                 mov     ebx, [edi]
.text:004076D0                 mov     [esp+5Ch+Str2], eax ; Format
.text:004076D4                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:004076D7                 mov     [esp+5Ch+MaxCount], ebx
.text:004076DB                 call    fprintf
.text:004076E0
.text:004076E0 loc_4076E0:                             ; CODE XREF: sub_4073A0+2EC↑j
.text:004076E0                                         ; sub_4073A0+398↓j
.text:004076E0                 mov     ecx, [ebp+14h]
.text:004076E3                 mov     [esp+5Ch+Str1], ecx ; Str
.text:004076E6                 call    strlen
.text:004076EB                 add     [ebp+14h], eax
.text:004076EE                 mov     eax, [esp+5Ch+var_18]
.text:004076F2                 mov     esi, [eax+0Ch]
.text:004076F5                 mov     [ebp+8], esi
.text:004076F8
.text:004076F8 loc_4076F8:                             ; CODE XREF: sub_4073A0+4E5↓j
.text:004076F8                                         ; sub_4073A0+73E↓j ...
.text:004076F8                 mov     eax, 3Fh ; '?'
.text:004076FD                 jmp     loc_4074F7
.text:00407702 ; ---------------------------------------------------------------------------
.text:00407702
.text:00407702 loc_407702:                             ; CODE XREF: sub_4073A0+2FA↑j
.text:00407702                 mov     [esp+5Ch+Str1], offset aSOptionSDoesnT ; "%s: option `--%s' doesn't allow an argu"...
.text:00407709                 call    ds:libintl_gettext
.text:0040770F                 mov     edx, [esp+5Ch+var_18]
.text:00407713                 mov     edi, [esp+5Ch+arg_4]
.text:00407717                 mov     ecx, ds:_iob
.text:0040771D                 mov     esi, [edx]
.text:0040771F                 add     ecx, 40h ; '@'
.text:00407722                 mov     [esp+5Ch+var_50], esi
.text:00407726                 mov     ebx, [edi]
.text:00407728                 mov     [esp+5Ch+Str2], eax ; Format
.text:0040772C                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:0040772F                 mov     [esp+5Ch+MaxCount], ebx
.text:00407733                 call    fprintf
.text:00407738                 jmp     short loc_4076E0
.text:00407738 ; ---------------------------------------------------------------------------
.text:0040773A                 align 10h
.text:00407740
.text:00407740 loc_407740:                             ; CODE XREF: sub_4073A0+28C↑j
.text:00407740                 mov     ebx, [esp+5Ch+var_18]
.text:00407744                 cmp     dword ptr [ebx+4], 1
.text:00407748                 jnz     loc_407643
.text:0040774E                 cmp     eax, [esp+5Ch+arg_0]
.text:00407752                 jge     short loc_407769
.text:00407754                 mov     ebx, [esp+5Ch+arg_4]
.text:00407758                 lea     edi, [ecx+2]
.text:0040775B                 mov     [ebp+0], edi
.text:0040775E                 mov     esi, [ebx+eax*4]
.text:00407761                 mov     [ebp+0Ch], esi
.text:00407764                 jmp     loc_407643
.text:00407769 ; ---------------------------------------------------------------------------
.text:00407769
.text:00407769 loc_407769:                             ; CODE XREF: sub_4073A0+3B2↑j
.text:00407769                 mov     edx, [esp+5Ch+var_14]
.text:0040776D                 test    edx, edx
.text:0040776F                 jnz     short loc_4077A0
.text:00407771
.text:00407771 loc_407771:                             ; CODE XREF: sub_4073A0+437↓j
.text:00407771                 mov     edx, [ebp+14h]
.text:00407774                 mov     [esp+5Ch+Str1], edx ; Str
.text:00407777                 call    strlen
.text:0040777C                 add     [ebp+14h], eax
.text:0040777F                 mov     eax, [esp+5Ch+var_18]
.text:00407783                 mov     edi, [eax+0Ch]
.text:00407786                 mov     [ebp+8], edi
.text:00407789
.text:00407789 loc_407789:                             ; CODE XREF: sub_4073A0+7C2↓j
.text:00407789                 mov     ebp, [esp+5Ch+Str]
.text:0040778D                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:00407791                 setnz   bl
.text:00407794                 movzx   esi, bl
.text:00407797                 lea     eax, [esi+esi*4+3Ah]
.text:0040779B                 jmp     loc_4074F7
.text:004077A0 ; ---------------------------------------------------------------------------
.text:004077A0
.text:004077A0 loc_4077A0:                             ; CODE XREF: sub_4073A0+3CF↑j
.text:004077A0                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:004077A7                 call    ds:libintl_gettext
.text:004077AD                 mov     ecx, [ebp+0]
.text:004077B0                 mov     esi, [esp+5Ch+arg_4]
.text:004077B4                 mov     ebx, [esi+ecx*4-4]
.text:004077B8                 mov     ecx, ds:_iob
.text:004077BE                 mov     [esp+5Ch+var_50], ebx
.text:004077C2                 mov     edi, [esi]
.text:004077C4                 add     ecx, 40h ; '@'
.text:004077C7                 mov     [esp+5Ch+Str2], eax ; Format
.text:004077CB                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:004077CE                 mov     [esp+5Ch+MaxCount], edi
.text:004077D2                 call    fprintf
.text:004077D7                 jmp     short loc_407771
.text:004077D7 ; ---------------------------------------------------------------------------
.text:004077D9                 align 10h
.text:004077E0
.text:004077E0 loc_4077E0:                             ; CODE XREF: sub_4073A0+21E↑j
.text:004077E0                                         ; sub_4073A0+27A↑j
.text:004077E0                 mov     eax, [esp+5Ch+arg_14]
.text:004077E4                 test    eax, eax
.text:004077E6                 jz      short loc_407816
.text:004077E8                 mov     ebx, [ebp+0]
.text:004077EB                 mov     esi, [esp+5Ch+arg_4]
.text:004077EF                 mov     edi, [esi+ebx*4]
.text:004077F2                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:004077F6                 jz      short loc_407819
.text:004077F8                 mov     ecx, [ebp+14h]
.text:004077FB                 mov     edx, [esp+5Ch+Str]
.text:004077FF                 movsx   ebx, byte ptr [ecx]
.text:00407802                 mov     [esp+5Ch+Str1], edx ; Str
.text:00407805                 mov     [esp+5Ch+Str2], ebx ; Val
.text:00407809                 call    strchr
.text:0040780E                 test    eax, eax
.text:00407810                 jnz     loc_4078C0
.text:00407816
.text:00407816 loc_407816:                             ; CODE XREF: sub_4073A0+446↑j
.text:00407816                 mov     ebx, [ebp+0]
.text:00407819
.text:00407819 loc_407819:                             ; CODE XREF: sub_4073A0+456↑j
.text:00407819                 mov     eax, [esp+5Ch+var_14]
.text:0040781D                 test    eax, eax
.text:0040781F                 jz      short loc_407871
.text:00407821                 mov     esi, [esp+5Ch+arg_4]
.text:00407825                 mov     edi, [esi+ebx*4]
.text:00407828                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:0040782C                 jz      short loc_40788A
.text:0040782E                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO ; "%s: unrecognized option `%c%s'\n"
.text:00407835                 call    ds:libintl_gettext
.text:0040783B                 mov     edi, [ebp+14h]
.text:0040783E                 mov     [esp+5Ch+var_4C], edi
.text:00407842                 mov     ebx, [ebp+0]
.text:00407845                 mov     edi, [esp+5Ch+arg_4]
.text:00407849                 mov     esi, [edi+ebx*4]
.text:0040784C                 movsx   ecx, byte ptr [esi]
.text:0040784F                 mov     esi, ds:_iob
.text:00407855                 add     esi, 40h ; '@'
.text:00407858                 mov     [esp+5Ch+var_50], ecx
.text:0040785C                 mov     ebx, [edi]
.text:0040785E                 mov     [esp+5Ch+Str2], eax ; Format
.text:00407862                 mov     [esp+5Ch+Str1], esi ; Stream
.text:00407865                 mov     [esp+5Ch+MaxCount], ebx
.text:00407869                 call    fprintf
.text:0040786E
.text:0040786E loc_40786E:                             ; CODE XREF: sub_4073A0+51D↓j
.text:0040786E                 mov     ebx, [ebp+0]
.text:00407871
.text:00407871 loc_407871:                             ; CODE XREF: sub_4073A0+47F↑j
.text:00407871                 mov     dword ptr [ebp+14h], offset dword_407250
.text:00407878                 lea     edx, [ebx+1]
.text:0040787B                 mov     [ebp+0], edx
.text:0040787E
.text:0040787E loc_40787E:                             ; CODE XREF: sub_4073A0+999↓j
.text:0040787E                 mov     dword ptr [ebp+8], 0
.text:00407885                 jmp     loc_4076F8
.text:0040788A ; ---------------------------------------------------------------------------
.text:0040788A
.text:0040788A loc_40788A:                             ; CODE XREF: sub_4073A0+48C↑j
.text:0040788A                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO_0 ; "%s: unrecognized option `--%s'\n"
.text:00407891                 call    ds:libintl_gettext
.text:00407897                 mov     ecx, [ebp+14h]
.text:0040789A                 mov     edi, [esp+5Ch+arg_4]
.text:0040789E                 mov     edx, ds:_iob
.text:004078A4                 mov     [esp+5Ch+var_50], ecx
.text:004078A8                 mov     ebx, [edi]
.text:004078AA                 add     edx, 40h ; '@'
.text:004078AD                 mov     [esp+5Ch+Str2], eax ; Format
.text:004078B1                 mov     [esp+5Ch+MaxCount], ebx
.text:004078B5                 mov     [esp+5Ch+Str1], edx ; Stream
.text:004078B8                 call    fprintf
.text:004078BD                 jmp     short loc_40786E
.text:004078BD ; ---------------------------------------------------------------------------
.text:004078BF                 align 10h
.text:004078C0
.text:004078C0 loc_4078C0:                             ; CODE XREF: sub_4073A0+196↑j
.text:004078C0                                         ; sub_4073A0+1B5↑j ...
.text:004078C0                 mov     esi, [ebp+14h]
.text:004078C3                 movzx   ebx, byte ptr [esi]
.text:004078C6                 inc     esi
.text:004078C7                 mov     [ebp+14h], esi
.text:004078CA                 mov     ecx, [esp+5Ch+Str]
.text:004078CE                 movsx   esi, bl
.text:004078D1                 mov     [esp+5Ch+Str2], esi ; Val
.text:004078D5                 mov     edi, esi
.text:004078D7                 mov     [esp+5Ch+Str1], ecx ; Str
.text:004078DA                 call    strchr
.text:004078DF                 mov     ecx, [ebp+14h]
.text:004078E2                 cmp     byte ptr [ecx], 0
.text:004078E5                 jnz     short loc_4078EA
.text:004078E7                 inc     dword ptr [ebp+0]
.text:004078EA
.text:004078EA loc_4078EA:                             ; CODE XREF: sub_4073A0+545↑j
.text:004078EA                 test    eax, eax
.text:004078EC                 jz      loc_407CD0
.text:004078F2                 cmp     bl, 3Ah ; ':'
.text:004078F5                 jz      loc_407CD0
.text:004078FB                 cmp     byte ptr [eax], 57h ; 'W'
.text:004078FE                 jz      loc_4079B6
.text:00407904                 movzx   edx, byte ptr [eax+1]
.text:00407908
.text:00407908 loc_407908:                             ; CODE XREF: sub_4073A0+61D↓j
.text:00407908                 cmp     dl, 3Ah ; ':'
.text:0040790B                 jz      short loc_407914
.text:0040790D
.text:0040790D loc_40790D:                             ; CODE XREF: sub_4073A0+590↓j
.text:0040790D                 mov     eax, esi
.text:0040790F                 jmp     loc_4074F7
.text:00407914 ; ---------------------------------------------------------------------------
.text:00407914
.text:00407914 loc_407914:                             ; CODE XREF: sub_4073A0+56B↑j
.text:00407914                 cmp     byte ptr [eax+2], 3Ah ; ':'
.text:00407918                 jz      loc_4079A1
.text:0040791E                 cmp     byte ptr [ecx], 0
.text:00407921                 jz      short loc_407932
.text:00407923
.text:00407923 loc_407923:                             ; CODE XREF: sub_4073A0+604↓j
.text:00407923                 inc     dword ptr [ebp+0]
.text:00407926                 mov     [ebp+0Ch], ecx
.text:00407929
.text:00407929 loc_407929:                             ; CODE XREF: sub_4073A0+5AB↓j
.text:00407929                                         ; sub_4073A0+5C6↓j ...
.text:00407929                 mov     dword ptr [ebp+14h], 0
.text:00407930                 jmp     short loc_40790D
.text:00407932 ; ---------------------------------------------------------------------------
.text:00407932
.text:00407932 loc_407932:                             ; CODE XREF: sub_4073A0+581↑j
.text:00407932                 mov     ecx, [ebp+0]
.text:00407935                 cmp     ecx, [esp+5Ch+arg_0]
.text:00407939                 jz      short loc_40794D
.text:0040793B                 mov     eax, [esp+5Ch+arg_4]
.text:0040793F                 lea     edx, [ecx+1]
.text:00407942                 mov     [ebp+0], edx
.text:00407945                 mov     ebx, [eax+ecx*4]
.text:00407948                 mov     [ebp+0Ch], ebx
.text:0040794B                 jmp     short loc_407929
.text:0040794D ; ---------------------------------------------------------------------------
.text:0040794D
.text:0040794D loc_40794D:                             ; CODE XREF: sub_4073A0+599↑j
.text:0040794D                 mov     ecx, [esp+5Ch+var_14]
.text:00407951                 test    ecx, ecx
.text:00407953                 jnz     short loc_40796F
.text:00407955
.text:00407955 loc_407955:                             ; CODE XREF: sub_4073A0+5FF↓j
.text:00407955                 mov     [ebp+8], edi
.text:00407958                 mov     edi, [esp+5Ch+Str]
.text:0040795C                 cmp     byte ptr [edi], 3Ah ; ':'
.text:0040795F                 jz      short loc_407968
.text:00407961                 mov     esi, 3Fh ; '?'
.text:00407966                 jmp     short loc_407929
.text:00407968 ; ---------------------------------------------------------------------------
.text:00407968
.text:00407968 loc_407968:                             ; CODE XREF: sub_4073A0+5BF↑j
.text:00407968                 mov     esi, 3Ah ; ':'
.text:0040796D                 jmp     short loc_407929
.text:0040796F ; ---------------------------------------------------------------------------
.text:0040796F
.text:0040796F loc_40796F:                             ; CODE XREF: sub_4073A0+5B3↑j
.text:0040796F                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:00407976                 call    ds:libintl_gettext
.text:0040797C                 mov     [esp+5Ch+var_50], edi
.text:00407980                 mov     ebx, [esp+5Ch+arg_4]
.text:00407984                 mov     edx, ds:_iob
.text:0040798A                 mov     esi, [ebx]
.text:0040798C                 add     edx, 40h ; '@'
.text:0040798F                 mov     [esp+5Ch+Str2], eax ; Format
.text:00407993                 mov     [esp+5Ch+MaxCount], esi
.text:00407997                 mov     [esp+5Ch+Str1], edx ; Stream
.text:0040799A                 call    fprintf
.text:0040799F                 jmp     short loc_407955
.text:004079A1 ; ---------------------------------------------------------------------------
.text:004079A1
.text:004079A1 loc_4079A1:                             ; CODE XREF: sub_4073A0+578↑j
.text:004079A1                 cmp     byte ptr [ecx], 0
.text:004079A4                 jnz     loc_407923
.text:004079AA                 mov     dword ptr [ebp+0Ch], 0
.text:004079B1                 jmp     loc_407929
.text:004079B6 ; ---------------------------------------------------------------------------
.text:004079B6
.text:004079B6 loc_4079B6:                             ; CODE XREF: sub_4073A0+55E↑j
.text:004079B6                 movzx   edx, byte ptr [eax+1]
.text:004079BA                 cmp     dl, 3Bh ; ';'
.text:004079BD                 jnz     loc_407908
.text:004079C3                 mov     [esp+5Ch+var_2C], 0
.text:004079CB                 mov     [esp+5Ch+var_30], 0
.text:004079D3                 mov     [esp+5Ch+var_34], 0
.text:004079DB                 mov     [esp+5Ch+var_38], 0
.text:004079E3                 cmp     byte ptr [ecx], 0
.text:004079E6                 jz      loc_407C5B
.text:004079EC                 inc     dword ptr [ebp+0]
.text:004079EF                 mov     [ebp+0Ch], ecx
.text:004079F2
.text:004079F2 loc_4079F2:                             ; CODE XREF: sub_4073A0+8D4↓j
.text:004079F2                 mov     edi, [ebp+0Ch]
.text:004079F5                 mov     [ebp+14h], edi
.text:004079F8                 movzx   eax, byte ptr [edi]
.text:004079FB                 test    al, al
.text:004079FD                 jz      short loc_407A0F
.text:004079FF                 cmp     al, 3Dh ; '='
.text:00407A01                 jz      short loc_407A0F
.text:00407A03
.text:00407A03 loc_407A03:                             ; CODE XREF: sub_4073A0+66D↓j
.text:00407A03                 inc     edi
.text:00407A04                 movzx   eax, byte ptr [edi]
.text:00407A07                 test    al, al
.text:00407A09                 jz      short loc_407A0F
.text:00407A0B                 cmp     al, 3Dh ; '='
.text:00407A0D                 jnz     short loc_407A03
.text:00407A0F
.text:00407A0F loc_407A0F:                             ; CODE XREF: sub_4073A0+65D↑j
.text:00407A0F                                         ; sub_4073A0+661↑j ...
.text:00407A0F                 mov     [esp+5Ch+var_3C], 0
.text:00407A17                 mov     esi, [esp+5Ch+arg_C]
.text:00407A1B                 mov     eax, [esi]
.text:00407A1D                 test    eax, eax
.text:00407A1F                 jz      loc_407BA0
.text:00407A25                 mov     ecx, eax
.text:00407A27
.text:00407A27 loc_407A27:                             ; CODE XREF: sub_4073A0+6B3↓j
.text:00407A27                 mov     ebx, [ebp+14h]
.text:00407A2A                 mov     eax, edi
.text:00407A2C                 mov     [esp+5Ch+Str1], ecx ; Str1
.text:00407A2F                 sub     eax, ebx
.text:00407A31                 mov     [esp+5Ch+MaxCount], eax ; MaxCount
.text:00407A35                 mov     [esp+5Ch+Str2], ebx ; Str2
.text:00407A39                 call    strncmp
.text:00407A3E                 test    eax, eax
.text:00407A40                 jz      loc_407C07
.text:00407A46
.text:00407A46 loc_407A46:                             ; CODE XREF: sub_4073A0+88C↓j
.text:00407A46                                         ; sub_4073A0+89D↓j
.text:00407A46                 inc     [esp+5Ch+var_3C]
.text:00407A4A                 add     esi, 10h
.text:00407A4D                 mov     edx, [esi]
.text:00407A4F                 test    edx, edx
.text:00407A51                 mov     ecx, edx
.text:00407A53                 jnz     short loc_407A27
.text:00407A55
.text:00407A55 loc_407A55:                             ; CODE XREF: sub_4073A0+8B6↓j
.text:00407A55                 mov     esi, [esp+5Ch+var_34]
.text:00407A59                 test    esi, esi
.text:00407A5B                 jz      short loc_407A69
.text:00407A5D                 mov     ebx, [esp+5Ch+var_30]
.text:00407A61                 test    ebx, ebx
.text:00407A63                 jz      loc_407BB1
.text:00407A69
.text:00407A69 loc_407A69:                             ; CODE XREF: sub_4073A0+6BB↑j
.text:00407A69                 mov     esi, [esp+5Ch+var_2C]
.text:00407A6D                 test    esi, esi
.text:00407A6F                 jz      loc_407BA0
.text:00407A75                 cmp     byte ptr [edi], 0
.text:00407A78                 jz      loc_407B20
.text:00407A7E                 mov     ecx, [esp+5Ch+var_2C]
.text:00407A82                 mov     ebx, [ecx+4]
.text:00407A85                 test    ebx, ebx
.text:00407A87                 jz      short loc_407AC8
.text:00407A89                 lea     edx, [edi+1]
.text:00407A8C                 mov     [ebp+0Ch], edx
.text:00407A8F
.text:00407A8F loc_407A8F:                             ; CODE XREF: sub_4073A0+788↓j
.text:00407A8F                                         ; sub_4073A0+7A7↓j
.text:00407A8F                 mov     edi, [ebp+14h]
.text:00407A92                 mov     [esp+5Ch+Str1], edi ; Str
.text:00407A95                 call    strlen
.text:00407A9A                 add     [ebp+14h], eax
.text:00407A9D                 mov     eax, [esp+5Ch+arg_10]
.text:00407AA1                 test    eax, eax
.text:00407AA3                 jz      short loc_407AB0
.text:00407AA5                 mov     edx, [esp+5Ch+var_38]
.text:00407AA9                 mov     ebp, [esp+5Ch+arg_10]
.text:00407AAD                 mov     [ebp+0], edx
.text:00407AB0
.text:00407AB0 loc_407AB0:                             ; CODE XREF: sub_4073A0+703↑j
.text:00407AB0                 mov     eax, [esp+5Ch+var_2C]
.text:00407AB4                 mov     ecx, [eax+8]
.text:00407AB7                 test    ecx, ecx
.text:00407AB9                 jnz     loc_40767A
.text:00407ABF                 mov     ecx, [esp+5Ch+var_2C]
.text:00407AC3                 jmp     loc_407672
.text:00407AC8 ; ---------------------------------------------------------------------------
.text:00407AC8
.text:00407AC8 loc_407AC8:                             ; CODE XREF: sub_4073A0+6E7↑j
.text:00407AC8                 mov     eax, [esp+5Ch+var_14]
.text:00407ACC                 test    eax, eax
.text:00407ACE                 jnz     short loc_407AE3
.text:00407AD0
.text:00407AD0 loc_407AD0:                             ; CODE XREF: sub_4073A0+779↓j
.text:00407AD0                 mov     ecx, [ebp+14h]
.text:00407AD3                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00407AD6                 call    strlen
.text:00407ADB                 add     [ebp+14h], eax
.text:00407ADE                 jmp     loc_4076F8
.text:00407AE3 ; ---------------------------------------------------------------------------
.text:00407AE3
.text:00407AE3 loc_407AE3:                             ; CODE XREF: sub_4073A0+72E↑j
.text:00407AE3                 mov     [esp+5Ch+Str1], offset aSOptionWSDoesn ; "%s: option `-W %s' doesn't allow an arg"...
.text:00407AEA                 call    ds:libintl_gettext
.text:00407AF0                 mov     edx, [esp+5Ch+var_2C]
.text:00407AF4                 mov     ebx, [esp+5Ch+arg_4]
.text:00407AF8                 mov     edi, [edx]
.text:00407AFA                 mov     [esp+5Ch+var_50], edi
.text:00407AFE                 mov     edi, ds:_iob
.text:00407B04                 mov     esi, [ebx]
.text:00407B06                 mov     [esp+5Ch+Str2], eax ; Format
.text:00407B0A                 add     edi, 40h ; '@'
.text:00407B0D                 mov     [esp+5Ch+MaxCount], esi
.text:00407B11                 mov     [esp+5Ch+Str1], edi ; Stream
.text:00407B14                 call    fprintf
.text:00407B19                 jmp     short loc_407AD0
.text:00407B19 ; ---------------------------------------------------------------------------
.text:00407B1B                 align 10h
.text:00407B20
.text:00407B20 loc_407B20:                             ; CODE XREF: sub_4073A0+6D8↑j
.text:00407B20                 mov     esi, [esp+5Ch+var_2C]
.text:00407B24                 cmp     dword ptr [esi+4], 1
.text:00407B28                 jnz     loc_407A8F
.text:00407B2E                 mov     ecx, [ebp+0]
.text:00407B31                 cmp     ecx, [esp+5Ch+arg_0]
.text:00407B35                 jge     short loc_407B4C
.text:00407B37                 mov     eax, [esp+5Ch+arg_4]
.text:00407B3B                 lea     ebx, [ecx+1]
.text:00407B3E                 mov     [ebp+0], ebx
.text:00407B41                 mov     edi, [eax+ecx*4]
.text:00407B44                 mov     [ebp+0Ch], edi
.text:00407B47                 jmp     loc_407A8F
.text:00407B4C ; ---------------------------------------------------------------------------
.text:00407B4C
.text:00407B4C loc_407B4C:                             ; CODE XREF: sub_4073A0+795↑j
.text:00407B4C                 mov     edx, [esp+5Ch+var_14]
.text:00407B50                 test    edx, edx
.text:00407B52                 jnz     short loc_407B67
.text:00407B54
.text:00407B54 loc_407B54:                             ; CODE XREF: sub_4073A0+7FE↓j
.text:00407B54                 mov     edx, [ebp+14h]
.text:00407B57                 mov     [esp+5Ch+Str1], edx ; Str
.text:00407B5A                 call    strlen
.text:00407B5F                 add     [ebp+14h], eax
.text:00407B62                 jmp     loc_407789
.text:00407B67 ; ---------------------------------------------------------------------------
.text:00407B67
.text:00407B67 loc_407B67:                             ; CODE XREF: sub_4073A0+7B2↑j
.text:00407B67                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:00407B6E                 call    ds:libintl_gettext
.text:00407B74                 mov     ecx, [ebp+0]
.text:00407B77                 mov     ebx, [esp+5Ch+arg_4]
.text:00407B7B                 mov     edi, [ebx+ecx*4-4]
.text:00407B7F                 mov     ecx, ds:_iob
.text:00407B85                 mov     [esp+5Ch+var_50], edi
.text:00407B89                 mov     esi, [ebx]
.text:00407B8B                 add     ecx, 40h ; '@'
.text:00407B8E                 mov     [esp+5Ch+Str2], eax ; Format
.text:00407B92                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00407B95                 mov     [esp+5Ch+MaxCount], esi
.text:00407B99                 call    fprintf
.text:00407B9E                 jmp     short loc_407B54
.text:00407BA0 ; ---------------------------------------------------------------------------
.text:00407BA0
.text:00407BA0 loc_407BA0:                             ; CODE XREF: sub_4073A0+67F↑j
.text:00407BA0                                         ; sub_4073A0+6CF↑j
.text:00407BA0                 mov     dword ptr [ebp+14h], 0
.text:00407BA7                 mov     eax, 57h ; 'W'
.text:00407BAC                 jmp     loc_4074F7
.text:00407BB1 ; ---------------------------------------------------------------------------
.text:00407BB1
.text:00407BB1 loc_407BB1:                             ; CODE XREF: sub_4073A0+6C3↑j
.text:00407BB1                 mov     edi, [esp+5Ch+var_14]
.text:00407BB5                 test    edi, edi
.text:00407BB7                 jnz     short loc_407BCF
.text:00407BB9
.text:00407BB9 loc_407BB9:                             ; CODE XREF: sub_4073A0+865↓j
.text:00407BB9                 mov     edx, [ebp+14h]
.text:00407BBC                 mov     [esp+5Ch+Str1], edx ; Str
.text:00407BBF                 call    strlen
.text:00407BC4                 add     [ebp+14h], eax
.text:00407BC7                 inc     dword ptr [ebp+0]
.text:00407BCA                 jmp     loc_4076F8
.text:00407BCF ; ---------------------------------------------------------------------------
.text:00407BCF
.text:00407BCF loc_407BCF:                             ; CODE XREF: sub_4073A0+817↑j
.text:00407BCF                 mov     [esp+5Ch+Str1], offset aSOptionWSIsAmb ; "%s: option `-W %s' is ambiguous\n"
.text:00407BD6                 call    ds:libintl_gettext
.text:00407BDC                 mov     ecx, [ebp+0]
.text:00407BDF                 mov     ebx, [esp+5Ch+arg_4]
.text:00407BE3                 mov     edi, [ebx+ecx*4]
.text:00407BE6                 mov     ecx, ds:_iob
.text:00407BEC                 mov     [esp+5Ch+var_50], edi
.text:00407BF0                 mov     esi, [ebx]
.text:00407BF2                 add     ecx, 40h ; '@'
.text:00407BF5                 mov     [esp+5Ch+Str2], eax ; Format
.text:00407BF9                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00407BFC                 mov     [esp+5Ch+MaxCount], esi
.text:00407C00                 call    fprintf
.text:00407C05                 jmp     short loc_407BB9
.text:00407C07 ; ---------------------------------------------------------------------------
.text:00407C07
.text:00407C07 loc_407C07:                             ; CODE XREF: sub_4073A0+6A0↑j
.text:00407C07                 mov     edx, [ebp+14h]
.text:00407C0A                 mov     ebx, edi
.text:00407C0C                 mov     ecx, [esi]
.text:00407C0E                 sub     ebx, edx
.text:00407C10                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00407C13                 call    strlen
.text:00407C18                 cmp     ebx, eax
.text:00407C1A                 jz      short loc_407C42
.text:00407C1C                 mov     ebx, [esp+5Ch+var_2C]
.text:00407C20                 test    ebx, ebx
.text:00407C22                 jz      short loc_407C31
.text:00407C24                 mov     [esp+5Ch+var_34], 1
.text:00407C2C                 jmp     loc_407A46
.text:00407C31 ; ---------------------------------------------------------------------------
.text:00407C31
.text:00407C31 loc_407C31:                             ; CODE XREF: sub_4073A0+882↑j
.text:00407C31                 mov     [esp+5Ch+var_2C], esi
.text:00407C35                 mov     ecx, [esp+5Ch+var_3C]
.text:00407C39                 mov     [esp+5Ch+var_38], ecx
.text:00407C3D                 jmp     loc_407A46
.text:00407C42 ; ---------------------------------------------------------------------------
.text:00407C42
.text:00407C42 loc_407C42:                             ; CODE XREF: sub_4073A0+87A↑j
.text:00407C42                 mov     [esp+5Ch+var_2C], esi
.text:00407C46                 mov     eax, [esp+5Ch+var_3C]
.text:00407C4A                 mov     [esp+5Ch+var_30], 1
.text:00407C52                 mov     [esp+5Ch+var_38], eax
.text:00407C56                 jmp     loc_407A55
.text:00407C5B ; ---------------------------------------------------------------------------
.text:00407C5B
.text:00407C5B loc_407C5B:                             ; CODE XREF: sub_4073A0+646↑j
.text:00407C5B                 mov     edx, [ebp+0]
.text:00407C5E                 cmp     edx, [esp+5Ch+arg_0]
.text:00407C62                 jz      short loc_407C79
.text:00407C64                 mov     ebx, [esp+5Ch+arg_4]
.text:00407C68                 lea     esi, [edx+1]
.text:00407C6B                 mov     [ebp+0], esi
.text:00407C6E                 mov     edi, [ebx+edx*4]
.text:00407C71                 mov     [ebp+0Ch], edi
.text:00407C74                 jmp     loc_4079F2
.text:00407C79 ; ---------------------------------------------------------------------------
.text:00407C79
.text:00407C79 loc_407C79:                             ; CODE XREF: sub_4073A0+8C2↑j
.text:00407C79                 mov     edi, [esp+5Ch+var_14]
.text:00407C7D                 test    edi, edi
.text:00407C7F                 jnz     short loc_407C9C
.text:00407C81
.text:00407C81 loc_407C81:                             ; CODE XREF: sub_4073A0+92C↓j
.text:00407C81                 mov     [ebp+8], esi
.text:00407C84                 mov     ebp, [esp+5Ch+Str]
.text:00407C88                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:00407C8C                 jz      short loc_407C98
.text:00407C8E                 mov     bl, 3Fh ; '?'
.text:00407C90
.text:00407C90 loc_407C90:                             ; CODE XREF: sub_4073A0+8FA↓j
.text:00407C90                 movsx   eax, bl
.text:00407C93                 jmp     loc_4074F7
.text:00407C98 ; ---------------------------------------------------------------------------
.text:00407C98
.text:00407C98 loc_407C98:                             ; CODE XREF: sub_4073A0+8EC↑j
.text:00407C98                 mov     bl, 3Ah ; ':'
.text:00407C9A                 jmp     short loc_407C90
.text:00407C9C ; ---------------------------------------------------------------------------
.text:00407C9C
.text:00407C9C loc_407C9C:                             ; CODE XREF: sub_4073A0+8DF↑j
.text:00407C9C                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:00407CA3                 call    ds:libintl_gettext
.text:00407CA9                 mov     [esp+5Ch+var_50], esi
.text:00407CAD                 mov     edx, [esp+5Ch+arg_4]
.text:00407CB1                 mov     ecx, ds:_iob
.text:00407CB7                 mov     ebx, [edx]
.text:00407CB9                 add     ecx, 40h ; '@'
.text:00407CBC                 mov     [esp+5Ch+Str2], eax ; Format
.text:00407CC0                 mov     [esp+5Ch+MaxCount], ebx
.text:00407CC4                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00407CC7                 call    fprintf
.text:00407CCC                 jmp     short loc_407C81
.text:00407CCC ; ---------------------------------------------------------------------------
.text:00407CCE                 align 10h
.text:00407CD0
.text:00407CD0 loc_407CD0:                             ; CODE XREF: sub_4073A0+54C↑j
.text:00407CD0                                         ; sub_4073A0+555↑j
.text:00407CD0                 mov     eax, [esp+5Ch+var_14]
.text:00407CD4                 test    eax, eax
.text:00407CD6                 jz      short loc_407D0F
.text:00407CD8                 mov     ebx, [ebp+1Ch]
.text:00407CDB                 test    ebx, ebx
.text:00407CDD                 jz      short loc_407D17
.text:00407CDF                 mov     [esp+5Ch+Str1], offset aSIllegalOption ; "%s: illegal option -- %c\n"
.text:00407CE6
.text:00407CE6 loc_407CE6:                             ; CODE XREF: sub_4073A0+97E↓j
.text:00407CE6                 call    ds:libintl_gettext
.text:00407CEC                 mov     [esp+5Ch+var_50], esi
.text:00407CF0                 mov     ebx, [esp+5Ch+arg_4]
.text:00407CF4                 mov     edx, ds:_iob
.text:00407CFA                 mov     esi, [ebx]
.text:00407CFC                 add     edx, 40h ; '@'
.text:00407CFF                 mov     [esp+5Ch+Str2], eax ; Format
.text:00407D03                 mov     [esp+5Ch+MaxCount], esi
.text:00407D07                 mov     [esp+5Ch+Str1], edx ; Stream
.text:00407D0A                 call    fprintf
.text:00407D0F
.text:00407D0F loc_407D0F:                             ; CODE XREF: sub_4073A0+936↑j
.text:00407D0F                 mov     [ebp+8], edi
.text:00407D12                 jmp     loc_4076F8
.text:00407D17 ; ---------------------------------------------------------------------------
.text:00407D17
.text:00407D17 loc_407D17:                             ; CODE XREF: sub_4073A0+93D↑j
.text:00407D17                 mov     [esp+5Ch+Str1], offset aSInvalidOption ; "%s: invalid option -- %c\n"
.text:00407D1E                 jmp     short loc_407CE6
.text:00407D20 ; ---------------------------------------------------------------------------
.text:00407D20
.text:00407D20 loc_407D20:                             ; CODE XREF: sub_4073A0+26E↑j
.text:00407D20                 mov     edi, [esp+5Ch+var_14]
.text:00407D24                 test    edi, edi
.text:00407D26                 jnz     short loc_407D3E
.text:00407D28
.text:00407D28 loc_407D28:                             ; CODE XREF: sub_4073A0+9D4↓j
.text:00407D28                 mov     edx, [ebp+14h]
.text:00407D2B                 mov     [esp+5Ch+Str1], edx ; Str
.text:00407D2E                 call    strlen
.text:00407D33                 add     [ebp+14h], eax
.text:00407D36                 inc     dword ptr [ebp+0]
.text:00407D39                 jmp     loc_40787E
.text:00407D3E ; ---------------------------------------------------------------------------
.text:00407D3E
.text:00407D3E loc_407D3E:                             ; CODE XREF: sub_4073A0+986↑j
.text:00407D3E                 mov     [esp+5Ch+Str1], offset aSOptionSIsAmbi ; "%s: option `%s' is ambiguous\n"
.text:00407D45                 call    ds:libintl_gettext
.text:00407D4B                 mov     ebx, [ebp+0]
.text:00407D4E                 mov     edi, [esp+5Ch+arg_4]
.text:00407D52                 mov     ecx, [edi+ebx*4]
.text:00407D55                 mov     ebx, ds:_iob
.text:00407D5B                 mov     [esp+5Ch+var_50], ecx
.text:00407D5F                 mov     esi, [edi]
.text:00407D61                 add     ebx, 40h ; '@'
.text:00407D64                 mov     [esp+5Ch+Str2], eax ; Format
.text:00407D68                 mov     [esp+5Ch+Str1], ebx ; Stream
.text:00407D6B                 mov     [esp+5Ch+MaxCount], esi
.text:00407D6F                 call    fprintf
.text:00407D74                 jmp     short loc_407D28
.text:00407D76 ; ---------------------------------------------------------------------------
.text:00407D76
.text:00407D76 loc_407D76:                             ; CODE XREF: sub_4073A0+246↑j
.text:00407D76                 mov     ecx, [ebp+14h]
.text:00407D79                 mov     ebx, edi
.text:00407D7B                 mov     edx, [esi]
.text:00407D7D                 sub     ebx, ecx
.text:00407D7F                 mov     [esp+5Ch+Str1], edx ; Str
.text:00407D82                 call    strlen
.text:00407D87                 cmp     ebx, eax
.text:00407D89                 jz      short loc_407DE1
.text:00407D8B                 mov     ebx, [esp+5Ch+var_18]
.text:00407D8F                 test    ebx, ebx
.text:00407D91                 jz      short loc_407DD0
.text:00407D93                 mov     edx, [esp+5Ch+arg_14]
.text:00407D97                 test    edx, edx
.text:00407D99                 jnz     short loc_407DA7
.text:00407D9B                 mov     ecx, [esp+5Ch+var_18]
.text:00407D9F                 mov     ebx, [esi+4]
.text:00407DA2                 cmp     [ecx+4], ebx
.text:00407DA5                 jz      short loc_407DB4
.text:00407DA7
.text:00407DA7 loc_407DA7:                             ; CODE XREF: sub_4073A0+9F9↑j
.text:00407DA7                                         ; sub_4073A0+A1A↓j ...
.text:00407DA7                 mov     [esp+5Ch+var_20], 1
.text:00407DAF                 jmp     loc_4075EC
.text:00407DB4 ; ---------------------------------------------------------------------------
.text:00407DB4
.text:00407DB4 loc_407DB4:                             ; CODE XREF: sub_4073A0+A05↑j
.text:00407DB4                 mov     edx, [esi+8]
.text:00407DB7                 cmp     [ecx+8], edx
.text:00407DBA                 jnz     short loc_407DA7
.text:00407DBC                 mov     ebx, [esi+0Ch]
.text:00407DBF                 cmp     [ecx+0Ch], ebx
.text:00407DC2                 jnz     short loc_407DA7
.text:00407DC4                 jmp     loc_4075EC
.text:00407DC4 ; ---------------------------------------------------------------------------
.text:00407DC9                 align 10h
.text:00407DD0
.text:00407DD0 loc_407DD0:                             ; CODE XREF: sub_4073A0+9F1↑j
.text:00407DD0                 mov     [esp+5Ch+var_18], esi
.text:00407DD4                 mov     eax, [esp+5Ch+var_28]
.text:00407DD8                 mov     [esp+5Ch+var_24], eax
.text:00407DDC                 jmp     loc_4075EC
.text:00407DE1 ; ---------------------------------------------------------------------------
.text:00407DE1
.text:00407DE1 loc_407DE1:                             ; CODE XREF: sub_4073A0+9E9↑j
.text:00407DE1                 mov     [esp+5Ch+var_18], esi
.text:00407DE5                 mov     ecx, [esp+5Ch+var_28]
.text:00407DE9                 mov     [esp+5Ch+var_1C], 1
.text:00407DF1                 mov     [esp+5Ch+var_24], ecx
.text:00407DF5                 jmp     loc_407600
.text:00407DFA ; ---------------------------------------------------------------------------
.text:00407DFA
.text:00407DFA loc_407DFA:                             ; CODE XREF: sub_4073A0+1BF↑j
.text:00407DFA                 mov     eax, [esp+5Ch+Str]
.text:00407DFE                 movsx   esi, dl
.text:00407E01                 mov     [esp+5Ch+Str2], esi ; Val
.text:00407E05                 mov     [esp+5Ch+Str1], eax ; Str
.text:00407E08                 call    strchr
.text:00407E0D                 test    eax, eax
.text:00407E0F                 jnz     loc_4078C0
.text:00407E15                 jmp     loc_407565
.text:00407E1A ; ---------------------------------------------------------------------------
.text:00407E1A
.text:00407E1A loc_407E1A:                             ; CODE XREF: sub_4073A0+17C↑j
.text:00407E1A                 mov     ecx, 1
.text:00407E1F                 jmp     loc_407522
.text:00407E24 ; ---------------------------------------------------------------------------
.text:00407E24
.text:00407E24 loc_407E24:                             ; CODE XREF: sub_4073A0+D4↑j
.text:00407E24                                         ; sub_4073A0+130↑j
.text:00407E24                 mov     eax, [ebp+20h]
.text:00407E27                 cmp     eax, [ebp+24h]
.text:00407E2A                 jz      loc_407500
.text:00407E30                 mov     [ebp+0], eax
.text:00407E33                 jmp     loc_407500
.text:00407E38 ; ---------------------------------------------------------------------------
.text:00407E38
.text:00407E38 loc_407E38:                             ; CODE XREF: sub_4073A0+FE↑j
.text:00407E38                 mov     [ebp+20h], eax
.text:00407E3B                 jmp     loc_4074C0
.text:00407E40 ; ---------------------------------------------------------------------------
.text:00407E40
.text:00407E40 loc_407E40:                             ; CODE XREF: sub_4073A0+CA↑j
.text:00407E40                 mov     edx, [ebp+20h]
.text:00407E43                 mov     eax, [ebp+24h]
.text:00407E46                 cmp     edx, eax
.text:00407E48                 jz      short loc_407EC0
.text:00407E4A                 cmp     eax, ebx
.text:00407E4C                 jz      short loc_407E61
.text:00407E4E                 mov     [esp+5Ch+Str2], ebp
.text:00407E52                 mov     ebx, [esp+5Ch+arg_4]
.text:00407E56                 mov     [esp+5Ch+Str1], ebx
.text:00407E59                 call    sub_408050
.text:00407E5E                 mov     ebx, [ebp+0]
.text:00407E61
.text:00407E61 loc_407E61:                             ; CODE XREF: sub_4073A0+AAC↑j
.text:00407E61                                         ; sub_4073A0+B22↓j ...
.text:00407E61                 cmp     ebx, [esp+5Ch+arg_0]
.text:00407E65                 jge     short loc_407EB0
.text:00407E67                 mov     esi, [esp+5Ch+arg_4]
.text:00407E6B                 mov     eax, [esi+ebx*4]
.text:00407E6E                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00407E71                 jz      short loc_407EB8
.text:00407E73                 lea     esi, [esi+0]
.text:00407E79                 lea     edi, [edi+0]
.text:00407E80
.text:00407E80 loc_407E80:                             ; CODE XREF: sub_4073A0+AFC↓j
.text:00407E80                                         ; sub_4073A0+B1C↓j
.text:00407E80                 lea     eax, [ebx+1]
.text:00407E83                 mov     ebx, eax
.text:00407E85                 mov     [ebp+0], eax
.text:00407E88                 cmp     eax, [esp+5Ch+arg_0]
.text:00407E8C                 jge     short loc_407EB0
.text:00407E8E                 mov     edi, [esp+5Ch+arg_4]
.text:00407E92                 mov     edx, [edi+eax*4]
.text:00407E95                 cmp     byte ptr [edx], 2Dh ; '-'
.text:00407E98                 jz      short loc_407EA0
.text:00407E9A
.text:00407E9A loc_407E9A:                             ; CODE XREF: sub_4073A0+B04↓j
.text:00407E9A                 mov     ebx, eax
.text:00407E9C                 jmp     short loc_407E80
.text:00407E9C ; ---------------------------------------------------------------------------
.text:00407E9E                 align 10h
.text:00407EA0
.text:00407EA0 loc_407EA0:                             ; CODE XREF: sub_4073A0+AF8↑j
.text:00407EA0                 cmp     byte ptr [edx+1], 0
.text:00407EA4                 jz      short loc_407E9A
.text:00407EA6                 lea     esi, [esi+0]
.text:00407EA9                 lea     edi, [edi+0]
.text:00407EB0
.text:00407EB0 loc_407EB0:                             ; CODE XREF: sub_4073A0+AC5↑j
.text:00407EB0                                         ; sub_4073A0+AEC↑j ...
.text:00407EB0                 mov     [ebp+24h], ebx
.text:00407EB3                 jmp     loc_407470
.text:00407EB8 ; ---------------------------------------------------------------------------
.text:00407EB8
.text:00407EB8 loc_407EB8:                             ; CODE XREF: sub_4073A0+AD1↑j
.text:00407EB8                 cmp     byte ptr [eax+1], 0
.text:00407EBC                 jz      short loc_407E80
.text:00407EBE                 jmp     short loc_407EB0
.text:00407EC0 ; ---------------------------------------------------------------------------
.text:00407EC0
.text:00407EC0 loc_407EC0:                             ; CODE XREF: sub_4073A0+AA8↑j
.text:00407EC0                 cmp     edx, ebx
.text:00407EC2                 jz      short loc_407E61
.text:00407EC4                 mov     [ebp+20h], ebx
.text:00407EC7                 jmp     short loc_407E61
.text:00407EC9 ; ---------------------------------------------------------------------------
.text:00407EC9
.text:00407EC9 loc_407EC9:                             ; CODE XREF: sub_4073A0+88↑j
.text:00407EC9                 mov     dword ptr [ebp+18h], 0
.text:00407ED0                 mov     esi, [esp+5Ch+Str]
.text:00407ED4
.text:00407ED4 loc_407ED4:                             ; CODE XREF: sub_4073A0+B49↓j
.text:00407ED4                 inc     esi
.text:00407ED5                 jmp     loc_407438
.text:00407ED5 ; ---------------------------------------------------------------------------
.text:00407EDA                 align 10h
.text:00407EE0
.text:00407EE0 loc_407EE0:                             ; CODE XREF: sub_4073A0+80↑j
.text:00407EE0                 mov     dword ptr [ebp+18h], 2
.text:00407EE7                 mov     esi, ecx
.text:00407EE9                 jmp     short loc_407ED4
.text:00407EE9 ; ---------------------------------------------------------------------------
.text:00407EEB                 align 10h
.text:00407EF0
.text:00407EF0 loc_407EF0:                             ; CODE XREF: sub_4073A0+69↑j
.text:00407EF0                 mov     [esp+5Ch+Str1], offset aPosixlyCorrect_0 ; "POSIXLY_CORRECT"
.text:00407EF7                 call    getenv
.text:00407EFC                 test    eax, eax
.text:00407EFE                 jz      loc_407414
.text:00407F04                 jmp     loc_40740F
.text:00407F04 ; ---------------------------------------------------------------------------
.text:00407F09                 align 10h
.text:00407F10
.text:00407F10 loc_407F10:                             ; CODE XREF: sub_4073A0+3F↑j
.text:00407F10                 mov     dword ptr [ebp+0], 1
.text:00407F17                 mov     ebx, 1
.text:00407F1C                 jmp     loc_4073F0
.text:00407F1C sub_4073A0      endp
.text:00407F1C
.text:00407F21 ; ---------------------------------------------------------------------------
.text:00407F21                 jmp     short sub_407F30
.text:00407F21 ; ---------------------------------------------------------------------------
.text:00407F23                 align 10h
.text:00407F30
.text:00407F30 ; =============== S U B R O U T I N E =======================================
.text:00407F30
.text:00407F30
.text:00407F30 ; int __cdecl sub_407F30(int, int, char *, int, int, int, int)
.text:00407F30 sub_407F30      proc near               ; CODE XREF: .text:00407F21↑j
.text:00407F30                                         ; sub_4090A0+3A↓p ...
.text:00407F30
.text:00407F30 var_2C          = dword ptr -2Ch
.text:00407F30 var_28          = dword ptr -28h
.text:00407F30 Str             = dword ptr -24h
.text:00407F30 var_20          = dword ptr -20h
.text:00407F30 var_1C          = dword ptr -1Ch
.text:00407F30 var_18          = dword ptr -18h
.text:00407F30 var_14          = dword ptr -14h
.text:00407F30 var_10          = dword ptr -10h
.text:00407F30 arg_0           = dword ptr  4
.text:00407F30 arg_4           = dword ptr  8
.text:00407F30 arg_8           = dword ptr  0Ch
.text:00407F30 arg_C           = dword ptr  10h
.text:00407F30 arg_10          = dword ptr  14h
.text:00407F30 arg_14          = dword ptr  18h
.text:00407F30 arg_18          = dword ptr  1Ch
.text:00407F30
.text:00407F30                 sub     esp, 2Ch
.text:00407F33                 mov     edx, dword_41D060
.text:00407F39                 mov     [esp+2Ch+var_10], offset dword_41E360 ; int
.text:00407F41                 mov     ecx, dword_41D064
.text:00407F47                 mov     ds:dword_41E360, edx
.text:00407F4D                 mov     edx, [esp+2Ch+arg_18]
.text:00407F51                 mov     ds:dword_41E364, ecx
.text:00407F57                 mov     ecx, [esp+2Ch+arg_14]
.text:00407F5B                 mov     [esp+2Ch+var_14], edx ; int
.text:00407F5F                 mov     edx, [esp+2Ch+arg_10]
.text:00407F63                 mov     [esp+2Ch+var_18], ecx ; int
.text:00407F67                 mov     ecx, [esp+2Ch+arg_C]
.text:00407F6B                 mov     [esp+2Ch+var_1C], edx ; int
.text:00407F6F                 mov     edx, [esp+2Ch+arg_8]
.text:00407F73                 mov     [esp+2Ch+var_20], ecx ; int
.text:00407F77                 mov     ecx, [esp+2Ch+arg_4]
.text:00407F7B                 mov     [esp+2Ch+Str], edx ; Str
.text:00407F7F                 mov     edx, [esp+2Ch+arg_0]
.text:00407F83                 mov     [esp+2Ch+var_28], ecx ; int
.text:00407F87                 mov     [esp+2Ch+var_2C], edx ; int
.text:00407F8A                 call    sub_4073A0
.text:00407F8F                 mov     ecx, ds:dword_41E360
.text:00407F95                 mov     dword_41D060, ecx
.text:00407F9B                 mov     ecx, ds:dword_41E36C
.text:00407FA1                 mov     ds:Str, ecx
.text:00407FA7                 mov     ecx, ds:dword_41E368
.text:00407FAD                 mov     dword_41D068, ecx
.text:00407FB3                 add     esp, 2Ch
.text:00407FB6                 retn
.text:00407FB6 sub_407F30      endp
.text:00407FB6
.text:00407FB6 ; ---------------------------------------------------------------------------
.text:00407FB7                 align 10h
.text:00407FC0                 sub     esp, 2Ch
.text:00407FC3                 mov     edx, dword_41D060
.text:00407FC9                 mov     dword ptr [esp+1Ch], offset dword_41E360
.text:00407FD1                 mov     ecx, dword_41D064
.text:00407FD7                 mov     dword ptr [esp+18h], 1
.text:00407FDF                 mov     ds:dword_41E360, edx
.text:00407FE5                 mov     edx, [esp+38h]
.text:00407FE9                 mov     ds:dword_41E364, ecx
.text:00407FEF                 mov     ecx, [esp+34h]
.text:00407FF3                 mov     [esp+8], edx
.text:00407FF7                 mov     edx, [esp+30h]
.text:00407FFB                 mov     [esp+4], ecx
.text:00407FFF                 mov     dword ptr [esp+14h], 0
.text:00408007                 mov     dword ptr [esp+10h], 0
.text:0040800F                 mov     dword ptr [esp+0Ch], 0
.text:00408017                 mov     [esp], edx
.text:0040801A                 call    sub_4073A0
.text:0040801F                 mov     ecx, ds:dword_41E360
.text:00408025                 mov     dword_41D060, ecx
.text:0040802B                 mov     ecx, ds:dword_41E36C
.text:00408031                 mov     ds:Str, ecx
.text:00408037                 mov     ecx, ds:dword_41E368
.text:0040803D                 mov     dword_41D068, ecx
.text:00408043                 add     esp, 2Ch
.text:00408046                 retn
.text:00408046 ; ---------------------------------------------------------------------------
.text:00408047                 align 10h
.text:00408050
.text:00408050 ; =============== S U B R O U T I N E =======================================
.text:00408050
.text:00408050
.text:00408050 sub_408050      proc near               ; CODE XREF: sub_4073A0+113↑p
.text:00408050                                         ; sub_4073A0+AB9↑p
.text:00408050
.text:00408050 var_2C          = dword ptr -2Ch
.text:00408050 var_28          = dword ptr -28h
.text:00408050 var_24          = dword ptr -24h
.text:00408050 var_20          = dword ptr -20h
.text:00408050 var_1C          = dword ptr -1Ch
.text:00408050 var_18          = dword ptr -18h
.text:00408050 var_14          = dword ptr -14h
.text:00408050 arg_0           = dword ptr  4
.text:00408050 arg_4           = dword ptr  8
.text:00408050
.text:00408050                 push    ebp
.text:00408051                 push    edi
.text:00408052                 push    esi
.text:00408053                 push    ebx
.text:00408054                 sub     esp, 1Ch
.text:00408057                 mov     ecx, [esp+2Ch+arg_4]
.text:0040805B                 mov     eax, [esp+2Ch+arg_4]
.text:0040805F                 mov     ebx, [esp+2Ch+arg_4]
.text:00408063                 mov     edx, [ecx+20h]
.text:00408066                 mov     edi, [esp+2Ch+arg_0]
.text:0040806A                 mov     ecx, [ebx]
.text:0040806C                 mov     [esp+2Ch+var_2C], edx
.text:0040806F                 mov     [esp+2Ch+var_14], edx
.text:00408073                 mov     edx, [eax+24h]
.text:00408076                 mov     [esp+2Ch+var_28], ecx
.text:0040807A                 mov     [esp+2Ch+var_1C], ecx
.text:0040807E                 cmp     ecx, edx
.text:00408080                 mov     [esp+2Ch+var_18], edx
.text:00408084                 jle     short loc_408100
.text:00408086                 mov     esi, [esp+2Ch+var_2C]
.text:00408089                 cmp     edx, esi
.text:0040808B                 jle     short loc_408100
.text:0040808D                 lea     esi, [esi+0]
.text:00408090
.text:00408090 loc_408090:                             ; CODE XREF: sub_408050+A1↓j
.text:00408090                 mov     ebx, [esp+2Ch+var_1C]
.text:00408094                 mov     edx, [esp+2Ch+var_18]
.text:00408098                 mov     ebp, [esp+2Ch+var_18]
.text:0040809C                 mov     eax, [esp+2Ch+var_14]
.text:004080A0                 sub     ebx, edx
.text:004080A2                 mov     [esp+2Ch+var_20], ebx
.text:004080A6                 sub     ebp, eax
.text:004080A8                 cmp     ebx, ebp
.text:004080AA                 jle     short loc_408125
.text:004080AC                 xor     esi, esi
.text:004080AE                 cmp     esi, ebp
.text:004080B0                 jge     short loc_4080DD
.text:004080B2                 mov     ecx, [esp+2Ch+var_1C]
.text:004080B6                 sub     ecx, ebp
.text:004080B8                 mov     [esp+2Ch+var_24], ecx
.text:004080BC                 lea     esi, [esi+0]
.text:004080C0
.text:004080C0 loc_4080C0:                             ; CODE XREF: sub_408050+8B↓j
.text:004080C0                 mov     ecx, [esp+2Ch+var_14]
.text:004080C4                 mov     edx, [esp+2Ch+var_24]
.text:004080C8                 add     ecx, esi
.text:004080CA                 add     edx, esi
.text:004080CC                 mov     ebx, [edi+ecx*4]
.text:004080CF                 mov     eax, [edi+edx*4]
.text:004080D2                 inc     esi
.text:004080D3                 cmp     esi, ebp
.text:004080D5                 mov     [edi+ecx*4], eax
.text:004080D8                 mov     [edi+edx*4], ebx
.text:004080DB                 jl      short loc_4080C0
.text:004080DD
.text:004080DD loc_4080DD:                             ; CODE XREF: sub_408050+60↑j
.text:004080DD                 sub     [esp+2Ch+var_1C], ebp
.text:004080E1
.text:004080E1 loc_4080E1:                             ; CODE XREF: sub_408050+107↓j
.text:004080E1                 mov     eax, [esp+2Ch+var_18]
.text:004080E5                 cmp     [esp+2Ch+var_1C], eax
.text:004080E9                 jle     short loc_408100
.text:004080EB                 mov     ebp, [esp+2Ch+var_14]
.text:004080EF                 cmp     eax, ebp
.text:004080F1                 jg      short loc_408090
.text:004080F3                 lea     esi, [esi+0]
.text:004080F9                 lea     edi, [edi+0]
.text:00408100
.text:00408100 loc_408100:                             ; CODE XREF: sub_408050+34↑j
.text:00408100                                         ; sub_408050+3B↑j ...
.text:00408100                 mov     esi, [esp+2Ch+var_28]
.text:00408104                 mov     ecx, [esp+2Ch+var_18]
.text:00408108                 mov     eax, [esp+2Ch+var_2C]
.text:0040810B                 mov     edi, [esp+2Ch+arg_4]
.text:0040810F                 mov     edx, [esp+2Ch+var_28]
.text:00408113                 sub     esi, ecx
.text:00408115                 add     esi, eax
.text:00408117                 mov     [edi+20h], esi
.text:0040811A                 mov     [edi+24h], edx
.text:0040811D                 add     esp, 1Ch
.text:00408120                 pop     ebx
.text:00408121                 pop     esi
.text:00408122                 pop     edi
.text:00408123                 pop     ebp
.text:00408124                 retn
.text:00408125 ; ---------------------------------------------------------------------------
.text:00408125
.text:00408125 loc_408125:                             ; CODE XREF: sub_408050+5A↑j
.text:00408125                 xor     esi, esi
.text:00408127                 cmp     esi, [esp+2Ch+var_20]
.text:0040812B                 jge     short loc_40814F
.text:0040812D                 lea     esi, [esi+0]
.text:00408130
.text:00408130 loc_408130:                             ; CODE XREF: sub_408050+FD↓j
.text:00408130                 mov     ebx, [esp+2Ch+var_14]
.text:00408134                 mov     ebp, [esp+2Ch+var_18]
.text:00408138                 add     ebx, esi
.text:0040813A                 add     ebp, esi
.text:0040813C                 mov     edx, [edi+ebx*4]
.text:0040813F                 inc     esi
.text:00408140                 cmp     esi, [esp+2Ch+var_20]
.text:00408144                 mov     ecx, [edi+ebp*4]
.text:00408147                 mov     [edi+ebx*4], ecx
.text:0040814A                 mov     [edi+ebp*4], edx
.text:0040814D                 jl      short loc_408130
.text:0040814F
.text:0040814F loc_40814F:                             ; CODE XREF: sub_408050+DB↑j
.text:0040814F                 mov     esi, [esp+2Ch+var_20]
.text:00408153                 add     [esp+2Ch+var_14], esi
.text:00408157                 jmp     short loc_4080E1
.text:00408157 sub_408050      endp
.text:00408157
.text:00408157 ; ---------------------------------------------------------------------------
.text:00408159                 db 17h dup(90h)
.text:00408170
.text:00408170 ; =============== S U B R O U T I N E =======================================
.text:00408170
.text:00408170
.text:00408170 sub_408170      proc near               ; CODE XREF: sub_406650+35↑p
.text:00408170
.text:00408170 Size            = dword ptr -0Ch
.text:00408170 var_4           = dword ptr -4
.text:00408170 arg_0           = dword ptr  4
.text:00408170 arg_4           = dword ptr  8
.text:00408170
.text:00408170                 sub     esp, 0Ch
.text:00408173                 xor     edx, edx
.text:00408175                 mov     ecx, [esp+0Ch+arg_4]
.text:00408179                 mov     [esp+0Ch+var_4], ebx
.text:0040817D                 mov     eax, 0FFFFFFFFh
.text:00408182                 mov     ebx, [esp+0Ch+arg_0]
.text:00408186                 div     ecx
.text:00408188                 cmp     eax, ebx
.text:0040818A                 jb      short loc_4081A9
.text:0040818C                 mov     edx, ebx
.text:0040818E                 imul    edx, ecx
.text:00408191                 mov     [esp+0Ch+Size], edx ; Size
.text:00408194                 call    malloc
.text:00408199                 test    eax, eax
.text:0040819B                 jz      short loc_4081A5
.text:0040819D
.text:0040819D loc_40819D:                             ; CODE XREF: sub_408170+37↓j
.text:0040819D                 mov     ebx, [esp+0Ch+var_4]
.text:004081A1                 add     esp, 0Ch
.text:004081A4                 retn
.text:004081A5 ; ---------------------------------------------------------------------------
.text:004081A5
.text:004081A5 loc_4081A5:                             ; CODE XREF: sub_408170+2B↑j
.text:004081A5                 test    ebx, ebx
.text:004081A7                 jz      short loc_40819D
.text:004081A9
.text:004081A9 loc_4081A9:                             ; CODE XREF: sub_408170+1A↑j
.text:004081A9                 call    sub_409380
.text:004081A9 sub_408170      endp
.text:004081A9
.text:004081A9 ; ---------------------------------------------------------------------------
.text:004081AE                 align 10h
.text:004081B0
.text:004081B0 ; =============== S U B R O U T I N E =======================================
.text:004081B0
.text:004081B0
.text:004081B0 ; int __cdecl sub_4081B0(size_t)
.text:004081B0 sub_4081B0      proc near               ; CODE XREF: sub_401910+7FB↑p
.text:004081B0                                         ; sub_401910+FE9↑p ...
.text:004081B0
.text:004081B0 Size            = dword ptr -0Ch
.text:004081B0 var_4           = dword ptr -4
.text:004081B0 arg_0           = dword ptr  4
.text:004081B0
.text:004081B0                 sub     esp, 0Ch
.text:004081B3                 mov     [esp+0Ch+var_4], ebx
.text:004081B7                 mov     ebx, [esp+0Ch+arg_0]
.text:004081BB                 mov     [esp+0Ch+Size], ebx ; Size
.text:004081BE                 call    malloc
.text:004081C3                 test    eax, eax
.text:004081C5                 jz      short loc_4081D0
.text:004081C7
.text:004081C7 loc_4081C7:                             ; CODE XREF: sub_4081B0+22↓j
.text:004081C7                 mov     ebx, [esp+0Ch+var_4]
.text:004081CB                 add     esp, 0Ch
.text:004081CE                 retn
.text:004081CE ; ---------------------------------------------------------------------------
.text:004081CF                 align 10h
.text:004081D0
.text:004081D0 loc_4081D0:                             ; CODE XREF: sub_4081B0+15↑j
.text:004081D0                 test    ebx, ebx
.text:004081D2                 jz      short loc_4081C7
.text:004081D4                 call    sub_409380
.text:004081D4 sub_4081B0      endp
.text:004081D4
.text:004081D4 ; ---------------------------------------------------------------------------
.text:004081D9                 align 10h
.text:004081E0                 sub     esp, 1Ch
.text:004081E3                 xor     edx, edx
.text:004081E5                 mov     eax, 0FFFFFFFFh
.text:004081EA                 mov     [esp+14h], ebx
.text:004081EE                 mov     ecx, [esp+20h]
.text:004081F2                 mov     ebx, [esp+28h]
.text:004081F6                 mov     [esp+18h], esi
.text:004081FA                 mov     esi, [esp+24h]
.text:004081FE                 div     ebx
.text:00408200                 cmp     eax, esi
.text:00408202                 jb      short loc_408234
.text:00408204                 mov     [esp], ecx
.text:00408207                 mov     edx, esi
.text:00408209                 imul    edx, ebx
.text:0040820C                 mov     [esp+4], edx
.text:00408210                 call    realloc
.text:00408215                 test    eax, eax
.text:00408217                 mov     ecx, eax
.text:00408219                 jz      short loc_408230
.text:0040821B
.text:0040821B loc_40821B:                             ; CODE XREF: .text:00408232↓j
.text:0040821B                 mov     ebx, [esp+14h]
.text:0040821F                 mov     eax, ecx
.text:00408221                 mov     esi, [esp+18h]
.text:00408225                 add     esp, 1Ch
.text:00408228                 retn
.text:00408228 ; ---------------------------------------------------------------------------
.text:00408229                 align 10h
.text:00408230
.text:00408230 loc_408230:                             ; CODE XREF: .text:00408219↑j
.text:00408230                 test    esi, esi
.text:00408232                 jz      short loc_40821B
.text:00408234
.text:00408234 loc_408234:                             ; CODE XREF: .text:00408202↑j
.text:00408234                 call    sub_409380
.text:00408234 ; ---------------------------------------------------------------------------
.text:00408239                 align 10h
.text:00408240
.text:00408240 ; =============== S U B R O U T I N E =======================================
.text:00408240
.text:00408240
.text:00408240 ; int __cdecl sub_408240(void *, size_t)
.text:00408240 sub_408240      proc near               ; CODE XREF: sub_40A590+5B↓p
.text:00408240
.text:00408240 Block           = dword ptr -0Ch
.text:00408240 Size            = dword ptr -8
.text:00408240 var_4           = dword ptr -4
.text:00408240 arg_0           = dword ptr  4
.text:00408240 arg_4           = dword ptr  8
.text:00408240
.text:00408240                 sub     esp, 0Ch
.text:00408243                 mov     edx, [esp+0Ch+arg_0]
.text:00408247                 mov     [esp+0Ch+var_4], ebx
.text:0040824B                 mov     ebx, [esp+0Ch+arg_4]
.text:0040824F                 mov     [esp+0Ch+Block], edx ; Block
.text:00408252                 mov     [esp+0Ch+Size], ebx ; Size
.text:00408256                 call    realloc
.text:0040825B                 test    eax, eax
.text:0040825D                 jz      short loc_408267
.text:0040825F
.text:0040825F loc_40825F:                             ; CODE XREF: sub_408240+29↓j
.text:0040825F                 mov     ebx, [esp+0Ch+var_4]
.text:00408263                 add     esp, 0Ch
.text:00408266                 retn
.text:00408267 ; ---------------------------------------------------------------------------
.text:00408267
.text:00408267 loc_408267:                             ; CODE XREF: sub_408240+1D↑j
.text:00408267                 test    ebx, ebx
.text:00408269                 jz      short loc_40825F
.text:0040826B                 call    sub_409380
.text:0040826B sub_408240      endp
.text:0040826B
.text:00408270
.text:00408270 ; =============== S U B R O U T I N E =======================================
.text:00408270
.text:00408270 ; Attributes: thunk
.text:00408270
.text:00408270 ; int __cdecl sub_408270(void *, int, int)
.text:00408270 sub_408270      proc near               ; CODE XREF: sub_406970+49↑p
.text:00408270                 jmp     sub_4083C0
.text:00408270 sub_408270      endp
.text:00408270
.text:00408270 ; ---------------------------------------------------------------------------
.text:00408275                 align 10h
.text:00408280                 sub     esp, 0Ch
.text:00408283                 mov     edx, [esp+14h]
.text:00408287                 mov     dword ptr [esp+8], 1
.text:0040828F                 mov     [esp+4], edx
.text:00408293                 mov     edx, [esp+10h]
.text:00408297                 mov     [esp], edx
.text:0040829A                 call    sub_4083C0
.text:0040829F                 add     esp, 0Ch
.text:004082A2                 retn
.text:004082A2 ; ---------------------------------------------------------------------------
.text:004082A3                 align 10h
.text:004082B0                 sub     esp, 1Ch
.text:004082B3                 mov     [esp+18h], ebx
.text:004082B7                 mov     ebx, [esp+20h]
.text:004082BB                 mov     [esp], ebx
.text:004082BE                 call    malloc
.text:004082C3                 test    eax, eax
.text:004082C5                 jz      short loc_4082E3
.text:004082C7
.text:004082C7 loc_4082C7:                             ; CODE XREF: .text:004082E5↓j
.text:004082C7                 mov     [esp+8], ebx
.text:004082CB                 mov     dword ptr [esp+4], 0
.text:004082D3                 mov     [esp], eax
.text:004082D6                 call    memset
.text:004082DB                 mov     ebx, [esp+18h]
.text:004082DF                 add     esp, 1Ch
.text:004082E2                 retn
.text:004082E3 ; ---------------------------------------------------------------------------
.text:004082E3
.text:004082E3 loc_4082E3:                             ; CODE XREF: .text:004082C5↑j
.text:004082E3                 test    ebx, ebx
.text:004082E5                 jz      short loc_4082C7
.text:004082E7                 call    sub_409380
.text:004082E7 ; ---------------------------------------------------------------------------
.text:004082EC                 align 10h
.text:004082F0                 sub     esp, 0Ch
.text:004082F3                 xor     edx, edx
.text:004082F5                 mov     ecx, [esp+14h]
.text:004082F9                 mov     [esp+8], ebx
.text:004082FD                 mov     eax, 0FFFFFFFFh
.text:00408302                 mov     ebx, [esp+10h]
.text:00408306                 div     ecx
.text:00408308                 cmp     eax, ebx
.text:0040830A                 jb      short loc_408328
.text:0040830C                 mov     [esp+4], ecx
.text:00408310                 mov     [esp], ebx
.text:00408313                 call    calloc
.text:00408318                 test    eax, eax
.text:0040831A                 jz      short loc_408324
.text:0040831C
.text:0040831C loc_40831C:                             ; CODE XREF: .text:00408326↓j
.text:0040831C                 mov     ebx, [esp+8]
.text:00408320                 add     esp, 0Ch
.text:00408323                 retn
.text:00408324 ; ---------------------------------------------------------------------------
.text:00408324
.text:00408324 loc_408324:                             ; CODE XREF: .text:0040831A↑j
.text:00408324                 test    ebx, ebx
.text:00408326                 jz      short loc_40831C
.text:00408328
.text:00408328 loc_408328:                             ; CODE XREF: .text:0040830A↑j
.text:00408328                 call    sub_409380
.text:00408328 ; ---------------------------------------------------------------------------
.text:0040832D                 align 10h
.text:00408330                 sub     esp, 1Ch
.text:00408333                 mov     [esp+18h], ebx
.text:00408337                 mov     ebx, [esp+24h]
.text:0040833B                 mov     [esp], ebx
.text:0040833E                 call    malloc
.text:00408343                 test    eax, eax
.text:00408345                 mov     edx, eax
.text:00408347                 jz      short loc_408365
.text:00408349
.text:00408349 loc_408349:                             ; CODE XREF: .text:00408367↓j
.text:00408349                 mov     [esp+8], ebx
.text:0040834D                 mov     ecx, [esp+20h]
.text:00408351                 mov     [esp], edx
.text:00408354                 mov     [esp+4], ecx
.text:00408358                 call    memcpy
.text:0040835D                 mov     ebx, [esp+18h]
.text:00408361                 add     esp, 1Ch
.text:00408364                 retn
.text:00408365 ; ---------------------------------------------------------------------------
.text:00408365
.text:00408365 loc_408365:                             ; CODE XREF: .text:00408347↑j
.text:00408365                 test    ebx, ebx
.text:00408367                 jz      short loc_408349
.text:00408369                 call    sub_409380
.text:00408369 ; ---------------------------------------------------------------------------
.text:0040836E                 align 10h
.text:00408370
.text:00408370 ; =============== S U B R O U T I N E =======================================
.text:00408370
.text:00408370
.text:00408370 ; int __cdecl sub_408370(char *)
.text:00408370 sub_408370      proc near               ; CODE XREF: sub_402BB0+CC↑p
.text:00408370
.text:00408370 Str             = dword ptr -1Ch
.text:00408370 Src             = dword ptr -18h
.text:00408370 Size            = dword ptr -14h
.text:00408370 var_8           = dword ptr -8
.text:00408370 var_4           = dword ptr -4
.text:00408370 arg_0           = dword ptr  4
.text:00408370
.text:00408370                 sub     esp, 1Ch
.text:00408373                 mov     [esp+1Ch+var_4], esi
.text:00408377                 mov     esi, [esp+1Ch+arg_0]
.text:0040837B                 mov     [esp+1Ch+var_8], ebx
.text:0040837F                 mov     [esp+1Ch+Str], esi ; Str
.text:00408382                 call    strlen
.text:00408387                 lea     ebx, [eax+1]
.text:0040838A                 mov     [esp+1Ch+Str], ebx ; Size
.text:0040838D                 call    malloc
.text:00408392                 test    eax, eax
.text:00408394                 jz      short loc_4083B2
.text:00408396
.text:00408396 loc_408396:                             ; CODE XREF: sub_408370+44↓j
.text:00408396                 mov     [esp+1Ch+Size], ebx ; Size
.text:0040839A                 mov     [esp+1Ch+Src], esi ; Src
.text:0040839E                 mov     [esp+1Ch+Str], eax ; void *
.text:004083A1                 call    memcpy
.text:004083A6                 mov     ebx, [esp+1Ch+var_8]
.text:004083AA                 mov     esi, [esp+1Ch+var_4]
.text:004083AE                 add     esp, 1Ch
.text:004083B1                 retn
.text:004083B2 ; ---------------------------------------------------------------------------
.text:004083B2
.text:004083B2 loc_4083B2:                             ; CODE XREF: sub_408370+24↑j
.text:004083B2                 test    ebx, ebx
.text:004083B4                 jz      short loc_408396
.text:004083B6                 call    sub_409380
.text:004083B6 sub_408370      endp
.text:004083B6
.text:004083B6 ; ---------------------------------------------------------------------------
.text:004083BB                 align 10h
.text:004083C0
.text:004083C0 ; =============== S U B R O U T I N E =======================================
.text:004083C0
.text:004083C0
.text:004083C0 ; int __cdecl sub_4083C0(void *, int, int)
.text:004083C0 sub_4083C0      proc near               ; CODE XREF: sub_408270↑j
.text:004083C0                                         ; .text:0040829A↑p
.text:004083C0
.text:004083C0 Block           = dword ptr -1Ch
.text:004083C0 Size            = dword ptr -18h
.text:004083C0 var_C           = dword ptr -0Ch
.text:004083C0 var_8           = dword ptr -8
.text:004083C0 var_4           = dword ptr -4
.text:004083C0 arg_0           = dword ptr  4
.text:004083C0 arg_4           = dword ptr  8
.text:004083C0 arg_8           = dword ptr  0Ch
.text:004083C0
.text:004083C0                 sub     esp, 1Ch
.text:004083C3                 mov     [esp+1Ch+var_8], esi
.text:004083C7                 mov     esi, [esp+1Ch+arg_0]
.text:004083CB                 mov     [esp+1Ch+var_4], edi
.text:004083CF                 mov     edi, [esp+1Ch+arg_4]
.text:004083D3                 test    esi, esi
.text:004083D5                 mov     [esp+1Ch+var_C], ebx
.text:004083D9                 mov     ecx, [edi]
.text:004083DB                 mov     ebx, [esp+1Ch+arg_8]
.text:004083DF                 jz      short loc_408420
.text:004083E1                 xor     edx, edx
.text:004083E3                 mov     eax, 7FFFFFFFh
.text:004083E8                 div     ebx
.text:004083EA                 cmp     eax, ecx
.text:004083EC                 jb      short loc_408419
.text:004083EE                 add     ecx, ecx
.text:004083F0
.text:004083F0 loc_4083F0:                             ; CODE XREF: sub_4083C0+62↓j
.text:004083F0                                         ; sub_4083C0+71↓j ...
.text:004083F0                 mov     [edi], ecx
.text:004083F2                 imul    ebx, ecx
.text:004083F5                 mov     [esp+1Ch+Block], esi ; Block
.text:004083F8                 mov     [esp+1Ch+Size], ebx ; Size
.text:004083FC                 call    realloc
.text:00408401                 test    eax, eax
.text:00408403                 jz      short loc_408415
.text:00408405
.text:00408405 loc_408405:                             ; CODE XREF: sub_4083C0+57↓j
.text:00408405                 mov     ebx, [esp+1Ch+var_C]
.text:00408409                 mov     esi, [esp+1Ch+var_8]
.text:0040840D                 mov     edi, [esp+1Ch+var_4]
.text:00408411                 add     esp, 1Ch
.text:00408414                 retn
.text:00408415 ; ---------------------------------------------------------------------------
.text:00408415
.text:00408415 loc_408415:                             ; CODE XREF: sub_4083C0+43↑j
.text:00408415                 test    ebx, ebx
.text:00408417                 jz      short loc_408405
.text:00408419
.text:00408419 loc_408419:                             ; CODE XREF: sub_4083C0+2C↑j
.text:00408419                 call    sub_409380
.text:00408419 ; ---------------------------------------------------------------------------
.text:0040841E                 align 10h
.text:00408420
.text:00408420 loc_408420:                             ; CODE XREF: sub_4083C0+1F↑j
.text:00408420                 test    ecx, ecx
.text:00408422                 jnz     short loc_4083F0
.text:00408424                 xor     edx, edx
.text:00408426                 mov     eax, 40h ; '@'
.text:0040842B                 div     ebx
.text:0040842D                 test    eax, eax
.text:0040842F                 mov     ecx, eax
.text:00408431                 jnz     short loc_4083F0
.text:00408433                 mov     ecx, 1
.text:00408438                 jmp     short loc_4083F0
.text:00408438 sub_4083C0      endp
.text:00408438
.text:00408438 ; ---------------------------------------------------------------------------
.text:0040843A                 align 10h
.text:00408440 byte_408440     db 43h, 0               ; DATA XREF: sub_408450+33↓o
.text:00408442 aPosix          db 'POSIX',0            ; DATA XREF: sub_408450+45↓o
.text:00408448                 align 10h
.text:00408450
.text:00408450 ; =============== S U B R O U T I N E =======================================
.text:00408450
.text:00408450
.text:00408450 sub_408450      proc near               ; CODE XREF: sub_401910+FCC↑p
.text:00408450
.text:00408450 Category        = dword ptr -1Ch
.text:00408450 Locale          = dword ptr -18h
.text:00408450 var_10          = dword ptr -10h
.text:00408450 var_C           = dword ptr -0Ch
.text:00408450 var_8           = dword ptr -8
.text:00408450 var_4           = dword ptr -4
.text:00408450 arg_0           = dword ptr  4
.text:00408450
.text:00408450                 sub     esp, 1Ch
.text:00408453                 mov     edx, [esp+1Ch+arg_0]
.text:00408457                 mov     [esp+1Ch+var_10], ebx
.text:0040845B                 mov     bl, 1
.text:0040845D                 mov     [esp+1Ch+var_C], esi
.text:00408461                 mov     [esp+1Ch+var_8], edi
.text:00408465                 mov     [esp+1Ch+var_4], ebp
.text:00408469                 mov     [esp+1Ch+Locale], 0 ; Locale
.text:00408471                 mov     [esp+1Ch+Category], edx ; Category
.text:00408474                 call    setlocale
.text:00408479                 test    eax, eax
.text:0040847B                 jz      short loc_4084A4
.text:0040847D                 cld
.text:0040847E                 mov     edx, 2
.text:00408483                 mov     edi, offset byte_408440
.text:00408488                 mov     esi, eax
.text:0040848A                 mov     ecx, edx
.text:0040848C                 repe cmpsb
.text:0040848E                 jz      short loc_4084A2
.text:00408490                 mov     edx, 6
.text:00408495                 mov     edi, offset aPosix ; "POSIX"
.text:0040849A                 mov     esi, eax
.text:0040849C                 mov     ecx, edx
.text:0040849E                 repe cmpsb
.text:004084A0                 jnz     short loc_4084A4
.text:004084A2
.text:004084A2 loc_4084A2:                             ; CODE XREF: sub_408450+3E↑j
.text:004084A2                 xor     ebx, ebx
.text:004084A4
.text:004084A4 loc_4084A4:                             ; CODE XREF: sub_408450+2B↑j
.text:004084A4                                         ; sub_408450+50↑j
.text:004084A4                 movzx   eax, bl
.text:004084A7                 mov     esi, [esp+1Ch+var_C]
.text:004084AB                 mov     ebx, [esp+1Ch+var_10]
.text:004084AF                 mov     edi, [esp+1Ch+var_8]
.text:004084B3                 mov     ebp, [esp+1Ch+var_4]
.text:004084B7                 add     esp, 1Ch
.text:004084BA                 retn
.text:004084BA sub_408450      endp
.text:004084BA
.text:004084BA ; ---------------------------------------------------------------------------
.text:004084BB                 align 10h
.text:004084C0 aCopyrightC2005 db 'Copyright (C) 2005 Free Software Foundation, Inc.',0
.text:004084C0                                         ; DATA XREF: .data:off_41D070↓o
.text:004084F2 ; const char aSSS[]
.text:004084F2 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: sub_4087B0+50↓o
.text:004084FE aWrittenByS     db 'Written by %s.',0Ah,0
.text:004084FE                                         ; DATA XREF: sub_4087B0:loc_408851↓o
.text:0040850E                 align 20h
.text:00408520 aThisIsFreeSoft db 'This is free software; see the source for copying conditions.  Th'
.text:00408520                                         ; DATA XREF: sub_4087B0+100↓o
.text:00408520                 db 'ere is NO',0Ah
.text:00408520                 db 'warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULA'
.text:00408520                 db 'R PURPOSE.',0Ah,0
.text:004085B8 aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.text:004085B8                                         ; DATA XREF: sub_4087B0:loc_4088F1↓o
.text:004085CF aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.text:004085CF                                         ; DATA XREF: sub_4087B0:loc_4088FD↓o
.text:004085EB                 align 20h
.text:00408600 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.text:00408600                                         ; DATA XREF: sub_4087B0:loc_408909↓o
.text:00408600                 db 'and %s.',0Ah,0
.text:00408620 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.text:00408620                                         ; DATA XREF: sub_4087B0:loc_408915↓o
.text:00408620                 db '%s, and %s.',0Ah,0
.text:00408644                 align 20h
.text:00408660 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.text:00408660                                         ; DATA XREF: sub_4087B0:loc_408921↓o
.text:00408660                 db '%s, %s, and %s.',0Ah,0
.text:00408688                 align 20h
.text:004086A0 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.text:004086A0                                         ; DATA XREF: sub_4087B0:loc_40892D↓o
.text:004086A0                 db '%s, %s, %s, and %s.',0Ah,0
.text:004086CC                 align 20h
.text:004086E0 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.text:004086E0                                         ; DATA XREF: sub_4087B0:loc_408939↓o
.text:004086E0                 db '%s, %s, %s, %s,',0Ah
.text:004086E0                 db 'and %s.',0Ah,0
.text:00408710                 align 20h
.text:00408720 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.text:00408720                                         ; DATA XREF: sub_4087B0:loc_408945↓o
.text:00408720                 db '%s, %s, %s, %s,',0Ah
.text:00408720                 db '%s, and %s.',0Ah,0
.text:00408754                 align 10h
.text:00408760 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.text:00408760                                         ; DATA XREF: sub_4087B0:def_40881D↓o
.text:00408760                 db '%s, %s, %s, %s,',0Ah
.text:00408760                 db '%s, %s, and others.',0Ah,0
.text:0040879C ; const char aSS[]
.text:0040879C aSS             db '%s %s',0Ah,0        ; DATA XREF: sub_4087B0+1B5↓o
.text:004087A3                 align 10h
.text:004087B0
.text:004087B0 ; =============== S U B R O U T I N E =======================================
.text:004087B0
.text:004087B0
.text:004087B0 ; int __cdecl sub_4087B0(FILE *, FILE *, int, int, va_list)
.text:004087B0 sub_4087B0      proc near               ; CODE XREF: sub_408980+2A↓p
.text:004087B0
.text:004087B0 Stream          = dword ptr -2Ch
.text:004087B0 Format          = dword ptr -28h
.text:004087B0 ArgList         = dword ptr -24h
.text:004087B0 var_20          = dword ptr -20h
.text:004087B0 var_1C          = dword ptr -1Ch
.text:004087B0 var_14          = dword ptr -14h
.text:004087B0 arg_0           = dword ptr  4
.text:004087B0 arg_4           = dword ptr  8
.text:004087B0 arg_8           = dword ptr  0Ch
.text:004087B0 arg_C           = dword ptr  10h
.text:004087B0 arg_10          = dword ptr  14h
.text:004087B0
.text:004087B0                 push    ebp
.text:004087B1                 push    edi
.text:004087B2                 push    esi
.text:004087B3                 push    ebx
.text:004087B4                 sub     esp, 1Ch
.text:004087B7                 xor     ebx, ebx
.text:004087B9                 mov     edi, [esp+2Ch+arg_10]
.text:004087BD                 mov     edx, [esp+2Ch+arg_8]
.text:004087C1                 mov     esi, [esp+2Ch+arg_0]
.text:004087C5                 mov     eax, [edi]
.text:004087C7                 mov     ecx, [esp+2Ch+arg_4]
.text:004087CB                 mov     [esp+2Ch+var_14], edx
.text:004087CF                 mov     ebp, [esp+2Ch+arg_C]
.text:004087D3                 lea     edx, [edi+4]
.text:004087D6                 test    eax, eax
.text:004087D8                 jz      short loc_4087EC
.text:004087DA                 lea     esi, [esi+0]
.text:004087E0
.text:004087E0 loc_4087E0:                             ; CODE XREF: sub_4087B0+3A↓j
.text:004087E0                 mov     eax, edx
.text:004087E2                 inc     ebx
.text:004087E3                 mov     eax, [eax]
.text:004087E5                 add     edx, 4
.text:004087E8                 test    eax, eax
.text:004087EA                 jnz     short loc_4087E0
.text:004087EC
.text:004087EC loc_4087EC:                             ; CODE XREF: sub_4087B0+28↑j
.text:004087EC                 test    ecx, ecx
.text:004087EE                 jz      loc_40895D
.text:004087F4                 mov     [esp+2Ch+var_1C], ebp
.text:004087F8                 mov     edx, [esp+2Ch+var_14]
.text:004087FC                 mov     [esp+2Ch+ArgList], ecx
.text:00408800                 mov     [esp+2Ch+Format], offset aSSS ; "%s (%s) %s\n"
.text:00408808                 mov     [esp+2Ch+var_20], edx
.text:0040880C                 mov     [esp+2Ch+Stream], esi ; Stream
.text:0040880F                 call    fprintf
.text:00408814
.text:00408814 loc_408814:                             ; CODE XREF: sub_4087B0+1C9↓j
.text:00408814                 cmp     ebx, 9          ; switch 10 cases
.text:00408817                 ja      def_40881D      ; jumptable 0040881D default case
.text:0040881D                 jmp     ds:jpt_40881D[ebx*4] ; switch jump
.text:0040881D ; ---------------------------------------------------------------------------
.text:00408824 jpt_40881D      dd offset loc_40884C    ; DATA XREF: sub_4087B0+6D↑r
.text:00408824                 dd offset loc_408851    ; jump table for switch statement
.text:00408824                 dd offset loc_4088F1
.text:00408824                 dd offset loc_4088FD
.text:00408824                 dd offset loc_408909
.text:00408824                 dd offset loc_408915
.text:00408824                 dd offset loc_408921
.text:00408824                 dd offset loc_40892D
.text:00408824                 dd offset loc_408939
.text:00408824                 dd offset loc_408945
.text:0040884C ; ---------------------------------------------------------------------------
.text:0040884C
.text:0040884C loc_40884C:                             ; CODE XREF: sub_4087B0+6D↑j
.text:0040884C                                         ; DATA XREF: sub_4087B0:jpt_40881D↑o
.text:0040884C                 call    abort           ; jumptable 0040881D case 0
.text:00408851 ; ---------------------------------------------------------------------------
.text:00408851
.text:00408851 loc_408851:                             ; CODE XREF: sub_4087B0+6D↑j
.text:00408851                                         ; DATA XREF: sub_4087B0:jpt_40881D↑o
.text:00408851                 mov     [esp+2Ch+Stream], offset aWrittenByS ; jumptable 0040881D case 1
.text:00408858                 nop
.text:00408859                 lea     esi, [esi+0]
.text:00408860
.text:00408860 loc_408860:                             ; CODE XREF: sub_4087B0+148↓j
.text:00408860                                         ; sub_4087B0+154↓j ...
.text:00408860                 call    ds:libintl_gettext
.text:00408866                 mov     [esp+2Ch+ArgList], edi ; ArgList
.text:0040886A                 mov     [esp+2Ch+Stream], esi ; Stream
.text:0040886D                 mov     [esp+2Ch+Format], eax ; Format
.text:00408871                 call    vfprintf
.text:00408876                 mov     ebx, [esi+4]
.text:00408879                 dec     ebx
.text:0040887A                 test    ebx, ebx
.text:0040887C                 mov     [esi+4], ebx
.text:0040887F                 js      short loc_4088DF
.text:00408881                 mov     edi, [esi]
.text:00408883                 mov     byte ptr [edi], 0Ah
.text:00408886                 inc     dword ptr [esi]
.text:00408888
.text:00408888 loc_408888:                             ; CODE XREF: sub_4087B0+13F↓j
.text:00408888                 mov     [esp+2Ch+Format], esi ; Stream
.text:0040888C                 mov     edx, off_41D070 ; "Copyright (C) 2005 Free Software Founda"...
.text:00408892                 mov     [esp+2Ch+Stream], edx ; Buffer
.text:00408895                 call    fputs
.text:0040889A                 mov     ebp, [esi+4]
.text:0040889D                 dec     ebp
.text:0040889E                 test    ebp, ebp
.text:004088A0                 mov     [esi+4], ebp
.text:004088A3                 js      short loc_4088CD
.text:004088A5                 mov     ecx, [esi]
.text:004088A7                 mov     byte ptr [ecx], 0Ah
.text:004088AA                 inc     dword ptr [esi]
.text:004088AC
.text:004088AC loc_4088AC:                             ; CODE XREF: sub_4087B0+12D↓j
.text:004088AC                 mov     [esp+2Ch+arg_4], esi ; Stream
.text:004088B0                 mov     [esp+2Ch+Stream], offset aThisIsFreeSoft ; "This is free software; see the source f"...
.text:004088B7                 call    ds:libintl_gettext
.text:004088BD                 mov     [esp+2Ch+arg_0], eax ; Buffer
.text:004088C1                 add     esp, 1Ch
.text:004088C4                 pop     ebx
.text:004088C5                 pop     esi
.text:004088C6                 pop     edi
.text:004088C7                 pop     ebp
.text:004088C8                 jmp     fputs
.text:004088CD ; ---------------------------------------------------------------------------
.text:004088CD
.text:004088CD loc_4088CD:                             ; CODE XREF: sub_4087B0+F3↑j
.text:004088CD                 mov     [esp+2Ch+Format], esi ; File
.text:004088D1                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:004088D8                 call    _flsbuf
.text:004088DD                 jmp     short loc_4088AC
.text:004088DF ; ---------------------------------------------------------------------------
.text:004088DF
.text:004088DF loc_4088DF:                             ; CODE XREF: sub_4087B0+CF↑j
.text:004088DF                 mov     [esp+2Ch+Format], esi ; File
.text:004088E3                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:004088EA                 call    _flsbuf
.text:004088EF                 jmp     short loc_408888
.text:004088F1 ; ---------------------------------------------------------------------------
.text:004088F1
.text:004088F1 loc_4088F1:                             ; CODE XREF: sub_4087B0+6D↑j
.text:004088F1                                         ; DATA XREF: sub_4087B0:jpt_40881D↑o
.text:004088F1                 mov     [esp+2Ch+Stream], offset aWrittenBySAndS ; jumptable 0040881D case 2
.text:004088F8                 jmp     loc_408860
.text:004088FD ; ---------------------------------------------------------------------------
.text:004088FD
.text:004088FD loc_4088FD:                             ; CODE XREF: sub_4087B0+6D↑j
.text:004088FD                                         ; DATA XREF: sub_4087B0:jpt_40881D↑o
.text:004088FD                 mov     [esp+2Ch+Stream], offset aWrittenBySSAnd ; jumptable 0040881D case 3
.text:00408904                 jmp     loc_408860
.text:00408909 ; ---------------------------------------------------------------------------
.text:00408909
.text:00408909 loc_408909:                             ; CODE XREF: sub_4087B0+6D↑j
.text:00408909                                         ; DATA XREF: sub_4087B0:jpt_40881D↑o
.text:00408909                 mov     [esp+2Ch+Stream], offset aWrittenBySSSAn ; jumptable 0040881D case 4
.text:00408910                 jmp     loc_408860
.text:00408915 ; ---------------------------------------------------------------------------
.text:00408915
.text:00408915 loc_408915:                             ; CODE XREF: sub_4087B0+6D↑j
.text:00408915                                         ; DATA XREF: sub_4087B0:jpt_40881D↑o
.text:00408915                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSA ; jumptable 0040881D case 5
.text:0040891C                 jmp     loc_408860
.text:00408921 ; ---------------------------------------------------------------------------
.text:00408921
.text:00408921 loc_408921:                             ; CODE XREF: sub_4087B0+6D↑j
.text:00408921                                         ; DATA XREF: sub_4087B0:jpt_40881D↑o
.text:00408921                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_0 ; jumptable 0040881D case 6
.text:00408928                 jmp     loc_408860
.text:0040892D ; ---------------------------------------------------------------------------
.text:0040892D
.text:0040892D loc_40892D:                             ; CODE XREF: sub_4087B0+6D↑j
.text:0040892D                                         ; DATA XREF: sub_4087B0:jpt_40881D↑o
.text:0040892D                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_1 ; jumptable 0040881D case 7
.text:00408934                 jmp     loc_408860
.text:00408939 ; ---------------------------------------------------------------------------
.text:00408939
.text:00408939 loc_408939:                             ; CODE XREF: sub_4087B0+6D↑j
.text:00408939                                         ; DATA XREF: sub_4087B0:jpt_40881D↑o
.text:00408939                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_2 ; jumptable 0040881D case 8
.text:00408940                 jmp     loc_408860
.text:00408945 ; ---------------------------------------------------------------------------
.text:00408945
.text:00408945 loc_408945:                             ; CODE XREF: sub_4087B0+6D↑j
.text:00408945                                         ; DATA XREF: sub_4087B0:jpt_40881D↑o
.text:00408945                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_3 ; jumptable 0040881D case 9
.text:0040894C                 jmp     loc_408860
.text:00408951 ; ---------------------------------------------------------------------------
.text:00408951
.text:00408951 def_40881D:                             ; CODE XREF: sub_4087B0+67↑j
.text:00408951                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS ; jumptable 0040881D default case
.text:00408958                 jmp     loc_408860
.text:0040895D ; ---------------------------------------------------------------------------
.text:0040895D
.text:0040895D loc_40895D:                             ; CODE XREF: sub_4087B0+3E↑j
.text:0040895D                 mov     [esp+2Ch+var_20], ebp
.text:00408961                 mov     ecx, [esp+2Ch+var_14]
.text:00408965                 mov     [esp+2Ch+Format], offset aSS ; "%s %s\n"
.text:0040896D                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00408970                 mov     [esp+2Ch+ArgList], ecx
.text:00408974                 call    fprintf
.text:00408979                 jmp     loc_408814
.text:00408979 sub_4087B0      endp
.text:00408979
.text:00408979 ; ---------------------------------------------------------------------------
.text:0040897E                 align 10h
.text:00408980
.text:00408980 ; =============== S U B R O U T I N E =======================================
.text:00408980
.text:00408980
.text:00408980 ; int __cdecl sub_408980(FILE *, FILE *, int, int, char)
.text:00408980 sub_408980      proc near               ; CODE XREF: sub_401910+6FD↑p
.text:00408980
.text:00408980 var_1C          = dword ptr -1Ch
.text:00408980 var_18          = dword ptr -18h
.text:00408980 var_14          = dword ptr -14h
.text:00408980 var_10          = dword ptr -10h
.text:00408980 var_C           = dword ptr -0Ch
.text:00408980 arg_0           = dword ptr  4
.text:00408980 arg_4           = dword ptr  8
.text:00408980 arg_8           = dword ptr  0Ch
.text:00408980 arg_C           = dword ptr  10h
.text:00408980 arg_10          = byte ptr  14h
.text:00408980
.text:00408980                 sub     esp, 1Ch
.text:00408983                 mov     edx, [esp+1Ch+arg_C]
.text:00408987                 lea     ecx, [esp+1Ch+arg_10]
.text:0040898B                 mov     [esp+1Ch+var_C], ecx ; va_list
.text:0040898F                 mov     ecx, [esp+1Ch+arg_8]
.text:00408993                 mov     [esp+1Ch+var_10], edx ; int
.text:00408997                 mov     edx, [esp+1Ch+arg_4]
.text:0040899B                 mov     [esp+1Ch+var_14], ecx ; int
.text:0040899F                 mov     [esp+1Ch+var_18], edx ; FILE *
.text:004089A3                 mov     edx, [esp+1Ch+arg_0]
.text:004089A7                 mov     [esp+1Ch+var_1C], edx ; FILE *
.text:004089AA                 call    sub_4087B0
.text:004089AF                 add     esp, 1Ch
.text:004089B2                 retn
.text:004089B2 sub_408980      endp
.text:004089B2
.text:004089B2 ; ---------------------------------------------------------------------------
.text:004089B3                 align 10h
.text:004089C0 aCoreutils530Sr db '../../coreutils-5.3.0-src/lib/xstrtol.c',0
.text:004089C0                                         ; DATA XREF: sub_408A30+651↓o
.text:004089E8                 align 20h
.text:00408A00 a0StrtolBaseStr db '0 <= strtol_base && strtol_base <= 36',0
.text:00408A00                                         ; DATA XREF: sub_408A30+659↓o
.text:00408A26                 align 10h
.text:00408A30
.text:00408A30 ; =============== S U B R O U T I N E =======================================
.text:00408A30
.text:00408A30
.text:00408A30 ; int __cdecl sub_408A30(char *, char **, int, int, char *Str)
.text:00408A30 sub_408A30      proc near               ; CODE XREF: sub_401910+776↑p
.text:00408A30                                         ; sub_401910+85C↑p ...
.text:00408A30
.text:00408A30 String          = dword ptr -3Ch
.text:00408A30 EndPtr          = dword ptr -38h
.text:00408A30 Radix           = dword ptr -34h
.text:00408A30 var_28          = dword ptr -28h
.text:00408A30 var_24          = dword ptr -24h
.text:00408A30 var_20          = dword ptr -20h
.text:00408A30 var_1C          = dword ptr -1Ch
.text:00408A30 var_18          = dword ptr -18h
.text:00408A30 var_14          = byte ptr -14h
.text:00408A30 arg_0           = dword ptr  4
.text:00408A30 arg_4           = dword ptr  8
.text:00408A30 arg_8           = dword ptr  0Ch
.text:00408A30 arg_C           = dword ptr  10h
.text:00408A30 Str             = dword ptr  14h
.text:00408A30
.text:00408A30                 push    ebp
.text:00408A31                 push    edi
.text:00408A32                 push    esi
.text:00408A33                 push    ebx
.text:00408A34                 sub     esp, 2Ch
.text:00408A37                 mov     ebx, [esp+3Ch+arg_8]
.text:00408A3B                 mov     [esp+3Ch+var_1C], 0
.text:00408A43                 mov     esi, [esp+3Ch+arg_0]
.text:00408A47                 mov     ebp, [esp+3Ch+Str]
.text:00408A4B                 cmp     ebx, 24h ; '$'
.text:00408A4E                 ja      loc_409079
.text:00408A54                 mov     edi, [esp+3Ch+arg_4]
.text:00408A58                 test    edi, edi
.text:00408A5A                 jz      loc_409070
.text:00408A60
.text:00408A60 loc_408A60:                             ; CODE XREF: sub_408A30+644↓j
.text:00408A60                 call    _errno
.text:00408A65                 mov     dword ptr [eax], 0
.text:00408A6B                 mov     [esp+3Ch+Radix], ebx ; Radix
.text:00408A6F                 mov     [esp+3Ch+EndPtr], edi ; EndPtr
.text:00408A73                 mov     [esp+3Ch+String], esi ; String
.text:00408A76                 call    strtol
.text:00408A7B                 mov     [esp+3Ch+var_18], eax
.text:00408A7F                 mov     eax, [edi]
.text:00408A81                 cmp     eax, esi
.text:00408A83                 jz      loc_409040
.text:00408A89                 call    _errno
.text:00408A8E                 mov     edx, [eax]
.text:00408A90                 test    edx, edx
.text:00408A92                 jnz     loc_409012
.text:00408A98
.text:00408A98 loc_408A98:                             ; CODE XREF: sub_408A30+5F4↓j
.text:00408A98                                         ; sub_408A30+636↓j
.text:00408A98                 test    ebp, ebp
.text:00408A9A                 jz      loc_409003
.text:00408AA0                 mov     esi, [edi]
.text:00408AA2                 movzx   eax, byte ptr [esi]
.text:00408AA5                 test    al, al
.text:00408AA7                 jnz     short loc_408AC0
.text:00408AA9
.text:00408AA9 loc_408AA9:                             ; CODE XREF: sub_408A30+230↓j
.text:00408AA9                                         ; sub_408A30+23B↓j
.text:00408AA9                 mov     esi, [esp+3Ch+var_18]
.text:00408AAD                 mov     edx, [esp+3Ch+arg_C]
.text:00408AB1                 mov     [edx], esi
.text:00408AB3
.text:00408AB3 loc_408AB3:                             ; CODE XREF: sub_408A30+5DD↓j
.text:00408AB3                 mov     eax, [esp+3Ch+var_1C]
.text:00408AB7
.text:00408AB7 loc_408AB7:                             ; CODE XREF: sub_408A30+C1↓j
.text:00408AB7                                         ; sub_408A30+605↓j
.text:00408AB7                 add     esp, 2Ch
.text:00408ABA                 pop     ebx
.text:00408ABB                 pop     esi
.text:00408ABC                 pop     edi
.text:00408ABD                 pop     ebp
.text:00408ABE                 retn
.text:00408ABE ; ---------------------------------------------------------------------------
.text:00408ABF                 align 10h
.text:00408AC0
.text:00408AC0 loc_408AC0:                             ; CODE XREF: sub_408A30+77↑j
.text:00408AC0                 mov     [esp+3Ch+var_20], 1
.text:00408AC8                 movsx   edx, al
.text:00408ACB                 mov     ebx, 400h
.text:00408AD0                 mov     [esp+3Ch+EndPtr], edx ; Val
.text:00408AD4                 mov     [esp+3Ch+String], ebp ; Str
.text:00408AD7                 call    strchr
.text:00408ADC                 test    eax, eax
.text:00408ADE                 jnz     short loc_408AF3
.text:00408AE0                 mov     ebp, [esp+3Ch+var_18]
.text:00408AE4                 mov     edi, [esp+3Ch+arg_C]
.text:00408AE8                 mov     [edi], ebp
.text:00408AEA
.text:00408AEA loc_408AEA:                             ; CODE XREF: sub_408A30+55A↓j
.text:00408AEA                 mov     eax, [esp+3Ch+var_1C]
.text:00408AEE                 or      eax, 2
.text:00408AF1                 jmp     short loc_408AB7
.text:00408AF3 ; ---------------------------------------------------------------------------
.text:00408AF3
.text:00408AF3 loc_408AF3:                             ; CODE XREF: sub_408A30+AE↑j
.text:00408AF3                 mov     [esp+3Ch+EndPtr], 30h ; '0' ; Val
.text:00408AFB                 mov     [esp+3Ch+String], ebp ; Str
.text:00408AFE                 call    strchr
.text:00408B03                 test    eax, eax
.text:00408B05                 jz      loc_408FF8
.text:00408B0B                 mov     ecx, [edi]
.text:00408B0D                 mov     [esp+3Ch+var_24], ecx
.text:00408B11                 movsx   eax, byte ptr [ecx+1]
.text:00408B15                 cmp     eax, 44h ; 'D'
.text:00408B18                 jz      loc_408FC2
.text:00408B1E                 cmp     eax, 44h ; 'D'
.text:00408B21                 jg      loc_408FD4
.text:00408B27                 cmp     eax, 42h ; 'B'
.text:00408B2A                 jz      loc_408FC2
.text:00408B30
.text:00408B30 loc_408B30:                             ; CODE XREF: sub_408A30+59F↓j
.text:00408B30                                         ; sub_408A30+5A7↓j ...
.text:00408B30                 mov     ebp, [esp+3Ch+var_24]
.text:00408B34                 movsx   eax, byte ptr [ebp+0]
.text:00408B38                 sub     eax, 42h ; 'B'  ; switch 54 cases
.text:00408B3B                 cmp     eax, 35h
.text:00408B3E                 ja      def_408B44      ; jumptable 00408B44 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:00408B44                 jmp     ds:jpt_408B44[eax*4] ; switch jump
.text:00408B44 ; ---------------------------------------------------------------------------
.text:00408B4B                 align 4
.text:00408B4C jpt_408B44      dd offset loc_408C89, offset def_408B44, offset def_408B44
.text:00408B4C                                         ; DATA XREF: sub_408A30+114↑r
.text:00408B4C                 dd offset loc_408CAD, offset def_408B44, offset loc_408E1D ; jump table for switch statement
.text:00408B4C                 dd offset def_408B44, offset def_408B44, offset def_408B44
.text:00408B4C                 dd offset loc_408E79, offset def_408B44, offset loc_408EC4
.text:00408B4C                 dd offset def_408B44, offset def_408B44, offset loc_408D09
.text:00408B4C                 dd offset def_408B44, offset def_408B44, offset def_408B44
.text:00408B4C                 dd offset loc_408F21, offset def_408B44, offset def_408B44
.text:00408B4C                 dd offset def_408B44, offset def_408B44, offset loc_408D65
.text:00408B4C                 dd offset loc_408DC1, offset def_408B44, offset def_408B44
.text:00408B4C                 dd offset def_408B44, offset def_408B44, offset def_408B44
.text:00408B4C                 dd offset def_408B44, offset def_408B44, offset loc_408C24
.text:00408B4C                 dd offset loc_408C4A, offset def_408B44, offset def_408B44
.text:00408B4C                 dd offset def_408B44, offset loc_408E1D, offset def_408B44
.text:00408B4C                 dd offset def_408B44, offset def_408B44, offset loc_408E79
.text:00408B4C                 dd offset def_408B44, offset loc_408EC4, offset def_408B44
.text:00408B4C                 dd offset def_408B44, offset def_408B44, offset def_408B44
.text:00408B4C                 dd offset def_408B44, offset def_408B44, offset loc_408F21
.text:00408B4C                 dd offset def_408B44, offset def_408B44, offset loc_408F8F
.text:00408C24 ; ---------------------------------------------------------------------------
.text:00408C24
.text:00408C24 loc_408C24:                             ; CODE XREF: sub_408A30+114↑j
.text:00408C24                                         ; DATA XREF: sub_408A30:jpt_408B44↑o
.text:00408C24                 mov     ecx, [esp+3Ch+var_18] ; jumptable 00408B44 case 98
.text:00408C28                 mov     edx, 200h
.text:00408C2D                 cmp     ecx, 0FFC00000h
.text:00408C33                 jl      short loc_408C7F
.text:00408C35                 mov     eax, 7FFFFFFFh
.text:00408C3A                 mov     esi, edx
.text:00408C3C                 cdq
.text:00408C3D                 idiv    esi
.text:00408C3F                 cmp     eax, ecx
.text:00408C41                 jl      short loc_408C70
.text:00408C43                 shl     ecx, 9
.text:00408C46
.text:00408C46 loc_408C46:                             ; CODE XREF: sub_408A30+27B↓j
.text:00408C46                 mov     [esp+3Ch+var_18], ecx
.text:00408C4A
.text:00408C4A loc_408C4A:                             ; CODE XREF: sub_408A30+114↑j
.text:00408C4A                                         ; sub_408A30+58D↓j
.text:00408C4A                                         ; DATA XREF: ...
.text:00408C4A                 xor     eax, eax        ; jumptable 00408B44 case 99
.text:00408C4C
.text:00408C4C loc_408C4C:                             ; CODE XREF: sub_408A30+24D↓j
.text:00408C4C                                         ; sub_408A30+2AF↓j ...
.text:00408C4C                 or      [esp+3Ch+var_1C], eax
.text:00408C50                 mov     ebp, [esp+3Ch+var_24]
.text:00408C54                 mov     eax, [esp+3Ch+var_20]
.text:00408C58                 add     ebp, eax
.text:00408C5A                 mov     [edi], ebp
.text:00408C5C                 cmp     byte ptr [ebp+0], 0
.text:00408C60                 jz      loc_408AA9
.text:00408C66                 or      [esp+3Ch+var_1C], 2
.text:00408C6B                 jmp     loc_408AA9
.text:00408C70 ; ---------------------------------------------------------------------------
.text:00408C70
.text:00408C70 loc_408C70:                             ; CODE XREF: sub_408A30+211↑j
.text:00408C70                                         ; sub_408A30+276↓j ...
.text:00408C70                 mov     [esp+3Ch+var_18], 7FFFFFFFh
.text:00408C78
.text:00408C78 loc_408C78:                             ; CODE XREF: sub_408A30+257↓j
.text:00408C78                 mov     eax, 1
.text:00408C7D                 jmp     short loc_408C4C
.text:00408C7F ; ---------------------------------------------------------------------------
.text:00408C7F
.text:00408C7F loc_408C7F:                             ; CODE XREF: sub_408A30+203↑j
.text:00408C7F                                         ; sub_408A30+268↓j ...
.text:00408C7F                 mov     [esp+3Ch+var_18], 80000000h
.text:00408C87                 jmp     short loc_408C78
.text:00408C89 ; ---------------------------------------------------------------------------
.text:00408C89
.text:00408C89 loc_408C89:                             ; CODE XREF: sub_408A30+114↑j
.text:00408C89                                         ; DATA XREF: sub_408A30:jpt_408B44↑o
.text:00408C89                 mov     ecx, [esp+3Ch+var_18] ; jumptable 00408B44 case 66
.text:00408C8D                 mov     edx, 400h
.text:00408C92                 cmp     ecx, 0FFE00000h
.text:00408C98                 jl      short loc_408C7F
.text:00408C9A                 mov     eax, 7FFFFFFFh
.text:00408C9F                 mov     ebp, edx
.text:00408CA1                 cdq
.text:00408CA2                 idiv    ebp
.text:00408CA4                 cmp     eax, ecx
.text:00408CA6                 jl      short loc_408C70
.text:00408CA8                 shl     ecx, 0Ah
.text:00408CAB                 jmp     short loc_408C46
.text:00408CAD ; ---------------------------------------------------------------------------
.text:00408CAD
.text:00408CAD loc_408CAD:                             ; CODE XREF: sub_408A30+114↑j
.text:00408CAD                                         ; DATA XREF: sub_408A30:jpt_408B44↑o
.text:00408CAD                 xor     ebp, ebp        ; jumptable 00408B44 case 69
.text:00408CAF                 mov     esi, 5
.text:00408CB4
.text:00408CB4 loc_408CB4:                             ; CODE XREF: sub_408A30+2AD↓j
.text:00408CB4                 mov     eax, 80000000h
.text:00408CB9                 mov     ecx, [esp+3Ch+var_18]
.text:00408CBD                 cdq
.text:00408CBE                 idiv    ebx
.text:00408CC0                 cmp     ecx, eax
.text:00408CC2                 mov     [esp+3Ch+var_28], eax
.text:00408CC6                 jge     short loc_408CE4
.text:00408CC8                 mov     [esp+3Ch+var_18], 80000000h
.text:00408CD0
.text:00408CD0 loc_408CD0:                             ; CODE XREF: sub_408A30+2CC↓j
.text:00408CD0                 mov     eax, 1
.text:00408CD5
.text:00408CD5 loc_408CD5:                             ; CODE XREF: sub_408A30+2D7↓j
.text:00408CD5                 dec     esi
.text:00408CD6                 or      ebp, eax
.text:00408CD8                 cmp     esi, 0FFFFFFFFh
.text:00408CDB                 mov     eax, ebp
.text:00408CDD                 jnz     short loc_408CB4
.text:00408CDF                 jmp     loc_408C4C
.text:00408CE4 ; ---------------------------------------------------------------------------
.text:00408CE4
.text:00408CE4 loc_408CE4:                             ; CODE XREF: sub_408A30+296↑j
.text:00408CE4                 mov     eax, 7FFFFFFFh
.text:00408CE9                 cdq
.text:00408CEA                 idiv    ebx
.text:00408CEC                 cmp     eax, ecx
.text:00408CEE                 mov     [esp+3Ch+var_28], eax
.text:00408CF2                 jge     short loc_408CFE
.text:00408CF4                 mov     [esp+3Ch+var_18], 7FFFFFFFh
.text:00408CFC                 jmp     short loc_408CD0
.text:00408CFE ; ---------------------------------------------------------------------------
.text:00408CFE
.text:00408CFE loc_408CFE:                             ; CODE XREF: sub_408A30+2C2↑j
.text:00408CFE                 imul    ecx, ebx
.text:00408D01                 xor     eax, eax
.text:00408D03                 mov     [esp+3Ch+var_18], ecx
.text:00408D07                 jmp     short loc_408CD5
.text:00408D09 ; ---------------------------------------------------------------------------
.text:00408D09
.text:00408D09 loc_408D09:                             ; CODE XREF: sub_408A30+114↑j
.text:00408D09                                         ; DATA XREF: sub_408A30:jpt_408B44↑o
.text:00408D09                 xor     ebp, ebp        ; jumptable 00408B44 case 80
.text:00408D0B                 mov     esi, 4
.text:00408D10
.text:00408D10 loc_408D10:                             ; CODE XREF: sub_408A30+309↓j
.text:00408D10                 mov     eax, 80000000h
.text:00408D15                 mov     ecx, [esp+3Ch+var_18]
.text:00408D19                 cdq
.text:00408D1A                 idiv    ebx
.text:00408D1C                 cmp     ecx, eax
.text:00408D1E                 mov     [esp+3Ch+var_28], eax
.text:00408D22                 jge     short loc_408D40
.text:00408D24                 mov     [esp+3Ch+var_18], 80000000h
.text:00408D2C
.text:00408D2C loc_408D2C:                             ; CODE XREF: sub_408A30+328↓j
.text:00408D2C                 mov     eax, 1
.text:00408D31
.text:00408D31 loc_408D31:                             ; CODE XREF: sub_408A30+333↓j
.text:00408D31                 dec     esi
.text:00408D32                 or      ebp, eax
.text:00408D34                 cmp     esi, 0FFFFFFFFh
.text:00408D37                 mov     eax, ebp
.text:00408D39                 jnz     short loc_408D10
.text:00408D3B                 jmp     loc_408C4C
.text:00408D40 ; ---------------------------------------------------------------------------
.text:00408D40
.text:00408D40 loc_408D40:                             ; CODE XREF: sub_408A30+2F2↑j
.text:00408D40                 mov     eax, 7FFFFFFFh
.text:00408D45                 cdq
.text:00408D46                 idiv    ebx
.text:00408D48                 cmp     eax, ecx
.text:00408D4A                 mov     [esp+3Ch+var_28], eax
.text:00408D4E                 jge     short loc_408D5A
.text:00408D50                 mov     [esp+3Ch+var_18], 7FFFFFFFh
.text:00408D58                 jmp     short loc_408D2C
.text:00408D5A ; ---------------------------------------------------------------------------
.text:00408D5A
.text:00408D5A loc_408D5A:                             ; CODE XREF: sub_408A30+31E↑j
.text:00408D5A                 imul    ecx, ebx
.text:00408D5D                 xor     eax, eax
.text:00408D5F                 mov     [esp+3Ch+var_18], ecx
.text:00408D63                 jmp     short loc_408D31
.text:00408D65 ; ---------------------------------------------------------------------------
.text:00408D65
.text:00408D65 loc_408D65:                             ; CODE XREF: sub_408A30+114↑j
.text:00408D65                                         ; DATA XREF: sub_408A30:jpt_408B44↑o
.text:00408D65                 xor     ebp, ebp        ; jumptable 00408B44 case 89
.text:00408D67                 mov     esi, 7
.text:00408D6C
.text:00408D6C loc_408D6C:                             ; CODE XREF: sub_408A30+365↓j
.text:00408D6C                 mov     eax, 80000000h
.text:00408D71                 mov     ecx, [esp+3Ch+var_18]
.text:00408D75                 cdq
.text:00408D76                 idiv    ebx
.text:00408D78                 cmp     ecx, eax
.text:00408D7A                 mov     [esp+3Ch+var_28], eax
.text:00408D7E                 jge     short loc_408D9C
.text:00408D80                 mov     [esp+3Ch+var_18], 80000000h
.text:00408D88
.text:00408D88 loc_408D88:                             ; CODE XREF: sub_408A30+384↓j
.text:00408D88                 mov     eax, 1
.text:00408D8D
.text:00408D8D loc_408D8D:                             ; CODE XREF: sub_408A30+38F↓j
.text:00408D8D                 dec     esi
.text:00408D8E                 or      ebp, eax
.text:00408D90                 cmp     esi, 0FFFFFFFFh
.text:00408D93                 mov     eax, ebp
.text:00408D95                 jnz     short loc_408D6C
.text:00408D97                 jmp     loc_408C4C
.text:00408D9C ; ---------------------------------------------------------------------------
.text:00408D9C
.text:00408D9C loc_408D9C:                             ; CODE XREF: sub_408A30+34E↑j
.text:00408D9C                 mov     eax, 7FFFFFFFh
.text:00408DA1                 cdq
.text:00408DA2                 idiv    ebx
.text:00408DA4                 cmp     eax, ecx
.text:00408DA6                 mov     [esp+3Ch+var_28], eax
.text:00408DAA                 jge     short loc_408DB6
.text:00408DAC                 mov     [esp+3Ch+var_18], 7FFFFFFFh
.text:00408DB4                 jmp     short loc_408D88
.text:00408DB6 ; ---------------------------------------------------------------------------
.text:00408DB6
.text:00408DB6 loc_408DB6:                             ; CODE XREF: sub_408A30+37A↑j
.text:00408DB6                 imul    ecx, ebx
.text:00408DB9                 xor     eax, eax
.text:00408DBB                 mov     [esp+3Ch+var_18], ecx
.text:00408DBF                 jmp     short loc_408D8D
.text:00408DC1 ; ---------------------------------------------------------------------------
.text:00408DC1
.text:00408DC1 loc_408DC1:                             ; CODE XREF: sub_408A30+114↑j
.text:00408DC1                                         ; DATA XREF: sub_408A30:jpt_408B44↑o
.text:00408DC1                 xor     ebp, ebp        ; jumptable 00408B44 case 90
.text:00408DC3                 mov     esi, 6
.text:00408DC8
.text:00408DC8 loc_408DC8:                             ; CODE XREF: sub_408A30+3C1↓j
.text:00408DC8                 mov     eax, 80000000h
.text:00408DCD                 mov     ecx, [esp+3Ch+var_18]
.text:00408DD1                 cdq
.text:00408DD2                 idiv    ebx
.text:00408DD4                 cmp     ecx, eax
.text:00408DD6                 mov     [esp+3Ch+var_28], eax
.text:00408DDA                 jge     short loc_408DF8
.text:00408DDC                 mov     [esp+3Ch+var_18], 80000000h
.text:00408DE4
.text:00408DE4 loc_408DE4:                             ; CODE XREF: sub_408A30+3E0↓j
.text:00408DE4                 mov     eax, 1
.text:00408DE9
.text:00408DE9 loc_408DE9:                             ; CODE XREF: sub_408A30+3EB↓j
.text:00408DE9                 dec     esi
.text:00408DEA                 or      ebp, eax
.text:00408DEC                 cmp     esi, 0FFFFFFFFh
.text:00408DEF                 mov     eax, ebp
.text:00408DF1                 jnz     short loc_408DC8
.text:00408DF3                 jmp     loc_408C4C
.text:00408DF8 ; ---------------------------------------------------------------------------
.text:00408DF8
.text:00408DF8 loc_408DF8:                             ; CODE XREF: sub_408A30+3AA↑j
.text:00408DF8                 mov     eax, 7FFFFFFFh
.text:00408DFD                 cdq
.text:00408DFE                 idiv    ebx
.text:00408E00                 cmp     eax, ecx
.text:00408E02                 mov     [esp+3Ch+var_28], eax
.text:00408E06                 jge     short loc_408E12
.text:00408E08                 mov     [esp+3Ch+var_18], 7FFFFFFFh
.text:00408E10                 jmp     short loc_408DE4
.text:00408E12 ; ---------------------------------------------------------------------------
.text:00408E12
.text:00408E12 loc_408E12:                             ; CODE XREF: sub_408A30+3D6↑j
.text:00408E12                 imul    ecx, ebx
.text:00408E15                 xor     eax, eax
.text:00408E17                 mov     [esp+3Ch+var_18], ecx
.text:00408E1B                 jmp     short loc_408DE9
.text:00408E1D ; ---------------------------------------------------------------------------
.text:00408E1D
.text:00408E1D loc_408E1D:                             ; CODE XREF: sub_408A30+114↑j
.text:00408E1D                                         ; DATA XREF: sub_408A30:jpt_408B44↑o
.text:00408E1D                 xor     ebp, ebp        ; jumptable 00408B44 cases 71,103
.text:00408E1F                 mov     esi, 2
.text:00408E24
.text:00408E24 loc_408E24:                             ; CODE XREF: sub_408A30+41D↓j
.text:00408E24                 mov     eax, 80000000h
.text:00408E29                 mov     ecx, [esp+3Ch+var_18]
.text:00408E2D                 cdq
.text:00408E2E                 idiv    ebx
.text:00408E30                 cmp     ecx, eax
.text:00408E32                 mov     [esp+3Ch+var_28], eax
.text:00408E36                 jge     short loc_408E54
.text:00408E38                 mov     [esp+3Ch+var_18], 80000000h
.text:00408E40
.text:00408E40 loc_408E40:                             ; CODE XREF: sub_408A30+43C↓j
.text:00408E40                 mov     eax, 1
.text:00408E45
.text:00408E45 loc_408E45:                             ; CODE XREF: sub_408A30+447↓j
.text:00408E45                 dec     esi
.text:00408E46                 or      ebp, eax
.text:00408E48                 cmp     esi, 0FFFFFFFFh
.text:00408E4B                 mov     eax, ebp
.text:00408E4D                 jnz     short loc_408E24
.text:00408E4F                 jmp     loc_408C4C
.text:00408E54 ; ---------------------------------------------------------------------------
.text:00408E54
.text:00408E54 loc_408E54:                             ; CODE XREF: sub_408A30+406↑j
.text:00408E54                 mov     eax, 7FFFFFFFh
.text:00408E59                 cdq
.text:00408E5A                 idiv    ebx
.text:00408E5C                 cmp     eax, ecx
.text:00408E5E                 mov     [esp+3Ch+var_28], eax
.text:00408E62                 jge     short loc_408E6E
.text:00408E64                 mov     [esp+3Ch+var_18], 7FFFFFFFh
.text:00408E6C                 jmp     short loc_408E40
.text:00408E6E ; ---------------------------------------------------------------------------
.text:00408E6E
.text:00408E6E loc_408E6E:                             ; CODE XREF: sub_408A30+432↑j
.text:00408E6E                 imul    ecx, ebx
.text:00408E71                 xor     eax, eax
.text:00408E73                 mov     [esp+3Ch+var_18], ecx
.text:00408E77                 jmp     short loc_408E45
.text:00408E79 ; ---------------------------------------------------------------------------
.text:00408E79
.text:00408E79 loc_408E79:                             ; CODE XREF: sub_408A30+114↑j
.text:00408E79                                         ; DATA XREF: sub_408A30:jpt_408B44↑o
.text:00408E79                 mov     eax, 80000000h  ; jumptable 00408B44 cases 75,107
.text:00408E7E                 mov     ecx, [esp+3Ch+var_18]
.text:00408E82                 lea     ebp, [esp+3Ch+var_18]
.text:00408E86                 cdq
.text:00408E87                 mov     esi, 7FFFFFFFh
.text:00408E8C                 idiv    ebx
.text:00408E8E                 cmp     ecx, eax
.text:00408E90                 jge     short loc_408EA8
.text:00408E92                 mov     [esp+3Ch+var_18], 80000000h
.text:00408E9A
.text:00408E9A loc_408E9A:                             ; CODE XREF: sub_408A30+488↓j
.text:00408E9A                 mov     edx, 1
.text:00408E9F
.text:00408E9F loc_408E9F:                             ; CODE XREF: sub_408A30+492↓j
.text:00408E9F                 xor     eax, eax
.text:00408EA1                 or      eax, edx
.text:00408EA3                 jmp     loc_408C4C
.text:00408EA8 ; ---------------------------------------------------------------------------
.text:00408EA8
.text:00408EA8 loc_408EA8:                             ; CODE XREF: sub_408A30+460↑j
.text:00408EA8                 mov     eax, esi
.text:00408EAA                 cdq
.text:00408EAB                 idiv    ebx
.text:00408EAD                 cmp     eax, ecx
.text:00408EAF                 jge     short loc_408EBA
.text:00408EB1                 mov     dword ptr [ebp+0], 7FFFFFFFh
.text:00408EB8                 jmp     short loc_408E9A
.text:00408EBA ; ---------------------------------------------------------------------------
.text:00408EBA
.text:00408EBA loc_408EBA:                             ; CODE XREF: sub_408A30+47F↑j
.text:00408EBA                 imul    ecx, ebx
.text:00408EBD                 xor     edx, edx
.text:00408EBF                 mov     [ebp+0], ecx
.text:00408EC2                 jmp     short loc_408E9F
.text:00408EC4 ; ---------------------------------------------------------------------------
.text:00408EC4
.text:00408EC4 loc_408EC4:                             ; CODE XREF: sub_408A30+114↑j
.text:00408EC4                                         ; DATA XREF: sub_408A30:jpt_408B44↑o
.text:00408EC4                 xor     ebp, ebp        ; jumptable 00408B44 cases 77,109
.text:00408EC6                 mov     esi, 1
.text:00408ECB
.text:00408ECB loc_408ECB:                             ; CODE XREF: sub_408A30+4CA↓j
.text:00408ECB                 mov     eax, 80000000h
.text:00408ED0                 mov     ecx, [esp+3Ch+var_18]
.text:00408ED4                 cdq
.text:00408ED5                 idiv    ebx
.text:00408ED7                 cmp     ecx, eax
.text:00408ED9                 mov     [esp+3Ch+var_28], eax
.text:00408EDD                 jge     short loc_408EFC
.text:00408EDF                 mov     [esp+3Ch+var_18], 80000000h
.text:00408EE7
.text:00408EE7 loc_408EE7:                             ; CODE XREF: sub_408A30+4E4↓j
.text:00408EE7                 mov     eax, 1
.text:00408EEC
.text:00408EEC loc_408EEC:                             ; CODE XREF: sub_408A30+4EF↓j
.text:00408EEC                 dec     esi
.text:00408EED                 or      ebp, eax
.text:00408EEF                 cmp     esi, 0FFFFFFFFh
.text:00408EF2                 mov     eax, ebp
.text:00408EF4                 jz      loc_408C4C
.text:00408EFA                 jmp     short loc_408ECB
.text:00408EFC ; ---------------------------------------------------------------------------
.text:00408EFC
.text:00408EFC loc_408EFC:                             ; CODE XREF: sub_408A30+4AD↑j
.text:00408EFC                 mov     eax, 7FFFFFFFh
.text:00408F01                 cdq
.text:00408F02                 idiv    ebx
.text:00408F04                 cmp     eax, ecx
.text:00408F06                 mov     [esp+3Ch+var_28], eax
.text:00408F0A                 jge     short loc_408F16
.text:00408F0C                 mov     [esp+3Ch+var_18], 7FFFFFFFh
.text:00408F14                 jmp     short loc_408EE7
.text:00408F16 ; ---------------------------------------------------------------------------
.text:00408F16
.text:00408F16 loc_408F16:                             ; CODE XREF: sub_408A30+4DA↑j
.text:00408F16                 imul    ecx, ebx
.text:00408F19                 xor     eax, eax
.text:00408F1B                 mov     [esp+3Ch+var_18], ecx
.text:00408F1F                 jmp     short loc_408EEC
.text:00408F21 ; ---------------------------------------------------------------------------
.text:00408F21
.text:00408F21 loc_408F21:                             ; CODE XREF: sub_408A30+114↑j
.text:00408F21                                         ; DATA XREF: sub_408A30:jpt_408B44↑o
.text:00408F21                 xor     ebp, ebp        ; jumptable 00408B44 cases 84,116
.text:00408F23                 mov     esi, 3
.text:00408F28
.text:00408F28 loc_408F28:                             ; CODE XREF: sub_408A30+521↓j
.text:00408F28                 mov     eax, 80000000h
.text:00408F2D                 mov     ecx, [esp+3Ch+var_18]
.text:00408F31                 cdq
.text:00408F32                 idiv    ebx
.text:00408F34                 cmp     ecx, eax
.text:00408F36                 mov     [esp+3Ch+var_28], eax
.text:00408F3A                 jge     short loc_408F58
.text:00408F3C                 mov     [esp+3Ch+var_18], 80000000h
.text:00408F44
.text:00408F44 loc_408F44:                             ; CODE XREF: sub_408A30+540↓j
.text:00408F44                 mov     eax, 1
.text:00408F49
.text:00408F49 loc_408F49:                             ; CODE XREF: sub_408A30+54B↓j
.text:00408F49                 dec     esi
.text:00408F4A                 or      ebp, eax
.text:00408F4C                 cmp     esi, 0FFFFFFFFh
.text:00408F4F                 mov     eax, ebp
.text:00408F51                 jnz     short loc_408F28
.text:00408F53                 jmp     loc_408C4C
.text:00408F58 ; ---------------------------------------------------------------------------
.text:00408F58
.text:00408F58 loc_408F58:                             ; CODE XREF: sub_408A30+50A↑j
.text:00408F58                 mov     eax, 7FFFFFFFh
.text:00408F5D                 cdq
.text:00408F5E                 idiv    ebx
.text:00408F60                 cmp     eax, ecx
.text:00408F62                 mov     [esp+3Ch+var_28], eax
.text:00408F66                 jge     short loc_408F72
.text:00408F68                 mov     [esp+3Ch+var_18], 7FFFFFFFh
.text:00408F70                 jmp     short loc_408F44
.text:00408F72 ; ---------------------------------------------------------------------------
.text:00408F72
.text:00408F72 loc_408F72:                             ; CODE XREF: sub_408A30+536↑j
.text:00408F72                 imul    ecx, ebx
.text:00408F75                 xor     eax, eax
.text:00408F77                 mov     [esp+3Ch+var_18], ecx
.text:00408F7B                 jmp     short loc_408F49
.text:00408F7B ; ---------------------------------------------------------------------------
.text:00408F7D                 align 10h
.text:00408F80
.text:00408F80 def_408B44:                             ; CODE XREF: sub_408A30+10E↑j
.text:00408F80                                         ; sub_408A30+114↑j
.text:00408F80                                         ; DATA XREF: ...
.text:00408F80                 mov     ecx, [esp+3Ch+var_18] ; jumptable 00408B44 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:00408F84                 mov     edi, [esp+3Ch+arg_C]
.text:00408F88                 mov     [edi], ecx
.text:00408F8A                 jmp     loc_408AEA
.text:00408F8F ; ---------------------------------------------------------------------------
.text:00408F8F
.text:00408F8F loc_408F8F:                             ; CODE XREF: sub_408A30+114↑j
.text:00408F8F                                         ; DATA XREF: sub_408A30:jpt_408B44↑o
.text:00408F8F                 mov     ecx, [esp+3Ch+var_18] ; jumptable 00408B44 case 119
.text:00408F93                 mov     edx, 2
.text:00408F98                 cmp     ecx, 0C0000000h
.text:00408F9E                 jl      loc_408C7F
.text:00408FA4                 mov     eax, 7FFFFFFFh
.text:00408FA9                 mov     esi, edx
.text:00408FAB                 cdq
.text:00408FAC                 idiv    esi
.text:00408FAE                 cmp     eax, ecx
.text:00408FB0                 jl      loc_408C70
.text:00408FB6                 lea     ebx, [ecx+ecx]
.text:00408FB9                 mov     [esp+3Ch+var_18], ebx
.text:00408FBD                 jmp     loc_408C4A      ; jumptable 00408B44 case 99
.text:00408FC2 ; ---------------------------------------------------------------------------
.text:00408FC2
.text:00408FC2 loc_408FC2:                             ; CODE XREF: sub_408A30+E8↑j
.text:00408FC2                                         ; sub_408A30+FA↑j
.text:00408FC2                 mov     [esp+3Ch+var_20], 2
.text:00408FCA                 mov     ebx, 3E8h
.text:00408FCF                 jmp     loc_408B30
.text:00408FD4 ; ---------------------------------------------------------------------------
.text:00408FD4
.text:00408FD4 loc_408FD4:                             ; CODE XREF: sub_408A30+F1↑j
.text:00408FD4                 cmp     eax, 69h ; 'i'
.text:00408FD7                 jnz     loc_408B30
.text:00408FDD                 mov     eax, [esp+3Ch+var_24]
.text:00408FE1                 cmp     byte ptr [eax+2], 42h ; 'B'
.text:00408FE5                 jnz     loc_408B30
.text:00408FEB                 mov     [esp+3Ch+var_20], 3
.text:00408FF3                 jmp     loc_408B30
.text:00408FF8 ; ---------------------------------------------------------------------------
.text:00408FF8
.text:00408FF8 loc_408FF8:                             ; CODE XREF: sub_408A30+D5↑j
.text:00408FF8                 mov     esi, [edi]
.text:00408FFA                 mov     [esp+3Ch+var_24], esi
.text:00408FFE                 jmp     loc_408B30
.text:00409003 ; ---------------------------------------------------------------------------
.text:00409003
.text:00409003 loc_409003:                             ; CODE XREF: sub_408A30+6A↑j
.text:00409003                 mov     ebx, [esp+3Ch+var_18]
.text:00409007                 mov     ecx, [esp+3Ch+arg_C]
.text:0040900B                 mov     [ecx], ebx
.text:0040900D                 jmp     loc_408AB3
.text:00409012 ; ---------------------------------------------------------------------------
.text:00409012
.text:00409012 loc_409012:                             ; CODE XREF: sub_408A30+62↑j
.text:00409012                 call    _errno
.text:00409017                 cmp     dword ptr [eax], 22h ; '"'
.text:0040901A                 jnz     short loc_409030
.text:0040901C                 mov     [esp+3Ch+var_1C], 1
.text:00409024                 jmp     loc_408A98
.text:00409024 ; ---------------------------------------------------------------------------
.text:00409029                 align 10h
.text:00409030
.text:00409030 loc_409030:                             ; CODE XREF: sub_408A30+5EA↑j
.text:00409030                                         ; sub_408A30+612↓j ...
.text:00409030                 mov     eax, 4
.text:00409035                 jmp     loc_408AB7
.text:00409035 ; ---------------------------------------------------------------------------
.text:0040903A                 align 10h
.text:00409040
.text:00409040 loc_409040:                             ; CODE XREF: sub_408A30+53↑j
.text:00409040                 test    ebp, ebp
.text:00409042                 jz      short loc_409030
.text:00409044                 movzx   eax, byte ptr [eax]
.text:00409047                 test    al, al
.text:00409049                 jz      short loc_409030
.text:0040904B                 mov     [esp+3Ch+String], ebp ; Str
.text:0040904E                 movsx   edx, al
.text:00409051                 mov     [esp+3Ch+EndPtr], edx ; Val
.text:00409055                 call    strchr
.text:0040905A                 test    eax, eax
.text:0040905C                 jz      short loc_409030
.text:0040905E                 mov     [esp+3Ch+var_18], 1
.text:00409066                 jmp     loc_408A98
.text:00409066 ; ---------------------------------------------------------------------------
.text:0040906B                 align 10h
.text:00409070
.text:00409070 loc_409070:                             ; CODE XREF: sub_408A30+2A↑j
.text:00409070                 lea     edi, [esp+3Ch+var_14]
.text:00409074                 jmp     loc_408A60
.text:00409079 ; ---------------------------------------------------------------------------
.text:00409079
.text:00409079 loc_409079:                             ; CODE XREF: sub_408A30+1E↑j
.text:00409079                 mov     [esp+3Ch+Radix], 70h ; 'p'
.text:00409081                 mov     [esp+3Ch+EndPtr], offset aCoreutils530Sr ; "../../coreutils-5.3.0-src/lib/xstrtol.c"
.text:00409089                 mov     [esp+3Ch+String], offset a0StrtolBaseStr ; "0 <= strtol_base && strtol_base <= 36"
.text:00409090                 call    _assert
.text:00409090 sub_408A30      endp
.text:00409090
.text:00409090 ; ---------------------------------------------------------------------------
.text:00409095                 align 10h
.text:004090A0
.text:004090A0 ; =============== S U B R O U T I N E =======================================
.text:004090A0
.text:004090A0
.text:004090A0 ; int __cdecl sub_4090A0(int, int, char *, int, int)
.text:004090A0 sub_4090A0      proc near               ; CODE XREF: sub_401910+D4↑p
.text:004090A0
.text:004090A0 var_1C          = dword ptr -1Ch
.text:004090A0 var_18          = dword ptr -18h
.text:004090A0 var_14          = dword ptr -14h
.text:004090A0 var_10          = dword ptr -10h
.text:004090A0 var_C           = dword ptr -0Ch
.text:004090A0 var_8           = dword ptr -8
.text:004090A0 var_4           = dword ptr -4
.text:004090A0 arg_0           = dword ptr  4
.text:004090A0 arg_4           = dword ptr  8
.text:004090A0 arg_8           = dword ptr  0Ch
.text:004090A0 arg_C           = dword ptr  10h
.text:004090A0 arg_10          = dword ptr  14h
.text:004090A0
.text:004090A0                 sub     esp, 1Ch
.text:004090A3                 mov     edx, [esp+1Ch+arg_C]
.text:004090A7                 mov     [esp+1Ch+var_4], 0 ; int
.text:004090AF                 mov     ecx, [esp+1Ch+arg_10]
.text:004090B3                 mov     [esp+1Ch+var_8], 0 ; int
.text:004090BB                 mov     [esp+1Ch+var_10], edx ; int
.text:004090BF                 mov     edx, [esp+1Ch+arg_4]
.text:004090C3                 mov     [esp+1Ch+var_C], ecx ; int
.text:004090C7                 mov     ecx, [esp+1Ch+arg_8]
.text:004090CB                 mov     [esp+1Ch+var_18], edx ; int
.text:004090CF                 mov     edx, [esp+1Ch+arg_0]
.text:004090D3                 mov     [esp+1Ch+var_14], ecx ; char *
.text:004090D7                 mov     [esp+1Ch+var_1C], edx ; int
.text:004090DA                 call    sub_407F30
.text:004090DF                 add     esp, 1Ch
.text:004090E2                 retn
.text:004090E2 sub_4090A0      endp
.text:004090E2
.text:004090E2 ; ---------------------------------------------------------------------------
.text:004090E3                 align 10h
.text:004090F0                 sub     esp, 2Ch
.text:004090F3                 mov     edx, [esp+44h]
.text:004090F7                 mov     dword ptr [esp+18h], 0
.text:004090FF                 mov     ecx, [esp+40h]
.text:00409103                 mov     dword ptr [esp+14h], 0
.text:0040910B                 mov     [esp+1Ch], edx
.text:0040910F                 mov     edx, [esp+3Ch]
.text:00409113                 mov     [esp+10h], ecx
.text:00409117                 mov     ecx, [esp+38h]
.text:0040911B                 mov     [esp+0Ch], edx
.text:0040911F                 mov     edx, [esp+34h]
.text:00409123                 mov     [esp+8], ecx
.text:00409127                 mov     [esp+4], edx
.text:0040912B                 mov     edx, [esp+30h]
.text:0040912F                 mov     [esp], edx
.text:00409132                 call    sub_4073A0
.text:00409137                 add     esp, 2Ch
.text:0040913A                 retn
.text:0040913A ; ---------------------------------------------------------------------------
.text:0040913B                 align 10h
.text:00409140                 sub     esp, 1Ch
.text:00409143                 mov     edx, [esp+2Ch]
.text:00409147                 mov     dword ptr [esp+18h], 0
.text:0040914F                 mov     ecx, [esp+30h]
.text:00409153                 mov     dword ptr [esp+14h], 1
.text:0040915B                 mov     [esp+0Ch], edx
.text:0040915F                 mov     edx, [esp+24h]
.text:00409163                 mov     [esp+10h], ecx
.text:00409167                 mov     ecx, [esp+28h]
.text:0040916B                 mov     [esp+4], edx
.text:0040916F                 mov     edx, [esp+20h]
.text:00409173                 mov     [esp+8], ecx
.text:00409177                 mov     [esp], edx
.text:0040917A                 call    sub_407F30
.text:0040917F                 add     esp, 1Ch
.text:00409182                 retn
.text:00409182 ; ---------------------------------------------------------------------------
.text:00409183                 align 10h
.text:00409190                 sub     esp, 2Ch
.text:00409193                 mov     edx, [esp+44h]
.text:00409197                 mov     dword ptr [esp+18h], 0
.text:0040919F                 mov     ecx, [esp+40h]
.text:004091A3                 mov     dword ptr [esp+14h], 1
.text:004091AB                 mov     [esp+1Ch], edx
.text:004091AF                 mov     edx, [esp+3Ch]
.text:004091B3                 mov     [esp+10h], ecx
.text:004091B7                 mov     ecx, [esp+38h]
.text:004091BB                 mov     [esp+0Ch], edx
.text:004091BF                 mov     edx, [esp+34h]
.text:004091C3                 mov     [esp+8], ecx
.text:004091C7                 mov     [esp+4], edx
.text:004091CB                 mov     edx, [esp+30h]
.text:004091CF                 mov     [esp], edx
.text:004091D2                 call    sub_4073A0
.text:004091D7                 add     esp, 2Ch
.text:004091DA                 retn
.text:004091DA ; ---------------------------------------------------------------------------
.text:004091DB                 align 10h
.text:004091E0                 mov     edx, [esp+4]
.text:004091E4                 mov     ds:dword_41E390, edx
.text:004091EA                 retn
.text:004091EA ; ---------------------------------------------------------------------------
.text:004091EB aWriteError     db 'write error',0      ; DATA XREF: sub_409210:loc_409259↓o
.text:004091F7 ; const char aSS_0[]
.text:004091F7 aSS_0           db '%s: %s',0           ; DATA XREF: sub_409210+77↓o
.text:004091FE ; const char aS_2[]
.text:004091FE aS_2            db '%s',0               ; DATA XREF: sub_409210+A0↓o
.text:00409201 ; ---------------------------------------------------------------------------
.text:00409201                 jmp     short sub_409210
.text:00409201 ; ---------------------------------------------------------------------------
.text:00409203                 align 10h
.text:00409210
.text:00409210 ; =============== S U B R O U T I N E =======================================
.text:00409210
.text:00409210
.text:00409210 ; void __cdecl sub_409210()
.text:00409210 sub_409210      proc near               ; CODE XREF: .text:00409201↑j
.text:00409210                                         ; DATA XREF: sub_401910+86↑o
.text:00409210
.text:00409210 Stream          = dword ptr -2Ch
.text:00409210 ErrorMessage    = dword ptr -28h
.text:00409210 var_24          = dword ptr -24h
.text:00409210 var_20          = byte ptr -20h
.text:00409210 var_1C          = dword ptr -1Ch
.text:00409210 var_9           = byte ptr -9
.text:00409210
.text:00409210                 push    esi
.text:00409211                 push    ebx
.text:00409212                 sub     esp, 24h
.text:00409215                 mov     edx, ds:_iob
.text:0040921B                 mov     ecx, [edx+2Ch]
.text:0040921E                 lea     esi, [edx+20h]
.text:00409221                 shr     ecx, 5
.text:00409224                 mov     bl, cl
.text:00409226                 mov     ecx, [edx+20h]
.text:00409229                 and     bl, 1
.text:0040922C                 cmp     ecx, [esi+8]
.text:0040922F                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00409232                 setz    [esp+2Ch+var_9]
.text:00409237                 call    fclose
.text:0040923C                 test    eax, eax
.text:0040923E                 setnz   al
.text:00409241                 test    bl, bl
.text:00409243                 jnz     loc_4092D3
.text:00409249                 test    al, al
.text:0040924B                 jz      short loc_4092A0
.text:0040924D
.text:0040924D loc_40924D:                             ; CODE XREF: sub_409210+CD↓j
.text:0040924D                 call    _errno
.text:00409252                 mov     esi, [eax]
.text:00409254
.text:00409254 loc_409254:                             ; CODE XREF: sub_409210+C7↓j
.text:00409254                 cmp     esi, 9
.text:00409257                 jz      short loc_4092C6
.text:00409259
.text:00409259 loc_409259:                             ; CODE XREF: sub_409210+B8↓j
.text:00409259                                         ; sub_409210+C1↓j
.text:00409259                 mov     [esp+2Ch+Stream], offset aWriteError ; "write error"
.text:00409260                 call    ds:libintl_gettext
.text:00409266                 mov     ebx, eax
.text:00409268                 mov     eax, ds:dword_41E390
.text:0040926D                 test    eax, eax
.text:0040926F                 jz      short loc_4092A6
.text:00409271                 mov     [esp+2Ch+Stream], eax ; char *
.text:00409274                 call    sub_40A4F0
.text:00409279                 mov     dword ptr [esp+2Ch+var_20], eax ; char
.text:0040927D                 mov     edx, Code
.text:00409283                 mov     [esp+2Ch+var_1C], ebx
.text:00409287                 mov     [esp+2Ch+var_24], offset aSS_0 ; "%s: %s"
.text:0040928F                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:00409293                 mov     [esp+2Ch+Stream], edx ; Code
.text:00409296                 call    sub_40A7B0
.text:0040929B                 nop
.text:0040929C                 lea     esi, [esi+0]
.text:004092A0
.text:004092A0 loc_4092A0:                             ; CODE XREF: sub_409210+3B↑j
.text:004092A0                                         ; sub_409210+B4↓j ...
.text:004092A0                 add     esp, 24h
.text:004092A3                 pop     ebx
.text:004092A4                 pop     esi
.text:004092A5                 retn
.text:004092A6 ; ---------------------------------------------------------------------------
.text:004092A6
.text:004092A6 loc_4092A6:                             ; CODE XREF: sub_409210+5F↑j
.text:004092A6                 mov     dword ptr [esp+2Ch+var_20], ebx ; char
.text:004092AA                 mov     ebx, Code
.text:004092B0                 mov     [esp+2Ch+var_24], offset aS_2 ; "%s"
.text:004092B8                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:004092BC                 mov     [esp+2Ch+Stream], ebx ; Code
.text:004092BF                 call    sub_40A7B0
.text:004092C4                 jmp     short loc_4092A0
.text:004092C6 ; ---------------------------------------------------------------------------
.text:004092C6
.text:004092C6 loc_4092C6:                             ; CODE XREF: sub_409210+47↑j
.text:004092C6                 test    bl, bl
.text:004092C8                 jnz     short loc_409259
.text:004092CA                 cmp     [esp+2Ch+var_9], 0
.text:004092CF                 jnz     short loc_4092A0
.text:004092D1                 jmp     short loc_409259
.text:004092D3 ; ---------------------------------------------------------------------------
.text:004092D3
.text:004092D3 loc_4092D3:                             ; CODE XREF: sub_409210+33↑j
.text:004092D3                 xor     esi, esi
.text:004092D5                 test    al, al
.text:004092D7                 jz      loc_409254
.text:004092DD                 jmp     loc_40924D
.text:004092DD sub_409210      endp
.text:004092DD
.text:004092DD ; ---------------------------------------------------------------------------
.text:004092E2                 align 10h
.text:004092F0 ; const char aPosix2Version[]
.text:004092F0 aPosix2Version  db '_POSIX2_VERSION',0  ; DATA XREF: sub_409300+C↓o
.text:00409300
.text:00409300 ; =============== S U B R O U T I N E =======================================
.text:00409300
.text:00409300
.text:00409300 sub_409300      proc near               ; CODE XREF: sub_401910+29↑p
.text:00409300
.text:00409300 VarName         = dword ptr -1Ch
.text:00409300 EndPtr          = dword ptr -18h
.text:00409300 Radix           = dword ptr -14h
.text:00409300 var_8           = dword ptr -8
.text:00409300 var_4           = dword ptr -4
.text:00409300
.text:00409300                 sub     esp, 1Ch
.text:00409303                 mov     [esp+1Ch+var_4], ebx
.text:00409307                 mov     ebx, 30A29h
.text:0040930C                 mov     [esp+1Ch+VarName], offset aPosix2Version ; "_POSIX2_VERSION"
.text:00409313                 call    getenv
.text:00409318                 test    eax, eax
.text:0040931A                 jz      short loc_409321
.text:0040931C                 cmp     byte ptr [eax], 0
.text:0040931F                 jnz     short loc_409330
.text:00409321
.text:00409321 loc_409321:                             ; CODE XREF: sub_409300+1A↑j
.text:00409321                                         ; sub_409300+4F↓j ...
.text:00409321                 mov     eax, ebx
.text:00409323                 mov     ebx, [esp+1Ch+var_4]
.text:00409327                 add     esp, 1Ch
.text:0040932A                 retn
.text:0040932A ; ---------------------------------------------------------------------------
.text:0040932B                 align 10h
.text:00409330
.text:00409330 loc_409330:                             ; CODE XREF: sub_409300+1F↑j
.text:00409330                 mov     [esp+1Ch+Radix], 0Ah ; Radix
.text:00409338                 lea     ecx, [esp+1Ch+var_8]
.text:0040933C                 mov     [esp+1Ch+EndPtr], ecx ; EndPtr
.text:00409340                 mov     [esp+1Ch+VarName], eax ; String
.text:00409343                 call    strtol
.text:00409348                 mov     ecx, [esp+1Ch+var_8]
.text:0040934C                 cmp     byte ptr [ecx], 0
.text:0040934F                 jnz     short loc_409321
.text:00409351                 mov     ebx, eax
.text:00409353                 jmp     short loc_409321
.text:00409353 sub_409300      endp
.text:00409353
.text:00409353 ; ---------------------------------------------------------------------------
.text:00409355                 align 10h
.text:00409360 aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: sub_409380+3↓o
.text:00409371 ; const char aS[]
.text:00409371 aS              db '%s',0               ; DATA XREF: sub_409380+10↓o
.text:00409374                 align 10h
.text:00409380
.text:00409380 ; =============== S U B R O U T I N E =======================================
.text:00409380
.text:00409380 ; Attributes: noreturn
.text:00409380
.text:00409380 sub_409380      proc near               ; CODE XREF: sub_408170:loc_4081A9↑p
.text:00409380                                         ; sub_4081B0+24↑p ...
.text:00409380
.text:00409380 Code            = dword ptr -1Ch
.text:00409380 ErrorMessage    = dword ptr -18h
.text:00409380 var_14          = dword ptr -14h
.text:00409380 var_10          = byte ptr -10h
.text:00409380
.text:00409380                 sub     esp, 1Ch
.text:00409383                 mov     [esp+1Ch+Code], offset aMemoryExhauste ; "memory exhausted"
.text:0040938A                 call    ds:libintl_gettext
.text:00409390                 mov     [esp+1Ch+var_14], offset aS ; "%s"
.text:00409398                 mov     edx, Code
.text:0040939E                 mov     [esp+1Ch+ErrorMessage], 0 ; ErrorMessage
.text:004093A6                 mov     dword ptr [esp+1Ch+var_10], eax ; char
.text:004093AA                 mov     [esp+1Ch+Code], edx ; Code
.text:004093AD
.text:004093AD loc_4093AD:                             ; CODE XREF: .text:00409418↓j
.text:004093AD                 call    sub_40A7B0
.text:004093B2                 call    abort
.text:004093B2 sub_409380      endp
.text:004093B2
.text:004093B2 ; ---------------------------------------------------------------------------
.text:004093B7                 align 10h
.text:004093C0 aLiteral        db 'literal',0          ; DATA XREF: .text:00409400↓o
.text:004093C8 aShell          db 'shell',0            ; DATA XREF: .text:00409404↓o
.text:004093CE aShellAlways    db 'shell-always',0     ; DATA XREF: .text:00409408↓o
.text:004093DB aC              db 'c',0                ; DATA XREF: .text:0040940C↓o
.text:004093DD aEscape         db 'escape',0           ; DATA XREF: .text:00409410↓o
.text:004093E4 aLocale         db 'locale',0           ; DATA XREF: .text:00409414↓o
.text:004093EB aClocale        db 'clocale',0
.text:004093F3                 align 10h
.text:00409400                 dd offset aLiteral      ; "literal"
.text:00409404                 dd offset aShell        ; "shell"
.text:00409408                 dd offset aShellAlways  ; "shell-always"
.text:0040940C                 dd offset aC            ; "c"
.text:00409410                 dd offset aEscape       ; "escape"
.text:00409414                 dd offset aLocale       ; "locale"
.text:00409418 ; ---------------------------------------------------------------------------
.text:00409418                 jmp     short loc_4093AD
.text:00409418 ; ---------------------------------------------------------------------------
.text:0040941A                 dw 40h
.text:0040941C                 dd 2 dup(0)
.text:00409424                 dd 1, 2, 3, 4, 5, 6
.text:0040943C asc_40943C:                             ; DATA XREF: sub_409450+7E↓o
.text:0040943C                                         ; sub_409450+A39↓o ...
.text:0040943C                 text "UTF-16LE", '"',27h,'`'
.text:00409442                 align 10h
.text:00409450
.text:00409450 ; =============== S U B R O U T I N E =======================================
.text:00409450
.text:00409450
.text:00409450 ; int __cdecl sub_409450(int, int, char *Str, int, int, int)
.text:00409450 sub_409450      proc near               ; CODE XREF: sub_409450+43A↓p
.text:00409450                                         ; .text:0040A013↓p ...
.text:00409450
.text:00409450 C               = dword ptr -4Ch
.text:00409450 Type            = dword ptr -48h
.text:00409450 SizeInBytes     = dword ptr -44h
.text:00409450 State           = dword ptr -40h
.text:00409450 var_3C          = dword ptr -3Ch
.text:00409450 var_38          = dword ptr -38h
.text:00409450 var_34          = dword ptr -34h
.text:00409450 var_30          = dword ptr -30h
.text:00409450 var_29          = byte ptr -29h
.text:00409450 var_28          = dword ptr -28h
.text:00409450 var_22          = byte ptr -22h
.text:00409450 var_21          = byte ptr -21h
.text:00409450 var_20          = dword ptr -20h
.text:00409450 var_1C          = dword ptr -1Ch
.text:00409450 var_18          = mbstate_t ptr -18h
.text:00409450 arg_0           = dword ptr  4
.text:00409450 arg_4           = dword ptr  8
.text:00409450 Str             = dword ptr  0Ch
.text:00409450 arg_C           = dword ptr  10h
.text:00409450 arg_10          = dword ptr  14h
.text:00409450 arg_14          = dword ptr  18h
.text:00409450
.text:00409450                 push    ebp
.text:00409451                 push    edi
.text:00409452                 push    esi
.text:00409453                 push    ebx
.text:00409454                 sub     esp, 3Ch
.text:00409457                 mov     edx, ds:__mb_cur_max
.text:0040945D                 mov     [esp+4Ch+var_34], 0
.text:00409465                 mov     [esp+4Ch+var_1C], 0
.text:0040946D                 cmp     dword ptr [edx], 1
.text:00409470                 mov     [esp+4Ch+var_20], 0
.text:00409478                 mov     [esp+4Ch+var_21], 0
.text:0040947D                 setz    [esp+4Ch+var_22]
.text:00409482                 cmp     [esp+4Ch+arg_10], 6 ; switch 7 cases
.text:00409487                 ja      short def_40948D ; jumptable 0040948D default case, cases 0,1
.text:00409489                 mov     edx, [esp+4Ch+arg_10]
.text:0040948D                 jmp     ds:jpt_40948D[edx*4] ; switch jump
.text:0040948D ; ---------------------------------------------------------------------------
.text:00409494 jpt_40948D      dd offset def_40948D    ; DATA XREF: sub_409450+3D↑r
.text:00409494                 dd offset def_40948D    ; jump table for switch statement
.text:00409494                 dd offset loc_409DD5
.text:00409494                 dd offset loc_4094B0
.text:00409494                 dd offset loc_409DFB
.text:00409494                 dd offset loc_409E05
.text:00409494                 dd offset loc_409E05
.text:004094B0 ; ---------------------------------------------------------------------------
.text:004094B0
.text:004094B0 loc_4094B0:                             ; CODE XREF: sub_409450+3D↑j
.text:004094B0                                         ; DATA XREF: sub_409450:jpt_40948D↑o
.text:004094B0                 mov     eax, [esp+4Ch+arg_4] ; jumptable 0040948D case 3
.text:004094B4                 cmp     [esp+4Ch+var_34], eax
.text:004094B8                 jnb     short loc_4094C1
.text:004094BA                 mov     ebx, [esp+4Ch+arg_0]
.text:004094BE                 mov     byte ptr [ebx], 22h ; '"'
.text:004094C1
.text:004094C1 loc_4094C1:                             ; CODE XREF: sub_409450+68↑j
.text:004094C1                 mov     [esp+4Ch+var_34], 1
.text:004094C9                 mov     [esp+4Ch+var_21], 1
.text:004094CE                 mov     [esp+4Ch+var_1C], offset asc_40943C ; "\"'`"
.text:004094D6
.text:004094D6 loc_4094D6:                             ; CODE XREF: sub_409450+9A6↓j
.text:004094D6                 mov     [esp+4Ch+var_20], 1
.text:004094DE
.text:004094DE def_40948D:                             ; CODE XREF: sub_409450+37↑j
.text:004094DE                                         ; sub_409450+3D↑j ...
.text:004094DE                 xor     ebp, ebp        ; jumptable 0040948D default case, cases 0,1
.text:004094E0
.text:004094E0 loc_4094E0:                             ; CODE XREF: sub_409450+3DB↓j
.text:004094E0                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:004094E5                 jz      loc_409DC7
.text:004094EB                 cmp     ebp, [esp+4Ch+arg_C]
.text:004094EF
.text:004094EF loc_4094EF:                             ; CODE XREF: sub_409450+980↓j
.text:004094EF                 jz      loc_409D5E
.text:004094F5                 cmp     [esp+4Ch+var_21], 0
.text:004094FA                 jz      short loc_409540
.text:004094FC                 mov     esi, [esp+4Ch+var_20]
.text:00409500                 test    esi, esi
.text:00409502                 jz      short loc_409540
.text:00409504                 mov     ecx, [esp+4Ch+var_20]
.text:00409508                 lea     edi, [ecx+ebp]
.text:0040950B                 cmp     edi, [esp+4Ch+arg_C]
.text:0040950F                 ja      short loc_409540
.text:00409511                 cld
.text:00409512                 mov     ebx, [esp+4Ch+Str]
.text:00409516                 mov     edi, [esp+4Ch+var_1C]
.text:0040951A                 add     ebx, ebp
.text:0040951C                 mov     esi, ebx
.text:0040951E                 cmp     ecx, ecx
.text:00409520                 repe cmpsb
.text:00409522                 jnz     short loc_409540
.text:00409524                 mov     edx, [esp+4Ch+arg_4]
.text:00409528                 cmp     [esp+4Ch+var_34], edx
.text:0040952C                 jnb     short loc_40953A
.text:0040952E                 mov     ecx, [esp+4Ch+arg_0]
.text:00409532                 mov     eax, [esp+4Ch+var_34]
.text:00409536                 mov     byte ptr [eax+ecx], 5Ch ; '\'
.text:0040953A
.text:0040953A loc_40953A:                             ; CODE XREF: sub_409450+DC↑j
.text:0040953A                 inc     [esp+4Ch+var_34]
.text:0040953E                 mov     esi, esi
.text:00409540
.text:00409540 loc_409540:                             ; CODE XREF: sub_409450+AA↑j
.text:00409540                                         ; sub_409450+B2↑j ...
.text:00409540                 mov     edi, [esp+4Ch+Str]
.text:00409544                 movzx   ebx, byte ptr [ebp+edi+0]
.text:00409549                 movzx   eax, bl
.text:0040954C                 cmp     eax, 7Eh        ; switch 127 cases
.text:0040954F                 ja      def_409555      ; jumptable 00409555 default case, cases 1-6,14-31,64
.text:00409555                 jmp     ds:jpt_409555[eax*4] ; switch jump
.text:00409555 ; ---------------------------------------------------------------------------
.text:0040955C jpt_409555      dd offset loc_409758, offset def_409555, offset def_409555
.text:0040955C                                         ; DATA XREF: sub_409450+105↑r
.text:0040955C                 dd offset def_409555, offset def_409555, offset def_409555 ; jump table for switch statement
.text:0040955C                 dd offset def_409555, offset loc_409830, offset loc_40984E
.text:0040955C                 dd offset loc_409852, offset loc_409897, offset loc_40989B
.text:0040955C                 dd offset loc_40989F, offset loc_4098A3, offset def_409555
.text:0040955C                 dd offset def_409555, offset def_409555, offset def_409555
.text:0040955C                 dd offset def_409555, offset def_409555, offset def_409555
.text:0040955C                 dd offset def_409555, offset def_409555, offset def_409555
.text:0040955C                 dd offset def_409555, offset def_409555, offset def_409555
.text:0040955C                 dd offset def_409555, offset def_409555, offset def_409555
.text:0040955C                 dd offset def_409555, offset def_409555, offset loc_409D28
.text:0040955C                 dd offset loc_409D28, offset loc_409D28, offset loc_409D4A
.text:0040955C                 dd offset loc_409D28, offset def_409952, offset loc_409D28
.text:0040955C                 dd offset loc_4098A7, offset loc_409D28, offset loc_409D28
.text:0040955C                 dd offset loc_409D28, offset def_409952, offset def_409952
.text:0040955C                 dd offset def_409952, offset def_409952, offset def_409952
.text:0040955C                 dd offset def_409952, offset def_409952, offset def_409952
.text:0040955C                 dd offset def_409952, offset def_409952, offset def_409952
.text:0040955C                 dd offset def_409952, offset def_409952, offset def_409952
.text:0040955C                 dd offset def_409952, offset def_409952, offset loc_409D28
.text:0040955C                 dd offset loc_409D28, offset loc_409D28, offset loc_409D28
.text:0040955C                 dd offset loc_40990C, offset def_409555, offset def_409952
.text:0040955C                 dd offset def_409952, offset def_409952, offset def_409952
.text:0040955C                 dd offset def_409952, offset def_409952, offset def_409952
.text:0040955C                 dd offset def_409952, offset def_409952, offset def_409952
.text:0040955C                 dd offset def_409952, offset def_409952, offset def_409952
.text:0040955C                 dd offset def_409952, offset def_409952, offset def_409952
.text:0040955C                 dd offset def_409952, offset def_409952, offset def_409952
.text:0040955C                 dd offset def_409952, offset def_409952, offset def_409952
.text:0040955C                 dd offset def_409952, offset def_409952, offset def_409952
.text:0040955C                 dd offset def_409952, offset loc_409D28, offset loc_409D21
.text:0040955C                 dd offset def_409952, offset loc_409D28, offset def_409952
.text:0040955C                 dd offset loc_409D28, offset def_409952, offset def_409952
.text:0040955C                 dd offset def_409952, offset def_409952, offset def_409952
.text:0040955C                 dd offset def_409952, offset def_409952, offset def_409952
.text:0040955C                 dd offset def_409952, offset def_409952, offset def_409952
.text:0040955C                 dd offset def_409952, offset def_409952, offset def_409952
.text:0040955C                 dd offset def_409952, offset def_409952, offset def_409952
.text:0040955C                 dd offset def_409952, offset def_409952, offset def_409952
.text:0040955C                 dd offset def_409952, offset def_409952, offset def_409952
.text:0040955C                 dd offset def_409952, offset def_409952, offset def_409952
.text:0040955C                 dd offset loc_409D38, offset loc_409D28, offset loc_409D38
.text:0040955C                 dd offset loc_409D4A
.text:00409758 ; ---------------------------------------------------------------------------
.text:00409758
.text:00409758 loc_409758:                             ; CODE XREF: sub_409450+105↑j
.text:00409758                                         ; DATA XREF: sub_409450:jpt_409555↑o
.text:00409758                 cmp     [esp+4Ch+var_21], 0 ; jumptable 00409555 case 0
.text:0040975D                 lea     eax, [ebp+1]
.text:00409760                 jz      loc_409810
.text:00409766                 mov     esi, [esp+4Ch+arg_4]
.text:0040976A                 cmp     [esp+4Ch+var_34], esi
.text:0040976E                 jnb     short loc_40977C
.text:00409770                 mov     eax, [esp+4Ch+arg_0]
.text:00409774                 mov     ebx, [esp+4Ch+var_34]
.text:00409778                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:0040977C
.text:0040977C loc_40977C:                             ; CODE XREF: sub_409450+31E↑j
.text:0040977C                 inc     [esp+4Ch+var_34]
.text:00409780                 mov     edx, [esp+4Ch+arg_4]
.text:00409784                 cmp     [esp+4Ch+var_34], edx
.text:00409788                 jnb     short loc_409796
.text:0040978A                 mov     edi, [esp+4Ch+arg_0]
.text:0040978E                 mov     ecx, [esp+4Ch+var_34]
.text:00409792                 mov     byte ptr [ecx+edi], 30h ; '0'
.text:00409796
.text:00409796 loc_409796:                             ; CODE XREF: sub_409450+338↑j
.text:00409796                 inc     [esp+4Ch+var_34]
.text:0040979A                 mov     esi, [esp+4Ch+arg_4]
.text:0040979E                 cmp     [esp+4Ch+var_34], esi
.text:004097A2                 jnb     short loc_4097B0
.text:004097A4                 mov     ebx, [esp+4Ch+arg_0]
.text:004097A8                 mov     eax, [esp+4Ch+var_34]
.text:004097AC                 mov     byte ptr [eax+ebx], 30h ; '0'
.text:004097B0
.text:004097B0 loc_4097B0:                             ; CODE XREF: sub_409450+352↑j
.text:004097B0                 inc     [esp+4Ch+var_34]
.text:004097B4                 mov     bl, 30h ; '0'
.text:004097B6                 lea     esi, [esi+0]
.text:004097B9                 lea     edi, [edi+0]
.text:004097C0
.text:004097C0 def_409952:                             ; CODE XREF: sub_409450+105↑j
.text:004097C0                                         ; sub_409450+463↓j ...
.text:004097C0                 cmp     [esp+4Ch+var_21], 0 ; jumptable 00409555 cases 37,43-58,65-90,93,95,97-122
.text:004097C0                                         ; jumptable 00409952 default case, cases 34-38,42-44,46,48-59
.text:004097C5                 lea     eax, [ebp+1]
.text:004097C8                 jz      short loc_409810
.text:004097CA                 mov     cl, bl
.text:004097CC                 mov     edi, [esp+4Ch+arg_14]
.text:004097D0                 mov     esi, 1
.text:004097D5                 shr     cl, 5
.text:004097D8                 movzx   edx, cl
.text:004097DB                 mov     ecx, ebx
.text:004097DD                 and     ecx, 1Fh
.text:004097E0                 shl     esi, cl
.text:004097E2                 test    [edi+edx*4+4], esi
.text:004097E6                 jz      short loc_409802
.text:004097E8
.text:004097E8 loc_4097E8:                             ; CODE XREF: sub_409450+3FC↓j
.text:004097E8                 mov     edx, [esp+4Ch+arg_4]
.text:004097EC                 cmp     [esp+4Ch+var_34], edx
.text:004097F0                 jnb     short loc_4097FE
.text:004097F2                 mov     edi, [esp+4Ch+arg_0]
.text:004097F6                 mov     esi, [esp+4Ch+var_34]
.text:004097FA                 mov     byte ptr [esi+edi], 5Ch ; '\'
.text:004097FE
.text:004097FE loc_4097FE:                             ; CODE XREF: sub_409450+3A0↑j
.text:004097FE                 inc     [esp+4Ch+var_34]
.text:00409802
.text:00409802 loc_409802:                             ; CODE XREF: sub_409450+396↑j
.text:00409802                 lea     eax, [ebp+1]
.text:00409805                 lea     esi, [esi+0]
.text:00409809                 lea     edi, [edi+0]
.text:00409810
.text:00409810 loc_409810:                             ; CODE XREF: sub_409450+310↑j
.text:00409810                                         ; sub_409450+378↑j ...
.text:00409810                 mov     ebp, [esp+4Ch+arg_4]
.text:00409814                 cmp     [esp+4Ch+var_34], ebp
.text:00409818                 jnb     short loc_409825
.text:0040981A                 mov     edx, [esp+4Ch+arg_0]
.text:0040981E                 mov     ecx, [esp+4Ch+var_34]
.text:00409822                 mov     [ecx+edx], bl
.text:00409825
.text:00409825 loc_409825:                             ; CODE XREF: sub_409450+3C8↑j
.text:00409825                 inc     [esp+4Ch+var_34]
.text:00409829                 mov     ebp, eax
.text:0040982B                 jmp     loc_4094E0
.text:00409830 ; ---------------------------------------------------------------------------
.text:00409830
.text:00409830 loc_409830:                             ; CODE XREF: sub_409450+105↑j
.text:00409830                                         ; DATA XREF: sub_409450:jpt_409555↑o
.text:00409830                 mov     dl, 61h ; 'a'   ; jumptable 00409555 case 7
.text:00409832                 lea     esi, [esi+0]
.text:00409839                 lea     edi, [edi+0]
.text:00409840
.text:00409840 loc_409840:                             ; CODE XREF: sub_409450+400↓j
.text:00409840                                         ; sub_409450+409↓j ...
.text:00409840                 cmp     [esp+4Ch+var_21], 0
.text:00409845                 lea     eax, [ebp+1]
.text:00409848                 jz      short loc_409810
.text:0040984A                 mov     bl, dl
.text:0040984C                 jmp     short loc_4097E8
.text:0040984E ; ---------------------------------------------------------------------------
.text:0040984E
.text:0040984E loc_40984E:                             ; CODE XREF: sub_409450+105↑j
.text:0040984E                                         ; DATA XREF: sub_409450:jpt_409555↑o
.text:0040984E                 mov     dl, 62h ; 'b'   ; jumptable 00409555 case 8
.text:00409850                 jmp     short loc_409840
.text:00409852 ; ---------------------------------------------------------------------------
.text:00409852
.text:00409852 loc_409852:                             ; CODE XREF: sub_409450+105↑j
.text:00409852                                         ; DATA XREF: sub_409450:jpt_409555↑o
.text:00409852                 mov     dl, 74h ; 't'   ; jumptable 00409555 case 9
.text:00409854
.text:00409854 loc_409854:                             ; CODE XREF: sub_409450+449↓j
.text:00409854                                         ; sub_409450+455↓j ...
.text:00409854                 cmp     [esp+4Ch+arg_10], 1
.text:00409859                 jnz     short loc_409840
.text:0040985B
.text:0040985B loc_40985B:                             ; CODE XREF: sub_409450+45C↓j
.text:0040985B                                         ; sub_409450+4C1↓j ...
.text:0040985B                 mov     [esp+4Ch+var_3C], 2 ; jumptable 00409C22 cases 91,92,94,96,124
.text:00409863                 mov     eax, [esp+4Ch+arg_14]
.text:00409867                 mov     edx, [esp+4Ch+arg_C]
.text:0040986B                 mov     ecx, [esp+4Ch+Str]
.text:0040986F                 mov     ebx, [esp+4Ch+arg_4]
.text:00409873                 mov     [esp+4Ch+var_38], eax ; int
.text:00409877                 mov     ebp, [esp+4Ch+arg_0]
.text:0040987B                 mov     [esp+4Ch+State], edx ; int
.text:0040987F                 mov     [esp+4Ch+SizeInBytes], ecx ; Str
.text:00409883                 mov     [esp+4Ch+Type], ebx ; int
.text:00409887                 mov     [esp+4Ch+C], ebp ; int
.text:0040988A                 call    sub_409450
.text:0040988F
.text:0040988F loc_40988F:                             ; CODE XREF: sub_409450+972↓j
.text:0040988F                 add     esp, 3Ch
.text:00409892                 pop     ebx
.text:00409893                 pop     esi
.text:00409894                 pop     edi
.text:00409895                 pop     ebp
.text:00409896                 retn
.text:00409897 ; ---------------------------------------------------------------------------
.text:00409897
.text:00409897 loc_409897:                             ; CODE XREF: sub_409450+105↑j
.text:00409897                                         ; DATA XREF: sub_409450:jpt_409555↑o
.text:00409897                 mov     dl, 6Eh ; 'n'   ; jumptable 00409555 case 10
.text:00409899                 jmp     short loc_409854
.text:0040989B ; ---------------------------------------------------------------------------
.text:0040989B
.text:0040989B loc_40989B:                             ; CODE XREF: sub_409450+105↑j
.text:0040989B                                         ; DATA XREF: sub_409450:jpt_409555↑o
.text:0040989B                 mov     dl, 76h ; 'v'   ; jumptable 00409555 case 11
.text:0040989D                 jmp     short loc_409840
.text:0040989F ; ---------------------------------------------------------------------------
.text:0040989F
.text:0040989F loc_40989F:                             ; CODE XREF: sub_409450+105↑j
.text:0040989F                                         ; DATA XREF: sub_409450:jpt_409555↑o
.text:0040989F                 mov     dl, 66h ; 'f'   ; jumptable 00409555 case 12
.text:004098A1                 jmp     short loc_409840
.text:004098A3 ; ---------------------------------------------------------------------------
.text:004098A3
.text:004098A3 loc_4098A3:                             ; CODE XREF: sub_409450+105↑j
.text:004098A3                                         ; DATA XREF: sub_409450:jpt_409555↑o
.text:004098A3                 mov     dl, 72h ; 'r'   ; jumptable 00409555 case 13
.text:004098A5                 jmp     short loc_409854
.text:004098A7 ; ---------------------------------------------------------------------------
.text:004098A7
.text:004098A7 loc_4098A7:                             ; CODE XREF: sub_409450+105↑j
.text:004098A7                                         ; DATA XREF: sub_409450:jpt_409555↑o
.text:004098A7                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00409555 case 39
.text:004098AC                 jz      short loc_40985B ; jumptable 00409C22 cases 91,92,94,96,124
.text:004098AE                 cmp     [esp+4Ch+arg_10], 2
.text:004098B3                 jnz     def_409952      ; jumptable 00409555 cases 37,43-58,65-90,93,95,97-122
.text:004098B3                                         ; jumptable 00409952 default case, cases 34-38,42-44,46,48-59
.text:004098B9                 mov     edx, [esp+4Ch+arg_4]
.text:004098BD                 cmp     [esp+4Ch+var_34], edx
.text:004098C1                 jnb     short loc_4098CF
.text:004098C3                 mov     ecx, [esp+4Ch+arg_0]
.text:004098C7                 mov     edi, [esp+4Ch+var_34]
.text:004098CB                 mov     byte ptr [edi+ecx], 27h ; '''
.text:004098CF
.text:004098CF loc_4098CF:                             ; CODE XREF: sub_409450+471↑j
.text:004098CF                 inc     [esp+4Ch+var_34]
.text:004098D3                 mov     eax, [esp+4Ch+arg_4]
.text:004098D7                 cmp     [esp+4Ch+var_34], eax
.text:004098DB                 jnb     short loc_4098E9
.text:004098DD                 mov     esi, [esp+4Ch+arg_0]
.text:004098E1                 mov     edx, [esp+4Ch+var_34]
.text:004098E5                 mov     byte ptr [edx+esi], 5Ch ; '\'
.text:004098E9
.text:004098E9 loc_4098E9:                             ; CODE XREF: sub_409450+48B↑j
.text:004098E9                 inc     [esp+4Ch+var_34]
.text:004098ED                 mov     edi, [esp+4Ch+arg_4]
.text:004098F1                 cmp     [esp+4Ch+var_34], edi
.text:004098F5                 jnb     short loc_409903
.text:004098F7                 mov     ecx, [esp+4Ch+arg_0]
.text:004098FB                 mov     eax, [esp+4Ch+var_34]
.text:004098FF                 mov     byte ptr [eax+ecx], 27h ; '''
.text:00409903
.text:00409903 loc_409903:                             ; CODE XREF: sub_409450+4A5↑j
.text:00409903                                         ; sub_409450+5C4↓j ...
.text:00409903                 inc     [esp+4Ch+var_34]
.text:00409907                 jmp     def_409952      ; jumptable 00409555 cases 37,43-58,65-90,93,95,97-122
.text:00409907                                         ; jumptable 00409952 default case, cases 34-38,42-44,46,48-59
.text:0040990C ; ---------------------------------------------------------------------------
.text:0040990C
.text:0040990C loc_40990C:                             ; CODE XREF: sub_409450+105↑j
.text:0040990C                                         ; DATA XREF: sub_409450:jpt_409555↑o
.text:0040990C                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00409555 case 63
.text:00409911                 jz      loc_40985B      ; jumptable 00409C22 cases 91,92,94,96,124
.text:00409917                 cmp     [esp+4Ch+arg_10], 3
.text:0040991C                 jnz     def_409952      ; jumptable 00409555 cases 37,43-58,65-90,93,95,97-122
.text:0040991C                                         ; jumptable 00409952 default case, cases 34-38,42-44,46,48-59
.text:00409922                 lea     edx, [ebp+2]
.text:00409925                 cmp     edx, [esp+4Ch+arg_C]
.text:00409929                 jnb     def_409952      ; jumptable 00409555 cases 37,43-58,65-90,93,95,97-122
.text:00409929                                         ; jumptable 00409952 default case, cases 34-38,42-44,46,48-59
.text:0040992F                 mov     esi, [esp+4Ch+Str]
.text:00409933                 cmp     byte ptr [ebp+esi+1], 3Fh ; '?'
.text:00409938                 jnz     def_409952      ; jumptable 00409555 cases 37,43-58,65-90,93,95,97-122
.text:00409938                                         ; jumptable 00409952 default case, cases 34-38,42-44,46,48-59
.text:0040993E                 movzx   ecx, byte ptr [ebp+esi+2]
.text:00409943                 movsx   eax, cl
.text:00409946                 sub     eax, 21h ; '!'  ; switch 30 cases
.text:00409949                 cmp     eax, 1Dh
.text:0040994C                 ja      def_409952      ; jumptable 00409555 cases 37,43-58,65-90,93,95,97-122
.text:0040994C                                         ; jumptable 00409952 default case, cases 34-38,42-44,46,48-59
.text:00409952                 jmp     ds:jpt_409952[eax*4] ; switch jump
.text:00409952 ; ---------------------------------------------------------------------------
.text:00409959                 align 4
.text:0040995C jpt_409952      dd offset loc_4099D4    ; DATA XREF: sub_409450+502↑r
.text:0040995C                 dd offset def_409952    ; jump table for switch statement
.text:0040995C                 dd offset def_409952
.text:0040995C                 dd offset def_409952
.text:0040995C                 dd offset def_409952
.text:0040995C                 dd offset def_409952
.text:0040995C                 dd offset loc_4099D4
.text:0040995C                 dd offset loc_4099D4
.text:0040995C                 dd offset loc_4099D4
.text:0040995C                 dd offset def_409952
.text:0040995C                 dd offset def_409952
.text:0040995C                 dd offset def_409952
.text:0040995C                 dd offset loc_4099D4
.text:0040995C                 dd offset def_409952
.text:0040995C                 dd offset loc_4099D4
.text:0040995C                 dd offset def_409952
.text:0040995C                 dd offset def_409952
.text:0040995C                 dd offset def_409952
.text:0040995C                 dd offset def_409952
.text:0040995C                 dd offset def_409952
.text:0040995C                 dd offset def_409952
.text:0040995C                 dd offset def_409952
.text:0040995C                 dd offset def_409952
.text:0040995C                 dd offset def_409952
.text:0040995C                 dd offset def_409952
.text:0040995C                 dd offset def_409952
.text:0040995C                 dd offset def_409952
.text:0040995C                 dd offset loc_4099D4
.text:0040995C                 dd offset loc_4099D4
.text:0040995C                 dd offset loc_4099D4
.text:004099D4 ; ---------------------------------------------------------------------------
.text:004099D4
.text:004099D4 loc_4099D4:                             ; CODE XREF: sub_409450+502↑j
.text:004099D4                                         ; DATA XREF: sub_409450:jpt_409952↑o
.text:004099D4                 mov     ebp, edx        ; jumptable 00409952 cases 33,39-41,45,47,60-62
.text:004099D6                 mov     bl, cl
.text:004099D8                 mov     edx, [esp+4Ch+arg_4]
.text:004099DC                 cmp     [esp+4Ch+var_34], edx
.text:004099E0                 jnb     short loc_4099EE
.text:004099E2                 mov     ecx, [esp+4Ch+arg_0]
.text:004099E6                 mov     edi, [esp+4Ch+var_34]
.text:004099EA                 mov     byte ptr [edi+ecx], 3Fh ; '?'
.text:004099EE
.text:004099EE loc_4099EE:                             ; CODE XREF: sub_409450+590↑j
.text:004099EE                 inc     [esp+4Ch+var_34]
.text:004099F2                 mov     eax, [esp+4Ch+arg_4]
.text:004099F6                 cmp     [esp+4Ch+var_34], eax
.text:004099FA                 jnb     short loc_409A08
.text:004099FC                 mov     edx, [esp+4Ch+arg_0]
.text:00409A00                 mov     esi, [esp+4Ch+var_34]
.text:00409A04                 mov     byte ptr [esi+edx], 5Ch ; '\'
.text:00409A08
.text:00409A08 loc_409A08:                             ; CODE XREF: sub_409450+5AA↑j
.text:00409A08                 inc     [esp+4Ch+var_34]
.text:00409A0C                 mov     edi, [esp+4Ch+arg_4]
.text:00409A10                 cmp     [esp+4Ch+var_34], edi
.text:00409A14                 jnb     loc_409903
.text:00409A1A                 mov     eax, [esp+4Ch+arg_0]
.text:00409A1E                 mov     ecx, [esp+4Ch+var_34]
.text:00409A22                 mov     byte ptr [ecx+eax], 3Fh ; '?'
.text:00409A26                 jmp     loc_409903
.text:00409A26 ; ---------------------------------------------------------------------------
.text:00409A2B                 align 10h
.text:00409A30
.text:00409A30 def_409555:                             ; CODE XREF: sub_409450+FF↑j
.text:00409A30                                         ; sub_409450+105↑j
.text:00409A30                                         ; DATA XREF: ...
.text:00409A30                 cmp     [esp+4Ch+var_22], 0 ; jumptable 00409555 default case, cases 1-6,14-31,64
.text:00409A35                 jz      loc_409B60
.text:00409A3B                 mov     [esp+4Ch+var_28], 1
.text:00409A43                 mov     esi, ds:__mb_cur_max
.text:00409A49                 movzx   edx, bl
.text:00409A4C                 cmp     dword ptr [esi], 1
.text:00409A4F                 jz      loc_409B44
.text:00409A55                 mov     [esp+4Ch+Type], 157h ; Type
.text:00409A5D                 mov     [esp+4Ch+C], edx ; C
.text:00409A60                 call    _isctype
.text:00409A65
.text:00409A65 loc_409A65:                             ; CODE XREF: sub_409450+705↓j
.text:00409A65                 test    eax, eax
.text:00409A67                 setnz   [esp+4Ch+var_29]
.text:00409A6C
.text:00409A6C loc_409A6C:                             ; CODE XREF: sub_409450+7A5↓j
.text:00409A6C                 cmp     [esp+4Ch+var_21], 0
.text:00409A71                 lea     eax, [ebp+1]
.text:00409A74                 jz      loc_409810
.text:00409A7A                 cmp     [esp+4Ch+var_29], 0
.text:00409A7F                 jnz     def_409952      ; jumptable 00409555 cases 37,43-58,65-90,93,95,97-122
.text:00409A7F                                         ; jumptable 00409952 default case, cases 34-38,42-44,46,48-59
.text:00409A85
.text:00409A85 loc_409A85:                             ; CODE XREF: sub_409450+7AB↓j
.text:00409A85                 mov     eax, [esp+4Ch+var_28]
.text:00409A89                 lea     edx, [eax+ebp]
.text:00409A8C                 lea     esi, [esi+0]
.text:00409A90
.text:00409A90 loc_409A90:                             ; CODE XREF: sub_409450+6EF↓j
.text:00409A90                 cmp     [esp+4Ch+var_21], 0
.text:00409A95                 jz      short loc_409B10
.text:00409A97                 cmp     [esp+4Ch+var_29], 0
.text:00409A9C                 jnz     short loc_409B10
.text:00409A9E                 mov     edi, [esp+4Ch+arg_4]
.text:00409AA2                 cmp     [esp+4Ch+var_34], edi
.text:00409AA6                 jnb     short loc_409AB4
.text:00409AA8                 mov     esi, [esp+4Ch+arg_0]
.text:00409AAC                 mov     eax, [esp+4Ch+var_34]
.text:00409AB0                 mov     byte ptr [eax+esi], 5Ch ; '\'
.text:00409AB4
.text:00409AB4 loc_409AB4:                             ; CODE XREF: sub_409450+656↑j
.text:00409AB4                 inc     [esp+4Ch+var_34]
.text:00409AB8                 mov     ecx, [esp+4Ch+arg_4]
.text:00409ABC                 cmp     [esp+4Ch+var_34], ecx
.text:00409AC0                 jnb     short loc_409AD5
.text:00409AC2                 mov     cl, bl
.text:00409AC4                 mov     esi, [esp+4Ch+arg_0]
.text:00409AC8                 mov     edi, [esp+4Ch+var_34]
.text:00409ACC                 shr     cl, 6
.text:00409ACF                 add     cl, 30h ; '0'
.text:00409AD2                 mov     [edi+esi], cl
.text:00409AD5
.text:00409AD5 loc_409AD5:                             ; CODE XREF: sub_409450+670↑j
.text:00409AD5                 inc     [esp+4Ch+var_34]
.text:00409AD9                 mov     edi, [esp+4Ch+arg_4]
.text:00409ADD                 cmp     [esp+4Ch+var_34], edi
.text:00409AE1                 jnb     short loc_409AF9
.text:00409AE3                 mov     cl, bl
.text:00409AE5                 mov     esi, [esp+4Ch+arg_0]
.text:00409AE9                 shr     cl, 3
.text:00409AEC                 mov     edi, [esp+4Ch+var_34]
.text:00409AF0                 and     cl, 7
.text:00409AF3                 add     cl, 30h ; '0'
.text:00409AF6                 mov     [edi+esi], cl
.text:00409AF9
.text:00409AF9 loc_409AF9:                             ; CODE XREF: sub_409450+691↑j
.text:00409AF9                 inc     [esp+4Ch+var_34]
.text:00409AFD                 and     bl, 7
.text:00409B00                 add     bl, 30h ; '0'
.text:00409B03                 lea     esi, [esi+0]
.text:00409B09                 lea     edi, [edi+0]
.text:00409B10
.text:00409B10 loc_409B10:                             ; CODE XREF: sub_409450+645↑j
.text:00409B10                                         ; sub_409450+64C↑j
.text:00409B10                 lea     eax, [ebp+1]
.text:00409B13                 cmp     edx, eax
.text:00409B15                 jbe     loc_409810
.text:00409B1B                 mov     ebp, [esp+4Ch+arg_4]
.text:00409B1F                 cmp     [esp+4Ch+var_34], ebp
.text:00409B23                 jnb     short loc_409B30
.text:00409B25                 mov     ecx, [esp+4Ch+arg_0]
.text:00409B29                 mov     edi, [esp+4Ch+var_34]
.text:00409B2D                 mov     [edi+ecx], bl
.text:00409B30
.text:00409B30 loc_409B30:                             ; CODE XREF: sub_409450+6D3↑j
.text:00409B30                 inc     [esp+4Ch+var_34]
.text:00409B34                 mov     ebp, eax
.text:00409B36                 mov     eax, [esp+4Ch+Str]
.text:00409B3A                 movzx   ebx, byte ptr [ebp+eax+0]
.text:00409B3F                 jmp     loc_409A90
.text:00409B44 ; ---------------------------------------------------------------------------
.text:00409B44
.text:00409B44 loc_409B44:                             ; CODE XREF: sub_409450+5FF↑j
.text:00409B44                 mov     ecx, ds:_pctype
.text:00409B4A                 mov     edi, [ecx]
.text:00409B4C                 movzx   eax, word ptr [edi+edx*2]
.text:00409B50                 and     eax, 157h
.text:00409B55                 jmp     loc_409A65
.text:00409B55 ; ---------------------------------------------------------------------------
.text:00409B5A                 align 10h
.text:00409B60
.text:00409B60 loc_409B60:                             ; CODE XREF: sub_409450+5E5↑j
.text:00409B60                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00409B65                 mov     [esp+4Ch+var_18._Wchar], 0
.text:00409B6D                 mov     [esp+4Ch+var_28], 0
.text:00409B75                 mov     [esp+4Ch+var_29], 1
.text:00409B7A                 jz      loc_409D0C
.text:00409B80
.text:00409B80 loc_409B80:                             ; CODE XREF: sub_409450+8CC↓j
.text:00409B80                 mov     ecx, [esp+4Ch+arg_C]
.text:00409B84                 lea     edx, [esp+4Ch+var_18]
.text:00409B88                 mov     edi, [esp+4Ch+Str]
.text:00409B8C                 mov     [esp+4Ch+State], edx ; State
.text:00409B90                 lea     esi, [esp+4Ch+var_18._State]
.text:00409B94                 sub     ecx, ebp
.text:00409B96                 mov     [esp+4Ch+SizeInBytes], ecx ; SizeInBytes
.text:00409B9A                 add     edi, ebp
.text:00409B9C                 mov     [esp+4Ch+var_30], edi
.text:00409BA0                 mov     [esp+4Ch+Type], edi ; SrcCh
.text:00409BA4                 mov     [esp+4Ch+C], esi ; DstCh
.text:00409BA7                 call    mbrtowc
.text:00409BAC                 test    eax, eax
.text:00409BAE                 mov     edi, eax
.text:00409BB0                 jz      short loc_409BF0
.text:00409BB2                 cmp     eax, 0FFFFFFFFh
.text:00409BB5                 jz      loc_409D02
.text:00409BBB                 cmp     eax, 0FFFFFFFEh
.text:00409BBE                 jz      loc_409CC2
.text:00409BC4                 cmp     [esp+4Ch+arg_10], 1
.text:00409BC9                 jz      short loc_409C00
.text:00409BCB
.text:00409BCB loc_409BCB:                             ; CODE XREF: sub_409450+7B9↓j
.text:00409BCB                                         ; sub_409450+86D↓j
.text:00409BCB                 movzx   ecx, [esp+4Ch+var_18._State]
.text:00409BD0                 mov     [esp+4Ch+Type], 157h ; Type
.text:00409BD8                 mov     [esp+4Ch+C], ecx ; C
.text:00409BDB                 call    iswctype
.text:00409BE0                 test    eax, eax
.text:00409BE2                 jnz     short loc_409BE9
.text:00409BE4                 mov     [esp+4Ch+var_29], 0
.text:00409BE9
.text:00409BE9 loc_409BE9:                             ; CODE XREF: sub_409450+792↑j
.text:00409BE9                 mov     [esp+4Ch+var_28], edi
.text:00409BED                 lea     esi, [esi+0]
.text:00409BF0
.text:00409BF0 loc_409BF0:                             ; CODE XREF: sub_409450+760↑j
.text:00409BF0                                         ; sub_409450+87B↓j ...
.text:00409BF0                 cmp     [esp+4Ch+var_28], 1
.text:00409BF5                 jbe     loc_409A6C
.text:00409BFB                 jmp     loc_409A85
.text:00409C00 ; ---------------------------------------------------------------------------
.text:00409C00
.text:00409C00 loc_409C00:                             ; CODE XREF: sub_409450+779↑j
.text:00409C00                 cmp     [esp+4Ch+arg_10], eax
.text:00409C04                 mov     edx, 1
.text:00409C09                 jnb     short loc_409BCB
.text:00409C0B
.text:00409C0B loc_409C0B:                             ; CODE XREF: sub_409450+867↓j
.text:00409C0B                 mov     ecx, [esp+4Ch+Str]
.text:00409C0F                 lea     esi, [edx+ebp]
.text:00409C12                 movsx   eax, byte ptr [esi+ecx]
.text:00409C16                 sub     eax, 5Bh ; '['  ; switch 34 cases
.text:00409C19                 cmp     eax, 21h
.text:00409C1C                 ja      def_409C22      ; jumptable 00409C22 default case, cases 93,95,97-123
.text:00409C22                 jmp     ds:jpt_409C22[eax*4] ; switch jump
.text:00409C22 ; ---------------------------------------------------------------------------
.text:00409C29                 align 4
.text:00409C2C jpt_409C22      dd offset loc_40985B    ; DATA XREF: sub_409450+7D2↑r
.text:00409C2C                 dd offset loc_40985B    ; jump table for switch statement
.text:00409C2C                 dd offset def_409C22
.text:00409C2C                 dd offset loc_40985B
.text:00409C2C                 dd offset def_409C22
.text:00409C2C                 dd offset loc_40985B
.text:00409C2C                 dd offset def_409C22
.text:00409C2C                 dd offset def_409C22
.text:00409C2C                 dd offset def_409C22
.text:00409C2C                 dd offset def_409C22
.text:00409C2C                 dd offset def_409C22
.text:00409C2C                 dd offset def_409C22
.text:00409C2C                 dd offset def_409C22
.text:00409C2C                 dd offset def_409C22
.text:00409C2C                 dd offset def_409C22
.text:00409C2C                 dd offset def_409C22
.text:00409C2C                 dd offset def_409C22
.text:00409C2C                 dd offset def_409C22
.text:00409C2C                 dd offset def_409C22
.text:00409C2C                 dd offset def_409C22
.text:00409C2C                 dd offset def_409C22
.text:00409C2C                 dd offset def_409C22
.text:00409C2C                 dd offset def_409C22
.text:00409C2C                 dd offset def_409C22
.text:00409C2C                 dd offset def_409C22
.text:00409C2C                 dd offset def_409C22
.text:00409C2C                 dd offset def_409C22
.text:00409C2C                 dd offset def_409C22
.text:00409C2C                 dd offset def_409C22
.text:00409C2C                 dd offset def_409C22
.text:00409C2C                 dd offset def_409C22
.text:00409C2C                 dd offset def_409C22
.text:00409C2C                 dd offset def_409C22
.text:00409C2C                 dd offset loc_40985B
.text:00409CB4 ; ---------------------------------------------------------------------------
.text:00409CB4
.text:00409CB4 def_409C22:                             ; CODE XREF: sub_409450+7CC↑j
.text:00409CB4                                         ; sub_409450+7D2↑j
.text:00409CB4                                         ; DATA XREF: ...
.text:00409CB4                 inc     edx             ; jumptable 00409C22 default case, cases 93,95,97-123
.text:00409CB5                 cmp     edx, edi
.text:00409CB7                 jb      loc_409C0B
.text:00409CBD                 jmp     loc_409BCB
.text:00409CC2 ; ---------------------------------------------------------------------------
.text:00409CC2
.text:00409CC2 loc_409CC2:                             ; CODE XREF: sub_409450+76E↑j
.text:00409CC2                 cmp     ebp, [esp+4Ch+arg_C]
.text:00409CC6                 mov     [esp+4Ch+var_29], 0
.text:00409CCB                 jnb     loc_409BF0
.text:00409CD1                 mov     eax, [esp+4Ch+var_30]
.text:00409CD5                 cmp     byte ptr [eax], 0
.text:00409CD8                 jz      loc_409BF0
.text:00409CDE
.text:00409CDE loc_409CDE:                             ; CODE XREF: sub_409450+8AB↓j
.text:00409CDE                 inc     [esp+4Ch+var_28]
.text:00409CE2                 mov     esi, [esp+4Ch+var_28]
.text:00409CE6                 lea     eax, [esi+ebp]
.text:00409CE9                 cmp     eax, [esp+4Ch+arg_C]
.text:00409CED                 jnb     loc_409BF0
.text:00409CF3                 mov     edi, [esp+4Ch+Str]
.text:00409CF7                 cmp     byte ptr [eax+edi], 0
.text:00409CFB                 jnz     short loc_409CDE
.text:00409CFD                 jmp     loc_409BF0
.text:00409D02 ; ---------------------------------------------------------------------------
.text:00409D02
.text:00409D02 loc_409D02:                             ; CODE XREF: sub_409450+765↑j
.text:00409D02                 mov     [esp+4Ch+var_29], 0
.text:00409D07                 jmp     loc_409BF0
.text:00409D0C ; ---------------------------------------------------------------------------
.text:00409D0C
.text:00409D0C loc_409D0C:                             ; CODE XREF: sub_409450+72A↑j
.text:00409D0C                 mov     edx, [esp+4Ch+Str]
.text:00409D10                 mov     [esp+4Ch+C], edx ; Str
.text:00409D13                 call    strlen
.text:00409D18                 mov     [esp+4Ch+arg_C], eax
.text:00409D1C                 jmp     loc_409B80
.text:00409D21 ; ---------------------------------------------------------------------------
.text:00409D21
.text:00409D21 loc_409D21:                             ; CODE XREF: sub_409450+105↑j
.text:00409D21                                         ; DATA XREF: sub_409450:jpt_409555↑o
.text:00409D21                 mov     dl, bl          ; jumptable 00409555 case 92
.text:00409D23                 jmp     loc_409854
.text:00409D28 ; ---------------------------------------------------------------------------
.text:00409D28
.text:00409D28 loc_409D28:                             ; CODE XREF: sub_409450+105↑j
.text:00409D28                                         ; sub_409450+902↓j
.text:00409D28                                         ; DATA XREF: ...
.text:00409D28                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00409555 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:00409D2D                 jnz     def_409952      ; jumptable 00409555 cases 37,43-58,65-90,93,95,97-122
.text:00409D2D                                         ; jumptable 00409952 default case, cases 34-38,42-44,46,48-59
.text:00409D33                 jmp     loc_40985B      ; jumptable 00409C22 cases 91,92,94,96,124
.text:00409D38 ; ---------------------------------------------------------------------------
.text:00409D38
.text:00409D38 loc_409D38:                             ; CODE XREF: sub_409450+105↑j
.text:00409D38                                         ; DATA XREF: sub_409450:jpt_409555↑o
.text:00409D38                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh ; jumptable 00409555 cases 123,125
.text:00409D3D                 jz      short loc_409D54
.text:00409D3F                 cmp     [esp+4Ch+arg_C], 1
.text:00409D44
.text:00409D44 loc_409D44:                             ; CODE XREF: sub_409450+90C↓j
.text:00409D44                 jnz     def_409952      ; jumptable 00409555 cases 37,43-58,65-90,93,95,97-122
.text:00409D44                                         ; jumptable 00409952 default case, cases 34-38,42-44,46,48-59
.text:00409D4A
.text:00409D4A loc_409D4A:                             ; CODE XREF: sub_409450+105↑j
.text:00409D4A                                         ; DATA XREF: sub_409450:jpt_409555↑o
.text:00409D4A                 test    ebp, ebp        ; jumptable 00409555 cases 35,126
.text:00409D4C                 jnz     def_409952      ; jumptable 00409555 cases 37,43-58,65-90,93,95,97-122
.text:00409D4C                                         ; jumptable 00409952 default case, cases 34-38,42-44,46,48-59
.text:00409D52                 jmp     short loc_409D28 ; jumptable 00409555 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:00409D54 ; ---------------------------------------------------------------------------
.text:00409D54
.text:00409D54 loc_409D54:                             ; CODE XREF: sub_409450+8ED↑j
.text:00409D54                 mov     esi, [esp+4Ch+Str]
.text:00409D58                 cmp     byte ptr [esi+1], 0
.text:00409D5C                 jmp     short loc_409D44
.text:00409D5E ; ---------------------------------------------------------------------------
.text:00409D5E
.text:00409D5E loc_409D5E:                             ; CODE XREF: sub_409450:loc_4094EF↑j
.text:00409D5E                 test    ebp, ebp
.text:00409D60                 jnz     short loc_409D6D
.text:00409D62                 cmp     [esp+4Ch+arg_10], 1
.text:00409D67                 jz      loc_40985B      ; jumptable 00409C22 cases 91,92,94,96,124
.text:00409D6D
.text:00409D6D loc_409D6D:                             ; CODE XREF: sub_409450+910↑j
.text:00409D6D                 mov     esi, [esp+4Ch+var_1C]
.text:00409D71                 test    esi, esi
.text:00409D73                 jz      short loc_409DA8
.text:00409D75                 mov     edi, [esp+4Ch+var_1C]
.text:00409D79                 movzx   eax, byte ptr [edi]
.text:00409D7C                 test    al, al
.text:00409D7E                 jz      short loc_409DA8
.text:00409D80
.text:00409D80 loc_409D80:                             ; CODE XREF: sub_409450+956↓j
.text:00409D80                 mov     ebp, [esp+4Ch+arg_4]
.text:00409D84                 cmp     [esp+4Ch+var_34], ebp
.text:00409D88                 jnb     short loc_409D95
.text:00409D8A                 mov     ecx, [esp+4Ch+arg_0]
.text:00409D8E                 mov     ebx, [esp+4Ch+var_34]
.text:00409D92                 mov     [ebx+ecx], al
.text:00409D95
.text:00409D95 loc_409D95:                             ; CODE XREF: sub_409450+938↑j
.text:00409D95                 inc     [esp+4Ch+var_1C]
.text:00409D99                 inc     [esp+4Ch+var_34]
.text:00409D9D                 mov     edx, [esp+4Ch+var_1C]
.text:00409DA1                 movzx   eax, byte ptr [edx]
.text:00409DA4                 test    al, al
.text:00409DA6                 jnz     short loc_409D80
.text:00409DA8
.text:00409DA8 loc_409DA8:                             ; CODE XREF: sub_409450+923↑j
.text:00409DA8                                         ; sub_409450+92E↑j
.text:00409DA8                 mov     eax, [esp+4Ch+arg_4]
.text:00409DAC                 cmp     [esp+4Ch+var_34], eax
.text:00409DB0                 jnb     short loc_409DBE
.text:00409DB2                 mov     edi, [esp+4Ch+arg_0]
.text:00409DB6                 mov     esi, [esp+4Ch+var_34]
.text:00409DBA                 mov     byte ptr [esi+edi], 0
.text:00409DBE
.text:00409DBE loc_409DBE:                             ; CODE XREF: sub_409450+960↑j
.text:00409DBE                 mov     eax, [esp+4Ch+var_34]
.text:00409DC2                 jmp     loc_40988F
.text:00409DC7 ; ---------------------------------------------------------------------------
.text:00409DC7
.text:00409DC7 loc_409DC7:                             ; CODE XREF: sub_409450+95↑j
.text:00409DC7                 mov     ebx, [esp+4Ch+Str]
.text:00409DCB                 cmp     byte ptr [ebp+ebx+0], 0
.text:00409DD0                 jmp     loc_4094EF
.text:00409DD5 ; ---------------------------------------------------------------------------
.text:00409DD5
.text:00409DD5 loc_409DD5:                             ; CODE XREF: sub_409450+3D↑j
.text:00409DD5                                         ; DATA XREF: sub_409450:jpt_40948D↑o
.text:00409DD5                 mov     edx, [esp+4Ch+arg_4] ; jumptable 0040948D case 2
.text:00409DD9                 cmp     [esp+4Ch+var_34], edx
.text:00409DDD                 jnb     short loc_409DE6
.text:00409DDF                 mov     ecx, [esp+4Ch+arg_0]
.text:00409DE3                 mov     byte ptr [ecx], 27h ; '''
.text:00409DE6
.text:00409DE6 loc_409DE6:                             ; CODE XREF: sub_409450+98D↑j
.text:00409DE6                 mov     [esp+4Ch+var_34], 1
.text:00409DEE                 mov     [esp+4Ch+var_1C], 40943Eh
.text:00409DF6                 jmp     loc_4094D6
.text:00409DFB ; ---------------------------------------------------------------------------
.text:00409DFB
.text:00409DFB loc_409DFB:                             ; CODE XREF: sub_409450+3D↑j
.text:00409DFB                                         ; DATA XREF: sub_409450:jpt_40948D↑o
.text:00409DFB                 mov     [esp+4Ch+var_21], 1 ; jumptable 0040948D case 4
.text:00409E00                 jmp     def_40948D      ; jumptable 0040948D default case, cases 0,1
.text:00409E05 ; ---------------------------------------------------------------------------
.text:00409E05
.text:00409E05 loc_409E05:                             ; CODE XREF: sub_409450+3D↑j
.text:00409E05                                         ; DATA XREF: sub_409450:jpt_40948D↑o
.text:00409E05                 mov     [esp+4Ch+C], 409440h ; jumptable 0040948D cases 5,6
.text:00409E0C                 call    ds:libintl_gettext
.text:00409E12                 cmp     eax, 409440h
.text:00409E17                 mov     edi, eax
.text:00409E19                 jz      short loc_409E90
.text:00409E1B
.text:00409E1B loc_409E1B:                             ; CODE XREF: sub_409450+A45↓j
.text:00409E1B                                         ; sub_409450+A4C↓j
.text:00409E1B                 mov     [esp+4Ch+C], 40943Eh
.text:00409E22                 call    ds:libintl_gettext
.text:00409E28                 cmp     eax, 40943Eh
.text:00409E2D                 mov     edx, eax
.text:00409E2F                 jz      short loc_409E82
.text:00409E31
.text:00409E31 loc_409E31:                             ; CODE XREF: sub_409450+A37↓j
.text:00409E31                                         ; sub_409450+A3E↓j
.text:00409E31                 mov     [esp+4Ch+var_1C], edi
.text:00409E35                 cmp     byte ptr [edi], 0
.text:00409E38                 jz      short loc_409E68
.text:00409E3A
.text:00409E3A loc_409E3A:                             ; CODE XREF: sub_409450+A16↓j
.text:00409E3A                 mov     ecx, [esp+4Ch+arg_4]
.text:00409E3E                 cmp     [esp+4Ch+var_34], ecx
.text:00409E42                 jnb     short loc_409E57
.text:00409E44                 mov     ebp, [esp+4Ch+var_1C]
.text:00409E48                 mov     edi, [esp+4Ch+arg_0]
.text:00409E4C                 mov     esi, [esp+4Ch+var_34]
.text:00409E50                 movzx   ebx, byte ptr [ebp+0]
.text:00409E54                 mov     [esi+edi], bl
.text:00409E57
.text:00409E57 loc_409E57:                             ; CODE XREF: sub_409450+9F2↑j
.text:00409E57                 inc     [esp+4Ch+var_1C]
.text:00409E5B                 inc     [esp+4Ch+var_34]
.text:00409E5F                 mov     eax, [esp+4Ch+var_1C]
.text:00409E63                 cmp     byte ptr [eax], 0
.text:00409E66                 jnz     short loc_409E3A
.text:00409E68
.text:00409E68 loc_409E68:                             ; CODE XREF: sub_409450+9E8↑j
.text:00409E68                 mov     [esp+4Ch+var_21], 1
.text:00409E6D                 mov     [esp+4Ch+var_1C], edx
.text:00409E71                 mov     [esp+4Ch+C], edx ; Str
.text:00409E74                 call    strlen
.text:00409E79                 mov     [esp+4Ch+var_20], eax
.text:00409E7D                 jmp     def_40948D      ; jumptable 0040948D default case, cases 0,1
.text:00409E82 ; ---------------------------------------------------------------------------
.text:00409E82
.text:00409E82 loc_409E82:                             ; CODE XREF: sub_409450+9DF↑j
.text:00409E82                 cmp     [esp+4Ch+arg_10], 6
.text:00409E87                 jnz     short loc_409E31
.text:00409E89                 mov     edx, offset asc_40943C ; "\"'`"
.text:00409E8E                 jmp     short loc_409E31
.text:00409E90 ; ---------------------------------------------------------------------------
.text:00409E90
.text:00409E90 loc_409E90:                             ; CODE XREF: sub_409450+9C9↑j
.text:00409E90                 cmp     [esp+4Ch+arg_10], 6
.text:00409E95                 jnz     short loc_409E1B
.text:00409E97                 mov     edi, offset asc_40943C ; "\"'`"
.text:00409E9C                 jmp     loc_409E1B
.text:00409E9C sub_409450      endp
.text:00409E9C
.text:00409EA1 ; ---------------------------------------------------------------------------
.text:00409EA1                 jmp     short loc_409EB0
.text:00409EA1 ; ---------------------------------------------------------------------------
.text:00409EA3                 align 10h
.text:00409EB0
.text:00409EB0 loc_409EB0:                             ; CODE XREF: .text:00409EA1↑j
.text:00409EB0                 sub     esp, 0Ch
.text:00409EB3                 mov     [esp+4], ebx
.text:00409EB7                 mov     [esp+8], esi
.text:00409EBB                 call    _errno
.text:00409EC0                 mov     esi, [eax]
.text:00409EC2                 mov     dword ptr [esp], 24h ; '$'
.text:00409EC9                 call    sub_4081B0
.text:00409ECE                 mov     edx, [esp+10h]
.text:00409ED2                 mov     ebx, eax
.text:00409ED4                 test    edx, edx
.text:00409ED6                 jz      short loc_409F21
.text:00409ED8
.text:00409ED8 loc_409ED8:                             ; CODE XREF: .text:00409F26↓j
.text:00409ED8                 mov     ecx, [edx]
.text:00409EDA                 mov     [ebx], ecx
.text:00409EDC                 mov     ecx, [edx+4]
.text:00409EDF                 mov     [ebx+4], ecx
.text:00409EE2                 mov     ecx, [edx+8]
.text:00409EE5                 mov     [ebx+8], ecx
.text:00409EE8                 mov     ecx, [edx+0Ch]
.text:00409EEB                 mov     [ebx+0Ch], ecx
.text:00409EEE                 mov     ecx, [edx+10h]
.text:00409EF1                 mov     [ebx+10h], ecx
.text:00409EF4                 mov     ecx, [edx+14h]
.text:00409EF7                 mov     [ebx+14h], ecx
.text:00409EFA                 mov     ecx, [edx+18h]
.text:00409EFD                 mov     [ebx+18h], ecx
.text:00409F00                 mov     ecx, [edx+1Ch]
.text:00409F03                 mov     [ebx+1Ch], ecx
.text:00409F06                 mov     ecx, [edx+20h]
.text:00409F09                 mov     [ebx+20h], ecx
.text:00409F0C                 call    _errno
.text:00409F11                 mov     [eax], esi
.text:00409F13                 mov     esi, [esp+8]
.text:00409F17                 mov     eax, ebx
.text:00409F19                 mov     ebx, [esp+4]
.text:00409F1D                 add     esp, 0Ch
.text:00409F20                 retn
.text:00409F21 ; ---------------------------------------------------------------------------
.text:00409F21
.text:00409F21 loc_409F21:                             ; CODE XREF: .text:00409ED6↑j
.text:00409F21                 mov     edx, offset dword_41E4A0
.text:00409F26                 jmp     short loc_409ED8
.text:00409F26 ; ---------------------------------------------------------------------------
.text:00409F28                 align 10h
.text:00409F30                 mov     eax, [esp+4]
.text:00409F34                 test    eax, eax
.text:00409F36                 jz      short loc_409F40
.text:00409F38
.text:00409F38 loc_409F38:                             ; CODE XREF: .text:00409F45↓j
.text:00409F38                 mov     eax, [eax]
.text:00409F3A                 retn
.text:00409F3A ; ---------------------------------------------------------------------------
.text:00409F3B                 align 10h
.text:00409F40
.text:00409F40 loc_409F40:                             ; CODE XREF: .text:00409F36↑j
.text:00409F40                 mov     eax, offset dword_41E4A0
.text:00409F45                 jmp     short loc_409F38
.text:00409F45 ; ---------------------------------------------------------------------------
.text:00409F47                 align 10h
.text:00409F50                 mov     edx, [esp+4]
.text:00409F54                 test    edx, edx
.text:00409F56                 jz      short loc_409F60
.text:00409F58
.text:00409F58 loc_409F58:                             ; CODE XREF: .text:00409F65↓j
.text:00409F58                 mov     ecx, [esp+8]
.text:00409F5C                 mov     [edx], ecx
.text:00409F5E                 retn
.text:00409F5E ; ---------------------------------------------------------------------------
.text:00409F5F                 align 10h
.text:00409F60
.text:00409F60 loc_409F60:                             ; CODE XREF: .text:00409F56↑j
.text:00409F60                 mov     edx, offset dword_41E4A0
.text:00409F65                 jmp     short loc_409F58
.text:00409F65 ; ---------------------------------------------------------------------------
.text:00409F67                 align 10h
.text:00409F70                 sub     esp, 8
.text:00409F73                 mov     eax, [esp+0Ch]
.text:00409F77                 movzx   ecx, byte ptr [esp+10h]
.text:00409F7C                 mov     [esp], ebx
.text:00409F7F                 mov     ebx, [esp+14h]
.text:00409F83                 mov     [esp+4], esi
.text:00409F87                 mov     dl, cl
.text:00409F89                 shr     dl, 5
.text:00409F8C                 movzx   edx, dl
.text:00409F8F                 shl     edx, 2
.text:00409F92                 test    eax, eax
.text:00409F94                 lea     esi, [edx+eax+4]
.text:00409F98                 jz      short loc_409FC0
.text:00409F9A
.text:00409F9A loc_409F9A:                             ; CODE XREF: .text:00409FC6↓j
.text:00409F9A                 mov     edx, [esi]
.text:00409F9C                 and     ecx, 1Fh
.text:00409F9F                 and     ebx, 1
.text:00409FA2                 mov     eax, edx
.text:00409FA4                 shr     eax, cl
.text:00409FA6                 and     eax, 1
.text:00409FA9                 xor     ebx, eax
.text:00409FAB                 shl     ebx, cl
.text:00409FAD                 xor     edx, ebx
.text:00409FAF                 mov     [esi], edx
.text:00409FB1                 mov     ebx, [esp]
.text:00409FB4                 mov     esi, [esp+4]
.text:00409FB8                 add     esp, 8
.text:00409FBB                 retn
.text:00409FBB ; ---------------------------------------------------------------------------
.text:00409FBC                 align 10h
.text:00409FC0
.text:00409FC0 loc_409FC0:                             ; CODE XREF: .text:00409F98↑j
.text:00409FC0                 lea     esi, dword_41E4A4[edx]
.text:00409FC6                 jmp     short loc_409F9A
.text:00409FC6 ; ---------------------------------------------------------------------------
.text:00409FC8                 align 10h
.text:00409FD0                 sub     esp, 2Ch
.text:00409FD3                 mov     [esp+24h], ebx
.text:00409FD7                 mov     ebx, [esp+40h]
.text:00409FDB                 mov     [esp+28h], esi
.text:00409FDF                 test    ebx, ebx
.text:00409FE1                 jz      short loc_40A030
.text:00409FE3
.text:00409FE3 loc_409FE3:                             ; CODE XREF: .text:0040A035↓j
.text:00409FE3                 call    _errno
.text:00409FE8                 mov     esi, [eax]
.text:00409FEA                 mov     [esp+14h], ebx
.text:00409FEE                 mov     edx, [ebx]
.text:00409FF0                 mov     ecx, [esp+38h]
.text:00409FF4                 mov     ebx, [esp+3Ch]
.text:00409FF8                 mov     [esp+10h], edx
.text:00409FFC                 mov     edx, [esp+34h]
.text:0040A000                 mov     [esp+0Ch], ebx
.text:0040A004                 mov     [esp+8], ecx
.text:0040A008                 mov     [esp+4], edx
.text:0040A00C                 mov     edx, [esp+30h]
.text:0040A010                 mov     [esp], edx
.text:0040A013                 call    sub_409450
.text:0040A018                 mov     ebx, eax
.text:0040A01A                 call    _errno
.text:0040A01F                 mov     [eax], esi
.text:0040A021                 mov     esi, [esp+28h]
.text:0040A025                 mov     eax, ebx
.text:0040A027                 mov     ebx, [esp+24h]
.text:0040A02B                 add     esp, 2Ch
.text:0040A02E                 retn
.text:0040A02E ; ---------------------------------------------------------------------------
.text:0040A02F                 align 10h
.text:0040A030
.text:0040A030 loc_40A030:                             ; CODE XREF: .text:00409FE1↑j
.text:0040A030                 mov     ebx, offset dword_41E4A0
.text:0040A035                 jmp     short loc_409FE3
.text:0040A035 ; ---------------------------------------------------------------------------
.text:0040A037                 align 10h
.text:0040A040                 push    ebp
.text:0040A041                 push    edi
.text:0040A042                 push    esi
.text:0040A043                 push    ebx
.text:0040A044                 sub     esp, 2Ch
.text:0040A047                 mov     ebp, [esp+48h]
.text:0040A04B                 call    _errno
.text:0040A050                 mov     edx, [eax]
.text:0040A052                 test    ebp, ebp
.text:0040A054                 mov     ebx, ebp
.text:0040A056                 mov     [esp+28h], edx
.text:0040A05A                 jz      loc_40A110
.text:0040A060
.text:0040A060 loc_40A060:                             ; CODE XREF: .text:0040A115↓j
.text:0040A060                 call    _errno
.text:0040A065                 mov     edi, [eax]
.text:0040A067                 mov     esi, ebp
.text:0040A069                 mov     [esp+14h], ebx
.text:0040A06D                 mov     ecx, [ebx]
.text:0040A06F                 mov     dword ptr [esp], 0
.text:0040A076                 mov     edx, [esp+44h]
.text:0040A07A                 mov     dword ptr [esp+4], 0
.text:0040A082                 mov     eax, [esp+40h]
.text:0040A086                 mov     [esp+10h], ecx
.text:0040A08A                 mov     [esp+0Ch], edx
.text:0040A08E                 mov     [esp+8], eax
.text:0040A092                 call    sub_409450
.text:0040A097                 mov     ebx, eax
.text:0040A099                 call    _errno
.text:0040A09E                 mov     [eax], edi
.text:0040A0A0                 lea     edi, [ebx+1]
.text:0040A0A3                 mov     [esp], edi
.text:0040A0A6                 call    sub_4081B0
.text:0040A0AB                 mov     [esp+24h], eax
.text:0040A0AF                 test    ebp, ebp
.text:0040A0B1                 jz      short loc_40A102
.text:0040A0B3
.text:0040A0B3 loc_40A0B3:                             ; CODE XREF: .text:0040A107↓j
.text:0040A0B3                 call    _errno
.text:0040A0B8                 mov     ebp, [eax]
.text:0040A0BA                 mov     [esp+14h], esi
.text:0040A0BE                 mov     ecx, [esi]
.text:0040A0C0                 mov     [esp+4], edi
.text:0040A0C4                 mov     edx, [esp+44h]
.text:0040A0C8                 mov     esi, [esp+24h]
.text:0040A0CC                 mov     [esp+10h], ecx
.text:0040A0D0                 mov     eax, [esp+40h]
.text:0040A0D4                 mov     [esp+0Ch], edx
.text:0040A0D8                 mov     [esp], esi
.text:0040A0DB                 mov     [esp+8], eax
.text:0040A0DF                 call    sub_409450
.text:0040A0E4                 call    _errno
.text:0040A0E9                 mov     [eax], ebp
.text:0040A0EB                 call    _errno
.text:0040A0F0                 mov     ebx, [esp+28h]
.text:0040A0F4                 mov     [eax], ebx
.text:0040A0F6                 mov     eax, [esp+24h]
.text:0040A0FA                 add     esp, 2Ch
.text:0040A0FD                 pop     ebx
.text:0040A0FE                 pop     esi
.text:0040A0FF                 pop     edi
.text:0040A100                 pop     ebp
.text:0040A101                 retn
.text:0040A102 ; ---------------------------------------------------------------------------
.text:0040A102
.text:0040A102 loc_40A102:                             ; CODE XREF: .text:0040A0B1↑j
.text:0040A102                 mov     esi, offset dword_41E4A0
.text:0040A107                 jmp     short loc_40A0B3
.text:0040A107 ; ---------------------------------------------------------------------------
.text:0040A109                 align 10h
.text:0040A110
.text:0040A110 loc_40A110:                             ; CODE XREF: .text:0040A05A↑j
.text:0040A110                 mov     ebx, offset dword_41E4A0
.text:0040A115                 jmp     loc_40A060
.text:0040A115 ; ---------------------------------------------------------------------------
.text:0040A11A                 align 10h
.text:0040A120                 sub     esp, 1Ch
.text:0040A123                 mov     edx, [esp+24h]
.text:0040A127                 mov     dword ptr [esp+0Ch], offset dword_41E4A0
.text:0040A12F                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:0040A137                 mov     [esp+4], edx
.text:0040A13B                 mov     edx, [esp+20h]
.text:0040A13F                 mov     [esp], edx
.text:0040A142                 call    sub_40A590
.text:0040A147                 add     esp, 1Ch
.text:0040A14A                 retn
.text:0040A14A ; ---------------------------------------------------------------------------
.text:0040A14B                 align 10h
.text:0040A150                 sub     esp, 1Ch
.text:0040A153                 mov     edx, [esp+20h]
.text:0040A157                 mov     dword ptr [esp+0Ch], offset dword_41E4A0
.text:0040A15F                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:0040A167                 mov     [esp+4], edx
.text:0040A16B                 mov     dword ptr [esp], 0
.text:0040A172                 call    sub_40A590
.text:0040A177                 add     esp, 1Ch
.text:0040A17A                 retn
.text:0040A17A ; ---------------------------------------------------------------------------
.text:0040A17B                 align 10h
.text:0040A180                 push    ebp
.text:0040A181                 xor     eax, eax
.text:0040A183                 mov     ecx, 8
.text:0040A188                 push    edi
.text:0040A189                 push    esi
.text:0040A18A                 push    ebx
.text:0040A18B                 sub     esp, 0ACh
.text:0040A191                 mov     ebp, [esp+0C4h]
.text:0040A198                 cld
.text:0040A199                 lea     edi, [esp+14h]
.text:0040A19D                 mov     [esp+10h], ebp
.text:0040A1A1                 rep stosd
.text:0040A1A3                 mov     eax, [esp+30h]
.text:0040A1A7                 mov     edi, [esp+10h]
.text:0040A1AB                 mov     esi, [esp+14h]
.text:0040A1AF                 mov     [esp+60h], eax
.text:0040A1B3                 mov     ebp, [esp+18h]
.text:0040A1B7                 mov     eax, [esp+10h]
.text:0040A1BB                 mov     [esp+40h], edi
.text:0040A1BF                 mov     ecx, [esp+28h]
.text:0040A1C3                 mov     edi, [esp+1Ch]
.text:0040A1C7                 mov     [esp+44h], esi
.text:0040A1CB                 mov     edx, [esp+2Ch]
.text:0040A1CF                 mov     esi, [esp+20h]
.text:0040A1D3                 mov     [esp+70h], eax
.text:0040A1D7                 mov     ebx, [esp+24h]
.text:0040A1DB                 mov     eax, [esp+14h]
.text:0040A1DF                 mov     [esp+48h], ebp
.text:0040A1E3                 mov     [esp+4Ch], edi
.text:0040A1E7                 mov     [esp+50h], esi
.text:0040A1EB                 mov     [esp+54h], ebx
.text:0040A1EF                 mov     [esp+58h], ecx
.text:0040A1F3                 mov     [esp+5Ch], edx
.text:0040A1F7                 mov     [esp+74h], eax
.text:0040A1FB                 mov     [esp+78h], ebp
.text:0040A1FF                 mov     [esp+7Ch], edi
.text:0040A203                 mov     [esp+80h], esi
.text:0040A20A                 mov     [esp+84h], ebx
.text:0040A211                 mov     ebx, [esp+30h]
.text:0040A215                 mov     [esp+8Ch], edx
.text:0040A21C                 mov     edx, [esp+0C8h]
.text:0040A223                 mov     [esp+88h], ecx
.text:0040A22A                 lea     ecx, [esp+70h]
.text:0040A22E                 mov     [esp+4], edx
.text:0040A232                 mov     edx, [esp+0C0h]
.text:0040A239                 mov     [esp+90h], ebx
.text:0040A240                 mov     [esp+0Ch], ecx
.text:0040A244                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:0040A24C                 mov     [esp], edx
.text:0040A24F                 call    sub_40A590
.text:0040A254                 add     esp, 0ACh
.text:0040A25A                 pop     ebx
.text:0040A25B                 pop     esi
.text:0040A25C                 pop     edi
.text:0040A25D                 pop     ebp
.text:0040A25E                 retn
.text:0040A25E ; ---------------------------------------------------------------------------
.text:0040A25F                 align 10h
.text:0040A260                 push    ebp
.text:0040A261                 xor     eax, eax
.text:0040A263                 mov     ecx, 8
.text:0040A268                 push    edi
.text:0040A269                 push    esi
.text:0040A26A                 push    ebx
.text:0040A26B                 sub     esp, 0ACh
.text:0040A271                 mov     edx, [esp+0C4h]
.text:0040A278                 cld
.text:0040A279                 lea     edi, [esp+14h]
.text:0040A27D                 mov     [esp+10h], edx
.text:0040A281                 rep stosd
.text:0040A283                 mov     eax, [esp+30h]
.text:0040A287                 mov     ebp, [esp+10h]
.text:0040A28B                 mov     edi, [esp+14h]
.text:0040A28F                 mov     [esp+60h], eax
.text:0040A293                 mov     esi, [esp+20h]
.text:0040A297                 mov     eax, [esp+10h]
.text:0040A29B                 mov     [esp+40h], ebp
.text:0040A29F                 mov     ecx, [esp+28h]
.text:0040A2A3                 mov     ebp, [esp+18h]
.text:0040A2A7                 mov     [esp+44h], edi
.text:0040A2AB                 mov     edx, [esp+2Ch]
.text:0040A2AF                 mov     edi, [esp+1Ch]
.text:0040A2B3                 mov     [esp+70h], eax
.text:0040A2B7                 mov     ebx, [esp+24h]
.text:0040A2BB                 mov     eax, [esp+14h]
.text:0040A2BF                 mov     [esp+48h], ebp
.text:0040A2C3                 mov     [esp+4Ch], edi
.text:0040A2C7                 mov     [esp+50h], esi
.text:0040A2CB                 mov     [esp+54h], ebx
.text:0040A2CF                 mov     [esp+58h], ecx
.text:0040A2D3                 mov     [esp+5Ch], edx
.text:0040A2D7                 mov     [esp+74h], eax
.text:0040A2DB                 mov     [esp+78h], ebp
.text:0040A2DF                 mov     [esp+7Ch], edi
.text:0040A2E3                 mov     [esp+80h], esi
.text:0040A2EA                 mov     [esp+84h], ebx
.text:0040A2F1                 mov     esi, [esp+30h]
.text:0040A2F5                 lea     ebx, [esp+70h]
.text:0040A2F9                 mov     [esp+8Ch], edx
.text:0040A300                 mov     edx, [esp+0C8h]
.text:0040A307                 mov     [esp+88h], ecx
.text:0040A30E                 mov     ecx, [esp+0CCh]
.text:0040A315                 mov     [esp+4], edx
.text:0040A319                 mov     edx, [esp+0C0h]
.text:0040A320                 mov     [esp+90h], esi
.text:0040A327                 mov     [esp+0Ch], ebx
.text:0040A32B                 mov     [esp+8], ecx
.text:0040A32F                 mov     [esp], edx
.text:0040A332                 call    sub_40A590
.text:0040A337                 add     esp, 0ACh
.text:0040A33D                 pop     ebx
.text:0040A33E                 pop     esi
.text:0040A33F                 pop     edi
.text:0040A340                 pop     ebp
.text:0040A341                 retn
.text:0040A341 ; ---------------------------------------------------------------------------
.text:0040A342                 align 10h
.text:0040A350                 push    ebp
.text:0040A351                 xor     eax, eax
.text:0040A353                 mov     ecx, 8
.text:0040A358                 push    edi
.text:0040A359                 push    esi
.text:0040A35A                 push    ebx
.text:0040A35B                 sub     esp, 0ACh
.text:0040A361                 mov     edi, [esp+0C0h]
.text:0040A368                 cld
.text:0040A369                 mov     [esp+10h], edi
.text:0040A36D                 lea     edi, [esp+14h]
.text:0040A371                 rep stosd
.text:0040A373                 mov     eax, [esp+30h]
.text:0040A377                 mov     esi, [esp+10h]
.text:0040A37B                 mov     ebx, [esp+14h]
.text:0040A37F                 mov     [esp+60h], eax
.text:0040A383                 mov     ebp, [esp+18h]
.text:0040A387                 mov     eax, [esp+10h]
.text:0040A38B                 mov     [esp+40h], esi
.text:0040A38F                 mov     edi, [esp+1Ch]
.text:0040A393                 mov     esi, [esp+20h]
.text:0040A397                 mov     [esp+44h], ebx
.text:0040A39B                 mov     ecx, [esp+28h]
.text:0040A39F                 mov     edx, [esp+2Ch]
.text:0040A3A3                 mov     [esp+70h], eax
.text:0040A3A7                 mov     ebx, [esp+24h]
.text:0040A3AB                 mov     eax, [esp+14h]
.text:0040A3AF                 mov     [esp+48h], ebp
.text:0040A3B3                 mov     [esp+4Ch], edi
.text:0040A3B7                 mov     [esp+50h], esi
.text:0040A3BB                 mov     [esp+54h], ebx
.text:0040A3BF                 mov     [esp+58h], ecx
.text:0040A3C3                 mov     [esp+5Ch], edx
.text:0040A3C7                 mov     [esp+74h], eax
.text:0040A3CB                 mov     [esp+78h], ebp
.text:0040A3CF                 mov     [esp+7Ch], edi
.text:0040A3D3                 mov     [esp+80h], esi
.text:0040A3DA                 mov     [esp+84h], ebx
.text:0040A3E1                 mov     [esp+8Ch], edx
.text:0040A3E8                 lea     edx, [esp+70h]
.text:0040A3EC                 mov     [esp+88h], ecx
.text:0040A3F3                 mov     ecx, [esp+30h]
.text:0040A3F7                 mov     [esp+0Ch], edx
.text:0040A3FB                 mov     edx, [esp+0C4h]
.text:0040A402                 mov     [esp+90h], ecx
.text:0040A409                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:0040A411                 mov     [esp+4], edx
.text:0040A415                 mov     dword ptr [esp], 0
.text:0040A41C                 call    sub_40A590
.text:0040A421                 add     esp, 0ACh
.text:0040A427                 pop     ebx
.text:0040A428                 pop     esi
.text:0040A429                 pop     edi
.text:0040A42A                 pop     ebp
.text:0040A42B                 retn
.text:0040A42B ; ---------------------------------------------------------------------------
.text:0040A42C                 align 10h
.text:0040A430                 push    edi
.text:0040A431                 push    esi
.text:0040A432                 push    ebx
.text:0040A433                 sub     esp, 40h
.text:0040A436                 mov     edx, ds:dword_41E4AC
.text:0040A43C                 mov     ebx, ds:dword_41E4A0
.text:0040A442                 mov     esi, ds:dword_41E4A8
.text:0040A448                 mov     edi, ds:dword_41E4A4
.text:0040A44E                 mov     [esp+1Ch], edx
.text:0040A452                 mov     ecx, ds:dword_41E4B0
.text:0040A458                 mov     edx, ds:dword_41E4C0
.text:0040A45E                 mov     [esp+10h], ebx
.text:0040A462                 mov     ebx, ds:dword_41E4B4
.text:0040A468                 mov     [esp+30h], edx
.text:0040A46C                 movzx   edx, byte ptr [esp+54h]
.text:0040A471                 mov     [esp+18h], esi
.text:0040A475                 mov     esi, ds:dword_41E4BC
.text:0040A47B                 mov     [esp+14h], edi
.text:0040A47F                 mov     edi, ds:dword_41E4B8
.text:0040A485                 mov     [esp+20h], ecx
.text:0040A489                 mov     cl, dl
.text:0040A48B                 shr     cl, 5
.text:0040A48E                 mov     [esp+24h], ebx
.text:0040A492                 movzx   ebx, cl
.text:0040A495                 mov     [esp+2Ch], esi
.text:0040A499                 lea     esi, [esp+10h]
.text:0040A49D                 mov     [esp+28h], edi
.text:0040A4A1                 lea     edi, [esi+ebx*4]
.text:0040A4A4                 mov     ebx, edx
.text:0040A4A6                 mov     edx, [edi+4]
.text:0040A4A9                 and     ebx, 1Fh
.text:0040A4AC                 mov     cl, bl
.text:0040A4AE                 mov     eax, edx
.text:0040A4B0                 shr     eax, cl
.text:0040A4B2                 and     eax, 1
.text:0040A4B5                 xor     eax, 1
.text:0040A4B8                 shl     eax, cl
.text:0040A4BA                 xor     edx, eax
.text:0040A4BC                 mov     [edi+4], edx
.text:0040A4BF                 mov     edx, [esp+50h]
.text:0040A4C3                 mov     [esp+0Ch], esi
.text:0040A4C7                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:0040A4CF                 mov     [esp+4], edx
.text:0040A4D3                 mov     dword ptr [esp], 0
.text:0040A4DA                 call    sub_40A590
.text:0040A4DF                 add     esp, 40h
.text:0040A4E2                 pop     ebx
.text:0040A4E3                 pop     esi
.text:0040A4E4                 pop     edi
.text:0040A4E5                 retn
.text:0040A4E5 ; ---------------------------------------------------------------------------
.text:0040A4E6                 align 10h
.text:0040A4F0
.text:0040A4F0 ; =============== S U B R O U T I N E =======================================
.text:0040A4F0
.text:0040A4F0
.text:0040A4F0 ; int __cdecl sub_40A4F0(char *)
.text:0040A4F0 sub_40A4F0      proc near               ; CODE XREF: sub_409210+64↑p
.text:0040A4F0
.text:0040A4F0 var_4C          = dword ptr -4Ch
.text:0040A4F0 var_48          = dword ptr -48h
.text:0040A4F0 var_44          = dword ptr -44h
.text:0040A4F0 var_40          = dword ptr -40h
.text:0040A4F0 var_3C          = dword ptr -3Ch
.text:0040A4F0 var_38          = dword ptr -38h
.text:0040A4F0 var_34          = dword ptr -34h
.text:0040A4F0 var_30          = dword ptr -30h
.text:0040A4F0 var_2C          = dword ptr -2Ch
.text:0040A4F0 var_28          = dword ptr -28h
.text:0040A4F0 var_24          = dword ptr -24h
.text:0040A4F0 var_20          = dword ptr -20h
.text:0040A4F0 var_1C          = dword ptr -1Ch
.text:0040A4F0 arg_0           = dword ptr  4
.text:0040A4F0
.text:0040A4F0                 sub     esp, 4Ch
.text:0040A4F3                 mov     ecx, ds:dword_41E4A0
.text:0040A4F9                 mov     [esp+4Ch+var_44], 0FFFFFFFFh ; int
.text:0040A501                 mov     edx, ds:dword_41E4A4
.text:0040A507                 mov     [esp+4Ch+var_4C], 0 ; int
.text:0040A50E                 mov     [esp+4Ch+var_3C], ecx
.text:0040A512                 mov     ecx, ds:dword_41E4AC
.text:0040A518                 mov     [esp+4Ch+var_38], edx
.text:0040A51C                 mov     edx, ds:dword_41E4A8
.text:0040A522                 mov     [esp+4Ch+var_30], ecx
.text:0040A526                 mov     ecx, ds:dword_41E4B0
.text:0040A52C                 mov     eax, edx
.text:0040A52E                 shr     eax, 1Ah
.text:0040A531                 and     eax, 1
.text:0040A534                 xor     eax, 1
.text:0040A537                 mov     [esp+4Ch+var_2C], ecx
.text:0040A53B                 shl     eax, 1Ah
.text:0040A53E                 mov     ecx, ds:dword_41E4B4
.text:0040A544                 xor     edx, eax
.text:0040A546                 mov     [esp+4Ch+var_34], edx
.text:0040A54A                 mov     edx, [esp+4Ch+arg_0]
.text:0040A54E                 mov     [esp+4Ch+var_28], ecx
.text:0040A552                 mov     ecx, ds:dword_41E4B8
.text:0040A558                 mov     [esp+4Ch+var_48], edx ; char *
.text:0040A55C                 mov     [esp+4Ch+var_24], ecx
.text:0040A560                 mov     ecx, ds:dword_41E4BC
.text:0040A566                 mov     [esp+4Ch+var_20], ecx
.text:0040A56A                 mov     ecx, ds:dword_41E4C0
.text:0040A570                 mov     [esp+4Ch+var_1C], ecx
.text:0040A574                 lea     ecx, [esp+4Ch+var_3C]
.text:0040A578                 mov     [esp+4Ch+var_40], ecx ; int
.text:0040A57C                 call    sub_40A590
.text:0040A581                 add     esp, 4Ch
.text:0040A584                 retn
.text:0040A584 sub_40A4F0      endp
.text:0040A584
.text:0040A584 ; ---------------------------------------------------------------------------
.text:0040A585                 align 10h
.text:0040A590
.text:0040A590 ; =============== S U B R O U T I N E =======================================
.text:0040A590
.text:0040A590
.text:0040A590 ; int __cdecl sub_40A590(int, char *, int, int)
.text:0040A590 sub_40A590      proc near               ; CODE XREF: .text:0040A142↑p
.text:0040A590                                         ; .text:0040A172↑p ...
.text:0040A590
.text:0040A590 Block           = dword ptr -2Ch
.text:0040A590 var_28          = dword ptr -28h
.text:0040A590 Str             = dword ptr -24h
.text:0040A590 var_20          = dword ptr -20h
.text:0040A590 var_1C          = dword ptr -1Ch
.text:0040A590 var_18          = dword ptr -18h
.text:0040A590 var_14          = dword ptr -14h
.text:0040A590 arg_0           = dword ptr  4
.text:0040A590 arg_4           = dword ptr  8
.text:0040A590 arg_8           = dword ptr  0Ch
.text:0040A590 arg_C           = dword ptr  10h
.text:0040A590
.text:0040A590                 push    ebp
.text:0040A591                 push    edi
.text:0040A592                 push    esi
.text:0040A593                 push    ebx
.text:0040A594                 sub     esp, 1Ch
.text:0040A597                 call    _errno
.text:0040A59C                 mov     edx, [eax]
.text:0040A59E                 mov     eax, [esp+2Ch+arg_0]
.text:0040A5A2                 mov     [esp+2Ch+var_14], edx
.text:0040A5A6                 test    eax, eax
.text:0040A5A8                 js      loc_40A74A
.text:0040A5AE                 mov     eax, [esp+2Ch+arg_0]
.text:0040A5B2                 cmp     dword_41D090, eax
.text:0040A5B8                 ja      short loc_40A630
.text:0040A5BA                 mov     esi, eax
.text:0040A5BC                 inc     esi
.text:0040A5BD                 cmp     esi, 1FFFFFFFh
.text:0040A5C3                 ja      loc_40A74F
.text:0040A5C9                 mov     ebx, off_41D09C
.text:0040A5CF                 cmp     ebx, offset dword_41D094
.text:0040A5D5                 jz      loc_40A721
.text:0040A5DB
.text:0040A5DB loc_40A5DB:                             ; CODE XREF: sub_40A590+1B5↓j
.text:0040A5DB                 mov     [esp+2Ch+Block], ebx ; void *
.text:0040A5DE                 lea     ecx, ds:0[esi*8]
.text:0040A5E5                 mov     ebp, esi
.text:0040A5E7                 mov     [esp+2Ch+var_28], ecx ; size_t
.text:0040A5EB                 call    sub_408240
.text:0040A5F0                 mov     off_41D09C, eax
.text:0040A5F5                 mov     ebx, dword_41D090
.text:0040A5FB                 sub     ebp, ebx
.text:0040A5FD                 lea     edi, [eax+ebx*8]
.text:0040A600                 lea     eax, ds:0[ebp*8]
.text:0040A607                 cmp     eax, 7
.text:0040A60A                 jbe     short loc_40A620
.text:0040A60C                 test    edi, 4
.text:0040A612                 jz      short loc_40A620
.text:0040A614                 mov     dword ptr [edi], 0
.text:0040A61A                 sub     eax, 4
.text:0040A61D                 add     edi, 4
.text:0040A620
.text:0040A620 loc_40A620:                             ; CODE XREF: sub_40A590+7A↑j
.text:0040A620                                         ; sub_40A590+82↑j
.text:0040A620                 cld
.text:0040A621                 mov     ecx, eax
.text:0040A623                 shr     ecx, 2
.text:0040A626                 xor     eax, eax
.text:0040A628                 rep stosd
.text:0040A62A                 mov     dword_41D090, esi
.text:0040A630
.text:0040A630 loc_40A630:                             ; CODE XREF: sub_40A590+28↑j
.text:0040A630                 mov     esi, off_41D09C
.text:0040A636                 mov     eax, [esp+2Ch+arg_0]
.text:0040A63A                 mov     ebp, [esi+eax*8]
.text:0040A63D                 mov     edi, [esi+eax*8+4]
.text:0040A641                 mov     esi, [esp+2Ch+arg_C]
.text:0040A645                 test    esi, esi
.text:0040A647                 jz      loc_40A717
.text:0040A64D
.text:0040A64D loc_40A64D:                             ; CODE XREF: sub_40A590+18C↓j
.text:0040A64D                 call    _errno
.text:0040A652                 mov     ebx, [eax]
.text:0040A654                 mov     [esp+2Ch+var_18], esi ; int
.text:0040A658                 mov     ecx, [esi]
.text:0040A65A                 mov     [esp+2Ch+Block], edi ; int
.text:0040A65D                 mov     edx, [esp+2Ch+arg_8]
.text:0040A661                 mov     [esp+2Ch+var_28], ebp ; int
.text:0040A665                 mov     [esp+2Ch+var_1C], ecx ; int
.text:0040A669                 mov     ecx, [esp+2Ch+arg_4]
.text:0040A66D                 mov     [esp+2Ch+var_20], edx ; int
.text:0040A671                 mov     [esp+2Ch+Str], ecx ; Str
.text:0040A675                 call    sub_409450
.text:0040A67A                 mov     esi, eax
.text:0040A67C                 call    _errno
.text:0040A681                 mov     [eax], ebx
.text:0040A683                 cmp     ebp, esi
.text:0040A685                 ja      short loc_40A6FB
.text:0040A687                 lea     ebp, [esi+1]
.text:0040A68A                 mov     ebx, off_41D09C
.text:0040A690                 cmp     edi, offset unk_41E3A0
.text:0040A696                 mov     esi, [esp+2Ch+arg_0]
.text:0040A69A                 mov     [ebx+esi*8], ebp
.text:0040A69D                 jz      short loc_40A6AD
.text:0040A69F                 mov     [esp+2Ch+Block], edi ; Block
.text:0040A6A2                 call    free
.text:0040A6A7                 mov     ebx, off_41D09C
.text:0040A6AD
.text:0040A6AD loc_40A6AD:                             ; CODE XREF: sub_40A590+10D↑j
.text:0040A6AD                 mov     [esp+2Ch+Block], ebp ; size_t
.text:0040A6B0                 call    sub_4081B0
.text:0040A6B5                 mov     esi, [esp+2Ch+arg_C]
.text:0040A6B9                 mov     edi, eax
.text:0040A6BB                 mov     eax, [esp+2Ch+arg_0]
.text:0040A6BF                 test    esi, esi
.text:0040A6C1                 mov     [ebx+eax*8+4], edi
.text:0040A6C5                 jz      short loc_40A710
.text:0040A6C7
.text:0040A6C7 loc_40A6C7:                             ; CODE XREF: sub_40A590+185↓j
.text:0040A6C7                 call    _errno
.text:0040A6CC                 mov     ebx, [eax]
.text:0040A6CE                 mov     [esp+2Ch+var_18], esi ; int
.text:0040A6D2                 mov     ecx, [esi]
.text:0040A6D4                 mov     [esp+2Ch+Block], edi ; int
.text:0040A6D7                 mov     edx, [esp+2Ch+arg_8]
.text:0040A6DB                 mov     [esp+2Ch+var_28], ebp ; int
.text:0040A6DF                 mov     [esp+2Ch+var_1C], ecx ; int
.text:0040A6E3                 mov     ecx, [esp+2Ch+arg_4]
.text:0040A6E7                 mov     [esp+2Ch+var_20], edx ; int
.text:0040A6EB                 mov     [esp+2Ch+Str], ecx ; Str
.text:0040A6EF                 call    sub_409450
.text:0040A6F4                 call    _errno
.text:0040A6F9                 mov     [eax], ebx
.text:0040A6FB
.text:0040A6FB loc_40A6FB:                             ; CODE XREF: sub_40A590+F5↑j
.text:0040A6FB                 call    _errno
.text:0040A700                 mov     ebp, [esp+2Ch+var_14]
.text:0040A704                 mov     [eax], ebp
.text:0040A706                 add     esp, 1Ch
.text:0040A709                 mov     eax, edi
.text:0040A70B                 pop     ebx
.text:0040A70C                 pop     esi
.text:0040A70D                 pop     edi
.text:0040A70E                 pop     ebp
.text:0040A70F                 retn
.text:0040A710 ; ---------------------------------------------------------------------------
.text:0040A710
.text:0040A710 loc_40A710:                             ; CODE XREF: sub_40A590+135↑j
.text:0040A710                 mov     esi, offset dword_41E4A0
.text:0040A715                 jmp     short loc_40A6C7
.text:0040A717 ; ---------------------------------------------------------------------------
.text:0040A717
.text:0040A717 loc_40A717:                             ; CODE XREF: sub_40A590+B7↑j
.text:0040A717                 mov     esi, offset dword_41E4A0
.text:0040A71C                 jmp     loc_40A64D
.text:0040A721 ; ---------------------------------------------------------------------------
.text:0040A721
.text:0040A721 loc_40A721:                             ; CODE XREF: sub_40A590+45↑j
.text:0040A721                 mov     [esp+2Ch+Block], 8 ; size_t
.text:0040A728                 call    sub_4081B0
.text:0040A72D                 mov     off_41D09C, eax
.text:0040A732                 mov     edi, dword_41D094
.text:0040A738                 mov     ebx, eax
.text:0040A73A                 mov     ecx, off_41D098
.text:0040A740                 mov     [eax], edi
.text:0040A742                 mov     [eax+4], ecx
.text:0040A745                 jmp     loc_40A5DB
.text:0040A74A ; ---------------------------------------------------------------------------
.text:0040A74A
.text:0040A74A loc_40A74A:                             ; CODE XREF: sub_40A590+18↑j
.text:0040A74A                 call    abort
.text:0040A74F ; ---------------------------------------------------------------------------
.text:0040A74F
.text:0040A74F loc_40A74F:                             ; CODE XREF: sub_40A590+33↑j
.text:0040A74F                 call    sub_409380
.text:0040A74F sub_40A590      endp
.text:0040A74F
.text:0040A74F ; ---------------------------------------------------------------------------
.text:0040A754                 align 10h
.text:0040A760
.text:0040A760 ; =============== S U B R O U T I N E =======================================
.text:0040A760
.text:0040A760 ; Attributes: thunk
.text:0040A760
.text:0040A760 libintl_bindtextdomain proc near
.text:0040A760                 jmp     ds:__imp_libintl_bindtextdomain
.text:0040A760 libintl_bindtextdomain endp
.text:0040A760
.text:0040A760 ; ---------------------------------------------------------------------------
.text:0040A766                 align 10h
.text:0040A770                 jmp     ds:libintl_textdomain
.text:0040A770 ; ---------------------------------------------------------------------------
.text:0040A776                 align 10h
.text:0040A780                 jmp     ds:libintl_gettext
.text:0040A780 ; ---------------------------------------------------------------------------
.text:0040A786                 align 10h
.text:0040A790 ; const char aS_0[]
.text:0040A790 aS_0            db ': %s',0             ; DATA XREF: sub_40A7B0+B8↓o
.text:0040A790                                         ; sub_40A8B4+122↓o
.text:0040A795 aUnknownSystemE db 'Unknown system error',0
.text:0040A795                                         ; DATA XREF: sub_40A7B0:loc_40A87D↓o
.text:0040A795                                         ; sub_40A8B4:loc_40A9EE↓o
.text:0040A7AA ; const char aS_1[]
.text:0040A7AA aS_1            db '%s: ',0             ; DATA XREF: sub_40A7B0:loc_40A884↓o
.text:0040A7AF                 align 10h
.text:0040A7B0
.text:0040A7B0 ; =============== S U B R O U T I N E =======================================
.text:0040A7B0
.text:0040A7B0
.text:0040A7B0 ; int __cdecl sub_40A7B0(int Code, int ErrorMessage, char *, char)
.text:0040A7B0 sub_40A7B0      proc near               ; CODE XREF: sub_401910+130↑p
.text:0040A7B0                                         ; sub_401910+653↑p ...
.text:0040A7B0
.text:0040A7B0 Stream          = dword ptr -1Ch
.text:0040A7B0 Format          = dword ptr -18h
.text:0040A7B0 ArgList         = dword ptr -14h
.text:0040A7B0 Code            = dword ptr  4
.text:0040A7B0 ErrorMessage    = dword ptr  8
.text:0040A7B0 arg_8           = dword ptr  0Ch
.text:0040A7B0 arg_C           = byte ptr  10h
.text:0040A7B0
.text:0040A7B0                 push    esi
.text:0040A7B1                 push    ebx
.text:0040A7B2                 sub     esp, 14h
.text:0040A7B5                 mov     edx, ds:_iob
.text:0040A7BB                 mov     esi, [esp+1Ch+Code]
.text:0040A7BF                 mov     ebx, [esp+1Ch+ErrorMessage]
.text:0040A7C3                 add     edx, 20h ; ' '
.text:0040A7C6                 mov     [esp+1Ch+Stream], edx ; Stream
.text:0040A7C9                 call    fflush
.text:0040A7CE                 mov     eax, ds:dword_41E840
.text:0040A7D3                 test    eax, eax
.text:0040A7D5                 jz      loc_40A884
.text:0040A7DB                 call    eax ; dword_41E840
.text:0040A7DD
.text:0040A7DD loc_40A7DD:                             ; CODE XREF: sub_40A7B0+F7↓j
.text:0040A7DD                 lea     edx, [esp+1Ch+arg_C]
.text:0040A7E1                 mov     ecx, [esp+1Ch+arg_8]
.text:0040A7E5                 mov     [esp+1Ch+ArgList], edx ; ArgList
.text:0040A7E9                 mov     edx, ds:_iob
.text:0040A7EF                 mov     [esp+1Ch+Format], ecx ; Format
.text:0040A7F3                 add     edx, 40h ; '@'
.text:0040A7F6                 mov     [esp+1Ch+Stream], edx ; Stream
.text:0040A7F9                 call    vfprintf
.text:0040A7FE                 inc     ds:dword_41E850
.text:0040A804                 test    ebx, ebx
.text:0040A806                 jnz     short loc_40A852
.text:0040A808
.text:0040A808 loc_40A808:                             ; CODE XREF: sub_40A7B0+CB↓j
.text:0040A808                 mov     edx, ds:_iob
.text:0040A80E                 lea     ecx, [edx+40h]
.text:0040A811                 mov     ebx, [ecx+4]
.text:0040A814                 dec     ebx
.text:0040A815                 test    ebx, ebx
.text:0040A817                 mov     [ecx+4], ebx
.text:0040A81A                 js      short loc_40A840
.text:0040A81C                 mov     ecx, [edx+40h]
.text:0040A81F                 mov     byte ptr [ecx], 0Ah
.text:0040A822                 inc     dword ptr [edx+40h]
.text:0040A825
.text:0040A825 loc_40A825:                             ; CODE XREF: sub_40A7B0+A0↓j
.text:0040A825                 mov     edx, ds:_iob
.text:0040A82B                 add     edx, 40h ; '@'
.text:0040A82E                 mov     [esp+1Ch+Stream], edx ; Stream
.text:0040A831                 call    fflush
.text:0040A836                 test    esi, esi
.text:0040A838                 jnz     short loc_40A8AC
.text:0040A83A                 add     esp, 14h
.text:0040A83D                 pop     ebx
.text:0040A83E                 pop     esi
.text:0040A83F                 retn
.text:0040A840 ; ---------------------------------------------------------------------------
.text:0040A840
.text:0040A840 loc_40A840:                             ; CODE XREF: sub_40A7B0+6A↑j
.text:0040A840                 mov     [esp+1Ch+Format], ecx ; File
.text:0040A844                 mov     [esp+1Ch+Stream], 0Ah ; Ch
.text:0040A84B                 call    _flsbuf
.text:0040A850                 jmp     short loc_40A825
.text:0040A852 ; ---------------------------------------------------------------------------
.text:0040A852
.text:0040A852 loc_40A852:                             ; CODE XREF: sub_40A7B0+56↑j
.text:0040A852                 mov     [esp+1Ch+Stream], ebx ; ErrorMessage
.text:0040A855                 call    strerror
.text:0040A85A                 test    eax, eax
.text:0040A85C                 jz      short loc_40A87D
.text:0040A85E
.text:0040A85E loc_40A85E:                             ; CODE XREF: sub_40A7B0+D2↓j
.text:0040A85E                 mov     [esp+1Ch+ArgList], eax
.text:0040A862                 mov     ebx, ds:_iob
.text:0040A868                 mov     [esp+1Ch+Format], offset aS_0 ; ": %s"
.text:0040A870                 add     ebx, 40h ; '@'
.text:0040A873                 mov     [esp+1Ch+Stream], ebx ; Stream
.text:0040A876                 call    fprintf
.text:0040A87B                 jmp     short loc_40A808
.text:0040A87D ; ---------------------------------------------------------------------------
.text:0040A87D
.text:0040A87D loc_40A87D:                             ; CODE XREF: sub_40A7B0+AC↑j
.text:0040A87D                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:0040A882                 jmp     short loc_40A85E
.text:0040A884 ; ---------------------------------------------------------------------------
.text:0040A884
.text:0040A884 loc_40A884:                             ; CODE XREF: sub_40A7B0+25↑j
.text:0040A884                 mov     [esp+1Ch+Format], offset aS_1 ; "%s: "
.text:0040A88C                 mov     edx, ds:_iob
.text:0040A892                 mov     ecx, ds:dword_41E810
.text:0040A898                 add     edx, 40h ; '@'
.text:0040A89B                 mov     [esp+1Ch+ArgList], ecx
.text:0040A89F                 mov     [esp+1Ch+Stream], edx ; Stream
.text:0040A8A2                 call    fprintf
.text:0040A8A7                 jmp     loc_40A7DD
.text:0040A8AC ; ---------------------------------------------------------------------------
.text:0040A8AC
.text:0040A8AC loc_40A8AC:                             ; CODE XREF: sub_40A7B0+88↑j
.text:0040A8AC                 mov     [esp+1Ch+Stream], esi ; Code
.text:0040A8AF                 call    exit
.text:0040A8AF sub_40A7B0      endp
.text:0040A8AF
.text:0040A8B4
.text:0040A8B4 ; =============== S U B R O U T I N E =======================================
.text:0040A8B4
.text:0040A8B4
.text:0040A8B4 ; int __cdecl sub_40A8B4(int, int Code, int ErrorMessage, char *Str2, int, char *, char)
.text:0040A8B4 sub_40A8B4      proc near               ; DATA XREF: sub_40A8B4+77↓o
.text:0040A8B4
.text:0040A8B4 Stream          = dword ptr -28h
.text:0040A8B4 Format          = dword ptr -24h
.text:0040A8B4 ArgList         = dword ptr -20h
.text:0040A8B4 var_1C          = dword ptr -1Ch
.text:0040A8B4 Code            = dword ptr  8
.text:0040A8B4 ErrorMessage    = dword ptr  0Ch
.text:0040A8B4 Str2            = dword ptr  10h
.text:0040A8B4 arg_10          = dword ptr  14h
.text:0040A8B4 arg_14          = dword ptr  18h
.text:0040A8B4 arg_18          = byte ptr  1Ch
.text:0040A8B4
.text:0040A8B4                 and     eax, 64253A73h
.text:0040A8B9                 cmp     ah, [eax]
.text:0040A8BB
.text:0040A8BB loc_40A8BB:                             ; DATA XREF: sub_40A8B4:loc_40A9F5↓o
.text:0040A8BB                 add     ds:55003A73h, ah
.text:0040A8C1                 push    edi
.text:0040A8C2                 push    esi
.text:0040A8C3                 push    ebx
.text:0040A8C4                 sub     esp, 1Ch
.text:0040A8C7                 mov     edx, ds:dword_41E880
.text:0040A8CD                 mov     ebp, [esp+28h+Code]
.text:0040A8D1                 mov     edi, [esp+28h+ErrorMessage]
.text:0040A8D5                 test    edx, edx
.text:0040A8D7                 mov     ebx, [esp+28h+Str2]
.text:0040A8DB                 mov     esi, [esp+28h+arg_10]
.text:0040A8DF                 jz      short loc_40A8F9
.text:0040A8E1                 cmp     ds:dword_41E4E0, esi
.text:0040A8E7                 jz      loc_40AA20
.text:0040A8ED
.text:0040A8ED loc_40A8ED:                             ; CODE XREF: sub_40A8B4+18D↓j
.text:0040A8ED                 mov     ds:Str1, ebx
.text:0040A8F3                 mov     ds:dword_41E4E0, esi
.text:0040A8F9
.text:0040A8F9 loc_40A8F9:                             ; CODE XREF: sub_40A8B4+2B↑j
.text:0040A8F9                 mov     edx, ds:_iob
.text:0040A8FF                 add     edx, 20h ; ' '
.text:0040A902                 mov     [esp+28h+Stream], edx ; Stream
.text:0040A905                 call    fflush
.text:0040A90A                 mov     eax, ds:dword_41E840
.text:0040A90F                 test    eax, eax
.text:0040A911                 jz      loc_40A9F5
.text:0040A917                 call    eax ; dword_41E840
.text:0040A919
.text:0040A919 loc_40A919:                             ; CODE XREF: sub_40A8B4+164↓j
.text:0040A919                 test    ebx, ebx
.text:0040A91B                 jz      short loc_40A93E
.text:0040A91D                 mov     [esp+28h+ArgList], ebx
.text:0040A921                 mov     ebx, ds:_iob
.text:0040A927                 mov     [esp+28h+var_1C], esi
.text:0040A92B                 mov     [esp+28h+Format], offset sub_40A8B4 ; Format
.text:0040A933                 add     ebx, 40h ; '@'
.text:0040A936                 mov     [esp+28h+Stream], ebx ; Stream
.text:0040A939                 call    fprintf
.text:0040A93E
.text:0040A93E loc_40A93E:                             ; CODE XREF: sub_40A8B4+67↑j
.text:0040A93E                 mov     esi, ds:_iob
.text:0040A944                 lea     edx, [esp+28h+arg_18]
.text:0040A948                 mov     ecx, [esp+28h+arg_14]
.text:0040A94C                 mov     [esp+28h+ArgList], edx ; ArgList
.text:0040A950                 add     esi, 40h ; '@'
.text:0040A953                 mov     [esp+28h+Format], ecx ; Format
.text:0040A957                 mov     [esp+28h+Stream], esi ; Stream
.text:0040A95A                 call    vfprintf
.text:0040A95F                 inc     ds:dword_41E850
.text:0040A965                 test    edi, edi
.text:0040A967                 jnz     short loc_40A9C0
.text:0040A969
.text:0040A969 loc_40A969:                             ; CODE XREF: sub_40A8B4+135↓j
.text:0040A969                 mov     edx, ds:_iob
.text:0040A96F                 lea     ecx, [edx+40h]
.text:0040A972                 mov     ebx, [ecx+4]
.text:0040A975                 dec     ebx
.text:0040A976                 test    ebx, ebx
.text:0040A978                 mov     [ecx+4], ebx
.text:0040A97B                 js      short loc_40A9A7
.text:0040A97D                 mov     esi, [edx+40h]
.text:0040A980                 mov     byte ptr [esi], 0Ah
.text:0040A983                 inc     dword ptr [edx+40h]
.text:0040A986
.text:0040A986 loc_40A986:                             ; CODE XREF: sub_40A8B4+103↓j
.text:0040A986                 mov     ecx, ds:_iob
.text:0040A98C                 add     ecx, 40h ; '@'
.text:0040A98F                 mov     [esp+28h+Stream], ecx ; Stream
.text:0040A992                 call    fflush
.text:0040A997                 test    ebp, ebp
.text:0040A999                 jnz     loc_40AA46
.text:0040A99F
.text:0040A99F loc_40A99F:                             ; CODE XREF: sub_40A8B4+173↓j
.text:0040A99F                                         ; sub_40A8B4+187↓j
.text:0040A99F                 add     esp, 1Ch
.text:0040A9A2                 pop     ebx
.text:0040A9A3                 pop     esi
.text:0040A9A4                 pop     edi
.text:0040A9A5                 pop     ebp
.text:0040A9A6                 retn
.text:0040A9A7 ; ---------------------------------------------------------------------------
.text:0040A9A7
.text:0040A9A7 loc_40A9A7:                             ; CODE XREF: sub_40A8B4+C7↑j
.text:0040A9A7                 mov     [esp+28h+Format], ecx ; File
.text:0040A9AB                 mov     [esp+28h+Stream], 0Ah ; Ch
.text:0040A9B2                 call    _flsbuf
.text:0040A9B7                 jmp     short loc_40A986
.text:0040A9B7 ; ---------------------------------------------------------------------------
.text:0040A9B9                 align 10h
.text:0040A9C0
.text:0040A9C0 loc_40A9C0:                             ; CODE XREF: sub_40A8B4+B3↑j
.text:0040A9C0                 mov     [esp+28h+Stream], edi ; ErrorMessage
.text:0040A9C3                 call    strerror
.text:0040A9C8                 test    eax, eax
.text:0040A9CA                 jz      short loc_40A9EE
.text:0040A9CC
.text:0040A9CC loc_40A9CC:                             ; CODE XREF: sub_40A8B4+13F↓j
.text:0040A9CC                 mov     [esp+28h+ArgList], eax
.text:0040A9D0                 mov     edi, ds:_iob
.text:0040A9D6                 mov     [esp+28h+Format], offset aS_0 ; ": %s"
.text:0040A9DE                 add     edi, 40h ; '@'
.text:0040A9E1                 mov     [esp+28h+Stream], edi ; Stream
.text:0040A9E4                 call    fprintf
.text:0040A9E9                 jmp     loc_40A969
.text:0040A9EE ; ---------------------------------------------------------------------------
.text:0040A9EE
.text:0040A9EE loc_40A9EE:                             ; CODE XREF: sub_40A8B4+116↑j
.text:0040A9EE                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:0040A9F3                 jmp     short loc_40A9CC
.text:0040A9F5 ; ---------------------------------------------------------------------------
.text:0040A9F5
.text:0040A9F5 loc_40A9F5:                             ; CODE XREF: sub_40A8B4+5D↑j
.text:0040A9F5                 mov     [esp+28h+Format], (offset loc_40A8BB+1) ; Format
.text:0040A9FD                 mov     ecx, ds:_iob
.text:0040AA03                 mov     edx, ds:dword_41E810
.text:0040AA09                 add     ecx, 40h ; '@'
.text:0040AA0C                 mov     [esp+28h+ArgList], edx
.text:0040AA10                 mov     [esp+28h+Stream], ecx ; Stream
.text:0040AA13                 call    fprintf
.text:0040AA18                 jmp     loc_40A919
.text:0040AA18 ; ---------------------------------------------------------------------------
.text:0040AA1D                 align 10h
.text:0040AA20
.text:0040AA20 loc_40AA20:                             ; CODE XREF: sub_40A8B4+33↑j
.text:0040AA20                 mov     eax, ds:Str1
.text:0040AA25                 cmp     ebx, eax
.text:0040AA27                 jz      loc_40A99F
.text:0040AA2D                 mov     [esp+28h+Format], ebx ; Str2
.text:0040AA31                 mov     [esp+28h+Stream], eax ; Str1
.text:0040AA34                 call    strcmp
.text:0040AA39                 test    eax, eax
.text:0040AA3B                 jz      loc_40A99F
.text:0040AA41                 jmp     loc_40A8ED
.text:0040AA46 ; ---------------------------------------------------------------------------
.text:0040AA46
.text:0040AA46 loc_40AA46:                             ; CODE XREF: sub_40A8B4+E5↑j
.text:0040AA46                 mov     [esp+28h+Stream], ebp ; Code
.text:0040AA49                 call    exit
.text:0040AA49 sub_40A8B4      endp ; sp-analysis failed
.text:0040AA49
.text:0040AA49 ; ---------------------------------------------------------------------------
.text:0040AA4E                 align 10h
.text:0040AA50
.text:0040AA50 ; =============== S U B R O U T I N E =======================================
.text:0040AA50
.text:0040AA50
.text:0040AA50 ; int __cdecl sub_40AA50(char *, int)
.text:0040AA50 sub_40AA50      proc near               ; CODE XREF: sub_402BB0+41↑p
.text:0040AA50
.text:0040AA50 hNamedPipe      = dword ptr -0Ch
.text:0040AA50 Str             = dword ptr -8
.text:0040AA50 var_4           = dword ptr -4
.text:0040AA50 arg_0           = dword ptr  4
.text:0040AA50 arg_4           = dword ptr  8
.text:0040AA50
.text:0040AA50                 sub     esp, 0Ch
.text:0040AA53                 mov     edx, [esp+0Ch+arg_4]
.text:0040AA57                 mov     [esp+0Ch+hNamedPipe], 0 ; hNamedPipe
.text:0040AA5E                 mov     [esp+0Ch+var_4], edx ; int
.text:0040AA62                 mov     edx, [esp+0Ch+arg_0]
.text:0040AA66                 mov     [esp+0Ch+Str], edx ; Str
.text:0040AA6A                 call    sub_40ACC0
.text:0040AA6F                 add     esp, 0Ch
.text:0040AA72                 retn
.text:0040AA72 sub_40AA50      endp
.text:0040AA72
.text:0040AA72 ; ---------------------------------------------------------------------------
.text:0040AA73 aInoI64x        db 'ino:       %#I64X',0Ah,0
.text:0040AA73                                         ; DATA XREF: .text:0040AB5E↓o
.text:0040AA86 aModeO          db 'mode:      %#o',0Ah,0
.text:0040AA86                                         ; DATA XREF: .text:0040AB74↓o
.text:0040AA96 aUidLd          db 'uid:       %ld',0Ah,0
.text:0040AA96                                         ; DATA XREF: .text:0040AB87↓o
.text:0040AAA6 aGidLd          db 'gid:       %ld',0Ah,0
.text:0040AAA6                                         ; DATA XREF: .text:0040AB9A↓o
.text:0040AAB6 aDevLu          db 'dev:       %lu',0Ah,0
.text:0040AAB6                                         ; DATA XREF: .text:0040ABAD↓o
.text:0040AAC6 aNlinkLd        db 'nlink:     %ld',0Ah,0
.text:0040AAC6                                         ; DATA XREF: .text:0040ABC0↓o
.text:0040AAD6 aSizeI64d       db 'size:      %I64d',0Ah,0
.text:0040AAD6                                         ; DATA XREF: .text:0040ABD6↓o
.text:0040AAE8 aBlocksizeD     db 'blocksize: %d',0Ah,0
.text:0040AAE8                                         ; DATA XREF: .text:0040ABED↓o
.text:0040AAF7 aBlocksI64d     db 'blocks:    %I64d',0Ah,0
.text:0040AAF7                                         ; DATA XREF: .text:0040AC03↓o
.text:0040AB09 aAtimeLdS       db 'atime:     %ld: %s',0
.text:0040AB09                                         ; DATA XREF: .text:0040AC29↓o
.text:0040AB1C aMtimeLdS       db 'mtime:     %ld: %s',0
.text:0040AB1C                                         ; DATA XREF: .text:0040AC4B↓o
.text:0040AB2F aCtimeLdS       db 'ctime:     %ld: %s',0Ah,0
.text:0040AB2F                                         ; DATA XREF: .text:0040AC6D↓o
.text:0040AB43                 align 10h
.text:0040AB50                 push    ebx
.text:0040AB51                 sub     esp, 18h
.text:0040AB54                 mov     ebx, [esp+20h]
.text:0040AB58                 mov     edx, [ebx+8]
.text:0040AB5B                 mov     ecx, [ebx+0Ch]
.text:0040AB5E                 mov     dword ptr [esp], offset aInoI64x ; "ino:       %#I64X\n"
.text:0040AB65                 mov     [esp+4], edx
.text:0040AB69                 mov     [esp+8], ecx
.text:0040AB6D                 call    printf
.text:0040AB72                 mov     ecx, [ebx]
.text:0040AB74                 mov     dword ptr [esp], offset aModeO ; "mode:      %#o\n"
.text:0040AB7B                 mov     [esp+4], ecx
.text:0040AB7F                 call    printf
.text:0040AB84                 mov     edx, [ebx+1Ch]
.text:0040AB87                 mov     dword ptr [esp], offset aUidLd ; "uid:       %ld\n"
.text:0040AB8E                 mov     [esp+4], edx
.text:0040AB92                 call    printf
.text:0040AB97                 mov     ecx, [ebx+20h]
.text:0040AB9A                 mov     dword ptr [esp], offset aGidLd ; "gid:       %ld\n"
.text:0040ABA1                 mov     [esp+4], ecx
.text:0040ABA5                 call    printf
.text:0040ABAA                 mov     edx, [ebx+10h]
.text:0040ABAD                 mov     dword ptr [esp], offset aDevLu ; "dev:       %lu\n"
.text:0040ABB4                 mov     [esp+4], edx
.text:0040ABB8                 call    printf
.text:0040ABBD                 mov     ecx, [ebx+18h]
.text:0040ABC0                 mov     dword ptr [esp], offset aNlinkLd ; "nlink:     %ld\n"
.text:0040ABC7                 mov     [esp+4], ecx
.text:0040ABCB                 call    printf
.text:0040ABD0                 mov     edx, [ebx+30h]
.text:0040ABD3                 mov     ecx, [ebx+34h]
.text:0040ABD6                 mov     dword ptr [esp], offset aSizeI64d ; "size:      %I64d\n"
.text:0040ABDD                 mov     [esp+4], edx
.text:0040ABE1                 mov     [esp+8], ecx
.text:0040ABE5                 call    printf
.text:0040ABEA                 mov     ecx, [ebx+50h]
.text:0040ABED                 mov     dword ptr [esp], offset aBlocksizeD ; "blocksize: %d\n"
.text:0040ABF4                 mov     [esp+4], ecx
.text:0040ABF8                 call    printf
.text:0040ABFD                 mov     ecx, [ebx+5Ch]
.text:0040AC00                 mov     edx, [ebx+58h]
.text:0040AC03                 mov     dword ptr [esp], offset aBlocksI64d ; "blocks:    %I64d\n"
.text:0040AC0A                 mov     [esp+8], ecx
.text:0040AC0E                 mov     [esp+4], edx
.text:0040AC12                 call    printf
.text:0040AC17                 lea     edx, [ebx+38h]
.text:0040AC1A                 mov     [esp], edx
.text:0040AC1D                 call    ctime
.text:0040AC22                 mov     [esp+8], eax
.text:0040AC26                 mov     ecx, [ebx+38h]
.text:0040AC29                 mov     dword ptr [esp], offset aAtimeLdS ; "atime:     %ld: %s"
.text:0040AC30                 mov     [esp+4], ecx
.text:0040AC34                 call    printf
.text:0040AC39                 lea     edx, [ebx+40h]
.text:0040AC3C                 mov     [esp], edx
.text:0040AC3F                 call    ctime
.text:0040AC44                 mov     [esp+8], eax
.text:0040AC48                 mov     ecx, [ebx+40h]
.text:0040AC4B                 mov     dword ptr [esp], offset aMtimeLdS ; "mtime:     %ld: %s"
.text:0040AC52                 mov     [esp+4], ecx
.text:0040AC56                 call    printf
.text:0040AC5B                 lea     edx, [ebx+48h]
.text:0040AC5E                 mov     [esp], edx
.text:0040AC61                 call    ctime
.text:0040AC66                 mov     [esp+8], eax
.text:0040AC6A                 mov     edx, [ebx+48h]
.text:0040AC6D                 mov     dword ptr [esp], offset aCtimeLdS ; "ctime:     %ld: %s\n"
.text:0040AC74                 mov     [esp+4], edx
.text:0040AC78                 call    printf
.text:0040AC7D                 add     esp, 18h
.text:0040AC80                 xor     eax, eax
.text:0040AC82                 pop     ebx
.text:0040AC83                 retn
.text:0040AC83 ; ---------------------------------------------------------------------------
.text:0040AC84                 align 10h
.text:0040AC90 ; const char aFxstat64BadFil[]
.text:0040AC90 aFxstat64BadFil db '__fxstat64: bad file descriptor %d',0Ah,0
.text:0040AC90                                         ; DATA XREF: sub_40ACC0+7B↓o
.text:0040ACB4                 align 10h
.text:0040ACC0
.text:0040ACC0 ; =============== S U B R O U T I N E =======================================
.text:0040ACC0
.text:0040ACC0
.text:0040ACC0 ; int __cdecl sub_40ACC0(HANDLE hNamedPipe, char *Str, int)
.text:0040ACC0 sub_40ACC0      proc near               ; CODE XREF: sub_40AA50+1A↑p
.text:0040ACC0                                         ; .text:0040D459↓p
.text:0040ACC0
.text:0040ACC0 hFindFile       = dword ptr -1A0h
.text:0040ACC0 var_19C         = dword ptr -19Ch
.text:0040ACC0 hLibModule      = dword ptr -198h
.text:0040ACC0 lpFindFileData  = dword ptr -194h
.text:0040ACC0 lpModuleName    = dword ptr -18Ch
.text:0040ACC0 lpProcName      = dword ptr -188h
.text:0040ACC0 var_184         = dword ptr -184h
.text:0040ACC0 var_180         = dword ptr -180h
.text:0040ACC0 var_17C         = dword ptr -17Ch
.text:0040ACC0 var_178         = dword ptr -178h
.text:0040ACC0 var_174         = dword ptr -174h
.text:0040ACC0 var_170         = dword ptr -170h
.text:0040ACC0 var_16C         = dword ptr -16Ch
.text:0040ACC0 var_168         = dword ptr -168h
.text:0040ACC0 var_164         = dword ptr -164h
.text:0040ACC0 hModule         = dword ptr -160h
.text:0040ACC0 FindFileData    = _WIN32_FIND_DATAA ptr -15Ch
.text:0040ACC0 FileHandle      = dword ptr -1Ch
.text:0040ACC0 var_18          = dword ptr -18h
.text:0040ACC0 var_10          = dword ptr -10h
.text:0040ACC0 var_C           = dword ptr -0Ch
.text:0040ACC0 lpFileName      = dword ptr -8
.text:0040ACC0 var_4           = dword ptr -4
.text:0040ACC0 hNamedPipe      = dword ptr  4
.text:0040ACC0 Str             = dword ptr  8
.text:0040ACC0 arg_8           = dword ptr  0Ch
.text:0040ACC0
.text:0040ACC0                 sub     esp, 1Ch
.text:0040ACC3                 mov     edx, [esp+1Ch+Str]
.text:0040ACC7                 mov     [esp+1Ch+var_C], ebx
.text:0040ACCB                 mov     ebx, [esp+1Ch+hNamedPipe]
.text:0040ACCF                 mov     [esp+1Ch+lpFileName], esi
.text:0040ACD3                 mov     esi, [esp+1Ch+arg_8]
.text:0040ACD7                 test    ebx, ebx
.text:0040ACD9                 mov     [esp+1Ch+var_4], edi
.text:0040ACDD                 jnz     short loc_40AD17
.text:0040ACDF                 test    edx, edx
.text:0040ACE1                 js      short loc_40AD37
.text:0040ACE3                 test    esi, esi
.text:0040ACE5                 jz      short loc_40AD17
.text:0040ACE7                 cld
.text:0040ACE8                 mov     eax, ebx
.text:0040ACEA                 mov     edi, esi
.text:0040ACEC                 mov     ecx, 18h
.text:0040ACF1                 rep stosd
.text:0040ACF3                 mov     [esp+1Ch+Str], esi
.text:0040ACF7                 mov     [esp+1Ch+FileHandle], edx ; FileHandle
.text:0040ACFA                 call    _get_osfhandle
.text:0040ACFF                 mov     [esp+1Ch+hNamedPipe], eax
.text:0040AD03                 mov     ebx, [esp+1Ch+var_C]
.text:0040AD07                 mov     esi, [esp+1Ch+lpFileName]
.text:0040AD0B                 mov     edi, [esp+1Ch+var_4]
.text:0040AD0F                 add     esp, 1Ch
.text:0040AD12                 jmp     loc_40B0A0
.text:0040AD17 ; ---------------------------------------------------------------------------
.text:0040AD17
.text:0040AD17 loc_40AD17:                             ; CODE XREF: sub_40ACC0+1D↑j
.text:0040AD17                                         ; sub_40ACC0+25↑j
.text:0040AD17                 call    _errno
.text:0040AD1C                 mov     dword ptr [eax], 16h
.text:0040AD22
.text:0040AD22 loc_40AD22:                             ; CODE XREF: sub_40ACC0+92↓j
.text:0040AD22                 mov     ebx, [esp+1Ch+var_C]
.text:0040AD26                 mov     eax, 0FFFFFFFFh
.text:0040AD2B                 mov     esi, [esp+1Ch+lpFileName]
.text:0040AD2F                 mov     edi, [esp+1Ch+var_4]
.text:0040AD33                 add     esp, 1Ch
.text:0040AD36                 retn
.text:0040AD37 ; ---------------------------------------------------------------------------
.text:0040AD37
.text:0040AD37 loc_40AD37:                             ; CODE XREF: sub_40ACC0+21↑j
.text:0040AD37                 mov     [esp+1Ch+var_18], edx
.text:0040AD3B                 mov     [esp+1Ch+FileHandle], offset aFxstat64BadFil ; "__fxstat64: bad file descriptor %d\n"
.text:0040AD42                 call    printf
.text:0040AD47                 call    _errno
.text:0040AD4C                 mov     dword ptr [eax], 9
.text:0040AD52                 jmp     short loc_40AD22
.text:0040AD52 ; ---------------------------------------------------------------------------
.text:0040AD54                 db 1Ch dup(90h)
.text:0040AD70 aComExeBatCmd   db '.com;.exe;.bat;.cmd',0
.text:0040AD70                                         ; DATA XREF: .data:off_41D0A4↓o
.text:0040AD84 ; const CHAR ModuleName[]
.text:0040AD84 ModuleName      db 'KERNEL32.DLL',0     ; DATA XREF: sub_40ACC0+101↓o
.text:0040AD84                                         ; sub_40ACC0+26C↓o ...
.text:0040AD91 ; const CHAR ProcName[]
.text:0040AD91 ProcName        db 'GetFileAttributesExA',0
.text:0040AD91                                         ; DATA XREF: sub_40ACC0+118↓o
.text:0040ADA6                 align 10h
.text:0040ADB0
.text:0040ADB0 loc_40ADB0:                             ; CODE XREF: .text:0040BF54↓p
.text:0040ADB0                                         ; sub_40C350+37↓p
.text:0040ADB0                 push    ebp
.text:0040ADB1                 push    edi
.text:0040ADB2                 push    esi
.text:0040ADB3                 push    ebx
.text:0040ADB4                 sub     esp, 17Ch
.text:0040ADBA                 mov     ebx, [esp+18Ch+Str]
.text:0040ADC1                 mov     [esp+18Ch+lpModuleName], offset ModuleName ; "KERNEL32.DLL"
.text:0040ADC8                 call    GetModuleHandleA
.text:0040ADCD                 sub     esp, 4
.text:0040ADD0                 mov     [esp+18Ch+hModule], eax
.text:0040ADD4                 mov     edx, [esp+18Ch+hModule]
.text:0040ADD8                 mov     [esp+18Ch+lpProcName], offset ProcName ; "GetFileAttributesExA"
.text:0040ADE0                 mov     [esp+18Ch+lpModuleName], edx ; hModule
.text:0040ADE3                 call    GetProcAddress
.text:0040ADE8                 sub     esp, 8
.text:0040ADEB                 mov     ebp, eax
.text:0040ADED                 mov     eax, [esp+18Ch+hNamedPipe]
.text:0040ADF4                 mov     [esp+18Ch+lpModuleName], eax ; lpFileName
.text:0040ADF7                 call    GetFileAttributesA
.text:0040ADFC                 sub     esp, 4
.text:0040ADFF                 mov     [esp+18Ch+var_164], eax
.text:0040AE03                 xor     eax, eax
.text:0040AE05                 cmp     [esp+18Ch+var_164], 0FFFFFFFFh
.text:0040AE0A                 jz      short loc_40AE61
.text:0040AE0C                 cld
.text:0040AE0D                 mov     ecx, 50h ; 'P'
.text:0040AE12                 lea     esi, [esp+18Ch+FindFileData]
.text:0040AE16                 mov     edi, esi
.text:0040AE18                 test    ebp, ebp
.text:0040AE1A                 rep stosd
.text:0040AE1C                 mov     [esp+18Ch+var_170], 0
.text:0040AE24                 jz      short loc_40AE45
.text:0040AE26                 mov     [esp+18Ch+var_184], ebx
.text:0040AE2A                 mov     ecx, [esp+18Ch+hNamedPipe]
.text:0040AE31                 mov     [esp+18Ch+lpProcName], 0
.text:0040AE39                 mov     [esp+18Ch+lpModuleName], ecx
.text:0040AE3C                 call    ebp
.text:0040AE3E                 sub     esp, 0Ch
.text:0040AE41                 mov     [esp+198h+var_17C], eax
.text:0040AE45
.text:0040AE45 loc_40AE45:                             ; CODE XREF: sub_40ACC0+164↑j
.text:0040AE45                 mov     eax, [esp+198h+var_17C]
.text:0040AE49                 test    eax, eax
.text:0040AE4B                 jz      short loc_40AE70
.text:0040AE4D
.text:0040AE4D loc_40AE4D:                             ; CODE XREF: sub_40ACC0+221↓j
.text:0040AE4D                                         ; sub_40ACC0+23B↓j
.text:0040AE4D                 mov     ebx, [esp+198h+var_16C]
.text:0040AE51                 mov     [esp+198h+hLibModule], ebx ; hLibModule
.text:0040AE54                 call    FreeLibrary
.text:0040AE59                 sub     esp, 4
.text:0040AE5C                 mov     eax, 1
.text:0040AE61
.text:0040AE61 loc_40AE61:                             ; CODE XREF: sub_40ACC0+14A↑j
.text:0040AE61                 add     esp, 17Ch
.text:0040AE67                 pop     ebx
.text:0040AE68                 pop     esi
.text:0040AE69                 pop     edi
.text:0040AE6A                 pop     ebp
.text:0040AE6B                 retn
.text:0040AE6B ; ---------------------------------------------------------------------------
.text:0040AE6C                 align 10h
.text:0040AE70
.text:0040AE70 loc_40AE70:                             ; CODE XREF: sub_40ACC0+18B↑j
.text:0040AE70                 mov     [esp+198h+lpFindFileData], esi ; lpFindFileData
.text:0040AE74                 mov     edx, [esp+198h+lpFileName]
.text:0040AE7B                 mov     [esp+198h+hLibModule], edx ; lpFileName
.text:0040AE7E                 call    FindFirstFileA
.text:0040AE83                 sub     esp, 8
.text:0040AE86                 xor     ecx, ecx
.text:0040AE88                 cmp     eax, 0FFFFFFFFh
.text:0040AE8B                 setnz   cl
.text:0040AE8E                 mov     edi, [esp+198h+var_168]
.text:0040AE92                 mov     [ebx], edi
.text:0040AE94                 mov     esi, [esp+198h+hModule]
.text:0040AE98                 mov     [esp+198h+var_17C], ecx
.text:0040AE9C                 mov     ecx, [esp+198h+var_164]
.text:0040AEA0                 mov     [ebx+8], esi
.text:0040AEA3                 mov     [ebx+4], ecx
.text:0040AEA6                 mov     ebp, [esp+198h+FindFileData.dwFileAttributes]
.text:0040AEAA                 mov     edi, [esp+198h+FindFileData.ftCreationTime.dwLowDateTime]
.text:0040AEAE                 mov     [ebx+0Ch], ebp
.text:0040AEB1                 mov     [ebx+10h], edi
.text:0040AEB4                 mov     esi, [esp+198h+FindFileData.ftLastAccessTime.dwLowDateTime]
.text:0040AEB8                 mov     ecx, [esp+198h+FindFileData.ftCreationTime.dwHighDateTime]
.text:0040AEBC                 mov     [ebx+18h], esi
.text:0040AEBF                 mov     [ebx+14h], ecx
.text:0040AEC2                 mov     ebp, [esp+198h+FindFileData.ftLastAccessTime.dwHighDateTime]
.text:0040AEC6                 mov     [ebx+1Ch], ebp
.text:0040AEC9                 mov     edi, [esp+198h+FindFileData.ftLastWriteTime.dwLowDateTime]
.text:0040AECD                 mov     [ebx+20h], edi
.text:0040AED0                 mov     [esp+198h+hLibModule], eax ; hFindFile
.text:0040AED3                 call    FindClose
.text:0040AED8                 sub     esp, 4
.text:0040AEDB                 mov     esi, [esp+198h+var_17C]
.text:0040AEDF                 test    esi, esi
.text:0040AEE1                 jnz     loc_40AE4D
.text:0040AEE7                 cld
.text:0040AEE8                 mov     eax, [esp+198h+var_17C]
.text:0040AEEC                 mov     ecx, 9
.text:0040AEF1                 mov     edi, ebx
.text:0040AEF3                 rep stosd
.text:0040AEF5                 mov     ebp, [esp+198h+var_170]
.text:0040AEF9                 mov     [ebx], ebp
.text:0040AEFB                 jmp     loc_40AE4D
.text:0040AEFB ; ---------------------------------------------------------------------------
.text:0040AF00 ; const CHAR aFindfirstfilee[]
.text:0040AF00 aFindfirstfilee db 'FindFirstFileExA',0 ; DATA XREF: sub_40ACC0+283↓o
.text:0040AF11 ; ---------------------------------------------------------------------------
.text:0040AF11
.text:0040AF11 loc_40AF11:                             ; DATA XREF: sub_40ACC0:loc_40AFAD↓o
.text:0040AF11                 pop     esp
.text:0040AF12                 sub     al, [eax]
.text:0040AF14                 lea     esi, [esi+0]
.text:0040AF1A                 lea     edi, [edi+0]
.text:0040AF20
.text:0040AF20 loc_40AF20:                             ; CODE XREF: .text:0040C053↓p
.text:0040AF20                                         ; sub_40C350+3FA↓p ...
.text:0040AF20                 push    ebp
.text:0040AF21                 push    edi
.text:0040AF22                 xor     edi, edi
.text:0040AF24                 push    esi
.text:0040AF25                 push    ebx
.text:0040AF26                 sub     esp, 17Ch
.text:0040AF2C                 mov     [esp+188h+lpProcName], offset ModuleName ; "KERNEL32.DLL"
.text:0040AF33                 call    LoadLibraryA
.text:0040AF38                 sub     esp, 4
.text:0040AF3B                 mov     [esp+188h+FindFileData.dwFileAttributes], eax
.text:0040AF3F                 mov     ecx, [esp+188h+FindFileData.dwFileAttributes]
.text:0040AF43                 mov     [esp+188h+var_184], offset aFindfirstfilee ; "FindFirstFileExA"
.text:0040AF4B                 mov     [esp+188h+lpProcName], ecx ; hModule
.text:0040AF4E                 call    GetProcAddress
.text:0040AF53                 sub     esp, 8
.text:0040AF56                 mov     edx, [esp+188h+Str]
.text:0040AF5D                 mov     [esp+188h+hModule], eax
.text:0040AF61                 mov     [esp+188h+lpProcName], edx ; Str
.text:0040AF64                 call    strlen
.text:0040AF69                 lea     edx, [eax+5]
.text:0040AF6C                 mov     ebx, eax
.text:0040AF6E                 mov     [esp+188h+lpProcName], edx ; Size
.text:0040AF71                 call    malloc
.text:0040AF76                 mov     esi, eax
.text:0040AF78                 test    esi, esi
.text:0040AF7A                 mov     eax, 1
.text:0040AF7F                 jz      loc_40B05D
.text:0040AF85                 mov     [esp+188h+lpProcName], esi ; Destination
.text:0040AF88                 mov     ebp, [esp+188h+Str]
.text:0040AF8F                 mov     [esp+188h+var_184], ebp ; Source
.text:0040AF93                 call    strcpy
.text:0040AF98                 movzx   eax, byte ptr [ebx+esi-1]
.text:0040AF9D                 cmp     al, 2Fh ; '/'
.text:0040AF9F                 jz      loc_40B08B
.text:0040AFA5                 cmp     al, 5Ch ; '\'
.text:0040AFA7                 jz      loc_40B08B
.text:0040AFAD
.text:0040AFAD loc_40AFAD:                             ; CODE XREF: sub_40ACC0+3D0↓j
.text:0040AFAD                 mov     [esp+188h+var_184], offset loc_40AF11 ; Source
.text:0040AFB5                 mov     [esp+188h+lpProcName], esi ; Destination
.text:0040AFB8                 call    strcat
.text:0040AFBD                 mov     eax, [esp+188h+hModule]
.text:0040AFC1                 test    eax, eax
.text:0040AFC3                 jz      loc_40B085
.text:0040AFC9                 mov     [esp+188h+var_174], 0
.text:0040AFD1                 lea     ebp, [esp+188h+FindFileData.ftCreationTime]
.text:0040AFD5                 mov     [esp+188h+var_178], 0
.text:0040AFDD                 mov     [esp+188h+var_17C], 1
.text:0040AFE5                 mov     [esp+188h+var_180], ebp
.text:0040AFE9                 mov     [esp+188h+var_184], 0
.text:0040AFF1                 mov     [esp+188h+lpProcName], esi
.text:0040AFF4                 call    [esp+188h+hModule]
.text:0040AFF8                 sub     esp, 18h
.text:0040AFFB                 mov     ebx, eax
.text:0040AFFD                 cmp     eax, 0FFFFFFFFh
.text:0040B000                 jz      short loc_40B068
.text:0040B002                 lea     esi, [esi+0]
.text:0040B009                 lea     edi, [edi+0]
.text:0040B010
.text:0040B010 loc_40B010:                             ; CODE XREF: sub_40ACC0+369↓j
.text:0040B010                                         ; sub_40ACC0+3C1↓j
.text:0040B010                 test    byte ptr [esp+1A0h+var_170], 10h
.text:0040B015                 jz      short loc_40B018
.text:0040B017                 inc     edi
.text:0040B018
.text:0040B018 loc_40B018:                             ; CODE XREF: sub_40ACC0+355↑j
.text:0040B018                 mov     [esp+1A0h+var_19C], ebp ; lpFindFileData
.text:0040B01C                 mov     [esp+1A0h+hFindFile], ebx ; hFindFile
.text:0040B01F                 call    FindNextFileA
.text:0040B024                 sub     esp, 8
.text:0040B027                 test    eax, eax
.text:0040B029                 jnz     short loc_40B010
.text:0040B02B                 mov     [esp+1A0h+hFindFile], ebx ; hFindFile
.text:0040B02E                 call    FindClose
.text:0040B033                 sub     esp, 4
.text:0040B036                 mov     esi, [esp+1A0h+var_174]
.text:0040B03A                 mov     [esp+1A0h+hFindFile], esi ; hLibModule
.text:0040B03D                 call    FreeLibrary
.text:0040B042                 sub     esp, 4
.text:0040B045                 mov     ebx, [esp+1A0h+var_10]
.text:0040B04C                 mov     [esp+1A0h+hFindFile], ebx ; LPCSTR
.text:0040B04F                 call    sub_40D4F0
.text:0040B054                 test    eax, eax
.text:0040B056                 jz      short loc_40B05B
.text:0040B058                 add     edi, 2
.text:0040B05B
.text:0040B05B loc_40B05B:                             ; CODE XREF: sub_40ACC0+396↑j
.text:0040B05B                 mov     eax, edi
.text:0040B05D
.text:0040B05D loc_40B05D:                             ; CODE XREF: sub_40ACC0+2BF↑j
.text:0040B05D                                         ; sub_40ACC0+3C3↓j
.text:0040B05D                 add     esp, 17Ch
.text:0040B063                 pop     ebx
.text:0040B064                 pop     esi
.text:0040B065                 pop     edi
.text:0040B066                 pop     ebp
.text:0040B067                 retn
.text:0040B068 ; ---------------------------------------------------------------------------
.text:0040B068
.text:0040B068 loc_40B068:                             ; CODE XREF: sub_40ACC0+340↑j
.text:0040B068                                         ; sub_40ACC0+3C9↓j
.text:0040B068                 mov     [esp+1A0h+var_19C], ebp ; lpFindFileData
.text:0040B06C                 mov     [esp+1A0h+hFindFile], esi ; lpFileName
.text:0040B06F                 call    FindFirstFileA
.text:0040B074                 mov     ebx, eax
.text:0040B076                 sub     esp, 8
.text:0040B079                 cmp     ebx, 0FFFFFFFFh
.text:0040B07C                 mov     eax, 2
.text:0040B081                 jnz     short loc_40B010
.text:0040B083                 jmp     short loc_40B05D
.text:0040B085 ; ---------------------------------------------------------------------------
.text:0040B085
.text:0040B085 loc_40B085:                             ; CODE XREF: sub_40ACC0+303↑j
.text:0040B085                 lea     ebp, [esp+188h+FindFileData.ftCreationTime]
.text:0040B089                 jmp     short loc_40B068
.text:0040B08B ; ---------------------------------------------------------------------------
.text:0040B08B
.text:0040B08B loc_40B08B:                             ; CODE XREF: sub_40ACC0+2DF↑j
.text:0040B08B                                         ; sub_40ACC0+2E7↑j
.text:0040B08B                 mov     byte ptr [ebx+esi-1], 0
.text:0040B090                 jmp     loc_40AFAD
.text:0040B090 ; ---------------------------------------------------------------------------
.text:0040B095                 align 10h
.text:0040B0A0
.text:0040B0A0 loc_40B0A0:                             ; CODE XREF: sub_40ACC0+52↑j
.text:0040B0A0                                         ; sub_4197F0-CFD9↓p
.text:0040B0A0                 push    ebp
.text:0040B0A1                 mov     eax, 0FFFFFFFFh
.text:0040B0A6                 push    edi
.text:0040B0A7                 push    esi
.text:0040B0A8                 push    ebx
.text:0040B0A9                 sub     esp, 0DCh
.text:0040B0AF                 mov     esi, [esp+0ECh+hNamedPipe]
.text:0040B0B6                 mov     ebp, [esp+0ECh+Str]
.text:0040B0BD                 cmp     esi, 0FFFFFFFFh
.text:0040B0C0                 jz      loc_40B441
.text:0040B0C6                 cld
.text:0040B0C7                 xor     eax, eax
.text:0040B0C9                 lea     ebx, [esp+0ECh+FindFileData.cFileName+0D4h]
.text:0040B0D0                 mov     ecx, 0Dh
.text:0040B0D5                 mov     edi, ebx
.text:0040B0D7                 rep stosd
.text:0040B0D9                 mov     dword ptr [ebp+18h], 1
.text:0040B0E0                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+44h], esi ; hFile
.text:0040B0E3                 call    GetFileType
.text:0040B0E8                 sub     esp, 4
.text:0040B0EB                 xor     edx, edx
.text:0040B0ED                 cmp     eax, 2
.text:0040B0F0                 jz      loc_40B520
.text:0040B0F6                 cmp     eax, 3
.text:0040B0F9                 jz      loc_40B510
.text:0040B0FF
.text:0040B0FF loc_40B0FF:                             ; CODE XREF: sub_40ACC0+855↓j
.text:0040B0FF                                         ; sub_40ACC0+865↓j
.text:0040B0FF                 or      [ebp+0], edx
.text:0040B102                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+48h], ebx ; lpFileInformation
.text:0040B106                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+44h], esi ; hFile
.text:0040B109                 call    GetFileInformationByHandle
.text:0040B10E                 sub     esp, 8
.text:0040B111                 mov     ecx, dword ptr [esp+0ECh+FindFileData.cFileName+0F8h]
.text:0040B118                 test    ecx, ecx
.text:0040B11A                 jnz     short loc_40B150
.text:0040B11C                 mov     edx, dword ptr [esp+0ECh+FindFileData.cFileName+0F4h]
.text:0040B123                 test    edx, edx
.text:0040B125                 jnz     short loc_40B150
.text:0040B127                 mov     edx, [ebp+0]
.text:0040B12A                 and     edx, 0F000h
.text:0040B130                 cmp     edx, 1000h
.text:0040B136                 jz      loc_40B4A6
.text:0040B13C
.text:0040B13C loc_40B13C:                             ; CODE XREF: sub_40ACC0+839↓j
.text:0040B13C                                         ; sub_40ACC0+845↓j
.text:0040B13C                 test    ecx, ecx
.text:0040B13E                 jnz     short loc_40B150
.text:0040B140                 mov     edx, dword ptr [esp+0ECh+FindFileData.cFileName+0F4h]
.text:0040B147                 test    edx, edx
.text:0040B149                 jz      loc_40B484
.text:0040B14F                 nop
.text:0040B150
.text:0040B150 loc_40B150:                             ; CODE XREF: sub_40ACC0+45A↑j
.text:0040B150                                         ; sub_40ACC0+465↑j ...
.text:0040B150                 cld
.text:0040B151                 mov     esi, ebx
.text:0040B153                 mov     dword ptr [ebp+14h], 0
.text:0040B15A                 lea     edi, [esp+0ECh+FindFileData.cFileName+94h]
.text:0040B15E                 mov     ecx, 0Dh
.text:0040B163                 rep movsd
.text:0040B165                 xor     ebx, ebx
.text:0040B167                 xor     edi, edi
.text:0040B169                 mov     edx, dword ptr [esp+0ECh+FindFileData.cFileName+0C4h]
.text:0040B170                 mov     esi, dword ptr [esp+0ECh+FindFileData.cFileName+0C0h]
.text:0040B174                 or      edx, ebx
.text:0040B176                 mov     ebx, dword ptr [esp+0ECh+FindFileData.cFileName+94h]
.text:0040B17A                 mov     [ebp+8], edx
.text:0040B17D                 or      edi, esi
.text:0040B17F                 xor     edx, edx
.text:0040B181                 mov     [ebp+0Ch], edi
.text:0040B184                 test    bl, 10h
.text:0040B187                 mov     esi, dword ptr [esp+0ECh+FindFileData.cFileName+0B0h]
.text:0040B18B                 setz    dl
.text:0040B18E                 mov     [ebp+10h], esi
.text:0040B191                 dec     edx
.text:0040B192                 and     edx, 0FFFFC000h
.text:0040B198                 add     edx, 8000h
.text:0040B19E                 or      edx, 124h
.text:0040B1A4                 test    bl, 1
.text:0040B1A7                 movzx   eax, dx
.text:0040B1AA                 jnz     short loc_40B1B1
.text:0040B1AC                 or      eax, 92h
.text:0040B1B1
.text:0040B1B1 loc_40B1B1:                             ; CODE XREF: sub_40ACC0+4EA↑j
.text:0040B1B1                 or      [ebp+0], eax
.text:0040B1B4                 xor     edx, edx
.text:0040B1B6                 mov     ebx, dword ptr [esp+0ECh+FindFileData.cFileName+0B4h]
.text:0040B1BA                 mov     ecx, dword ptr [esp+0ECh+FindFileData.cFileName+0B8h]
.text:0040B1BE                 mov     eax, edx
.text:0040B1C0                 xor     esi, esi
.text:0040B1C2                 mov     edx, dword ptr [esp+0ECh+FindFileData.cFileName+0A4h]
.text:0040B1C6                 mov     edi, ebx
.text:0040B1C8                 or      eax, edi
.text:0040B1CA                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+88h], eax
.text:0040B1CE                 mov     ebx, ecx
.text:0040B1D0                 mov     edi, dword ptr [esp+0ECh+FindFileData.cFileName+0BCh]
.text:0040B1D4                 or      ebx, esi
.text:0040B1D6                 mov     esi, dword ptr [esp+0ECh+FindFileData.cFileName+88h]
.text:0040B1DA                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+84h], ebx
.text:0040B1DE                 xor     ebx, ebx
.text:0040B1E0                 mov     ecx, dword ptr [esp+0ECh+FindFileData.cFileName+84h]
.text:0040B1E4                 mov     [ebp+34h], esi
.text:0040B1E7                 mov     esi, dword ptr [esp+0ECh+FindFileData.cFileName+0A0h]
.text:0040B1EB                 mov     [ebp+18h], edi
.text:0040B1EE                 xor     edi, edi
.text:0040B1F0                 or      esi, ebx
.text:0040B1F2                 mov     [ebp+30h], ecx
.text:0040B1F5                 or      edi, edx
.text:0040B1F7                 mov     edx, esi
.text:0040B1F9                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+4Ch], 989680h
.text:0040B201                 sub     edx, 0D53E8000h
.text:0040B207                 mov     ebx, edi
.text:0040B209                 sbb     ebx, 19DB1DEh
.text:0040B20F                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+48h], ebx
.text:0040B213                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+50h], 0
.text:0040B21B                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+44h], edx
.text:0040B21E                 call    sub_41B300
.text:0040B223                 mov     ecx, eax
.text:0040B225                 shr     eax, 1Fh
.text:0040B228                 dec     eax
.text:0040B229                 and     ecx, eax
.text:0040B22B                 mov     [ebp+38h], ecx
.text:0040B22E                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+44h], esi
.text:0040B231                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+48h], edi
.text:0040B235                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+4Ch], 989680h
.text:0040B23D                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+50h], 0
.text:0040B245                 call    sub_41B420
.text:0040B24A                 lea     ebx, [eax+eax*4]
.text:0040B24D                 xor     ecx, ecx
.text:0040B24F                 lea     esi, [ebx+ebx*4]
.text:0040B252                 shl     esi, 2
.text:0040B255                 mov     edi, esi
.text:0040B257                 shr     edi, 1Fh
.text:0040B25A                 dec     edi
.text:0040B25B                 and     edi, esi
.text:0040B25D                 mov     [ebp+3Ch], edi
.text:0040B260                 mov     esi, dword ptr [esp+0ECh+FindFileData.cFileName+98h]
.text:0040B264                 xor     edi, edi
.text:0040B266                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+4Ch], 989680h
.text:0040B26E                 mov     edx, dword ptr [esp+0ECh+FindFileData.cFileName+9Ch]
.text:0040B272                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+50h], 0
.text:0040B27A                 or      esi, ecx
.text:0040B27C                 or      edi, edx
.text:0040B27E                 mov     edx, esi
.text:0040B280                 mov     ecx, edi
.text:0040B282                 sub     edx, 0D53E8000h
.text:0040B288                 sbb     ecx, 19DB1DEh
.text:0040B28E                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+48h], ecx
.text:0040B292                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+44h], edx
.text:0040B295                 call    sub_41B300
.text:0040B29A                 mov     ebx, eax
.text:0040B29C                 shr     eax, 1Fh
.text:0040B29F                 dec     eax
.text:0040B2A0                 and     ebx, eax
.text:0040B2A2                 mov     [ebp+48h], ebx
.text:0040B2A5                 xor     ebx, ebx
.text:0040B2A7                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+44h], esi
.text:0040B2AA                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+48h], edi
.text:0040B2AE                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+4Ch], 989680h
.text:0040B2B6                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+50h], 0
.text:0040B2BE                 call    sub_41B420
.text:0040B2C3                 lea     ecx, [eax+eax*4]
.text:0040B2C6                 lea     esi, [ecx+ecx*4]
.text:0040B2C9                 shl     esi, 2
.text:0040B2CC                 mov     edi, esi
.text:0040B2CE                 shr     edi, 1Fh
.text:0040B2D1                 dec     edi
.text:0040B2D2                 and     edi, esi
.text:0040B2D4                 mov     [ebp+4Ch], edi
.text:0040B2D7                 mov     esi, dword ptr [esp+0ECh+FindFileData.cFileName+0A8h]
.text:0040B2DB                 xor     edi, edi
.text:0040B2DD                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+4Ch], 989680h
.text:0040B2E5                 mov     edx, dword ptr [esp+0ECh+FindFileData.cFileName+0ACh]
.text:0040B2E9                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+50h], 0
.text:0040B2F1                 or      esi, ebx
.text:0040B2F3                 or      edi, edx
.text:0040B2F5                 mov     edx, esi
.text:0040B2F7                 mov     ebx, edi
.text:0040B2F9                 sub     edx, 0D53E8000h
.text:0040B2FF                 sbb     ebx, 19DB1DEh
.text:0040B305                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+48h], ebx
.text:0040B309                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+44h], edx
.text:0040B30C                 call    sub_41B300
.text:0040B311                 mov     ecx, eax
.text:0040B313                 shr     eax, 1Fh
.text:0040B316                 dec     eax
.text:0040B317                 and     ecx, eax
.text:0040B319                 mov     [ebp+40h], ecx
.text:0040B31C                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+48h], edi
.text:0040B320                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+4Ch], 989680h
.text:0040B328                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+50h], 0
.text:0040B330                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+44h], esi
.text:0040B333                 call    sub_41B420
.text:0040B338                 mov     dword ptr [ebp+50h], 200h
.text:0040B33F                 lea     ebx, [eax+eax*4]
.text:0040B342                 mov     edi, dword ptr [esp+0ECh+FindFileData.cFileName+88h]
.text:0040B346                 lea     edx, [ebx+ebx*4]
.text:0040B349                 mov     eax, dword ptr [esp+0ECh+FindFileData.cFileName+84h]
.text:0040B34D                 shl     edx, 2
.text:0040B350                 mov     ecx, edx
.text:0040B352                 shr     ecx, 1Fh
.text:0040B355                 dec     ecx
.text:0040B356                 and     ecx, edx
.text:0040B358                 test    edi, edi
.text:0040B35A                 mov     edx, dword ptr [esp+0ECh+FindFileData.cFileName+88h]
.text:0040B35E                 mov     [ebp+44h], ecx
.text:0040B361                 js      loc_40B477
.text:0040B367
.text:0040B367 loc_40B367:                             ; CODE XREF: sub_40ACC0+7BF↓j
.text:0040B367                 mov     edi, dword ptr [esp+0ECh+FindFileData.cFileName+84h]
.text:0040B36B                 xor     esi, esi
.text:0040B36D                 mov     ecx, eax
.text:0040B36F                 shrd    ecx, edx, 9
.text:0040B373                 mov     ebx, edx
.text:0040B375                 mov     eax, esi
.text:0040B377                 and     edi, 1FFh
.text:0040B37D                 sar     ebx, 9
.text:0040B380                 or      eax, edi
.text:0040B382                 jz      short loc_40B38A
.text:0040B384                 add     ecx, 1
.text:0040B387                 adc     ebx, 0
.text:0040B38A
.text:0040B38A loc_40B38A:                             ; CODE XREF: sub_40ACC0+6C2↑j
.text:0040B38A                 mov     [ebp+5Ch], ebx
.text:0040B38D                 mov     esi, dword_41D0A0
.text:0040B393                 xor     edi, edi
.text:0040B395                 mov     [ebp+58h], ecx
.text:0040B398                 mov     ebx, dword_41D0A0
.text:0040B39E                 mov     ecx, dword ptr [esp+0ECh+FindFileData.cFileName+88h]
.text:0040B3A2                 mov     edx, dword ptr [esp+0ECh+FindFileData.cFileName+84h]
.text:0040B3A6                 mov     [ebp+50h], ebx
.text:0040B3A9                 shr     ebx, 9
.text:0040B3AC                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+50h], edi
.text:0040B3B0                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+48h], ecx
.text:0040B3B4                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+4Ch], esi
.text:0040B3B8                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+44h], edx
.text:0040B3BB                 call    sub_41B300
.text:0040B3C0                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+50h], edi
.text:0040B3C4                 mov     ecx, dword ptr [esp+0ECh+FindFileData.cFileName+84h]
.text:0040B3C8                 mov     edi, dword ptr [esp+0ECh+FindFileData.cFileName+88h]
.text:0040B3CC                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+74h], ebx
.text:0040B3D0                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+7Ch], eax
.text:0040B3D4                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+80h], edx
.text:0040B3D8                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+78h], 0
.text:0040B3E0                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+4Ch], esi
.text:0040B3E4                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+44h], ecx
.text:0040B3E7                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+48h], edi
.text:0040B3EB                 call    sub_41B420
.text:0040B3F0                 mov     ebx, edx
.text:0040B3F2                 or      ebx, eax
.text:0040B3F4                 jz      short loc_40B450
.text:0040B3F6                 mov     edi, dword ptr [esp+0ECh+FindFileData.cFileName+7Ch]
.text:0040B3FA                 mov     esi, dword ptr [esp+0ECh+FindFileData.cFileName+80h]
.text:0040B3FE                 mov     eax, dword ptr [esp+0ECh+FindFileData.cFileName+74h]
.text:0040B402                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+6Ch], edi
.text:0040B406                 mov     ecx, dword ptr [esp+0ECh+FindFileData.cFileName+78h]
.text:0040B40A                 add     dword ptr [esp+0ECh+FindFileData.cFileName+6Ch], 1
.text:0040B40F                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+70h], esi
.text:0040B413                 adc     dword ptr [esp+0ECh+FindFileData.cFileName+70h], 0
.text:0040B418                 mul     dword ptr [esp+0ECh+FindFileData.cFileName+6Ch]
.text:0040B41C                 mov     edi, dword ptr [esp+0ECh+FindFileData.cFileName+70h]
.text:0040B420                 mov     ebx, edx
.text:0040B422                 mov     edx, dword ptr [esp+0ECh+FindFileData.cFileName+6Ch]
.text:0040B426                 mov     esi, eax
.text:0040B428                 mov     eax, ebx
.text:0040B42A                 imul    ecx, edx
.text:0040B42D                 mov     edx, dword ptr [esp+0ECh+FindFileData.cFileName+74h]
.text:0040B431                 imul    edx, edi
.text:0040B434                 add     eax, ecx
.text:0040B436                 lea     edi, [edx+eax]
.text:0040B439
.text:0040B439 loc_40B439:                             ; CODE XREF: sub_40ACC0+7B5↓j
.text:0040B439                 mov     [ebp+58h], esi
.text:0040B43C                 xor     eax, eax
.text:0040B43E                 mov     [ebp+5Ch], edi
.text:0040B441
.text:0040B441 loc_40B441:                             ; CODE XREF: sub_40ACC0+400↑j
.text:0040B441                 add     esp, 0DCh
.text:0040B447                 pop     ebx
.text:0040B448                 pop     esi
.text:0040B449                 pop     edi
.text:0040B44A                 pop     ebp
.text:0040B44B                 retn
.text:0040B44B ; ---------------------------------------------------------------------------
.text:0040B44C                 align 10h
.text:0040B450
.text:0040B450 loc_40B450:                             ; CODE XREF: sub_40ACC0+734↑j
.text:0040B450                 mov     eax, dword ptr [esp+0ECh+FindFileData.cFileName+7Ch]
.text:0040B454                 mov     edi, dword ptr [esp+0ECh+FindFileData.cFileName+78h]
.text:0040B458                 mov     ebx, dword ptr [esp+0ECh+FindFileData.cFileName+7Ch]
.text:0040B45C                 mul     dword ptr [esp+0ECh+FindFileData.cFileName+74h]
.text:0040B460                 mov     ecx, dword ptr [esp+0ECh+FindFileData.cFileName+74h]
.text:0040B464                 imul    ebx, edi
.text:0040B467                 mov     esi, eax
.text:0040B469                 mov     eax, dword ptr [esp+0ECh+FindFileData.cFileName+80h]
.text:0040B46D                 add     edx, ebx
.text:0040B46F                 imul    ecx, eax
.text:0040B472                 lea     edi, [ecx+edx]
.text:0040B475                 jmp     short loc_40B439
.text:0040B477 ; ---------------------------------------------------------------------------
.text:0040B477
.text:0040B477 loc_40B477:                             ; CODE XREF: sub_40ACC0+6A1↑j
.text:0040B477                 add     eax, 1FFh
.text:0040B47C                 adc     edx, 0
.text:0040B47F                 jmp     loc_40B367
.text:0040B484 ; ---------------------------------------------------------------------------
.text:0040B484
.text:0040B484 loc_40B484:                             ; CODE XREF: sub_40ACC0+489↑j
.text:0040B484                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+44h], esi ; hFile
.text:0040B487                 lea     ecx, [esp+0ECh+FindFileData.cFileName+0F4h]
.text:0040B48E                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+48h], ecx ; lpFileSizeHigh
.text:0040B492                 call    GetFileSize
.text:0040B497                 sub     esp, 8
.text:0040B49A                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+0F8h], eax
.text:0040B4A1                 jmp     loc_40B150
.text:0040B4A6 ; ---------------------------------------------------------------------------
.text:0040B4A6
.text:0040B4A6 loc_40B4A6:                             ; CODE XREF: sub_40ACC0+476↑j
.text:0040B4A6                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+90h], 0
.text:0040B4AE                 lea     ecx, [esp+0ECh+FindFileData.cFileName+90h]
.text:0040B4B2                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+58h], 0 ; lpBytesLeftThisMessage
.text:0040B4BA                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+54h], ecx ; lpTotalBytesAvail
.text:0040B4BE                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+50h], 0 ; lpBytesRead
.text:0040B4C6                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+4Ch], 0 ; nBufferSize
.text:0040B4CE                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+48h], 0 ; lpBuffer
.text:0040B4D6                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+44h], esi ; hNamedPipe
.text:0040B4D9                 call    PeekNamedPipe
.text:0040B4DE                 sub     esp, 18h
.text:0040B4E1                 test    eax, eax
.text:0040B4E3                 jz      short loc_40B4FE
.text:0040B4E5                 mov     ecx, dword ptr [esp+0ECh+FindFileData.cFileName+90h]
.text:0040B4E9                 xor     eax, eax
.text:0040B4EB                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+0F4h], eax
.text:0040B4F2                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+0F8h], ecx
.text:0040B4F9                 jmp     loc_40B13C
.text:0040B4FE ; ---------------------------------------------------------------------------
.text:0040B4FE
.text:0040B4FE loc_40B4FE:                             ; CODE XREF: sub_40ACC0+823↑j
.text:0040B4FE                 mov     ecx, dword ptr [esp+0ECh+FindFileData.cFileName+0F8h]
.text:0040B505                 jmp     loc_40B13C
.text:0040B505 ; ---------------------------------------------------------------------------
.text:0040B50A                 align 10h
.text:0040B510
.text:0040B510 loc_40B510:                             ; CODE XREF: sub_40ACC0+439↑j
.text:0040B510                 mov     edx, 1000h
.text:0040B515                 jmp     loc_40B0FF
.text:0040B515 ; ---------------------------------------------------------------------------
.text:0040B51A                 align 10h
.text:0040B520
.text:0040B520 loc_40B520:                             ; CODE XREF: sub_40ACC0+430↑j
.text:0040B520                 mov     edx, 2000h
.text:0040B525                 jmp     loc_40B0FF
.text:0040B525 sub_40ACC0      endp ; sp-analysis failed
.text:0040B525
.text:0040B525 ; ---------------------------------------------------------------------------
.text:0040B52A aLnk            db '.lnk',0             ; DATA XREF: sub_40B570+E0↓o
.text:0040B52A                                         ; .text:0040BC1A↓o ...
.text:0040B52F ; const CHAR aKernel32[]
.text:0040B52F aKernel32       db 'KERNEL32',0         ; DATA XREF: sub_40B570+12D↓o
.text:0040B52F                                         ; .text:0040C2CB↓o
.text:0040B538 ; const CHAR aGetcompressedf[]
.text:0040B538 aGetcompressedf db 'GetCompressedFileSizeA',0
.text:0040B538                                         ; DATA XREF: sub_40B570+13E↓o
.text:0040B538                                         ; .text:0040C2DC↓o
.text:0040B54F ; const CHAR aGetbinarytypea[]
.text:0040B54F aGetbinarytypea db 'GetBinaryTypeA',0   ; DATA XREF: sub_40B570+333↓o
.text:0040B54F                                         ; .text:0040BC76↓o ...
.text:0040B55E ; const char aPathext[]
.text:0040B55E aPathext        db 'PATHEXT',0          ; DATA XREF: sub_40B570:loc_40B957↓o
.text:0040B55E                                         ; .text:loc_40BD20↓o ...
.text:0040B566                 align 10h
.text:0040B570
.text:0040B570 ; =============== S U B R O U T I N E =======================================
.text:0040B570
.text:0040B570
.text:0040B570 ; int __cdecl sub_40B570(char *String1, int)
.text:0040B570 sub_40B570      proc near               ; CODE XREF: sub_40C350+3CD↓p
.text:0040B570                                         ; sub_4197F0-CFBB↓p
.text:0040B570
.text:0040B570 Str             = dword ptr -6Ch
.text:0040B570 lpProcName      = dword ptr -68h
.text:0040B570 var_64          = dword ptr -64h
.text:0040B570 var_60          = dword ptr -60h
.text:0040B570 var_5C          = dword ptr -5Ch
.text:0040B570 var_4C          = dword ptr -4Ch
.text:0040B570 var_48          = dword ptr -48h
.text:0040B570 var_44          = dword ptr -44h
.text:0040B570 var_40          = dword ptr -40h
.text:0040B570 var_3C          = dword ptr -3Ch
.text:0040B570 var_38          = dword ptr -38h
.text:0040B570 lpRootPathName  = dword ptr -30h
.text:0040B570 var_2C          = byte ptr -2Ch
.text:0040B570 var_28          = dword ptr -28h
.text:0040B570 var_24          = dword ptr -24h
.text:0040B570 var_20          = dword ptr -20h
.text:0040B570 var_1C          = dword ptr -1Ch
.text:0040B570 var_18          = byte ptr -18h
.text:0040B570 String1         = dword ptr  4
.text:0040B570 arg_4           = dword ptr  8
.text:0040B570
.text:0040B570                 push    ebp
.text:0040B571                 push    edi
.text:0040B572                 push    esi
.text:0040B573                 push    ebx
.text:0040B574                 sub     esp, 5Ch
.text:0040B577                 mov     edx, [esp+6Ch+String1]
.text:0040B57B                 mov     [esp+6Ch+Str], edx ; LPCSTR
.text:0040B57E                 call    sub_40D120
.text:0040B583                 mov     [esp+6Ch+Str], eax
.text:0040B586                 call    sub_40CCF0
.text:0040B58B                 mov     [esp+6Ch+lpRootPathName], eax
.text:0040B58F                 test    eax, eax
.text:0040B591                 jz      loc_40B7C3
.text:0040B597                 mov     [esp+6Ch+Str], eax ; Str
.text:0040B59A                 call    strlen
.text:0040B59F                 mov     edx, [esp+6Ch+arg_4]
.text:0040B5A3                 mov     ebx, eax
.text:0040B5A5                 mov     esi, [edx+0Ch]
.text:0040B5A8                 mov     edi, [edx+8]
.text:0040B5AB                 mov     eax, esi
.text:0040B5AD                 or      eax, edi
.text:0040B5AF                 jz      loc_40B9D0
.text:0040B5B5                 mov     ecx, [esp+6Ch+lpRootPathName]
.text:0040B5B9                 mov     [esp+6Ch+Str], ecx ; lpRootPathName
.text:0040B5BC                 call    GetDriveTypeA
.text:0040B5C1                 sub     esp, 4
.text:0040B5C4                 cmp     eax, 4
.text:0040B5C7                 jz      loc_40B9D0
.text:0040B5CD
.text:0040B5CD loc_40B5CD:                             ; CODE XREF: sub_40B570+48A↓j
.text:0040B5CD                                         ; sub_40B570+4B2↓j
.text:0040B5CD                 mov     edx, [esp+6Ch+arg_4]
.text:0040B5D1                 mov     esi, [edx+14h]
.text:0040B5D4                 mov     edi, [edx+10h]
.text:0040B5D7                 mov     ecx, esi
.text:0040B5D9                 or      ecx, edi
.text:0040B5DB                 jnz     short loc_40B605
.text:0040B5DD                 mov     ebp, [esp+6Ch+lpRootPathName]
.text:0040B5E1                 xor     esi, esi
.text:0040B5E3                 xor     edi, edi
.text:0040B5E5                 test    ebp, ebp
.text:0040B5E7                 jz      short loc_40B5F7
.text:0040B5E9                 movzx   ebx, byte ptr [ebp+0]
.text:0040B5ED                 test    bl, bl
.text:0040B5EF                 mov     cl, bl
.text:0040B5F1                 jnz     loc_40B981
.text:0040B5F7
.text:0040B5F7 loc_40B5F7:                             ; CODE XREF: sub_40B570+77↑j
.text:0040B5F7                 xor     eax, eax
.text:0040B5F9                 xor     edx, edx
.text:0040B5FB
.text:0040B5FB loc_40B5FB:                             ; CODE XREF: sub_40B570+458↓j
.text:0040B5FB                 mov     ebp, [esp+6Ch+arg_4]
.text:0040B5FF                 mov     [ebp+10h], eax
.text:0040B602                 mov     [ebp+14h], edx
.text:0040B605
.text:0040B605 loc_40B605:                             ; CODE XREF: sub_40B570+6B↑j
.text:0040B605                 mov     edi, [esp+6Ch+String1]
.text:0040B609                 xor     ebx, ebx
.text:0040B60B                 test    edi, edi
.text:0040B60D                 jz      loc_40B883
.text:0040B613                 mov     esi, [esp+6Ch+String1]
.text:0040B617                 cmp     byte ptr [esi], 0
.text:0040B61A                 jnz     loc_40B890
.text:0040B620
.text:0040B620 loc_40B620:                             ; CODE XREF: sub_40B570+38C↓j
.text:0040B620                                         ; sub_40B570+397↓j
.text:0040B620                 mov     ebp, [esp+6Ch+String1]
.text:0040B624                 test    ebp, ebp
.text:0040B626                 jz      loc_40B883
.text:0040B62C                 mov     [esp+6Ch+lpProcName], 2Eh ; '.' ; Ch
.text:0040B634                 mov     edi, [esp+6Ch+String1]
.text:0040B638                 mov     [esp+6Ch+Str], edi ; Str
.text:0040B63B                 call    strrchr
.text:0040B640                 test    eax, eax
.text:0040B642                 jz      loc_40B883
.text:0040B648                 cld
.text:0040B649                 mov     ecx, 5
.text:0040B64E                 mov     esi, eax
.text:0040B650                 mov     edi, offset aLnk ; ".lnk"
.text:0040B655                 repe cmpsb
.text:0040B657                 setz    cl
.text:0040B65A                 movzx   eax, cl
.text:0040B65D                 lea     esi, [esi+0]
.text:0040B660
.text:0040B660 loc_40B660:                             ; CODE XREF: sub_40B570+315↓j
.text:0040B660                 test    eax, eax
.text:0040B662                 jz      short loc_40B66A
.text:0040B664                 or      ebx, 0A000h
.text:0040B66A
.text:0040B66A loc_40B66A:                             ; CODE XREF: sub_40B570+F2↑j
.text:0040B66A                 mov     esi, [esp+6Ch+arg_4]
.text:0040B66E                 xor     ecx, ecx
.text:0040B670                 mov     edi, ds:dword_41E4F0
.text:0040B676                 or      [esi], ebx
.text:0040B678                 mov     ebx, [esi+14h]
.text:0040B67B                 mov     ebp, [esi+10h]
.text:0040B67E                 mov     eax, ebx
.text:0040B680                 xor     eax, ecx
.text:0040B682                 xor     ebp, edi
.text:0040B684                 or      eax, ebp
.text:0040B686                 jnz     loc_40B810
.text:0040B68C
.text:0040B68C loc_40B68C:                             ; CODE XREF: sub_40B570+30E↓j
.text:0040B68C                 mov     ecx, dword_41D0A0
.text:0040B692                 xor     esi, esi
.text:0040B694                 xor     edi, edi
.text:0040B696                 mov     edx, [esp+6Ch+arg_4]
.text:0040B69A                 mov     [edx+50h], ecx
.text:0040B69D                 mov     [esp+6Ch+Str], offset aKernel32 ; "KERNEL32"
.text:0040B6A4                 call    LoadLibraryA
.text:0040B6A9                 sub     esp, 4
.text:0040B6AC                 mov     ebp, eax
.text:0040B6AE                 mov     [esp+6Ch+lpProcName], offset aGetcompressedf ; "GetCompressedFileSizeA"
.text:0040B6B6                 mov     [esp+6Ch+Str], eax ; hModule
.text:0040B6B9                 call    GetProcAddress
.text:0040B6BE                 sub     esp, 8
.text:0040B6C1                 test    eax, eax
.text:0040B6C3                 jz      short loc_40B6F8
.text:0040B6C5                 mov     ebx, [esp+6Ch+String1]
.text:0040B6C9                 lea     esi, [esp+6Ch+var_2C]
.text:0040B6CD                 mov     [esp+6Ch+lpProcName], esi
.text:0040B6D1                 mov     [esp+6Ch+Str], ebx
.text:0040B6D4                 call    eax
.text:0040B6D6                 sub     esp, 8
.text:0040B6D9                 mov     ebx, eax
.text:0040B6DB                 cmp     eax, 0FFFFFFFFh
.text:0040B6DE                 jz      loc_40B7F9
.text:0040B6E4
.text:0040B6E4 loc_40B6E4:                             ; CODE XREF: sub_40B570+29A↓j
.text:0040B6E4                 mov     esi, dword ptr [esp+6Ch+var_2C]
.text:0040B6E8                 mov     ecx, ebx
.text:0040B6EA                 xor     edi, edi
.text:0040B6EC                 xor     ebx, ebx
.text:0040B6EE                 mov     edx, esi
.text:0040B6F0                 mov     esi, ecx
.text:0040B6F2                 or      esi, edi
.text:0040B6F4                 mov     edi, ebx
.text:0040B6F6                 or      edi, edx
.text:0040B6F8
.text:0040B6F8 loc_40B6F8:                             ; CODE XREF: sub_40B570+153↑j
.text:0040B6F8                                         ; sub_40B570+294↓j
.text:0040B6F8                 test    ebp, ebp
.text:0040B6FA                 jz      short loc_40B707
.text:0040B6FC                 mov     [esp+6Ch+Str], ebp ; hLibModule
.text:0040B6FF                 call    FreeLibrary
.text:0040B704                 sub     esp, 4
.text:0040B707
.text:0040B707 loc_40B707:                             ; CODE XREF: sub_40B570+18A↑j
.text:0040B707                 mov     ebp, edi
.text:0040B709                 mov     edx, ebp
.text:0040B70B                 mov     edi, esi
.text:0040B70D                 or      edx, esi
.text:0040B70F                 jnz     short loc_40B71B
.text:0040B711                 mov     eax, [esp+6Ch+arg_4]
.text:0040B715                 mov     edi, [eax+30h]
.text:0040B718                 mov     ebp, [eax+34h]
.text:0040B71B
.text:0040B71B loc_40B71B:                             ; CODE XREF: sub_40B570+19F↑j
.text:0040B71B                 mov     [esp+6Ch+lpProcName], ebp
.text:0040B71F                 mov     ebx, dword_41D0A0
.text:0040B725                 xor     esi, esi
.text:0040B727                 mov     [esp+6Ch+var_60], esi
.text:0040B72B                 mov     [esp+6Ch+Str], edi
.text:0040B72E                 mov     [esp+6Ch+var_64], ebx
.text:0040B732                 call    sub_41B300
.text:0040B737                 mov     [esp+6Ch+var_3C], eax
.text:0040B73B                 mov     ecx, dword_41D0A0
.text:0040B741                 mov     [esp+6Ch+lpProcName], ebp
.text:0040B745                 mov     [esp+6Ch+var_38], edx
.text:0040B749                 shr     ecx, 9
.text:0040B74C                 mov     [esp+6Ch+var_44], ecx
.text:0040B750                 mov     [esp+6Ch+var_40], 0
.text:0040B758                 mov     [esp+6Ch+var_64], ebx
.text:0040B75C                 mov     [esp+6Ch+var_60], esi
.text:0040B760                 mov     [esp+6Ch+Str], edi
.text:0040B763                 call    sub_41B420
.text:0040B768                 mov     ebp, edx
.text:0040B76A                 or      ebp, eax
.text:0040B76C                 jz      short loc_40B7D0
.text:0040B76E                 mov     ebp, [esp+6Ch+var_3C]
.text:0040B772                 mov     esi, [esp+6Ch+var_38]
.text:0040B776                 mov     eax, [esp+6Ch+var_44]
.text:0040B77A                 mov     [esp+6Ch+var_4C], ebp
.text:0040B77E                 mov     ecx, [esp+6Ch+var_40]
.text:0040B782                 mov     ebx, [esp+6Ch+var_44]
.text:0040B786                 add     [esp+6Ch+var_4C], 1
.text:0040B78B                 mov     [esp+6Ch+var_48], esi
.text:0040B78F                 mov     edi, [esp+6Ch+var_4C]
.text:0040B793                 adc     [esp+6Ch+var_48], 0
.text:0040B798                 mul     [esp+6Ch+var_4C]
.text:0040B79C                 imul    ecx, edi
.text:0040B79F                 mov     esi, eax
.text:0040B7A1                 mov     eax, [esp+6Ch+var_48]
.text:0040B7A5                 add     edx, ecx
.text:0040B7A7                 imul    ebx, eax
.text:0040B7AA                 lea     edi, [ebx+edx]
.text:0040B7AD
.text:0040B7AD loc_40B7AD:                             ; CODE XREF: sub_40B570+287↓j
.text:0040B7AD                 mov     ebx, [esp+6Ch+arg_4]
.text:0040B7B1                 mov     [ebx+58h], esi
.text:0040B7B4                 mov     esi, [esp+6Ch+lpRootPathName]
.text:0040B7B8                 mov     [ebx+5Ch], edi
.text:0040B7BB                 mov     [esp+6Ch+Str], esi ; Block
.text:0040B7BE                 call    free
.text:0040B7C3
.text:0040B7C3 loc_40B7C3:                             ; CODE XREF: sub_40B570+21↑j
.text:0040B7C3                 add     esp, 5Ch
.text:0040B7C6                 xor     eax, eax
.text:0040B7C8                 pop     ebx
.text:0040B7C9                 pop     esi
.text:0040B7CA                 pop     edi
.text:0040B7CB                 pop     ebp
.text:0040B7CC                 retn
.text:0040B7CC ; ---------------------------------------------------------------------------
.text:0040B7CD                 align 10h
.text:0040B7D0
.text:0040B7D0 loc_40B7D0:                             ; CODE XREF: sub_40B570+1FC↑j
.text:0040B7D0                 mov     eax, [esp+6Ch+var_3C]
.text:0040B7D4                 mov     edi, [esp+6Ch+var_40]
.text:0040B7D8                 mov     ecx, [esp+6Ch+var_3C]
.text:0040B7DC                 mul     [esp+6Ch+var_44]
.text:0040B7E0                 mov     ebx, [esp+6Ch+var_44]
.text:0040B7E4                 imul    ecx, edi
.text:0040B7E7                 mov     ebp, edx
.text:0040B7E9                 mov     esi, eax
.text:0040B7EB                 mov     edx, [esp+6Ch+var_38]
.text:0040B7EF                 add     ebp, ecx
.text:0040B7F1                 imul    ebx, edx
.text:0040B7F4                 lea     edi, [ebx+ebp]
.text:0040B7F7                 jmp     short loc_40B7AD
.text:0040B7F9 ; ---------------------------------------------------------------------------
.text:0040B7F9
.text:0040B7F9 loc_40B7F9:                             ; CODE XREF: sub_40B570+16E↑j
.text:0040B7F9                 call    GetLastError
.text:0040B7FE                 xor     esi, esi
.text:0040B800                 xor     edi, edi
.text:0040B802                 test    eax, eax
.text:0040B804                 jnz     loc_40B6F8
.text:0040B80A                 jmp     loc_40B6E4
.text:0040B80A ; ---------------------------------------------------------------------------
.text:0040B80F                 align 10h
.text:0040B810
.text:0040B810 loc_40B810:                             ; CODE XREF: sub_40B570+116↑j
.text:0040B810                 mov     edx, [esp+6Ch+lpRootPathName]
.text:0040B814                 lea     ecx, [esp+6Ch+var_20]
.text:0040B818                 lea     ebx, [esp+6Ch+var_1C]
.text:0040B81C                 mov     [esp+6Ch+var_5C], ebx ; LPDWORD
.text:0040B820                 lea     edi, [esp+6Ch+var_24]
.text:0040B824                 lea     ebp, [esp+6Ch+var_28]
.text:0040B828                 mov     [esp+6Ch+var_60], ecx ; LPDWORD
.text:0040B82C                 mov     [esp+6Ch+var_64], edi ; LPDWORD
.text:0040B830                 mov     [esp+6Ch+lpProcName], ebp ; LPDWORD
.text:0040B834                 mov     [esp+6Ch+Str], edx ; LPCSTR
.text:0040B837                 call    sub_40DB40
.text:0040B83C                 test    eax, eax
.text:0040B83E                 jnz     short loc_40B860
.text:0040B840                 mov     [esp+6Ch+var_28], 1
.text:0040B848                 mov     [esp+6Ch+var_24], 200h
.text:0040B850                 mov     [esp+6Ch+var_20], 0
.text:0040B858                 mov     [esp+6Ch+var_1C], 0
.text:0040B860
.text:0040B860 loc_40B860:                             ; CODE XREF: sub_40B570+2CE↑j
.text:0040B860                 mov     ebp, [esp+6Ch+var_24]
.text:0040B864                 mov     edi, [esp+6Ch+var_28]
.text:0040B868                 mov     eax, [esp+6Ch+arg_4]
.text:0040B86C                 imul    ebp, edi
.text:0040B86F                 mov     esi, [eax+10h]
.text:0040B872                 mov     dword_41D0A0, ebp
.text:0040B878                 mov     ds:dword_41E4F0, esi
.text:0040B87E                 jmp     loc_40B68C
.text:0040B883 ; ---------------------------------------------------------------------------
.text:0040B883
.text:0040B883 loc_40B883:                             ; CODE XREF: sub_40B570+9D↑j
.text:0040B883                                         ; sub_40B570+B6↑j ...
.text:0040B883                 xor     eax, eax
.text:0040B885                 jmp     loc_40B660
.text:0040B885 ; ---------------------------------------------------------------------------
.text:0040B88A                 align 10h
.text:0040B890
.text:0040B890 loc_40B890:                             ; CODE XREF: sub_40B570+AA↑j
.text:0040B890                 mov     [esp+6Ch+Str], offset ModuleName ; "KERNEL32.DLL"
.text:0040B897                 xor     ebp, ebp
.text:0040B899                 call    GetModuleHandleA
.text:0040B89E                 sub     esp, 4
.text:0040B8A1                 mov     edi, eax
.text:0040B8A3                 mov     [esp+6Ch+lpProcName], offset aGetbinarytypea ; "GetBinaryTypeA"
.text:0040B8AB                 mov     [esp+6Ch+Str], eax ; hModule
.text:0040B8AE                 call    GetProcAddress
.text:0040B8B3                 sub     esp, 8
.text:0040B8B6                 mov     edx, eax
.text:0040B8B8                 test    eax, eax
.text:0040B8BA                 jz      short loc_40B8D4
.text:0040B8BC                 mov     eax, [esp+6Ch+String1]
.text:0040B8C0                 lea     ecx, [esp+6Ch+var_18]
.text:0040B8C4                 mov     [esp+6Ch+lpProcName], ecx
.text:0040B8C8                 mov     [esp+6Ch+Str], eax
.text:0040B8CB                 call    edx
.text:0040B8CD                 sub     esp, 8
.text:0040B8D0                 test    eax, eax
.text:0040B8D2                 jnz     short loc_40B938
.text:0040B8D4
.text:0040B8D4 loc_40B8D4:                             ; CODE XREF: sub_40B570+34A↑j
.text:0040B8D4                 mov     edx, ds:dword_41E500
.text:0040B8DA                 test    edx, edx
.text:0040B8DC                 jz      short loc_40B957
.text:0040B8DE
.text:0040B8DE loc_40B8DE:                             ; CODE XREF: sub_40B570+3FA↓j
.text:0040B8DE                                         ; sub_40B570+40C↓j
.text:0040B8DE                 mov     eax, [esp+6Ch+String1]
.text:0040B8E2                 test    eax, eax
.text:0040B8E4                 jz      short loc_40B8EF
.text:0040B8E6                 mov     esi, [esp+6Ch+String1]
.text:0040B8EA                 cmp     byte ptr [esi], 0
.text:0040B8ED                 jnz     short loc_40B90C
.text:0040B8EF
.text:0040B8EF loc_40B8EF:                             ; CODE XREF: sub_40B570+374↑j
.text:0040B8EF                                         ; sub_40B570+3B0↓j ...
.text:0040B8EF                 mov     [esp+6Ch+Str], edi ; hLibModule
.text:0040B8F2                 call    FreeLibrary
.text:0040B8F7                 sub     esp, 4
.text:0040B8FA                 test    ebp, ebp
.text:0040B8FC                 jz      loc_40B620
.text:0040B902                 mov     ebx, 49h ; 'I'
.text:0040B907                 jmp     loc_40B620
.text:0040B90C ; ---------------------------------------------------------------------------
.text:0040B90C
.text:0040B90C loc_40B90C:                             ; CODE XREF: sub_40B570+37D↑j
.text:0040B90C                 mov     [esp+6Ch+Str], esi ; Str
.text:0040B90F                 mov     [esp+6Ch+lpProcName], 2Eh ; '.' ; Ch
.text:0040B917                 call    strrchr
.text:0040B91C                 test    eax, eax
.text:0040B91E                 mov     esi, eax
.text:0040B920                 jz      short loc_40B8EF
.text:0040B922                 mov     [esp+6Ch+lpProcName], eax ; SubStr
.text:0040B926                 mov     ecx, ds:dword_41E500
.text:0040B92C                 mov     [esp+6Ch+Str], ecx ; Str
.text:0040B92F                 call    strstr
.text:0040B934                 test    eax, eax
.text:0040B936                 jz      short loc_40B93F
.text:0040B938
.text:0040B938 loc_40B938:                             ; CODE XREF: sub_40B570+362↑j
.text:0040B938                                         ; sub_40B570+3E5↓j
.text:0040B938                 mov     ebp, 1
.text:0040B93D                 jmp     short loc_40B8EF
.text:0040B93F ; ---------------------------------------------------------------------------
.text:0040B93F
.text:0040B93F loc_40B93F:                             ; CODE XREF: sub_40B570+3C6↑j
.text:0040B93F                 mov     [esp+6Ch+lpProcName], esi ; SubStr
.text:0040B943                 mov     edx, off_41D0A4 ; ".com;.exe;.bat;.cmd"
.text:0040B949                 mov     [esp+6Ch+Str], edx ; Str
.text:0040B94C                 call    strstr
.text:0040B951                 test    eax, eax
.text:0040B953                 jz      short loc_40B8EF
.text:0040B955                 jmp     short loc_40B938
.text:0040B957 ; ---------------------------------------------------------------------------
.text:0040B957
.text:0040B957 loc_40B957:                             ; CODE XREF: sub_40B570+36C↑j
.text:0040B957                 mov     [esp+6Ch+Str], offset aPathext ; "PATHEXT"
.text:0040B95E                 call    getenv
.text:0040B963                 mov     ds:dword_41E500, eax
.text:0040B968                 test    eax, eax
.text:0040B96A                 jnz     loc_40B8DE
.text:0040B970                 mov     esi, off_41D0A4 ; ".com;.exe;.bat;.cmd"
.text:0040B976                 mov     ds:dword_41E500, esi
.text:0040B97C                 jmp     loc_40B8DE
.text:0040B981 ; ---------------------------------------------------------------------------
.text:0040B981
.text:0040B981 loc_40B981:                             ; CODE XREF: sub_40B570+81↑j
.text:0040B981                                         ; sub_40B570+452↓j
.text:0040B981                 shld    edi, esi, 8
.text:0040B985                 movsx   eax, cl
.text:0040B988                 shl     esi, 8
.text:0040B98B                 cdq
.text:0040B98C                 add     esi, eax
.text:0040B98E                 adc     edi, edx
.text:0040B990                 mov     edx, edi
.text:0040B992                 xor     ebx, ebx
.text:0040B994                 and     edx, 0FF000000h
.text:0040B99A                 mov     eax, edx
.text:0040B99C                 or      eax, ebx
.text:0040B99E                 jz      short loc_40B9B9
.text:0040B9A0                 mov     ecx, edx
.text:0040B9A2                 xor     eax, eax
.text:0040B9A4                 shr     ecx, 10h
.text:0040B9A7                 mov     edx, esi
.text:0040B9A9                 xor     edx, ecx
.text:0040B9AB                 mov     ecx, edi
.text:0040B9AD                 xor     ecx, eax
.text:0040B9AF                 mov     esi, edx
.text:0040B9B1                 mov     edi, ecx
.text:0040B9B3                 and     edi, 0FFFFFFh
.text:0040B9B9
.text:0040B9B9 loc_40B9B9:                             ; CODE XREF: sub_40B570+42E↑j
.text:0040B9B9                 inc     ebp
.text:0040B9BA                 movzx   ebx, byte ptr [ebp+0]
.text:0040B9BE                 test    bl, bl
.text:0040B9C0                 mov     cl, bl
.text:0040B9C2                 jnz     short loc_40B981
.text:0040B9C4                 mov     eax, esi
.text:0040B9C6                 mov     edx, edi
.text:0040B9C8                 jmp     loc_40B5FB
.text:0040B9C8 ; ---------------------------------------------------------------------------
.text:0040B9CD                 align 10h
.text:0040B9D0
.text:0040B9D0 loc_40B9D0:                             ; CODE XREF: sub_40B570+3F↑j
.text:0040B9D0                                         ; sub_40B570+57↑j
.text:0040B9D0                 mov     edi, [esp+6Ch+lpRootPathName]
.text:0040B9D4                 mov     ebp, [esp+6Ch+String1]
.text:0040B9D8                 mov     [esp+6Ch+lpProcName], edi ; String2
.text:0040B9DC                 mov     [esp+6Ch+Str], ebp ; String1
.text:0040B9DF                 call    _stricmp
.text:0040B9E4                 test    eax, eax
.text:0040B9E6                 jnz     short loc_40BA00
.text:0040B9E8                 mov     ebx, [esp+6Ch+arg_4]
.text:0040B9EC                 mov     dword ptr [ebx+8], 5
.text:0040B9F3                 mov     dword ptr [ebx+0Ch], 50000h
.text:0040B9FA                 jmp     loc_40B5CD
.text:0040B9FA ; ---------------------------------------------------------------------------
.text:0040B9FF                 align 10h
.text:0040BA00
.text:0040BA00 loc_40BA00:                             ; CODE XREF: sub_40B570+476↑j
.text:0040BA00                 mov     ebp, [esp+6Ch+String1]
.text:0040BA04                 xor     esi, esi
.text:0040BA06                 xor     edi, edi
.text:0040BA08                 add     ebp, ebx
.text:0040BA0A                 jz      short loc_40BA14
.text:0040BA0C                 movzx   ecx, byte ptr [ebp+0]
.text:0040BA10                 test    cl, cl
.text:0040BA12                 jnz     short loc_40BA27
.text:0040BA14
.text:0040BA14 loc_40BA14:                             ; CODE XREF: sub_40B570+49A↑j
.text:0040BA14                 xor     eax, eax
.text:0040BA16                 xor     edx, edx
.text:0040BA18
.text:0040BA18 loc_40BA18:                             ; CODE XREF: sub_40B570+4FE↓j
.text:0040BA18                 mov     ebp, [esp+6Ch+arg_4]
.text:0040BA1C                 mov     [ebp+8], eax
.text:0040BA1F                 mov     [ebp+0Ch], edx
.text:0040BA22                 jmp     loc_40B5CD
.text:0040BA27 ; ---------------------------------------------------------------------------
.text:0040BA27
.text:0040BA27 loc_40BA27:                             ; CODE XREF: sub_40B570+4A2↑j
.text:0040BA27                                         ; sub_40B570+4F8↓j
.text:0040BA27                 shld    edi, esi, 8
.text:0040BA2B                 movsx   eax, cl
.text:0040BA2E                 shl     esi, 8
.text:0040BA31                 cdq
.text:0040BA32                 add     esi, eax
.text:0040BA34                 adc     edi, edx
.text:0040BA36                 mov     edx, edi
.text:0040BA38                 xor     ebx, ebx
.text:0040BA3A                 and     edx, 0FF000000h
.text:0040BA40                 mov     eax, edx
.text:0040BA42                 or      eax, ebx
.text:0040BA44                 jz      short loc_40BA5F
.text:0040BA46                 mov     ecx, edx
.text:0040BA48                 xor     eax, eax
.text:0040BA4A                 shr     ecx, 10h
.text:0040BA4D                 mov     edx, esi
.text:0040BA4F                 xor     edx, ecx
.text:0040BA51                 mov     ecx, edi
.text:0040BA53                 xor     ecx, eax
.text:0040BA55                 mov     esi, edx
.text:0040BA57                 mov     edi, ecx
.text:0040BA59                 and     edi, 0FFFFFFh
.text:0040BA5F
.text:0040BA5F loc_40BA5F:                             ; CODE XREF: sub_40B570+4D4↑j
.text:0040BA5F                 inc     ebp
.text:0040BA60                 movzx   ebx, byte ptr [ebp+0]
.text:0040BA64                 test    bl, bl
.text:0040BA66                 mov     cl, bl
.text:0040BA68                 jnz     short loc_40BA27
.text:0040BA6A                 mov     eax, esi
.text:0040BA6C                 mov     edx, edi
.text:0040BA6E                 jmp     short loc_40BA18
.text:0040BA6E sub_40B570      endp
.text:0040BA6E
.text:0040BA70
.text:0040BA70 ; =============== S U B R O U T I N E =======================================
.text:0040BA70
.text:0040BA70
.text:0040BA70 ; int __cdecl sub_40BA70(LPCSTR)
.text:0040BA70 sub_40BA70      proc near               ; CODE XREF: sub_40D240+CA↓p
.text:0040BA70
.text:0040BA70 lpRootPathName  = dword ptr -83Ch
.text:0040BA70 lpVolumeNameBuffer= dword ptr -838h
.text:0040BA70 nVolumeNameSize = dword ptr -834h
.text:0040BA70 lpVolumeSerialNumber= dword ptr -830h
.text:0040BA70 lpMaximumComponentLength= dword ptr -82Ch
.text:0040BA70 lpFileSystemFlags= dword ptr -828h
.text:0040BA70 lpFileSystemNameBuffer= dword ptr -824h
.text:0040BA70 nFileSystemNameSize= dword ptr -820h
.text:0040BA70 VolumeSerialNumber= dword ptr -818h
.text:0040BA70 MaximumComponentLength= dword ptr -814h
.text:0040BA70 FileSystemFlags = dword ptr -810h
.text:0040BA70 FileSystemNameBuffer= byte ptr -80Ch
.text:0040BA70 VolumeNameBuffer= byte ptr -40Ch
.text:0040BA70 var_4           = dword ptr -4
.text:0040BA70 arg_0           = dword ptr  4
.text:0040BA70
.text:0040BA70                 sub     esp, 83Ch
.text:0040BA76                 mov     [esp+83Ch+var_4], ebx
.text:0040BA7D                 mov     ebx, [esp+83Ch+arg_0]
.text:0040BA84                 mov     [esp+83Ch+lpRootPathName], ebx ; LPCSTR
.text:0040BA87                 call    sub_40D120
.text:0040BA8C                 mov     [esp+83Ch+lpRootPathName], eax
.text:0040BA8F                 call    sub_40CCF0
.text:0040BA94                 mov     [esp+83Ch+lpRootPathName], eax ; lpRootPathName
.text:0040BA97                 lea     edx, [esp+83Ch+FileSystemNameBuffer]
.text:0040BA9B                 mov     ebx, eax
.text:0040BA9D                 mov     [esp+83Ch+lpFileSystemNameBuffer], edx ; lpFileSystemNameBuffer
.text:0040BAA1                 lea     ecx, [esp+83Ch+FileSystemFlags]
.text:0040BAA5                 lea     edx, [esp+83Ch+MaximumComponentLength]
.text:0040BAA9                 mov     [esp+83Ch+lpFileSystemFlags], ecx ; lpFileSystemFlags
.text:0040BAAD                 lea     ecx, [esp+83Ch+VolumeSerialNumber]
.text:0040BAB1                 mov     [esp+83Ch+lpMaximumComponentLength], edx ; lpMaximumComponentLength
.text:0040BAB5                 lea     edx, [esp+83Ch+VolumeNameBuffer]
.text:0040BABC                 mov     [esp+83Ch+lpVolumeSerialNumber], ecx ; lpVolumeSerialNumber
.text:0040BAC0                 mov     [esp+83Ch+lpVolumeNameBuffer], edx ; lpVolumeNameBuffer
.text:0040BAC4                 mov     [esp+83Ch+nFileSystemNameSize], 400h ; nFileSystemNameSize
.text:0040BACC                 mov     [esp+83Ch+nVolumeNameSize], 400h ; nVolumeNameSize
.text:0040BAD4                 call    GetVolumeInformationA
.text:0040BAD9                 sub     esp, 20h
.text:0040BADC                 test    eax, eax
.text:0040BADE                 setz    cl
.text:0040BAE1                 mov     [esp+83Ch+lpRootPathName], ebx ; Block
.text:0040BAE4                 movzx   edx, cl
.text:0040BAE7                 dec     edx
.text:0040BAE8                 and     [esp+83Ch+VolumeSerialNumber], edx
.text:0040BAEC                 call    free
.text:0040BAF1                 mov     eax, [esp+83Ch+VolumeSerialNumber]
.text:0040BAF5                 mov     ebx, [esp+83Ch+var_4]
.text:0040BAFC                 add     esp, 83Ch
.text:0040BB02                 retn
.text:0040BB02 sub_40BA70      endp
.text:0040BB02
.text:0040BB02 ; ---------------------------------------------------------------------------
.text:0040BB03                 align 10h
.text:0040BB10                 push    ebp
.text:0040BB11                 push    edi
.text:0040BB12                 xor     edi, edi
.text:0040BB14                 push    esi
.text:0040BB15                 xor     esi, esi
.text:0040BB17                 push    ebx
.text:0040BB18                 mov     ebp, [esp+14h]
.text:0040BB1C                 test    ebp, ebp
.text:0040BB1E                 jz      short loc_40BB28
.text:0040BB20                 movzx   ecx, byte ptr [ebp+0]
.text:0040BB24                 test    cl, cl
.text:0040BB26                 jnz     short loc_40BB31
.text:0040BB28
.text:0040BB28 loc_40BB28:                             ; CODE XREF: .text:0040BB1E↑j
.text:0040BB28                 xor     eax, eax
.text:0040BB2A                 xor     edx, edx
.text:0040BB2C
.text:0040BB2C loc_40BB2C:                             ; CODE XREF: .text:0040BB78↓j
.text:0040BB2C                 pop     ebx
.text:0040BB2D                 pop     esi
.text:0040BB2E                 pop     edi
.text:0040BB2F                 pop     ebp
.text:0040BB30                 retn
.text:0040BB31 ; ---------------------------------------------------------------------------
.text:0040BB31
.text:0040BB31 loc_40BB31:                             ; CODE XREF: .text:0040BB26↑j
.text:0040BB31                                         ; .text:0040BB72↓j
.text:0040BB31                 shld    edi, esi, 8
.text:0040BB35                 movsx   eax, cl
.text:0040BB38                 shl     esi, 8
.text:0040BB3B                 cdq
.text:0040BB3C                 add     esi, eax
.text:0040BB3E                 adc     edi, edx
.text:0040BB40                 mov     edx, edi
.text:0040BB42                 xor     ebx, ebx
.text:0040BB44                 and     edx, 0FF000000h
.text:0040BB4A                 mov     eax, edx
.text:0040BB4C                 or      eax, ebx
.text:0040BB4E                 jz      short loc_40BB69
.text:0040BB50                 mov     ecx, edx
.text:0040BB52                 xor     eax, eax
.text:0040BB54                 shr     ecx, 10h
.text:0040BB57                 mov     edx, esi
.text:0040BB59                 xor     edx, ecx
.text:0040BB5B                 mov     ecx, edi
.text:0040BB5D                 xor     ecx, eax
.text:0040BB5F                 mov     esi, edx
.text:0040BB61                 mov     edi, ecx
.text:0040BB63                 and     edi, 0FFFFFFh
.text:0040BB69
.text:0040BB69 loc_40BB69:                             ; CODE XREF: .text:0040BB4E↑j
.text:0040BB69                 inc     ebp
.text:0040BB6A                 movzx   ebx, byte ptr [ebp+0]
.text:0040BB6E                 test    bl, bl
.text:0040BB70                 mov     cl, bl
.text:0040BB72                 jnz     short loc_40BB31
.text:0040BB74                 mov     eax, esi
.text:0040BB76                 mov     edx, edi
.text:0040BB78                 jmp     short loc_40BB2C
.text:0040BB78 ; ---------------------------------------------------------------------------
.text:0040BB7A                 align 10h
.text:0040BB80                 sub     esp, 2Ch
.text:0040BB83                 lea     edx, [esp+24h]
.text:0040BB87                 lea     ecx, [esp+28h]
.text:0040BB8B                 mov     [esp+0Ch], edx
.text:0040BB8F                 lea     edx, [esp+1Ch]
.text:0040BB93                 mov     [esp+4], edx
.text:0040BB97                 mov     edx, [esp+30h]
.text:0040BB9B                 mov     [esp+10h], ecx
.text:0040BB9F                 lea     ecx, [esp+20h]
.text:0040BBA3                 mov     [esp+8], ecx
.text:0040BBA7                 mov     [esp], edx
.text:0040BBAA                 call    sub_40DB40
.text:0040BBAF                 test    eax, eax
.text:0040BBB1                 jnz     short loc_40BBD3
.text:0040BBB3                 mov     dword ptr [esp+1Ch], 1
.text:0040BBBB                 mov     dword ptr [esp+20h], 200h
.text:0040BBC3                 mov     dword ptr [esp+24h], 0
.text:0040BBCB                 mov     dword ptr [esp+28h], 0
.text:0040BBD3
.text:0040BBD3 loc_40BBD3:                             ; CODE XREF: .text:0040BBB1↑j
.text:0040BBD3                 mov     eax, [esp+20h]
.text:0040BBD7                 mov     ecx, [esp+1Ch]
.text:0040BBDB                 add     esp, 2Ch
.text:0040BBDE                 imul    eax, ecx
.text:0040BBE1                 retn
.text:0040BBE1 ; ---------------------------------------------------------------------------
.text:0040BBE2                 align 10h
.text:0040BBF0                 sub     esp, 1Ch
.text:0040BBF3                 mov     eax, [esp+20h]
.text:0040BBF7                 mov     [esp+14h], esi
.text:0040BBFB                 mov     [esp+18h], edi
.text:0040BBFF                 test    eax, eax
.text:0040BC01                 jz      short loc_40BC40
.text:0040BC03                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:0040BC0B                 mov     [esp], eax
.text:0040BC0E                 call    strrchr
.text:0040BC13                 test    eax, eax
.text:0040BC15                 jz      short loc_40BC40
.text:0040BC17                 cld
.text:0040BC18                 mov     esi, eax
.text:0040BC1A                 mov     edi, offset aLnk ; ".lnk"
.text:0040BC1F                 mov     ecx, 5
.text:0040BC24                 repe cmpsb
.text:0040BC26                 setz    dl
.text:0040BC29                 movzx   eax, dl
.text:0040BC2C                 lea     esi, [esi+0]
.text:0040BC30
.text:0040BC30 loc_40BC30:                             ; CODE XREF: .text:0040BC42↓j
.text:0040BC30                 mov     esi, [esp+14h]
.text:0040BC34                 mov     edi, [esp+18h]
.text:0040BC38                 add     esp, 1Ch
.text:0040BC3B                 retn
.text:0040BC3B ; ---------------------------------------------------------------------------
.text:0040BC3C                 align 10h
.text:0040BC40
.text:0040BC40 loc_40BC40:                             ; CODE XREF: .text:0040BC01↑j
.text:0040BC40                                         ; .text:0040BC15↑j
.text:0040BC40                 xor     eax, eax
.text:0040BC42                 jmp     short loc_40BC30
.text:0040BC42 ; ---------------------------------------------------------------------------
.text:0040BC44                 align 10h
.text:0040BC50                 sub     esp, 1Ch
.text:0040BC53                 mov     [esp+10h], ebx
.text:0040BC57                 mov     ebx, [esp+20h]
.text:0040BC5B                 mov     [esp+14h], esi
.text:0040BC5F                 mov     [esp+18h], edi
.text:0040BC63                 xor     edi, edi
.text:0040BC65                 mov     dword ptr [esp], offset ModuleName ; "KERNEL32.DLL"
.text:0040BC6C                 call    GetModuleHandleA
.text:0040BC71                 sub     esp, 4
.text:0040BC74                 mov     esi, eax
.text:0040BC76                 mov     dword ptr [esp+4], offset aGetbinarytypea ; "GetBinaryTypeA"
.text:0040BC7E                 mov     [esp], eax
.text:0040BC81                 call    GetProcAddress
.text:0040BC86                 sub     esp, 8
.text:0040BC89                 test    eax, eax
.text:0040BC8B                 jz      short loc_40BCA1
.text:0040BC8D                 mov     [esp], ebx
.text:0040BC90                 lea     ecx, [esp+0Ch]
.text:0040BC94                 mov     [esp+4], ecx
.text:0040BC98                 call    eax
.text:0040BC9A                 sub     esp, 8
.text:0040BC9D                 test    eax, eax
.text:0040BC9F                 jnz     short loc_40BD00
.text:0040BCA1
.text:0040BCA1 loc_40BCA1:                             ; CODE XREF: .text:0040BC8B↑j
.text:0040BCA1                 mov     eax, ds:dword_41E500
.text:0040BCA6                 test    eax, eax
.text:0040BCA8                 jz      short loc_40BD20
.text:0040BCAA
.text:0040BCAA loc_40BCAA:                             ; CODE XREF: .text:0040BD33↓j
.text:0040BCAA                                         ; .text:0040BD45↓j
.text:0040BCAA                 test    ebx, ebx
.text:0040BCAC                 jz      short loc_40BCB3
.text:0040BCAE                 cmp     byte ptr [ebx], 0
.text:0040BCB1                 jnz     short loc_40BCD0
.text:0040BCB3
.text:0040BCB3 loc_40BCB3:                             ; CODE XREF: .text:0040BCAC↑j
.text:0040BCB3                                         ; .text:0040BCE4↓j ...
.text:0040BCB3                 mov     [esp], esi
.text:0040BCB6                 call    FreeLibrary
.text:0040BCBB                 sub     esp, 4
.text:0040BCBE                 mov     eax, edi
.text:0040BCC0                 mov     ebx, [esp+10h]
.text:0040BCC4                 mov     esi, [esp+14h]
.text:0040BCC8                 mov     edi, [esp+18h]
.text:0040BCCC                 add     esp, 1Ch
.text:0040BCCF                 retn
.text:0040BCD0 ; ---------------------------------------------------------------------------
.text:0040BCD0
.text:0040BCD0 loc_40BCD0:                             ; CODE XREF: .text:0040BCB1↑j
.text:0040BCD0                 mov     [esp], ebx
.text:0040BCD3                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:0040BCDB                 call    strrchr
.text:0040BCE0                 test    eax, eax
.text:0040BCE2                 mov     ebx, eax
.text:0040BCE4                 jz      short loc_40BCB3
.text:0040BCE6                 mov     [esp+4], eax
.text:0040BCEA                 mov     ecx, ds:dword_41E500
.text:0040BCF0                 mov     [esp], ecx
.text:0040BCF3                 call    strstr
.text:0040BCF8                 test    eax, eax
.text:0040BCFA                 jz      short loc_40BD07
.text:0040BCFC                 lea     esi, [esi+0]
.text:0040BD00
.text:0040BD00 loc_40BD00:                             ; CODE XREF: .text:0040BC9F↑j
.text:0040BD00                                         ; .text:0040BD1D↓j
.text:0040BD00                 mov     edi, 1
.text:0040BD05                 jmp     short loc_40BCB3
.text:0040BD07 ; ---------------------------------------------------------------------------
.text:0040BD07
.text:0040BD07 loc_40BD07:                             ; CODE XREF: .text:0040BCFA↑j
.text:0040BD07                 mov     [esp+4], ebx
.text:0040BD0B                 mov     ebx, off_41D0A4 ; ".com;.exe;.bat;.cmd"
.text:0040BD11                 mov     [esp], ebx
.text:0040BD14                 call    strstr
.text:0040BD19                 test    eax, eax
.text:0040BD1B                 jz      short loc_40BCB3
.text:0040BD1D                 jmp     short loc_40BD00
.text:0040BD1D ; ---------------------------------------------------------------------------
.text:0040BD1F                 align 10h
.text:0040BD20
.text:0040BD20 loc_40BD20:                             ; CODE XREF: .text:0040BCA8↑j
.text:0040BD20                 mov     dword ptr [esp], offset aPathext ; "PATHEXT"
.text:0040BD27                 call    getenv
.text:0040BD2C                 mov     ds:dword_41E500, eax
.text:0040BD31                 test    eax, eax
.text:0040BD33                 jnz     loc_40BCAA
.text:0040BD39                 mov     edx, off_41D0A4 ; ".com;.exe;.bat;.cmd"
.text:0040BD3F                 mov     ds:dword_41E500, edx
.text:0040BD45                 jmp     loc_40BCAA
.text:0040BD45 ; ---------------------------------------------------------------------------
.text:0040BD4A                 align 10h
.text:0040BD50                 sub     esp, 0Ch
.text:0040BD53                 mov     edx, [esp+10h]
.text:0040BD57                 mov     [esp], edx
.text:0040BD5A                 call    GetFileType
.text:0040BD5F                 sub     esp, 4
.text:0040BD62                 xor     edx, edx
.text:0040BD64                 cmp     eax, 2
.text:0040BD67                 jz      short loc_40BD80
.text:0040BD69                 cmp     eax, 3
.text:0040BD6C                 jz      short loc_40BD74
.text:0040BD6E
.text:0040BD6E loc_40BD6E:                             ; CODE XREF: .text:0040BD79↓j
.text:0040BD6E                                         ; .text:0040BD85↓j
.text:0040BD6E                 mov     eax, edx
.text:0040BD70                 add     esp, 0Ch
.text:0040BD73                 retn
.text:0040BD74 ; ---------------------------------------------------------------------------
.text:0040BD74
.text:0040BD74 loc_40BD74:                             ; CODE XREF: .text:0040BD6C↑j
.text:0040BD74                 mov     edx, 1000h
.text:0040BD79                 jmp     short loc_40BD6E
.text:0040BD79 ; ---------------------------------------------------------------------------
.text:0040BD7B                 align 10h
.text:0040BD80
.text:0040BD80 loc_40BD80:                             ; CODE XREF: .text:0040BD67↑j
.text:0040BD80                 mov     edx, 2000h
.text:0040BD85                 jmp     short loc_40BD6E
.text:0040BD85 ; ---------------------------------------------------------------------------
.text:0040BD87                 align 10h
.text:0040BD90                 mov     ecx, [esp+4]
.text:0040BD94                 xor     edx, edx
.text:0040BD96                 test    cl, 10h
.text:0040BD99                 setz    dl
.text:0040BD9C                 dec     edx
.text:0040BD9D                 and     edx, 0FFFFC000h
.text:0040BDA3                 add     edx, 8000h
.text:0040BDA9                 or      edx, 124h
.text:0040BDAF                 test    cl, 1
.text:0040BDB2                 movzx   eax, dx
.text:0040BDB5                 jnz     short locret_40BDBC
.text:0040BDB7                 or      eax, 92h
.text:0040BDBC
.text:0040BDBC locret_40BDBC:                          ; CODE XREF: .text:0040BDB5↑j
.text:0040BDBC                 retn
.text:0040BDBC ; ---------------------------------------------------------------------------
.text:0040BDBD                 align 10h
.text:0040BDC0                 sub     esp, 2Ch
.text:0040BDC3                 mov     [esp+20h], esi
.text:0040BDC7                 mov     esi, [esp+30h]
.text:0040BDCB                 mov     [esp+1Ch], ebx
.text:0040BDCF                 xor     ebx, ebx
.text:0040BDD1                 test    esi, esi
.text:0040BDD3                 mov     [esp+24h], edi
.text:0040BDD7                 mov     [esp+28h], ebp
.text:0040BDDB                 jz      short loc_40BE30
.text:0040BDDD                 cmp     byte ptr [esi], 0
.text:0040BDE0                 jnz     short loc_40BE34
.text:0040BDE2
.text:0040BDE2 loc_40BDE2:                             ; CODE XREF: .text:0040BE9C↓j
.text:0040BDE2                                         ; .text:0040BEA7↓j
.text:0040BDE2                 test    esi, esi
.text:0040BDE4                 jz      short loc_40BE30
.text:0040BDE6                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:0040BDEE                 mov     [esp], esi
.text:0040BDF1                 call    strrchr
.text:0040BDF6                 test    eax, eax
.text:0040BDF8                 jz      short loc_40BE30
.text:0040BDFA                 cld
.text:0040BDFB                 mov     ecx, 5
.text:0040BE00                 mov     esi, eax
.text:0040BE02                 mov     edi, offset aLnk ; ".lnk"
.text:0040BE07                 repe cmpsb
.text:0040BE09                 setz    cl
.text:0040BE0C                 movzx   eax, cl
.text:0040BE0F                 nop
.text:0040BE10
.text:0040BE10 loc_40BE10:                             ; CODE XREF: .text:0040BE32↓j
.text:0040BE10                 test    eax, eax
.text:0040BE12                 jz      short loc_40BE1A
.text:0040BE14                 or      ebx, 0A000h
.text:0040BE1A
.text:0040BE1A loc_40BE1A:                             ; CODE XREF: .text:0040BE12↑j
.text:0040BE1A                 mov     eax, ebx
.text:0040BE1C                 mov     esi, [esp+20h]
.text:0040BE20                 mov     ebx, [esp+1Ch]
.text:0040BE24                 mov     edi, [esp+24h]
.text:0040BE28                 mov     ebp, [esp+28h]
.text:0040BE2C                 add     esp, 2Ch
.text:0040BE2F                 retn
.text:0040BE30 ; ---------------------------------------------------------------------------
.text:0040BE30
.text:0040BE30 loc_40BE30:                             ; CODE XREF: .text:0040BDDB↑j
.text:0040BE30                                         ; .text:0040BDE4↑j ...
.text:0040BE30                 xor     eax, eax
.text:0040BE32                 jmp     short loc_40BE10
.text:0040BE34 ; ---------------------------------------------------------------------------
.text:0040BE34
.text:0040BE34 loc_40BE34:                             ; CODE XREF: .text:0040BDE0↑j
.text:0040BE34                 mov     dword ptr [esp], offset ModuleName ; "KERNEL32.DLL"
.text:0040BE3B                 call    GetModuleHandleA
.text:0040BE40                 sub     esp, 4
.text:0040BE43                 mov     ebp, eax
.text:0040BE45                 mov     dword ptr [esp+4], offset aGetbinarytypea ; "GetBinaryTypeA"
.text:0040BE4D                 mov     [esp], eax
.text:0040BE50                 call    GetProcAddress
.text:0040BE55                 sub     esp, 8
.text:0040BE58                 test    eax, eax
.text:0040BE5A                 mov     dword ptr [esp+14h], 0
.text:0040BE62                 jz      short loc_40BE78
.text:0040BE64                 mov     [esp], esi
.text:0040BE67                 lea     ecx, [esp+18h]
.text:0040BE6B                 mov     [esp+4], ecx
.text:0040BE6F                 call    eax
.text:0040BE71                 sub     esp, 8
.text:0040BE74                 test    eax, eax
.text:0040BE76                 jnz     short loc_40BED8
.text:0040BE78
.text:0040BE78 loc_40BE78:                             ; CODE XREF: .text:0040BE62↑j
.text:0040BE78                 mov     edx, ds:dword_41E500
.text:0040BE7E                 test    edx, edx
.text:0040BE80                 jz      short loc_40BF00
.text:0040BE82
.text:0040BE82 loc_40BE82:                             ; CODE XREF: .text:0040BF13↓j
.text:0040BE82                                         ; .text:0040BF25↓j
.text:0040BE82                 test    esi, esi
.text:0040BE84                 jz      short loc_40BE8B
.text:0040BE86                 cmp     byte ptr [esi], 0
.text:0040BE89                 jnz     short loc_40BEAC
.text:0040BE8B
.text:0040BE8B loc_40BE8B:                             ; CODE XREF: .text:0040BE84↑j
.text:0040BE8B                                         ; .text:0040BEC0↓j ...
.text:0040BE8B                 mov     [esp], ebp
.text:0040BE8E                 call    FreeLibrary
.text:0040BE93                 sub     esp, 4
.text:0040BE96                 mov     eax, [esp+14h]
.text:0040BE9A                 test    eax, eax
.text:0040BE9C                 jz      loc_40BDE2
.text:0040BEA2                 mov     ebx, 49h ; 'I'
.text:0040BEA7                 jmp     loc_40BDE2
.text:0040BEAC ; ---------------------------------------------------------------------------
.text:0040BEAC
.text:0040BEAC loc_40BEAC:                             ; CODE XREF: .text:0040BE89↑j
.text:0040BEAC                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:0040BEB4                 mov     [esp], esi
.text:0040BEB7                 call    strrchr
.text:0040BEBC                 test    eax, eax
.text:0040BEBE                 mov     edi, eax
.text:0040BEC0                 jz      short loc_40BE8B
.text:0040BEC2                 mov     [esp+4], eax
.text:0040BEC6                 mov     edx, ds:dword_41E500
.text:0040BECC                 mov     [esp], edx
.text:0040BECF                 call    strstr
.text:0040BED4                 test    eax, eax
.text:0040BED6                 jz      short loc_40BEE2
.text:0040BED8
.text:0040BED8 loc_40BED8:                             ; CODE XREF: .text:0040BE76↑j
.text:0040BED8                                         ; .text:0040BEF8↓j
.text:0040BED8                 mov     dword ptr [esp+14h], 1
.text:0040BEE0                 jmp     short loc_40BE8B
.text:0040BEE2 ; ---------------------------------------------------------------------------
.text:0040BEE2
.text:0040BEE2 loc_40BEE2:                             ; CODE XREF: .text:0040BED6↑j
.text:0040BEE2                 mov     [esp+4], edi
.text:0040BEE6                 mov     edi, off_41D0A4 ; ".com;.exe;.bat;.cmd"
.text:0040BEEC                 mov     [esp], edi
.text:0040BEEF                 call    strstr
.text:0040BEF4                 test    eax, eax
.text:0040BEF6                 jz      short loc_40BE8B
.text:0040BEF8                 jmp     short loc_40BED8
.text:0040BEF8 ; ---------------------------------------------------------------------------
.text:0040BEFA                 align 10h
.text:0040BF00
.text:0040BF00 loc_40BF00:                             ; CODE XREF: .text:0040BE80↑j
.text:0040BF00                 mov     dword ptr [esp], offset aPathext ; "PATHEXT"
.text:0040BF07                 call    getenv
.text:0040BF0C                 mov     ds:dword_41E500, eax
.text:0040BF11                 test    eax, eax
.text:0040BF13                 jnz     loc_40BE82
.text:0040BF19                 mov     ecx, off_41D0A4 ; ".com;.exe;.bat;.cmd"
.text:0040BF1F                 mov     ds:dword_41E500, ecx
.text:0040BF25                 jmp     loc_40BE82
.text:0040BF25 ; ---------------------------------------------------------------------------
.text:0040BF2A                 align 10h
.text:0040BF30                 push    esi
.text:0040BF31                 push    ebx
.text:0040BF32                 sub     esp, 864h
.text:0040BF38                 mov     ebx, [esp+870h]
.text:0040BF3F                 lea     edx, [esp+830h]
.text:0040BF46                 mov     esi, [esp+874h]
.text:0040BF4D                 mov     [esp+4], edx
.text:0040BF51                 mov     [esp], ebx
.text:0040BF54                 call    loc_40ADB0
.text:0040BF59                 xor     edx, edx
.text:0040BF5B                 test    eax, eax
.text:0040BF5D                 jz      loc_40C045
.text:0040BF63                 mov     ecx, [esp+830h]
.text:0040BF6A                 test    cl, 10h
.text:0040BF6D                 mov     [esi], ecx
.text:0040BF6F                 mov     eax, [esp+834h]
.text:0040BF76                 mov     edx, [esp+838h]
.text:0040BF7D                 mov     [esi+4], eax
.text:0040BF80                 mov     [esi+8], edx
.text:0040BF83                 mov     eax, [esp+83Ch]
.text:0040BF8A                 mov     edx, [esp+840h]
.text:0040BF91                 mov     [esi+0Ch], eax
.text:0040BF94                 mov     [esi+10h], edx
.text:0040BF97                 mov     edx, [esp+848h]
.text:0040BF9E                 mov     eax, [esp+844h]
.text:0040BFA5                 mov     [esi+18h], edx
.text:0040BFA8                 mov     [esi+14h], eax
.text:0040BFAB                 mov     edx, [esp+84Ch]
.text:0040BFB2                 mov     [esi+20h], edx
.text:0040BFB5                 mov     edx, [esp+850h]
.text:0040BFBC                 mov     [esi+24h], edx
.text:0040BFBF                 jnz     loc_40C050
.text:0040BFC5                 mov     dword ptr [esi+28h], 1
.text:0040BFCC
.text:0040BFCC loc_40BFCC:                             ; CODE XREF: .text:0040C05B↓j
.text:0040BFCC                 mov     [esp], ebx
.text:0040BFCF                 call    sub_40D120
.text:0040BFD4                 mov     [esp], eax
.text:0040BFD7                 call    sub_40CCF0
.text:0040BFDC                 mov     [esp], eax
.text:0040BFDF                 lea     edx, [esp+30h]
.text:0040BFE3                 mov     ebx, eax
.text:0040BFE5                 mov     [esp+18h], edx
.text:0040BFE9                 lea     ecx, [esp+2Ch]
.text:0040BFED                 lea     edx, [esp+28h]
.text:0040BFF1                 mov     [esp+14h], ecx
.text:0040BFF5                 lea     ecx, [esp+24h]
.text:0040BFF9                 mov     [esp+10h], edx
.text:0040BFFD                 lea     edx, [esp+430h]
.text:0040C004                 mov     [esp+0Ch], ecx
.text:0040C008                 mov     [esp+4], edx
.text:0040C00C                 mov     dword ptr [esp+1Ch], 400h
.text:0040C014                 mov     dword ptr [esp+8], 400h
.text:0040C01C                 call    GetVolumeInformationA
.text:0040C021                 sub     esp, 20h
.text:0040C024                 test    eax, eax
.text:0040C026                 setz    cl
.text:0040C029                 mov     [esp], ebx
.text:0040C02C                 movzx   edx, cl
.text:0040C02F                 dec     edx
.text:0040C030                 and     [esp+24h], edx
.text:0040C034                 call    free
.text:0040C039                 mov     ecx, [esp+24h]
.text:0040C03D                 mov     edx, 1
.text:0040C042                 mov     [esi+1Ch], ecx
.text:0040C045
.text:0040C045 loc_40C045:                             ; CODE XREF: .text:0040BF5D↑j
.text:0040C045                 add     esp, 864h
.text:0040C04B                 mov     eax, edx
.text:0040C04D                 pop     ebx
.text:0040C04E                 pop     esi
.text:0040C04F                 retn
.text:0040C050 ; ---------------------------------------------------------------------------
.text:0040C050
.text:0040C050 loc_40C050:                             ; CODE XREF: .text:0040BFBF↑j
.text:0040C050                 mov     [esp], ebx
.text:0040C053                 call    loc_40AF20
.text:0040C058                 mov     [esi+28h], eax
.text:0040C05B                 jmp     loc_40BFCC
.text:0040C060 ; ---------------------------------------------------------------------------
.text:0040C060                 push    ebp
.text:0040C061                 xor     edx, edx
.text:0040C063                 push    edi
.text:0040C064                 push    esi
.text:0040C065                 xor     esi, esi
.text:0040C067                 push    ebx
.text:0040C068                 sub     esp, 1Ch
.text:0040C06B                 mov     ebx, [esp+5Ch]
.text:0040C06F                 mov     ecx, [esp+30h]
.text:0040C073                 mov     edi, [esp+60h]
.text:0040C077                 or      esi, ebx
.text:0040C079                 mov     eax, [esp+4Ch]
.text:0040C07D                 or      edi, edx
.text:0040C07F                 mov     ebx, [esp+64h]
.text:0040C083                 xor     edx, edx
.text:0040C085                 test    cl, 10h
.text:0040C088                 setz    dl
.text:0040C08B                 mov     [ebx+10h], eax
.text:0040C08E                 mov     [ebx+8], edi
.text:0040C091                 mov     [ebx+0Ch], esi
.text:0040C094                 dec     edx
.text:0040C095                 and     edx, 0FFFFC000h
.text:0040C09B                 mov     dword ptr [ebx+14h], 0
.text:0040C0A2                 add     edx, 8000h
.text:0040C0A8                 or      edx, 124h
.text:0040C0AE                 test    cl, 1
.text:0040C0B1                 movzx   eax, dx
.text:0040C0B4                 jnz     short loc_40C0BB
.text:0040C0B6                 or      eax, 92h
.text:0040C0BB
.text:0040C0BB loc_40C0BB:                             ; CODE XREF: .text:0040C0B4↑j
.text:0040C0BB                 mov     ebx, [esp+54h]
.text:0040C0BF                 xor     edx, edx
.text:0040C0C1                 xor     ebp, ebp
.text:0040C0C3                 mov     edi, [esp+50h]
.text:0040C0C7                 mov     ecx, [esp+64h]
.text:0040C0CB                 mov     esi, edi
.text:0040C0CD                 or      [ecx], eax
.text:0040C0CF                 mov     edi, ebx
.text:0040C0D1                 or      edi, ebp
.text:0040C0D3                 mov     ebp, edx
.text:0040C0D5                 mov     ebx, [esp+64h]
.text:0040C0D9                 or      ebp, esi
.text:0040C0DB                 mov     esi, [esp+58h]
.text:0040C0DF                 mov     edx, [esp+40h]
.text:0040C0E3                 mov     [ebx+30h], edi
.text:0040C0E6                 mov     [ebx+18h], esi
.text:0040C0E9                 mov     ecx, edx
.text:0040C0EB                 xor     esi, esi
.text:0040C0ED                 mov     [ebx+34h], ebp
.text:0040C0F0                 xor     edx, edx
.text:0040C0F2                 or      esi, ecx
.text:0040C0F4                 mov     dword ptr [esp+8], 989680h
.text:0040C0FC                 mov     ebx, [esp+3Ch]
.text:0040C100                 mov     ecx, esi
.text:0040C102                 mov     dword ptr [esp+0Ch], 0
.text:0040C10A                 or      ebx, edx
.text:0040C10C                 mov     edx, ebx
.text:0040C10E                 sub     edx, 0D53E8000h
.text:0040C114                 sbb     ecx, 19DB1DEh
.text:0040C11A                 mov     [esp+4], ecx
.text:0040C11E                 mov     [esp], edx
.text:0040C121                 call    sub_41B300
.text:0040C126                 mov     edx, eax
.text:0040C128                 mov     ecx, [esp+64h]
.text:0040C12C                 shr     eax, 1Fh
.text:0040C12F                 dec     eax
.text:0040C130                 and     edx, eax
.text:0040C132                 mov     [ecx+38h], edx
.text:0040C135                 mov     [esp], ebx
.text:0040C138                 mov     [esp+4], esi
.text:0040C13C                 mov     dword ptr [esp+8], 989680h
.text:0040C144                 mov     dword ptr [esp+0Ch], 0
.text:0040C14C                 call    sub_41B420
.text:0040C151                 lea     ecx, [eax+eax*4]
.text:0040C154                 lea     esi, [ecx+ecx*4]
.text:0040C157                 mov     eax, [esp+64h]
.text:0040C15B                 shl     esi, 2
.text:0040C15E                 mov     ebx, esi
.text:0040C160                 shr     ebx, 1Fh
.text:0040C163                 dec     ebx
.text:0040C164                 and     ebx, esi
.text:0040C166                 xor     esi, esi
.text:0040C168                 mov     [eax+3Ch], ebx
.text:0040C16B                 mov     edx, [esp+38h]
.text:0040C16F                 mov     dword ptr [esp+8], 989680h
.text:0040C177                 mov     ebx, [esp+34h]
.text:0040C17B                 mov     dword ptr [esp+0Ch], 0
.text:0040C183                 mov     ecx, edx
.text:0040C185                 xor     edx, edx
.text:0040C187                 or      ebx, edx
.text:0040C189                 or      esi, ecx
.text:0040C18B                 mov     edx, ebx
.text:0040C18D                 sub     edx, 0D53E8000h
.text:0040C193                 mov     ecx, esi
.text:0040C195                 sbb     ecx, 19DB1DEh
.text:0040C19B                 mov     [esp+4], ecx
.text:0040C19F                 mov     [esp], edx
.text:0040C1A2                 call    sub_41B300
.text:0040C1A7                 mov     edx, eax
.text:0040C1A9                 mov     ecx, [esp+64h]
.text:0040C1AD                 shr     eax, 1Fh
.text:0040C1B0                 dec     eax
.text:0040C1B1                 and     edx, eax
.text:0040C1B3                 mov     [ecx+48h], edx
.text:0040C1B6                 mov     [esp], ebx
.text:0040C1B9                 mov     [esp+4], esi
.text:0040C1BD                 mov     dword ptr [esp+8], 989680h
.text:0040C1C5                 mov     dword ptr [esp+0Ch], 0
.text:0040C1CD                 call    sub_41B420
.text:0040C1D2                 lea     edx, [eax+eax*4]
.text:0040C1D5                 mov     ebx, [esp+64h]
.text:0040C1D9                 lea     ecx, [edx+edx*4]
.text:0040C1DC                 shl     ecx, 2
.text:0040C1DF                 mov     esi, ecx
.text:0040C1E1                 shr     esi, 1Fh
.text:0040C1E4                 dec     esi
.text:0040C1E5                 and     esi, ecx
.text:0040C1E7                 mov     [ebx+4Ch], esi
.text:0040C1EA                 mov     edx, [esp+48h]
.text:0040C1EE                 xor     esi, esi
.text:0040C1F0                 mov     dword ptr [esp+8], 989680h
.text:0040C1F8                 mov     ebx, [esp+44h]
.text:0040C1FC                 mov     dword ptr [esp+0Ch], 0
.text:0040C204                 mov     ecx, edx
.text:0040C206                 xor     edx, edx
.text:0040C208                 or      ebx, edx
.text:0040C20A                 or      esi, ecx
.text:0040C20C                 mov     edx, ebx
.text:0040C20E                 sub     edx, 0D53E8000h
.text:0040C214                 mov     ecx, esi
.text:0040C216                 sbb     ecx, 19DB1DEh
.text:0040C21C                 mov     [esp+4], ecx
.text:0040C220                 mov     [esp], edx
.text:0040C223                 call    sub_41B300
.text:0040C228                 mov     edx, eax
.text:0040C22A                 mov     ecx, [esp+64h]
.text:0040C22E                 shr     eax, 1Fh
.text:0040C231                 dec     eax
.text:0040C232                 and     edx, eax
.text:0040C234                 mov     [ecx+40h], edx
.text:0040C237                 mov     [esp+4], esi
.text:0040C23B                 mov     dword ptr [esp+8], 989680h
.text:0040C243                 mov     dword ptr [esp+0Ch], 0
.text:0040C24B                 mov     [esp], ebx
.text:0040C24E                 call    sub_41B420
.text:0040C253                 lea     edx, [eax+eax*4]
.text:0040C256                 lea     esi, [edx+edx*4]
.text:0040C259                 mov     eax, [esp+64h]
.text:0040C25D                 shl     esi, 2
.text:0040C260                 mov     edx, ebp
.text:0040C262                 mov     ecx, esi
.text:0040C264                 mov     dword ptr [eax+50h], 200h
.text:0040C26B                 shr     ecx, 1Fh
.text:0040C26E                 dec     ecx
.text:0040C26F                 and     ecx, esi
.text:0040C271                 test    ebp, ebp
.text:0040C273                 mov     [eax+44h], ecx
.text:0040C276                 mov     eax, edi
.text:0040C278                 js      short loc_40C2B2
.text:0040C27A
.text:0040C27A loc_40C27A:                             ; CODE XREF: .text:0040C2BA↓j
.text:0040C27A                 xor     esi, esi
.text:0040C27C                 mov     ebp, edi
.text:0040C27E                 mov     ecx, eax
.text:0040C280                 shrd    ecx, edx, 9
.text:0040C284                 mov     ebx, edx
.text:0040C286                 and     ebp, 1FFh
.text:0040C28C                 mov     eax, esi
.text:0040C28E                 sar     ebx, 9
.text:0040C291                 or      eax, ebp
.text:0040C293                 jz      short loc_40C29B
.text:0040C295                 add     ecx, 1
.text:0040C298                 adc     ebx, 0
.text:0040C29B
.text:0040C29B loc_40C29B:                             ; CODE XREF: .text:0040C293↑j
.text:0040C29B                 mov     edx, [esp+64h]
.text:0040C29F                 mov     eax, 1
.text:0040C2A4                 mov     [edx+58h], ecx
.text:0040C2A7                 mov     [edx+5Ch], ebx
.text:0040C2AA                 add     esp, 1Ch
.text:0040C2AD                 pop     ebx
.text:0040C2AE                 pop     esi
.text:0040C2AF                 pop     edi
.text:0040C2B0                 pop     ebp
.text:0040C2B1                 retn
.text:0040C2B2 ; ---------------------------------------------------------------------------
.text:0040C2B2
.text:0040C2B2 loc_40C2B2:                             ; CODE XREF: .text:0040C278↑j
.text:0040C2B2                 add     eax, 1FFh
.text:0040C2B7                 adc     edx, 0
.text:0040C2BA                 jmp     short loc_40C27A
.text:0040C2BA ; ---------------------------------------------------------------------------
.text:0040C2BC                 align 10h
.text:0040C2C0                 push    ebp
.text:0040C2C1                 push    edi
.text:0040C2C2                 xor     edi, edi
.text:0040C2C4                 push    esi
.text:0040C2C5                 xor     esi, esi
.text:0040C2C7                 push    ebx
.text:0040C2C8                 sub     esp, 0Ch
.text:0040C2CB                 mov     dword ptr [esp], offset aKernel32 ; "KERNEL32"
.text:0040C2D2                 call    LoadLibraryA
.text:0040C2D7                 sub     esp, 4
.text:0040C2DA                 mov     ebp, eax
.text:0040C2DC                 mov     dword ptr [esp+4], offset aGetcompressedf ; "GetCompressedFileSizeA"
.text:0040C2E4                 mov     [esp], eax
.text:0040C2E7                 call    GetProcAddress
.text:0040C2EC                 sub     esp, 8
.text:0040C2EF                 test    eax, eax
.text:0040C2F1                 jz      short loc_40C322
.text:0040C2F3                 lea     ecx, [esp+8]
.text:0040C2F7                 mov     [esp+4], ecx
.text:0040C2FB                 mov     ecx, [esp+20h]
.text:0040C2FF                 mov     [esp], ecx
.text:0040C302                 call    eax
.text:0040C304                 sub     esp, 8
.text:0040C307                 mov     ebx, eax
.text:0040C309                 cmp     eax, 0FFFFFFFFh
.text:0040C30C                 jz      short loc_40C33D
.text:0040C30E
.text:0040C30E loc_40C30E:                             ; CODE XREF: .text:0040C346↓j
.text:0040C30E                 mov     esi, [esp+8]
.text:0040C312                 mov     ecx, ebx
.text:0040C314                 xor     edi, edi
.text:0040C316                 xor     ebx, ebx
.text:0040C318                 mov     edx, esi
.text:0040C31A                 mov     esi, ecx
.text:0040C31C                 or      esi, edi
.text:0040C31E                 mov     edi, ebx
.text:0040C320                 or      edi, edx
.text:0040C322
.text:0040C322 loc_40C322:                             ; CODE XREF: .text:0040C2F1↑j
.text:0040C322                                         ; .text:0040C344↓j
.text:0040C322                 test    ebp, ebp
.text:0040C324                 jz      short loc_40C331
.text:0040C326                 mov     [esp], ebp
.text:0040C329                 call    FreeLibrary
.text:0040C32E                 sub     esp, 4
.text:0040C331
.text:0040C331 loc_40C331:                             ; CODE XREF: .text:0040C324↑j
.text:0040C331                 add     esp, 0Ch
.text:0040C334                 mov     eax, esi
.text:0040C336                 mov     edx, edi
.text:0040C338                 pop     ebx
.text:0040C339                 pop     esi
.text:0040C33A                 pop     edi
.text:0040C33B                 pop     ebp
.text:0040C33C                 retn
.text:0040C33D ; ---------------------------------------------------------------------------
.text:0040C33D
.text:0040C33D loc_40C33D:                             ; CODE XREF: .text:0040C30C↑j
.text:0040C33D                 call    GetLastError
.text:0040C342                 test    eax, eax
.text:0040C344                 jnz     short loc_40C322
.text:0040C346                 jmp     short loc_40C30E
.text:0040C346 ; ---------------------------------------------------------------------------
.text:0040C348                 align 10h
.text:0040C350
.text:0040C350 ; =============== S U B R O U T I N E =======================================
.text:0040C350
.text:0040C350
.text:0040C350 ; int __cdecl sub_40C350(LPCSTR, int)
.text:0040C350 sub_40C350      proc near               ; CODE XREF: sub_4197F0-CF5F↓p
.text:0040C350
.text:0040C350 lpRootPathName  = dword ptr -8FCh
.text:0040C350 lpVolumeNameBuffer= dword ptr -8F8h
.text:0040C350 nVolumeNameSize = dword ptr -8F4h
.text:0040C350 lpVolumeSerialNumber= dword ptr -8F0h
.text:0040C350 lpMaximumComponentLength= dword ptr -8ECh
.text:0040C350 lpFileSystemFlags= dword ptr -8E8h
.text:0040C350 lpFileSystemNameBuffer= dword ptr -8E4h
.text:0040C350 nFileSystemNameSize= dword ptr -8E0h
.text:0040C350 VolumeSerialNumber= dword ptr -8D8h
.text:0040C350 MaximumComponentLength= dword ptr -8D4h
.text:0040C350 FileSystemFlags = dword ptr -8D0h
.text:0040C350 var_8CC         = dword ptr -8CCh
.text:0040C350 var_8C8         = dword ptr -8C8h
.text:0040C350 var_8C4         = dword ptr -8C4h
.text:0040C350 var_8C0         = dword ptr -8C0h
.text:0040C350 var_8BC         = dword ptr -8BCh
.text:0040C350 var_8B8         = dword ptr -8B8h
.text:0040C350 var_8B4         = dword ptr -8B4h
.text:0040C350 var_8B0         = dword ptr -8B0h
.text:0040C350 var_8AC         = dword ptr -8ACh
.text:0040C350 var_8A8         = dword ptr -8A8h
.text:0040C350 var_8A4         = dword ptr -8A4h
.text:0040C350 var_8A0         = dword ptr -8A0h
.text:0040C350 var_89C         = dword ptr -89Ch
.text:0040C350 FileSystemNameBuffer= byte ptr -88Ch
.text:0040C350 VolumeNameBuffer= byte ptr -48Ch
.text:0040C350 var_8C          = dword ptr -8Ch
.text:0040C350 var_88          = dword ptr -88h
.text:0040C350 var_84          = dword ptr -84h
.text:0040C350 var_80          = dword ptr -80h
.text:0040C350 var_7C          = dword ptr -7Ch
.text:0040C350 var_78          = dword ptr -78h
.text:0040C350 var_74          = dword ptr -74h
.text:0040C350 var_70          = dword ptr -70h
.text:0040C350 var_6C          = dword ptr -6Ch
.text:0040C350 var_5C          = dword ptr -5Ch
.text:0040C350 var_58          = dword ptr -58h
.text:0040C350 var_54          = dword ptr -54h
.text:0040C350 var_50          = dword ptr -50h
.text:0040C350 var_4C          = dword ptr -4Ch
.text:0040C350 var_48          = dword ptr -48h
.text:0040C350 var_44          = dword ptr -44h
.text:0040C350 var_3C          = dword ptr -3Ch
.text:0040C350 var_38          = dword ptr -38h
.text:0040C350 var_34          = dword ptr -34h
.text:0040C350 arg_0           = dword ptr  4
.text:0040C350 arg_4           = dword ptr  8
.text:0040C350
.text:0040C350                 push    ebp
.text:0040C351                 xor     eax, eax
.text:0040C353                 mov     ecx, 0Dh
.text:0040C358                 push    edi
.text:0040C359                 push    esi
.text:0040C35A                 push    ebx
.text:0040C35B                 sub     esp, 8ECh
.text:0040C361                 lea     edi, [esp+8FCh+var_5C]
.text:0040C368                 cld
.text:0040C369                 lea     edx, [esp+8FCh+var_8C]
.text:0040C370                 rep stosd
.text:0040C372                 mov     [esp+8FCh+lpVolumeNameBuffer], edx
.text:0040C376                 lea     esi, [esp+8FCh+var_5C]
.text:0040C37D                 mov     edx, [esp+8FCh+arg_0]
.text:0040C384                 mov     [esp+8FCh+lpRootPathName], edx
.text:0040C387                 call    loc_40ADB0
.text:0040C38C                 test    eax, eax
.text:0040C38E                 mov     edx, 0FFFFFFFFh
.text:0040C393                 jz      loc_40C724
.text:0040C399                 mov     edx, [esp+8FCh+var_88]
.text:0040C3A0                 mov     ebp, [esp+8FCh+var_84]
.text:0040C3A7                 mov     edi, [esp+8FCh+var_80]
.text:0040C3AE                 mov     [esp+8FCh+var_58], edx
.text:0040C3B5                 mov     ecx, [esp+8FCh+var_7C]
.text:0040C3BC                 mov     ebx, [esp+8FCh+var_8C]
.text:0040C3C3                 mov     [esp+8FCh+var_54], ebp
.text:0040C3CA                 mov     edx, [esp+8FCh+var_78]
.text:0040C3D1                 mov     ebp, [esp+8FCh+var_74]
.text:0040C3D8                 mov     [esp+8FCh+var_50], edi
.text:0040C3DF                 test    bl, 10h
.text:0040C3E2                 mov     edi, [esp+8FCh+var_70]
.text:0040C3E9                 mov     [esp+8FCh+var_4C], ecx
.text:0040C3F0                 mov     ecx, [esp+8FCh+var_6C]
.text:0040C3F7                 mov     [esp+8FCh+var_5C], ebx
.text:0040C3FE                 mov     [esp+8FCh+var_48], edx
.text:0040C405                 mov     [esp+8FCh+var_44], ebp
.text:0040C40C                 mov     [esp+8FCh+var_3C], edi
.text:0040C413                 mov     [esp+8FCh+var_38], ecx
.text:0040C41A                 jnz     loc_40C740
.text:0040C420                 mov     ebx, 1
.text:0040C425                 mov     [esp+8FCh+var_34], ebx
.text:0040C42C
.text:0040C42C loc_40C42C:                             ; CODE XREF: sub_40C350+406↓j
.text:0040C42C                 mov     eax, [esp+8FCh+arg_0]
.text:0040C433                 lea     edi, [esp+8FCh+FileSystemNameBuffer]
.text:0040C437                 lea     ebx, [esp+8FCh+FileSystemFlags]
.text:0040C43B                 mov     [esp+8FCh+lpRootPathName], eax ; LPCSTR
.text:0040C43E                 call    sub_40D120
.text:0040C443                 mov     [esp+8FCh+lpRootPathName], eax
.text:0040C446                 call    sub_40CCF0
.text:0040C44B                 mov     [esp+8FCh+lpFileSystemNameBuffer], edi ; lpFileSystemNameBuffer
.text:0040C44F                 lea     ecx, [esp+8FCh+VolumeSerialNumber]
.text:0040C453                 mov     ebp, eax
.text:0040C455                 mov     [esp+8FCh+lpVolumeSerialNumber], ecx ; lpVolumeSerialNumber
.text:0040C459                 lea     edx, [esp+8FCh+MaximumComponentLength]
.text:0040C45D                 lea     edi, [esp+8FCh+VolumeNameBuffer]
.text:0040C464                 mov     [esp+8FCh+lpFileSystemFlags], ebx ; lpFileSystemFlags
.text:0040C468                 mov     [esp+8FCh+lpMaximumComponentLength], edx ; lpMaximumComponentLength
.text:0040C46C                 mov     [esp+8FCh+lpVolumeNameBuffer], edi ; lpVolumeNameBuffer
.text:0040C470                 mov     [esp+8FCh+nFileSystemNameSize], 400h ; nFileSystemNameSize
.text:0040C478                 mov     [esp+8FCh+nVolumeNameSize], 400h ; nVolumeNameSize
.text:0040C480                 mov     [esp+8FCh+lpRootPathName], eax ; lpRootPathName
.text:0040C483                 call    GetVolumeInformationA
.text:0040C488                 sub     esp, 20h
.text:0040C48B                 test    eax, eax
.text:0040C48D                 lea     edi, [esp+8FCh+var_8CC]
.text:0040C491                 setz    bl
.text:0040C494                 mov     [esp+8FCh+lpRootPathName], ebp ; Block
.text:0040C497                 xor     ebp, ebp
.text:0040C499                 movzx   edx, bl
.text:0040C49C                 dec     edx
.text:0040C49D                 xor     ebx, ebx
.text:0040C49F                 and     [esp+8FCh+VolumeSerialNumber], edx
.text:0040C4A3                 call    free
.text:0040C4A8                 cld
.text:0040C4A9                 mov     ecx, [esp+8FCh+VolumeSerialNumber]
.text:0040C4AD                 mov     [esi+1Ch], ecx
.text:0040C4B0                 mov     ecx, 0Dh
.text:0040C4B5                 rep movsd
.text:0040C4B7                 mov     edi, [esp+8FCh+var_8A0]
.text:0040C4BB                 mov     edx, [esp+8FCh+var_89C]
.text:0040C4BF                 mov     ecx, [esp+8FCh+var_8CC]
.text:0040C4C3                 or      ebp, edi
.text:0040C4C5                 mov     esi, [esp+8FCh+var_8B0]
.text:0040C4C9                 mov     edi, [esp+8FCh+arg_4]
.text:0040C4D0                 or      edx, ebx
.text:0040C4D2                 mov     [edi+8], edx
.text:0040C4D5                 xor     edx, edx
.text:0040C4D7                 test    cl, 10h
.text:0040C4DA                 setz    dl
.text:0040C4DD                 mov     [edi+0Ch], ebp
.text:0040C4E0                 mov     [edi+10h], esi
.text:0040C4E3                 mov     dword ptr [edi+14h], 0
.text:0040C4EA                 dec     edx
.text:0040C4EB                 and     edx, 0FFFFC000h
.text:0040C4F1                 add     edx, 8000h
.text:0040C4F7                 or      edx, 124h
.text:0040C4FD                 test    cl, 1
.text:0040C500                 movzx   eax, dx
.text:0040C503                 jnz     short loc_40C50A
.text:0040C505                 or      eax, 92h
.text:0040C50A
.text:0040C50A loc_40C50A:                             ; CODE XREF: sub_40C350+1B3↑j
.text:0040C50A                 mov     ebx, [esp+8FCh+var_8A8]
.text:0040C50E                 xor     edx, edx
.text:0040C510                 xor     ebp, ebp
.text:0040C512                 mov     edi, [esp+8FCh+var_8AC]
.text:0040C516                 mov     ecx, [esp+8FCh+arg_4]
.text:0040C51D                 mov     esi, edi
.text:0040C51F                 or      [ecx], eax
.text:0040C521                 mov     edi, ebx
.text:0040C523                 or      edi, ebp
.text:0040C525                 mov     ebp, edx
.text:0040C527                 mov     ebx, [esp+8FCh+var_8A4]
.text:0040C52B                 or      ebp, esi
.text:0040C52D                 mov     esi, [esp+8FCh+arg_4]
.text:0040C534                 mov     edx, [esp+8FCh+var_8BC]
.text:0040C538                 mov     [esi+18h], ebx
.text:0040C53B                 mov     ebx, [esp+8FCh+var_8C0]
.text:0040C53F                 mov     ecx, edx
.text:0040C541                 mov     [esi+30h], edi
.text:0040C544                 xor     edx, edx
.text:0040C546                 mov     [esi+34h], ebp
.text:0040C549                 or      ebx, edx
.text:0040C54B                 xor     esi, esi
.text:0040C54D                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:0040C555                 or      esi, ecx
.text:0040C557                 mov     edx, ebx
.text:0040C559                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:0040C561                 sub     edx, 0D53E8000h
.text:0040C567                 mov     ecx, esi
.text:0040C569                 sbb     ecx, 19DB1DEh
.text:0040C56F                 mov     [esp+8FCh+lpVolumeNameBuffer], ecx
.text:0040C573                 mov     [esp+8FCh+lpRootPathName], edx
.text:0040C576                 call    sub_41B300
.text:0040C57B                 mov     edx, eax
.text:0040C57D                 mov     ecx, [esp+8FCh+arg_4]
.text:0040C584                 shr     eax, 1Fh
.text:0040C587                 dec     eax
.text:0040C588                 and     edx, eax
.text:0040C58A                 mov     [ecx+38h], edx
.text:0040C58D                 mov     [esp+8FCh+lpRootPathName], ebx
.text:0040C590                 mov     [esp+8FCh+lpVolumeNameBuffer], esi
.text:0040C594                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:0040C59C                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:0040C5A4                 call    sub_41B420
.text:0040C5A9                 lea     ecx, [eax+eax*4]
.text:0040C5AC                 lea     ebx, [ecx+ecx*4]
.text:0040C5AF                 mov     eax, [esp+8FCh+arg_4]
.text:0040C5B6                 shl     ebx, 2
.text:0040C5B9                 mov     esi, ebx
.text:0040C5BB                 shr     esi, 1Fh
.text:0040C5BE                 dec     esi
.text:0040C5BF                 and     esi, ebx
.text:0040C5C1                 mov     [eax+3Ch], esi
.text:0040C5C4                 mov     edx, [esp+8FCh+var_8C4]
.text:0040C5C8                 xor     esi, esi
.text:0040C5CA                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:0040C5D2                 mov     ebx, [esp+8FCh+var_8C8]
.text:0040C5D6                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:0040C5DE                 mov     ecx, edx
.text:0040C5E0                 xor     edx, edx
.text:0040C5E2                 or      ebx, edx
.text:0040C5E4                 or      esi, ecx
.text:0040C5E6                 mov     edx, ebx
.text:0040C5E8                 sub     edx, 0D53E8000h
.text:0040C5EE                 mov     ecx, esi
.text:0040C5F0                 sbb     ecx, 19DB1DEh
.text:0040C5F6                 mov     [esp+8FCh+lpVolumeNameBuffer], ecx
.text:0040C5FA                 mov     [esp+8FCh+lpRootPathName], edx
.text:0040C5FD                 call    sub_41B300
.text:0040C602                 mov     edx, eax
.text:0040C604                 mov     ecx, [esp+8FCh+arg_4]
.text:0040C60B                 shr     eax, 1Fh
.text:0040C60E                 dec     eax
.text:0040C60F                 and     edx, eax
.text:0040C611                 mov     [ecx+48h], edx
.text:0040C614                 mov     [esp+8FCh+lpRootPathName], ebx
.text:0040C617                 mov     [esp+8FCh+lpVolumeNameBuffer], esi
.text:0040C61B                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:0040C623                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:0040C62B                 call    sub_41B420
.text:0040C630                 lea     ecx, [eax+eax*4]
.text:0040C633                 lea     ebx, [ecx+ecx*4]
.text:0040C636                 mov     eax, [esp+8FCh+arg_4]
.text:0040C63D                 shl     ebx, 2
.text:0040C640                 mov     esi, ebx
.text:0040C642                 shr     esi, 1Fh
.text:0040C645                 dec     esi
.text:0040C646                 and     esi, ebx
.text:0040C648                 mov     [eax+4Ch], esi
.text:0040C64B                 mov     edx, [esp+8FCh+var_8B4]
.text:0040C64F                 xor     esi, esi
.text:0040C651                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:0040C659                 mov     ebx, [esp+8FCh+var_8B8]
.text:0040C65D                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:0040C665                 mov     ecx, edx
.text:0040C667                 xor     edx, edx
.text:0040C669                 or      ebx, edx
.text:0040C66B                 or      esi, ecx
.text:0040C66D                 mov     edx, ebx
.text:0040C66F                 sub     edx, 0D53E8000h
.text:0040C675                 mov     ecx, esi
.text:0040C677                 sbb     ecx, 19DB1DEh
.text:0040C67D                 mov     [esp+8FCh+lpVolumeNameBuffer], ecx
.text:0040C681                 mov     [esp+8FCh+lpRootPathName], edx
.text:0040C684                 call    sub_41B300
.text:0040C689                 mov     edx, eax
.text:0040C68B                 mov     ecx, [esp+8FCh+arg_4]
.text:0040C692                 shr     eax, 1Fh
.text:0040C695                 dec     eax
.text:0040C696                 and     edx, eax
.text:0040C698                 mov     [ecx+40h], edx
.text:0040C69B                 mov     [esp+8FCh+lpRootPathName], ebx
.text:0040C69E                 mov     [esp+8FCh+lpVolumeNameBuffer], esi
.text:0040C6A2                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:0040C6AA                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:0040C6B2                 call    sub_41B420
.text:0040C6B7                 lea     ebx, [eax+eax*4]
.text:0040C6BA                 mov     esi, [esp+8FCh+arg_4]
.text:0040C6C1                 lea     edx, [ebx+ebx*4]
.text:0040C6C4                 shl     edx, 2
.text:0040C6C7                 mov     eax, edi
.text:0040C6C9                 mov     ecx, edx
.text:0040C6CB                 mov     dword ptr [esi+50h], 200h
.text:0040C6D2                 shr     ecx, 1Fh
.text:0040C6D5                 dec     ecx
.text:0040C6D6                 and     ecx, edx
.text:0040C6D8                 test    ebp, ebp
.text:0040C6DA                 mov     edx, ebp
.text:0040C6DC                 mov     [esi+44h], ecx
.text:0040C6DF                 js      short loc_40C731
.text:0040C6E1
.text:0040C6E1 loc_40C6E1:                             ; CODE XREF: sub_40C350+3E9↓j
.text:0040C6E1                 xor     esi, esi
.text:0040C6E3                 mov     ebp, edi
.text:0040C6E5                 mov     ecx, eax
.text:0040C6E7                 shrd    ecx, edx, 9
.text:0040C6EB                 mov     ebx, edx
.text:0040C6ED                 and     ebp, 1FFh
.text:0040C6F3                 mov     eax, esi
.text:0040C6F5                 sar     ebx, 9
.text:0040C6F8                 or      eax, ebp
.text:0040C6FA                 jz      short loc_40C702
.text:0040C6FC                 add     ecx, 1
.text:0040C6FF                 adc     ebx, 0
.text:0040C702
.text:0040C702 loc_40C702:                             ; CODE XREF: sub_40C350+3AA↑j
.text:0040C702                 mov     edx, [esp+8FCh+arg_4]
.text:0040C709                 mov     [edx+5Ch], ebx
.text:0040C70C                 mov     ebx, [esp+8FCh+arg_0]
.text:0040C713                 mov     [edx+58h], ecx
.text:0040C716                 mov     [esp+8FCh+lpVolumeNameBuffer], edx ; int
.text:0040C71A                 mov     [esp+8FCh+lpRootPathName], ebx ; String1
.text:0040C71D                 call    sub_40B570
.text:0040C722                 xor     edx, edx
.text:0040C724
.text:0040C724 loc_40C724:                             ; CODE XREF: sub_40C350+43↑j
.text:0040C724                 add     esp, 8ECh
.text:0040C72A                 mov     eax, edx
.text:0040C72C                 pop     ebx
.text:0040C72D                 pop     esi
.text:0040C72E                 pop     edi
.text:0040C72F                 pop     ebp
.text:0040C730                 retn
.text:0040C731 ; ---------------------------------------------------------------------------
.text:0040C731
.text:0040C731 loc_40C731:                             ; CODE XREF: sub_40C350+38F↑j
.text:0040C731                 add     eax, 1FFh
.text:0040C736                 adc     edx, 0
.text:0040C739                 jmp     short loc_40C6E1
.text:0040C739 ; ---------------------------------------------------------------------------
.text:0040C73B                 align 10h
.text:0040C740
.text:0040C740 loc_40C740:                             ; CODE XREF: sub_40C350+CA↑j
.text:0040C740                 mov     eax, [esp+8FCh+arg_0]
.text:0040C747                 mov     [esp+8FCh+lpRootPathName], eax
.text:0040C74A                 call    loc_40AF20
.text:0040C74F                 mov     [esp+8FCh+var_34], eax
.text:0040C756                 jmp     loc_40C42C
.text:0040C756 sub_40C350      endp
.text:0040C756
.text:0040C756 ; ---------------------------------------------------------------------------
.text:0040C75B                 align 10h
.text:0040C760 ; START OF FUNCTION CHUNK FOR sub_4197F0
.text:0040C760
.text:0040C760 loc_40C760:                             ; CODE XREF: sub_4197F0+26↓j
.text:0040C760                 cld
.text:0040C761                 sub     esp, 2Ch
.text:0040C764                 xor     eax, eax
.text:0040C766                 mov     [esp+2Ch+var_10], ebx
.text:0040C76A                 mov     ecx, 18h
.text:0040C76F                 mov     ebx, [esp+2Ch+arg_0]
.text:0040C773                 mov     [esp+2Ch+var_C], esi
.text:0040C777                 mov     esi, [esp+2Ch+arg_4]
.text:0040C77B                 test    ebx, ebx
.text:0040C77D                 mov     [esp+2Ch+var_8], edi
.text:0040C781                 mov     edi, esi
.text:0040C783                 mov     [esp+2Ch+var_4], ebp
.text:0040C787                 rep stosd
.text:0040C789                 jz      short loc_40C790
.text:0040C78B                 cmp     byte ptr [ebx], 0
.text:0040C78E                 jnz     short loc_40C7A8
.text:0040C790
.text:0040C790 loc_40C790:                             ; CODE XREF: sub_4197F0-D067↑j
.text:0040C790                 xor     edx, edx
.text:0040C792
.text:0040C792 loc_40C792:                             ; CODE XREF: sub_4197F0-D031↓j
.text:0040C792                                         ; sub_4197F0-CF88↓j
.text:0040C792                 mov     ebx, [esp+2Ch+var_10]
.text:0040C796                 mov     eax, edx
.text:0040C798                 mov     esi, [esp+2Ch+var_C]
.text:0040C79C                 mov     edi, [esp+2Ch+var_8]
.text:0040C7A0                 mov     ebp, [esp+2Ch+var_4]
.text:0040C7A4                 add     esp, 2Ch
.text:0040C7A7                 retn
.text:0040C7A8 ; ---------------------------------------------------------------------------
.text:0040C7A8
.text:0040C7A8 loc_40C7A8:                             ; CODE XREF: sub_4197F0-D062↑j
.text:0040C7A8                 mov     [esp+2Ch+dwDesiredAccess], 0 ; int
.text:0040C7B0                 mov     [esp+2Ch+lpFileName], ebx ; lpFileName
.text:0040C7B3                 call    sub_40E2A0
.text:0040C7B8                 test    eax, eax
.text:0040C7BA                 mov     edx, 0FFFFFFFFh
.text:0040C7BF                 jnz     short loc_40C792
.text:0040C7C1                 mov     [esp+2Ch+lpFileName], ebx ; LPCSTR
.text:0040C7C4                 call    sub_40E150
.text:0040C7C9                 mov     [esp+2Ch+lpFileName], eax
.text:0040C7CC                 call    sub_40CCF0
.text:0040C7D1                 mov     [esp+2Ch+lpFileName], eax ; lpFileName
.text:0040C7D4                 mov     ebp, eax
.text:0040C7D6                 mov     [esp+2Ch+hTemplateFile], 0 ; hTemplateFile
.text:0040C7DE                 mov     [esp+2Ch+dwFlagsAndAttributes], 2000001h ; dwFlagsAndAttributes
.text:0040C7E6                 mov     [esp+2Ch+dwCreationDisposition], 3 ; dwCreationDisposition
.text:0040C7EE                 mov     [esp+2Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:0040C7F6                 mov     [esp+2Ch+dwShareMode], 0 ; dwShareMode
.text:0040C7FE                 mov     [esp+2Ch+dwDesiredAccess], 0 ; dwDesiredAccess
.text:0040C806                 call    CreateFileA
.text:0040C80B                 sub     esp, 1Ch
.text:0040C80E                 mov     ebx, eax
.text:0040C810                 mov     [esp+2Ch+dwDesiredAccess], esi
.text:0040C814                 mov     [esp+2Ch+lpFileName], eax
.text:0040C817                 call    loc_40B0A0
.text:0040C81C                 mov     [esp+2Ch+lpFileName], ebx ; hObject
.text:0040C81F                 mov     edi, eax
.text:0040C821                 call    CloseHandle
.text:0040C826                 sub     esp, 4
.text:0040C829                 cmp     edi, 0FFFFFFFFh
.text:0040C82C                 jz      short loc_40C88A
.text:0040C82E                 mov     [esp+2Ch+dwDesiredAccess], esi ; int
.text:0040C832                 mov     [esp+2Ch+lpFileName], ebp ; String1
.text:0040C835                 call    sub_40B570
.text:0040C83A
.text:0040C83A loc_40C83A:                             ; CODE XREF: sub_4197F0-CF58↓j
.text:0040C83A                 mov     edx, [esi]
.text:0040C83C                 and     edx, 0F000h
.text:0040C842                 cmp     edx, 4000h
.text:0040C848                 jz      short loc_40C87D
.text:0040C84A
.text:0040C84A loc_40C84A:                             ; CODE XREF: sub_4197F0-CF68↓j
.text:0040C84A                 cmp     edi, 0FFFFFFFFh
.text:0040C84D                 jz      short loc_40C86D
.text:0040C84F
.text:0040C84F loc_40C84F:                             ; CODE XREF: sub_4197F0-CF75↓j
.text:0040C84F                 mov     [esp+2Ch+lpFileName], 0 ; uMode
.text:0040C856                 call    SetErrorMode
.text:0040C85B                 sub     esp, 4
.text:0040C85E                 mov     [esp+2Ch+lpFileName], ebp ; Block
.text:0040C861                 call    free
.text:0040C866                 mov     edx, edi
.text:0040C868                 jmp     loc_40C792
.text:0040C86D ; ---------------------------------------------------------------------------
.text:0040C86D
.text:0040C86D loc_40C86D:                             ; CODE XREF: sub_4197F0-CFA3↑j
.text:0040C86D                 call    sub_40E100
.text:0040C872                 mov     esi, eax
.text:0040C874                 call    _errno
.text:0040C879                 mov     [eax], esi
.text:0040C87B                 jmp     short loc_40C84F
.text:0040C87D ; ---------------------------------------------------------------------------
.text:0040C87D
.text:0040C87D loc_40C87D:                             ; CODE XREF: sub_4197F0-CFA8↑j
.text:0040C87D                 mov     [esp+2Ch+lpFileName], ebp
.text:0040C880                 call    loc_40AF20
.text:0040C885                 mov     [esi+18h], eax
.text:0040C888                 jmp     short loc_40C84A
.text:0040C88A ; ---------------------------------------------------------------------------
.text:0040C88A
.text:0040C88A loc_40C88A:                             ; CODE XREF: sub_4197F0-CFC4↑j
.text:0040C88A                 mov     [esp+2Ch+dwDesiredAccess], esi ; int
.text:0040C88E                 mov     [esp+2Ch+lpFileName], ebp ; LPCSTR
.text:0040C891                 call    sub_40C350
.text:0040C896                 mov     edi, eax
.text:0040C898                 jmp     short loc_40C83A
.text:0040C898 ; END OF FUNCTION CHUNK FOR sub_4197F0
.text:0040C898 ; ---------------------------------------------------------------------------
.text:0040C89A                 align 10h
.text:0040C8A0
.text:0040C8A0 ; =============== S U B R O U T I N E =======================================
.text:0040C8A0
.text:0040C8A0 ; Attributes: bp-based frame info_from_lumina fpd=268h
.text:0040C8A0
.text:0040C8A0 ; int __cdecl win32_longpath(LPCSTR lpFileName)
.text:0040C8A0 _win32_longpath proc near               ; CODE XREF: .text:0040D064↓p
.text:0040C8A0
.text:0040C8A0 C               = dword ptr -278h
.text:0040C8A0 lpFindFileData  = dword ptr -274h
.text:0040C8A0 Destination     = byte ptr -268h
.text:0040C8A0 var_267         = byte ptr -267h
.text:0040C8A0 FindFileData    = _WIN32_FIND_DATAA ptr -158h
.text:0040C8A0 lpFileName      = dword ptr  8
.text:0040C8A0
.text:0040C8A0                 push    ebp
.text:0040C8A1                 xor     eax, eax
.text:0040C8A3                 push    edi
.text:0040C8A4                 push    esi
.text:0040C8A5                 push    ebx
.text:0040C8A6                 sub     esp, 26Ch
.text:0040C8AC                 mov     esi, [esp+278h+lpFileName]
.text:0040C8B3                 lea     ebp, [esp+278h+Destination]
.text:0040C8B7                 test    esi, esi
.text:0040C8B9                 jz      loc_40CA17
.text:0040C8BF                 movsx   edx, byte ptr [esi]
.text:0040C8C2                 mov     [esp+278h+C], edx ; C
.text:0040C8C5                 call    isalpha
.text:0040C8CA                 test    eax, eax
.text:0040C8CC                 jz      short loc_40C8DF
.text:0040C8CE                 mov     eax, [esp+278h+lpFileName]
.text:0040C8D5                 cmp     byte ptr [eax+1], 3Ah ; ':'
.text:0040C8D9                 jz      loc_40CC1B
.text:0040C8DF
.text:0040C8DF loc_40C8DF:                             ; CODE XREF: _win32_longpath+2C↑j
.text:0040C8DF                 mov     edx, [esp+278h+lpFileName]
.text:0040C8E6                 movzx   eax, byte ptr [edx]
.text:0040C8E9                 cmp     al, 2Fh ; '/'
.text:0040C8EB                 jz      loc_40CAFB
.text:0040C8F1                 cmp     al, 5Ch ; '\'
.text:0040C8F3                 jz      loc_40CAFB
.text:0040C8F9
.text:0040C8F9 loc_40C8F9:                             ; CODE XREF: _win32_longpath+26E↓j
.text:0040C8F9                                         ; _win32_longpath+2B1↓j ...
.text:0040C8F9                 mov     [ebp+268h+Destination], 0
.text:0040C8FD                 movzx   ebx, byte ptr [esi]
.text:0040C900                 test    bl, bl
.text:0040C902                 jz      loc_40C9F9
.text:0040C908                 nop
.text:0040C909                 lea     esi, [esi+0]
.text:0040C910
.text:0040C910 loc_40C910:                             ; CODE XREF: _win32_longpath+153↓j
.text:0040C910                 cmp     bl, 2Fh ; '/'
.text:0040C913                 jz      loc_40CAB0
.text:0040C919                 cmp     bl, 5Ch ; '\'
.text:0040C91C                 jz      loc_40CAB0
.text:0040C922
.text:0040C922 loc_40C922:                             ; CODE XREF: _win32_longpath+21E↓j
.text:0040C922                                         ; _win32_longpath+22C↓j ...
.text:0040C922                 cmp     bl, 2Eh ; '.'
.text:0040C925                 jz      loc_40CA50
.text:0040C92B
.text:0040C92B loc_40C92B:                             ; CODE XREF: _win32_longpath+1EF↓j
.text:0040C92B                                         ; _win32_longpath+203↓j
.text:0040C92B                 test    bl, bl
.text:0040C92D                 jz      loc_40C9F9
.text:0040C933                 cmp     bl, 2Fh ; '/'
.text:0040C936                 jz      short loc_40C952
.text:0040C938                 cmp     bl, 5Ch ; '\'
.text:0040C93B                 jz      short loc_40C952
.text:0040C93D                 lea     esi, [esi+0]
.text:0040C940
.text:0040C940 loc_40C940:                             ; CODE XREF: _win32_longpath+B0↓j
.text:0040C940                 inc     esi
.text:0040C941                 movzx   ebx, byte ptr [esi]
.text:0040C944                 test    bl, bl
.text:0040C946                 jz      short loc_40C952
.text:0040C948                 cmp     bl, 2Fh ; '/'
.text:0040C94B                 jz      short loc_40C952
.text:0040C94D                 cmp     bl, 5Ch ; '\'
.text:0040C950                 jnz     short loc_40C940
.text:0040C952
.text:0040C952 loc_40C952:                             ; CODE XREF: _win32_longpath+96↑j
.text:0040C952                                         ; _win32_longpath+9B↑j ...
.text:0040C952                 mov     byte ptr [esi], 0
.text:0040C955                 lea     edx, [esp+278h+FindFileData]
.text:0040C95C                 mov     eax, [esp+278h+lpFileName]
.text:0040C963                 mov     [esp+278h+lpFindFileData], edx ; lpFindFileData
.text:0040C967                 mov     [esp+278h+C], eax ; lpFileName
.text:0040C96A                 call    FindFirstFileA
.text:0040C96F                 mov     [esi], bl
.text:0040C971                 sub     esp, 8
.text:0040C974                 mov     edi, eax
.text:0040C976                 cmp     eax, 0FFFFFFFFh
.text:0040C979                 jz      loc_40CA3C
.text:0040C97F                 lea     ebx, [esp+278h+FindFileData.cFileName]
.text:0040C986                 mov     ecx, ebx
.text:0040C988                 nop
.text:0040C989                 lea     esi, [esi+0]
.text:0040C990
.text:0040C990 loc_40C990:                             ; CODE XREF: _win32_longpath+105↓j
.text:0040C990                 mov     eax, [ebx]
.text:0040C992                 add     ebx, 4
.text:0040C995                 lea     edx, [eax-1010101h]
.text:0040C99B                 not     eax
.text:0040C99D                 and     edx, eax
.text:0040C99F                 and     edx, 80808080h
.text:0040C9A5                 jz      short loc_40C990
.text:0040C9A7                 test    edx, 8080h
.text:0040C9AD                 jnz     short loc_40C9B5
.text:0040C9AF                 shr     edx, 10h
.text:0040C9B2                 add     ebx, 2
.text:0040C9B5
.text:0040C9B5 loc_40C9B5:                             ; CODE XREF: _win32_longpath+10D↑j
.text:0040C9B5                 add     dl, dl
.text:0040C9B7                 sbb     ebx, 3
.text:0040C9BA                 sub     ebx, ecx
.text:0040C9BC                 lea     ecx, [esp+278h+Destination]
.text:0040C9C0                 sub     ecx, ebp
.text:0040C9C2                 add     ecx, 105h
.text:0040C9C8                 cmp     ecx, ebx
.text:0040C9CA                 jle     short loc_40CA22
.text:0040C9CC                 mov     [esp+278h+C], ebp ; Destination
.text:0040C9CF                 lea     edx, [esp+278h+FindFileData.cFileName]
.text:0040C9D6                 add     ebp, ebx
.text:0040C9D8                 mov     [esp+278h+lpFindFileData], edx ; Source
.text:0040C9DC                 call    strcpy
.text:0040C9E1                 mov     [esp+278h+C], edi ; hFindFile
.text:0040C9E4                 call    FindClose
.text:0040C9E9                 sub     esp, 4
.text:0040C9EC
.text:0040C9EC loc_40C9EC:                             ; CODE XREF: _win32_longpath+1E0↓j
.text:0040C9EC                 movzx   ecx, byte ptr [esi]
.text:0040C9EF                 test    cl, cl
.text:0040C9F1                 mov     bl, cl
.text:0040C9F3                 jnz     loc_40C910
.text:0040C9F9
.text:0040C9F9 loc_40C9F9:                             ; CODE XREF: _win32_longpath+62↑j
.text:0040C9F9                                         ; _win32_longpath+8D↑j
.text:0040C9F9                 mov     esi, [esp+278h+lpFileName]
.text:0040CA00                 lea     ebp, [esp+278h+Destination]
.text:0040CA04                 mov     [esp+278h+lpFindFileData], ebp ; Source
.text:0040CA08                 mov     [esp+278h+C], esi ; Destination
.text:0040CA0B                 call    strcpy
.text:0040CA10                 mov     eax, [esp+278h+lpFileName]
.text:0040CA17
.text:0040CA17 loc_40CA17:                             ; CODE XREF: _win32_longpath+19↑j
.text:0040CA17                                         ; _win32_longpath+19A↓j
.text:0040CA17                 add     esp, 26Ch
.text:0040CA1D                 pop     ebx
.text:0040CA1E                 pop     esi
.text:0040CA1F                 pop     edi
.text:0040CA20                 pop     ebp
.text:0040CA21                 retn
.text:0040CA22 ; ---------------------------------------------------------------------------
.text:0040CA22
.text:0040CA22 loc_40CA22:                             ; CODE XREF: _win32_longpath+12A↑j
.text:0040CA22                 mov     [esp+278h+C], edi ; hFindFile
.text:0040CA25                 call    FindClose
.text:0040CA2A                 sub     esp, 4
.text:0040CA2D                 call    _errno
.text:0040CA32                 mov     dword ptr [eax], 22h ; '"'
.text:0040CA38
.text:0040CA38 loc_40CA38:                             ; CODE XREF: _win32_longpath+1A7↓j
.text:0040CA38                 xor     eax, eax
.text:0040CA3A                 jmp     short loc_40CA17
.text:0040CA3C ; ---------------------------------------------------------------------------
.text:0040CA3C
.text:0040CA3C loc_40CA3C:                             ; CODE XREF: _win32_longpath+D9↑j
.text:0040CA3C                 call    _errno
.text:0040CA41                 mov     dword ptr [eax], 16h
.text:0040CA47                 jmp     short loc_40CA38
.text:0040CA47 ; ---------------------------------------------------------------------------
.text:0040CA49                 align 10h
.text:0040CA50
.text:0040CA50 loc_40CA50:                             ; CODE XREF: _win32_longpath+85↑j
.text:0040CA50                 movzx   eax, byte ptr [esi+1]
.text:0040CA54                 test    al, al
.text:0040CA56                 jnz     short loc_40CA85
.text:0040CA58
.text:0040CA58 loc_40CA58:                             ; CODE XREF: _win32_longpath+1E7↓j
.text:0040CA58                                         ; _win32_longpath+1EB↓j ...
.text:0040CA58                 test    bl, bl
.text:0040CA5A                 jz      short loc_40CA7C
.text:0040CA5C                 cmp     bl, 2Fh ; '/'
.text:0040CA5F                 jz      short loc_40CA7C
.text:0040CA61                 cmp     bl, 5Ch ; '\'
.text:0040CA64                 jz      short loc_40CA7C
.text:0040CA66
.text:0040CA66 loc_40CA66:                             ; CODE XREF: _win32_longpath+1DA↓j
.text:0040CA66                 mov     [ebp+268h+Destination], bl
.text:0040CA69                 inc     esi
.text:0040CA6A                 inc     ebp
.text:0040CA6B                 movzx   ebx, byte ptr [esi]
.text:0040CA6E                 test    bl, bl
.text:0040CA70                 jz      short loc_40CA7C
.text:0040CA72                 cmp     bl, 2Fh ; '/'
.text:0040CA75                 jz      short loc_40CA7C
.text:0040CA77                 cmp     bl, 5Ch ; '\'
.text:0040CA7A                 jnz     short loc_40CA66
.text:0040CA7C
.text:0040CA7C loc_40CA7C:                             ; CODE XREF: _win32_longpath+1BA↑j
.text:0040CA7C                                         ; _win32_longpath+1BF↑j ...
.text:0040CA7C                 mov     [ebp+268h+Destination], 0
.text:0040CA80                 jmp     loc_40C9EC
.text:0040CA85 ; ---------------------------------------------------------------------------
.text:0040CA85
.text:0040CA85 loc_40CA85:                             ; CODE XREF: _win32_longpath+1B6↑j
.text:0040CA85                 cmp     al, 2Fh ; '/'
.text:0040CA87                 jz      short loc_40CA58
.text:0040CA89                 cmp     al, 5Ch ; '\'
.text:0040CA8B                 jz      short loc_40CA58
.text:0040CA8D                 cmp     al, 2Eh ; '.'
.text:0040CA8F                 jnz     loc_40C92B
.text:0040CA95                 movzx   eax, byte ptr [esi+2]
.text:0040CA99                 test    al, al
.text:0040CA9B                 jz      short loc_40CA58
.text:0040CA9D                 cmp     al, 2Fh ; '/'
.text:0040CA9F                 jz      short loc_40CA58
.text:0040CAA1                 cmp     al, 5Ch ; '\'
.text:0040CAA3                 jnz     loc_40C92B
.text:0040CAA9                 jmp     short loc_40CA58
.text:0040CAA9 ; ---------------------------------------------------------------------------
.text:0040CAAB                 align 10h
.text:0040CAB0
.text:0040CAB0 loc_40CAB0:                             ; CODE XREF: _win32_longpath+73↑j
.text:0040CAB0                                         ; _win32_longpath+7C↑j
.text:0040CAB0                 mov     [ebp+268h+Destination], bl
.text:0040CAB3                 inc     esi
.text:0040CAB4                 inc     ebp
.text:0040CAB5                 mov     [ebp+268h+Destination], 0
.text:0040CAB9                 movzx   ebx, byte ptr [esi]
.text:0040CABC                 test    bl, bl
.text:0040CABE                 jz      loc_40C922
.text:0040CAC4                 cmp     bl, 2Fh ; '/'
.text:0040CAC7                 jz      short loc_40CAE0
.text:0040CAC9                 cmp     bl, 5Ch ; '\'
.text:0040CACC                 jnz     loc_40C922
.text:0040CAD2                 lea     esi, [esi+0]
.text:0040CAD9                 lea     edi, [edi+0]
.text:0040CAE0
.text:0040CAE0 loc_40CAE0:                             ; CODE XREF: _win32_longpath+227↑j
.text:0040CAE0                                         ; _win32_longpath+24F↓j ...
.text:0040CAE0                 inc     esi
.text:0040CAE1                 movzx   ebx, byte ptr [esi]
.text:0040CAE4                 test    bl, bl
.text:0040CAE6                 jz      loc_40C922
.text:0040CAEC                 cmp     bl, 2Fh ; '/'
.text:0040CAEF                 jz      short loc_40CAE0
.text:0040CAF1                 cmp     bl, 5Ch ; '\'
.text:0040CAF4                 jz      short loc_40CAE0
.text:0040CAF6                 jmp     loc_40C922
.text:0040CAFB ; ---------------------------------------------------------------------------
.text:0040CAFB
.text:0040CAFB loc_40CAFB:                             ; CODE XREF: _win32_longpath+4B↑j
.text:0040CAFB                                         ; _win32_longpath+53↑j
.text:0040CAFB                 mov     edi, [esp+278h+lpFileName]
.text:0040CB02                 movzx   edx, byte ptr [edi+1]
.text:0040CB06                 cmp     dl, 2Fh ; '/'
.text:0040CB09                 jz      short loc_40CB14
.text:0040CB0B                 cmp     dl, 5Ch ; '\'
.text:0040CB0E                 jnz     loc_40C8F9
.text:0040CB14
.text:0040CB14 loc_40CB14:                             ; CODE XREF: _win32_longpath+269↑j
.text:0040CB14                 mov     esi, [esp+278h+lpFileName]
.text:0040CB1B                 mov     [ebp+268h+Destination], al
.text:0040CB1E                 mov     ecx, [esp+278h+lpFileName]
.text:0040CB25                 inc     ebp
.text:0040CB26                 add     esi, 2
.text:0040CB29                 movzx   ebx, byte ptr [ecx+1]
.text:0040CB2D                 mov     [ebp+268h+Destination], bl
.text:0040CB30                 inc     ebp
.text:0040CB31                 movzx   eax, byte ptr [ecx+2]
.text:0040CB35                 test    al, al
.text:0040CB37                 jz      loc_40CC13
.text:0040CB3D                 cmp     al, 2Fh ; '/'
.text:0040CB3F                 jz      loc_40CBF8
.text:0040CB45                 cmp     al, 5Ch ; '\'
.text:0040CB47                 mov     bl, al
.text:0040CB49                 jz      loc_40CBF8
.text:0040CB4F
.text:0040CB4F loc_40CB4F:                             ; CODE XREF: _win32_longpath+36E↓j
.text:0040CB4F                                         ; _win32_longpath+376↓j
.text:0040CB4F                 test    bl, bl
.text:0040CB51                 jz      loc_40C8F9
.text:0040CB57                 cmp     bl, 2Fh ; '/'
.text:0040CB5A                 jz      short loc_40CB7B
.text:0040CB5C                 cmp     bl, 5Ch ; '\'
.text:0040CB5F                 jz      short loc_40CB7B
.text:0040CB61
.text:0040CB61 loc_40CB61:                             ; CODE XREF: _win32_longpath+2D9↓j
.text:0040CB61                 mov     [ebp+268h+Destination], bl
.text:0040CB64                 inc     esi
.text:0040CB65                 inc     ebp
.text:0040CB66                 movzx   ebx, byte ptr [esi]
.text:0040CB69                 test    bl, bl
.text:0040CB6B                 jz      loc_40C8F9
.text:0040CB71                 cmp     bl, 2Fh ; '/'
.text:0040CB74                 jz      short loc_40CB7B
.text:0040CB76                 cmp     bl, 5Ch ; '\'
.text:0040CB79                 jnz     short loc_40CB61
.text:0040CB7B
.text:0040CB7B loc_40CB7B:                             ; CODE XREF: _win32_longpath+2BA↑j
.text:0040CB7B                                         ; _win32_longpath+2BF↑j ...
.text:0040CB7B                 test    bl, bl
.text:0040CB7D                 jz      loc_40C8F9
.text:0040CB83                 mov     [ebp+268h+Destination], bl
.text:0040CB86                 inc     esi
.text:0040CB87                 inc     ebp
.text:0040CB88                 movzx   ebx, byte ptr [esi]
.text:0040CB8B                 test    bl, bl
.text:0040CB8D                 jz      loc_40C8F9
.text:0040CB93                 cmp     bl, 2Fh ; '/'
.text:0040CB96                 jz      short loc_40CBE0
.text:0040CB98                 cmp     bl, 5Ch ; '\'
.text:0040CB9B                 jz      short loc_40CBE0
.text:0040CB9D
.text:0040CB9D loc_40CB9D:                             ; CODE XREF: _win32_longpath+356↓j
.text:0040CB9D                 test    bl, bl
.text:0040CB9F                 jz      loc_40C8F9
.text:0040CBA5                 cmp     bl, 2Fh ; '/'
.text:0040CBA8                 jz      loc_40C8F9
.text:0040CBAE                 cmp     bl, 5Ch ; '\'
.text:0040CBB1                 jz      loc_40C8F9
.text:0040CBB7
.text:0040CBB7 loc_40CBB7:                             ; CODE XREF: _win32_longpath+333↓j
.text:0040CBB7                 mov     [ebp+268h+Destination], bl
.text:0040CBBA                 inc     esi
.text:0040CBBB                 inc     ebp
.text:0040CBBC                 movzx   ebx, byte ptr [esi]
.text:0040CBBF                 test    bl, bl
.text:0040CBC1                 jz      loc_40C8F9
.text:0040CBC7                 cmp     bl, 2Fh ; '/'
.text:0040CBCA                 jz      loc_40C8F9
.text:0040CBD0                 cmp     bl, 5Ch ; '\'
.text:0040CBD3                 jnz     short loc_40CBB7
.text:0040CBD5                 jmp     loc_40C8F9
.text:0040CBD5 ; ---------------------------------------------------------------------------
.text:0040CBDA                 align 10h
.text:0040CBE0
.text:0040CBE0 loc_40CBE0:                             ; CODE XREF: _win32_longpath+2F6↑j
.text:0040CBE0                                         ; _win32_longpath+2FB↑j ...
.text:0040CBE0                 inc     esi
.text:0040CBE1                 movzx   ebx, byte ptr [esi]
.text:0040CBE4                 test    bl, bl
.text:0040CBE6                 jz      loc_40C8F9
.text:0040CBEC                 cmp     bl, 2Fh ; '/'
.text:0040CBEF                 jz      short loc_40CBE0
.text:0040CBF1                 cmp     bl, 5Ch ; '\'
.text:0040CBF4                 jz      short loc_40CBE0
.text:0040CBF6                 jmp     short loc_40CB9D
.text:0040CBF8 ; ---------------------------------------------------------------------------
.text:0040CBF8
.text:0040CBF8 loc_40CBF8:                             ; CODE XREF: _win32_longpath+29F↑j
.text:0040CBF8                                         ; _win32_longpath+2A9↑j ...
.text:0040CBF8                 inc     esi
.text:0040CBF9                 movzx   ebx, byte ptr [esi]
.text:0040CBFC                 test    bl, bl
.text:0040CBFE                 jz      loc_40C8F9
.text:0040CC04                 cmp     bl, 2Fh ; '/'
.text:0040CC07                 jz      short loc_40CBF8
.text:0040CC09                 cmp     bl, 5Ch ; '\'
.text:0040CC0C                 jz      short loc_40CBF8
.text:0040CC0E                 jmp     loc_40CB4F
.text:0040CC13 ; ---------------------------------------------------------------------------
.text:0040CC13
.text:0040CC13 loc_40CC13:                             ; CODE XREF: _win32_longpath+297↑j
.text:0040CC13                 movzx   ebx, byte ptr [esi]
.text:0040CC16                 jmp     loc_40CB4F
.text:0040CC1B ; ---------------------------------------------------------------------------
.text:0040CC1B
.text:0040CC1B loc_40CC1B:                             ; CODE XREF: _win32_longpath+39↑j
.text:0040CC1B                 movzx   ecx, byte ptr [eax]
.text:0040CC1E                 mov     esi, eax
.text:0040CC20                 mov     [esp+278h+var_267], 3Ah ; ':'
.text:0040CC25                 add     esi, 2
.text:0040CC28                 lea     ebp, [esp+12h]
.text:0040CC2C                 mov     [esp+278h+Destination], cl
.text:0040CC30                 jmp     loc_40C8F9
.text:0040CC30 _win32_longpath endp
.text:0040CC30
.text:0040CC30 ; ---------------------------------------------------------------------------
.text:0040CC35                 align 10h
.text:0040CC40                 sub     esp, 0Ch
.text:0040CC43                 mov     edx, [esp+10h]
.text:0040CC47                 mov     dword ptr [esp+4], 0
.text:0040CC4F                 mov     [esp], edx
.text:0040CC52                 call    sub_40E2A0
.text:0040CC57                 inc     eax
.text:0040CC58                 setnz   dl
.text:0040CC5B                 add     esp, 0Ch
.text:0040CC5E                 movzx   eax, dl
.text:0040CC61                 retn
.text:0040CC61 ; ---------------------------------------------------------------------------
.text:0040CC62                 align 10h
.text:0040CC70
.text:0040CC70 ; =============== S U B R O U T I N E =======================================
.text:0040CC70
.text:0040CC70
.text:0040CC70 sub_40CC70      proc near               ; CODE XREF: sub_40E170+AA↓p
.text:0040CC70                                         ; sub_419BC0+B4↓p
.text:0040CC70
.text:0040CC70 arg_0           = dword ptr  4
.text:0040CC70
.text:0040CC70                 mov     ecx, [esp+arg_0]
.text:0040CC74                 mov     edx, ecx
.text:0040CC76                 movzx   eax, byte ptr [ecx]
.text:0040CC79                 test    al, al
.text:0040CC7B                 jz      short loc_40CC8C
.text:0040CC7D                 lea     esi, [esi+0]
.text:0040CC80
.text:0040CC80 loc_40CC80:                             ; CODE XREF: sub_40CC70+1A↓j
.text:0040CC80                 cmp     al, 5Ch ; '\'
.text:0040CC82                 jz      short loc_40CC90
.text:0040CC84
.text:0040CC84 loc_40CC84:                             ; CODE XREF: sub_40CC70+23↓j
.text:0040CC84                 inc     edx
.text:0040CC85                 movzx   eax, byte ptr [edx]
.text:0040CC88                 test    al, al
.text:0040CC8A                 jnz     short loc_40CC80
.text:0040CC8C
.text:0040CC8C loc_40CC8C:                             ; CODE XREF: sub_40CC70+B↑j
.text:0040CC8C                 mov     eax, ecx
.text:0040CC8E                 retn
.text:0040CC8E ; ---------------------------------------------------------------------------
.text:0040CC8F                 align 10h
.text:0040CC90
.text:0040CC90 loc_40CC90:                             ; CODE XREF: sub_40CC70+12↑j
.text:0040CC90                 mov     byte ptr [edx], 2Fh ; '/'
.text:0040CC93                 jmp     short loc_40CC84
.text:0040CC93 sub_40CC70      endp
.text:0040CC93
.text:0040CC93 ; ---------------------------------------------------------------------------
.text:0040CC95                 align 10h
.text:0040CCA0                 push    ebx
.text:0040CCA1                 sub     esp, 8
.text:0040CCA4                 mov     ebx, [esp+14h]
.text:0040CCA8                 mov     edx, [esp+10h]
.text:0040CCAC                 mov     [esp], ebx
.text:0040CCAF                 mov     [esp+4], edx
.text:0040CCB3                 call    strcpy
.text:0040CCB8                 movzx   eax, byte ptr [ebx]
.text:0040CCBB                 mov     edx, ebx
.text:0040CCBD                 test    al, al
.text:0040CCBF                 jz      short loc_40CCDC
.text:0040CCC1                 jmp     short loc_40CCD0
.text:0040CCC1 ; ---------------------------------------------------------------------------
.text:0040CCC3                 align 10h
.text:0040CCD0
.text:0040CCD0 loc_40CCD0:                             ; CODE XREF: .text:0040CCC1↑j
.text:0040CCD0                                         ; .text:0040CCDA↓j
.text:0040CCD0                 cmp     al, 5Ch ; '\'
.text:0040CCD2                 jz      short loc_40CCE3
.text:0040CCD4
.text:0040CCD4 loc_40CCD4:                             ; CODE XREF: .text:0040CCE6↓j
.text:0040CCD4                 inc     edx
.text:0040CCD5                 movzx   eax, byte ptr [edx]
.text:0040CCD8                 test    al, al
.text:0040CCDA                 jnz     short loc_40CCD0
.text:0040CCDC
.text:0040CCDC loc_40CCDC:                             ; CODE XREF: .text:0040CCBF↑j
.text:0040CCDC                 add     esp, 8
.text:0040CCDF                 xor     eax, eax
.text:0040CCE1                 pop     ebx
.text:0040CCE2                 retn
.text:0040CCE3 ; ---------------------------------------------------------------------------
.text:0040CCE3
.text:0040CCE3 loc_40CCE3:                             ; CODE XREF: .text:0040CCD2↑j
.text:0040CCE3                 mov     byte ptr [edx], 2Fh ; '/'
.text:0040CCE6                 jmp     short loc_40CCD4
.text:0040CCE6 ; ---------------------------------------------------------------------------
.text:0040CCE8                 align 10h
.text:0040CCF0
.text:0040CCF0 ; =============== S U B R O U T I N E =======================================
.text:0040CCF0
.text:0040CCF0
.text:0040CCF0 sub_40CCF0      proc near               ; CODE XREF: sub_40B570+16↑p
.text:0040CCF0                                         ; sub_40BA70+1F↑p ...
.text:0040CCF0
.text:0040CCF0 arg_0           = dword ptr  4
.text:0040CCF0
.text:0040CCF0                 mov     ecx, [esp+arg_0]
.text:0040CCF4                 mov     edx, ecx
.text:0040CCF6                 movzx   eax, byte ptr [ecx]
.text:0040CCF9                 test    al, al
.text:0040CCFB                 jz      short loc_40CD0C
.text:0040CCFD                 lea     esi, [esi+0]
.text:0040CD00
.text:0040CD00 loc_40CD00:                             ; CODE XREF: sub_40CCF0+1A↓j
.text:0040CD00                 cmp     al, 2Fh ; '/'
.text:0040CD02                 jz      short loc_40CD10
.text:0040CD04
.text:0040CD04 loc_40CD04:                             ; CODE XREF: sub_40CCF0+23↓j
.text:0040CD04                 inc     edx
.text:0040CD05                 movzx   eax, byte ptr [edx]
.text:0040CD08                 test    al, al
.text:0040CD0A                 jnz     short loc_40CD00
.text:0040CD0C
.text:0040CD0C loc_40CD0C:                             ; CODE XREF: sub_40CCF0+B↑j
.text:0040CD0C                 mov     eax, ecx
.text:0040CD0E                 retn
.text:0040CD0E ; ---------------------------------------------------------------------------
.text:0040CD0F                 align 10h
.text:0040CD10
.text:0040CD10 loc_40CD10:                             ; CODE XREF: sub_40CCF0+12↑j
.text:0040CD10                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040CD13                 jmp     short loc_40CD04
.text:0040CD13 sub_40CCF0      endp
.text:0040CD13
.text:0040CD13 ; ---------------------------------------------------------------------------
.text:0040CD15                 align 10h
.text:0040CD20                 push    ebx
.text:0040CD21                 sub     esp, 8
.text:0040CD24                 mov     ebx, [esp+14h]
.text:0040CD28                 mov     edx, [esp+10h]
.text:0040CD2C                 mov     [esp], ebx
.text:0040CD2F                 mov     [esp+4], edx
.text:0040CD33                 call    strcpy
.text:0040CD38                 movzx   eax, byte ptr [ebx]
.text:0040CD3B                 mov     edx, ebx
.text:0040CD3D                 test    al, al
.text:0040CD3F                 jz      short loc_40CD5C
.text:0040CD41                 jmp     short loc_40CD50
.text:0040CD41 ; ---------------------------------------------------------------------------
.text:0040CD43                 align 10h
.text:0040CD50
.text:0040CD50 loc_40CD50:                             ; CODE XREF: .text:0040CD41↑j
.text:0040CD50                                         ; .text:0040CD5A↓j
.text:0040CD50                 cmp     al, 2Fh ; '/'
.text:0040CD52                 jz      short loc_40CD63
.text:0040CD54
.text:0040CD54 loc_40CD54:                             ; CODE XREF: .text:0040CD66↓j
.text:0040CD54                 inc     edx
.text:0040CD55                 movzx   eax, byte ptr [edx]
.text:0040CD58                 test    al, al
.text:0040CD5A                 jnz     short loc_40CD50
.text:0040CD5C
.text:0040CD5C loc_40CD5C:                             ; CODE XREF: .text:0040CD3F↑j
.text:0040CD5C                 add     esp, 8
.text:0040CD5F                 xor     eax, eax
.text:0040CD61                 pop     ebx
.text:0040CD62                 retn
.text:0040CD63 ; ---------------------------------------------------------------------------
.text:0040CD63
.text:0040CD63 loc_40CD63:                             ; CODE XREF: .text:0040CD52↑j
.text:0040CD63                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040CD66                 jmp     short loc_40CD54
.text:0040CD66 ; ---------------------------------------------------------------------------
.text:0040CD68                 align 10h
.text:0040CD70                 push    ebx
.text:0040CD71                 sub     esp, 8
.text:0040CD74                 mov     ebx, [esp+14h]
.text:0040CD78                 mov     edx, [esp+10h]
.text:0040CD7C                 mov     [esp+4], ebx
.text:0040CD80                 mov     [esp], edx
.text:0040CD83                 call    sub_40E120
.text:0040CD88                 movzx   eax, byte ptr [ebx]
.text:0040CD8B                 mov     edx, ebx
.text:0040CD8D                 test    al, al
.text:0040CD8F                 jz      short loc_40CDAC
.text:0040CD91                 jmp     short loc_40CDA0
.text:0040CD91 ; ---------------------------------------------------------------------------
.text:0040CD93                 align 10h
.text:0040CDA0
.text:0040CDA0 loc_40CDA0:                             ; CODE XREF: .text:0040CD91↑j
.text:0040CDA0                                         ; .text:0040CDAA↓j
.text:0040CDA0                 cmp     al, 2Fh ; '/'
.text:0040CDA2                 jz      short loc_40CDB3
.text:0040CDA4
.text:0040CDA4 loc_40CDA4:                             ; CODE XREF: .text:0040CDB6↓j
.text:0040CDA4                 inc     edx
.text:0040CDA5                 movzx   eax, byte ptr [edx]
.text:0040CDA8                 test    al, al
.text:0040CDAA                 jnz     short loc_40CDA0
.text:0040CDAC
.text:0040CDAC loc_40CDAC:                             ; CODE XREF: .text:0040CD8F↑j
.text:0040CDAC                 add     esp, 8
.text:0040CDAF                 xor     eax, eax
.text:0040CDB1                 pop     ebx
.text:0040CDB2                 retn
.text:0040CDB3 ; ---------------------------------------------------------------------------
.text:0040CDB3
.text:0040CDB3 loc_40CDB3:                             ; CODE XREF: .text:0040CDA2↑j
.text:0040CDB3                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040CDB6                 jmp     short loc_40CDA4
.text:0040CDB6 ; ---------------------------------------------------------------------------
.text:0040CDB8                 align 10h
.text:0040CDC0                 push    ebx
.text:0040CDC1                 sub     esp, 8
.text:0040CDC4                 mov     ebx, [esp+14h]
.text:0040CDC8                 mov     edx, [esp+10h]
.text:0040CDCC                 mov     [esp], ebx
.text:0040CDCF                 mov     [esp+4], edx
.text:0040CDD3                 call    sub_40E120
.text:0040CDD8                 movzx   eax, byte ptr [ebx]
.text:0040CDDB                 mov     edx, ebx
.text:0040CDDD                 test    al, al
.text:0040CDDF                 jz      short loc_40CDFC
.text:0040CDE1                 jmp     short loc_40CDF0
.text:0040CDE1 ; ---------------------------------------------------------------------------
.text:0040CDE3                 align 10h
.text:0040CDF0
.text:0040CDF0 loc_40CDF0:                             ; CODE XREF: .text:0040CDE1↑j
.text:0040CDF0                                         ; .text:0040CDFA↓j
.text:0040CDF0                 cmp     al, 5Ch ; '\'
.text:0040CDF2                 jz      short loc_40CE01
.text:0040CDF4
.text:0040CDF4 loc_40CDF4:                             ; CODE XREF: .text:0040CE04↓j
.text:0040CDF4                 inc     edx
.text:0040CDF5                 movzx   eax, byte ptr [edx]
.text:0040CDF8                 test    al, al
.text:0040CDFA                 jnz     short loc_40CDF0
.text:0040CDFC
.text:0040CDFC loc_40CDFC:                             ; CODE XREF: .text:0040CDDF↑j
.text:0040CDFC                 add     esp, 8
.text:0040CDFF                 pop     ebx
.text:0040CE00                 retn
.text:0040CE01 ; ---------------------------------------------------------------------------
.text:0040CE01
.text:0040CE01 loc_40CE01:                             ; CODE XREF: .text:0040CDF2↑j
.text:0040CE01                 mov     byte ptr [edx], 2Fh ; '/'
.text:0040CE04                 jmp     short loc_40CDF4
.text:0040CE04 ; ---------------------------------------------------------------------------
.text:0040CE06                 align 10h
.text:0040CE10
.text:0040CE10 ; =============== S U B R O U T I N E =======================================
.text:0040CE10
.text:0040CE10
.text:0040CE10 ; int __cdecl sub_40CE10(LPSTR)
.text:0040CE10 sub_40CE10      proc near               ; CODE XREF: .text:0040CE9E↓p
.text:0040CE10                                         ; .text:0040CEDE↓p ...
.text:0040CE10
.text:0040CE10 hModule         = dword ptr -1Ch
.text:0040CE10 lpFilename      = dword ptr -18h
.text:0040CE10 nSize           = dword ptr -14h
.text:0040CE10 arg_0           = dword ptr  4
.text:0040CE10
.text:0040CE10                 push    esi
.text:0040CE11                 push    ebx
.text:0040CE12                 sub     esp, 14h
.text:0040CE15                 mov     esi, [esp+1Ch+arg_0]
.text:0040CE19                 mov     [esp+1Ch+nSize], 104h ; nSize
.text:0040CE21                 mov     [esp+1Ch+hModule], 0 ; hModule
.text:0040CE28                 mov     [esp+1Ch+lpFilename], esi ; lpFilename
.text:0040CE2C                 call    GetModuleFileNameA
.text:0040CE31                 sub     esp, 0Ch
.text:0040CE34                 test    eax, eax
.text:0040CE36                 jz      short loc_40CE78
.text:0040CE38                 cmp     eax, 104h
.text:0040CE3D                 jg      short loc_40CE69
.text:0040CE3F
.text:0040CE3F loc_40CE3F:                             ; CODE XREF: sub_40CE10+66↓j
.text:0040CE3F                                         ; sub_40CE10+78↓j
.text:0040CE3F                 movzx   eax, byte ptr [esi]
.text:0040CE42                 mov     edx, esi
.text:0040CE44                 test    al, al
.text:0040CE46                 jz      short loc_40CE5C
.text:0040CE48                 nop
.text:0040CE49                 lea     esi, [esi+0]
.text:0040CE50
.text:0040CE50 loc_40CE50:                             ; CODE XREF: sub_40CE10+4A↓j
.text:0040CE50                 cmp     al, 5Ch ; '\'
.text:0040CE52                 jz      short loc_40CE64
.text:0040CE54
.text:0040CE54 loc_40CE54:                             ; CODE XREF: sub_40CE10+57↓j
.text:0040CE54                 inc     edx
.text:0040CE55                 movzx   eax, byte ptr [edx]
.text:0040CE58                 test    al, al
.text:0040CE5A                 jnz     short loc_40CE50
.text:0040CE5C
.text:0040CE5C loc_40CE5C:                             ; CODE XREF: sub_40CE10+36↑j
.text:0040CE5C                 add     esp, 14h
.text:0040CE5F                 mov     eax, esi
.text:0040CE61                 pop     ebx
.text:0040CE62                 pop     esi
.text:0040CE63                 retn
.text:0040CE64 ; ---------------------------------------------------------------------------
.text:0040CE64
.text:0040CE64 loc_40CE64:                             ; CODE XREF: sub_40CE10+42↑j
.text:0040CE64                 mov     byte ptr [edx], 2Fh ; '/'
.text:0040CE67                 jmp     short loc_40CE54
.text:0040CE69 ; ---------------------------------------------------------------------------
.text:0040CE69
.text:0040CE69 loc_40CE69:                             ; CODE XREF: sub_40CE10+2D↑j
.text:0040CE69                 call    _errno
.text:0040CE6E                 mov     dword ptr [eax], 26h ; '&'
.text:0040CE74                 xor     esi, esi
.text:0040CE76                 jmp     short loc_40CE3F
.text:0040CE78 ; ---------------------------------------------------------------------------
.text:0040CE78
.text:0040CE78 loc_40CE78:                             ; CODE XREF: sub_40CE10+26↑j
.text:0040CE78                 call    sub_40E100
.text:0040CE7D                 mov     ebx, eax
.text:0040CE7F                 xor     esi, esi
.text:0040CE81                 call    _errno
.text:0040CE86                 mov     [eax], ebx
.text:0040CE88                 jmp     short loc_40CE3F
.text:0040CE88 sub_40CE10      endp
.text:0040CE88
.text:0040CE88 ; ---------------------------------------------------------------------------
.text:0040CE8A                 align 10h
.text:0040CE90                 sub     esp, 0Ch
.text:0040CE93                 mov     [esp+8], ebx
.text:0040CE97                 mov     ebx, [esp+10h]
.text:0040CE9B                 mov     [esp], ebx
.text:0040CE9E                 call    sub_40CE10
.text:0040CEA3                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:0040CEAB                 mov     [esp], ebx
.text:0040CEAE                 call    strrchr
.text:0040CEB3                 test    eax, eax
.text:0040CEB5                 jz      short loc_40CEBA
.text:0040CEB7                 lea     ebx, [eax+1]
.text:0040CEBA
.text:0040CEBA loc_40CEBA:                             ; CODE XREF: .text:0040CEB5↑j
.text:0040CEBA                 mov     eax, ebx
.text:0040CEBC                 mov     ebx, [esp+8]
.text:0040CEC0                 add     esp, 0Ch
.text:0040CEC3                 retn
.text:0040CEC3 ; ---------------------------------------------------------------------------
.text:0040CEC4                 align 10h
.text:0040CED0                 sub     esp, 0Ch
.text:0040CED3                 mov     [esp+8], ebx
.text:0040CED7                 mov     ebx, [esp+10h]
.text:0040CEDB                 mov     [esp], ebx
.text:0040CEDE                 call    sub_40CE10
.text:0040CEE3                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:0040CEEB                 mov     [esp], ebx
.text:0040CEEE                 call    strrchr
.text:0040CEF3                 test    eax, eax
.text:0040CEF5                 jz      short loc_40CEFA
.text:0040CEF7                 mov     byte ptr [eax], 0
.text:0040CEFA
.text:0040CEFA loc_40CEFA:                             ; CODE XREF: .text:0040CEF5↑j
.text:0040CEFA                 mov     eax, ebx
.text:0040CEFC                 mov     ebx, [esp+8]
.text:0040CF00                 add     esp, 0Ch
.text:0040CF03                 retn
.text:0040CF03 ; ---------------------------------------------------------------------------
.text:0040CF04                 align 10h
.text:0040CF10                 sub     esp, 0Ch
.text:0040CF13                 mov     [esp+8], ebx
.text:0040CF17                 mov     ebx, [esp+10h]
.text:0040CF1B                 mov     [esp], ebx
.text:0040CF1E                 call    sub_40CE10
.text:0040CF23                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:0040CF2B                 mov     [esp], ebx
.text:0040CF2E                 call    strrchr
.text:0040CF33                 test    eax, eax
.text:0040CF35                 jz      short loc_40CF3A
.text:0040CF37                 mov     byte ptr [eax], 0
.text:0040CF3A
.text:0040CF3A loc_40CF3A:                             ; CODE XREF: .text:0040CF35↑j
.text:0040CF3A                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:0040CF42                 mov     [esp], ebx
.text:0040CF45                 call    strrchr
.text:0040CF4A                 test    eax, eax
.text:0040CF4C                 jz      short loc_40CF51
.text:0040CF4E                 mov     byte ptr [eax], 0
.text:0040CF51
.text:0040CF51 loc_40CF51:                             ; CODE XREF: .text:0040CF4C↑j
.text:0040CF51                 mov     eax, ebx
.text:0040CF53                 mov     ebx, [esp+8]
.text:0040CF57                 add     esp, 0Ch
.text:0040CF5A                 retn
.text:0040CF5A ; ---------------------------------------------------------------------------
.text:0040CF5B                 align 10h
.text:0040CF60                 sub     esp, 1Ch
.text:0040CF63                 mov     edx, [esp+20h]
.text:0040CF67                 mov     [esp+10h], ebx
.text:0040CF6B                 xor     ebx, ebx
.text:0040CF6D                 mov     [esp+14h], esi
.text:0040CF71                 mov     [esp+18h], edi
.text:0040CF75                 mov     [esp], edx
.text:0040CF78                 call    sub_40E150
.text:0040CF7D                 mov     edx, [esp+24h]
.text:0040CF81                 mov     edi, eax
.text:0040CF83                 mov     [esp], edx
.text:0040CF86                 call    sub_40E150
.text:0040CF8B                 mov     [esp+4], eax
.text:0040CF8F                 mov     esi, eax
.text:0040CF91                 mov     [esp], edi
.text:0040CF94                 call    _stricmp_0
.text:0040CF99                 mov     [esp], edi
.text:0040CF9C                 test    eax, eax
.text:0040CF9E                 setz    bl
.text:0040CFA1                 call    free
.text:0040CFA6                 mov     [esp], esi
.text:0040CFA9                 call    free
.text:0040CFAE                 mov     eax, ebx
.text:0040CFB0                 mov     esi, [esp+14h]
.text:0040CFB4                 mov     ebx, [esp+10h]
.text:0040CFB8                 mov     edi, [esp+18h]
.text:0040CFBC                 add     esp, 1Ch
.text:0040CFBF                 retn
.text:0040CFC0 ; ---------------------------------------------------------------------------
.text:0040CFC0                 xor     eax, eax
.text:0040CFC2                 retn
.text:0040CFC2 ; ---------------------------------------------------------------------------
.text:0040CFC3 aKernel32Dll    db 'kernel32.dll',0     ; DATA XREF: .text:0040CFF7↓o
.text:0040CFD0 aGetlongpathnam db 'GetLongPathName',0  ; DATA XREF: .text:0040D006↓o
.text:0040CFE0 ; ---------------------------------------------------------------------------
.text:0040CFE0                 sub     esp, 1Ch
.text:0040CFE3                 mov     [esp+10h], ebx
.text:0040CFE7                 mov     ebx, [esp+20h]
.text:0040CFEB                 mov     [esp+18h], edi
.text:0040CFEF                 mov     edi, [esp+24h]
.text:0040CFF3                 mov     [esp+14h], esi
.text:0040CFF7                 mov     dword ptr [esp], offset aKernel32Dll ; "kernel32.dll"
.text:0040CFFE                 call    GetModuleHandleA
.text:0040D003                 sub     esp, 4
.text:0040D006                 mov     dword ptr [esp+4], offset aGetlongpathnam ; "GetLongPathName"
.text:0040D00E                 mov     [esp], eax
.text:0040D011                 call    GetProcAddress
.text:0040D016                 sub     esp, 8
.text:0040D019                 test    eax, eax
.text:0040D01B                 jz      short loc_40D033
.text:0040D01D                 mov     dword ptr [esp+8], 104h
.text:0040D025                 mov     [esp+4], ebx
.text:0040D029                 mov     [esp], edi
.text:0040D02C                 call    eax
.text:0040D02E                 sub     esp, 0Ch
.text:0040D031                 mov     esi, eax
.text:0040D033
.text:0040D033 loc_40D033:                             ; CODE XREF: .text:0040D01B↑j
.text:0040D033                 test    esi, esi
.text:0040D035                 jz      short loc_40D050
.text:0040D037
.text:0040D037 loc_40D037:                             ; CODE XREF: .text:0040D06B↓j
.text:0040D037                 mov     eax, ebx
.text:0040D039                 mov     esi, [esp+14h]
.text:0040D03D                 mov     ebx, [esp+10h]
.text:0040D041                 mov     edi, [esp+18h]
.text:0040D045                 add     esp, 1Ch
.text:0040D048                 retn
.text:0040D048 ; ---------------------------------------------------------------------------
.text:0040D049                 align 10h
.text:0040D050
.text:0040D050 loc_40D050:                             ; CODE XREF: .text:0040D035↑j
.text:0040D050                 call    sub_40EBE0
.text:0040D055                 mov     [esp], ebx
.text:0040D058                 mov     [esp+4], edi
.text:0040D05C                 call    strcpy
.text:0040D061                 mov     [esp], ebx
.text:0040D064                 call    _win32_longpath
.text:0040D069                 mov     ebx, eax
.text:0040D06B                 jmp     short loc_40D037
.text:0040D06B ; ---------------------------------------------------------------------------
.text:0040D06D                 align 10h
.text:0040D070                 sub     esp, 1Ch
.text:0040D073                 mov     [esp+18h], edi
.text:0040D077                 mov     edi, [esp+20h]
.text:0040D07B                 mov     [esp+10h], ebx
.text:0040D07F                 mov     [esp+14h], esi
.text:0040D083                 mov     dword ptr [esp+8], 0
.text:0040D08B                 mov     dword ptr [esp+4], 0
.text:0040D093                 mov     [esp], edi
.text:0040D096                 call    GetShortPathNameA
.text:0040D09B                 sub     esp, 0Ch
.text:0040D09E                 mov     ebx, eax
.text:0040D0A0                 test    eax, eax
.text:0040D0A2                 jz      short loc_40D0F0
.text:0040D0A4                 lea     edx, [eax+1]
.text:0040D0A7                 mov     [esp], edx
.text:0040D0AA                 call    malloc
.text:0040D0AF                 test    eax, eax
.text:0040D0B1                 mov     esi, eax
.text:0040D0B3                 jz      short loc_40D0F0
.text:0040D0B5                 mov     [esp+8], ebx
.text:0040D0B9                 mov     [esp+4], eax
.text:0040D0BD                 mov     [esp], edi
.text:0040D0C0                 call    GetShortPathNameA
.text:0040D0C5                 sub     esp, 0Ch
.text:0040D0C8                 mov     edx, esi
.text:0040D0CA                 test    eax, eax
.text:0040D0CC                 jz      short loc_40D0E2
.text:0040D0CE                 mov     esi, esi
.text:0040D0D0
.text:0040D0D0 loc_40D0D0:                             ; CODE XREF: .text:0040D100↓j
.text:0040D0D0                 mov     ebx, [esp+10h]
.text:0040D0D4                 mov     eax, edx
.text:0040D0D6                 mov     esi, [esp+14h]
.text:0040D0DA                 mov     edi, [esp+18h]
.text:0040D0DE                 add     esp, 1Ch
.text:0040D0E1                 retn
.text:0040D0E2 ; ---------------------------------------------------------------------------
.text:0040D0E2
.text:0040D0E2 loc_40D0E2:                             ; CODE XREF: .text:0040D0CC↑j
.text:0040D0E2                 mov     [esp], esi
.text:0040D0E5                 call    free
.text:0040D0EA                 lea     esi, [esi+0]
.text:0040D0F0
.text:0040D0F0 loc_40D0F0:                             ; CODE XREF: .text:0040D0A2↑j
.text:0040D0F0                                         ; .text:0040D0B3↑j
.text:0040D0F0                 call    sub_40E100
.text:0040D0F5                 mov     esi, eax
.text:0040D0F7                 call    _errno
.text:0040D0FC                 mov     [eax], esi
.text:0040D0FE                 mov     edx, edi
.text:0040D100                 jmp     short loc_40D0D0
.text:0040D100 ; ---------------------------------------------------------------------------
.text:0040D102                 align 10h
.text:0040D110 ; const char String[4]
.text:0040D110 String          db ' :/',0              ; DATA XREF: sub_40D120+FA↓o
.text:0040D114                 align 10h
.text:0040D120
.text:0040D120 ; =============== S U B R O U T I N E =======================================
.text:0040D120
.text:0040D120
.text:0040D120 ; int __cdecl sub_40D120(LPCSTR)
.text:0040D120 sub_40D120      proc near               ; CODE XREF: sub_40B570+E↑p
.text:0040D120                                         ; sub_40BA70+17↑p ...
.text:0040D120
.text:0040D120 Str             = dword ptr -1Ch
.text:0040D120 Val             = dword ptr -18h
.text:0040D120 Count           = dword ptr -14h
.text:0040D120 var_10          = dword ptr -10h
.text:0040D120 var_C           = dword ptr -0Ch
.text:0040D120 var_8           = dword ptr -8
.text:0040D120 var_4           = dword ptr -4
.text:0040D120 arg_0           = dword ptr  4
.text:0040D120
.text:0040D120                 sub     esp, 1Ch
.text:0040D123                 mov     edx, [esp+1Ch+arg_0]
.text:0040D127                 mov     [esp+1Ch+var_8], edi
.text:0040D12B                 mov     [esp+1Ch+var_10], ebx
.text:0040D12F                 mov     [esp+1Ch+var_C], esi
.text:0040D133                 mov     [esp+1Ch+var_4], ebp
.text:0040D137                 mov     [esp+1Ch+Str], edx ; LPCSTR
.text:0040D13A                 call    sub_40E150
.text:0040D13F                 test    eax, eax
.text:0040D141                 mov     edi, eax
.text:0040D143                 jz      short loc_40D180
.text:0040D145                 mov     [esp+1Ch+Str], eax ; Str
.text:0040D148                 call    strlen
.text:0040D14D                 cmp     eax, 2
.text:0040D150                 jbe     short loc_40D15C
.text:0040D152                 cmp     byte ptr [edi+1], 3Ah ; ':'
.text:0040D156                 jz      loc_40D210
.text:0040D15C
.text:0040D15C loc_40D15C:                             ; CODE XREF: sub_40D120+30↑j
.text:0040D15C                                         ; sub_40D120+F4↓j
.text:0040D15C                 test    edi, edi
.text:0040D15E                 jz      short loc_40D180
.text:0040D160                 mov     [esp+1Ch+Str], edi ; Str
.text:0040D163                 call    strlen
.text:0040D168                 cmp     eax, 4
.text:0040D16B                 mov     ebp, eax
.text:0040D16D                 jle     short loc_40D180
.text:0040D16F                 cmp     byte ptr [edi], 2Fh ; '/'
.text:0040D172                 jz      short loc_40D1A0
.text:0040D174                 lea     esi, [esi+0]
.text:0040D17A                 lea     edi, [edi+0]
.text:0040D180
.text:0040D180 loc_40D180:                             ; CODE XREF: sub_40D120+23↑j
.text:0040D180                                         ; sub_40D120+3E↑j ...
.text:0040D180                 xor     esi, esi
.text:0040D182
.text:0040D182 loc_40D182:                             ; CODE XREF: sub_40D120+CD↓j
.text:0040D182                                         ; sub_40D120+115↓j
.text:0040D182                 mov     [esp+1Ch+Str], edi ; Block
.text:0040D185                 call    free
.text:0040D18A                 mov     eax, esi
.text:0040D18C                 mov     ebx, [esp+1Ch+var_10]
.text:0040D190                 mov     esi, [esp+1Ch+var_C]
.text:0040D194                 mov     edi, [esp+1Ch+var_8]
.text:0040D198                 mov     ebp, [esp+1Ch+var_4]
.text:0040D19C                 add     esp, 1Ch
.text:0040D19F                 retn
.text:0040D1A0 ; ---------------------------------------------------------------------------
.text:0040D1A0
.text:0040D1A0 loc_40D1A0:                             ; CODE XREF: sub_40D120+52↑j
.text:0040D1A0                 cmp     byte ptr [edi+1], 2Fh ; '/'
.text:0040D1A4                 jnz     short loc_40D180
.text:0040D1A6                 mov     [esp+1Ch+Val], 2Fh ; '/' ; Val
.text:0040D1AE                 lea     ecx, [edi+2]
.text:0040D1B1                 mov     [esp+1Ch+Str], ecx ; Str
.text:0040D1B4                 call    strchr
.text:0040D1B9                 test    eax, eax
.text:0040D1BB                 jnz     short loc_40D1EF
.text:0040D1BD
.text:0040D1BD loc_40D1BD:                             ; CODE XREF: sub_40D120+E2↓j
.text:0040D1BD                 inc     ebp
.text:0040D1BE
.text:0040D1BE loc_40D1BE:                             ; CODE XREF: sub_40D120+E9↓j
.text:0040D1BE                 mov     [esp+1Ch+Val], 1 ; Size
.text:0040D1C6                 lea     ebx, [ebp+1]
.text:0040D1C9                 mov     [esp+1Ch+Str], ebx ; Count
.text:0040D1CC                 call    calloc
.text:0040D1D1                 mov     [esp+1Ch+Str], eax ; Destination
.text:0040D1D4                 mov     esi, eax
.text:0040D1D6                 mov     [esp+1Ch+Count], ebx ; Count
.text:0040D1DA                 mov     [esp+1Ch+Val], edi ; Source
.text:0040D1DE                 call    strncpy
.text:0040D1E3                 mov     byte ptr [ebp+esi-1], 2Fh ; '/'
.text:0040D1E8                 mov     byte ptr [ebp+esi+0], 0
.text:0040D1ED                 jmp     short loc_40D182
.text:0040D1EF ; ---------------------------------------------------------------------------
.text:0040D1EF
.text:0040D1EF loc_40D1EF:                             ; CODE XREF: sub_40D120+9B↑j
.text:0040D1EF                 mov     [esp+1Ch+Val], 2Fh ; '/' ; Val
.text:0040D1F7                 inc     eax
.text:0040D1F8                 mov     [esp+1Ch+Str], eax ; Str
.text:0040D1FB                 call    strchr
.text:0040D200                 test    eax, eax
.text:0040D202                 jz      short loc_40D1BD
.text:0040D204                 sub     eax, edi
.text:0040D206                 lea     ebp, [eax+1]
.text:0040D209                 jmp     short loc_40D1BE
.text:0040D209 ; ---------------------------------------------------------------------------
.text:0040D20B                 align 10h
.text:0040D210
.text:0040D210 loc_40D210:                             ; CODE XREF: sub_40D120+36↑j
.text:0040D210                 cmp     byte ptr [edi+2], 2Fh ; '/'
.text:0040D214                 jnz     loc_40D15C
.text:0040D21A                 mov     [esp+1Ch+Str], offset String ; " :/"
.text:0040D221                 call    _strdup
.text:0040D226                 movsx   edx, byte ptr [edi]
.text:0040D229                 mov     esi, eax
.text:0040D22B                 mov     [esp+1Ch+Str], edx ; C
.text:0040D22E                 call    toupper
.text:0040D233                 mov     [esi], al
.text:0040D235                 jmp     loc_40D182
.text:0040D235 sub_40D120      endp
.text:0040D235
.text:0040D235 ; ---------------------------------------------------------------------------
.text:0040D23A                 align 10h
.text:0040D240
.text:0040D240 ; =============== S U B R O U T I N E =======================================
.text:0040D240
.text:0040D240
.text:0040D240 sub_40D240      proc near               ; CODE XREF: .text:0040D394↓p
.text:0040D240                                         ; .text:0040D478↓p
.text:0040D240
.text:0040D240 Str             = dword ptr -2Ch
.text:0040D240 Val             = dword ptr -28h
.text:0040D240 var_18          = dword ptr -18h
.text:0040D240 var_11          = byte ptr -11h
.text:0040D240 arg_0           = dword ptr  4
.text:0040D240
.text:0040D240                 push    ebp
.text:0040D241                 push    edi
.text:0040D242                 push    esi
.text:0040D243                 push    ebx
.text:0040D244                 sub     esp, 1Ch
.text:0040D247                 mov     edx, [esp+2Ch+arg_0]
.text:0040D24B                 cmp     edx, ds:dword_41E520
.text:0040D251                 mov     [esp+2Ch+var_11], 0
.text:0040D256                 jz      loc_40D354
.text:0040D25C                 mov     ebx, ds:dword_41E510
.text:0040D262                 test    ebx, ebx
.text:0040D264                 jz      short loc_40D2D2
.text:0040D266
.text:0040D266 loc_40D266:                             ; CODE XREF: sub_40D240+10F↓j
.text:0040D266                 mov     ebx, [esp+2Ch+arg_0]
.text:0040D26A                 xor     edi, edi
.text:0040D26C                 xor     esi, esi
.text:0040D26E                 mov     ebp, offset dword_41E538
.text:0040D273                 lea     esi, [esi+0]
.text:0040D279                 lea     edi, [edi+0]
.text:0040D280
.text:0040D280 loc_40D280:                             ; CODE XREF: sub_40D240+60↓j
.text:0040D280                 mov     edx, [ebp+4]
.text:0040D283                 mov     ecx, edi
.text:0040D285                 mov     eax, [ebp+0]
.text:0040D288                 shl     ecx, 4
.text:0040D28B                 mov     [esp+2Ch+var_18], ecx
.text:0040D28F                 mov     ecx, edx
.text:0040D291                 xor     eax, ebx
.text:0040D293                 xor     ecx, esi
.text:0040D295                 or      ecx, eax
.text:0040D297                 jz      short loc_40D2C1
.text:0040D299                 inc     edi
.text:0040D29A                 add     ebp, 10h
.text:0040D29D                 cmp     edi, 20h ; ' '
.text:0040D2A0                 jle     short loc_40D280
.text:0040D2A2
.text:0040D2A2 loc_40D2A2:                             ; CODE XREF: sub_40D240+90↓j
.text:0040D2A2                 movzx   ebx, [esp+2Ch+var_11]
.text:0040D2A7                 mov     eax, [esp+2Ch+arg_0]
.text:0040D2AB                 mov     byte_41D0B0, bl
.text:0040D2B1                 mov     ds:dword_41E520, eax
.text:0040D2B6                 movsx   eax, bl
.text:0040D2B9
.text:0040D2B9 loc_40D2B9:                             ; CODE XREF: sub_40D240+11B↓j
.text:0040D2B9                 add     esp, 1Ch
.text:0040D2BC                 pop     ebx
.text:0040D2BD                 pop     esi
.text:0040D2BE                 pop     edi
.text:0040D2BF                 pop     ebp
.text:0040D2C0                 retn
.text:0040D2C1 ; ---------------------------------------------------------------------------
.text:0040D2C1
.text:0040D2C1 loc_40D2C1:                             ; CODE XREF: sub_40D240+57↑j
.text:0040D2C1                 mov     edx, [esp+2Ch+var_18]
.text:0040D2C5                 movzx   eax, byte ptr ds:dword_41E530[edx]
.text:0040D2CC                 mov     [esp+2Ch+var_11], al
.text:0040D2D0                 jmp     short loc_40D2A2
.text:0040D2D2 ; ---------------------------------------------------------------------------
.text:0040D2D2
.text:0040D2D2 loc_40D2D2:                             ; CODE XREF: sub_40D240+24↑j
.text:0040D2D2                 mov     [esp+2Ch+Str], 0
.text:0040D2D9                 call    sub_40F9C0
.text:0040D2DE                 test    eax, eax
.text:0040D2E0                 mov     ebx, eax
.text:0040D2E2                 jz      short loc_40D33C
.text:0040D2E4                 movzx   ecx, byte ptr [eax]
.text:0040D2E7                 mov     esi, 0FFFFFFF0h
.text:0040D2EC                 test    cl, cl
.text:0040D2EE                 jz      short loc_40D33C
.text:0040D2F0
.text:0040D2F0 loc_40D2F0:                             ; CODE XREF: sub_40D240+FA↓j
.text:0040D2F0                 mov     [esp+2Ch+Str], ebx ; LPCSTR
.text:0040D2F3                 movsx   ebp, cl
.text:0040D2F6                 add     esi, 10h
.text:0040D2F9                 mov     ds:dword_41E530[esi], ebp
.text:0040D2FF                 mov     edi, ebp
.text:0040D301                 sar     edi, 1Fh
.text:0040D304                 mov     ds:dword_41E534[esi], edi
.text:0040D30A                 call    sub_40BA70
.text:0040D30F                 mov     ds:dword_41E538[esi], eax
.text:0040D315                 xor     ecx, ecx
.text:0040D317                 mov     [esp+2Ch+Str], ebx ; Str
.text:0040D31A                 mov     ds:dword_41E53C[esi], ecx
.text:0040D320                 mov     [esp+2Ch+Val], 0 ; Val
.text:0040D328                 call    strchr
.text:0040D32D                 mov     ebx, eax
.text:0040D32F                 inc     ebx
.text:0040D330                 jz      short loc_40D33C
.text:0040D332                 movzx   edx, byte ptr [eax+1]
.text:0040D336                 test    dl, dl
.text:0040D338                 mov     cl, dl
.text:0040D33A                 jnz     short loc_40D2F0
.text:0040D33C
.text:0040D33C loc_40D33C:                             ; CODE XREF: sub_40D240+A2↑j
.text:0040D33C                                         ; sub_40D240+AE↑j ...
.text:0040D33C                 mov     [esp+2Ch+Str], ebx ; Block
.text:0040D33F                 mov     esi, 1
.text:0040D344                 mov     ds:dword_41E510, esi
.text:0040D34A                 call    free
.text:0040D34F                 jmp     loc_40D266
.text:0040D354 ; ---------------------------------------------------------------------------
.text:0040D354
.text:0040D354 loc_40D354:                             ; CODE XREF: sub_40D240+16↑j
.text:0040D354                 movsx   eax, byte_41D0B0
.text:0040D35B                 jmp     loc_40D2B9
.text:0040D35B sub_40D240      endp
.text:0040D35B
.text:0040D35B ; ---------------------------------------------------------------------------
.text:0040D360 dword_40D360    dd 5C3A20h, 5C3A43h, 26B48D90h, 0
.text:0040D360                                         ; DATA XREF: .text:0040D383↓o
.text:0040D360                                         ; .text:0040D463↓o
.text:0040D370 ; ---------------------------------------------------------------------------
.text:0040D370                 sub     esp, 1Ch
.text:0040D373                 mov     [esp+14h], esi
.text:0040D377                 mov     esi, [esp+20h]
.text:0040D37B                 mov     [esp+18h], edi
.text:0040D37F                 mov     [esp+10h], ebx
.text:0040D383                 mov     dword ptr [esp], offset dword_40D360
.text:0040D38A                 call    _strdup
.text:0040D38F                 mov     [esp], esi
.text:0040D392                 mov     edi, eax
.text:0040D394                 call    sub_40D240
.text:0040D399                 mov     [edi], al
.text:0040D39B                 test    al, al
.text:0040D39D                 jz      short loc_40D3B1
.text:0040D39F                 mov     eax, edi
.text:0040D3A1                 mov     ebx, [esp+10h]
.text:0040D3A5                 mov     esi, [esp+14h]
.text:0040D3A9                 mov     edi, [esp+18h]
.text:0040D3AD                 add     esp, 1Ch
.text:0040D3B0                 retn
.text:0040D3B1 ; ---------------------------------------------------------------------------
.text:0040D3B1
.text:0040D3B1 loc_40D3B1:                             ; CODE XREF: .text:0040D39D↑j
.text:0040D3B1                 mov     [esp], edi
.text:0040D3B4                 call    free
.text:0040D3B9                 mov     dword ptr [esp+4], 0
.text:0040D3C1                 mov     dword ptr [esp], 0
.text:0040D3C8                 call    GetCurrentDirectoryA
.text:0040D3CD                 sub     esp, 8
.text:0040D3D0                 lea     esi, [eax+1]
.text:0040D3D3                 mov     [esp], esi
.text:0040D3D6                 call    malloc
.text:0040D3DB                 mov     [esp+4], eax
.text:0040D3DF                 mov     edi, eax
.text:0040D3E1                 mov     [esp], esi
.text:0040D3E4                 call    GetCurrentDirectoryA
.text:0040D3E9                 sub     esp, 8
.text:0040D3EC                 test    eax, eax
.text:0040D3EE                 jnz     short loc_40D410
.text:0040D3F0                 mov     dword ptr [esp+20h], 40D364h
.text:0040D3F8                 mov     ebx, [esp+10h]
.text:0040D3FC                 mov     esi, [esp+14h]
.text:0040D400                 mov     edi, [esp+18h]
.text:0040D404                 add     esp, 1Ch
.text:0040D407                 jmp     _strdup
.text:0040D407 ; ---------------------------------------------------------------------------
.text:0040D40C                 align 10h
.text:0040D410
.text:0040D410 loc_40D410:                             ; CODE XREF: .text:0040D3EE↑j
.text:0040D410                 mov     [esp+20h], edi
.text:0040D414                 mov     ebx, [esp+10h]
.text:0040D418                 mov     esi, [esp+14h]
.text:0040D41C                 mov     edi, [esp+18h]
.text:0040D420                 add     esp, 1Ch
.text:0040D423                 jmp     sub_40D120
.text:0040D423 ; ---------------------------------------------------------------------------
.text:0040D428                 align 10h
.text:0040D430                 sub     esp, 7Ch
.text:0040D433                 lea     edx, [esp+10h]
.text:0040D437                 mov     [esp+8], edx
.text:0040D43B                 mov     edx, [esp+80h]
.text:0040D442                 mov     [esp+70h], ebx
.text:0040D446                 mov     [esp+74h], esi
.text:0040D44A                 mov     [esp+4], edx
.text:0040D44E                 mov     [esp+78h], edi
.text:0040D452                 mov     dword ptr [esp], 0
.text:0040D459                 call    sub_40ACC0
.text:0040D45E                 xor     edx, edx
.text:0040D460                 inc     eax
.text:0040D461                 jz      short loc_40D485
.text:0040D463                 mov     dword ptr [esp], offset dword_40D360
.text:0040D46A                 mov     esi, [esp+20h]
.text:0040D46E                 call    _strdup
.text:0040D473                 mov     edi, eax
.text:0040D475                 mov     [esp], esi
.text:0040D478                 call    sub_40D240
.text:0040D47D                 mov     [edi], al
.text:0040D47F                 test    al, al
.text:0040D481                 mov     edx, edi
.text:0040D483                 jz      short loc_40D497
.text:0040D485
.text:0040D485 loc_40D485:                             ; CODE XREF: .text:0040D461↑j
.text:0040D485                                         ; .text:0040D4E4↓j
.text:0040D485                 mov     ebx, [esp+70h]
.text:0040D489                 mov     eax, edx
.text:0040D48B                 mov     esi, [esp+74h]
.text:0040D48F                 mov     edi, [esp+78h]
.text:0040D493                 add     esp, 7Ch
.text:0040D496                 retn
.text:0040D497 ; ---------------------------------------------------------------------------
.text:0040D497
.text:0040D497 loc_40D497:                             ; CODE XREF: .text:0040D483↑j
.text:0040D497                 mov     [esp], edi
.text:0040D49A                 call    free
.text:0040D49F                 mov     dword ptr [esp+4], 0
.text:0040D4A7                 mov     dword ptr [esp], 0
.text:0040D4AE                 call    GetCurrentDirectoryA
.text:0040D4B3                 sub     esp, 8
.text:0040D4B6                 lea     esi, [eax+1]
.text:0040D4B9                 mov     [esp], esi
.text:0040D4BC                 call    malloc
.text:0040D4C1                 mov     [esp+4], eax
.text:0040D4C5                 mov     edi, eax
.text:0040D4C7                 mov     [esp], esi
.text:0040D4CA                 call    GetCurrentDirectoryA
.text:0040D4CF                 sub     esp, 8
.text:0040D4D2                 test    eax, eax
.text:0040D4D4                 jnz     short loc_40D4E6
.text:0040D4D6                 mov     dword ptr [esp], 40D364h
.text:0040D4DD                 call    _strdup
.text:0040D4E2
.text:0040D4E2 loc_40D4E2:                             ; CODE XREF: .text:0040D4EE↓j
.text:0040D4E2                 mov     edx, eax
.text:0040D4E4                 jmp     short loc_40D485
.text:0040D4E6 ; ---------------------------------------------------------------------------
.text:0040D4E6
.text:0040D4E6 loc_40D4E6:                             ; CODE XREF: .text:0040D4D4↑j
.text:0040D4E6                 mov     [esp], edi
.text:0040D4E9                 call    sub_40D120
.text:0040D4EE                 jmp     short loc_40D4E2
.text:0040D4F0
.text:0040D4F0 ; =============== S U B R O U T I N E =======================================
.text:0040D4F0
.text:0040D4F0
.text:0040D4F0 ; int __cdecl sub_40D4F0(LPCSTR)
.text:0040D4F0 sub_40D4F0      proc near               ; CODE XREF: sub_40ACC0+38F↑p
.text:0040D4F0
.text:0040D4F0 String1         = dword ptr -1Ch
.text:0040D4F0 String2         = dword ptr -18h
.text:0040D4F0 var_C           = dword ptr -0Ch
.text:0040D4F0 var_8           = dword ptr -8
.text:0040D4F0 var_4           = dword ptr -4
.text:0040D4F0 arg_0           = dword ptr  4
.text:0040D4F0
.text:0040D4F0                 sub     esp, 1Ch
.text:0040D4F3                 mov     [esp+1Ch+var_4], edi
.text:0040D4F7                 mov     edi, [esp+1Ch+arg_0]
.text:0040D4FB                 mov     [esp+1Ch+var_C], ebx
.text:0040D4FF                 mov     [esp+1Ch+var_8], esi
.text:0040D503                 mov     [esp+1Ch+String1], edi ; LPCSTR
.text:0040D506                 call    sub_40E150
.text:0040D50B                 mov     [esp+1Ch+String1], edi ; LPCSTR
.text:0040D50E                 mov     esi, eax
.text:0040D510                 call    sub_40D120
.text:0040D515                 mov     [esp+1Ch+String2], eax ; String2
.text:0040D519                 mov     ebx, eax
.text:0040D51B                 mov     [esp+1Ch+String1], esi ; String1
.text:0040D51E                 call    _stricmp
.text:0040D523                 test    eax, eax
.text:0040D525                 setz    dl
.text:0040D528                 test    esi, esi
.text:0040D52A                 movzx   edi, dl
.text:0040D52D                 jz      short loc_40D537
.text:0040D52F                 mov     [esp+1Ch+String1], esi ; Block
.text:0040D532                 call    free
.text:0040D537
.text:0040D537 loc_40D537:                             ; CODE XREF: sub_40D4F0+3D↑j
.text:0040D537                 test    ebx, ebx
.text:0040D539                 jz      short loc_40D543
.text:0040D53B                 mov     [esp+1Ch+String1], ebx ; Block
.text:0040D53E                 call    free
.text:0040D543
.text:0040D543 loc_40D543:                             ; CODE XREF: sub_40D4F0+49↑j
.text:0040D543                 mov     eax, edi
.text:0040D545                 mov     ebx, [esp+1Ch+var_C]
.text:0040D549                 mov     esi, [esp+1Ch+var_8]
.text:0040D54D                 mov     edi, [esp+1Ch+var_4]
.text:0040D551                 add     esp, 1Ch
.text:0040D554                 retn
.text:0040D554 sub_40D4F0      endp
.text:0040D554
.text:0040D554 ; ---------------------------------------------------------------------------
.text:0040D555                 align 10h
.text:0040D560 aKernel32_0     db 'KERNEL32',0         ; DATA XREF: .text:0040D5B1↓o
.text:0040D569 aGetdiskfreespa db 'GetDiskFreeSpaceExA',0
.text:0040D569                                         ; DATA XREF: .text:0040D5C2↓o
.text:0040D57D ; const CHAR FileName[]
.text:0040D57D FileName        db '\\.\vwin32',0       ; DATA XREF: .text:0040D70C↓o
.text:0040D57D                                         ; sub_40DB40+17C↓o
.text:0040D588 ; ---------------------------------------------------------------------------
.text:0040D588
.text:0040D588 loc_40D588:                             ; DATA XREF: .text:0040D822↓o
.text:0040D588                 dec     esi
.text:0040D589                 push    esp
.text:0040D58A                 inc     esi
.text:0040D58B                 push    ebx
.text:0040D58C                 add     [esi+41h], al
.text:0040D58F                 push    esp
.text:0040D590                 xor     esi, [edx]
.text:0040D592                 add     [esi+41h], al
.text:0040D595                 push    esp
.text:0040D596                 add     [ebx+44h], al
.text:0040D599                 inc     esi
.text:0040D59A                 push    ebx
.text:0040D59B
.text:0040D59B loc_40D59B:                             ; CODE XREF: sub_40DB40+101↓p
.text:0040D59B                 add     [ebp+55002674h], cl
.text:0040D5A1                 push    edi
.text:0040D5A2                 push    esi
.text:0040D5A3                 push    ebx
.text:0040D5A4                 sub     esp, 8BCh
.text:0040D5AA                 mov     ebp, [esp+8D0h]
.text:0040D5B1                 mov     dword ptr [esp], offset aKernel32_0 ; "KERNEL32"
.text:0040D5B8                 call    LoadLibraryA
.text:0040D5BD                 sub     esp, 4
.text:0040D5C0                 mov     edi, eax
.text:0040D5C2                 mov     dword ptr [esp+4], offset aGetdiskfreespa ; "GetDiskFreeSpaceExA"
.text:0040D5CA                 mov     [esp], eax
.text:0040D5CD                 call    GetProcAddress
.text:0040D5D2                 sub     esp, 8
.text:0040D5D5                 mov     esi, eax
.text:0040D5D7                 test    ebp, ebp
.text:0040D5D9                 mov     dword ptr [esp+20h], 0
.text:0040D5E1                 jz      loc_40DB21
.text:0040D5E7                 mov     [esp], ebp
.text:0040D5EA                 call    sub_40CCF0
.text:0040D5EF                 mov     [esp], eax
.text:0040D5F2                 mov     ebp, eax
.text:0040D5F4                 call    strlen
.text:0040D5F9                 cmp     byte ptr [eax+ebp-1], 5Ch ; '\'
.text:0040D5FE                 mov     ebx, eax
.text:0040D600                 jz      short loc_40D61C
.text:0040D602                 mov     [esp], ebp
.text:0040D605                 lea     edx, [eax+1]
.text:0040D608                 mov     [esp+4], edx
.text:0040D60C                 call    realloc
.text:0040D611                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:0040D615                 mov     ebp, eax
.text:0040D617                 mov     byte ptr [ebx+eax+1], 0
.text:0040D61C
.text:0040D61C loc_40D61C:                             ; CODE XREF: .text:0040D600↑j
.text:0040D61C                 mov     dword ptr [esp+1Ch], 400h
.text:0040D624                 lea     edx, [esp+0B0h]
.text:0040D62B                 lea     ebx, [esp+5Ch]
.text:0040D62F                 mov     [esp+18h], edx
.text:0040D633                 lea     ecx, [esp+58h]
.text:0040D637                 lea     edx, [esp+54h]
.text:0040D63B                 mov     [esp+14h], ebx
.text:0040D63F                 lea     eax, [esp+4B0h]
.text:0040D646                 mov     [esp+10h], ecx
.text:0040D64A                 mov     [esp+0Ch], edx
.text:0040D64E                 mov     dword ptr [esp+8], 400h
.text:0040D656                 mov     [esp+4], eax
.text:0040D65A                 mov     [esp], ebp
.text:0040D65D                 call    GetVolumeInformationA
.text:0040D662                 sub     esp, 20h
.text:0040D665                 test    eax, eax
.text:0040D667                 jz      loc_40DAFE
.text:0040D66D                 test    esi, esi
.text:0040D66F                 jz      short loc_40D695
.text:0040D671                 mov     [esp], ebp
.text:0040D674                 lea     edx, [esp+48h]
.text:0040D678                 lea     ebx, [esp+40h]
.text:0040D67C                 mov     [esp+0Ch], edx
.text:0040D680                 lea     ecx, [esp+38h]
.text:0040D684                 mov     [esp+8], ebx
.text:0040D688                 mov     [esp+4], ecx
.text:0040D68C                 call    esi
.text:0040D68E                 sub     esp, 10h
.text:0040D691                 mov     [esp+20h], eax
.text:0040D695
.text:0040D695 loc_40D695:                             ; CODE XREF: .text:0040D66F↑j
.text:0040D695                 test    edi, edi
.text:0040D697                 jz      short loc_40D6A4
.text:0040D699                 mov     [esp], edi
.text:0040D69C                 call    FreeLibrary
.text:0040D6A1                 sub     esp, 4
.text:0040D6A4
.text:0040D6A4 loc_40D6A4:                             ; CODE XREF: .text:0040D697↑j
.text:0040D6A4                 call    sub_40EBE0
.text:0040D6A9                 test    eax, eax
.text:0040D6AB                 lea     esi, [esp+28h]
.text:0040D6AF                 jz      loc_40DAE0
.text:0040D6B5                 call    sub_40EBE0
.text:0040D6BA                 test    eax, eax
.text:0040D6BC                 jz      short loc_40D6CC
.text:0040D6BE                 call    sub_40EB30
.text:0040D6C3                 cmp     eax, 0Bh
.text:0040D6C6                 jle     loc_40DAB4
.text:0040D6CC
.text:0040D6CC loc_40D6CC:                             ; CODE XREF: .text:0040D6BC↑j
.text:0040D6CC                 cld
.text:0040D6CD                 xor     eax, eax
.text:0040D6CF                 lea     ebx, [esp+60h]
.text:0040D6D3                 mov     ecx, 7
.text:0040D6D8                 mov     edi, ebx
.text:0040D6DA                 rep stosd
.text:0040D6DC                 mov     dword ptr [esp+18h], 0
.text:0040D6E4                 mov     dword ptr [esp+14h], 4000000h
.text:0040D6EC                 mov     dword ptr [esp+10h], 0
.text:0040D6F4                 mov     dword ptr [esp+0Ch], 0
.text:0040D6FC                 mov     dword ptr [esp+8], 0
.text:0040D704                 mov     dword ptr [esp+4], 0
.text:0040D70C                 mov     dword ptr [esp], offset FileName ; "\\\\.\\vwin32"
.text:0040D713                 call    CreateFileA
.text:0040D718                 sub     esp, 1Ch
.text:0040D71B                 mov     edi, eax
.text:0040D71D                 cmp     eax, 0FFFFFFFFh
.text:0040D720                 jz      short loc_40D7A0
.text:0040D722                 mov     [esp+10h], ebx
.text:0040D726                 lea     edx, [esp+80h]
.text:0040D72D                 lea     ecx, [esp+24h]
.text:0040D731                 mov     [esp+70h], edx
.text:0040D735                 mov     [esp+18h], ecx
.text:0040D739                 mov     [esp+8], ebx
.text:0040D73D                 mov     dword ptr [esp+6Ch], 7303h
.text:0040D745                 mov     dword ptr [esp+68h], 2Ch ; ','
.text:0040D74D                 mov     [esp+64h], ebp
.text:0040D751                 mov     dword ptr [esp+78h], 1
.text:0040D759                 mov     dword ptr [esp+1Ch], 0
.text:0040D761                 mov     dword ptr [esp+14h], 1Ch
.text:0040D769                 mov     dword ptr [esp+0Ch], 1Ch
.text:0040D771                 mov     dword ptr [esp+4], 6
.text:0040D779                 mov     [esp], eax
.text:0040D77C                 call    DeviceIoControl
.text:0040D781                 sub     esp, 20h
.text:0040D784                 mov     ebx, eax
.text:0040D786                 mov     [esp], edi
.text:0040D789                 call    CloseHandle
.text:0040D78E                 sub     esp, 4
.text:0040D791                 test    ebx, ebx
.text:0040D793                 jz      short loc_40D7A0
.text:0040D795                 test    byte ptr [esp+78h], 1
.text:0040D79A                 jz      loc_40DA80
.text:0040D7A0
.text:0040D7A0 loc_40D7A0:                             ; CODE XREF: .text:0040D720↑j
.text:0040D7A0                                         ; .text:0040D793↑j
.text:0040D7A0                 call    sub_40E100
.text:0040D7A5                 mov     edi, eax
.text:0040D7A7                 call    _errno
.text:0040D7AC                 mov     [eax], edi
.text:0040D7AE                 xor     eax, eax
.text:0040D7B0
.text:0040D7B0 loc_40D7B0:                             ; CODE XREF: .text:0040DAAF↓j
.text:0040D7B0                                         ; .text:0040DADB↓j
.text:0040D7B0                 test    eax, eax
.text:0040D7B2                 jnz     short loc_40D7D4
.text:0040D7B4                 mov     dword ptr [esp+34h], 1
.text:0040D7BC                 mov     dword ptr [esp+30h], 200h
.text:0040D7C4                 mov     dword ptr [esp+2Ch], 0
.text:0040D7CC                 mov     dword ptr [esp+28h], 0
.text:0040D7D4
.text:0040D7D4 loc_40D7D4:                             ; CODE XREF: .text:0040D7B2↑j
.text:0040D7D4                 mov     edx, [esp+30h]
.text:0040D7D8                 mov     edi, [esp+34h]
.text:0040D7DC                 mov     ecx, [esp+20h]
.text:0040D7E0                 imul    edi, edx
.text:0040D7E3                 test    ecx, ecx
.text:0040D7E5                 jnz     short loc_40D80D
.text:0040D7E7                 mov     eax, [esp+28h]
.text:0040D7EB                 mul     edi
.text:0040D7ED                 mov     esi, eax
.text:0040D7EF                 mov     eax, [esp+2Ch]
.text:0040D7F3                 mov     [esp+44h], edx
.text:0040D7F7                 mov     [esp+40h], esi
.text:0040D7FB                 mul     edi
.text:0040D7FD                 mov     [esp+48h], eax
.text:0040D801                 mov     [esp+4Ch], edx
.text:0040D805                 mov     [esp+38h], eax
.text:0040D809                 mov     [esp+3Ch], edx
.text:0040D80D
.text:0040D80D loc_40D80D:                             ; CODE XREF: .text:0040D7E5↑j
.text:0040D80D                 mov     ebx, [esp+5Ch]
.text:0040D811                 lea     edx, [esp+0B0h]
.text:0040D818                 mov     ecx, [esp+8D4h]
.text:0040D81F                 mov     [ecx+48h], ebx
.text:0040D822                 mov     dword ptr [esp+4], offset loc_40D588
.text:0040D82A                 mov     [esp], edx
.text:0040D82D                 call    _stricmp
.text:0040D832                 test    eax, eax
.text:0040D834                 jnz     loc_40D9F0
.text:0040D83A                 mov     esi, [esp+8D4h]
.text:0040D841                 mov     dword ptr [esi], 5346544Eh
.text:0040D847
.text:0040D847 loc_40D847:                             ; CODE XREF: .text:0040DA18↓j
.text:0040D847                                         ; .text:0040DA45↓j ...
.text:0040D847                 mov     ebx, [esp+30h]
.text:0040D84B                 mov     esi, [esp+8D4h]
.text:0040D852                 mov     [esi+4], ebx
.text:0040D855                 mov     [esi+8], ebx
.text:0040D858                 mov     ebx, [esi+8]
.text:0040D85B                 mov     [esi+0Ch], edi
.text:0040D85E                 mov     ecx, [esp+44h]
.text:0040D862                 xor     esi, esi
.text:0040D864                 mov     [esp+8], ebx
.text:0040D868                 mov     edx, [esp+40h]
.text:0040D86C                 mov     [esp+0Ch], esi
.text:0040D870                 mov     [esp+4], ecx
.text:0040D874                 mov     [esp], edx
.text:0040D877                 call    sub_41B300
.text:0040D87C                 mov     ecx, [esp+8D4h]
.text:0040D883                 mov     [ecx+10h], eax
.text:0040D886                 mov     [ecx+14h], edx
.text:0040D889                 mov     ecx, [esp+4Ch]
.text:0040D88D                 mov     [esp+8], ebx
.text:0040D891                 mov     edx, [esp+48h]
.text:0040D895                 mov     [esp+0Ch], esi
.text:0040D899                 mov     [esp+4], ecx
.text:0040D89D                 mov     [esp], edx
.text:0040D8A0                 call    sub_41B300
.text:0040D8A5                 mov     ecx, [esp+8D4h]
.text:0040D8AC                 mov     [ecx+18h], eax
.text:0040D8AF                 mov     [ecx+1Ch], edx
.text:0040D8B2                 mov     ecx, [esp+38h]
.text:0040D8B6                 mov     [esp+8], ebx
.text:0040D8BA                 mov     ebx, [esp+3Ch]
.text:0040D8BE                 mov     [esp+0Ch], esi
.text:0040D8C2                 mov     [esp], ecx
.text:0040D8C5                 mov     [esp+4], ebx
.text:0040D8C9                 call    sub_41B300
.text:0040D8CE                 mov     esi, [esp+8D4h]
.text:0040D8D5                 mov     [esi+20h], eax
.text:0040D8D8                 mov     [esi+24h], edx
.text:0040D8DB                 mov     ecx, [esp+44h]
.text:0040D8DF                 mov     esi, edi
.text:0040D8E1                 mov     [esp+8], esi
.text:0040D8E5                 mov     edx, [esp+40h]
.text:0040D8E9                 xor     edi, edi
.text:0040D8EB                 mov     [esp+0Ch], edi
.text:0040D8EF                 mov     [esp+4], ecx
.text:0040D8F3                 mov     [esp], edx
.text:0040D8F6                 call    sub_41B300
.text:0040D8FB                 mov     ebx, [esp+8D4h]
.text:0040D902                 mov     [ebx+28h], eax
.text:0040D905                 mov     [ebx+2Ch], edx
.text:0040D908                 mov     ecx, [esp+4Ch]
.text:0040D90C                 mov     [esp+8], esi
.text:0040D910                 mov     edx, [esp+48h]
.text:0040D914                 mov     [esp+0Ch], edi
.text:0040D918                 mov     [esp+4], ecx
.text:0040D91C                 mov     [esp], edx
.text:0040D91F                 call    sub_41B300
.text:0040D924                 mov     ebx, [esp+8D4h]
.text:0040D92B                 mov     [ebx+30h], eax
.text:0040D92E                 mov     [ebx+34h], edx
.text:0040D931                 mov     ecx, [esp+3Ch]
.text:0040D935                 mov     [esp+8], esi
.text:0040D939                 mov     edx, [esp+38h]
.text:0040D93D                 mov     [esp+0Ch], edi
.text:0040D941                 mov     [esp+4], ecx
.text:0040D945                 mov     [esp], edx
.text:0040D948                 call    sub_41B300
.text:0040D94D                 mov     edx, [esp+8D4h]
.text:0040D954                 lea     ecx, [esp+0B0h]
.text:0040D95B                 mov     [edx+38h], eax
.text:0040D95E                 mov     esi, [esp+58h]
.text:0040D962                 mov     dword ptr [edx+44h], 0FFFFFFFFh
.text:0040D969                 mov     [edx+110h], esi
.text:0040D96F                 mov     esi, edx
.text:0040D971                 add     esi, 4Ch ; 'L'
.text:0040D974                 movzx   ebx, word ptr [esp+56h]
.text:0040D979                 movzx   edi, word ptr [esp+54h]
.text:0040D97E                 mov     [edx+3Ch], ebx
.text:0040D981                 lea     ebx, [esp+4B0h]
.text:0040D988                 mov     [edx+40h], edi
.text:0040D98B                 mov     [esp+4], ecx
.text:0040D98F                 mov     dword ptr [esp+8], 10h
.text:0040D997                 mov     [esp], esi
.text:0040D99A                 call    strncpy
.text:0040D99F                 mov     dword ptr [esp+8], 5Ah ; 'Z'
.text:0040D9A7                 mov     edi, [esp+8D4h]
.text:0040D9AE                 mov     [esp+4], ebx
.text:0040D9B2                 add     edi, 5Ch ; '\'
.text:0040D9B5                 mov     [esp], edi
.text:0040D9B8                 call    strncpy
.text:0040D9BD                 mov     [esp+4], ebp
.text:0040D9C1                 mov     ebp, [esp+8D4h]
.text:0040D9C8                 mov     dword ptr [esp+8], 5Ah ; 'Z'
.text:0040D9D0                 add     ebp, 0B6h ; '¶'
.text:0040D9D6                 mov     [esp], ebp
.text:0040D9D9                 call    strncpy
.text:0040D9DE                 xor     eax, eax
.text:0040D9E0
.text:0040D9E0 loc_40D9E0:                             ; CODE XREF: .text:0040DB1C↓j
.text:0040D9E0                 add     esp, 8BCh
.text:0040D9E6                 pop     ebx
.text:0040D9E7                 pop     esi
.text:0040D9E8                 pop     edi
.text:0040D9E9                 pop     ebp
.text:0040D9EA                 retn
.text:0040D9EA ; ---------------------------------------------------------------------------
.text:0040D9EB                 align 10h
.text:0040D9F0
.text:0040D9F0 loc_40D9F0:                             ; CODE XREF: .text:0040D834↑j
.text:0040D9F0                 mov     dword ptr [esp+4], 40D58Dh
.text:0040D9F8                 lea     eax, [esp+0B0h]
.text:0040D9FF                 mov     [esp], eax
.text:0040DA02                 call    _stricmp
.text:0040DA07                 test    eax, eax
.text:0040DA09                 jnz     short loc_40DA1D
.text:0040DA0B                 mov     edx, [esp+8D4h]
.text:0040DA12                 mov     dword ptr [edx], 4008h
.text:0040DA18                 jmp     loc_40D847
.text:0040DA1D ; ---------------------------------------------------------------------------
.text:0040DA1D
.text:0040DA1D loc_40DA1D:                             ; CODE XREF: .text:0040DA09↑j
.text:0040DA1D                 mov     dword ptr [esp+4], 40D593h
.text:0040DA25                 lea     ecx, [esp+0B0h]
.text:0040DA2C                 mov     [esp], ecx
.text:0040DA2F                 call    _stricmp
.text:0040DA34                 test    eax, eax
.text:0040DA36                 jnz     short loc_40DA4A
.text:0040DA38                 mov     ebx, [esp+8D4h]
.text:0040DA3F                 mov     dword ptr [ebx], 4006h
.text:0040DA45                 jmp     loc_40D847
.text:0040DA4A ; ---------------------------------------------------------------------------
.text:0040DA4A
.text:0040DA4A loc_40DA4A:                             ; CODE XREF: .text:0040DA36↑j
.text:0040DA4A                 mov     dword ptr [esp+4], 40D597h
.text:0040DA52                 lea     eax, [esp+0B0h]
.text:0040DA59                 mov     [esp], eax
.text:0040DA5C                 call    _stricmp
.text:0040DA61                 test    eax, eax
.text:0040DA63                 mov     esi, [esp+8D4h]
.text:0040DA6A                 setnz   cl
.text:0040DA6D                 movzx   edx, cl
.text:0040DA70                 dec     edx
.text:0040DA71                 and     edx, 4000h
.text:0040DA77                 mov     [esi], edx
.text:0040DA79                 jmp     loc_40D847
.text:0040DA79 ; ---------------------------------------------------------------------------
.text:0040DA7E                 align 10h
.text:0040DA80
.text:0040DA80 loc_40DA80:                             ; CODE XREF: .text:0040D79A↑j
.text:0040DA80                 mov     edi, [esp+84h]
.text:0040DA87                 mov     eax, 1
.text:0040DA8C                 mov     edx, [esp+88h]
.text:0040DA93                 mov     ecx, [esp+8Ch]
.text:0040DA9A                 mov     ebx, [esp+90h]
.text:0040DAA1                 mov     [esp+34h], edi
.text:0040DAA5                 mov     [esp+30h], edx
.text:0040DAA9                 mov     [esp+2Ch], ecx
.text:0040DAAD                 mov     [esi], ebx
.text:0040DAAF                 jmp     loc_40D7B0
.text:0040DAB4 ; ---------------------------------------------------------------------------
.text:0040DAB4
.text:0040DAB4 loc_40DAB4:                             ; CODE XREF: .text:0040D6C6↑j
.text:0040DAB4                 mov     [esp+10h], esi
.text:0040DAB8                 lea     eax, [esp+2Ch]
.text:0040DABC                 lea     esi, [esp+30h]
.text:0040DAC0                 mov     [esp+0Ch], eax
.text:0040DAC4                 lea     edi, [esp+34h]
.text:0040DAC8                 mov     [esp+8], esi
.text:0040DACC                 mov     [esp+4], edi
.text:0040DAD0
.text:0040DAD0 loc_40DAD0:                             ; CODE XREF: .text:0040DAFC↓j
.text:0040DAD0                 mov     [esp], ebp
.text:0040DAD3                 call    GetDiskFreeSpaceA
.text:0040DAD8                 sub     esp, 14h
.text:0040DADB                 jmp     loc_40D7B0
.text:0040DAE0 ; ---------------------------------------------------------------------------
.text:0040DAE0
.text:0040DAE0 loc_40DAE0:                             ; CODE XREF: .text:0040D6AF↑j
.text:0040DAE0                 mov     [esp+10h], esi
.text:0040DAE4                 lea     ebx, [esp+2Ch]
.text:0040DAE8                 lea     eax, [esp+30h]
.text:0040DAEC                 mov     [esp+0Ch], ebx
.text:0040DAF0                 lea     esi, [esp+34h]
.text:0040DAF4                 mov     [esp+8], eax
.text:0040DAF8                 mov     [esp+4], esi
.text:0040DAFC                 jmp     short loc_40DAD0
.text:0040DAFE ; ---------------------------------------------------------------------------
.text:0040DAFE
.text:0040DAFE loc_40DAFE:                             ; CODE XREF: .text:0040D667↑j
.text:0040DAFE                 mov     [esp], edi
.text:0040DB01                 call    FreeLibrary
.text:0040DB06                 sub     esp, 4
.text:0040DB09                 call    sub_40E100
.text:0040DB0E                 mov     esi, eax
.text:0040DB10                 call    _errno
.text:0040DB15                 mov     [eax], esi
.text:0040DB17
.text:0040DB17 loc_40DB17:                             ; CODE XREF: .text:0040DB37↓j
.text:0040DB17                 mov     eax, 0FFFFFFFFh
.text:0040DB1C                 jmp     loc_40D9E0
.text:0040DB21 ; ---------------------------------------------------------------------------
.text:0040DB21
.text:0040DB21 loc_40DB21:                             ; CODE XREF: .text:0040D5E1↑j
.text:0040DB21                 mov     [esp], edi
.text:0040DB24                 call    FreeLibrary
.text:0040DB29                 sub     esp, 4
.text:0040DB2C                 call    _errno
.text:0040DB31                 mov     dword ptr [eax], 2
.text:0040DB37                 jmp     short loc_40DB17
.text:0040DB37 ; ---------------------------------------------------------------------------
.text:0040DB39                 align 10h
.text:0040DB40
.text:0040DB40 ; =============== S U B R O U T I N E =======================================
.text:0040DB40
.text:0040DB40
.text:0040DB40 ; int __cdecl sub_40DB40(LPCSTR, LPDWORD, LPDWORD, LPDWORD, LPDWORD)
.text:0040DB40 sub_40DB40      proc near               ; CODE XREF: sub_40B570+2C7↑p
.text:0040DB40                                         ; .text:0040BBAA↑p
.text:0040DB40
.text:0040DB40 lpFileName      = dword ptr -9Ch
.text:0040DB40 dwDesiredAccess = dword ptr -98h
.text:0040DB40 dwShareMode     = dword ptr -94h
.text:0040DB40 lpSecurityAttributes= dword ptr -90h
.text:0040DB40 dwCreationDisposition= dword ptr -8Ch
.text:0040DB40 dwFlagsAndAttributes= dword ptr -88h
.text:0040DB40 hTemplateFile   = dword ptr -84h
.text:0040DB40 lpOverlapped    = dword ptr -80h
.text:0040DB40 BytesReturned   = dword ptr -70h
.text:0040DB40 InBuffer        = byte ptr -6Ch
.text:0040DB40 var_68          = dword ptr -68h
.text:0040DB40 var_64          = dword ptr -64h
.text:0040DB40 var_60          = dword ptr -60h
.text:0040DB40 var_5C          = dword ptr -5Ch
.text:0040DB40 var_54          = dword ptr -54h
.text:0040DB40 var_4C          = byte ptr -4Ch
.text:0040DB40 var_48          = dword ptr -48h
.text:0040DB40 var_44          = dword ptr -44h
.text:0040DB40 var_40          = dword ptr -40h
.text:0040DB40 var_3C          = dword ptr -3Ch
.text:0040DB40 lpRootPathName  = dword ptr -2Ch
.text:0040DB40 lpSectorsPerCluster= dword ptr -28h
.text:0040DB40 lpBytesPerSector= dword ptr -24h
.text:0040DB40 lpNumberOfFreeClusters= dword ptr -20h
.text:0040DB40 lpTotalNumberOfClusters= dword ptr -1Ch
.text:0040DB40 var_18          = dword ptr -18h
.text:0040DB40 var_14          = dword ptr -14h
.text:0040DB40 var_10          = dword ptr -10h
.text:0040DB40 var_C           = dword ptr -0Ch
.text:0040DB40 var_8           = dword ptr -8
.text:0040DB40 var_4           = dword ptr -4
.text:0040DB40 arg_0           = dword ptr  4
.text:0040DB40 arg_4           = dword ptr  8
.text:0040DB40 arg_8           = dword ptr  0Ch
.text:0040DB40 arg_C           = dword ptr  10h
.text:0040DB40 arg_10          = dword ptr  14h
.text:0040DB40
.text:0040DB40                 sub     esp, 2Ch
.text:0040DB43                 mov     edx, [esp+2Ch+arg_0]
.text:0040DB47                 mov     [esp+2Ch+var_10], ebx
.text:0040DB4B                 mov     ebx, [esp+2Ch+arg_10]
.text:0040DB4F                 mov     [esp+2Ch+var_C], esi
.text:0040DB53                 mov     esi, [esp+2Ch+arg_C]
.text:0040DB57                 mov     [esp+2Ch+var_8], edi
.text:0040DB5B                 mov     edi, [esp+2Ch+arg_8]
.text:0040DB5F                 mov     [esp+2Ch+var_4], ebp
.text:0040DB63                 mov     ebp, [esp+2Ch+arg_4]
.text:0040DB67                 mov     [esp+2Ch+var_14], edx
.text:0040DB6B                 call    sub_40EBE0
.text:0040DB70                 test    eax, eax
.text:0040DB72                 jz      short loc_40DBA4
.text:0040DB74                 mov     [esp+2Ch+arg_10], ebx
.text:0040DB78                 mov     edx, [esp+2Ch+var_14]
.text:0040DB7C                 mov     ebx, [esp+2Ch+var_10]
.text:0040DB80                 mov     [esp+2Ch+arg_C], esi
.text:0040DB84                 mov     esi, [esp+2Ch+var_C]
.text:0040DB88                 mov     [esp+2Ch+arg_8], edi
.text:0040DB8C                 mov     edi, [esp+2Ch+var_8]
.text:0040DB90                 mov     [esp+2Ch+arg_4], ebp
.text:0040DB94                 mov     ebp, [esp+2Ch+var_4]
.text:0040DB98                 mov     [esp+2Ch+arg_0], edx
.text:0040DB9C                 add     esp, 2Ch
.text:0040DB9F                 jmp     loc_40DC50
.text:0040DBA4 ; ---------------------------------------------------------------------------
.text:0040DBA4
.text:0040DBA4 loc_40DBA4:                             ; CODE XREF: sub_40DB40+32↑j
.text:0040DBA4                 mov     [esp+2Ch+lpTotalNumberOfClusters], ebx ; lpTotalNumberOfClusters
.text:0040DBA8                 mov     ecx, [esp+2Ch+var_14]
.text:0040DBAC                 mov     [esp+2Ch+lpNumberOfFreeClusters], esi ; lpNumberOfFreeClusters
.text:0040DBB0                 mov     [esp+2Ch+lpBytesPerSector], edi ; lpBytesPerSector
.text:0040DBB4                 mov     [esp+2Ch+lpSectorsPerCluster], ebp ; lpSectorsPerCluster
.text:0040DBB8                 mov     [esp+2Ch+lpRootPathName], ecx ; lpRootPathName
.text:0040DBBB                 call    GetDiskFreeSpaceA
.text:0040DBC0                 sub     esp, 14h
.text:0040DBC3                 mov     ebx, [esp+2Ch+var_10]
.text:0040DBC7                 mov     esi, [esp+2Ch+var_C]
.text:0040DBCB                 mov     edi, [esp+2Ch+var_8]
.text:0040DBCF                 mov     ebp, [esp+2Ch+var_4]
.text:0040DBD3                 add     esp, 2Ch
.text:0040DBD6                 retn
.text:0040DBD6 ; ---------------------------------------------------------------------------
.text:0040DBD7                 align 10h
.text:0040DBE0
.text:0040DBE0 loc_40DBE0:                             ; CODE XREF: .text:0040EEFD↓p
.text:0040DBE0                 sub     esp, 1Ch
.text:0040DBE3                 mov     [esp+1Ch+var_4], esi
.text:0040DBE7                 mov     esi, [esp+1Ch+arg_0]
.text:0040DBEB                 mov     [esp+1Ch+var_8], ebx
.text:0040DBEF                 mov     [esp+1Ch+lpTotalNumberOfClusters], esi ; LPCSTR
.text:0040DBF2                 call    sub_40D120
.text:0040DBF7                 test    eax, eax
.text:0040DBF9                 mov     ebx, eax
.text:0040DBFB                 jz      short loc_40DC10
.text:0040DBFD                 cmp     byte ptr [eax], 0
.text:0040DC00                 jz      short loc_40DC10
.text:0040DC02                 test    esi, esi
.text:0040DC04                 jz      short loc_40DC10
.text:0040DC06                 cmp     byte ptr [esi], 0
.text:0040DC09                 jnz     short loc_40DC36
.text:0040DC0B                 nop
.text:0040DC0C                 lea     esi, [esi+0]
.text:0040DC10
.text:0040DC10 loc_40DC10:                             ; CODE XREF: sub_40DB40+BB↑j
.text:0040DC10                                         ; sub_40DB40+C0↑j ...
.text:0040DC10                 call    _errno
.text:0040DC15                 mov     dword ptr [eax], 2
.text:0040DC1B                 mov     esi, 0FFFFFFFFh
.text:0040DC20
.text:0040DC20 loc_40DC20:                             ; CODE XREF: sub_40DB40+108↓j
.text:0040DC20                 mov     [esp+1Ch+lpTotalNumberOfClusters], ebx ; Block
.text:0040DC23                 call    free
.text:0040DC28                 mov     eax, esi
.text:0040DC2A                 mov     ebx, [esp+1Ch+var_8]
.text:0040DC2E                 mov     esi, [esp+1Ch+var_4]
.text:0040DC32                 add     esp, 1Ch
.text:0040DC35                 retn
.text:0040DC36 ; ---------------------------------------------------------------------------
.text:0040DC36
.text:0040DC36 loc_40DC36:                             ; CODE XREF: sub_40DB40+C9↑j
.text:0040DC36                 mov     [esp+1Ch+lpTotalNumberOfClusters], eax
.text:0040DC39                 mov     edx, [esp+1Ch+arg_4]
.text:0040DC3D                 mov     [esp+1Ch+var_18], edx
.text:0040DC41                 call    near ptr loc_40D59B+5
.text:0040DC46                 mov     esi, eax
.text:0040DC48                 jmp     short loc_40DC20
.text:0040DC48 ; ---------------------------------------------------------------------------
.text:0040DC4A                 align 10h
.text:0040DC50
.text:0040DC50 loc_40DC50:                             ; CODE XREF: sub_40DB40+5F↑j
.text:0040DC50                 push    ebp
.text:0040DC51                 push    edi
.text:0040DC52                 push    esi
.text:0040DC53                 push    ebx
.text:0040DC54                 sub     esp, 8Ch
.text:0040DC5A                 mov     ebp, [esp+9Ch+arg_0]
.text:0040DC61                 call    sub_40EBE0
.text:0040DC66                 test    eax, eax
.text:0040DC68                 jz      short loc_40DC78
.text:0040DC6A                 call    sub_40EB30
.text:0040DC6F                 cmp     eax, 0Bh
.text:0040DC72                 jle     loc_40DDA0
.text:0040DC78
.text:0040DC78 loc_40DC78:                             ; CODE XREF: sub_40DB40+128↑j
.text:0040DC78                 cld
.text:0040DC79                 xor     eax, eax
.text:0040DC7B                 lea     ebx, [esp+9Ch+InBuffer]
.text:0040DC7F                 mov     ecx, 7
.text:0040DC84                 mov     edi, ebx
.text:0040DC86                 lea     esi, [esp+9Ch+var_4C]
.text:0040DC8A                 rep stosd
.text:0040DC8C                 mov     [esp+9Ch+hTemplateFile], 0 ; hTemplateFile
.text:0040DC94                 mov     [esp+9Ch+dwFlagsAndAttributes], 4000000h ; dwFlagsAndAttributes
.text:0040DC9C                 mov     [esp+9Ch+dwCreationDisposition], 0 ; dwCreationDisposition
.text:0040DCA4                 mov     [esp+9Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:0040DCAC                 mov     [esp+9Ch+dwShareMode], 0 ; dwShareMode
.text:0040DCB4                 mov     [esp+9Ch+dwDesiredAccess], 0 ; dwDesiredAccess
.text:0040DCBC                 mov     [esp+9Ch+lpFileName], offset FileName ; "\\\\.\\vwin32"
.text:0040DCC3                 call    CreateFileA
.text:0040DCC8                 sub     esp, 1Ch
.text:0040DCCB                 mov     edi, eax
.text:0040DCCD                 cmp     eax, 0FFFFFFFFh
.text:0040DCD0                 jz      short loc_40DD45
.text:0040DCD2                 mov     [esp+9Ch+var_68], ebp
.text:0040DCD6                 lea     ebp, [esp+9Ch+BytesReturned]
.text:0040DCDA                 mov     [esp+9Ch+var_5C], esi
.text:0040DCDE                 mov     [esp+9Ch+var_60], 7303h
.text:0040DCE6                 mov     [esp+9Ch+var_64], 2Ch ; ','
.text:0040DCEE                 mov     [esp+9Ch+var_54], 1
.text:0040DCF6                 mov     [esp+9Ch+lpOverlapped], 0 ; lpOverlapped
.text:0040DCFE                 mov     [esp+9Ch+hTemplateFile], ebp ; lpBytesReturned
.text:0040DD02                 mov     [esp+9Ch+dwFlagsAndAttributes], 1Ch ; nOutBufferSize
.text:0040DD0A                 mov     [esp+9Ch+dwCreationDisposition], ebx ; lpOutBuffer
.text:0040DD0E                 mov     [esp+9Ch+lpSecurityAttributes], 1Ch ; nInBufferSize
.text:0040DD16                 mov     [esp+9Ch+dwShareMode], ebx ; lpInBuffer
.text:0040DD1A                 mov     [esp+9Ch+dwDesiredAccess], 6 ; dwIoControlCode
.text:0040DD22                 mov     [esp+9Ch+lpFileName], eax ; hDevice
.text:0040DD25                 call    DeviceIoControl
.text:0040DD2A                 sub     esp, 20h
.text:0040DD2D                 mov     esi, eax
.text:0040DD2F                 mov     [esp+9Ch+lpFileName], edi ; hObject
.text:0040DD32                 call    CloseHandle
.text:0040DD37                 sub     esp, 4
.text:0040DD3A                 test    esi, esi
.text:0040DD3C                 jz      short loc_40DD45
.text:0040DD3E                 test    byte ptr [esp+9Ch+var_54], 1
.text:0040DD43                 jz      short loc_40DD60
.text:0040DD45
.text:0040DD45 loc_40DD45:                             ; CODE XREF: sub_40DB40+190↑j
.text:0040DD45                                         ; sub_40DB40+1FC↑j
.text:0040DD45                 call    sub_40E100
.text:0040DD4A                 mov     edi, eax
.text:0040DD4C                 call    _errno
.text:0040DD51                 mov     [eax], edi
.text:0040DD53                 xor     eax, eax
.text:0040DD55
.text:0040DD55 loc_40DD55:                             ; CODE XREF: sub_40DB40+25A↓j
.text:0040DD55                                         ; sub_40DB40+297↓j
.text:0040DD55                 add     esp, 8Ch
.text:0040DD5B                 pop     ebx
.text:0040DD5C                 pop     esi
.text:0040DD5D                 pop     edi
.text:0040DD5E                 pop     ebp
.text:0040DD5F                 retn
.text:0040DD60 ; ---------------------------------------------------------------------------
.text:0040DD60
.text:0040DD60 loc_40DD60:                             ; CODE XREF: sub_40DB40+203↑j
.text:0040DD60                 mov     edx, [esp+9Ch+var_48]
.text:0040DD64                 mov     eax, 1
.text:0040DD69                 mov     ebx, [esp+9Ch+arg_4]
.text:0040DD70                 mov     ebp, [esp+9Ch+arg_8]
.text:0040DD77                 mov     ecx, [esp+9Ch+arg_C]
.text:0040DD7E                 mov     [ebx], edx
.text:0040DD80                 mov     edi, [esp+9Ch+var_44]
.text:0040DD84                 mov     ebx, [esp+9Ch+arg_10]
.text:0040DD8B                 mov     [ebp+0], edi
.text:0040DD8E                 mov     esi, [esp+9Ch+var_40]
.text:0040DD92                 mov     [ecx], esi
.text:0040DD94                 mov     edx, [esp+9Ch+var_3C]
.text:0040DD98                 mov     [ebx], edx
.text:0040DD9A                 jmp     short loc_40DD55
.text:0040DD9A ; ---------------------------------------------------------------------------
.text:0040DD9C                 align 10h
.text:0040DDA0
.text:0040DDA0 loc_40DDA0:                             ; CODE XREF: sub_40DB40+132↑j
.text:0040DDA0                 mov     [esp+9Ch+lpFileName], ebp ; lpRootPathName
.text:0040DDA3                 mov     eax, [esp+9Ch+arg_C]
.text:0040DDAA                 mov     ecx, [esp+9Ch+arg_10]
.text:0040DDB1                 mov     edx, [esp+9Ch+arg_8]
.text:0040DDB8                 mov     [esp+9Ch+lpSecurityAttributes], eax ; lpNumberOfFreeClusters
.text:0040DDBC                 mov     eax, [esp+9Ch+arg_4]
.text:0040DDC3                 mov     [esp+9Ch+dwCreationDisposition], ecx ; lpTotalNumberOfClusters
.text:0040DDC7                 mov     [esp+9Ch+dwShareMode], edx ; lpBytesPerSector
.text:0040DDCB                 mov     [esp+9Ch+dwDesiredAccess], eax ; lpSectorsPerCluster
.text:0040DDCF                 call    GetDiskFreeSpaceA
.text:0040DDD4                 sub     esp, 14h
.text:0040DDD7                 jmp     loc_40DD55
.text:0040DDD7 sub_40DB40      endp ; sp-analysis failed
.text:0040DDD7
.text:0040DDD7 ; ---------------------------------------------------------------------------
.text:0040DDDC                 align 10h
.text:0040DDE0
.text:0040DDE0 ; =============== S U B R O U T I N E =======================================
.text:0040DDE0
.text:0040DDE0
.text:0040DDE0 sub_40DDE0      proc near               ; CODE XREF: sub_406F40+B7↑p
.text:0040DDE0
.text:0040DDE0 var_8           = dword ptr -8
.text:0040DDE0 var_4           = dword ptr -4
.text:0040DDE0 arg_0           = dword ptr  4
.text:0040DDE0
.text:0040DDE0                 movzx   edx, word ptr [esp+arg_0]
.text:0040DDE5                 mov     [esp+arg_0], edx
.text:0040DDE9                 jmp     short loc_40DDF0
.text:0040DDE9 ; ---------------------------------------------------------------------------
.text:0040DDEB                 align 10h
.text:0040DDF0
.text:0040DDF0 loc_40DDF0:                             ; CODE XREF: sub_40DDE0+9↑j
.text:0040DDF0                 sub     esp, 8
.text:0040DDF3                 mov     edx, off_41D154
.text:0040DDF9                 mov     [esp+8+var_8], ebx
.text:0040DDFC                 mov     [esp+8+var_4], esi
.text:0040DE00                 mov     ecx, [edx+8]
.text:0040DE03                 movzx   ebx, word ptr [esp+8+arg_0]
.text:0040DE08                 mov     edx, [ecx+54h]
.text:0040DE0B                 mov     eax, ebx
.text:0040DE0D                 mov     ecx, [edx]
.text:0040DE0F                 shr     eax, cl
.text:0040DE11                 cmp     eax, [edx+4]
.text:0040DE14                 jnb     short loc_40DE60
.text:0040DE16                 mov     esi, [edx+eax*4+14h]
.text:0040DE1A                 test    esi, esi
.text:0040DE1C                 jz      short loc_40DE60
.text:0040DE1E                 mov     ecx, [edx+8]
.text:0040DE21                 mov     eax, ebx
.text:0040DE23                 shr     eax, cl
.text:0040DE25                 mov     ecx, [edx+0Ch]
.text:0040DE28                 and     eax, ecx
.text:0040DE2A                 lea     ecx, [edx+eax*4]
.text:0040DE2D                 mov     eax, [esi+ecx]
.text:0040DE30                 test    eax, eax
.text:0040DE32                 jz      short loc_40DE60
.text:0040DE34                 mov     esi, [edx+10h]
.text:0040DE37                 and     ebx, esi
.text:0040DE39                 lea     esi, [eax+edx]
.text:0040DE3C                 movzx   eax, byte ptr [ebx+esi]
.text:0040DE40
.text:0040DE40 loc_40DE40:                             ; CODE XREF: sub_40DDE0+85↓j
.text:0040DE40                 mov     bl, al
.text:0040DE42                 mov     esi, [esp+8+var_4]
.text:0040DE46                 inc     bl
.text:0040DE48                 setnz   cl
.text:0040DE4B                 movzx   eax, al
.text:0040DE4E                 movzx   ebx, cl
.text:0040DE51                 dec     ebx
.text:0040DE52                 or      eax, ebx
.text:0040DE54                 mov     ebx, [esp+8+var_8]
.text:0040DE57                 add     esp, 8
.text:0040DE5A                 retn
.text:0040DE5A ; ---------------------------------------------------------------------------
.text:0040DE5B                 align 10h
.text:0040DE60
.text:0040DE60 loc_40DE60:                             ; CODE XREF: sub_40DDE0+34↑j
.text:0040DE60                                         ; sub_40DDE0+3C↑j ...
.text:0040DE60                 mov     eax, 0FFh
.text:0040DE65                 jmp     short loc_40DE40
.text:0040DE65 sub_40DDE0      endp
.text:0040DE65
.text:0040DE65 ; ---------------------------------------------------------------------------
.text:0040DE67                 align 10h
.text:0040DE70
.text:0040DE70 ; =============== S U B R O U T I N E =======================================
.text:0040DE70
.text:0040DE70 ; Attributes: info_from_lumina
.text:0040DE70
.text:0040DE70 ___get_errno    proc near               ; CODE XREF: sub_40E100+B↓p
.text:0040DE70
.text:0040DE70 arg_0           = dword ptr  4
.text:0040DE70
.text:0040DE70                 mov     eax, [esp+arg_0]
.text:0040DE74                 cmp     eax, 53h ; 'S'
.text:0040DE77                 jg      loc_40DF70
.text:0040DE7D                 cmp     eax, 52h ; 'R'
.text:0040DE80                 jge     short loc_40DED2
.text:0040DE82                 cmp     eax, 0Fh
.text:0040DE85                 jz      short loc_40DEA0
.text:0040DE87                 cmp     eax, 0Fh
.text:0040DE8A                 jg      short loc_40DF00
.text:0040DE8C                 cmp     eax, 9
.text:0040DE8F                 jg      short loc_40DEE0
.text:0040DE91                 cmp     eax, 7
.text:0040DE94                 jge     short loc_40DED9
.text:0040DE96                 cmp     eax, 3
.text:0040DE99                 jg      short loc_40DEBA
.text:0040DE9B                 cmp     eax, 2
.text:0040DE9E                 jl      short loc_40DEB3
.text:0040DEA0
.text:0040DEA0 loc_40DEA0:                             ; CODE XREF: ___get_errno+15↑j
.text:0040DEA0                                         ; ___get_errno+9D↓j ...
.text:0040DEA0                 mov     edx, 2
.text:0040DEA5                 lea     esi, [esi+0]
.text:0040DEA9                 lea     edi, [edi+0]
.text:0040DEB0
.text:0040DEB0 loc_40DEB0:                             ; CODE XREF: ___get_errno+48↓j
.text:0040DEB0                                         ; ___get_errno+59↓j ...
.text:0040DEB0                 mov     eax, edx
.text:0040DEB2                 retn
.text:0040DEB3 ; ---------------------------------------------------------------------------
.text:0040DEB3
.text:0040DEB3 loc_40DEB3:                             ; CODE XREF: ___get_errno+2E↑j
.text:0040DEB3                                         ; ___get_errno+78↓j ...
.text:0040DEB3                 mov     edx, 16h
.text:0040DEB8                 jmp     short loc_40DEB0
.text:0040DEBA ; ---------------------------------------------------------------------------
.text:0040DEBA
.text:0040DEBA loc_40DEBA:                             ; CODE XREF: ___get_errno+29↑j
.text:0040DEBA                 cmp     eax, 5
.text:0040DEBD                 jz      short loc_40DED2
.text:0040DEBF                 cmp     eax, 5
.text:0040DEC2                 jg      short loc_40DECB
.text:0040DEC4                 mov     edx, 18h
.text:0040DEC9                 jmp     short loc_40DEB0
.text:0040DECB ; ---------------------------------------------------------------------------
.text:0040DECB
.text:0040DECB loc_40DECB:                             ; CODE XREF: ___get_errno+52↑j
.text:0040DECB                                         ; ___get_errno+180↓j
.text:0040DECB                 mov     edx, 9
.text:0040DED0                 jmp     short loc_40DEB0
.text:0040DED2 ; ---------------------------------------------------------------------------
.text:0040DED2
.text:0040DED2 loc_40DED2:                             ; CODE XREF: ___get_errno+10↑j
.text:0040DED2                                         ; ___get_errno+4D↑j ...
.text:0040DED2                 mov     edx, 0Dh
.text:0040DED7                 jmp     short loc_40DEB0
.text:0040DED9 ; ---------------------------------------------------------------------------
.text:0040DED9
.text:0040DED9 loc_40DED9:                             ; CODE XREF: ___get_errno+24↑j
.text:0040DED9                                         ; ___get_errno+73↓j ...
.text:0040DED9                 mov     edx, 0Ch
.text:0040DEDE                 jmp     short loc_40DEB0
.text:0040DEE0 ; ---------------------------------------------------------------------------
.text:0040DEE0
.text:0040DEE0 loc_40DEE0:                             ; CODE XREF: ___get_errno+1F↑j
.text:0040DEE0                 cmp     eax, 0Dh
.text:0040DEE3                 jg      short loc_40DED9
.text:0040DEE5                 cmp     eax, 0Ch
.text:0040DEE8                 jge     short loc_40DEB3
.text:0040DEEA                 cmp     eax, 0Ah
.text:0040DEED                 mov     edx, 7
.text:0040DEF2                 jz      short loc_40DEB0
.text:0040DEF4                 cmp     eax, 0Bh
.text:0040DEF7                 jnz     short loc_40DEB3
.text:0040DEF9
.text:0040DEF9 loc_40DEF9:                             ; CODE XREF: ___get_errno+21A↓j
.text:0040DEF9                 mov     edx, 8
.text:0040DEFE                 jmp     short loc_40DEB0
.text:0040DF00 ; ---------------------------------------------------------------------------
.text:0040DF00
.text:0040DF00 loc_40DF00:                             ; CODE XREF: ___get_errno+1A↑j
.text:0040DF00                 cmp     eax, 22h ; '"'
.text:0040DF03                 jg      short loc_40DF34
.text:0040DF05                 cmp     eax, 16h
.text:0040DF08                 jge     short loc_40DED2
.text:0040DF0A                 cmp     eax, 12h
.text:0040DF0D                 jz      short loc_40DEA0
.text:0040DF0F                 cmp     eax, 12h
.text:0040DF12                 jg      short loc_40DF25
.text:0040DF14                 cmp     eax, 10h
.text:0040DF17                 jz      short loc_40DED2
.text:0040DF19                 mov     edx, 12h
.text:0040DF1E                 cmp     eax, 11h
.text:0040DF21
.text:0040DF21 loc_40DF21:                             ; CODE XREF: ___get_errno+172↓j
.text:0040DF21                                         ; ___get_errno+24C↓j ...
.text:0040DF21                 jnz     short loc_40DEB3
.text:0040DF23                 jmp     short loc_40DEB0
.text:0040DF25 ; ---------------------------------------------------------------------------
.text:0040DF25
.text:0040DF25 loc_40DF25:                             ; CODE XREF: ___get_errno+A2↑j
.text:0040DF25                 cmp     eax, 14h
.text:0040DF28                 jle     short loc_40DED2
.text:0040DF2A
.text:0040DF2A loc_40DF2A:                             ; CODE XREF: ___get_errno+1D7↓j
.text:0040DF2A                 mov     edx, 10h
.text:0040DF2F                 jmp     loc_40DEB0
.text:0040DF34 ; ---------------------------------------------------------------------------
.text:0040DF34
.text:0040DF34 loc_40DF34:                             ; CODE XREF: ___get_errno+93↑j
.text:0040DF34                 cmp     eax, 41h ; 'A'
.text:0040DF37                 jz      short loc_40DED2
.text:0040DF39                 cmp     eax, 41h ; 'A'
.text:0040DF3C                 jg      short loc_40DF51
.text:0040DF3E                 cmp     eax, 24h ; '$'
.text:0040DF41                 jz      short loc_40DED2
.text:0040DF43                 cmp     eax, 35h ; '5'
.text:0040DF46                 jnz     loc_40DEB3
.text:0040DF4C                 jmp     loc_40DEA0
.text:0040DF51 ; ---------------------------------------------------------------------------
.text:0040DF51
.text:0040DF51 loc_40DF51:                             ; CODE XREF: ___get_errno+CC↑j
.text:0040DF51                 cmp     eax, 43h ; 'C'
.text:0040DF54                 jz      loc_40DEA0
.text:0040DF5A                 cmp     eax, 50h ; 'P'
.text:0040DF5D                 jnz     loc_40DEB3
.text:0040DF63
.text:0040DF63 loc_40DF63:                             ; CODE XREF: ___get_errno+1FB↓j
.text:0040DF63                 mov     edx, 11h
.text:0040DF68                 jmp     loc_40DEB0
.text:0040DF68 ; ---------------------------------------------------------------------------
.text:0040DF6D                 align 10h
.text:0040DF70
.text:0040DF70 loc_40DF70:                             ; CODE XREF: ___get_errno+7↑j
.text:0040DF70                 cmp     eax, 0A1h ; '¡'
.text:0040DF75                 jz      loc_40DEA0
.text:0040DF7B                 cmp     eax, 0A1h ; '¡'
.text:0040DF80                 jg      loc_40E030
.text:0040DF86                 cmp     eax, 81h
.text:0040DF8B                 jg      short loc_40DFF5
.text:0040DF8D                 cmp     eax, 80h ; '€'
.text:0040DF92                 mov     edx, 0Ah
.text:0040DF97                 jge     loc_40DEB0
.text:0040DF9D                 cmp     eax, 6Ch ; 'l'
.text:0040DFA0                 jz      loc_40DED2
.text:0040DFA6                 cmp     eax, 6Ch ; 'l'
.text:0040DFA9                 jg      short loc_40DFC7
.text:0040DFAB                 cmp     eax, 57h ; 'W'
.text:0040DFAE                 jz      loc_40DEB3
.text:0040DFB4                 cmp     eax, 59h ; 'Y'
.text:0040DFB7                 jnz     loc_40DEB3
.text:0040DFBD
.text:0040DFBD loc_40DFBD:                             ; CODE XREF: ___get_errno+1E9↓j
.text:0040DFBD                                         ; ___get_errno+23C↓j
.text:0040DFBD                 mov     edx, 0Bh
.text:0040DFC2                 jmp     loc_40DEB0
.text:0040DFC7 ; ---------------------------------------------------------------------------
.text:0040DFC7
.text:0040DFC7 loc_40DFC7:                             ; CODE XREF: ___get_errno+139↑j
.text:0040DFC7                 cmp     eax, 70h ; 'p'
.text:0040DFCA                 mov     edx, 1Ch
.text:0040DFCF                 jz      loc_40DEB0
.text:0040DFD5                 cmp     eax, 70h ; 'p'
.text:0040DFD8                 jg      short loc_40DFE7
.text:0040DFDA                 mov     edx, 20h ; ' '
.text:0040DFDF                 cmp     eax, 6Dh ; 'm'
.text:0040DFE2                 jmp     loc_40DF21
.text:0040DFE7 ; ---------------------------------------------------------------------------
.text:0040DFE7
.text:0040DFE7 loc_40DFE7:                             ; CODE XREF: ___get_errno+168↑j
.text:0040DFE7                 cmp     eax, 72h ; 'r'
.text:0040DFEA
.text:0040DFEA loc_40DFEA:                             ; CODE XREF: ___get_errno+19C↓j
.text:0040DFEA                 jnz     loc_40DEB3
.text:0040DFF0                 jmp     loc_40DECB
.text:0040DFF5 ; ---------------------------------------------------------------------------
.text:0040DFF5
.text:0040DFF5 loc_40DFF5:                             ; CODE XREF: ___get_errno+11B↑j
.text:0040DFF5                 cmp     eax, 84h ; '„'
.text:0040DFFA                 jz      loc_40DED2
.text:0040E000                 cmp     eax, 84h ; '„'
.text:0040E005                 jg      short loc_40E00E
.text:0040E007                 cmp     eax, 82h ; '‚'
.text:0040E00C                 jmp     short loc_40DFEA
.text:0040E00E ; ---------------------------------------------------------------------------
.text:0040E00E
.text:0040E00E loc_40E00E:                             ; CODE XREF: ___get_errno+195↑j
.text:0040E00E                 cmp     eax, 91h ; '‘'
.text:0040E013                 mov     edx, 29h ; ')'
.text:0040E018                 jz      loc_40DEB0
.text:0040E01E                 cmp     eax, 9Eh ; 'ž'
.text:0040E023
.text:0040E023 loc_40E023:                             ; CODE XREF: ___get_errno+1F4↓j
.text:0040E023                 jnz     loc_40DEB3
.text:0040E029                 jmp     loc_40DED2
.text:0040E029 ; ---------------------------------------------------------------------------
.text:0040E02E                 align 10h
.text:0040E030
.text:0040E030 loc_40E030:                             ; CODE XREF: ___get_errno+110↑j
.text:0040E030                 cmp     eax, 0CEh ; 'Î'
.text:0040E035                 jz      loc_40DEA0
.text:0040E03B                 cmp     eax, 0CEh ; 'Î'
.text:0040E040                 jg      short loc_40E090
.text:0040E042                 cmp     eax, 0AAh ; 'ª'
.text:0040E047                 jz      loc_40DF2A
.text:0040E04D                 cmp     eax, 0AAh ; 'ª'
.text:0040E052                 jg      short loc_40E066
.text:0040E054                 cmp     eax, 0A4h ; '¤'
.text:0040E059                 jz      loc_40DFBD
.text:0040E05F                 cmp     eax, 0A7h ; '§'
.text:0040E064                 jmp     short loc_40E023
.text:0040E066 ; ---------------------------------------------------------------------------
.text:0040E066
.text:0040E066 loc_40E066:                             ; CODE XREF: ___get_errno+1E2↑j
.text:0040E066                 cmp     eax, 0B7h ; '·'
.text:0040E06B                 jz      loc_40DF63
.text:0040E071                 cmp     eax, 0B7h ; '·'
.text:0040E076                 jl      loc_40DEB3
.text:0040E07C                 sub     eax, 0BCh ; '¼'
.text:0040E081                 cmp     eax, 0Eh
.text:0040E084                 ja      loc_40DEB3
.text:0040E08A                 jmp     loc_40DEF9
.text:0040E08A ; ---------------------------------------------------------------------------
.text:0040E08F                 align 10h
.text:0040E090
.text:0040E090 loc_40E090:                             ; CODE XREF: ___get_errno+1D0↑j
.text:0040E090                 cmp     eax, 46Bh
.text:0040E095                 mov     edx, 24h ; '$'
.text:0040E09A                 jz      loc_40DEB0
.text:0040E0A0                 cmp     eax, 46Bh
.text:0040E0A5                 jg      short loc_40E0C1
.text:0040E0A7                 cmp     eax, 0D7h ; '×'
.text:0040E0AC                 jz      loc_40DFBD
.text:0040E0B2                 mov     edx, 5
.text:0040E0B7                 cmp     eax, 45Dh
.text:0040E0BC                 jmp     loc_40DF21
.text:0040E0C1 ; ---------------------------------------------------------------------------
.text:0040E0C1
.text:0040E0C1 loc_40E0C1:                             ; CODE XREF: ___get_errno+235↑j
.text:0040E0C1                 cmp     eax, 4D5h
.text:0040E0C6                 mov     edx, 4
.text:0040E0CB                 jz      loc_40DEB0
.text:0040E0D1                 cmp     eax, 4D5h
.text:0040E0D6                 jg      short loc_40E0E7
.text:0040E0D8                 mov     edx, 13h
.text:0040E0DD                 cmp     eax, 4B0h
.text:0040E0E2                 jmp     loc_40DF21
.text:0040E0E7 ; ---------------------------------------------------------------------------
.text:0040E0E7
.text:0040E0E7 loc_40E0E7:                             ; CODE XREF: ___get_errno+266↑j
.text:0040E0E7                 cmp     eax, 718h
.text:0040E0EC                 jnz     loc_40DEB3
.text:0040E0F2                 jmp     loc_40DED9
.text:0040E0F2 ___get_errno    endp
.text:0040E0F2
.text:0040E0F2 ; ---------------------------------------------------------------------------
.text:0040E0F7                 align 10h
.text:0040E100
.text:0040E100 ; =============== S U B R O U T I N E =======================================
.text:0040E100
.text:0040E100
.text:0040E100 sub_40E100      proc near               ; CODE XREF: sub_4197F0:loc_40C86D↑p
.text:0040E100                                         ; sub_40CE10:loc_40CE78↑p ...
.text:0040E100
.text:0040E100 var_C           = dword ptr -0Ch
.text:0040E100
.text:0040E100                 sub     esp, 0Ch
.text:0040E103                 call    GetLastError
.text:0040E108                 mov     [esp+0Ch+var_C], eax
.text:0040E10B                 call    ___get_errno
.text:0040E110                 add     esp, 0Ch
.text:0040E113                 retn
.text:0040E113 sub_40E100      endp
.text:0040E113
.text:0040E113 ; ---------------------------------------------------------------------------
.text:0040E114                 align 10h
.text:0040E120
.text:0040E120 ; =============== S U B R O U T I N E =======================================
.text:0040E120
.text:0040E120
.text:0040E120 sub_40E120      proc near               ; CODE XREF: .text:0040CD83↑p
.text:0040E120                                         ; .text:0040CDD3↑p
.text:0040E120
.text:0040E120 arg_4           = dword ptr  8
.text:0040E120
.text:0040E120                 sub     esp, 0Ch
.text:0040E123                 mov     edx, [esp+0Ch+arg_4]
.text:0040E127                 test    edx, edx
.text:0040E129                 jz      short loc_40E130
.text:0040E12B                 add     esp, 0Ch
.text:0040E12E                 jmp     short sub_40E170
.text:0040E130 ; ---------------------------------------------------------------------------
.text:0040E130
.text:0040E130 loc_40E130:                             ; CODE XREF: sub_40E120+9↑j
.text:0040E130                 call    _errno
.text:0040E135                 mov     dword ptr [eax], 16h
.text:0040E13B                 xor     eax, eax
.text:0040E13D                 add     esp, 0Ch
.text:0040E140                 retn
.text:0040E140 sub_40E120      endp
.text:0040E140
.text:0040E141 ; ---------------------------------------------------------------------------
.text:0040E141                 jmp     short sub_40E150
.text:0040E141 ; ---------------------------------------------------------------------------
.text:0040E143                 align 10h
.text:0040E150
.text:0040E150 ; =============== S U B R O U T I N E =======================================
.text:0040E150
.text:0040E150
.text:0040E150 ; int __cdecl sub_40E150(LPCSTR)
.text:0040E150 sub_40E150      proc near               ; CODE XREF: sub_4197F0-D02C↑p
.text:0040E150                                         ; .text:0040CF78↑p ...
.text:0040E150
.text:0040E150 lpFileName      = dword ptr -0Ch
.text:0040E150 Destination     = dword ptr -8
.text:0040E150 arg_0           = dword ptr  4
.text:0040E150
.text:0040E150                 sub     esp, 0Ch
.text:0040E153                 mov     edx, [esp+0Ch+arg_0]
.text:0040E157                 mov     [esp+0Ch+Destination], 0 ; Destination
.text:0040E15F                 mov     [esp+0Ch+lpFileName], edx ; lpFileName
.text:0040E162                 call    sub_40E170
.text:0040E167                 add     esp, 0Ch
.text:0040E16A                 retn
.text:0040E16A sub_40E150      endp
.text:0040E16A
.text:0040E16A ; ---------------------------------------------------------------------------
.text:0040E16B                 align 10h
.text:0040E170
.text:0040E170 ; =============== S U B R O U T I N E =======================================
.text:0040E170
.text:0040E170
.text:0040E170 ; int __cdecl sub_40E170(LPCSTR lpFileName, char *Destination)
.text:0040E170 sub_40E170      proc near               ; CODE XREF: sub_40E120+E↑j
.text:0040E170                                         ; sub_40E150+12↑p
.text:0040E170
.text:0040E170 Size            = dword ptr -2Ch
.text:0040E170 nBufferLength   = dword ptr -28h
.text:0040E170 lpBuffer        = dword ptr -24h
.text:0040E170 lpFilePart      = dword ptr -20h
.text:0040E170 FilePart        = dword ptr -14h
.text:0040E170 lpFileName      = dword ptr  4
.text:0040E170 Destination     = dword ptr  8
.text:0040E170
.text:0040E170                 push    ebp
.text:0040E171                 push    edi
.text:0040E172                 push    esi
.text:0040E173                 push    ebx
.text:0040E174                 sub     esp, 1Ch
.text:0040E177                 mov     edi, [esp+2Ch+lpFileName]
.text:0040E17B                 mov     ebp, [esp+2Ch+Destination]
.text:0040E17F                 test    edi, edi
.text:0040E181                 jz      loc_40E289
.text:0040E187                 cmp     byte ptr [edi], 0
.text:0040E18A                 jz      loc_40E27C
.text:0040E190                 mov     [esp+2Ch+Size], 104h ; Size
.text:0040E197                 call    malloc
.text:0040E19C                 mov     [esp+2Ch+lpBuffer], eax ; lpBuffer
.text:0040E1A0                 lea     edx, [esp+2Ch+FilePart]
.text:0040E1A4                 mov     ebx, eax
.text:0040E1A6                 mov     [esp+2Ch+lpFilePart], edx ; lpFilePart
.text:0040E1AA                 mov     [esp+2Ch+nBufferLength], 104h ; nBufferLength
.text:0040E1B2                 mov     [esp+2Ch+Size], edi ; lpFileName
.text:0040E1B5                 call    GetFullPathNameA
.text:0040E1BA                 sub     esp, 10h
.text:0040E1BD                 mov     esi, eax
.text:0040E1BF                 test    eax, eax
.text:0040E1C1                 jz      loc_40E26A
.text:0040E1C7                 cmp     eax, 104h
.text:0040E1CC                 jle     short loc_40E1DD
.text:0040E1CE                 test    ebp, ebp
.text:0040E1D0                 jz      short loc_40E239
.text:0040E1D2                 call    _errno
.text:0040E1D7                 mov     dword ptr [eax], 26h ; '&'
.text:0040E1DD
.text:0040E1DD loc_40E1DD:                             ; CODE XREF: sub_40E170+5C↑j
.text:0040E1DD                                         ; sub_40E170+F5↓j
.text:0040E1DD                 call    _errno
.text:0040E1E2                 mov     edi, [eax]
.text:0040E1E4                 mov     [esp+2Ch+nBufferLength], 10h ; int
.text:0040E1EC                 mov     [esp+2Ch+Size], ebx ; lpFileName
.text:0040E1EF                 call    sub_40E2A0
.text:0040E1F4                 test    eax, eax
.text:0040E1F6                 jnz     short loc_40E210
.text:0040E1F8                 movzx   eax, byte ptr [esi+ebx-1]
.text:0040E1FD                 cmp     al, 2Fh ; '/'
.text:0040E1FF                 jz      short loc_40E210
.text:0040E201                 cmp     al, 5Ch ; '\'
.text:0040E203                 jz      short loc_40E210
.text:0040E205                 mov     byte ptr [esi+ebx], 5Ch ; '\'
.text:0040E209                 mov     byte ptr [esi+ebx+1], 0
.text:0040E20E                 mov     esi, esi
.text:0040E210
.text:0040E210 loc_40E210:                             ; CODE XREF: sub_40E170+86↑j
.text:0040E210                                         ; sub_40E170+8F↑j ...
.text:0040E210                 call    _errno
.text:0040E215                 mov     [eax], edi
.text:0040E217                 mov     [esp+2Ch+Size], ebx
.text:0040E21A                 call    sub_40CC70
.text:0040E21F                 test    ebp, ebp
.text:0040E221                 mov     eax, ebx
.text:0040E223                 jz      short loc_40E231
.text:0040E225                 mov     [esp+2Ch+nBufferLength], ebx ; Source
.text:0040E229                 mov     [esp+2Ch+Size], ebp ; Destination
.text:0040E22C                 call    strcpy
.text:0040E231
.text:0040E231 loc_40E231:                             ; CODE XREF: sub_40E170+B3↑j
.text:0040E231                                         ; sub_40E170+10A↓j
.text:0040E231                 add     esp, 1Ch
.text:0040E234                 pop     ebx
.text:0040E235                 pop     esi
.text:0040E236                 pop     edi
.text:0040E237                 pop     ebp
.text:0040E238                 retn
.text:0040E239 ; ---------------------------------------------------------------------------
.text:0040E239
.text:0040E239 loc_40E239:                             ; CODE XREF: sub_40E170+60↑j
.text:0040E239                 mov     [esp+2Ch+Size], ebx ; Block
.text:0040E23C                 lea     ecx, [eax+2]
.text:0040E23F                 mov     [esp+2Ch+nBufferLength], ecx ; Size
.text:0040E243                 call    realloc
.text:0040E248                 mov     [esp+2Ch+lpBuffer], eax ; lpBuffer
.text:0040E24C                 lea     edx, [esp+2Ch+FilePart]
.text:0040E250                 mov     ebx, eax
.text:0040E252                 mov     [esp+2Ch+lpFilePart], edx ; lpFilePart
.text:0040E256                 mov     [esp+2Ch+nBufferLength], esi ; nBufferLength
.text:0040E25A                 mov     [esp+2Ch+Size], edi ; lpFileName
.text:0040E25D                 call    GetFullPathNameA
.text:0040E262                 sub     esp, 10h
.text:0040E265                 jmp     loc_40E1DD
.text:0040E26A ; ---------------------------------------------------------------------------
.text:0040E26A
.text:0040E26A loc_40E26A:                             ; CODE XREF: sub_40E170+51↑j
.text:0040E26A                 call    sub_40E100
.text:0040E26F                 mov     esi, eax
.text:0040E271                 call    _errno
.text:0040E276                 mov     [eax], esi
.text:0040E278
.text:0040E278 loc_40E278:                             ; CODE XREF: sub_40E170+117↓j
.text:0040E278                                         ; sub_40E170+124↓j
.text:0040E278                 xor     eax, eax
.text:0040E27A                 jmp     short loc_40E231
.text:0040E27C ; ---------------------------------------------------------------------------
.text:0040E27C
.text:0040E27C loc_40E27C:                             ; CODE XREF: sub_40E170+1A↑j
.text:0040E27C                 call    _errno
.text:0040E281                 mov     dword ptr [eax], 2
.text:0040E287                 jmp     short loc_40E278
.text:0040E289 ; ---------------------------------------------------------------------------
.text:0040E289
.text:0040E289 loc_40E289:                             ; CODE XREF: sub_40E170+11↑j
.text:0040E289                 call    _errno
.text:0040E28E                 mov     dword ptr [eax], 16h
.text:0040E294                 jmp     short loc_40E278
.text:0040E294 sub_40E170      endp
.text:0040E294
.text:0040E294 ; ---------------------------------------------------------------------------
.text:0040E296                 align 10h
.text:0040E2A0
.text:0040E2A0 ; =============== S U B R O U T I N E =======================================
.text:0040E2A0
.text:0040E2A0
.text:0040E2A0 ; int __cdecl sub_40E2A0(LPCSTR lpFileName, int)
.text:0040E2A0 sub_40E2A0      proc near               ; CODE XREF: sub_4197F0-D03D↑p
.text:0040E2A0                                         ; .text:0040CC52↑p ...
.text:0040E2A0
.text:0040E2A0 uMode           = dword ptr -1Ch
.text:0040E2A0 var_10          = dword ptr -10h
.text:0040E2A0 var_C           = dword ptr -0Ch
.text:0040E2A0 var_8           = dword ptr -8
.text:0040E2A0 var_4           = dword ptr -4
.text:0040E2A0 lpFileName      = dword ptr  4
.text:0040E2A0 arg_4           = dword ptr  8
.text:0040E2A0
.text:0040E2A0                 sub     esp, 1Ch
.text:0040E2A3                 mov     [esp+1Ch+var_10], ebx
.text:0040E2A7                 mov     ebx, [esp+1Ch+lpFileName]
.text:0040E2AB                 mov     [esp+1Ch+var_4], ebp
.text:0040E2AF                 xor     ebp, ebp
.text:0040E2B1                 test    ebx, ebx
.text:0040E2B3                 mov     [esp+1Ch+var_C], esi
.text:0040E2B7                 mov     esi, [esp+1Ch+arg_4]
.text:0040E2BB                 mov     [esp+1Ch+var_8], edi
.text:0040E2BF                 jz      short loc_40E2C9
.text:0040E2C1                 test    esi, 0FFFFFFE8h
.text:0040E2C7                 jz      short loc_40E2F0
.text:0040E2C9
.text:0040E2C9 loc_40E2C9:                             ; CODE XREF: sub_40E2A0+1F↑j
.text:0040E2C9                 call    _errno
.text:0040E2CE                 mov     dword ptr [eax], 16h
.text:0040E2D4
.text:0040E2D4 loc_40E2D4:                             ; CODE XREF: sub_40E2A0+B1↓j
.text:0040E2D4                 mov     eax, 0FFFFFFFFh
.text:0040E2D9
.text:0040E2D9 loc_40E2D9:                             ; CODE XREF: sub_40E2A0+86↓j
.text:0040E2D9                                         ; sub_40E2A0+A4↓j
.text:0040E2D9                 mov     ebx, [esp+1Ch+var_10]
.text:0040E2DD                 mov     esi, [esp+1Ch+var_C]
.text:0040E2E1                 mov     edi, [esp+1Ch+var_8]
.text:0040E2E5                 mov     ebp, [esp+1Ch+var_4]
.text:0040E2E9                 add     esp, 1Ch
.text:0040E2EC                 retn
.text:0040E2EC ; ---------------------------------------------------------------------------
.text:0040E2ED                 align 10h
.text:0040E2F0
.text:0040E2F0 loc_40E2F0:                             ; CODE XREF: sub_40E2A0+27↑j
.text:0040E2F0                 mov     [esp+1Ch+uMode], 8001h ; uMode
.text:0040E2F7                 call    SetErrorMode
.text:0040E2FC                 sub     esp, 4
.text:0040E2FF                 mov     [esp+1Ch+uMode], ebx ; lpFileName
.text:0040E302                 call    GetFileAttributesA
.text:0040E307                 sub     esp, 4
.text:0040E30A                 mov     edi, eax
.text:0040E30C                 cmp     eax, 0FFFFFFFFh
.text:0040E30F                 jz      short loc_40E353
.text:0040E311
.text:0040E311 loc_40E311:                             ; CODE XREF: sub_40E2A0+C6↓j
.text:0040E311                 mov     [esp+1Ch+uMode], 0 ; uMode
.text:0040E318                 call    SetErrorMode
.text:0040E31D                 sub     esp, 4
.text:0040E320                 mov     eax, 0FFFFFFFFh
.text:0040E325                 inc     ebp
.text:0040E326                 jz      short loc_40E2D9
.text:0040E328                 test    esi, 10h
.text:0040E32E                 jz      short loc_40E338
.text:0040E330                 test    edi, 10h
.text:0040E336                 jz      short loc_40E346
.text:0040E338
.text:0040E338 loc_40E338:                             ; CODE XREF: sub_40E2A0+8E↑j
.text:0040E338                 and     esi, 2
.text:0040E33B                 jz      short loc_40E342
.text:0040E33D                 and     edi, 1
.text:0040E340                 jnz     short loc_40E346
.text:0040E342
.text:0040E342 loc_40E342:                             ; CODE XREF: sub_40E2A0+9B↑j
.text:0040E342                 xor     eax, eax
.text:0040E344                 jmp     short loc_40E2D9
.text:0040E346 ; ---------------------------------------------------------------------------
.text:0040E346
.text:0040E346 loc_40E346:                             ; CODE XREF: sub_40E2A0+96↑j
.text:0040E346                                         ; sub_40E2A0+A0↑j
.text:0040E346                 call    _errno
.text:0040E34B                 mov     dword ptr [eax], 0Dh
.text:0040E351                 jmp     short loc_40E2D4
.text:0040E353 ; ---------------------------------------------------------------------------
.text:0040E353
.text:0040E353 loc_40E353:                             ; CODE XREF: sub_40E2A0+6F↑j
.text:0040E353                 call    sub_40E100
.text:0040E358                 mov     ebp, eax
.text:0040E35A                 call    _errno
.text:0040E35F                 mov     [eax], ebp
.text:0040E361                 mov     ebp, 0FFFFFFFFh
.text:0040E366                 jmp     short loc_40E311
.text:0040E366 sub_40E2A0      endp
.text:0040E366
.text:0040E366 ; ---------------------------------------------------------------------------
.text:0040E368                 align 10h
.text:0040E370 aLuLuLu         db '%lu.%lu.%lu',0      ; DATA XREF: .text:0040E58F↓o
.text:0040E37C aLu             db '%lu',0              ; DATA XREF: .text:0040E59F↓o
.text:0040E380 asc_40E380      db ' ',0                ; DATA XREF: .text:loc_40E688↓o
.text:0040E382                 align 10h
.text:0040E390 aServer40Enterp db 'Server 4.0, Enterprise Edition ',0
.text:0040E390                                         ; DATA XREF: .text:0040E6BF↓o
.text:0040E3B0 aServer40       db 'Server 4.0 ',0      ; DATA XREF: .text:loc_40E6CD↓o
.text:0040E3BC aServer         db ' Server',0          ; DATA XREF: .text:0040E6F6↓o
.text:0040E3BC                                         ; .text:loc_40E86E↓o
.text:0040E3C4 aAdvancedServer db ' Advanced Server',0 ; DATA XREF: .text:loc_40E708↓o
.text:0040E3D5 aDatacenterServ db ' Datacenter Server',0
.text:0040E3D5                                         ; DATA XREF: .text:loc_40E712↓o
.text:0040E3E8 aStandardEditio db ' Standard Edition',0
.text:0040E3E8                                         ; DATA XREF: .text:0040E73A↓o
.text:0040E3FA aWebEdition     db ' Web Edition',0     ; DATA XREF: .text:loc_40E744↓o
.text:0040E407 aEnterpriseEdit db ' Enterprise Edition',0
.text:0040E407                                         ; DATA XREF: .text:loc_40E74E↓o
.text:0040E41B aDatacenterEdit db ' Datacenter Edition',0
.text:0040E41B                                         ; DATA XREF: .text:loc_40E758↓o
.text:0040E42F aHomeEdition    db ' Home Edition',0    ; DATA XREF: .text:0040E76B↓o
.text:0040E43D aProfessional   db ' Professional',0    ; DATA XREF: .text:loc_40E775↓o
.text:0040E43D                                         ; .text:loc_40E880↓o
.text:0040E44B                 align 10h
.text:0040E450 aSystemCurrentc db 'SYSTEM\CurrentControlSet\Control\ProductOptions',0
.text:0040E450                                         ; DATA XREF: .text:0040E7A2↓o
.text:0040E480 aProducttype    db 'ProductType',0      ; DATA XREF: .text:0040E7E9↓o
.text:0040E48C aWinnt          db 'WINNT',0            ; DATA XREF: .text:0040E824↓o
.text:0040E492 aLanmannt       db 'LANMANNT',0         ; DATA XREF: .text:0040E83B↓o
.text:0040E49B aServernt       db 'SERVERNT',0         ; DATA XREF: .text:0040E852↓o
.text:0040E4A4                 align 10h
.text:0040E4B0 aMicrosoftWindo db 'Microsoft Windows 3.1 with Win32s ',0
.text:0040E4B0                                         ; DATA XREF: .text:0040E9C7↓o
.text:0040E4D3                 db 1Dh dup(90h)
.text:0040E4F0 aMicrosoftWindo_0 db 'Microsoft Windows Millennium Edition ',0
.text:0040E4F0                                         ; DATA XREF: .text:0040EA26↓o
.text:0040E516 ; ---------------------------------------------------------------------------
.text:0040E516
.text:0040E516 loc_40E516:                             ; DATA XREF: .text:loc_40EA91↓o
.text:0040E516                 and     [ebx+45h], dl
.text:0040E519                 add     [eax], ah
.text:0040E51B                 push    ebx
.text:0040E51C                 push    eax
.text:0040E51D                 xor     [eax], eax
.text:0040E51F
.text:0040E51F loc_40E51F:                             ; DATA XREF: .text:loc_40EB0B↓o
.text:0040E51F                 and     [edi+53h], cl
.text:0040E522                 push    edx
.text:0040E523                 xor     al, [eax]
.text:0040E525                 lea     esi, [esi+0]
.text:0040E529                 lea     edi, [edi+0]
.text:0040E530                 push    edi
.text:0040E531                 push    esi
.text:0040E532                 push    ebx
.text:0040E533                 sub     esp, 130h
.text:0040E539                 mov     ebx, [esp+140h]
.text:0040E540                 call    sub_40EC40
.text:0040E545                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0040E54A                 cmp     eax, 1
.text:0040E54D                 jz      loc_40E9F0
.text:0040E553                 cmp     eax, 1
.text:0040E556                 jb      loc_40E9C6
.text:0040E55C                 cmp     eax, 2
.text:0040E55F                 jz      loc_40E610
.text:0040E565                 cmp     eax, 3
.text:0040E568                 jz      short loc_40E5CF
.text:0040E56A                 lea     esi, [esi+0]
.text:0040E570
.text:0040E570 loc_40E570:                             ; CODE XREF: .text:0040E605↓j
.text:0040E570                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:0040E576                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0040E57C
.text:0040E57C loc_40E57C:                             ; CODE XREF: .text:0040EA0F↓j
.text:0040E57C                 mov     [esp+10h], edx
.text:0040E580                 mov     ebx, [esp+144h]
.text:0040E587                 mov     [esp+0Ch], ecx
.text:0040E58B                 mov     [esp+8], eax
.text:0040E58F                 mov     dword ptr [esp+4], offset aLuLuLu ; "%lu.%lu.%lu"
.text:0040E597                 mov     [esp], ebx
.text:0040E59A                 call    sprintf
.text:0040E59F                 mov     dword ptr [esp+4], offset aLu ; "%lu"
.text:0040E5A7                 mov     edi, ds:VersionInformation.dwBuildNumber
.text:0040E5AD                 mov     ecx, [esp+148h]
.text:0040E5B4                 mov     [esp+8], edi
.text:0040E5B8                 mov     [esp], ecx
.text:0040E5BB                 call    sprintf
.text:0040E5C0                 mov     eax, 1
.text:0040E5C5
.text:0040E5C5 loc_40E5C5:                             ; CODE XREF: .text:0040E7BF↓j
.text:0040E5C5                                         ; .text:0040E80C↓j
.text:0040E5C5                 add     esp, 130h
.text:0040E5CB                 pop     ebx
.text:0040E5CC                 pop     esi
.text:0040E5CD                 pop     edi
.text:0040E5CE                 retn
.text:0040E5CF ; ---------------------------------------------------------------------------
.text:0040E5CF
.text:0040E5CF loc_40E5CF:                             ; CODE XREF: .text:0040E568↑j
.text:0040E5CF                 mov     dword ptr [ebx], 7263694Dh
.text:0040E5D5                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040E5DC                 mov     dword ptr [ebx+8], 69572074h
.text:0040E5E3                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040E5EA                 mov     dword ptr [ebx+10h], 45432073h
.text:0040E5F1                 mov     word ptr [ebx+14h], 20h ; ' '
.text:0040E5F7                 mov     esi, esi
.text:0040E5F9                 lea     edi, [edi+0]
.text:0040E600
.text:0040E600 loc_40E600:                             ; CODE XREF: .text:0040E6A8↓j
.text:0040E600                                         ; .text:0040E9E9↓j ...
.text:0040E600                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0040E605                 jmp     loc_40E570
.text:0040E605 ; ---------------------------------------------------------------------------
.text:0040E60A                 align 10h
.text:0040E610
.text:0040E610 loc_40E610:                             ; CODE XREF: .text:0040E55F↑j
.text:0040E610                 mov     edx, ds:VersionInformation.dwMajorVersion
.text:0040E616                 cmp     edx, 3
.text:0040E619                 mov     eax, edx
.text:0040E61B                 jz      loc_40E985
.text:0040E621
.text:0040E621 loc_40E621:                             ; CODE XREF: .text:0040E98C↓j
.text:0040E621                 cmp     eax, 4
.text:0040E624                 jz      loc_40E945
.text:0040E62A
.text:0040E62A loc_40E62A:                             ; CODE XREF: .text:0040E94D↓j
.text:0040E62A                 cmp     eax, 4
.text:0040E62D                 ja      loc_40E892
.text:0040E633                 mov     ecx, ds:VersionInformation.dwMinorVersion
.text:0040E639                 test    ecx, ecx
.text:0040E63B                 jnz     loc_40E892
.text:0040E641                 mov     dword ptr [ebx], 7263694Dh
.text:0040E647                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040E64E                 mov     dword ptr [ebx+8], 69572074h
.text:0040E655                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040E65C                 mov     dword ptr [ebx+10h], 544E2073h
.text:0040E663
.text:0040E663 loc_40E663:                             ; CODE XREF: .text:0040E905↓j
.text:0040E663                 mov     byte ptr [ebx+14h], 0
.text:0040E667
.text:0040E667 loc_40E667:                             ; CODE XREF: .text:0040E895↓j
.text:0040E667                                         ; .text:0040E8AC↓j ...
.text:0040E667                 mov     esi, dword_41D0C0
.text:0040E66D                 test    esi, esi
.text:0040E66F                 jz      loc_40E782
.text:0040E675                 movzx   eax, ds:byte_41E7DA
.text:0040E67C                 cmp     al, 1
.text:0040E67E                 jz      loc_40E762
.text:0040E684                 cmp     al, 3
.text:0040E686                 jz      short loc_40E6AD
.text:0040E688
.text:0040E688 loc_40E688:                             ; CODE XREF: .text:0040E6CB↓j
.text:0040E688                                         ; .text:0040E706↓j ...
.text:0040E688                 mov     dword ptr [esp+4], offset asc_40E380 ; " "
.text:0040E690                 mov     [esp], ebx
.text:0040E693                 call    strcat
.text:0040E698                 mov     dword ptr [esp+4], offset VersionInformation.szCSDVersion
.text:0040E6A0                 mov     [esp], ebx
.text:0040E6A3                 call    strcat
.text:0040E6A8                 jmp     loc_40E600
.text:0040E6AD ; ---------------------------------------------------------------------------
.text:0040E6AD
.text:0040E6AD loc_40E6AD:                             ; CODE XREF: .text:0040E686↑j
.text:0040E6AD                 cmp     ds:VersionInformation.dwMajorVersion, 5
.text:0040E6B4                 jz      short loc_40E6D6
.text:0040E6B6
.text:0040E6B6 loc_40E6B6:                             ; CODE XREF: .text:0040E6E2↓j
.text:0040E6B6                 test    byte ptr ds:word_41E7D8, 2
.text:0040E6BD                 jz      short loc_40E6CD
.text:0040E6BF                 mov     dword ptr [esp], offset aServer40Enterp ; "Server 4.0, Enterprise Edition "
.text:0040E6C6
.text:0040E6C6 loc_40E6C6:                             ; CODE XREF: .text:0040E6D4↓j
.text:0040E6C6                 call    printf
.text:0040E6CB                 jmp     short loc_40E688
.text:0040E6CD ; ---------------------------------------------------------------------------
.text:0040E6CD
.text:0040E6CD loc_40E6CD:                             ; CODE XREF: .text:0040E6BD↑j
.text:0040E6CD                 mov     dword ptr [esp], offset aServer40 ; "Server 4.0 "
.text:0040E6D4                 jmp     short loc_40E6C6
.text:0040E6D6 ; ---------------------------------------------------------------------------
.text:0040E6D6
.text:0040E6D6 loc_40E6D6:                             ; CODE XREF: .text:0040E6B4↑j
.text:0040E6D6                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0040E6DB                 cmp     eax, 2
.text:0040E6DE                 jz      short loc_40E720
.text:0040E6E0                 test    eax, eax
.text:0040E6E2                 jnz     short loc_40E6B6
.text:0040E6E4                 cmp     byte ptr ds:word_41E7D8, 0
.text:0040E6EB                 js      short loc_40E712
.text:0040E6ED                 test    byte ptr ds:word_41E7D8, 2
.text:0040E6F4                 jnz     short loc_40E708
.text:0040E6F6                 mov     dword ptr [esp+4], offset aServer ; " Server"
.text:0040E6FE
.text:0040E6FE loc_40E6FE:                             ; CODE XREF: .text:0040E710↓j
.text:0040E6FE                                         ; .text:0040E71A↓j ...
.text:0040E6FE                 mov     [esp], ebx
.text:0040E701                 call    strcat
.text:0040E706                 jmp     short loc_40E688
.text:0040E708 ; ---------------------------------------------------------------------------
.text:0040E708
.text:0040E708 loc_40E708:                             ; CODE XREF: .text:0040E6F4↑j
.text:0040E708                                         ; .text:0040E869↓j
.text:0040E708                 mov     dword ptr [esp+4], offset aAdvancedServer ; " Advanced Server"
.text:0040E710                 jmp     short loc_40E6FE
.text:0040E712 ; ---------------------------------------------------------------------------
.text:0040E712
.text:0040E712 loc_40E712:                             ; CODE XREF: .text:0040E6EB↑j
.text:0040E712                 mov     dword ptr [esp+4], offset aDatacenterServ ; " Datacenter Server"
.text:0040E71A                 jmp     short loc_40E6FE
.text:0040E71A ; ---------------------------------------------------------------------------
.text:0040E71C                 align 10h
.text:0040E720
.text:0040E720 loc_40E720:                             ; CODE XREF: .text:0040E6DE↑j
.text:0040E720                 cmp     byte ptr ds:word_41E7D8, 0
.text:0040E727                 js      short loc_40E758
.text:0040E729                 movzx   eax, ds:word_41E7D8
.text:0040E730                 test    al, 2
.text:0040E732                 jnz     short loc_40E74E
.text:0040E734                 cmp     ax, 400h
.text:0040E738                 jz      short loc_40E744
.text:0040E73A                 mov     dword ptr [esp+4], offset aStandardEditio ; " Standard Edition"
.text:0040E742                 jmp     short loc_40E6FE
.text:0040E744 ; ---------------------------------------------------------------------------
.text:0040E744
.text:0040E744 loc_40E744:                             ; CODE XREF: .text:0040E738↑j
.text:0040E744                 mov     dword ptr [esp+4], offset aWebEdition ; " Web Edition"
.text:0040E74C                 jmp     short loc_40E6FE
.text:0040E74E ; ---------------------------------------------------------------------------
.text:0040E74E
.text:0040E74E loc_40E74E:                             ; CODE XREF: .text:0040E732↑j
.text:0040E74E                 mov     dword ptr [esp+4], offset aEnterpriseEdit ; " Enterprise Edition"
.text:0040E756                 jmp     short loc_40E6FE
.text:0040E758 ; ---------------------------------------------------------------------------
.text:0040E758
.text:0040E758 loc_40E758:                             ; CODE XREF: .text:0040E727↑j
.text:0040E758                 mov     dword ptr [esp+4], offset aDatacenterEdit ; " Datacenter Edition"
.text:0040E760                 jmp     short loc_40E6FE
.text:0040E762 ; ---------------------------------------------------------------------------
.text:0040E762
.text:0040E762 loc_40E762:                             ; CODE XREF: .text:0040E67E↑j
.text:0040E762                 test    byte ptr ds:word_41E7D8+1, 2
.text:0040E769                 jz      short loc_40E775
.text:0040E76B                 mov     dword ptr [esp+4], offset aHomeEdition ; " Home Edition"
.text:0040E773                 jmp     short loc_40E6FE
.text:0040E775 ; ---------------------------------------------------------------------------
.text:0040E775
.text:0040E775 loc_40E775:                             ; CODE XREF: .text:0040E769↑j
.text:0040E775                 mov     dword ptr [esp+4], offset aProfessional ; " Professional"
.text:0040E77D                 jmp     loc_40E6FE
.text:0040E782 ; ---------------------------------------------------------------------------
.text:0040E782
.text:0040E782 loc_40E782:                             ; CODE XREF: .text:0040E66F↑j
.text:0040E782                 mov     dword ptr [esp+28h], 0FFh
.text:0040E78A                 lea     edx, [esp+2Ch]
.text:0040E78E                 mov     [esp+10h], edx
.text:0040E792                 mov     dword ptr [esp+0Ch], 1
.text:0040E79A                 mov     dword ptr [esp+8], 0
.text:0040E7A2                 mov     dword ptr [esp+4], offset aSystemCurrentc ; "SYSTEM\\CurrentControlSet\\Control\\Pro"...
.text:0040E7AA                 mov     dword ptr [esp], 80000002h
.text:0040E7B1                 call    RegOpenKeyExA
.text:0040E7B6                 mov     edi, eax
.text:0040E7B8                 sub     esp, 14h
.text:0040E7BB                 xor     eax, eax
.text:0040E7BD                 test    edi, edi
.text:0040E7BF                 jnz     loc_40E5C5
.text:0040E7C5                 mov     dword ptr [esp+0Ch], 0
.text:0040E7CD                 mov     edi, [esp+2Ch]
.text:0040E7D1                 lea     esi, [esp+28h]
.text:0040E7D5                 mov     [esp+14h], esi
.text:0040E7D9                 lea     esi, [esp+30h]
.text:0040E7DD                 mov     [esp+10h], esi
.text:0040E7E1                 mov     dword ptr [esp+8], 0
.text:0040E7E9                 mov     dword ptr [esp+4], offset aProducttype ; "ProductType"
.text:0040E7F1                 mov     [esp], edi
.text:0040E7F4                 call    RegQueryValueExA
.text:0040E7F9                 sub     esp, 18h
.text:0040E7FC                 test    eax, eax
.text:0040E7FE                 jnz     short loc_40E80A
.text:0040E800                 cmp     dword ptr [esp+28h], 0FFh
.text:0040E808                 jbe     short loc_40E811
.text:0040E80A
.text:0040E80A loc_40E80A:                             ; CODE XREF: .text:0040E7FE↑j
.text:0040E80A                 xor     eax, eax
.text:0040E80C                 jmp     loc_40E5C5
.text:0040E811 ; ---------------------------------------------------------------------------
.text:0040E811
.text:0040E811 loc_40E811:                             ; CODE XREF: .text:0040E808↑j
.text:0040E811                 mov     edx, [esp+2Ch]
.text:0040E815                 mov     [esp], edx
.text:0040E818                 call    RegCloseKey
.text:0040E81D                 sub     esp, 4
.text:0040E820                 mov     [esp+4], esi
.text:0040E824                 mov     dword ptr [esp], offset aWinnt ; "WINNT"
.text:0040E82B                 call    lstrcmpiA
.text:0040E830                 sub     esp, 8
.text:0040E833                 test    eax, eax
.text:0040E835                 jz      short loc_40E880
.text:0040E837
.text:0040E837 loc_40E837:                             ; CODE XREF: .text:0040E890↓j
.text:0040E837                 mov     [esp+4], esi
.text:0040E83B                 mov     dword ptr [esp], offset aLanmannt ; "LANMANNT"
.text:0040E842                 call    lstrcmpiA
.text:0040E847                 sub     esp, 8
.text:0040E84A                 test    eax, eax
.text:0040E84C                 jz      short loc_40E86E
.text:0040E84E
.text:0040E84E loc_40E84E:                             ; CODE XREF: .text:0040E87E↓j
.text:0040E84E                 mov     [esp+4], esi
.text:0040E852                 mov     dword ptr [esp], offset aServernt ; "SERVERNT"
.text:0040E859                 call    lstrcmpiA
.text:0040E85E                 sub     esp, 8
.text:0040E861                 test    eax, eax
.text:0040E863                 jnz     loc_40E688
.text:0040E869                 jmp     loc_40E708
.text:0040E86E ; ---------------------------------------------------------------------------
.text:0040E86E
.text:0040E86E loc_40E86E:                             ; CODE XREF: .text:0040E84C↑j
.text:0040E86E                 mov     dword ptr [esp+4], offset aServer ; " Server"
.text:0040E876                 mov     [esp], ebx
.text:0040E879                 call    strcat
.text:0040E87E                 jmp     short loc_40E84E
.text:0040E880 ; ---------------------------------------------------------------------------
.text:0040E880
.text:0040E880 loc_40E880:                             ; CODE XREF: .text:0040E835↑j
.text:0040E880                 mov     dword ptr [esp+4], offset aProfessional ; " Professional"
.text:0040E888                 mov     [esp], ebx
.text:0040E88B                 call    strcat
.text:0040E890                 jmp     short loc_40E837
.text:0040E892 ; ---------------------------------------------------------------------------
.text:0040E892
.text:0040E892 loc_40E892:                             ; CODE XREF: .text:0040E62D↑j
.text:0040E892                                         ; .text:0040E63B↑j
.text:0040E892                 cmp     eax, 5
.text:0040E895                 jnz     loc_40E667
.text:0040E89B                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0040E8A0                 cmp     eax, 2
.text:0040E8A3                 jz      short loc_40E90A
.text:0040E8A5                 cmp     eax, 1
.text:0040E8A8                 jz      short loc_40E8E3
.text:0040E8AA                 test    eax, eax
.text:0040E8AC                 jnz     loc_40E667
.text:0040E8B2                 mov     dword ptr [ebx], 7263694Dh
.text:0040E8B8                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040E8BF                 mov     dword ptr [ebx+8], 69572074h
.text:0040E8C6                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040E8CD                 mov     dword ptr [ebx+10h], 30322073h
.text:0040E8D4                 mov     word ptr [ebx+14h], 3030h
.text:0040E8DA                 mov     byte ptr [ebx+16h], 0
.text:0040E8DE                 jmp     loc_40E667
.text:0040E8E3 ; ---------------------------------------------------------------------------
.text:0040E8E3
.text:0040E8E3 loc_40E8E3:                             ; CODE XREF: .text:0040E8A8↑j
.text:0040E8E3                 mov     dword ptr [ebx], 7263694Dh
.text:0040E8E9                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040E8F0                 mov     dword ptr [ebx+8], 69572074h
.text:0040E8F7                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040E8FE                 mov     dword ptr [ebx+10h], 50582073h
.text:0040E905                 jmp     loc_40E663
.text:0040E90A ; ---------------------------------------------------------------------------
.text:0040E90A
.text:0040E90A loc_40E90A:                             ; CODE XREF: .text:0040E8A3↑j
.text:0040E90A                 mov     dword ptr [ebx], 7263694Dh
.text:0040E910                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040E917                 mov     dword ptr [ebx+8], 69572074h
.text:0040E91E                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040E925                 mov     dword ptr [ebx+10h], 65532073h
.text:0040E92C                 mov     dword ptr [ebx+14h], 72657672h
.text:0040E933                 mov     dword ptr [ebx+18h], 30303220h
.text:0040E93A                 mov     word ptr [ebx+1Ch], 33h ; '3'
.text:0040E940                 jmp     loc_40E667
.text:0040E945 ; ---------------------------------------------------------------------------
.text:0040E945
.text:0040E945 loc_40E945:                             ; CODE XREF: .text:0040E624↑j
.text:0040E945                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0040E94B                 test    edx, edx
.text:0040E94D                 jnz     loc_40E62A
.text:0040E953                 mov     dword ptr [ebx], 7263694Dh
.text:0040E959                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040E960                 mov     dword ptr [ebx+8], 69572074h
.text:0040E967                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040E96E                 mov     dword ptr [ebx+10h], 544E2073h
.text:0040E975                 mov     dword ptr [ebx+14h], 302E3420h
.text:0040E97C                 mov     byte ptr [ebx+18h], 0
.text:0040E980                 jmp     loc_40E667
.text:0040E985 ; ---------------------------------------------------------------------------
.text:0040E985
.text:0040E985 loc_40E985:                             ; CODE XREF: .text:0040E61B↑j
.text:0040E985                 cmp     ds:VersionInformation.dwMinorVersion, 33h ; '3'
.text:0040E98C                 jnz     loc_40E621
.text:0040E992                 mov     dword ptr [ebx], 7263694Dh
.text:0040E998                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040E99F                 mov     dword ptr [ebx+8], 69572074h
.text:0040E9A6                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040E9AD                 mov     dword ptr [ebx+10h], 544E2073h
.text:0040E9B4                 mov     dword ptr [ebx+14h], 352E3320h
.text:0040E9BB                 mov     word ptr [ebx+18h], 31h ; '1'
.text:0040E9C1                 jmp     loc_40E667
.text:0040E9C6 ; ---------------------------------------------------------------------------
.text:0040E9C6
.text:0040E9C6 loc_40E9C6:                             ; CODE XREF: .text:0040E556↑j
.text:0040E9C6                 cld
.text:0040E9C7                 mov     esi, offset aMicrosoftWindo ; "Microsoft Windows 3.1 with Win32s "
.text:0040E9CC                 mov     ecx, 8
.text:0040E9D1                 movzx   edx, byte ptr ds:aMicrosoftWindo+22h ; ""
.text:0040E9D8                 mov     edi, ebx
.text:0040E9DA                 rep movsd
.text:0040E9DC                 movzx   esi, word ptr ds:aMicrosoftWindo+20h ; "s "
.text:0040E9E3                 mov     [edi+2], dl
.text:0040E9E6                 mov     [edi], si
.text:0040E9E9                 jmp     loc_40E600
.text:0040E9E9 ; ---------------------------------------------------------------------------
.text:0040E9EE                 align 10h
.text:0040E9F0
.text:0040E9F0 loc_40E9F0:                             ; CODE XREF: .text:0040E54D↑j
.text:0040E9F0                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:0040E9F6                 cmp     ecx, 4
.text:0040E9F9                 jz      loc_40EAB0
.text:0040E9FF
.text:0040E9FF loc_40E9FF:                             ; CODE XREF: .text:0040EB06↓j
.text:0040E9FF                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0040EA05
.text:0040EA05 loc_40EA05:                             ; CODE XREF: .text:0040EAB8↓j
.text:0040EA05                 cmp     ecx, 4
.text:0040EA08                 jz      short loc_40EA14
.text:0040EA0A
.text:0040EA0A loc_40EA0A:                             ; CODE XREF: .text:0040EA1C↓j
.text:0040EA0A                                         ; .text:0040EA21↓j
.text:0040EA0A                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0040EA0F                 jmp     loc_40E57C
.text:0040EA14 ; ---------------------------------------------------------------------------
.text:0040EA14
.text:0040EA14 loc_40EA14:                             ; CODE XREF: .text:0040EA08↑j
.text:0040EA14                 cmp     edx, 0Ah
.text:0040EA17                 jz      short loc_40EA41
.text:0040EA19
.text:0040EA19 loc_40EA19:                             ; CODE XREF: .text:0040EA8F↓j
.text:0040EA19                 cmp     ecx, 4
.text:0040EA1C                 jnz     short loc_40EA0A
.text:0040EA1E                 cmp     edx, 5Ah ; 'Z'
.text:0040EA21                 jnz     short loc_40EA0A
.text:0040EA23                 cld
.text:0040EA24                 mov     edi, ebx
.text:0040EA26                 mov     esi, offset aMicrosoftWindo_0 ; "Microsoft Windows Millennium Edition "
.text:0040EA2B                 movzx   ebx, word ptr ds:aMicrosoftWindo_0+24h ; " "
.text:0040EA32                 mov     ecx, 9
.text:0040EA37                 rep movsd
.text:0040EA39                 mov     [edi], bx
.text:0040EA3C                 jmp     loc_40E600
.text:0040EA41 ; ---------------------------------------------------------------------------
.text:0040EA41
.text:0040EA41 loc_40EA41:                             ; CODE XREF: .text:0040EA17↑j
.text:0040EA41                 mov     dword ptr [ebx], 7263694Dh
.text:0040EA47                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040EA4E                 mov     dword ptr [ebx+8], 69572074h
.text:0040EA55                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040EA5C                 mov     dword ptr [ebx+10h], 38392073h
.text:0040EA63                 mov     byte ptr [ebx+14h], 0
.text:0040EA67                 mov     edx, ds:VersionInformation.dwBuildNumber
.text:0040EA6D                 lea     edi, [edx-7CFh]
.text:0040EA73                 cmp     edi, 0B7h ; '·'
.text:0040EA79                 jbe     short loc_40EAA3
.text:0040EA7B                 cmp     edx, 886h
.text:0040EA81                 ja      short loc_40EA91
.text:0040EA83
.text:0040EA83 loc_40EA83:                             ; CODE XREF: .text:0040EAA1↓j
.text:0040EA83                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:0040EA89                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0040EA8F                 jmp     short loc_40EA19
.text:0040EA91 ; ---------------------------------------------------------------------------
.text:0040EA91
.text:0040EA91 loc_40EA91:                             ; CODE XREF: .text:0040EA81↑j
.text:0040EA91                 mov     dword ptr [esp+4], offset loc_40E516
.text:0040EA99
.text:0040EA99 loc_40EA99:                             ; CODE XREF: .text:0040EAAB↓j
.text:0040EA99                 mov     [esp], ebx
.text:0040EA9C                 call    strcat
.text:0040EAA1                 jmp     short loc_40EA83
.text:0040EAA3 ; ---------------------------------------------------------------------------
.text:0040EAA3
.text:0040EAA3 loc_40EAA3:                             ; CODE XREF: .text:0040EA79↑j
.text:0040EAA3                 mov     dword ptr [esp+4], 40E51Ah
.text:0040EAAB                 jmp     short loc_40EA99
.text:0040EAAB ; ---------------------------------------------------------------------------
.text:0040EAAD                 align 10h
.text:0040EAB0
.text:0040EAB0 loc_40EAB0:                             ; CODE XREF: .text:0040E9F9↑j
.text:0040EAB0                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0040EAB6                 test    edx, edx
.text:0040EAB8                 jnz     loc_40EA05
.text:0040EABE                 mov     dword ptr [ebx], 7263694Dh
.text:0040EAC4                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040EACB                 mov     dword ptr [ebx+8], 69572074h
.text:0040EAD2                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040EAD9                 mov     dword ptr [ebx+10h], 35392073h
.text:0040EAE0                 mov     byte ptr [ebx+14h], 0
.text:0040EAE4                 mov     edx, ds:VersionInformation.dwBuildNumber
.text:0040EAEA                 lea     ecx, [edx-3B7h]
.text:0040EAF0                 cmp     ecx, 81h
.text:0040EAF6                 jbe     short loc_40EB1D
.text:0040EAF8                 cmp     edx, 438h
.text:0040EAFE                 ja      short loc_40EB0B
.text:0040EB00
.text:0040EB00 loc_40EB00:                             ; CODE XREF: .text:0040EB1B↓j
.text:0040EB00                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:0040EB06                 jmp     loc_40E9FF
.text:0040EB0B ; ---------------------------------------------------------------------------
.text:0040EB0B
.text:0040EB0B loc_40EB0B:                             ; CODE XREF: .text:0040EAFE↑j
.text:0040EB0B                 mov     dword ptr [esp+4], offset loc_40E51F
.text:0040EB13
.text:0040EB13 loc_40EB13:                             ; CODE XREF: .text:0040EB25↓j
.text:0040EB13                 mov     [esp], ebx
.text:0040EB16                 call    strcat
.text:0040EB1B                 jmp     short loc_40EB00
.text:0040EB1D ; ---------------------------------------------------------------------------
.text:0040EB1D
.text:0040EB1D loc_40EB1D:                             ; CODE XREF: .text:0040EAF6↑j
.text:0040EB1D                 mov     dword ptr [esp+4], 40E51Ah
.text:0040EB25                 jmp     short loc_40EB13
.text:0040EB25 ; ---------------------------------------------------------------------------
.text:0040EB27                 align 10h
.text:0040EB30
.text:0040EB30 ; =============== S U B R O U T I N E =======================================
.text:0040EB30
.text:0040EB30
.text:0040EB30 sub_40EB30      proc near               ; CODE XREF: .text:0040D6BE↑p
.text:0040EB30                                         ; sub_40DB40+12A↑p
.text:0040EB30                 sub     esp, 0Ch
.text:0040EB33                 call    sub_40EC40
.text:0040EB38                 mov     eax, ds:dword_41E730
.text:0040EB3D                 add     esp, 0Ch
.text:0040EB40                 retn
.text:0040EB40 sub_40EB30      endp
.text:0040EB40
.text:0040EB41 ; ---------------------------------------------------------------------------
.text:0040EB41                 jmp     short loc_40EB50
.text:0040EB41 ; ---------------------------------------------------------------------------
.text:0040EB43                 align 10h
.text:0040EB50
.text:0040EB50 loc_40EB50:                             ; CODE XREF: .text:0040EB41↑j
.text:0040EB50                 sub     esp, 0Ch
.text:0040EB53                 call    sub_40EC40
.text:0040EB58                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0040EB5D                 add     esp, 0Ch
.text:0040EB60                 retn
.text:0040EB61 ; ---------------------------------------------------------------------------
.text:0040EB61                 jmp     short loc_40EB70
.text:0040EB61 ; ---------------------------------------------------------------------------
.text:0040EB63                 align 10h
.text:0040EB70
.text:0040EB70 loc_40EB70:                             ; CODE XREF: .text:0040EB61↑j
.text:0040EB70                 sub     esp, 0Ch
.text:0040EB73                 call    sub_40EC40
.text:0040EB78                 mov     eax, ds:VersionInformation.dwMajorVersion
.text:0040EB7D                 add     esp, 0Ch
.text:0040EB80                 retn
.text:0040EB81 ; ---------------------------------------------------------------------------
.text:0040EB81                 jmp     short loc_40EB90
.text:0040EB81 ; ---------------------------------------------------------------------------
.text:0040EB83                 align 10h
.text:0040EB90
.text:0040EB90 loc_40EB90:                             ; CODE XREF: .text:0040EB81↑j
.text:0040EB90                 sub     esp, 0Ch
.text:0040EB93                 call    sub_40EC40
.text:0040EB98                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0040EB9D                 add     esp, 0Ch
.text:0040EBA0                 retn
.text:0040EBA1 ; ---------------------------------------------------------------------------
.text:0040EBA1                 jmp     short loc_40EBB0
.text:0040EBA1 ; ---------------------------------------------------------------------------
.text:0040EBA3                 align 10h
.text:0040EBB0
.text:0040EBB0 loc_40EBB0:                             ; CODE XREF: .text:0040EBA1↑j
.text:0040EBB0                 sub     esp, 0Ch
.text:0040EBB3                 call    GetVersion
.text:0040EBB8                 shr     eax, 10h
.text:0040EBBB                 add     esp, 0Ch
.text:0040EBBE                 retn
.text:0040EBBE ; ---------------------------------------------------------------------------
.text:0040EBBF                 align 10h
.text:0040EBC0                 sub     esp, 0Ch
.text:0040EBC3                 call    sub_40EC40
.text:0040EBC8                 xor     eax, eax
.text:0040EBCA                 cmp     ds:VersionInformation.dwPlatformId, 2
.text:0040EBD1                 setz    al
.text:0040EBD4                 add     esp, 0Ch
.text:0040EBD7                 retn
.text:0040EBD7 ; ---------------------------------------------------------------------------
.text:0040EBD8                 align 10h
.text:0040EBE0
.text:0040EBE0 ; =============== S U B R O U T I N E =======================================
.text:0040EBE0
.text:0040EBE0
.text:0040EBE0 sub_40EBE0      proc near               ; CODE XREF: .text:loc_40D050↑p
.text:0040EBE0                                         ; .text:loc_40D6A4↑p ...
.text:0040EBE0                 sub     esp, 0Ch
.text:0040EBE3                 call    sub_40EC40
.text:0040EBE8                 xor     eax, eax
.text:0040EBEA                 cmp     ds:VersionInformation.dwPlatformId, 1
.text:0040EBF1                 setz    al
.text:0040EBF4                 add     esp, 0Ch
.text:0040EBF7                 retn
.text:0040EBF7 sub_40EBE0      endp
.text:0040EBF7
.text:0040EBF7 ; ---------------------------------------------------------------------------
.text:0040EBF8                 align 10h
.text:0040EC00                 sub     esp, 0Ch
.text:0040EC03                 call    sub_40EC40
.text:0040EC08                 xor     eax, eax
.text:0040EC0A                 cmp     ds:VersionInformation.dwPlatformId, 0
.text:0040EC11                 setz    al
.text:0040EC14                 add     esp, 0Ch
.text:0040EC17                 retn
.text:0040EC17 ; ---------------------------------------------------------------------------
.text:0040EC18                 align 10h
.text:0040EC20                 sub     esp, 0Ch
.text:0040EC23                 call    sub_40EC40
.text:0040EC28                 xor     eax, eax
.text:0040EC2A                 cmp     ds:VersionInformation.dwPlatformId, 3
.text:0040EC31                 setz    al
.text:0040EC34                 add     esp, 0Ch
.text:0040EC37                 retn
.text:0040EC37 ; ---------------------------------------------------------------------------
.text:0040EC38                 align 10h
.text:0040EC40
.text:0040EC40 ; =============== S U B R O U T I N E =======================================
.text:0040EC40
.text:0040EC40
.text:0040EC40 sub_40EC40      proc near               ; CODE XREF: .text:0040E540↑p
.text:0040EC40                                         ; sub_40EB30+3↑p ...
.text:0040EC40
.text:0040EC40 lpVersionInformation= dword ptr -0BCh
.text:0040EC40 VersionInformation= _OSVERSIONINFOA ptr -0ACh
.text:0040EC40
.text:0040EC40                 sub     esp, 0BCh
.text:0040EC46                 mov     edx, ds:dword_41E7E0
.text:0040EC4C                 test    edx, edx
.text:0040EC4E                 jz      short loc_40EC60
.text:0040EC50
.text:0040EC50 loc_40EC50:                             ; CODE XREF: sub_40EC40+7B↓j
.text:0040EC50                 mov     edx, 1
.text:0040EC55
.text:0040EC55 loc_40EC55:                             ; CODE XREF: sub_40EC40+217↓j
.text:0040EC55                 mov     eax, edx
.text:0040EC57                 add     esp, 0BCh
.text:0040EC5D                 retn
.text:0040EC5D ; ---------------------------------------------------------------------------
.text:0040EC5E                 align 10h
.text:0040EC60
.text:0040EC60 loc_40EC60:                             ; CODE XREF: sub_40EC40+E↑j
.text:0040EC60                 mov     [esp+0BCh+lpVersionInformation], offset VersionInformation ; lpVersionInformation
.text:0040EC67                 mov     edx, 9Ch ; 'œ'
.text:0040EC6C                 mov     ds:VersionInformation.dwOSVersionInfoSize, edx
.text:0040EC72                 call    GetVersionExA
.text:0040EC77                 sub     esp, 4
.text:0040EC7A                 test    eax, eax
.text:0040EC7C                 jz      loc_40EE34
.text:0040EC82
.text:0040EC82 loc_40EC82:                             ; CODE XREF: sub_40EC40+245↓j
.text:0040EC82                 movzx   edx, word ptr ds:VersionInformation.dwBuildNumber
.text:0040EC89                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0040EC8E                 cmp     eax, 1
.text:0040EC91                 mov     ds:VersionInformation.dwBuildNumber, edx
.text:0040EC97                 jz      loc_40ED80
.text:0040EC9D                 cmp     eax, 1
.text:0040ECA0                 jb      loc_40ED70
.text:0040ECA6                 cmp     eax, 2
.text:0040ECA9                 jz      short loc_40ECCA
.text:0040ECAB                 cmp     eax, 3
.text:0040ECAE                 jz      short loc_40ECBD
.text:0040ECB0
.text:0040ECB0 loc_40ECB0:                             ; CODE XREF: sub_40EC40+88↓j
.text:0040ECB0                                         ; sub_40EC40+C0↓j ...
.text:0040ECB0                 mov     edx, 1
.text:0040ECB5                 mov     ds:dword_41E7E0, edx
.text:0040ECBB                 jmp     short loc_40EC50
.text:0040ECBD ; ---------------------------------------------------------------------------
.text:0040ECBD
.text:0040ECBD loc_40ECBD:                             ; CODE XREF: sub_40EC40+6E↑j
.text:0040ECBD                 mov     ecx, 17h
.text:0040ECC2
.text:0040ECC2 loc_40ECC2:                             ; CODE XREF: sub_40EC40+1A7↓j
.text:0040ECC2                 mov     ds:dword_41E730, ecx
.text:0040ECC8                 jmp     short loc_40ECB0
.text:0040ECCA ; ---------------------------------------------------------------------------
.text:0040ECCA
.text:0040ECCA loc_40ECCA:                             ; CODE XREF: sub_40EC40+69↑j
.text:0040ECCA                 mov     eax, ds:VersionInformation.dwMajorVersion
.text:0040ECCF                 cmp     eax, 3
.text:0040ECD2                 jz      short loc_40ED4B
.text:0040ECD4                 cmp     eax, 4
.text:0040ECD7                 jz      short loc_40ED3A
.text:0040ECD9
.text:0040ECD9 loc_40ECD9:                             ; CODE XREF: sub_40EC40+102↓j
.text:0040ECD9                 cmp     eax, 4
.text:0040ECDC                 ja      short loc_40ED02
.text:0040ECDE                 mov     ecx, ds:VersionInformation.dwMinorVersion
.text:0040ECE4                 test    ecx, ecx
.text:0040ECE6                 jnz     short loc_40ED02
.text:0040ECE8                 mov     edx, 1Eh
.text:0040ECED
.text:0040ECED loc_40ECED:                             ; CODE XREF: sub_40EC40+DF↓j
.text:0040ECED                 mov     ds:dword_41E730, edx
.text:0040ECF3
.text:0040ECF3 loc_40ECF3:                             ; CODE XREF: sub_40EC40+C5↓j
.text:0040ECF3                                         ; sub_40EC40+D8↓j ...
.text:0040ECF3                 movzx   ecx, ds:word_41E7D4
.text:0040ECFA                 add     ds:dword_41E730, ecx
.text:0040ED00                 jmp     short loc_40ECB0
.text:0040ED02 ; ---------------------------------------------------------------------------
.text:0040ED02
.text:0040ED02 loc_40ED02:                             ; CODE XREF: sub_40EC40+9C↑j
.text:0040ED02                                         ; sub_40EC40+A6↑j
.text:0040ED02                 cmp     eax, 5
.text:0040ED05                 jnz     short loc_40ECF3
.text:0040ED07                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0040ED0C                 cmp     eax, 2
.text:0040ED0F                 jz      short loc_40ED2E
.text:0040ED11                 cmp     eax, 1
.text:0040ED14                 jz      short loc_40ED21
.text:0040ED16                 test    eax, eax
.text:0040ED18                 jnz     short loc_40ECF3
.text:0040ED1A                 mov     edx, 32h ; '2'
.text:0040ED1F                 jmp     short loc_40ECED
.text:0040ED21 ; ---------------------------------------------------------------------------
.text:0040ED21
.text:0040ED21 loc_40ED21:                             ; CODE XREF: sub_40EC40+D4↑j
.text:0040ED21                 mov     ecx, 3Ch ; '<'
.text:0040ED26
.text:0040ED26 loc_40ED26:                             ; CODE XREF: sub_40EC40+122↓j
.text:0040ED26                 mov     ds:dword_41E730, ecx
.text:0040ED2C                 jmp     short loc_40ECF3
.text:0040ED2E ; ---------------------------------------------------------------------------
.text:0040ED2E
.text:0040ED2E loc_40ED2E:                             ; CODE XREF: sub_40EC40+CF↑j
.text:0040ED2E                 mov     eax, 46h ; 'F'
.text:0040ED33
.text:0040ED33 loc_40ED33:                             ; CODE XREF: sub_40EC40+109↓j
.text:0040ED33                                         ; sub_40EC40+129↓j
.text:0040ED33                 mov     ds:dword_41E730, eax
.text:0040ED38                 jmp     short loc_40ECF3
.text:0040ED3A ; ---------------------------------------------------------------------------
.text:0040ED3A
.text:0040ED3A loc_40ED3A:                             ; CODE XREF: sub_40EC40+97↑j
.text:0040ED3A                 mov     ecx, ds:VersionInformation.dwMinorVersion
.text:0040ED40                 test    ecx, ecx
.text:0040ED42                 jnz     short loc_40ECD9
.text:0040ED44                 mov     eax, 28h ; '('
.text:0040ED49                 jmp     short loc_40ED33
.text:0040ED4B ; ---------------------------------------------------------------------------
.text:0040ED4B
.text:0040ED4B loc_40ED4B:                             ; CODE XREF: sub_40EC40+92↑j
.text:0040ED4B                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0040ED50                 cmp     eax, 33h ; '3'
.text:0040ED53                 jz      short loc_40ED64
.text:0040ED55                 cmp     eax, 5
.text:0040ED58                 setz    cl
.text:0040ED5B                 movzx   edx, cl
.text:0040ED5E                 lea     ecx, [edx+edx*4+1Eh]
.text:0040ED62                 jmp     short loc_40ED26
.text:0040ED64 ; ---------------------------------------------------------------------------
.text:0040ED64
.text:0040ED64 loc_40ED64:                             ; CODE XREF: sub_40EC40+113↑j
.text:0040ED64                 mov     eax, 24h ; '$'
.text:0040ED69                 jmp     short loc_40ED33
.text:0040ED69 ; ---------------------------------------------------------------------------
.text:0040ED6B                 align 10h
.text:0040ED70
.text:0040ED70 loc_40ED70:                             ; CODE XREF: sub_40EC40+60↑j
.text:0040ED70                 mov     edx, 2
.text:0040ED75                 mov     ds:dword_41E730, edx
.text:0040ED7B                 jmp     loc_40ECB0
.text:0040ED80 ; ---------------------------------------------------------------------------
.text:0040ED80
.text:0040ED80 loc_40ED80:                             ; CODE XREF: sub_40EC40+57↑j
.text:0040ED80                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:0040ED86                 cmp     ecx, 4
.text:0040ED89                 jnz     loc_40ECB0
.text:0040ED8F                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0040ED94                 test    eax, eax
.text:0040ED96                 jnz     short loc_40EDBA
.text:0040ED98                 mov     eax, 0Ah
.text:0040ED9D                 mov     ds:dword_41E730, eax
.text:0040EDA2                 lea     eax, [edx-3B7h]
.text:0040EDA8                 cmp     eax, 81h
.text:0040EDAD                 ja      short loc_40EE25
.text:0040EDAF                 mov     edx, 0Bh
.text:0040EDB4
.text:0040EDB4 loc_40EDB4:                             ; CODE XREF: sub_40EC40+1F2↓j
.text:0040EDB4                 mov     ds:dword_41E730, edx
.text:0040EDBA
.text:0040EDBA loc_40EDBA:                             ; CODE XREF: sub_40EC40+156↑j
.text:0040EDBA                                         ; sub_40EC40+1EB↓j
.text:0040EDBA                 cmp     ecx, 4
.text:0040EDBD                 jnz     loc_40ECB0
.text:0040EDC3                 cmp     ds:VersionInformation.dwMinorVersion, 0Ah
.text:0040EDCA                 jz      short loc_40EDEC
.text:0040EDCC
.text:0040EDCC loc_40EDCC:                             ; CODE XREF: sub_40EC40+1D4↓j
.text:0040EDCC                                         ; sub_40EC40+1DC↓j
.text:0040EDCC                 cmp     ecx, 4
.text:0040EDCF                 jnz     loc_40ECB0
.text:0040EDD5                 cmp     ds:VersionInformation.dwMinorVersion, 5Ah ; 'Z'
.text:0040EDDC                 jnz     loc_40ECB0
.text:0040EDE2                 mov     ecx, 12h
.text:0040EDE7                 jmp     loc_40ECC2
.text:0040EDEC ; ---------------------------------------------------------------------------
.text:0040EDEC
.text:0040EDEC loc_40EDEC:                             ; CODE XREF: sub_40EC40+18A↑j
.text:0040EDEC                 mov     edx, ds:VersionInformation.dwBuildNumber
.text:0040EDF2                 mov     eax, 0Eh
.text:0040EDF7                 mov     ds:dword_41E730, eax
.text:0040EDFC                 lea     eax, [edx-7CFh]
.text:0040EE02                 cmp     eax, 0B7h ; '·'
.text:0040EE07                 ja      short loc_40EE16
.text:0040EE09                 mov     edx, 0Fh
.text:0040EE0E
.text:0040EE0E loc_40EE0E:                             ; CODE XREF: sub_40EC40+1E3↓j
.text:0040EE0E                 mov     ds:dword_41E730, edx
.text:0040EE14                 jmp     short loc_40EDCC
.text:0040EE16 ; ---------------------------------------------------------------------------
.text:0040EE16
.text:0040EE16 loc_40EE16:                             ; CODE XREF: sub_40EC40+1C7↑j
.text:0040EE16                 cmp     edx, 886h
.text:0040EE1C                 jbe     short loc_40EDCC
.text:0040EE1E                 mov     edx, 10h
.text:0040EE23                 jmp     short loc_40EE0E
.text:0040EE25 ; ---------------------------------------------------------------------------
.text:0040EE25
.text:0040EE25 loc_40EE25:                             ; CODE XREF: sub_40EC40+16D↑j
.text:0040EE25                 cmp     edx, 438h
.text:0040EE2B                 jbe     short loc_40EDBA
.text:0040EE2D                 mov     edx, 0Ch
.text:0040EE32                 jmp     short loc_40EDB4
.text:0040EE34 ; ---------------------------------------------------------------------------
.text:0040EE34
.text:0040EE34 loc_40EE34:                             ; CODE XREF: sub_40EC40+3C↑j
.text:0040EE34                 mov     [esp+0BCh+VersionInformation.dwOSVersionInfoSize], 94h ; '”'
.text:0040EE3C                 xor     edx, edx
.text:0040EE3E                 lea     ecx, [esp+0BCh+VersionInformation]
.text:0040EE42                 mov     dword_41D0C0, edx
.text:0040EE48                 mov     [esp+0BCh+lpVersionInformation], ecx ; lpVersionInformation
.text:0040EE4B                 call    GetVersionExA
.text:0040EE50                 sub     esp, 4
.text:0040EE53                 xor     edx, edx
.text:0040EE55                 test    eax, eax
.text:0040EE57                 jz      loc_40EC55
.text:0040EE5D                 mov     edx, [esp+0BCh+VersionInformation.dwMajorVersion]
.text:0040EE61                 mov     ecx, [esp+0BCh+VersionInformation.dwMinorVersion]
.text:0040EE65                 mov     ds:VersionInformation.dwMajorVersion, edx
.text:0040EE6B                 mov     edx, [esp+0BCh+VersionInformation.dwBuildNumber]
.text:0040EE6F                 mov     ds:VersionInformation.dwMinorVersion, ecx
.text:0040EE75                 mov     ecx, [esp+0BCh+VersionInformation.dwPlatformId]
.text:0040EE79                 mov     ds:VersionInformation.dwBuildNumber, edx
.text:0040EE7F                 mov     ds:VersionInformation.dwPlatformId, ecx
.text:0040EE85                 jmp     loc_40EC82
.text:0040EE85 sub_40EC40      endp
.text:0040EE85
.text:0040EE85 ; ---------------------------------------------------------------------------
.text:0040EE8A                 align 10h
.text:0040EE90 aNotset         db 'notset',0           ; DATA XREF: .data:off_41D0D0↓o
.text:0040EE90                                         ; .data:off_41D0D4↓o
.text:0040EE97 ; ---------------------------------------------------------------------------
.text:0040EE97
.text:0040EE97 loc_40EE97:                             ; DATA XREF: .text:loc_40EF35↓o
.text:0040EE97                 jb      short loc_40EF10
.text:0040EE99                 add     [eax], ah
.text:0040EE9B                 or      [eax], eax
.text:0040EE9D
.text:0040EE9D loc_40EE9D:                             ; DATA XREF: .text:0040EF88↓o
.text:0040EE9D                                         ; .text:0040EFEE↓o ...
.text:0040EE9D                 add     [eax], ah
.text:0040EE9F                 and     eax, 64252064h
.text:0040EEA4                 and     [eax], al
.text:0040EEA6                 lea     esi, [esi+0]
.text:0040EEA9                 lea     edi, [edi+0]
.text:0040EEB0                 push    ebp
.text:0040EEB1                 push    edi
.text:0040EEB2                 push    esi
.text:0040EEB3                 push    ebx
.text:0040EEB4                 sub     esp, 14Ch
.text:0040EEBA                 mov     edx, off_41D0D0 ; "notset"
.text:0040EEC0                 mov     edi, [esp+164h]
.text:0040EEC7                 mov     ebp, [esp+168h]
.text:0040EECE                 mov     [esp+4], edx
.text:0040EED2                 mov     edx, off_41D0D4 ; "notset"
.text:0040EED8                 mov     [esp], edx
.text:0040EEDB                 call    strcmp
.text:0040EEE0                 test    eax, eax
.text:0040EEE2                 jz      loc_40F2D0
.text:0040EEE8
.text:0040EEE8 loc_40EEE8:                             ; CODE XREF: .text:0040F31C↓j
.text:0040EEE8                 lea     ebx, [esp+20h]
.text:0040EEEC                 lea     esi, [esi+0]
.text:0040EEF0
.text:0040EEF0 loc_40EEF0:                             ; CODE XREF: .text:0040EF26↓j
.text:0040EEF0                 mov     [esp+4], ebx
.text:0040EEF4                 mov     ecx, off_41D0D4 ; "notset"
.text:0040EEFA                 mov     [esp], ecx
.text:0040EEFD                 call    loc_40DBE0
.text:0040EF02                 test    eax, eax
.text:0040EF04                 jns     short loc_40EF35
.text:0040EF06                 mov     eax, off_41D0D4 ; "notset"
.text:0040EF0B                 cmp     byte ptr [eax], 0
.text:0040EF0E                 jz      short loc_40EF28
.text:0040EF10
.text:0040EF10 loc_40EF10:                             ; CODE XREF: .text:loc_40EE97↑j
.text:0040EF10                 mov     dword ptr [esp+4], 0
.text:0040EF18                 mov     [esp], eax
.text:0040EF1B                 call    strchr
.text:0040EF20                 inc     eax
.text:0040EF21                 mov     off_41D0D4, eax ; "notset"
.text:0040EF26                 jmp     short loc_40EEF0
.text:0040EF28 ; ---------------------------------------------------------------------------
.text:0040EF28
.text:0040EF28 loc_40EF28:                             ; CODE XREF: .text:0040EF0E↑j
.text:0040EF28                 xor     eax, eax
.text:0040EF2A
.text:0040EF2A loc_40EF2A:                             ; CODE XREF: .text:0040F0EC↓j
.text:0040EF2A                 add     esp, 14Ch
.text:0040EF30                 pop     ebx
.text:0040EF31                 pop     esi
.text:0040EF32                 pop     edi
.text:0040EF33                 pop     ebp
.text:0040EF34                 retn
.text:0040EF35 ; ---------------------------------------------------------------------------
.text:0040EF35
.text:0040EF35 loc_40EF35:                             ; CODE XREF: .text:0040EF04↑j
.text:0040EF35                 mov     dword ptr [edi+0Ch], offset loc_40EE97
.text:0040EF3C                 lea     ecx, [esp+0D6h]
.text:0040EF43                 lea     edx, [esp+6Ch]
.text:0040EF47                 mov     [edi+4], ecx
.text:0040EF4A                 lea     ebx, [esp+7Ch]
.text:0040EF4E                 mov     [edi+8], edx
.text:0040EF51                 mov     [edi], ebx
.text:0040EF53                 mov     [esp], ebp
.text:0040EF56                 mov     [esp+4], edi
.text:0040EF5A                 call    ___addmntentstr
.text:0040EF5F                 mov     [esp], ebp
.text:0040EF62                 mov     dword ptr [esp+4], 40EE9Ah
.text:0040EF6A                 call    strspn
.text:0040EF6F                 mov     dword ptr [esp+4], 0
.text:0040EF77                 mov     ebx, off_41D0D4 ; "notset"
.text:0040EF7D                 lea     esi, [eax+ebp]
.text:0040EF80                 mov     [esp+1Ch], esi
.text:0040EF84                 lea     ebp, [esp+1Ch]
.text:0040EF88                 mov     esi, offset loc_40EE9D
.text:0040EF8D                 mov     [esp], ebx
.text:0040EF90                 call    strchr
.text:0040EF95                 mov     dword ptr [esp+4], 40EE9Ah
.text:0040EF9D                 inc     eax
.text:0040EF9E                 mov     off_41D0D4, eax ; "notset"
.text:0040EFA3                 mov     [esp], ebp
.text:0040EFA6                 call    sub_40FC10
.text:0040EFAB                 test    eax, eax
.text:0040EFAD                 mov     ebx, eax
.text:0040EFAF                 jz      short loc_40EFD8
.text:0040EFB1                 mov     edx, eax
.text:0040EFB3                 mov     ecx, eax
.text:0040EFB5                 lea     esi, [esi+0]
.text:0040EFB9                 lea     edi, [edi+0]
.text:0040EFC0
.text:0040EFC0 loc_40EFC0:                             ; CODE XREF: .text:0040EFD6↓j
.text:0040EFC0                 movzx   eax, byte ptr [edx]
.text:0040EFC3                 cmp     al, 5Ch ; '\'
.text:0040EFC5                 jz      loc_40F274
.text:0040EFCB
.text:0040EFCB loc_40EFCB:                             ; CODE XREF: .text:0040F27C↓j
.text:0040EFCB                                         ; .text:0040F28A↓j ...
.text:0040EFCB                 mov     [ecx], al
.text:0040EFCD
.text:0040EFCD loc_40EFCD:                             ; CODE XREF: .text:0040F29E↓j
.text:0040EFCD                 inc     ecx
.text:0040EFCE
.text:0040EFCE loc_40EFCE:                             ; CODE XREF: .text:0040F2B6↓j
.text:0040EFCE                 movzx   eax, byte ptr [edx]
.text:0040EFD1                 mov     esi, ebx
.text:0040EFD3                 inc     edx
.text:0040EFD4                 test    al, al
.text:0040EFD6                 jnz     short loc_40EFC0
.text:0040EFD8
.text:0040EFD8 loc_40EFD8:                             ; CODE XREF: .text:0040EFAF↑j
.text:0040EFD8                 mov     [edi], esi
.text:0040EFDA                 mov     eax, [esp+1Ch]
.text:0040EFDE                 test    eax, eax
.text:0040EFE0                 jnz     loc_40F25B
.text:0040EFE6
.text:0040EFE6 loc_40EFE6:                             ; CODE XREF: .text:0040F26F↓j
.text:0040EFE6                 mov     dword ptr [esp+4], 40EE9Ah
.text:0040EFEE                 mov     esi, offset loc_40EE9D
.text:0040EFF3                 mov     [esp], ebp
.text:0040EFF6                 call    sub_40FC10
.text:0040EFFB                 test    eax, eax
.text:0040EFFD                 mov     ebx, eax
.text:0040EFFF                 jz      short loc_40F028
.text:0040F001                 mov     edx, eax
.text:0040F003                 mov     ecx, eax
.text:0040F005                 lea     esi, [esi+0]
.text:0040F009                 lea     edi, [edi+0]
.text:0040F010
.text:0040F010 loc_40F010:                             ; CODE XREF: .text:0040F026↓j
.text:0040F010                 movzx   eax, byte ptr [edx]
.text:0040F013                 cmp     al, 5Ch ; '\'
.text:0040F015                 jz      loc_40F203
.text:0040F01B
.text:0040F01B loc_40F01B:                             ; CODE XREF: .text:0040F20B↓j
.text:0040F01B                                         ; .text:0040F219↓j ...
.text:0040F01B                 mov     [ecx], al
.text:0040F01D
.text:0040F01D loc_40F01D:                             ; CODE XREF: .text:0040F22D↓j
.text:0040F01D                 inc     ecx
.text:0040F01E
.text:0040F01E loc_40F01E:                             ; CODE XREF: .text:0040F245↓j
.text:0040F01E                 movzx   eax, byte ptr [edx]
.text:0040F021                 mov     esi, ebx
.text:0040F023                 inc     edx
.text:0040F024                 test    al, al
.text:0040F026                 jnz     short loc_40F010
.text:0040F028
.text:0040F028 loc_40F028:                             ; CODE XREF: .text:0040EFFF↑j
.text:0040F028                 mov     [edi+4], esi
.text:0040F02B                 mov     eax, [esp+1Ch]
.text:0040F02F                 test    eax, eax
.text:0040F031                 jnz     loc_40F1EA
.text:0040F037
.text:0040F037 loc_40F037:                             ; CODE XREF: .text:0040F1FE↓j
.text:0040F037                 mov     dword ptr [esp+4], 40EE9Ah
.text:0040F03F                 mov     esi, offset loc_40EE9D
.text:0040F044                 mov     [esp], ebp
.text:0040F047                 call    sub_40FC10
.text:0040F04C                 test    eax, eax
.text:0040F04E                 mov     ebx, eax
.text:0040F050                 jz      short loc_40F078
.text:0040F052                 mov     edx, eax
.text:0040F054                 mov     ecx, eax
.text:0040F056                 lea     esi, [esi+0]
.text:0040F059                 lea     edi, [edi+0]
.text:0040F060
.text:0040F060 loc_40F060:                             ; CODE XREF: .text:0040F076↓j
.text:0040F060                 movzx   eax, byte ptr [edx]
.text:0040F063                 cmp     al, 5Ch ; '\'
.text:0040F065                 jz      loc_40F192
.text:0040F06B
.text:0040F06B loc_40F06B:                             ; CODE XREF: .text:0040F19A↓j
.text:0040F06B                                         ; .text:0040F1A8↓j ...
.text:0040F06B                 mov     [ecx], al
.text:0040F06D
.text:0040F06D loc_40F06D:                             ; CODE XREF: .text:0040F1BC↓j
.text:0040F06D                 inc     ecx
.text:0040F06E
.text:0040F06E loc_40F06E:                             ; CODE XREF: .text:0040F1D4↓j
.text:0040F06E                 movzx   eax, byte ptr [edx]
.text:0040F071                 mov     esi, ebx
.text:0040F073                 inc     edx
.text:0040F074                 test    al, al
.text:0040F076                 jnz     short loc_40F060
.text:0040F078
.text:0040F078 loc_40F078:                             ; CODE XREF: .text:0040F050↑j
.text:0040F078                 mov     [edi+8], esi
.text:0040F07B                 mov     eax, [esp+1Ch]
.text:0040F07F                 test    eax, eax
.text:0040F081                 jnz     loc_40F179
.text:0040F087
.text:0040F087 loc_40F087:                             ; CODE XREF: .text:0040F18D↓j
.text:0040F087                 mov     dword ptr [esp+4], 40EE9Ah
.text:0040F08F                 mov     esi, offset loc_40EE9D
.text:0040F094                 mov     [esp], ebp
.text:0040F097                 call    sub_40FC10
.text:0040F09C                 test    eax, eax
.text:0040F09E                 mov     ebx, eax
.text:0040F0A0                 jz      short loc_40F0C4
.text:0040F0A2                 mov     edx, eax
.text:0040F0A4                 mov     ecx, eax
.text:0040F0A6                 lea     esi, [esi+0]
.text:0040F0A9                 lea     edi, [edi+0]
.text:0040F0B0
.text:0040F0B0 loc_40F0B0:                             ; CODE XREF: .text:0040F0C2↓j
.text:0040F0B0                 movzx   eax, byte ptr [edx]
.text:0040F0B3                 cmp     al, 5Ch ; '\'
.text:0040F0B5                 jz      short loc_40F125
.text:0040F0B7
.text:0040F0B7 loc_40F0B7:                             ; CODE XREF: .text:0040F12D↓j
.text:0040F0B7                                         ; .text:0040F137↓j ...
.text:0040F0B7                 mov     [ecx], al
.text:0040F0B9
.text:0040F0B9 loc_40F0B9:                             ; CODE XREF: .text:0040F14B↓j
.text:0040F0B9                 inc     ecx
.text:0040F0BA
.text:0040F0BA loc_40F0BA:                             ; CODE XREF: .text:0040F163↓j
.text:0040F0BA                 movzx   eax, byte ptr [edx]
.text:0040F0BD                 mov     esi, ebx
.text:0040F0BF                 inc     edx
.text:0040F0C0                 test    al, al
.text:0040F0C2                 jnz     short loc_40F0B0
.text:0040F0C4
.text:0040F0C4 loc_40F0C4:                             ; CODE XREF: .text:0040F0A0↑j
.text:0040F0C4                 mov     [edi+0Ch], esi
.text:0040F0C7                 xor     eax, eax
.text:0040F0C9                 mov     edx, [esp+1Ch]
.text:0040F0CD                 test    edx, edx
.text:0040F0CF                 jnz     short loc_40F105
.text:0040F0D1
.text:0040F0D1 loc_40F0D1:                             ; CODE XREF: .text:0040F123↓j
.text:0040F0D1                 cmp     eax, 1
.text:0040F0D4                 jz      short loc_40F0FC
.text:0040F0D6                 cmp     eax, 1
.text:0040F0D9                 jle     short loc_40F0F1
.text:0040F0DB
.text:0040F0DB loc_40F0DB:                             ; CODE XREF: .text:0040F0F3↓j
.text:0040F0DB                                         ; .text:0040F103↓j
.text:0040F0DB                 mov     edx, [esp+160h]
.text:0040F0E2                 mov     [esp], edx
.text:0040F0E5                 call    sub_40FBB0
.text:0040F0EA                 mov     eax, edi
.text:0040F0EC                 jmp     loc_40EF2A
.text:0040F0F1 ; ---------------------------------------------------------------------------
.text:0040F0F1
.text:0040F0F1 loc_40F0F1:                             ; CODE XREF: .text:0040F0D9↑j
.text:0040F0F1                 test    eax, eax
.text:0040F0F3                 jnz     short loc_40F0DB
.text:0040F0F5                 mov     dword ptr [edi+10h], 0
.text:0040F0FC
.text:0040F0FC loc_40F0FC:                             ; CODE XREF: .text:0040F0D4↑j
.text:0040F0FC                 mov     dword ptr [edi+14h], 0
.text:0040F103                 jmp     short loc_40F0DB
.text:0040F105 ; ---------------------------------------------------------------------------
.text:0040F105
.text:0040F105 loc_40F105:                             ; CODE XREF: .text:0040F0CF↑j
.text:0040F105                 mov     dword ptr [esp+4], 40EE9Eh
.text:0040F10D                 lea     esi, [edi+14h]
.text:0040F110                 lea     ebp, [edi+10h]
.text:0040F113                 mov     [esp+0Ch], esi
.text:0040F117                 mov     [esp+8], ebp
.text:0040F11B                 mov     [esp], edx
.text:0040F11E                 call    sscanf
.text:0040F123                 jmp     short loc_40F0D1
.text:0040F125 ; ---------------------------------------------------------------------------
.text:0040F125
.text:0040F125 loc_40F125:                             ; CODE XREF: .text:0040F0B5↑j
.text:0040F125                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040F129                 jz      short loc_40F168
.text:0040F12B
.text:0040F12B loc_40F12B:                             ; CODE XREF: .text:0040F16C↓j
.text:0040F12B                                         ; .text:0040F172↓j
.text:0040F12B                 cmp     al, 5Ch ; '\'
.text:0040F12D                 jnz     short loc_40F0B7
.text:0040F12F                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040F133                 jz      short loc_40F150
.text:0040F135
.text:0040F135 loc_40F135:                             ; CODE XREF: .text:0040F154↓j
.text:0040F135                                         ; .text:0040F15A↓j
.text:0040F135                 cmp     al, 5Ch ; '\'
.text:0040F137                 jnz     loc_40F0B7
.text:0040F13D                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:0040F141                 jnz     loc_40F0B7
.text:0040F147                 mov     byte ptr [ecx], 5Ch ; '\'
.text:0040F14A                 inc     edx
.text:0040F14B                 jmp     loc_40F0B9
.text:0040F150 ; ---------------------------------------------------------------------------
.text:0040F150
.text:0040F150 loc_40F150:                             ; CODE XREF: .text:0040F133↑j
.text:0040F150                 cmp     byte ptr [edx+2], 31h ; '1'
.text:0040F154                 jnz     short loc_40F135
.text:0040F156                 cmp     byte ptr [edx+3], 32h ; '2'
.text:0040F15A                 jnz     short loc_40F135
.text:0040F15C                 mov     byte ptr [ecx], 9
.text:0040F15F
.text:0040F15F loc_40F15F:                             ; CODE XREF: .text:0040F177↓j
.text:0040F15F                 inc     ecx
.text:0040F160                 add     edx, 3
.text:0040F163                 jmp     loc_40F0BA
.text:0040F168 ; ---------------------------------------------------------------------------
.text:0040F168
.text:0040F168 loc_40F168:                             ; CODE XREF: .text:0040F129↑j
.text:0040F168                 cmp     byte ptr [edx+2], 34h ; '4'
.text:0040F16C                 jnz     short loc_40F12B
.text:0040F16E                 cmp     byte ptr [edx+3], 30h ; '0'
.text:0040F172                 jnz     short loc_40F12B
.text:0040F174                 mov     byte ptr [ecx], 20h ; ' '
.text:0040F177                 jmp     short loc_40F15F
.text:0040F179 ; ---------------------------------------------------------------------------
.text:0040F179
.text:0040F179 loc_40F179:                             ; CODE XREF: .text:0040F081↑j
.text:0040F179                 mov     dword ptr [esp+4], 40EE9Ah
.text:0040F181                 mov     [esp], eax
.text:0040F184                 call    strspn
.text:0040F189                 add     [esp+1Ch], eax
.text:0040F18D                 jmp     loc_40F087
.text:0040F192 ; ---------------------------------------------------------------------------
.text:0040F192
.text:0040F192 loc_40F192:                             ; CODE XREF: .text:0040F065↑j
.text:0040F192                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040F196                 jz      short loc_40F1D9
.text:0040F198
.text:0040F198 loc_40F198:                             ; CODE XREF: .text:0040F1DD↓j
.text:0040F198                                         ; .text:0040F1E3↓j
.text:0040F198                 cmp     al, 5Ch ; '\'
.text:0040F19A                 jnz     loc_40F06B
.text:0040F1A0                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040F1A4                 jz      short loc_40F1C1
.text:0040F1A6
.text:0040F1A6 loc_40F1A6:                             ; CODE XREF: .text:0040F1C5↓j
.text:0040F1A6                                         ; .text:0040F1CB↓j
.text:0040F1A6                 cmp     al, 5Ch ; '\'
.text:0040F1A8                 jnz     loc_40F06B
.text:0040F1AE                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:0040F1B2                 jnz     loc_40F06B
.text:0040F1B8                 mov     byte ptr [ecx], 5Ch ; '\'
.text:0040F1BB                 inc     edx
.text:0040F1BC                 jmp     loc_40F06D
.text:0040F1C1 ; ---------------------------------------------------------------------------
.text:0040F1C1
.text:0040F1C1 loc_40F1C1:                             ; CODE XREF: .text:0040F1A4↑j
.text:0040F1C1                 cmp     byte ptr [edx+2], 31h ; '1'
.text:0040F1C5                 jnz     short loc_40F1A6
.text:0040F1C7                 cmp     byte ptr [edx+3], 32h ; '2'
.text:0040F1CB                 jnz     short loc_40F1A6
.text:0040F1CD                 mov     byte ptr [ecx], 9
.text:0040F1D0
.text:0040F1D0 loc_40F1D0:                             ; CODE XREF: .text:0040F1E8↓j
.text:0040F1D0                 inc     ecx
.text:0040F1D1                 add     edx, 3
.text:0040F1D4                 jmp     loc_40F06E
.text:0040F1D9 ; ---------------------------------------------------------------------------
.text:0040F1D9
.text:0040F1D9 loc_40F1D9:                             ; CODE XREF: .text:0040F196↑j
.text:0040F1D9                 cmp     byte ptr [edx+2], 34h ; '4'
.text:0040F1DD                 jnz     short loc_40F198
.text:0040F1DF                 cmp     byte ptr [edx+3], 30h ; '0'
.text:0040F1E3                 jnz     short loc_40F198
.text:0040F1E5                 mov     byte ptr [ecx], 20h ; ' '
.text:0040F1E8                 jmp     short loc_40F1D0
.text:0040F1EA ; ---------------------------------------------------------------------------
.text:0040F1EA
.text:0040F1EA loc_40F1EA:                             ; CODE XREF: .text:0040F031↑j
.text:0040F1EA                 mov     dword ptr [esp+4], 40EE9Ah
.text:0040F1F2                 mov     [esp], eax
.text:0040F1F5                 call    strspn
.text:0040F1FA                 add     [esp+1Ch], eax
.text:0040F1FE                 jmp     loc_40F037
.text:0040F203 ; ---------------------------------------------------------------------------
.text:0040F203
.text:0040F203 loc_40F203:                             ; CODE XREF: .text:0040F015↑j
.text:0040F203                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040F207                 jz      short loc_40F24A
.text:0040F209
.text:0040F209 loc_40F209:                             ; CODE XREF: .text:0040F24E↓j
.text:0040F209                                         ; .text:0040F254↓j
.text:0040F209                 cmp     al, 5Ch ; '\'
.text:0040F20B                 jnz     loc_40F01B
.text:0040F211                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040F215                 jz      short loc_40F232
.text:0040F217
.text:0040F217 loc_40F217:                             ; CODE XREF: .text:0040F236↓j
.text:0040F217                                         ; .text:0040F23C↓j
.text:0040F217                 cmp     al, 5Ch ; '\'
.text:0040F219                 jnz     loc_40F01B
.text:0040F21F                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:0040F223                 jnz     loc_40F01B
.text:0040F229                 mov     byte ptr [ecx], 5Ch ; '\'
.text:0040F22C                 inc     edx
.text:0040F22D                 jmp     loc_40F01D
.text:0040F232 ; ---------------------------------------------------------------------------
.text:0040F232
.text:0040F232 loc_40F232:                             ; CODE XREF: .text:0040F215↑j
.text:0040F232                 cmp     byte ptr [edx+2], 31h ; '1'
.text:0040F236                 jnz     short loc_40F217
.text:0040F238                 cmp     byte ptr [edx+3], 32h ; '2'
.text:0040F23C                 jnz     short loc_40F217
.text:0040F23E                 mov     byte ptr [ecx], 9
.text:0040F241
.text:0040F241 loc_40F241:                             ; CODE XREF: .text:0040F259↓j
.text:0040F241                 inc     ecx
.text:0040F242                 add     edx, 3
.text:0040F245                 jmp     loc_40F01E
.text:0040F24A ; ---------------------------------------------------------------------------
.text:0040F24A
.text:0040F24A loc_40F24A:                             ; CODE XREF: .text:0040F207↑j
.text:0040F24A                 cmp     byte ptr [edx+2], 34h ; '4'
.text:0040F24E                 jnz     short loc_40F209
.text:0040F250                 cmp     byte ptr [edx+3], 30h ; '0'
.text:0040F254                 jnz     short loc_40F209
.text:0040F256                 mov     byte ptr [ecx], 20h ; ' '
.text:0040F259                 jmp     short loc_40F241
.text:0040F25B ; ---------------------------------------------------------------------------
.text:0040F25B
.text:0040F25B loc_40F25B:                             ; CODE XREF: .text:0040EFE0↑j
.text:0040F25B                 mov     dword ptr [esp+4], 40EE9Ah
.text:0040F263                 mov     [esp], eax
.text:0040F266                 call    strspn
.text:0040F26B                 add     [esp+1Ch], eax
.text:0040F26F                 jmp     loc_40EFE6
.text:0040F274 ; ---------------------------------------------------------------------------
.text:0040F274
.text:0040F274 loc_40F274:                             ; CODE XREF: .text:0040EFC5↑j
.text:0040F274                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040F278                 jz      short loc_40F2BB
.text:0040F27A
.text:0040F27A loc_40F27A:                             ; CODE XREF: .text:0040F2BF↓j
.text:0040F27A                                         ; .text:0040F2C5↓j
.text:0040F27A                 cmp     al, 5Ch ; '\'
.text:0040F27C                 jnz     loc_40EFCB
.text:0040F282                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040F286                 jz      short loc_40F2A3
.text:0040F288
.text:0040F288 loc_40F288:                             ; CODE XREF: .text:0040F2A7↓j
.text:0040F288                                         ; .text:0040F2AD↓j
.text:0040F288                 cmp     al, 5Ch ; '\'
.text:0040F28A                 jnz     loc_40EFCB
.text:0040F290                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:0040F294                 jnz     loc_40EFCB
.text:0040F29A                 mov     byte ptr [ecx], 5Ch ; '\'
.text:0040F29D                 inc     edx
.text:0040F29E                 jmp     loc_40EFCD
.text:0040F2A3 ; ---------------------------------------------------------------------------
.text:0040F2A3
.text:0040F2A3 loc_40F2A3:                             ; CODE XREF: .text:0040F286↑j
.text:0040F2A3                 cmp     byte ptr [edx+2], 31h ; '1'
.text:0040F2A7                 jnz     short loc_40F288
.text:0040F2A9                 cmp     byte ptr [edx+3], 32h ; '2'
.text:0040F2AD                 jnz     short loc_40F288
.text:0040F2AF                 mov     byte ptr [ecx], 9
.text:0040F2B2
.text:0040F2B2 loc_40F2B2:                             ; CODE XREF: .text:0040F2CA↓j
.text:0040F2B2                 inc     ecx
.text:0040F2B3                 add     edx, 3
.text:0040F2B6                 jmp     loc_40EFCE
.text:0040F2BB ; ---------------------------------------------------------------------------
.text:0040F2BB
.text:0040F2BB loc_40F2BB:                             ; CODE XREF: .text:0040F278↑j
.text:0040F2BB                 cmp     byte ptr [edx+2], 34h ; '4'
.text:0040F2BF                 jnz     short loc_40F27A
.text:0040F2C1                 cmp     byte ptr [edx+3], 30h ; '0'
.text:0040F2C5                 jnz     short loc_40F27A
.text:0040F2C7                 mov     byte ptr [ecx], 20h ; ' '
.text:0040F2CA                 jmp     short loc_40F2B2
.text:0040F2CA ; ---------------------------------------------------------------------------
.text:0040F2CC                 align 10h
.text:0040F2D0
.text:0040F2D0 loc_40F2D0:                             ; CODE XREF: .text:0040EEE2↑j
.text:0040F2D0                 mov     dword ptr [esp+4], 0
.text:0040F2D8                 mov     dword ptr [esp], 0
.text:0040F2DF                 call    GetLogicalDriveStringsA
.text:0040F2E4                 sub     esp, 8
.text:0040F2E7                 mov     ebx, eax
.text:0040F2E9                 call    GetProcessHeap
.text:0040F2EE                 mov     [esp], eax
.text:0040F2F1                 mov     [esp+8], ebx
.text:0040F2F5                 mov     dword ptr [esp+4], 0
.text:0040F2FD                 call    HeapAlloc
.text:0040F302                 sub     esp, 0Ch
.text:0040F305                 mov     esi, eax
.text:0040F307                 mov     [esp+4], eax
.text:0040F30B                 mov     [esp], ebx
.text:0040F30E                 call    GetLogicalDriveStringsA
.text:0040F313                 mov     off_41D0D4, esi ; "notset"
.text:0040F319                 sub     esp, 8
.text:0040F31C                 jmp     loc_40EEE8
.text:0040F31C ; ---------------------------------------------------------------------------
.text:0040F321 ; const char aSSSSDD[]
.text:0040F321 aSSSSDD         db '%s %s %s %s %d %d',0Ah,0
.text:0040F321                                         ; DATA XREF: .text:0040F460↓o
.text:0040F321                                         ; ___addmntentstr+F0↓o
.text:0040F334                 align 10h
.text:0040F340                 push    esi
.text:0040F341                 push    ebx
.text:0040F342                 sub     esp, 44h
.text:0040F345                 mov     ebx, [esp+54h]
.text:0040F349                 mov     esi, [esp+50h]
.text:0040F34D                 mov     edx, [ebx]
.text:0040F34F                 mov     [esp+20h], edx
.text:0040F353                 mov     ecx, [ebx+4]
.text:0040F356                 mov     [esp+24h], ecx
.text:0040F35A                 mov     edx, [ebx+8]
.text:0040F35D                 mov     [esp+28h], edx
.text:0040F361                 mov     ecx, [ebx+0Ch]
.text:0040F364                 mov     [esp+2Ch], ecx
.text:0040F368                 mov     edx, [ebx+10h]
.text:0040F36B                 mov     [esp+30h], edx
.text:0040F36F                 mov     ecx, [ebx+14h]
.text:0040F372                 mov     dword ptr [esp+8], 2
.text:0040F37A                 mov     dword ptr [esp+4], 0
.text:0040F382                 mov     [esp+34h], ecx
.text:0040F386                 mov     [esp], esi
.text:0040F389                 call    sub_40FBA0
.text:0040F38E ; ---------------------------------------------------------------------------
.text:0040F38E                 test    eax, eax
.text:0040F390                 mov     edx, 1
.text:0040F395                 jnz     loc_40F495
.text:0040F39B                 mov     ebx, [esp+20h]
.text:0040F39F                 mov     edx, ebx
.text:0040F3A1                 movzx   eax, byte ptr [ebx]
.text:0040F3A4                 test    al, al
.text:0040F3A6                 jz      short loc_40F3D0
.text:0040F3A8                 nop
.text:0040F3A9                 lea     esi, [esi+0]
.text:0040F3B0
.text:0040F3B0 loc_40F3B0:                             ; CODE XREF: .text:0040F3CE↓j
.text:0040F3B0                 cmp     al, 20h ; ' '
.text:0040F3B2                 jz      loc_40F60A
.text:0040F3B8                 cmp     al, 9
.text:0040F3BA                 jz      loc_40F60A
.text:0040F3C0                 cmp     al, 5Ch ; '\'
.text:0040F3C2                 jz      loc_40F60A
.text:0040F3C8                 inc     ebx
.text:0040F3C9                 movzx   eax, byte ptr [ebx]
.text:0040F3CC                 test    al, al
.text:0040F3CE                 jnz     short loc_40F3B0
.text:0040F3D0
.text:0040F3D0 loc_40F3D0:                             ; CODE XREF: .text:0040F3A6↑j
.text:0040F3D0                                         ; .text:0040F60C↓j ...
.text:0040F3D0                 mov     ebx, [esp+24h]
.text:0040F3D4                 mov     edx, ebx
.text:0040F3D6                 movzx   eax, byte ptr [ebx]
.text:0040F3D9                 test    al, al
.text:0040F3DB                 jz      short loc_40F400
.text:0040F3DD                 lea     esi, [esi+0]
.text:0040F3E0
.text:0040F3E0 loc_40F3E0:                             ; CODE XREF: .text:0040F3FE↓j
.text:0040F3E0                 cmp     al, 20h ; ' '
.text:0040F3E2                 jz      loc_40F58A
.text:0040F3E8                 cmp     al, 9
.text:0040F3EA                 jz      loc_40F58A
.text:0040F3F0                 cmp     al, 5Ch ; '\'
.text:0040F3F2                 jz      loc_40F58A
.text:0040F3F8                 inc     ebx
.text:0040F3F9                 movzx   eax, byte ptr [ebx]
.text:0040F3FC                 test    al, al
.text:0040F3FE                 jnz     short loc_40F3E0
.text:0040F400
.text:0040F400 loc_40F400:                             ; CODE XREF: .text:0040F3DB↑j
.text:0040F400                                         ; .text:0040F58C↓j ...
.text:0040F400                 mov     ebx, [esp+28h]
.text:0040F404                 mov     edx, ebx
.text:0040F406                 movzx   eax, byte ptr [ebx]
.text:0040F409                 test    al, al
.text:0040F40B                 jz      short loc_40F430
.text:0040F40D                 lea     esi, [esi+0]
.text:0040F410
.text:0040F410 loc_40F410:                             ; CODE XREF: .text:0040F42E↓j
.text:0040F410                 cmp     al, 20h ; ' '
.text:0040F412                 jz      loc_40F50E
.text:0040F418                 cmp     al, 9
.text:0040F41A                 jz      loc_40F50E
.text:0040F420                 cmp     al, 5Ch ; '\'
.text:0040F422                 jz      loc_40F50E
.text:0040F428                 inc     ebx
.text:0040F429                 movzx   eax, byte ptr [ebx]
.text:0040F42C                 test    al, al
.text:0040F42E                 jnz     short loc_40F410
.text:0040F430
.text:0040F430 loc_40F430:                             ; CODE XREF: .text:0040F40B↑j
.text:0040F430                                         ; .text:0040F510↓j ...
.text:0040F430                 mov     edx, [esp+2Ch]
.text:0040F434                 mov     ebx, edx
.text:0040F436                 movzx   eax, byte ptr [edx]
.text:0040F439                 test    al, al
.text:0040F43B                 jz      short loc_40F454
.text:0040F43D                 lea     esi, [esi+0]
.text:0040F440
.text:0040F440 loc_40F440:                             ; CODE XREF: .text:0040F452↓j
.text:0040F440                 cmp     al, 20h ; ' '
.text:0040F442                 jz      short loc_40F49D
.text:0040F444                 cmp     al, 9
.text:0040F446                 jz      short loc_40F49D
.text:0040F448                 cmp     al, 5Ch ; '\'
.text:0040F44A                 jz      short loc_40F49D
.text:0040F44C                 inc     ebx
.text:0040F44D                 movzx   eax, byte ptr [ebx]
.text:0040F450                 test    al, al
.text:0040F452                 jnz     short loc_40F440
.text:0040F454
.text:0040F454 loc_40F454:                             ; CODE XREF: .text:0040F43B↑j
.text:0040F454                                         ; .text:0040F49F↓j ...
.text:0040F454                 mov     [esp+14h], edx
.text:0040F458                 mov     ecx, [esp+34h]
.text:0040F45C                 mov     ebx, [esp+30h]
.text:0040F460                 mov     dword ptr [esp+4], offset aSSSSDD ; "%s %s %s %s %d %d\n"
.text:0040F468                 mov     edx, [esp+24h]
.text:0040F46C                 mov     [esp+1Ch], ecx
.text:0040F470                 mov     ecx, [esp+28h]
.text:0040F474                 mov     [esp+18h], ebx
.text:0040F478                 mov     ebx, [esp+20h]
.text:0040F47C                 mov     [esp+0Ch], edx
.text:0040F480                 mov     [esp+10h], ecx
.text:0040F484                 mov     [esp+8], ebx
.text:0040F488                 mov     [esp], esi
.text:0040F48B                 call    fprintf
.text:0040F490                 mov     edx, eax
.text:0040F492                 shr     edx, 1Fh
.text:0040F495
.text:0040F495 loc_40F495:                             ; CODE XREF: .text:0040F395↑j
.text:0040F495                 add     esp, 44h
.text:0040F498                 mov     eax, edx
.text:0040F49A                 pop     ebx
.text:0040F49B                 pop     esi
.text:0040F49C                 retn
.text:0040F49D ; ---------------------------------------------------------------------------
.text:0040F49D
.text:0040F49D loc_40F49D:                             ; CODE XREF: .text:0040F442↑j
.text:0040F49D                                         ; .text:0040F446↑j ...
.text:0040F49D                 test    al, al
.text:0040F49F                 jz      short loc_40F454
.text:0040F4A1                 mov     [esp], edx
.text:0040F4A4                 mov     ebx, edx
.text:0040F4A6                 call    strlen
.text:0040F4AB                 lea     edx, ds:1[eax*4]
.text:0040F4B2                 mov     [esp], edx
.text:0040F4B5                 call    malloc
.text:0040F4BA                 mov     [esp+2Ch], eax
.text:0040F4BE                 mov     edx, eax
.text:0040F4C0
.text:0040F4C0 loc_40F4C0:                             ; CODE XREF: .text:0040F4D8↓j
.text:0040F4C0                 movzx   eax, byte ptr [ebx]
.text:0040F4C3                 cmp     al, 20h ; ' '
.text:0040F4C5                 jz      short loc_40F4FD
.text:0040F4C7                 cmp     al, 9
.text:0040F4C9                 jz      short loc_40F4EC
.text:0040F4CB                 cmp     al, 5Ch ; '\'
.text:0040F4CD                 jz      short loc_40F4E3
.text:0040F4CF                 mov     [edx], al
.text:0040F4D1
.text:0040F4D1 loc_40F4D1:                             ; CODE XREF: .text:0040F4EA↓j
.text:0040F4D1                                         ; .text:0040F4FB↓j ...
.text:0040F4D1                 movzx   ecx, byte ptr [ebx]
.text:0040F4D4                 inc     edx
.text:0040F4D5                 inc     ebx
.text:0040F4D6                 test    cl, cl
.text:0040F4D8                 jnz     short loc_40F4C0
.text:0040F4DA                 mov     edx, [esp+2Ch]
.text:0040F4DE                 jmp     loc_40F454
.text:0040F4E3 ; ---------------------------------------------------------------------------
.text:0040F4E3
.text:0040F4E3 loc_40F4E3:                             ; CODE XREF: .text:0040F4CD↑j
.text:0040F4E3                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040F4E6                 inc     edx
.text:0040F4E7                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040F4EA                 jmp     short loc_40F4D1
.text:0040F4EC ; ---------------------------------------------------------------------------
.text:0040F4EC
.text:0040F4EC loc_40F4EC:                             ; CODE XREF: .text:0040F4C9↑j
.text:0040F4EC                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040F4EF                 inc     edx
.text:0040F4F0                 mov     byte ptr [edx], 30h ; '0'
.text:0040F4F3                 inc     edx
.text:0040F4F4                 mov     byte ptr [edx], 31h ; '1'
.text:0040F4F7                 inc     edx
.text:0040F4F8                 mov     byte ptr [edx], 32h ; '2'
.text:0040F4FB                 jmp     short loc_40F4D1
.text:0040F4FD ; ---------------------------------------------------------------------------
.text:0040F4FD
.text:0040F4FD loc_40F4FD:                             ; CODE XREF: .text:0040F4C5↑j
.text:0040F4FD                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040F500                 inc     edx
.text:0040F501                 mov     byte ptr [edx], 30h ; '0'
.text:0040F504                 inc     edx
.text:0040F505                 mov     byte ptr [edx], 34h ; '4'
.text:0040F508                 inc     edx
.text:0040F509                 mov     byte ptr [edx], 30h ; '0'
.text:0040F50C                 jmp     short loc_40F4D1
.text:0040F50E ; ---------------------------------------------------------------------------
.text:0040F50E
.text:0040F50E loc_40F50E:                             ; CODE XREF: .text:0040F412↑j
.text:0040F50E                                         ; .text:0040F41A↑j ...
.text:0040F50E                 test    al, al
.text:0040F510                 jz      loc_40F430
.text:0040F516                 mov     [esp], edx
.text:0040F519                 mov     ebx, edx
.text:0040F51B                 call    strlen
.text:0040F520                 lea     edx, ds:1[eax*4]
.text:0040F527                 mov     [esp], edx
.text:0040F52A                 call    malloc
.text:0040F52F                 mov     [esp+28h], eax
.text:0040F533                 mov     edx, eax
.text:0040F535                 lea     esi, [esi+0]
.text:0040F539                 lea     edi, [edi+0]
.text:0040F540
.text:0040F540 loc_40F540:                             ; CODE XREF: .text:0040F558↓j
.text:0040F540                 movzx   eax, byte ptr [ebx]
.text:0040F543                 cmp     al, 20h ; ' '
.text:0040F545                 jz      short loc_40F579
.text:0040F547                 cmp     al, 9
.text:0040F549                 jz      short loc_40F568
.text:0040F54B                 cmp     al, 5Ch ; '\'
.text:0040F54D                 jz      short loc_40F55F
.text:0040F54F                 mov     [edx], al
.text:0040F551
.text:0040F551 loc_40F551:                             ; CODE XREF: .text:0040F566↓j
.text:0040F551                                         ; .text:0040F577↓j ...
.text:0040F551                 movzx   ecx, byte ptr [ebx]
.text:0040F554                 inc     edx
.text:0040F555                 inc     ebx
.text:0040F556                 test    cl, cl
.text:0040F558                 jnz     short loc_40F540
.text:0040F55A                 jmp     loc_40F430
.text:0040F55F ; ---------------------------------------------------------------------------
.text:0040F55F
.text:0040F55F loc_40F55F:                             ; CODE XREF: .text:0040F54D↑j
.text:0040F55F                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040F562                 inc     edx
.text:0040F563                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040F566                 jmp     short loc_40F551
.text:0040F568 ; ---------------------------------------------------------------------------
.text:0040F568
.text:0040F568 loc_40F568:                             ; CODE XREF: .text:0040F549↑j
.text:0040F568                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040F56B                 inc     edx
.text:0040F56C                 mov     byte ptr [edx], 30h ; '0'
.text:0040F56F                 inc     edx
.text:0040F570                 mov     byte ptr [edx], 31h ; '1'
.text:0040F573                 inc     edx
.text:0040F574                 mov     byte ptr [edx], 32h ; '2'
.text:0040F577                 jmp     short loc_40F551
.text:0040F579 ; ---------------------------------------------------------------------------
.text:0040F579
.text:0040F579 loc_40F579:                             ; CODE XREF: .text:0040F545↑j
.text:0040F579                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040F57C                 inc     edx
.text:0040F57D                 mov     byte ptr [edx], 30h ; '0'
.text:0040F580                 inc     edx
.text:0040F581                 mov     byte ptr [edx], 34h ; '4'
.text:0040F584                 inc     edx
.text:0040F585                 mov     byte ptr [edx], 30h ; '0'
.text:0040F588                 jmp     short loc_40F551
.text:0040F58A ; ---------------------------------------------------------------------------
.text:0040F58A
.text:0040F58A loc_40F58A:                             ; CODE XREF: .text:0040F3E2↑j
.text:0040F58A                                         ; .text:0040F3EA↑j ...
.text:0040F58A                 test    al, al
.text:0040F58C                 jz      loc_40F400
.text:0040F592                 mov     [esp], edx
.text:0040F595                 mov     ebx, edx
.text:0040F597                 call    strlen
.text:0040F59C                 lea     edx, ds:1[eax*4]
.text:0040F5A3                 mov     [esp], edx
.text:0040F5A6                 call    malloc
.text:0040F5AB                 mov     [esp+24h], eax
.text:0040F5AF                 mov     edx, eax
.text:0040F5B1                 jmp     short loc_40F5C0
.text:0040F5B1 ; ---------------------------------------------------------------------------
.text:0040F5B3                 align 10h
.text:0040F5C0
.text:0040F5C0 loc_40F5C0:                             ; CODE XREF: .text:0040F5B1↑j
.text:0040F5C0                                         ; .text:0040F5D8↓j
.text:0040F5C0                 movzx   eax, byte ptr [ebx]
.text:0040F5C3                 cmp     al, 20h ; ' '
.text:0040F5C5                 jz      short loc_40F5F9
.text:0040F5C7                 cmp     al, 9
.text:0040F5C9                 jz      short loc_40F5E8
.text:0040F5CB                 cmp     al, 5Ch ; '\'
.text:0040F5CD                 jz      short loc_40F5DF
.text:0040F5CF                 mov     [edx], al
.text:0040F5D1
.text:0040F5D1 loc_40F5D1:                             ; CODE XREF: .text:0040F5E6↓j
.text:0040F5D1                                         ; .text:0040F5F7↓j ...
.text:0040F5D1                 movzx   ecx, byte ptr [ebx]
.text:0040F5D4                 inc     edx
.text:0040F5D5                 inc     ebx
.text:0040F5D6                 test    cl, cl
.text:0040F5D8                 jnz     short loc_40F5C0
.text:0040F5DA                 jmp     loc_40F400
.text:0040F5DF ; ---------------------------------------------------------------------------
.text:0040F5DF
.text:0040F5DF loc_40F5DF:                             ; CODE XREF: .text:0040F5CD↑j
.text:0040F5DF                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040F5E2                 inc     edx
.text:0040F5E3                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040F5E6                 jmp     short loc_40F5D1
.text:0040F5E8 ; ---------------------------------------------------------------------------
.text:0040F5E8
.text:0040F5E8 loc_40F5E8:                             ; CODE XREF: .text:0040F5C9↑j
.text:0040F5E8                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040F5EB                 inc     edx
.text:0040F5EC                 mov     byte ptr [edx], 30h ; '0'
.text:0040F5EF                 inc     edx
.text:0040F5F0                 mov     byte ptr [edx], 31h ; '1'
.text:0040F5F3                 inc     edx
.text:0040F5F4                 mov     byte ptr [edx], 32h ; '2'
.text:0040F5F7                 jmp     short loc_40F5D1
.text:0040F5F9 ; ---------------------------------------------------------------------------
.text:0040F5F9
.text:0040F5F9 loc_40F5F9:                             ; CODE XREF: .text:0040F5C5↑j
.text:0040F5F9                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040F5FC                 inc     edx
.text:0040F5FD                 mov     byte ptr [edx], 30h ; '0'
.text:0040F600                 inc     edx
.text:0040F601                 mov     byte ptr [edx], 34h ; '4'
.text:0040F604                 inc     edx
.text:0040F605                 mov     byte ptr [edx], 30h ; '0'
.text:0040F608                 jmp     short loc_40F5D1
.text:0040F60A ; ---------------------------------------------------------------------------
.text:0040F60A
.text:0040F60A loc_40F60A:                             ; CODE XREF: .text:0040F3B2↑j
.text:0040F60A                                         ; .text:0040F3BA↑j ...
.text:0040F60A                 test    al, al
.text:0040F60C                 jz      loc_40F3D0
.text:0040F612                 mov     [esp], edx
.text:0040F615                 mov     ebx, edx
.text:0040F617                 call    strlen
.text:0040F61C                 lea     ecx, ds:1[eax*4]
.text:0040F623                 mov     [esp], ecx
.text:0040F626                 call    malloc
.text:0040F62B                 mov     [esp+20h], eax
.text:0040F62F                 mov     edx, eax
.text:0040F631                 jmp     short loc_40F640
.text:0040F631 ; ---------------------------------------------------------------------------
.text:0040F633                 align 10h
.text:0040F640
.text:0040F640 loc_40F640:                             ; CODE XREF: .text:0040F631↑j
.text:0040F640                                         ; .text:0040F658↓j
.text:0040F640                 movzx   eax, byte ptr [ebx]
.text:0040F643                 cmp     al, 20h ; ' '
.text:0040F645                 jz      short loc_40F679
.text:0040F647                 cmp     al, 9
.text:0040F649                 jz      short loc_40F668
.text:0040F64B                 cmp     al, 5Ch ; '\'
.text:0040F64D                 jz      short loc_40F65F
.text:0040F64F                 mov     [edx], al
.text:0040F651
.text:0040F651 loc_40F651:                             ; CODE XREF: .text:0040F666↓j
.text:0040F651                                         ; .text:0040F677↓j ...
.text:0040F651                 movzx   ecx, byte ptr [ebx]
.text:0040F654                 inc     edx
.text:0040F655                 inc     ebx
.text:0040F656                 test    cl, cl
.text:0040F658                 jnz     short loc_40F640
.text:0040F65A                 jmp     loc_40F3D0
.text:0040F65F ; ---------------------------------------------------------------------------
.text:0040F65F
.text:0040F65F loc_40F65F:                             ; CODE XREF: .text:0040F64D↑j
.text:0040F65F                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040F662                 inc     edx
.text:0040F663                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040F666                 jmp     short loc_40F651
.text:0040F668 ; ---------------------------------------------------------------------------
.text:0040F668
.text:0040F668 loc_40F668:                             ; CODE XREF: .text:0040F649↑j
.text:0040F668                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040F66B                 inc     edx
.text:0040F66C                 mov     byte ptr [edx], 30h ; '0'
.text:0040F66F                 inc     edx
.text:0040F670                 mov     byte ptr [edx], 31h ; '1'
.text:0040F673                 inc     edx
.text:0040F674                 mov     byte ptr [edx], 32h ; '2'
.text:0040F677                 jmp     short loc_40F651
.text:0040F679 ; ---------------------------------------------------------------------------
.text:0040F679
.text:0040F679 loc_40F679:                             ; CODE XREF: .text:0040F645↑j
.text:0040F679                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040F67C                 inc     edx
.text:0040F67D                 mov     byte ptr [edx], 30h ; '0'
.text:0040F680                 inc     edx
.text:0040F681                 mov     byte ptr [edx], 34h ; '4'
.text:0040F684                 inc     edx
.text:0040F685                 mov     byte ptr [edx], 30h ; '0'
.text:0040F688                 jmp     short loc_40F651
.text:0040F688 ; ---------------------------------------------------------------------------
.text:0040F68A                 align 10h
.text:0040F690
.text:0040F690 ; =============== S U B R O U T I N E =======================================
.text:0040F690
.text:0040F690 ; Attributes: info_from_lumina
.text:0040F690
.text:0040F690 ; int __cdecl __addmntentstr(char *, int)
.text:0040F690 ___addmntentstr proc near               ; CODE XREF: .text:0040EF5A↑p
.text:0040F690
.text:0040F690 Buffer          = dword ptr -4Ch
.text:0040F690 Format          = dword ptr -48h
.text:0040F690 var_44          = dword ptr -44h
.text:0040F690 var_40          = dword ptr -40h
.text:0040F690 var_3C          = dword ptr -3Ch
.text:0040F690 var_38          = dword ptr -38h
.text:0040F690 var_34          = dword ptr -34h
.text:0040F690 var_30          = dword ptr -30h
.text:0040F690 var_2C          = dword ptr -2Ch
.text:0040F690 var_28          = dword ptr -28h
.text:0040F690 var_24          = dword ptr -24h
.text:0040F690 Str             = dword ptr -20h
.text:0040F690 var_1C          = dword ptr -1Ch
.text:0040F690 var_18          = dword ptr -18h
.text:0040F690 arg_0           = dword ptr  4
.text:0040F690 arg_4           = dword ptr  8
.text:0040F690
.text:0040F690                 push    ebx
.text:0040F691                 sub     esp, 48h
.text:0040F694                 mov     edx, [esp+4Ch+arg_4]
.text:0040F698                 mov     ecx, [edx]
.text:0040F69A                 mov     [esp+4Ch+var_2C], ecx
.text:0040F69E                 mov     ebx, [edx+4]
.text:0040F6A1                 mov     [esp+4Ch+var_28], ebx
.text:0040F6A5                 mov     ebx, [edx+8]
.text:0040F6A8                 mov     [esp+4Ch+var_24], ebx
.text:0040F6AC                 mov     ebx, [edx+0Ch]
.text:0040F6AF                 mov     [esp+4Ch+Str], ebx
.text:0040F6B3                 mov     ebx, [edx+10h]
.text:0040F6B6                 mov     [esp+4Ch+var_1C], ebx
.text:0040F6BA                 mov     ebx, [edx+14h]
.text:0040F6BD                 mov     [esp+4Ch+var_18], ebx
.text:0040F6C1                 mov     ebx, ecx
.text:0040F6C3                 movzx   eax, byte ptr [ecx]
.text:0040F6C6                 test    al, al
.text:0040F6C8                 jz      loc_40F9B1
.text:0040F6CE                 mov     esi, esi
.text:0040F6D0
.text:0040F6D0 loc_40F6D0:                             ; CODE XREF: ___addmntentstr+5E↓j
.text:0040F6D0                 cmp     al, 20h ; ' '
.text:0040F6D2                 jz      loc_40F930
.text:0040F6D8                 cmp     al, 9
.text:0040F6DA                 jz      loc_40F930
.text:0040F6E0                 cmp     al, 5Ch ; '\'
.text:0040F6E2                 jz      loc_40F930
.text:0040F6E8                 inc     ebx
.text:0040F6E9                 movzx   eax, byte ptr [ebx]
.text:0040F6EC                 test    al, al
.text:0040F6EE                 jnz     short loc_40F6D0
.text:0040F6F0
.text:0040F6F0 loc_40F6F0:                             ; CODE XREF: ___addmntentstr+2A2↓j
.text:0040F6F0                                         ; ___addmntentstr+2EA↓j
.text:0040F6F0                 mov     ebx, [esp+4Ch+var_28]
.text:0040F6F4                 mov     edx, ebx
.text:0040F6F6                 movzx   eax, byte ptr [ebx]
.text:0040F6F9                 test    al, al
.text:0040F6FB                 jz      short loc_40F720
.text:0040F6FD                 lea     esi, [esi+0]
.text:0040F700
.text:0040F700 loc_40F700:                             ; CODE XREF: ___addmntentstr+8E↓j
.text:0040F700                 cmp     al, 20h ; ' '
.text:0040F702                 jz      loc_40F8AA
.text:0040F708                 cmp     al, 9
.text:0040F70A                 jz      loc_40F8AA
.text:0040F710                 cmp     al, 5Ch ; '\'
.text:0040F712                 jz      loc_40F8AA
.text:0040F718                 inc     ebx
.text:0040F719                 movzx   eax, byte ptr [ebx]
.text:0040F71C                 test    al, al
.text:0040F71E                 jnz     short loc_40F700
.text:0040F720
.text:0040F720 loc_40F720:                             ; CODE XREF: ___addmntentstr+6B↑j
.text:0040F720                                         ; ___addmntentstr+21C↓j ...
.text:0040F720                 mov     ebx, [esp+4Ch+var_24]
.text:0040F724                 mov     edx, ebx
.text:0040F726                 movzx   eax, byte ptr [ebx]
.text:0040F729                 test    al, al
.text:0040F72B                 jz      short loc_40F750
.text:0040F72D                 lea     esi, [esi+0]
.text:0040F730
.text:0040F730 loc_40F730:                             ; CODE XREF: ___addmntentstr+BE↓j
.text:0040F730                 cmp     al, 20h ; ' '
.text:0040F732                 jz      loc_40F82E
.text:0040F738                 cmp     al, 9
.text:0040F73A                 jz      loc_40F82E
.text:0040F740                 cmp     al, 5Ch ; '\'
.text:0040F742                 jz      loc_40F82E
.text:0040F748                 inc     ebx
.text:0040F749                 movzx   eax, byte ptr [ebx]
.text:0040F74C                 test    al, al
.text:0040F74E                 jnz     short loc_40F730
.text:0040F750
.text:0040F750 loc_40F750:                             ; CODE XREF: ___addmntentstr+9B↑j
.text:0040F750                                         ; ___addmntentstr+1A0↓j ...
.text:0040F750                 mov     edx, [esp+4Ch+Str]
.text:0040F754                 mov     ebx, edx
.text:0040F756                 movzx   eax, byte ptr [edx]
.text:0040F759                 test    al, al
.text:0040F75B                 jz      short loc_40F774
.text:0040F75D                 lea     esi, [esi+0]
.text:0040F760
.text:0040F760 loc_40F760:                             ; CODE XREF: ___addmntentstr+E2↓j
.text:0040F760                 cmp     al, 20h ; ' '
.text:0040F762                 jz      short loc_40F7BC
.text:0040F764                 cmp     al, 9
.text:0040F766                 jz      short loc_40F7BC
.text:0040F768                 cmp     al, 5Ch ; '\'
.text:0040F76A                 jz      short loc_40F7BC
.text:0040F76C                 inc     ebx
.text:0040F76D                 movzx   eax, byte ptr [ebx]
.text:0040F770                 test    al, al
.text:0040F772                 jnz     short loc_40F760
.text:0040F774
.text:0040F774 loc_40F774:                             ; CODE XREF: ___addmntentstr+CB↑j
.text:0040F774                                         ; ___addmntentstr+12E↓j ...
.text:0040F774                 mov     [esp+4Ch+var_38], edx
.text:0040F778                 mov     ebx, [esp+4Ch+var_18]
.text:0040F77C                 mov     ecx, [esp+4Ch+var_1C]
.text:0040F780                 mov     [esp+4Ch+Format], offset aSSSSDD ; "%s %s %s %s %d %d\n"
.text:0040F788                 mov     edx, [esp+4Ch+var_2C]
.text:0040F78C                 mov     [esp+4Ch+var_30], ebx
.text:0040F790                 mov     ebx, [esp+4Ch+var_24]
.text:0040F794                 mov     [esp+4Ch+var_34], ecx
.text:0040F798                 mov     ecx, [esp+4Ch+var_28]
.text:0040F79C                 mov     [esp+4Ch+var_3C], ebx
.text:0040F7A0                 mov     ebx, [esp+4Ch+arg_0]
.text:0040F7A4                 mov     [esp+4Ch+var_40], ecx
.text:0040F7A8                 mov     [esp+4Ch+var_44], edx
.text:0040F7AC                 mov     [esp+4Ch+Buffer], ebx ; Buffer
.text:0040F7AF                 call    sprintf
.text:0040F7B4                 add     esp, 48h
.text:0040F7B7                 shr     eax, 1Fh
.text:0040F7BA                 pop     ebx
.text:0040F7BB                 retn
.text:0040F7BC ; ---------------------------------------------------------------------------
.text:0040F7BC
.text:0040F7BC loc_40F7BC:                             ; CODE XREF: ___addmntentstr+D2↑j
.text:0040F7BC                                         ; ___addmntentstr+D6↑j ...
.text:0040F7BC                 test    al, al
.text:0040F7BE                 jz      short loc_40F774
.text:0040F7C0                 mov     [esp+4Ch+Buffer], edx ; Str
.text:0040F7C3                 mov     ebx, edx
.text:0040F7C5                 call    strlen
.text:0040F7CA                 lea     edx, ds:1[eax*4]
.text:0040F7D1                 mov     [esp+4Ch+Buffer], edx ; Size
.text:0040F7D4                 call    malloc
.text:0040F7D9                 mov     [esp+4Ch+Str], eax
.text:0040F7DD                 mov     edx, eax
.text:0040F7DF                 nop
.text:0040F7E0
.text:0040F7E0 loc_40F7E0:                             ; CODE XREF: ___addmntentstr+168↓j
.text:0040F7E0                 movzx   eax, byte ptr [ebx]
.text:0040F7E3                 cmp     al, 20h ; ' '
.text:0040F7E5                 jz      short loc_40F81D
.text:0040F7E7                 cmp     al, 9
.text:0040F7E9                 jz      short loc_40F80C
.text:0040F7EB                 cmp     al, 5Ch ; '\'
.text:0040F7ED                 jz      short loc_40F803
.text:0040F7EF                 mov     [edx], al
.text:0040F7F1
.text:0040F7F1 loc_40F7F1:                             ; CODE XREF: ___addmntentstr+17A↓j
.text:0040F7F1                                         ; ___addmntentstr+18B↓j ...
.text:0040F7F1                 movzx   ecx, byte ptr [ebx]
.text:0040F7F4                 inc     edx
.text:0040F7F5                 inc     ebx
.text:0040F7F6                 test    cl, cl
.text:0040F7F8                 jnz     short loc_40F7E0
.text:0040F7FA                 mov     edx, [esp+4Ch+Str]
.text:0040F7FE                 jmp     loc_40F774
.text:0040F803 ; ---------------------------------------------------------------------------
.text:0040F803
.text:0040F803 loc_40F803:                             ; CODE XREF: ___addmntentstr+15D↑j
.text:0040F803                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040F806                 inc     edx
.text:0040F807                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040F80A                 jmp     short loc_40F7F1
.text:0040F80C ; ---------------------------------------------------------------------------
.text:0040F80C
.text:0040F80C loc_40F80C:                             ; CODE XREF: ___addmntentstr+159↑j
.text:0040F80C                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040F80F                 inc     edx
.text:0040F810                 mov     byte ptr [edx], 30h ; '0'
.text:0040F813                 inc     edx
.text:0040F814                 mov     byte ptr [edx], 31h ; '1'
.text:0040F817                 inc     edx
.text:0040F818                 mov     byte ptr [edx], 32h ; '2'
.text:0040F81B                 jmp     short loc_40F7F1
.text:0040F81D ; ---------------------------------------------------------------------------
.text:0040F81D
.text:0040F81D loc_40F81D:                             ; CODE XREF: ___addmntentstr+155↑j
.text:0040F81D                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040F820                 inc     edx
.text:0040F821                 mov     byte ptr [edx], 30h ; '0'
.text:0040F824                 inc     edx
.text:0040F825                 mov     byte ptr [edx], 34h ; '4'
.text:0040F828                 inc     edx
.text:0040F829                 mov     byte ptr [edx], 30h ; '0'
.text:0040F82C                 jmp     short loc_40F7F1
.text:0040F82E ; ---------------------------------------------------------------------------
.text:0040F82E
.text:0040F82E loc_40F82E:                             ; CODE XREF: ___addmntentstr+A2↑j
.text:0040F82E                                         ; ___addmntentstr+AA↑j ...
.text:0040F82E                 test    al, al
.text:0040F830                 jz      loc_40F750
.text:0040F836                 mov     [esp+4Ch+Buffer], edx ; Str
.text:0040F839                 mov     ebx, edx
.text:0040F83B                 call    strlen
.text:0040F840                 lea     edx, ds:1[eax*4]
.text:0040F847                 mov     [esp+4Ch+Buffer], edx ; Size
.text:0040F84A                 call    malloc
.text:0040F84F                 mov     [esp+4Ch+var_24], eax
.text:0040F853                 mov     edx, eax
.text:0040F855                 lea     esi, [esi+0]
.text:0040F859                 lea     edi, [edi+0]
.text:0040F860
.text:0040F860 loc_40F860:                             ; CODE XREF: ___addmntentstr+1E8↓j
.text:0040F860                 movzx   eax, byte ptr [ebx]
.text:0040F863                 cmp     al, 20h ; ' '
.text:0040F865                 jz      short loc_40F899
.text:0040F867                 cmp     al, 9
.text:0040F869                 jz      short loc_40F888
.text:0040F86B                 cmp     al, 5Ch ; '\'
.text:0040F86D                 jz      short loc_40F87F
.text:0040F86F                 mov     [edx], al
.text:0040F871
.text:0040F871 loc_40F871:                             ; CODE XREF: ___addmntentstr+1F6↓j
.text:0040F871                                         ; ___addmntentstr+207↓j ...
.text:0040F871                 movzx   ecx, byte ptr [ebx]
.text:0040F874                 inc     edx
.text:0040F875                 inc     ebx
.text:0040F876                 test    cl, cl
.text:0040F878                 jnz     short loc_40F860
.text:0040F87A                 jmp     loc_40F750
.text:0040F87F ; ---------------------------------------------------------------------------
.text:0040F87F
.text:0040F87F loc_40F87F:                             ; CODE XREF: ___addmntentstr+1DD↑j
.text:0040F87F                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040F882                 inc     edx
.text:0040F883                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040F886                 jmp     short loc_40F871
.text:0040F888 ; ---------------------------------------------------------------------------
.text:0040F888
.text:0040F888 loc_40F888:                             ; CODE XREF: ___addmntentstr+1D9↑j
.text:0040F888                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040F88B                 inc     edx
.text:0040F88C                 mov     byte ptr [edx], 30h ; '0'
.text:0040F88F                 inc     edx
.text:0040F890                 mov     byte ptr [edx], 31h ; '1'
.text:0040F893                 inc     edx
.text:0040F894                 mov     byte ptr [edx], 32h ; '2'
.text:0040F897                 jmp     short loc_40F871
.text:0040F899 ; ---------------------------------------------------------------------------
.text:0040F899
.text:0040F899 loc_40F899:                             ; CODE XREF: ___addmntentstr+1D5↑j
.text:0040F899                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040F89C                 inc     edx
.text:0040F89D                 mov     byte ptr [edx], 30h ; '0'
.text:0040F8A0                 inc     edx
.text:0040F8A1                 mov     byte ptr [edx], 34h ; '4'
.text:0040F8A4                 inc     edx
.text:0040F8A5                 mov     byte ptr [edx], 30h ; '0'
.text:0040F8A8                 jmp     short loc_40F871
.text:0040F8AA ; ---------------------------------------------------------------------------
.text:0040F8AA
.text:0040F8AA loc_40F8AA:                             ; CODE XREF: ___addmntentstr+72↑j
.text:0040F8AA                                         ; ___addmntentstr+7A↑j ...
.text:0040F8AA                 test    al, al
.text:0040F8AC                 jz      loc_40F720
.text:0040F8B2                 mov     [esp+4Ch+Buffer], edx ; Str
.text:0040F8B5                 mov     ebx, edx
.text:0040F8B7                 call    strlen
.text:0040F8BC                 lea     edx, ds:1[eax*4]
.text:0040F8C3                 mov     [esp+4Ch+Buffer], edx ; Size
.text:0040F8C6                 call    malloc
.text:0040F8CB                 mov     [esp+4Ch+var_28], eax
.text:0040F8CF                 mov     edx, eax
.text:0040F8D1                 jmp     short loc_40F8E0
.text:0040F8D1 ; ---------------------------------------------------------------------------
.text:0040F8D3                 align 10h
.text:0040F8E0
.text:0040F8E0 loc_40F8E0:                             ; CODE XREF: ___addmntentstr+241↑j
.text:0040F8E0                                         ; ___addmntentstr+268↓j
.text:0040F8E0                 movzx   eax, byte ptr [ebx]
.text:0040F8E3                 cmp     al, 20h ; ' '
.text:0040F8E5                 jz      short loc_40F919
.text:0040F8E7                 cmp     al, 9
.text:0040F8E9                 jz      short loc_40F908
.text:0040F8EB                 cmp     al, 5Ch ; '\'
.text:0040F8ED                 jz      short loc_40F8FF
.text:0040F8EF                 mov     [edx], al
.text:0040F8F1
.text:0040F8F1 loc_40F8F1:                             ; CODE XREF: ___addmntentstr+276↓j
.text:0040F8F1                                         ; ___addmntentstr+287↓j ...
.text:0040F8F1                 movzx   ecx, byte ptr [ebx]
.text:0040F8F4                 inc     edx
.text:0040F8F5                 inc     ebx
.text:0040F8F6                 test    cl, cl
.text:0040F8F8                 jnz     short loc_40F8E0
.text:0040F8FA                 jmp     loc_40F720
.text:0040F8FF ; ---------------------------------------------------------------------------
.text:0040F8FF
.text:0040F8FF loc_40F8FF:                             ; CODE XREF: ___addmntentstr+25D↑j
.text:0040F8FF                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040F902                 inc     edx
.text:0040F903                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040F906                 jmp     short loc_40F8F1
.text:0040F908 ; ---------------------------------------------------------------------------
.text:0040F908
.text:0040F908 loc_40F908:                             ; CODE XREF: ___addmntentstr+259↑j
.text:0040F908                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040F90B                 inc     edx
.text:0040F90C                 mov     byte ptr [edx], 30h ; '0'
.text:0040F90F                 inc     edx
.text:0040F910                 mov     byte ptr [edx], 31h ; '1'
.text:0040F913                 inc     edx
.text:0040F914                 mov     byte ptr [edx], 32h ; '2'
.text:0040F917                 jmp     short loc_40F8F1
.text:0040F919 ; ---------------------------------------------------------------------------
.text:0040F919
.text:0040F919 loc_40F919:                             ; CODE XREF: ___addmntentstr+255↑j
.text:0040F919                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040F91C                 inc     edx
.text:0040F91D                 mov     byte ptr [edx], 30h ; '0'
.text:0040F920                 inc     edx
.text:0040F921                 mov     byte ptr [edx], 34h ; '4'
.text:0040F924                 inc     edx
.text:0040F925                 mov     byte ptr [edx], 30h ; '0'
.text:0040F928                 jmp     short loc_40F8F1
.text:0040F928 ; ---------------------------------------------------------------------------
.text:0040F92A                 align 10h
.text:0040F930
.text:0040F930 loc_40F930:                             ; CODE XREF: ___addmntentstr+42↑j
.text:0040F930                                         ; ___addmntentstr+4A↑j ...
.text:0040F930                 test    al, al
.text:0040F932                 jz      loc_40F6F0
.text:0040F938                 mov     ebx, [esp+4Ch+var_2C]
.text:0040F93C                 mov     [esp+4Ch+Buffer], ebx ; Str
.text:0040F93F                 call    strlen
.text:0040F944                 lea     edx, ds:1[eax*4]
.text:0040F94B                 mov     [esp+4Ch+Buffer], edx ; Size
.text:0040F94E                 call    malloc
.text:0040F953                 mov     [esp+4Ch+var_2C], eax
.text:0040F957                 mov     edx, eax
.text:0040F959                 lea     esi, [esi+0]
.text:0040F960
.text:0040F960 loc_40F960:                             ; CODE XREF: ___addmntentstr+2E8↓j
.text:0040F960                 movzx   eax, byte ptr [ebx]
.text:0040F963                 cmp     al, 20h ; ' '
.text:0040F965                 jz      short loc_40F9A0
.text:0040F967                 cmp     al, 9
.text:0040F969                 jz      short loc_40F988
.text:0040F96B                 cmp     al, 5Ch ; '\'
.text:0040F96D                 jz      short loc_40F97F
.text:0040F96F                 mov     [edx], al
.text:0040F971
.text:0040F971 loc_40F971:                             ; CODE XREF: ___addmntentstr+2F6↓j
.text:0040F971                                         ; ___addmntentstr+307↓j ...
.text:0040F971                 movzx   ecx, byte ptr [ebx]
.text:0040F974                 inc     edx
.text:0040F975                 inc     ebx
.text:0040F976                 test    cl, cl
.text:0040F978                 jnz     short loc_40F960
.text:0040F97A                 jmp     loc_40F6F0
.text:0040F97F ; ---------------------------------------------------------------------------
.text:0040F97F
.text:0040F97F loc_40F97F:                             ; CODE XREF: ___addmntentstr+2DD↑j
.text:0040F97F                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040F982                 inc     edx
.text:0040F983                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040F986                 jmp     short loc_40F971
.text:0040F988 ; ---------------------------------------------------------------------------
.text:0040F988
.text:0040F988 loc_40F988:                             ; CODE XREF: ___addmntentstr+2D9↑j
.text:0040F988                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040F98B                 inc     edx
.text:0040F98C                 mov     byte ptr [edx], 30h ; '0'
.text:0040F98F                 inc     edx
.text:0040F990                 mov     byte ptr [edx], 31h ; '1'
.text:0040F993                 inc     edx
.text:0040F994                 mov     byte ptr [edx], 32h ; '2'
.text:0040F997                 jmp     short loc_40F971
.text:0040F997 ; ---------------------------------------------------------------------------
.text:0040F999                 align 10h
.text:0040F9A0
.text:0040F9A0 loc_40F9A0:                             ; CODE XREF: ___addmntentstr+2D5↑j
.text:0040F9A0                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040F9A3                 inc     edx
.text:0040F9A4                 mov     byte ptr [edx], 30h ; '0'
.text:0040F9A7                 inc     edx
.text:0040F9A8                 mov     byte ptr [edx], 34h ; '4'
.text:0040F9AB                 inc     edx
.text:0040F9AC                 mov     byte ptr [edx], 30h ; '0'
.text:0040F9AF                 jmp     short loc_40F971
.text:0040F9B1 ; ---------------------------------------------------------------------------
.text:0040F9B1
.text:0040F9B1 loc_40F9B1:                             ; CODE XREF: ___addmntentstr+38↑j
.text:0040F9B1                 movzx   eax, byte ptr [ecx]
.text:0040F9B4                 jmp     loc_40F930
.text:0040F9B4 ___addmntentstr endp
.text:0040F9B4
.text:0040F9B4 ; ---------------------------------------------------------------------------
.text:0040F9B9                 align 10h
.text:0040F9C0
.text:0040F9C0 ; =============== S U B R O U T I N E =======================================
.text:0040F9C0
.text:0040F9C0
.text:0040F9C0 sub_40F9C0      proc near               ; CODE XREF: sub_40D240+99↑p
.text:0040F9C0
.text:0040F9C0 nBufferLength   = dword ptr -1Ch
.text:0040F9C0 lpBuffer        = dword ptr -18h
.text:0040F9C0 dwBytes         = dword ptr -14h
.text:0040F9C0 var_8           = dword ptr -8
.text:0040F9C0 var_4           = dword ptr -4
.text:0040F9C0
.text:0040F9C0                 sub     esp, 1Ch
.text:0040F9C3                 mov     [esp+1Ch+var_8], ebx
.text:0040F9C7                 mov     [esp+1Ch+var_4], esi
.text:0040F9CB                 mov     [esp+1Ch+lpBuffer], 0 ; lpBuffer
.text:0040F9D3                 mov     [esp+1Ch+nBufferLength], 0 ; nBufferLength
.text:0040F9DA                 call    GetLogicalDriveStringsA
.text:0040F9DF                 sub     esp, 8
.text:0040F9E2                 mov     ebx, eax
.text:0040F9E4                 call    GetProcessHeap
.text:0040F9E9                 mov     [esp+1Ch+nBufferLength], eax ; hHeap
.text:0040F9EC                 mov     [esp+1Ch+dwBytes], ebx ; dwBytes
.text:0040F9F0                 mov     [esp+1Ch+lpBuffer], 0 ; dwFlags
.text:0040F9F8                 call    HeapAlloc
.text:0040F9FD                 sub     esp, 0Ch
.text:0040FA00                 mov     esi, eax
.text:0040FA02                 mov     [esp+1Ch+nBufferLength], ebx ; nBufferLength
.text:0040FA05                 mov     [esp+1Ch+lpBuffer], eax ; lpBuffer
.text:0040FA09                 call    GetLogicalDriveStringsA
.text:0040FA0E                 sub     esp, 8
.text:0040FA11                 mov     eax, esi
.text:0040FA13                 mov     ebx, [esp+1Ch+var_8]
.text:0040FA17                 mov     esi, [esp+1Ch+var_4]
.text:0040FA1B                 add     esp, 1Ch
.text:0040FA1E                 retn
.text:0040FA1E sub_40F9C0      endp
.text:0040FA1E
.text:0040FA1F
.text:0040FA1F ; =============== S U B R O U T I N E =======================================
.text:0040FA1F
.text:0040FA1F
.text:0040FA1F ; int __cdecl sub_40FA1F(char *, char *)
.text:0040FA1F sub_40FA1F      proc near               ; DATA XREF: sub_40FA1F:loc_40FAAD↓o
.text:0040FA1F
.text:0040FA1F FileName        = dword ptr -1Ch
.text:0040FA1F Mode            = dword ptr -18h
.text:0040FA1F dwBytes         = dword ptr -14h
.text:0040FA1F arg_0           = dword ptr  4
.text:0040FA1F arg_4           = dword ptr  8
.text:0040FA1F
.text:0040FA1F                 ja      short $+2
.text:0040FA21
.text:0040FA21 loc_40FA21:                             ; CODE XREF: sub_40FA1F↑j
.text:0040FA21                 jmp     short loc_40FA30
.text:0040FA21 ; ---------------------------------------------------------------------------
.text:0040FA23                 align 10h
.text:0040FA30
.text:0040FA30 loc_40FA30:                             ; CODE XREF: sub_40FA1F:loc_40FA21↑j
.text:0040FA30                 push    edi
.text:0040FA31                 push    esi
.text:0040FA32                 push    ebx
.text:0040FA33                 sub     esp, 10h
.text:0040FA36                 mov     ebx, [esp+1Ch+arg_0]
.text:0040FA3A                 mov     edx, [esp+1Ch+arg_4]
.text:0040FA3E                 mov     [esp+1Ch+FileName], ebx ; FileName
.text:0040FA41                 mov     [esp+1Ch+Mode], edx ; Mode
.text:0040FA45                 call    fopen
.text:0040FA4A                 test    eax, eax
.text:0040FA4C                 mov     edi, eax
.text:0040FA4E                 jz      short loc_40FAAD
.text:0040FA50
.text:0040FA50 loc_40FA50:                             ; CODE XREF: sub_40FA1F+A2↓j
.text:0040FA50                                         ; sub_40FA1F+AB↓j
.text:0040FA50                 mov     [esp+1Ch+Mode], 0 ; lpBuffer
.text:0040FA58                 mov     [esp+1Ch+FileName], 0 ; nBufferLength
.text:0040FA5F                 call    GetLogicalDriveStringsA
.text:0040FA64                 sub     esp, 8
.text:0040FA67                 mov     esi, eax
.text:0040FA69                 call    GetProcessHeap
.text:0040FA6E                 mov     [esp+1Ch+FileName], eax ; hHeap
.text:0040FA71                 mov     [esp+1Ch+dwBytes], esi ; dwBytes
.text:0040FA75                 mov     [esp+1Ch+Mode], 0 ; dwFlags
.text:0040FA7D                 call    HeapAlloc
.text:0040FA82                 sub     esp, 0Ch
.text:0040FA85                 mov     ebx, eax
.text:0040FA87                 mov     [esp+1Ch+FileName], esi ; nBufferLength
.text:0040FA8A                 mov     [esp+1Ch+Mode], eax ; lpBuffer
.text:0040FA8E                 call    GetLogicalDriveStringsA
.text:0040FA93                 mov     off_41D0D4, ebx ; "notset"
.text:0040FA99                 sub     esp, 8
.text:0040FA9C                 xor     eax, eax
.text:0040FA9E                 test    ebx, ebx
.text:0040FAA0                 setz    al
.text:0040FAA3                 add     esp, 10h
.text:0040FAA6                 pop     ebx
.text:0040FAA7                 dec     eax
.text:0040FAA8                 and     eax, edi
.text:0040FAAA                 pop     esi
.text:0040FAAB                 pop     edi
.text:0040FAAC                 retn
.text:0040FAAD ; ---------------------------------------------------------------------------
.text:0040FAAD
.text:0040FAAD loc_40FAAD:                             ; CODE XREF: sub_40FA1F+2F↑j
.text:0040FAAD                 mov     [esp+1Ch+Mode], offset sub_40FA1F ; Mode
.text:0040FAB5                 mov     [esp+1Ch+FileName], ebx ; FileName
.text:0040FAB8                 call    fopen
.text:0040FABD                 test    eax, eax
.text:0040FABF                 mov     edi, eax
.text:0040FAC1                 jnz     short loc_40FA50
.text:0040FAC3                 call    sub_40FCB0
.text:0040FAC8                 mov     edi, eax
.text:0040FACA                 jmp     short loc_40FA50
.text:0040FACA sub_40FA1F      endp
.text:0040FACA
.text:0040FACA ; ---------------------------------------------------------------------------
.text:0040FACC                 align 10h
.text:0040FAD0                 sub     esp, 0Ch
.text:0040FAD3                 mov     eax, [esp+10h]
.text:0040FAD7                 test    eax, eax
.text:0040FAD9                 jz      short loc_40FAE3
.text:0040FADB                 mov     [esp], eax
.text:0040FADE                 call    fclose
.text:0040FAE3
.text:0040FAE3 loc_40FAE3:                             ; CODE XREF: .text:0040FAD9↑j
.text:0040FAE3                 call    GetProcessHeap
.text:0040FAE8                 mov     [esp], eax
.text:0040FAEB                 mov     ecx, off_41D0D4 ; "notset"
.text:0040FAF1                 mov     dword ptr [esp+4], 0
.text:0040FAF9                 mov     [esp+8], ecx
.text:0040FAFD                 call    HeapFree
.text:0040FB02                 mov     edx, off_41D0D0 ; "notset"
.text:0040FB08                 sub     esp, 0Ch
.text:0040FB0B                 mov     eax, 1
.text:0040FB10                 mov     off_41D0D4, edx ; "notset"
.text:0040FB16                 add     esp, 0Ch
.text:0040FB19                 retn
.text:0040FB19 ; ---------------------------------------------------------------------------
.text:0040FB1A                 align 10h
.text:0040FB20                 push    edi
.text:0040FB21                 push    esi
.text:0040FB22                 push    ebx
.text:0040FB23                 sub     esp, 10h
.text:0040FB26                 mov     edi, [esp+24h]
.text:0040FB2A                 mov     [esp], edi
.text:0040FB2D                 call    strlen
.text:0040FB32                 mov     edx, [esp+20h]
.text:0040FB36                 mov     esi, eax
.text:0040FB38                 mov     ebx, [edx+0Ch]
.text:0040FB3B                 nop
.text:0040FB3C                 lea     esi, [esi+0]
.text:0040FB40
.text:0040FB40 loc_40FB40:                             ; CODE XREF: .text:0040FB71↓j
.text:0040FB40                 mov     [esp+4], edi
.text:0040FB44                 mov     [esp], ebx
.text:0040FB47                 call    strstr
.text:0040FB4C                 test    eax, eax
.text:0040FB4E                 jz      short loc_40FB73
.text:0040FB50                 cmp     eax, ebx
.text:0040FB52                 jz      short loc_40FB75
.text:0040FB54                 cmp     byte ptr [eax-1], 2Ch ; ','
.text:0040FB58                 jz      short loc_40FB80
.text:0040FB5A
.text:0040FB5A loc_40FB5A:                             ; CODE XREF: .text:0040FB90↓j
.text:0040FB5A                 mov     [esp], ebx
.text:0040FB5D                 mov     dword ptr [esp+4], 2Ch ; ','
.text:0040FB65                 call    strchr
.text:0040FB6A                 test    eax, eax
.text:0040FB6C                 mov     ebx, eax
.text:0040FB6E                 jz      short loc_40FB73
.text:0040FB70                 inc     ebx
.text:0040FB71                 jmp     short loc_40FB40
.text:0040FB73 ; ---------------------------------------------------------------------------
.text:0040FB73
.text:0040FB73 loc_40FB73:                             ; CODE XREF: .text:0040FB4E↑j
.text:0040FB73                                         ; .text:0040FB6E↑j
.text:0040FB73                 xor     eax, eax
.text:0040FB75
.text:0040FB75 loc_40FB75:                             ; CODE XREF: .text:0040FB52↑j
.text:0040FB75                                         ; .text:0040FB86↓j ...
.text:0040FB75                 add     esp, 10h
.text:0040FB78                 pop     ebx
.text:0040FB79                 pop     esi
.text:0040FB7A                 pop     edi
.text:0040FB7B                 retn
.text:0040FB7B ; ---------------------------------------------------------------------------
.text:0040FB7C                 align 10h
.text:0040FB80
.text:0040FB80 loc_40FB80:                             ; CODE XREF: .text:0040FB58↑j
.text:0040FB80                 movzx   edx, byte ptr [esi+eax]
.text:0040FB84                 test    dl, dl
.text:0040FB86                 jz      short loc_40FB75
.text:0040FB88                 cmp     dl, 3Dh ; '='
.text:0040FB8B                 jz      short loc_40FB75
.text:0040FB8D                 cmp     dl, 2Ch ; ','
.text:0040FB90                 jnz     short loc_40FB5A
.text:0040FB92                 jmp     short loc_40FB75
.text:0040FB92 ; ---------------------------------------------------------------------------
.text:0040FB94                 align 10h
.text:0040FBA0
.text:0040FBA0 ; =============== S U B R O U T I N E =======================================
.text:0040FBA0
.text:0040FBA0 ; Attributes: noreturn
.text:0040FBA0
.text:0040FBA0 sub_40FBA0      proc near               ; CODE XREF: .text:0040F389↑p
.text:0040FBA0                                         ; sub_40FBA0↓j
.text:0040FBA0                 jmp     short sub_40FBA0
.text:0040FBA0 sub_40FBA0      endp
.text:0040FBA0
.text:0040FBA0 ; ---------------------------------------------------------------------------
.text:0040FBA2                 align 10h
.text:0040FBB0
.text:0040FBB0 ; =============== S U B R O U T I N E =======================================
.text:0040FBB0
.text:0040FBB0
.text:0040FBB0 sub_40FBB0      proc near               ; CODE XREF: .text:0040F0E5↑p
.text:0040FBB0
.text:0040FBB0 FileHandle      = dword ptr -1Ch
.text:0040FBB0 dwFileOffsetLow = dword ptr -18h
.text:0040FBB0 dwFileOffsetHigh= dword ptr -14h
.text:0040FBB0 nNumberOfBytesToUnlockLow= dword ptr -10h
.text:0040FBB0 nNumberOfBytesToUnlockHigh= dword ptr -0Ch
.text:0040FBB0 var_8           = dword ptr -8
.text:0040FBB0 var_4           = dword ptr -4
.text:0040FBB0 arg_0           = dword ptr  4
.text:0040FBB0
.text:0040FBB0                 sub     esp, 1Ch
.text:0040FBB3                 mov     edx, [esp+1Ch+arg_0]
.text:0040FBB7                 mov     [esp+1Ch+var_4], esi
.text:0040FBBB                 mov     [esp+1Ch+var_8], ebx
.text:0040FBBF                 mov     ebx, [edx+10h]
.text:0040FBC2                 mov     [esp+1Ch+FileHandle], ebx ; FileHandle
.text:0040FBC5                 call    _get_osfhandle
.text:0040FBCA                 mov     [esp+1Ch+FileHandle], ebx ; FileHandle
.text:0040FBCD                 mov     esi, eax
.text:0040FBCF                 call    _filelengthi64
.text:0040FBD4                 mov     [esp+1Ch+nNumberOfBytesToUnlockLow], eax ; nNumberOfBytesToUnlockLow
.text:0040FBD8                 cdq
.text:0040FBD9                 mov     [esp+1Ch+FileHandle], esi ; hFile
.text:0040FBDC                 mov     [esp+1Ch+nNumberOfBytesToUnlockHigh], edx ; nNumberOfBytesToUnlockHigh
.text:0040FBE0                 mov     [esp+1Ch+dwFileOffsetHigh], 0 ; dwFileOffsetHigh
.text:0040FBE8                 mov     [esp+1Ch+dwFileOffsetLow], 0 ; dwFileOffsetLow
.text:0040FBF0                 call    UnlockFile
.text:0040FBF5                 sub     esp, 14h
.text:0040FBF8                 mov     ebx, [esp+1Ch+var_8]
.text:0040FBFC                 mov     esi, [esp+1Ch+var_4]
.text:0040FC00                 add     esp, 1Ch
.text:0040FC03                 retn
.text:0040FC03 sub_40FBB0      endp
.text:0040FC03
.text:0040FC03 ; ---------------------------------------------------------------------------
.text:0040FC04                 align 10h
.text:0040FC10
.text:0040FC10 ; =============== S U B R O U T I N E =======================================
.text:0040FC10
.text:0040FC10
.text:0040FC10 ; int __cdecl sub_40FC10(int, char *Control)
.text:0040FC10 sub_40FC10      proc near               ; CODE XREF: .text:0040EFA6↑p
.text:0040FC10                                         ; .text:0040EFF6↑p ...
.text:0040FC10
.text:0040FC10 Str             = dword ptr -1Ch
.text:0040FC10 Val             = dword ptr -18h
.text:0040FC10 var_8           = dword ptr -8
.text:0040FC10 var_4           = dword ptr -4
.text:0040FC10 arg_0           = dword ptr  4
.text:0040FC10 Control         = dword ptr  8
.text:0040FC10
.text:0040FC10                 sub     esp, 1Ch
.text:0040FC13                 xor     eax, eax
.text:0040FC15                 mov     edx, [esp+1Ch+Control]
.text:0040FC19                 mov     [esp+1Ch+var_4], esi
.text:0040FC1D                 mov     esi, [esp+1Ch+arg_0]
.text:0040FC21                 mov     [esp+1Ch+var_8], ebx
.text:0040FC25                 mov     ebx, [esi]
.text:0040FC27                 test    ebx, ebx
.text:0040FC29                 jz      short loc_40FC58
.text:0040FC2B                 movzx   eax, byte ptr [edx]
.text:0040FC2E                 test    al, al
.text:0040FC30                 jz      short loc_40FC50
.text:0040FC32                 cmp     byte ptr [edx+1], 0
.text:0040FC36                 jnz     short loc_40FC90
.text:0040FC38                 movzx   ecx, byte ptr [ebx]
.text:0040FC3B                 mov     edx, ebx
.text:0040FC3D                 cmp     cl, al
.text:0040FC3F                 jz      short loc_40FC82
.text:0040FC41                 test    cl, cl
.text:0040FC43                 jnz     short loc_40FC64
.text:0040FC45                 lea     esi, [esi+0]
.text:0040FC49                 lea     edi, [edi+0]
.text:0040FC50
.text:0040FC50 loc_40FC50:                             ; CODE XREF: sub_40FC10+20↑j
.text:0040FC50                                         ; sub_40FC10+74↓j
.text:0040FC50                 mov     dword ptr [esi], 0
.text:0040FC56
.text:0040FC56 loc_40FC56:                             ; CODE XREF: sub_40FC10+7C↓j
.text:0040FC56                 mov     eax, ebx
.text:0040FC58
.text:0040FC58 loc_40FC58:                             ; CODE XREF: sub_40FC10+19↑j
.text:0040FC58                 mov     ebx, [esp+1Ch+var_8]
.text:0040FC5C                 mov     esi, [esp+1Ch+var_4]
.text:0040FC60                 add     esp, 1Ch
.text:0040FC63                 retn
.text:0040FC64 ; ---------------------------------------------------------------------------
.text:0040FC64
.text:0040FC64 loc_40FC64:                             ; CODE XREF: sub_40FC10+33↑j
.text:0040FC64                 movsx   edx, al
.text:0040FC67                 mov     [esp+1Ch+Val], edx ; Val
.text:0040FC6B                 lea     edx, [ebx+1]
.text:0040FC6E                 mov     [esp+1Ch+Str], edx ; Str
.text:0040FC71                 call    strchr
.text:0040FC76                 lea     esi, [esi+0]
.text:0040FC79                 lea     edi, [edi+0]
.text:0040FC80
.text:0040FC80 loc_40FC80:                             ; CODE XREF: sub_40FC10+8C↓j
.text:0040FC80                 mov     edx, eax
.text:0040FC82
.text:0040FC82 loc_40FC82:                             ; CODE XREF: sub_40FC10+2F↑j
.text:0040FC82                 test    edx, edx
.text:0040FC84                 jz      short loc_40FC50
.text:0040FC86                 mov     byte ptr [edx], 0
.text:0040FC89                 inc     edx
.text:0040FC8A                 mov     [esi], edx
.text:0040FC8C                 jmp     short loc_40FC56
.text:0040FC8C ; ---------------------------------------------------------------------------
.text:0040FC8E                 align 10h
.text:0040FC90
.text:0040FC90 loc_40FC90:                             ; CODE XREF: sub_40FC10+26↑j
.text:0040FC90                 mov     [esp+1Ch+Val], edx ; Control
.text:0040FC94                 mov     [esp+1Ch+Str], ebx ; Str
.text:0040FC97                 call    strpbrk
.text:0040FC9C                 jmp     short loc_40FC80
.text:0040FC9C sub_40FC10      endp
.text:0040FC9C
.text:0040FC9C ; ---------------------------------------------------------------------------
.text:0040FC9E                 align 10h
.text:0040FCA0 ; const char aTmpf[]
.text:0040FCA0 aTmpf           db 'tmpf',0             ; DATA XREF: sub_40FCB0+20↓o
.text:0040FCA5 ; const char aWBd[]
.text:0040FCA5 aWBd            db 'w+bD',0             ; DATA XREF: sub_40FCB0+5E↓o
.text:0040FCAA                 align 10h
.text:0040FCB0
.text:0040FCB0 ; =============== S U B R O U T I N E =======================================
.text:0040FCB0
.text:0040FCB0
.text:0040FCB0 sub_40FCB0      proc near               ; CODE XREF: sub_40FA1F+A4↑p
.text:0040FCB0
.text:0040FCB0 FileHandle      = dword ptr -13Ch
.text:0040FCB0 Format          = dword ptr -138h
.text:0040FCB0 var_134         = dword ptr -134h
.text:0040FCB0 var_130         = dword ptr -130h
.text:0040FCB0 var_12C         = dword ptr -12Ch
.text:0040FCB0 Buffer          = byte ptr -11Ch
.text:0040FCB0 var_8           = dword ptr -8
.text:0040FCB0 var_4           = dword ptr -4
.text:0040FCB0
.text:0040FCB0                 sub     esp, 13Ch
.text:0040FCB6                 mov     [esp+13Ch+var_8], ebx
.text:0040FCBD                 lea     ebx, [esp+13Ch+Buffer]
.text:0040FCC1                 mov     [esp+13Ch+var_4], esi
.text:0040FCC8                 mov     [esp+13Ch+var_12C], 0 ; int
.text:0040FCD0                 mov     [esp+13Ch+var_130], offset aTmpf ; "tmpf"
.text:0040FCD8                 mov     [esp+13Ch+var_134], 0 ; char *
.text:0040FCE0                 mov     [esp+13Ch+Format], 104h ; int
.text:0040FCE8                 mov     [esp+13Ch+FileHandle], ebx ; Buffer
.text:0040FCEB                 call    sub_418F40
.text:0040FCF0                 xor     edx, edx
.text:0040FCF2                 test    eax, eax
.text:0040FCF4                 jnz     short loc_40FD26
.text:0040FCF6                 mov     [esp+13Ch+FileHandle], ebx ; FileName
.text:0040FCF9                 mov     [esp+13Ch+Format], 0 ; int
.text:0040FD01                 call    sub_4192C0
.text:0040FD06                 xor     edx, edx
.text:0040FD08                 mov     ebx, eax
.text:0040FD0A                 test    eax, eax
.text:0040FD0C                 js      short loc_40FD26
.text:0040FD0E                 mov     [esp+13Ch+Format], offset aWBd ; "w+bD"
.text:0040FD16                 mov     [esp+13Ch+FileHandle], eax ; FileHandle
.text:0040FD19                 call    _fdopen
.text:0040FD1E                 test    eax, eax
.text:0040FD20                 mov     esi, eax
.text:0040FD22                 jz      short loc_40FD3D
.text:0040FD24
.text:0040FD24 loc_40FD24:                             ; CODE XREF: sub_40FCB0+95↓j
.text:0040FD24                 mov     edx, esi
.text:0040FD26
.text:0040FD26 loc_40FD26:                             ; CODE XREF: sub_40FCB0+44↑j
.text:0040FD26                                         ; sub_40FCB0+5C↑j
.text:0040FD26                 mov     ebx, [esp+13Ch+var_8]
.text:0040FD2D                 mov     eax, edx
.text:0040FD2F                 mov     esi, [esp+13Ch+var_4]
.text:0040FD36                 add     esp, 13Ch
.text:0040FD3C                 retn
.text:0040FD3D ; ---------------------------------------------------------------------------
.text:0040FD3D
.text:0040FD3D loc_40FD3D:                             ; CODE XREF: sub_40FCB0+72↑j
.text:0040FD3D                 mov     [esp+13Ch+FileHandle], ebx ; FileHandle
.text:0040FD40                 call    _close
.text:0040FD45                 jmp     short loc_40FD24
.text:0040FD45 sub_40FCB0      endp
.text:0040FD45
.text:0040FD45 ; ---------------------------------------------------------------------------
.text:0040FD47                 db 9 dup(90h)
.text:0040FD50 dword_40FD50    dd 3020100h, 7060504h, 0B0A0908h, 0F0E0D0Ch, 13121110h
.text:0040FD50                                         ; DATA XREF: .text:004102D4↓o
.text:0040FD50                 dd 17161514h, 1B1A1918h, 1F1E1D1Ch, 23222120h, 27262524h
.text:0040FD50                 dd 2B2A2928h, 2F2E2D2Ch, 33323130h, 37363534h, 3B3A3938h
.text:0040FD50                 dd 3F3E3D3Ch, 43424140h, 47464544h, 4B4A4948h, 4F4E4D4Ch
.text:0040FD50                 dd 53525150h, 57565554h, 5B5A5958h, 5F5E5D5Ch, 63626160h
.text:0040FD50                 dd 67666564h, 6B6A6968h, 6F6E6D6Ch, 73727170h, 77767574h
.text:0040FD50                 dd 7B7A7978h, 7F7E7D7Ch, 83828180h, 87868584h, 8B8A8988h
.text:0040FD50                 dd 8F8E8D8Ch, 93929190h, 97969594h, 9B9A9998h, 9F9E9D9Ch
.text:0040FD50                 dd 0A3A2A1A0h, 0A7A6A5A4h, 0ABAAA9A8h, 0AFAEADACh, 0B3B2B1B0h
.text:0040FD50                 dd 0B7B6B5B4h, 0BBBAB9B8h, 0BFBEBDBCh, 0C3C2C1C0h, 0C7C6C5C4h
.text:0040FD50                 dd 0CBCAC9C8h, 0CFCECDCCh, 0D3D2D1D0h, 0D7D6D5D4h, 0DBDAD9D8h
.text:0040FD50                 dd 0DFDEDDDCh, 0E3E2E1E0h, 0E7E6E5E4h, 0EBEAE9E8h, 0EFEEEDECh
.text:0040FD50                 dd 0F3F2F1F0h, 0F7F6F5F4h, 0FBFAF9F8h, 0FFFEFDFCh, 8, 1
.text:0040FD50                 dd 8, 0
.text:0040FE60                 dd 0FFh, 18h, 1Ch, 0
.text:0040FE70 dword_40FE70    dd 1, 2, 3, 4, 5, 6, 7, 8, 9, 0Ah, 0Bh, 0Ch, 0Dh, 0Eh
.text:0040FE70                 dd 0Fh, 10h, 11h, 12h, 13h, 14h, 15h, 16h, 17h, 18h, 19h
.text:0040FE70                 dd 1Ah, 1Bh, 1Ch, 1Dh, 1Eh, 1Fh, 20h, 21h, 22h, 23h, 24h
.text:0040FE70                 dd 25h, 26h, 27h, 28h, 29h, 2Ah, 2Bh, 2Ch, 2Dh, 2Eh, 2Fh
.text:0040FE70                 dd 30h, 31h, 32h, 33h, 34h, 35h, 36h, 37h, 38h, 39h, 3Ah
.text:0040FE70                 dd 3Bh, 3Ch, 3Dh, 3Eh, 3Fh, 40h, 41h, 42h, 43h, 44h, 45h
.text:0040FE70                 dd 46h, 47h, 48h, 49h, 4Ah, 4Bh, 4Ch, 4Dh, 4Eh, 4Fh, 50h
.text:0040FE70                 dd 51h, 52h, 53h, 54h, 55h, 56h, 57h, 58h, 59h, 5Ah, 5Bh
.text:0040FE70                 dd 5Ch, 5Dh, 5Eh, 5Fh, 60h, 61h, 62h, 63h, 64h, 65h, 66h
.text:0040FE70                 dd 67h, 68h, 69h, 6Ah, 6Bh, 6Ch, 6Dh, 6Eh, 6Fh, 70h, 71h
.text:0040FE70                 dd 72h, 73h, 74h, 75h, 76h, 77h, 78h, 79h, 7Ah, 7Bh, 7Ch
.text:0040FE70                 dd 7Dh, 7Eh, 7Fh, 80h, 81h, 82h, 83h, 84h, 85h, 86h, 87h
.text:0040FE70                 dd 88h, 89h, 8Ah, 8Bh, 8Ch, 8Dh, 8Eh, 8Fh, 90h, 91h, 92h
.text:0040FE70                 dd 93h, 94h, 95h, 96h, 97h, 98h, 99h, 9Ah, 9Bh, 9Ch, 9Dh
.text:0040FE70                 dd 9Eh, 9Fh, 0A0h, 0A1h, 0A2h, 0A3h, 0A4h, 0A5h, 0A6h
.text:0040FE70                 dd 0A7h, 0A8h, 0A9h, 0AAh, 0ABh, 0ACh, 0ADh, 0AEh, 0AFh
.text:0040FE70                 dd 0B0h, 0B1h, 0B2h, 0B3h, 0B4h, 0B5h, 0B6h, 0B7h, 0B8h
.text:0040FE70                 dd 0B9h, 0BAh, 0BBh, 0BCh, 0BDh, 0BEh, 0BFh, 0C0h, 0C1h
.text:0040FE70                 dd 0C2h, 0C3h, 0C4h, 0C5h, 0C6h, 0C7h, 0C8h, 0C9h, 0CAh
.text:0040FE70                 dd 0CBh, 0CCh, 0CDh, 0CEh, 0CFh, 0D0h, 0D1h, 0D2h, 0D3h
.text:0040FE70                 dd 0D4h, 0D5h, 0D6h, 0D7h, 0D8h, 0D9h, 0DAh, 0DBh, 0DCh
.text:0040FE70                 dd 0DDh, 0DEh, 0DFh, 0E0h, 0E1h, 0E2h, 0E3h, 0E4h, 0E5h
.text:0040FE70                 dd 0E6h, 0E7h, 0E8h, 0E9h, 0EAh, 0EBh, 0ECh, 0EDh, 0EEh
.text:0040FE70                 dd 0EFh, 0F0h, 0F1h, 0F2h, 0F3h, 0F4h, 0F5h, 0F6h, 0F7h
.text:0040FE70                 dd 0F8h, 0F9h, 0FAh, 0FBh, 0FCh, 0FDh, 0FEh, 0FFh, 26748Dh
.text:0040FE70                 dd 418EF0h, 5 dup(0)
.text:00410288                 dd 0FFFFFFFFh, 0
.text:00410290                 dd 13h, 10h dup(0)
.text:004102D4                 dd offset dword_40FD50
.text:004102D8                 dd offset dword_40FD50+100h
.text:004102DC                 dd offset aAnsiX341968  ; "ANSI_X3.4-1968"
.text:004102E0                 db 10h dup(90h)
.text:004102F0                 dd 0
.text:004102F4                 dd 2, 4, 6, 8, 0Ah, 0Ch, 0Eh, 10h, 12h, 14h, 16h, 18h
.text:004102F4                 dd 1Ah, 1Ch, 1Eh, 20h, 22h, 24h, 26h, 28h, 2Ah, 2Ch, 2Eh
.text:004102F4                 dd 30h, 32h, 34h, 36h, 38h, 3Ah, 3Ch, 3Eh, 40h, 42h, 44h
.text:004102F4                 dd 46h, 48h, 4Ah, 4Ch, 4Eh, 50h, 52h, 54h, 56h, 58h, 5Ah
.text:004102F4                 dd 5Ch, 5Eh, 60h, 62h, 64h, 66h, 68h, 6Ah, 6Ch, 6Eh, 70h
.text:004102F4                 dd 72h, 74h, 76h, 78h, 7Ah, 7Ch, 7Eh, 80h, 82h, 84h, 86h
.text:004102F4                 dd 88h, 8Ah, 8Ch, 8Eh, 90h, 92h, 94h, 96h, 98h, 9Ah, 9Ch
.text:004102F4                 dd 9Eh, 0A0h, 0A2h, 0A4h, 0A6h, 0A8h, 0AAh, 0ACh, 0AEh
.text:004102F4                 dd 0B0h, 0B2h, 0B4h, 0B6h, 0B8h, 0BAh, 0BCh, 0BEh, 0C0h
.text:004102F4                 dd 0C2h, 0C4h, 0C6h, 0C8h, 0CAh, 0CCh, 0CEh, 0D0h, 0D2h
.text:004102F4                 dd 0D4h, 0D6h, 0D8h, 0DAh, 0DCh, 0DEh, 0E0h, 0E2h, 0E4h
.text:004102F4                 dd 0E6h, 0E8h, 0EAh, 0ECh, 0EEh, 0F0h, 0F2h, 0F4h, 0F6h
.text:004102F4                 dd 0F8h, 0FAh, 0FCh, 0FEh, 100h, 102h, 104h, 106h, 108h
.text:004102F4                 dd 10Ah, 10Ch, 10Eh, 110h, 112h, 114h, 116h, 118h, 11Ah
.text:004102F4                 dd 11Ch, 11Eh, 120h, 122h, 124h, 126h, 128h, 12Ah, 12Ch
.text:004102F4                 dd 12Eh, 130h, 132h, 134h, 136h, 138h, 13Ah, 13Ch, 13Eh
.text:004102F4                 dd 140h, 142h, 144h, 146h, 148h, 14Ah, 14Ch, 14Eh, 150h
.text:004102F4                 dd 152h, 154h, 156h, 158h, 15Ah, 15Ch, 15Eh, 160h, 162h
.text:004102F4                 dd 164h, 166h, 168h, 16Ah, 16Ch, 16Eh, 170h, 172h, 174h
.text:004102F4                 dd 176h, 178h, 17Ah, 17Ch, 17Eh, 180h, 182h, 184h, 186h
.text:004102F4                 dd 188h, 18Ah, 18Ch, 18Eh, 190h, 192h, 194h, 196h, 198h
.text:004102F4                 dd 19Ah, 19Ch, 19Eh, 1A0h, 1A2h, 1A4h, 1A6h, 1A8h, 1AAh
.text:004102F4                 dd 1ACh, 1AEh, 1B0h, 1B2h, 1B4h, 1B6h, 1B8h, 1BAh, 1BCh
.text:004102F4                 dd 1BEh, 1C0h, 1C2h, 1C4h, 1C6h, 1C8h, 1CAh, 1CCh, 1CEh
.text:004102F4                 dd 1D0h, 1D2h, 1D4h, 1D6h, 1D8h, 1DAh, 1DCh, 1DEh, 1E0h
.text:004102F4                 dd 1E2h, 1E4h, 1E6h, 1E8h, 1EAh, 1ECh, 1EEh, 1F0h, 1F2h
.text:004102F4                 dd 1F4h, 1F6h, 1F8h, 1FAh, 1FCh, 1FEh, 200h, 202h, 204h
.text:004102F4                 dd 206h, 208h, 20Ah, 20Ch, 20Eh, 210h, 212h, 214h, 216h
.text:004102F4                 dd 218h, 21Ah, 21Ch, 21Eh, 220h, 222h, 224h, 226h, 228h
.text:004102F4                 dd 22Ah, 22Ch, 22Eh, 230h, 232h, 234h, 236h, 238h, 23Ah
.text:004102F4                 dd 23Ch, 23Eh, 240h, 242h, 244h, 246h, 248h, 24Ah, 24Ch
.text:004102F4                 dd 24Eh, 250h, 252h, 254h, 256h, 258h, 25Ah, 25Ch, 25Eh
.text:004102F4                 dd 260h, 262h, 264h, 266h, 268h, 26Ah, 26Ch, 26Eh, 270h
.text:004102F4                 dd 272h, 274h, 276h, 278h, 27Ah, 27Ch, 27Eh, 280h, 282h
.text:004102F4                 dd 284h, 286h, 288h, 28Ah, 28Ch, 28Eh, 290h, 292h, 294h
.text:004102F4                 dd 296h, 298h, 29Ah, 29Ch, 29Eh, 2A0h, 2A2h, 2A4h, 2A6h
.text:004102F4                 dd 2A8h, 2AAh, 2ACh, 2AEh, 2B0h, 2B2h, 2B4h, 2B6h, 2B8h
.text:004102F4                 dd 2BAh, 2BCh, 2BEh, 2C0h, 2C2h, 2C4h, 2C6h, 2C8h, 2CAh
.text:004102F4                 dd 2CCh, 2CEh, 2D0h, 2D2h, 2D4h, 2D6h, 2D8h, 2DAh, 2DCh
.text:004102F4                 dd 2DEh, 2E0h, 2E2h, 2E4h, 2E6h, 2E8h, 2EAh, 2ECh, 2EEh
.text:004102F4                 dd 2F0h, 2F2h, 2F4h, 2F6h, 2F8h, 2FAh, 2FCh, 2FEh, 300h
.text:004102F4                 dd 302h, 304h, 306h, 308h, 30Ah, 30Ch, 30Eh, 310h, 312h
.text:004102F4                 dd 314h, 316h, 318h, 31Ah, 31Ch, 31Eh, 320h, 322h, 324h
.text:004102F4                 dd 326h, 328h, 32Ah, 32Ch, 32Eh, 330h, 332h, 334h, 336h
.text:004102F4                 dd 338h, 33Ah, 33Ch, 33Eh, 340h, 342h, 344h, 346h, 348h
.text:004102F4                 dd 34Ah, 34Ch, 34Eh, 350h, 352h, 354h, 356h, 358h, 35Ah
.text:004102F4                 dd 35Ch, 35Eh, 360h, 362h, 364h, 366h, 368h, 36Ah, 36Ch
.text:004102F4                 dd 36Eh, 370h, 372h, 374h, 376h, 378h, 37Ah, 37Ch, 37Eh
.text:004102F4                 dd 380h, 382h, 384h, 386h, 388h, 38Ah, 38Ch, 38Eh, 390h
.text:004102F4                 dd 392h, 394h, 396h, 398h, 39Ah, 39Ch, 39Eh, 3A0h, 3A2h
.text:004102F4                 dd 3A4h, 3A6h, 3A8h, 3AAh, 3ACh, 3AEh, 3B0h, 3B2h, 3B4h
.text:004102F4                 dd 3B6h, 3B8h, 3BAh, 3BCh, 3BEh, 3C0h, 3C2h, 3C4h, 3C6h
.text:004102F4                 dd 3C8h, 3CAh, 3CCh, 3CEh, 3D0h, 3D2h, 3D4h, 3D6h, 3D8h
.text:004102F4                 dd 3DAh, 3DCh, 3DEh, 3E0h, 3E2h, 3E4h, 3E6h, 3E8h, 3EAh
.text:004102F4                 dd 3ECh, 3EEh, 3F0h, 3F2h, 3F4h, 3F6h, 3F8h, 3FAh, 3FCh
.text:004102F4                 dd 3FEh, 400h
.text:00410AF4                 dd 402h, 404h, 406h, 408h, 40Ah, 40Ch, 40Eh, 410h, 412h
.text:00410AF4                 dd 414h, 416h, 418h, 41Ah, 41Ch, 41Eh, 420h, 422h, 424h
.text:00410AF4                 dd 426h, 428h, 42Ah, 42Ch, 42Eh, 430h, 432h, 434h, 436h
.text:00410AF4                 dd 438h, 43Ah, 43Ch, 43Eh, 440h, 442h, 444h, 446h, 448h
.text:00410AF4                 dd 44Ah, 44Ch, 44Eh, 450h, 452h, 454h, 456h, 458h, 45Ah
.text:00410AF4                 dd 45Ch, 45Eh, 460h, 462h, 464h, 466h, 468h, 46Ah, 46Ch
.text:00410AF4                 dd 46Eh, 470h, 472h, 474h, 476h, 478h, 47Ah, 47Ch, 47Eh
.text:00410AF4                 dd 480h, 482h, 484h, 486h, 488h, 48Ah, 48Ch, 48Eh, 490h
.text:00410AF4                 dd 492h, 494h, 496h, 498h, 49Ah, 49Ch, 49Eh, 4A0h, 4A2h
.text:00410AF4                 dd 4A4h, 4A6h, 4A8h, 4AAh, 4ACh, 4AEh, 4B0h, 4B2h, 4B4h
.text:00410AF4                 dd 4B6h, 4B8h, 4BAh, 4BCh, 4BEh, 4C0h, 4C2h, 4C4h, 4C6h
.text:00410AF4                 dd 4C8h, 4CAh, 4CCh, 4CEh, 4D0h, 4D2h, 4D4h, 4D6h, 4D8h
.text:00410AF4                 dd 4DAh, 4DCh, 4DEh, 4E0h, 4E2h, 4E4h, 4E6h, 4E8h, 4EAh
.text:00410AF4                 dd 4ECh, 4EEh, 4F0h, 4F2h, 4F4h, 4F6h, 4F8h, 4FAh, 4FCh
.text:00410AF4                 dd 4FEh, 500h, 502h, 504h, 506h, 508h, 50Ah, 50Ch, 50Eh
.text:00410AF4                 dd 510h, 512h, 514h, 516h, 518h, 51Ah, 51Ch, 51Eh, 520h
.text:00410AF4                 dd 522h, 524h, 526h, 528h, 52Ah, 52Ch, 52Eh, 530h, 532h
.text:00410AF4                 dd 534h, 536h, 538h, 53Ah, 53Ch, 53Eh, 540h, 542h, 544h
.text:00410AF4                 dd 546h, 548h, 54Ah, 54Ch, 54Eh, 550h, 552h, 554h, 556h
.text:00410AF4                 dd 558h, 55Ah, 55Ch, 55Eh, 560h, 562h, 564h, 566h, 568h
.text:00410AF4                 dd 56Ah, 56Ch, 56Eh, 570h, 572h, 574h, 576h, 578h, 57Ah
.text:00410AF4                 dd 57Ch, 57Eh, 580h, 582h, 584h, 586h, 588h, 58Ah, 58Ch
.text:00410AF4                 dd 58Eh, 590h, 592h, 594h, 596h, 598h, 59Ah, 59Ch, 59Eh
.text:00410AF4                 dd 5A0h, 5A2h, 5A4h, 5A6h, 5A8h, 5AAh, 5ACh, 5AEh, 5B0h
.text:00410AF4                 dd 5B2h, 5B4h, 5B6h, 5B8h, 5BAh, 5BCh, 5BEh, 5C0h, 5C2h
.text:00410AF4                 dd 5C4h, 5C6h, 5C8h, 5CAh, 5CCh, 5CEh, 5D0h, 5D2h, 5D4h
.text:00410AF4                 dd 5D6h, 5D8h, 5DAh, 5DCh, 5DEh, 5E0h, 5E2h, 5E4h, 5E6h
.text:00410AF4                 dd 5E8h, 5EAh, 5ECh, 5EEh, 5F0h, 5F2h, 5F4h, 5F6h, 5F8h
.text:00410AF4                 dd 5FAh, 5FCh, 5FEh, 600h, 602h, 604h, 606h, 608h, 60Ah
.text:00410AF4                 dd 60Ch, 60Eh, 610h, 612h, 614h, 616h, 618h, 61Ah, 61Ch
.text:00410AF4                 dd 61Eh, 620h, 622h, 624h, 626h, 628h, 62Ah, 62Ch, 62Eh
.text:00410AF4                 dd 630h, 632h, 634h, 636h, 638h, 63Ah, 63Ch, 63Eh, 640h
.text:00410AF4                 dd 642h, 644h, 646h, 648h, 64Ah, 64Ch, 64Eh, 650h, 652h
.text:00410AF4                 dd 654h, 656h, 658h, 65Ah, 65Ch, 65Eh, 660h, 662h, 664h
.text:00410AF4                 dd 666h, 668h, 66Ah, 66Ch, 66Eh, 670h, 672h, 674h, 676h
.text:00410AF4                 dd 678h, 67Ah, 67Ch, 67Eh, 680h, 682h, 684h, 686h, 688h
.text:00410AF4                 dd 68Ah, 68Ch, 68Eh, 690h, 692h, 694h, 696h, 698h, 69Ah
.text:00410AF4                 dd 69Ch, 69Eh, 6A0h, 6A2h, 6A4h, 6A6h, 6A8h, 6AAh, 6ACh
.text:00410AF4                 dd 6AEh, 6B0h, 6B2h, 6B4h, 6B6h, 6B8h, 6BAh, 6BCh, 6BEh
.text:00410AF4                 dd 6C0h, 6C2h, 6C4h, 6C6h, 6C8h, 6CAh, 6CCh, 6CEh, 6D0h
.text:00410AF4                 dd 6D2h, 6D4h, 6D6h, 6D8h, 6DAh, 6DCh, 6DEh, 6E0h, 6E2h
.text:00410AF4                 dd 6E4h, 6E6h, 6E8h, 6EAh, 6ECh, 6EEh, 6F0h, 6F2h, 6F4h
.text:00410AF4                 dd 6F6h, 6F8h, 6FAh, 6FCh, 6FEh, 700h, 702h, 704h, 706h
.text:00410AF4                 dd 708h, 70Ah, 70Ch, 70Eh, 710h, 712h, 714h, 716h, 718h
.text:00410AF4                 dd 71Ah, 71Ch, 71Eh, 720h, 722h, 724h, 726h, 728h, 72Ah
.text:00410AF4                 dd 72Ch, 72Eh, 730h, 732h, 734h, 736h, 738h, 73Ah, 73Ch
.text:00410AF4                 dd 73Eh, 740h, 742h, 744h, 746h, 748h, 74Ah, 74Ch, 74Eh
.text:00410AF4                 dd 750h, 752h, 754h, 756h, 758h, 75Ah, 75Ch, 75Eh, 760h
.text:00410AF4                 dd 762h, 764h, 766h, 768h, 76Ah, 76Ch, 76Eh, 770h, 772h
.text:00410AF4                 dd 774h, 776h, 778h, 77Ah, 77Ch, 77Eh, 780h, 782h, 784h
.text:00410AF4                 dd 786h, 788h, 78Ah, 78Ch, 78Eh, 790h, 792h, 794h, 796h
.text:00410AF4                 dd 798h, 79Ah, 79Ch, 79Eh, 7A0h, 7A2h, 7A4h, 7A6h, 7A8h
.text:00410AF4                 dd 7AAh, 7ACh, 7AEh, 7B0h, 7B2h, 7B4h, 7B6h, 7B8h, 7BAh
.text:00410AF4                 dd 7BCh, 7BEh, 7C0h, 7C2h, 7C4h, 7C6h, 7C8h, 7CAh, 7CCh
.text:00410AF4                 dd 7CEh, 7D0h, 7D2h, 7D4h, 7D6h, 7D8h, 7DAh, 7DCh, 7DEh
.text:00410AF4                 dd 7E0h, 7E2h, 7E4h, 7E6h, 7E8h, 7EAh, 7ECh, 7EEh, 7F0h
.text:00410AF4                 dd 7F2h, 7F4h, 7F6h, 7F8h, 7FAh, 7FCh, 7FEh, 800h
.text:004112F4                 dd 802h, 804h, 806h, 808h, 80Ah, 80Ch, 80Eh, 810h, 812h
.text:004112F4                 dd 814h, 816h, 818h, 81Ah, 81Ch, 81Eh, 820h, 822h, 824h
.text:004112F4                 dd 826h, 828h, 82Ah, 82Ch, 82Eh, 830h, 832h, 834h, 836h
.text:004112F4                 dd 838h, 83Ah, 83Ch, 83Eh, 840h, 842h, 844h, 846h, 848h
.text:004112F4                 dd 84Ah, 84Ch, 84Eh, 850h, 852h, 854h, 856h, 858h, 85Ah
.text:004112F4                 dd 85Ch, 85Eh, 860h, 862h, 864h, 866h, 868h, 86Ah, 86Ch
.text:004112F4                 dd 86Eh, 870h, 872h, 874h, 876h, 878h, 87Ah, 87Ch, 87Eh
.text:004112F4                 dd 880h, 882h, 884h, 886h, 888h, 88Ah, 88Ch, 88Eh, 890h
.text:004112F4                 dd 892h, 894h, 896h, 898h, 89Ah, 89Ch, 89Eh, 8A0h, 8A2h
.text:004112F4                 dd 8A4h, 8A6h, 8A8h, 8AAh, 8ACh, 8AEh, 8B0h, 8B2h, 8B4h
.text:004112F4                 dd 8B6h, 8B8h, 8BAh, 8BCh, 8BEh, 8C0h, 8C2h, 8C4h, 8C6h
.text:004112F4                 dd 8C8h, 8CAh, 8CCh, 8CEh, 8D0h, 8D2h, 8D4h, 8D6h, 8D8h
.text:004112F4                 dd 8DAh, 8DCh, 8DEh, 8E0h, 8E2h, 8E4h, 8E6h, 8E8h, 8EAh
.text:004112F4                 dd 8ECh, 8EEh, 8F0h, 8F2h, 8F4h, 8F6h, 8F8h, 8FAh, 8FCh
.text:004112F4                 dd 8FEh, 900h, 902h, 904h, 906h, 908h, 90Ah, 90Ch, 90Eh
.text:004112F4                 dd 910h, 912h, 914h, 916h, 918h, 91Ah, 91Ch, 91Eh, 920h
.text:004112F4                 dd 922h, 924h, 926h, 928h, 92Ah, 92Ch, 92Eh, 930h, 932h
.text:004112F4                 dd 934h, 936h, 938h, 93Ah, 93Ch, 93Eh, 940h, 942h, 944h
.text:004112F4                 dd 946h, 948h, 94Ah, 94Ch, 94Eh, 950h, 952h, 954h, 956h
.text:004112F4                 dd 958h, 95Ah, 95Ch, 95Eh, 960h, 962h, 964h, 966h, 968h
.text:004112F4                 dd 96Ah, 96Ch, 96Eh, 970h, 972h, 974h, 976h, 978h, 97Ah
.text:004112F4                 dd 97Ch, 97Eh, 980h, 982h, 984h, 986h, 988h, 98Ah, 98Ch
.text:004112F4                 dd 98Eh, 990h, 992h, 994h, 996h, 998h, 99Ah, 99Ch, 99Eh
.text:004112F4                 dd 9A0h, 9A2h, 9A4h, 9A6h, 9A8h, 9AAh, 9ACh, 9AEh, 9B0h
.text:004112F4                 dd 9B2h, 9B4h, 9B6h, 9B8h, 9BAh, 9BCh, 9BEh, 9C0h, 9C2h
.text:004112F4                 dd 9C4h, 9C6h, 9C8h, 9CAh, 9CCh, 9CEh, 9D0h, 9D2h, 9D4h
.text:004112F4                 dd 9D6h, 9D8h, 9DAh, 9DCh, 9DEh, 9E0h, 9E2h, 9E4h, 9E6h
.text:004112F4                 dd 9E8h, 9EAh, 9ECh, 9EEh, 9F0h, 9F2h, 9F4h, 9F6h, 9F8h
.text:004112F4                 dd 9FAh, 9FCh, 9FEh, 0A00h, 0A02h, 0A04h, 0A06h, 0A08h
.text:004112F4                 dd 0A0Ah, 0A0Ch, 0A0Eh, 0A10h, 0A12h, 0A14h, 0A16h, 0A18h
.text:004112F4                 dd 0A1Ah, 0A1Ch, 0A1Eh, 0A20h, 0A22h, 0A24h, 0A26h, 0A28h
.text:004112F4                 dd 0A2Ah, 0A2Ch, 0A2Eh, 0A30h, 0A32h, 0A34h, 0A36h, 0A38h
.text:004112F4                 dd 0A3Ah, 0A3Ch, 0A3Eh, 0A40h, 0A42h, 0A44h, 0A46h, 0A48h
.text:004112F4                 dd 0A4Ah, 0A4Ch, 0A4Eh, 0A50h, 0A52h, 0A54h, 0A56h, 0A58h
.text:004112F4                 dd 0A5Ah, 0A5Ch, 0A5Eh, 0A60h, 0A62h, 0A64h, 0A66h, 0A68h
.text:004112F4                 dd 0A6Ah, 0A6Ch, 0A6Eh, 0A70h, 0A72h, 0A74h, 0A76h, 0A78h
.text:004112F4                 dd 0A7Ah, 0A7Ch, 0A7Eh, 0A80h, 0A82h, 0A84h, 0A86h, 0A88h
.text:004112F4                 dd 0A8Ah, 0A8Ch, 0A8Eh, 0A0h, 0A9h, 0ABh, 0ADh, 0AEh, 0B5h
.text:004112F4                 dd 0B8h, 0BBh, 0BCh, 0BDh, 0BEh, 0C6h, 0D7h, 0DFh, 0E6h
.text:004112F4                 dd 132h, 133h, 149h, 2 dup(152h), 2 dup(153h), 17Fh, 1C7h
.text:004112F4                 dd 1C8h, 1C9h, 1CAh, 1CBh, 1CCh, 1F1h, 1F2h, 1F3h, 2BCh
.text:004112F4                 dd 2C6h, 2C8h, 2CBh, 2CDh, 2D0h, 2DCh, 2002h, 2003h, 2004h
.text:004112F4                 dd 2005h, 2006h, 2008h, 2009h, 200Ah, 200Bh, 2010h, 2011h
.text:004112F4                 dd 2012h, 2013h, 2014h, 2015h, 2018h, 2019h, 201Ah, 201Bh
.text:004112F4                 dd 201Ch, 201Dh, 201Eh, 201Fh, 2020h, 2022h, 2024h, 2025h
.text:004112F4                 dd 2026h, 202Fh, 2035h, 2036h, 2037h, 2039h, 203Ah, 203Ch
.text:004112F4                 dd 2047h, 2048h, 2049h, 205Fh, 2060h, 2061h, 2062h, 2063h
.text:004112F4                 dd 20A8h, 20ACh, 2100h, 2101h, 2102h, 2105h, 2106h, 210Ah
.text:004112F4                 dd 210Bh, 210Ch, 210Dh, 210Eh, 2110h, 2111h, 2112h, 2113h
.text:004112F4                 dd 2115h, 2116h, 2119h, 211Ah, 211Bh, 211Ch, 211Dh, 2121h
.text:004112F4                 dd 2122h, 2124h, 2126h, 2128h, 212Ch, 212Dh, 212Eh, 212Fh
.text:004112F4                 dd 2130h, 2131h, 2133h, 2134h, 2139h, 2145h, 2146h, 2147h
.text:004112F4                 dd 2148h, 2149h, 2153h, 2154h, 2155h, 2156h, 2157h, 2158h
.text:004112F4                 dd 2159h, 215Ah, 215Bh, 215Ch, 215Dh, 215Eh, 215Fh, 2160h
.text:004112F4                 dd 2161h, 2162h, 2163h, 2164h, 2165h, 2166h, 2167h, 2168h
.text:004112F4                 dd 2169h, 216Ah, 216Bh, 216Ch, 216Dh, 216Eh, 216Fh, 2170h
.text:004112F4                 dd 2171h, 2172h, 2173h, 2174h, 2175h, 2176h, 2177h, 2178h
.text:004112F4                 dd 2179h, 217Ah, 217Bh, 217Ch, 217Dh, 217Eh, 217Fh, 2190h
.text:004112F4                 dd 2192h, 2194h, 21D0h, 21D2h, 21D4h, 2212h, 2215h, 2216h
.text:004112F4                 dd 2217h, 2223h, 2236h, 223Ch, 2264h, 2265h, 226Ah, 226Bh
.text:004112F4                 dd 22D8h
.text:00411AFC                 dd 22D9h, 2400h, 2401h, 2402h, 2403h, 2404h, 2405h, 2406h
.text:00411AFC                 dd 2407h, 2408h, 2409h, 240Ah, 240Bh, 240Ch, 240Dh, 240Eh
.text:00411AFC                 dd 240Fh, 2410h, 2411h, 2412h, 2413h, 2414h, 2415h, 2416h
.text:00411AFC                 dd 2417h, 2418h, 2419h, 241Ah, 241Bh, 241Ch, 241Dh, 241Eh
.text:00411AFC                 dd 241Fh, 2420h, 2421h, 2423h, 2424h, 2460h, 2461h, 2462h
.text:00411AFC                 dd 2463h, 2464h, 2465h, 2466h, 2467h, 2468h, 2469h, 246Ah
.text:00411AFC                 dd 246Bh, 246Ch, 246Dh, 246Eh, 246Fh, 2470h, 2471h, 2472h
.text:00411AFC                 dd 2473h, 2474h, 2475h, 2476h, 2477h, 2478h, 2479h, 247Ah
.text:00411AFC                 dd 247Bh, 247Ch, 247Dh, 247Eh, 247Fh, 2480h, 2481h, 2482h
.text:00411AFC                 dd 2483h, 2484h, 2485h, 2486h, 2487h, 2488h, 2489h, 248Ah
.text:00411AFC                 dd 248Bh, 248Ch, 248Dh, 248Eh, 248Fh, 2490h, 2491h, 2492h
.text:00411AFC                 dd 2493h, 2494h, 2495h, 2496h, 2497h, 2498h, 2499h, 249Ah
.text:00411AFC                 dd 249Bh, 249Ch, 249Dh, 249Eh, 249Fh, 24A0h, 24A1h, 24A2h
.text:00411AFC                 dd 24A3h, 24A4h, 24A5h, 24A6h, 24A7h, 24A8h, 24A9h, 24AAh
.text:00411AFC                 dd 24ABh, 24ACh, 24ADh, 24AEh, 24AFh, 24B0h, 24B1h, 24B2h
.text:00411AFC                 dd 24B3h, 24B4h, 24B5h, 24B6h, 24B7h, 24B8h, 24B9h, 24BAh
.text:00411AFC                 dd 24BBh, 24BCh, 24BDh, 24BEh, 24BFh, 24C0h, 24C1h, 24C2h
.text:00411AFC                 dd 24C3h, 24C4h, 24C5h, 24C6h, 24C7h, 24C8h, 24C9h, 24CAh
.text:00411AFC                 dd 24CBh, 24CCh, 24CDh, 24CEh, 24CFh, 24D0h, 24D1h, 24D2h
.text:00411AFC                 dd 24D3h, 24D4h, 24D5h, 24D6h, 24D7h, 24D8h, 24D9h, 24DAh
.text:00411AFC                 dd 24DBh, 24DCh, 24DDh, 24DEh, 24DFh, 24E0h, 24E1h, 24E2h
.text:00411AFC                 dd 24E3h, 24E4h, 24E5h, 24E6h, 24E7h, 24E8h, 24E9h, 24EAh
.text:00411AFC                 dd 2500h, 2502h, 250Ch, 2510h, 2514h, 2518h, 251Ch, 2524h
.text:00411AFC                 dd 252Ch, 2534h, 253Ch, 25E6h, 2A74h, 2A75h, 2A76h, 3000h
.text:00411AFC                 dd 30A0h, 3251h, 3252h, 3253h, 3254h, 3255h, 3256h, 3257h
.text:00411AFC                 dd 3258h, 3259h, 325Ah, 325Bh, 325Ch, 325Dh, 325Eh, 325Fh
.text:00411AFC                 dd 32B1h, 32B2h, 32B3h, 32B4h, 32B5h, 32B6h, 32B7h, 32B8h
.text:00411AFC                 dd 32B9h, 32BAh, 32BBh, 32BCh, 32BDh, 32BEh, 32BFh, 3371h
.text:00411AFC                 dd 3372h, 3373h, 3374h, 3375h, 3376h, 3380h, 3381h, 3382h
.text:00411AFC                 dd 3383h, 3384h, 3385h, 3386h, 3387h, 3388h, 3389h, 338Ah
.text:00411AFC                 dd 338Bh, 338Ch, 338Dh, 338Eh, 338Fh, 3390h, 3391h, 3392h
.text:00411AFC                 dd 3393h, 3394h, 3395h, 3396h, 3397h, 3398h, 3399h, 339Ah
.text:00411AFC                 dd 339Bh, 339Ch, 339Dh, 339Eh, 339Fh, 33A0h, 33A1h, 33A2h
.text:00411AFC                 dd 33A3h, 33A4h, 33A5h, 33A6h, 33A7h, 33A8h, 33A9h, 33AAh
.text:00411AFC                 dd 33ABh, 33ACh, 33ADh, 33AEh, 33AFh, 33B0h, 33B1h, 33B2h
.text:00411AFC                 dd 33B3h, 33B4h, 33B5h, 33B6h, 33B7h, 33B8h, 33B9h, 33BAh
.text:00411AFC                 dd 33BBh, 33BCh, 33BDh, 33BEh, 33BFh, 33C2h, 33C3h, 33C4h
.text:00411AFC                 dd 33C5h, 33C6h, 33C7h, 33C8h, 33C9h, 33CAh, 33CBh, 33CCh
.text:00411AFC                 dd 33CDh, 33CEh, 33CFh, 33D0h, 33D1h, 33D2h, 33D3h, 33D4h
.text:00411AFC                 dd 33D5h, 33D6h, 33D7h, 33D8h, 33D9h, 33DAh, 33DBh, 33DCh
.text:00411AFC                 dd 33DDh, 0FB00h, 0FB01h, 0FB02h, 0FB03h, 0FB04h, 0FB06h
.text:00411AFC                 dd 0FB29h, 0FE00h, 0FE01h, 0FE02h, 0FE03h, 0FE04h, 0FE05h
.text:00411AFC                 dd 0FE06h, 0FE07h, 0FE08h, 0FE09h, 0FE0Ah, 0FE0Bh, 0FE0Ch
.text:00411AFC                 dd 0FE0Dh, 0FE0Eh, 0FE0Fh, 0FE4Dh, 0FE4Eh, 0FE4Fh, 0FE50h
.text:00411AFC                 dd 0FE52h, 0FE54h, 0FE55h, 0FE56h, 0FE57h, 0FE59h, 0FE5Ah
.text:00411AFC                 dd 0FE5Bh, 0FE5Ch, 0FE5Fh, 0FE60h, 0FE61h, 0FE62h, 0FE63h
.text:00411AFC                 dd 0FE64h, 0FE65h, 0FE66h, 0FE68h, 0FE69h, 0FE6Ah, 0FE6Bh
.text:00411AFC                 dd 0FEFFh, 0FF01h, 0FF02h, 0FF03h, 0FF04h, 0FF05h, 0FF06h
.text:00411AFC                 dd 0FF07h, 0FF08h, 0FF09h, 0FF0Ah, 0FF0Bh, 0FF0Ch, 0FF0Dh
.text:00411AFC                 dd 0FF0Eh, 0FF0Fh, 0FF10h, 0FF11h, 0FF12h, 0FF13h, 0FF14h
.text:00411AFC                 dd 0FF15h, 0FF16h, 0FF17h, 0FF18h, 0FF19h, 0FF1Ah, 0FF1Bh
.text:00411AFC                 dd 0FF1Ch, 0FF1Dh, 0FF1Eh, 0FF1Fh, 0FF20h, 0FF21h, 0FF22h
.text:00411AFC                 dd 0FF23h, 0FF24h, 0FF25h, 0FF26h, 0FF27h, 0FF28h, 0FF29h
.text:00411AFC                 dd 0FF2Ah, 0FF2Bh, 0FF2Ch, 0FF2Dh, 0FF2Eh, 0FF2Fh, 0FF30h
.text:00411AFC                 dd 0FF31h, 0FF32h, 0FF33h, 0FF34h, 0FF35h, 0FF36h, 0FF37h
.text:00411AFC                 dd 0FF38h, 0FF39h, 0FF3Ah, 0FF3Bh, 0FF3Ch, 0FF3Dh, 0FF3Eh
.text:00411AFC                 dd 0FF3Fh, 0FF40h, 0FF41h, 0FF42h, 0FF43h, 0FF44h, 0FF45h
.text:00411AFC                 dd 0FF46h, 0FF47h, 0FF48h, 0FF49h, 0FF4Ah, 0FF4Bh, 0FF4Ch
.text:00411AFC                 dd 0FF4Dh, 0FF4Eh, 0FF4Fh, 0FF50h, 0FF51h, 0FF52h, 0FF53h
.text:00411AFC                 dd 0FF54h, 0FF55h, 0FF56h, 0FF57h, 0FF58h, 0FF59h, 0FF5Ah
.text:00411AFC                 dd 0FF5Bh, 0FF5Ch, 0FF5Dh, 0FF5Eh, 0D400h, 0D401h, 0D402h
.text:00411AFC                 dd 0D403h, 0D404h, 0D405h, 0D406h, 0D407h, 0D408h, 0D409h
.text:00411AFC                 dd 0D40Ah, 0D40Bh, 0D40Ch, 0D40Dh, 0D40Eh, 0D40Fh, 0D410h
.text:00411AFC                 dd 0D411h, 0D412h, 0D413h, 0D414h, 0D415h, 0D416h, 0D417h
.text:00411AFC                 dd 0D418h, 0D419h, 0D41Ah, 0D41Bh, 0D41Ch, 0D41Dh, 0D41Eh
.text:00411AFC                 dd 0D41Fh, 0D420h, 0D421h, 0D422h, 0D423h, 0D424h, 0D425h
.text:00411AFC                 dd 0D426h, 0D427h, 0D428h, 0D429h, 0D42Ah, 0D42Bh, 0D42Ch
.text:00411AFC                 dd 0D42Dh, 0D42Eh, 0D42Fh
.text:004122FC                 dd 0D430h, 0D431h, 0D432h, 0D433h, 0D434h, 0D435h, 0D436h
.text:004122FC                 dd 0D437h, 0D438h, 0D439h, 0D43Ah, 0D43Bh, 0D43Ch, 0D43Dh
.text:004122FC                 dd 0D43Eh, 0D43Fh, 0D440h, 0D441h, 0D442h, 0D443h, 0D444h
.text:004122FC                 dd 0D445h, 0D446h, 0D447h, 0D448h, 0D449h, 0D44Ah, 0D44Bh
.text:004122FC                 dd 0D44Ch, 0D44Dh, 0D44Eh, 0D44Fh, 0D450h, 0D451h, 0D452h
.text:004122FC                 dd 0D453h, 0D454h, 0D456h, 0D457h, 0D458h, 0D459h, 0D45Ah
.text:004122FC                 dd 0D45Bh, 0D45Ch, 0D45Dh, 0D45Eh, 0D45Fh, 0D460h, 0D461h
.text:004122FC                 dd 0D462h, 0D463h, 0D464h, 0D465h, 0D466h, 0D467h, 0D468h
.text:004122FC                 dd 0D469h, 0D46Ah, 0D46Bh, 0D46Ch, 0D46Dh, 0D46Eh, 0D46Fh
.text:004122FC                 dd 0D470h, 0D471h, 0D472h, 0D473h, 0D474h, 0D475h, 0D476h
.text:004122FC                 dd 0D477h, 0D478h, 0D479h, 0D47Ah, 0D47Bh, 0D47Ch, 0D47Dh
.text:004122FC                 dd 0D47Eh, 0D47Fh, 0D480h, 0D481h, 0D482h, 0D483h, 0D484h
.text:004122FC                 dd 0D485h, 0D486h, 0D487h, 0D488h, 0D489h, 0D48Ah, 0D48Bh
.text:004122FC                 dd 0D48Ch, 0D48Dh, 0D48Eh, 0D48Fh, 0D490h, 0D491h, 0D492h
.text:004122FC                 dd 0D493h, 0D494h, 0D495h, 0D496h, 0D497h, 0D498h, 0D499h
.text:004122FC                 dd 0D49Ah, 0D49Bh, 0D49Ch, 0D49Eh, 0D49Fh, 0D4A2h, 0D4A5h
.text:004122FC                 dd 0D4A6h, 0D4A9h, 0D4AAh, 0D4ABh, 0D4ACh, 0D4AEh, 0D4AFh
.text:004122FC                 dd 0D4B0h, 0D4B1h, 0D4B2h, 0D4B3h, 0D4B4h, 0D4B5h, 0D4B6h
.text:004122FC                 dd 0D4B7h, 0D4B8h, 0D4B9h, 0D4BBh, 0D4BDh, 0D4BEh, 0D4BFh
.text:004122FC                 dd 0D4C0h, 0D4C2h, 0D4C3h, 0D4C5h, 0D4C6h, 0D4C7h, 0D4C8h
.text:004122FC                 dd 0D4C9h, 0D4CAh, 0D4CBh, 0D4CCh, 0D4CDh, 0D4CEh, 0D4CFh
.text:004122FC                 dd 0D4D0h, 0D4D1h, 0D4D2h, 0D4D3h, 0D4D4h, 0D4D5h, 0D4D6h
.text:004122FC                 dd 0D4D7h, 0D4D8h, 0D4D9h, 0D4DAh, 0D4DBh, 0D4DCh, 0D4DDh
.text:004122FC                 dd 0D4DEh, 0D4DFh, 0D4E0h, 0D4E1h, 0D4E2h, 0D4E3h, 0D4E4h
.text:004122FC                 dd 0D4E5h, 0D4E6h, 0D4E7h, 0D4E8h, 0D4E9h, 0D4EAh, 0D4EBh
.text:004122FC                 dd 0D4ECh, 0D4EDh, 0D4EEh, 0D4EFh, 0D4F0h, 0D4F1h, 0D4F2h
.text:004122FC                 dd 0D4F3h, 0D4F4h, 0D4F5h, 0D4F6h, 0D4F7h, 0D4F8h, 0D4F9h
.text:004122FC                 dd 0D4FAh, 0D4FBh, 0D4FCh, 0D4FDh, 0D4FEh, 0D4FFh, 0D500h
.text:004122FC                 dd 0D501h, 0D502h, 0D503h, 0D504h, 0D505h, 0D507h, 0D508h
.text:004122FC                 dd 0D509h, 0D50Ah, 0D50Dh, 0D50Eh, 0D50Fh, 0D510h, 0D511h
.text:004122FC                 dd 0D512h, 0D513h, 0D514h, 0D516h, 0D517h, 0D518h, 0D519h
.text:004122FC                 dd 0D51Ah, 0D51Bh, 0D51Ch, 0D51Eh, 0D51Fh, 0D520h, 0D521h
.text:004122FC                 dd 0D522h, 0D523h, 0D524h, 0D525h, 0D526h, 0D527h, 0D528h
.text:004122FC                 dd 0D529h, 0D52Ah, 0D52Bh, 0D52Ch, 0D52Dh, 0D52Eh, 0D52Fh
.text:004122FC                 dd 0D530h, 0D531h, 0D532h, 0D533h, 0D534h, 0D535h, 0D536h
.text:004122FC                 dd 0D537h, 0D538h, 0D539h, 0D53Bh, 0D53Ch, 0D53Dh, 0D53Eh
.text:004122FC                 dd 0D540h, 0D541h, 0D542h, 0D543h, 0D544h, 0D546h, 0D54Ah
.text:004122FC                 dd 0D54Bh, 0D54Ch, 0D54Dh, 0D54Eh, 0D54Fh, 0D550h, 0D552h
.text:004122FC                 dd 0D553h, 0D554h, 0D555h, 0D556h, 0D557h, 0D558h, 0D559h
.text:004122FC                 dd 0D55Ah, 0D55Bh, 0D55Ch, 0D55Dh, 0D55Eh, 0D55Fh, 0D560h
.text:004122FC                 dd 0D561h, 0D562h, 0D563h, 0D564h, 0D565h, 0D566h, 0D567h
.text:004122FC                 dd 0D568h, 0D569h, 0D56Ah, 0D56Bh, 0D56Ch, 0D56Dh, 0D56Eh
.text:004122FC                 dd 0D56Fh, 0D570h, 0D571h, 0D572h, 0D573h, 0D574h, 0D575h
.text:004122FC                 dd 0D576h, 0D577h, 0D578h, 0D579h, 0D57Ah, 0D57Bh, 0D57Ch
.text:004122FC                 dd 0D57Dh, 0D57Eh, 0D57Fh, 0D580h, 0D581h, 0D582h, 0D583h
.text:004122FC                 dd 0D584h, 0D585h, 0D586h, 0D587h, 0D588h, 0D589h, 0D58Ah
.text:004122FC                 dd 0D58Bh, 0D58Ch, 0D58Dh, 0D58Eh, 0D58Fh, 0D590h, 0D591h
.text:004122FC                 dd 0D592h, 0D593h, 0D594h, 0D595h, 0D596h, 0D597h, 0D598h
.text:004122FC                 dd 0D599h, 0D59Ah, 0D59Bh, 0D59Ch, 0D59Dh, 0D59Eh, 0D59Fh
.text:004122FC                 dd 0D5A0h, 0D5A1h, 0D5A2h, 0D5A3h, 0D5A4h, 0D5A5h, 0D5A6h
.text:004122FC                 dd 0D5A7h, 0D5A8h, 0D5A9h, 0D5AAh, 0D5ABh, 0D5ACh, 0D5ADh
.text:004122FC                 dd 0D5AEh, 0D5AFh, 0D5B0h, 0D5B1h, 0D5B2h, 0D5B3h, 0D5B4h
.text:004122FC                 dd 0D5B5h, 0D5B6h, 0D5B7h, 0D5B8h, 0D5B9h, 0D5BAh, 0D5BBh
.text:004122FC                 dd 0D5BCh, 0D5BDh, 0D5BEh, 0D5BFh, 0D5C0h, 0D5C1h, 0D5C2h
.text:004122FC                 dd 0D5C3h, 0D5C4h, 0D5C5h, 0D5C6h, 0D5C7h, 0D5C8h, 0D5C9h
.text:004122FC                 dd 0D5CAh, 0D5CBh, 0D5CCh, 0D5CDh, 0D5CEh, 0D5CFh, 0D5D0h
.text:004122FC                 dd 0D5D1h, 0D5D2h, 0D5D3h, 0D5D4h, 0D5D5h, 0D5D6h, 0D5D7h
.text:004122FC                 dd 0D5D8h, 0D5D9h, 0D5DAh, 0D5DBh, 0D5DCh, 0D5DDh, 0D5DEh
.text:004122FC                 dd 0D5DFh, 0D5E0h, 0D5E1h, 0D5E2h, 0D5E3h, 0D5E4h, 0D5E5h
.text:004122FC                 dd 0D5E6h, 0D5E7h, 0D5E8h, 0D5E9h, 0D5EAh, 0D5EBh, 0D5ECh
.text:004122FC                 dd 0D5EDh, 0D5EEh, 0D5EFh, 0D5F0h, 0D5F1h, 0D5F2h, 0D5F3h
.text:004122FC                 dd 0D5F4h, 0D5F5h, 0D5F6h, 0D5F7h, 0D5F8h, 0D5F9h, 0D5FAh
.text:004122FC                 dd 0D5FBh, 0D5FCh, 0D5FDh, 0D5FEh, 0D5FFh, 0D600h, 0D601h
.text:004122FC                 dd 0D602h, 0D603h, 0D604h, 0D605h, 0D606h, 0D607h, 0D608h
.text:004122FC                 dd 0D609h, 0D60Ah, 0D60Bh, 0D60Ch, 0D60Dh, 0D60Eh, 0D60Fh
.text:004122FC                 dd 0D610h, 0D611h, 0D612h, 0D613h, 0D614h, 0D615h, 0D616h
.text:004122FC                 dd 0D617h, 0D618h, 0D619h, 0D61Ah, 0D61Bh, 0D61Ch, 0D61Dh
.text:004122FC                 dd 0D61Eh, 0D61Fh, 0D620h, 0D621h, 0D622h, 0D623h, 0D624h
.text:004122FC                 dd 0D625h, 0D626h, 0D627h, 0D628h, 0D629h, 0D62Ah, 0D62Bh
.text:004122FC                 dd 0D62Ch, 0D62Dh, 0D62Eh, 0D62Fh, 0D630h, 0D631h, 0D632h
.text:004122FC                 dd 0D633h, 0D634h, 0D635h, 0D636h, 0D637h, 0D638h, 0D639h
.text:004122FC                 dd 0D63Ah, 0D63Bh, 0D63Ch, 0D63Dh, 0D63Eh, 0D63Fh, 0D640h
.text:004122FC                 dd 0D641h, 0D642h, 0D643h, 0D644h, 0D645h, 0D646h, 0D647h
.text:004122FC                 dd 0D648h
.text:00412AFC                 dd 0D649h, 0D64Ah, 0D64Bh, 0D64Ch, 0D64Dh, 0D64Eh, 0D64Fh
.text:00412AFC                 dd 0D650h, 0D651h, 0D652h, 0D653h, 0D654h, 0D655h, 0D656h
.text:00412AFC                 dd 0D657h, 0D658h, 0D659h, 0D65Ah, 0D65Bh, 0D65Ch, 0D65Dh
.text:00412AFC                 dd 0D65Eh, 0D65Fh, 0D660h, 0D661h, 0D662h, 0D663h, 0D664h
.text:00412AFC                 dd 0D665h, 0D666h, 0D667h, 0D668h, 0D669h, 0D66Ah, 0D66Bh
.text:00412AFC                 dd 0D66Ch, 0D66Dh, 0D66Eh, 0D66Fh, 0D670h, 0D671h, 0D672h
.text:00412AFC                 dd 0D673h, 0D674h, 0D675h, 0D676h, 0D677h, 0D678h, 0D679h
.text:00412AFC                 dd 0D67Ah, 0D67Bh, 0D67Ch, 0D67Dh, 0D67Eh, 0D67Fh, 0D680h
.text:00412AFC                 dd 0D681h, 0D682h, 0D683h, 0D684h, 0D685h, 0D686h, 0D687h
.text:00412AFC                 dd 0D688h, 0D689h, 0D68Ah, 0D68Bh, 0D68Ch, 0D68Dh, 0D68Eh
.text:00412AFC                 dd 0D68Fh, 0D690h, 0D691h, 0D692h, 0D693h, 0D694h, 0D695h
.text:00412AFC                 dd 0D696h, 0D697h, 0D698h, 0D699h, 0D69Ah, 0D69Bh, 0D69Ch
.text:00412AFC                 dd 0D69Dh, 0D69Eh, 0D69Fh, 0D6A0h, 0D6A1h, 0D6A2h, 0D6A3h
.text:00412AFC                 dd 0D7CEh, 0D7CFh, 0D7D0h, 0D7D1h, 0D7D2h, 0D7D3h, 0D7D4h
.text:00412AFC                 dd 0D7D5h, 0D7D6h, 0D7D7h, 0D7D8h, 0D7D9h, 0D7DAh, 0D7DBh
.text:00412AFC                 dd 0D7DCh, 0D7DDh, 0D7DEh, 0D7DFh, 0D7E0h, 0D7E1h, 0D7E2h
.text:00412AFC                 dd 0D7E3h, 0D7E4h, 0D7E5h, 0D7E6h, 0D7E7h, 0D7E8h, 0D7E9h
.text:00412AFC                 dd 0D7EAh, 0D7EBh, 0D7ECh, 0D7EDh, 0D7EEh, 0D7EFh, 0D7F0h
.text:00412AFC                 dd 0D7F1h, 0D7F2h, 0D7F3h, 0D7F4h, 0D7F5h, 0D7F6h, 0D7F7h
.text:00412AFC                 dd 0D7F8h, 0D7F9h, 0D7FAh, 0D7FBh, 0D7FCh, 0D7FDh, 0D7FEh
.text:00412AFC                 dd 0D7FFh, 0
.text:00412D34                 dd 3, 8, 0Ch, 0Fh, 14h, 17h, 1Ah, 1Eh, 25h, 2Ch, 33h, 37h
.text:00412D34                 dd 3Ah, 3Eh, 42h, 46h, 4Ah, 4Eh, 52h, 56h, 5Ah, 5Eh, 61h
.text:00412D34                 dd 65h, 69h, 6Dh, 71h, 75h, 79h, 7Dh, 81h, 85h, 88h, 8Bh
.text:00412D34                 dd 8Eh, 91h, 94h, 97h, 9Ah, 9Dh, 0A0h, 0A3h, 0A6h, 0A9h
.text:00412D34                 dd 0ACh, 0AFh, 0B2h, 0B4h, 0B7h, 0BAh, 0BDh, 0C0h, 0C4h
.text:00412D34                 dd 0C7h, 0CAh, 0CDh, 0D0h, 0D3h, 0D6h, 0D9h, 0DDh, 0E0h
.text:00412D34                 dd 0E3h, 0E6h, 0E9h, 0EDh, 0F2h, 0F5h, 0F8h, 0FCh, 101h
.text:00412D34                 dd 104h, 107h, 10Bh, 10Fh, 113h, 117h, 11Ah, 11Ch, 11Eh
.text:00412D34                 dd 120h, 122h, 126h, 12Bh, 130h, 135h, 138h, 13Dh, 142h
.text:00412D34                 dd 145h, 148h, 14Bh, 14Eh, 151h, 154h, 157h, 15Ah, 15Dh
.text:00412D34                 dd 160h, 164h, 167h, 16Ah, 16Dh, 170h, 173h, 178h, 17Eh
.text:00412D34                 dd 181h, 186h, 189h, 18Ch, 18Fh, 192h, 195h, 198h, 19Bh
.text:00412D34                 dd 19Eh, 1A1h, 1A4h, 1A7h, 1AAh, 1ADh, 1B0h, 1B3h, 1BAh
.text:00412D34                 dd 1C1h, 1C8h, 1CFh, 1D6h, 1DDh, 1E4h, 1EBh, 1F2h, 1F9h
.text:00412D34                 dd 200h, 207h, 20Ch, 20Fh, 213h, 218h, 21Ch, 21Fh, 223h
.text:00412D34                 dd 228h, 22Eh, 232h, 235h, 239h, 23Eh, 241h, 244h, 247h
.text:00412D34                 dd 24Ah, 24Dh, 251h, 256h, 25Ah, 25Dh, 261h, 266h, 26Ch
.text:00412D34                 dd 270h, 273h, 277h, 27Ch, 27Fh, 282h, 285h, 288h, 28Ch
.text:00412D34                 dd 290h, 295h, 299h, 29Dh, 2A2h, 2A5h, 2A8h, 2ABh, 2AEh
.text:00412D34                 dd 2B1h, 2B4h, 2B7h, 2BBh, 2BFh, 2C3h, 2C7h, 2CCh, 2D1h
.text:00412D34                 dd 2D6h, 2DBh, 2E0h, 2E5h, 2EAh, 2EFh, 2F4h, 2F9h, 2FDh
.text:00412D34                 dd 301h, 305h, 309h, 30Dh, 311h, 315h, 319h, 31Eh, 323h
.text:00412D34                 dd 328h, 32Dh, 332h, 337h, 33Ch, 341h, 346h, 34Ah, 34Fh
.text:00412D34                 dd 354h, 358h, 35Ch, 360h, 364h, 368h, 36Dh, 370h, 374h
.text:00412D34                 dd 379h, 37Eh, 383h, 388h, 38Dh, 392h, 397h, 39Ch, 3A1h
.text:00412D34                 dd 3A7h, 3ADh, 3B3h, 3B9h, 3BFh, 3C5h, 3CBh, 3D1h, 3D7h
.text:00412D34                 dd 3DDh, 3E3h, 3E8h, 3EDh, 3F2h, 3F7h, 3FCh, 401h, 406h
.text:00412D34                 dd 40Bh, 410h, 416h, 41Ch, 422h, 428h, 42Eh, 434h, 43Ah
.text:00412D34                 dd 440h, 446h, 44Ch, 452h, 456h, 45Ah, 45Eh, 462h, 466h
.text:00412D34                 dd 46Ah, 46Eh, 472h, 476h, 47Bh, 480h, 485h, 48Ah, 48Fh
.text:00412D34                 dd 494h, 499h, 49Eh, 4A3h, 4A8h, 4ADh, 4B2h, 4B7h, 4BCh
.text:00412D34                 dd 4C1h, 4C6h, 4CBh, 4D0h, 4D5h, 4DAh, 4DFh, 4E4h, 4E9h
.text:00412D34                 dd 4EEh, 4F3h, 4F8h, 4FDh, 502h, 507h, 50Ch, 511h, 516h
.text:00412D34                 dd 51Bh, 520h, 525h, 52Ah, 52Fh, 534h, 539h, 53Eh, 543h
.text:00412D34                 dd 548h, 54Dh, 552h, 557h, 55Ch, 561h, 566h, 56Bh, 570h
.text:00412D34                 dd 575h, 57Ah, 57Fh, 584h, 589h, 58Eh, 593h, 598h, 59Dh
.text:00412D34                 dd 5A2h, 5A7h, 5ACh, 5B1h, 5B6h, 5BBh, 5C0h, 5C5h, 5CAh
.text:00412D34                 dd 5CFh, 5D4h, 5D9h, 5DEh, 5E3h, 5E8h, 5EDh, 5F2h, 5F7h
.text:00412D34                 dd 5FCh, 601h, 606h, 60Bh, 610h, 615h, 61Ah, 61Fh, 624h
.text:00412D34                 dd 629h, 62Eh, 633h, 638h, 63Bh, 63Eh, 641h, 644h, 647h
.text:00412D34                 dd 64Ah, 64Dh, 650h, 653h, 656h, 659h, 65Ch, 661h, 665h
.text:00412D34                 dd 66Ah, 66Dh, 670h, 676h, 67Ch, 682h, 688h, 68Eh, 694h
.text:00412D34                 dd 69Ah, 6A0h, 6A6h, 6ACh, 6B2h, 6B8h, 6BEh, 6C4h, 6CAh
.text:00412D34                 dd 6D0h, 6D6h, 6DCh, 6E2h, 6E8h, 6EEh, 6F4h, 6FAh, 700h
.text:00412D34                 dd 706h, 70Ch, 712h, 718h, 71Eh, 724h, 729h, 72Dh, 731h
.text:00412D34                 dd 736h, 73Ah, 73Eh, 742h, 746h, 74Ah, 74Eh, 752h, 756h
.text:00412D34                 dd 75Ah, 75Eh, 763h, 769h, 76Dh, 771h, 775h, 779h, 77Dh
.text:00412D34                 dd 781h, 785h, 78Ah, 78Fh, 794h, 799h, 79Dh, 7A1h, 7A5h
.text:00412D34                 dd 7A9h, 7ADh, 7B1h, 7B5h, 7B9h, 7BDh, 7C1h, 7C7h, 7CDh
.text:00412D34                 dd 7D2h, 7D8h, 7DEh, 7E4h, 7E9h, 7EFh, 7F4h, 7FBh, 7FFh
.text:00412D34                 dd 804h, 809h, 80Eh, 813h, 81Ah, 823h, 827h, 82Bh, 82Fh
.text:00412D34                 dd 833h, 837h, 83Bh, 83Fh, 843h, 847h, 84Bh, 84Fh, 853h
.text:00412D34                 dd 857h, 85Bh, 85Fh, 863h, 869h, 86Dh, 871h, 875h, 87Bh
.text:00412D34                 dd 880h, 884h, 888h, 88Ch, 890h, 894h, 898h, 89Ch, 8A0h
.text:00412D34                 dd 8A4h, 8A8h, 8ADh, 8B1h, 8B5h, 8BAh, 8BFh, 8C3h, 8C9h
.text:00412D34                 dd 8CEh, 8D2h, 8D6h, 8DAh, 8DEh, 8E2h, 8E6h, 8EAh, 8EFh
.text:00413534                 dd 8F4h, 8F8h, 8FBh, 8FDh, 8FFh, 901h, 903h, 905h, 907h
.text:00413534                 dd 909h, 90Bh, 90Dh, 90Fh, 911h, 913h, 915h, 917h, 919h
.text:00413534                 dd 91Bh, 91Eh, 921h, 924h, 927h, 92Ah, 92Dh, 930h, 933h
.text:00413534                 dd 936h, 939h, 93Ch, 93Fh, 942h, 945h, 948h, 94Bh, 94Eh
.text:00413534                 dd 951h, 954h, 957h, 95Ah, 95Dh, 960h, 963h, 966h, 968h
.text:00413534                 dd 96Bh, 96Eh, 971h, 974h, 977h, 97Ah, 97Dh, 980h, 983h
.text:00413534                 dd 986h, 989h, 98Ch, 98Fh, 992h, 995h, 998h, 99Bh, 99Eh
.text:00413534                 dd 9A1h, 9A4h, 9A7h, 9AAh, 9ADh, 9B0h, 9B3h, 9B6h, 9B9h
.text:00413534                 dd 9BCh, 9BFh, 9C2h, 9C5h, 9C8h, 9CBh, 9CEh, 9D1h, 9D4h
.text:00413534                 dd 9D7h, 9DAh, 9DDh, 9E0h, 9E3h, 9E6h, 9E9h, 9ECh, 9EFh
.text:00413534                 dd 9F2h, 9F5h, 9F8h, 9FBh, 9FEh, 0A01h, 0A04h, 0A07h, 0A0Ah
.text:00413534                 dd 0A0Dh, 0A10h, 0A13h, 0A16h, 0A19h, 0A1Ch, 0A1Fh, 0A22h
.text:00413534                 dd 0A25h, 0A28h, 0A2Bh, 0A2Eh, 0A31h, 0A34h, 0A37h, 0A3Ah
.text:00413534                 dd 0A3Dh, 0A40h, 0A43h, 0A46h, 0A49h, 0A4Ch, 0A4Fh, 0A52h
.text:00413534                 dd 0A55h, 0A58h, 0A5Bh, 0A5Eh, 0A61h, 0A64h, 0A67h, 0A6Ah
.text:00413534                 dd 0A6Dh, 0A70h, 0A73h, 0A76h, 0A79h, 0A7Ch, 0A7Fh, 0A82h
.text:00413534                 dd 0A85h, 0A88h, 0A8Bh, 0A8Eh, 0A91h, 0A94h, 0A97h, 0A9Ah
.text:00413534                 dd 0A9Dh, 0AA0h, 0AA3h, 0AA6h, 0AA9h, 0AACh, 0AAFh, 0AB2h
.text:00413534                 dd 0AB5h, 0AB8h, 0ABBh, 0ABEh, 0AC1h, 0AC4h, 0AC7h, 0ACAh
.text:00413534                 dd 0ACDh, 0AD0h, 0AD3h, 0AD6h, 0AD9h, 0ADCh, 0ADFh, 0AE2h
.text:00413534                 dd 0AE5h, 0AE8h, 0AEBh, 0AEEh, 0AF1h, 0AF4h, 0AF7h, 0AFAh
.text:00413534                 dd 0AFDh, 0B00h, 0B03h, 0B06h, 0B09h, 0B0Ch, 0B0Fh, 0B12h
.text:00413534                 dd 0B15h, 0B18h, 0B1Bh, 0B1Eh, 0B21h, 0B24h, 0B27h, 0B2Ah
.text:00413534                 dd 0B2Dh, 0B30h, 0B33h, 0B36h, 0B39h, 0B3Ch, 0B3Fh, 0B42h
.text:00413534                 dd 0B45h, 0B48h, 0B4Bh, 0B4Eh, 0B51h, 0B54h, 0B57h, 0B5Ah
.text:00413534                 dd 0B5Dh, 0B60h, 0B63h, 0B66h, 0B69h, 0B6Ch, 0B6Fh, 0B72h
.text:00413534                 dd 0B75h, 0B78h, 0B7Bh, 0B7Eh, 0B81h, 0B84h, 0B87h, 0B8Ah
.text:00413534                 dd 0B8Dh, 0B90h, 0B93h, 0B96h, 0B99h, 0B9Ch, 0B9Fh, 0BA2h
.text:00413534                 dd 0BA5h, 0BA8h, 0BABh, 0BAEh, 0BB1h, 0BB4h, 0BB7h, 0BBAh
.text:00413534                 dd 0BBDh, 0BC0h, 0BC3h, 0BC6h, 0BC9h, 0BCCh, 0BCFh, 0BD2h
.text:00413534                 dd 0BD5h, 0BD8h, 0BDBh, 0BDEh, 0BE1h, 0BE4h, 0BE7h, 0BEAh
.text:00413534                 dd 0BEDh, 0BF0h, 0BF3h, 0BF6h, 0BF9h, 0BFCh, 0BFFh, 0C02h
.text:00413534                 dd 0C05h, 0C08h, 0C0Bh, 0C0Eh, 0C11h, 0C14h, 0C17h, 0C1Ah
.text:00413534                 dd 0C1Dh, 0C20h, 0C23h, 0C26h, 0C29h, 0C2Ch, 0C2Fh, 0C32h
.text:00413534                 dd 0C35h, 0C38h, 0C3Bh, 0C3Eh, 0C41h, 0C44h, 0C47h, 0C4Ah
.text:00413534                 dd 0C4Dh, 0C50h, 0C53h, 0C56h, 0C59h, 0C5Ch, 0C5Fh, 0C62h
.text:00413534                 dd 0C65h, 0C68h, 0C6Bh, 0C6Eh, 0C71h, 0C74h, 0C77h, 0C7Ah
.text:00413534                 dd 0C7Dh, 0C80h, 0C83h, 0C86h, 0C89h, 0C8Ch, 0C8Fh, 0C92h
.text:00413534                 dd 0C95h, 0C98h, 0C9Bh, 0C9Eh, 0CA1h, 0CA4h, 0CA7h, 0CAAh
.text:00413534                 dd 0CADh, 0CB0h, 0CB3h, 0CB6h, 0CB9h, 0CBCh, 0CBFh, 0CC2h
.text:00413534                 dd 0CC5h, 0CC8h, 0CCBh, 0CCEh, 0CD1h, 0CD4h, 0CD7h, 0CDAh
.text:00413534                 dd 0CDDh, 0CE0h, 0CE3h, 0CE6h, 0CE9h, 0CECh, 0CEFh, 0CF2h
.text:00413534                 dd 0CF5h, 0CF8h, 0CFBh, 0CFEh, 0D01h, 0D04h, 0D07h, 0D0Ah
.text:00413534                 dd 0D0Dh, 0D10h, 0D13h, 0D16h, 0D19h, 0D1Ch, 0D1Fh, 0D22h
.text:00413534                 dd 0D25h, 0D28h, 0D2Bh, 0D2Eh, 0D31h, 0D34h, 0D37h, 0D3Ah
.text:00413534                 dd 0D3Dh, 0D40h, 0D43h, 0D46h, 0D49h, 0D4Ch, 0D4Fh, 0D52h
.text:00413534                 dd 0D55h, 0D58h, 0D5Bh, 0D5Eh, 0D61h, 0D64h, 0D67h, 0D6Ah
.text:00413534                 dd 0D6Dh, 0D70h, 0D73h, 0D76h, 0D79h, 0D7Ch, 0D7Fh, 0D82h
.text:00413534                 dd 0D85h, 0D88h, 0D8Bh, 0D8Eh, 0D91h, 0D94h, 0D97h, 0D9Ah
.text:00413534                 dd 0D9Dh, 0DA0h, 0DA3h, 0DA6h, 0DA9h, 0DACh, 0DAFh, 0DB2h
.text:00413534                 dd 0DB5h, 0DB8h, 0DBBh, 0DBEh, 0DC1h, 0DC4h, 0DC7h, 0DCAh
.text:00413534                 dd 0DCDh, 0DD0h, 0DD3h, 0DD6h, 0DD9h, 0DDCh, 0DDFh, 0DE2h
.text:00413534                 dd 0DE5h, 0DE8h, 0DEBh, 0DEEh, 0DF1h, 0DF4h, 0DF7h, 0DFAh
.text:00413534                 dd 0DFDh, 0E00h, 0E03h, 0E06h, 0E09h, 0E0Ch, 0E0Fh, 0E12h
.text:00413534                 dd 0E15h, 0E18h, 0E1Bh, 0E1Eh, 0E21h, 0E24h, 0E27h, 0E2Ah
.text:00413534                 dd 0E2Dh, 0E30h, 0E33h, 0E36h, 0E39h, 0E3Ch, 0E3Fh, 0E42h
.text:00413534                 dd 0E45h, 0E48h, 0E4Bh, 0E4Eh, 0E51h, 0E54h, 0E57h, 0E5Ah
.text:00413534                 dd 0E5Dh, 0E60h, 0E63h, 0E66h, 0E69h, 0E6Ch, 0E6Fh, 0E72h
.text:00413534                 dd 0E75h, 0E78h, 0E7Bh, 0E7Eh, 0E81h, 0E84h, 0E87h, 0E8Ah
.text:00413534                 dd 0E8Dh, 0E90h, 0E93h, 0E96h, 0E99h, 0E9Ch, 0E9Fh, 0EA2h
.text:00413534                 dd 0EA5h, 0EA8h, 0EABh, 0EAEh, 0EB1h, 0EB4h, 0EB7h, 0EBAh
.text:00413534                 dd 0EBDh, 0EC0h, 0EC3h, 0EC6h, 0EC9h, 0ECCh, 0ECFh, 0ED2h
.text:00413534                 dd 0ED5h, 0ED8h, 0EDBh, 0EDEh, 0EE1h
.text:00413D34                 dd 0EE4h, 0EE7h, 0EEAh, 0EEDh, 0EF0h, 0EF3h, 0EF6h, 0EF9h
.text:00413D34                 dd 0EFCh, 0EFFh, 0F02h, 0F05h, 0F08h, 0F0Bh, 0F0Eh, 0F11h
.text:00413D34                 dd 0F14h, 0F17h, 0F1Ah, 0F1Dh, 0F20h, 0F23h, 0F26h, 0F29h
.text:00413D34                 dd 0F2Ch, 0F2Fh, 0F32h, 0F35h, 0F38h, 0F3Bh, 0F3Eh, 0F41h
.text:00413D34                 dd 0F44h, 0F47h, 0F4Ah, 0F4Dh, 0F50h, 0F53h, 0F56h, 0F59h
.text:00413D34                 dd 0F5Ch, 0F5Fh, 0F62h, 0F65h, 0F68h, 0F6Bh, 0F6Eh, 0F71h
.text:00413D34                 dd 0F74h, 0F77h, 0F7Ah, 0F7Dh, 0F80h, 0F83h, 0F86h, 0F89h
.text:00413D34                 dd 0F8Ch, 0F8Fh, 0F92h, 0F95h, 0F98h, 0F9Bh, 0F9Eh, 0FA1h
.text:00413D34                 dd 0FA4h, 0FA7h, 0FAAh, 0FADh, 0FB0h, 0FB3h, 0FB6h, 0FB9h
.text:00413D34                 dd 0FBCh, 0FBFh, 0FC2h, 0FC5h, 0FC8h, 0FCBh, 0FCEh, 0FD1h
.text:00413D34                 dd 0FD4h, 0FD7h, 0FDAh, 0FDDh, 0FE0h, 0FE3h, 0FE6h, 0FE9h
.text:00413D34                 dd 0FECh, 0FEFh, 0FF2h, 0FF5h, 0FF8h, 0FFBh, 0FFEh, 1001h
.text:00413D34                 dd 1004h, 1007h, 100Ah, 100Dh, 1010h, 1013h, 1016h, 1019h
.text:00413D34                 dd 101Ch, 101Fh, 1022h, 1025h, 1028h, 102Bh, 102Eh, 1031h
.text:00413D34                 dd 1034h, 1037h, 103Ah, 103Dh, 1040h, 1043h, 1046h, 1049h
.text:00413D34                 dd 104Ch, 104Fh, 1052h, 1055h, 1058h, 105Bh, 105Eh, 1061h
.text:00413D34                 dd 1064h, 1067h, 106Ah, 106Dh, 1070h, 1073h, 1076h, 1079h
.text:00413D34                 dd 107Ch, 107Fh, 1082h, 1085h, 1088h, 108Bh, 108Eh, 1091h
.text:00413D34                 dd 1094h, 1097h, 109Ah, 109Dh, 10A0h, 10A3h, 10A6h, 10A9h
.text:00413D34                 dd 10ACh, 10AFh, 10B2h, 10B5h, 10B8h, 10BBh, 10BEh, 10C1h
.text:00413D34                 dd 10C4h, 10C7h, 10CAh, 10CDh, 10D0h, 10D3h, 10D6h, 10D9h
.text:00413D34                 dd 10DCh, 10DFh, 10E2h, 10E5h, 10E8h, 10EBh, 10EEh, 10F1h
.text:00413D34                 dd 10F4h, 10F7h, 10FAh, 10FDh, 1100h, 1103h, 1106h, 1109h
.text:00413D34                 dd 110Ch, 110Fh, 1112h, 1115h, 1118h, 111Bh, 111Eh, 1121h
.text:00413D34                 dd 1124h, 1127h, 112Ah, 112Dh, 1130h, 1133h, 1136h, 1139h
.text:00413D34                 dd 113Ch, 113Fh, 1142h, 1145h, 1148h, 114Bh, 114Eh, 1151h
.text:00413D34                 dd 1154h, 1157h, 115Ah, 115Dh, 1160h, 1163h, 1166h, 1169h
.text:00413D34                 dd 116Ch, 116Fh, 1172h, 1175h, 1178h, 117Bh, 117Eh, 1181h
.text:00413D34                 dd 1184h, 1187h, 118Ah, 118Dh, 1190h, 1193h, 1196h, 1199h
.text:00413D34                 dd 119Ch, 119Fh, 11A2h, 11A5h, 11A8h, 11ABh, 11AEh, 11B1h
.text:00413D34                 dd 11B4h, 11B7h, 11BAh, 11BDh, 11C0h, 11C3h, 11C6h, 11C9h
.text:00413D34                 dd 11CCh, 11CFh, 11D2h, 11D5h, 11D8h, 11DBh, 11DEh, 11E1h
.text:00413D34                 dd 11E4h, 11E7h, 11EAh, 11EDh, 11F0h, 11F3h, 11F6h, 11F9h
.text:00413D34                 dd 11FCh, 11FFh, 1202h, 1205h, 1208h, 120Bh, 120Eh, 1211h
.text:00413D34                 dd 1214h, 1217h, 121Ah, 121Dh, 1220h, 1223h, 1226h, 1229h
.text:00413D34                 dd 122Ch, 122Fh, 1232h, 1235h, 1238h, 123Bh, 123Eh, 1241h
.text:00413D34                 dd 1244h, 1247h, 124Ah, 124Dh, 1250h, 1253h, 1256h, 1259h
.text:00413D34                 dd 125Ch, 125Fh, 1262h, 1265h, 1268h, 126Bh, 126Eh, 1271h
.text:00413D34                 dd 1274h, 1277h, 127Ah, 127Dh, 1280h, 1283h, 1286h, 1289h
.text:00413D34                 dd 128Ch, 128Fh, 1292h, 1295h, 1298h, 129Bh, 129Eh, 12A1h
.text:00413D34                 dd 12A4h, 12A7h, 12AAh, 12ADh, 12B0h, 12B3h, 12B6h, 20h
.text:00413D34                 dd 280000h, 290043h, 0
.text:00414260                 text "UTF-16LE", '<<',0
.text:00414266                 align 4
.text:00414268                 text "UTF-16LE", '-',0
.text:0041426C                 dd 280000h, 290052h, 0
.text:00414278                 dd 75h, 2C0000h, 0
.text:00414284                 text "UTF-16LE", '>>',0
.text:0041428A                 align 4
.text:0041428C a14:
.text:0041428C                 text "UTF-16LE", ' 1/4 ',0
.text:00414298                 dd 200000h, 2F0031h, 200032h, 0
.text:004142A8 a34:
.text:004142A8                 text "UTF-16LE", ' 3/4 ',0
.text:004142B4                 dd offset dword_40FE70+190h
.text:004142B8                 dd 45h, 780000h, 0
.text:004142C4 aSs:
.text:004142C4                 text "UTF-16LE", 'ss',0
.text:004142CA                 align 4
.text:004142CC aAe:
.text:004142CC                 text "UTF-16LE", 'ae',0
.text:004142D2                 align 4
.text:004142D4 aIj:
.text:004142D4                 text "UTF-16LE", 'IJ',0
.text:004142DA                 align 4
.text:004142DC aIj_0:
.text:004142DC                 text "UTF-16LE", 'ij',0
.text:004142E2                 align 4
.text:004142E4 aN:
.text:004142E4                 text "UTF-16LE", 27h,'n',0
.text:004142EA                 align 4
.text:004142EC aOe:
.text:004142EC                 text "UTF-16LE", 'OE',0
.text:004142F2                 align 4
.text:004142F4 aOe_0:
.text:004142F4                 text "UTF-16LE", 'OE',0
.text:004142FA                 align 4
.text:004142FC aOe_1:
.text:004142FC                 text "UTF-16LE", 'oe',0
.text:00414302                 align 4
.text:00414304 aOe_2:
.text:00414304                 text "UTF-16LE", 'oe',0
.text:0041430A                 align 4
.text:0041430C aS_3:
.text:0041430C                 text "UTF-16LE", 's',0
.text:00414310                 dd 4C0000h, 4Ah, 4C0000h, 6Ah, 6C0000h, 6Ah, 4E0000h, 4Ah
.text:00414310                 dd 4E0000h, 6Ah, 6E0000h, 6Ah, 440000h, 5Ah, 440000h, 7Ah
.text:00414310                 dd 640000h, 7Ah, 270000h, 0
.text:00414360                 dd 5Eh, 270000h, 0
.text:0041436C                 dd 60h, 5F0000h, 0
.text:00414378                 dd 3Ah, 7E0000h, 0
.text:00414384                 dd 20h, 200000h, 0
.text:00414390                 dd 20h, 200000h, 0
.text:0041439C                 dd 20h, 200000h, 0
.text:004143A8                 dd 20h, 200000h, 2 dup(0)
.text:004143B8                 db 2Dh, 4 dup(0)
.text:004143BD                 db 0, 2Dh, 0
.text:004143C0                 dd 0
.text:004143C4                 align 10h
.text:004143D0                 text "UTF-16LE", '--',0
.text:004143D6                 align 4
.text:004143D8                 text "UTF-16LE", '-',0
.text:004143DC                 dd 270000h, 0
.text:004143E4                 dd 27h, 2C0000h, 0
.text:004143F0                 dd 27h, 220000h, 0
.text:004143FC                 dd 22h, 2C0000h, 2Ch, 220000h, 0
.text:00414410                 dd 2Bh, 6F0000h, 0
.text:0041441C                 dd 2Eh, 2E0000h, 2Eh, 2E0000h, 2E002Eh, 0
.text:00414434                 dd 20h, 600000h, 0
.text:00414440                 text "UTF-16LE", '``',0
.text:00414446                 align 4
.text:00414448                 text "UTF-16LE", '```',0
.text:00414450                 dd 3C0000h, 0
.text:00414458                 dd 3Eh, 210000h, 21h, 3F0000h, 3Fh, 3F0000h, 21h, 210000h
.text:00414458                 dd 3Fh, 200000h, 5 dup(0)
.text:00414494 aRs:
.text:00414494                 text "UTF-16LE", 'Rs',0
.text:0041449A                 align 4
.text:0041449C aEur:
.text:0041449C                 text "UTF-16LE", 'EUR',0
.text:004144A4                 dd 610000h, 63002Fh, 0
.text:004144B0 aAS:
.text:004144B0                 text "UTF-16LE", 'a/s',0
.text:004144B8                 dd 430000h, 0
.text:004144C0 aCO:
.text:004144C0                 text "UTF-16LE", 'c/o',0
.text:004144C8                 dd 630000h, 75002Fh, 0
.text:004144D4                 dd 67h, 480000h, 0
.text:004144E0                 dd 48h, 480000h, 0
.text:004144EC                 dd 68h, 490000h, 0
.text:004144F8                 dd 49h, 4C0000h, 0
.text:00414504                 dd 6Ch, 4E0000h, 0
.text:00414510 aNo:
.text:00414510                 text "UTF-16LE", 'No',0
.text:00414516                 align 4
.text:00414518 aP:
.text:00414518                 text "UTF-16LE", 'P',0
.text:0041451C                 dd 510000h, 0
.text:00414524                 dd 52h, 520000h, 0
.text:00414530                 dd 52h, 540000h, 4C0045h, 0
.text:00414540 aTm:
.text:00414540                 text "UTF-16LE", '(TM)',0
.text:0041454A                 align 4
.text:0041454C aZ:
.text:0041454C                 text "UTF-16LE", 'Z',0
.text:00414550                 dd 4F0000h, 6D0068h, 0
.text:0041455C                 dd 5Ah, 420000h, 0
.text:00414568                 dd 43h, 650000h, 0
.text:00414574                 dd 65h, 450000h, 0
.text:00414580                 dd 46h, 4D0000h, 0
.text:0041458C                 dd 6Fh, 690000h, 0
.text:00414598                 dd 44h, 640000h, 0
.text:004145A4                 dd 65h, 690000h, 0
.text:004145B0                 dd 6Ah, 200000h, 2F0031h, 200033h, 0
.text:004145C4 a23:
.text:004145C4                 text "UTF-16LE", ' 2/3 ',0
.text:004145D0                 dd 200000h, 2F0031h, 200035h, 0
.text:004145E0 a25:
.text:004145E0                 text "UTF-16LE", ' 2/5 ',0
.text:004145EC                 dd 200000h, 2F0033h, 200035h, 0
.text:004145FC a45:
.text:004145FC                 text "UTF-16LE", ' 4/5 ',0
.text:00414608                 dd 200000h, 2F0031h, 200036h, 0
.text:00414618 a56:
.text:00414618                 text "UTF-16LE", ' 5/6 ',0
.text:00414624                 dd 200000h, 2F0031h, 200038h, 0
.text:00414634 a38:
.text:00414634                 text "UTF-16LE", ' 3/8 ',0
.text:00414640                 dd 200000h, 2F0035h, 200038h, 0
.text:00414650 a78:
.text:00414650                 text "UTF-16LE", ' 7/8 ',0
.text:0041465C                 dd 200000h, 2F0031h, 0
.text:00414668                 dd 49h, 490000h, 49h, 490000h, 490049h, 0
.text:00414680 aIv:
.text:00414680                 text "UTF-16LE", 'IV',0
.text:00414686                 align 4
.text:00414688 aV:
.text:00414688                 text "UTF-16LE", 'V',0
.text:0041468C                 dd 560000h, 49h, 560000h, 490049h, 0
.text:004146A0 aViii:
.text:004146A0                 text "UTF-16LE", 'VIII',0
.text:004146AA                 align 4
.text:004146AC aIx:
.text:004146AC                 text "UTF-16LE", 'IX',0
.text:004146B2                 align 4
.text:004146B4                 text "UTF-16LE", 'X',0
.text:004146B8                 dd 580000h, 49h, 580000h, 490049h, 0
.text:004146CC                 dd 4Ch, 430000h, 0
.text:004146D8                 dd 44h, 4D0000h, 0
.text:004146E4                 dd 69h, 690000h, 69h, 690000h, 690069h, 0
.text:004146FC aIv_0:
.text:004146FC                 text "UTF-16LE", 'iv',0
.text:00414702                 align 4
.text:00414704 aV_0:
.text:00414704                 text "UTF-16LE", 'v',0
.text:00414708                 dd 760000h, 69h, 760000h, 690069h, 0
.text:0041471C aViii_0:
.text:0041471C                 text "UTF-16LE", 'viii',0
.text:00414726                 align 4
.text:00414728 aIx_0:
.text:00414728                 text "UTF-16LE", 'ix',0
.text:0041472E                 align 10h
.text:00414730                 text "UTF-16LE", 'x',0
.text:00414734                 dd 780000h, 69h, 780000h, 690069h, 0
.text:00414748                 dd 6Ch, 630000h, 0
.text:00414754                 dd 64h, 6D0000h, 0
.text:00414760                 text "UTF-16LE", '<-',0
.text:00414766                 align 4
.text:00414768                 text "UTF-16LE", '->',0
.text:0041476E                 align 10h
.text:00414770                 text "UTF-16LE", '<->',0
.text:00414778                 dd 3C0000h, 3Dh, 3D0000h, 3Eh, 3C0000h, 3E003Dh, 0
.text:00414794                 db 2Dh, 4 dup(0)
.text:00414799                 align 2
.text:0041479A                 dw 2Fh
.text:0041479C                 align 10h
.text:004147A0                 dd 5Ch, 2A0000h, 0
.text:004147AC                 dd 7Ch, 3A0000h, 0
.text:004147B8                 dd 7Eh, 3C0000h, 3Dh, 3E0000h, 3Dh, 3C0000h, 3Ch, 3E0000h
.text:004147B8                 dd 3Eh, 3C0000h, 3C003Ch, 0
.text:004147E8                 text "UTF-16LE", '>>>',0
.text:004147F0                 dd 4E0000h, 4C0055h, 0
.text:004147FC aSoh:
.text:004147FC                 text "UTF-16LE", 'SOH',0
.text:00414804                 dd 530000h, 580054h, 0
.text:00414810 aEtx:
.text:00414810                 text "UTF-16LE", 'ETX',0
.text:00414818                 dd 450000h, 54004Fh, 0
.text:00414824 aEnq:
.text:00414824                 text "UTF-16LE", 'ENQ',0
.text:0041482C                 dd offset dword_40FE70+190h
.text:00414830 aCk:
.text:00414830                 text "UTF-16LE", 'CK',0
.text:00414836                 align 4
.text:00414838 aBel:
.text:00414838                 text "UTF-16LE", 'BEL',0
.text:00414840                 dd 420000h, 53h, 480000h, 54h, 4C0000h, 46h, 560000h, 54h
.text:00414840                 dd 460000h, 46h, 430000h, 52h, 530000h, 4Fh, 530000h, 49h
.text:00414840                 dd 440000h, 45004Ch, 0
.text:0041488C aDc1:
.text:0041488C                 text "UTF-16LE", 'DC1',0
.text:00414894                 dd 440000h, 320043h, 0
.text:004148A0 aDc3:
.text:004148A0                 text "UTF-16LE", 'DC3',0
.text:004148A8                 dd 440000h, 340043h, 0
.text:004148B4                 dd offset dword_40FE70+1DEh
.text:004148B8                 dd 4Bh, 530000h, 4E0059h, 0
.text:004148C8 aEtb:
.text:004148C8                 text "UTF-16LE", 'ETB',0
.text:004148D0                 dd 430000h, 4E0041h, 0
.text:004148DC aEm:
.text:004148DC                 text "UTF-16LE", 'EM',0
.text:004148E2                 align 4
.text:004148E4 aSub:
.text:004148E4                 text "UTF-16LE", 'SUB',0
.text:004148EC                 dd 450000h, 430053h, 0
.text:004148F8 aFs:
.text:004148F8                 text "UTF-16LE", 'FS',0
.text:004148FE                 align 10h
.text:00414900 aGs:
.text:00414900                 text "UTF-16LE", 'GS',0
.text:00414906                 align 4
.text:00414908 aRs_0:
.text:00414908                 text "UTF-16LE", 'RS',0
.text:0041490E                 align 10h
.text:00414910 aUs:
.text:00414910                 text "UTF-16LE", 'US',0
.text:00414916                 align 4
.text:00414918 aSp:
.text:00414918                 text "UTF-16LE", 'SP',0
.text:0041491E                 align 10h
.text:00414920 aDel:
.text:00414920                 text "UTF-16LE", 'DEL',0
.text:00414928                 dd 5F0000h, 0
.text:00414930 aNl:
.text:00414930                 text "UTF-16LE", 'NL',0
.text:00414936                 align 4
.text:00414938 a1:
.text:00414938                 text "UTF-16LE", '(1)',0
.text:00414940                 dd 280000h, 290032h, 0
.text:0041494C a3:
.text:0041494C                 text "UTF-16LE", '(3)',0
.text:00414954                 dd 280000h, 290034h, 0
.text:00414960 a5:
.text:00414960                 text "UTF-16LE", '(5)',0
.text:00414968                 dd 280000h, 290036h, 0
.text:00414974 a7:
.text:00414974                 text "UTF-16LE", '(7)',0
.text:0041497C                 dd 280000h, 290038h, 0
.text:00414988 a9:
.text:00414988                 text "UTF-16LE", '(9)',0
.text:00414990                 dd 280000h, 300031h, 29h, 280000h, 310031h, 29h, 280000h
.text:00414990                 dd 320031h, 29h, 280000h, 330031h, 29h, 280000h, 340031h
.text:00414990                 dd 29h, 280000h, 350031h, 29h, 280000h, 360031h, 29h, 280000h
.text:00414990                 dd 370031h, 29h, 280000h, 380031h, 29h, 280000h, 390031h
.text:00414990                 dd 29h, 280000h, 300032h, 29h, 280000h, 290031h, 0
.text:00414A20 a2:
.text:00414A20                 text "UTF-16LE", '(2)',0
.text:00414A28                 dd 280000h, 290033h, 0
.text:00414A34 a4:
.text:00414A34                 text "UTF-16LE", '(4)',0
.text:00414A3C                 dd 280000h, 290035h, 0
.text:00414A48 a6:
.text:00414A48                 text "UTF-16LE", '(6)',0
.text:00414A50                 dd 280000h, 290037h, 0
.text:00414A5C a8:
.text:00414A5C                 text "UTF-16LE", '(8)',0
.text:00414A64                 dd 280000h, 290039h, 0
.text:00414A70 a10:
.text:00414A70                 text "UTF-16LE", '(10)',0
.text:00414A7A                 align 4
.text:00414A7C a11:
.text:00414A7C                 text "UTF-16LE", '(11)',0
.text:00414A86                 align 4
.text:00414A88 a12:
.text:00414A88                 text "UTF-16LE", '(12)',0
.text:00414A92                 align 4
.text:00414A94 a13:
.text:00414A94                 text "UTF-16LE", '(13)',0
.text:00414A9E                 align 10h
.text:00414AA0 a14_0:
.text:00414AA0                 text "UTF-16LE", '(14)',0
.text:00414AAA                 align 4
.text:00414AAC a15:
.text:00414AAC                 text "UTF-16LE", '(15)',0
.text:00414AB6                 align 4
.text:00414AB8 a16:
.text:00414AB8                 text "UTF-16LE", '(16)',0
.text:00414AC2                 align 4
.text:00414AC4 a17:
.text:00414AC4                 text "UTF-16LE", '(17)',0
.text:00414ACE                 align 10h
.text:00414AD0 a18:
.text:00414AD0                 text "UTF-16LE", '(18)',0
.text:00414ADA                 align 4
.text:00414ADC a19:
.text:00414ADC                 text "UTF-16LE", '(19)',0
.text:00414AE6                 align 4
.text:00414AE8 a20:
.text:00414AE8                 text "UTF-16LE", '(20)',0
.text:00414AF2                 align 4
.text:00414AF4 a1_0:
.text:00414AF4                 text "UTF-16LE", '1.',0
.text:00414AFA                 align 4
.text:00414AFC a2_0:
.text:00414AFC                 text "UTF-16LE", '2.',0
.text:00414B02                 align 4
.text:00414B04 a3_0:
.text:00414B04                 text "UTF-16LE", '3.',0
.text:00414B0A                 align 4
.text:00414B0C a4_0:
.text:00414B0C                 text "UTF-16LE", '4.',0
.text:00414B12                 align 4
.text:00414B14 a5_0:
.text:00414B14                 text "UTF-16LE", '5.',0
.text:00414B1A                 align 4
.text:00414B1C a6_0:
.text:00414B1C                 text "UTF-16LE", '6.',0
.text:00414B22                 align 4
.text:00414B24 a7_0:
.text:00414B24                 text "UTF-16LE", '7.',0
.text:00414B2A                 align 4
.text:00414B2C a8_0:
.text:00414B2C                 text "UTF-16LE", '8.',0
.text:00414B32                 align 4
.text:00414B34 a9_0:
.text:00414B34                 text "UTF-16LE", '9.',0
.text:00414B3A                 align 4
.text:00414B3C a10_0:
.text:00414B3C                 text "UTF-16LE", '10.',0
.text:00414B44                 dd 310000h, 2E0031h, 0
.text:00414B50 a12_0:
.text:00414B50                 text "UTF-16LE", '12.',0
.text:00414B58                 dd 310000h, 2E0033h, 0
.text:00414B64 a14_1:
.text:00414B64                 text "UTF-16LE", '14.',0
.text:00414B6C                 dd 310000h, 2E0035h, 0
.text:00414B78 a16_0:
.text:00414B78                 text "UTF-16LE", '16.',0
.text:00414B80                 dd 310000h, 2E0037h, 0
.text:00414B8C a18_0:
.text:00414B8C                 text "UTF-16LE", '18.',0
.text:00414B94                 dd 310000h, 2E0039h, 0
.text:00414BA0 a20_0:
.text:00414BA0                 text "UTF-16LE", '20.',0
.text:00414BA8                 dd 280000h, 290061h, 0
.text:00414BB4 aB:
.text:00414BB4                 text "UTF-16LE", '(b)',0
.text:00414BBC                 dd 280000h, 290063h, 0
.text:00414BC8 aD_0:
.text:00414BC8                 text "UTF-16LE", '(d)',0
.text:00414BD0                 dd 280000h, 290065h, 0
.text:00414BDC                 text "UTF-16LE", '(f)',0
.text:00414BE4                 dd 280000h, 290067h, 0
.text:00414BF0                 text "UTF-16LE", '(h)',0
.text:00414BF8                 dd 280000h, 290069h, 0
.text:00414C04 aJ:
.text:00414C04                 text "UTF-16LE", '(j)',0
.text:00414C0C                 dd 280000h, 29006Bh, 0
.text:00414C18                 text "UTF-16LE", '(l)',0
.text:00414C20                 dd 280000h, 29006Dh, 0
.text:00414C2C aN_0:
.text:00414C2C                 text "UTF-16LE", '(n)',0
.text:00414C34                 dd 280000h, 29006Fh, 0
.text:00414C40 aP_0:
.text:00414C40                 text "UTF-16LE", '(p)',0
.text:00414C48                 dd 280000h, 290071h, 0
.text:00414C54 aR_0:
.text:00414C54                 text "UTF-16LE", '(r)',0
.text:00414C5C                 dd 280000h, 290073h, 0
.text:00414C68 aT:
.text:00414C68                 text "UTF-16LE", '(t)',0
.text:00414C70                 dd 280000h, 290075h, 0
.text:00414C7C aV_1:
.text:00414C7C                 text "UTF-16LE", '(v)',0
.text:00414C84                 dd 280000h, 290077h, 0
.text:00414C90                 text "UTF-16LE", '(x)',0
.text:00414C98                 dd 280000h, 290079h, 0
.text:00414CA4 aZ_0:
.text:00414CA4                 text "UTF-16LE", '(z)',0
.text:00414CAC                 dd 280000h, 290041h, 0
.text:00414CB8 aB_0:
.text:00414CB8                 text "UTF-16LE", '(B)',0
.text:00414CC0                 dd 280000h, 290043h, 0
.text:00414CCC aD_1:
.text:00414CCC                 text "UTF-16LE", '(D)',0
.text:00414CD4                 dd 280000h, 290045h, 0
.text:00414CE0                 text "UTF-16LE", '(F)',0
.text:00414CE8                 dd 280000h, 290047h, 0
.text:00414CF4                 text "UTF-16LE", '(H)',0
.text:00414CFC                 dd 280000h, 290049h, 0
.text:00414D08 aJ_0:
.text:00414D08                 text "UTF-16LE", '(J)',0
.text:00414D10                 dd 280000h, 29004Bh, 0
.text:00414D1C                 text "UTF-16LE", '(L)',0
.text:00414D24                 dd 280000h, 29004Dh, 0
.text:00414D30 aN_1:
.text:00414D30                 text "UTF-16LE", '(N)',0
.text:00414D38                 dd 280000h, 29004Fh, 0
.text:00414D44 aP_1:
.text:00414D44                 text "UTF-16LE", '(P)',0
.text:00414D4C                 dd 280000h, 290051h, 0
.text:00414D58 aR_1:
.text:00414D58                 text "UTF-16LE", '(R)',0
.text:00414D60                 dd 280000h, 290053h, 0
.text:00414D6C aT_0:
.text:00414D6C                 text "UTF-16LE", '(T)',0
.text:00414D74                 dd 280000h, 290055h, 0
.text:00414D80 aV_2:
.text:00414D80                 text "UTF-16LE", '(V)',0
.text:00414D88                 dd 280000h, 290057h, 0
.text:00414D94                 text "UTF-16LE", '(X)',0
.text:00414D9C                 dd 280000h, 290059h, 0
.text:00414DA8 aZ_1:
.text:00414DA8                 text "UTF-16LE", '(Z)',0
.text:00414DB0                 dd 280000h, 290061h, 0
.text:00414DBC aB_1:
.text:00414DBC                 text "UTF-16LE", '(b)',0
.text:00414DC4                 dd 280000h, 290063h, 0
.text:00414DD0 aD_2:
.text:00414DD0                 text "UTF-16LE", '(d)',0
.text:00414DD8                 dd 280000h, 290065h, 0
.text:00414DE4                 text "UTF-16LE", '(f)',0
.text:00414DEC                 dd 280000h, 290067h, 0
.text:00414DF8                 text "UTF-16LE", '(h)',0
.text:00414E00                 dd 280000h, 290069h, 0
.text:00414E0C aJ_1:
.text:00414E0C                 text "UTF-16LE", '(j)',0
.text:00414E14                 dd 280000h, 29006Bh, 0
.text:00414E20                 text "UTF-16LE", '(l)',0
.text:00414E28                 dd 280000h, 29006Dh, 0
.text:00414E34 aN_2:
.text:00414E34                 text "UTF-16LE", '(n)',0
.text:00414E3C                 dd 280000h, 29006Fh, 0
.text:00414E48 aP_2:
.text:00414E48                 text "UTF-16LE", '(p)',0
.text:00414E50                 dd 280000h, 290071h, 0
.text:00414E5C aR_2:
.text:00414E5C                 text "UTF-16LE", '(r)',0
.text:00414E64                 dd 280000h, 290073h, 0
.text:00414E70 aT_1:
.text:00414E70                 text "UTF-16LE", '(t)',0
.text:00414E78                 dd 280000h, 290075h, 0
.text:00414E84 aV_3:
.text:00414E84                 text "UTF-16LE", '(v)',0
.text:00414E8C                 dd 280000h, 290077h, 0
.text:00414E98                 text "UTF-16LE", '(x)',0
.text:00414EA0                 dd 280000h, 290079h, 0
.text:00414EAC aZ_2:
.text:00414EAC                 text "UTF-16LE", '(z)',0
.text:00414EB4                 dd 280000h, 290030h, 0
.text:00414EC0                 db 2Dh, 4 dup(0)
.text:00414EC5                 align 2
.text:00414EC6                 dw 7Ch
.text:00414EC8                 dd 0
.text:00414ECC                 dd 2Bh, 2B0000h, 0
.text:00414ED8                 dd 2Bh, 2B0000h, 0
.text:00414EE4                 dd 2Bh, 2B0000h, 0
.text:00414EF0                 dd 2Bh, 2B0000h, 0
.text:00414EFC                 dd 2Bh, 6F0000h, 0
.text:00414F08                 text "UTF-16LE", '::=',0
.text:00414F10                 dd 3D0000h, 3Dh, 3D0000h, 3D003Dh, 0
.text:00414F24                 dd 20h, 3D0000h, 0
.text:00414F30 a21:
.text:00414F30                 text "UTF-16LE", '(21)',0
.text:00414F3A                 align 4
.text:00414F3C a22:
.text:00414F3C                 text "UTF-16LE", '(22)',0
.text:00414F46                 align 4
.text:00414F48 a23_0:
.text:00414F48                 text "UTF-16LE", '(23)',0
.text:00414F52                 align 4
.text:00414F54 a24:
.text:00414F54                 text "UTF-16LE", '(24)',0
.text:00414F5E                 align 10h
.text:00414F60 a25_0:
.text:00414F60                 text "UTF-16LE", '(25)',0
.text:00414F6A                 align 4
.text:00414F6C a26:
.text:00414F6C                 text "UTF-16LE", '(26)',0
.text:00414F76                 align 4
.text:00414F78 a27:
.text:00414F78                 text "UTF-16LE", '(27)',0
.text:00414F82                 align 4
.text:00414F84 a28:
.text:00414F84                 text "UTF-16LE", '(28)',0
.text:00414F8E                 align 10h
.text:00414F90 a29:
.text:00414F90                 text "UTF-16LE", '(29)',0
.text:00414F9A                 align 4
.text:00414F9C a30:
.text:00414F9C                 text "UTF-16LE", '(30)',0
.text:00414FA6                 align 4
.text:00414FA8 a31:
.text:00414FA8                 text "UTF-16LE", '(31)',0
.text:00414FB2                 align 4
.text:00414FB4 a32:
.text:00414FB4                 text "UTF-16LE", '(32)',0
.text:00414FBE                 align 10h
.text:00414FC0 a33:
.text:00414FC0                 text "UTF-16LE", '(33)',0
.text:00414FCA                 align 4
.text:00414FCC a34_0:
.text:00414FCC                 text "UTF-16LE", '(34)',0
.text:00414FD6                 align 4
.text:00414FD8 a35:
.text:00414FD8                 text "UTF-16LE", '(35)',0
.text:00414FE2                 align 4
.text:00414FE4 a36:
.text:00414FE4                 text "UTF-16LE", '(36)',0
.text:00414FEE                 align 10h
.text:00414FF0 a37:
.text:00414FF0                 text "UTF-16LE", '(37)',0
.text:00414FFA                 align 4
.text:00414FFC a38_0:
.text:00414FFC                 text "UTF-16LE", '(38)',0
.text:00415006                 align 4
.text:00415008 a39:
.text:00415008                 text "UTF-16LE", '(39)',0
.text:00415012                 align 4
.text:00415014 a40:
.text:00415014                 text "UTF-16LE", '(40)',0
.text:0041501E                 align 10h
.text:00415020 a41:
.text:00415020                 text "UTF-16LE", '(41)',0
.text:0041502A                 align 4
.text:0041502C a42:
.text:0041502C                 text "UTF-16LE", '(42)',0
.text:00415036                 align 4
.text:00415038 a43:
.text:00415038                 text "UTF-16LE", '(43)',0
.text:00415042                 align 4
.text:00415044 a44:
.text:00415044                 text "UTF-16LE", '(44)',0
.text:0041504E                 align 10h
.text:00415050 a45_0:
.text:00415050                 text "UTF-16LE", '(45)',0
.text:0041505A                 align 4
.text:0041505C a46:
.text:0041505C                 text "UTF-16LE", '(46)',0
.text:00415066                 align 4
.text:00415068 a47:
.text:00415068                 text "UTF-16LE", '(47)',0
.text:00415072                 align 4
.text:00415074 a48:
.text:00415074                 text "UTF-16LE", '(48)',0
.text:0041507E                 align 10h
.text:00415080 a49:
.text:00415080                 text "UTF-16LE", '(49)',0
.text:0041508A                 align 4
.text:0041508C a50:
.text:0041508C                 text "UTF-16LE", '(50)',0
.text:00415096                 align 4
.text:00415098 aHpa:
.text:00415098                 text "UTF-16LE", 'hPa',0
.text:004150A0                 dd 640000h, 61h, 410000h, 55h, 620000h, 720061h, 0
.text:004150BC aOv:
.text:004150BC                 text "UTF-16LE", 'oV',0
.text:004150C2                 align 4
.text:004150C4 aPc:
.text:004150C4                 text "UTF-16LE", 'pc',0
.text:004150CA                 align 4
.text:004150CC                 dd offset dword_40FE70+200h
.text:004150D0                 dd 0
.text:004150D4                 dd offset dword_40FE70+1FEh
.text:004150D8                 dd 0
.text:004150DC                 dd offset dword_40FE70+205h
.text:004150E0                 dd 0
.text:004150E4                 dd offset dword_40FE70+1FDh
.text:004150E8                 dd 0
.text:004150EC                 dd offset dword_40FE70+1FBh
.text:004150F0                 dd 0
.text:004150F4 aKb:
.text:004150F4                 text "UTF-16LE", 'KB',0
.text:004150FA                 align 4
.text:004150FC aMb:
.text:004150FC                 text "UTF-16LE", 'MB',0
.text:00415102                 align 4
.text:00415104 aGb:
.text:00415104                 text "UTF-16LE", 'GB',0
.text:0041510A                 align 4
.text:0041510C aCal:
.text:0041510C                 text "UTF-16LE", 'cal',0
.text:00415114                 dd 6B0000h, 610063h, 6Ch, 700000h, 46h, 6E0000h, 46h, 750000h
.text:00415114                 dd 46h, 750000h, 67h, 6D0000h, 67h, 6B0000h, 67h, 480000h
.text:00415114                 dd 7Ah, 6B0000h, 7A0048h, 0
.text:00415164 aMhz:
.text:00415164                 text "UTF-16LE", 'MHz',0
.text:0041516C                 dd 470000h, 7A0048h, 0
.text:00415178 aThz:
.text:00415178                 text "UTF-16LE", 'THz',0
.text:00415180                 dd 750000h, 6Ch, 6D0000h, 6Ch, 640000h, 6Ch, 6B0000h, 6Ch
.text:00415180                 dd 660000h, 6Dh, 6E0000h, 6Dh, 750000h, 6Dh, 6D0000h, 6Dh
.text:00415180                 dd 630000h, 6Dh, 6B0000h, 6Dh, 6D0000h, 5E006Dh, 32h, 630000h
.text:00415180                 dd 5E006Dh, 32h, 6D0000h, 32005Eh, 0
.text:004151F4 aKm2:
.text:004151F4                 text "UTF-16LE", 'km^2',0
.text:004151FE                 align 10h
.text:00415200 aMm3:
.text:00415200                 text "UTF-16LE", 'mm^3',0
.text:0041520A                 align 4
.text:0041520C aCm3:
.text:0041520C                 text "UTF-16LE", 'cm^3',0
.text:00415216                 align 4
.text:00415218 aM3:
.text:00415218                 text "UTF-16LE", 'm^3',0
.text:00415220                 dd 6B0000h, 5E006Dh, 33h, 6D0000h, 73002Fh, 0
.text:00415238 aMS2:
.text:00415238                 text "UTF-16LE", 'm/s^2',0
.text:00415244                 dd 500000h, 61h, 6B0000h, 610050h, 0
.text:00415258 aMpa:
.text:00415258                 text "UTF-16LE", 'MPa',0
.text:00415260                 dd 470000h, 610050h, 0
.text:0041526C aRad:
.text:0041526C                 text "UTF-16LE", 'rad',0
.text:00415274                 dd 720000h, 640061h, 73002Fh, 0
.text:00415284 aRadS2:
.text:00415284                 text "UTF-16LE", 'rad/s^2',0
.text:00415294                 dd 700000h, 73h, 6E0000h, 73h, 750000h, 73h, 6D0000h, 73h
.text:00415294                 dd 700000h, 56h, 6E0000h, 56h, 750000h, 56h, 6D0000h, 56h
.text:00415294                 dd 6B0000h, 56h, 4D0000h, 56h, 700000h, 57h, 6E0000h, 57h
.text:00415294                 dd 750000h, 57h, 6D0000h, 57h, 6B0000h, 57h, 4D0000h, 57h
.text:00415294                 dd 610000h, 6D002Eh, 2Eh, 420000h, 71h, 630000h, 63h, 630000h
.text:00415294                 dd 64h, 430000h, 6B002Fh, 67h, 430000h, 2E006Fh, 0
.text:00415350 aDb:
.text:00415350                 text "UTF-16LE", 'dB',0
.text:00415356                 align 4
.text:00415358 aGy:
.text:00415358                 text "UTF-16LE", 'Gy',0
.text:0041535E                 align 10h
.text:00415360 aHa:
.text:00415360                 text "UTF-16LE", 'ha',0
.text:00415366                 align 4
.text:00415368 aHp:
.text:00415368                 text "UTF-16LE", 'HP',0
.text:0041536E                 align 10h
.text:00415370 aIn:
.text:00415370                 text "UTF-16LE", 'in',0
.text:00415376                 align 4
.text:00415378 aKk:
.text:00415378                 text "UTF-16LE", 'KK',0
.text:0041537E                 align 10h
.text:00415380 aKm:
.text:00415380                 text "UTF-16LE", 'KM',0
.text:00415386                 align 4
.text:00415388 aKt:
.text:00415388                 text "UTF-16LE", 'kt',0
.text:0041538E                 align 10h
.text:00415390 aLm:
.text:00415390                 text "UTF-16LE", 'lm',0
.text:00415396                 align 4
.text:00415398 aLn:
.text:00415398                 text "UTF-16LE", 'ln',0
.text:0041539E                 align 10h
.text:004153A0 aLog:
.text:004153A0                 text "UTF-16LE", 'log',0
.text:004153A8                 dd 6C0000h, 78h, 6D0000h, 62h, 6D0000h, 6C0069h, 0
.text:004153C4 aMol:
.text:004153C4                 text "UTF-16LE", 'mol',0
.text:004153CC                 dd 500000h, 48h, 700000h, 6D002Eh, 2Eh, 500000h, 4D0050h
.text:004153CC                 dd 0
.text:004153EC aPr_0:
.text:004153EC                 text "UTF-16LE", 'PR',0
.text:004153F2                 align 4
.text:004153F4 aSr:
.text:004153F4                 text "UTF-16LE", 'sr',0
.text:004153FA                 align 4
.text:004153FC aSv:
.text:004153FC                 text "UTF-16LE", 'Sv',0
.text:00415402                 align 4
.text:00415404 aWb:
.text:00415404                 text "UTF-16LE", 'Wb',0
.text:0041540A                 align 4
.text:0041540C aFf:
.text:0041540C                 text "UTF-16LE", 'ff',0
.text:00415412                 align 4
.text:00415414 aFi:
.text:00415414                 text "UTF-16LE", 'fi',0
.text:0041541A                 align 4
.text:0041541C aFl:
.text:0041541C                 text "UTF-16LE", 'fl',0
.text:00415422                 align 4
.text:00415424 aFfi:
.text:00415424                 text "UTF-16LE", 'ffi',0
.text:0041542C                 dd 660000h, 6C0066h, 0
.text:00415438 aSt:
.text:00415438                 text "UTF-16LE", 'st',0
.text:0041543E                 align 10h
.text:00415440                 text "UTF-16LE", '+',0
.text:00415444                 dd 10h dup(0)
.text:00415484                 dd 5F0000h, 0
.text:0041548C                 dd 5Fh, 5F0000h, 0
.text:00415498                 dd 2Ch, 2E0000h, 0
.text:004154A4                 dd 3Bh, 3A0000h, 0
.text:004154B0                 dd 3Fh, 210000h, 0
.text:004154BC                 dd 28h, 290000h, 0
.text:004154C8                 dd 7Bh, 7D0000h, 0
.text:004154D4                 dd 23h, 260000h, 0
.text:004154E0                 dd 2Ah, 2B0000h, 0
.text:004154EC                 db 2Dh, 4 dup(0)
.text:004154F1                 align 2
.text:004154F2                 dw 3Ch
.text:004154F4                 align 8
.text:004154F8                 dd 3Eh, 3D0000h, 0
.text:00415504                 dd 5Ch, 240000h, 0
.text:00415510                 dd 25h, 400000h, 2 dup(0)
.text:00415520                 dd 21h, 220000h, 0
.text:0041552C                 dd 23h, 240000h, 0
.text:00415538                 dd 25h, 260000h, 0
.text:00415544                 dd 27h, 280000h, 0
.text:00415550                 dd 29h, 2A0000h, 0
.text:0041555C                 dd 2Bh, 2C0000h, 0
.text:00415568                 db 2Dh, 4 dup(0)
.text:0041556D                 align 2
.text:0041556E                 dw 2Eh
.text:00415570                 dd 0
.text:00415574                 dd 2Fh, 300000h, 0
.text:00415580                 dd 31h, 320000h, 0
.text:0041558C                 dd 33h, 340000h, 0
.text:00415598                 dd 35h, 360000h, 0
.text:004155A4                 dd 37h, 380000h, 0
.text:004155B0                 dd 39h, 3A0000h, 0
.text:004155BC                 dd 3Bh, 3C0000h, 0
.text:004155C8                 dd 3Dh, 3E0000h, 0
.text:004155D4                 dd 3Fh, 400000h, 0
.text:004155E0                 dd 41h, 420000h, 0
.text:004155EC                 dd 43h, 440000h, 0
.text:004155F8                 dd 45h, 460000h, 0
.text:00415604                 dd 47h, 480000h, 0
.text:00415610                 dd 49h, 4A0000h, 0
.text:0041561C                 dd 4Bh, 4C0000h, 0
.text:00415628                 dd 4Dh, 4E0000h, 0
.text:00415634                 dd 4Fh, 500000h, 0
.text:00415640                 dd 51h, 520000h, 0
.text:0041564C                 dd 53h, 540000h, 0
.text:00415658                 dd 55h, 560000h, 0
.text:00415664                 dd 57h, 580000h, 0
.text:00415670                 dd 59h, 5A0000h, 0
.text:0041567C                 dd 5Bh, 5C0000h, 0
.text:00415688                 dd 5Dh, 5E0000h, 0
.text:00415694                 dd 5Fh, 600000h, 0
.text:004156A0                 dd 61h, 620000h, 0
.text:004156AC                 dd 63h, 640000h, 0
.text:004156B8                 dd 65h, 660000h, 0
.text:004156C4                 dd 67h, 680000h, 0
.text:004156D0                 dd 69h, 6A0000h, 0
.text:004156DC                 dd 6Bh, 6C0000h, 0
.text:004156E8                 dd 6Dh, 6E0000h, 0
.text:004156F4                 dd 6Fh, 700000h, 0
.text:00415700                 dd 71h, 720000h, 0
.text:0041570C                 dd 73h, 740000h, 0
.text:00415718                 dd 75h, 760000h, 0
.text:00415724                 dd 77h, 780000h, 0
.text:00415730                 dd 79h, 7A0000h, 0
.text:0041573C                 dd 7Bh, 7C0000h, 0
.text:00415748                 dd 7Dh, 7E0000h, 0
.text:00415754                 dd 41h, 420000h, 0
.text:00415760                 dd 43h, 440000h, 0
.text:0041576C                 dd 45h, 460000h, 0
.text:00415778                 dd 47h, 480000h, 0
.text:00415784                 dd 49h, 4A0000h, 0
.text:00415790                 dd 4Bh, 4C0000h, 0
.text:0041579C                 dd 4Dh, 4E0000h, 0
.text:004157A8                 dd 4Fh, 500000h, 0
.text:004157B4                 dd 51h, 520000h, 0
.text:004157C0                 dd 53h, 540000h, 0
.text:004157CC                 dd 55h, 560000h, 0
.text:004157D8                 dd 57h, 580000h, 0
.text:004157E4                 dd 59h, 5A0000h, 0
.text:004157F0                 dd 61h, 620000h, 0
.text:004157FC                 dd 63h, 640000h, 0
.text:00415808                 dd 65h, 660000h, 0
.text:00415814                 dd 67h, 680000h, 0
.text:00415820                 dd 69h, 6A0000h, 0
.text:0041582C                 dd 6Bh, 6C0000h, 0
.text:00415838                 dd 6Dh, 6E0000h, 0
.text:00415844                 dd 6Fh, 700000h, 0
.text:00415850                 dd 71h, 720000h, 0
.text:0041585C                 dd 73h, 740000h, 0
.text:00415868                 dd 75h, 760000h, 0
.text:00415874                 dd 77h, 780000h, 0
.text:00415880                 dd 79h, 7A0000h, 0
.text:0041588C                 dd 41h, 420000h, 0
.text:00415898                 dd 43h, 440000h, 0
.text:004158A4                 dd 45h, 460000h, 0
.text:004158B0                 dd 47h, 480000h, 0
.text:004158BC                 dd 49h, 4A0000h, 0
.text:004158C8                 dd 4Bh, 4C0000h, 0
.text:004158D4                 dd 4Dh, 4E0000h, 0
.text:004158E0                 dd 4Fh, 500000h, 0
.text:004158EC                 dd 51h, 520000h, 0
.text:004158F8                 dd 53h, 540000h, 0
.text:00415904                 dd 55h, 560000h, 0
.text:00415910                 dd 57h, 580000h, 0
.text:0041591C                 dd 59h, 5A0000h, 0
.text:00415928                 dd 61h, 620000h, 0
.text:00415934                 dd 63h, 640000h, 0
.text:00415940                 dd 65h, 660000h, 0
.text:0041594C                 dd 67h, 690000h, 0
.text:00415958                 dd 6Ah, 6B0000h, 0
.text:00415964                 dd 6Ch, 6D0000h, 0
.text:00415970                 dd 6Eh, 6F0000h, 0
.text:0041597C                 dd 70h, 710000h, 0
.text:00415988                 dd 72h, 730000h, 0
.text:00415994                 dd 74h, 750000h, 0
.text:004159A0                 dd 76h, 770000h, 0
.text:004159AC                 dd 78h, 790000h, 0
.text:004159B8                 dd 7Ah, 410000h, 0
.text:004159C4                 dd 42h, 430000h, 0
.text:004159D0                 dd 44h, 450000h, 0
.text:004159DC                 dd 46h, 470000h, 0
.text:004159E8                 dd 48h, 490000h, 0
.text:004159F4                 dd 4Ah, 4B0000h, 0
.text:00415A00                 dd 4Ch, 4D0000h, 0
.text:00415A0C                 dd 4Eh, 4F0000h, 0
.text:00415A18                 dd 50h, 510000h, 0
.text:00415A24                 dd 52h, 530000h, 0
.text:00415A30                 dd 54h, 550000h, 0
.text:00415A3C                 dd 56h, 570000h, 0
.text:00415A48                 dd 58h, 590000h, 0
.text:00415A54                 dd 5Ah, 610000h, 0
.text:00415A60                 dd 62h, 630000h, 0
.text:00415A6C                 dd 64h, 650000h, 0
.text:00415A78                 dd 66h, 670000h, 0
.text:00415A84                 dd 68h, 690000h, 0
.text:00415A90                 dd 6Ah, 6B0000h, 0
.text:00415A9C                 dd 6Ch, 6D0000h, 0
.text:00415AA8                 dd 6Eh, 6F0000h, 0
.text:00415AB4                 dd 70h, 710000h, 0
.text:00415AC0                 dd 72h, 730000h, 0
.text:00415ACC                 dd 74h, 750000h, 0
.text:00415AD8                 dd 76h, 770000h, 0
.text:00415AE4                 dd 78h, 790000h, 0
.text:00415AF0                 dd 7Ah, 410000h, 0
.text:00415AFC                 dd 43h, 440000h, 0
.text:00415B08                 dd 47h, 4A0000h, 0
.text:00415B14                 dd 4Bh, 4E0000h, 0
.text:00415B20                 dd 4Fh, 500000h, 0
.text:00415B2C                 dd 51h, 530000h, 0
.text:00415B38                 dd 54h, 550000h, 0
.text:00415B44                 dd 56h, 570000h, 0
.text:00415B50                 dd 58h, 590000h, 0
.text:00415B5C                 dd 5Ah, 610000h, 0
.text:00415B68                 dd 62h, 630000h, 0
.text:00415B74                 dd 64h, 660000h, 0
.text:00415B80                 dd 68h, 690000h, 0
.text:00415B8C                 dd 6Ah, 6B0000h, 0
.text:00415B98                 dd 6Dh, 6E0000h, 0
.text:00415BA4                 dd 70h, 710000h, 0
.text:00415BB0                 dd 72h, 730000h, 0
.text:00415BBC                 dd 74h, 750000h, 0
.text:00415BC8                 dd 76h, 770000h, 0
.text:00415BD4                 dd 78h, 790000h, 0
.text:00415BE0                 dd 7Ah, 410000h, 0
.text:00415BEC                 dd 42h, 430000h, 0
.text:00415BF8                 dd 44h, 450000h, 0
.text:00415C04                 dd 46h, 470000h, 0
.text:00415C10                 dd 48h, 490000h, 0
.text:00415C1C                 dd 4Ah, 4B0000h, 0
.text:00415C28                 dd 4Ch, 4D0000h, 0
.text:00415C34                 dd 4Eh, 4F0000h, 0
.text:00415C40                 dd 50h, 510000h, 0
.text:00415C4C                 dd 52h, 530000h, 0
.text:00415C58                 dd 54h, 550000h, 0
.text:00415C64                 dd 56h, 570000h, 0
.text:00415C70                 dd 58h, 590000h, 0
.text:00415C7C                 dd 5Ah, 610000h, 0
.text:00415C88                 dd 62h, 630000h, 0
.text:00415C94                 dd 64h, 650000h, 0
.text:00415CA0                 dd 66h, 670000h, 0
.text:00415CAC                 dd 68h, 690000h, 0
.text:00415CB8                 dd 6Ah, 6B0000h, 0
.text:00415CC4                 dd 6Ch, 6D0000h, 0
.text:00415CD0                 dd 6Eh, 6F0000h, 0
.text:00415CDC                 dd 70h, 710000h, 0
.text:00415CE8                 dd 72h, 730000h, 0
.text:00415CF4                 dd 74h, 750000h, 0
.text:00415D00                 dd 76h, 770000h, 0
.text:00415D0C                 dd 78h, 790000h, 0
.text:00415D18                 dd 7Ah, 410000h, 0
.text:00415D24                 dd 42h, 440000h, 0
.text:00415D30                 dd 45h, 460000h, 0
.text:00415D3C                 dd 47h, 4A0000h, 0
.text:00415D48                 dd 4Bh, 4C0000h, 0
.text:00415D54                 dd 4Dh, 4E0000h, 0
.text:00415D60                 dd 4Fh, 500000h, 0
.text:00415D6C                 dd 51h, 530000h, 0
.text:00415D78                 dd 54h, 550000h, 0
.text:00415D84                 dd 56h, 570000h, 0
.text:00415D90                 dd 58h, 590000h, 0
.text:00415D9C                 dd 61h, 620000h, 0
.text:00415DA8                 dd 63h, 640000h, 0
.text:00415DB4                 dd 65h, 660000h, 0
.text:00415DC0                 dd 67h, 680000h, 0
.text:00415DCC                 dd 69h, 6A0000h, 0
.text:00415DD8                 dd 6Bh, 6C0000h, 0
.text:00415DE4                 dd 6Dh, 6E0000h, 0
.text:00415DF0                 dd 6Fh, 700000h, 0
.text:00415DFC                 dd 71h, 720000h, 0
.text:00415E08                 dd 73h, 740000h, 0
.text:00415E14                 dd 75h, 760000h, 0
.text:00415E20                 dd 77h, 780000h, 0
.text:00415E2C                 dd 79h, 7A0000h, 0
.text:00415E38                 dd 41h, 420000h, 0
.text:00415E44                 dd 44h, 450000h, 0
.text:00415E50                 dd 46h, 470000h, 0
.text:00415E5C                 dd 49h, 4A0000h, 0
.text:00415E68                 dd 4Bh, 4C0000h, 0
.text:00415E74                 dd 4Dh, 4F0000h, 0
.text:00415E80                 dd 53h, 540000h, 0
.text:00415E8C                 dd 55h, 560000h, 0
.text:00415E98                 dd 57h, 580000h, 0
.text:00415EA4                 dd 59h, 610000h, 0
.text:00415EB0                 dd 62h, 630000h, 0
.text:00415EBC                 dd 64h, 650000h, 0
.text:00415EC8                 dd 66h, 670000h, 0
.text:00415ED4                 dd 68h, 690000h, 0
.text:00415EE0                 dd 6Ah, 6B0000h, 0
.text:00415EEC                 dd 6Ch, 6D0000h, 0
.text:00415EF8                 dd 6Eh, 6F0000h, 0
.text:00415F04                 dd 70h, 710000h, 0
.text:00415F10                 dd 72h, 730000h, 0
.text:00415F1C                 dd 74h, 750000h, 0
.text:00415F28                 dd 76h, 770000h, 0
.text:00415F34                 dd 78h, 790000h, 0
.text:00415F40                 dd 7Ah, 410000h, 0
.text:00415F4C                 dd 42h, 430000h, 0
.text:00415F58                 dd 44h, 450000h, 0
.text:00415F64                 dd 46h, 470000h, 0
.text:00415F70                 dd 48h, 490000h, 0
.text:00415F7C                 dd 4Ah, 4B0000h, 0
.text:00415F88                 dd 4Ch, 4D0000h, 0
.text:00415F94                 dd 4Eh, 4F0000h, 0
.text:00415FA0                 dd 50h, 510000h, 0
.text:00415FAC                 dd 52h, 530000h, 0
.text:00415FB8                 dd 54h, 550000h, 0
.text:00415FC4                 dd 56h, 570000h, 0
.text:00415FD0                 dd 58h, 590000h, 0
.text:00415FDC                 dd 5Ah, 610000h, 0
.text:00415FE8                 dd 62h, 630000h, 0
.text:00415FF4                 dd 64h, 650000h, 0
.text:00416000                 dd 66h, 670000h, 0
.text:0041600C                 dd 68h, 690000h, 0
.text:00416018                 dd 6Ah, 6B0000h, 0
.text:00416024                 dd 6Ch, 6D0000h, 0
.text:00416030                 dd 6Eh, 6F0000h, 0
.text:0041603C                 dd 70h, 710000h, 0
.text:00416048                 dd 72h, 730000h, 0
.text:00416054                 dd 74h, 750000h, 0
.text:00416060                 dd 76h, 770000h, 0
.text:0041606C                 dd 78h, 790000h, 0
.text:00416078                 dd 7Ah, 410000h, 0
.text:00416084                 dd 42h, 430000h, 0
.text:00416090                 dd 44h, 450000h, 0
.text:0041609C                 dd 46h, 470000h, 0
.text:004160A8                 dd 48h, 490000h, 0
.text:004160B4                 dd 4Ah, 4B0000h, 0
.text:004160C0                 dd 4Ch, 4D0000h, 0
.text:004160CC                 dd 4Eh, 4F0000h, 0
.text:004160D8                 dd 50h, 510000h, 0
.text:004160E4                 dd 52h, 530000h, 0
.text:004160F0                 dd 54h, 550000h, 0
.text:004160FC                 dd 56h, 570000h, 0
.text:00416108                 dd 58h, 590000h, 0
.text:00416114                 dd 5Ah, 610000h, 0
.text:00416120                 dd 62h, 630000h, 0
.text:0041612C                 dd 64h, 650000h, 0
.text:00416138                 dd 66h, 670000h, 0
.text:00416144                 dd 68h, 690000h, 0
.text:00416150                 dd 6Ah, 6B0000h, 0
.text:0041615C                 dd 6Ch, 6D0000h, 0
.text:00416168                 dd 6Eh, 6F0000h, 0
.text:00416174                 dd 70h, 710000h, 0
.text:00416180                 dd 72h, 730000h, 0
.text:0041618C                 dd 74h, 750000h, 0
.text:00416198                 dd 76h, 770000h, 0
.text:004161A4                 dd 78h, 790000h, 0
.text:004161B0                 dd 7Ah, 410000h, 0
.text:004161BC                 dd 42h, 430000h, 0
.text:004161C8                 dd 44h, 450000h, 0
.text:004161D4                 dd 46h, 470000h, 0
.text:004161E0                 dd 48h, 490000h, 0
.text:004161EC                 dd 4Ah, 4B0000h, 0
.text:004161F8                 dd 4Ch, 4D0000h, 0
.text:00416204                 dd 4Eh, 4F0000h, 0
.text:00416210                 dd 50h, 510000h, 0
.text:0041621C                 dd 52h, 530000h, 0
.text:00416228                 dd 54h, 550000h, 0
.text:00416234                 dd 56h, 570000h, 0
.text:00416240                 dd 58h, 590000h, 0
.text:0041624C                 dd 5Ah, 610000h, 0
.text:00416258                 dd 62h, 630000h, 0
.text:00416264                 dd 64h, 650000h, 0
.text:00416270                 dd 66h, 670000h, 0
.text:0041627C                 dd 68h, 690000h, 0
.text:00416288                 dd 6Ah, 6B0000h, 0
.text:00416294                 dd 6Ch, 6D0000h, 0
.text:004162A0                 dd 6Eh, 6F0000h, 0
.text:004162AC                 dd 70h, 710000h, 0
.text:004162B8                 dd 72h, 730000h, 0
.text:004162C4                 dd 74h, 750000h, 0
.text:004162D0                 dd 76h, 770000h, 0
.text:004162DC                 dd 78h, 790000h, 0
.text:004162E8                 dd 7Ah, 410000h, 0
.text:004162F4                 dd 42h, 430000h, 0
.text:00416300                 dd 44h, 450000h, 0
.text:0041630C                 dd 46h, 470000h, 0
.text:00416318                 dd 48h, 490000h, 0
.text:00416324                 dd 4Ah, 4B0000h, 0
.text:00416330                 dd 4Ch, 4D0000h, 0
.text:0041633C                 dd 4Eh, 4F0000h, 0
.text:00416348                 dd 50h, 510000h, 0
.text:00416354                 dd 52h, 530000h, 0
.text:00416360                 dd 54h, 550000h, 0
.text:0041636C                 dd 56h, 570000h, 0
.text:00416378                 dd 58h, 590000h, 0
.text:00416384                 dd 5Ah, 610000h, 0
.text:00416390                 dd 62h, 630000h, 0
.text:0041639C                 dd 64h, 650000h, 0
.text:004163A8                 dd 66h, 670000h, 0
.text:004163B4                 dd 68h, 690000h, 0
.text:004163C0                 dd 6Ah, 6B0000h, 0
.text:004163CC                 dd 6Ch, 6D0000h, 0
.text:004163D8                 dd 6Eh, 6F0000h, 0
.text:004163E4                 dd 70h, 710000h, 0
.text:004163F0                 dd 72h, 730000h, 0
.text:004163FC                 dd 74h, 750000h, 0
.text:00416408                 dd 76h, 770000h, 0
.text:00416414                 dd 78h, 790000h, 0
.text:00416420                 dd 7Ah, 410000h, 0
.text:0041642C                 dd 42h, 430000h, 0
.text:00416438                 dd 44h, 450000h, 0
.text:00416444                 dd 46h, 470000h, 0
.text:00416450                 dd 48h, 490000h, 0
.text:0041645C                 dd 4Ah, 4B0000h, 0
.text:00416468                 dd 4Ch, 4D0000h, 0
.text:00416474                 dd 4Eh, 4F0000h, 0
.text:00416480                 dd 50h, 510000h, 0
.text:0041648C                 dd 52h, 530000h, 0
.text:00416498                 dd 54h, 550000h, 0
.text:004164A4                 dd 56h, 570000h, 0
.text:004164B0                 dd 58h, 590000h, 0
.text:004164BC                 dd 5Ah, 610000h, 0
.text:004164C8                 dd 62h, 630000h, 0
.text:004164D4                 dd 64h, 650000h, 0
.text:004164E0                 dd 66h, 670000h, 0
.text:004164EC                 dd 68h, 690000h, 0
.text:004164F8                 dd 6Ah, 6B0000h, 0
.text:00416504                 dd 6Ch, 6D0000h, 0
.text:00416510                 dd 6Eh, 6F0000h, 0
.text:0041651C                 dd 70h, 710000h, 0
.text:00416528                 dd 72h, 730000h, 0
.text:00416534                 dd 74h, 750000h, 0
.text:00416540                 dd 76h, 770000h, 0
.text:0041654C                 dd 78h, 790000h, 0
.text:00416558                 dd 7Ah, 410000h, 0
.text:00416564                 dd 42h, 430000h, 0
.text:00416570                 dd 44h, 450000h, 0
.text:0041657C                 dd 46h, 470000h, 0
.text:00416588                 dd 48h, 490000h, 0
.text:00416594                 dd 4Ah, 4B0000h, 0
.text:004165A0                 dd 4Ch, 4D0000h, 0
.text:004165AC                 dd 4Eh, 4F0000h, 0
.text:004165B8                 dd 50h, 510000h, 0
.text:004165C4                 dd 52h, 530000h, 0
.text:004165D0                 dd 54h, 550000h, 0
.text:004165DC                 dd 56h, 570000h, 0
.text:004165E8                 dd 58h, 590000h, 0
.text:004165F4                 dd 5Ah, 610000h, 0
.text:00416600                 dd 62h, 630000h, 0
.text:0041660C                 dd 64h, 650000h, 0
.text:00416618                 dd 66h, 670000h, 0
.text:00416624                 dd 68h, 690000h, 0
.text:00416630                 dd 6Ah, 6B0000h, 0
.text:0041663C                 dd 6Ch, 6D0000h, 0
.text:00416648                 dd 6Eh, 6F0000h, 0
.text:00416654                 dd 70h, 710000h, 0
.text:00416660                 dd 72h, 730000h, 0
.text:0041666C                 dd 74h, 750000h, 0
.text:00416678                 dd 76h, 770000h, 0
.text:00416684                 dd 78h, 790000h, 0
.text:00416690                 dd 7Ah, 300000h, 0
.text:0041669C                 dd 31h, 320000h, 0
.text:004166A8                 dd 33h, 340000h, 0
.text:004166B4                 dd 35h, 360000h, 0
.text:004166C0                 dd 37h, 380000h, 0
.text:004166CC                 dd 39h, 300000h, 0
.text:004166D8                 dd 31h, 320000h, 0
.text:004166E4                 dd 33h, 340000h, 0
.text:004166F0                 dd 35h, 360000h, 0
.text:004166FC                 dd 37h, 380000h, 0
.text:00416708                 dd 39h, 300000h, 0
.text:00416714                 dd 31h, 320000h, 0
.text:00416720                 dd 33h, 340000h, 0
.text:0041672C                 dd 35h, 360000h, 0
.text:00416738                 dd 37h, 380000h, 0
.text:00416744                 dd 39h, 300000h, 0
.text:00416750                 dd 31h, 320000h, 0
.text:0041675C                 dd 33h, 340000h, 0
.text:00416768                 dd 35h, 360000h, 0
.text:00416774                 dd 37h, 380000h, 0
.text:00416780                 dd 39h, 300000h, 0
.text:0041678C                 dd 31h, 320000h, 0
.text:00416798                 dd 33h, 340000h, 0
.text:004167A4                 dd 35h, 360000h, 0
.text:004167B0                 dd 37h, 380000h, 0
.text:004167BC                 dd 39h, 0B48D0000h, 26h, 27BC8D00h, 41h dup(0)
.text:004168D0                 dd 4 dup(20002h), 20030002h, 2 dup(20022002h), 9 dup(20002h)
.text:004168D0                 dd 0C0046001h, 7 dup(0C004C004h), 5 dup(0D808D808h), 3 dup(0C004C004h)
.text:004168D0                 dd 0D508C004h, 2 dup(0D508D508h), 0C508D508h, 9 dup(0C508C508h)
.text:004168D0                 dd 0C004C508h, 2 dup(0C004C004h), 0D608C004h, 2 dup(0D608D608h)
.text:004168D0                 dd 0C608D608h, 9 dup(0C608C608h), 0C004C608h, 0C004C004h
.text:004168D0                 dd 2C004h, 40h dup(0)
.text:00416AD0 dword_416AD0    dd 9 dup(20000h), 20030000h, 4 dup(20020000h), 12h dup(20000h)
.text:00416AD0                                         ; DATA XREF: .text:00418208↓o
.text:00416AD0                 dd 60010000h, 0Fh dup(0C0040000h), 0Ah dup(0D8080000h)
.text:00416AD0                 dd 7 dup(0C0040000h), 6 dup(0D5080000h), 14h dup(0C5080000h)
.text:00416AD0                 dd 6 dup(0C0040000h), 6 dup(0D6080000h), 14h dup(0C6080000h)
.text:00416AD0                 dd 4 dup(0C0040000h), 20000h, 80h dup(0)
.text:00416ED0 dword_416ED0    dd 80h, 81h, 82h, 83h, 84h, 85h, 86h, 87h, 88h, 89h, 8Ah
.text:00416ED0                 dd 8Bh, 8Ch, 8Dh, 8Eh, 8Fh, 90h, 91h, 92h, 93h, 94h, 95h
.text:00416ED0                 dd 96h, 97h, 98h, 99h, 9Ah, 9Bh, 9Ch, 9Dh, 9Eh, 9Fh, 0A0h
.text:00416ED0                 dd 0A1h, 0A2h, 0A3h, 0A4h, 0A5h, 0A6h, 0A7h, 0A8h, 0A9h
.text:00416ED0                 dd 0AAh, 0ABh, 0ACh, 0ADh, 0AEh, 0AFh, 0B0h, 0B1h, 0B2h
.text:00416ED0                 dd 0B3h, 0B4h, 0B5h, 0B6h, 0B7h, 0B8h, 0B9h, 0BAh, 0BBh
.text:00416ED0                 dd 0BCh, 0BDh, 0BEh, 0BFh, 0C0h, 0C1h, 0C2h, 0C3h, 0C4h
.text:00416ED0                 dd 0C5h, 0C6h, 0C7h, 0C8h, 0C9h, 0CAh, 0CBh, 0CCh, 0CDh
.text:00416ED0                 dd 0CEh, 0CFh, 0D0h, 0D1h, 0D2h, 0D3h, 0D4h, 0D5h, 0D6h
.text:00416ED0                 dd 0D7h, 0D8h, 0D9h, 0DAh, 0DBh, 0DCh, 0DDh, 0DEh, 0DFh
.text:00416ED0                 dd 0E0h, 0E1h, 0E2h, 0E3h, 0E4h, 0E5h, 0E6h, 0E7h, 0E8h
.text:00416ED0                 dd 0E9h, 0EAh, 0EBh, 0ECh, 0EDh, 0EEh, 0EFh, 0F0h, 0F1h
.text:00416ED0                 dd 0F2h, 0F3h, 0F4h, 0F5h, 0F6h, 0F7h, 0F8h, 0F9h, 0FAh
.text:00416ED0                 dd 0FBh, 0FCh, 0FDh, 0FEh, 0FFFFFFFFh, 0
.text:004170D4 dword_4170D4    dd 1, 2, 3, 4, 5, 6, 7, 8, 9, 0Ah, 0Bh, 0Ch, 0Dh, 0Eh
.text:004170D4                 dd 0Fh, 10h, 11h, 12h, 13h, 14h, 15h, 16h, 17h, 18h, 19h
.text:004170D4                 dd 1Ah, 1Bh, 1Ch, 1Dh, 1Eh, 1Fh, 20h, 21h, 22h, 23h, 24h
.text:004170D4                 dd 25h, 26h, 27h, 28h, 29h, 2Ah, 2Bh, 2Ch, 2Dh, 2Eh, 2Fh
.text:004170D4                 dd 30h, 31h, 32h, 33h, 34h, 35h, 36h, 37h, 38h, 39h, 3Ah
.text:004170D4                 dd 3Bh, 3Ch, 3Dh, 3Eh, 3Fh, 40h, 41h, 42h, 43h, 44h, 45h
.text:004170D4                 dd 46h, 47h, 48h, 49h, 4Ah, 4Bh, 4Ch, 4Dh, 4Eh, 4Fh, 50h
.text:004170D4                 dd 51h, 52h, 53h, 54h, 55h, 56h, 57h, 58h, 59h, 5Ah, 5Bh
.text:004170D4                 dd 5Ch, 5Dh, 5Eh, 5Fh, 60h, 41h, 42h, 43h, 44h, 45h, 46h
.text:004170D4                 dd 47h, 48h, 49h, 4Ah, 4Bh, 4Ch, 4Dh, 4Eh, 4Fh, 50h, 51h
.text:004170D4                 dd 52h, 53h, 54h, 55h, 56h, 57h, 58h, 59h, 5Ah, 7Bh, 7Ch
.text:004170D4                 dd 7Dh, 7Eh, 7Fh, 80h, 81h, 82h, 83h, 84h, 85h, 86h, 87h
.text:004170D4                 dd 88h, 89h, 8Ah, 8Bh, 8Ch, 8Dh, 8Eh, 8Fh, 90h, 91h, 92h
.text:004170D4                 dd 93h, 94h, 95h, 96h, 97h, 98h, 99h, 9Ah, 9Bh, 9Ch, 9Dh
.text:004170D4                 dd 9Eh, 9Fh, 0A0h, 0A1h, 0A2h, 0A3h, 0A4h, 0A5h, 0A6h
.text:004170D4                 dd 0A7h, 0A8h, 0A9h, 0AAh, 0ABh, 0ACh, 0ADh, 0AEh, 0AFh
.text:004170D4                 dd 0B0h, 0B1h, 0B2h, 0B3h, 0B4h, 0B5h, 0B6h, 0B7h, 0B8h
.text:004170D4                 dd 0B9h, 0BAh, 0BBh, 0BCh, 0BDh, 0BEh, 0BFh, 0C0h, 0C1h
.text:004170D4                 dd 0C2h, 0C3h, 0C4h, 0C5h, 0C6h, 0C7h, 0C8h, 0C9h, 0CAh
.text:004170D4                 dd 0CBh, 0CCh, 0CDh, 0CEh, 0CFh, 0D0h, 0D1h, 0D2h, 0D3h
.text:004170D4                 dd 0D4h, 0D5h, 0D6h, 0D7h, 0D8h, 0D9h, 0DAh, 0DBh, 0DCh
.text:004170D4                 dd 0DDh, 0DEh, 0DFh, 0E0h, 0E1h, 0E2h, 0E3h, 0E4h, 0E5h
.text:004170D4                 dd 0E6h, 0E7h, 0E8h, 0E9h, 0EAh, 0EBh, 0ECh, 0EDh, 0EEh
.text:004170D4                 dd 0EFh, 0F0h, 0F1h, 0F2h, 0F3h, 0F4h, 0F5h, 0F6h, 0F7h
.text:004170D4                 dd 0F8h, 0F9h, 0FAh, 0FBh, 0FCh, 0FDh, 0FEh, 0FFh, 80h
.text:004170D4                 dd 81h, 82h, 83h, 84h, 85h, 86h, 87h, 88h, 89h, 8Ah, 8Bh
.text:004170D4                 dd 8Ch, 8Dh, 8Eh, 8Fh, 90h, 91h, 92h, 93h, 94h, 95h, 96h
.text:004170D4                 dd 97h, 98h, 99h, 9Ah, 9Bh, 9Ch, 9Dh, 9Eh, 9Fh, 0A0h, 0A1h
.text:004170D4                 dd 0A2h, 0A3h, 0A4h, 0A5h, 0A6h, 0A7h, 0A8h, 0A9h, 0AAh
.text:004170D4                 dd 0ABh, 0ACh, 0ADh, 0AEh, 0AFh, 0B0h, 0B1h, 0B2h, 0B3h
.text:004170D4                 dd 0B4h, 0B5h, 0B6h, 0B7h, 0B8h, 0B9h, 0BAh, 0BBh, 0BCh
.text:004170D4                 dd 0BDh, 0BEh, 0BFh, 0C0h, 0C1h, 0C2h, 0C3h, 0C4h, 0C5h
.text:004170D4                 dd 0C6h, 0C7h, 0C8h, 0C9h, 0CAh, 0CBh, 0CCh, 0CDh, 0CEh
.text:004170D4                 dd 0CFh, 0D0h, 0D1h, 0D2h, 0D3h, 0D4h, 0D5h, 0D6h, 0D7h
.text:004170D4                 dd 0D8h, 0D9h, 0DAh, 0DBh, 0DCh, 0DDh, 0DEh, 0DFh, 0E0h
.text:004170D4                 dd 0E1h, 0E2h, 0E3h, 0E4h, 0E5h, 0E6h, 0E7h, 0E8h, 0E9h
.text:004170D4                 dd 0EAh, 0EBh, 0ECh, 0EDh, 0EEh, 0EFh, 0F0h, 0F1h, 0F2h
.text:004170D4                 dd 0F3h, 0F4h, 0F5h, 0F6h, 0F7h, 0F8h, 0F9h, 0FAh, 0FBh
.text:004170D4                 dd 0FCh, 0FDh, 0FEh, 0FFFFFFFFh, 0
.text:004176D4                 dd 1, 2, 3, 4, 5, 6, 7, 8, 9, 0Ah, 0Bh, 0Ch, 0Dh, 0Eh
.text:004176D4                 dd 0Fh, 10h, 11h, 12h, 13h, 14h, 15h, 16h, 17h, 18h, 19h
.text:004176D4                 dd 1Ah, 1Bh, 1Ch, 1Dh, 1Eh, 1Fh, 20h, 21h, 22h, 23h, 24h
.text:004176D4                 dd 25h, 26h, 27h, 28h, 29h, 2Ah, 2Bh, 2Ch, 2Dh, 2Eh, 2Fh
.text:004176D4                 dd 30h, 31h, 32h, 33h, 34h, 35h, 36h, 37h, 38h, 39h, 3Ah
.text:004176D4                 dd 3Bh, 3Ch, 3Dh, 3Eh, 3Fh, 40h, 61h, 62h, 63h, 64h, 65h
.text:004176D4                 dd 66h, 67h, 68h, 69h, 6Ah, 6Bh, 6Ch, 6Dh, 6Eh, 6Fh, 70h
.text:004176D4                 dd 71h, 72h, 73h, 74h, 75h, 76h, 77h, 78h, 79h, 7Ah, 5Bh
.text:004176D4                 dd 5Ch, 5Dh, 5Eh, 5Fh, 60h, 61h, 62h, 63h, 64h, 65h, 66h
.text:004176D4                 dd 67h, 68h, 69h, 6Ah, 6Bh, 6Ch, 6Dh, 6Eh, 6Fh, 70h, 71h
.text:004176D4                 dd 72h, 73h, 74h, 75h, 76h, 77h, 78h, 79h, 7Ah, 7Bh, 7Ch
.text:004176D4                 dd 7Dh, 7Eh, 7Fh, 80h, 81h, 82h, 83h, 84h, 85h, 86h, 87h
.text:004176D4                 dd 88h, 89h, 8Ah, 8Bh, 8Ch, 8Dh, 8Eh, 8Fh, 90h, 91h, 92h
.text:004176D4                 dd 93h, 94h, 95h, 96h, 97h, 98h, 99h, 9Ah, 9Bh, 9Ch, 9Dh
.text:004176D4                 dd 9Eh, 9Fh, 0A0h, 0A1h, 0A2h, 0A3h, 0A4h, 0A5h, 0A6h
.text:004176D4                 dd 0A7h, 0A8h, 0A9h, 0AAh, 0ABh, 0ACh, 0ADh, 0AEh, 0AFh
.text:004176D4                 dd 0B0h, 0B1h, 0B2h, 0B3h, 0B4h, 0B5h, 0B6h, 0B7h, 0B8h
.text:004176D4                 dd 0B9h, 0BAh, 0BBh, 0BCh, 0BDh, 0BEh, 0BFh, 0C0h, 0C1h
.text:004176D4                 dd 0C2h, 0C3h, 0C4h, 0C5h, 0C6h, 0C7h, 0C8h, 0C9h, 0CAh
.text:004176D4                 dd 0CBh, 0CCh, 0CDh, 0CEh, 0CFh, 0D0h, 0D1h, 0D2h, 0D3h
.text:004176D4                 dd 0D4h, 0D5h, 0D6h, 0D7h, 0D8h, 0D9h, 0DAh, 0DBh, 0DCh
.text:004176D4                 dd 0DDh, 0DEh, 0DFh, 0E0h, 0E1h, 0E2h, 0E3h, 0E4h, 0E5h
.text:004176D4                 dd 0E6h, 0E7h, 0E8h, 0E9h, 0EAh, 0EBh, 0ECh, 0EDh, 0EEh
.text:004176D4                 dd 0EFh, 0F0h, 0F1h, 0F2h, 0F3h, 0F4h, 0F5h, 0F6h, 0F7h
.text:004176D4                 dd 0F8h, 0F9h, 0FAh, 0FBh, 0FCh, 0FDh, 0FEh, 0FFh, 2 dup(0)
.text:00417AD8                 dd 7FFFFFEh, 5 dup(0)
.text:00417AF0 dword_417AF0    dd 7, 1, 6, 2 dup(1), 18h, 0
.text:00417AF0                                         ; DATA XREF: .text:0041830C↓o
.text:00417B0C                 dd 20h, 7FFFFFEh, 0
.text:00417B18                 db 18h dup(90h)
.text:00417B30                 dd 3 dup(0)
.text:00417B3C                 dd 7FFFFFEh, 4 dup(0)
.text:00417B50 dword_417B50    dd 7, 1, 6, 2 dup(1), 18h, 0
.text:00417B50                                         ; DATA XREF: .text:00418310↓o
.text:00417B6C                 dd 20h, 0
.text:00417B74                 dd 7FFFFFEh, 6 dup(90909090h), 2 dup(0)
.text:00417B98                 dd 2 dup(7FFFFFEh), 4 dup(0)
.text:00417BB0 dword_417BB0    dd 7, 1, 6, 2 dup(1), 18h, 0
.text:00417BB0                                         ; DATA XREF: .text:00418314↓o
.text:00417BCC                 dd 20h, 2 dup(7FFFFFEh), 6 dup(90909090h), 0
.text:00417BF4                 dd 3FF0000h, 6 dup(0)
.text:00417C10 dword_417C10    dd 6, 1, 6, 0           ; DATA XREF: .text:00418318↓o
.text:00417C20                 dd 1, 18h, 1Ch, 0
.text:00417C30                 dd 3FF0000h, 7 dup(90909090h), 0
.text:00417C54                 dd 3FF0000h, 2 dup(7Eh), 4 dup(0)
.text:00417C70 dword_417C70    dd 7, 1, 7, 0           ; DATA XREF: .text:0041831C↓o
.text:00417C80                 dd 3, 18h, 1Ch, 0
.text:00417C90                 dd 3FF0000h, 2 dup(7Eh), 5 dup(90909090h), 3E00h, 1, 6 dup(0)
.text:00417CD0 dword_417CD0    dd 6, 1, 6, 0           ; DATA XREF: .text:00418320↓o
.text:00417CE0                 dd 1, 18h, 1Ch, 3E00h, 1, 7 dup(90909090h), 0
.text:00417D14                 dd 2 dup(0FFFFFFFFh), 7FFFFFFFh, 4 dup(0)
.text:00417D30 dword_417D30    dd 7, 1, 7, 0           ; DATA XREF: .text:00418324↓o
.text:00417D40                 dd 3, 18h, 1Ch, 0
.text:00417D50                 dd 2 dup(0FFFFFFFFh), 7FFFFFFFh, 5 dup(90909090h), 0
.text:00417D74                 dd 0FFFFFFFEh, 0FFFFFFFFh, 7FFFFFFFh, 4 dup(0)
.text:00417D90 dword_417D90    dd 7, 1, 7, 0           ; DATA XREF: .text:00418328↓o
.text:00417DA0                 dd 3, 18h, 1Ch, 0
.text:00417DB0                 dd 0FFFFFFFEh, 0FFFFFFFFh, 7FFFFFFFh, 5 dup(90909090h)
.text:00417DB0                 dd 200h, 1, 6 dup(0)
.text:00417DF0 dword_417DF0    dd 6, 1, 6, 0           ; DATA XREF: .text:0041832C↓o
.text:00417E00                 dd 1, 18h, 1Ch, 200h, 1, 7 dup(90909090h), 0FFFFFFFFh
.text:00417E00                 dd 2 dup(0)
.text:00417E3C                 dd 80000000h, 4 dup(0)
.text:00417E50 dword_417E50    dd 7, 1, 7, 0           ; DATA XREF: .text:00418330↓o
.text:00417E60                 dd 3, 18h, 1Ch, 0FFFFFFFFh, 2 dup(0)
.text:00417E78                 dd 80000000h, 5 dup(90909090h), 0
.text:00417E94                 dd 0FC00FFFEh, 0F8000001h, 78000001h, 4 dup(0)
.text:00417EB0 dword_417EB0    dd 7, 1, 7, 0           ; DATA XREF: .text:00418334↓o
.text:00417EC0                 dd 3, 18h, 1Ch, 0
.text:00417ED0                 dd 0FC00FFFEh, 0F8000001h, 78000001h, 5 dup(90909090h)
.text:00417ED0                 dd 0
.text:00417EF4                 dd 3FF0000h, 2 dup(7FFFFFEh), 4 dup(0)
.text:00417F10 dword_417F10    dd 7, 1, 7, 0           ; DATA XREF: .text:00418338↓o
.text:00417F20                 dd 3, 18h, 1Ch, 0
.text:00417F30 dword_417F30    dd 3FF0000h, 2 dup(7FFFFFEh), 5 dup(90909090h), 7, 1, 5
.text:00417F30                 dd 3, 1Fh, 18h, 3 dup(0)
.text:00417F74                 dd 28h, 0
.text:00417F7C                 dd 1Ah dup(0FFFFFFE0h), 5 dup(0)
.text:00417FF8                 db 18h dup(90h)
.text:00418010 dword_418010    dd 7, 1, 5, 3, 1Fh, 18h, 2 dup(0)
.text:00418010                                         ; DATA XREF: .text:00418340↓o
.text:00418030                 dd 28h, 2 dup(0)
.text:0041803C                 dd 1Ah dup(20h), 5 dup(0)
.text:004180B8                 db 18h dup(90h)
.text:004180D0 dword_4180D0    dd 7, 1, 4, 7, 0Fh, 18h, 38h, 0
.text:004180D0                                         ; DATA XREF: .text:00418224↓o
.text:004180F0                 dd 5 dup(48h), 49h, 0FFFFFF00h, 3 dup(0FFFFFFFFh), 4 dup(1010101h)
.text:004180F0                 dd 0FFh, 26748Dh
.text:00418130 aUpper          db 'upper',0            ; DATA XREF: .text:0041821C↓o
.text:00418136 aLower          db 'lower',0
.text:0041813C aAlpha          db 'alpha',0
.text:00418142 aDigit          db 'digit',0
.text:00418148 aXdigit         db 'xdigit',0
.text:0041814F aSpace          db 'space',0
.text:00418155 aPrint          db 'print',0
.text:0041815B aGraph          db 'graph',0
.text:00418161 aBlank          db 'blank',0
.text:00418167 aCntrl          db 'cntrl',0
.text:0041816D aPunct          db 'punct',0
.text:00418173 aAlnum          db 'alnum',0
.text:00418179                 align 2
.text:0041817A aToupper        db 'toupper',0          ; DATA XREF: .text:00418220↓o
.text:00418182 aTolower        db 'tolower',0
.text:0041818A                 dw 3000h
.text:0041818C                 dd 32003100h, 34003300h, 36003500h, 38003700h, 90003900h
.text:0041818C                 dd 30h, 31h, 32h, 33h, 34h, 35h, 36h, 37h, 38h, 39h, 3Fh
.text:0041818C                 dd 26748Dh, 418EF0h, 5 dup(0)
.text:004181E8                 dd 0FFFFFFFFh, 1, 54h, 4167D0h, 416ED0h, 0
.text:00418200                 dd offset dword_4170D4+3FCh
.text:00418204                 align 8
.text:00418208                 dd offset dword_416AD0
.text:0041820C                 dd 4 dup(0)
.text:0041821C                 dd offset aUpper        ; "upper"
.text:00418220                 dd offset aToupper      ; "toupper"
.text:00418224                 dd offset dword_4180D0
.text:00418228                 dd 1
.text:0041822C                 dd offset aAnsiX341968  ; "ANSI_X3.4-1968"
.text:00418230                 dd offset dword_416ED0+200h
.text:00418234                 dd offset dword_4170D4+5FCh
.text:00418238                 dd 46h, 52h, 1, 41818Bh, 41818Dh, 41818Fh, 418191h, 418193h
.text:00418238                 dd 418195h, 418197h, 418199h, 41819Bh, 41819Dh, 1, 4181A0h
.text:00418238                 dd 4181A4h, 4181A8h, 4181ACh, 4181B0h, 4181B4h, 4181B8h
.text:00418238                 dd 4181BCh, 4181C0h, 4181C4h, 41818Bh, 41818Dh, 41818Fh
.text:00418238                 dd 418191h, 418193h, 418195h, 418197h, 418199h, 41819Bh
.text:00418238                 dd 41819Dh, 30h, 31h, 32h, 33h, 34h, 35h, 36h, 37h, 38h
.text:00418238                 dd 39h, 548h, 4102F0h, 411810h, 412D30h, 414250h, 1, 4181C8h
.text:00418238                 dd 2 dup(0)
.text:0041830C                 dd offset dword_417AF0
.text:00418310                 dd offset dword_417B50
.text:00418314                 dd offset dword_417BB0
.text:00418318                 dd offset dword_417C10
.text:0041831C                 dd offset dword_417C70
.text:00418320                 dd offset dword_417CD0
.text:00418324                 dd offset dword_417D30
.text:00418328                 dd offset dword_417D90
.text:0041832C                 dd offset dword_417DF0
.text:00418330                 dd offset dword_417E50
.text:00418334                 dd offset dword_417EB0
.text:00418338                 dd offset dword_417F10
.text:0041833C                 dd offset dword_417F30+20h
.text:00418340                 dd offset dword_418010
.text:00418344                 align 10h
.text:00418350                 dd 2D00007Fh, 90909000h, 6 dup(90909090h), 418EF0h, 5 dup(0)
.text:00418388                 dd 0FFFFFFFFh, 0
.text:00418390                 dd 2Eh, 7 dup(418352h), 8 dup(418350h), 418353h, 6 dup(418350h)
.text:00418390                 dd 2 dup(418352h), 0Eh dup(418350h), 2775h, 5F5BEBFh, 2775h
.text:00418390                 dd 5F5BEBFh, 1, 2 dup(0)
.text:00418448                 dd offset aAnsiX341968  ; "ANSI_X3.4-1968"
.text:0041844C                 align 10h
.text:00418450                 dd 9000002Eh, 7 dup(90909090h), 418EF0h, 5 dup(0)
.text:00418488                 dd 0FFFFFFFFh, 0
.text:00418490                 dd 6, 418450h, 2 dup(418452h), 2Eh, 0
.text:004184A8                 dd offset aAnsiX341968  ; "ANSI_X3.4-1968"
.text:004184AC                 align 10h
.text:004184B0                 db  53h ; S
.text:004184B1                 db 75h, 6Eh, 0
.text:004184B4                 db  4Dh ; M
.text:004184B5                 db 6Fh, 6Eh, 0
.text:004184B8                 db  54h ; T
.text:004184B9                 db 75h, 65h, 0
.text:004184BC                 db  57h ; W
.text:004184BD                 db 65h, 64h, 0
.text:004184C0                 db  54h ; T
.text:004184C1                 db 68h, 75h, 0
.text:004184C4                 db  46h ; F
.text:004184C5                 db 72h, 69h, 0
.text:004184C8                 db  53h ; S
.text:004184C9                 db 61h, 74h, 0
.text:004184CC aSunday         db 'Sunday',0           ; DATA XREF: .text:004188B0↓o
.text:004184D3 aMonday         db 'Monday',0           ; DATA XREF: .text:004188B4↓o
.text:004184DA aTuesday        db 'Tuesday',0          ; DATA XREF: .text:004188B8↓o
.text:004184E2 aWednesday      db 'Wednesday',0        ; DATA XREF: .text:004188BC↓o
.text:004184EC aThursday       db 'Thursday',0         ; DATA XREF: .text:004188C0↓o
.text:004184F5 aFriday         db 'Friday',0           ; DATA XREF: .text:004188C4↓o
.text:004184FC aSaturday       db 'Saturday',0         ; DATA XREF: .text:004188C8↓o
.text:00418505 aJan            db 'Jan',0              ; DATA XREF: .text:004188CC↓o
.text:00418509 aFeb            db 'Feb',0              ; DATA XREF: .text:004188D0↓o
.text:0041850D aMar            db 'Mar',0              ; DATA XREF: .text:004188D4↓o
.text:00418511 aApr            db 'Apr',0              ; DATA XREF: .text:004188D8↓o
.text:00418515 aMay            db 'May',0              ; DATA XREF: .text:004188DC↓o
.text:00418515                                         ; .text:0041890C↓o
.text:00418519 aJun            db 'Jun',0              ; DATA XREF: .text:004188E0↓o
.text:0041851D aJul            db 'Jul',0              ; DATA XREF: .text:004188E4↓o
.text:00418521 aAug            db 'Aug',0              ; DATA XREF: .text:004188E8↓o
.text:00418525 aSep            db 'Sep',0              ; DATA XREF: .text:004188EC↓o
.text:00418529 aOct            db 'Oct',0              ; DATA XREF: .text:004188F0↓o
.text:0041852D aNov            db 'Nov',0              ; DATA XREF: .text:004188F4↓o
.text:00418531 aDec            db 'Dec',0              ; DATA XREF: .text:004188F8↓o
.text:00418535 aJanuary        db 'January',0          ; DATA XREF: .text:004188FC↓o
.text:0041853D aFebruary       db 'February',0         ; DATA XREF: .text:00418900↓o
.text:00418546 aMarch          db 'March',0            ; DATA XREF: .text:00418904↓o
.text:0041854C aApril          db 'April',0            ; DATA XREF: .text:00418908↓o
.text:00418552 aJune           db 'June',0             ; DATA XREF: .text:00418910↓o
.text:00418557 aJuly           db 'July',0             ; DATA XREF: .text:00418914↓o
.text:0041855C aAugust         db 'August',0           ; DATA XREF: .text:00418918↓o
.text:00418563 aSeptember      db 'September',0        ; DATA XREF: .text:0041891C↓o
.text:0041856D aOctober        db 'October',0          ; DATA XREF: .text:00418920↓o
.text:00418575 aNovember       db 'November',0         ; DATA XREF: .text:00418924↓o
.text:0041857E aDecember       db 'December',0         ; DATA XREF: .text:00418928↓o
.text:00418587 aAm             db 'AM',0               ; DATA XREF: .text:0041892C↓o
.text:0041858A aPm             db 'PM',0               ; DATA XREF: .text:00418930↓o
.text:0041858D aABEHMSY        db '%a %b %e %H:%M:%S %Y',0
.text:0041858D                                         ; DATA XREF: .text:00418934↓o
.text:004185A2 aMDY            db '%m/%d/%y',0         ; DATA XREF: .text:00418938↓o
.text:004185AB aHMS            db '%H:%M:%S',0         ; DATA XREF: .text:0041893C↓o
.text:004185B4 aIMSP           db '%I:%M:%S %p',0      ; DATA XREF: .text:00418940↓o
.text:004185C0 dword_4185C0    dd 539000h, 6E0075h, 4D0000h, 6E006Fh, 540000h, 650075h
.text:004185C0                                         ; DATA XREF: .text:00418948↓o
.text:004185C0                                         ; .text:0041894C↓o ...
.text:004185C0                 dd 570000h, 640065h, 540000h, 750068h, 460000h, 690072h
.text:004185C0                 dd 530000h, 740061h, 530000h, 6E0075h, 610064h, 79h, 6F004Dh
.text:004185C0                 dd 64006Eh, 790061h, 540000h, 650075h, 640073h, 790061h
.text:004185C0                 dd 570000h, 640065h, 65006Eh, 640073h, 790061h, 540000h
.text:004185C0                 dd 750068h, 730072h, 610064h, 79h, 720046h, 640069h, 790061h
.text:004185C0                 dd 530000h, 740061h, 720075h, 610064h, 79h, 61004Ah, 6Eh
.text:004185C0                 dd 650046h, 62h, 61004Dh, 72h, 700041h, 72h, 61004Dh, 79h
.text:004185C0                 dd 75004Ah, 6Eh, 75004Ah, 6Ch, 750041h, 67h, 650053h, 70h
.text:004185C0                 dd 63004Fh, 74h, 6F004Eh, 76h, 650044h, 63h, 61004Ah, 75006Eh
.text:004185C0                 dd 720061h, 79h, 650046h, 720062h, 610075h, 790072h, 4D0000h
.text:004185C0                 dd 720061h, 680063h, 410000h, 720070h, 6C0069h, 4A0000h
.text:004185C0                 dd 6E0075h, 65h, 75004Ah, 79006Ch, 410000h, 670075h, 730075h
.text:004185C0                 dd 74h, 650053h, 740070h, 6D0065h, 650062h, 72h, 63004Fh
.text:004185C0                 dd 6F0074h, 650062h, 72h, 6F004Eh, 650076h, 62006Dh, 720065h
.text:004185C0                 dd 440000h, 630065h, 6D0065h, 650062h, 72h, 4D0041h, 500000h
.text:004185C0                 dd 4Dh, 5 dup(90909090h), 610025h, 250020h, 200062h, 650025h
.text:004185C0                 dd 250020h, 3A0048h, 4D0025h, 25003Ah, 200053h, 590025h
.text:004185C0                 dd 250000h, 2F006Dh, 640025h, 25002Fh, 79h, 480025h, 25003Ah
.text:004185C0                 dd 3A004Dh, 530025h, 250000h, 3A0049h, 4D0025h, 25003Ah
.text:004185C0                 dd 200053h, 700025h, 0
.text:004187F8 unk_4187F8      db    7                 ; DATA XREF: .text:00418A28↓o
.text:004187F9                 align 2
.text:004187FA                 dw 4
.text:004187FC                 db    1
.text:004187FD                 align 2
.text:004187FE aABEHMSZY       db '%a %b %e %H:%M:%S %Z %Y',0
.text:004187FE                                         ; DATA XREF: .text:00418A44↓o
.text:00418816                 db 1Ah dup(90h)
.text:00418830 aABEHMSZY_0:                            ; DATA XREF: .text:00418A48↓o
.text:00418830                 text "UTF-16LE", '%a %b %e %H:%M:%S %Z %Y',0
.text:00418860                 db 10h dup(90h)
.text:00418870                 dd offset dword_418EF0
.text:00418874                 dd 5 dup(0)
.text:00418888                 dd 0FFFFFFFFh, 0
.text:00418890                 dd 6Fh, 4184B0h, 4184B4h, 4184B8h, 4184BCh, 4184C0h, 4184C4h
.text:00418890                 dd 4184C8h
.text:004188B0                 dd offset aSunday       ; "Sunday"
.text:004188B4                 dd offset aMonday       ; "Monday"
.text:004188B8                 dd offset aTuesday      ; "Tuesday"
.text:004188BC                 dd offset aWednesday    ; "Wednesday"
.text:004188C0                 dd offset aThursday     ; "Thursday"
.text:004188C4                 dd offset aFriday       ; "Friday"
.text:004188C8                 dd offset aSaturday     ; "Saturday"
.text:004188CC                 dd offset aJan          ; "Jan"
.text:004188D0                 dd offset aFeb          ; "Feb"
.text:004188D4                 dd offset aMar          ; "Mar"
.text:004188D8                 dd offset aApr          ; "Apr"
.text:004188DC                 dd offset aMay          ; "May"
.text:004188E0                 dd offset aJun          ; "Jun"
.text:004188E4                 dd offset aJul          ; "Jul"
.text:004188E8                 dd offset aAug          ; "Aug"
.text:004188EC                 dd offset aSep          ; "Sep"
.text:004188F0                 dd offset aOct          ; "Oct"
.text:004188F4                 dd offset aNov          ; "Nov"
.text:004188F8                 dd offset aDec          ; "Dec"
.text:004188FC                 dd offset aJanuary      ; "January"
.text:00418900                 dd offset aFebruary     ; "February"
.text:00418904                 dd offset aMarch        ; "March"
.text:00418908                 dd offset aApril        ; "April"
.text:0041890C                 dd offset aMay          ; "May"
.text:00418910                 dd offset aJune         ; "June"
.text:00418914                 dd offset aJuly         ; "July"
.text:00418918                 dd offset aAugust       ; "August"
.text:0041891C                 dd offset aSeptember    ; "September"
.text:00418920                 dd offset aOctober      ; "October"
.text:00418924                 dd offset aNovember     ; "November"
.text:00418928                 dd offset aDecember     ; "December"
.text:0041892C                 dd offset aAm           ; "AM"
.text:00418930                 dd offset aPm           ; "PM"
.text:00418934                 dd offset aABEHMSY      ; "%a %b %e %H:%M:%S %Y"
.text:00418938                 dd offset aMDY          ; "%m/%d/%y"
.text:0041893C                 dd offset aHMS          ; "%H:%M:%S"
.text:00418940                 dd offset aIMSP         ; "%I:%M:%S %p"
.text:00418944                 align 8
.text:00418948                 dd offset dword_4185C0
.text:0041894C                 dd offset dword_4185C0
.text:00418950                 dd offset dword_4185C0
.text:00418954                 dd offset dword_4185C0
.text:00418958                 dd offset dword_4185C0
.text:0041895C                 align 10h
.text:00418960                 dd offset dword_4185C0
.text:00418964                 dd offset dword_4185C0+2
.text:00418968                 dd offset dword_4185C0+0Ah
.text:0041896C                 dd offset dword_4185C0+12h
.text:00418970                 dd offset dword_4185C0+1Ah
.text:00418974                 dd offset dword_4185C0+22h
.text:00418978                 dd offset dword_4185C0+2Ah
.text:0041897C                 dd offset dword_4185C0+32h
.text:00418980                 dd offset dword_4185C0+3Ah
.text:00418984                 dd offset dword_4185C0+48h
.text:00418988                 dd offset dword_4185C0+56h
.text:0041898C                 dd offset dword_4185C0+66h
.text:00418990                 dd offset dword_4185C0+7Ah
.text:00418994                 dd offset dword_4185C0+8Ch
.text:00418998                 dd offset dword_4185C0+9Ah
.text:0041899C                 dd offset dword_4185C0+0ACh
.text:004189A0                 dd offset dword_4185C0+0B4h
.text:004189A4                 dd offset dword_4185C0+0BCh
.text:004189A8                 dd offset dword_4185C0+0C4h
.text:004189AC                 dd offset dword_4185C0+0CCh
.text:004189B0                 dd offset dword_4185C0+0D4h
.text:004189B4                 dd offset dword_4185C0+0DCh
.text:004189B8                 dd offset dword_4185C0+0E4h
.text:004189BC                 dd offset dword_4185C0+0ECh
.text:004189C0                 dd offset dword_4185C0+0F4h
.text:004189C4                 dd offset dword_4185C0+0FCh
.text:004189C8                 dd offset dword_4185C0+104h
.text:004189CC                 dd offset dword_4185C0+10Ch
.text:004189D0                 dd offset dword_4185C0+11Ch
.text:004189D4                 dd offset dword_4185C0+12Eh
.text:004189D8                 dd offset dword_4185C0+13Ah
.text:004189DC                 dd offset dword_4185C0+0CCh
.text:004189E0                 dd offset dword_4185C0+146h
.text:004189E4                 dd offset dword_4185C0+150h
.text:004189E8                 dd offset dword_4185C0+15Ah
.text:004189EC                 dd offset dword_4185C0+168h
.text:004189F0                 dd offset dword_4185C0+17Ch
.text:004189F4                 dd offset dword_4185C0+18Ch
.text:004189F8                 dd offset dword_4185C0+19Eh
.text:004189FC                 dd offset dword_4185C0+1B0h
.text:00418A00                 dd offset dword_4185C0+1B6h
.text:00418A04                 dd offset dword_4185C0+1D0h
.text:00418A08                 dd offset dword_4185C0+1FAh
.text:00418A0C                 dd offset dword_4185C0+20Ch
.text:00418A10                 dd offset dword_4185C0+21Eh
.text:00418A14                 dd offset dword_4185C0+236h
.text:00418A18                 dd offset dword_4185C0+236h
.text:00418A1C                 dd offset dword_4185C0+236h
.text:00418A20                 dd offset dword_4185C0+236h
.text:00418A24                 dd offset dword_4185C0+236h
.text:00418A28                 dd offset unk_4187F8
.text:00418A2C                 dd 130BC3Ah, 4187FAh, 4187F8h, 2 dup(4187FCh), 4185C0h
.text:00418A44                 dd offset aABEHMSZY     ; "%a %b %e %H:%M:%S %Z %Y"
.text:00418A48                 dd offset aABEHMSZY_0   ; "%a %b %e %H:%M:%S %Z %Y"
.text:00418A4C                 dd offset aAnsiX341968  ; "ANSI_X3.4-1968"
.text:00418A50 aYy             db '^[yY]',0            ; DATA XREF: .text:00418A94↓o
.text:00418A56 aNn             db '^[nN]',0            ; DATA XREF: .text:00418A98↓o
.text:00418A5C dword_418A5C    dd 90909000h, 4 dup(90909090h), 418EF0h, 5 dup(0)
.text:00418A5C                                         ; DATA XREF: .text:00418A9C↓o
.text:00418A5C                                         ; .text:00418AA0↓o
.text:00418A88                 dd 0FFFFFFFFh, 0
.text:00418A90                 dd 5
.text:00418A94                 dd offset aYy           ; "^[yY]"
.text:00418A98                 dd offset aNn           ; "^[nN]"
.text:00418A9C                 dd offset dword_418A5C
.text:00418AA0                 dd offset dword_418A5C
.text:00418AA4                 dd offset aAnsiX341968  ; "ANSI_X3.4-1968"
.text:00418AA8                 align 10h
.text:00418AB0                 dd offset dword_418EF0
.text:00418AB4                 dd 5 dup(0)
.text:00418AC8                 dd 0FFFFFFFFh, 0
.text:00418AD0                 dd 3, 129h, 0D2h
.text:00418ADC                 dd offset aAnsiX341968  ; "ANSI_X3.4-1968"
.text:00418AE0                 db 10h dup(90h)
.text:00418AF0 aPTGTMTF        db '%p%t%g%t%m%t%f',0   ; DATA XREF: .text:00418B34↓o
.text:00418AFF unk_418AFF      db    0                 ; DATA XREF: .text:00418B38↓o
.text:00418AFF                                         ; .text:00418B3C↓o ...
.text:00418B00                 db 10h dup(90h)
.text:00418B10                 dd offset dword_418EF0
.text:00418B14                 dd 5 dup(0)
.text:00418B28                 dd 0FFFFFFFFh, 0
.text:00418B30                 dd 7
.text:00418B34                 dd offset aPTGTMTF      ; "%p%t%g%t%m%t%f"
.text:00418B38                 dd offset unk_418AFF
.text:00418B3C                 dd offset unk_418AFF
.text:00418B40                 dd offset unk_418AFF
.text:00418B44                 dd offset unk_418AFF
.text:00418B48                 dd offset unk_418AFF
.text:00418B4C                 dd offset aAnsiX341968  ; "ANSI_X3.4-1968"
.text:00418B50 aANFNDNBNSHERNC db '%a%N%f%N%d%N%b%N%s %h %e %r%N%C-%z %T%N%c%N',0
.text:00418B50                                         ; DATA XREF: .text:00418BB4↓o
.text:00418B7C dword_418B7C    dd 90909000h, 4 dup(90909090h), 418EF0h, 5 dup(0)
.text:00418B7C                                         ; DATA XREF: .text:00418BB8↓o
.text:00418B7C                                         ; .text:00418BBC↓o ...
.text:00418BA8                 dd 0FFFFFFFFh, 0
.text:00418BB0                 dd 0Dh
.text:00418BB4                 dd offset aANFNDNBNSHERNC ; "%a%N%f%N%d%N%b%N%s %h %e %r%N%C-%z %T%N"...
.text:00418BB8                 dd offset dword_418B7C
.text:00418BBC                 dd offset dword_418B7C
.text:00418BC0                 dd offset dword_418B7C
.text:00418BC4                 dd offset dword_418B7C
.text:00418BC8                 dd offset dword_418B7C
.text:00418BCC                 dd offset dword_418B7C
.text:00418BD0                 dd offset dword_418B7C
.text:00418BD4                 dd offset dword_418B7C
.text:00418BD8                 dd offset dword_418B7C
.text:00418BDC                 dd offset dword_418B7C
.text:00418BE0                 dd offset dword_418B7C
.text:00418BE4                 dd offset aAnsiX341968  ; "ANSI_X3.4-1968"
.text:00418BE8                 align 10h
.text:00418BF0 aCAL            db '+%c %a %l',0        ; DATA XREF: .text:00418C34↓o
.text:00418BFA unk_418BFA      db    0                 ; DATA XREF: .text:00418C38↓o
.text:00418BFA                                         ; .text:00418C3C↓o ...
.text:00418BFB                 db  90h
.text:00418BFC                 db 14h dup(90h)
.text:00418C10                 dd offset dword_418EF0
.text:00418C14                 dd 5 dup(0)
.text:00418C28                 dd 0FFFFFFFFh, 0
.text:00418C30                 dd 5
.text:00418C34                 dd offset aCAL          ; "+%c %a %l"
.text:00418C38                 dd offset unk_418BFA
.text:00418C3C                 dd offset unk_418BFA
.text:00418C40                 dd offset unk_418BFA
.text:00418C44                 dd offset aAnsiX341968  ; "ANSI_X3.4-1968"
.text:00418C48                 align 10h
.text:00418C50                 dd 90900001h, 7 dup(90909090h), 418EF0h, 5 dup(0)
.text:00418C88                 dd 0FFFFFFFFh, 0
.text:00418C90                 dd 2, 418C50h
.text:00418C98                 dd offset aAnsiX341968  ; "ANSI_X3.4-1968"
.text:00418C9C                 db 14h dup(90h)
.text:00418CB0 aIsoIec14652I18 db 'ISO/IEC 14652 i18n FDCC-set',0
.text:00418CB0                                         ; DATA XREF: .text:00418E94↓o
.text:00418CCC                 align 10h
.text:00418CD0 aIsoIecJtc1Sc22 db 'ISO/IEC JTC1/SC22/WG20 - internationalization',0
.text:00418CD0                                         ; DATA XREF: .text:00418E98↓o
.text:00418CFE                 db 12h dup(90h)
.text:00418D10 aCOKeldSimonsen db 'C/o Keld Simonsen, Skt. Jorgens Alle 8, DK-1615 Kobenhavn V',0
.text:00418D10                                         ; DATA XREF: .text:00418E9C↓o
.text:00418D4C aKeldSimonsen   db 'Keld Simonsen',0    ; DATA XREF: .text:00418EA0↓o
.text:00418D5A aKeldDkuugDk    db 'keld@dkuug.dk',0    ; DATA XREF: .text:00418EA4↓o
.text:00418D68 a4531226543     db '+45 3122-6543',0    ; DATA XREF: .text:00418EA8↓o
.text:00418D76 a4533256543     db '+45 3325-6543',0    ; DATA XREF: .text:00418EAC↓o
.text:00418D84 dword_418D84    dd 4F534900h, 302E3100h, 39393100h, 32312D37h, 30322Dh
.text:00418D84                                         ; DATA XREF: .text:00418EB0↓o
.text:00418D84                                         ; .text:00418EB8↓o ...
.text:00418D84                 dd 6 dup(90909090h), 6E383169h, 3939313Ah, 31690039h, 313A6E38h
.text:00418D84                 dd 393939h, 6E383169h, 3939313Ah, 31690039h, 313A6E38h
.text:00418D84                 dd 393939h, 6E383169h, 3939313Ah, 31690039h, 313A6E38h
.text:00418D84                 dd 393939h, 38316900h, 39313A6Eh, 69003939h, 3A6E3831h
.text:00418D84                 dd 39393931h, 38316900h, 39313A6Eh, 69003939h, 3A6E3831h
.text:00418D84                 dd 39393931h, 38316900h, 39313A6Eh, 69003939h, 3A6E3831h
.text:00418D84                 dd 39393931h, 38316900h, 39313A6Eh, 69003939h, 3A6E3831h
.text:00418D84                 dd 39393931h, 38316900h, 39313A6Eh, 69003939h, 3A6E3831h
.text:00418D84                 dd 39393931h, 90909000h, 7 dup(90909090h), 418EF0h, 5 dup(0)
.text:00418E88                 dd 0FFFFFFFFh, 0
.text:00418E90                 dd 10h
.text:00418E94                 dd offset aIsoIec14652I18 ; "ISO/IEC 14652 i18n FDCC-set"
.text:00418E98                 dd offset aIsoIecJtc1Sc22 ; "ISO/IEC JTC1/SC22/WG20 - internationali"...
.text:00418E9C                 dd offset aCOKeldSimonsen ; "C/o Keld Simonsen, Skt. Jorgens Alle 8,"...
.text:00418EA0                 dd offset aKeldSimonsen ; "Keld Simonsen"
.text:00418EA4                 dd offset aKeldDkuugDk  ; "keld@dkuug.dk"
.text:00418EA8                 dd offset a4531226543   ; "+45 3122-6543"
.text:00418EAC                 dd offset a4533256543   ; "+45 3325-6543"
.text:00418EB0                 dd offset dword_418D84
.text:00418EB4                 dd offset dword_418D84+1
.text:00418EB8                 dd offset dword_418D84
.text:00418EBC                 dd offset dword_418D84
.text:00418EC0                 dd offset dword_418D84
.text:00418EC4                 dd offset dword_418D84+5
.text:00418EC8                 dd offset dword_418D84+9
.text:00418ECC                 dd offset dword_418D84+2Ch
.text:00418ED0                 dd offset aAnsiX341968  ; "ANSI_X3.4-1968"
.text:00418ED4                 db 1Ch dup(90h)
.text:00418EF0 dword_418EF0    dd 4F500043h, 584953h   ; DATA XREF: .text:00418870↑o
.text:00418EF0                                         ; .text:00418AB0↑o ...
.text:00418EF8 aAnsiX341968    db 'ANSI_X3.4-1968',0   ; DATA XREF: .text:004102DC↑o
.text:00418EF8                                         ; .text:0041822C↑o ...
.text:00418F07                 align 10h
.text:00418F10 aFile           db 'file',0             ; DATA XREF: sub_418F40:loc_418F6C↓o
.text:00418F15 ; const char aSSxxxxxx[]
.text:00418F15 aSSxxxxxx       db '%.*s/%.*sXXXXXX',0  ; DATA XREF: sub_418F40+9B↓o
.text:00418F25 ; const char aTemp[]
.text:00418F25 aTemp           db 'TEMP',0             ; DATA XREF: sub_418F40:loc_419022↓o
.text:00418F25                                         ; sub_418F40:loc_419062↓o ...
.text:00418F2A ; const char aTmp[]
.text:00418F2A aTmp            db '/tmp',0             ; DATA XREF: sub_418F40+12F↓o
.text:00418F2A                                         ; sub_418F40+141↓o ...
.text:00418F2F aTmpdir         db 'TMPDIR',0           ; DATA XREF: sub_418F40:loc_4190E0↓o
.text:00418F36 aTmp_0          db 'TMP',0              ; DATA XREF: sub_418F40:loc_419170↓o
.text:00418F3A                 align 10h
.text:00418F40
.text:00418F40 ; =============== S U B R O U T I N E =======================================
.text:00418F40
.text:00418F40
.text:00418F40 ; int __cdecl sub_418F40(char *Buffer, int, char *, char *, int)
.text:00418F40 sub_418F40      proc near               ; CODE XREF: sub_40FCB0+3B↑p
.text:00418F40
.text:00418F40 Str             = dword ptr -1BCh
.text:00418F40 Format          = dword ptr -1B8h
.text:00418F40 var_1B4         = dword ptr -1B4h
.text:00418F40 var_1B0         = dword ptr -1B0h
.text:00418F40 var_1AC         = dword ptr -1ACh
.text:00418F40 var_1A8         = dword ptr -1A8h
.text:00418F40 var_19C         = dword ptr -19Ch
.text:00418F40 var_13C         = dword ptr -13Ch
.text:00418F40 var_DC          = dword ptr -0DCh
.text:00418F40 var_7C          = dword ptr -7Ch
.text:00418F40 Buffer          = dword ptr  4
.text:00418F40 arg_4           = dword ptr  8
.text:00418F40 arg_8           = dword ptr  0Ch
.text:00418F40 arg_C           = dword ptr  10h
.text:00418F40 arg_10          = dword ptr  14h
.text:00418F40
.text:00418F40                 push    ebp
.text:00418F41                 push    edi
.text:00418F42                 push    esi
.text:00418F43                 push    ebx
.text:00418F44                 sub     esp, 1ACh
.text:00418F4A                 mov     eax, [esp+1BCh+arg_C]
.text:00418F51                 mov     esi, [esp+1BCh+arg_8]
.text:00418F58                 test    eax, eax
.text:00418F5A                 jz      short loc_418F6C
.text:00418F5C                 mov     edx, [esp+1BCh+arg_C]
.text:00418F63                 cmp     byte ptr [edx], 0
.text:00418F66                 jnz     loc_4191A0
.text:00418F6C
.text:00418F6C loc_418F6C:                             ; CODE XREF: sub_418F40+1A↑j
.text:00418F6C                 mov     eax, offset aFile ; "file"
.text:00418F71                 mov     ebp, 4
.text:00418F76                 mov     [esp+1BCh+arg_C], eax
.text:00418F7D
.text:00418F7D loc_418F7D:                             ; CODE XREF: sub_418F40+274↓j
.text:00418F7D                                         ; sub_418F40+27F↓j
.text:00418F7D                 mov     ebx, [esp+1BCh+arg_10]
.text:00418F84                 test    ebx, ebx
.text:00418F86                 jnz     loc_4190E0
.text:00418F8C
.text:00418F8C loc_418F8C:                             ; CODE XREF: sub_418F40+21C↓j
.text:00418F8C                                         ; sub_418F40+224↓j ...
.text:00418F8C                 test    esi, esi
.text:00418F8E                 jz      loc_419022
.text:00418F94
.text:00418F94 loc_418F94:                             ; CODE XREF: sub_418F40+176↓j
.text:00418F94                                         ; sub_418F40+19A↓j
.text:00418F94                 mov     [esp+1BCh+Str], esi ; Str
.text:00418F97                 call    strlen
.text:00418F9C                 test    eax, eax
.text:00418F9E                 mov     edx, eax
.text:00418FA0                 jz      short loc_418FB0
.text:00418FA2                 movzx   eax, byte ptr [eax+esi-1]
.text:00418FA7                 cmp     al, 2Fh ; '/'
.text:00418FA9                 jz      short loc_419010
.text:00418FAB                 cmp     al, 5Ch ; '\'
.text:00418FAD                 jz      short loc_419010
.text:00418FAF                 nop
.text:00418FB0
.text:00418FB0 loc_418FB0:                             ; CODE XREF: sub_418F40+60↑j
.text:00418FB0                                         ; sub_418F40+D1↓j ...
.text:00418FB0                 lea     edi, [ebp+edx+8]
.text:00418FB4                 cmp     [esp+1BCh+arg_4], edi
.text:00418FBB                 jb      short loc_418FF8
.text:00418FBD                 mov     [esp+1BCh+var_1AC], ebp
.text:00418FC1                 mov     ecx, [esp+1BCh+arg_C]
.text:00418FC8                 mov     ebp, [esp+1BCh+Buffer]
.text:00418FCF                 mov     [esp+1BCh+var_1B0], esi
.text:00418FD3                 mov     [esp+1BCh+var_1A8], ecx
.text:00418FD7                 mov     [esp+1BCh+var_1B4], edx
.text:00418FDB                 mov     [esp+1BCh+Format], offset aSSxxxxxx ; "%.*s/%.*sXXXXXX"
.text:00418FE3                 mov     [esp+1BCh+Str], ebp ; Buffer
.text:00418FE6                 call    sprintf
.text:00418FEB                 xor     eax, eax
.text:00418FED
.text:00418FED loc_418FED:                             ; CODE XREF: sub_418F40+C8↓j
.text:00418FED                 add     esp, 1ACh
.text:00418FF3                 pop     ebx
.text:00418FF4                 pop     esi
.text:00418FF5                 pop     edi
.text:00418FF6                 pop     ebp
.text:00418FF7                 retn
.text:00418FF8 ; ---------------------------------------------------------------------------
.text:00418FF8
.text:00418FF8 loc_418FF8:                             ; CODE XREF: sub_418F40+7B↑j
.text:00418FF8                 call    _errno
.text:00418FFD                 mov     dword ptr [eax], 16h
.text:00419003
.text:00419003 loc_419003:                             ; CODE XREF: sub_418F40+187↓j
.text:00419003                 mov     eax, 0FFFFFFFFh
.text:00419008                 jmp     short loc_418FED
.text:00419008 ; ---------------------------------------------------------------------------
.text:0041900A                 align 10h
.text:00419010
.text:00419010 loc_419010:                             ; CODE XREF: sub_418F40+69↑j
.text:00419010                                         ; sub_418F40+6D↑j ...
.text:00419010                 dec     edx
.text:00419011                 jz      short loc_418FB0
.text:00419013                 movzx   eax, byte ptr [edx+esi-1]
.text:00419018                 cmp     al, 2Fh ; '/'
.text:0041901A                 jz      short loc_419010
.text:0041901C                 cmp     al, 5Ch ; '\'
.text:0041901E                 jz      short loc_419010
.text:00419020                 jmp     short loc_418FB0
.text:00419022 ; ---------------------------------------------------------------------------
.text:00419022
.text:00419022 loc_419022:                             ; CODE XREF: sub_418F40+4E↑j
.text:00419022                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:00419029                 lea     esi, [esp+1BCh+var_13C]
.text:00419030                 call    getenv
.text:00419035                 mov     [esp+1BCh+Format], eax ; char *
.text:00419039                 mov     [esp+1BCh+var_1B4], esi ; int
.text:0041903D                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:00419044                 call    sub_419840
.text:00419049                 test    eax, eax
.text:0041904B                 jnz     short loc_419062
.text:0041904D                 mov     edi, [esp+1BCh+var_13C]
.text:00419054                 and     edi, 0F000h
.text:0041905A                 cmp     edi, 4000h
.text:00419060                 jz      short loc_4190CC
.text:00419062
.text:00419062 loc_419062:                             ; CODE XREF: sub_418F40+10B↑j
.text:00419062                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:00419069                 call    getenv
.text:0041906E                 cld
.text:0041906F                 mov     edx, offset aTmp ; "/tmp"
.text:00419074                 mov     esi, eax
.text:00419076                 mov     ecx, 5
.text:0041907B                 mov     edi, edx
.text:0041907D                 repe cmpsb
.text:0041907F                 jz      short loc_4190BC
.text:00419081                 mov     [esp+1BCh+Format], offset aTmp ; "/tmp"
.text:00419089                 lea     ecx, [esp+1BCh+var_19C]
.text:0041908D                 mov     [esp+1BCh+var_1B4], ecx ; int
.text:00419091                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:00419098                 call    sub_419840
.text:0041909D                 test    eax, eax
.text:0041909F                 jnz     short loc_4190BC
.text:004190A1                 mov     ebx, [esp+1BCh+var_19C]
.text:004190A5                 mov     esi, offset aTmp ; "/tmp"
.text:004190AA                 and     ebx, 0F000h
.text:004190B0                 cmp     ebx, 4000h
.text:004190B6                 jz      loc_418F94
.text:004190BC
.text:004190BC loc_4190BC:                             ; CODE XREF: sub_418F40+13F↑j
.text:004190BC                                         ; sub_418F40+15F↑j
.text:004190BC                 call    _errno
.text:004190C1                 mov     dword ptr [eax], 2
.text:004190C7                 jmp     loc_419003
.text:004190CC ; ---------------------------------------------------------------------------
.text:004190CC
.text:004190CC loc_4190CC:                             ; CODE XREF: sub_418F40+120↑j
.text:004190CC                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:004190D3                 call    getenv
.text:004190D8                 mov     esi, eax
.text:004190DA                 jmp     loc_418F94
.text:004190DA ; ---------------------------------------------------------------------------
.text:004190DF                 align 10h
.text:004190E0
.text:004190E0 loc_4190E0:                             ; CODE XREF: sub_418F40+46↑j
.text:004190E0                 mov     [esp+1BCh+Str], offset aTmpdir ; "TMPDIR"
.text:004190E7                 call    sub_4197D0
.text:004190EC                 test    eax, eax
.text:004190EE                 mov     ebx, eax
.text:004190F0                 jz      short loc_419170
.text:004190F2
.text:004190F2 loc_4190F2:                             ; CODE XREF: sub_418F40+240↓j
.text:004190F2                                         ; sub_418F40+256↓j
.text:004190F2                 mov     [esp+1BCh+Format], ebx ; char *
.text:004190F6                 lea     edi, [esp+1BCh+var_7C]
.text:004190FD                 mov     [esp+1BCh+var_1B4], edi ; int
.text:00419101                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:00419108                 call    sub_419840
.text:0041910D                 test    eax, eax
.text:0041910F                 jnz     short loc_419126
.text:00419111                 mov     edx, [esp+1BCh+var_7C]
.text:00419118                 and     edx, 0F000h
.text:0041911E                 cmp     edx, 4000h
.text:00419124                 jz      short loc_419169
.text:00419126
.text:00419126 loc_419126:                             ; CODE XREF: sub_418F40+1CF↑j
.text:00419126                                         ; sub_418F40+25C↓j
.text:00419126                 test    esi, esi
.text:00419128                 jz      short loc_419162
.text:0041912A                 mov     [esp+1BCh+Format], esi ; char *
.text:0041912E                 lea     ecx, [esp+1BCh+var_DC]
.text:00419135                 mov     [esp+1BCh+var_1B4], ecx ; int
.text:00419139                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:00419140                 call    sub_419840
.text:00419145                 test    eax, eax
.text:00419147                 jnz     short loc_419162
.text:00419149                 mov     ebx, [esp+1BCh+var_DC]
.text:00419150                 and     ebx, 0F000h
.text:00419156                 cmp     ebx, 4000h
.text:0041915C                 jz      loc_418F8C
.text:00419162
.text:00419162 loc_419162:                             ; CODE XREF: sub_418F40+1E8↑j
.text:00419162                                         ; sub_418F40+207↑j
.text:00419162                 xor     esi, esi
.text:00419164                 jmp     loc_418F8C
.text:00419169 ; ---------------------------------------------------------------------------
.text:00419169
.text:00419169 loc_419169:                             ; CODE XREF: sub_418F40+1E4↑j
.text:00419169                 mov     esi, ebx
.text:0041916B                 jmp     loc_418F8C
.text:00419170 ; ---------------------------------------------------------------------------
.text:00419170
.text:00419170 loc_419170:                             ; CODE XREF: sub_418F40+1B0↑j
.text:00419170                 mov     [esp+1BCh+Str], offset aTmp_0 ; "TMP"
.text:00419177                 call    sub_4197D0
.text:0041917C                 test    eax, eax
.text:0041917E                 mov     ebx, eax
.text:00419180                 jnz     loc_4190F2
.text:00419186                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:0041918D                 call    sub_4197D0
.text:00419192                 test    eax, eax
.text:00419194                 mov     ebx, eax
.text:00419196                 jnz     loc_4190F2
.text:0041919C                 jmp     short loc_419126
.text:0041919C ; ---------------------------------------------------------------------------
.text:0041919E                 align 10h
.text:004191A0
.text:004191A0 loc_4191A0:                             ; CODE XREF: sub_418F40+26↑j
.text:004191A0                 mov     ecx, [esp+1BCh+arg_C]
.text:004191A7                 mov     [esp+1BCh+Str], ecx ; Str
.text:004191AA                 call    strlen
.text:004191AF                 cmp     eax, 5
.text:004191B2                 mov     ebp, eax
.text:004191B4                 jbe     loc_418F7D
.text:004191BA                 mov     ebp, 5
.text:004191BF                 jmp     loc_418F7D
.text:004191BF sub_418F40      endp
.text:004191BF
.text:004191BF ; ---------------------------------------------------------------------------
.text:004191C4                 align 10h
.text:004191D0 byte_4191D0     db 61h                  ; DATA XREF: sub_4192C0+DC↓r
.text:004191D0                                         ; sub_4192C0+122↓r ...
.text:004191D1 aBcdefghijklmno db 'bcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789',0
.text:0041920F aXxxxxx         db 'XXXXXX',0           ; DATA XREF: sub_4192C0+39↓o
.text:00419216                 db 1Ah dup(90h)
.text:00419230 aInvalidKindInG db 'invalid KIND in __gen_tempname',0
.text:00419230                                         ; DATA XREF: sub_4192C0:loc_419538↓o
.text:0041924F                 align 10h
.text:00419250 aLibc05SrcStdio db '../../libc-0.5-src/stdio-common/tempname.c',0
.text:00419250                                         ; DATA XREF: sub_4192C0+405↓o
.text:0041927B                 db 15h dup(90h)
.text:00419290 aInvalidKindInG_0 db '! "invalid KIND in __gen_tempname"',0
.text:00419290                                         ; DATA XREF: sub_4192C0+40D↓o
.text:004192B3                 align 10h
.text:004192C0
.text:004192C0 ; =============== S U B R O U T I N E =======================================
.text:004192C0
.text:004192C0
.text:004192C0 ; int __cdecl sub_4192C0(char *FileName, int)
.text:004192C0 sub_4192C0      proc near               ; CODE XREF: sub_40FCB0+51↑p
.text:004192C0
.text:004192C0 Str             = dword ptr -9Ch
.text:004192C0 OpenFlag        = dword ptr -98h
.text:004192C0 var_94          = dword ptr -94h
.text:004192C0 var_90          = dword ptr -90h
.text:004192C0 var_8C          = dword ptr -8Ch
.text:004192C0 var_88          = dword ptr -88h
.text:004192C0 var_84          = dword ptr -84h
.text:004192C0 var_80          = dword ptr -80h
.text:004192C0 var_7C          = dword ptr -7Ch
.text:004192C0 FileName        = dword ptr  4
.text:004192C0 arg_4           = dword ptr  8
.text:004192C0
.text:004192C0                 push    ebp
.text:004192C1                 push    edi
.text:004192C2                 push    esi
.text:004192C3                 push    ebx
.text:004192C4                 sub     esp, 8Ch
.text:004192CA                 mov     [esp+9Ch+var_88], 0FFFFFFFFh
.text:004192D2                 call    _errno
.text:004192D7                 mov     edx, [eax]
.text:004192D9                 mov     [esp+9Ch+var_8C], edx
.text:004192DD                 mov     edx, [esp+9Ch+FileName]
.text:004192E4                 mov     [esp+9Ch+Str], edx ; Str
.text:004192E7                 call    strlen
.text:004192EC                 cmp     eax, 5
.text:004192EF                 jle     short loc_41930D
.text:004192F1                 cld
.text:004192F2                 mov     ecx, [esp+9Ch+FileName]
.text:004192F9                 mov     edi, offset aXxxxxx ; "XXXXXX"
.text:004192FE                 lea     esi, [eax+ecx-6]
.text:00419302                 mov     ecx, 7
.text:00419307                 mov     ebp, esi
.text:00419309                 repe cmpsb
.text:0041930B                 jz      short loc_419328
.text:0041930D
.text:0041930D loc_41930D:                             ; CODE XREF: sub_4192C0+2F↑j
.text:0041930D                 call    _errno
.text:00419312                 mov     dword ptr [eax], 16h
.text:00419318
.text:00419318 loc_419318:                             ; CODE XREF: sub_4192C0+295↓j
.text:00419318                                         ; sub_4192C0+2D8↓j ...
.text:00419318                 mov     eax, 0FFFFFFFFh
.text:0041931D
.text:0041931D loc_41931D:                             ; CODE XREF: sub_4192C0+2EF↓j
.text:0041931D                                         ; sub_4192C0+332↓j
.text:0041931D                 add     esp, 8Ch
.text:00419323                 pop     ebx
.text:00419324                 pop     esi
.text:00419325                 pop     edi
.text:00419326                 pop     ebp
.text:00419327                 retn
.text:00419328 ; ---------------------------------------------------------------------------
.text:00419328
.text:00419328 loc_419328:                             ; CODE XREF: sub_4192C0+4B↑j
.text:00419328                 mov     ecx, ds:dword_41E7F4
.text:0041932E                 mov     edi, ds:dword_41E7F0
.text:00419334                 mov     eax, ecx
.text:00419336                 or      eax, edi
.text:00419338                 jz      loc_419673
.text:0041933E
.text:0041933E loc_41933E:                             ; CODE XREF: sub_4192C0+3F8↓j
.text:0041933E                 rdtsc
.text:00419340                 mov     edi, edx
.text:00419342                 mov     esi, eax
.text:00419344                 call    _getpid
.text:00419349                 mov     ebx, eax
.text:0041934B                 mov     edx, esi
.text:0041934D                 sar     ebx, 1Fh
.text:00419350                 xor     edx, eax
.text:00419352                 mov     ecx, edi
.text:00419354                 xor     ecx, ebx
.text:00419356                 mov     ebx, edx
.text:00419358                 mov     esi, ecx
.text:0041935A                 add     ebx, ds:dword_41E7F0
.text:00419360                 adc     esi, ds:dword_41E7F4
.text:00419366                 xor     edi, edi
.text:00419368                 mov     ds:dword_41E7F0, ebx
.text:0041936E                 mov     ds:dword_41E7F4, esi
.text:00419374                 lea     esi, [esi+0]
.text:0041937A                 lea     edi, [edi+0]
.text:00419380
.text:00419380 loc_419380:                             ; CODE XREF: sub_4192C0+2C7↓j
.text:00419380                 mov     [esp+9Ch+Str], ebx
.text:00419383                 mov     [esp+9Ch+OpenFlag], esi
.text:00419387                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0041938F                 mov     [esp+9Ch+var_90], 0
.text:00419397                 call    sub_41B420
.text:0041939C                 movzx   ecx, ds:byte_4191D0[eax]
.text:004193A3                 mov     [ebp+0], cl
.text:004193A6                 mov     [esp+9Ch+Str], ebx
.text:004193A9                 mov     [esp+9Ch+OpenFlag], esi
.text:004193AD                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:004193B5                 mov     [esp+9Ch+var_90], 0
.text:004193BD                 call    sub_41B300
.text:004193C2                 mov     [esp+9Ch+Str], eax
.text:004193C5                 mov     ebx, eax
.text:004193C7                 mov     esi, edx
.text:004193C9                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:004193D1                 mov     [esp+9Ch+var_90], 0
.text:004193D9                 mov     [esp+9Ch+OpenFlag], edx
.text:004193DD                 call    sub_41B420
.text:004193E2                 movzx   edx, ds:byte_4191D0[eax]
.text:004193E9                 mov     [ebp+1], dl
.text:004193EC                 mov     [esp+9Ch+Str], ebx
.text:004193EF                 mov     [esp+9Ch+OpenFlag], esi
.text:004193F3                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:004193FB                 mov     [esp+9Ch+var_90], 0
.text:00419403                 call    sub_41B300
.text:00419408                 mov     [esp+9Ch+Str], eax
.text:0041940B                 mov     ebx, eax
.text:0041940D                 mov     esi, edx
.text:0041940F                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00419417                 mov     [esp+9Ch+var_90], 0
.text:0041941F                 mov     [esp+9Ch+OpenFlag], edx
.text:00419423                 call    sub_41B420
.text:00419428                 movzx   ecx, ds:byte_4191D0[eax]
.text:0041942F                 mov     [ebp+2], cl
.text:00419432                 mov     [esp+9Ch+Str], ebx
.text:00419435                 mov     [esp+9Ch+OpenFlag], esi
.text:00419439                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00419441                 mov     [esp+9Ch+var_90], 0
.text:00419449                 call    sub_41B300
.text:0041944E                 mov     [esp+9Ch+Str], eax
.text:00419451                 mov     ebx, eax
.text:00419453                 mov     esi, edx
.text:00419455                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0041945D                 mov     [esp+9Ch+var_90], 0
.text:00419465                 mov     [esp+9Ch+OpenFlag], edx
.text:00419469                 call    sub_41B420
.text:0041946E                 movzx   edx, ds:byte_4191D0[eax]
.text:00419475                 mov     [ebp+3], dl
.text:00419478                 mov     [esp+9Ch+Str], ebx
.text:0041947B                 mov     [esp+9Ch+OpenFlag], esi
.text:0041947F                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00419487                 mov     [esp+9Ch+var_90], 0
.text:0041948F                 call    sub_41B300
.text:00419494                 mov     [esp+9Ch+Str], eax
.text:00419497                 mov     ebx, eax
.text:00419499                 mov     esi, edx
.text:0041949B                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:004194A3                 mov     [esp+9Ch+var_90], 0
.text:004194AB                 mov     [esp+9Ch+OpenFlag], edx
.text:004194AF                 call    sub_41B420
.text:004194B4                 movzx   ecx, ds:byte_4191D0[eax]
.text:004194BB                 mov     [ebp+4], cl
.text:004194BE                 mov     [esp+9Ch+Str], ebx
.text:004194C1                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:004194C9                 mov     [esp+9Ch+var_90], 0
.text:004194D1                 mov     [esp+9Ch+OpenFlag], esi
.text:004194D5                 call    sub_41B300
.text:004194DA                 mov     [esp+9Ch+Str], eax
.text:004194DD                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:004194E5                 mov     [esp+9Ch+var_90], 0
.text:004194ED                 mov     [esp+9Ch+OpenFlag], edx
.text:004194F1                 call    sub_41B420
.text:004194F6                 movzx   ebx, ds:byte_4191D0[eax]
.text:004194FD                 mov     [ebp+5], bl
.text:00419500                 cmp     [esp+9Ch+arg_4], 1
.text:00419508                 jz      loc_419657
.text:0041950E                 cmp     [esp+9Ch+arg_4], 1
.text:00419516                 jle     loc_419620
.text:0041951C                 cmp     [esp+9Ch+arg_4], 2
.text:00419524                 jz      loc_4195F7
.text:0041952A                 cmp     [esp+9Ch+arg_4], 3
.text:00419532                 jz      loc_4195B4
.text:00419538
.text:00419538 loc_419538:                             ; CODE XREF: sub_4192C0+369↓j
.text:00419538                 mov     ebx, offset aInvalidKindInG ; "invalid KIND in __gen_tempname"
.text:0041953D                 test    ebx, ebx
.text:0041953F                 jnz     loc_4196BD
.text:00419545
.text:00419545 loc_419545:                             ; CODE XREF: sub_4192C0+354↓j
.text:00419545                 mov     eax, [esp+9Ch+var_88]
.text:00419549                 test    eax, eax
.text:0041954B                 jns     short loc_4195A0
.text:0041954D                 call    _errno
.text:00419552                 cmp     dword ptr [eax], 11h
.text:00419555                 jnz     loc_419318
.text:0041955B
.text:0041955B loc_41955B:                             ; CODE XREF: sub_4192C0+315↓j
.text:0041955B                 mov     edx, ds:dword_41E7F0
.text:00419561                 mov     ecx, ds:dword_41E7F4
.text:00419567                 add     edx, 1E61h
.text:0041956D                 adc     ecx, 0
.text:00419570                 mov     ebx, edx
.text:00419572                 inc     edi
.text:00419573                 mov     ds:dword_41E7F0, edx
.text:00419579                 cmp     edi, 3A2F8h
.text:0041957F                 mov     esi, ecx
.text:00419581                 mov     ds:dword_41E7F4, ecx
.text:00419587                 jb      loc_419380
.text:0041958D                 call    _errno
.text:00419592                 mov     dword ptr [eax], 11h
.text:00419598                 jmp     loc_419318
.text:00419598 ; ---------------------------------------------------------------------------
.text:0041959D                 align 10h
.text:004195A0
.text:004195A0 loc_4195A0:                             ; CODE XREF: sub_4192C0+28B↑j
.text:004195A0                 call    _errno
.text:004195A5                 mov     esi, [esp+9Ch+var_8C]
.text:004195A9                 mov     [eax], esi
.text:004195AB                 mov     eax, [esp+9Ch+var_88]
.text:004195AF                 jmp     loc_41931D
.text:004195B4 ; ---------------------------------------------------------------------------
.text:004195B4
.text:004195B4 loc_4195B4:                             ; CODE XREF: sub_4192C0+272↑j
.text:004195B4                 mov     [esp+9Ch+Str], 0 ; LPCSTR
.text:004195BB                 mov     ecx, [esp+9Ch+FileName]
.text:004195C2                 lea     esi, [esp+9Ch+var_7C]
.text:004195C6                 mov     [esp+9Ch+var_94], esi ; int
.text:004195CA                 mov     [esp+9Ch+OpenFlag], ecx ; int
.text:004195CE                 call    sub_4197F0
.text:004195D3                 test    eax, eax
.text:004195D5                 jns     short loc_41955B
.text:004195D7                 call    _errno
.text:004195DC                 cmp     dword ptr [eax], 2
.text:004195DF                 jnz     loc_419318
.text:004195E5                 call    _errno
.text:004195EA                 mov     ebx, [esp+9Ch+var_8C]
.text:004195EE                 mov     [eax], ebx
.text:004195F0                 xor     eax, eax
.text:004195F2                 jmp     loc_41931D
.text:004195F7 ; ---------------------------------------------------------------------------
.text:004195F7
.text:004195F7 loc_4195F7:                             ; CODE XREF: sub_4192C0+264↑j
.text:004195F7                 mov     [esp+9Ch+OpenFlag], 1C0h ; AccessMode
.text:004195FF                 mov     edx, [esp+9Ch+FileName]
.text:00419606                 mov     [esp+9Ch+Str], edx ; LPCSTR
.text:00419609                 call    sub_4196F0
.text:0041960E                 mov     esi, esi
.text:00419610
.text:00419610 loc_419610:                             ; CODE XREF: sub_4192C0+395↓j
.text:00419610                 mov     [esp+9Ch+var_88], eax
.text:00419614                 jmp     loc_419545
.text:00419614 ; ---------------------------------------------------------------------------
.text:00419619                 align 10h
.text:00419620
.text:00419620 loc_419620:                             ; CODE XREF: sub_4192C0+256↑j
.text:00419620                 mov     eax, [esp+9Ch+arg_4]
.text:00419627                 test    eax, eax
.text:00419629                 jnz     loc_419538
.text:0041962F                 mov     [esp+9Ch+var_94], 180h
.text:00419637                 mov     esi, [esp+9Ch+FileName]
.text:0041963E                 mov     [esp+9Ch+OpenFlag], 8502h ; OpenFlag
.text:00419646                 mov     [esp+9Ch+Str], esi ; FileName
.text:00419649                 lea     esi, [esi+0]
.text:00419650
.text:00419650 loc_419650:                             ; CODE XREF: sub_4192C0+3B1↓j
.text:00419650                 call    _open
.text:00419655                 jmp     short loc_419610
.text:00419657 ; ---------------------------------------------------------------------------
.text:00419657
.text:00419657 loc_419657:                             ; CODE XREF: sub_4192C0+248↑j
.text:00419657                 mov     [esp+9Ch+var_94], 180h
.text:0041965F                 mov     ebx, [esp+9Ch+FileName]
.text:00419666                 mov     [esp+9Ch+OpenFlag], 8502h
.text:0041966E                 mov     [esp+9Ch+Str], ebx
.text:00419671                 jmp     short loc_419650
.text:00419673 ; ---------------------------------------------------------------------------
.text:00419673
.text:00419673 loc_419673:                             ; CODE XREF: sub_4192C0+78↑j
.text:00419673                 mov     [esp+9Ch+OpenFlag], 0
.text:0041967B                 lea     ebx, [esp+9Ch+var_84]
.text:0041967F                 mov     [esp+9Ch+Str], ebx
.text:00419682                 call    sub_419770
.text:00419687                 mov     edi, [esp+9Ch+var_80]
.text:0041968B                 mov     edx, [esp+9Ch+var_84]
.text:0041968F                 mov     ecx, edi
.text:00419691                 mov     ebx, edi
.text:00419693                 shl     ecx, 10h
.text:00419696                 sar     ebx, 1Fh
.text:00419699                 shld    ebx, edi, 10h
.text:0041969D                 mov     esi, edx
.text:0041969F                 mov     edi, edx
.text:004196A1                 mov     edx, ecx
.text:004196A3                 sar     edi, 1Fh
.text:004196A6                 xor     edx, esi
.text:004196A8                 mov     ds:dword_41E7F0, edx
.text:004196AE                 mov     esi, ebx
.text:004196B0                 xor     esi, edi
.text:004196B2                 mov     ds:dword_41E7F4, esi
.text:004196B8                 jmp     loc_41933E
.text:004196BD ; ---------------------------------------------------------------------------
.text:004196BD
.text:004196BD loc_4196BD:                             ; CODE XREF: sub_4192C0+27F↑j
.text:004196BD                 mov     [esp+9Ch+var_94], 151h
.text:004196C5                 mov     [esp+9Ch+OpenFlag], offset aLibc05SrcStdio ; "../../libc-0.5-src/stdio-common/tempnam"...
.text:004196CD                 mov     [esp+9Ch+Str], offset aInvalidKindInG_0 ; "! \"invalid KIND in __gen_tempname\""
.text:004196D4                 call    _assert
.text:004196D4 sub_4192C0      endp
.text:004196D4
.text:004196D4 ; ---------------------------------------------------------------------------
.text:004196D9                 db 17h dup(90h)
.text:004196F0
.text:004196F0 ; =============== S U B R O U T I N E =======================================
.text:004196F0
.text:004196F0
.text:004196F0 ; int __cdecl sub_4196F0(LPCSTR, int AccessMode)
.text:004196F0 sub_4196F0      proc near               ; CODE XREF: sub_4192C0+349↑p
.text:004196F0
.text:004196F0 lpPathName      = dword ptr -1Ch
.text:004196F0 lpSecurityAttributes= dword ptr -18h
.text:004196F0 var_8           = dword ptr -8
.text:004196F0 var_4           = dword ptr -4
.text:004196F0 arg_0           = dword ptr  4
.text:004196F0 AccessMode      = dword ptr  8
.text:004196F0
.text:004196F0                 sub     esp, 1Ch
.text:004196F3                 mov     [esp+1Ch+var_8], ebx
.text:004196F7                 mov     ebx, [esp+1Ch+arg_0]
.text:004196FB                 mov     [esp+1Ch+var_4], esi
.text:004196FF                 mov     esi, [esp+1Ch+AccessMode]
.text:00419703                 test    ebx, ebx
.text:00419705                 jz      short loc_419755
.text:00419707                 mov     [esp+1Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:0041970F                 mov     [esp+1Ch+lpPathName], ebx ; lpPathName
.text:00419712                 call    CreateDirectoryA
.text:00419717                 sub     esp, 8
.text:0041971A                 test    eax, eax
.text:0041971C                 jz      short loc_419736
.text:0041971E                 mov     [esp+1Ch+AccessMode], esi ; AccessMode
.text:00419722                 mov     esi, [esp+1Ch+var_4]
.text:00419726                 mov     [esp+1Ch+arg_0], ebx ; FileName
.text:0041972A                 mov     ebx, [esp+1Ch+var_8]
.text:0041972E                 add     esp, 1Ch
.text:00419731                 jmp     _chmod
.text:00419736 ; ---------------------------------------------------------------------------
.text:00419736
.text:00419736 loc_419736:                             ; CODE XREF: sub_4196F0+2C↑j
.text:00419736                 call    sub_40E100
.text:0041973B                 mov     esi, eax
.text:0041973D                 call    _errno
.text:00419742                 mov     [eax], esi
.text:00419744
.text:00419744 loc_419744:                             ; CODE XREF: sub_4196F0+70↓j
.text:00419744                 mov     ebx, [esp+1Ch+var_8]
.text:00419748                 mov     eax, 0FFFFFFFFh
.text:0041974D                 mov     esi, [esp+1Ch+var_4]
.text:00419751                 add     esp, 1Ch
.text:00419754                 retn
.text:00419755 ; ---------------------------------------------------------------------------
.text:00419755
.text:00419755 loc_419755:                             ; CODE XREF: sub_4196F0+15↑j
.text:00419755                 call    _errno
.text:0041975A                 mov     dword ptr [eax], 16h
.text:00419760                 jmp     short loc_419744
.text:00419760 sub_4196F0      endp
.text:00419760
.text:00419760 ; ---------------------------------------------------------------------------
.text:00419762                 align 10h
.text:00419770
.text:00419770 ; =============== S U B R O U T I N E =======================================
.text:00419770
.text:00419770
.text:00419770 sub_419770      proc near               ; CODE XREF: sub_4192C0+3C2↑p
.text:00419770
.text:00419770 var_1C          = dword ptr -1Ch
.text:00419770 var_18          = dword ptr -18h
.text:00419770 var_C           = dword ptr -0Ch
.text:00419770 var_8           = dword ptr -8
.text:00419770 var_4           = dword ptr -4
.text:00419770 arg_0           = dword ptr  4
.text:00419770 arg_4           = dword ptr  8
.text:00419770
.text:00419770                 sub     esp, 1Ch
.text:00419773                 mov     edx, [esp+1Ch+arg_4]
.text:00419777                 mov     [esp+1Ch+var_4], ebx
.text:0041977B                 mov     ebx, [esp+1Ch+arg_0]
.text:0041977F                 mov     [esp+1Ch+var_18], edx
.text:00419783                 lea     edx, [esp+1Ch+var_C]
.text:00419787                 mov     [esp+1Ch+var_1C], edx
.text:0041978A                 call    sub_419900
.text:0041978F                 test    eax, eax
.text:00419791                 mov     edx, 0FFFFFFFFh
.text:00419796                 jnz     short loc_4197BA
.text:00419798                 mov     ecx, [esp+1Ch+var_C]
.text:0041979C                 mov     edx, 10624DD3h
.text:004197A1                 mov     [ebx], ecx
.text:004197A3                 mov     ecx, [esp+1Ch+var_8]
.text:004197A7                 mov     eax, ecx
.text:004197A9                 imul    edx
.text:004197AB                 mov     eax, ecx
.text:004197AD                 sar     eax, 1Fh
.text:004197B0                 sar     edx, 6
.text:004197B3                 sub     edx, eax
.text:004197B5                 mov     [ebx+4], edx
.text:004197B8                 xor     edx, edx
.text:004197BA
.text:004197BA loc_4197BA:                             ; CODE XREF: sub_419770+26↑j
.text:004197BA                 mov     ebx, [esp+1Ch+var_4]
.text:004197BE                 mov     eax, edx
.text:004197C0                 add     esp, 1Ch
.text:004197C3                 retn
.text:004197C3 sub_419770      endp
.text:004197C3
.text:004197C3 ; ---------------------------------------------------------------------------
.text:004197C4                 align 10h
.text:004197D0
.text:004197D0 ; =============== S U B R O U T I N E =======================================
.text:004197D0
.text:004197D0
.text:004197D0 sub_4197D0      proc near               ; CODE XREF: sub_418F40+1A7↑p
.text:004197D0                                         ; sub_418F40+237↑p ...
.text:004197D0                 mov     edx, ds:dword_41E800
.text:004197D6                 test    edx, edx
.text:004197D8                 jnz     short loc_4197E0
.text:004197DA                 jmp     getenv
.text:004197DA ; ---------------------------------------------------------------------------
.text:004197DF                 align 10h
.text:004197E0
.text:004197E0 loc_4197E0:                             ; CODE XREF: sub_4197D0+8↑j
.text:004197E0                 xor     eax, eax
.text:004197E2                 retn
.text:004197E2 sub_4197D0      endp
.text:004197E2
.text:004197E2 ; ---------------------------------------------------------------------------
.text:004197E3                 align 10h
.text:004197F0
.text:004197F0 ; =============== S U B R O U T I N E =======================================
.text:004197F0
.text:004197F0
.text:004197F0 ; int __cdecl sub_4197F0(LPCSTR, int, int)
.text:004197F0 sub_4197F0      proc near               ; CODE XREF: sub_4192C0+30E↑p
.text:004197F0                                         ; sub_419840+42↓p ...
.text:004197F0
.text:004197F0 lpFileName      = dword ptr -2Ch
.text:004197F0 dwDesiredAccess = dword ptr -28h
.text:004197F0 dwShareMode     = dword ptr -24h
.text:004197F0 lpSecurityAttributes= dword ptr -20h
.text:004197F0 dwCreationDisposition= dword ptr -1Ch
.text:004197F0 dwFlagsAndAttributes= dword ptr -18h
.text:004197F0 hTemplateFile   = dword ptr -14h
.text:004197F0 var_10          = dword ptr -10h
.text:004197F0 var_C           = dword ptr -0Ch
.text:004197F0 var_8           = dword ptr -8
.text:004197F0 var_4           = dword ptr -4
.text:004197F0 arg_0           = dword ptr  4
.text:004197F0 arg_4           = dword ptr  8
.text:004197F0 arg_8           = dword ptr  0Ch
.text:004197F0
.text:004197F0 ; FUNCTION CHUNK AT .text:0040C760 SIZE 0000013A BYTES
.text:004197F0
.text:004197F0                 sub     esp, 0Ch
.text:004197F3                 mov     ecx, [esp+0Ch+arg_0]
.text:004197F7                 mov     edx, [esp+0Ch+arg_4]
.text:004197FB                 mov     eax, [esp+0Ch+arg_8]
.text:004197FF                 test    ecx, ecx
.text:00419801                 jnz     short loc_419820
.text:00419803                 test    edx, edx
.text:00419805                 jz      short loc_419820
.text:00419807                 test    eax, eax
.text:00419809                 jz      short loc_419820
.text:0041980B                 mov     [esp+0Ch+arg_4], eax
.text:0041980F                 mov     [esp+0Ch+arg_0], edx
.text:00419813                 add     esp, 0Ch
.text:00419816                 jmp     loc_40C760
.text:00419816 ; ---------------------------------------------------------------------------
.text:0041981B                 align 10h
.text:00419820
.text:00419820 loc_419820:                             ; CODE XREF: sub_4197F0+11↑j
.text:00419820                                         ; sub_4197F0+15↑j ...
.text:00419820                 call    _errno
.text:00419825                 mov     dword ptr [eax], 16h
.text:0041982B                 mov     eax, 0FFFFFFFFh
.text:00419830                 add     esp, 0Ch
.text:00419833                 retn
.text:00419833 sub_4197F0      endp
.text:00419833
.text:00419833 ; ---------------------------------------------------------------------------
.text:00419834                 align 10h
.text:00419840
.text:00419840 ; =============== S U B R O U T I N E =======================================
.text:00419840
.text:00419840
.text:00419840 ; int __cdecl sub_419840(LPCSTR, char *, int)
.text:00419840 sub_419840      proc near               ; CODE XREF: sub_418F40+104↑p
.text:00419840                                         ; sub_418F40+158↑p ...
.text:00419840
.text:00419840 var_13C         = dword ptr -13Ch
.text:00419840 lpString1       = dword ptr -138h
.text:00419840 var_134         = dword ptr -134h
.text:00419840 String1         = byte ptr -12Ch
.text:00419840 var_10          = dword ptr -10h
.text:00419840 var_C           = dword ptr -0Ch
.text:00419840 var_8           = dword ptr -8
.text:00419840 var_4           = dword ptr -4
.text:00419840 arg_0           = dword ptr  4
.text:00419840 arg_4           = dword ptr  8
.text:00419840 arg_8           = dword ptr  0Ch
.text:00419840
.text:00419840                 sub     esp, 13Ch
.text:00419846                 mov     [esp+13Ch+var_10], ebx
.text:0041984D                 mov     ebx, [esp+13Ch+arg_8]
.text:00419854                 mov     [esp+13Ch+var_C], esi
.text:0041985B                 mov     esi, [esp+13Ch+arg_4]
.text:00419862                 mov     [esp+13Ch+var_8], edi
.text:00419869                 mov     edi, [esp+13Ch+arg_0]
.text:00419870                 mov     [esp+13Ch+var_4], ebp
.text:00419877                 mov     [esp+13Ch+var_134], ebx ; int
.text:0041987B                 mov     [esp+13Ch+lpString1], esi ; int
.text:0041987F                 mov     [esp+13Ch+var_13C], edi ; LPCSTR
.text:00419882                 call    sub_4197F0
.text:00419887                 cmp     eax, 0FFFFFFFFh
.text:0041988A                 mov     edx, eax
.text:0041988C                 jz      short loc_41989E
.text:0041988E                 mov     ecx, [ebx]
.text:00419890                 and     ecx, 0F000h
.text:00419896                 cmp     ecx, 0A000h
.text:0041989C                 jz      short loc_4198C3
.text:0041989E
.text:0041989E loc_41989E:                             ; CODE XREF: sub_419840+4C↑j
.text:0041989E                                         ; sub_419840+A1↓j ...
.text:0041989E                 mov     ebx, [esp+13Ch+var_10]
.text:004198A5                 mov     eax, edx
.text:004198A7                 mov     esi, [esp+13Ch+var_C]
.text:004198AE                 mov     edi, [esp+13Ch+var_8]
.text:004198B5                 mov     ebp, [esp+13Ch+var_4]
.text:004198BC                 add     esp, 13Ch
.text:004198C2                 retn
.text:004198C3 ; ---------------------------------------------------------------------------
.text:004198C3
.text:004198C3 loc_4198C3:                             ; CODE XREF: sub_419840+5C↑j
.text:004198C3                 mov     [esp+13Ch+var_134], 104h
.text:004198CB                 lea     ebp, [esp+13Ch+String1]
.text:004198CF                 mov     [esp+13Ch+lpString1], ebp ; lpString1
.text:004198D3                 mov     [esp+13Ch+var_13C], esi ; char *
.text:004198D6                 call    sub_419BC0
.text:004198DB                 inc     eax
.text:004198DC                 mov     edx, 0FFFFFFFFh
.text:004198E1                 jz      short loc_41989E
.text:004198E3                 mov     [esp+13Ch+var_134], ebx ; int
.text:004198E7                 mov     [esp+13Ch+lpString1], ebp ; int
.text:004198EB                 mov     [esp+13Ch+var_13C], edi ; LPCSTR
.text:004198EE                 call    sub_4197F0
.text:004198F3                 mov     edx, eax
.text:004198F5                 jmp     short loc_41989E
.text:004198F5 sub_419840      endp
.text:004198F5
.text:004198F5 ; ---------------------------------------------------------------------------
.text:004198F7                 align 10h
.text:00419900
.text:00419900 ; =============== S U B R O U T I N E =======================================
.text:00419900
.text:00419900
.text:00419900 sub_419900      proc near               ; CODE XREF: sub_419770+1A↑p
.text:00419900
.text:00419900 lpTimeZoneInformation= dword ptr -0DCh
.text:00419900 var_D8          = dword ptr -0D8h
.text:00419900 var_D4          = dword ptr -0D4h
.text:00419900 var_D0          = dword ptr -0D0h
.text:00419900 SystemTimeAsFileTime= _FILETIME ptr -0C4h
.text:00419900 TimeZoneInformation= _TIME_ZONE_INFORMATION ptr -0BCh
.text:00419900 arg_0           = dword ptr  4
.text:00419900 arg_4           = dword ptr  8
.text:00419900
.text:00419900                 push    edi
.text:00419901                 push    esi
.text:00419902                 push    ebx
.text:00419903                 sub     esp, 0D0h
.text:00419909                 mov     ebx, [esp+0DCh+arg_4]
.text:00419910                 mov     edi, [esp+0DCh+arg_0]
.text:00419917                 test    ebx, ebx
.text:00419919                 jz      short loc_419944
.text:0041991B                 lea     edx, [esp+0DCh+TimeZoneInformation]
.text:0041991F                 mov     [esp+0DCh+lpTimeZoneInformation], edx ; lpTimeZoneInformation
.text:00419922                 call    GetTimeZoneInformation
.text:00419927                 sub     esp, 4
.text:0041992A                 cmp     eax, 0FFFFFFFFh
.text:0041992D                 jz      loc_4199C5
.text:00419933                 xor     ecx, ecx
.text:00419935                 mov     esi, [esp+0DCh+TimeZoneInformation.Bias]
.text:00419939                 cmp     eax, 2
.text:0041993C                 setz    cl
.text:0041993F                 mov     [ebx], esi
.text:00419941                 mov     [ebx+4], ecx
.text:00419944
.text:00419944 loc_419944:                             ; CODE XREF: sub_419900+19↑j
.text:00419944                                         ; sub_419900+E0↓j
.text:00419944                 test    edi, edi
.text:00419946                 jz      short loc_4199B9
.text:00419948                 lea     ecx, [esp+0DCh+SystemTimeAsFileTime]
.text:0041994C                 mov     [esp+0DCh+lpTimeZoneInformation], ecx ; lpSystemTimeAsFileTime
.text:0041994F                 call    GetSystemTimeAsFileTime
.text:00419954                 sub     esp, 4
.text:00419957                 mov     ebx, [esp+0DCh+SystemTimeAsFileTime.dwLowDateTime]
.text:0041995B                 mov     [esp+0DCh+var_D4], 989680h
.text:00419963                 mov     esi, [esp+0DCh+SystemTimeAsFileTime.dwHighDateTime]
.text:00419967                 mov     [esp+0DCh+var_D0], 0
.text:0041996F                 add     ebx, 2AC18000h
.text:00419975                 adc     esi, 0FE624E21h
.text:0041997B                 mov     [esp+0DCh+SystemTimeAsFileTime.dwLowDateTime], ebx
.text:0041997F                 mov     [esp+0DCh+lpTimeZoneInformation], ebx
.text:00419982                 mov     [esp+0DCh+SystemTimeAsFileTime.dwHighDateTime], esi
.text:00419986                 mov     [esp+0DCh+var_D8], esi
.text:0041998A                 call    sub_41B300
.text:0041998F                 mov     [edi], eax
.text:00419991                 mov     [esp+0DCh+lpTimeZoneInformation], ebx
.text:00419994                 mov     [esp+0DCh+var_D4], 989680h
.text:0041999C                 mov     [esp+0DCh+var_D0], 0
.text:004199A4                 mov     [esp+0DCh+var_D8], esi
.text:004199A8                 call    sub_41B420
.text:004199AD                 lea     ebx, [eax+eax*4]
.text:004199B0                 lea     edx, [ebx+ebx*4]
.text:004199B3                 shl     edx, 2
.text:004199B6                 mov     [edi+4], edx
.text:004199B9
.text:004199B9 loc_4199B9:                             ; CODE XREF: sub_419900+46↑j
.text:004199B9                 add     esp, 0D0h
.text:004199BF                 xor     eax, eax
.text:004199C1                 pop     ebx
.text:004199C2                 pop     esi
.text:004199C3                 pop     edi
.text:004199C4                 retn
.text:004199C5 ; ---------------------------------------------------------------------------
.text:004199C5
.text:004199C5 loc_4199C5:                             ; CODE XREF: sub_419900+2D↑j
.text:004199C5                 mov     dword ptr [ebx], 0
.text:004199CB                 mov     dword ptr [ebx+4], 0
.text:004199D2                 call    sub_40E100
.text:004199D7                 mov     esi, eax
.text:004199D9                 call    _errno
.text:004199DE                 mov     [eax], esi
.text:004199E0                 jmp     loc_419944
.text:004199E0 sub_419900      endp
.text:004199E0
.text:004199E0 ; ---------------------------------------------------------------------------
.text:004199E5                 align 10h
.text:004199F0                 sub     esp, 0Ch
.text:004199F3                 mov     [esp+4], ebx
.text:004199F7                 mov     [esp+8], esi
.text:004199FB                 xor     esi, esi
.text:004199FD                 call    sub_419CD0
.text:00419A02                 mov     ebx, eax
.text:00419A04                 call    sub_419CC0
.text:00419A09                 cmp     ebx, eax
.text:00419A0B                 jz      short loc_419A24
.text:00419A0D
.text:00419A0D loc_419A0D:                             ; CODE XREF: .text:00419A32↓j
.text:00419A0D                 mov     esi, 1
.text:00419A12
.text:00419A12 loc_419A12:                             ; CODE XREF: .text:00419A34↓j
.text:00419A12                 mov     ds:dword_41E800, esi
.text:00419A18                 mov     ebx, [esp+4]
.text:00419A1C                 mov     esi, [esp+8]
.text:00419A20                 add     esp, 0Ch
.text:00419A23                 retn
.text:00419A24 ; ---------------------------------------------------------------------------
.text:00419A24
.text:00419A24 loc_419A24:                             ; CODE XREF: .text:00419A0B↑j
.text:00419A24                 call    sub_419CB0
.text:00419A29                 mov     ebx, eax
.text:00419A2B                 call    sub_419CA0
.text:00419A30                 cmp     ebx, eax
.text:00419A32                 jnz     short loc_419A0D
.text:00419A34                 jmp     short loc_419A12
.text:00419A34 ; ---------------------------------------------------------------------------
.text:00419A36                 align 10h
.text:00419A40
.text:00419A40 ; =============== S U B R O U T I N E =======================================
.text:00419A40
.text:00419A40
.text:00419A40 ; int __cdecl sub_419A40(LPCCH lpMultiByteStr, LPSTR lpString1)
.text:00419A40 sub_419A40      proc near               ; CODE XREF: sub_419BC0+93↓p
.text:00419A40
.text:00419A40 pvReserved      = dword ptr -35Ch
.text:00419A40 pUnkOuter       = dword ptr -358h
.text:00419A40 dwClsContext    = dword ptr -354h
.text:00419A40 riid            = dword ptr -350h
.text:00419A40 ppv             = dword ptr -34Ch
.text:00419A40 cchWideChar     = dword ptr -348h
.text:00419A40 var_334         = byte ptr -334h
.text:00419A40 var_330         = dword ptr -330h
.text:00419A40 String2         = byte ptr -32Ch
.text:00419A40 WideCharStr     = word ptr -21Ch
.text:00419A40 lpMultiByteStr  = dword ptr  4
.text:00419A40 lpString1       = dword ptr  8
.text:00419A40
.text:00419A40                 push    edi
.text:00419A41                 push    esi
.text:00419A42                 push    ebx
.text:00419A43                 sub     esp, 350h
.text:00419A49                 mov     edi, [esp+35Ch+lpString1]
.text:00419A50                 mov     byte ptr [edi], 0
.text:00419A53                 mov     [esp+35Ch+pvReserved], 0 ; pvReserved
.text:00419A5A                 call    OleInitialize
.text:00419A5F                 sub     esp, 4
.text:00419A62                 cmp     eax, 1
.text:00419A65                 ja      loc_419B9F
.text:00419A6B                 mov     [esp+35Ch+riid], offset riid ; riid
.text:00419A73                 lea     ecx, [esp+35Ch+var_330]
.text:00419A77                 mov     [esp+35Ch+ppv], ecx ; ppv
.text:00419A7B                 mov     [esp+35Ch+dwClsContext], 1 ; dwClsContext
.text:00419A83                 mov     [esp+35Ch+pUnkOuter], 0 ; pUnkOuter
.text:00419A8B                 mov     [esp+35Ch+pvReserved], offset rclsid ; rclsid
.text:00419A92                 call    CoCreateInstance
.text:00419A97                 sub     esp, 14h
.text:00419A9A                 test    eax, eax
.text:00419A9C                 js      loc_419B9F
.text:00419AA2                 mov     ebx, [esp+35Ch+var_330]
.text:00419AA6                 lea     edx, [esp+35Ch+var_334]
.text:00419AAA                 mov     esi, [ebx]
.text:00419AAC                 mov     [esp+35Ch+dwClsContext], edx
.text:00419AB0                 mov     [esp+35Ch+pvReserved], ebx
.text:00419AB3                 xor     ebx, ebx
.text:00419AB5                 mov     [esp+35Ch+pUnkOuter], offset dword_41AAB0
.text:00419ABD                 call    dword ptr [esi]
.text:00419ABF                 sub     esp, 0Ch
.text:00419AC2                 lea     esi, [esp+35Ch+WideCharStr]
.text:00419AC9                 call    AreFileApisANSI
.text:00419ACE                 mov     [esp+35Ch+cchWideChar], 104h ; cchWideChar
.text:00419AD6                 test    eax, eax
.text:00419AD8                 mov     ecx, [esp+35Ch+lpMultiByteStr]
.text:00419ADF                 setz    bl
.text:00419AE2                 mov     [esp+35Ch+ppv], esi ; lpWideCharStr
.text:00419AE6                 mov     [esp+35Ch+riid], 0FFFFFFFFh ; cbMultiByte
.text:00419AEE                 mov     [esp+35Ch+dwClsContext], ecx ; lpMultiByteStr
.text:00419AF2                 mov     [esp+35Ch+pUnkOuter], 0 ; dwFlags
.text:00419AFA                 mov     [esp+35Ch+pvReserved], ebx ; CodePage
.text:00419AFD                 call    MultiByteToWideChar
.text:00419B02                 sub     esp, 18h
.text:00419B05                 test    eax, eax
.text:00419B07                 js      loc_419B9F
.text:00419B0D                 mov     edx, dword ptr [esp+35Ch+var_334]
.text:00419B11                 mov     ebx, [edx]
.text:00419B13                 mov     [esp+35Ch+dwClsContext], 0
.text:00419B1B                 mov     [esp+35Ch+pUnkOuter], esi
.text:00419B1F                 mov     [esp+35Ch+pvReserved], edx
.text:00419B22                 call    dword ptr [ebx+14h]
.text:00419B25                 sub     esp, 0Ch
.text:00419B28                 test    eax, eax
.text:00419B2A                 js      short loc_419B9F
.text:00419B2C                 mov     ebx, [esp+35Ch+var_330]
.text:00419B30                 lea     esi, [esp+35Ch+String2]
.text:00419B34                 mov     ecx, [ebx]
.text:00419B36                 mov     [esp+35Ch+pvReserved], ebx
.text:00419B39                 mov     [esp+35Ch+ppv], 0
.text:00419B41                 mov     [esp+35Ch+riid], 0
.text:00419B49                 mov     [esp+35Ch+dwClsContext], 104h
.text:00419B51                 mov     [esp+35Ch+pUnkOuter], esi
.text:00419B55                 call    dword ptr [ecx+0Ch]
.text:00419B58                 sub     esp, 14h
.text:00419B5B                 mov     ebx, eax
.text:00419B5D                 test    eax, eax
.text:00419B5F                 js      short loc_419B9F
.text:00419B61                 mov     [esp+35Ch+pUnkOuter], esi ; lpString2
.text:00419B65                 mov     [esp+35Ch+pvReserved], edi ; lpString1
.text:00419B68                 call    lstrcpyA
.text:00419B6D                 sub     esp, 8
.text:00419B70                 mov     edi, dword ptr [esp+35Ch+var_334]
.text:00419B74                 mov     ecx, [edi]
.text:00419B76                 mov     [esp+35Ch+pvReserved], edi
.text:00419B79                 call    dword ptr [ecx+8]
.text:00419B7C                 sub     esp, 4
.text:00419B7F                 mov     edx, [esp+35Ch+var_330]
.text:00419B83                 mov     esi, [edx]
.text:00419B85                 mov     [esp+35Ch+pvReserved], edx
.text:00419B88                 call    dword ptr [esi+8]
.text:00419B8B                 sub     esp, 4
.text:00419B8E                 call    CoUninitialize
.text:00419B93                 mov     eax, ebx
.text:00419B95
.text:00419B95 loc_419B95:                             ; CODE XREF: sub_419A40+177↓j
.text:00419B95                 add     esp, 350h
.text:00419B9B                 pop     ebx
.text:00419B9C                 pop     esi
.text:00419B9D                 pop     edi
.text:00419B9E                 retn
.text:00419B9F ; ---------------------------------------------------------------------------
.text:00419B9F
.text:00419B9F loc_419B9F:                             ; CODE XREF: sub_419A40+25↑j
.text:00419B9F                                         ; sub_419A40+5C↑j ...
.text:00419B9F                 call    sub_40E100
.text:00419BA4                 mov     edi, eax
.text:00419BA6                 call    _errno
.text:00419BAB                 mov     [eax], edi
.text:00419BAD                 call    CoUninitialize
.text:00419BB2                 mov     eax, 0FFFFFFFFh
.text:00419BB7                 jmp     short loc_419B95
.text:00419BB7 sub_419A40      endp
.text:00419BB7
.text:00419BB7 ; ---------------------------------------------------------------------------
.text:00419BB9 ; const char Source[]
.text:00419BB9 Source          db '.lnk',0             ; DATA XREF: sub_419BC0+53↓o
.text:00419BB9                                         ; sub_419BC0:loc_419C25↓o
.text:00419BBE                 align 10h
.text:00419BC0
.text:00419BC0 ; =============== S U B R O U T I N E =======================================
.text:00419BC0
.text:00419BC0
.text:00419BC0 ; int __cdecl sub_419BC0(char *, LPSTR lpString1)
.text:00419BC0 sub_419BC0      proc near               ; CODE XREF: sub_419840+96↑p
.text:00419BC0
.text:00419BC0 Str             = dword ptr -1Ch
.text:00419BC0 Source          = dword ptr -18h
.text:00419BC0 Destination     = dword ptr -14h
.text:00419BC0 arg_0           = dword ptr  4
.text:00419BC0 lpString1       = dword ptr  8
.text:00419BC0
.text:00419BC0                 push    ebp
.text:00419BC1                 push    edi
.text:00419BC2                 push    esi
.text:00419BC3                 push    ebx
.text:00419BC4                 sub     esp, 0Ch
.text:00419BC7                 mov     ebx, [esp+1Ch+arg_0]
.text:00419BCB                 mov     ebp, [esp+1Ch+lpString1]
.text:00419BCF                 mov     [esp+1Ch+Str], ebx ; Str
.text:00419BD2                 call    strlen
.text:00419BD7                 add     eax, 5
.text:00419BDA                 mov     [esp+1Ch+Str], eax ; Size
.text:00419BDD                 call    malloc
.text:00419BE2                 mov     [esp+1Ch+Destination], eax
.text:00419BE6                 test    eax, eax
.text:00419BE8                 jz      loc_419C90
.text:00419BEE                 mov     [esp+1Ch+Source], ebx ; Source
.text:00419BF2                 mov     [esp+1Ch+Str], eax ; Destination
.text:00419BF5                 call    strcpy
.text:00419BFA                 mov     [esp+1Ch+Source], 2Eh ; '.' ; Ch
.text:00419C02                 mov     eax, [esp+1Ch+Destination]
.text:00419C06                 mov     [esp+1Ch+Str], eax ; Str
.text:00419C09                 call    strrchr
.text:00419C0E                 test    eax, eax
.text:00419C10                 jz      short loc_419C25
.text:00419C12                 cld
.text:00419C13                 mov     ebx, offset Source ; ".lnk"
.text:00419C18                 mov     ecx, 5
.text:00419C1D                 mov     esi, eax
.text:00419C1F                 mov     edi, ebx
.text:00419C21                 repe cmpsb
.text:00419C23                 jz      short loc_419C39
.text:00419C25
.text:00419C25 loc_419C25:                             ; CODE XREF: sub_419BC0+50↑j
.text:00419C25                 mov     [esp+1Ch+Source], offset Source ; ".lnk"
.text:00419C2D                 mov     edx, [esp+1Ch+Destination]
.text:00419C31                 mov     [esp+1Ch+Str], edx ; Destination
.text:00419C34                 call    strcat
.text:00419C39
.text:00419C39 loc_419C39:                             ; CODE XREF: sub_419BC0+63↑j
.text:00419C39                 mov     [esp+1Ch+Str], 8001h ; uMode
.text:00419C40                 call    SetErrorMode
.text:00419C45                 sub     esp, 4
.text:00419C48                 mov     ebx, [esp+1Ch+Destination]
.text:00419C4C                 mov     [esp+1Ch+Source], ebp ; lpString1
.text:00419C50                 mov     [esp+1Ch+Str], ebx ; lpMultiByteStr
.text:00419C53                 call    sub_419A40
.text:00419C58                 mov     [esp+1Ch+Str], ebx ; Block
.text:00419C5B                 mov     esi, eax
.text:00419C5D                 call    free
.text:00419C62                 mov     [esp+1Ch+Str], 0 ; uMode
.text:00419C69                 call    SetErrorMode
.text:00419C6E                 sub     esp, 4
.text:00419C71                 mov     [esp+1Ch+Str], ebp
.text:00419C74                 call    sub_40CC70
.text:00419C79                 inc     esi
.text:00419C7A                 jz      short loc_419C90
.text:00419C7C                 mov     [esp+1Ch+arg_0], ebp
.text:00419C80                 add     esp, 0Ch
.text:00419C83                 pop     ebx
.text:00419C84                 pop     esi
.text:00419C85                 pop     edi
.text:00419C86                 pop     ebp
.text:00419C87                 jmp     strlen
.text:00419C87 ; ---------------------------------------------------------------------------
.text:00419C8C                 align 10h
.text:00419C90
.text:00419C90 loc_419C90:                             ; CODE XREF: sub_419BC0+28↑j
.text:00419C90                                         ; sub_419BC0+BA↑j
.text:00419C90                 add     esp, 0Ch
.text:00419C93                 mov     eax, 0FFFFFFFFh
.text:00419C98                 pop     ebx
.text:00419C99                 pop     esi
.text:00419C9A                 pop     edi
.text:00419C9B                 pop     ebp
.text:00419C9C                 retn
.text:00419C9C sub_419BC0      endp
.text:00419C9C
.text:00419C9C ; ---------------------------------------------------------------------------
.text:00419C9D                 align 10h
.text:00419CA0
.text:00419CA0 ; =============== S U B R O U T I N E =======================================
.text:00419CA0
.text:00419CA0
.text:00419CA0 sub_419CA0      proc near               ; CODE XREF: .text:00419A2B↑p
.text:00419CA0                 xor     eax, eax
.text:00419CA2                 retn
.text:00419CA2 sub_419CA0      endp
.text:00419CA2
.text:00419CA2 ; ---------------------------------------------------------------------------
.text:00419CA3                 align 10h
.text:00419CB0
.text:00419CB0 ; =============== S U B R O U T I N E =======================================
.text:00419CB0
.text:00419CB0
.text:00419CB0 sub_419CB0      proc near               ; CODE XREF: .text:loc_419A24↑p
.text:00419CB0                 xor     eax, eax
.text:00419CB2                 retn
.text:00419CB2 sub_419CB0      endp
.text:00419CB2
.text:00419CB2 ; ---------------------------------------------------------------------------
.text:00419CB3                 align 10h
.text:00419CC0
.text:00419CC0 ; =============== S U B R O U T I N E =======================================
.text:00419CC0
.text:00419CC0
.text:00419CC0 sub_419CC0      proc near               ; CODE XREF: .text:00419A04↑p
.text:00419CC0                 xor     eax, eax
.text:00419CC2                 retn
.text:00419CC2 sub_419CC0      endp
.text:00419CC2
.text:00419CC2 ; ---------------------------------------------------------------------------
.text:00419CC3                 align 10h
.text:00419CD0
.text:00419CD0 ; =============== S U B R O U T I N E =======================================
.text:00419CD0
.text:00419CD0
.text:00419CD0 sub_419CD0      proc near               ; CODE XREF: .text:004199FD↑p
.text:00419CD0                 xor     eax, eax
.text:00419CD2                 retn
.text:00419CD2 sub_419CD0      endp
.text:00419CD2
.text:00419CD2 ; ---------------------------------------------------------------------------
.text:00419CD3                 align 10h
.text:00419CE0
.text:00419CE0 ; =============== S U B R O U T I N E =======================================
.text:00419CE0
.text:00419CE0 ; Attributes: thunk
.text:00419CE0
.text:00419CE0 ; HRESULT __stdcall OleInitialize(LPVOID pvReserved)
.text:00419CE0 OleInitialize   proc near               ; CODE XREF: sub_419A40+1A↑p
.text:00419CE0
.text:00419CE0 pvReserved      = dword ptr  4
.text:00419CE0
.text:00419CE0                 jmp     ds:__imp_OleInitialize
.text:00419CE0 OleInitialize   endp
.text:00419CE0
.text:00419CE0 ; ---------------------------------------------------------------------------
.text:00419CE6                 align 10h
.text:00419CF0
.text:00419CF0 ; =============== S U B R O U T I N E =======================================
.text:00419CF0
.text:00419CF0 ; Attributes: thunk
.text:00419CF0
.text:00419CF0 ; HRESULT __stdcall CoCreateInstance(const IID *const rclsid, LPUNKNOWN pUnkOuter, DWORD dwClsContext, const IID *const riid, LPVOID *ppv)
.text:00419CF0 CoCreateInstance proc near              ; CODE XREF: sub_419A40+52↑p
.text:00419CF0
.text:00419CF0 rclsid          = dword ptr  4
.text:00419CF0 pUnkOuter       = dword ptr  8
.text:00419CF0 dwClsContext    = dword ptr  0Ch
.text:00419CF0 riid            = dword ptr  10h
.text:00419CF0 ppv             = dword ptr  14h
.text:00419CF0
.text:00419CF0                 jmp     ds:__imp_CoCreateInstance
.text:00419CF0 CoCreateInstance endp
.text:00419CF0
.text:00419CF0 ; ---------------------------------------------------------------------------
.text:00419CF6                 align 10h
.text:00419D00
.text:00419D00 ; =============== S U B R O U T I N E =======================================
.text:00419D00
.text:00419D00 ; Attributes: thunk
.text:00419D00
.text:00419D00 ; void __stdcall CoUninitialize()
.text:00419D00 CoUninitialize  proc near               ; CODE XREF: sub_419A40+14E↑p
.text:00419D00                                         ; sub_419A40+16D↑p
.text:00419D00                 jmp     ds:__imp_CoUninitialize
.text:00419D00 CoUninitialize  endp
.text:00419D00
.text:00419D00 ; ---------------------------------------------------------------------------
.text:00419D06                 align 10h
.text:00419D10                 add     al, 0BAh ; 'º'
.text:00419D12                 retf
.text:00419D12 ; ---------------------------------------------------------------------------
.text:00419D13                 db 7Eh
.text:00419D14                 dd 11CF2D97h, 0AA0029A2h, 52733D00h, 40FC6ED4h, 11CF2438h
.text:00419D14                 dd 8DBA3h, 225F136h, 40FC6ED8h, 11CF2438h, 8DBA3h, 225F136h
.text:00419D14                 dd 40FC6ED3h, 11CF2438h, 8DBA3h, 225F136h, 0DE86A58h, 11CF2BAAh
.text:00419D14                 dd 0AA0029A2h, 52733D00h, 40FC6ED6h, 11CF2438h, 8DBA3h
.text:00419D14                 dd 225F136h, 40FC6ED7h, 11CF2438h, 8DBA3h, 225F136h, 0DE86A56h
.text:00419D14                 dd 11CF2BAAh, 0AA0029A2h, 52733D00h, 0DE86A55h, 11CF2BAAh
.text:00419D14                 dd 0AA0029A2h, 52733D00h, 0DE86A51h, 11CF2BAAh, 0AA0029A2h
.text:00419D14                 dd 52733D00h, 0DE86A57h, 11CF2BAAh, 0AA0029A2h, 52733D00h
.text:00419D14                 dd 0DE86A52h, 11CF2BAAh, 0AA0029A2h, 52733D00h, 0DE86A54h
.text:00419D14                 dd 11CF2BAAh, 0AA0029A2h, 52733D00h, 0DE86A53h, 11CF2BAAh
.text:00419D14                 dd 0AA0029A2h, 52733D00h, 40FC6ED9h, 11CF2438h, 8DBA3h
.text:00419D14                 dd 225F136h, 40FC6ED5h, 11CF2438h, 8DBA3h, 225F136h, 0DE86A50h
.text:00419D14                 dd 11CF2BAAh, 0AA0029A2h, 52733D00h, 7DD95802h, 11CF9882h
.text:00419D14                 dd 0AA00A99Fh, 0C4426C00h, 7DD95801h, 11CF9882h, 0AA00A99Fh
.text:00419D14                 dd 0C4426C00h, 330h, 0
.text:00419E48                 dd 0C0h, 46000000h, 0BE35201h, 11CE8F91h, 0AA00E39Dh, 51B84B00h
.text:00419E48                 dd 0BE35200h, 11CE8F91h, 0AA00E39Dh, 51B84B00h, 0BE35202h
.text:00419E48                 dd 11CE8F91h, 0AA00E39Dh, 51B84B00h, 0FB8F0822h, 101B0164h
.text:00419E48                 dd 8ED84h, 13C72E2Bh, 332h, 0
.text:00419E98                 dd 0C0h, 46000000h, 79EAC9E7h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:00419E98                 dd 79EAC9E3h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9E4h
.text:00419E98                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9E2h, 11CEBAF9h
.text:00419E98                 dd 0AA00828Ch, 0BA94B00h, 79EAC9E5h, 11CEBAF9h, 0AA00828Ch
.text:00419E98                 dd 0BA94B00h, 1Bh, 0
.text:00419EF8                 dd 0C0h, 46000000h, 1Ch, 0
.text:00419F08                 dd 0C0h, 46000000h, 331h, 0
.text:00419F18                 dd 0C0h, 46000000h, 79EAC9E6h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:00419F18                 dd 312h, 0
.text:00419F38                 dd 0C0h, 46000000h, 30Eh, 0
.text:00419F48                 dd 0C0h, 46000000h, 30Dh, 0
.text:00419F58                 dd 0C0h, 46000000h, 311h, 0
.text:00419F68                 dd 0C0h, 46000000h, 313h, 0
.text:00419F78                 dd 0C0h, 46000000h, 30Ch, 0
.text:00419F88                 dd 0C0h, 46000000h, 30Fh, 0
.text:00419F98                 dd 0C0h, 46000000h, 310h, 0
.text:00419FA8                 dd 0C0h, 46000000h, 79EAC9F1h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:00419FA8                 dd 0FB8F0821h, 101B0164h, 8ED84h, 13C72E2Bh, 316h, 0
.text:00419FD8                 dd 0C0h, 46000000h, 319h, 0
.text:00419FE8                 dd 0C0h, 46000000h, 315h, 0
.text:00419FF8                 dd 0C0h, 46000000h, 316h, 0
.text:0041A008                 dd 0C0h, 46000000h, 315h, 0
.text:0041A018                 dd 0C0h, 46000000h, 2E005h, 0
.text:0041A028                 dd 0C0h, 46000000h, 0BE35203h, 11CE8F91h, 0AA00E39Dh, 51B84B00h
.text:0041A028                 dd 79EAC9D0h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9D1h
.text:0041A028                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 17h, 0
.text:0041A068                 dd 0C0h, 46000000h, 0BE35204h, 11CE8F91h, 0AA00E39Dh, 51B84B00h
.text:0041A068                 dd 79EAC9E0h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9E1h
.text:0041A068                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 8856F961h, 11D0340Ah
.text:0041A068                 dd 0C0006BA9h, 0A205D74Fh, 0EAB22AC2h, 11CF30C1h, 0EBA7h
.text:0041A068                 dd 0BAE5BC0h, 34A715A0h, 11D06587h, 20004A92h, 4DACC7AFh
.text:0041A068                 dd 96300DA0h, 11CF2BABh, 0AA0029A2h, 52733D00h, 0D5CDD502h
.text:0041A068                 dd 101B2E9Ch, 89793h, 0AEF92C2Bh, 0F29F85E0h, 10684FF9h
.text:0041A068                 dd 891ABh, 0D9B3272Bh, 0D5CDD505h, 101B2E9Ch, 89793h, 0AEF92C2Bh
.text:0041A068                 dd 6650430Ch, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504301h
.text:0041A068                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 6650430Fh, 101ABE0Fh
.text:0041A068                 dd 0AA00BB8Bh, 0AB0C3000h, 66504310h, 101ABE0Fh, 0AA00BB8Bh
.text:0041A068                 dd 0AB0C3000h, 6650430Dh, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:0041A068                 dd 6650430Eh, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504312h
.text:0041A068                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504311h, 101ABE0Fh
.text:0041A068                 dd 0AA00BB8Bh, 0AB0C3000h, 66504313h, 101ABE0Fh, 0AA00BB8Bh
.text:0041A068                 dd 0AB0C3000h, 66504300h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:0041A068                 dd 2DE81h, 0
.text:0041A1B8                 dd 0C0h, 46000000h, 4 dup(0)
.text:0041A1D0                 dd 6650430Bh, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 2DE80h
.text:0041A1D0                 dd 0
.text:0041A1E8                 dd 0C0h, 46000000h, 6650430Ah, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:0041A1E8                 dd 66504306h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504302h
.text:0041A1E8                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504308h, 101ABE0Fh
.text:0041A1E8                 dd 0AA00BB8Bh, 0AB0C3000h, 66504304h, 101ABE0Fh, 0AA00BB8Bh
.text:0041A1E8                 dd 0AB0C3000h, 66504307h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:0041A1E8                 dd 66504303h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504309h
.text:0041A1E8                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504305h, 101ABE0Fh
.text:0041A1E8                 dd 0AA00BB8Bh, 0AB0C3000h, 618736E0h, 11CF3C3Dh, 0AA000C81h
.text:0041A1E8                 dd 719B3800h, 1EA4DBF0h, 11CF3C3Bh, 0AA000C81h, 719B3800h
.text:0041A1E8                 dd 0BB1A2AE1h, 11CFA4F9h, 8000208Fh, 64D02C5Fh, 0EAE1BA61h
.text:0041A1E8                 dd 11CFA4EDh, 8000208Fh, 64D02C5Fh, 0BB1A2AE2h, 11CFA4F9h
.text:0041A1E8                 dd 8000208Fh, 64D02C5Fh, 0DB01A1E3h, 11CFA42Bh, 8000208Fh
.text:0041A1E8                 dd 64D02C5Fh, 0D10F6761h, 11CF83E9h, 8000208Fh, 64D02C5Fh
.text:0041A1E8                 dd 10Fh, 0
.text:0041A2F8                 dd 0C0h, 46000000h, 125h, 0
.text:0041A308                 dd 0C0h, 46000000h, 3AF24290h, 11CE0C96h, 0AA00CFA0h, 0B80A6000h
.text:0041A308                 dd 79EAC9D3h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9D0h
.text:0041A308                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 0Eh, 0
.text:0041A348                 dd 0C0h, 46000000h, 0FC4801A1h, 11CF2BA9h, 0AA0029A2h
.text:0041A348                 dd 52733D00h, 79EAC9CDh, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0041A348                 dd 79EAC9C1h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9CBh
.text:0041A348                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9C0h, 11CEBAF9h
.text:0041A348                 dd 0AA00828Ch, 0BA94B00h, 2E013h, 0
.text:0041A3A8                 dd 0C0h, 46000000h, 2E012h, 0
.text:0041A3B8                 dd 0C0h, 46000000h, 1008C4A0h, 11CF7613h, 2000F19Ah, 0F4726EAFh
.text:0041A3B8                 dd 140h, 0
.text:0041A3D8                 dd 0C0h, 46000000h, 1, 0
.text:0041A3E8                 dd 0C0h, 46000000h, 0B196B28Fh, 101ABAB4h, 0AA009CB6h
.text:0041A3E8                 dd 71D3400h, 13Dh, 0
.text:0041A408                 dd 0C0h, 46000000h, 0F4F569D1h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:0041A408                 dd 79EAC9D1h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 0B196B286h
.text:0041A408                 dd 101ABAB4h, 0AA009CB6h, 71D3400h, 0B196B284h, 101ABAB4h
.text:0041A408                 dd 0AA009CB6h, 71D3400h, 12Ah, 0
.text:0041A458                 dd 0C0h, 46000000h, 0B722BCCAh, 101B4E68h, 0AA00BCA2h
.text:0041A458                 dd 70474000h, 22F03340h, 101B547Dh, 8658Eh, 19D12B2Bh
.text:0041A458                 dd 20405h, 0
.text:0041A488                 dd 0C0h, 46000000h, 2040Eh, 0
.text:0041A498                 dd 0C0h, 46000000h, 20406h, 0
.text:0041A4A8                 dd 0C0h, 46000000h, 2040Fh, 0
.text:0041A4B8                 dd 0C0h, 46000000h, 110h, 0
.text:0041A4C8                 dd 0C0h, 46000000h, 10Eh, 0
.text:0041A4D8                 dd 0C0h, 46000000h, 123h, 0
.text:0041A4E8                 dd 0C0h, 46000000h, 124h, 0
.text:0041A4F8                 dd 0C0h, 46000000h, 13h, 0
.text:0041A508                 dd 0C0h, 46000000h, 14h, 0
.text:0041A518                 dd 0C0h, 46000000h, 15h, 0
.text:0041A528                 dd 0C0h, 46000000h, 20400h, 0
.text:0041A538                 dd 0C0h, 46000000h, 121h, 0
.text:0041A548                 dd 0C0h, 46000000h, 122h, 0
.text:0041A558                 dd 0C0h, 46000000h, 2E011h, 0
.text:0041A568                 dd 0C0h, 46000000h, 108h, 0
.text:0041A578                 dd 0C0h, 46000000h, 0B196B285h, 101ABAB4h, 0AA009CB6h
.text:0041A578                 dd 71D3400h, 0B196B287h, 101ABAB4h, 0AA009CB6h, 71D3400h
.text:0041A578                 dd 103h, 0
.text:0041A5A8                 dd 0C0h, 46000000h, 2E000h, 0
.text:0041A5B8                 dd 0C0h, 46000000h, 106h, 0
.text:0041A5C8                 dd 0C0h, 46000000h, 79EAC9C6h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0041A5C8                 dd 107h, 0
.text:0041A5E8                 dd 0C0h, 46000000h, 102h, 0
.text:0041A5F8                 dd 0C0h, 46000000h, 104h, 0
.text:0041A608                 dd 0C0h, 46000000h, 0B722BCC8h, 101B4E68h, 0AA00BCA2h
.text:0041A608                 dd 70474000h, 0B3E7C340h, 11CEEF97h, 0AA00C99Bh, 18E6000h
.text:0041A608                 dd 105h, 0
.text:0041A638                 dd 0C0h, 46000000h, 13Bh, 0
.text:0041A648                 dd 0C0h, 46000000h, 139h, 0
.text:0041A658                 dd 0C0h, 46000000h, 0Dh, 0
.text:0041A668                 dd 0C0h, 46000000h, 3C374A42h, 11CFBAE4h, 0AA007DBFh, 0EE466900h
.text:0041A668                 dd 101h, 0
.text:0041A688                 dd 0C0h, 46000000h, 100h, 0
.text:0041A698                 dd 0C0h, 46000000h, 20404h, 0
.text:0041A6A8                 dd 0C0h, 46000000h, 1CF2B120h, 101B547Dh, 8658Eh, 19D12B2Bh
.text:0041A6A8                 dd 3127CA40h, 11CE446Eh, 0AA003581h, 51B84B00h, 19h, 0
.text:0041A6D8                 dd 0C0h, 46000000h, 99CAF010h, 11CF415Eh, 0AA001488h, 0F569B500h
.text:0041A6D8                 dd 89BCB740h, 101A6119h, 0DD00B7BCh, 0AF550601h, 0BEF6E002h
.text:0041A6D8                 dd 101AA874h, 0AA00BA8Bh, 0AB0C3000h, 0BEF6E003h, 101AA874h
.text:0041A6D8                 dd 0AA00BA8Bh, 0AB0C3000h, 146h, 0
.text:0041A728                 dd 0C0h, 46000000h, 79EAC9C3h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0041A728                 dd 79EAC9C7h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9C5h
.text:0041A728                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9C2h, 11CEBAF9h
.text:0041A728                 dd 0AA00828Ch, 0BA94B00h, 79EAC9C4h, 11CEBAF9h, 0AA00828Ch
.text:0041A728                 dd 0BA94B00h, 79EAC9D2h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0041A728                 dd 79EAC9D7h, 11CEBAFAh, 0AA00828Ch, 0BA94B00h, 11h, 0
.text:0041A7A8                 dd 0C0h, 46000000h, 0E6D4D90h, 11CF6738h, 0AA000896h, 0B40D6800h
.text:0041A7A8                 dd 0Ah, 0
.text:0041A7C8                 dd 0C0h, 46000000h, 2, 0
.text:0041A7D8                 dd 0C0h, 46000000h, 1Dh, 0
.text:0041A7E8                 dd 0C0h, 46000000h, 3, 0
.text:0041A7F8                 dd 0C0h, 46000000h, 16h, 0
.text:0041A808                 dd 0C0h, 46000000h, 0F77459A0h, 11CFBF9Ah, 0C0004EBAh
.text:0041A808                 dd 1608D74Fh, 0Fh, 0
.text:0041A828                 dd 0C0h, 46000000h, 20h, 0
.text:0041A838                 dd 0C0h, 46000000h, 0CB5BDC81h, 11CF93C1h, 8000208Fh, 64D02C5Fh
.text:0041A838                 dd 0FC4801A3h, 11CF2BA9h, 0AA0029A2h, 52733D00h, 111h
.text:0041A838                 dd 0
.text:0041A868                 dd 0C0h, 46000000h, 11Eh, 0
.text:0041A878                 dd 0C0h, 46000000h, 128h, 0
.text:0041A888                 dd 0C0h, 46000000h, 129h, 0
.text:0041A898                 dd 0C0h, 46000000h, 118h, 0
.text:0041A8A8                 dd 0C0h, 46000000h, 0B722BCCBh, 101B4E68h, 0AA00BCA2h
.text:0041A8A8                 dd 70474000h, 11Bh, 0
.text:0041A8C8                 dd 0C0h, 46000000h, 0B196B288h, 101ABAB4h, 0AA009CB6h
.text:0041A8C8                 dd 71D3400h, 0B196B289h, 101ABAB4h, 0AA009CB6h, 71D3400h
.text:0041A8C8                 dd 0B722BCC5h, 101B4E68h, 0AA00BCA2h, 70474000h, 0B722BCC7h
.text:0041A8C8                 dd 101B4E68h, 0AA00BCA2h, 70474000h, 0B722BCC6h, 101B4E68h
.text:0041A8C8                 dd 0AA00BCA2h, 70474000h, 117h, 0
.text:0041A928                 dd 0C0h, 46000000h, 116h, 0
.text:0041A938                 dd 0C0h, 46000000h, 113h, 0
.text:0041A948                 dd 0C0h, 46000000h, 1C2056CCh, 101B5EF4h, 0AA00C88Bh, 293B3E00h
.text:0041A948                 dd 119h, 0
.text:0041A968                 dd 0C0h, 46000000h, 9C2CAD80h, 11CF3424h, 0AA0070B6h, 0D8D64C00h
.text:0041A968                 dd 922EADA0h, 11CF3424h, 0AA0070B6h, 0D8D64C00h, 115h
.text:0041A968                 dd 0
.text:0041A998                 dd 0C0h, 46000000h, 11Ch, 0
.text:0041A9A8                 dd 0C0h, 46000000h, 11Dh, 0
.text:0041A9B8                 dd 0C0h, 46000000h, 11Fh, 0
.text:0041A9C8                 dd 0C0h, 46000000h, 112h, 0
.text:0041A9D8                 dd 0C0h, 46000000h, 0A1FAF330h, 11CEEF97h, 0AA00C99Bh
.text:0041A9D8                 dd 18E6000h, 120h, 0
.text:0041A9F8                 dd 0C0h, 46000000h, 97D001F2h, 9B11CEEFh, 0AA00C9h, 18E60h
.text:0041A9F8                 dd 0D001F200h, 11CEEF97h, 0AA00C99Bh, 18E6000h, 894AD3B0h
.text:0041A9F8                 dd 11CEEF97h, 0AA00C99Bh, 18E6000h, 114h, 0
.text:0041AA38                 dd 0C0h, 46000000h, 521A28F0h, 11CEE40Bh, 0AA00C9B2h, 37096800h
.text:0041AA38                 dd 49384070h, 11CEE40Ah, 0AA00C9B2h, 37096800h, 9, 0
.text:0041AA68                 dd 0C0h, 46000000h, 0D5F569D0h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:0041AA68                 dd 11Ah, 0
.text:0041AA88                 dd 0C0h, 46000000h, 376BD3AAh, 101B3845h, 8ED84h, 13C72E2Bh
.text:0041AA88                 dd 10Ch, 0
.text:0041AAA8                 dd 0C0h, 46000000h
.text:0041AAB0 dword_41AAB0    dd 10Bh, 0              ; DATA XREF: sub_419A40+75↑o
.text:0041AAB8                 dd 0C0h, 46000000h, 0BD1AE5E0h, 11CEA6AEh, 425037BDh, 0C100h
.text:0041AAB8                 dd 79EAC9C9h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 37D84F60h
.text:0041AAB8                 dd 11CE42CBh, 0AA003581h, 51B84B00h, 22F55881h, 11D0280Bh
.text:0041AAB8                 dd 0A000A9A8h, 4200CC9h, 10Ah, 0
.text:0041AB08                 dd 0C0h, 46000000h, 109h, 0
.text:0041AB18                 dd 0C0h, 46000000h, 7FD52380h, 101B4E07h, 82DAEh, 13C72E2Bh
.text:0041AB18                 dd 7BF80980h, 101ABF32h, 0AA00BB8Bh, 0AB0C3000h, 7BF80981h
.text:0041AB18                 dd 101ABF32h, 0AA00BB8Bh, 0AB0C3000h, 55980BA0h, 11CF35AAh
.text:0041AB18                 dd 0AA0071B6h, 0D8D64C00h, 0B722BCC9h, 101B4E68h, 0AA00BCA2h
.text:0041AB18                 dd 70474000h, 0A9D758A0h, 11CF4617h, 0AA00FC95h, 0B40D6800h
.text:0041AB18                 dd 55272A00h, 11CE42CBh, 0AA003581h, 51B84B00h, 22F55882h
.text:0041AB18                 dd 11D0280Bh, 0A000A9A8h, 4200CC9h, 0B196B28Ah, 101ABAB4h
.text:0041AB18                 dd 0AA009CB6h, 71D3400h, 9BFBBC02h, 101AEFF1h, 0AA00ED84h
.text:0041AB18                 dd 71D3400h, 0B196B28Dh, 101ABAB4h, 0AA009CB6h, 71D3400h
.text:0041AB18                 dd 1E44665h, 101B24ACh, 8ED84h, 13C72E2Bh, 0B196B28Ch
.text:0041AB18                 dd 101ABAB4h, 0AA009CB6h, 71D3400h, 13Ah, 0
.text:0041ABF8                 dd 0C0h, 46000000h, 138h, 0
.text:0041AC08                 dd 0C0h, 46000000h, 0B196B283h, 101ABAB4h, 0AA009CB6h
.text:0041AC08                 dd 71D3400h, 0A6BC3AC0h, 11CEDBAAh, 0AA00E39Dh, 51B84B00h
.text:0041AC08                 dd 27h, 0
.text:0041AC38                 dd 0C0h, 46000000h, 8, 0
.text:0041AC48                 dd 0C0h, 46000000h, 0CF51ED10h, 11CF62FEh, 0A00086BFh
.text:0041AC48                 dd 364803C9h, 0F29F6BC0h, 11CE5021h, 15AAh, 3F290169h
.text:0041AC48                 dd 20D00h, 0
.text:0041AC78                 dd 0C0h, 46000000h, 20D03h, 0
.text:0041AC88                 dd 0C0h, 46000000h, 12h, 0
.text:0041AC98                 dd 0C0h, 46000000h, 4, 0
.text:0041ACA8                 dd 0C0h, 46000000h, 0D5F56B60h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:0041ACA8                 dd 7, 0
.text:0041ACC8                 dd 0C0h, 46000000h, 0D5F56A34h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:0041ACC8                 dd 3BD5F56Ah, 0B5101A59h, 2B000869h, 7ABF2Dh, 5, 0
.text:0041ACF8                 dd 0C0h, 46000000h, 0D5F56AFCh, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:0041ACF8                 dd 126h, 0
.text:0041AD18                 dd 0C0h, 46000000h, 10h, 0
.text:0041AD28                 dd 0C0h, 46000000h, 0C733A30h, 11CE2A1Ch, 0AA00E5ADh, 3D774400h
.text:0041AD28                 dd 0F4F569D0h, 101A593Bh, 869B5h, 7ABF2D2Bh, 13Eh, 0
.text:0041AD58                 dd 0C0h, 46000000h, 6D5140C1h, 11CE7436h, 0AA003480h, 0FA096000h
.text:0041AD58                 dd 742B0E01h, 101B14E6h, 0AA004E91h, 0AB0C3000h, 0B196B28Bh
.text:0041AD58                 dd 101ABAB4h, 0AA009CB6h, 71D3400h, 18h, 0
.text:0041AD98                 dd 0C0h, 46000000h, 0Bh, 0
.text:0041ADA8                 dd 0C0h, 46000000h, 0Ch, 0
.text:0041ADB8                 dd 0C0h, 46000000h, 26h, 0
.text:0041ADC8                 dd 0C0h, 46000000h, 6, 0
.text:0041ADD8                 dd 0C0h, 46000000h, 0DF0B3D60h, 101B548Fh, 8658Eh, 19D12B2Bh
.text:0041ADD8                 dd 548793C0h, 11CF9E74h, 0A0005596h, 234903C9h, 0D5F78C80h
.text:0041ADD8                 dd 11CF5252h, 0AA00FA90h, 6E104200h, 20410h, 0
.text:0041AE18                 dd 0C0h, 46000000h, 20403h, 0
.text:0041AE28                 dd 0C0h, 46000000h, 20401h, 0
.text:0041AE38                 dd 0C0h, 46000000h, 20412h, 0
.text:0041AE48                 dd 0C0h, 46000000h, 20402h, 0
.text:0041AE58                 dd 0C0h, 46000000h, 20411h, 0
.text:0041AE68                 dd 0C0h, 46000000h, 2 dup(0)
.text:0041AE78                 dd 0C0h, 46000000h, 3C374A41h, 11CFBAE4h, 0AA007DBFh, 0EE466900h
.text:0041AE78                 dd 10Dh, 0
.text:0041AE98                 dd 0C0h, 46000000h, 127h, 0
.text:0041AEA8                 dd 0C0h, 46000000h, 3AF24292h, 11CE0C96h, 0AA00CFA0h, 0B80A6000h
.text:0041AEA8                 dd 0EAB22AC1h, 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0D30C1661h
.text:0041AEA8                 dd 11D0CDAFh, 0C0003E8Ah, 6EE2C94Fh, 2DF05h, 0
.text:0041AEE8                 dd 0C0h, 46000000h, 79EAC9D8h, 11CEBAFAh, 0AA00828Ch, 0BA94B00h
.text:0041AEE8                 dd 79EAC9D6h, 11CEBAFAh, 0AA00828Ch, 0BA94B00h, 79EAC9D5h
.text:0041AEE8                 dd 11CEBAFAh, 0AA00828Ch, 0BA94B00h, 20430h, 0
.text:0041AF28                 dd 0C0h, 46000000h, 2DE0Eh, 0
.text:0041AF38                 dd 0C0h, 46000000h, 2DE18h, 0
.text:0041AF48                 dd 0C0h, 46000000h, 2DE1Eh, 0
.text:0041AF58                 dd 0C0h, 46000000h, 2DE19h, 0
.text:0041AF68                 dd 0C0h, 46000000h, 2DE0Fh, 0
.text:0041AF78                 dd 0C0h, 46000000h, 2DE12h, 0
.text:0041AF88                 dd 0C0h, 46000000h, 2DE21h, 0
.text:0041AF98                 dd 0C0h, 46000000h, 2DE01h, 0
.text:0041AFA8                 dd 0C0h, 46000000h, 2DE0Bh, 0
.text:0041AFB8                 dd 0C0h, 46000000h, 2DE0Dh, 0
.text:0041AFC8                 dd 0C0h, 46000000h, 2DE02h, 0
.text:0041AFD8                 dd 0C0h, 46000000h, 2DE1Fh, 0
.text:0041AFE8                 dd 0C0h, 46000000h, 2DE04h, 0
.text:0041AFF8                 dd 0C0h, 46000000h, 2DE0Ch, 0
.text:0041B008                 dd 0C0h, 46000000h, 2DE05h, 0
.text:0041B018                 dd 0C0h, 46000000h, 2DE1Ch, 0
.text:0041B028                 dd 0C0h, 46000000h, 2DE06h, 0
.text:0041B038                 dd 0C0h, 46000000h, 2DE13h, 0
.text:0041B048                 dd 0C0h, 46000000h, 2DE10h, 0
.text:0041B058                 dd 0C0h, 46000000h, 2DE22h, 0
.text:0041B068                 dd 0C0h, 46000000h, 2DE09h, 0
.text:0041B078                 dd 0C0h, 46000000h, 2DE23h, 0
.text:0041B088                 dd 0C0h, 46000000h, 2DE0Ah, 0
.text:0041B098                 dd 0C0h, 46000000h, 2DE1Dh, 0
.text:0041B0A8                 dd 0C0h, 46000000h, 2DE11h, 0
.text:0041B0B8                 dd 0C0h, 46000000h, 2DE15h, 0
.text:0041B0C8                 dd 0C0h, 46000000h, 2DE1Bh, 0
.text:0041B0D8                 dd 0C0h, 46000000h, 2DE16h, 0
.text:0041B0E8                 dd 0C0h, 46000000h, 2DE20h, 0
.text:0041B0F8                 dd 0C0h, 46000000h, 2DE07h, 0
.text:0041B108                 dd 0C0h, 46000000h, 2DE1Ah, 0
.text:0041B118                 dd 0C0h, 46000000h, 2DE17h, 0
.text:0041B128                 dd 0C0h, 46000000h, 2DE14h, 0
.text:0041B138                 dd 0C0h, 46000000h, 2DE03h, 0
.text:0041B148                 dd 0C0h, 46000000h, 2DE08h, 0
.text:0041B158                 dd 0C0h, 46000000h, 0B722BE00h, 101B4E68h, 0AA00BCA2h
.text:0041B158                 dd 70474000h, 0FC4801A5h, 11CF2BA9h, 0AA0029A2h, 52733D00h
.text:0041B180
.text:0041B180 ; =============== S U B R O U T I N E =======================================
.text:0041B180
.text:0041B180 ; Attributes: thunk
.text:0041B180
.text:0041B180 ; size_t __cdecl mbrtowc(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.text:0041B180 mbrtowc         proc near               ; CODE XREF: sub_406F40+95↑p
.text:0041B180                                         ; sub_409450+757↑p
.text:0041B180
.text:0041B180 DstCh           = dword ptr  4
.text:0041B180 SrcCh           = dword ptr  8
.text:0041B180 SizeInBytes     = dword ptr  0Ch
.text:0041B180 State           = dword ptr  10h
.text:0041B180
.text:0041B180                 jmp     ds:__imp_mbrtowc
.text:0041B180 mbrtowc         endp
.text:0041B180
.text:0041B180 ; ---------------------------------------------------------------------------
.text:0041B186                 align 10h
.text:0041B190
.text:0041B190 ; =============== S U B R O U T I N E =======================================
.text:0041B190
.text:0041B190 ; Attributes: bp-based frame
.text:0041B190
.text:0041B190 sub_41B190      proc near               ; CODE XREF: sub_401080+C2↑p
.text:0041B190                 push    ebp
.text:0041B191                 mov     ecx, offset byte_41E000
.text:0041B196                 cmp     ecx, offset byte_41E000
.text:0041B19C                 mov     ebp, esp
.text:0041B19E                 jnb     short loc_41B1B6
.text:0041B1A0
.text:0041B1A0 loc_41B1A0:                             ; CODE XREF: sub_41B190+24↓j
.text:0041B1A0                 mov     edx, [ecx+4]
.text:0041B1A3                 mov     eax, [ecx]
.text:0041B1A5                 add     ecx, 8
.text:0041B1A8                 add     [edx+400000h], eax
.text:0041B1AE                 cmp     ecx, offset byte_41E000
.text:0041B1B4                 jb      short loc_41B1A0
.text:0041B1B6
.text:0041B1B6 loc_41B1B6:                             ; CODE XREF: sub_41B190+E↑j
.text:0041B1B6                 pop     ebp
.text:0041B1B7                 retn
.text:0041B1B7 sub_41B190      endp
.text:0041B1B7
.text:0041B1B7 ; ---------------------------------------------------------------------------
.text:0041B1B8                 align 10h
.text:0041B1C0
.text:0041B1C0 ; =============== S U B R O U T I N E =======================================
.text:0041B1C0
.text:0041B1C0 ; Attributes: bp-based frame
.text:0041B1C0
.text:0041B1C0 sub_41B1C0      proc near               ; CODE XREF: sub_401080+16↑p
.text:0041B1C0                                         ; TopLevelExceptionFilter+D7↑p
.text:0041B1C0                 push    ebp
.text:0041B1C1                 mov     ebp, esp
.text:0041B1C3                 fninit
.text:0041B1C5                 pop     ebp
.text:0041B1C6                 retn
.text:0041B1C6 sub_41B1C0      endp
.text:0041B1C6
.text:0041B1C6 ; ---------------------------------------------------------------------------
.text:0041B1C7                 align 10h
.text:0041B1D0
.text:0041B1D0 ; =============== S U B R O U T I N E =======================================
.text:0041B1D0
.text:0041B1D0 ; Attributes: bp-based frame
.text:0041B1D0
.text:0041B1D0 ; void __cdecl sub_41B1D0()
.text:0041B1D0 sub_41B1D0      proc near               ; DATA XREF: .text:loc_41B219↓o
.text:0041B1D0                                         ; sub_41B260:loc_41B28E↓o
.text:0041B1D0                 push    ebp
.text:0041B1D1                 mov     ebp, esp
.text:0041B1D3                 sub     esp, 8
.text:0041B1D6                 mov     eax, off_41D194
.text:0041B1DB                 mov     edx, [eax]
.text:0041B1DD                 test    edx, edx
.text:0041B1DF                 jnz     short loc_41B1E5
.text:0041B1E1
.text:0041B1E1 loc_41B1E1:                             ; CODE XREF: sub_41B1D0+2C↓j
.text:0041B1E1                 mov     esp, ebp
.text:0041B1E3                 pop     ebp
.text:0041B1E4                 retn
.text:0041B1E5 ; ---------------------------------------------------------------------------
.text:0041B1E5
.text:0041B1E5 loc_41B1E5:                             ; CODE XREF: sub_41B1D0+F↑j
.text:0041B1E5                                         ; sub_41B1D0+2A↓j
.text:0041B1E5                 call    dword ptr [eax]
.text:0041B1E7                 mov     edx, off_41D194
.text:0041B1ED                 mov     ecx, [edx+4]
.text:0041B1F0                 lea     eax, [edx+4]
.text:0041B1F3                 mov     off_41D194, eax
.text:0041B1F8                 test    ecx, ecx
.text:0041B1FA                 jnz     short loc_41B1E5
.text:0041B1FC                 jmp     short loc_41B1E1
.text:0041B1FC sub_41B1D0      endp
.text:0041B1FC
.text:0041B1FC ; ---------------------------------------------------------------------------
.text:0041B1FE                 align 10h
.text:0041B200                 push    ebp
.text:0041B201                 mov     ebp, esp
.text:0041B203                 sub     esp, 8
.text:0041B206                 mov     [ebp-4], ebx
.text:0041B209                 mov     eax, ds:dword_41C430
.text:0041B20E                 cmp     eax, 0FFFFFFFFh
.text:0041B211                 jz      short loc_41B23C
.text:0041B213
.text:0041B213 loc_41B213:                             ; CODE XREF: .text:0041B246↓j
.text:0041B213                                         ; .text:0041B259↓j
.text:0041B213                 test    eax, eax
.text:0041B215                 mov     ebx, eax
.text:0041B217                 jnz     short loc_41B230
.text:0041B219
.text:0041B219 loc_41B219:                             ; CODE XREF: .text:0041B23A↓j
.text:0041B219                 mov     dword ptr [esp], offset sub_41B1D0
.text:0041B220                 call    sub_401040
.text:0041B225                 mov     ebx, [ebp-4]
.text:0041B228                 mov     esp, ebp
.text:0041B22A                 pop     ebp
.text:0041B22B                 retn
.text:0041B22B ; ---------------------------------------------------------------------------
.text:0041B22C                 align 10h
.text:0041B230
.text:0041B230 loc_41B230:                             ; CODE XREF: .text:0041B217↑j
.text:0041B230                                         ; .text:0041B238↓j
.text:0041B230                 call    ds:dword_41C430[ebx*4]
.text:0041B237                 dec     ebx
.text:0041B238                 jnz     short loc_41B230
.text:0041B23A                 jmp     short loc_41B219
.text:0041B23C ; ---------------------------------------------------------------------------
.text:0041B23C
.text:0041B23C loc_41B23C:                             ; CODE XREF: .text:0041B211↑j
.text:0041B23C                 mov     ecx, ds:dword_41C434
.text:0041B242                 xor     eax, eax
.text:0041B244                 test    ecx, ecx
.text:0041B246                 jz      short loc_41B213
.text:0041B248                 mov     edx, offset dword_41C430
.text:0041B24D                 lea     esi, [esi+0]
.text:0041B250
.text:0041B250 loc_41B250:                             ; CODE XREF: .text:0041B257↓j
.text:0041B250                 inc     eax
.text:0041B251                 mov     ecx, [edx+eax*4+4]
.text:0041B255                 test    ecx, ecx
.text:0041B257                 jnz     short loc_41B250
.text:0041B259                 jmp     short loc_41B213
.text:0041B259 ; ---------------------------------------------------------------------------
.text:0041B25B                 align 10h
.text:0041B260
.text:0041B260 ; =============== S U B R O U T I N E =======================================
.text:0041B260
.text:0041B260 ; Attributes: bp-based frame
.text:0041B260
.text:0041B260 sub_41B260      proc near               ; CODE XREF: sub_401910+18↑p
.text:0041B260
.text:0041B260 var_8           = dword ptr -8
.text:0041B260 var_4           = dword ptr -4
.text:0041B260
.text:0041B260                 push    ebp
.text:0041B261                 mov     ebp, esp
.text:0041B263                 sub     esp, 8
.text:0041B266                 mov     [ebp+var_4], ebx
.text:0041B269                 mov     edx, dword_41D190
.text:0041B26F                 test    edx, edx
.text:0041B271                 jnz     short loc_41B29A
.text:0041B273                 mov     eax, ds:dword_41C430
.text:0041B278                 mov     edx, 1
.text:0041B27D                 mov     dword_41D190, edx
.text:0041B283                 cmp     eax, 0FFFFFFFFh
.text:0041B286                 jz      short loc_41B2AD
.text:0041B288
.text:0041B288 loc_41B288:                             ; CODE XREF: sub_41B260+57↓j
.text:0041B288                                         ; sub_41B260+69↓j
.text:0041B288                 test    eax, eax
.text:0041B28A                 mov     ebx, eax
.text:0041B28C                 jnz     short loc_41B2A1
.text:0041B28E
.text:0041B28E loc_41B28E:                             ; CODE XREF: sub_41B260+4B↓j
.text:0041B28E                 mov     [esp+8+var_8], offset sub_41B1D0 ; void (__cdecl *)()
.text:0041B295                 call    sub_401040
.text:0041B29A
.text:0041B29A loc_41B29A:                             ; CODE XREF: sub_41B260+11↑j
.text:0041B29A                 mov     ebx, [ebp+var_4]
.text:0041B29D                 mov     esp, ebp
.text:0041B29F                 pop     ebp
.text:0041B2A0                 retn
.text:0041B2A1 ; ---------------------------------------------------------------------------
.text:0041B2A1
.text:0041B2A1 loc_41B2A1:                             ; CODE XREF: sub_41B260+2C↑j
.text:0041B2A1                                         ; sub_41B260+49↓j
.text:0041B2A1                 call    ds:dword_41C430[ebx*4]
.text:0041B2A8                 dec     ebx
.text:0041B2A9                 jnz     short loc_41B2A1
.text:0041B2AB                 jmp     short loc_41B28E
.text:0041B2AD ; ---------------------------------------------------------------------------
.text:0041B2AD
.text:0041B2AD loc_41B2AD:                             ; CODE XREF: sub_41B260+26↑j
.text:0041B2AD                 mov     ecx, ds:dword_41C434
.text:0041B2B3                 xor     eax, eax
.text:0041B2B5                 test    ecx, ecx
.text:0041B2B7                 jz      short loc_41B288
.text:0041B2B9                 mov     edx, offset dword_41C430
.text:0041B2BE                 mov     esi, esi
.text:0041B2C0
.text:0041B2C0 loc_41B2C0:                             ; CODE XREF: sub_41B260+67↓j
.text:0041B2C0                 inc     eax
.text:0041B2C1                 mov     ebx, [edx+eax*4+4]
.text:0041B2C5                 test    ebx, ebx
.text:0041B2C7                 jnz     short loc_41B2C0
.text:0041B2C9                 jmp     short loc_41B288
.text:0041B2C9 sub_41B260      endp
.text:0041B2C9
.text:0041B2C9 ; ---------------------------------------------------------------------------
.text:0041B2CB                 align 10h
.text:0041B2D0
.text:0041B2D0 ; =============== S U B R O U T I N E =======================================
.text:0041B2D0
.text:0041B2D0 ; Attributes: info_from_lumina
.text:0041B2D0
.text:0041B2D0 ; void *__cdecl _alloca(size_t Size)
.text:0041B2D0 __alloca        proc near               ; CODE XREF: sub_401910+13↑p
.text:0041B2D0                                         ; sub_402BB0+B1↑p
.text:0041B2D0                 push    ecx
.text:0041B2D1                 mov     ecx, esp
.text:0041B2D3                 add     ecx, 8
.text:0041B2D6
.text:0041B2D6 loc_41B2D6:                             ; CODE XREF: __alloca+1B↓j
.text:0041B2D6                 cmp     eax, 1000h
.text:0041B2DB                 jb      short loc_41B2ED
.text:0041B2DD                 sub     ecx, 1000h
.text:0041B2E3                 or      dword ptr [ecx], 0
.text:0041B2E6                 sub     eax, 1000h
.text:0041B2EB                 jmp     short loc_41B2D6
.text:0041B2ED ; ---------------------------------------------------------------------------
.text:0041B2ED
.text:0041B2ED loc_41B2ED:                             ; CODE XREF: __alloca+B↑j
.text:0041B2ED                 sub     ecx, eax
.text:0041B2EF                 or      dword ptr [ecx], 0
.text:0041B2F2                 mov     eax, esp
.text:0041B2F4                 mov     esp, ecx
.text:0041B2F6                 mov     ecx, [eax]
.text:0041B2F8                 mov     eax, [eax+4]
.text:0041B2FB                 jmp     eax
.text:0041B2FB __alloca        endp
.text:0041B2FB
.text:0041B2FB ; ---------------------------------------------------------------------------
.text:0041B2FD                 align 10h
.text:0041B300
.text:0041B300 ; =============== S U B R O U T I N E =======================================
.text:0041B300
.text:0041B300 ; Attributes: bp-based frame
.text:0041B300
.text:0041B300 sub_41B300      proc near               ; CODE XREF: sub_40ACC0+55E↑p
.text:0041B300                                         ; sub_40ACC0+5D5↑p ...
.text:0041B300
.text:0041B300 var_24          = dword ptr -24h
.text:0041B300 var_20          = dword ptr -20h
.text:0041B300 var_1C          = dword ptr -1Ch
.text:0041B300 var_18          = dword ptr -18h
.text:0041B300 var_14          = dword ptr -14h
.text:0041B300 var_C           = dword ptr -0Ch
.text:0041B300 var_8           = dword ptr -8
.text:0041B300 var_4           = dword ptr -4
.text:0041B300 arg_0           = dword ptr  8
.text:0041B300 arg_4           = dword ptr  0Ch
.text:0041B300 arg_8           = dword ptr  10h
.text:0041B300 arg_C           = dword ptr  14h
.text:0041B300
.text:0041B300                 push    ebp
.text:0041B301                 mov     ebp, esp
.text:0041B303                 sub     esp, 28h
.text:0041B306                 mov     [ebp+var_C], ebx
.text:0041B309                 mov     edx, [ebp+arg_C]
.text:0041B30C                 mov     ecx, [ebp+arg_0]
.text:0041B30F                 mov     [ebp+var_8], esi
.text:0041B312                 mov     eax, [ebp+arg_8]
.text:0041B315                 test    edx, edx
.text:0041B317                 mov     [ebp+var_4], edi
.text:0041B31A                 mov     ebx, [ebp+arg_4]
.text:0041B31D                 mov     esi, eax
.text:0041B31F                 mov     [ebp+var_18], 0
.text:0041B326                 mov     [ebp+var_14], 0
.text:0041B32D                 mov     [ebp+var_1C], ecx
.text:0041B330                 jnz     short loc_41B382
.text:0041B332                 cmp     eax, ebx
.text:0041B334                 jbe     short loc_41B360
.text:0041B336                 mov     eax, ecx
.text:0041B338                 mov     edx, ebx
.text:0041B33A                 div     esi
.text:0041B33C                 mov     edi, eax
.text:0041B33E                 mov     esi, esi
.text:0041B340
.text:0041B340 loc_41B340:                             ; CODE XREF: sub_41B300+88↓j
.text:0041B340                                         ; sub_41B300+A4↓j ...
.text:0041B340                 xor     ecx, ecx
.text:0041B342
.text:0041B342 loc_41B342:                             ; CODE XREF: sub_41B300+80↓j
.text:0041B342                 mov     [ebp+var_18], edi
.text:0041B345                 mov     ebx, [ebp+var_C]
.text:0041B348                 mov     eax, [ebp+var_18]
.text:0041B34B                 mov     [ebp+var_14], ecx
.text:0041B34E                 mov     esi, [ebp+var_8]
.text:0041B351                 mov     edx, [ebp+var_14]
.text:0041B354                 mov     edi, [ebp+var_4]
.text:0041B357                 mov     esp, ebp
.text:0041B359                 pop     ebp
.text:0041B35A                 retn
.text:0041B35A ; ---------------------------------------------------------------------------
.text:0041B35B                 align 10h
.text:0041B360
.text:0041B360 loc_41B360:                             ; CODE XREF: sub_41B300+34↑j
.text:0041B360                 test    eax, eax
.text:0041B362                 jnz     short loc_41B371
.text:0041B364                 mov     eax, 1
.text:0041B369                 xor     ecx, ecx
.text:0041B36B                 xor     edx, edx
.text:0041B36D                 div     ecx
.text:0041B36F                 mov     esi, eax
.text:0041B371
.text:0041B371 loc_41B371:                             ; CODE XREF: sub_41B300+62↑j
.text:0041B371                 mov     eax, ebx
.text:0041B373                 xor     edx, edx
.text:0041B375                 div     esi
.text:0041B377                 mov     ecx, eax
.text:0041B379                 mov     eax, [ebp+var_1C]
.text:0041B37C                 div     esi
.text:0041B37E                 mov     edi, eax
.text:0041B380                 jmp     short loc_41B342
.text:0041B382 ; ---------------------------------------------------------------------------
.text:0041B382
.text:0041B382 loc_41B382:                             ; CODE XREF: sub_41B300+30↑j
.text:0041B382                 cmp     edx, ebx
.text:0041B384                 jbe     short loc_41B390
.text:0041B386                 xor     edi, edi
.text:0041B388                 jmp     short loc_41B340
.text:0041B388 ; ---------------------------------------------------------------------------
.text:0041B38A                 align 10h
.text:0041B390
.text:0041B390 loc_41B390:                             ; CODE XREF: sub_41B300+84↑j
.text:0041B390                 bsr     eax, edx
.text:0041B393                 xor     eax, 1Fh
.text:0041B396                 mov     [ebp+var_20], eax
.text:0041B399                 jnz     short loc_41B3B0
.text:0041B39B                 cmp     ebx, edx
.text:0041B39D                 ja      short loc_41B3A6
.text:0041B39F                 xor     edi, edi
.text:0041B3A1                 cmp     [ebp+var_1C], esi
.text:0041B3A4                 jb      short loc_41B340
.text:0041B3A6
.text:0041B3A6 loc_41B3A6:                             ; CODE XREF: sub_41B300+9D↑j
.text:0041B3A6                 mov     edi, 1
.text:0041B3AB                 jmp     short loc_41B340
.text:0041B3AB ; ---------------------------------------------------------------------------
.text:0041B3AD                 align 10h
.text:0041B3B0
.text:0041B3B0 loc_41B3B0:                             ; CODE XREF: sub_41B300+99↑j
.text:0041B3B0                 mov     eax, [ebp+var_20]
.text:0041B3B3                 mov     ecx, 20h ; ' '
.text:0041B3B8                 sub     ecx, eax
.text:0041B3BA                 mov     [ebp+var_24], ecx
.text:0041B3BD                 mov     eax, esi
.text:0041B3BF                 movzx   ecx, byte ptr [ebp+var_20]
.text:0041B3C3                 shl     edx, cl
.text:0041B3C5                 mov     edi, edx
.text:0041B3C7                 movzx   ecx, byte ptr [ebp+var_24]
.text:0041B3CB                 mov     edx, ebx
.text:0041B3CD                 shr     eax, cl
.text:0041B3CF                 movzx   ecx, byte ptr [ebp+var_20]
.text:0041B3D3                 or      edi, eax
.text:0041B3D5                 mov     eax, [ebp+var_1C]
.text:0041B3D8                 shl     esi, cl
.text:0041B3DA                 movzx   ecx, byte ptr [ebp+var_24]
.text:0041B3DE                 shr     edx, cl
.text:0041B3E0                 movzx   ecx, byte ptr [ebp+var_20]
.text:0041B3E4                 shl     ebx, cl
.text:0041B3E6                 movzx   ecx, byte ptr [ebp+var_24]
.text:0041B3EA                 shr     eax, cl
.text:0041B3EC                 or      ebx, eax
.text:0041B3EE                 movzx   ecx, byte ptr [ebp+var_20]
.text:0041B3F2                 mov     eax, ebx
.text:0041B3F4                 div     edi
.text:0041B3F6                 mov     ebx, edx
.text:0041B3F8                 mov     edi, eax
.text:0041B3FA                 shl     [ebp+var_1C], cl
.text:0041B3FD                 mul     esi
.text:0041B3FF                 cmp     edx, ebx
.text:0041B401                 ja      short loc_41B414
.text:0041B403                 cmp     edx, ebx
.text:0041B405                 jnz     loc_41B340
.text:0041B40B                 cmp     eax, [ebp+var_1C]
.text:0041B40E                 jbe     loc_41B340
.text:0041B414
.text:0041B414 loc_41B414:                             ; CODE XREF: sub_41B300+101↑j
.text:0041B414                 dec     edi
.text:0041B415                 jmp     loc_41B340
.text:0041B415 sub_41B300      endp
.text:0041B415
.text:0041B415 ; ---------------------------------------------------------------------------
.text:0041B41A                 align 10h
.text:0041B420
.text:0041B420 ; =============== S U B R O U T I N E =======================================
.text:0041B420
.text:0041B420 ; Attributes: bp-based frame
.text:0041B420
.text:0041B420 sub_41B420      proc near               ; CODE XREF: sub_40ACC0+585↑p
.text:0041B420                                         ; sub_40ACC0+5FE↑p ...
.text:0041B420
.text:0041B420 var_34          = dword ptr -34h
.text:0041B420 var_2C          = dword ptr -2Ch
.text:0041B420 var_28          = dword ptr -28h
.text:0041B420 var_24          = dword ptr -24h
.text:0041B420 var_20          = dword ptr -20h
.text:0041B420 var_1C          = dword ptr -1Ch
.text:0041B420 var_18          = dword ptr -18h
.text:0041B420 var_14          = dword ptr -14h
.text:0041B420 arg_0           = dword ptr  8
.text:0041B420 arg_4           = dword ptr  0Ch
.text:0041B420 arg_8           = dword ptr  10h
.text:0041B420 arg_C           = dword ptr  14h
.text:0041B420
.text:0041B420                 push    ebp
.text:0041B421                 mov     ebp, esp
.text:0041B423                 push    edi
.text:0041B424                 push    esi
.text:0041B425                 push    ebx
.text:0041B426                 sub     esp, 2Ch
.text:0041B429                 mov     edx, [ebp+arg_C]
.text:0041B42C                 mov     [ebp+var_20], 0
.text:0041B433                 mov     ecx, [ebp+arg_0]
.text:0041B436                 mov     ebx, [ebp+arg_4]
.text:0041B439                 mov     [ebp+var_1C], 0
.text:0041B440                 mov     eax, [ebp+arg_8]
.text:0041B443                 test    edx, edx
.text:0041B445                 mov     [ebp+var_24], edx
.text:0041B448                 mov     edi, ebx
.text:0041B44A                 mov     esi, eax
.text:0041B44C                 mov     [ebp+var_28], ecx
.text:0041B44F                 jnz     short loc_41B4B0
.text:0041B451                 cmp     eax, ebx
.text:0041B453                 jbe     short loc_41B490
.text:0041B455                 mov     eax, ecx
.text:0041B457                 mov     edx, ebx
.text:0041B459                 div     esi
.text:0041B45B
.text:0041B45B loc_41B45B:                             ; CODE XREF: sub_41B420+8B↓j
.text:0041B45B                 mov     [ebp+var_28], edx
.text:0041B45E                 lea     ecx, [ebp+var_18]
.text:0041B461                 test    ecx, ecx
.text:0041B463                 jz      short loc_41B47E
.text:0041B465                 mov     [ebp+var_1C], 0
.text:0041B46C
.text:0041B46C loc_41B46C:                             ; CODE XREF: sub_41B420+DA↓j
.text:0041B46C                 mov     eax, [ebp+var_28]
.text:0041B46F                 mov     [ebp+var_20], eax
.text:0041B472                 mov     edx, [ebp+var_20]
.text:0041B475                 mov     ecx, [ebp+var_1C]
.text:0041B478                 mov     [ebp+var_18], edx
.text:0041B47B                 mov     [ebp+var_14], ecx
.text:0041B47E
.text:0041B47E loc_41B47E:                             ; CODE XREF: sub_41B420+43↑j
.text:0041B47E                                         ; sub_41B420+A7↓j ...
.text:0041B47E                 mov     eax, [ebp+var_18]
.text:0041B481                 mov     edx, [ebp+var_14]
.text:0041B484                 add     esp, 2Ch
.text:0041B487                 pop     ebx
.text:0041B488                 pop     esi
.text:0041B489                 pop     edi
.text:0041B48A                 pop     ebp
.text:0041B48B                 retn
.text:0041B48B ; ---------------------------------------------------------------------------
.text:0041B48C                 align 10h
.text:0041B490
.text:0041B490 loc_41B490:                             ; CODE XREF: sub_41B420+33↑j
.text:0041B490                 test    eax, eax
.text:0041B492                 jnz     short loc_41B49F
.text:0041B494                 mov     eax, 1
.text:0041B499                 xor     edx, edx
.text:0041B49B                 div     esi
.text:0041B49D                 mov     esi, eax
.text:0041B49F
.text:0041B49F loc_41B49F:                             ; CODE XREF: sub_41B420+72↑j
.text:0041B49F                 mov     eax, edi
.text:0041B4A1                 mov     edx, [ebp+var_24]
.text:0041B4A4                 div     esi
.text:0041B4A6                 mov     eax, [ebp+var_28]
.text:0041B4A9                 div     esi
.text:0041B4AB                 jmp     short loc_41B45B
.text:0041B4AB ; ---------------------------------------------------------------------------
.text:0041B4AD                 align 10h
.text:0041B4B0
.text:0041B4B0 loc_41B4B0:                             ; CODE XREF: sub_41B420+2F↑j
.text:0041B4B0                 cmp     [ebp+var_24], ebx
.text:0041B4B3                 jbe     short loc_41B4D0
.text:0041B4B5                 mov     [ebp+var_20], ecx
.text:0041B4B8
.text:0041B4B8 loc_41B4B8:                             ; CODE XREF: sub_41B420+15B↓j
.text:0041B4B8                 mov     [ebp+var_1C], edi
.text:0041B4BB                 mov     eax, [ebp+var_20]
.text:0041B4BE                 mov     edx, [ebp+var_1C]
.text:0041B4C1                 mov     [ebp+var_18], eax
.text:0041B4C4                 mov     [ebp+var_14], edx
.text:0041B4C7                 jmp     short loc_41B47E
.text:0041B4C7 ; ---------------------------------------------------------------------------
.text:0041B4C9                 align 10h
.text:0041B4D0
.text:0041B4D0 loc_41B4D0:                             ; CODE XREF: sub_41B420+93↑j
.text:0041B4D0                 bsr     eax, [ebp+var_24]
.text:0041B4D4                 mov     ebx, eax
.text:0041B4D6                 xor     ebx, 1Fh
.text:0041B4D9                 jnz     short loc_41B500
.text:0041B4DB                 cmp     edi, [ebp+var_24]
.text:0041B4DE                 ja      short loc_41B4E5
.text:0041B4E0                 cmp     [ebp+var_28], esi
.text:0041B4E3                 jb      short loc_41B4F0
.text:0041B4E5
.text:0041B4E5 loc_41B4E5:                             ; CODE XREF: sub_41B420+BE↑j
.text:0041B4E5                 mov     edx, [ebp+var_28]
.text:0041B4E8                 sub     edx, esi
.text:0041B4EA                 sbb     edi, [ebp+var_24]
.text:0041B4ED                 mov     [ebp+var_28], edx
.text:0041B4F0
.text:0041B4F0 loc_41B4F0:                             ; CODE XREF: sub_41B420+C3↑j
.text:0041B4F0                 lea     ecx, [ebp+var_18]
.text:0041B4F3                 test    ecx, ecx
.text:0041B4F5                 jz      short loc_41B47E
.text:0041B4F7                 mov     [ebp+var_1C], edi
.text:0041B4FA                 jmp     loc_41B46C
.text:0041B4FA ; ---------------------------------------------------------------------------
.text:0041B4FF                 align 10h
.text:0041B500
.text:0041B500 loc_41B500:                             ; CODE XREF: sub_41B420+B9↑j
.text:0041B500                 mov     edx, [ebp+var_24]
.text:0041B503                 mov     eax, 20h ; ' '
.text:0041B508                 mov     cl, bl
.text:0041B50A                 sub     eax, ebx
.text:0041B50C                 mov     [ebp+var_2C], eax
.text:0041B50F                 shl     edx, cl
.text:0041B511                 mov     eax, esi
.text:0041B513                 movzx   ecx, byte ptr [ebp+var_2C]
.text:0041B517                 shr     eax, cl
.text:0041B519                 mov     cl, bl
.text:0041B51B                 shl     esi, cl
.text:0041B51D                 or      edx, eax
.text:0041B51F                 mov     eax, [ebp+var_28]
.text:0041B522                 movzx   ecx, byte ptr [ebp+var_2C]
.text:0041B526                 mov     [ebp+var_24], edx
.text:0041B529                 mov     edx, edi
.text:0041B52B                 shr     edx, cl
.text:0041B52D                 mov     cl, bl
.text:0041B52F                 shl     edi, cl
.text:0041B531                 movzx   ecx, byte ptr [ebp+var_2C]
.text:0041B535                 shr     eax, cl
.text:0041B537                 or      edi, eax
.text:0041B539                 mov     eax, edi
.text:0041B53B                 mov     cl, bl
.text:0041B53D                 div     [ebp+var_24]
.text:0041B540                 shl     [ebp+var_28], cl
.text:0041B543                 mov     edi, edx
.text:0041B545                 mul     esi
.text:0041B547                 mov     [ebp+var_34], eax
.text:0041B54A                 cmp     edx, edi
.text:0041B54C                 ja      short loc_41B588
.text:0041B54E                 cmp     edx, edi
.text:0041B550                 jz      short loc_41B580
.text:0041B552
.text:0041B552 loc_41B552:                             ; CODE XREF: sub_41B420+166↓j
.text:0041B552                                         ; sub_41B420+173↓j
.text:0041B552                 lea     eax, [ebp+var_18]
.text:0041B555                 test    eax, eax
.text:0041B557                 jz      loc_41B47E
.text:0041B55D                 movzx   ecx, byte ptr [ebp+var_2C]
.text:0041B561                 mov     eax, [ebp+var_28]
.text:0041B564                 sub     eax, [ebp+var_34]
.text:0041B567                 sbb     edi, edx
.text:0041B569                 mov     [ebp+var_28], eax
.text:0041B56C                 mov     edx, edi
.text:0041B56E                 shl     edx, cl
.text:0041B570                 mov     cl, bl
.text:0041B572                 shr     eax, cl
.text:0041B574                 or      edx, eax
.text:0041B576                 mov     [ebp+var_20], edx
.text:0041B579                 shr     edi, cl
.text:0041B57B                 jmp     loc_41B4B8
.text:0041B580 ; ---------------------------------------------------------------------------
.text:0041B580
.text:0041B580 loc_41B580:                             ; CODE XREF: sub_41B420+130↑j
.text:0041B580                 mov     eax, [ebp+var_28]
.text:0041B583                 cmp     [ebp+var_34], eax
.text:0041B586                 jbe     short loc_41B552
.text:0041B588
.text:0041B588 loc_41B588:                             ; CODE XREF: sub_41B420+12C↑j
.text:0041B588                 mov     ecx, [ebp+var_34]
.text:0041B58B                 sub     ecx, esi
.text:0041B58D                 sbb     edx, [ebp+var_24]
.text:0041B590                 mov     [ebp+var_34], ecx
.text:0041B593                 jmp     short loc_41B552
.text:0041B593 sub_41B420      endp
.text:0041B593
.text:0041B593 ; ---------------------------------------------------------------------------
.text:0041B595                 align 10h
.text:0041B5A0
.text:0041B5A0 ; =============== S U B R O U T I N E =======================================
.text:0041B5A0
.text:0041B5A0 ; Attributes: thunk
.text:0041B5A0
.text:0041B5A0 ; int __cdecl stricmp(const char *String1, const char *String2)
.text:0041B5A0 _stricmp        proc near               ; CODE XREF: sub_40B570+46F↑p
.text:0041B5A0                                         ; sub_40D4F0+2E↑p ...
.text:0041B5A0
.text:0041B5A0 String1         = dword ptr  4
.text:0041B5A0 String2         = dword ptr  8
.text:0041B5A0
.text:0041B5A0                 jmp     ds:__imp__stricmp
.text:0041B5A0 _stricmp        endp
.text:0041B5A0
.text:0041B5A0 ; ---------------------------------------------------------------------------
.text:0041B5A6                 align 10h
.text:0041B5B0
.text:0041B5B0 ; =============== S U B R O U T I N E =======================================
.text:0041B5B0
.text:0041B5B0 ; Attributes: thunk
.text:0041B5B0
.text:0041B5B0 ; char *__cdecl strdup(const char *String)
.text:0041B5B0 _strdup         proc near               ; CODE XREF: sub_40D120+101↑p
.text:0041B5B0                                         ; .text:0040D38A↑p ...
.text:0041B5B0
.text:0041B5B0 String          = dword ptr  4
.text:0041B5B0
.text:0041B5B0                 jmp     ds:__imp__strdup
.text:0041B5B0 _strdup         endp
.text:0041B5B0
.text:0041B5B0 ; ---------------------------------------------------------------------------
.text:0041B5B6                 align 10h
.text:0041B5C0
.text:0041B5C0 ; =============== S U B R O U T I N E =======================================
.text:0041B5C0
.text:0041B5C0 ; Attributes: thunk
.text:0041B5C0
.text:0041B5C0 ; int __cdecl getpid()
.text:0041B5C0 _getpid         proc near               ; CODE XREF: sub_4192C0+84↑p
.text:0041B5C0                 jmp     ds:__imp__getpid
.text:0041B5C0 _getpid         endp
.text:0041B5C0
.text:0041B5C0 ; ---------------------------------------------------------------------------
.text:0041B5C6                 align 10h
.text:0041B5D0
.text:0041B5D0 ; =============== S U B R O U T I N E =======================================
.text:0041B5D0
.text:0041B5D0 ; Attributes: thunk
.text:0041B5D0
.text:0041B5D0 ; int __cdecl chmod(const char *FileName, int AccessMode)
.text:0041B5D0 _chmod          proc near               ; CODE XREF: sub_4196F0+41↑j
.text:0041B5D0
.text:0041B5D0 FileName        = dword ptr  4
.text:0041B5D0 AccessMode      = dword ptr  8
.text:0041B5D0
.text:0041B5D0                 jmp     ds:__imp__chmod
.text:0041B5D0 _chmod          endp
.text:0041B5D0
.text:0041B5D0 ; ---------------------------------------------------------------------------
.text:0041B5D6                 align 10h
.text:0041B5E0
.text:0041B5E0 ; =============== S U B R O U T I N E =======================================
.text:0041B5E0
.text:0041B5E0 ; Attributes: info_from_lumina
.text:0041B5E0
.text:0041B5E0 ; unsigned __int64 __cdecl strtoull(const char *String, char **EndPtr, int Radix)
.text:0041B5E0 _strtoull       proc near               ; CODE XREF: sub_401910+5CE↑p
.text:0041B5E0                                         ; sub_401910+68A↑p ...
.text:0041B5E0
.text:0041B5E0 C               = dword ptr -3Ch
.text:0041B5E0 Type            = dword ptr -38h
.text:0041B5E0 var_34          = dword ptr -34h
.text:0041B5E0 var_30          = dword ptr -30h
.text:0041B5E0 var_2C          = dword ptr -2Ch
.text:0041B5E0 var_28          = dword ptr -28h
.text:0041B5E0 var_24          = dword ptr -24h
.text:0041B5E0 var_20          = dword ptr -20h
.text:0041B5E0 var_1C          = dword ptr -1Ch
.text:0041B5E0 var_18          = dword ptr -18h
.text:0041B5E0 String          = dword ptr  4
.text:0041B5E0 EndPtr          = dword ptr  8
.text:0041B5E0 Radix           = dword ptr  0Ch
.text:0041B5E0
.text:0041B5E0                 push    ebp
.text:0041B5E1                 push    edi
.text:0041B5E2                 push    esi
.text:0041B5E3                 push    ebx
.text:0041B5E4                 sub     esp, 2Ch
.text:0041B5E7                 mov     edx, [esp+3Ch+EndPtr]
.text:0041B5EB                 test    edx, edx
.text:0041B5ED                 jz      short loc_41B5F9
.text:0041B5EF                 mov     eax, [esp+3Ch+String]
.text:0041B5F3                 mov     ecx, [esp+3Ch+EndPtr]
.text:0041B5F7                 mov     [ecx], eax
.text:0041B5F9
.text:0041B5F9 loc_41B5F9:                             ; CODE XREF: _strtoull+D↑j
.text:0041B5F9                 mov     edx, [esp+3Ch+Radix]
.text:0041B5FD                 test    edx, edx
.text:0041B5FF                 js      short loc_41B60F
.text:0041B601                 cmp     [esp+3Ch+Radix], 1
.text:0041B606                 jz      short loc_41B60F
.text:0041B608                 cmp     [esp+3Ch+Radix], 24h ; '$'
.text:0041B60D                 jle     short loc_41B626
.text:0041B60F
.text:0041B60F loc_41B60F:                             ; CODE XREF: _strtoull+1F↑j
.text:0041B60F                                         ; _strtoull+26↑j
.text:0041B60F                 call    _errno
.text:0041B614                 mov     dword ptr [eax], 21h ; '!'
.text:0041B61A
.text:0041B61A loc_41B61A:                             ; CODE XREF: _strtoull+FF↓j
.text:0041B61A                                         ; _strtoull+109↓j
.text:0041B61A                 xor     eax, eax
.text:0041B61C                 xor     edx, edx
.text:0041B61E
.text:0041B61E loc_41B61E:                             ; CODE XREF: _strtoull+244↓j
.text:0041B61E                                         ; _strtoull+251↓j ...
.text:0041B61E                 add     esp, 2Ch
.text:0041B621                 pop     ebx
.text:0041B622                 pop     esi
.text:0041B623                 pop     edi
.text:0041B624                 pop     ebp
.text:0041B625                 retn
.text:0041B626 ; ---------------------------------------------------------------------------
.text:0041B626
.text:0041B626 loc_41B626:                             ; CODE XREF: _strtoull+2D↑j
.text:0041B626                 mov     ecx, ds:__mb_cur_max
.text:0041B62C                 lea     esi, [esi+0]
.text:0041B630
.text:0041B630 loc_41B630:                             ; CODE XREF: _strtoull+7E↓j
.text:0041B630                 cmp     dword ptr [ecx], 1
.text:0041B633                 mov     esi, [esp+3Ch+String]
.text:0041B637                 movsx   edx, byte ptr [esi]
.text:0041B63A                 jz      loc_41BA12
.text:0041B640                 mov     [esp+3Ch+Type], 8 ; Type
.text:0041B648                 mov     [esp+3Ch+C], edx ; C
.text:0041B64B                 call    _isctype
.text:0041B650                 mov     ecx, ds:__mb_cur_max
.text:0041B656
.text:0041B656 loc_41B656:                             ; CODE XREF: _strtoull+445↓j
.text:0041B656                 test    eax, eax
.text:0041B658                 jz      short loc_41B660
.text:0041B65A                 inc     [esp+3Ch+String]
.text:0041B65E                 jmp     short loc_41B630
.text:0041B660 ; ---------------------------------------------------------------------------
.text:0041B660
.text:0041B660 loc_41B660:                             ; CODE XREF: _strtoull+78↑j
.text:0041B660                 mov     esi, [esp+3Ch+String]
.text:0041B664                 xor     ebx, ebx
.text:0041B666                 movzx   edx, byte ptr [esi]
.text:0041B669                 cmp     dl, 2Dh ; '-'
.text:0041B66C                 setz    bl
.text:0041B66F                 test    ebx, ebx
.text:0041B671                 mov     [esp+3Ch+var_20], ebx
.text:0041B675                 jnz     loc_41BA02
.text:0041B67B                 cmp     dl, 2Bh ; '+'
.text:0041B67E                 jz      loc_41BA02
.text:0041B684
.text:0041B684 loc_41B684:                             ; CODE XREF: _strtoull+42D↓j
.text:0041B684                 mov     ebp, [esp+3Ch+Radix]
.text:0041B688                 test    ebp, ebp
.text:0041B68A                 jnz     short loc_41B69D
.text:0041B68C                 cmp     dl, 30h ; '0'
.text:0041B68F                 jz      loc_41B9D9
.text:0041B695                 mov     [esp+3Ch+Radix], 0Ah
.text:0041B69D
.text:0041B69D loc_41B69D:                             ; CODE XREF: _strtoull+AA↑j
.text:0041B69D                                         ; _strtoull+40F↓j ...
.text:0041B69D                 cmp     [esp+3Ch+Radix], 10h
.text:0041B6A2                 jz      loc_41B9AB
.text:0041B6A8
.text:0041B6A8 loc_41B6A8:                             ; CODE XREF: _strtoull+3CE↓j
.text:0041B6A8                                         ; _strtoull+3E2↓j ...
.text:0041B6A8                 cmp     dword ptr [ecx], 1
.text:0041B6AB                 movsx   ebx, dl
.text:0041B6AE                 jz      loc_41B993
.text:0041B6B4                 mov     [esp+3Ch+Type], 4 ; Type
.text:0041B6BC                 mov     [esp+3Ch+C], ebx ; C
.text:0041B6BF                 call    _isctype
.text:0041B6C4                 mov     esi, [esp+3Ch+String]
.text:0041B6C8                 movzx   edx, byte ptr [esi]
.text:0041B6CB
.text:0041B6CB loc_41B6CB:                             ; CODE XREF: _strtoull+3C6↓j
.text:0041B6CB                 test    eax, eax
.text:0041B6CD                 jz      loc_41B8FC
.text:0041B6D3                 movsx   eax, dl
.text:0041B6D6                 sub     eax, 30h ; '0'
.text:0041B6D9
.text:0041B6D9 loc_41B6D9:                             ; CODE XREF: _strtoull+34B↓j
.text:0041B6D9                                         ; _strtoull+37C↓j ...
.text:0041B6D9                 inc     [esp+3Ch+String]
.text:0041B6DD                 test    eax, eax
.text:0041B6DF                 js      loc_41B61A
.text:0041B6E5                 cmp     eax, [esp+3Ch+Radix]
.text:0041B6E9                 jge     loc_41B61A
.text:0041B6EF                 mov     [esp+3Ch+var_1C], eax
.text:0041B6F3                 mov     edx, eax
.text:0041B6F5                 sar     edx, 1Fh
.text:0041B6F8                 mov     [esp+3Ch+var_18], edx
.text:0041B6FC                 mov     [esp+3Ch+var_24], 0
.text:0041B704                 lea     esi, [esi+0]
.text:0041B70A                 lea     edi, [edi+0]
.text:0041B710
.text:0041B710 loc_41B710:                             ; CODE XREF: _strtoull+20C↓j
.text:0041B710                 mov     ebp, [esp+3Ch+String]
.text:0041B714                 mov     ebx, ds:__mb_cur_max
.text:0041B71A                 movzx   edx, byte ptr [ebp+0]
.text:0041B71E                 cmp     dword ptr [ebx], 1
.text:0041B721                 movsx   ecx, dl
.text:0041B724                 jz      loc_41B8E5
.text:0041B72A                 mov     [esp+3Ch+C], ecx ; C
.text:0041B72D                 mov     [esp+3Ch+Type], 4 ; Type
.text:0041B735                 call    _isctype
.text:0041B73A                 mov     ecx, [esp+3Ch+String]
.text:0041B73E                 movzx   edx, byte ptr [ecx]
.text:0041B741
.text:0041B741 loc_41B741:                             ; CODE XREF: _strtoull+317↓j
.text:0041B741                 test    eax, eax
.text:0041B743                 jz      loc_41B850
.text:0041B749                 movsx   edi, dl
.text:0041B74C                 lea     ebp, [edi-30h]
.text:0041B74F
.text:0041B74F loc_41B74F:                             ; CODE XREF: _strtoull+2A3↓j
.text:0041B74F                 test    ebp, ebp
.text:0041B751                 js      loc_41B7FB
.text:0041B757                 cmp     ebp, [esp+3Ch+Radix]
.text:0041B75B                 jge     loc_41B7FB
.text:0041B761                 mov     [esp+3Ch+C], 0FFFFFFFFh
.text:0041B768                 mov     eax, [esp+3Ch+Radix]
.text:0041B76C                 mov     [esp+3Ch+Type], 0FFFFFFFFh
.text:0041B774                 cdq
.text:0041B775                 mov     esi, eax
.text:0041B777                 mov     [esp+3Ch+var_34], eax
.text:0041B77B                 mov     edi, edx
.text:0041B77D                 mov     [esp+3Ch+var_30], edx
.text:0041B781                 call    sub_41B300
.text:0041B786                 add     eax, 1
.text:0041B789                 adc     edx, 0
.text:0041B78C                 cmp     [esp+3Ch+var_18], edx
.text:0041B790                 ja      short loc_41B7E0
.text:0041B792                 jb      short loc_41B79A
.text:0041B794                 cmp     [esp+3Ch+var_1C], eax
.text:0041B798                 ja      short loc_41B7E0
.text:0041B79A
.text:0041B79A loc_41B79A:                             ; CODE XREF: _strtoull+1B2↑j
.text:0041B79A                 mov     eax, [esp+3Ch+var_1C]
.text:0041B79E                 mov     ebx, ebp
.text:0041B7A0                 mul     esi
.text:0041B7A2                 mov     ecx, edx
.text:0041B7A4                 mov     [esp+3Ch+var_2C], eax
.text:0041B7A8                 mov     eax, [esp+3Ch+var_18]
.text:0041B7AC                 mov     [esp+3Ch+var_28], edx
.text:0041B7B0                 imul    eax, esi
.text:0041B7B3                 mov     esi, [esp+3Ch+var_1C]
.text:0041B7B7                 imul    esi, edi
.text:0041B7BA                 add     ecx, eax
.text:0041B7BC                 lea     edi, [esi+ecx]
.text:0041B7BF                 mov     esi, ebp
.text:0041B7C1                 sar     esi, 1Fh
.text:0041B7C4                 add     ebx, [esp+3Ch+var_2C]
.text:0041B7C8                 mov     [esp+3Ch+var_28], edi
.text:0041B7CC                 adc     esi, [esp+3Ch+var_28]
.text:0041B7D0                 cmp     esi, [esp+3Ch+var_18]
.text:0041B7D4                 jb      short loc_41B7E0
.text:0041B7D6                 ja      short loc_41B7F1
.text:0041B7D8                 cmp     ebx, [esp+3Ch+var_1C]
.text:0041B7DC                 jnb     short loc_41B7F1
.text:0041B7DE                 mov     esi, esi
.text:0041B7E0
.text:0041B7E0 loc_41B7E0:                             ; CODE XREF: _strtoull+1B0↑j
.text:0041B7E0                                         ; _strtoull+1B8↑j ...
.text:0041B7E0                 mov     [esp+3Ch+var_24], 1
.text:0041B7E8
.text:0041B7E8 loc_41B7E8:                             ; CODE XREF: _strtoull+219↓j
.text:0041B7E8                 inc     [esp+3Ch+String]
.text:0041B7EC                 jmp     loc_41B710
.text:0041B7F1 ; ---------------------------------------------------------------------------
.text:0041B7F1
.text:0041B7F1 loc_41B7F1:                             ; CODE XREF: _strtoull+1F6↑j
.text:0041B7F1                                         ; _strtoull+1FC↑j
.text:0041B7F1                 mov     [esp+3Ch+var_1C], ebx
.text:0041B7F5                 mov     [esp+3Ch+var_18], esi
.text:0041B7F9                 jmp     short loc_41B7E8
.text:0041B7FB ; ---------------------------------------------------------------------------
.text:0041B7FB
.text:0041B7FB loc_41B7FB:                             ; CODE XREF: _strtoull+171↑j
.text:0041B7FB                                         ; _strtoull+17B↑j
.text:0041B7FB                 mov     eax, [esp+3Ch+EndPtr]
.text:0041B7FF                 test    eax, eax
.text:0041B801                 jz      short loc_41B80E
.text:0041B803                 mov     ecx, [esp+3Ch+String]
.text:0041B807                 mov     ebp, [esp+3Ch+EndPtr]
.text:0041B80B                 mov     [ebp+0], ecx
.text:0041B80E
.text:0041B80E loc_41B80E:                             ; CODE XREF: _strtoull+221↑j
.text:0041B80E                 mov     esi, [esp+3Ch+var_24]
.text:0041B812                 test    esi, esi
.text:0041B814                 jnz     short loc_41B836
.text:0041B816                 mov     ebx, [esp+3Ch+var_20]
.text:0041B81A                 mov     eax, [esp+3Ch+var_1C]
.text:0041B81E                 mov     edx, [esp+3Ch+var_18]
.text:0041B822                 test    ebx, ebx
.text:0041B824                 jz      loc_41B61E
.text:0041B82A                 neg     eax
.text:0041B82C                 adc     edx, 0
.text:0041B82F                 neg     edx
.text:0041B831                 jmp     loc_41B61E
.text:0041B836 ; ---------------------------------------------------------------------------
.text:0041B836
.text:0041B836 loc_41B836:                             ; CODE XREF: _strtoull+234↑j
.text:0041B836                 call    _errno
.text:0041B83B                 mov     edx, 0FFFFFFFFh
.text:0041B840                 mov     dword ptr [eax], 22h ; '"'
.text:0041B846                 mov     eax, 0FFFFFFFFh
.text:0041B84B                 jmp     loc_41B61E
.text:0041B850 ; ---------------------------------------------------------------------------
.text:0041B850
.text:0041B850 loc_41B850:                             ; CODE XREF: _strtoull+163↑j
.text:0041B850                 mov     ebp, ds:__mb_cur_max
.text:0041B856                 movsx   ecx, dl
.text:0041B859                 cmp     dword ptr [ebp+0], 1
.text:0041B85D                 jz      short loc_41B8D1
.text:0041B85F                 mov     [esp+3Ch+Type], 1 ; Type
.text:0041B867                 mov     [esp+3Ch+C], ecx ; C
.text:0041B86A                 call    _isctype
.text:0041B86F                 mov     ebp, [esp+3Ch+String]
.text:0041B873                 movzx   edx, byte ptr [ebp+0]
.text:0041B877
.text:0041B877 loc_41B877:                             ; CODE XREF: _strtoull+303↓j
.text:0041B877                 test    eax, eax
.text:0041B879                 jz      short loc_41B888
.text:0041B87B                 movsx   eax, dl
.text:0041B87E                 sub     eax, 37h ; '7'
.text:0041B881
.text:0041B881 loc_41B881:                             ; CODE XREF: _strtoull+2D4↓j
.text:0041B881                                         ; _strtoull+2DB↓j
.text:0041B881                 mov     ebp, eax
.text:0041B883                 jmp     loc_41B74F
.text:0041B888 ; ---------------------------------------------------------------------------
.text:0041B888
.text:0041B888 loc_41B888:                             ; CODE XREF: _strtoull+299↑j
.text:0041B888                 mov     ecx, ds:__mb_cur_max
.text:0041B88E                 movsx   edx, dl
.text:0041B891                 cmp     dword ptr [ecx], 1
.text:0041B894                 jz      short loc_41B8BD
.text:0041B896                 mov     [esp+3Ch+Type], 2 ; Type
.text:0041B89E                 mov     [esp+3Ch+C], edx ; C
.text:0041B8A1                 call    _isctype
.text:0041B8A6
.text:0041B8A6 loc_41B8A6:                             ; CODE XREF: _strtoull+2EF↓j
.text:0041B8A6                 test    eax, eax
.text:0041B8A8                 jz      short loc_41B8B6
.text:0041B8AA                 mov     edx, [esp+3Ch+String]
.text:0041B8AE                 movsx   eax, byte ptr [edx]
.text:0041B8B1                 sub     eax, 57h ; 'W'
.text:0041B8B4                 jmp     short loc_41B881
.text:0041B8B6 ; ---------------------------------------------------------------------------
.text:0041B8B6
.text:0041B8B6 loc_41B8B6:                             ; CODE XREF: _strtoull+2C8↑j
.text:0041B8B6                 mov     eax, 0FFFFFFFFh
.text:0041B8BB                 jmp     short loc_41B881
.text:0041B8BD ; ---------------------------------------------------------------------------
.text:0041B8BD
.text:0041B8BD loc_41B8BD:                             ; CODE XREF: _strtoull+2B4↑j
.text:0041B8BD                 mov     edi, ds:_pctype
.text:0041B8C3                 mov     ebx, [edi]
.text:0041B8C5                 movzx   esi, word ptr [ebx+edx*2]
.text:0041B8C9                 and     esi, 2
.text:0041B8CC                 movzx   eax, si
.text:0041B8CF                 jmp     short loc_41B8A6
.text:0041B8D1 ; ---------------------------------------------------------------------------
.text:0041B8D1
.text:0041B8D1 loc_41B8D1:                             ; CODE XREF: _strtoull+27D↑j
.text:0041B8D1                 mov     edi, ds:_pctype
.text:0041B8D7                 mov     ebx, [edi]
.text:0041B8D9                 movzx   esi, word ptr [ebx+ecx*2]
.text:0041B8DD                 and     esi, 1
.text:0041B8E0                 movzx   eax, si
.text:0041B8E3                 jmp     short loc_41B877
.text:0041B8E5 ; ---------------------------------------------------------------------------
.text:0041B8E5
.text:0041B8E5 loc_41B8E5:                             ; CODE XREF: _strtoull+144↑j
.text:0041B8E5                 mov     ebx, ds:_pctype
.text:0041B8EB                 mov     esi, [ebx]
.text:0041B8ED                 movzx   edi, word ptr [esi+ecx*2]
.text:0041B8F1                 and     edi, 4
.text:0041B8F4                 movzx   eax, di
.text:0041B8F7                 jmp     loc_41B741
.text:0041B8FC ; ---------------------------------------------------------------------------
.text:0041B8FC
.text:0041B8FC loc_41B8FC:                             ; CODE XREF: _strtoull+ED↑j
.text:0041B8FC                 mov     ebx, ds:__mb_cur_max
.text:0041B902                 movsx   ecx, dl
.text:0041B905                 cmp     dword ptr [ebx], 1
.text:0041B908                 jz      short loc_41B97F
.text:0041B90A                 mov     [esp+3Ch+C], ecx ; C
.text:0041B90D                 mov     [esp+3Ch+Type], 1 ; Type
.text:0041B915                 call    _isctype
.text:0041B91A                 mov     ecx, [esp+3Ch+String]
.text:0041B91E                 movzx   edx, byte ptr [ecx]
.text:0041B921
.text:0041B921 loc_41B921:                             ; CODE XREF: _strtoull+3B1↓j
.text:0041B921                 test    eax, eax
.text:0041B923                 jz      short loc_41B930
.text:0041B925                 movsx   eax, dl
.text:0041B928                 sub     eax, 37h ; '7'
.text:0041B92B                 jmp     loc_41B6D9
.text:0041B930 ; ---------------------------------------------------------------------------
.text:0041B930
.text:0041B930 loc_41B930:                             ; CODE XREF: _strtoull+343↑j
.text:0041B930                 mov     ebx, ds:__mb_cur_max
.text:0041B936                 movsx   edx, dl
.text:0041B939                 cmp     dword ptr [ebx], 1
.text:0041B93C                 jz      short loc_41B96B
.text:0041B93E                 mov     [esp+3Ch+Type], 2 ; Type
.text:0041B946                 mov     [esp+3Ch+C], edx ; C
.text:0041B949                 call    _isctype
.text:0041B94E
.text:0041B94E loc_41B94E:                             ; CODE XREF: _strtoull+39D↓j
.text:0041B94E                 test    eax, eax
.text:0041B950                 jz      short loc_41B961
.text:0041B952                 mov     ecx, [esp+3Ch+String]
.text:0041B956                 movsx   eax, byte ptr [ecx]
.text:0041B959                 sub     eax, 57h ; 'W'
.text:0041B95C                 jmp     loc_41B6D9
.text:0041B961 ; ---------------------------------------------------------------------------
.text:0041B961
.text:0041B961 loc_41B961:                             ; CODE XREF: _strtoull+370↑j
.text:0041B961                 mov     eax, 0FFFFFFFFh
.text:0041B966                 jmp     loc_41B6D9
.text:0041B96B ; ---------------------------------------------------------------------------
.text:0041B96B
.text:0041B96B loc_41B96B:                             ; CODE XREF: _strtoull+35C↑j
.text:0041B96B                 mov     esi, ds:_pctype
.text:0041B971                 mov     edi, [esi]
.text:0041B973                 movzx   ebp, word ptr [edi+edx*2]
.text:0041B977                 and     ebp, 2
.text:0041B97A                 movzx   eax, bp
.text:0041B97D                 jmp     short loc_41B94E
.text:0041B97F ; ---------------------------------------------------------------------------
.text:0041B97F
.text:0041B97F loc_41B97F:                             ; CODE XREF: _strtoull+328↑j
.text:0041B97F                 mov     esi, ds:_pctype
.text:0041B985                 mov     edi, [esi]
.text:0041B987                 movzx   ebp, word ptr [edi+ecx*2]
.text:0041B98B                 and     ebp, 1
.text:0041B98E                 movzx   eax, bp
.text:0041B991                 jmp     short loc_41B921
.text:0041B993 ; ---------------------------------------------------------------------------
.text:0041B993
.text:0041B993 loc_41B993:                             ; CODE XREF: _strtoull+CE↑j
.text:0041B993                 mov     edi, ds:_pctype
.text:0041B999                 mov     ebp, [edi]
.text:0041B99B                 movzx   ecx, word ptr [ebp+ebx*2+0]
.text:0041B9A0                 and     ecx, 4
.text:0041B9A3                 movzx   eax, cx
.text:0041B9A6                 jmp     loc_41B6CB
.text:0041B9AB ; ---------------------------------------------------------------------------
.text:0041B9AB
.text:0041B9AB loc_41B9AB:                             ; CODE XREF: _strtoull+C2↑j
.text:0041B9AB                 cmp     dl, 30h ; '0'
.text:0041B9AE                 jnz     loc_41B6A8
.text:0041B9B4                 mov     esi, [esp+3Ch+String]
.text:0041B9B8                 movzx   eax, byte ptr [esi+1]
.text:0041B9BC                 cmp     al, 58h ; 'X'
.text:0041B9BE                 jz      short loc_41B9C8
.text:0041B9C0                 cmp     al, 78h ; 'x'
.text:0041B9C2                 jnz     loc_41B6A8
.text:0041B9C8
.text:0041B9C8 loc_41B9C8:                             ; CODE XREF: _strtoull+3DE↑j
.text:0041B9C8                 add     [esp+3Ch+String], 2
.text:0041B9CD                 mov     ebx, [esp+3Ch+String]
.text:0041B9D1                 movzx   edx, byte ptr [ebx]
.text:0041B9D4                 jmp     loc_41B6A8
.text:0041B9D9 ; ---------------------------------------------------------------------------
.text:0041B9D9
.text:0041B9D9 loc_41B9D9:                             ; CODE XREF: _strtoull+AF↑j
.text:0041B9D9                 mov     edi, [esp+3Ch+String]
.text:0041B9DD                 movzx   eax, byte ptr [edi+1]
.text:0041B9E1                 cmp     al, 58h ; 'X'
.text:0041B9E3                 jz      short loc_41B9F5
.text:0041B9E5                 mov     [esp+3Ch+Radix], 8
.text:0041B9ED                 cmp     al, 78h ; 'x'
.text:0041B9EF                 jnz     loc_41B69D
.text:0041B9F5
.text:0041B9F5 loc_41B9F5:                             ; CODE XREF: _strtoull+403↑j
.text:0041B9F5                 mov     [esp+3Ch+Radix], 10h
.text:0041B9FD                 jmp     loc_41B69D
.text:0041BA02 ; ---------------------------------------------------------------------------
.text:0041BA02
.text:0041BA02 loc_41BA02:                             ; CODE XREF: _strtoull+95↑j
.text:0041BA02                                         ; _strtoull+9E↑j
.text:0041BA02                 inc     [esp+3Ch+String]
.text:0041BA06                 mov     eax, [esp+3Ch+String]
.text:0041BA0A                 movzx   edx, byte ptr [eax]
.text:0041BA0D                 jmp     loc_41B684
.text:0041BA12 ; ---------------------------------------------------------------------------
.text:0041BA12
.text:0041BA12 loc_41BA12:                             ; CODE XREF: _strtoull+5A↑j
.text:0041BA12                 mov     ebp, ds:_pctype
.text:0041BA18                 mov     edi, [ebp+0]
.text:0041BA1B                 movzx   ebx, word ptr [edi+edx*2]
.text:0041BA1F                 and     ebx, 8
.text:0041BA22                 movzx   eax, bx
.text:0041BA25                 jmp     loc_41B656
.text:0041BA25 _strtoull       endp
.text:0041BA25
.text:0041BA25 ; ---------------------------------------------------------------------------
.text:0041BA2A                 align 10h
.text:0041BA30                 jmp     ds:__set_app_type
.text:0041BA30 ; ---------------------------------------------------------------------------
.text:0041BA36                 align 10h
.text:0041BA40
.text:0041BA40 ; =============== S U B R O U T I N E =======================================
.text:0041BA40
.text:0041BA40 ; Attributes: thunk
.text:0041BA40
.text:0041BA40 ; void __cdecl cexit()
.text:0041BA40 _cexit          proc near               ; CODE XREF: sub_401080+EC↑p
.text:0041BA40                 jmp     ds:__imp__cexit
.text:0041BA40 _cexit          endp
.text:0041BA40
.text:0041BA40 ; ---------------------------------------------------------------------------
.text:0041BA46                 align 10h
.text:0041BA50
.text:0041BA50 ; =============== S U B R O U T I N E =======================================
.text:0041BA50
.text:0041BA50 ; Attributes: thunk
.text:0041BA50
.text:0041BA50 ; char ***__cdecl _p__environ()
.text:0041BA50 __p__environ    proc near               ; CODE XREF: sub_401080+C7↑p
.text:0041BA50                 jmp     ds:__imp___p__environ
.text:0041BA50 __p__environ    endp
.text:0041BA50
.text:0041BA50 ; ---------------------------------------------------------------------------
.text:0041BA56                 align 10h
.text:0041BA60
.text:0041BA60 ; =============== S U B R O U T I N E =======================================
.text:0041BA60
.text:0041BA60 ; Attributes: thunk
.text:0041BA60
.text:0041BA60 ; _crt_signal_t __cdecl signal(int Signal, _crt_signal_t Function)
.text:0041BA60 signal          proc near               ; CODE XREF: TopLevelExceptionFilter+4D↑p
.text:0041BA60                                         ; TopLevelExceptionFilter+88↑p ...
.text:0041BA60
.text:0041BA60 Signal          = dword ptr  4
.text:0041BA60 Function        = dword ptr  8
.text:0041BA60
.text:0041BA60                 jmp     ds:__imp_signal
.text:0041BA60 signal          endp
.text:0041BA60
.text:0041BA60 ; ---------------------------------------------------------------------------
.text:0041BA66                 align 10h
.text:0041BA70
.text:0041BA70 ; =============== S U B R O U T I N E =======================================
.text:0041BA70
.text:0041BA70 ; Attributes: thunk
.text:0041BA70
.text:0041BA70 ; int *__cdecl _p__fmode()
.text:0041BA70 __p__fmode      proc near               ; CODE XREF: sub_401080:loc_401135↑p
.text:0041BA70                 jmp     ds:__imp___p__fmode
.text:0041BA70 __p__fmode      endp
.text:0041BA70
.text:0041BA70 ; ---------------------------------------------------------------------------
.text:0041BA76                 align 10h
.text:0041BA80
.text:0041BA80 ; =============== S U B R O U T I N E =======================================
.text:0041BA80
.text:0041BA80 ; Attributes: thunk
.text:0041BA80
.text:0041BA80 ; int __cdecl setmode(int FileHandle, int Mode)
.text:0041BA80 _setmode        proc near               ; CODE XREF: sub_401080+70↑p
.text:0041BA80                                         ; sub_401080+90↑p ...
.text:0041BA80
.text:0041BA80 FileHandle      = dword ptr  4
.text:0041BA80 Mode            = dword ptr  8
.text:0041BA80
.text:0041BA80                 jmp     ds:__imp__setmode
.text:0041BA80 _setmode        endp
.text:0041BA80
.text:0041BA80 ; ---------------------------------------------------------------------------
.text:0041BA86                 align 10h
.text:0041BA90
.text:0041BA90 ; =============== S U B R O U T I N E =======================================
.text:0041BA90
.text:0041BA90 ; Attributes: thunk
.text:0041BA90
.text:0041BA90 __getmainargs   proc near               ; CODE XREF: sub_401080+49↑p
.text:0041BA90                 jmp     ds:__imp___getmainargs
.text:0041BA90 __getmainargs   endp
.text:0041BA90
.text:0041BA90 ; ---------------------------------------------------------------------------
.text:0041BA96                 align 10h
.text:0041BAA0
.text:0041BAA0 ; =============== S U B R O U T I N E =======================================
.text:0041BAA0
.text:0041BAA0 ; Attributes: thunk
.text:0041BAA0
.text:0041BAA0 ; int __cdecl fputs(const char *Buffer, FILE *Stream)
.text:0041BAA0 fputs           proc near               ; CODE XREF: sub_4060C0+7C↑p
.text:0041BAA0                                         ; sub_4060C0+9E↑p ...
.text:0041BAA0
.text:0041BAA0 Buffer          = dword ptr  4
.text:0041BAA0 Stream          = dword ptr  8
.text:0041BAA0
.text:0041BAA0                 jmp     ds:__imp_fputs
.text:0041BAA0 fputs           endp
.text:0041BAA0
.text:0041BAA0 ; ---------------------------------------------------------------------------
.text:0041BAA6                 align 10h
.text:0041BAB0
.text:0041BAB0 ; =============== S U B R O U T I N E =======================================
.text:0041BAB0
.text:0041BAB0 ; Attributes: thunk
.text:0041BAB0
.text:0041BAB0 ; int fprintf(FILE *const Stream, const char *const Format, ...)
.text:0041BAB0 fprintf         proc near               ; CODE XREF: sub_4060C0+33↑p
.text:0041BAB0                                         ; sub_4073A0+33B↑p ...
.text:0041BAB0
.text:0041BAB0 Stream          = dword ptr  4
.text:0041BAB0 Format          = dword ptr  8
.text:0041BAB0
.text:0041BAB0                 jmp     ds:__imp_fprintf
.text:0041BAB0 fprintf         endp
.text:0041BAB0
.text:0041BAB0 ; ---------------------------------------------------------------------------
.text:0041BAB6                 align 10h
.text:0041BAC0
.text:0041BAC0 ; =============== S U B R O U T I N E =======================================
.text:0041BAC0
.text:0041BAC0 ; Attributes: thunk
.text:0041BAC0
.text:0041BAC0 ; int __cdecl puts(const char *Buffer)
.text:0041BAC0 puts            proc near               ; CODE XREF: sub_403EF0+569↑p
.text:0041BAC0                                         ; sub_403EF0+81E↑p ...
.text:0041BAC0
.text:0041BAC0 Buffer          = dword ptr  4
.text:0041BAC0
.text:0041BAC0                 jmp     ds:__imp_puts
.text:0041BAC0 puts            endp
.text:0041BAC0
.text:0041BAC0 ; ---------------------------------------------------------------------------
.text:0041BAC6                 align 10h
.text:0041BAD0
.text:0041BAD0 ; =============== S U B R O U T I N E =======================================
.text:0041BAD0
.text:0041BAD0 ; Attributes: thunk
.text:0041BAD0
.text:0041BAD0 ; int printf(const char *const Format, ...)
.text:0041BAD0 printf          proc near               ; CODE XREF: sub_403EF0+246↑p
.text:0041BAD0                                         ; sub_403EF0+75E↑p ...
.text:0041BAD0
.text:0041BAD0 Format          = dword ptr  4
.text:0041BAD0
.text:0041BAD0                 jmp     ds:__imp_printf
.text:0041BAD0 printf          endp
.text:0041BAD0
.text:0041BAD0 ; ---------------------------------------------------------------------------
.text:0041BAD6                 align 10h
.text:0041BAE0
.text:0041BAE0 ; =============== S U B R O U T I N E =======================================
.text:0041BAE0
.text:0041BAE0 ; Attributes: thunk
.text:0041BAE0
.text:0041BAE0 ; int __cdecl ungetc(int Character, FILE *Stream)
.text:0041BAE0 ungetc          proc near               ; CODE XREF: sub_403790+65↑p
.text:0041BAE0                                         ; sub_403EF0+440↑p ...
.text:0041BAE0
.text:0041BAE0 Character       = dword ptr  4
.text:0041BAE0 Stream          = dword ptr  8
.text:0041BAE0
.text:0041BAE0                 jmp     ds:__imp_ungetc
.text:0041BAE0 ungetc          endp
.text:0041BAE0
.text:0041BAE0 ; ---------------------------------------------------------------------------
.text:0041BAE6                 align 10h
.text:0041BAF0
.text:0041BAF0 ; =============== S U B R O U T I N E =======================================
.text:0041BAF0
.text:0041BAF0 ; Attributes: thunk
.text:0041BAF0
.text:0041BAF0 ; size_t __cdecl strftime(char *Buffer, size_t SizeInBytes, const char *Format, const struct tm *Tm)
.text:0041BAF0 strftime        proc near               ; CODE XREF: sub_402BB0+98↑p
.text:0041BAF0
.text:0041BAF0 Buffer          = dword ptr  4
.text:0041BAF0 SizeInBytes     = dword ptr  8
.text:0041BAF0 Format          = dword ptr  0Ch
.text:0041BAF0 Tm              = dword ptr  10h
.text:0041BAF0
.text:0041BAF0                 jmp     ds:__imp_strftime
.text:0041BAF0 strftime        endp
.text:0041BAF0
.text:0041BAF0 ; ---------------------------------------------------------------------------
.text:0041BAF6                 align 10h
.text:0041BB00
.text:0041BB00 ; =============== S U B R O U T I N E =======================================
.text:0041BB00
.text:0041BB00 ; Attributes: thunk
.text:0041BB00
.text:0041BB00 ; int sprintf(char *const Buffer, const char *const Format, ...)
.text:0041BB00 sprintf         proc near               ; CODE XREF: sub_402BB0+15B↑p
.text:0041BB00                                         ; sub_403530+3D↑p ...
.text:0041BB00
.text:0041BB00 Buffer          = dword ptr  4
.text:0041BB00 Format          = dword ptr  8
.text:0041BB00
.text:0041BB00                 jmp     ds:__imp_sprintf
.text:0041BB00 sprintf         endp
.text:0041BB00
.text:0041BB00 ; ---------------------------------------------------------------------------
.text:0041BB06                 align 10h
.text:0041BB10
.text:0041BB10 ; =============== S U B R O U T I N E =======================================
.text:0041BB10
.text:0041BB10 ; Attributes: thunk
.text:0041BB10
.text:0041BB10 ; struct tm *__cdecl localtime(const __time32_t *const Time)
.text:0041BB10 localtime       proc near               ; CODE XREF: sub_402BB0+70↑p
.text:0041BB10
.text:0041BB10 Time            = dword ptr  4
.text:0041BB10
.text:0041BB10                 jmp     ds:__imp_localtime
.text:0041BB10 localtime       endp
.text:0041BB10
.text:0041BB10 ; ---------------------------------------------------------------------------
.text:0041BB16                 align 10h
.text:0041BB20
.text:0041BB20 ; =============== S U B R O U T I N E =======================================
.text:0041BB20
.text:0041BB20 ; Attributes: thunk
.text:0041BB20
.text:0041BB20 ; __time32_t __cdecl time(__time32_t *const Time)
.text:0041BB20 time            proc near               ; CODE XREF: sub_402BB0+51↑p
.text:0041BB20
.text:0041BB20 Time            = dword ptr  4
.text:0041BB20
.text:0041BB20                 jmp     ds:__imp_time
.text:0041BB20 time            endp
.text:0041BB20
.text:0041BB20 ; ---------------------------------------------------------------------------
.text:0041BB26                 align 10h
.text:0041BB30
.text:0041BB30 ; =============== S U B R O U T I N E =======================================
.text:0041BB30
.text:0041BB30 ; Attributes: thunk
.text:0041BB30
.text:0041BB30 ; void __cdecl free(void *Block)
.text:0041BB30 free            proc near               ; CODE XREF: sub_402BB0+13F↑p
.text:0041BB30                                         ; sub_403280+83↑p ...
.text:0041BB30
.text:0041BB30 Block           = dword ptr  4
.text:0041BB30
.text:0041BB30                 jmp     ds:__imp_free
.text:0041BB30 free            endp
.text:0041BB30
.text:0041BB30 ; ---------------------------------------------------------------------------
.text:0041BB36                 align 10h
.text:0041BB40
.text:0041BB40 ; =============== S U B R O U T I N E =======================================
.text:0041BB40
.text:0041BB40 ; Attributes: thunk
.text:0041BB40
.text:0041BB40 ; int __cdecl fclose(FILE *Stream)
.text:0041BB40 fclose          proc near               ; CODE XREF: sub_401910+E96↑p
.text:0041BB40                                         ; sub_406DB0+28↑p ...
.text:0041BB40
.text:0041BB40 Stream          = dword ptr  4
.text:0041BB40
.text:0041BB40                 jmp     ds:__imp_fclose
.text:0041BB40 fclose          endp
.text:0041BB40
.text:0041BB40 ; ---------------------------------------------------------------------------
.text:0041BB46                 align 10h
.text:0041BB50
.text:0041BB50 ; =============== S U B R O U T I N E =======================================
.text:0041BB50
.text:0041BB50 ; Attributes: thunk
.text:0041BB50
.text:0041BB50 ; char *__cdecl getenv(const char *VarName)
.text:0041BB50 getenv          proc near               ; CODE XREF: sub_401910+FAC↑p
.text:0041BB50                                         ; sub_4073A0+B57↑p ...
.text:0041BB50
.text:0041BB50 VarName         = dword ptr  4
.text:0041BB50
.text:0041BB50                 jmp     ds:__imp_getenv
.text:0041BB50 getenv          endp
.text:0041BB50
.text:0041BB50 ; ---------------------------------------------------------------------------
.text:0041BB56                 align 10h
.text:0041BB60
.text:0041BB60 ; =============== S U B R O U T I N E =======================================
.text:0041BB60
.text:0041BB60 ; Attributes: noreturn thunk
.text:0041BB60
.text:0041BB60 ; void __cdecl __noreturn exit(int Code)
.text:0041BB60 exit            proc near               ; CODE XREF: sub_401910:loc_402019↑p
.text:0041BB60                                         ; sub_4060C0+3B↑p ...
.text:0041BB60
.text:0041BB60 Code            = dword ptr  4
.text:0041BB60
.text:0041BB60                 jmp     ds:__imp_exit
.text:0041BB60 exit            endp
.text:0041BB60
.text:0041BB60 ; ---------------------------------------------------------------------------
.text:0041BB66                 align 10h
.text:0041BB70
.text:0041BB70 ; =============== S U B R O U T I N E =======================================
.text:0041BB70
.text:0041BB70 ; Attributes: thunk
.text:0041BB70
.text:0041BB70 ; char *__cdecl setlocale(int Category, const char *Locale)
.text:0041BB70 setlocale       proc near               ; CODE XREF: sub_401910+5F↑p
.text:0041BB70                                         ; sub_408450+24↑p
.text:0041BB70
.text:0041BB70 Category        = dword ptr  4
.text:0041BB70 Locale          = dword ptr  8
.text:0041BB70
.text:0041BB70                 jmp     ds:__imp_setlocale
.text:0041BB70 setlocale       endp
.text:0041BB70
.text:0041BB70 ; ---------------------------------------------------------------------------
.text:0041BB76                 align 10h
.text:0041BB80
.text:0041BB80 ; =============== S U B R O U T I N E =======================================
.text:0041BB80
.text:0041BB80 ; Attributes: thunk
.text:0041BB80
.text:0041BB80 ; char *__cdecl strcpy(char *Destination, const char *Source)
.text:0041BB80 strcpy          proc near               ; CODE XREF: sub_401910+80C↑p
.text:0041BB80                                         ; sub_40ACC0+2D3↑p ...
.text:0041BB80
.text:0041BB80 Destination     = dword ptr  4
.text:0041BB80 Source          = dword ptr  8
.text:0041BB80
.text:0041BB80                 jmp     ds:__imp_strcpy
.text:0041BB80 strcpy          endp
.text:0041BB80
.text:0041BB80 ; ---------------------------------------------------------------------------
.text:0041BB86                 align 10h
.text:0041BB90
.text:0041BB90 ; =============== S U B R O U T I N E =======================================
.text:0041BB90
.text:0041BB90 ; Attributes: thunk
.text:0041BB90
.text:0041BB90 ; size_t __cdecl strlen(const char *Str)
.text:0041BB90 strlen          proc near               ; CODE XREF: sub_401910+7ED↑p
.text:0041BB90                                         ; sub_407120+E↑p ...
.text:0041BB90
.text:0041BB90 Str             = dword ptr  4
.text:0041BB90
.text:0041BB90                 jmp     ds:__imp_strlen
.text:0041BB90 strlen          endp
.text:0041BB90
.text:0041BB90 ; ---------------------------------------------------------------------------
.text:0041BB96                 align 10h
.text:0041BBA0
.text:0041BBA0 ; =============== S U B R O U T I N E =======================================
.text:0041BBA0
.text:0041BBA0 ; Attributes: thunk
.text:0041BBA0
.text:0041BBA0 ; int *__cdecl errno()
.text:0041BBA0 _errno          proc near               ; CODE XREF: sub_401910+5AE↑p
.text:0041BBA0                                         ; sub_401910+5D9↑p ...
.text:0041BBA0                 jmp     ds:__imp__errno
.text:0041BBA0 _errno          endp
.text:0041BBA0
.text:0041BBA0 ; ---------------------------------------------------------------------------
.text:0041BBA6                 align 10h
.text:0041BBB0
.text:0041BBB0 ; =============== S U B R O U T I N E =======================================
.text:0041BBB0
.text:0041BBB0 ; Attributes: thunk
.text:0041BBB0
.text:0041BBB0 ; int __cdecl isctype(int C, int Type)
.text:0041BBB0 _isctype        proc near               ; CODE XREF: sub_4047B0+356↑p
.text:0041BBB0                                         ; sub_404D00+4E↑p ...
.text:0041BBB0
.text:0041BBB0 C               = dword ptr  4
.text:0041BBB0 Type            = dword ptr  8
.text:0041BBB0
.text:0041BBB0                 jmp     ds:__imp__isctype
.text:0041BBB0 _isctype        endp
.text:0041BBB0
.text:0041BBB0 ; ---------------------------------------------------------------------------
.text:0041BBB6                 align 10h
.text:0041BBC0
.text:0041BBC0 ; =============== S U B R O U T I N E =======================================
.text:0041BBC0
.text:0041BBC0 ; Attributes: thunk
.text:0041BBC0
.text:0041BBC0 ; FILE *__cdecl fopen(const char *FileName, const char *Mode)
.text:0041BBC0 fopen           proc near               ; CODE XREF: sub_402A20+CE↑p
.text:0041BBC0                                         ; sub_40FA1F+26↑p ...
.text:0041BBC0
.text:0041BBC0 FileName        = dword ptr  4
.text:0041BBC0 Mode            = dword ptr  8
.text:0041BBC0
.text:0041BBC0                 jmp     ds:__imp_fopen
.text:0041BBC0 fopen           endp
.text:0041BBC0
.text:0041BBC0 ; ---------------------------------------------------------------------------
.text:0041BBC6                 align 10h
.text:0041BBD0
.text:0041BBD0 ; =============== S U B R O U T I N E =======================================
.text:0041BBD0
.text:0041BBD0 ; Attributes: thunk
.text:0041BBD0
.text:0041BBD0 ; int __cdecl flsbuf(int Ch, FILE *File)
.text:0041BBD0 _flsbuf         proc near               ; CODE XREF: sub_402D20+2E0↑p
.text:0041BBD0                                         ; sub_402D20+405↑p ...
.text:0041BBD0
.text:0041BBD0 File            = dword ptr  8
.text:0041BBD0
.text:0041BBD0                 jmp     ds:__imp__flsbuf
.text:0041BBD0 _flsbuf         endp
.text:0041BBD0
.text:0041BBD0 ; ---------------------------------------------------------------------------
.text:0041BBD6                 align 10h
.text:0041BBE0
.text:0041BBE0 ; =============== S U B R O U T I N E =======================================
.text:0041BBE0
.text:0041BBE0 ; Attributes: thunk
.text:0041BBE0
.text:0041BBE0 ; int __cdecl filbuf(FILE *File)
.text:0041BBE0 _filbuf         proc near               ; CODE XREF: sub_403790+CA↑p
.text:0041BBE0                                         ; sub_403790+D6↑p ...
.text:0041BBE0
.text:0041BBE0 File            = dword ptr  4
.text:0041BBE0
.text:0041BBE0                 jmp     ds:__imp__filbuf
.text:0041BBE0 _filbuf         endp
.text:0041BBE0
.text:0041BBE0 ; ---------------------------------------------------------------------------
.text:0041BBE6                 align 10h
.text:0041BBF0
.text:0041BBF0 ; =============== S U B R O U T I N E =======================================
.text:0041BBF0
.text:0041BBF0 ; Attributes: thunk
.text:0041BBF0
.text:0041BBF0 ; int __cdecl iswctype(wint_t C, wctype_t Type)
.text:0041BBF0 iswctype        proc near               ; CODE XREF: sub_406F40+E2↑p
.text:0041BBF0                                         ; sub_409450+78B↑p
.text:0041BBF0
.text:0041BBF0 C               = word ptr  4
.text:0041BBF0 Type            = word ptr  8
.text:0041BBF0
.text:0041BBF0                 jmp     ds:__imp_iswctype
.text:0041BBF0 iswctype        endp
.text:0041BBF0
.text:0041BBF0 ; ---------------------------------------------------------------------------
.text:0041BBF6                 align 10h
.text:0041BC00
.text:0041BC00 ; =============== S U B R O U T I N E =======================================
.text:0041BC00
.text:0041BC00 ; Attributes: thunk
.text:0041BC00
.text:0041BC00 ; int __cdecl strncmp(const char *Str1, const char *Str2, size_t MaxCount)
.text:0041BC00 strncmp         proc near               ; CODE XREF: sub_4073A0+23F↑p
.text:0041BC00                                         ; sub_4073A0+699↑p
.text:0041BC00
.text:0041BC00 Str1            = dword ptr  4
.text:0041BC00 Str2            = dword ptr  8
.text:0041BC00 MaxCount        = dword ptr  0Ch
.text:0041BC00
.text:0041BC00                 jmp     ds:__imp_strncmp
.text:0041BC00 strncmp         endp
.text:0041BC00
.text:0041BC00 ; ---------------------------------------------------------------------------
.text:0041BC06                 align 10h
.text:0041BC10
.text:0041BC10 ; =============== S U B R O U T I N E =======================================
.text:0041BC10
.text:0041BC10 ; Attributes: thunk
.text:0041BC10
.text:0041BC10 ; char *__cdecl strchr(const char *Str, int Val)
.text:0041BC10 strchr          proc near               ; CODE XREF: sub_4073A0+469↑p
.text:0041BC10                                         ; sub_4073A0+53A↑p ...
.text:0041BC10
.text:0041BC10 Str             = dword ptr  4
.text:0041BC10 Val             = dword ptr  8
.text:0041BC10
.text:0041BC10                 jmp     ds:__imp_strchr
.text:0041BC10 strchr          endp
.text:0041BC10
.text:0041BC10 ; ---------------------------------------------------------------------------
.text:0041BC16                 align 10h
.text:0041BC20
.text:0041BC20 ; =============== S U B R O U T I N E =======================================
.text:0041BC20
.text:0041BC20 ; Attributes: thunk
.text:0041BC20
.text:0041BC20 ; void *__cdecl memcpy(void *, const void *Src, size_t Size)
.text:0041BC20 memcpy          proc near               ; CODE XREF: .text:00408358↑p
.text:0041BC20                                         ; sub_408370+31↑p
.text:0041BC20
.text:0041BC20 Src             = dword ptr  8
.text:0041BC20 Size            = dword ptr  0Ch
.text:0041BC20
.text:0041BC20                 jmp     ds:__imp_memcpy
.text:0041BC20 memcpy          endp
.text:0041BC20
.text:0041BC20 ; ---------------------------------------------------------------------------
.text:0041BC26                 align 10h
.text:0041BC30
.text:0041BC30 ; =============== S U B R O U T I N E =======================================
.text:0041BC30
.text:0041BC30 ; Attributes: thunk
.text:0041BC30
.text:0041BC30 ; void *__cdecl memset(void *, int Val, size_t Size)
.text:0041BC30 memset          proc near               ; CODE XREF: .text:004082D6↑p
.text:0041BC30
.text:0041BC30 Val             = dword ptr  8
.text:0041BC30 Size            = dword ptr  0Ch
.text:0041BC30
.text:0041BC30                 jmp     ds:__imp_memset
.text:0041BC30 memset          endp
.text:0041BC30
.text:0041BC30 ; ---------------------------------------------------------------------------
.text:0041BC36                 align 10h
.text:0041BC40
.text:0041BC40 ; =============== S U B R O U T I N E =======================================
.text:0041BC40
.text:0041BC40 ; Attributes: thunk
.text:0041BC40
.text:0041BC40 ; void *__cdecl calloc(size_t Count, size_t Size)
.text:0041BC40 calloc          proc near               ; CODE XREF: .text:00408313↑p
.text:0041BC40                                         ; sub_40D120+AC↑p
.text:0041BC40
.text:0041BC40 Count           = dword ptr  4
.text:0041BC40 Size            = dword ptr  8
.text:0041BC40
.text:0041BC40                 jmp     ds:__imp_calloc
.text:0041BC40 calloc          endp
.text:0041BC40
.text:0041BC40 ; ---------------------------------------------------------------------------
.text:0041BC46                 align 10h
.text:0041BC50
.text:0041BC50 ; =============== S U B R O U T I N E =======================================
.text:0041BC50
.text:0041BC50 ; Attributes: thunk
.text:0041BC50
.text:0041BC50 ; void *__cdecl realloc(void *Block, size_t Size)
.text:0041BC50 realloc         proc near               ; CODE XREF: .text:00408210↑p
.text:0041BC50                                         ; sub_408240+16↑p ...
.text:0041BC50
.text:0041BC50 Block           = dword ptr  4
.text:0041BC50 Size            = dword ptr  8
.text:0041BC50
.text:0041BC50                 jmp     ds:__imp_realloc
.text:0041BC50 realloc         endp
.text:0041BC50
.text:0041BC50 ; ---------------------------------------------------------------------------
.text:0041BC56                 align 10h
.text:0041BC60
.text:0041BC60 ; =============== S U B R O U T I N E =======================================
.text:0041BC60
.text:0041BC60 ; Attributes: thunk
.text:0041BC60
.text:0041BC60 ; void *__cdecl malloc(size_t Size)
.text:0041BC60 malloc          proc near               ; CODE XREF: sub_408170+24↑p
.text:0041BC60                                         ; sub_4081B0+E↑p ...
.text:0041BC60
.text:0041BC60 Size            = dword ptr  4
.text:0041BC60
.text:0041BC60                 jmp     ds:__imp_malloc
.text:0041BC60 malloc          endp
.text:0041BC60
.text:0041BC60 ; ---------------------------------------------------------------------------
.text:0041BC66                 align 10h
.text:0041BC70
.text:0041BC70 ; =============== S U B R O U T I N E =======================================
.text:0041BC70
.text:0041BC70 ; Attributes: thunk
.text:0041BC70
.text:0041BC70 ; int __cdecl vfprintf(FILE *const Stream, const char *const Format, va_list ArgList)
.text:0041BC70 vfprintf        proc near               ; CODE XREF: sub_4087B0+C1↑p
.text:0041BC70                                         ; sub_40A7B0+49↑p ...
.text:0041BC70
.text:0041BC70 Stream          = dword ptr  4
.text:0041BC70 Format          = dword ptr  8
.text:0041BC70 ArgList         = dword ptr  0Ch
.text:0041BC70
.text:0041BC70                 jmp     ds:__imp_vfprintf
.text:0041BC70 vfprintf        endp
.text:0041BC70
.text:0041BC70 ; ---------------------------------------------------------------------------
.text:0041BC76                 align 10h
.text:0041BC80
.text:0041BC80 ; =============== S U B R O U T I N E =======================================
.text:0041BC80
.text:0041BC80 ; Attributes: noreturn thunk
.text:0041BC80
.text:0041BC80 ; void __cdecl __noreturn abort()
.text:0041BC80 abort           proc near               ; CODE XREF: sub_4087B0:loc_40884C↑p
.text:0041BC80                                         ; sub_409380+32↑p ...
.text:0041BC80                 jmp     ds:__imp_abort
.text:0041BC80 abort           endp
.text:0041BC80
.text:0041BC80 ; ---------------------------------------------------------------------------
.text:0041BC86                 align 10h
.text:0041BC90
.text:0041BC90 ; =============== S U B R O U T I N E =======================================
.text:0041BC90
.text:0041BC90 ; Attributes: thunk
.text:0041BC90
.text:0041BC90 ; int __cdecl strtol(const char *String, char **EndPtr, int Radix)
.text:0041BC90 strtol          proc near               ; CODE XREF: sub_408A30+46↑p
.text:0041BC90                                         ; sub_409300+43↑p
.text:0041BC90
.text:0041BC90 String          = dword ptr  4
.text:0041BC90 EndPtr          = dword ptr  8
.text:0041BC90 Radix           = dword ptr  0Ch
.text:0041BC90
.text:0041BC90                 jmp     ds:__imp_strtol
.text:0041BC90 strtol          endp
.text:0041BC90
.text:0041BC90 ; ---------------------------------------------------------------------------
.text:0041BC96                 align 10h
.text:0041BCA0
.text:0041BCA0 ; =============== S U B R O U T I N E =======================================
.text:0041BCA0
.text:0041BCA0 ; Attributes: noreturn thunk
.text:0041BCA0
.text:0041BCA0 _assert         proc near               ; CODE XREF: sub_408A30+660↑p
.text:0041BCA0                                         ; sub_4192C0+414↑p
.text:0041BCA0                 jmp     ds:__imp__assert
.text:0041BCA0 _assert         endp
.text:0041BCA0
.text:0041BCA0 ; ---------------------------------------------------------------------------
.text:0041BCA6                 align 10h
.text:0041BCB0
.text:0041BCB0 ; =============== S U B R O U T I N E =======================================
.text:0041BCB0
.text:0041BCB0 ; Attributes: thunk
.text:0041BCB0
.text:0041BCB0 ; int __cdecl strcmp(const char *Str1, const char *Str2)
.text:0041BCB0 strcmp          proc near               ; CODE XREF: sub_40A8B4+180↑p
.text:0041BCB0                                         ; .text:0040EEDB↑p
.text:0041BCB0
.text:0041BCB0 Str1            = dword ptr  4
.text:0041BCB0 Str2            = dword ptr  8
.text:0041BCB0
.text:0041BCB0                 jmp     ds:__imp_strcmp
.text:0041BCB0 strcmp          endp
.text:0041BCB0
.text:0041BCB0 ; ---------------------------------------------------------------------------
.text:0041BCB6                 align 10h
.text:0041BCC0
.text:0041BCC0 ; =============== S U B R O U T I N E =======================================
.text:0041BCC0
.text:0041BCC0 ; Attributes: thunk
.text:0041BCC0
.text:0041BCC0 ; int __cdecl fflush(FILE *Stream)
.text:0041BCC0 fflush          proc near               ; CODE XREF: sub_40A7B0+19↑p
.text:0041BCC0                                         ; sub_40A7B0+81↑p ...
.text:0041BCC0
.text:0041BCC0 Stream          = dword ptr  4
.text:0041BCC0
.text:0041BCC0                 jmp     ds:__imp_fflush
.text:0041BCC0 fflush          endp
.text:0041BCC0
.text:0041BCC0 ; ---------------------------------------------------------------------------
.text:0041BCC6                 align 10h
.text:0041BCD0
.text:0041BCD0 ; =============== S U B R O U T I N E =======================================
.text:0041BCD0
.text:0041BCD0 ; Attributes: thunk
.text:0041BCD0
.text:0041BCD0 ; char *__cdecl strerror(int ErrorMessage)
.text:0041BCD0 strerror        proc near               ; CODE XREF: sub_40A7B0+A5↑p
.text:0041BCD0                                         ; sub_40A8B4+10F↑p
.text:0041BCD0
.text:0041BCD0 ErrorMessage    = dword ptr  4
.text:0041BCD0
.text:0041BCD0                 jmp     ds:__imp_strerror
.text:0041BCD0 strerror        endp
.text:0041BCD0
.text:0041BCD0 ; ---------------------------------------------------------------------------
.text:0041BCD6                 align 10h
.text:0041BCE0
.text:0041BCE0 ; =============== S U B R O U T I N E =======================================
.text:0041BCE0
.text:0041BCE0 ; Attributes: thunk
.text:0041BCE0
.text:0041BCE0 ; char *__cdecl ctime(const __time32_t *const Time)
.text:0041BCE0 ctime           proc near               ; CODE XREF: .text:0040AC1D↑p
.text:0041BCE0                                         ; .text:0040AC3F↑p ...
.text:0041BCE0
.text:0041BCE0 Time            = dword ptr  4
.text:0041BCE0
.text:0041BCE0                 jmp     ds:__imp_ctime
.text:0041BCE0 ctime           endp
.text:0041BCE0
.text:0041BCE0 ; ---------------------------------------------------------------------------
.text:0041BCE6                 align 10h
.text:0041BCF0
.text:0041BCF0 ; =============== S U B R O U T I N E =======================================
.text:0041BCF0
.text:0041BCF0 ; Attributes: thunk
.text:0041BCF0
.text:0041BCF0 ; intptr_t __cdecl get_osfhandle(int FileHandle)
.text:0041BCF0 _get_osfhandle  proc near               ; CODE XREF: sub_40ACC0+3A↑p
.text:0041BCF0                                         ; sub_40FBB0+15↑p
.text:0041BCF0
.text:0041BCF0 FileHandle      = dword ptr  4
.text:0041BCF0
.text:0041BCF0                 jmp     ds:__imp__get_osfhandle
.text:0041BCF0 _get_osfhandle  endp
.text:0041BCF0
.text:0041BCF0 ; ---------------------------------------------------------------------------
.text:0041BCF6                 align 10h
.text:0041BD00
.text:0041BD00 ; =============== S U B R O U T I N E =======================================
.text:0041BD00
.text:0041BD00 ; Attributes: thunk
.text:0041BD00
.text:0041BD00 ; char *__cdecl strcat(char *Destination, const char *Source)
.text:0041BD00 strcat          proc near               ; CODE XREF: sub_40ACC0+2F8↑p
.text:0041BD00                                         ; .text:0040E693↑p ...
.text:0041BD00
.text:0041BD00 Destination     = dword ptr  4
.text:0041BD00 Source          = dword ptr  8
.text:0041BD00
.text:0041BD00                 jmp     ds:__imp_strcat
.text:0041BD00 strcat          endp
.text:0041BD00
.text:0041BD00 ; ---------------------------------------------------------------------------
.text:0041BD06                 align 10h
.text:0041BD10
.text:0041BD10 ; =============== S U B R O U T I N E =======================================
.text:0041BD10
.text:0041BD10 ; Attributes: thunk
.text:0041BD10
.text:0041BD10 ; char *__cdecl strstr(const char *Str, const char *SubStr)
.text:0041BD10 strstr          proc near               ; CODE XREF: sub_40B570+3BF↑p
.text:0041BD10                                         ; sub_40B570+3DC↑p ...
.text:0041BD10
.text:0041BD10 Str             = dword ptr  4
.text:0041BD10 SubStr          = dword ptr  8
.text:0041BD10
.text:0041BD10                 jmp     ds:__imp_strstr
.text:0041BD10 strstr          endp
.text:0041BD10
.text:0041BD10 ; ---------------------------------------------------------------------------
.text:0041BD16                 align 10h
.text:0041BD20
.text:0041BD20 ; =============== S U B R O U T I N E =======================================
.text:0041BD20
.text:0041BD20 ; Attributes: thunk
.text:0041BD20
.text:0041BD20 ; char *__cdecl strrchr(const char *Str, int Ch)
.text:0041BD20 strrchr         proc near               ; CODE XREF: sub_40B570+CB↑p
.text:0041BD20                                         ; sub_40B570+3A7↑p ...
.text:0041BD20
.text:0041BD20 Str             = dword ptr  4
.text:0041BD20
.text:0041BD20                 jmp     ds:__imp_strrchr
.text:0041BD20 strrchr         endp
.text:0041BD20
.text:0041BD20 ; ---------------------------------------------------------------------------
.text:0041BD26                 align 10h
.text:0041BD30
.text:0041BD30 ; =============== S U B R O U T I N E =======================================
.text:0041BD30
.text:0041BD30 ; Attributes: thunk
.text:0041BD30
.text:0041BD30 ; int __cdecl isalpha(int C)
.text:0041BD30 isalpha         proc near               ; CODE XREF: _win32_longpath+25↑p
.text:0041BD30
.text:0041BD30 C               = dword ptr  4
.text:0041BD30
.text:0041BD30                 jmp     ds:__imp_isalpha
.text:0041BD30 isalpha         endp
.text:0041BD30
.text:0041BD30 ; ---------------------------------------------------------------------------
.text:0041BD36                 align 10h
.text:0041BD40
.text:0041BD40 ; =============== S U B R O U T I N E =======================================
.text:0041BD40
.text:0041BD40 ; Attributes: thunk
.text:0041BD40
.text:0041BD40 ; int __cdecl stricmp_0(const char *String1, const char *String2)
.text:0041BD40 _stricmp_0      proc near               ; CODE XREF: .text:0040CF94↑p
.text:0041BD40
.text:0041BD40 String1         = dword ptr  4
.text:0041BD40 String2         = dword ptr  8
.text:0041BD40
.text:0041BD40                 jmp     ds:__imp__stricmp_0
.text:0041BD40 _stricmp_0      endp
.text:0041BD40
.text:0041BD40 ; ---------------------------------------------------------------------------
.text:0041BD46                 align 10h
.text:0041BD50
.text:0041BD50 ; =============== S U B R O U T I N E =======================================
.text:0041BD50
.text:0041BD50 ; Attributes: thunk
.text:0041BD50
.text:0041BD50 ; char *__cdecl strncpy(char *Destination, const char *Source, size_t Count)
.text:0041BD50 strncpy         proc near               ; CODE XREF: sub_40D120+BE↑p
.text:0041BD50                                         ; .text:0040D99A↑p ...
.text:0041BD50
.text:0041BD50 Destination     = dword ptr  4
.text:0041BD50 Source          = dword ptr  8
.text:0041BD50 Count           = dword ptr  0Ch
.text:0041BD50
.text:0041BD50                 jmp     ds:__imp_strncpy
.text:0041BD50 strncpy         endp
.text:0041BD50
.text:0041BD50 ; ---------------------------------------------------------------------------
.text:0041BD56                 align 10h
.text:0041BD60
.text:0041BD60 ; =============== S U B R O U T I N E =======================================
.text:0041BD60
.text:0041BD60 ; Attributes: thunk
.text:0041BD60
.text:0041BD60 ; int __cdecl toupper(int C)
.text:0041BD60 toupper         proc near               ; CODE XREF: sub_40D120+10E↑p
.text:0041BD60
.text:0041BD60 C               = dword ptr  4
.text:0041BD60
.text:0041BD60                 jmp     ds:__imp_toupper
.text:0041BD60 toupper         endp
.text:0041BD60
.text:0041BD60 ; ---------------------------------------------------------------------------
.text:0041BD66                 align 10h
.text:0041BD70
.text:0041BD70 ; =============== S U B R O U T I N E =======================================
.text:0041BD70
.text:0041BD70 ; Attributes: thunk
.text:0041BD70
.text:0041BD70 ; int sscanf(const char *const Buffer, const char *const Format, ...)
.text:0041BD70 sscanf          proc near               ; CODE XREF: .text:0040F11E↑p
.text:0041BD70
.text:0041BD70 Buffer          = dword ptr  4
.text:0041BD70 Format          = dword ptr  8
.text:0041BD70
.text:0041BD70                 jmp     ds:__imp_sscanf
.text:0041BD70 sscanf          endp
.text:0041BD70
.text:0041BD70 ; ---------------------------------------------------------------------------
.text:0041BD76                 align 10h
.text:0041BD80
.text:0041BD80 ; =============== S U B R O U T I N E =======================================
.text:0041BD80
.text:0041BD80 ; Attributes: thunk
.text:0041BD80
.text:0041BD80 ; size_t __cdecl strspn(const char *Str, const char *Control)
.text:0041BD80 strspn          proc near               ; CODE XREF: .text:0040EF6A↑p
.text:0041BD80                                         ; .text:0040F184↑p ...
.text:0041BD80
.text:0041BD80 Str             = dword ptr  4
.text:0041BD80 Control         = dword ptr  8
.text:0041BD80
.text:0041BD80                 jmp     ds:__imp_strspn
.text:0041BD80 strspn          endp
.text:0041BD80
.text:0041BD80 ; ---------------------------------------------------------------------------
.text:0041BD86                 align 10h
.text:0041BD90
.text:0041BD90 ; =============== S U B R O U T I N E =======================================
.text:0041BD90
.text:0041BD90 ; Attributes: thunk
.text:0041BD90
.text:0041BD90 ; __int64 __cdecl filelengthi64(int FileHandle)
.text:0041BD90 _filelengthi64  proc near               ; CODE XREF: sub_40FBB0+1F↑p
.text:0041BD90
.text:0041BD90 FileHandle      = dword ptr  4
.text:0041BD90
.text:0041BD90                 jmp     ds:__imp__filelengthi64
.text:0041BD90 _filelengthi64  endp
.text:0041BD90
.text:0041BD90 ; ---------------------------------------------------------------------------
.text:0041BD96                 align 10h
.text:0041BDA0
.text:0041BDA0 ; =============== S U B R O U T I N E =======================================
.text:0041BDA0
.text:0041BDA0 ; Attributes: thunk
.text:0041BDA0
.text:0041BDA0 ; char *__cdecl strpbrk(const char *Str, const char *Control)
.text:0041BDA0 strpbrk         proc near               ; CODE XREF: sub_40FC10+87↑p
.text:0041BDA0
.text:0041BDA0 Str             = dword ptr  4
.text:0041BDA0 Control         = dword ptr  8
.text:0041BDA0
.text:0041BDA0                 jmp     ds:__imp_strpbrk
.text:0041BDA0 strpbrk         endp
.text:0041BDA0
.text:0041BDA0 ; ---------------------------------------------------------------------------
.text:0041BDA6                 align 10h
.text:0041BDB0
.text:0041BDB0 ; =============== S U B R O U T I N E =======================================
.text:0041BDB0
.text:0041BDB0 ; Attributes: thunk
.text:0041BDB0
.text:0041BDB0 ; FILE *__cdecl fdopen(int FileHandle, const char *Format)
.text:0041BDB0 _fdopen         proc near               ; CODE XREF: sub_40FCB0+69↑p
.text:0041BDB0
.text:0041BDB0 FileHandle      = dword ptr  4
.text:0041BDB0 Format          = dword ptr  8
.text:0041BDB0
.text:0041BDB0                 jmp     ds:__imp__fdopen
.text:0041BDB0 _fdopen         endp
.text:0041BDB0
.text:0041BDB0 ; ---------------------------------------------------------------------------
.text:0041BDB6                 align 10h
.text:0041BDC0
.text:0041BDC0 ; =============== S U B R O U T I N E =======================================
.text:0041BDC0
.text:0041BDC0 ; Attributes: thunk
.text:0041BDC0
.text:0041BDC0 ; int __cdecl close(int FileHandle)
.text:0041BDC0 _close          proc near               ; CODE XREF: sub_40FCB0+90↑p
.text:0041BDC0
.text:0041BDC0 FileHandle      = dword ptr  4
.text:0041BDC0
.text:0041BDC0                 jmp     ds:__imp__close
.text:0041BDC0 _close          endp
.text:0041BDC0
.text:0041BDC0 ; ---------------------------------------------------------------------------
.text:0041BDC6                 align 10h
.text:0041BDD0
.text:0041BDD0 ; =============== S U B R O U T I N E =======================================
.text:0041BDD0
.text:0041BDD0 ; Attributes: thunk
.text:0041BDD0
.text:0041BDD0 ; int open(const char *FileName, int OpenFlag, ...)
.text:0041BDD0 _open           proc near               ; CODE XREF: sub_4192C0:loc_419650↑p
.text:0041BDD0
.text:0041BDD0 FileName        = dword ptr  4
.text:0041BDD0 OpenFlag        = dword ptr  8
.text:0041BDD0
.text:0041BDD0                 jmp     ds:__imp__open
.text:0041BDD0 _open           endp
.text:0041BDD0
.text:0041BDD0 ; ---------------------------------------------------------------------------
.text:0041BDD6                 align 10h
.text:0041BDE0
.text:0041BDE0 ; =============== S U B R O U T I N E =======================================
.text:0041BDE0
.text:0041BDE0 ; Attributes: thunk
.text:0041BDE0
.text:0041BDE0 ; LPTOP_LEVEL_EXCEPTION_FILTER __stdcall SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.text:0041BDE0 SetUnhandledExceptionFilter proc near   ; CODE XREF: sub_401080+E↑p
.text:0041BDE0
.text:0041BDE0 lpTopLevelExceptionFilter= dword ptr  4
.text:0041BDE0
.text:0041BDE0                 jmp     ds:__imp_SetUnhandledExceptionFilter
.text:0041BDE0 SetUnhandledExceptionFilter endp
.text:0041BDE0
.text:0041BDE0 ; ---------------------------------------------------------------------------
.text:0041BDE6                 align 10h
.text:0041BDF0
.text:0041BDF0 ; =============== S U B R O U T I N E =======================================
.text:0041BDF0
.text:0041BDF0 ; Attributes: noreturn thunk
.text:0041BDF0
.text:0041BDF0 ; void __stdcall __noreturn ExitProcess(UINT uExitCode)
.text:0041BDF0 ExitProcess     proc near               ; CODE XREF: sub_401080+F4↑p
.text:0041BDF0
.text:0041BDF0 uExitCode       = dword ptr  4
.text:0041BDF0
.text:0041BDF0                 jmp     ds:__imp_ExitProcess
.text:0041BDF0 ExitProcess     endp
.text:0041BDF0
.text:0041BDF0 ; ---------------------------------------------------------------------------
.text:0041BDF6                 align 10h
.text:0041BE00
.text:0041BE00 ; =============== S U B R O U T I N E =======================================
.text:0041BE00
.text:0041BE00 ; Attributes: thunk
.text:0041BE00
.text:0041BE00 ; HMODULE __stdcall GetModuleHandleA(LPCSTR lpModuleName)
.text:0041BE00 GetModuleHandleA proc near              ; CODE XREF: sub_40ACC0+108↑p
.text:0041BE00                                         ; sub_40B570+329↑p ...
.text:0041BE00
.text:0041BE00 lpModuleName    = dword ptr  4
.text:0041BE00
.text:0041BE00                 jmp     ds:__imp_GetModuleHandleA
.text:0041BE00 GetModuleHandleA endp
.text:0041BE00
.text:0041BE00 ; ---------------------------------------------------------------------------
.text:0041BE06                 align 10h
.text:0041BE10
.text:0041BE10 ; =============== S U B R O U T I N E =======================================
.text:0041BE10
.text:0041BE10 ; Attributes: thunk
.text:0041BE10
.text:0041BE10 ; FARPROC __stdcall GetProcAddress(HMODULE hModule, LPCSTR lpProcName)
.text:0041BE10 GetProcAddress  proc near               ; CODE XREF: sub_40ACC0+123↑p
.text:0041BE10                                         ; sub_40ACC0+28E↑p ...
.text:0041BE10
.text:0041BE10 hModule         = dword ptr  4
.text:0041BE10 lpProcName      = dword ptr  8
.text:0041BE10
.text:0041BE10                 jmp     ds:__imp_GetProcAddress
.text:0041BE10 GetProcAddress  endp
.text:0041BE10
.text:0041BE10 ; ---------------------------------------------------------------------------
.text:0041BE16                 align 10h
.text:0041BE20
.text:0041BE20 ; =============== S U B R O U T I N E =======================================
.text:0041BE20
.text:0041BE20 ; Attributes: thunk
.text:0041BE20
.text:0041BE20 ; DWORD __stdcall GetFileAttributesA(LPCSTR lpFileName)
.text:0041BE20 GetFileAttributesA proc near            ; CODE XREF: sub_40ACC0+137↑p
.text:0041BE20                                         ; sub_40E2A0+62↑p
.text:0041BE20
.text:0041BE20 lpFileName      = dword ptr  4
.text:0041BE20
.text:0041BE20                 jmp     ds:__imp_GetFileAttributesA
.text:0041BE20 GetFileAttributesA endp
.text:0041BE20
.text:0041BE20 ; ---------------------------------------------------------------------------
.text:0041BE26                 align 10h
.text:0041BE30
.text:0041BE30 ; =============== S U B R O U T I N E =======================================
.text:0041BE30
.text:0041BE30 ; Attributes: thunk
.text:0041BE30
.text:0041BE30 ; BOOL __stdcall FreeLibrary(HMODULE hLibModule)
.text:0041BE30 FreeLibrary     proc near               ; CODE XREF: sub_40ACC0+194↑p
.text:0041BE30                                         ; sub_40ACC0+37D↑p ...
.text:0041BE30
.text:0041BE30 hLibModule      = dword ptr  4
.text:0041BE30
.text:0041BE30                 jmp     ds:__imp_FreeLibrary
.text:0041BE30 FreeLibrary     endp
.text:0041BE30
.text:0041BE30 ; ---------------------------------------------------------------------------
.text:0041BE36                 align 10h
.text:0041BE40
.text:0041BE40 ; =============== S U B R O U T I N E =======================================
.text:0041BE40
.text:0041BE40 ; Attributes: thunk
.text:0041BE40
.text:0041BE40 ; HANDLE __stdcall FindFirstFileA(LPCSTR lpFileName, LPWIN32_FIND_DATAA lpFindFileData)
.text:0041BE40 FindFirstFileA  proc near               ; CODE XREF: sub_40ACC0+1BE↑p
.text:0041BE40                                         ; sub_40ACC0+3AF↑p ...
.text:0041BE40
.text:0041BE40 lpFileName      = dword ptr  4
.text:0041BE40 lpFindFileData  = dword ptr  8
.text:0041BE40
.text:0041BE40                 jmp     ds:__imp_FindFirstFileA
.text:0041BE40 FindFirstFileA  endp
.text:0041BE40
.text:0041BE40 ; ---------------------------------------------------------------------------
.text:0041BE46                 align 10h
.text:0041BE50
.text:0041BE50 ; =============== S U B R O U T I N E =======================================
.text:0041BE50
.text:0041BE50 ; Attributes: thunk
.text:0041BE50
.text:0041BE50 ; BOOL __stdcall FindClose(HANDLE hFindFile)
.text:0041BE50 FindClose       proc near               ; CODE XREF: sub_40ACC0+213↑p
.text:0041BE50                                         ; sub_40ACC0+36E↑p ...
.text:0041BE50
.text:0041BE50 hFindFile       = dword ptr  4
.text:0041BE50
.text:0041BE50                 jmp     ds:__imp_FindClose
.text:0041BE50 FindClose       endp
.text:0041BE50
.text:0041BE50 ; ---------------------------------------------------------------------------
.text:0041BE56                 align 10h
.text:0041BE60
.text:0041BE60 ; =============== S U B R O U T I N E =======================================
.text:0041BE60
.text:0041BE60 ; Attributes: thunk
.text:0041BE60
.text:0041BE60 ; HMODULE __stdcall LoadLibraryA(LPCSTR lpLibFileName)
.text:0041BE60 LoadLibraryA    proc near               ; CODE XREF: sub_40ACC0+273↑p
.text:0041BE60                                         ; sub_40B570+134↑p ...
.text:0041BE60
.text:0041BE60 lpLibFileName   = dword ptr  4
.text:0041BE60
.text:0041BE60                 jmp     ds:__imp_LoadLibraryA
.text:0041BE60 LoadLibraryA    endp
.text:0041BE60
.text:0041BE60 ; ---------------------------------------------------------------------------
.text:0041BE66                 align 10h
.text:0041BE70
.text:0041BE70 ; =============== S U B R O U T I N E =======================================
.text:0041BE70
.text:0041BE70 ; Attributes: thunk
.text:0041BE70
.text:0041BE70 ; BOOL __stdcall FindNextFileA(HANDLE hFindFile, LPWIN32_FIND_DATAA lpFindFileData)
.text:0041BE70 FindNextFileA   proc near               ; CODE XREF: sub_40ACC0+35F↑p
.text:0041BE70
.text:0041BE70 hFindFile       = dword ptr  4
.text:0041BE70 lpFindFileData  = dword ptr  8
.text:0041BE70
.text:0041BE70                 jmp     ds:__imp_FindNextFileA
.text:0041BE70 FindNextFileA   endp
.text:0041BE70
.text:0041BE70 ; ---------------------------------------------------------------------------
.text:0041BE76                 align 10h
.text:0041BE80
.text:0041BE80 ; =============== S U B R O U T I N E =======================================
.text:0041BE80
.text:0041BE80 ; Attributes: thunk
.text:0041BE80
.text:0041BE80 ; DWORD __stdcall GetFileType(HANDLE hFile)
.text:0041BE80 GetFileType     proc near               ; CODE XREF: sub_40ACC0+423↑p
.text:0041BE80                                         ; .text:0040BD5A↑p
.text:0041BE80
.text:0041BE80 hFile           = dword ptr  4
.text:0041BE80
.text:0041BE80                 jmp     ds:__imp_GetFileType
.text:0041BE80 GetFileType     endp
.text:0041BE80
.text:0041BE80 ; ---------------------------------------------------------------------------
.text:0041BE86                 align 10h
.text:0041BE90
.text:0041BE90 ; =============== S U B R O U T I N E =======================================
.text:0041BE90
.text:0041BE90 ; Attributes: thunk
.text:0041BE90
.text:0041BE90 ; BOOL __stdcall GetFileInformationByHandle(HANDLE hFile, LPBY_HANDLE_FILE_INFORMATION lpFileInformation)
.text:0041BE90 GetFileInformationByHandle proc near    ; CODE XREF: sub_40ACC0+449↑p
.text:0041BE90
.text:0041BE90 hFile           = dword ptr  4
.text:0041BE90 lpFileInformation= dword ptr  8
.text:0041BE90
.text:0041BE90                 jmp     ds:__imp_GetFileInformationByHandle
.text:0041BE90 GetFileInformationByHandle endp
.text:0041BE90
.text:0041BE90 ; ---------------------------------------------------------------------------
.text:0041BE96                 align 10h
.text:0041BEA0
.text:0041BEA0 ; =============== S U B R O U T I N E =======================================
.text:0041BEA0
.text:0041BEA0 ; Attributes: thunk
.text:0041BEA0
.text:0041BEA0 ; DWORD __stdcall GetFileSize(HANDLE hFile, LPDWORD lpFileSizeHigh)
.text:0041BEA0 GetFileSize     proc near               ; CODE XREF: sub_40ACC0+7D2↑p
.text:0041BEA0
.text:0041BEA0 hFile           = dword ptr  4
.text:0041BEA0 lpFileSizeHigh  = dword ptr  8
.text:0041BEA0
.text:0041BEA0                 jmp     ds:__imp_GetFileSize
.text:0041BEA0 GetFileSize     endp
.text:0041BEA0
.text:0041BEA0 ; ---------------------------------------------------------------------------
.text:0041BEA6                 align 10h
.text:0041BEB0
.text:0041BEB0 ; =============== S U B R O U T I N E =======================================
.text:0041BEB0
.text:0041BEB0 ; Attributes: thunk
.text:0041BEB0
.text:0041BEB0 ; BOOL __stdcall PeekNamedPipe(HANDLE hNamedPipe, LPVOID lpBuffer, DWORD nBufferSize, LPDWORD lpBytesRead, LPDWORD lpTotalBytesAvail, LPDWORD lpBytesLeftThisMessage)
.text:0041BEB0 PeekNamedPipe   proc near               ; CODE XREF: sub_40ACC0+819↑p
.text:0041BEB0
.text:0041BEB0 hNamedPipe      = dword ptr  4
.text:0041BEB0 lpBuffer        = dword ptr  8
.text:0041BEB0 nBufferSize     = dword ptr  0Ch
.text:0041BEB0 lpBytesRead     = dword ptr  10h
.text:0041BEB0 lpTotalBytesAvail= dword ptr  14h
.text:0041BEB0 lpBytesLeftThisMessage= dword ptr  18h
.text:0041BEB0
.text:0041BEB0                 jmp     ds:__imp_PeekNamedPipe
.text:0041BEB0 PeekNamedPipe   endp
.text:0041BEB0
.text:0041BEB0 ; ---------------------------------------------------------------------------
.text:0041BEB6                 align 10h
.text:0041BEC0
.text:0041BEC0 ; =============== S U B R O U T I N E =======================================
.text:0041BEC0
.text:0041BEC0 ; Attributes: thunk
.text:0041BEC0
.text:0041BEC0 ; UINT __stdcall GetDriveTypeA(LPCSTR lpRootPathName)
.text:0041BEC0 GetDriveTypeA   proc near               ; CODE XREF: sub_40B570+4C↑p
.text:0041BEC0
.text:0041BEC0 lpRootPathName  = dword ptr  4
.text:0041BEC0
.text:0041BEC0                 jmp     ds:__imp_GetDriveTypeA
.text:0041BEC0 GetDriveTypeA   endp
.text:0041BEC0
.text:0041BEC0 ; ---------------------------------------------------------------------------
.text:0041BEC6                 align 10h
.text:0041BED0
.text:0041BED0 ; =============== S U B R O U T I N E =======================================
.text:0041BED0
.text:0041BED0 ; Attributes: thunk
.text:0041BED0
.text:0041BED0 ; DWORD __stdcall GetLastError()
.text:0041BED0 GetLastError    proc near               ; CODE XREF: sub_40B570:loc_40B7F9↑p
.text:0041BED0                                         ; .text:loc_40C33D↑p ...
.text:0041BED0                 jmp     ds:__imp_GetLastError
.text:0041BED0 GetLastError    endp
.text:0041BED0
.text:0041BED0 ; ---------------------------------------------------------------------------
.text:0041BED6                 align 10h
.text:0041BEE0
.text:0041BEE0 ; =============== S U B R O U T I N E =======================================
.text:0041BEE0
.text:0041BEE0 ; Attributes: thunk
.text:0041BEE0
.text:0041BEE0 ; BOOL __stdcall GetVolumeInformationA(LPCSTR lpRootPathName, LPSTR lpVolumeNameBuffer, DWORD nVolumeNameSize, LPDWORD lpVolumeSerialNumber, LPDWORD lpMaximumComponentLength, LPDWORD lpFileSystemFlags, LPSTR lpFileSystemNameBuffer, DWORD nFileSystemNameSize)
.text:0041BEE0 GetVolumeInformationA proc near         ; CODE XREF: sub_40BA70+64↑p
.text:0041BEE0                                         ; .text:0040C01C↑p ...
.text:0041BEE0
.text:0041BEE0 lpRootPathName  = dword ptr  4
.text:0041BEE0 lpVolumeNameBuffer= dword ptr  8
.text:0041BEE0 nVolumeNameSize = dword ptr  0Ch
.text:0041BEE0 lpVolumeSerialNumber= dword ptr  10h
.text:0041BEE0 lpMaximumComponentLength= dword ptr  14h
.text:0041BEE0 lpFileSystemFlags= dword ptr  18h
.text:0041BEE0 lpFileSystemNameBuffer= dword ptr  1Ch
.text:0041BEE0 nFileSystemNameSize= dword ptr  20h
.text:0041BEE0
.text:0041BEE0                 jmp     ds:__imp_GetVolumeInformationA
.text:0041BEE0 GetVolumeInformationA endp
.text:0041BEE0
.text:0041BEE0 ; ---------------------------------------------------------------------------
.text:0041BEE6                 align 10h
.text:0041BEF0
.text:0041BEF0 ; =============== S U B R O U T I N E =======================================
.text:0041BEF0
.text:0041BEF0 ; Attributes: thunk
.text:0041BEF0
.text:0041BEF0 ; HANDLE __stdcall CreateFileA(LPCSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile)
.text:0041BEF0 CreateFileA     proc near               ; CODE XREF: sub_4197F0-CFEA↑p
.text:0041BEF0                                         ; .text:0040D713↑p ...
.text:0041BEF0
.text:0041BEF0 lpFileName      = dword ptr  4
.text:0041BEF0 dwDesiredAccess = dword ptr  8
.text:0041BEF0 dwShareMode     = dword ptr  0Ch
.text:0041BEF0 lpSecurityAttributes= dword ptr  10h
.text:0041BEF0 dwCreationDisposition= dword ptr  14h
.text:0041BEF0 dwFlagsAndAttributes= dword ptr  18h
.text:0041BEF0 hTemplateFile   = dword ptr  1Ch
.text:0041BEF0
.text:0041BEF0                 jmp     ds:__imp_CreateFileA
.text:0041BEF0 CreateFileA     endp
.text:0041BEF0
.text:0041BEF0 ; ---------------------------------------------------------------------------
.text:0041BEF6                 align 10h
.text:0041BF00
.text:0041BF00 ; =============== S U B R O U T I N E =======================================
.text:0041BF00
.text:0041BF00 ; Attributes: thunk
.text:0041BF00
.text:0041BF00 ; BOOL __stdcall CloseHandle(HANDLE hObject)
.text:0041BF00 CloseHandle     proc near               ; CODE XREF: sub_4197F0-CFCF↑p
.text:0041BF00                                         ; .text:0040D789↑p ...
.text:0041BF00
.text:0041BF00 hObject         = dword ptr  4
.text:0041BF00
.text:0041BF00                 jmp     ds:__imp_CloseHandle
.text:0041BF00 CloseHandle     endp
.text:0041BF00
.text:0041BF00 ; ---------------------------------------------------------------------------
.text:0041BF06                 align 10h
.text:0041BF10
.text:0041BF10 ; =============== S U B R O U T I N E =======================================
.text:0041BF10
.text:0041BF10 ; Attributes: thunk
.text:0041BF10
.text:0041BF10 ; UINT __stdcall SetErrorMode(UINT uMode)
.text:0041BF10 SetErrorMode    proc near               ; CODE XREF: sub_4197F0-CF9A↑p
.text:0041BF10                                         ; sub_40E2A0+57↑p ...
.text:0041BF10
.text:0041BF10 uMode           = dword ptr  4
.text:0041BF10
.text:0041BF10                 jmp     ds:__imp_SetErrorMode
.text:0041BF10 SetErrorMode    endp
.text:0041BF10
.text:0041BF10 ; ---------------------------------------------------------------------------
.text:0041BF16                 align 10h
.text:0041BF20
.text:0041BF20 ; =============== S U B R O U T I N E =======================================
.text:0041BF20
.text:0041BF20 ; Attributes: thunk
.text:0041BF20
.text:0041BF20 ; DWORD __stdcall GetModuleFileNameA(HMODULE hModule, LPSTR lpFilename, DWORD nSize)
.text:0041BF20 GetModuleFileNameA proc near            ; CODE XREF: sub_40CE10+1C↑p
.text:0041BF20
.text:0041BF20 hModule         = dword ptr  4
.text:0041BF20 lpFilename      = dword ptr  8
.text:0041BF20 nSize           = dword ptr  0Ch
.text:0041BF20
.text:0041BF20                 jmp     ds:__imp_GetModuleFileNameA
.text:0041BF20 GetModuleFileNameA endp
.text:0041BF20
.text:0041BF20 ; ---------------------------------------------------------------------------
.text:0041BF26                 align 10h
.text:0041BF30
.text:0041BF30 ; =============== S U B R O U T I N E =======================================
.text:0041BF30
.text:0041BF30 ; Attributes: thunk
.text:0041BF30
.text:0041BF30 ; DWORD __stdcall GetShortPathNameA(LPCSTR lpszLongPath, LPSTR lpszShortPath, DWORD cchBuffer)
.text:0041BF30 GetShortPathNameA proc near             ; CODE XREF: .text:0040D096↑p
.text:0041BF30                                         ; .text:0040D0C0↑p
.text:0041BF30
.text:0041BF30 lpszLongPath    = dword ptr  4
.text:0041BF30 lpszShortPath   = dword ptr  8
.text:0041BF30 cchBuffer       = dword ptr  0Ch
.text:0041BF30
.text:0041BF30                 jmp     ds:__imp_GetShortPathNameA
.text:0041BF30 GetShortPathNameA endp
.text:0041BF30
.text:0041BF30 ; ---------------------------------------------------------------------------
.text:0041BF36                 align 10h
.text:0041BF40
.text:0041BF40 ; =============== S U B R O U T I N E =======================================
.text:0041BF40
.text:0041BF40 ; Attributes: thunk
.text:0041BF40
.text:0041BF40 ; DWORD __stdcall GetCurrentDirectoryA(DWORD nBufferLength, LPSTR lpBuffer)
.text:0041BF40 GetCurrentDirectoryA proc near          ; CODE XREF: .text:0040D3C8↑p
.text:0041BF40                                         ; .text:0040D3E4↑p ...
.text:0041BF40
.text:0041BF40 nBufferLength   = dword ptr  4
.text:0041BF40 lpBuffer        = dword ptr  8
.text:0041BF40
.text:0041BF40                 jmp     ds:__imp_GetCurrentDirectoryA
.text:0041BF40 GetCurrentDirectoryA endp
.text:0041BF40
.text:0041BF40 ; ---------------------------------------------------------------------------
.text:0041BF46                 align 10h
.text:0041BF50
.text:0041BF50 ; =============== S U B R O U T I N E =======================================
.text:0041BF50
.text:0041BF50 ; Attributes: thunk
.text:0041BF50
.text:0041BF50 ; BOOL __stdcall DeviceIoControl(HANDLE hDevice, DWORD dwIoControlCode, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesReturned, LPOVERLAPPED lpOverlapped)
.text:0041BF50 DeviceIoControl proc near               ; CODE XREF: .text:0040D77C↑p
.text:0041BF50                                         ; sub_40DB40+1E5↑p
.text:0041BF50
.text:0041BF50 hDevice         = dword ptr  4
.text:0041BF50 dwIoControlCode = dword ptr  8
.text:0041BF50 lpInBuffer      = dword ptr  0Ch
.text:0041BF50 nInBufferSize   = dword ptr  10h
.text:0041BF50 lpOutBuffer     = dword ptr  14h
.text:0041BF50 nOutBufferSize  = dword ptr  18h
.text:0041BF50 lpBytesReturned = dword ptr  1Ch
.text:0041BF50 lpOverlapped    = dword ptr  20h
.text:0041BF50
.text:0041BF50                 jmp     ds:__imp_DeviceIoControl
.text:0041BF50 DeviceIoControl endp
.text:0041BF50
.text:0041BF50 ; ---------------------------------------------------------------------------
.text:0041BF56                 align 10h
.text:0041BF60
.text:0041BF60 ; =============== S U B R O U T I N E =======================================
.text:0041BF60
.text:0041BF60 ; Attributes: thunk
.text:0041BF60
.text:0041BF60 ; BOOL __stdcall GetDiskFreeSpaceA(LPCSTR lpRootPathName, LPDWORD lpSectorsPerCluster, LPDWORD lpBytesPerSector, LPDWORD lpNumberOfFreeClusters, LPDWORD lpTotalNumberOfClusters)
.text:0041BF60 GetDiskFreeSpaceA proc near             ; CODE XREF: .text:0040DAD3↑p
.text:0041BF60                                         ; sub_40DB40+7B↑p ...
.text:0041BF60
.text:0041BF60 lpRootPathName  = dword ptr  4
.text:0041BF60 lpSectorsPerCluster= dword ptr  8
.text:0041BF60 lpBytesPerSector= dword ptr  0Ch
.text:0041BF60 lpNumberOfFreeClusters= dword ptr  10h
.text:0041BF60 lpTotalNumberOfClusters= dword ptr  14h
.text:0041BF60
.text:0041BF60                 jmp     ds:__imp_GetDiskFreeSpaceA
.text:0041BF60 GetDiskFreeSpaceA endp
.text:0041BF60
.text:0041BF60 ; ---------------------------------------------------------------------------
.text:0041BF66                 align 10h
.text:0041BF70
.text:0041BF70 ; =============== S U B R O U T I N E =======================================
.text:0041BF70
.text:0041BF70 ; Attributes: thunk
.text:0041BF70
.text:0041BF70 ; DWORD __stdcall GetFullPathNameA(LPCSTR lpFileName, DWORD nBufferLength, LPSTR lpBuffer, LPSTR *lpFilePart)
.text:0041BF70 GetFullPathNameA proc near              ; CODE XREF: sub_40E170+45↑p
.text:0041BF70                                         ; sub_40E170+ED↑p
.text:0041BF70
.text:0041BF70 lpFileName      = dword ptr  4
.text:0041BF70 nBufferLength   = dword ptr  8
.text:0041BF70 lpBuffer        = dword ptr  0Ch
.text:0041BF70 lpFilePart      = dword ptr  10h
.text:0041BF70
.text:0041BF70                 jmp     ds:__imp_GetFullPathNameA
.text:0041BF70 GetFullPathNameA endp
.text:0041BF70
.text:0041BF70 ; ---------------------------------------------------------------------------
.text:0041BF76                 align 10h
.text:0041BF80
.text:0041BF80 ; =============== S U B R O U T I N E =======================================
.text:0041BF80
.text:0041BF80 ; Attributes: thunk
.text:0041BF80
.text:0041BF80 ; int __stdcall lstrcmpiA(LPCSTR lpString1, LPCSTR lpString2)
.text:0041BF80 lstrcmpiA       proc near               ; CODE XREF: .text:0040E82B↑p
.text:0041BF80                                         ; .text:0040E842↑p ...
.text:0041BF80
.text:0041BF80 lpString1       = dword ptr  4
.text:0041BF80 lpString2       = dword ptr  8
.text:0041BF80
.text:0041BF80                 jmp     ds:__imp_lstrcmpiA
.text:0041BF80 lstrcmpiA       endp
.text:0041BF80
.text:0041BF80 ; ---------------------------------------------------------------------------
.text:0041BF86                 align 10h
.text:0041BF90
.text:0041BF90 ; =============== S U B R O U T I N E =======================================
.text:0041BF90
.text:0041BF90 ; Attributes: thunk
.text:0041BF90
.text:0041BF90 ; DWORD __stdcall GetVersion()
.text:0041BF90 GetVersion      proc near               ; CODE XREF: .text:0040EBB3↑p
.text:0041BF90                 jmp     ds:__imp_GetVersion
.text:0041BF90 GetVersion      endp
.text:0041BF90
.text:0041BF90 ; ---------------------------------------------------------------------------
.text:0041BF96                 align 10h
.text:0041BFA0
.text:0041BFA0 ; =============== S U B R O U T I N E =======================================
.text:0041BFA0
.text:0041BFA0 ; Attributes: thunk
.text:0041BFA0
.text:0041BFA0 ; BOOL __stdcall GetVersionExA(LPOSVERSIONINFOA lpVersionInformation)
.text:0041BFA0 GetVersionExA   proc near               ; CODE XREF: sub_40EC40+32↑p
.text:0041BFA0                                         ; sub_40EC40+20B↑p
.text:0041BFA0
.text:0041BFA0 lpVersionInformation= dword ptr  4
.text:0041BFA0
.text:0041BFA0                 jmp     ds:__imp_GetVersionExA
.text:0041BFA0 GetVersionExA   endp
.text:0041BFA0
.text:0041BFA0 ; ---------------------------------------------------------------------------
.text:0041BFA6                 align 10h
.text:0041BFB0
.text:0041BFB0 ; =============== S U B R O U T I N E =======================================
.text:0041BFB0
.text:0041BFB0 ; Attributes: thunk
.text:0041BFB0
.text:0041BFB0 ; DWORD __stdcall GetLogicalDriveStringsA(DWORD nBufferLength, LPSTR lpBuffer)
.text:0041BFB0 GetLogicalDriveStringsA proc near       ; CODE XREF: .text:0040F2DF↑p
.text:0041BFB0                                         ; .text:0040F30E↑p ...
.text:0041BFB0
.text:0041BFB0 nBufferLength   = dword ptr  4
.text:0041BFB0 lpBuffer        = dword ptr  8
.text:0041BFB0
.text:0041BFB0                 jmp     ds:__imp_GetLogicalDriveStringsA
.text:0041BFB0 GetLogicalDriveStringsA endp
.text:0041BFB0
.text:0041BFB0 ; ---------------------------------------------------------------------------
.text:0041BFB6                 align 10h
.text:0041BFC0
.text:0041BFC0 ; =============== S U B R O U T I N E =======================================
.text:0041BFC0
.text:0041BFC0 ; Attributes: thunk
.text:0041BFC0
.text:0041BFC0 ; HANDLE __stdcall GetProcessHeap()
.text:0041BFC0 GetProcessHeap  proc near               ; CODE XREF: .text:0040F2E9↑p
.text:0041BFC0                                         ; sub_40F9C0+24↑p ...
.text:0041BFC0                 jmp     ds:__imp_GetProcessHeap
.text:0041BFC0 GetProcessHeap  endp
.text:0041BFC0
.text:0041BFC0 ; ---------------------------------------------------------------------------
.text:0041BFC6                 align 10h
.text:0041BFD0
.text:0041BFD0 ; =============== S U B R O U T I N E =======================================
.text:0041BFD0
.text:0041BFD0 ; Attributes: thunk
.text:0041BFD0
.text:0041BFD0 ; LPVOID __stdcall HeapAlloc(HANDLE hHeap, DWORD dwFlags, SIZE_T dwBytes)
.text:0041BFD0 HeapAlloc       proc near               ; CODE XREF: .text:0040F2FD↑p
.text:0041BFD0                                         ; sub_40F9C0+38↑p ...
.text:0041BFD0
.text:0041BFD0 hHeap           = dword ptr  4
.text:0041BFD0 dwFlags         = dword ptr  8
.text:0041BFD0 dwBytes         = dword ptr  0Ch
.text:0041BFD0
.text:0041BFD0                 jmp     ds:__imp_HeapAlloc
.text:0041BFD0 HeapAlloc       endp
.text:0041BFD0
.text:0041BFD0 ; ---------------------------------------------------------------------------
.text:0041BFD6                 align 10h
.text:0041BFE0
.text:0041BFE0 ; =============== S U B R O U T I N E =======================================
.text:0041BFE0
.text:0041BFE0 ; Attributes: thunk
.text:0041BFE0
.text:0041BFE0 ; BOOL __stdcall HeapFree(HANDLE hHeap, DWORD dwFlags, LPVOID lpMem)
.text:0041BFE0 HeapFree        proc near               ; CODE XREF: .text:0040FAFD↑p
.text:0041BFE0
.text:0041BFE0 hHeap           = dword ptr  4
.text:0041BFE0 dwFlags         = dword ptr  8
.text:0041BFE0 lpMem           = dword ptr  0Ch
.text:0041BFE0
.text:0041BFE0                 jmp     ds:__imp_HeapFree
.text:0041BFE0 HeapFree        endp
.text:0041BFE0
.text:0041BFE0 ; ---------------------------------------------------------------------------
.text:0041BFE6                 align 10h
.text:0041BFF0
.text:0041BFF0 ; =============== S U B R O U T I N E =======================================
.text:0041BFF0
.text:0041BFF0 ; Attributes: thunk
.text:0041BFF0
.text:0041BFF0 ; BOOL __stdcall UnlockFile(HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToUnlockLow, DWORD nNumberOfBytesToUnlockHigh)
.text:0041BFF0 UnlockFile      proc near               ; CODE XREF: sub_40FBB0+40↑p
.text:0041BFF0
.text:0041BFF0 hFile           = dword ptr  4
.text:0041BFF0 dwFileOffsetLow = dword ptr  8
.text:0041BFF0 dwFileOffsetHigh= dword ptr  0Ch
.text:0041BFF0 nNumberOfBytesToUnlockLow= dword ptr  10h
.text:0041BFF0 nNumberOfBytesToUnlockHigh= dword ptr  14h
.text:0041BFF0
.text:0041BFF0                 jmp     ds:__imp_UnlockFile
.text:0041BFF0 UnlockFile      endp
.text:0041BFF0
.text:0041BFF0 ; ---------------------------------------------------------------------------
.text:0041BFF6                 align 10h
.text:0041C000
.text:0041C000 ; =============== S U B R O U T I N E =======================================
.text:0041C000
.text:0041C000 ; Attributes: thunk
.text:0041C000
.text:0041C000 ; BOOL __stdcall CreateDirectoryA(LPCSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes)
.text:0041C000 CreateDirectoryA proc near              ; CODE XREF: sub_4196F0+22↑p
.text:0041C000
.text:0041C000 lpPathName      = dword ptr  4
.text:0041C000 lpSecurityAttributes= dword ptr  8
.text:0041C000
.text:0041C000                 jmp     ds:__imp_CreateDirectoryA
.text:0041C000 CreateDirectoryA endp
.text:0041C000
.text:0041C000 ; ---------------------------------------------------------------------------
.text:0041C006                 align 10h
.text:0041C010
.text:0041C010 ; =============== S U B R O U T I N E =======================================
.text:0041C010
.text:0041C010 ; Attributes: thunk
.text:0041C010
.text:0041C010 ; DWORD __stdcall GetTimeZoneInformation(LPTIME_ZONE_INFORMATION lpTimeZoneInformation)
.text:0041C010 GetTimeZoneInformation proc near        ; CODE XREF: sub_419900+22↑p
.text:0041C010
.text:0041C010 lpTimeZoneInformation= dword ptr  4
.text:0041C010
.text:0041C010                 jmp     ds:__imp_GetTimeZoneInformation
.text:0041C010 GetTimeZoneInformation endp
.text:0041C010
.text:0041C010 ; ---------------------------------------------------------------------------
.text:0041C016                 align 10h
.text:0041C020
.text:0041C020 ; =============== S U B R O U T I N E =======================================
.text:0041C020
.text:0041C020 ; Attributes: thunk
.text:0041C020
.text:0041C020 ; void __stdcall GetSystemTimeAsFileTime(LPFILETIME lpSystemTimeAsFileTime)
.text:0041C020 GetSystemTimeAsFileTime proc near       ; CODE XREF: sub_419900+4F↑p
.text:0041C020
.text:0041C020 lpSystemTimeAsFileTime= dword ptr  4
.text:0041C020
.text:0041C020                 jmp     ds:__imp_GetSystemTimeAsFileTime
.text:0041C020 GetSystemTimeAsFileTime endp
.text:0041C020
.text:0041C020 ; ---------------------------------------------------------------------------
.text:0041C026                 align 10h
.text:0041C030
.text:0041C030 ; =============== S U B R O U T I N E =======================================
.text:0041C030
.text:0041C030 ; Attributes: thunk
.text:0041C030
.text:0041C030 ; BOOL __stdcall AreFileApisANSI()
.text:0041C030 AreFileApisANSI proc near               ; CODE XREF: sub_419A40+89↑p
.text:0041C030                 jmp     ds:__imp_AreFileApisANSI
.text:0041C030 AreFileApisANSI endp
.text:0041C030
.text:0041C030 ; ---------------------------------------------------------------------------
.text:0041C036                 align 10h
.text:0041C040
.text:0041C040 ; =============== S U B R O U T I N E =======================================
.text:0041C040
.text:0041C040 ; Attributes: thunk
.text:0041C040
.text:0041C040 ; int __stdcall MultiByteToWideChar(UINT CodePage, DWORD dwFlags, LPCCH lpMultiByteStr, int cbMultiByte, LPWSTR lpWideCharStr, int cchWideChar)
.text:0041C040 MultiByteToWideChar proc near           ; CODE XREF: sub_419A40+BD↑p
.text:0041C040
.text:0041C040 CodePage        = dword ptr  4
.text:0041C040 dwFlags         = dword ptr  8
.text:0041C040 lpMultiByteStr  = dword ptr  0Ch
.text:0041C040 cbMultiByte     = dword ptr  10h
.text:0041C040 lpWideCharStr   = dword ptr  14h
.text:0041C040 cchWideChar     = dword ptr  18h
.text:0041C040
.text:0041C040                 jmp     ds:__imp_MultiByteToWideChar
.text:0041C040 MultiByteToWideChar endp
.text:0041C040
.text:0041C040 ; ---------------------------------------------------------------------------
.text:0041C046                 align 10h
.text:0041C050
.text:0041C050 ; =============== S U B R O U T I N E =======================================
.text:0041C050
.text:0041C050 ; Attributes: thunk
.text:0041C050
.text:0041C050 ; LPSTR __stdcall lstrcpyA(LPSTR lpString1, LPCSTR lpString2)
.text:0041C050 lstrcpyA        proc near               ; CODE XREF: sub_419A40+128↑p
.text:0041C050
.text:0041C050 lpString1       = dword ptr  4
.text:0041C050 lpString2       = dword ptr  8
.text:0041C050
.text:0041C050                 jmp     ds:__imp_lstrcpyA
.text:0041C050 lstrcpyA        endp
.text:0041C050
.text:0041C050 ; ---------------------------------------------------------------------------
.text:0041C056                 align 10h
.text:0041C060
.text:0041C060 ; =============== S U B R O U T I N E =======================================
.text:0041C060
.text:0041C060 ; Attributes: thunk
.text:0041C060
.text:0041C060 ; LSTATUS __stdcall RegOpenKeyExA(HKEY hKey, LPCSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult)
.text:0041C060 RegOpenKeyExA   proc near               ; CODE XREF: .text:0040E7B1↑p
.text:0041C060
.text:0041C060 hKey            = dword ptr  4
.text:0041C060 lpSubKey        = dword ptr  8
.text:0041C060 ulOptions       = dword ptr  0Ch
.text:0041C060 samDesired      = dword ptr  10h
.text:0041C060 phkResult       = dword ptr  14h
.text:0041C060
.text:0041C060                 jmp     ds:__imp_RegOpenKeyExA
.text:0041C060 RegOpenKeyExA   endp
.text:0041C060
.text:0041C060 ; ---------------------------------------------------------------------------
.text:0041C066                 align 10h
.text:0041C070
.text:0041C070 ; =============== S U B R O U T I N E =======================================
.text:0041C070
.text:0041C070 ; Attributes: thunk
.text:0041C070
.text:0041C070 ; LSTATUS __stdcall RegQueryValueExA(HKEY hKey, LPCSTR lpValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData)
.text:0041C070 RegQueryValueExA proc near              ; CODE XREF: .text:0040E7F4↑p
.text:0041C070
.text:0041C070 hKey            = dword ptr  4
.text:0041C070 lpValueName     = dword ptr  8
.text:0041C070 lpReserved      = dword ptr  0Ch
.text:0041C070 lpType          = dword ptr  10h
.text:0041C070 lpData          = dword ptr  14h
.text:0041C070 lpcbData        = dword ptr  18h
.text:0041C070
.text:0041C070                 jmp     ds:__imp_RegQueryValueExA
.text:0041C070 RegQueryValueExA endp
.text:0041C070
.text:0041C070 ; ---------------------------------------------------------------------------
.text:0041C076                 align 10h
.text:0041C080
.text:0041C080 ; =============== S U B R O U T I N E =======================================
.text:0041C080
.text:0041C080 ; Attributes: thunk
.text:0041C080
.text:0041C080 ; LSTATUS __stdcall RegCloseKey(HKEY hKey)
.text:0041C080 RegCloseKey     proc near               ; CODE XREF: .text:0040E818↑p
.text:0041C080
.text:0041C080 hKey            = dword ptr  4
.text:0041C080
.text:0041C080                 jmp     ds:__imp_RegCloseKey
.text:0041C080 RegCloseKey     endp
.text:0041C080
.text:0041C080 ; ---------------------------------------------------------------------------
.text:0041C086                 db 2 dup(90h)
.text:0041C088                 dd 2 dup(0)
.text:0041C090                 dd 21400h, 0
.text:0041C098                 dd 0C0h, 46000000h
.text:0041C0A0 ; const IID rclsid
.text:0041C0A0 rclsid          dd 21401h               ; Data1
.text:0041C0A0                                         ; DATA XREF: sub_419A40+4B↑o
.text:0041C0A0                 dw 0                    ; Data2
.text:0041C0A0                 dw 0                    ; Data3
.text:0041C0A0                 db 0C0h, 6 dup(0), 46h  ; Data4
.text:0041C0B0                 dd 214A0h, 0
.text:0041C0B8                 dd 0C0h, 46000000h, 214A1h, 0
.text:0041C0C8                 dd 0C0h, 46000000h, 214D0h, 0
.text:0041C0D8                 dd 0C0h, 46000000h, 214D1h, 0
.text:0041C0E8                 dd 0C0h, 46000000h, 214D2h, 0
.text:0041C0F8                 dd 0C0h, 46000000h, 214E1h, 0
.text:0041C108                 dd 0C0h, 46000000h, 214E2h, 0
.text:0041C118                 dd 0C0h, 46000000h, 214E3h, 0
.text:0041C128                 dd 0C0h, 46000000h, 214E4h, 0
.text:0041C138                 dd 0C0h, 46000000h, 21500h, 0
.text:0041C148                 dd 0C0h, 46000000h, 214E5h, 0
.text:0041C158                 dd 0C0h, 46000000h, 214E6h, 0
.text:0041C168                 dd 0C0h, 46000000h, 214E8h, 0
.text:0041C178                 dd 0C0h, 46000000h, 214E9h, 0
.text:0041C188                 dd 0C0h, 46000000h, 214EAh, 0
.text:0041C198                 dd 0C0h, 46000000h, 214EBh, 0
.text:0041C1A8                 dd 0C0h, 46000000h
.text:0041C1B0 ; const IID riid
.text:0041C1B0 riid            dd 214EEh               ; Data1
.text:0041C1B0                                         ; DATA XREF: sub_419A40+2B↑o
.text:0041C1B0                 dw 0                    ; Data2
.text:0041C1B0                 dw 0                    ; Data3
.text:0041C1B0                 db 0C0h, 6 dup(0), 46h  ; Data4
.text:0041C1C0                 dd 214EFh, 0
.text:0041C1C8                 dd 0C0h, 46000000h, 214F0h, 0
.text:0041C1D8                 dd 0C0h, 46000000h, 214F1h, 0
.text:0041C1E8                 dd 0C0h, 46000000h, 214F2h, 0
.text:0041C1F8                 dd 0C0h, 46000000h, 214F3h, 0
.text:0041C208                 dd 0C0h, 46000000h, 214F4h, 0
.text:0041C218                 dd 0C0h, 46000000h, 214F5h, 0
.text:0041C228                 dd 0C0h, 46000000h, 214F6h, 0
.text:0041C238                 dd 0C0h, 46000000h, 214F7h, 0
.text:0041C248                 dd 0C0h, 46000000h, 214F8h, 0
.text:0041C258                 dd 0C0h, 46000000h, 214F9h, 0
.text:0041C268                 dd 0C0h, 46000000h, 214FAh, 0
.text:0041C278                 dd 0C0h, 46000000h, 214FBh, 0
.text:0041C288                 dd 0C0h, 46000000h, 214FCh, 0
.text:0041C298                 dd 0C0h, 46000000h, 88E39E80h, 11CF3578h, 869AEh, 62122E2Bh
.text:0041C298                 dd 93F2F68Ch, 11D31D1Bh, 0C0000EA3h, 0D1AB794Fh, 1AC3D9F0h
.text:0041C298                 dd 11D1175Ch, 6000BE95h, 4FEA9797h, 0CEF04FDFh, 11D2FE72h
.text:0041C298                 dd 0C000A587h, 0CF37684Fh, 1E18D10h, 11D24D8Bh, 60005D85h
.text:0041C298                 dd 67930508h, 0EAB22AC0h, 11CF30C1h, 0EBA7h, 0BAE5BC0h
.text:0041C298                 dd 0EAB22AC1h, 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0EAB22AC2h
.text:0041C298                 dd 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0EAB22AC3h, 11CF30C1h
.text:0041C298                 dd 0EBA7h, 0BAE5BC0h, 0EAB22AC4h, 11CF30C1h, 0EBA7h, 0BAE5BC0h
.text:0041C298                 dd 0EAB22AC5h, 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0EAB22AC6h
.text:0041C298                 dd 11CF30C1h, 0EBA7h, 0BAE5BC0h, 2DF07h, 0
.text:0041C368                 dd 0C0h, 46000000h, 2DF05h, 0
.text:0041C378                 dd 0C0h, 46000000h, 2DF06h, 0
.text:0041C388                 dd 0C0h, 46000000h, 2DF01h, 0
.text:0041C398                 dd 0C0h, 46000000h, 2DF09h, 0
.text:0041C3A8                 dd 0C0h, 46000000h, 0B091E540h, 11CF83E3h, 200013A7h, 6297D7AFh
.text:0041C3A8                 dd 0FBF23B40h, 101BE3F0h, 0AA008884h, 0F8563E00h, 0FBF23B80h
.text:0041C3A8                 dd 101BE3F0h, 0AA008884h, 0F8563E00h, 4657278Ah, 11D2411Bh
.text:0041C3A8                 dd 0C0009A83h, 0D018D94Fh, 4657278Bh, 11D2411Bh, 0C0009A83h
.text:0041C3A8                 dd 0D018D94Fh, 0DE5BF786h, 11D2477Ah, 0C0009D83h, 0D018D94Fh
.text:0041C3A8                 dd 0E8025004h, 11D21C42h, 0A0002CBEh, 0A13DA8C9h, 0C6C4200h
.text:0041C3A8                 dd 11D0C589h, 0C0009A99h, 0E155D64Fh
.text:0041C430 dword_41C430    dd 0FFFFFFFFh           ; DATA XREF: .text:0041B209↑r
.text:0041C430                                         ; .text:loc_41B230↑r ...
.text:0041C434 dword_41C434    dd 0                    ; DATA XREF: .text:loc_41B23C↑r
.text:0041C434                                         ; sub_41B260:loc_41B2AD↑r
.text:0041C438                 dd 0FFFFFFFFh
.text:0041C43C dword_41C43C    dd 71h dup(0)           ; DATA XREF: .data:off_41D194↓o
.text:0041C600                 dd 280h dup(?)
.text:0041C600 _text           ends
.text:0041C600
.data:0041D000 ; Section 2. (virtual address 0001D000)
.data:0041D000 ; Virtual size                  : 000001B0 (    432.)
.data:0041D000 ; Section size in file          : 00000200 (    512.)
.data:0041D000 ; Offset to raw data for section: 0001BA00
.data:0041D000 ; Flags C0000040: Data Readable Writable
.data:0041D000 ; Alignment     : default
.data:0041D000 ; ===========================================================================
.data:0041D000
.data:0041D000 ; Segment type: Pure data
.data:0041D000 ; Segment permissions: Read/Write
.data:0041D000 _data           segment para public 'DATA' use32
.data:0041D000                 assume cs:_data
.data:0041D000                 ;org 41D000h
.data:0041D000 dword_41D000    dd 0                    ; DATA XREF: sub_401080+1B↑o
.data:0041D000                                         ; sub_401080+CC↑r
.data:0041D004 dword_41D004    dd 0                    ; DATA XREF: sub_401080+41↑o
.data:0041D004                                         ; sub_401080+D4↑r
.data:0041D008                 align 10h
.data:0041D010 byte_41D010     db 1                    ; DATA XREF: sub_401910:loc_402126↑w
.data:0041D010                                         ; sub_401910:loc_4023D3↑w ...
.data:0041D011 byte_41D011     db 1                    ; DATA XREF: sub_401910:loc_4021C1↑w
.data:0041D011                                         ; sub_402B00+27↑r ...
.data:0041D012                 align 4
.data:0041D014 dword_41D014    dd 42h                  ; DATA XREF: sub_401910:loc_4022B4↑w
.data:0041D014                                         ; sub_4063A0:loc_4063C9↑r
.data:0041D018 dword_41D018    dd 5                    ; DATA XREF: sub_4063A0+1B↑w
.data:0041D018                                         ; sub_4063A0+2F↑r
.data:0041D01C dword_41D01C    dd 5                    ; DATA XREF: sub_402D20:loc_40312F↑r
.data:0041D01C                                         ; sub_4063A0+23↑w ...
.data:0041D020 dword_41D020    dd 48h                  ; DATA XREF: sub_401910:loc_40217C↑w
.data:0041D020                                         ; sub_402BB0+115↑r ...
.data:0041D024 byte_41D024     db 9                    ; DATA XREF: sub_401910+8FE↑o
.data:0041D024                                         ; sub_404D00+10↑r
.data:0041D025                 align 4
.data:0041D028 ; size_t dword_41D028
.data:0041D028 dword_41D028    dd 8                    ; DATA XREF: sub_401910:loc_402206↑o
.data:0041D028                                         ; sub_404D00:loc_404EA0↑r ...
.data:0041D02C byte_41D02C     db 9                    ; DATA XREF: sub_401910+952↑o
.data:0041D02C                                         ; sub_403880+95↑r ...
.data:0041D02D                 align 10h
.data:0041D030 dword_41D030    dd 8                    ; DATA XREF: sub_401910:loc_40225A↑o
.data:0041D030                                         ; sub_403530+FF↑r ...
.data:0041D034 dword_41D034    dd 1                    ; DATA XREF: sub_401910:loc_401A0F↑w
.data:0041D034                                         ; sub_401910:loc_4024BC↑w ...
.data:0041D038 dword_41D038    dd 0FFFFFFFFh           ; DATA XREF: sub_401910:loc_401F2C↑w
.data:0041D038                                         ; sub_402D20+37F↑r
.data:0041D03C dword_41D03C    dd 0FFFFFFFFh           ; DATA XREF: sub_401910+622↑w
.data:0041D03C                                         ; sub_402D20:loc_403093↑r
.data:0041D040 byte_41D040     db 9                    ; DATA XREF: sub_401910+A0A↑o
.data:0041D040                                         ; sub_403530+78↑r ...
.data:0041D041                 align 4
.data:0041D044 dword_41D044    dd 1                    ; DATA XREF: sub_402B00+72↑r
.data:0041D044                                         ; sub_4063A0+12F↑w ...
.data:0041D048 byte_41D048     db 1                    ; DATA XREF: sub_401910:loc_402057↑w
.data:0041D048                                         ; sub_4069D0:loc_406A50↑r
.data:0041D049                 align 4
.data:0041D04C dword_41D04C    dd 1                    ; DATA XREF: sub_401910+782↑w
.data:0041D04C                                         ; sub_4063A0+129↑r
.data:0041D050 dword_41D050    dd 5                    ; DATA XREF: sub_401910+A02↑o
.data:0041D050                                         ; sub_403530+22↑r ...
.data:0041D054 off_41D054      dd offset Locale        ; DATA XREF: sub_401910+7C9↑w
.data:0041D054                                         ; sub_401910+807↑w ...
.data:0041D058 off_41D058      dd offset byte_401281   ; DATA XREF: sub_4063A0:loc_4065EB↑r
.data:0041D058                                         ; sub_4063A0+273↑r
.data:0041D05C off_41D05C      dd offset byte_401283   ; DATA XREF: sub_4063A0+D6↑r
.data:0041D060 dword_41D060    dd 1                    ; DATA XREF: sub_401910:loc_40270B↑r
.data:0041D060                                         ; sub_401910:loc_402720↑w ...
.data:0041D064 dword_41D064    dd 1                    ; DATA XREF: sub_407F30+11↑r
.data:0041D064                                         ; .text:00407FD1↑r
.data:0041D068 dword_41D068    dd 3Fh                  ; DATA XREF: sub_407F30+7D↑w
.data:0041D068                                         ; .text:0040803D↑w
.data:0041D06C                 align 10h
.data:0041D070 ; char *off_41D070
.data:0041D070 off_41D070      dd offset aCopyrightC2005
.data:0041D070                                         ; DATA XREF: sub_4087B0+DC↑r
.data:0041D070                                         ; "Copyright (C) 2005 Free Software Founda"...
.data:0041D074                 align 10h
.data:0041D080 ; int Code
.data:0041D080 Code            dd 1                    ; DATA XREF: sub_409210+6D↑r
.data:0041D080                                         ; sub_409210+9A↑r ...
.data:0041D084                 align 10h
.data:0041D090 dword_41D090    dd 1                    ; DATA XREF: sub_40A590+22↑r
.data:0041D090                                         ; sub_40A590+65↑r ...
.data:0041D094 dword_41D094    dd 100h                 ; DATA XREF: sub_40A590+3F↑o
.data:0041D094                                         ; sub_40A590+1A2↑r ...
.data:0041D098 off_41D098      dd offset unk_41E3A0    ; DATA XREF: sub_40A590+1AA↑r
.data:0041D09C ; void *off_41D09C
.data:0041D09C off_41D09C      dd offset dword_41D094  ; DATA XREF: sub_40A590+39↑r
.data:0041D09C                                         ; sub_40A590+60↑w ...
.data:0041D0A0 dword_41D0A0    dd 200h                 ; DATA XREF: sub_40ACC0+6CD↑r
.data:0041D0A0                                         ; sub_40ACC0+6D8↑r ...
.data:0041D0A4 ; char *off_41D0A4
.data:0041D0A4 off_41D0A4      dd offset aComExeBatCmd ; DATA XREF: sub_40B570+3D3↑r
.data:0041D0A4                                         ; sub_40B570+400↑r ...
.data:0041D0A4                                         ; ".com;.exe;.bat;.cmd"
.data:0041D0A8                 align 10h
.data:0041D0B0 byte_41D0B0     db 41h                  ; DATA XREF: sub_40D240+6B↑w
.data:0041D0B0                                         ; sub_40D240:loc_40D354↑r
.data:0041D0B1                 align 10h
.data:0041D0C0 dword_41D0C0    dd 1                    ; DATA XREF: .text:loc_40E667↑r
.data:0041D0C0                                         ; sub_40EC40+202↑w
.data:0041D0C4                 align 10h
.data:0041D0D0 off_41D0D0      dd offset aNotset       ; DATA XREF: .text:0040EEBA↑r
.data:0041D0D0                                         ; .text:0040FB02↑r
.data:0041D0D0                                         ; "notset"
.data:0041D0D4 off_41D0D4      dd offset aNotset       ; DATA XREF: .text:0040EED2↑r
.data:0041D0D4                                         ; .text:0040EEF4↑r ...
.data:0041D0D4                                         ; "notset"
.data:0041D0D8                 align 10h
.data:0041D0E0 unk_41D0E0      db    0                 ; DATA XREF: .data:off_41D154↓o
.data:0041D0E1                 db    0
.data:0041D0E2                 db    0
.data:0041D0E3                 db    0
.data:0041D0E4                 db  70h ; p
.data:0041D0E5                 db    2
.data:0041D0E6                 db  41h ; A
.data:0041D0E7                 db    0
.data:0041D0E8                 db 0D0h ; Ð
.data:0041D0E9                 db  81h
.data:0041D0EA                 db  41h ; A
.data:0041D0EB                 db    0
.data:0041D0EC                 db  70h ; p
.data:0041D0ED                 db  83h ; ƒ
.data:0041D0EE                 db  41h ; A
.data:0041D0EF                 db    0
.data:0041D0F0                 db  70h ; p
.data:0041D0F1                 db  84h ; „
.data:0041D0F2                 db  41h ; A
.data:0041D0F3                 db    0
.data:0041D0F4                 db  70h ; p
.data:0041D0F5                 db  88h ; ˆ
.data:0041D0F6                 db  41h ; A
.data:0041D0F7                 db    0
.data:0041D0F8                 db  70h ; p
.data:0041D0F9                 db  8Ah ; Š
.data:0041D0FA                 db  41h ; A
.data:0041D0FB                 db    0
.data:0041D0FC                 db 0B0h ; °
.data:0041D0FD                 db  8Ah ; Š
.data:0041D0FE                 db  41h ; A
.data:0041D0FF                 db    0
.data:0041D100                 db  10h
.data:0041D101                 db  8Bh ; ‹
.data:0041D102                 db  41h ; A
.data:0041D103                 db    0
.data:0041D104                 db  90h
.data:0041D105                 db  8Bh ; ‹
.data:0041D106                 db  41h ; A
.data:0041D107                 db    0
.data:0041D108                 db  10h
.data:0041D109                 db  8Ch ; Œ
.data:0041D10A                 db  41h ; A
.data:0041D10B                 db    0
.data:0041D10C                 db  70h ; p
.data:0041D10D                 db  8Ch ; Œ
.data:0041D10E                 db  41h ; A
.data:0041D10F                 db    0
.data:0041D110                 db  70h ; p
.data:0041D111                 db  8Eh ; Ž
.data:0041D112                 db  41h ; A
.data:0041D113                 db    0
.data:0041D114                 db 0D0h ; Ð
.data:0041D115                 db  68h ; h
.data:0041D116                 db  41h ; A
.data:0041D117                 db    0
.data:0041D118                 db 0D0h ; Ð
.data:0041D119                 db  76h ; v
.data:0041D11A                 db  41h ; A
.data:0041D11B                 db    0
.data:0041D11C                 db 0D0h ; Ð
.data:0041D11D                 db  70h ; p
.data:0041D11E                 db  41h ; A
.data:0041D11F                 db    0
.data:0041D120                 db 0F0h ; ð
.data:0041D121                 db  8Eh ; Ž
.data:0041D122                 db  41h ; A
.data:0041D123                 db    0
.data:0041D124                 db 0F0h ; ð
.data:0041D125                 db  8Eh ; Ž
.data:0041D126                 db  41h ; A
.data:0041D127                 db    0
.data:0041D128                 db 0F0h ; ð
.data:0041D129                 db  8Eh ; Ž
.data:0041D12A                 db  41h ; A
.data:0041D12B                 db    0
.data:0041D12C                 db 0F0h ; ð
.data:0041D12D                 db  8Eh ; Ž
.data:0041D12E                 db  41h ; A
.data:0041D12F                 db    0
.data:0041D130                 db 0F0h ; ð
.data:0041D131                 db  8Eh ; Ž
.data:0041D132                 db  41h ; A
.data:0041D133                 db    0
.data:0041D134                 db 0F0h ; ð
.data:0041D135                 db  8Eh ; Ž
.data:0041D136                 db  41h ; A
.data:0041D137                 db    0
.data:0041D138                 db 0F0h ; ð
.data:0041D139                 db  8Eh ; Ž
.data:0041D13A                 db  41h ; A
.data:0041D13B                 db    0
.data:0041D13C                 db 0F0h ; ð
.data:0041D13D                 db  8Eh ; Ž
.data:0041D13E                 db  41h ; A
.data:0041D13F                 db    0
.data:0041D140                 db 0F0h ; ð
.data:0041D141                 db  8Eh ; Ž
.data:0041D142                 db  41h ; A
.data:0041D143                 db    0
.data:0041D144                 db 0F0h ; ð
.data:0041D145                 db  8Eh ; Ž
.data:0041D146                 db  41h ; A
.data:0041D147                 db    0
.data:0041D148                 db 0F0h ; ð
.data:0041D149                 db  8Eh ; Ž
.data:0041D14A                 db  41h ; A
.data:0041D14B                 db    0
.data:0041D14C                 db 0F0h ; ð
.data:0041D14D                 db  8Eh ; Ž
.data:0041D14E                 db  41h ; A
.data:0041D14F                 db    0
.data:0041D150                 db 0F0h ; ð
.data:0041D151                 db  8Eh ; Ž
.data:0041D152                 db  41h ; A
.data:0041D153                 db    0
.data:0041D154 off_41D154      dd offset unk_41D0E0    ; DATA XREF: sub_40DDE0+13↑r
.data:0041D158                 align 10h
.data:0041D160 dword_41D160    dd 0FFFFFFFFh           ; DATA XREF: sub_401080+22↑r
.data:0041D164                 align 10h
.data:0041D170 ; int Mode
.data:0041D170 Mode            dd 0                    ; DATA XREF: sub_401080+4E↑r
.data:0041D170                                         ; sub_401080+80↑r ...
.data:0041D174                 align 10h
.data:0041D180 dword_41D180    dd 4000h                ; DATA XREF: sub_401080+57↑w
.data:0041D180                                         ; sub_401080+BA↑r
.data:0041D184                 align 10h
.data:0041D190 dword_41D190    dd 0                    ; DATA XREF: sub_41B260+9↑r
.data:0041D190                                         ; sub_41B260+1D↑w
.data:0041D194 off_41D194      dd offset dword_41C43C  ; DATA XREF: sub_41B1D0+6↑r
.data:0041D194                                         ; sub_41B1D0+17↑r ...
.data:0041D198                 align 1000h
.data:0041D198 _data           ends
.data:0041D198
.bss:0041E000 ; Section 3. (virtual address 0001E000)
.bss:0041E000 ; Virtual size                  : 000008B0 (   2224.)
.bss:0041E000 ; Section size in file          : 00000000 (      0.)
.bss:0041E000 ; Offset to raw data for section: 00000000
.bss:0041E000 ; Flags C0000080: Bss Readable Writable
.bss:0041E000 ; Alignment     : default
.bss:0041E000 ; ===========================================================================
.bss:0041E000
.bss:0041E000 ; Segment type: Uninitialized
.bss:0041E000 ; Segment permissions: Read/Write
.bss:0041E000 _bss            segment para public 'BSS' use32
.bss:0041E000                 assume cs:_bss
.bss:0041E000                 ;org 41E000h
.bss:0041E000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:0041E000 byte_41E000     db ?                    ; DATA XREF: sub_401910:loc_4022F2↑w
.bss:0041E000                                         ; sub_401910+D9E↑r ...
.bss:0041E001                 align 10h
.bss:0041E010 byte_41E010     db ?                    ; DATA XREF: sub_401910:loc_401A17↑w
.bss:0041E010                                         ; sub_401910:loc_4026A5↑r ...
.bss:0041E011                 align 10h
.bss:0041E020 byte_41E020     db ?                    ; DATA XREF: sub_401910+81D↑w
.bss:0041E020                                         ; sub_401910+ACA↑w ...
.bss:0041E021                 align 10h
.bss:0041E030 byte_41E030     db ?                    ; DATA XREF: sub_402D20:loc_403056↑r
.bss:0041E030                                         ; sub_402D20:loc_40308C↑w ...
.bss:0041E031                 align 10h
.bss:0041E040 byte_41E040     db ?                    ; DATA XREF: sub_401910:loc_402228↑w
.bss:0041E040                                         ; sub_4036F0+4↑r ...
.bss:0041E041                 align 10h
.bss:0041E050 byte_41E050     db ?                    ; DATA XREF: sub_401910+E6B↑r
.bss:0041E050                                         ; sub_402A20+3D↑w ...
.bss:0041E051                 align 10h
.bss:0041E060 byte_41E060     db ?                    ; DATA XREF: sub_401910:loc_4021BA↑w
.bss:0041E060                                         ; sub_401910:loc_4026BB↑r
.bss:0041E061                 align 10h
.bss:0041E070 byte_41E070     db ?                    ; DATA XREF: sub_401910:loc_4021CD↑w
.bss:0041E070                                         ; sub_403330+B↑r ...
.bss:0041E071                 align 10h
.bss:0041E080 byte_41E080     db ?                    ; DATA XREF: sub_401910+836↑w
.bss:0041E080                                         ; sub_401910:loc_402432↑r ...
.bss:0041E081                 align 10h
.bss:0041E090 byte_41E090     db ?                    ; DATA XREF: sub_401910:loc_40204B↑w
.bss:0041E090                                         ; sub_401910:loc_4027FC↑w ...
.bss:0041E091                 align 10h
.bss:0041E0A0 byte_41E0A0     db ?                    ; DATA XREF: sub_401910:loc_4021FA↑w
.bss:0041E0A0                                         ; sub_404D00+165↑r ...
.bss:0041E0A1                 align 10h
.bss:0041E0B0 byte_41E0B0     db ?                    ; DATA XREF: sub_401910:loc_40224E↑w
.bss:0041E0B0                                         ; sub_403670+9↑r ...
.bss:0041E0B1                 align 10h
.bss:0041E0C0 dword_41E0C0    dd ?                    ; DATA XREF: sub_401910:loc_40236F↑w
.bss:0041E0C0                                         ; sub_403EF0:loc_403FAB↑r ...
.bss:0041E0C4                 align 10h
.bss:0041E0D0 byte_41E0D0     db ?                    ; DATA XREF: sub_401910:loc_402784↑r
.bss:0041E0D0                                         ; sub_402A20+5C↑w
.bss:0041E0D1                 align 10h
.bss:0041E0E0 dword_41E0E0    dd ?                    ; DATA XREF: sub_401910+576↑r
.bss:0041E0E0                                         ; sub_401910+60A↑w ...
.bss:0041E0E4 dword_41E0E4    dd ?                    ; DATA XREF: sub_401910:loc_401E80↑r
.bss:0041E0E4                                         ; sub_401910+613↑w ...
.bss:0041E0E8                 align 10h
.bss:0041E0F0 dword_41E0F0    dd ?                    ; DATA XREF: sub_402D20+3B0↑r
.bss:0041E0F0                                         ; sub_402D20+3C2↑w ...
.bss:0041E0F4                 align 10h
.bss:0041E100 byte_41E100     db ?                    ; DATA XREF: sub_401910:loc_4022FE↑w
.bss:0041E100                                         ; sub_4063A0:loc_4064B2↑r ...
.bss:0041E101                 align 10h
.bss:0041E110 byte_41E110     db ?                    ; DATA XREF: sub_401910:loc_4023E6↑w
.bss:0041E110                                         ; sub_404D00+60↑r
.bss:0041E111                 align 10h
.bss:0041E120 byte_41E120     db ?                    ; DATA XREF: sub_401910:loc_4021D9↑w
.bss:0041E120                                         ; sub_404D00+6D↑r
.bss:0041E121                 align 10h
.bss:0041E130 byte_41E130     db ?                    ; DATA XREF: sub_401910:loc_4021E5↑w
.bss:0041E130                                         ; sub_402D20:loc_402D8F↑r ...
.bss:0041E131                 align 10h
.bss:0041E140 dword_41E140    dd ?                    ; DATA XREF: sub_402A20:loc_402AC5↑w
.bss:0041E140                                         ; sub_406650+E↑w ...
.bss:0041E144                 align 10h
.bss:0041E150 byte_41E150     db ?                    ; DATA XREF: sub_401910:loc_4023AD↑w
.bss:0041E150                                         ; sub_402A20+55↑r
.bss:0041E151                 align 10h
.bss:0041E160 byte_41E160     db ?                    ; DATA XREF: sub_401910+7D5↑w
.bss:0041E160                                         ; sub_401910:loc_4023B9↑r ...
.bss:0041E161                 align 10h
.bss:0041E170 dword_41E170    dd ?                    ; DATA XREF: sub_401910+7CF↑w
.bss:0041E170                                         ; sub_401910+7F2↑w ...
.bss:0041E174                 align 10h
.bss:0041E180 byte_41E180     db ?                    ; DATA XREF: sub_403CA0:loc_403D23↑w
.bss:0041E180                                         ; sub_403CA0:loc_403DD2↑w ...
.bss:0041E181                 align 10h
.bss:0041E190 ; void *dword_41E190
.bss:0041E190 dword_41E190    dd ?                    ; DATA XREF: sub_402D20+14↑r
.bss:0041E190                                         ; sub_402D20+B4↑r ...
.bss:0041E194                 align 10h
.bss:0041E1A0 ; void *dword_41E1A0
.bss:0041E1A0 dword_41E1A0    dd ?                    ; DATA XREF: sub_403280+52↑r
.bss:0041E1A0                                         ; sub_403280+75↑w ...
.bss:0041E1A4                 align 10h
.bss:0041E1B0 dword_41E1B0    dd ?                    ; DATA XREF: sub_403330+12↑w
.bss:0041E1B0                                         ; sub_403330+124↑r ...
.bss:0041E1B4                 align 10h
.bss:0041E1C0 dword_41E1C0    dd ?                    ; DATA XREF: sub_403280+6B↑w
.bss:0041E1C0                                         ; sub_406970+9↑r ...
.bss:0041E1C4                 align 10h
.bss:0041E1D0 ; void *dword_41E1D0
.bss:0041E1D0 dword_41E1D0    dd ?                    ; DATA XREF: sub_403280+11↑r
.bss:0041E1D0                                         ; sub_403280+37↑w ...
.bss:0041E1D4                 align 10h
.bss:0041E1E0 ; void *dword_41E1E0
.bss:0041E1E0 dword_41E1E0    dd ?                    ; DATA XREF: sub_403280+3C↑r
.bss:0041E1E0                                         ; sub_403280+4D↑w ...
.bss:0041E1E4                 align 10h
.bss:0041E1F0 byte_41E1F0     db ?                    ; DATA XREF: sub_402D20+137↑w
.bss:0041E1F0                                         ; sub_402D20+1CB↑w ...
.bss:0041E1F1                 align 10h
.bss:0041E200 byte_41E200     db ?                    ; DATA XREF: sub_402D20+13E↑w
.bss:0041E200                                         ; sub_402D20+1BE↑r ...
.bss:0041E201                 align 10h
.bss:0041E210 byte_41E210     db ?                    ; DATA XREF: sub_402D20:loc_402E83↑w
.bss:0041E210                                         ; sub_402D20+456↑r ...
.bss:0041E211                 align 10h
.bss:0041E220 byte_41E220     db ?                    ; DATA XREF: sub_402D20+68↑w
.bss:0041E220                                         ; sub_403EF0+A1↑r ...
.bss:0041E221                 align 10h
.bss:0041E230 dword_41E230    dd ?                    ; DATA XREF: sub_402D20+7D↑r
.bss:0041E230                                         ; sub_403280+B↑r ...
.bss:0041E234                 align 10h
.bss:0041E240 dword_41E240    dd ?                    ; DATA XREF: sub_403280+19↑r
.bss:0041E240                                         ; sub_403EF0+6E↑r ...
.bss:0041E244                 align 10h
.bss:0041E250 dword_41E250    dd ?                    ; DATA XREF: sub_402D20+127↑w
.bss:0041E250                                         ; sub_403670+1A↑w ...
.bss:0041E254                 align 10h
.bss:0041E260 dword_41E260    dd ?                    ; DATA XREF: sub_402D20+11A↑w
.bss:0041E260                                         ; sub_403530+F9↑r ...
.bss:0041E264                 align 10h
.bss:0041E270 dword_41E270    dd ?                    ; DATA XREF: sub_402D20+155↑w
.bss:0041E270                                         ; sub_403330+108↑w ...
.bss:0041E274                 align 10h
.bss:0041E280 dword_41E280    dd ?                    ; DATA XREF: sub_402B00+61↑w
.bss:0041E280                                         ; sub_402B00+98↑w ...
.bss:0041E284 dword_41E284    dd ?                    ; DATA XREF: sub_402B00+67↑w
.bss:0041E284                                         ; sub_402B00+9E↑w ...
.bss:0041E288                 align 10h
.bss:0041E290 dword_41E290    dd ?                    ; DATA XREF: sub_402B00+78↑w
.bss:0041E290                                         ; sub_403530+6↑r ...
.bss:0041E294                 align 10h
.bss:0041E2A0 dword_41E2A0    dd ?                    ; DATA XREF: sub_403530+C↑r
.bss:0041E2A0                                         ; sub_4063A0+15F↑w ...
.bss:0041E2A4                 align 10h
.bss:0041E2B0 dword_41E2B0    dd ?                    ; DATA XREF: sub_403530+9E↑r
.bss:0041E2B0                                         ; sub_403530:loc_4035E7↑r ...
.bss:0041E2B4                 align 10h
.bss:0041E2C0 ; char *Buffer
.bss:0041E2C0 Buffer          dd ?                    ; DATA XREF: sub_403530+34↑r
.bss:0041E2C0                                         ; sub_403530+4E↑r ...
.bss:0041E2C4                 align 10h
.bss:0041E2D0 dword_41E2D0    dd ?                    ; DATA XREF: sub_402D20+131↑w
.bss:0041E2D0                                         ; sub_402D20+1EF↑w ...
.bss:0041E2D4                 align 10h
.bss:0041E2E0 dword_41E2E0    dd ?                    ; DATA XREF: sub_402D20+170↑w
.bss:0041E2E0                                         ; sub_402D20+46C↑w ...
.bss:0041E2E4                 align 10h
.bss:0041E2F0 byte_41E2F0     db ?                    ; DATA XREF: sub_402D20+76↑w
.bss:0041E2F0                                         ; sub_402D20+10F↑w ...
.bss:0041E2F1                 align 10h
.bss:0041E300 dword_41E300    dd ?                    ; DATA XREF: sub_401910+92A↑w
.bss:0041E300                                         ; sub_402BB0+D6↑r
.bss:0041E304                 align 10h
.bss:0041E310 ; char *Format
.bss:0041E310 Format          dd ?                    ; DATA XREF: sub_401910+730↑w
.bss:0041E310                                         ; sub_401910:loc_402672↑r ...
.bss:0041E314                 align 10h
.bss:0041E320 ; char *Block
.bss:0041E320 Block           dd ?                    ; DATA XREF: sub_402BB0:loc_402C70↑r
.bss:0041E320                                         ; sub_402BB0+D1↑w ...
.bss:0041E324                 align 10h
.bss:0041E330 ; char *dword_41E330
.bss:0041E330 dword_41E330    dd ?                    ; DATA XREF: sub_402BB0+FA↑w
.bss:0041E330                                         ; sub_402BB0+10F↑r ...
.bss:0041E334                 align 10h
.bss:0041E340 dword_41E340    dd ?                    ; DATA XREF: sub_402BB0+127↑w
.bss:0041E340                                         ; sub_403EF0+1FD↑r ...
.bss:0041E344                 align 10h
.bss:0041E350 ; void *dword_41E350
.bss:0041E350 dword_41E350    dd ?                    ; DATA XREF: sub_403EF0+34D↑r
.bss:0041E350                                         ; sub_403EF0+3D3↑r ...
.bss:0041E354                 align 10h
.bss:0041E360 dword_41E360    dd ?                    ; DATA XREF: sub_407F30+9↑o
.bss:0041E360                                         ; sub_407F30+17↑w ...
.bss:0041E364 dword_41E364    dd ?                    ; DATA XREF: sub_407F30+21↑w
.bss:0041E364                                         ; .text:00407FE9↑w
.bss:0041E368 dword_41E368    dd ?                    ; DATA XREF: sub_407F30+77↑r
.bss:0041E368                                         ; .text:00408037↑r
.bss:0041E36C dword_41E36C    dd ?                    ; DATA XREF: sub_407F30+6B↑r
.bss:0041E36C                                         ; .text:0040802B↑r
.bss:0041E370                 db    ? ;
.bss:0041E371                 db    ? ;
.bss:0041E372                 db    ? ;
.bss:0041E373                 db    ? ;
.bss:0041E374                 db    ? ;
.bss:0041E375                 db    ? ;
.bss:0041E376                 db    ? ;
.bss:0041E377                 db    ? ;
.bss:0041E378                 db    ? ;
.bss:0041E379                 db    ? ;
.bss:0041E37A                 db    ? ;
.bss:0041E37B                 db    ? ;
.bss:0041E37C                 db    ? ;
.bss:0041E37D                 db    ? ;
.bss:0041E37E                 db    ? ;
.bss:0041E37F                 db    ? ;
.bss:0041E380                 db    ? ;
.bss:0041E381                 db    ? ;
.bss:0041E382                 db    ? ;
.bss:0041E383                 db    ? ;
.bss:0041E384                 db    ? ;
.bss:0041E385                 db    ? ;
.bss:0041E386                 db    ? ;
.bss:0041E387                 db    ? ;
.bss:0041E388                 db    ? ;
.bss:0041E389                 db    ? ;
.bss:0041E38A                 db    ? ;
.bss:0041E38B                 db    ? ;
.bss:0041E38C                 db    ? ;
.bss:0041E38D                 db    ? ;
.bss:0041E38E                 db    ? ;
.bss:0041E38F                 db    ? ;
.bss:0041E390 ; char *dword_41E390
.bss:0041E390 dword_41E390    dd ?                    ; DATA XREF: .text:004091E4↑w
.bss:0041E390                                         ; sub_409210+58↑r
.bss:0041E394                 align 10h
.bss:0041E3A0 unk_41E3A0      db    ? ;               ; DATA XREF: sub_40A590+100↑o
.bss:0041E3A0                                         ; .data:off_41D098↑o
.bss:0041E3A1                 db    ? ;
.bss:0041E3A2                 db    ? ;
.bss:0041E3A3                 db    ? ;
.bss:0041E3A4                 db    ? ;
.bss:0041E3A5                 db    ? ;
.bss:0041E3A6                 db    ? ;
.bss:0041E3A7                 db    ? ;
.bss:0041E3A8                 db    ? ;
.bss:0041E3A9                 db    ? ;
.bss:0041E3AA                 db    ? ;
.bss:0041E3AB                 db    ? ;
.bss:0041E3AC                 db    ? ;
.bss:0041E3AD                 db    ? ;
.bss:0041E3AE                 db    ? ;
.bss:0041E3AF                 db    ? ;
.bss:0041E3B0                 db    ? ;
.bss:0041E3B1                 db    ? ;
.bss:0041E3B2                 db    ? ;
.bss:0041E3B3                 db    ? ;
.bss:0041E3B4                 db    ? ;
.bss:0041E3B5                 db    ? ;
.bss:0041E3B6                 db    ? ;
.bss:0041E3B7                 db    ? ;
.bss:0041E3B8                 db    ? ;
.bss:0041E3B9                 db    ? ;
.bss:0041E3BA                 db    ? ;
.bss:0041E3BB                 db    ? ;
.bss:0041E3BC                 db    ? ;
.bss:0041E3BD                 db    ? ;
.bss:0041E3BE                 db    ? ;
.bss:0041E3BF                 db    ? ;
.bss:0041E3C0                 db    ? ;
.bss:0041E3C1                 db    ? ;
.bss:0041E3C2                 db    ? ;
.bss:0041E3C3                 db    ? ;
.bss:0041E3C4                 db    ? ;
.bss:0041E3C5                 db    ? ;
.bss:0041E3C6                 db    ? ;
.bss:0041E3C7                 db    ? ;
.bss:0041E3C8                 db    ? ;
.bss:0041E3C9                 db    ? ;
.bss:0041E3CA                 db    ? ;
.bss:0041E3CB                 db    ? ;
.bss:0041E3CC                 db    ? ;
.bss:0041E3CD                 db    ? ;
.bss:0041E3CE                 db    ? ;
.bss:0041E3CF                 db    ? ;
.bss:0041E3D0                 db    ? ;
.bss:0041E3D1                 db    ? ;
.bss:0041E3D2                 db    ? ;
.bss:0041E3D3                 db    ? ;
.bss:0041E3D4                 db    ? ;
.bss:0041E3D5                 db    ? ;
.bss:0041E3D6                 db    ? ;
.bss:0041E3D7                 db    ? ;
.bss:0041E3D8                 db    ? ;
.bss:0041E3D9                 db    ? ;
.bss:0041E3DA                 db    ? ;
.bss:0041E3DB                 db    ? ;
.bss:0041E3DC                 db    ? ;
.bss:0041E3DD                 db    ? ;
.bss:0041E3DE                 db    ? ;
.bss:0041E3DF                 db    ? ;
.bss:0041E3E0                 db    ? ;
.bss:0041E3E1                 db    ? ;
.bss:0041E3E2                 db    ? ;
.bss:0041E3E3                 db    ? ;
.bss:0041E3E4                 db    ? ;
.bss:0041E3E5                 db    ? ;
.bss:0041E3E6                 db    ? ;
.bss:0041E3E7                 db    ? ;
.bss:0041E3E8                 db    ? ;
.bss:0041E3E9                 db    ? ;
.bss:0041E3EA                 db    ? ;
.bss:0041E3EB                 db    ? ;
.bss:0041E3EC                 db    ? ;
.bss:0041E3ED                 db    ? ;
.bss:0041E3EE                 db    ? ;
.bss:0041E3EF                 db    ? ;
.bss:0041E3F0                 db    ? ;
.bss:0041E3F1                 db    ? ;
.bss:0041E3F2                 db    ? ;
.bss:0041E3F3                 db    ? ;
.bss:0041E3F4                 db    ? ;
.bss:0041E3F5                 db    ? ;
.bss:0041E3F6                 db    ? ;
.bss:0041E3F7                 db    ? ;
.bss:0041E3F8                 db    ? ;
.bss:0041E3F9                 db    ? ;
.bss:0041E3FA                 db    ? ;
.bss:0041E3FB                 db    ? ;
.bss:0041E3FC                 db    ? ;
.bss:0041E3FD                 db    ? ;
.bss:0041E3FE                 db    ? ;
.bss:0041E3FF                 db    ? ;
.bss:0041E400                 db    ? ;
.bss:0041E401                 db    ? ;
.bss:0041E402                 db    ? ;
.bss:0041E403                 db    ? ;
.bss:0041E404                 db    ? ;
.bss:0041E405                 db    ? ;
.bss:0041E406                 db    ? ;
.bss:0041E407                 db    ? ;
.bss:0041E408                 db    ? ;
.bss:0041E409                 db    ? ;
.bss:0041E40A                 db    ? ;
.bss:0041E40B                 db    ? ;
.bss:0041E40C                 db    ? ;
.bss:0041E40D                 db    ? ;
.bss:0041E40E                 db    ? ;
.bss:0041E40F                 db    ? ;
.bss:0041E410                 db    ? ;
.bss:0041E411                 db    ? ;
.bss:0041E412                 db    ? ;
.bss:0041E413                 db    ? ;
.bss:0041E414                 db    ? ;
.bss:0041E415                 db    ? ;
.bss:0041E416                 db    ? ;
.bss:0041E417                 db    ? ;
.bss:0041E418                 db    ? ;
.bss:0041E419                 db    ? ;
.bss:0041E41A                 db    ? ;
.bss:0041E41B                 db    ? ;
.bss:0041E41C                 db    ? ;
.bss:0041E41D                 db    ? ;
.bss:0041E41E                 db    ? ;
.bss:0041E41F                 db    ? ;
.bss:0041E420                 db    ? ;
.bss:0041E421                 db    ? ;
.bss:0041E422                 db    ? ;
.bss:0041E423                 db    ? ;
.bss:0041E424                 db    ? ;
.bss:0041E425                 db    ? ;
.bss:0041E426                 db    ? ;
.bss:0041E427                 db    ? ;
.bss:0041E428                 db    ? ;
.bss:0041E429                 db    ? ;
.bss:0041E42A                 db    ? ;
.bss:0041E42B                 db    ? ;
.bss:0041E42C                 db    ? ;
.bss:0041E42D                 db    ? ;
.bss:0041E42E                 db    ? ;
.bss:0041E42F                 db    ? ;
.bss:0041E430                 db    ? ;
.bss:0041E431                 db    ? ;
.bss:0041E432                 db    ? ;
.bss:0041E433                 db    ? ;
.bss:0041E434                 db    ? ;
.bss:0041E435                 db    ? ;
.bss:0041E436                 db    ? ;
.bss:0041E437                 db    ? ;
.bss:0041E438                 db    ? ;
.bss:0041E439                 db    ? ;
.bss:0041E43A                 db    ? ;
.bss:0041E43B                 db    ? ;
.bss:0041E43C                 db    ? ;
.bss:0041E43D                 db    ? ;
.bss:0041E43E                 db    ? ;
.bss:0041E43F                 db    ? ;
.bss:0041E440                 db    ? ;
.bss:0041E441                 db    ? ;
.bss:0041E442                 db    ? ;
.bss:0041E443                 db    ? ;
.bss:0041E444                 db    ? ;
.bss:0041E445                 db    ? ;
.bss:0041E446                 db    ? ;
.bss:0041E447                 db    ? ;
.bss:0041E448                 db    ? ;
.bss:0041E449                 db    ? ;
.bss:0041E44A                 db    ? ;
.bss:0041E44B                 db    ? ;
.bss:0041E44C                 db    ? ;
.bss:0041E44D                 db    ? ;
.bss:0041E44E                 db    ? ;
.bss:0041E44F                 db    ? ;
.bss:0041E450                 db    ? ;
.bss:0041E451                 db    ? ;
.bss:0041E452                 db    ? ;
.bss:0041E453                 db    ? ;
.bss:0041E454                 db    ? ;
.bss:0041E455                 db    ? ;
.bss:0041E456                 db    ? ;
.bss:0041E457                 db    ? ;
.bss:0041E458                 db    ? ;
.bss:0041E459                 db    ? ;
.bss:0041E45A                 db    ? ;
.bss:0041E45B                 db    ? ;
.bss:0041E45C                 db    ? ;
.bss:0041E45D                 db    ? ;
.bss:0041E45E                 db    ? ;
.bss:0041E45F                 db    ? ;
.bss:0041E460                 db    ? ;
.bss:0041E461                 db    ? ;
.bss:0041E462                 db    ? ;
.bss:0041E463                 db    ? ;
.bss:0041E464                 db    ? ;
.bss:0041E465                 db    ? ;
.bss:0041E466                 db    ? ;
.bss:0041E467                 db    ? ;
.bss:0041E468                 db    ? ;
.bss:0041E469                 db    ? ;
.bss:0041E46A                 db    ? ;
.bss:0041E46B                 db    ? ;
.bss:0041E46C                 db    ? ;
.bss:0041E46D                 db    ? ;
.bss:0041E46E                 db    ? ;
.bss:0041E46F                 db    ? ;
.bss:0041E470                 db    ? ;
.bss:0041E471                 db    ? ;
.bss:0041E472                 db    ? ;
.bss:0041E473                 db    ? ;
.bss:0041E474                 db    ? ;
.bss:0041E475                 db    ? ;
.bss:0041E476                 db    ? ;
.bss:0041E477                 db    ? ;
.bss:0041E478                 db    ? ;
.bss:0041E479                 db    ? ;
.bss:0041E47A                 db    ? ;
.bss:0041E47B                 db    ? ;
.bss:0041E47C                 db    ? ;
.bss:0041E47D                 db    ? ;
.bss:0041E47E                 db    ? ;
.bss:0041E47F                 db    ? ;
.bss:0041E480                 db    ? ;
.bss:0041E481                 db    ? ;
.bss:0041E482                 db    ? ;
.bss:0041E483                 db    ? ;
.bss:0041E484                 db    ? ;
.bss:0041E485                 db    ? ;
.bss:0041E486                 db    ? ;
.bss:0041E487                 db    ? ;
.bss:0041E488                 db    ? ;
.bss:0041E489                 db    ? ;
.bss:0041E48A                 db    ? ;
.bss:0041E48B                 db    ? ;
.bss:0041E48C                 db    ? ;
.bss:0041E48D                 db    ? ;
.bss:0041E48E                 db    ? ;
.bss:0041E48F                 db    ? ;
.bss:0041E490                 db    ? ;
.bss:0041E491                 db    ? ;
.bss:0041E492                 db    ? ;
.bss:0041E493                 db    ? ;
.bss:0041E494                 db    ? ;
.bss:0041E495                 db    ? ;
.bss:0041E496                 db    ? ;
.bss:0041E497                 db    ? ;
.bss:0041E498                 db    ? ;
.bss:0041E499                 db    ? ;
.bss:0041E49A                 db    ? ;
.bss:0041E49B                 db    ? ;
.bss:0041E49C                 db    ? ;
.bss:0041E49D                 db    ? ;
.bss:0041E49E                 db    ? ;
.bss:0041E49F                 db    ? ;
.bss:0041E4A0 dword_41E4A0    dd ?                    ; DATA XREF: .text:loc_409F21↑o
.bss:0041E4A0                                         ; .text:loc_409F40↑o ...
.bss:0041E4A4 dword_41E4A4    dd ?                    ; DATA XREF: .text:loc_409FC0↑o
.bss:0041E4A4                                         ; .text:0040A448↑r ...
.bss:0041E4A8 dword_41E4A8    dd ?                    ; DATA XREF: .text:0040A442↑r
.bss:0041E4A8                                         ; sub_40A4F0+2C↑r
.bss:0041E4AC dword_41E4AC    dd ?                    ; DATA XREF: .text:0040A436↑r
.bss:0041E4AC                                         ; sub_40A4F0+22↑r
.bss:0041E4B0 dword_41E4B0    dd ?                    ; DATA XREF: .text:0040A452↑r
.bss:0041E4B0                                         ; sub_40A4F0+36↑r
.bss:0041E4B4 dword_41E4B4    dd ?                    ; DATA XREF: .text:0040A462↑r
.bss:0041E4B4                                         ; sub_40A4F0+4E↑r
.bss:0041E4B8 dword_41E4B8    dd ?                    ; DATA XREF: .text:0040A47F↑r
.bss:0041E4B8                                         ; sub_40A4F0+62↑r
.bss:0041E4BC dword_41E4BC    dd ?                    ; DATA XREF: .text:0040A475↑r
.bss:0041E4BC                                         ; sub_40A4F0+70↑r
.bss:0041E4C0 dword_41E4C0    dd ?                    ; DATA XREF: .text:0040A458↑r
.bss:0041E4C0                                         ; sub_40A4F0+7A↑r
.bss:0041E4C4                 align 10h
.bss:0041E4D0 ; char *Str1
.bss:0041E4D0 Str1            dd ?                    ; DATA XREF: sub_40A8B4:loc_40A8ED↑w
.bss:0041E4D0                                         ; sub_40A8B4:loc_40AA20↑r
.bss:0041E4D4                 align 10h
.bss:0041E4E0 dword_41E4E0    dd ?                    ; DATA XREF: sub_40A8B4+2D↑r
.bss:0041E4E0                                         ; sub_40A8B4+3F↑w
.bss:0041E4E4                 align 10h
.bss:0041E4F0 dword_41E4F0    dd ?                    ; DATA XREF: sub_40B570+100↑r
.bss:0041E4F0                                         ; sub_40B570+308↑w
.bss:0041E4F4                 align 10h
.bss:0041E500 ; char *dword_41E500
.bss:0041E500 dword_41E500    dd ?                    ; DATA XREF: sub_40B570:loc_40B8D4↑r
.bss:0041E500                                         ; sub_40B570+3B6↑r ...
.bss:0041E504                 align 10h
.bss:0041E510 dword_41E510    dd ?                    ; DATA XREF: sub_40D240+1C↑r
.bss:0041E510                                         ; sub_40D240+104↑w
.bss:0041E514                 align 10h
.bss:0041E520 dword_41E520    dd ?                    ; DATA XREF: sub_40D240+B↑r
.bss:0041E520                                         ; sub_40D240+71↑w
.bss:0041E524                 align 10h
.bss:0041E530 dword_41E530    dd ?                    ; DATA XREF: sub_40D240+85↑r
.bss:0041E530                                         ; sub_40D240+B9↑w
.bss:0041E534 dword_41E534    dd ?                    ; DATA XREF: sub_40D240+C4↑w
.bss:0041E538 dword_41E538    dd ?                    ; DATA XREF: sub_40D240+2E↑o
.bss:0041E538                                         ; sub_40D240+CF↑w
.bss:0041E53C dword_41E53C    dd ?                    ; DATA XREF: sub_40D240+DA↑w
.bss:0041E540                 db    ? ;
.bss:0041E541                 db    ? ;
.bss:0041E542                 db    ? ;
.bss:0041E543                 db    ? ;
.bss:0041E544                 db    ? ;
.bss:0041E545                 db    ? ;
.bss:0041E546                 db    ? ;
.bss:0041E547                 db    ? ;
.bss:0041E548                 db    ? ;
.bss:0041E549                 db    ? ;
.bss:0041E54A                 db    ? ;
.bss:0041E54B                 db    ? ;
.bss:0041E54C                 db    ? ;
.bss:0041E54D                 db    ? ;
.bss:0041E54E                 db    ? ;
.bss:0041E54F                 db    ? ;
.bss:0041E550                 db    ? ;
.bss:0041E551                 db    ? ;
.bss:0041E552                 db    ? ;
.bss:0041E553                 db    ? ;
.bss:0041E554                 db    ? ;
.bss:0041E555                 db    ? ;
.bss:0041E556                 db    ? ;
.bss:0041E557                 db    ? ;
.bss:0041E558                 db    ? ;
.bss:0041E559                 db    ? ;
.bss:0041E55A                 db    ? ;
.bss:0041E55B                 db    ? ;
.bss:0041E55C                 db    ? ;
.bss:0041E55D                 db    ? ;
.bss:0041E55E                 db    ? ;
.bss:0041E55F                 db    ? ;
.bss:0041E560                 db    ? ;
.bss:0041E561                 db    ? ;
.bss:0041E562                 db    ? ;
.bss:0041E563                 db    ? ;
.bss:0041E564                 db    ? ;
.bss:0041E565                 db    ? ;
.bss:0041E566                 db    ? ;
.bss:0041E567                 db    ? ;
.bss:0041E568                 db    ? ;
.bss:0041E569                 db    ? ;
.bss:0041E56A                 db    ? ;
.bss:0041E56B                 db    ? ;
.bss:0041E56C                 db    ? ;
.bss:0041E56D                 db    ? ;
.bss:0041E56E                 db    ? ;
.bss:0041E56F                 db    ? ;
.bss:0041E570                 db    ? ;
.bss:0041E571                 db    ? ;
.bss:0041E572                 db    ? ;
.bss:0041E573                 db    ? ;
.bss:0041E574                 db    ? ;
.bss:0041E575                 db    ? ;
.bss:0041E576                 db    ? ;
.bss:0041E577                 db    ? ;
.bss:0041E578                 db    ? ;
.bss:0041E579                 db    ? ;
.bss:0041E57A                 db    ? ;
.bss:0041E57B                 db    ? ;
.bss:0041E57C                 db    ? ;
.bss:0041E57D                 db    ? ;
.bss:0041E57E                 db    ? ;
.bss:0041E57F                 db    ? ;
.bss:0041E580                 db    ? ;
.bss:0041E581                 db    ? ;
.bss:0041E582                 db    ? ;
.bss:0041E583                 db    ? ;
.bss:0041E584                 db    ? ;
.bss:0041E585                 db    ? ;
.bss:0041E586                 db    ? ;
.bss:0041E587                 db    ? ;
.bss:0041E588                 db    ? ;
.bss:0041E589                 db    ? ;
.bss:0041E58A                 db    ? ;
.bss:0041E58B                 db    ? ;
.bss:0041E58C                 db    ? ;
.bss:0041E58D                 db    ? ;
.bss:0041E58E                 db    ? ;
.bss:0041E58F                 db    ? ;
.bss:0041E590                 db    ? ;
.bss:0041E591                 db    ? ;
.bss:0041E592                 db    ? ;
.bss:0041E593                 db    ? ;
.bss:0041E594                 db    ? ;
.bss:0041E595                 db    ? ;
.bss:0041E596                 db    ? ;
.bss:0041E597                 db    ? ;
.bss:0041E598                 db    ? ;
.bss:0041E599                 db    ? ;
.bss:0041E59A                 db    ? ;
.bss:0041E59B                 db    ? ;
.bss:0041E59C                 db    ? ;
.bss:0041E59D                 db    ? ;
.bss:0041E59E                 db    ? ;
.bss:0041E59F                 db    ? ;
.bss:0041E5A0                 db    ? ;
.bss:0041E5A1                 db    ? ;
.bss:0041E5A2                 db    ? ;
.bss:0041E5A3                 db    ? ;
.bss:0041E5A4                 db    ? ;
.bss:0041E5A5                 db    ? ;
.bss:0041E5A6                 db    ? ;
.bss:0041E5A7                 db    ? ;
.bss:0041E5A8                 db    ? ;
.bss:0041E5A9                 db    ? ;
.bss:0041E5AA                 db    ? ;
.bss:0041E5AB                 db    ? ;
.bss:0041E5AC                 db    ? ;
.bss:0041E5AD                 db    ? ;
.bss:0041E5AE                 db    ? ;
.bss:0041E5AF                 db    ? ;
.bss:0041E5B0                 db    ? ;
.bss:0041E5B1                 db    ? ;
.bss:0041E5B2                 db    ? ;
.bss:0041E5B3                 db    ? ;
.bss:0041E5B4                 db    ? ;
.bss:0041E5B5                 db    ? ;
.bss:0041E5B6                 db    ? ;
.bss:0041E5B7                 db    ? ;
.bss:0041E5B8                 db    ? ;
.bss:0041E5B9                 db    ? ;
.bss:0041E5BA                 db    ? ;
.bss:0041E5BB                 db    ? ;
.bss:0041E5BC                 db    ? ;
.bss:0041E5BD                 db    ? ;
.bss:0041E5BE                 db    ? ;
.bss:0041E5BF                 db    ? ;
.bss:0041E5C0                 db    ? ;
.bss:0041E5C1                 db    ? ;
.bss:0041E5C2                 db    ? ;
.bss:0041E5C3                 db    ? ;
.bss:0041E5C4                 db    ? ;
.bss:0041E5C5                 db    ? ;
.bss:0041E5C6                 db    ? ;
.bss:0041E5C7                 db    ? ;
.bss:0041E5C8                 db    ? ;
.bss:0041E5C9                 db    ? ;
.bss:0041E5CA                 db    ? ;
.bss:0041E5CB                 db    ? ;
.bss:0041E5CC                 db    ? ;
.bss:0041E5CD                 db    ? ;
.bss:0041E5CE                 db    ? ;
.bss:0041E5CF                 db    ? ;
.bss:0041E5D0                 db    ? ;
.bss:0041E5D1                 db    ? ;
.bss:0041E5D2                 db    ? ;
.bss:0041E5D3                 db    ? ;
.bss:0041E5D4                 db    ? ;
.bss:0041E5D5                 db    ? ;
.bss:0041E5D6                 db    ? ;
.bss:0041E5D7                 db    ? ;
.bss:0041E5D8                 db    ? ;
.bss:0041E5D9                 db    ? ;
.bss:0041E5DA                 db    ? ;
.bss:0041E5DB                 db    ? ;
.bss:0041E5DC                 db    ? ;
.bss:0041E5DD                 db    ? ;
.bss:0041E5DE                 db    ? ;
.bss:0041E5DF                 db    ? ;
.bss:0041E5E0                 db    ? ;
.bss:0041E5E1                 db    ? ;
.bss:0041E5E2                 db    ? ;
.bss:0041E5E3                 db    ? ;
.bss:0041E5E4                 db    ? ;
.bss:0041E5E5                 db    ? ;
.bss:0041E5E6                 db    ? ;
.bss:0041E5E7                 db    ? ;
.bss:0041E5E8                 db    ? ;
.bss:0041E5E9                 db    ? ;
.bss:0041E5EA                 db    ? ;
.bss:0041E5EB                 db    ? ;
.bss:0041E5EC                 db    ? ;
.bss:0041E5ED                 db    ? ;
.bss:0041E5EE                 db    ? ;
.bss:0041E5EF                 db    ? ;
.bss:0041E5F0                 db    ? ;
.bss:0041E5F1                 db    ? ;
.bss:0041E5F2                 db    ? ;
.bss:0041E5F3                 db    ? ;
.bss:0041E5F4                 db    ? ;
.bss:0041E5F5                 db    ? ;
.bss:0041E5F6                 db    ? ;
.bss:0041E5F7                 db    ? ;
.bss:0041E5F8                 db    ? ;
.bss:0041E5F9                 db    ? ;
.bss:0041E5FA                 db    ? ;
.bss:0041E5FB                 db    ? ;
.bss:0041E5FC                 db    ? ;
.bss:0041E5FD                 db    ? ;
.bss:0041E5FE                 db    ? ;
.bss:0041E5FF                 db    ? ;
.bss:0041E600                 db    ? ;
.bss:0041E601                 db    ? ;
.bss:0041E602                 db    ? ;
.bss:0041E603                 db    ? ;
.bss:0041E604                 db    ? ;
.bss:0041E605                 db    ? ;
.bss:0041E606                 db    ? ;
.bss:0041E607                 db    ? ;
.bss:0041E608                 db    ? ;
.bss:0041E609                 db    ? ;
.bss:0041E60A                 db    ? ;
.bss:0041E60B                 db    ? ;
.bss:0041E60C                 db    ? ;
.bss:0041E60D                 db    ? ;
.bss:0041E60E                 db    ? ;
.bss:0041E60F                 db    ? ;
.bss:0041E610                 db    ? ;
.bss:0041E611                 db    ? ;
.bss:0041E612                 db    ? ;
.bss:0041E613                 db    ? ;
.bss:0041E614                 db    ? ;
.bss:0041E615                 db    ? ;
.bss:0041E616                 db    ? ;
.bss:0041E617                 db    ? ;
.bss:0041E618                 db    ? ;
.bss:0041E619                 db    ? ;
.bss:0041E61A                 db    ? ;
.bss:0041E61B                 db    ? ;
.bss:0041E61C                 db    ? ;
.bss:0041E61D                 db    ? ;
.bss:0041E61E                 db    ? ;
.bss:0041E61F                 db    ? ;
.bss:0041E620                 db    ? ;
.bss:0041E621                 db    ? ;
.bss:0041E622                 db    ? ;
.bss:0041E623                 db    ? ;
.bss:0041E624                 db    ? ;
.bss:0041E625                 db    ? ;
.bss:0041E626                 db    ? ;
.bss:0041E627                 db    ? ;
.bss:0041E628                 db    ? ;
.bss:0041E629                 db    ? ;
.bss:0041E62A                 db    ? ;
.bss:0041E62B                 db    ? ;
.bss:0041E62C                 db    ? ;
.bss:0041E62D                 db    ? ;
.bss:0041E62E                 db    ? ;
.bss:0041E62F                 db    ? ;
.bss:0041E630                 db    ? ;
.bss:0041E631                 db    ? ;
.bss:0041E632                 db    ? ;
.bss:0041E633                 db    ? ;
.bss:0041E634                 db    ? ;
.bss:0041E635                 db    ? ;
.bss:0041E636                 db    ? ;
.bss:0041E637                 db    ? ;
.bss:0041E638                 db    ? ;
.bss:0041E639                 db    ? ;
.bss:0041E63A                 db    ? ;
.bss:0041E63B                 db    ? ;
.bss:0041E63C                 db    ? ;
.bss:0041E63D                 db    ? ;
.bss:0041E63E                 db    ? ;
.bss:0041E63F                 db    ? ;
.bss:0041E640                 db    ? ;
.bss:0041E641                 db    ? ;
.bss:0041E642                 db    ? ;
.bss:0041E643                 db    ? ;
.bss:0041E644                 db    ? ;
.bss:0041E645                 db    ? ;
.bss:0041E646                 db    ? ;
.bss:0041E647                 db    ? ;
.bss:0041E648                 db    ? ;
.bss:0041E649                 db    ? ;
.bss:0041E64A                 db    ? ;
.bss:0041E64B                 db    ? ;
.bss:0041E64C                 db    ? ;
.bss:0041E64D                 db    ? ;
.bss:0041E64E                 db    ? ;
.bss:0041E64F                 db    ? ;
.bss:0041E650                 db    ? ;
.bss:0041E651                 db    ? ;
.bss:0041E652                 db    ? ;
.bss:0041E653                 db    ? ;
.bss:0041E654                 db    ? ;
.bss:0041E655                 db    ? ;
.bss:0041E656                 db    ? ;
.bss:0041E657                 db    ? ;
.bss:0041E658                 db    ? ;
.bss:0041E659                 db    ? ;
.bss:0041E65A                 db    ? ;
.bss:0041E65B                 db    ? ;
.bss:0041E65C                 db    ? ;
.bss:0041E65D                 db    ? ;
.bss:0041E65E                 db    ? ;
.bss:0041E65F                 db    ? ;
.bss:0041E660                 db    ? ;
.bss:0041E661                 db    ? ;
.bss:0041E662                 db    ? ;
.bss:0041E663                 db    ? ;
.bss:0041E664                 db    ? ;
.bss:0041E665                 db    ? ;
.bss:0041E666                 db    ? ;
.bss:0041E667                 db    ? ;
.bss:0041E668                 db    ? ;
.bss:0041E669                 db    ? ;
.bss:0041E66A                 db    ? ;
.bss:0041E66B                 db    ? ;
.bss:0041E66C                 db    ? ;
.bss:0041E66D                 db    ? ;
.bss:0041E66E                 db    ? ;
.bss:0041E66F                 db    ? ;
.bss:0041E670                 db    ? ;
.bss:0041E671                 db    ? ;
.bss:0041E672                 db    ? ;
.bss:0041E673                 db    ? ;
.bss:0041E674                 db    ? ;
.bss:0041E675                 db    ? ;
.bss:0041E676                 db    ? ;
.bss:0041E677                 db    ? ;
.bss:0041E678                 db    ? ;
.bss:0041E679                 db    ? ;
.bss:0041E67A                 db    ? ;
.bss:0041E67B                 db    ? ;
.bss:0041E67C                 db    ? ;
.bss:0041E67D                 db    ? ;
.bss:0041E67E                 db    ? ;
.bss:0041E67F                 db    ? ;
.bss:0041E680                 db    ? ;
.bss:0041E681                 db    ? ;
.bss:0041E682                 db    ? ;
.bss:0041E683                 db    ? ;
.bss:0041E684                 db    ? ;
.bss:0041E685                 db    ? ;
.bss:0041E686                 db    ? ;
.bss:0041E687                 db    ? ;
.bss:0041E688                 db    ? ;
.bss:0041E689                 db    ? ;
.bss:0041E68A                 db    ? ;
.bss:0041E68B                 db    ? ;
.bss:0041E68C                 db    ? ;
.bss:0041E68D                 db    ? ;
.bss:0041E68E                 db    ? ;
.bss:0041E68F                 db    ? ;
.bss:0041E690                 db    ? ;
.bss:0041E691                 db    ? ;
.bss:0041E692                 db    ? ;
.bss:0041E693                 db    ? ;
.bss:0041E694                 db    ? ;
.bss:0041E695                 db    ? ;
.bss:0041E696                 db    ? ;
.bss:0041E697                 db    ? ;
.bss:0041E698                 db    ? ;
.bss:0041E699                 db    ? ;
.bss:0041E69A                 db    ? ;
.bss:0041E69B                 db    ? ;
.bss:0041E69C                 db    ? ;
.bss:0041E69D                 db    ? ;
.bss:0041E69E                 db    ? ;
.bss:0041E69F                 db    ? ;
.bss:0041E6A0                 db    ? ;
.bss:0041E6A1                 db    ? ;
.bss:0041E6A2                 db    ? ;
.bss:0041E6A3                 db    ? ;
.bss:0041E6A4                 db    ? ;
.bss:0041E6A5                 db    ? ;
.bss:0041E6A6                 db    ? ;
.bss:0041E6A7                 db    ? ;
.bss:0041E6A8                 db    ? ;
.bss:0041E6A9                 db    ? ;
.bss:0041E6AA                 db    ? ;
.bss:0041E6AB                 db    ? ;
.bss:0041E6AC                 db    ? ;
.bss:0041E6AD                 db    ? ;
.bss:0041E6AE                 db    ? ;
.bss:0041E6AF                 db    ? ;
.bss:0041E6B0                 db    ? ;
.bss:0041E6B1                 db    ? ;
.bss:0041E6B2                 db    ? ;
.bss:0041E6B3                 db    ? ;
.bss:0041E6B4                 db    ? ;
.bss:0041E6B5                 db    ? ;
.bss:0041E6B6                 db    ? ;
.bss:0041E6B7                 db    ? ;
.bss:0041E6B8                 db    ? ;
.bss:0041E6B9                 db    ? ;
.bss:0041E6BA                 db    ? ;
.bss:0041E6BB                 db    ? ;
.bss:0041E6BC                 db    ? ;
.bss:0041E6BD                 db    ? ;
.bss:0041E6BE                 db    ? ;
.bss:0041E6BF                 db    ? ;
.bss:0041E6C0                 db    ? ;
.bss:0041E6C1                 db    ? ;
.bss:0041E6C2                 db    ? ;
.bss:0041E6C3                 db    ? ;
.bss:0041E6C4                 db    ? ;
.bss:0041E6C5                 db    ? ;
.bss:0041E6C6                 db    ? ;
.bss:0041E6C7                 db    ? ;
.bss:0041E6C8                 db    ? ;
.bss:0041E6C9                 db    ? ;
.bss:0041E6CA                 db    ? ;
.bss:0041E6CB                 db    ? ;
.bss:0041E6CC                 db    ? ;
.bss:0041E6CD                 db    ? ;
.bss:0041E6CE                 db    ? ;
.bss:0041E6CF                 db    ? ;
.bss:0041E6D0                 db    ? ;
.bss:0041E6D1                 db    ? ;
.bss:0041E6D2                 db    ? ;
.bss:0041E6D3                 db    ? ;
.bss:0041E6D4                 db    ? ;
.bss:0041E6D5                 db    ? ;
.bss:0041E6D6                 db    ? ;
.bss:0041E6D7                 db    ? ;
.bss:0041E6D8                 db    ? ;
.bss:0041E6D9                 db    ? ;
.bss:0041E6DA                 db    ? ;
.bss:0041E6DB                 db    ? ;
.bss:0041E6DC                 db    ? ;
.bss:0041E6DD                 db    ? ;
.bss:0041E6DE                 db    ? ;
.bss:0041E6DF                 db    ? ;
.bss:0041E6E0                 db    ? ;
.bss:0041E6E1                 db    ? ;
.bss:0041E6E2                 db    ? ;
.bss:0041E6E3                 db    ? ;
.bss:0041E6E4                 db    ? ;
.bss:0041E6E5                 db    ? ;
.bss:0041E6E6                 db    ? ;
.bss:0041E6E7                 db    ? ;
.bss:0041E6E8                 db    ? ;
.bss:0041E6E9                 db    ? ;
.bss:0041E6EA                 db    ? ;
.bss:0041E6EB                 db    ? ;
.bss:0041E6EC                 db    ? ;
.bss:0041E6ED                 db    ? ;
.bss:0041E6EE                 db    ? ;
.bss:0041E6EF                 db    ? ;
.bss:0041E6F0                 db    ? ;
.bss:0041E6F1                 db    ? ;
.bss:0041E6F2                 db    ? ;
.bss:0041E6F3                 db    ? ;
.bss:0041E6F4                 db    ? ;
.bss:0041E6F5                 db    ? ;
.bss:0041E6F6                 db    ? ;
.bss:0041E6F7                 db    ? ;
.bss:0041E6F8                 db    ? ;
.bss:0041E6F9                 db    ? ;
.bss:0041E6FA                 db    ? ;
.bss:0041E6FB                 db    ? ;
.bss:0041E6FC                 db    ? ;
.bss:0041E6FD                 db    ? ;
.bss:0041E6FE                 db    ? ;
.bss:0041E6FF                 db    ? ;
.bss:0041E700                 db    ? ;
.bss:0041E701                 db    ? ;
.bss:0041E702                 db    ? ;
.bss:0041E703                 db    ? ;
.bss:0041E704                 db    ? ;
.bss:0041E705                 db    ? ;
.bss:0041E706                 db    ? ;
.bss:0041E707                 db    ? ;
.bss:0041E708                 db    ? ;
.bss:0041E709                 db    ? ;
.bss:0041E70A                 db    ? ;
.bss:0041E70B                 db    ? ;
.bss:0041E70C                 db    ? ;
.bss:0041E70D                 db    ? ;
.bss:0041E70E                 db    ? ;
.bss:0041E70F                 db    ? ;
.bss:0041E710                 db    ? ;
.bss:0041E711                 db    ? ;
.bss:0041E712                 db    ? ;
.bss:0041E713                 db    ? ;
.bss:0041E714                 db    ? ;
.bss:0041E715                 db    ? ;
.bss:0041E716                 db    ? ;
.bss:0041E717                 db    ? ;
.bss:0041E718                 db    ? ;
.bss:0041E719                 db    ? ;
.bss:0041E71A                 db    ? ;
.bss:0041E71B                 db    ? ;
.bss:0041E71C                 db    ? ;
.bss:0041E71D                 db    ? ;
.bss:0041E71E                 db    ? ;
.bss:0041E71F                 db    ? ;
.bss:0041E720                 db    ? ;
.bss:0041E721                 db    ? ;
.bss:0041E722                 db    ? ;
.bss:0041E723                 db    ? ;
.bss:0041E724                 db    ? ;
.bss:0041E725                 db    ? ;
.bss:0041E726                 db    ? ;
.bss:0041E727                 db    ? ;
.bss:0041E728                 db    ? ;
.bss:0041E729                 db    ? ;
.bss:0041E72A                 db    ? ;
.bss:0041E72B                 db    ? ;
.bss:0041E72C                 db    ? ;
.bss:0041E72D                 db    ? ;
.bss:0041E72E                 db    ? ;
.bss:0041E72F                 db    ? ;
.bss:0041E730 dword_41E730    dd ?                    ; DATA XREF: sub_40EB30+8↑r
.bss:0041E730                                         ; sub_40EC40:loc_40ECC2↑w ...
.bss:0041E734                 align 10h
.bss:0041E740 ; struct _OSVERSIONINFOA VersionInformation
.bss:0041E740 VersionInformation _OSVERSIONINFOA <?>  ; DATA XREF: sub_40EC40:loc_40EC60↑o
.bss:0041E740                                         ; sub_40EC40+2C↑w ...
.bss:0041E7D4 word_41E7D4     dw ?                    ; DATA XREF: sub_40EC40:loc_40ECF3↑r
.bss:0041E7D6                 align 4
.bss:0041E7D8 word_41E7D8     dw ?                    ; DATA XREF: .text:loc_40E6B6↑r
.bss:0041E7D8                                         ; .text:0040E6E4↑r ...
.bss:0041E7DA byte_41E7DA     db ?                    ; DATA XREF: .text:0040E675↑r
.bss:0041E7DB                 align 10h
.bss:0041E7E0 dword_41E7E0    dd ?                    ; DATA XREF: sub_40EC40+6↑r
.bss:0041E7E0                                         ; sub_40EC40+75↑w
.bss:0041E7E4                 align 10h
.bss:0041E7F0 dword_41E7F0    dd ?                    ; DATA XREF: sub_4192C0+6E↑r
.bss:0041E7F0                                         ; sub_4192C0+9A↑r ...
.bss:0041E7F4 dword_41E7F4    dd ?                    ; DATA XREF: sub_4192C0:loc_419328↑r
.bss:0041E7F4                                         ; sub_4192C0+A0↑r ...
.bss:0041E7F8                 align 10h
.bss:0041E800 dword_41E800    dd ?                    ; DATA XREF: sub_4197D0↑r
.bss:0041E800                                         ; .text:loc_419A12↑w
.bss:0041E804                 align 10h
.bss:0041E810 dword_41E810    dd ?                    ; DATA XREF: sub_401910+59↑w
.bss:0041E810                                         ; sub_4060C0+1F↑r ...
.bss:0041E814                 db    ? ;
.bss:0041E815                 db    ? ;
.bss:0041E816                 db    ? ;
.bss:0041E817                 db    ? ;
.bss:0041E818                 db    ? ;
.bss:0041E819                 db    ? ;
.bss:0041E81A                 db    ? ;
.bss:0041E81B                 db    ? ;
.bss:0041E81C                 db    ? ;
.bss:0041E81D                 db    ? ;
.bss:0041E81E                 db    ? ;
.bss:0041E81F                 db    ? ;
.bss:0041E820                 db    ? ;
.bss:0041E821                 db    ? ;
.bss:0041E822                 db    ? ;
.bss:0041E823                 db    ? ;
.bss:0041E824                 db    ? ;
.bss:0041E825                 db    ? ;
.bss:0041E826                 db    ? ;
.bss:0041E827                 db    ? ;
.bss:0041E828                 db    ? ;
.bss:0041E829                 db    ? ;
.bss:0041E82A                 db    ? ;
.bss:0041E82B                 db    ? ;
.bss:0041E82C                 db    ? ;
.bss:0041E82D                 db    ? ;
.bss:0041E82E                 db    ? ;
.bss:0041E82F                 db    ? ;
.bss:0041E830 ; char *Str
.bss:0041E830 Str             dd ?                    ; DATA XREF: sub_401910+586↑r
.bss:0041E830                                         ; sub_401910:loc_401F70↑r ...
.bss:0041E834                 align 10h
.bss:0041E840 dword_41E840    dd ?                    ; CODE XREF: sub_40A8B4+63↑p
.bss:0041E840                                         ; DATA XREF: sub_40A7B0+1E↑r ...
.bss:0041E844                 align 10h
.bss:0041E850 dword_41E850    dd ?                    ; DATA XREF: sub_40A7B0+4E↑w
.bss:0041E850                                         ; sub_40A8B4+AB↑w
.bss:0041E854                 align 40h
.bss:0041E880 dword_41E880    dd ?                    ; DATA XREF: sub_40A8B4+13↑r
.bss:0041E884                 align 800h
.bss:0041E884 _bss            ends
.bss:0041E884
.idata:0041F000 ; Section 4. (virtual address 0001F000)
.idata:0041F000 ; Virtual size                  : 00000DE8 (   3560.)
.idata:0041F000 ; Section size in file          : 00000E00 (   3584.)
.idata:0041F000 ; Offset to raw data for section: 0001BC00
.idata:0041F000 ; Flags C0000040: Data Readable Writable
.idata:0041F000 ; Alignment     : default
.idata:0041F000 ; ===========================================================================
.idata:0041F000
.idata:0041F000 ; Segment type: Externs
.idata:0041F000 ; _idata
.idata:0041F000
.idata:0041F001
.idata:0041F2B4 ;
.idata:0041F2B4 ; Imports from libintl3.dll
.idata:0041F2B4 ;
.idata:0041F2B4                 extrn __imp_libintl_bindtextdomain:dword
.idata:0041F2B4                                         ; CODE XREF: sub_401910+73↑p
.idata:0041F2B4                                         ; DATA XREF: sub_401910+73↑r ...
.idata:0041F2B8                 extrn libintl_gettext:dword
.idata:0041F2B8                                         ; CODE XREF: sub_401910+117↑p
.idata:0041F2B8                                         ; sub_401910+634↑p ...
.idata:0041F2BC                 extrn libintl_textdomain:dword
.idata:0041F2BC                                         ; CODE XREF: sub_401910+80↑p
.idata:0041F2BC                                         ; DATA XREF: sub_401910+80↑r ...
.idata:0041F2C0
.idata:0041F2C8 ;
.idata:0041F2C8 ; Imports from ADVAPI32.DLL
.idata:0041F2C8 ;
.idata:0041F2C8 ; LSTATUS (__stdcall *RegCloseKey)(HKEY hKey)
.idata:0041F2C8                 extrn __imp_RegCloseKey:dword
.idata:0041F2C8                                         ; DATA XREF: RegCloseKey↑r
.idata:0041F2CC ; LSTATUS (__stdcall *RegOpenKeyExA)(HKEY hKey, LPCSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult)
.idata:0041F2CC                 extrn __imp_RegOpenKeyExA:dword
.idata:0041F2CC                                         ; DATA XREF: RegOpenKeyExA↑r
.idata:0041F2D0 ; LSTATUS (__stdcall *RegQueryValueExA)(HKEY hKey, LPCSTR lpValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData)
.idata:0041F2D0                 extrn __imp_RegQueryValueExA:dword
.idata:0041F2D0                                         ; DATA XREF: RegQueryValueExA↑r
.idata:0041F2D4
.idata:0041F2DC ;
.idata:0041F2DC ; Imports from KERNEL32.dll
.idata:0041F2DC ;
.idata:0041F2DC ; BOOL (__stdcall *AreFileApisANSI)()
.idata:0041F2DC                 extrn __imp_AreFileApisANSI:dword
.idata:0041F2DC                                         ; DATA XREF: AreFileApisANSI↑r
.idata:0041F2E0 ; BOOL (__stdcall *CloseHandle)(HANDLE hObject)
.idata:0041F2E0                 extrn __imp_CloseHandle:dword
.idata:0041F2E0                                         ; DATA XREF: CloseHandle↑r
.idata:0041F2E4 ; BOOL (__stdcall *CreateDirectoryA)(LPCSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes)
.idata:0041F2E4                 extrn __imp_CreateDirectoryA:dword
.idata:0041F2E4                                         ; DATA XREF: CreateDirectoryA↑r
.idata:0041F2E8 ; HANDLE (__stdcall *CreateFileA)(LPCSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile)
.idata:0041F2E8                 extrn __imp_CreateFileA:dword
.idata:0041F2E8                                         ; DATA XREF: CreateFileA↑r
.idata:0041F2EC ; BOOL (__stdcall *DeviceIoControl)(HANDLE hDevice, DWORD dwIoControlCode, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesReturned, LPOVERLAPPED lpOverlapped)
.idata:0041F2EC                 extrn __imp_DeviceIoControl:dword
.idata:0041F2EC                                         ; DATA XREF: DeviceIoControl↑r
.idata:0041F2F0 ; void (__stdcall __noreturn *ExitProcess)(UINT uExitCode)
.idata:0041F2F0                 extrn __imp_ExitProcess:dword
.idata:0041F2F0                                         ; DATA XREF: ExitProcess↑r
.idata:0041F2F4 ; BOOL (__stdcall *FindClose)(HANDLE hFindFile)
.idata:0041F2F4                 extrn __imp_FindClose:dword
.idata:0041F2F4                                         ; DATA XREF: FindClose↑r
.idata:0041F2F8 ; HANDLE (__stdcall *FindFirstFileA)(LPCSTR lpFileName, LPWIN32_FIND_DATAA lpFindFileData)
.idata:0041F2F8                 extrn __imp_FindFirstFileA:dword
.idata:0041F2F8                                         ; DATA XREF: FindFirstFileA↑r
.idata:0041F2FC ; BOOL (__stdcall *FindNextFileA)(HANDLE hFindFile, LPWIN32_FIND_DATAA lpFindFileData)
.idata:0041F2FC                 extrn __imp_FindNextFileA:dword
.idata:0041F2FC                                         ; DATA XREF: FindNextFileA↑r
.idata:0041F300 ; BOOL (__stdcall *FreeLibrary)(HMODULE hLibModule)
.idata:0041F300                 extrn __imp_FreeLibrary:dword
.idata:0041F300                                         ; DATA XREF: FreeLibrary↑r
.idata:0041F304 ; DWORD (__stdcall *GetCurrentDirectoryA)(DWORD nBufferLength, LPSTR lpBuffer)
.idata:0041F304                 extrn __imp_GetCurrentDirectoryA:dword
.idata:0041F304                                         ; DATA XREF: GetCurrentDirectoryA↑r
.idata:0041F308 ; BOOL (__stdcall *GetDiskFreeSpaceA)(LPCSTR lpRootPathName, LPDWORD lpSectorsPerCluster, LPDWORD lpBytesPerSector, LPDWORD lpNumberOfFreeClusters, LPDWORD lpTotalNumberOfClusters)
.idata:0041F308                 extrn __imp_GetDiskFreeSpaceA:dword
.idata:0041F308                                         ; DATA XREF: GetDiskFreeSpaceA↑r
.idata:0041F30C ; UINT (__stdcall *GetDriveTypeA)(LPCSTR lpRootPathName)
.idata:0041F30C                 extrn __imp_GetDriveTypeA:dword
.idata:0041F30C                                         ; DATA XREF: GetDriveTypeA↑r
.idata:0041F310 ; DWORD (__stdcall *GetFileAttributesA)(LPCSTR lpFileName)
.idata:0041F310                 extrn __imp_GetFileAttributesA:dword
.idata:0041F310                                         ; DATA XREF: GetFileAttributesA↑r
.idata:0041F314 ; BOOL (__stdcall *GetFileInformationByHandle)(HANDLE hFile, LPBY_HANDLE_FILE_INFORMATION lpFileInformation)
.idata:0041F314                 extrn __imp_GetFileInformationByHandle:dword
.idata:0041F314                                         ; DATA XREF: GetFileInformationByHandle↑r
.idata:0041F318 ; DWORD (__stdcall *GetFileSize)(HANDLE hFile, LPDWORD lpFileSizeHigh)
.idata:0041F318                 extrn __imp_GetFileSize:dword
.idata:0041F318                                         ; DATA XREF: GetFileSize↑r
.idata:0041F31C ; DWORD (__stdcall *GetFileType)(HANDLE hFile)
.idata:0041F31C                 extrn __imp_GetFileType:dword
.idata:0041F31C                                         ; DATA XREF: GetFileType↑r
.idata:0041F320 ; DWORD (__stdcall *GetFullPathNameA)(LPCSTR lpFileName, DWORD nBufferLength, LPSTR lpBuffer, LPSTR *lpFilePart)
.idata:0041F320                 extrn __imp_GetFullPathNameA:dword
.idata:0041F320                                         ; DATA XREF: GetFullPathNameA↑r
.idata:0041F324 ; DWORD (__stdcall *GetLastError)()
.idata:0041F324                 extrn __imp_GetLastError:dword
.idata:0041F324                                         ; DATA XREF: GetLastError↑r
.idata:0041F328 ; DWORD (__stdcall *GetLogicalDriveStringsA)(DWORD nBufferLength, LPSTR lpBuffer)
.idata:0041F328                 extrn __imp_GetLogicalDriveStringsA:dword
.idata:0041F328                                         ; DATA XREF: GetLogicalDriveStringsA↑r
.idata:0041F32C ; DWORD (__stdcall *GetModuleFileNameA)(HMODULE hModule, LPSTR lpFilename, DWORD nSize)
.idata:0041F32C                 extrn __imp_GetModuleFileNameA:dword
.idata:0041F32C                                         ; DATA XREF: GetModuleFileNameA↑r
.idata:0041F330 ; HMODULE (__stdcall *GetModuleHandleA)(LPCSTR lpModuleName)
.idata:0041F330                 extrn __imp_GetModuleHandleA:dword
.idata:0041F330                                         ; DATA XREF: GetModuleHandleA↑r
.idata:0041F334 ; FARPROC (__stdcall *GetProcAddress)(HMODULE hModule, LPCSTR lpProcName)
.idata:0041F334                 extrn __imp_GetProcAddress:dword
.idata:0041F334                                         ; DATA XREF: GetProcAddress↑r
.idata:0041F338 ; HANDLE (__stdcall *GetProcessHeap)()
.idata:0041F338                 extrn __imp_GetProcessHeap:dword
.idata:0041F338                                         ; DATA XREF: GetProcessHeap↑r
.idata:0041F33C ; DWORD (__stdcall *GetShortPathNameA)(LPCSTR lpszLongPath, LPSTR lpszShortPath, DWORD cchBuffer)
.idata:0041F33C                 extrn __imp_GetShortPathNameA:dword
.idata:0041F33C                                         ; DATA XREF: GetShortPathNameA↑r
.idata:0041F340 ; void (__stdcall *GetSystemTimeAsFileTime)(LPFILETIME lpSystemTimeAsFileTime)
.idata:0041F340                 extrn __imp_GetSystemTimeAsFileTime:dword
.idata:0041F340                                         ; DATA XREF: GetSystemTimeAsFileTime↑r
.idata:0041F344 ; DWORD (__stdcall *GetTimeZoneInformation)(LPTIME_ZONE_INFORMATION lpTimeZoneInformation)
.idata:0041F344                 extrn __imp_GetTimeZoneInformation:dword
.idata:0041F344                                         ; DATA XREF: GetTimeZoneInformation↑r
.idata:0041F348 ; DWORD (__stdcall *GetVersion)()
.idata:0041F348                 extrn __imp_GetVersion:dword
.idata:0041F348                                         ; DATA XREF: GetVersion↑r
.idata:0041F34C ; BOOL (__stdcall *GetVersionExA)(LPOSVERSIONINFOA lpVersionInformation)
.idata:0041F34C                 extrn __imp_GetVersionExA:dword
.idata:0041F34C                                         ; DATA XREF: GetVersionExA↑r
.idata:0041F350 ; BOOL (__stdcall *GetVolumeInformationA)(LPCSTR lpRootPathName, LPSTR lpVolumeNameBuffer, DWORD nVolumeNameSize, LPDWORD lpVolumeSerialNumber, LPDWORD lpMaximumComponentLength, LPDWORD lpFileSystemFlags, LPSTR lpFileSystemNameBuffer, DWORD nFileSystemNameSize)
.idata:0041F350                 extrn __imp_GetVolumeInformationA:dword
.idata:0041F350                                         ; DATA XREF: GetVolumeInformationA↑r
.idata:0041F354 ; LPVOID (__stdcall *HeapAlloc)(HANDLE hHeap, DWORD dwFlags, SIZE_T dwBytes)
.idata:0041F354                 extrn __imp_HeapAlloc:dword
.idata:0041F354                                         ; DATA XREF: HeapAlloc↑r
.idata:0041F358 ; BOOL (__stdcall *HeapFree)(HANDLE hHeap, DWORD dwFlags, LPVOID lpMem)
.idata:0041F358                 extrn __imp_HeapFree:dword
.idata:0041F358                                         ; DATA XREF: HeapFree↑r
.idata:0041F35C ; HMODULE (__stdcall *LoadLibraryA)(LPCSTR lpLibFileName)
.idata:0041F35C                 extrn __imp_LoadLibraryA:dword
.idata:0041F35C                                         ; DATA XREF: LoadLibraryA↑r
.idata:0041F360 ; int (__stdcall *MultiByteToWideChar)(UINT CodePage, DWORD dwFlags, LPCCH lpMultiByteStr, int cbMultiByte, LPWSTR lpWideCharStr, int cchWideChar)
.idata:0041F360                 extrn __imp_MultiByteToWideChar:dword
.idata:0041F360                                         ; DATA XREF: MultiByteToWideChar↑r
.idata:0041F364 ; BOOL (__stdcall *PeekNamedPipe)(HANDLE hNamedPipe, LPVOID lpBuffer, DWORD nBufferSize, LPDWORD lpBytesRead, LPDWORD lpTotalBytesAvail, LPDWORD lpBytesLeftThisMessage)
.idata:0041F364                 extrn __imp_PeekNamedPipe:dword
.idata:0041F364                                         ; DATA XREF: PeekNamedPipe↑r
.idata:0041F368 ; UINT (__stdcall *SetErrorMode)(UINT uMode)
.idata:0041F368                 extrn __imp_SetErrorMode:dword
.idata:0041F368                                         ; DATA XREF: SetErrorMode↑r
.idata:0041F36C ; LPTOP_LEVEL_EXCEPTION_FILTER (__stdcall *SetUnhandledExceptionFilter)(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.idata:0041F36C                 extrn __imp_SetUnhandledExceptionFilter:dword
.idata:0041F36C                                         ; DATA XREF: SetUnhandledExceptionFilter↑r
.idata:0041F370 ; BOOL (__stdcall *UnlockFile)(HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToUnlockLow, DWORD nNumberOfBytesToUnlockHigh)
.idata:0041F370                 extrn __imp_UnlockFile:dword
.idata:0041F370                                         ; DATA XREF: UnlockFile↑r
.idata:0041F374 ; int (__stdcall *lstrcmpiA)(LPCSTR lpString1, LPCSTR lpString2)
.idata:0041F374                 extrn __imp_lstrcmpiA:dword
.idata:0041F374                                         ; DATA XREF: lstrcmpiA↑r
.idata:0041F378 ; LPSTR (__stdcall *lstrcpyA)(LPSTR lpString1, LPCSTR lpString2)
.idata:0041F378                 extrn __imp_lstrcpyA:dword
.idata:0041F378                                         ; DATA XREF: lstrcpyA↑r
.idata:0041F37C
.idata:0041F384 ;
.idata:0041F384 ; Imports from msvcrt.dll
.idata:0041F384 ;
.idata:0041F384 ; int (__cdecl *_chmod)(const char *FileName, int AccessMode)
.idata:0041F384                 extrn __imp__chmod:dword
.idata:0041F384                                         ; DATA XREF: _chmod↑r
.idata:0041F388 ; int (__cdecl *_getpid)()
.idata:0041F388                 extrn __imp__getpid:dword
.idata:0041F388                                         ; DATA XREF: _getpid↑r
.idata:0041F38C ; char *(__cdecl *_strdup)(const char *String)
.idata:0041F38C                 extrn __imp__strdup:dword
.idata:0041F38C                                         ; DATA XREF: _strdup↑r
.idata:0041F390 ; int (__cdecl *_stricmp)(const char *String1, const char *String2)
.idata:0041F390                 extrn __imp__stricmp:dword
.idata:0041F390                                         ; DATA XREF: _stricmp↑r
.idata:0041F394
.idata:0041F39C ;
.idata:0041F39C ; Imports from MSVCP60.DLL
.idata:0041F39C ;
.idata:0041F39C ; size_t (__cdecl *mbrtowc)(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.idata:0041F39C                 extrn __imp_mbrtowc:dword
.idata:0041F39C                                         ; DATA XREF: mbrtowc↑r
.idata:0041F3A0
.idata:0041F3A8 ;
.idata:0041F3A8 ; Imports from msvcrt.dll
.idata:0041F3A8 ;
.idata:0041F3A8                 extrn __imp___getmainargs:dword
.idata:0041F3A8                                         ; DATA XREF: __getmainargs↑r
.idata:0041F3AC ; int _mb_cur_max
.idata:0041F3AC                 extrn __mb_cur_max:dword
.idata:0041F3AC                                         ; DATA XREF: sub_4047B0+33C↑r
.idata:0041F3AC                                         ; sub_404D00+34↑r ...
.idata:0041F3B0 ; char ***(__cdecl *__p__environ)()
.idata:0041F3B0                 extrn __imp___p__environ:dword
.idata:0041F3B0                                         ; DATA XREF: __p__environ↑r
.idata:0041F3B4 ; int *(__cdecl *__p__fmode)()
.idata:0041F3B4                 extrn __imp___p__fmode:dword
.idata:0041F3B4                                         ; DATA XREF: __p__fmode↑r
.idata:0041F3B8 ; void (__cdecl *_set_app_type)(_crt_app_type Type)
.idata:0041F3B8                 extrn __set_app_type:dword
.idata:0041F3B8                                         ; CODE XREF: start+D↑p
.idata:0041F3B8                                         ; .text:0040102D↑p
.idata:0041F3B8                                         ; DATA XREF: ...
.idata:0041F3BC                 extrn __imp__assert:dword
.idata:0041F3BC                                         ; DATA XREF: _assert↑r
.idata:0041F3C0 ; void (__cdecl *_cexit)()
.idata:0041F3C0                 extrn __imp__cexit:dword
.idata:0041F3C0                                         ; DATA XREF: _cexit↑r
.idata:0041F3C4 ; int (__cdecl *_close)(int FileHandle)
.idata:0041F3C4                 extrn __imp__close:dword
.idata:0041F3C4                                         ; DATA XREF: _close↑r
.idata:0041F3C8 ; int *(__cdecl *_errno)()
.idata:0041F3C8                 extrn __imp__errno:dword
.idata:0041F3C8                                         ; DATA XREF: _errno↑r
.idata:0041F3CC ; FILE *(__cdecl *_fdopen)(int FileHandle, const char *Format)
.idata:0041F3CC                 extrn __imp__fdopen:dword
.idata:0041F3CC                                         ; DATA XREF: _fdopen↑r
.idata:0041F3D0 ; int (__cdecl *_filbuf)(FILE *File)
.idata:0041F3D0                 extrn __imp__filbuf:dword
.idata:0041F3D0                                         ; DATA XREF: _filbuf↑r
.idata:0041F3D4 ; __int64 (__cdecl *_filelengthi64)(int FileHandle)
.idata:0041F3D4                 extrn __imp__filelengthi64:dword
.idata:0041F3D4                                         ; DATA XREF: _filelengthi64↑r
.idata:0041F3D8 ; int (__cdecl *_flsbuf)(int Ch, FILE *File)
.idata:0041F3D8                 extrn __imp__flsbuf:dword
.idata:0041F3D8                                         ; DATA XREF: _flsbuf↑r
.idata:0041F3DC ; intptr_t (__cdecl *_get_osfhandle)(int FileHandle)
.idata:0041F3DC                 extrn __imp__get_osfhandle:dword
.idata:0041F3DC                                         ; DATA XREF: _get_osfhandle↑r
.idata:0041F3E0 ; FILE iob[]
.idata:0041F3E0                 extrn _iob:dword        ; DATA XREF: sub_401080+5C↑r
.idata:0041F3E0                                         ; sub_401080+75↑r ...
.idata:0041F3E4 ; int (__cdecl *_isctype)(int C, int Type)
.idata:0041F3E4                 extrn __imp__isctype:dword
.idata:0041F3E4                                         ; DATA XREF: _isctype↑r
.idata:0041F3E8 ; _onexit_t (__cdecl *onexit)(_onexit_t Func)
.idata:0041F3E8                 extrn _onexit:dword     ; CODE XREF: .text:0040106C↑p
.idata:0041F3E8                                         ; DATA XREF: .text:0040106C↑r
.idata:0041F3EC ; int (*_open)(const char *FileName, int OpenFlag, ...)
.idata:0041F3EC                 extrn __imp__open:dword ; DATA XREF: _open↑r
.idata:0041F3F0 ; const unsigned __int16 *pctype
.idata:0041F3F0                 extrn _pctype:dword     ; DATA XREF: sub_4047B0:loc_404BD2↑r
.idata:0041F3F0                                         ; sub_404D00:loc_404E42↑r ...
.idata:0041F3F4 ; int (__cdecl *_setmode)(int FileHandle, int Mode)
.idata:0041F3F4                 extrn __imp__setmode:dword
.idata:0041F3F4                                         ; DATA XREF: _setmode↑r
.idata:0041F3F8 ; int (__cdecl *_stricmp_0)(const char *String1, const char *String2)
.idata:0041F3F8                 extrn __imp__stricmp_0:dword
.idata:0041F3F8                                         ; DATA XREF: _stricmp_0↑r
.idata:0041F3FC ; void (__cdecl __noreturn *abort)()
.idata:0041F3FC                 extrn __imp_abort:dword ; DATA XREF: abort↑r
.idata:0041F400 ; int (__cdecl *atexit)(void (__cdecl *)())
.idata:0041F400                 extrn atexit:dword      ; CODE XREF: sub_401040+C↑p
.idata:0041F400                                         ; DATA XREF: sub_401040+C↑r
.idata:0041F404 ; void *(__cdecl *calloc)(size_t Count, size_t Size)
.idata:0041F404                 extrn __imp_calloc:dword
.idata:0041F404                                         ; DATA XREF: calloc↑r
.idata:0041F408 ; char *(__cdecl *ctime)(const __time32_t *const Time)
.idata:0041F408                 extrn __imp_ctime:dword ; DATA XREF: ctime↑r
.idata:0041F40C ; void (__cdecl __noreturn *exit)(int Code)
.idata:0041F40C                 extrn __imp_exit:dword  ; DATA XREF: exit↑r
.idata:0041F410 ; int (__cdecl *fclose)(FILE *Stream)
.idata:0041F410                 extrn __imp_fclose:dword
.idata:0041F410                                         ; DATA XREF: fclose↑r
.idata:0041F414 ; int (__cdecl *fflush)(FILE *Stream)
.idata:0041F414                 extrn __imp_fflush:dword
.idata:0041F414                                         ; DATA XREF: fflush↑r
.idata:0041F418 ; FILE *(__cdecl *fopen)(const char *FileName, const char *Mode)
.idata:0041F418                 extrn __imp_fopen:dword ; DATA XREF: fopen↑r
.idata:0041F41C ; int (*fprintf)(FILE *const Stream, const char *const Format, ...)
.idata:0041F41C                 extrn __imp_fprintf:dword
.idata:0041F41C                                         ; DATA XREF: fprintf↑r
.idata:0041F420 ; int (__cdecl *fputs)(const char *Buffer, FILE *Stream)
.idata:0041F420                 extrn __imp_fputs:dword ; DATA XREF: fputs↑r
.idata:0041F424 ; void (__cdecl *free)(void *Block)
.idata:0041F424                 extrn __imp_free:dword  ; DATA XREF: free↑r
.idata:0041F428 ; char *(__cdecl *getenv)(const char *VarName)
.idata:0041F428                 extrn __imp_getenv:dword
.idata:0041F428                                         ; DATA XREF: getenv↑r
.idata:0041F42C ; int (__cdecl *isalpha)(int C)
.idata:0041F42C                 extrn __imp_isalpha:dword
.idata:0041F42C                                         ; DATA XREF: isalpha↑r
.idata:0041F430 ; int (__cdecl *iswctype)(wint_t C, wctype_t Type)
.idata:0041F430                 extrn __imp_iswctype:dword
.idata:0041F430                                         ; DATA XREF: iswctype↑r
.idata:0041F434 ; struct tm *(__cdecl *localtime)(const __time32_t *const Time)
.idata:0041F434                 extrn __imp_localtime:dword
.idata:0041F434                                         ; DATA XREF: localtime↑r
.idata:0041F438 ; void *(__cdecl *malloc)(size_t Size)
.idata:0041F438                 extrn __imp_malloc:dword
.idata:0041F438                                         ; DATA XREF: malloc↑r
.idata:0041F43C ; void *(__cdecl *memcpy)(void *, const void *Src, size_t Size)
.idata:0041F43C                 extrn __imp_memcpy:dword
.idata:0041F43C                                         ; DATA XREF: memcpy↑r
.idata:0041F440 ; void *(__cdecl *memset)(void *, int Val, size_t Size)
.idata:0041F440                 extrn __imp_memset:dword
.idata:0041F440                                         ; DATA XREF: memset↑r
.idata:0041F444 ; int (*printf)(const char *const Format, ...)
.idata:0041F444                 extrn __imp_printf:dword
.idata:0041F444                                         ; DATA XREF: printf↑r
.idata:0041F448 ; int (__cdecl *puts)(const char *Buffer)
.idata:0041F448                 extrn __imp_puts:dword  ; DATA XREF: puts↑r
.idata:0041F44C ; void *(__cdecl *realloc)(void *Block, size_t Size)
.idata:0041F44C                 extrn __imp_realloc:dword
.idata:0041F44C                                         ; DATA XREF: realloc↑r
.idata:0041F450 ; char *(__cdecl *setlocale)(int Category, const char *Locale)
.idata:0041F450                 extrn __imp_setlocale:dword
.idata:0041F450                                         ; DATA XREF: setlocale↑r
.idata:0041F454 ; _crt_signal_t (__cdecl *signal)(int Signal, _crt_signal_t Function)
.idata:0041F454                 extrn __imp_signal:dword
.idata:0041F454                                         ; DATA XREF: signal↑r
.idata:0041F458 ; int (*sprintf)(char *const Buffer, const char *const Format, ...)
.idata:0041F458                 extrn __imp_sprintf:dword
.idata:0041F458                                         ; DATA XREF: sprintf↑r
.idata:0041F45C ; int (*sscanf)(const char *const Buffer, const char *const Format, ...)
.idata:0041F45C                 extrn __imp_sscanf:dword
.idata:0041F45C                                         ; DATA XREF: sscanf↑r
.idata:0041F460 ; char *(__cdecl *strcat)(char *Destination, const char *Source)
.idata:0041F460                 extrn __imp_strcat:dword
.idata:0041F460                                         ; DATA XREF: strcat↑r
.idata:0041F464 ; char *(__cdecl *strchr)(const char *Str, int Val)
.idata:0041F464                 extrn __imp_strchr:dword
.idata:0041F464                                         ; DATA XREF: strchr↑r
.idata:0041F468 ; int (__cdecl *strcmp)(const char *Str1, const char *Str2)
.idata:0041F468                 extrn __imp_strcmp:dword
.idata:0041F468                                         ; DATA XREF: strcmp↑r
.idata:0041F46C ; char *(__cdecl *strcpy)(char *Destination, const char *Source)
.idata:0041F46C                 extrn __imp_strcpy:dword
.idata:0041F46C                                         ; DATA XREF: strcpy↑r
.idata:0041F470 ; char *(__cdecl *strerror)(int ErrorMessage)
.idata:0041F470                 extrn __imp_strerror:dword
.idata:0041F470                                         ; DATA XREF: strerror↑r
.idata:0041F474 ; size_t (__cdecl *strftime)(char *Buffer, size_t SizeInBytes, const char *Format, const struct tm *Tm)
.idata:0041F474                 extrn __imp_strftime:dword
.idata:0041F474                                         ; DATA XREF: strftime↑r
.idata:0041F478 ; size_t (__cdecl *strlen)(const char *Str)
.idata:0041F478                 extrn __imp_strlen:dword
.idata:0041F478                                         ; DATA XREF: strlen↑r
.idata:0041F47C ; int (__cdecl *strncmp)(const char *Str1, const char *Str2, size_t MaxCount)
.idata:0041F47C                 extrn __imp_strncmp:dword
.idata:0041F47C                                         ; DATA XREF: strncmp↑r
.idata:0041F480 ; char *(__cdecl *strncpy)(char *Destination, const char *Source, size_t Count)
.idata:0041F480                 extrn __imp_strncpy:dword
.idata:0041F480                                         ; DATA XREF: strncpy↑r
.idata:0041F484 ; char *(__cdecl *strpbrk)(const char *Str, const char *Control)
.idata:0041F484                 extrn __imp_strpbrk:dword
.idata:0041F484                                         ; DATA XREF: strpbrk↑r
.idata:0041F488 ; char *(__cdecl *strrchr)(const char *Str, int Ch)
.idata:0041F488                 extrn __imp_strrchr:dword
.idata:0041F488                                         ; DATA XREF: strrchr↑r
.idata:0041F48C ; size_t (__cdecl *strspn)(const char *Str, const char *Control)
.idata:0041F48C                 extrn __imp_strspn:dword
.idata:0041F48C                                         ; DATA XREF: strspn↑r
.idata:0041F490 ; char *(__cdecl *strstr)(const char *Str, const char *SubStr)
.idata:0041F490                 extrn __imp_strstr:dword
.idata:0041F490                                         ; DATA XREF: strstr↑r
.idata:0041F494 ; int (__cdecl *strtol)(const char *String, char **EndPtr, int Radix)
.idata:0041F494                 extrn __imp_strtol:dword
.idata:0041F494                                         ; DATA XREF: strtol↑r
.idata:0041F498 ; __time32_t (__cdecl *time)(__time32_t *const Time)
.idata:0041F498                 extrn __imp_time:dword  ; DATA XREF: time↑r
.idata:0041F49C ; int (__cdecl *toupper)(int C)
.idata:0041F49C                 extrn __imp_toupper:dword
.idata:0041F49C                                         ; DATA XREF: toupper↑r
.idata:0041F4A0 ; int (__cdecl *ungetc)(int Character, FILE *Stream)
.idata:0041F4A0                 extrn __imp_ungetc:dword
.idata:0041F4A0                                         ; DATA XREF: ungetc↑r
.idata:0041F4A4 ; int (__cdecl *vfprintf)(FILE *const Stream, const char *const Format, va_list ArgList)
.idata:0041F4A4                 extrn __imp_vfprintf:dword
.idata:0041F4A4                                         ; DATA XREF: vfprintf↑r
.idata:0041F4A8
.idata:0041F4B0 ;
.idata:0041F4B0 ; Imports from OLE32.dll
.idata:0041F4B0 ;
.idata:0041F4B0 ; HRESULT (__stdcall *CoCreateInstance)(const IID *const rclsid, LPUNKNOWN pUnkOuter, DWORD dwClsContext, const IID *const riid, LPVOID *ppv)
.idata:0041F4B0                 extrn __imp_CoCreateInstance:dword
.idata:0041F4B0                                         ; DATA XREF: CoCreateInstance↑r
.idata:0041F4B4 ; void (__stdcall *CoUninitialize)()
.idata:0041F4B4                 extrn __imp_CoUninitialize:dword
.idata:0041F4B4                                         ; DATA XREF: CoUninitialize↑r
.idata:0041F4B8 ; HRESULT (__stdcall *OleInitialize)(LPVOID pvReserved)
.idata:0041F4B8                 extrn __imp_OleInitialize:dword
.idata:0041F4B8                                         ; DATA XREF: OleInitialize↑r
.idata:0041F4BC
.idata:0041F4BC
.idata:0041F4BC
.idata:0041F4BC                 end start
