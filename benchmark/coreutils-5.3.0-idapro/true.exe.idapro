.text:00401000 ;
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
.text:00401000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
.text:00401000 ; |                      License info: 48-357D-7BC4-C6                      |
.text:00401000 ; |                              Virginia Tech                              |
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ;
.text:00401000 ; Input SHA256 : C8B569F368A6D4BF18F877C42B3EE8A118A9DCB6D1FD6950B8CCB4F9AF356AAE
.text:00401000 ; Input MD5    : C0D33F0C61B3F36C3B692A6507163E69
.text:00401000 ; Input CRC32  : 8375F8E4
.text:00401000
.text:00401000 ; File Name   : /home/cindy/Documents/Projects/binary_cmc/benchmark/coreutils-5.3.0-bin/bin/true.exe
.text:00401000 ; Format      : Portable executable for 80386 (PE)
.text:00401000 ; Imagebase   : 400000
.text:00401000 ; Timestamp   : 4266A271 (Wed Apr 20 18:41:53 2005)
.text:00401000 ; Section 1. (virtual address 00001000)
.text:00401000 ; Virtual size                  : 000029D0 (  10704.)
.text:00401000 ; Section size in file          : 00002A00 (  10752.)
.text:00401000 ; Offset to raw data for section: 00000400
.text:00401000 ; Flags 60000020: Text Executable Readable
.text:00401000 ; Alignment     : default
.text:00401000
.text:00401000                 .686p
.text:00401000                 .mmx
.text:00401000                 .model flat
.text:00401000
.text:00401000 ; ===========================================================================
.text:00401000
.text:00401000 ; Segment type: Pure code
.text:00401000 ; Segment permissions: Read/Execute
.text:00401000 _text           segment para public 'CODE' use32
.text:00401000                 assume cs:_text
.text:00401000                 ;org 401000h
.text:00401000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00401000
.text:00401000 ; =============== S U B R O U T I N E =======================================
.text:00401000
.text:00401000 ; Attributes: noreturn bp-based frame
.text:00401000
.text:00401000                 public start
.text:00401000 start           proc near
.text:00401000
.text:00401000 Type            = dword ptr -8
.text:00401000
.text:00401000                 push    ebp
.text:00401001                 mov     ebp, esp
.text:00401003                 sub     esp, 8
.text:00401006                 mov     [esp+8+Type], 1 ; Type
.text:0040100D                 call    ds:__set_app_type
.text:00401013                 call    sub_401080
.text:00401013 start           endp
.text:00401013
.text:00401018 ; ---------------------------------------------------------------------------
.text:00401018                 mov     esp, ebp
.text:0040101A                 xor     eax, eax
.text:0040101C                 pop     ebp
.text:0040101D                 retn
.text:0040101D ; ---------------------------------------------------------------------------
.text:0040101E                 align 10h
.text:00401020                 push    ebp
.text:00401021                 mov     ebp, esp
.text:00401023                 sub     esp, 8
.text:00401026                 mov     dword ptr [esp], 2
.text:0040102D                 call    ds:__set_app_type
.text:00401033                 call    sub_401080
.text:00401038 ; ---------------------------------------------------------------------------
.text:00401038                 mov     esp, ebp
.text:0040103A                 xor     eax, eax
.text:0040103C                 pop     ebp
.text:0040103D                 retn
.text:0040103D ; ---------------------------------------------------------------------------
.text:0040103E                 align 10h
.text:00401040
.text:00401040 ; =============== S U B R O U T I N E =======================================
.text:00401040
.text:00401040 ; Attributes: bp-based frame
.text:00401040
.text:00401040 ; int __cdecl sub_401040(void (__cdecl *)())
.text:00401040 sub_401040      proc near               ; CODE XREF: sub_401470+60↓p
.text:00401040                                         ; .text:004036F0↓p ...
.text:00401040
.text:00401040 var_8           = dword ptr -8
.text:00401040 arg_0           = dword ptr  8
.text:00401040
.text:00401040                 push    ebp
.text:00401041                 mov     ebp, esp
.text:00401043                 sub     esp, 8
.text:00401046                 mov     edx, [ebp+arg_0]
.text:00401049                 mov     [esp+8+var_8], edx ; void (__cdecl *)()
.text:0040104C                 call    ds:atexit
.text:00401052                 mov     esp, ebp
.text:00401054                 pop     ebp
.text:00401055                 retn
.text:00401055 sub_401040      endp
.text:00401055
.text:00401055 ; ---------------------------------------------------------------------------
.text:00401056                 align 10h
.text:00401060                 push    ebp
.text:00401061                 mov     ebp, esp
.text:00401063                 sub     esp, 8
.text:00401066                 mov     edx, [ebp+8]
.text:00401069                 mov     [esp], edx
.text:0040106C                 call    ds:_onexit
.text:00401072                 mov     esp, ebp
.text:00401074                 pop     ebp
.text:00401075                 retn
.text:00401075 ; ---------------------------------------------------------------------------
.text:00401076                 align 10h
.text:00401080
.text:00401080 ; =============== S U B R O U T I N E =======================================
.text:00401080
.text:00401080 ; Attributes: noreturn bp-based frame
.text:00401080
.text:00401080 sub_401080      proc near               ; CODE XREF: start+13↑p
.text:00401080                                         ; .text:00401033↑p
.text:00401080
.text:00401080 lpTopLevelExceptionFilter= dword ptr -28h
.text:00401080 Mode            = dword ptr -24h
.text:00401080 var_20          = dword ptr -20h
.text:00401080 var_1C          = dword ptr -1Ch
.text:00401080 var_18          = dword ptr -18h
.text:00401080 var_C           = byte ptr -0Ch
.text:00401080 var_8           = dword ptr -8
.text:00401080
.text:00401080                 push    ebp
.text:00401081                 mov     ebp, esp
.text:00401083                 push    ebx
.text:00401084                 sub     esp, 24h
.text:00401087                 mov     [esp+28h+lpTopLevelExceptionFilter], offset TopLevelExceptionFilter ; lpTopLevelExceptionFilter
.text:0040108E                 call    SetUnhandledExceptionFilter
.text:00401093                 sub     esp, 4
.text:00401096                 call    sub_403690
.text:0040109B                 mov     [esp+28h+lpTopLevelExceptionFilter], offset dword_404000
.text:004010A2                 mov     edx, dword_404040
.text:004010A8                 lea     ecx, [ebp+var_8]
.text:004010AB                 mov     [ebp+var_8], 0
.text:004010B2                 mov     [esp+28h+var_18], ecx
.text:004010B6                 mov     [esp+28h+var_1C], edx
.text:004010BA                 lea     edx, [ebp+var_C]
.text:004010BD                 mov     [esp+28h+var_20], edx
.text:004010C1                 mov     [esp+28h+Mode], offset dword_404004
.text:004010C9                 call    __getmainargs
.text:004010CE                 mov     eax, Mode
.text:004010D3                 test    eax, eax
.text:004010D5                 jz      short loc_401135
.text:004010D7                 mov     dword_404060, eax
.text:004010DC                 mov     edx, ds:_iob
.text:004010E2                 test    edx, edx
.text:004010E4                 jz      short loc_4010FB
.text:004010E6                 mov     [esp+28h+Mode], eax ; Mode
.text:004010EA                 mov     ebx, [edx+10h]
.text:004010ED                 mov     [esp+28h+lpTopLevelExceptionFilter], ebx ; FileHandle
.text:004010F0                 call    _setmode
.text:004010F5                 mov     edx, ds:_iob
.text:004010FB
.text:004010FB loc_4010FB:                             ; CODE XREF: sub_401080+64↑j
.text:004010FB                 cmp     edx, 0FFFFFFE0h
.text:004010FE                 jz      short loc_40111B
.text:00401100                 mov     ebx, Mode
.text:00401106                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040110A                 mov     ecx, [edx+30h]
.text:0040110D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401110                 call    _setmode
.text:00401115                 mov     edx, ds:_iob
.text:0040111B
.text:0040111B loc_40111B:                             ; CODE XREF: sub_401080+7E↑j
.text:0040111B                 cmp     edx, 0FFFFFFC0h
.text:0040111E                 jz      short loc_401135
.text:00401120                 mov     ebx, Mode
.text:00401126                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040112A                 mov     ecx, [edx+50h]
.text:0040112D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401130                 call    _setmode
.text:00401135
.text:00401135 loc_401135:                             ; CODE XREF: sub_401080+55↑j
.text:00401135                                         ; sub_401080+9E↑j
.text:00401135                 call    __p__fmode
.text:0040113A                 mov     ecx, dword_404060
.text:00401140                 mov     [eax], ecx
.text:00401142                 call    sub_403660
.text:00401147                 call    __p__environ
.text:0040114C                 mov     edx, dword_404000
.text:00401152                 mov     ebx, [eax]
.text:00401154                 mov     ecx, dword_404004
.text:0040115A                 mov     [esp+28h+lpTopLevelExceptionFilter], edx
.text:0040115D                 mov     [esp+28h+var_20], ebx
.text:00401161                 mov     [esp+28h+Mode], ecx
.text:00401165                 call    sub_401470
.text:00401165 sub_401080      endp
.text:00401165
.text:0040116A ; ---------------------------------------------------------------------------
.text:0040116A                 mov     ebx, eax
.text:0040116C                 call    _cexit
.text:00401171                 mov     [esp], ebx
.text:00401174                 call    ExitProcess
.text:00401174 ; ---------------------------------------------------------------------------
.text:00401179                 align 10h
.text:00401180
.text:00401180 ; =============== S U B R O U T I N E =======================================
.text:00401180
.text:00401180 ; Attributes: bp-based frame
.text:00401180
.text:00401180 ; LONG __stdcall TopLevelExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo)
.text:00401180 TopLevelExceptionFilter proc near       ; DATA XREF: sub_401080+7↑o
.text:00401180
.text:00401180 Signal          = dword ptr -18h
.text:00401180 Function        = dword ptr -14h
.text:00401180 var_8           = dword ptr -8
.text:00401180 var_4           = dword ptr -4
.text:00401180 ExceptionInfo   = dword ptr  8
.text:00401180
.text:00401180                 push    ebp
.text:00401181                 mov     ebp, esp
.text:00401183                 sub     esp, 18h
.text:00401186                 mov     [ebp+var_8], ebx
.text:00401189                 mov     ecx, [ebp+ExceptionInfo]
.text:0040118C                 xor     ebx, ebx
.text:0040118E                 mov     [ebp+var_4], esi
.text:00401191                 xor     esi, esi
.text:00401193                 mov     edx, [ecx]
.text:00401195                 mov     eax, [edx]
.text:00401197                 cmp     eax, 0C0000091h
.text:0040119C                 ja      loc_401260
.text:004011A2                 cmp     eax, 0C000008Dh
.text:004011A7                 jnb     short loc_401210
.text:004011A9                 cmp     eax, 0C0000005h
.text:004011AE                 jz      short loc_4011BE
.text:004011B0
.text:004011B0 loc_4011B0:                             ; CODE XREF: TopLevelExceptionFilter+59↓j
.text:004011B0                                         ; TopLevelExceptionFilter+77↓j ...
.text:004011B0                 mov     eax, ebx
.text:004011B2                 mov     esi, [ebp+var_4]
.text:004011B5                 mov     ebx, [ebp+var_8]
.text:004011B8                 mov     esp, ebp
.text:004011BA                 pop     ebp
.text:004011BB                 retn    4
.text:004011BE ; ---------------------------------------------------------------------------
.text:004011BE
.text:004011BE loc_4011BE:                             ; CODE XREF: TopLevelExceptionFilter+2E↑j
.text:004011BE                 mov     [esp+18h+Function], 0 ; Function
.text:004011C6                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:004011CD                 call    signal
.text:004011D2                 cmp     eax, 1
.text:004011D5                 jz      short loc_4011F9
.text:004011D7                 test    eax, eax
.text:004011D9                 jz      short loc_4011B0
.text:004011DB                 mov     [esp+18h+Signal], 0Bh
.text:004011E2                 lea     esi, [esi+0]
.text:004011E9                 lea     edi, [edi+0]
.text:004011F0
.text:004011F0 loc_4011F0:                             ; CODE XREF: TopLevelExceptionFilter+BD↓j
.text:004011F0                 call    eax
.text:004011F2
.text:004011F2 loc_4011F2:                             ; CODE XREF: TopLevelExceptionFilter+8D↓j
.text:004011F2                                         ; TopLevelExceptionFilter+D5↓j ...
.text:004011F2                 mov     ebx, 0FFFFFFFFh
.text:004011F7                 jmp     short loc_4011B0
.text:004011F9 ; ---------------------------------------------------------------------------
.text:004011F9
.text:004011F9 loc_4011F9:                             ; CODE XREF: TopLevelExceptionFilter+55↑j
.text:004011F9                 mov     [esp+18h+Function], 1 ; Function
.text:00401201                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:00401208                 call    signal
.text:0040120D                 jmp     short loc_4011F2
.text:0040120D ; ---------------------------------------------------------------------------
.text:0040120F                 align 10h
.text:00401210
.text:00401210 loc_401210:                             ; CODE XREF: TopLevelExceptionFilter+27↑j
.text:00401210                                         ; TopLevelExceptionFilter+E5↓j
.text:00401210                 mov     esi, 1
.text:00401215
.text:00401215 loc_401215:                             ; CODE XREF: TopLevelExceptionFilter+EC↓j
.text:00401215                 mov     [esp+18h+Function], 0 ; Function
.text:0040121D                 mov     [esp+18h+Signal], 8 ; Signal
.text:00401224                 call    signal
.text:00401229                 cmp     eax, 1
.text:0040122C                 jz      short loc_40123F
.text:0040122E                 test    eax, eax
.text:00401230                 jz      loc_4011B0
.text:00401236                 mov     [esp+18h+Signal], 8
.text:0040123D                 jmp     short loc_4011F0
.text:0040123F ; ---------------------------------------------------------------------------
.text:0040123F
.text:0040123F loc_40123F:                             ; CODE XREF: TopLevelExceptionFilter+AC↑j
.text:0040123F                 mov     [esp+18h+Function], 1 ; Function
.text:00401247                 mov     [esp+18h+Signal], 8 ; Signal
.text:0040124E                 call    signal
.text:00401253                 test    esi, esi
.text:00401255                 jz      short loc_4011F2
.text:00401257                 call    sub_403690
.text:0040125C                 jmp     short loc_4011F2
.text:0040125C ; ---------------------------------------------------------------------------
.text:0040125E                 align 10h
.text:00401260
.text:00401260 loc_401260:                             ; CODE XREF: TopLevelExceptionFilter+1C↑j
.text:00401260                 cmp     eax, 0C0000093h
.text:00401265                 jz      short loc_401210
.text:00401267                 cmp     eax, 0C0000094h
.text:0040126C                 jz      short loc_401215
.text:0040126E                 jmp     loc_4011B0
.text:0040126E TopLevelExceptionFilter endp
.text:0040126E
.text:0040126E ; ---------------------------------------------------------------------------
.text:00401273                 align 10h
.text:00401280 ; const char Locale
.text:00401280 Locale          db 0                    ; DATA XREF: sub_401470+1D↓o
.text:00401281                 align 20h
.text:004012A0 aCProgra1Coreut db 'c:/progra~1/CoreUtils/share/locale',0
.text:004012A0                                         ; DATA XREF: sub_401470+37↓o
.text:004012C3 aCoreutils      db 'coreutils',0        ; DATA XREF: sub_401470+3F↓o
.text:004012C3                                         ; sub_401470+4C↓o
.text:004012CD aHelp           db '--help',0           ; DATA XREF: sub_401470+6F↓o
.text:004012D4 aVersion        db '--version',0        ; DATA XREF: sub_401470+80↓o
.text:004012DE aJimMeyering    db 'Jim Meyering',0     ; DATA XREF: sub_401470+AE↓o
.text:004012EB a530            db '5.3.0',0            ; DATA XREF: sub_401470+B6↓o
.text:004012F1 aGnuCoreutils   db 'GNU coreutils',0    ; DATA XREF: sub_401470+C1↓o
.text:004012FF ; const FILE stru_4012FF
.text:004012FF stru_4012FF     FILE <65757274h, 90909000h, 90909090h, 90909090h, 90909090h, \
.text:004012FF                                         ; DATA XREF: sub_401470+C9↓o
.text:004012FF                       90909090h, 90909090h, 90909090h>
.text:0040131F                 db  90h
.text:00401320 aUsageSIgnoredC db 'Usage: %s [ignored command line arguments]',0Ah
.text:00401320                                         ; DATA XREF: sub_401470:loc_40154B↓o
.text:00401320                                         ; .text:004015E3↓o
.text:00401320                 db '  or:  %s OPTION',0Ah
.text:00401320                 db 'Exit with a status code indicating success.',0Ah
.text:00401320                 db 0Ah
.text:00401320                 db 'These option names may not be abbreviated.',0Ah
.text:00401320                 db 0Ah,0
.text:004013B6                 align 10h
.text:004013C0 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.text:004013C0                                         ; DATA XREF: sub_401470+FE↓o
.text:004013C0                                         ; .text:00401606↓o
.text:004013ED                 align 20h
.text:00401400 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.text:00401400                                         ; DATA XREF: sub_401470+120↓o
.text:00401400                                         ; .text:00401628↓o
.text:00401436 aReportBugsToS  db 0Ah                  ; DATA XREF: sub_401470+142↓o
.text:00401436                                         ; .text:0040164A↓o
.text:00401436                 db 'Report bugs to <%s>.',0Ah,0
.text:0040144D aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.text:0040144D                                         ; DATA XREF: sub_401470+14F↓o
.text:0040144D                                         ; .text:00401657↓o
.text:00401463                 align 10h
.text:00401470
.text:00401470 ; =============== S U B R O U T I N E =======================================
.text:00401470
.text:00401470 ; Attributes: noreturn bp-based frame fuzzy-sp
.text:00401470
.text:00401470 sub_401470      proc near               ; CODE XREF: sub_401080+E5↑p
.text:00401470
.text:00401470 Category        = dword ptr -28h
.text:00401470 Locale          = dword ptr -24h
.text:00401470 var_20          = dword ptr -20h
.text:00401470 var_1C          = dword ptr -1Ch
.text:00401470 var_18          = byte ptr -18h
.text:00401470 var_14          = dword ptr -14h
.text:00401470 arg_0           = dword ptr  8
.text:00401470 arg_4           = dword ptr  0Ch
.text:00401470
.text:00401470                 push    ebp
.text:00401471                 xor     eax, eax
.text:00401473                 mov     ebp, esp
.text:00401475                 push    edi
.text:00401476                 push    esi
.text:00401477                 push    ebx
.text:00401478                 sub     esp, 1Ch
.text:0040147B                 mov     ebx, [ebp+arg_4]
.text:0040147E                 and     esp, 0FFFFFFF0h
.text:00401481                 call    __alloca
.text:00401486                 call    sub_403730
.text:0040148B                 mov     edx, [ebx]
.text:0040148D                 mov     [esp+28h+Locale], offset Locale ; Locale
.text:00401495                 mov     [esp+28h+Category], 0 ; Category
.text:0040149C                 mov     ds:dword_405160, edx
.text:004014A2                 call    setlocale
.text:004014A7                 mov     [esp+28h+Locale], offset aCProgra1Coreut ; "c:/progra~1/CoreUtils/share/locale"
.text:004014AF                 mov     [esp+28h+Category], offset aCoreutils ; "coreutils"
.text:004014B6                 call    ds:__imp_libintl_bindtextdomain
.text:004014BC                 mov     [esp+28h+Category], offset aCoreutils ; "coreutils"
.text:004014C3                 call    ds:libintl_textdomain
.text:004014C9                 mov     [esp+28h+Category], offset sub_401BB0 ; void (__cdecl *)()
.text:004014D0                 call    sub_401040
.text:004014D5                 cmp     [ebp+arg_0], 2
.text:004014D9                 jnz     short loc_401500
.text:004014DB                 cld
.text:004014DC                 mov     ebx, [ebx+4]
.text:004014DF                 mov     edi, offset aHelp ; "--help"
.text:004014E4                 mov     ecx, 7
.text:004014E9                 mov     esi, ebx
.text:004014EB                 repe cmpsb
.text:004014ED                 jz      short loc_40154B
.text:004014EF                 cld
.text:004014F0                 mov     edi, offset aVersion ; "--version"
.text:004014F5                 mov     ecx, 0Ah
.text:004014FA                 mov     esi, ebx
.text:004014FC                 repe cmpsb
.text:004014FE                 jz      short loc_401510
.text:00401500
.text:00401500 loc_401500:                             ; CODE XREF: sub_401470+69↑j
.text:00401500                                         ; sub_401470+D9↓j ...
.text:00401500                 mov     [esp+28h+Category], 0 ; Code
.text:00401507                 call    exit
.text:00401507 ; ---------------------------------------------------------------------------
.text:0040150C                 align 10h
.text:00401510
.text:00401510 loc_401510:                             ; CODE XREF: sub_401470+8E↑j
.text:00401510                 mov     [esp+28h+var_14], 0
.text:00401518                 mov     edx, ds:_iob
.text:0040151E                 mov     dword ptr [esp+28h+var_18], offset aJimMeyering ; "Jim Meyering"
.text:00401526                 mov     [esp+28h+var_1C], offset a530 ; "5.3.0"
.text:0040152E                 add     edx, 20h ; ' '
.text:00401531                 mov     [esp+28h+var_20], offset aGnuCoreutils ; "GNU coreutils"
.text:00401539                 mov     [esp+28h+Locale], offset stru_4012FF ; FILE *
.text:00401541                 mov     [esp+28h+Category], edx ; FILE *
.text:00401544                 call    sub_401B40
.text:00401549                 jmp     short loc_401500
.text:0040154B ; ---------------------------------------------------------------------------
.text:0040154B
.text:0040154B loc_40154B:                             ; CODE XREF: sub_401470+7D↑j
.text:0040154B                 mov     [esp+28h+Category], offset aUsageSIgnoredC ; "Usage: %s [ignored command line argumen"...
.text:00401552                 call    ds:libintl_gettext
.text:00401558                 mov     esi, ds:dword_405160
.text:0040155E                 mov     [esp+28h+Category], eax ; Format
.text:00401561                 mov     [esp+28h+var_20], esi
.text:00401565                 mov     [esp+28h+Locale], esi
.text:00401569                 call    printf
.text:0040156E                 mov     [esp+28h+Category], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:00401575                 call    ds:libintl_gettext
.text:0040157B                 mov     ebx, ds:_iob
.text:00401581                 add     ebx, 20h ; ' '
.text:00401584                 mov     [esp+28h+Locale], ebx ; Stream
.text:00401588                 mov     [esp+28h+Category], eax ; Buffer
.text:0040158B                 call    fputs
.text:00401590                 mov     [esp+28h+Category], offset aVersionOutputV ; "      --version  output version informa"...
.text:00401597                 call    ds:libintl_gettext
.text:0040159D                 mov     ecx, ds:_iob
.text:004015A3                 add     ecx, 20h ; ' '
.text:004015A6                 mov     [esp+28h+Locale], ecx ; Stream
.text:004015AA                 mov     [esp+28h+Category], eax ; Buffer
.text:004015AD                 call    fputs
.text:004015B2                 mov     [esp+28h+Category], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:004015B9                 call    ds:libintl_gettext
.text:004015BF                 mov     [esp+28h+Locale], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:004015C7                 mov     [esp+28h+Category], eax ; Format
.text:004015CA                 call    printf
.text:004015CF                 jmp     loc_401500
.text:004015CF sub_401470      endp
.text:004015CF
.text:004015CF ; ---------------------------------------------------------------------------
.text:004015D4                 align 10h
.text:004015E0                 sub     esp, 0Ch
.text:004015E3                 mov     dword ptr [esp], offset aUsageSIgnoredC ; "Usage: %s [ignored command line argumen"...
.text:004015EA                 call    ds:libintl_gettext
.text:004015F0                 mov     ecx, ds:dword_405160
.text:004015F6                 mov     [esp], eax
.text:004015F9                 mov     [esp+8], ecx
.text:004015FD                 mov     [esp+4], ecx
.text:00401601                 call    printf
.text:00401606                 mov     dword ptr [esp], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:0040160D                 call    ds:libintl_gettext
.text:00401613                 mov     ecx, ds:_iob
.text:00401619                 add     ecx, 20h ; ' '
.text:0040161C                 mov     [esp+4], ecx
.text:00401620                 mov     [esp], eax
.text:00401623                 call    fputs
.text:00401628                 mov     dword ptr [esp], offset aVersionOutputV ; "      --version  output version informa"...
.text:0040162F                 call    ds:libintl_gettext
.text:00401635                 mov     ecx, ds:_iob
.text:0040163B                 add     ecx, 20h ; ' '
.text:0040163E                 mov     [esp+4], ecx
.text:00401642                 mov     [esp], eax
.text:00401645                 call    fputs
.text:0040164A                 mov     dword ptr [esp], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:00401651                 call    ds:libintl_gettext
.text:00401657                 mov     dword ptr [esp+4], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:0040165F                 mov     [esp], eax
.text:00401662                 call    printf
.text:00401667                 mov     edx, [esp+10h]
.text:0040166B                 mov     [esp], edx
.text:0040166E                 call    exit
.text:0040166E ; ---------------------------------------------------------------------------
.text:00401673                 align 10h
.text:00401680 aCopyrightC2005 db 'Copyright (C) 2005 Free Software Foundation, Inc.',0
.text:00401680                                         ; DATA XREF: .data:Buffer↓o
.text:004016B2 ; const char Format[]
.text:004016B2 Format          db '%s (%s) %s',0Ah,0   ; DATA XREF: sub_401970+50↓o
.text:004016BE aWrittenByS     db 'Written by %s.',0Ah,0
.text:004016BE                                         ; DATA XREF: sub_401970:loc_401A11↓o
.text:004016CE                 align 20h
.text:004016E0 aThisIsFreeSoft db 'This is free software; see the source for copying conditions.  Th'
.text:004016E0                                         ; DATA XREF: sub_401970+100↓o
.text:004016E0                 db 'ere is NO',0Ah
.text:004016E0                 db 'warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULA'
.text:004016E0                 db 'R PURPOSE.',0Ah,0
.text:00401778 aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.text:00401778                                         ; DATA XREF: sub_401970:loc_401AB1↓o
.text:0040178F aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.text:0040178F                                         ; DATA XREF: sub_401970:loc_401ABD↓o
.text:004017AB                 align 20h
.text:004017C0 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.text:004017C0                                         ; DATA XREF: sub_401970:loc_401AC9↓o
.text:004017C0                 db 'and %s.',0Ah,0
.text:004017E0 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.text:004017E0                                         ; DATA XREF: sub_401970:loc_401AD5↓o
.text:004017E0                 db '%s, and %s.',0Ah,0
.text:00401804                 align 20h
.text:00401820 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.text:00401820                                         ; DATA XREF: sub_401970:loc_401AE1↓o
.text:00401820                 db '%s, %s, and %s.',0Ah,0
.text:00401848                 align 20h
.text:00401860 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.text:00401860                                         ; DATA XREF: sub_401970:loc_401AED↓o
.text:00401860                 db '%s, %s, %s, and %s.',0Ah,0
.text:0040188C                 align 20h
.text:004018A0 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.text:004018A0                                         ; DATA XREF: sub_401970:loc_401AF9↓o
.text:004018A0                 db '%s, %s, %s, %s,',0Ah
.text:004018A0                 db 'and %s.',0Ah,0
.text:004018D0                 align 20h
.text:004018E0 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.text:004018E0                                         ; DATA XREF: sub_401970:loc_401B05↓o
.text:004018E0                 db '%s, %s, %s, %s,',0Ah
.text:004018E0                 db '%s, and %s.',0Ah,0
.text:00401914                 align 10h
.text:00401920 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.text:00401920                                         ; DATA XREF: sub_401970:def_4019DD↓o
.text:00401920                 db '%s, %s, %s, %s,',0Ah
.text:00401920                 db '%s, %s, and others.',0Ah,0
.text:0040195C ; const char aSS[]
.text:0040195C aSS             db '%s %s',0Ah,0        ; DATA XREF: sub_401970+1B5↓o
.text:00401963                 align 10h
.text:00401970
.text:00401970 ; =============== S U B R O U T I N E =======================================
.text:00401970
.text:00401970
.text:00401970 ; int __cdecl sub_401970(FILE *, FILE *, int, int, va_list)
.text:00401970 sub_401970      proc near               ; CODE XREF: sub_401B40+2A↓p
.text:00401970
.text:00401970 Stream          = dword ptr -2Ch
.text:00401970 Format          = dword ptr -28h
.text:00401970 ArgList         = dword ptr -24h
.text:00401970 var_20          = dword ptr -20h
.text:00401970 var_1C          = dword ptr -1Ch
.text:00401970 var_14          = dword ptr -14h
.text:00401970 arg_0           = dword ptr  4
.text:00401970 arg_4           = dword ptr  8
.text:00401970 arg_8           = dword ptr  0Ch
.text:00401970 arg_C           = dword ptr  10h
.text:00401970 arg_10          = dword ptr  14h
.text:00401970
.text:00401970                 push    ebp
.text:00401971                 push    edi
.text:00401972                 push    esi
.text:00401973                 push    ebx
.text:00401974                 sub     esp, 1Ch
.text:00401977                 xor     ebx, ebx
.text:00401979                 mov     edi, [esp+2Ch+arg_10]
.text:0040197D                 mov     edx, [esp+2Ch+arg_8]
.text:00401981                 mov     esi, [esp+2Ch+arg_0]
.text:00401985                 mov     eax, [edi]
.text:00401987                 mov     ecx, [esp+2Ch+arg_4]
.text:0040198B                 mov     [esp+2Ch+var_14], edx
.text:0040198F                 mov     ebp, [esp+2Ch+arg_C]
.text:00401993                 lea     edx, [edi+4]
.text:00401996                 test    eax, eax
.text:00401998                 jz      short loc_4019AC
.text:0040199A                 lea     esi, [esi+0]
.text:004019A0
.text:004019A0 loc_4019A0:                             ; CODE XREF: sub_401970+3A↓j
.text:004019A0                 mov     eax, edx
.text:004019A2                 inc     ebx
.text:004019A3                 mov     eax, [eax]
.text:004019A5                 add     edx, 4
.text:004019A8                 test    eax, eax
.text:004019AA                 jnz     short loc_4019A0
.text:004019AC
.text:004019AC loc_4019AC:                             ; CODE XREF: sub_401970+28↑j
.text:004019AC                 test    ecx, ecx
.text:004019AE                 jz      loc_401B1D
.text:004019B4                 mov     [esp+2Ch+var_1C], ebp
.text:004019B8                 mov     edx, [esp+2Ch+var_14]
.text:004019BC                 mov     [esp+2Ch+ArgList], ecx
.text:004019C0                 mov     [esp+2Ch+Format], offset Format ; "%s (%s) %s\n"
.text:004019C8                 mov     [esp+2Ch+var_20], edx
.text:004019CC                 mov     [esp+2Ch+Stream], esi ; Stream
.text:004019CF                 call    fprintf
.text:004019D4
.text:004019D4 loc_4019D4:                             ; CODE XREF: sub_401970+1C9↓j
.text:004019D4                 cmp     ebx, 9          ; switch 10 cases
.text:004019D7                 ja      def_4019DD      ; jumptable 004019DD default case
.text:004019DD                 jmp     ds:jpt_4019DD[ebx*4] ; switch jump
.text:004019DD ; ---------------------------------------------------------------------------
.text:004019E4 jpt_4019DD      dd offset loc_401A0C    ; DATA XREF: sub_401970+6D↑r
.text:004019E4                 dd offset loc_401A11    ; jump table for switch statement
.text:004019E4                 dd offset loc_401AB1
.text:004019E4                 dd offset loc_401ABD
.text:004019E4                 dd offset loc_401AC9
.text:004019E4                 dd offset loc_401AD5
.text:004019E4                 dd offset loc_401AE1
.text:004019E4                 dd offset loc_401AED
.text:004019E4                 dd offset loc_401AF9
.text:004019E4                 dd offset loc_401B05
.text:00401A0C ; ---------------------------------------------------------------------------
.text:00401A0C
.text:00401A0C loc_401A0C:                             ; CODE XREF: sub_401970+6D↑j
.text:00401A0C                                         ; DATA XREF: sub_401970:jpt_4019DD↑o
.text:00401A0C                 call    abort           ; jumptable 004019DD case 0
.text:00401A11 ; ---------------------------------------------------------------------------
.text:00401A11
.text:00401A11 loc_401A11:                             ; CODE XREF: sub_401970+6D↑j
.text:00401A11                                         ; DATA XREF: sub_401970:jpt_4019DD↑o
.text:00401A11                 mov     [esp+2Ch+Stream], offset aWrittenByS ; jumptable 004019DD case 1
.text:00401A18                 nop
.text:00401A19                 lea     esi, [esi+0]
.text:00401A20
.text:00401A20 loc_401A20:                             ; CODE XREF: sub_401970+148↓j
.text:00401A20                                         ; sub_401970+154↓j ...
.text:00401A20                 call    ds:libintl_gettext
.text:00401A26                 mov     [esp+2Ch+ArgList], edi ; ArgList
.text:00401A2A                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00401A2D                 mov     [esp+2Ch+Format], eax ; Format
.text:00401A31                 call    vfprintf
.text:00401A36                 mov     ebx, [esi+4]
.text:00401A39                 dec     ebx
.text:00401A3A                 test    ebx, ebx
.text:00401A3C                 mov     [esi+4], ebx
.text:00401A3F                 js      short loc_401A9F
.text:00401A41                 mov     edi, [esi]
.text:00401A43                 mov     byte ptr [edi], 0Ah
.text:00401A46                 inc     dword ptr [esi]
.text:00401A48
.text:00401A48 loc_401A48:                             ; CODE XREF: sub_401970+13F↓j
.text:00401A48                 mov     [esp+2Ch+Format], esi ; Stream
.text:00401A4C                 mov     edx, Buffer
.text:00401A52                 mov     [esp+2Ch+Stream], edx ; Buffer
.text:00401A55                 call    fputs
.text:00401A5A                 mov     ebp, [esi+4]
.text:00401A5D                 dec     ebp
.text:00401A5E                 test    ebp, ebp
.text:00401A60                 mov     [esi+4], ebp
.text:00401A63                 js      short loc_401A8D
.text:00401A65                 mov     ecx, [esi]
.text:00401A67                 mov     byte ptr [ecx], 0Ah
.text:00401A6A                 inc     dword ptr [esi]
.text:00401A6C
.text:00401A6C loc_401A6C:                             ; CODE XREF: sub_401970+12D↓j
.text:00401A6C                 mov     [esp+2Ch+arg_4], esi ; Stream
.text:00401A70                 mov     [esp+2Ch+Stream], offset aThisIsFreeSoft ; "This is free software; see the source f"...
.text:00401A77                 call    ds:libintl_gettext
.text:00401A7D                 mov     [esp+2Ch+arg_0], eax ; Buffer
.text:00401A81                 add     esp, 1Ch
.text:00401A84                 pop     ebx
.text:00401A85                 pop     esi
.text:00401A86                 pop     edi
.text:00401A87                 pop     ebp
.text:00401A88                 jmp     fputs
.text:00401A8D ; ---------------------------------------------------------------------------
.text:00401A8D
.text:00401A8D loc_401A8D:                             ; CODE XREF: sub_401970+F3↑j
.text:00401A8D                 mov     [esp+2Ch+Format], esi ; File
.text:00401A91                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:00401A98                 call    _flsbuf
.text:00401A9D                 jmp     short loc_401A6C
.text:00401A9F ; ---------------------------------------------------------------------------
.text:00401A9F
.text:00401A9F loc_401A9F:                             ; CODE XREF: sub_401970+CF↑j
.text:00401A9F                 mov     [esp+2Ch+Format], esi ; File
.text:00401AA3                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:00401AAA                 call    _flsbuf
.text:00401AAF                 jmp     short loc_401A48
.text:00401AB1 ; ---------------------------------------------------------------------------
.text:00401AB1
.text:00401AB1 loc_401AB1:                             ; CODE XREF: sub_401970+6D↑j
.text:00401AB1                                         ; DATA XREF: sub_401970:jpt_4019DD↑o
.text:00401AB1                 mov     [esp+2Ch+Stream], offset aWrittenBySAndS ; jumptable 004019DD case 2
.text:00401AB8                 jmp     loc_401A20
.text:00401ABD ; ---------------------------------------------------------------------------
.text:00401ABD
.text:00401ABD loc_401ABD:                             ; CODE XREF: sub_401970+6D↑j
.text:00401ABD                                         ; DATA XREF: sub_401970:jpt_4019DD↑o
.text:00401ABD                 mov     [esp+2Ch+Stream], offset aWrittenBySSAnd ; jumptable 004019DD case 3
.text:00401AC4                 jmp     loc_401A20
.text:00401AC9 ; ---------------------------------------------------------------------------
.text:00401AC9
.text:00401AC9 loc_401AC9:                             ; CODE XREF: sub_401970+6D↑j
.text:00401AC9                                         ; DATA XREF: sub_401970:jpt_4019DD↑o
.text:00401AC9                 mov     [esp+2Ch+Stream], offset aWrittenBySSSAn ; jumptable 004019DD case 4
.text:00401AD0                 jmp     loc_401A20
.text:00401AD5 ; ---------------------------------------------------------------------------
.text:00401AD5
.text:00401AD5 loc_401AD5:                             ; CODE XREF: sub_401970+6D↑j
.text:00401AD5                                         ; DATA XREF: sub_401970:jpt_4019DD↑o
.text:00401AD5                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSA ; jumptable 004019DD case 5
.text:00401ADC                 jmp     loc_401A20
.text:00401AE1 ; ---------------------------------------------------------------------------
.text:00401AE1
.text:00401AE1 loc_401AE1:                             ; CODE XREF: sub_401970+6D↑j
.text:00401AE1                                         ; DATA XREF: sub_401970:jpt_4019DD↑o
.text:00401AE1                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_0 ; jumptable 004019DD case 6
.text:00401AE8                 jmp     loc_401A20
.text:00401AED ; ---------------------------------------------------------------------------
.text:00401AED
.text:00401AED loc_401AED:                             ; CODE XREF: sub_401970+6D↑j
.text:00401AED                                         ; DATA XREF: sub_401970:jpt_4019DD↑o
.text:00401AED                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_1 ; jumptable 004019DD case 7
.text:00401AF4                 jmp     loc_401A20
.text:00401AF9 ; ---------------------------------------------------------------------------
.text:00401AF9
.text:00401AF9 loc_401AF9:                             ; CODE XREF: sub_401970+6D↑j
.text:00401AF9                                         ; DATA XREF: sub_401970:jpt_4019DD↑o
.text:00401AF9                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_2 ; jumptable 004019DD case 8
.text:00401B00                 jmp     loc_401A20
.text:00401B05 ; ---------------------------------------------------------------------------
.text:00401B05
.text:00401B05 loc_401B05:                             ; CODE XREF: sub_401970+6D↑j
.text:00401B05                                         ; DATA XREF: sub_401970:jpt_4019DD↑o
.text:00401B05                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_3 ; jumptable 004019DD case 9
.text:00401B0C                 jmp     loc_401A20
.text:00401B11 ; ---------------------------------------------------------------------------
.text:00401B11
.text:00401B11 def_4019DD:                             ; CODE XREF: sub_401970+67↑j
.text:00401B11                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS ; jumptable 004019DD default case
.text:00401B18                 jmp     loc_401A20
.text:00401B1D ; ---------------------------------------------------------------------------
.text:00401B1D
.text:00401B1D loc_401B1D:                             ; CODE XREF: sub_401970+3E↑j
.text:00401B1D                 mov     [esp+2Ch+var_20], ebp
.text:00401B21                 mov     ecx, [esp+2Ch+var_14]
.text:00401B25                 mov     [esp+2Ch+Format], offset aSS ; "%s %s\n"
.text:00401B2D                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00401B30                 mov     [esp+2Ch+ArgList], ecx
.text:00401B34                 call    fprintf
.text:00401B39                 jmp     loc_4019D4
.text:00401B39 sub_401970      endp
.text:00401B39
.text:00401B39 ; ---------------------------------------------------------------------------
.text:00401B3E                 align 10h
.text:00401B40
.text:00401B40 ; =============== S U B R O U T I N E =======================================
.text:00401B40
.text:00401B40
.text:00401B40 ; int __cdecl sub_401B40(FILE *, FILE *, int, int, char)
.text:00401B40 sub_401B40      proc near               ; CODE XREF: sub_401470+D4↑p
.text:00401B40
.text:00401B40 var_1C          = dword ptr -1Ch
.text:00401B40 var_18          = dword ptr -18h
.text:00401B40 var_14          = dword ptr -14h
.text:00401B40 var_10          = dword ptr -10h
.text:00401B40 var_C           = dword ptr -0Ch
.text:00401B40 arg_0           = dword ptr  4
.text:00401B40 arg_4           = dword ptr  8
.text:00401B40 arg_8           = dword ptr  0Ch
.text:00401B40 arg_C           = dword ptr  10h
.text:00401B40 arg_10          = byte ptr  14h
.text:00401B40
.text:00401B40                 sub     esp, 1Ch
.text:00401B43                 mov     edx, [esp+1Ch+arg_C]
.text:00401B47                 lea     ecx, [esp+1Ch+arg_10]
.text:00401B4B                 mov     [esp+1Ch+var_C], ecx ; va_list
.text:00401B4F                 mov     ecx, [esp+1Ch+arg_8]
.text:00401B53                 mov     [esp+1Ch+var_10], edx ; int
.text:00401B57                 mov     edx, [esp+1Ch+arg_4]
.text:00401B5B                 mov     [esp+1Ch+var_14], ecx ; int
.text:00401B5F                 mov     [esp+1Ch+var_18], edx ; FILE *
.text:00401B63                 mov     edx, [esp+1Ch+arg_0]
.text:00401B67                 mov     [esp+1Ch+var_1C], edx ; FILE *
.text:00401B6A                 call    sub_401970
.text:00401B6F                 add     esp, 1Ch
.text:00401B72                 retn
.text:00401B72 sub_401B40      endp
.text:00401B72
.text:00401B72 ; ---------------------------------------------------------------------------
.text:00401B73                 align 10h
.text:00401B80                 mov     edx, [esp+4]
.text:00401B84                 mov     ds:dword_405000, edx
.text:00401B8A                 retn
.text:00401B8A ; ---------------------------------------------------------------------------
.text:00401B8B aWriteError     db 'write error',0      ; DATA XREF: sub_401BB0:loc_401BF9↓o
.text:00401B97 ; const char aSS_0[]
.text:00401B97 aSS_0           db '%s: %s',0           ; DATA XREF: sub_401BB0+77↓o
.text:00401B9E ; const char aS[]
.text:00401B9E aS              db '%s',0               ; DATA XREF: sub_401BB0+A0↓o
.text:00401BA1 ; ---------------------------------------------------------------------------
.text:00401BA1                 jmp     short sub_401BB0
.text:00401BA1 ; ---------------------------------------------------------------------------
.text:00401BA3                 align 10h
.text:00401BB0
.text:00401BB0 ; =============== S U B R O U T I N E =======================================
.text:00401BB0
.text:00401BB0
.text:00401BB0 ; void __cdecl sub_401BB0()
.text:00401BB0 sub_401BB0      proc near               ; CODE XREF: .text:00401BA1↑j
.text:00401BB0                                         ; DATA XREF: sub_401470+59↑o
.text:00401BB0
.text:00401BB0 Stream          = dword ptr -2Ch
.text:00401BB0 ErrorMessage    = dword ptr -28h
.text:00401BB0 var_24          = dword ptr -24h
.text:00401BB0 var_20          = byte ptr -20h
.text:00401BB0 var_1C          = dword ptr -1Ch
.text:00401BB0 var_9           = byte ptr -9
.text:00401BB0
.text:00401BB0                 push    esi
.text:00401BB1                 push    ebx
.text:00401BB2                 sub     esp, 24h
.text:00401BB5                 mov     edx, ds:_iob
.text:00401BBB                 mov     ecx, [edx+2Ch]
.text:00401BBE                 lea     esi, [edx+20h]
.text:00401BC1                 shr     ecx, 5
.text:00401BC4                 mov     bl, cl
.text:00401BC6                 mov     ecx, [edx+20h]
.text:00401BC9                 and     bl, 1
.text:00401BCC                 cmp     ecx, [esi+8]
.text:00401BCF                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00401BD2                 setz    [esp+2Ch+var_9]
.text:00401BD7                 call    fclose
.text:00401BDC                 test    eax, eax
.text:00401BDE                 setnz   al
.text:00401BE1                 test    bl, bl
.text:00401BE3                 jnz     loc_401C73
.text:00401BE9                 test    al, al
.text:00401BEB                 jz      short loc_401C40
.text:00401BED
.text:00401BED loc_401BED:                             ; CODE XREF: sub_401BB0+CD↓j
.text:00401BED                 call    _errno
.text:00401BF2                 mov     esi, [eax]
.text:00401BF4
.text:00401BF4 loc_401BF4:                             ; CODE XREF: sub_401BB0+C7↓j
.text:00401BF4                 cmp     esi, 9
.text:00401BF7                 jz      short loc_401C66
.text:00401BF9
.text:00401BF9 loc_401BF9:                             ; CODE XREF: sub_401BB0+B8↓j
.text:00401BF9                                         ; sub_401BB0+C1↓j
.text:00401BF9                 mov     [esp+2Ch+Stream], offset aWriteError ; "write error"
.text:00401C00                 call    ds:libintl_gettext
.text:00401C06                 mov     ebx, eax
.text:00401C08                 mov     eax, ds:dword_405000
.text:00401C0D                 test    eax, eax
.text:00401C0F                 jz      short loc_401C46
.text:00401C11                 mov     [esp+2Ch+Stream], eax ; char *
.text:00401C14                 call    sub_402DC0
.text:00401C19                 mov     dword ptr [esp+2Ch+var_20], eax ; char
.text:00401C1D                 mov     edx, Code
.text:00401C23                 mov     [esp+2Ch+var_1C], ebx
.text:00401C27                 mov     [esp+2Ch+var_24], offset aSS_0 ; "%s: %s"
.text:00401C2F                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:00401C33                 mov     [esp+2Ch+Stream], edx ; Code
.text:00401C36                 call    sub_4033B0
.text:00401C3B                 nop
.text:00401C3C                 lea     esi, [esi+0]
.text:00401C40
.text:00401C40 loc_401C40:                             ; CODE XREF: sub_401BB0+3B↑j
.text:00401C40                                         ; sub_401BB0+B4↓j ...
.text:00401C40                 add     esp, 24h
.text:00401C43                 pop     ebx
.text:00401C44                 pop     esi
.text:00401C45                 retn
.text:00401C46 ; ---------------------------------------------------------------------------
.text:00401C46
.text:00401C46 loc_401C46:                             ; CODE XREF: sub_401BB0+5F↑j
.text:00401C46                 mov     dword ptr [esp+2Ch+var_20], ebx ; char
.text:00401C4A                 mov     ebx, Code
.text:00401C50                 mov     [esp+2Ch+var_24], offset aS ; "%s"
.text:00401C58                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:00401C5C                 mov     [esp+2Ch+Stream], ebx ; Code
.text:00401C5F                 call    sub_4033B0
.text:00401C64                 jmp     short loc_401C40
.text:00401C66 ; ---------------------------------------------------------------------------
.text:00401C66
.text:00401C66 loc_401C66:                             ; CODE XREF: sub_401BB0+47↑j
.text:00401C66                 test    bl, bl
.text:00401C68                 jnz     short loc_401BF9
.text:00401C6A                 cmp     [esp+2Ch+var_9], 0
.text:00401C6F                 jnz     short loc_401C40
.text:00401C71                 jmp     short loc_401BF9
.text:00401C73 ; ---------------------------------------------------------------------------
.text:00401C73
.text:00401C73 loc_401C73:                             ; CODE XREF: sub_401BB0+33↑j
.text:00401C73                 xor     esi, esi
.text:00401C75                 test    al, al
.text:00401C77                 jz      loc_401BF4
.text:00401C7D                 jmp     loc_401BED
.text:00401C7D sub_401BB0      endp
.text:00401C7D
.text:00401C7D ; ---------------------------------------------------------------------------
.text:00401C82                 align 10h
.text:00401C90 aLiteral        db 'literal',0          ; DATA XREF: .text:00401CD0↓o
.text:00401C98 aShell          db 'shell',0            ; DATA XREF: .text:00401CD4↓o
.text:00401C9E aShellAlways    db 'shell-always',0     ; DATA XREF: .text:00401CD8↓o
.text:00401CAB aC              db 'c',0                ; DATA XREF: .text:00401CDC↓o
.text:00401CAD aEscape         db 'escape',0           ; DATA XREF: .text:00401CE0↓o
.text:00401CB4 aLocale         db 'locale',0           ; DATA XREF: .text:00401CE4↓o
.text:00401CBB aClocale        db 'clocale',0          ; DATA XREF: .text:00401CE8↓o
.text:00401CC3                 db 8Dh, 0B6h, 4 dup(0)
.text:00401CC9                 db 8Dh, 0BCh, 27h, 4 dup(0)
.text:00401CD0                 dd offset aLiteral      ; "literal"
.text:00401CD4                 dd offset aShell        ; "shell"
.text:00401CD8                 dd offset aShellAlways  ; "shell-always"
.text:00401CDC                 dd offset aC            ; "c"
.text:00401CE0                 dd offset aEscape       ; "escape"
.text:00401CE4                 dd offset aLocale       ; "locale"
.text:00401CE8                 dd offset aClocale      ; "clocale"
.text:00401CEC                 dd 2 dup(0)
.text:00401CF4                 dd 1, 2, 3, 4, 5, 6
.text:00401D0C asc_401D0C:                             ; DATA XREF: sub_401D20+7E↓o
.text:00401D0C                                         ; sub_401D20+A39↓o ...
.text:00401D0C                 text "UTF-16LE", '"',27h,'`'
.text:00401D12                 align 10h
.text:00401D20
.text:00401D20 ; =============== S U B R O U T I N E =======================================
.text:00401D20
.text:00401D20
.text:00401D20 ; int __cdecl sub_401D20(int, int, char *Str, int, int, int)
.text:00401D20 sub_401D20      proc near               ; CODE XREF: sub_401D20+43A↓p
.text:00401D20                                         ; .text:004028E3↓p ...
.text:00401D20
.text:00401D20 C               = dword ptr -4Ch
.text:00401D20 Type            = dword ptr -48h
.text:00401D20 SizeInBytes     = dword ptr -44h
.text:00401D20 State           = dword ptr -40h
.text:00401D20 var_3C          = dword ptr -3Ch
.text:00401D20 var_38          = dword ptr -38h
.text:00401D20 var_34          = dword ptr -34h
.text:00401D20 var_30          = dword ptr -30h
.text:00401D20 var_29          = byte ptr -29h
.text:00401D20 var_28          = dword ptr -28h
.text:00401D20 var_22          = byte ptr -22h
.text:00401D20 var_21          = byte ptr -21h
.text:00401D20 var_20          = dword ptr -20h
.text:00401D20 var_1C          = dword ptr -1Ch
.text:00401D20 var_18          = mbstate_t ptr -18h
.text:00401D20 arg_0           = dword ptr  4
.text:00401D20 arg_4           = dword ptr  8
.text:00401D20 Str             = dword ptr  0Ch
.text:00401D20 arg_C           = dword ptr  10h
.text:00401D20 arg_10          = dword ptr  14h
.text:00401D20 arg_14          = dword ptr  18h
.text:00401D20
.text:00401D20                 push    ebp
.text:00401D21                 push    edi
.text:00401D22                 push    esi
.text:00401D23                 push    ebx
.text:00401D24                 sub     esp, 3Ch
.text:00401D27                 mov     edx, ds:__mb_cur_max
.text:00401D2D                 mov     [esp+4Ch+var_34], 0
.text:00401D35                 mov     [esp+4Ch+var_1C], 0
.text:00401D3D                 cmp     dword ptr [edx], 1
.text:00401D40                 mov     [esp+4Ch+var_20], 0
.text:00401D48                 mov     [esp+4Ch+var_21], 0
.text:00401D4D                 setz    [esp+4Ch+var_22]
.text:00401D52                 cmp     [esp+4Ch+arg_10], 6 ; switch 7 cases
.text:00401D57                 ja      short def_401D5D ; jumptable 00401D5D default case, cases 0,1
.text:00401D59                 mov     edx, [esp+4Ch+arg_10]
.text:00401D5D                 jmp     ds:jpt_401D5D[edx*4] ; switch jump
.text:00401D5D ; ---------------------------------------------------------------------------
.text:00401D64 jpt_401D5D      dd offset def_401D5D    ; DATA XREF: sub_401D20+3D↑r
.text:00401D64                 dd offset def_401D5D    ; jump table for switch statement
.text:00401D64                 dd offset loc_4026A5
.text:00401D64                 dd offset loc_401D80
.text:00401D64                 dd offset loc_4026CB
.text:00401D64                 dd offset loc_4026D5
.text:00401D64                 dd offset loc_4026D5
.text:00401D80 ; ---------------------------------------------------------------------------
.text:00401D80
.text:00401D80 loc_401D80:                             ; CODE XREF: sub_401D20+3D↑j
.text:00401D80                                         ; DATA XREF: sub_401D20:jpt_401D5D↑o
.text:00401D80                 mov     eax, [esp+4Ch+arg_4] ; jumptable 00401D5D case 3
.text:00401D84                 cmp     [esp+4Ch+var_34], eax
.text:00401D88                 jnb     short loc_401D91
.text:00401D8A                 mov     ebx, [esp+4Ch+arg_0]
.text:00401D8E                 mov     byte ptr [ebx], 22h ; '"'
.text:00401D91
.text:00401D91 loc_401D91:                             ; CODE XREF: sub_401D20+68↑j
.text:00401D91                 mov     [esp+4Ch+var_34], 1
.text:00401D99                 mov     [esp+4Ch+var_21], 1
.text:00401D9E                 mov     [esp+4Ch+var_1C], offset asc_401D0C ; "\"'`"
.text:00401DA6
.text:00401DA6 loc_401DA6:                             ; CODE XREF: sub_401D20+9A6↓j
.text:00401DA6                 mov     [esp+4Ch+var_20], 1
.text:00401DAE
.text:00401DAE def_401D5D:                             ; CODE XREF: sub_401D20+37↑j
.text:00401DAE                                         ; sub_401D20+3D↑j ...
.text:00401DAE                 xor     ebp, ebp        ; jumptable 00401D5D default case, cases 0,1
.text:00401DB0
.text:00401DB0 loc_401DB0:                             ; CODE XREF: sub_401D20+3DB↓j
.text:00401DB0                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00401DB5                 jz      loc_402697
.text:00401DBB                 cmp     ebp, [esp+4Ch+arg_C]
.text:00401DBF
.text:00401DBF loc_401DBF:                             ; CODE XREF: sub_401D20+980↓j
.text:00401DBF                 jz      loc_40262E
.text:00401DC5                 cmp     [esp+4Ch+var_21], 0
.text:00401DCA                 jz      short loc_401E10
.text:00401DCC                 mov     esi, [esp+4Ch+var_20]
.text:00401DD0                 test    esi, esi
.text:00401DD2                 jz      short loc_401E10
.text:00401DD4                 mov     ecx, [esp+4Ch+var_20]
.text:00401DD8                 lea     edi, [ecx+ebp]
.text:00401DDB                 cmp     edi, [esp+4Ch+arg_C]
.text:00401DDF                 ja      short loc_401E10
.text:00401DE1                 cld
.text:00401DE2                 mov     ebx, [esp+4Ch+Str]
.text:00401DE6                 mov     edi, [esp+4Ch+var_1C]
.text:00401DEA                 add     ebx, ebp
.text:00401DEC                 mov     esi, ebx
.text:00401DEE                 cmp     ecx, ecx
.text:00401DF0                 repe cmpsb
.text:00401DF2                 jnz     short loc_401E10
.text:00401DF4                 mov     edx, [esp+4Ch+arg_4]
.text:00401DF8                 cmp     [esp+4Ch+var_34], edx
.text:00401DFC                 jnb     short loc_401E0A
.text:00401DFE                 mov     ecx, [esp+4Ch+arg_0]
.text:00401E02                 mov     eax, [esp+4Ch+var_34]
.text:00401E06                 mov     byte ptr [eax+ecx], 5Ch ; '\'
.text:00401E0A
.text:00401E0A loc_401E0A:                             ; CODE XREF: sub_401D20+DC↑j
.text:00401E0A                 inc     [esp+4Ch+var_34]
.text:00401E0E                 mov     esi, esi
.text:00401E10
.text:00401E10 loc_401E10:                             ; CODE XREF: sub_401D20+AA↑j
.text:00401E10                                         ; sub_401D20+B2↑j ...
.text:00401E10                 mov     edi, [esp+4Ch+Str]
.text:00401E14                 movzx   ebx, byte ptr [ebp+edi+0]
.text:00401E19                 movzx   eax, bl
.text:00401E1C                 cmp     eax, 7Eh        ; switch 127 cases
.text:00401E1F                 ja      def_401E25      ; jumptable 00401E25 default case, cases 1-6,14-31,64
.text:00401E25                 jmp     ds:jpt_401E25[eax*4] ; switch jump
.text:00401E25 ; ---------------------------------------------------------------------------
.text:00401E2C jpt_401E25      dd offset loc_402028, offset def_401E25, offset def_401E25
.text:00401E2C                                         ; DATA XREF: sub_401D20+105↑r
.text:00401E2C                 dd offset def_401E25, offset def_401E25, offset def_401E25 ; jump table for switch statement
.text:00401E2C                 dd offset def_401E25, offset loc_402100, offset loc_40211E
.text:00401E2C                 dd offset loc_402122, offset loc_402167, offset loc_40216B
.text:00401E2C                 dd offset loc_40216F, offset loc_402173, offset def_401E25
.text:00401E2C                 dd offset def_401E25, offset def_401E25, offset def_401E25
.text:00401E2C                 dd offset def_401E25, offset def_401E25, offset def_401E25
.text:00401E2C                 dd offset def_401E25, offset def_401E25, offset def_401E25
.text:00401E2C                 dd offset def_401E25, offset def_401E25, offset def_401E25
.text:00401E2C                 dd offset def_401E25, offset def_401E25, offset def_401E25
.text:00401E2C                 dd offset def_401E25, offset def_401E25, offset loc_4025F8
.text:00401E2C                 dd offset loc_4025F8, offset loc_4025F8, offset loc_40261A
.text:00401E2C                 dd offset loc_4025F8, offset def_402222, offset loc_4025F8
.text:00401E2C                 dd offset loc_402177, offset loc_4025F8, offset loc_4025F8
.text:00401E2C                 dd offset loc_4025F8, offset def_402222, offset def_402222
.text:00401E2C                 dd offset def_402222, offset def_402222, offset def_402222
.text:00401E2C                 dd offset def_402222, offset def_402222, offset def_402222
.text:00401E2C                 dd offset def_402222, offset def_402222, offset def_402222
.text:00401E2C                 dd offset def_402222, offset def_402222, offset def_402222
.text:00401E2C                 dd offset def_402222, offset def_402222, offset loc_4025F8
.text:00401E2C                 dd offset loc_4025F8, offset loc_4025F8, offset loc_4025F8
.text:00401E2C                 dd offset loc_4021DC, offset def_401E25, offset def_402222
.text:00401E2C                 dd offset def_402222, offset def_402222, offset def_402222
.text:00401E2C                 dd offset def_402222, offset def_402222, offset def_402222
.text:00401E2C                 dd offset def_402222, offset def_402222, offset def_402222
.text:00401E2C                 dd offset def_402222, offset def_402222, offset def_402222
.text:00401E2C                 dd offset def_402222, offset def_402222, offset def_402222
.text:00401E2C                 dd offset def_402222, offset def_402222, offset def_402222
.text:00401E2C                 dd offset def_402222, offset def_402222, offset def_402222
.text:00401E2C                 dd offset def_402222, offset def_402222, offset def_402222
.text:00401E2C                 dd offset def_402222, offset loc_4025F8, offset loc_4025F1
.text:00401E2C                 dd offset def_402222, offset loc_4025F8, offset def_402222
.text:00401E2C                 dd offset loc_4025F8, offset def_402222, offset def_402222
.text:00401E2C                 dd offset def_402222, offset def_402222, offset def_402222
.text:00401E2C                 dd offset def_402222, offset def_402222, offset def_402222
.text:00401E2C                 dd offset def_402222, offset def_402222, offset def_402222
.text:00401E2C                 dd offset def_402222, offset def_402222, offset def_402222
.text:00401E2C                 dd offset def_402222, offset def_402222, offset def_402222
.text:00401E2C                 dd offset def_402222, offset def_402222, offset def_402222
.text:00401E2C                 dd offset def_402222, offset def_402222, offset def_402222
.text:00401E2C                 dd offset def_402222, offset def_402222, offset def_402222
.text:00401E2C                 dd offset loc_402608, offset loc_4025F8, offset loc_402608
.text:00401E2C                 dd offset loc_40261A
.text:00402028 ; ---------------------------------------------------------------------------
.text:00402028
.text:00402028 loc_402028:                             ; CODE XREF: sub_401D20+105↑j
.text:00402028                                         ; DATA XREF: sub_401D20:jpt_401E25↑o
.text:00402028                 cmp     [esp+4Ch+var_21], 0 ; jumptable 00401E25 case 0
.text:0040202D                 lea     eax, [ebp+1]
.text:00402030                 jz      loc_4020E0
.text:00402036                 mov     esi, [esp+4Ch+arg_4]
.text:0040203A                 cmp     [esp+4Ch+var_34], esi
.text:0040203E                 jnb     short loc_40204C
.text:00402040                 mov     eax, [esp+4Ch+arg_0]
.text:00402044                 mov     ebx, [esp+4Ch+var_34]
.text:00402048                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:0040204C
.text:0040204C loc_40204C:                             ; CODE XREF: sub_401D20+31E↑j
.text:0040204C                 inc     [esp+4Ch+var_34]
.text:00402050                 mov     edx, [esp+4Ch+arg_4]
.text:00402054                 cmp     [esp+4Ch+var_34], edx
.text:00402058                 jnb     short loc_402066
.text:0040205A                 mov     edi, [esp+4Ch+arg_0]
.text:0040205E                 mov     ecx, [esp+4Ch+var_34]
.text:00402062                 mov     byte ptr [ecx+edi], 30h ; '0'
.text:00402066
.text:00402066 loc_402066:                             ; CODE XREF: sub_401D20+338↑j
.text:00402066                 inc     [esp+4Ch+var_34]
.text:0040206A                 mov     esi, [esp+4Ch+arg_4]
.text:0040206E                 cmp     [esp+4Ch+var_34], esi
.text:00402072                 jnb     short loc_402080
.text:00402074                 mov     ebx, [esp+4Ch+arg_0]
.text:00402078                 mov     eax, [esp+4Ch+var_34]
.text:0040207C                 mov     byte ptr [eax+ebx], 30h ; '0'
.text:00402080
.text:00402080 loc_402080:                             ; CODE XREF: sub_401D20+352↑j
.text:00402080                 inc     [esp+4Ch+var_34]
.text:00402084                 mov     bl, 30h ; '0'
.text:00402086                 lea     esi, [esi+0]
.text:00402089                 lea     edi, [edi+0]
.text:00402090
.text:00402090 def_402222:                             ; CODE XREF: sub_401D20+105↑j
.text:00402090                                         ; sub_401D20+463↓j ...
.text:00402090                 cmp     [esp+4Ch+var_21], 0 ; jumptable 00401E25 cases 37,43-58,65-90,93,95,97-122
.text:00402090                                         ; jumptable 00402222 default case, cases 34-38,42-44,46,48-59
.text:00402095                 lea     eax, [ebp+1]
.text:00402098                 jz      short loc_4020E0
.text:0040209A                 mov     cl, bl
.text:0040209C                 mov     edi, [esp+4Ch+arg_14]
.text:004020A0                 mov     esi, 1
.text:004020A5                 shr     cl, 5
.text:004020A8                 movzx   edx, cl
.text:004020AB                 mov     ecx, ebx
.text:004020AD                 and     ecx, 1Fh
.text:004020B0                 shl     esi, cl
.text:004020B2                 test    [edi+edx*4+4], esi
.text:004020B6                 jz      short loc_4020D2
.text:004020B8
.text:004020B8 loc_4020B8:                             ; CODE XREF: sub_401D20+3FC↓j
.text:004020B8                 mov     edx, [esp+4Ch+arg_4]
.text:004020BC                 cmp     [esp+4Ch+var_34], edx
.text:004020C0                 jnb     short loc_4020CE
.text:004020C2                 mov     edi, [esp+4Ch+arg_0]
.text:004020C6                 mov     esi, [esp+4Ch+var_34]
.text:004020CA                 mov     byte ptr [esi+edi], 5Ch ; '\'
.text:004020CE
.text:004020CE loc_4020CE:                             ; CODE XREF: sub_401D20+3A0↑j
.text:004020CE                 inc     [esp+4Ch+var_34]
.text:004020D2
.text:004020D2 loc_4020D2:                             ; CODE XREF: sub_401D20+396↑j
.text:004020D2                 lea     eax, [ebp+1]
.text:004020D5                 lea     esi, [esi+0]
.text:004020D9                 lea     edi, [edi+0]
.text:004020E0
.text:004020E0 loc_4020E0:                             ; CODE XREF: sub_401D20+310↑j
.text:004020E0                                         ; sub_401D20+378↑j ...
.text:004020E0                 mov     ebp, [esp+4Ch+arg_4]
.text:004020E4                 cmp     [esp+4Ch+var_34], ebp
.text:004020E8                 jnb     short loc_4020F5
.text:004020EA                 mov     edx, [esp+4Ch+arg_0]
.text:004020EE                 mov     ecx, [esp+4Ch+var_34]
.text:004020F2                 mov     [ecx+edx], bl
.text:004020F5
.text:004020F5 loc_4020F5:                             ; CODE XREF: sub_401D20+3C8↑j
.text:004020F5                 inc     [esp+4Ch+var_34]
.text:004020F9                 mov     ebp, eax
.text:004020FB                 jmp     loc_401DB0
.text:00402100 ; ---------------------------------------------------------------------------
.text:00402100
.text:00402100 loc_402100:                             ; CODE XREF: sub_401D20+105↑j
.text:00402100                                         ; DATA XREF: sub_401D20:jpt_401E25↑o
.text:00402100                 mov     dl, 61h ; 'a'   ; jumptable 00401E25 case 7
.text:00402102                 lea     esi, [esi+0]
.text:00402109                 lea     edi, [edi+0]
.text:00402110
.text:00402110 loc_402110:                             ; CODE XREF: sub_401D20+400↓j
.text:00402110                                         ; sub_401D20+409↓j ...
.text:00402110                 cmp     [esp+4Ch+var_21], 0
.text:00402115                 lea     eax, [ebp+1]
.text:00402118                 jz      short loc_4020E0
.text:0040211A                 mov     bl, dl
.text:0040211C                 jmp     short loc_4020B8
.text:0040211E ; ---------------------------------------------------------------------------
.text:0040211E
.text:0040211E loc_40211E:                             ; CODE XREF: sub_401D20+105↑j
.text:0040211E                                         ; DATA XREF: sub_401D20:jpt_401E25↑o
.text:0040211E                 mov     dl, 62h ; 'b'   ; jumptable 00401E25 case 8
.text:00402120                 jmp     short loc_402110
.text:00402122 ; ---------------------------------------------------------------------------
.text:00402122
.text:00402122 loc_402122:                             ; CODE XREF: sub_401D20+105↑j
.text:00402122                                         ; DATA XREF: sub_401D20:jpt_401E25↑o
.text:00402122                 mov     dl, 74h ; 't'   ; jumptable 00401E25 case 9
.text:00402124
.text:00402124 loc_402124:                             ; CODE XREF: sub_401D20+449↓j
.text:00402124                                         ; sub_401D20+455↓j ...
.text:00402124                 cmp     [esp+4Ch+arg_10], 1
.text:00402129                 jnz     short loc_402110
.text:0040212B
.text:0040212B loc_40212B:                             ; CODE XREF: sub_401D20+45C↓j
.text:0040212B                                         ; sub_401D20+4C1↓j ...
.text:0040212B                 mov     [esp+4Ch+var_3C], 2 ; jumptable 004024F2 cases 91,92,94,96,124
.text:00402133                 mov     eax, [esp+4Ch+arg_14]
.text:00402137                 mov     edx, [esp+4Ch+arg_C]
.text:0040213B                 mov     ecx, [esp+4Ch+Str]
.text:0040213F                 mov     ebx, [esp+4Ch+arg_4]
.text:00402143                 mov     [esp+4Ch+var_38], eax ; int
.text:00402147                 mov     ebp, [esp+4Ch+arg_0]
.text:0040214B                 mov     [esp+4Ch+State], edx ; int
.text:0040214F                 mov     [esp+4Ch+SizeInBytes], ecx ; Str
.text:00402153                 mov     [esp+4Ch+Type], ebx ; int
.text:00402157                 mov     [esp+4Ch+C], ebp ; int
.text:0040215A                 call    sub_401D20
.text:0040215F
.text:0040215F loc_40215F:                             ; CODE XREF: sub_401D20+972↓j
.text:0040215F                 add     esp, 3Ch
.text:00402162                 pop     ebx
.text:00402163                 pop     esi
.text:00402164                 pop     edi
.text:00402165                 pop     ebp
.text:00402166                 retn
.text:00402167 ; ---------------------------------------------------------------------------
.text:00402167
.text:00402167 loc_402167:                             ; CODE XREF: sub_401D20+105↑j
.text:00402167                                         ; DATA XREF: sub_401D20:jpt_401E25↑o
.text:00402167                 mov     dl, 6Eh ; 'n'   ; jumptable 00401E25 case 10
.text:00402169                 jmp     short loc_402124
.text:0040216B ; ---------------------------------------------------------------------------
.text:0040216B
.text:0040216B loc_40216B:                             ; CODE XREF: sub_401D20+105↑j
.text:0040216B                                         ; DATA XREF: sub_401D20:jpt_401E25↑o
.text:0040216B                 mov     dl, 76h ; 'v'   ; jumptable 00401E25 case 11
.text:0040216D                 jmp     short loc_402110
.text:0040216F ; ---------------------------------------------------------------------------
.text:0040216F
.text:0040216F loc_40216F:                             ; CODE XREF: sub_401D20+105↑j
.text:0040216F                                         ; DATA XREF: sub_401D20:jpt_401E25↑o
.text:0040216F                 mov     dl, 66h ; 'f'   ; jumptable 00401E25 case 12
.text:00402171                 jmp     short loc_402110
.text:00402173 ; ---------------------------------------------------------------------------
.text:00402173
.text:00402173 loc_402173:                             ; CODE XREF: sub_401D20+105↑j
.text:00402173                                         ; DATA XREF: sub_401D20:jpt_401E25↑o
.text:00402173                 mov     dl, 72h ; 'r'   ; jumptable 00401E25 case 13
.text:00402175                 jmp     short loc_402124
.text:00402177 ; ---------------------------------------------------------------------------
.text:00402177
.text:00402177 loc_402177:                             ; CODE XREF: sub_401D20+105↑j
.text:00402177                                         ; DATA XREF: sub_401D20:jpt_401E25↑o
.text:00402177                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00401E25 case 39
.text:0040217C                 jz      short loc_40212B ; jumptable 004024F2 cases 91,92,94,96,124
.text:0040217E                 cmp     [esp+4Ch+arg_10], 2
.text:00402183                 jnz     def_402222      ; jumptable 00401E25 cases 37,43-58,65-90,93,95,97-122
.text:00402183                                         ; jumptable 00402222 default case, cases 34-38,42-44,46,48-59
.text:00402189                 mov     edx, [esp+4Ch+arg_4]
.text:0040218D                 cmp     [esp+4Ch+var_34], edx
.text:00402191                 jnb     short loc_40219F
.text:00402193                 mov     ecx, [esp+4Ch+arg_0]
.text:00402197                 mov     edi, [esp+4Ch+var_34]
.text:0040219B                 mov     byte ptr [edi+ecx], 27h ; '''
.text:0040219F
.text:0040219F loc_40219F:                             ; CODE XREF: sub_401D20+471↑j
.text:0040219F                 inc     [esp+4Ch+var_34]
.text:004021A3                 mov     eax, [esp+4Ch+arg_4]
.text:004021A7                 cmp     [esp+4Ch+var_34], eax
.text:004021AB                 jnb     short loc_4021B9
.text:004021AD                 mov     esi, [esp+4Ch+arg_0]
.text:004021B1                 mov     edx, [esp+4Ch+var_34]
.text:004021B5                 mov     byte ptr [edx+esi], 5Ch ; '\'
.text:004021B9
.text:004021B9 loc_4021B9:                             ; CODE XREF: sub_401D20+48B↑j
.text:004021B9                 inc     [esp+4Ch+var_34]
.text:004021BD                 mov     edi, [esp+4Ch+arg_4]
.text:004021C1                 cmp     [esp+4Ch+var_34], edi
.text:004021C5                 jnb     short loc_4021D3
.text:004021C7                 mov     ecx, [esp+4Ch+arg_0]
.text:004021CB                 mov     eax, [esp+4Ch+var_34]
.text:004021CF                 mov     byte ptr [eax+ecx], 27h ; '''
.text:004021D3
.text:004021D3 loc_4021D3:                             ; CODE XREF: sub_401D20+4A5↑j
.text:004021D3                                         ; sub_401D20+5C4↓j ...
.text:004021D3                 inc     [esp+4Ch+var_34]
.text:004021D7                 jmp     def_402222      ; jumptable 00401E25 cases 37,43-58,65-90,93,95,97-122
.text:004021D7                                         ; jumptable 00402222 default case, cases 34-38,42-44,46,48-59
.text:004021DC ; ---------------------------------------------------------------------------
.text:004021DC
.text:004021DC loc_4021DC:                             ; CODE XREF: sub_401D20+105↑j
.text:004021DC                                         ; DATA XREF: sub_401D20:jpt_401E25↑o
.text:004021DC                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00401E25 case 63
.text:004021E1                 jz      loc_40212B      ; jumptable 004024F2 cases 91,92,94,96,124
.text:004021E7                 cmp     [esp+4Ch+arg_10], 3
.text:004021EC                 jnz     def_402222      ; jumptable 00401E25 cases 37,43-58,65-90,93,95,97-122
.text:004021EC                                         ; jumptable 00402222 default case, cases 34-38,42-44,46,48-59
.text:004021F2                 lea     edx, [ebp+2]
.text:004021F5                 cmp     edx, [esp+4Ch+arg_C]
.text:004021F9                 jnb     def_402222      ; jumptable 00401E25 cases 37,43-58,65-90,93,95,97-122
.text:004021F9                                         ; jumptable 00402222 default case, cases 34-38,42-44,46,48-59
.text:004021FF                 mov     esi, [esp+4Ch+Str]
.text:00402203                 cmp     byte ptr [ebp+esi+1], 3Fh ; '?'
.text:00402208                 jnz     def_402222      ; jumptable 00401E25 cases 37,43-58,65-90,93,95,97-122
.text:00402208                                         ; jumptable 00402222 default case, cases 34-38,42-44,46,48-59
.text:0040220E                 movzx   ecx, byte ptr [ebp+esi+2]
.text:00402213                 movsx   eax, cl
.text:00402216                 sub     eax, 21h ; '!'  ; switch 30 cases
.text:00402219                 cmp     eax, 1Dh
.text:0040221C                 ja      def_402222      ; jumptable 00401E25 cases 37,43-58,65-90,93,95,97-122
.text:0040221C                                         ; jumptable 00402222 default case, cases 34-38,42-44,46,48-59
.text:00402222                 jmp     ds:jpt_402222[eax*4] ; switch jump
.text:00402222 ; ---------------------------------------------------------------------------
.text:00402229                 align 4
.text:0040222C jpt_402222      dd offset loc_4022A4    ; DATA XREF: sub_401D20+502↑r
.text:0040222C                 dd offset def_402222    ; jump table for switch statement
.text:0040222C                 dd offset def_402222
.text:0040222C                 dd offset def_402222
.text:0040222C                 dd offset def_402222
.text:0040222C                 dd offset def_402222
.text:0040222C                 dd offset loc_4022A4
.text:0040222C                 dd offset loc_4022A4
.text:0040222C                 dd offset loc_4022A4
.text:0040222C                 dd offset def_402222
.text:0040222C                 dd offset def_402222
.text:0040222C                 dd offset def_402222
.text:0040222C                 dd offset loc_4022A4
.text:0040222C                 dd offset def_402222
.text:0040222C                 dd offset loc_4022A4
.text:0040222C                 dd offset def_402222
.text:0040222C                 dd offset def_402222
.text:0040222C                 dd offset def_402222
.text:0040222C                 dd offset def_402222
.text:0040222C                 dd offset def_402222
.text:0040222C                 dd offset def_402222
.text:0040222C                 dd offset def_402222
.text:0040222C                 dd offset def_402222
.text:0040222C                 dd offset def_402222
.text:0040222C                 dd offset def_402222
.text:0040222C                 dd offset def_402222
.text:0040222C                 dd offset def_402222
.text:0040222C                 dd offset loc_4022A4
.text:0040222C                 dd offset loc_4022A4
.text:0040222C                 dd offset loc_4022A4
.text:004022A4 ; ---------------------------------------------------------------------------
.text:004022A4
.text:004022A4 loc_4022A4:                             ; CODE XREF: sub_401D20+502↑j
.text:004022A4                                         ; DATA XREF: sub_401D20:jpt_402222↑o
.text:004022A4                 mov     ebp, edx        ; jumptable 00402222 cases 33,39-41,45,47,60-62
.text:004022A6                 mov     bl, cl
.text:004022A8                 mov     edx, [esp+4Ch+arg_4]
.text:004022AC                 cmp     [esp+4Ch+var_34], edx
.text:004022B0                 jnb     short loc_4022BE
.text:004022B2                 mov     ecx, [esp+4Ch+arg_0]
.text:004022B6                 mov     edi, [esp+4Ch+var_34]
.text:004022BA                 mov     byte ptr [edi+ecx], 3Fh ; '?'
.text:004022BE
.text:004022BE loc_4022BE:                             ; CODE XREF: sub_401D20+590↑j
.text:004022BE                 inc     [esp+4Ch+var_34]
.text:004022C2                 mov     eax, [esp+4Ch+arg_4]
.text:004022C6                 cmp     [esp+4Ch+var_34], eax
.text:004022CA                 jnb     short loc_4022D8
.text:004022CC                 mov     edx, [esp+4Ch+arg_0]
.text:004022D0                 mov     esi, [esp+4Ch+var_34]
.text:004022D4                 mov     byte ptr [esi+edx], 5Ch ; '\'
.text:004022D8
.text:004022D8 loc_4022D8:                             ; CODE XREF: sub_401D20+5AA↑j
.text:004022D8                 inc     [esp+4Ch+var_34]
.text:004022DC                 mov     edi, [esp+4Ch+arg_4]
.text:004022E0                 cmp     [esp+4Ch+var_34], edi
.text:004022E4                 jnb     loc_4021D3
.text:004022EA                 mov     eax, [esp+4Ch+arg_0]
.text:004022EE                 mov     ecx, [esp+4Ch+var_34]
.text:004022F2                 mov     byte ptr [ecx+eax], 3Fh ; '?'
.text:004022F6                 jmp     loc_4021D3
.text:004022F6 ; ---------------------------------------------------------------------------
.text:004022FB                 align 10h
.text:00402300
.text:00402300 def_401E25:                             ; CODE XREF: sub_401D20+FF↑j
.text:00402300                                         ; sub_401D20+105↑j
.text:00402300                                         ; DATA XREF: ...
.text:00402300                 cmp     [esp+4Ch+var_22], 0 ; jumptable 00401E25 default case, cases 1-6,14-31,64
.text:00402305                 jz      loc_402430
.text:0040230B                 mov     [esp+4Ch+var_28], 1
.text:00402313                 mov     esi, ds:__mb_cur_max
.text:00402319                 movzx   edx, bl
.text:0040231C                 cmp     dword ptr [esi], 1
.text:0040231F                 jz      loc_402414
.text:00402325                 mov     [esp+4Ch+Type], 157h ; Type
.text:0040232D                 mov     [esp+4Ch+C], edx ; C
.text:00402330                 call    _isctype
.text:00402335
.text:00402335 loc_402335:                             ; CODE XREF: sub_401D20+705↓j
.text:00402335                 test    eax, eax
.text:00402337                 setnz   [esp+4Ch+var_29]
.text:0040233C
.text:0040233C loc_40233C:                             ; CODE XREF: sub_401D20+7A5↓j
.text:0040233C                 cmp     [esp+4Ch+var_21], 0
.text:00402341                 lea     eax, [ebp+1]
.text:00402344                 jz      loc_4020E0
.text:0040234A                 cmp     [esp+4Ch+var_29], 0
.text:0040234F                 jnz     def_402222      ; jumptable 00401E25 cases 37,43-58,65-90,93,95,97-122
.text:0040234F                                         ; jumptable 00402222 default case, cases 34-38,42-44,46,48-59
.text:00402355
.text:00402355 loc_402355:                             ; CODE XREF: sub_401D20+7AB↓j
.text:00402355                 mov     eax, [esp+4Ch+var_28]
.text:00402359                 lea     edx, [eax+ebp]
.text:0040235C                 lea     esi, [esi+0]
.text:00402360
.text:00402360 loc_402360:                             ; CODE XREF: sub_401D20+6EF↓j
.text:00402360                 cmp     [esp+4Ch+var_21], 0
.text:00402365                 jz      short loc_4023E0
.text:00402367                 cmp     [esp+4Ch+var_29], 0
.text:0040236C                 jnz     short loc_4023E0
.text:0040236E                 mov     edi, [esp+4Ch+arg_4]
.text:00402372                 cmp     [esp+4Ch+var_34], edi
.text:00402376                 jnb     short loc_402384
.text:00402378                 mov     esi, [esp+4Ch+arg_0]
.text:0040237C                 mov     eax, [esp+4Ch+var_34]
.text:00402380                 mov     byte ptr [eax+esi], 5Ch ; '\'
.text:00402384
.text:00402384 loc_402384:                             ; CODE XREF: sub_401D20+656↑j
.text:00402384                 inc     [esp+4Ch+var_34]
.text:00402388                 mov     ecx, [esp+4Ch+arg_4]
.text:0040238C                 cmp     [esp+4Ch+var_34], ecx
.text:00402390                 jnb     short loc_4023A5
.text:00402392                 mov     cl, bl
.text:00402394                 mov     esi, [esp+4Ch+arg_0]
.text:00402398                 mov     edi, [esp+4Ch+var_34]
.text:0040239C                 shr     cl, 6
.text:0040239F                 add     cl, 30h ; '0'
.text:004023A2                 mov     [edi+esi], cl
.text:004023A5
.text:004023A5 loc_4023A5:                             ; CODE XREF: sub_401D20+670↑j
.text:004023A5                 inc     [esp+4Ch+var_34]
.text:004023A9                 mov     edi, [esp+4Ch+arg_4]
.text:004023AD                 cmp     [esp+4Ch+var_34], edi
.text:004023B1                 jnb     short loc_4023C9
.text:004023B3                 mov     cl, bl
.text:004023B5                 mov     esi, [esp+4Ch+arg_0]
.text:004023B9                 shr     cl, 3
.text:004023BC                 mov     edi, [esp+4Ch+var_34]
.text:004023C0                 and     cl, 7
.text:004023C3                 add     cl, 30h ; '0'
.text:004023C6                 mov     [edi+esi], cl
.text:004023C9
.text:004023C9 loc_4023C9:                             ; CODE XREF: sub_401D20+691↑j
.text:004023C9                 inc     [esp+4Ch+var_34]
.text:004023CD                 and     bl, 7
.text:004023D0                 add     bl, 30h ; '0'
.text:004023D3                 lea     esi, [esi+0]
.text:004023D9                 lea     edi, [edi+0]
.text:004023E0
.text:004023E0 loc_4023E0:                             ; CODE XREF: sub_401D20+645↑j
.text:004023E0                                         ; sub_401D20+64C↑j
.text:004023E0                 lea     eax, [ebp+1]
.text:004023E3                 cmp     edx, eax
.text:004023E5                 jbe     loc_4020E0
.text:004023EB                 mov     ebp, [esp+4Ch+arg_4]
.text:004023EF                 cmp     [esp+4Ch+var_34], ebp
.text:004023F3                 jnb     short loc_402400
.text:004023F5                 mov     ecx, [esp+4Ch+arg_0]
.text:004023F9                 mov     edi, [esp+4Ch+var_34]
.text:004023FD                 mov     [edi+ecx], bl
.text:00402400
.text:00402400 loc_402400:                             ; CODE XREF: sub_401D20+6D3↑j
.text:00402400                 inc     [esp+4Ch+var_34]
.text:00402404                 mov     ebp, eax
.text:00402406                 mov     eax, [esp+4Ch+Str]
.text:0040240A                 movzx   ebx, byte ptr [ebp+eax+0]
.text:0040240F                 jmp     loc_402360
.text:00402414 ; ---------------------------------------------------------------------------
.text:00402414
.text:00402414 loc_402414:                             ; CODE XREF: sub_401D20+5FF↑j
.text:00402414                 mov     ecx, ds:_pctype
.text:0040241A                 mov     edi, [ecx]
.text:0040241C                 movzx   eax, word ptr [edi+edx*2]
.text:00402420                 and     eax, 157h
.text:00402425                 jmp     loc_402335
.text:00402425 ; ---------------------------------------------------------------------------
.text:0040242A                 align 10h
.text:00402430
.text:00402430 loc_402430:                             ; CODE XREF: sub_401D20+5E5↑j
.text:00402430                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00402435                 mov     [esp+4Ch+var_18._Wchar], 0
.text:0040243D                 mov     [esp+4Ch+var_28], 0
.text:00402445                 mov     [esp+4Ch+var_29], 1
.text:0040244A                 jz      loc_4025DC
.text:00402450
.text:00402450 loc_402450:                             ; CODE XREF: sub_401D20+8CC↓j
.text:00402450                 mov     ecx, [esp+4Ch+arg_C]
.text:00402454                 lea     edx, [esp+4Ch+var_18]
.text:00402458                 mov     edi, [esp+4Ch+Str]
.text:0040245C                 mov     [esp+4Ch+State], edx ; State
.text:00402460                 lea     esi, [esp+4Ch+var_18._State]
.text:00402464                 sub     ecx, ebp
.text:00402466                 mov     [esp+4Ch+SizeInBytes], ecx ; SizeInBytes
.text:0040246A                 add     edi, ebp
.text:0040246C                 mov     [esp+4Ch+var_30], edi
.text:00402470                 mov     [esp+4Ch+Type], edi ; SrcCh
.text:00402474                 mov     [esp+4Ch+C], esi ; DstCh
.text:00402477                 call    mbrtowc
.text:0040247C                 test    eax, eax
.text:0040247E                 mov     edi, eax
.text:00402480                 jz      short loc_4024C0
.text:00402482                 cmp     eax, 0FFFFFFFFh
.text:00402485                 jz      loc_4025D2
.text:0040248B                 cmp     eax, 0FFFFFFFEh
.text:0040248E                 jz      loc_402592
.text:00402494                 cmp     [esp+4Ch+arg_10], 1
.text:00402499                 jz      short loc_4024D0
.text:0040249B
.text:0040249B loc_40249B:                             ; CODE XREF: sub_401D20+7B9↓j
.text:0040249B                                         ; sub_401D20+86D↓j
.text:0040249B                 movzx   ecx, [esp+4Ch+var_18._State]
.text:004024A0                 mov     [esp+4Ch+Type], 157h ; Type
.text:004024A8                 mov     [esp+4Ch+C], ecx ; C
.text:004024AB                 call    iswctype
.text:004024B0                 test    eax, eax
.text:004024B2                 jnz     short loc_4024B9
.text:004024B4                 mov     [esp+4Ch+var_29], 0
.text:004024B9
.text:004024B9 loc_4024B9:                             ; CODE XREF: sub_401D20+792↑j
.text:004024B9                 mov     [esp+4Ch+var_28], edi
.text:004024BD                 lea     esi, [esi+0]
.text:004024C0
.text:004024C0 loc_4024C0:                             ; CODE XREF: sub_401D20+760↑j
.text:004024C0                                         ; sub_401D20+87B↓j ...
.text:004024C0                 cmp     [esp+4Ch+var_28], 1
.text:004024C5                 jbe     loc_40233C
.text:004024CB                 jmp     loc_402355
.text:004024D0 ; ---------------------------------------------------------------------------
.text:004024D0
.text:004024D0 loc_4024D0:                             ; CODE XREF: sub_401D20+779↑j
.text:004024D0                 cmp     [esp+4Ch+arg_10], eax
.text:004024D4                 mov     edx, 1
.text:004024D9                 jnb     short loc_40249B
.text:004024DB
.text:004024DB loc_4024DB:                             ; CODE XREF: sub_401D20+867↓j
.text:004024DB                 mov     ecx, [esp+4Ch+Str]
.text:004024DF                 lea     esi, [edx+ebp]
.text:004024E2                 movsx   eax, byte ptr [esi+ecx]
.text:004024E6                 sub     eax, 5Bh ; '['  ; switch 34 cases
.text:004024E9                 cmp     eax, 21h
.text:004024EC                 ja      def_4024F2      ; jumptable 004024F2 default case, cases 93,95,97-123
.text:004024F2                 jmp     ds:jpt_4024F2[eax*4] ; switch jump
.text:004024F2 ; ---------------------------------------------------------------------------
.text:004024F9                 align 4
.text:004024FC jpt_4024F2      dd offset loc_40212B    ; DATA XREF: sub_401D20+7D2↑r
.text:004024FC                 dd offset loc_40212B    ; jump table for switch statement
.text:004024FC                 dd offset def_4024F2
.text:004024FC                 dd offset loc_40212B
.text:004024FC                 dd offset def_4024F2
.text:004024FC                 dd offset loc_40212B
.text:004024FC                 dd offset def_4024F2
.text:004024FC                 dd offset def_4024F2
.text:004024FC                 dd offset def_4024F2
.text:004024FC                 dd offset def_4024F2
.text:004024FC                 dd offset def_4024F2
.text:004024FC                 dd offset def_4024F2
.text:004024FC                 dd offset def_4024F2
.text:004024FC                 dd offset def_4024F2
.text:004024FC                 dd offset def_4024F2
.text:004024FC                 dd offset def_4024F2
.text:004024FC                 dd offset def_4024F2
.text:004024FC                 dd offset def_4024F2
.text:004024FC                 dd offset def_4024F2
.text:004024FC                 dd offset def_4024F2
.text:004024FC                 dd offset def_4024F2
.text:004024FC                 dd offset def_4024F2
.text:004024FC                 dd offset def_4024F2
.text:004024FC                 dd offset def_4024F2
.text:004024FC                 dd offset def_4024F2
.text:004024FC                 dd offset def_4024F2
.text:004024FC                 dd offset def_4024F2
.text:004024FC                 dd offset def_4024F2
.text:004024FC                 dd offset def_4024F2
.text:004024FC                 dd offset def_4024F2
.text:004024FC                 dd offset def_4024F2
.text:004024FC                 dd offset def_4024F2
.text:004024FC                 dd offset def_4024F2
.text:004024FC                 dd offset loc_40212B
.text:00402584 ; ---------------------------------------------------------------------------
.text:00402584
.text:00402584 def_4024F2:                             ; CODE XREF: sub_401D20+7CC↑j
.text:00402584                                         ; sub_401D20+7D2↑j
.text:00402584                                         ; DATA XREF: ...
.text:00402584                 inc     edx             ; jumptable 004024F2 default case, cases 93,95,97-123
.text:00402585                 cmp     edx, edi
.text:00402587                 jb      loc_4024DB
.text:0040258D                 jmp     loc_40249B
.text:00402592 ; ---------------------------------------------------------------------------
.text:00402592
.text:00402592 loc_402592:                             ; CODE XREF: sub_401D20+76E↑j
.text:00402592                 cmp     ebp, [esp+4Ch+arg_C]
.text:00402596                 mov     [esp+4Ch+var_29], 0
.text:0040259B                 jnb     loc_4024C0
.text:004025A1                 mov     eax, [esp+4Ch+var_30]
.text:004025A5                 cmp     byte ptr [eax], 0
.text:004025A8                 jz      loc_4024C0
.text:004025AE
.text:004025AE loc_4025AE:                             ; CODE XREF: sub_401D20+8AB↓j
.text:004025AE                 inc     [esp+4Ch+var_28]
.text:004025B2                 mov     esi, [esp+4Ch+var_28]
.text:004025B6                 lea     eax, [esi+ebp]
.text:004025B9                 cmp     eax, [esp+4Ch+arg_C]
.text:004025BD                 jnb     loc_4024C0
.text:004025C3                 mov     edi, [esp+4Ch+Str]
.text:004025C7                 cmp     byte ptr [eax+edi], 0
.text:004025CB                 jnz     short loc_4025AE
.text:004025CD                 jmp     loc_4024C0
.text:004025D2 ; ---------------------------------------------------------------------------
.text:004025D2
.text:004025D2 loc_4025D2:                             ; CODE XREF: sub_401D20+765↑j
.text:004025D2                 mov     [esp+4Ch+var_29], 0
.text:004025D7                 jmp     loc_4024C0
.text:004025DC ; ---------------------------------------------------------------------------
.text:004025DC
.text:004025DC loc_4025DC:                             ; CODE XREF: sub_401D20+72A↑j
.text:004025DC                 mov     edx, [esp+4Ch+Str]
.text:004025E0                 mov     [esp+4Ch+C], edx ; Str
.text:004025E3                 call    strlen
.text:004025E8                 mov     [esp+4Ch+arg_C], eax
.text:004025EC                 jmp     loc_402450
.text:004025F1 ; ---------------------------------------------------------------------------
.text:004025F1
.text:004025F1 loc_4025F1:                             ; CODE XREF: sub_401D20+105↑j
.text:004025F1                                         ; DATA XREF: sub_401D20:jpt_401E25↑o
.text:004025F1                 mov     dl, bl          ; jumptable 00401E25 case 92
.text:004025F3                 jmp     loc_402124
.text:004025F8 ; ---------------------------------------------------------------------------
.text:004025F8
.text:004025F8 loc_4025F8:                             ; CODE XREF: sub_401D20+105↑j
.text:004025F8                                         ; sub_401D20+902↓j
.text:004025F8                                         ; DATA XREF: ...
.text:004025F8                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00401E25 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:004025FD                 jnz     def_402222      ; jumptable 00401E25 cases 37,43-58,65-90,93,95,97-122
.text:004025FD                                         ; jumptable 00402222 default case, cases 34-38,42-44,46,48-59
.text:00402603                 jmp     loc_40212B      ; jumptable 004024F2 cases 91,92,94,96,124
.text:00402608 ; ---------------------------------------------------------------------------
.text:00402608
.text:00402608 loc_402608:                             ; CODE XREF: sub_401D20+105↑j
.text:00402608                                         ; DATA XREF: sub_401D20:jpt_401E25↑o
.text:00402608                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh ; jumptable 00401E25 cases 123,125
.text:0040260D                 jz      short loc_402624
.text:0040260F                 cmp     [esp+4Ch+arg_C], 1
.text:00402614
.text:00402614 loc_402614:                             ; CODE XREF: sub_401D20+90C↓j
.text:00402614                 jnz     def_402222      ; jumptable 00401E25 cases 37,43-58,65-90,93,95,97-122
.text:00402614                                         ; jumptable 00402222 default case, cases 34-38,42-44,46,48-59
.text:0040261A
.text:0040261A loc_40261A:                             ; CODE XREF: sub_401D20+105↑j
.text:0040261A                                         ; DATA XREF: sub_401D20:jpt_401E25↑o
.text:0040261A                 test    ebp, ebp        ; jumptable 00401E25 cases 35,126
.text:0040261C                 jnz     def_402222      ; jumptable 00401E25 cases 37,43-58,65-90,93,95,97-122
.text:0040261C                                         ; jumptable 00402222 default case, cases 34-38,42-44,46,48-59
.text:00402622                 jmp     short loc_4025F8 ; jumptable 00401E25 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:00402624 ; ---------------------------------------------------------------------------
.text:00402624
.text:00402624 loc_402624:                             ; CODE XREF: sub_401D20+8ED↑j
.text:00402624                 mov     esi, [esp+4Ch+Str]
.text:00402628                 cmp     byte ptr [esi+1], 0
.text:0040262C                 jmp     short loc_402614
.text:0040262E ; ---------------------------------------------------------------------------
.text:0040262E
.text:0040262E loc_40262E:                             ; CODE XREF: sub_401D20:loc_401DBF↑j
.text:0040262E                 test    ebp, ebp
.text:00402630                 jnz     short loc_40263D
.text:00402632                 cmp     [esp+4Ch+arg_10], 1
.text:00402637                 jz      loc_40212B      ; jumptable 004024F2 cases 91,92,94,96,124
.text:0040263D
.text:0040263D loc_40263D:                             ; CODE XREF: sub_401D20+910↑j
.text:0040263D                 mov     esi, [esp+4Ch+var_1C]
.text:00402641                 test    esi, esi
.text:00402643                 jz      short loc_402678
.text:00402645                 mov     edi, [esp+4Ch+var_1C]
.text:00402649                 movzx   eax, byte ptr [edi]
.text:0040264C                 test    al, al
.text:0040264E                 jz      short loc_402678
.text:00402650
.text:00402650 loc_402650:                             ; CODE XREF: sub_401D20+956↓j
.text:00402650                 mov     ebp, [esp+4Ch+arg_4]
.text:00402654                 cmp     [esp+4Ch+var_34], ebp
.text:00402658                 jnb     short loc_402665
.text:0040265A                 mov     ecx, [esp+4Ch+arg_0]
.text:0040265E                 mov     ebx, [esp+4Ch+var_34]
.text:00402662                 mov     [ebx+ecx], al
.text:00402665
.text:00402665 loc_402665:                             ; CODE XREF: sub_401D20+938↑j
.text:00402665                 inc     [esp+4Ch+var_1C]
.text:00402669                 inc     [esp+4Ch+var_34]
.text:0040266D                 mov     edx, [esp+4Ch+var_1C]
.text:00402671                 movzx   eax, byte ptr [edx]
.text:00402674                 test    al, al
.text:00402676                 jnz     short loc_402650
.text:00402678
.text:00402678 loc_402678:                             ; CODE XREF: sub_401D20+923↑j
.text:00402678                                         ; sub_401D20+92E↑j
.text:00402678                 mov     eax, [esp+4Ch+arg_4]
.text:0040267C                 cmp     [esp+4Ch+var_34], eax
.text:00402680                 jnb     short loc_40268E
.text:00402682                 mov     edi, [esp+4Ch+arg_0]
.text:00402686                 mov     esi, [esp+4Ch+var_34]
.text:0040268A                 mov     byte ptr [esi+edi], 0
.text:0040268E
.text:0040268E loc_40268E:                             ; CODE XREF: sub_401D20+960↑j
.text:0040268E                 mov     eax, [esp+4Ch+var_34]
.text:00402692                 jmp     loc_40215F
.text:00402697 ; ---------------------------------------------------------------------------
.text:00402697
.text:00402697 loc_402697:                             ; CODE XREF: sub_401D20+95↑j
.text:00402697                 mov     ebx, [esp+4Ch+Str]
.text:0040269B                 cmp     byte ptr [ebp+ebx+0], 0
.text:004026A0                 jmp     loc_401DBF
.text:004026A5 ; ---------------------------------------------------------------------------
.text:004026A5
.text:004026A5 loc_4026A5:                             ; CODE XREF: sub_401D20+3D↑j
.text:004026A5                                         ; DATA XREF: sub_401D20:jpt_401D5D↑o
.text:004026A5                 mov     edx, [esp+4Ch+arg_4] ; jumptable 00401D5D case 2
.text:004026A9                 cmp     [esp+4Ch+var_34], edx
.text:004026AD                 jnb     short loc_4026B6
.text:004026AF                 mov     ecx, [esp+4Ch+arg_0]
.text:004026B3                 mov     byte ptr [ecx], 27h ; '''
.text:004026B6
.text:004026B6 loc_4026B6:                             ; CODE XREF: sub_401D20+98D↑j
.text:004026B6                 mov     [esp+4Ch+var_34], 1
.text:004026BE                 mov     [esp+4Ch+var_1C], 401D0Eh
.text:004026C6                 jmp     loc_401DA6
.text:004026CB ; ---------------------------------------------------------------------------
.text:004026CB
.text:004026CB loc_4026CB:                             ; CODE XREF: sub_401D20+3D↑j
.text:004026CB                                         ; DATA XREF: sub_401D20:jpt_401D5D↑o
.text:004026CB                 mov     [esp+4Ch+var_21], 1 ; jumptable 00401D5D case 4
.text:004026D0                 jmp     def_401D5D      ; jumptable 00401D5D default case, cases 0,1
.text:004026D5 ; ---------------------------------------------------------------------------
.text:004026D5
.text:004026D5 loc_4026D5:                             ; CODE XREF: sub_401D20+3D↑j
.text:004026D5                                         ; DATA XREF: sub_401D20:jpt_401D5D↑o
.text:004026D5                 mov     [esp+4Ch+C], 401D10h ; jumptable 00401D5D cases 5,6
.text:004026DC                 call    ds:libintl_gettext
.text:004026E2                 cmp     eax, 401D10h
.text:004026E7                 mov     edi, eax
.text:004026E9                 jz      short loc_402760
.text:004026EB
.text:004026EB loc_4026EB:                             ; CODE XREF: sub_401D20+A45↓j
.text:004026EB                                         ; sub_401D20+A4C↓j
.text:004026EB                 mov     [esp+4Ch+C], 401D0Eh
.text:004026F2                 call    ds:libintl_gettext
.text:004026F8                 cmp     eax, 401D0Eh
.text:004026FD                 mov     edx, eax
.text:004026FF                 jz      short loc_402752
.text:00402701
.text:00402701 loc_402701:                             ; CODE XREF: sub_401D20+A37↓j
.text:00402701                                         ; sub_401D20+A3E↓j
.text:00402701                 mov     [esp+4Ch+var_1C], edi
.text:00402705                 cmp     byte ptr [edi], 0
.text:00402708                 jz      short loc_402738
.text:0040270A
.text:0040270A loc_40270A:                             ; CODE XREF: sub_401D20+A16↓j
.text:0040270A                 mov     ecx, [esp+4Ch+arg_4]
.text:0040270E                 cmp     [esp+4Ch+var_34], ecx
.text:00402712                 jnb     short loc_402727
.text:00402714                 mov     ebp, [esp+4Ch+var_1C]
.text:00402718                 mov     edi, [esp+4Ch+arg_0]
.text:0040271C                 mov     esi, [esp+4Ch+var_34]
.text:00402720                 movzx   ebx, byte ptr [ebp+0]
.text:00402724                 mov     [esi+edi], bl
.text:00402727
.text:00402727 loc_402727:                             ; CODE XREF: sub_401D20+9F2↑j
.text:00402727                 inc     [esp+4Ch+var_1C]
.text:0040272B                 inc     [esp+4Ch+var_34]
.text:0040272F                 mov     eax, [esp+4Ch+var_1C]
.text:00402733                 cmp     byte ptr [eax], 0
.text:00402736                 jnz     short loc_40270A
.text:00402738
.text:00402738 loc_402738:                             ; CODE XREF: sub_401D20+9E8↑j
.text:00402738                 mov     [esp+4Ch+var_21], 1
.text:0040273D                 mov     [esp+4Ch+var_1C], edx
.text:00402741                 mov     [esp+4Ch+C], edx ; Str
.text:00402744                 call    strlen
.text:00402749                 mov     [esp+4Ch+var_20], eax
.text:0040274D                 jmp     def_401D5D      ; jumptable 00401D5D default case, cases 0,1
.text:00402752 ; ---------------------------------------------------------------------------
.text:00402752
.text:00402752 loc_402752:                             ; CODE XREF: sub_401D20+9DF↑j
.text:00402752                 cmp     [esp+4Ch+arg_10], 6
.text:00402757                 jnz     short loc_402701
.text:00402759                 mov     edx, offset asc_401D0C ; "\"'`"
.text:0040275E                 jmp     short loc_402701
.text:00402760 ; ---------------------------------------------------------------------------
.text:00402760
.text:00402760 loc_402760:                             ; CODE XREF: sub_401D20+9C9↑j
.text:00402760                 cmp     [esp+4Ch+arg_10], 6
.text:00402765                 jnz     short loc_4026EB
.text:00402767                 mov     edi, offset asc_401D0C ; "\"'`"
.text:0040276C                 jmp     loc_4026EB
.text:0040276C sub_401D20      endp
.text:0040276C
.text:00402771 ; ---------------------------------------------------------------------------
.text:00402771                 jmp     short loc_402780
.text:00402771 ; ---------------------------------------------------------------------------
.text:00402773                 align 10h
.text:00402780
.text:00402780 loc_402780:                             ; CODE XREF: .text:00402771↑j
.text:00402780                 sub     esp, 0Ch
.text:00402783                 mov     [esp+4], ebx
.text:00402787                 mov     [esp+8], esi
.text:0040278B                 call    _errno
.text:00402790                 mov     esi, [eax]
.text:00402792                 mov     dword ptr [esp], 24h ; '$'
.text:00402799                 call    sub_403070
.text:0040279E                 mov     edx, [esp+10h]
.text:004027A2                 mov     ebx, eax
.text:004027A4                 test    edx, edx
.text:004027A6                 jz      short loc_4027F1
.text:004027A8
.text:004027A8 loc_4027A8:                             ; CODE XREF: .text:004027F6↓j
.text:004027A8                 mov     ecx, [edx]
.text:004027AA                 mov     [ebx], ecx
.text:004027AC                 mov     ecx, [edx+4]
.text:004027AF                 mov     [ebx+4], ecx
.text:004027B2                 mov     ecx, [edx+8]
.text:004027B5                 mov     [ebx+8], ecx
.text:004027B8                 mov     ecx, [edx+0Ch]
.text:004027BB                 mov     [ebx+0Ch], ecx
.text:004027BE                 mov     ecx, [edx+10h]
.text:004027C1                 mov     [ebx+10h], ecx
.text:004027C4                 mov     ecx, [edx+14h]
.text:004027C7                 mov     [ebx+14h], ecx
.text:004027CA                 mov     ecx, [edx+18h]
.text:004027CD                 mov     [ebx+18h], ecx
.text:004027D0                 mov     ecx, [edx+1Ch]
.text:004027D3                 mov     [ebx+1Ch], ecx
.text:004027D6                 mov     ecx, [edx+20h]
.text:004027D9                 mov     [ebx+20h], ecx
.text:004027DC                 call    _errno
.text:004027E1                 mov     [eax], esi
.text:004027E3                 mov     esi, [esp+8]
.text:004027E7                 mov     eax, ebx
.text:004027E9                 mov     ebx, [esp+4]
.text:004027ED                 add     esp, 0Ch
.text:004027F0                 retn
.text:004027F1 ; ---------------------------------------------------------------------------
.text:004027F1
.text:004027F1 loc_4027F1:                             ; CODE XREF: .text:004027A6↑j
.text:004027F1                 mov     edx, offset dword_405110
.text:004027F6                 jmp     short loc_4027A8
.text:004027F6 ; ---------------------------------------------------------------------------
.text:004027F8                 align 10h
.text:00402800                 mov     eax, [esp+4]
.text:00402804                 test    eax, eax
.text:00402806                 jz      short loc_402810
.text:00402808
.text:00402808 loc_402808:                             ; CODE XREF: .text:00402815↓j
.text:00402808                 mov     eax, [eax]
.text:0040280A                 retn
.text:0040280A ; ---------------------------------------------------------------------------
.text:0040280B                 align 10h
.text:00402810
.text:00402810 loc_402810:                             ; CODE XREF: .text:00402806↑j
.text:00402810                 mov     eax, offset dword_405110
.text:00402815                 jmp     short loc_402808
.text:00402815 ; ---------------------------------------------------------------------------
.text:00402817                 align 10h
.text:00402820                 mov     edx, [esp+4]
.text:00402824                 test    edx, edx
.text:00402826                 jz      short loc_402830
.text:00402828
.text:00402828 loc_402828:                             ; CODE XREF: .text:00402835↓j
.text:00402828                 mov     ecx, [esp+8]
.text:0040282C                 mov     [edx], ecx
.text:0040282E                 retn
.text:0040282E ; ---------------------------------------------------------------------------
.text:0040282F                 align 10h
.text:00402830
.text:00402830 loc_402830:                             ; CODE XREF: .text:00402826↑j
.text:00402830                 mov     edx, offset dword_405110
.text:00402835                 jmp     short loc_402828
.text:00402835 ; ---------------------------------------------------------------------------
.text:00402837                 align 10h
.text:00402840                 sub     esp, 8
.text:00402843                 mov     eax, [esp+0Ch]
.text:00402847                 movzx   ecx, byte ptr [esp+10h]
.text:0040284C                 mov     [esp], ebx
.text:0040284F                 mov     ebx, [esp+14h]
.text:00402853                 mov     [esp+4], esi
.text:00402857                 mov     dl, cl
.text:00402859                 shr     dl, 5
.text:0040285C                 movzx   edx, dl
.text:0040285F                 shl     edx, 2
.text:00402862                 test    eax, eax
.text:00402864                 lea     esi, [edx+eax+4]
.text:00402868                 jz      short loc_402890
.text:0040286A
.text:0040286A loc_40286A:                             ; CODE XREF: .text:00402896↓j
.text:0040286A                 mov     edx, [esi]
.text:0040286C                 and     ecx, 1Fh
.text:0040286F                 and     ebx, 1
.text:00402872                 mov     eax, edx
.text:00402874                 shr     eax, cl
.text:00402876                 and     eax, 1
.text:00402879                 xor     ebx, eax
.text:0040287B                 shl     ebx, cl
.text:0040287D                 xor     edx, ebx
.text:0040287F                 mov     [esi], edx
.text:00402881                 mov     ebx, [esp]
.text:00402884                 mov     esi, [esp+4]
.text:00402888                 add     esp, 8
.text:0040288B                 retn
.text:0040288B ; ---------------------------------------------------------------------------
.text:0040288C                 align 10h
.text:00402890
.text:00402890 loc_402890:                             ; CODE XREF: .text:00402868↑j
.text:00402890                 lea     esi, dword_405114[edx]
.text:00402896                 jmp     short loc_40286A
.text:00402896 ; ---------------------------------------------------------------------------
.text:00402898                 align 10h
.text:004028A0                 sub     esp, 2Ch
.text:004028A3                 mov     [esp+24h], ebx
.text:004028A7                 mov     ebx, [esp+40h]
.text:004028AB                 mov     [esp+28h], esi
.text:004028AF                 test    ebx, ebx
.text:004028B1                 jz      short loc_402900
.text:004028B3
.text:004028B3 loc_4028B3:                             ; CODE XREF: .text:00402905↓j
.text:004028B3                 call    _errno
.text:004028B8                 mov     esi, [eax]
.text:004028BA                 mov     [esp+14h], ebx
.text:004028BE                 mov     edx, [ebx]
.text:004028C0                 mov     ecx, [esp+38h]
.text:004028C4                 mov     ebx, [esp+3Ch]
.text:004028C8                 mov     [esp+10h], edx
.text:004028CC                 mov     edx, [esp+34h]
.text:004028D0                 mov     [esp+0Ch], ebx
.text:004028D4                 mov     [esp+8], ecx
.text:004028D8                 mov     [esp+4], edx
.text:004028DC                 mov     edx, [esp+30h]
.text:004028E0                 mov     [esp], edx
.text:004028E3                 call    sub_401D20
.text:004028E8                 mov     ebx, eax
.text:004028EA                 call    _errno
.text:004028EF                 mov     [eax], esi
.text:004028F1                 mov     esi, [esp+28h]
.text:004028F5                 mov     eax, ebx
.text:004028F7                 mov     ebx, [esp+24h]
.text:004028FB                 add     esp, 2Ch
.text:004028FE                 retn
.text:004028FE ; ---------------------------------------------------------------------------
.text:004028FF                 align 10h
.text:00402900
.text:00402900 loc_402900:                             ; CODE XREF: .text:004028B1↑j
.text:00402900                 mov     ebx, offset dword_405110
.text:00402905                 jmp     short loc_4028B3
.text:00402905 ; ---------------------------------------------------------------------------
.text:00402907                 align 10h
.text:00402910                 push    ebp
.text:00402911                 push    edi
.text:00402912                 push    esi
.text:00402913                 push    ebx
.text:00402914                 sub     esp, 2Ch
.text:00402917                 mov     ebp, [esp+48h]
.text:0040291B                 call    _errno
.text:00402920                 mov     edx, [eax]
.text:00402922                 test    ebp, ebp
.text:00402924                 mov     ebx, ebp
.text:00402926                 mov     [esp+28h], edx
.text:0040292A                 jz      loc_4029E0
.text:00402930
.text:00402930 loc_402930:                             ; CODE XREF: .text:004029E5↓j
.text:00402930                 call    _errno
.text:00402935                 mov     edi, [eax]
.text:00402937                 mov     esi, ebp
.text:00402939                 mov     [esp+14h], ebx
.text:0040293D                 mov     ecx, [ebx]
.text:0040293F                 mov     dword ptr [esp], 0
.text:00402946                 mov     edx, [esp+44h]
.text:0040294A                 mov     dword ptr [esp+4], 0
.text:00402952                 mov     eax, [esp+40h]
.text:00402956                 mov     [esp+10h], ecx
.text:0040295A                 mov     [esp+0Ch], edx
.text:0040295E                 mov     [esp+8], eax
.text:00402962                 call    sub_401D20
.text:00402967                 mov     ebx, eax
.text:00402969                 call    _errno
.text:0040296E                 mov     [eax], edi
.text:00402970                 lea     edi, [ebx+1]
.text:00402973                 mov     [esp], edi
.text:00402976                 call    sub_403070
.text:0040297B                 mov     [esp+24h], eax
.text:0040297F                 test    ebp, ebp
.text:00402981                 jz      short loc_4029D2
.text:00402983
.text:00402983 loc_402983:                             ; CODE XREF: .text:004029D7↓j
.text:00402983                 call    _errno
.text:00402988                 mov     ebp, [eax]
.text:0040298A                 mov     [esp+14h], esi
.text:0040298E                 mov     ecx, [esi]
.text:00402990                 mov     [esp+4], edi
.text:00402994                 mov     edx, [esp+44h]
.text:00402998                 mov     esi, [esp+24h]
.text:0040299C                 mov     [esp+10h], ecx
.text:004029A0                 mov     eax, [esp+40h]
.text:004029A4                 mov     [esp+0Ch], edx
.text:004029A8                 mov     [esp], esi
.text:004029AB                 mov     [esp+8], eax
.text:004029AF                 call    sub_401D20
.text:004029B4                 call    _errno
.text:004029B9                 mov     [eax], ebp
.text:004029BB                 call    _errno
.text:004029C0                 mov     ebx, [esp+28h]
.text:004029C4                 mov     [eax], ebx
.text:004029C6                 mov     eax, [esp+24h]
.text:004029CA                 add     esp, 2Ch
.text:004029CD                 pop     ebx
.text:004029CE                 pop     esi
.text:004029CF                 pop     edi
.text:004029D0                 pop     ebp
.text:004029D1                 retn
.text:004029D2 ; ---------------------------------------------------------------------------
.text:004029D2
.text:004029D2 loc_4029D2:                             ; CODE XREF: .text:00402981↑j
.text:004029D2                 mov     esi, offset dword_405110
.text:004029D7                 jmp     short loc_402983
.text:004029D7 ; ---------------------------------------------------------------------------
.text:004029D9                 align 10h
.text:004029E0
.text:004029E0 loc_4029E0:                             ; CODE XREF: .text:0040292A↑j
.text:004029E0                 mov     ebx, offset dword_405110
.text:004029E5                 jmp     loc_402930
.text:004029E5 ; ---------------------------------------------------------------------------
.text:004029EA                 align 10h
.text:004029F0                 sub     esp, 1Ch
.text:004029F3                 mov     edx, [esp+24h]
.text:004029F7                 mov     dword ptr [esp+0Ch], offset dword_405110
.text:004029FF                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00402A07                 mov     [esp+4], edx
.text:00402A0B                 mov     edx, [esp+20h]
.text:00402A0F                 mov     [esp], edx
.text:00402A12                 call    sub_402E60
.text:00402A17                 add     esp, 1Ch
.text:00402A1A                 retn
.text:00402A1A ; ---------------------------------------------------------------------------
.text:00402A1B                 align 10h
.text:00402A20                 sub     esp, 1Ch
.text:00402A23                 mov     edx, [esp+20h]
.text:00402A27                 mov     dword ptr [esp+0Ch], offset dword_405110
.text:00402A2F                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00402A37                 mov     [esp+4], edx
.text:00402A3B                 mov     dword ptr [esp], 0
.text:00402A42                 call    sub_402E60
.text:00402A47                 add     esp, 1Ch
.text:00402A4A                 retn
.text:00402A4A ; ---------------------------------------------------------------------------
.text:00402A4B                 align 10h
.text:00402A50                 push    ebp
.text:00402A51                 xor     eax, eax
.text:00402A53                 mov     ecx, 8
.text:00402A58                 push    edi
.text:00402A59                 push    esi
.text:00402A5A                 push    ebx
.text:00402A5B                 sub     esp, 0ACh
.text:00402A61                 mov     ebp, [esp+0C4h]
.text:00402A68                 cld
.text:00402A69                 lea     edi, [esp+14h]
.text:00402A6D                 mov     [esp+10h], ebp
.text:00402A71                 rep stosd
.text:00402A73                 mov     eax, [esp+30h]
.text:00402A77                 mov     edi, [esp+10h]
.text:00402A7B                 mov     esi, [esp+14h]
.text:00402A7F                 mov     [esp+60h], eax
.text:00402A83                 mov     ebp, [esp+18h]
.text:00402A87                 mov     eax, [esp+10h]
.text:00402A8B                 mov     [esp+40h], edi
.text:00402A8F                 mov     ecx, [esp+28h]
.text:00402A93                 mov     edi, [esp+1Ch]
.text:00402A97                 mov     [esp+44h], esi
.text:00402A9B                 mov     edx, [esp+2Ch]
.text:00402A9F                 mov     esi, [esp+20h]
.text:00402AA3                 mov     [esp+70h], eax
.text:00402AA7                 mov     ebx, [esp+24h]
.text:00402AAB                 mov     eax, [esp+14h]
.text:00402AAF                 mov     [esp+48h], ebp
.text:00402AB3                 mov     [esp+4Ch], edi
.text:00402AB7                 mov     [esp+50h], esi
.text:00402ABB                 mov     [esp+54h], ebx
.text:00402ABF                 mov     [esp+58h], ecx
.text:00402AC3                 mov     [esp+5Ch], edx
.text:00402AC7                 mov     [esp+74h], eax
.text:00402ACB                 mov     [esp+78h], ebp
.text:00402ACF                 mov     [esp+7Ch], edi
.text:00402AD3                 mov     [esp+80h], esi
.text:00402ADA                 mov     [esp+84h], ebx
.text:00402AE1                 mov     ebx, [esp+30h]
.text:00402AE5                 mov     [esp+8Ch], edx
.text:00402AEC                 mov     edx, [esp+0C8h]
.text:00402AF3                 mov     [esp+88h], ecx
.text:00402AFA                 lea     ecx, [esp+70h]
.text:00402AFE                 mov     [esp+4], edx
.text:00402B02                 mov     edx, [esp+0C0h]
.text:00402B09                 mov     [esp+90h], ebx
.text:00402B10                 mov     [esp+0Ch], ecx
.text:00402B14                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00402B1C                 mov     [esp], edx
.text:00402B1F                 call    sub_402E60
.text:00402B24                 add     esp, 0ACh
.text:00402B2A                 pop     ebx
.text:00402B2B                 pop     esi
.text:00402B2C                 pop     edi
.text:00402B2D                 pop     ebp
.text:00402B2E                 retn
.text:00402B2E ; ---------------------------------------------------------------------------
.text:00402B2F                 align 10h
.text:00402B30                 push    ebp
.text:00402B31                 xor     eax, eax
.text:00402B33                 mov     ecx, 8
.text:00402B38                 push    edi
.text:00402B39                 push    esi
.text:00402B3A                 push    ebx
.text:00402B3B                 sub     esp, 0ACh
.text:00402B41                 mov     edx, [esp+0C4h]
.text:00402B48                 cld
.text:00402B49                 lea     edi, [esp+14h]
.text:00402B4D                 mov     [esp+10h], edx
.text:00402B51                 rep stosd
.text:00402B53                 mov     eax, [esp+30h]
.text:00402B57                 mov     ebp, [esp+10h]
.text:00402B5B                 mov     edi, [esp+14h]
.text:00402B5F                 mov     [esp+60h], eax
.text:00402B63                 mov     esi, [esp+20h]
.text:00402B67                 mov     eax, [esp+10h]
.text:00402B6B                 mov     [esp+40h], ebp
.text:00402B6F                 mov     ecx, [esp+28h]
.text:00402B73                 mov     ebp, [esp+18h]
.text:00402B77                 mov     [esp+44h], edi
.text:00402B7B                 mov     edx, [esp+2Ch]
.text:00402B7F                 mov     edi, [esp+1Ch]
.text:00402B83                 mov     [esp+70h], eax
.text:00402B87                 mov     ebx, [esp+24h]
.text:00402B8B                 mov     eax, [esp+14h]
.text:00402B8F                 mov     [esp+48h], ebp
.text:00402B93                 mov     [esp+4Ch], edi
.text:00402B97                 mov     [esp+50h], esi
.text:00402B9B                 mov     [esp+54h], ebx
.text:00402B9F                 mov     [esp+58h], ecx
.text:00402BA3                 mov     [esp+5Ch], edx
.text:00402BA7                 mov     [esp+74h], eax
.text:00402BAB                 mov     [esp+78h], ebp
.text:00402BAF                 mov     [esp+7Ch], edi
.text:00402BB3                 mov     [esp+80h], esi
.text:00402BBA                 mov     [esp+84h], ebx
.text:00402BC1                 mov     esi, [esp+30h]
.text:00402BC5                 lea     ebx, [esp+70h]
.text:00402BC9                 mov     [esp+8Ch], edx
.text:00402BD0                 mov     edx, [esp+0C8h]
.text:00402BD7                 mov     [esp+88h], ecx
.text:00402BDE                 mov     ecx, [esp+0CCh]
.text:00402BE5                 mov     [esp+4], edx
.text:00402BE9                 mov     edx, [esp+0C0h]
.text:00402BF0                 mov     [esp+90h], esi
.text:00402BF7                 mov     [esp+0Ch], ebx
.text:00402BFB                 mov     [esp+8], ecx
.text:00402BFF                 mov     [esp], edx
.text:00402C02                 call    sub_402E60
.text:00402C07                 add     esp, 0ACh
.text:00402C0D                 pop     ebx
.text:00402C0E                 pop     esi
.text:00402C0F                 pop     edi
.text:00402C10                 pop     ebp
.text:00402C11                 retn
.text:00402C11 ; ---------------------------------------------------------------------------
.text:00402C12                 align 10h
.text:00402C20                 push    ebp
.text:00402C21                 xor     eax, eax
.text:00402C23                 mov     ecx, 8
.text:00402C28                 push    edi
.text:00402C29                 push    esi
.text:00402C2A                 push    ebx
.text:00402C2B                 sub     esp, 0ACh
.text:00402C31                 mov     edi, [esp+0C0h]
.text:00402C38                 cld
.text:00402C39                 mov     [esp+10h], edi
.text:00402C3D                 lea     edi, [esp+14h]
.text:00402C41                 rep stosd
.text:00402C43                 mov     eax, [esp+30h]
.text:00402C47                 mov     esi, [esp+10h]
.text:00402C4B                 mov     ebx, [esp+14h]
.text:00402C4F                 mov     [esp+60h], eax
.text:00402C53                 mov     ebp, [esp+18h]
.text:00402C57                 mov     eax, [esp+10h]
.text:00402C5B                 mov     [esp+40h], esi
.text:00402C5F                 mov     edi, [esp+1Ch]
.text:00402C63                 mov     esi, [esp+20h]
.text:00402C67                 mov     [esp+44h], ebx
.text:00402C6B                 mov     ecx, [esp+28h]
.text:00402C6F                 mov     edx, [esp+2Ch]
.text:00402C73                 mov     [esp+70h], eax
.text:00402C77                 mov     ebx, [esp+24h]
.text:00402C7B                 mov     eax, [esp+14h]
.text:00402C7F                 mov     [esp+48h], ebp
.text:00402C83                 mov     [esp+4Ch], edi
.text:00402C87                 mov     [esp+50h], esi
.text:00402C8B                 mov     [esp+54h], ebx
.text:00402C8F                 mov     [esp+58h], ecx
.text:00402C93                 mov     [esp+5Ch], edx
.text:00402C97                 mov     [esp+74h], eax
.text:00402C9B                 mov     [esp+78h], ebp
.text:00402C9F                 mov     [esp+7Ch], edi
.text:00402CA3                 mov     [esp+80h], esi
.text:00402CAA                 mov     [esp+84h], ebx
.text:00402CB1                 mov     [esp+8Ch], edx
.text:00402CB8                 lea     edx, [esp+70h]
.text:00402CBC                 mov     [esp+88h], ecx
.text:00402CC3                 mov     ecx, [esp+30h]
.text:00402CC7                 mov     [esp+0Ch], edx
.text:00402CCB                 mov     edx, [esp+0C4h]
.text:00402CD2                 mov     [esp+90h], ecx
.text:00402CD9                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00402CE1                 mov     [esp+4], edx
.text:00402CE5                 mov     dword ptr [esp], 0
.text:00402CEC                 call    sub_402E60
.text:00402CF1                 add     esp, 0ACh
.text:00402CF7                 pop     ebx
.text:00402CF8                 pop     esi
.text:00402CF9                 pop     edi
.text:00402CFA                 pop     ebp
.text:00402CFB                 retn
.text:00402CFB ; ---------------------------------------------------------------------------
.text:00402CFC                 align 10h
.text:00402D00                 push    edi
.text:00402D01                 push    esi
.text:00402D02                 push    ebx
.text:00402D03                 sub     esp, 40h
.text:00402D06                 mov     edx, ds:dword_40511C
.text:00402D0C                 mov     ebx, ds:dword_405110
.text:00402D12                 mov     esi, ds:dword_405118
.text:00402D18                 mov     edi, ds:dword_405114
.text:00402D1E                 mov     [esp+1Ch], edx
.text:00402D22                 mov     ecx, ds:dword_405120
.text:00402D28                 mov     edx, ds:dword_405130
.text:00402D2E                 mov     [esp+10h], ebx
.text:00402D32                 mov     ebx, ds:dword_405124
.text:00402D38                 mov     [esp+30h], edx
.text:00402D3C                 movzx   edx, byte ptr [esp+54h]
.text:00402D41                 mov     [esp+18h], esi
.text:00402D45                 mov     esi, ds:dword_40512C
.text:00402D4B                 mov     [esp+14h], edi
.text:00402D4F                 mov     edi, ds:dword_405128
.text:00402D55                 mov     [esp+20h], ecx
.text:00402D59                 mov     cl, dl
.text:00402D5B                 shr     cl, 5
.text:00402D5E                 mov     [esp+24h], ebx
.text:00402D62                 movzx   ebx, cl
.text:00402D65                 mov     [esp+2Ch], esi
.text:00402D69                 lea     esi, [esp+10h]
.text:00402D6D                 mov     [esp+28h], edi
.text:00402D71                 lea     edi, [esi+ebx*4]
.text:00402D74                 mov     ebx, edx
.text:00402D76                 mov     edx, [edi+4]
.text:00402D79                 and     ebx, 1Fh
.text:00402D7C                 mov     cl, bl
.text:00402D7E                 mov     eax, edx
.text:00402D80                 shr     eax, cl
.text:00402D82                 and     eax, 1
.text:00402D85                 xor     eax, 1
.text:00402D88                 shl     eax, cl
.text:00402D8A                 xor     edx, eax
.text:00402D8C                 mov     [edi+4], edx
.text:00402D8F                 mov     edx, [esp+50h]
.text:00402D93                 mov     [esp+0Ch], esi
.text:00402D97                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00402D9F                 mov     [esp+4], edx
.text:00402DA3                 mov     dword ptr [esp], 0
.text:00402DAA                 call    sub_402E60
.text:00402DAF                 add     esp, 40h
.text:00402DB2                 pop     ebx
.text:00402DB3                 pop     esi
.text:00402DB4                 pop     edi
.text:00402DB5                 retn
.text:00402DB5 ; ---------------------------------------------------------------------------
.text:00402DB6                 align 10h
.text:00402DC0
.text:00402DC0 ; =============== S U B R O U T I N E =======================================
.text:00402DC0
.text:00402DC0
.text:00402DC0 ; int __cdecl sub_402DC0(char *)
.text:00402DC0 sub_402DC0      proc near               ; CODE XREF: sub_401BB0+64↑p
.text:00402DC0
.text:00402DC0 var_4C          = dword ptr -4Ch
.text:00402DC0 var_48          = dword ptr -48h
.text:00402DC0 var_44          = dword ptr -44h
.text:00402DC0 var_40          = dword ptr -40h
.text:00402DC0 var_3C          = dword ptr -3Ch
.text:00402DC0 var_38          = dword ptr -38h
.text:00402DC0 var_34          = dword ptr -34h
.text:00402DC0 var_30          = dword ptr -30h
.text:00402DC0 var_2C          = dword ptr -2Ch
.text:00402DC0 var_28          = dword ptr -28h
.text:00402DC0 var_24          = dword ptr -24h
.text:00402DC0 var_20          = dword ptr -20h
.text:00402DC0 var_1C          = dword ptr -1Ch
.text:00402DC0 arg_0           = dword ptr  4
.text:00402DC0
.text:00402DC0                 sub     esp, 4Ch
.text:00402DC3                 mov     ecx, ds:dword_405110
.text:00402DC9                 mov     [esp+4Ch+var_44], 0FFFFFFFFh ; int
.text:00402DD1                 mov     edx, ds:dword_405114
.text:00402DD7                 mov     [esp+4Ch+var_4C], 0 ; int
.text:00402DDE                 mov     [esp+4Ch+var_3C], ecx
.text:00402DE2                 mov     ecx, ds:dword_40511C
.text:00402DE8                 mov     [esp+4Ch+var_38], edx
.text:00402DEC                 mov     edx, ds:dword_405118
.text:00402DF2                 mov     [esp+4Ch+var_30], ecx
.text:00402DF6                 mov     ecx, ds:dword_405120
.text:00402DFC                 mov     eax, edx
.text:00402DFE                 shr     eax, 1Ah
.text:00402E01                 and     eax, 1
.text:00402E04                 xor     eax, 1
.text:00402E07                 mov     [esp+4Ch+var_2C], ecx
.text:00402E0B                 shl     eax, 1Ah
.text:00402E0E                 mov     ecx, ds:dword_405124
.text:00402E14                 xor     edx, eax
.text:00402E16                 mov     [esp+4Ch+var_34], edx
.text:00402E1A                 mov     edx, [esp+4Ch+arg_0]
.text:00402E1E                 mov     [esp+4Ch+var_28], ecx
.text:00402E22                 mov     ecx, ds:dword_405128
.text:00402E28                 mov     [esp+4Ch+var_48], edx ; char *
.text:00402E2C                 mov     [esp+4Ch+var_24], ecx
.text:00402E30                 mov     ecx, ds:dword_40512C
.text:00402E36                 mov     [esp+4Ch+var_20], ecx
.text:00402E3A                 mov     ecx, ds:dword_405130
.text:00402E40                 mov     [esp+4Ch+var_1C], ecx
.text:00402E44                 lea     ecx, [esp+4Ch+var_3C]
.text:00402E48                 mov     [esp+4Ch+var_40], ecx ; int
.text:00402E4C                 call    sub_402E60
.text:00402E51                 add     esp, 4Ch
.text:00402E54                 retn
.text:00402E54 sub_402DC0      endp
.text:00402E54
.text:00402E54 ; ---------------------------------------------------------------------------
.text:00402E55                 align 10h
.text:00402E60
.text:00402E60 ; =============== S U B R O U T I N E =======================================
.text:00402E60
.text:00402E60
.text:00402E60 ; int __cdecl sub_402E60(int, char *, int, int)
.text:00402E60 sub_402E60      proc near               ; CODE XREF: .text:00402A12↑p
.text:00402E60                                         ; .text:00402A42↑p ...
.text:00402E60
.text:00402E60 Block           = dword ptr -2Ch
.text:00402E60 var_28          = dword ptr -28h
.text:00402E60 Str             = dword ptr -24h
.text:00402E60 var_20          = dword ptr -20h
.text:00402E60 var_1C          = dword ptr -1Ch
.text:00402E60 var_18          = dword ptr -18h
.text:00402E60 var_14          = dword ptr -14h
.text:00402E60 arg_0           = dword ptr  4
.text:00402E60 arg_4           = dword ptr  8
.text:00402E60 arg_8           = dword ptr  0Ch
.text:00402E60 arg_C           = dword ptr  10h
.text:00402E60
.text:00402E60                 push    ebp
.text:00402E61                 push    edi
.text:00402E62                 push    esi
.text:00402E63                 push    ebx
.text:00402E64                 sub     esp, 1Ch
.text:00402E67                 call    _errno
.text:00402E6C                 mov     edx, [eax]
.text:00402E6E                 mov     eax, [esp+2Ch+arg_0]
.text:00402E72                 mov     [esp+2Ch+var_14], edx
.text:00402E76                 test    eax, eax
.text:00402E78                 js      loc_40301A
.text:00402E7E                 mov     eax, [esp+2Ch+arg_0]
.text:00402E82                 cmp     dword_404030, eax
.text:00402E88                 ja      short loc_402F00
.text:00402E8A                 mov     esi, eax
.text:00402E8C                 inc     esi
.text:00402E8D                 cmp     esi, 1FFFFFFFh
.text:00402E93                 ja      loc_40301F
.text:00402E99                 mov     ebx, off_40403C
.text:00402E9F                 cmp     ebx, offset dword_404034
.text:00402EA5                 jz      loc_402FF1
.text:00402EAB
.text:00402EAB loc_402EAB:                             ; CODE XREF: sub_402E60+1B5↓j
.text:00402EAB                 mov     [esp+2Ch+Block], ebx ; void *
.text:00402EAE                 lea     ecx, ds:0[esi*8]
.text:00402EB5                 mov     ebp, esi
.text:00402EB7                 mov     [esp+2Ch+var_28], ecx ; size_t
.text:00402EBB                 call    sub_403100
.text:00402EC0                 mov     off_40403C, eax
.text:00402EC5                 mov     ebx, dword_404030
.text:00402ECB                 sub     ebp, ebx
.text:00402ECD                 lea     edi, [eax+ebx*8]
.text:00402ED0                 lea     eax, ds:0[ebp*8]
.text:00402ED7                 cmp     eax, 7
.text:00402EDA                 jbe     short loc_402EF0
.text:00402EDC                 test    edi, 4
.text:00402EE2                 jz      short loc_402EF0
.text:00402EE4                 mov     dword ptr [edi], 0
.text:00402EEA                 sub     eax, 4
.text:00402EED                 add     edi, 4
.text:00402EF0
.text:00402EF0 loc_402EF0:                             ; CODE XREF: sub_402E60+7A↑j
.text:00402EF0                                         ; sub_402E60+82↑j
.text:00402EF0                 cld
.text:00402EF1                 mov     ecx, eax
.text:00402EF3                 shr     ecx, 2
.text:00402EF6                 xor     eax, eax
.text:00402EF8                 rep stosd
.text:00402EFA                 mov     dword_404030, esi
.text:00402F00
.text:00402F00 loc_402F00:                             ; CODE XREF: sub_402E60+28↑j
.text:00402F00                 mov     esi, off_40403C
.text:00402F06                 mov     eax, [esp+2Ch+arg_0]
.text:00402F0A                 mov     ebp, [esi+eax*8]
.text:00402F0D                 mov     edi, [esi+eax*8+4]
.text:00402F11                 mov     esi, [esp+2Ch+arg_C]
.text:00402F15                 test    esi, esi
.text:00402F17                 jz      loc_402FE7
.text:00402F1D
.text:00402F1D loc_402F1D:                             ; CODE XREF: sub_402E60+18C↓j
.text:00402F1D                 call    _errno
.text:00402F22                 mov     ebx, [eax]
.text:00402F24                 mov     [esp+2Ch+var_18], esi ; int
.text:00402F28                 mov     ecx, [esi]
.text:00402F2A                 mov     [esp+2Ch+Block], edi ; int
.text:00402F2D                 mov     edx, [esp+2Ch+arg_8]
.text:00402F31                 mov     [esp+2Ch+var_28], ebp ; int
.text:00402F35                 mov     [esp+2Ch+var_1C], ecx ; int
.text:00402F39                 mov     ecx, [esp+2Ch+arg_4]
.text:00402F3D                 mov     [esp+2Ch+var_20], edx ; int
.text:00402F41                 mov     [esp+2Ch+Str], ecx ; Str
.text:00402F45                 call    sub_401D20
.text:00402F4A                 mov     esi, eax
.text:00402F4C                 call    _errno
.text:00402F51                 mov     [eax], ebx
.text:00402F53                 cmp     ebp, esi
.text:00402F55                 ja      short loc_402FCB
.text:00402F57                 lea     ebp, [esi+1]
.text:00402F5A                 mov     ebx, off_40403C
.text:00402F60                 cmp     edi, offset unk_405010
.text:00402F66                 mov     esi, [esp+2Ch+arg_0]
.text:00402F6A                 mov     [ebx+esi*8], ebp
.text:00402F6D                 jz      short loc_402F7D
.text:00402F6F                 mov     [esp+2Ch+Block], edi ; Block
.text:00402F72                 call    free
.text:00402F77                 mov     ebx, off_40403C
.text:00402F7D
.text:00402F7D loc_402F7D:                             ; CODE XREF: sub_402E60+10D↑j
.text:00402F7D                 mov     [esp+2Ch+Block], ebp ; size_t
.text:00402F80                 call    sub_403070
.text:00402F85                 mov     esi, [esp+2Ch+arg_C]
.text:00402F89                 mov     edi, eax
.text:00402F8B                 mov     eax, [esp+2Ch+arg_0]
.text:00402F8F                 test    esi, esi
.text:00402F91                 mov     [ebx+eax*8+4], edi
.text:00402F95                 jz      short loc_402FE0
.text:00402F97
.text:00402F97 loc_402F97:                             ; CODE XREF: sub_402E60+185↓j
.text:00402F97                 call    _errno
.text:00402F9C                 mov     ebx, [eax]
.text:00402F9E                 mov     [esp+2Ch+var_18], esi ; int
.text:00402FA2                 mov     ecx, [esi]
.text:00402FA4                 mov     [esp+2Ch+Block], edi ; int
.text:00402FA7                 mov     edx, [esp+2Ch+arg_8]
.text:00402FAB                 mov     [esp+2Ch+var_28], ebp ; int
.text:00402FAF                 mov     [esp+2Ch+var_1C], ecx ; int
.text:00402FB3                 mov     ecx, [esp+2Ch+arg_4]
.text:00402FB7                 mov     [esp+2Ch+var_20], edx ; int
.text:00402FBB                 mov     [esp+2Ch+Str], ecx ; Str
.text:00402FBF                 call    sub_401D20
.text:00402FC4                 call    _errno
.text:00402FC9                 mov     [eax], ebx
.text:00402FCB
.text:00402FCB loc_402FCB:                             ; CODE XREF: sub_402E60+F5↑j
.text:00402FCB                 call    _errno
.text:00402FD0                 mov     ebp, [esp+2Ch+var_14]
.text:00402FD4                 mov     [eax], ebp
.text:00402FD6                 add     esp, 1Ch
.text:00402FD9                 mov     eax, edi
.text:00402FDB                 pop     ebx
.text:00402FDC                 pop     esi
.text:00402FDD                 pop     edi
.text:00402FDE                 pop     ebp
.text:00402FDF                 retn
.text:00402FE0 ; ---------------------------------------------------------------------------
.text:00402FE0
.text:00402FE0 loc_402FE0:                             ; CODE XREF: sub_402E60+135↑j
.text:00402FE0                 mov     esi, offset dword_405110
.text:00402FE5                 jmp     short loc_402F97
.text:00402FE7 ; ---------------------------------------------------------------------------
.text:00402FE7
.text:00402FE7 loc_402FE7:                             ; CODE XREF: sub_402E60+B7↑j
.text:00402FE7                 mov     esi, offset dword_405110
.text:00402FEC                 jmp     loc_402F1D
.text:00402FF1 ; ---------------------------------------------------------------------------
.text:00402FF1
.text:00402FF1 loc_402FF1:                             ; CODE XREF: sub_402E60+45↑j
.text:00402FF1                 mov     [esp+2Ch+Block], 8 ; size_t
.text:00402FF8                 call    sub_403070
.text:00402FFD                 mov     off_40403C, eax
.text:00403002                 mov     edi, dword_404034
.text:00403008                 mov     ebx, eax
.text:0040300A                 mov     ecx, off_404038
.text:00403010                 mov     [eax], edi
.text:00403012                 mov     [eax+4], ecx
.text:00403015                 jmp     loc_402EAB
.text:0040301A ; ---------------------------------------------------------------------------
.text:0040301A
.text:0040301A loc_40301A:                             ; CODE XREF: sub_402E60+18↑j
.text:0040301A                 call    abort
.text:0040301F ; ---------------------------------------------------------------------------
.text:0040301F
.text:0040301F loc_40301F:                             ; CODE XREF: sub_402E60+33↑j
.text:0040301F                 call    sub_403320
.text:0040301F sub_402E60      endp
.text:0040301F
.text:0040301F ; ---------------------------------------------------------------------------
.text:00403024                 align 10h
.text:00403030
.text:00403030 ; =============== S U B R O U T I N E =======================================
.text:00403030
.text:00403030
.text:00403030 sub_403030      proc near
.text:00403030
.text:00403030 Size            = dword ptr -0Ch
.text:00403030 var_4           = dword ptr -4
.text:00403030 arg_0           = dword ptr  4
.text:00403030 arg_4           = dword ptr  8
.text:00403030
.text:00403030                 sub     esp, 0Ch
.text:00403033                 xor     edx, edx
.text:00403035                 mov     ecx, [esp+0Ch+arg_4]
.text:00403039                 mov     [esp+0Ch+var_4], ebx
.text:0040303D                 mov     eax, 0FFFFFFFFh
.text:00403042                 mov     ebx, [esp+0Ch+arg_0]
.text:00403046                 div     ecx
.text:00403048                 cmp     eax, ebx
.text:0040304A                 jb      short loc_403069
.text:0040304C                 mov     edx, ebx
.text:0040304E                 imul    edx, ecx
.text:00403051                 mov     [esp+0Ch+Size], edx ; Size
.text:00403054                 call    malloc
.text:00403059                 test    eax, eax
.text:0040305B                 jz      short loc_403065
.text:0040305D
.text:0040305D loc_40305D:                             ; CODE XREF: sub_403030+37↓j
.text:0040305D                 mov     ebx, [esp+0Ch+var_4]
.text:00403061                 add     esp, 0Ch
.text:00403064                 retn
.text:00403065 ; ---------------------------------------------------------------------------
.text:00403065
.text:00403065 loc_403065:                             ; CODE XREF: sub_403030+2B↑j
.text:00403065                 test    ebx, ebx
.text:00403067                 jz      short loc_40305D
.text:00403069
.text:00403069 loc_403069:                             ; CODE XREF: sub_403030+1A↑j
.text:00403069                 call    sub_403320
.text:00403069 sub_403030      endp
.text:00403069
.text:00403069 ; ---------------------------------------------------------------------------
.text:0040306E                 align 10h
.text:00403070
.text:00403070 ; =============== S U B R O U T I N E =======================================
.text:00403070
.text:00403070
.text:00403070 ; int __cdecl sub_403070(size_t)
.text:00403070 sub_403070      proc near               ; CODE XREF: .text:00402799↑p
.text:00403070                                         ; .text:00402976↑p ...
.text:00403070
.text:00403070 Size            = dword ptr -0Ch
.text:00403070 var_4           = dword ptr -4
.text:00403070 arg_0           = dword ptr  4
.text:00403070
.text:00403070                 sub     esp, 0Ch
.text:00403073                 mov     [esp+0Ch+var_4], ebx
.text:00403077                 mov     ebx, [esp+0Ch+arg_0]
.text:0040307B                 mov     [esp+0Ch+Size], ebx ; Size
.text:0040307E                 call    malloc
.text:00403083                 test    eax, eax
.text:00403085                 jz      short loc_403090
.text:00403087
.text:00403087 loc_403087:                             ; CODE XREF: sub_403070+22↓j
.text:00403087                 mov     ebx, [esp+0Ch+var_4]
.text:0040308B                 add     esp, 0Ch
.text:0040308E                 retn
.text:0040308E ; ---------------------------------------------------------------------------
.text:0040308F                 align 10h
.text:00403090
.text:00403090 loc_403090:                             ; CODE XREF: sub_403070+15↑j
.text:00403090                 test    ebx, ebx
.text:00403092                 jz      short loc_403087
.text:00403094                 call    sub_403320
.text:00403094 sub_403070      endp
.text:00403094
.text:00403094 ; ---------------------------------------------------------------------------
.text:00403099                 align 10h
.text:004030A0                 sub     esp, 1Ch
.text:004030A3                 xor     edx, edx
.text:004030A5                 mov     eax, 0FFFFFFFFh
.text:004030AA                 mov     [esp+14h], ebx
.text:004030AE                 mov     ecx, [esp+20h]
.text:004030B2                 mov     ebx, [esp+28h]
.text:004030B6                 mov     [esp+18h], esi
.text:004030BA                 mov     esi, [esp+24h]
.text:004030BE                 div     ebx
.text:004030C0                 cmp     eax, esi
.text:004030C2                 jb      short loc_4030F4
.text:004030C4                 mov     [esp], ecx
.text:004030C7                 mov     edx, esi
.text:004030C9                 imul    edx, ebx
.text:004030CC                 mov     [esp+4], edx
.text:004030D0                 call    realloc
.text:004030D5                 test    eax, eax
.text:004030D7                 mov     ecx, eax
.text:004030D9                 jz      short loc_4030F0
.text:004030DB
.text:004030DB loc_4030DB:                             ; CODE XREF: .text:004030F2↓j
.text:004030DB                 mov     ebx, [esp+14h]
.text:004030DF                 mov     eax, ecx
.text:004030E1                 mov     esi, [esp+18h]
.text:004030E5                 add     esp, 1Ch
.text:004030E8                 retn
.text:004030E8 ; ---------------------------------------------------------------------------
.text:004030E9                 align 10h
.text:004030F0
.text:004030F0 loc_4030F0:                             ; CODE XREF: .text:004030D9↑j
.text:004030F0                 test    esi, esi
.text:004030F2                 jz      short loc_4030DB
.text:004030F4
.text:004030F4 loc_4030F4:                             ; CODE XREF: .text:004030C2↑j
.text:004030F4                 call    sub_403320
.text:004030F4 ; ---------------------------------------------------------------------------
.text:004030F9                 align 10h
.text:00403100
.text:00403100 ; =============== S U B R O U T I N E =======================================
.text:00403100
.text:00403100
.text:00403100 ; int __cdecl sub_403100(void *, size_t)
.text:00403100 sub_403100      proc near               ; CODE XREF: sub_402E60+5B↑p
.text:00403100
.text:00403100 Block           = dword ptr -0Ch
.text:00403100 Size            = dword ptr -8
.text:00403100 var_4           = dword ptr -4
.text:00403100 arg_0           = dword ptr  4
.text:00403100 arg_4           = dword ptr  8
.text:00403100
.text:00403100                 sub     esp, 0Ch
.text:00403103                 mov     edx, [esp+0Ch+arg_0]
.text:00403107                 mov     [esp+0Ch+var_4], ebx
.text:0040310B                 mov     ebx, [esp+0Ch+arg_4]
.text:0040310F                 mov     [esp+0Ch+Block], edx ; Block
.text:00403112                 mov     [esp+0Ch+Size], ebx ; Size
.text:00403116                 call    realloc
.text:0040311B                 test    eax, eax
.text:0040311D                 jz      short loc_403127
.text:0040311F
.text:0040311F loc_40311F:                             ; CODE XREF: sub_403100+29↓j
.text:0040311F                 mov     ebx, [esp+0Ch+var_4]
.text:00403123                 add     esp, 0Ch
.text:00403126                 retn
.text:00403127 ; ---------------------------------------------------------------------------
.text:00403127
.text:00403127 loc_403127:                             ; CODE XREF: sub_403100+1D↑j
.text:00403127                 test    ebx, ebx
.text:00403129                 jz      short loc_40311F
.text:0040312B                 call    sub_403320
.text:0040312B sub_403100      endp
.text:0040312B
.text:00403130 ; ---------------------------------------------------------------------------
.text:00403130                 jmp     sub_403280
.text:00403130 ; ---------------------------------------------------------------------------
.text:00403135                 align 10h
.text:00403140                 sub     esp, 0Ch
.text:00403143                 mov     edx, [esp+14h]
.text:00403147                 mov     dword ptr [esp+8], 1
.text:0040314F                 mov     [esp+4], edx
.text:00403153                 mov     edx, [esp+10h]
.text:00403157                 mov     [esp], edx
.text:0040315A                 call    sub_403280
.text:0040315F                 add     esp, 0Ch
.text:00403162                 retn
.text:00403162 ; ---------------------------------------------------------------------------
.text:00403163                 align 10h
.text:00403170                 sub     esp, 1Ch
.text:00403173                 mov     [esp+18h], ebx
.text:00403177                 mov     ebx, [esp+20h]
.text:0040317B                 mov     [esp], ebx
.text:0040317E                 call    malloc
.text:00403183                 test    eax, eax
.text:00403185                 jz      short loc_4031A3
.text:00403187
.text:00403187 loc_403187:                             ; CODE XREF: .text:004031A5↓j
.text:00403187                 mov     [esp+8], ebx
.text:0040318B                 mov     dword ptr [esp+4], 0
.text:00403193                 mov     [esp], eax
.text:00403196                 call    memset
.text:0040319B                 mov     ebx, [esp+18h]
.text:0040319F                 add     esp, 1Ch
.text:004031A2                 retn
.text:004031A3 ; ---------------------------------------------------------------------------
.text:004031A3
.text:004031A3 loc_4031A3:                             ; CODE XREF: .text:00403185↑j
.text:004031A3                 test    ebx, ebx
.text:004031A5                 jz      short loc_403187
.text:004031A7                 call    sub_403320
.text:004031A7 ; ---------------------------------------------------------------------------
.text:004031AC                 align 10h
.text:004031B0                 sub     esp, 0Ch
.text:004031B3                 xor     edx, edx
.text:004031B5                 mov     ecx, [esp+14h]
.text:004031B9                 mov     [esp+8], ebx
.text:004031BD                 mov     eax, 0FFFFFFFFh
.text:004031C2                 mov     ebx, [esp+10h]
.text:004031C6                 div     ecx
.text:004031C8                 cmp     eax, ebx
.text:004031CA                 jb      short loc_4031E8
.text:004031CC                 mov     [esp+4], ecx
.text:004031D0                 mov     [esp], ebx
.text:004031D3                 call    calloc
.text:004031D8                 test    eax, eax
.text:004031DA                 jz      short loc_4031E4
.text:004031DC
.text:004031DC loc_4031DC:                             ; CODE XREF: .text:004031E6↓j
.text:004031DC                 mov     ebx, [esp+8]
.text:004031E0                 add     esp, 0Ch
.text:004031E3                 retn
.text:004031E4 ; ---------------------------------------------------------------------------
.text:004031E4
.text:004031E4 loc_4031E4:                             ; CODE XREF: .text:004031DA↑j
.text:004031E4                 test    ebx, ebx
.text:004031E6                 jz      short loc_4031DC
.text:004031E8
.text:004031E8 loc_4031E8:                             ; CODE XREF: .text:004031CA↑j
.text:004031E8                 call    sub_403320
.text:004031E8 ; ---------------------------------------------------------------------------
.text:004031ED                 align 10h
.text:004031F0                 sub     esp, 1Ch
.text:004031F3                 mov     [esp+18h], ebx
.text:004031F7                 mov     ebx, [esp+24h]
.text:004031FB                 mov     [esp], ebx
.text:004031FE                 call    malloc
.text:00403203                 test    eax, eax
.text:00403205                 mov     edx, eax
.text:00403207                 jz      short loc_403225
.text:00403209
.text:00403209 loc_403209:                             ; CODE XREF: .text:00403227↓j
.text:00403209                 mov     [esp+8], ebx
.text:0040320D                 mov     ecx, [esp+20h]
.text:00403211                 mov     [esp], edx
.text:00403214                 mov     [esp+4], ecx
.text:00403218                 call    memcpy
.text:0040321D                 mov     ebx, [esp+18h]
.text:00403221                 add     esp, 1Ch
.text:00403224                 retn
.text:00403225 ; ---------------------------------------------------------------------------
.text:00403225
.text:00403225 loc_403225:                             ; CODE XREF: .text:00403207↑j
.text:00403225                 test    ebx, ebx
.text:00403227                 jz      short loc_403209
.text:00403229                 call    sub_403320
.text:00403229 ; ---------------------------------------------------------------------------
.text:0040322E                 align 10h
.text:00403230                 sub     esp, 1Ch
.text:00403233                 mov     [esp+18h], esi
.text:00403237                 mov     esi, [esp+20h]
.text:0040323B                 mov     [esp+14h], ebx
.text:0040323F                 mov     [esp], esi
.text:00403242                 call    strlen
.text:00403247                 lea     ebx, [eax+1]
.text:0040324A                 mov     [esp], ebx
.text:0040324D                 call    malloc
.text:00403252                 test    eax, eax
.text:00403254                 jz      short loc_403272
.text:00403256
.text:00403256 loc_403256:                             ; CODE XREF: .text:00403274↓j
.text:00403256                 mov     [esp+8], ebx
.text:0040325A                 mov     [esp+4], esi
.text:0040325E                 mov     [esp], eax
.text:00403261                 call    memcpy
.text:00403266                 mov     ebx, [esp+14h]
.text:0040326A                 mov     esi, [esp+18h]
.text:0040326E                 add     esp, 1Ch
.text:00403271                 retn
.text:00403272 ; ---------------------------------------------------------------------------
.text:00403272
.text:00403272 loc_403272:                             ; CODE XREF: .text:00403254↑j
.text:00403272                 test    ebx, ebx
.text:00403274                 jz      short loc_403256
.text:00403276                 call    sub_403320
.text:00403276 ; ---------------------------------------------------------------------------
.text:0040327B                 align 10h
.text:00403280
.text:00403280 ; =============== S U B R O U T I N E =======================================
.text:00403280
.text:00403280
.text:00403280 ; int __cdecl sub_403280(void *, int, int)
.text:00403280 sub_403280      proc near               ; CODE XREF: .text:00403130↑j
.text:00403280                                         ; .text:0040315A↑p
.text:00403280
.text:00403280 Block           = dword ptr -1Ch
.text:00403280 Size            = dword ptr -18h
.text:00403280 var_C           = dword ptr -0Ch
.text:00403280 var_8           = dword ptr -8
.text:00403280 var_4           = dword ptr -4
.text:00403280 arg_0           = dword ptr  4
.text:00403280 arg_4           = dword ptr  8
.text:00403280 arg_8           = dword ptr  0Ch
.text:00403280
.text:00403280                 sub     esp, 1Ch
.text:00403283                 mov     [esp+1Ch+var_8], esi
.text:00403287                 mov     esi, [esp+1Ch+arg_0]
.text:0040328B                 mov     [esp+1Ch+var_4], edi
.text:0040328F                 mov     edi, [esp+1Ch+arg_4]
.text:00403293                 test    esi, esi
.text:00403295                 mov     [esp+1Ch+var_C], ebx
.text:00403299                 mov     ecx, [edi]
.text:0040329B                 mov     ebx, [esp+1Ch+arg_8]
.text:0040329F                 jz      short loc_4032E0
.text:004032A1                 xor     edx, edx
.text:004032A3                 mov     eax, 7FFFFFFFh
.text:004032A8                 div     ebx
.text:004032AA                 cmp     eax, ecx
.text:004032AC                 jb      short loc_4032D9
.text:004032AE                 add     ecx, ecx
.text:004032B0
.text:004032B0 loc_4032B0:                             ; CODE XREF: sub_403280+62↓j
.text:004032B0                                         ; sub_403280+71↓j ...
.text:004032B0                 mov     [edi], ecx
.text:004032B2                 imul    ebx, ecx
.text:004032B5                 mov     [esp+1Ch+Block], esi ; Block
.text:004032B8                 mov     [esp+1Ch+Size], ebx ; Size
.text:004032BC                 call    realloc
.text:004032C1                 test    eax, eax
.text:004032C3                 jz      short loc_4032D5
.text:004032C5
.text:004032C5 loc_4032C5:                             ; CODE XREF: sub_403280+57↓j
.text:004032C5                 mov     ebx, [esp+1Ch+var_C]
.text:004032C9                 mov     esi, [esp+1Ch+var_8]
.text:004032CD                 mov     edi, [esp+1Ch+var_4]
.text:004032D1                 add     esp, 1Ch
.text:004032D4                 retn
.text:004032D5 ; ---------------------------------------------------------------------------
.text:004032D5
.text:004032D5 loc_4032D5:                             ; CODE XREF: sub_403280+43↑j
.text:004032D5                 test    ebx, ebx
.text:004032D7                 jz      short loc_4032C5
.text:004032D9
.text:004032D9 loc_4032D9:                             ; CODE XREF: sub_403280+2C↑j
.text:004032D9                 call    sub_403320
.text:004032D9 ; ---------------------------------------------------------------------------
.text:004032DE                 align 10h
.text:004032E0
.text:004032E0 loc_4032E0:                             ; CODE XREF: sub_403280+1F↑j
.text:004032E0                 test    ecx, ecx
.text:004032E2                 jnz     short loc_4032B0
.text:004032E4                 xor     edx, edx
.text:004032E6                 mov     eax, 40h ; '@'
.text:004032EB                 div     ebx
.text:004032ED                 test    eax, eax
.text:004032EF                 mov     ecx, eax
.text:004032F1                 jnz     short loc_4032B0
.text:004032F3                 mov     ecx, 1
.text:004032F8                 jmp     short loc_4032B0
.text:004032F8 sub_403280      endp
.text:004032F8
.text:004032F8 ; ---------------------------------------------------------------------------
.text:004032FA                 align 10h
.text:00403300 aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: sub_403320+3↓o
.text:00403311 ; const char aS_0[]
.text:00403311 aS_0            db '%s',0               ; DATA XREF: sub_403320+10↓o
.text:00403314                 align 10h
.text:00403320
.text:00403320 ; =============== S U B R O U T I N E =======================================
.text:00403320
.text:00403320 ; Attributes: noreturn
.text:00403320
.text:00403320 sub_403320      proc near               ; CODE XREF: sub_402E60:loc_40301F↑p
.text:00403320                                         ; sub_403030:loc_403069↑p ...
.text:00403320
.text:00403320 Code            = dword ptr -1Ch
.text:00403320 ErrorMessage    = dword ptr -18h
.text:00403320 var_14          = dword ptr -14h
.text:00403320 var_10          = byte ptr -10h
.text:00403320
.text:00403320                 sub     esp, 1Ch
.text:00403323                 mov     [esp+1Ch+Code], offset aMemoryExhauste ; "memory exhausted"
.text:0040332A                 call    ds:libintl_gettext
.text:00403330                 mov     [esp+1Ch+var_14], offset aS_0 ; "%s"
.text:00403338                 mov     edx, Code
.text:0040333E                 mov     [esp+1Ch+ErrorMessage], 0 ; ErrorMessage
.text:00403346                 mov     dword ptr [esp+1Ch+var_10], eax ; char
.text:0040334A                 mov     [esp+1Ch+Code], edx ; Code
.text:0040334D                 call    sub_4033B0
.text:00403352                 call    abort
.text:00403352 sub_403320      endp
.text:00403352
.text:00403352 ; ---------------------------------------------------------------------------
.text:00403357                 align 10h
.text:00403360
.text:00403360 ; =============== S U B R O U T I N E =======================================
.text:00403360
.text:00403360 ; Attributes: thunk
.text:00403360
.text:00403360 libintl_bindtextdomain proc near
.text:00403360                 jmp     ds:__imp_libintl_bindtextdomain
.text:00403360 libintl_bindtextdomain endp
.text:00403360
.text:00403360 ; ---------------------------------------------------------------------------
.text:00403366                 align 10h
.text:00403370                 jmp     ds:libintl_textdomain
.text:00403370 ; ---------------------------------------------------------------------------
.text:00403376                 align 10h
.text:00403380                 jmp     ds:libintl_gettext
.text:00403380 ; ---------------------------------------------------------------------------
.text:00403386                 align 10h
.text:00403390 ; const char aS_1[]
.text:00403390 aS_1            db ': %s',0             ; DATA XREF: sub_4033B0+B8↓o
.text:00403390                                         ; sub_4034B4+122↓o
.text:00403395 aUnknownSystemE db 'Unknown system error',0
.text:00403395                                         ; DATA XREF: sub_4033B0:loc_40347D↓o
.text:00403395                                         ; sub_4034B4:loc_4035EE↓o
.text:004033AA ; const char aS_2[]
.text:004033AA aS_2            db '%s: ',0             ; DATA XREF: sub_4033B0:loc_403484↓o
.text:004033AF                 align 10h
.text:004033B0
.text:004033B0 ; =============== S U B R O U T I N E =======================================
.text:004033B0
.text:004033B0
.text:004033B0 ; int __cdecl sub_4033B0(int Code, int ErrorMessage, char *, char)
.text:004033B0 sub_4033B0      proc near               ; CODE XREF: sub_401BB0+86↑p
.text:004033B0                                         ; sub_401BB0+AF↑p ...
.text:004033B0
.text:004033B0 Stream          = dword ptr -1Ch
.text:004033B0 Format          = dword ptr -18h
.text:004033B0 ArgList         = dword ptr -14h
.text:004033B0 Code            = dword ptr  4
.text:004033B0 ErrorMessage    = dword ptr  8
.text:004033B0 arg_8           = dword ptr  0Ch
.text:004033B0 arg_C           = byte ptr  10h
.text:004033B0
.text:004033B0                 push    esi
.text:004033B1                 push    ebx
.text:004033B2                 sub     esp, 14h
.text:004033B5                 mov     edx, ds:_iob
.text:004033BB                 mov     esi, [esp+1Ch+Code]
.text:004033BF                 mov     ebx, [esp+1Ch+ErrorMessage]
.text:004033C3                 add     edx, 20h ; ' '
.text:004033C6                 mov     [esp+1Ch+Stream], edx ; Stream
.text:004033C9                 call    fflush
.text:004033CE                 mov     eax, ds:dword_405180
.text:004033D3                 test    eax, eax
.text:004033D5                 jz      loc_403484
.text:004033DB                 call    eax ; dword_405180
.text:004033DD
.text:004033DD loc_4033DD:                             ; CODE XREF: sub_4033B0+F7↓j
.text:004033DD                 lea     edx, [esp+1Ch+arg_C]
.text:004033E1                 mov     ecx, [esp+1Ch+arg_8]
.text:004033E5                 mov     [esp+1Ch+ArgList], edx ; ArgList
.text:004033E9                 mov     edx, ds:_iob
.text:004033EF                 mov     [esp+1Ch+Format], ecx ; Format
.text:004033F3                 add     edx, 40h ; '@'
.text:004033F6                 mov     [esp+1Ch+Stream], edx ; Stream
.text:004033F9                 call    vfprintf
.text:004033FE                 inc     ds:dword_405190
.text:00403404                 test    ebx, ebx
.text:00403406                 jnz     short loc_403452
.text:00403408
.text:00403408 loc_403408:                             ; CODE XREF: sub_4033B0+CB↓j
.text:00403408                 mov     edx, ds:_iob
.text:0040340E                 lea     ecx, [edx+40h]
.text:00403411                 mov     ebx, [ecx+4]
.text:00403414                 dec     ebx
.text:00403415                 test    ebx, ebx
.text:00403417                 mov     [ecx+4], ebx
.text:0040341A                 js      short loc_403440
.text:0040341C                 mov     ecx, [edx+40h]
.text:0040341F                 mov     byte ptr [ecx], 0Ah
.text:00403422                 inc     dword ptr [edx+40h]
.text:00403425
.text:00403425 loc_403425:                             ; CODE XREF: sub_4033B0+A0↓j
.text:00403425                 mov     edx, ds:_iob
.text:0040342B                 add     edx, 40h ; '@'
.text:0040342E                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00403431                 call    fflush
.text:00403436                 test    esi, esi
.text:00403438                 jnz     short loc_4034AC
.text:0040343A                 add     esp, 14h
.text:0040343D                 pop     ebx
.text:0040343E                 pop     esi
.text:0040343F                 retn
.text:00403440 ; ---------------------------------------------------------------------------
.text:00403440
.text:00403440 loc_403440:                             ; CODE XREF: sub_4033B0+6A↑j
.text:00403440                 mov     [esp+1Ch+Format], ecx ; File
.text:00403444                 mov     [esp+1Ch+Stream], 0Ah ; Ch
.text:0040344B                 call    _flsbuf
.text:00403450                 jmp     short loc_403425
.text:00403452 ; ---------------------------------------------------------------------------
.text:00403452
.text:00403452 loc_403452:                             ; CODE XREF: sub_4033B0+56↑j
.text:00403452                 mov     [esp+1Ch+Stream], ebx ; ErrorMessage
.text:00403455                 call    strerror
.text:0040345A                 test    eax, eax
.text:0040345C                 jz      short loc_40347D
.text:0040345E
.text:0040345E loc_40345E:                             ; CODE XREF: sub_4033B0+D2↓j
.text:0040345E                 mov     [esp+1Ch+ArgList], eax
.text:00403462                 mov     ebx, ds:_iob
.text:00403468                 mov     [esp+1Ch+Format], offset aS_1 ; ": %s"
.text:00403470                 add     ebx, 40h ; '@'
.text:00403473                 mov     [esp+1Ch+Stream], ebx ; Stream
.text:00403476                 call    fprintf
.text:0040347B                 jmp     short loc_403408
.text:0040347D ; ---------------------------------------------------------------------------
.text:0040347D
.text:0040347D loc_40347D:                             ; CODE XREF: sub_4033B0+AC↑j
.text:0040347D                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:00403482                 jmp     short loc_40345E
.text:00403484 ; ---------------------------------------------------------------------------
.text:00403484
.text:00403484 loc_403484:                             ; CODE XREF: sub_4033B0+25↑j
.text:00403484                 mov     [esp+1Ch+Format], offset aS_2 ; "%s: "
.text:0040348C                 mov     edx, ds:_iob
.text:00403492                 mov     ecx, ds:dword_405160
.text:00403498                 add     edx, 40h ; '@'
.text:0040349B                 mov     [esp+1Ch+ArgList], ecx
.text:0040349F                 mov     [esp+1Ch+Stream], edx ; Stream
.text:004034A2                 call    fprintf
.text:004034A7                 jmp     loc_4033DD
.text:004034AC ; ---------------------------------------------------------------------------
.text:004034AC
.text:004034AC loc_4034AC:                             ; CODE XREF: sub_4033B0+88↑j
.text:004034AC                 mov     [esp+1Ch+Stream], esi ; Code
.text:004034AF                 call    exit
.text:004034AF sub_4033B0      endp
.text:004034AF
.text:004034B4
.text:004034B4 ; =============== S U B R O U T I N E =======================================
.text:004034B4
.text:004034B4
.text:004034B4 ; int __cdecl sub_4034B4(int, int Code, int ErrorMessage, char *Str2, int, char *, char)
.text:004034B4 sub_4034B4      proc near               ; DATA XREF: sub_4034B4+77↓o
.text:004034B4
.text:004034B4 Stream          = dword ptr -28h
.text:004034B4 Format          = dword ptr -24h
.text:004034B4 ArgList         = dword ptr -20h
.text:004034B4 var_1C          = dword ptr -1Ch
.text:004034B4 Code            = dword ptr  8
.text:004034B4 ErrorMessage    = dword ptr  0Ch
.text:004034B4 Str2            = dword ptr  10h
.text:004034B4 arg_10          = dword ptr  14h
.text:004034B4 arg_14          = dword ptr  18h
.text:004034B4 arg_18          = byte ptr  1Ch
.text:004034B4
.text:004034B4                 and     eax, 64253A73h
.text:004034B9                 cmp     ah, [eax]
.text:004034BB
.text:004034BB loc_4034BB:                             ; DATA XREF: sub_4034B4:loc_4035F5↓o
.text:004034BB                 add     ds:55003A73h, ah
.text:004034C1                 push    edi
.text:004034C2                 push    esi
.text:004034C3                 push    ebx
.text:004034C4                 sub     esp, 1Ch
.text:004034C7                 mov     edx, ds:dword_4051C0
.text:004034CD                 mov     ebp, [esp+28h+Code]
.text:004034D1                 mov     edi, [esp+28h+ErrorMessage]
.text:004034D5                 test    edx, edx
.text:004034D7                 mov     ebx, [esp+28h+Str2]
.text:004034DB                 mov     esi, [esp+28h+arg_10]
.text:004034DF                 jz      short loc_4034F9
.text:004034E1                 cmp     ds:dword_405150, esi
.text:004034E7                 jz      loc_403620
.text:004034ED
.text:004034ED loc_4034ED:                             ; CODE XREF: sub_4034B4+18D↓j
.text:004034ED                 mov     ds:Str1, ebx
.text:004034F3                 mov     ds:dword_405150, esi
.text:004034F9
.text:004034F9 loc_4034F9:                             ; CODE XREF: sub_4034B4+2B↑j
.text:004034F9                 mov     edx, ds:_iob
.text:004034FF                 add     edx, 20h ; ' '
.text:00403502                 mov     [esp+28h+Stream], edx ; Stream
.text:00403505                 call    fflush
.text:0040350A                 mov     eax, ds:dword_405180
.text:0040350F                 test    eax, eax
.text:00403511                 jz      loc_4035F5
.text:00403517                 call    eax ; dword_405180
.text:00403519
.text:00403519 loc_403519:                             ; CODE XREF: sub_4034B4+164↓j
.text:00403519                 test    ebx, ebx
.text:0040351B                 jz      short loc_40353E
.text:0040351D                 mov     [esp+28h+ArgList], ebx
.text:00403521                 mov     ebx, ds:_iob
.text:00403527                 mov     [esp+28h+var_1C], esi
.text:0040352B                 mov     [esp+28h+Format], offset sub_4034B4 ; Format
.text:00403533                 add     ebx, 40h ; '@'
.text:00403536                 mov     [esp+28h+Stream], ebx ; Stream
.text:00403539                 call    fprintf
.text:0040353E
.text:0040353E loc_40353E:                             ; CODE XREF: sub_4034B4+67↑j
.text:0040353E                 mov     esi, ds:_iob
.text:00403544                 lea     edx, [esp+28h+arg_18]
.text:00403548                 mov     ecx, [esp+28h+arg_14]
.text:0040354C                 mov     [esp+28h+ArgList], edx ; ArgList
.text:00403550                 add     esi, 40h ; '@'
.text:00403553                 mov     [esp+28h+Format], ecx ; Format
.text:00403557                 mov     [esp+28h+Stream], esi ; Stream
.text:0040355A                 call    vfprintf
.text:0040355F                 inc     ds:dword_405190
.text:00403565                 test    edi, edi
.text:00403567                 jnz     short loc_4035C0
.text:00403569
.text:00403569 loc_403569:                             ; CODE XREF: sub_4034B4+135↓j
.text:00403569                 mov     edx, ds:_iob
.text:0040356F                 lea     ecx, [edx+40h]
.text:00403572                 mov     ebx, [ecx+4]
.text:00403575                 dec     ebx
.text:00403576                 test    ebx, ebx
.text:00403578                 mov     [ecx+4], ebx
.text:0040357B                 js      short loc_4035A7
.text:0040357D                 mov     esi, [edx+40h]
.text:00403580                 mov     byte ptr [esi], 0Ah
.text:00403583                 inc     dword ptr [edx+40h]
.text:00403586
.text:00403586 loc_403586:                             ; CODE XREF: sub_4034B4+103↓j
.text:00403586                 mov     ecx, ds:_iob
.text:0040358C                 add     ecx, 40h ; '@'
.text:0040358F                 mov     [esp+28h+Stream], ecx ; Stream
.text:00403592                 call    fflush
.text:00403597                 test    ebp, ebp
.text:00403599                 jnz     loc_403646
.text:0040359F
.text:0040359F loc_40359F:                             ; CODE XREF: sub_4034B4+173↓j
.text:0040359F                                         ; sub_4034B4+187↓j
.text:0040359F                 add     esp, 1Ch
.text:004035A2                 pop     ebx
.text:004035A3                 pop     esi
.text:004035A4                 pop     edi
.text:004035A5                 pop     ebp
.text:004035A6                 retn
.text:004035A7 ; ---------------------------------------------------------------------------
.text:004035A7
.text:004035A7 loc_4035A7:                             ; CODE XREF: sub_4034B4+C7↑j
.text:004035A7                 mov     [esp+28h+Format], ecx ; File
.text:004035AB                 mov     [esp+28h+Stream], 0Ah ; Ch
.text:004035B2                 call    _flsbuf
.text:004035B7                 jmp     short loc_403586
.text:004035B7 ; ---------------------------------------------------------------------------
.text:004035B9                 align 10h
.text:004035C0
.text:004035C0 loc_4035C0:                             ; CODE XREF: sub_4034B4+B3↑j
.text:004035C0                 mov     [esp+28h+Stream], edi ; ErrorMessage
.text:004035C3                 call    strerror
.text:004035C8                 test    eax, eax
.text:004035CA                 jz      short loc_4035EE
.text:004035CC
.text:004035CC loc_4035CC:                             ; CODE XREF: sub_4034B4+13F↓j
.text:004035CC                 mov     [esp+28h+ArgList], eax
.text:004035D0                 mov     edi, ds:_iob
.text:004035D6                 mov     [esp+28h+Format], offset aS_1 ; ": %s"
.text:004035DE                 add     edi, 40h ; '@'
.text:004035E1                 mov     [esp+28h+Stream], edi ; Stream
.text:004035E4                 call    fprintf
.text:004035E9                 jmp     loc_403569
.text:004035EE ; ---------------------------------------------------------------------------
.text:004035EE
.text:004035EE loc_4035EE:                             ; CODE XREF: sub_4034B4+116↑j
.text:004035EE                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:004035F3                 jmp     short loc_4035CC
.text:004035F5 ; ---------------------------------------------------------------------------
.text:004035F5
.text:004035F5 loc_4035F5:                             ; CODE XREF: sub_4034B4+5D↑j
.text:004035F5                 mov     [esp+28h+Format], (offset loc_4034BB+1) ; Format
.text:004035FD                 mov     ecx, ds:_iob
.text:00403603                 mov     edx, ds:dword_405160
.text:00403609                 add     ecx, 40h ; '@'
.text:0040360C                 mov     [esp+28h+ArgList], edx
.text:00403610                 mov     [esp+28h+Stream], ecx ; Stream
.text:00403613                 call    fprintf
.text:00403618                 jmp     loc_403519
.text:00403618 ; ---------------------------------------------------------------------------
.text:0040361D                 align 10h
.text:00403620
.text:00403620 loc_403620:                             ; CODE XREF: sub_4034B4+33↑j
.text:00403620                 mov     eax, ds:Str1
.text:00403625                 cmp     ebx, eax
.text:00403627                 jz      loc_40359F
.text:0040362D                 mov     [esp+28h+Format], ebx ; Str2
.text:00403631                 mov     [esp+28h+Stream], eax ; Str1
.text:00403634                 call    strcmp
.text:00403639                 test    eax, eax
.text:0040363B                 jz      loc_40359F
.text:00403641                 jmp     loc_4034ED
.text:00403646 ; ---------------------------------------------------------------------------
.text:00403646
.text:00403646 loc_403646:                             ; CODE XREF: sub_4034B4+E5↑j
.text:00403646                 mov     [esp+28h+Stream], ebp ; Code
.text:00403649                 call    exit
.text:00403649 sub_4034B4      endp ; sp-analysis failed
.text:00403649
.text:00403649 ; ---------------------------------------------------------------------------
.text:0040364E                 align 10h
.text:00403650
.text:00403650 ; =============== S U B R O U T I N E =======================================
.text:00403650
.text:00403650 ; Attributes: thunk
.text:00403650
.text:00403650 ; size_t __cdecl mbrtowc(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.text:00403650 mbrtowc         proc near               ; CODE XREF: sub_401D20+757↑p
.text:00403650                 jmp     ds:__imp_mbrtowc
.text:00403650 mbrtowc         endp
.text:00403650
.text:00403650 ; ---------------------------------------------------------------------------
.text:00403656                 align 10h
.text:00403660
.text:00403660 ; =============== S U B R O U T I N E =======================================
.text:00403660
.text:00403660 ; Attributes: bp-based frame
.text:00403660
.text:00403660 sub_403660      proc near               ; CODE XREF: sub_401080+C2↑p
.text:00403660                 push    ebp
.text:00403661                 mov     ecx, offset dword_405000
.text:00403666                 cmp     ecx, offset dword_405000
.text:0040366C                 mov     ebp, esp
.text:0040366E                 jnb     short loc_403686
.text:00403670
.text:00403670 loc_403670:                             ; CODE XREF: sub_403660+24↓j
.text:00403670                 mov     edx, [ecx+4]
.text:00403673                 mov     eax, [ecx]
.text:00403675                 add     ecx, 8
.text:00403678                 add     [edx+400000h], eax
.text:0040367E                 cmp     ecx, offset dword_405000
.text:00403684                 jb      short loc_403670
.text:00403686
.text:00403686 loc_403686:                             ; CODE XREF: sub_403660+E↑j
.text:00403686                 pop     ebp
.text:00403687                 retn
.text:00403687 sub_403660      endp
.text:00403687
.text:00403687 ; ---------------------------------------------------------------------------
.text:00403688                 align 10h
.text:00403690
.text:00403690 ; =============== S U B R O U T I N E =======================================
.text:00403690
.text:00403690 ; Attributes: bp-based frame
.text:00403690
.text:00403690 sub_403690      proc near               ; CODE XREF: sub_401080+16↑p
.text:00403690                                         ; TopLevelExceptionFilter+D7↑p
.text:00403690                 push    ebp
.text:00403691                 mov     ebp, esp
.text:00403693                 fninit
.text:00403695                 pop     ebp
.text:00403696                 retn
.text:00403696 sub_403690      endp
.text:00403696
.text:00403696 ; ---------------------------------------------------------------------------
.text:00403697                 align 10h
.text:004036A0
.text:004036A0 ; =============== S U B R O U T I N E =======================================
.text:004036A0
.text:004036A0 ; Attributes: bp-based frame
.text:004036A0
.text:004036A0 ; void __cdecl sub_4036A0()
.text:004036A0 sub_4036A0      proc near               ; DATA XREF: .text:loc_4036E9↓o
.text:004036A0                                         ; sub_403730:loc_40375E↓o
.text:004036A0                 push    ebp
.text:004036A1                 mov     ebp, esp
.text:004036A3                 sub     esp, 8
.text:004036A6                 mov     eax, off_404074
.text:004036AB                 mov     edx, [eax]
.text:004036AD                 test    edx, edx
.text:004036AF                 jnz     short loc_4036B5
.text:004036B1
.text:004036B1 loc_4036B1:                             ; CODE XREF: sub_4036A0+2C↓j
.text:004036B1                 mov     esp, ebp
.text:004036B3                 pop     ebp
.text:004036B4                 retn
.text:004036B5 ; ---------------------------------------------------------------------------
.text:004036B5
.text:004036B5 loc_4036B5:                             ; CODE XREF: sub_4036A0+F↑j
.text:004036B5                                         ; sub_4036A0+2A↓j
.text:004036B5                 call    dword ptr [eax]
.text:004036B7                 mov     edx, off_404074
.text:004036BD                 mov     ecx, [edx+4]
.text:004036C0                 lea     eax, [edx+4]
.text:004036C3                 mov     off_404074, eax
.text:004036C8                 test    ecx, ecx
.text:004036CA                 jnz     short loc_4036B5
.text:004036CC                 jmp     short loc_4036B1
.text:004036CC sub_4036A0      endp
.text:004036CC
.text:004036CC ; ---------------------------------------------------------------------------
.text:004036CE                 align 10h
.text:004036D0                 push    ebp
.text:004036D1                 mov     ebp, esp
.text:004036D3                 sub     esp, 8
.text:004036D6                 mov     [ebp-4], ebx
.text:004036D9                 mov     eax, ds:dword_4039C0
.text:004036DE                 cmp     eax, 0FFFFFFFFh
.text:004036E1                 jz      short loc_40370C
.text:004036E3
.text:004036E3 loc_4036E3:                             ; CODE XREF: .text:00403716↓j
.text:004036E3                                         ; .text:00403729↓j
.text:004036E3                 test    eax, eax
.text:004036E5                 mov     ebx, eax
.text:004036E7                 jnz     short loc_403700
.text:004036E9
.text:004036E9 loc_4036E9:                             ; CODE XREF: .text:0040370A↓j
.text:004036E9                 mov     dword ptr [esp], offset sub_4036A0
.text:004036F0                 call    sub_401040
.text:004036F5                 mov     ebx, [ebp-4]
.text:004036F8                 mov     esp, ebp
.text:004036FA                 pop     ebp
.text:004036FB                 retn
.text:004036FB ; ---------------------------------------------------------------------------
.text:004036FC                 align 10h
.text:00403700
.text:00403700 loc_403700:                             ; CODE XREF: .text:004036E7↑j
.text:00403700                                         ; .text:00403708↓j
.text:00403700                 call    ds:dword_4039C0[ebx*4]
.text:00403707                 dec     ebx
.text:00403708                 jnz     short loc_403700
.text:0040370A                 jmp     short loc_4036E9
.text:0040370C ; ---------------------------------------------------------------------------
.text:0040370C
.text:0040370C loc_40370C:                             ; CODE XREF: .text:004036E1↑j
.text:0040370C                 mov     ecx, ds:dword_4039C4
.text:00403712                 xor     eax, eax
.text:00403714                 test    ecx, ecx
.text:00403716                 jz      short loc_4036E3
.text:00403718                 mov     edx, offset dword_4039C0
.text:0040371D                 lea     esi, [esi+0]
.text:00403720
.text:00403720 loc_403720:                             ; CODE XREF: .text:00403727↓j
.text:00403720                 inc     eax
.text:00403721                 mov     ecx, [edx+eax*4+4]
.text:00403725                 test    ecx, ecx
.text:00403727                 jnz     short loc_403720
.text:00403729                 jmp     short loc_4036E3
.text:00403729 ; ---------------------------------------------------------------------------
.text:0040372B                 align 10h
.text:00403730
.text:00403730 ; =============== S U B R O U T I N E =======================================
.text:00403730
.text:00403730 ; Attributes: bp-based frame
.text:00403730
.text:00403730 sub_403730      proc near               ; CODE XREF: sub_401470+16↑p
.text:00403730
.text:00403730 var_8           = dword ptr -8
.text:00403730 var_4           = dword ptr -4
.text:00403730
.text:00403730                 push    ebp
.text:00403731                 mov     ebp, esp
.text:00403733                 sub     esp, 8
.text:00403736                 mov     [ebp+var_4], ebx
.text:00403739                 mov     edx, dword_404070
.text:0040373F                 test    edx, edx
.text:00403741                 jnz     short loc_40376A
.text:00403743                 mov     eax, ds:dword_4039C0
.text:00403748                 mov     edx, 1
.text:0040374D                 mov     dword_404070, edx
.text:00403753                 cmp     eax, 0FFFFFFFFh
.text:00403756                 jz      short loc_40377D
.text:00403758
.text:00403758 loc_403758:                             ; CODE XREF: sub_403730+57↓j
.text:00403758                                         ; sub_403730+69↓j
.text:00403758                 test    eax, eax
.text:0040375A                 mov     ebx, eax
.text:0040375C                 jnz     short loc_403771
.text:0040375E
.text:0040375E loc_40375E:                             ; CODE XREF: sub_403730+4B↓j
.text:0040375E                 mov     [esp+8+var_8], offset sub_4036A0 ; void (__cdecl *)()
.text:00403765                 call    sub_401040
.text:0040376A
.text:0040376A loc_40376A:                             ; CODE XREF: sub_403730+11↑j
.text:0040376A                 mov     ebx, [ebp+var_4]
.text:0040376D                 mov     esp, ebp
.text:0040376F                 pop     ebp
.text:00403770                 retn
.text:00403771 ; ---------------------------------------------------------------------------
.text:00403771
.text:00403771 loc_403771:                             ; CODE XREF: sub_403730+2C↑j
.text:00403771                                         ; sub_403730+49↓j
.text:00403771                 call    ds:dword_4039C0[ebx*4]
.text:00403778                 dec     ebx
.text:00403779                 jnz     short loc_403771
.text:0040377B                 jmp     short loc_40375E
.text:0040377D ; ---------------------------------------------------------------------------
.text:0040377D
.text:0040377D loc_40377D:                             ; CODE XREF: sub_403730+26↑j
.text:0040377D                 mov     ecx, ds:dword_4039C4
.text:00403783                 xor     eax, eax
.text:00403785                 test    ecx, ecx
.text:00403787                 jz      short loc_403758
.text:00403789                 mov     edx, offset dword_4039C0
.text:0040378E                 mov     esi, esi
.text:00403790
.text:00403790 loc_403790:                             ; CODE XREF: sub_403730+67↓j
.text:00403790                 inc     eax
.text:00403791                 mov     ebx, [edx+eax*4+4]
.text:00403795                 test    ebx, ebx
.text:00403797                 jnz     short loc_403790
.text:00403799                 jmp     short loc_403758
.text:00403799 sub_403730      endp
.text:00403799
.text:00403799 ; ---------------------------------------------------------------------------
.text:0040379B                 align 10h
.text:004037A0
.text:004037A0 ; =============== S U B R O U T I N E =======================================
.text:004037A0
.text:004037A0 ; Attributes: info_from_lumina
.text:004037A0
.text:004037A0 ; void *__cdecl _alloca(size_t Size)
.text:004037A0 __alloca        proc near               ; CODE XREF: sub_401470+11↑p
.text:004037A0                 push    ecx
.text:004037A1                 mov     ecx, esp
.text:004037A3                 add     ecx, 8
.text:004037A6
.text:004037A6 loc_4037A6:                             ; CODE XREF: __alloca+1B↓j
.text:004037A6                 cmp     eax, 1000h
.text:004037AB                 jb      short loc_4037BD
.text:004037AD                 sub     ecx, 1000h
.text:004037B3                 or      dword ptr [ecx], 0
.text:004037B6                 sub     eax, 1000h
.text:004037BB                 jmp     short loc_4037A6
.text:004037BD ; ---------------------------------------------------------------------------
.text:004037BD
.text:004037BD loc_4037BD:                             ; CODE XREF: __alloca+B↑j
.text:004037BD                 sub     ecx, eax
.text:004037BF                 or      dword ptr [ecx], 0
.text:004037C2                 mov     eax, esp
.text:004037C4                 mov     esp, ecx
.text:004037C6                 mov     ecx, [eax]
.text:004037C8                 mov     eax, [eax+4]
.text:004037CB                 jmp     eax
.text:004037CB __alloca        endp
.text:004037CB
.text:004037CB ; ---------------------------------------------------------------------------
.text:004037CD                 align 10h
.text:004037D0                 jmp     ds:__set_app_type
.text:004037D0 ; ---------------------------------------------------------------------------
.text:004037D6                 align 10h
.text:004037E0
.text:004037E0 ; =============== S U B R O U T I N E =======================================
.text:004037E0
.text:004037E0 ; Attributes: thunk
.text:004037E0
.text:004037E0 ; void __cdecl cexit()
.text:004037E0 _cexit          proc near               ; CODE XREF: .text:0040116C↑p
.text:004037E0                 jmp     ds:__imp__cexit
.text:004037E0 _cexit          endp
.text:004037E0
.text:004037E0 ; ---------------------------------------------------------------------------
.text:004037E6                 align 10h
.text:004037F0
.text:004037F0 ; =============== S U B R O U T I N E =======================================
.text:004037F0
.text:004037F0 ; Attributes: thunk
.text:004037F0
.text:004037F0 ; char ***__cdecl _p__environ()
.text:004037F0 __p__environ    proc near               ; CODE XREF: sub_401080+C7↑p
.text:004037F0                 jmp     ds:__imp___p__environ
.text:004037F0 __p__environ    endp
.text:004037F0
.text:004037F0 ; ---------------------------------------------------------------------------
.text:004037F6                 align 10h
.text:00403800
.text:00403800 ; =============== S U B R O U T I N E =======================================
.text:00403800
.text:00403800 ; Attributes: thunk
.text:00403800
.text:00403800 ; _crt_signal_t __cdecl signal(int Signal, _crt_signal_t Function)
.text:00403800 signal          proc near               ; CODE XREF: TopLevelExceptionFilter+4D↑p
.text:00403800                                         ; TopLevelExceptionFilter+88↑p ...
.text:00403800
.text:00403800 Signal          = dword ptr  4
.text:00403800 Function        = dword ptr  8
.text:00403800
.text:00403800                 jmp     ds:__imp_signal
.text:00403800 signal          endp
.text:00403800
.text:00403800 ; ---------------------------------------------------------------------------
.text:00403806                 align 10h
.text:00403810
.text:00403810 ; =============== S U B R O U T I N E =======================================
.text:00403810
.text:00403810 ; Attributes: thunk
.text:00403810
.text:00403810 ; int *__cdecl _p__fmode()
.text:00403810 __p__fmode      proc near               ; CODE XREF: sub_401080:loc_401135↑p
.text:00403810                 jmp     ds:__imp___p__fmode
.text:00403810 __p__fmode      endp
.text:00403810
.text:00403810 ; ---------------------------------------------------------------------------
.text:00403816                 align 10h
.text:00403820
.text:00403820 ; =============== S U B R O U T I N E =======================================
.text:00403820
.text:00403820 ; Attributes: thunk
.text:00403820
.text:00403820 ; int __cdecl setmode(int FileHandle, int Mode)
.text:00403820 _setmode        proc near               ; CODE XREF: sub_401080+70↑p
.text:00403820                                         ; sub_401080+90↑p ...
.text:00403820
.text:00403820 FileHandle      = dword ptr  4
.text:00403820 Mode            = dword ptr  8
.text:00403820
.text:00403820                 jmp     ds:__imp__setmode
.text:00403820 _setmode        endp
.text:00403820
.text:00403820 ; ---------------------------------------------------------------------------
.text:00403826                 align 10h
.text:00403830
.text:00403830 ; =============== S U B R O U T I N E =======================================
.text:00403830
.text:00403830 ; Attributes: thunk
.text:00403830
.text:00403830 __getmainargs   proc near               ; CODE XREF: sub_401080+49↑p
.text:00403830                 jmp     ds:__imp___getmainargs
.text:00403830 __getmainargs   endp
.text:00403830
.text:00403830 ; ---------------------------------------------------------------------------
.text:00403836                 align 10h
.text:00403840
.text:00403840 ; =============== S U B R O U T I N E =======================================
.text:00403840
.text:00403840 ; Attributes: thunk
.text:00403840
.text:00403840 ; char *__cdecl setlocale(int Category, const char *Locale)
.text:00403840 setlocale       proc near               ; CODE XREF: sub_401470+32↑p
.text:00403840
.text:00403840 Category        = dword ptr  4
.text:00403840 Locale          = dword ptr  8
.text:00403840
.text:00403840                 jmp     ds:__imp_setlocale
.text:00403840 setlocale       endp
.text:00403840
.text:00403840 ; ---------------------------------------------------------------------------
.text:00403846                 align 10h
.text:00403850
.text:00403850 ; =============== S U B R O U T I N E =======================================
.text:00403850
.text:00403850 ; Attributes: noreturn thunk
.text:00403850
.text:00403850 ; void __cdecl __noreturn exit(int Code)
.text:00403850 exit            proc near               ; CODE XREF: sub_401470+97↑p
.text:00403850                                         ; .text:0040166E↑p ...
.text:00403850
.text:00403850 Code            = dword ptr  4
.text:00403850
.text:00403850                 jmp     ds:__imp_exit
.text:00403850 exit            endp
.text:00403850
.text:00403850 ; ---------------------------------------------------------------------------
.text:00403856                 align 10h
.text:00403860
.text:00403860 ; =============== S U B R O U T I N E =======================================
.text:00403860
.text:00403860 ; Attributes: thunk
.text:00403860
.text:00403860 ; int __cdecl fputs(const char *Buffer, FILE *Stream)
.text:00403860 fputs           proc near               ; CODE XREF: sub_401470+11B↑p
.text:00403860                                         ; sub_401470+13D↑p ...
.text:00403860
.text:00403860 Buffer          = dword ptr  4
.text:00403860 Stream          = dword ptr  8
.text:00403860
.text:00403860                 jmp     ds:__imp_fputs
.text:00403860 fputs           endp
.text:00403860
.text:00403860 ; ---------------------------------------------------------------------------
.text:00403866                 align 10h
.text:00403870
.text:00403870 ; =============== S U B R O U T I N E =======================================
.text:00403870
.text:00403870 ; Attributes: thunk
.text:00403870
.text:00403870 ; int printf(const char *const Format, ...)
.text:00403870 printf          proc near               ; CODE XREF: sub_401470+F9↑p
.text:00403870                                         ; sub_401470+15A↑p ...
.text:00403870
.text:00403870 Format          = dword ptr  4
.text:00403870
.text:00403870                 jmp     ds:__imp_printf
.text:00403870 printf          endp
.text:00403870
.text:00403870 ; ---------------------------------------------------------------------------
.text:00403876                 align 10h
.text:00403880
.text:00403880 ; =============== S U B R O U T I N E =======================================
.text:00403880
.text:00403880 ; Attributes: thunk
.text:00403880
.text:00403880 ; int __cdecl vfprintf(FILE *const Stream, const char *const Format, va_list ArgList)
.text:00403880 vfprintf        proc near               ; CODE XREF: sub_401970+C1↑p
.text:00403880                                         ; sub_4033B0+49↑p ...
.text:00403880
.text:00403880 Stream          = dword ptr  4
.text:00403880 Format          = dword ptr  8
.text:00403880 ArgList         = dword ptr  0Ch
.text:00403880
.text:00403880                 jmp     ds:__imp_vfprintf
.text:00403880 vfprintf        endp
.text:00403880
.text:00403880 ; ---------------------------------------------------------------------------
.text:00403886                 align 10h
.text:00403890
.text:00403890 ; =============== S U B R O U T I N E =======================================
.text:00403890
.text:00403890 ; Attributes: noreturn thunk
.text:00403890
.text:00403890 ; void __cdecl __noreturn abort()
.text:00403890 abort           proc near               ; CODE XREF: sub_401970:loc_401A0C↑p
.text:00403890                                         ; sub_402E60:loc_40301A↑p ...
.text:00403890                 jmp     ds:__imp_abort
.text:00403890 abort           endp
.text:00403890
.text:00403890 ; ---------------------------------------------------------------------------
.text:00403896                 align 10h
.text:004038A0
.text:004038A0 ; =============== S U B R O U T I N E =======================================
.text:004038A0
.text:004038A0 ; Attributes: thunk
.text:004038A0
.text:004038A0 ; int fprintf(FILE *const Stream, const char *const Format, ...)
.text:004038A0 fprintf         proc near               ; CODE XREF: sub_401970+5F↑p
.text:004038A0                                         ; sub_401970+1C4↑p ...
.text:004038A0
.text:004038A0 Stream          = dword ptr  4
.text:004038A0 Format          = dword ptr  8
.text:004038A0
.text:004038A0                 jmp     ds:__imp_fprintf
.text:004038A0 fprintf         endp
.text:004038A0
.text:004038A0 ; ---------------------------------------------------------------------------
.text:004038A6                 align 10h
.text:004038B0
.text:004038B0 ; =============== S U B R O U T I N E =======================================
.text:004038B0
.text:004038B0 ; Attributes: thunk
.text:004038B0
.text:004038B0 ; int __cdecl flsbuf(int Ch, FILE *File)
.text:004038B0 _flsbuf         proc near               ; CODE XREF: sub_401970+128↑p
.text:004038B0                                         ; sub_401970+13A↑p ...
.text:004038B0
.text:004038B0 File            = dword ptr  8
.text:004038B0
.text:004038B0                 jmp     ds:__imp__flsbuf
.text:004038B0 _flsbuf         endp
.text:004038B0
.text:004038B0 ; ---------------------------------------------------------------------------
.text:004038B6                 align 10h
.text:004038C0
.text:004038C0 ; =============== S U B R O U T I N E =======================================
.text:004038C0
.text:004038C0 ; Attributes: thunk
.text:004038C0
.text:004038C0 ; int *__cdecl errno()
.text:004038C0 _errno          proc near               ; CODE XREF: sub_401BB0:loc_401BED↑p
.text:004038C0                                         ; .text:0040278B↑p ...
.text:004038C0                 jmp     ds:__imp__errno
.text:004038C0 _errno          endp
.text:004038C0
.text:004038C0 ; ---------------------------------------------------------------------------
.text:004038C6                 align 10h
.text:004038D0
.text:004038D0 ; =============== S U B R O U T I N E =======================================
.text:004038D0
.text:004038D0 ; Attributes: thunk
.text:004038D0
.text:004038D0 ; int __cdecl fclose(FILE *Stream)
.text:004038D0 fclose          proc near               ; CODE XREF: sub_401BB0+27↑p
.text:004038D0
.text:004038D0 Stream          = dword ptr  4
.text:004038D0
.text:004038D0                 jmp     ds:__imp_fclose
.text:004038D0 fclose          endp
.text:004038D0
.text:004038D0 ; ---------------------------------------------------------------------------
.text:004038D6                 align 10h
.text:004038E0
.text:004038E0 ; =============== S U B R O U T I N E =======================================
.text:004038E0
.text:004038E0 ; Attributes: thunk
.text:004038E0
.text:004038E0 ; void __cdecl free(void *Block)
.text:004038E0 free            proc near               ; CODE XREF: sub_402E60+112↑p
.text:004038E0
.text:004038E0 Block           = dword ptr  4
.text:004038E0
.text:004038E0                 jmp     ds:__imp_free
.text:004038E0 free            endp
.text:004038E0
.text:004038E0 ; ---------------------------------------------------------------------------
.text:004038E6                 align 10h
.text:004038F0
.text:004038F0 ; =============== S U B R O U T I N E =======================================
.text:004038F0
.text:004038F0 ; Attributes: thunk
.text:004038F0
.text:004038F0 ; size_t __cdecl strlen(const char *Str)
.text:004038F0 strlen          proc near               ; CODE XREF: sub_401D20+8C3↑p
.text:004038F0                                         ; sub_401D20+A24↑p ...
.text:004038F0
.text:004038F0 Str             = dword ptr  4
.text:004038F0
.text:004038F0                 jmp     ds:__imp_strlen
.text:004038F0 strlen          endp
.text:004038F0
.text:004038F0 ; ---------------------------------------------------------------------------
.text:004038F6                 align 10h
.text:00403900
.text:00403900 ; =============== S U B R O U T I N E =======================================
.text:00403900
.text:00403900 ; Attributes: thunk
.text:00403900
.text:00403900 ; int __cdecl iswctype(wint_t C, wctype_t Type)
.text:00403900 iswctype        proc near               ; CODE XREF: sub_401D20+78B↑p
.text:00403900
.text:00403900 C               = word ptr  4
.text:00403900 Type            = word ptr  8
.text:00403900
.text:00403900                 jmp     ds:__imp_iswctype
.text:00403900 iswctype        endp
.text:00403900
.text:00403900 ; ---------------------------------------------------------------------------
.text:00403906                 align 10h
.text:00403910
.text:00403910 ; =============== S U B R O U T I N E =======================================
.text:00403910
.text:00403910 ; Attributes: thunk
.text:00403910
.text:00403910 ; int __cdecl isctype(int C, int Type)
.text:00403910 _isctype        proc near               ; CODE XREF: sub_401D20+610↑p
.text:00403910
.text:00403910 C               = dword ptr  4
.text:00403910 Type            = dword ptr  8
.text:00403910
.text:00403910                 jmp     ds:__imp__isctype
.text:00403910 _isctype        endp
.text:00403910
.text:00403910 ; ---------------------------------------------------------------------------
.text:00403916                 align 10h
.text:00403920
.text:00403920 ; =============== S U B R O U T I N E =======================================
.text:00403920
.text:00403920 ; Attributes: thunk
.text:00403920
.text:00403920 ; void *__cdecl memcpy(void *, const void *Src, size_t Size)
.text:00403920 memcpy          proc near               ; CODE XREF: .text:00403218↑p
.text:00403920                                         ; .text:00403261↑p
.text:00403920
.text:00403920 Src             = dword ptr  8
.text:00403920 Size            = dword ptr  0Ch
.text:00403920
.text:00403920                 jmp     ds:__imp_memcpy
.text:00403920 memcpy          endp
.text:00403920
.text:00403920 ; ---------------------------------------------------------------------------
.text:00403926                 align 10h
.text:00403930
.text:00403930 ; =============== S U B R O U T I N E =======================================
.text:00403930
.text:00403930 ; Attributes: thunk
.text:00403930
.text:00403930 ; void *__cdecl memset(void *, int Val, size_t Size)
.text:00403930 memset          proc near               ; CODE XREF: .text:00403196↑p
.text:00403930
.text:00403930 Val             = dword ptr  8
.text:00403930 Size            = dword ptr  0Ch
.text:00403930
.text:00403930                 jmp     ds:__imp_memset
.text:00403930 memset          endp
.text:00403930
.text:00403930 ; ---------------------------------------------------------------------------
.text:00403936                 align 10h
.text:00403940
.text:00403940 ; =============== S U B R O U T I N E =======================================
.text:00403940
.text:00403940 ; Attributes: thunk
.text:00403940
.text:00403940 ; void *__cdecl calloc(size_t Count, size_t Size)
.text:00403940 calloc          proc near               ; CODE XREF: .text:004031D3↑p
.text:00403940
.text:00403940 Count           = dword ptr  4
.text:00403940 Size            = dword ptr  8
.text:00403940
.text:00403940                 jmp     ds:__imp_calloc
.text:00403940 calloc          endp
.text:00403940
.text:00403940 ; ---------------------------------------------------------------------------
.text:00403946                 align 10h
.text:00403950
.text:00403950 ; =============== S U B R O U T I N E =======================================
.text:00403950
.text:00403950 ; Attributes: thunk
.text:00403950
.text:00403950 ; void *__cdecl realloc(void *Block, size_t Size)
.text:00403950 realloc         proc near               ; CODE XREF: .text:004030D0↑p
.text:00403950                                         ; sub_403100+16↑p ...
.text:00403950
.text:00403950 Block           = dword ptr  4
.text:00403950 Size            = dword ptr  8
.text:00403950
.text:00403950                 jmp     ds:__imp_realloc
.text:00403950 realloc         endp
.text:00403950
.text:00403950 ; ---------------------------------------------------------------------------
.text:00403956                 align 10h
.text:00403960
.text:00403960 ; =============== S U B R O U T I N E =======================================
.text:00403960
.text:00403960 ; Attributes: thunk
.text:00403960
.text:00403960 ; void *__cdecl malloc(size_t Size)
.text:00403960 malloc          proc near               ; CODE XREF: sub_403030+24↑p
.text:00403960                                         ; sub_403070+E↑p ...
.text:00403960
.text:00403960 Size            = dword ptr  4
.text:00403960
.text:00403960                 jmp     ds:__imp_malloc
.text:00403960 malloc          endp
.text:00403960
.text:00403960 ; ---------------------------------------------------------------------------
.text:00403966                 align 10h
.text:00403970
.text:00403970 ; =============== S U B R O U T I N E =======================================
.text:00403970
.text:00403970 ; Attributes: thunk
.text:00403970
.text:00403970 ; int __cdecl strcmp(const char *Str1, const char *Str2)
.text:00403970 strcmp          proc near               ; CODE XREF: sub_4034B4+180↑p
.text:00403970
.text:00403970 Str1            = dword ptr  4
.text:00403970 Str2            = dword ptr  8
.text:00403970
.text:00403970                 jmp     ds:__imp_strcmp
.text:00403970 strcmp          endp
.text:00403970
.text:00403970 ; ---------------------------------------------------------------------------
.text:00403976                 align 10h
.text:00403980
.text:00403980 ; =============== S U B R O U T I N E =======================================
.text:00403980
.text:00403980 ; Attributes: thunk
.text:00403980
.text:00403980 ; int __cdecl fflush(FILE *Stream)
.text:00403980 fflush          proc near               ; CODE XREF: sub_4033B0+19↑p
.text:00403980                                         ; sub_4033B0+81↑p ...
.text:00403980
.text:00403980 Stream          = dword ptr  4
.text:00403980
.text:00403980                 jmp     ds:__imp_fflush
.text:00403980 fflush          endp
.text:00403980
.text:00403980 ; ---------------------------------------------------------------------------
.text:00403986                 align 10h
.text:00403990
.text:00403990 ; =============== S U B R O U T I N E =======================================
.text:00403990
.text:00403990 ; Attributes: thunk
.text:00403990
.text:00403990 ; char *__cdecl strerror(int ErrorMessage)
.text:00403990 strerror        proc near               ; CODE XREF: sub_4033B0+A5↑p
.text:00403990                                         ; sub_4034B4+10F↑p
.text:00403990
.text:00403990 ErrorMessage    = dword ptr  4
.text:00403990
.text:00403990                 jmp     ds:__imp_strerror
.text:00403990 strerror        endp
.text:00403990
.text:00403990 ; ---------------------------------------------------------------------------
.text:00403996                 align 10h
.text:004039A0
.text:004039A0 ; =============== S U B R O U T I N E =======================================
.text:004039A0
.text:004039A0 ; Attributes: thunk
.text:004039A0
.text:004039A0 ; LPTOP_LEVEL_EXCEPTION_FILTER __stdcall SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.text:004039A0 SetUnhandledExceptionFilter proc near   ; CODE XREF: sub_401080+E↑p
.text:004039A0
.text:004039A0 lpTopLevelExceptionFilter= dword ptr  4
.text:004039A0
.text:004039A0                 jmp     ds:__imp_SetUnhandledExceptionFilter
.text:004039A0 SetUnhandledExceptionFilter endp
.text:004039A0
.text:004039A0 ; ---------------------------------------------------------------------------
.text:004039A6                 align 10h
.text:004039B0
.text:004039B0 ; =============== S U B R O U T I N E =======================================
.text:004039B0
.text:004039B0 ; Attributes: noreturn thunk
.text:004039B0
.text:004039B0 ; void __stdcall __noreturn ExitProcess(UINT uExitCode)
.text:004039B0 ExitProcess     proc near               ; CODE XREF: .text:00401174↑p
.text:004039B0
.text:004039B0 uExitCode       = dword ptr  4
.text:004039B0
.text:004039B0                 jmp     ds:__imp_ExitProcess
.text:004039B0 ExitProcess     endp
.text:004039B0
.text:004039B0 ; ---------------------------------------------------------------------------
.text:004039B6                 align 10h
.text:004039C0 dword_4039C0    dd 0FFFFFFFFh           ; DATA XREF: .text:004036D9↑r
.text:004039C0                                         ; .text:loc_403700↑r ...
.text:004039C4 dword_4039C4    dd 0                    ; DATA XREF: .text:loc_40370C↑r
.text:004039C4                                         ; sub_403730:loc_40377D↑r
.text:004039C8                 dd 0FFFFFFFFh
.text:004039CC dword_4039CC    dd 0Dh dup(0)           ; DATA XREF: .data:off_404074↓o
.text:00403A00                 dd 180h dup(?)
.text:00403A00 _text           ends
.text:00403A00
.data:00404000 ; Section 2. (virtual address 00004000)
.data:00404000 ; Virtual size                  : 00000090 (    144.)
.data:00404000 ; Section size in file          : 00000200 (    512.)
.data:00404000 ; Offset to raw data for section: 00002E00
.data:00404000 ; Flags C0000040: Data Readable Writable
.data:00404000 ; Alignment     : default
.data:00404000 ; ===========================================================================
.data:00404000
.data:00404000 ; Segment type: Pure data
.data:00404000 ; Segment permissions: Read/Write
.data:00404000 _data           segment para public 'DATA' use32
.data:00404000                 assume cs:_data
.data:00404000                 ;org 404000h
.data:00404000 dword_404000    dd 0                    ; DATA XREF: sub_401080+1B↑o
.data:00404000                                         ; sub_401080+CC↑r
.data:00404004 dword_404004    dd 0                    ; DATA XREF: sub_401080+41↑o
.data:00404004                                         ; sub_401080+D4↑r
.data:00404008                 align 10h
.data:00404010 ; char *Buffer
.data:00404010 Buffer          dd offset aCopyrightC2005
.data:00404010                                         ; DATA XREF: sub_401970+DC↑r
.data:00404010                                         ; "Copyright (C) 2005 Free Software Founda"...
.data:00404014                 align 10h
.data:00404020 ; int Code
.data:00404020 Code            dd 1                    ; DATA XREF: sub_401BB0+6D↑r
.data:00404020                                         ; sub_401BB0+9A↑r ...
.data:00404024                 align 10h
.data:00404030 dword_404030    dd 1                    ; DATA XREF: sub_402E60+22↑r
.data:00404030                                         ; sub_402E60+65↑r ...
.data:00404034 dword_404034    dd 100h                 ; DATA XREF: sub_402E60+3F↑o
.data:00404034                                         ; sub_402E60+1A2↑r ...
.data:00404038 off_404038      dd offset unk_405010    ; DATA XREF: sub_402E60+1AA↑r
.data:0040403C ; void *off_40403C
.data:0040403C off_40403C      dd offset dword_404034  ; DATA XREF: sub_402E60+39↑r
.data:0040403C                                         ; sub_402E60+60↑w ...
.data:00404040 dword_404040    dd 0FFFFFFFFh           ; DATA XREF: sub_401080+22↑r
.data:00404044                 align 10h
.data:00404050 ; int Mode
.data:00404050 Mode            dd 0                    ; DATA XREF: sub_401080+4E↑r
.data:00404050                                         ; sub_401080+80↑r ...
.data:00404054                 align 10h
.data:00404060 dword_404060    dd 4000h                ; DATA XREF: sub_401080+57↑w
.data:00404060                                         ; sub_401080+BA↑r
.data:00404064                 align 10h
.data:00404070 dword_404070    dd 0                    ; DATA XREF: sub_403730+9↑r
.data:00404070                                         ; sub_403730+1D↑w
.data:00404074 off_404074      dd offset dword_4039CC  ; DATA XREF: sub_4036A0+6↑r
.data:00404074                                         ; sub_4036A0+17↑r ...
.data:00404078                 align 1000h
.data:00404078 _data           ends
.data:00404078
.bss:00405000 ; Section 3. (virtual address 00005000)
.bss:00405000 ; Virtual size                  : 000001F0 (    496.)
.bss:00405000 ; Section size in file          : 00000000 (      0.)
.bss:00405000 ; Offset to raw data for section: 00000000
.bss:00405000 ; Flags C0000080: Bss Readable Writable
.bss:00405000 ; Alignment     : default
.bss:00405000 ; ===========================================================================
.bss:00405000
.bss:00405000 ; Segment type: Uninitialized
.bss:00405000 ; Segment permissions: Read/Write
.bss:00405000 _bss            segment para public 'BSS' use32
.bss:00405000                 assume cs:_bss
.bss:00405000                 ;org 405000h
.bss:00405000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00405000 ; char *dword_405000
.bss:00405000 dword_405000    dd ?                    ; DATA XREF: .text:00401B84↑w
.bss:00405000                                         ; sub_401BB0+58↑r ...
.bss:00405004                 align 10h
.bss:00405010 unk_405010      db    ? ;               ; DATA XREF: sub_402E60+100↑o
.bss:00405010                                         ; .data:off_404038↑o
.bss:00405011                 db    ? ;
.bss:00405012                 db    ? ;
.bss:00405013                 db    ? ;
.bss:00405014                 db    ? ;
.bss:00405015                 db    ? ;
.bss:00405016                 db    ? ;
.bss:00405017                 db    ? ;
.bss:00405018                 db    ? ;
.bss:00405019                 db    ? ;
.bss:0040501A                 db    ? ;
.bss:0040501B                 db    ? ;
.bss:0040501C                 db    ? ;
.bss:0040501D                 db    ? ;
.bss:0040501E                 db    ? ;
.bss:0040501F                 db    ? ;
.bss:00405020                 db    ? ;
.bss:00405021                 db    ? ;
.bss:00405022                 db    ? ;
.bss:00405023                 db    ? ;
.bss:00405024                 db    ? ;
.bss:00405025                 db    ? ;
.bss:00405026                 db    ? ;
.bss:00405027                 db    ? ;
.bss:00405028                 db    ? ;
.bss:00405029                 db    ? ;
.bss:0040502A                 db    ? ;
.bss:0040502B                 db    ? ;
.bss:0040502C                 db    ? ;
.bss:0040502D                 db    ? ;
.bss:0040502E                 db    ? ;
.bss:0040502F                 db    ? ;
.bss:00405030                 db    ? ;
.bss:00405031                 db    ? ;
.bss:00405032                 db    ? ;
.bss:00405033                 db    ? ;
.bss:00405034                 db    ? ;
.bss:00405035                 db    ? ;
.bss:00405036                 db    ? ;
.bss:00405037                 db    ? ;
.bss:00405038                 db    ? ;
.bss:00405039                 db    ? ;
.bss:0040503A                 db    ? ;
.bss:0040503B                 db    ? ;
.bss:0040503C                 db    ? ;
.bss:0040503D                 db    ? ;
.bss:0040503E                 db    ? ;
.bss:0040503F                 db    ? ;
.bss:00405040                 db    ? ;
.bss:00405041                 db    ? ;
.bss:00405042                 db    ? ;
.bss:00405043                 db    ? ;
.bss:00405044                 db    ? ;
.bss:00405045                 db    ? ;
.bss:00405046                 db    ? ;
.bss:00405047                 db    ? ;
.bss:00405048                 db    ? ;
.bss:00405049                 db    ? ;
.bss:0040504A                 db    ? ;
.bss:0040504B                 db    ? ;
.bss:0040504C                 db    ? ;
.bss:0040504D                 db    ? ;
.bss:0040504E                 db    ? ;
.bss:0040504F                 db    ? ;
.bss:00405050                 db    ? ;
.bss:00405051                 db    ? ;
.bss:00405052                 db    ? ;
.bss:00405053                 db    ? ;
.bss:00405054                 db    ? ;
.bss:00405055                 db    ? ;
.bss:00405056                 db    ? ;
.bss:00405057                 db    ? ;
.bss:00405058                 db    ? ;
.bss:00405059                 db    ? ;
.bss:0040505A                 db    ? ;
.bss:0040505B                 db    ? ;
.bss:0040505C                 db    ? ;
.bss:0040505D                 db    ? ;
.bss:0040505E                 db    ? ;
.bss:0040505F                 db    ? ;
.bss:00405060                 db    ? ;
.bss:00405061                 db    ? ;
.bss:00405062                 db    ? ;
.bss:00405063                 db    ? ;
.bss:00405064                 db    ? ;
.bss:00405065                 db    ? ;
.bss:00405066                 db    ? ;
.bss:00405067                 db    ? ;
.bss:00405068                 db    ? ;
.bss:00405069                 db    ? ;
.bss:0040506A                 db    ? ;
.bss:0040506B                 db    ? ;
.bss:0040506C                 db    ? ;
.bss:0040506D                 db    ? ;
.bss:0040506E                 db    ? ;
.bss:0040506F                 db    ? ;
.bss:00405070                 db    ? ;
.bss:00405071                 db    ? ;
.bss:00405072                 db    ? ;
.bss:00405073                 db    ? ;
.bss:00405074                 db    ? ;
.bss:00405075                 db    ? ;
.bss:00405076                 db    ? ;
.bss:00405077                 db    ? ;
.bss:00405078                 db    ? ;
.bss:00405079                 db    ? ;
.bss:0040507A                 db    ? ;
.bss:0040507B                 db    ? ;
.bss:0040507C                 db    ? ;
.bss:0040507D                 db    ? ;
.bss:0040507E                 db    ? ;
.bss:0040507F                 db    ? ;
.bss:00405080                 db    ? ;
.bss:00405081                 db    ? ;
.bss:00405082                 db    ? ;
.bss:00405083                 db    ? ;
.bss:00405084                 db    ? ;
.bss:00405085                 db    ? ;
.bss:00405086                 db    ? ;
.bss:00405087                 db    ? ;
.bss:00405088                 db    ? ;
.bss:00405089                 db    ? ;
.bss:0040508A                 db    ? ;
.bss:0040508B                 db    ? ;
.bss:0040508C                 db    ? ;
.bss:0040508D                 db    ? ;
.bss:0040508E                 db    ? ;
.bss:0040508F                 db    ? ;
.bss:00405090                 db    ? ;
.bss:00405091                 db    ? ;
.bss:00405092                 db    ? ;
.bss:00405093                 db    ? ;
.bss:00405094                 db    ? ;
.bss:00405095                 db    ? ;
.bss:00405096                 db    ? ;
.bss:00405097                 db    ? ;
.bss:00405098                 db    ? ;
.bss:00405099                 db    ? ;
.bss:0040509A                 db    ? ;
.bss:0040509B                 db    ? ;
.bss:0040509C                 db    ? ;
.bss:0040509D                 db    ? ;
.bss:0040509E                 db    ? ;
.bss:0040509F                 db    ? ;
.bss:004050A0                 db    ? ;
.bss:004050A1                 db    ? ;
.bss:004050A2                 db    ? ;
.bss:004050A3                 db    ? ;
.bss:004050A4                 db    ? ;
.bss:004050A5                 db    ? ;
.bss:004050A6                 db    ? ;
.bss:004050A7                 db    ? ;
.bss:004050A8                 db    ? ;
.bss:004050A9                 db    ? ;
.bss:004050AA                 db    ? ;
.bss:004050AB                 db    ? ;
.bss:004050AC                 db    ? ;
.bss:004050AD                 db    ? ;
.bss:004050AE                 db    ? ;
.bss:004050AF                 db    ? ;
.bss:004050B0                 db    ? ;
.bss:004050B1                 db    ? ;
.bss:004050B2                 db    ? ;
.bss:004050B3                 db    ? ;
.bss:004050B4                 db    ? ;
.bss:004050B5                 db    ? ;
.bss:004050B6                 db    ? ;
.bss:004050B7                 db    ? ;
.bss:004050B8                 db    ? ;
.bss:004050B9                 db    ? ;
.bss:004050BA                 db    ? ;
.bss:004050BB                 db    ? ;
.bss:004050BC                 db    ? ;
.bss:004050BD                 db    ? ;
.bss:004050BE                 db    ? ;
.bss:004050BF                 db    ? ;
.bss:004050C0                 db    ? ;
.bss:004050C1                 db    ? ;
.bss:004050C2                 db    ? ;
.bss:004050C3                 db    ? ;
.bss:004050C4                 db    ? ;
.bss:004050C5                 db    ? ;
.bss:004050C6                 db    ? ;
.bss:004050C7                 db    ? ;
.bss:004050C8                 db    ? ;
.bss:004050C9                 db    ? ;
.bss:004050CA                 db    ? ;
.bss:004050CB                 db    ? ;
.bss:004050CC                 db    ? ;
.bss:004050CD                 db    ? ;
.bss:004050CE                 db    ? ;
.bss:004050CF                 db    ? ;
.bss:004050D0                 db    ? ;
.bss:004050D1                 db    ? ;
.bss:004050D2                 db    ? ;
.bss:004050D3                 db    ? ;
.bss:004050D4                 db    ? ;
.bss:004050D5                 db    ? ;
.bss:004050D6                 db    ? ;
.bss:004050D7                 db    ? ;
.bss:004050D8                 db    ? ;
.bss:004050D9                 db    ? ;
.bss:004050DA                 db    ? ;
.bss:004050DB                 db    ? ;
.bss:004050DC                 db    ? ;
.bss:004050DD                 db    ? ;
.bss:004050DE                 db    ? ;
.bss:004050DF                 db    ? ;
.bss:004050E0                 db    ? ;
.bss:004050E1                 db    ? ;
.bss:004050E2                 db    ? ;
.bss:004050E3                 db    ? ;
.bss:004050E4                 db    ? ;
.bss:004050E5                 db    ? ;
.bss:004050E6                 db    ? ;
.bss:004050E7                 db    ? ;
.bss:004050E8                 db    ? ;
.bss:004050E9                 db    ? ;
.bss:004050EA                 db    ? ;
.bss:004050EB                 db    ? ;
.bss:004050EC                 db    ? ;
.bss:004050ED                 db    ? ;
.bss:004050EE                 db    ? ;
.bss:004050EF                 db    ? ;
.bss:004050F0                 db    ? ;
.bss:004050F1                 db    ? ;
.bss:004050F2                 db    ? ;
.bss:004050F3                 db    ? ;
.bss:004050F4                 db    ? ;
.bss:004050F5                 db    ? ;
.bss:004050F6                 db    ? ;
.bss:004050F7                 db    ? ;
.bss:004050F8                 db    ? ;
.bss:004050F9                 db    ? ;
.bss:004050FA                 db    ? ;
.bss:004050FB                 db    ? ;
.bss:004050FC                 db    ? ;
.bss:004050FD                 db    ? ;
.bss:004050FE                 db    ? ;
.bss:004050FF                 db    ? ;
.bss:00405100                 db    ? ;
.bss:00405101                 db    ? ;
.bss:00405102                 db    ? ;
.bss:00405103                 db    ? ;
.bss:00405104                 db    ? ;
.bss:00405105                 db    ? ;
.bss:00405106                 db    ? ;
.bss:00405107                 db    ? ;
.bss:00405108                 db    ? ;
.bss:00405109                 db    ? ;
.bss:0040510A                 db    ? ;
.bss:0040510B                 db    ? ;
.bss:0040510C                 db    ? ;
.bss:0040510D                 db    ? ;
.bss:0040510E                 db    ? ;
.bss:0040510F                 db    ? ;
.bss:00405110 dword_405110    dd ?                    ; DATA XREF: .text:loc_4027F1↑o
.bss:00405110                                         ; .text:loc_402810↑o ...
.bss:00405114 dword_405114    dd ?                    ; DATA XREF: .text:loc_402890↑o
.bss:00405114                                         ; .text:00402D18↑r ...
.bss:00405118 dword_405118    dd ?                    ; DATA XREF: .text:00402D12↑r
.bss:00405118                                         ; sub_402DC0+2C↑r
.bss:0040511C dword_40511C    dd ?                    ; DATA XREF: .text:00402D06↑r
.bss:0040511C                                         ; sub_402DC0+22↑r
.bss:00405120 dword_405120    dd ?                    ; DATA XREF: .text:00402D22↑r
.bss:00405120                                         ; sub_402DC0+36↑r
.bss:00405124 dword_405124    dd ?                    ; DATA XREF: .text:00402D32↑r
.bss:00405124                                         ; sub_402DC0+4E↑r
.bss:00405128 dword_405128    dd ?                    ; DATA XREF: .text:00402D4F↑r
.bss:00405128                                         ; sub_402DC0+62↑r
.bss:0040512C dword_40512C    dd ?                    ; DATA XREF: .text:00402D45↑r
.bss:0040512C                                         ; sub_402DC0+70↑r
.bss:00405130 dword_405130    dd ?                    ; DATA XREF: .text:00402D28↑r
.bss:00405130                                         ; sub_402DC0+7A↑r
.bss:00405134                 align 10h
.bss:00405140 ; char *Str1
.bss:00405140 Str1            dd ?                    ; DATA XREF: sub_4034B4:loc_4034ED↑w
.bss:00405140                                         ; sub_4034B4:loc_403620↑r
.bss:00405144                 align 10h
.bss:00405150 dword_405150    dd ?                    ; DATA XREF: sub_4034B4+2D↑r
.bss:00405150                                         ; sub_4034B4+3F↑w
.bss:00405154                 align 10h
.bss:00405160 dword_405160    dd ?                    ; DATA XREF: sub_401470+2C↑w
.bss:00405160                                         ; sub_401470+E8↑r ...
.bss:00405164                 align 20h
.bss:00405180 dword_405180    dd ?                    ; CODE XREF: sub_4034B4+63↑p
.bss:00405180                                         ; DATA XREF: sub_4033B0+1E↑r ...
.bss:00405184                 align 10h
.bss:00405190 dword_405190    dd ?                    ; DATA XREF: sub_4033B0+4E↑w
.bss:00405190                                         ; sub_4034B4+AB↑w
.bss:00405194                 align 40h
.bss:004051C0 dword_4051C0    dd ?                    ; DATA XREF: sub_4034B4+13↑r
.bss:004051C4                 align 1000h
.bss:004051C4 _bss            ends
.bss:004051C4
.idata:00406000 ; Section 4. (virtual address 00006000)
.idata:00406000 ; Virtual size                  : 000004DC (   1244.)
.idata:00406000 ; Section size in file          : 00000600 (   1536.)
.idata:00406000 ; Offset to raw data for section: 00003000
.idata:00406000 ; Flags C0000040: Data Readable Writable
.idata:00406000 ; Alignment     : default
.idata:00406000 ; ===========================================================================
.idata:00406000
.idata:00406000 ; Segment type: Externs
.idata:00406000 ; _idata
.idata:00406000
.idata:00406001
.idata:00406128 ;
.idata:00406128 ; Imports from libintl3.dll
.idata:00406128 ;
.idata:00406128                 extrn __imp_libintl_bindtextdomain:dword
.idata:00406128                                         ; CODE XREF: sub_401470+46↑p
.idata:00406128                                         ; DATA XREF: sub_401470+46↑r ...
.idata:0040612C                 extrn libintl_gettext:dword
.idata:0040612C                                         ; CODE XREF: sub_401470+E2↑p
.idata:0040612C                                         ; sub_401470+105↑p ...
.idata:00406130                 extrn libintl_textdomain:dword
.idata:00406130                                         ; CODE XREF: sub_401470+53↑p
.idata:00406130                                         ; DATA XREF: sub_401470+53↑r ...
.idata:00406134
.idata:0040613C ;
.idata:0040613C ; Imports from KERNEL32.dll
.idata:0040613C ;
.idata:0040613C ; void (__stdcall __noreturn *ExitProcess)(UINT uExitCode)
.idata:0040613C                 extrn __imp_ExitProcess:dword
.idata:0040613C                                         ; DATA XREF: ExitProcess↑r
.idata:00406140 ; LPTOP_LEVEL_EXCEPTION_FILTER (__stdcall *SetUnhandledExceptionFilter)(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.idata:00406140                 extrn __imp_SetUnhandledExceptionFilter:dword
.idata:00406140                                         ; DATA XREF: SetUnhandledExceptionFilter↑r
.idata:00406144
.idata:0040614C ;
.idata:0040614C ; Imports from MSVCP60.DLL
.idata:0040614C ;
.idata:0040614C ; size_t (__cdecl *mbrtowc)(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.idata:0040614C                 extrn __imp_mbrtowc:dword
.idata:0040614C                                         ; DATA XREF: mbrtowc↑r
.idata:00406150
.idata:00406158 ;
.idata:00406158 ; Imports from msvcrt.dll
.idata:00406158 ;
.idata:00406158                 extrn __imp___getmainargs:dword
.idata:00406158                                         ; DATA XREF: __getmainargs↑r
.idata:0040615C ; int _mb_cur_max
.idata:0040615C                 extrn __mb_cur_max:dword
.idata:0040615C                                         ; DATA XREF: sub_401D20+7↑r
.idata:0040615C                                         ; sub_401D20+5F3↑r
.idata:00406160 ; char ***(__cdecl *__p__environ)()
.idata:00406160                 extrn __imp___p__environ:dword
.idata:00406160                                         ; DATA XREF: __p__environ↑r
.idata:00406164 ; int *(__cdecl *__p__fmode)()
.idata:00406164                 extrn __imp___p__fmode:dword
.idata:00406164                                         ; DATA XREF: __p__fmode↑r
.idata:00406168 ; void (__cdecl *_set_app_type)(_crt_app_type Type)
.idata:00406168                 extrn __set_app_type:dword
.idata:00406168                                         ; CODE XREF: start+D↑p
.idata:00406168                                         ; .text:0040102D↑p
.idata:00406168                                         ; DATA XREF: ...
.idata:0040616C ; void (__cdecl *_cexit)()
.idata:0040616C                 extrn __imp__cexit:dword
.idata:0040616C                                         ; DATA XREF: _cexit↑r
.idata:00406170 ; int *(__cdecl *_errno)()
.idata:00406170                 extrn __imp__errno:dword
.idata:00406170                                         ; DATA XREF: _errno↑r
.idata:00406174 ; int (__cdecl *_flsbuf)(int Ch, FILE *File)
.idata:00406174                 extrn __imp__flsbuf:dword
.idata:00406174                                         ; DATA XREF: _flsbuf↑r
.idata:00406178 ; FILE iob[]
.idata:00406178                 extrn _iob:dword        ; DATA XREF: sub_401080+5C↑r
.idata:00406178                                         ; sub_401080+75↑r ...
.idata:0040617C ; int (__cdecl *_isctype)(int C, int Type)
.idata:0040617C                 extrn __imp__isctype:dword
.idata:0040617C                                         ; DATA XREF: _isctype↑r
.idata:00406180 ; _onexit_t (__cdecl *onexit)(_onexit_t Func)
.idata:00406180                 extrn _onexit:dword     ; CODE XREF: .text:0040106C↑p
.idata:00406180                                         ; DATA XREF: .text:0040106C↑r
.idata:00406184 ; const unsigned __int16 *pctype
.idata:00406184                 extrn _pctype:dword     ; DATA XREF: sub_401D20:loc_402414↑r
.idata:00406188 ; int (__cdecl *_setmode)(int FileHandle, int Mode)
.idata:00406188                 extrn __imp__setmode:dword
.idata:00406188                                         ; DATA XREF: _setmode↑r
.idata:0040618C ; void (__cdecl __noreturn *abort)()
.idata:0040618C                 extrn __imp_abort:dword ; DATA XREF: abort↑r
.idata:00406190 ; int (__cdecl *atexit)(void (__cdecl *)())
.idata:00406190                 extrn atexit:dword      ; CODE XREF: sub_401040+C↑p
.idata:00406190                                         ; DATA XREF: sub_401040+C↑r
.idata:00406194 ; void *(__cdecl *calloc)(size_t Count, size_t Size)
.idata:00406194                 extrn __imp_calloc:dword
.idata:00406194                                         ; DATA XREF: calloc↑r
.idata:00406198 ; void (__cdecl __noreturn *exit)(int Code)
.idata:00406198                 extrn __imp_exit:dword  ; DATA XREF: exit↑r
.idata:0040619C ; int (__cdecl *fclose)(FILE *Stream)
.idata:0040619C                 extrn __imp_fclose:dword
.idata:0040619C                                         ; DATA XREF: fclose↑r
.idata:004061A0 ; int (__cdecl *fflush)(FILE *Stream)
.idata:004061A0                 extrn __imp_fflush:dword
.idata:004061A0                                         ; DATA XREF: fflush↑r
.idata:004061A4 ; int (*fprintf)(FILE *const Stream, const char *const Format, ...)
.idata:004061A4                 extrn __imp_fprintf:dword
.idata:004061A4                                         ; DATA XREF: fprintf↑r
.idata:004061A8 ; int (__cdecl *fputs)(const char *Buffer, FILE *Stream)
.idata:004061A8                 extrn __imp_fputs:dword ; DATA XREF: fputs↑r
.idata:004061AC ; void (__cdecl *free)(void *Block)
.idata:004061AC                 extrn __imp_free:dword  ; DATA XREF: free↑r
.idata:004061B0 ; int (__cdecl *iswctype)(wint_t C, wctype_t Type)
.idata:004061B0                 extrn __imp_iswctype:dword
.idata:004061B0                                         ; DATA XREF: iswctype↑r
.idata:004061B4 ; void *(__cdecl *malloc)(size_t Size)
.idata:004061B4                 extrn __imp_malloc:dword
.idata:004061B4                                         ; DATA XREF: malloc↑r
.idata:004061B8 ; void *(__cdecl *memcpy)(void *, const void *Src, size_t Size)
.idata:004061B8                 extrn __imp_memcpy:dword
.idata:004061B8                                         ; DATA XREF: memcpy↑r
.idata:004061BC ; void *(__cdecl *memset)(void *, int Val, size_t Size)
.idata:004061BC                 extrn __imp_memset:dword
.idata:004061BC                                         ; DATA XREF: memset↑r
.idata:004061C0 ; int (*printf)(const char *const Format, ...)
.idata:004061C0                 extrn __imp_printf:dword
.idata:004061C0                                         ; DATA XREF: printf↑r
.idata:004061C4 ; void *(__cdecl *realloc)(void *Block, size_t Size)
.idata:004061C4                 extrn __imp_realloc:dword
.idata:004061C4                                         ; DATA XREF: realloc↑r
.idata:004061C8 ; char *(__cdecl *setlocale)(int Category, const char *Locale)
.idata:004061C8                 extrn __imp_setlocale:dword
.idata:004061C8                                         ; DATA XREF: setlocale↑r
.idata:004061CC ; _crt_signal_t (__cdecl *signal)(int Signal, _crt_signal_t Function)
.idata:004061CC                 extrn __imp_signal:dword
.idata:004061CC                                         ; DATA XREF: signal↑r
.idata:004061D0 ; int (__cdecl *strcmp)(const char *Str1, const char *Str2)
.idata:004061D0                 extrn __imp_strcmp:dword
.idata:004061D0                                         ; DATA XREF: strcmp↑r
.idata:004061D4 ; char *(__cdecl *strerror)(int ErrorMessage)
.idata:004061D4                 extrn __imp_strerror:dword
.idata:004061D4                                         ; DATA XREF: strerror↑r
.idata:004061D8 ; size_t (__cdecl *strlen)(const char *Str)
.idata:004061D8                 extrn __imp_strlen:dword
.idata:004061D8                                         ; DATA XREF: strlen↑r
.idata:004061DC ; int (__cdecl *vfprintf)(FILE *const Stream, const char *const Format, va_list ArgList)
.idata:004061DC                 extrn __imp_vfprintf:dword
.idata:004061DC                                         ; DATA XREF: vfprintf↑r
.idata:004061E0
.idata:004061E0
.idata:004061E0
.idata:004061E0                 end start
