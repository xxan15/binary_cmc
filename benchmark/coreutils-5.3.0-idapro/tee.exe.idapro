.text:00401000 ;
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
.text:00401000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
.text:00401000 ; |                      License info: 48-357D-7BC4-C6                      |
.text:00401000 ; |                              Virginia Tech                              |
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ;
.text:00401000 ; Input SHA256 : 68E89F9EB1249E4EAF330C60D5284C1F647705EF5DFB5CE3CEAFC39FA45E5766
.text:00401000 ; Input MD5    : 1DCEF1B8DE588A89B7C57E981A79C421
.text:00401000 ; Input CRC32  : 4DC90635
.text:00401000
.text:00401000 ; File Name   : /home/cindy/Documents/Projects/binary_cmc/benchmark/coreutils-5.3.0-bin/bin/tee.exe
.text:00401000 ; Format      : Portable executable for 80386 (PE)
.text:00401000 ; Imagebase   : 400000
.text:00401000 ; Timestamp   : 4266A270 (Wed Apr 20 18:41:52 2005)
.text:00401000 ; Section 1. (virtual address 00001000)
.text:00401000 ; Virtual size                  : 000042A0 (  17056.)
.text:00401000 ; Section size in file          : 00004400 (  17408.)
.text:00401000 ; Offset to raw data for section: 00000400
.text:00401000 ; Flags 60000020: Text Executable Readable
.text:00401000 ; Alignment     : default
.text:00401000
.text:00401000                 .686p
.text:00401000                 .mmx
.text:00401000                 .model flat
.text:00401000
.text:00401000 ; ===========================================================================
.text:00401000
.text:00401000 ; Segment type: Pure code
.text:00401000 ; Segment permissions: Read/Execute
.text:00401000 _text           segment para public 'CODE' use32
.text:00401000                 assume cs:_text
.text:00401000                 ;org 401000h
.text:00401000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00401000
.text:00401000 ; =============== S U B R O U T I N E =======================================
.text:00401000
.text:00401000 ; Attributes: noreturn bp-based frame
.text:00401000
.text:00401000                 public start
.text:00401000 start           proc near
.text:00401000
.text:00401000 Type            = dword ptr -8
.text:00401000
.text:00401000                 push    ebp
.text:00401001                 mov     ebp, esp
.text:00401003                 sub     esp, 8
.text:00401006                 mov     [esp+8+Type], 1 ; Type
.text:0040100D                 call    ds:__set_app_type
.text:00401013                 call    sub_401080
.text:00401013 start           endp
.text:00401013
.text:00401018 ; ---------------------------------------------------------------------------
.text:00401018                 mov     esp, ebp
.text:0040101A                 xor     eax, eax
.text:0040101C                 pop     ebp
.text:0040101D                 retn
.text:0040101D ; ---------------------------------------------------------------------------
.text:0040101E                 align 10h
.text:00401020                 push    ebp
.text:00401021                 mov     ebp, esp
.text:00401023                 sub     esp, 8
.text:00401026                 mov     dword ptr [esp], 2
.text:0040102D                 call    ds:__set_app_type
.text:00401033                 call    sub_401080
.text:00401038 ; ---------------------------------------------------------------------------
.text:00401038                 mov     esp, ebp
.text:0040103A                 xor     eax, eax
.text:0040103C                 pop     ebp
.text:0040103D                 retn
.text:0040103D ; ---------------------------------------------------------------------------
.text:0040103E                 align 10h
.text:00401040
.text:00401040 ; =============== S U B R O U T I N E =======================================
.text:00401040
.text:00401040 ; Attributes: bp-based frame
.text:00401040
.text:00401040 ; int __cdecl sub_401040(void (__cdecl *)())
.text:00401040 sub_401040      proc near               ; CODE XREF: sub_4015D0+62↓p
.text:00401040                                         ; .text:00404F30↓p ...
.text:00401040
.text:00401040 var_8           = dword ptr -8
.text:00401040 arg_0           = dword ptr  8
.text:00401040
.text:00401040                 push    ebp
.text:00401041                 mov     ebp, esp
.text:00401043                 sub     esp, 8
.text:00401046                 mov     edx, [ebp+arg_0]
.text:00401049                 mov     [esp+8+var_8], edx ; void (__cdecl *)()
.text:0040104C                 call    ds:atexit
.text:00401052                 mov     esp, ebp
.text:00401054                 pop     ebp
.text:00401055                 retn
.text:00401055 sub_401040      endp
.text:00401055
.text:00401055 ; ---------------------------------------------------------------------------
.text:00401056                 align 10h
.text:00401060                 push    ebp
.text:00401061                 mov     ebp, esp
.text:00401063                 sub     esp, 8
.text:00401066                 mov     edx, [ebp+8]
.text:00401069                 mov     [esp], edx
.text:0040106C                 call    ds:_onexit
.text:00401072                 mov     esp, ebp
.text:00401074                 pop     ebp
.text:00401075                 retn
.text:00401075 ; ---------------------------------------------------------------------------
.text:00401076                 align 10h
.text:00401080
.text:00401080 ; =============== S U B R O U T I N E =======================================
.text:00401080
.text:00401080 ; Attributes: noreturn bp-based frame
.text:00401080
.text:00401080 sub_401080      proc near               ; CODE XREF: start+13↑p
.text:00401080                                         ; .text:00401033↑p
.text:00401080
.text:00401080 lpTopLevelExceptionFilter= dword ptr -28h
.text:00401080 Mode            = dword ptr -24h
.text:00401080 var_20          = dword ptr -20h
.text:00401080 var_1C          = dword ptr -1Ch
.text:00401080 var_18          = dword ptr -18h
.text:00401080 var_C           = byte ptr -0Ch
.text:00401080 var_8           = dword ptr -8
.text:00401080
.text:00401080                 push    ebp
.text:00401081                 mov     ebp, esp
.text:00401083                 push    ebx
.text:00401084                 sub     esp, 24h
.text:00401087                 mov     [esp+28h+lpTopLevelExceptionFilter], offset TopLevelExceptionFilter ; lpTopLevelExceptionFilter
.text:0040108E                 call    SetUnhandledExceptionFilter
.text:00401093                 sub     esp, 4
.text:00401096                 call    sub_404ED0
.text:0040109B                 mov     [esp+28h+lpTopLevelExceptionFilter], offset dword_406000
.text:004010A2                 mov     edx, dword_406050
.text:004010A8                 lea     ecx, [ebp+var_8]
.text:004010AB                 mov     [ebp+var_8], 0
.text:004010B2                 mov     [esp+28h+var_18], ecx
.text:004010B6                 mov     [esp+28h+var_1C], edx
.text:004010BA                 lea     edx, [ebp+var_C]
.text:004010BD                 mov     [esp+28h+var_20], edx
.text:004010C1                 mov     [esp+28h+Mode], offset dword_406004
.text:004010C9                 call    __getmainargs
.text:004010CE                 mov     eax, Mode
.text:004010D3                 test    eax, eax
.text:004010D5                 jz      short loc_401135
.text:004010D7                 mov     dword_406070, eax
.text:004010DC                 mov     edx, ds:_iob
.text:004010E2                 test    edx, edx
.text:004010E4                 jz      short loc_4010FB
.text:004010E6                 mov     [esp+28h+Mode], eax ; Mode
.text:004010EA                 mov     ebx, [edx+10h]
.text:004010ED                 mov     [esp+28h+lpTopLevelExceptionFilter], ebx ; FileHandle
.text:004010F0                 call    _setmode
.text:004010F5                 mov     edx, ds:_iob
.text:004010FB
.text:004010FB loc_4010FB:                             ; CODE XREF: sub_401080+64↑j
.text:004010FB                 cmp     edx, 0FFFFFFE0h
.text:004010FE                 jz      short loc_40111B
.text:00401100                 mov     ebx, Mode
.text:00401106                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040110A                 mov     ecx, [edx+30h]
.text:0040110D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401110                 call    _setmode
.text:00401115                 mov     edx, ds:_iob
.text:0040111B
.text:0040111B loc_40111B:                             ; CODE XREF: sub_401080+7E↑j
.text:0040111B                 cmp     edx, 0FFFFFFC0h
.text:0040111E                 jz      short loc_401135
.text:00401120                 mov     ebx, Mode
.text:00401126                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040112A                 mov     ecx, [edx+50h]
.text:0040112D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401130                 call    _setmode
.text:00401135
.text:00401135 loc_401135:                             ; CODE XREF: sub_401080+55↑j
.text:00401135                                         ; sub_401080+9E↑j
.text:00401135                 call    __p__fmode
.text:0040113A                 mov     ecx, dword_406070
.text:00401140                 mov     [eax], ecx
.text:00401142                 call    sub_404EA0
.text:00401147                 call    __p__environ
.text:0040114C                 mov     edx, dword_406000
.text:00401152                 mov     ebx, [eax]
.text:00401154                 mov     ecx, dword_406004
.text:0040115A                 mov     [esp+28h+lpTopLevelExceptionFilter], edx
.text:0040115D                 mov     [esp+28h+var_20], ebx
.text:00401161                 mov     [esp+28h+Mode], ecx
.text:00401165                 call    sub_4015D0
.text:00401165 sub_401080      endp
.text:00401165
.text:0040116A ; ---------------------------------------------------------------------------
.text:0040116A                 mov     ebx, eax
.text:0040116C                 call    _cexit
.text:00401171                 mov     [esp], ebx
.text:00401174                 call    ExitProcess
.text:00401174 ; ---------------------------------------------------------------------------
.text:00401179                 align 10h
.text:00401180
.text:00401180 ; =============== S U B R O U T I N E =======================================
.text:00401180
.text:00401180 ; Attributes: bp-based frame
.text:00401180
.text:00401180 ; LONG __stdcall TopLevelExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo)
.text:00401180 TopLevelExceptionFilter proc near       ; DATA XREF: sub_401080+7↑o
.text:00401180
.text:00401180 Signal          = dword ptr -18h
.text:00401180 Function        = dword ptr -14h
.text:00401180 var_8           = dword ptr -8
.text:00401180 var_4           = dword ptr -4
.text:00401180 ExceptionInfo   = dword ptr  8
.text:00401180
.text:00401180                 push    ebp
.text:00401181                 mov     ebp, esp
.text:00401183                 sub     esp, 18h
.text:00401186                 mov     [ebp+var_8], ebx
.text:00401189                 mov     ecx, [ebp+ExceptionInfo]
.text:0040118C                 xor     ebx, ebx
.text:0040118E                 mov     [ebp+var_4], esi
.text:00401191                 xor     esi, esi
.text:00401193                 mov     edx, [ecx]
.text:00401195                 mov     eax, [edx]
.text:00401197                 cmp     eax, 0C0000091h
.text:0040119C                 ja      loc_401260
.text:004011A2                 cmp     eax, 0C000008Dh
.text:004011A7                 jnb     short loc_401210
.text:004011A9                 cmp     eax, 0C0000005h
.text:004011AE                 jz      short loc_4011BE
.text:004011B0
.text:004011B0 loc_4011B0:                             ; CODE XREF: TopLevelExceptionFilter+59↓j
.text:004011B0                                         ; TopLevelExceptionFilter+77↓j ...
.text:004011B0                 mov     eax, ebx
.text:004011B2                 mov     esi, [ebp+var_4]
.text:004011B5                 mov     ebx, [ebp+var_8]
.text:004011B8                 mov     esp, ebp
.text:004011BA                 pop     ebp
.text:004011BB                 retn    4
.text:004011BE ; ---------------------------------------------------------------------------
.text:004011BE
.text:004011BE loc_4011BE:                             ; CODE XREF: TopLevelExceptionFilter+2E↑j
.text:004011BE                 mov     [esp+18h+Function], 0 ; Function
.text:004011C6                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:004011CD                 call    signal
.text:004011D2                 cmp     eax, 1
.text:004011D5                 jz      short loc_4011F9
.text:004011D7                 test    eax, eax
.text:004011D9                 jz      short loc_4011B0
.text:004011DB                 mov     [esp+18h+Signal], 0Bh
.text:004011E2                 lea     esi, [esi+0]
.text:004011E9                 lea     edi, [edi+0]
.text:004011F0
.text:004011F0 loc_4011F0:                             ; CODE XREF: TopLevelExceptionFilter+BD↓j
.text:004011F0                 call    eax
.text:004011F2
.text:004011F2 loc_4011F2:                             ; CODE XREF: TopLevelExceptionFilter+8D↓j
.text:004011F2                                         ; TopLevelExceptionFilter+D5↓j ...
.text:004011F2                 mov     ebx, 0FFFFFFFFh
.text:004011F7                 jmp     short loc_4011B0
.text:004011F9 ; ---------------------------------------------------------------------------
.text:004011F9
.text:004011F9 loc_4011F9:                             ; CODE XREF: TopLevelExceptionFilter+55↑j
.text:004011F9                 mov     [esp+18h+Function], 1 ; Function
.text:00401201                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:00401208                 call    signal
.text:0040120D                 jmp     short loc_4011F2
.text:0040120D ; ---------------------------------------------------------------------------
.text:0040120F                 align 10h
.text:00401210
.text:00401210 loc_401210:                             ; CODE XREF: TopLevelExceptionFilter+27↑j
.text:00401210                                         ; TopLevelExceptionFilter+E5↓j
.text:00401210                 mov     esi, 1
.text:00401215
.text:00401215 loc_401215:                             ; CODE XREF: TopLevelExceptionFilter+EC↓j
.text:00401215                 mov     [esp+18h+Function], 0 ; Function
.text:0040121D                 mov     [esp+18h+Signal], 8 ; Signal
.text:00401224                 call    signal
.text:00401229                 cmp     eax, 1
.text:0040122C                 jz      short loc_40123F
.text:0040122E                 test    eax, eax
.text:00401230                 jz      loc_4011B0
.text:00401236                 mov     [esp+18h+Signal], 8
.text:0040123D                 jmp     short loc_4011F0
.text:0040123F ; ---------------------------------------------------------------------------
.text:0040123F
.text:0040123F loc_40123F:                             ; CODE XREF: TopLevelExceptionFilter+AC↑j
.text:0040123F                 mov     [esp+18h+Function], 1 ; Function
.text:00401247                 mov     [esp+18h+Signal], 8 ; Signal
.text:0040124E                 call    signal
.text:00401253                 test    esi, esi
.text:00401255                 jz      short loc_4011F2
.text:00401257                 call    sub_404ED0
.text:0040125C                 jmp     short loc_4011F2
.text:0040125C ; ---------------------------------------------------------------------------
.text:0040125E                 align 10h
.text:00401260
.text:00401260 loc_401260:                             ; CODE XREF: TopLevelExceptionFilter+1C↑j
.text:00401260                 cmp     eax, 0C0000093h
.text:00401265                 jz      short loc_401210
.text:00401267                 cmp     eax, 0C0000094h
.text:0040126C                 jz      short loc_401215
.text:0040126E                 jmp     loc_4011B0
.text:0040126E TopLevelExceptionFilter endp
.text:0040126E
.text:0040126E ; ---------------------------------------------------------------------------
.text:00401273                 align 10h
.text:00401280 aAppend         db 'append',0           ; DATA XREF: .text:off_4012C0↓o
.text:00401287 aIgnoreInterrup db 'ignore-interrupts',0
.text:00401287                                         ; DATA XREF: .text:004012D0↓o
.text:00401299 aHelp           db 'help',0             ; DATA XREF: .text:004012E0↓o
.text:0040129E aVersion        db 'version',0          ; DATA XREF: .text:004012F0↓o
.text:004012A6                 align 20h
.text:004012C0 off_4012C0      dd offset aAppend       ; DATA XREF: sub_4015D0+88↓o
.text:004012C0                                         ; "append"
.text:004012C4                 dd 2 dup(0)
.text:004012CC                 dd 61h
.text:004012D0                 dd offset aIgnoreInterrup ; "ignore-interrupts"
.text:004012D4                 dd 2 dup(0)
.text:004012DC                 dd 69h
.text:004012E0                 dd offset aHelp         ; "help"
.text:004012E4                 dd 2 dup(0)
.text:004012EC                 dd 0FFFFFF7Eh
.text:004012F0                 dd offset aVersion      ; "version"
.text:004012F4                 dd 2 dup(0)
.text:004012FC                 dd 0FFFFFF7Dh, 4 dup(0)
.text:00401310 ; const char Locale
.text:00401310 Locale          db 0                    ; DATA XREF: sub_4015D0+1F↓o
.text:00401311                 db 0EBh, 0Dh, 90h
.text:00401314                 align 10h
.text:00401320 aCProgra1Coreut db 'c:/progra~1/CoreUtils/share/locale',0
.text:00401320                                         ; DATA XREF: sub_4015D0+39↓o
.text:00401343 aCoreutils      db 'coreutils',0        ; DATA XREF: sub_4015D0+41↓o
.text:00401343                                         ; sub_4015D0+4E↓o
.text:0040134D ; const char aAi[]
.text:0040134D aAi             db 'ai',0               ; DATA XREF: sub_4015D0+90↓o
.text:00401350                 align 20h
.text:00401360 aTrySHelpForMor db 'Try `%s --help',27h,' for more information.',0Ah,0
.text:00401360                                         ; DATA XREF: sub_4015D0:loc_4016A2↓o
.text:00401360                                         ; .text:00401C5F↓o
.text:00401387 aDavidMackenzie db 'David MacKenzie',0  ; DATA XREF: sub_4015D0+131↓o
.text:00401397 aRichardMStallm db 'Richard M. Stallman',0
.text:00401397                                         ; DATA XREF: sub_4015D0+139↓o
.text:004013AB aMikeParker     db 'Mike Parker',0      ; DATA XREF: sub_4015D0+144↓o
.text:004013B7 a530            db '5.3.0',0            ; DATA XREF: sub_4015D0+14C↓o
.text:004013BD aGnuCoreutils   db 'GNU coreutils',0    ; DATA XREF: sub_4015D0+154↓o
.text:004013CB ; const FILE stru_4013CB
.text:004013CB stru_4013CB     FILE <656574h, 90909090h, 90909090h, 90909090h, 90909090h, 61735590h, \
.text:004013CB                                         ; DATA XREF: sub_4015D0+15C↓o
.text:004013CB                       203A6567h, 5B207325h>
.text:004013EB                 db  4Fh ; O
.text:004013EC                 db  50h ; P
.text:004013ED                 db  54h ; T
.text:004013EE                 db  49h ; I
.text:004013EF                 db  4Fh ; O
.text:004013F0                 db  4Eh ; N
.text:004013F1                 db  5Dh ; ]
.text:004013F2                 db  2Eh ; .
.text:004013F3                 db  2Eh ; .
.text:004013F4                 db  2Eh ; .
.text:004013F5                 db  20h
.text:004013F6                 db  5Bh ; [
.text:004013F7                 db  46h ; F
.text:004013F8                 db  49h ; I
.text:004013F9                 db  4Ch ; L
.text:004013FA                 db  45h ; E
.text:004013FB                 db  5Dh ; ]
.text:004013FC                 db  2Eh ; .
.text:004013FD                 db  2Eh ; .
.text:004013FE                 db  2Eh ; .
.text:004013FF                 db  0Ah
.text:00401400                 db    0
.text:00401401                 align 20h
.text:00401420 aCopyStandardIn db 'Copy standard input to each FILE, and also to standard output.',0Ah
.text:00401420                                         ; DATA XREF: sub_4015D0+194↓o
.text:00401420                                         ; .text:00401CB2↓o
.text:00401420                 db 0Ah
.text:00401420                 db '  -a, --append              append to the given FILEs, do not ove'
.text:00401420                 db 'rwrite',0Ah
.text:00401420                 db '  -i, --ignore-interrupts   ignore interrupt signals',0Ah,0
.text:004014DE                 align 10h
.text:004014E0 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.text:004014E0                                         ; DATA XREF: sub_4015D0+1B6↓o
.text:004014E0                                         ; .text:00401CD4↓o
.text:0040150D                 align 20h
.text:00401520 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.text:00401520                                         ; DATA XREF: sub_4015D0+1D8↓o
.text:00401520                                         ; .text:00401CF6↓o
.text:00401556                 align 10h
.text:00401560 aIfAFileIsCopyA db 0Ah                  ; DATA XREF: sub_4015D0+1FA↓o
.text:00401560                                         ; .text:00401D18↓o
.text:00401560                 db 'If a FILE is -, copy again to standard output.',0Ah,0
.text:00401591 aReportBugsToS  db 0Ah                  ; DATA XREF: sub_4015D0+21C↓o
.text:00401591                                         ; .text:00401D3A↓o
.text:00401591                 db 'Report bugs to <%s>.',0Ah,0
.text:004015A8 aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.text:004015A8                                         ; DATA XREF: sub_4015D0+229↓o
.text:004015A8                                         ; .text:00401D47↓o
.text:004015BE aStandardInput  db 'standard input',0   ; DATA XREF: sub_4015D0:loc_401852↓o
.text:004015CD                 align 10h
.text:004015D0
.text:004015D0 ; =============== S U B R O U T I N E =======================================
.text:004015D0
.text:004015D0 ; Attributes: noreturn bp-based frame fuzzy-sp
.text:004015D0
.text:004015D0 sub_4015D0      proc near               ; CODE XREF: sub_401080+E5↑p
.text:004015D0
.text:004015D0 Category        = dword ptr -38h
.text:004015D0 Locale          = dword ptr -34h
.text:004015D0 var_30          = dword ptr -30h
.text:004015D0 var_2C          = byte ptr -2Ch
.text:004015D0 var_28          = byte ptr -28h
.text:004015D0 var_24          = dword ptr -24h
.text:004015D0 var_20          = dword ptr -20h
.text:004015D0 var_1C          = dword ptr -1Ch
.text:004015D0 var_9           = byte ptr -9
.text:004015D0 arg_0           = dword ptr  8
.text:004015D0 arg_4           = dword ptr  0Ch
.text:004015D0
.text:004015D0                 push    ebp
.text:004015D1                 xor     eax, eax
.text:004015D3                 mov     ebp, esp
.text:004015D5                 push    esi
.text:004015D6                 push    ebx
.text:004015D7                 sub     esp, 30h
.text:004015DA                 mov     esi, [ebp+arg_4]
.text:004015DD                 and     esp, 0FFFFFFF0h
.text:004015E0                 mov     ebx, [ebp+arg_0]
.text:004015E3                 call    __alloca
.text:004015E8                 call    sub_404F70
.text:004015ED                 mov     edx, [esi]
.text:004015EF                 mov     [esp+38h+Locale], offset Locale ; Locale
.text:004015F7                 mov     [esp+38h+Category], 0 ; Category
.text:004015FE                 mov     ds:dword_4071B0, edx
.text:00401604                 call    setlocale
.text:00401609                 mov     [esp+38h+Locale], offset aCProgra1Coreut ; "c:/progra~1/CoreUtils/share/locale"
.text:00401611                 mov     [esp+38h+Category], offset aCoreutils ; "coreutils"
.text:00401618                 call    ds:__imp_libintl_bindtextdomain
.text:0040161E                 mov     [esp+38h+Category], offset aCoreutils ; "coreutils"
.text:00401625                 call    ds:libintl_textdomain
.text:0040162B                 mov     [esp+38h+Category], offset sub_4036C0 ; void (__cdecl *)()
.text:00401632                 call    sub_401040
.text:00401637                 mov     ds:byte_407000, 0
.text:0040163E                 mov     ds:byte_407010, 0
.text:00401645                 lea     esi, [esi+0]
.text:00401649                 lea     edi, [edi+0]
.text:00401650
.text:00401650 loc_401650:                             ; CODE XREF: sub_4015D0+D0↓j
.text:00401650                                         ; sub_4015D0+117↓j
.text:00401650                 mov     dword ptr [esp+38h+var_28], 0 ; int
.text:00401658                 mov     dword ptr [esp+38h+var_2C], offset off_4012C0 ; char
.text:00401660                 mov     [esp+38h+var_30], offset aAi ; "ai"
.text:00401668                 mov     [esp+38h+Locale], esi ; int
.text:0040166C                 mov     [esp+38h+Category], ebx ; int
.text:0040166F                 call    sub_403550
.text:00401674                 cmp     eax, 0FFFFFFFFh
.text:00401677                 jz      loc_40180E
.text:0040167D                 cmp     eax, 0FFFFFF7Eh
.text:00401682                 jz      loc_401745
.text:00401688                 cmp     eax, 0FFFFFF7Eh
.text:0040168D                 jle     short loc_4016EC
.text:0040168F                 cmp     eax, 61h ; 'a'
.text:00401692                 jz      short loc_4016E0
.text:00401694                 cmp     eax, 69h ; 'i'
.text:00401697                 jnz     short loc_4016A2
.text:00401699                 mov     ds:byte_407010, 1
.text:004016A0                 jmp     short loc_401650
.text:004016A2 ; ---------------------------------------------------------------------------
.text:004016A2
.text:004016A2 loc_4016A2:                             ; CODE XREF: sub_4015D0+C7↑j
.text:004016A2                                         ; sub_4015D0+121↓j
.text:004016A2                 mov     [esp+38h+Category], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:004016A9                 call    ds:libintl_gettext
.text:004016AF                 mov     esi, ds:_iob
.text:004016B5                 mov     ecx, ds:dword_4071B0
.text:004016BB                 add     esi, 40h ; '@'
.text:004016BE                 mov     [esp+38h+var_30], ecx
.text:004016C2                 mov     [esp+38h+Locale], eax ; Format
.text:004016C6                 mov     [esp+38h+Category], esi ; Stream
.text:004016C9                 call    fprintf
.text:004016CE                 mov     [esp+38h+Category], 1 ; Code
.text:004016D5
.text:004016D5 loc_4016D5:                             ; CODE XREF: sub_4015D0+173↓j
.text:004016D5                                         ; sub_4015D0+27D↓j
.text:004016D5                 call    exit
.text:004016D5 ; ---------------------------------------------------------------------------
.text:004016DA                 align 10h
.text:004016E0
.text:004016E0 loc_4016E0:                             ; CODE XREF: sub_4015D0+C2↑j
.text:004016E0                 mov     ds:byte_407000, 1
.text:004016E7                 jmp     loc_401650
.text:004016EC ; ---------------------------------------------------------------------------
.text:004016EC
.text:004016EC loc_4016EC:                             ; CODE XREF: sub_4015D0+BD↑j
.text:004016EC                 cmp     eax, 0FFFFFF7Dh
.text:004016F1                 jnz     short loc_4016A2
.text:004016F3                 mov     [esp+38h+var_1C], 0
.text:004016FB                 mov     edx, ds:_iob
.text:00401701                 mov     [esp+38h+var_20], offset aDavidMackenzie ; "David MacKenzie"
.text:00401709                 mov     [esp+38h+var_24], offset aRichardMStallm ; "Richard M. Stallman"
.text:00401711                 add     edx, 20h ; ' '
.text:00401714                 mov     dword ptr [esp+38h+var_28], offset aMikeParker ; "Mike Parker"
.text:0040171C                 mov     dword ptr [esp+38h+var_2C], offset a530 ; "5.3.0"
.text:00401724                 mov     [esp+38h+var_30], offset aGnuCoreutils ; "GNU coreutils"
.text:0040172C                 mov     [esp+38h+Locale], offset stru_4013CB ; FILE *
.text:00401734                 mov     [esp+38h+Category], edx ; FILE *
.text:00401737                 call    sub_403510
.text:0040173C
.text:0040173C loc_40173C:                             ; CODE XREF: sub_4015D0+239↓j
.text:0040173C                 mov     [esp+38h+Category], 0
.text:00401743                 jmp     short loc_4016D5
.text:00401745 ; ---------------------------------------------------------------------------
.text:00401745
.text:00401745 loc_401745:                             ; CODE XREF: sub_4015D0+B2↑j
.text:00401745                 mov     [esp+38h+Category], (offset stru_4013CB._charbuf+1)
.text:0040174C                 call    ds:libintl_gettext
.text:00401752                 mov     ebx, ds:dword_4071B0
.text:00401758                 mov     [esp+38h+Category], eax ; Format
.text:0040175B                 mov     [esp+38h+Locale], ebx
.text:0040175F                 call    printf
.text:00401764                 mov     [esp+38h+Category], offset aCopyStandardIn ; "Copy standard input to each FILE, and a"...
.text:0040176B                 call    ds:libintl_gettext
.text:00401771                 mov     ecx, ds:_iob
.text:00401777                 add     ecx, 20h ; ' '
.text:0040177A                 mov     [esp+38h+Locale], ecx ; Stream
.text:0040177E                 mov     [esp+38h+Category], eax ; Buffer
.text:00401781                 call    fputs
.text:00401786                 mov     [esp+38h+Category], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:0040178D                 call    ds:libintl_gettext
.text:00401793                 mov     esi, ds:_iob
.text:00401799                 add     esi, 20h ; ' '
.text:0040179C                 mov     [esp+38h+Locale], esi ; Stream
.text:004017A0                 mov     [esp+38h+Category], eax ; Buffer
.text:004017A3                 call    fputs
.text:004017A8                 mov     [esp+38h+Category], offset aVersionOutputV ; "      --version  output version informa"...
.text:004017AF                 call    ds:libintl_gettext
.text:004017B5                 mov     ebx, ds:_iob
.text:004017BB                 add     ebx, 20h ; ' '
.text:004017BE                 mov     [esp+38h+Locale], ebx ; Stream
.text:004017C2                 mov     [esp+38h+Category], eax ; Buffer
.text:004017C5                 call    fputs
.text:004017CA                 mov     [esp+38h+Category], offset aIfAFileIsCopyA ; "\nIf a FILE is -, copy again to standar"...
.text:004017D1                 call    ds:libintl_gettext
.text:004017D7                 mov     ecx, ds:_iob
.text:004017DD                 add     ecx, 20h ; ' '
.text:004017E0                 mov     [esp+38h+Locale], ecx ; Stream
.text:004017E4                 mov     [esp+38h+Category], eax ; Buffer
.text:004017E7                 call    fputs
.text:004017EC                 mov     [esp+38h+Category], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:004017F3                 call    ds:libintl_gettext
.text:004017F9                 mov     [esp+38h+Locale], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:00401801                 mov     [esp+38h+Category], eax ; Format
.text:00401804                 call    printf
.text:00401809                 jmp     loc_40173C
.text:0040180E ; ---------------------------------------------------------------------------
.text:0040180E
.text:0040180E loc_40180E:                             ; CODE XREF: sub_4015D0+A7↑j
.text:0040180E                 cmp     ds:byte_407010, 0
.text:00401815                 jnz     short loc_40187E
.text:00401817
.text:00401817 loc_401817:                             ; CODE XREF: sub_4015D0+2C2↓j
.text:00401817                 mov     ecx, dword_406010
.text:0040181D                 sub     ebx, ecx
.text:0040181F                 lea     eax, [esi+ecx*4]
.text:00401822                 mov     [esp+38h+Locale], eax
.text:00401826                 mov     [esp+38h+Category], ebx
.text:00401829                 call    sub_4018C0
.text:0040182E                 mov     [ebp+var_9], al
.text:00401831                 mov     [esp+38h+Category], 0 ; FileHandle
.text:00401838                 call    _close
.text:0040183D                 test    eax, eax
.text:0040183F                 jnz     short loc_401852
.text:00401841
.text:00401841 loc_401841:                             ; CODE XREF: sub_4015D0+2AC↓j
.text:00401841                 xor     edx, edx
.text:00401843                 cmp     [ebp+var_9], 0
.text:00401847                 setz    dl
.text:0040184A                 mov     [esp+38h+Category], edx
.text:0040184D                 jmp     loc_4016D5
.text:00401852 ; ---------------------------------------------------------------------------
.text:00401852
.text:00401852 loc_401852:                             ; CODE XREF: sub_4015D0+26F↑j
.text:00401852                 mov     [esp+38h+Category], offset aStandardInput ; "standard input"
.text:00401859                 call    ds:libintl_gettext
.text:0040185F                 mov     esi, eax
.text:00401861                 call    _errno
.text:00401866                 mov     [esp+38h+var_30], esi ; char *
.text:0040186A                 mov     ebx, [eax]
.text:0040186C                 mov     [esp+38h+Category], 1 ; Code
.text:00401873                 mov     [esp+38h+Locale], ebx ; ErrorMessage
.text:00401877                 call    sub_404BF0
.text:0040187C                 jmp     short loc_401841
.text:0040187E ; ---------------------------------------------------------------------------
.text:0040187E
.text:0040187E loc_40187E:                             ; CODE XREF: sub_4015D0+245↑j
.text:0040187E                 mov     [esp+38h+Locale], 1 ; Function
.text:00401886                 mov     [esp+38h+Category], 2 ; Signal
.text:0040188D                 call    signal
.text:00401892                 jmp     short loc_401817
.text:00401892 sub_4015D0      endp
.text:00401892
.text:00401892 ; ---------------------------------------------------------------------------
.text:00401894 byte_401894     db 61h, 0               ; DATA XREF: sub_4018C0+1C↓o
.text:00401896 aStandardOutput db 'standard output',0  ; DATA XREF: sub_4018C0+87↓o
.text:004018A6 asc_4018A6      db '-',0                ; DATA XREF: sub_4018C0+E8↓o
.text:004018A8 ; const char aS[]
.text:004018A8 aS              db '%s',0               ; DATA XREF: sub_4018C0+126↓o
.text:004018A8                                         ; sub_4018C0+1DF↓o ...
.text:004018AB aReadError      db 'read error',0       ; DATA XREF: sub_4018C0:loc_401B4A↓o
.text:004018B6 aW              db 'w',0                ; DATA XREF: sub_4018C0:loc_401C42↓o
.text:004018B8                 align 10h
.text:004018C0
.text:004018C0 ; =============== S U B R O U T I N E =======================================
.text:004018C0
.text:004018C0
.text:004018C0 sub_4018C0      proc near               ; CODE XREF: sub_4015D0+259↑p
.text:004018C0
.text:004018C0 FileHandle      = dword ptr -23Ch
.text:004018C0 Buffer          = dword ptr -238h
.text:004018C0 Mode            = dword ptr -234h
.text:004018C0 Size            = dword ptr -230h
.text:004018C0 FileName        = dword ptr -228h
.text:004018C0 var_224         = dword ptr -224h
.text:004018C0 var_21D         = byte ptr -21Dh
.text:004018C0 DstBuf          = byte ptr -21Ch
.text:004018C0 arg_0           = dword ptr  4
.text:004018C0 arg_4           = dword ptr  8
.text:004018C0
.text:004018C0                 push    ebp
.text:004018C1                 push    edi
.text:004018C2                 push    esi
.text:004018C3                 push    ebx
.text:004018C4                 sub     esp, 22Ch
.text:004018CA                 cmp     ds:byte_407000, 0
.text:004018D1                 mov     [esp+23Ch+var_21D], 1
.text:004018D6                 jz      loc_401C42
.text:004018DC                 mov     [esp+23Ch+var_224], offset byte_401894
.text:004018E4
.text:004018E4 loc_4018E4:                             ; CODE XREF: sub_4018C0+38A↓j
.text:004018E4                 mov     [esp+23Ch+Buffer], 4
.text:004018EC                 mov     edx, [esp+23Ch+arg_0]
.text:004018F3                 inc     edx
.text:004018F4                 mov     [esp+23Ch+FileHandle], edx
.text:004018F7                 call    sub_402D80
.text:004018FC                 mov     ebx, [esp+23Ch+arg_0]
.text:00401903                 mov     ebp, eax
.text:00401905                 test    ebx, ebx
.text:00401907                 jle     short loc_401923
.text:00401909                 lea     esi, [esi+0]
.text:00401910
.text:00401910 loc_401910:                             ; CODE XREF: sub_4018C0+61↓j
.text:00401910                 mov     ecx, [esp+23Ch+arg_4]
.text:00401917                 mov     edx, [ecx+ebx*4-4]
.text:0040191B                 mov     [ecx+ebx*4], edx
.text:0040191E                 dec     ebx
.text:0040191F                 test    ebx, ebx
.text:00401921                 jg      short loc_401910
.text:00401923
.text:00401923 loc_401923:                             ; CODE XREF: sub_4018C0+47↑j
.text:00401923                 mov     [esp+23Ch+FileHandle], 0 ; FileHandle
.text:0040192A                 call    _isatty
.text:0040192F                 test    eax, eax
.text:00401931                 jz      loc_401C01
.text:00401937
.text:00401937 loc_401937:                             ; CODE XREF: sub_4018C0+363↓j
.text:00401937                                         ; sub_4018C0+37D↓j
.text:00401937                 mov     edi, ds:_iob
.text:0040193D                 add     edi, 20h ; ' '
.text:00401940                 mov     [ebp+0], edi
.text:00401943                 lea     edi, [esp+23Ch+DstBuf]
.text:00401947                 mov     [esp+23Ch+FileHandle], offset aStandardOutput ; "standard output"
.text:0040194E                 call    ds:libintl_gettext
.text:00401954                 mov     esi, [esp+23Ch+arg_4]
.text:0040195B                 mov     [esi], eax
.text:0040195D                 mov     ebx, ds:_iob
.text:00401963                 mov     [esp+23Ch+Size], 0 ; Size
.text:0040196B                 mov     [esp+23Ch+Mode], 4 ; Mode
.text:00401973                 add     ebx, 20h ; ' '
.text:00401976                 mov     [esp+23Ch+FileHandle], ebx ; Stream
.text:00401979                 mov     ebx, 1
.text:0040197E                 mov     [esp+23Ch+Buffer], 0 ; Buffer
.text:00401986                 call    setvbuf
.text:0040198B                 cmp     ebx, [esp+23Ch+arg_0]
.text:00401992                 jg      loc_401A20
.text:00401998                 nop
.text:00401999                 lea     esi, [esi+0]
.text:004019A0
.text:004019A0 loc_4019A0:                             ; CODE XREF: sub_4018C0+155↓j
.text:004019A0                 cld
.text:004019A1                 mov     ecx, [esp+23Ch+arg_4]
.text:004019A8                 mov     edi, offset asc_4018A6 ; "-"
.text:004019AD                 mov     edx, [ecx+ebx*4]
.text:004019B0                 mov     ecx, 2
.text:004019B5                 mov     esi, edx
.text:004019B7                 mov     [esp+23Ch+FileName], edx
.text:004019BB                 repe cmpsb
.text:004019BD                 jnz     loc_401BE8
.text:004019C3                 mov     eax, ds:_iob
.text:004019C8                 add     eax, 20h ; ' '
.text:004019CB
.text:004019CB loc_4019CB:                             ; CODE XREF: sub_4018C0+33C↓j
.text:004019CB                 mov     [ebp+ebx*4+0], eax
.text:004019CF                 test    eax, eax
.text:004019D1                 jnz     loc_401B91
.text:004019D7                 call    _errno
.text:004019DC                 mov     edx, [esp+23Ch+arg_4]
.text:004019E3                 mov     esi, [edx+ebx*4]
.text:004019E6                 mov     [esp+23Ch+Mode], offset aS ; "%s"
.text:004019EE                 mov     [esp+23Ch+Size], esi ; char
.text:004019F2                 mov     edi, [eax]
.text:004019F4                 mov     [esp+23Ch+FileHandle], 0 ; Code
.text:004019FB                 mov     [esp+23Ch+Buffer], edi ; ErrorMessage
.text:004019FF                 call    sub_404BF0
.text:00401A04                 mov     [esp+23Ch+var_21D], 0
.text:00401A09
.text:00401A09 loc_401A09:                             ; CODE XREF: sub_4018C0+306↓j
.text:00401A09                                         ; sub_4018C0+323↓j
.text:00401A09                 inc     ebx
.text:00401A0A                 lea     edi, [esp+23Ch+DstBuf]
.text:00401A0E                 cmp     ebx, [esp+23Ch+arg_0]
.text:00401A15                 jle     short loc_4019A0
.text:00401A17                 mov     esi, esi
.text:00401A19                 lea     edi, [edi+0]
.text:00401A20
.text:00401A20 loc_401A20:                             ; CODE XREF: sub_4018C0+D2↑j
.text:00401A20                                         ; sub_4018C0+193↓j ...
.text:00401A20                 mov     [esp+23Ch+Mode], 200h ; MaxCharCount
.text:00401A28                 mov     [esp+23Ch+Buffer], edi ; DstBuf
.text:00401A2C                 mov     [esp+23Ch+FileHandle], 0 ; FileHandle
.text:00401A33                 call    _read
.text:00401A38                 test    eax, eax
.text:00401A3A                 mov     esi, eax
.text:00401A3C                 js      loc_401B7E
.text:00401A42
.text:00401A42 loc_401A42:                             ; CODE XREF: sub_4018C0+2C6↓j
.text:00401A42                 test    esi, esi
.text:00401A44                 jle     loc_401ACC
.text:00401A4A                 xor     ebx, ebx
.text:00401A4C                 cmp     ebx, [esp+23Ch+arg_0]
.text:00401A53                 jg      short loc_401A20
.text:00401A55                 lea     esi, [esi+0]
.text:00401A59                 lea     edi, [edi+0]
.text:00401A60
.text:00401A60 loc_401A60:                             ; CODE XREF: sub_4018C0+1B0↓j
.text:00401A60                 mov     eax, [ebp+ebx*4+0]
.text:00401A64                 test    eax, eax
.text:00401A66                 jnz     short loc_401A74
.text:00401A68
.text:00401A68 loc_401A68:                             ; CODE XREF: sub_4018C0+1CE↓j
.text:00401A68                                         ; sub_4018C0+20A↓j
.text:00401A68                 inc     ebx
.text:00401A69                 cmp     ebx, [esp+23Ch+arg_0]
.text:00401A70                 jle     short loc_401A60
.text:00401A72                 jmp     short loc_401A20
.text:00401A74 ; ---------------------------------------------------------------------------
.text:00401A74
.text:00401A74 loc_401A74:                             ; CODE XREF: sub_4018C0+1A6↑j
.text:00401A74                 mov     [esp+23Ch+Size], eax ; Stream
.text:00401A78                 mov     [esp+23Ch+Mode], esi ; ElementCount
.text:00401A7C                 mov     [esp+23Ch+Buffer], 1 ; ElementSize
.text:00401A84                 mov     [esp+23Ch+FileHandle], edi ; Buffer
.text:00401A87                 call    fwrite
.text:00401A8C                 cmp     eax, esi
.text:00401A8E                 jz      short loc_401A68
.text:00401A90                 call    _errno
.text:00401A95                 mov     ecx, [esp+23Ch+arg_4]
.text:00401A9C                 mov     edx, [ecx+ebx*4]
.text:00401A9F                 mov     [esp+23Ch+Mode], offset aS ; "%s"
.text:00401AA7                 mov     [esp+23Ch+Size], edx ; char
.text:00401AAB                 mov     edx, [eax]
.text:00401AAD                 mov     [esp+23Ch+FileHandle], 0 ; Code
.text:00401AB4                 mov     [esp+23Ch+Buffer], edx ; ErrorMessage
.text:00401AB8                 call    sub_404BF0
.text:00401ABD                 mov     dword ptr [ebp+ebx*4+0], 0
.text:00401AC5                 mov     [esp+23Ch+var_21D], 0
.text:00401ACA                 jmp     short loc_401A68
.text:00401ACC ; ---------------------------------------------------------------------------
.text:00401ACC
.text:00401ACC loc_401ACC:                             ; CODE XREF: sub_4018C0+184↑j
.text:00401ACC                 inc     esi
.text:00401ACD                 jz      short loc_401B4A
.text:00401ACF
.text:00401ACF loc_401ACF:                             ; CODE XREF: sub_4018C0+2B9↓j
.text:00401ACF                 mov     ebx, 1
.text:00401AD4                 cmp     ebx, [esp+23Ch+arg_0]
.text:00401ADB                 jg      short loc_401AF2
.text:00401ADD                 lea     esi, [esi+0]
.text:00401AE0
.text:00401AE0 loc_401AE0:                             ; CODE XREF: sub_4018C0+230↓j
.text:00401AE0                 mov     eax, [ebp+ebx*4+0]
.text:00401AE4                 test    eax, eax
.text:00401AE6                 jnz     short loc_401B0A
.text:00401AE8
.text:00401AE8 loc_401AE8:                             ; CODE XREF: sub_4018C0+254↓j
.text:00401AE8                                         ; sub_4018C0+288↓j
.text:00401AE8                 inc     ebx
.text:00401AE9                 cmp     ebx, [esp+23Ch+arg_0]
.text:00401AF0                 jle     short loc_401AE0
.text:00401AF2
.text:00401AF2 loc_401AF2:                             ; CODE XREF: sub_4018C0+21B↑j
.text:00401AF2                 mov     [esp+23Ch+FileHandle], ebp ; Block
.text:00401AF5                 call    free
.text:00401AFA                 movzx   eax, [esp+23Ch+var_21D]
.text:00401AFF                 add     esp, 22Ch
.text:00401B05                 pop     ebx
.text:00401B06                 pop     esi
.text:00401B07                 pop     edi
.text:00401B08                 pop     ebp
.text:00401B09                 retn
.text:00401B0A ; ---------------------------------------------------------------------------
.text:00401B0A
.text:00401B0A loc_401B0A:                             ; CODE XREF: sub_4018C0+226↑j
.text:00401B0A                 mov     [esp+23Ch+FileHandle], eax ; Stream
.text:00401B0D                 call    fclose
.text:00401B12                 test    eax, eax
.text:00401B14                 jz      short loc_401AE8
.text:00401B16                 call    _errno
.text:00401B1B                 mov     edx, [esp+23Ch+arg_4]
.text:00401B22                 mov     edi, [edx+ebx*4]
.text:00401B25                 mov     [esp+23Ch+Mode], offset aS ; "%s"
.text:00401B2D                 mov     [esp+23Ch+Size], edi ; char
.text:00401B31                 mov     esi, [eax]
.text:00401B33                 mov     [esp+23Ch+FileHandle], 0 ; Code
.text:00401B3A                 mov     [esp+23Ch+Buffer], esi ; ErrorMessage
.text:00401B3E                 call    sub_404BF0
.text:00401B43                 mov     [esp+23Ch+var_21D], 0
.text:00401B48                 jmp     short loc_401AE8
.text:00401B4A ; ---------------------------------------------------------------------------
.text:00401B4A
.text:00401B4A loc_401B4A:                             ; CODE XREF: sub_4018C0+20D↑j
.text:00401B4A                 mov     [esp+23Ch+FileHandle], offset aReadError ; "read error"
.text:00401B51                 call    ds:libintl_gettext
.text:00401B57                 mov     edi, eax
.text:00401B59                 call    _errno
.text:00401B5E                 mov     [esp+23Ch+Mode], edi ; char *
.text:00401B62                 mov     ebx, [eax]
.text:00401B64                 mov     [esp+23Ch+FileHandle], 0 ; Code
.text:00401B6B                 mov     [esp+23Ch+Buffer], ebx ; ErrorMessage
.text:00401B6F                 call    sub_404BF0
.text:00401B74                 mov     [esp+23Ch+var_21D], 0
.text:00401B79                 jmp     loc_401ACF
.text:00401B7E ; ---------------------------------------------------------------------------
.text:00401B7E
.text:00401B7E loc_401B7E:                             ; CODE XREF: sub_4018C0+17C↑j
.text:00401B7E                 call    _errno
.text:00401B83                 cmp     dword ptr [eax], 4
.text:00401B86                 jnz     loc_401A42
.text:00401B8C                 jmp     loc_401A20
.text:00401B91 ; ---------------------------------------------------------------------------
.text:00401B91
.text:00401B91 loc_401B91:                             ; CODE XREF: sub_4018C0+111↑j
.text:00401B91                 mov     [esp+23Ch+Size], 0 ; Size
.text:00401B99                 mov     [esp+23Ch+Mode], 4 ; Mode
.text:00401BA1                 mov     [esp+23Ch+Buffer], 0 ; Buffer
.text:00401BA9                 mov     esi, [ebp+ebx*4+0]
.text:00401BAD                 mov     [esp+23Ch+FileHandle], esi ; Stream
.text:00401BB0                 call    setvbuf
.text:00401BB5                 mov     edi, [ebp+ebx*4+0]
.text:00401BB9                 mov     ecx, [edi+10h]
.text:00401BBC                 mov     [esp+23Ch+FileHandle], ecx ; FileHandle
.text:00401BBF                 call    _isatty
.text:00401BC4                 test    eax, eax
.text:00401BC6                 jnz     loc_401A09
.text:00401BCC                 mov     [esp+23Ch+Buffer], 8000h ; Mode
.text:00401BD4                 mov     ecx, [ebp+ebx*4+0]
.text:00401BD8                 mov     edx, [ecx+10h]
.text:00401BDB                 mov     [esp+23Ch+FileHandle], edx ; FileHandle
.text:00401BDE                 call    _setmode
.text:00401BE3                 jmp     loc_401A09
.text:00401BE8 ; ---------------------------------------------------------------------------
.text:00401BE8
.text:00401BE8 loc_401BE8:                             ; CODE XREF: sub_4018C0+FD↑j
.text:00401BE8                 mov     esi, [esp+23Ch+var_224]
.text:00401BEC                 mov     eax, [esp+23Ch+FileName]
.text:00401BF0                 mov     [esp+23Ch+Buffer], esi ; Mode
.text:00401BF4                 mov     [esp+23Ch+FileHandle], eax ; FileName
.text:00401BF7                 call    fopen
.text:00401BFC                 jmp     loc_4019CB
.text:00401C01 ; ---------------------------------------------------------------------------
.text:00401C01
.text:00401C01 loc_401C01:                             ; CODE XREF: sub_4018C0+71↑j
.text:00401C01                 mov     [esp+23Ch+Buffer], 8000h ; Mode
.text:00401C09                 mov     [esp+23Ch+FileHandle], 0 ; FileHandle
.text:00401C10                 call    _setmode
.text:00401C15                 mov     [esp+23Ch+FileHandle], 1 ; FileHandle
.text:00401C1C                 call    _isatty
.text:00401C21                 test    eax, eax
.text:00401C23                 jnz     loc_401937
.text:00401C29                 mov     [esp+23Ch+Buffer], 8000h ; Mode
.text:00401C31                 mov     [esp+23Ch+FileHandle], 1 ; FileHandle
.text:00401C38                 call    _setmode
.text:00401C3D                 jmp     loc_401937
.text:00401C42 ; ---------------------------------------------------------------------------
.text:00401C42
.text:00401C42 loc_401C42:                             ; CODE XREF: sub_4018C0+16↑j
.text:00401C42                 mov     [esp+23Ch+var_224], offset aW ; "w"
.text:00401C4A                 jmp     loc_4018E4
.text:00401C4A sub_4018C0      endp
.text:00401C4A
.text:00401C4A ; ---------------------------------------------------------------------------
.text:00401C4F                 align 10h
.text:00401C50                 sub     esp, 1Ch
.text:00401C53                 mov     [esp+18h], ebx
.text:00401C57                 mov     ebx, [esp+20h]
.text:00401C5B                 test    ebx, ebx
.text:00401C5D                 jz      short loc_401C93
.text:00401C5F                 mov     dword ptr [esp], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:00401C66                 call    ds:libintl_gettext
.text:00401C6C                 mov     edx, ds:_iob
.text:00401C72                 mov     ecx, ds:dword_4071B0
.text:00401C78                 add     edx, 40h ; '@'
.text:00401C7B                 mov     [esp+8], ecx
.text:00401C7F                 mov     [esp+4], eax
.text:00401C83                 mov     [esp], edx
.text:00401C86                 call    fprintf
.text:00401C8B
.text:00401C8B loc_401C8B:                             ; CODE XREF: .text:00401D57↓j
.text:00401C8B                 mov     [esp], ebx
.text:00401C8E                 call    exit
.text:00401C93 ; ---------------------------------------------------------------------------
.text:00401C93
.text:00401C93 loc_401C93:                             ; CODE XREF: .text:00401C5D↑j
.text:00401C93                 mov     dword ptr [esp], (offset stru_4013CB._charbuf+1)
.text:00401C9A                 call    ds:libintl_gettext
.text:00401CA0                 mov     ecx, ds:dword_4071B0
.text:00401CA6                 mov     [esp], eax
.text:00401CA9                 mov     [esp+4], ecx
.text:00401CAD                 call    printf
.text:00401CB2                 mov     dword ptr [esp], offset aCopyStandardIn ; "Copy standard input to each FILE, and a"...
.text:00401CB9                 call    ds:libintl_gettext
.text:00401CBF                 mov     ecx, ds:_iob
.text:00401CC5                 add     ecx, 20h ; ' '
.text:00401CC8                 mov     [esp+4], ecx
.text:00401CCC                 mov     [esp], eax
.text:00401CCF                 call    fputs
.text:00401CD4                 mov     dword ptr [esp], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:00401CDB                 call    ds:libintl_gettext
.text:00401CE1                 mov     ecx, ds:_iob
.text:00401CE7                 add     ecx, 20h ; ' '
.text:00401CEA                 mov     [esp+4], ecx
.text:00401CEE                 mov     [esp], eax
.text:00401CF1                 call    fputs
.text:00401CF6                 mov     dword ptr [esp], offset aVersionOutputV ; "      --version  output version informa"...
.text:00401CFD                 call    ds:libintl_gettext
.text:00401D03                 mov     ecx, ds:_iob
.text:00401D09                 add     ecx, 20h ; ' '
.text:00401D0C                 mov     [esp+4], ecx
.text:00401D10                 mov     [esp], eax
.text:00401D13                 call    fputs
.text:00401D18                 mov     dword ptr [esp], offset aIfAFileIsCopyA ; "\nIf a FILE is -, copy again to standar"...
.text:00401D1F                 call    ds:libintl_gettext
.text:00401D25                 mov     ecx, ds:_iob
.text:00401D2B                 add     ecx, 20h ; ' '
.text:00401D2E                 mov     [esp+4], ecx
.text:00401D32                 mov     [esp], eax
.text:00401D35                 call    fputs
.text:00401D3A                 mov     dword ptr [esp], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:00401D41                 call    ds:libintl_gettext
.text:00401D47                 mov     dword ptr [esp+4], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:00401D4F                 mov     [esp], eax
.text:00401D52                 call    printf
.text:00401D57                 jmp     loc_401C8B
.text:00401D57 ; ---------------------------------------------------------------------------
.text:00401D5C                 align 10h
.text:00401D60 dword_401D60    dd 90002D2Dh, 7 dup(90909090h)
.text:00401D60                                         ; DATA XREF: sub_401FB0+E4↓o
.text:00401D80 aSOptionCSDoesn db '%s: option `%c%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00401D80                                         ; DATA XREF: sub_401FB0+2FC↓o
.text:00401DAD                 align 20h
.text:00401DC0 aSOptionSDoesnT db '%s: option `--%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00401DC0                                         ; DATA XREF: sub_401FB0:loc_402312↓o
.text:00401DED                 align 20h
.text:00401E00 aSOptionSRequir db '%s: option `%s',27h,' requires an argument',0Ah,0
.text:00401E00                                         ; DATA XREF: sub_401FB0:loc_4023B0↓o
.text:00401E00                                         ; sub_401FB0:loc_402777↓o
.text:00401E26                 align 20h
.text:00401E40 aSUnrecognizedO db '%s: unrecognized option `%c%s',27h,0Ah,0
.text:00401E40                                         ; DATA XREF: sub_401FB0+48E↓o
.text:00401E60 dword_401E60    dd 90909000h, 7 dup(90909090h)
.text:00401E60                                         ; DATA XREF: sub_401FB0:loc_402481↓o
.text:00401E80 aSUnrecognizedO_0 db '%s: unrecognized option `--%s',27h,0Ah,0
.text:00401E80                                         ; DATA XREF: sub_401FB0:loc_40249A↓o
.text:00401EA0 aSOptionRequire db '%s: option requires an argument -- %c',0Ah,0
.text:00401EA0                                         ; DATA XREF: sub_401FB0:loc_40257F↓o
.text:00401EA0                                         ; sub_401FB0:loc_4028AC↓o
.text:00401EC7                 align 20h
.text:00401EE0 aSOptionWSDoesn db '%s: option `-W %s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00401EE0                                         ; DATA XREF: sub_401FB0:loc_4026F3↓o
.text:00401F0E                 align 20h
.text:00401F20 aSOptionWSIsAmb db '%s: option `-W %s',27h,' is ambiguous',0Ah,0
.text:00401F20                                         ; DATA XREF: sub_401FB0:loc_4027DF↓o
.text:00401F41 aSIllegalOption db '%s: illegal option -- %c',0Ah,0
.text:00401F41                                         ; DATA XREF: sub_401FB0+93F↓o
.text:00401F5B aSInvalidOption db '%s: invalid option -- %c',0Ah,0
.text:00401F5B                                         ; DATA XREF: sub_401FB0:loc_402927↓o
.text:00401F75 aSOptionSIsAmbi db '%s: option `%s',27h,' is ambiguous',0Ah,0
.text:00401F75                                         ; DATA XREF: sub_401FB0:loc_40294E↓o
.text:00401F93 ; const char VarName[]
.text:00401F93 VarName         db 'POSIXLY_CORRECT',0  ; DATA XREF: sub_401FB0:loc_402B00↓o
.text:00401FA3                 align 10h
.text:00401FB0
.text:00401FB0 ; =============== S U B R O U T I N E =======================================
.text:00401FB0
.text:00401FB0
.text:00401FB0 ; int __cdecl sub_401FB0(int, int, char *Str, int, int, int, int, int)
.text:00401FB0 sub_401FB0      proc near               ; CODE XREF: sub_402B40+5A↓p
.text:00401FB0                                         ; .text:00402C2A↓p ...
.text:00401FB0
.text:00401FB0 Str1            = dword ptr -5Ch
.text:00401FB0 Str2            = dword ptr -58h
.text:00401FB0 MaxCount        = dword ptr -54h
.text:00401FB0 var_50          = dword ptr -50h
.text:00401FB0 var_4C          = dword ptr -4Ch
.text:00401FB0 var_3C          = dword ptr -3Ch
.text:00401FB0 var_38          = dword ptr -38h
.text:00401FB0 var_34          = dword ptr -34h
.text:00401FB0 var_30          = dword ptr -30h
.text:00401FB0 var_2C          = dword ptr -2Ch
.text:00401FB0 var_28          = dword ptr -28h
.text:00401FB0 var_24          = dword ptr -24h
.text:00401FB0 var_20          = dword ptr -20h
.text:00401FB0 var_1C          = dword ptr -1Ch
.text:00401FB0 var_18          = dword ptr -18h
.text:00401FB0 var_14          = dword ptr -14h
.text:00401FB0 arg_0           = dword ptr  4
.text:00401FB0 arg_4           = dword ptr  8
.text:00401FB0 Str             = dword ptr  0Ch
.text:00401FB0 arg_C           = dword ptr  10h
.text:00401FB0 arg_10          = dword ptr  14h
.text:00401FB0 arg_14          = dword ptr  18h
.text:00401FB0 arg_18          = dword ptr  1Ch
.text:00401FB0 arg_1C          = dword ptr  20h
.text:00401FB0
.text:00401FB0                 push    ebp
.text:00401FB1                 mov     eax, 0FFFFFFFFh
.text:00401FB6                 push    edi
.text:00401FB7                 push    esi
.text:00401FB8                 push    ebx
.text:00401FB9                 sub     esp, 4Ch
.text:00401FBC                 mov     esi, [esp+5Ch+Str]
.text:00401FC0                 mov     ebp, [esp+5Ch+arg_1C]
.text:00401FC4                 cmp     byte ptr [esi], 3Ah ; ':'
.text:00401FC7                 mov     ebx, [ebp+4]
.text:00401FCA                 setz    dl
.text:00401FCD                 movzx   ecx, dl
.text:00401FD0                 dec     ecx
.text:00401FD1                 and     ecx, ebx
.text:00401FD3                 mov     [esp+5Ch+var_14], ecx
.text:00401FD7                 mov     ecx, [esp+5Ch+arg_0]
.text:00401FDB                 test    ecx, ecx
.text:00401FDD                 jle     loc_402107
.text:00401FE3                 mov     dword ptr [ebp+0Ch], 0
.text:00401FEA                 mov     ebx, [ebp+0]
.text:00401FED                 test    ebx, ebx
.text:00401FEF                 jz      loc_402B20
.text:00401FF5                 mov     edi, [ebp+10h]
.text:00401FF8                 test    edi, edi
.text:00401FFA                 jnz     short loc_402053
.text:00401FFC                 lea     esi, [esi+0]
.text:00402000
.text:00402000 loc_402000:                             ; CODE XREF: sub_401FB0+B7C↓j
.text:00402000                 mov     [ebp+24h], ebx
.text:00402003                 mov     esi, [esp+5Ch+Str]
.text:00402007                 mov     [ebp+20h], ebx
.text:0040200A                 mov     ecx, [esp+5Ch+arg_18]
.text:0040200E                 xor     ebx, ebx
.text:00402010                 mov     dword ptr [ebp+14h], 0
.text:00402017                 test    ecx, ecx
.text:00402019                 jz      loc_402B00
.text:0040201F
.text:0040201F loc_40201F:                             ; CODE XREF: sub_401FB0+B64↓j
.text:0040201F                 mov     ebx, 1
.text:00402024
.text:00402024 loc_402024:                             ; CODE XREF: sub_401FB0+B5E↓j
.text:00402024                 mov     [ebp+1Ch], ebx
.text:00402027                 mov     ecx, [esp+5Ch+Str]
.text:0040202B                 movzx   eax, byte ptr [ecx]
.text:0040202E                 cmp     al, 2Dh ; '-'
.text:00402030                 jz      loc_402AF0
.text:00402036                 cmp     al, 2Bh ; '+'
.text:00402038                 jz      loc_402AD9
.text:0040203E                 xor     edx, edx
.text:00402040                 test    ebx, ebx
.text:00402042                 setz    dl
.text:00402045                 mov     [ebp+18h], edx
.text:00402048
.text:00402048 loc_402048:                             ; CODE XREF: sub_401FB0+B35↓j
.text:00402048                 mov     [esp+5Ch+Str], esi
.text:0040204C                 mov     dword ptr [ebp+10h], 1
.text:00402053
.text:00402053 loc_402053:                             ; CODE XREF: sub_401FB0+4A↑j
.text:00402053                 mov     eax, [ebp+14h]
.text:00402056                 test    eax, eax
.text:00402058                 jz      short loc_402063
.text:0040205A                 cmp     byte ptr [eax], 0
.text:0040205D                 jnz     loc_402140
.text:00402063
.text:00402063 loc_402063:                             ; CODE XREF: sub_401FB0+A8↑j
.text:00402063                 mov     ebx, [ebp+0]
.text:00402066                 cmp     [ebp+24h], ebx
.text:00402069                 jle     short loc_40206E
.text:0040206B                 mov     [ebp+24h], ebx
.text:0040206E
.text:0040206E loc_40206E:                             ; CODE XREF: sub_401FB0+B9↑j
.text:0040206E                 cmp     [ebp+20h], ebx
.text:00402071                 jle     short loc_402076
.text:00402073                 mov     [ebp+20h], ebx
.text:00402076
.text:00402076 loc_402076:                             ; CODE XREF: sub_401FB0+C1↑j
.text:00402076                 cmp     dword ptr [ebp+18h], 1
.text:0040207A                 jz      loc_402A50
.text:00402080
.text:00402080 loc_402080:                             ; CODE XREF: sub_401FB0+B13↓j
.text:00402080                 cmp     ebx, [esp+5Ch+arg_0]
.text:00402084                 jz      loc_402A34
.text:0040208A                 cld
.text:0040208B                 mov     ecx, [esp+5Ch+arg_4]
.text:0040208F                 mov     edx, 3
.text:00402094                 mov     edi, offset dword_401D60
.text:00402099                 mov     esi, [ecx+ebx*4]
.text:0040209C                 mov     ecx, edx
.text:0040209E                 repe cmpsb
.text:004020A0                 jnz     short loc_4020DC
.text:004020A2                 mov     edx, [ebp+24h]
.text:004020A5                 lea     eax, [ebx+1]
.text:004020A8                 cmp     [ebp+20h], edx
.text:004020AB                 mov     [ebp+0], eax
.text:004020AE                 jz      loc_402A48
.text:004020B4                 cmp     edx, eax
.text:004020B6                 jz      short loc_4020D0
.text:004020B8                 mov     [esp+5Ch+Str2], ebp
.text:004020BC                 mov     ebx, [esp+5Ch+arg_4]
.text:004020C0                 mov     [esp+5Ch+Str1], ebx
.text:004020C3                 call    sub_402C60
.text:004020C8                 nop
.text:004020C9                 lea     esi, [esi+0]
.text:004020D0
.text:004020D0 loc_4020D0:                             ; CODE XREF: sub_401FB0+106↑j
.text:004020D0                                         ; sub_401FB0+A9B↓j
.text:004020D0                 mov     eax, [esp+5Ch+arg_0]
.text:004020D4                 mov     ebx, eax
.text:004020D6                 mov     [ebp+24h], eax
.text:004020D9                 mov     [ebp+0], eax
.text:004020DC
.text:004020DC loc_4020DC:                             ; CODE XREF: sub_401FB0+F0↑j
.text:004020DC                 cmp     ebx, [esp+5Ch+arg_0]
.text:004020E0                 jz      loc_402A34
.text:004020E6                 mov     esi, [esp+5Ch+arg_4]
.text:004020EA                 mov     eax, [esi+ebx*4]
.text:004020ED                 cmp     byte ptr [eax], 2Dh ; '-'
.text:004020F0                 jz      short loc_402117
.text:004020F2
.text:004020F2 loc_4020F2:                             ; CODE XREF: sub_401FB0+16D↓j
.text:004020F2                 mov     edx, [ebp+18h]
.text:004020F5                 test    edx, edx
.text:004020F7                 jz      short loc_402110
.text:004020F9                 mov     [ebp+0Ch], eax
.text:004020FC                 lea     edi, [ebx+1]
.text:004020FF                 mov     eax, 1
.text:00402104                 mov     [ebp+0], edi
.text:00402107
.text:00402107 loc_402107:                             ; CODE XREF: sub_401FB0+2D↑j
.text:00402107                                         ; sub_401FB0+165↓j ...
.text:00402107                 add     esp, 4Ch
.text:0040210A                 pop     ebx
.text:0040210B                 pop     esi
.text:0040210C                 pop     edi
.text:0040210D                 pop     ebp
.text:0040210E                 retn
.text:0040210E ; ---------------------------------------------------------------------------
.text:0040210F                 align 10h
.text:00402110
.text:00402110 loc_402110:                             ; CODE XREF: sub_401FB0+147↑j
.text:00402110                                         ; sub_401FB0+A8A↓j ...
.text:00402110                 mov     eax, 0FFFFFFFFh
.text:00402115                 jmp     short loc_402107
.text:00402117 ; ---------------------------------------------------------------------------
.text:00402117
.text:00402117 loc_402117:                             ; CODE XREF: sub_401FB0+140↑j
.text:00402117                 movzx   edx, byte ptr [eax+1]
.text:0040211B                 test    dl, dl
.text:0040211D                 jz      short loc_4020F2
.text:0040211F                 mov     ebx, [esp+5Ch+arg_C]
.text:00402123                 xor     ecx, ecx
.text:00402125                 test    ebx, ebx
.text:00402127                 jz      short loc_402132
.text:00402129                 cmp     dl, 2Dh ; '-'
.text:0040212C                 jz      loc_402A2A
.text:00402132
.text:00402132 loc_402132:                             ; CODE XREF: sub_401FB0+177↑j
.text:00402132                                         ; sub_401FB0+A7F↓j
.text:00402132                 lea     esi, [ecx+eax+1]
.text:00402136                 mov     [ebp+14h], esi
.text:00402139                 lea     esi, [esi+0]
.text:00402140
.text:00402140 loc_402140:                             ; CODE XREF: sub_401FB0+AD↑j
.text:00402140                 mov     ecx, [esp+5Ch+arg_C]
.text:00402144                 test    ecx, ecx
.text:00402146                 jz      loc_4024D0
.text:0040214C                 mov     edx, [ebp+0]
.text:0040214F                 mov     edi, [esp+5Ch+arg_4]
.text:00402153                 mov     eax, [edi+edx*4]
.text:00402156                 movzx   edx, byte ptr [eax+1]
.text:0040215A                 cmp     dl, 2Dh ; '-'
.text:0040215D                 jz      short loc_402175
.text:0040215F                 mov     ebx, [esp+5Ch+arg_14]
.text:00402163                 test    ebx, ebx
.text:00402165                 jz      loc_4024D0
.text:0040216B                 cmp     byte ptr [eax+2], 0
.text:0040216F                 jz      loc_402A0A
.text:00402175
.text:00402175 loc_402175:                             ; CODE XREF: sub_401FB0+1AD↑j
.text:00402175                                         ; sub_401FB0+A75↓j
.text:00402175                 mov     [esp+5Ch+var_18], 0
.text:0040217D                 mov     ecx, [ebp+14h]
.text:00402180                 mov     [esp+5Ch+var_1C], 0
.text:00402188                 mov     [esp+5Ch+var_20], 0
.text:00402190                 mov     edi, ecx
.text:00402192                 mov     [esp+5Ch+var_24], 0FFFFFFFFh
.text:0040219A                 movzx   eax, byte ptr [ecx]
.text:0040219D                 test    al, al
.text:0040219F                 jz      short loc_4021BC
.text:004021A1                 cmp     al, 3Dh ; '='
.text:004021A3                 jz      short loc_4021BC
.text:004021A5                 lea     esi, [esi+0]
.text:004021A9                 lea     edi, [edi+0]
.text:004021B0
.text:004021B0 loc_4021B0:                             ; CODE XREF: sub_401FB0+20A↓j
.text:004021B0                 inc     edi
.text:004021B1                 movzx   eax, byte ptr [edi]
.text:004021B4                 test    al, al
.text:004021B6                 jz      short loc_4021BC
.text:004021B8                 cmp     al, 3Dh ; '='
.text:004021BA                 jnz     short loc_4021B0
.text:004021BC
.text:004021BC loc_4021BC:                             ; CODE XREF: sub_401FB0+1EF↑j
.text:004021BC                                         ; sub_401FB0+1F3↑j ...
.text:004021BC                 mov     [esp+5Ch+var_28], 0
.text:004021C4                 mov     esi, [esp+5Ch+arg_C]
.text:004021C8                 mov     ebx, [esi]
.text:004021CA                 test    ebx, ebx
.text:004021CC                 mov     edx, ebx
.text:004021CE                 jz      loc_4023F0
.text:004021D4                 lea     esi, [esi+0]
.text:004021DA                 lea     edi, [edi+0]
.text:004021E0
.text:004021E0 loc_4021E0:                             ; CODE XREF: sub_401FB0+25E↓j
.text:004021E0                 mov     [esp+5Ch+Str2], ecx ; Str2
.text:004021E4                 mov     ebx, edi
.text:004021E6                 sub     ebx, ecx
.text:004021E8                 mov     [esp+5Ch+MaxCount], ebx ; MaxCount
.text:004021EC                 mov     [esp+5Ch+Str1], edx ; Str1
.text:004021EF                 call    strncmp
.text:004021F4                 test    eax, eax
.text:004021F6                 jz      loc_402986
.text:004021FC
.text:004021FC loc_4021FC:                             ; CODE XREF: sub_401FB0+A0F↓j
.text:004021FC                                         ; sub_401FB0+A24↓j ...
.text:004021FC                 inc     [esp+5Ch+var_28]
.text:00402200                 add     esi, 10h
.text:00402203                 mov     ecx, [esi]
.text:00402205                 test    ecx, ecx
.text:00402207                 mov     edx, ecx
.text:00402209                 jz      short loc_402210
.text:0040220B                 mov     ecx, [ebp+14h]
.text:0040220E                 jmp     short loc_4021E0
.text:00402210 ; ---------------------------------------------------------------------------
.text:00402210
.text:00402210 loc_402210:                             ; CODE XREF: sub_401FB0+259↑j
.text:00402210                                         ; sub_401FB0+A55↓j
.text:00402210                 mov     esi, [esp+5Ch+var_20]
.text:00402214                 test    esi, esi
.text:00402216                 jz      short loc_402224
.text:00402218                 mov     edx, [esp+5Ch+var_1C]
.text:0040221C                 test    edx, edx
.text:0040221E                 jz      loc_402930
.text:00402224
.text:00402224 loc_402224:                             ; CODE XREF: sub_401FB0+266↑j
.text:00402224                 mov     eax, [esp+5Ch+var_18]
.text:00402228                 test    eax, eax
.text:0040222A                 jz      loc_4023F0
.text:00402230                 mov     ecx, [ebp+0]
.text:00402233                 lea     eax, [ecx+1]
.text:00402236                 mov     [ebp+0], eax
.text:00402239                 cmp     byte ptr [edi], 0
.text:0040223C                 jz      loc_402350
.text:00402242                 mov     ecx, [esp+5Ch+var_18]
.text:00402246                 mov     esi, [ecx+4]
.text:00402249                 test    esi, esi
.text:0040224B                 jz      short loc_402296
.text:0040224D                 lea     ebx, [edi+1]
.text:00402250                 mov     [ebp+0Ch], ebx
.text:00402253
.text:00402253 loc_402253:                             ; CODE XREF: sub_401FB0+3A8↓j
.text:00402253                                         ; sub_401FB0+3C4↓j
.text:00402253                 mov     ebx, [ebp+14h]
.text:00402256                 mov     [esp+5Ch+Str1], ebx ; Str
.text:00402259                 call    strlen
.text:0040225E                 add     [ebp+14h], eax
.text:00402261                 mov     esi, [esp+5Ch+arg_10]
.text:00402265                 test    esi, esi
.text:00402267                 jz      short loc_402273
.text:00402269                 mov     ebp, [esp+5Ch+var_24]
.text:0040226D                 mov     ecx, [esp+5Ch+arg_10]
.text:00402271                 mov     [ecx], ebp
.text:00402273
.text:00402273 loc_402273:                             ; CODE XREF: sub_401FB0+2B7↑j
.text:00402273                 mov     eax, [esp+5Ch+var_18]
.text:00402277                 mov     ecx, [eax+8]
.text:0040227A                 test    ecx, ecx
.text:0040227C                 jnz     short loc_40228A
.text:0040227E                 mov     ecx, [esp+5Ch+var_18]
.text:00402282
.text:00402282 loc_402282:                             ; CODE XREF: sub_401FB0+723↓j
.text:00402282                 mov     eax, [ecx+0Ch]
.text:00402285                 jmp     loc_402107
.text:0040228A ; ---------------------------------------------------------------------------
.text:0040228A
.text:0040228A loc_40228A:                             ; CODE XREF: sub_401FB0+2CC↑j
.text:0040228A                                         ; sub_401FB0+719↓j
.text:0040228A                 mov     esi, [eax+0Ch]
.text:0040228D                 xor     eax, eax
.text:0040228F                 mov     [ecx], esi
.text:00402291                 jmp     loc_402107
.text:00402296 ; ---------------------------------------------------------------------------
.text:00402296
.text:00402296 loc_402296:                             ; CODE XREF: sub_401FB0+29B↑j
.text:00402296                 mov     edi, [esp+5Ch+var_14]
.text:0040229A                 test    edi, edi
.text:0040229C                 jz      short loc_4022F0
.text:0040229E                 mov     esi, [esp+5Ch+arg_4]
.text:004022A2                 mov     edx, [esi+eax*4-4]
.text:004022A6                 cmp     byte ptr [edx+1], 2Dh ; '-'
.text:004022AA                 jz      short loc_402312
.text:004022AC                 mov     [esp+5Ch+Str1], offset aSOptionCSDoesn ; "%s: option `%c%s' doesn't allow an argu"...
.text:004022B3                 call    ds:libintl_gettext
.text:004022B9                 mov     edx, [esp+5Ch+var_18]
.text:004022BD                 mov     edi, [edx]
.text:004022BF                 mov     [esp+5Ch+var_4C], edi
.text:004022C3                 mov     ebx, [ebp+0]
.text:004022C6                 mov     edi, [esp+5Ch+arg_4]
.text:004022CA                 mov     ecx, [edi+ebx*4-4]
.text:004022CE                 movsx   esi, byte ptr [ecx]
.text:004022D1                 mov     ecx, ds:_iob
.text:004022D7                 add     ecx, 40h ; '@'
.text:004022DA                 mov     [esp+5Ch+var_50], esi
.text:004022DE                 mov     ebx, [edi]
.text:004022E0                 mov     [esp+5Ch+Str2], eax ; Format
.text:004022E4                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:004022E7                 mov     [esp+5Ch+MaxCount], ebx
.text:004022EB                 call    fprintf
.text:004022F0
.text:004022F0 loc_4022F0:                             ; CODE XREF: sub_401FB0+2EC↑j
.text:004022F0                                         ; sub_401FB0+398↓j
.text:004022F0                 mov     ecx, [ebp+14h]
.text:004022F3                 mov     [esp+5Ch+Str1], ecx ; Str
.text:004022F6                 call    strlen
.text:004022FB                 add     [ebp+14h], eax
.text:004022FE                 mov     eax, [esp+5Ch+var_18]
.text:00402302                 mov     esi, [eax+0Ch]
.text:00402305                 mov     [ebp+8], esi
.text:00402308
.text:00402308 loc_402308:                             ; CODE XREF: sub_401FB0+4E5↓j
.text:00402308                                         ; sub_401FB0+73E↓j ...
.text:00402308                 mov     eax, 3Fh ; '?'
.text:0040230D                 jmp     loc_402107
.text:00402312 ; ---------------------------------------------------------------------------
.text:00402312
.text:00402312 loc_402312:                             ; CODE XREF: sub_401FB0+2FA↑j
.text:00402312                 mov     [esp+5Ch+Str1], offset aSOptionSDoesnT ; "%s: option `--%s' doesn't allow an argu"...
.text:00402319                 call    ds:libintl_gettext
.text:0040231F                 mov     edx, [esp+5Ch+var_18]
.text:00402323                 mov     edi, [esp+5Ch+arg_4]
.text:00402327                 mov     ecx, ds:_iob
.text:0040232D                 mov     esi, [edx]
.text:0040232F                 add     ecx, 40h ; '@'
.text:00402332                 mov     [esp+5Ch+var_50], esi
.text:00402336                 mov     ebx, [edi]
.text:00402338                 mov     [esp+5Ch+Str2], eax ; Format
.text:0040233C                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:0040233F                 mov     [esp+5Ch+MaxCount], ebx
.text:00402343                 call    fprintf
.text:00402348                 jmp     short loc_4022F0
.text:00402348 ; ---------------------------------------------------------------------------
.text:0040234A                 align 10h
.text:00402350
.text:00402350 loc_402350:                             ; CODE XREF: sub_401FB0+28C↑j
.text:00402350                 mov     ebx, [esp+5Ch+var_18]
.text:00402354                 cmp     dword ptr [ebx+4], 1
.text:00402358                 jnz     loc_402253
.text:0040235E                 cmp     eax, [esp+5Ch+arg_0]
.text:00402362                 jge     short loc_402379
.text:00402364                 mov     ebx, [esp+5Ch+arg_4]
.text:00402368                 lea     edi, [ecx+2]
.text:0040236B                 mov     [ebp+0], edi
.text:0040236E                 mov     esi, [ebx+eax*4]
.text:00402371                 mov     [ebp+0Ch], esi
.text:00402374                 jmp     loc_402253
.text:00402379 ; ---------------------------------------------------------------------------
.text:00402379
.text:00402379 loc_402379:                             ; CODE XREF: sub_401FB0+3B2↑j
.text:00402379                 mov     edx, [esp+5Ch+var_14]
.text:0040237D                 test    edx, edx
.text:0040237F                 jnz     short loc_4023B0
.text:00402381
.text:00402381 loc_402381:                             ; CODE XREF: sub_401FB0+437↓j
.text:00402381                 mov     edx, [ebp+14h]
.text:00402384                 mov     [esp+5Ch+Str1], edx ; Str
.text:00402387                 call    strlen
.text:0040238C                 add     [ebp+14h], eax
.text:0040238F                 mov     eax, [esp+5Ch+var_18]
.text:00402393                 mov     edi, [eax+0Ch]
.text:00402396                 mov     [ebp+8], edi
.text:00402399
.text:00402399 loc_402399:                             ; CODE XREF: sub_401FB0+7C2↓j
.text:00402399                 mov     ebp, [esp+5Ch+Str]
.text:0040239D                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:004023A1                 setnz   bl
.text:004023A4                 movzx   esi, bl
.text:004023A7                 lea     eax, [esi+esi*4+3Ah]
.text:004023AB                 jmp     loc_402107
.text:004023B0 ; ---------------------------------------------------------------------------
.text:004023B0
.text:004023B0 loc_4023B0:                             ; CODE XREF: sub_401FB0+3CF↑j
.text:004023B0                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:004023B7                 call    ds:libintl_gettext
.text:004023BD                 mov     ecx, [ebp+0]
.text:004023C0                 mov     esi, [esp+5Ch+arg_4]
.text:004023C4                 mov     ebx, [esi+ecx*4-4]
.text:004023C8                 mov     ecx, ds:_iob
.text:004023CE                 mov     [esp+5Ch+var_50], ebx
.text:004023D2                 mov     edi, [esi]
.text:004023D4                 add     ecx, 40h ; '@'
.text:004023D7                 mov     [esp+5Ch+Str2], eax ; Format
.text:004023DB                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:004023DE                 mov     [esp+5Ch+MaxCount], edi
.text:004023E2                 call    fprintf
.text:004023E7                 jmp     short loc_402381
.text:004023E7 ; ---------------------------------------------------------------------------
.text:004023E9                 align 10h
.text:004023F0
.text:004023F0 loc_4023F0:                             ; CODE XREF: sub_401FB0+21E↑j
.text:004023F0                                         ; sub_401FB0+27A↑j
.text:004023F0                 mov     eax, [esp+5Ch+arg_14]
.text:004023F4                 test    eax, eax
.text:004023F6                 jz      short loc_402426
.text:004023F8                 mov     ebx, [ebp+0]
.text:004023FB                 mov     esi, [esp+5Ch+arg_4]
.text:004023FF                 mov     edi, [esi+ebx*4]
.text:00402402                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:00402406                 jz      short loc_402429
.text:00402408                 mov     ecx, [ebp+14h]
.text:0040240B                 mov     edx, [esp+5Ch+Str]
.text:0040240F                 movsx   ebx, byte ptr [ecx]
.text:00402412                 mov     [esp+5Ch+Str1], edx ; Str
.text:00402415                 mov     [esp+5Ch+Str2], ebx ; Val
.text:00402419                 call    strchr
.text:0040241E                 test    eax, eax
.text:00402420                 jnz     loc_4024D0
.text:00402426
.text:00402426 loc_402426:                             ; CODE XREF: sub_401FB0+446↑j
.text:00402426                 mov     ebx, [ebp+0]
.text:00402429
.text:00402429 loc_402429:                             ; CODE XREF: sub_401FB0+456↑j
.text:00402429                 mov     eax, [esp+5Ch+var_14]
.text:0040242D                 test    eax, eax
.text:0040242F                 jz      short loc_402481
.text:00402431                 mov     esi, [esp+5Ch+arg_4]
.text:00402435                 mov     edi, [esi+ebx*4]
.text:00402438                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:0040243C                 jz      short loc_40249A
.text:0040243E                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO ; "%s: unrecognized option `%c%s'\n"
.text:00402445                 call    ds:libintl_gettext
.text:0040244B                 mov     edi, [ebp+14h]
.text:0040244E                 mov     [esp+5Ch+var_4C], edi
.text:00402452                 mov     ebx, [ebp+0]
.text:00402455                 mov     edi, [esp+5Ch+arg_4]
.text:00402459                 mov     esi, [edi+ebx*4]
.text:0040245C                 movsx   ecx, byte ptr [esi]
.text:0040245F                 mov     esi, ds:_iob
.text:00402465                 add     esi, 40h ; '@'
.text:00402468                 mov     [esp+5Ch+var_50], ecx
.text:0040246C                 mov     ebx, [edi]
.text:0040246E                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402472                 mov     [esp+5Ch+Str1], esi ; Stream
.text:00402475                 mov     [esp+5Ch+MaxCount], ebx
.text:00402479                 call    fprintf
.text:0040247E
.text:0040247E loc_40247E:                             ; CODE XREF: sub_401FB0+51D↓j
.text:0040247E                 mov     ebx, [ebp+0]
.text:00402481
.text:00402481 loc_402481:                             ; CODE XREF: sub_401FB0+47F↑j
.text:00402481                 mov     dword ptr [ebp+14h], offset dword_401E60
.text:00402488                 lea     edx, [ebx+1]
.text:0040248B                 mov     [ebp+0], edx
.text:0040248E
.text:0040248E loc_40248E:                             ; CODE XREF: sub_401FB0+999↓j
.text:0040248E                 mov     dword ptr [ebp+8], 0
.text:00402495                 jmp     loc_402308
.text:0040249A ; ---------------------------------------------------------------------------
.text:0040249A
.text:0040249A loc_40249A:                             ; CODE XREF: sub_401FB0+48C↑j
.text:0040249A                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO_0 ; "%s: unrecognized option `--%s'\n"
.text:004024A1                 call    ds:libintl_gettext
.text:004024A7                 mov     ecx, [ebp+14h]
.text:004024AA                 mov     edi, [esp+5Ch+arg_4]
.text:004024AE                 mov     edx, ds:_iob
.text:004024B4                 mov     [esp+5Ch+var_50], ecx
.text:004024B8                 mov     ebx, [edi]
.text:004024BA                 add     edx, 40h ; '@'
.text:004024BD                 mov     [esp+5Ch+Str2], eax ; Format
.text:004024C1                 mov     [esp+5Ch+MaxCount], ebx
.text:004024C5                 mov     [esp+5Ch+Str1], edx ; Stream
.text:004024C8                 call    fprintf
.text:004024CD                 jmp     short loc_40247E
.text:004024CD ; ---------------------------------------------------------------------------
.text:004024CF                 align 10h
.text:004024D0
.text:004024D0 loc_4024D0:                             ; CODE XREF: sub_401FB0+196↑j
.text:004024D0                                         ; sub_401FB0+1B5↑j ...
.text:004024D0                 mov     esi, [ebp+14h]
.text:004024D3                 movzx   ebx, byte ptr [esi]
.text:004024D6                 inc     esi
.text:004024D7                 mov     [ebp+14h], esi
.text:004024DA                 mov     ecx, [esp+5Ch+Str]
.text:004024DE                 movsx   esi, bl
.text:004024E1                 mov     [esp+5Ch+Str2], esi ; Val
.text:004024E5                 mov     edi, esi
.text:004024E7                 mov     [esp+5Ch+Str1], ecx ; Str
.text:004024EA                 call    strchr
.text:004024EF                 mov     ecx, [ebp+14h]
.text:004024F2                 cmp     byte ptr [ecx], 0
.text:004024F5                 jnz     short loc_4024FA
.text:004024F7                 inc     dword ptr [ebp+0]
.text:004024FA
.text:004024FA loc_4024FA:                             ; CODE XREF: sub_401FB0+545↑j
.text:004024FA                 test    eax, eax
.text:004024FC                 jz      loc_4028E0
.text:00402502                 cmp     bl, 3Ah ; ':'
.text:00402505                 jz      loc_4028E0
.text:0040250B                 cmp     byte ptr [eax], 57h ; 'W'
.text:0040250E                 jz      loc_4025C6
.text:00402514                 movzx   edx, byte ptr [eax+1]
.text:00402518
.text:00402518 loc_402518:                             ; CODE XREF: sub_401FB0+61D↓j
.text:00402518                 cmp     dl, 3Ah ; ':'
.text:0040251B                 jz      short loc_402524
.text:0040251D
.text:0040251D loc_40251D:                             ; CODE XREF: sub_401FB0+590↓j
.text:0040251D                 mov     eax, esi
.text:0040251F                 jmp     loc_402107
.text:00402524 ; ---------------------------------------------------------------------------
.text:00402524
.text:00402524 loc_402524:                             ; CODE XREF: sub_401FB0+56B↑j
.text:00402524                 cmp     byte ptr [eax+2], 3Ah ; ':'
.text:00402528                 jz      loc_4025B1
.text:0040252E                 cmp     byte ptr [ecx], 0
.text:00402531                 jz      short loc_402542
.text:00402533
.text:00402533 loc_402533:                             ; CODE XREF: sub_401FB0+604↓j
.text:00402533                 inc     dword ptr [ebp+0]
.text:00402536                 mov     [ebp+0Ch], ecx
.text:00402539
.text:00402539 loc_402539:                             ; CODE XREF: sub_401FB0+5AB↓j
.text:00402539                                         ; sub_401FB0+5C6↓j ...
.text:00402539                 mov     dword ptr [ebp+14h], 0
.text:00402540                 jmp     short loc_40251D
.text:00402542 ; ---------------------------------------------------------------------------
.text:00402542
.text:00402542 loc_402542:                             ; CODE XREF: sub_401FB0+581↑j
.text:00402542                 mov     ecx, [ebp+0]
.text:00402545                 cmp     ecx, [esp+5Ch+arg_0]
.text:00402549                 jz      short loc_40255D
.text:0040254B                 mov     eax, [esp+5Ch+arg_4]
.text:0040254F                 lea     edx, [ecx+1]
.text:00402552                 mov     [ebp+0], edx
.text:00402555                 mov     ebx, [eax+ecx*4]
.text:00402558                 mov     [ebp+0Ch], ebx
.text:0040255B                 jmp     short loc_402539
.text:0040255D ; ---------------------------------------------------------------------------
.text:0040255D
.text:0040255D loc_40255D:                             ; CODE XREF: sub_401FB0+599↑j
.text:0040255D                 mov     ecx, [esp+5Ch+var_14]
.text:00402561                 test    ecx, ecx
.text:00402563                 jnz     short loc_40257F
.text:00402565
.text:00402565 loc_402565:                             ; CODE XREF: sub_401FB0+5FF↓j
.text:00402565                 mov     [ebp+8], edi
.text:00402568                 mov     edi, [esp+5Ch+Str]
.text:0040256C                 cmp     byte ptr [edi], 3Ah ; ':'
.text:0040256F                 jz      short loc_402578
.text:00402571                 mov     esi, 3Fh ; '?'
.text:00402576                 jmp     short loc_402539
.text:00402578 ; ---------------------------------------------------------------------------
.text:00402578
.text:00402578 loc_402578:                             ; CODE XREF: sub_401FB0+5BF↑j
.text:00402578                 mov     esi, 3Ah ; ':'
.text:0040257D                 jmp     short loc_402539
.text:0040257F ; ---------------------------------------------------------------------------
.text:0040257F
.text:0040257F loc_40257F:                             ; CODE XREF: sub_401FB0+5B3↑j
.text:0040257F                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:00402586                 call    ds:libintl_gettext
.text:0040258C                 mov     [esp+5Ch+var_50], edi
.text:00402590                 mov     ebx, [esp+5Ch+arg_4]
.text:00402594                 mov     edx, ds:_iob
.text:0040259A                 mov     esi, [ebx]
.text:0040259C                 add     edx, 40h ; '@'
.text:0040259F                 mov     [esp+5Ch+Str2], eax ; Format
.text:004025A3                 mov     [esp+5Ch+MaxCount], esi
.text:004025A7                 mov     [esp+5Ch+Str1], edx ; Stream
.text:004025AA                 call    fprintf
.text:004025AF                 jmp     short loc_402565
.text:004025B1 ; ---------------------------------------------------------------------------
.text:004025B1
.text:004025B1 loc_4025B1:                             ; CODE XREF: sub_401FB0+578↑j
.text:004025B1                 cmp     byte ptr [ecx], 0
.text:004025B4                 jnz     loc_402533
.text:004025BA                 mov     dword ptr [ebp+0Ch], 0
.text:004025C1                 jmp     loc_402539
.text:004025C6 ; ---------------------------------------------------------------------------
.text:004025C6
.text:004025C6 loc_4025C6:                             ; CODE XREF: sub_401FB0+55E↑j
.text:004025C6                 movzx   edx, byte ptr [eax+1]
.text:004025CA                 cmp     dl, 3Bh ; ';'
.text:004025CD                 jnz     loc_402518
.text:004025D3                 mov     [esp+5Ch+var_2C], 0
.text:004025DB                 mov     [esp+5Ch+var_30], 0
.text:004025E3                 mov     [esp+5Ch+var_34], 0
.text:004025EB                 mov     [esp+5Ch+var_38], 0
.text:004025F3                 cmp     byte ptr [ecx], 0
.text:004025F6                 jz      loc_40286B
.text:004025FC                 inc     dword ptr [ebp+0]
.text:004025FF                 mov     [ebp+0Ch], ecx
.text:00402602
.text:00402602 loc_402602:                             ; CODE XREF: sub_401FB0+8D4↓j
.text:00402602                 mov     edi, [ebp+0Ch]
.text:00402605                 mov     [ebp+14h], edi
.text:00402608                 movzx   eax, byte ptr [edi]
.text:0040260B                 test    al, al
.text:0040260D                 jz      short loc_40261F
.text:0040260F                 cmp     al, 3Dh ; '='
.text:00402611                 jz      short loc_40261F
.text:00402613
.text:00402613 loc_402613:                             ; CODE XREF: sub_401FB0+66D↓j
.text:00402613                 inc     edi
.text:00402614                 movzx   eax, byte ptr [edi]
.text:00402617                 test    al, al
.text:00402619                 jz      short loc_40261F
.text:0040261B                 cmp     al, 3Dh ; '='
.text:0040261D                 jnz     short loc_402613
.text:0040261F
.text:0040261F loc_40261F:                             ; CODE XREF: sub_401FB0+65D↑j
.text:0040261F                                         ; sub_401FB0+661↑j ...
.text:0040261F                 mov     [esp+5Ch+var_3C], 0
.text:00402627                 mov     esi, [esp+5Ch+arg_C]
.text:0040262B                 mov     eax, [esi]
.text:0040262D                 test    eax, eax
.text:0040262F                 jz      loc_4027B0
.text:00402635                 mov     ecx, eax
.text:00402637
.text:00402637 loc_402637:                             ; CODE XREF: sub_401FB0+6B3↓j
.text:00402637                 mov     ebx, [ebp+14h]
.text:0040263A                 mov     eax, edi
.text:0040263C                 mov     [esp+5Ch+Str1], ecx ; Str1
.text:0040263F                 sub     eax, ebx
.text:00402641                 mov     [esp+5Ch+MaxCount], eax ; MaxCount
.text:00402645                 mov     [esp+5Ch+Str2], ebx ; Str2
.text:00402649                 call    strncmp
.text:0040264E                 test    eax, eax
.text:00402650                 jz      loc_402817
.text:00402656
.text:00402656 loc_402656:                             ; CODE XREF: sub_401FB0+88C↓j
.text:00402656                                         ; sub_401FB0+89D↓j
.text:00402656                 inc     [esp+5Ch+var_3C]
.text:0040265A                 add     esi, 10h
.text:0040265D                 mov     edx, [esi]
.text:0040265F                 test    edx, edx
.text:00402661                 mov     ecx, edx
.text:00402663                 jnz     short loc_402637
.text:00402665
.text:00402665 loc_402665:                             ; CODE XREF: sub_401FB0+8B6↓j
.text:00402665                 mov     esi, [esp+5Ch+var_34]
.text:00402669                 test    esi, esi
.text:0040266B                 jz      short loc_402679
.text:0040266D                 mov     ebx, [esp+5Ch+var_30]
.text:00402671                 test    ebx, ebx
.text:00402673                 jz      loc_4027C1
.text:00402679
.text:00402679 loc_402679:                             ; CODE XREF: sub_401FB0+6BB↑j
.text:00402679                 mov     esi, [esp+5Ch+var_2C]
.text:0040267D                 test    esi, esi
.text:0040267F                 jz      loc_4027B0
.text:00402685                 cmp     byte ptr [edi], 0
.text:00402688                 jz      loc_402730
.text:0040268E                 mov     ecx, [esp+5Ch+var_2C]
.text:00402692                 mov     ebx, [ecx+4]
.text:00402695                 test    ebx, ebx
.text:00402697                 jz      short loc_4026D8
.text:00402699                 lea     edx, [edi+1]
.text:0040269C                 mov     [ebp+0Ch], edx
.text:0040269F
.text:0040269F loc_40269F:                             ; CODE XREF: sub_401FB0+788↓j
.text:0040269F                                         ; sub_401FB0+7A7↓j
.text:0040269F                 mov     edi, [ebp+14h]
.text:004026A2                 mov     [esp+5Ch+Str1], edi ; Str
.text:004026A5                 call    strlen
.text:004026AA                 add     [ebp+14h], eax
.text:004026AD                 mov     eax, [esp+5Ch+arg_10]
.text:004026B1                 test    eax, eax
.text:004026B3                 jz      short loc_4026C0
.text:004026B5                 mov     edx, [esp+5Ch+var_38]
.text:004026B9                 mov     ebp, [esp+5Ch+arg_10]
.text:004026BD                 mov     [ebp+0], edx
.text:004026C0
.text:004026C0 loc_4026C0:                             ; CODE XREF: sub_401FB0+703↑j
.text:004026C0                 mov     eax, [esp+5Ch+var_2C]
.text:004026C4                 mov     ecx, [eax+8]
.text:004026C7                 test    ecx, ecx
.text:004026C9                 jnz     loc_40228A
.text:004026CF                 mov     ecx, [esp+5Ch+var_2C]
.text:004026D3                 jmp     loc_402282
.text:004026D8 ; ---------------------------------------------------------------------------
.text:004026D8
.text:004026D8 loc_4026D8:                             ; CODE XREF: sub_401FB0+6E7↑j
.text:004026D8                 mov     eax, [esp+5Ch+var_14]
.text:004026DC                 test    eax, eax
.text:004026DE                 jnz     short loc_4026F3
.text:004026E0
.text:004026E0 loc_4026E0:                             ; CODE XREF: sub_401FB0+779↓j
.text:004026E0                 mov     ecx, [ebp+14h]
.text:004026E3                 mov     [esp+5Ch+Str1], ecx ; Str
.text:004026E6                 call    strlen
.text:004026EB                 add     [ebp+14h], eax
.text:004026EE                 jmp     loc_402308
.text:004026F3 ; ---------------------------------------------------------------------------
.text:004026F3
.text:004026F3 loc_4026F3:                             ; CODE XREF: sub_401FB0+72E↑j
.text:004026F3                 mov     [esp+5Ch+Str1], offset aSOptionWSDoesn ; "%s: option `-W %s' doesn't allow an arg"...
.text:004026FA                 call    ds:libintl_gettext
.text:00402700                 mov     edx, [esp+5Ch+var_2C]
.text:00402704                 mov     ebx, [esp+5Ch+arg_4]
.text:00402708                 mov     edi, [edx]
.text:0040270A                 mov     [esp+5Ch+var_50], edi
.text:0040270E                 mov     edi, ds:_iob
.text:00402714                 mov     esi, [ebx]
.text:00402716                 mov     [esp+5Ch+Str2], eax ; Format
.text:0040271A                 add     edi, 40h ; '@'
.text:0040271D                 mov     [esp+5Ch+MaxCount], esi
.text:00402721                 mov     [esp+5Ch+Str1], edi ; Stream
.text:00402724                 call    fprintf
.text:00402729                 jmp     short loc_4026E0
.text:00402729 ; ---------------------------------------------------------------------------
.text:0040272B                 align 10h
.text:00402730
.text:00402730 loc_402730:                             ; CODE XREF: sub_401FB0+6D8↑j
.text:00402730                 mov     esi, [esp+5Ch+var_2C]
.text:00402734                 cmp     dword ptr [esi+4], 1
.text:00402738                 jnz     loc_40269F
.text:0040273E                 mov     ecx, [ebp+0]
.text:00402741                 cmp     ecx, [esp+5Ch+arg_0]
.text:00402745                 jge     short loc_40275C
.text:00402747                 mov     eax, [esp+5Ch+arg_4]
.text:0040274B                 lea     ebx, [ecx+1]
.text:0040274E                 mov     [ebp+0], ebx
.text:00402751                 mov     edi, [eax+ecx*4]
.text:00402754                 mov     [ebp+0Ch], edi
.text:00402757                 jmp     loc_40269F
.text:0040275C ; ---------------------------------------------------------------------------
.text:0040275C
.text:0040275C loc_40275C:                             ; CODE XREF: sub_401FB0+795↑j
.text:0040275C                 mov     edx, [esp+5Ch+var_14]
.text:00402760                 test    edx, edx
.text:00402762                 jnz     short loc_402777
.text:00402764
.text:00402764 loc_402764:                             ; CODE XREF: sub_401FB0+7FE↓j
.text:00402764                 mov     edx, [ebp+14h]
.text:00402767                 mov     [esp+5Ch+Str1], edx ; Str
.text:0040276A                 call    strlen
.text:0040276F                 add     [ebp+14h], eax
.text:00402772                 jmp     loc_402399
.text:00402777 ; ---------------------------------------------------------------------------
.text:00402777
.text:00402777 loc_402777:                             ; CODE XREF: sub_401FB0+7B2↑j
.text:00402777                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:0040277E                 call    ds:libintl_gettext
.text:00402784                 mov     ecx, [ebp+0]
.text:00402787                 mov     ebx, [esp+5Ch+arg_4]
.text:0040278B                 mov     edi, [ebx+ecx*4-4]
.text:0040278F                 mov     ecx, ds:_iob
.text:00402795                 mov     [esp+5Ch+var_50], edi
.text:00402799                 mov     esi, [ebx]
.text:0040279B                 add     ecx, 40h ; '@'
.text:0040279E                 mov     [esp+5Ch+Str2], eax ; Format
.text:004027A2                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:004027A5                 mov     [esp+5Ch+MaxCount], esi
.text:004027A9                 call    fprintf
.text:004027AE                 jmp     short loc_402764
.text:004027B0 ; ---------------------------------------------------------------------------
.text:004027B0
.text:004027B0 loc_4027B0:                             ; CODE XREF: sub_401FB0+67F↑j
.text:004027B0                                         ; sub_401FB0+6CF↑j
.text:004027B0                 mov     dword ptr [ebp+14h], 0
.text:004027B7                 mov     eax, 57h ; 'W'
.text:004027BC                 jmp     loc_402107
.text:004027C1 ; ---------------------------------------------------------------------------
.text:004027C1
.text:004027C1 loc_4027C1:                             ; CODE XREF: sub_401FB0+6C3↑j
.text:004027C1                 mov     edi, [esp+5Ch+var_14]
.text:004027C5                 test    edi, edi
.text:004027C7                 jnz     short loc_4027DF
.text:004027C9
.text:004027C9 loc_4027C9:                             ; CODE XREF: sub_401FB0+865↓j
.text:004027C9                 mov     edx, [ebp+14h]
.text:004027CC                 mov     [esp+5Ch+Str1], edx ; Str
.text:004027CF                 call    strlen
.text:004027D4                 add     [ebp+14h], eax
.text:004027D7                 inc     dword ptr [ebp+0]
.text:004027DA                 jmp     loc_402308
.text:004027DF ; ---------------------------------------------------------------------------
.text:004027DF
.text:004027DF loc_4027DF:                             ; CODE XREF: sub_401FB0+817↑j
.text:004027DF                 mov     [esp+5Ch+Str1], offset aSOptionWSIsAmb ; "%s: option `-W %s' is ambiguous\n"
.text:004027E6                 call    ds:libintl_gettext
.text:004027EC                 mov     ecx, [ebp+0]
.text:004027EF                 mov     ebx, [esp+5Ch+arg_4]
.text:004027F3                 mov     edi, [ebx+ecx*4]
.text:004027F6                 mov     ecx, ds:_iob
.text:004027FC                 mov     [esp+5Ch+var_50], edi
.text:00402800                 mov     esi, [ebx]
.text:00402802                 add     ecx, 40h ; '@'
.text:00402805                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402809                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:0040280C                 mov     [esp+5Ch+MaxCount], esi
.text:00402810                 call    fprintf
.text:00402815                 jmp     short loc_4027C9
.text:00402817 ; ---------------------------------------------------------------------------
.text:00402817
.text:00402817 loc_402817:                             ; CODE XREF: sub_401FB0+6A0↑j
.text:00402817                 mov     edx, [ebp+14h]
.text:0040281A                 mov     ebx, edi
.text:0040281C                 mov     ecx, [esi]
.text:0040281E                 sub     ebx, edx
.text:00402820                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00402823                 call    strlen
.text:00402828                 cmp     ebx, eax
.text:0040282A                 jz      short loc_402852
.text:0040282C                 mov     ebx, [esp+5Ch+var_2C]
.text:00402830                 test    ebx, ebx
.text:00402832                 jz      short loc_402841
.text:00402834                 mov     [esp+5Ch+var_34], 1
.text:0040283C                 jmp     loc_402656
.text:00402841 ; ---------------------------------------------------------------------------
.text:00402841
.text:00402841 loc_402841:                             ; CODE XREF: sub_401FB0+882↑j
.text:00402841                 mov     [esp+5Ch+var_2C], esi
.text:00402845                 mov     ecx, [esp+5Ch+var_3C]
.text:00402849                 mov     [esp+5Ch+var_38], ecx
.text:0040284D                 jmp     loc_402656
.text:00402852 ; ---------------------------------------------------------------------------
.text:00402852
.text:00402852 loc_402852:                             ; CODE XREF: sub_401FB0+87A↑j
.text:00402852                 mov     [esp+5Ch+var_2C], esi
.text:00402856                 mov     eax, [esp+5Ch+var_3C]
.text:0040285A                 mov     [esp+5Ch+var_30], 1
.text:00402862                 mov     [esp+5Ch+var_38], eax
.text:00402866                 jmp     loc_402665
.text:0040286B ; ---------------------------------------------------------------------------
.text:0040286B
.text:0040286B loc_40286B:                             ; CODE XREF: sub_401FB0+646↑j
.text:0040286B                 mov     edx, [ebp+0]
.text:0040286E                 cmp     edx, [esp+5Ch+arg_0]
.text:00402872                 jz      short loc_402889
.text:00402874                 mov     ebx, [esp+5Ch+arg_4]
.text:00402878                 lea     esi, [edx+1]
.text:0040287B                 mov     [ebp+0], esi
.text:0040287E                 mov     edi, [ebx+edx*4]
.text:00402881                 mov     [ebp+0Ch], edi
.text:00402884                 jmp     loc_402602
.text:00402889 ; ---------------------------------------------------------------------------
.text:00402889
.text:00402889 loc_402889:                             ; CODE XREF: sub_401FB0+8C2↑j
.text:00402889                 mov     edi, [esp+5Ch+var_14]
.text:0040288D                 test    edi, edi
.text:0040288F                 jnz     short loc_4028AC
.text:00402891
.text:00402891 loc_402891:                             ; CODE XREF: sub_401FB0+92C↓j
.text:00402891                 mov     [ebp+8], esi
.text:00402894                 mov     ebp, [esp+5Ch+Str]
.text:00402898                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:0040289C                 jz      short loc_4028A8
.text:0040289E                 mov     bl, 3Fh ; '?'
.text:004028A0
.text:004028A0 loc_4028A0:                             ; CODE XREF: sub_401FB0+8FA↓j
.text:004028A0                 movsx   eax, bl
.text:004028A3                 jmp     loc_402107
.text:004028A8 ; ---------------------------------------------------------------------------
.text:004028A8
.text:004028A8 loc_4028A8:                             ; CODE XREF: sub_401FB0+8EC↑j
.text:004028A8                 mov     bl, 3Ah ; ':'
.text:004028AA                 jmp     short loc_4028A0
.text:004028AC ; ---------------------------------------------------------------------------
.text:004028AC
.text:004028AC loc_4028AC:                             ; CODE XREF: sub_401FB0+8DF↑j
.text:004028AC                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:004028B3                 call    ds:libintl_gettext
.text:004028B9                 mov     [esp+5Ch+var_50], esi
.text:004028BD                 mov     edx, [esp+5Ch+arg_4]
.text:004028C1                 mov     ecx, ds:_iob
.text:004028C7                 mov     ebx, [edx]
.text:004028C9                 add     ecx, 40h ; '@'
.text:004028CC                 mov     [esp+5Ch+Str2], eax ; Format
.text:004028D0                 mov     [esp+5Ch+MaxCount], ebx
.text:004028D4                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:004028D7                 call    fprintf
.text:004028DC                 jmp     short loc_402891
.text:004028DC ; ---------------------------------------------------------------------------
.text:004028DE                 align 10h
.text:004028E0
.text:004028E0 loc_4028E0:                             ; CODE XREF: sub_401FB0+54C↑j
.text:004028E0                                         ; sub_401FB0+555↑j
.text:004028E0                 mov     eax, [esp+5Ch+var_14]
.text:004028E4                 test    eax, eax
.text:004028E6                 jz      short loc_40291F
.text:004028E8                 mov     ebx, [ebp+1Ch]
.text:004028EB                 test    ebx, ebx
.text:004028ED                 jz      short loc_402927
.text:004028EF                 mov     [esp+5Ch+Str1], offset aSIllegalOption ; "%s: illegal option -- %c\n"
.text:004028F6
.text:004028F6 loc_4028F6:                             ; CODE XREF: sub_401FB0+97E↓j
.text:004028F6                 call    ds:libintl_gettext
.text:004028FC                 mov     [esp+5Ch+var_50], esi
.text:00402900                 mov     ebx, [esp+5Ch+arg_4]
.text:00402904                 mov     edx, ds:_iob
.text:0040290A                 mov     esi, [ebx]
.text:0040290C                 add     edx, 40h ; '@'
.text:0040290F                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402913                 mov     [esp+5Ch+MaxCount], esi
.text:00402917                 mov     [esp+5Ch+Str1], edx ; Stream
.text:0040291A                 call    fprintf
.text:0040291F
.text:0040291F loc_40291F:                             ; CODE XREF: sub_401FB0+936↑j
.text:0040291F                 mov     [ebp+8], edi
.text:00402922                 jmp     loc_402308
.text:00402927 ; ---------------------------------------------------------------------------
.text:00402927
.text:00402927 loc_402927:                             ; CODE XREF: sub_401FB0+93D↑j
.text:00402927                 mov     [esp+5Ch+Str1], offset aSInvalidOption ; "%s: invalid option -- %c\n"
.text:0040292E                 jmp     short loc_4028F6
.text:00402930 ; ---------------------------------------------------------------------------
.text:00402930
.text:00402930 loc_402930:                             ; CODE XREF: sub_401FB0+26E↑j
.text:00402930                 mov     edi, [esp+5Ch+var_14]
.text:00402934                 test    edi, edi
.text:00402936                 jnz     short loc_40294E
.text:00402938
.text:00402938 loc_402938:                             ; CODE XREF: sub_401FB0+9D4↓j
.text:00402938                 mov     edx, [ebp+14h]
.text:0040293B                 mov     [esp+5Ch+Str1], edx ; Str
.text:0040293E                 call    strlen
.text:00402943                 add     [ebp+14h], eax
.text:00402946                 inc     dword ptr [ebp+0]
.text:00402949                 jmp     loc_40248E
.text:0040294E ; ---------------------------------------------------------------------------
.text:0040294E
.text:0040294E loc_40294E:                             ; CODE XREF: sub_401FB0+986↑j
.text:0040294E                 mov     [esp+5Ch+Str1], offset aSOptionSIsAmbi ; "%s: option `%s' is ambiguous\n"
.text:00402955                 call    ds:libintl_gettext
.text:0040295B                 mov     ebx, [ebp+0]
.text:0040295E                 mov     edi, [esp+5Ch+arg_4]
.text:00402962                 mov     ecx, [edi+ebx*4]
.text:00402965                 mov     ebx, ds:_iob
.text:0040296B                 mov     [esp+5Ch+var_50], ecx
.text:0040296F                 mov     esi, [edi]
.text:00402971                 add     ebx, 40h ; '@'
.text:00402974                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402978                 mov     [esp+5Ch+Str1], ebx ; Stream
.text:0040297B                 mov     [esp+5Ch+MaxCount], esi
.text:0040297F                 call    fprintf
.text:00402984                 jmp     short loc_402938
.text:00402986 ; ---------------------------------------------------------------------------
.text:00402986
.text:00402986 loc_402986:                             ; CODE XREF: sub_401FB0+246↑j
.text:00402986                 mov     ecx, [ebp+14h]
.text:00402989                 mov     ebx, edi
.text:0040298B                 mov     edx, [esi]
.text:0040298D                 sub     ebx, ecx
.text:0040298F                 mov     [esp+5Ch+Str1], edx ; Str
.text:00402992                 call    strlen
.text:00402997                 cmp     ebx, eax
.text:00402999                 jz      short loc_4029F1
.text:0040299B                 mov     ebx, [esp+5Ch+var_18]
.text:0040299F                 test    ebx, ebx
.text:004029A1                 jz      short loc_4029E0
.text:004029A3                 mov     edx, [esp+5Ch+arg_14]
.text:004029A7                 test    edx, edx
.text:004029A9                 jnz     short loc_4029B7
.text:004029AB                 mov     ecx, [esp+5Ch+var_18]
.text:004029AF                 mov     ebx, [esi+4]
.text:004029B2                 cmp     [ecx+4], ebx
.text:004029B5                 jz      short loc_4029C4
.text:004029B7
.text:004029B7 loc_4029B7:                             ; CODE XREF: sub_401FB0+9F9↑j
.text:004029B7                                         ; sub_401FB0+A1A↓j ...
.text:004029B7                 mov     [esp+5Ch+var_20], 1
.text:004029BF                 jmp     loc_4021FC
.text:004029C4 ; ---------------------------------------------------------------------------
.text:004029C4
.text:004029C4 loc_4029C4:                             ; CODE XREF: sub_401FB0+A05↑j
.text:004029C4                 mov     edx, [esi+8]
.text:004029C7                 cmp     [ecx+8], edx
.text:004029CA                 jnz     short loc_4029B7
.text:004029CC                 mov     ebx, [esi+0Ch]
.text:004029CF                 cmp     [ecx+0Ch], ebx
.text:004029D2                 jnz     short loc_4029B7
.text:004029D4                 jmp     loc_4021FC
.text:004029D4 ; ---------------------------------------------------------------------------
.text:004029D9                 align 10h
.text:004029E0
.text:004029E0 loc_4029E0:                             ; CODE XREF: sub_401FB0+9F1↑j
.text:004029E0                 mov     [esp+5Ch+var_18], esi
.text:004029E4                 mov     eax, [esp+5Ch+var_28]
.text:004029E8                 mov     [esp+5Ch+var_24], eax
.text:004029EC                 jmp     loc_4021FC
.text:004029F1 ; ---------------------------------------------------------------------------
.text:004029F1
.text:004029F1 loc_4029F1:                             ; CODE XREF: sub_401FB0+9E9↑j
.text:004029F1                 mov     [esp+5Ch+var_18], esi
.text:004029F5                 mov     ecx, [esp+5Ch+var_28]
.text:004029F9                 mov     [esp+5Ch+var_1C], 1
.text:00402A01                 mov     [esp+5Ch+var_24], ecx
.text:00402A05                 jmp     loc_402210
.text:00402A0A ; ---------------------------------------------------------------------------
.text:00402A0A
.text:00402A0A loc_402A0A:                             ; CODE XREF: sub_401FB0+1BF↑j
.text:00402A0A                 mov     eax, [esp+5Ch+Str]
.text:00402A0E                 movsx   esi, dl
.text:00402A11                 mov     [esp+5Ch+Str2], esi ; Val
.text:00402A15                 mov     [esp+5Ch+Str1], eax ; Str
.text:00402A18                 call    strchr
.text:00402A1D                 test    eax, eax
.text:00402A1F                 jnz     loc_4024D0
.text:00402A25                 jmp     loc_402175
.text:00402A2A ; ---------------------------------------------------------------------------
.text:00402A2A
.text:00402A2A loc_402A2A:                             ; CODE XREF: sub_401FB0+17C↑j
.text:00402A2A                 mov     ecx, 1
.text:00402A2F                 jmp     loc_402132
.text:00402A34 ; ---------------------------------------------------------------------------
.text:00402A34
.text:00402A34 loc_402A34:                             ; CODE XREF: sub_401FB0+D4↑j
.text:00402A34                                         ; sub_401FB0+130↑j
.text:00402A34                 mov     eax, [ebp+20h]
.text:00402A37                 cmp     eax, [ebp+24h]
.text:00402A3A                 jz      loc_402110
.text:00402A40                 mov     [ebp+0], eax
.text:00402A43                 jmp     loc_402110
.text:00402A48 ; ---------------------------------------------------------------------------
.text:00402A48
.text:00402A48 loc_402A48:                             ; CODE XREF: sub_401FB0+FE↑j
.text:00402A48                 mov     [ebp+20h], eax
.text:00402A4B                 jmp     loc_4020D0
.text:00402A50 ; ---------------------------------------------------------------------------
.text:00402A50
.text:00402A50 loc_402A50:                             ; CODE XREF: sub_401FB0+CA↑j
.text:00402A50                 mov     edx, [ebp+20h]
.text:00402A53                 mov     eax, [ebp+24h]
.text:00402A56                 cmp     edx, eax
.text:00402A58                 jz      short loc_402AD0
.text:00402A5A                 cmp     eax, ebx
.text:00402A5C                 jz      short loc_402A71
.text:00402A5E                 mov     [esp+5Ch+Str2], ebp
.text:00402A62                 mov     ebx, [esp+5Ch+arg_4]
.text:00402A66                 mov     [esp+5Ch+Str1], ebx
.text:00402A69                 call    sub_402C60
.text:00402A6E                 mov     ebx, [ebp+0]
.text:00402A71
.text:00402A71 loc_402A71:                             ; CODE XREF: sub_401FB0+AAC↑j
.text:00402A71                                         ; sub_401FB0+B22↓j ...
.text:00402A71                 cmp     ebx, [esp+5Ch+arg_0]
.text:00402A75                 jge     short loc_402AC0
.text:00402A77                 mov     esi, [esp+5Ch+arg_4]
.text:00402A7B                 mov     eax, [esi+ebx*4]
.text:00402A7E                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00402A81                 jz      short loc_402AC8
.text:00402A83                 lea     esi, [esi+0]
.text:00402A89                 lea     edi, [edi+0]
.text:00402A90
.text:00402A90 loc_402A90:                             ; CODE XREF: sub_401FB0+AFC↓j
.text:00402A90                                         ; sub_401FB0+B1C↓j
.text:00402A90                 lea     eax, [ebx+1]
.text:00402A93                 mov     ebx, eax
.text:00402A95                 mov     [ebp+0], eax
.text:00402A98                 cmp     eax, [esp+5Ch+arg_0]
.text:00402A9C                 jge     short loc_402AC0
.text:00402A9E                 mov     edi, [esp+5Ch+arg_4]
.text:00402AA2                 mov     edx, [edi+eax*4]
.text:00402AA5                 cmp     byte ptr [edx], 2Dh ; '-'
.text:00402AA8                 jz      short loc_402AB0
.text:00402AAA
.text:00402AAA loc_402AAA:                             ; CODE XREF: sub_401FB0+B04↓j
.text:00402AAA                 mov     ebx, eax
.text:00402AAC                 jmp     short loc_402A90
.text:00402AAC ; ---------------------------------------------------------------------------
.text:00402AAE                 align 10h
.text:00402AB0
.text:00402AB0 loc_402AB0:                             ; CODE XREF: sub_401FB0+AF8↑j
.text:00402AB0                 cmp     byte ptr [edx+1], 0
.text:00402AB4                 jz      short loc_402AAA
.text:00402AB6                 lea     esi, [esi+0]
.text:00402AB9                 lea     edi, [edi+0]
.text:00402AC0
.text:00402AC0 loc_402AC0:                             ; CODE XREF: sub_401FB0+AC5↑j
.text:00402AC0                                         ; sub_401FB0+AEC↑j ...
.text:00402AC0                 mov     [ebp+24h], ebx
.text:00402AC3                 jmp     loc_402080
.text:00402AC8 ; ---------------------------------------------------------------------------
.text:00402AC8
.text:00402AC8 loc_402AC8:                             ; CODE XREF: sub_401FB0+AD1↑j
.text:00402AC8                 cmp     byte ptr [eax+1], 0
.text:00402ACC                 jz      short loc_402A90
.text:00402ACE                 jmp     short loc_402AC0
.text:00402AD0 ; ---------------------------------------------------------------------------
.text:00402AD0
.text:00402AD0 loc_402AD0:                             ; CODE XREF: sub_401FB0+AA8↑j
.text:00402AD0                 cmp     edx, ebx
.text:00402AD2                 jz      short loc_402A71
.text:00402AD4                 mov     [ebp+20h], ebx
.text:00402AD7                 jmp     short loc_402A71
.text:00402AD9 ; ---------------------------------------------------------------------------
.text:00402AD9
.text:00402AD9 loc_402AD9:                             ; CODE XREF: sub_401FB0+88↑j
.text:00402AD9                 mov     dword ptr [ebp+18h], 0
.text:00402AE0                 mov     esi, [esp+5Ch+Str]
.text:00402AE4
.text:00402AE4 loc_402AE4:                             ; CODE XREF: sub_401FB0+B49↓j
.text:00402AE4                 inc     esi
.text:00402AE5                 jmp     loc_402048
.text:00402AE5 ; ---------------------------------------------------------------------------
.text:00402AEA                 align 10h
.text:00402AF0
.text:00402AF0 loc_402AF0:                             ; CODE XREF: sub_401FB0+80↑j
.text:00402AF0                 mov     dword ptr [ebp+18h], 2
.text:00402AF7                 mov     esi, ecx
.text:00402AF9                 jmp     short loc_402AE4
.text:00402AF9 ; ---------------------------------------------------------------------------
.text:00402AFB                 align 10h
.text:00402B00
.text:00402B00 loc_402B00:                             ; CODE XREF: sub_401FB0+69↑j
.text:00402B00                 mov     [esp+5Ch+Str1], offset VarName ; "POSIXLY_CORRECT"
.text:00402B07                 call    getenv
.text:00402B0C                 test    eax, eax
.text:00402B0E                 jz      loc_402024
.text:00402B14                 jmp     loc_40201F
.text:00402B14 ; ---------------------------------------------------------------------------
.text:00402B19                 align 10h
.text:00402B20
.text:00402B20 loc_402B20:                             ; CODE XREF: sub_401FB0+3F↑j
.text:00402B20                 mov     dword ptr [ebp+0], 1
.text:00402B27                 mov     ebx, 1
.text:00402B2C                 jmp     loc_402000
.text:00402B2C sub_401FB0      endp
.text:00402B2C
.text:00402B31 ; ---------------------------------------------------------------------------
.text:00402B31                 jmp     short sub_402B40
.text:00402B31 ; ---------------------------------------------------------------------------
.text:00402B33                 align 10h
.text:00402B40
.text:00402B40 ; =============== S U B R O U T I N E =======================================
.text:00402B40
.text:00402B40
.text:00402B40 ; int __cdecl sub_402B40(int, int, char *, int, int, int, int)
.text:00402B40 sub_402B40      proc near               ; CODE XREF: .text:00402B31↑j
.text:00402B40                                         ; sub_403550+3A↓p ...
.text:00402B40
.text:00402B40 var_2C          = dword ptr -2Ch
.text:00402B40 var_28          = dword ptr -28h
.text:00402B40 Str             = dword ptr -24h
.text:00402B40 var_20          = dword ptr -20h
.text:00402B40 var_1C          = dword ptr -1Ch
.text:00402B40 var_18          = dword ptr -18h
.text:00402B40 var_14          = dword ptr -14h
.text:00402B40 var_10          = dword ptr -10h
.text:00402B40 arg_0           = dword ptr  4
.text:00402B40 arg_4           = dword ptr  8
.text:00402B40 arg_8           = dword ptr  0Ch
.text:00402B40 arg_C           = dword ptr  10h
.text:00402B40 arg_10          = dword ptr  14h
.text:00402B40 arg_14          = dword ptr  18h
.text:00402B40 arg_18          = dword ptr  1Ch
.text:00402B40
.text:00402B40                 sub     esp, 2Ch
.text:00402B43                 mov     edx, dword_406010
.text:00402B49                 mov     [esp+2Ch+var_10], offset dword_407020 ; int
.text:00402B51                 mov     ecx, dword_406014
.text:00402B57                 mov     ds:dword_407020, edx
.text:00402B5D                 mov     edx, [esp+2Ch+arg_18]
.text:00402B61                 mov     ds:dword_407024, ecx
.text:00402B67                 mov     ecx, [esp+2Ch+arg_14]
.text:00402B6B                 mov     [esp+2Ch+var_14], edx ; int
.text:00402B6F                 mov     edx, [esp+2Ch+arg_10]
.text:00402B73                 mov     [esp+2Ch+var_18], ecx ; int
.text:00402B77                 mov     ecx, [esp+2Ch+arg_C]
.text:00402B7B                 mov     [esp+2Ch+var_1C], edx ; int
.text:00402B7F                 mov     edx, [esp+2Ch+arg_8]
.text:00402B83                 mov     [esp+2Ch+var_20], ecx ; int
.text:00402B87                 mov     ecx, [esp+2Ch+arg_4]
.text:00402B8B                 mov     [esp+2Ch+Str], edx ; Str
.text:00402B8F                 mov     edx, [esp+2Ch+arg_0]
.text:00402B93                 mov     [esp+2Ch+var_28], ecx ; int
.text:00402B97                 mov     [esp+2Ch+var_2C], edx ; int
.text:00402B9A                 call    sub_401FB0
.text:00402B9F                 mov     ecx, ds:dword_407020
.text:00402BA5                 mov     dword_406010, ecx
.text:00402BAB                 mov     ecx, ds:dword_40702C
.text:00402BB1                 mov     ds:dword_4071D0, ecx
.text:00402BB7                 mov     ecx, ds:dword_407028
.text:00402BBD                 mov     dword_406018, ecx
.text:00402BC3                 add     esp, 2Ch
.text:00402BC6                 retn
.text:00402BC6 sub_402B40      endp
.text:00402BC6
.text:00402BC6 ; ---------------------------------------------------------------------------
.text:00402BC7                 align 10h
.text:00402BD0                 sub     esp, 2Ch
.text:00402BD3                 mov     edx, dword_406010
.text:00402BD9                 mov     dword ptr [esp+1Ch], offset dword_407020
.text:00402BE1                 mov     ecx, dword_406014
.text:00402BE7                 mov     dword ptr [esp+18h], 1
.text:00402BEF                 mov     ds:dword_407020, edx
.text:00402BF5                 mov     edx, [esp+38h]
.text:00402BF9                 mov     ds:dword_407024, ecx
.text:00402BFF                 mov     ecx, [esp+34h]
.text:00402C03                 mov     [esp+8], edx
.text:00402C07                 mov     edx, [esp+30h]
.text:00402C0B                 mov     [esp+4], ecx
.text:00402C0F                 mov     dword ptr [esp+14h], 0
.text:00402C17                 mov     dword ptr [esp+10h], 0
.text:00402C1F                 mov     dword ptr [esp+0Ch], 0
.text:00402C27                 mov     [esp], edx
.text:00402C2A                 call    sub_401FB0
.text:00402C2F                 mov     ecx, ds:dword_407020
.text:00402C35                 mov     dword_406010, ecx
.text:00402C3B                 mov     ecx, ds:dword_40702C
.text:00402C41                 mov     ds:dword_4071D0, ecx
.text:00402C47                 mov     ecx, ds:dword_407028
.text:00402C4D                 mov     dword_406018, ecx
.text:00402C53                 add     esp, 2Ch
.text:00402C56                 retn
.text:00402C56 ; ---------------------------------------------------------------------------
.text:00402C57                 align 10h
.text:00402C60
.text:00402C60 ; =============== S U B R O U T I N E =======================================
.text:00402C60
.text:00402C60
.text:00402C60 sub_402C60      proc near               ; CODE XREF: sub_401FB0+113↑p
.text:00402C60                                         ; sub_401FB0+AB9↑p
.text:00402C60
.text:00402C60 var_2C          = dword ptr -2Ch
.text:00402C60 var_28          = dword ptr -28h
.text:00402C60 var_24          = dword ptr -24h
.text:00402C60 var_20          = dword ptr -20h
.text:00402C60 var_1C          = dword ptr -1Ch
.text:00402C60 var_18          = dword ptr -18h
.text:00402C60 var_14          = dword ptr -14h
.text:00402C60 arg_0           = dword ptr  4
.text:00402C60 arg_4           = dword ptr  8
.text:00402C60
.text:00402C60                 push    ebp
.text:00402C61                 push    edi
.text:00402C62                 push    esi
.text:00402C63                 push    ebx
.text:00402C64                 sub     esp, 1Ch
.text:00402C67                 mov     ecx, [esp+2Ch+arg_4]
.text:00402C6B                 mov     eax, [esp+2Ch+arg_4]
.text:00402C6F                 mov     ebx, [esp+2Ch+arg_4]
.text:00402C73                 mov     edx, [ecx+20h]
.text:00402C76                 mov     edi, [esp+2Ch+arg_0]
.text:00402C7A                 mov     ecx, [ebx]
.text:00402C7C                 mov     [esp+2Ch+var_2C], edx
.text:00402C7F                 mov     [esp+2Ch+var_14], edx
.text:00402C83                 mov     edx, [eax+24h]
.text:00402C86                 mov     [esp+2Ch+var_28], ecx
.text:00402C8A                 mov     [esp+2Ch+var_1C], ecx
.text:00402C8E                 cmp     ecx, edx
.text:00402C90                 mov     [esp+2Ch+var_18], edx
.text:00402C94                 jle     short loc_402D10
.text:00402C96                 mov     esi, [esp+2Ch+var_2C]
.text:00402C99                 cmp     edx, esi
.text:00402C9B                 jle     short loc_402D10
.text:00402C9D                 lea     esi, [esi+0]
.text:00402CA0
.text:00402CA0 loc_402CA0:                             ; CODE XREF: sub_402C60+A1↓j
.text:00402CA0                 mov     ebx, [esp+2Ch+var_1C]
.text:00402CA4                 mov     edx, [esp+2Ch+var_18]
.text:00402CA8                 mov     ebp, [esp+2Ch+var_18]
.text:00402CAC                 mov     eax, [esp+2Ch+var_14]
.text:00402CB0                 sub     ebx, edx
.text:00402CB2                 mov     [esp+2Ch+var_20], ebx
.text:00402CB6                 sub     ebp, eax
.text:00402CB8                 cmp     ebx, ebp
.text:00402CBA                 jle     short loc_402D35
.text:00402CBC                 xor     esi, esi
.text:00402CBE                 cmp     esi, ebp
.text:00402CC0                 jge     short loc_402CED
.text:00402CC2                 mov     ecx, [esp+2Ch+var_1C]
.text:00402CC6                 sub     ecx, ebp
.text:00402CC8                 mov     [esp+2Ch+var_24], ecx
.text:00402CCC                 lea     esi, [esi+0]
.text:00402CD0
.text:00402CD0 loc_402CD0:                             ; CODE XREF: sub_402C60+8B↓j
.text:00402CD0                 mov     ecx, [esp+2Ch+var_14]
.text:00402CD4                 mov     edx, [esp+2Ch+var_24]
.text:00402CD8                 add     ecx, esi
.text:00402CDA                 add     edx, esi
.text:00402CDC                 mov     ebx, [edi+ecx*4]
.text:00402CDF                 mov     eax, [edi+edx*4]
.text:00402CE2                 inc     esi
.text:00402CE3                 cmp     esi, ebp
.text:00402CE5                 mov     [edi+ecx*4], eax
.text:00402CE8                 mov     [edi+edx*4], ebx
.text:00402CEB                 jl      short loc_402CD0
.text:00402CED
.text:00402CED loc_402CED:                             ; CODE XREF: sub_402C60+60↑j
.text:00402CED                 sub     [esp+2Ch+var_1C], ebp
.text:00402CF1
.text:00402CF1 loc_402CF1:                             ; CODE XREF: sub_402C60+107↓j
.text:00402CF1                 mov     eax, [esp+2Ch+var_18]
.text:00402CF5                 cmp     [esp+2Ch+var_1C], eax
.text:00402CF9                 jle     short loc_402D10
.text:00402CFB                 mov     ebp, [esp+2Ch+var_14]
.text:00402CFF                 cmp     eax, ebp
.text:00402D01                 jg      short loc_402CA0
.text:00402D03                 lea     esi, [esi+0]
.text:00402D09                 lea     edi, [edi+0]
.text:00402D10
.text:00402D10 loc_402D10:                             ; CODE XREF: sub_402C60+34↑j
.text:00402D10                                         ; sub_402C60+3B↑j ...
.text:00402D10                 mov     esi, [esp+2Ch+var_28]
.text:00402D14                 mov     ecx, [esp+2Ch+var_18]
.text:00402D18                 mov     eax, [esp+2Ch+var_2C]
.text:00402D1B                 mov     edi, [esp+2Ch+arg_4]
.text:00402D1F                 mov     edx, [esp+2Ch+var_28]
.text:00402D23                 sub     esi, ecx
.text:00402D25                 add     esi, eax
.text:00402D27                 mov     [edi+20h], esi
.text:00402D2A                 mov     [edi+24h], edx
.text:00402D2D                 add     esp, 1Ch
.text:00402D30                 pop     ebx
.text:00402D31                 pop     esi
.text:00402D32                 pop     edi
.text:00402D33                 pop     ebp
.text:00402D34                 retn
.text:00402D35 ; ---------------------------------------------------------------------------
.text:00402D35
.text:00402D35 loc_402D35:                             ; CODE XREF: sub_402C60+5A↑j
.text:00402D35                 xor     esi, esi
.text:00402D37                 cmp     esi, [esp+2Ch+var_20]
.text:00402D3B                 jge     short loc_402D5F
.text:00402D3D                 lea     esi, [esi+0]
.text:00402D40
.text:00402D40 loc_402D40:                             ; CODE XREF: sub_402C60+FD↓j
.text:00402D40                 mov     ebx, [esp+2Ch+var_14]
.text:00402D44                 mov     ebp, [esp+2Ch+var_18]
.text:00402D48                 add     ebx, esi
.text:00402D4A                 add     ebp, esi
.text:00402D4C                 mov     edx, [edi+ebx*4]
.text:00402D4F                 inc     esi
.text:00402D50                 cmp     esi, [esp+2Ch+var_20]
.text:00402D54                 mov     ecx, [edi+ebp*4]
.text:00402D57                 mov     [edi+ebx*4], ecx
.text:00402D5A                 mov     [edi+ebp*4], edx
.text:00402D5D                 jl      short loc_402D40
.text:00402D5F
.text:00402D5F loc_402D5F:                             ; CODE XREF: sub_402C60+DB↑j
.text:00402D5F                 mov     esi, [esp+2Ch+var_20]
.text:00402D63                 add     [esp+2Ch+var_14], esi
.text:00402D67                 jmp     short loc_402CF1
.text:00402D67 sub_402C60      endp
.text:00402D67
.text:00402D67 ; ---------------------------------------------------------------------------
.text:00402D69                 align 20h
.text:00402D80
.text:00402D80 ; =============== S U B R O U T I N E =======================================
.text:00402D80
.text:00402D80
.text:00402D80 sub_402D80      proc near               ; CODE XREF: sub_4018C0+37↑p
.text:00402D80
.text:00402D80 Size            = dword ptr -0Ch
.text:00402D80 var_4           = dword ptr -4
.text:00402D80 arg_0           = dword ptr  4
.text:00402D80 arg_4           = dword ptr  8
.text:00402D80
.text:00402D80                 sub     esp, 0Ch
.text:00402D83                 xor     edx, edx
.text:00402D85                 mov     ecx, [esp+0Ch+arg_4]
.text:00402D89                 mov     [esp+0Ch+var_4], ebx
.text:00402D8D                 mov     eax, 0FFFFFFFFh
.text:00402D92                 mov     ebx, [esp+0Ch+arg_0]
.text:00402D96                 div     ecx
.text:00402D98                 cmp     eax, ebx
.text:00402D9A                 jb      short loc_402DB9
.text:00402D9C                 mov     edx, ebx
.text:00402D9E                 imul    edx, ecx
.text:00402DA1                 mov     [esp+0Ch+Size], edx ; Size
.text:00402DA4                 call    malloc
.text:00402DA9                 test    eax, eax
.text:00402DAB                 jz      short loc_402DB5
.text:00402DAD
.text:00402DAD loc_402DAD:                             ; CODE XREF: sub_402D80+37↓j
.text:00402DAD                 mov     ebx, [esp+0Ch+var_4]
.text:00402DB1                 add     esp, 0Ch
.text:00402DB4                 retn
.text:00402DB5 ; ---------------------------------------------------------------------------
.text:00402DB5
.text:00402DB5 loc_402DB5:                             ; CODE XREF: sub_402D80+2B↑j
.text:00402DB5                 test    ebx, ebx
.text:00402DB7                 jz      short loc_402DAD
.text:00402DB9
.text:00402DB9 loc_402DB9:                             ; CODE XREF: sub_402D80+1A↑j
.text:00402DB9                 call    sub_4037C0
.text:00402DB9 sub_402D80      endp
.text:00402DB9
.text:00402DB9 ; ---------------------------------------------------------------------------
.text:00402DBE                 align 10h
.text:00402DC0
.text:00402DC0 ; =============== S U B R O U T I N E =======================================
.text:00402DC0
.text:00402DC0
.text:00402DC0 ; int __cdecl sub_402DC0(size_t)
.text:00402DC0 sub_402DC0      proc near               ; CODE XREF: .text:00404309↓p
.text:00402DC0                                         ; .text:004044E6↓p ...
.text:00402DC0
.text:00402DC0 Size            = dword ptr -0Ch
.text:00402DC0 var_4           = dword ptr -4
.text:00402DC0 arg_0           = dword ptr  4
.text:00402DC0
.text:00402DC0                 sub     esp, 0Ch
.text:00402DC3                 mov     [esp+0Ch+var_4], ebx
.text:00402DC7                 mov     ebx, [esp+0Ch+arg_0]
.text:00402DCB                 mov     [esp+0Ch+Size], ebx ; Size
.text:00402DCE                 call    malloc
.text:00402DD3                 test    eax, eax
.text:00402DD5                 jz      short loc_402DE0
.text:00402DD7
.text:00402DD7 loc_402DD7:                             ; CODE XREF: sub_402DC0+22↓j
.text:00402DD7                 mov     ebx, [esp+0Ch+var_4]
.text:00402DDB                 add     esp, 0Ch
.text:00402DDE                 retn
.text:00402DDE ; ---------------------------------------------------------------------------
.text:00402DDF                 align 10h
.text:00402DE0
.text:00402DE0 loc_402DE0:                             ; CODE XREF: sub_402DC0+15↑j
.text:00402DE0                 test    ebx, ebx
.text:00402DE2                 jz      short loc_402DD7
.text:00402DE4                 call    sub_4037C0
.text:00402DE4 sub_402DC0      endp
.text:00402DE4
.text:00402DE4 ; ---------------------------------------------------------------------------
.text:00402DE9                 align 10h
.text:00402DF0                 sub     esp, 1Ch
.text:00402DF3                 xor     edx, edx
.text:00402DF5                 mov     eax, 0FFFFFFFFh
.text:00402DFA                 mov     [esp+14h], ebx
.text:00402DFE                 mov     ecx, [esp+20h]
.text:00402E02                 mov     ebx, [esp+28h]
.text:00402E06                 mov     [esp+18h], esi
.text:00402E0A                 mov     esi, [esp+24h]
.text:00402E0E                 div     ebx
.text:00402E10                 cmp     eax, esi
.text:00402E12                 jb      short loc_402E44
.text:00402E14                 mov     [esp], ecx
.text:00402E17                 mov     edx, esi
.text:00402E19                 imul    edx, ebx
.text:00402E1C                 mov     [esp+4], edx
.text:00402E20                 call    realloc
.text:00402E25                 test    eax, eax
.text:00402E27                 mov     ecx, eax
.text:00402E29                 jz      short loc_402E40
.text:00402E2B
.text:00402E2B loc_402E2B:                             ; CODE XREF: .text:00402E42↓j
.text:00402E2B                 mov     ebx, [esp+14h]
.text:00402E2F                 mov     eax, ecx
.text:00402E31                 mov     esi, [esp+18h]
.text:00402E35                 add     esp, 1Ch
.text:00402E38                 retn
.text:00402E38 ; ---------------------------------------------------------------------------
.text:00402E39                 align 10h
.text:00402E40
.text:00402E40 loc_402E40:                             ; CODE XREF: .text:00402E29↑j
.text:00402E40                 test    esi, esi
.text:00402E42                 jz      short loc_402E2B
.text:00402E44
.text:00402E44 loc_402E44:                             ; CODE XREF: .text:00402E12↑j
.text:00402E44                 call    sub_4037C0
.text:00402E44 ; ---------------------------------------------------------------------------
.text:00402E49                 align 10h
.text:00402E50
.text:00402E50 ; =============== S U B R O U T I N E =======================================
.text:00402E50
.text:00402E50
.text:00402E50 ; int __cdecl sub_402E50(void *, size_t)
.text:00402E50 sub_402E50      proc near               ; CODE XREF: sub_4049D0+5B↓p
.text:00402E50
.text:00402E50 Block           = dword ptr -0Ch
.text:00402E50 Size            = dword ptr -8
.text:00402E50 var_4           = dword ptr -4
.text:00402E50 arg_0           = dword ptr  4
.text:00402E50 arg_4           = dword ptr  8
.text:00402E50
.text:00402E50                 sub     esp, 0Ch
.text:00402E53                 mov     edx, [esp+0Ch+arg_0]
.text:00402E57                 mov     [esp+0Ch+var_4], ebx
.text:00402E5B                 mov     ebx, [esp+0Ch+arg_4]
.text:00402E5F                 mov     [esp+0Ch+Block], edx ; Block
.text:00402E62                 mov     [esp+0Ch+Size], ebx ; Size
.text:00402E66                 call    realloc
.text:00402E6B                 test    eax, eax
.text:00402E6D                 jz      short loc_402E77
.text:00402E6F
.text:00402E6F loc_402E6F:                             ; CODE XREF: sub_402E50+29↓j
.text:00402E6F                 mov     ebx, [esp+0Ch+var_4]
.text:00402E73                 add     esp, 0Ch
.text:00402E76                 retn
.text:00402E77 ; ---------------------------------------------------------------------------
.text:00402E77
.text:00402E77 loc_402E77:                             ; CODE XREF: sub_402E50+1D↑j
.text:00402E77                 test    ebx, ebx
.text:00402E79                 jz      short loc_402E6F
.text:00402E7B                 call    sub_4037C0
.text:00402E7B sub_402E50      endp
.text:00402E7B
.text:00402E80 ; ---------------------------------------------------------------------------
.text:00402E80                 jmp     sub_402FD0
.text:00402E80 ; ---------------------------------------------------------------------------
.text:00402E85                 align 10h
.text:00402E90                 sub     esp, 0Ch
.text:00402E93                 mov     edx, [esp+14h]
.text:00402E97                 mov     dword ptr [esp+8], 1
.text:00402E9F                 mov     [esp+4], edx
.text:00402EA3                 mov     edx, [esp+10h]
.text:00402EA7                 mov     [esp], edx
.text:00402EAA                 call    sub_402FD0
.text:00402EAF                 add     esp, 0Ch
.text:00402EB2                 retn
.text:00402EB2 ; ---------------------------------------------------------------------------
.text:00402EB3                 align 10h
.text:00402EC0                 sub     esp, 1Ch
.text:00402EC3                 mov     [esp+18h], ebx
.text:00402EC7                 mov     ebx, [esp+20h]
.text:00402ECB                 mov     [esp], ebx
.text:00402ECE                 call    malloc
.text:00402ED3                 test    eax, eax
.text:00402ED5                 jz      short loc_402EF3
.text:00402ED7
.text:00402ED7 loc_402ED7:                             ; CODE XREF: .text:00402EF5↓j
.text:00402ED7                 mov     [esp+8], ebx
.text:00402EDB                 mov     dword ptr [esp+4], 0
.text:00402EE3                 mov     [esp], eax
.text:00402EE6                 call    memset
.text:00402EEB                 mov     ebx, [esp+18h]
.text:00402EEF                 add     esp, 1Ch
.text:00402EF2                 retn
.text:00402EF3 ; ---------------------------------------------------------------------------
.text:00402EF3
.text:00402EF3 loc_402EF3:                             ; CODE XREF: .text:00402ED5↑j
.text:00402EF3                 test    ebx, ebx
.text:00402EF5                 jz      short loc_402ED7
.text:00402EF7                 call    sub_4037C0
.text:00402EF7 ; ---------------------------------------------------------------------------
.text:00402EFC                 align 10h
.text:00402F00                 sub     esp, 0Ch
.text:00402F03                 xor     edx, edx
.text:00402F05                 mov     ecx, [esp+14h]
.text:00402F09                 mov     [esp+8], ebx
.text:00402F0D                 mov     eax, 0FFFFFFFFh
.text:00402F12                 mov     ebx, [esp+10h]
.text:00402F16                 div     ecx
.text:00402F18                 cmp     eax, ebx
.text:00402F1A                 jb      short loc_402F38
.text:00402F1C                 mov     [esp+4], ecx
.text:00402F20                 mov     [esp], ebx
.text:00402F23                 call    calloc
.text:00402F28                 test    eax, eax
.text:00402F2A                 jz      short loc_402F34
.text:00402F2C
.text:00402F2C loc_402F2C:                             ; CODE XREF: .text:00402F36↓j
.text:00402F2C                 mov     ebx, [esp+8]
.text:00402F30                 add     esp, 0Ch
.text:00402F33                 retn
.text:00402F34 ; ---------------------------------------------------------------------------
.text:00402F34
.text:00402F34 loc_402F34:                             ; CODE XREF: .text:00402F2A↑j
.text:00402F34                 test    ebx, ebx
.text:00402F36                 jz      short loc_402F2C
.text:00402F38
.text:00402F38 loc_402F38:                             ; CODE XREF: .text:00402F1A↑j
.text:00402F38                 call    sub_4037C0
.text:00402F38 ; ---------------------------------------------------------------------------
.text:00402F3D                 align 10h
.text:00402F40                 sub     esp, 1Ch
.text:00402F43                 mov     [esp+18h], ebx
.text:00402F47                 mov     ebx, [esp+24h]
.text:00402F4B                 mov     [esp], ebx
.text:00402F4E                 call    malloc
.text:00402F53                 test    eax, eax
.text:00402F55                 mov     edx, eax
.text:00402F57                 jz      short loc_402F75
.text:00402F59
.text:00402F59 loc_402F59:                             ; CODE XREF: .text:00402F77↓j
.text:00402F59                 mov     [esp+8], ebx
.text:00402F5D                 mov     ecx, [esp+20h]
.text:00402F61                 mov     [esp], edx
.text:00402F64                 mov     [esp+4], ecx
.text:00402F68                 call    memcpy
.text:00402F6D                 mov     ebx, [esp+18h]
.text:00402F71                 add     esp, 1Ch
.text:00402F74                 retn
.text:00402F75 ; ---------------------------------------------------------------------------
.text:00402F75
.text:00402F75 loc_402F75:                             ; CODE XREF: .text:00402F57↑j
.text:00402F75                 test    ebx, ebx
.text:00402F77                 jz      short loc_402F59
.text:00402F79                 call    sub_4037C0
.text:00402F79 ; ---------------------------------------------------------------------------
.text:00402F7E                 align 10h
.text:00402F80                 sub     esp, 1Ch
.text:00402F83                 mov     [esp+18h], esi
.text:00402F87                 mov     esi, [esp+20h]
.text:00402F8B                 mov     [esp+14h], ebx
.text:00402F8F                 mov     [esp], esi
.text:00402F92                 call    strlen
.text:00402F97                 lea     ebx, [eax+1]
.text:00402F9A                 mov     [esp], ebx
.text:00402F9D                 call    malloc
.text:00402FA2                 test    eax, eax
.text:00402FA4                 jz      short loc_402FC2
.text:00402FA6
.text:00402FA6 loc_402FA6:                             ; CODE XREF: .text:00402FC4↓j
.text:00402FA6                 mov     [esp+8], ebx
.text:00402FAA                 mov     [esp+4], esi
.text:00402FAE                 mov     [esp], eax
.text:00402FB1                 call    memcpy
.text:00402FB6                 mov     ebx, [esp+14h]
.text:00402FBA                 mov     esi, [esp+18h]
.text:00402FBE                 add     esp, 1Ch
.text:00402FC1                 retn
.text:00402FC2 ; ---------------------------------------------------------------------------
.text:00402FC2
.text:00402FC2 loc_402FC2:                             ; CODE XREF: .text:00402FA4↑j
.text:00402FC2                 test    ebx, ebx
.text:00402FC4                 jz      short loc_402FA6
.text:00402FC6                 call    sub_4037C0
.text:00402FC6 ; ---------------------------------------------------------------------------
.text:00402FCB                 align 10h
.text:00402FD0
.text:00402FD0 ; =============== S U B R O U T I N E =======================================
.text:00402FD0
.text:00402FD0
.text:00402FD0 ; int __cdecl sub_402FD0(void *, int, int)
.text:00402FD0 sub_402FD0      proc near               ; CODE XREF: .text:00402E80↑j
.text:00402FD0                                         ; .text:00402EAA↑p
.text:00402FD0
.text:00402FD0 Block           = dword ptr -1Ch
.text:00402FD0 Size            = dword ptr -18h
.text:00402FD0 var_C           = dword ptr -0Ch
.text:00402FD0 var_8           = dword ptr -8
.text:00402FD0 var_4           = dword ptr -4
.text:00402FD0 arg_0           = dword ptr  4
.text:00402FD0 arg_4           = dword ptr  8
.text:00402FD0 arg_8           = dword ptr  0Ch
.text:00402FD0
.text:00402FD0                 sub     esp, 1Ch
.text:00402FD3                 mov     [esp+1Ch+var_8], esi
.text:00402FD7                 mov     esi, [esp+1Ch+arg_0]
.text:00402FDB                 mov     [esp+1Ch+var_4], edi
.text:00402FDF                 mov     edi, [esp+1Ch+arg_4]
.text:00402FE3                 test    esi, esi
.text:00402FE5                 mov     [esp+1Ch+var_C], ebx
.text:00402FE9                 mov     ecx, [edi]
.text:00402FEB                 mov     ebx, [esp+1Ch+arg_8]
.text:00402FEF                 jz      short loc_403030
.text:00402FF1                 xor     edx, edx
.text:00402FF3                 mov     eax, 7FFFFFFFh
.text:00402FF8                 div     ebx
.text:00402FFA                 cmp     eax, ecx
.text:00402FFC                 jb      short loc_403029
.text:00402FFE                 add     ecx, ecx
.text:00403000
.text:00403000 loc_403000:                             ; CODE XREF: sub_402FD0+62↓j
.text:00403000                                         ; sub_402FD0+71↓j ...
.text:00403000                 mov     [edi], ecx
.text:00403002                 imul    ebx, ecx
.text:00403005                 mov     [esp+1Ch+Block], esi ; Block
.text:00403008                 mov     [esp+1Ch+Size], ebx ; Size
.text:0040300C                 call    realloc
.text:00403011                 test    eax, eax
.text:00403013                 jz      short loc_403025
.text:00403015
.text:00403015 loc_403015:                             ; CODE XREF: sub_402FD0+57↓j
.text:00403015                 mov     ebx, [esp+1Ch+var_C]
.text:00403019                 mov     esi, [esp+1Ch+var_8]
.text:0040301D                 mov     edi, [esp+1Ch+var_4]
.text:00403021                 add     esp, 1Ch
.text:00403024                 retn
.text:00403025 ; ---------------------------------------------------------------------------
.text:00403025
.text:00403025 loc_403025:                             ; CODE XREF: sub_402FD0+43↑j
.text:00403025                 test    ebx, ebx
.text:00403027                 jz      short loc_403015
.text:00403029
.text:00403029 loc_403029:                             ; CODE XREF: sub_402FD0+2C↑j
.text:00403029                 call    sub_4037C0
.text:00403029 ; ---------------------------------------------------------------------------
.text:0040302E                 align 10h
.text:00403030
.text:00403030 loc_403030:                             ; CODE XREF: sub_402FD0+1F↑j
.text:00403030                 test    ecx, ecx
.text:00403032                 jnz     short loc_403000
.text:00403034                 xor     edx, edx
.text:00403036                 mov     eax, 40h ; '@'
.text:0040303B                 div     ebx
.text:0040303D                 test    eax, eax
.text:0040303F                 mov     ecx, eax
.text:00403041                 jnz     short loc_403000
.text:00403043                 mov     ecx, 1
.text:00403048                 jmp     short loc_403000
.text:00403048 sub_402FD0      endp
.text:00403048
.text:00403048 ; ---------------------------------------------------------------------------
.text:0040304A                 align 10h
.text:00403050 aCopyrightC2005 db 'Copyright (C) 2005 Free Software Foundation, Inc.',0
.text:00403050                                         ; DATA XREF: .data:Buffer↓o
.text:00403082 ; const char Format[]
.text:00403082 Format          db '%s (%s) %s',0Ah,0   ; DATA XREF: sub_403340+50↓o
.text:0040308E aWrittenByS     db 'Written by %s.',0Ah,0
.text:0040308E                                         ; DATA XREF: sub_403340:loc_4033E1↓o
.text:0040309E                 db 12h dup(90h)
.text:004030B0 aThisIsFreeSoft db 'This is free software; see the source for copying conditions.  Th'
.text:004030B0                                         ; DATA XREF: sub_403340+100↓o
.text:004030B0                 db 'ere is NO',0Ah
.text:004030B0                 db 'warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULA'
.text:004030B0                 db 'R PURPOSE.',0Ah,0
.text:00403148 aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.text:00403148                                         ; DATA XREF: sub_403340:loc_403481↓o
.text:0040315F aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.text:0040315F                                         ; DATA XREF: sub_403340:loc_40348D↓o
.text:0040317B                 db 15h dup(90h)
.text:00403190 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.text:00403190                                         ; DATA XREF: sub_403340:loc_403499↓o
.text:00403190                 db 'and %s.',0Ah,0
.text:004031B0 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.text:004031B0                                         ; DATA XREF: sub_403340:loc_4034A5↓o
.text:004031B0                 db '%s, and %s.',0Ah,0
.text:004031D4                 db 1Ch dup(90h)
.text:004031F0 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.text:004031F0                                         ; DATA XREF: sub_403340:loc_4034B1↓o
.text:004031F0                 db '%s, %s, and %s.',0Ah,0
.text:00403218                 db 18h dup(90h)
.text:00403230 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.text:00403230                                         ; DATA XREF: sub_403340:loc_4034BD↓o
.text:00403230                 db '%s, %s, %s, and %s.',0Ah,0
.text:0040325C                 db 14h dup(90h)
.text:00403270 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.text:00403270                                         ; DATA XREF: sub_403340:loc_4034C9↓o
.text:00403270                 db '%s, %s, %s, %s,',0Ah
.text:00403270                 db 'and %s.',0Ah,0
.text:004032A0                 db 10h dup(90h)
.text:004032B0 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.text:004032B0                                         ; DATA XREF: sub_403340:loc_4034D5↓o
.text:004032B0                 db '%s, %s, %s, %s,',0Ah
.text:004032B0                 db '%s, and %s.',0Ah,0
.text:004032E4                 align 10h
.text:004032F0 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.text:004032F0                                         ; DATA XREF: sub_403340:def_4033AD↓o
.text:004032F0                 db '%s, %s, %s, %s,',0Ah
.text:004032F0                 db '%s, %s, and others.',0Ah,0
.text:0040332C ; const char aSS[]
.text:0040332C aSS             db '%s %s',0Ah,0        ; DATA XREF: sub_403340+1B5↓o
.text:00403333                 align 10h
.text:00403340
.text:00403340 ; =============== S U B R O U T I N E =======================================
.text:00403340
.text:00403340
.text:00403340 ; int __cdecl sub_403340(FILE *, FILE *, int, int, va_list)
.text:00403340 sub_403340      proc near               ; CODE XREF: sub_403510+2A↓p
.text:00403340
.text:00403340 Stream          = dword ptr -2Ch
.text:00403340 Format          = dword ptr -28h
.text:00403340 ArgList         = dword ptr -24h
.text:00403340 var_20          = dword ptr -20h
.text:00403340 var_1C          = dword ptr -1Ch
.text:00403340 var_14          = dword ptr -14h
.text:00403340 arg_0           = dword ptr  4
.text:00403340 arg_4           = dword ptr  8
.text:00403340 arg_8           = dword ptr  0Ch
.text:00403340 arg_C           = dword ptr  10h
.text:00403340 arg_10          = dword ptr  14h
.text:00403340
.text:00403340                 push    ebp
.text:00403341                 push    edi
.text:00403342                 push    esi
.text:00403343                 push    ebx
.text:00403344                 sub     esp, 1Ch
.text:00403347                 xor     ebx, ebx
.text:00403349                 mov     edi, [esp+2Ch+arg_10]
.text:0040334D                 mov     edx, [esp+2Ch+arg_8]
.text:00403351                 mov     esi, [esp+2Ch+arg_0]
.text:00403355                 mov     eax, [edi]
.text:00403357                 mov     ecx, [esp+2Ch+arg_4]
.text:0040335B                 mov     [esp+2Ch+var_14], edx
.text:0040335F                 mov     ebp, [esp+2Ch+arg_C]
.text:00403363                 lea     edx, [edi+4]
.text:00403366                 test    eax, eax
.text:00403368                 jz      short loc_40337C
.text:0040336A                 lea     esi, [esi+0]
.text:00403370
.text:00403370 loc_403370:                             ; CODE XREF: sub_403340+3A↓j
.text:00403370                 mov     eax, edx
.text:00403372                 inc     ebx
.text:00403373                 mov     eax, [eax]
.text:00403375                 add     edx, 4
.text:00403378                 test    eax, eax
.text:0040337A                 jnz     short loc_403370
.text:0040337C
.text:0040337C loc_40337C:                             ; CODE XREF: sub_403340+28↑j
.text:0040337C                 test    ecx, ecx
.text:0040337E                 jz      loc_4034ED
.text:00403384                 mov     [esp+2Ch+var_1C], ebp
.text:00403388                 mov     edx, [esp+2Ch+var_14]
.text:0040338C                 mov     [esp+2Ch+ArgList], ecx
.text:00403390                 mov     [esp+2Ch+Format], offset Format ; "%s (%s) %s\n"
.text:00403398                 mov     [esp+2Ch+var_20], edx
.text:0040339C                 mov     [esp+2Ch+Stream], esi ; Stream
.text:0040339F                 call    fprintf
.text:004033A4
.text:004033A4 loc_4033A4:                             ; CODE XREF: sub_403340+1C9↓j
.text:004033A4                 cmp     ebx, 9          ; switch 10 cases
.text:004033A7                 ja      def_4033AD      ; jumptable 004033AD default case
.text:004033AD                 jmp     ds:jpt_4033AD[ebx*4] ; switch jump
.text:004033AD ; ---------------------------------------------------------------------------
.text:004033B4 jpt_4033AD      dd offset loc_4033DC    ; DATA XREF: sub_403340+6D↑r
.text:004033B4                 dd offset loc_4033E1    ; jump table for switch statement
.text:004033B4                 dd offset loc_403481
.text:004033B4                 dd offset loc_40348D
.text:004033B4                 dd offset loc_403499
.text:004033B4                 dd offset loc_4034A5
.text:004033B4                 dd offset loc_4034B1
.text:004033B4                 dd offset loc_4034BD
.text:004033B4                 dd offset loc_4034C9
.text:004033B4                 dd offset loc_4034D5
.text:004033DC ; ---------------------------------------------------------------------------
.text:004033DC
.text:004033DC loc_4033DC:                             ; CODE XREF: sub_403340+6D↑j
.text:004033DC                                         ; DATA XREF: sub_403340:jpt_4033AD↑o
.text:004033DC                 call    abort           ; jumptable 004033AD case 0
.text:004033E1 ; ---------------------------------------------------------------------------
.text:004033E1
.text:004033E1 loc_4033E1:                             ; CODE XREF: sub_403340+6D↑j
.text:004033E1                                         ; DATA XREF: sub_403340:jpt_4033AD↑o
.text:004033E1                 mov     [esp+2Ch+Stream], offset aWrittenByS ; jumptable 004033AD case 1
.text:004033E8                 nop
.text:004033E9                 lea     esi, [esi+0]
.text:004033F0
.text:004033F0 loc_4033F0:                             ; CODE XREF: sub_403340+148↓j
.text:004033F0                                         ; sub_403340+154↓j ...
.text:004033F0                 call    ds:libintl_gettext
.text:004033F6                 mov     [esp+2Ch+ArgList], edi ; ArgList
.text:004033FA                 mov     [esp+2Ch+Stream], esi ; Stream
.text:004033FD                 mov     [esp+2Ch+Format], eax ; Format
.text:00403401                 call    vfprintf
.text:00403406                 mov     ebx, [esi+4]
.text:00403409                 dec     ebx
.text:0040340A                 test    ebx, ebx
.text:0040340C                 mov     [esi+4], ebx
.text:0040340F                 js      short loc_40346F
.text:00403411                 mov     edi, [esi]
.text:00403413                 mov     byte ptr [edi], 0Ah
.text:00403416                 inc     dword ptr [esi]
.text:00403418
.text:00403418 loc_403418:                             ; CODE XREF: sub_403340+13F↓j
.text:00403418                 mov     [esp+2Ch+Format], esi ; Stream
.text:0040341C                 mov     edx, Buffer
.text:00403422                 mov     [esp+2Ch+Stream], edx ; Buffer
.text:00403425                 call    fputs
.text:0040342A                 mov     ebp, [esi+4]
.text:0040342D                 dec     ebp
.text:0040342E                 test    ebp, ebp
.text:00403430                 mov     [esi+4], ebp
.text:00403433                 js      short loc_40345D
.text:00403435                 mov     ecx, [esi]
.text:00403437                 mov     byte ptr [ecx], 0Ah
.text:0040343A                 inc     dword ptr [esi]
.text:0040343C
.text:0040343C loc_40343C:                             ; CODE XREF: sub_403340+12D↓j
.text:0040343C                 mov     [esp+2Ch+arg_4], esi ; Stream
.text:00403440                 mov     [esp+2Ch+Stream], offset aThisIsFreeSoft ; "This is free software; see the source f"...
.text:00403447                 call    ds:libintl_gettext
.text:0040344D                 mov     [esp+2Ch+arg_0], eax ; Buffer
.text:00403451                 add     esp, 1Ch
.text:00403454                 pop     ebx
.text:00403455                 pop     esi
.text:00403456                 pop     edi
.text:00403457                 pop     ebp
.text:00403458                 jmp     fputs
.text:0040345D ; ---------------------------------------------------------------------------
.text:0040345D
.text:0040345D loc_40345D:                             ; CODE XREF: sub_403340+F3↑j
.text:0040345D                 mov     [esp+2Ch+Format], esi ; File
.text:00403461                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:00403468                 call    _flsbuf
.text:0040346D                 jmp     short loc_40343C
.text:0040346F ; ---------------------------------------------------------------------------
.text:0040346F
.text:0040346F loc_40346F:                             ; CODE XREF: sub_403340+CF↑j
.text:0040346F                 mov     [esp+2Ch+Format], esi ; File
.text:00403473                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:0040347A                 call    _flsbuf
.text:0040347F                 jmp     short loc_403418
.text:00403481 ; ---------------------------------------------------------------------------
.text:00403481
.text:00403481 loc_403481:                             ; CODE XREF: sub_403340+6D↑j
.text:00403481                                         ; DATA XREF: sub_403340:jpt_4033AD↑o
.text:00403481                 mov     [esp+2Ch+Stream], offset aWrittenBySAndS ; jumptable 004033AD case 2
.text:00403488                 jmp     loc_4033F0
.text:0040348D ; ---------------------------------------------------------------------------
.text:0040348D
.text:0040348D loc_40348D:                             ; CODE XREF: sub_403340+6D↑j
.text:0040348D                                         ; DATA XREF: sub_403340:jpt_4033AD↑o
.text:0040348D                 mov     [esp+2Ch+Stream], offset aWrittenBySSAnd ; jumptable 004033AD case 3
.text:00403494                 jmp     loc_4033F0
.text:00403499 ; ---------------------------------------------------------------------------
.text:00403499
.text:00403499 loc_403499:                             ; CODE XREF: sub_403340+6D↑j
.text:00403499                                         ; DATA XREF: sub_403340:jpt_4033AD↑o
.text:00403499                 mov     [esp+2Ch+Stream], offset aWrittenBySSSAn ; jumptable 004033AD case 4
.text:004034A0                 jmp     loc_4033F0
.text:004034A5 ; ---------------------------------------------------------------------------
.text:004034A5
.text:004034A5 loc_4034A5:                             ; CODE XREF: sub_403340+6D↑j
.text:004034A5                                         ; DATA XREF: sub_403340:jpt_4033AD↑o
.text:004034A5                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSA ; jumptable 004033AD case 5
.text:004034AC                 jmp     loc_4033F0
.text:004034B1 ; ---------------------------------------------------------------------------
.text:004034B1
.text:004034B1 loc_4034B1:                             ; CODE XREF: sub_403340+6D↑j
.text:004034B1                                         ; DATA XREF: sub_403340:jpt_4033AD↑o
.text:004034B1                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_0 ; jumptable 004033AD case 6
.text:004034B8                 jmp     loc_4033F0
.text:004034BD ; ---------------------------------------------------------------------------
.text:004034BD
.text:004034BD loc_4034BD:                             ; CODE XREF: sub_403340+6D↑j
.text:004034BD                                         ; DATA XREF: sub_403340:jpt_4033AD↑o
.text:004034BD                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_1 ; jumptable 004033AD case 7
.text:004034C4                 jmp     loc_4033F0
.text:004034C9 ; ---------------------------------------------------------------------------
.text:004034C9
.text:004034C9 loc_4034C9:                             ; CODE XREF: sub_403340+6D↑j
.text:004034C9                                         ; DATA XREF: sub_403340:jpt_4033AD↑o
.text:004034C9                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_2 ; jumptable 004033AD case 8
.text:004034D0                 jmp     loc_4033F0
.text:004034D5 ; ---------------------------------------------------------------------------
.text:004034D5
.text:004034D5 loc_4034D5:                             ; CODE XREF: sub_403340+6D↑j
.text:004034D5                                         ; DATA XREF: sub_403340:jpt_4033AD↑o
.text:004034D5                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_3 ; jumptable 004033AD case 9
.text:004034DC                 jmp     loc_4033F0
.text:004034E1 ; ---------------------------------------------------------------------------
.text:004034E1
.text:004034E1 def_4033AD:                             ; CODE XREF: sub_403340+67↑j
.text:004034E1                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS ; jumptable 004033AD default case
.text:004034E8                 jmp     loc_4033F0
.text:004034ED ; ---------------------------------------------------------------------------
.text:004034ED
.text:004034ED loc_4034ED:                             ; CODE XREF: sub_403340+3E↑j
.text:004034ED                 mov     [esp+2Ch+var_20], ebp
.text:004034F1                 mov     ecx, [esp+2Ch+var_14]
.text:004034F5                 mov     [esp+2Ch+Format], offset aSS ; "%s %s\n"
.text:004034FD                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00403500                 mov     [esp+2Ch+ArgList], ecx
.text:00403504                 call    fprintf
.text:00403509                 jmp     loc_4033A4
.text:00403509 sub_403340      endp
.text:00403509
.text:00403509 ; ---------------------------------------------------------------------------
.text:0040350E                 align 10h
.text:00403510
.text:00403510 ; =============== S U B R O U T I N E =======================================
.text:00403510
.text:00403510
.text:00403510 ; int __cdecl sub_403510(FILE *, FILE *, int, int, char)
.text:00403510 sub_403510      proc near               ; CODE XREF: sub_4015D0+167↑p
.text:00403510
.text:00403510 var_1C          = dword ptr -1Ch
.text:00403510 var_18          = dword ptr -18h
.text:00403510 var_14          = dword ptr -14h
.text:00403510 var_10          = dword ptr -10h
.text:00403510 var_C           = dword ptr -0Ch
.text:00403510 arg_0           = dword ptr  4
.text:00403510 arg_4           = dword ptr  8
.text:00403510 arg_8           = dword ptr  0Ch
.text:00403510 arg_C           = dword ptr  10h
.text:00403510 arg_10          = byte ptr  14h
.text:00403510
.text:00403510                 sub     esp, 1Ch
.text:00403513                 mov     edx, [esp+1Ch+arg_C]
.text:00403517                 lea     ecx, [esp+1Ch+arg_10]
.text:0040351B                 mov     [esp+1Ch+var_C], ecx ; va_list
.text:0040351F                 mov     ecx, [esp+1Ch+arg_8]
.text:00403523                 mov     [esp+1Ch+var_10], edx ; int
.text:00403527                 mov     edx, [esp+1Ch+arg_4]
.text:0040352B                 mov     [esp+1Ch+var_14], ecx ; int
.text:0040352F                 mov     [esp+1Ch+var_18], edx ; FILE *
.text:00403533                 mov     edx, [esp+1Ch+arg_0]
.text:00403537                 mov     [esp+1Ch+var_1C], edx ; FILE *
.text:0040353A                 call    sub_403340
.text:0040353F                 add     esp, 1Ch
.text:00403542                 retn
.text:00403542 sub_403510      endp
.text:00403542
.text:00403542 ; ---------------------------------------------------------------------------
.text:00403543                 align 10h
.text:00403550
.text:00403550 ; =============== S U B R O U T I N E =======================================
.text:00403550
.text:00403550
.text:00403550 ; int __cdecl sub_403550(int, int, char *, int, int)
.text:00403550 sub_403550      proc near               ; CODE XREF: sub_4015D0+9F↑p
.text:00403550
.text:00403550 var_1C          = dword ptr -1Ch
.text:00403550 var_18          = dword ptr -18h
.text:00403550 var_14          = dword ptr -14h
.text:00403550 var_10          = dword ptr -10h
.text:00403550 var_C           = dword ptr -0Ch
.text:00403550 var_8           = dword ptr -8
.text:00403550 var_4           = dword ptr -4
.text:00403550 arg_0           = dword ptr  4
.text:00403550 arg_4           = dword ptr  8
.text:00403550 arg_8           = dword ptr  0Ch
.text:00403550 arg_C           = dword ptr  10h
.text:00403550 arg_10          = dword ptr  14h
.text:00403550
.text:00403550                 sub     esp, 1Ch
.text:00403553                 mov     edx, [esp+1Ch+arg_C]
.text:00403557                 mov     [esp+1Ch+var_4], 0 ; int
.text:0040355F                 mov     ecx, [esp+1Ch+arg_10]
.text:00403563                 mov     [esp+1Ch+var_8], 0 ; int
.text:0040356B                 mov     [esp+1Ch+var_10], edx ; int
.text:0040356F                 mov     edx, [esp+1Ch+arg_4]
.text:00403573                 mov     [esp+1Ch+var_C], ecx ; int
.text:00403577                 mov     ecx, [esp+1Ch+arg_8]
.text:0040357B                 mov     [esp+1Ch+var_18], edx ; int
.text:0040357F                 mov     edx, [esp+1Ch+arg_0]
.text:00403583                 mov     [esp+1Ch+var_14], ecx ; char *
.text:00403587                 mov     [esp+1Ch+var_1C], edx ; int
.text:0040358A                 call    sub_402B40
.text:0040358F                 add     esp, 1Ch
.text:00403592                 retn
.text:00403592 sub_403550      endp
.text:00403592
.text:00403592 ; ---------------------------------------------------------------------------
.text:00403593                 align 10h
.text:004035A0                 sub     esp, 2Ch
.text:004035A3                 mov     edx, [esp+44h]
.text:004035A7                 mov     dword ptr [esp+18h], 0
.text:004035AF                 mov     ecx, [esp+40h]
.text:004035B3                 mov     dword ptr [esp+14h], 0
.text:004035BB                 mov     [esp+1Ch], edx
.text:004035BF                 mov     edx, [esp+3Ch]
.text:004035C3                 mov     [esp+10h], ecx
.text:004035C7                 mov     ecx, [esp+38h]
.text:004035CB                 mov     [esp+0Ch], edx
.text:004035CF                 mov     edx, [esp+34h]
.text:004035D3                 mov     [esp+8], ecx
.text:004035D7                 mov     [esp+4], edx
.text:004035DB                 mov     edx, [esp+30h]
.text:004035DF                 mov     [esp], edx
.text:004035E2                 call    sub_401FB0
.text:004035E7                 add     esp, 2Ch
.text:004035EA                 retn
.text:004035EA ; ---------------------------------------------------------------------------
.text:004035EB                 align 10h
.text:004035F0                 sub     esp, 1Ch
.text:004035F3                 mov     edx, [esp+2Ch]
.text:004035F7                 mov     dword ptr [esp+18h], 0
.text:004035FF                 mov     ecx, [esp+30h]
.text:00403603                 mov     dword ptr [esp+14h], 1
.text:0040360B                 mov     [esp+0Ch], edx
.text:0040360F                 mov     edx, [esp+24h]
.text:00403613                 mov     [esp+10h], ecx
.text:00403617                 mov     ecx, [esp+28h]
.text:0040361B                 mov     [esp+4], edx
.text:0040361F                 mov     edx, [esp+20h]
.text:00403623                 mov     [esp+8], ecx
.text:00403627                 mov     [esp], edx
.text:0040362A                 call    sub_402B40
.text:0040362F                 add     esp, 1Ch
.text:00403632                 retn
.text:00403632 ; ---------------------------------------------------------------------------
.text:00403633                 align 10h
.text:00403640                 sub     esp, 2Ch
.text:00403643                 mov     edx, [esp+44h]
.text:00403647                 mov     dword ptr [esp+18h], 0
.text:0040364F                 mov     ecx, [esp+40h]
.text:00403653                 mov     dword ptr [esp+14h], 1
.text:0040365B                 mov     [esp+1Ch], edx
.text:0040365F                 mov     edx, [esp+3Ch]
.text:00403663                 mov     [esp+10h], ecx
.text:00403667                 mov     ecx, [esp+38h]
.text:0040366B                 mov     [esp+0Ch], edx
.text:0040366F                 mov     edx, [esp+34h]
.text:00403673                 mov     [esp+8], ecx
.text:00403677                 mov     [esp+4], edx
.text:0040367B                 mov     edx, [esp+30h]
.text:0040367F                 mov     [esp], edx
.text:00403682                 call    sub_401FB0
.text:00403687                 add     esp, 2Ch
.text:0040368A                 retn
.text:0040368A ; ---------------------------------------------------------------------------
.text:0040368B                 align 10h
.text:00403690                 mov     edx, [esp+4]
.text:00403694                 mov     ds:dword_407050, edx
.text:0040369A                 retn
.text:0040369A ; ---------------------------------------------------------------------------
.text:0040369B aWriteError     db 'write error',0      ; DATA XREF: sub_4036C0:loc_403709↓o
.text:004036A7 ; const char aSS_0[]
.text:004036A7 aSS_0           db '%s: %s',0           ; DATA XREF: sub_4036C0+77↓o
.text:004036AE ; const char aS_3[]
.text:004036AE aS_3            db '%s',0               ; DATA XREF: sub_4036C0+A0↓o
.text:004036B1 ; ---------------------------------------------------------------------------
.text:004036B1                 jmp     short sub_4036C0
.text:004036B1 ; ---------------------------------------------------------------------------
.text:004036B3                 align 10h
.text:004036C0
.text:004036C0 ; =============== S U B R O U T I N E =======================================
.text:004036C0
.text:004036C0
.text:004036C0 ; void __cdecl sub_4036C0()
.text:004036C0 sub_4036C0      proc near               ; CODE XREF: .text:004036B1↑j
.text:004036C0                                         ; DATA XREF: sub_4015D0+5B↑o
.text:004036C0
.text:004036C0 Stream          = dword ptr -2Ch
.text:004036C0 ErrorMessage    = dword ptr -28h
.text:004036C0 var_24          = dword ptr -24h
.text:004036C0 var_20          = byte ptr -20h
.text:004036C0 var_1C          = dword ptr -1Ch
.text:004036C0 var_9           = byte ptr -9
.text:004036C0
.text:004036C0                 push    esi
.text:004036C1                 push    ebx
.text:004036C2                 sub     esp, 24h
.text:004036C5                 mov     edx, ds:_iob
.text:004036CB                 mov     ecx, [edx+2Ch]
.text:004036CE                 lea     esi, [edx+20h]
.text:004036D1                 shr     ecx, 5
.text:004036D4                 mov     bl, cl
.text:004036D6                 mov     ecx, [edx+20h]
.text:004036D9                 and     bl, 1
.text:004036DC                 cmp     ecx, [esi+8]
.text:004036DF                 mov     [esp+2Ch+Stream], esi ; Stream
.text:004036E2                 setz    [esp+2Ch+var_9]
.text:004036E7                 call    fclose
.text:004036EC                 test    eax, eax
.text:004036EE                 setnz   al
.text:004036F1                 test    bl, bl
.text:004036F3                 jnz     loc_403783
.text:004036F9                 test    al, al
.text:004036FB                 jz      short loc_403750
.text:004036FD
.text:004036FD loc_4036FD:                             ; CODE XREF: sub_4036C0+CD↓j
.text:004036FD                 call    _errno
.text:00403702                 mov     esi, [eax]
.text:00403704
.text:00403704 loc_403704:                             ; CODE XREF: sub_4036C0+C7↓j
.text:00403704                 cmp     esi, 9
.text:00403707                 jz      short loc_403776
.text:00403709
.text:00403709 loc_403709:                             ; CODE XREF: sub_4036C0+B8↓j
.text:00403709                                         ; sub_4036C0+C1↓j
.text:00403709                 mov     [esp+2Ch+Stream], offset aWriteError ; "write error"
.text:00403710                 call    ds:libintl_gettext
.text:00403716                 mov     ebx, eax
.text:00403718                 mov     eax, ds:dword_407050
.text:0040371D                 test    eax, eax
.text:0040371F                 jz      short loc_403756
.text:00403721                 mov     [esp+2Ch+Stream], eax ; char *
.text:00403724                 call    sub_404930
.text:00403729                 mov     dword ptr [esp+2Ch+var_20], eax ; char
.text:0040372D                 mov     edx, Code
.text:00403733                 mov     [esp+2Ch+var_1C], ebx
.text:00403737                 mov     [esp+2Ch+var_24], offset aSS_0 ; "%s: %s"
.text:0040373F                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:00403743                 mov     [esp+2Ch+Stream], edx ; Code
.text:00403746                 call    sub_404BF0
.text:0040374B                 nop
.text:0040374C                 lea     esi, [esi+0]
.text:00403750
.text:00403750 loc_403750:                             ; CODE XREF: sub_4036C0+3B↑j
.text:00403750                                         ; sub_4036C0+B4↓j ...
.text:00403750                 add     esp, 24h
.text:00403753                 pop     ebx
.text:00403754                 pop     esi
.text:00403755                 retn
.text:00403756 ; ---------------------------------------------------------------------------
.text:00403756
.text:00403756 loc_403756:                             ; CODE XREF: sub_4036C0+5F↑j
.text:00403756                 mov     dword ptr [esp+2Ch+var_20], ebx ; char
.text:0040375A                 mov     ebx, Code
.text:00403760                 mov     [esp+2Ch+var_24], offset aS_3 ; "%s"
.text:00403768                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:0040376C                 mov     [esp+2Ch+Stream], ebx ; Code
.text:0040376F                 call    sub_404BF0
.text:00403774                 jmp     short loc_403750
.text:00403776 ; ---------------------------------------------------------------------------
.text:00403776
.text:00403776 loc_403776:                             ; CODE XREF: sub_4036C0+47↑j
.text:00403776                 test    bl, bl
.text:00403778                 jnz     short loc_403709
.text:0040377A                 cmp     [esp+2Ch+var_9], 0
.text:0040377F                 jnz     short loc_403750
.text:00403781                 jmp     short loc_403709
.text:00403783 ; ---------------------------------------------------------------------------
.text:00403783
.text:00403783 loc_403783:                             ; CODE XREF: sub_4036C0+33↑j
.text:00403783                 xor     esi, esi
.text:00403785                 test    al, al
.text:00403787                 jz      loc_403704
.text:0040378D                 jmp     loc_4036FD
.text:0040378D sub_4036C0      endp
.text:0040378D
.text:0040378D ; ---------------------------------------------------------------------------
.text:00403792                 align 10h
.text:004037A0 aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: sub_4037C0+3↓o
.text:004037B1 ; const char aS_0[]
.text:004037B1 aS_0            db '%s',0               ; DATA XREF: sub_4037C0+10↓o
.text:004037B4                 align 10h
.text:004037C0
.text:004037C0 ; =============== S U B R O U T I N E =======================================
.text:004037C0
.text:004037C0 ; Attributes: noreturn
.text:004037C0
.text:004037C0 sub_4037C0      proc near               ; CODE XREF: sub_402D80:loc_402DB9↑p
.text:004037C0                                         ; sub_402DC0+24↑p ...
.text:004037C0
.text:004037C0 Code            = dword ptr -1Ch
.text:004037C0 ErrorMessage    = dword ptr -18h
.text:004037C0 var_14          = dword ptr -14h
.text:004037C0 var_10          = byte ptr -10h
.text:004037C0
.text:004037C0                 sub     esp, 1Ch
.text:004037C3                 mov     [esp+1Ch+Code], offset aMemoryExhauste ; "memory exhausted"
.text:004037CA                 call    ds:libintl_gettext
.text:004037D0                 mov     [esp+1Ch+var_14], offset aS_0 ; "%s"
.text:004037D8                 mov     edx, Code
.text:004037DE                 mov     [esp+1Ch+ErrorMessage], 0 ; ErrorMessage
.text:004037E6                 mov     dword ptr [esp+1Ch+var_10], eax ; char
.text:004037EA                 mov     [esp+1Ch+Code], edx ; Code
.text:004037ED                 call    sub_404BF0
.text:004037F2                 call    abort
.text:004037F2 sub_4037C0      endp
.text:004037F2
.text:004037F2 ; ---------------------------------------------------------------------------
.text:004037F7                 align 10h
.text:00403800 aLiteral        db 'literal',0          ; DATA XREF: .text:00403840↓o
.text:00403808 aShell          db 'shell',0            ; DATA XREF: .text:00403844↓o
.text:0040380E aShellAlways    db 'shell-always',0     ; DATA XREF: .text:00403848↓o
.text:0040381B aC              db 'c',0                ; DATA XREF: .text:0040384C↓o
.text:0040381D aEscape         db 'escape',0           ; DATA XREF: .text:00403850↓o
.text:00403824 aLocale         db 'locale',0           ; DATA XREF: .text:00403854↓o
.text:0040382B aClocale        db 'clocale',0          ; DATA XREF: .text:00403858↓o
.text:00403833                 db 8Dh, 0B6h, 4 dup(0)
.text:00403839                 db 8Dh, 0BCh, 27h, 4 dup(0)
.text:00403840                 dd offset aLiteral      ; "literal"
.text:00403844                 dd offset aShell        ; "shell"
.text:00403848                 dd offset aShellAlways  ; "shell-always"
.text:0040384C                 dd offset aC            ; "c"
.text:00403850                 dd offset aEscape       ; "escape"
.text:00403854                 dd offset aLocale       ; "locale"
.text:00403858                 dd offset aClocale      ; "clocale"
.text:0040385C                 dd 2 dup(0)
.text:00403864                 dd 1, 2, 3, 4, 5, 6
.text:0040387C asc_40387C:                             ; DATA XREF: sub_403890+7E↓o
.text:0040387C                                         ; sub_403890+A39↓o ...
.text:0040387C                 text "UTF-16LE", '"',27h,'`'
.text:00403882                 align 10h
.text:00403890
.text:00403890 ; =============== S U B R O U T I N E =======================================
.text:00403890
.text:00403890
.text:00403890 ; int __cdecl sub_403890(int, int, char *Str, int, int, int)
.text:00403890 sub_403890      proc near               ; CODE XREF: sub_403890+43A↓p
.text:00403890                                         ; .text:00404453↓p ...
.text:00403890
.text:00403890 C               = dword ptr -4Ch
.text:00403890 Type            = dword ptr -48h
.text:00403890 SizeInBytes     = dword ptr -44h
.text:00403890 State           = dword ptr -40h
.text:00403890 var_3C          = dword ptr -3Ch
.text:00403890 var_38          = dword ptr -38h
.text:00403890 var_34          = dword ptr -34h
.text:00403890 var_30          = dword ptr -30h
.text:00403890 var_29          = byte ptr -29h
.text:00403890 var_28          = dword ptr -28h
.text:00403890 var_22          = byte ptr -22h
.text:00403890 var_21          = byte ptr -21h
.text:00403890 var_20          = dword ptr -20h
.text:00403890 var_1C          = dword ptr -1Ch
.text:00403890 var_18          = mbstate_t ptr -18h
.text:00403890 arg_0           = dword ptr  4
.text:00403890 arg_4           = dword ptr  8
.text:00403890 Str             = dword ptr  0Ch
.text:00403890 arg_C           = dword ptr  10h
.text:00403890 arg_10          = dword ptr  14h
.text:00403890 arg_14          = dword ptr  18h
.text:00403890
.text:00403890                 push    ebp
.text:00403891                 push    edi
.text:00403892                 push    esi
.text:00403893                 push    ebx
.text:00403894                 sub     esp, 3Ch
.text:00403897                 mov     edx, ds:__mb_cur_max
.text:0040389D                 mov     [esp+4Ch+var_34], 0
.text:004038A5                 mov     [esp+4Ch+var_1C], 0
.text:004038AD                 cmp     dword ptr [edx], 1
.text:004038B0                 mov     [esp+4Ch+var_20], 0
.text:004038B8                 mov     [esp+4Ch+var_21], 0
.text:004038BD                 setz    [esp+4Ch+var_22]
.text:004038C2                 cmp     [esp+4Ch+arg_10], 6 ; switch 7 cases
.text:004038C7                 ja      short def_4038CD ; jumptable 004038CD default case, cases 0,1
.text:004038C9                 mov     edx, [esp+4Ch+arg_10]
.text:004038CD                 jmp     ds:jpt_4038CD[edx*4] ; switch jump
.text:004038CD ; ---------------------------------------------------------------------------
.text:004038D4 jpt_4038CD      dd offset def_4038CD    ; DATA XREF: sub_403890+3D↑r
.text:004038D4                 dd offset def_4038CD    ; jump table for switch statement
.text:004038D4                 dd offset loc_404215
.text:004038D4                 dd offset loc_4038F0
.text:004038D4                 dd offset loc_40423B
.text:004038D4                 dd offset loc_404245
.text:004038D4                 dd offset loc_404245
.text:004038F0 ; ---------------------------------------------------------------------------
.text:004038F0
.text:004038F0 loc_4038F0:                             ; CODE XREF: sub_403890+3D↑j
.text:004038F0                                         ; DATA XREF: sub_403890:jpt_4038CD↑o
.text:004038F0                 mov     eax, [esp+4Ch+arg_4] ; jumptable 004038CD case 3
.text:004038F4                 cmp     [esp+4Ch+var_34], eax
.text:004038F8                 jnb     short loc_403901
.text:004038FA                 mov     ebx, [esp+4Ch+arg_0]
.text:004038FE                 mov     byte ptr [ebx], 22h ; '"'
.text:00403901
.text:00403901 loc_403901:                             ; CODE XREF: sub_403890+68↑j
.text:00403901                 mov     [esp+4Ch+var_34], 1
.text:00403909                 mov     [esp+4Ch+var_21], 1
.text:0040390E                 mov     [esp+4Ch+var_1C], offset asc_40387C ; "\"'`"
.text:00403916
.text:00403916 loc_403916:                             ; CODE XREF: sub_403890+9A6↓j
.text:00403916                 mov     [esp+4Ch+var_20], 1
.text:0040391E
.text:0040391E def_4038CD:                             ; CODE XREF: sub_403890+37↑j
.text:0040391E                                         ; sub_403890+3D↑j ...
.text:0040391E                 xor     ebp, ebp        ; jumptable 004038CD default case, cases 0,1
.text:00403920
.text:00403920 loc_403920:                             ; CODE XREF: sub_403890+3DB↓j
.text:00403920                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00403925                 jz      loc_404207
.text:0040392B                 cmp     ebp, [esp+4Ch+arg_C]
.text:0040392F
.text:0040392F loc_40392F:                             ; CODE XREF: sub_403890+980↓j
.text:0040392F                 jz      loc_40419E
.text:00403935                 cmp     [esp+4Ch+var_21], 0
.text:0040393A                 jz      short loc_403980
.text:0040393C                 mov     esi, [esp+4Ch+var_20]
.text:00403940                 test    esi, esi
.text:00403942                 jz      short loc_403980
.text:00403944                 mov     ecx, [esp+4Ch+var_20]
.text:00403948                 lea     edi, [ecx+ebp]
.text:0040394B                 cmp     edi, [esp+4Ch+arg_C]
.text:0040394F                 ja      short loc_403980
.text:00403951                 cld
.text:00403952                 mov     ebx, [esp+4Ch+Str]
.text:00403956                 mov     edi, [esp+4Ch+var_1C]
.text:0040395A                 add     ebx, ebp
.text:0040395C                 mov     esi, ebx
.text:0040395E                 cmp     ecx, ecx
.text:00403960                 repe cmpsb
.text:00403962                 jnz     short loc_403980
.text:00403964                 mov     edx, [esp+4Ch+arg_4]
.text:00403968                 cmp     [esp+4Ch+var_34], edx
.text:0040396C                 jnb     short loc_40397A
.text:0040396E                 mov     ecx, [esp+4Ch+arg_0]
.text:00403972                 mov     eax, [esp+4Ch+var_34]
.text:00403976                 mov     byte ptr [eax+ecx], 5Ch ; '\'
.text:0040397A
.text:0040397A loc_40397A:                             ; CODE XREF: sub_403890+DC↑j
.text:0040397A                 inc     [esp+4Ch+var_34]
.text:0040397E                 mov     esi, esi
.text:00403980
.text:00403980 loc_403980:                             ; CODE XREF: sub_403890+AA↑j
.text:00403980                                         ; sub_403890+B2↑j ...
.text:00403980                 mov     edi, [esp+4Ch+Str]
.text:00403984                 movzx   ebx, byte ptr [ebp+edi+0]
.text:00403989                 movzx   eax, bl
.text:0040398C                 cmp     eax, 7Eh        ; switch 127 cases
.text:0040398F                 ja      def_403995      ; jumptable 00403995 default case, cases 1-6,14-31,64
.text:00403995                 jmp     ds:jpt_403995[eax*4] ; switch jump
.text:00403995 ; ---------------------------------------------------------------------------
.text:0040399C jpt_403995      dd offset loc_403B98, offset def_403995, offset def_403995
.text:0040399C                                         ; DATA XREF: sub_403890+105↑r
.text:0040399C                 dd offset def_403995, offset def_403995, offset def_403995 ; jump table for switch statement
.text:0040399C                 dd offset def_403995, offset loc_403C70, offset loc_403C8E
.text:0040399C                 dd offset loc_403C92, offset loc_403CD7, offset loc_403CDB
.text:0040399C                 dd offset loc_403CDF, offset loc_403CE3, offset def_403995
.text:0040399C                 dd offset def_403995, offset def_403995, offset def_403995
.text:0040399C                 dd offset def_403995, offset def_403995, offset def_403995
.text:0040399C                 dd offset def_403995, offset def_403995, offset def_403995
.text:0040399C                 dd offset def_403995, offset def_403995, offset def_403995
.text:0040399C                 dd offset def_403995, offset def_403995, offset def_403995
.text:0040399C                 dd offset def_403995, offset def_403995, offset loc_404168
.text:0040399C                 dd offset loc_404168, offset loc_404168, offset loc_40418A
.text:0040399C                 dd offset loc_404168, offset def_403D92, offset loc_404168
.text:0040399C                 dd offset loc_403CE7, offset loc_404168, offset loc_404168
.text:0040399C                 dd offset loc_404168, offset def_403D92, offset def_403D92
.text:0040399C                 dd offset def_403D92, offset def_403D92, offset def_403D92
.text:0040399C                 dd offset def_403D92, offset def_403D92, offset def_403D92
.text:0040399C                 dd offset def_403D92, offset def_403D92, offset def_403D92
.text:0040399C                 dd offset def_403D92, offset def_403D92, offset def_403D92
.text:0040399C                 dd offset def_403D92, offset def_403D92, offset loc_404168
.text:0040399C                 dd offset loc_404168, offset loc_404168, offset loc_404168
.text:0040399C                 dd offset loc_403D4C, offset def_403995, offset def_403D92
.text:0040399C                 dd offset def_403D92, offset def_403D92, offset def_403D92
.text:0040399C                 dd offset def_403D92, offset def_403D92, offset def_403D92
.text:0040399C                 dd offset def_403D92, offset def_403D92, offset def_403D92
.text:0040399C                 dd offset def_403D92, offset def_403D92, offset def_403D92
.text:0040399C                 dd offset def_403D92, offset def_403D92, offset def_403D92
.text:0040399C                 dd offset def_403D92, offset def_403D92, offset def_403D92
.text:0040399C                 dd offset def_403D92, offset def_403D92, offset def_403D92
.text:0040399C                 dd offset def_403D92, offset def_403D92, offset def_403D92
.text:0040399C                 dd offset def_403D92, offset loc_404168, offset loc_404161
.text:0040399C                 dd offset def_403D92, offset loc_404168, offset def_403D92
.text:0040399C                 dd offset loc_404168, offset def_403D92, offset def_403D92
.text:0040399C                 dd offset def_403D92, offset def_403D92, offset def_403D92
.text:0040399C                 dd offset def_403D92, offset def_403D92, offset def_403D92
.text:0040399C                 dd offset def_403D92, offset def_403D92, offset def_403D92
.text:0040399C                 dd offset def_403D92, offset def_403D92, offset def_403D92
.text:0040399C                 dd offset def_403D92, offset def_403D92, offset def_403D92
.text:0040399C                 dd offset def_403D92, offset def_403D92, offset def_403D92
.text:0040399C                 dd offset def_403D92, offset def_403D92, offset def_403D92
.text:0040399C                 dd offset def_403D92, offset def_403D92, offset def_403D92
.text:0040399C                 dd offset loc_404178, offset loc_404168, offset loc_404178
.text:0040399C                 dd offset loc_40418A
.text:00403B98 ; ---------------------------------------------------------------------------
.text:00403B98
.text:00403B98 loc_403B98:                             ; CODE XREF: sub_403890+105↑j
.text:00403B98                                         ; DATA XREF: sub_403890:jpt_403995↑o
.text:00403B98                 cmp     [esp+4Ch+var_21], 0 ; jumptable 00403995 case 0
.text:00403B9D                 lea     eax, [ebp+1]
.text:00403BA0                 jz      loc_403C50
.text:00403BA6                 mov     esi, [esp+4Ch+arg_4]
.text:00403BAA                 cmp     [esp+4Ch+var_34], esi
.text:00403BAE                 jnb     short loc_403BBC
.text:00403BB0                 mov     eax, [esp+4Ch+arg_0]
.text:00403BB4                 mov     ebx, [esp+4Ch+var_34]
.text:00403BB8                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:00403BBC
.text:00403BBC loc_403BBC:                             ; CODE XREF: sub_403890+31E↑j
.text:00403BBC                 inc     [esp+4Ch+var_34]
.text:00403BC0                 mov     edx, [esp+4Ch+arg_4]
.text:00403BC4                 cmp     [esp+4Ch+var_34], edx
.text:00403BC8                 jnb     short loc_403BD6
.text:00403BCA                 mov     edi, [esp+4Ch+arg_0]
.text:00403BCE                 mov     ecx, [esp+4Ch+var_34]
.text:00403BD2                 mov     byte ptr [ecx+edi], 30h ; '0'
.text:00403BD6
.text:00403BD6 loc_403BD6:                             ; CODE XREF: sub_403890+338↑j
.text:00403BD6                 inc     [esp+4Ch+var_34]
.text:00403BDA                 mov     esi, [esp+4Ch+arg_4]
.text:00403BDE                 cmp     [esp+4Ch+var_34], esi
.text:00403BE2                 jnb     short loc_403BF0
.text:00403BE4                 mov     ebx, [esp+4Ch+arg_0]
.text:00403BE8                 mov     eax, [esp+4Ch+var_34]
.text:00403BEC                 mov     byte ptr [eax+ebx], 30h ; '0'
.text:00403BF0
.text:00403BF0 loc_403BF0:                             ; CODE XREF: sub_403890+352↑j
.text:00403BF0                 inc     [esp+4Ch+var_34]
.text:00403BF4                 mov     bl, 30h ; '0'
.text:00403BF6                 lea     esi, [esi+0]
.text:00403BF9                 lea     edi, [edi+0]
.text:00403C00
.text:00403C00 def_403D92:                             ; CODE XREF: sub_403890+105↑j
.text:00403C00                                         ; sub_403890+463↓j ...
.text:00403C00                 cmp     [esp+4Ch+var_21], 0 ; jumptable 00403995 cases 37,43-58,65-90,93,95,97-122
.text:00403C00                                         ; jumptable 00403D92 default case, cases 34-38,42-44,46,48-59
.text:00403C05                 lea     eax, [ebp+1]
.text:00403C08                 jz      short loc_403C50
.text:00403C0A                 mov     cl, bl
.text:00403C0C                 mov     edi, [esp+4Ch+arg_14]
.text:00403C10                 mov     esi, 1
.text:00403C15                 shr     cl, 5
.text:00403C18                 movzx   edx, cl
.text:00403C1B                 mov     ecx, ebx
.text:00403C1D                 and     ecx, 1Fh
.text:00403C20                 shl     esi, cl
.text:00403C22                 test    [edi+edx*4+4], esi
.text:00403C26                 jz      short loc_403C42
.text:00403C28
.text:00403C28 loc_403C28:                             ; CODE XREF: sub_403890+3FC↓j
.text:00403C28                 mov     edx, [esp+4Ch+arg_4]
.text:00403C2C                 cmp     [esp+4Ch+var_34], edx
.text:00403C30                 jnb     short loc_403C3E
.text:00403C32                 mov     edi, [esp+4Ch+arg_0]
.text:00403C36                 mov     esi, [esp+4Ch+var_34]
.text:00403C3A                 mov     byte ptr [esi+edi], 5Ch ; '\'
.text:00403C3E
.text:00403C3E loc_403C3E:                             ; CODE XREF: sub_403890+3A0↑j
.text:00403C3E                 inc     [esp+4Ch+var_34]
.text:00403C42
.text:00403C42 loc_403C42:                             ; CODE XREF: sub_403890+396↑j
.text:00403C42                 lea     eax, [ebp+1]
.text:00403C45                 lea     esi, [esi+0]
.text:00403C49                 lea     edi, [edi+0]
.text:00403C50
.text:00403C50 loc_403C50:                             ; CODE XREF: sub_403890+310↑j
.text:00403C50                                         ; sub_403890+378↑j ...
.text:00403C50                 mov     ebp, [esp+4Ch+arg_4]
.text:00403C54                 cmp     [esp+4Ch+var_34], ebp
.text:00403C58                 jnb     short loc_403C65
.text:00403C5A                 mov     edx, [esp+4Ch+arg_0]
.text:00403C5E                 mov     ecx, [esp+4Ch+var_34]
.text:00403C62                 mov     [ecx+edx], bl
.text:00403C65
.text:00403C65 loc_403C65:                             ; CODE XREF: sub_403890+3C8↑j
.text:00403C65                 inc     [esp+4Ch+var_34]
.text:00403C69                 mov     ebp, eax
.text:00403C6B                 jmp     loc_403920
.text:00403C70 ; ---------------------------------------------------------------------------
.text:00403C70
.text:00403C70 loc_403C70:                             ; CODE XREF: sub_403890+105↑j
.text:00403C70                                         ; DATA XREF: sub_403890:jpt_403995↑o
.text:00403C70                 mov     dl, 61h ; 'a'   ; jumptable 00403995 case 7
.text:00403C72                 lea     esi, [esi+0]
.text:00403C79                 lea     edi, [edi+0]
.text:00403C80
.text:00403C80 loc_403C80:                             ; CODE XREF: sub_403890+400↓j
.text:00403C80                                         ; sub_403890+409↓j ...
.text:00403C80                 cmp     [esp+4Ch+var_21], 0
.text:00403C85                 lea     eax, [ebp+1]
.text:00403C88                 jz      short loc_403C50
.text:00403C8A                 mov     bl, dl
.text:00403C8C                 jmp     short loc_403C28
.text:00403C8E ; ---------------------------------------------------------------------------
.text:00403C8E
.text:00403C8E loc_403C8E:                             ; CODE XREF: sub_403890+105↑j
.text:00403C8E                                         ; DATA XREF: sub_403890:jpt_403995↑o
.text:00403C8E                 mov     dl, 62h ; 'b'   ; jumptable 00403995 case 8
.text:00403C90                 jmp     short loc_403C80
.text:00403C92 ; ---------------------------------------------------------------------------
.text:00403C92
.text:00403C92 loc_403C92:                             ; CODE XREF: sub_403890+105↑j
.text:00403C92                                         ; DATA XREF: sub_403890:jpt_403995↑o
.text:00403C92                 mov     dl, 74h ; 't'   ; jumptable 00403995 case 9
.text:00403C94
.text:00403C94 loc_403C94:                             ; CODE XREF: sub_403890+449↓j
.text:00403C94                                         ; sub_403890+455↓j ...
.text:00403C94                 cmp     [esp+4Ch+arg_10], 1
.text:00403C99                 jnz     short loc_403C80
.text:00403C9B
.text:00403C9B loc_403C9B:                             ; CODE XREF: sub_403890+45C↓j
.text:00403C9B                                         ; sub_403890+4C1↓j ...
.text:00403C9B                 mov     [esp+4Ch+var_3C], 2 ; jumptable 00404062 cases 91,92,94,96,124
.text:00403CA3                 mov     eax, [esp+4Ch+arg_14]
.text:00403CA7                 mov     edx, [esp+4Ch+arg_C]
.text:00403CAB                 mov     ecx, [esp+4Ch+Str]
.text:00403CAF                 mov     ebx, [esp+4Ch+arg_4]
.text:00403CB3                 mov     [esp+4Ch+var_38], eax ; int
.text:00403CB7                 mov     ebp, [esp+4Ch+arg_0]
.text:00403CBB                 mov     [esp+4Ch+State], edx ; int
.text:00403CBF                 mov     [esp+4Ch+SizeInBytes], ecx ; Str
.text:00403CC3                 mov     [esp+4Ch+Type], ebx ; int
.text:00403CC7                 mov     [esp+4Ch+C], ebp ; int
.text:00403CCA                 call    sub_403890
.text:00403CCF
.text:00403CCF loc_403CCF:                             ; CODE XREF: sub_403890+972↓j
.text:00403CCF                 add     esp, 3Ch
.text:00403CD2                 pop     ebx
.text:00403CD3                 pop     esi
.text:00403CD4                 pop     edi
.text:00403CD5                 pop     ebp
.text:00403CD6                 retn
.text:00403CD7 ; ---------------------------------------------------------------------------
.text:00403CD7
.text:00403CD7 loc_403CD7:                             ; CODE XREF: sub_403890+105↑j
.text:00403CD7                                         ; DATA XREF: sub_403890:jpt_403995↑o
.text:00403CD7                 mov     dl, 6Eh ; 'n'   ; jumptable 00403995 case 10
.text:00403CD9                 jmp     short loc_403C94
.text:00403CDB ; ---------------------------------------------------------------------------
.text:00403CDB
.text:00403CDB loc_403CDB:                             ; CODE XREF: sub_403890+105↑j
.text:00403CDB                                         ; DATA XREF: sub_403890:jpt_403995↑o
.text:00403CDB                 mov     dl, 76h ; 'v'   ; jumptable 00403995 case 11
.text:00403CDD                 jmp     short loc_403C80
.text:00403CDF ; ---------------------------------------------------------------------------
.text:00403CDF
.text:00403CDF loc_403CDF:                             ; CODE XREF: sub_403890+105↑j
.text:00403CDF                                         ; DATA XREF: sub_403890:jpt_403995↑o
.text:00403CDF                 mov     dl, 66h ; 'f'   ; jumptable 00403995 case 12
.text:00403CE1                 jmp     short loc_403C80
.text:00403CE3 ; ---------------------------------------------------------------------------
.text:00403CE3
.text:00403CE3 loc_403CE3:                             ; CODE XREF: sub_403890+105↑j
.text:00403CE3                                         ; DATA XREF: sub_403890:jpt_403995↑o
.text:00403CE3                 mov     dl, 72h ; 'r'   ; jumptable 00403995 case 13
.text:00403CE5                 jmp     short loc_403C94
.text:00403CE7 ; ---------------------------------------------------------------------------
.text:00403CE7
.text:00403CE7 loc_403CE7:                             ; CODE XREF: sub_403890+105↑j
.text:00403CE7                                         ; DATA XREF: sub_403890:jpt_403995↑o
.text:00403CE7                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00403995 case 39
.text:00403CEC                 jz      short loc_403C9B ; jumptable 00404062 cases 91,92,94,96,124
.text:00403CEE                 cmp     [esp+4Ch+arg_10], 2
.text:00403CF3                 jnz     def_403D92      ; jumptable 00403995 cases 37,43-58,65-90,93,95,97-122
.text:00403CF3                                         ; jumptable 00403D92 default case, cases 34-38,42-44,46,48-59
.text:00403CF9                 mov     edx, [esp+4Ch+arg_4]
.text:00403CFD                 cmp     [esp+4Ch+var_34], edx
.text:00403D01                 jnb     short loc_403D0F
.text:00403D03                 mov     ecx, [esp+4Ch+arg_0]
.text:00403D07                 mov     edi, [esp+4Ch+var_34]
.text:00403D0B                 mov     byte ptr [edi+ecx], 27h ; '''
.text:00403D0F
.text:00403D0F loc_403D0F:                             ; CODE XREF: sub_403890+471↑j
.text:00403D0F                 inc     [esp+4Ch+var_34]
.text:00403D13                 mov     eax, [esp+4Ch+arg_4]
.text:00403D17                 cmp     [esp+4Ch+var_34], eax
.text:00403D1B                 jnb     short loc_403D29
.text:00403D1D                 mov     esi, [esp+4Ch+arg_0]
.text:00403D21                 mov     edx, [esp+4Ch+var_34]
.text:00403D25                 mov     byte ptr [edx+esi], 5Ch ; '\'
.text:00403D29
.text:00403D29 loc_403D29:                             ; CODE XREF: sub_403890+48B↑j
.text:00403D29                 inc     [esp+4Ch+var_34]
.text:00403D2D                 mov     edi, [esp+4Ch+arg_4]
.text:00403D31                 cmp     [esp+4Ch+var_34], edi
.text:00403D35                 jnb     short loc_403D43
.text:00403D37                 mov     ecx, [esp+4Ch+arg_0]
.text:00403D3B                 mov     eax, [esp+4Ch+var_34]
.text:00403D3F                 mov     byte ptr [eax+ecx], 27h ; '''
.text:00403D43
.text:00403D43 loc_403D43:                             ; CODE XREF: sub_403890+4A5↑j
.text:00403D43                                         ; sub_403890+5C4↓j ...
.text:00403D43                 inc     [esp+4Ch+var_34]
.text:00403D47                 jmp     def_403D92      ; jumptable 00403995 cases 37,43-58,65-90,93,95,97-122
.text:00403D47                                         ; jumptable 00403D92 default case, cases 34-38,42-44,46,48-59
.text:00403D4C ; ---------------------------------------------------------------------------
.text:00403D4C
.text:00403D4C loc_403D4C:                             ; CODE XREF: sub_403890+105↑j
.text:00403D4C                                         ; DATA XREF: sub_403890:jpt_403995↑o
.text:00403D4C                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00403995 case 63
.text:00403D51                 jz      loc_403C9B      ; jumptable 00404062 cases 91,92,94,96,124
.text:00403D57                 cmp     [esp+4Ch+arg_10], 3
.text:00403D5C                 jnz     def_403D92      ; jumptable 00403995 cases 37,43-58,65-90,93,95,97-122
.text:00403D5C                                         ; jumptable 00403D92 default case, cases 34-38,42-44,46,48-59
.text:00403D62                 lea     edx, [ebp+2]
.text:00403D65                 cmp     edx, [esp+4Ch+arg_C]
.text:00403D69                 jnb     def_403D92      ; jumptable 00403995 cases 37,43-58,65-90,93,95,97-122
.text:00403D69                                         ; jumptable 00403D92 default case, cases 34-38,42-44,46,48-59
.text:00403D6F                 mov     esi, [esp+4Ch+Str]
.text:00403D73                 cmp     byte ptr [ebp+esi+1], 3Fh ; '?'
.text:00403D78                 jnz     def_403D92      ; jumptable 00403995 cases 37,43-58,65-90,93,95,97-122
.text:00403D78                                         ; jumptable 00403D92 default case, cases 34-38,42-44,46,48-59
.text:00403D7E                 movzx   ecx, byte ptr [ebp+esi+2]
.text:00403D83                 movsx   eax, cl
.text:00403D86                 sub     eax, 21h ; '!'  ; switch 30 cases
.text:00403D89                 cmp     eax, 1Dh
.text:00403D8C                 ja      def_403D92      ; jumptable 00403995 cases 37,43-58,65-90,93,95,97-122
.text:00403D8C                                         ; jumptable 00403D92 default case, cases 34-38,42-44,46,48-59
.text:00403D92                 jmp     ds:jpt_403D92[eax*4] ; switch jump
.text:00403D92 ; ---------------------------------------------------------------------------
.text:00403D99                 align 4
.text:00403D9C jpt_403D92      dd offset loc_403E14    ; DATA XREF: sub_403890+502↑r
.text:00403D9C                 dd offset def_403D92    ; jump table for switch statement
.text:00403D9C                 dd offset def_403D92
.text:00403D9C                 dd offset def_403D92
.text:00403D9C                 dd offset def_403D92
.text:00403D9C                 dd offset def_403D92
.text:00403D9C                 dd offset loc_403E14
.text:00403D9C                 dd offset loc_403E14
.text:00403D9C                 dd offset loc_403E14
.text:00403D9C                 dd offset def_403D92
.text:00403D9C                 dd offset def_403D92
.text:00403D9C                 dd offset def_403D92
.text:00403D9C                 dd offset loc_403E14
.text:00403D9C                 dd offset def_403D92
.text:00403D9C                 dd offset loc_403E14
.text:00403D9C                 dd offset def_403D92
.text:00403D9C                 dd offset def_403D92
.text:00403D9C                 dd offset def_403D92
.text:00403D9C                 dd offset def_403D92
.text:00403D9C                 dd offset def_403D92
.text:00403D9C                 dd offset def_403D92
.text:00403D9C                 dd offset def_403D92
.text:00403D9C                 dd offset def_403D92
.text:00403D9C                 dd offset def_403D92
.text:00403D9C                 dd offset def_403D92
.text:00403D9C                 dd offset def_403D92
.text:00403D9C                 dd offset def_403D92
.text:00403D9C                 dd offset loc_403E14
.text:00403D9C                 dd offset loc_403E14
.text:00403D9C                 dd offset loc_403E14
.text:00403E14 ; ---------------------------------------------------------------------------
.text:00403E14
.text:00403E14 loc_403E14:                             ; CODE XREF: sub_403890+502↑j
.text:00403E14                                         ; DATA XREF: sub_403890:jpt_403D92↑o
.text:00403E14                 mov     ebp, edx        ; jumptable 00403D92 cases 33,39-41,45,47,60-62
.text:00403E16                 mov     bl, cl
.text:00403E18                 mov     edx, [esp+4Ch+arg_4]
.text:00403E1C                 cmp     [esp+4Ch+var_34], edx
.text:00403E20                 jnb     short loc_403E2E
.text:00403E22                 mov     ecx, [esp+4Ch+arg_0]
.text:00403E26                 mov     edi, [esp+4Ch+var_34]
.text:00403E2A                 mov     byte ptr [edi+ecx], 3Fh ; '?'
.text:00403E2E
.text:00403E2E loc_403E2E:                             ; CODE XREF: sub_403890+590↑j
.text:00403E2E                 inc     [esp+4Ch+var_34]
.text:00403E32                 mov     eax, [esp+4Ch+arg_4]
.text:00403E36                 cmp     [esp+4Ch+var_34], eax
.text:00403E3A                 jnb     short loc_403E48
.text:00403E3C                 mov     edx, [esp+4Ch+arg_0]
.text:00403E40                 mov     esi, [esp+4Ch+var_34]
.text:00403E44                 mov     byte ptr [esi+edx], 5Ch ; '\'
.text:00403E48
.text:00403E48 loc_403E48:                             ; CODE XREF: sub_403890+5AA↑j
.text:00403E48                 inc     [esp+4Ch+var_34]
.text:00403E4C                 mov     edi, [esp+4Ch+arg_4]
.text:00403E50                 cmp     [esp+4Ch+var_34], edi
.text:00403E54                 jnb     loc_403D43
.text:00403E5A                 mov     eax, [esp+4Ch+arg_0]
.text:00403E5E                 mov     ecx, [esp+4Ch+var_34]
.text:00403E62                 mov     byte ptr [ecx+eax], 3Fh ; '?'
.text:00403E66                 jmp     loc_403D43
.text:00403E66 ; ---------------------------------------------------------------------------
.text:00403E6B                 align 10h
.text:00403E70
.text:00403E70 def_403995:                             ; CODE XREF: sub_403890+FF↑j
.text:00403E70                                         ; sub_403890+105↑j
.text:00403E70                                         ; DATA XREF: ...
.text:00403E70                 cmp     [esp+4Ch+var_22], 0 ; jumptable 00403995 default case, cases 1-6,14-31,64
.text:00403E75                 jz      loc_403FA0
.text:00403E7B                 mov     [esp+4Ch+var_28], 1
.text:00403E83                 mov     esi, ds:__mb_cur_max
.text:00403E89                 movzx   edx, bl
.text:00403E8C                 cmp     dword ptr [esi], 1
.text:00403E8F                 jz      loc_403F84
.text:00403E95                 mov     [esp+4Ch+Type], 157h ; Type
.text:00403E9D                 mov     [esp+4Ch+C], edx ; C
.text:00403EA0                 call    _isctype
.text:00403EA5
.text:00403EA5 loc_403EA5:                             ; CODE XREF: sub_403890+705↓j
.text:00403EA5                 test    eax, eax
.text:00403EA7                 setnz   [esp+4Ch+var_29]
.text:00403EAC
.text:00403EAC loc_403EAC:                             ; CODE XREF: sub_403890+7A5↓j
.text:00403EAC                 cmp     [esp+4Ch+var_21], 0
.text:00403EB1                 lea     eax, [ebp+1]
.text:00403EB4                 jz      loc_403C50
.text:00403EBA                 cmp     [esp+4Ch+var_29], 0
.text:00403EBF                 jnz     def_403D92      ; jumptable 00403995 cases 37,43-58,65-90,93,95,97-122
.text:00403EBF                                         ; jumptable 00403D92 default case, cases 34-38,42-44,46,48-59
.text:00403EC5
.text:00403EC5 loc_403EC5:                             ; CODE XREF: sub_403890+7AB↓j
.text:00403EC5                 mov     eax, [esp+4Ch+var_28]
.text:00403EC9                 lea     edx, [eax+ebp]
.text:00403ECC                 lea     esi, [esi+0]
.text:00403ED0
.text:00403ED0 loc_403ED0:                             ; CODE XREF: sub_403890+6EF↓j
.text:00403ED0                 cmp     [esp+4Ch+var_21], 0
.text:00403ED5                 jz      short loc_403F50
.text:00403ED7                 cmp     [esp+4Ch+var_29], 0
.text:00403EDC                 jnz     short loc_403F50
.text:00403EDE                 mov     edi, [esp+4Ch+arg_4]
.text:00403EE2                 cmp     [esp+4Ch+var_34], edi
.text:00403EE6                 jnb     short loc_403EF4
.text:00403EE8                 mov     esi, [esp+4Ch+arg_0]
.text:00403EEC                 mov     eax, [esp+4Ch+var_34]
.text:00403EF0                 mov     byte ptr [eax+esi], 5Ch ; '\'
.text:00403EF4
.text:00403EF4 loc_403EF4:                             ; CODE XREF: sub_403890+656↑j
.text:00403EF4                 inc     [esp+4Ch+var_34]
.text:00403EF8                 mov     ecx, [esp+4Ch+arg_4]
.text:00403EFC                 cmp     [esp+4Ch+var_34], ecx
.text:00403F00                 jnb     short loc_403F15
.text:00403F02                 mov     cl, bl
.text:00403F04                 mov     esi, [esp+4Ch+arg_0]
.text:00403F08                 mov     edi, [esp+4Ch+var_34]
.text:00403F0C                 shr     cl, 6
.text:00403F0F                 add     cl, 30h ; '0'
.text:00403F12                 mov     [edi+esi], cl
.text:00403F15
.text:00403F15 loc_403F15:                             ; CODE XREF: sub_403890+670↑j
.text:00403F15                 inc     [esp+4Ch+var_34]
.text:00403F19                 mov     edi, [esp+4Ch+arg_4]
.text:00403F1D                 cmp     [esp+4Ch+var_34], edi
.text:00403F21                 jnb     short loc_403F39
.text:00403F23                 mov     cl, bl
.text:00403F25                 mov     esi, [esp+4Ch+arg_0]
.text:00403F29                 shr     cl, 3
.text:00403F2C                 mov     edi, [esp+4Ch+var_34]
.text:00403F30                 and     cl, 7
.text:00403F33                 add     cl, 30h ; '0'
.text:00403F36                 mov     [edi+esi], cl
.text:00403F39
.text:00403F39 loc_403F39:                             ; CODE XREF: sub_403890+691↑j
.text:00403F39                 inc     [esp+4Ch+var_34]
.text:00403F3D                 and     bl, 7
.text:00403F40                 add     bl, 30h ; '0'
.text:00403F43                 lea     esi, [esi+0]
.text:00403F49                 lea     edi, [edi+0]
.text:00403F50
.text:00403F50 loc_403F50:                             ; CODE XREF: sub_403890+645↑j
.text:00403F50                                         ; sub_403890+64C↑j
.text:00403F50                 lea     eax, [ebp+1]
.text:00403F53                 cmp     edx, eax
.text:00403F55                 jbe     loc_403C50
.text:00403F5B                 mov     ebp, [esp+4Ch+arg_4]
.text:00403F5F                 cmp     [esp+4Ch+var_34], ebp
.text:00403F63                 jnb     short loc_403F70
.text:00403F65                 mov     ecx, [esp+4Ch+arg_0]
.text:00403F69                 mov     edi, [esp+4Ch+var_34]
.text:00403F6D                 mov     [edi+ecx], bl
.text:00403F70
.text:00403F70 loc_403F70:                             ; CODE XREF: sub_403890+6D3↑j
.text:00403F70                 inc     [esp+4Ch+var_34]
.text:00403F74                 mov     ebp, eax
.text:00403F76                 mov     eax, [esp+4Ch+Str]
.text:00403F7A                 movzx   ebx, byte ptr [ebp+eax+0]
.text:00403F7F                 jmp     loc_403ED0
.text:00403F84 ; ---------------------------------------------------------------------------
.text:00403F84
.text:00403F84 loc_403F84:                             ; CODE XREF: sub_403890+5FF↑j
.text:00403F84                 mov     ecx, ds:_pctype
.text:00403F8A                 mov     edi, [ecx]
.text:00403F8C                 movzx   eax, word ptr [edi+edx*2]
.text:00403F90                 and     eax, 157h
.text:00403F95                 jmp     loc_403EA5
.text:00403F95 ; ---------------------------------------------------------------------------
.text:00403F9A                 align 10h
.text:00403FA0
.text:00403FA0 loc_403FA0:                             ; CODE XREF: sub_403890+5E5↑j
.text:00403FA0                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00403FA5                 mov     [esp+4Ch+var_18._Wchar], 0
.text:00403FAD                 mov     [esp+4Ch+var_28], 0
.text:00403FB5                 mov     [esp+4Ch+var_29], 1
.text:00403FBA                 jz      loc_40414C
.text:00403FC0
.text:00403FC0 loc_403FC0:                             ; CODE XREF: sub_403890+8CC↓j
.text:00403FC0                 mov     ecx, [esp+4Ch+arg_C]
.text:00403FC4                 lea     edx, [esp+4Ch+var_18]
.text:00403FC8                 mov     edi, [esp+4Ch+Str]
.text:00403FCC                 mov     [esp+4Ch+State], edx ; State
.text:00403FD0                 lea     esi, [esp+4Ch+var_18._State]
.text:00403FD4                 sub     ecx, ebp
.text:00403FD6                 mov     [esp+4Ch+SizeInBytes], ecx ; SizeInBytes
.text:00403FDA                 add     edi, ebp
.text:00403FDC                 mov     [esp+4Ch+var_30], edi
.text:00403FE0                 mov     [esp+4Ch+Type], edi ; SrcCh
.text:00403FE4                 mov     [esp+4Ch+C], esi ; DstCh
.text:00403FE7                 call    mbrtowc
.text:00403FEC                 test    eax, eax
.text:00403FEE                 mov     edi, eax
.text:00403FF0                 jz      short loc_404030
.text:00403FF2                 cmp     eax, 0FFFFFFFFh
.text:00403FF5                 jz      loc_404142
.text:00403FFB                 cmp     eax, 0FFFFFFFEh
.text:00403FFE                 jz      loc_404102
.text:00404004                 cmp     [esp+4Ch+arg_10], 1
.text:00404009                 jz      short loc_404040
.text:0040400B
.text:0040400B loc_40400B:                             ; CODE XREF: sub_403890+7B9↓j
.text:0040400B                                         ; sub_403890+86D↓j
.text:0040400B                 movzx   ecx, [esp+4Ch+var_18._State]
.text:00404010                 mov     [esp+4Ch+Type], 157h ; Type
.text:00404018                 mov     [esp+4Ch+C], ecx ; C
.text:0040401B                 call    iswctype
.text:00404020                 test    eax, eax
.text:00404022                 jnz     short loc_404029
.text:00404024                 mov     [esp+4Ch+var_29], 0
.text:00404029
.text:00404029 loc_404029:                             ; CODE XREF: sub_403890+792↑j
.text:00404029                 mov     [esp+4Ch+var_28], edi
.text:0040402D                 lea     esi, [esi+0]
.text:00404030
.text:00404030 loc_404030:                             ; CODE XREF: sub_403890+760↑j
.text:00404030                                         ; sub_403890+87B↓j ...
.text:00404030                 cmp     [esp+4Ch+var_28], 1
.text:00404035                 jbe     loc_403EAC
.text:0040403B                 jmp     loc_403EC5
.text:00404040 ; ---------------------------------------------------------------------------
.text:00404040
.text:00404040 loc_404040:                             ; CODE XREF: sub_403890+779↑j
.text:00404040                 cmp     [esp+4Ch+arg_10], eax
.text:00404044                 mov     edx, 1
.text:00404049                 jnb     short loc_40400B
.text:0040404B
.text:0040404B loc_40404B:                             ; CODE XREF: sub_403890+867↓j
.text:0040404B                 mov     ecx, [esp+4Ch+Str]
.text:0040404F                 lea     esi, [edx+ebp]
.text:00404052                 movsx   eax, byte ptr [esi+ecx]
.text:00404056                 sub     eax, 5Bh ; '['  ; switch 34 cases
.text:00404059                 cmp     eax, 21h
.text:0040405C                 ja      def_404062      ; jumptable 00404062 default case, cases 93,95,97-123
.text:00404062                 jmp     ds:jpt_404062[eax*4] ; switch jump
.text:00404062 ; ---------------------------------------------------------------------------
.text:00404069                 align 4
.text:0040406C jpt_404062      dd offset loc_403C9B    ; DATA XREF: sub_403890+7D2↑r
.text:0040406C                 dd offset loc_403C9B    ; jump table for switch statement
.text:0040406C                 dd offset def_404062
.text:0040406C                 dd offset loc_403C9B
.text:0040406C                 dd offset def_404062
.text:0040406C                 dd offset loc_403C9B
.text:0040406C                 dd offset def_404062
.text:0040406C                 dd offset def_404062
.text:0040406C                 dd offset def_404062
.text:0040406C                 dd offset def_404062
.text:0040406C                 dd offset def_404062
.text:0040406C                 dd offset def_404062
.text:0040406C                 dd offset def_404062
.text:0040406C                 dd offset def_404062
.text:0040406C                 dd offset def_404062
.text:0040406C                 dd offset def_404062
.text:0040406C                 dd offset def_404062
.text:0040406C                 dd offset def_404062
.text:0040406C                 dd offset def_404062
.text:0040406C                 dd offset def_404062
.text:0040406C                 dd offset def_404062
.text:0040406C                 dd offset def_404062
.text:0040406C                 dd offset def_404062
.text:0040406C                 dd offset def_404062
.text:0040406C                 dd offset def_404062
.text:0040406C                 dd offset def_404062
.text:0040406C                 dd offset def_404062
.text:0040406C                 dd offset def_404062
.text:0040406C                 dd offset def_404062
.text:0040406C                 dd offset def_404062
.text:0040406C                 dd offset def_404062
.text:0040406C                 dd offset def_404062
.text:0040406C                 dd offset def_404062
.text:0040406C                 dd offset loc_403C9B
.text:004040F4 ; ---------------------------------------------------------------------------
.text:004040F4
.text:004040F4 def_404062:                             ; CODE XREF: sub_403890+7CC↑j
.text:004040F4                                         ; sub_403890+7D2↑j
.text:004040F4                                         ; DATA XREF: ...
.text:004040F4                 inc     edx             ; jumptable 00404062 default case, cases 93,95,97-123
.text:004040F5                 cmp     edx, edi
.text:004040F7                 jb      loc_40404B
.text:004040FD                 jmp     loc_40400B
.text:00404102 ; ---------------------------------------------------------------------------
.text:00404102
.text:00404102 loc_404102:                             ; CODE XREF: sub_403890+76E↑j
.text:00404102                 cmp     ebp, [esp+4Ch+arg_C]
.text:00404106                 mov     [esp+4Ch+var_29], 0
.text:0040410B                 jnb     loc_404030
.text:00404111                 mov     eax, [esp+4Ch+var_30]
.text:00404115                 cmp     byte ptr [eax], 0
.text:00404118                 jz      loc_404030
.text:0040411E
.text:0040411E loc_40411E:                             ; CODE XREF: sub_403890+8AB↓j
.text:0040411E                 inc     [esp+4Ch+var_28]
.text:00404122                 mov     esi, [esp+4Ch+var_28]
.text:00404126                 lea     eax, [esi+ebp]
.text:00404129                 cmp     eax, [esp+4Ch+arg_C]
.text:0040412D                 jnb     loc_404030
.text:00404133                 mov     edi, [esp+4Ch+Str]
.text:00404137                 cmp     byte ptr [eax+edi], 0
.text:0040413B                 jnz     short loc_40411E
.text:0040413D                 jmp     loc_404030
.text:00404142 ; ---------------------------------------------------------------------------
.text:00404142
.text:00404142 loc_404142:                             ; CODE XREF: sub_403890+765↑j
.text:00404142                 mov     [esp+4Ch+var_29], 0
.text:00404147                 jmp     loc_404030
.text:0040414C ; ---------------------------------------------------------------------------
.text:0040414C
.text:0040414C loc_40414C:                             ; CODE XREF: sub_403890+72A↑j
.text:0040414C                 mov     edx, [esp+4Ch+Str]
.text:00404150                 mov     [esp+4Ch+C], edx ; Str
.text:00404153                 call    strlen
.text:00404158                 mov     [esp+4Ch+arg_C], eax
.text:0040415C                 jmp     loc_403FC0
.text:00404161 ; ---------------------------------------------------------------------------
.text:00404161
.text:00404161 loc_404161:                             ; CODE XREF: sub_403890+105↑j
.text:00404161                                         ; DATA XREF: sub_403890:jpt_403995↑o
.text:00404161                 mov     dl, bl          ; jumptable 00403995 case 92
.text:00404163                 jmp     loc_403C94
.text:00404168 ; ---------------------------------------------------------------------------
.text:00404168
.text:00404168 loc_404168:                             ; CODE XREF: sub_403890+105↑j
.text:00404168                                         ; sub_403890+902↓j
.text:00404168                                         ; DATA XREF: ...
.text:00404168                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00403995 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:0040416D                 jnz     def_403D92      ; jumptable 00403995 cases 37,43-58,65-90,93,95,97-122
.text:0040416D                                         ; jumptable 00403D92 default case, cases 34-38,42-44,46,48-59
.text:00404173                 jmp     loc_403C9B      ; jumptable 00404062 cases 91,92,94,96,124
.text:00404178 ; ---------------------------------------------------------------------------
.text:00404178
.text:00404178 loc_404178:                             ; CODE XREF: sub_403890+105↑j
.text:00404178                                         ; DATA XREF: sub_403890:jpt_403995↑o
.text:00404178                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh ; jumptable 00403995 cases 123,125
.text:0040417D                 jz      short loc_404194
.text:0040417F                 cmp     [esp+4Ch+arg_C], 1
.text:00404184
.text:00404184 loc_404184:                             ; CODE XREF: sub_403890+90C↓j
.text:00404184                 jnz     def_403D92      ; jumptable 00403995 cases 37,43-58,65-90,93,95,97-122
.text:00404184                                         ; jumptable 00403D92 default case, cases 34-38,42-44,46,48-59
.text:0040418A
.text:0040418A loc_40418A:                             ; CODE XREF: sub_403890+105↑j
.text:0040418A                                         ; DATA XREF: sub_403890:jpt_403995↑o
.text:0040418A                 test    ebp, ebp        ; jumptable 00403995 cases 35,126
.text:0040418C                 jnz     def_403D92      ; jumptable 00403995 cases 37,43-58,65-90,93,95,97-122
.text:0040418C                                         ; jumptable 00403D92 default case, cases 34-38,42-44,46,48-59
.text:00404192                 jmp     short loc_404168 ; jumptable 00403995 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:00404194 ; ---------------------------------------------------------------------------
.text:00404194
.text:00404194 loc_404194:                             ; CODE XREF: sub_403890+8ED↑j
.text:00404194                 mov     esi, [esp+4Ch+Str]
.text:00404198                 cmp     byte ptr [esi+1], 0
.text:0040419C                 jmp     short loc_404184
.text:0040419E ; ---------------------------------------------------------------------------
.text:0040419E
.text:0040419E loc_40419E:                             ; CODE XREF: sub_403890:loc_40392F↑j
.text:0040419E                 test    ebp, ebp
.text:004041A0                 jnz     short loc_4041AD
.text:004041A2                 cmp     [esp+4Ch+arg_10], 1
.text:004041A7                 jz      loc_403C9B      ; jumptable 00404062 cases 91,92,94,96,124
.text:004041AD
.text:004041AD loc_4041AD:                             ; CODE XREF: sub_403890+910↑j
.text:004041AD                 mov     esi, [esp+4Ch+var_1C]
.text:004041B1                 test    esi, esi
.text:004041B3                 jz      short loc_4041E8
.text:004041B5                 mov     edi, [esp+4Ch+var_1C]
.text:004041B9                 movzx   eax, byte ptr [edi]
.text:004041BC                 test    al, al
.text:004041BE                 jz      short loc_4041E8
.text:004041C0
.text:004041C0 loc_4041C0:                             ; CODE XREF: sub_403890+956↓j
.text:004041C0                 mov     ebp, [esp+4Ch+arg_4]
.text:004041C4                 cmp     [esp+4Ch+var_34], ebp
.text:004041C8                 jnb     short loc_4041D5
.text:004041CA                 mov     ecx, [esp+4Ch+arg_0]
.text:004041CE                 mov     ebx, [esp+4Ch+var_34]
.text:004041D2                 mov     [ebx+ecx], al
.text:004041D5
.text:004041D5 loc_4041D5:                             ; CODE XREF: sub_403890+938↑j
.text:004041D5                 inc     [esp+4Ch+var_1C]
.text:004041D9                 inc     [esp+4Ch+var_34]
.text:004041DD                 mov     edx, [esp+4Ch+var_1C]
.text:004041E1                 movzx   eax, byte ptr [edx]
.text:004041E4                 test    al, al
.text:004041E6                 jnz     short loc_4041C0
.text:004041E8
.text:004041E8 loc_4041E8:                             ; CODE XREF: sub_403890+923↑j
.text:004041E8                                         ; sub_403890+92E↑j
.text:004041E8                 mov     eax, [esp+4Ch+arg_4]
.text:004041EC                 cmp     [esp+4Ch+var_34], eax
.text:004041F0                 jnb     short loc_4041FE
.text:004041F2                 mov     edi, [esp+4Ch+arg_0]
.text:004041F6                 mov     esi, [esp+4Ch+var_34]
.text:004041FA                 mov     byte ptr [esi+edi], 0
.text:004041FE
.text:004041FE loc_4041FE:                             ; CODE XREF: sub_403890+960↑j
.text:004041FE                 mov     eax, [esp+4Ch+var_34]
.text:00404202                 jmp     loc_403CCF
.text:00404207 ; ---------------------------------------------------------------------------
.text:00404207
.text:00404207 loc_404207:                             ; CODE XREF: sub_403890+95↑j
.text:00404207                 mov     ebx, [esp+4Ch+Str]
.text:0040420B                 cmp     byte ptr [ebp+ebx+0], 0
.text:00404210                 jmp     loc_40392F
.text:00404215 ; ---------------------------------------------------------------------------
.text:00404215
.text:00404215 loc_404215:                             ; CODE XREF: sub_403890+3D↑j
.text:00404215                                         ; DATA XREF: sub_403890:jpt_4038CD↑o
.text:00404215                 mov     edx, [esp+4Ch+arg_4] ; jumptable 004038CD case 2
.text:00404219                 cmp     [esp+4Ch+var_34], edx
.text:0040421D                 jnb     short loc_404226
.text:0040421F                 mov     ecx, [esp+4Ch+arg_0]
.text:00404223                 mov     byte ptr [ecx], 27h ; '''
.text:00404226
.text:00404226 loc_404226:                             ; CODE XREF: sub_403890+98D↑j
.text:00404226                 mov     [esp+4Ch+var_34], 1
.text:0040422E                 mov     [esp+4Ch+var_1C], 40387Eh
.text:00404236                 jmp     loc_403916
.text:0040423B ; ---------------------------------------------------------------------------
.text:0040423B
.text:0040423B loc_40423B:                             ; CODE XREF: sub_403890+3D↑j
.text:0040423B                                         ; DATA XREF: sub_403890:jpt_4038CD↑o
.text:0040423B                 mov     [esp+4Ch+var_21], 1 ; jumptable 004038CD case 4
.text:00404240                 jmp     def_4038CD      ; jumptable 004038CD default case, cases 0,1
.text:00404245 ; ---------------------------------------------------------------------------
.text:00404245
.text:00404245 loc_404245:                             ; CODE XREF: sub_403890+3D↑j
.text:00404245                                         ; DATA XREF: sub_403890:jpt_4038CD↑o
.text:00404245                 mov     [esp+4Ch+C], 403880h ; jumptable 004038CD cases 5,6
.text:0040424C                 call    ds:libintl_gettext
.text:00404252                 cmp     eax, 403880h
.text:00404257                 mov     edi, eax
.text:00404259                 jz      short loc_4042D0
.text:0040425B
.text:0040425B loc_40425B:                             ; CODE XREF: sub_403890+A45↓j
.text:0040425B                                         ; sub_403890+A4C↓j
.text:0040425B                 mov     [esp+4Ch+C], 40387Eh
.text:00404262                 call    ds:libintl_gettext
.text:00404268                 cmp     eax, 40387Eh
.text:0040426D                 mov     edx, eax
.text:0040426F                 jz      short loc_4042C2
.text:00404271
.text:00404271 loc_404271:                             ; CODE XREF: sub_403890+A37↓j
.text:00404271                                         ; sub_403890+A3E↓j
.text:00404271                 mov     [esp+4Ch+var_1C], edi
.text:00404275                 cmp     byte ptr [edi], 0
.text:00404278                 jz      short loc_4042A8
.text:0040427A
.text:0040427A loc_40427A:                             ; CODE XREF: sub_403890+A16↓j
.text:0040427A                 mov     ecx, [esp+4Ch+arg_4]
.text:0040427E                 cmp     [esp+4Ch+var_34], ecx
.text:00404282                 jnb     short loc_404297
.text:00404284                 mov     ebp, [esp+4Ch+var_1C]
.text:00404288                 mov     edi, [esp+4Ch+arg_0]
.text:0040428C                 mov     esi, [esp+4Ch+var_34]
.text:00404290                 movzx   ebx, byte ptr [ebp+0]
.text:00404294                 mov     [esi+edi], bl
.text:00404297
.text:00404297 loc_404297:                             ; CODE XREF: sub_403890+9F2↑j
.text:00404297                 inc     [esp+4Ch+var_1C]
.text:0040429B                 inc     [esp+4Ch+var_34]
.text:0040429F                 mov     eax, [esp+4Ch+var_1C]
.text:004042A3                 cmp     byte ptr [eax], 0
.text:004042A6                 jnz     short loc_40427A
.text:004042A8
.text:004042A8 loc_4042A8:                             ; CODE XREF: sub_403890+9E8↑j
.text:004042A8                 mov     [esp+4Ch+var_21], 1
.text:004042AD                 mov     [esp+4Ch+var_1C], edx
.text:004042B1                 mov     [esp+4Ch+C], edx ; Str
.text:004042B4                 call    strlen
.text:004042B9                 mov     [esp+4Ch+var_20], eax
.text:004042BD                 jmp     def_4038CD      ; jumptable 004038CD default case, cases 0,1
.text:004042C2 ; ---------------------------------------------------------------------------
.text:004042C2
.text:004042C2 loc_4042C2:                             ; CODE XREF: sub_403890+9DF↑j
.text:004042C2                 cmp     [esp+4Ch+arg_10], 6
.text:004042C7                 jnz     short loc_404271
.text:004042C9                 mov     edx, offset asc_40387C ; "\"'`"
.text:004042CE                 jmp     short loc_404271
.text:004042D0 ; ---------------------------------------------------------------------------
.text:004042D0
.text:004042D0 loc_4042D0:                             ; CODE XREF: sub_403890+9C9↑j
.text:004042D0                 cmp     [esp+4Ch+arg_10], 6
.text:004042D5                 jnz     short loc_40425B
.text:004042D7                 mov     edi, offset asc_40387C ; "\"'`"
.text:004042DC                 jmp     loc_40425B
.text:004042DC sub_403890      endp
.text:004042DC
.text:004042E1 ; ---------------------------------------------------------------------------
.text:004042E1                 jmp     short loc_4042F0
.text:004042E1 ; ---------------------------------------------------------------------------
.text:004042E3                 align 10h
.text:004042F0
.text:004042F0 loc_4042F0:                             ; CODE XREF: .text:004042E1↑j
.text:004042F0                 sub     esp, 0Ch
.text:004042F3                 mov     [esp+4], ebx
.text:004042F7                 mov     [esp+8], esi
.text:004042FB                 call    _errno
.text:00404300                 mov     esi, [eax]
.text:00404302                 mov     dword ptr [esp], 24h ; '$'
.text:00404309                 call    sub_402DC0
.text:0040430E                 mov     edx, [esp+10h]
.text:00404312                 mov     ebx, eax
.text:00404314                 test    edx, edx
.text:00404316                 jz      short loc_404361
.text:00404318
.text:00404318 loc_404318:                             ; CODE XREF: .text:00404366↓j
.text:00404318                 mov     ecx, [edx]
.text:0040431A                 mov     [ebx], ecx
.text:0040431C                 mov     ecx, [edx+4]
.text:0040431F                 mov     [ebx+4], ecx
.text:00404322                 mov     ecx, [edx+8]
.text:00404325                 mov     [ebx+8], ecx
.text:00404328                 mov     ecx, [edx+0Ch]
.text:0040432B                 mov     [ebx+0Ch], ecx
.text:0040432E                 mov     ecx, [edx+10h]
.text:00404331                 mov     [ebx+10h], ecx
.text:00404334                 mov     ecx, [edx+14h]
.text:00404337                 mov     [ebx+14h], ecx
.text:0040433A                 mov     ecx, [edx+18h]
.text:0040433D                 mov     [ebx+18h], ecx
.text:00404340                 mov     ecx, [edx+1Ch]
.text:00404343                 mov     [ebx+1Ch], ecx
.text:00404346                 mov     ecx, [edx+20h]
.text:00404349                 mov     [ebx+20h], ecx
.text:0040434C                 call    _errno
.text:00404351                 mov     [eax], esi
.text:00404353                 mov     esi, [esp+8]
.text:00404357                 mov     eax, ebx
.text:00404359                 mov     ebx, [esp+4]
.text:0040435D                 add     esp, 0Ch
.text:00404360                 retn
.text:00404361 ; ---------------------------------------------------------------------------
.text:00404361
.text:00404361 loc_404361:                             ; CODE XREF: .text:00404316↑j
.text:00404361                 mov     edx, offset dword_407160
.text:00404366                 jmp     short loc_404318
.text:00404366 ; ---------------------------------------------------------------------------
.text:00404368                 align 10h
.text:00404370                 mov     eax, [esp+4]
.text:00404374                 test    eax, eax
.text:00404376                 jz      short loc_404380
.text:00404378
.text:00404378 loc_404378:                             ; CODE XREF: .text:00404385↓j
.text:00404378                 mov     eax, [eax]
.text:0040437A                 retn
.text:0040437A ; ---------------------------------------------------------------------------
.text:0040437B                 align 10h
.text:00404380
.text:00404380 loc_404380:                             ; CODE XREF: .text:00404376↑j
.text:00404380                 mov     eax, offset dword_407160
.text:00404385                 jmp     short loc_404378
.text:00404385 ; ---------------------------------------------------------------------------
.text:00404387                 align 10h
.text:00404390                 mov     edx, [esp+4]
.text:00404394                 test    edx, edx
.text:00404396                 jz      short loc_4043A0
.text:00404398
.text:00404398 loc_404398:                             ; CODE XREF: .text:004043A5↓j
.text:00404398                 mov     ecx, [esp+8]
.text:0040439C                 mov     [edx], ecx
.text:0040439E                 retn
.text:0040439E ; ---------------------------------------------------------------------------
.text:0040439F                 align 10h
.text:004043A0
.text:004043A0 loc_4043A0:                             ; CODE XREF: .text:00404396↑j
.text:004043A0                 mov     edx, offset dword_407160
.text:004043A5                 jmp     short loc_404398
.text:004043A5 ; ---------------------------------------------------------------------------
.text:004043A7                 align 10h
.text:004043B0                 sub     esp, 8
.text:004043B3                 mov     eax, [esp+0Ch]
.text:004043B7                 movzx   ecx, byte ptr [esp+10h]
.text:004043BC                 mov     [esp], ebx
.text:004043BF                 mov     ebx, [esp+14h]
.text:004043C3                 mov     [esp+4], esi
.text:004043C7                 mov     dl, cl
.text:004043C9                 shr     dl, 5
.text:004043CC                 movzx   edx, dl
.text:004043CF                 shl     edx, 2
.text:004043D2                 test    eax, eax
.text:004043D4                 lea     esi, [edx+eax+4]
.text:004043D8                 jz      short loc_404400
.text:004043DA
.text:004043DA loc_4043DA:                             ; CODE XREF: .text:00404406↓j
.text:004043DA                 mov     edx, [esi]
.text:004043DC                 and     ecx, 1Fh
.text:004043DF                 and     ebx, 1
.text:004043E2                 mov     eax, edx
.text:004043E4                 shr     eax, cl
.text:004043E6                 and     eax, 1
.text:004043E9                 xor     ebx, eax
.text:004043EB                 shl     ebx, cl
.text:004043ED                 xor     edx, ebx
.text:004043EF                 mov     [esi], edx
.text:004043F1                 mov     ebx, [esp]
.text:004043F4                 mov     esi, [esp+4]
.text:004043F8                 add     esp, 8
.text:004043FB                 retn
.text:004043FB ; ---------------------------------------------------------------------------
.text:004043FC                 align 10h
.text:00404400
.text:00404400 loc_404400:                             ; CODE XREF: .text:004043D8↑j
.text:00404400                 lea     esi, dword_407164[edx]
.text:00404406                 jmp     short loc_4043DA
.text:00404406 ; ---------------------------------------------------------------------------
.text:00404408                 align 10h
.text:00404410                 sub     esp, 2Ch
.text:00404413                 mov     [esp+24h], ebx
.text:00404417                 mov     ebx, [esp+40h]
.text:0040441B                 mov     [esp+28h], esi
.text:0040441F                 test    ebx, ebx
.text:00404421                 jz      short loc_404470
.text:00404423
.text:00404423 loc_404423:                             ; CODE XREF: .text:00404475↓j
.text:00404423                 call    _errno
.text:00404428                 mov     esi, [eax]
.text:0040442A                 mov     [esp+14h], ebx
.text:0040442E                 mov     edx, [ebx]
.text:00404430                 mov     ecx, [esp+38h]
.text:00404434                 mov     ebx, [esp+3Ch]
.text:00404438                 mov     [esp+10h], edx
.text:0040443C                 mov     edx, [esp+34h]
.text:00404440                 mov     [esp+0Ch], ebx
.text:00404444                 mov     [esp+8], ecx
.text:00404448                 mov     [esp+4], edx
.text:0040444C                 mov     edx, [esp+30h]
.text:00404450                 mov     [esp], edx
.text:00404453                 call    sub_403890
.text:00404458                 mov     ebx, eax
.text:0040445A                 call    _errno
.text:0040445F                 mov     [eax], esi
.text:00404461                 mov     esi, [esp+28h]
.text:00404465                 mov     eax, ebx
.text:00404467                 mov     ebx, [esp+24h]
.text:0040446B                 add     esp, 2Ch
.text:0040446E                 retn
.text:0040446E ; ---------------------------------------------------------------------------
.text:0040446F                 align 10h
.text:00404470
.text:00404470 loc_404470:                             ; CODE XREF: .text:00404421↑j
.text:00404470                 mov     ebx, offset dword_407160
.text:00404475                 jmp     short loc_404423
.text:00404475 ; ---------------------------------------------------------------------------
.text:00404477                 align 10h
.text:00404480                 push    ebp
.text:00404481                 push    edi
.text:00404482                 push    esi
.text:00404483                 push    ebx
.text:00404484                 sub     esp, 2Ch
.text:00404487                 mov     ebp, [esp+48h]
.text:0040448B                 call    _errno
.text:00404490                 mov     edx, [eax]
.text:00404492                 test    ebp, ebp
.text:00404494                 mov     ebx, ebp
.text:00404496                 mov     [esp+28h], edx
.text:0040449A                 jz      loc_404550
.text:004044A0
.text:004044A0 loc_4044A0:                             ; CODE XREF: .text:00404555↓j
.text:004044A0                 call    _errno
.text:004044A5                 mov     edi, [eax]
.text:004044A7                 mov     esi, ebp
.text:004044A9                 mov     [esp+14h], ebx
.text:004044AD                 mov     ecx, [ebx]
.text:004044AF                 mov     dword ptr [esp], 0
.text:004044B6                 mov     edx, [esp+44h]
.text:004044BA                 mov     dword ptr [esp+4], 0
.text:004044C2                 mov     eax, [esp+40h]
.text:004044C6                 mov     [esp+10h], ecx
.text:004044CA                 mov     [esp+0Ch], edx
.text:004044CE                 mov     [esp+8], eax
.text:004044D2                 call    sub_403890
.text:004044D7                 mov     ebx, eax
.text:004044D9                 call    _errno
.text:004044DE                 mov     [eax], edi
.text:004044E0                 lea     edi, [ebx+1]
.text:004044E3                 mov     [esp], edi
.text:004044E6                 call    sub_402DC0
.text:004044EB                 mov     [esp+24h], eax
.text:004044EF                 test    ebp, ebp
.text:004044F1                 jz      short loc_404542
.text:004044F3
.text:004044F3 loc_4044F3:                             ; CODE XREF: .text:00404547↓j
.text:004044F3                 call    _errno
.text:004044F8                 mov     ebp, [eax]
.text:004044FA                 mov     [esp+14h], esi
.text:004044FE                 mov     ecx, [esi]
.text:00404500                 mov     [esp+4], edi
.text:00404504                 mov     edx, [esp+44h]
.text:00404508                 mov     esi, [esp+24h]
.text:0040450C                 mov     [esp+10h], ecx
.text:00404510                 mov     eax, [esp+40h]
.text:00404514                 mov     [esp+0Ch], edx
.text:00404518                 mov     [esp], esi
.text:0040451B                 mov     [esp+8], eax
.text:0040451F                 call    sub_403890
.text:00404524                 call    _errno
.text:00404529                 mov     [eax], ebp
.text:0040452B                 call    _errno
.text:00404530                 mov     ebx, [esp+28h]
.text:00404534                 mov     [eax], ebx
.text:00404536                 mov     eax, [esp+24h]
.text:0040453A                 add     esp, 2Ch
.text:0040453D                 pop     ebx
.text:0040453E                 pop     esi
.text:0040453F                 pop     edi
.text:00404540                 pop     ebp
.text:00404541                 retn
.text:00404542 ; ---------------------------------------------------------------------------
.text:00404542
.text:00404542 loc_404542:                             ; CODE XREF: .text:004044F1↑j
.text:00404542                 mov     esi, offset dword_407160
.text:00404547                 jmp     short loc_4044F3
.text:00404547 ; ---------------------------------------------------------------------------
.text:00404549                 align 10h
.text:00404550
.text:00404550 loc_404550:                             ; CODE XREF: .text:0040449A↑j
.text:00404550                 mov     ebx, offset dword_407160
.text:00404555                 jmp     loc_4044A0
.text:00404555 ; ---------------------------------------------------------------------------
.text:0040455A                 align 10h
.text:00404560                 sub     esp, 1Ch
.text:00404563                 mov     edx, [esp+24h]
.text:00404567                 mov     dword ptr [esp+0Ch], offset dword_407160
.text:0040456F                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00404577                 mov     [esp+4], edx
.text:0040457B                 mov     edx, [esp+20h]
.text:0040457F                 mov     [esp], edx
.text:00404582                 call    sub_4049D0
.text:00404587                 add     esp, 1Ch
.text:0040458A                 retn
.text:0040458A ; ---------------------------------------------------------------------------
.text:0040458B                 align 10h
.text:00404590                 sub     esp, 1Ch
.text:00404593                 mov     edx, [esp+20h]
.text:00404597                 mov     dword ptr [esp+0Ch], offset dword_407160
.text:0040459F                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:004045A7                 mov     [esp+4], edx
.text:004045AB                 mov     dword ptr [esp], 0
.text:004045B2                 call    sub_4049D0
.text:004045B7                 add     esp, 1Ch
.text:004045BA                 retn
.text:004045BA ; ---------------------------------------------------------------------------
.text:004045BB                 align 10h
.text:004045C0                 push    ebp
.text:004045C1                 xor     eax, eax
.text:004045C3                 mov     ecx, 8
.text:004045C8                 push    edi
.text:004045C9                 push    esi
.text:004045CA                 push    ebx
.text:004045CB                 sub     esp, 0ACh
.text:004045D1                 mov     ebp, [esp+0C4h]
.text:004045D8                 cld
.text:004045D9                 lea     edi, [esp+14h]
.text:004045DD                 mov     [esp+10h], ebp
.text:004045E1                 rep stosd
.text:004045E3                 mov     eax, [esp+30h]
.text:004045E7                 mov     edi, [esp+10h]
.text:004045EB                 mov     esi, [esp+14h]
.text:004045EF                 mov     [esp+60h], eax
.text:004045F3                 mov     ebp, [esp+18h]
.text:004045F7                 mov     eax, [esp+10h]
.text:004045FB                 mov     [esp+40h], edi
.text:004045FF                 mov     ecx, [esp+28h]
.text:00404603                 mov     edi, [esp+1Ch]
.text:00404607                 mov     [esp+44h], esi
.text:0040460B                 mov     edx, [esp+2Ch]
.text:0040460F                 mov     esi, [esp+20h]
.text:00404613                 mov     [esp+70h], eax
.text:00404617                 mov     ebx, [esp+24h]
.text:0040461B                 mov     eax, [esp+14h]
.text:0040461F                 mov     [esp+48h], ebp
.text:00404623                 mov     [esp+4Ch], edi
.text:00404627                 mov     [esp+50h], esi
.text:0040462B                 mov     [esp+54h], ebx
.text:0040462F                 mov     [esp+58h], ecx
.text:00404633                 mov     [esp+5Ch], edx
.text:00404637                 mov     [esp+74h], eax
.text:0040463B                 mov     [esp+78h], ebp
.text:0040463F                 mov     [esp+7Ch], edi
.text:00404643                 mov     [esp+80h], esi
.text:0040464A                 mov     [esp+84h], ebx
.text:00404651                 mov     ebx, [esp+30h]
.text:00404655                 mov     [esp+8Ch], edx
.text:0040465C                 mov     edx, [esp+0C8h]
.text:00404663                 mov     [esp+88h], ecx
.text:0040466A                 lea     ecx, [esp+70h]
.text:0040466E                 mov     [esp+4], edx
.text:00404672                 mov     edx, [esp+0C0h]
.text:00404679                 mov     [esp+90h], ebx
.text:00404680                 mov     [esp+0Ch], ecx
.text:00404684                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:0040468C                 mov     [esp], edx
.text:0040468F                 call    sub_4049D0
.text:00404694                 add     esp, 0ACh
.text:0040469A                 pop     ebx
.text:0040469B                 pop     esi
.text:0040469C                 pop     edi
.text:0040469D                 pop     ebp
.text:0040469E                 retn
.text:0040469E ; ---------------------------------------------------------------------------
.text:0040469F                 align 10h
.text:004046A0                 push    ebp
.text:004046A1                 xor     eax, eax
.text:004046A3                 mov     ecx, 8
.text:004046A8                 push    edi
.text:004046A9                 push    esi
.text:004046AA                 push    ebx
.text:004046AB                 sub     esp, 0ACh
.text:004046B1                 mov     edx, [esp+0C4h]
.text:004046B8                 cld
.text:004046B9                 lea     edi, [esp+14h]
.text:004046BD                 mov     [esp+10h], edx
.text:004046C1                 rep stosd
.text:004046C3                 mov     eax, [esp+30h]
.text:004046C7                 mov     ebp, [esp+10h]
.text:004046CB                 mov     edi, [esp+14h]
.text:004046CF                 mov     [esp+60h], eax
.text:004046D3                 mov     esi, [esp+20h]
.text:004046D7                 mov     eax, [esp+10h]
.text:004046DB                 mov     [esp+40h], ebp
.text:004046DF                 mov     ecx, [esp+28h]
.text:004046E3                 mov     ebp, [esp+18h]
.text:004046E7                 mov     [esp+44h], edi
.text:004046EB                 mov     edx, [esp+2Ch]
.text:004046EF                 mov     edi, [esp+1Ch]
.text:004046F3                 mov     [esp+70h], eax
.text:004046F7                 mov     ebx, [esp+24h]
.text:004046FB                 mov     eax, [esp+14h]
.text:004046FF                 mov     [esp+48h], ebp
.text:00404703                 mov     [esp+4Ch], edi
.text:00404707                 mov     [esp+50h], esi
.text:0040470B                 mov     [esp+54h], ebx
.text:0040470F                 mov     [esp+58h], ecx
.text:00404713                 mov     [esp+5Ch], edx
.text:00404717                 mov     [esp+74h], eax
.text:0040471B                 mov     [esp+78h], ebp
.text:0040471F                 mov     [esp+7Ch], edi
.text:00404723                 mov     [esp+80h], esi
.text:0040472A                 mov     [esp+84h], ebx
.text:00404731                 mov     esi, [esp+30h]
.text:00404735                 lea     ebx, [esp+70h]
.text:00404739                 mov     [esp+8Ch], edx
.text:00404740                 mov     edx, [esp+0C8h]
.text:00404747                 mov     [esp+88h], ecx
.text:0040474E                 mov     ecx, [esp+0CCh]
.text:00404755                 mov     [esp+4], edx
.text:00404759                 mov     edx, [esp+0C0h]
.text:00404760                 mov     [esp+90h], esi
.text:00404767                 mov     [esp+0Ch], ebx
.text:0040476B                 mov     [esp+8], ecx
.text:0040476F                 mov     [esp], edx
.text:00404772                 call    sub_4049D0
.text:00404777                 add     esp, 0ACh
.text:0040477D                 pop     ebx
.text:0040477E                 pop     esi
.text:0040477F                 pop     edi
.text:00404780                 pop     ebp
.text:00404781                 retn
.text:00404781 ; ---------------------------------------------------------------------------
.text:00404782                 align 10h
.text:00404790                 push    ebp
.text:00404791                 xor     eax, eax
.text:00404793                 mov     ecx, 8
.text:00404798                 push    edi
.text:00404799                 push    esi
.text:0040479A                 push    ebx
.text:0040479B                 sub     esp, 0ACh
.text:004047A1                 mov     edi, [esp+0C0h]
.text:004047A8                 cld
.text:004047A9                 mov     [esp+10h], edi
.text:004047AD                 lea     edi, [esp+14h]
.text:004047B1                 rep stosd
.text:004047B3                 mov     eax, [esp+30h]
.text:004047B7                 mov     esi, [esp+10h]
.text:004047BB                 mov     ebx, [esp+14h]
.text:004047BF                 mov     [esp+60h], eax
.text:004047C3                 mov     ebp, [esp+18h]
.text:004047C7                 mov     eax, [esp+10h]
.text:004047CB                 mov     [esp+40h], esi
.text:004047CF                 mov     edi, [esp+1Ch]
.text:004047D3                 mov     esi, [esp+20h]
.text:004047D7                 mov     [esp+44h], ebx
.text:004047DB                 mov     ecx, [esp+28h]
.text:004047DF                 mov     edx, [esp+2Ch]
.text:004047E3                 mov     [esp+70h], eax
.text:004047E7                 mov     ebx, [esp+24h]
.text:004047EB                 mov     eax, [esp+14h]
.text:004047EF                 mov     [esp+48h], ebp
.text:004047F3                 mov     [esp+4Ch], edi
.text:004047F7                 mov     [esp+50h], esi
.text:004047FB                 mov     [esp+54h], ebx
.text:004047FF                 mov     [esp+58h], ecx
.text:00404803                 mov     [esp+5Ch], edx
.text:00404807                 mov     [esp+74h], eax
.text:0040480B                 mov     [esp+78h], ebp
.text:0040480F                 mov     [esp+7Ch], edi
.text:00404813                 mov     [esp+80h], esi
.text:0040481A                 mov     [esp+84h], ebx
.text:00404821                 mov     [esp+8Ch], edx
.text:00404828                 lea     edx, [esp+70h]
.text:0040482C                 mov     [esp+88h], ecx
.text:00404833                 mov     ecx, [esp+30h]
.text:00404837                 mov     [esp+0Ch], edx
.text:0040483B                 mov     edx, [esp+0C4h]
.text:00404842                 mov     [esp+90h], ecx
.text:00404849                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00404851                 mov     [esp+4], edx
.text:00404855                 mov     dword ptr [esp], 0
.text:0040485C                 call    sub_4049D0
.text:00404861                 add     esp, 0ACh
.text:00404867                 pop     ebx
.text:00404868                 pop     esi
.text:00404869                 pop     edi
.text:0040486A                 pop     ebp
.text:0040486B                 retn
.text:0040486B ; ---------------------------------------------------------------------------
.text:0040486C                 align 10h
.text:00404870                 push    edi
.text:00404871                 push    esi
.text:00404872                 push    ebx
.text:00404873                 sub     esp, 40h
.text:00404876                 mov     edx, ds:dword_40716C
.text:0040487C                 mov     ebx, ds:dword_407160
.text:00404882                 mov     esi, ds:dword_407168
.text:00404888                 mov     edi, ds:dword_407164
.text:0040488E                 mov     [esp+1Ch], edx
.text:00404892                 mov     ecx, ds:dword_407170
.text:00404898                 mov     edx, ds:dword_407180
.text:0040489E                 mov     [esp+10h], ebx
.text:004048A2                 mov     ebx, ds:dword_407174
.text:004048A8                 mov     [esp+30h], edx
.text:004048AC                 movzx   edx, byte ptr [esp+54h]
.text:004048B1                 mov     [esp+18h], esi
.text:004048B5                 mov     esi, ds:dword_40717C
.text:004048BB                 mov     [esp+14h], edi
.text:004048BF                 mov     edi, ds:dword_407178
.text:004048C5                 mov     [esp+20h], ecx
.text:004048C9                 mov     cl, dl
.text:004048CB                 shr     cl, 5
.text:004048CE                 mov     [esp+24h], ebx
.text:004048D2                 movzx   ebx, cl
.text:004048D5                 mov     [esp+2Ch], esi
.text:004048D9                 lea     esi, [esp+10h]
.text:004048DD                 mov     [esp+28h], edi
.text:004048E1                 lea     edi, [esi+ebx*4]
.text:004048E4                 mov     ebx, edx
.text:004048E6                 mov     edx, [edi+4]
.text:004048E9                 and     ebx, 1Fh
.text:004048EC                 mov     cl, bl
.text:004048EE                 mov     eax, edx
.text:004048F0                 shr     eax, cl
.text:004048F2                 and     eax, 1
.text:004048F5                 xor     eax, 1
.text:004048F8                 shl     eax, cl
.text:004048FA                 xor     edx, eax
.text:004048FC                 mov     [edi+4], edx
.text:004048FF                 mov     edx, [esp+50h]
.text:00404903                 mov     [esp+0Ch], esi
.text:00404907                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:0040490F                 mov     [esp+4], edx
.text:00404913                 mov     dword ptr [esp], 0
.text:0040491A                 call    sub_4049D0
.text:0040491F                 add     esp, 40h
.text:00404922                 pop     ebx
.text:00404923                 pop     esi
.text:00404924                 pop     edi
.text:00404925                 retn
.text:00404925 ; ---------------------------------------------------------------------------
.text:00404926                 align 10h
.text:00404930
.text:00404930 ; =============== S U B R O U T I N E =======================================
.text:00404930
.text:00404930
.text:00404930 ; int __cdecl sub_404930(char *)
.text:00404930 sub_404930      proc near               ; CODE XREF: sub_4036C0+64↑p
.text:00404930
.text:00404930 var_4C          = dword ptr -4Ch
.text:00404930 var_48          = dword ptr -48h
.text:00404930 var_44          = dword ptr -44h
.text:00404930 var_40          = dword ptr -40h
.text:00404930 var_3C          = dword ptr -3Ch
.text:00404930 var_38          = dword ptr -38h
.text:00404930 var_34          = dword ptr -34h
.text:00404930 var_30          = dword ptr -30h
.text:00404930 var_2C          = dword ptr -2Ch
.text:00404930 var_28          = dword ptr -28h
.text:00404930 var_24          = dword ptr -24h
.text:00404930 var_20          = dword ptr -20h
.text:00404930 var_1C          = dword ptr -1Ch
.text:00404930 arg_0           = dword ptr  4
.text:00404930
.text:00404930                 sub     esp, 4Ch
.text:00404933                 mov     ecx, ds:dword_407160
.text:00404939                 mov     [esp+4Ch+var_44], 0FFFFFFFFh ; int
.text:00404941                 mov     edx, ds:dword_407164
.text:00404947                 mov     [esp+4Ch+var_4C], 0 ; int
.text:0040494E                 mov     [esp+4Ch+var_3C], ecx
.text:00404952                 mov     ecx, ds:dword_40716C
.text:00404958                 mov     [esp+4Ch+var_38], edx
.text:0040495C                 mov     edx, ds:dword_407168
.text:00404962                 mov     [esp+4Ch+var_30], ecx
.text:00404966                 mov     ecx, ds:dword_407170
.text:0040496C                 mov     eax, edx
.text:0040496E                 shr     eax, 1Ah
.text:00404971                 and     eax, 1
.text:00404974                 xor     eax, 1
.text:00404977                 mov     [esp+4Ch+var_2C], ecx
.text:0040497B                 shl     eax, 1Ah
.text:0040497E                 mov     ecx, ds:dword_407174
.text:00404984                 xor     edx, eax
.text:00404986                 mov     [esp+4Ch+var_34], edx
.text:0040498A                 mov     edx, [esp+4Ch+arg_0]
.text:0040498E                 mov     [esp+4Ch+var_28], ecx
.text:00404992                 mov     ecx, ds:dword_407178
.text:00404998                 mov     [esp+4Ch+var_48], edx ; char *
.text:0040499C                 mov     [esp+4Ch+var_24], ecx
.text:004049A0                 mov     ecx, ds:dword_40717C
.text:004049A6                 mov     [esp+4Ch+var_20], ecx
.text:004049AA                 mov     ecx, ds:dword_407180
.text:004049B0                 mov     [esp+4Ch+var_1C], ecx
.text:004049B4                 lea     ecx, [esp+4Ch+var_3C]
.text:004049B8                 mov     [esp+4Ch+var_40], ecx ; int
.text:004049BC                 call    sub_4049D0
.text:004049C1                 add     esp, 4Ch
.text:004049C4                 retn
.text:004049C4 sub_404930      endp
.text:004049C4
.text:004049C4 ; ---------------------------------------------------------------------------
.text:004049C5                 align 10h
.text:004049D0
.text:004049D0 ; =============== S U B R O U T I N E =======================================
.text:004049D0
.text:004049D0
.text:004049D0 ; int __cdecl sub_4049D0(int, char *, int, int)
.text:004049D0 sub_4049D0      proc near               ; CODE XREF: .text:00404582↑p
.text:004049D0                                         ; .text:004045B2↑p ...
.text:004049D0
.text:004049D0 Block           = dword ptr -2Ch
.text:004049D0 var_28          = dword ptr -28h
.text:004049D0 Str             = dword ptr -24h
.text:004049D0 var_20          = dword ptr -20h
.text:004049D0 var_1C          = dword ptr -1Ch
.text:004049D0 var_18          = dword ptr -18h
.text:004049D0 var_14          = dword ptr -14h
.text:004049D0 arg_0           = dword ptr  4
.text:004049D0 arg_4           = dword ptr  8
.text:004049D0 arg_8           = dword ptr  0Ch
.text:004049D0 arg_C           = dword ptr  10h
.text:004049D0
.text:004049D0                 push    ebp
.text:004049D1                 push    edi
.text:004049D2                 push    esi
.text:004049D3                 push    ebx
.text:004049D4                 sub     esp, 1Ch
.text:004049D7                 call    _errno
.text:004049DC                 mov     edx, [eax]
.text:004049DE                 mov     eax, [esp+2Ch+arg_0]
.text:004049E2                 mov     [esp+2Ch+var_14], edx
.text:004049E6                 test    eax, eax
.text:004049E8                 js      loc_404B8A
.text:004049EE                 mov     eax, [esp+2Ch+arg_0]
.text:004049F2                 cmp     dword_406040, eax
.text:004049F8                 ja      short loc_404A70
.text:004049FA                 mov     esi, eax
.text:004049FC                 inc     esi
.text:004049FD                 cmp     esi, 1FFFFFFFh
.text:00404A03                 ja      loc_404B8F
.text:00404A09                 mov     ebx, off_40604C
.text:00404A0F                 cmp     ebx, offset dword_406044
.text:00404A15                 jz      loc_404B61
.text:00404A1B
.text:00404A1B loc_404A1B:                             ; CODE XREF: sub_4049D0+1B5↓j
.text:00404A1B                 mov     [esp+2Ch+Block], ebx ; void *
.text:00404A1E                 lea     ecx, ds:0[esi*8]
.text:00404A25                 mov     ebp, esi
.text:00404A27                 mov     [esp+2Ch+var_28], ecx ; size_t
.text:00404A2B                 call    sub_402E50
.text:00404A30                 mov     off_40604C, eax
.text:00404A35                 mov     ebx, dword_406040
.text:00404A3B                 sub     ebp, ebx
.text:00404A3D                 lea     edi, [eax+ebx*8]
.text:00404A40                 lea     eax, ds:0[ebp*8]
.text:00404A47                 cmp     eax, 7
.text:00404A4A                 jbe     short loc_404A60
.text:00404A4C                 test    edi, 4
.text:00404A52                 jz      short loc_404A60
.text:00404A54                 mov     dword ptr [edi], 0
.text:00404A5A                 sub     eax, 4
.text:00404A5D                 add     edi, 4
.text:00404A60
.text:00404A60 loc_404A60:                             ; CODE XREF: sub_4049D0+7A↑j
.text:00404A60                                         ; sub_4049D0+82↑j
.text:00404A60                 cld
.text:00404A61                 mov     ecx, eax
.text:00404A63                 shr     ecx, 2
.text:00404A66                 xor     eax, eax
.text:00404A68                 rep stosd
.text:00404A6A                 mov     dword_406040, esi
.text:00404A70
.text:00404A70 loc_404A70:                             ; CODE XREF: sub_4049D0+28↑j
.text:00404A70                 mov     esi, off_40604C
.text:00404A76                 mov     eax, [esp+2Ch+arg_0]
.text:00404A7A                 mov     ebp, [esi+eax*8]
.text:00404A7D                 mov     edi, [esi+eax*8+4]
.text:00404A81                 mov     esi, [esp+2Ch+arg_C]
.text:00404A85                 test    esi, esi
.text:00404A87                 jz      loc_404B57
.text:00404A8D
.text:00404A8D loc_404A8D:                             ; CODE XREF: sub_4049D0+18C↓j
.text:00404A8D                 call    _errno
.text:00404A92                 mov     ebx, [eax]
.text:00404A94                 mov     [esp+2Ch+var_18], esi ; int
.text:00404A98                 mov     ecx, [esi]
.text:00404A9A                 mov     [esp+2Ch+Block], edi ; int
.text:00404A9D                 mov     edx, [esp+2Ch+arg_8]
.text:00404AA1                 mov     [esp+2Ch+var_28], ebp ; int
.text:00404AA5                 mov     [esp+2Ch+var_1C], ecx ; int
.text:00404AA9                 mov     ecx, [esp+2Ch+arg_4]
.text:00404AAD                 mov     [esp+2Ch+var_20], edx ; int
.text:00404AB1                 mov     [esp+2Ch+Str], ecx ; Str
.text:00404AB5                 call    sub_403890
.text:00404ABA                 mov     esi, eax
.text:00404ABC                 call    _errno
.text:00404AC1                 mov     [eax], ebx
.text:00404AC3                 cmp     ebp, esi
.text:00404AC5                 ja      short loc_404B3B
.text:00404AC7                 lea     ebp, [esi+1]
.text:00404ACA                 mov     ebx, off_40604C
.text:00404AD0                 cmp     edi, offset unk_407060
.text:00404AD6                 mov     esi, [esp+2Ch+arg_0]
.text:00404ADA                 mov     [ebx+esi*8], ebp
.text:00404ADD                 jz      short loc_404AED
.text:00404ADF                 mov     [esp+2Ch+Block], edi ; Block
.text:00404AE2                 call    free
.text:00404AE7                 mov     ebx, off_40604C
.text:00404AED
.text:00404AED loc_404AED:                             ; CODE XREF: sub_4049D0+10D↑j
.text:00404AED                 mov     [esp+2Ch+Block], ebp ; size_t
.text:00404AF0                 call    sub_402DC0
.text:00404AF5                 mov     esi, [esp+2Ch+arg_C]
.text:00404AF9                 mov     edi, eax
.text:00404AFB                 mov     eax, [esp+2Ch+arg_0]
.text:00404AFF                 test    esi, esi
.text:00404B01                 mov     [ebx+eax*8+4], edi
.text:00404B05                 jz      short loc_404B50
.text:00404B07
.text:00404B07 loc_404B07:                             ; CODE XREF: sub_4049D0+185↓j
.text:00404B07                 call    _errno
.text:00404B0C                 mov     ebx, [eax]
.text:00404B0E                 mov     [esp+2Ch+var_18], esi ; int
.text:00404B12                 mov     ecx, [esi]
.text:00404B14                 mov     [esp+2Ch+Block], edi ; int
.text:00404B17                 mov     edx, [esp+2Ch+arg_8]
.text:00404B1B                 mov     [esp+2Ch+var_28], ebp ; int
.text:00404B1F                 mov     [esp+2Ch+var_1C], ecx ; int
.text:00404B23                 mov     ecx, [esp+2Ch+arg_4]
.text:00404B27                 mov     [esp+2Ch+var_20], edx ; int
.text:00404B2B                 mov     [esp+2Ch+Str], ecx ; Str
.text:00404B2F                 call    sub_403890
.text:00404B34                 call    _errno
.text:00404B39                 mov     [eax], ebx
.text:00404B3B
.text:00404B3B loc_404B3B:                             ; CODE XREF: sub_4049D0+F5↑j
.text:00404B3B                 call    _errno
.text:00404B40                 mov     ebp, [esp+2Ch+var_14]
.text:00404B44                 mov     [eax], ebp
.text:00404B46                 add     esp, 1Ch
.text:00404B49                 mov     eax, edi
.text:00404B4B                 pop     ebx
.text:00404B4C                 pop     esi
.text:00404B4D                 pop     edi
.text:00404B4E                 pop     ebp
.text:00404B4F                 retn
.text:00404B50 ; ---------------------------------------------------------------------------
.text:00404B50
.text:00404B50 loc_404B50:                             ; CODE XREF: sub_4049D0+135↑j
.text:00404B50                 mov     esi, offset dword_407160
.text:00404B55                 jmp     short loc_404B07
.text:00404B57 ; ---------------------------------------------------------------------------
.text:00404B57
.text:00404B57 loc_404B57:                             ; CODE XREF: sub_4049D0+B7↑j
.text:00404B57                 mov     esi, offset dword_407160
.text:00404B5C                 jmp     loc_404A8D
.text:00404B61 ; ---------------------------------------------------------------------------
.text:00404B61
.text:00404B61 loc_404B61:                             ; CODE XREF: sub_4049D0+45↑j
.text:00404B61                 mov     [esp+2Ch+Block], 8 ; size_t
.text:00404B68                 call    sub_402DC0
.text:00404B6D                 mov     off_40604C, eax
.text:00404B72                 mov     edi, dword_406044
.text:00404B78                 mov     ebx, eax
.text:00404B7A                 mov     ecx, off_406048
.text:00404B80                 mov     [eax], edi
.text:00404B82                 mov     [eax+4], ecx
.text:00404B85                 jmp     loc_404A1B
.text:00404B8A ; ---------------------------------------------------------------------------
.text:00404B8A
.text:00404B8A loc_404B8A:                             ; CODE XREF: sub_4049D0+18↑j
.text:00404B8A                 call    abort
.text:00404B8F ; ---------------------------------------------------------------------------
.text:00404B8F
.text:00404B8F loc_404B8F:                             ; CODE XREF: sub_4049D0+33↑j
.text:00404B8F                 call    sub_4037C0
.text:00404B8F sub_4049D0      endp
.text:00404B8F
.text:00404B8F ; ---------------------------------------------------------------------------
.text:00404B94                 align 10h
.text:00404BA0
.text:00404BA0 ; =============== S U B R O U T I N E =======================================
.text:00404BA0
.text:00404BA0 ; Attributes: thunk
.text:00404BA0
.text:00404BA0 libintl_bindtextdomain proc near
.text:00404BA0                 jmp     ds:__imp_libintl_bindtextdomain
.text:00404BA0 libintl_bindtextdomain endp
.text:00404BA0
.text:00404BA0 ; ---------------------------------------------------------------------------
.text:00404BA6                 align 10h
.text:00404BB0                 jmp     ds:libintl_textdomain
.text:00404BB0 ; ---------------------------------------------------------------------------
.text:00404BB6                 align 10h
.text:00404BC0                 jmp     ds:libintl_gettext
.text:00404BC0 ; ---------------------------------------------------------------------------
.text:00404BC6                 align 10h
.text:00404BD0 ; const char aS_1[]
.text:00404BD0 aS_1            db ': %s',0             ; DATA XREF: sub_404BF0+B8↓o
.text:00404BD0                                         ; sub_404CF4+122↓o
.text:00404BD5 aUnknownSystemE db 'Unknown system error',0
.text:00404BD5                                         ; DATA XREF: sub_404BF0:loc_404CBD↓o
.text:00404BD5                                         ; sub_404CF4:loc_404E2E↓o
.text:00404BEA ; const char aS_2[]
.text:00404BEA aS_2            db '%s: ',0             ; DATA XREF: sub_404BF0:loc_404CC4↓o
.text:00404BEF                 align 10h
.text:00404BF0
.text:00404BF0 ; =============== S U B R O U T I N E =======================================
.text:00404BF0
.text:00404BF0
.text:00404BF0 ; int __cdecl sub_404BF0(int Code, int ErrorMessage, char *, char)
.text:00404BF0 sub_404BF0      proc near               ; CODE XREF: sub_4015D0+2A7↑p
.text:00404BF0                                         ; sub_4018C0+13F↑p ...
.text:00404BF0
.text:00404BF0 Stream          = dword ptr -1Ch
.text:00404BF0 Format          = dword ptr -18h
.text:00404BF0 ArgList         = dword ptr -14h
.text:00404BF0 Code            = dword ptr  4
.text:00404BF0 ErrorMessage    = dword ptr  8
.text:00404BF0 arg_8           = dword ptr  0Ch
.text:00404BF0 arg_C           = byte ptr  10h
.text:00404BF0
.text:00404BF0                 push    esi
.text:00404BF1                 push    ebx
.text:00404BF2                 sub     esp, 14h
.text:00404BF5                 mov     edx, ds:_iob
.text:00404BFB                 mov     esi, [esp+1Ch+Code]
.text:00404BFF                 mov     ebx, [esp+1Ch+ErrorMessage]
.text:00404C03                 add     edx, 20h ; ' '
.text:00404C06                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00404C09                 call    fflush
.text:00404C0E                 mov     eax, ds:dword_4071E0
.text:00404C13                 test    eax, eax
.text:00404C15                 jz      loc_404CC4
.text:00404C1B                 call    eax ; dword_4071E0
.text:00404C1D
.text:00404C1D loc_404C1D:                             ; CODE XREF: sub_404BF0+F7↓j
.text:00404C1D                 lea     edx, [esp+1Ch+arg_C]
.text:00404C21                 mov     ecx, [esp+1Ch+arg_8]
.text:00404C25                 mov     [esp+1Ch+ArgList], edx ; ArgList
.text:00404C29                 mov     edx, ds:_iob
.text:00404C2F                 mov     [esp+1Ch+Format], ecx ; Format
.text:00404C33                 add     edx, 40h ; '@'
.text:00404C36                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00404C39                 call    vfprintf
.text:00404C3E                 inc     ds:dword_4071F0
.text:00404C44                 test    ebx, ebx
.text:00404C46                 jnz     short loc_404C92
.text:00404C48
.text:00404C48 loc_404C48:                             ; CODE XREF: sub_404BF0+CB↓j
.text:00404C48                 mov     edx, ds:_iob
.text:00404C4E                 lea     ecx, [edx+40h]
.text:00404C51                 mov     ebx, [ecx+4]
.text:00404C54                 dec     ebx
.text:00404C55                 test    ebx, ebx
.text:00404C57                 mov     [ecx+4], ebx
.text:00404C5A                 js      short loc_404C80
.text:00404C5C                 mov     ecx, [edx+40h]
.text:00404C5F                 mov     byte ptr [ecx], 0Ah
.text:00404C62                 inc     dword ptr [edx+40h]
.text:00404C65
.text:00404C65 loc_404C65:                             ; CODE XREF: sub_404BF0+A0↓j
.text:00404C65                 mov     edx, ds:_iob
.text:00404C6B                 add     edx, 40h ; '@'
.text:00404C6E                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00404C71                 call    fflush
.text:00404C76                 test    esi, esi
.text:00404C78                 jnz     short loc_404CEC
.text:00404C7A                 add     esp, 14h
.text:00404C7D                 pop     ebx
.text:00404C7E                 pop     esi
.text:00404C7F                 retn
.text:00404C80 ; ---------------------------------------------------------------------------
.text:00404C80
.text:00404C80 loc_404C80:                             ; CODE XREF: sub_404BF0+6A↑j
.text:00404C80                 mov     [esp+1Ch+Format], ecx ; File
.text:00404C84                 mov     [esp+1Ch+Stream], 0Ah ; Ch
.text:00404C8B                 call    _flsbuf
.text:00404C90                 jmp     short loc_404C65
.text:00404C92 ; ---------------------------------------------------------------------------
.text:00404C92
.text:00404C92 loc_404C92:                             ; CODE XREF: sub_404BF0+56↑j
.text:00404C92                 mov     [esp+1Ch+Stream], ebx ; ErrorMessage
.text:00404C95                 call    strerror
.text:00404C9A                 test    eax, eax
.text:00404C9C                 jz      short loc_404CBD
.text:00404C9E
.text:00404C9E loc_404C9E:                             ; CODE XREF: sub_404BF0+D2↓j
.text:00404C9E                 mov     [esp+1Ch+ArgList], eax
.text:00404CA2                 mov     ebx, ds:_iob
.text:00404CA8                 mov     [esp+1Ch+Format], offset aS_1 ; ": %s"
.text:00404CB0                 add     ebx, 40h ; '@'
.text:00404CB3                 mov     [esp+1Ch+Stream], ebx ; Stream
.text:00404CB6                 call    fprintf
.text:00404CBB                 jmp     short loc_404C48
.text:00404CBD ; ---------------------------------------------------------------------------
.text:00404CBD
.text:00404CBD loc_404CBD:                             ; CODE XREF: sub_404BF0+AC↑j
.text:00404CBD                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:00404CC2                 jmp     short loc_404C9E
.text:00404CC4 ; ---------------------------------------------------------------------------
.text:00404CC4
.text:00404CC4 loc_404CC4:                             ; CODE XREF: sub_404BF0+25↑j
.text:00404CC4                 mov     [esp+1Ch+Format], offset aS_2 ; "%s: "
.text:00404CCC                 mov     edx, ds:_iob
.text:00404CD2                 mov     ecx, ds:dword_4071B0
.text:00404CD8                 add     edx, 40h ; '@'
.text:00404CDB                 mov     [esp+1Ch+ArgList], ecx
.text:00404CDF                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00404CE2                 call    fprintf
.text:00404CE7                 jmp     loc_404C1D
.text:00404CEC ; ---------------------------------------------------------------------------
.text:00404CEC
.text:00404CEC loc_404CEC:                             ; CODE XREF: sub_404BF0+88↑j
.text:00404CEC                 mov     [esp+1Ch+Stream], esi ; Code
.text:00404CEF                 call    exit
.text:00404CEF sub_404BF0      endp
.text:00404CEF
.text:00404CF4
.text:00404CF4 ; =============== S U B R O U T I N E =======================================
.text:00404CF4
.text:00404CF4
.text:00404CF4 ; int __cdecl sub_404CF4(int, int Code, int ErrorMessage, char *Str2, int, char *, char)
.text:00404CF4 sub_404CF4      proc near               ; DATA XREF: sub_404CF4+77↓o
.text:00404CF4
.text:00404CF4 Stream          = dword ptr -28h
.text:00404CF4 Format          = dword ptr -24h
.text:00404CF4 ArgList         = dword ptr -20h
.text:00404CF4 var_1C          = dword ptr -1Ch
.text:00404CF4 Code            = dword ptr  8
.text:00404CF4 ErrorMessage    = dword ptr  0Ch
.text:00404CF4 Str2            = dword ptr  10h
.text:00404CF4 arg_10          = dword ptr  14h
.text:00404CF4 arg_14          = dword ptr  18h
.text:00404CF4 arg_18          = byte ptr  1Ch
.text:00404CF4
.text:00404CF4                 and     eax, 64253A73h
.text:00404CF9                 cmp     ah, [eax]
.text:00404CFB
.text:00404CFB loc_404CFB:                             ; DATA XREF: sub_404CF4:loc_404E35↓o
.text:00404CFB                 add     ds:55003A73h, ah
.text:00404D01                 push    edi
.text:00404D02                 push    esi
.text:00404D03                 push    ebx
.text:00404D04                 sub     esp, 1Ch
.text:00404D07                 mov     edx, ds:dword_407220
.text:00404D0D                 mov     ebp, [esp+28h+Code]
.text:00404D11                 mov     edi, [esp+28h+ErrorMessage]
.text:00404D15                 test    edx, edx
.text:00404D17                 mov     ebx, [esp+28h+Str2]
.text:00404D1B                 mov     esi, [esp+28h+arg_10]
.text:00404D1F                 jz      short loc_404D39
.text:00404D21                 cmp     ds:dword_4071A0, esi
.text:00404D27                 jz      loc_404E60
.text:00404D2D
.text:00404D2D loc_404D2D:                             ; CODE XREF: sub_404CF4+18D↓j
.text:00404D2D                 mov     ds:Str1, ebx
.text:00404D33                 mov     ds:dword_4071A0, esi
.text:00404D39
.text:00404D39 loc_404D39:                             ; CODE XREF: sub_404CF4+2B↑j
.text:00404D39                 mov     edx, ds:_iob
.text:00404D3F                 add     edx, 20h ; ' '
.text:00404D42                 mov     [esp+28h+Stream], edx ; Stream
.text:00404D45                 call    fflush
.text:00404D4A                 mov     eax, ds:dword_4071E0
.text:00404D4F                 test    eax, eax
.text:00404D51                 jz      loc_404E35
.text:00404D57                 call    eax ; dword_4071E0
.text:00404D59
.text:00404D59 loc_404D59:                             ; CODE XREF: sub_404CF4+164↓j
.text:00404D59                 test    ebx, ebx
.text:00404D5B                 jz      short loc_404D7E
.text:00404D5D                 mov     [esp+28h+ArgList], ebx
.text:00404D61                 mov     ebx, ds:_iob
.text:00404D67                 mov     [esp+28h+var_1C], esi
.text:00404D6B                 mov     [esp+28h+Format], offset sub_404CF4 ; Format
.text:00404D73                 add     ebx, 40h ; '@'
.text:00404D76                 mov     [esp+28h+Stream], ebx ; Stream
.text:00404D79                 call    fprintf
.text:00404D7E
.text:00404D7E loc_404D7E:                             ; CODE XREF: sub_404CF4+67↑j
.text:00404D7E                 mov     esi, ds:_iob
.text:00404D84                 lea     edx, [esp+28h+arg_18]
.text:00404D88                 mov     ecx, [esp+28h+arg_14]
.text:00404D8C                 mov     [esp+28h+ArgList], edx ; ArgList
.text:00404D90                 add     esi, 40h ; '@'
.text:00404D93                 mov     [esp+28h+Format], ecx ; Format
.text:00404D97                 mov     [esp+28h+Stream], esi ; Stream
.text:00404D9A                 call    vfprintf
.text:00404D9F                 inc     ds:dword_4071F0
.text:00404DA5                 test    edi, edi
.text:00404DA7                 jnz     short loc_404E00
.text:00404DA9
.text:00404DA9 loc_404DA9:                             ; CODE XREF: sub_404CF4+135↓j
.text:00404DA9                 mov     edx, ds:_iob
.text:00404DAF                 lea     ecx, [edx+40h]
.text:00404DB2                 mov     ebx, [ecx+4]
.text:00404DB5                 dec     ebx
.text:00404DB6                 test    ebx, ebx
.text:00404DB8                 mov     [ecx+4], ebx
.text:00404DBB                 js      short loc_404DE7
.text:00404DBD                 mov     esi, [edx+40h]
.text:00404DC0                 mov     byte ptr [esi], 0Ah
.text:00404DC3                 inc     dword ptr [edx+40h]
.text:00404DC6
.text:00404DC6 loc_404DC6:                             ; CODE XREF: sub_404CF4+103↓j
.text:00404DC6                 mov     ecx, ds:_iob
.text:00404DCC                 add     ecx, 40h ; '@'
.text:00404DCF                 mov     [esp+28h+Stream], ecx ; Stream
.text:00404DD2                 call    fflush
.text:00404DD7                 test    ebp, ebp
.text:00404DD9                 jnz     loc_404E86
.text:00404DDF
.text:00404DDF loc_404DDF:                             ; CODE XREF: sub_404CF4+173↓j
.text:00404DDF                                         ; sub_404CF4+187↓j
.text:00404DDF                 add     esp, 1Ch
.text:00404DE2                 pop     ebx
.text:00404DE3                 pop     esi
.text:00404DE4                 pop     edi
.text:00404DE5                 pop     ebp
.text:00404DE6                 retn
.text:00404DE7 ; ---------------------------------------------------------------------------
.text:00404DE7
.text:00404DE7 loc_404DE7:                             ; CODE XREF: sub_404CF4+C7↑j
.text:00404DE7                 mov     [esp+28h+Format], ecx ; File
.text:00404DEB                 mov     [esp+28h+Stream], 0Ah ; Ch
.text:00404DF2                 call    _flsbuf
.text:00404DF7                 jmp     short loc_404DC6
.text:00404DF7 ; ---------------------------------------------------------------------------
.text:00404DF9                 align 10h
.text:00404E00
.text:00404E00 loc_404E00:                             ; CODE XREF: sub_404CF4+B3↑j
.text:00404E00                 mov     [esp+28h+Stream], edi ; ErrorMessage
.text:00404E03                 call    strerror
.text:00404E08                 test    eax, eax
.text:00404E0A                 jz      short loc_404E2E
.text:00404E0C
.text:00404E0C loc_404E0C:                             ; CODE XREF: sub_404CF4+13F↓j
.text:00404E0C                 mov     [esp+28h+ArgList], eax
.text:00404E10                 mov     edi, ds:_iob
.text:00404E16                 mov     [esp+28h+Format], offset aS_1 ; ": %s"
.text:00404E1E                 add     edi, 40h ; '@'
.text:00404E21                 mov     [esp+28h+Stream], edi ; Stream
.text:00404E24                 call    fprintf
.text:00404E29                 jmp     loc_404DA9
.text:00404E2E ; ---------------------------------------------------------------------------
.text:00404E2E
.text:00404E2E loc_404E2E:                             ; CODE XREF: sub_404CF4+116↑j
.text:00404E2E                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:00404E33                 jmp     short loc_404E0C
.text:00404E35 ; ---------------------------------------------------------------------------
.text:00404E35
.text:00404E35 loc_404E35:                             ; CODE XREF: sub_404CF4+5D↑j
.text:00404E35                 mov     [esp+28h+Format], (offset loc_404CFB+1) ; Format
.text:00404E3D                 mov     ecx, ds:_iob
.text:00404E43                 mov     edx, ds:dword_4071B0
.text:00404E49                 add     ecx, 40h ; '@'
.text:00404E4C                 mov     [esp+28h+ArgList], edx
.text:00404E50                 mov     [esp+28h+Stream], ecx ; Stream
.text:00404E53                 call    fprintf
.text:00404E58                 jmp     loc_404D59
.text:00404E58 ; ---------------------------------------------------------------------------
.text:00404E5D                 align 10h
.text:00404E60
.text:00404E60 loc_404E60:                             ; CODE XREF: sub_404CF4+33↑j
.text:00404E60                 mov     eax, ds:Str1
.text:00404E65                 cmp     ebx, eax
.text:00404E67                 jz      loc_404DDF
.text:00404E6D                 mov     [esp+28h+Format], ebx ; Str2
.text:00404E71                 mov     [esp+28h+Stream], eax ; Str1
.text:00404E74                 call    strcmp
.text:00404E79                 test    eax, eax
.text:00404E7B                 jz      loc_404DDF
.text:00404E81                 jmp     loc_404D2D
.text:00404E86 ; ---------------------------------------------------------------------------
.text:00404E86
.text:00404E86 loc_404E86:                             ; CODE XREF: sub_404CF4+E5↑j
.text:00404E86                 mov     [esp+28h+Stream], ebp ; Code
.text:00404E89                 call    exit
.text:00404E89 sub_404CF4      endp ; sp-analysis failed
.text:00404E89
.text:00404E89 ; ---------------------------------------------------------------------------
.text:00404E8E                 align 10h
.text:00404E90
.text:00404E90 ; =============== S U B R O U T I N E =======================================
.text:00404E90
.text:00404E90 ; Attributes: thunk
.text:00404E90
.text:00404E90 ; size_t __cdecl mbrtowc(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.text:00404E90 mbrtowc         proc near               ; CODE XREF: sub_403890+757↑p
.text:00404E90                 jmp     ds:__imp_mbrtowc
.text:00404E90 mbrtowc         endp
.text:00404E90
.text:00404E90 ; ---------------------------------------------------------------------------
.text:00404E96                 align 10h
.text:00404EA0
.text:00404EA0 ; =============== S U B R O U T I N E =======================================
.text:00404EA0
.text:00404EA0 ; Attributes: bp-based frame
.text:00404EA0
.text:00404EA0 sub_404EA0      proc near               ; CODE XREF: sub_401080+C2↑p
.text:00404EA0                 push    ebp
.text:00404EA1                 mov     ecx, offset byte_407000
.text:00404EA6                 cmp     ecx, offset byte_407000
.text:00404EAC                 mov     ebp, esp
.text:00404EAE                 jnb     short loc_404EC6
.text:00404EB0
.text:00404EB0 loc_404EB0:                             ; CODE XREF: sub_404EA0+24↓j
.text:00404EB0                 mov     edx, [ecx+4]
.text:00404EB3                 mov     eax, [ecx]
.text:00404EB5                 add     ecx, 8
.text:00404EB8                 add     [edx+400000h], eax
.text:00404EBE                 cmp     ecx, offset byte_407000
.text:00404EC4                 jb      short loc_404EB0
.text:00404EC6
.text:00404EC6 loc_404EC6:                             ; CODE XREF: sub_404EA0+E↑j
.text:00404EC6                 pop     ebp
.text:00404EC7                 retn
.text:00404EC7 sub_404EA0      endp
.text:00404EC7
.text:00404EC7 ; ---------------------------------------------------------------------------
.text:00404EC8                 align 10h
.text:00404ED0
.text:00404ED0 ; =============== S U B R O U T I N E =======================================
.text:00404ED0
.text:00404ED0 ; Attributes: bp-based frame
.text:00404ED0
.text:00404ED0 sub_404ED0      proc near               ; CODE XREF: sub_401080+16↑p
.text:00404ED0                                         ; TopLevelExceptionFilter+D7↑p
.text:00404ED0                 push    ebp
.text:00404ED1                 mov     ebp, esp
.text:00404ED3                 fninit
.text:00404ED5                 pop     ebp
.text:00404ED6                 retn
.text:00404ED6 sub_404ED0      endp
.text:00404ED6
.text:00404ED6 ; ---------------------------------------------------------------------------
.text:00404ED7                 align 10h
.text:00404EE0
.text:00404EE0 ; =============== S U B R O U T I N E =======================================
.text:00404EE0
.text:00404EE0 ; Attributes: bp-based frame
.text:00404EE0
.text:00404EE0 ; void __cdecl sub_404EE0()
.text:00404EE0 sub_404EE0      proc near               ; DATA XREF: .text:loc_404F29↓o
.text:00404EE0                                         ; sub_404F70:loc_404F9E↓o
.text:00404EE0                 push    ebp
.text:00404EE1                 mov     ebp, esp
.text:00404EE3                 sub     esp, 8
.text:00404EE6                 mov     eax, off_406084
.text:00404EEB                 mov     edx, [eax]
.text:00404EED                 test    edx, edx
.text:00404EEF                 jnz     short loc_404EF5
.text:00404EF1
.text:00404EF1 loc_404EF1:                             ; CODE XREF: sub_404EE0+2C↓j
.text:00404EF1                 mov     esp, ebp
.text:00404EF3                 pop     ebp
.text:00404EF4                 retn
.text:00404EF5 ; ---------------------------------------------------------------------------
.text:00404EF5
.text:00404EF5 loc_404EF5:                             ; CODE XREF: sub_404EE0+F↑j
.text:00404EF5                                         ; sub_404EE0+2A↓j
.text:00404EF5                 call    dword ptr [eax]
.text:00404EF7                 mov     edx, off_406084
.text:00404EFD                 mov     ecx, [edx+4]
.text:00404F00                 lea     eax, [edx+4]
.text:00404F03                 mov     off_406084, eax
.text:00404F08                 test    ecx, ecx
.text:00404F0A                 jnz     short loc_404EF5
.text:00404F0C                 jmp     short loc_404EF1
.text:00404F0C sub_404EE0      endp
.text:00404F0C
.text:00404F0C ; ---------------------------------------------------------------------------
.text:00404F0E                 align 10h
.text:00404F10                 push    ebp
.text:00404F11                 mov     ebp, esp
.text:00404F13                 sub     esp, 8
.text:00404F16                 mov     [ebp-4], ebx
.text:00404F19                 mov     eax, ds:dword_405290
.text:00404F1E                 cmp     eax, 0FFFFFFFFh
.text:00404F21                 jz      short loc_404F4C
.text:00404F23
.text:00404F23 loc_404F23:                             ; CODE XREF: .text:00404F56↓j
.text:00404F23                                         ; .text:00404F69↓j
.text:00404F23                 test    eax, eax
.text:00404F25                 mov     ebx, eax
.text:00404F27                 jnz     short loc_404F40
.text:00404F29
.text:00404F29 loc_404F29:                             ; CODE XREF: .text:00404F4A↓j
.text:00404F29                 mov     dword ptr [esp], offset sub_404EE0
.text:00404F30                 call    sub_401040
.text:00404F35                 mov     ebx, [ebp-4]
.text:00404F38                 mov     esp, ebp
.text:00404F3A                 pop     ebp
.text:00404F3B                 retn
.text:00404F3B ; ---------------------------------------------------------------------------
.text:00404F3C                 align 10h
.text:00404F40
.text:00404F40 loc_404F40:                             ; CODE XREF: .text:00404F27↑j
.text:00404F40                                         ; .text:00404F48↓j
.text:00404F40                 call    ds:dword_405290[ebx*4]
.text:00404F47                 dec     ebx
.text:00404F48                 jnz     short loc_404F40
.text:00404F4A                 jmp     short loc_404F29
.text:00404F4C ; ---------------------------------------------------------------------------
.text:00404F4C
.text:00404F4C loc_404F4C:                             ; CODE XREF: .text:00404F21↑j
.text:00404F4C                 mov     ecx, ds:dword_405294
.text:00404F52                 xor     eax, eax
.text:00404F54                 test    ecx, ecx
.text:00404F56                 jz      short loc_404F23
.text:00404F58                 mov     edx, offset dword_405290
.text:00404F5D                 lea     esi, [esi+0]
.text:00404F60
.text:00404F60 loc_404F60:                             ; CODE XREF: .text:00404F67↓j
.text:00404F60                 inc     eax
.text:00404F61                 mov     ecx, [edx+eax*4+4]
.text:00404F65                 test    ecx, ecx
.text:00404F67                 jnz     short loc_404F60
.text:00404F69                 jmp     short loc_404F23
.text:00404F69 ; ---------------------------------------------------------------------------
.text:00404F6B                 align 10h
.text:00404F70
.text:00404F70 ; =============== S U B R O U T I N E =======================================
.text:00404F70
.text:00404F70 ; Attributes: bp-based frame
.text:00404F70
.text:00404F70 sub_404F70      proc near               ; CODE XREF: sub_4015D0+18↑p
.text:00404F70
.text:00404F70 var_8           = dword ptr -8
.text:00404F70 var_4           = dword ptr -4
.text:00404F70
.text:00404F70                 push    ebp
.text:00404F71                 mov     ebp, esp
.text:00404F73                 sub     esp, 8
.text:00404F76                 mov     [ebp+var_4], ebx
.text:00404F79                 mov     edx, dword_406080
.text:00404F7F                 test    edx, edx
.text:00404F81                 jnz     short loc_404FAA
.text:00404F83                 mov     eax, ds:dword_405290
.text:00404F88                 mov     edx, 1
.text:00404F8D                 mov     dword_406080, edx
.text:00404F93                 cmp     eax, 0FFFFFFFFh
.text:00404F96                 jz      short loc_404FBD
.text:00404F98
.text:00404F98 loc_404F98:                             ; CODE XREF: sub_404F70+57↓j
.text:00404F98                                         ; sub_404F70+69↓j
.text:00404F98                 test    eax, eax
.text:00404F9A                 mov     ebx, eax
.text:00404F9C                 jnz     short loc_404FB1
.text:00404F9E
.text:00404F9E loc_404F9E:                             ; CODE XREF: sub_404F70+4B↓j
.text:00404F9E                 mov     [esp+8+var_8], offset sub_404EE0 ; void (__cdecl *)()
.text:00404FA5                 call    sub_401040
.text:00404FAA
.text:00404FAA loc_404FAA:                             ; CODE XREF: sub_404F70+11↑j
.text:00404FAA                 mov     ebx, [ebp+var_4]
.text:00404FAD                 mov     esp, ebp
.text:00404FAF                 pop     ebp
.text:00404FB0                 retn
.text:00404FB1 ; ---------------------------------------------------------------------------
.text:00404FB1
.text:00404FB1 loc_404FB1:                             ; CODE XREF: sub_404F70+2C↑j
.text:00404FB1                                         ; sub_404F70+49↓j
.text:00404FB1                 call    ds:dword_405290[ebx*4]
.text:00404FB8                 dec     ebx
.text:00404FB9                 jnz     short loc_404FB1
.text:00404FBB                 jmp     short loc_404F9E
.text:00404FBD ; ---------------------------------------------------------------------------
.text:00404FBD
.text:00404FBD loc_404FBD:                             ; CODE XREF: sub_404F70+26↑j
.text:00404FBD                 mov     ecx, ds:dword_405294
.text:00404FC3                 xor     eax, eax
.text:00404FC5                 test    ecx, ecx
.text:00404FC7                 jz      short loc_404F98
.text:00404FC9                 mov     edx, offset dword_405290
.text:00404FCE                 mov     esi, esi
.text:00404FD0
.text:00404FD0 loc_404FD0:                             ; CODE XREF: sub_404F70+67↓j
.text:00404FD0                 inc     eax
.text:00404FD1                 mov     ebx, [edx+eax*4+4]
.text:00404FD5                 test    ebx, ebx
.text:00404FD7                 jnz     short loc_404FD0
.text:00404FD9                 jmp     short loc_404F98
.text:00404FD9 sub_404F70      endp
.text:00404FD9
.text:00404FD9 ; ---------------------------------------------------------------------------
.text:00404FDB                 align 10h
.text:00404FE0
.text:00404FE0 ; =============== S U B R O U T I N E =======================================
.text:00404FE0
.text:00404FE0 ; Attributes: info_from_lumina
.text:00404FE0
.text:00404FE0 ; void *__cdecl _alloca(size_t Size)
.text:00404FE0 __alloca        proc near               ; CODE XREF: sub_4015D0+13↑p
.text:00404FE0                 push    ecx
.text:00404FE1                 mov     ecx, esp
.text:00404FE3                 add     ecx, 8
.text:00404FE6
.text:00404FE6 loc_404FE6:                             ; CODE XREF: __alloca+1B↓j
.text:00404FE6                 cmp     eax, 1000h
.text:00404FEB                 jb      short loc_404FFD
.text:00404FED                 sub     ecx, 1000h
.text:00404FF3                 or      dword ptr [ecx], 0
.text:00404FF6                 sub     eax, 1000h
.text:00404FFB                 jmp     short loc_404FE6
.text:00404FFD ; ---------------------------------------------------------------------------
.text:00404FFD
.text:00404FFD loc_404FFD:                             ; CODE XREF: __alloca+B↑j
.text:00404FFD                 sub     ecx, eax
.text:00404FFF                 or      dword ptr [ecx], 0
.text:00405002                 mov     eax, esp
.text:00405004                 mov     esp, ecx
.text:00405006                 mov     ecx, [eax]
.text:00405008                 mov     eax, [eax+4]
.text:0040500B                 jmp     eax
.text:0040500B __alloca        endp
.text:0040500B
.text:0040500B ; ---------------------------------------------------------------------------
.text:0040500D                 align 10h
.text:00405010
.text:00405010 ; =============== S U B R O U T I N E =======================================
.text:00405010
.text:00405010 ; Attributes: thunk
.text:00405010
.text:00405010 ; int __cdecl read(int FileHandle, void *DstBuf, unsigned int MaxCharCount)
.text:00405010 _read           proc near               ; CODE XREF: sub_4018C0+173↑p
.text:00405010
.text:00405010 FileHandle      = dword ptr  4
.text:00405010 DstBuf          = dword ptr  8
.text:00405010 MaxCharCount    = dword ptr  0Ch
.text:00405010
.text:00405010                 jmp     ds:__imp__read
.text:00405010 _read           endp
.text:00405010
.text:00405010 ; ---------------------------------------------------------------------------
.text:00405016                 align 10h
.text:00405020
.text:00405020 ; =============== S U B R O U T I N E =======================================
.text:00405020
.text:00405020 ; Attributes: thunk
.text:00405020
.text:00405020 ; int __cdecl isatty(int FileHandle)
.text:00405020 _isatty         proc near               ; CODE XREF: sub_4018C0+6A↑p
.text:00405020                                         ; sub_4018C0+2FF↑p ...
.text:00405020
.text:00405020 FileHandle      = dword ptr  4
.text:00405020
.text:00405020                 jmp     ds:__imp__isatty
.text:00405020 _isatty         endp
.text:00405020
.text:00405020 ; ---------------------------------------------------------------------------
.text:00405026                 align 10h
.text:00405030
.text:00405030 ; =============== S U B R O U T I N E =======================================
.text:00405030
.text:00405030 ; Attributes: thunk
.text:00405030
.text:00405030 ; int __cdecl close(int FileHandle)
.text:00405030 _close          proc near               ; CODE XREF: sub_4015D0+268↑p
.text:00405030
.text:00405030 FileHandle      = dword ptr  4
.text:00405030
.text:00405030                 jmp     ds:__imp__close
.text:00405030 _close          endp
.text:00405030
.text:00405030 ; ---------------------------------------------------------------------------
.text:00405036                 align 10h
.text:00405040                 jmp     ds:__set_app_type
.text:00405040 ; ---------------------------------------------------------------------------
.text:00405046                 align 10h
.text:00405050
.text:00405050 ; =============== S U B R O U T I N E =======================================
.text:00405050
.text:00405050 ; Attributes: thunk
.text:00405050
.text:00405050 ; void __cdecl cexit()
.text:00405050 _cexit          proc near               ; CODE XREF: .text:0040116C↑p
.text:00405050                 jmp     ds:__imp__cexit
.text:00405050 _cexit          endp
.text:00405050
.text:00405050 ; ---------------------------------------------------------------------------
.text:00405056                 align 10h
.text:00405060
.text:00405060 ; =============== S U B R O U T I N E =======================================
.text:00405060
.text:00405060 ; Attributes: thunk
.text:00405060
.text:00405060 ; char ***__cdecl _p__environ()
.text:00405060 __p__environ    proc near               ; CODE XREF: sub_401080+C7↑p
.text:00405060                 jmp     ds:__imp___p__environ
.text:00405060 __p__environ    endp
.text:00405060
.text:00405060 ; ---------------------------------------------------------------------------
.text:00405066                 align 10h
.text:00405070
.text:00405070 ; =============== S U B R O U T I N E =======================================
.text:00405070
.text:00405070 ; Attributes: thunk
.text:00405070
.text:00405070 ; _crt_signal_t __cdecl signal(int Signal, _crt_signal_t Function)
.text:00405070 signal          proc near               ; CODE XREF: TopLevelExceptionFilter+4D↑p
.text:00405070                                         ; TopLevelExceptionFilter+88↑p ...
.text:00405070
.text:00405070 Signal          = dword ptr  4
.text:00405070 Function        = dword ptr  8
.text:00405070
.text:00405070                 jmp     ds:__imp_signal
.text:00405070 signal          endp
.text:00405070
.text:00405070 ; ---------------------------------------------------------------------------
.text:00405076                 align 10h
.text:00405080
.text:00405080 ; =============== S U B R O U T I N E =======================================
.text:00405080
.text:00405080 ; Attributes: thunk
.text:00405080
.text:00405080 ; int *__cdecl _p__fmode()
.text:00405080 __p__fmode      proc near               ; CODE XREF: sub_401080:loc_401135↑p
.text:00405080                 jmp     ds:__imp___p__fmode
.text:00405080 __p__fmode      endp
.text:00405080
.text:00405080 ; ---------------------------------------------------------------------------
.text:00405086                 align 10h
.text:00405090
.text:00405090 ; =============== S U B R O U T I N E =======================================
.text:00405090
.text:00405090 ; Attributes: thunk
.text:00405090
.text:00405090 ; int __cdecl setmode(int FileHandle, int Mode)
.text:00405090 _setmode        proc near               ; CODE XREF: sub_401080+70↑p
.text:00405090                                         ; sub_401080+90↑p ...
.text:00405090
.text:00405090 FileHandle      = dword ptr  4
.text:00405090 Mode            = dword ptr  8
.text:00405090
.text:00405090                 jmp     ds:__imp__setmode
.text:00405090 _setmode        endp
.text:00405090
.text:00405090 ; ---------------------------------------------------------------------------
.text:00405096                 align 10h
.text:004050A0
.text:004050A0 ; =============== S U B R O U T I N E =======================================
.text:004050A0
.text:004050A0 ; Attributes: thunk
.text:004050A0
.text:004050A0 __getmainargs   proc near               ; CODE XREF: sub_401080+49↑p
.text:004050A0                 jmp     ds:__imp___getmainargs
.text:004050A0 __getmainargs   endp
.text:004050A0
.text:004050A0 ; ---------------------------------------------------------------------------
.text:004050A6                 align 10h
.text:004050B0
.text:004050B0 ; =============== S U B R O U T I N E =======================================
.text:004050B0
.text:004050B0 ; Attributes: thunk
.text:004050B0
.text:004050B0 ; void __cdecl free(void *Block)
.text:004050B0 free            proc near               ; CODE XREF: sub_4018C0+235↑p
.text:004050B0                                         ; sub_4049D0+112↑p
.text:004050B0
.text:004050B0 Block           = dword ptr  4
.text:004050B0
.text:004050B0                 jmp     ds:__imp_free
.text:004050B0 free            endp
.text:004050B0
.text:004050B0 ; ---------------------------------------------------------------------------
.text:004050B6                 align 10h
.text:004050C0
.text:004050C0 ; =============== S U B R O U T I N E =======================================
.text:004050C0
.text:004050C0 ; Attributes: thunk
.text:004050C0
.text:004050C0 ; int __cdecl fclose(FILE *Stream)
.text:004050C0 fclose          proc near               ; CODE XREF: sub_4018C0+24D↑p
.text:004050C0                                         ; sub_4036C0+27↑p
.text:004050C0
.text:004050C0 Stream          = dword ptr  4
.text:004050C0
.text:004050C0                 jmp     ds:__imp_fclose
.text:004050C0 fclose          endp
.text:004050C0
.text:004050C0 ; ---------------------------------------------------------------------------
.text:004050C6                 align 10h
.text:004050D0
.text:004050D0 ; =============== S U B R O U T I N E =======================================
.text:004050D0
.text:004050D0 ; Attributes: thunk
.text:004050D0
.text:004050D0 ; size_t __cdecl fwrite(const void *Buffer, size_t ElementSize, size_t ElementCount, FILE *Stream)
.text:004050D0 fwrite          proc near               ; CODE XREF: sub_4018C0+1C7↑p
.text:004050D0
.text:004050D0 Buffer          = dword ptr  4
.text:004050D0 ElementSize     = dword ptr  8
.text:004050D0 ElementCount    = dword ptr  0Ch
.text:004050D0 Stream          = dword ptr  10h
.text:004050D0
.text:004050D0                 jmp     ds:__imp_fwrite
.text:004050D0 fwrite          endp
.text:004050D0
.text:004050D0 ; ---------------------------------------------------------------------------
.text:004050D6                 align 10h
.text:004050E0
.text:004050E0 ; =============== S U B R O U T I N E =======================================
.text:004050E0
.text:004050E0 ; Attributes: thunk
.text:004050E0
.text:004050E0 ; int *__cdecl errno()
.text:004050E0 _errno          proc near               ; CODE XREF: sub_4015D0+291↑p
.text:004050E0                                         ; sub_4018C0+117↑p ...
.text:004050E0                 jmp     ds:__imp__errno
.text:004050E0 _errno          endp
.text:004050E0
.text:004050E0 ; ---------------------------------------------------------------------------
.text:004050E6                 align 10h
.text:004050F0
.text:004050F0 ; =============== S U B R O U T I N E =======================================
.text:004050F0
.text:004050F0 ; Attributes: thunk
.text:004050F0
.text:004050F0 ; char *__cdecl setlocale(int Category, const char *Locale)
.text:004050F0 setlocale       proc near               ; CODE XREF: sub_4015D0+34↑p
.text:004050F0
.text:004050F0 Category        = dword ptr  4
.text:004050F0 Locale          = dword ptr  8
.text:004050F0
.text:004050F0                 jmp     ds:__imp_setlocale
.text:004050F0 setlocale       endp
.text:004050F0
.text:004050F0 ; ---------------------------------------------------------------------------
.text:004050F6                 align 10h
.text:00405100
.text:00405100 ; =============== S U B R O U T I N E =======================================
.text:00405100
.text:00405100 ; Attributes: noreturn thunk
.text:00405100
.text:00405100 ; void __cdecl __noreturn exit(int Code)
.text:00405100 exit            proc near               ; CODE XREF: sub_4015D0:loc_4016D5↑p
.text:00405100                                         ; .text:00401C8E↑p ...
.text:00405100
.text:00405100 Code            = dword ptr  4
.text:00405100
.text:00405100                 jmp     ds:__imp_exit
.text:00405100 exit            endp
.text:00405100
.text:00405100 ; ---------------------------------------------------------------------------
.text:00405106                 align 10h
.text:00405110
.text:00405110 ; =============== S U B R O U T I N E =======================================
.text:00405110
.text:00405110 ; Attributes: thunk
.text:00405110
.text:00405110 ; int __cdecl fputs(const char *Buffer, FILE *Stream)
.text:00405110 fputs           proc near               ; CODE XREF: sub_4015D0+1B1↑p
.text:00405110                                         ; sub_4015D0+1D3↑p ...
.text:00405110
.text:00405110 Buffer          = dword ptr  4
.text:00405110 Stream          = dword ptr  8
.text:00405110
.text:00405110                 jmp     ds:__imp_fputs
.text:00405110 fputs           endp
.text:00405110
.text:00405110 ; ---------------------------------------------------------------------------
.text:00405116                 align 10h
.text:00405120
.text:00405120 ; =============== S U B R O U T I N E =======================================
.text:00405120
.text:00405120 ; Attributes: thunk
.text:00405120
.text:00405120 ; int printf(const char *const Format, ...)
.text:00405120 printf          proc near               ; CODE XREF: sub_4015D0+18F↑p
.text:00405120                                         ; sub_4015D0+234↑p ...
.text:00405120
.text:00405120 Format          = dword ptr  4
.text:00405120
.text:00405120                 jmp     ds:__imp_printf
.text:00405120 printf          endp
.text:00405120
.text:00405120 ; ---------------------------------------------------------------------------
.text:00405126                 align 10h
.text:00405130
.text:00405130 ; =============== S U B R O U T I N E =======================================
.text:00405130
.text:00405130 ; Attributes: thunk
.text:00405130
.text:00405130 ; int fprintf(FILE *const Stream, const char *const Format, ...)
.text:00405130 fprintf         proc near               ; CODE XREF: sub_4015D0+F9↑p
.text:00405130                                         ; .text:00401C86↑p ...
.text:00405130
.text:00405130 Stream          = dword ptr  4
.text:00405130 Format          = dword ptr  8
.text:00405130
.text:00405130                 jmp     ds:__imp_fprintf
.text:00405130 fprintf         endp
.text:00405130
.text:00405130 ; ---------------------------------------------------------------------------
.text:00405136                 align 10h
.text:00405140
.text:00405140 ; =============== S U B R O U T I N E =======================================
.text:00405140
.text:00405140 ; Attributes: thunk
.text:00405140
.text:00405140 ; FILE *__cdecl fopen(const char *FileName, const char *Mode)
.text:00405140 fopen           proc near               ; CODE XREF: sub_4018C0+337↑p
.text:00405140
.text:00405140 FileName        = dword ptr  4
.text:00405140 Mode            = dword ptr  8
.text:00405140
.text:00405140                 jmp     ds:__imp_fopen
.text:00405140 fopen           endp
.text:00405140
.text:00405140 ; ---------------------------------------------------------------------------
.text:00405146                 align 10h
.text:00405150
.text:00405150 ; =============== S U B R O U T I N E =======================================
.text:00405150
.text:00405150 ; Attributes: thunk
.text:00405150
.text:00405150 ; int __cdecl setvbuf(FILE *Stream, char *Buffer, int Mode, size_t Size)
.text:00405150 setvbuf         proc near               ; CODE XREF: sub_4018C0+C6↑p
.text:00405150                                         ; sub_4018C0+2F0↑p
.text:00405150
.text:00405150 Stream          = dword ptr  4
.text:00405150 Buffer          = dword ptr  8
.text:00405150 Mode            = dword ptr  0Ch
.text:00405150 Size            = dword ptr  10h
.text:00405150
.text:00405150                 jmp     ds:__imp_setvbuf
.text:00405150 setvbuf         endp
.text:00405150
.text:00405150 ; ---------------------------------------------------------------------------
.text:00405156                 align 10h
.text:00405160
.text:00405160 ; =============== S U B R O U T I N E =======================================
.text:00405160
.text:00405160 ; Attributes: thunk
.text:00405160
.text:00405160 ; size_t __cdecl strlen(const char *Str)
.text:00405160 strlen          proc near               ; CODE XREF: sub_401FB0+2A9↑p
.text:00405160                                         ; sub_401FB0+346↑p ...
.text:00405160
.text:00405160 Str             = dword ptr  4
.text:00405160
.text:00405160                 jmp     ds:__imp_strlen
.text:00405160 strlen          endp
.text:00405160
.text:00405160 ; ---------------------------------------------------------------------------
.text:00405166                 align 10h
.text:00405170
.text:00405170 ; =============== S U B R O U T I N E =======================================
.text:00405170
.text:00405170 ; Attributes: thunk
.text:00405170
.text:00405170 ; int __cdecl strncmp(const char *Str1, const char *Str2, size_t MaxCount)
.text:00405170 strncmp         proc near               ; CODE XREF: sub_401FB0+23F↑p
.text:00405170                                         ; sub_401FB0+699↑p
.text:00405170
.text:00405170 Str1            = dword ptr  4
.text:00405170 Str2            = dword ptr  8
.text:00405170 MaxCount        = dword ptr  0Ch
.text:00405170
.text:00405170                 jmp     ds:__imp_strncmp
.text:00405170 strncmp         endp
.text:00405170
.text:00405170 ; ---------------------------------------------------------------------------
.text:00405176                 align 10h
.text:00405180
.text:00405180 ; =============== S U B R O U T I N E =======================================
.text:00405180
.text:00405180 ; Attributes: thunk
.text:00405180
.text:00405180 ; char *__cdecl getenv(const char *VarName)
.text:00405180 getenv          proc near               ; CODE XREF: sub_401FB0+B57↑p
.text:00405180
.text:00405180 VarName         = dword ptr  4
.text:00405180
.text:00405180                 jmp     ds:__imp_getenv
.text:00405180 getenv          endp
.text:00405180
.text:00405180 ; ---------------------------------------------------------------------------
.text:00405186                 align 10h
.text:00405190
.text:00405190 ; =============== S U B R O U T I N E =======================================
.text:00405190
.text:00405190 ; Attributes: thunk
.text:00405190
.text:00405190 ; char *__cdecl strchr(const char *Str, int Val)
.text:00405190 strchr          proc near               ; CODE XREF: sub_401FB0+469↑p
.text:00405190                                         ; sub_401FB0+53A↑p ...
.text:00405190
.text:00405190 Str             = dword ptr  4
.text:00405190 Val             = dword ptr  8
.text:00405190
.text:00405190                 jmp     ds:__imp_strchr
.text:00405190 strchr          endp
.text:00405190
.text:00405190 ; ---------------------------------------------------------------------------
.text:00405196                 align 10h
.text:004051A0
.text:004051A0 ; =============== S U B R O U T I N E =======================================
.text:004051A0
.text:004051A0 ; Attributes: thunk
.text:004051A0
.text:004051A0 ; void *__cdecl memcpy(void *, const void *Src, size_t Size)
.text:004051A0 memcpy          proc near               ; CODE XREF: .text:00402F68↑p
.text:004051A0                                         ; .text:00402FB1↑p
.text:004051A0
.text:004051A0 Src             = dword ptr  8
.text:004051A0 Size            = dword ptr  0Ch
.text:004051A0
.text:004051A0                 jmp     ds:__imp_memcpy
.text:004051A0 memcpy          endp
.text:004051A0
.text:004051A0 ; ---------------------------------------------------------------------------
.text:004051A6                 align 10h
.text:004051B0
.text:004051B0 ; =============== S U B R O U T I N E =======================================
.text:004051B0
.text:004051B0 ; Attributes: thunk
.text:004051B0
.text:004051B0 ; void *__cdecl memset(void *, int Val, size_t Size)
.text:004051B0 memset          proc near               ; CODE XREF: .text:00402EE6↑p
.text:004051B0
.text:004051B0 Val             = dword ptr  8
.text:004051B0 Size            = dword ptr  0Ch
.text:004051B0
.text:004051B0                 jmp     ds:__imp_memset
.text:004051B0 memset          endp
.text:004051B0
.text:004051B0 ; ---------------------------------------------------------------------------
.text:004051B6                 align 10h
.text:004051C0
.text:004051C0 ; =============== S U B R O U T I N E =======================================
.text:004051C0
.text:004051C0 ; Attributes: thunk
.text:004051C0
.text:004051C0 ; void *__cdecl calloc(size_t Count, size_t Size)
.text:004051C0 calloc          proc near               ; CODE XREF: .text:00402F23↑p
.text:004051C0
.text:004051C0 Count           = dword ptr  4
.text:004051C0 Size            = dword ptr  8
.text:004051C0
.text:004051C0                 jmp     ds:__imp_calloc
.text:004051C0 calloc          endp
.text:004051C0
.text:004051C0 ; ---------------------------------------------------------------------------
.text:004051C6                 align 10h
.text:004051D0
.text:004051D0 ; =============== S U B R O U T I N E =======================================
.text:004051D0
.text:004051D0 ; Attributes: thunk
.text:004051D0
.text:004051D0 ; void *__cdecl realloc(void *Block, size_t Size)
.text:004051D0 realloc         proc near               ; CODE XREF: .text:00402E20↑p
.text:004051D0                                         ; sub_402E50+16↑p ...
.text:004051D0
.text:004051D0 Block           = dword ptr  4
.text:004051D0 Size            = dword ptr  8
.text:004051D0
.text:004051D0                 jmp     ds:__imp_realloc
.text:004051D0 realloc         endp
.text:004051D0
.text:004051D0 ; ---------------------------------------------------------------------------
.text:004051D6                 align 10h
.text:004051E0
.text:004051E0 ; =============== S U B R O U T I N E =======================================
.text:004051E0
.text:004051E0 ; Attributes: thunk
.text:004051E0
.text:004051E0 ; void *__cdecl malloc(size_t Size)
.text:004051E0 malloc          proc near               ; CODE XREF: sub_402D80+24↑p
.text:004051E0                                         ; sub_402DC0+E↑p ...
.text:004051E0
.text:004051E0 Size            = dword ptr  4
.text:004051E0
.text:004051E0                 jmp     ds:__imp_malloc
.text:004051E0 malloc          endp
.text:004051E0
.text:004051E0 ; ---------------------------------------------------------------------------
.text:004051E6                 align 10h
.text:004051F0
.text:004051F0 ; =============== S U B R O U T I N E =======================================
.text:004051F0
.text:004051F0 ; Attributes: thunk
.text:004051F0
.text:004051F0 ; int __cdecl vfprintf(FILE *const Stream, const char *const Format, va_list ArgList)
.text:004051F0 vfprintf        proc near               ; CODE XREF: sub_403340+C1↑p
.text:004051F0                                         ; sub_404BF0+49↑p ...
.text:004051F0
.text:004051F0 Stream          = dword ptr  4
.text:004051F0 Format          = dword ptr  8
.text:004051F0 ArgList         = dword ptr  0Ch
.text:004051F0
.text:004051F0                 jmp     ds:__imp_vfprintf
.text:004051F0 vfprintf        endp
.text:004051F0
.text:004051F0 ; ---------------------------------------------------------------------------
.text:004051F6                 align 10h
.text:00405200
.text:00405200 ; =============== S U B R O U T I N E =======================================
.text:00405200
.text:00405200 ; Attributes: noreturn thunk
.text:00405200
.text:00405200 ; void __cdecl __noreturn abort()
.text:00405200 abort           proc near               ; CODE XREF: sub_403340:loc_4033DC↑p
.text:00405200                                         ; sub_4037C0+32↑p ...
.text:00405200                 jmp     ds:__imp_abort
.text:00405200 abort           endp
.text:00405200
.text:00405200 ; ---------------------------------------------------------------------------
.text:00405206                 align 10h
.text:00405210
.text:00405210 ; =============== S U B R O U T I N E =======================================
.text:00405210
.text:00405210 ; Attributes: thunk
.text:00405210
.text:00405210 ; int __cdecl flsbuf(int Ch, FILE *File)
.text:00405210 _flsbuf         proc near               ; CODE XREF: sub_403340+128↑p
.text:00405210                                         ; sub_403340+13A↑p ...
.text:00405210
.text:00405210 File            = dword ptr  8
.text:00405210
.text:00405210                 jmp     ds:__imp__flsbuf
.text:00405210 _flsbuf         endp
.text:00405210
.text:00405210 ; ---------------------------------------------------------------------------
.text:00405216                 align 10h
.text:00405220
.text:00405220 ; =============== S U B R O U T I N E =======================================
.text:00405220
.text:00405220 ; Attributes: thunk
.text:00405220
.text:00405220 ; int __cdecl iswctype(wint_t C, wctype_t Type)
.text:00405220 iswctype        proc near               ; CODE XREF: sub_403890+78B↑p
.text:00405220
.text:00405220 C               = word ptr  4
.text:00405220 Type            = word ptr  8
.text:00405220
.text:00405220                 jmp     ds:__imp_iswctype
.text:00405220 iswctype        endp
.text:00405220
.text:00405220 ; ---------------------------------------------------------------------------
.text:00405226                 align 10h
.text:00405230
.text:00405230 ; =============== S U B R O U T I N E =======================================
.text:00405230
.text:00405230 ; Attributes: thunk
.text:00405230
.text:00405230 ; int __cdecl isctype(int C, int Type)
.text:00405230 _isctype        proc near               ; CODE XREF: sub_403890+610↑p
.text:00405230
.text:00405230 C               = dword ptr  4
.text:00405230 Type            = dword ptr  8
.text:00405230
.text:00405230                 jmp     ds:__imp__isctype
.text:00405230 _isctype        endp
.text:00405230
.text:00405230 ; ---------------------------------------------------------------------------
.text:00405236                 align 10h
.text:00405240
.text:00405240 ; =============== S U B R O U T I N E =======================================
.text:00405240
.text:00405240 ; Attributes: thunk
.text:00405240
.text:00405240 ; int __cdecl strcmp(const char *Str1, const char *Str2)
.text:00405240 strcmp          proc near               ; CODE XREF: sub_404CF4+180↑p
.text:00405240
.text:00405240 Str1            = dword ptr  4
.text:00405240 Str2            = dword ptr  8
.text:00405240
.text:00405240                 jmp     ds:__imp_strcmp
.text:00405240 strcmp          endp
.text:00405240
.text:00405240 ; ---------------------------------------------------------------------------
.text:00405246                 align 10h
.text:00405250
.text:00405250 ; =============== S U B R O U T I N E =======================================
.text:00405250
.text:00405250 ; Attributes: thunk
.text:00405250
.text:00405250 ; int __cdecl fflush(FILE *Stream)
.text:00405250 fflush          proc near               ; CODE XREF: sub_404BF0+19↑p
.text:00405250                                         ; sub_404BF0+81↑p ...
.text:00405250
.text:00405250 Stream          = dword ptr  4
.text:00405250
.text:00405250                 jmp     ds:__imp_fflush
.text:00405250 fflush          endp
.text:00405250
.text:00405250 ; ---------------------------------------------------------------------------
.text:00405256                 align 10h
.text:00405260
.text:00405260 ; =============== S U B R O U T I N E =======================================
.text:00405260
.text:00405260 ; Attributes: thunk
.text:00405260
.text:00405260 ; char *__cdecl strerror(int ErrorMessage)
.text:00405260 strerror        proc near               ; CODE XREF: sub_404BF0+A5↑p
.text:00405260                                         ; sub_404CF4+10F↑p
.text:00405260
.text:00405260 ErrorMessage    = dword ptr  4
.text:00405260
.text:00405260                 jmp     ds:__imp_strerror
.text:00405260 strerror        endp
.text:00405260
.text:00405260 ; ---------------------------------------------------------------------------
.text:00405266                 align 10h
.text:00405270
.text:00405270 ; =============== S U B R O U T I N E =======================================
.text:00405270
.text:00405270 ; Attributes: thunk
.text:00405270
.text:00405270 ; LPTOP_LEVEL_EXCEPTION_FILTER __stdcall SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.text:00405270 SetUnhandledExceptionFilter proc near   ; CODE XREF: sub_401080+E↑p
.text:00405270
.text:00405270 lpTopLevelExceptionFilter= dword ptr  4
.text:00405270
.text:00405270                 jmp     ds:__imp_SetUnhandledExceptionFilter
.text:00405270 SetUnhandledExceptionFilter endp
.text:00405270
.text:00405270 ; ---------------------------------------------------------------------------
.text:00405276                 align 10h
.text:00405280
.text:00405280 ; =============== S U B R O U T I N E =======================================
.text:00405280
.text:00405280 ; Attributes: noreturn thunk
.text:00405280
.text:00405280 ; void __stdcall __noreturn ExitProcess(UINT uExitCode)
.text:00405280 ExitProcess     proc near               ; CODE XREF: .text:00401174↑p
.text:00405280
.text:00405280 uExitCode       = dword ptr  4
.text:00405280
.text:00405280                 jmp     ds:__imp_ExitProcess
.text:00405280 ExitProcess     endp
.text:00405280
.text:00405280 ; ---------------------------------------------------------------------------
.text:00405286                 align 10h
.text:00405290 dword_405290    dd 0FFFFFFFFh           ; DATA XREF: .text:00404F19↑r
.text:00405290                                         ; .text:loc_404F40↑r ...
.text:00405294 dword_405294    dd 0                    ; DATA XREF: .text:loc_404F4C↑r
.text:00405294                                         ; sub_404F70:loc_404FBD↑r
.text:00405298                 dd 0FFFFFFFFh
.text:0040529C dword_40529C    dd 59h dup(0)           ; DATA XREF: .data:off_406084↓o
.text:00405400                 dd 300h dup(?)
.text:00405400 _text           ends
.text:00405400
.data:00406000 ; Section 2. (virtual address 00006000)
.data:00406000 ; Virtual size                  : 000000A0 (    160.)
.data:00406000 ; Section size in file          : 00000200 (    512.)
.data:00406000 ; Offset to raw data for section: 00004800
.data:00406000 ; Flags C0000040: Data Readable Writable
.data:00406000 ; Alignment     : default
.data:00406000 ; ===========================================================================
.data:00406000
.data:00406000 ; Segment type: Pure data
.data:00406000 ; Segment permissions: Read/Write
.data:00406000 _data           segment para public 'DATA' use32
.data:00406000                 assume cs:_data
.data:00406000                 ;org 406000h
.data:00406000 dword_406000    dd 0                    ; DATA XREF: sub_401080+1B↑o
.data:00406000                                         ; sub_401080+CC↑r
.data:00406004 dword_406004    dd 0                    ; DATA XREF: sub_401080+41↑o
.data:00406004                                         ; sub_401080+D4↑r
.data:00406008                 align 10h
.data:00406010 dword_406010    dd 1                    ; DATA XREF: sub_4015D0:loc_401817↑r
.data:00406010                                         ; sub_402B40+3↑r ...
.data:00406014 dword_406014    dd 1                    ; DATA XREF: sub_402B40+11↑r
.data:00406014                                         ; .text:00402BE1↑r
.data:00406018 dword_406018    dd 3Fh                  ; DATA XREF: sub_402B40+7D↑w
.data:00406018                                         ; .text:00402C4D↑w
.data:0040601C                 align 10h
.data:00406020 ; char *Buffer
.data:00406020 Buffer          dd offset aCopyrightC2005
.data:00406020                                         ; DATA XREF: sub_403340+DC↑r
.data:00406020                                         ; "Copyright (C) 2005 Free Software Founda"...
.data:00406024                 align 10h
.data:00406030 ; int Code
.data:00406030 Code            dd 1                    ; DATA XREF: sub_4036C0+6D↑r
.data:00406030                                         ; sub_4036C0+9A↑r ...
.data:00406034                 align 10h
.data:00406040 dword_406040    dd 1                    ; DATA XREF: sub_4049D0+22↑r
.data:00406040                                         ; sub_4049D0+65↑r ...
.data:00406044 dword_406044    dd 100h                 ; DATA XREF: sub_4049D0+3F↑o
.data:00406044                                         ; sub_4049D0+1A2↑r ...
.data:00406048 off_406048      dd offset unk_407060    ; DATA XREF: sub_4049D0+1AA↑r
.data:0040604C ; void *off_40604C
.data:0040604C off_40604C      dd offset dword_406044  ; DATA XREF: sub_4049D0+39↑r
.data:0040604C                                         ; sub_4049D0+60↑w ...
.data:00406050 dword_406050    dd 0FFFFFFFFh           ; DATA XREF: sub_401080+22↑r
.data:00406054                 align 10h
.data:00406060 ; int Mode
.data:00406060 Mode            dd 0                    ; DATA XREF: sub_401080+4E↑r
.data:00406060                                         ; sub_401080+80↑r ...
.data:00406064                 align 10h
.data:00406070 dword_406070    dd 4000h                ; DATA XREF: sub_401080+57↑w
.data:00406070                                         ; sub_401080+BA↑r
.data:00406074                 align 10h
.data:00406080 dword_406080    dd 0                    ; DATA XREF: sub_404F70+9↑r
.data:00406080                                         ; sub_404F70+1D↑w
.data:00406084 off_406084      dd offset dword_40529C  ; DATA XREF: sub_404EE0+6↑r
.data:00406084                                         ; sub_404EE0+17↑r ...
.data:00406088                 align 1000h
.data:00406088 _data           ends
.data:00406088
.bss:00407000 ; Section 3. (virtual address 00007000)
.bss:00407000 ; Virtual size                  : 00000250 (    592.)
.bss:00407000 ; Section size in file          : 00000000 (      0.)
.bss:00407000 ; Offset to raw data for section: 00000000
.bss:00407000 ; Flags C0000080: Bss Readable Writable
.bss:00407000 ; Alignment     : default
.bss:00407000 ; ===========================================================================
.bss:00407000
.bss:00407000 ; Segment type: Uninitialized
.bss:00407000 ; Segment permissions: Read/Write
.bss:00407000 _bss            segment para public 'BSS' use32
.bss:00407000                 assume cs:_bss
.bss:00407000                 ;org 407000h
.bss:00407000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00407000 byte_407000     db ?                    ; DATA XREF: sub_4015D0+67↑w
.bss:00407000                                         ; sub_4015D0:loc_4016E0↑w ...
.bss:00407001                 align 10h
.bss:00407010 byte_407010     db ?                    ; DATA XREF: sub_4015D0+6E↑w
.bss:00407010                                         ; sub_4015D0+C9↑w ...
.bss:00407011                 align 10h
.bss:00407020 dword_407020    dd ?                    ; DATA XREF: sub_402B40+9↑o
.bss:00407020                                         ; sub_402B40+17↑w ...
.bss:00407024 dword_407024    dd ?                    ; DATA XREF: sub_402B40+21↑w
.bss:00407024                                         ; .text:00402BF9↑w
.bss:00407028 dword_407028    dd ?                    ; DATA XREF: sub_402B40+77↑r
.bss:00407028                                         ; .text:00402C47↑r
.bss:0040702C dword_40702C    dd ?                    ; DATA XREF: sub_402B40+6B↑r
.bss:0040702C                                         ; .text:00402C3B↑r
.bss:00407030                 db    ? ;
.bss:00407031                 db    ? ;
.bss:00407032                 db    ? ;
.bss:00407033                 db    ? ;
.bss:00407034                 db    ? ;
.bss:00407035                 db    ? ;
.bss:00407036                 db    ? ;
.bss:00407037                 db    ? ;
.bss:00407038                 db    ? ;
.bss:00407039                 db    ? ;
.bss:0040703A                 db    ? ;
.bss:0040703B                 db    ? ;
.bss:0040703C                 db    ? ;
.bss:0040703D                 db    ? ;
.bss:0040703E                 db    ? ;
.bss:0040703F                 db    ? ;
.bss:00407040                 db    ? ;
.bss:00407041                 db    ? ;
.bss:00407042                 db    ? ;
.bss:00407043                 db    ? ;
.bss:00407044                 db    ? ;
.bss:00407045                 db    ? ;
.bss:00407046                 db    ? ;
.bss:00407047                 db    ? ;
.bss:00407048                 db    ? ;
.bss:00407049                 db    ? ;
.bss:0040704A                 db    ? ;
.bss:0040704B                 db    ? ;
.bss:0040704C                 db    ? ;
.bss:0040704D                 db    ? ;
.bss:0040704E                 db    ? ;
.bss:0040704F                 db    ? ;
.bss:00407050 ; char *dword_407050
.bss:00407050 dword_407050    dd ?                    ; DATA XREF: .text:00403694↑w
.bss:00407050                                         ; sub_4036C0+58↑r
.bss:00407054                 align 10h
.bss:00407060 unk_407060      db    ? ;               ; DATA XREF: sub_4049D0+100↑o
.bss:00407060                                         ; .data:off_406048↑o
.bss:00407061                 db    ? ;
.bss:00407062                 db    ? ;
.bss:00407063                 db    ? ;
.bss:00407064                 db    ? ;
.bss:00407065                 db    ? ;
.bss:00407066                 db    ? ;
.bss:00407067                 db    ? ;
.bss:00407068                 db    ? ;
.bss:00407069                 db    ? ;
.bss:0040706A                 db    ? ;
.bss:0040706B                 db    ? ;
.bss:0040706C                 db    ? ;
.bss:0040706D                 db    ? ;
.bss:0040706E                 db    ? ;
.bss:0040706F                 db    ? ;
.bss:00407070                 db    ? ;
.bss:00407071                 db    ? ;
.bss:00407072                 db    ? ;
.bss:00407073                 db    ? ;
.bss:00407074                 db    ? ;
.bss:00407075                 db    ? ;
.bss:00407076                 db    ? ;
.bss:00407077                 db    ? ;
.bss:00407078                 db    ? ;
.bss:00407079                 db    ? ;
.bss:0040707A                 db    ? ;
.bss:0040707B                 db    ? ;
.bss:0040707C                 db    ? ;
.bss:0040707D                 db    ? ;
.bss:0040707E                 db    ? ;
.bss:0040707F                 db    ? ;
.bss:00407080                 db    ? ;
.bss:00407081                 db    ? ;
.bss:00407082                 db    ? ;
.bss:00407083                 db    ? ;
.bss:00407084                 db    ? ;
.bss:00407085                 db    ? ;
.bss:00407086                 db    ? ;
.bss:00407087                 db    ? ;
.bss:00407088                 db    ? ;
.bss:00407089                 db    ? ;
.bss:0040708A                 db    ? ;
.bss:0040708B                 db    ? ;
.bss:0040708C                 db    ? ;
.bss:0040708D                 db    ? ;
.bss:0040708E                 db    ? ;
.bss:0040708F                 db    ? ;
.bss:00407090                 db    ? ;
.bss:00407091                 db    ? ;
.bss:00407092                 db    ? ;
.bss:00407093                 db    ? ;
.bss:00407094                 db    ? ;
.bss:00407095                 db    ? ;
.bss:00407096                 db    ? ;
.bss:00407097                 db    ? ;
.bss:00407098                 db    ? ;
.bss:00407099                 db    ? ;
.bss:0040709A                 db    ? ;
.bss:0040709B                 db    ? ;
.bss:0040709C                 db    ? ;
.bss:0040709D                 db    ? ;
.bss:0040709E                 db    ? ;
.bss:0040709F                 db    ? ;
.bss:004070A0                 db    ? ;
.bss:004070A1                 db    ? ;
.bss:004070A2                 db    ? ;
.bss:004070A3                 db    ? ;
.bss:004070A4                 db    ? ;
.bss:004070A5                 db    ? ;
.bss:004070A6                 db    ? ;
.bss:004070A7                 db    ? ;
.bss:004070A8                 db    ? ;
.bss:004070A9                 db    ? ;
.bss:004070AA                 db    ? ;
.bss:004070AB                 db    ? ;
.bss:004070AC                 db    ? ;
.bss:004070AD                 db    ? ;
.bss:004070AE                 db    ? ;
.bss:004070AF                 db    ? ;
.bss:004070B0                 db    ? ;
.bss:004070B1                 db    ? ;
.bss:004070B2                 db    ? ;
.bss:004070B3                 db    ? ;
.bss:004070B4                 db    ? ;
.bss:004070B5                 db    ? ;
.bss:004070B6                 db    ? ;
.bss:004070B7                 db    ? ;
.bss:004070B8                 db    ? ;
.bss:004070B9                 db    ? ;
.bss:004070BA                 db    ? ;
.bss:004070BB                 db    ? ;
.bss:004070BC                 db    ? ;
.bss:004070BD                 db    ? ;
.bss:004070BE                 db    ? ;
.bss:004070BF                 db    ? ;
.bss:004070C0                 db    ? ;
.bss:004070C1                 db    ? ;
.bss:004070C2                 db    ? ;
.bss:004070C3                 db    ? ;
.bss:004070C4                 db    ? ;
.bss:004070C5                 db    ? ;
.bss:004070C6                 db    ? ;
.bss:004070C7                 db    ? ;
.bss:004070C8                 db    ? ;
.bss:004070C9                 db    ? ;
.bss:004070CA                 db    ? ;
.bss:004070CB                 db    ? ;
.bss:004070CC                 db    ? ;
.bss:004070CD                 db    ? ;
.bss:004070CE                 db    ? ;
.bss:004070CF                 db    ? ;
.bss:004070D0                 db    ? ;
.bss:004070D1                 db    ? ;
.bss:004070D2                 db    ? ;
.bss:004070D3                 db    ? ;
.bss:004070D4                 db    ? ;
.bss:004070D5                 db    ? ;
.bss:004070D6                 db    ? ;
.bss:004070D7                 db    ? ;
.bss:004070D8                 db    ? ;
.bss:004070D9                 db    ? ;
.bss:004070DA                 db    ? ;
.bss:004070DB                 db    ? ;
.bss:004070DC                 db    ? ;
.bss:004070DD                 db    ? ;
.bss:004070DE                 db    ? ;
.bss:004070DF                 db    ? ;
.bss:004070E0                 db    ? ;
.bss:004070E1                 db    ? ;
.bss:004070E2                 db    ? ;
.bss:004070E3                 db    ? ;
.bss:004070E4                 db    ? ;
.bss:004070E5                 db    ? ;
.bss:004070E6                 db    ? ;
.bss:004070E7                 db    ? ;
.bss:004070E8                 db    ? ;
.bss:004070E9                 db    ? ;
.bss:004070EA                 db    ? ;
.bss:004070EB                 db    ? ;
.bss:004070EC                 db    ? ;
.bss:004070ED                 db    ? ;
.bss:004070EE                 db    ? ;
.bss:004070EF                 db    ? ;
.bss:004070F0                 db    ? ;
.bss:004070F1                 db    ? ;
.bss:004070F2                 db    ? ;
.bss:004070F3                 db    ? ;
.bss:004070F4                 db    ? ;
.bss:004070F5                 db    ? ;
.bss:004070F6                 db    ? ;
.bss:004070F7                 db    ? ;
.bss:004070F8                 db    ? ;
.bss:004070F9                 db    ? ;
.bss:004070FA                 db    ? ;
.bss:004070FB                 db    ? ;
.bss:004070FC                 db    ? ;
.bss:004070FD                 db    ? ;
.bss:004070FE                 db    ? ;
.bss:004070FF                 db    ? ;
.bss:00407100                 db    ? ;
.bss:00407101                 db    ? ;
.bss:00407102                 db    ? ;
.bss:00407103                 db    ? ;
.bss:00407104                 db    ? ;
.bss:00407105                 db    ? ;
.bss:00407106                 db    ? ;
.bss:00407107                 db    ? ;
.bss:00407108                 db    ? ;
.bss:00407109                 db    ? ;
.bss:0040710A                 db    ? ;
.bss:0040710B                 db    ? ;
.bss:0040710C                 db    ? ;
.bss:0040710D                 db    ? ;
.bss:0040710E                 db    ? ;
.bss:0040710F                 db    ? ;
.bss:00407110                 db    ? ;
.bss:00407111                 db    ? ;
.bss:00407112                 db    ? ;
.bss:00407113                 db    ? ;
.bss:00407114                 db    ? ;
.bss:00407115                 db    ? ;
.bss:00407116                 db    ? ;
.bss:00407117                 db    ? ;
.bss:00407118                 db    ? ;
.bss:00407119                 db    ? ;
.bss:0040711A                 db    ? ;
.bss:0040711B                 db    ? ;
.bss:0040711C                 db    ? ;
.bss:0040711D                 db    ? ;
.bss:0040711E                 db    ? ;
.bss:0040711F                 db    ? ;
.bss:00407120                 db    ? ;
.bss:00407121                 db    ? ;
.bss:00407122                 db    ? ;
.bss:00407123                 db    ? ;
.bss:00407124                 db    ? ;
.bss:00407125                 db    ? ;
.bss:00407126                 db    ? ;
.bss:00407127                 db    ? ;
.bss:00407128                 db    ? ;
.bss:00407129                 db    ? ;
.bss:0040712A                 db    ? ;
.bss:0040712B                 db    ? ;
.bss:0040712C                 db    ? ;
.bss:0040712D                 db    ? ;
.bss:0040712E                 db    ? ;
.bss:0040712F                 db    ? ;
.bss:00407130                 db    ? ;
.bss:00407131                 db    ? ;
.bss:00407132                 db    ? ;
.bss:00407133                 db    ? ;
.bss:00407134                 db    ? ;
.bss:00407135                 db    ? ;
.bss:00407136                 db    ? ;
.bss:00407137                 db    ? ;
.bss:00407138                 db    ? ;
.bss:00407139                 db    ? ;
.bss:0040713A                 db    ? ;
.bss:0040713B                 db    ? ;
.bss:0040713C                 db    ? ;
.bss:0040713D                 db    ? ;
.bss:0040713E                 db    ? ;
.bss:0040713F                 db    ? ;
.bss:00407140                 db    ? ;
.bss:00407141                 db    ? ;
.bss:00407142                 db    ? ;
.bss:00407143                 db    ? ;
.bss:00407144                 db    ? ;
.bss:00407145                 db    ? ;
.bss:00407146                 db    ? ;
.bss:00407147                 db    ? ;
.bss:00407148                 db    ? ;
.bss:00407149                 db    ? ;
.bss:0040714A                 db    ? ;
.bss:0040714B                 db    ? ;
.bss:0040714C                 db    ? ;
.bss:0040714D                 db    ? ;
.bss:0040714E                 db    ? ;
.bss:0040714F                 db    ? ;
.bss:00407150                 db    ? ;
.bss:00407151                 db    ? ;
.bss:00407152                 db    ? ;
.bss:00407153                 db    ? ;
.bss:00407154                 db    ? ;
.bss:00407155                 db    ? ;
.bss:00407156                 db    ? ;
.bss:00407157                 db    ? ;
.bss:00407158                 db    ? ;
.bss:00407159                 db    ? ;
.bss:0040715A                 db    ? ;
.bss:0040715B                 db    ? ;
.bss:0040715C                 db    ? ;
.bss:0040715D                 db    ? ;
.bss:0040715E                 db    ? ;
.bss:0040715F                 db    ? ;
.bss:00407160 dword_407160    dd ?                    ; DATA XREF: .text:loc_404361↑o
.bss:00407160                                         ; .text:loc_404380↑o ...
.bss:00407164 dword_407164    dd ?                    ; DATA XREF: .text:loc_404400↑o
.bss:00407164                                         ; .text:00404888↑r ...
.bss:00407168 dword_407168    dd ?                    ; DATA XREF: .text:00404882↑r
.bss:00407168                                         ; sub_404930+2C↑r
.bss:0040716C dword_40716C    dd ?                    ; DATA XREF: .text:00404876↑r
.bss:0040716C                                         ; sub_404930+22↑r
.bss:00407170 dword_407170    dd ?                    ; DATA XREF: .text:00404892↑r
.bss:00407170                                         ; sub_404930+36↑r
.bss:00407174 dword_407174    dd ?                    ; DATA XREF: .text:004048A2↑r
.bss:00407174                                         ; sub_404930+4E↑r
.bss:00407178 dword_407178    dd ?                    ; DATA XREF: .text:004048BF↑r
.bss:00407178                                         ; sub_404930+62↑r
.bss:0040717C dword_40717C    dd ?                    ; DATA XREF: .text:004048B5↑r
.bss:0040717C                                         ; sub_404930+70↑r
.bss:00407180 dword_407180    dd ?                    ; DATA XREF: .text:00404898↑r
.bss:00407180                                         ; sub_404930+7A↑r
.bss:00407184                 align 10h
.bss:00407190 ; char *Str1
.bss:00407190 Str1            dd ?                    ; DATA XREF: sub_404CF4:loc_404D2D↑w
.bss:00407190                                         ; sub_404CF4:loc_404E60↑r
.bss:00407194                 align 10h
.bss:004071A0 dword_4071A0    dd ?                    ; DATA XREF: sub_404CF4+2D↑r
.bss:004071A0                                         ; sub_404CF4+3F↑w
.bss:004071A4                 align 10h
.bss:004071B0 dword_4071B0    dd ?                    ; DATA XREF: sub_4015D0+2E↑w
.bss:004071B0                                         ; sub_4015D0+E5↑r ...
.bss:004071B4                 db    ? ;
.bss:004071B5                 db    ? ;
.bss:004071B6                 db    ? ;
.bss:004071B7                 db    ? ;
.bss:004071B8                 db    ? ;
.bss:004071B9                 db    ? ;
.bss:004071BA                 db    ? ;
.bss:004071BB                 db    ? ;
.bss:004071BC                 db    ? ;
.bss:004071BD                 db    ? ;
.bss:004071BE                 db    ? ;
.bss:004071BF                 db    ? ;
.bss:004071C0                 db    ? ;
.bss:004071C1                 db    ? ;
.bss:004071C2                 db    ? ;
.bss:004071C3                 db    ? ;
.bss:004071C4                 db    ? ;
.bss:004071C5                 db    ? ;
.bss:004071C6                 db    ? ;
.bss:004071C7                 db    ? ;
.bss:004071C8                 db    ? ;
.bss:004071C9                 db    ? ;
.bss:004071CA                 db    ? ;
.bss:004071CB                 db    ? ;
.bss:004071CC                 db    ? ;
.bss:004071CD                 db    ? ;
.bss:004071CE                 db    ? ;
.bss:004071CF                 db    ? ;
.bss:004071D0 dword_4071D0    dd ?                    ; DATA XREF: sub_402B40+71↑w
.bss:004071D0                                         ; .text:00402C41↑w
.bss:004071D4                 align 10h
.bss:004071E0 dword_4071E0    dd ?                    ; CODE XREF: sub_404CF4+63↑p
.bss:004071E0                                         ; DATA XREF: sub_404BF0+1E↑r ...
.bss:004071E4                 align 10h
.bss:004071F0 dword_4071F0    dd ?                    ; DATA XREF: sub_404BF0+4E↑w
.bss:004071F0                                         ; sub_404CF4+AB↑w
.bss:004071F4                 db    ? ;
.bss:004071F5                 db    ? ;
.bss:004071F6                 db    ? ;
.bss:004071F7                 db    ? ;
.bss:004071F8                 db    ? ;
.bss:004071F9                 db    ? ;
.bss:004071FA                 db    ? ;
.bss:004071FB                 db    ? ;
.bss:004071FC                 db    ? ;
.bss:004071FD                 db    ? ;
.bss:004071FE                 db    ? ;
.bss:004071FF                 db    ? ;
.bss:00407200                 db    ? ;
.bss:00407201                 db    ? ;
.bss:00407202                 db    ? ;
.bss:00407203                 db    ? ;
.bss:00407204                 db    ? ;
.bss:00407205                 db    ? ;
.bss:00407206                 db    ? ;
.bss:00407207                 db    ? ;
.bss:00407208                 db    ? ;
.bss:00407209                 db    ? ;
.bss:0040720A                 db    ? ;
.bss:0040720B                 db    ? ;
.bss:0040720C                 db    ? ;
.bss:0040720D                 db    ? ;
.bss:0040720E                 db    ? ;
.bss:0040720F                 db    ? ;
.bss:00407210                 db    ? ;
.bss:00407211                 db    ? ;
.bss:00407212                 db    ? ;
.bss:00407213                 db    ? ;
.bss:00407214                 db    ? ;
.bss:00407215                 db    ? ;
.bss:00407216                 db    ? ;
.bss:00407217                 db    ? ;
.bss:00407218                 db    ? ;
.bss:00407219                 db    ? ;
.bss:0040721A                 db    ? ;
.bss:0040721B                 db    ? ;
.bss:0040721C                 db    ? ;
.bss:0040721D                 db    ? ;
.bss:0040721E                 db    ? ;
.bss:0040721F                 db    ? ;
.bss:00407220 dword_407220    dd ?                    ; DATA XREF: sub_404CF4+13↑r
.bss:00407224                 align 1000h
.bss:00407224 _bss            ends
.bss:00407224
.idata:00408000 ; Section 4. (virtual address 00008000)
.idata:00408000 ; Virtual size                  : 000005DC (   1500.)
.idata:00408000 ; Section size in file          : 00000600 (   1536.)
.idata:00408000 ; Offset to raw data for section: 00004A00
.idata:00408000 ; Flags C0000040: Data Readable Writable
.idata:00408000 ; Alignment     : default
.idata:00408000 ; ===========================================================================
.idata:00408000
.idata:00408000 ; Segment type: Externs
.idata:00408000 ; _idata
.idata:00408000
.idata:00408001
.idata:00408168 ;
.idata:00408168 ; Imports from libintl3.dll
.idata:00408168 ;
.idata:00408168                 extrn __imp_libintl_bindtextdomain:dword
.idata:00408168                                         ; CODE XREF: sub_4015D0+48↑p
.idata:00408168                                         ; DATA XREF: sub_4015D0+48↑r ...
.idata:0040816C                 extrn libintl_gettext:dword
.idata:0040816C                                         ; CODE XREF: sub_4015D0+D9↑p
.idata:0040816C                                         ; sub_4015D0+17C↑p ...
.idata:00408170                 extrn libintl_textdomain:dword
.idata:00408170                                         ; CODE XREF: sub_4015D0+55↑p
.idata:00408170                                         ; DATA XREF: sub_4015D0+55↑r ...
.idata:00408174
.idata:0040817C ;
.idata:0040817C ; Imports from KERNEL32.dll
.idata:0040817C ;
.idata:0040817C ; void (__stdcall __noreturn *ExitProcess)(UINT uExitCode)
.idata:0040817C                 extrn __imp_ExitProcess:dword
.idata:0040817C                                         ; DATA XREF: ExitProcess↑r
.idata:00408180 ; LPTOP_LEVEL_EXCEPTION_FILTER (__stdcall *SetUnhandledExceptionFilter)(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.idata:00408180                 extrn __imp_SetUnhandledExceptionFilter:dword
.idata:00408180                                         ; DATA XREF: SetUnhandledExceptionFilter↑r
.idata:00408184
.idata:0040818C ;
.idata:0040818C ; Imports from msvcrt.dll
.idata:0040818C ;
.idata:0040818C ; int (__cdecl *_close)(int FileHandle)
.idata:0040818C                 extrn __imp__close:dword
.idata:0040818C                                         ; DATA XREF: _close↑r
.idata:00408190 ; int (__cdecl *_isatty)(int FileHandle)
.idata:00408190                 extrn __imp__isatty:dword
.idata:00408190                                         ; DATA XREF: _isatty↑r
.idata:00408194 ; int (__cdecl *_read)(int FileHandle, void *DstBuf, unsigned int MaxCharCount)
.idata:00408194                 extrn __imp__read:dword ; DATA XREF: _read↑r
.idata:00408198
.idata:004081A0 ;
.idata:004081A0 ; Imports from MSVCP60.DLL
.idata:004081A0 ;
.idata:004081A0 ; size_t (__cdecl *mbrtowc)(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.idata:004081A0                 extrn __imp_mbrtowc:dword
.idata:004081A0                                         ; DATA XREF: mbrtowc↑r
.idata:004081A4
.idata:004081AC ;
.idata:004081AC ; Imports from msvcrt.dll
.idata:004081AC ;
.idata:004081AC                 extrn __imp___getmainargs:dword
.idata:004081AC                                         ; DATA XREF: __getmainargs↑r
.idata:004081B0 ; int _mb_cur_max
.idata:004081B0                 extrn __mb_cur_max:dword
.idata:004081B0                                         ; DATA XREF: sub_403890+7↑r
.idata:004081B0                                         ; sub_403890+5F3↑r
.idata:004081B4 ; char ***(__cdecl *__p__environ)()
.idata:004081B4                 extrn __imp___p__environ:dword
.idata:004081B4                                         ; DATA XREF: __p__environ↑r
.idata:004081B8 ; int *(__cdecl *__p__fmode)()
.idata:004081B8                 extrn __imp___p__fmode:dword
.idata:004081B8                                         ; DATA XREF: __p__fmode↑r
.idata:004081BC ; void (__cdecl *_set_app_type)(_crt_app_type Type)
.idata:004081BC                 extrn __set_app_type:dword
.idata:004081BC                                         ; CODE XREF: start+D↑p
.idata:004081BC                                         ; .text:0040102D↑p
.idata:004081BC                                         ; DATA XREF: ...
.idata:004081C0 ; void (__cdecl *_cexit)()
.idata:004081C0                 extrn __imp__cexit:dword
.idata:004081C0                                         ; DATA XREF: _cexit↑r
.idata:004081C4 ; int *(__cdecl *_errno)()
.idata:004081C4                 extrn __imp__errno:dword
.idata:004081C4                                         ; DATA XREF: _errno↑r
.idata:004081C8 ; int (__cdecl *_flsbuf)(int Ch, FILE *File)
.idata:004081C8                 extrn __imp__flsbuf:dword
.idata:004081C8                                         ; DATA XREF: _flsbuf↑r
.idata:004081CC ; FILE iob[]
.idata:004081CC                 extrn _iob:dword        ; DATA XREF: sub_401080+5C↑r
.idata:004081CC                                         ; sub_401080+75↑r ...
.idata:004081D0 ; int (__cdecl *_isctype)(int C, int Type)
.idata:004081D0                 extrn __imp__isctype:dword
.idata:004081D0                                         ; DATA XREF: _isctype↑r
.idata:004081D4 ; _onexit_t (__cdecl *onexit)(_onexit_t Func)
.idata:004081D4                 extrn _onexit:dword     ; CODE XREF: .text:0040106C↑p
.idata:004081D4                                         ; DATA XREF: .text:0040106C↑r
.idata:004081D8 ; const unsigned __int16 *pctype
.idata:004081D8                 extrn _pctype:dword     ; DATA XREF: sub_403890:loc_403F84↑r
.idata:004081DC ; int (__cdecl *_setmode)(int FileHandle, int Mode)
.idata:004081DC                 extrn __imp__setmode:dword
.idata:004081DC                                         ; DATA XREF: _setmode↑r
.idata:004081E0 ; void (__cdecl __noreturn *abort)()
.idata:004081E0                 extrn __imp_abort:dword ; DATA XREF: abort↑r
.idata:004081E4 ; int (__cdecl *atexit)(void (__cdecl *)())
.idata:004081E4                 extrn atexit:dword      ; CODE XREF: sub_401040+C↑p
.idata:004081E4                                         ; DATA XREF: sub_401040+C↑r
.idata:004081E8 ; void *(__cdecl *calloc)(size_t Count, size_t Size)
.idata:004081E8                 extrn __imp_calloc:dword
.idata:004081E8                                         ; DATA XREF: calloc↑r
.idata:004081EC ; void (__cdecl __noreturn *exit)(int Code)
.idata:004081EC                 extrn __imp_exit:dword  ; DATA XREF: exit↑r
.idata:004081F0 ; int (__cdecl *fclose)(FILE *Stream)
.idata:004081F0                 extrn __imp_fclose:dword
.idata:004081F0                                         ; DATA XREF: fclose↑r
.idata:004081F4 ; int (__cdecl *fflush)(FILE *Stream)
.idata:004081F4                 extrn __imp_fflush:dword
.idata:004081F4                                         ; DATA XREF: fflush↑r
.idata:004081F8 ; FILE *(__cdecl *fopen)(const char *FileName, const char *Mode)
.idata:004081F8                 extrn __imp_fopen:dword ; DATA XREF: fopen↑r
.idata:004081FC ; int (*fprintf)(FILE *const Stream, const char *const Format, ...)
.idata:004081FC                 extrn __imp_fprintf:dword
.idata:004081FC                                         ; DATA XREF: fprintf↑r
.idata:00408200 ; int (__cdecl *fputs)(const char *Buffer, FILE *Stream)
.idata:00408200                 extrn __imp_fputs:dword ; DATA XREF: fputs↑r
.idata:00408204 ; void (__cdecl *free)(void *Block)
.idata:00408204                 extrn __imp_free:dword  ; DATA XREF: free↑r
.idata:00408208 ; size_t (__cdecl *fwrite)(const void *Buffer, size_t ElementSize, size_t ElementCount, FILE *Stream)
.idata:00408208                 extrn __imp_fwrite:dword
.idata:00408208                                         ; DATA XREF: fwrite↑r
.idata:0040820C ; char *(__cdecl *getenv)(const char *VarName)
.idata:0040820C                 extrn __imp_getenv:dword
.idata:0040820C                                         ; DATA XREF: getenv↑r
.idata:00408210 ; int (__cdecl *iswctype)(wint_t C, wctype_t Type)
.idata:00408210                 extrn __imp_iswctype:dword
.idata:00408210                                         ; DATA XREF: iswctype↑r
.idata:00408214 ; void *(__cdecl *malloc)(size_t Size)
.idata:00408214                 extrn __imp_malloc:dword
.idata:00408214                                         ; DATA XREF: malloc↑r
.idata:00408218 ; void *(__cdecl *memcpy)(void *, const void *Src, size_t Size)
.idata:00408218                 extrn __imp_memcpy:dword
.idata:00408218                                         ; DATA XREF: memcpy↑r
.idata:0040821C ; void *(__cdecl *memset)(void *, int Val, size_t Size)
.idata:0040821C                 extrn __imp_memset:dword
.idata:0040821C                                         ; DATA XREF: memset↑r
.idata:00408220 ; int (*printf)(const char *const Format, ...)
.idata:00408220                 extrn __imp_printf:dword
.idata:00408220                                         ; DATA XREF: printf↑r
.idata:00408224 ; void *(__cdecl *realloc)(void *Block, size_t Size)
.idata:00408224                 extrn __imp_realloc:dword
.idata:00408224                                         ; DATA XREF: realloc↑r
.idata:00408228 ; char *(__cdecl *setlocale)(int Category, const char *Locale)
.idata:00408228                 extrn __imp_setlocale:dword
.idata:00408228                                         ; DATA XREF: setlocale↑r
.idata:0040822C ; int (__cdecl *setvbuf)(FILE *Stream, char *Buffer, int Mode, size_t Size)
.idata:0040822C                 extrn __imp_setvbuf:dword
.idata:0040822C                                         ; DATA XREF: setvbuf↑r
.idata:00408230 ; _crt_signal_t (__cdecl *signal)(int Signal, _crt_signal_t Function)
.idata:00408230                 extrn __imp_signal:dword
.idata:00408230                                         ; DATA XREF: signal↑r
.idata:00408234 ; char *(__cdecl *strchr)(const char *Str, int Val)
.idata:00408234                 extrn __imp_strchr:dword
.idata:00408234                                         ; DATA XREF: strchr↑r
.idata:00408238 ; int (__cdecl *strcmp)(const char *Str1, const char *Str2)
.idata:00408238                 extrn __imp_strcmp:dword
.idata:00408238                                         ; DATA XREF: strcmp↑r
.idata:0040823C ; char *(__cdecl *strerror)(int ErrorMessage)
.idata:0040823C                 extrn __imp_strerror:dword
.idata:0040823C                                         ; DATA XREF: strerror↑r
.idata:00408240 ; size_t (__cdecl *strlen)(const char *Str)
.idata:00408240                 extrn __imp_strlen:dword
.idata:00408240                                         ; DATA XREF: strlen↑r
.idata:00408244 ; int (__cdecl *strncmp)(const char *Str1, const char *Str2, size_t MaxCount)
.idata:00408244                 extrn __imp_strncmp:dword
.idata:00408244                                         ; DATA XREF: strncmp↑r
.idata:00408248 ; int (__cdecl *vfprintf)(FILE *const Stream, const char *const Format, va_list ArgList)
.idata:00408248                 extrn __imp_vfprintf:dword
.idata:00408248                                         ; DATA XREF: vfprintf↑r
.idata:0040824C
.idata:0040824C
.idata:0040824C
.idata:0040824C                 end start
