.text:00401000 ;
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
.text:00401000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
.text:00401000 ; |                      License info: 48-357D-7BC4-C6                      |
.text:00401000 ; |                              Virginia Tech                              |
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ;
.text:00401000 ; Input SHA256 : 488DDF5D14D77FBD37C0E265FE9ABB531D50F067453BDAA7F6E117A38775CEF2
.text:00401000 ; Input MD5    : AD27E41ADA4ED2DBB73198FEDAFB8D2C
.text:00401000 ; Input CRC32  : 402B5412
.text:00401000
.text:00401000 ; File Name   : /home/cindy/Documents/Projects/binary_cmc/benchmark/coreutils-5.3.0-bin/bin/basename.exe
.text:00401000 ; Format      : Portable executable for 80386 (PE)
.text:00401000 ; Imagebase   : 400000
.text:00401000 ; Timestamp   : 4266A264 (Wed Apr 20 18:41:40 2005)
.text:00401000 ; Section 1. (virtual address 00001000)
.text:00401000 ; Virtual size                  : 00003EE0 (  16096.)
.text:00401000 ; Section size in file          : 00004000 (  16384.)
.text:00401000 ; Offset to raw data for section: 00000400
.text:00401000 ; Flags 60000020: Text Executable Readable
.text:00401000 ; Alignment     : default
.text:00401000
.text:00401000                 .686p
.text:00401000                 .mmx
.text:00401000                 .model flat
.text:00401000
.text:00401000 ; ===========================================================================
.text:00401000
.text:00401000 ; Segment type: Pure code
.text:00401000 ; Segment permissions: Read/Execute
.text:00401000 _text           segment para public 'CODE' use32
.text:00401000                 assume cs:_text
.text:00401000                 ;org 401000h
.text:00401000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00401000
.text:00401000 ; =============== S U B R O U T I N E =======================================
.text:00401000
.text:00401000 ; Attributes: noreturn bp-based frame
.text:00401000
.text:00401000                 public start
.text:00401000 start           proc near
.text:00401000
.text:00401000 Type            = dword ptr -8
.text:00401000
.text:00401000                 push    ebp
.text:00401001                 mov     ebp, esp
.text:00401003                 sub     esp, 8
.text:00401006                 mov     [esp+8+Type], 1 ; Type
.text:0040100D                 call    ds:__set_app_type
.text:00401013                 call    sub_401080
.text:00401013 start           endp
.text:00401013
.text:00401018 ; ---------------------------------------------------------------------------
.text:00401018                 mov     esp, ebp
.text:0040101A                 xor     eax, eax
.text:0040101C                 pop     ebp
.text:0040101D                 retn
.text:0040101D ; ---------------------------------------------------------------------------
.text:0040101E                 align 10h
.text:00401020                 push    ebp
.text:00401021                 mov     ebp, esp
.text:00401023                 sub     esp, 8
.text:00401026                 mov     dword ptr [esp], 2
.text:0040102D                 call    ds:__set_app_type
.text:00401033                 call    sub_401080
.text:00401038 ; ---------------------------------------------------------------------------
.text:00401038                 mov     esp, ebp
.text:0040103A                 xor     eax, eax
.text:0040103C                 pop     ebp
.text:0040103D                 retn
.text:0040103D ; ---------------------------------------------------------------------------
.text:0040103E                 align 10h
.text:00401040
.text:00401040 ; =============== S U B R O U T I N E =======================================
.text:00401040
.text:00401040 ; Attributes: bp-based frame
.text:00401040
.text:00401040 ; int __cdecl sub_401040(void (__cdecl *)())
.text:00401040 sub_401040      proc near               ; CODE XREF: sub_401360+63↓p
.text:00401040                                         ; .text:00404BC0↓p ...
.text:00401040
.text:00401040 var_8           = dword ptr -8
.text:00401040 arg_0           = dword ptr  8
.text:00401040
.text:00401040                 push    ebp
.text:00401041                 mov     ebp, esp
.text:00401043                 sub     esp, 8
.text:00401046                 mov     edx, [ebp+arg_0]
.text:00401049                 mov     [esp+8+var_8], edx ; void (__cdecl *)()
.text:0040104C                 call    ds:atexit
.text:00401052                 mov     esp, ebp
.text:00401054                 pop     ebp
.text:00401055                 retn
.text:00401055 sub_401040      endp
.text:00401055
.text:00401055 ; ---------------------------------------------------------------------------
.text:00401056                 align 10h
.text:00401060                 push    ebp
.text:00401061                 mov     ebp, esp
.text:00401063                 sub     esp, 8
.text:00401066                 mov     edx, [ebp+8]
.text:00401069                 mov     [esp], edx
.text:0040106C                 call    ds:_onexit
.text:00401072                 mov     esp, ebp
.text:00401074                 pop     ebp
.text:00401075                 retn
.text:00401075 ; ---------------------------------------------------------------------------
.text:00401076                 align 10h
.text:00401080
.text:00401080 ; =============== S U B R O U T I N E =======================================
.text:00401080
.text:00401080 ; Attributes: noreturn bp-based frame
.text:00401080
.text:00401080 sub_401080      proc near               ; CODE XREF: start+13↑p
.text:00401080                                         ; .text:00401033↑p
.text:00401080
.text:00401080 lpTopLevelExceptionFilter= dword ptr -28h
.text:00401080 Mode            = dword ptr -24h
.text:00401080 var_20          = dword ptr -20h
.text:00401080 var_1C          = dword ptr -1Ch
.text:00401080 var_18          = dword ptr -18h
.text:00401080 var_C           = byte ptr -0Ch
.text:00401080 var_8           = dword ptr -8
.text:00401080
.text:00401080                 push    ebp
.text:00401081                 mov     ebp, esp
.text:00401083                 push    ebx
.text:00401084                 sub     esp, 24h
.text:00401087                 mov     [esp+28h+lpTopLevelExceptionFilter], offset TopLevelExceptionFilter ; lpTopLevelExceptionFilter
.text:0040108E                 call    SetUnhandledExceptionFilter
.text:00401093                 sub     esp, 4
.text:00401096                 call    sub_404B60
.text:0040109B                 mov     [esp+28h+lpTopLevelExceptionFilter], offset dword_405000
.text:004010A2                 mov     edx, dword_405050
.text:004010A8                 lea     ecx, [ebp+var_8]
.text:004010AB                 mov     [ebp+var_8], 0
.text:004010B2                 mov     [esp+28h+var_18], ecx
.text:004010B6                 mov     [esp+28h+var_1C], edx
.text:004010BA                 lea     edx, [ebp+var_C]
.text:004010BD                 mov     [esp+28h+var_20], edx
.text:004010C1                 mov     [esp+28h+Mode], offset dword_405004
.text:004010C9                 call    __getmainargs
.text:004010CE                 mov     eax, Mode
.text:004010D3                 test    eax, eax
.text:004010D5                 jz      short loc_401135
.text:004010D7                 mov     dword_405070, eax
.text:004010DC                 mov     edx, ds:_iob
.text:004010E2                 test    edx, edx
.text:004010E4                 jz      short loc_4010FB
.text:004010E6                 mov     [esp+28h+Mode], eax ; Mode
.text:004010EA                 mov     ebx, [edx+10h]
.text:004010ED                 mov     [esp+28h+lpTopLevelExceptionFilter], ebx ; FileHandle
.text:004010F0                 call    _setmode
.text:004010F5                 mov     edx, ds:_iob
.text:004010FB
.text:004010FB loc_4010FB:                             ; CODE XREF: sub_401080+64↑j
.text:004010FB                 cmp     edx, 0FFFFFFE0h
.text:004010FE                 jz      short loc_40111B
.text:00401100                 mov     ebx, Mode
.text:00401106                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040110A                 mov     ecx, [edx+30h]
.text:0040110D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401110                 call    _setmode
.text:00401115                 mov     edx, ds:_iob
.text:0040111B
.text:0040111B loc_40111B:                             ; CODE XREF: sub_401080+7E↑j
.text:0040111B                 cmp     edx, 0FFFFFFC0h
.text:0040111E                 jz      short loc_401135
.text:00401120                 mov     ebx, Mode
.text:00401126                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040112A                 mov     ecx, [edx+50h]
.text:0040112D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401130                 call    _setmode
.text:00401135
.text:00401135 loc_401135:                             ; CODE XREF: sub_401080+55↑j
.text:00401135                                         ; sub_401080+9E↑j
.text:00401135                 call    __p__fmode
.text:0040113A                 mov     ecx, dword_405070
.text:00401140                 mov     [eax], ecx
.text:00401142                 call    sub_404B30
.text:00401147                 call    __p__environ
.text:0040114C                 mov     edx, dword_405000
.text:00401152                 mov     ebx, [eax]
.text:00401154                 mov     ecx, dword_405004
.text:0040115A                 mov     [esp+28h+lpTopLevelExceptionFilter], edx
.text:0040115D                 mov     [esp+28h+var_20], ebx
.text:00401161                 mov     [esp+28h+Mode], ecx
.text:00401165                 call    sub_401360
.text:00401165 sub_401080      endp
.text:00401165
.text:0040116A ; ---------------------------------------------------------------------------
.text:0040116A                 mov     ebx, eax
.text:0040116C                 call    _cexit
.text:00401171                 mov     [esp], ebx
.text:00401174                 call    ExitProcess
.text:00401174 ; ---------------------------------------------------------------------------
.text:00401179                 align 10h
.text:00401180
.text:00401180 ; =============== S U B R O U T I N E =======================================
.text:00401180
.text:00401180 ; Attributes: bp-based frame
.text:00401180
.text:00401180 ; LONG __stdcall TopLevelExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo)
.text:00401180 TopLevelExceptionFilter proc near       ; DATA XREF: sub_401080+7↑o
.text:00401180
.text:00401180 Signal          = dword ptr -18h
.text:00401180 Function        = dword ptr -14h
.text:00401180 var_8           = dword ptr -8
.text:00401180 var_4           = dword ptr -4
.text:00401180 ExceptionInfo   = dword ptr  8
.text:00401180
.text:00401180                 push    ebp
.text:00401181                 mov     ebp, esp
.text:00401183                 sub     esp, 18h
.text:00401186                 mov     [ebp+var_8], ebx
.text:00401189                 mov     ecx, [ebp+ExceptionInfo]
.text:0040118C                 xor     ebx, ebx
.text:0040118E                 mov     [ebp+var_4], esi
.text:00401191                 xor     esi, esi
.text:00401193                 mov     edx, [ecx]
.text:00401195                 mov     eax, [edx]
.text:00401197                 cmp     eax, 0C0000091h
.text:0040119C                 ja      loc_401260
.text:004011A2                 cmp     eax, 0C000008Dh
.text:004011A7                 jnb     short loc_401210
.text:004011A9                 cmp     eax, 0C0000005h
.text:004011AE                 jz      short loc_4011BE
.text:004011B0
.text:004011B0 loc_4011B0:                             ; CODE XREF: TopLevelExceptionFilter+59↓j
.text:004011B0                                         ; TopLevelExceptionFilter+77↓j ...
.text:004011B0                 mov     eax, ebx
.text:004011B2                 mov     esi, [ebp+var_4]
.text:004011B5                 mov     ebx, [ebp+var_8]
.text:004011B8                 mov     esp, ebp
.text:004011BA                 pop     ebp
.text:004011BB                 retn    4
.text:004011BE ; ---------------------------------------------------------------------------
.text:004011BE
.text:004011BE loc_4011BE:                             ; CODE XREF: TopLevelExceptionFilter+2E↑j
.text:004011BE                 mov     [esp+18h+Function], 0 ; Function
.text:004011C6                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:004011CD                 call    signal
.text:004011D2                 cmp     eax, 1
.text:004011D5                 jz      short loc_4011F9
.text:004011D7                 test    eax, eax
.text:004011D9                 jz      short loc_4011B0
.text:004011DB                 mov     [esp+18h+Signal], 0Bh
.text:004011E2                 lea     esi, [esi+0]
.text:004011E9                 lea     edi, [edi+0]
.text:004011F0
.text:004011F0 loc_4011F0:                             ; CODE XREF: TopLevelExceptionFilter+BD↓j
.text:004011F0                 call    eax
.text:004011F2
.text:004011F2 loc_4011F2:                             ; CODE XREF: TopLevelExceptionFilter+8D↓j
.text:004011F2                                         ; TopLevelExceptionFilter+D5↓j ...
.text:004011F2                 mov     ebx, 0FFFFFFFFh
.text:004011F7                 jmp     short loc_4011B0
.text:004011F9 ; ---------------------------------------------------------------------------
.text:004011F9
.text:004011F9 loc_4011F9:                             ; CODE XREF: TopLevelExceptionFilter+55↑j
.text:004011F9                 mov     [esp+18h+Function], 1 ; Function
.text:00401201                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:00401208                 call    signal
.text:0040120D                 jmp     short loc_4011F2
.text:0040120D ; ---------------------------------------------------------------------------
.text:0040120F                 align 10h
.text:00401210
.text:00401210 loc_401210:                             ; CODE XREF: TopLevelExceptionFilter+27↑j
.text:00401210                                         ; TopLevelExceptionFilter+E5↓j
.text:00401210                 mov     esi, 1
.text:00401215
.text:00401215 loc_401215:                             ; CODE XREF: TopLevelExceptionFilter+EC↓j
.text:00401215                 mov     [esp+18h+Function], 0 ; Function
.text:0040121D                 mov     [esp+18h+Signal], 8 ; Signal
.text:00401224                 call    signal
.text:00401229                 cmp     eax, 1
.text:0040122C                 jz      short loc_40123F
.text:0040122E                 test    eax, eax
.text:00401230                 jz      loc_4011B0
.text:00401236                 mov     [esp+18h+Signal], 8
.text:0040123D                 jmp     short loc_4011F0
.text:0040123F ; ---------------------------------------------------------------------------
.text:0040123F
.text:0040123F loc_40123F:                             ; CODE XREF: TopLevelExceptionFilter+AC↑j
.text:0040123F                 mov     [esp+18h+Function], 1 ; Function
.text:00401247                 mov     [esp+18h+Signal], 8 ; Signal
.text:0040124E                 call    signal
.text:00401253                 test    esi, esi
.text:00401255                 jz      short loc_4011F2
.text:00401257                 call    sub_404B60
.text:0040125C                 jmp     short loc_4011F2
.text:0040125C ; ---------------------------------------------------------------------------
.text:0040125E                 align 10h
.text:00401260
.text:00401260 loc_401260:                             ; CODE XREF: TopLevelExceptionFilter+1C↑j
.text:00401260                 cmp     eax, 0C0000093h
.text:00401265                 jz      short loc_401210
.text:00401267                 cmp     eax, 0C0000094h
.text:0040126C                 jz      short loc_401215
.text:0040126E                 jmp     loc_4011B0
.text:0040126E TopLevelExceptionFilter endp
.text:0040126E
.text:0040126E ; ---------------------------------------------------------------------------
.text:00401273                 align 10h
.text:00401280 ; const char Locale
.text:00401280 Locale          db 0                    ; DATA XREF: sub_401360+20↓o
.text:00401281                 align 20h
.text:004012A0 aCProgra1Coreut db 'c:/progra~1/CoreUtils/share/locale',0
.text:004012A0                                         ; DATA XREF: sub_401360+3A↓o
.text:004012C3 aCoreutils      db 'coreutils',0        ; DATA XREF: sub_401360+42↓o
.text:004012C3                                         ; sub_401360+4F↓o
.text:004012CD aFixmeUnknown   db 'FIXME unknown',0    ; DATA XREF: sub_401360+70↓o
.text:004012DB a530            db '5.3.0',0            ; DATA XREF: sub_401360+80↓o
.text:004012E1 aGnuCoreutils   db 'GNU coreutils',0    ; DATA XREF: sub_401360+88↓o
.text:004012EF ; const FILE stru_4012EF
.text:004012EF stru_4012EF     FILE <65736162h, 656D616Eh, 65002B00h, 61727478h, 65706F20h, \
.text:004012EF                                         ; DATA XREF: sub_401360+90↓o
.text:004012EF                                         ; sub_401360+B4↓o ...
.text:004012EF                       646E6172h, 732520h, 90909090h>
.text:0040130F                 db  90h
.text:00401310                 db  90h
.text:00401311                 db  90h
.text:00401312                 db  90h
.text:00401313                 db  90h
.text:00401314                 db  90h
.text:00401315                 db  90h
.text:00401316                 db  90h
.text:00401317                 db  90h
.text:00401318                 db  90h
.text:00401319                 db  90h
.text:0040131A                 db  90h
.text:0040131B                 db  90h
.text:0040131C                 db  90h
.text:0040131D                 db  90h
.text:0040131E                 db  90h
.text:0040131F                 db  90h
.text:00401320 aTrySHelpForMor db 'Try `%s --help',27h,' for more information.',0Ah,0
.text:00401320                                         ; DATA XREF: sub_401360:loc_40147A↓o
.text:00401320                                         ; sub_4016D0+F↓o
.text:00401347 aMissingOperand db 'missing operand',0  ; DATA XREF: sub_401360:loc_401525↓o
.text:00401357                 align 10h
.text:00401360
.text:00401360 ; =============== S U B R O U T I N E =======================================
.text:00401360
.text:00401360 ; Attributes: noreturn bp-based frame fuzzy-sp
.text:00401360
.text:00401360 sub_401360      proc near               ; CODE XREF: sub_401080+E5↑p
.text:00401360
.text:00401360 Category        = dword ptr -38h
.text:00401360 Locale          = dword ptr -34h
.text:00401360 var_30          = dword ptr -30h
.text:00401360 var_2C          = byte ptr -2Ch
.text:00401360 var_28          = dword ptr -28h
.text:00401360 var_24          = dword ptr -24h
.text:00401360 var_20          = byte ptr -20h
.text:00401360 var_1C          = dword ptr -1Ch
.text:00401360 arg_0           = dword ptr  8
.text:00401360 arg_4           = dword ptr  0Ch
.text:00401360
.text:00401360                 push    ebp
.text:00401361                 xor     eax, eax
.text:00401363                 mov     ebp, esp
.text:00401365                 push    edi
.text:00401366                 push    esi
.text:00401367                 push    ebx
.text:00401368                 sub     esp, 2Ch
.text:0040136B                 mov     esi, [ebp+arg_4]
.text:0040136E                 and     esp, 0FFFFFFF0h
.text:00401371                 mov     ebx, [ebp+arg_0]
.text:00401374                 call    __alloca
.text:00401379                 call    sub_404C00
.text:0040137E                 mov     edx, [esi]
.text:00401380                 mov     [esp+38h+Locale], offset Locale ; Locale
.text:00401388                 mov     [esp+38h+Category], 0 ; Category
.text:0040138F                 mov     ds:dword_406190, edx
.text:00401395                 call    setlocale
.text:0040139A                 mov     [esp+38h+Locale], offset aCProgra1Coreut ; "c:/progra~1/CoreUtils/share/locale"
.text:004013A2                 mov     [esp+38h+Category], offset aCoreutils ; "coreutils"
.text:004013A9                 call    ds:__imp_libintl_bindtextdomain
.text:004013AF                 mov     [esp+38h+Category], offset aCoreutils ; "coreutils"
.text:004013B6                 call    ds:libintl_textdomain
.text:004013BC                 mov     [esp+38h+Category], offset sub_402B80 ; void (__cdecl *)()
.text:004013C3                 call    sub_401040
.text:004013C8                 mov     [esp+38h+var_1C], 0
.text:004013D0                 mov     dword ptr [esp+38h+var_20], offset aFixmeUnknown ; "FIXME unknown"
.text:004013D8                 mov     [esp+38h+var_24], offset sub_4016D0 ; int
.text:004013E0                 mov     [esp+38h+var_28], offset a530 ; "5.3.0"
.text:004013E8                 mov     dword ptr [esp+38h+var_2C], offset aGnuCoreutils ; "GNU coreutils"
.text:004013F0                 mov     [esp+38h+var_30], offset stru_4012EF ; FILE *
.text:004013F8                 mov     [esp+38h+Locale], esi ; int
.text:004013FC                 mov     [esp+38h+Category], ebx ; int
.text:004013FF                 call    sub_402A90
.text:00401404                 mov     [esp+38h+var_28], 0 ; int
.text:0040140C                 mov     dword ptr [esp+38h+var_2C], 0 ; char
.text:00401414                 mov     [esp+38h+var_30], (offset stru_4012EF._base+1) ; char *
.text:0040141C                 mov     [esp+38h+Locale], esi ; int
.text:00401420                 mov     [esp+38h+Category], ebx ; int
.text:00401423                 call    sub_4028F0
.text:00401428                 inc     eax
.text:00401429                 jnz     short loc_40147A
.text:0040142B                 mov     edx, dword_405010
.text:00401431                 lea     ecx, [edx+1]
.text:00401434                 cmp     ebx, ecx
.text:00401436                 jl      loc_401525
.text:0040143C                 lea     edi, [edx+2]
.text:0040143F                 cmp     edi, ebx
.text:00401441                 jge     short loc_4014B2
.text:00401443                 mov     ecx, [esi+edx*4+8]
.text:00401447                 mov     [esp+38h+Category], ecx ; char *
.text:0040144A                 call    sub_4028C0
.text:0040144F                 mov     [esp+38h+Category], (offset stru_4012EF._base+3)
.text:00401456                 mov     esi, eax
.text:00401458                 call    ds:libintl_gettext
.text:0040145E                 mov     dword ptr [esp+38h+var_2C], esi ; char
.text:00401462                 mov     [esp+38h+Locale], 0 ; ErrorMessage
.text:0040146A                 mov     [esp+38h+Category], 0 ; Code
.text:00401471                 mov     [esp+38h+var_30], eax ; char *
.text:00401475                 call    sub_404880
.text:0040147A
.text:0040147A loc_40147A:                             ; CODE XREF: sub_401360+C9↑j
.text:0040147A                                         ; sub_401360+1EA↓j
.text:0040147A                 mov     [esp+38h+Category], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:00401481                 call    ds:libintl_gettext
.text:00401487                 mov     edx, ds:_iob
.text:0040148D                 mov     ebx, ds:dword_406190
.text:00401493                 add     edx, 40h ; '@'
.text:00401496                 mov     [esp+38h+var_30], ebx
.text:0040149A                 mov     [esp+38h+Locale], eax ; Format
.text:0040149E                 mov     [esp+38h+Category], edx ; Stream
.text:004014A1                 call    fprintf
.text:004014A6                 mov     [esp+38h+Category], 1 ; Code
.text:004014AD
.text:004014AD loc_4014AD:                             ; CODE XREF: sub_401360+187↓j
.text:004014AD                 call    exit
.text:004014B2 ; ---------------------------------------------------------------------------
.text:004014B2
.text:004014B2 loc_4014B2:                             ; CODE XREF: sub_401360+E1↑j
.text:004014B2                 mov     edi, [esi+edx*4]
.text:004014B5                 mov     [esp+38h+Category], edi
.text:004014B8                 call    sub_4027E0
.text:004014BD                 mov     [esp+38h+Category], eax ; char *
.text:004014C0                 mov     edi, eax
.text:004014C2                 call    sub_402840
.text:004014C7                 mov     byte ptr [eax+edi], 0
.text:004014CB                 mov     edx, dword_405010
.text:004014D1                 lea     ecx, [edx+2]
.text:004014D4                 cmp     ebx, ecx
.text:004014D6                 jz      short loc_4014E9
.text:004014D8
.text:004014D8 loc_4014D8:                             ; CODE XREF: sub_401360+1A5↓j
.text:004014D8                                         ; sub_401360+1B2↓j ...
.text:004014D8                 mov     [esp+38h+Category], edi ; Buffer
.text:004014DB                 call    puts
.text:004014E0                 mov     [esp+38h+Category], 0
.text:004014E7                 jmp     short loc_4014AD
.text:004014E9 ; ---------------------------------------------------------------------------
.text:004014E9
.text:004014E9 loc_4014E9:                             ; CODE XREF: sub_401360+176↑j
.text:004014E9                 mov     esi, [esi+edx*4+4]
.text:004014ED                 mov     [esp+38h+Category], edi ; Str
.text:004014F0                 call    strlen
.text:004014F5                 mov     [esp+38h+Category], esi ; Str
.text:004014F8                 lea     ebx, [eax+edi]
.text:004014FB                 call    strlen
.text:00401500                 cmp     ebx, edi
.text:00401502                 lea     edx, [eax+esi]
.text:00401505                 jbe     short loc_4014D8
.text:00401507                 cmp     edx, esi
.text:00401509                 jbe     short loc_40151C
.text:0040150B
.text:0040150B loc_40150B:                             ; CODE XREF: sub_401360+1BA↓j
.text:0040150B                 dec     edx
.text:0040150C                 dec     ebx
.text:0040150D                 movzx   ecx, byte ptr [edx]
.text:00401510                 cmp     [ebx], cl
.text:00401512                 jnz     short loc_4014D8
.text:00401514                 cmp     ebx, edi
.text:00401516                 jbe     short loc_4014D8
.text:00401518                 cmp     edx, esi
.text:0040151A                 ja      short loc_40150B
.text:0040151C
.text:0040151C loc_40151C:                             ; CODE XREF: sub_401360+1A9↑j
.text:0040151C                 cmp     ebx, edi
.text:0040151E                 jbe     short loc_4014D8
.text:00401520                 mov     byte ptr [ebx], 0
.text:00401523                 jmp     short loc_4014D8
.text:00401525 ; ---------------------------------------------------------------------------
.text:00401525
.text:00401525 loc_401525:                             ; CODE XREF: sub_401360+D6↑j
.text:00401525                 mov     [esp+38h+Category], offset aMissingOperand ; "missing operand"
.text:0040152C                 call    ds:libintl_gettext
.text:00401532                 mov     [esp+38h+Locale], 0 ; ErrorMessage
.text:0040153A                 mov     [esp+38h+Category], 0 ; Code
.text:00401541                 mov     [esp+38h+var_30], eax ; char *
.text:00401545                 call    sub_404880
.text:0040154A                 jmp     loc_40147A
.text:0040154A sub_401360      endp
.text:0040154A
.text:0040154A ; ---------------------------------------------------------------------------
.text:0040154F                 align 20h
.text:00401560 aUsageSNameSuff db 'Usage: %s NAME [SUFFIX]',0Ah
.text:00401560                                         ; DATA XREF: sub_4016D0:loc_401713↓o
.text:00401560                 db '  or:  %s OPTION',0Ah,0
.text:0040158A                 align 20h
.text:004015A0 aPrintNameWithA db 'Print NAME with any leading directory components removed.',0Ah
.text:004015A0                                         ; DATA XREF: sub_4016D0+66↓o
.text:004015A0                 db 'If specified, also remove a trailing SUFFIX.',0Ah
.text:004015A0                 db 0Ah,0
.text:00401609                 align 20h
.text:00401620 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.text:00401620                                         ; DATA XREF: sub_4016D0+88↓o
.text:0040164D                 align 20h
.text:00401660 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.text:00401660                                         ; DATA XREF: sub_4016D0+AA↓o
.text:00401696 aReportBugsToS  db 0Ah                  ; DATA XREF: sub_4016D0+CC↓o
.text:00401696                 db 'Report bugs to <%s>.',0Ah,0
.text:004016AD aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.text:004016AD                                         ; DATA XREF: sub_4016D0+D9↓o
.text:004016C3                 align 10h
.text:004016D0
.text:004016D0 ; =============== S U B R O U T I N E =======================================
.text:004016D0
.text:004016D0 ; Attributes: noreturn
.text:004016D0
.text:004016D0 ; void __cdecl __noreturn sub_4016D0(int Code)
.text:004016D0 sub_4016D0      proc near               ; DATA XREF: sub_401360+78↑o
.text:004016D0
.text:004016D0 Stream          = dword ptr -1Ch
.text:004016D0 Format          = dword ptr -18h
.text:004016D0 var_14          = dword ptr -14h
.text:004016D0 var_4           = dword ptr -4
.text:004016D0 Code            = dword ptr  4
.text:004016D0
.text:004016D0                 sub     esp, 1Ch
.text:004016D3                 mov     [esp+1Ch+var_4], ebx
.text:004016D7                 mov     ebx, [esp+1Ch+Code]
.text:004016DB                 test    ebx, ebx
.text:004016DD                 jz      short loc_401713
.text:004016DF                 mov     [esp+1Ch+Stream], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:004016E6                 call    ds:libintl_gettext
.text:004016EC                 mov     edx, ds:_iob
.text:004016F2                 mov     ecx, ds:dword_406190
.text:004016F8                 add     edx, 40h ; '@'
.text:004016FB                 mov     [esp+1Ch+var_14], ecx
.text:004016FF                 mov     [esp+1Ch+Format], eax ; Format
.text:00401703                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00401706                 call    fprintf
.text:0040170B
.text:0040170B loc_40170B:                             ; CODE XREF: sub_4016D0+E9↓j
.text:0040170B                 mov     [esp+1Ch+Stream], ebx ; Code
.text:0040170E                 call    exit
.text:00401713 ; ---------------------------------------------------------------------------
.text:00401713
.text:00401713 loc_401713:                             ; CODE XREF: sub_4016D0+D↑j
.text:00401713                 mov     [esp+1Ch+Stream], offset aUsageSNameSuff ; "Usage: %s NAME [SUFFIX]\n  or:  %s OPTI"...
.text:0040171A                 call    ds:libintl_gettext
.text:00401720                 mov     ecx, ds:dword_406190
.text:00401726                 mov     [esp+1Ch+Stream], eax ; Format
.text:00401729                 mov     [esp+1Ch+var_14], ecx
.text:0040172D                 mov     [esp+1Ch+Format], ecx
.text:00401731                 call    printf
.text:00401736                 mov     [esp+1Ch+Stream], offset aPrintNameWithA ; "Print NAME with any leading directory c"...
.text:0040173D                 call    ds:libintl_gettext
.text:00401743                 mov     ecx, ds:_iob
.text:00401749                 add     ecx, 20h ; ' '
.text:0040174C                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00401750                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00401753                 call    fputs
.text:00401758                 mov     [esp+1Ch+Stream], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:0040175F                 call    ds:libintl_gettext
.text:00401765                 mov     ecx, ds:_iob
.text:0040176B                 add     ecx, 20h ; ' '
.text:0040176E                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00401772                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00401775                 call    fputs
.text:0040177A                 mov     [esp+1Ch+Stream], offset aVersionOutputV ; "      --version  output version informa"...
.text:00401781                 call    ds:libintl_gettext
.text:00401787                 mov     ecx, ds:_iob
.text:0040178D                 add     ecx, 20h ; ' '
.text:00401790                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00401794                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00401797                 call    fputs
.text:0040179C                 mov     [esp+1Ch+Stream], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:004017A3                 call    ds:libintl_gettext
.text:004017A9                 mov     [esp+1Ch+Format], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:004017B1                 mov     [esp+1Ch+Stream], eax ; Format
.text:004017B4                 call    printf
.text:004017B9                 jmp     loc_40170B
.text:004017B9 sub_4016D0      endp
.text:004017B9
.text:004017B9 ; ---------------------------------------------------------------------------
.text:004017BE                 align 10h
.text:004017C0 dword_4017C0    dd 90002D2Dh, 7 dup(90909090h)
.text:004017C0                                         ; DATA XREF: sub_401A10+E4↓o
.text:004017E0 aSOptionCSDoesn db '%s: option `%c%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:004017E0                                         ; DATA XREF: sub_401A10+2FC↓o
.text:0040180D                 align 20h
.text:00401820 aSOptionSDoesnT db '%s: option `--%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00401820                                         ; DATA XREF: sub_401A10:loc_401D72↓o
.text:0040184D                 align 20h
.text:00401860 aSOptionSRequir db '%s: option `%s',27h,' requires an argument',0Ah,0
.text:00401860                                         ; DATA XREF: sub_401A10:loc_401E10↓o
.text:00401860                                         ; sub_401A10:loc_4021D7↓o
.text:00401886                 align 20h
.text:004018A0 aSUnrecognizedO db '%s: unrecognized option `%c%s',27h,0Ah,0
.text:004018A0                                         ; DATA XREF: sub_401A10+48E↓o
.text:004018C0 dword_4018C0    dd 90909000h, 7 dup(90909090h)
.text:004018C0                                         ; DATA XREF: sub_401A10:loc_401EE1↓o
.text:004018E0 aSUnrecognizedO_0 db '%s: unrecognized option `--%s',27h,0Ah,0
.text:004018E0                                         ; DATA XREF: sub_401A10:loc_401EFA↓o
.text:00401900 aSOptionRequire db '%s: option requires an argument -- %c',0Ah,0
.text:00401900                                         ; DATA XREF: sub_401A10:loc_401FDF↓o
.text:00401900                                         ; sub_401A10:loc_40230C↓o
.text:00401927                 align 20h
.text:00401940 aSOptionWSDoesn db '%s: option `-W %s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00401940                                         ; DATA XREF: sub_401A10:loc_402153↓o
.text:0040196E                 align 20h
.text:00401980 aSOptionWSIsAmb db '%s: option `-W %s',27h,' is ambiguous',0Ah,0
.text:00401980                                         ; DATA XREF: sub_401A10:loc_40223F↓o
.text:004019A1 aSIllegalOption db '%s: illegal option -- %c',0Ah,0
.text:004019A1                                         ; DATA XREF: sub_401A10+93F↓o
.text:004019BB aSInvalidOption db '%s: invalid option -- %c',0Ah,0
.text:004019BB                                         ; DATA XREF: sub_401A10:loc_402387↓o
.text:004019D5 aSOptionSIsAmbi db '%s: option `%s',27h,' is ambiguous',0Ah,0
.text:004019D5                                         ; DATA XREF: sub_401A10:loc_4023AE↓o
.text:004019F3 ; const char VarName[]
.text:004019F3 VarName         db 'POSIXLY_CORRECT',0  ; DATA XREF: sub_401A10:loc_402560↓o
.text:00401A03                 align 10h
.text:00401A10
.text:00401A10 ; =============== S U B R O U T I N E =======================================
.text:00401A10
.text:00401A10
.text:00401A10 ; int __cdecl sub_401A10(int, int, char *Str, int, int, int, int, int)
.text:00401A10 sub_401A10      proc near               ; CODE XREF: sub_4025A0+5A↓p
.text:00401A10                                         ; .text:0040268A↓p ...
.text:00401A10
.text:00401A10 Str1            = dword ptr -5Ch
.text:00401A10 Str2            = dword ptr -58h
.text:00401A10 MaxCount        = dword ptr -54h
.text:00401A10 var_50          = dword ptr -50h
.text:00401A10 var_4C          = dword ptr -4Ch
.text:00401A10 var_3C          = dword ptr -3Ch
.text:00401A10 var_38          = dword ptr -38h
.text:00401A10 var_34          = dword ptr -34h
.text:00401A10 var_30          = dword ptr -30h
.text:00401A10 var_2C          = dword ptr -2Ch
.text:00401A10 var_28          = dword ptr -28h
.text:00401A10 var_24          = dword ptr -24h
.text:00401A10 var_20          = dword ptr -20h
.text:00401A10 var_1C          = dword ptr -1Ch
.text:00401A10 var_18          = dword ptr -18h
.text:00401A10 var_14          = dword ptr -14h
.text:00401A10 arg_0           = dword ptr  4
.text:00401A10 arg_4           = dword ptr  8
.text:00401A10 Str             = dword ptr  0Ch
.text:00401A10 arg_C           = dword ptr  10h
.text:00401A10 arg_10          = dword ptr  14h
.text:00401A10 arg_14          = dword ptr  18h
.text:00401A10 arg_18          = dword ptr  1Ch
.text:00401A10 arg_1C          = dword ptr  20h
.text:00401A10
.text:00401A10                 push    ebp
.text:00401A11                 mov     eax, 0FFFFFFFFh
.text:00401A16                 push    edi
.text:00401A17                 push    esi
.text:00401A18                 push    ebx
.text:00401A19                 sub     esp, 4Ch
.text:00401A1C                 mov     esi, [esp+5Ch+Str]
.text:00401A20                 mov     ebp, [esp+5Ch+arg_1C]
.text:00401A24                 cmp     byte ptr [esi], 3Ah ; ':'
.text:00401A27                 mov     ebx, [ebp+4]
.text:00401A2A                 setz    dl
.text:00401A2D                 movzx   ecx, dl
.text:00401A30                 dec     ecx
.text:00401A31                 and     ecx, ebx
.text:00401A33                 mov     [esp+5Ch+var_14], ecx
.text:00401A37                 mov     ecx, [esp+5Ch+arg_0]
.text:00401A3B                 test    ecx, ecx
.text:00401A3D                 jle     loc_401B67
.text:00401A43                 mov     dword ptr [ebp+0Ch], 0
.text:00401A4A                 mov     ebx, [ebp+0]
.text:00401A4D                 test    ebx, ebx
.text:00401A4F                 jz      loc_402580
.text:00401A55                 mov     edi, [ebp+10h]
.text:00401A58                 test    edi, edi
.text:00401A5A                 jnz     short loc_401AB3
.text:00401A5C                 lea     esi, [esi+0]
.text:00401A60
.text:00401A60 loc_401A60:                             ; CODE XREF: sub_401A10+B7C↓j
.text:00401A60                 mov     [ebp+24h], ebx
.text:00401A63                 mov     esi, [esp+5Ch+Str]
.text:00401A67                 mov     [ebp+20h], ebx
.text:00401A6A                 mov     ecx, [esp+5Ch+arg_18]
.text:00401A6E                 xor     ebx, ebx
.text:00401A70                 mov     dword ptr [ebp+14h], 0
.text:00401A77                 test    ecx, ecx
.text:00401A79                 jz      loc_402560
.text:00401A7F
.text:00401A7F loc_401A7F:                             ; CODE XREF: sub_401A10+B64↓j
.text:00401A7F                 mov     ebx, 1
.text:00401A84
.text:00401A84 loc_401A84:                             ; CODE XREF: sub_401A10+B5E↓j
.text:00401A84                 mov     [ebp+1Ch], ebx
.text:00401A87                 mov     ecx, [esp+5Ch+Str]
.text:00401A8B                 movzx   eax, byte ptr [ecx]
.text:00401A8E                 cmp     al, 2Dh ; '-'
.text:00401A90                 jz      loc_402550
.text:00401A96                 cmp     al, 2Bh ; '+'
.text:00401A98                 jz      loc_402539
.text:00401A9E                 xor     edx, edx
.text:00401AA0                 test    ebx, ebx
.text:00401AA2                 setz    dl
.text:00401AA5                 mov     [ebp+18h], edx
.text:00401AA8
.text:00401AA8 loc_401AA8:                             ; CODE XREF: sub_401A10+B35↓j
.text:00401AA8                 mov     [esp+5Ch+Str], esi
.text:00401AAC                 mov     dword ptr [ebp+10h], 1
.text:00401AB3
.text:00401AB3 loc_401AB3:                             ; CODE XREF: sub_401A10+4A↑j
.text:00401AB3                 mov     eax, [ebp+14h]
.text:00401AB6                 test    eax, eax
.text:00401AB8                 jz      short loc_401AC3
.text:00401ABA                 cmp     byte ptr [eax], 0
.text:00401ABD                 jnz     loc_401BA0
.text:00401AC3
.text:00401AC3 loc_401AC3:                             ; CODE XREF: sub_401A10+A8↑j
.text:00401AC3                 mov     ebx, [ebp+0]
.text:00401AC6                 cmp     [ebp+24h], ebx
.text:00401AC9                 jle     short loc_401ACE
.text:00401ACB                 mov     [ebp+24h], ebx
.text:00401ACE
.text:00401ACE loc_401ACE:                             ; CODE XREF: sub_401A10+B9↑j
.text:00401ACE                 cmp     [ebp+20h], ebx
.text:00401AD1                 jle     short loc_401AD6
.text:00401AD3                 mov     [ebp+20h], ebx
.text:00401AD6
.text:00401AD6 loc_401AD6:                             ; CODE XREF: sub_401A10+C1↑j
.text:00401AD6                 cmp     dword ptr [ebp+18h], 1
.text:00401ADA                 jz      loc_4024B0
.text:00401AE0
.text:00401AE0 loc_401AE0:                             ; CODE XREF: sub_401A10+B13↓j
.text:00401AE0                 cmp     ebx, [esp+5Ch+arg_0]
.text:00401AE4                 jz      loc_402494
.text:00401AEA                 cld
.text:00401AEB                 mov     ecx, [esp+5Ch+arg_4]
.text:00401AEF                 mov     edx, 3
.text:00401AF4                 mov     edi, offset dword_4017C0
.text:00401AF9                 mov     esi, [ecx+ebx*4]
.text:00401AFC                 mov     ecx, edx
.text:00401AFE                 repe cmpsb
.text:00401B00                 jnz     short loc_401B3C
.text:00401B02                 mov     edx, [ebp+24h]
.text:00401B05                 lea     eax, [ebx+1]
.text:00401B08                 cmp     [ebp+20h], edx
.text:00401B0B                 mov     [ebp+0], eax
.text:00401B0E                 jz      loc_4024A8
.text:00401B14                 cmp     edx, eax
.text:00401B16                 jz      short loc_401B30
.text:00401B18                 mov     [esp+5Ch+Str2], ebp
.text:00401B1C                 mov     ebx, [esp+5Ch+arg_4]
.text:00401B20                 mov     [esp+5Ch+Str1], ebx
.text:00401B23                 call    sub_4026C0
.text:00401B28                 nop
.text:00401B29                 lea     esi, [esi+0]
.text:00401B30
.text:00401B30 loc_401B30:                             ; CODE XREF: sub_401A10+106↑j
.text:00401B30                                         ; sub_401A10+A9B↓j
.text:00401B30                 mov     eax, [esp+5Ch+arg_0]
.text:00401B34                 mov     ebx, eax
.text:00401B36                 mov     [ebp+24h], eax
.text:00401B39                 mov     [ebp+0], eax
.text:00401B3C
.text:00401B3C loc_401B3C:                             ; CODE XREF: sub_401A10+F0↑j
.text:00401B3C                 cmp     ebx, [esp+5Ch+arg_0]
.text:00401B40                 jz      loc_402494
.text:00401B46                 mov     esi, [esp+5Ch+arg_4]
.text:00401B4A                 mov     eax, [esi+ebx*4]
.text:00401B4D                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00401B50                 jz      short loc_401B77
.text:00401B52
.text:00401B52 loc_401B52:                             ; CODE XREF: sub_401A10+16D↓j
.text:00401B52                 mov     edx, [ebp+18h]
.text:00401B55                 test    edx, edx
.text:00401B57                 jz      short loc_401B70
.text:00401B59                 mov     [ebp+0Ch], eax
.text:00401B5C                 lea     edi, [ebx+1]
.text:00401B5F                 mov     eax, 1
.text:00401B64                 mov     [ebp+0], edi
.text:00401B67
.text:00401B67 loc_401B67:                             ; CODE XREF: sub_401A10+2D↑j
.text:00401B67                                         ; sub_401A10+165↓j ...
.text:00401B67                 add     esp, 4Ch
.text:00401B6A                 pop     ebx
.text:00401B6B                 pop     esi
.text:00401B6C                 pop     edi
.text:00401B6D                 pop     ebp
.text:00401B6E                 retn
.text:00401B6E ; ---------------------------------------------------------------------------
.text:00401B6F                 align 10h
.text:00401B70
.text:00401B70 loc_401B70:                             ; CODE XREF: sub_401A10+147↑j
.text:00401B70                                         ; sub_401A10+A8A↓j ...
.text:00401B70                 mov     eax, 0FFFFFFFFh
.text:00401B75                 jmp     short loc_401B67
.text:00401B77 ; ---------------------------------------------------------------------------
.text:00401B77
.text:00401B77 loc_401B77:                             ; CODE XREF: sub_401A10+140↑j
.text:00401B77                 movzx   edx, byte ptr [eax+1]
.text:00401B7B                 test    dl, dl
.text:00401B7D                 jz      short loc_401B52
.text:00401B7F                 mov     ebx, [esp+5Ch+arg_C]
.text:00401B83                 xor     ecx, ecx
.text:00401B85                 test    ebx, ebx
.text:00401B87                 jz      short loc_401B92
.text:00401B89                 cmp     dl, 2Dh ; '-'
.text:00401B8C                 jz      loc_40248A
.text:00401B92
.text:00401B92 loc_401B92:                             ; CODE XREF: sub_401A10+177↑j
.text:00401B92                                         ; sub_401A10+A7F↓j
.text:00401B92                 lea     esi, [ecx+eax+1]
.text:00401B96                 mov     [ebp+14h], esi
.text:00401B99                 lea     esi, [esi+0]
.text:00401BA0
.text:00401BA0 loc_401BA0:                             ; CODE XREF: sub_401A10+AD↑j
.text:00401BA0                 mov     ecx, [esp+5Ch+arg_C]
.text:00401BA4                 test    ecx, ecx
.text:00401BA6                 jz      loc_401F30
.text:00401BAC                 mov     edx, [ebp+0]
.text:00401BAF                 mov     edi, [esp+5Ch+arg_4]
.text:00401BB3                 mov     eax, [edi+edx*4]
.text:00401BB6                 movzx   edx, byte ptr [eax+1]
.text:00401BBA                 cmp     dl, 2Dh ; '-'
.text:00401BBD                 jz      short loc_401BD5
.text:00401BBF                 mov     ebx, [esp+5Ch+arg_14]
.text:00401BC3                 test    ebx, ebx
.text:00401BC5                 jz      loc_401F30
.text:00401BCB                 cmp     byte ptr [eax+2], 0
.text:00401BCF                 jz      loc_40246A
.text:00401BD5
.text:00401BD5 loc_401BD5:                             ; CODE XREF: sub_401A10+1AD↑j
.text:00401BD5                                         ; sub_401A10+A75↓j
.text:00401BD5                 mov     [esp+5Ch+var_18], 0
.text:00401BDD                 mov     ecx, [ebp+14h]
.text:00401BE0                 mov     [esp+5Ch+var_1C], 0
.text:00401BE8                 mov     [esp+5Ch+var_20], 0
.text:00401BF0                 mov     edi, ecx
.text:00401BF2                 mov     [esp+5Ch+var_24], 0FFFFFFFFh
.text:00401BFA                 movzx   eax, byte ptr [ecx]
.text:00401BFD                 test    al, al
.text:00401BFF                 jz      short loc_401C1C
.text:00401C01                 cmp     al, 3Dh ; '='
.text:00401C03                 jz      short loc_401C1C
.text:00401C05                 lea     esi, [esi+0]
.text:00401C09                 lea     edi, [edi+0]
.text:00401C10
.text:00401C10 loc_401C10:                             ; CODE XREF: sub_401A10+20A↓j
.text:00401C10                 inc     edi
.text:00401C11                 movzx   eax, byte ptr [edi]
.text:00401C14                 test    al, al
.text:00401C16                 jz      short loc_401C1C
.text:00401C18                 cmp     al, 3Dh ; '='
.text:00401C1A                 jnz     short loc_401C10
.text:00401C1C
.text:00401C1C loc_401C1C:                             ; CODE XREF: sub_401A10+1EF↑j
.text:00401C1C                                         ; sub_401A10+1F3↑j ...
.text:00401C1C                 mov     [esp+5Ch+var_28], 0
.text:00401C24                 mov     esi, [esp+5Ch+arg_C]
.text:00401C28                 mov     ebx, [esi]
.text:00401C2A                 test    ebx, ebx
.text:00401C2C                 mov     edx, ebx
.text:00401C2E                 jz      loc_401E50
.text:00401C34                 lea     esi, [esi+0]
.text:00401C3A                 lea     edi, [edi+0]
.text:00401C40
.text:00401C40 loc_401C40:                             ; CODE XREF: sub_401A10+25E↓j
.text:00401C40                 mov     [esp+5Ch+Str2], ecx ; Str2
.text:00401C44                 mov     ebx, edi
.text:00401C46                 sub     ebx, ecx
.text:00401C48                 mov     [esp+5Ch+MaxCount], ebx ; MaxCount
.text:00401C4C                 mov     [esp+5Ch+Str1], edx ; Str1
.text:00401C4F                 call    strncmp
.text:00401C54                 test    eax, eax
.text:00401C56                 jz      loc_4023E6
.text:00401C5C
.text:00401C5C loc_401C5C:                             ; CODE XREF: sub_401A10+A0F↓j
.text:00401C5C                                         ; sub_401A10+A24↓j ...
.text:00401C5C                 inc     [esp+5Ch+var_28]
.text:00401C60                 add     esi, 10h
.text:00401C63                 mov     ecx, [esi]
.text:00401C65                 test    ecx, ecx
.text:00401C67                 mov     edx, ecx
.text:00401C69                 jz      short loc_401C70
.text:00401C6B                 mov     ecx, [ebp+14h]
.text:00401C6E                 jmp     short loc_401C40
.text:00401C70 ; ---------------------------------------------------------------------------
.text:00401C70
.text:00401C70 loc_401C70:                             ; CODE XREF: sub_401A10+259↑j
.text:00401C70                                         ; sub_401A10+A55↓j
.text:00401C70                 mov     esi, [esp+5Ch+var_20]
.text:00401C74                 test    esi, esi
.text:00401C76                 jz      short loc_401C84
.text:00401C78                 mov     edx, [esp+5Ch+var_1C]
.text:00401C7C                 test    edx, edx
.text:00401C7E                 jz      loc_402390
.text:00401C84
.text:00401C84 loc_401C84:                             ; CODE XREF: sub_401A10+266↑j
.text:00401C84                 mov     eax, [esp+5Ch+var_18]
.text:00401C88                 test    eax, eax
.text:00401C8A                 jz      loc_401E50
.text:00401C90                 mov     ecx, [ebp+0]
.text:00401C93                 lea     eax, [ecx+1]
.text:00401C96                 mov     [ebp+0], eax
.text:00401C99                 cmp     byte ptr [edi], 0
.text:00401C9C                 jz      loc_401DB0
.text:00401CA2                 mov     ecx, [esp+5Ch+var_18]
.text:00401CA6                 mov     esi, [ecx+4]
.text:00401CA9                 test    esi, esi
.text:00401CAB                 jz      short loc_401CF6
.text:00401CAD                 lea     ebx, [edi+1]
.text:00401CB0                 mov     [ebp+0Ch], ebx
.text:00401CB3
.text:00401CB3 loc_401CB3:                             ; CODE XREF: sub_401A10+3A8↓j
.text:00401CB3                                         ; sub_401A10+3C4↓j
.text:00401CB3                 mov     ebx, [ebp+14h]
.text:00401CB6                 mov     [esp+5Ch+Str1], ebx ; Str
.text:00401CB9                 call    strlen
.text:00401CBE                 add     [ebp+14h], eax
.text:00401CC1                 mov     esi, [esp+5Ch+arg_10]
.text:00401CC5                 test    esi, esi
.text:00401CC7                 jz      short loc_401CD3
.text:00401CC9                 mov     ebp, [esp+5Ch+var_24]
.text:00401CCD                 mov     ecx, [esp+5Ch+arg_10]
.text:00401CD1                 mov     [ecx], ebp
.text:00401CD3
.text:00401CD3 loc_401CD3:                             ; CODE XREF: sub_401A10+2B7↑j
.text:00401CD3                 mov     eax, [esp+5Ch+var_18]
.text:00401CD7                 mov     ecx, [eax+8]
.text:00401CDA                 test    ecx, ecx
.text:00401CDC                 jnz     short loc_401CEA
.text:00401CDE                 mov     ecx, [esp+5Ch+var_18]
.text:00401CE2
.text:00401CE2 loc_401CE2:                             ; CODE XREF: sub_401A10+723↓j
.text:00401CE2                 mov     eax, [ecx+0Ch]
.text:00401CE5                 jmp     loc_401B67
.text:00401CEA ; ---------------------------------------------------------------------------
.text:00401CEA
.text:00401CEA loc_401CEA:                             ; CODE XREF: sub_401A10+2CC↑j
.text:00401CEA                                         ; sub_401A10+719↓j
.text:00401CEA                 mov     esi, [eax+0Ch]
.text:00401CED                 xor     eax, eax
.text:00401CEF                 mov     [ecx], esi
.text:00401CF1                 jmp     loc_401B67
.text:00401CF6 ; ---------------------------------------------------------------------------
.text:00401CF6
.text:00401CF6 loc_401CF6:                             ; CODE XREF: sub_401A10+29B↑j
.text:00401CF6                 mov     edi, [esp+5Ch+var_14]
.text:00401CFA                 test    edi, edi
.text:00401CFC                 jz      short loc_401D50
.text:00401CFE                 mov     esi, [esp+5Ch+arg_4]
.text:00401D02                 mov     edx, [esi+eax*4-4]
.text:00401D06                 cmp     byte ptr [edx+1], 2Dh ; '-'
.text:00401D0A                 jz      short loc_401D72
.text:00401D0C                 mov     [esp+5Ch+Str1], offset aSOptionCSDoesn ; "%s: option `%c%s' doesn't allow an argu"...
.text:00401D13                 call    ds:libintl_gettext
.text:00401D19                 mov     edx, [esp+5Ch+var_18]
.text:00401D1D                 mov     edi, [edx]
.text:00401D1F                 mov     [esp+5Ch+var_4C], edi
.text:00401D23                 mov     ebx, [ebp+0]
.text:00401D26                 mov     edi, [esp+5Ch+arg_4]
.text:00401D2A                 mov     ecx, [edi+ebx*4-4]
.text:00401D2E                 movsx   esi, byte ptr [ecx]
.text:00401D31                 mov     ecx, ds:_iob
.text:00401D37                 add     ecx, 40h ; '@'
.text:00401D3A                 mov     [esp+5Ch+var_50], esi
.text:00401D3E                 mov     ebx, [edi]
.text:00401D40                 mov     [esp+5Ch+Str2], eax ; Format
.text:00401D44                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00401D47                 mov     [esp+5Ch+MaxCount], ebx
.text:00401D4B                 call    fprintf
.text:00401D50
.text:00401D50 loc_401D50:                             ; CODE XREF: sub_401A10+2EC↑j
.text:00401D50                                         ; sub_401A10+398↓j
.text:00401D50                 mov     ecx, [ebp+14h]
.text:00401D53                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00401D56                 call    strlen
.text:00401D5B                 add     [ebp+14h], eax
.text:00401D5E                 mov     eax, [esp+5Ch+var_18]
.text:00401D62                 mov     esi, [eax+0Ch]
.text:00401D65                 mov     [ebp+8], esi
.text:00401D68
.text:00401D68 loc_401D68:                             ; CODE XREF: sub_401A10+4E5↓j
.text:00401D68                                         ; sub_401A10+73E↓j ...
.text:00401D68                 mov     eax, 3Fh ; '?'
.text:00401D6D                 jmp     loc_401B67
.text:00401D72 ; ---------------------------------------------------------------------------
.text:00401D72
.text:00401D72 loc_401D72:                             ; CODE XREF: sub_401A10+2FA↑j
.text:00401D72                 mov     [esp+5Ch+Str1], offset aSOptionSDoesnT ; "%s: option `--%s' doesn't allow an argu"...
.text:00401D79                 call    ds:libintl_gettext
.text:00401D7F                 mov     edx, [esp+5Ch+var_18]
.text:00401D83                 mov     edi, [esp+5Ch+arg_4]
.text:00401D87                 mov     ecx, ds:_iob
.text:00401D8D                 mov     esi, [edx]
.text:00401D8F                 add     ecx, 40h ; '@'
.text:00401D92                 mov     [esp+5Ch+var_50], esi
.text:00401D96                 mov     ebx, [edi]
.text:00401D98                 mov     [esp+5Ch+Str2], eax ; Format
.text:00401D9C                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00401D9F                 mov     [esp+5Ch+MaxCount], ebx
.text:00401DA3                 call    fprintf
.text:00401DA8                 jmp     short loc_401D50
.text:00401DA8 ; ---------------------------------------------------------------------------
.text:00401DAA                 align 10h
.text:00401DB0
.text:00401DB0 loc_401DB0:                             ; CODE XREF: sub_401A10+28C↑j
.text:00401DB0                 mov     ebx, [esp+5Ch+var_18]
.text:00401DB4                 cmp     dword ptr [ebx+4], 1
.text:00401DB8                 jnz     loc_401CB3
.text:00401DBE                 cmp     eax, [esp+5Ch+arg_0]
.text:00401DC2                 jge     short loc_401DD9
.text:00401DC4                 mov     ebx, [esp+5Ch+arg_4]
.text:00401DC8                 lea     edi, [ecx+2]
.text:00401DCB                 mov     [ebp+0], edi
.text:00401DCE                 mov     esi, [ebx+eax*4]
.text:00401DD1                 mov     [ebp+0Ch], esi
.text:00401DD4                 jmp     loc_401CB3
.text:00401DD9 ; ---------------------------------------------------------------------------
.text:00401DD9
.text:00401DD9 loc_401DD9:                             ; CODE XREF: sub_401A10+3B2↑j
.text:00401DD9                 mov     edx, [esp+5Ch+var_14]
.text:00401DDD                 test    edx, edx
.text:00401DDF                 jnz     short loc_401E10
.text:00401DE1
.text:00401DE1 loc_401DE1:                             ; CODE XREF: sub_401A10+437↓j
.text:00401DE1                 mov     edx, [ebp+14h]
.text:00401DE4                 mov     [esp+5Ch+Str1], edx ; Str
.text:00401DE7                 call    strlen
.text:00401DEC                 add     [ebp+14h], eax
.text:00401DEF                 mov     eax, [esp+5Ch+var_18]
.text:00401DF3                 mov     edi, [eax+0Ch]
.text:00401DF6                 mov     [ebp+8], edi
.text:00401DF9
.text:00401DF9 loc_401DF9:                             ; CODE XREF: sub_401A10+7C2↓j
.text:00401DF9                 mov     ebp, [esp+5Ch+Str]
.text:00401DFD                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:00401E01                 setnz   bl
.text:00401E04                 movzx   esi, bl
.text:00401E07                 lea     eax, [esi+esi*4+3Ah]
.text:00401E0B                 jmp     loc_401B67
.text:00401E10 ; ---------------------------------------------------------------------------
.text:00401E10
.text:00401E10 loc_401E10:                             ; CODE XREF: sub_401A10+3CF↑j
.text:00401E10                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:00401E17                 call    ds:libintl_gettext
.text:00401E1D                 mov     ecx, [ebp+0]
.text:00401E20                 mov     esi, [esp+5Ch+arg_4]
.text:00401E24                 mov     ebx, [esi+ecx*4-4]
.text:00401E28                 mov     ecx, ds:_iob
.text:00401E2E                 mov     [esp+5Ch+var_50], ebx
.text:00401E32                 mov     edi, [esi]
.text:00401E34                 add     ecx, 40h ; '@'
.text:00401E37                 mov     [esp+5Ch+Str2], eax ; Format
.text:00401E3B                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00401E3E                 mov     [esp+5Ch+MaxCount], edi
.text:00401E42                 call    fprintf
.text:00401E47                 jmp     short loc_401DE1
.text:00401E47 ; ---------------------------------------------------------------------------
.text:00401E49                 align 10h
.text:00401E50
.text:00401E50 loc_401E50:                             ; CODE XREF: sub_401A10+21E↑j
.text:00401E50                                         ; sub_401A10+27A↑j
.text:00401E50                 mov     eax, [esp+5Ch+arg_14]
.text:00401E54                 test    eax, eax
.text:00401E56                 jz      short loc_401E86
.text:00401E58                 mov     ebx, [ebp+0]
.text:00401E5B                 mov     esi, [esp+5Ch+arg_4]
.text:00401E5F                 mov     edi, [esi+ebx*4]
.text:00401E62                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:00401E66                 jz      short loc_401E89
.text:00401E68                 mov     ecx, [ebp+14h]
.text:00401E6B                 mov     edx, [esp+5Ch+Str]
.text:00401E6F                 movsx   ebx, byte ptr [ecx]
.text:00401E72                 mov     [esp+5Ch+Str1], edx ; Str
.text:00401E75                 mov     [esp+5Ch+Str2], ebx ; Val
.text:00401E79                 call    strchr
.text:00401E7E                 test    eax, eax
.text:00401E80                 jnz     loc_401F30
.text:00401E86
.text:00401E86 loc_401E86:                             ; CODE XREF: sub_401A10+446↑j
.text:00401E86                 mov     ebx, [ebp+0]
.text:00401E89
.text:00401E89 loc_401E89:                             ; CODE XREF: sub_401A10+456↑j
.text:00401E89                 mov     eax, [esp+5Ch+var_14]
.text:00401E8D                 test    eax, eax
.text:00401E8F                 jz      short loc_401EE1
.text:00401E91                 mov     esi, [esp+5Ch+arg_4]
.text:00401E95                 mov     edi, [esi+ebx*4]
.text:00401E98                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:00401E9C                 jz      short loc_401EFA
.text:00401E9E                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO ; "%s: unrecognized option `%c%s'\n"
.text:00401EA5                 call    ds:libintl_gettext
.text:00401EAB                 mov     edi, [ebp+14h]
.text:00401EAE                 mov     [esp+5Ch+var_4C], edi
.text:00401EB2                 mov     ebx, [ebp+0]
.text:00401EB5                 mov     edi, [esp+5Ch+arg_4]
.text:00401EB9                 mov     esi, [edi+ebx*4]
.text:00401EBC                 movsx   ecx, byte ptr [esi]
.text:00401EBF                 mov     esi, ds:_iob
.text:00401EC5                 add     esi, 40h ; '@'
.text:00401EC8                 mov     [esp+5Ch+var_50], ecx
.text:00401ECC                 mov     ebx, [edi]
.text:00401ECE                 mov     [esp+5Ch+Str2], eax ; Format
.text:00401ED2                 mov     [esp+5Ch+Str1], esi ; Stream
.text:00401ED5                 mov     [esp+5Ch+MaxCount], ebx
.text:00401ED9                 call    fprintf
.text:00401EDE
.text:00401EDE loc_401EDE:                             ; CODE XREF: sub_401A10+51D↓j
.text:00401EDE                 mov     ebx, [ebp+0]
.text:00401EE1
.text:00401EE1 loc_401EE1:                             ; CODE XREF: sub_401A10+47F↑j
.text:00401EE1                 mov     dword ptr [ebp+14h], offset dword_4018C0
.text:00401EE8                 lea     edx, [ebx+1]
.text:00401EEB                 mov     [ebp+0], edx
.text:00401EEE
.text:00401EEE loc_401EEE:                             ; CODE XREF: sub_401A10+999↓j
.text:00401EEE                 mov     dword ptr [ebp+8], 0
.text:00401EF5                 jmp     loc_401D68
.text:00401EFA ; ---------------------------------------------------------------------------
.text:00401EFA
.text:00401EFA loc_401EFA:                             ; CODE XREF: sub_401A10+48C↑j
.text:00401EFA                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO_0 ; "%s: unrecognized option `--%s'\n"
.text:00401F01                 call    ds:libintl_gettext
.text:00401F07                 mov     ecx, [ebp+14h]
.text:00401F0A                 mov     edi, [esp+5Ch+arg_4]
.text:00401F0E                 mov     edx, ds:_iob
.text:00401F14                 mov     [esp+5Ch+var_50], ecx
.text:00401F18                 mov     ebx, [edi]
.text:00401F1A                 add     edx, 40h ; '@'
.text:00401F1D                 mov     [esp+5Ch+Str2], eax ; Format
.text:00401F21                 mov     [esp+5Ch+MaxCount], ebx
.text:00401F25                 mov     [esp+5Ch+Str1], edx ; Stream
.text:00401F28                 call    fprintf
.text:00401F2D                 jmp     short loc_401EDE
.text:00401F2D ; ---------------------------------------------------------------------------
.text:00401F2F                 align 10h
.text:00401F30
.text:00401F30 loc_401F30:                             ; CODE XREF: sub_401A10+196↑j
.text:00401F30                                         ; sub_401A10+1B5↑j ...
.text:00401F30                 mov     esi, [ebp+14h]
.text:00401F33                 movzx   ebx, byte ptr [esi]
.text:00401F36                 inc     esi
.text:00401F37                 mov     [ebp+14h], esi
.text:00401F3A                 mov     ecx, [esp+5Ch+Str]
.text:00401F3E                 movsx   esi, bl
.text:00401F41                 mov     [esp+5Ch+Str2], esi ; Val
.text:00401F45                 mov     edi, esi
.text:00401F47                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00401F4A                 call    strchr
.text:00401F4F                 mov     ecx, [ebp+14h]
.text:00401F52                 cmp     byte ptr [ecx], 0
.text:00401F55                 jnz     short loc_401F5A
.text:00401F57                 inc     dword ptr [ebp+0]
.text:00401F5A
.text:00401F5A loc_401F5A:                             ; CODE XREF: sub_401A10+545↑j
.text:00401F5A                 test    eax, eax
.text:00401F5C                 jz      loc_402340
.text:00401F62                 cmp     bl, 3Ah ; ':'
.text:00401F65                 jz      loc_402340
.text:00401F6B                 cmp     byte ptr [eax], 57h ; 'W'
.text:00401F6E                 jz      loc_402026
.text:00401F74                 movzx   edx, byte ptr [eax+1]
.text:00401F78
.text:00401F78 loc_401F78:                             ; CODE XREF: sub_401A10+61D↓j
.text:00401F78                 cmp     dl, 3Ah ; ':'
.text:00401F7B                 jz      short loc_401F84
.text:00401F7D
.text:00401F7D loc_401F7D:                             ; CODE XREF: sub_401A10+590↓j
.text:00401F7D                 mov     eax, esi
.text:00401F7F                 jmp     loc_401B67
.text:00401F84 ; ---------------------------------------------------------------------------
.text:00401F84
.text:00401F84 loc_401F84:                             ; CODE XREF: sub_401A10+56B↑j
.text:00401F84                 cmp     byte ptr [eax+2], 3Ah ; ':'
.text:00401F88                 jz      loc_402011
.text:00401F8E                 cmp     byte ptr [ecx], 0
.text:00401F91                 jz      short loc_401FA2
.text:00401F93
.text:00401F93 loc_401F93:                             ; CODE XREF: sub_401A10+604↓j
.text:00401F93                 inc     dword ptr [ebp+0]
.text:00401F96                 mov     [ebp+0Ch], ecx
.text:00401F99
.text:00401F99 loc_401F99:                             ; CODE XREF: sub_401A10+5AB↓j
.text:00401F99                                         ; sub_401A10+5C6↓j ...
.text:00401F99                 mov     dword ptr [ebp+14h], 0
.text:00401FA0                 jmp     short loc_401F7D
.text:00401FA2 ; ---------------------------------------------------------------------------
.text:00401FA2
.text:00401FA2 loc_401FA2:                             ; CODE XREF: sub_401A10+581↑j
.text:00401FA2                 mov     ecx, [ebp+0]
.text:00401FA5                 cmp     ecx, [esp+5Ch+arg_0]
.text:00401FA9                 jz      short loc_401FBD
.text:00401FAB                 mov     eax, [esp+5Ch+arg_4]
.text:00401FAF                 lea     edx, [ecx+1]
.text:00401FB2                 mov     [ebp+0], edx
.text:00401FB5                 mov     ebx, [eax+ecx*4]
.text:00401FB8                 mov     [ebp+0Ch], ebx
.text:00401FBB                 jmp     short loc_401F99
.text:00401FBD ; ---------------------------------------------------------------------------
.text:00401FBD
.text:00401FBD loc_401FBD:                             ; CODE XREF: sub_401A10+599↑j
.text:00401FBD                 mov     ecx, [esp+5Ch+var_14]
.text:00401FC1                 test    ecx, ecx
.text:00401FC3                 jnz     short loc_401FDF
.text:00401FC5
.text:00401FC5 loc_401FC5:                             ; CODE XREF: sub_401A10+5FF↓j
.text:00401FC5                 mov     [ebp+8], edi
.text:00401FC8                 mov     edi, [esp+5Ch+Str]
.text:00401FCC                 cmp     byte ptr [edi], 3Ah ; ':'
.text:00401FCF                 jz      short loc_401FD8
.text:00401FD1                 mov     esi, 3Fh ; '?'
.text:00401FD6                 jmp     short loc_401F99
.text:00401FD8 ; ---------------------------------------------------------------------------
.text:00401FD8
.text:00401FD8 loc_401FD8:                             ; CODE XREF: sub_401A10+5BF↑j
.text:00401FD8                 mov     esi, 3Ah ; ':'
.text:00401FDD                 jmp     short loc_401F99
.text:00401FDF ; ---------------------------------------------------------------------------
.text:00401FDF
.text:00401FDF loc_401FDF:                             ; CODE XREF: sub_401A10+5B3↑j
.text:00401FDF                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:00401FE6                 call    ds:libintl_gettext
.text:00401FEC                 mov     [esp+5Ch+var_50], edi
.text:00401FF0                 mov     ebx, [esp+5Ch+arg_4]
.text:00401FF4                 mov     edx, ds:_iob
.text:00401FFA                 mov     esi, [ebx]
.text:00401FFC                 add     edx, 40h ; '@'
.text:00401FFF                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402003                 mov     [esp+5Ch+MaxCount], esi
.text:00402007                 mov     [esp+5Ch+Str1], edx ; Stream
.text:0040200A                 call    fprintf
.text:0040200F                 jmp     short loc_401FC5
.text:00402011 ; ---------------------------------------------------------------------------
.text:00402011
.text:00402011 loc_402011:                             ; CODE XREF: sub_401A10+578↑j
.text:00402011                 cmp     byte ptr [ecx], 0
.text:00402014                 jnz     loc_401F93
.text:0040201A                 mov     dword ptr [ebp+0Ch], 0
.text:00402021                 jmp     loc_401F99
.text:00402026 ; ---------------------------------------------------------------------------
.text:00402026
.text:00402026 loc_402026:                             ; CODE XREF: sub_401A10+55E↑j
.text:00402026                 movzx   edx, byte ptr [eax+1]
.text:0040202A                 cmp     dl, 3Bh ; ';'
.text:0040202D                 jnz     loc_401F78
.text:00402033                 mov     [esp+5Ch+var_2C], 0
.text:0040203B                 mov     [esp+5Ch+var_30], 0
.text:00402043                 mov     [esp+5Ch+var_34], 0
.text:0040204B                 mov     [esp+5Ch+var_38], 0
.text:00402053                 cmp     byte ptr [ecx], 0
.text:00402056                 jz      loc_4022CB
.text:0040205C                 inc     dword ptr [ebp+0]
.text:0040205F                 mov     [ebp+0Ch], ecx
.text:00402062
.text:00402062 loc_402062:                             ; CODE XREF: sub_401A10+8D4↓j
.text:00402062                 mov     edi, [ebp+0Ch]
.text:00402065                 mov     [ebp+14h], edi
.text:00402068                 movzx   eax, byte ptr [edi]
.text:0040206B                 test    al, al
.text:0040206D                 jz      short loc_40207F
.text:0040206F                 cmp     al, 3Dh ; '='
.text:00402071                 jz      short loc_40207F
.text:00402073
.text:00402073 loc_402073:                             ; CODE XREF: sub_401A10+66D↓j
.text:00402073                 inc     edi
.text:00402074                 movzx   eax, byte ptr [edi]
.text:00402077                 test    al, al
.text:00402079                 jz      short loc_40207F
.text:0040207B                 cmp     al, 3Dh ; '='
.text:0040207D                 jnz     short loc_402073
.text:0040207F
.text:0040207F loc_40207F:                             ; CODE XREF: sub_401A10+65D↑j
.text:0040207F                                         ; sub_401A10+661↑j ...
.text:0040207F                 mov     [esp+5Ch+var_3C], 0
.text:00402087                 mov     esi, [esp+5Ch+arg_C]
.text:0040208B                 mov     eax, [esi]
.text:0040208D                 test    eax, eax
.text:0040208F                 jz      loc_402210
.text:00402095                 mov     ecx, eax
.text:00402097
.text:00402097 loc_402097:                             ; CODE XREF: sub_401A10+6B3↓j
.text:00402097                 mov     ebx, [ebp+14h]
.text:0040209A                 mov     eax, edi
.text:0040209C                 mov     [esp+5Ch+Str1], ecx ; Str1
.text:0040209F                 sub     eax, ebx
.text:004020A1                 mov     [esp+5Ch+MaxCount], eax ; MaxCount
.text:004020A5                 mov     [esp+5Ch+Str2], ebx ; Str2
.text:004020A9                 call    strncmp
.text:004020AE                 test    eax, eax
.text:004020B0                 jz      loc_402277
.text:004020B6
.text:004020B6 loc_4020B6:                             ; CODE XREF: sub_401A10+88C↓j
.text:004020B6                                         ; sub_401A10+89D↓j
.text:004020B6                 inc     [esp+5Ch+var_3C]
.text:004020BA                 add     esi, 10h
.text:004020BD                 mov     edx, [esi]
.text:004020BF                 test    edx, edx
.text:004020C1                 mov     ecx, edx
.text:004020C3                 jnz     short loc_402097
.text:004020C5
.text:004020C5 loc_4020C5:                             ; CODE XREF: sub_401A10+8B6↓j
.text:004020C5                 mov     esi, [esp+5Ch+var_34]
.text:004020C9                 test    esi, esi
.text:004020CB                 jz      short loc_4020D9
.text:004020CD                 mov     ebx, [esp+5Ch+var_30]
.text:004020D1                 test    ebx, ebx
.text:004020D3                 jz      loc_402221
.text:004020D9
.text:004020D9 loc_4020D9:                             ; CODE XREF: sub_401A10+6BB↑j
.text:004020D9                 mov     esi, [esp+5Ch+var_2C]
.text:004020DD                 test    esi, esi
.text:004020DF                 jz      loc_402210
.text:004020E5                 cmp     byte ptr [edi], 0
.text:004020E8                 jz      loc_402190
.text:004020EE                 mov     ecx, [esp+5Ch+var_2C]
.text:004020F2                 mov     ebx, [ecx+4]
.text:004020F5                 test    ebx, ebx
.text:004020F7                 jz      short loc_402138
.text:004020F9                 lea     edx, [edi+1]
.text:004020FC                 mov     [ebp+0Ch], edx
.text:004020FF
.text:004020FF loc_4020FF:                             ; CODE XREF: sub_401A10+788↓j
.text:004020FF                                         ; sub_401A10+7A7↓j
.text:004020FF                 mov     edi, [ebp+14h]
.text:00402102                 mov     [esp+5Ch+Str1], edi ; Str
.text:00402105                 call    strlen
.text:0040210A                 add     [ebp+14h], eax
.text:0040210D                 mov     eax, [esp+5Ch+arg_10]
.text:00402111                 test    eax, eax
.text:00402113                 jz      short loc_402120
.text:00402115                 mov     edx, [esp+5Ch+var_38]
.text:00402119                 mov     ebp, [esp+5Ch+arg_10]
.text:0040211D                 mov     [ebp+0], edx
.text:00402120
.text:00402120 loc_402120:                             ; CODE XREF: sub_401A10+703↑j
.text:00402120                 mov     eax, [esp+5Ch+var_2C]
.text:00402124                 mov     ecx, [eax+8]
.text:00402127                 test    ecx, ecx
.text:00402129                 jnz     loc_401CEA
.text:0040212F                 mov     ecx, [esp+5Ch+var_2C]
.text:00402133                 jmp     loc_401CE2
.text:00402138 ; ---------------------------------------------------------------------------
.text:00402138
.text:00402138 loc_402138:                             ; CODE XREF: sub_401A10+6E7↑j
.text:00402138                 mov     eax, [esp+5Ch+var_14]
.text:0040213C                 test    eax, eax
.text:0040213E                 jnz     short loc_402153
.text:00402140
.text:00402140 loc_402140:                             ; CODE XREF: sub_401A10+779↓j
.text:00402140                 mov     ecx, [ebp+14h]
.text:00402143                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00402146                 call    strlen
.text:0040214B                 add     [ebp+14h], eax
.text:0040214E                 jmp     loc_401D68
.text:00402153 ; ---------------------------------------------------------------------------
.text:00402153
.text:00402153 loc_402153:                             ; CODE XREF: sub_401A10+72E↑j
.text:00402153                 mov     [esp+5Ch+Str1], offset aSOptionWSDoesn ; "%s: option `-W %s' doesn't allow an arg"...
.text:0040215A                 call    ds:libintl_gettext
.text:00402160                 mov     edx, [esp+5Ch+var_2C]
.text:00402164                 mov     ebx, [esp+5Ch+arg_4]
.text:00402168                 mov     edi, [edx]
.text:0040216A                 mov     [esp+5Ch+var_50], edi
.text:0040216E                 mov     edi, ds:_iob
.text:00402174                 mov     esi, [ebx]
.text:00402176                 mov     [esp+5Ch+Str2], eax ; Format
.text:0040217A                 add     edi, 40h ; '@'
.text:0040217D                 mov     [esp+5Ch+MaxCount], esi
.text:00402181                 mov     [esp+5Ch+Str1], edi ; Stream
.text:00402184                 call    fprintf
.text:00402189                 jmp     short loc_402140
.text:00402189 ; ---------------------------------------------------------------------------
.text:0040218B                 align 10h
.text:00402190
.text:00402190 loc_402190:                             ; CODE XREF: sub_401A10+6D8↑j
.text:00402190                 mov     esi, [esp+5Ch+var_2C]
.text:00402194                 cmp     dword ptr [esi+4], 1
.text:00402198                 jnz     loc_4020FF
.text:0040219E                 mov     ecx, [ebp+0]
.text:004021A1                 cmp     ecx, [esp+5Ch+arg_0]
.text:004021A5                 jge     short loc_4021BC
.text:004021A7                 mov     eax, [esp+5Ch+arg_4]
.text:004021AB                 lea     ebx, [ecx+1]
.text:004021AE                 mov     [ebp+0], ebx
.text:004021B1                 mov     edi, [eax+ecx*4]
.text:004021B4                 mov     [ebp+0Ch], edi
.text:004021B7                 jmp     loc_4020FF
.text:004021BC ; ---------------------------------------------------------------------------
.text:004021BC
.text:004021BC loc_4021BC:                             ; CODE XREF: sub_401A10+795↑j
.text:004021BC                 mov     edx, [esp+5Ch+var_14]
.text:004021C0                 test    edx, edx
.text:004021C2                 jnz     short loc_4021D7
.text:004021C4
.text:004021C4 loc_4021C4:                             ; CODE XREF: sub_401A10+7FE↓j
.text:004021C4                 mov     edx, [ebp+14h]
.text:004021C7                 mov     [esp+5Ch+Str1], edx ; Str
.text:004021CA                 call    strlen
.text:004021CF                 add     [ebp+14h], eax
.text:004021D2                 jmp     loc_401DF9
.text:004021D7 ; ---------------------------------------------------------------------------
.text:004021D7
.text:004021D7 loc_4021D7:                             ; CODE XREF: sub_401A10+7B2↑j
.text:004021D7                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:004021DE                 call    ds:libintl_gettext
.text:004021E4                 mov     ecx, [ebp+0]
.text:004021E7                 mov     ebx, [esp+5Ch+arg_4]
.text:004021EB                 mov     edi, [ebx+ecx*4-4]
.text:004021EF                 mov     ecx, ds:_iob
.text:004021F5                 mov     [esp+5Ch+var_50], edi
.text:004021F9                 mov     esi, [ebx]
.text:004021FB                 add     ecx, 40h ; '@'
.text:004021FE                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402202                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00402205                 mov     [esp+5Ch+MaxCount], esi
.text:00402209                 call    fprintf
.text:0040220E                 jmp     short loc_4021C4
.text:00402210 ; ---------------------------------------------------------------------------
.text:00402210
.text:00402210 loc_402210:                             ; CODE XREF: sub_401A10+67F↑j
.text:00402210                                         ; sub_401A10+6CF↑j
.text:00402210                 mov     dword ptr [ebp+14h], 0
.text:00402217                 mov     eax, 57h ; 'W'
.text:0040221C                 jmp     loc_401B67
.text:00402221 ; ---------------------------------------------------------------------------
.text:00402221
.text:00402221 loc_402221:                             ; CODE XREF: sub_401A10+6C3↑j
.text:00402221                 mov     edi, [esp+5Ch+var_14]
.text:00402225                 test    edi, edi
.text:00402227                 jnz     short loc_40223F
.text:00402229
.text:00402229 loc_402229:                             ; CODE XREF: sub_401A10+865↓j
.text:00402229                 mov     edx, [ebp+14h]
.text:0040222C                 mov     [esp+5Ch+Str1], edx ; Str
.text:0040222F                 call    strlen
.text:00402234                 add     [ebp+14h], eax
.text:00402237                 inc     dword ptr [ebp+0]
.text:0040223A                 jmp     loc_401D68
.text:0040223F ; ---------------------------------------------------------------------------
.text:0040223F
.text:0040223F loc_40223F:                             ; CODE XREF: sub_401A10+817↑j
.text:0040223F                 mov     [esp+5Ch+Str1], offset aSOptionWSIsAmb ; "%s: option `-W %s' is ambiguous\n"
.text:00402246                 call    ds:libintl_gettext
.text:0040224C                 mov     ecx, [ebp+0]
.text:0040224F                 mov     ebx, [esp+5Ch+arg_4]
.text:00402253                 mov     edi, [ebx+ecx*4]
.text:00402256                 mov     ecx, ds:_iob
.text:0040225C                 mov     [esp+5Ch+var_50], edi
.text:00402260                 mov     esi, [ebx]
.text:00402262                 add     ecx, 40h ; '@'
.text:00402265                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402269                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:0040226C                 mov     [esp+5Ch+MaxCount], esi
.text:00402270                 call    fprintf
.text:00402275                 jmp     short loc_402229
.text:00402277 ; ---------------------------------------------------------------------------
.text:00402277
.text:00402277 loc_402277:                             ; CODE XREF: sub_401A10+6A0↑j
.text:00402277                 mov     edx, [ebp+14h]
.text:0040227A                 mov     ebx, edi
.text:0040227C                 mov     ecx, [esi]
.text:0040227E                 sub     ebx, edx
.text:00402280                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00402283                 call    strlen
.text:00402288                 cmp     ebx, eax
.text:0040228A                 jz      short loc_4022B2
.text:0040228C                 mov     ebx, [esp+5Ch+var_2C]
.text:00402290                 test    ebx, ebx
.text:00402292                 jz      short loc_4022A1
.text:00402294                 mov     [esp+5Ch+var_34], 1
.text:0040229C                 jmp     loc_4020B6
.text:004022A1 ; ---------------------------------------------------------------------------
.text:004022A1
.text:004022A1 loc_4022A1:                             ; CODE XREF: sub_401A10+882↑j
.text:004022A1                 mov     [esp+5Ch+var_2C], esi
.text:004022A5                 mov     ecx, [esp+5Ch+var_3C]
.text:004022A9                 mov     [esp+5Ch+var_38], ecx
.text:004022AD                 jmp     loc_4020B6
.text:004022B2 ; ---------------------------------------------------------------------------
.text:004022B2
.text:004022B2 loc_4022B2:                             ; CODE XREF: sub_401A10+87A↑j
.text:004022B2                 mov     [esp+5Ch+var_2C], esi
.text:004022B6                 mov     eax, [esp+5Ch+var_3C]
.text:004022BA                 mov     [esp+5Ch+var_30], 1
.text:004022C2                 mov     [esp+5Ch+var_38], eax
.text:004022C6                 jmp     loc_4020C5
.text:004022CB ; ---------------------------------------------------------------------------
.text:004022CB
.text:004022CB loc_4022CB:                             ; CODE XREF: sub_401A10+646↑j
.text:004022CB                 mov     edx, [ebp+0]
.text:004022CE                 cmp     edx, [esp+5Ch+arg_0]
.text:004022D2                 jz      short loc_4022E9
.text:004022D4                 mov     ebx, [esp+5Ch+arg_4]
.text:004022D8                 lea     esi, [edx+1]
.text:004022DB                 mov     [ebp+0], esi
.text:004022DE                 mov     edi, [ebx+edx*4]
.text:004022E1                 mov     [ebp+0Ch], edi
.text:004022E4                 jmp     loc_402062
.text:004022E9 ; ---------------------------------------------------------------------------
.text:004022E9
.text:004022E9 loc_4022E9:                             ; CODE XREF: sub_401A10+8C2↑j
.text:004022E9                 mov     edi, [esp+5Ch+var_14]
.text:004022ED                 test    edi, edi
.text:004022EF                 jnz     short loc_40230C
.text:004022F1
.text:004022F1 loc_4022F1:                             ; CODE XREF: sub_401A10+92C↓j
.text:004022F1                 mov     [ebp+8], esi
.text:004022F4                 mov     ebp, [esp+5Ch+Str]
.text:004022F8                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:004022FC                 jz      short loc_402308
.text:004022FE                 mov     bl, 3Fh ; '?'
.text:00402300
.text:00402300 loc_402300:                             ; CODE XREF: sub_401A10+8FA↓j
.text:00402300                 movsx   eax, bl
.text:00402303                 jmp     loc_401B67
.text:00402308 ; ---------------------------------------------------------------------------
.text:00402308
.text:00402308 loc_402308:                             ; CODE XREF: sub_401A10+8EC↑j
.text:00402308                 mov     bl, 3Ah ; ':'
.text:0040230A                 jmp     short loc_402300
.text:0040230C ; ---------------------------------------------------------------------------
.text:0040230C
.text:0040230C loc_40230C:                             ; CODE XREF: sub_401A10+8DF↑j
.text:0040230C                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:00402313                 call    ds:libintl_gettext
.text:00402319                 mov     [esp+5Ch+var_50], esi
.text:0040231D                 mov     edx, [esp+5Ch+arg_4]
.text:00402321                 mov     ecx, ds:_iob
.text:00402327                 mov     ebx, [edx]
.text:00402329                 add     ecx, 40h ; '@'
.text:0040232C                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402330                 mov     [esp+5Ch+MaxCount], ebx
.text:00402334                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00402337                 call    fprintf
.text:0040233C                 jmp     short loc_4022F1
.text:0040233C ; ---------------------------------------------------------------------------
.text:0040233E                 align 10h
.text:00402340
.text:00402340 loc_402340:                             ; CODE XREF: sub_401A10+54C↑j
.text:00402340                                         ; sub_401A10+555↑j
.text:00402340                 mov     eax, [esp+5Ch+var_14]
.text:00402344                 test    eax, eax
.text:00402346                 jz      short loc_40237F
.text:00402348                 mov     ebx, [ebp+1Ch]
.text:0040234B                 test    ebx, ebx
.text:0040234D                 jz      short loc_402387
.text:0040234F                 mov     [esp+5Ch+Str1], offset aSIllegalOption ; "%s: illegal option -- %c\n"
.text:00402356
.text:00402356 loc_402356:                             ; CODE XREF: sub_401A10+97E↓j
.text:00402356                 call    ds:libintl_gettext
.text:0040235C                 mov     [esp+5Ch+var_50], esi
.text:00402360                 mov     ebx, [esp+5Ch+arg_4]
.text:00402364                 mov     edx, ds:_iob
.text:0040236A                 mov     esi, [ebx]
.text:0040236C                 add     edx, 40h ; '@'
.text:0040236F                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402373                 mov     [esp+5Ch+MaxCount], esi
.text:00402377                 mov     [esp+5Ch+Str1], edx ; Stream
.text:0040237A                 call    fprintf
.text:0040237F
.text:0040237F loc_40237F:                             ; CODE XREF: sub_401A10+936↑j
.text:0040237F                 mov     [ebp+8], edi
.text:00402382                 jmp     loc_401D68
.text:00402387 ; ---------------------------------------------------------------------------
.text:00402387
.text:00402387 loc_402387:                             ; CODE XREF: sub_401A10+93D↑j
.text:00402387                 mov     [esp+5Ch+Str1], offset aSInvalidOption ; "%s: invalid option -- %c\n"
.text:0040238E                 jmp     short loc_402356
.text:00402390 ; ---------------------------------------------------------------------------
.text:00402390
.text:00402390 loc_402390:                             ; CODE XREF: sub_401A10+26E↑j
.text:00402390                 mov     edi, [esp+5Ch+var_14]
.text:00402394                 test    edi, edi
.text:00402396                 jnz     short loc_4023AE
.text:00402398
.text:00402398 loc_402398:                             ; CODE XREF: sub_401A10+9D4↓j
.text:00402398                 mov     edx, [ebp+14h]
.text:0040239B                 mov     [esp+5Ch+Str1], edx ; Str
.text:0040239E                 call    strlen
.text:004023A3                 add     [ebp+14h], eax
.text:004023A6                 inc     dword ptr [ebp+0]
.text:004023A9                 jmp     loc_401EEE
.text:004023AE ; ---------------------------------------------------------------------------
.text:004023AE
.text:004023AE loc_4023AE:                             ; CODE XREF: sub_401A10+986↑j
.text:004023AE                 mov     [esp+5Ch+Str1], offset aSOptionSIsAmbi ; "%s: option `%s' is ambiguous\n"
.text:004023B5                 call    ds:libintl_gettext
.text:004023BB                 mov     ebx, [ebp+0]
.text:004023BE                 mov     edi, [esp+5Ch+arg_4]
.text:004023C2                 mov     ecx, [edi+ebx*4]
.text:004023C5                 mov     ebx, ds:_iob
.text:004023CB                 mov     [esp+5Ch+var_50], ecx
.text:004023CF                 mov     esi, [edi]
.text:004023D1                 add     ebx, 40h ; '@'
.text:004023D4                 mov     [esp+5Ch+Str2], eax ; Format
.text:004023D8                 mov     [esp+5Ch+Str1], ebx ; Stream
.text:004023DB                 mov     [esp+5Ch+MaxCount], esi
.text:004023DF                 call    fprintf
.text:004023E4                 jmp     short loc_402398
.text:004023E6 ; ---------------------------------------------------------------------------
.text:004023E6
.text:004023E6 loc_4023E6:                             ; CODE XREF: sub_401A10+246↑j
.text:004023E6                 mov     ecx, [ebp+14h]
.text:004023E9                 mov     ebx, edi
.text:004023EB                 mov     edx, [esi]
.text:004023ED                 sub     ebx, ecx
.text:004023EF                 mov     [esp+5Ch+Str1], edx ; Str
.text:004023F2                 call    strlen
.text:004023F7                 cmp     ebx, eax
.text:004023F9                 jz      short loc_402451
.text:004023FB                 mov     ebx, [esp+5Ch+var_18]
.text:004023FF                 test    ebx, ebx
.text:00402401                 jz      short loc_402440
.text:00402403                 mov     edx, [esp+5Ch+arg_14]
.text:00402407                 test    edx, edx
.text:00402409                 jnz     short loc_402417
.text:0040240B                 mov     ecx, [esp+5Ch+var_18]
.text:0040240F                 mov     ebx, [esi+4]
.text:00402412                 cmp     [ecx+4], ebx
.text:00402415                 jz      short loc_402424
.text:00402417
.text:00402417 loc_402417:                             ; CODE XREF: sub_401A10+9F9↑j
.text:00402417                                         ; sub_401A10+A1A↓j ...
.text:00402417                 mov     [esp+5Ch+var_20], 1
.text:0040241F                 jmp     loc_401C5C
.text:00402424 ; ---------------------------------------------------------------------------
.text:00402424
.text:00402424 loc_402424:                             ; CODE XREF: sub_401A10+A05↑j
.text:00402424                 mov     edx, [esi+8]
.text:00402427                 cmp     [ecx+8], edx
.text:0040242A                 jnz     short loc_402417
.text:0040242C                 mov     ebx, [esi+0Ch]
.text:0040242F                 cmp     [ecx+0Ch], ebx
.text:00402432                 jnz     short loc_402417
.text:00402434                 jmp     loc_401C5C
.text:00402434 ; ---------------------------------------------------------------------------
.text:00402439                 align 10h
.text:00402440
.text:00402440 loc_402440:                             ; CODE XREF: sub_401A10+9F1↑j
.text:00402440                 mov     [esp+5Ch+var_18], esi
.text:00402444                 mov     eax, [esp+5Ch+var_28]
.text:00402448                 mov     [esp+5Ch+var_24], eax
.text:0040244C                 jmp     loc_401C5C
.text:00402451 ; ---------------------------------------------------------------------------
.text:00402451
.text:00402451 loc_402451:                             ; CODE XREF: sub_401A10+9E9↑j
.text:00402451                 mov     [esp+5Ch+var_18], esi
.text:00402455                 mov     ecx, [esp+5Ch+var_28]
.text:00402459                 mov     [esp+5Ch+var_1C], 1
.text:00402461                 mov     [esp+5Ch+var_24], ecx
.text:00402465                 jmp     loc_401C70
.text:0040246A ; ---------------------------------------------------------------------------
.text:0040246A
.text:0040246A loc_40246A:                             ; CODE XREF: sub_401A10+1BF↑j
.text:0040246A                 mov     eax, [esp+5Ch+Str]
.text:0040246E                 movsx   esi, dl
.text:00402471                 mov     [esp+5Ch+Str2], esi ; Val
.text:00402475                 mov     [esp+5Ch+Str1], eax ; Str
.text:00402478                 call    strchr
.text:0040247D                 test    eax, eax
.text:0040247F                 jnz     loc_401F30
.text:00402485                 jmp     loc_401BD5
.text:0040248A ; ---------------------------------------------------------------------------
.text:0040248A
.text:0040248A loc_40248A:                             ; CODE XREF: sub_401A10+17C↑j
.text:0040248A                 mov     ecx, 1
.text:0040248F                 jmp     loc_401B92
.text:00402494 ; ---------------------------------------------------------------------------
.text:00402494
.text:00402494 loc_402494:                             ; CODE XREF: sub_401A10+D4↑j
.text:00402494                                         ; sub_401A10+130↑j
.text:00402494                 mov     eax, [ebp+20h]
.text:00402497                 cmp     eax, [ebp+24h]
.text:0040249A                 jz      loc_401B70
.text:004024A0                 mov     [ebp+0], eax
.text:004024A3                 jmp     loc_401B70
.text:004024A8 ; ---------------------------------------------------------------------------
.text:004024A8
.text:004024A8 loc_4024A8:                             ; CODE XREF: sub_401A10+FE↑j
.text:004024A8                 mov     [ebp+20h], eax
.text:004024AB                 jmp     loc_401B30
.text:004024B0 ; ---------------------------------------------------------------------------
.text:004024B0
.text:004024B0 loc_4024B0:                             ; CODE XREF: sub_401A10+CA↑j
.text:004024B0                 mov     edx, [ebp+20h]
.text:004024B3                 mov     eax, [ebp+24h]
.text:004024B6                 cmp     edx, eax
.text:004024B8                 jz      short loc_402530
.text:004024BA                 cmp     eax, ebx
.text:004024BC                 jz      short loc_4024D1
.text:004024BE                 mov     [esp+5Ch+Str2], ebp
.text:004024C2                 mov     ebx, [esp+5Ch+arg_4]
.text:004024C6                 mov     [esp+5Ch+Str1], ebx
.text:004024C9                 call    sub_4026C0
.text:004024CE                 mov     ebx, [ebp+0]
.text:004024D1
.text:004024D1 loc_4024D1:                             ; CODE XREF: sub_401A10+AAC↑j
.text:004024D1                                         ; sub_401A10+B22↓j ...
.text:004024D1                 cmp     ebx, [esp+5Ch+arg_0]
.text:004024D5                 jge     short loc_402520
.text:004024D7                 mov     esi, [esp+5Ch+arg_4]
.text:004024DB                 mov     eax, [esi+ebx*4]
.text:004024DE                 cmp     byte ptr [eax], 2Dh ; '-'
.text:004024E1                 jz      short loc_402528
.text:004024E3                 lea     esi, [esi+0]
.text:004024E9                 lea     edi, [edi+0]
.text:004024F0
.text:004024F0 loc_4024F0:                             ; CODE XREF: sub_401A10+AFC↓j
.text:004024F0                                         ; sub_401A10+B1C↓j
.text:004024F0                 lea     eax, [ebx+1]
.text:004024F3                 mov     ebx, eax
.text:004024F5                 mov     [ebp+0], eax
.text:004024F8                 cmp     eax, [esp+5Ch+arg_0]
.text:004024FC                 jge     short loc_402520
.text:004024FE                 mov     edi, [esp+5Ch+arg_4]
.text:00402502                 mov     edx, [edi+eax*4]
.text:00402505                 cmp     byte ptr [edx], 2Dh ; '-'
.text:00402508                 jz      short loc_402510
.text:0040250A
.text:0040250A loc_40250A:                             ; CODE XREF: sub_401A10+B04↓j
.text:0040250A                 mov     ebx, eax
.text:0040250C                 jmp     short loc_4024F0
.text:0040250C ; ---------------------------------------------------------------------------
.text:0040250E                 align 10h
.text:00402510
.text:00402510 loc_402510:                             ; CODE XREF: sub_401A10+AF8↑j
.text:00402510                 cmp     byte ptr [edx+1], 0
.text:00402514                 jz      short loc_40250A
.text:00402516                 lea     esi, [esi+0]
.text:00402519                 lea     edi, [edi+0]
.text:00402520
.text:00402520 loc_402520:                             ; CODE XREF: sub_401A10+AC5↑j
.text:00402520                                         ; sub_401A10+AEC↑j ...
.text:00402520                 mov     [ebp+24h], ebx
.text:00402523                 jmp     loc_401AE0
.text:00402528 ; ---------------------------------------------------------------------------
.text:00402528
.text:00402528 loc_402528:                             ; CODE XREF: sub_401A10+AD1↑j
.text:00402528                 cmp     byte ptr [eax+1], 0
.text:0040252C                 jz      short loc_4024F0
.text:0040252E                 jmp     short loc_402520
.text:00402530 ; ---------------------------------------------------------------------------
.text:00402530
.text:00402530 loc_402530:                             ; CODE XREF: sub_401A10+AA8↑j
.text:00402530                 cmp     edx, ebx
.text:00402532                 jz      short loc_4024D1
.text:00402534                 mov     [ebp+20h], ebx
.text:00402537                 jmp     short loc_4024D1
.text:00402539 ; ---------------------------------------------------------------------------
.text:00402539
.text:00402539 loc_402539:                             ; CODE XREF: sub_401A10+88↑j
.text:00402539                 mov     dword ptr [ebp+18h], 0
.text:00402540                 mov     esi, [esp+5Ch+Str]
.text:00402544
.text:00402544 loc_402544:                             ; CODE XREF: sub_401A10+B49↓j
.text:00402544                 inc     esi
.text:00402545                 jmp     loc_401AA8
.text:00402545 ; ---------------------------------------------------------------------------
.text:0040254A                 align 10h
.text:00402550
.text:00402550 loc_402550:                             ; CODE XREF: sub_401A10+80↑j
.text:00402550                 mov     dword ptr [ebp+18h], 2
.text:00402557                 mov     esi, ecx
.text:00402559                 jmp     short loc_402544
.text:00402559 ; ---------------------------------------------------------------------------
.text:0040255B                 align 10h
.text:00402560
.text:00402560 loc_402560:                             ; CODE XREF: sub_401A10+69↑j
.text:00402560                 mov     [esp+5Ch+Str1], offset VarName ; "POSIXLY_CORRECT"
.text:00402567                 call    getenv
.text:0040256C                 test    eax, eax
.text:0040256E                 jz      loc_401A84
.text:00402574                 jmp     loc_401A7F
.text:00402574 ; ---------------------------------------------------------------------------
.text:00402579                 align 10h
.text:00402580
.text:00402580 loc_402580:                             ; CODE XREF: sub_401A10+3F↑j
.text:00402580                 mov     dword ptr [ebp+0], 1
.text:00402587                 mov     ebx, 1
.text:0040258C                 jmp     loc_401A60
.text:0040258C sub_401A10      endp
.text:0040258C
.text:00402591 ; ---------------------------------------------------------------------------
.text:00402591                 jmp     short sub_4025A0
.text:00402591 ; ---------------------------------------------------------------------------
.text:00402593                 align 10h
.text:004025A0
.text:004025A0 ; =============== S U B R O U T I N E =======================================
.text:004025A0
.text:004025A0
.text:004025A0 ; int __cdecl sub_4025A0(int, int, char *, int, int, int, int)
.text:004025A0 sub_4025A0      proc near               ; CODE XREF: .text:00402591↑j
.text:004025A0                                         ; sub_4028F0+3A↓p ...
.text:004025A0
.text:004025A0 var_2C          = dword ptr -2Ch
.text:004025A0 var_28          = dword ptr -28h
.text:004025A0 Str             = dword ptr -24h
.text:004025A0 var_20          = dword ptr -20h
.text:004025A0 var_1C          = dword ptr -1Ch
.text:004025A0 var_18          = dword ptr -18h
.text:004025A0 var_14          = dword ptr -14h
.text:004025A0 var_10          = dword ptr -10h
.text:004025A0 arg_0           = dword ptr  4
.text:004025A0 arg_4           = dword ptr  8
.text:004025A0 arg_8           = dword ptr  0Ch
.text:004025A0 arg_C           = dword ptr  10h
.text:004025A0 arg_10          = dword ptr  14h
.text:004025A0 arg_14          = dword ptr  18h
.text:004025A0 arg_18          = dword ptr  1Ch
.text:004025A0
.text:004025A0                 sub     esp, 2Ch
.text:004025A3                 mov     edx, dword_405010
.text:004025A9                 mov     [esp+2Ch+var_10], offset dword_406000 ; int
.text:004025B1                 mov     ecx, dword_405014
.text:004025B7                 mov     ds:dword_406000, edx
.text:004025BD                 mov     edx, [esp+2Ch+arg_18]
.text:004025C1                 mov     ds:dword_406004, ecx
.text:004025C7                 mov     ecx, [esp+2Ch+arg_14]
.text:004025CB                 mov     [esp+2Ch+var_14], edx ; int
.text:004025CF                 mov     edx, [esp+2Ch+arg_10]
.text:004025D3                 mov     [esp+2Ch+var_18], ecx ; int
.text:004025D7                 mov     ecx, [esp+2Ch+arg_C]
.text:004025DB                 mov     [esp+2Ch+var_1C], edx ; int
.text:004025DF                 mov     edx, [esp+2Ch+arg_8]
.text:004025E3                 mov     [esp+2Ch+var_20], ecx ; int
.text:004025E7                 mov     ecx, [esp+2Ch+arg_4]
.text:004025EB                 mov     [esp+2Ch+Str], edx ; Str
.text:004025EF                 mov     edx, [esp+2Ch+arg_0]
.text:004025F3                 mov     [esp+2Ch+var_28], ecx ; int
.text:004025F7                 mov     [esp+2Ch+var_2C], edx ; int
.text:004025FA                 call    sub_401A10
.text:004025FF                 mov     ecx, ds:dword_406000
.text:00402605                 mov     dword_405010, ecx
.text:0040260B                 mov     ecx, ds:dword_40600C
.text:00402611                 mov     ds:dword_4061B0, ecx
.text:00402617                 mov     ecx, ds:dword_406008
.text:0040261D                 mov     dword_405018, ecx
.text:00402623                 add     esp, 2Ch
.text:00402626                 retn
.text:00402626 sub_4025A0      endp
.text:00402626
.text:00402626 ; ---------------------------------------------------------------------------
.text:00402627                 align 10h
.text:00402630                 sub     esp, 2Ch
.text:00402633                 mov     edx, dword_405010
.text:00402639                 mov     dword ptr [esp+1Ch], offset dword_406000
.text:00402641                 mov     ecx, dword_405014
.text:00402647                 mov     dword ptr [esp+18h], 1
.text:0040264F                 mov     ds:dword_406000, edx
.text:00402655                 mov     edx, [esp+38h]
.text:00402659                 mov     ds:dword_406004, ecx
.text:0040265F                 mov     ecx, [esp+34h]
.text:00402663                 mov     [esp+8], edx
.text:00402667                 mov     edx, [esp+30h]
.text:0040266B                 mov     [esp+4], ecx
.text:0040266F                 mov     dword ptr [esp+14h], 0
.text:00402677                 mov     dword ptr [esp+10h], 0
.text:0040267F                 mov     dword ptr [esp+0Ch], 0
.text:00402687                 mov     [esp], edx
.text:0040268A                 call    sub_401A10
.text:0040268F                 mov     ecx, ds:dword_406000
.text:00402695                 mov     dword_405010, ecx
.text:0040269B                 mov     ecx, ds:dword_40600C
.text:004026A1                 mov     ds:dword_4061B0, ecx
.text:004026A7                 mov     ecx, ds:dword_406008
.text:004026AD                 mov     dword_405018, ecx
.text:004026B3                 add     esp, 2Ch
.text:004026B6                 retn
.text:004026B6 ; ---------------------------------------------------------------------------
.text:004026B7                 align 10h
.text:004026C0
.text:004026C0 ; =============== S U B R O U T I N E =======================================
.text:004026C0
.text:004026C0
.text:004026C0 sub_4026C0      proc near               ; CODE XREF: sub_401A10+113↑p
.text:004026C0                                         ; sub_401A10+AB9↑p
.text:004026C0
.text:004026C0 var_2C          = dword ptr -2Ch
.text:004026C0 var_28          = dword ptr -28h
.text:004026C0 var_24          = dword ptr -24h
.text:004026C0 var_20          = dword ptr -20h
.text:004026C0 var_1C          = dword ptr -1Ch
.text:004026C0 var_18          = dword ptr -18h
.text:004026C0 var_14          = dword ptr -14h
.text:004026C0 arg_0           = dword ptr  4
.text:004026C0 arg_4           = dword ptr  8
.text:004026C0
.text:004026C0                 push    ebp
.text:004026C1                 push    edi
.text:004026C2                 push    esi
.text:004026C3                 push    ebx
.text:004026C4                 sub     esp, 1Ch
.text:004026C7                 mov     ecx, [esp+2Ch+arg_4]
.text:004026CB                 mov     eax, [esp+2Ch+arg_4]
.text:004026CF                 mov     ebx, [esp+2Ch+arg_4]
.text:004026D3                 mov     edx, [ecx+20h]
.text:004026D6                 mov     edi, [esp+2Ch+arg_0]
.text:004026DA                 mov     ecx, [ebx]
.text:004026DC                 mov     [esp+2Ch+var_2C], edx
.text:004026DF                 mov     [esp+2Ch+var_14], edx
.text:004026E3                 mov     edx, [eax+24h]
.text:004026E6                 mov     [esp+2Ch+var_28], ecx
.text:004026EA                 mov     [esp+2Ch+var_1C], ecx
.text:004026EE                 cmp     ecx, edx
.text:004026F0                 mov     [esp+2Ch+var_18], edx
.text:004026F4                 jle     short loc_402770
.text:004026F6                 mov     esi, [esp+2Ch+var_2C]
.text:004026F9                 cmp     edx, esi
.text:004026FB                 jle     short loc_402770
.text:004026FD                 lea     esi, [esi+0]
.text:00402700
.text:00402700 loc_402700:                             ; CODE XREF: sub_4026C0+A1↓j
.text:00402700                 mov     ebx, [esp+2Ch+var_1C]
.text:00402704                 mov     edx, [esp+2Ch+var_18]
.text:00402708                 mov     ebp, [esp+2Ch+var_18]
.text:0040270C                 mov     eax, [esp+2Ch+var_14]
.text:00402710                 sub     ebx, edx
.text:00402712                 mov     [esp+2Ch+var_20], ebx
.text:00402716                 sub     ebp, eax
.text:00402718                 cmp     ebx, ebp
.text:0040271A                 jle     short loc_402795
.text:0040271C                 xor     esi, esi
.text:0040271E                 cmp     esi, ebp
.text:00402720                 jge     short loc_40274D
.text:00402722                 mov     ecx, [esp+2Ch+var_1C]
.text:00402726                 sub     ecx, ebp
.text:00402728                 mov     [esp+2Ch+var_24], ecx
.text:0040272C                 lea     esi, [esi+0]
.text:00402730
.text:00402730 loc_402730:                             ; CODE XREF: sub_4026C0+8B↓j
.text:00402730                 mov     ecx, [esp+2Ch+var_14]
.text:00402734                 mov     edx, [esp+2Ch+var_24]
.text:00402738                 add     ecx, esi
.text:0040273A                 add     edx, esi
.text:0040273C                 mov     ebx, [edi+ecx*4]
.text:0040273F                 mov     eax, [edi+edx*4]
.text:00402742                 inc     esi
.text:00402743                 cmp     esi, ebp
.text:00402745                 mov     [edi+ecx*4], eax
.text:00402748                 mov     [edi+edx*4], ebx
.text:0040274B                 jl      short loc_402730
.text:0040274D
.text:0040274D loc_40274D:                             ; CODE XREF: sub_4026C0+60↑j
.text:0040274D                 sub     [esp+2Ch+var_1C], ebp
.text:00402751
.text:00402751 loc_402751:                             ; CODE XREF: sub_4026C0+107↓j
.text:00402751                 mov     eax, [esp+2Ch+var_18]
.text:00402755                 cmp     [esp+2Ch+var_1C], eax
.text:00402759                 jle     short loc_402770
.text:0040275B                 mov     ebp, [esp+2Ch+var_14]
.text:0040275F                 cmp     eax, ebp
.text:00402761                 jg      short loc_402700
.text:00402763                 lea     esi, [esi+0]
.text:00402769                 lea     edi, [edi+0]
.text:00402770
.text:00402770 loc_402770:                             ; CODE XREF: sub_4026C0+34↑j
.text:00402770                                         ; sub_4026C0+3B↑j ...
.text:00402770                 mov     esi, [esp+2Ch+var_28]
.text:00402774                 mov     ecx, [esp+2Ch+var_18]
.text:00402778                 mov     eax, [esp+2Ch+var_2C]
.text:0040277B                 mov     edi, [esp+2Ch+arg_4]
.text:0040277F                 mov     edx, [esp+2Ch+var_28]
.text:00402783                 sub     esi, ecx
.text:00402785                 add     esi, eax
.text:00402787                 mov     [edi+20h], esi
.text:0040278A                 mov     [edi+24h], edx
.text:0040278D                 add     esp, 1Ch
.text:00402790                 pop     ebx
.text:00402791                 pop     esi
.text:00402792                 pop     edi
.text:00402793                 pop     ebp
.text:00402794                 retn
.text:00402795 ; ---------------------------------------------------------------------------
.text:00402795
.text:00402795 loc_402795:                             ; CODE XREF: sub_4026C0+5A↑j
.text:00402795                 xor     esi, esi
.text:00402797                 cmp     esi, [esp+2Ch+var_20]
.text:0040279B                 jge     short loc_4027BF
.text:0040279D                 lea     esi, [esi+0]
.text:004027A0
.text:004027A0 loc_4027A0:                             ; CODE XREF: sub_4026C0+FD↓j
.text:004027A0                 mov     ebx, [esp+2Ch+var_14]
.text:004027A4                 mov     ebp, [esp+2Ch+var_18]
.text:004027A8                 add     ebx, esi
.text:004027AA                 add     ebp, esi
.text:004027AC                 mov     edx, [edi+ebx*4]
.text:004027AF                 inc     esi
.text:004027B0                 cmp     esi, [esp+2Ch+var_20]
.text:004027B4                 mov     ecx, [edi+ebp*4]
.text:004027B7                 mov     [edi+ebx*4], ecx
.text:004027BA                 mov     [edi+ebp*4], edx
.text:004027BD                 jl      short loc_4027A0
.text:004027BF
.text:004027BF loc_4027BF:                             ; CODE XREF: sub_4026C0+DB↑j
.text:004027BF                 mov     esi, [esp+2Ch+var_20]
.text:004027C3                 add     [esp+2Ch+var_14], esi
.text:004027C7                 jmp     short loc_402751
.text:004027C7 sub_4026C0      endp
.text:004027C7
.text:004027C7 ; ---------------------------------------------------------------------------
.text:004027C9                 align 20h
.text:004027E0
.text:004027E0 ; =============== S U B R O U T I N E =======================================
.text:004027E0
.text:004027E0
.text:004027E0 sub_4027E0      proc near               ; CODE XREF: sub_401360+158↑p
.text:004027E0
.text:004027E0 arg_0           = dword ptr  4
.text:004027E0
.text:004027E0                 mov     ecx, [esp+arg_0]
.text:004027E4                 movzx   eax, byte ptr [ecx]
.text:004027E7                 test    al, al
.text:004027E9                 jz      short loc_4027F1
.text:004027EB                 cmp     byte ptr [ecx+1], 3Ah ; ':'
.text:004027EF                 jz      short loc_402837
.text:004027F1
.text:004027F1 loc_4027F1:                             ; CODE XREF: sub_4027E0+9↑j
.text:004027F1                                         ; sub_4027E0+5D↓j
.text:004027F1                 test    al, al
.text:004027F3                 mov     edx, ecx
.text:004027F5                 jz      short loc_402810
.text:004027F7                 movzx   eax, byte ptr [ecx]
.text:004027FA                 lea     esi, [esi+0]
.text:00402800
.text:00402800 loc_402800:                             ; CODE XREF: sub_4027E0+2E↓j
.text:00402800                 cmp     al, 2Fh ; '/'
.text:00402802                 jz      short loc_402813
.text:00402804                 cmp     al, 5Ch ; '\'
.text:00402806                 jz      short loc_402813
.text:00402808
.text:00402808 loc_402808:                             ; CODE XREF: sub_4027E0+45↓j
.text:00402808                 inc     edx
.text:00402809                 movzx   eax, byte ptr [edx]
.text:0040280C                 test    al, al
.text:0040280E                 jnz     short loc_402800
.text:00402810
.text:00402810 loc_402810:                             ; CODE XREF: sub_4027E0+15↑j
.text:00402810                                         ; sub_4027E0+50↓j ...
.text:00402810                 mov     eax, ecx
.text:00402812                 retn
.text:00402813 ; ---------------------------------------------------------------------------
.text:00402813
.text:00402813 loc_402813:                             ; CODE XREF: sub_4027E0+22↑j
.text:00402813                                         ; sub_4027E0+26↑j ...
.text:00402813                 inc     edx
.text:00402814                 movzx   eax, byte ptr [edx]
.text:00402817                 cmp     al, 2Fh ; '/'
.text:00402819                 jz      short loc_402813
.text:0040281B                 cmp     al, 5Ch ; '\'
.text:0040281D                 jz      short loc_402813
.text:0040281F                 test    al, al
.text:00402821                 jz      short loc_402827
.text:00402823                 mov     ecx, edx
.text:00402825                 jmp     short loc_402808
.text:00402827 ; ---------------------------------------------------------------------------
.text:00402827
.text:00402827 loc_402827:                             ; CODE XREF: sub_4027E0+41↑j
.text:00402827                 movzx   eax, byte ptr [ecx]
.text:0040282A                 cmp     al, 2Fh ; '/'
.text:0040282C                 jz      short loc_402832
.text:0040282E                 cmp     al, 5Ch ; '\'
.text:00402830                 jnz     short loc_402810
.text:00402832
.text:00402832 loc_402832:                             ; CODE XREF: sub_4027E0+4C↑j
.text:00402832                 lea     ecx, [edx-1]
.text:00402835                 jmp     short loc_402810
.text:00402837 ; ---------------------------------------------------------------------------
.text:00402837
.text:00402837 loc_402837:                             ; CODE XREF: sub_4027E0+F↑j
.text:00402837                 add     ecx, 2
.text:0040283A                 movzx   eax, byte ptr [ecx]
.text:0040283D                 jmp     short loc_4027F1
.text:0040283D sub_4027E0      endp
.text:0040283D
.text:0040283D ; ---------------------------------------------------------------------------
.text:0040283F                 align 10h
.text:00402840
.text:00402840 ; =============== S U B R O U T I N E =======================================
.text:00402840
.text:00402840
.text:00402840 ; int __cdecl sub_402840(char *)
.text:00402840 sub_402840      proc near               ; CODE XREF: sub_401360+162↑p
.text:00402840
.text:00402840 Str             = dword ptr -0Ch
.text:00402840 arg_0           = dword ptr  4
.text:00402840
.text:00402840                 push    ebx
.text:00402841                 sub     esp, 8
.text:00402844                 mov     ebx, [esp+0Ch+arg_0]
.text:00402848                 mov     [esp+0Ch+Str], ebx ; Str
.text:0040284B                 call    strlen
.text:00402850                 cmp     eax, 1
.text:00402853                 jbe     short loc_402870
.text:00402855                 movzx   edx, byte ptr [eax+ebx-1]
.text:0040285A                 cmp     dl, 2Fh ; '/'
.text:0040285D                 jz      short loc_402875
.text:0040285F                 cmp     dl, 5Ch ; '\'
.text:00402862                 jz      short loc_402875
.text:00402864                 lea     esi, [esi+0]
.text:0040286A                 lea     edi, [edi+0]
.text:00402870
.text:00402870 loc_402870:                             ; CODE XREF: sub_402840+13↑j
.text:00402870                                         ; sub_402840+39↓j ...
.text:00402870                 add     esp, 8
.text:00402873                 pop     ebx
.text:00402874                 retn
.text:00402875 ; ---------------------------------------------------------------------------
.text:00402875
.text:00402875 loc_402875:                             ; CODE XREF: sub_402840+1D↑j
.text:00402875                                         ; sub_402840+22↑j ...
.text:00402875                 dec     eax
.text:00402876                 cmp     eax, 1
.text:00402879                 jbe     short loc_402870
.text:0040287B                 movzx   edx, byte ptr [eax+ebx-1]
.text:00402880                 cmp     dl, 2Fh ; '/'
.text:00402883                 jz      short loc_402875
.text:00402885                 cmp     dl, 5Ch ; '\'
.text:00402888                 jz      short loc_402875
.text:0040288A                 jmp     short loc_402870
.text:0040288A sub_402840      endp
.text:0040288A
.text:0040288A ; ---------------------------------------------------------------------------
.text:0040288C                 align 10h
.text:00402890                 sub     esp, 0Ch
.text:00402893                 mov     edx, [esp+14h]
.text:00402897                 mov     dword ptr [esp+4], 5
.text:0040289F                 mov     [esp+8], edx
.text:004028A3                 mov     edx, [esp+10h]
.text:004028A7                 mov     [esp], edx
.text:004028AA                 call    sub_403A20
.text:004028AF                 add     esp, 0Ch
.text:004028B2                 retn
.text:004028B2 ; ---------------------------------------------------------------------------
.text:004028B3                 align 10h
.text:004028C0
.text:004028C0 ; =============== S U B R O U T I N E =======================================
.text:004028C0
.text:004028C0
.text:004028C0 ; int __cdecl sub_4028C0(char *)
.text:004028C0 sub_4028C0      proc near               ; CODE XREF: sub_401360+EA↑p
.text:004028C0
.text:004028C0 var_C           = dword ptr -0Ch
.text:004028C0 var_8           = dword ptr -8
.text:004028C0 var_4           = dword ptr -4
.text:004028C0 arg_0           = dword ptr  4
.text:004028C0
.text:004028C0                 sub     esp, 0Ch
.text:004028C3                 mov     edx, [esp+0Ch+arg_0]
.text:004028C7                 mov     [esp+0Ch+var_8], 5 ; int
.text:004028CF                 mov     [esp+0Ch+var_C], 0 ; int
.text:004028D6                 mov     [esp+0Ch+var_4], edx ; char *
.text:004028DA                 call    sub_403A20
.text:004028DF                 add     esp, 0Ch
.text:004028E2                 retn
.text:004028E2 sub_4028C0      endp
.text:004028E2
.text:004028E2 ; ---------------------------------------------------------------------------
.text:004028E3                 align 10h
.text:004028F0
.text:004028F0 ; =============== S U B R O U T I N E =======================================
.text:004028F0
.text:004028F0
.text:004028F0 ; int __cdecl sub_4028F0(int, int, char *, int, int)
.text:004028F0 sub_4028F0      proc near               ; CODE XREF: sub_401360+C3↑p
.text:004028F0                                         ; sub_402A90+58↓p
.text:004028F0
.text:004028F0 var_1C          = dword ptr -1Ch
.text:004028F0 var_18          = dword ptr -18h
.text:004028F0 var_14          = dword ptr -14h
.text:004028F0 var_10          = dword ptr -10h
.text:004028F0 var_C           = dword ptr -0Ch
.text:004028F0 var_8           = dword ptr -8
.text:004028F0 var_4           = dword ptr -4
.text:004028F0 arg_0           = dword ptr  4
.text:004028F0 arg_4           = dword ptr  8
.text:004028F0 arg_8           = dword ptr  0Ch
.text:004028F0 arg_C           = dword ptr  10h
.text:004028F0 arg_10          = dword ptr  14h
.text:004028F0
.text:004028F0                 sub     esp, 1Ch
.text:004028F3                 mov     edx, [esp+1Ch+arg_C]
.text:004028F7                 mov     [esp+1Ch+var_4], 0 ; int
.text:004028FF                 mov     ecx, [esp+1Ch+arg_10]
.text:00402903                 mov     [esp+1Ch+var_8], 0 ; int
.text:0040290B                 mov     [esp+1Ch+var_10], edx ; int
.text:0040290F                 mov     edx, [esp+1Ch+arg_4]
.text:00402913                 mov     [esp+1Ch+var_C], ecx ; int
.text:00402917                 mov     ecx, [esp+1Ch+arg_8]
.text:0040291B                 mov     [esp+1Ch+var_18], edx ; int
.text:0040291F                 mov     edx, [esp+1Ch+arg_0]
.text:00402923                 mov     [esp+1Ch+var_14], ecx ; char *
.text:00402927                 mov     [esp+1Ch+var_1C], edx ; int
.text:0040292A                 call    sub_4025A0
.text:0040292F                 add     esp, 1Ch
.text:00402932                 retn
.text:00402932 sub_4028F0      endp
.text:00402932
.text:00402932 ; ---------------------------------------------------------------------------
.text:00402933                 align 10h
.text:00402940                 sub     esp, 2Ch
.text:00402943                 mov     edx, [esp+44h]
.text:00402947                 mov     dword ptr [esp+18h], 0
.text:0040294F                 mov     ecx, [esp+40h]
.text:00402953                 mov     dword ptr [esp+14h], 0
.text:0040295B                 mov     [esp+1Ch], edx
.text:0040295F                 mov     edx, [esp+3Ch]
.text:00402963                 mov     [esp+10h], ecx
.text:00402967                 mov     ecx, [esp+38h]
.text:0040296B                 mov     [esp+0Ch], edx
.text:0040296F                 mov     edx, [esp+34h]
.text:00402973                 mov     [esp+8], ecx
.text:00402977                 mov     [esp+4], edx
.text:0040297B                 mov     edx, [esp+30h]
.text:0040297F                 mov     [esp], edx
.text:00402982                 call    sub_401A10
.text:00402987                 add     esp, 2Ch
.text:0040298A                 retn
.text:0040298A ; ---------------------------------------------------------------------------
.text:0040298B                 align 10h
.text:00402990                 sub     esp, 1Ch
.text:00402993                 mov     edx, [esp+2Ch]
.text:00402997                 mov     dword ptr [esp+18h], 0
.text:0040299F                 mov     ecx, [esp+30h]
.text:004029A3                 mov     dword ptr [esp+14h], 1
.text:004029AB                 mov     [esp+0Ch], edx
.text:004029AF                 mov     edx, [esp+24h]
.text:004029B3                 mov     [esp+10h], ecx
.text:004029B7                 mov     ecx, [esp+28h]
.text:004029BB                 mov     [esp+4], edx
.text:004029BF                 mov     edx, [esp+20h]
.text:004029C3                 mov     [esp+8], ecx
.text:004029C7                 mov     [esp], edx
.text:004029CA                 call    sub_4025A0
.text:004029CF                 add     esp, 1Ch
.text:004029D2                 retn
.text:004029D2 ; ---------------------------------------------------------------------------
.text:004029D3                 align 10h
.text:004029E0                 sub     esp, 2Ch
.text:004029E3                 mov     edx, [esp+44h]
.text:004029E7                 mov     dword ptr [esp+18h], 0
.text:004029EF                 mov     ecx, [esp+40h]
.text:004029F3                 mov     dword ptr [esp+14h], 1
.text:004029FB                 mov     [esp+1Ch], edx
.text:004029FF                 mov     edx, [esp+3Ch]
.text:00402A03                 mov     [esp+10h], ecx
.text:00402A07                 mov     ecx, [esp+38h]
.text:00402A0B                 mov     [esp+0Ch], edx
.text:00402A0F                 mov     edx, [esp+34h]
.text:00402A13                 mov     [esp+8], ecx
.text:00402A17                 mov     [esp+4], edx
.text:00402A1B                 mov     edx, [esp+30h]
.text:00402A1F                 mov     [esp], edx
.text:00402A22                 call    sub_401A10
.text:00402A27                 add     esp, 2Ch
.text:00402A2A                 retn
.text:00402A2A ; ---------------------------------------------------------------------------
.text:00402A2B                 align 10h
.text:00402A30 aHelp           db 'help',0             ; DATA XREF: .text:off_402A50↓o
.text:00402A35 aVersion        db 'version',0          ; DATA XREF: .text:00402A60↓o
.text:00402A3D                 db 13h dup(90h)
.text:00402A50 off_402A50      dd offset aHelp         ; DATA XREF: sub_402A90+3D↓o
.text:00402A50                                         ; "help"
.text:00402A54                 dd 2 dup(0)
.text:00402A5C                 dd 68h
.text:00402A60                 dd offset aVersion      ; "version"
.text:00402A64                 dd 2 dup(0)
.text:00402A6C                 dd 76h, 4 dup(0)
.text:00402A80 ; ---------------------------------------------------------------------------
.text:00402A80
.text:00402A80 loc_402A80:                             ; DATA XREF: sub_402A90+45↓o
.text:00402A80                 sub     eax, [eax]
.text:00402A82                 lea     esi, [esi+0]
.text:00402A89                 lea     edi, [edi+0]
.text:00402A90
.text:00402A90 ; =============== S U B R O U T I N E =======================================
.text:00402A90
.text:00402A90
.text:00402A90 ; int __cdecl sub_402A90(int, int, FILE *, int, int, int, char)
.text:00402A90 sub_402A90      proc near               ; CODE XREF: sub_401360+9F↑p
.text:00402A90
.text:00402A90 Code            = dword ptr -1Ch
.text:00402A90 var_18          = dword ptr -18h
.text:00402A90 var_14          = dword ptr -14h
.text:00402A90 var_10          = dword ptr -10h
.text:00402A90 var_C           = dword ptr -0Ch
.text:00402A90 var_4           = dword ptr -4
.text:00402A90 arg_0           = dword ptr  4
.text:00402A90 arg_4           = dword ptr  8
.text:00402A90 arg_8           = dword ptr  0Ch
.text:00402A90 arg_C           = dword ptr  10h
.text:00402A90 arg_10          = dword ptr  14h
.text:00402A90 arg_14          = dword ptr  18h
.text:00402A90 arg_18          = byte ptr  1Ch
.text:00402A90
.text:00402A90                 sub     esp, 1Ch
.text:00402A93                 xor     eax, eax
.text:00402A95                 cmp     [esp+1Ch+arg_0], 2
.text:00402A9A                 mov     [esp+1Ch+var_4], ebx
.text:00402A9E                 mov     ebx, dword_405014
.text:00402AA4                 mov     dword_405014, eax
.text:00402AA9                 jz      short loc_402AC1
.text:00402AAB
.text:00402AAB loc_402AAB:                             ; CODE XREF: sub_402A90+60↓j
.text:00402AAB                                         ; sub_402A90+6A↓j
.text:00402AAB                 mov     dword_405014, ebx
.text:00402AB1                 xor     edx, edx
.text:00402AB3                 mov     ebx, [esp+1Ch+var_4]
.text:00402AB7                 mov     dword_405010, edx
.text:00402ABD                 add     esp, 1Ch
.text:00402AC0                 retn
.text:00402AC1 ; ---------------------------------------------------------------------------
.text:00402AC1
.text:00402AC1 loc_402AC1:                             ; CODE XREF: sub_402A90+19↑j
.text:00402AC1                 mov     [esp+1Ch+var_C], 0 ; int
.text:00402AC9                 mov     edx, [esp+1Ch+arg_4]
.text:00402ACD                 mov     [esp+1Ch+var_10], offset off_402A50 ; int
.text:00402AD5                 mov     [esp+1Ch+var_14], offset loc_402A80 ; char *
.text:00402ADD                 mov     [esp+1Ch+var_18], edx ; int
.text:00402AE1                 mov     [esp+1Ch+Code], 2 ; int
.text:00402AE8                 call    sub_4028F0
.text:00402AED                 cmp     eax, 0FFFFFFFFh
.text:00402AF0                 jz      short loc_402AAB
.text:00402AF2                 cmp     eax, 68h ; 'h'
.text:00402AF5                 jz      short loc_402AFE
.text:00402AF7                 cmp     eax, 76h ; 'v'
.text:00402AFA                 jnz     short loc_402AAB
.text:00402AFC                 jmp     short loc_402B09
.text:00402AFE ; ---------------------------------------------------------------------------
.text:00402AFE
.text:00402AFE loc_402AFE:                             ; CODE XREF: sub_402A90+65↑j
.text:00402AFE                 mov     [esp+1Ch+Code], 0
.text:00402B05                 call    [esp+1Ch+arg_14]
.text:00402B09
.text:00402B09 loc_402B09:                             ; CODE XREF: sub_402A90+6C↑j
.text:00402B09                 mov     ecx, [esp+1Ch+arg_10]
.text:00402B0D                 lea     ebx, [esp+1Ch+arg_18]
.text:00402B11                 mov     edx, [esp+1Ch+arg_C]
.text:00402B15                 mov     [esp+1Ch+var_C], ebx ; va_list
.text:00402B19                 mov     ebx, [esp+1Ch+arg_8]
.text:00402B1D                 mov     [esp+1Ch+var_10], ecx ; int
.text:00402B21                 mov     ecx, ds:_iob
.text:00402B27                 mov     [esp+1Ch+var_14], edx ; int
.text:00402B2B                 mov     [esp+1Ch+var_18], ebx ; FILE *
.text:00402B2F                 add     ecx, 20h ; ' '
.text:00402B32                 mov     [esp+1Ch+Code], ecx ; FILE *
.text:00402B35                 call    sub_4042F0
.text:00402B3A                 mov     [esp+1Ch+Code], 0 ; Code
.text:00402B41                 call    exit
.text:00402B41 sub_402A90      endp
.text:00402B41
.text:00402B41 ; ---------------------------------------------------------------------------
.text:00402B46                 align 10h
.text:00402B50                 mov     edx, [esp+4]
.text:00402B54                 mov     ds:dword_406030, edx
.text:00402B5A                 retn
.text:00402B5A ; ---------------------------------------------------------------------------
.text:00402B5B aWriteError     db 'write error',0      ; DATA XREF: sub_402B80:loc_402BC9↓o
.text:00402B67 ; const char aSS[]
.text:00402B67 aSS             db '%s: %s',0           ; DATA XREF: sub_402B80+77↓o
.text:00402B6E ; const char aS_2[]
.text:00402B6E aS_2            db '%s',0               ; DATA XREF: sub_402B80+A0↓o
.text:00402B71 ; ---------------------------------------------------------------------------
.text:00402B71                 jmp     short sub_402B80
.text:00402B71 ; ---------------------------------------------------------------------------
.text:00402B73                 align 10h
.text:00402B80
.text:00402B80 ; =============== S U B R O U T I N E =======================================
.text:00402B80
.text:00402B80
.text:00402B80 ; void __cdecl sub_402B80()
.text:00402B80 sub_402B80      proc near               ; CODE XREF: .text:00402B71↑j
.text:00402B80                                         ; DATA XREF: sub_401360+5C↑o
.text:00402B80
.text:00402B80 Stream          = dword ptr -2Ch
.text:00402B80 ErrorMessage    = dword ptr -28h
.text:00402B80 var_24          = dword ptr -24h
.text:00402B80 var_20          = byte ptr -20h
.text:00402B80 var_1C          = dword ptr -1Ch
.text:00402B80 var_9           = byte ptr -9
.text:00402B80
.text:00402B80                 push    esi
.text:00402B81                 push    ebx
.text:00402B82                 sub     esp, 24h
.text:00402B85                 mov     edx, ds:_iob
.text:00402B8B                 mov     ecx, [edx+2Ch]
.text:00402B8E                 lea     esi, [edx+20h]
.text:00402B91                 shr     ecx, 5
.text:00402B94                 mov     bl, cl
.text:00402B96                 mov     ecx, [edx+20h]
.text:00402B99                 and     bl, 1
.text:00402B9C                 cmp     ecx, [esi+8]
.text:00402B9F                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00402BA2                 setz    [esp+2Ch+var_9]
.text:00402BA7                 call    fclose
.text:00402BAC                 test    eax, eax
.text:00402BAE                 setnz   al
.text:00402BB1                 test    bl, bl
.text:00402BB3                 jnz     loc_402C43
.text:00402BB9                 test    al, al
.text:00402BBB                 jz      short loc_402C10
.text:00402BBD
.text:00402BBD loc_402BBD:                             ; CODE XREF: sub_402B80+CD↓j
.text:00402BBD                 call    _errno
.text:00402BC2                 mov     esi, [eax]
.text:00402BC4
.text:00402BC4 loc_402BC4:                             ; CODE XREF: sub_402B80+C7↓j
.text:00402BC4                 cmp     esi, 9
.text:00402BC7                 jz      short loc_402C36
.text:00402BC9
.text:00402BC9 loc_402BC9:                             ; CODE XREF: sub_402B80+B8↓j
.text:00402BC9                                         ; sub_402B80+C1↓j
.text:00402BC9                 mov     [esp+2Ch+Stream], offset aWriteError ; "write error"
.text:00402BD0                 call    ds:libintl_gettext
.text:00402BD6                 mov     ebx, eax
.text:00402BD8                 mov     eax, ds:dword_406030
.text:00402BDD                 test    eax, eax
.text:00402BDF                 jz      short loc_402C16
.text:00402BE1                 mov     [esp+2Ch+Stream], eax ; char *
.text:00402BE4                 call    sub_403D90
.text:00402BE9                 mov     dword ptr [esp+2Ch+var_20], eax ; char
.text:00402BED                 mov     edx, Code
.text:00402BF3                 mov     [esp+2Ch+var_1C], ebx
.text:00402BF7                 mov     [esp+2Ch+var_24], offset aSS ; "%s: %s"
.text:00402BFF                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:00402C03                 mov     [esp+2Ch+Stream], edx ; Code
.text:00402C06                 call    sub_404880
.text:00402C0B                 nop
.text:00402C0C                 lea     esi, [esi+0]
.text:00402C10
.text:00402C10 loc_402C10:                             ; CODE XREF: sub_402B80+3B↑j
.text:00402C10                                         ; sub_402B80+B4↓j ...
.text:00402C10                 add     esp, 24h
.text:00402C13                 pop     ebx
.text:00402C14                 pop     esi
.text:00402C15                 retn
.text:00402C16 ; ---------------------------------------------------------------------------
.text:00402C16
.text:00402C16 loc_402C16:                             ; CODE XREF: sub_402B80+5F↑j
.text:00402C16                 mov     dword ptr [esp+2Ch+var_20], ebx ; char
.text:00402C1A                 mov     ebx, Code
.text:00402C20                 mov     [esp+2Ch+var_24], offset aS_2 ; "%s"
.text:00402C28                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:00402C2C                 mov     [esp+2Ch+Stream], ebx ; Code
.text:00402C2F                 call    sub_404880
.text:00402C34                 jmp     short loc_402C10
.text:00402C36 ; ---------------------------------------------------------------------------
.text:00402C36
.text:00402C36 loc_402C36:                             ; CODE XREF: sub_402B80+47↑j
.text:00402C36                 test    bl, bl
.text:00402C38                 jnz     short loc_402BC9
.text:00402C3A                 cmp     [esp+2Ch+var_9], 0
.text:00402C3F                 jnz     short loc_402C10
.text:00402C41                 jmp     short loc_402BC9
.text:00402C43 ; ---------------------------------------------------------------------------
.text:00402C43
.text:00402C43 loc_402C43:                             ; CODE XREF: sub_402B80+33↑j
.text:00402C43                 xor     esi, esi
.text:00402C45                 test    al, al
.text:00402C47                 jz      loc_402BC4
.text:00402C4D                 jmp     loc_402BBD
.text:00402C4D sub_402B80      endp
.text:00402C4D
.text:00402C4D ; ---------------------------------------------------------------------------
.text:00402C52                 align 10h
.text:00402C60 aLiteral        db 'literal',0          ; DATA XREF: .text:00402CA0↓o
.text:00402C68 aShell          db 'shell',0            ; DATA XREF: .text:00402CA4↓o
.text:00402C6E aShellAlways    db 'shell-always',0     ; DATA XREF: .text:00402CA8↓o
.text:00402C7B aC              db 'c',0                ; DATA XREF: .text:00402CAC↓o
.text:00402C7D aEscape         db 'escape',0           ; DATA XREF: .text:00402CB0↓o
.text:00402C84 aLocale         db 'locale',0           ; DATA XREF: .text:00402CB4↓o
.text:00402C8B aClocale        db 'clocale',0          ; DATA XREF: .text:00402CB8↓o
.text:00402C93                 align 10h
.text:00402CA0                 dd offset aLiteral      ; "literal"
.text:00402CA4                 dd offset aShell        ; "shell"
.text:00402CA8                 dd offset aShellAlways  ; "shell-always"
.text:00402CAC                 dd offset aC            ; "c"
.text:00402CB0                 dd offset aEscape       ; "escape"
.text:00402CB4                 dd offset aLocale       ; "locale"
.text:00402CB8                 dd offset aClocale      ; "clocale"
.text:00402CBC                 dd 2 dup(0)
.text:00402CC4                 dd 1, 2, 3, 4, 5, 6
.text:00402CDC asc_402CDC:                             ; DATA XREF: sub_402CF0+7E↓o
.text:00402CDC                                         ; sub_402CF0+A39↓o ...
.text:00402CDC                 text "UTF-16LE", '"',27h,'`'
.text:00402CE2                 align 10h
.text:00402CF0
.text:00402CF0 ; =============== S U B R O U T I N E =======================================
.text:00402CF0
.text:00402CF0
.text:00402CF0 ; int __cdecl sub_402CF0(int, int, char *Str, int, int, int)
.text:00402CF0 sub_402CF0      proc near               ; CODE XREF: sub_402CF0+43A↓p
.text:00402CF0                                         ; .text:004038B3↓p ...
.text:00402CF0
.text:00402CF0 C               = dword ptr -4Ch
.text:00402CF0 Type            = dword ptr -48h
.text:00402CF0 SizeInBytes     = dword ptr -44h
.text:00402CF0 State           = dword ptr -40h
.text:00402CF0 var_3C          = dword ptr -3Ch
.text:00402CF0 var_38          = dword ptr -38h
.text:00402CF0 var_34          = dword ptr -34h
.text:00402CF0 var_30          = dword ptr -30h
.text:00402CF0 var_29          = byte ptr -29h
.text:00402CF0 var_28          = dword ptr -28h
.text:00402CF0 var_22          = byte ptr -22h
.text:00402CF0 var_21          = byte ptr -21h
.text:00402CF0 var_20          = dword ptr -20h
.text:00402CF0 var_1C          = dword ptr -1Ch
.text:00402CF0 var_18          = mbstate_t ptr -18h
.text:00402CF0 arg_0           = dword ptr  4
.text:00402CF0 arg_4           = dword ptr  8
.text:00402CF0 Str             = dword ptr  0Ch
.text:00402CF0 arg_C           = dword ptr  10h
.text:00402CF0 arg_10          = dword ptr  14h
.text:00402CF0 arg_14          = dword ptr  18h
.text:00402CF0
.text:00402CF0                 push    ebp
.text:00402CF1                 push    edi
.text:00402CF2                 push    esi
.text:00402CF3                 push    ebx
.text:00402CF4                 sub     esp, 3Ch
.text:00402CF7                 mov     edx, ds:__mb_cur_max
.text:00402CFD                 mov     [esp+4Ch+var_34], 0
.text:00402D05                 mov     [esp+4Ch+var_1C], 0
.text:00402D0D                 cmp     dword ptr [edx], 1
.text:00402D10                 mov     [esp+4Ch+var_20], 0
.text:00402D18                 mov     [esp+4Ch+var_21], 0
.text:00402D1D                 setz    [esp+4Ch+var_22]
.text:00402D22                 cmp     [esp+4Ch+arg_10], 6 ; switch 7 cases
.text:00402D27                 ja      short def_402D2D ; jumptable 00402D2D default case, cases 0,1
.text:00402D29                 mov     edx, [esp+4Ch+arg_10]
.text:00402D2D                 jmp     ds:jpt_402D2D[edx*4] ; switch jump
.text:00402D2D ; ---------------------------------------------------------------------------
.text:00402D34 jpt_402D2D      dd offset def_402D2D    ; DATA XREF: sub_402CF0+3D↑r
.text:00402D34                 dd offset def_402D2D    ; jump table for switch statement
.text:00402D34                 dd offset loc_403675
.text:00402D34                 dd offset loc_402D50
.text:00402D34                 dd offset loc_40369B
.text:00402D34                 dd offset loc_4036A5
.text:00402D34                 dd offset loc_4036A5
.text:00402D50 ; ---------------------------------------------------------------------------
.text:00402D50
.text:00402D50 loc_402D50:                             ; CODE XREF: sub_402CF0+3D↑j
.text:00402D50                                         ; DATA XREF: sub_402CF0:jpt_402D2D↑o
.text:00402D50                 mov     eax, [esp+4Ch+arg_4] ; jumptable 00402D2D case 3
.text:00402D54                 cmp     [esp+4Ch+var_34], eax
.text:00402D58                 jnb     short loc_402D61
.text:00402D5A                 mov     ebx, [esp+4Ch+arg_0]
.text:00402D5E                 mov     byte ptr [ebx], 22h ; '"'
.text:00402D61
.text:00402D61 loc_402D61:                             ; CODE XREF: sub_402CF0+68↑j
.text:00402D61                 mov     [esp+4Ch+var_34], 1
.text:00402D69                 mov     [esp+4Ch+var_21], 1
.text:00402D6E                 mov     [esp+4Ch+var_1C], offset asc_402CDC ; "\"'`"
.text:00402D76
.text:00402D76 loc_402D76:                             ; CODE XREF: sub_402CF0+9A6↓j
.text:00402D76                 mov     [esp+4Ch+var_20], 1
.text:00402D7E
.text:00402D7E def_402D2D:                             ; CODE XREF: sub_402CF0+37↑j
.text:00402D7E                                         ; sub_402CF0+3D↑j ...
.text:00402D7E                 xor     ebp, ebp        ; jumptable 00402D2D default case, cases 0,1
.text:00402D80
.text:00402D80 loc_402D80:                             ; CODE XREF: sub_402CF0+3DB↓j
.text:00402D80                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00402D85                 jz      loc_403667
.text:00402D8B                 cmp     ebp, [esp+4Ch+arg_C]
.text:00402D8F
.text:00402D8F loc_402D8F:                             ; CODE XREF: sub_402CF0+980↓j
.text:00402D8F                 jz      loc_4035FE
.text:00402D95                 cmp     [esp+4Ch+var_21], 0
.text:00402D9A                 jz      short loc_402DE0
.text:00402D9C                 mov     esi, [esp+4Ch+var_20]
.text:00402DA0                 test    esi, esi
.text:00402DA2                 jz      short loc_402DE0
.text:00402DA4                 mov     ecx, [esp+4Ch+var_20]
.text:00402DA8                 lea     edi, [ecx+ebp]
.text:00402DAB                 cmp     edi, [esp+4Ch+arg_C]
.text:00402DAF                 ja      short loc_402DE0
.text:00402DB1                 cld
.text:00402DB2                 mov     ebx, [esp+4Ch+Str]
.text:00402DB6                 mov     edi, [esp+4Ch+var_1C]
.text:00402DBA                 add     ebx, ebp
.text:00402DBC                 mov     esi, ebx
.text:00402DBE                 cmp     ecx, ecx
.text:00402DC0                 repe cmpsb
.text:00402DC2                 jnz     short loc_402DE0
.text:00402DC4                 mov     edx, [esp+4Ch+arg_4]
.text:00402DC8                 cmp     [esp+4Ch+var_34], edx
.text:00402DCC                 jnb     short loc_402DDA
.text:00402DCE                 mov     ecx, [esp+4Ch+arg_0]
.text:00402DD2                 mov     eax, [esp+4Ch+var_34]
.text:00402DD6                 mov     byte ptr [eax+ecx], 5Ch ; '\'
.text:00402DDA
.text:00402DDA loc_402DDA:                             ; CODE XREF: sub_402CF0+DC↑j
.text:00402DDA                 inc     [esp+4Ch+var_34]
.text:00402DDE                 mov     esi, esi
.text:00402DE0
.text:00402DE0 loc_402DE0:                             ; CODE XREF: sub_402CF0+AA↑j
.text:00402DE0                                         ; sub_402CF0+B2↑j ...
.text:00402DE0                 mov     edi, [esp+4Ch+Str]
.text:00402DE4                 movzx   ebx, byte ptr [ebp+edi+0]
.text:00402DE9                 movzx   eax, bl
.text:00402DEC                 cmp     eax, 7Eh        ; switch 127 cases
.text:00402DEF                 ja      def_402DF5      ; jumptable 00402DF5 default case, cases 1-6,14-31,64
.text:00402DF5                 jmp     ds:jpt_402DF5[eax*4] ; switch jump
.text:00402DF5 ; ---------------------------------------------------------------------------
.text:00402DFC jpt_402DF5      dd offset loc_402FF8, offset def_402DF5, offset def_402DF5
.text:00402DFC                                         ; DATA XREF: sub_402CF0+105↑r
.text:00402DFC                 dd offset def_402DF5, offset def_402DF5, offset def_402DF5 ; jump table for switch statement
.text:00402DFC                 dd offset def_402DF5, offset loc_4030D0, offset loc_4030EE
.text:00402DFC                 dd offset loc_4030F2, offset loc_403137, offset loc_40313B
.text:00402DFC                 dd offset loc_40313F, offset loc_403143, offset def_402DF5
.text:00402DFC                 dd offset def_402DF5, offset def_402DF5, offset def_402DF5
.text:00402DFC                 dd offset def_402DF5, offset def_402DF5, offset def_402DF5
.text:00402DFC                 dd offset def_402DF5, offset def_402DF5, offset def_402DF5
.text:00402DFC                 dd offset def_402DF5, offset def_402DF5, offset def_402DF5
.text:00402DFC                 dd offset def_402DF5, offset def_402DF5, offset def_402DF5
.text:00402DFC                 dd offset def_402DF5, offset def_402DF5, offset loc_4035C8
.text:00402DFC                 dd offset loc_4035C8, offset loc_4035C8, offset loc_4035EA
.text:00402DFC                 dd offset loc_4035C8, offset def_4031F2, offset loc_4035C8
.text:00402DFC                 dd offset loc_403147, offset loc_4035C8, offset loc_4035C8
.text:00402DFC                 dd offset loc_4035C8, offset def_4031F2, offset def_4031F2
.text:00402DFC                 dd offset def_4031F2, offset def_4031F2, offset def_4031F2
.text:00402DFC                 dd offset def_4031F2, offset def_4031F2, offset def_4031F2
.text:00402DFC                 dd offset def_4031F2, offset def_4031F2, offset def_4031F2
.text:00402DFC                 dd offset def_4031F2, offset def_4031F2, offset def_4031F2
.text:00402DFC                 dd offset def_4031F2, offset def_4031F2, offset loc_4035C8
.text:00402DFC                 dd offset loc_4035C8, offset loc_4035C8, offset loc_4035C8
.text:00402DFC                 dd offset loc_4031AC, offset def_402DF5, offset def_4031F2
.text:00402DFC                 dd offset def_4031F2, offset def_4031F2, offset def_4031F2
.text:00402DFC                 dd offset def_4031F2, offset def_4031F2, offset def_4031F2
.text:00402DFC                 dd offset def_4031F2, offset def_4031F2, offset def_4031F2
.text:00402DFC                 dd offset def_4031F2, offset def_4031F2, offset def_4031F2
.text:00402DFC                 dd offset def_4031F2, offset def_4031F2, offset def_4031F2
.text:00402DFC                 dd offset def_4031F2, offset def_4031F2, offset def_4031F2
.text:00402DFC                 dd offset def_4031F2, offset def_4031F2, offset def_4031F2
.text:00402DFC                 dd offset def_4031F2, offset def_4031F2, offset def_4031F2
.text:00402DFC                 dd offset def_4031F2, offset loc_4035C8, offset loc_4035C1
.text:00402DFC                 dd offset def_4031F2, offset loc_4035C8, offset def_4031F2
.text:00402DFC                 dd offset loc_4035C8, offset def_4031F2, offset def_4031F2
.text:00402DFC                 dd offset def_4031F2, offset def_4031F2, offset def_4031F2
.text:00402DFC                 dd offset def_4031F2, offset def_4031F2, offset def_4031F2
.text:00402DFC                 dd offset def_4031F2, offset def_4031F2, offset def_4031F2
.text:00402DFC                 dd offset def_4031F2, offset def_4031F2, offset def_4031F2
.text:00402DFC                 dd offset def_4031F2, offset def_4031F2, offset def_4031F2
.text:00402DFC                 dd offset def_4031F2, offset def_4031F2, offset def_4031F2
.text:00402DFC                 dd offset def_4031F2, offset def_4031F2, offset def_4031F2
.text:00402DFC                 dd offset def_4031F2, offset def_4031F2, offset def_4031F2
.text:00402DFC                 dd offset loc_4035D8, offset loc_4035C8, offset loc_4035D8
.text:00402DFC                 dd offset loc_4035EA
.text:00402FF8 ; ---------------------------------------------------------------------------
.text:00402FF8
.text:00402FF8 loc_402FF8:                             ; CODE XREF: sub_402CF0+105↑j
.text:00402FF8                                         ; DATA XREF: sub_402CF0:jpt_402DF5↑o
.text:00402FF8                 cmp     [esp+4Ch+var_21], 0 ; jumptable 00402DF5 case 0
.text:00402FFD                 lea     eax, [ebp+1]
.text:00403000                 jz      loc_4030B0
.text:00403006                 mov     esi, [esp+4Ch+arg_4]
.text:0040300A                 cmp     [esp+4Ch+var_34], esi
.text:0040300E                 jnb     short loc_40301C
.text:00403010                 mov     eax, [esp+4Ch+arg_0]
.text:00403014                 mov     ebx, [esp+4Ch+var_34]
.text:00403018                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:0040301C
.text:0040301C loc_40301C:                             ; CODE XREF: sub_402CF0+31E↑j
.text:0040301C                 inc     [esp+4Ch+var_34]
.text:00403020                 mov     edx, [esp+4Ch+arg_4]
.text:00403024                 cmp     [esp+4Ch+var_34], edx
.text:00403028                 jnb     short loc_403036
.text:0040302A                 mov     edi, [esp+4Ch+arg_0]
.text:0040302E                 mov     ecx, [esp+4Ch+var_34]
.text:00403032                 mov     byte ptr [ecx+edi], 30h ; '0'
.text:00403036
.text:00403036 loc_403036:                             ; CODE XREF: sub_402CF0+338↑j
.text:00403036                 inc     [esp+4Ch+var_34]
.text:0040303A                 mov     esi, [esp+4Ch+arg_4]
.text:0040303E                 cmp     [esp+4Ch+var_34], esi
.text:00403042                 jnb     short loc_403050
.text:00403044                 mov     ebx, [esp+4Ch+arg_0]
.text:00403048                 mov     eax, [esp+4Ch+var_34]
.text:0040304C                 mov     byte ptr [eax+ebx], 30h ; '0'
.text:00403050
.text:00403050 loc_403050:                             ; CODE XREF: sub_402CF0+352↑j
.text:00403050                 inc     [esp+4Ch+var_34]
.text:00403054                 mov     bl, 30h ; '0'
.text:00403056                 lea     esi, [esi+0]
.text:00403059                 lea     edi, [edi+0]
.text:00403060
.text:00403060 def_4031F2:                             ; CODE XREF: sub_402CF0+105↑j
.text:00403060                                         ; sub_402CF0+463↓j ...
.text:00403060                 cmp     [esp+4Ch+var_21], 0 ; jumptable 00402DF5 cases 37,43-58,65-90,93,95,97-122
.text:00403060                                         ; jumptable 004031F2 default case, cases 34-38,42-44,46,48-59
.text:00403065                 lea     eax, [ebp+1]
.text:00403068                 jz      short loc_4030B0
.text:0040306A                 mov     cl, bl
.text:0040306C                 mov     edi, [esp+4Ch+arg_14]
.text:00403070                 mov     esi, 1
.text:00403075                 shr     cl, 5
.text:00403078                 movzx   edx, cl
.text:0040307B                 mov     ecx, ebx
.text:0040307D                 and     ecx, 1Fh
.text:00403080                 shl     esi, cl
.text:00403082                 test    [edi+edx*4+4], esi
.text:00403086                 jz      short loc_4030A2
.text:00403088
.text:00403088 loc_403088:                             ; CODE XREF: sub_402CF0+3FC↓j
.text:00403088                 mov     edx, [esp+4Ch+arg_4]
.text:0040308C                 cmp     [esp+4Ch+var_34], edx
.text:00403090                 jnb     short loc_40309E
.text:00403092                 mov     edi, [esp+4Ch+arg_0]
.text:00403096                 mov     esi, [esp+4Ch+var_34]
.text:0040309A                 mov     byte ptr [esi+edi], 5Ch ; '\'
.text:0040309E
.text:0040309E loc_40309E:                             ; CODE XREF: sub_402CF0+3A0↑j
.text:0040309E                 inc     [esp+4Ch+var_34]
.text:004030A2
.text:004030A2 loc_4030A2:                             ; CODE XREF: sub_402CF0+396↑j
.text:004030A2                 lea     eax, [ebp+1]
.text:004030A5                 lea     esi, [esi+0]
.text:004030A9                 lea     edi, [edi+0]
.text:004030B0
.text:004030B0 loc_4030B0:                             ; CODE XREF: sub_402CF0+310↑j
.text:004030B0                                         ; sub_402CF0+378↑j ...
.text:004030B0                 mov     ebp, [esp+4Ch+arg_4]
.text:004030B4                 cmp     [esp+4Ch+var_34], ebp
.text:004030B8                 jnb     short loc_4030C5
.text:004030BA                 mov     edx, [esp+4Ch+arg_0]
.text:004030BE                 mov     ecx, [esp+4Ch+var_34]
.text:004030C2                 mov     [ecx+edx], bl
.text:004030C5
.text:004030C5 loc_4030C5:                             ; CODE XREF: sub_402CF0+3C8↑j
.text:004030C5                 inc     [esp+4Ch+var_34]
.text:004030C9                 mov     ebp, eax
.text:004030CB                 jmp     loc_402D80
.text:004030D0 ; ---------------------------------------------------------------------------
.text:004030D0
.text:004030D0 loc_4030D0:                             ; CODE XREF: sub_402CF0+105↑j
.text:004030D0                                         ; DATA XREF: sub_402CF0:jpt_402DF5↑o
.text:004030D0                 mov     dl, 61h ; 'a'   ; jumptable 00402DF5 case 7
.text:004030D2                 lea     esi, [esi+0]
.text:004030D9                 lea     edi, [edi+0]
.text:004030E0
.text:004030E0 loc_4030E0:                             ; CODE XREF: sub_402CF0+400↓j
.text:004030E0                                         ; sub_402CF0+409↓j ...
.text:004030E0                 cmp     [esp+4Ch+var_21], 0
.text:004030E5                 lea     eax, [ebp+1]
.text:004030E8                 jz      short loc_4030B0
.text:004030EA                 mov     bl, dl
.text:004030EC                 jmp     short loc_403088
.text:004030EE ; ---------------------------------------------------------------------------
.text:004030EE
.text:004030EE loc_4030EE:                             ; CODE XREF: sub_402CF0+105↑j
.text:004030EE                                         ; DATA XREF: sub_402CF0:jpt_402DF5↑o
.text:004030EE                 mov     dl, 62h ; 'b'   ; jumptable 00402DF5 case 8
.text:004030F0                 jmp     short loc_4030E0
.text:004030F2 ; ---------------------------------------------------------------------------
.text:004030F2
.text:004030F2 loc_4030F2:                             ; CODE XREF: sub_402CF0+105↑j
.text:004030F2                                         ; DATA XREF: sub_402CF0:jpt_402DF5↑o
.text:004030F2                 mov     dl, 74h ; 't'   ; jumptable 00402DF5 case 9
.text:004030F4
.text:004030F4 loc_4030F4:                             ; CODE XREF: sub_402CF0+449↓j
.text:004030F4                                         ; sub_402CF0+455↓j ...
.text:004030F4                 cmp     [esp+4Ch+arg_10], 1
.text:004030F9                 jnz     short loc_4030E0
.text:004030FB
.text:004030FB loc_4030FB:                             ; CODE XREF: sub_402CF0+45C↓j
.text:004030FB                                         ; sub_402CF0+4C1↓j ...
.text:004030FB                 mov     [esp+4Ch+var_3C], 2 ; jumptable 004034C2 cases 91,92,94,96,124
.text:00403103                 mov     eax, [esp+4Ch+arg_14]
.text:00403107                 mov     edx, [esp+4Ch+arg_C]
.text:0040310B                 mov     ecx, [esp+4Ch+Str]
.text:0040310F                 mov     ebx, [esp+4Ch+arg_4]
.text:00403113                 mov     [esp+4Ch+var_38], eax ; int
.text:00403117                 mov     ebp, [esp+4Ch+arg_0]
.text:0040311B                 mov     [esp+4Ch+State], edx ; int
.text:0040311F                 mov     [esp+4Ch+SizeInBytes], ecx ; Str
.text:00403123                 mov     [esp+4Ch+Type], ebx ; int
.text:00403127                 mov     [esp+4Ch+C], ebp ; int
.text:0040312A                 call    sub_402CF0
.text:0040312F
.text:0040312F loc_40312F:                             ; CODE XREF: sub_402CF0+972↓j
.text:0040312F                 add     esp, 3Ch
.text:00403132                 pop     ebx
.text:00403133                 pop     esi
.text:00403134                 pop     edi
.text:00403135                 pop     ebp
.text:00403136                 retn
.text:00403137 ; ---------------------------------------------------------------------------
.text:00403137
.text:00403137 loc_403137:                             ; CODE XREF: sub_402CF0+105↑j
.text:00403137                                         ; DATA XREF: sub_402CF0:jpt_402DF5↑o
.text:00403137                 mov     dl, 6Eh ; 'n'   ; jumptable 00402DF5 case 10
.text:00403139                 jmp     short loc_4030F4
.text:0040313B ; ---------------------------------------------------------------------------
.text:0040313B
.text:0040313B loc_40313B:                             ; CODE XREF: sub_402CF0+105↑j
.text:0040313B                                         ; DATA XREF: sub_402CF0:jpt_402DF5↑o
.text:0040313B                 mov     dl, 76h ; 'v'   ; jumptable 00402DF5 case 11
.text:0040313D                 jmp     short loc_4030E0
.text:0040313F ; ---------------------------------------------------------------------------
.text:0040313F
.text:0040313F loc_40313F:                             ; CODE XREF: sub_402CF0+105↑j
.text:0040313F                                         ; DATA XREF: sub_402CF0:jpt_402DF5↑o
.text:0040313F                 mov     dl, 66h ; 'f'   ; jumptable 00402DF5 case 12
.text:00403141                 jmp     short loc_4030E0
.text:00403143 ; ---------------------------------------------------------------------------
.text:00403143
.text:00403143 loc_403143:                             ; CODE XREF: sub_402CF0+105↑j
.text:00403143                                         ; DATA XREF: sub_402CF0:jpt_402DF5↑o
.text:00403143                 mov     dl, 72h ; 'r'   ; jumptable 00402DF5 case 13
.text:00403145                 jmp     short loc_4030F4
.text:00403147 ; ---------------------------------------------------------------------------
.text:00403147
.text:00403147 loc_403147:                             ; CODE XREF: sub_402CF0+105↑j
.text:00403147                                         ; DATA XREF: sub_402CF0:jpt_402DF5↑o
.text:00403147                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00402DF5 case 39
.text:0040314C                 jz      short loc_4030FB ; jumptable 004034C2 cases 91,92,94,96,124
.text:0040314E                 cmp     [esp+4Ch+arg_10], 2
.text:00403153                 jnz     def_4031F2      ; jumptable 00402DF5 cases 37,43-58,65-90,93,95,97-122
.text:00403153                                         ; jumptable 004031F2 default case, cases 34-38,42-44,46,48-59
.text:00403159                 mov     edx, [esp+4Ch+arg_4]
.text:0040315D                 cmp     [esp+4Ch+var_34], edx
.text:00403161                 jnb     short loc_40316F
.text:00403163                 mov     ecx, [esp+4Ch+arg_0]
.text:00403167                 mov     edi, [esp+4Ch+var_34]
.text:0040316B                 mov     byte ptr [edi+ecx], 27h ; '''
.text:0040316F
.text:0040316F loc_40316F:                             ; CODE XREF: sub_402CF0+471↑j
.text:0040316F                 inc     [esp+4Ch+var_34]
.text:00403173                 mov     eax, [esp+4Ch+arg_4]
.text:00403177                 cmp     [esp+4Ch+var_34], eax
.text:0040317B                 jnb     short loc_403189
.text:0040317D                 mov     esi, [esp+4Ch+arg_0]
.text:00403181                 mov     edx, [esp+4Ch+var_34]
.text:00403185                 mov     byte ptr [edx+esi], 5Ch ; '\'
.text:00403189
.text:00403189 loc_403189:                             ; CODE XREF: sub_402CF0+48B↑j
.text:00403189                 inc     [esp+4Ch+var_34]
.text:0040318D                 mov     edi, [esp+4Ch+arg_4]
.text:00403191                 cmp     [esp+4Ch+var_34], edi
.text:00403195                 jnb     short loc_4031A3
.text:00403197                 mov     ecx, [esp+4Ch+arg_0]
.text:0040319B                 mov     eax, [esp+4Ch+var_34]
.text:0040319F                 mov     byte ptr [eax+ecx], 27h ; '''
.text:004031A3
.text:004031A3 loc_4031A3:                             ; CODE XREF: sub_402CF0+4A5↑j
.text:004031A3                                         ; sub_402CF0+5C4↓j ...
.text:004031A3                 inc     [esp+4Ch+var_34]
.text:004031A7                 jmp     def_4031F2      ; jumptable 00402DF5 cases 37,43-58,65-90,93,95,97-122
.text:004031A7                                         ; jumptable 004031F2 default case, cases 34-38,42-44,46,48-59
.text:004031AC ; ---------------------------------------------------------------------------
.text:004031AC
.text:004031AC loc_4031AC:                             ; CODE XREF: sub_402CF0+105↑j
.text:004031AC                                         ; DATA XREF: sub_402CF0:jpt_402DF5↑o
.text:004031AC                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00402DF5 case 63
.text:004031B1                 jz      loc_4030FB      ; jumptable 004034C2 cases 91,92,94,96,124
.text:004031B7                 cmp     [esp+4Ch+arg_10], 3
.text:004031BC                 jnz     def_4031F2      ; jumptable 00402DF5 cases 37,43-58,65-90,93,95,97-122
.text:004031BC                                         ; jumptable 004031F2 default case, cases 34-38,42-44,46,48-59
.text:004031C2                 lea     edx, [ebp+2]
.text:004031C5                 cmp     edx, [esp+4Ch+arg_C]
.text:004031C9                 jnb     def_4031F2      ; jumptable 00402DF5 cases 37,43-58,65-90,93,95,97-122
.text:004031C9                                         ; jumptable 004031F2 default case, cases 34-38,42-44,46,48-59
.text:004031CF                 mov     esi, [esp+4Ch+Str]
.text:004031D3                 cmp     byte ptr [ebp+esi+1], 3Fh ; '?'
.text:004031D8                 jnz     def_4031F2      ; jumptable 00402DF5 cases 37,43-58,65-90,93,95,97-122
.text:004031D8                                         ; jumptable 004031F2 default case, cases 34-38,42-44,46,48-59
.text:004031DE                 movzx   ecx, byte ptr [ebp+esi+2]
.text:004031E3                 movsx   eax, cl
.text:004031E6                 sub     eax, 21h ; '!'  ; switch 30 cases
.text:004031E9                 cmp     eax, 1Dh
.text:004031EC                 ja      def_4031F2      ; jumptable 00402DF5 cases 37,43-58,65-90,93,95,97-122
.text:004031EC                                         ; jumptable 004031F2 default case, cases 34-38,42-44,46,48-59
.text:004031F2                 jmp     ds:jpt_4031F2[eax*4] ; switch jump
.text:004031F2 ; ---------------------------------------------------------------------------
.text:004031F9                 align 4
.text:004031FC jpt_4031F2      dd offset loc_403274    ; DATA XREF: sub_402CF0+502↑r
.text:004031FC                 dd offset def_4031F2    ; jump table for switch statement
.text:004031FC                 dd offset def_4031F2
.text:004031FC                 dd offset def_4031F2
.text:004031FC                 dd offset def_4031F2
.text:004031FC                 dd offset def_4031F2
.text:004031FC                 dd offset loc_403274
.text:004031FC                 dd offset loc_403274
.text:004031FC                 dd offset loc_403274
.text:004031FC                 dd offset def_4031F2
.text:004031FC                 dd offset def_4031F2
.text:004031FC                 dd offset def_4031F2
.text:004031FC                 dd offset loc_403274
.text:004031FC                 dd offset def_4031F2
.text:004031FC                 dd offset loc_403274
.text:004031FC                 dd offset def_4031F2
.text:004031FC                 dd offset def_4031F2
.text:004031FC                 dd offset def_4031F2
.text:004031FC                 dd offset def_4031F2
.text:004031FC                 dd offset def_4031F2
.text:004031FC                 dd offset def_4031F2
.text:004031FC                 dd offset def_4031F2
.text:004031FC                 dd offset def_4031F2
.text:004031FC                 dd offset def_4031F2
.text:004031FC                 dd offset def_4031F2
.text:004031FC                 dd offset def_4031F2
.text:004031FC                 dd offset def_4031F2
.text:004031FC                 dd offset loc_403274
.text:004031FC                 dd offset loc_403274
.text:004031FC                 dd offset loc_403274
.text:00403274 ; ---------------------------------------------------------------------------
.text:00403274
.text:00403274 loc_403274:                             ; CODE XREF: sub_402CF0+502↑j
.text:00403274                                         ; DATA XREF: sub_402CF0:jpt_4031F2↑o
.text:00403274                 mov     ebp, edx        ; jumptable 004031F2 cases 33,39-41,45,47,60-62
.text:00403276                 mov     bl, cl
.text:00403278                 mov     edx, [esp+4Ch+arg_4]
.text:0040327C                 cmp     [esp+4Ch+var_34], edx
.text:00403280                 jnb     short loc_40328E
.text:00403282                 mov     ecx, [esp+4Ch+arg_0]
.text:00403286                 mov     edi, [esp+4Ch+var_34]
.text:0040328A                 mov     byte ptr [edi+ecx], 3Fh ; '?'
.text:0040328E
.text:0040328E loc_40328E:                             ; CODE XREF: sub_402CF0+590↑j
.text:0040328E                 inc     [esp+4Ch+var_34]
.text:00403292                 mov     eax, [esp+4Ch+arg_4]
.text:00403296                 cmp     [esp+4Ch+var_34], eax
.text:0040329A                 jnb     short loc_4032A8
.text:0040329C                 mov     edx, [esp+4Ch+arg_0]
.text:004032A0                 mov     esi, [esp+4Ch+var_34]
.text:004032A4                 mov     byte ptr [esi+edx], 5Ch ; '\'
.text:004032A8
.text:004032A8 loc_4032A8:                             ; CODE XREF: sub_402CF0+5AA↑j
.text:004032A8                 inc     [esp+4Ch+var_34]
.text:004032AC                 mov     edi, [esp+4Ch+arg_4]
.text:004032B0                 cmp     [esp+4Ch+var_34], edi
.text:004032B4                 jnb     loc_4031A3
.text:004032BA                 mov     eax, [esp+4Ch+arg_0]
.text:004032BE                 mov     ecx, [esp+4Ch+var_34]
.text:004032C2                 mov     byte ptr [ecx+eax], 3Fh ; '?'
.text:004032C6                 jmp     loc_4031A3
.text:004032C6 ; ---------------------------------------------------------------------------
.text:004032CB                 align 10h
.text:004032D0
.text:004032D0 def_402DF5:                             ; CODE XREF: sub_402CF0+FF↑j
.text:004032D0                                         ; sub_402CF0+105↑j
.text:004032D0                                         ; DATA XREF: ...
.text:004032D0                 cmp     [esp+4Ch+var_22], 0 ; jumptable 00402DF5 default case, cases 1-6,14-31,64
.text:004032D5                 jz      loc_403400
.text:004032DB                 mov     [esp+4Ch+var_28], 1
.text:004032E3                 mov     esi, ds:__mb_cur_max
.text:004032E9                 movzx   edx, bl
.text:004032EC                 cmp     dword ptr [esi], 1
.text:004032EF                 jz      loc_4033E4
.text:004032F5                 mov     [esp+4Ch+Type], 157h ; Type
.text:004032FD                 mov     [esp+4Ch+C], edx ; C
.text:00403300                 call    _isctype
.text:00403305
.text:00403305 loc_403305:                             ; CODE XREF: sub_402CF0+705↓j
.text:00403305                 test    eax, eax
.text:00403307                 setnz   [esp+4Ch+var_29]
.text:0040330C
.text:0040330C loc_40330C:                             ; CODE XREF: sub_402CF0+7A5↓j
.text:0040330C                 cmp     [esp+4Ch+var_21], 0
.text:00403311                 lea     eax, [ebp+1]
.text:00403314                 jz      loc_4030B0
.text:0040331A                 cmp     [esp+4Ch+var_29], 0
.text:0040331F                 jnz     def_4031F2      ; jumptable 00402DF5 cases 37,43-58,65-90,93,95,97-122
.text:0040331F                                         ; jumptable 004031F2 default case, cases 34-38,42-44,46,48-59
.text:00403325
.text:00403325 loc_403325:                             ; CODE XREF: sub_402CF0+7AB↓j
.text:00403325                 mov     eax, [esp+4Ch+var_28]
.text:00403329                 lea     edx, [eax+ebp]
.text:0040332C                 lea     esi, [esi+0]
.text:00403330
.text:00403330 loc_403330:                             ; CODE XREF: sub_402CF0+6EF↓j
.text:00403330                 cmp     [esp+4Ch+var_21], 0
.text:00403335                 jz      short loc_4033B0
.text:00403337                 cmp     [esp+4Ch+var_29], 0
.text:0040333C                 jnz     short loc_4033B0
.text:0040333E                 mov     edi, [esp+4Ch+arg_4]
.text:00403342                 cmp     [esp+4Ch+var_34], edi
.text:00403346                 jnb     short loc_403354
.text:00403348                 mov     esi, [esp+4Ch+arg_0]
.text:0040334C                 mov     eax, [esp+4Ch+var_34]
.text:00403350                 mov     byte ptr [eax+esi], 5Ch ; '\'
.text:00403354
.text:00403354 loc_403354:                             ; CODE XREF: sub_402CF0+656↑j
.text:00403354                 inc     [esp+4Ch+var_34]
.text:00403358                 mov     ecx, [esp+4Ch+arg_4]
.text:0040335C                 cmp     [esp+4Ch+var_34], ecx
.text:00403360                 jnb     short loc_403375
.text:00403362                 mov     cl, bl
.text:00403364                 mov     esi, [esp+4Ch+arg_0]
.text:00403368                 mov     edi, [esp+4Ch+var_34]
.text:0040336C                 shr     cl, 6
.text:0040336F                 add     cl, 30h ; '0'
.text:00403372                 mov     [edi+esi], cl
.text:00403375
.text:00403375 loc_403375:                             ; CODE XREF: sub_402CF0+670↑j
.text:00403375                 inc     [esp+4Ch+var_34]
.text:00403379                 mov     edi, [esp+4Ch+arg_4]
.text:0040337D                 cmp     [esp+4Ch+var_34], edi
.text:00403381                 jnb     short loc_403399
.text:00403383                 mov     cl, bl
.text:00403385                 mov     esi, [esp+4Ch+arg_0]
.text:00403389                 shr     cl, 3
.text:0040338C                 mov     edi, [esp+4Ch+var_34]
.text:00403390                 and     cl, 7
.text:00403393                 add     cl, 30h ; '0'
.text:00403396                 mov     [edi+esi], cl
.text:00403399
.text:00403399 loc_403399:                             ; CODE XREF: sub_402CF0+691↑j
.text:00403399                 inc     [esp+4Ch+var_34]
.text:0040339D                 and     bl, 7
.text:004033A0                 add     bl, 30h ; '0'
.text:004033A3                 lea     esi, [esi+0]
.text:004033A9                 lea     edi, [edi+0]
.text:004033B0
.text:004033B0 loc_4033B0:                             ; CODE XREF: sub_402CF0+645↑j
.text:004033B0                                         ; sub_402CF0+64C↑j
.text:004033B0                 lea     eax, [ebp+1]
.text:004033B3                 cmp     edx, eax
.text:004033B5                 jbe     loc_4030B0
.text:004033BB                 mov     ebp, [esp+4Ch+arg_4]
.text:004033BF                 cmp     [esp+4Ch+var_34], ebp
.text:004033C3                 jnb     short loc_4033D0
.text:004033C5                 mov     ecx, [esp+4Ch+arg_0]
.text:004033C9                 mov     edi, [esp+4Ch+var_34]
.text:004033CD                 mov     [edi+ecx], bl
.text:004033D0
.text:004033D0 loc_4033D0:                             ; CODE XREF: sub_402CF0+6D3↑j
.text:004033D0                 inc     [esp+4Ch+var_34]
.text:004033D4                 mov     ebp, eax
.text:004033D6                 mov     eax, [esp+4Ch+Str]
.text:004033DA                 movzx   ebx, byte ptr [ebp+eax+0]
.text:004033DF                 jmp     loc_403330
.text:004033E4 ; ---------------------------------------------------------------------------
.text:004033E4
.text:004033E4 loc_4033E4:                             ; CODE XREF: sub_402CF0+5FF↑j
.text:004033E4                 mov     ecx, ds:_pctype
.text:004033EA                 mov     edi, [ecx]
.text:004033EC                 movzx   eax, word ptr [edi+edx*2]
.text:004033F0                 and     eax, 157h
.text:004033F5                 jmp     loc_403305
.text:004033F5 ; ---------------------------------------------------------------------------
.text:004033FA                 align 10h
.text:00403400
.text:00403400 loc_403400:                             ; CODE XREF: sub_402CF0+5E5↑j
.text:00403400                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00403405                 mov     [esp+4Ch+var_18._Wchar], 0
.text:0040340D                 mov     [esp+4Ch+var_28], 0
.text:00403415                 mov     [esp+4Ch+var_29], 1
.text:0040341A                 jz      loc_4035AC
.text:00403420
.text:00403420 loc_403420:                             ; CODE XREF: sub_402CF0+8CC↓j
.text:00403420                 mov     ecx, [esp+4Ch+arg_C]
.text:00403424                 lea     edx, [esp+4Ch+var_18]
.text:00403428                 mov     edi, [esp+4Ch+Str]
.text:0040342C                 mov     [esp+4Ch+State], edx ; State
.text:00403430                 lea     esi, [esp+4Ch+var_18._State]
.text:00403434                 sub     ecx, ebp
.text:00403436                 mov     [esp+4Ch+SizeInBytes], ecx ; SizeInBytes
.text:0040343A                 add     edi, ebp
.text:0040343C                 mov     [esp+4Ch+var_30], edi
.text:00403440                 mov     [esp+4Ch+Type], edi ; SrcCh
.text:00403444                 mov     [esp+4Ch+C], esi ; DstCh
.text:00403447                 call    mbrtowc
.text:0040344C                 test    eax, eax
.text:0040344E                 mov     edi, eax
.text:00403450                 jz      short loc_403490
.text:00403452                 cmp     eax, 0FFFFFFFFh
.text:00403455                 jz      loc_4035A2
.text:0040345B                 cmp     eax, 0FFFFFFFEh
.text:0040345E                 jz      loc_403562
.text:00403464                 cmp     [esp+4Ch+arg_10], 1
.text:00403469                 jz      short loc_4034A0
.text:0040346B
.text:0040346B loc_40346B:                             ; CODE XREF: sub_402CF0+7B9↓j
.text:0040346B                                         ; sub_402CF0+86D↓j
.text:0040346B                 movzx   ecx, [esp+4Ch+var_18._State]
.text:00403470                 mov     [esp+4Ch+Type], 157h ; Type
.text:00403478                 mov     [esp+4Ch+C], ecx ; C
.text:0040347B                 call    iswctype
.text:00403480                 test    eax, eax
.text:00403482                 jnz     short loc_403489
.text:00403484                 mov     [esp+4Ch+var_29], 0
.text:00403489
.text:00403489 loc_403489:                             ; CODE XREF: sub_402CF0+792↑j
.text:00403489                 mov     [esp+4Ch+var_28], edi
.text:0040348D                 lea     esi, [esi+0]
.text:00403490
.text:00403490 loc_403490:                             ; CODE XREF: sub_402CF0+760↑j
.text:00403490                                         ; sub_402CF0+87B↓j ...
.text:00403490                 cmp     [esp+4Ch+var_28], 1
.text:00403495                 jbe     loc_40330C
.text:0040349B                 jmp     loc_403325
.text:004034A0 ; ---------------------------------------------------------------------------
.text:004034A0
.text:004034A0 loc_4034A0:                             ; CODE XREF: sub_402CF0+779↑j
.text:004034A0                 cmp     [esp+4Ch+arg_10], eax
.text:004034A4                 mov     edx, 1
.text:004034A9                 jnb     short loc_40346B
.text:004034AB
.text:004034AB loc_4034AB:                             ; CODE XREF: sub_402CF0+867↓j
.text:004034AB                 mov     ecx, [esp+4Ch+Str]
.text:004034AF                 lea     esi, [edx+ebp]
.text:004034B2                 movsx   eax, byte ptr [esi+ecx]
.text:004034B6                 sub     eax, 5Bh ; '['  ; switch 34 cases
.text:004034B9                 cmp     eax, 21h
.text:004034BC                 ja      def_4034C2      ; jumptable 004034C2 default case, cases 93,95,97-123
.text:004034C2                 jmp     ds:jpt_4034C2[eax*4] ; switch jump
.text:004034C2 ; ---------------------------------------------------------------------------
.text:004034C9                 align 4
.text:004034CC jpt_4034C2      dd offset loc_4030FB    ; DATA XREF: sub_402CF0+7D2↑r
.text:004034CC                 dd offset loc_4030FB    ; jump table for switch statement
.text:004034CC                 dd offset def_4034C2
.text:004034CC                 dd offset loc_4030FB
.text:004034CC                 dd offset def_4034C2
.text:004034CC                 dd offset loc_4030FB
.text:004034CC                 dd offset def_4034C2
.text:004034CC                 dd offset def_4034C2
.text:004034CC                 dd offset def_4034C2
.text:004034CC                 dd offset def_4034C2
.text:004034CC                 dd offset def_4034C2
.text:004034CC                 dd offset def_4034C2
.text:004034CC                 dd offset def_4034C2
.text:004034CC                 dd offset def_4034C2
.text:004034CC                 dd offset def_4034C2
.text:004034CC                 dd offset def_4034C2
.text:004034CC                 dd offset def_4034C2
.text:004034CC                 dd offset def_4034C2
.text:004034CC                 dd offset def_4034C2
.text:004034CC                 dd offset def_4034C2
.text:004034CC                 dd offset def_4034C2
.text:004034CC                 dd offset def_4034C2
.text:004034CC                 dd offset def_4034C2
.text:004034CC                 dd offset def_4034C2
.text:004034CC                 dd offset def_4034C2
.text:004034CC                 dd offset def_4034C2
.text:004034CC                 dd offset def_4034C2
.text:004034CC                 dd offset def_4034C2
.text:004034CC                 dd offset def_4034C2
.text:004034CC                 dd offset def_4034C2
.text:004034CC                 dd offset def_4034C2
.text:004034CC                 dd offset def_4034C2
.text:004034CC                 dd offset def_4034C2
.text:004034CC                 dd offset loc_4030FB
.text:00403554 ; ---------------------------------------------------------------------------
.text:00403554
.text:00403554 def_4034C2:                             ; CODE XREF: sub_402CF0+7CC↑j
.text:00403554                                         ; sub_402CF0+7D2↑j
.text:00403554                                         ; DATA XREF: ...
.text:00403554                 inc     edx             ; jumptable 004034C2 default case, cases 93,95,97-123
.text:00403555                 cmp     edx, edi
.text:00403557                 jb      loc_4034AB
.text:0040355D                 jmp     loc_40346B
.text:00403562 ; ---------------------------------------------------------------------------
.text:00403562
.text:00403562 loc_403562:                             ; CODE XREF: sub_402CF0+76E↑j
.text:00403562                 cmp     ebp, [esp+4Ch+arg_C]
.text:00403566                 mov     [esp+4Ch+var_29], 0
.text:0040356B                 jnb     loc_403490
.text:00403571                 mov     eax, [esp+4Ch+var_30]
.text:00403575                 cmp     byte ptr [eax], 0
.text:00403578                 jz      loc_403490
.text:0040357E
.text:0040357E loc_40357E:                             ; CODE XREF: sub_402CF0+8AB↓j
.text:0040357E                 inc     [esp+4Ch+var_28]
.text:00403582                 mov     esi, [esp+4Ch+var_28]
.text:00403586                 lea     eax, [esi+ebp]
.text:00403589                 cmp     eax, [esp+4Ch+arg_C]
.text:0040358D                 jnb     loc_403490
.text:00403593                 mov     edi, [esp+4Ch+Str]
.text:00403597                 cmp     byte ptr [eax+edi], 0
.text:0040359B                 jnz     short loc_40357E
.text:0040359D                 jmp     loc_403490
.text:004035A2 ; ---------------------------------------------------------------------------
.text:004035A2
.text:004035A2 loc_4035A2:                             ; CODE XREF: sub_402CF0+765↑j
.text:004035A2                 mov     [esp+4Ch+var_29], 0
.text:004035A7                 jmp     loc_403490
.text:004035AC ; ---------------------------------------------------------------------------
.text:004035AC
.text:004035AC loc_4035AC:                             ; CODE XREF: sub_402CF0+72A↑j
.text:004035AC                 mov     edx, [esp+4Ch+Str]
.text:004035B0                 mov     [esp+4Ch+C], edx ; Str
.text:004035B3                 call    strlen
.text:004035B8                 mov     [esp+4Ch+arg_C], eax
.text:004035BC                 jmp     loc_403420
.text:004035C1 ; ---------------------------------------------------------------------------
.text:004035C1
.text:004035C1 loc_4035C1:                             ; CODE XREF: sub_402CF0+105↑j
.text:004035C1                                         ; DATA XREF: sub_402CF0:jpt_402DF5↑o
.text:004035C1                 mov     dl, bl          ; jumptable 00402DF5 case 92
.text:004035C3                 jmp     loc_4030F4
.text:004035C8 ; ---------------------------------------------------------------------------
.text:004035C8
.text:004035C8 loc_4035C8:                             ; CODE XREF: sub_402CF0+105↑j
.text:004035C8                                         ; sub_402CF0+902↓j
.text:004035C8                                         ; DATA XREF: ...
.text:004035C8                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00402DF5 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:004035CD                 jnz     def_4031F2      ; jumptable 00402DF5 cases 37,43-58,65-90,93,95,97-122
.text:004035CD                                         ; jumptable 004031F2 default case, cases 34-38,42-44,46,48-59
.text:004035D3                 jmp     loc_4030FB      ; jumptable 004034C2 cases 91,92,94,96,124
.text:004035D8 ; ---------------------------------------------------------------------------
.text:004035D8
.text:004035D8 loc_4035D8:                             ; CODE XREF: sub_402CF0+105↑j
.text:004035D8                                         ; DATA XREF: sub_402CF0:jpt_402DF5↑o
.text:004035D8                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh ; jumptable 00402DF5 cases 123,125
.text:004035DD                 jz      short loc_4035F4
.text:004035DF                 cmp     [esp+4Ch+arg_C], 1
.text:004035E4
.text:004035E4 loc_4035E4:                             ; CODE XREF: sub_402CF0+90C↓j
.text:004035E4                 jnz     def_4031F2      ; jumptable 00402DF5 cases 37,43-58,65-90,93,95,97-122
.text:004035E4                                         ; jumptable 004031F2 default case, cases 34-38,42-44,46,48-59
.text:004035EA
.text:004035EA loc_4035EA:                             ; CODE XREF: sub_402CF0+105↑j
.text:004035EA                                         ; DATA XREF: sub_402CF0:jpt_402DF5↑o
.text:004035EA                 test    ebp, ebp        ; jumptable 00402DF5 cases 35,126
.text:004035EC                 jnz     def_4031F2      ; jumptable 00402DF5 cases 37,43-58,65-90,93,95,97-122
.text:004035EC                                         ; jumptable 004031F2 default case, cases 34-38,42-44,46,48-59
.text:004035F2                 jmp     short loc_4035C8 ; jumptable 00402DF5 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:004035F4 ; ---------------------------------------------------------------------------
.text:004035F4
.text:004035F4 loc_4035F4:                             ; CODE XREF: sub_402CF0+8ED↑j
.text:004035F4                 mov     esi, [esp+4Ch+Str]
.text:004035F8                 cmp     byte ptr [esi+1], 0
.text:004035FC                 jmp     short loc_4035E4
.text:004035FE ; ---------------------------------------------------------------------------
.text:004035FE
.text:004035FE loc_4035FE:                             ; CODE XREF: sub_402CF0:loc_402D8F↑j
.text:004035FE                 test    ebp, ebp
.text:00403600                 jnz     short loc_40360D
.text:00403602                 cmp     [esp+4Ch+arg_10], 1
.text:00403607                 jz      loc_4030FB      ; jumptable 004034C2 cases 91,92,94,96,124
.text:0040360D
.text:0040360D loc_40360D:                             ; CODE XREF: sub_402CF0+910↑j
.text:0040360D                 mov     esi, [esp+4Ch+var_1C]
.text:00403611                 test    esi, esi
.text:00403613                 jz      short loc_403648
.text:00403615                 mov     edi, [esp+4Ch+var_1C]
.text:00403619                 movzx   eax, byte ptr [edi]
.text:0040361C                 test    al, al
.text:0040361E                 jz      short loc_403648
.text:00403620
.text:00403620 loc_403620:                             ; CODE XREF: sub_402CF0+956↓j
.text:00403620                 mov     ebp, [esp+4Ch+arg_4]
.text:00403624                 cmp     [esp+4Ch+var_34], ebp
.text:00403628                 jnb     short loc_403635
.text:0040362A                 mov     ecx, [esp+4Ch+arg_0]
.text:0040362E                 mov     ebx, [esp+4Ch+var_34]
.text:00403632                 mov     [ebx+ecx], al
.text:00403635
.text:00403635 loc_403635:                             ; CODE XREF: sub_402CF0+938↑j
.text:00403635                 inc     [esp+4Ch+var_1C]
.text:00403639                 inc     [esp+4Ch+var_34]
.text:0040363D                 mov     edx, [esp+4Ch+var_1C]
.text:00403641                 movzx   eax, byte ptr [edx]
.text:00403644                 test    al, al
.text:00403646                 jnz     short loc_403620
.text:00403648
.text:00403648 loc_403648:                             ; CODE XREF: sub_402CF0+923↑j
.text:00403648                                         ; sub_402CF0+92E↑j
.text:00403648                 mov     eax, [esp+4Ch+arg_4]
.text:0040364C                 cmp     [esp+4Ch+var_34], eax
.text:00403650                 jnb     short loc_40365E
.text:00403652                 mov     edi, [esp+4Ch+arg_0]
.text:00403656                 mov     esi, [esp+4Ch+var_34]
.text:0040365A                 mov     byte ptr [esi+edi], 0
.text:0040365E
.text:0040365E loc_40365E:                             ; CODE XREF: sub_402CF0+960↑j
.text:0040365E                 mov     eax, [esp+4Ch+var_34]
.text:00403662                 jmp     loc_40312F
.text:00403667 ; ---------------------------------------------------------------------------
.text:00403667
.text:00403667 loc_403667:                             ; CODE XREF: sub_402CF0+95↑j
.text:00403667                 mov     ebx, [esp+4Ch+Str]
.text:0040366B                 cmp     byte ptr [ebp+ebx+0], 0
.text:00403670                 jmp     loc_402D8F
.text:00403675 ; ---------------------------------------------------------------------------
.text:00403675
.text:00403675 loc_403675:                             ; CODE XREF: sub_402CF0+3D↑j
.text:00403675                                         ; DATA XREF: sub_402CF0:jpt_402D2D↑o
.text:00403675                 mov     edx, [esp+4Ch+arg_4] ; jumptable 00402D2D case 2
.text:00403679                 cmp     [esp+4Ch+var_34], edx
.text:0040367D                 jnb     short loc_403686
.text:0040367F                 mov     ecx, [esp+4Ch+arg_0]
.text:00403683                 mov     byte ptr [ecx], 27h ; '''
.text:00403686
.text:00403686 loc_403686:                             ; CODE XREF: sub_402CF0+98D↑j
.text:00403686                 mov     [esp+4Ch+var_34], 1
.text:0040368E                 mov     [esp+4Ch+var_1C], 402CDEh
.text:00403696                 jmp     loc_402D76
.text:0040369B ; ---------------------------------------------------------------------------
.text:0040369B
.text:0040369B loc_40369B:                             ; CODE XREF: sub_402CF0+3D↑j
.text:0040369B                                         ; DATA XREF: sub_402CF0:jpt_402D2D↑o
.text:0040369B                 mov     [esp+4Ch+var_21], 1 ; jumptable 00402D2D case 4
.text:004036A0                 jmp     def_402D2D      ; jumptable 00402D2D default case, cases 0,1
.text:004036A5 ; ---------------------------------------------------------------------------
.text:004036A5
.text:004036A5 loc_4036A5:                             ; CODE XREF: sub_402CF0+3D↑j
.text:004036A5                                         ; DATA XREF: sub_402CF0:jpt_402D2D↑o
.text:004036A5                 mov     [esp+4Ch+C], 402CE0h ; jumptable 00402D2D cases 5,6
.text:004036AC                 call    ds:libintl_gettext
.text:004036B2                 cmp     eax, 402CE0h
.text:004036B7                 mov     edi, eax
.text:004036B9                 jz      short loc_403730
.text:004036BB
.text:004036BB loc_4036BB:                             ; CODE XREF: sub_402CF0+A45↓j
.text:004036BB                                         ; sub_402CF0+A4C↓j
.text:004036BB                 mov     [esp+4Ch+C], 402CDEh
.text:004036C2                 call    ds:libintl_gettext
.text:004036C8                 cmp     eax, 402CDEh
.text:004036CD                 mov     edx, eax
.text:004036CF                 jz      short loc_403722
.text:004036D1
.text:004036D1 loc_4036D1:                             ; CODE XREF: sub_402CF0+A37↓j
.text:004036D1                                         ; sub_402CF0+A3E↓j
.text:004036D1                 mov     [esp+4Ch+var_1C], edi
.text:004036D5                 cmp     byte ptr [edi], 0
.text:004036D8                 jz      short loc_403708
.text:004036DA
.text:004036DA loc_4036DA:                             ; CODE XREF: sub_402CF0+A16↓j
.text:004036DA                 mov     ecx, [esp+4Ch+arg_4]
.text:004036DE                 cmp     [esp+4Ch+var_34], ecx
.text:004036E2                 jnb     short loc_4036F7
.text:004036E4                 mov     ebp, [esp+4Ch+var_1C]
.text:004036E8                 mov     edi, [esp+4Ch+arg_0]
.text:004036EC                 mov     esi, [esp+4Ch+var_34]
.text:004036F0                 movzx   ebx, byte ptr [ebp+0]
.text:004036F4                 mov     [esi+edi], bl
.text:004036F7
.text:004036F7 loc_4036F7:                             ; CODE XREF: sub_402CF0+9F2↑j
.text:004036F7                 inc     [esp+4Ch+var_1C]
.text:004036FB                 inc     [esp+4Ch+var_34]
.text:004036FF                 mov     eax, [esp+4Ch+var_1C]
.text:00403703                 cmp     byte ptr [eax], 0
.text:00403706                 jnz     short loc_4036DA
.text:00403708
.text:00403708 loc_403708:                             ; CODE XREF: sub_402CF0+9E8↑j
.text:00403708                 mov     [esp+4Ch+var_21], 1
.text:0040370D                 mov     [esp+4Ch+var_1C], edx
.text:00403711                 mov     [esp+4Ch+C], edx ; Str
.text:00403714                 call    strlen
.text:00403719                 mov     [esp+4Ch+var_20], eax
.text:0040371D                 jmp     def_402D2D      ; jumptable 00402D2D default case, cases 0,1
.text:00403722 ; ---------------------------------------------------------------------------
.text:00403722
.text:00403722 loc_403722:                             ; CODE XREF: sub_402CF0+9DF↑j
.text:00403722                 cmp     [esp+4Ch+arg_10], 6
.text:00403727                 jnz     short loc_4036D1
.text:00403729                 mov     edx, offset asc_402CDC ; "\"'`"
.text:0040372E                 jmp     short loc_4036D1
.text:00403730 ; ---------------------------------------------------------------------------
.text:00403730
.text:00403730 loc_403730:                             ; CODE XREF: sub_402CF0+9C9↑j
.text:00403730                 cmp     [esp+4Ch+arg_10], 6
.text:00403735                 jnz     short loc_4036BB
.text:00403737                 mov     edi, offset asc_402CDC ; "\"'`"
.text:0040373C                 jmp     loc_4036BB
.text:0040373C sub_402CF0      endp
.text:0040373C
.text:00403741 ; ---------------------------------------------------------------------------
.text:00403741                 jmp     short loc_403750
.text:00403741 ; ---------------------------------------------------------------------------
.text:00403743                 align 10h
.text:00403750
.text:00403750 loc_403750:                             ; CODE XREF: .text:00403741↑j
.text:00403750                 sub     esp, 0Ch
.text:00403753                 mov     [esp+4], ebx
.text:00403757                 mov     [esp+8], esi
.text:0040375B                 call    _errno
.text:00403760                 mov     esi, [eax]
.text:00403762                 mov     dword ptr [esp], 24h ; '$'
.text:00403769                 call    sub_404540
.text:0040376E                 mov     edx, [esp+10h]
.text:00403772                 mov     ebx, eax
.text:00403774                 test    edx, edx
.text:00403776                 jz      short loc_4037C1
.text:00403778
.text:00403778 loc_403778:                             ; CODE XREF: .text:004037C6↓j
.text:00403778                 mov     ecx, [edx]
.text:0040377A                 mov     [ebx], ecx
.text:0040377C                 mov     ecx, [edx+4]
.text:0040377F                 mov     [ebx+4], ecx
.text:00403782                 mov     ecx, [edx+8]
.text:00403785                 mov     [ebx+8], ecx
.text:00403788                 mov     ecx, [edx+0Ch]
.text:0040378B                 mov     [ebx+0Ch], ecx
.text:0040378E                 mov     ecx, [edx+10h]
.text:00403791                 mov     [ebx+10h], ecx
.text:00403794                 mov     ecx, [edx+14h]
.text:00403797                 mov     [ebx+14h], ecx
.text:0040379A                 mov     ecx, [edx+18h]
.text:0040379D                 mov     [ebx+18h], ecx
.text:004037A0                 mov     ecx, [edx+1Ch]
.text:004037A3                 mov     [ebx+1Ch], ecx
.text:004037A6                 mov     ecx, [edx+20h]
.text:004037A9                 mov     [ebx+20h], ecx
.text:004037AC                 call    _errno
.text:004037B1                 mov     [eax], esi
.text:004037B3                 mov     esi, [esp+8]
.text:004037B7                 mov     eax, ebx
.text:004037B9                 mov     ebx, [esp+4]
.text:004037BD                 add     esp, 0Ch
.text:004037C0                 retn
.text:004037C1 ; ---------------------------------------------------------------------------
.text:004037C1
.text:004037C1 loc_4037C1:                             ; CODE XREF: .text:00403776↑j
.text:004037C1                 mov     edx, offset dword_406140
.text:004037C6                 jmp     short loc_403778
.text:004037C6 ; ---------------------------------------------------------------------------
.text:004037C8                 align 10h
.text:004037D0                 mov     eax, [esp+4]
.text:004037D4                 test    eax, eax
.text:004037D6                 jz      short loc_4037E0
.text:004037D8
.text:004037D8 loc_4037D8:                             ; CODE XREF: .text:004037E5↓j
.text:004037D8                 mov     eax, [eax]
.text:004037DA                 retn
.text:004037DA ; ---------------------------------------------------------------------------
.text:004037DB                 align 10h
.text:004037E0
.text:004037E0 loc_4037E0:                             ; CODE XREF: .text:004037D6↑j
.text:004037E0                 mov     eax, offset dword_406140
.text:004037E5                 jmp     short loc_4037D8
.text:004037E5 ; ---------------------------------------------------------------------------
.text:004037E7                 align 10h
.text:004037F0                 mov     edx, [esp+4]
.text:004037F4                 test    edx, edx
.text:004037F6                 jz      short loc_403800
.text:004037F8
.text:004037F8 loc_4037F8:                             ; CODE XREF: .text:00403805↓j
.text:004037F8                 mov     ecx, [esp+8]
.text:004037FC                 mov     [edx], ecx
.text:004037FE                 retn
.text:004037FE ; ---------------------------------------------------------------------------
.text:004037FF                 align 10h
.text:00403800
.text:00403800 loc_403800:                             ; CODE XREF: .text:004037F6↑j
.text:00403800                 mov     edx, offset dword_406140
.text:00403805                 jmp     short loc_4037F8
.text:00403805 ; ---------------------------------------------------------------------------
.text:00403807                 align 10h
.text:00403810                 sub     esp, 8
.text:00403813                 mov     eax, [esp+0Ch]
.text:00403817                 movzx   ecx, byte ptr [esp+10h]
.text:0040381C                 mov     [esp], ebx
.text:0040381F                 mov     ebx, [esp+14h]
.text:00403823                 mov     [esp+4], esi
.text:00403827                 mov     dl, cl
.text:00403829                 shr     dl, 5
.text:0040382C                 movzx   edx, dl
.text:0040382F                 shl     edx, 2
.text:00403832                 test    eax, eax
.text:00403834                 lea     esi, [edx+eax+4]
.text:00403838                 jz      short loc_403860
.text:0040383A
.text:0040383A loc_40383A:                             ; CODE XREF: .text:00403866↓j
.text:0040383A                 mov     edx, [esi]
.text:0040383C                 and     ecx, 1Fh
.text:0040383F                 and     ebx, 1
.text:00403842                 mov     eax, edx
.text:00403844                 shr     eax, cl
.text:00403846                 and     eax, 1
.text:00403849                 xor     ebx, eax
.text:0040384B                 shl     ebx, cl
.text:0040384D                 xor     edx, ebx
.text:0040384F                 mov     [esi], edx
.text:00403851                 mov     ebx, [esp]
.text:00403854                 mov     esi, [esp+4]
.text:00403858                 add     esp, 8
.text:0040385B                 retn
.text:0040385B ; ---------------------------------------------------------------------------
.text:0040385C                 align 10h
.text:00403860
.text:00403860 loc_403860:                             ; CODE XREF: .text:00403838↑j
.text:00403860                 lea     esi, dword_406144[edx]
.text:00403866                 jmp     short loc_40383A
.text:00403866 ; ---------------------------------------------------------------------------
.text:00403868                 align 10h
.text:00403870                 sub     esp, 2Ch
.text:00403873                 mov     [esp+24h], ebx
.text:00403877                 mov     ebx, [esp+40h]
.text:0040387B                 mov     [esp+28h], esi
.text:0040387F                 test    ebx, ebx
.text:00403881                 jz      short loc_4038D0
.text:00403883
.text:00403883 loc_403883:                             ; CODE XREF: .text:004038D5↓j
.text:00403883                 call    _errno
.text:00403888                 mov     esi, [eax]
.text:0040388A                 mov     [esp+14h], ebx
.text:0040388E                 mov     edx, [ebx]
.text:00403890                 mov     ecx, [esp+38h]
.text:00403894                 mov     ebx, [esp+3Ch]
.text:00403898                 mov     [esp+10h], edx
.text:0040389C                 mov     edx, [esp+34h]
.text:004038A0                 mov     [esp+0Ch], ebx
.text:004038A4                 mov     [esp+8], ecx
.text:004038A8                 mov     [esp+4], edx
.text:004038AC                 mov     edx, [esp+30h]
.text:004038B0                 mov     [esp], edx
.text:004038B3                 call    sub_402CF0
.text:004038B8                 mov     ebx, eax
.text:004038BA                 call    _errno
.text:004038BF                 mov     [eax], esi
.text:004038C1                 mov     esi, [esp+28h]
.text:004038C5                 mov     eax, ebx
.text:004038C7                 mov     ebx, [esp+24h]
.text:004038CB                 add     esp, 2Ch
.text:004038CE                 retn
.text:004038CE ; ---------------------------------------------------------------------------
.text:004038CF                 align 10h
.text:004038D0
.text:004038D0 loc_4038D0:                             ; CODE XREF: .text:00403881↑j
.text:004038D0                 mov     ebx, offset dword_406140
.text:004038D5                 jmp     short loc_403883
.text:004038D5 ; ---------------------------------------------------------------------------
.text:004038D7                 align 10h
.text:004038E0                 push    ebp
.text:004038E1                 push    edi
.text:004038E2                 push    esi
.text:004038E3                 push    ebx
.text:004038E4                 sub     esp, 2Ch
.text:004038E7                 mov     ebp, [esp+48h]
.text:004038EB                 call    _errno
.text:004038F0                 mov     edx, [eax]
.text:004038F2                 test    ebp, ebp
.text:004038F4                 mov     ebx, ebp
.text:004038F6                 mov     [esp+28h], edx
.text:004038FA                 jz      loc_4039B0
.text:00403900
.text:00403900 loc_403900:                             ; CODE XREF: .text:004039B5↓j
.text:00403900                 call    _errno
.text:00403905                 mov     edi, [eax]
.text:00403907                 mov     esi, ebp
.text:00403909                 mov     [esp+14h], ebx
.text:0040390D                 mov     ecx, [ebx]
.text:0040390F                 mov     dword ptr [esp], 0
.text:00403916                 mov     edx, [esp+44h]
.text:0040391A                 mov     dword ptr [esp+4], 0
.text:00403922                 mov     eax, [esp+40h]
.text:00403926                 mov     [esp+10h], ecx
.text:0040392A                 mov     [esp+0Ch], edx
.text:0040392E                 mov     [esp+8], eax
.text:00403932                 call    sub_402CF0
.text:00403937                 mov     ebx, eax
.text:00403939                 call    _errno
.text:0040393E                 mov     [eax], edi
.text:00403940                 lea     edi, [ebx+1]
.text:00403943                 mov     [esp], edi
.text:00403946                 call    sub_404540
.text:0040394B                 mov     [esp+24h], eax
.text:0040394F                 test    ebp, ebp
.text:00403951                 jz      short loc_4039A2
.text:00403953
.text:00403953 loc_403953:                             ; CODE XREF: .text:004039A7↓j
.text:00403953                 call    _errno
.text:00403958                 mov     ebp, [eax]
.text:0040395A                 mov     [esp+14h], esi
.text:0040395E                 mov     ecx, [esi]
.text:00403960                 mov     [esp+4], edi
.text:00403964                 mov     edx, [esp+44h]
.text:00403968                 mov     esi, [esp+24h]
.text:0040396C                 mov     [esp+10h], ecx
.text:00403970                 mov     eax, [esp+40h]
.text:00403974                 mov     [esp+0Ch], edx
.text:00403978                 mov     [esp], esi
.text:0040397B                 mov     [esp+8], eax
.text:0040397F                 call    sub_402CF0
.text:00403984                 call    _errno
.text:00403989                 mov     [eax], ebp
.text:0040398B                 call    _errno
.text:00403990                 mov     ebx, [esp+28h]
.text:00403994                 mov     [eax], ebx
.text:00403996                 mov     eax, [esp+24h]
.text:0040399A                 add     esp, 2Ch
.text:0040399D                 pop     ebx
.text:0040399E                 pop     esi
.text:0040399F                 pop     edi
.text:004039A0                 pop     ebp
.text:004039A1                 retn
.text:004039A2 ; ---------------------------------------------------------------------------
.text:004039A2
.text:004039A2 loc_4039A2:                             ; CODE XREF: .text:00403951↑j
.text:004039A2                 mov     esi, offset dword_406140
.text:004039A7                 jmp     short loc_403953
.text:004039A7 ; ---------------------------------------------------------------------------
.text:004039A9                 align 10h
.text:004039B0
.text:004039B0 loc_4039B0:                             ; CODE XREF: .text:004038FA↑j
.text:004039B0                 mov     ebx, offset dword_406140
.text:004039B5                 jmp     loc_403900
.text:004039B5 ; ---------------------------------------------------------------------------
.text:004039BA                 align 10h
.text:004039C0                 sub     esp, 1Ch
.text:004039C3                 mov     edx, [esp+24h]
.text:004039C7                 mov     dword ptr [esp+0Ch], offset dword_406140
.text:004039CF                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:004039D7                 mov     [esp+4], edx
.text:004039DB                 mov     edx, [esp+20h]
.text:004039DF                 mov     [esp], edx
.text:004039E2                 call    sub_403E30
.text:004039E7                 add     esp, 1Ch
.text:004039EA                 retn
.text:004039EA ; ---------------------------------------------------------------------------
.text:004039EB                 align 10h
.text:004039F0                 sub     esp, 1Ch
.text:004039F3                 mov     edx, [esp+20h]
.text:004039F7                 mov     dword ptr [esp+0Ch], offset dword_406140
.text:004039FF                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00403A07                 mov     [esp+4], edx
.text:00403A0B                 mov     dword ptr [esp], 0
.text:00403A12                 call    sub_403E30
.text:00403A17                 add     esp, 1Ch
.text:00403A1A                 retn
.text:00403A1A ; ---------------------------------------------------------------------------
.text:00403A1B                 align 10h
.text:00403A20
.text:00403A20 ; =============== S U B R O U T I N E =======================================
.text:00403A20
.text:00403A20
.text:00403A20 ; int __cdecl sub_403A20(int, int, char *)
.text:00403A20 sub_403A20      proc near               ; CODE XREF: .text:004028AA↑p
.text:00403A20                                         ; sub_4028C0+1A↑p
.text:00403A20
.text:00403A20 var_BC          = dword ptr -0BCh
.text:00403A20 var_B8          = dword ptr -0B8h
.text:00403A20 var_B4          = dword ptr -0B4h
.text:00403A20 var_B0          = dword ptr -0B0h
.text:00403A20 var_AC          = dword ptr -0ACh
.text:00403A20 var_A8          = dword ptr -0A8h
.text:00403A20 var_A4          = dword ptr -0A4h
.text:00403A20 var_A0          = dword ptr -0A0h
.text:00403A20 var_9C          = dword ptr -9Ch
.text:00403A20 var_98          = dword ptr -98h
.text:00403A20 var_94          = dword ptr -94h
.text:00403A20 var_90          = dword ptr -90h
.text:00403A20 var_8C          = dword ptr -8Ch
.text:00403A20 var_7C          = dword ptr -7Ch
.text:00403A20 var_78          = dword ptr -78h
.text:00403A20 var_74          = dword ptr -74h
.text:00403A20 var_70          = dword ptr -70h
.text:00403A20 var_6C          = dword ptr -6Ch
.text:00403A20 var_68          = dword ptr -68h
.text:00403A20 var_64          = dword ptr -64h
.text:00403A20 var_60          = dword ptr -60h
.text:00403A20 var_5C          = dword ptr -5Ch
.text:00403A20 var_4C          = dword ptr -4Ch
.text:00403A20 var_48          = dword ptr -48h
.text:00403A20 var_44          = dword ptr -44h
.text:00403A20 var_40          = dword ptr -40h
.text:00403A20 var_3C          = dword ptr -3Ch
.text:00403A20 var_38          = dword ptr -38h
.text:00403A20 var_34          = dword ptr -34h
.text:00403A20 var_30          = dword ptr -30h
.text:00403A20 var_2C          = dword ptr -2Ch
.text:00403A20 arg_0           = dword ptr  4
.text:00403A20 arg_4           = dword ptr  8
.text:00403A20 arg_8           = dword ptr  0Ch
.text:00403A20
.text:00403A20                 push    ebp
.text:00403A21                 xor     eax, eax
.text:00403A23                 mov     ecx, 8
.text:00403A28                 push    edi
.text:00403A29                 push    esi
.text:00403A2A                 push    ebx
.text:00403A2B                 sub     esp, 0ACh
.text:00403A31                 mov     ebp, [esp+0BCh+arg_4]
.text:00403A38                 cld
.text:00403A39                 lea     edi, [esp+0BCh+var_A8]
.text:00403A3D                 mov     [esp+0BCh+var_AC], ebp
.text:00403A41                 rep stosd
.text:00403A43                 mov     eax, [esp+0BCh+var_8C]
.text:00403A47                 mov     edi, [esp+0BCh+var_AC]
.text:00403A4B                 mov     esi, [esp+0BCh+var_A8]
.text:00403A4F                 mov     [esp+0BCh+var_5C], eax
.text:00403A53                 mov     ebp, [esp+0BCh+var_A4]
.text:00403A57                 mov     eax, [esp+0BCh+var_AC]
.text:00403A5B                 mov     [esp+0BCh+var_7C], edi
.text:00403A5F                 mov     ecx, [esp+0BCh+var_94]
.text:00403A63                 mov     edi, [esp+0BCh+var_A0]
.text:00403A67                 mov     [esp+0BCh+var_78], esi
.text:00403A6B                 mov     edx, [esp+0BCh+var_90]
.text:00403A6F                 mov     esi, [esp+0BCh+var_9C]
.text:00403A73                 mov     [esp+0BCh+var_4C], eax
.text:00403A77                 mov     ebx, [esp+0BCh+var_98]
.text:00403A7B                 mov     eax, [esp+0BCh+var_A8]
.text:00403A7F                 mov     [esp+0BCh+var_74], ebp
.text:00403A83                 mov     [esp+0BCh+var_70], edi
.text:00403A87                 mov     [esp+0BCh+var_6C], esi
.text:00403A8B                 mov     [esp+0BCh+var_68], ebx
.text:00403A8F                 mov     [esp+0BCh+var_64], ecx
.text:00403A93                 mov     [esp+0BCh+var_60], edx
.text:00403A97                 mov     [esp+0BCh+var_48], eax
.text:00403A9B                 mov     [esp+0BCh+var_44], ebp
.text:00403A9F                 mov     [esp+0BCh+var_40], edi
.text:00403AA3                 mov     [esp+0BCh+var_3C], esi
.text:00403AAA                 mov     [esp+0BCh+var_38], ebx
.text:00403AB1                 mov     ebx, [esp+0BCh+var_8C]
.text:00403AB5                 mov     [esp+0BCh+var_30], edx
.text:00403ABC                 mov     edx, [esp+0BCh+arg_8]
.text:00403AC3                 mov     [esp+0BCh+var_34], ecx
.text:00403ACA                 lea     ecx, [esp+0BCh+var_4C]
.text:00403ACE                 mov     [esp+0BCh+var_B8], edx ; char *
.text:00403AD2                 mov     edx, [esp+0BCh+arg_0]
.text:00403AD9                 mov     [esp+0BCh+var_2C], ebx
.text:00403AE0                 mov     [esp+0BCh+var_B0], ecx ; int
.text:00403AE4                 mov     [esp+0BCh+var_B4], 0FFFFFFFFh ; int
.text:00403AEC                 mov     [esp+0BCh+var_BC], edx ; int
.text:00403AEF                 call    sub_403E30
.text:00403AF4                 add     esp, 0ACh
.text:00403AFA                 pop     ebx
.text:00403AFB                 pop     esi
.text:00403AFC                 pop     edi
.text:00403AFD                 pop     ebp
.text:00403AFE                 retn
.text:00403AFE sub_403A20      endp
.text:00403AFE
.text:00403AFE ; ---------------------------------------------------------------------------
.text:00403AFF                 align 10h
.text:00403B00                 push    ebp
.text:00403B01                 xor     eax, eax
.text:00403B03                 mov     ecx, 8
.text:00403B08                 push    edi
.text:00403B09                 push    esi
.text:00403B0A                 push    ebx
.text:00403B0B                 sub     esp, 0ACh
.text:00403B11                 mov     edx, [esp+0C4h]
.text:00403B18                 cld
.text:00403B19                 lea     edi, [esp+14h]
.text:00403B1D                 mov     [esp+10h], edx
.text:00403B21                 rep stosd
.text:00403B23                 mov     eax, [esp+30h]
.text:00403B27                 mov     ebp, [esp+10h]
.text:00403B2B                 mov     edi, [esp+14h]
.text:00403B2F                 mov     [esp+60h], eax
.text:00403B33                 mov     esi, [esp+20h]
.text:00403B37                 mov     eax, [esp+10h]
.text:00403B3B                 mov     [esp+40h], ebp
.text:00403B3F                 mov     ecx, [esp+28h]
.text:00403B43                 mov     ebp, [esp+18h]
.text:00403B47                 mov     [esp+44h], edi
.text:00403B4B                 mov     edx, [esp+2Ch]
.text:00403B4F                 mov     edi, [esp+1Ch]
.text:00403B53                 mov     [esp+70h], eax
.text:00403B57                 mov     ebx, [esp+24h]
.text:00403B5B                 mov     eax, [esp+14h]
.text:00403B5F                 mov     [esp+48h], ebp
.text:00403B63                 mov     [esp+4Ch], edi
.text:00403B67                 mov     [esp+50h], esi
.text:00403B6B                 mov     [esp+54h], ebx
.text:00403B6F                 mov     [esp+58h], ecx
.text:00403B73                 mov     [esp+5Ch], edx
.text:00403B77                 mov     [esp+74h], eax
.text:00403B7B                 mov     [esp+78h], ebp
.text:00403B7F                 mov     [esp+7Ch], edi
.text:00403B83                 mov     [esp+80h], esi
.text:00403B8A                 mov     [esp+84h], ebx
.text:00403B91                 mov     esi, [esp+30h]
.text:00403B95                 lea     ebx, [esp+70h]
.text:00403B99                 mov     [esp+8Ch], edx
.text:00403BA0                 mov     edx, [esp+0C8h]
.text:00403BA7                 mov     [esp+88h], ecx
.text:00403BAE                 mov     ecx, [esp+0CCh]
.text:00403BB5                 mov     [esp+4], edx
.text:00403BB9                 mov     edx, [esp+0C0h]
.text:00403BC0                 mov     [esp+90h], esi
.text:00403BC7                 mov     [esp+0Ch], ebx
.text:00403BCB                 mov     [esp+8], ecx
.text:00403BCF                 mov     [esp], edx
.text:00403BD2                 call    sub_403E30
.text:00403BD7                 add     esp, 0ACh
.text:00403BDD                 pop     ebx
.text:00403BDE                 pop     esi
.text:00403BDF                 pop     edi
.text:00403BE0                 pop     ebp
.text:00403BE1                 retn
.text:00403BE1 ; ---------------------------------------------------------------------------
.text:00403BE2                 align 10h
.text:00403BF0                 push    ebp
.text:00403BF1                 xor     eax, eax
.text:00403BF3                 mov     ecx, 8
.text:00403BF8                 push    edi
.text:00403BF9                 push    esi
.text:00403BFA                 push    ebx
.text:00403BFB                 sub     esp, 0ACh
.text:00403C01                 mov     edi, [esp+0C0h]
.text:00403C08                 cld
.text:00403C09                 mov     [esp+10h], edi
.text:00403C0D                 lea     edi, [esp+14h]
.text:00403C11                 rep stosd
.text:00403C13                 mov     eax, [esp+30h]
.text:00403C17                 mov     esi, [esp+10h]
.text:00403C1B                 mov     ebx, [esp+14h]
.text:00403C1F                 mov     [esp+60h], eax
.text:00403C23                 mov     ebp, [esp+18h]
.text:00403C27                 mov     eax, [esp+10h]
.text:00403C2B                 mov     [esp+40h], esi
.text:00403C2F                 mov     edi, [esp+1Ch]
.text:00403C33                 mov     esi, [esp+20h]
.text:00403C37                 mov     [esp+44h], ebx
.text:00403C3B                 mov     ecx, [esp+28h]
.text:00403C3F                 mov     edx, [esp+2Ch]
.text:00403C43                 mov     [esp+70h], eax
.text:00403C47                 mov     ebx, [esp+24h]
.text:00403C4B                 mov     eax, [esp+14h]
.text:00403C4F                 mov     [esp+48h], ebp
.text:00403C53                 mov     [esp+4Ch], edi
.text:00403C57                 mov     [esp+50h], esi
.text:00403C5B                 mov     [esp+54h], ebx
.text:00403C5F                 mov     [esp+58h], ecx
.text:00403C63                 mov     [esp+5Ch], edx
.text:00403C67                 mov     [esp+74h], eax
.text:00403C6B                 mov     [esp+78h], ebp
.text:00403C6F                 mov     [esp+7Ch], edi
.text:00403C73                 mov     [esp+80h], esi
.text:00403C7A                 mov     [esp+84h], ebx
.text:00403C81                 mov     [esp+8Ch], edx
.text:00403C88                 lea     edx, [esp+70h]
.text:00403C8C                 mov     [esp+88h], ecx
.text:00403C93                 mov     ecx, [esp+30h]
.text:00403C97                 mov     [esp+0Ch], edx
.text:00403C9B                 mov     edx, [esp+0C4h]
.text:00403CA2                 mov     [esp+90h], ecx
.text:00403CA9                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00403CB1                 mov     [esp+4], edx
.text:00403CB5                 mov     dword ptr [esp], 0
.text:00403CBC                 call    sub_403E30
.text:00403CC1                 add     esp, 0ACh
.text:00403CC7                 pop     ebx
.text:00403CC8                 pop     esi
.text:00403CC9                 pop     edi
.text:00403CCA                 pop     ebp
.text:00403CCB                 retn
.text:00403CCB ; ---------------------------------------------------------------------------
.text:00403CCC                 align 10h
.text:00403CD0                 push    edi
.text:00403CD1                 push    esi
.text:00403CD2                 push    ebx
.text:00403CD3                 sub     esp, 40h
.text:00403CD6                 mov     edx, ds:dword_40614C
.text:00403CDC                 mov     ebx, ds:dword_406140
.text:00403CE2                 mov     esi, ds:dword_406148
.text:00403CE8                 mov     edi, ds:dword_406144
.text:00403CEE                 mov     [esp+1Ch], edx
.text:00403CF2                 mov     ecx, ds:dword_406150
.text:00403CF8                 mov     edx, ds:dword_406160
.text:00403CFE                 mov     [esp+10h], ebx
.text:00403D02                 mov     ebx, ds:dword_406154
.text:00403D08                 mov     [esp+30h], edx
.text:00403D0C                 movzx   edx, byte ptr [esp+54h]
.text:00403D11                 mov     [esp+18h], esi
.text:00403D15                 mov     esi, ds:dword_40615C
.text:00403D1B                 mov     [esp+14h], edi
.text:00403D1F                 mov     edi, ds:dword_406158
.text:00403D25                 mov     [esp+20h], ecx
.text:00403D29                 mov     cl, dl
.text:00403D2B                 shr     cl, 5
.text:00403D2E                 mov     [esp+24h], ebx
.text:00403D32                 movzx   ebx, cl
.text:00403D35                 mov     [esp+2Ch], esi
.text:00403D39                 lea     esi, [esp+10h]
.text:00403D3D                 mov     [esp+28h], edi
.text:00403D41                 lea     edi, [esi+ebx*4]
.text:00403D44                 mov     ebx, edx
.text:00403D46                 mov     edx, [edi+4]
.text:00403D49                 and     ebx, 1Fh
.text:00403D4C                 mov     cl, bl
.text:00403D4E                 mov     eax, edx
.text:00403D50                 shr     eax, cl
.text:00403D52                 and     eax, 1
.text:00403D55                 xor     eax, 1
.text:00403D58                 shl     eax, cl
.text:00403D5A                 xor     edx, eax
.text:00403D5C                 mov     [edi+4], edx
.text:00403D5F                 mov     edx, [esp+50h]
.text:00403D63                 mov     [esp+0Ch], esi
.text:00403D67                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00403D6F                 mov     [esp+4], edx
.text:00403D73                 mov     dword ptr [esp], 0
.text:00403D7A                 call    sub_403E30
.text:00403D7F                 add     esp, 40h
.text:00403D82                 pop     ebx
.text:00403D83                 pop     esi
.text:00403D84                 pop     edi
.text:00403D85                 retn
.text:00403D85 ; ---------------------------------------------------------------------------
.text:00403D86                 align 10h
.text:00403D90
.text:00403D90 ; =============== S U B R O U T I N E =======================================
.text:00403D90
.text:00403D90
.text:00403D90 ; int __cdecl sub_403D90(char *)
.text:00403D90 sub_403D90      proc near               ; CODE XREF: sub_402B80+64↑p
.text:00403D90
.text:00403D90 var_4C          = dword ptr -4Ch
.text:00403D90 var_48          = dword ptr -48h
.text:00403D90 var_44          = dword ptr -44h
.text:00403D90 var_40          = dword ptr -40h
.text:00403D90 var_3C          = dword ptr -3Ch
.text:00403D90 var_38          = dword ptr -38h
.text:00403D90 var_34          = dword ptr -34h
.text:00403D90 var_30          = dword ptr -30h
.text:00403D90 var_2C          = dword ptr -2Ch
.text:00403D90 var_28          = dword ptr -28h
.text:00403D90 var_24          = dword ptr -24h
.text:00403D90 var_20          = dword ptr -20h
.text:00403D90 var_1C          = dword ptr -1Ch
.text:00403D90 arg_0           = dword ptr  4
.text:00403D90
.text:00403D90                 sub     esp, 4Ch
.text:00403D93                 mov     ecx, ds:dword_406140
.text:00403D99                 mov     [esp+4Ch+var_44], 0FFFFFFFFh ; int
.text:00403DA1                 mov     edx, ds:dword_406144
.text:00403DA7                 mov     [esp+4Ch+var_4C], 0 ; int
.text:00403DAE                 mov     [esp+4Ch+var_3C], ecx
.text:00403DB2                 mov     ecx, ds:dword_40614C
.text:00403DB8                 mov     [esp+4Ch+var_38], edx
.text:00403DBC                 mov     edx, ds:dword_406148
.text:00403DC2                 mov     [esp+4Ch+var_30], ecx
.text:00403DC6                 mov     ecx, ds:dword_406150
.text:00403DCC                 mov     eax, edx
.text:00403DCE                 shr     eax, 1Ah
.text:00403DD1                 and     eax, 1
.text:00403DD4                 xor     eax, 1
.text:00403DD7                 mov     [esp+4Ch+var_2C], ecx
.text:00403DDB                 shl     eax, 1Ah
.text:00403DDE                 mov     ecx, ds:dword_406154
.text:00403DE4                 xor     edx, eax
.text:00403DE6                 mov     [esp+4Ch+var_34], edx
.text:00403DEA                 mov     edx, [esp+4Ch+arg_0]
.text:00403DEE                 mov     [esp+4Ch+var_28], ecx
.text:00403DF2                 mov     ecx, ds:dword_406158
.text:00403DF8                 mov     [esp+4Ch+var_48], edx ; char *
.text:00403DFC                 mov     [esp+4Ch+var_24], ecx
.text:00403E00                 mov     ecx, ds:dword_40615C
.text:00403E06                 mov     [esp+4Ch+var_20], ecx
.text:00403E0A                 mov     ecx, ds:dword_406160
.text:00403E10                 mov     [esp+4Ch+var_1C], ecx
.text:00403E14                 lea     ecx, [esp+4Ch+var_3C]
.text:00403E18                 mov     [esp+4Ch+var_40], ecx ; int
.text:00403E1C                 call    sub_403E30
.text:00403E21                 add     esp, 4Ch
.text:00403E24                 retn
.text:00403E24 sub_403D90      endp
.text:00403E24
.text:00403E24 ; ---------------------------------------------------------------------------
.text:00403E25                 align 10h
.text:00403E30
.text:00403E30 ; =============== S U B R O U T I N E =======================================
.text:00403E30
.text:00403E30
.text:00403E30 ; int __cdecl sub_403E30(int, char *, int, int)
.text:00403E30 sub_403E30      proc near               ; CODE XREF: .text:004039E2↑p
.text:00403E30                                         ; .text:00403A12↑p ...
.text:00403E30
.text:00403E30 Block           = dword ptr -2Ch
.text:00403E30 var_28          = dword ptr -28h
.text:00403E30 Str             = dword ptr -24h
.text:00403E30 var_20          = dword ptr -20h
.text:00403E30 var_1C          = dword ptr -1Ch
.text:00403E30 var_18          = dword ptr -18h
.text:00403E30 var_14          = dword ptr -14h
.text:00403E30 arg_0           = dword ptr  4
.text:00403E30 arg_4           = dword ptr  8
.text:00403E30 arg_8           = dword ptr  0Ch
.text:00403E30 arg_C           = dword ptr  10h
.text:00403E30
.text:00403E30                 push    ebp
.text:00403E31                 push    edi
.text:00403E32                 push    esi
.text:00403E33                 push    ebx
.text:00403E34                 sub     esp, 1Ch
.text:00403E37                 call    _errno
.text:00403E3C                 mov     edx, [eax]
.text:00403E3E                 mov     eax, [esp+2Ch+arg_0]
.text:00403E42                 mov     [esp+2Ch+var_14], edx
.text:00403E46                 test    eax, eax
.text:00403E48                 js      loc_403FEA
.text:00403E4E                 mov     eax, [esp+2Ch+arg_0]
.text:00403E52                 cmp     dword_405020, eax
.text:00403E58                 ja      short loc_403ED0
.text:00403E5A                 mov     esi, eax
.text:00403E5C                 inc     esi
.text:00403E5D                 cmp     esi, 1FFFFFFFh
.text:00403E63                 ja      loc_403FEF
.text:00403E69                 mov     ebx, off_40502C
.text:00403E6F                 cmp     ebx, offset dword_405024
.text:00403E75                 jz      loc_403FC1
.text:00403E7B
.text:00403E7B loc_403E7B:                             ; CODE XREF: sub_403E30+1B5↓j
.text:00403E7B                 mov     [esp+2Ch+Block], ebx ; void *
.text:00403E7E                 lea     ecx, ds:0[esi*8]
.text:00403E85                 mov     ebp, esi
.text:00403E87                 mov     [esp+2Ch+var_28], ecx ; size_t
.text:00403E8B                 call    sub_4045D0
.text:00403E90                 mov     off_40502C, eax
.text:00403E95                 mov     ebx, dword_405020
.text:00403E9B                 sub     ebp, ebx
.text:00403E9D                 lea     edi, [eax+ebx*8]
.text:00403EA0                 lea     eax, ds:0[ebp*8]
.text:00403EA7                 cmp     eax, 7
.text:00403EAA                 jbe     short loc_403EC0
.text:00403EAC                 test    edi, 4
.text:00403EB2                 jz      short loc_403EC0
.text:00403EB4                 mov     dword ptr [edi], 0
.text:00403EBA                 sub     eax, 4
.text:00403EBD                 add     edi, 4
.text:00403EC0
.text:00403EC0 loc_403EC0:                             ; CODE XREF: sub_403E30+7A↑j
.text:00403EC0                                         ; sub_403E30+82↑j
.text:00403EC0                 cld
.text:00403EC1                 mov     ecx, eax
.text:00403EC3                 shr     ecx, 2
.text:00403EC6                 xor     eax, eax
.text:00403EC8                 rep stosd
.text:00403ECA                 mov     dword_405020, esi
.text:00403ED0
.text:00403ED0 loc_403ED0:                             ; CODE XREF: sub_403E30+28↑j
.text:00403ED0                 mov     esi, off_40502C
.text:00403ED6                 mov     eax, [esp+2Ch+arg_0]
.text:00403EDA                 mov     ebp, [esi+eax*8]
.text:00403EDD                 mov     edi, [esi+eax*8+4]
.text:00403EE1                 mov     esi, [esp+2Ch+arg_C]
.text:00403EE5                 test    esi, esi
.text:00403EE7                 jz      loc_403FB7
.text:00403EED
.text:00403EED loc_403EED:                             ; CODE XREF: sub_403E30+18C↓j
.text:00403EED                 call    _errno
.text:00403EF2                 mov     ebx, [eax]
.text:00403EF4                 mov     [esp+2Ch+var_18], esi ; int
.text:00403EF8                 mov     ecx, [esi]
.text:00403EFA                 mov     [esp+2Ch+Block], edi ; int
.text:00403EFD                 mov     edx, [esp+2Ch+arg_8]
.text:00403F01                 mov     [esp+2Ch+var_28], ebp ; int
.text:00403F05                 mov     [esp+2Ch+var_1C], ecx ; int
.text:00403F09                 mov     ecx, [esp+2Ch+arg_4]
.text:00403F0D                 mov     [esp+2Ch+var_20], edx ; int
.text:00403F11                 mov     [esp+2Ch+Str], ecx ; Str
.text:00403F15                 call    sub_402CF0
.text:00403F1A                 mov     esi, eax
.text:00403F1C                 call    _errno
.text:00403F21                 mov     [eax], ebx
.text:00403F23                 cmp     ebp, esi
.text:00403F25                 ja      short loc_403F9B
.text:00403F27                 lea     ebp, [esi+1]
.text:00403F2A                 mov     ebx, off_40502C
.text:00403F30                 cmp     edi, offset unk_406040
.text:00403F36                 mov     esi, [esp+2Ch+arg_0]
.text:00403F3A                 mov     [ebx+esi*8], ebp
.text:00403F3D                 jz      short loc_403F4D
.text:00403F3F                 mov     [esp+2Ch+Block], edi ; Block
.text:00403F42                 call    free
.text:00403F47                 mov     ebx, off_40502C
.text:00403F4D
.text:00403F4D loc_403F4D:                             ; CODE XREF: sub_403E30+10D↑j
.text:00403F4D                 mov     [esp+2Ch+Block], ebp ; size_t
.text:00403F50                 call    sub_404540
.text:00403F55                 mov     esi, [esp+2Ch+arg_C]
.text:00403F59                 mov     edi, eax
.text:00403F5B                 mov     eax, [esp+2Ch+arg_0]
.text:00403F5F                 test    esi, esi
.text:00403F61                 mov     [ebx+eax*8+4], edi
.text:00403F65                 jz      short loc_403FB0
.text:00403F67
.text:00403F67 loc_403F67:                             ; CODE XREF: sub_403E30+185↓j
.text:00403F67                 call    _errno
.text:00403F6C                 mov     ebx, [eax]
.text:00403F6E                 mov     [esp+2Ch+var_18], esi ; int
.text:00403F72                 mov     ecx, [esi]
.text:00403F74                 mov     [esp+2Ch+Block], edi ; int
.text:00403F77                 mov     edx, [esp+2Ch+arg_8]
.text:00403F7B                 mov     [esp+2Ch+var_28], ebp ; int
.text:00403F7F                 mov     [esp+2Ch+var_1C], ecx ; int
.text:00403F83                 mov     ecx, [esp+2Ch+arg_4]
.text:00403F87                 mov     [esp+2Ch+var_20], edx ; int
.text:00403F8B                 mov     [esp+2Ch+Str], ecx ; Str
.text:00403F8F                 call    sub_402CF0
.text:00403F94                 call    _errno
.text:00403F99                 mov     [eax], ebx
.text:00403F9B
.text:00403F9B loc_403F9B:                             ; CODE XREF: sub_403E30+F5↑j
.text:00403F9B                 call    _errno
.text:00403FA0                 mov     ebp, [esp+2Ch+var_14]
.text:00403FA4                 mov     [eax], ebp
.text:00403FA6                 add     esp, 1Ch
.text:00403FA9                 mov     eax, edi
.text:00403FAB                 pop     ebx
.text:00403FAC                 pop     esi
.text:00403FAD                 pop     edi
.text:00403FAE                 pop     ebp
.text:00403FAF                 retn
.text:00403FB0 ; ---------------------------------------------------------------------------
.text:00403FB0
.text:00403FB0 loc_403FB0:                             ; CODE XREF: sub_403E30+135↑j
.text:00403FB0                 mov     esi, offset dword_406140
.text:00403FB5                 jmp     short loc_403F67
.text:00403FB7 ; ---------------------------------------------------------------------------
.text:00403FB7
.text:00403FB7 loc_403FB7:                             ; CODE XREF: sub_403E30+B7↑j
.text:00403FB7                 mov     esi, offset dword_406140
.text:00403FBC                 jmp     loc_403EED
.text:00403FC1 ; ---------------------------------------------------------------------------
.text:00403FC1
.text:00403FC1 loc_403FC1:                             ; CODE XREF: sub_403E30+45↑j
.text:00403FC1                 mov     [esp+2Ch+Block], 8 ; size_t
.text:00403FC8                 call    sub_404540
.text:00403FCD                 mov     off_40502C, eax
.text:00403FD2                 mov     edi, dword_405024
.text:00403FD8                 mov     ebx, eax
.text:00403FDA                 mov     ecx, off_405028
.text:00403FE0                 mov     [eax], edi
.text:00403FE2                 mov     [eax+4], ecx
.text:00403FE5                 jmp     loc_403E7B
.text:00403FEA ; ---------------------------------------------------------------------------
.text:00403FEA
.text:00403FEA loc_403FEA:                             ; CODE XREF: sub_403E30+18↑j
.text:00403FEA                 call    abort
.text:00403FEF ; ---------------------------------------------------------------------------
.text:00403FEF
.text:00403FEF loc_403FEF:                             ; CODE XREF: sub_403E30+33↑j
.text:00403FEF                 call    sub_4047F0
.text:00403FEF sub_403E30      endp
.text:00403FEF
.text:00403FEF ; ---------------------------------------------------------------------------
.text:00403FF4                 align 10h
.text:00404000 aCopyrightC2005 db 'Copyright (C) 2005 Free Software Foundation, Inc.',0
.text:00404000                                         ; DATA XREF: .data:Buffer↓o
.text:00404032 ; const char Format[12]
.text:00404032 Format          db '%s (%s) %s',0Ah,0   ; DATA XREF: sub_4042F0+50↓o
.text:0040403E aWrittenByS     db 'Written by %s.',0Ah,0
.text:0040404E                 align 20h
.text:00404060
.text:00404060 ; =============== S U B R O U T I N E =======================================
.text:00404060
.text:00404060
.text:00404060 sub_404060      proc near               ; DATA XREF: sub_4042F0+100↓o
.text:00404060                 push    esp
.text:00404061                 push    69207369h
.text:00404066                 jnb     short loc_404088
.text:00404068                 db      66h
.text:00404068                 jb      short near ptr 40D0h
.text:0040406B                 and     gs:[ebx+6Fh], dh
.text:0040406F                 db      66h
.text:0040406F                 jz      short near ptr 40E9h
.text:00404072                 popa
.text:00404073                 jb      short loc_4040DA
.text:00404075                 cmp     esp, [eax]
.text:00404077                 jnb     short near ptr loc_4040DC+2
.text:00404079                 and     gs:[eax+ebp*2+65h], dh
.text:0040407E                 and     [ebx+6Fh], dh
.text:00404081                 jnz     short loc_4040F5
.text:00404083                 arpl    [ebp+20h], sp
.text:00404086                 outsw
.text:00404088
.text:00404088 loc_404088:                             ; CODE XREF: sub_404060+6↑j
.text:00404088                 jb      short loc_4040AA
.text:0040408A                 arpl    [edi+70h], bp
.text:0040408D                 jns     short loc_4040F8
.text:0040408F                 outsb
.text:00404090                 and     [bp+di+6Fh], ah
.text:00404094                 outsb
.text:00404095                 imul    esi, fs:[ecx+ebp*2+6Fh], 202E736Eh
.text:0040409E                 and     [eax+ebp*2+65h], dl
.text:004040A2                 jb      short near ptr loc_404108+1
.text:004040A4                 and     [ecx+73h], ch
.text:004040A7                 and     [esi+4Fh], cl
.text:004040AA
.text:004040AA loc_4040AA:                             ; CODE XREF: sub_404060:loc_404088↑j
.text:004040AA                 or      dh, [edi+61h]
.text:004040AD                 jb      short loc_404121
.text:004040AF                 popa
.text:004040B0                 outsb
.text:004040B1                 jz      short loc_40412C
.text:004040B3                 cmp     esp, [eax]
.text:004040B5                 outsb
.text:004040B6                 outsd
.text:004040B7                 jz      short loc_4040D9
.text:004040B9                 db      65h
.text:004040B9                 jbe     short loc_404121
.text:004040BC                 outsb
.text:004040BD                 and     [esi+6Fh], ah
.text:004040C0                 jb      short near ptr loc_4040E0+2
.text:004040C2                 dec     ebp
.text:004040C3                 inc     ebp
.text:004040C4                 push    edx
.text:004040C5                 inc     ebx
.text:004040C6                 dec     eax
.text:004040C7                 inc     ecx
.text:004040C8                 dec     esi
.text:004040C9                 push    esp
.text:004040CA                 inc     ecx
.text:004040CB                 inc     edx
.text:004040CC                 dec     ecx
.text:004040CD                 dec     esp
.text:004040CE                 dec     ecx
.text:004040CF                 push    esp
.text:004040D0                 pop     ecx
.text:004040D1                 and     [edi+72h], ch
.text:004040D4                 and     [esi+49h], al
.text:004040D7                 push    esp
.text:004040D8                 dec     esi
.text:004040D9
.text:004040D9 loc_4040D9:                             ; CODE XREF: sub_404060+57↑j
.text:004040D9                 inc     ebp
.text:004040DA
.text:004040DA loc_4040DA:                             ; CODE XREF: sub_404060+13↑j
.text:004040DA                 push    ebx
.text:004040DB                 push    ebx
.text:004040DC
.text:004040DC loc_4040DC:                             ; CODE XREF: sub_404060+17↑j
.text:004040DC                 and     [esi+4Fh], al
.text:004040DF                 push    edx
.text:004040E0
.text:004040E0 loc_4040E0:                             ; CODE XREF: sub_404060+60↑j
.text:004040E0                 and     [ecx+20h], al
.text:004040E3                 push    eax
.text:004040E4                 inc     ecx
.text:004040E5                 push    edx
.text:004040E6                 push    esp
.text:004040E7                 dec     ecx
.text:004040E8                 inc     ebx
.text:004040E9                 push    ebp
.text:004040EA                 dec     esp
.text:004040EB                 inc     ecx
.text:004040EC                 push    edx
.text:004040ED                 and     [eax+55h], dl
.text:004040F0                 push    edx
.text:004040F1                 push    eax
.text:004040F2                 dec     edi
.text:004040F3                 push    ebx
.text:004040F4                 inc     ebp
.text:004040F5
.text:004040F5 loc_4040F5:                             ; CODE XREF: sub_404060+21↑j
.text:004040F5                 or      al, cs:[eax]
.text:004040F8
.text:004040F8 loc_4040F8:                             ; CODE XREF: sub_404060+2D↑j
.text:004040F8                                         ; DATA XREF: sub_4042F0:loc_404431↓o
.text:004040F8                 push    edi
.text:004040F9                 jb      short near ptr loc_404163+1
.text:004040FB                 jz      short near ptr loc_404170+1
.text:004040FD                 outs    dx, byte ptr gs:[esi]
.text:004040FF                 and     [edx+79h], ah
.text:00404102                 and     ds:6E612073h, ah
.text:00404108
.text:00404108 loc_404108:                             ; CODE XREF: sub_404060+42↑j
.text:00404108                 and     fs:0A2E73h, ah
.text:0040410F
.text:0040410F loc_40410F:                             ; DATA XREF: sub_4042F0:loc_40443D↓o
.text:0040410F                 push    edi
.text:00404110                 jb      short near ptr loc_40417A+1
.text:00404112                 jz      short loc_404188
.text:00404114                 outs    dx, byte ptr gs:[esi]
.text:00404116                 and     [edx+79h], ah
.text:00404119                 and     ds:25202C73h, ah
.text:0040411F                 jnb     short near ptr loc_40414A+3
.text:00404121
.text:00404121 loc_404121:                             ; CODE XREF: sub_404060+4D↑j
.text:00404121                                         ; sub_404060+59↑j
.text:00404121                 and     [ecx+6Eh], ah
.text:00404124                 and     fs:0A2E73h, ah
.text:0040412B                 nop
.text:0040412C
.text:0040412C loc_40412C:                             ; CODE XREF: sub_404060+51↑j
.text:0040412C                 nop
.text:0040412D                 nop
.text:0040412E                 nop
.text:0040412F                 nop
.text:00404130                 nop
.text:00404131                 nop
.text:00404132                 nop
.text:00404133                 nop
.text:00404134                 nop
.text:00404135                 nop
.text:00404136                 nop
.text:00404137                 nop
.text:00404138                 nop
.text:00404139                 nop
.text:0040413A                 nop
.text:0040413B                 nop
.text:0040413C                 nop
.text:0040413D                 nop
.text:0040413E                 nop
.text:0040413F                 nop
.text:0040413F sub_404060      endp ; sp-analysis failed
.text:0040413F
.text:00404140
.text:00404140 ; =============== S U B R O U T I N E =======================================
.text:00404140
.text:00404140
.text:00404140 sub_404140      proc near               ; DATA XREF: sub_4042F0:loc_404449↓o
.text:00404140                 push    edi
.text:00404141                 jb      short near ptr loc_4041AA+2
.text:00404143                 jz      short near ptr loc_4041B8+1
.text:00404145                 outs    dx, byte ptr gs:[esi]
.text:00404147                 and     [edx+79h], ah
.text:0040414A
.text:0040414A loc_40414A:                             ; CODE XREF: sub_404060+BF↑j
.text:0040414A                 and     ds:25202C73h, ah
.text:00404150                 jnb     short near ptr loc_40417D+1
.text:00404152                 and     ds:610A2C73h, ah
.text:00404158                 outsb
.text:00404159                 and     fs:0A2E73h, ah
.text:00404160
.text:00404160 loc_404160:                             ; DATA XREF: sub_4042F0:loc_404455↓o
.text:00404160                 push    edi
.text:00404161                 jb      short loc_4041CC
.text:00404163
.text:00404163 loc_404163:                             ; CODE XREF: sub_404060+99↑j
.text:00404163                 jz      short loc_4041D9
.text:00404165                 outs    dx, byte ptr gs:[esi]
.text:00404167                 and     [edx+79h], ah
.text:0040416A                 and     ds:25202C73h, ah
.text:00404170
.text:00404170 loc_404170:                             ; CODE XREF: sub_404060+9B↑j
.text:00404170                 jnb     short loc_40419E
.text:00404172                 and     ds:250A2C73h, ah
.text:00404178                 jnb     short near ptr loc_4041A5+1
.text:0040417A
.text:0040417A loc_40417A:                             ; CODE XREF: sub_404060+B0↑j
.text:0040417A                 and     [ecx+6Eh], ah
.text:0040417D
.text:0040417D loc_40417D:                             ; CODE XREF: sub_404140+10↑j
.text:0040417D                 and     fs:0A2E73h, ah
.text:00404184                 nop
.text:00404185                 nop
.text:00404186                 nop
.text:00404187                 nop
.text:00404188
.text:00404188 loc_404188:                             ; CODE XREF: sub_404060+B2↑j
.text:00404188                 nop
.text:00404189                 nop
.text:0040418A                 nop
.text:0040418B                 nop
.text:0040418C                 nop
.text:0040418D                 nop
.text:0040418E                 nop
.text:0040418F                 nop
.text:00404190                 nop
.text:00404191                 nop
.text:00404192                 nop
.text:00404193                 nop
.text:00404194                 nop
.text:00404195                 nop
.text:00404196                 nop
.text:00404197                 nop
.text:00404198                 nop
.text:00404199                 nop
.text:0040419A                 nop
.text:0040419B                 nop
.text:0040419C                 nop
.text:0040419D                 nop
.text:0040419E
.text:0040419E loc_40419E:                             ; CODE XREF: sub_404140:loc_404170↑j
.text:0040419E                 nop
.text:0040419F                 nop
.text:0040419F sub_404140      endp ; sp-analysis failed
.text:0040419F
.text:004041A0
.text:004041A0 ; =============== S U B R O U T I N E =======================================
.text:004041A0
.text:004041A0
.text:004041A0 sub_4041A0      proc near               ; DATA XREF: sub_4042F0:loc_404461↓o
.text:004041A0                 push    edi
.text:004041A1                 jb      short loc_40420C
.text:004041A3                 jz      short loc_404219
.text:004041A5
.text:004041A5 loc_4041A5:                             ; CODE XREF: sub_404140+38↑j
.text:004041A5                 outs    dx, byte ptr gs:[esi]
.text:004041A7                 and     [edx+79h], ah
.text:004041AA
.text:004041AA loc_4041AA:                             ; CODE XREF: sub_404140+1↑j
.text:004041AA                 and     ds:25202C73h, ah
.text:004041B0                 jnb     short loc_4041DE
.text:004041B2                 and     ds:250A2C73h, ah
.text:004041B8
.text:004041B8 loc_4041B8:                             ; CODE XREF: sub_404140+3↑j
.text:004041B8                 jnb     short near ptr loc_4041E5+1
.text:004041BA                 and     ds:61202C73h, ah
.text:004041C0                 outsb
.text:004041C1                 and     fs:0A2E73h, ah
.text:004041C8                 nop
.text:004041C9                 nop
.text:004041CA                 nop
.text:004041CB                 nop
.text:004041CC
.text:004041CC loc_4041CC:                             ; CODE XREF: sub_404140+21↑j
.text:004041CC                 nop
.text:004041CD                 nop
.text:004041CE                 nop
.text:004041CF                 nop
.text:004041D0                 nop
.text:004041D1                 nop
.text:004041D2                 nop
.text:004041D3                 nop
.text:004041D4                 nop
.text:004041D5                 nop
.text:004041D6                 nop
.text:004041D7                 nop
.text:004041D8                 nop
.text:004041D9
.text:004041D9 loc_4041D9:                             ; CODE XREF: sub_404140:loc_404163↑j
.text:004041D9                 nop
.text:004041DA                 nop
.text:004041DB                 nop
.text:004041DC                 nop
.text:004041DD                 nop
.text:004041DE
.text:004041DE loc_4041DE:                             ; CODE XREF: sub_4041A0+10↑j
.text:004041DE                 nop
.text:004041DF                 nop
.text:004041DF sub_4041A0      endp ; sp-analysis failed
.text:004041DF
.text:004041E0
.text:004041E0 ; =============== S U B R O U T I N E =======================================
.text:004041E0
.text:004041E0
.text:004041E0 sub_4041E0      proc near               ; DATA XREF: sub_4042F0:loc_40446D↓o
.text:004041E0                 push    edi
.text:004041E1                 jb      short near ptr loc_404249+3
.text:004041E3                 jz      short loc_404259
.text:004041E5
.text:004041E5 loc_4041E5:                             ; CODE XREF: sub_4041A0:loc_4041B8↑j
.text:004041E5                 outs    dx, byte ptr gs:[esi]
.text:004041E7                 and     [edx+79h], ah
.text:004041EA                 and     ds:25202C73h, ah
.text:004041F0                 jnb     short loc_40421E
.text:004041F2                 and     ds:250A2C73h, ah
.text:004041F8                 jnb     short near ptr loc_404225+1
.text:004041FA                 and     ds:25202C73h, ah
.text:00404200                 jnb     short near ptr loc_40422A+4
.text:00404202                 and     [ecx+6Eh], ah
.text:00404205                 and     fs:0A2E73h, ah
.text:0040420C
.text:0040420C loc_40420C:                             ; CODE XREF: sub_4041A0+1↑j
.text:0040420C                 nop
.text:0040420D                 nop
.text:0040420E                 nop
.text:0040420F                 nop
.text:00404210                 nop
.text:00404211                 nop
.text:00404212                 nop
.text:00404213                 nop
.text:00404214                 nop
.text:00404215                 nop
.text:00404216                 nop
.text:00404217                 nop
.text:00404218                 nop
.text:00404219
.text:00404219 loc_404219:                             ; CODE XREF: sub_4041A0+3↑j
.text:00404219                 nop
.text:0040421A                 nop
.text:0040421B                 nop
.text:0040421C                 nop
.text:0040421D                 nop
.text:0040421E
.text:0040421E loc_40421E:                             ; CODE XREF: sub_4041E0+10↑j
.text:0040421E                 nop
.text:0040421F                 nop
.text:0040421F sub_4041E0      endp ; sp-analysis failed
.text:0040421F
.text:00404220
.text:00404220 ; =============== S U B R O U T I N E =======================================
.text:00404220
.text:00404220
.text:00404220 sub_404220      proc near               ; DATA XREF: sub_4042F0:loc_404479↓o
.text:00404220                 push    edi
.text:00404221                 jb      short near ptr loc_40428A+2
.text:00404223                 jz      short near ptr loc_404294+5
.text:00404225
.text:00404225 loc_404225:                             ; CODE XREF: sub_4041E0+18↑j
.text:00404225                 outs    dx, byte ptr gs:[esi]
.text:00404227                 and     [edx+79h], ah
.text:0040422A
.text:0040422A loc_40422A:                             ; CODE XREF: sub_4041E0+20↑j
.text:0040422A                 and     ds:25202C73h, ah
.text:00404230                 jnb     short loc_40425E
.text:00404232                 and     ds:250A2C73h, ah
.text:00404238                 jnb     short near ptr loc_404265+1
.text:0040423A                 and     ds:25202C73h, ah
.text:00404240                 jnb     short near ptr loc_40426A+4
.text:00404242                 and     ds:610A2C73h, ah
.text:00404248                 outsb
.text:00404249
.text:00404249 loc_404249:                             ; CODE XREF: sub_4041E0+1↑j
.text:00404249                 and     fs:0A2E73h, ah
.text:00404250                 nop
.text:00404251                 nop
.text:00404252                 nop
.text:00404253                 nop
.text:00404254                 nop
.text:00404255                 nop
.text:00404256                 nop
.text:00404257                 nop
.text:00404258                 nop
.text:00404259
.text:00404259 loc_404259:                             ; CODE XREF: sub_4041E0+3↑j
.text:00404259                 nop
.text:0040425A                 nop
.text:0040425B                 nop
.text:0040425C                 nop
.text:0040425D                 nop
.text:0040425E
.text:0040425E loc_40425E:                             ; CODE XREF: sub_404220+10↑j
.text:0040425E                 nop
.text:0040425F                 nop
.text:0040425F sub_404220      endp ; sp-analysis failed
.text:0040425F
.text:00404260
.text:00404260 ; =============== S U B R O U T I N E =======================================
.text:00404260
.text:00404260
.text:00404260 sub_404260      proc near               ; DATA XREF: sub_4042F0:loc_404485↓o
.text:00404260                 push    edi
.text:00404261                 jb      short near ptr loc_4042CA+2
.text:00404263                 jz      short near ptr loc_4042D5+4
.text:00404265
.text:00404265 loc_404265:                             ; CODE XREF: sub_404220+18↑j
.text:00404265                 outs    dx, byte ptr gs:[esi]
.text:00404267                 and     [edx+79h], ah
.text:0040426A
.text:0040426A loc_40426A:                             ; CODE XREF: sub_404220+20↑j
.text:0040426A                 and     ds:25202C73h, ah
.text:00404270                 jnb     short near ptr loc_40429A+4
.text:00404272                 and     ds:250A2C73h, ah
.text:00404278                 jnb     short near ptr loc_4042A5+1
.text:0040427A                 and     ds:25202C73h, ah
.text:00404280                 jnb     short near ptr loc_4042AA+4
.text:00404282                 and     ds:250A2C73h, ah
.text:00404288                 jnb     short near ptr loc_4042B2+4
.text:0040428A
.text:0040428A loc_40428A:                             ; CODE XREF: sub_404220+1↑j
.text:0040428A                 and     [ecx+6Eh], ah
.text:0040428D                 and     fs:0A2E73h, ah
.text:00404294
.text:00404294 loc_404294:                             ; CODE XREF: sub_404220+3↑j
.text:00404294                 lea     esi, [esi+0]
.text:0040429A
.text:0040429A loc_40429A:                             ; CODE XREF: sub_404260+10↑j
.text:0040429A                 lea     edi, [edi+0]
.text:004042A0
.text:004042A0 loc_4042A0:                             ; DATA XREF: sub_4042F0:def_40435D↓o
.text:004042A0                 push    edi
.text:004042A1                 jb      short near ptr loc_40430B+1
.text:004042A3                 jz      short near ptr loc_404318+1
.text:004042A5
.text:004042A5 loc_4042A5:                             ; CODE XREF: sub_404260+18↑j
.text:004042A5                 outs    dx, byte ptr gs:[esi]
.text:004042A7                 and     [edx+79h], ah
.text:004042AA
.text:004042AA loc_4042AA:                             ; CODE XREF: sub_404260+20↑j
.text:004042AA                 and     ds:25202C73h, ah
.text:004042B0                 jnb     short near ptr loc_4042DC+2
.text:004042B2
.text:004042B2 loc_4042B2:                             ; CODE XREF: sub_404260+28↑j
.text:004042B2                 and     ds:250A2C73h, ah
.text:004042B8                 jnb     short near ptr loc_4042E3+3
.text:004042BA                 and     ds:25202C73h, ah
.text:004042C0                 jnb     short near ptr loc_4042E9+5
.text:004042C2                 and     ds:250A2C73h, ah
.text:004042C8                 jnb     short near ptr loc_4042F4+2
.text:004042CA
.text:004042CA loc_4042CA:                             ; CODE XREF: sub_404260+1↑j
.text:004042CA                 and     ds:61202C73h, ah
.text:004042D0                 outsb
.text:004042D1                 and     fs:[edi+74h], ch
.text:004042D5
.text:004042D5 loc_4042D5:                             ; CODE XREF: sub_404260+3↑j
.text:004042D5                 push    2E737265h
.text:004042DA                 or      al, [eax]
.text:004042DC
.text:004042DC loc_4042DC:                             ; CODE XREF: sub_404260+50↑j
.text:004042DC                                         ; DATA XREF: sub_4042F0+1B5↓o
.text:004042DC                 and     eax, 73252073h
.text:004042E1                 or      al, [eax]
.text:004042E3
.text:004042E3 loc_4042E3:                             ; CODE XREF: sub_404260+58↑j
.text:004042E3                 lea     esi, [esi+0]
.text:004042E9
.text:004042E9 loc_4042E9:                             ; CODE XREF: sub_404260+60↑j
.text:004042E9                 lea     edi, [edi+0]
.text:004042E9 sub_404260      endp ; sp-analysis failed
.text:004042E9
.text:004042F0
.text:004042F0 ; =============== S U B R O U T I N E =======================================
.text:004042F0
.text:004042F0
.text:004042F0 ; int __cdecl sub_4042F0(FILE *, FILE *, int, int, va_list)
.text:004042F0 sub_4042F0      proc near               ; CODE XREF: sub_402A90+A5↑p
.text:004042F0                                         ; .text:004044EA↓p
.text:004042F0
.text:004042F0 Stream          = dword ptr -2Ch
.text:004042F0 Format          = dword ptr -28h
.text:004042F0 ArgList         = dword ptr -24h
.text:004042F0 var_20          = dword ptr -20h
.text:004042F0 var_1C          = dword ptr -1Ch
.text:004042F0 var_14          = dword ptr -14h
.text:004042F0 arg_0           = dword ptr  4
.text:004042F0 arg_4           = dword ptr  8
.text:004042F0 arg_8           = dword ptr  0Ch
.text:004042F0 arg_C           = dword ptr  10h
.text:004042F0 arg_10          = dword ptr  14h
.text:004042F0
.text:004042F0                 push    ebp
.text:004042F1                 push    edi
.text:004042F2                 push    esi
.text:004042F3                 push    ebx
.text:004042F4
.text:004042F4 loc_4042F4:                             ; CODE XREF: sub_404260+68↑j
.text:004042F4                 sub     esp, 1Ch
.text:004042F7                 xor     ebx, ebx
.text:004042F9                 mov     edi, [esp+2Ch+arg_10]
.text:004042FD                 mov     edx, [esp+2Ch+arg_8]
.text:00404301                 mov     esi, [esp+2Ch+arg_0]
.text:00404305                 mov     eax, [edi]
.text:00404307                 mov     ecx, [esp+2Ch+arg_4]
.text:0040430B
.text:0040430B loc_40430B:                             ; CODE XREF: sub_404260+41↑j
.text:0040430B                 mov     [esp+2Ch+var_14], edx
.text:0040430F                 mov     ebp, [esp+2Ch+arg_C]
.text:00404313                 lea     edx, [edi+4]
.text:00404316                 test    eax, eax
.text:00404318
.text:00404318 loc_404318:                             ; CODE XREF: sub_404260+43↑j
.text:00404318                 jz      short loc_40432C
.text:0040431A                 lea     esi, [esi+0]
.text:00404320
.text:00404320 loc_404320:                             ; CODE XREF: sub_4042F0+3A↓j
.text:00404320                 mov     eax, edx
.text:00404322                 inc     ebx
.text:00404323                 mov     eax, [eax]
.text:00404325                 add     edx, 4
.text:00404328                 test    eax, eax
.text:0040432A                 jnz     short loc_404320
.text:0040432C
.text:0040432C loc_40432C:                             ; CODE XREF: sub_4042F0:loc_404318↑j
.text:0040432C                 test    ecx, ecx
.text:0040432E                 jz      loc_40449D
.text:00404334                 mov     [esp+2Ch+var_1C], ebp
.text:00404338                 mov     edx, [esp+2Ch+var_14]
.text:0040433C                 mov     [esp+2Ch+ArgList], ecx
.text:00404340                 mov     [esp+2Ch+Format], offset Format ; Format
.text:00404348                 mov     [esp+2Ch+var_20], edx
.text:0040434C                 mov     [esp+2Ch+Stream], esi ; Stream
.text:0040434F                 call    fprintf
.text:00404354
.text:00404354 loc_404354:                             ; CODE XREF: sub_4042F0+1C9↓j
.text:00404354                 cmp     ebx, 9          ; switch 10 cases
.text:00404357                 ja      def_40435D      ; jumptable 0040435D default case
.text:0040435D                 jmp     ds:jpt_40435D[ebx*4] ; switch jump
.text:0040435D ; ---------------------------------------------------------------------------
.text:00404364 jpt_40435D      dd offset loc_40438C    ; DATA XREF: sub_4042F0+6D↑r
.text:00404364                 dd offset loc_404391    ; jump table for switch statement
.text:00404364                 dd offset loc_404431
.text:00404364                 dd offset loc_40443D
.text:00404364                 dd offset loc_404449
.text:00404364                 dd offset loc_404455
.text:00404364                 dd offset loc_404461
.text:00404364                 dd offset loc_40446D
.text:00404364                 dd offset loc_404479
.text:00404364                 dd offset loc_404485
.text:0040438C ; ---------------------------------------------------------------------------
.text:0040438C
.text:0040438C loc_40438C:                             ; CODE XREF: sub_4042F0+6D↑j
.text:0040438C                                         ; DATA XREF: sub_4042F0:jpt_40435D↑o
.text:0040438C                 call    abort           ; jumptable 0040435D case 0
.text:00404391 ; ---------------------------------------------------------------------------
.text:00404391
.text:00404391 loc_404391:                             ; CODE XREF: sub_4042F0+6D↑j
.text:00404391                                         ; DATA XREF: sub_4042F0:jpt_40435D↑o
.text:00404391                 mov     [esp+2Ch+Stream], 40403Eh ; jumptable 0040435D case 1
.text:00404398                 nop
.text:00404399                 lea     esi, [esi+0]
.text:004043A0
.text:004043A0 loc_4043A0:                             ; CODE XREF: sub_4042F0+148↓j
.text:004043A0                                         ; sub_4042F0+154↓j ...
.text:004043A0                 call    ds:libintl_gettext
.text:004043A6                 mov     [esp+2Ch+ArgList], edi ; ArgList
.text:004043AA                 mov     [esp+2Ch+Stream], esi ; Stream
.text:004043AD                 mov     [esp+2Ch+Format], eax ; Format
.text:004043B1                 call    vfprintf
.text:004043B6                 mov     ebx, [esi+4]
.text:004043B9                 dec     ebx
.text:004043BA                 test    ebx, ebx
.text:004043BC                 mov     [esi+4], ebx
.text:004043BF                 js      short loc_40441F
.text:004043C1                 mov     edi, [esi]
.text:004043C3                 mov     byte ptr [edi], 0Ah
.text:004043C6                 inc     dword ptr [esi]
.text:004043C8
.text:004043C8 loc_4043C8:                             ; CODE XREF: sub_4042F0+13F↓j
.text:004043C8                 mov     [esp+2Ch+Format], esi ; Stream
.text:004043CC                 mov     edx, Buffer
.text:004043D2                 mov     [esp+2Ch+Stream], edx ; Buffer
.text:004043D5                 call    fputs
.text:004043DA                 mov     ebp, [esi+4]
.text:004043DD                 dec     ebp
.text:004043DE                 test    ebp, ebp
.text:004043E0                 mov     [esi+4], ebp
.text:004043E3                 js      short loc_40440D
.text:004043E5                 mov     ecx, [esi]
.text:004043E7                 mov     byte ptr [ecx], 0Ah
.text:004043EA                 inc     dword ptr [esi]
.text:004043EC
.text:004043EC loc_4043EC:                             ; CODE XREF: sub_4042F0+12D↓j
.text:004043EC                 mov     [esp+2Ch+arg_4], esi ; Stream
.text:004043F0                 mov     [esp+2Ch+Stream], offset sub_404060
.text:004043F7                 call    ds:libintl_gettext
.text:004043FD                 mov     [esp+2Ch+arg_0], eax ; Buffer
.text:00404401                 add     esp, 1Ch
.text:00404404                 pop     ebx
.text:00404405                 pop     esi
.text:00404406                 pop     edi
.text:00404407                 pop     ebp
.text:00404408                 jmp     fputs
.text:0040440D ; ---------------------------------------------------------------------------
.text:0040440D
.text:0040440D loc_40440D:                             ; CODE XREF: sub_4042F0+F3↑j
.text:0040440D                 mov     [esp+2Ch+Format], esi ; File
.text:00404411                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:00404418                 call    _flsbuf
.text:0040441D                 jmp     short loc_4043EC
.text:0040441F ; ---------------------------------------------------------------------------
.text:0040441F
.text:0040441F loc_40441F:                             ; CODE XREF: sub_4042F0+CF↑j
.text:0040441F                 mov     [esp+2Ch+Format], esi ; File
.text:00404423                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:0040442A                 call    _flsbuf
.text:0040442F                 jmp     short loc_4043C8
.text:00404431 ; ---------------------------------------------------------------------------
.text:00404431
.text:00404431 loc_404431:                             ; CODE XREF: sub_4042F0+6D↑j
.text:00404431                                         ; DATA XREF: sub_4042F0:jpt_40435D↑o
.text:00404431                 mov     [esp+2Ch+Stream], offset loc_4040F8 ; jumptable 0040435D case 2
.text:00404438                 jmp     loc_4043A0
.text:0040443D ; ---------------------------------------------------------------------------
.text:0040443D
.text:0040443D loc_40443D:                             ; CODE XREF: sub_4042F0+6D↑j
.text:0040443D                                         ; DATA XREF: sub_4042F0:jpt_40435D↑o
.text:0040443D                 mov     [esp+2Ch+Stream], offset loc_40410F ; jumptable 0040435D case 3
.text:00404444                 jmp     loc_4043A0
.text:00404449 ; ---------------------------------------------------------------------------
.text:00404449
.text:00404449 loc_404449:                             ; CODE XREF: sub_4042F0+6D↑j
.text:00404449                                         ; DATA XREF: sub_4042F0:jpt_40435D↑o
.text:00404449                 mov     [esp+2Ch+Stream], offset sub_404140 ; jumptable 0040435D case 4
.text:00404450                 jmp     loc_4043A0
.text:00404455 ; ---------------------------------------------------------------------------
.text:00404455
.text:00404455 loc_404455:                             ; CODE XREF: sub_4042F0+6D↑j
.text:00404455                                         ; DATA XREF: sub_4042F0:jpt_40435D↑o
.text:00404455                 mov     [esp+2Ch+Stream], offset loc_404160 ; jumptable 0040435D case 5
.text:0040445C                 jmp     loc_4043A0
.text:00404461 ; ---------------------------------------------------------------------------
.text:00404461
.text:00404461 loc_404461:                             ; CODE XREF: sub_4042F0+6D↑j
.text:00404461                                         ; DATA XREF: sub_4042F0:jpt_40435D↑o
.text:00404461                 mov     [esp+2Ch+Stream], offset sub_4041A0 ; jumptable 0040435D case 6
.text:00404468                 jmp     loc_4043A0
.text:0040446D ; ---------------------------------------------------------------------------
.text:0040446D
.text:0040446D loc_40446D:                             ; CODE XREF: sub_4042F0+6D↑j
.text:0040446D                                         ; DATA XREF: sub_4042F0:jpt_40435D↑o
.text:0040446D                 mov     [esp+2Ch+Stream], offset sub_4041E0 ; jumptable 0040435D case 7
.text:00404474                 jmp     loc_4043A0
.text:00404479 ; ---------------------------------------------------------------------------
.text:00404479
.text:00404479 loc_404479:                             ; CODE XREF: sub_4042F0+6D↑j
.text:00404479                                         ; DATA XREF: sub_4042F0:jpt_40435D↑o
.text:00404479                 mov     [esp+2Ch+Stream], offset sub_404220 ; jumptable 0040435D case 8
.text:00404480                 jmp     loc_4043A0
.text:00404485 ; ---------------------------------------------------------------------------
.text:00404485
.text:00404485 loc_404485:                             ; CODE XREF: sub_4042F0+6D↑j
.text:00404485                                         ; DATA XREF: sub_4042F0:jpt_40435D↑o
.text:00404485                 mov     [esp+2Ch+Stream], offset sub_404260 ; jumptable 0040435D case 9
.text:0040448C                 jmp     loc_4043A0
.text:00404491 ; ---------------------------------------------------------------------------
.text:00404491
.text:00404491 def_40435D:                             ; CODE XREF: sub_4042F0+67↑j
.text:00404491                 mov     [esp+2Ch+Stream], offset loc_4042A0 ; jumptable 0040435D default case
.text:00404498                 jmp     loc_4043A0
.text:0040449D ; ---------------------------------------------------------------------------
.text:0040449D
.text:0040449D loc_40449D:                             ; CODE XREF: sub_4042F0+3E↑j
.text:0040449D                 mov     [esp+2Ch+var_20], ebp
.text:004044A1                 mov     ecx, [esp+2Ch+var_14]
.text:004044A5                 mov     [esp+2Ch+Format], offset loc_4042DC ; Format
.text:004044AD                 mov     [esp+2Ch+Stream], esi ; Stream
.text:004044B0                 mov     [esp+2Ch+ArgList], ecx
.text:004044B4                 call    fprintf
.text:004044B9                 jmp     loc_404354
.text:004044B9 sub_4042F0      endp
.text:004044B9
.text:004044B9 ; ---------------------------------------------------------------------------
.text:004044BE                 align 10h
.text:004044C0                 sub     esp, 1Ch
.text:004044C3                 mov     edx, [esp+2Ch]
.text:004044C7                 lea     ecx, [esp+30h]
.text:004044CB                 mov     [esp+10h], ecx
.text:004044CF                 mov     ecx, [esp+28h]
.text:004044D3                 mov     [esp+0Ch], edx
.text:004044D7                 mov     edx, [esp+24h]
.text:004044DB                 mov     [esp+8], ecx
.text:004044DF                 mov     [esp+4], edx
.text:004044E3                 mov     edx, [esp+20h]
.text:004044E7                 mov     [esp], edx
.text:004044EA                 call    sub_4042F0
.text:004044EF                 add     esp, 1Ch
.text:004044F2                 retn
.text:004044F2 ; ---------------------------------------------------------------------------
.text:004044F3                 align 10h
.text:00404500                 sub     esp, 0Ch
.text:00404503                 xor     edx, edx
.text:00404505                 mov     ecx, [esp+14h]
.text:00404509                 mov     [esp+8], ebx
.text:0040450D                 mov     eax, 0FFFFFFFFh
.text:00404512                 mov     ebx, [esp+10h]
.text:00404516                 div     ecx
.text:00404518                 cmp     eax, ebx
.text:0040451A                 jb      short loc_404539
.text:0040451C                 mov     edx, ebx
.text:0040451E                 imul    edx, ecx
.text:00404521                 mov     [esp], edx
.text:00404524                 call    malloc
.text:00404529                 test    eax, eax
.text:0040452B                 jz      short loc_404535
.text:0040452D
.text:0040452D loc_40452D:                             ; CODE XREF: .text:00404537↓j
.text:0040452D                 mov     ebx, [esp+8]
.text:00404531                 add     esp, 0Ch
.text:00404534                 retn
.text:00404535 ; ---------------------------------------------------------------------------
.text:00404535
.text:00404535 loc_404535:                             ; CODE XREF: .text:0040452B↑j
.text:00404535                 test    ebx, ebx
.text:00404537                 jz      short loc_40452D
.text:00404539
.text:00404539 loc_404539:                             ; CODE XREF: .text:0040451A↑j
.text:00404539                 call    sub_4047F0
.text:00404539 ; ---------------------------------------------------------------------------
.text:0040453E                 align 10h
.text:00404540
.text:00404540 ; =============== S U B R O U T I N E =======================================
.text:00404540
.text:00404540
.text:00404540 ; int __cdecl sub_404540(size_t)
.text:00404540 sub_404540      proc near               ; CODE XREF: .text:00403769↑p
.text:00404540                                         ; .text:00403946↑p ...
.text:00404540
.text:00404540 Size            = dword ptr -0Ch
.text:00404540 var_4           = dword ptr -4
.text:00404540 arg_0           = dword ptr  4
.text:00404540
.text:00404540                 sub     esp, 0Ch
.text:00404543                 mov     [esp+0Ch+var_4], ebx
.text:00404547                 mov     ebx, [esp+0Ch+arg_0]
.text:0040454B                 mov     [esp+0Ch+Size], ebx ; Size
.text:0040454E                 call    malloc
.text:00404553                 test    eax, eax
.text:00404555                 jz      short loc_404560
.text:00404557
.text:00404557 loc_404557:                             ; CODE XREF: sub_404540+22↓j
.text:00404557                 mov     ebx, [esp+0Ch+var_4]
.text:0040455B                 add     esp, 0Ch
.text:0040455E                 retn
.text:0040455E ; ---------------------------------------------------------------------------
.text:0040455F                 align 10h
.text:00404560
.text:00404560 loc_404560:                             ; CODE XREF: sub_404540+15↑j
.text:00404560                 test    ebx, ebx
.text:00404562                 jz      short loc_404557
.text:00404564                 call    sub_4047F0
.text:00404564 sub_404540      endp
.text:00404564
.text:00404564 ; ---------------------------------------------------------------------------
.text:00404569                 align 10h
.text:00404570                 sub     esp, 1Ch
.text:00404573                 xor     edx, edx
.text:00404575                 mov     eax, 0FFFFFFFFh
.text:0040457A                 mov     [esp+14h], ebx
.text:0040457E                 mov     ecx, [esp+20h]
.text:00404582                 mov     ebx, [esp+28h]
.text:00404586                 mov     [esp+18h], esi
.text:0040458A                 mov     esi, [esp+24h]
.text:0040458E                 div     ebx
.text:00404590                 cmp     eax, esi
.text:00404592                 jb      short loc_4045C4
.text:00404594                 mov     [esp], ecx
.text:00404597                 mov     edx, esi
.text:00404599                 imul    edx, ebx
.text:0040459C                 mov     [esp+4], edx
.text:004045A0                 call    realloc
.text:004045A5                 test    eax, eax
.text:004045A7                 mov     ecx, eax
.text:004045A9                 jz      short loc_4045C0
.text:004045AB
.text:004045AB loc_4045AB:                             ; CODE XREF: .text:004045C2↓j
.text:004045AB                 mov     ebx, [esp+14h]
.text:004045AF                 mov     eax, ecx
.text:004045B1                 mov     esi, [esp+18h]
.text:004045B5                 add     esp, 1Ch
.text:004045B8                 retn
.text:004045B8 ; ---------------------------------------------------------------------------
.text:004045B9                 align 10h
.text:004045C0
.text:004045C0 loc_4045C0:                             ; CODE XREF: .text:004045A9↑j
.text:004045C0                 test    esi, esi
.text:004045C2                 jz      short loc_4045AB
.text:004045C4
.text:004045C4 loc_4045C4:                             ; CODE XREF: .text:00404592↑j
.text:004045C4                 call    sub_4047F0
.text:004045C4 ; ---------------------------------------------------------------------------
.text:004045C9                 align 10h
.text:004045D0
.text:004045D0 ; =============== S U B R O U T I N E =======================================
.text:004045D0
.text:004045D0
.text:004045D0 ; int __cdecl sub_4045D0(void *, size_t)
.text:004045D0 sub_4045D0      proc near               ; CODE XREF: sub_403E30+5B↑p
.text:004045D0
.text:004045D0 Block           = dword ptr -0Ch
.text:004045D0 Size            = dword ptr -8
.text:004045D0 var_4           = dword ptr -4
.text:004045D0 arg_0           = dword ptr  4
.text:004045D0 arg_4           = dword ptr  8
.text:004045D0
.text:004045D0                 sub     esp, 0Ch
.text:004045D3                 mov     edx, [esp+0Ch+arg_0]
.text:004045D7                 mov     [esp+0Ch+var_4], ebx
.text:004045DB                 mov     ebx, [esp+0Ch+arg_4]
.text:004045DF                 mov     [esp+0Ch+Block], edx ; Block
.text:004045E2                 mov     [esp+0Ch+Size], ebx ; Size
.text:004045E6                 call    realloc
.text:004045EB                 test    eax, eax
.text:004045ED                 jz      short loc_4045F7
.text:004045EF
.text:004045EF loc_4045EF:                             ; CODE XREF: sub_4045D0+29↓j
.text:004045EF                 mov     ebx, [esp+0Ch+var_4]
.text:004045F3                 add     esp, 0Ch
.text:004045F6                 retn
.text:004045F7 ; ---------------------------------------------------------------------------
.text:004045F7
.text:004045F7 loc_4045F7:                             ; CODE XREF: sub_4045D0+1D↑j
.text:004045F7                 test    ebx, ebx
.text:004045F9                 jz      short loc_4045EF
.text:004045FB                 call    sub_4047F0
.text:004045FB sub_4045D0      endp
.text:004045FB
.text:00404600 ; ---------------------------------------------------------------------------
.text:00404600                 jmp     sub_404750
.text:00404600 ; ---------------------------------------------------------------------------
.text:00404605                 align 10h
.text:00404610                 sub     esp, 0Ch
.text:00404613                 mov     edx, [esp+14h]
.text:00404617                 mov     dword ptr [esp+8], 1
.text:0040461F                 mov     [esp+4], edx
.text:00404623                 mov     edx, [esp+10h]
.text:00404627                 mov     [esp], edx
.text:0040462A                 call    sub_404750
.text:0040462F                 add     esp, 0Ch
.text:00404632                 retn
.text:00404632 ; ---------------------------------------------------------------------------
.text:00404633                 align 10h
.text:00404640                 sub     esp, 1Ch
.text:00404643                 mov     [esp+18h], ebx
.text:00404647                 mov     ebx, [esp+20h]
.text:0040464B                 mov     [esp], ebx
.text:0040464E                 call    malloc
.text:00404653                 test    eax, eax
.text:00404655                 jz      short loc_404673
.text:00404657
.text:00404657 loc_404657:                             ; CODE XREF: .text:00404675↓j
.text:00404657                 mov     [esp+8], ebx
.text:0040465B                 mov     dword ptr [esp+4], 0
.text:00404663                 mov     [esp], eax
.text:00404666                 call    memset
.text:0040466B                 mov     ebx, [esp+18h]
.text:0040466F                 add     esp, 1Ch
.text:00404672                 retn
.text:00404673 ; ---------------------------------------------------------------------------
.text:00404673
.text:00404673 loc_404673:                             ; CODE XREF: .text:00404655↑j
.text:00404673                 test    ebx, ebx
.text:00404675                 jz      short loc_404657
.text:00404677                 call    sub_4047F0
.text:00404677 ; ---------------------------------------------------------------------------
.text:0040467C                 align 10h
.text:00404680                 sub     esp, 0Ch
.text:00404683                 xor     edx, edx
.text:00404685                 mov     ecx, [esp+14h]
.text:00404689                 mov     [esp+8], ebx
.text:0040468D                 mov     eax, 0FFFFFFFFh
.text:00404692                 mov     ebx, [esp+10h]
.text:00404696                 div     ecx
.text:00404698                 cmp     eax, ebx
.text:0040469A                 jb      short loc_4046B8
.text:0040469C                 mov     [esp+4], ecx
.text:004046A0                 mov     [esp], ebx
.text:004046A3                 call    calloc
.text:004046A8                 test    eax, eax
.text:004046AA                 jz      short loc_4046B4
.text:004046AC
.text:004046AC loc_4046AC:                             ; CODE XREF: .text:004046B6↓j
.text:004046AC                 mov     ebx, [esp+8]
.text:004046B0                 add     esp, 0Ch
.text:004046B3                 retn
.text:004046B4 ; ---------------------------------------------------------------------------
.text:004046B4
.text:004046B4 loc_4046B4:                             ; CODE XREF: .text:004046AA↑j
.text:004046B4                 test    ebx, ebx
.text:004046B6                 jz      short loc_4046AC
.text:004046B8
.text:004046B8 loc_4046B8:                             ; CODE XREF: .text:0040469A↑j
.text:004046B8                 call    sub_4047F0
.text:004046B8 ; ---------------------------------------------------------------------------
.text:004046BD                 align 10h
.text:004046C0                 sub     esp, 1Ch
.text:004046C3                 mov     [esp+18h], ebx
.text:004046C7                 mov     ebx, [esp+24h]
.text:004046CB                 mov     [esp], ebx
.text:004046CE                 call    malloc
.text:004046D3                 test    eax, eax
.text:004046D5                 mov     edx, eax
.text:004046D7                 jz      short loc_4046F5
.text:004046D9
.text:004046D9 loc_4046D9:                             ; CODE XREF: .text:004046F7↓j
.text:004046D9                 mov     [esp+8], ebx
.text:004046DD                 mov     ecx, [esp+20h]
.text:004046E1                 mov     [esp], edx
.text:004046E4                 mov     [esp+4], ecx
.text:004046E8                 call    memcpy
.text:004046ED                 mov     ebx, [esp+18h]
.text:004046F1                 add     esp, 1Ch
.text:004046F4                 retn
.text:004046F5 ; ---------------------------------------------------------------------------
.text:004046F5
.text:004046F5 loc_4046F5:                             ; CODE XREF: .text:004046D7↑j
.text:004046F5                 test    ebx, ebx
.text:004046F7                 jz      short loc_4046D9
.text:004046F9                 call    sub_4047F0
.text:004046F9 ; ---------------------------------------------------------------------------
.text:004046FE                 align 10h
.text:00404700                 sub     esp, 1Ch
.text:00404703                 mov     [esp+18h], esi
.text:00404707                 mov     esi, [esp+20h]
.text:0040470B                 mov     [esp+14h], ebx
.text:0040470F                 mov     [esp], esi
.text:00404712                 call    strlen
.text:00404717                 lea     ebx, [eax+1]
.text:0040471A                 mov     [esp], ebx
.text:0040471D                 call    malloc
.text:00404722                 test    eax, eax
.text:00404724                 jz      short loc_404742
.text:00404726
.text:00404726 loc_404726:                             ; CODE XREF: .text:00404744↓j
.text:00404726                 mov     [esp+8], ebx
.text:0040472A                 mov     [esp+4], esi
.text:0040472E                 mov     [esp], eax
.text:00404731                 call    memcpy
.text:00404736                 mov     ebx, [esp+14h]
.text:0040473A                 mov     esi, [esp+18h]
.text:0040473E                 add     esp, 1Ch
.text:00404741                 retn
.text:00404742 ; ---------------------------------------------------------------------------
.text:00404742
.text:00404742 loc_404742:                             ; CODE XREF: .text:00404724↑j
.text:00404742                 test    ebx, ebx
.text:00404744                 jz      short loc_404726
.text:00404746                 call    sub_4047F0
.text:00404746 ; ---------------------------------------------------------------------------
.text:0040474B                 align 10h
.text:00404750
.text:00404750 ; =============== S U B R O U T I N E =======================================
.text:00404750
.text:00404750
.text:00404750 ; int __cdecl sub_404750(void *, int, int)
.text:00404750 sub_404750      proc near               ; CODE XREF: .text:00404600↑j
.text:00404750                                         ; .text:0040462A↑p
.text:00404750
.text:00404750 Block           = dword ptr -1Ch
.text:00404750 Size            = dword ptr -18h
.text:00404750 var_C           = dword ptr -0Ch
.text:00404750 var_8           = dword ptr -8
.text:00404750 var_4           = dword ptr -4
.text:00404750 arg_0           = dword ptr  4
.text:00404750 arg_4           = dword ptr  8
.text:00404750 arg_8           = dword ptr  0Ch
.text:00404750
.text:00404750                 sub     esp, 1Ch
.text:00404753                 mov     [esp+1Ch+var_8], esi
.text:00404757                 mov     esi, [esp+1Ch+arg_0]
.text:0040475B                 mov     [esp+1Ch+var_4], edi
.text:0040475F                 mov     edi, [esp+1Ch+arg_4]
.text:00404763                 test    esi, esi
.text:00404765                 mov     [esp+1Ch+var_C], ebx
.text:00404769                 mov     ecx, [edi]
.text:0040476B                 mov     ebx, [esp+1Ch+arg_8]
.text:0040476F                 jz      short loc_4047B0
.text:00404771                 xor     edx, edx
.text:00404773                 mov     eax, 7FFFFFFFh
.text:00404778                 div     ebx
.text:0040477A                 cmp     eax, ecx
.text:0040477C                 jb      short loc_4047A9
.text:0040477E                 add     ecx, ecx
.text:00404780
.text:00404780 loc_404780:                             ; CODE XREF: sub_404750+62↓j
.text:00404780                                         ; sub_404750+71↓j ...
.text:00404780                 mov     [edi], ecx
.text:00404782                 imul    ebx, ecx
.text:00404785                 mov     [esp+1Ch+Block], esi ; Block
.text:00404788                 mov     [esp+1Ch+Size], ebx ; Size
.text:0040478C                 call    realloc
.text:00404791                 test    eax, eax
.text:00404793                 jz      short loc_4047A5
.text:00404795
.text:00404795 loc_404795:                             ; CODE XREF: sub_404750+57↓j
.text:00404795                 mov     ebx, [esp+1Ch+var_C]
.text:00404799                 mov     esi, [esp+1Ch+var_8]
.text:0040479D                 mov     edi, [esp+1Ch+var_4]
.text:004047A1                 add     esp, 1Ch
.text:004047A4                 retn
.text:004047A5 ; ---------------------------------------------------------------------------
.text:004047A5
.text:004047A5 loc_4047A5:                             ; CODE XREF: sub_404750+43↑j
.text:004047A5                 test    ebx, ebx
.text:004047A7                 jz      short loc_404795
.text:004047A9
.text:004047A9 loc_4047A9:                             ; CODE XREF: sub_404750+2C↑j
.text:004047A9                 call    sub_4047F0
.text:004047A9 ; ---------------------------------------------------------------------------
.text:004047AE                 align 10h
.text:004047B0
.text:004047B0 loc_4047B0:                             ; CODE XREF: sub_404750+1F↑j
.text:004047B0                 test    ecx, ecx
.text:004047B2                 jnz     short loc_404780
.text:004047B4                 xor     edx, edx
.text:004047B6                 mov     eax, 40h ; '@'
.text:004047BB                 div     ebx
.text:004047BD                 test    eax, eax
.text:004047BF                 mov     ecx, eax
.text:004047C1                 jnz     short loc_404780
.text:004047C3                 mov     ecx, 1
.text:004047C8                 jmp     short loc_404780
.text:004047C8 sub_404750      endp
.text:004047C8
.text:004047C8 ; ---------------------------------------------------------------------------
.text:004047CA                 align 10h
.text:004047D0 aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: sub_4047F0+3↓o
.text:004047E1 ; const char aS[]
.text:004047E1 aS              db '%s',0               ; DATA XREF: sub_4047F0+10↓o
.text:004047E4                 align 10h
.text:004047F0
.text:004047F0 ; =============== S U B R O U T I N E =======================================
.text:004047F0
.text:004047F0 ; Attributes: noreturn
.text:004047F0
.text:004047F0 sub_4047F0      proc near               ; CODE XREF: sub_403E30:loc_403FEF↑p
.text:004047F0                                         ; .text:loc_404539↑p ...
.text:004047F0
.text:004047F0 Code            = dword ptr -1Ch
.text:004047F0 ErrorMessage    = dword ptr -18h
.text:004047F0 var_14          = dword ptr -14h
.text:004047F0 var_10          = byte ptr -10h
.text:004047F0
.text:004047F0                 sub     esp, 1Ch
.text:004047F3                 mov     [esp+1Ch+Code], offset aMemoryExhauste ; "memory exhausted"
.text:004047FA                 call    ds:libintl_gettext
.text:00404800                 mov     [esp+1Ch+var_14], offset aS ; "%s"
.text:00404808                 mov     edx, Code
.text:0040480E                 mov     [esp+1Ch+ErrorMessage], 0 ; ErrorMessage
.text:00404816                 mov     dword ptr [esp+1Ch+var_10], eax ; char
.text:0040481A                 mov     [esp+1Ch+Code], edx ; Code
.text:0040481D                 call    sub_404880
.text:00404822                 call    abort
.text:00404822 sub_4047F0      endp
.text:00404822
.text:00404822 ; ---------------------------------------------------------------------------
.text:00404827                 align 10h
.text:00404830
.text:00404830 ; =============== S U B R O U T I N E =======================================
.text:00404830
.text:00404830 ; Attributes: thunk
.text:00404830
.text:00404830 libintl_bindtextdomain proc near
.text:00404830                 jmp     ds:__imp_libintl_bindtextdomain
.text:00404830 libintl_bindtextdomain endp
.text:00404830
.text:00404830 ; ---------------------------------------------------------------------------
.text:00404836                 align 10h
.text:00404840                 jmp     ds:libintl_textdomain
.text:00404840 ; ---------------------------------------------------------------------------
.text:00404846                 align 10h
.text:00404850                 jmp     ds:libintl_gettext
.text:00404850 ; ---------------------------------------------------------------------------
.text:00404856                 align 10h
.text:00404860 ; const char aS_0[]
.text:00404860 aS_0            db ': %s',0             ; DATA XREF: sub_404880+B8↓o
.text:00404860                                         ; sub_404984+122↓o
.text:00404865 aUnknownSystemE db 'Unknown system error',0
.text:00404865                                         ; DATA XREF: sub_404880:loc_40494D↓o
.text:00404865                                         ; sub_404984:loc_404ABE↓o
.text:0040487A ; const char aS_1[]
.text:0040487A aS_1            db '%s: ',0             ; DATA XREF: sub_404880:loc_404954↓o
.text:0040487F                 align 10h
.text:00404880
.text:00404880 ; =============== S U B R O U T I N E =======================================
.text:00404880
.text:00404880
.text:00404880 ; int __cdecl sub_404880(int Code, int ErrorMessage, char *, char)
.text:00404880 sub_404880      proc near               ; CODE XREF: sub_401360+115↑p
.text:00404880                                         ; sub_401360+1E5↑p ...
.text:00404880
.text:00404880 Stream          = dword ptr -1Ch
.text:00404880 Format          = dword ptr -18h
.text:00404880 ArgList         = dword ptr -14h
.text:00404880 Code            = dword ptr  4
.text:00404880 ErrorMessage    = dword ptr  8
.text:00404880 arg_8           = dword ptr  0Ch
.text:00404880 arg_C           = byte ptr  10h
.text:00404880
.text:00404880                 push    esi
.text:00404881                 push    ebx
.text:00404882                 sub     esp, 14h
.text:00404885                 mov     edx, ds:_iob
.text:0040488B                 mov     esi, [esp+1Ch+Code]
.text:0040488F                 mov     ebx, [esp+1Ch+ErrorMessage]
.text:00404893                 add     edx, 20h ; ' '
.text:00404896                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00404899                 call    fflush
.text:0040489E                 mov     eax, ds:dword_4061C0
.text:004048A3                 test    eax, eax
.text:004048A5                 jz      loc_404954
.text:004048AB                 call    eax ; dword_4061C0
.text:004048AD
.text:004048AD loc_4048AD:                             ; CODE XREF: sub_404880+F7↓j
.text:004048AD                 lea     edx, [esp+1Ch+arg_C]
.text:004048B1                 mov     ecx, [esp+1Ch+arg_8]
.text:004048B5                 mov     [esp+1Ch+ArgList], edx ; ArgList
.text:004048B9                 mov     edx, ds:_iob
.text:004048BF                 mov     [esp+1Ch+Format], ecx ; Format
.text:004048C3                 add     edx, 40h ; '@'
.text:004048C6                 mov     [esp+1Ch+Stream], edx ; Stream
.text:004048C9                 call    vfprintf
.text:004048CE                 inc     ds:dword_4061D0
.text:004048D4                 test    ebx, ebx
.text:004048D6                 jnz     short loc_404922
.text:004048D8
.text:004048D8 loc_4048D8:                             ; CODE XREF: sub_404880+CB↓j
.text:004048D8                 mov     edx, ds:_iob
.text:004048DE                 lea     ecx, [edx+40h]
.text:004048E1                 mov     ebx, [ecx+4]
.text:004048E4                 dec     ebx
.text:004048E5                 test    ebx, ebx
.text:004048E7                 mov     [ecx+4], ebx
.text:004048EA                 js      short loc_404910
.text:004048EC                 mov     ecx, [edx+40h]
.text:004048EF                 mov     byte ptr [ecx], 0Ah
.text:004048F2                 inc     dword ptr [edx+40h]
.text:004048F5
.text:004048F5 loc_4048F5:                             ; CODE XREF: sub_404880+A0↓j
.text:004048F5                 mov     edx, ds:_iob
.text:004048FB                 add     edx, 40h ; '@'
.text:004048FE                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00404901                 call    fflush
.text:00404906                 test    esi, esi
.text:00404908                 jnz     short loc_40497C
.text:0040490A                 add     esp, 14h
.text:0040490D                 pop     ebx
.text:0040490E                 pop     esi
.text:0040490F                 retn
.text:00404910 ; ---------------------------------------------------------------------------
.text:00404910
.text:00404910 loc_404910:                             ; CODE XREF: sub_404880+6A↑j
.text:00404910                 mov     [esp+1Ch+Format], ecx ; File
.text:00404914                 mov     [esp+1Ch+Stream], 0Ah ; Ch
.text:0040491B                 call    _flsbuf
.text:00404920                 jmp     short loc_4048F5
.text:00404922 ; ---------------------------------------------------------------------------
.text:00404922
.text:00404922 loc_404922:                             ; CODE XREF: sub_404880+56↑j
.text:00404922                 mov     [esp+1Ch+Stream], ebx ; ErrorMessage
.text:00404925                 call    strerror
.text:0040492A                 test    eax, eax
.text:0040492C                 jz      short loc_40494D
.text:0040492E
.text:0040492E loc_40492E:                             ; CODE XREF: sub_404880+D2↓j
.text:0040492E                 mov     [esp+1Ch+ArgList], eax
.text:00404932                 mov     ebx, ds:_iob
.text:00404938                 mov     [esp+1Ch+Format], offset aS_0 ; ": %s"
.text:00404940                 add     ebx, 40h ; '@'
.text:00404943                 mov     [esp+1Ch+Stream], ebx ; Stream
.text:00404946                 call    fprintf
.text:0040494B                 jmp     short loc_4048D8
.text:0040494D ; ---------------------------------------------------------------------------
.text:0040494D
.text:0040494D loc_40494D:                             ; CODE XREF: sub_404880+AC↑j
.text:0040494D                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:00404952                 jmp     short loc_40492E
.text:00404954 ; ---------------------------------------------------------------------------
.text:00404954
.text:00404954 loc_404954:                             ; CODE XREF: sub_404880+25↑j
.text:00404954                 mov     [esp+1Ch+Format], offset aS_1 ; "%s: "
.text:0040495C                 mov     edx, ds:_iob
.text:00404962                 mov     ecx, ds:dword_406190
.text:00404968                 add     edx, 40h ; '@'
.text:0040496B                 mov     [esp+1Ch+ArgList], ecx
.text:0040496F                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00404972                 call    fprintf
.text:00404977                 jmp     loc_4048AD
.text:0040497C ; ---------------------------------------------------------------------------
.text:0040497C
.text:0040497C loc_40497C:                             ; CODE XREF: sub_404880+88↑j
.text:0040497C                 mov     [esp+1Ch+Stream], esi ; Code
.text:0040497F                 call    exit
.text:0040497F sub_404880      endp
.text:0040497F
.text:00404984
.text:00404984 ; =============== S U B R O U T I N E =======================================
.text:00404984
.text:00404984
.text:00404984 ; int __cdecl sub_404984(int, int Code, int ErrorMessage, char *Str2, int, char *, char)
.text:00404984 sub_404984      proc near               ; DATA XREF: sub_404984+77↓o
.text:00404984
.text:00404984 Stream          = dword ptr -28h
.text:00404984 Format          = dword ptr -24h
.text:00404984 ArgList         = dword ptr -20h
.text:00404984 var_1C          = dword ptr -1Ch
.text:00404984 Code            = dword ptr  8
.text:00404984 ErrorMessage    = dword ptr  0Ch
.text:00404984 Str2            = dword ptr  10h
.text:00404984 arg_10          = dword ptr  14h
.text:00404984 arg_14          = dword ptr  18h
.text:00404984 arg_18          = byte ptr  1Ch
.text:00404984
.text:00404984                 and     eax, 64253A73h
.text:00404989                 cmp     ah, [eax]
.text:0040498B
.text:0040498B loc_40498B:                             ; DATA XREF: sub_404984:loc_404AC5↓o
.text:0040498B                 add     ds:55003A73h, ah
.text:00404991                 push    edi
.text:00404992                 push    esi
.text:00404993                 push    ebx
.text:00404994                 sub     esp, 1Ch
.text:00404997                 mov     edx, ds:dword_406200
.text:0040499D                 mov     ebp, [esp+28h+Code]
.text:004049A1                 mov     edi, [esp+28h+ErrorMessage]
.text:004049A5                 test    edx, edx
.text:004049A7                 mov     ebx, [esp+28h+Str2]
.text:004049AB                 mov     esi, [esp+28h+arg_10]
.text:004049AF                 jz      short loc_4049C9
.text:004049B1                 cmp     ds:dword_406180, esi
.text:004049B7                 jz      loc_404AF0
.text:004049BD
.text:004049BD loc_4049BD:                             ; CODE XREF: sub_404984+18D↓j
.text:004049BD                 mov     ds:Str1, ebx
.text:004049C3                 mov     ds:dword_406180, esi
.text:004049C9
.text:004049C9 loc_4049C9:                             ; CODE XREF: sub_404984+2B↑j
.text:004049C9                 mov     edx, ds:_iob
.text:004049CF                 add     edx, 20h ; ' '
.text:004049D2                 mov     [esp+28h+Stream], edx ; Stream
.text:004049D5                 call    fflush
.text:004049DA                 mov     eax, ds:dword_4061C0
.text:004049DF                 test    eax, eax
.text:004049E1                 jz      loc_404AC5
.text:004049E7                 call    eax ; dword_4061C0
.text:004049E9
.text:004049E9 loc_4049E9:                             ; CODE XREF: sub_404984+164↓j
.text:004049E9                 test    ebx, ebx
.text:004049EB                 jz      short loc_404A0E
.text:004049ED                 mov     [esp+28h+ArgList], ebx
.text:004049F1                 mov     ebx, ds:_iob
.text:004049F7                 mov     [esp+28h+var_1C], esi
.text:004049FB                 mov     [esp+28h+Format], offset sub_404984 ; Format
.text:00404A03                 add     ebx, 40h ; '@'
.text:00404A06                 mov     [esp+28h+Stream], ebx ; Stream
.text:00404A09                 call    fprintf
.text:00404A0E
.text:00404A0E loc_404A0E:                             ; CODE XREF: sub_404984+67↑j
.text:00404A0E                 mov     esi, ds:_iob
.text:00404A14                 lea     edx, [esp+28h+arg_18]
.text:00404A18                 mov     ecx, [esp+28h+arg_14]
.text:00404A1C                 mov     [esp+28h+ArgList], edx ; ArgList
.text:00404A20                 add     esi, 40h ; '@'
.text:00404A23                 mov     [esp+28h+Format], ecx ; Format
.text:00404A27                 mov     [esp+28h+Stream], esi ; Stream
.text:00404A2A                 call    vfprintf
.text:00404A2F                 inc     ds:dword_4061D0
.text:00404A35                 test    edi, edi
.text:00404A37                 jnz     short loc_404A90
.text:00404A39
.text:00404A39 loc_404A39:                             ; CODE XREF: sub_404984+135↓j
.text:00404A39                 mov     edx, ds:_iob
.text:00404A3F                 lea     ecx, [edx+40h]
.text:00404A42                 mov     ebx, [ecx+4]
.text:00404A45                 dec     ebx
.text:00404A46                 test    ebx, ebx
.text:00404A48                 mov     [ecx+4], ebx
.text:00404A4B                 js      short loc_404A77
.text:00404A4D                 mov     esi, [edx+40h]
.text:00404A50                 mov     byte ptr [esi], 0Ah
.text:00404A53                 inc     dword ptr [edx+40h]
.text:00404A56
.text:00404A56 loc_404A56:                             ; CODE XREF: sub_404984+103↓j
.text:00404A56                 mov     ecx, ds:_iob
.text:00404A5C                 add     ecx, 40h ; '@'
.text:00404A5F                 mov     [esp+28h+Stream], ecx ; Stream
.text:00404A62                 call    fflush
.text:00404A67                 test    ebp, ebp
.text:00404A69                 jnz     loc_404B16
.text:00404A6F
.text:00404A6F loc_404A6F:                             ; CODE XREF: sub_404984+173↓j
.text:00404A6F                                         ; sub_404984+187↓j
.text:00404A6F                 add     esp, 1Ch
.text:00404A72                 pop     ebx
.text:00404A73                 pop     esi
.text:00404A74                 pop     edi
.text:00404A75                 pop     ebp
.text:00404A76                 retn
.text:00404A77 ; ---------------------------------------------------------------------------
.text:00404A77
.text:00404A77 loc_404A77:                             ; CODE XREF: sub_404984+C7↑j
.text:00404A77                 mov     [esp+28h+Format], ecx ; File
.text:00404A7B                 mov     [esp+28h+Stream], 0Ah ; Ch
.text:00404A82                 call    _flsbuf
.text:00404A87                 jmp     short loc_404A56
.text:00404A87 ; ---------------------------------------------------------------------------
.text:00404A89                 align 10h
.text:00404A90
.text:00404A90 loc_404A90:                             ; CODE XREF: sub_404984+B3↑j
.text:00404A90                 mov     [esp+28h+Stream], edi ; ErrorMessage
.text:00404A93                 call    strerror
.text:00404A98                 test    eax, eax
.text:00404A9A                 jz      short loc_404ABE
.text:00404A9C
.text:00404A9C loc_404A9C:                             ; CODE XREF: sub_404984+13F↓j
.text:00404A9C                 mov     [esp+28h+ArgList], eax
.text:00404AA0                 mov     edi, ds:_iob
.text:00404AA6                 mov     [esp+28h+Format], offset aS_0 ; ": %s"
.text:00404AAE                 add     edi, 40h ; '@'
.text:00404AB1                 mov     [esp+28h+Stream], edi ; Stream
.text:00404AB4                 call    fprintf
.text:00404AB9                 jmp     loc_404A39
.text:00404ABE ; ---------------------------------------------------------------------------
.text:00404ABE
.text:00404ABE loc_404ABE:                             ; CODE XREF: sub_404984+116↑j
.text:00404ABE                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:00404AC3                 jmp     short loc_404A9C
.text:00404AC5 ; ---------------------------------------------------------------------------
.text:00404AC5
.text:00404AC5 loc_404AC5:                             ; CODE XREF: sub_404984+5D↑j
.text:00404AC5                 mov     [esp+28h+Format], (offset loc_40498B+1) ; Format
.text:00404ACD                 mov     ecx, ds:_iob
.text:00404AD3                 mov     edx, ds:dword_406190
.text:00404AD9                 add     ecx, 40h ; '@'
.text:00404ADC                 mov     [esp+28h+ArgList], edx
.text:00404AE0                 mov     [esp+28h+Stream], ecx ; Stream
.text:00404AE3                 call    fprintf
.text:00404AE8                 jmp     loc_4049E9
.text:00404AE8 ; ---------------------------------------------------------------------------
.text:00404AED                 align 10h
.text:00404AF0
.text:00404AF0 loc_404AF0:                             ; CODE XREF: sub_404984+33↑j
.text:00404AF0                 mov     eax, ds:Str1
.text:00404AF5                 cmp     ebx, eax
.text:00404AF7                 jz      loc_404A6F
.text:00404AFD                 mov     [esp+28h+Format], ebx ; Str2
.text:00404B01                 mov     [esp+28h+Stream], eax ; Str1
.text:00404B04                 call    strcmp
.text:00404B09                 test    eax, eax
.text:00404B0B                 jz      loc_404A6F
.text:00404B11                 jmp     loc_4049BD
.text:00404B16 ; ---------------------------------------------------------------------------
.text:00404B16
.text:00404B16 loc_404B16:                             ; CODE XREF: sub_404984+E5↑j
.text:00404B16                 mov     [esp+28h+Stream], ebp ; Code
.text:00404B19                 call    exit
.text:00404B19 sub_404984      endp ; sp-analysis failed
.text:00404B19
.text:00404B19 ; ---------------------------------------------------------------------------
.text:00404B1E                 align 10h
.text:00404B20
.text:00404B20 ; =============== S U B R O U T I N E =======================================
.text:00404B20
.text:00404B20 ; Attributes: thunk
.text:00404B20
.text:00404B20 ; size_t __cdecl mbrtowc(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.text:00404B20 mbrtowc         proc near               ; CODE XREF: sub_402CF0+757↑p
.text:00404B20                 jmp     ds:__imp_mbrtowc
.text:00404B20 mbrtowc         endp
.text:00404B20
.text:00404B20 ; ---------------------------------------------------------------------------
.text:00404B26                 align 10h
.text:00404B30
.text:00404B30 ; =============== S U B R O U T I N E =======================================
.text:00404B30
.text:00404B30 ; Attributes: bp-based frame
.text:00404B30
.text:00404B30 sub_404B30      proc near               ; CODE XREF: sub_401080+C2↑p
.text:00404B30                 push    ebp
.text:00404B31                 mov     ecx, offset dword_406000
.text:00404B36                 cmp     ecx, offset dword_406000
.text:00404B3C                 mov     ebp, esp
.text:00404B3E                 jnb     short loc_404B56
.text:00404B40
.text:00404B40 loc_404B40:                             ; CODE XREF: sub_404B30+24↓j
.text:00404B40                 mov     edx, [ecx+4]
.text:00404B43                 mov     eax, [ecx]
.text:00404B45                 add     ecx, 8
.text:00404B48                 add     [edx+400000h], eax
.text:00404B4E                 cmp     ecx, offset dword_406000
.text:00404B54                 jb      short loc_404B40
.text:00404B56
.text:00404B56 loc_404B56:                             ; CODE XREF: sub_404B30+E↑j
.text:00404B56                 pop     ebp
.text:00404B57                 retn
.text:00404B57 sub_404B30      endp
.text:00404B57
.text:00404B57 ; ---------------------------------------------------------------------------
.text:00404B58                 align 10h
.text:00404B60
.text:00404B60 ; =============== S U B R O U T I N E =======================================
.text:00404B60
.text:00404B60 ; Attributes: bp-based frame
.text:00404B60
.text:00404B60 sub_404B60      proc near               ; CODE XREF: sub_401080+16↑p
.text:00404B60                                         ; TopLevelExceptionFilter+D7↑p
.text:00404B60                 push    ebp
.text:00404B61                 mov     ebp, esp
.text:00404B63                 fninit
.text:00404B65                 pop     ebp
.text:00404B66                 retn
.text:00404B66 sub_404B60      endp
.text:00404B66
.text:00404B66 ; ---------------------------------------------------------------------------
.text:00404B67                 align 10h
.text:00404B70
.text:00404B70 ; =============== S U B R O U T I N E =======================================
.text:00404B70
.text:00404B70 ; Attributes: bp-based frame
.text:00404B70
.text:00404B70 ; void __cdecl sub_404B70()
.text:00404B70 sub_404B70      proc near               ; DATA XREF: .text:loc_404BB9↓o
.text:00404B70                                         ; sub_404C00:loc_404C2E↓o
.text:00404B70                 push    ebp
.text:00404B71                 mov     ebp, esp
.text:00404B73                 sub     esp, 8
.text:00404B76                 mov     eax, off_405084
.text:00404B7B                 mov     edx, [eax]
.text:00404B7D                 test    edx, edx
.text:00404B7F                 jnz     short loc_404B85
.text:00404B81
.text:00404B81 loc_404B81:                             ; CODE XREF: sub_404B70+2C↓j
.text:00404B81                 mov     esp, ebp
.text:00404B83                 pop     ebp
.text:00404B84                 retn
.text:00404B85 ; ---------------------------------------------------------------------------
.text:00404B85
.text:00404B85 loc_404B85:                             ; CODE XREF: sub_404B70+F↑j
.text:00404B85                                         ; sub_404B70+2A↓j
.text:00404B85                 call    dword ptr [eax]
.text:00404B87                 mov     edx, off_405084
.text:00404B8D                 mov     ecx, [edx+4]
.text:00404B90                 lea     eax, [edx+4]
.text:00404B93                 mov     off_405084, eax
.text:00404B98                 test    ecx, ecx
.text:00404B9A                 jnz     short loc_404B85
.text:00404B9C                 jmp     short loc_404B81
.text:00404B9C sub_404B70      endp
.text:00404B9C
.text:00404B9C ; ---------------------------------------------------------------------------
.text:00404B9E                 align 10h
.text:00404BA0                 push    ebp
.text:00404BA1                 mov     ebp, esp
.text:00404BA3                 sub     esp, 8
.text:00404BA6                 mov     [ebp-4], ebx
.text:00404BA9                 mov     eax, ds:dword_404ED0
.text:00404BAE                 cmp     eax, 0FFFFFFFFh
.text:00404BB1                 jz      short loc_404BDC
.text:00404BB3
.text:00404BB3 loc_404BB3:                             ; CODE XREF: .text:00404BE6↓j
.text:00404BB3                                         ; .text:00404BF9↓j
.text:00404BB3                 test    eax, eax
.text:00404BB5                 mov     ebx, eax
.text:00404BB7                 jnz     short loc_404BD0
.text:00404BB9
.text:00404BB9 loc_404BB9:                             ; CODE XREF: .text:00404BDA↓j
.text:00404BB9                 mov     dword ptr [esp], offset sub_404B70
.text:00404BC0                 call    sub_401040
.text:00404BC5                 mov     ebx, [ebp-4]
.text:00404BC8                 mov     esp, ebp
.text:00404BCA                 pop     ebp
.text:00404BCB                 retn
.text:00404BCB ; ---------------------------------------------------------------------------
.text:00404BCC                 align 10h
.text:00404BD0
.text:00404BD0 loc_404BD0:                             ; CODE XREF: .text:00404BB7↑j
.text:00404BD0                                         ; .text:00404BD8↓j
.text:00404BD0                 call    ds:dword_404ED0[ebx*4]
.text:00404BD7                 dec     ebx
.text:00404BD8                 jnz     short loc_404BD0
.text:00404BDA                 jmp     short loc_404BB9
.text:00404BDC ; ---------------------------------------------------------------------------
.text:00404BDC
.text:00404BDC loc_404BDC:                             ; CODE XREF: .text:00404BB1↑j
.text:00404BDC                 mov     ecx, ds:dword_404ED4
.text:00404BE2                 xor     eax, eax
.text:00404BE4                 test    ecx, ecx
.text:00404BE6                 jz      short loc_404BB3
.text:00404BE8                 mov     edx, offset dword_404ED0
.text:00404BED                 lea     esi, [esi+0]
.text:00404BF0
.text:00404BF0 loc_404BF0:                             ; CODE XREF: .text:00404BF7↓j
.text:00404BF0                 inc     eax
.text:00404BF1                 mov     ecx, [edx+eax*4+4]
.text:00404BF5                 test    ecx, ecx
.text:00404BF7                 jnz     short loc_404BF0
.text:00404BF9                 jmp     short loc_404BB3
.text:00404BF9 ; ---------------------------------------------------------------------------
.text:00404BFB                 align 10h
.text:00404C00
.text:00404C00 ; =============== S U B R O U T I N E =======================================
.text:00404C00
.text:00404C00 ; Attributes: bp-based frame
.text:00404C00
.text:00404C00 sub_404C00      proc near               ; CODE XREF: sub_401360+19↑p
.text:00404C00
.text:00404C00 var_8           = dword ptr -8
.text:00404C00 var_4           = dword ptr -4
.text:00404C00
.text:00404C00                 push    ebp
.text:00404C01                 mov     ebp, esp
.text:00404C03                 sub     esp, 8
.text:00404C06                 mov     [ebp+var_4], ebx
.text:00404C09                 mov     edx, dword_405080
.text:00404C0F                 test    edx, edx
.text:00404C11                 jnz     short loc_404C3A
.text:00404C13                 mov     eax, ds:dword_404ED0
.text:00404C18                 mov     edx, 1
.text:00404C1D                 mov     dword_405080, edx
.text:00404C23                 cmp     eax, 0FFFFFFFFh
.text:00404C26                 jz      short loc_404C4D
.text:00404C28
.text:00404C28 loc_404C28:                             ; CODE XREF: sub_404C00+57↓j
.text:00404C28                                         ; sub_404C00+69↓j
.text:00404C28                 test    eax, eax
.text:00404C2A                 mov     ebx, eax
.text:00404C2C                 jnz     short loc_404C41
.text:00404C2E
.text:00404C2E loc_404C2E:                             ; CODE XREF: sub_404C00+4B↓j
.text:00404C2E                 mov     [esp+8+var_8], offset sub_404B70 ; void (__cdecl *)()
.text:00404C35                 call    sub_401040
.text:00404C3A
.text:00404C3A loc_404C3A:                             ; CODE XREF: sub_404C00+11↑j
.text:00404C3A                 mov     ebx, [ebp+var_4]
.text:00404C3D                 mov     esp, ebp
.text:00404C3F                 pop     ebp
.text:00404C40                 retn
.text:00404C41 ; ---------------------------------------------------------------------------
.text:00404C41
.text:00404C41 loc_404C41:                             ; CODE XREF: sub_404C00+2C↑j
.text:00404C41                                         ; sub_404C00+49↓j
.text:00404C41                 call    ds:dword_404ED0[ebx*4]
.text:00404C48                 dec     ebx
.text:00404C49                 jnz     short loc_404C41
.text:00404C4B                 jmp     short loc_404C2E
.text:00404C4D ; ---------------------------------------------------------------------------
.text:00404C4D
.text:00404C4D loc_404C4D:                             ; CODE XREF: sub_404C00+26↑j
.text:00404C4D                 mov     ecx, ds:dword_404ED4
.text:00404C53                 xor     eax, eax
.text:00404C55                 test    ecx, ecx
.text:00404C57                 jz      short loc_404C28
.text:00404C59                 mov     edx, offset dword_404ED0
.text:00404C5E                 mov     esi, esi
.text:00404C60
.text:00404C60 loc_404C60:                             ; CODE XREF: sub_404C00+67↓j
.text:00404C60                 inc     eax
.text:00404C61                 mov     ebx, [edx+eax*4+4]
.text:00404C65                 test    ebx, ebx
.text:00404C67                 jnz     short loc_404C60
.text:00404C69                 jmp     short loc_404C28
.text:00404C69 sub_404C00      endp
.text:00404C69
.text:00404C69 ; ---------------------------------------------------------------------------
.text:00404C6B                 align 10h
.text:00404C70
.text:00404C70 ; =============== S U B R O U T I N E =======================================
.text:00404C70
.text:00404C70 ; Attributes: info_from_lumina
.text:00404C70
.text:00404C70 ; void *__cdecl _alloca(size_t Size)
.text:00404C70 __alloca        proc near               ; CODE XREF: sub_401360+14↑p
.text:00404C70                 push    ecx
.text:00404C71                 mov     ecx, esp
.text:00404C73                 add     ecx, 8
.text:00404C76
.text:00404C76 loc_404C76:                             ; CODE XREF: __alloca+1B↓j
.text:00404C76                 cmp     eax, 1000h
.text:00404C7B                 jb      short loc_404C8D
.text:00404C7D                 sub     ecx, 1000h
.text:00404C83                 or      dword ptr [ecx], 0
.text:00404C86                 sub     eax, 1000h
.text:00404C8B                 jmp     short loc_404C76
.text:00404C8D ; ---------------------------------------------------------------------------
.text:00404C8D
.text:00404C8D loc_404C8D:                             ; CODE XREF: __alloca+B↑j
.text:00404C8D                 sub     ecx, eax
.text:00404C8F                 or      dword ptr [ecx], 0
.text:00404C92                 mov     eax, esp
.text:00404C94                 mov     esp, ecx
.text:00404C96                 mov     ecx, [eax]
.text:00404C98                 mov     eax, [eax+4]
.text:00404C9B                 jmp     eax
.text:00404C9B __alloca        endp
.text:00404C9B
.text:00404C9B ; ---------------------------------------------------------------------------
.text:00404C9D                 align 10h
.text:00404CA0                 jmp     ds:__set_app_type
.text:00404CA0 ; ---------------------------------------------------------------------------
.text:00404CA6                 align 10h
.text:00404CB0
.text:00404CB0 ; =============== S U B R O U T I N E =======================================
.text:00404CB0
.text:00404CB0 ; Attributes: thunk
.text:00404CB0
.text:00404CB0 ; void __cdecl cexit()
.text:00404CB0 _cexit          proc near               ; CODE XREF: .text:0040116C↑p
.text:00404CB0                 jmp     ds:__imp__cexit
.text:00404CB0 _cexit          endp
.text:00404CB0
.text:00404CB0 ; ---------------------------------------------------------------------------
.text:00404CB6                 align 10h
.text:00404CC0
.text:00404CC0 ; =============== S U B R O U T I N E =======================================
.text:00404CC0
.text:00404CC0 ; Attributes: thunk
.text:00404CC0
.text:00404CC0 ; char ***__cdecl _p__environ()
.text:00404CC0 __p__environ    proc near               ; CODE XREF: sub_401080+C7↑p
.text:00404CC0                 jmp     ds:__imp___p__environ
.text:00404CC0 __p__environ    endp
.text:00404CC0
.text:00404CC0 ; ---------------------------------------------------------------------------
.text:00404CC6                 align 10h
.text:00404CD0
.text:00404CD0 ; =============== S U B R O U T I N E =======================================
.text:00404CD0
.text:00404CD0 ; Attributes: thunk
.text:00404CD0
.text:00404CD0 ; _crt_signal_t __cdecl signal(int Signal, _crt_signal_t Function)
.text:00404CD0 signal          proc near               ; CODE XREF: TopLevelExceptionFilter+4D↑p
.text:00404CD0                                         ; TopLevelExceptionFilter+88↑p ...
.text:00404CD0
.text:00404CD0 Signal          = dword ptr  4
.text:00404CD0 Function        = dword ptr  8
.text:00404CD0
.text:00404CD0                 jmp     ds:__imp_signal
.text:00404CD0 signal          endp
.text:00404CD0
.text:00404CD0 ; ---------------------------------------------------------------------------
.text:00404CD6                 align 10h
.text:00404CE0
.text:00404CE0 ; =============== S U B R O U T I N E =======================================
.text:00404CE0
.text:00404CE0 ; Attributes: thunk
.text:00404CE0
.text:00404CE0 ; int *__cdecl _p__fmode()
.text:00404CE0 __p__fmode      proc near               ; CODE XREF: sub_401080:loc_401135↑p
.text:00404CE0                 jmp     ds:__imp___p__fmode
.text:00404CE0 __p__fmode      endp
.text:00404CE0
.text:00404CE0 ; ---------------------------------------------------------------------------
.text:00404CE6                 align 10h
.text:00404CF0
.text:00404CF0 ; =============== S U B R O U T I N E =======================================
.text:00404CF0
.text:00404CF0 ; Attributes: thunk
.text:00404CF0
.text:00404CF0 ; int __cdecl setmode(int FileHandle, int Mode)
.text:00404CF0 _setmode        proc near               ; CODE XREF: sub_401080+70↑p
.text:00404CF0                                         ; sub_401080+90↑p ...
.text:00404CF0
.text:00404CF0 FileHandle      = dword ptr  4
.text:00404CF0 Mode            = dword ptr  8
.text:00404CF0
.text:00404CF0                 jmp     ds:__imp__setmode
.text:00404CF0 _setmode        endp
.text:00404CF0
.text:00404CF0 ; ---------------------------------------------------------------------------
.text:00404CF6                 align 10h
.text:00404D00
.text:00404D00 ; =============== S U B R O U T I N E =======================================
.text:00404D00
.text:00404D00 ; Attributes: thunk
.text:00404D00
.text:00404D00 __getmainargs   proc near               ; CODE XREF: sub_401080+49↑p
.text:00404D00                 jmp     ds:__imp___getmainargs
.text:00404D00 __getmainargs   endp
.text:00404D00
.text:00404D00 ; ---------------------------------------------------------------------------
.text:00404D06                 align 10h
.text:00404D10
.text:00404D10 ; =============== S U B R O U T I N E =======================================
.text:00404D10
.text:00404D10 ; Attributes: thunk
.text:00404D10
.text:00404D10 ; int __cdecl puts(const char *Buffer)
.text:00404D10 puts            proc near               ; CODE XREF: sub_401360+17B↑p
.text:00404D10
.text:00404D10 Buffer          = dword ptr  4
.text:00404D10
.text:00404D10                 jmp     ds:__imp_puts
.text:00404D10 puts            endp
.text:00404D10
.text:00404D10 ; ---------------------------------------------------------------------------
.text:00404D16                 align 10h
.text:00404D20
.text:00404D20 ; =============== S U B R O U T I N E =======================================
.text:00404D20
.text:00404D20 ; Attributes: thunk
.text:00404D20
.text:00404D20 ; char *__cdecl setlocale(int Category, const char *Locale)
.text:00404D20 setlocale       proc near               ; CODE XREF: sub_401360+35↑p
.text:00404D20
.text:00404D20 Category        = dword ptr  4
.text:00404D20 Locale          = dword ptr  8
.text:00404D20
.text:00404D20                 jmp     ds:__imp_setlocale
.text:00404D20 setlocale       endp
.text:00404D20
.text:00404D20 ; ---------------------------------------------------------------------------
.text:00404D26                 align 10h
.text:00404D30
.text:00404D30 ; =============== S U B R O U T I N E =======================================
.text:00404D30
.text:00404D30 ; Attributes: thunk
.text:00404D30
.text:00404D30 ; size_t __cdecl strlen(const char *Str)
.text:00404D30 strlen          proc near               ; CODE XREF: sub_401360+190↑p
.text:00404D30                                         ; sub_401360+19B↑p ...
.text:00404D30
.text:00404D30 Str             = dword ptr  4
.text:00404D30
.text:00404D30                 jmp     ds:__imp_strlen
.text:00404D30 strlen          endp
.text:00404D30
.text:00404D30 ; ---------------------------------------------------------------------------
.text:00404D36                 align 10h
.text:00404D40
.text:00404D40 ; =============== S U B R O U T I N E =======================================
.text:00404D40
.text:00404D40 ; Attributes: noreturn thunk
.text:00404D40
.text:00404D40 ; void __cdecl __noreturn exit(int Code)
.text:00404D40 exit            proc near               ; CODE XREF: sub_401360:loc_4014AD↑p
.text:00404D40                                         ; sub_4016D0+3E↑p ...
.text:00404D40
.text:00404D40 Code            = dword ptr  4
.text:00404D40
.text:00404D40                 jmp     ds:__imp_exit
.text:00404D40 exit            endp
.text:00404D40
.text:00404D40 ; ---------------------------------------------------------------------------
.text:00404D46                 align 10h
.text:00404D50
.text:00404D50 ; =============== S U B R O U T I N E =======================================
.text:00404D50
.text:00404D50 ; Attributes: thunk
.text:00404D50
.text:00404D50 ; int __cdecl fputs(const char *Buffer, FILE *Stream)
.text:00404D50 fputs           proc near               ; CODE XREF: sub_4016D0+83↑p
.text:00404D50                                         ; sub_4016D0+A5↑p ...
.text:00404D50
.text:00404D50 Buffer          = dword ptr  4
.text:00404D50 Stream          = dword ptr  8
.text:00404D50
.text:00404D50                 jmp     ds:__imp_fputs
.text:00404D50 fputs           endp
.text:00404D50
.text:00404D50 ; ---------------------------------------------------------------------------
.text:00404D56                 align 10h
.text:00404D60
.text:00404D60 ; =============== S U B R O U T I N E =======================================
.text:00404D60
.text:00404D60 ; Attributes: thunk
.text:00404D60
.text:00404D60 ; int printf(const char *const Format, ...)
.text:00404D60 printf          proc near               ; CODE XREF: sub_4016D0+61↑p
.text:00404D60                                         ; sub_4016D0+E4↑p
.text:00404D60
.text:00404D60 Format          = dword ptr  4
.text:00404D60
.text:00404D60                 jmp     ds:__imp_printf
.text:00404D60 printf          endp
.text:00404D60
.text:00404D60 ; ---------------------------------------------------------------------------
.text:00404D66                 align 10h
.text:00404D70
.text:00404D70 ; =============== S U B R O U T I N E =======================================
.text:00404D70
.text:00404D70 ; Attributes: thunk
.text:00404D70
.text:00404D70 ; int fprintf(FILE *const Stream, const char *const Format, ...)
.text:00404D70 fprintf         proc near               ; CODE XREF: sub_401360+141↑p
.text:00404D70                                         ; sub_4016D0+36↑p ...
.text:00404D70
.text:00404D70 Stream          = dword ptr  4
.text:00404D70 Format          = dword ptr  8
.text:00404D70
.text:00404D70                 jmp     ds:__imp_fprintf
.text:00404D70 fprintf         endp
.text:00404D70
.text:00404D70 ; ---------------------------------------------------------------------------
.text:00404D76                 align 10h
.text:00404D80
.text:00404D80 ; =============== S U B R O U T I N E =======================================
.text:00404D80
.text:00404D80 ; Attributes: thunk
.text:00404D80
.text:00404D80 ; int __cdecl strncmp(const char *Str1, const char *Str2, size_t MaxCount)
.text:00404D80 strncmp         proc near               ; CODE XREF: sub_401A10+23F↑p
.text:00404D80                                         ; sub_401A10+699↑p
.text:00404D80
.text:00404D80 Str1            = dword ptr  4
.text:00404D80 Str2            = dword ptr  8
.text:00404D80 MaxCount        = dword ptr  0Ch
.text:00404D80
.text:00404D80                 jmp     ds:__imp_strncmp
.text:00404D80 strncmp         endp
.text:00404D80
.text:00404D80 ; ---------------------------------------------------------------------------
.text:00404D86                 align 10h
.text:00404D90
.text:00404D90 ; =============== S U B R O U T I N E =======================================
.text:00404D90
.text:00404D90 ; Attributes: thunk
.text:00404D90
.text:00404D90 ; char *__cdecl getenv(const char *VarName)
.text:00404D90 getenv          proc near               ; CODE XREF: sub_401A10+B57↑p
.text:00404D90
.text:00404D90 VarName         = dword ptr  4
.text:00404D90
.text:00404D90                 jmp     ds:__imp_getenv
.text:00404D90 getenv          endp
.text:00404D90
.text:00404D90 ; ---------------------------------------------------------------------------
.text:00404D96                 align 10h
.text:00404DA0
.text:00404DA0 ; =============== S U B R O U T I N E =======================================
.text:00404DA0
.text:00404DA0 ; Attributes: thunk
.text:00404DA0
.text:00404DA0 ; char *__cdecl strchr(const char *Str, int Val)
.text:00404DA0 strchr          proc near               ; CODE XREF: sub_401A10+469↑p
.text:00404DA0                                         ; sub_401A10+53A↑p ...
.text:00404DA0
.text:00404DA0 Str             = dword ptr  4
.text:00404DA0 Val             = dword ptr  8
.text:00404DA0
.text:00404DA0                 jmp     ds:__imp_strchr
.text:00404DA0 strchr          endp
.text:00404DA0
.text:00404DA0 ; ---------------------------------------------------------------------------
.text:00404DA6                 align 10h
.text:00404DB0
.text:00404DB0 ; =============== S U B R O U T I N E =======================================
.text:00404DB0
.text:00404DB0 ; Attributes: thunk
.text:00404DB0
.text:00404DB0 ; int *__cdecl errno()
.text:00404DB0 _errno          proc near               ; CODE XREF: sub_402B80:loc_402BBD↑p
.text:00404DB0                                         ; .text:0040375B↑p ...
.text:00404DB0                 jmp     ds:__imp__errno
.text:00404DB0 _errno          endp
.text:00404DB0
.text:00404DB0 ; ---------------------------------------------------------------------------
.text:00404DB6                 align 10h
.text:00404DC0
.text:00404DC0 ; =============== S U B R O U T I N E =======================================
.text:00404DC0
.text:00404DC0 ; Attributes: thunk
.text:00404DC0
.text:00404DC0 ; int __cdecl fclose(FILE *Stream)
.text:00404DC0 fclose          proc near               ; CODE XREF: sub_402B80+27↑p
.text:00404DC0
.text:00404DC0 Stream          = dword ptr  4
.text:00404DC0
.text:00404DC0                 jmp     ds:__imp_fclose
.text:00404DC0 fclose          endp
.text:00404DC0
.text:00404DC0 ; ---------------------------------------------------------------------------
.text:00404DC6                 align 10h
.text:00404DD0
.text:00404DD0 ; =============== S U B R O U T I N E =======================================
.text:00404DD0
.text:00404DD0 ; Attributes: thunk
.text:00404DD0
.text:00404DD0 ; void __cdecl free(void *Block)
.text:00404DD0 free            proc near               ; CODE XREF: sub_403E30+112↑p
.text:00404DD0
.text:00404DD0 Block           = dword ptr  4
.text:00404DD0
.text:00404DD0                 jmp     ds:__imp_free
.text:00404DD0 free            endp
.text:00404DD0
.text:00404DD0 ; ---------------------------------------------------------------------------
.text:00404DD6                 align 10h
.text:00404DE0
.text:00404DE0 ; =============== S U B R O U T I N E =======================================
.text:00404DE0
.text:00404DE0 ; Attributes: noreturn thunk
.text:00404DE0
.text:00404DE0 ; void __cdecl __noreturn abort()
.text:00404DE0 abort           proc near               ; CODE XREF: sub_403E30:loc_403FEA↑p
.text:00404DE0                                         ; sub_4042F0:loc_40438C↑p ...
.text:00404DE0                 jmp     ds:__imp_abort
.text:00404DE0 abort           endp
.text:00404DE0
.text:00404DE0 ; ---------------------------------------------------------------------------
.text:00404DE6                 align 10h
.text:00404DF0
.text:00404DF0 ; =============== S U B R O U T I N E =======================================
.text:00404DF0
.text:00404DF0 ; Attributes: thunk
.text:00404DF0
.text:00404DF0 ; int __cdecl iswctype(wint_t C, wctype_t Type)
.text:00404DF0 iswctype        proc near               ; CODE XREF: sub_402CF0+78B↑p
.text:00404DF0
.text:00404DF0 C               = word ptr  4
.text:00404DF0 Type            = word ptr  8
.text:00404DF0
.text:00404DF0                 jmp     ds:__imp_iswctype
.text:00404DF0 iswctype        endp
.text:00404DF0
.text:00404DF0 ; ---------------------------------------------------------------------------
.text:00404DF6                 align 10h
.text:00404E00
.text:00404E00 ; =============== S U B R O U T I N E =======================================
.text:00404E00
.text:00404E00 ; Attributes: thunk
.text:00404E00
.text:00404E00 ; int __cdecl isctype(int C, int Type)
.text:00404E00 _isctype        proc near               ; CODE XREF: sub_402CF0+610↑p
.text:00404E00
.text:00404E00 C               = dword ptr  4
.text:00404E00 Type            = dword ptr  8
.text:00404E00
.text:00404E00                 jmp     ds:__imp__isctype
.text:00404E00 _isctype        endp
.text:00404E00
.text:00404E00 ; ---------------------------------------------------------------------------
.text:00404E06                 align 10h
.text:00404E10
.text:00404E10 ; =============== S U B R O U T I N E =======================================
.text:00404E10
.text:00404E10 ; Attributes: thunk
.text:00404E10
.text:00404E10 ; int __cdecl vfprintf(FILE *const Stream, const char *const Format, va_list ArgList)
.text:00404E10 vfprintf        proc near               ; CODE XREF: sub_4042F0+C1↑p
.text:00404E10                                         ; sub_404880+49↑p ...
.text:00404E10
.text:00404E10 Stream          = dword ptr  4
.text:00404E10 Format          = dword ptr  8
.text:00404E10 ArgList         = dword ptr  0Ch
.text:00404E10
.text:00404E10                 jmp     ds:__imp_vfprintf
.text:00404E10 vfprintf        endp
.text:00404E10
.text:00404E10 ; ---------------------------------------------------------------------------
.text:00404E16                 align 10h
.text:00404E20
.text:00404E20 ; =============== S U B R O U T I N E =======================================
.text:00404E20
.text:00404E20 ; Attributes: thunk
.text:00404E20
.text:00404E20 ; int __cdecl flsbuf(int Ch, FILE *File)
.text:00404E20 _flsbuf         proc near               ; CODE XREF: sub_4042F0+128↑p
.text:00404E20                                         ; sub_4042F0+13A↑p ...
.text:00404E20
.text:00404E20 File            = dword ptr  8
.text:00404E20
.text:00404E20                 jmp     ds:__imp__flsbuf
.text:00404E20 _flsbuf         endp
.text:00404E20
.text:00404E20 ; ---------------------------------------------------------------------------
.text:00404E26                 align 10h
.text:00404E30
.text:00404E30 ; =============== S U B R O U T I N E =======================================
.text:00404E30
.text:00404E30 ; Attributes: thunk
.text:00404E30
.text:00404E30 ; void *__cdecl memcpy(void *, const void *Src, size_t Size)
.text:00404E30 memcpy          proc near               ; CODE XREF: .text:004046E8↑p
.text:00404E30                                         ; .text:00404731↑p
.text:00404E30
.text:00404E30 Src             = dword ptr  8
.text:00404E30 Size            = dword ptr  0Ch
.text:00404E30
.text:00404E30                 jmp     ds:__imp_memcpy
.text:00404E30 memcpy          endp
.text:00404E30
.text:00404E30 ; ---------------------------------------------------------------------------
.text:00404E36                 align 10h
.text:00404E40
.text:00404E40 ; =============== S U B R O U T I N E =======================================
.text:00404E40
.text:00404E40 ; Attributes: thunk
.text:00404E40
.text:00404E40 ; void *__cdecl memset(void *, int Val, size_t Size)
.text:00404E40 memset          proc near               ; CODE XREF: .text:00404666↑p
.text:00404E40
.text:00404E40 Val             = dword ptr  8
.text:00404E40 Size            = dword ptr  0Ch
.text:00404E40
.text:00404E40                 jmp     ds:__imp_memset
.text:00404E40 memset          endp
.text:00404E40
.text:00404E40 ; ---------------------------------------------------------------------------
.text:00404E46                 align 10h
.text:00404E50
.text:00404E50 ; =============== S U B R O U T I N E =======================================
.text:00404E50
.text:00404E50 ; Attributes: thunk
.text:00404E50
.text:00404E50 ; void *__cdecl calloc(size_t Count, size_t Size)
.text:00404E50 calloc          proc near               ; CODE XREF: .text:004046A3↑p
.text:00404E50
.text:00404E50 Count           = dword ptr  4
.text:00404E50 Size            = dword ptr  8
.text:00404E50
.text:00404E50                 jmp     ds:__imp_calloc
.text:00404E50 calloc          endp
.text:00404E50
.text:00404E50 ; ---------------------------------------------------------------------------
.text:00404E56                 align 10h
.text:00404E60
.text:00404E60 ; =============== S U B R O U T I N E =======================================
.text:00404E60
.text:00404E60 ; Attributes: thunk
.text:00404E60
.text:00404E60 ; void *__cdecl realloc(void *Block, size_t Size)
.text:00404E60 realloc         proc near               ; CODE XREF: .text:004045A0↑p
.text:00404E60                                         ; sub_4045D0+16↑p ...
.text:00404E60
.text:00404E60 Block           = dword ptr  4
.text:00404E60 Size            = dword ptr  8
.text:00404E60
.text:00404E60                 jmp     ds:__imp_realloc
.text:00404E60 realloc         endp
.text:00404E60
.text:00404E60 ; ---------------------------------------------------------------------------
.text:00404E66                 align 10h
.text:00404E70
.text:00404E70 ; =============== S U B R O U T I N E =======================================
.text:00404E70
.text:00404E70 ; Attributes: thunk
.text:00404E70
.text:00404E70 ; void *__cdecl malloc(size_t Size)
.text:00404E70 malloc          proc near               ; CODE XREF: .text:00404524↑p
.text:00404E70                                         ; sub_404540+E↑p ...
.text:00404E70
.text:00404E70 Size            = dword ptr  4
.text:00404E70
.text:00404E70                 jmp     ds:__imp_malloc
.text:00404E70 malloc          endp
.text:00404E70
.text:00404E70 ; ---------------------------------------------------------------------------
.text:00404E76                 align 10h
.text:00404E80
.text:00404E80 ; =============== S U B R O U T I N E =======================================
.text:00404E80
.text:00404E80 ; Attributes: thunk
.text:00404E80
.text:00404E80 ; int __cdecl strcmp(const char *Str1, const char *Str2)
.text:00404E80 strcmp          proc near               ; CODE XREF: sub_404984+180↑p
.text:00404E80
.text:00404E80 Str1            = dword ptr  4
.text:00404E80 Str2            = dword ptr  8
.text:00404E80
.text:00404E80                 jmp     ds:__imp_strcmp
.text:00404E80 strcmp          endp
.text:00404E80
.text:00404E80 ; ---------------------------------------------------------------------------
.text:00404E86                 align 10h
.text:00404E90
.text:00404E90 ; =============== S U B R O U T I N E =======================================
.text:00404E90
.text:00404E90 ; Attributes: thunk
.text:00404E90
.text:00404E90 ; int __cdecl fflush(FILE *Stream)
.text:00404E90 fflush          proc near               ; CODE XREF: sub_404880+19↑p
.text:00404E90                                         ; sub_404880+81↑p ...
.text:00404E90
.text:00404E90 Stream          = dword ptr  4
.text:00404E90
.text:00404E90                 jmp     ds:__imp_fflush
.text:00404E90 fflush          endp
.text:00404E90
.text:00404E90 ; ---------------------------------------------------------------------------
.text:00404E96                 align 10h
.text:00404EA0
.text:00404EA0 ; =============== S U B R O U T I N E =======================================
.text:00404EA0
.text:00404EA0 ; Attributes: thunk
.text:00404EA0
.text:00404EA0 ; char *__cdecl strerror(int ErrorMessage)
.text:00404EA0 strerror        proc near               ; CODE XREF: sub_404880+A5↑p
.text:00404EA0                                         ; sub_404984+10F↑p
.text:00404EA0
.text:00404EA0 ErrorMessage    = dword ptr  4
.text:00404EA0
.text:00404EA0                 jmp     ds:__imp_strerror
.text:00404EA0 strerror        endp
.text:00404EA0
.text:00404EA0 ; ---------------------------------------------------------------------------
.text:00404EA6                 align 10h
.text:00404EB0
.text:00404EB0 ; =============== S U B R O U T I N E =======================================
.text:00404EB0
.text:00404EB0 ; Attributes: thunk
.text:00404EB0
.text:00404EB0 ; LPTOP_LEVEL_EXCEPTION_FILTER __stdcall SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.text:00404EB0 SetUnhandledExceptionFilter proc near   ; CODE XREF: sub_401080+E↑p
.text:00404EB0
.text:00404EB0 lpTopLevelExceptionFilter= dword ptr  4
.text:00404EB0
.text:00404EB0                 jmp     ds:__imp_SetUnhandledExceptionFilter
.text:00404EB0 SetUnhandledExceptionFilter endp
.text:00404EB0
.text:00404EB0 ; ---------------------------------------------------------------------------
.text:00404EB6                 align 10h
.text:00404EC0
.text:00404EC0 ; =============== S U B R O U T I N E =======================================
.text:00404EC0
.text:00404EC0 ; Attributes: noreturn thunk
.text:00404EC0
.text:00404EC0 ; void __stdcall __noreturn ExitProcess(UINT uExitCode)
.text:00404EC0 ExitProcess     proc near               ; CODE XREF: .text:00401174↑p
.text:00404EC0
.text:00404EC0 uExitCode       = dword ptr  4
.text:00404EC0
.text:00404EC0                 jmp     ds:__imp_ExitProcess
.text:00404EC0 ExitProcess     endp
.text:00404EC0
.text:00404EC0 ; ---------------------------------------------------------------------------
.text:00404EC6                 align 10h
.text:00404ED0 dword_404ED0    dd 0FFFFFFFFh           ; DATA XREF: .text:00404BA9↑r
.text:00404ED0                                         ; .text:loc_404BD0↑r ...
.text:00404ED4 dword_404ED4    dd 0                    ; DATA XREF: .text:loc_404BDC↑r
.text:00404ED4                                         ; sub_404C00:loc_404C4D↑r
.text:00404ED8                 dd 0FFFFFFFFh
.text:00404EDC dword_404EDC    dd 49h dup(0)           ; DATA XREF: .data:off_405084↓o
.text:00404EDC _text           ends
.text:00404EDC
.data:00405000 ; Section 2. (virtual address 00005000)
.data:00405000 ; Virtual size                  : 000000A0 (    160.)
.data:00405000 ; Section size in file          : 00000200 (    512.)
.data:00405000 ; Offset to raw data for section: 00004400
.data:00405000 ; Flags C0000040: Data Readable Writable
.data:00405000 ; Alignment     : default
.data:00405000 ; ===========================================================================
.data:00405000
.data:00405000 ; Segment type: Pure data
.data:00405000 ; Segment permissions: Read/Write
.data:00405000 _data           segment para public 'DATA' use32
.data:00405000                 assume cs:_data
.data:00405000                 ;org 405000h
.data:00405000 dword_405000    dd 0                    ; DATA XREF: sub_401080+1B↑o
.data:00405000                                         ; sub_401080+CC↑r
.data:00405004 dword_405004    dd 0                    ; DATA XREF: sub_401080+41↑o
.data:00405004                                         ; sub_401080+D4↑r
.data:00405008                 align 10h
.data:00405010 dword_405010    dd 1                    ; DATA XREF: sub_401360+CB↑r
.data:00405010                                         ; sub_401360+16B↑r ...
.data:00405014 dword_405014    dd 1                    ; DATA XREF: sub_4025A0+11↑r
.data:00405014                                         ; .text:00402641↑r ...
.data:00405018 dword_405018    dd 3Fh                  ; DATA XREF: sub_4025A0+7D↑w
.data:00405018                                         ; .text:004026AD↑w
.data:0040501C                 align 10h
.data:00405020 dword_405020    dd 1                    ; DATA XREF: sub_403E30+22↑r
.data:00405020                                         ; sub_403E30+65↑r ...
.data:00405024 dword_405024    dd 100h                 ; DATA XREF: sub_403E30+3F↑o
.data:00405024                                         ; sub_403E30+1A2↑r ...
.data:00405028 off_405028      dd offset unk_406040    ; DATA XREF: sub_403E30+1AA↑r
.data:0040502C ; void *off_40502C
.data:0040502C off_40502C      dd offset dword_405024  ; DATA XREF: sub_403E30+39↑r
.data:0040502C                                         ; sub_403E30+60↑w ...
.data:00405030 ; char *Buffer
.data:00405030 Buffer          dd offset aCopyrightC2005
.data:00405030                                         ; DATA XREF: sub_4042F0+DC↑r
.data:00405030                                         ; "Copyright (C) 2005 Free Software Founda"...
.data:00405034                 align 10h
.data:00405040 ; int Code
.data:00405040 Code            dd 1                    ; DATA XREF: sub_402B80+6D↑r
.data:00405040                                         ; sub_402B80+9A↑r ...
.data:00405044                 align 10h
.data:00405050 dword_405050    dd 0FFFFFFFFh           ; DATA XREF: sub_401080+22↑r
.data:00405054                 align 10h
.data:00405060 ; int Mode
.data:00405060 Mode            dd 0                    ; DATA XREF: sub_401080+4E↑r
.data:00405060                                         ; sub_401080+80↑r ...
.data:00405064                 align 10h
.data:00405070 dword_405070    dd 4000h                ; DATA XREF: sub_401080+57↑w
.data:00405070                                         ; sub_401080+BA↑r
.data:00405074                 align 10h
.data:00405080 dword_405080    dd 0                    ; DATA XREF: sub_404C00+9↑r
.data:00405080                                         ; sub_404C00+1D↑w
.data:00405084 off_405084      dd offset dword_404EDC  ; DATA XREF: sub_404B70+6↑r
.data:00405084                                         ; sub_404B70+17↑r ...
.data:00405088                 align 1000h
.data:00405088 _data           ends
.data:00405088
.bss:00406000 ; Section 3. (virtual address 00006000)
.bss:00406000 ; Virtual size                  : 00000230 (    560.)
.bss:00406000 ; Section size in file          : 00000000 (      0.)
.bss:00406000 ; Offset to raw data for section: 00000000
.bss:00406000 ; Flags C0000080: Bss Readable Writable
.bss:00406000 ; Alignment     : default
.bss:00406000 ; ===========================================================================
.bss:00406000
.bss:00406000 ; Segment type: Uninitialized
.bss:00406000 ; Segment permissions: Read/Write
.bss:00406000 _bss            segment para public 'BSS' use32
.bss:00406000                 assume cs:_bss
.bss:00406000                 ;org 406000h
.bss:00406000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00406000 dword_406000    dd ?                    ; DATA XREF: sub_4025A0+9↑o
.bss:00406000                                         ; sub_4025A0+17↑w ...
.bss:00406004 dword_406004    dd ?                    ; DATA XREF: sub_4025A0+21↑w
.bss:00406004                                         ; .text:00402659↑w
.bss:00406008 dword_406008    dd ?                    ; DATA XREF: sub_4025A0+77↑r
.bss:00406008                                         ; .text:004026A7↑r
.bss:0040600C dword_40600C    dd ?                    ; DATA XREF: sub_4025A0+6B↑r
.bss:0040600C                                         ; .text:0040269B↑r
.bss:00406010                 db    ? ;
.bss:00406011                 db    ? ;
.bss:00406012                 db    ? ;
.bss:00406013                 db    ? ;
.bss:00406014                 db    ? ;
.bss:00406015                 db    ? ;
.bss:00406016                 db    ? ;
.bss:00406017                 db    ? ;
.bss:00406018                 db    ? ;
.bss:00406019                 db    ? ;
.bss:0040601A                 db    ? ;
.bss:0040601B                 db    ? ;
.bss:0040601C                 db    ? ;
.bss:0040601D                 db    ? ;
.bss:0040601E                 db    ? ;
.bss:0040601F                 db    ? ;
.bss:00406020                 db    ? ;
.bss:00406021                 db    ? ;
.bss:00406022                 db    ? ;
.bss:00406023                 db    ? ;
.bss:00406024                 db    ? ;
.bss:00406025                 db    ? ;
.bss:00406026                 db    ? ;
.bss:00406027                 db    ? ;
.bss:00406028                 db    ? ;
.bss:00406029                 db    ? ;
.bss:0040602A                 db    ? ;
.bss:0040602B                 db    ? ;
.bss:0040602C                 db    ? ;
.bss:0040602D                 db    ? ;
.bss:0040602E                 db    ? ;
.bss:0040602F                 db    ? ;
.bss:00406030 ; char *dword_406030
.bss:00406030 dword_406030    dd ?                    ; DATA XREF: .text:00402B54↑w
.bss:00406030                                         ; sub_402B80+58↑r
.bss:00406034                 align 10h
.bss:00406040 unk_406040      db    ? ;               ; DATA XREF: sub_403E30+100↑o
.bss:00406040                                         ; .data:off_405028↑o
.bss:00406041                 db    ? ;
.bss:00406042                 db    ? ;
.bss:00406043                 db    ? ;
.bss:00406044                 db    ? ;
.bss:00406045                 db    ? ;
.bss:00406046                 db    ? ;
.bss:00406047                 db    ? ;
.bss:00406048                 db    ? ;
.bss:00406049                 db    ? ;
.bss:0040604A                 db    ? ;
.bss:0040604B                 db    ? ;
.bss:0040604C                 db    ? ;
.bss:0040604D                 db    ? ;
.bss:0040604E                 db    ? ;
.bss:0040604F                 db    ? ;
.bss:00406050                 db    ? ;
.bss:00406051                 db    ? ;
.bss:00406052                 db    ? ;
.bss:00406053                 db    ? ;
.bss:00406054                 db    ? ;
.bss:00406055                 db    ? ;
.bss:00406056                 db    ? ;
.bss:00406057                 db    ? ;
.bss:00406058                 db    ? ;
.bss:00406059                 db    ? ;
.bss:0040605A                 db    ? ;
.bss:0040605B                 db    ? ;
.bss:0040605C                 db    ? ;
.bss:0040605D                 db    ? ;
.bss:0040605E                 db    ? ;
.bss:0040605F                 db    ? ;
.bss:00406060                 db    ? ;
.bss:00406061                 db    ? ;
.bss:00406062                 db    ? ;
.bss:00406063                 db    ? ;
.bss:00406064                 db    ? ;
.bss:00406065                 db    ? ;
.bss:00406066                 db    ? ;
.bss:00406067                 db    ? ;
.bss:00406068                 db    ? ;
.bss:00406069                 db    ? ;
.bss:0040606A                 db    ? ;
.bss:0040606B                 db    ? ;
.bss:0040606C                 db    ? ;
.bss:0040606D                 db    ? ;
.bss:0040606E                 db    ? ;
.bss:0040606F                 db    ? ;
.bss:00406070                 db    ? ;
.bss:00406071                 db    ? ;
.bss:00406072                 db    ? ;
.bss:00406073                 db    ? ;
.bss:00406074                 db    ? ;
.bss:00406075                 db    ? ;
.bss:00406076                 db    ? ;
.bss:00406077                 db    ? ;
.bss:00406078                 db    ? ;
.bss:00406079                 db    ? ;
.bss:0040607A                 db    ? ;
.bss:0040607B                 db    ? ;
.bss:0040607C                 db    ? ;
.bss:0040607D                 db    ? ;
.bss:0040607E                 db    ? ;
.bss:0040607F                 db    ? ;
.bss:00406080                 db    ? ;
.bss:00406081                 db    ? ;
.bss:00406082                 db    ? ;
.bss:00406083                 db    ? ;
.bss:00406084                 db    ? ;
.bss:00406085                 db    ? ;
.bss:00406086                 db    ? ;
.bss:00406087                 db    ? ;
.bss:00406088                 db    ? ;
.bss:00406089                 db    ? ;
.bss:0040608A                 db    ? ;
.bss:0040608B                 db    ? ;
.bss:0040608C                 db    ? ;
.bss:0040608D                 db    ? ;
.bss:0040608E                 db    ? ;
.bss:0040608F                 db    ? ;
.bss:00406090                 db    ? ;
.bss:00406091                 db    ? ;
.bss:00406092                 db    ? ;
.bss:00406093                 db    ? ;
.bss:00406094                 db    ? ;
.bss:00406095                 db    ? ;
.bss:00406096                 db    ? ;
.bss:00406097                 db    ? ;
.bss:00406098                 db    ? ;
.bss:00406099                 db    ? ;
.bss:0040609A                 db    ? ;
.bss:0040609B                 db    ? ;
.bss:0040609C                 db    ? ;
.bss:0040609D                 db    ? ;
.bss:0040609E                 db    ? ;
.bss:0040609F                 db    ? ;
.bss:004060A0                 db    ? ;
.bss:004060A1                 db    ? ;
.bss:004060A2                 db    ? ;
.bss:004060A3                 db    ? ;
.bss:004060A4                 db    ? ;
.bss:004060A5                 db    ? ;
.bss:004060A6                 db    ? ;
.bss:004060A7                 db    ? ;
.bss:004060A8                 db    ? ;
.bss:004060A9                 db    ? ;
.bss:004060AA                 db    ? ;
.bss:004060AB                 db    ? ;
.bss:004060AC                 db    ? ;
.bss:004060AD                 db    ? ;
.bss:004060AE                 db    ? ;
.bss:004060AF                 db    ? ;
.bss:004060B0                 db    ? ;
.bss:004060B1                 db    ? ;
.bss:004060B2                 db    ? ;
.bss:004060B3                 db    ? ;
.bss:004060B4                 db    ? ;
.bss:004060B5                 db    ? ;
.bss:004060B6                 db    ? ;
.bss:004060B7                 db    ? ;
.bss:004060B8                 db    ? ;
.bss:004060B9                 db    ? ;
.bss:004060BA                 db    ? ;
.bss:004060BB                 db    ? ;
.bss:004060BC                 db    ? ;
.bss:004060BD                 db    ? ;
.bss:004060BE                 db    ? ;
.bss:004060BF                 db    ? ;
.bss:004060C0                 db    ? ;
.bss:004060C1                 db    ? ;
.bss:004060C2                 db    ? ;
.bss:004060C3                 db    ? ;
.bss:004060C4                 db    ? ;
.bss:004060C5                 db    ? ;
.bss:004060C6                 db    ? ;
.bss:004060C7                 db    ? ;
.bss:004060C8                 db    ? ;
.bss:004060C9                 db    ? ;
.bss:004060CA                 db    ? ;
.bss:004060CB                 db    ? ;
.bss:004060CC                 db    ? ;
.bss:004060CD                 db    ? ;
.bss:004060CE                 db    ? ;
.bss:004060CF                 db    ? ;
.bss:004060D0                 db    ? ;
.bss:004060D1                 db    ? ;
.bss:004060D2                 db    ? ;
.bss:004060D3                 db    ? ;
.bss:004060D4                 db    ? ;
.bss:004060D5                 db    ? ;
.bss:004060D6                 db    ? ;
.bss:004060D7                 db    ? ;
.bss:004060D8                 db    ? ;
.bss:004060D9                 db    ? ;
.bss:004060DA                 db    ? ;
.bss:004060DB                 db    ? ;
.bss:004060DC                 db    ? ;
.bss:004060DD                 db    ? ;
.bss:004060DE                 db    ? ;
.bss:004060DF                 db    ? ;
.bss:004060E0                 db    ? ;
.bss:004060E1                 db    ? ;
.bss:004060E2                 db    ? ;
.bss:004060E3                 db    ? ;
.bss:004060E4                 db    ? ;
.bss:004060E5                 db    ? ;
.bss:004060E6                 db    ? ;
.bss:004060E7                 db    ? ;
.bss:004060E8                 db    ? ;
.bss:004060E9                 db    ? ;
.bss:004060EA                 db    ? ;
.bss:004060EB                 db    ? ;
.bss:004060EC                 db    ? ;
.bss:004060ED                 db    ? ;
.bss:004060EE                 db    ? ;
.bss:004060EF                 db    ? ;
.bss:004060F0                 db    ? ;
.bss:004060F1                 db    ? ;
.bss:004060F2                 db    ? ;
.bss:004060F3                 db    ? ;
.bss:004060F4                 db    ? ;
.bss:004060F5                 db    ? ;
.bss:004060F6                 db    ? ;
.bss:004060F7                 db    ? ;
.bss:004060F8                 db    ? ;
.bss:004060F9                 db    ? ;
.bss:004060FA                 db    ? ;
.bss:004060FB                 db    ? ;
.bss:004060FC                 db    ? ;
.bss:004060FD                 db    ? ;
.bss:004060FE                 db    ? ;
.bss:004060FF                 db    ? ;
.bss:00406100                 db    ? ;
.bss:00406101                 db    ? ;
.bss:00406102                 db    ? ;
.bss:00406103                 db    ? ;
.bss:00406104                 db    ? ;
.bss:00406105                 db    ? ;
.bss:00406106                 db    ? ;
.bss:00406107                 db    ? ;
.bss:00406108                 db    ? ;
.bss:00406109                 db    ? ;
.bss:0040610A                 db    ? ;
.bss:0040610B                 db    ? ;
.bss:0040610C                 db    ? ;
.bss:0040610D                 db    ? ;
.bss:0040610E                 db    ? ;
.bss:0040610F                 db    ? ;
.bss:00406110                 db    ? ;
.bss:00406111                 db    ? ;
.bss:00406112                 db    ? ;
.bss:00406113                 db    ? ;
.bss:00406114                 db    ? ;
.bss:00406115                 db    ? ;
.bss:00406116                 db    ? ;
.bss:00406117                 db    ? ;
.bss:00406118                 db    ? ;
.bss:00406119                 db    ? ;
.bss:0040611A                 db    ? ;
.bss:0040611B                 db    ? ;
.bss:0040611C                 db    ? ;
.bss:0040611D                 db    ? ;
.bss:0040611E                 db    ? ;
.bss:0040611F                 db    ? ;
.bss:00406120                 db    ? ;
.bss:00406121                 db    ? ;
.bss:00406122                 db    ? ;
.bss:00406123                 db    ? ;
.bss:00406124                 db    ? ;
.bss:00406125                 db    ? ;
.bss:00406126                 db    ? ;
.bss:00406127                 db    ? ;
.bss:00406128                 db    ? ;
.bss:00406129                 db    ? ;
.bss:0040612A                 db    ? ;
.bss:0040612B                 db    ? ;
.bss:0040612C                 db    ? ;
.bss:0040612D                 db    ? ;
.bss:0040612E                 db    ? ;
.bss:0040612F                 db    ? ;
.bss:00406130                 db    ? ;
.bss:00406131                 db    ? ;
.bss:00406132                 db    ? ;
.bss:00406133                 db    ? ;
.bss:00406134                 db    ? ;
.bss:00406135                 db    ? ;
.bss:00406136                 db    ? ;
.bss:00406137                 db    ? ;
.bss:00406138                 db    ? ;
.bss:00406139                 db    ? ;
.bss:0040613A                 db    ? ;
.bss:0040613B                 db    ? ;
.bss:0040613C                 db    ? ;
.bss:0040613D                 db    ? ;
.bss:0040613E                 db    ? ;
.bss:0040613F                 db    ? ;
.bss:00406140 dword_406140    dd ?                    ; DATA XREF: .text:loc_4037C1↑o
.bss:00406140                                         ; .text:loc_4037E0↑o ...
.bss:00406144 dword_406144    dd ?                    ; DATA XREF: .text:loc_403860↑o
.bss:00406144                                         ; .text:00403CE8↑r ...
.bss:00406148 dword_406148    dd ?                    ; DATA XREF: .text:00403CE2↑r
.bss:00406148                                         ; sub_403D90+2C↑r
.bss:0040614C dword_40614C    dd ?                    ; DATA XREF: .text:00403CD6↑r
.bss:0040614C                                         ; sub_403D90+22↑r
.bss:00406150 dword_406150    dd ?                    ; DATA XREF: .text:00403CF2↑r
.bss:00406150                                         ; sub_403D90+36↑r
.bss:00406154 dword_406154    dd ?                    ; DATA XREF: .text:00403D02↑r
.bss:00406154                                         ; sub_403D90+4E↑r
.bss:00406158 dword_406158    dd ?                    ; DATA XREF: .text:00403D1F↑r
.bss:00406158                                         ; sub_403D90+62↑r
.bss:0040615C dword_40615C    dd ?                    ; DATA XREF: .text:00403D15↑r
.bss:0040615C                                         ; sub_403D90+70↑r
.bss:00406160 dword_406160    dd ?                    ; DATA XREF: .text:00403CF8↑r
.bss:00406160                                         ; sub_403D90+7A↑r
.bss:00406164                 align 10h
.bss:00406170 ; char *Str1
.bss:00406170 Str1            dd ?                    ; DATA XREF: sub_404984:loc_4049BD↑w
.bss:00406170                                         ; sub_404984:loc_404AF0↑r
.bss:00406174                 align 10h
.bss:00406180 dword_406180    dd ?                    ; DATA XREF: sub_404984+2D↑r
.bss:00406180                                         ; sub_404984+3F↑w
.bss:00406184                 align 10h
.bss:00406190 dword_406190    dd ?                    ; DATA XREF: sub_401360+2F↑w
.bss:00406190                                         ; sub_401360+12D↑r ...
.bss:00406194                 db    ? ;
.bss:00406195                 db    ? ;
.bss:00406196                 db    ? ;
.bss:00406197                 db    ? ;
.bss:00406198                 db    ? ;
.bss:00406199                 db    ? ;
.bss:0040619A                 db    ? ;
.bss:0040619B                 db    ? ;
.bss:0040619C                 db    ? ;
.bss:0040619D                 db    ? ;
.bss:0040619E                 db    ? ;
.bss:0040619F                 db    ? ;
.bss:004061A0                 db    ? ;
.bss:004061A1                 db    ? ;
.bss:004061A2                 db    ? ;
.bss:004061A3                 db    ? ;
.bss:004061A4                 db    ? ;
.bss:004061A5                 db    ? ;
.bss:004061A6                 db    ? ;
.bss:004061A7                 db    ? ;
.bss:004061A8                 db    ? ;
.bss:004061A9                 db    ? ;
.bss:004061AA                 db    ? ;
.bss:004061AB                 db    ? ;
.bss:004061AC                 db    ? ;
.bss:004061AD                 db    ? ;
.bss:004061AE                 db    ? ;
.bss:004061AF                 db    ? ;
.bss:004061B0 dword_4061B0    dd ?                    ; DATA XREF: sub_4025A0+71↑w
.bss:004061B0                                         ; .text:004026A1↑w
.bss:004061B4                 align 10h
.bss:004061C0 dword_4061C0    dd ?                    ; CODE XREF: sub_404984+63↑p
.bss:004061C0                                         ; DATA XREF: sub_404880+1E↑r ...
.bss:004061C4                 align 10h
.bss:004061D0 dword_4061D0    dd ?                    ; DATA XREF: sub_404880+4E↑w
.bss:004061D0                                         ; sub_404984+AB↑w
.bss:004061D4                 align 40h
.bss:00406200 dword_406200    dd ?                    ; DATA XREF: sub_404984+13↑r
.bss:00406204                 align 1000h
.bss:00406204 _bss            ends
.bss:00406204
.idata:00407000 ; Section 4. (virtual address 00007000)
.idata:00407000 ; Virtual size                  : 00000538 (   1336.)
.idata:00407000 ; Section size in file          : 00000600 (   1536.)
.idata:00407000 ; Offset to raw data for section: 00004600
.idata:00407000 ; Flags C0000040: Data Readable Writable
.idata:00407000 ; Alignment     : default
.idata:00407000 ; ===========================================================================
.idata:00407000
.idata:00407000 ; Segment type: Externs
.idata:00407000 ; _idata
.idata:00407000
.idata:00407001
.idata:00407138 ;
.idata:00407138 ; Imports from libintl3.dll
.idata:00407138 ;
.idata:00407138                 extrn __imp_libintl_bindtextdomain:dword
.idata:00407138                                         ; CODE XREF: sub_401360+49↑p
.idata:00407138                                         ; DATA XREF: sub_401360+49↑r ...
.idata:0040713C                 extrn libintl_gettext:dword
.idata:0040713C                                         ; CODE XREF: sub_401360+F8↑p
.idata:0040713C                                         ; sub_401360+121↑p ...
.idata:00407140                 extrn libintl_textdomain:dword
.idata:00407140                                         ; CODE XREF: sub_401360+56↑p
.idata:00407140                                         ; DATA XREF: sub_401360+56↑r ...
.idata:00407144
.idata:0040714C ;
.idata:0040714C ; Imports from KERNEL32.dll
.idata:0040714C ;
.idata:0040714C ; void (__stdcall __noreturn *ExitProcess)(UINT uExitCode)
.idata:0040714C                 extrn __imp_ExitProcess:dword
.idata:0040714C                                         ; DATA XREF: ExitProcess↑r
.idata:00407150 ; LPTOP_LEVEL_EXCEPTION_FILTER (__stdcall *SetUnhandledExceptionFilter)(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.idata:00407150                 extrn __imp_SetUnhandledExceptionFilter:dword
.idata:00407150                                         ; DATA XREF: SetUnhandledExceptionFilter↑r
.idata:00407154
.idata:0040715C ;
.idata:0040715C ; Imports from MSVCP60.DLL
.idata:0040715C ;
.idata:0040715C ; size_t (__cdecl *mbrtowc)(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.idata:0040715C                 extrn __imp_mbrtowc:dword
.idata:0040715C                                         ; DATA XREF: mbrtowc↑r
.idata:00407160
.idata:00407168 ;
.idata:00407168 ; Imports from msvcrt.dll
.idata:00407168 ;
.idata:00407168                 extrn __imp___getmainargs:dword
.idata:00407168                                         ; DATA XREF: __getmainargs↑r
.idata:0040716C ; int _mb_cur_max
.idata:0040716C                 extrn __mb_cur_max:dword
.idata:0040716C                                         ; DATA XREF: sub_402CF0+7↑r
.idata:0040716C                                         ; sub_402CF0+5F3↑r
.idata:00407170 ; char ***(__cdecl *__p__environ)()
.idata:00407170                 extrn __imp___p__environ:dword
.idata:00407170                                         ; DATA XREF: __p__environ↑r
.idata:00407174 ; int *(__cdecl *__p__fmode)()
.idata:00407174                 extrn __imp___p__fmode:dword
.idata:00407174                                         ; DATA XREF: __p__fmode↑r
.idata:00407178 ; void (__cdecl *_set_app_type)(_crt_app_type Type)
.idata:00407178                 extrn __set_app_type:dword
.idata:00407178                                         ; CODE XREF: start+D↑p
.idata:00407178                                         ; .text:0040102D↑p
.idata:00407178                                         ; DATA XREF: ...
.idata:0040717C ; void (__cdecl *_cexit)()
.idata:0040717C                 extrn __imp__cexit:dword
.idata:0040717C                                         ; DATA XREF: _cexit↑r
.idata:00407180 ; int *(__cdecl *_errno)()
.idata:00407180                 extrn __imp__errno:dword
.idata:00407180                                         ; DATA XREF: _errno↑r
.idata:00407184 ; int (__cdecl *_flsbuf)(int Ch, FILE *File)
.idata:00407184                 extrn __imp__flsbuf:dword
.idata:00407184                                         ; DATA XREF: _flsbuf↑r
.idata:00407188 ; FILE iob[]
.idata:00407188                 extrn _iob:dword        ; DATA XREF: sub_401080+5C↑r
.idata:00407188                                         ; sub_401080+75↑r ...
.idata:0040718C ; int (__cdecl *_isctype)(int C, int Type)
.idata:0040718C                 extrn __imp__isctype:dword
.idata:0040718C                                         ; DATA XREF: _isctype↑r
.idata:00407190 ; _onexit_t (__cdecl *onexit)(_onexit_t Func)
.idata:00407190                 extrn _onexit:dword     ; CODE XREF: .text:0040106C↑p
.idata:00407190                                         ; DATA XREF: .text:0040106C↑r
.idata:00407194 ; const unsigned __int16 *pctype
.idata:00407194                 extrn _pctype:dword     ; DATA XREF: sub_402CF0:loc_4033E4↑r
.idata:00407198 ; int (__cdecl *_setmode)(int FileHandle, int Mode)
.idata:00407198                 extrn __imp__setmode:dword
.idata:00407198                                         ; DATA XREF: _setmode↑r
.idata:0040719C ; void (__cdecl __noreturn *abort)()
.idata:0040719C                 extrn __imp_abort:dword ; DATA XREF: abort↑r
.idata:004071A0 ; int (__cdecl *atexit)(void (__cdecl *)())
.idata:004071A0                 extrn atexit:dword      ; CODE XREF: sub_401040+C↑p
.idata:004071A0                                         ; DATA XREF: sub_401040+C↑r
.idata:004071A4 ; void *(__cdecl *calloc)(size_t Count, size_t Size)
.idata:004071A4                 extrn __imp_calloc:dword
.idata:004071A4                                         ; DATA XREF: calloc↑r
.idata:004071A8 ; void (__cdecl __noreturn *exit)(int Code)
.idata:004071A8                 extrn __imp_exit:dword  ; DATA XREF: exit↑r
.idata:004071AC ; int (__cdecl *fclose)(FILE *Stream)
.idata:004071AC                 extrn __imp_fclose:dword
.idata:004071AC                                         ; DATA XREF: fclose↑r
.idata:004071B0 ; int (__cdecl *fflush)(FILE *Stream)
.idata:004071B0                 extrn __imp_fflush:dword
.idata:004071B0                                         ; DATA XREF: fflush↑r
.idata:004071B4 ; int (*fprintf)(FILE *const Stream, const char *const Format, ...)
.idata:004071B4                 extrn __imp_fprintf:dword
.idata:004071B4                                         ; DATA XREF: fprintf↑r
.idata:004071B8 ; int (__cdecl *fputs)(const char *Buffer, FILE *Stream)
.idata:004071B8                 extrn __imp_fputs:dword ; DATA XREF: fputs↑r
.idata:004071BC ; void (__cdecl *free)(void *Block)
.idata:004071BC                 extrn __imp_free:dword  ; DATA XREF: free↑r
.idata:004071C0 ; char *(__cdecl *getenv)(const char *VarName)
.idata:004071C0                 extrn __imp_getenv:dword
.idata:004071C0                                         ; DATA XREF: getenv↑r
.idata:004071C4 ; int (__cdecl *iswctype)(wint_t C, wctype_t Type)
.idata:004071C4                 extrn __imp_iswctype:dword
.idata:004071C4                                         ; DATA XREF: iswctype↑r
.idata:004071C8 ; void *(__cdecl *malloc)(size_t Size)
.idata:004071C8                 extrn __imp_malloc:dword
.idata:004071C8                                         ; DATA XREF: malloc↑r
.idata:004071CC ; void *(__cdecl *memcpy)(void *, const void *Src, size_t Size)
.idata:004071CC                 extrn __imp_memcpy:dword
.idata:004071CC                                         ; DATA XREF: memcpy↑r
.idata:004071D0 ; void *(__cdecl *memset)(void *, int Val, size_t Size)
.idata:004071D0                 extrn __imp_memset:dword
.idata:004071D0                                         ; DATA XREF: memset↑r
.idata:004071D4 ; int (*printf)(const char *const Format, ...)
.idata:004071D4                 extrn __imp_printf:dword
.idata:004071D4                                         ; DATA XREF: printf↑r
.idata:004071D8 ; int (__cdecl *puts)(const char *Buffer)
.idata:004071D8                 extrn __imp_puts:dword  ; DATA XREF: puts↑r
.idata:004071DC ; void *(__cdecl *realloc)(void *Block, size_t Size)
.idata:004071DC                 extrn __imp_realloc:dword
.idata:004071DC                                         ; DATA XREF: realloc↑r
.idata:004071E0 ; char *(__cdecl *setlocale)(int Category, const char *Locale)
.idata:004071E0                 extrn __imp_setlocale:dword
.idata:004071E0                                         ; DATA XREF: setlocale↑r
.idata:004071E4 ; _crt_signal_t (__cdecl *signal)(int Signal, _crt_signal_t Function)
.idata:004071E4                 extrn __imp_signal:dword
.idata:004071E4                                         ; DATA XREF: signal↑r
.idata:004071E8 ; char *(__cdecl *strchr)(const char *Str, int Val)
.idata:004071E8                 extrn __imp_strchr:dword
.idata:004071E8                                         ; DATA XREF: strchr↑r
.idata:004071EC ; int (__cdecl *strcmp)(const char *Str1, const char *Str2)
.idata:004071EC                 extrn __imp_strcmp:dword
.idata:004071EC                                         ; DATA XREF: strcmp↑r
.idata:004071F0 ; char *(__cdecl *strerror)(int ErrorMessage)
.idata:004071F0                 extrn __imp_strerror:dword
.idata:004071F0                                         ; DATA XREF: strerror↑r
.idata:004071F4 ; size_t (__cdecl *strlen)(const char *Str)
.idata:004071F4                 extrn __imp_strlen:dword
.idata:004071F4                                         ; DATA XREF: strlen↑r
.idata:004071F8 ; int (__cdecl *strncmp)(const char *Str1, const char *Str2, size_t MaxCount)
.idata:004071F8                 extrn __imp_strncmp:dword
.idata:004071F8                                         ; DATA XREF: strncmp↑r
.idata:004071FC ; int (__cdecl *vfprintf)(FILE *const Stream, const char *const Format, va_list ArgList)
.idata:004071FC                 extrn __imp_vfprintf:dword
.idata:004071FC                                         ; DATA XREF: vfprintf↑r
.idata:00407200
.idata:00407200
.idata:00407200
.idata:00407200                 end start
