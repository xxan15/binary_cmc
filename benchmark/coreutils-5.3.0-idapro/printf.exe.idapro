.text:00401000 ;
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
.text:00401000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
.text:00401000 ; |                      License info: 48-357D-7BC4-C6                      |
.text:00401000 ; |                              Virginia Tech                              |
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ;
.text:00401000 ; Input SHA256 : BF5238B6562C76B62326C2218F6D2312C85B6979BEDE48158BF33EFA364F28F7
.text:00401000 ; Input MD5    : FFF0FF2616AAE6622482D0E6E9951D93
.text:00401000 ; Input CRC32  : E0E8BEE2
.text:00401000
.text:00401000 ; File Name   : /home/cindy/Documents/Projects/binary_cmc/benchmark/coreutils-5.3.0-bin/bin/printf.exe
.text:00401000 ; Format      : Portable executable for 80386 (PE)
.text:00401000 ; Imagebase   : 400000
.text:00401000 ; Timestamp   : 4266A26D (Wed Apr 20 18:41:49 2005)
.text:00401000 ; Section 1. (virtual address 00001000)
.text:00401000 ; Virtual size                  : 00009100 (  37120.)
.text:00401000 ; Section size in file          : 00009200 (  37376.)
.text:00401000 ; Offset to raw data for section: 00000400
.text:00401000 ; Flags 60000020: Text Executable Readable
.text:00401000 ; Alignment     : default
.text:00401000
.text:00401000                 .686p
.text:00401000                 .mmx
.text:00401000                 .model flat
.text:00401000
.text:00401000 ; ===========================================================================
.text:00401000
.text:00401000 ; Segment type: Pure code
.text:00401000 ; Segment permissions: Read/Execute
.text:00401000 _text           segment para public 'CODE' use32
.text:00401000                 assume cs:_text
.text:00401000                 ;org 401000h
.text:00401000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00401000
.text:00401000 ; =============== S U B R O U T I N E =======================================
.text:00401000
.text:00401000 ; Attributes: noreturn bp-based frame
.text:00401000
.text:00401000                 public start
.text:00401000 start           proc near
.text:00401000
.text:00401000 Type            = dword ptr -8
.text:00401000
.text:00401000                 push    ebp
.text:00401001                 mov     ebp, esp
.text:00401003                 sub     esp, 8
.text:00401006                 mov     [esp+8+Type], 1 ; Type
.text:0040100D                 call    ds:__set_app_type
.text:00401013                 call    sub_401080
.text:00401013 start           endp
.text:00401013
.text:00401018 ; ---------------------------------------------------------------------------
.text:00401018                 mov     esp, ebp
.text:0040101A                 xor     eax, eax
.text:0040101C                 pop     ebp
.text:0040101D                 retn
.text:0040101D ; ---------------------------------------------------------------------------
.text:0040101E                 align 10h
.text:00401020                 push    ebp
.text:00401021                 mov     ebp, esp
.text:00401023                 sub     esp, 8
.text:00401026                 mov     dword ptr [esp], 2
.text:0040102D                 call    ds:__set_app_type
.text:00401033                 call    sub_401080
.text:00401038 ; ---------------------------------------------------------------------------
.text:00401038                 mov     esp, ebp
.text:0040103A                 xor     eax, eax
.text:0040103C                 pop     ebp
.text:0040103D                 retn
.text:0040103D ; ---------------------------------------------------------------------------
.text:0040103E                 align 10h
.text:00401040
.text:00401040 ; =============== S U B R O U T I N E =======================================
.text:00401040
.text:00401040 ; Attributes: bp-based frame
.text:00401040
.text:00401040 ; int __cdecl sub_401040(void (__cdecl *)())
.text:00401040 sub_401040      proc near               ; CODE XREF: sub_4013E0+63↓p
.text:00401040                                         ; .text:00407200↓p ...
.text:00401040
.text:00401040 var_8           = dword ptr -8
.text:00401040 arg_0           = dword ptr  8
.text:00401040
.text:00401040                 push    ebp
.text:00401041                 mov     ebp, esp
.text:00401043                 sub     esp, 8
.text:00401046                 mov     edx, [ebp+arg_0]
.text:00401049                 mov     [esp+8+var_8], edx ; void (__cdecl *)()
.text:0040104C                 call    ds:atexit
.text:00401052                 mov     esp, ebp
.text:00401054                 pop     ebp
.text:00401055                 retn
.text:00401055 sub_401040      endp
.text:00401055
.text:00401055 ; ---------------------------------------------------------------------------
.text:00401056                 align 10h
.text:00401060                 push    ebp
.text:00401061                 mov     ebp, esp
.text:00401063                 sub     esp, 8
.text:00401066                 mov     edx, [ebp+8]
.text:00401069                 mov     [esp], edx
.text:0040106C                 call    ds:_onexit
.text:00401072                 mov     esp, ebp
.text:00401074                 pop     ebp
.text:00401075                 retn
.text:00401075 ; ---------------------------------------------------------------------------
.text:00401076                 align 10h
.text:00401080
.text:00401080 ; =============== S U B R O U T I N E =======================================
.text:00401080
.text:00401080 ; Attributes: noreturn bp-based frame
.text:00401080
.text:00401080 sub_401080      proc near               ; CODE XREF: start+13↑p
.text:00401080                                         ; .text:00401033↑p
.text:00401080
.text:00401080 lpTopLevelExceptionFilter= dword ptr -28h
.text:00401080 Mode            = dword ptr -24h
.text:00401080 var_20          = dword ptr -20h
.text:00401080 var_1C          = dword ptr -1Ch
.text:00401080 var_18          = dword ptr -18h
.text:00401080 var_C           = byte ptr -0Ch
.text:00401080 var_8           = dword ptr -8
.text:00401080
.text:00401080                 push    ebp
.text:00401081                 mov     ebp, esp
.text:00401083                 push    ebx
.text:00401084                 sub     esp, 24h
.text:00401087                 mov     [esp+28h+lpTopLevelExceptionFilter], offset TopLevelExceptionFilter ; lpTopLevelExceptionFilter
.text:0040108E                 call    SetUnhandledExceptionFilter
.text:00401093                 sub     esp, 4
.text:00401096                 call    sub_4071A0
.text:0040109B                 mov     [esp+28h+lpTopLevelExceptionFilter], offset dword_40B000
.text:004010A2                 mov     edx, dword_40B050
.text:004010A8                 lea     ecx, [ebp+var_8]
.text:004010AB                 mov     [ebp+var_8], 0
.text:004010B2                 mov     [esp+28h+var_18], ecx
.text:004010B6                 mov     [esp+28h+var_1C], edx
.text:004010BA                 lea     edx, [ebp+var_C]
.text:004010BD                 mov     [esp+28h+var_20], edx
.text:004010C1                 mov     [esp+28h+Mode], offset dword_40B004
.text:004010C9                 call    __getmainargs
.text:004010CE                 mov     eax, Mode
.text:004010D3                 test    eax, eax
.text:004010D5                 jz      short loc_401135
.text:004010D7                 mov     dword_40B070, eax
.text:004010DC                 mov     edx, ds:_iob
.text:004010E2                 test    edx, edx
.text:004010E4                 jz      short loc_4010FB
.text:004010E6                 mov     [esp+28h+Mode], eax ; Mode
.text:004010EA                 mov     ebx, [edx+10h]
.text:004010ED                 mov     [esp+28h+lpTopLevelExceptionFilter], ebx ; FileHandle
.text:004010F0                 call    _setmode
.text:004010F5                 mov     edx, ds:_iob
.text:004010FB
.text:004010FB loc_4010FB:                             ; CODE XREF: sub_401080+64↑j
.text:004010FB                 cmp     edx, 0FFFFFFE0h
.text:004010FE                 jz      short loc_40111B
.text:00401100                 mov     ebx, Mode
.text:00401106                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040110A                 mov     ecx, [edx+30h]
.text:0040110D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401110                 call    _setmode
.text:00401115                 mov     edx, ds:_iob
.text:0040111B
.text:0040111B loc_40111B:                             ; CODE XREF: sub_401080+7E↑j
.text:0040111B                 cmp     edx, 0FFFFFFC0h
.text:0040111E                 jz      short loc_401135
.text:00401120                 mov     ebx, Mode
.text:00401126                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040112A                 mov     ecx, [edx+50h]
.text:0040112D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401130                 call    _setmode
.text:00401135
.text:00401135 loc_401135:                             ; CODE XREF: sub_401080+55↑j
.text:00401135                                         ; sub_401080+9E↑j
.text:00401135                 call    __p__fmode
.text:0040113A                 mov     ecx, dword_40B070
.text:00401140                 mov     [eax], ecx
.text:00401142                 call    sub_407170
.text:00401147                 call    __p__environ
.text:0040114C                 mov     edx, dword_40B000
.text:00401152                 mov     ebx, [eax]
.text:00401154                 mov     ecx, dword_40B004
.text:0040115A                 mov     [esp+28h+lpTopLevelExceptionFilter], edx
.text:0040115D                 mov     [esp+28h+var_20], ebx
.text:00401161                 mov     [esp+28h+Mode], ecx
.text:00401165                 call    sub_4013E0
.text:00401165 sub_401080      endp
.text:00401165
.text:0040116A ; ---------------------------------------------------------------------------
.text:0040116A                 mov     ebx, eax
.text:0040116C                 call    _cexit
.text:00401171                 mov     [esp], ebx
.text:00401174                 call    ExitProcess
.text:00401174 ; ---------------------------------------------------------------------------
.text:00401179                 align 10h
.text:00401180
.text:00401180 ; =============== S U B R O U T I N E =======================================
.text:00401180
.text:00401180 ; Attributes: bp-based frame
.text:00401180
.text:00401180 ; LONG __stdcall TopLevelExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo)
.text:00401180 TopLevelExceptionFilter proc near       ; DATA XREF: sub_401080+7↑o
.text:00401180
.text:00401180 Signal          = dword ptr -18h
.text:00401180 Function        = dword ptr -14h
.text:00401180 var_8           = dword ptr -8
.text:00401180 var_4           = dword ptr -4
.text:00401180 ExceptionInfo   = dword ptr  8
.text:00401180
.text:00401180                 push    ebp
.text:00401181                 mov     ebp, esp
.text:00401183                 sub     esp, 18h
.text:00401186                 mov     [ebp+var_8], ebx
.text:00401189                 mov     ecx, [ebp+ExceptionInfo]
.text:0040118C                 xor     ebx, ebx
.text:0040118E                 mov     [ebp+var_4], esi
.text:00401191                 xor     esi, esi
.text:00401193                 mov     edx, [ecx]
.text:00401195                 mov     eax, [edx]
.text:00401197                 cmp     eax, 0C0000091h
.text:0040119C                 ja      loc_401260
.text:004011A2                 cmp     eax, 0C000008Dh
.text:004011A7                 jnb     short loc_401210
.text:004011A9                 cmp     eax, 0C0000005h
.text:004011AE                 jz      short loc_4011BE
.text:004011B0
.text:004011B0 loc_4011B0:                             ; CODE XREF: TopLevelExceptionFilter+59↓j
.text:004011B0                                         ; TopLevelExceptionFilter+77↓j ...
.text:004011B0                 mov     eax, ebx
.text:004011B2                 mov     esi, [ebp+var_4]
.text:004011B5                 mov     ebx, [ebp+var_8]
.text:004011B8                 mov     esp, ebp
.text:004011BA                 pop     ebp
.text:004011BB                 retn    4
.text:004011BE ; ---------------------------------------------------------------------------
.text:004011BE
.text:004011BE loc_4011BE:                             ; CODE XREF: TopLevelExceptionFilter+2E↑j
.text:004011BE                 mov     [esp+18h+Function], 0 ; Function
.text:004011C6                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:004011CD                 call    signal
.text:004011D2                 cmp     eax, 1
.text:004011D5                 jz      short loc_4011F9
.text:004011D7                 test    eax, eax
.text:004011D9                 jz      short loc_4011B0
.text:004011DB                 mov     [esp+18h+Signal], 0Bh
.text:004011E2                 lea     esi, [esi+0]
.text:004011E9                 lea     edi, [edi+0]
.text:004011F0
.text:004011F0 loc_4011F0:                             ; CODE XREF: TopLevelExceptionFilter+BD↓j
.text:004011F0                 call    eax
.text:004011F2
.text:004011F2 loc_4011F2:                             ; CODE XREF: TopLevelExceptionFilter+8D↓j
.text:004011F2                                         ; TopLevelExceptionFilter+D5↓j ...
.text:004011F2                 mov     ebx, 0FFFFFFFFh
.text:004011F7                 jmp     short loc_4011B0
.text:004011F9 ; ---------------------------------------------------------------------------
.text:004011F9
.text:004011F9 loc_4011F9:                             ; CODE XREF: TopLevelExceptionFilter+55↑j
.text:004011F9                 mov     [esp+18h+Function], 1 ; Function
.text:00401201                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:00401208                 call    signal
.text:0040120D                 jmp     short loc_4011F2
.text:0040120D ; ---------------------------------------------------------------------------
.text:0040120F                 align 10h
.text:00401210
.text:00401210 loc_401210:                             ; CODE XREF: TopLevelExceptionFilter+27↑j
.text:00401210                                         ; TopLevelExceptionFilter+E5↓j
.text:00401210                 mov     esi, 1
.text:00401215
.text:00401215 loc_401215:                             ; CODE XREF: TopLevelExceptionFilter+EC↓j
.text:00401215                 mov     [esp+18h+Function], 0 ; Function
.text:0040121D                 mov     [esp+18h+Signal], 8 ; Signal
.text:00401224                 call    signal
.text:00401229                 cmp     eax, 1
.text:0040122C                 jz      short loc_40123F
.text:0040122E                 test    eax, eax
.text:00401230                 jz      loc_4011B0
.text:00401236                 mov     [esp+18h+Signal], 8
.text:0040123D                 jmp     short loc_4011F0
.text:0040123F ; ---------------------------------------------------------------------------
.text:0040123F
.text:0040123F loc_40123F:                             ; CODE XREF: TopLevelExceptionFilter+AC↑j
.text:0040123F                 mov     [esp+18h+Function], 1 ; Function
.text:00401247                 mov     [esp+18h+Signal], 8 ; Signal
.text:0040124E                 call    signal
.text:00401253                 test    esi, esi
.text:00401255                 jz      short loc_4011F2
.text:00401257                 call    sub_4071A0
.text:0040125C                 jmp     short loc_4011F2
.text:0040125C ; ---------------------------------------------------------------------------
.text:0040125E                 align 10h
.text:00401260
.text:00401260 loc_401260:                             ; CODE XREF: TopLevelExceptionFilter+1C↑j
.text:00401260                 cmp     eax, 0C0000093h
.text:00401265                 jz      short loc_401210
.text:00401267                 cmp     eax, 0C0000094h
.text:0040126C                 jz      short loc_401215
.text:0040126E                 jmp     loc_4011B0
.text:0040126E TopLevelExceptionFilter endp
.text:0040126E
.text:0040126E ; ---------------------------------------------------------------------------
.text:00401273                 align 10h
.text:00401280 aWarningSCharac db 'warning: %s: character(s) following character constant have been '
.text:00401280                                         ; DATA XREF: .text:004012CC↓o
.text:00401280                                         ; sub_401CE0+518↓o ...
.text:00401280                 db 'ignored',0
.text:004012C9                 align 4
.text:004012CC                 dd offset aWarningSCharac ; "warning: %s: character(s) following cha"...
.text:004012D0 ; const char Locale
.text:004012D0 Locale          db 0                    ; DATA XREF: sub_4013E0+20↓o
.text:004012D0                                         ; sub_401CE0+2B7↓o
.text:004012D1                 db 0EBh, 0Dh, 90h
.text:004012D4                 align 10h
.text:004012E0 aCProgra1Coreut db 'c:/progra~1/CoreUtils/share/locale',0
.text:004012E0                                         ; DATA XREF: sub_4013E0+3A↓o
.text:00401303 aCoreutils      db 'coreutils',0        ; DATA XREF: sub_4013E0+42↓o
.text:00401303                                         ; sub_4013E0+4F↓o
.text:0040130D ; const char VarName[]
.text:0040130D VarName         db 'POSIXLY_CORRECT',0  ; DATA XREF: sub_4013E0+68↓o
.text:0040131D aDavidMackenzie db 'David MacKenzie',0  ; DATA XREF: sub_4013E0+90↓o
.text:0040132D a530            db '5.3.0',0            ; DATA XREF: sub_4013E0+A0↓o
.text:00401333 aGnuCoreutils   db 'GNU coreutils',0    ; DATA XREF: sub_4013E0+A8↓o
.text:00401341 ; const FILE stru_401341
.text:00401341 stru_401341     FILE <6E697270h, 2D006674h, 696D002Dh, 6E697373h, 706F2067h, \
.text:00401341                                         ; DATA XREF: sub_4013E0+B0↓o
.text:00401341                                         ; sub_4013E0+CD↓o ...
.text:00401341                       6E617265h, 8D900064h, 54002674h>
.text:00401361                 db  72h ; r
.text:00401362                 db  79h ; y
.text:00401363                 db  20h
.text:00401364                 db  60h ; `
.text:00401365                 db  25h ; %
.text:00401366                 db  73h ; s
.text:00401367                 db  20h
.text:00401368                 db  2Dh ; -
.text:00401369                 db  2Dh ; -
.text:0040136A                 db  68h ; h
.text:0040136B                 db  65h ; e
.text:0040136C                 db  6Ch ; l
.text:0040136D                 db  70h ; p
.text:0040136E                 db  27h ; '
.text:0040136F                 db  20h
.text:00401370                 db  66h ; f
.text:00401371                 db  6Fh ; o
.text:00401372                 db  72h ; r
.text:00401373                 db  20h
.text:00401374                 db  6Dh ; m
.text:00401375                 db  6Fh ; o
.text:00401376                 db  72h ; r
.text:00401377                 db  65h ; e
.text:00401378                 db  20h
.text:00401379                 db  69h ; i
.text:0040137A                 db  6Eh ; n
.text:0040137B                 db  66h ; f
.text:0040137C                 db  6Fh ; o
.text:0040137D                 db  72h ; r
.text:0040137E                 db  6Dh ; m
.text:0040137F                 db  61h ; a
.text:00401380                 db  74h ; t
.text:00401381                 db  69h ; i
.text:00401382                 db  6Fh ; o
.text:00401383                 db  6Eh ; n
.text:00401384                 db  2Eh ; .
.text:00401385                 db  0Ah
.text:00401386                 db    0
.text:00401387                 align 20h
.text:004013A0 aWarningIgnorin db 'warning: ignoring excess arguments, starting with `%s',27h,0
.text:004013A0                                         ; DATA XREF: sub_4013E0+18B↓o
.text:004013D7                 align 10h
.text:004013E0
.text:004013E0 ; =============== S U B R O U T I N E =======================================
.text:004013E0
.text:004013E0 ; Attributes: noreturn bp-based frame fuzzy-sp
.text:004013E0
.text:004013E0 sub_4013E0      proc near               ; CODE XREF: sub_401080+E5↑p
.text:004013E0
.text:004013E0 Category        = dword ptr -38h
.text:004013E0 Locale          = dword ptr -34h
.text:004013E0 var_30          = dword ptr -30h
.text:004013E0 var_2C          = byte ptr -2Ch
.text:004013E0 var_28          = dword ptr -28h
.text:004013E0 var_24          = dword ptr -24h
.text:004013E0 var_20          = byte ptr -20h
.text:004013E0 var_1C          = dword ptr -1Ch
.text:004013E0 arg_0           = dword ptr  8
.text:004013E0 arg_4           = dword ptr  0Ch
.text:004013E0
.text:004013E0                 push    ebp
.text:004013E1                 xor     eax, eax
.text:004013E3                 mov     ebp, esp
.text:004013E5                 push    edi
.text:004013E6                 push    esi
.text:004013E7                 push    ebx
.text:004013E8                 sub     esp, 2Ch
.text:004013EB                 and     esp, 0FFFFFFF0h
.text:004013EE                 call    __alloca
.text:004013F3                 mov     ebx, [ebp+arg_0]
.text:004013F6                 call    sub_407240
.text:004013FB                 mov     eax, [ebp+arg_4]
.text:004013FE                 mov     ecx, [eax]
.text:00401400                 mov     [esp+38h+Locale], offset Locale ; Locale
.text:00401408                 mov     [esp+38h+Category], 0 ; Category
.text:0040140F                 mov     ds:dword_40C200, ecx
.text:00401415                 call    setlocale
.text:0040141A                 mov     [esp+38h+Locale], offset aCProgra1Coreut ; "c:/progra~1/CoreUtils/share/locale"
.text:00401422                 mov     [esp+38h+Category], offset aCoreutils ; "coreutils"
.text:00401429                 call    ds:libintl_bindtextdomain
.text:0040142F                 mov     [esp+38h+Category], offset aCoreutils ; "coreutils"
.text:00401436                 call    ds:libintl_textdomain
.text:0040143C                 mov     [esp+38h+Category], offset sub_403370 ; void (__cdecl *)()
.text:00401443                 call    sub_401040
.text:00401448                 mov     [esp+38h+Category], offset VarName ; "POSIXLY_CORRECT"
.text:0040144F                 xor     edx, edx
.text:00401451                 mov     ds:dword_40C000, edx
.text:00401457                 call    getenv
.text:0040145C                 mov     [esp+38h+var_1C], 0
.text:00401464                 test    eax, eax
.text:00401466                 mov     eax, [ebp+arg_4]
.text:00401469                 setnz   ds:byte_40C010
.text:00401470                 mov     dword ptr [esp+38h+var_20], offset aDavidMackenzie ; "David MacKenzie"
.text:00401478                 mov     [esp+38h+var_24], offset sub_401A80 ; int
.text:00401480                 mov     [esp+38h+var_28], offset a530 ; "5.3.0"
.text:00401488                 mov     dword ptr [esp+38h+var_2C], offset aGnuCoreutils ; "GNU coreutils"
.text:00401490                 mov     [esp+38h+var_30], offset stru_401341 ; FILE *
.text:00401498                 mov     [esp+38h+Locale], eax ; int
.text:0040149C                 mov     [esp+38h+Category], ebx ; int
.text:0040149F                 call    sub_403280
.text:004014A4                 cmp     ebx, 1
.text:004014A7                 jle     short loc_4014CA
.text:004014A9                 cld
.text:004014AA                 mov     ecx, [ebp+arg_4]
.text:004014AD                 mov     edx, (offset stru_401341._cnt+3)
.text:004014B2                 mov     edi, edx
.text:004014B4                 mov     esi, [ecx+4]
.text:004014B7                 mov     ecx, 3
.text:004014BC                 repe cmpsb
.text:004014BE                 jnz     short loc_4014C5
.text:004014C0                 add     [ebp+arg_4], 4
.text:004014C4                 dec     ebx
.text:004014C5
.text:004014C5 loc_4014C5:                             ; CODE XREF: sub_4013E0+DE↑j
.text:004014C5                 cmp     ebx, 1
.text:004014C8                 jg      short loc_401527
.text:004014CA
.text:004014CA loc_4014CA:                             ; CODE XREF: sub_4013E0+C7↑j
.text:004014CA                 mov     [esp+38h+Category], (offset stru_401341._base+2)
.text:004014D1                 call    ds:libintl_gettext
.text:004014D7                 mov     [esp+38h+Locale], 0 ; ErrorMessage
.text:004014DF                 mov     [esp+38h+Category], 0 ; Code
.text:004014E6                 mov     [esp+38h+var_30], eax ; char *
.text:004014EA                 call    sub_406970
.text:004014EF                 mov     [esp+38h+Category], (offset stru_401341._tmpfname+3)
.text:004014F6                 call    ds:libintl_gettext
.text:004014FC                 mov     ebx, ds:_iob
.text:00401502                 mov     esi, ds:dword_40C200
.text:00401508                 add     ebx, 40h ; '@'
.text:0040150B                 mov     [esp+38h+var_30], esi
.text:0040150F                 mov     [esp+38h+Locale], eax ; Format
.text:00401513                 mov     [esp+38h+Category], ebx ; Stream
.text:00401516                 call    fprintf
.text:0040151B                 mov     [esp+38h+Category], 1 ; Code
.text:00401522
.text:00401522 loc_401522:                             ; CODE XREF: sub_4013E0+185↓j
.text:00401522                 call    exit
.text:00401527 ; ---------------------------------------------------------------------------
.text:00401527
.text:00401527 loc_401527:                             ; CODE XREF: sub_4013E0+E8↑j
.text:00401527                 mov     edi, [ebp+arg_4]
.text:0040152A                 sub     ebx, 2
.text:0040152D                 mov     esi, [edi+4]
.text:00401530                 add     edi, 8
.text:00401533                 mov     [ebp+arg_4], edi
.text:00401536
.text:00401536 loc_401536:                             ; CODE XREF: sub_4013E0+17A↓j
.text:00401536                 mov     [esp+38h+Locale], ebx
.text:0040153A                 mov     eax, [ebp+arg_4]
.text:0040153D                 mov     [esp+38h+Category], esi
.text:00401540                 mov     [esp+38h+var_30], eax
.text:00401544                 call    sub_401CE0
.text:00401549                 mov     edi, [ebp+arg_4]
.text:0040154C                 sub     ebx, eax
.text:0040154E                 test    eax, eax
.text:00401550                 lea     edx, [edi+eax*4]
.text:00401553                 mov     [ebp+arg_4], edx
.text:00401556                 jle     short loc_401567
.text:00401558                 test    ebx, ebx
.text:0040155A                 jg      short loc_401536
.text:0040155C
.text:0040155C loc_40155C:                             ; CODE XREF: sub_4013E0+189↓j
.text:0040155C                                         ; sub_4013E0+1B9↓j
.text:0040155C                 mov     esi, ds:dword_40C000
.text:00401562                 mov     [esp+38h+Category], esi
.text:00401565                 jmp     short loc_401522
.text:00401567 ; ---------------------------------------------------------------------------
.text:00401567
.text:00401567 loc_401567:                             ; CODE XREF: sub_4013E0+176↑j
.text:00401567                 test    ebx, ebx
.text:00401569                 jle     short loc_40155C
.text:0040156B                 mov     [esp+38h+Category], offset aWarningIgnorin ; "warning: ignoring excess arguments, sta"...
.text:00401572                 call    ds:libintl_gettext
.text:00401578                 mov     ebx, [ebp+arg_4]
.text:0040157B                 mov     ecx, [ebx]
.text:0040157D                 mov     [esp+38h+var_30], eax ; char *
.text:00401581                 mov     [esp+38h+Locale], 0 ; ErrorMessage
.text:00401589                 mov     dword ptr [esp+38h+var_2C], ecx ; char
.text:0040158D                 mov     [esp+38h+Category], 0 ; Code
.text:00401594                 call    sub_406970
.text:00401599                 jmp     short loc_40155C
.text:00401599 sub_4013E0      endp
.text:00401599
.text:00401599 ; ---------------------------------------------------------------------------
.text:0040159B                 align 10h
.text:004015A0 aUsageSFormatAr db 'Usage: %s FORMAT [ARGUMENT]...',0Ah
.text:004015A0                                         ; DATA XREF: sub_401A80:loc_401AC0↓o
.text:004015A0                 db '  or:  %s OPTION',0Ah,0
.text:004015D1                 db 0EBh, 0Dh, 90h
.text:004015D4                 align 10h
.text:004015E0 aPrintArgumentS db 'Print ARGUMENT(s) according to FORMAT.',0Ah
.text:004015E0                                         ; DATA XREF: sub_401A80+63↓o
.text:004015E0                 db 0Ah,0
.text:00401609                 align 20h
.text:00401620 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.text:00401620                                         ; DATA XREF: sub_401A80+85↓o
.text:0040164D                 align 20h
.text:00401660 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.text:00401660                                         ; DATA XREF: sub_401A80+A7↓o
.text:00401696                 align 10h
.text:004016A0 aFormatControls db 0Ah                  ; DATA XREF: sub_401A80+C9↓o
.text:004016A0                 db 'FORMAT controls the output as in C printf.  Interpreted sequences'
.text:004016A0                 db ' are:',0Ah
.text:004016A0                 db 0Ah
.text:004016A0                 db '  \"      double quote',0Ah
.text:004016A0                 db '  \NNN    character with octal value NNN (1 to 3 digits)',0Ah
.text:004016A0                 db '  \\      backslash',0Ah,0
.text:0040174E                 align 20h
.text:00401760 aAAlertBelBBack db '  \a      alert (BEL)',0Ah
.text:00401760                                         ; DATA XREF: sub_401A80+EB↓o
.text:00401760                 db '  \b      backspace',0Ah
.text:00401760                 db '  \c      produce no further output',0Ah
.text:00401760                 db '  \f      form feed',0Ah,0
.text:004017C3                 align 20h
.text:004017E0 aNNewLineRCarri db '  \n      new line',0Ah
.text:004017E0                                         ; DATA XREF: sub_401A80+10D↓o
.text:004017E0                 db '  \r      carriage return',0Ah
.text:004017E0                 db '  \t      horizontal tab',0Ah
.text:004017E0                 db '  \v      vertical tab',0Ah,0
.text:0040183E                 align 10h
.text:00401840 aXhhByteWithHex db '  \xHH    byte with hexadecimal value HH (1 to 2 digits)',0Ah
.text:00401840                                         ; DATA XREF: sub_401A80+12F↓o
.text:00401840                 db '  \uHHHH  Unicode (ISO/IEC 10646) character with hex value HHHH ('
.text:00401840                 db '4 digits)',0Ah
.text:00401840                 db '  \UHHHHHHHH  Unicode character with hex value HHHHHHHH (8 digits'
.text:00401840                 db ')',0Ah,0
.text:00401908                 align 20h
.text:00401920 aASingleBArgume db '  %%      a single %',0Ah
.text:00401920                                         ; DATA XREF: sub_401A80+151↓o
.text:00401920                 db '  %b      ARGUMENT as a string with `\',27h,' escapes interpreted'
.text:00401920                 db ',',0Ah
.text:00401920                 db '            except that octal escapes are of the form \0 or \0NNN'
.text:00401920                 db 0Ah
.text:00401920                 db 0Ah
.text:00401920                 db 'and all C format specifications ending with one of diouxXfeEgGcs,'
.text:00401920                 db ' with',0Ah
.text:00401920                 db 'ARGUMENTs converted to proper type first.  Variable widths are ha'
.text:00401920                 db 'ndled.',0Ah,0
.text:00401A45 aReportBugsToS  db 0Ah                  ; DATA XREF: sub_401A80+173↓o
.text:00401A45                 db 'Report bugs to <%s>.',0Ah,0
.text:00401A5C aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.text:00401A5C                                         ; DATA XREF: sub_401A80+180↓o
.text:00401A72                 align 10h
.text:00401A80
.text:00401A80 ; =============== S U B R O U T I N E =======================================
.text:00401A80
.text:00401A80 ; Attributes: noreturn
.text:00401A80
.text:00401A80 ; void __cdecl __noreturn sub_401A80(int Code)
.text:00401A80 sub_401A80      proc near               ; DATA XREF: sub_4013E0+98↑o
.text:00401A80
.text:00401A80 Stream          = dword ptr -1Ch
.text:00401A80 Format          = dword ptr -18h
.text:00401A80 var_14          = dword ptr -14h
.text:00401A80 Code            = dword ptr  4
.text:00401A80
.text:00401A80                 push    ebx
.text:00401A81                 sub     esp, 18h
.text:00401A84                 mov     ebx, [esp+1Ch+Code]
.text:00401A88                 test    ebx, ebx
.text:00401A8A                 jz      short loc_401AC0
.text:00401A8C                 mov     [esp+1Ch+Stream], (offset stru_401341._tmpfname+3)
.text:00401A93                 call    ds:libintl_gettext
.text:00401A99                 mov     edx, ds:_iob
.text:00401A9F                 mov     ecx, ds:dword_40C200
.text:00401AA5                 add     edx, 40h ; '@'
.text:00401AA8                 mov     [esp+1Ch+var_14], ecx
.text:00401AAC                 mov     [esp+1Ch+Format], eax ; Format
.text:00401AB0                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00401AB3                 call    fprintf
.text:00401AB8
.text:00401AB8 loc_401AB8:                             ; CODE XREF: sub_401A80+190↓j
.text:00401AB8                 mov     [esp+1Ch+Stream], ebx ; Code
.text:00401ABB                 call    exit
.text:00401AC0 ; ---------------------------------------------------------------------------
.text:00401AC0
.text:00401AC0 loc_401AC0:                             ; CODE XREF: sub_401A80+A↑j
.text:00401AC0                 mov     [esp+1Ch+Stream], offset aUsageSFormatAr ; "Usage: %s FORMAT [ARGUMENT]...\n  or:  "...
.text:00401AC7                 call    ds:libintl_gettext
.text:00401ACD                 mov     ecx, ds:dword_40C200
.text:00401AD3                 mov     [esp+1Ch+Stream], eax ; Format
.text:00401AD6                 mov     [esp+1Ch+var_14], ecx
.text:00401ADA                 mov     [esp+1Ch+Format], ecx
.text:00401ADE                 call    printf
.text:00401AE3                 mov     [esp+1Ch+Stream], offset aPrintArgumentS ; "Print ARGUMENT(s) according to FORMAT."...
.text:00401AEA                 call    ds:libintl_gettext
.text:00401AF0                 mov     ecx, ds:_iob
.text:00401AF6                 add     ecx, 20h ; ' '
.text:00401AF9                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00401AFD                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00401B00                 call    fputs
.text:00401B05                 mov     [esp+1Ch+Stream], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:00401B0C                 call    ds:libintl_gettext
.text:00401B12                 mov     ecx, ds:_iob
.text:00401B18                 add     ecx, 20h ; ' '
.text:00401B1B                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00401B1F                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00401B22                 call    fputs
.text:00401B27                 mov     [esp+1Ch+Stream], offset aVersionOutputV ; "      --version  output version informa"...
.text:00401B2E                 call    ds:libintl_gettext
.text:00401B34                 mov     ecx, ds:_iob
.text:00401B3A                 add     ecx, 20h ; ' '
.text:00401B3D                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00401B41                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00401B44                 call    fputs
.text:00401B49                 mov     [esp+1Ch+Stream], offset aFormatControls ; "\nFORMAT controls the output as in C pr"...
.text:00401B50                 call    ds:libintl_gettext
.text:00401B56                 mov     ecx, ds:_iob
.text:00401B5C                 add     ecx, 20h ; ' '
.text:00401B5F                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00401B63                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00401B66                 call    fputs
.text:00401B6B                 mov     [esp+1Ch+Stream], offset aAAlertBelBBack ; "  \\a      alert (BEL)\n  \\b      back"...
.text:00401B72                 call    ds:libintl_gettext
.text:00401B78                 mov     ecx, ds:_iob
.text:00401B7E                 add     ecx, 20h ; ' '
.text:00401B81                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00401B85                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00401B88                 call    fputs
.text:00401B8D                 mov     [esp+1Ch+Stream], offset aNNewLineRCarri ; "  \\n      new line\n  \\r      carriag"...
.text:00401B94                 call    ds:libintl_gettext
.text:00401B9A                 mov     ecx, ds:_iob
.text:00401BA0                 add     ecx, 20h ; ' '
.text:00401BA3                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00401BA7                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00401BAA                 call    fputs
.text:00401BAF                 mov     [esp+1Ch+Stream], offset aXhhByteWithHex ; "  \\xHH    byte with hexadecimal value "...
.text:00401BB6                 call    ds:libintl_gettext
.text:00401BBC                 mov     ecx, ds:_iob
.text:00401BC2                 add     ecx, 20h ; ' '
.text:00401BC5                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00401BC9                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00401BCC                 call    fputs
.text:00401BD1                 mov     [esp+1Ch+Stream], offset aASingleBArgume ; "  %%      a single %\n  %b      ARGUMEN"...
.text:00401BD8                 call    ds:libintl_gettext
.text:00401BDE                 mov     ecx, ds:_iob
.text:00401BE4                 add     ecx, 20h ; ' '
.text:00401BE7                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00401BEB                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00401BEE                 call    fputs
.text:00401BF3                 mov     [esp+1Ch+Stream], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:00401BFA                 call    ds:libintl_gettext
.text:00401C00                 mov     [esp+1Ch+Format], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:00401C08                 mov     [esp+1Ch+Stream], eax ; Format
.text:00401C0B                 call    printf
.text:00401C10                 jmp     loc_401AB8
.text:00401C10 sub_401A80      endp
.text:00401C10
.text:00401C10 ; ---------------------------------------------------------------------------
.text:00401C15                 align 10h
.text:00401C20 aSInvalidConver db '%.*s: invalid conversion specification',0
.text:00401C20                                         ; DATA XREF: sub_401CE0:loc_401FFD↓o
.text:00401C47                 align 20h
.text:00401C60 aSValueNotCompl db '%s: value not completely converted',0
.text:00401C60                                         ; DATA XREF: sub_401CE0+40B↓o
.text:00401C60                                         ; sub_401CE0+5DE↓o ...
.text:00401C83 aInvalidPrecisi db 'invalid precision: %s',0
.text:00401C83                                         ; DATA XREF: sub_401CE0:loc_40212B↓o
.text:00401C99 aSExpectedANume db '%s: expected a numeric value',0
.text:00401C99                                         ; DATA XREF: sub_401CE0:loc_40218F↓o
.text:00401C99                                         ; sub_401CE0:loc_40235D↓o ...
.text:00401CB6 aS              db '%s',0               ; DATA XREF: sub_401CE0+4D5↓o
.text:00401CB6                                         ; sub_401CE0+69C↓o ...
.text:00401CB9 aInvalidFieldWi db 'invalid field width: %s',0
.text:00401CB9                                         ; DATA XREF: sub_401CE0:loc_402328↓o
.text:00401CD1 ; ---------------------------------------------------------------------------
.text:00401CD1                 jmp     short sub_401CE0
.text:00401CD1 ; ---------------------------------------------------------------------------
.text:00401CD3                 align 10h
.text:00401CE0
.text:00401CE0 ; =============== S U B R O U T I N E =======================================
.text:00401CE0
.text:00401CE0
.text:00401CE0 sub_401CE0      proc near               ; CODE XREF: sub_4013E0+164↑p
.text:00401CE0                                         ; .text:00401CD1↑j
.text:00401CE0
.text:00401CE0 Code            = dword ptr -16Ch
.text:00401CE0 File            = dword ptr -168h
.text:00401CE0 var_164         = dword ptr -164h
.text:00401CE0 var_160         = byte ptr -160h
.text:00401CE0 var_15C         = dword ptr -15Ch
.text:00401CE0 var_158         = byte ptr -158h
.text:00401CE0 var_154         = dword ptr -154h
.text:00401CE0 var_150         = dword ptr -150h
.text:00401CE0 var_14C         = dword ptr -14Ch
.text:00401CE0 String          = dword ptr -148h
.text:00401CE0 var_144         = dword ptr -144h
.text:00401CE0 var_140         = dword ptr -140h
.text:00401CE0 var_13C         = dword ptr -13Ch
.text:00401CE0 var_135         = byte ptr -135h
.text:00401CE0 var_134         = dword ptr -134h
.text:00401CE0 var_12D         = byte ptr -12Dh
.text:00401CE0 var_12C         = dword ptr -12Ch
.text:00401CE0 var_128         = dword ptr -128h
.text:00401CE0 EndPtr          = dword ptr -124h
.text:00401CE0 var_120         = dword ptr -120h
.text:00401CE0 var_11C         = byte ptr -11Ch
.text:00401CE0 var_DB          = byte ptr -0DBh
.text:00401CE0 var_D7          = byte ptr -0D7h
.text:00401CE0 var_D6          = byte ptr -0D6h
.text:00401CE0 var_D5          = byte ptr -0D5h
.text:00401CE0 var_C4          = byte ptr -0C4h
.text:00401CE0 var_BB          = byte ptr -0BBh
.text:00401CE0 var_B9          = byte ptr -0B9h
.text:00401CE0 var_B8          = byte ptr -0B8h
.text:00401CE0 var_B7          = byte ptr -0B7h
.text:00401CE0 var_B6          = byte ptr -0B6h
.text:00401CE0 var_B5          = byte ptr -0B5h
.text:00401CE0 var_B3          = byte ptr -0B3h
.text:00401CE0 var_AD          = byte ptr -0ADh
.text:00401CE0 var_A9          = byte ptr -0A9h
.text:00401CE0 var_A7          = byte ptr -0A7h
.text:00401CE0 var_A4          = byte ptr -0A4h
.text:00401CE0 arg_0           = dword ptr  4
.text:00401CE0 arg_4           = dword ptr  8
.text:00401CE0 arg_8           = dword ptr  0Ch
.text:00401CE0
.text:00401CE0                 push    ebp
.text:00401CE1                 push    edi
.text:00401CE2                 push    esi
.text:00401CE3                 push    ebx
.text:00401CE4                 sub     esp, 15Ch
.text:00401CEA                 mov     edx, [esp+16Ch+arg_4]
.text:00401CF1                 mov     [esp+16Ch+var_134], 0
.text:00401CF9                 mov     ebx, [esp+16Ch+arg_0]
.text:00401D00                 mov     [esp+16Ch+var_13C], 0
.text:00401D08                 mov     [esp+16Ch+var_128], edx
.text:00401D0C                 movzx   edx, byte ptr [ebx]
.text:00401D0F                 test    dl, dl
.text:00401D11                 jz      short loc_401D58
.text:00401D13                 lea     esi, [esi+0]
.text:00401D19                 lea     edi, [edi+0]
.text:00401D20
.text:00401D20 loc_401D20:                             ; CODE XREF: sub_401CE0+76↓j
.text:00401D20                 movsx   eax, dl
.text:00401D23                 cmp     eax, 25h ; '%'
.text:00401D26                 jz      short loc_401DA0
.text:00401D28                 cmp     eax, 5Ch ; '\'
.text:00401D2B                 jz      short loc_401D8C
.text:00401D2D                 mov     edx, ds:_iob
.text:00401D33                 mov     esi, [edx+24h]
.text:00401D36                 dec     esi
.text:00401D37                 mov     [edx+24h], esi
.text:00401D3A                 test    esi, esi
.text:00401D3C                 js      short loc_401D72
.text:00401D3E                 movzx   ecx, byte ptr [ebx]
.text:00401D41                 mov     eax, ds:_iob
.text:00401D46                 mov     edi, [eax+20h]
.text:00401D49                 mov     [edi], cl
.text:00401D4B
.text:00401D4B loc_401D4B:                             ; CODE XREF: sub_401CE0+7D9↓j
.text:00401D4B                 inc     dword ptr [eax+20h]
.text:00401D4E
.text:00401D4E loc_401D4E:                             ; CODE XREF: sub_401CE0+AA↓j
.text:00401D4E                                         ; sub_401CE0+BE↓j ...
.text:00401D4E                 inc     ebx
.text:00401D4F                 movzx   ecx, byte ptr [ebx]
.text:00401D52                 test    cl, cl
.text:00401D54                 mov     dl, cl
.text:00401D56                 jnz     short loc_401D20
.text:00401D58
.text:00401D58 loc_401D58:                             ; CODE XREF: sub_401CE0+31↑j
.text:00401D58                 mov     ebx, [esp+16Ch+arg_4]
.text:00401D5F                 sub     [esp+16Ch+var_128], ebx
.text:00401D63                 mov     eax, [esp+16Ch+var_128]
.text:00401D67                 add     esp, 15Ch
.text:00401D6D                 pop     ebx
.text:00401D6E                 pop     esi
.text:00401D6F                 pop     edi
.text:00401D70                 pop     ebp
.text:00401D71                 retn
.text:00401D72 ; ---------------------------------------------------------------------------
.text:00401D72
.text:00401D72 loc_401D72:                             ; CODE XREF: sub_401CE0+5C↑j
.text:00401D72                 mov     esi, ds:_iob
.text:00401D78                 add     esi, 20h ; ' '
.text:00401D7B                 mov     [esp+16Ch+File], esi ; File
.text:00401D7F                 movsx   ebp, byte ptr [ebx]
.text:00401D82                 mov     [esp+16Ch+Code], ebp ; Ch
.text:00401D85
.text:00401D85 loc_401D85:                             ; CODE XREF: sub_401CE0+7F2↓j
.text:00401D85                 call    _flsbuf
.text:00401D8A                 jmp     short loc_401D4E
.text:00401D8C ; ---------------------------------------------------------------------------
.text:00401D8C
.text:00401D8C loc_401D8C:                             ; CODE XREF: sub_401CE0+4B↑j
.text:00401D8C                 mov     [esp+16Ch+Code], ebx
.text:00401D8F                 mov     [esp+16Ch+File], 0
.text:00401D97                 call    sub_402550
.text:00401D9C                 add     ebx, eax
.text:00401D9E                 jmp     short loc_401D4E
.text:00401DA0 ; ---------------------------------------------------------------------------
.text:00401DA0
.text:00401DA0 loc_401DA0:                             ; CODE XREF: sub_401CE0+46↑j
.text:00401DA0                 mov     [esp+16Ch+var_12C], ebx
.text:00401DA4                 mov     esi, 1
.text:00401DA9                 inc     ebx
.text:00401DAA                 mov     [esp+16Ch+var_135], 0
.text:00401DAF                 mov     [esp+16Ch+var_12D], 0
.text:00401DB4                 movzx   eax, byte ptr [ebx]
.text:00401DB7                 cmp     al, 25h ; '%'
.text:00401DB9                 jz      loc_40249D
.text:00401DBF                 cmp     al, 62h ; 'b'
.text:00401DC1                 jz      loc_40240D
.text:00401DC7                 cld
.text:00401DC8                 mov     ecx, 40h ; '@'
.text:00401DCD                 lea     edi, [esp+16Ch+var_11C]
.text:00401DD1                 xor     eax, eax
.text:00401DD3                 rep stosd
.text:00401DD5                 mov     [esp+16Ch+var_C4], 1
.text:00401DDD                 mov     [esp+16Ch+var_A4], 1
.text:00401DE5                 mov     [esp+16Ch+var_A7], 1
.text:00401DED                 mov     [esp+16Ch+var_A9], 1
.text:00401DF5                 mov     [esp+16Ch+var_AD], 1
.text:00401DFD                 mov     [esp+16Ch+var_B3], 1
.text:00401E05                 mov     [esp+16Ch+var_D5], 1
.text:00401E0D                 mov     [esp+16Ch+var_B5], 1
.text:00401E15                 mov     [esp+16Ch+var_D6], 1
.text:00401E1D                 mov     [esp+16Ch+var_B6], 1
.text:00401E25                 mov     [esp+16Ch+var_D7], 1
.text:00401E2D                 mov     [esp+16Ch+var_B7], 1
.text:00401E35                 mov     [esp+16Ch+var_B8], 1
.text:00401E3D                 mov     [esp+16Ch+var_B9], 1
.text:00401E45                 mov     [esp+16Ch+var_DB], 1
.text:00401E4D                 mov     [esp+16Ch+var_BB], 1
.text:00401E55
.text:00401E55 loc_401E55:                             ; CODE XREF: sub_401CE0+21E↓j
.text:00401E55                 movzx   edx, byte ptr [ebx]
.text:00401E58                 movsx   eax, dl
.text:00401E5B                 mov     cl, dl
.text:00401E5D                 sub     eax, 20h ; ' '  ; switch 17 cases
.text:00401E60                 cmp     eax, 10h
.text:00401E63                 ja      def_401E69      ; jumptable 00401E69 default case, cases 33,34,36-38,40-42,44,46,47
.text:00401E69                 jmp     ds:jpt_401E69[eax*4] ; switch jump
.text:00401E69 ; ---------------------------------------------------------------------------
.text:00401E70 jpt_401E69      dd offset loc_401EFC    ; DATA XREF: sub_401CE0+189↑r
.text:00401E70                 dd offset def_401E69    ; jump table for switch statement
.text:00401E70                 dd offset def_401E69
.text:00401E70                 dd offset loc_401F03
.text:00401E70                 dd offset def_401E69
.text:00401E70                 dd offset def_401E69
.text:00401E70                 dd offset def_401E69
.text:00401E70                 dd offset loc_401EB4
.text:00401E70                 dd offset def_401E69
.text:00401E70                 dd offset def_401E69
.text:00401E70                 dd offset def_401E69
.text:00401E70                 dd offset loc_401EFC
.text:00401E70                 dd offset def_401E69
.text:00401E70                 dd offset loc_401EFC
.text:00401E70                 dd offset def_401E69
.text:00401E70                 dd offset def_401E69
.text:00401E70                 dd offset loc_402400
.text:00401EB4 ; ---------------------------------------------------------------------------
.text:00401EB4
.text:00401EB4 loc_401EB4:                             ; CODE XREF: sub_401CE0+189↑j
.text:00401EB4                                         ; DATA XREF: sub_401CE0:jpt_401E69↑o
.text:00401EB4                 mov     [esp+16Ch+var_C4], 0 ; jumptable 00401E69 case 39
.text:00401EBC                 mov     [esp+16Ch+var_A4], 0
.text:00401EC4                 mov     [esp+16Ch+var_A9], 0
.text:00401ECC                 mov     [esp+16Ch+var_AD], 0
.text:00401ED4                 mov     [esp+16Ch+var_D7], 0
.text:00401EDC                 mov     [esp+16Ch+var_B7], 0
.text:00401EE4                 mov     [esp+16Ch+var_B9], 0
.text:00401EEC                 mov     [esp+16Ch+var_DB], 0
.text:00401EF4                 mov     [esp+16Ch+var_BB], 0
.text:00401EFC
.text:00401EFC loc_401EFC:                             ; CODE XREF: sub_401CE0+189↑j
.text:00401EFC                                         ; sub_401CE0+24B↓j
.text:00401EFC                                         ; DATA XREF: ...
.text:00401EFC                 inc     ebx             ; jumptable 00401E69 cases 32,43,45
.text:00401EFD                 inc     esi
.text:00401EFE                 jmp     loc_401E55
.text:00401F03 ; ---------------------------------------------------------------------------
.text:00401F03
.text:00401F03 loc_401F03:                             ; CODE XREF: sub_401CE0+189↑j
.text:00401F03                                         ; DATA XREF: sub_401CE0:jpt_401E69↑o
.text:00401F03                 mov     [esp+16Ch+var_A7], 0 ; jumptable 00401E69 case 35
.text:00401F0B                 mov     [esp+16Ch+var_A9], 0
.text:00401F13                 mov     [esp+16Ch+var_B3], 0
.text:00401F1B                 mov     [esp+16Ch+var_B8], 0
.text:00401F23
.text:00401F23 loc_401F23:                             ; CODE XREF: sub_401CE0+728↓j
.text:00401F23                 mov     [esp+16Ch+var_B9], 0
.text:00401F2B                 jmp     short loc_401EFC ; jumptable 00401E69 cases 32,43,45
.text:00401F2D ; ---------------------------------------------------------------------------
.text:00401F2D
.text:00401F2D def_401E69:                             ; CODE XREF: sub_401CE0+183↑j
.text:00401F2D                                         ; sub_401CE0+189↑j
.text:00401F2D                                         ; DATA XREF: ...
.text:00401F2D                 cmp     cl, 2Ah ; '*'   ; jumptable 00401E69 default case, cases 33,34,36-38,40-42,44,46,47
.text:00401F30                 jz      loc_402237
.text:00401F36                 lea     esi, [esi+0]
.text:00401F39                 lea     edi, [edi+0]
.text:00401F40
.text:00401F40 loc_401F40:                             ; CODE XREF: sub_401CE0+270↓j
.text:00401F40                 movsx   ecx, dl
.text:00401F43                 sub     ecx, 30h ; '0'
.text:00401F46                 cmp     ecx, 9
.text:00401F49                 ja      short loc_401F52
.text:00401F4B                 inc     ebx
.text:00401F4C                 inc     esi
.text:00401F4D                 movzx   edx, byte ptr [ebx]
.text:00401F50                 jmp     short loc_401F40
.text:00401F52 ; ---------------------------------------------------------------------------
.text:00401F52
.text:00401F52 loc_401F52:                             ; CODE XREF: sub_401CE0+269↑j
.text:00401F52                                         ; sub_401CE0+643↓j
.text:00401F52                 cmp     dl, 2Eh ; '.'
.text:00401F55                 jz      loc_40203C
.text:00401F5B                 nop
.text:00401F5C                 lea     esi, [esi+0]
.text:00401F60
.text:00401F60 loc_401F60:                             ; CODE XREF: sub_401CE0+2A4↓j
.text:00401F60                                         ; sub_401CE0+377↓j
.text:00401F60                 cmp     dl, 6Ch ; 'l'
.text:00401F63                 jz      short loc_401F80
.text:00401F65                 cmp     dl, 4Ch ; 'L'
.text:00401F68                 jz      short loc_401F80
.text:00401F6A                 cmp     dl, 68h ; 'h'
.text:00401F6D                 jz      short loc_401F80
.text:00401F6F                 cmp     dl, 6Ah ; 'j'
.text:00401F72                 jz      short loc_401F80
.text:00401F74                 cmp     dl, 74h ; 't'
.text:00401F77                 jz      short loc_401F80
.text:00401F79                 cmp     dl, 7Ah ; 'z'
.text:00401F7C                 jnz     short loc_401F86
.text:00401F7E                 mov     esi, esi
.text:00401F80
.text:00401F80 loc_401F80:                             ; CODE XREF: sub_401CE0+283↑j
.text:00401F80                                         ; sub_401CE0+288↑j ...
.text:00401F80                 inc     ebx
.text:00401F81
.text:00401F81 loc_401F81:                             ; CODE XREF: sub_401CE0+492↓j
.text:00401F81                 movzx   edx, byte ptr [ebx]
.text:00401F84                 jmp     short loc_401F60
.text:00401F86 ; ---------------------------------------------------------------------------
.text:00401F86
.text:00401F86 loc_401F86:                             ; CODE XREF: sub_401CE0+29C↑j
.text:00401F86                 movzx   edi, dl
.text:00401F89                 cmp     [esp+edi+16Ch+var_11C], 0
.text:00401F8E                 jz      short loc_401FFD
.text:00401F90
.text:00401F90 loc_401F90:                             ; CODE XREF: sub_401CE0+357↓j
.text:00401F90                 mov     edi, [esp+16Ch+arg_4]
.text:00401F97                 mov     eax, offset Locale
.text:00401F9C                 test    edi, edi
.text:00401F9E                 jle     short loc_401FBB
.text:00401FA0                 dec     [esp+16Ch+arg_4]
.text:00401FA7                 mov     ebp, [esp+16Ch+arg_8]
.text:00401FAE                 mov     eax, [ebp+0]
.text:00401FB1                 add     ebp, 4
.text:00401FB4                 mov     [esp+16Ch+arg_8], ebp
.text:00401FBB
.text:00401FBB loc_401FBB:                             ; CODE XREF: sub_401CE0+2BE↑j
.text:00401FBB                 movzx   edi, [esp+16Ch+var_135]
.text:00401FC0                 mov     [esp+16Ch+var_150], eax ; char *
.text:00401FC4                 mov     ebp, [esp+16Ch+var_13C]
.text:00401FC8                 mov     eax, [esp+16Ch+var_134]
.text:00401FCC                 movzx   ecx, [esp+16Ch+var_12D]
.text:00401FD1                 mov     [esp+16Ch+var_154], ebp ; int
.text:00401FD5                 mov     dword ptr [esp+16Ch+var_158], edi ; char
.text:00401FD9                 mov     [esp+16Ch+var_15C], eax ; int
.text:00401FDD                 mov     dword ptr [esp+16Ch+var_160], ecx ; char
.text:00401FE1                 movsx   edx, byte ptr [ebx]
.text:00401FE4                 mov     [esp+16Ch+File], esi ; int
.text:00401FE8                 mov     esi, [esp+16Ch+var_12C]
.text:00401FEC                 mov     [esp+16Ch+var_164], edx ; char
.text:00401FF0                 mov     [esp+16Ch+Code], esi ; int
.text:00401FF3                 call    sub_402900
.text:00401FF8                 jmp     loc_401D4E
.text:00401FFD ; ---------------------------------------------------------------------------
.text:00401FFD
.text:00401FFD loc_401FFD:                             ; CODE XREF: sub_401CE0+2AE↑j
.text:00401FFD                 mov     [esp+16Ch+Code], offset aSInvalidConver ; "%.*s: invalid conversion specification"
.text:00402004                 mov     ebp, ebx
.text:00402006                 call    ds:libintl_gettext
.text:0040200C                 mov     [esp+16Ch+File], 0 ; ErrorMessage
.text:00402014                 mov     edx, [esp+16Ch+var_12C]
.text:00402018                 mov     ecx, [esp+16Ch+var_12C]
.text:0040201C                 mov     [esp+16Ch+Code], 1 ; Code
.text:00402023                 sub     ebp, edx
.text:00402025                 inc     ebp
.text:00402026                 mov     [esp+16Ch+var_15C], ecx
.text:0040202A                 mov     dword ptr [esp+16Ch+var_160], ebp ; char
.text:0040202E                 mov     [esp+16Ch+var_164], eax ; char *
.text:00402032                 call    sub_406970
.text:00402037                 jmp     loc_401F90
.text:0040203C ; ---------------------------------------------------------------------------
.text:0040203C
.text:0040203C loc_40203C:                             ; CODE XREF: sub_401CE0+275↑j
.text:0040203C                 mov     [esp+16Ch+var_B9], 0
.text:00402044                 inc     ebx
.text:00402045                 inc     esi
.text:00402046                 movzx   edx, byte ptr [ebx]
.text:00402049                 cmp     dl, 2Ah ; '*'
.text:0040204C                 jz      short loc_402064
.text:0040204E
.text:0040204E loc_40204E:                             ; CODE XREF: sub_401CE0+382↓j
.text:0040204E                 movsx   ecx, dl
.text:00402051                 sub     ecx, 30h ; '0'
.text:00402054                 cmp     ecx, 9
.text:00402057                 ja      loc_401F60
.text:0040205D                 inc     ebx
.text:0040205E                 inc     esi
.text:0040205F                 movzx   edx, byte ptr [ebx]
.text:00402062                 jmp     short loc_40204E
.text:00402064 ; ---------------------------------------------------------------------------
.text:00402064
.text:00402064 loc_402064:                             ; CODE XREF: sub_401CE0+36C↑j
.text:00402064                 mov     edx, [esp+16Ch+arg_4]
.text:0040206B                 inc     ebx
.text:0040206C                 inc     esi
.text:0040206D                 test    edx, edx
.text:0040206F                 jle     loc_40222A
.text:00402075                 mov     ecx, [esp+16Ch+arg_8]
.text:0040207C                 mov     ebp, [ecx]
.text:0040207E                 mov     [esp+16Ch+String], ebp
.text:00402082                 movzx   eax, byte ptr [ebp+0]
.text:00402086                 cmp     al, 22h ; '"'
.text:00402088                 jz      loc_4021D0
.text:0040208E                 cmp     al, 27h ; '''
.text:00402090                 jz      loc_4021D0
.text:00402096                 call    _errno
.text:0040209B                 mov     dword ptr [eax], 0
.text:004020A1                 mov     edi, [esp+16Ch+String]
.text:004020A5                 lea     ebp, [esp+16Ch+EndPtr]
.text:004020A9                 mov     [esp+16Ch+File], ebp ; EndPtr
.text:004020AD                 mov     [esp+16Ch+var_164], 0 ; Radix
.text:004020B5                 mov     [esp+16Ch+Code], edi ; String
.text:004020B8                 call    _strtoll
.text:004020BD                 mov     ecx, [esp+16Ch+EndPtr]
.text:004020C1                 mov     ebp, edx
.text:004020C3                 mov     edi, eax
.text:004020C5                 mov     [esp+16Ch+var_14C], ecx
.text:004020C9                 call    _errno
.text:004020CE                 mov     edx, [eax]
.text:004020D0                 test    edx, edx
.text:004020D2                 jnz     loc_4021B0
.text:004020D8                 mov     ecx, [esp+16Ch+var_14C]
.text:004020DC                 cmp     byte ptr [ecx], 0
.text:004020DF                 jz      short loc_402123
.text:004020E1                 cmp     [esp+16Ch+String], ecx
.text:004020E5                 jz      loc_40218F
.text:004020EB                 mov     [esp+16Ch+Code], offset aSValueNotCompl ; "%s: value not completely converted"
.text:004020F2                 call    ds:libintl_gettext
.text:004020F8                 mov     edx, [esp+16Ch+String]
.text:004020FC                 mov     dword ptr [esp+16Ch+var_160], edx ; char
.text:00402100
.text:00402100 loc_402100:                             ; CODE XREF: sub_401CE0+4C4↓j
.text:00402100                 mov     [esp+16Ch+var_164], eax ; char *
.text:00402104                 mov     [esp+16Ch+File], 0 ; ErrorMessage
.text:0040210C
.text:0040210C loc_40210C:                             ; CODE XREF: sub_401CE0+4EB↓j
.text:0040210C                 mov     [esp+16Ch+Code], 0 ; Code
.text:00402113                 call    sub_406970
.text:00402118                 mov     ecx, 1
.text:0040211D                 mov     ds:dword_40C000, ecx
.text:00402123
.text:00402123 loc_402123:                             ; CODE XREF: sub_401CE0+3FF↑j
.text:00402123                                         ; sub_401CE0+505↓j ...
.text:00402123                 test    ebp, ebp
.text:00402125                 js      short loc_402185
.text:00402127                 test    ebp, ebp
.text:00402129                 jle     short loc_402177
.text:0040212B
.text:0040212B loc_40212B:                             ; CODE XREF: sub_401CE0+49D↓j
.text:0040212B                 mov     [esp+16Ch+Code], offset aInvalidPrecisi ; "invalid precision: %s"
.text:00402132                 call    ds:libintl_gettext
.text:00402138                 mov     ebp, [esp+16Ch+arg_8]
.text:0040213F                 mov     edi, [ebp+0]
.text:00402142                 mov     [esp+16Ch+var_164], eax ; char *
.text:00402146                 mov     [esp+16Ch+File], 0 ; ErrorMessage
.text:0040214E                 mov     dword ptr [esp+16Ch+var_160], edi ; char
.text:00402152                 mov     [esp+16Ch+Code], 1 ; Code
.text:00402159                 call    sub_406970
.text:0040215E
.text:0040215E loc_40215E:                             ; CODE XREF: sub_401CE0+4A3↓j
.text:0040215E                                         ; sub_401CE0+4AD↓j
.text:0040215E                 add     [esp+16Ch+arg_8], 4
.text:00402166                 dec     [esp+16Ch+arg_4]
.text:0040216D
.text:0040216D loc_40216D:                             ; CODE XREF: sub_401CE0+552↓j
.text:0040216D                 mov     [esp+16Ch+var_135], 1
.text:00402172                 jmp     loc_401F81
.text:00402177 ; ---------------------------------------------------------------------------
.text:00402177
.text:00402177 loc_402177:                             ; CODE XREF: sub_401CE0+449↑j
.text:00402177                 cmp     edi, 7FFFFFFFh
.text:0040217D                 ja      short loc_40212B
.text:0040217F                 mov     [esp+16Ch+var_13C], edi
.text:00402183                 jmp     short loc_40215E
.text:00402185 ; ---------------------------------------------------------------------------
.text:00402185
.text:00402185 loc_402185:                             ; CODE XREF: sub_401CE0+445↑j
.text:00402185                 mov     [esp+16Ch+var_13C], 0FFFFFFFFh
.text:0040218D                 jmp     short loc_40215E
.text:0040218F ; ---------------------------------------------------------------------------
.text:0040218F
.text:0040218F loc_40218F:                             ; CODE XREF: sub_401CE0+405↑j
.text:0040218F                 mov     [esp+16Ch+Code], offset aSExpectedANume ; "%s: expected a numeric value"
.text:00402196                 call    ds:libintl_gettext
.text:0040219C                 mov     ecx, [esp+16Ch+String]
.text:004021A0                 mov     dword ptr [esp+16Ch+var_160], ecx
.text:004021A4                 jmp     loc_402100
.text:004021A4 ; ---------------------------------------------------------------------------
.text:004021A9                 align 10h
.text:004021B0
.text:004021B0 loc_4021B0:                             ; CODE XREF: sub_401CE0+3F2↑j
.text:004021B0                 call    _errno
.text:004021B5                 mov     [esp+16Ch+var_164], offset aS ; "%s"
.text:004021BD                 mov     ecx, [esp+16Ch+String]
.text:004021C1                 mov     dword ptr [esp+16Ch+var_160], ecx
.text:004021C5                 mov     edx, [eax]
.text:004021C7                 mov     [esp+16Ch+File], edx
.text:004021CB                 jmp     loc_40210C
.text:004021D0 ; ---------------------------------------------------------------------------
.text:004021D0
.text:004021D0 loc_4021D0:                             ; CODE XREF: sub_401CE0+3A8↑j
.text:004021D0                                         ; sub_401CE0+3B0↑j
.text:004021D0                 inc     [esp+16Ch+String]
.text:004021D4                 xor     ebp, ebp
.text:004021D6                 mov     eax, [esp+16Ch+String]
.text:004021DA                 movzx   edi, byte ptr [eax]
.text:004021DD                 inc     eax
.text:004021DE                 mov     [esp+16Ch+String], eax
.text:004021E2                 cmp     byte ptr [eax], 0
.text:004021E5                 jz      loc_402123
.text:004021EB                 cmp     ds:byte_40C010, 0
.text:004021F2                 jnz     loc_402123
.text:004021F8                 mov     [esp+16Ch+Code], offset aWarningSCharac ; "warning: %s: character(s) following cha"...
.text:004021FF                 call    ds:libintl_gettext
.text:00402205                 mov     [esp+16Ch+File], 0 ; ErrorMessage
.text:0040220D                 mov     ecx, [esp+16Ch+String]
.text:00402211                 mov     [esp+16Ch+Code], 0 ; Code
.text:00402218                 mov     dword ptr [esp+16Ch+var_160], ecx ; char
.text:0040221C                 mov     [esp+16Ch+var_164], eax ; char *
.text:00402220                 call    sub_406970
.text:00402225                 jmp     loc_402123
.text:0040222A ; ---------------------------------------------------------------------------
.text:0040222A
.text:0040222A loc_40222A:                             ; CODE XREF: sub_401CE0+38F↑j
.text:0040222A                 mov     [esp+16Ch+var_13C], 0
.text:00402232                 jmp     loc_40216D
.text:00402237 ; ---------------------------------------------------------------------------
.text:00402237
.text:00402237 loc_402237:                             ; CODE XREF: sub_401CE0+250↑j
.text:00402237                 mov     edi, [esp+16Ch+arg_4]
.text:0040223E                 inc     ebx
.text:0040223F                 inc     esi
.text:00402240                 test    edi, edi
.text:00402242                 jle     loc_4023F1
.text:00402248                 mov     eax, [esp+16Ch+arg_8]
.text:0040224F                 mov     ebp, [eax]
.text:00402251                 mov     [esp+16Ch+var_140], ebp
.text:00402255                 movzx   eax, byte ptr [ebp+0]
.text:00402259                 cmp     al, 22h ; '"'
.text:0040225B                 jz      loc_402397
.text:00402261                 cmp     al, 27h ; '''
.text:00402263                 jz      loc_402397
.text:00402269                 call    _errno
.text:0040226E                 mov     dword ptr [eax], 0
.text:00402274                 mov     edi, [esp+16Ch+var_140]
.text:00402278                 lea     ebp, [esp+16Ch+var_120]
.text:0040227C                 mov     [esp+16Ch+File], ebp ; EndPtr
.text:00402280                 mov     [esp+16Ch+var_164], 0 ; Radix
.text:00402288                 mov     [esp+16Ch+Code], edi ; String
.text:0040228B                 call    _strtoll
.text:00402290                 mov     ecx, [esp+16Ch+var_120]
.text:00402294                 mov     ebp, edx
.text:00402296                 mov     edi, eax
.text:00402298                 mov     [esp+16Ch+var_144], ecx
.text:0040229C                 call    _errno
.text:004022A1                 mov     edx, [eax]
.text:004022A3                 test    edx, edx
.text:004022A5                 jnz     loc_402377
.text:004022AB                 mov     ecx, [esp+16Ch+var_144]
.text:004022AF                 cmp     byte ptr [ecx], 0
.text:004022B2                 jz      short loc_4022F6
.text:004022B4                 cmp     [esp+16Ch+var_140], ecx
.text:004022B8                 jz      loc_40235D
.text:004022BE                 mov     [esp+16Ch+Code], offset aSValueNotCompl ; "%s: value not completely converted"
.text:004022C5                 call    ds:libintl_gettext
.text:004022CB                 mov     edx, [esp+16Ch+var_140]
.text:004022CF                 mov     dword ptr [esp+16Ch+var_160], edx ; char
.text:004022D3
.text:004022D3 loc_4022D3:                             ; CODE XREF: sub_401CE0+692↓j
.text:004022D3                 mov     [esp+16Ch+var_164], eax ; char *
.text:004022D7                 mov     [esp+16Ch+File], 0 ; ErrorMessage
.text:004022DF
.text:004022DF loc_4022DF:                             ; CODE XREF: sub_401CE0+6B2↓j
.text:004022DF                 mov     [esp+16Ch+Code], 0 ; Code
.text:004022E6                 call    sub_406970
.text:004022EB                 mov     ecx, 1
.text:004022F0                 mov     ds:dword_40C000, ecx
.text:004022F6
.text:004022F6 loc_4022F6:                             ; CODE XREF: sub_401CE0+5D2↑j
.text:004022F6                                         ; sub_401CE0+6CC↓j ...
.text:004022F6                 mov     edx, edi
.text:004022F8                 mov     ecx, ebp
.text:004022FA                 add     edx, 80000000h
.text:00402300                 adc     ecx, 0
.text:00402303                 cmp     ecx, 0
.text:00402306                 ja      short loc_402328
.text:00402308                 mov     [esp+16Ch+var_134], edi
.text:0040230C
.text:0040230C loc_40230C:                             ; CODE XREF: sub_401CE0+67B↓j
.text:0040230C                 add     [esp+16Ch+arg_8], 4
.text:00402314                 dec     [esp+16Ch+arg_4]
.text:0040231B
.text:0040231B loc_40231B:                             ; CODE XREF: sub_401CE0+719↓j
.text:0040231B                 mov     [esp+16Ch+var_12D], 1
.text:00402320                 movzx   edx, byte ptr [ebx]
.text:00402323                 jmp     loc_401F52
.text:00402328 ; ---------------------------------------------------------------------------
.text:00402328
.text:00402328 loc_402328:                             ; CODE XREF: sub_401CE0+626↑j
.text:00402328                 mov     [esp+16Ch+Code], offset aInvalidFieldWi ; "invalid field width: %s"
.text:0040232F                 call    ds:libintl_gettext
.text:00402335                 mov     ebp, [esp+16Ch+arg_8]
.text:0040233C                 mov     edi, [ebp+0]
.text:0040233F                 mov     [esp+16Ch+var_164], eax ; char *
.text:00402343                 mov     [esp+16Ch+File], 0 ; ErrorMessage
.text:0040234B                 mov     dword ptr [esp+16Ch+var_160], edi ; char
.text:0040234F                 mov     [esp+16Ch+Code], 1 ; Code
.text:00402356                 call    sub_406970
.text:0040235B                 jmp     short loc_40230C
.text:0040235D ; ---------------------------------------------------------------------------
.text:0040235D
.text:0040235D loc_40235D:                             ; CODE XREF: sub_401CE0+5D8↑j
.text:0040235D                 mov     [esp+16Ch+Code], offset aSExpectedANume ; "%s: expected a numeric value"
.text:00402364                 call    ds:libintl_gettext
.text:0040236A                 mov     ecx, [esp+16Ch+var_140]
.text:0040236E                 mov     dword ptr [esp+16Ch+var_160], ecx
.text:00402372                 jmp     loc_4022D3
.text:00402377 ; ---------------------------------------------------------------------------
.text:00402377
.text:00402377 loc_402377:                             ; CODE XREF: sub_401CE0+5C5↑j
.text:00402377                 call    _errno
.text:0040237C                 mov     [esp+16Ch+var_164], offset aS ; "%s"
.text:00402384                 mov     ecx, [esp+16Ch+var_140]
.text:00402388                 mov     dword ptr [esp+16Ch+var_160], ecx
.text:0040238C                 mov     edx, [eax]
.text:0040238E                 mov     [esp+16Ch+File], edx
.text:00402392                 jmp     loc_4022DF
.text:00402397 ; ---------------------------------------------------------------------------
.text:00402397
.text:00402397 loc_402397:                             ; CODE XREF: sub_401CE0+57B↑j
.text:00402397                                         ; sub_401CE0+583↑j
.text:00402397                 inc     [esp+16Ch+var_140]
.text:0040239B                 xor     ebp, ebp
.text:0040239D                 mov     ecx, [esp+16Ch+var_140]
.text:004023A1                 movzx   edi, byte ptr [ecx]
.text:004023A4                 inc     ecx
.text:004023A5                 mov     [esp+16Ch+var_140], ecx
.text:004023A9                 cmp     byte ptr [ecx], 0
.text:004023AC                 jz      loc_4022F6
.text:004023B2                 cmp     ds:byte_40C010, 0
.text:004023B9                 jnz     loc_4022F6
.text:004023BF                 mov     [esp+16Ch+Code], offset aWarningSCharac ; "warning: %s: character(s) following cha"...
.text:004023C6                 call    ds:libintl_gettext
.text:004023CC                 mov     [esp+16Ch+File], 0 ; ErrorMessage
.text:004023D4                 mov     ecx, [esp+16Ch+var_140]
.text:004023D8                 mov     [esp+16Ch+Code], 0 ; Code
.text:004023DF                 mov     dword ptr [esp+16Ch+var_160], ecx ; char
.text:004023E3                 mov     [esp+16Ch+var_164], eax ; char *
.text:004023E7                 call    sub_406970
.text:004023EC                 jmp     loc_4022F6
.text:004023F1 ; ---------------------------------------------------------------------------
.text:004023F1
.text:004023F1 loc_4023F1:                             ; CODE XREF: sub_401CE0+562↑j
.text:004023F1                 mov     [esp+16Ch+var_134], 0
.text:004023F9                 jmp     loc_40231B
.text:004023F9 ; ---------------------------------------------------------------------------
.text:004023FE                 align 10h
.text:00402400
.text:00402400 loc_402400:                             ; CODE XREF: sub_401CE0+189↑j
.text:00402400                                         ; DATA XREF: sub_401CE0:jpt_401E69↑o
.text:00402400                 mov     [esp+16Ch+var_A9], 0 ; jumptable 00401E69 case 48
.text:00402408                 jmp     loc_401F23
.text:0040240D ; ---------------------------------------------------------------------------
.text:0040240D
.text:0040240D loc_40240D:                             ; CODE XREF: sub_401CE0+E1↑j
.text:0040240D                 mov     eax, [esp+16Ch+arg_4]
.text:00402414                 test    eax, eax
.text:00402416                 jle     loc_401D4E
.text:0040241C                 mov     ebp, [esp+16Ch+arg_8]
.text:00402423                 mov     edi, [ebp+0]
.text:00402426                 movzx   eax, byte ptr [edi]
.text:00402429                 test    al, al
.text:0040242B                 jz      short loc_40245B
.text:0040242D
.text:0040242D loc_40242D:                             ; CODE XREF: sub_401CE0+779↓j
.text:0040242D                 cmp     al, 5Ch ; '\'
.text:0040242F                 jz      short loc_402489
.text:00402431                 mov     edx, ds:_iob
.text:00402437                 mov     ecx, [edx+24h]
.text:0040243A                 dec     ecx
.text:0040243B                 mov     [edx+24h], ecx
.text:0040243E                 test    ecx, ecx
.text:00402440                 js      short loc_40246F
.text:00402442                 movzx   ecx, byte ptr [edi]
.text:00402445                 mov     esi, ds:_iob
.text:0040244B                 mov     eax, [esi+20h]
.text:0040244E                 mov     [eax], cl
.text:00402450                 inc     dword ptr [esi+20h]
.text:00402453
.text:00402453 loc_402453:                             ; CODE XREF: sub_401CE0+7A7↓j
.text:00402453                                         ; sub_401CE0+7BB↓j
.text:00402453                 inc     edi
.text:00402454                 movzx   eax, byte ptr [edi]
.text:00402457                 test    al, al
.text:00402459                 jnz     short loc_40242D
.text:0040245B
.text:0040245B loc_40245B:                             ; CODE XREF: sub_401CE0+74B↑j
.text:0040245B                 add     [esp+16Ch+arg_8], 4
.text:00402463                 dec     [esp+16Ch+arg_4]
.text:0040246A                 jmp     loc_401D4E
.text:0040246F ; ---------------------------------------------------------------------------
.text:0040246F
.text:0040246F loc_40246F:                             ; CODE XREF: sub_401CE0+760↑j
.text:0040246F                 mov     edx, ds:_iob
.text:00402475                 add     edx, 20h ; ' '
.text:00402478                 mov     [esp+16Ch+File], edx ; File
.text:0040247C                 movsx   ebp, byte ptr [edi]
.text:0040247F                 mov     [esp+16Ch+Code], ebp ; Ch
.text:00402482                 call    _flsbuf
.text:00402487                 jmp     short loc_402453
.text:00402489 ; ---------------------------------------------------------------------------
.text:00402489
.text:00402489 loc_402489:                             ; CODE XREF: sub_401CE0+74F↑j
.text:00402489                 mov     [esp+16Ch+Code], edi
.text:0040248C                 mov     [esp+16Ch+File], 1
.text:00402494                 call    sub_402550
.text:00402499                 add     edi, eax
.text:0040249B                 jmp     short loc_402453
.text:0040249D ; ---------------------------------------------------------------------------
.text:0040249D
.text:0040249D loc_40249D:                             ; CODE XREF: sub_401CE0+D9↑j
.text:0040249D                 mov     edx, ds:_iob
.text:004024A3                 mov     ecx, [edx+24h]
.text:004024A6                 dec     ecx
.text:004024A7                 mov     [edx+24h], ecx
.text:004024AA                 test    ecx, ecx
.text:004024AC                 js      short loc_4024BE
.text:004024AE                 mov     eax, ds:_iob
.text:004024B3                 mov     esi, [eax+20h]
.text:004024B6                 mov     byte ptr [esi], 25h ; '%'
.text:004024B9                 jmp     loc_401D4B
.text:004024BE ; ---------------------------------------------------------------------------
.text:004024BE
.text:004024BE loc_4024BE:                             ; CODE XREF: sub_401CE0+7CC↑j
.text:004024BE                 mov     [esp+16Ch+Code], 25h ; '%'
.text:004024C5                 mov     edi, ds:_iob
.text:004024CB                 add     edi, 20h ; ' '
.text:004024CE                 mov     [esp+16Ch+File], edi
.text:004024D2                 jmp     loc_401D85
.text:004024D2 sub_401CE0      endp
.text:004024D2
.text:004024D2 ; ---------------------------------------------------------------------------
.text:004024D7                 align 10h
.text:004024E0 aInvalidUnivers db 'invalid universal character name \%c%0*x',0
.text:004024E0                                         ; DATA XREF: sub_402550:loc_402732↓o
.text:00402509                 align 20h
.text:00402520 aMissingHexadec db 'missing hexadecimal number in escape',0
.text:00402520                                         ; DATA XREF: sub_402550:loc_4027D0↓o
.text:00402520                                         ; sub_402550+34C↓o
.text:00402545 ; const char Str[]
.text:00402545 Str             db '"\abcfnrtv',0       ; DATA XREF: sub_402550:loc_402815↓o
.text:00402550
.text:00402550 ; =============== S U B R O U T I N E =======================================
.text:00402550
.text:00402550
.text:00402550 sub_402550      proc near               ; CODE XREF: sub_401CE0+B7↑p
.text:00402550                                         ; sub_401CE0+7B4↑p
.text:00402550
.text:00402550 C               = dword ptr -2Ch
.text:00402550 File            = dword ptr -28h
.text:00402550 var_24          = dword ptr -24h
.text:00402550 var_20          = byte ptr -20h
.text:00402550 var_1C          = dword ptr -1Ch
.text:00402550 var_18          = dword ptr -18h
.text:00402550 var_11          = byte ptr -11h
.text:00402550 arg_0           = dword ptr  4
.text:00402550 arg_4           = byte ptr  8
.text:00402550
.text:00402550                 push    ebp
.text:00402551                 push    edi
.text:00402552                 xor     edi, edi
.text:00402554                 push    esi
.text:00402555                 push    ebx
.text:00402556                 sub     esp, 1Ch
.text:00402559                 mov     ebp, [esp+2Ch+arg_0]
.text:0040255D                 movzx   ecx, [esp+2Ch+arg_4]
.text:00402562                 lea     ebx, [ebp+1]
.text:00402565                 movzx   edx, byte ptr [ebp+1]
.text:00402569                 cmp     dl, 78h ; 'x'
.text:0040256C                 jz      loc_402844
.text:00402572                 mov     al, dl
.text:00402574                 sub     al, 30h ; '0'
.text:00402576                 cmp     al, 7
.text:00402578                 ja      loc_402610
.text:0040257E                 xor     esi, esi
.text:00402580                 xor     eax, eax
.text:00402582                 test    cl, cl
.text:00402584                 jz      short loc_40258F
.text:00402586                 cmp     dl, 30h ; '0'
.text:00402589                 jz      loc_402605
.text:0040258F
.text:0040258F loc_40258F:                             ; CODE XREF: sub_402550+34↑j
.text:0040258F                                         ; sub_402550+BA↓j
.text:0040258F                 add     ebx, eax
.text:00402591                 movzx   edx, byte ptr [ebx]
.text:00402594                 mov     cl, dl
.text:00402596                 sub     cl, 30h ; '0'
.text:00402599                 cmp     cl, 7
.text:0040259C                 ja      short loc_4025C0
.text:0040259E                 mov     esi, esi
.text:004025A0
.text:004025A0 loc_4025A0:                             ; CODE XREF: sub_402550+69↓j
.text:004025A0                 inc     esi
.text:004025A1                 movsx   ecx, dl
.text:004025A4                 inc     ebx
.text:004025A5                 cmp     esi, 2
.text:004025A8                 lea     edi, [ecx+edi*8-30h]
.text:004025AC                 jg      short loc_4025C0
.text:004025AE                 movzx   edx, byte ptr [ebx]
.text:004025B1                 mov     cl, dl
.text:004025B3                 sub     cl, 30h ; '0'
.text:004025B6                 cmp     cl, 7
.text:004025B9                 jbe     short loc_4025A0
.text:004025BB                 nop
.text:004025BC                 lea     esi, [esi+0]
.text:004025C0
.text:004025C0 loc_4025C0:                             ; CODE XREF: sub_402550+4C↑j
.text:004025C0                                         ; sub_402550+5C↑j ...
.text:004025C0                 mov     edx, ds:_iob
.text:004025C6                 mov     esi, [edx+24h]
.text:004025C9                 dec     esi
.text:004025CA                 mov     [edx+24h], esi
.text:004025CD                 test    esi, esi
.text:004025CF                 js      short loc_4025EE
.text:004025D1                 mov     esi, ds:_iob
.text:004025D7                 mov     edx, edi
.text:004025D9                 mov     eax, [esi+20h]
.text:004025DC                 mov     [eax], dl
.text:004025DE                 inc     dword ptr [esi+20h]
.text:004025E1
.text:004025E1 loc_4025E1:                             ; CODE XREF: sub_402550+B3↓j
.text:004025E1                                         ; sub_402550+102↓j ...
.text:004025E1                 add     esp, 1Ch
.text:004025E4                 sub     ebx, ebp
.text:004025E6                 lea     eax, [ebx-1]
.text:004025E9                 pop     ebx
.text:004025EA                 pop     esi
.text:004025EB                 pop     edi
.text:004025EC                 pop     ebp
.text:004025ED                 retn
.text:004025EE ; ---------------------------------------------------------------------------
.text:004025EE
.text:004025EE loc_4025EE:                             ; CODE XREF: sub_402550+7F↑j
.text:004025EE                 mov     [esp+2Ch+C], edi ; Ch
.text:004025F1                 mov     ecx, ds:_iob
.text:004025F7                 add     ecx, 20h ; ' '
.text:004025FA                 mov     [esp+2Ch+File], ecx ; File
.text:004025FE                 call    _flsbuf
.text:00402603                 jmp     short loc_4025E1
.text:00402605 ; ---------------------------------------------------------------------------
.text:00402605
.text:00402605 loc_402605:                             ; CODE XREF: sub_402550+39↑j
.text:00402605                 mov     eax, 1
.text:0040260A                 jmp     short loc_40258F
.text:0040260A ; ---------------------------------------------------------------------------
.text:0040260C                 align 10h
.text:00402610
.text:00402610 loc_402610:                             ; CODE XREF: sub_402550+28↑j
.text:00402610                 test    dl, dl
.text:00402612                 jnz     loc_402815
.text:00402618
.text:00402618 loc_402618:                             ; CODE XREF: sub_402550+2DA↓j
.text:00402618                 movzx   eax, byte ptr [ebx]
.text:0040261B                 cmp     al, 75h ; 'u'
.text:0040261D                 mov     [esp+2Ch+var_11], al
.text:00402621                 jz      loc_4026B1
.text:00402627                 cmp     al, 55h ; 'U'
.text:00402629                 jz      loc_4026B1
.text:0040262F                 mov     edx, ds:_iob
.text:00402635                 mov     esi, [edx+24h]
.text:00402638                 dec     esi
.text:00402639                 mov     [edx+24h], esi
.text:0040263C                 test    esi, esi
.text:0040263E                 js      short loc_402696
.text:00402640                 mov     ecx, ds:_iob
.text:00402646                 mov     eax, [ecx+20h]
.text:00402649                 mov     byte ptr [eax], 5Ch ; '\'
.text:0040264C                 inc     dword ptr [ecx+20h]
.text:0040264F
.text:0040264F loc_40264F:                             ; CODE XREF: sub_402550+15F↓j
.text:0040264F                 cmp     byte ptr [ebx], 0
.text:00402652                 jz      short loc_4025E1
.text:00402654                 mov     edx, ds:_iob
.text:0040265A                 mov     esi, [edx+24h]
.text:0040265D                 dec     esi
.text:0040265E                 mov     [edx+24h], esi
.text:00402661                 test    esi, esi
.text:00402663                 js      short loc_40267C
.text:00402665                 movzx   ecx, byte ptr [ebx]
.text:00402668                 mov     edi, ds:_iob
.text:0040266E                 mov     eax, [edi+20h]
.text:00402671                 mov     [eax], cl
.text:00402673                 inc     dword ptr [edi+20h]
.text:00402676
.text:00402676 loc_402676:                             ; CODE XREF: sub_402550+144↓j
.text:00402676                 inc     ebx
.text:00402677                 jmp     loc_4025E1
.text:0040267C ; ---------------------------------------------------------------------------
.text:0040267C
.text:0040267C loc_40267C:                             ; CODE XREF: sub_402550+113↑j
.text:0040267C                 mov     edx, ds:_iob
.text:00402682                 add     edx, 20h ; ' '
.text:00402685                 mov     [esp+2Ch+File], edx ; File
.text:00402689                 movsx   esi, byte ptr [ebx]
.text:0040268C                 mov     [esp+2Ch+C], esi ; Ch
.text:0040268F                 call    _flsbuf
.text:00402694                 jmp     short loc_402676
.text:00402696 ; ---------------------------------------------------------------------------
.text:00402696
.text:00402696 loc_402696:                             ; CODE XREF: sub_402550+EE↑j
.text:00402696                 mov     [esp+2Ch+C], 5Ch ; '\' ; Ch
.text:0040269D                 mov     edi, ds:_iob
.text:004026A3                 add     edi, 20h ; ' '
.text:004026A6                 mov     [esp+2Ch+File], edi ; File
.text:004026AA                 call    _flsbuf
.text:004026AF                 jmp     short loc_40264F
.text:004026B1 ; ---------------------------------------------------------------------------
.text:004026B1
.text:004026B1 loc_4026B1:                             ; CODE XREF: sub_402550+D1↑j
.text:004026B1                                         ; sub_402550+D9↑j
.text:004026B1                 xor     edi, edi
.text:004026B3                 cmp     [esp+2Ch+var_11], 75h ; 'u'
.text:004026B8                 setnz   cl
.text:004026BB                 inc     ebx
.text:004026BC                 movzx   edx, cl
.text:004026BF                 lea     esi, ds:4[edx*4]
.text:004026C6                 test    esi, esi
.text:004026C8                 jle     short loc_402732
.text:004026CA                 lea     esi, [esi+0]
.text:004026D0
.text:004026D0 loc_4026D0:                             ; CODE XREF: sub_402550+1C9↓j
.text:004026D0                 movsx   edx, byte ptr [ebx]
.text:004026D3                 mov     ecx, ds:__mb_cur_max
.text:004026D9                 cmp     dword ptr [ecx], 1
.text:004026DC                 jz      loc_402800
.text:004026E2                 mov     [esp+2Ch+File], 80h ; '€' ; Type
.text:004026EA                 mov     [esp+2Ch+C], edx ; C
.text:004026ED                 call    _isctype
.text:004026F2
.text:004026F2 loc_4026F2:                             ; CODE XREF: sub_402550+2C0↓j
.text:004026F2                 test    eax, eax
.text:004026F4                 jz      loc_4027D0
.text:004026FA
.text:004026FA loc_4026FA:                             ; CODE XREF: sub_402550+2A5↓j
.text:004026FA                 movzx   edx, byte ptr [ebx]
.text:004026FD                 mov     ecx, edi
.text:004026FF                 shl     ecx, 4
.text:00402702                 mov     al, dl
.text:00402704                 sub     al, 61h ; 'a'
.text:00402706                 cmp     al, 5
.text:00402708                 ja      loc_4027B0
.text:0040270E                 movsx   eax, dl
.text:00402711                 lea     edi, [eax+ecx-57h]
.text:00402715
.text:00402715 loc_402715:                             ; CODE XREF: sub_402550+26F↓j
.text:00402715                                         ; sub_402550+27B↓j
.text:00402715                 dec     esi
.text:00402716                 inc     ebx
.text:00402717                 test    esi, esi
.text:00402719                 jg      short loc_4026D0
.text:0040271B                 cmp     edi, 9Fh ; 'Ÿ'
.text:00402721                 ja      short loc_40279B
.text:00402723                 cmp     edi, 24h ; '$'
.text:00402726                 jz      short loc_40279B
.text:00402728                 cmp     edi, 40h ; '@'
.text:0040272B                 jz      short loc_40279B
.text:0040272D                 cmp     edi, 60h ; '`'
.text:00402730                 jz      short loc_40279B
.text:00402732
.text:00402732 loc_402732:                             ; CODE XREF: sub_402550+178↑j
.text:00402732                                         ; sub_402550+259↓j
.text:00402732                 mov     [esp+2Ch+C], offset aInvalidUnivers ; "invalid universal character name \\%c%0"...
.text:00402739                 call    ds:libintl_gettext
.text:0040273F                 mov     [esp+2Ch+var_18], edi
.text:00402743                 xor     ecx, ecx
.text:00402745                 cmp     [esp+2Ch+var_11], 75h ; 'u'
.text:0040274A                 mov     [esp+2Ch+File], 0 ; ErrorMessage
.text:00402752                 mov     [esp+2Ch+var_24], eax ; char *
.text:00402756                 setnz   cl
.text:00402759                 mov     [esp+2Ch+C], 1  ; Code
.text:00402760                 lea     esi, ds:4[ecx*4]
.text:00402767                 movsx   ecx, [esp+2Ch+var_11]
.text:0040276C                 mov     [esp+2Ch+var_1C], esi
.text:00402770                 mov     dword ptr [esp+2Ch+var_20], ecx ; char
.text:00402774                 call    sub_406970
.text:00402779
.text:00402779 loc_402779:                             ; CODE XREF: sub_402550+257↓j
.text:00402779                 mov     [esp+2Ch+File], edi
.text:0040277D                 mov     edi, ds:_iob
.text:00402783                 mov     [esp+2Ch+var_24], 0
.text:0040278B                 add     edi, 20h ; ' '
.text:0040278E                 mov     [esp+2Ch+C], edi
.text:00402791                 call    sub_403970
.text:00402796                 jmp     loc_4025E1
.text:0040279B ; ---------------------------------------------------------------------------
.text:0040279B
.text:0040279B loc_40279B:                             ; CODE XREF: sub_402550+1D1↑j
.text:0040279B                                         ; sub_402550+1D6↑j ...
.text:0040279B                 lea     esi, [edi-0D800h]
.text:004027A1                 cmp     esi, 7FFh
.text:004027A7                 ja      short loc_402779
.text:004027A9                 jmp     short loc_402732
.text:004027A9 ; ---------------------------------------------------------------------------
.text:004027AB                 align 10h
.text:004027B0
.text:004027B0 loc_4027B0:                             ; CODE XREF: sub_402550+1B8↑j
.text:004027B0                 mov     al, dl
.text:004027B2                 sub     al, 41h ; 'A'
.text:004027B4                 cmp     al, 5
.text:004027B6                 ja      short loc_4027C4
.text:004027B8                 movsx   eax, dl
.text:004027BB                 lea     edi, [eax+ecx-37h]
.text:004027BF                 jmp     loc_402715
.text:004027C4 ; ---------------------------------------------------------------------------
.text:004027C4
.text:004027C4 loc_4027C4:                             ; CODE XREF: sub_402550+266↑j
.text:004027C4                 movsx   eax, dl
.text:004027C7                 lea     edi, [eax+ecx-30h]
.text:004027CB                 jmp     loc_402715
.text:004027D0 ; ---------------------------------------------------------------------------
.text:004027D0
.text:004027D0 loc_4027D0:                             ; CODE XREF: sub_402550+1A4↑j
.text:004027D0                 mov     [esp+2Ch+C], offset aMissingHexadec ; "missing hexadecimal number in escape"
.text:004027D7                 call    ds:libintl_gettext
.text:004027DD                 mov     [esp+2Ch+File], 0 ; ErrorMessage
.text:004027E5                 mov     [esp+2Ch+C], 1  ; Code
.text:004027EC                 mov     [esp+2Ch+var_24], eax ; char *
.text:004027F0                 call    sub_406970
.text:004027F5                 jmp     loc_4026FA
.text:004027F5 ; ---------------------------------------------------------------------------
.text:004027FA                 align 10h
.text:00402800
.text:00402800 loc_402800:                             ; CODE XREF: sub_402550+18C↑j
.text:00402800                 mov     eax, ds:_pctype
.text:00402805                 mov     ecx, [eax]
.text:00402807                 movzx   eax, word ptr [ecx+edx*2]
.text:0040280B                 and     eax, 80h
.text:00402810                 jmp     loc_4026F2
.text:00402815 ; ---------------------------------------------------------------------------
.text:00402815
.text:00402815 loc_402815:                             ; CODE XREF: sub_402550+C2↑j
.text:00402815                 mov     [esp+2Ch+C], offset Str ; "\"\\abcfnrtv"
.text:0040281C                 movsx   edi, dl
.text:0040281F                 mov     [esp+2Ch+File], edi ; Val
.text:00402823                 call    strchr
.text:00402828                 test    eax, eax
.text:0040282A                 jz      loc_402618
.text:00402830                 movsx   ebx, byte ptr [ebp+1]
.text:00402834                 mov     [esp+2Ch+C], ebx
.text:00402837                 lea     ebx, [ebp+2]
.text:0040283A                 call    sub_402FF0
.text:0040283F                 jmp     loc_4025E1
.text:00402844 ; ---------------------------------------------------------------------------
.text:00402844
.text:00402844 loc_402844:                             ; CODE XREF: sub_402550+1C↑j
.text:00402844                 xor     esi, esi
.text:00402846                 lea     ebx, [ebp+2]
.text:00402849                 lea     esi, [esi+0]
.text:00402850
.text:00402850 loc_402850:                             ; CODE XREF: sub_402550+342↓j
.text:00402850                 movsx   edx, byte ptr [ebx]
.text:00402853                 mov     ecx, ds:__mb_cur_max
.text:00402859                 cmp     dword ptr [ecx], 1
.text:0040285C                 jz      loc_4028E0
.text:00402862                 mov     [esp+2Ch+File], 80h ; '€' ; Type
.text:0040286A                 mov     [esp+2Ch+C], edx ; C
.text:0040286D                 call    _isctype
.text:00402872
.text:00402872 loc_402872:                             ; CODE XREF: sub_402550+3A0↓j
.text:00402872                 test    eax, eax
.text:00402874                 jz      short loc_402894
.text:00402876                 movzx   edx, byte ptr [ebx]
.text:00402879                 mov     ecx, edi
.text:0040287B                 shl     ecx, 4
.text:0040287E                 mov     al, dl
.text:00402880                 sub     al, 61h ; 'a'
.text:00402882                 cmp     al, 5
.text:00402884                 ja      short loc_4028C6
.text:00402886                 movsx   eax, dl
.text:00402889                 lea     edi, [eax+ecx-57h]
.text:0040288D
.text:0040288D loc_40288D:                             ; CODE XREF: sub_402550+385↓j
.text:0040288D                                         ; sub_402550+38E↓j
.text:0040288D                 inc     esi
.text:0040288E                 inc     ebx
.text:0040288F                 cmp     esi, 1
.text:00402892                 jle     short loc_402850
.text:00402894
.text:00402894 loc_402894:                             ; CODE XREF: sub_402550+324↑j
.text:00402894                 test    esi, esi
.text:00402896                 jnz     loc_4025C0
.text:0040289C                 mov     [esp+2Ch+C], offset aMissingHexadec ; "missing hexadecimal number in escape"
.text:004028A3                 call    ds:libintl_gettext
.text:004028A9                 mov     [esp+2Ch+File], 0 ; ErrorMessage
.text:004028B1                 mov     [esp+2Ch+C], 1  ; Code
.text:004028B8                 mov     [esp+2Ch+var_24], eax ; char *
.text:004028BC                 call    sub_406970
.text:004028C1                 jmp     loc_4025C0
.text:004028C6 ; ---------------------------------------------------------------------------
.text:004028C6
.text:004028C6 loc_4028C6:                             ; CODE XREF: sub_402550+334↑j
.text:004028C6                 mov     al, dl
.text:004028C8                 sub     al, 41h ; 'A'
.text:004028CA                 cmp     al, 5
.text:004028CC                 ja      short loc_4028D7
.text:004028CE                 movsx   eax, dl
.text:004028D1                 lea     edi, [eax+ecx-37h]
.text:004028D5                 jmp     short loc_40288D
.text:004028D7 ; ---------------------------------------------------------------------------
.text:004028D7
.text:004028D7 loc_4028D7:                             ; CODE XREF: sub_402550+37C↑j
.text:004028D7                 movsx   eax, dl
.text:004028DA                 lea     edi, [eax+ecx-30h]
.text:004028DE                 jmp     short loc_40288D
.text:004028E0 ; ---------------------------------------------------------------------------
.text:004028E0
.text:004028E0 loc_4028E0:                             ; CODE XREF: sub_402550+30C↑j
.text:004028E0                 mov     eax, ds:_pctype
.text:004028E5                 mov     ecx, [eax]
.text:004028E7                 movzx   eax, word ptr [ecx+edx*2]
.text:004028EB                 and     eax, 80h
.text:004028F0                 jmp     short loc_402872
.text:004028F0 sub_402550      endp
.text:004028F0
.text:004028F0 ; ---------------------------------------------------------------------------
.text:004028F2 aI64d           db 'I64d',0             ; DATA XREF: sub_402900:loc_402A20↓o
.text:004028F7 asc_4028F7      db 'L',0                ; DATA XREF: sub_402900:loc_402FC7↓o
.text:004028F9                 align 10h
.text:00402900
.text:00402900 ; =============== S U B R O U T I N E =======================================
.text:00402900
.text:00402900
.text:00402900 ; int __cdecl sub_402900(int, int, char, char, int, char, int, char *)
.text:00402900 sub_402900      proc near               ; CODE XREF: sub_401CE0+313↑p
.text:00402900
.text:00402900 var_5E          = word ptr -5Eh
.text:00402900 Format          = dword ptr -5Ch
.text:00402900 ErrorMessage    = dword ptr -58h
.text:00402900 var_54          = dword ptr -54h
.text:00402900 var_50          = byte ptr -50h
.text:00402900 var_4C          = dword ptr -4Ch
.text:00402900 var_48          = dword ptr -48h
.text:00402900 var_3C          = tbyte ptr -3Ch
.text:00402900 var_30          = dword ptr -30h
.text:00402900 var_2B          = byte ptr -2Bh
.text:00402900 var_2A          = byte ptr -2Ah
.text:00402900 var_29          = byte ptr -29h
.text:00402900 var_28          = dword ptr -28h
.text:00402900 var_24          = dword ptr -24h
.text:00402900 EndPtr          = dword ptr -20h
.text:00402900 arg_0           = dword ptr  4
.text:00402900 arg_4           = dword ptr  8
.text:00402900 arg_8           = byte ptr  0Ch
.text:00402900 arg_C           = byte ptr  10h
.text:00402900 arg_10          = dword ptr  14h
.text:00402900 arg_14          = byte ptr  18h
.text:00402900 arg_18          = dword ptr  1Ch
.text:00402900 String          = dword ptr  20h
.text:00402900
.text:00402900                 push    ebp
.text:00402901                 push    edi
.text:00402902                 push    esi
.text:00402903                 push    ebx
.text:00402904                 sub     esp, 4Ch
.text:00402907                 mov     ebp, [esp+5Ch+arg_4]
.text:0040290B                 movzx   edx, [esp+5Ch+arg_8]
.text:00402910                 movzx   eax, [esp+5Ch+arg_C]
.text:00402915                 mov     [esp+5Ch+var_29], dl
.text:00402919                 movsx   edi, [esp+5Ch+var_29]
.text:0040291E                 movzx   edx, [esp+5Ch+arg_14]
.text:00402923                 mov     [esp+5Ch+var_2A], al
.text:00402927                 lea     eax, [edi-41h]  ; switch 56 cases
.text:0040292A                 cmp     eax, 37h
.text:0040292D                 mov     [esp+5Ch+var_2B], dl
.text:00402931                 ja      def_402937      ; jumptable 00402937 default case, cases 66-68,72-87,89-96,98,99,104,106-110,112-116,118,119
.text:00402937                 jmp     ds:jpt_402937[eax*4] ; switch jump
.text:00402937 ; ---------------------------------------------------------------------------
.text:0040293E                 align 10h
.text:00402940 jpt_402937      dd offset loc_402FC7, offset def_402937, offset def_402937
.text:00402940                                         ; DATA XREF: sub_402900+37↑r
.text:00402940                 dd offset def_402937, offset loc_402FC7, offset loc_402FC7 ; jump table for switch statement
.text:00402940                 dd offset loc_402FC7, offset def_402937, offset def_402937
.text:00402940                 dd offset def_402937, offset def_402937, offset def_402937
.text:00402940                 dd offset def_402937, offset def_402937, offset def_402937
.text:00402940                 dd offset def_402937, offset def_402937, offset def_402937
.text:00402940                 dd offset def_402937, offset def_402937, offset def_402937
.text:00402940                 dd offset def_402937, offset def_402937, offset loc_402A20
.text:00402940                 dd offset def_402937, offset def_402937, offset def_402937
.text:00402940                 dd offset def_402937, offset def_402937, offset def_402937
.text:00402940                 dd offset def_402937, offset def_402937, offset loc_402FC7
.text:00402940                 dd offset def_402937, offset def_402937, offset loc_402A20
.text:00402940                 dd offset loc_402FC7, offset loc_402FC7, offset loc_402FC7
.text:00402940                 dd offset def_402937, offset loc_402A20, offset def_402937
.text:00402940                 dd offset def_402937, offset def_402937, offset def_402937
.text:00402940                 dd offset def_402937, offset loc_402A20, offset def_402937
.text:00402940                 dd offset def_402937, offset def_402937, offset def_402937
.text:00402940                 dd offset def_402937, offset loc_402A20, offset def_402937
.text:00402940                 dd offset def_402937, offset loc_402A20
.text:00402A20 ; ---------------------------------------------------------------------------
.text:00402A20
.text:00402A20 loc_402A20:                             ; CODE XREF: sub_402900+37↑j
.text:00402A20                                         ; DATA XREF: sub_402900:jpt_402937↑o
.text:00402A20                 mov     esi, offset aI64d ; jumptable 00402937 cases 88,100,105,111,117,120
.text:00402A25                 mov     ebx, 3
.text:00402A2A                 lea     esi, [esi+0]
.text:00402A30
.text:00402A30 loc_402A30:                             ; CODE XREF: sub_402900+6D1↓j
.text:00402A30                                         ; sub_402900+6DC↓j
.text:00402A30                 lea     edx, [ebx+ebp+2]
.text:00402A34                 mov     [esp+5Ch+Format], edx ; size_t
.text:00402A37                 call    sub_403490
.text:00402A3C                 mov     [esp+5Ch+var_54], ebp
.text:00402A40                 mov     ebp, [esp+5Ch+arg_0]
.text:00402A44                 mov     [esp+5Ch+var_30], eax
.text:00402A48                 mov     [esp+5Ch+Format], eax
.text:00402A4B                 mov     [esp+5Ch+ErrorMessage], ebp
.text:00402A4F                 call    sub_406C10
.text:00402A54                 mov     [esp+5Ch+Format], eax
.text:00402A57                 mov     [esp+5Ch+var_54], ebx
.text:00402A5B                 mov     [esp+5Ch+ErrorMessage], esi
.text:00402A5F                 call    sub_406C10
.text:00402A64                 movzx   ecx, [esp+5Ch+var_29]
.text:00402A69                 mov     byte ptr [eax+1], 0
.text:00402A6D                 mov     [eax], cl
.text:00402A6F                 lea     eax, [edi-41h]  ; switch 56 cases
.text:00402A72                 cmp     eax, 37h
.text:00402A75                 ja      def_402A7B      ; jumptable 00402A7B default case, cases 66-68,72-87,89-96,98,104,106-110,112-114,116,118,119
.text:00402A7B                 jmp     ds:jpt_402A7B[eax*4] ; switch jump
.text:00402A7B ; ---------------------------------------------------------------------------
.text:00402A82                 align 4
.text:00402A84 jpt_402A7B      dd offset loc_402D5B, offset def_402A7B, offset def_402A7B
.text:00402A84                                         ; DATA XREF: sub_402900+17B↑r
.text:00402A84                 dd offset def_402A7B, offset loc_402D5B, offset loc_402D5B ; jump table for switch statement
.text:00402A84                 dd offset loc_402D5B, offset def_402A7B, offset def_402A7B
.text:00402A84                 dd offset def_402A7B, offset def_402A7B, offset def_402A7B
.text:00402A84                 dd offset def_402A7B, offset def_402A7B, offset def_402A7B
.text:00402A84                 dd offset def_402A7B, offset def_402A7B, offset def_402A7B
.text:00402A84                 dd offset def_402A7B, offset def_402A7B, offset def_402A7B
.text:00402A84                 dd offset def_402A7B, offset def_402A7B, offset loc_402F7F
.text:00402A84                 dd offset def_402A7B, offset def_402A7B, offset def_402A7B
.text:00402A84                 dd offset def_402A7B, offset def_402A7B, offset def_402A7B
.text:00402A84                 dd offset def_402A7B, offset def_402A7B, offset loc_402D5B
.text:00402A84                 dd offset def_402A7B, offset loc_402D19, offset loc_402B64
.text:00402A84                 dd offset loc_402D5B, offset loc_402D5B, offset loc_402D5B
.text:00402A84                 dd offset def_402A7B, offset loc_402B64, offset def_402A7B
.text:00402A84                 dd offset def_402A7B, offset def_402A7B, offset def_402A7B
.text:00402A84                 dd offset def_402A7B, offset loc_402F7F, offset def_402A7B
.text:00402A84                 dd offset def_402A7B, offset def_402A7B, offset loc_402F10
.text:00402A84                 dd offset def_402A7B, offset loc_402F7F, offset def_402A7B
.text:00402A84                 dd offset def_402A7B, offset loc_402F7F
.text:00402B64 ; ---------------------------------------------------------------------------
.text:00402B64
.text:00402B64 loc_402B64:                             ; CODE XREF: sub_402900+17B↑j
.text:00402B64                                         ; DATA XREF: sub_402900:jpt_402A7B↑o
.text:00402B64                 mov     ebx, [esp+5Ch+String] ; jumptable 00402A7B cases 100,105
.text:00402B68                 movzx   eax, byte ptr [ebx]
.text:00402B6B                 cmp     al, 22h ; '"'
.text:00402B6D                 jz      loc_402CC5
.text:00402B73                 cmp     al, 27h ; '''
.text:00402B75                 jz      loc_402CC5
.text:00402B7B                 call    _errno
.text:00402B80                 mov     dword ptr [eax], 0
.text:00402B86                 mov     esi, [esp+5Ch+String]
.text:00402B8A                 lea     edi, [esp+5Ch+EndPtr]
.text:00402B8E                 mov     [esp+5Ch+ErrorMessage], edi ; EndPtr
.text:00402B92                 mov     [esp+5Ch+var_54], 0 ; Radix
.text:00402B9A                 mov     [esp+5Ch+Format], esi ; String
.text:00402B9D                 call    _strtoll
.text:00402BA2                 mov     edi, [esp+5Ch+EndPtr]
.text:00402BA6
.text:00402BA6 loc_402BA6:                             ; CODE XREF: sub_402900+6C2↓j
.text:00402BA6                 mov     ebx, eax
.text:00402BA8                 mov     esi, edx
.text:00402BAA                 call    _errno
.text:00402BAF                 mov     ecx, [eax]
.text:00402BB1                 test    ecx, ecx
.text:00402BB3                 jnz     loc_402CA5
.text:00402BB9                 cmp     byte ptr [edi], 0
.text:00402BBC                 jz      short loc_402C00
.text:00402BBE                 cmp     [esp+5Ch+String], edi
.text:00402BC2                 jz      loc_402C99
.text:00402BC8                 mov     [esp+5Ch+Format], offset aSValueNotCompl ; "%s: value not completely converted"
.text:00402BCF
.text:00402BCF loc_402BCF:                             ; CODE XREF: sub_402900+3A0↓j
.text:00402BCF                 call    ds:libintl_gettext
.text:00402BD5                 mov     [esp+5Ch+ErrorMessage], 0 ; ErrorMessage
.text:00402BDD                 mov     ecx, [esp+5Ch+String]
.text:00402BE1                 mov     [esp+5Ch+var_54], eax ; char *
.text:00402BE5                 mov     dword ptr [esp+5Ch+var_50], ecx ; char
.text:00402BE9
.text:00402BE9 loc_402BE9:                             ; CODE XREF: sub_402900+3C0↓j
.text:00402BE9                 mov     [esp+5Ch+Format], 0 ; Code
.text:00402BF0                 call    sub_406970
.text:00402BF5                 mov     edx, 1
.text:00402BFA                 mov     ds:dword_40C000, edx
.text:00402C00
.text:00402C00 loc_402C00:                             ; CODE XREF: sub_402900+2BC↑j
.text:00402C00                                         ; sub_402900+3D8↓j ...
.text:00402C00                 cmp     [esp+5Ch+var_2A], 0
.text:00402C05                 jnz     short loc_402C62
.text:00402C07                 cmp     [esp+5Ch+var_2B], 0
.text:00402C0C                 jnz     short loc_402C44
.text:00402C0E                 mov     [esp+5Ch+ErrorMessage], ebx
.text:00402C12                 mov     [esp+5Ch+var_54], esi
.text:00402C16
.text:00402C16 loc_402C16:                             ; CODE XREF: sub_402900+642↓j
.text:00402C16                 mov     edi, [esp+5Ch+var_30]
.text:00402C1A                 mov     [esp+5Ch+Format], edi ; Format
.text:00402C1D
.text:00402C1D loc_402C1D:                             ; CODE XREF: sub_402900+456↓j
.text:00402C1D                 call    printf
.text:00402C22                 lea     esi, [esi+0]
.text:00402C29                 lea     edi, [edi+0]
.text:00402C30
.text:00402C30 def_402A7B:                             ; CODE XREF: sub_402900+175↑j
.text:00402C30                                         ; sub_402900+17B↑j ...
.text:00402C30                 mov     esi, [esp+5Ch+var_30] ; jumptable 00402A7B default case, cases 66-68,72-87,89-96,98,104,106-110,112-114,116,118,119
.text:00402C34                 mov     [esp+5Ch+Format], esi ; Block
.text:00402C37                 call    free
.text:00402C3C                 add     esp, 4Ch
.text:00402C3F                 pop     ebx
.text:00402C40                 pop     esi
.text:00402C41                 pop     edi
.text:00402C42                 pop     ebp
.text:00402C43                 retn
.text:00402C44 ; ---------------------------------------------------------------------------
.text:00402C44
.text:00402C44 loc_402C44:                             ; CODE XREF: sub_402900+30C↑j
.text:00402C44                 mov     [esp+5Ch+var_54], ebx
.text:00402C48                 mov     edx, [esp+5Ch+arg_18]
.text:00402C4C
.text:00402C4C loc_402C4C:                             ; CODE XREF: sub_402900+397↓j
.text:00402C4C                 mov     dword ptr [esp+5Ch+var_50], esi
.text:00402C50                 mov     [esp+5Ch+ErrorMessage], edx
.text:00402C54
.text:00402C54 loc_402C54:                             ; CODE XREF: sub_402900+515↓j
.text:00402C54                 mov     ecx, [esp+5Ch+var_30]
.text:00402C58                 mov     [esp+5Ch+Format], ecx ; Format
.text:00402C5B
.text:00402C5B loc_402C5B:                             ; CODE XREF: sub_402900+67A↓j
.text:00402C5B                 call    printf
.text:00402C60                 jmp     short def_402A7B ; jumptable 00402A7B default case, cases 66-68,72-87,89-96,98,104,106-110,112-114,116,118,119
.text:00402C62 ; ---------------------------------------------------------------------------
.text:00402C62
.text:00402C62 loc_402C62:                             ; CODE XREF: sub_402900+305↑j
.text:00402C62                 cmp     [esp+5Ch+var_2B], 0
.text:00402C67                 jz      short loc_402C8F
.text:00402C69                 mov     dword ptr [esp+5Ch+var_50], ebx
.text:00402C6D                 mov     eax, [esp+5Ch+arg_18]
.text:00402C71                 mov     ebx, [esp+5Ch+arg_10]
.text:00402C75                 mov     [esp+5Ch+var_4C], esi
.text:00402C79                 mov     esi, [esp+5Ch+var_30]
.text:00402C7D                 mov     [esp+5Ch+var_54], eax
.text:00402C81                 mov     [esp+5Ch+ErrorMessage], ebx
.text:00402C85                 mov     [esp+5Ch+Format], esi ; Format
.text:00402C88
.text:00402C88 loc_402C88:                             ; CODE XREF: sub_402900+535↓j
.text:00402C88                 call    printf
.text:00402C8D                 jmp     short def_402A7B ; jumptable 00402A7B default case, cases 66-68,72-87,89-96,98,104,106-110,112-114,116,118,119
.text:00402C8F ; ---------------------------------------------------------------------------
.text:00402C8F
.text:00402C8F loc_402C8F:                             ; CODE XREF: sub_402900+367↑j
.text:00402C8F                 mov     [esp+5Ch+var_54], ebx
.text:00402C93                 mov     edx, [esp+5Ch+arg_10]
.text:00402C97                 jmp     short loc_402C4C
.text:00402C99 ; ---------------------------------------------------------------------------
.text:00402C99
.text:00402C99 loc_402C99:                             ; CODE XREF: sub_402900+2C2↑j
.text:00402C99                 mov     [esp+5Ch+Format], offset aSExpectedANume ; "%s: expected a numeric value"
.text:00402CA0                 jmp     loc_402BCF
.text:00402CA5 ; ---------------------------------------------------------------------------
.text:00402CA5
.text:00402CA5 loc_402CA5:                             ; CODE XREF: sub_402900+2B3↑j
.text:00402CA5                 call    _errno
.text:00402CAA                 mov     [esp+5Ch+var_54], offset aS ; "%s"
.text:00402CB2                 mov     ebp, [esp+5Ch+String]
.text:00402CB6                 mov     dword ptr [esp+5Ch+var_50], ebp
.text:00402CBA                 mov     edi, [eax]
.text:00402CBC                 mov     [esp+5Ch+ErrorMessage], edi
.text:00402CC0                 jmp     loc_402BE9
.text:00402CC5 ; ---------------------------------------------------------------------------
.text:00402CC5
.text:00402CC5 loc_402CC5:                             ; CODE XREF: sub_402900+26D↑j
.text:00402CC5                                         ; sub_402900+275↑j ...
.text:00402CC5                 mov     edx, [esp+5Ch+String]
.text:00402CC9                 xor     esi, esi
.text:00402CCB                 mov     edi, edx
.text:00402CCD                 movzx   ebx, byte ptr [edx+1]
.text:00402CD1                 add     edi, 2
.text:00402CD4                 cmp     byte ptr [edx+2], 0
.text:00402CD8                 jz      loc_402C00
.text:00402CDE                 cmp     ds:byte_40C010, 0
.text:00402CE5                 jnz     loc_402C00
.text:00402CEB                 mov     [esp+5Ch+Format], offset aWarningSCharac ; "warning: %s: character(s) following cha"...
.text:00402CF2                 call    ds:libintl_gettext
.text:00402CF8                 mov     dword ptr [esp+5Ch+var_50], edi ; char
.text:00402CFC                 mov     [esp+5Ch+ErrorMessage], 0 ; ErrorMessage
.text:00402D04                 mov     [esp+5Ch+Format], 0 ; Code
.text:00402D0B                 mov     [esp+5Ch+var_54], eax ; char *
.text:00402D0F                 call    sub_406970
.text:00402D14                 jmp     loc_402C00
.text:00402D19 ; ---------------------------------------------------------------------------
.text:00402D19
.text:00402D19 loc_402D19:                             ; CODE XREF: sub_402900+17B↑j
.text:00402D19                                         ; DATA XREF: sub_402900:jpt_402A7B↑o
.text:00402D19                 cmp     [esp+5Ch+var_2A], 0 ; jumptable 00402A7B case 99
.text:00402D1E                 jnz     short loc_402D3C
.text:00402D20                 mov     eax, [esp+5Ch+String]
.text:00402D24                 mov     ebp, [esp+5Ch+var_30]
.text:00402D28                 movsx   ecx, byte ptr [eax]
.text:00402D2B                 mov     [esp+5Ch+Format], ebp ; Format
.text:00402D2E                 mov     [esp+5Ch+ErrorMessage], ecx
.text:00402D32
.text:00402D32 loc_402D32:                             ; CODE XREF: sub_402900+62D↓j
.text:00402D32                 call    printf
.text:00402D37                 jmp     def_402A7B      ; jumptable 00402A7B default case, cases 66-68,72-87,89-96,98,104,106-110,112-114,116,118,119
.text:00402D3C ; ---------------------------------------------------------------------------
.text:00402D3C
.text:00402D3C loc_402D3C:                             ; CODE XREF: sub_402900+41E↑j
.text:00402D3C                 mov     esi, [esp+5Ch+String]
.text:00402D40                 movsx   edi, byte ptr [esi]
.text:00402D43                 mov     [esp+5Ch+var_54], edi
.text:00402D47
.text:00402D47 loc_402D47:                             ; CODE XREF: sub_402900+656↓j
.text:00402D47                 mov     ebx, [esp+5Ch+arg_10]
.text:00402D4B                 mov     esi, [esp+5Ch+var_30]
.text:00402D4F                 mov     [esp+5Ch+ErrorMessage], ebx
.text:00402D53                 mov     [esp+5Ch+Format], esi
.text:00402D56                 jmp     loc_402C1D
.text:00402D5B ; ---------------------------------------------------------------------------
.text:00402D5B
.text:00402D5B loc_402D5B:                             ; CODE XREF: sub_402900+17B↑j
.text:00402D5B                                         ; DATA XREF: sub_402900:jpt_402A7B↑o
.text:00402D5B                 mov     edi, [esp+5Ch+String] ; jumptable 00402A7B cases 65,69-71,97,101-103
.text:00402D5F                 movzx   eax, byte ptr [edi]
.text:00402D62                 cmp     al, 22h ; '"'
.text:00402D64                 jz      loc_402EA4
.text:00402D6A                 cmp     al, 27h ; '''
.text:00402D6C                 jz      loc_402EA4
.text:00402D72                 call    _errno
.text:00402D77                 mov     dword ptr [eax], 0
.text:00402D7D                 mov     esi, [esp+5Ch+String]
.text:00402D81                 lea     ebx, [esp+5Ch+var_28]
.text:00402D85                 mov     [esp+5Ch+ErrorMessage], ebx ; int
.text:00402D89                 mov     [esp+5Ch+Format], esi ; char *
.text:00402D8C                 call    sub_403C10
.text:00402D91                 mov     ebp, [esp+5Ch+var_28]
.text:00402D95                 fstp    [esp+5Ch+var_3C]
.text:00402D99                 mov     ebx, dword ptr [esp+5Ch+var_3C]
.text:00402D9D                 mov     esi, dword ptr [esp+5Ch+var_3C+4]
.text:00402DA1                 mov     edi, dword ptr [esp+5Ch+var_3C+8]
.text:00402DA5                 call    _errno
.text:00402DAA                 mov     edx, [eax]
.text:00402DAC                 test    edx, edx
.text:00402DAE                 jnz     loc_402E84
.text:00402DB4                 cmp     byte ptr [ebp+0], 0
.text:00402DB8                 jz      short loc_402DFB
.text:00402DBA                 cmp     [esp+5Ch+String], ebp
.text:00402DBE                 jz      loc_402E78
.text:00402DC4                 mov     [esp+5Ch+Format], offset aSValueNotCompl ; "%s: value not completely converted"
.text:00402DCB
.text:00402DCB loc_402DCB:                             ; CODE XREF: sub_402900+57F↓j
.text:00402DCB                 call    ds:libintl_gettext
.text:00402DD1                 mov     [esp+5Ch+ErrorMessage], 0 ; ErrorMessage
.text:00402DD9                 mov     ecx, [esp+5Ch+String]
.text:00402DDD                 mov     [esp+5Ch+var_54], eax ; char *
.text:00402DE1                 mov     dword ptr [esp+5Ch+var_50], ecx ; char
.text:00402DE5
.text:00402DE5 loc_402DE5:                             ; CODE XREF: sub_402900+59F↓j
.text:00402DE5                 mov     [esp+5Ch+Format], 0 ; Code
.text:00402DEC                 call    sub_406970
.text:00402DF1                 mov     eax, 1
.text:00402DF6                 mov     ds:dword_40C000, eax
.text:00402DFB
.text:00402DFB loc_402DFB:                             ; CODE XREF: sub_402900+4B8↑j
.text:00402DFB                                         ; sub_402900+5CE↓j ...
.text:00402DFB                 cmp     [esp+5Ch+var_2A], 0
.text:00402E00                 jnz     short loc_402E3A
.text:00402E02                 cmp     [esp+5Ch+var_2B], 0
.text:00402E07                 jnz     short loc_402E1A
.text:00402E09                 mov     [esp+5Ch+ErrorMessage], ebx
.text:00402E0D                 mov     [esp+5Ch+var_54], esi
.text:00402E11                 mov     dword ptr [esp+5Ch+var_50], edi
.text:00402E15                 jmp     loc_402C54
.text:00402E1A ; ---------------------------------------------------------------------------
.text:00402E1A
.text:00402E1A loc_402E1A:                             ; CODE XREF: sub_402900+507↑j
.text:00402E1A                 mov     [esp+5Ch+var_54], ebx
.text:00402E1E                 mov     edx, [esp+5Ch+arg_18]
.text:00402E22
.text:00402E22 loc_402E22:                             ; CODE XREF: sub_402900+549↓j
.text:00402E22                 mov     dword ptr [esp+5Ch+var_50], esi
.text:00402E26                 mov     [esp+5Ch+var_4C], edi
.text:00402E2A                 mov     [esp+5Ch+ErrorMessage], edx
.text:00402E2E                 mov     edi, [esp+5Ch+var_30]
.text:00402E32                 mov     [esp+5Ch+Format], edi
.text:00402E35                 jmp     loc_402C88
.text:00402E3A ; ---------------------------------------------------------------------------
.text:00402E3A
.text:00402E3A loc_402E3A:                             ; CODE XREF: sub_402900+500↑j
.text:00402E3A                 cmp     [esp+5Ch+var_2B], 0
.text:00402E3F                 jnz     short loc_402E4B
.text:00402E41                 mov     [esp+5Ch+var_54], ebx
.text:00402E45                 mov     edx, [esp+5Ch+arg_10]
.text:00402E49                 jmp     short loc_402E22
.text:00402E4B ; ---------------------------------------------------------------------------
.text:00402E4B
.text:00402E4B loc_402E4B:                             ; CODE XREF: sub_402900+53F↑j
.text:00402E4B                 mov     dword ptr [esp+5Ch+var_50], ebx
.text:00402E4F                 mov     edx, [esp+5Ch+arg_10]
.text:00402E53                 mov     ebx, [esp+5Ch+arg_18]
.text:00402E57                 mov     [esp+5Ch+var_4C], esi
.text:00402E5B                 mov     esi, [esp+5Ch+var_30]
.text:00402E5F                 mov     [esp+5Ch+var_48], edi
.text:00402E63                 mov     [esp+5Ch+var_54], ebx
.text:00402E67                 mov     [esp+5Ch+ErrorMessage], edx
.text:00402E6B                 mov     [esp+5Ch+Format], esi ; Format
.text:00402E6E                 call    printf
.text:00402E73                 jmp     def_402A7B      ; jumptable 00402A7B default case, cases 66-68,72-87,89-96,98,104,106-110,112-114,116,118,119
.text:00402E78 ; ---------------------------------------------------------------------------
.text:00402E78
.text:00402E78 loc_402E78:                             ; CODE XREF: sub_402900+4BE↑j
.text:00402E78                 mov     [esp+5Ch+Format], offset aSExpectedANume ; "%s: expected a numeric value"
.text:00402E7F                 jmp     loc_402DCB
.text:00402E84 ; ---------------------------------------------------------------------------
.text:00402E84
.text:00402E84 loc_402E84:                             ; CODE XREF: sub_402900+4AE↑j
.text:00402E84                 call    _errno
.text:00402E89                 mov     [esp+5Ch+var_54], offset aS ; "%s"
.text:00402E91                 mov     ebp, [esp+5Ch+String]
.text:00402E95                 mov     dword ptr [esp+5Ch+var_50], ebp
.text:00402E99                 mov     ecx, [eax]
.text:00402E9B                 mov     [esp+5Ch+ErrorMessage], ecx
.text:00402E9F                 jmp     loc_402DE5
.text:00402EA4 ; ---------------------------------------------------------------------------
.text:00402EA4
.text:00402EA4 loc_402EA4:                             ; CODE XREF: sub_402900+464↑j
.text:00402EA4                                         ; sub_402900+46C↑j
.text:00402EA4                 mov     ecx, [esp+5Ch+String]
.text:00402EA8                 movzx   bp, byte ptr [ecx+1]
.text:00402EAD                 push    bp
.text:00402EAF                 mov     ebp, ecx
.text:00402EB1                 add     ebp, 2
.text:00402EB4                 fild    [esp+5Eh+var_5E]
.text:00402EB7                 add     esp, 2
.text:00402EBA                 fstp    [esp+5Ch+var_3C]
.text:00402EBE                 mov     ebx, dword ptr [esp+5Ch+var_3C]
.text:00402EC2                 mov     esi, dword ptr [esp+5Ch+var_3C+4]
.text:00402EC6                 cmp     byte ptr [ecx+2], 0
.text:00402ECA                 mov     edi, dword ptr [esp+5Ch+var_3C+8]
.text:00402ECE                 jz      loc_402DFB
.text:00402ED4                 cmp     ds:byte_40C010, 0
.text:00402EDB                 jnz     loc_402DFB
.text:00402EE1                 mov     [esp+5Ch+Format], offset aWarningSCharac ; "warning: %s: character(s) following cha"...
.text:00402EE8                 call    ds:libintl_gettext
.text:00402EEE                 mov     dword ptr [esp+5Ch+var_50], ebp ; char
.text:00402EF2                 mov     [esp+5Ch+ErrorMessage], 0 ; ErrorMessage
.text:00402EFA                 mov     [esp+5Ch+Format], 0 ; Code
.text:00402F01                 mov     [esp+5Ch+var_54], eax ; char *
.text:00402F05                 call    sub_406970
.text:00402F0A                 jmp     loc_402DFB
.text:00402F0A ; ---------------------------------------------------------------------------
.text:00402F0F                 align 10h
.text:00402F10
.text:00402F10 loc_402F10:                             ; CODE XREF: sub_402900+17B↑j
.text:00402F10                                         ; DATA XREF: sub_402900:jpt_402A7B↑o
.text:00402F10                 cmp     [esp+5Ch+var_2A], 0 ; jumptable 00402A7B case 115
.text:00402F15                 jnz     short loc_402F47
.text:00402F17                 cmp     [esp+5Ch+var_2B], 0
.text:00402F1C                 jnz     short loc_402F32
.text:00402F1E                 mov     edx, [esp+5Ch+String]
.text:00402F22                 mov     ebx, [esp+5Ch+var_30]
.text:00402F26                 mov     [esp+5Ch+ErrorMessage], edx
.text:00402F2A                 mov     [esp+5Ch+Format], ebx
.text:00402F2D                 jmp     loc_402D32
.text:00402F32 ; ---------------------------------------------------------------------------
.text:00402F32
.text:00402F32 loc_402F32:                             ; CODE XREF: sub_402900+61C↑j
.text:00402F32                 mov     ecx, [esp+5Ch+String]
.text:00402F36                 mov     ebp, [esp+5Ch+arg_18]
.text:00402F3A                 mov     [esp+5Ch+var_54], ecx
.text:00402F3E                 mov     [esp+5Ch+ErrorMessage], ebp
.text:00402F42                 jmp     loc_402C16
.text:00402F47 ; ---------------------------------------------------------------------------
.text:00402F47
.text:00402F47 loc_402F47:                             ; CODE XREF: sub_402900+615↑j
.text:00402F47                 cmp     [esp+5Ch+var_2B], 0
.text:00402F4C                 jnz     short loc_402F5B
.text:00402F4E                 mov     eax, [esp+5Ch+String]
.text:00402F52                 mov     [esp+5Ch+var_54], eax
.text:00402F56                 jmp     loc_402D47
.text:00402F5B ; ---------------------------------------------------------------------------
.text:00402F5B
.text:00402F5B loc_402F5B:                             ; CODE XREF: sub_402900+64C↑j
.text:00402F5B                 mov     edi, [esp+5Ch+String]
.text:00402F5F                 mov     ecx, [esp+5Ch+arg_18]
.text:00402F63                 mov     edx, [esp+5Ch+arg_10]
.text:00402F67                 mov     dword ptr [esp+5Ch+var_50], edi
.text:00402F6B                 mov     ebp, [esp+5Ch+var_30]
.text:00402F6F                 mov     [esp+5Ch+var_54], ecx
.text:00402F73                 mov     [esp+5Ch+ErrorMessage], edx
.text:00402F77                 mov     [esp+5Ch+Format], ebp
.text:00402F7A                 jmp     loc_402C5B
.text:00402F7F ; ---------------------------------------------------------------------------
.text:00402F7F
.text:00402F7F loc_402F7F:                             ; CODE XREF: sub_402900+17B↑j
.text:00402F7F                                         ; DATA XREF: sub_402900:jpt_402A7B↑o
.text:00402F7F                 mov     ebp, [esp+5Ch+String] ; jumptable 00402A7B cases 88,111,117,120
.text:00402F83                 movzx   eax, byte ptr [ebp+0]
.text:00402F87                 cmp     al, 22h ; '"'
.text:00402F89                 jz      loc_402CC5
.text:00402F8F                 cmp     al, 27h ; '''
.text:00402F91                 jz      loc_402CC5
.text:00402F97                 call    _errno
.text:00402F9C                 mov     dword ptr [eax], 0
.text:00402FA2                 lea     ebx, [esp+5Ch+var_24]
.text:00402FA6                 mov     eax, [esp+5Ch+String]
.text:00402FAA                 mov     [esp+5Ch+ErrorMessage], ebx ; EndPtr
.text:00402FAE                 mov     [esp+5Ch+var_54], 0 ; Radix
.text:00402FB6                 mov     [esp+5Ch+Format], eax ; String
.text:00402FB9                 call    _strtoull
.text:00402FBE                 mov     edi, [esp+5Ch+var_24]
.text:00402FC2                 jmp     loc_402BA6
.text:00402FC7 ; ---------------------------------------------------------------------------
.text:00402FC7
.text:00402FC7 loc_402FC7:                             ; CODE XREF: sub_402900+37↑j
.text:00402FC7                                         ; DATA XREF: sub_402900:jpt_402937↑o
.text:00402FC7                 mov     esi, offset asc_4028F7 ; jumptable 00402937 cases 65,69-71,97,101-103
.text:00402FCC                 mov     ebx, 1
.text:00402FD1                 jmp     loc_402A30
.text:00402FD6 ; ---------------------------------------------------------------------------
.text:00402FD6
.text:00402FD6 def_402937:                             ; CODE XREF: sub_402900+31↑j
.text:00402FD6                                         ; sub_402900+37↑j
.text:00402FD6                                         ; DATA XREF: ...
.text:00402FD6                 mov     esi, [esp+5Ch+arg_0] ; jumptable 00402937 default case, cases 66-68,72-87,89-96,98,99,104,106-110,112-116,118,119
.text:00402FDA                 xor     ebx, ebx
.text:00402FDC                 jmp     loc_402A30
.text:00402FDC sub_402900      endp
.text:00402FDC
.text:00402FE1 ; ---------------------------------------------------------------------------
.text:00402FE1                 jmp     short sub_402FF0
.text:00402FE1 ; ---------------------------------------------------------------------------
.text:00402FE3                 align 10h
.text:00402FF0
.text:00402FF0 ; =============== S U B R O U T I N E =======================================
.text:00402FF0
.text:00402FF0
.text:00402FF0 sub_402FF0      proc near               ; CODE XREF: sub_402550+2EA↑p
.text:00402FF0                                         ; .text:00402FE1↑j
.text:00402FF0
.text:00402FF0 Code            = dword ptr -0Ch
.text:00402FF0 File            = dword ptr -8
.text:00402FF0 var_4           = dword ptr -4
.text:00402FF0 arg_0           = byte ptr  4
.text:00402FF0
.text:00402FF0                 sub     esp, 0Ch
.text:00402FF3                 movzx   ecx, [esp+0Ch+arg_0]
.text:00402FF8                 mov     [esp+0Ch+var_4], ebx
.text:00402FFC                 movsx   ebx, cl
.text:00402FFF                 lea     eax, [ebx-61h]  ; switch 22 cases
.text:00403002                 cmp     eax, 15h
.text:00403005                 ja      def_40300B      ; jumptable 0040300B default case, cases 100,101,103-109,111-113,115,117
.text:0040300B                 jmp     ds:jpt_40300B[eax*4] ; switch jump
.text:0040300B ; ---------------------------------------------------------------------------
.text:00403012                 align 4
.text:00403014 jpt_40300B      dd offset loc_40306C    ; DATA XREF: sub_402FF0+1B↑r
.text:00403014                 dd offset loc_4030B6    ; jump table for switch statement
.text:00403014                 dd offset loc_4031F6
.text:00403014                 dd offset def_40300B
.text:00403014                 dd offset def_40300B
.text:00403014                 dd offset loc_4030EA
.text:00403014                 dd offset def_40300B
.text:00403014                 dd offset def_40300B
.text:00403014                 dd offset def_40300B
.text:00403014                 dd offset def_40300B
.text:00403014                 dd offset def_40300B
.text:00403014                 dd offset def_40300B
.text:00403014                 dd offset def_40300B
.text:00403014                 dd offset loc_403111
.text:00403014                 dd offset def_40300B
.text:00403014                 dd offset def_40300B
.text:00403014                 dd offset def_40300B
.text:00403014                 dd offset loc_40313B
.text:00403014                 dd offset def_40300B
.text:00403014                 dd offset loc_403168
.text:00403014                 dd offset def_40300B
.text:00403014                 dd offset loc_4031C9
.text:0040306C ; ---------------------------------------------------------------------------
.text:0040306C
.text:0040306C loc_40306C:                             ; CODE XREF: sub_402FF0+1B↑j
.text:0040306C                                         ; DATA XREF: sub_402FF0:jpt_40300B↑o
.text:0040306C                 mov     edx, ds:_iob    ; jumptable 0040300B case 97
.text:00403072                 mov     ecx, [edx+24h]
.text:00403075                 dec     ecx
.text:00403076                 mov     [edx+24h], ecx
.text:00403079                 test    ecx, ecx
.text:0040307B                 js      short loc_40309B
.text:0040307D                 mov     eax, ds:_iob
.text:00403082                 mov     ecx, [eax+20h]
.text:00403085                 mov     byte ptr [ecx], 7
.text:00403088                 nop
.text:00403089                 lea     esi, [esi+0]
.text:00403090
.text:00403090 loc_403090:                             ; CODE XREF: sub_402FF0+E2↓j
.text:00403090                                         ; sub_402FF0+116↓j ...
.text:00403090                 inc     dword ptr [eax+20h]
.text:00403093
.text:00403093 loc_403093:                             ; CODE XREF: sub_402FF0+C4↓j
.text:00403093                 mov     ebx, [esp+0Ch+var_4]
.text:00403097                 add     esp, 0Ch
.text:0040309A                 retn
.text:0040309B ; ---------------------------------------------------------------------------
.text:0040309B
.text:0040309B loc_40309B:                             ; CODE XREF: sub_402FF0+8B↑j
.text:0040309B                 mov     [esp+0Ch+Code], 7 ; Ch
.text:004030A2
.text:004030A2 loc_4030A2:                             ; CODE XREF: sub_402FF0+11F↓j
.text:004030A2                                         ; sub_402FF0+173↓j ...
.text:004030A2                 mov     ebx, ds:_iob
.text:004030A8                 add     ebx, 20h ; ' '
.text:004030AB                 mov     [esp+0Ch+File], ebx ; File
.text:004030AF
.text:004030AF loc_4030AF:                             ; CODE XREF: sub_402FF0+F8↓j
.text:004030AF                                         ; sub_402FF0+1D4↓j
.text:004030AF                 call    _flsbuf
.text:004030B4                 jmp     short loc_403093
.text:004030B6 ; ---------------------------------------------------------------------------
.text:004030B6
.text:004030B6 loc_4030B6:                             ; CODE XREF: sub_402FF0+1B↑j
.text:004030B6                                         ; DATA XREF: sub_402FF0:jpt_40300B↑o
.text:004030B6                 mov     edx, ds:_iob    ; jumptable 0040300B case 98
.text:004030BC                 mov     ecx, [edx+24h]
.text:004030BF                 dec     ecx
.text:004030C0                 mov     [edx+24h], ecx
.text:004030C3                 test    ecx, ecx
.text:004030C5                 js      short loc_4030D4
.text:004030C7                 mov     eax, ds:_iob
.text:004030CC                 mov     ebx, [eax+20h]
.text:004030CF                 mov     byte ptr [ebx], 8
.text:004030D2                 jmp     short loc_403090
.text:004030D4 ; ---------------------------------------------------------------------------
.text:004030D4
.text:004030D4 loc_4030D4:                             ; CODE XREF: sub_402FF0+D5↑j
.text:004030D4                 mov     [esp+0Ch+Code], 8
.text:004030DB
.text:004030DB loc_4030DB:                             ; CODE XREF: sub_402FF0+149↓j
.text:004030DB                                         ; sub_402FF0+1A0↓j
.text:004030DB                 mov     ecx, ds:_iob
.text:004030E1                 add     ecx, 20h ; ' '
.text:004030E4                 mov     [esp+0Ch+File], ecx
.text:004030E8                 jmp     short loc_4030AF
.text:004030EA ; ---------------------------------------------------------------------------
.text:004030EA
.text:004030EA loc_4030EA:                             ; CODE XREF: sub_402FF0+1B↑j
.text:004030EA                                         ; DATA XREF: sub_402FF0:jpt_40300B↑o
.text:004030EA                 mov     edx, ds:_iob    ; jumptable 0040300B case 102
.text:004030F0                 mov     ebx, [edx+24h]
.text:004030F3                 dec     ebx
.text:004030F4                 mov     [edx+24h], ebx
.text:004030F7                 test    ebx, ebx
.text:004030F9                 js      short loc_403108
.text:004030FB                 mov     eax, ds:_iob
.text:00403100                 mov     ecx, [eax+20h]
.text:00403103                 mov     byte ptr [ecx], 0Ch
.text:00403106                 jmp     short loc_403090
.text:00403108 ; ---------------------------------------------------------------------------
.text:00403108
.text:00403108 loc_403108:                             ; CODE XREF: sub_402FF0+109↑j
.text:00403108                 mov     [esp+0Ch+Code], 0Ch
.text:0040310F                 jmp     short loc_4030A2
.text:00403111 ; ---------------------------------------------------------------------------
.text:00403111
.text:00403111 loc_403111:                             ; CODE XREF: sub_402FF0+1B↑j
.text:00403111                                         ; DATA XREF: sub_402FF0:jpt_40300B↑o
.text:00403111                 mov     edx, ds:_iob    ; jumptable 0040300B case 110
.text:00403117                 mov     ecx, [edx+24h]
.text:0040311A                 dec     ecx
.text:0040311B                 mov     [edx+24h], ecx
.text:0040311E                 test    ecx, ecx
.text:00403120                 js      short loc_403132
.text:00403122                 mov     eax, ds:_iob
.text:00403127                 mov     ebx, [eax+20h]
.text:0040312A                 mov     byte ptr [ebx], 0Ah
.text:0040312D                 jmp     loc_403090
.text:00403132 ; ---------------------------------------------------------------------------
.text:00403132
.text:00403132 loc_403132:                             ; CODE XREF: sub_402FF0+130↑j
.text:00403132                 mov     [esp+0Ch+Code], 0Ah
.text:00403139                 jmp     short loc_4030DB
.text:0040313B ; ---------------------------------------------------------------------------
.text:0040313B
.text:0040313B loc_40313B:                             ; CODE XREF: sub_402FF0+1B↑j
.text:0040313B                                         ; DATA XREF: sub_402FF0:jpt_40300B↑o
.text:0040313B                 mov     edx, ds:_iob    ; jumptable 0040300B case 114
.text:00403141                 mov     ebx, [edx+24h]
.text:00403144                 dec     ebx
.text:00403145                 mov     [edx+24h], ebx
.text:00403148                 test    ebx, ebx
.text:0040314A                 js      short loc_40315C
.text:0040314C                 mov     eax, ds:_iob
.text:00403151                 mov     ecx, [eax+20h]
.text:00403154                 mov     byte ptr [ecx], 0Dh
.text:00403157                 jmp     loc_403090
.text:0040315C ; ---------------------------------------------------------------------------
.text:0040315C
.text:0040315C loc_40315C:                             ; CODE XREF: sub_402FF0+15A↑j
.text:0040315C                 mov     [esp+0Ch+Code], 0Dh
.text:00403163                 jmp     loc_4030A2
.text:00403168 ; ---------------------------------------------------------------------------
.text:00403168
.text:00403168 loc_403168:                             ; CODE XREF: sub_402FF0+1B↑j
.text:00403168                                         ; DATA XREF: sub_402FF0:jpt_40300B↑o
.text:00403168                 mov     edx, ds:_iob    ; jumptable 0040300B case 116
.text:0040316E                 mov     ecx, [edx+24h]
.text:00403171                 dec     ecx
.text:00403172                 mov     [edx+24h], ecx
.text:00403175                 test    ecx, ecx
.text:00403177                 js      short loc_403189
.text:00403179                 mov     eax, ds:_iob
.text:0040317E                 mov     ebx, [eax+20h]
.text:00403181                 mov     byte ptr [ebx], 9
.text:00403184                 jmp     loc_403090
.text:00403189 ; ---------------------------------------------------------------------------
.text:00403189
.text:00403189 loc_403189:                             ; CODE XREF: sub_402FF0+187↑j
.text:00403189                 mov     [esp+0Ch+Code], 9
.text:00403190                 jmp     loc_4030DB
.text:00403195 ; ---------------------------------------------------------------------------
.text:00403195
.text:00403195 def_40300B:                             ; CODE XREF: sub_402FF0+15↑j
.text:00403195                                         ; sub_402FF0+1B↑j
.text:00403195                                         ; DATA XREF: ...
.text:00403195                 mov     eax, ds:_iob    ; jumptable 0040300B default case, cases 100,101,103-109,111-113,115,117
.text:0040319A                 mov     edx, [eax+24h]
.text:0040319D                 dec     edx
.text:0040319E                 mov     [eax+24h], edx
.text:004031A1                 test    edx, edx
.text:004031A3                 js      short loc_4031B4
.text:004031A5                 mov     eax, ds:_iob
.text:004031AA                 mov     ebx, [eax+20h]
.text:004031AD                 mov     [ebx], cl
.text:004031AF                 jmp     loc_403090
.text:004031B4 ; ---------------------------------------------------------------------------
.text:004031B4
.text:004031B4 loc_4031B4:                             ; CODE XREF: sub_402FF0+1B3↑j
.text:004031B4                 mov     [esp+0Ch+Code], ebx
.text:004031B7                 mov     edx, ds:_iob
.text:004031BD                 add     edx, 20h ; ' '
.text:004031C0                 mov     [esp+0Ch+File], edx
.text:004031C4                 jmp     loc_4030AF
.text:004031C9 ; ---------------------------------------------------------------------------
.text:004031C9
.text:004031C9 loc_4031C9:                             ; CODE XREF: sub_402FF0+1B↑j
.text:004031C9                                         ; DATA XREF: sub_402FF0:jpt_40300B↑o
.text:004031C9                 mov     edx, ds:_iob    ; jumptable 0040300B case 118
.text:004031CF                 mov     ebx, [edx+24h]
.text:004031D2                 dec     ebx
.text:004031D3                 mov     [edx+24h], ebx
.text:004031D6                 test    ebx, ebx
.text:004031D8                 js      short loc_4031EA
.text:004031DA                 mov     eax, ds:_iob
.text:004031DF                 mov     ecx, [eax+20h]
.text:004031E2                 mov     byte ptr [ecx], 0Bh
.text:004031E5                 jmp     loc_403090
.text:004031EA ; ---------------------------------------------------------------------------
.text:004031EA
.text:004031EA loc_4031EA:                             ; CODE XREF: sub_402FF0+1E8↑j
.text:004031EA                 mov     [esp+0Ch+Code], 0Bh
.text:004031F1                 jmp     loc_4030A2
.text:004031F6 ; ---------------------------------------------------------------------------
.text:004031F6
.text:004031F6 loc_4031F6:                             ; CODE XREF: sub_402FF0+1B↑j
.text:004031F6                                         ; DATA XREF: sub_402FF0:jpt_40300B↑o
.text:004031F6                 mov     [esp+0Ch+Code], 0 ; jumptable 0040300B case 99
.text:004031FD                 call    exit
.text:004031FD sub_402FF0      endp
.text:004031FD
.text:004031FD ; ---------------------------------------------------------------------------
.text:00403202                 align 20h
.text:00403220 aHelp           db 'help',0
.text:00403225 aVersion        db 'version',0          ; DATA XREF: .text:00403250↓o
.text:0040322D                 align 20h
.text:00403240
.text:00403240 loc_403240:                             ; DATA XREF: sub_403280+3D↓o
.text:00403240                 and     [edx], dh
.text:00403242                 inc     eax
.text:00403242 ; ---------------------------------------------------------------------------
.text:00403243                 db 0
.text:00403244                 dd 2 dup(0)
.text:0040324C                 dd 68h
.text:00403250                 dd offset aVersion      ; "version"
.text:00403254                 dd 2 dup(0)
.text:0040325C                 dd 76h, 4 dup(0)
.text:00403270 ; ---------------------------------------------------------------------------
.text:00403270
.text:00403270 loc_403270:                             ; DATA XREF: sub_403280+45↓o
.text:00403270                 sub     eax, [eax]
.text:00403272                 lea     esi, [esi+0]
.text:00403279                 lea     edi, [edi+0]
.text:00403280
.text:00403280 ; =============== S U B R O U T I N E =======================================
.text:00403280
.text:00403280
.text:00403280 ; int __cdecl sub_403280(int, int, FILE *, int, int, int, char)
.text:00403280 sub_403280      proc near               ; CODE XREF: sub_4013E0+BF↑p
.text:00403280
.text:00403280 Code            = dword ptr -1Ch
.text:00403280 var_18          = dword ptr -18h
.text:00403280 var_14          = dword ptr -14h
.text:00403280 var_10          = dword ptr -10h
.text:00403280 var_C           = dword ptr -0Ch
.text:00403280 var_4           = dword ptr -4
.text:00403280 arg_0           = dword ptr  4
.text:00403280 arg_4           = dword ptr  8
.text:00403280 arg_8           = dword ptr  0Ch
.text:00403280 arg_C           = dword ptr  10h
.text:00403280 arg_10          = dword ptr  14h
.text:00403280 arg_14          = dword ptr  18h
.text:00403280 arg_18          = byte ptr  1Ch
.text:00403280
.text:00403280                 sub     esp, 1Ch
.text:00403283                 xor     eax, eax
.text:00403285                 cmp     [esp+1Ch+arg_0], 2
.text:0040328A                 mov     [esp+1Ch+var_4], ebx
.text:0040328E                 mov     ebx, dword_40B014
.text:00403294                 mov     dword_40B014, eax
.text:00403299                 jz      short loc_4032B1
.text:0040329B
.text:0040329B loc_40329B:                             ; CODE XREF: sub_403280+60↓j
.text:0040329B                                         ; sub_403280+6A↓j
.text:0040329B                 mov     dword_40B014, ebx
.text:004032A1                 xor     edx, edx
.text:004032A3                 mov     ebx, [esp+1Ch+var_4]
.text:004032A7                 mov     dword_40B010, edx
.text:004032AD                 add     esp, 1Ch
.text:004032B0                 retn
.text:004032B1 ; ---------------------------------------------------------------------------
.text:004032B1
.text:004032B1 loc_4032B1:                             ; CODE XREF: sub_403280+19↑j
.text:004032B1                 mov     [esp+1Ch+var_C], 0 ; int
.text:004032B9                 mov     edx, [esp+1Ch+arg_4]
.text:004032BD                 mov     [esp+1Ch+var_10], offset loc_403240 ; int
.text:004032C5                 mov     [esp+1Ch+var_14], offset loc_403270 ; char *
.text:004032CD                 mov     [esp+1Ch+var_18], edx ; int
.text:004032D1                 mov     [esp+1Ch+Code], 2 ; int
.text:004032D8                 call    sub_4051E0
.text:004032DD                 cmp     eax, 0FFFFFFFFh
.text:004032E0                 jz      short loc_40329B
.text:004032E2                 cmp     eax, 68h ; 'h'
.text:004032E5                 jz      short loc_4032EE
.text:004032E7                 cmp     eax, 76h ; 'v'
.text:004032EA                 jnz     short loc_40329B
.text:004032EC                 jmp     short loc_4032F9
.text:004032EE ; ---------------------------------------------------------------------------
.text:004032EE
.text:004032EE loc_4032EE:                             ; CODE XREF: sub_403280+65↑j
.text:004032EE                 mov     [esp+1Ch+Code], 0
.text:004032F5                 call    [esp+1Ch+arg_14]
.text:004032F9
.text:004032F9 loc_4032F9:                             ; CODE XREF: sub_403280+6C↑j
.text:004032F9                 mov     ecx, [esp+1Ch+arg_10]
.text:004032FD                 lea     ebx, [esp+1Ch+arg_18]
.text:00403301                 mov     edx, [esp+1Ch+arg_C]
.text:00403305                 mov     [esp+1Ch+var_C], ebx ; va_list
.text:00403309                 mov     ebx, [esp+1Ch+arg_8]
.text:0040330D                 mov     [esp+1Ch+var_10], ecx ; int
.text:00403311                 mov     ecx, ds:_iob
.text:00403317                 mov     [esp+1Ch+var_14], edx ; int
.text:0040331B                 mov     [esp+1Ch+var_18], ebx ; FILE *
.text:0040331F                 add     ecx, 20h ; ' '
.text:00403322                 mov     [esp+1Ch+Code], ecx ; FILE *
.text:00403325                 call    sub_404FD0
.text:0040332A                 mov     [esp+1Ch+Code], 0 ; Code
.text:00403331                 call    exit
.text:00403331 sub_403280      endp
.text:00403331
.text:00403331 ; ---------------------------------------------------------------------------
.text:00403336                 align 10h
.text:00403340                 mov     edx, [esp+4]
.text:00403344                 mov     ds:dword_40C020, edx
.text:0040334A                 retn
.text:0040334A ; ---------------------------------------------------------------------------
.text:0040334B aWriteError     db 'write error',0      ; DATA XREF: sub_403370:loc_4033B9↓o
.text:00403357 ; const char aSS_0[]
.text:00403357 aSS_0           db '%s: %s',0           ; DATA XREF: sub_403370+77↓o
.text:0040335E ; const char aS_3[]
.text:0040335E aS_3            db '%s',0               ; DATA XREF: sub_403370+A0↓o
.text:00403361 ; ---------------------------------------------------------------------------
.text:00403361                 jmp     short sub_403370
.text:00403361 ; ---------------------------------------------------------------------------
.text:00403363                 align 10h
.text:00403370
.text:00403370 ; =============== S U B R O U T I N E =======================================
.text:00403370
.text:00403370
.text:00403370 ; void __cdecl sub_403370()
.text:00403370 sub_403370      proc near               ; CODE XREF: .text:00403361↑j
.text:00403370                                         ; DATA XREF: sub_4013E0+5C↑o
.text:00403370
.text:00403370 Stream          = dword ptr -2Ch
.text:00403370 ErrorMessage    = dword ptr -28h
.text:00403370 var_24          = dword ptr -24h
.text:00403370 var_20          = byte ptr -20h
.text:00403370 var_1C          = dword ptr -1Ch
.text:00403370 var_9           = byte ptr -9
.text:00403370
.text:00403370                 push    esi
.text:00403371                 push    ebx
.text:00403372                 sub     esp, 24h
.text:00403375                 mov     edx, ds:_iob
.text:0040337B                 mov     ecx, [edx+2Ch]
.text:0040337E                 lea     esi, [edx+20h]
.text:00403381                 shr     ecx, 5
.text:00403384                 mov     bl, cl
.text:00403386                 mov     ecx, [edx+20h]
.text:00403389                 and     bl, 1
.text:0040338C                 cmp     ecx, [esi+8]
.text:0040338F                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00403392                 setz    [esp+2Ch+var_9]
.text:00403397                 call    fclose
.text:0040339C                 test    eax, eax
.text:0040339E                 setnz   al
.text:004033A1                 test    bl, bl
.text:004033A3                 jnz     loc_403433
.text:004033A9                 test    al, al
.text:004033AB                 jz      short loc_403400
.text:004033AD
.text:004033AD loc_4033AD:                             ; CODE XREF: sub_403370+CD↓j
.text:004033AD                 call    _errno
.text:004033B2                 mov     esi, [eax]
.text:004033B4
.text:004033B4 loc_4033B4:                             ; CODE XREF: sub_403370+C7↓j
.text:004033B4                 cmp     esi, 9
.text:004033B7                 jz      short loc_403426
.text:004033B9
.text:004033B9 loc_4033B9:                             ; CODE XREF: sub_403370+B8↓j
.text:004033B9                                         ; sub_403370+C1↓j
.text:004033B9                 mov     [esp+2Ch+Stream], offset aWriteError ; "write error"
.text:004033C0                 call    ds:libintl_gettext
.text:004033C6                 mov     ebx, eax
.text:004033C8                 mov     eax, ds:dword_40C020
.text:004033CD                 test    eax, eax
.text:004033CF                 jz      short loc_403406
.text:004033D1                 mov     [esp+2Ch+Stream], eax ; char *
.text:004033D4                 call    sub_406450
.text:004033D9                 mov     dword ptr [esp+2Ch+var_20], eax ; char
.text:004033DD                 mov     edx, Code
.text:004033E3                 mov     [esp+2Ch+var_1C], ebx
.text:004033E7                 mov     [esp+2Ch+var_24], offset aSS_0 ; "%s: %s"
.text:004033EF                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:004033F3                 mov     [esp+2Ch+Stream], edx ; Code
.text:004033F6                 call    sub_406970
.text:004033FB                 nop
.text:004033FC                 lea     esi, [esi+0]
.text:00403400
.text:00403400 loc_403400:                             ; CODE XREF: sub_403370+3B↑j
.text:00403400                                         ; sub_403370+B4↓j ...
.text:00403400                 add     esp, 24h
.text:00403403                 pop     ebx
.text:00403404                 pop     esi
.text:00403405                 retn
.text:00403406 ; ---------------------------------------------------------------------------
.text:00403406
.text:00403406 loc_403406:                             ; CODE XREF: sub_403370+5F↑j
.text:00403406                 mov     dword ptr [esp+2Ch+var_20], ebx ; char
.text:0040340A                 mov     ebx, Code
.text:00403410                 mov     [esp+2Ch+var_24], offset aS_3 ; "%s"
.text:00403418                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:0040341C                 mov     [esp+2Ch+Stream], ebx ; Code
.text:0040341F                 call    sub_406970
.text:00403424                 jmp     short loc_403400
.text:00403426 ; ---------------------------------------------------------------------------
.text:00403426
.text:00403426 loc_403426:                             ; CODE XREF: sub_403370+47↑j
.text:00403426                 test    bl, bl
.text:00403428                 jnz     short loc_4033B9
.text:0040342A                 cmp     [esp+2Ch+var_9], 0
.text:0040342F                 jnz     short loc_403400
.text:00403431                 jmp     short loc_4033B9
.text:00403433 ; ---------------------------------------------------------------------------
.text:00403433
.text:00403433 loc_403433:                             ; CODE XREF: sub_403370+33↑j
.text:00403433                 xor     esi, esi
.text:00403435                 test    al, al
.text:00403437                 jz      loc_4033B4
.text:0040343D                 jmp     loc_4033AD
.text:0040343D sub_403370      endp
.text:0040343D
.text:0040343D ; ---------------------------------------------------------------------------
.text:00403442                 align 10h
.text:00403450                 sub     esp, 0Ch
.text:00403453                 xor     edx, edx
.text:00403455                 mov     ecx, [esp+14h]
.text:00403459                 mov     [esp+8], ebx
.text:0040345D                 mov     eax, 0FFFFFFFFh
.text:00403462                 mov     ebx, [esp+10h]
.text:00403466                 div     ecx
.text:00403468                 cmp     eax, ebx
.text:0040346A                 jb      short loc_403489
.text:0040346C                 mov     edx, ebx
.text:0040346E                 imul    edx, ecx
.text:00403471                 mov     [esp], edx
.text:00403474                 call    malloc
.text:00403479                 test    eax, eax
.text:0040347B                 jz      short loc_403485
.text:0040347D
.text:0040347D loc_40347D:                             ; CODE XREF: .text:00403487↓j
.text:0040347D                 mov     ebx, [esp+8]
.text:00403481                 add     esp, 0Ch
.text:00403484                 retn
.text:00403485 ; ---------------------------------------------------------------------------
.text:00403485
.text:00403485 loc_403485:                             ; CODE XREF: .text:0040347B↑j
.text:00403485                 test    ebx, ebx
.text:00403487                 jz      short loc_40347D
.text:00403489
.text:00403489 loc_403489:                             ; CODE XREF: .text:0040346A↑j
.text:00403489                 call    sub_4066E0
.text:00403489 ; ---------------------------------------------------------------------------
.text:0040348E                 align 10h
.text:00403490
.text:00403490 ; =============== S U B R O U T I N E =======================================
.text:00403490
.text:00403490
.text:00403490 ; int __cdecl sub_403490(size_t)
.text:00403490 sub_403490      proc near               ; CODE XREF: sub_402900+137↑p
.text:00403490                                         ; .text:00405E29↓p ...
.text:00403490
.text:00403490 Size            = dword ptr -0Ch
.text:00403490 var_4           = dword ptr -4
.text:00403490 arg_0           = dword ptr  4
.text:00403490
.text:00403490                 sub     esp, 0Ch
.text:00403493                 mov     [esp+0Ch+var_4], ebx
.text:00403497                 mov     ebx, [esp+0Ch+arg_0]
.text:0040349B                 mov     [esp+0Ch+Size], ebx ; Size
.text:0040349E                 call    malloc
.text:004034A3                 test    eax, eax
.text:004034A5                 jz      short loc_4034B0
.text:004034A7
.text:004034A7 loc_4034A7:                             ; CODE XREF: sub_403490+22↓j
.text:004034A7                 mov     ebx, [esp+0Ch+var_4]
.text:004034AB                 add     esp, 0Ch
.text:004034AE                 retn
.text:004034AE ; ---------------------------------------------------------------------------
.text:004034AF                 align 10h
.text:004034B0
.text:004034B0 loc_4034B0:                             ; CODE XREF: sub_403490+15↑j
.text:004034B0                 test    ebx, ebx
.text:004034B2                 jz      short loc_4034A7
.text:004034B4                 call    sub_4066E0
.text:004034B4 sub_403490      endp
.text:004034B4
.text:004034B4 ; ---------------------------------------------------------------------------
.text:004034B9                 align 10h
.text:004034C0                 sub     esp, 1Ch
.text:004034C3                 xor     edx, edx
.text:004034C5                 mov     eax, 0FFFFFFFFh
.text:004034CA                 mov     [esp+14h], ebx
.text:004034CE                 mov     ecx, [esp+20h]
.text:004034D2                 mov     ebx, [esp+28h]
.text:004034D6                 mov     [esp+18h], esi
.text:004034DA                 mov     esi, [esp+24h]
.text:004034DE                 div     ebx
.text:004034E0                 cmp     eax, esi
.text:004034E2                 jb      short loc_403514
.text:004034E4                 mov     [esp], ecx
.text:004034E7                 mov     edx, esi
.text:004034E9                 imul    edx, ebx
.text:004034EC                 mov     [esp+4], edx
.text:004034F0                 call    realloc
.text:004034F5                 test    eax, eax
.text:004034F7                 mov     ecx, eax
.text:004034F9                 jz      short loc_403510
.text:004034FB
.text:004034FB loc_4034FB:                             ; CODE XREF: .text:00403512↓j
.text:004034FB                 mov     ebx, [esp+14h]
.text:004034FF                 mov     eax, ecx
.text:00403501                 mov     esi, [esp+18h]
.text:00403505                 add     esp, 1Ch
.text:00403508                 retn
.text:00403508 ; ---------------------------------------------------------------------------
.text:00403509                 align 10h
.text:00403510
.text:00403510 loc_403510:                             ; CODE XREF: .text:004034F9↑j
.text:00403510                 test    esi, esi
.text:00403512                 jz      short loc_4034FB
.text:00403514
.text:00403514 loc_403514:                             ; CODE XREF: .text:004034E2↑j
.text:00403514                 call    sub_4066E0
.text:00403514 ; ---------------------------------------------------------------------------
.text:00403519                 align 10h
.text:00403520
.text:00403520 ; =============== S U B R O U T I N E =======================================
.text:00403520
.text:00403520
.text:00403520 ; int __cdecl sub_403520(void *, size_t)
.text:00403520 sub_403520      proc near               ; CODE XREF: sub_4064F0+5B↓p
.text:00403520
.text:00403520 Block           = dword ptr -0Ch
.text:00403520 Size            = dword ptr -8
.text:00403520 var_4           = dword ptr -4
.text:00403520 arg_0           = dword ptr  4
.text:00403520 arg_4           = dword ptr  8
.text:00403520
.text:00403520                 sub     esp, 0Ch
.text:00403523                 mov     edx, [esp+0Ch+arg_0]
.text:00403527                 mov     [esp+0Ch+var_4], ebx
.text:0040352B                 mov     ebx, [esp+0Ch+arg_4]
.text:0040352F                 mov     [esp+0Ch+Block], edx ; Block
.text:00403532                 mov     [esp+0Ch+Size], ebx ; Size
.text:00403536                 call    realloc
.text:0040353B                 test    eax, eax
.text:0040353D                 jz      short loc_403547
.text:0040353F
.text:0040353F loc_40353F:                             ; CODE XREF: sub_403520+29↓j
.text:0040353F                 mov     ebx, [esp+0Ch+var_4]
.text:00403543                 add     esp, 0Ch
.text:00403546                 retn
.text:00403547 ; ---------------------------------------------------------------------------
.text:00403547
.text:00403547 loc_403547:                             ; CODE XREF: sub_403520+1D↑j
.text:00403547                 test    ebx, ebx
.text:00403549                 jz      short loc_40353F
.text:0040354B                 call    sub_4066E0
.text:0040354B sub_403520      endp
.text:0040354B
.text:00403550 ; ---------------------------------------------------------------------------
.text:00403550                 jmp     sub_4036A0
.text:00403550 ; ---------------------------------------------------------------------------
.text:00403555                 align 10h
.text:00403560                 sub     esp, 0Ch
.text:00403563                 mov     edx, [esp+14h]
.text:00403567                 mov     dword ptr [esp+8], 1
.text:0040356F                 mov     [esp+4], edx
.text:00403573                 mov     edx, [esp+10h]
.text:00403577                 mov     [esp], edx
.text:0040357A                 call    sub_4036A0
.text:0040357F                 add     esp, 0Ch
.text:00403582                 retn
.text:00403582 ; ---------------------------------------------------------------------------
.text:00403583                 align 10h
.text:00403590                 sub     esp, 1Ch
.text:00403593                 mov     [esp+18h], ebx
.text:00403597                 mov     ebx, [esp+20h]
.text:0040359B                 mov     [esp], ebx
.text:0040359E                 call    malloc
.text:004035A3                 test    eax, eax
.text:004035A5                 jz      short loc_4035C3
.text:004035A7
.text:004035A7 loc_4035A7:                             ; CODE XREF: .text:004035C5↓j
.text:004035A7                 mov     [esp+8], ebx
.text:004035AB                 mov     dword ptr [esp+4], 0
.text:004035B3                 mov     [esp], eax
.text:004035B6                 call    memset
.text:004035BB                 mov     ebx, [esp+18h]
.text:004035BF                 add     esp, 1Ch
.text:004035C2                 retn
.text:004035C3 ; ---------------------------------------------------------------------------
.text:004035C3
.text:004035C3 loc_4035C3:                             ; CODE XREF: .text:004035A5↑j
.text:004035C3                 test    ebx, ebx
.text:004035C5                 jz      short loc_4035A7
.text:004035C7                 call    sub_4066E0
.text:004035C7 ; ---------------------------------------------------------------------------
.text:004035CC                 align 10h
.text:004035D0                 sub     esp, 0Ch
.text:004035D3                 xor     edx, edx
.text:004035D5                 mov     ecx, [esp+14h]
.text:004035D9                 mov     [esp+8], ebx
.text:004035DD                 mov     eax, 0FFFFFFFFh
.text:004035E2                 mov     ebx, [esp+10h]
.text:004035E6                 div     ecx
.text:004035E8                 cmp     eax, ebx
.text:004035EA                 jb      short loc_403608
.text:004035EC                 mov     [esp+4], ecx
.text:004035F0                 mov     [esp], ebx
.text:004035F3                 call    calloc
.text:004035F8                 test    eax, eax
.text:004035FA                 jz      short loc_403604
.text:004035FC
.text:004035FC loc_4035FC:                             ; CODE XREF: .text:00403606↓j
.text:004035FC                 mov     ebx, [esp+8]
.text:00403600                 add     esp, 0Ch
.text:00403603                 retn
.text:00403604 ; ---------------------------------------------------------------------------
.text:00403604
.text:00403604 loc_403604:                             ; CODE XREF: .text:004035FA↑j
.text:00403604                 test    ebx, ebx
.text:00403606                 jz      short loc_4035FC
.text:00403608
.text:00403608 loc_403608:                             ; CODE XREF: .text:004035EA↑j
.text:00403608                 call    sub_4066E0
.text:00403608 ; ---------------------------------------------------------------------------
.text:0040360D                 align 10h
.text:00403610                 sub     esp, 1Ch
.text:00403613                 mov     [esp+18h], ebx
.text:00403617                 mov     ebx, [esp+24h]
.text:0040361B                 mov     [esp], ebx
.text:0040361E                 call    malloc
.text:00403623                 test    eax, eax
.text:00403625                 mov     edx, eax
.text:00403627                 jz      short loc_403645
.text:00403629
.text:00403629 loc_403629:                             ; CODE XREF: .text:00403647↓j
.text:00403629                 mov     [esp+8], ebx
.text:0040362D                 mov     ecx, [esp+20h]
.text:00403631                 mov     [esp], edx
.text:00403634                 mov     [esp+4], ecx
.text:00403638                 call    memcpy
.text:0040363D                 mov     ebx, [esp+18h]
.text:00403641                 add     esp, 1Ch
.text:00403644                 retn
.text:00403645 ; ---------------------------------------------------------------------------
.text:00403645
.text:00403645 loc_403645:                             ; CODE XREF: .text:00403627↑j
.text:00403645                 test    ebx, ebx
.text:00403647                 jz      short loc_403629
.text:00403649                 call    sub_4066E0
.text:00403649 ; ---------------------------------------------------------------------------
.text:0040364E                 align 10h
.text:00403650
.text:00403650 ; =============== S U B R O U T I N E =======================================
.text:00403650
.text:00403650
.text:00403650 ; int __cdecl sub_403650(char *)
.text:00403650 sub_403650      proc near               ; CODE XREF: sub_403C10+30↓p
.text:00403650
.text:00403650 Str             = dword ptr -1Ch
.text:00403650 Src             = dword ptr -18h
.text:00403650 Size            = dword ptr -14h
.text:00403650 var_8           = dword ptr -8
.text:00403650 var_4           = dword ptr -4
.text:00403650 arg_0           = dword ptr  4
.text:00403650
.text:00403650                 sub     esp, 1Ch
.text:00403653                 mov     [esp+1Ch+var_4], esi
.text:00403657                 mov     esi, [esp+1Ch+arg_0]
.text:0040365B                 mov     [esp+1Ch+var_8], ebx
.text:0040365F                 mov     [esp+1Ch+Str], esi ; Str
.text:00403662                 call    strlen
.text:00403667                 lea     ebx, [eax+1]
.text:0040366A                 mov     [esp+1Ch+Str], ebx ; Size
.text:0040366D                 call    malloc
.text:00403672                 test    eax, eax
.text:00403674                 jz      short loc_403692
.text:00403676
.text:00403676 loc_403676:                             ; CODE XREF: sub_403650+44↓j
.text:00403676                 mov     [esp+1Ch+Size], ebx ; Size
.text:0040367A                 mov     [esp+1Ch+Src], esi ; Src
.text:0040367E                 mov     [esp+1Ch+Str], eax ; void *
.text:00403681                 call    memcpy
.text:00403686                 mov     ebx, [esp+1Ch+var_8]
.text:0040368A                 mov     esi, [esp+1Ch+var_4]
.text:0040368E                 add     esp, 1Ch
.text:00403691                 retn
.text:00403692 ; ---------------------------------------------------------------------------
.text:00403692
.text:00403692 loc_403692:                             ; CODE XREF: sub_403650+24↑j
.text:00403692                 test    ebx, ebx
.text:00403694                 jz      short loc_403676
.text:00403696                 call    sub_4066E0
.text:00403696 sub_403650      endp
.text:00403696
.text:00403696 ; ---------------------------------------------------------------------------
.text:0040369B                 align 10h
.text:004036A0
.text:004036A0 ; =============== S U B R O U T I N E =======================================
.text:004036A0
.text:004036A0
.text:004036A0 ; int __cdecl sub_4036A0(void *, int, int)
.text:004036A0 sub_4036A0      proc near               ; CODE XREF: .text:00403550↑j
.text:004036A0                                         ; .text:0040357A↑p
.text:004036A0
.text:004036A0 Block           = dword ptr -1Ch
.text:004036A0 Size            = dword ptr -18h
.text:004036A0 var_C           = dword ptr -0Ch
.text:004036A0 var_8           = dword ptr -8
.text:004036A0 var_4           = dword ptr -4
.text:004036A0 arg_0           = dword ptr  4
.text:004036A0 arg_4           = dword ptr  8
.text:004036A0 arg_8           = dword ptr  0Ch
.text:004036A0
.text:004036A0                 sub     esp, 1Ch
.text:004036A3                 mov     [esp+1Ch+var_8], esi
.text:004036A7                 mov     esi, [esp+1Ch+arg_0]
.text:004036AB                 mov     [esp+1Ch+var_4], edi
.text:004036AF                 mov     edi, [esp+1Ch+arg_4]
.text:004036B3                 test    esi, esi
.text:004036B5                 mov     [esp+1Ch+var_C], ebx
.text:004036B9                 mov     ecx, [edi]
.text:004036BB                 mov     ebx, [esp+1Ch+arg_8]
.text:004036BF                 jz      short loc_403700
.text:004036C1                 xor     edx, edx
.text:004036C3                 mov     eax, 7FFFFFFFh
.text:004036C8                 div     ebx
.text:004036CA                 cmp     eax, ecx
.text:004036CC                 jb      short loc_4036F9
.text:004036CE                 add     ecx, ecx
.text:004036D0
.text:004036D0 loc_4036D0:                             ; CODE XREF: sub_4036A0+62↓j
.text:004036D0                                         ; sub_4036A0+71↓j ...
.text:004036D0                 mov     [edi], ecx
.text:004036D2                 imul    ebx, ecx
.text:004036D5                 mov     [esp+1Ch+Block], esi ; Block
.text:004036D8                 mov     [esp+1Ch+Size], ebx ; Size
.text:004036DC                 call    realloc
.text:004036E1                 test    eax, eax
.text:004036E3                 jz      short loc_4036F5
.text:004036E5
.text:004036E5 loc_4036E5:                             ; CODE XREF: sub_4036A0+57↓j
.text:004036E5                 mov     ebx, [esp+1Ch+var_C]
.text:004036E9                 mov     esi, [esp+1Ch+var_8]
.text:004036ED                 mov     edi, [esp+1Ch+var_4]
.text:004036F1                 add     esp, 1Ch
.text:004036F4                 retn
.text:004036F5 ; ---------------------------------------------------------------------------
.text:004036F5
.text:004036F5 loc_4036F5:                             ; CODE XREF: sub_4036A0+43↑j
.text:004036F5                 test    ebx, ebx
.text:004036F7                 jz      short loc_4036E5
.text:004036F9
.text:004036F9 loc_4036F9:                             ; CODE XREF: sub_4036A0+2C↑j
.text:004036F9                 call    sub_4066E0
.text:004036F9 ; ---------------------------------------------------------------------------
.text:004036FE                 align 10h
.text:00403700
.text:00403700 loc_403700:                             ; CODE XREF: sub_4036A0+1F↑j
.text:00403700                 test    ecx, ecx
.text:00403702                 jnz     short loc_4036D0
.text:00403704                 xor     edx, edx
.text:00403706                 mov     eax, 40h ; '@'
.text:0040370B                 div     ebx
.text:0040370D                 test    eax, eax
.text:0040370F                 mov     ecx, eax
.text:00403711                 jnz     short loc_4036D0
.text:00403713                 mov     ecx, 1
.text:00403718                 jmp     short loc_4036D0
.text:00403718 sub_4036A0      endp
.text:00403718
.text:00403718 ; ---------------------------------------------------------------------------
.text:0040371A                 align 10h
.text:00403720 aCharacterOutOf db 'character out of range',0
.text:00403720                                         ; DATA XREF: sub_403760:loc_4038A5↓o
.text:00403737 aIconvFunctionN db 'iconv function not usable',0
.text:00403737                                         ; DATA XREF: sub_403760:loc_4038C0↓o
.text:00403751 aUtf8           db 'UTF-8',0            ; DATA XREF: sub_403760+17B↓o
.text:00403751                                         ; sub_403760:loc_403908↓o ...
.text:00403757 aAscii          db 'ASCII',0            ; DATA XREF: sub_403760+1C9↓o
.text:0040375D                 align 10h
.text:00403760
.text:00403760 ; =============== S U B R O U T I N E =======================================
.text:00403760
.text:00403760
.text:00403760 sub_403760      proc near               ; CODE XREF: sub_403970+30↓p
.text:00403760
.text:00403760 var_7C          = dword ptr -7Ch
.text:00403760 var_78          = dword ptr -78h
.text:00403760 var_74          = dword ptr -74h
.text:00403760 var_70          = dword ptr -70h
.text:00403760 var_6C          = dword ptr -6Ch
.text:00403760 var_5C          = dword ptr -5Ch
.text:00403760 var_58          = dword ptr -58h
.text:00403760 var_54          = dword ptr -54h
.text:00403760 var_50          = dword ptr -50h
.text:00403760 var_4C          = byte ptr -4Ch
.text:00403760 var_2C          = byte ptr -2Ch
.text:00403760 arg_0           = dword ptr  4
.text:00403760 arg_4           = dword ptr  8
.text:00403760 arg_8           = dword ptr  0Ch
.text:00403760 arg_C           = dword ptr  10h
.text:00403760
.text:00403760                 push    ebp
.text:00403761                 push    edi
.text:00403762                 push    esi
.text:00403763                 push    ebx
.text:00403764                 sub     esp, 6Ch
.text:00403767                 mov     eax, ds:dword_40C030
.text:0040376C                 mov     ebp, [esp+7Ch+arg_0]
.text:00403773                 test    eax, eax
.text:00403775                 jz      loc_4038D5
.text:0040377B
.text:0040377B loc_40377B:                             ; CODE XREF: sub_403760+1A3↓j
.text:0040377B                 mov     esi, ds:dword_40C040
.text:00403781                 test    esi, esi
.text:00403783                 jnz     short loc_403792
.text:00403785                 cmp     ds:dword_40C050, 0FFFFFFFFh
.text:0040378C                 jz      loc_4038C0
.text:00403792
.text:00403792 loc_403792:                             ; CODE XREF: sub_403760+23↑j
.text:00403792                 mov     [esp+7Ch+var_78], ebp
.text:00403796                 lea     esi, [esp+7Ch+var_2C]
.text:0040379A                 mov     [esp+7Ch+var_7C], esi
.text:0040379D                 call    sub_4039B0
.text:004037A2                 test    eax, eax
.text:004037A4                 js      loc_4038A5
.text:004037AA                 mov     edx, ds:dword_40C040
.text:004037B0                 test    edx, edx
.text:004037B2                 jnz     loc_403891
.text:004037B8                 mov     [esp+7Ch+var_5C], esi
.text:004037BC                 lea     edx, [esp+7Ch+var_58]
.text:004037C0                 lea     ecx, [esp+7Ch+var_5C]
.text:004037C4                 mov     [esp+7Ch+var_74], edx
.text:004037C8                 lea     ebx, [esp+7Ch+var_4C]
.text:004037CC                 mov     edx, ds:dword_40C050
.text:004037D2                 mov     [esp+7Ch+var_78], ecx
.text:004037D6                 lea     edi, [esp+7Ch+var_50]
.text:004037DA                 lea     esi, [esp+7Ch+var_54]
.text:004037DE                 mov     [esp+7Ch+var_58], eax
.text:004037E2                 mov     [esp+7Ch+var_54], ebx
.text:004037E6                 mov     [esp+7Ch+var_50], 19h
.text:004037EE                 mov     [esp+7Ch+var_6C], edi
.text:004037F2                 mov     [esp+7Ch+var_70], esi
.text:004037F6                 mov     [esp+7Ch+var_7C], edx
.text:004037F9                 call    ds:libiconv
.text:004037FF                 mov     ecx, [esp+7Ch+var_58]
.text:00403803                 test    ecx, ecx
.text:00403805                 jnz     short loc_403884
.text:00403807                 inc     eax
.text:00403808                 jz      short loc_403884
.text:0040380A                 mov     [esp+7Ch+var_6C], edi
.text:0040380E                 mov     edi, ds:dword_40C050
.text:00403814                 mov     [esp+7Ch+var_70], esi
.text:00403818                 mov     [esp+7Ch+var_74], 0
.text:00403820                 mov     [esp+7Ch+var_78], 0
.text:00403828                 mov     [esp+7Ch+var_7C], edi
.text:0040382B                 call    ds:libiconv
.text:00403831                 inc     eax
.text:00403832                 jz      short loc_40385F
.text:00403834                 mov     [esp+7Ch+var_7C], ebx
.text:00403837                 mov     ebp, [esp+7Ch+var_54]
.text:0040383B                 mov     ecx, [esp+7Ch+arg_C]
.text:00403842                 sub     ebp, ebx
.text:00403844                 mov     [esp+7Ch+var_74], ecx
.text:00403848                 mov     [esp+7Ch+var_78], ebp
.text:0040384C                 lea     esi, [esi+0]
.text:00403850
.text:00403850 loc_403850:                             ; CODE XREF: sub_403760+143↓j
.text:00403850                 call    [esp+7Ch+arg_4]
.text:00403857
.text:00403857 loc_403857:                             ; CODE XREF: sub_403760+122↓j
.text:00403857                 add     esp, 6Ch
.text:0040385A                 pop     ebx
.text:0040385B                 pop     esi
.text:0040385C                 pop     edi
.text:0040385D                 pop     ebp
.text:0040385E                 retn
.text:0040385F ; ---------------------------------------------------------------------------
.text:0040385F
.text:0040385F loc_40385F:                             ; CODE XREF: sub_403760+D2↑j
.text:0040385F                 mov     eax, [esp+7Ch+arg_C]
.text:00403866                 mov     [esp+7Ch+var_74], eax
.text:0040386A                 lea     esi, [esi+0]
.text:00403870
.text:00403870 loc_403870:                             ; CODE XREF: sub_403760+12F↓j
.text:00403870                 mov     [esp+7Ch+var_78], 0
.text:00403878
.text:00403878 loc_403878:                             ; CODE XREF: sub_403760+158↓j
.text:00403878                                         ; sub_403760+173↓j
.text:00403878                 mov     [esp+7Ch+var_7C], ebp
.text:0040387B                 call    [esp+7Ch+arg_8]
.text:00403882                 jmp     short loc_403857
.text:00403884 ; ---------------------------------------------------------------------------
.text:00403884
.text:00403884 loc_403884:                             ; CODE XREF: sub_403760+A5↑j
.text:00403884                                         ; sub_403760+A8↑j
.text:00403884                 mov     esi, [esp+7Ch+arg_C]
.text:0040388B                 mov     [esp+7Ch+var_74], esi
.text:0040388F                 jmp     short loc_403870
.text:00403891 ; ---------------------------------------------------------------------------
.text:00403891
.text:00403891 loc_403891:                             ; CODE XREF: sub_403760+52↑j
.text:00403891                 mov     [esp+7Ch+var_78], eax
.text:00403895                 mov     ebx, [esp+7Ch+arg_C]
.text:0040389C                 mov     [esp+7Ch+var_7C], esi
.text:0040389F                 mov     [esp+7Ch+var_74], ebx
.text:004038A3                 jmp     short loc_403850
.text:004038A5 ; ---------------------------------------------------------------------------
.text:004038A5
.text:004038A5 loc_4038A5:                             ; CODE XREF: sub_403760+44↑j
.text:004038A5                 mov     [esp+7Ch+var_78], offset aCharacterOutOf ; "character out of range"
.text:004038AD                 mov     edi, [esp+7Ch+arg_C]
.text:004038B4                 mov     [esp+7Ch+var_74], edi
.text:004038B8                 jmp     short loc_403878
.text:004038B8 ; ---------------------------------------------------------------------------
.text:004038BA                 align 10h
.text:004038C0
.text:004038C0 loc_4038C0:                             ; CODE XREF: sub_403760+2C↑j
.text:004038C0                 mov     [esp+7Ch+var_78], offset aIconvFunctionN ; "iconv function not usable"
.text:004038C8                 mov     ebx, [esp+7Ch+arg_C]
.text:004038CF                 mov     [esp+7Ch+var_74], ebx
.text:004038D3                 jmp     short loc_403878
.text:004038D5 ; ---------------------------------------------------------------------------
.text:004038D5
.text:004038D5 loc_4038D5:                             ; CODE XREF: sub_403760+15↑j
.text:004038D5                 call    sub_406850
.text:004038DA                 cld
.text:004038DB                 mov     edi, offset aUtf8 ; "UTF-8"
.text:004038E0                 mov     ecx, 6
.text:004038E5                 mov     esi, eax
.text:004038E7                 repe cmpsb
.text:004038E9                 setz    cl
.text:004038EC                 movzx   edx, cl
.text:004038EF                 test    edx, edx
.text:004038F1                 mov     ds:dword_40C040, edx
.text:004038F7                 jz      short loc_403908
.text:004038F9
.text:004038F9 loc_4038F9:                             ; CODE XREF: sub_403760+1BF↓j
.text:004038F9                                         ; sub_403760+1DB↓j
.text:004038F9                 mov     eax, 1
.text:004038FE                 mov     ds:dword_40C030, eax
.text:00403903                 jmp     loc_40377B
.text:00403908 ; ---------------------------------------------------------------------------
.text:00403908
.text:00403908 loc_403908:                             ; CODE XREF: sub_403760+197↑j
.text:00403908                 mov     [esp+7Ch+var_78], offset aUtf8 ; "UTF-8"
.text:00403910                 mov     [esp+7Ch+var_7C], eax
.text:00403913                 call    ds:libiconv_open
.text:00403919                 mov     ds:dword_40C050, eax
.text:0040391E                 inc     eax
.text:0040391F                 jnz     short loc_4038F9
.text:00403921                 mov     [esp+7Ch+var_78], offset aUtf8 ; "UTF-8"
.text:00403929                 mov     [esp+7Ch+var_7C], offset aAscii ; "ASCII"
.text:00403930                 call    ds:libiconv_open
.text:00403936                 mov     ds:dword_40C050, eax
.text:0040393B                 jmp     short loc_4038F9
.text:0040393B sub_403760      endp
.text:0040393B
.text:0040393B ; ---------------------------------------------------------------------------
.text:0040393D                 align 10h
.text:00403940
.text:00403940 ; =============== S U B R O U T I N E =======================================
.text:00403940
.text:00403940
.text:00403940 ; int __cdecl sub_403940(void *, size_t, FILE *)
.text:00403940 sub_403940      proc near               ; DATA XREF: sub_403970+25↓o
.text:00403940
.text:00403940 Buffer          = dword ptr -1Ch
.text:00403940 ElementSize     = dword ptr -18h
.text:00403940 ElementCount    = dword ptr -14h
.text:00403940 Stream          = dword ptr -10h
.text:00403940 arg_0           = dword ptr  4
.text:00403940 arg_4           = dword ptr  8
.text:00403940 arg_8           = dword ptr  0Ch
.text:00403940
.text:00403940                 sub     esp, 1Ch
.text:00403943                 mov     edx, [esp+1Ch+arg_4]
.text:00403947                 mov     [esp+1Ch+ElementSize], 1 ; ElementSize
.text:0040394F                 mov     ecx, [esp+1Ch+arg_8]
.text:00403953                 mov     [esp+1Ch+ElementCount], edx ; ElementCount
.text:00403957                 mov     edx, [esp+1Ch+arg_0]
.text:0040395B                 mov     [esp+1Ch+Stream], ecx ; Stream
.text:0040395F                 mov     [esp+1Ch+Buffer], edx ; Buffer
.text:00403962                 call    fwrite
.text:00403967                 xor     eax, eax
.text:00403969                 add     esp, 1Ch
.text:0040396C                 retn
.text:0040396C sub_403940      endp
.text:0040396C
.text:0040396C ; ---------------------------------------------------------------------------
.text:0040396D                 align 10h
.text:00403970
.text:00403970 ; =============== S U B R O U T I N E =======================================
.text:00403970
.text:00403970
.text:00403970 sub_403970      proc near               ; CODE XREF: sub_402550+241↑p
.text:00403970
.text:00403970 var_1C          = dword ptr -1Ch
.text:00403970 var_18          = dword ptr -18h
.text:00403970 var_14          = dword ptr -14h
.text:00403970 var_10          = dword ptr -10h
.text:00403970 arg_0           = dword ptr  4
.text:00403970 arg_4           = dword ptr  8
.text:00403970 arg_8           = dword ptr  0Ch
.text:00403970
.text:00403970                 sub     esp, 1Ch
.text:00403973                 mov     eax, offset sub_403B10
.text:00403978                 mov     ecx, [esp+1Ch+arg_8]
.text:0040397C                 mov     edx, [esp+1Ch+arg_0]
.text:00403980                 test    ecx, ecx
.text:00403982                 mov     [esp+1Ch+var_10], edx
.text:00403986                 jnz     short loc_40398D
.text:00403988                 mov     eax, offset sub_403BB0
.text:0040398D
.text:0040398D loc_40398D:                             ; CODE XREF: sub_403970+16↑j
.text:0040398D                 mov     [esp+1Ch+var_14], eax
.text:00403991                 mov     ecx, [esp+1Ch+arg_4]
.text:00403995                 mov     [esp+1Ch+var_18], offset sub_403940
.text:0040399D                 mov     [esp+1Ch+var_1C], ecx
.text:004039A0                 call    sub_403760
.text:004039A5                 add     esp, 1Ch
.text:004039A8                 retn
.text:004039A8 sub_403970      endp
.text:004039A8
.text:004039A8 ; ---------------------------------------------------------------------------
.text:004039A9                 align 10h
.text:004039B0
.text:004039B0 ; =============== S U B R O U T I N E =======================================
.text:004039B0
.text:004039B0
.text:004039B0 sub_4039B0      proc near               ; CODE XREF: sub_403760+3D↑p
.text:004039B0
.text:004039B0 arg_0           = dword ptr  4
.text:004039B0 arg_4           = dword ptr  8
.text:004039B0
.text:004039B0                 push    ebx
.text:004039B1                 mov     ecx, 1
.text:004039B6                 mov     edx, [esp+4+arg_4]
.text:004039BA                 mov     ebx, [esp+4+arg_0]
.text:004039BE                 cmp     edx, 7Fh
.text:004039C1                 jbe     short loc_403A10
.text:004039C3                 cmp     edx, 7FFh
.text:004039C9                 mov     ecx, 2
.text:004039CE                 jbe     short loc_403A10
.text:004039D0                 cmp     edx, 0FFFFh
.text:004039D6                 mov     ecx, 3
.text:004039DB                 jbe     short loc_403A10
.text:004039DD                 cmp     edx, 1FFFFFh
.text:004039E3                 mov     ecx, 4
.text:004039E8                 jbe     short loc_403A10
.text:004039EA                 cmp     edx, 3FFFFFFh
.text:004039F0                 mov     ecx, 5
.text:004039F5                 jbe     short loc_403A10
.text:004039F7                 test    edx, edx
.text:004039F9                 mov     ecx, 6
.text:004039FE                 mov     eax, 0FFFFFFFFh
.text:00403A03                 js      loc_403A92
.text:00403A09                 lea     esi, [esi+0]
.text:00403A10
.text:00403A10 loc_403A10:                             ; CODE XREF: sub_4039B0+11↑j
.text:00403A10                                         ; sub_4039B0+1E↑j ...
.text:00403A10                 jmp     ds:jpt_403A10[ecx*4] ; switch 7 cases
.text:00403A10 ; ---------------------------------------------------------------------------
.text:00403A17                 align 4
.text:00403A18 jpt_403A10      dd offset loc_403A90    ; DATA XREF: sub_4039B0:loc_403A10↑r
.text:00403A18                 dd offset loc_403A8E    ; jump table for switch statement
.text:00403A18                 dd offset loc_403A7C
.text:00403A18                 dd offset loc_403A6A
.text:00403A18                 dd offset loc_403A58
.text:00403A18                 dd offset loc_403A46
.text:00403A18                 dd offset loc_403A34
.text:00403A34 ; ---------------------------------------------------------------------------
.text:00403A34
.text:00403A34 loc_403A34:                             ; CODE XREF: sub_4039B0:loc_403A10↑j
.text:00403A34                                         ; DATA XREF: sub_4039B0:jpt_403A10↑o
.text:00403A34                 mov     al, dl          ; jumptable 00403A10 case 6
.text:00403A36                 and     al, 3Fh
.text:00403A38                 shr     edx, 6
.text:00403A3B                 or      al, 80h
.text:00403A3D                 or      edx, 4000000h
.text:00403A43                 mov     [ebx+5], al
.text:00403A46
.text:00403A46 loc_403A46:                             ; CODE XREF: sub_4039B0:loc_403A10↑j
.text:00403A46                                         ; DATA XREF: sub_4039B0:jpt_403A10↑o
.text:00403A46                 mov     al, dl          ; jumptable 00403A10 case 5
.text:00403A48                 and     al, 3Fh
.text:00403A4A                 shr     edx, 6
.text:00403A4D                 or      al, 80h
.text:00403A4F                 or      edx, 200000h
.text:00403A55                 mov     [ebx+4], al
.text:00403A58
.text:00403A58 loc_403A58:                             ; CODE XREF: sub_4039B0:loc_403A10↑j
.text:00403A58                                         ; DATA XREF: sub_4039B0:jpt_403A10↑o
.text:00403A58                 mov     al, dl          ; jumptable 00403A10 case 4
.text:00403A5A                 and     al, 3Fh
.text:00403A5C                 shr     edx, 6
.text:00403A5F                 or      al, 80h
.text:00403A61                 or      edx, 10000h
.text:00403A67                 mov     [ebx+3], al
.text:00403A6A
.text:00403A6A loc_403A6A:                             ; CODE XREF: sub_4039B0:loc_403A10↑j
.text:00403A6A                                         ; DATA XREF: sub_4039B0:jpt_403A10↑o
.text:00403A6A                 mov     al, dl          ; jumptable 00403A10 case 3
.text:00403A6C                 and     al, 3Fh
.text:00403A6E                 shr     edx, 6
.text:00403A71                 or      al, 80h
.text:00403A73                 or      edx, 800h
.text:00403A79                 mov     [ebx+2], al
.text:00403A7C
.text:00403A7C loc_403A7C:                             ; CODE XREF: sub_4039B0:loc_403A10↑j
.text:00403A7C                                         ; DATA XREF: sub_4039B0:jpt_403A10↑o
.text:00403A7C                 mov     al, dl          ; jumptable 00403A10 case 2
.text:00403A7E                 and     al, 3Fh
.text:00403A80                 shr     edx, 6
.text:00403A83                 or      al, 80h
.text:00403A85                 or      edx, 0C0h
.text:00403A8B                 mov     [ebx+1], al
.text:00403A8E
.text:00403A8E loc_403A8E:                             ; CODE XREF: sub_4039B0:loc_403A10↑j
.text:00403A8E                                         ; DATA XREF: sub_4039B0:jpt_403A10↑o
.text:00403A8E                 mov     [ebx], dl       ; jumptable 00403A10 case 1
.text:00403A90
.text:00403A90 loc_403A90:                             ; CODE XREF: sub_4039B0:loc_403A10↑j
.text:00403A90                                         ; DATA XREF: sub_4039B0:jpt_403A10↑o
.text:00403A90                 mov     eax, ecx        ; jumptable 00403A10 case 0
.text:00403A92
.text:00403A92 loc_403A92:                             ; CODE XREF: sub_4039B0+53↑j
.text:00403A92                 pop     ebx
.text:00403A93                 retn
.text:00403A93 sub_4039B0      endp
.text:00403A93
.text:00403A93 ; ---------------------------------------------------------------------------
.text:00403A94                 align 10h
.text:00403AA0 aCannotConvertU db 'cannot convert U+%04X to local character set: %s',0
.text:00403AA0                                         ; DATA XREF: sub_403B10+20↓o
.text:00403AD1                 db 0EBh, 0Dh, 90h
.text:00403AD4                 align 10h
.text:00403AE0 aCannotConvertU_0 db 'cannot convert U+%04X to local character set',0
.text:00403AE0                                         ; DATA XREF: sub_403B10:loc_403B70↓o
.text:00403B0D                 align 10h
.text:00403B10
.text:00403B10 ; =============== S U B R O U T I N E =======================================
.text:00403B10
.text:00403B10
.text:00403B10 sub_403B10      proc near               ; DATA XREF: sub_403970+3↑o
.text:00403B10
.text:00403B10 Code            = dword ptr -1Ch
.text:00403B10 ErrorMessage    = dword ptr -18h
.text:00403B10 var_14          = dword ptr -14h
.text:00403B10 var_10          = byte ptr -10h
.text:00403B10 var_C           = dword ptr -0Ch
.text:00403B10 var_8           = dword ptr -8
.text:00403B10 var_4           = dword ptr -4
.text:00403B10 arg_0           = byte ptr  4
.text:00403B10 arg_4           = dword ptr  8
.text:00403B10
.text:00403B10                 sub     esp, 1Ch
.text:00403B13                 mov     eax, [esp+1Ch+arg_4]
.text:00403B17                 mov     [esp+1Ch+var_4], esi
.text:00403B1B                 mov     esi, dword ptr [esp+1Ch+arg_0]
.text:00403B1F                 test    eax, eax
.text:00403B21                 mov     [esp+1Ch+var_8], ebx
.text:00403B25                 jz      short loc_403B70
.text:00403B27                 mov     [esp+1Ch+Code], eax
.text:00403B2A                 call    ds:libintl_gettext
.text:00403B30                 mov     [esp+1Ch+Code], offset aCannotConvertU ; "cannot convert U+%04X to local characte"...
.text:00403B37                 mov     ebx, eax
.text:00403B39                 call    ds:libintl_gettext
.text:00403B3F                 mov     [esp+1Ch+var_C], ebx
.text:00403B43                 mov     dword ptr [esp+1Ch+var_10], esi ; char
.text:00403B47                 mov     [esp+1Ch+ErrorMessage], 0 ; ErrorMessage
.text:00403B4F                 mov     [esp+1Ch+var_14], eax ; char *
.text:00403B53                 mov     [esp+1Ch+Code], 1 ; Code
.text:00403B5A                 call    sub_406970
.text:00403B5F
.text:00403B5F loc_403B5F:                             ; CODE XREF: sub_403B10+89↓j
.text:00403B5F                 mov     ebx, [esp+1Ch+var_8]
.text:00403B63                 mov     eax, 0FFFFFFFFh
.text:00403B68                 mov     esi, [esp+1Ch+var_4]
.text:00403B6C                 add     esp, 1Ch
.text:00403B6F                 retn
.text:00403B70 ; ---------------------------------------------------------------------------
.text:00403B70
.text:00403B70 loc_403B70:                             ; CODE XREF: sub_403B10+15↑j
.text:00403B70                 mov     [esp+1Ch+Code], offset aCannotConvertU_0 ; "cannot convert U+%04X to local characte"...
.text:00403B77                 call    ds:libintl_gettext
.text:00403B7D                 mov     dword ptr [esp+1Ch+var_10], esi ; char
.text:00403B81                 mov     [esp+1Ch+ErrorMessage], 0 ; ErrorMessage
.text:00403B89                 mov     [esp+1Ch+Code], 1 ; Code
.text:00403B90                 mov     [esp+1Ch+var_14], eax ; char *
.text:00403B94                 call    sub_406970
.text:00403B99                 jmp     short loc_403B5F
.text:00403B99 sub_403B10      endp
.text:00403B99
.text:00403B99 ; ---------------------------------------------------------------------------
.text:00403B9B ; const char Format[]
.text:00403B9B Format          db '\u%04X',0           ; DATA XREF: sub_403BB0+16↓o
.text:00403BA2 aU08x           db '\U%08X',0           ; DATA XREF: sub_403BB0+34↓o
.text:00403BA9                 align 10h
.text:00403BB0
.text:00403BB0 ; =============== S U B R O U T I N E =======================================
.text:00403BB0
.text:00403BB0
.text:00403BB0 ; int __cdecl sub_403BB0(int, int, FILE *)
.text:00403BB0 sub_403BB0      proc near               ; DATA XREF: sub_403970+18↑o
.text:00403BB0
.text:00403BB0 Stream          = dword ptr -0Ch
.text:00403BB0 Format          = dword ptr -8
.text:00403BB0 var_4           = dword ptr -4
.text:00403BB0 arg_0           = dword ptr  4
.text:00403BB0 arg_8           = dword ptr  0Ch
.text:00403BB0
.text:00403BB0                 sub     esp, 0Ch
.text:00403BB3                 mov     eax, [esp+0Ch+arg_0]
.text:00403BB7                 mov     edx, [esp+0Ch+arg_8]
.text:00403BBB                 cmp     eax, 0FFFFh
.text:00403BC0                 ja      short loc_403BE0
.text:00403BC2                 mov     [esp+0Ch+var_4], eax
.text:00403BC6                 mov     [esp+0Ch+Format], offset Format ; "\\u%04X"
.text:00403BCE
.text:00403BCE loc_403BCE:                             ; CODE XREF: sub_403BB0+3C↓j
.text:00403BCE                 mov     [esp+0Ch+Stream], edx ; Stream
.text:00403BD1                 call    fprintf
.text:00403BD6                 mov     eax, 0FFFFFFFFh
.text:00403BDB                 add     esp, 0Ch
.text:00403BDE                 retn
.text:00403BDE ; ---------------------------------------------------------------------------
.text:00403BDF                 align 10h
.text:00403BE0
.text:00403BE0 loc_403BE0:                             ; CODE XREF: sub_403BB0+10↑j
.text:00403BE0                 mov     [esp+0Ch+var_4], eax
.text:00403BE4                 mov     [esp+0Ch+Format], offset aU08x ; "\\U%08X"
.text:00403BEC                 jmp     short loc_403BCE
.text:00403BEC sub_403BB0      endp
.text:00403BEC
.text:00403BEC ; ---------------------------------------------------------------------------
.text:00403BEE                 align 20h
.text:00403C00 ; const char aC[2]
.text:00403C00 aC              db 'C',0                ; DATA XREF: sub_403C10+35↓o
.text:00403C02                 align 10h
.text:00403C10
.text:00403C10 ; =============== S U B R O U T I N E =======================================
.text:00403C10
.text:00403C10
.text:00403C10 ; int __cdecl sub_403C10(char *, int)
.text:00403C10 sub_403C10      proc near               ; CODE XREF: sub_402900+48C↑p
.text:00403C10
.text:00403C10 Category        = dword ptr -3Ch
.text:00403C10 Locale          = dword ptr -38h
.text:00403C10 var_2C          = tbyte ptr -2Ch
.text:00403C10 var_10          = dword ptr -10h
.text:00403C10 var_C           = dword ptr -0Ch
.text:00403C10 var_8           = dword ptr -8
.text:00403C10 var_4           = dword ptr -4
.text:00403C10 arg_0           = dword ptr  4
.text:00403C10 arg_4           = dword ptr  8
.text:00403C10
.text:00403C10                 sub     esp, 3Ch
.text:00403C13                 mov     [esp+3Ch+var_4], ebp
.text:00403C17                 mov     [esp+3Ch+var_10], ebx
.text:00403C1B                 mov     [esp+3Ch+var_C], esi
.text:00403C1F                 mov     [esp+3Ch+var_8], edi
.text:00403C23                 mov     [esp+3Ch+Locale], 0 ; Locale
.text:00403C2B                 mov     [esp+3Ch+Category], 4 ; Category
.text:00403C32                 call    setlocale
.text:00403C37                 test    eax, eax
.text:00403C39                 mov     ebp, eax
.text:00403C3B                 jz      short loc_403C5B
.text:00403C3D                 mov     [esp+3Ch+Category], eax ; char *
.text:00403C40                 call    sub_403650
.text:00403C45                 mov     [esp+3Ch+Locale], offset aC ; "C"
.text:00403C4D                 mov     ebp, eax
.text:00403C4F                 mov     [esp+3Ch+Category], 4 ; Category
.text:00403C56                 call    setlocale
.text:00403C5B
.text:00403C5B loc_403C5B:                             ; CODE XREF: sub_403C10+2B↑j
.text:00403C5B                 mov     edx, [esp+3Ch+arg_4]
.text:00403C5F                 mov     [esp+3Ch+Locale], edx ; int
.text:00403C63                 mov     edx, [esp+3Ch+arg_0]
.text:00403C67                 mov     [esp+3Ch+Category], edx ; char *
.text:00403C6A                 call    sub_408590
.text:00403C6F                 test    ebp, ebp
.text:00403C71                 fstp    [esp+3Ch+var_2C]
.text:00403C75                 mov     ebx, dword ptr [esp+3Ch+var_2C]
.text:00403C79                 mov     esi, dword ptr [esp+3Ch+var_2C+4]
.text:00403C7D                 mov     edi, dword ptr [esp+3Ch+var_2C+8]
.text:00403C81                 jz      short loc_403C9B
.text:00403C83                 mov     [esp+3Ch+Locale], ebp ; Locale
.text:00403C87                 mov     [esp+3Ch+Category], 4 ; Category
.text:00403C8E                 call    setlocale
.text:00403C93                 mov     [esp+3Ch+Category], ebp ; Block
.text:00403C96                 call    free
.text:00403C9B
.text:00403C9B loc_403C9B:                             ; CODE XREF: sub_403C10+71↑j
.text:00403C9B                 mov     dword ptr [esp+3Ch+var_2C], ebx
.text:00403C9F                 mov     ebp, [esp+3Ch+var_4]
.text:00403CA3                 mov     ebx, [esp+3Ch+var_10]
.text:00403CA7                 mov     dword ptr [esp+3Ch+var_2C+4], esi
.text:00403CAB                 mov     esi, [esp+3Ch+var_C]
.text:00403CAF                 mov     dword ptr [esp+3Ch+var_2C+8], edi
.text:00403CB3                 mov     edi, [esp+3Ch+var_8]
.text:00403CB7                 fld     [esp+3Ch+var_2C]
.text:00403CBB                 add     esp, 3Ch
.text:00403CBE                 retn
.text:00403CBE sub_403C10      endp
.text:00403CBE
.text:00403CBE ; ---------------------------------------------------------------------------
.text:00403CBF                 align 10h
.text:00403CC0 dword_403CC0    dd 90002D2Dh, 7 dup(90909090h)
.text:00403CC0                                         ; DATA XREF: sub_403F10+E4↓o
.text:00403CE0 aSOptionCSDoesn db '%s: option `%c%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00403CE0                                         ; DATA XREF: sub_403F10+2FC↓o
.text:00403D0D                 align 20h
.text:00403D20 aSOptionSDoesnT db '%s: option `--%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00403D20                                         ; DATA XREF: sub_403F10:loc_404272↓o
.text:00403D4D                 align 20h
.text:00403D60 aSOptionSRequir db '%s: option `%s',27h,' requires an argument',0Ah,0
.text:00403D60                                         ; DATA XREF: sub_403F10:loc_404310↓o
.text:00403D60                                         ; sub_403F10:loc_4046D7↓o
.text:00403D86                 align 20h
.text:00403DA0 aSUnrecognizedO db '%s: unrecognized option `%c%s',27h,0Ah,0
.text:00403DA0                                         ; DATA XREF: sub_403F10+48E↓o
.text:00403DC0 dword_403DC0    dd 90909000h, 7 dup(90909090h)
.text:00403DC0                                         ; DATA XREF: sub_403F10:loc_4043E1↓o
.text:00403DE0 aSUnrecognizedO_0 db '%s: unrecognized option `--%s',27h,0Ah,0
.text:00403DE0                                         ; DATA XREF: sub_403F10:loc_4043FA↓o
.text:00403E00 aSOptionRequire db '%s: option requires an argument -- %c',0Ah,0
.text:00403E00                                         ; DATA XREF: sub_403F10:loc_4044DF↓o
.text:00403E00                                         ; sub_403F10:loc_40480C↓o
.text:00403E27                 align 20h
.text:00403E40 aSOptionWSDoesn db '%s: option `-W %s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00403E40                                         ; DATA XREF: sub_403F10:loc_404653↓o
.text:00403E6E                 align 20h
.text:00403E80 aSOptionWSIsAmb db '%s: option `-W %s',27h,' is ambiguous',0Ah,0
.text:00403E80                                         ; DATA XREF: sub_403F10:loc_40473F↓o
.text:00403EA1 aSIllegalOption db '%s: illegal option -- %c',0Ah,0
.text:00403EA1                                         ; DATA XREF: sub_403F10+93F↓o
.text:00403EBB aSInvalidOption db '%s: invalid option -- %c',0Ah,0
.text:00403EBB                                         ; DATA XREF: sub_403F10:loc_404887↓o
.text:00403ED5 aSOptionSIsAmbi db '%s: option `%s',27h,' is ambiguous',0Ah,0
.text:00403ED5                                         ; DATA XREF: sub_403F10:loc_4048AE↓o
.text:00403EF3 ; const char aPosixlyCorrect_0[]
.text:00403EF3 aPosixlyCorrect_0 db 'POSIXLY_CORRECT',0
.text:00403EF3                                         ; DATA XREF: sub_403F10:loc_404A60↓o
.text:00403F03                 align 10h
.text:00403F10
.text:00403F10 ; =============== S U B R O U T I N E =======================================
.text:00403F10
.text:00403F10
.text:00403F10 ; int __cdecl sub_403F10(int, int, char *Str, int, int, int, int, int)
.text:00403F10 sub_403F10      proc near               ; CODE XREF: sub_404AA0+5A↓p
.text:00403F10                                         ; .text:00404B8A↓p ...
.text:00403F10
.text:00403F10 Str1            = dword ptr -5Ch
.text:00403F10 Str2            = dword ptr -58h
.text:00403F10 MaxCount        = dword ptr -54h
.text:00403F10 var_50          = dword ptr -50h
.text:00403F10 var_4C          = dword ptr -4Ch
.text:00403F10 var_3C          = dword ptr -3Ch
.text:00403F10 var_38          = dword ptr -38h
.text:00403F10 var_34          = dword ptr -34h
.text:00403F10 var_30          = dword ptr -30h
.text:00403F10 var_2C          = dword ptr -2Ch
.text:00403F10 var_28          = dword ptr -28h
.text:00403F10 var_24          = dword ptr -24h
.text:00403F10 var_20          = dword ptr -20h
.text:00403F10 var_1C          = dword ptr -1Ch
.text:00403F10 var_18          = dword ptr -18h
.text:00403F10 var_14          = dword ptr -14h
.text:00403F10 arg_0           = dword ptr  4
.text:00403F10 arg_4           = dword ptr  8
.text:00403F10 Str             = dword ptr  0Ch
.text:00403F10 arg_C           = dword ptr  10h
.text:00403F10 arg_10          = dword ptr  14h
.text:00403F10 arg_14          = dword ptr  18h
.text:00403F10 arg_18          = dword ptr  1Ch
.text:00403F10 arg_1C          = dword ptr  20h
.text:00403F10
.text:00403F10                 push    ebp
.text:00403F11                 mov     eax, 0FFFFFFFFh
.text:00403F16                 push    edi
.text:00403F17                 push    esi
.text:00403F18                 push    ebx
.text:00403F19                 sub     esp, 4Ch
.text:00403F1C                 mov     esi, [esp+5Ch+Str]
.text:00403F20                 mov     ebp, [esp+5Ch+arg_1C]
.text:00403F24                 cmp     byte ptr [esi], 3Ah ; ':'
.text:00403F27                 mov     ebx, [ebp+4]
.text:00403F2A                 setz    dl
.text:00403F2D                 movzx   ecx, dl
.text:00403F30                 dec     ecx
.text:00403F31                 and     ecx, ebx
.text:00403F33                 mov     [esp+5Ch+var_14], ecx
.text:00403F37                 mov     ecx, [esp+5Ch+arg_0]
.text:00403F3B                 test    ecx, ecx
.text:00403F3D                 jle     loc_404067
.text:00403F43                 mov     dword ptr [ebp+0Ch], 0
.text:00403F4A                 mov     ebx, [ebp+0]
.text:00403F4D                 test    ebx, ebx
.text:00403F4F                 jz      loc_404A80
.text:00403F55                 mov     edi, [ebp+10h]
.text:00403F58                 test    edi, edi
.text:00403F5A                 jnz     short loc_403FB3
.text:00403F5C                 lea     esi, [esi+0]
.text:00403F60
.text:00403F60 loc_403F60:                             ; CODE XREF: sub_403F10+B7C↓j
.text:00403F60                 mov     [ebp+24h], ebx
.text:00403F63                 mov     esi, [esp+5Ch+Str]
.text:00403F67                 mov     [ebp+20h], ebx
.text:00403F6A                 mov     ecx, [esp+5Ch+arg_18]
.text:00403F6E                 xor     ebx, ebx
.text:00403F70                 mov     dword ptr [ebp+14h], 0
.text:00403F77                 test    ecx, ecx
.text:00403F79                 jz      loc_404A60
.text:00403F7F
.text:00403F7F loc_403F7F:                             ; CODE XREF: sub_403F10+B64↓j
.text:00403F7F                 mov     ebx, 1
.text:00403F84
.text:00403F84 loc_403F84:                             ; CODE XREF: sub_403F10+B5E↓j
.text:00403F84                 mov     [ebp+1Ch], ebx
.text:00403F87                 mov     ecx, [esp+5Ch+Str]
.text:00403F8B                 movzx   eax, byte ptr [ecx]
.text:00403F8E                 cmp     al, 2Dh ; '-'
.text:00403F90                 jz      loc_404A50
.text:00403F96                 cmp     al, 2Bh ; '+'
.text:00403F98                 jz      loc_404A39
.text:00403F9E                 xor     edx, edx
.text:00403FA0                 test    ebx, ebx
.text:00403FA2                 setz    dl
.text:00403FA5                 mov     [ebp+18h], edx
.text:00403FA8
.text:00403FA8 loc_403FA8:                             ; CODE XREF: sub_403F10+B35↓j
.text:00403FA8                 mov     [esp+5Ch+Str], esi
.text:00403FAC                 mov     dword ptr [ebp+10h], 1
.text:00403FB3
.text:00403FB3 loc_403FB3:                             ; CODE XREF: sub_403F10+4A↑j
.text:00403FB3                 mov     eax, [ebp+14h]
.text:00403FB6                 test    eax, eax
.text:00403FB8                 jz      short loc_403FC3
.text:00403FBA                 cmp     byte ptr [eax], 0
.text:00403FBD                 jnz     loc_4040A0
.text:00403FC3
.text:00403FC3 loc_403FC3:                             ; CODE XREF: sub_403F10+A8↑j
.text:00403FC3                 mov     ebx, [ebp+0]
.text:00403FC6                 cmp     [ebp+24h], ebx
.text:00403FC9                 jle     short loc_403FCE
.text:00403FCB                 mov     [ebp+24h], ebx
.text:00403FCE
.text:00403FCE loc_403FCE:                             ; CODE XREF: sub_403F10+B9↑j
.text:00403FCE                 cmp     [ebp+20h], ebx
.text:00403FD1                 jle     short loc_403FD6
.text:00403FD3                 mov     [ebp+20h], ebx
.text:00403FD6
.text:00403FD6 loc_403FD6:                             ; CODE XREF: sub_403F10+C1↑j
.text:00403FD6                 cmp     dword ptr [ebp+18h], 1
.text:00403FDA                 jz      loc_4049B0
.text:00403FE0
.text:00403FE0 loc_403FE0:                             ; CODE XREF: sub_403F10+B13↓j
.text:00403FE0                 cmp     ebx, [esp+5Ch+arg_0]
.text:00403FE4                 jz      loc_404994
.text:00403FEA                 cld
.text:00403FEB                 mov     ecx, [esp+5Ch+arg_4]
.text:00403FEF                 mov     edx, 3
.text:00403FF4                 mov     edi, offset dword_403CC0
.text:00403FF9                 mov     esi, [ecx+ebx*4]
.text:00403FFC                 mov     ecx, edx
.text:00403FFE                 repe cmpsb
.text:00404000                 jnz     short loc_40403C
.text:00404002                 mov     edx, [ebp+24h]
.text:00404005                 lea     eax, [ebx+1]
.text:00404008                 cmp     [ebp+20h], edx
.text:0040400B                 mov     [ebp+0], eax
.text:0040400E                 jz      loc_4049A8
.text:00404014                 cmp     edx, eax
.text:00404016                 jz      short loc_404030
.text:00404018                 mov     [esp+5Ch+Str2], ebp
.text:0040401C                 mov     ebx, [esp+5Ch+arg_4]
.text:00404020                 mov     [esp+5Ch+Str1], ebx
.text:00404023                 call    sub_404BC0
.text:00404028                 nop
.text:00404029                 lea     esi, [esi+0]
.text:00404030
.text:00404030 loc_404030:                             ; CODE XREF: sub_403F10+106↑j
.text:00404030                                         ; sub_403F10+A9B↓j
.text:00404030                 mov     eax, [esp+5Ch+arg_0]
.text:00404034                 mov     ebx, eax
.text:00404036                 mov     [ebp+24h], eax
.text:00404039                 mov     [ebp+0], eax
.text:0040403C
.text:0040403C loc_40403C:                             ; CODE XREF: sub_403F10+F0↑j
.text:0040403C                 cmp     ebx, [esp+5Ch+arg_0]
.text:00404040                 jz      loc_404994
.text:00404046                 mov     esi, [esp+5Ch+arg_4]
.text:0040404A                 mov     eax, [esi+ebx*4]
.text:0040404D                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00404050                 jz      short loc_404077
.text:00404052
.text:00404052 loc_404052:                             ; CODE XREF: sub_403F10+16D↓j
.text:00404052                 mov     edx, [ebp+18h]
.text:00404055                 test    edx, edx
.text:00404057                 jz      short loc_404070
.text:00404059                 mov     [ebp+0Ch], eax
.text:0040405C                 lea     edi, [ebx+1]
.text:0040405F                 mov     eax, 1
.text:00404064                 mov     [ebp+0], edi
.text:00404067
.text:00404067 loc_404067:                             ; CODE XREF: sub_403F10+2D↑j
.text:00404067                                         ; sub_403F10+165↓j ...
.text:00404067                 add     esp, 4Ch
.text:0040406A                 pop     ebx
.text:0040406B                 pop     esi
.text:0040406C                 pop     edi
.text:0040406D                 pop     ebp
.text:0040406E                 retn
.text:0040406E ; ---------------------------------------------------------------------------
.text:0040406F                 align 10h
.text:00404070
.text:00404070 loc_404070:                             ; CODE XREF: sub_403F10+147↑j
.text:00404070                                         ; sub_403F10+A8A↓j ...
.text:00404070                 mov     eax, 0FFFFFFFFh
.text:00404075                 jmp     short loc_404067
.text:00404077 ; ---------------------------------------------------------------------------
.text:00404077
.text:00404077 loc_404077:                             ; CODE XREF: sub_403F10+140↑j
.text:00404077                 movzx   edx, byte ptr [eax+1]
.text:0040407B                 test    dl, dl
.text:0040407D                 jz      short loc_404052
.text:0040407F                 mov     ebx, [esp+5Ch+arg_C]
.text:00404083                 xor     ecx, ecx
.text:00404085                 test    ebx, ebx
.text:00404087                 jz      short loc_404092
.text:00404089                 cmp     dl, 2Dh ; '-'
.text:0040408C                 jz      loc_40498A
.text:00404092
.text:00404092 loc_404092:                             ; CODE XREF: sub_403F10+177↑j
.text:00404092                                         ; sub_403F10+A7F↓j
.text:00404092                 lea     esi, [ecx+eax+1]
.text:00404096                 mov     [ebp+14h], esi
.text:00404099                 lea     esi, [esi+0]
.text:004040A0
.text:004040A0 loc_4040A0:                             ; CODE XREF: sub_403F10+AD↑j
.text:004040A0                 mov     ecx, [esp+5Ch+arg_C]
.text:004040A4                 test    ecx, ecx
.text:004040A6                 jz      loc_404430
.text:004040AC                 mov     edx, [ebp+0]
.text:004040AF                 mov     edi, [esp+5Ch+arg_4]
.text:004040B3                 mov     eax, [edi+edx*4]
.text:004040B6                 movzx   edx, byte ptr [eax+1]
.text:004040BA                 cmp     dl, 2Dh ; '-'
.text:004040BD                 jz      short loc_4040D5
.text:004040BF                 mov     ebx, [esp+5Ch+arg_14]
.text:004040C3                 test    ebx, ebx
.text:004040C5                 jz      loc_404430
.text:004040CB                 cmp     byte ptr [eax+2], 0
.text:004040CF                 jz      loc_40496A
.text:004040D5
.text:004040D5 loc_4040D5:                             ; CODE XREF: sub_403F10+1AD↑j
.text:004040D5                                         ; sub_403F10+A75↓j
.text:004040D5                 mov     [esp+5Ch+var_18], 0
.text:004040DD                 mov     ecx, [ebp+14h]
.text:004040E0                 mov     [esp+5Ch+var_1C], 0
.text:004040E8                 mov     [esp+5Ch+var_20], 0
.text:004040F0                 mov     edi, ecx
.text:004040F2                 mov     [esp+5Ch+var_24], 0FFFFFFFFh
.text:004040FA                 movzx   eax, byte ptr [ecx]
.text:004040FD                 test    al, al
.text:004040FF                 jz      short loc_40411C
.text:00404101                 cmp     al, 3Dh ; '='
.text:00404103                 jz      short loc_40411C
.text:00404105                 lea     esi, [esi+0]
.text:00404109                 lea     edi, [edi+0]
.text:00404110
.text:00404110 loc_404110:                             ; CODE XREF: sub_403F10+20A↓j
.text:00404110                 inc     edi
.text:00404111                 movzx   eax, byte ptr [edi]
.text:00404114                 test    al, al
.text:00404116                 jz      short loc_40411C
.text:00404118                 cmp     al, 3Dh ; '='
.text:0040411A                 jnz     short loc_404110
.text:0040411C
.text:0040411C loc_40411C:                             ; CODE XREF: sub_403F10+1EF↑j
.text:0040411C                                         ; sub_403F10+1F3↑j ...
.text:0040411C                 mov     [esp+5Ch+var_28], 0
.text:00404124                 mov     esi, [esp+5Ch+arg_C]
.text:00404128                 mov     ebx, [esi]
.text:0040412A                 test    ebx, ebx
.text:0040412C                 mov     edx, ebx
.text:0040412E                 jz      loc_404350
.text:00404134                 lea     esi, [esi+0]
.text:0040413A                 lea     edi, [edi+0]
.text:00404140
.text:00404140 loc_404140:                             ; CODE XREF: sub_403F10+25E↓j
.text:00404140                 mov     [esp+5Ch+Str2], ecx ; Str2
.text:00404144                 mov     ebx, edi
.text:00404146                 sub     ebx, ecx
.text:00404148                 mov     [esp+5Ch+MaxCount], ebx ; MaxCount
.text:0040414C                 mov     [esp+5Ch+Str1], edx ; Str1
.text:0040414F                 call    strncmp
.text:00404154                 test    eax, eax
.text:00404156                 jz      loc_4048E6
.text:0040415C
.text:0040415C loc_40415C:                             ; CODE XREF: sub_403F10+A0F↓j
.text:0040415C                                         ; sub_403F10+A24↓j ...
.text:0040415C                 inc     [esp+5Ch+var_28]
.text:00404160                 add     esi, 10h
.text:00404163                 mov     ecx, [esi]
.text:00404165                 test    ecx, ecx
.text:00404167                 mov     edx, ecx
.text:00404169                 jz      short loc_404170
.text:0040416B                 mov     ecx, [ebp+14h]
.text:0040416E                 jmp     short loc_404140
.text:00404170 ; ---------------------------------------------------------------------------
.text:00404170
.text:00404170 loc_404170:                             ; CODE XREF: sub_403F10+259↑j
.text:00404170                                         ; sub_403F10+A55↓j
.text:00404170                 mov     esi, [esp+5Ch+var_20]
.text:00404174                 test    esi, esi
.text:00404176                 jz      short loc_404184
.text:00404178                 mov     edx, [esp+5Ch+var_1C]
.text:0040417C                 test    edx, edx
.text:0040417E                 jz      loc_404890
.text:00404184
.text:00404184 loc_404184:                             ; CODE XREF: sub_403F10+266↑j
.text:00404184                 mov     eax, [esp+5Ch+var_18]
.text:00404188                 test    eax, eax
.text:0040418A                 jz      loc_404350
.text:00404190                 mov     ecx, [ebp+0]
.text:00404193                 lea     eax, [ecx+1]
.text:00404196                 mov     [ebp+0], eax
.text:00404199                 cmp     byte ptr [edi], 0
.text:0040419C                 jz      loc_4042B0
.text:004041A2                 mov     ecx, [esp+5Ch+var_18]
.text:004041A6                 mov     esi, [ecx+4]
.text:004041A9                 test    esi, esi
.text:004041AB                 jz      short loc_4041F6
.text:004041AD                 lea     ebx, [edi+1]
.text:004041B0                 mov     [ebp+0Ch], ebx
.text:004041B3
.text:004041B3 loc_4041B3:                             ; CODE XREF: sub_403F10+3A8↓j
.text:004041B3                                         ; sub_403F10+3C4↓j
.text:004041B3                 mov     ebx, [ebp+14h]
.text:004041B6                 mov     [esp+5Ch+Str1], ebx ; Str
.text:004041B9                 call    strlen
.text:004041BE                 add     [ebp+14h], eax
.text:004041C1                 mov     esi, [esp+5Ch+arg_10]
.text:004041C5                 test    esi, esi
.text:004041C7                 jz      short loc_4041D3
.text:004041C9                 mov     ebp, [esp+5Ch+var_24]
.text:004041CD                 mov     ecx, [esp+5Ch+arg_10]
.text:004041D1                 mov     [ecx], ebp
.text:004041D3
.text:004041D3 loc_4041D3:                             ; CODE XREF: sub_403F10+2B7↑j
.text:004041D3                 mov     eax, [esp+5Ch+var_18]
.text:004041D7                 mov     ecx, [eax+8]
.text:004041DA                 test    ecx, ecx
.text:004041DC                 jnz     short loc_4041EA
.text:004041DE                 mov     ecx, [esp+5Ch+var_18]
.text:004041E2
.text:004041E2 loc_4041E2:                             ; CODE XREF: sub_403F10+723↓j
.text:004041E2                 mov     eax, [ecx+0Ch]
.text:004041E5                 jmp     loc_404067
.text:004041EA ; ---------------------------------------------------------------------------
.text:004041EA
.text:004041EA loc_4041EA:                             ; CODE XREF: sub_403F10+2CC↑j
.text:004041EA                                         ; sub_403F10+719↓j
.text:004041EA                 mov     esi, [eax+0Ch]
.text:004041ED                 xor     eax, eax
.text:004041EF                 mov     [ecx], esi
.text:004041F1                 jmp     loc_404067
.text:004041F6 ; ---------------------------------------------------------------------------
.text:004041F6
.text:004041F6 loc_4041F6:                             ; CODE XREF: sub_403F10+29B↑j
.text:004041F6                 mov     edi, [esp+5Ch+var_14]
.text:004041FA                 test    edi, edi
.text:004041FC                 jz      short loc_404250
.text:004041FE                 mov     esi, [esp+5Ch+arg_4]
.text:00404202                 mov     edx, [esi+eax*4-4]
.text:00404206                 cmp     byte ptr [edx+1], 2Dh ; '-'
.text:0040420A                 jz      short loc_404272
.text:0040420C                 mov     [esp+5Ch+Str1], offset aSOptionCSDoesn ; "%s: option `%c%s' doesn't allow an argu"...
.text:00404213                 call    ds:libintl_gettext
.text:00404219                 mov     edx, [esp+5Ch+var_18]
.text:0040421D                 mov     edi, [edx]
.text:0040421F                 mov     [esp+5Ch+var_4C], edi
.text:00404223                 mov     ebx, [ebp+0]
.text:00404226                 mov     edi, [esp+5Ch+arg_4]
.text:0040422A                 mov     ecx, [edi+ebx*4-4]
.text:0040422E                 movsx   esi, byte ptr [ecx]
.text:00404231                 mov     ecx, ds:_iob
.text:00404237                 add     ecx, 40h ; '@'
.text:0040423A                 mov     [esp+5Ch+var_50], esi
.text:0040423E                 mov     ebx, [edi]
.text:00404240                 mov     [esp+5Ch+Str2], eax ; Format
.text:00404244                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00404247                 mov     [esp+5Ch+MaxCount], ebx
.text:0040424B                 call    fprintf
.text:00404250
.text:00404250 loc_404250:                             ; CODE XREF: sub_403F10+2EC↑j
.text:00404250                                         ; sub_403F10+398↓j
.text:00404250                 mov     ecx, [ebp+14h]
.text:00404253                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00404256                 call    strlen
.text:0040425B                 add     [ebp+14h], eax
.text:0040425E                 mov     eax, [esp+5Ch+var_18]
.text:00404262                 mov     esi, [eax+0Ch]
.text:00404265                 mov     [ebp+8], esi
.text:00404268
.text:00404268 loc_404268:                             ; CODE XREF: sub_403F10+4E5↓j
.text:00404268                                         ; sub_403F10+73E↓j ...
.text:00404268                 mov     eax, 3Fh ; '?'
.text:0040426D                 jmp     loc_404067
.text:00404272 ; ---------------------------------------------------------------------------
.text:00404272
.text:00404272 loc_404272:                             ; CODE XREF: sub_403F10+2FA↑j
.text:00404272                 mov     [esp+5Ch+Str1], offset aSOptionSDoesnT ; "%s: option `--%s' doesn't allow an argu"...
.text:00404279                 call    ds:libintl_gettext
.text:0040427F                 mov     edx, [esp+5Ch+var_18]
.text:00404283                 mov     edi, [esp+5Ch+arg_4]
.text:00404287                 mov     ecx, ds:_iob
.text:0040428D                 mov     esi, [edx]
.text:0040428F                 add     ecx, 40h ; '@'
.text:00404292                 mov     [esp+5Ch+var_50], esi
.text:00404296                 mov     ebx, [edi]
.text:00404298                 mov     [esp+5Ch+Str2], eax ; Format
.text:0040429C                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:0040429F                 mov     [esp+5Ch+MaxCount], ebx
.text:004042A3                 call    fprintf
.text:004042A8                 jmp     short loc_404250
.text:004042A8 ; ---------------------------------------------------------------------------
.text:004042AA                 align 10h
.text:004042B0
.text:004042B0 loc_4042B0:                             ; CODE XREF: sub_403F10+28C↑j
.text:004042B0                 mov     ebx, [esp+5Ch+var_18]
.text:004042B4                 cmp     dword ptr [ebx+4], 1
.text:004042B8                 jnz     loc_4041B3
.text:004042BE                 cmp     eax, [esp+5Ch+arg_0]
.text:004042C2                 jge     short loc_4042D9
.text:004042C4                 mov     ebx, [esp+5Ch+arg_4]
.text:004042C8                 lea     edi, [ecx+2]
.text:004042CB                 mov     [ebp+0], edi
.text:004042CE                 mov     esi, [ebx+eax*4]
.text:004042D1                 mov     [ebp+0Ch], esi
.text:004042D4                 jmp     loc_4041B3
.text:004042D9 ; ---------------------------------------------------------------------------
.text:004042D9
.text:004042D9 loc_4042D9:                             ; CODE XREF: sub_403F10+3B2↑j
.text:004042D9                 mov     edx, [esp+5Ch+var_14]
.text:004042DD                 test    edx, edx
.text:004042DF                 jnz     short loc_404310
.text:004042E1
.text:004042E1 loc_4042E1:                             ; CODE XREF: sub_403F10+437↓j
.text:004042E1                 mov     edx, [ebp+14h]
.text:004042E4                 mov     [esp+5Ch+Str1], edx ; Str
.text:004042E7                 call    strlen
.text:004042EC                 add     [ebp+14h], eax
.text:004042EF                 mov     eax, [esp+5Ch+var_18]
.text:004042F3                 mov     edi, [eax+0Ch]
.text:004042F6                 mov     [ebp+8], edi
.text:004042F9
.text:004042F9 loc_4042F9:                             ; CODE XREF: sub_403F10+7C2↓j
.text:004042F9                 mov     ebp, [esp+5Ch+Str]
.text:004042FD                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:00404301                 setnz   bl
.text:00404304                 movzx   esi, bl
.text:00404307                 lea     eax, [esi+esi*4+3Ah]
.text:0040430B                 jmp     loc_404067
.text:00404310 ; ---------------------------------------------------------------------------
.text:00404310
.text:00404310 loc_404310:                             ; CODE XREF: sub_403F10+3CF↑j
.text:00404310                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:00404317                 call    ds:libintl_gettext
.text:0040431D                 mov     ecx, [ebp+0]
.text:00404320                 mov     esi, [esp+5Ch+arg_4]
.text:00404324                 mov     ebx, [esi+ecx*4-4]
.text:00404328                 mov     ecx, ds:_iob
.text:0040432E                 mov     [esp+5Ch+var_50], ebx
.text:00404332                 mov     edi, [esi]
.text:00404334                 add     ecx, 40h ; '@'
.text:00404337                 mov     [esp+5Ch+Str2], eax ; Format
.text:0040433B                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:0040433E                 mov     [esp+5Ch+MaxCount], edi
.text:00404342                 call    fprintf
.text:00404347                 jmp     short loc_4042E1
.text:00404347 ; ---------------------------------------------------------------------------
.text:00404349                 align 10h
.text:00404350
.text:00404350 loc_404350:                             ; CODE XREF: sub_403F10+21E↑j
.text:00404350                                         ; sub_403F10+27A↑j
.text:00404350                 mov     eax, [esp+5Ch+arg_14]
.text:00404354                 test    eax, eax
.text:00404356                 jz      short loc_404386
.text:00404358                 mov     ebx, [ebp+0]
.text:0040435B                 mov     esi, [esp+5Ch+arg_4]
.text:0040435F                 mov     edi, [esi+ebx*4]
.text:00404362                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:00404366                 jz      short loc_404389
.text:00404368                 mov     ecx, [ebp+14h]
.text:0040436B                 mov     edx, [esp+5Ch+Str]
.text:0040436F                 movsx   ebx, byte ptr [ecx]
.text:00404372                 mov     [esp+5Ch+Str1], edx ; Str
.text:00404375                 mov     [esp+5Ch+Str2], ebx ; Val
.text:00404379                 call    strchr
.text:0040437E                 test    eax, eax
.text:00404380                 jnz     loc_404430
.text:00404386
.text:00404386 loc_404386:                             ; CODE XREF: sub_403F10+446↑j
.text:00404386                 mov     ebx, [ebp+0]
.text:00404389
.text:00404389 loc_404389:                             ; CODE XREF: sub_403F10+456↑j
.text:00404389                 mov     eax, [esp+5Ch+var_14]
.text:0040438D                 test    eax, eax
.text:0040438F                 jz      short loc_4043E1
.text:00404391                 mov     esi, [esp+5Ch+arg_4]
.text:00404395                 mov     edi, [esi+ebx*4]
.text:00404398                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:0040439C                 jz      short loc_4043FA
.text:0040439E                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO ; "%s: unrecognized option `%c%s'\n"
.text:004043A5                 call    ds:libintl_gettext
.text:004043AB                 mov     edi, [ebp+14h]
.text:004043AE                 mov     [esp+5Ch+var_4C], edi
.text:004043B2                 mov     ebx, [ebp+0]
.text:004043B5                 mov     edi, [esp+5Ch+arg_4]
.text:004043B9                 mov     esi, [edi+ebx*4]
.text:004043BC                 movsx   ecx, byte ptr [esi]
.text:004043BF                 mov     esi, ds:_iob
.text:004043C5                 add     esi, 40h ; '@'
.text:004043C8                 mov     [esp+5Ch+var_50], ecx
.text:004043CC                 mov     ebx, [edi]
.text:004043CE                 mov     [esp+5Ch+Str2], eax ; Format
.text:004043D2                 mov     [esp+5Ch+Str1], esi ; Stream
.text:004043D5                 mov     [esp+5Ch+MaxCount], ebx
.text:004043D9                 call    fprintf
.text:004043DE
.text:004043DE loc_4043DE:                             ; CODE XREF: sub_403F10+51D↓j
.text:004043DE                 mov     ebx, [ebp+0]
.text:004043E1
.text:004043E1 loc_4043E1:                             ; CODE XREF: sub_403F10+47F↑j
.text:004043E1                 mov     dword ptr [ebp+14h], offset dword_403DC0
.text:004043E8                 lea     edx, [ebx+1]
.text:004043EB                 mov     [ebp+0], edx
.text:004043EE
.text:004043EE loc_4043EE:                             ; CODE XREF: sub_403F10+999↓j
.text:004043EE                 mov     dword ptr [ebp+8], 0
.text:004043F5                 jmp     loc_404268
.text:004043FA ; ---------------------------------------------------------------------------
.text:004043FA
.text:004043FA loc_4043FA:                             ; CODE XREF: sub_403F10+48C↑j
.text:004043FA                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO_0 ; "%s: unrecognized option `--%s'\n"
.text:00404401                 call    ds:libintl_gettext
.text:00404407                 mov     ecx, [ebp+14h]
.text:0040440A                 mov     edi, [esp+5Ch+arg_4]
.text:0040440E                 mov     edx, ds:_iob
.text:00404414                 mov     [esp+5Ch+var_50], ecx
.text:00404418                 mov     ebx, [edi]
.text:0040441A                 add     edx, 40h ; '@'
.text:0040441D                 mov     [esp+5Ch+Str2], eax ; Format
.text:00404421                 mov     [esp+5Ch+MaxCount], ebx
.text:00404425                 mov     [esp+5Ch+Str1], edx ; Stream
.text:00404428                 call    fprintf
.text:0040442D                 jmp     short loc_4043DE
.text:0040442D ; ---------------------------------------------------------------------------
.text:0040442F                 align 10h
.text:00404430
.text:00404430 loc_404430:                             ; CODE XREF: sub_403F10+196↑j
.text:00404430                                         ; sub_403F10+1B5↑j ...
.text:00404430                 mov     esi, [ebp+14h]
.text:00404433                 movzx   ebx, byte ptr [esi]
.text:00404436                 inc     esi
.text:00404437                 mov     [ebp+14h], esi
.text:0040443A                 mov     ecx, [esp+5Ch+Str]
.text:0040443E                 movsx   esi, bl
.text:00404441                 mov     [esp+5Ch+Str2], esi ; Val
.text:00404445                 mov     edi, esi
.text:00404447                 mov     [esp+5Ch+Str1], ecx ; Str
.text:0040444A                 call    strchr
.text:0040444F                 mov     ecx, [ebp+14h]
.text:00404452                 cmp     byte ptr [ecx], 0
.text:00404455                 jnz     short loc_40445A
.text:00404457                 inc     dword ptr [ebp+0]
.text:0040445A
.text:0040445A loc_40445A:                             ; CODE XREF: sub_403F10+545↑j
.text:0040445A                 test    eax, eax
.text:0040445C                 jz      loc_404840
.text:00404462                 cmp     bl, 3Ah ; ':'
.text:00404465                 jz      loc_404840
.text:0040446B                 cmp     byte ptr [eax], 57h ; 'W'
.text:0040446E                 jz      loc_404526
.text:00404474                 movzx   edx, byte ptr [eax+1]
.text:00404478
.text:00404478 loc_404478:                             ; CODE XREF: sub_403F10+61D↓j
.text:00404478                 cmp     dl, 3Ah ; ':'
.text:0040447B                 jz      short loc_404484
.text:0040447D
.text:0040447D loc_40447D:                             ; CODE XREF: sub_403F10+590↓j
.text:0040447D                 mov     eax, esi
.text:0040447F                 jmp     loc_404067
.text:00404484 ; ---------------------------------------------------------------------------
.text:00404484
.text:00404484 loc_404484:                             ; CODE XREF: sub_403F10+56B↑j
.text:00404484                 cmp     byte ptr [eax+2], 3Ah ; ':'
.text:00404488                 jz      loc_404511
.text:0040448E                 cmp     byte ptr [ecx], 0
.text:00404491                 jz      short loc_4044A2
.text:00404493
.text:00404493 loc_404493:                             ; CODE XREF: sub_403F10+604↓j
.text:00404493                 inc     dword ptr [ebp+0]
.text:00404496                 mov     [ebp+0Ch], ecx
.text:00404499
.text:00404499 loc_404499:                             ; CODE XREF: sub_403F10+5AB↓j
.text:00404499                                         ; sub_403F10+5C6↓j ...
.text:00404499                 mov     dword ptr [ebp+14h], 0
.text:004044A0                 jmp     short loc_40447D
.text:004044A2 ; ---------------------------------------------------------------------------
.text:004044A2
.text:004044A2 loc_4044A2:                             ; CODE XREF: sub_403F10+581↑j
.text:004044A2                 mov     ecx, [ebp+0]
.text:004044A5                 cmp     ecx, [esp+5Ch+arg_0]
.text:004044A9                 jz      short loc_4044BD
.text:004044AB                 mov     eax, [esp+5Ch+arg_4]
.text:004044AF                 lea     edx, [ecx+1]
.text:004044B2                 mov     [ebp+0], edx
.text:004044B5                 mov     ebx, [eax+ecx*4]
.text:004044B8                 mov     [ebp+0Ch], ebx
.text:004044BB                 jmp     short loc_404499
.text:004044BD ; ---------------------------------------------------------------------------
.text:004044BD
.text:004044BD loc_4044BD:                             ; CODE XREF: sub_403F10+599↑j
.text:004044BD                 mov     ecx, [esp+5Ch+var_14]
.text:004044C1                 test    ecx, ecx
.text:004044C3                 jnz     short loc_4044DF
.text:004044C5
.text:004044C5 loc_4044C5:                             ; CODE XREF: sub_403F10+5FF↓j
.text:004044C5                 mov     [ebp+8], edi
.text:004044C8                 mov     edi, [esp+5Ch+Str]
.text:004044CC                 cmp     byte ptr [edi], 3Ah ; ':'
.text:004044CF                 jz      short loc_4044D8
.text:004044D1                 mov     esi, 3Fh ; '?'
.text:004044D6                 jmp     short loc_404499
.text:004044D8 ; ---------------------------------------------------------------------------
.text:004044D8
.text:004044D8 loc_4044D8:                             ; CODE XREF: sub_403F10+5BF↑j
.text:004044D8                 mov     esi, 3Ah ; ':'
.text:004044DD                 jmp     short loc_404499
.text:004044DF ; ---------------------------------------------------------------------------
.text:004044DF
.text:004044DF loc_4044DF:                             ; CODE XREF: sub_403F10+5B3↑j
.text:004044DF                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:004044E6                 call    ds:libintl_gettext
.text:004044EC                 mov     [esp+5Ch+var_50], edi
.text:004044F0                 mov     ebx, [esp+5Ch+arg_4]
.text:004044F4                 mov     edx, ds:_iob
.text:004044FA                 mov     esi, [ebx]
.text:004044FC                 add     edx, 40h ; '@'
.text:004044FF                 mov     [esp+5Ch+Str2], eax ; Format
.text:00404503                 mov     [esp+5Ch+MaxCount], esi
.text:00404507                 mov     [esp+5Ch+Str1], edx ; Stream
.text:0040450A                 call    fprintf
.text:0040450F                 jmp     short loc_4044C5
.text:00404511 ; ---------------------------------------------------------------------------
.text:00404511
.text:00404511 loc_404511:                             ; CODE XREF: sub_403F10+578↑j
.text:00404511                 cmp     byte ptr [ecx], 0
.text:00404514                 jnz     loc_404493
.text:0040451A                 mov     dword ptr [ebp+0Ch], 0
.text:00404521                 jmp     loc_404499
.text:00404526 ; ---------------------------------------------------------------------------
.text:00404526
.text:00404526 loc_404526:                             ; CODE XREF: sub_403F10+55E↑j
.text:00404526                 movzx   edx, byte ptr [eax+1]
.text:0040452A                 cmp     dl, 3Bh ; ';'
.text:0040452D                 jnz     loc_404478
.text:00404533                 mov     [esp+5Ch+var_2C], 0
.text:0040453B                 mov     [esp+5Ch+var_30], 0
.text:00404543                 mov     [esp+5Ch+var_34], 0
.text:0040454B                 mov     [esp+5Ch+var_38], 0
.text:00404553                 cmp     byte ptr [ecx], 0
.text:00404556                 jz      loc_4047CB
.text:0040455C                 inc     dword ptr [ebp+0]
.text:0040455F                 mov     [ebp+0Ch], ecx
.text:00404562
.text:00404562 loc_404562:                             ; CODE XREF: sub_403F10+8D4↓j
.text:00404562                 mov     edi, [ebp+0Ch]
.text:00404565                 mov     [ebp+14h], edi
.text:00404568                 movzx   eax, byte ptr [edi]
.text:0040456B                 test    al, al
.text:0040456D                 jz      short loc_40457F
.text:0040456F                 cmp     al, 3Dh ; '='
.text:00404571                 jz      short loc_40457F
.text:00404573
.text:00404573 loc_404573:                             ; CODE XREF: sub_403F10+66D↓j
.text:00404573                 inc     edi
.text:00404574                 movzx   eax, byte ptr [edi]
.text:00404577                 test    al, al
.text:00404579                 jz      short loc_40457F
.text:0040457B                 cmp     al, 3Dh ; '='
.text:0040457D                 jnz     short loc_404573
.text:0040457F
.text:0040457F loc_40457F:                             ; CODE XREF: sub_403F10+65D↑j
.text:0040457F                                         ; sub_403F10+661↑j ...
.text:0040457F                 mov     [esp+5Ch+var_3C], 0
.text:00404587                 mov     esi, [esp+5Ch+arg_C]
.text:0040458B                 mov     eax, [esi]
.text:0040458D                 test    eax, eax
.text:0040458F                 jz      loc_404710
.text:00404595                 mov     ecx, eax
.text:00404597
.text:00404597 loc_404597:                             ; CODE XREF: sub_403F10+6B3↓j
.text:00404597                 mov     ebx, [ebp+14h]
.text:0040459A                 mov     eax, edi
.text:0040459C                 mov     [esp+5Ch+Str1], ecx ; Str1
.text:0040459F                 sub     eax, ebx
.text:004045A1                 mov     [esp+5Ch+MaxCount], eax ; MaxCount
.text:004045A5                 mov     [esp+5Ch+Str2], ebx ; Str2
.text:004045A9                 call    strncmp
.text:004045AE                 test    eax, eax
.text:004045B0                 jz      loc_404777
.text:004045B6
.text:004045B6 loc_4045B6:                             ; CODE XREF: sub_403F10+88C↓j
.text:004045B6                                         ; sub_403F10+89D↓j
.text:004045B6                 inc     [esp+5Ch+var_3C]
.text:004045BA                 add     esi, 10h
.text:004045BD                 mov     edx, [esi]
.text:004045BF                 test    edx, edx
.text:004045C1                 mov     ecx, edx
.text:004045C3                 jnz     short loc_404597
.text:004045C5
.text:004045C5 loc_4045C5:                             ; CODE XREF: sub_403F10+8B6↓j
.text:004045C5                 mov     esi, [esp+5Ch+var_34]
.text:004045C9                 test    esi, esi
.text:004045CB                 jz      short loc_4045D9
.text:004045CD                 mov     ebx, [esp+5Ch+var_30]
.text:004045D1                 test    ebx, ebx
.text:004045D3                 jz      loc_404721
.text:004045D9
.text:004045D9 loc_4045D9:                             ; CODE XREF: sub_403F10+6BB↑j
.text:004045D9                 mov     esi, [esp+5Ch+var_2C]
.text:004045DD                 test    esi, esi
.text:004045DF                 jz      loc_404710
.text:004045E5                 cmp     byte ptr [edi], 0
.text:004045E8                 jz      loc_404690
.text:004045EE                 mov     ecx, [esp+5Ch+var_2C]
.text:004045F2                 mov     ebx, [ecx+4]
.text:004045F5                 test    ebx, ebx
.text:004045F7                 jz      short loc_404638
.text:004045F9                 lea     edx, [edi+1]
.text:004045FC                 mov     [ebp+0Ch], edx
.text:004045FF
.text:004045FF loc_4045FF:                             ; CODE XREF: sub_403F10+788↓j
.text:004045FF                                         ; sub_403F10+7A7↓j
.text:004045FF                 mov     edi, [ebp+14h]
.text:00404602                 mov     [esp+5Ch+Str1], edi ; Str
.text:00404605                 call    strlen
.text:0040460A                 add     [ebp+14h], eax
.text:0040460D                 mov     eax, [esp+5Ch+arg_10]
.text:00404611                 test    eax, eax
.text:00404613                 jz      short loc_404620
.text:00404615                 mov     edx, [esp+5Ch+var_38]
.text:00404619                 mov     ebp, [esp+5Ch+arg_10]
.text:0040461D                 mov     [ebp+0], edx
.text:00404620
.text:00404620 loc_404620:                             ; CODE XREF: sub_403F10+703↑j
.text:00404620                 mov     eax, [esp+5Ch+var_2C]
.text:00404624                 mov     ecx, [eax+8]
.text:00404627                 test    ecx, ecx
.text:00404629                 jnz     loc_4041EA
.text:0040462F                 mov     ecx, [esp+5Ch+var_2C]
.text:00404633                 jmp     loc_4041E2
.text:00404638 ; ---------------------------------------------------------------------------
.text:00404638
.text:00404638 loc_404638:                             ; CODE XREF: sub_403F10+6E7↑j
.text:00404638                 mov     eax, [esp+5Ch+var_14]
.text:0040463C                 test    eax, eax
.text:0040463E                 jnz     short loc_404653
.text:00404640
.text:00404640 loc_404640:                             ; CODE XREF: sub_403F10+779↓j
.text:00404640                 mov     ecx, [ebp+14h]
.text:00404643                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00404646                 call    strlen
.text:0040464B                 add     [ebp+14h], eax
.text:0040464E                 jmp     loc_404268
.text:00404653 ; ---------------------------------------------------------------------------
.text:00404653
.text:00404653 loc_404653:                             ; CODE XREF: sub_403F10+72E↑j
.text:00404653                 mov     [esp+5Ch+Str1], offset aSOptionWSDoesn ; "%s: option `-W %s' doesn't allow an arg"...
.text:0040465A                 call    ds:libintl_gettext
.text:00404660                 mov     edx, [esp+5Ch+var_2C]
.text:00404664                 mov     ebx, [esp+5Ch+arg_4]
.text:00404668                 mov     edi, [edx]
.text:0040466A                 mov     [esp+5Ch+var_50], edi
.text:0040466E                 mov     edi, ds:_iob
.text:00404674                 mov     esi, [ebx]
.text:00404676                 mov     [esp+5Ch+Str2], eax ; Format
.text:0040467A                 add     edi, 40h ; '@'
.text:0040467D                 mov     [esp+5Ch+MaxCount], esi
.text:00404681                 mov     [esp+5Ch+Str1], edi ; Stream
.text:00404684                 call    fprintf
.text:00404689                 jmp     short loc_404640
.text:00404689 ; ---------------------------------------------------------------------------
.text:0040468B                 align 10h
.text:00404690
.text:00404690 loc_404690:                             ; CODE XREF: sub_403F10+6D8↑j
.text:00404690                 mov     esi, [esp+5Ch+var_2C]
.text:00404694                 cmp     dword ptr [esi+4], 1
.text:00404698                 jnz     loc_4045FF
.text:0040469E                 mov     ecx, [ebp+0]
.text:004046A1                 cmp     ecx, [esp+5Ch+arg_0]
.text:004046A5                 jge     short loc_4046BC
.text:004046A7                 mov     eax, [esp+5Ch+arg_4]
.text:004046AB                 lea     ebx, [ecx+1]
.text:004046AE                 mov     [ebp+0], ebx
.text:004046B1                 mov     edi, [eax+ecx*4]
.text:004046B4                 mov     [ebp+0Ch], edi
.text:004046B7                 jmp     loc_4045FF
.text:004046BC ; ---------------------------------------------------------------------------
.text:004046BC
.text:004046BC loc_4046BC:                             ; CODE XREF: sub_403F10+795↑j
.text:004046BC                 mov     edx, [esp+5Ch+var_14]
.text:004046C0                 test    edx, edx
.text:004046C2                 jnz     short loc_4046D7
.text:004046C4
.text:004046C4 loc_4046C4:                             ; CODE XREF: sub_403F10+7FE↓j
.text:004046C4                 mov     edx, [ebp+14h]
.text:004046C7                 mov     [esp+5Ch+Str1], edx ; Str
.text:004046CA                 call    strlen
.text:004046CF                 add     [ebp+14h], eax
.text:004046D2                 jmp     loc_4042F9
.text:004046D7 ; ---------------------------------------------------------------------------
.text:004046D7
.text:004046D7 loc_4046D7:                             ; CODE XREF: sub_403F10+7B2↑j
.text:004046D7                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:004046DE                 call    ds:libintl_gettext
.text:004046E4                 mov     ecx, [ebp+0]
.text:004046E7                 mov     ebx, [esp+5Ch+arg_4]
.text:004046EB                 mov     edi, [ebx+ecx*4-4]
.text:004046EF                 mov     ecx, ds:_iob
.text:004046F5                 mov     [esp+5Ch+var_50], edi
.text:004046F9                 mov     esi, [ebx]
.text:004046FB                 add     ecx, 40h ; '@'
.text:004046FE                 mov     [esp+5Ch+Str2], eax ; Format
.text:00404702                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00404705                 mov     [esp+5Ch+MaxCount], esi
.text:00404709                 call    fprintf
.text:0040470E                 jmp     short loc_4046C4
.text:00404710 ; ---------------------------------------------------------------------------
.text:00404710
.text:00404710 loc_404710:                             ; CODE XREF: sub_403F10+67F↑j
.text:00404710                                         ; sub_403F10+6CF↑j
.text:00404710                 mov     dword ptr [ebp+14h], 0
.text:00404717                 mov     eax, 57h ; 'W'
.text:0040471C                 jmp     loc_404067
.text:00404721 ; ---------------------------------------------------------------------------
.text:00404721
.text:00404721 loc_404721:                             ; CODE XREF: sub_403F10+6C3↑j
.text:00404721                 mov     edi, [esp+5Ch+var_14]
.text:00404725                 test    edi, edi
.text:00404727                 jnz     short loc_40473F
.text:00404729
.text:00404729 loc_404729:                             ; CODE XREF: sub_403F10+865↓j
.text:00404729                 mov     edx, [ebp+14h]
.text:0040472C                 mov     [esp+5Ch+Str1], edx ; Str
.text:0040472F                 call    strlen
.text:00404734                 add     [ebp+14h], eax
.text:00404737                 inc     dword ptr [ebp+0]
.text:0040473A                 jmp     loc_404268
.text:0040473F ; ---------------------------------------------------------------------------
.text:0040473F
.text:0040473F loc_40473F:                             ; CODE XREF: sub_403F10+817↑j
.text:0040473F                 mov     [esp+5Ch+Str1], offset aSOptionWSIsAmb ; "%s: option `-W %s' is ambiguous\n"
.text:00404746                 call    ds:libintl_gettext
.text:0040474C                 mov     ecx, [ebp+0]
.text:0040474F                 mov     ebx, [esp+5Ch+arg_4]
.text:00404753                 mov     edi, [ebx+ecx*4]
.text:00404756                 mov     ecx, ds:_iob
.text:0040475C                 mov     [esp+5Ch+var_50], edi
.text:00404760                 mov     esi, [ebx]
.text:00404762                 add     ecx, 40h ; '@'
.text:00404765                 mov     [esp+5Ch+Str2], eax ; Format
.text:00404769                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:0040476C                 mov     [esp+5Ch+MaxCount], esi
.text:00404770                 call    fprintf
.text:00404775                 jmp     short loc_404729
.text:00404777 ; ---------------------------------------------------------------------------
.text:00404777
.text:00404777 loc_404777:                             ; CODE XREF: sub_403F10+6A0↑j
.text:00404777                 mov     edx, [ebp+14h]
.text:0040477A                 mov     ebx, edi
.text:0040477C                 mov     ecx, [esi]
.text:0040477E                 sub     ebx, edx
.text:00404780                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00404783                 call    strlen
.text:00404788                 cmp     ebx, eax
.text:0040478A                 jz      short loc_4047B2
.text:0040478C                 mov     ebx, [esp+5Ch+var_2C]
.text:00404790                 test    ebx, ebx
.text:00404792                 jz      short loc_4047A1
.text:00404794                 mov     [esp+5Ch+var_34], 1
.text:0040479C                 jmp     loc_4045B6
.text:004047A1 ; ---------------------------------------------------------------------------
.text:004047A1
.text:004047A1 loc_4047A1:                             ; CODE XREF: sub_403F10+882↑j
.text:004047A1                 mov     [esp+5Ch+var_2C], esi
.text:004047A5                 mov     ecx, [esp+5Ch+var_3C]
.text:004047A9                 mov     [esp+5Ch+var_38], ecx
.text:004047AD                 jmp     loc_4045B6
.text:004047B2 ; ---------------------------------------------------------------------------
.text:004047B2
.text:004047B2 loc_4047B2:                             ; CODE XREF: sub_403F10+87A↑j
.text:004047B2                 mov     [esp+5Ch+var_2C], esi
.text:004047B6                 mov     eax, [esp+5Ch+var_3C]
.text:004047BA                 mov     [esp+5Ch+var_30], 1
.text:004047C2                 mov     [esp+5Ch+var_38], eax
.text:004047C6                 jmp     loc_4045C5
.text:004047CB ; ---------------------------------------------------------------------------
.text:004047CB
.text:004047CB loc_4047CB:                             ; CODE XREF: sub_403F10+646↑j
.text:004047CB                 mov     edx, [ebp+0]
.text:004047CE                 cmp     edx, [esp+5Ch+arg_0]
.text:004047D2                 jz      short loc_4047E9
.text:004047D4                 mov     ebx, [esp+5Ch+arg_4]
.text:004047D8                 lea     esi, [edx+1]
.text:004047DB                 mov     [ebp+0], esi
.text:004047DE                 mov     edi, [ebx+edx*4]
.text:004047E1                 mov     [ebp+0Ch], edi
.text:004047E4                 jmp     loc_404562
.text:004047E9 ; ---------------------------------------------------------------------------
.text:004047E9
.text:004047E9 loc_4047E9:                             ; CODE XREF: sub_403F10+8C2↑j
.text:004047E9                 mov     edi, [esp+5Ch+var_14]
.text:004047ED                 test    edi, edi
.text:004047EF                 jnz     short loc_40480C
.text:004047F1
.text:004047F1 loc_4047F1:                             ; CODE XREF: sub_403F10+92C↓j
.text:004047F1                 mov     [ebp+8], esi
.text:004047F4                 mov     ebp, [esp+5Ch+Str]
.text:004047F8                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:004047FC                 jz      short loc_404808
.text:004047FE                 mov     bl, 3Fh ; '?'
.text:00404800
.text:00404800 loc_404800:                             ; CODE XREF: sub_403F10+8FA↓j
.text:00404800                 movsx   eax, bl
.text:00404803                 jmp     loc_404067
.text:00404808 ; ---------------------------------------------------------------------------
.text:00404808
.text:00404808 loc_404808:                             ; CODE XREF: sub_403F10+8EC↑j
.text:00404808                 mov     bl, 3Ah ; ':'
.text:0040480A                 jmp     short loc_404800
.text:0040480C ; ---------------------------------------------------------------------------
.text:0040480C
.text:0040480C loc_40480C:                             ; CODE XREF: sub_403F10+8DF↑j
.text:0040480C                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:00404813                 call    ds:libintl_gettext
.text:00404819                 mov     [esp+5Ch+var_50], esi
.text:0040481D                 mov     edx, [esp+5Ch+arg_4]
.text:00404821                 mov     ecx, ds:_iob
.text:00404827                 mov     ebx, [edx]
.text:00404829                 add     ecx, 40h ; '@'
.text:0040482C                 mov     [esp+5Ch+Str2], eax ; Format
.text:00404830                 mov     [esp+5Ch+MaxCount], ebx
.text:00404834                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00404837                 call    fprintf
.text:0040483C                 jmp     short loc_4047F1
.text:0040483C ; ---------------------------------------------------------------------------
.text:0040483E                 align 10h
.text:00404840
.text:00404840 loc_404840:                             ; CODE XREF: sub_403F10+54C↑j
.text:00404840                                         ; sub_403F10+555↑j
.text:00404840                 mov     eax, [esp+5Ch+var_14]
.text:00404844                 test    eax, eax
.text:00404846                 jz      short loc_40487F
.text:00404848                 mov     ebx, [ebp+1Ch]
.text:0040484B                 test    ebx, ebx
.text:0040484D                 jz      short loc_404887
.text:0040484F                 mov     [esp+5Ch+Str1], offset aSIllegalOption ; "%s: illegal option -- %c\n"
.text:00404856
.text:00404856 loc_404856:                             ; CODE XREF: sub_403F10+97E↓j
.text:00404856                 call    ds:libintl_gettext
.text:0040485C                 mov     [esp+5Ch+var_50], esi
.text:00404860                 mov     ebx, [esp+5Ch+arg_4]
.text:00404864                 mov     edx, ds:_iob
.text:0040486A                 mov     esi, [ebx]
.text:0040486C                 add     edx, 40h ; '@'
.text:0040486F                 mov     [esp+5Ch+Str2], eax ; Format
.text:00404873                 mov     [esp+5Ch+MaxCount], esi
.text:00404877                 mov     [esp+5Ch+Str1], edx ; Stream
.text:0040487A                 call    fprintf
.text:0040487F
.text:0040487F loc_40487F:                             ; CODE XREF: sub_403F10+936↑j
.text:0040487F                 mov     [ebp+8], edi
.text:00404882                 jmp     loc_404268
.text:00404887 ; ---------------------------------------------------------------------------
.text:00404887
.text:00404887 loc_404887:                             ; CODE XREF: sub_403F10+93D↑j
.text:00404887                 mov     [esp+5Ch+Str1], offset aSInvalidOption ; "%s: invalid option -- %c\n"
.text:0040488E                 jmp     short loc_404856
.text:00404890 ; ---------------------------------------------------------------------------
.text:00404890
.text:00404890 loc_404890:                             ; CODE XREF: sub_403F10+26E↑j
.text:00404890                 mov     edi, [esp+5Ch+var_14]
.text:00404894                 test    edi, edi
.text:00404896                 jnz     short loc_4048AE
.text:00404898
.text:00404898 loc_404898:                             ; CODE XREF: sub_403F10+9D4↓j
.text:00404898                 mov     edx, [ebp+14h]
.text:0040489B                 mov     [esp+5Ch+Str1], edx ; Str
.text:0040489E                 call    strlen
.text:004048A3                 add     [ebp+14h], eax
.text:004048A6                 inc     dword ptr [ebp+0]
.text:004048A9                 jmp     loc_4043EE
.text:004048AE ; ---------------------------------------------------------------------------
.text:004048AE
.text:004048AE loc_4048AE:                             ; CODE XREF: sub_403F10+986↑j
.text:004048AE                 mov     [esp+5Ch+Str1], offset aSOptionSIsAmbi ; "%s: option `%s' is ambiguous\n"
.text:004048B5                 call    ds:libintl_gettext
.text:004048BB                 mov     ebx, [ebp+0]
.text:004048BE                 mov     edi, [esp+5Ch+arg_4]
.text:004048C2                 mov     ecx, [edi+ebx*4]
.text:004048C5                 mov     ebx, ds:_iob
.text:004048CB                 mov     [esp+5Ch+var_50], ecx
.text:004048CF                 mov     esi, [edi]
.text:004048D1                 add     ebx, 40h ; '@'
.text:004048D4                 mov     [esp+5Ch+Str2], eax ; Format
.text:004048D8                 mov     [esp+5Ch+Str1], ebx ; Stream
.text:004048DB                 mov     [esp+5Ch+MaxCount], esi
.text:004048DF                 call    fprintf
.text:004048E4                 jmp     short loc_404898
.text:004048E6 ; ---------------------------------------------------------------------------
.text:004048E6
.text:004048E6 loc_4048E6:                             ; CODE XREF: sub_403F10+246↑j
.text:004048E6                 mov     ecx, [ebp+14h]
.text:004048E9                 mov     ebx, edi
.text:004048EB                 mov     edx, [esi]
.text:004048ED                 sub     ebx, ecx
.text:004048EF                 mov     [esp+5Ch+Str1], edx ; Str
.text:004048F2                 call    strlen
.text:004048F7                 cmp     ebx, eax
.text:004048F9                 jz      short loc_404951
.text:004048FB                 mov     ebx, [esp+5Ch+var_18]
.text:004048FF                 test    ebx, ebx
.text:00404901                 jz      short loc_404940
.text:00404903                 mov     edx, [esp+5Ch+arg_14]
.text:00404907                 test    edx, edx
.text:00404909                 jnz     short loc_404917
.text:0040490B                 mov     ecx, [esp+5Ch+var_18]
.text:0040490F                 mov     ebx, [esi+4]
.text:00404912                 cmp     [ecx+4], ebx
.text:00404915                 jz      short loc_404924
.text:00404917
.text:00404917 loc_404917:                             ; CODE XREF: sub_403F10+9F9↑j
.text:00404917                                         ; sub_403F10+A1A↓j ...
.text:00404917                 mov     [esp+5Ch+var_20], 1
.text:0040491F                 jmp     loc_40415C
.text:00404924 ; ---------------------------------------------------------------------------
.text:00404924
.text:00404924 loc_404924:                             ; CODE XREF: sub_403F10+A05↑j
.text:00404924                 mov     edx, [esi+8]
.text:00404927                 cmp     [ecx+8], edx
.text:0040492A                 jnz     short loc_404917
.text:0040492C                 mov     ebx, [esi+0Ch]
.text:0040492F                 cmp     [ecx+0Ch], ebx
.text:00404932                 jnz     short loc_404917
.text:00404934                 jmp     loc_40415C
.text:00404934 ; ---------------------------------------------------------------------------
.text:00404939                 align 10h
.text:00404940
.text:00404940 loc_404940:                             ; CODE XREF: sub_403F10+9F1↑j
.text:00404940                 mov     [esp+5Ch+var_18], esi
.text:00404944                 mov     eax, [esp+5Ch+var_28]
.text:00404948                 mov     [esp+5Ch+var_24], eax
.text:0040494C                 jmp     loc_40415C
.text:00404951 ; ---------------------------------------------------------------------------
.text:00404951
.text:00404951 loc_404951:                             ; CODE XREF: sub_403F10+9E9↑j
.text:00404951                 mov     [esp+5Ch+var_18], esi
.text:00404955                 mov     ecx, [esp+5Ch+var_28]
.text:00404959                 mov     [esp+5Ch+var_1C], 1
.text:00404961                 mov     [esp+5Ch+var_24], ecx
.text:00404965                 jmp     loc_404170
.text:0040496A ; ---------------------------------------------------------------------------
.text:0040496A
.text:0040496A loc_40496A:                             ; CODE XREF: sub_403F10+1BF↑j
.text:0040496A                 mov     eax, [esp+5Ch+Str]
.text:0040496E                 movsx   esi, dl
.text:00404971                 mov     [esp+5Ch+Str2], esi ; Val
.text:00404975                 mov     [esp+5Ch+Str1], eax ; Str
.text:00404978                 call    strchr
.text:0040497D                 test    eax, eax
.text:0040497F                 jnz     loc_404430
.text:00404985                 jmp     loc_4040D5
.text:0040498A ; ---------------------------------------------------------------------------
.text:0040498A
.text:0040498A loc_40498A:                             ; CODE XREF: sub_403F10+17C↑j
.text:0040498A                 mov     ecx, 1
.text:0040498F                 jmp     loc_404092
.text:00404994 ; ---------------------------------------------------------------------------
.text:00404994
.text:00404994 loc_404994:                             ; CODE XREF: sub_403F10+D4↑j
.text:00404994                                         ; sub_403F10+130↑j
.text:00404994                 mov     eax, [ebp+20h]
.text:00404997                 cmp     eax, [ebp+24h]
.text:0040499A                 jz      loc_404070
.text:004049A0                 mov     [ebp+0], eax
.text:004049A3                 jmp     loc_404070
.text:004049A8 ; ---------------------------------------------------------------------------
.text:004049A8
.text:004049A8 loc_4049A8:                             ; CODE XREF: sub_403F10+FE↑j
.text:004049A8                 mov     [ebp+20h], eax
.text:004049AB                 jmp     loc_404030
.text:004049B0 ; ---------------------------------------------------------------------------
.text:004049B0
.text:004049B0 loc_4049B0:                             ; CODE XREF: sub_403F10+CA↑j
.text:004049B0                 mov     edx, [ebp+20h]
.text:004049B3                 mov     eax, [ebp+24h]
.text:004049B6                 cmp     edx, eax
.text:004049B8                 jz      short loc_404A30
.text:004049BA                 cmp     eax, ebx
.text:004049BC                 jz      short loc_4049D1
.text:004049BE                 mov     [esp+5Ch+Str2], ebp
.text:004049C2                 mov     ebx, [esp+5Ch+arg_4]
.text:004049C6                 mov     [esp+5Ch+Str1], ebx
.text:004049C9                 call    sub_404BC0
.text:004049CE                 mov     ebx, [ebp+0]
.text:004049D1
.text:004049D1 loc_4049D1:                             ; CODE XREF: sub_403F10+AAC↑j
.text:004049D1                                         ; sub_403F10+B22↓j ...
.text:004049D1                 cmp     ebx, [esp+5Ch+arg_0]
.text:004049D5                 jge     short loc_404A20
.text:004049D7                 mov     esi, [esp+5Ch+arg_4]
.text:004049DB                 mov     eax, [esi+ebx*4]
.text:004049DE                 cmp     byte ptr [eax], 2Dh ; '-'
.text:004049E1                 jz      short loc_404A28
.text:004049E3                 lea     esi, [esi+0]
.text:004049E9                 lea     edi, [edi+0]
.text:004049F0
.text:004049F0 loc_4049F0:                             ; CODE XREF: sub_403F10+AFC↓j
.text:004049F0                                         ; sub_403F10+B1C↓j
.text:004049F0                 lea     eax, [ebx+1]
.text:004049F3                 mov     ebx, eax
.text:004049F5                 mov     [ebp+0], eax
.text:004049F8                 cmp     eax, [esp+5Ch+arg_0]
.text:004049FC                 jge     short loc_404A20
.text:004049FE                 mov     edi, [esp+5Ch+arg_4]
.text:00404A02                 mov     edx, [edi+eax*4]
.text:00404A05                 cmp     byte ptr [edx], 2Dh ; '-'
.text:00404A08                 jz      short loc_404A10
.text:00404A0A
.text:00404A0A loc_404A0A:                             ; CODE XREF: sub_403F10+B04↓j
.text:00404A0A                 mov     ebx, eax
.text:00404A0C                 jmp     short loc_4049F0
.text:00404A0C ; ---------------------------------------------------------------------------
.text:00404A0E                 align 10h
.text:00404A10
.text:00404A10 loc_404A10:                             ; CODE XREF: sub_403F10+AF8↑j
.text:00404A10                 cmp     byte ptr [edx+1], 0
.text:00404A14                 jz      short loc_404A0A
.text:00404A16                 lea     esi, [esi+0]
.text:00404A19                 lea     edi, [edi+0]
.text:00404A20
.text:00404A20 loc_404A20:                             ; CODE XREF: sub_403F10+AC5↑j
.text:00404A20                                         ; sub_403F10+AEC↑j ...
.text:00404A20                 mov     [ebp+24h], ebx
.text:00404A23                 jmp     loc_403FE0
.text:00404A28 ; ---------------------------------------------------------------------------
.text:00404A28
.text:00404A28 loc_404A28:                             ; CODE XREF: sub_403F10+AD1↑j
.text:00404A28                 cmp     byte ptr [eax+1], 0
.text:00404A2C                 jz      short loc_4049F0
.text:00404A2E                 jmp     short loc_404A20
.text:00404A30 ; ---------------------------------------------------------------------------
.text:00404A30
.text:00404A30 loc_404A30:                             ; CODE XREF: sub_403F10+AA8↑j
.text:00404A30                 cmp     edx, ebx
.text:00404A32                 jz      short loc_4049D1
.text:00404A34                 mov     [ebp+20h], ebx
.text:00404A37                 jmp     short loc_4049D1
.text:00404A39 ; ---------------------------------------------------------------------------
.text:00404A39
.text:00404A39 loc_404A39:                             ; CODE XREF: sub_403F10+88↑j
.text:00404A39                 mov     dword ptr [ebp+18h], 0
.text:00404A40                 mov     esi, [esp+5Ch+Str]
.text:00404A44
.text:00404A44 loc_404A44:                             ; CODE XREF: sub_403F10+B49↓j
.text:00404A44                 inc     esi
.text:00404A45                 jmp     loc_403FA8
.text:00404A45 ; ---------------------------------------------------------------------------
.text:00404A4A                 align 10h
.text:00404A50
.text:00404A50 loc_404A50:                             ; CODE XREF: sub_403F10+80↑j
.text:00404A50                 mov     dword ptr [ebp+18h], 2
.text:00404A57                 mov     esi, ecx
.text:00404A59                 jmp     short loc_404A44
.text:00404A59 ; ---------------------------------------------------------------------------
.text:00404A5B                 align 10h
.text:00404A60
.text:00404A60 loc_404A60:                             ; CODE XREF: sub_403F10+69↑j
.text:00404A60                 mov     [esp+5Ch+Str1], offset aPosixlyCorrect_0 ; "POSIXLY_CORRECT"
.text:00404A67                 call    getenv
.text:00404A6C                 test    eax, eax
.text:00404A6E                 jz      loc_403F84
.text:00404A74                 jmp     loc_403F7F
.text:00404A74 ; ---------------------------------------------------------------------------
.text:00404A79                 align 10h
.text:00404A80
.text:00404A80 loc_404A80:                             ; CODE XREF: sub_403F10+3F↑j
.text:00404A80                 mov     dword ptr [ebp+0], 1
.text:00404A87                 mov     ebx, 1
.text:00404A8C                 jmp     loc_403F60
.text:00404A8C sub_403F10      endp
.text:00404A8C
.text:00404A91 ; ---------------------------------------------------------------------------
.text:00404A91                 jmp     short sub_404AA0
.text:00404A91 ; ---------------------------------------------------------------------------
.text:00404A93                 align 10h
.text:00404AA0
.text:00404AA0 ; =============== S U B R O U T I N E =======================================
.text:00404AA0
.text:00404AA0
.text:00404AA0 ; int __cdecl sub_404AA0(int, int, char *, int, int, int, int)
.text:00404AA0 sub_404AA0      proc near               ; CODE XREF: .text:00404A91↑j
.text:00404AA0                                         ; sub_4051E0+3A↓p ...
.text:00404AA0
.text:00404AA0 var_2C          = dword ptr -2Ch
.text:00404AA0 var_28          = dword ptr -28h
.text:00404AA0 Str             = dword ptr -24h
.text:00404AA0 var_20          = dword ptr -20h
.text:00404AA0 var_1C          = dword ptr -1Ch
.text:00404AA0 var_18          = dword ptr -18h
.text:00404AA0 var_14          = dword ptr -14h
.text:00404AA0 var_10          = dword ptr -10h
.text:00404AA0 arg_0           = dword ptr  4
.text:00404AA0 arg_4           = dword ptr  8
.text:00404AA0 arg_8           = dword ptr  0Ch
.text:00404AA0 arg_C           = dword ptr  10h
.text:00404AA0 arg_10          = dword ptr  14h
.text:00404AA0 arg_14          = dword ptr  18h
.text:00404AA0 arg_18          = dword ptr  1Ch
.text:00404AA0
.text:00404AA0                 sub     esp, 2Ch
.text:00404AA3                 mov     edx, dword_40B010
.text:00404AA9                 mov     [esp+2Ch+var_10], offset dword_40C060 ; int
.text:00404AB1                 mov     ecx, dword_40B014
.text:00404AB7                 mov     ds:dword_40C060, edx
.text:00404ABD                 mov     edx, [esp+2Ch+arg_18]
.text:00404AC1                 mov     ds:dword_40C064, ecx
.text:00404AC7                 mov     ecx, [esp+2Ch+arg_14]
.text:00404ACB                 mov     [esp+2Ch+var_14], edx ; int
.text:00404ACF                 mov     edx, [esp+2Ch+arg_10]
.text:00404AD3                 mov     [esp+2Ch+var_18], ecx ; int
.text:00404AD7                 mov     ecx, [esp+2Ch+arg_C]
.text:00404ADB                 mov     [esp+2Ch+var_1C], edx ; int
.text:00404ADF                 mov     edx, [esp+2Ch+arg_8]
.text:00404AE3                 mov     [esp+2Ch+var_20], ecx ; int
.text:00404AE7                 mov     ecx, [esp+2Ch+arg_4]
.text:00404AEB                 mov     [esp+2Ch+Str], edx ; Str
.text:00404AEF                 mov     edx, [esp+2Ch+arg_0]
.text:00404AF3                 mov     [esp+2Ch+var_28], ecx ; int
.text:00404AF7                 mov     [esp+2Ch+var_2C], edx ; int
.text:00404AFA                 call    sub_403F10
.text:00404AFF                 mov     ecx, ds:dword_40C060
.text:00404B05                 mov     dword_40B010, ecx
.text:00404B0B                 mov     ecx, ds:dword_40C06C
.text:00404B11                 mov     ds:dword_40C220, ecx
.text:00404B17                 mov     ecx, ds:dword_40C068
.text:00404B1D                 mov     dword_40B018, ecx
.text:00404B23                 add     esp, 2Ch
.text:00404B26                 retn
.text:00404B26 sub_404AA0      endp
.text:00404B26
.text:00404B26 ; ---------------------------------------------------------------------------
.text:00404B27                 align 10h
.text:00404B30                 sub     esp, 2Ch
.text:00404B33                 mov     edx, dword_40B010
.text:00404B39                 mov     dword ptr [esp+1Ch], offset dword_40C060
.text:00404B41                 mov     ecx, dword_40B014
.text:00404B47                 mov     dword ptr [esp+18h], 1
.text:00404B4F                 mov     ds:dword_40C060, edx
.text:00404B55                 mov     edx, [esp+38h]
.text:00404B59                 mov     ds:dword_40C064, ecx
.text:00404B5F                 mov     ecx, [esp+34h]
.text:00404B63                 mov     [esp+8], edx
.text:00404B67                 mov     edx, [esp+30h]
.text:00404B6B                 mov     [esp+4], ecx
.text:00404B6F                 mov     dword ptr [esp+14h], 0
.text:00404B77                 mov     dword ptr [esp+10h], 0
.text:00404B7F                 mov     dword ptr [esp+0Ch], 0
.text:00404B87                 mov     [esp], edx
.text:00404B8A                 call    sub_403F10
.text:00404B8F                 mov     ecx, ds:dword_40C060
.text:00404B95                 mov     dword_40B010, ecx
.text:00404B9B                 mov     ecx, ds:dword_40C06C
.text:00404BA1                 mov     ds:dword_40C220, ecx
.text:00404BA7                 mov     ecx, ds:dword_40C068
.text:00404BAD                 mov     dword_40B018, ecx
.text:00404BB3                 add     esp, 2Ch
.text:00404BB6                 retn
.text:00404BB6 ; ---------------------------------------------------------------------------
.text:00404BB7                 align 10h
.text:00404BC0
.text:00404BC0 ; =============== S U B R O U T I N E =======================================
.text:00404BC0
.text:00404BC0
.text:00404BC0 sub_404BC0      proc near               ; CODE XREF: sub_403F10+113↑p
.text:00404BC0                                         ; sub_403F10+AB9↑p
.text:00404BC0
.text:00404BC0 var_2C          = dword ptr -2Ch
.text:00404BC0 var_28          = dword ptr -28h
.text:00404BC0 var_24          = dword ptr -24h
.text:00404BC0 var_20          = dword ptr -20h
.text:00404BC0 var_1C          = dword ptr -1Ch
.text:00404BC0 var_18          = dword ptr -18h
.text:00404BC0 var_14          = dword ptr -14h
.text:00404BC0 arg_0           = dword ptr  4
.text:00404BC0 arg_4           = dword ptr  8
.text:00404BC0
.text:00404BC0                 push    ebp
.text:00404BC1                 push    edi
.text:00404BC2                 push    esi
.text:00404BC3                 push    ebx
.text:00404BC4                 sub     esp, 1Ch
.text:00404BC7                 mov     ecx, [esp+2Ch+arg_4]
.text:00404BCB                 mov     eax, [esp+2Ch+arg_4]
.text:00404BCF                 mov     ebx, [esp+2Ch+arg_4]
.text:00404BD3                 mov     edx, [ecx+20h]
.text:00404BD6                 mov     edi, [esp+2Ch+arg_0]
.text:00404BDA                 mov     ecx, [ebx]
.text:00404BDC                 mov     [esp+2Ch+var_2C], edx
.text:00404BDF                 mov     [esp+2Ch+var_14], edx
.text:00404BE3                 mov     edx, [eax+24h]
.text:00404BE6                 mov     [esp+2Ch+var_28], ecx
.text:00404BEA                 mov     [esp+2Ch+var_1C], ecx
.text:00404BEE                 cmp     ecx, edx
.text:00404BF0                 mov     [esp+2Ch+var_18], edx
.text:00404BF4                 jle     short loc_404C70
.text:00404BF6                 mov     esi, [esp+2Ch+var_2C]
.text:00404BF9                 cmp     edx, esi
.text:00404BFB                 jle     short loc_404C70
.text:00404BFD                 lea     esi, [esi+0]
.text:00404C00
.text:00404C00 loc_404C00:                             ; CODE XREF: sub_404BC0+A1↓j
.text:00404C00                 mov     ebx, [esp+2Ch+var_1C]
.text:00404C04                 mov     edx, [esp+2Ch+var_18]
.text:00404C08                 mov     ebp, [esp+2Ch+var_18]
.text:00404C0C                 mov     eax, [esp+2Ch+var_14]
.text:00404C10                 sub     ebx, edx
.text:00404C12                 mov     [esp+2Ch+var_20], ebx
.text:00404C16                 sub     ebp, eax
.text:00404C18                 cmp     ebx, ebp
.text:00404C1A                 jle     short loc_404C95
.text:00404C1C                 xor     esi, esi
.text:00404C1E                 cmp     esi, ebp
.text:00404C20                 jge     short loc_404C4D
.text:00404C22                 mov     ecx, [esp+2Ch+var_1C]
.text:00404C26                 sub     ecx, ebp
.text:00404C28                 mov     [esp+2Ch+var_24], ecx
.text:00404C2C                 lea     esi, [esi+0]
.text:00404C30
.text:00404C30 loc_404C30:                             ; CODE XREF: sub_404BC0+8B↓j
.text:00404C30                 mov     ecx, [esp+2Ch+var_14]
.text:00404C34                 mov     edx, [esp+2Ch+var_24]
.text:00404C38                 add     ecx, esi
.text:00404C3A                 add     edx, esi
.text:00404C3C                 mov     ebx, [edi+ecx*4]
.text:00404C3F                 mov     eax, [edi+edx*4]
.text:00404C42                 inc     esi
.text:00404C43                 cmp     esi, ebp
.text:00404C45                 mov     [edi+ecx*4], eax
.text:00404C48                 mov     [edi+edx*4], ebx
.text:00404C4B                 jl      short loc_404C30
.text:00404C4D
.text:00404C4D loc_404C4D:                             ; CODE XREF: sub_404BC0+60↑j
.text:00404C4D                 sub     [esp+2Ch+var_1C], ebp
.text:00404C51
.text:00404C51 loc_404C51:                             ; CODE XREF: sub_404BC0+107↓j
.text:00404C51                 mov     eax, [esp+2Ch+var_18]
.text:00404C55                 cmp     [esp+2Ch+var_1C], eax
.text:00404C59                 jle     short loc_404C70
.text:00404C5B                 mov     ebp, [esp+2Ch+var_14]
.text:00404C5F                 cmp     eax, ebp
.text:00404C61                 jg      short loc_404C00
.text:00404C63                 lea     esi, [esi+0]
.text:00404C69                 lea     edi, [edi+0]
.text:00404C70
.text:00404C70 loc_404C70:                             ; CODE XREF: sub_404BC0+34↑j
.text:00404C70                                         ; sub_404BC0+3B↑j ...
.text:00404C70                 mov     esi, [esp+2Ch+var_28]
.text:00404C74                 mov     ecx, [esp+2Ch+var_18]
.text:00404C78                 mov     eax, [esp+2Ch+var_2C]
.text:00404C7B                 mov     edi, [esp+2Ch+arg_4]
.text:00404C7F                 mov     edx, [esp+2Ch+var_28]
.text:00404C83                 sub     esi, ecx
.text:00404C85                 add     esi, eax
.text:00404C87                 mov     [edi+20h], esi
.text:00404C8A                 mov     [edi+24h], edx
.text:00404C8D                 add     esp, 1Ch
.text:00404C90                 pop     ebx
.text:00404C91                 pop     esi
.text:00404C92                 pop     edi
.text:00404C93                 pop     ebp
.text:00404C94                 retn
.text:00404C95 ; ---------------------------------------------------------------------------
.text:00404C95
.text:00404C95 loc_404C95:                             ; CODE XREF: sub_404BC0+5A↑j
.text:00404C95                 xor     esi, esi
.text:00404C97                 cmp     esi, [esp+2Ch+var_20]
.text:00404C9B                 jge     short loc_404CBF
.text:00404C9D                 lea     esi, [esi+0]
.text:00404CA0
.text:00404CA0 loc_404CA0:                             ; CODE XREF: sub_404BC0+FD↓j
.text:00404CA0                 mov     ebx, [esp+2Ch+var_14]
.text:00404CA4                 mov     ebp, [esp+2Ch+var_18]
.text:00404CA8                 add     ebx, esi
.text:00404CAA                 add     ebp, esi
.text:00404CAC                 mov     edx, [edi+ebx*4]
.text:00404CAF                 inc     esi
.text:00404CB0                 cmp     esi, [esp+2Ch+var_20]
.text:00404CB4                 mov     ecx, [edi+ebp*4]
.text:00404CB7                 mov     [edi+ebx*4], ecx
.text:00404CBA                 mov     [edi+ebp*4], edx
.text:00404CBD                 jl      short loc_404CA0
.text:00404CBF
.text:00404CBF loc_404CBF:                             ; CODE XREF: sub_404BC0+DB↑j
.text:00404CBF                 mov     esi, [esp+2Ch+var_20]
.text:00404CC3                 add     [esp+2Ch+var_14], esi
.text:00404CC7                 jmp     short loc_404C51
.text:00404CC7 sub_404BC0      endp
.text:00404CC7
.text:00404CC7 ; ---------------------------------------------------------------------------
.text:00404CC9                 align 20h
.text:00404CE0 aCopyrightC2005 db 'Copyright (C) 2005 Free Software Foundation, Inc.',0
.text:00404CE0                                         ; DATA XREF: .data:Buffer↓o
.text:00404D12 ; const char aSSS[]
.text:00404D12 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: sub_404FD0+50↓o
.text:00404D1E aWrittenByS     db 'Written by %s.',0Ah,0
.text:00404D1E                                         ; DATA XREF: sub_404FD0:loc_405071↓o
.text:00404D2E                 align 20h
.text:00404D40 aThisIsFreeSoft db 'This is free software; see the source for copying conditions.  Th'
.text:00404D40                                         ; DATA XREF: sub_404FD0+100↓o
.text:00404D40                 db 'ere is NO',0Ah
.text:00404D40                 db 'warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULA'
.text:00404D40                 db 'R PURPOSE.',0Ah,0
.text:00404DD8 aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.text:00404DD8                                         ; DATA XREF: sub_404FD0:loc_405111↓o
.text:00404DEF aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.text:00404DEF                                         ; DATA XREF: sub_404FD0:loc_40511D↓o
.text:00404E0B                 align 20h
.text:00404E20 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.text:00404E20                                         ; DATA XREF: sub_404FD0:loc_405129↓o
.text:00404E20                 db 'and %s.',0Ah,0
.text:00404E40 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.text:00404E40                                         ; DATA XREF: sub_404FD0:loc_405135↓o
.text:00404E40                 db '%s, and %s.',0Ah,0
.text:00404E64                 align 20h
.text:00404E80 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.text:00404E80                                         ; DATA XREF: sub_404FD0:loc_405141↓o
.text:00404E80                 db '%s, %s, and %s.',0Ah,0
.text:00404EA8                 align 20h
.text:00404EC0 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.text:00404EC0                                         ; DATA XREF: sub_404FD0:loc_40514D↓o
.text:00404EC0                 db '%s, %s, %s, and %s.',0Ah,0
.text:00404EEC                 align 20h
.text:00404F00 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.text:00404F00                                         ; DATA XREF: sub_404FD0:loc_405159↓o
.text:00404F00                 db '%s, %s, %s, %s,',0Ah
.text:00404F00                 db 'and %s.',0Ah,0
.text:00404F30                 align 20h
.text:00404F40 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.text:00404F40                                         ; DATA XREF: sub_404FD0:loc_405165↓o
.text:00404F40                 db '%s, %s, %s, %s,',0Ah
.text:00404F40                 db '%s, and %s.',0Ah,0
.text:00404F74                 align 10h
.text:00404F80 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.text:00404F80                                         ; DATA XREF: sub_404FD0:def_40503D↓o
.text:00404F80                 db '%s, %s, %s, %s,',0Ah
.text:00404F80                 db '%s, %s, and others.',0Ah,0
.text:00404FBC ; const char aSS[]
.text:00404FBC aSS             db '%s %s',0Ah,0        ; DATA XREF: sub_404FD0+1B5↓o
.text:00404FC3                 align 10h
.text:00404FD0
.text:00404FD0 ; =============== S U B R O U T I N E =======================================
.text:00404FD0
.text:00404FD0
.text:00404FD0 ; int __cdecl sub_404FD0(FILE *, FILE *, int, int, va_list)
.text:00404FD0 sub_404FD0      proc near               ; CODE XREF: sub_403280+A5↑p
.text:00404FD0                                         ; .text:004051CA↓p
.text:00404FD0
.text:00404FD0 Stream          = dword ptr -2Ch
.text:00404FD0 Format          = dword ptr -28h
.text:00404FD0 ArgList         = dword ptr -24h
.text:00404FD0 var_20          = dword ptr -20h
.text:00404FD0 var_1C          = dword ptr -1Ch
.text:00404FD0 var_14          = dword ptr -14h
.text:00404FD0 arg_0           = dword ptr  4
.text:00404FD0 arg_4           = dword ptr  8
.text:00404FD0 arg_8           = dword ptr  0Ch
.text:00404FD0 arg_C           = dword ptr  10h
.text:00404FD0 arg_10          = dword ptr  14h
.text:00404FD0
.text:00404FD0                 push    ebp
.text:00404FD1                 push    edi
.text:00404FD2                 push    esi
.text:00404FD3                 push    ebx
.text:00404FD4                 sub     esp, 1Ch
.text:00404FD7                 xor     ebx, ebx
.text:00404FD9                 mov     edi, [esp+2Ch+arg_10]
.text:00404FDD                 mov     edx, [esp+2Ch+arg_8]
.text:00404FE1                 mov     esi, [esp+2Ch+arg_0]
.text:00404FE5                 mov     eax, [edi]
.text:00404FE7                 mov     ecx, [esp+2Ch+arg_4]
.text:00404FEB                 mov     [esp+2Ch+var_14], edx
.text:00404FEF                 mov     ebp, [esp+2Ch+arg_C]
.text:00404FF3                 lea     edx, [edi+4]
.text:00404FF6                 test    eax, eax
.text:00404FF8                 jz      short loc_40500C
.text:00404FFA                 lea     esi, [esi+0]
.text:00405000
.text:00405000 loc_405000:                             ; CODE XREF: sub_404FD0+3A↓j
.text:00405000                 mov     eax, edx
.text:00405002                 inc     ebx
.text:00405003                 mov     eax, [eax]
.text:00405005                 add     edx, 4
.text:00405008                 test    eax, eax
.text:0040500A                 jnz     short loc_405000
.text:0040500C
.text:0040500C loc_40500C:                             ; CODE XREF: sub_404FD0+28↑j
.text:0040500C                 test    ecx, ecx
.text:0040500E                 jz      loc_40517D
.text:00405014                 mov     [esp+2Ch+var_1C], ebp
.text:00405018                 mov     edx, [esp+2Ch+var_14]
.text:0040501C                 mov     [esp+2Ch+ArgList], ecx
.text:00405020                 mov     [esp+2Ch+Format], offset aSSS ; "%s (%s) %s\n"
.text:00405028                 mov     [esp+2Ch+var_20], edx
.text:0040502C                 mov     [esp+2Ch+Stream], esi ; Stream
.text:0040502F                 call    fprintf
.text:00405034
.text:00405034 loc_405034:                             ; CODE XREF: sub_404FD0+1C9↓j
.text:00405034                 cmp     ebx, 9          ; switch 10 cases
.text:00405037                 ja      def_40503D      ; jumptable 0040503D default case
.text:0040503D                 jmp     ds:jpt_40503D[ebx*4] ; switch jump
.text:0040503D ; ---------------------------------------------------------------------------
.text:00405044 jpt_40503D      dd offset loc_40506C    ; DATA XREF: sub_404FD0+6D↑r
.text:00405044                 dd offset loc_405071    ; jump table for switch statement
.text:00405044                 dd offset loc_405111
.text:00405044                 dd offset loc_40511D
.text:00405044                 dd offset loc_405129
.text:00405044                 dd offset loc_405135
.text:00405044                 dd offset loc_405141
.text:00405044                 dd offset loc_40514D
.text:00405044                 dd offset loc_405159
.text:00405044                 dd offset loc_405165
.text:0040506C ; ---------------------------------------------------------------------------
.text:0040506C
.text:0040506C loc_40506C:                             ; CODE XREF: sub_404FD0+6D↑j
.text:0040506C                                         ; DATA XREF: sub_404FD0:jpt_40503D↑o
.text:0040506C                 call    abort           ; jumptable 0040503D case 0
.text:00405071 ; ---------------------------------------------------------------------------
.text:00405071
.text:00405071 loc_405071:                             ; CODE XREF: sub_404FD0+6D↑j
.text:00405071                                         ; DATA XREF: sub_404FD0:jpt_40503D↑o
.text:00405071                 mov     [esp+2Ch+Stream], offset aWrittenByS ; jumptable 0040503D case 1
.text:00405078                 nop
.text:00405079                 lea     esi, [esi+0]
.text:00405080
.text:00405080 loc_405080:                             ; CODE XREF: sub_404FD0+148↓j
.text:00405080                                         ; sub_404FD0+154↓j ...
.text:00405080                 call    ds:libintl_gettext
.text:00405086                 mov     [esp+2Ch+ArgList], edi ; ArgList
.text:0040508A                 mov     [esp+2Ch+Stream], esi ; Stream
.text:0040508D                 mov     [esp+2Ch+Format], eax ; Format
.text:00405091                 call    vfprintf
.text:00405096                 mov     ebx, [esi+4]
.text:00405099                 dec     ebx
.text:0040509A                 test    ebx, ebx
.text:0040509C                 mov     [esi+4], ebx
.text:0040509F                 js      short loc_4050FF
.text:004050A1                 mov     edi, [esi]
.text:004050A3                 mov     byte ptr [edi], 0Ah
.text:004050A6                 inc     dword ptr [esi]
.text:004050A8
.text:004050A8 loc_4050A8:                             ; CODE XREF: sub_404FD0+13F↓j
.text:004050A8                 mov     [esp+2Ch+Format], esi ; Stream
.text:004050AC                 mov     edx, Buffer
.text:004050B2                 mov     [esp+2Ch+Stream], edx ; Buffer
.text:004050B5                 call    fputs
.text:004050BA                 mov     ebp, [esi+4]
.text:004050BD                 dec     ebp
.text:004050BE                 test    ebp, ebp
.text:004050C0                 mov     [esi+4], ebp
.text:004050C3                 js      short loc_4050ED
.text:004050C5                 mov     ecx, [esi]
.text:004050C7                 mov     byte ptr [ecx], 0Ah
.text:004050CA                 inc     dword ptr [esi]
.text:004050CC
.text:004050CC loc_4050CC:                             ; CODE XREF: sub_404FD0+12D↓j
.text:004050CC                 mov     [esp+2Ch+arg_4], esi ; Stream
.text:004050D0                 mov     [esp+2Ch+Stream], offset aThisIsFreeSoft ; "This is free software; see the source f"...
.text:004050D7                 call    ds:libintl_gettext
.text:004050DD                 mov     [esp+2Ch+arg_0], eax ; Buffer
.text:004050E1                 add     esp, 1Ch
.text:004050E4                 pop     ebx
.text:004050E5                 pop     esi
.text:004050E6                 pop     edi
.text:004050E7                 pop     ebp
.text:004050E8                 jmp     fputs
.text:004050ED ; ---------------------------------------------------------------------------
.text:004050ED
.text:004050ED loc_4050ED:                             ; CODE XREF: sub_404FD0+F3↑j
.text:004050ED                 mov     [esp+2Ch+Format], esi ; File
.text:004050F1                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:004050F8                 call    _flsbuf
.text:004050FD                 jmp     short loc_4050CC
.text:004050FF ; ---------------------------------------------------------------------------
.text:004050FF
.text:004050FF loc_4050FF:                             ; CODE XREF: sub_404FD0+CF↑j
.text:004050FF                 mov     [esp+2Ch+Format], esi ; File
.text:00405103                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:0040510A                 call    _flsbuf
.text:0040510F                 jmp     short loc_4050A8
.text:00405111 ; ---------------------------------------------------------------------------
.text:00405111
.text:00405111 loc_405111:                             ; CODE XREF: sub_404FD0+6D↑j
.text:00405111                                         ; DATA XREF: sub_404FD0:jpt_40503D↑o
.text:00405111                 mov     [esp+2Ch+Stream], offset aWrittenBySAndS ; jumptable 0040503D case 2
.text:00405118                 jmp     loc_405080
.text:0040511D ; ---------------------------------------------------------------------------
.text:0040511D
.text:0040511D loc_40511D:                             ; CODE XREF: sub_404FD0+6D↑j
.text:0040511D                                         ; DATA XREF: sub_404FD0:jpt_40503D↑o
.text:0040511D                 mov     [esp+2Ch+Stream], offset aWrittenBySSAnd ; jumptable 0040503D case 3
.text:00405124                 jmp     loc_405080
.text:00405129 ; ---------------------------------------------------------------------------
.text:00405129
.text:00405129 loc_405129:                             ; CODE XREF: sub_404FD0+6D↑j
.text:00405129                                         ; DATA XREF: sub_404FD0:jpt_40503D↑o
.text:00405129                 mov     [esp+2Ch+Stream], offset aWrittenBySSSAn ; jumptable 0040503D case 4
.text:00405130                 jmp     loc_405080
.text:00405135 ; ---------------------------------------------------------------------------
.text:00405135
.text:00405135 loc_405135:                             ; CODE XREF: sub_404FD0+6D↑j
.text:00405135                                         ; DATA XREF: sub_404FD0:jpt_40503D↑o
.text:00405135                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSA ; jumptable 0040503D case 5
.text:0040513C                 jmp     loc_405080
.text:00405141 ; ---------------------------------------------------------------------------
.text:00405141
.text:00405141 loc_405141:                             ; CODE XREF: sub_404FD0+6D↑j
.text:00405141                                         ; DATA XREF: sub_404FD0:jpt_40503D↑o
.text:00405141                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_0 ; jumptable 0040503D case 6
.text:00405148                 jmp     loc_405080
.text:0040514D ; ---------------------------------------------------------------------------
.text:0040514D
.text:0040514D loc_40514D:                             ; CODE XREF: sub_404FD0+6D↑j
.text:0040514D                                         ; DATA XREF: sub_404FD0:jpt_40503D↑o
.text:0040514D                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_1 ; jumptable 0040503D case 7
.text:00405154                 jmp     loc_405080
.text:00405159 ; ---------------------------------------------------------------------------
.text:00405159
.text:00405159 loc_405159:                             ; CODE XREF: sub_404FD0+6D↑j
.text:00405159                                         ; DATA XREF: sub_404FD0:jpt_40503D↑o
.text:00405159                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_2 ; jumptable 0040503D case 8
.text:00405160                 jmp     loc_405080
.text:00405165 ; ---------------------------------------------------------------------------
.text:00405165
.text:00405165 loc_405165:                             ; CODE XREF: sub_404FD0+6D↑j
.text:00405165                                         ; DATA XREF: sub_404FD0:jpt_40503D↑o
.text:00405165                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_3 ; jumptable 0040503D case 9
.text:0040516C                 jmp     loc_405080
.text:00405171 ; ---------------------------------------------------------------------------
.text:00405171
.text:00405171 def_40503D:                             ; CODE XREF: sub_404FD0+67↑j
.text:00405171                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS ; jumptable 0040503D default case
.text:00405178                 jmp     loc_405080
.text:0040517D ; ---------------------------------------------------------------------------
.text:0040517D
.text:0040517D loc_40517D:                             ; CODE XREF: sub_404FD0+3E↑j
.text:0040517D                 mov     [esp+2Ch+var_20], ebp
.text:00405181                 mov     ecx, [esp+2Ch+var_14]
.text:00405185                 mov     [esp+2Ch+Format], offset aSS ; "%s %s\n"
.text:0040518D                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00405190                 mov     [esp+2Ch+ArgList], ecx
.text:00405194                 call    fprintf
.text:00405199                 jmp     loc_405034
.text:00405199 sub_404FD0      endp
.text:00405199
.text:00405199 ; ---------------------------------------------------------------------------
.text:0040519E                 align 10h
.text:004051A0                 sub     esp, 1Ch
.text:004051A3                 mov     edx, [esp+2Ch]
.text:004051A7                 lea     ecx, [esp+30h]
.text:004051AB                 mov     [esp+10h], ecx
.text:004051AF                 mov     ecx, [esp+28h]
.text:004051B3                 mov     [esp+0Ch], edx
.text:004051B7                 mov     edx, [esp+24h]
.text:004051BB                 mov     [esp+8], ecx
.text:004051BF                 mov     [esp+4], edx
.text:004051C3                 mov     edx, [esp+20h]
.text:004051C7                 mov     [esp], edx
.text:004051CA                 call    sub_404FD0
.text:004051CF                 add     esp, 1Ch
.text:004051D2                 retn
.text:004051D2 ; ---------------------------------------------------------------------------
.text:004051D3                 align 10h
.text:004051E0
.text:004051E0 ; =============== S U B R O U T I N E =======================================
.text:004051E0
.text:004051E0
.text:004051E0 ; int __cdecl sub_4051E0(int, int, char *, int, int)
.text:004051E0 sub_4051E0      proc near               ; CODE XREF: sub_403280+58↑p
.text:004051E0
.text:004051E0 var_1C          = dword ptr -1Ch
.text:004051E0 var_18          = dword ptr -18h
.text:004051E0 var_14          = dword ptr -14h
.text:004051E0 var_10          = dword ptr -10h
.text:004051E0 var_C           = dword ptr -0Ch
.text:004051E0 var_8           = dword ptr -8
.text:004051E0 var_4           = dword ptr -4
.text:004051E0 arg_0           = dword ptr  4
.text:004051E0 arg_4           = dword ptr  8
.text:004051E0 arg_8           = dword ptr  0Ch
.text:004051E0 arg_C           = dword ptr  10h
.text:004051E0 arg_10          = dword ptr  14h
.text:004051E0
.text:004051E0                 sub     esp, 1Ch
.text:004051E3                 mov     edx, [esp+1Ch+arg_C]
.text:004051E7                 mov     [esp+1Ch+var_4], 0 ; int
.text:004051EF                 mov     ecx, [esp+1Ch+arg_10]
.text:004051F3                 mov     [esp+1Ch+var_8], 0 ; int
.text:004051FB                 mov     [esp+1Ch+var_10], edx ; int
.text:004051FF                 mov     edx, [esp+1Ch+arg_4]
.text:00405203                 mov     [esp+1Ch+var_C], ecx ; int
.text:00405207                 mov     ecx, [esp+1Ch+arg_8]
.text:0040520B                 mov     [esp+1Ch+var_18], edx ; int
.text:0040520F                 mov     edx, [esp+1Ch+arg_0]
.text:00405213                 mov     [esp+1Ch+var_14], ecx ; char *
.text:00405217                 mov     [esp+1Ch+var_1C], edx ; int
.text:0040521A                 call    sub_404AA0
.text:0040521F                 add     esp, 1Ch
.text:00405222                 retn
.text:00405222 sub_4051E0      endp
.text:00405222
.text:00405222 ; ---------------------------------------------------------------------------
.text:00405223                 align 10h
.text:00405230                 sub     esp, 2Ch
.text:00405233                 mov     edx, [esp+44h]
.text:00405237                 mov     dword ptr [esp+18h], 0
.text:0040523F                 mov     ecx, [esp+40h]
.text:00405243                 mov     dword ptr [esp+14h], 0
.text:0040524B                 mov     [esp+1Ch], edx
.text:0040524F                 mov     edx, [esp+3Ch]
.text:00405253                 mov     [esp+10h], ecx
.text:00405257                 mov     ecx, [esp+38h]
.text:0040525B                 mov     [esp+0Ch], edx
.text:0040525F                 mov     edx, [esp+34h]
.text:00405263                 mov     [esp+8], ecx
.text:00405267                 mov     [esp+4], edx
.text:0040526B                 mov     edx, [esp+30h]
.text:0040526F                 mov     [esp], edx
.text:00405272                 call    sub_403F10
.text:00405277                 add     esp, 2Ch
.text:0040527A                 retn
.text:0040527A ; ---------------------------------------------------------------------------
.text:0040527B                 align 10h
.text:00405280                 sub     esp, 1Ch
.text:00405283                 mov     edx, [esp+2Ch]
.text:00405287                 mov     dword ptr [esp+18h], 0
.text:0040528F                 mov     ecx, [esp+30h]
.text:00405293                 mov     dword ptr [esp+14h], 1
.text:0040529B                 mov     [esp+0Ch], edx
.text:0040529F                 mov     edx, [esp+24h]
.text:004052A3                 mov     [esp+10h], ecx
.text:004052A7                 mov     ecx, [esp+28h]
.text:004052AB                 mov     [esp+4], edx
.text:004052AF                 mov     edx, [esp+20h]
.text:004052B3                 mov     [esp+8], ecx
.text:004052B7                 mov     [esp], edx
.text:004052BA                 call    sub_404AA0
.text:004052BF                 add     esp, 1Ch
.text:004052C2                 retn
.text:004052C2 ; ---------------------------------------------------------------------------
.text:004052C3                 align 10h
.text:004052D0                 sub     esp, 2Ch
.text:004052D3                 mov     edx, [esp+44h]
.text:004052D7                 mov     dword ptr [esp+18h], 0
.text:004052DF                 mov     ecx, [esp+40h]
.text:004052E3                 mov     dword ptr [esp+14h], 1
.text:004052EB                 mov     [esp+1Ch], edx
.text:004052EF                 mov     edx, [esp+3Ch]
.text:004052F3                 mov     [esp+10h], ecx
.text:004052F7                 mov     ecx, [esp+38h]
.text:004052FB                 mov     [esp+0Ch], edx
.text:004052FF                 mov     edx, [esp+34h]
.text:00405303                 mov     [esp+8], ecx
.text:00405307                 mov     [esp+4], edx
.text:0040530B                 mov     edx, [esp+30h]
.text:0040530F                 mov     [esp], edx
.text:00405312                 call    sub_403F10
.text:00405317                 add     esp, 2Ch
.text:0040531A                 retn
.text:0040531A ; ---------------------------------------------------------------------------
.text:0040531B                 align 10h
.text:00405320 aLiteral        db 'literal',0          ; DATA XREF: .text:00405360↓o
.text:00405328 aShell          db 'shell',0            ; DATA XREF: .text:00405364↓o
.text:0040532E aShellAlways    db 'shell-always',0     ; DATA XREF: .text:00405368↓o
.text:0040533B aC_0            db 'c',0                ; DATA XREF: .text:0040536C↓o
.text:0040533D aEscape         db 'escape',0           ; DATA XREF: .text:00405370↓o
.text:00405344 aLocale         db 'locale',0           ; DATA XREF: .text:00405374↓o
.text:0040534B aClocale        db 'clocale',0          ; DATA XREF: .text:00405378↓o
.text:00405353                 align 10h
.text:00405360                 dd offset aLiteral      ; "literal"
.text:00405364                 dd offset aShell        ; "shell"
.text:00405368                 dd offset aShellAlways  ; "shell-always"
.text:0040536C                 dd offset aC_0          ; "c"
.text:00405370                 dd offset aEscape       ; "escape"
.text:00405374                 dd offset aLocale       ; "locale"
.text:00405378                 dd offset aClocale      ; "clocale"
.text:0040537C                 dd 2 dup(0)
.text:00405384                 dd 1, 2, 3, 4, 5, 6
.text:0040539C asc_40539C:                             ; DATA XREF: sub_4053B0+7E↓o
.text:0040539C                                         ; sub_4053B0+A39↓o ...
.text:0040539C                 text "UTF-16LE", '"',27h,'`'
.text:004053A2                 align 10h
.text:004053B0
.text:004053B0 ; =============== S U B R O U T I N E =======================================
.text:004053B0
.text:004053B0
.text:004053B0 ; int __cdecl sub_4053B0(int, int, char *Str, int, int, int)
.text:004053B0 sub_4053B0      proc near               ; CODE XREF: sub_4053B0+43A↓p
.text:004053B0                                         ; .text:00405F73↓p ...
.text:004053B0
.text:004053B0 C               = dword ptr -4Ch
.text:004053B0 Type            = dword ptr -48h
.text:004053B0 SizeInBytes     = dword ptr -44h
.text:004053B0 State           = dword ptr -40h
.text:004053B0 var_3C          = dword ptr -3Ch
.text:004053B0 var_38          = dword ptr -38h
.text:004053B0 var_34          = dword ptr -34h
.text:004053B0 var_30          = dword ptr -30h
.text:004053B0 var_29          = byte ptr -29h
.text:004053B0 var_28          = dword ptr -28h
.text:004053B0 var_22          = byte ptr -22h
.text:004053B0 var_21          = byte ptr -21h
.text:004053B0 var_20          = dword ptr -20h
.text:004053B0 var_1C          = dword ptr -1Ch
.text:004053B0 var_18          = mbstate_t ptr -18h
.text:004053B0 arg_0           = dword ptr  4
.text:004053B0 arg_4           = dword ptr  8
.text:004053B0 Str             = dword ptr  0Ch
.text:004053B0 arg_C           = dword ptr  10h
.text:004053B0 arg_10          = dword ptr  14h
.text:004053B0 arg_14          = dword ptr  18h
.text:004053B0
.text:004053B0                 push    ebp
.text:004053B1                 push    edi
.text:004053B2                 push    esi
.text:004053B3                 push    ebx
.text:004053B4                 sub     esp, 3Ch
.text:004053B7                 mov     edx, ds:__mb_cur_max
.text:004053BD                 mov     [esp+4Ch+var_34], 0
.text:004053C5                 mov     [esp+4Ch+var_1C], 0
.text:004053CD                 cmp     dword ptr [edx], 1
.text:004053D0                 mov     [esp+4Ch+var_20], 0
.text:004053D8                 mov     [esp+4Ch+var_21], 0
.text:004053DD                 setz    [esp+4Ch+var_22]
.text:004053E2                 cmp     [esp+4Ch+arg_10], 6 ; switch 7 cases
.text:004053E7                 ja      short def_4053ED ; jumptable 004053ED default case, cases 0,1
.text:004053E9                 mov     edx, [esp+4Ch+arg_10]
.text:004053ED                 jmp     ds:jpt_4053ED[edx*4] ; switch jump
.text:004053ED ; ---------------------------------------------------------------------------
.text:004053F4 jpt_4053ED      dd offset def_4053ED    ; DATA XREF: sub_4053B0+3D↑r
.text:004053F4                 dd offset def_4053ED    ; jump table for switch statement
.text:004053F4                 dd offset loc_405D35
.text:004053F4                 dd offset loc_405410
.text:004053F4                 dd offset loc_405D5B
.text:004053F4                 dd offset loc_405D65
.text:004053F4                 dd offset loc_405D65
.text:00405410 ; ---------------------------------------------------------------------------
.text:00405410
.text:00405410 loc_405410:                             ; CODE XREF: sub_4053B0+3D↑j
.text:00405410                                         ; DATA XREF: sub_4053B0:jpt_4053ED↑o
.text:00405410                 mov     eax, [esp+4Ch+arg_4] ; jumptable 004053ED case 3
.text:00405414                 cmp     [esp+4Ch+var_34], eax
.text:00405418                 jnb     short loc_405421
.text:0040541A                 mov     ebx, [esp+4Ch+arg_0]
.text:0040541E                 mov     byte ptr [ebx], 22h ; '"'
.text:00405421
.text:00405421 loc_405421:                             ; CODE XREF: sub_4053B0+68↑j
.text:00405421                 mov     [esp+4Ch+var_34], 1
.text:00405429                 mov     [esp+4Ch+var_21], 1
.text:0040542E                 mov     [esp+4Ch+var_1C], offset asc_40539C ; "\"'`"
.text:00405436
.text:00405436 loc_405436:                             ; CODE XREF: sub_4053B0+9A6↓j
.text:00405436                 mov     [esp+4Ch+var_20], 1
.text:0040543E
.text:0040543E def_4053ED:                             ; CODE XREF: sub_4053B0+37↑j
.text:0040543E                                         ; sub_4053B0+3D↑j ...
.text:0040543E                 xor     ebp, ebp        ; jumptable 004053ED default case, cases 0,1
.text:00405440
.text:00405440 loc_405440:                             ; CODE XREF: sub_4053B0+3DB↓j
.text:00405440                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00405445                 jz      loc_405D27
.text:0040544B                 cmp     ebp, [esp+4Ch+arg_C]
.text:0040544F
.text:0040544F loc_40544F:                             ; CODE XREF: sub_4053B0+980↓j
.text:0040544F                 jz      loc_405CBE
.text:00405455                 cmp     [esp+4Ch+var_21], 0
.text:0040545A                 jz      short loc_4054A0
.text:0040545C                 mov     esi, [esp+4Ch+var_20]
.text:00405460                 test    esi, esi
.text:00405462                 jz      short loc_4054A0
.text:00405464                 mov     ecx, [esp+4Ch+var_20]
.text:00405468                 lea     edi, [ecx+ebp]
.text:0040546B                 cmp     edi, [esp+4Ch+arg_C]
.text:0040546F                 ja      short loc_4054A0
.text:00405471                 cld
.text:00405472                 mov     ebx, [esp+4Ch+Str]
.text:00405476                 mov     edi, [esp+4Ch+var_1C]
.text:0040547A                 add     ebx, ebp
.text:0040547C                 mov     esi, ebx
.text:0040547E                 cmp     ecx, ecx
.text:00405480                 repe cmpsb
.text:00405482                 jnz     short loc_4054A0
.text:00405484                 mov     edx, [esp+4Ch+arg_4]
.text:00405488                 cmp     [esp+4Ch+var_34], edx
.text:0040548C                 jnb     short loc_40549A
.text:0040548E                 mov     ecx, [esp+4Ch+arg_0]
.text:00405492                 mov     eax, [esp+4Ch+var_34]
.text:00405496                 mov     byte ptr [eax+ecx], 5Ch ; '\'
.text:0040549A
.text:0040549A loc_40549A:                             ; CODE XREF: sub_4053B0+DC↑j
.text:0040549A                 inc     [esp+4Ch+var_34]
.text:0040549E                 mov     esi, esi
.text:004054A0
.text:004054A0 loc_4054A0:                             ; CODE XREF: sub_4053B0+AA↑j
.text:004054A0                                         ; sub_4053B0+B2↑j ...
.text:004054A0                 mov     edi, [esp+4Ch+Str]
.text:004054A4                 movzx   ebx, byte ptr [ebp+edi+0]
.text:004054A9                 movzx   eax, bl
.text:004054AC                 cmp     eax, 7Eh        ; switch 127 cases
.text:004054AF                 ja      def_4054B5      ; jumptable 004054B5 default case, cases 1-6,14-31,64
.text:004054B5                 jmp     ds:jpt_4054B5[eax*4] ; switch jump
.text:004054B5 ; ---------------------------------------------------------------------------
.text:004054BC jpt_4054B5      dd offset loc_4056B8, offset def_4054B5, offset def_4054B5
.text:004054BC                                         ; DATA XREF: sub_4053B0+105↑r
.text:004054BC                 dd offset def_4054B5, offset def_4054B5, offset def_4054B5 ; jump table for switch statement
.text:004054BC                 dd offset def_4054B5, offset loc_405790, offset loc_4057AE
.text:004054BC                 dd offset loc_4057B2, offset loc_4057F7, offset loc_4057FB
.text:004054BC                 dd offset loc_4057FF, offset loc_405803, offset def_4054B5
.text:004054BC                 dd offset def_4054B5, offset def_4054B5, offset def_4054B5
.text:004054BC                 dd offset def_4054B5, offset def_4054B5, offset def_4054B5
.text:004054BC                 dd offset def_4054B5, offset def_4054B5, offset def_4054B5
.text:004054BC                 dd offset def_4054B5, offset def_4054B5, offset def_4054B5
.text:004054BC                 dd offset def_4054B5, offset def_4054B5, offset def_4054B5
.text:004054BC                 dd offset def_4054B5, offset def_4054B5, offset loc_405C88
.text:004054BC                 dd offset loc_405C88, offset loc_405C88, offset loc_405CAA
.text:004054BC                 dd offset loc_405C88, offset def_4058B2, offset loc_405C88
.text:004054BC                 dd offset loc_405807, offset loc_405C88, offset loc_405C88
.text:004054BC                 dd offset loc_405C88, offset def_4058B2, offset def_4058B2
.text:004054BC                 dd offset def_4058B2, offset def_4058B2, offset def_4058B2
.text:004054BC                 dd offset def_4058B2, offset def_4058B2, offset def_4058B2
.text:004054BC                 dd offset def_4058B2, offset def_4058B2, offset def_4058B2
.text:004054BC                 dd offset def_4058B2, offset def_4058B2, offset def_4058B2
.text:004054BC                 dd offset def_4058B2, offset def_4058B2, offset loc_405C88
.text:004054BC                 dd offset loc_405C88, offset loc_405C88, offset loc_405C88
.text:004054BC                 dd offset loc_40586C, offset def_4054B5, offset def_4058B2
.text:004054BC                 dd offset def_4058B2, offset def_4058B2, offset def_4058B2
.text:004054BC                 dd offset def_4058B2, offset def_4058B2, offset def_4058B2
.text:004054BC                 dd offset def_4058B2, offset def_4058B2, offset def_4058B2
.text:004054BC                 dd offset def_4058B2, offset def_4058B2, offset def_4058B2
.text:004054BC                 dd offset def_4058B2, offset def_4058B2, offset def_4058B2
.text:004054BC                 dd offset def_4058B2, offset def_4058B2, offset def_4058B2
.text:004054BC                 dd offset def_4058B2, offset def_4058B2, offset def_4058B2
.text:004054BC                 dd offset def_4058B2, offset def_4058B2, offset def_4058B2
.text:004054BC                 dd offset def_4058B2, offset loc_405C88, offset loc_405C81
.text:004054BC                 dd offset def_4058B2, offset loc_405C88, offset def_4058B2
.text:004054BC                 dd offset loc_405C88, offset def_4058B2, offset def_4058B2
.text:004054BC                 dd offset def_4058B2, offset def_4058B2, offset def_4058B2
.text:004054BC                 dd offset def_4058B2, offset def_4058B2, offset def_4058B2
.text:004054BC                 dd offset def_4058B2, offset def_4058B2, offset def_4058B2
.text:004054BC                 dd offset def_4058B2, offset def_4058B2, offset def_4058B2
.text:004054BC                 dd offset def_4058B2, offset def_4058B2, offset def_4058B2
.text:004054BC                 dd offset def_4058B2, offset def_4058B2, offset def_4058B2
.text:004054BC                 dd offset def_4058B2, offset def_4058B2, offset def_4058B2
.text:004054BC                 dd offset def_4058B2, offset def_4058B2, offset def_4058B2
.text:004054BC                 dd offset loc_405C98, offset loc_405C88, offset loc_405C98
.text:004054BC                 dd offset loc_405CAA
.text:004056B8 ; ---------------------------------------------------------------------------
.text:004056B8
.text:004056B8 loc_4056B8:                             ; CODE XREF: sub_4053B0+105↑j
.text:004056B8                                         ; DATA XREF: sub_4053B0:jpt_4054B5↑o
.text:004056B8                 cmp     [esp+4Ch+var_21], 0 ; jumptable 004054B5 case 0
.text:004056BD                 lea     eax, [ebp+1]
.text:004056C0                 jz      loc_405770
.text:004056C6                 mov     esi, [esp+4Ch+arg_4]
.text:004056CA                 cmp     [esp+4Ch+var_34], esi
.text:004056CE                 jnb     short loc_4056DC
.text:004056D0                 mov     eax, [esp+4Ch+arg_0]
.text:004056D4                 mov     ebx, [esp+4Ch+var_34]
.text:004056D8                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:004056DC
.text:004056DC loc_4056DC:                             ; CODE XREF: sub_4053B0+31E↑j
.text:004056DC                 inc     [esp+4Ch+var_34]
.text:004056E0                 mov     edx, [esp+4Ch+arg_4]
.text:004056E4                 cmp     [esp+4Ch+var_34], edx
.text:004056E8                 jnb     short loc_4056F6
.text:004056EA                 mov     edi, [esp+4Ch+arg_0]
.text:004056EE                 mov     ecx, [esp+4Ch+var_34]
.text:004056F2                 mov     byte ptr [ecx+edi], 30h ; '0'
.text:004056F6
.text:004056F6 loc_4056F6:                             ; CODE XREF: sub_4053B0+338↑j
.text:004056F6                 inc     [esp+4Ch+var_34]
.text:004056FA                 mov     esi, [esp+4Ch+arg_4]
.text:004056FE                 cmp     [esp+4Ch+var_34], esi
.text:00405702                 jnb     short loc_405710
.text:00405704                 mov     ebx, [esp+4Ch+arg_0]
.text:00405708                 mov     eax, [esp+4Ch+var_34]
.text:0040570C                 mov     byte ptr [eax+ebx], 30h ; '0'
.text:00405710
.text:00405710 loc_405710:                             ; CODE XREF: sub_4053B0+352↑j
.text:00405710                 inc     [esp+4Ch+var_34]
.text:00405714                 mov     bl, 30h ; '0'
.text:00405716                 lea     esi, [esi+0]
.text:00405719                 lea     edi, [edi+0]
.text:00405720
.text:00405720 def_4058B2:                             ; CODE XREF: sub_4053B0+105↑j
.text:00405720                                         ; sub_4053B0+463↓j ...
.text:00405720                 cmp     [esp+4Ch+var_21], 0 ; jumptable 004054B5 cases 37,43-58,65-90,93,95,97-122
.text:00405720                                         ; jumptable 004058B2 default case, cases 34-38,42-44,46,48-59
.text:00405725                 lea     eax, [ebp+1]
.text:00405728                 jz      short loc_405770
.text:0040572A                 mov     cl, bl
.text:0040572C                 mov     edi, [esp+4Ch+arg_14]
.text:00405730                 mov     esi, 1
.text:00405735                 shr     cl, 5
.text:00405738                 movzx   edx, cl
.text:0040573B                 mov     ecx, ebx
.text:0040573D                 and     ecx, 1Fh
.text:00405740                 shl     esi, cl
.text:00405742                 test    [edi+edx*4+4], esi
.text:00405746                 jz      short loc_405762
.text:00405748
.text:00405748 loc_405748:                             ; CODE XREF: sub_4053B0+3FC↓j
.text:00405748                 mov     edx, [esp+4Ch+arg_4]
.text:0040574C                 cmp     [esp+4Ch+var_34], edx
.text:00405750                 jnb     short loc_40575E
.text:00405752                 mov     edi, [esp+4Ch+arg_0]
.text:00405756                 mov     esi, [esp+4Ch+var_34]
.text:0040575A                 mov     byte ptr [esi+edi], 5Ch ; '\'
.text:0040575E
.text:0040575E loc_40575E:                             ; CODE XREF: sub_4053B0+3A0↑j
.text:0040575E                 inc     [esp+4Ch+var_34]
.text:00405762
.text:00405762 loc_405762:                             ; CODE XREF: sub_4053B0+396↑j
.text:00405762                 lea     eax, [ebp+1]
.text:00405765                 lea     esi, [esi+0]
.text:00405769                 lea     edi, [edi+0]
.text:00405770
.text:00405770 loc_405770:                             ; CODE XREF: sub_4053B0+310↑j
.text:00405770                                         ; sub_4053B0+378↑j ...
.text:00405770                 mov     ebp, [esp+4Ch+arg_4]
.text:00405774                 cmp     [esp+4Ch+var_34], ebp
.text:00405778                 jnb     short loc_405785
.text:0040577A                 mov     edx, [esp+4Ch+arg_0]
.text:0040577E                 mov     ecx, [esp+4Ch+var_34]
.text:00405782                 mov     [ecx+edx], bl
.text:00405785
.text:00405785 loc_405785:                             ; CODE XREF: sub_4053B0+3C8↑j
.text:00405785                 inc     [esp+4Ch+var_34]
.text:00405789                 mov     ebp, eax
.text:0040578B                 jmp     loc_405440
.text:00405790 ; ---------------------------------------------------------------------------
.text:00405790
.text:00405790 loc_405790:                             ; CODE XREF: sub_4053B0+105↑j
.text:00405790                                         ; DATA XREF: sub_4053B0:jpt_4054B5↑o
.text:00405790                 mov     dl, 61h ; 'a'   ; jumptable 004054B5 case 7
.text:00405792                 lea     esi, [esi+0]
.text:00405799                 lea     edi, [edi+0]
.text:004057A0
.text:004057A0 loc_4057A0:                             ; CODE XREF: sub_4053B0+400↓j
.text:004057A0                                         ; sub_4053B0+409↓j ...
.text:004057A0                 cmp     [esp+4Ch+var_21], 0
.text:004057A5                 lea     eax, [ebp+1]
.text:004057A8                 jz      short loc_405770
.text:004057AA                 mov     bl, dl
.text:004057AC                 jmp     short loc_405748
.text:004057AE ; ---------------------------------------------------------------------------
.text:004057AE
.text:004057AE loc_4057AE:                             ; CODE XREF: sub_4053B0+105↑j
.text:004057AE                                         ; DATA XREF: sub_4053B0:jpt_4054B5↑o
.text:004057AE                 mov     dl, 62h ; 'b'   ; jumptable 004054B5 case 8
.text:004057B0                 jmp     short loc_4057A0
.text:004057B2 ; ---------------------------------------------------------------------------
.text:004057B2
.text:004057B2 loc_4057B2:                             ; CODE XREF: sub_4053B0+105↑j
.text:004057B2                                         ; DATA XREF: sub_4053B0:jpt_4054B5↑o
.text:004057B2                 mov     dl, 74h ; 't'   ; jumptable 004054B5 case 9
.text:004057B4
.text:004057B4 loc_4057B4:                             ; CODE XREF: sub_4053B0+449↓j
.text:004057B4                                         ; sub_4053B0+455↓j ...
.text:004057B4                 cmp     [esp+4Ch+arg_10], 1
.text:004057B9                 jnz     short loc_4057A0
.text:004057BB
.text:004057BB loc_4057BB:                             ; CODE XREF: sub_4053B0+45C↓j
.text:004057BB                                         ; sub_4053B0+4C1↓j ...
.text:004057BB                 mov     [esp+4Ch+var_3C], 2 ; jumptable 00405B82 cases 91,92,94,96,124
.text:004057C3                 mov     eax, [esp+4Ch+arg_14]
.text:004057C7                 mov     edx, [esp+4Ch+arg_C]
.text:004057CB                 mov     ecx, [esp+4Ch+Str]
.text:004057CF                 mov     ebx, [esp+4Ch+arg_4]
.text:004057D3                 mov     [esp+4Ch+var_38], eax ; int
.text:004057D7                 mov     ebp, [esp+4Ch+arg_0]
.text:004057DB                 mov     [esp+4Ch+State], edx ; int
.text:004057DF                 mov     [esp+4Ch+SizeInBytes], ecx ; Str
.text:004057E3                 mov     [esp+4Ch+Type], ebx ; int
.text:004057E7                 mov     [esp+4Ch+C], ebp ; int
.text:004057EA                 call    sub_4053B0
.text:004057EF
.text:004057EF loc_4057EF:                             ; CODE XREF: sub_4053B0+972↓j
.text:004057EF                 add     esp, 3Ch
.text:004057F2                 pop     ebx
.text:004057F3                 pop     esi
.text:004057F4                 pop     edi
.text:004057F5                 pop     ebp
.text:004057F6                 retn
.text:004057F7 ; ---------------------------------------------------------------------------
.text:004057F7
.text:004057F7 loc_4057F7:                             ; CODE XREF: sub_4053B0+105↑j
.text:004057F7                                         ; DATA XREF: sub_4053B0:jpt_4054B5↑o
.text:004057F7                 mov     dl, 6Eh ; 'n'   ; jumptable 004054B5 case 10
.text:004057F9                 jmp     short loc_4057B4
.text:004057FB ; ---------------------------------------------------------------------------
.text:004057FB
.text:004057FB loc_4057FB:                             ; CODE XREF: sub_4053B0+105↑j
.text:004057FB                                         ; DATA XREF: sub_4053B0:jpt_4054B5↑o
.text:004057FB                 mov     dl, 76h ; 'v'   ; jumptable 004054B5 case 11
.text:004057FD                 jmp     short loc_4057A0
.text:004057FF ; ---------------------------------------------------------------------------
.text:004057FF
.text:004057FF loc_4057FF:                             ; CODE XREF: sub_4053B0+105↑j
.text:004057FF                                         ; DATA XREF: sub_4053B0:jpt_4054B5↑o
.text:004057FF                 mov     dl, 66h ; 'f'   ; jumptable 004054B5 case 12
.text:00405801                 jmp     short loc_4057A0
.text:00405803 ; ---------------------------------------------------------------------------
.text:00405803
.text:00405803 loc_405803:                             ; CODE XREF: sub_4053B0+105↑j
.text:00405803                                         ; DATA XREF: sub_4053B0:jpt_4054B5↑o
.text:00405803                 mov     dl, 72h ; 'r'   ; jumptable 004054B5 case 13
.text:00405805                 jmp     short loc_4057B4
.text:00405807 ; ---------------------------------------------------------------------------
.text:00405807
.text:00405807 loc_405807:                             ; CODE XREF: sub_4053B0+105↑j
.text:00405807                                         ; DATA XREF: sub_4053B0:jpt_4054B5↑o
.text:00405807                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 004054B5 case 39
.text:0040580C                 jz      short loc_4057BB ; jumptable 00405B82 cases 91,92,94,96,124
.text:0040580E                 cmp     [esp+4Ch+arg_10], 2
.text:00405813                 jnz     def_4058B2      ; jumptable 004054B5 cases 37,43-58,65-90,93,95,97-122
.text:00405813                                         ; jumptable 004058B2 default case, cases 34-38,42-44,46,48-59
.text:00405819                 mov     edx, [esp+4Ch+arg_4]
.text:0040581D                 cmp     [esp+4Ch+var_34], edx
.text:00405821                 jnb     short loc_40582F
.text:00405823                 mov     ecx, [esp+4Ch+arg_0]
.text:00405827                 mov     edi, [esp+4Ch+var_34]
.text:0040582B                 mov     byte ptr [edi+ecx], 27h ; '''
.text:0040582F
.text:0040582F loc_40582F:                             ; CODE XREF: sub_4053B0+471↑j
.text:0040582F                 inc     [esp+4Ch+var_34]
.text:00405833                 mov     eax, [esp+4Ch+arg_4]
.text:00405837                 cmp     [esp+4Ch+var_34], eax
.text:0040583B                 jnb     short loc_405849
.text:0040583D                 mov     esi, [esp+4Ch+arg_0]
.text:00405841                 mov     edx, [esp+4Ch+var_34]
.text:00405845                 mov     byte ptr [edx+esi], 5Ch ; '\'
.text:00405849
.text:00405849 loc_405849:                             ; CODE XREF: sub_4053B0+48B↑j
.text:00405849                 inc     [esp+4Ch+var_34]
.text:0040584D                 mov     edi, [esp+4Ch+arg_4]
.text:00405851                 cmp     [esp+4Ch+var_34], edi
.text:00405855                 jnb     short loc_405863
.text:00405857                 mov     ecx, [esp+4Ch+arg_0]
.text:0040585B                 mov     eax, [esp+4Ch+var_34]
.text:0040585F                 mov     byte ptr [eax+ecx], 27h ; '''
.text:00405863
.text:00405863 loc_405863:                             ; CODE XREF: sub_4053B0+4A5↑j
.text:00405863                                         ; sub_4053B0+5C4↓j ...
.text:00405863                 inc     [esp+4Ch+var_34]
.text:00405867                 jmp     def_4058B2      ; jumptable 004054B5 cases 37,43-58,65-90,93,95,97-122
.text:00405867                                         ; jumptable 004058B2 default case, cases 34-38,42-44,46,48-59
.text:0040586C ; ---------------------------------------------------------------------------
.text:0040586C
.text:0040586C loc_40586C:                             ; CODE XREF: sub_4053B0+105↑j
.text:0040586C                                         ; DATA XREF: sub_4053B0:jpt_4054B5↑o
.text:0040586C                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 004054B5 case 63
.text:00405871                 jz      loc_4057BB      ; jumptable 00405B82 cases 91,92,94,96,124
.text:00405877                 cmp     [esp+4Ch+arg_10], 3
.text:0040587C                 jnz     def_4058B2      ; jumptable 004054B5 cases 37,43-58,65-90,93,95,97-122
.text:0040587C                                         ; jumptable 004058B2 default case, cases 34-38,42-44,46,48-59
.text:00405882                 lea     edx, [ebp+2]
.text:00405885                 cmp     edx, [esp+4Ch+arg_C]
.text:00405889                 jnb     def_4058B2      ; jumptable 004054B5 cases 37,43-58,65-90,93,95,97-122
.text:00405889                                         ; jumptable 004058B2 default case, cases 34-38,42-44,46,48-59
.text:0040588F                 mov     esi, [esp+4Ch+Str]
.text:00405893                 cmp     byte ptr [ebp+esi+1], 3Fh ; '?'
.text:00405898                 jnz     def_4058B2      ; jumptable 004054B5 cases 37,43-58,65-90,93,95,97-122
.text:00405898                                         ; jumptable 004058B2 default case, cases 34-38,42-44,46,48-59
.text:0040589E                 movzx   ecx, byte ptr [ebp+esi+2]
.text:004058A3                 movsx   eax, cl
.text:004058A6                 sub     eax, 21h ; '!'  ; switch 30 cases
.text:004058A9                 cmp     eax, 1Dh
.text:004058AC                 ja      def_4058B2      ; jumptable 004054B5 cases 37,43-58,65-90,93,95,97-122
.text:004058AC                                         ; jumptable 004058B2 default case, cases 34-38,42-44,46,48-59
.text:004058B2                 jmp     ds:jpt_4058B2[eax*4] ; switch jump
.text:004058B2 ; ---------------------------------------------------------------------------
.text:004058B9                 align 4
.text:004058BC jpt_4058B2      dd offset loc_405934    ; DATA XREF: sub_4053B0+502↑r
.text:004058BC                 dd offset def_4058B2    ; jump table for switch statement
.text:004058BC                 dd offset def_4058B2
.text:004058BC                 dd offset def_4058B2
.text:004058BC                 dd offset def_4058B2
.text:004058BC                 dd offset def_4058B2
.text:004058BC                 dd offset loc_405934
.text:004058BC                 dd offset loc_405934
.text:004058BC                 dd offset loc_405934
.text:004058BC                 dd offset def_4058B2
.text:004058BC                 dd offset def_4058B2
.text:004058BC                 dd offset def_4058B2
.text:004058BC                 dd offset loc_405934
.text:004058BC                 dd offset def_4058B2
.text:004058BC                 dd offset loc_405934
.text:004058BC                 dd offset def_4058B2
.text:004058BC                 dd offset def_4058B2
.text:004058BC                 dd offset def_4058B2
.text:004058BC                 dd offset def_4058B2
.text:004058BC                 dd offset def_4058B2
.text:004058BC                 dd offset def_4058B2
.text:004058BC                 dd offset def_4058B2
.text:004058BC                 dd offset def_4058B2
.text:004058BC                 dd offset def_4058B2
.text:004058BC                 dd offset def_4058B2
.text:004058BC                 dd offset def_4058B2
.text:004058BC                 dd offset def_4058B2
.text:004058BC                 dd offset loc_405934
.text:004058BC                 dd offset loc_405934
.text:004058BC                 dd offset loc_405934
.text:00405934 ; ---------------------------------------------------------------------------
.text:00405934
.text:00405934 loc_405934:                             ; CODE XREF: sub_4053B0+502↑j
.text:00405934                                         ; DATA XREF: sub_4053B0:jpt_4058B2↑o
.text:00405934                 mov     ebp, edx        ; jumptable 004058B2 cases 33,39-41,45,47,60-62
.text:00405936                 mov     bl, cl
.text:00405938                 mov     edx, [esp+4Ch+arg_4]
.text:0040593C                 cmp     [esp+4Ch+var_34], edx
.text:00405940                 jnb     short loc_40594E
.text:00405942                 mov     ecx, [esp+4Ch+arg_0]
.text:00405946                 mov     edi, [esp+4Ch+var_34]
.text:0040594A                 mov     byte ptr [edi+ecx], 3Fh ; '?'
.text:0040594E
.text:0040594E loc_40594E:                             ; CODE XREF: sub_4053B0+590↑j
.text:0040594E                 inc     [esp+4Ch+var_34]
.text:00405952                 mov     eax, [esp+4Ch+arg_4]
.text:00405956                 cmp     [esp+4Ch+var_34], eax
.text:0040595A                 jnb     short loc_405968
.text:0040595C                 mov     edx, [esp+4Ch+arg_0]
.text:00405960                 mov     esi, [esp+4Ch+var_34]
.text:00405964                 mov     byte ptr [esi+edx], 5Ch ; '\'
.text:00405968
.text:00405968 loc_405968:                             ; CODE XREF: sub_4053B0+5AA↑j
.text:00405968                 inc     [esp+4Ch+var_34]
.text:0040596C                 mov     edi, [esp+4Ch+arg_4]
.text:00405970                 cmp     [esp+4Ch+var_34], edi
.text:00405974                 jnb     loc_405863
.text:0040597A                 mov     eax, [esp+4Ch+arg_0]
.text:0040597E                 mov     ecx, [esp+4Ch+var_34]
.text:00405982                 mov     byte ptr [ecx+eax], 3Fh ; '?'
.text:00405986                 jmp     loc_405863
.text:00405986 ; ---------------------------------------------------------------------------
.text:0040598B                 align 10h
.text:00405990
.text:00405990 def_4054B5:                             ; CODE XREF: sub_4053B0+FF↑j
.text:00405990                                         ; sub_4053B0+105↑j
.text:00405990                                         ; DATA XREF: ...
.text:00405990                 cmp     [esp+4Ch+var_22], 0 ; jumptable 004054B5 default case, cases 1-6,14-31,64
.text:00405995                 jz      loc_405AC0
.text:0040599B                 mov     [esp+4Ch+var_28], 1
.text:004059A3                 mov     esi, ds:__mb_cur_max
.text:004059A9                 movzx   edx, bl
.text:004059AC                 cmp     dword ptr [esi], 1
.text:004059AF                 jz      loc_405AA4
.text:004059B5                 mov     [esp+4Ch+Type], 157h ; Type
.text:004059BD                 mov     [esp+4Ch+C], edx ; C
.text:004059C0                 call    _isctype
.text:004059C5
.text:004059C5 loc_4059C5:                             ; CODE XREF: sub_4053B0+705↓j
.text:004059C5                 test    eax, eax
.text:004059C7                 setnz   [esp+4Ch+var_29]
.text:004059CC
.text:004059CC loc_4059CC:                             ; CODE XREF: sub_4053B0+7A5↓j
.text:004059CC                 cmp     [esp+4Ch+var_21], 0
.text:004059D1                 lea     eax, [ebp+1]
.text:004059D4                 jz      loc_405770
.text:004059DA                 cmp     [esp+4Ch+var_29], 0
.text:004059DF                 jnz     def_4058B2      ; jumptable 004054B5 cases 37,43-58,65-90,93,95,97-122
.text:004059DF                                         ; jumptable 004058B2 default case, cases 34-38,42-44,46,48-59
.text:004059E5
.text:004059E5 loc_4059E5:                             ; CODE XREF: sub_4053B0+7AB↓j
.text:004059E5                 mov     eax, [esp+4Ch+var_28]
.text:004059E9                 lea     edx, [eax+ebp]
.text:004059EC                 lea     esi, [esi+0]
.text:004059F0
.text:004059F0 loc_4059F0:                             ; CODE XREF: sub_4053B0+6EF↓j
.text:004059F0                 cmp     [esp+4Ch+var_21], 0
.text:004059F5                 jz      short loc_405A70
.text:004059F7                 cmp     [esp+4Ch+var_29], 0
.text:004059FC                 jnz     short loc_405A70
.text:004059FE                 mov     edi, [esp+4Ch+arg_4]
.text:00405A02                 cmp     [esp+4Ch+var_34], edi
.text:00405A06                 jnb     short loc_405A14
.text:00405A08                 mov     esi, [esp+4Ch+arg_0]
.text:00405A0C                 mov     eax, [esp+4Ch+var_34]
.text:00405A10                 mov     byte ptr [eax+esi], 5Ch ; '\'
.text:00405A14
.text:00405A14 loc_405A14:                             ; CODE XREF: sub_4053B0+656↑j
.text:00405A14                 inc     [esp+4Ch+var_34]
.text:00405A18                 mov     ecx, [esp+4Ch+arg_4]
.text:00405A1C                 cmp     [esp+4Ch+var_34], ecx
.text:00405A20                 jnb     short loc_405A35
.text:00405A22                 mov     cl, bl
.text:00405A24                 mov     esi, [esp+4Ch+arg_0]
.text:00405A28                 mov     edi, [esp+4Ch+var_34]
.text:00405A2C                 shr     cl, 6
.text:00405A2F                 add     cl, 30h ; '0'
.text:00405A32                 mov     [edi+esi], cl
.text:00405A35
.text:00405A35 loc_405A35:                             ; CODE XREF: sub_4053B0+670↑j
.text:00405A35                 inc     [esp+4Ch+var_34]
.text:00405A39                 mov     edi, [esp+4Ch+arg_4]
.text:00405A3D                 cmp     [esp+4Ch+var_34], edi
.text:00405A41                 jnb     short loc_405A59
.text:00405A43                 mov     cl, bl
.text:00405A45                 mov     esi, [esp+4Ch+arg_0]
.text:00405A49                 shr     cl, 3
.text:00405A4C                 mov     edi, [esp+4Ch+var_34]
.text:00405A50                 and     cl, 7
.text:00405A53                 add     cl, 30h ; '0'
.text:00405A56                 mov     [edi+esi], cl
.text:00405A59
.text:00405A59 loc_405A59:                             ; CODE XREF: sub_4053B0+691↑j
.text:00405A59                 inc     [esp+4Ch+var_34]
.text:00405A5D                 and     bl, 7
.text:00405A60                 add     bl, 30h ; '0'
.text:00405A63                 lea     esi, [esi+0]
.text:00405A69                 lea     edi, [edi+0]
.text:00405A70
.text:00405A70 loc_405A70:                             ; CODE XREF: sub_4053B0+645↑j
.text:00405A70                                         ; sub_4053B0+64C↑j
.text:00405A70                 lea     eax, [ebp+1]
.text:00405A73                 cmp     edx, eax
.text:00405A75                 jbe     loc_405770
.text:00405A7B                 mov     ebp, [esp+4Ch+arg_4]
.text:00405A7F                 cmp     [esp+4Ch+var_34], ebp
.text:00405A83                 jnb     short loc_405A90
.text:00405A85                 mov     ecx, [esp+4Ch+arg_0]
.text:00405A89                 mov     edi, [esp+4Ch+var_34]
.text:00405A8D                 mov     [edi+ecx], bl
.text:00405A90
.text:00405A90 loc_405A90:                             ; CODE XREF: sub_4053B0+6D3↑j
.text:00405A90                 inc     [esp+4Ch+var_34]
.text:00405A94                 mov     ebp, eax
.text:00405A96                 mov     eax, [esp+4Ch+Str]
.text:00405A9A                 movzx   ebx, byte ptr [ebp+eax+0]
.text:00405A9F                 jmp     loc_4059F0
.text:00405AA4 ; ---------------------------------------------------------------------------
.text:00405AA4
.text:00405AA4 loc_405AA4:                             ; CODE XREF: sub_4053B0+5FF↑j
.text:00405AA4                 mov     ecx, ds:_pctype
.text:00405AAA                 mov     edi, [ecx]
.text:00405AAC                 movzx   eax, word ptr [edi+edx*2]
.text:00405AB0                 and     eax, 157h
.text:00405AB5                 jmp     loc_4059C5
.text:00405AB5 ; ---------------------------------------------------------------------------
.text:00405ABA                 align 10h
.text:00405AC0
.text:00405AC0 loc_405AC0:                             ; CODE XREF: sub_4053B0+5E5↑j
.text:00405AC0                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00405AC5                 mov     [esp+4Ch+var_18._Wchar], 0
.text:00405ACD                 mov     [esp+4Ch+var_28], 0
.text:00405AD5                 mov     [esp+4Ch+var_29], 1
.text:00405ADA                 jz      loc_405C6C
.text:00405AE0
.text:00405AE0 loc_405AE0:                             ; CODE XREF: sub_4053B0+8CC↓j
.text:00405AE0                 mov     ecx, [esp+4Ch+arg_C]
.text:00405AE4                 lea     edx, [esp+4Ch+var_18]
.text:00405AE8                 mov     edi, [esp+4Ch+Str]
.text:00405AEC                 mov     [esp+4Ch+State], edx ; State
.text:00405AF0                 lea     esi, [esp+4Ch+var_18._State]
.text:00405AF4                 sub     ecx, ebp
.text:00405AF6                 mov     [esp+4Ch+SizeInBytes], ecx ; SizeInBytes
.text:00405AFA                 add     edi, ebp
.text:00405AFC                 mov     [esp+4Ch+var_30], edi
.text:00405B00                 mov     [esp+4Ch+Type], edi ; SrcCh
.text:00405B04                 mov     [esp+4Ch+C], esi ; DstCh
.text:00405B07                 call    mbrtowc
.text:00405B0C                 test    eax, eax
.text:00405B0E                 mov     edi, eax
.text:00405B10                 jz      short loc_405B50
.text:00405B12                 cmp     eax, 0FFFFFFFFh
.text:00405B15                 jz      loc_405C62
.text:00405B1B                 cmp     eax, 0FFFFFFFEh
.text:00405B1E                 jz      loc_405C22
.text:00405B24                 cmp     [esp+4Ch+arg_10], 1
.text:00405B29                 jz      short loc_405B60
.text:00405B2B
.text:00405B2B loc_405B2B:                             ; CODE XREF: sub_4053B0+7B9↓j
.text:00405B2B                                         ; sub_4053B0+86D↓j
.text:00405B2B                 movzx   ecx, [esp+4Ch+var_18._State]
.text:00405B30                 mov     [esp+4Ch+Type], 157h ; Type
.text:00405B38                 mov     [esp+4Ch+C], ecx ; C
.text:00405B3B                 call    iswctype
.text:00405B40                 test    eax, eax
.text:00405B42                 jnz     short loc_405B49
.text:00405B44                 mov     [esp+4Ch+var_29], 0
.text:00405B49
.text:00405B49 loc_405B49:                             ; CODE XREF: sub_4053B0+792↑j
.text:00405B49                 mov     [esp+4Ch+var_28], edi
.text:00405B4D                 lea     esi, [esi+0]
.text:00405B50
.text:00405B50 loc_405B50:                             ; CODE XREF: sub_4053B0+760↑j
.text:00405B50                                         ; sub_4053B0+87B↓j ...
.text:00405B50                 cmp     [esp+4Ch+var_28], 1
.text:00405B55                 jbe     loc_4059CC
.text:00405B5B                 jmp     loc_4059E5
.text:00405B60 ; ---------------------------------------------------------------------------
.text:00405B60
.text:00405B60 loc_405B60:                             ; CODE XREF: sub_4053B0+779↑j
.text:00405B60                 cmp     [esp+4Ch+arg_10], eax
.text:00405B64                 mov     edx, 1
.text:00405B69                 jnb     short loc_405B2B
.text:00405B6B
.text:00405B6B loc_405B6B:                             ; CODE XREF: sub_4053B0+867↓j
.text:00405B6B                 mov     ecx, [esp+4Ch+Str]
.text:00405B6F                 lea     esi, [edx+ebp]
.text:00405B72                 movsx   eax, byte ptr [esi+ecx]
.text:00405B76                 sub     eax, 5Bh ; '['  ; switch 34 cases
.text:00405B79                 cmp     eax, 21h
.text:00405B7C                 ja      def_405B82      ; jumptable 00405B82 default case, cases 93,95,97-123
.text:00405B82                 jmp     ds:jpt_405B82[eax*4] ; switch jump
.text:00405B82 ; ---------------------------------------------------------------------------
.text:00405B89                 align 4
.text:00405B8C jpt_405B82      dd offset loc_4057BB    ; DATA XREF: sub_4053B0+7D2↑r
.text:00405B8C                 dd offset loc_4057BB    ; jump table for switch statement
.text:00405B8C                 dd offset def_405B82
.text:00405B8C                 dd offset loc_4057BB
.text:00405B8C                 dd offset def_405B82
.text:00405B8C                 dd offset loc_4057BB
.text:00405B8C                 dd offset def_405B82
.text:00405B8C                 dd offset def_405B82
.text:00405B8C                 dd offset def_405B82
.text:00405B8C                 dd offset def_405B82
.text:00405B8C                 dd offset def_405B82
.text:00405B8C                 dd offset def_405B82
.text:00405B8C                 dd offset def_405B82
.text:00405B8C                 dd offset def_405B82
.text:00405B8C                 dd offset def_405B82
.text:00405B8C                 dd offset def_405B82
.text:00405B8C                 dd offset def_405B82
.text:00405B8C                 dd offset def_405B82
.text:00405B8C                 dd offset def_405B82
.text:00405B8C                 dd offset def_405B82
.text:00405B8C                 dd offset def_405B82
.text:00405B8C                 dd offset def_405B82
.text:00405B8C                 dd offset def_405B82
.text:00405B8C                 dd offset def_405B82
.text:00405B8C                 dd offset def_405B82
.text:00405B8C                 dd offset def_405B82
.text:00405B8C                 dd offset def_405B82
.text:00405B8C                 dd offset def_405B82
.text:00405B8C                 dd offset def_405B82
.text:00405B8C                 dd offset def_405B82
.text:00405B8C                 dd offset def_405B82
.text:00405B8C                 dd offset def_405B82
.text:00405B8C                 dd offset def_405B82
.text:00405B8C                 dd offset loc_4057BB
.text:00405C14 ; ---------------------------------------------------------------------------
.text:00405C14
.text:00405C14 def_405B82:                             ; CODE XREF: sub_4053B0+7CC↑j
.text:00405C14                                         ; sub_4053B0+7D2↑j
.text:00405C14                                         ; DATA XREF: ...
.text:00405C14                 inc     edx             ; jumptable 00405B82 default case, cases 93,95,97-123
.text:00405C15                 cmp     edx, edi
.text:00405C17                 jb      loc_405B6B
.text:00405C1D                 jmp     loc_405B2B
.text:00405C22 ; ---------------------------------------------------------------------------
.text:00405C22
.text:00405C22 loc_405C22:                             ; CODE XREF: sub_4053B0+76E↑j
.text:00405C22                 cmp     ebp, [esp+4Ch+arg_C]
.text:00405C26                 mov     [esp+4Ch+var_29], 0
.text:00405C2B                 jnb     loc_405B50
.text:00405C31                 mov     eax, [esp+4Ch+var_30]
.text:00405C35                 cmp     byte ptr [eax], 0
.text:00405C38                 jz      loc_405B50
.text:00405C3E
.text:00405C3E loc_405C3E:                             ; CODE XREF: sub_4053B0+8AB↓j
.text:00405C3E                 inc     [esp+4Ch+var_28]
.text:00405C42                 mov     esi, [esp+4Ch+var_28]
.text:00405C46                 lea     eax, [esi+ebp]
.text:00405C49                 cmp     eax, [esp+4Ch+arg_C]
.text:00405C4D                 jnb     loc_405B50
.text:00405C53                 mov     edi, [esp+4Ch+Str]
.text:00405C57                 cmp     byte ptr [eax+edi], 0
.text:00405C5B                 jnz     short loc_405C3E
.text:00405C5D                 jmp     loc_405B50
.text:00405C62 ; ---------------------------------------------------------------------------
.text:00405C62
.text:00405C62 loc_405C62:                             ; CODE XREF: sub_4053B0+765↑j
.text:00405C62                 mov     [esp+4Ch+var_29], 0
.text:00405C67                 jmp     loc_405B50
.text:00405C6C ; ---------------------------------------------------------------------------
.text:00405C6C
.text:00405C6C loc_405C6C:                             ; CODE XREF: sub_4053B0+72A↑j
.text:00405C6C                 mov     edx, [esp+4Ch+Str]
.text:00405C70                 mov     [esp+4Ch+C], edx ; Str
.text:00405C73                 call    strlen
.text:00405C78                 mov     [esp+4Ch+arg_C], eax
.text:00405C7C                 jmp     loc_405AE0
.text:00405C81 ; ---------------------------------------------------------------------------
.text:00405C81
.text:00405C81 loc_405C81:                             ; CODE XREF: sub_4053B0+105↑j
.text:00405C81                                         ; DATA XREF: sub_4053B0:jpt_4054B5↑o
.text:00405C81                 mov     dl, bl          ; jumptable 004054B5 case 92
.text:00405C83                 jmp     loc_4057B4
.text:00405C88 ; ---------------------------------------------------------------------------
.text:00405C88
.text:00405C88 loc_405C88:                             ; CODE XREF: sub_4053B0+105↑j
.text:00405C88                                         ; sub_4053B0+902↓j
.text:00405C88                                         ; DATA XREF: ...
.text:00405C88                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 004054B5 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:00405C8D                 jnz     def_4058B2      ; jumptable 004054B5 cases 37,43-58,65-90,93,95,97-122
.text:00405C8D                                         ; jumptable 004058B2 default case, cases 34-38,42-44,46,48-59
.text:00405C93                 jmp     loc_4057BB      ; jumptable 00405B82 cases 91,92,94,96,124
.text:00405C98 ; ---------------------------------------------------------------------------
.text:00405C98
.text:00405C98 loc_405C98:                             ; CODE XREF: sub_4053B0+105↑j
.text:00405C98                                         ; DATA XREF: sub_4053B0:jpt_4054B5↑o
.text:00405C98                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh ; jumptable 004054B5 cases 123,125
.text:00405C9D                 jz      short loc_405CB4
.text:00405C9F                 cmp     [esp+4Ch+arg_C], 1
.text:00405CA4
.text:00405CA4 loc_405CA4:                             ; CODE XREF: sub_4053B0+90C↓j
.text:00405CA4                 jnz     def_4058B2      ; jumptable 004054B5 cases 37,43-58,65-90,93,95,97-122
.text:00405CA4                                         ; jumptable 004058B2 default case, cases 34-38,42-44,46,48-59
.text:00405CAA
.text:00405CAA loc_405CAA:                             ; CODE XREF: sub_4053B0+105↑j
.text:00405CAA                                         ; DATA XREF: sub_4053B0:jpt_4054B5↑o
.text:00405CAA                 test    ebp, ebp        ; jumptable 004054B5 cases 35,126
.text:00405CAC                 jnz     def_4058B2      ; jumptable 004054B5 cases 37,43-58,65-90,93,95,97-122
.text:00405CAC                                         ; jumptable 004058B2 default case, cases 34-38,42-44,46,48-59
.text:00405CB2                 jmp     short loc_405C88 ; jumptable 004054B5 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:00405CB4 ; ---------------------------------------------------------------------------
.text:00405CB4
.text:00405CB4 loc_405CB4:                             ; CODE XREF: sub_4053B0+8ED↑j
.text:00405CB4                 mov     esi, [esp+4Ch+Str]
.text:00405CB8                 cmp     byte ptr [esi+1], 0
.text:00405CBC                 jmp     short loc_405CA4
.text:00405CBE ; ---------------------------------------------------------------------------
.text:00405CBE
.text:00405CBE loc_405CBE:                             ; CODE XREF: sub_4053B0:loc_40544F↑j
.text:00405CBE                 test    ebp, ebp
.text:00405CC0                 jnz     short loc_405CCD
.text:00405CC2                 cmp     [esp+4Ch+arg_10], 1
.text:00405CC7                 jz      loc_4057BB      ; jumptable 00405B82 cases 91,92,94,96,124
.text:00405CCD
.text:00405CCD loc_405CCD:                             ; CODE XREF: sub_4053B0+910↑j
.text:00405CCD                 mov     esi, [esp+4Ch+var_1C]
.text:00405CD1                 test    esi, esi
.text:00405CD3                 jz      short loc_405D08
.text:00405CD5                 mov     edi, [esp+4Ch+var_1C]
.text:00405CD9                 movzx   eax, byte ptr [edi]
.text:00405CDC                 test    al, al
.text:00405CDE                 jz      short loc_405D08
.text:00405CE0
.text:00405CE0 loc_405CE0:                             ; CODE XREF: sub_4053B0+956↓j
.text:00405CE0                 mov     ebp, [esp+4Ch+arg_4]
.text:00405CE4                 cmp     [esp+4Ch+var_34], ebp
.text:00405CE8                 jnb     short loc_405CF5
.text:00405CEA                 mov     ecx, [esp+4Ch+arg_0]
.text:00405CEE                 mov     ebx, [esp+4Ch+var_34]
.text:00405CF2                 mov     [ebx+ecx], al
.text:00405CF5
.text:00405CF5 loc_405CF5:                             ; CODE XREF: sub_4053B0+938↑j
.text:00405CF5                 inc     [esp+4Ch+var_1C]
.text:00405CF9                 inc     [esp+4Ch+var_34]
.text:00405CFD                 mov     edx, [esp+4Ch+var_1C]
.text:00405D01                 movzx   eax, byte ptr [edx]
.text:00405D04                 test    al, al
.text:00405D06                 jnz     short loc_405CE0
.text:00405D08
.text:00405D08 loc_405D08:                             ; CODE XREF: sub_4053B0+923↑j
.text:00405D08                                         ; sub_4053B0+92E↑j
.text:00405D08                 mov     eax, [esp+4Ch+arg_4]
.text:00405D0C                 cmp     [esp+4Ch+var_34], eax
.text:00405D10                 jnb     short loc_405D1E
.text:00405D12                 mov     edi, [esp+4Ch+arg_0]
.text:00405D16                 mov     esi, [esp+4Ch+var_34]
.text:00405D1A                 mov     byte ptr [esi+edi], 0
.text:00405D1E
.text:00405D1E loc_405D1E:                             ; CODE XREF: sub_4053B0+960↑j
.text:00405D1E                 mov     eax, [esp+4Ch+var_34]
.text:00405D22                 jmp     loc_4057EF
.text:00405D27 ; ---------------------------------------------------------------------------
.text:00405D27
.text:00405D27 loc_405D27:                             ; CODE XREF: sub_4053B0+95↑j
.text:00405D27                 mov     ebx, [esp+4Ch+Str]
.text:00405D2B                 cmp     byte ptr [ebp+ebx+0], 0
.text:00405D30                 jmp     loc_40544F
.text:00405D35 ; ---------------------------------------------------------------------------
.text:00405D35
.text:00405D35 loc_405D35:                             ; CODE XREF: sub_4053B0+3D↑j
.text:00405D35                                         ; DATA XREF: sub_4053B0:jpt_4053ED↑o
.text:00405D35                 mov     edx, [esp+4Ch+arg_4] ; jumptable 004053ED case 2
.text:00405D39                 cmp     [esp+4Ch+var_34], edx
.text:00405D3D                 jnb     short loc_405D46
.text:00405D3F                 mov     ecx, [esp+4Ch+arg_0]
.text:00405D43                 mov     byte ptr [ecx], 27h ; '''
.text:00405D46
.text:00405D46 loc_405D46:                             ; CODE XREF: sub_4053B0+98D↑j
.text:00405D46                 mov     [esp+4Ch+var_34], 1
.text:00405D4E                 mov     [esp+4Ch+var_1C], 40539Eh
.text:00405D56                 jmp     loc_405436
.text:00405D5B ; ---------------------------------------------------------------------------
.text:00405D5B
.text:00405D5B loc_405D5B:                             ; CODE XREF: sub_4053B0+3D↑j
.text:00405D5B                                         ; DATA XREF: sub_4053B0:jpt_4053ED↑o
.text:00405D5B                 mov     [esp+4Ch+var_21], 1 ; jumptable 004053ED case 4
.text:00405D60                 jmp     def_4053ED      ; jumptable 004053ED default case, cases 0,1
.text:00405D65 ; ---------------------------------------------------------------------------
.text:00405D65
.text:00405D65 loc_405D65:                             ; CODE XREF: sub_4053B0+3D↑j
.text:00405D65                                         ; DATA XREF: sub_4053B0:jpt_4053ED↑o
.text:00405D65                 mov     [esp+4Ch+C], 4053A0h ; jumptable 004053ED cases 5,6
.text:00405D6C                 call    ds:libintl_gettext
.text:00405D72                 cmp     eax, 4053A0h
.text:00405D77                 mov     edi, eax
.text:00405D79                 jz      short loc_405DF0
.text:00405D7B
.text:00405D7B loc_405D7B:                             ; CODE XREF: sub_4053B0+A45↓j
.text:00405D7B                                         ; sub_4053B0+A4C↓j
.text:00405D7B                 mov     [esp+4Ch+C], 40539Eh
.text:00405D82                 call    ds:libintl_gettext
.text:00405D88                 cmp     eax, 40539Eh
.text:00405D8D                 mov     edx, eax
.text:00405D8F                 jz      short loc_405DE2
.text:00405D91
.text:00405D91 loc_405D91:                             ; CODE XREF: sub_4053B0+A37↓j
.text:00405D91                                         ; sub_4053B0+A3E↓j
.text:00405D91                 mov     [esp+4Ch+var_1C], edi
.text:00405D95                 cmp     byte ptr [edi], 0
.text:00405D98                 jz      short loc_405DC8
.text:00405D9A
.text:00405D9A loc_405D9A:                             ; CODE XREF: sub_4053B0+A16↓j
.text:00405D9A                 mov     ecx, [esp+4Ch+arg_4]
.text:00405D9E                 cmp     [esp+4Ch+var_34], ecx
.text:00405DA2                 jnb     short loc_405DB7
.text:00405DA4                 mov     ebp, [esp+4Ch+var_1C]
.text:00405DA8                 mov     edi, [esp+4Ch+arg_0]
.text:00405DAC                 mov     esi, [esp+4Ch+var_34]
.text:00405DB0                 movzx   ebx, byte ptr [ebp+0]
.text:00405DB4                 mov     [esi+edi], bl
.text:00405DB7
.text:00405DB7 loc_405DB7:                             ; CODE XREF: sub_4053B0+9F2↑j
.text:00405DB7                 inc     [esp+4Ch+var_1C]
.text:00405DBB                 inc     [esp+4Ch+var_34]
.text:00405DBF                 mov     eax, [esp+4Ch+var_1C]
.text:00405DC3                 cmp     byte ptr [eax], 0
.text:00405DC6                 jnz     short loc_405D9A
.text:00405DC8
.text:00405DC8 loc_405DC8:                             ; CODE XREF: sub_4053B0+9E8↑j
.text:00405DC8                 mov     [esp+4Ch+var_21], 1
.text:00405DCD                 mov     [esp+4Ch+var_1C], edx
.text:00405DD1                 mov     [esp+4Ch+C], edx ; Str
.text:00405DD4                 call    strlen
.text:00405DD9                 mov     [esp+4Ch+var_20], eax
.text:00405DDD                 jmp     def_4053ED      ; jumptable 004053ED default case, cases 0,1
.text:00405DE2 ; ---------------------------------------------------------------------------
.text:00405DE2
.text:00405DE2 loc_405DE2:                             ; CODE XREF: sub_4053B0+9DF↑j
.text:00405DE2                 cmp     [esp+4Ch+arg_10], 6
.text:00405DE7                 jnz     short loc_405D91
.text:00405DE9                 mov     edx, offset asc_40539C ; "\"'`"
.text:00405DEE                 jmp     short loc_405D91
.text:00405DF0 ; ---------------------------------------------------------------------------
.text:00405DF0
.text:00405DF0 loc_405DF0:                             ; CODE XREF: sub_4053B0+9C9↑j
.text:00405DF0                 cmp     [esp+4Ch+arg_10], 6
.text:00405DF5                 jnz     short loc_405D7B
.text:00405DF7                 mov     edi, offset asc_40539C ; "\"'`"
.text:00405DFC                 jmp     loc_405D7B
.text:00405DFC sub_4053B0      endp
.text:00405DFC
.text:00405E01 ; ---------------------------------------------------------------------------
.text:00405E01                 jmp     short loc_405E10
.text:00405E01 ; ---------------------------------------------------------------------------
.text:00405E03                 align 10h
.text:00405E10
.text:00405E10 loc_405E10:                             ; CODE XREF: .text:00405E01↑j
.text:00405E10                 sub     esp, 0Ch
.text:00405E13                 mov     [esp+4], ebx
.text:00405E17                 mov     [esp+8], esi
.text:00405E1B                 call    _errno
.text:00405E20                 mov     esi, [eax]
.text:00405E22                 mov     dword ptr [esp], 24h ; '$'
.text:00405E29                 call    sub_403490
.text:00405E2E                 mov     edx, [esp+10h]
.text:00405E32                 mov     ebx, eax
.text:00405E34                 test    edx, edx
.text:00405E36                 jz      short loc_405E81
.text:00405E38
.text:00405E38 loc_405E38:                             ; CODE XREF: .text:00405E86↓j
.text:00405E38                 mov     ecx, [edx]
.text:00405E3A                 mov     [ebx], ecx
.text:00405E3C                 mov     ecx, [edx+4]
.text:00405E3F                 mov     [ebx+4], ecx
.text:00405E42                 mov     ecx, [edx+8]
.text:00405E45                 mov     [ebx+8], ecx
.text:00405E48                 mov     ecx, [edx+0Ch]
.text:00405E4B                 mov     [ebx+0Ch], ecx
.text:00405E4E                 mov     ecx, [edx+10h]
.text:00405E51                 mov     [ebx+10h], ecx
.text:00405E54                 mov     ecx, [edx+14h]
.text:00405E57                 mov     [ebx+14h], ecx
.text:00405E5A                 mov     ecx, [edx+18h]
.text:00405E5D                 mov     [ebx+18h], ecx
.text:00405E60                 mov     ecx, [edx+1Ch]
.text:00405E63                 mov     [ebx+1Ch], ecx
.text:00405E66                 mov     ecx, [edx+20h]
.text:00405E69                 mov     [ebx+20h], ecx
.text:00405E6C                 call    _errno
.text:00405E71                 mov     [eax], esi
.text:00405E73                 mov     esi, [esp+8]
.text:00405E77                 mov     eax, ebx
.text:00405E79                 mov     ebx, [esp+4]
.text:00405E7D                 add     esp, 0Ch
.text:00405E80                 retn
.text:00405E81 ; ---------------------------------------------------------------------------
.text:00405E81
.text:00405E81 loc_405E81:                             ; CODE XREF: .text:00405E36↑j
.text:00405E81                 mov     edx, offset dword_40C190
.text:00405E86                 jmp     short loc_405E38
.text:00405E86 ; ---------------------------------------------------------------------------
.text:00405E88                 align 10h
.text:00405E90                 mov     eax, [esp+4]
.text:00405E94                 test    eax, eax
.text:00405E96                 jz      short loc_405EA0
.text:00405E98
.text:00405E98 loc_405E98:                             ; CODE XREF: .text:00405EA5↓j
.text:00405E98                 mov     eax, [eax]
.text:00405E9A                 retn
.text:00405E9A ; ---------------------------------------------------------------------------
.text:00405E9B                 align 10h
.text:00405EA0
.text:00405EA0 loc_405EA0:                             ; CODE XREF: .text:00405E96↑j
.text:00405EA0                 mov     eax, offset dword_40C190
.text:00405EA5                 jmp     short loc_405E98
.text:00405EA5 ; ---------------------------------------------------------------------------
.text:00405EA7                 align 10h
.text:00405EB0                 mov     edx, [esp+4]
.text:00405EB4                 test    edx, edx
.text:00405EB6                 jz      short loc_405EC0
.text:00405EB8
.text:00405EB8 loc_405EB8:                             ; CODE XREF: .text:00405EC5↓j
.text:00405EB8                 mov     ecx, [esp+8]
.text:00405EBC                 mov     [edx], ecx
.text:00405EBE                 retn
.text:00405EBE ; ---------------------------------------------------------------------------
.text:00405EBF                 align 10h
.text:00405EC0
.text:00405EC0 loc_405EC0:                             ; CODE XREF: .text:00405EB6↑j
.text:00405EC0                 mov     edx, offset dword_40C190
.text:00405EC5                 jmp     short loc_405EB8
.text:00405EC5 ; ---------------------------------------------------------------------------
.text:00405EC7                 align 10h
.text:00405ED0                 sub     esp, 8
.text:00405ED3                 mov     eax, [esp+0Ch]
.text:00405ED7                 movzx   ecx, byte ptr [esp+10h]
.text:00405EDC                 mov     [esp], ebx
.text:00405EDF                 mov     ebx, [esp+14h]
.text:00405EE3                 mov     [esp+4], esi
.text:00405EE7                 mov     dl, cl
.text:00405EE9                 shr     dl, 5
.text:00405EEC                 movzx   edx, dl
.text:00405EEF                 shl     edx, 2
.text:00405EF2                 test    eax, eax
.text:00405EF4                 lea     esi, [edx+eax+4]
.text:00405EF8                 jz      short loc_405F20
.text:00405EFA
.text:00405EFA loc_405EFA:                             ; CODE XREF: .text:00405F26↓j
.text:00405EFA                 mov     edx, [esi]
.text:00405EFC                 and     ecx, 1Fh
.text:00405EFF                 and     ebx, 1
.text:00405F02                 mov     eax, edx
.text:00405F04                 shr     eax, cl
.text:00405F06                 and     eax, 1
.text:00405F09                 xor     ebx, eax
.text:00405F0B                 shl     ebx, cl
.text:00405F0D                 xor     edx, ebx
.text:00405F0F                 mov     [esi], edx
.text:00405F11                 mov     ebx, [esp]
.text:00405F14                 mov     esi, [esp+4]
.text:00405F18                 add     esp, 8
.text:00405F1B                 retn
.text:00405F1B ; ---------------------------------------------------------------------------
.text:00405F1C                 align 10h
.text:00405F20
.text:00405F20 loc_405F20:                             ; CODE XREF: .text:00405EF8↑j
.text:00405F20                 lea     esi, dword_40C194[edx]
.text:00405F26                 jmp     short loc_405EFA
.text:00405F26 ; ---------------------------------------------------------------------------
.text:00405F28                 align 10h
.text:00405F30                 sub     esp, 2Ch
.text:00405F33                 mov     [esp+24h], ebx
.text:00405F37                 mov     ebx, [esp+40h]
.text:00405F3B                 mov     [esp+28h], esi
.text:00405F3F                 test    ebx, ebx
.text:00405F41                 jz      short loc_405F90
.text:00405F43
.text:00405F43 loc_405F43:                             ; CODE XREF: .text:00405F95↓j
.text:00405F43                 call    _errno
.text:00405F48                 mov     esi, [eax]
.text:00405F4A                 mov     [esp+14h], ebx
.text:00405F4E                 mov     edx, [ebx]
.text:00405F50                 mov     ecx, [esp+38h]
.text:00405F54                 mov     ebx, [esp+3Ch]
.text:00405F58                 mov     [esp+10h], edx
.text:00405F5C                 mov     edx, [esp+34h]
.text:00405F60                 mov     [esp+0Ch], ebx
.text:00405F64                 mov     [esp+8], ecx
.text:00405F68                 mov     [esp+4], edx
.text:00405F6C                 mov     edx, [esp+30h]
.text:00405F70                 mov     [esp], edx
.text:00405F73                 call    sub_4053B0
.text:00405F78                 mov     ebx, eax
.text:00405F7A                 call    _errno
.text:00405F7F                 mov     [eax], esi
.text:00405F81                 mov     esi, [esp+28h]
.text:00405F85                 mov     eax, ebx
.text:00405F87                 mov     ebx, [esp+24h]
.text:00405F8B                 add     esp, 2Ch
.text:00405F8E                 retn
.text:00405F8E ; ---------------------------------------------------------------------------
.text:00405F8F                 align 10h
.text:00405F90
.text:00405F90 loc_405F90:                             ; CODE XREF: .text:00405F41↑j
.text:00405F90                 mov     ebx, offset dword_40C190
.text:00405F95                 jmp     short loc_405F43
.text:00405F95 ; ---------------------------------------------------------------------------
.text:00405F97                 align 10h
.text:00405FA0                 push    ebp
.text:00405FA1                 push    edi
.text:00405FA2                 push    esi
.text:00405FA3                 push    ebx
.text:00405FA4                 sub     esp, 2Ch
.text:00405FA7                 mov     ebp, [esp+48h]
.text:00405FAB                 call    _errno
.text:00405FB0                 mov     edx, [eax]
.text:00405FB2                 test    ebp, ebp
.text:00405FB4                 mov     ebx, ebp
.text:00405FB6                 mov     [esp+28h], edx
.text:00405FBA                 jz      loc_406070
.text:00405FC0
.text:00405FC0 loc_405FC0:                             ; CODE XREF: .text:00406075↓j
.text:00405FC0                 call    _errno
.text:00405FC5                 mov     edi, [eax]
.text:00405FC7                 mov     esi, ebp
.text:00405FC9                 mov     [esp+14h], ebx
.text:00405FCD                 mov     ecx, [ebx]
.text:00405FCF                 mov     dword ptr [esp], 0
.text:00405FD6                 mov     edx, [esp+44h]
.text:00405FDA                 mov     dword ptr [esp+4], 0
.text:00405FE2                 mov     eax, [esp+40h]
.text:00405FE6                 mov     [esp+10h], ecx
.text:00405FEA                 mov     [esp+0Ch], edx
.text:00405FEE                 mov     [esp+8], eax
.text:00405FF2                 call    sub_4053B0
.text:00405FF7                 mov     ebx, eax
.text:00405FF9                 call    _errno
.text:00405FFE                 mov     [eax], edi
.text:00406000                 lea     edi, [ebx+1]
.text:00406003                 mov     [esp], edi
.text:00406006                 call    sub_403490
.text:0040600B                 mov     [esp+24h], eax
.text:0040600F                 test    ebp, ebp
.text:00406011                 jz      short loc_406062
.text:00406013
.text:00406013 loc_406013:                             ; CODE XREF: .text:00406067↓j
.text:00406013                 call    _errno
.text:00406018                 mov     ebp, [eax]
.text:0040601A                 mov     [esp+14h], esi
.text:0040601E                 mov     ecx, [esi]
.text:00406020                 mov     [esp+4], edi
.text:00406024                 mov     edx, [esp+44h]
.text:00406028                 mov     esi, [esp+24h]
.text:0040602C                 mov     [esp+10h], ecx
.text:00406030                 mov     eax, [esp+40h]
.text:00406034                 mov     [esp+0Ch], edx
.text:00406038                 mov     [esp], esi
.text:0040603B                 mov     [esp+8], eax
.text:0040603F                 call    sub_4053B0
.text:00406044                 call    _errno
.text:00406049                 mov     [eax], ebp
.text:0040604B                 call    _errno
.text:00406050                 mov     ebx, [esp+28h]
.text:00406054                 mov     [eax], ebx
.text:00406056                 mov     eax, [esp+24h]
.text:0040605A                 add     esp, 2Ch
.text:0040605D                 pop     ebx
.text:0040605E                 pop     esi
.text:0040605F                 pop     edi
.text:00406060                 pop     ebp
.text:00406061                 retn
.text:00406062 ; ---------------------------------------------------------------------------
.text:00406062
.text:00406062 loc_406062:                             ; CODE XREF: .text:00406011↑j
.text:00406062                 mov     esi, offset dword_40C190
.text:00406067                 jmp     short loc_406013
.text:00406067 ; ---------------------------------------------------------------------------
.text:00406069                 align 10h
.text:00406070
.text:00406070 loc_406070:                             ; CODE XREF: .text:00405FBA↑j
.text:00406070                 mov     ebx, offset dword_40C190
.text:00406075                 jmp     loc_405FC0
.text:00406075 ; ---------------------------------------------------------------------------
.text:0040607A                 align 10h
.text:00406080                 sub     esp, 1Ch
.text:00406083                 mov     edx, [esp+24h]
.text:00406087                 mov     dword ptr [esp+0Ch], offset dword_40C190
.text:0040608F                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00406097                 mov     [esp+4], edx
.text:0040609B                 mov     edx, [esp+20h]
.text:0040609F                 mov     [esp], edx
.text:004060A2                 call    sub_4064F0
.text:004060A7                 add     esp, 1Ch
.text:004060AA                 retn
.text:004060AA ; ---------------------------------------------------------------------------
.text:004060AB                 align 10h
.text:004060B0                 sub     esp, 1Ch
.text:004060B3                 mov     edx, [esp+20h]
.text:004060B7                 mov     dword ptr [esp+0Ch], offset dword_40C190
.text:004060BF                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:004060C7                 mov     [esp+4], edx
.text:004060CB                 mov     dword ptr [esp], 0
.text:004060D2                 call    sub_4064F0
.text:004060D7                 add     esp, 1Ch
.text:004060DA                 retn
.text:004060DA ; ---------------------------------------------------------------------------
.text:004060DB                 align 10h
.text:004060E0                 push    ebp
.text:004060E1                 xor     eax, eax
.text:004060E3                 mov     ecx, 8
.text:004060E8                 push    edi
.text:004060E9                 push    esi
.text:004060EA                 push    ebx
.text:004060EB                 sub     esp, 0ACh
.text:004060F1                 mov     ebp, [esp+0C4h]
.text:004060F8                 cld
.text:004060F9                 lea     edi, [esp+14h]
.text:004060FD                 mov     [esp+10h], ebp
.text:00406101                 rep stosd
.text:00406103                 mov     eax, [esp+30h]
.text:00406107                 mov     edi, [esp+10h]
.text:0040610B                 mov     esi, [esp+14h]
.text:0040610F                 mov     [esp+60h], eax
.text:00406113                 mov     ebp, [esp+18h]
.text:00406117                 mov     eax, [esp+10h]
.text:0040611B                 mov     [esp+40h], edi
.text:0040611F                 mov     ecx, [esp+28h]
.text:00406123                 mov     edi, [esp+1Ch]
.text:00406127                 mov     [esp+44h], esi
.text:0040612B                 mov     edx, [esp+2Ch]
.text:0040612F                 mov     esi, [esp+20h]
.text:00406133                 mov     [esp+70h], eax
.text:00406137                 mov     ebx, [esp+24h]
.text:0040613B                 mov     eax, [esp+14h]
.text:0040613F                 mov     [esp+48h], ebp
.text:00406143                 mov     [esp+4Ch], edi
.text:00406147                 mov     [esp+50h], esi
.text:0040614B                 mov     [esp+54h], ebx
.text:0040614F                 mov     [esp+58h], ecx
.text:00406153                 mov     [esp+5Ch], edx
.text:00406157                 mov     [esp+74h], eax
.text:0040615B                 mov     [esp+78h], ebp
.text:0040615F                 mov     [esp+7Ch], edi
.text:00406163                 mov     [esp+80h], esi
.text:0040616A                 mov     [esp+84h], ebx
.text:00406171                 mov     ebx, [esp+30h]
.text:00406175                 mov     [esp+8Ch], edx
.text:0040617C                 mov     edx, [esp+0C8h]
.text:00406183                 mov     [esp+88h], ecx
.text:0040618A                 lea     ecx, [esp+70h]
.text:0040618E                 mov     [esp+4], edx
.text:00406192                 mov     edx, [esp+0C0h]
.text:00406199                 mov     [esp+90h], ebx
.text:004061A0                 mov     [esp+0Ch], ecx
.text:004061A4                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:004061AC                 mov     [esp], edx
.text:004061AF                 call    sub_4064F0
.text:004061B4                 add     esp, 0ACh
.text:004061BA                 pop     ebx
.text:004061BB                 pop     esi
.text:004061BC                 pop     edi
.text:004061BD                 pop     ebp
.text:004061BE                 retn
.text:004061BE ; ---------------------------------------------------------------------------
.text:004061BF                 align 10h
.text:004061C0                 push    ebp
.text:004061C1                 xor     eax, eax
.text:004061C3                 mov     ecx, 8
.text:004061C8                 push    edi
.text:004061C9                 push    esi
.text:004061CA                 push    ebx
.text:004061CB                 sub     esp, 0ACh
.text:004061D1                 mov     edx, [esp+0C4h]
.text:004061D8                 cld
.text:004061D9                 lea     edi, [esp+14h]
.text:004061DD                 mov     [esp+10h], edx
.text:004061E1                 rep stosd
.text:004061E3                 mov     eax, [esp+30h]
.text:004061E7                 mov     ebp, [esp+10h]
.text:004061EB                 mov     edi, [esp+14h]
.text:004061EF                 mov     [esp+60h], eax
.text:004061F3                 mov     esi, [esp+20h]
.text:004061F7                 mov     eax, [esp+10h]
.text:004061FB                 mov     [esp+40h], ebp
.text:004061FF                 mov     ecx, [esp+28h]
.text:00406203                 mov     ebp, [esp+18h]
.text:00406207                 mov     [esp+44h], edi
.text:0040620B                 mov     edx, [esp+2Ch]
.text:0040620F                 mov     edi, [esp+1Ch]
.text:00406213                 mov     [esp+70h], eax
.text:00406217                 mov     ebx, [esp+24h]
.text:0040621B                 mov     eax, [esp+14h]
.text:0040621F                 mov     [esp+48h], ebp
.text:00406223                 mov     [esp+4Ch], edi
.text:00406227                 mov     [esp+50h], esi
.text:0040622B                 mov     [esp+54h], ebx
.text:0040622F                 mov     [esp+58h], ecx
.text:00406233                 mov     [esp+5Ch], edx
.text:00406237                 mov     [esp+74h], eax
.text:0040623B                 mov     [esp+78h], ebp
.text:0040623F                 mov     [esp+7Ch], edi
.text:00406243                 mov     [esp+80h], esi
.text:0040624A                 mov     [esp+84h], ebx
.text:00406251                 mov     esi, [esp+30h]
.text:00406255                 lea     ebx, [esp+70h]
.text:00406259                 mov     [esp+8Ch], edx
.text:00406260                 mov     edx, [esp+0C8h]
.text:00406267                 mov     [esp+88h], ecx
.text:0040626E                 mov     ecx, [esp+0CCh]
.text:00406275                 mov     [esp+4], edx
.text:00406279                 mov     edx, [esp+0C0h]
.text:00406280                 mov     [esp+90h], esi
.text:00406287                 mov     [esp+0Ch], ebx
.text:0040628B                 mov     [esp+8], ecx
.text:0040628F                 mov     [esp], edx
.text:00406292                 call    sub_4064F0
.text:00406297                 add     esp, 0ACh
.text:0040629D                 pop     ebx
.text:0040629E                 pop     esi
.text:0040629F                 pop     edi
.text:004062A0                 pop     ebp
.text:004062A1                 retn
.text:004062A1 ; ---------------------------------------------------------------------------
.text:004062A2                 align 10h
.text:004062B0                 push    ebp
.text:004062B1                 xor     eax, eax
.text:004062B3                 mov     ecx, 8
.text:004062B8                 push    edi
.text:004062B9                 push    esi
.text:004062BA                 push    ebx
.text:004062BB                 sub     esp, 0ACh
.text:004062C1                 mov     edi, [esp+0C0h]
.text:004062C8                 cld
.text:004062C9                 mov     [esp+10h], edi
.text:004062CD                 lea     edi, [esp+14h]
.text:004062D1                 rep stosd
.text:004062D3                 mov     eax, [esp+30h]
.text:004062D7                 mov     esi, [esp+10h]
.text:004062DB                 mov     ebx, [esp+14h]
.text:004062DF                 mov     [esp+60h], eax
.text:004062E3                 mov     ebp, [esp+18h]
.text:004062E7                 mov     eax, [esp+10h]
.text:004062EB                 mov     [esp+40h], esi
.text:004062EF                 mov     edi, [esp+1Ch]
.text:004062F3                 mov     esi, [esp+20h]
.text:004062F7                 mov     [esp+44h], ebx
.text:004062FB                 mov     ecx, [esp+28h]
.text:004062FF                 mov     edx, [esp+2Ch]
.text:00406303                 mov     [esp+70h], eax
.text:00406307                 mov     ebx, [esp+24h]
.text:0040630B                 mov     eax, [esp+14h]
.text:0040630F                 mov     [esp+48h], ebp
.text:00406313                 mov     [esp+4Ch], edi
.text:00406317                 mov     [esp+50h], esi
.text:0040631B                 mov     [esp+54h], ebx
.text:0040631F                 mov     [esp+58h], ecx
.text:00406323                 mov     [esp+5Ch], edx
.text:00406327                 mov     [esp+74h], eax
.text:0040632B                 mov     [esp+78h], ebp
.text:0040632F                 mov     [esp+7Ch], edi
.text:00406333                 mov     [esp+80h], esi
.text:0040633A                 mov     [esp+84h], ebx
.text:00406341                 mov     [esp+8Ch], edx
.text:00406348                 lea     edx, [esp+70h]
.text:0040634C                 mov     [esp+88h], ecx
.text:00406353                 mov     ecx, [esp+30h]
.text:00406357                 mov     [esp+0Ch], edx
.text:0040635B                 mov     edx, [esp+0C4h]
.text:00406362                 mov     [esp+90h], ecx
.text:00406369                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00406371                 mov     [esp+4], edx
.text:00406375                 mov     dword ptr [esp], 0
.text:0040637C                 call    sub_4064F0
.text:00406381                 add     esp, 0ACh
.text:00406387                 pop     ebx
.text:00406388                 pop     esi
.text:00406389                 pop     edi
.text:0040638A                 pop     ebp
.text:0040638B                 retn
.text:0040638B ; ---------------------------------------------------------------------------
.text:0040638C                 align 10h
.text:00406390                 push    edi
.text:00406391                 push    esi
.text:00406392                 push    ebx
.text:00406393                 sub     esp, 40h
.text:00406396                 mov     edx, ds:dword_40C19C
.text:0040639C                 mov     ebx, ds:dword_40C190
.text:004063A2                 mov     esi, ds:dword_40C198
.text:004063A8                 mov     edi, ds:dword_40C194
.text:004063AE                 mov     [esp+1Ch], edx
.text:004063B2                 mov     ecx, ds:dword_40C1A0
.text:004063B8                 mov     edx, ds:dword_40C1B0
.text:004063BE                 mov     [esp+10h], ebx
.text:004063C2                 mov     ebx, ds:dword_40C1A4
.text:004063C8                 mov     [esp+30h], edx
.text:004063CC                 movzx   edx, byte ptr [esp+54h]
.text:004063D1                 mov     [esp+18h], esi
.text:004063D5                 mov     esi, ds:dword_40C1AC
.text:004063DB                 mov     [esp+14h], edi
.text:004063DF                 mov     edi, ds:dword_40C1A8
.text:004063E5                 mov     [esp+20h], ecx
.text:004063E9                 mov     cl, dl
.text:004063EB                 shr     cl, 5
.text:004063EE                 mov     [esp+24h], ebx
.text:004063F2                 movzx   ebx, cl
.text:004063F5                 mov     [esp+2Ch], esi
.text:004063F9                 lea     esi, [esp+10h]
.text:004063FD                 mov     [esp+28h], edi
.text:00406401                 lea     edi, [esi+ebx*4]
.text:00406404                 mov     ebx, edx
.text:00406406                 mov     edx, [edi+4]
.text:00406409                 and     ebx, 1Fh
.text:0040640C                 mov     cl, bl
.text:0040640E                 mov     eax, edx
.text:00406410                 shr     eax, cl
.text:00406412                 and     eax, 1
.text:00406415                 xor     eax, 1
.text:00406418                 shl     eax, cl
.text:0040641A                 xor     edx, eax
.text:0040641C                 mov     [edi+4], edx
.text:0040641F                 mov     edx, [esp+50h]
.text:00406423                 mov     [esp+0Ch], esi
.text:00406427                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:0040642F                 mov     [esp+4], edx
.text:00406433                 mov     dword ptr [esp], 0
.text:0040643A                 call    sub_4064F0
.text:0040643F                 add     esp, 40h
.text:00406442                 pop     ebx
.text:00406443                 pop     esi
.text:00406444                 pop     edi
.text:00406445                 retn
.text:00406445 ; ---------------------------------------------------------------------------
.text:00406446                 align 10h
.text:00406450
.text:00406450 ; =============== S U B R O U T I N E =======================================
.text:00406450
.text:00406450
.text:00406450 ; int __cdecl sub_406450(char *)
.text:00406450 sub_406450      proc near               ; CODE XREF: sub_403370+64↑p
.text:00406450
.text:00406450 var_4C          = dword ptr -4Ch
.text:00406450 var_48          = dword ptr -48h
.text:00406450 var_44          = dword ptr -44h
.text:00406450 var_40          = dword ptr -40h
.text:00406450 var_3C          = dword ptr -3Ch
.text:00406450 var_38          = dword ptr -38h
.text:00406450 var_34          = dword ptr -34h
.text:00406450 var_30          = dword ptr -30h
.text:00406450 var_2C          = dword ptr -2Ch
.text:00406450 var_28          = dword ptr -28h
.text:00406450 var_24          = dword ptr -24h
.text:00406450 var_20          = dword ptr -20h
.text:00406450 var_1C          = dword ptr -1Ch
.text:00406450 arg_0           = dword ptr  4
.text:00406450
.text:00406450                 sub     esp, 4Ch
.text:00406453                 mov     ecx, ds:dword_40C190
.text:00406459                 mov     [esp+4Ch+var_44], 0FFFFFFFFh ; int
.text:00406461                 mov     edx, ds:dword_40C194
.text:00406467                 mov     [esp+4Ch+var_4C], 0 ; int
.text:0040646E                 mov     [esp+4Ch+var_3C], ecx
.text:00406472                 mov     ecx, ds:dword_40C19C
.text:00406478                 mov     [esp+4Ch+var_38], edx
.text:0040647C                 mov     edx, ds:dword_40C198
.text:00406482                 mov     [esp+4Ch+var_30], ecx
.text:00406486                 mov     ecx, ds:dword_40C1A0
.text:0040648C                 mov     eax, edx
.text:0040648E                 shr     eax, 1Ah
.text:00406491                 and     eax, 1
.text:00406494                 xor     eax, 1
.text:00406497                 mov     [esp+4Ch+var_2C], ecx
.text:0040649B                 shl     eax, 1Ah
.text:0040649E                 mov     ecx, ds:dword_40C1A4
.text:004064A4                 xor     edx, eax
.text:004064A6                 mov     [esp+4Ch+var_34], edx
.text:004064AA                 mov     edx, [esp+4Ch+arg_0]
.text:004064AE                 mov     [esp+4Ch+var_28], ecx
.text:004064B2                 mov     ecx, ds:dword_40C1A8
.text:004064B8                 mov     [esp+4Ch+var_48], edx ; char *
.text:004064BC                 mov     [esp+4Ch+var_24], ecx
.text:004064C0                 mov     ecx, ds:dword_40C1AC
.text:004064C6                 mov     [esp+4Ch+var_20], ecx
.text:004064CA                 mov     ecx, ds:dword_40C1B0
.text:004064D0                 mov     [esp+4Ch+var_1C], ecx
.text:004064D4                 lea     ecx, [esp+4Ch+var_3C]
.text:004064D8                 mov     [esp+4Ch+var_40], ecx ; int
.text:004064DC                 call    sub_4064F0
.text:004064E1                 add     esp, 4Ch
.text:004064E4                 retn
.text:004064E4 sub_406450      endp
.text:004064E4
.text:004064E4 ; ---------------------------------------------------------------------------
.text:004064E5                 align 10h
.text:004064F0
.text:004064F0 ; =============== S U B R O U T I N E =======================================
.text:004064F0
.text:004064F0
.text:004064F0 ; int __cdecl sub_4064F0(int, char *, int, int)
.text:004064F0 sub_4064F0      proc near               ; CODE XREF: .text:004060A2↑p
.text:004064F0                                         ; .text:004060D2↑p ...
.text:004064F0
.text:004064F0 Block           = dword ptr -2Ch
.text:004064F0 var_28          = dword ptr -28h
.text:004064F0 Str             = dword ptr -24h
.text:004064F0 var_20          = dword ptr -20h
.text:004064F0 var_1C          = dword ptr -1Ch
.text:004064F0 var_18          = dword ptr -18h
.text:004064F0 var_14          = dword ptr -14h
.text:004064F0 arg_0           = dword ptr  4
.text:004064F0 arg_4           = dword ptr  8
.text:004064F0 arg_8           = dword ptr  0Ch
.text:004064F0 arg_C           = dword ptr  10h
.text:004064F0
.text:004064F0                 push    ebp
.text:004064F1                 push    edi
.text:004064F2                 push    esi
.text:004064F3                 push    ebx
.text:004064F4                 sub     esp, 1Ch
.text:004064F7                 call    _errno
.text:004064FC                 mov     edx, [eax]
.text:004064FE                 mov     eax, [esp+2Ch+arg_0]
.text:00406502                 mov     [esp+2Ch+var_14], edx
.text:00406506                 test    eax, eax
.text:00406508                 js      loc_4066AA
.text:0040650E                 mov     eax, [esp+2Ch+arg_0]
.text:00406512                 cmp     dword_40B040, eax
.text:00406518                 ja      short loc_406590
.text:0040651A                 mov     esi, eax
.text:0040651C                 inc     esi
.text:0040651D                 cmp     esi, 1FFFFFFFh
.text:00406523                 ja      loc_4066AF
.text:00406529                 mov     ebx, off_40B04C
.text:0040652F                 cmp     ebx, offset dword_40B044
.text:00406535                 jz      loc_406681
.text:0040653B
.text:0040653B loc_40653B:                             ; CODE XREF: sub_4064F0+1B5↓j
.text:0040653B                 mov     [esp+2Ch+Block], ebx ; void *
.text:0040653E                 lea     ecx, ds:0[esi*8]
.text:00406545                 mov     ebp, esi
.text:00406547                 mov     [esp+2Ch+var_28], ecx ; size_t
.text:0040654B                 call    sub_403520
.text:00406550                 mov     off_40B04C, eax
.text:00406555                 mov     ebx, dword_40B040
.text:0040655B                 sub     ebp, ebx
.text:0040655D                 lea     edi, [eax+ebx*8]
.text:00406560                 lea     eax, ds:0[ebp*8]
.text:00406567                 cmp     eax, 7
.text:0040656A                 jbe     short loc_406580
.text:0040656C                 test    edi, 4
.text:00406572                 jz      short loc_406580
.text:00406574                 mov     dword ptr [edi], 0
.text:0040657A                 sub     eax, 4
.text:0040657D                 add     edi, 4
.text:00406580
.text:00406580 loc_406580:                             ; CODE XREF: sub_4064F0+7A↑j
.text:00406580                                         ; sub_4064F0+82↑j
.text:00406580                 cld
.text:00406581                 mov     ecx, eax
.text:00406583                 shr     ecx, 2
.text:00406586                 xor     eax, eax
.text:00406588                 rep stosd
.text:0040658A                 mov     dword_40B040, esi
.text:00406590
.text:00406590 loc_406590:                             ; CODE XREF: sub_4064F0+28↑j
.text:00406590                 mov     esi, off_40B04C
.text:00406596                 mov     eax, [esp+2Ch+arg_0]
.text:0040659A                 mov     ebp, [esi+eax*8]
.text:0040659D                 mov     edi, [esi+eax*8+4]
.text:004065A1                 mov     esi, [esp+2Ch+arg_C]
.text:004065A5                 test    esi, esi
.text:004065A7                 jz      loc_406677
.text:004065AD
.text:004065AD loc_4065AD:                             ; CODE XREF: sub_4064F0+18C↓j
.text:004065AD                 call    _errno
.text:004065B2                 mov     ebx, [eax]
.text:004065B4                 mov     [esp+2Ch+var_18], esi ; int
.text:004065B8                 mov     ecx, [esi]
.text:004065BA                 mov     [esp+2Ch+Block], edi ; int
.text:004065BD                 mov     edx, [esp+2Ch+arg_8]
.text:004065C1                 mov     [esp+2Ch+var_28], ebp ; int
.text:004065C5                 mov     [esp+2Ch+var_1C], ecx ; int
.text:004065C9                 mov     ecx, [esp+2Ch+arg_4]
.text:004065CD                 mov     [esp+2Ch+var_20], edx ; int
.text:004065D1                 mov     [esp+2Ch+Str], ecx ; Str
.text:004065D5                 call    sub_4053B0
.text:004065DA                 mov     esi, eax
.text:004065DC                 call    _errno
.text:004065E1                 mov     [eax], ebx
.text:004065E3                 cmp     ebp, esi
.text:004065E5                 ja      short loc_40665B
.text:004065E7                 lea     ebp, [esi+1]
.text:004065EA                 mov     ebx, off_40B04C
.text:004065F0                 cmp     edi, offset unk_40C090
.text:004065F6                 mov     esi, [esp+2Ch+arg_0]
.text:004065FA                 mov     [ebx+esi*8], ebp
.text:004065FD                 jz      short loc_40660D
.text:004065FF                 mov     [esp+2Ch+Block], edi ; Block
.text:00406602                 call    free
.text:00406607                 mov     ebx, off_40B04C
.text:0040660D
.text:0040660D loc_40660D:                             ; CODE XREF: sub_4064F0+10D↑j
.text:0040660D                 mov     [esp+2Ch+Block], ebp ; size_t
.text:00406610                 call    sub_403490
.text:00406615                 mov     esi, [esp+2Ch+arg_C]
.text:00406619                 mov     edi, eax
.text:0040661B                 mov     eax, [esp+2Ch+arg_0]
.text:0040661F                 test    esi, esi
.text:00406621                 mov     [ebx+eax*8+4], edi
.text:00406625                 jz      short loc_406670
.text:00406627
.text:00406627 loc_406627:                             ; CODE XREF: sub_4064F0+185↓j
.text:00406627                 call    _errno
.text:0040662C                 mov     ebx, [eax]
.text:0040662E                 mov     [esp+2Ch+var_18], esi ; int
.text:00406632                 mov     ecx, [esi]
.text:00406634                 mov     [esp+2Ch+Block], edi ; int
.text:00406637                 mov     edx, [esp+2Ch+arg_8]
.text:0040663B                 mov     [esp+2Ch+var_28], ebp ; int
.text:0040663F                 mov     [esp+2Ch+var_1C], ecx ; int
.text:00406643                 mov     ecx, [esp+2Ch+arg_4]
.text:00406647                 mov     [esp+2Ch+var_20], edx ; int
.text:0040664B                 mov     [esp+2Ch+Str], ecx ; Str
.text:0040664F                 call    sub_4053B0
.text:00406654                 call    _errno
.text:00406659                 mov     [eax], ebx
.text:0040665B
.text:0040665B loc_40665B:                             ; CODE XREF: sub_4064F0+F5↑j
.text:0040665B                 call    _errno
.text:00406660                 mov     ebp, [esp+2Ch+var_14]
.text:00406664                 mov     [eax], ebp
.text:00406666                 add     esp, 1Ch
.text:00406669                 mov     eax, edi
.text:0040666B                 pop     ebx
.text:0040666C                 pop     esi
.text:0040666D                 pop     edi
.text:0040666E                 pop     ebp
.text:0040666F                 retn
.text:00406670 ; ---------------------------------------------------------------------------
.text:00406670
.text:00406670 loc_406670:                             ; CODE XREF: sub_4064F0+135↑j
.text:00406670                 mov     esi, offset dword_40C190
.text:00406675                 jmp     short loc_406627
.text:00406677 ; ---------------------------------------------------------------------------
.text:00406677
.text:00406677 loc_406677:                             ; CODE XREF: sub_4064F0+B7↑j
.text:00406677                 mov     esi, offset dword_40C190
.text:0040667C                 jmp     loc_4065AD
.text:00406681 ; ---------------------------------------------------------------------------
.text:00406681
.text:00406681 loc_406681:                             ; CODE XREF: sub_4064F0+45↑j
.text:00406681                 mov     [esp+2Ch+Block], 8 ; size_t
.text:00406688                 call    sub_403490
.text:0040668D                 mov     off_40B04C, eax
.text:00406692                 mov     edi, dword_40B044
.text:00406698                 mov     ebx, eax
.text:0040669A                 mov     ecx, off_40B048
.text:004066A0                 mov     [eax], edi
.text:004066A2                 mov     [eax+4], ecx
.text:004066A5                 jmp     loc_40653B
.text:004066AA ; ---------------------------------------------------------------------------
.text:004066AA
.text:004066AA loc_4066AA:                             ; CODE XREF: sub_4064F0+18↑j
.text:004066AA                 call    abort
.text:004066AF ; ---------------------------------------------------------------------------
.text:004066AF
.text:004066AF loc_4066AF:                             ; CODE XREF: sub_4064F0+33↑j
.text:004066AF                 call    sub_4066E0
.text:004066AF sub_4064F0      endp
.text:004066AF
.text:004066AF ; ---------------------------------------------------------------------------
.text:004066B4                 align 10h
.text:004066C0 aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: sub_4066E0+3↓o
.text:004066D1 ; const char aS_0[]
.text:004066D1 aS_0            db '%s',0               ; DATA XREF: sub_4066E0+10↓o
.text:004066D4                 align 10h
.text:004066E0
.text:004066E0 ; =============== S U B R O U T I N E =======================================
.text:004066E0
.text:004066E0 ; Attributes: noreturn
.text:004066E0
.text:004066E0 sub_4066E0      proc near               ; CODE XREF: .text:loc_403489↑p
.text:004066E0                                         ; sub_403490+24↑p ...
.text:004066E0
.text:004066E0 Code            = dword ptr -1Ch
.text:004066E0 ErrorMessage    = dword ptr -18h
.text:004066E0 var_14          = dword ptr -14h
.text:004066E0 var_10          = byte ptr -10h
.text:004066E0
.text:004066E0                 sub     esp, 1Ch
.text:004066E3                 mov     [esp+1Ch+Code], offset aMemoryExhauste ; "memory exhausted"
.text:004066EA                 call    ds:libintl_gettext
.text:004066F0                 mov     [esp+1Ch+var_14], offset aS_0 ; "%s"
.text:004066F8                 mov     edx, Code
.text:004066FE                 mov     [esp+1Ch+ErrorMessage], 0 ; ErrorMessage
.text:00406706                 mov     dword ptr [esp+1Ch+var_10], eax ; char
.text:0040670A                 mov     [esp+1Ch+Code], edx ; Code
.text:0040670D                 call    sub_406970
.text:00406712                 call    abort
.text:00406712 sub_4066E0      endp
.text:00406712
.text:00406712 ; ---------------------------------------------------------------------------
.text:00406717                 align 10h
.text:00406720 ; const char aCpU[]
.text:00406720 aCpU            db 'CP%u',0             ; DATA XREF: sub_406850+13↓o
.text:00406725 aAscii_0        db 'ASCII',0            ; DATA XREF: sub_406850+40↓o
.text:0040672B                 align 20h
.text:00406740 aCp936          db 'CP936',0            ; DATA XREF: sub_406850:loc_4068EB↓o
.text:00406746 aGbk            db 'GBK',0
.text:0040674A aCp1361         db 'CP1361',0
.text:00406751 aJohab          db 'JOHAB',0
.text:00406757 aCp20127        db 'CP20127',0
.text:0040675F aAscii_1        db 'ASCII',0
.text:00406765 aCp20866        db 'CP20866',0
.text:0040676D aKoi8R          db 'KOI8-R',0
.text:00406774 aCp21866        db 'CP21866',0
.text:0040677C aKoi8Ru         db 'KOI8-RU',0
.text:00406784 aCp28591        db 'CP28591',0
.text:0040678C aIso88591       db 'ISO-8859-1',0
.text:00406797 aCp28592        db 'CP28592',0
.text:0040679F aIso88592       db 'ISO-8859-2',0
.text:004067AA aCp28593        db 'CP28593',0
.text:004067B2 aIso88593       db 'ISO-8859-3',0
.text:004067BD aCp28594        db 'CP28594',0
.text:004067C5 aIso88594       db 'ISO-8859-4',0
.text:004067D0 aCp28595        db 'CP28595',0
.text:004067D8 aIso88595       db 'ISO-8859-5',0
.text:004067E3 aCp28596        db 'CP28596',0
.text:004067EB aIso88596       db 'ISO-8859-6',0
.text:004067F6 aCp28597        db 'CP28597',0
.text:004067FE aIso88597       db 'ISO-8859-7',0
.text:00406809 aCp28598        db 'CP28598',0
.text:00406811 aIso88598       db 'ISO-8859-8',0
.text:0040681C aCp28599        db 'CP28599',0
.text:00406824 aIso88599       db 'ISO-8859-9',0
.text:0040682F aCp28605        db 'CP28605',0
.text:00406837 aIso885915      db 'ISO-8859-15',0
.text:00406843                 align 4
.text:00406844 dword_406844    dd 26748D00h, 27BC8D00h, 0
.text:00406844                                         ; DATA XREF: sub_406850:loc_4068F7↓o
.text:00406850
.text:00406850 ; =============== S U B R O U T I N E =======================================
.text:00406850
.text:00406850
.text:00406850 sub_406850      proc near               ; CODE XREF: sub_403760:loc_4038D5↑p
.text:00406850
.text:00406850 Buffer          = dword ptr -1Ch
.text:00406850 Format          = dword ptr -18h
.text:00406850 var_14          = dword ptr -14h
.text:00406850
.text:00406850                 push    esi
.text:00406851                 mov     esi, offset Str1
.text:00406856                 push    ebx
.text:00406857                 sub     esp, 14h
.text:0040685A                 call    GetACP
.text:0040685F                 mov     [esp+1Ch+var_14], eax
.text:00406863                 mov     [esp+1Ch+Format], offset aCpU ; "CP%u"
.text:0040686B                 mov     [esp+1Ch+Buffer], offset Str1 ; Buffer
.text:00406872                 call    sprintf
.text:00406877                 test    esi, esi
.text:00406879                 jz      short loc_4068F7
.text:0040687B
.text:0040687B loc_40687B:                             ; CODE XREF: sub_406850+AC↓j
.text:0040687B                 mov     eax, ds:Str2
.text:00406880                 test    eax, eax
.text:00406882                 jz      short loc_4068EB
.text:00406884
.text:00406884 loc_406884:                             ; CODE XREF: sub_406850+A5↓j
.text:00406884                 cmp     byte ptr [eax], 0
.text:00406887                 mov     ebx, eax
.text:00406889                 jnz     short loc_4068A0
.text:0040688B
.text:0040688B loc_40688B:                             ; CODE XREF: sub_406850+85↓j
.text:0040688B                                         ; sub_406850+99↓j
.text:0040688B                 cmp     byte ptr [esi], 0
.text:0040688E                 jnz     short loc_406895
.text:00406890                 mov     esi, offset aAscii_0 ; "ASCII"
.text:00406895
.text:00406895 loc_406895:                             ; CODE XREF: sub_406850+3E↑j
.text:00406895                 add     esp, 14h
.text:00406898                 mov     eax, esi
.text:0040689A                 pop     ebx
.text:0040689B                 pop     esi
.text:0040689C                 retn
.text:0040689C ; ---------------------------------------------------------------------------
.text:0040689D                 align 10h
.text:004068A0
.text:004068A0 loc_4068A0:                             ; CODE XREF: sub_406850+39↑j
.text:004068A0                                         ; sub_406850+83↓j
.text:004068A0                 mov     [esp+1Ch+Format], ebx ; Str2
.text:004068A4                 mov     [esp+1Ch+Buffer], esi ; Str1
.text:004068A7                 call    strcmp
.text:004068AC                 test    eax, eax
.text:004068AE                 jz      short loc_4068DD
.text:004068B0                 cmp     byte ptr [ebx], 2Ah ; '*'
.text:004068B3                 jz      short loc_4068D7
.text:004068B5
.text:004068B5 loc_4068B5:                             ; CODE XREF: sub_406850+8B↓j
.text:004068B5                 mov     [esp+1Ch+Buffer], ebx ; Str
.text:004068B8                 call    strlen
.text:004068BD                 lea     ebx, [eax+ebx+1]
.text:004068C1                 mov     [esp+1Ch+Buffer], ebx ; Str
.text:004068C4                 call    strlen
.text:004068C9                 lea     edx, [eax+ebx]
.text:004068CC                 lea     ebx, [edx+1]
.text:004068CF                 cmp     byte ptr [edx+1], 0
.text:004068D3                 jnz     short loc_4068A0
.text:004068D5                 jmp     short loc_40688B
.text:004068D7 ; ---------------------------------------------------------------------------
.text:004068D7
.text:004068D7 loc_4068D7:                             ; CODE XREF: sub_406850+63↑j
.text:004068D7                 cmp     byte ptr [ebx+1], 0
.text:004068DB                 jnz     short loc_4068B5
.text:004068DD
.text:004068DD loc_4068DD:                             ; CODE XREF: sub_406850+5E↑j
.text:004068DD                 mov     [esp+1Ch+Buffer], ebx ; Str
.text:004068E0                 call    strlen
.text:004068E5                 lea     esi, [eax+ebx+1]
.text:004068E9                 jmp     short loc_40688B
.text:004068EB ; ---------------------------------------------------------------------------
.text:004068EB
.text:004068EB loc_4068EB:                             ; CODE XREF: sub_406850+32↑j
.text:004068EB                 mov     eax, offset aCp936 ; "CP936"
.text:004068F0                 mov     ds:Str2, eax
.text:004068F5                 jmp     short loc_406884
.text:004068F7 ; ---------------------------------------------------------------------------
.text:004068F7
.text:004068F7 loc_4068F7:                             ; CODE XREF: sub_406850+29↑j
.text:004068F7                 mov     esi, offset dword_406844
.text:004068FC                 jmp     loc_40687B
.text:004068FC sub_406850      endp
.text:004068FC
.text:004068FC ; ---------------------------------------------------------------------------
.text:00406901                 align 20h
.text:00406920                 jmp     ds:libintl_bindtextdomain
.text:00406920 ; ---------------------------------------------------------------------------
.text:00406926                 align 10h
.text:00406930                 jmp     ds:libintl_textdomain
.text:00406930 ; ---------------------------------------------------------------------------
.text:00406936                 align 10h
.text:00406940                 jmp     ds:libintl_gettext
.text:00406940 ; ---------------------------------------------------------------------------
.text:00406946                 align 10h
.text:00406950 ; const char aS_1[]
.text:00406950 aS_1            db ': %s',0             ; DATA XREF: sub_406970+B8↓o
.text:00406950                                         ; sub_406A74+122↓o
.text:00406955 aUnknownSystemE db 'Unknown system error',0
.text:00406955                                         ; DATA XREF: sub_406970:loc_406A3D↓o
.text:00406955                                         ; sub_406A74:loc_406BAE↓o
.text:0040696A ; const char aS_2[]
.text:0040696A aS_2            db '%s: ',0             ; DATA XREF: sub_406970:loc_406A44↓o
.text:0040696F                 align 10h
.text:00406970
.text:00406970 ; =============== S U B R O U T I N E =======================================
.text:00406970
.text:00406970
.text:00406970 ; int __cdecl sub_406970(int Code, int ErrorMessage, char *, char)
.text:00406970 sub_406970      proc near               ; CODE XREF: sub_4013E0+10A↑p
.text:00406970                                         ; sub_4013E0+1B4↑p ...
.text:00406970
.text:00406970 Stream          = dword ptr -1Ch
.text:00406970 Format          = dword ptr -18h
.text:00406970 ArgList         = dword ptr -14h
.text:00406970 Code            = dword ptr  4
.text:00406970 ErrorMessage    = dword ptr  8
.text:00406970 arg_8           = dword ptr  0Ch
.text:00406970 arg_C           = byte ptr  10h
.text:00406970
.text:00406970                 push    esi
.text:00406971                 push    ebx
.text:00406972                 sub     esp, 14h
.text:00406975                 mov     edx, ds:_iob
.text:0040697B                 mov     esi, [esp+1Ch+Code]
.text:0040697F                 mov     ebx, [esp+1Ch+ErrorMessage]
.text:00406983                 add     edx, 20h ; ' '
.text:00406986                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00406989                 call    fflush
.text:0040698E                 mov     eax, ds:dword_40C230
.text:00406993                 test    eax, eax
.text:00406995                 jz      loc_406A44
.text:0040699B                 call    eax ; dword_40C230
.text:0040699D
.text:0040699D loc_40699D:                             ; CODE XREF: sub_406970+F7↓j
.text:0040699D                 lea     edx, [esp+1Ch+arg_C]
.text:004069A1                 mov     ecx, [esp+1Ch+arg_8]
.text:004069A5                 mov     [esp+1Ch+ArgList], edx ; ArgList
.text:004069A9                 mov     edx, ds:_iob
.text:004069AF                 mov     [esp+1Ch+Format], ecx ; Format
.text:004069B3                 add     edx, 40h ; '@'
.text:004069B6                 mov     [esp+1Ch+Stream], edx ; Stream
.text:004069B9                 call    vfprintf
.text:004069BE                 inc     ds:dword_40C240
.text:004069C4                 test    ebx, ebx
.text:004069C6                 jnz     short loc_406A12
.text:004069C8
.text:004069C8 loc_4069C8:                             ; CODE XREF: sub_406970+CB↓j
.text:004069C8                 mov     edx, ds:_iob
.text:004069CE                 lea     ecx, [edx+40h]
.text:004069D1                 mov     ebx, [ecx+4]
.text:004069D4                 dec     ebx
.text:004069D5                 test    ebx, ebx
.text:004069D7                 mov     [ecx+4], ebx
.text:004069DA                 js      short loc_406A00
.text:004069DC                 mov     ecx, [edx+40h]
.text:004069DF                 mov     byte ptr [ecx], 0Ah
.text:004069E2                 inc     dword ptr [edx+40h]
.text:004069E5
.text:004069E5 loc_4069E5:                             ; CODE XREF: sub_406970+A0↓j
.text:004069E5                 mov     edx, ds:_iob
.text:004069EB                 add     edx, 40h ; '@'
.text:004069EE                 mov     [esp+1Ch+Stream], edx ; Stream
.text:004069F1                 call    fflush
.text:004069F6                 test    esi, esi
.text:004069F8                 jnz     short loc_406A6C
.text:004069FA                 add     esp, 14h
.text:004069FD                 pop     ebx
.text:004069FE                 pop     esi
.text:004069FF                 retn
.text:00406A00 ; ---------------------------------------------------------------------------
.text:00406A00
.text:00406A00 loc_406A00:                             ; CODE XREF: sub_406970+6A↑j
.text:00406A00                 mov     [esp+1Ch+Format], ecx ; File
.text:00406A04                 mov     [esp+1Ch+Stream], 0Ah ; Ch
.text:00406A0B                 call    _flsbuf
.text:00406A10                 jmp     short loc_4069E5
.text:00406A12 ; ---------------------------------------------------------------------------
.text:00406A12
.text:00406A12 loc_406A12:                             ; CODE XREF: sub_406970+56↑j
.text:00406A12                 mov     [esp+1Ch+Stream], ebx ; ErrorMessage
.text:00406A15                 call    strerror
.text:00406A1A                 test    eax, eax
.text:00406A1C                 jz      short loc_406A3D
.text:00406A1E
.text:00406A1E loc_406A1E:                             ; CODE XREF: sub_406970+D2↓j
.text:00406A1E                 mov     [esp+1Ch+ArgList], eax
.text:00406A22                 mov     ebx, ds:_iob
.text:00406A28                 mov     [esp+1Ch+Format], offset aS_1 ; ": %s"
.text:00406A30                 add     ebx, 40h ; '@'
.text:00406A33                 mov     [esp+1Ch+Stream], ebx ; Stream
.text:00406A36                 call    fprintf
.text:00406A3B                 jmp     short loc_4069C8
.text:00406A3D ; ---------------------------------------------------------------------------
.text:00406A3D
.text:00406A3D loc_406A3D:                             ; CODE XREF: sub_406970+AC↑j
.text:00406A3D                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:00406A42                 jmp     short loc_406A1E
.text:00406A44 ; ---------------------------------------------------------------------------
.text:00406A44
.text:00406A44 loc_406A44:                             ; CODE XREF: sub_406970+25↑j
.text:00406A44                 mov     [esp+1Ch+Format], offset aS_2 ; "%s: "
.text:00406A4C                 mov     edx, ds:_iob
.text:00406A52                 mov     ecx, ds:dword_40C200
.text:00406A58                 add     edx, 40h ; '@'
.text:00406A5B                 mov     [esp+1Ch+ArgList], ecx
.text:00406A5F                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00406A62                 call    fprintf
.text:00406A67                 jmp     loc_40699D
.text:00406A6C ; ---------------------------------------------------------------------------
.text:00406A6C
.text:00406A6C loc_406A6C:                             ; CODE XREF: sub_406970+88↑j
.text:00406A6C                 mov     [esp+1Ch+Stream], esi ; Code
.text:00406A6F                 call    exit
.text:00406A6F sub_406970      endp
.text:00406A6F
.text:00406A74
.text:00406A74 ; =============== S U B R O U T I N E =======================================
.text:00406A74
.text:00406A74
.text:00406A74 ; int __cdecl sub_406A74(int, int Code, int ErrorMessage, char *Str2, int, char *, char)
.text:00406A74 sub_406A74      proc near               ; DATA XREF: sub_406A74+77↓o
.text:00406A74
.text:00406A74 Stream          = dword ptr -28h
.text:00406A74 Format          = dword ptr -24h
.text:00406A74 ArgList         = dword ptr -20h
.text:00406A74 var_1C          = dword ptr -1Ch
.text:00406A74 Code            = dword ptr  8
.text:00406A74 ErrorMessage    = dword ptr  0Ch
.text:00406A74 Str2            = dword ptr  10h
.text:00406A74 arg_10          = dword ptr  14h
.text:00406A74 arg_14          = dword ptr  18h
.text:00406A74 arg_18          = byte ptr  1Ch
.text:00406A74
.text:00406A74                 and     eax, 64253A73h
.text:00406A79                 cmp     ah, [eax]
.text:00406A7B
.text:00406A7B loc_406A7B:                             ; DATA XREF: sub_406A74:loc_406BB5↓o
.text:00406A7B                 add     ds:55003A73h, ah
.text:00406A81                 push    edi
.text:00406A82                 push    esi
.text:00406A83                 push    ebx
.text:00406A84                 sub     esp, 1Ch
.text:00406A87                 mov     edx, ds:dword_40C270
.text:00406A8D                 mov     ebp, [esp+28h+Code]
.text:00406A91                 mov     edi, [esp+28h+ErrorMessage]
.text:00406A95                 test    edx, edx
.text:00406A97                 mov     ebx, [esp+28h+Str2]
.text:00406A9B                 mov     esi, [esp+28h+arg_10]
.text:00406A9F                 jz      short loc_406AB9
.text:00406AA1                 cmp     ds:dword_40C1F0, esi
.text:00406AA7                 jz      loc_406BE0
.text:00406AAD
.text:00406AAD loc_406AAD:                             ; CODE XREF: sub_406A74+18D↓j
.text:00406AAD                 mov     ds:dword_40C1E0, ebx
.text:00406AB3                 mov     ds:dword_40C1F0, esi
.text:00406AB9
.text:00406AB9 loc_406AB9:                             ; CODE XREF: sub_406A74+2B↑j
.text:00406AB9                 mov     edx, ds:_iob
.text:00406ABF                 add     edx, 20h ; ' '
.text:00406AC2                 mov     [esp+28h+Stream], edx ; Stream
.text:00406AC5                 call    fflush
.text:00406ACA                 mov     eax, ds:dword_40C230
.text:00406ACF                 test    eax, eax
.text:00406AD1                 jz      loc_406BB5
.text:00406AD7                 call    eax ; dword_40C230
.text:00406AD9
.text:00406AD9 loc_406AD9:                             ; CODE XREF: sub_406A74+164↓j
.text:00406AD9                 test    ebx, ebx
.text:00406ADB                 jz      short loc_406AFE
.text:00406ADD                 mov     [esp+28h+ArgList], ebx
.text:00406AE1                 mov     ebx, ds:_iob
.text:00406AE7                 mov     [esp+28h+var_1C], esi
.text:00406AEB                 mov     [esp+28h+Format], offset sub_406A74 ; Format
.text:00406AF3                 add     ebx, 40h ; '@'
.text:00406AF6                 mov     [esp+28h+Stream], ebx ; Stream
.text:00406AF9                 call    fprintf
.text:00406AFE
.text:00406AFE loc_406AFE:                             ; CODE XREF: sub_406A74+67↑j
.text:00406AFE                 mov     esi, ds:_iob
.text:00406B04                 lea     edx, [esp+28h+arg_18]
.text:00406B08                 mov     ecx, [esp+28h+arg_14]
.text:00406B0C                 mov     [esp+28h+ArgList], edx ; ArgList
.text:00406B10                 add     esi, 40h ; '@'
.text:00406B13                 mov     [esp+28h+Format], ecx ; Format
.text:00406B17                 mov     [esp+28h+Stream], esi ; Stream
.text:00406B1A                 call    vfprintf
.text:00406B1F                 inc     ds:dword_40C240
.text:00406B25                 test    edi, edi
.text:00406B27                 jnz     short loc_406B80
.text:00406B29
.text:00406B29 loc_406B29:                             ; CODE XREF: sub_406A74+135↓j
.text:00406B29                 mov     edx, ds:_iob
.text:00406B2F                 lea     ecx, [edx+40h]
.text:00406B32                 mov     ebx, [ecx+4]
.text:00406B35                 dec     ebx
.text:00406B36                 test    ebx, ebx
.text:00406B38                 mov     [ecx+4], ebx
.text:00406B3B                 js      short loc_406B67
.text:00406B3D                 mov     esi, [edx+40h]
.text:00406B40                 mov     byte ptr [esi], 0Ah
.text:00406B43                 inc     dword ptr [edx+40h]
.text:00406B46
.text:00406B46 loc_406B46:                             ; CODE XREF: sub_406A74+103↓j
.text:00406B46                 mov     ecx, ds:_iob
.text:00406B4C                 add     ecx, 40h ; '@'
.text:00406B4F                 mov     [esp+28h+Stream], ecx ; Stream
.text:00406B52                 call    fflush
.text:00406B57                 test    ebp, ebp
.text:00406B59                 jnz     loc_406C06
.text:00406B5F
.text:00406B5F loc_406B5F:                             ; CODE XREF: sub_406A74+173↓j
.text:00406B5F                                         ; sub_406A74+187↓j
.text:00406B5F                 add     esp, 1Ch
.text:00406B62                 pop     ebx
.text:00406B63                 pop     esi
.text:00406B64                 pop     edi
.text:00406B65                 pop     ebp
.text:00406B66                 retn
.text:00406B67 ; ---------------------------------------------------------------------------
.text:00406B67
.text:00406B67 loc_406B67:                             ; CODE XREF: sub_406A74+C7↑j
.text:00406B67                 mov     [esp+28h+Format], ecx ; File
.text:00406B6B                 mov     [esp+28h+Stream], 0Ah ; Ch
.text:00406B72                 call    _flsbuf
.text:00406B77                 jmp     short loc_406B46
.text:00406B77 ; ---------------------------------------------------------------------------
.text:00406B79                 align 10h
.text:00406B80
.text:00406B80 loc_406B80:                             ; CODE XREF: sub_406A74+B3↑j
.text:00406B80                 mov     [esp+28h+Stream], edi ; ErrorMessage
.text:00406B83                 call    strerror
.text:00406B88                 test    eax, eax
.text:00406B8A                 jz      short loc_406BAE
.text:00406B8C
.text:00406B8C loc_406B8C:                             ; CODE XREF: sub_406A74+13F↓j
.text:00406B8C                 mov     [esp+28h+ArgList], eax
.text:00406B90                 mov     edi, ds:_iob
.text:00406B96                 mov     [esp+28h+Format], offset aS_1 ; ": %s"
.text:00406B9E                 add     edi, 40h ; '@'
.text:00406BA1                 mov     [esp+28h+Stream], edi ; Stream
.text:00406BA4                 call    fprintf
.text:00406BA9                 jmp     loc_406B29
.text:00406BAE ; ---------------------------------------------------------------------------
.text:00406BAE
.text:00406BAE loc_406BAE:                             ; CODE XREF: sub_406A74+116↑j
.text:00406BAE                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:00406BB3                 jmp     short loc_406B8C
.text:00406BB5 ; ---------------------------------------------------------------------------
.text:00406BB5
.text:00406BB5 loc_406BB5:                             ; CODE XREF: sub_406A74+5D↑j
.text:00406BB5                 mov     [esp+28h+Format], (offset loc_406A7B+1) ; Format
.text:00406BBD                 mov     ecx, ds:_iob
.text:00406BC3                 mov     edx, ds:dword_40C200
.text:00406BC9                 add     ecx, 40h ; '@'
.text:00406BCC                 mov     [esp+28h+ArgList], edx
.text:00406BD0                 mov     [esp+28h+Stream], ecx ; Stream
.text:00406BD3                 call    fprintf
.text:00406BD8                 jmp     loc_406AD9
.text:00406BD8 ; ---------------------------------------------------------------------------
.text:00406BDD                 align 10h
.text:00406BE0
.text:00406BE0 loc_406BE0:                             ; CODE XREF: sub_406A74+33↑j
.text:00406BE0                 mov     eax, ds:dword_40C1E0
.text:00406BE5                 cmp     ebx, eax
.text:00406BE7                 jz      loc_406B5F
.text:00406BED                 mov     [esp+28h+Format], ebx ; Str2
.text:00406BF1                 mov     [esp+28h+Stream], eax ; Str1
.text:00406BF4                 call    strcmp
.text:00406BF9                 test    eax, eax
.text:00406BFB                 jz      loc_406B5F
.text:00406C01                 jmp     loc_406AAD
.text:00406C06 ; ---------------------------------------------------------------------------
.text:00406C06
.text:00406C06 loc_406C06:                             ; CODE XREF: sub_406A74+E5↑j
.text:00406C06                 mov     [esp+28h+Stream], ebp ; Code
.text:00406C09                 call    exit
.text:00406C09 sub_406A74      endp ; sp-analysis failed
.text:00406C09
.text:00406C09 ; ---------------------------------------------------------------------------
.text:00406C0E                 align 10h
.text:00406C10
.text:00406C10 ; =============== S U B R O U T I N E =======================================
.text:00406C10
.text:00406C10
.text:00406C10 sub_406C10      proc near               ; CODE XREF: sub_402900+14F↑p
.text:00406C10                                         ; sub_402900+15F↑p
.text:00406C10
.text:00406C10 var_1C          = dword ptr -1Ch
.text:00406C10 var_18          = dword ptr -18h
.text:00406C10 var_14          = dword ptr -14h
.text:00406C10 arg_0           = dword ptr  4
.text:00406C10 arg_4           = dword ptr  8
.text:00406C10 arg_8           = dword ptr  0Ch
.text:00406C10
.text:00406C10                 push    edi
.text:00406C11                 push    esi
.text:00406C12                 push    ebx
.text:00406C13                 sub     esp, 10h
.text:00406C16                 mov     edi, [esp+1Ch+arg_8]
.text:00406C1A                 mov     esi, [esp+1Ch+arg_0]
.text:00406C1E                 mov     ebx, [esp+1Ch+arg_4]
.text:00406C22                 cmp     edi, 0Fh
.text:00406C25                 jbe     short loc_406C70
.text:00406C27                 mov     ecx, esi
.text:00406C29                 neg     ecx
.text:00406C2B                 and     ecx, 3
.text:00406C2E                 sub     edi, ecx
.text:00406C30                 mov     edx, ecx
.text:00406C32                 test    ecx, ecx
.text:00406C34                 jz      short loc_406C4A
.text:00406C36                 lea     esi, [esi+0]
.text:00406C39                 lea     edi, [edi+0]
.text:00406C40
.text:00406C40 loc_406C40:                             ; CODE XREF: sub_406C10+38↓j
.text:00406C40                 movzx   ecx, byte ptr [ebx]
.text:00406C43                 inc     ebx
.text:00406C44                 mov     [esi], cl
.text:00406C46                 inc     esi
.text:00406C47                 dec     edx
.text:00406C48                 jnz     short loc_406C40
.text:00406C4A
.text:00406C4A loc_406C4A:                             ; CODE XREF: sub_406C10+24↑j
.text:00406C4A                 test    bl, 3
.text:00406C4D                 jnz     short loc_406C93
.text:00406C4F                 mov     [esp+1Ch+var_18], ebx
.text:00406C53                 mov     edx, edi
.text:00406C55                 shr     edx, 2
.text:00406C58                 mov     [esp+1Ch+var_14], edx
.text:00406C5C                 mov     [esp+1Ch+var_1C], esi
.text:00406C5F                 call    sub_406CB0
.text:00406C64
.text:00406C64 loc_406C64:                             ; CODE XREF: sub_406C10+98↓j
.text:00406C64                 mov     edx, edi
.text:00406C66                 and     edx, 0FFFFFFFCh
.text:00406C69                 and     edi, 3
.text:00406C6C                 add     ebx, edx
.text:00406C6E                 add     esi, edx
.text:00406C70
.text:00406C70 loc_406C70:                             ; CODE XREF: sub_406C10+15↑j
.text:00406C70                 test    edi, edi
.text:00406C72                 mov     edx, edi
.text:00406C74                 jz      short loc_406C8A
.text:00406C76                 lea     esi, [esi+0]
.text:00406C79                 lea     edi, [edi+0]
.text:00406C80
.text:00406C80 loc_406C80:                             ; CODE XREF: sub_406C10+78↓j
.text:00406C80                 movzx   ecx, byte ptr [ebx]
.text:00406C83                 inc     ebx
.text:00406C84                 mov     [esi], cl
.text:00406C86                 inc     esi
.text:00406C87                 dec     edx
.text:00406C88                 jnz     short loc_406C80
.text:00406C8A
.text:00406C8A loc_406C8A:                             ; CODE XREF: sub_406C10+64↑j
.text:00406C8A                 add     esp, 10h
.text:00406C8D                 mov     eax, esi
.text:00406C8F                 pop     ebx
.text:00406C90                 pop     esi
.text:00406C91                 pop     edi
.text:00406C92                 retn
.text:00406C93 ; ---------------------------------------------------------------------------
.text:00406C93
.text:00406C93 loc_406C93:                             ; CODE XREF: sub_406C10+3D↑j
.text:00406C93                 mov     [esp+1Ch+var_18], ebx
.text:00406C97                 mov     ecx, edi
.text:00406C99                 shr     ecx, 2
.text:00406C9C                 mov     [esp+1Ch+var_14], ecx
.text:00406CA0                 mov     [esp+1Ch+var_1C], esi
.text:00406CA3                 call    sub_406DB0
.text:00406CA8                 jmp     short loc_406C64
.text:00406CA8 sub_406C10      endp
.text:00406CA8
.text:00406CA8 ; ---------------------------------------------------------------------------
.text:00406CAA                 align 10h
.text:00406CB0
.text:00406CB0 ; =============== S U B R O U T I N E =======================================
.text:00406CB0
.text:00406CB0
.text:00406CB0 sub_406CB0      proc near               ; CODE XREF: sub_406C10+4F↑p
.text:00406CB0
.text:00406CB0 var_8           = dword ptr -8
.text:00406CB0 var_4           = dword ptr -4
.text:00406CB0 arg_0           = dword ptr  4
.text:00406CB0 arg_4           = dword ptr  8
.text:00406CB0 arg_8           = dword ptr  0Ch
.text:00406CB0
.text:00406CB0                 sub     esp, 8
.text:00406CB3                 mov     ecx, [esp+8+arg_0]
.text:00406CB7                 mov     [esp+8+var_8], ebx
.text:00406CBA                 mov     ebx, [esp+8+arg_8]
.text:00406CBE                 mov     [esp+8+var_4], esi
.text:00406CC2                 mov     edx, [esp+8+arg_4]
.text:00406CC6                 mov     eax, ebx
.text:00406CC8                 and     eax, 7
.text:00406CCB                 cmp     eax, 7          ; switch 8 cases
.text:00406CCE                 ja      short def_406CD0 ; jumptable 00406CD0 default case
.text:00406CD0                 jmp     ds:jpt_406CD0[eax*4] ; switch jump
.text:00406CD0 ; ---------------------------------------------------------------------------
.text:00406CD7                 align 4
.text:00406CD8 jpt_406CD0      dd offset loc_406D5A    ; DATA XREF: sub_406CB0+20↑r
.text:00406CD8                 dd offset loc_406D61    ; jump table for switch statement
.text:00406CD8                 dd offset loc_406CF8
.text:00406CD8                 dd offset loc_406D69
.text:00406CD8                 dd offset loc_406D76
.text:00406CD8                 dd offset loc_406D83
.text:00406CD8                 dd offset loc_406D90
.text:00406CD8                 dd offset loc_406D9D
.text:00406CF8 ; ---------------------------------------------------------------------------
.text:00406CF8
.text:00406CF8 loc_406CF8:                             ; CODE XREF: sub_406CB0+20↑j
.text:00406CF8                                         ; DATA XREF: sub_406CB0:jpt_406CD0↑o
.text:00406CF8                 mov     eax, [edx]      ; jumptable 00406CD0 case 2
.text:00406CFA                 sub     ecx, 1Ch
.text:00406CFD                 add     ebx, 6
.text:00406D00                 sub     edx, 18h
.text:00406D03                 lea     esi, [esi+0]
.text:00406D09                 lea     edi, [edi+0]
.text:00406D10
.text:00406D10 loc_406D10:                             ; CODE XREF: sub_406CB0+A8↓j
.text:00406D10                 mov     esi, [edx+1Ch]
.text:00406D13                 add     edx, 20h ; ' '
.text:00406D16                 mov     [ecx+1Ch], eax
.text:00406D19                 add     ecx, 20h ; ' '
.text:00406D1C                 sub     ebx, 8
.text:00406D1F                 jnz     short def_406CD0 ; jumptable 00406CD0 default case
.text:00406D21                 mov     [ecx], esi
.text:00406D23                 mov     ebx, [esp+8+var_8]
.text:00406D26                 mov     esi, [esp+8+var_4]
.text:00406D2A                 add     esp, 8
.text:00406D2D                 retn
.text:00406D2D ; ---------------------------------------------------------------------------
.text:00406D2E                 align 10h
.text:00406D30
.text:00406D30 def_406CD0:                             ; CODE XREF: sub_406CB0+1E↑j
.text:00406D30                                         ; sub_406CB0+6F↑j ...
.text:00406D30                 mov     eax, [edx]      ; jumptable 00406CD0 default case
.text:00406D32                 mov     [ecx], esi
.text:00406D34
.text:00406D34 loc_406D34:                             ; CODE XREF: sub_406CB0+AF↓j
.text:00406D34                 mov     esi, [edx+4]
.text:00406D37                 mov     [ecx+4], eax
.text:00406D3A
.text:00406D3A loc_406D3A:                             ; CODE XREF: sub_406CB0+F6↓j
.text:00406D3A                 mov     eax, [edx+8]
.text:00406D3D                 mov     [ecx+8], esi
.text:00406D40
.text:00406D40 loc_406D40:                             ; CODE XREF: sub_406CB0+EB↓j
.text:00406D40                 mov     esi, [edx+0Ch]
.text:00406D43                 mov     [ecx+0Ch], eax
.text:00406D46
.text:00406D46 loc_406D46:                             ; CODE XREF: sub_406CB0+DE↓j
.text:00406D46                 mov     eax, [edx+10h]
.text:00406D49                 mov     [ecx+10h], esi
.text:00406D4C
.text:00406D4C loc_406D4C:                             ; CODE XREF: sub_406CB0+D1↓j
.text:00406D4C                 mov     esi, [edx+14h]
.text:00406D4F                 mov     [ecx+14h], eax
.text:00406D52
.text:00406D52 loc_406D52:                             ; CODE XREF: sub_406CB0+C4↓j
.text:00406D52                 mov     eax, [edx+18h]
.text:00406D55                 mov     [ecx+18h], esi
.text:00406D58                 jmp     short loc_406D10
.text:00406D5A ; ---------------------------------------------------------------------------
.text:00406D5A
.text:00406D5A loc_406D5A:                             ; CODE XREF: sub_406CB0+20↑j
.text:00406D5A                                         ; DATA XREF: sub_406CB0:jpt_406CD0↑o
.text:00406D5A                 mov     eax, [edx]      ; jumptable 00406CD0 case 0
.text:00406D5C                 sub     ecx, 4
.text:00406D5F                 jmp     short loc_406D34
.text:00406D61 ; ---------------------------------------------------------------------------
.text:00406D61
.text:00406D61 loc_406D61:                             ; CODE XREF: sub_406CB0+20↑j
.text:00406D61                                         ; DATA XREF: sub_406CB0:jpt_406CD0↑o
.text:00406D61                 mov     esi, [edx]      ; jumptable 00406CD0 case 1
.text:00406D63                 dec     ebx
.text:00406D64                 add     edx, 4
.text:00406D67                 jmp     short def_406CD0 ; jumptable 00406CD0 default case
.text:00406D69 ; ---------------------------------------------------------------------------
.text:00406D69
.text:00406D69 loc_406D69:                             ; CODE XREF: sub_406CB0+20↑j
.text:00406D69                                         ; DATA XREF: sub_406CB0:jpt_406CD0↑o
.text:00406D69                 mov     esi, [edx]      ; jumptable 00406CD0 case 3
.text:00406D6B                 sub     ecx, 18h
.text:00406D6E                 add     ebx, 5
.text:00406D71                 sub     edx, 14h
.text:00406D74                 jmp     short loc_406D52
.text:00406D76 ; ---------------------------------------------------------------------------
.text:00406D76
.text:00406D76 loc_406D76:                             ; CODE XREF: sub_406CB0+20↑j
.text:00406D76                                         ; DATA XREF: sub_406CB0:jpt_406CD0↑o
.text:00406D76                 mov     eax, [edx]      ; jumptable 00406CD0 case 4
.text:00406D78                 sub     ecx, 14h
.text:00406D7B                 add     ebx, 4
.text:00406D7E                 sub     edx, 10h
.text:00406D81                 jmp     short loc_406D4C
.text:00406D83 ; ---------------------------------------------------------------------------
.text:00406D83
.text:00406D83 loc_406D83:                             ; CODE XREF: sub_406CB0+20↑j
.text:00406D83                                         ; DATA XREF: sub_406CB0:jpt_406CD0↑o
.text:00406D83                 mov     esi, [edx]      ; jumptable 00406CD0 case 5
.text:00406D85                 sub     ecx, 10h
.text:00406D88                 add     ebx, 3
.text:00406D8B                 sub     edx, 0Ch
.text:00406D8E                 jmp     short loc_406D46
.text:00406D90 ; ---------------------------------------------------------------------------
.text:00406D90
.text:00406D90 loc_406D90:                             ; CODE XREF: sub_406CB0+20↑j
.text:00406D90                                         ; DATA XREF: sub_406CB0:jpt_406CD0↑o
.text:00406D90                 mov     eax, [edx]      ; jumptable 00406CD0 case 6
.text:00406D92                 sub     ecx, 0Ch
.text:00406D95                 add     ebx, 2
.text:00406D98                 sub     edx, 8
.text:00406D9B                 jmp     short loc_406D40
.text:00406D9D ; ---------------------------------------------------------------------------
.text:00406D9D
.text:00406D9D loc_406D9D:                             ; CODE XREF: sub_406CB0+20↑j
.text:00406D9D                                         ; DATA XREF: sub_406CB0:jpt_406CD0↑o
.text:00406D9D                 mov     esi, [edx]      ; jumptable 00406CD0 case 7
.text:00406D9F                 sub     ecx, 8
.text:00406DA2                 inc     ebx
.text:00406DA3                 sub     edx, 4
.text:00406DA6                 jmp     short loc_406D3A
.text:00406DA6 sub_406CB0      endp
.text:00406DA6
.text:00406DA6 ; ---------------------------------------------------------------------------
.text:00406DA8                 align 10h
.text:00406DB0
.text:00406DB0 ; =============== S U B R O U T I N E =======================================
.text:00406DB0
.text:00406DB0
.text:00406DB0 sub_406DB0      proc near               ; CODE XREF: sub_406C10+93↑p
.text:00406DB0
.text:00406DB0 var_1C          = dword ptr -1Ch
.text:00406DB0 var_18          = dword ptr -18h
.text:00406DB0 var_14          = dword ptr -14h
.text:00406DB0 arg_0           = dword ptr  4
.text:00406DB0 arg_4           = dword ptr  8
.text:00406DB0 arg_8           = dword ptr  0Ch
.text:00406DB0
.text:00406DB0                 push    ebp
.text:00406DB1                 push    edi
.text:00406DB2                 push    esi
.text:00406DB3                 push    ebx
.text:00406DB4                 sub     esp, 0Ch
.text:00406DB7                 mov     edx, [esp+1Ch+arg_4]
.text:00406DBB                 mov     [esp+1Ch+var_14], 20h ; ' '
.text:00406DC3                 mov     eax, [esp+1Ch+arg_8]
.text:00406DC7                 mov     esi, [esp+1Ch+arg_0]
.text:00406DCB                 mov     ecx, edx
.text:00406DCD                 and     ecx, 3
.text:00406DD0                 and     eax, 3
.text:00406DD3                 shl     ecx, 3
.text:00406DD6                 and     edx, 0FFFFFFFCh
.text:00406DD9                 sub     [esp+1Ch+var_14], ecx
.text:00406DDD                 cmp     eax, 1
.text:00406DE0                 mov     [esp+1Ch+var_18], ecx
.text:00406DE4                 jz      loc_406ED0
.text:00406DEA                 cmp     eax, 1
.text:00406DED                 jb      loc_406EC0
.text:00406DF3                 cmp     eax, 2
.text:00406DF6                 jz      loc_406EA4
.text:00406DFC                 cmp     eax, 3
.text:00406DFF                 jz      loc_406E93
.text:00406E05
.text:00406E05 loc_406E05:                             ; CODE XREF: sub_406DB0+C7↓j
.text:00406E05                                         ; sub_406DB0+12C↓j
.text:00406E05                 movzx   ecx, byte ptr [esp+1Ch+var_18]
.text:00406E0A                 mov     eax, edi
.text:00406E0C                 mov     ebx, [edx]
.text:00406E0E                 shr     ebp, cl
.text:00406E10                 movzx   ecx, byte ptr [esp+1Ch+var_14]
.text:00406E15                 shl     eax, cl
.text:00406E17                 or      ebp, eax
.text:00406E19                 mov     [esi], ebp
.text:00406E1B
.text:00406E1B loc_406E1B:                             ; CODE XREF: sub_406DB0+11B↓j
.text:00406E1B                 mov     ecx, [edx+4]
.text:00406E1E                 mov     ebp, ebx
.text:00406E20                 mov     [esp+1Ch+var_1C], ecx
.text:00406E23                 movzx   ecx, byte ptr [esp+1Ch+var_18]
.text:00406E28                 shr     edi, cl
.text:00406E2A                 movzx   ecx, byte ptr [esp+1Ch+var_14]
.text:00406E2F                 shl     ebp, cl
.text:00406E31                 or      edi, ebp
.text:00406E33                 mov     [esi+4], edi
.text:00406E36
.text:00406E36 loc_406E36:                             ; CODE XREF: sub_406DB0+F2↓j
.text:00406E36                 movzx   ecx, byte ptr [esp+1Ch+var_18]
.text:00406E3B                 mov     edi, [esp+1Ch+var_1C]
.text:00406E3E                 mov     ebp, [edx+8]
.text:00406E41                 shr     ebx, cl
.text:00406E43                 movzx   ecx, byte ptr [esp+1Ch+var_14]
.text:00406E48                 shl     edi, cl
.text:00406E4A                 or      ebx, edi
.text:00406E4C                 mov     [esi+8], ebx
.text:00406E4F
.text:00406E4F loc_406E4F:                             ; CODE XREF: sub_406DB0+107↓j
.text:00406E4F                 movzx   ecx, byte ptr [esp+1Ch+var_18]
.text:00406E54                 mov     ebx, ebp
.text:00406E56                 mov     edi, [edx+0Ch]
.text:00406E59                 add     edx, 10h
.text:00406E5C                 shr     [esp+1Ch+var_1C], cl
.text:00406E5F                 movzx   ecx, byte ptr [esp+1Ch+var_14]
.text:00406E64                 shl     ebx, cl
.text:00406E66                 or      [esp+1Ch+var_1C], ebx
.text:00406E69                 mov     ebx, [esp+1Ch+var_1C]
.text:00406E6C                 mov     [esi+0Ch], ebx
.text:00406E6F                 add     esi, 10h
.text:00406E72                 sub     [esp+1Ch+arg_8], 4
.text:00406E77                 jnz     short loc_406E05
.text:00406E79                 movzx   ecx, byte ptr [esp+1Ch+var_18]
.text:00406E7E                 shr     ebp, cl
.text:00406E80                 movzx   ecx, byte ptr [esp+1Ch+var_14]
.text:00406E85                 shl     edi, cl
.text:00406E87                 or      ebp, edi
.text:00406E89                 mov     [esi], ebp
.text:00406E8B                 add     esp, 0Ch
.text:00406E8E                 pop     ebx
.text:00406E8F                 pop     esi
.text:00406E90                 pop     edi
.text:00406E91                 pop     ebp
.text:00406E92                 retn
.text:00406E93 ; ---------------------------------------------------------------------------
.text:00406E93
.text:00406E93 loc_406E93:                             ; CODE XREF: sub_406DB0+4F↑j
.text:00406E93                 inc     [esp+1Ch+arg_8]
.text:00406E97                 sub     esi, 8
.text:00406E9A                 mov     eax, [edx+4]
.text:00406E9D                 mov     ebx, [edx]
.text:00406E9F                 mov     [esp+1Ch+var_1C], eax
.text:00406EA2                 jmp     short loc_406E36
.text:00406EA4 ; ---------------------------------------------------------------------------
.text:00406EA4
.text:00406EA4 loc_406EA4:                             ; CODE XREF: sub_406DB0+46↑j
.text:00406EA4                 add     [esp+1Ch+arg_8], 2
.text:00406EA9                 sub     esi, 0Ch
.text:00406EAC                 mov     ecx, [edx]
.text:00406EAE                 mov     ebp, [edx+4]
.text:00406EB1                 sub     edx, 4
.text:00406EB4                 mov     [esp+1Ch+var_1C], ecx
.text:00406EB7                 jmp     short loc_406E4F
.text:00406EB7 ; ---------------------------------------------------------------------------
.text:00406EB9                 align 10h
.text:00406EC0
.text:00406EC0 loc_406EC0:                             ; CODE XREF: sub_406DB0+3D↑j
.text:00406EC0                 mov     edi, [edx]
.text:00406EC2                 sub     esi, 4
.text:00406EC5                 mov     ebx, [edx+4]
.text:00406EC8                 add     edx, 4
.text:00406ECB                 jmp     loc_406E1B
.text:00406ED0 ; ---------------------------------------------------------------------------
.text:00406ED0
.text:00406ED0 loc_406ED0:                             ; CODE XREF: sub_406DB0+34↑j
.text:00406ED0                 dec     [esp+1Ch+arg_8]
.text:00406ED4                 mov     ebp, [edx]
.text:00406ED6                 mov     edi, [edx+4]
.text:00406ED9                 add     edx, 8
.text:00406EDC                 jmp     loc_406E05
.text:00406EDC sub_406DB0      endp
.text:00406EDC
.text:00406EE1 ; ---------------------------------------------------------------------------
.text:00406EE1                 jmp     short loc_406EF0
.text:00406EE1 ; ---------------------------------------------------------------------------
.text:00406EE3                 align 10h
.text:00406EF0
.text:00406EF0 loc_406EF0:                             ; CODE XREF: .text:00406EE1↑j
.text:00406EF0                 sub     esp, 8
.text:00406EF3                 mov     ecx, [esp+0Ch]
.text:00406EF7                 mov     [esp+4], esi
.text:00406EFB                 mov     esi, [esp+14h]
.text:00406EFF                 mov     [esp], ebx
.text:00406F02                 mov     edx, [esp+10h]
.text:00406F06                 mov     eax, esi
.text:00406F08                 and     eax, 7
.text:00406F0B                 cmp     eax, 7          ; switch 8 cases
.text:00406F0E                 ja      short def_406F10 ; jumptable 00406F10 default case
.text:00406F10                 jmp     ds:jpt_406F10[eax*4] ; switch jump
.text:00406F10 ; ---------------------------------------------------------------------------
.text:00406F17                 align 4
.text:00406F18 jpt_406F10      dd offset loc_406F9C    ; DATA XREF: .text:00406F10↑r
.text:00406F18                 dd offset loc_406FA7    ; jump table for switch statement
.text:00406F18                 dd offset loc_406F38
.text:00406F18                 dd offset loc_406FB3
.text:00406F18                 dd offset loc_406FC1
.text:00406F18                 dd offset loc_406FCF
.text:00406F18                 dd offset loc_406FDD
.text:00406F18                 dd offset loc_406FEB
.text:00406F38 ; ---------------------------------------------------------------------------
.text:00406F38
.text:00406F38 loc_406F38:                             ; CODE XREF: .text:00406F10↑j
.text:00406F38                                         ; DATA XREF: .text:jpt_406F10↑o
.text:00406F38                 sub     edx, 8          ; jumptable 00406F10 case 2
.text:00406F3B                 sub     ecx, 4
.text:00406F3E                 mov     eax, [edx+4]
.text:00406F41                 add     esi, 6
.text:00406F44                 lea     esi, [esi+0]
.text:00406F4A                 lea     edi, [edi+0]
.text:00406F50
.text:00406F50 loc_406F50:                             ; CODE XREF: .text:00406F9A↓j
.text:00406F50                 mov     ebx, [edx]
.text:00406F52                 sub     edx, 20h ; ' '
.text:00406F55                 mov     [ecx], eax
.text:00406F57                 sub     ecx, 20h ; ' '
.text:00406F5A                 sub     esi, 8
.text:00406F5D                 jnz     short def_406F10 ; jumptable 00406F10 default case
.text:00406F5F                 mov     [ecx+1Ch], ebx
.text:00406F62                 mov     ebx, [esp]
.text:00406F65                 mov     esi, [esp+4]
.text:00406F69                 add     esp, 8
.text:00406F6C                 retn
.text:00406F6C ; ---------------------------------------------------------------------------
.text:00406F6D                 align 10h
.text:00406F70
.text:00406F70 def_406F10:                             ; CODE XREF: .text:00406F0E↑j
.text:00406F70                                         ; .text:00406F5D↑j ...
.text:00406F70                 mov     eax, [edx+1Ch]  ; jumptable 00406F10 default case
.text:00406F73                 mov     [ecx+1Ch], ebx
.text:00406F76
.text:00406F76 loc_406F76:                             ; CODE XREF: .text:00406FA5↓j
.text:00406F76                 mov     ebx, [edx+18h]
.text:00406F79                 mov     [ecx+18h], eax
.text:00406F7C
.text:00406F7C loc_406F7C:                             ; CODE XREF: .text:00406FF5↓j
.text:00406F7C                 mov     eax, [edx+14h]
.text:00406F7F                 mov     [ecx+14h], ebx
.text:00406F82
.text:00406F82 loc_406F82:                             ; CODE XREF: .text:00406FE9↓j
.text:00406F82                 mov     ebx, [edx+10h]
.text:00406F85                 mov     [ecx+10h], eax
.text:00406F88
.text:00406F88 loc_406F88:                             ; CODE XREF: .text:00406FDB↓j
.text:00406F88                 mov     eax, [edx+0Ch]
.text:00406F8B                 mov     [ecx+0Ch], ebx
.text:00406F8E
.text:00406F8E loc_406F8E:                             ; CODE XREF: .text:00406FCD↓j
.text:00406F8E                 mov     ebx, [edx+8]
.text:00406F91                 mov     [ecx+8], eax
.text:00406F94
.text:00406F94 loc_406F94:                             ; CODE XREF: .text:00406FBF↓j
.text:00406F94                 mov     eax, [edx+4]
.text:00406F97                 mov     [ecx+4], ebx
.text:00406F9A                 jmp     short loc_406F50
.text:00406F9C ; ---------------------------------------------------------------------------
.text:00406F9C
.text:00406F9C loc_406F9C:                             ; CODE XREF: .text:00406F10↑j
.text:00406F9C                                         ; DATA XREF: .text:jpt_406F10↑o
.text:00406F9C                 sub     edx, 20h ; ' '  ; jumptable 00406F10 case 0
.text:00406F9F                 sub     ecx, 1Ch
.text:00406FA2                 mov     eax, [edx+1Ch]
.text:00406FA5                 jmp     short loc_406F76
.text:00406FA7 ; ---------------------------------------------------------------------------
.text:00406FA7
.text:00406FA7 loc_406FA7:                             ; CODE XREF: .text:00406F10↑j
.text:00406FA7                                         ; DATA XREF: .text:jpt_406F10↑o
.text:00406FA7                 sub     edx, 24h ; '$'  ; jumptable 00406F10 case 1
.text:00406FAA                 sub     ecx, 20h ; ' '
.text:00406FAD                 mov     ebx, [edx+20h]
.text:00406FB0                 dec     esi
.text:00406FB1                 jmp     short def_406F10 ; jumptable 00406F10 default case
.text:00406FB3 ; ---------------------------------------------------------------------------
.text:00406FB3
.text:00406FB3 loc_406FB3:                             ; CODE XREF: .text:00406F10↑j
.text:00406FB3                                         ; DATA XREF: .text:jpt_406F10↑o
.text:00406FB3                 sub     edx, 0Ch        ; jumptable 00406F10 case 3
.text:00406FB6                 sub     ecx, 8
.text:00406FB9                 mov     ebx, [edx+8]
.text:00406FBC                 add     esi, 5
.text:00406FBF                 jmp     short loc_406F94
.text:00406FC1 ; ---------------------------------------------------------------------------
.text:00406FC1
.text:00406FC1 loc_406FC1:                             ; CODE XREF: .text:00406F10↑j
.text:00406FC1                                         ; DATA XREF: .text:jpt_406F10↑o
.text:00406FC1                 sub     edx, 10h        ; jumptable 00406F10 case 4
.text:00406FC4                 sub     ecx, 0Ch
.text:00406FC7                 mov     eax, [edx+0Ch]
.text:00406FCA                 add     esi, 4
.text:00406FCD                 jmp     short loc_406F8E
.text:00406FCF ; ---------------------------------------------------------------------------
.text:00406FCF
.text:00406FCF loc_406FCF:                             ; CODE XREF: .text:00406F10↑j
.text:00406FCF                                         ; DATA XREF: .text:jpt_406F10↑o
.text:00406FCF                 sub     edx, 14h        ; jumptable 00406F10 case 5
.text:00406FD2                 sub     ecx, 10h
.text:00406FD5                 mov     ebx, [edx+10h]
.text:00406FD8                 add     esi, 3
.text:00406FDB                 jmp     short loc_406F88
.text:00406FDD ; ---------------------------------------------------------------------------
.text:00406FDD
.text:00406FDD loc_406FDD:                             ; CODE XREF: .text:00406F10↑j
.text:00406FDD                                         ; DATA XREF: .text:jpt_406F10↑o
.text:00406FDD                 sub     edx, 18h        ; jumptable 00406F10 case 6
.text:00406FE0                 sub     ecx, 14h
.text:00406FE3                 mov     eax, [edx+14h]
.text:00406FE6                 add     esi, 2
.text:00406FE9                 jmp     short loc_406F82
.text:00406FEB ; ---------------------------------------------------------------------------
.text:00406FEB
.text:00406FEB loc_406FEB:                             ; CODE XREF: .text:00406F10↑j
.text:00406FEB                                         ; DATA XREF: .text:jpt_406F10↑o
.text:00406FEB                 sub     edx, 1Ch        ; jumptable 00406F10 case 7
.text:00406FEE                 sub     ecx, 18h
.text:00406FF1                 mov     ebx, [edx+18h]
.text:00406FF4                 inc     esi
.text:00406FF5                 jmp     short loc_406F7C
.text:00406FF5 ; ---------------------------------------------------------------------------
.text:00406FF7                 align 10h
.text:00407000                 push    ebp
.text:00407001                 push    edi
.text:00407002                 push    esi
.text:00407003                 push    ebx
.text:00407004                 sub     esp, 8
.text:00407007                 mov     edx, [esp+20h]
.text:0040700B                 mov     dword ptr [esp+4], 20h ; ' '
.text:00407013                 mov     eax, [esp+24h]
.text:00407017                 mov     ecx, edx
.text:00407019                 and     ecx, 3
.text:0040701C                 and     eax, 3
.text:0040701F                 shl     ecx, 3
.text:00407022                 sub     [esp+4], ecx
.text:00407026                 and     edx, 0FFFFFFFCh
.text:00407029                 add     edx, 4
.text:0040702C                 mov     [esp], ecx
.text:0040702F                 cmp     eax, 1
.text:00407032                 jz      loc_407128
.text:00407038                 cmp     eax, 1
.text:0040703B                 jb      loc_407115
.text:00407041                 cmp     eax, 2
.text:00407044                 jz      loc_407100
.text:0040704A                 cmp     eax, 3
.text:0040704D                 jz      loc_4070EC
.text:00407053
.text:00407053 loc_407053:                             ; CODE XREF: .text:004070CC↓j
.text:00407053                                         ; .text:0040713A↓j
.text:00407053                 movzx   ecx, byte ptr [esp]
.text:00407057                 mov     eax, edi
.text:00407059                 mov     ebx, [esp+1Ch]
.text:0040705D                 mov     esi, [edx+0Ch]
.text:00407060                 shr     eax, cl
.text:00407062                 movzx   ecx, byte ptr [esp+4]
.text:00407067                 shl     ebp, cl
.text:00407069                 or      eax, ebp
.text:0040706B                 mov     [ebx+0Ch], eax
.text:0040706E
.text:0040706E loc_40706E:                             ; CODE XREF: .text:00407123↓j
.text:0040706E                 movzx   ecx, byte ptr [esp]
.text:00407072                 mov     ebp, esi
.text:00407074                 mov     ebx, [edx+8]
.text:00407077                 shr     ebp, cl
.text:00407079                 movzx   ecx, byte ptr [esp+4]
.text:0040707E                 shl     edi, cl
.text:00407080                 or      ebp, edi
.text:00407082                 mov     edi, [esp+1Ch]
.text:00407086                 mov     [edi+8], ebp
.text:00407089
.text:00407089 loc_407089:                             ; CODE XREF: .text:004070FE↓j
.text:00407089                 movzx   ecx, byte ptr [esp]
.text:0040708D                 mov     edi, ebx
.text:0040708F                 mov     ebp, [edx+4]
.text:00407092                 shr     edi, cl
.text:00407094                 movzx   ecx, byte ptr [esp+4]
.text:00407099                 shl     esi, cl
.text:0040709B                 or      edi, esi
.text:0040709D                 mov     esi, [esp+1Ch]
.text:004070A1                 mov     [esi+4], edi
.text:004070A4
.text:004070A4 loc_4070A4:                             ; CODE XREF: .text:00407113↓j
.text:004070A4                 movzx   ecx, byte ptr [esp]
.text:004070A8                 mov     esi, ebp
.text:004070AA                 mov     edi, [edx]
.text:004070AC                 sub     edx, 10h
.text:004070AF                 shr     esi, cl
.text:004070B1                 movzx   ecx, byte ptr [esp+4]
.text:004070B6                 shl     ebx, cl
.text:004070B8                 or      esi, ebx
.text:004070BA                 mov     ebx, [esp+1Ch]
.text:004070BE                 mov     [ebx], esi
.text:004070C0                 sub     ebx, 10h
.text:004070C3                 sub     dword ptr [esp+24h], 4
.text:004070C8                 mov     [esp+1Ch], ebx
.text:004070CC                 jnz     short loc_407053
.text:004070CE                 movzx   ecx, byte ptr [esp]
.text:004070D2                 mov     edx, [esp+1Ch]
.text:004070D6                 shr     edi, cl
.text:004070D8                 movzx   ecx, byte ptr [esp+4]
.text:004070DD                 shl     ebp, cl
.text:004070DF                 or      edi, ebp
.text:004070E1                 mov     [edx+0Ch], edi
.text:004070E4                 add     esp, 8
.text:004070E7                 pop     ebx
.text:004070E8                 pop     esi
.text:004070E9                 pop     edi
.text:004070EA                 pop     ebp
.text:004070EB                 retn
.text:004070EC ; ---------------------------------------------------------------------------
.text:004070EC
.text:004070EC loc_4070EC:                             ; CODE XREF: .text:0040704D↑j
.text:004070EC                 sub     dword ptr [esp+1Ch], 8
.text:004070F1                 sub     edx, 10h
.text:004070F4                 inc     dword ptr [esp+24h]
.text:004070F8                 mov     esi, [edx+0Ch]
.text:004070FB                 mov     ebx, [edx+8]
.text:004070FE                 jmp     short loc_407089
.text:00407100 ; ---------------------------------------------------------------------------
.text:00407100
.text:00407100 loc_407100:                             ; CODE XREF: .text:00407044↑j
.text:00407100                 sub     dword ptr [esp+1Ch], 4
.text:00407105                 sub     edx, 0Ch
.text:00407108                 add     dword ptr [esp+24h], 2
.text:0040710D                 mov     ebx, [edx+8]
.text:00407110                 mov     ebp, [edx+4]
.text:00407113                 jmp     short loc_4070A4
.text:00407115 ; ---------------------------------------------------------------------------
.text:00407115
.text:00407115 loc_407115:                             ; CODE XREF: .text:0040703B↑j
.text:00407115                 sub     dword ptr [esp+1Ch], 0Ch
.text:0040711A                 sub     edx, 14h
.text:0040711D                 mov     edi, [edx+10h]
.text:00407120                 mov     esi, [edx+0Ch]
.text:00407123                 jmp     loc_40706E
.text:00407128 ; ---------------------------------------------------------------------------
.text:00407128
.text:00407128 loc_407128:                             ; CODE XREF: .text:00407032↑j
.text:00407128                 sub     dword ptr [esp+1Ch], 10h
.text:0040712D                 sub     edx, 18h
.text:00407130                 dec     dword ptr [esp+24h]
.text:00407134                 mov     ebp, [edx+14h]
.text:00407137                 mov     edi, [edx+10h]
.text:0040713A                 jmp     loc_407053
.text:0040713A ; ---------------------------------------------------------------------------
.text:0040713F                 align 10h
.text:00407140                 jmp     ds:libiconv
.text:00407140 ; ---------------------------------------------------------------------------
.text:00407146                 align 10h
.text:00407150                 jmp     ds:libiconv_open
.text:00407150 ; ---------------------------------------------------------------------------
.text:00407156                 align 10h
.text:00407160
.text:00407160 ; =============== S U B R O U T I N E =======================================
.text:00407160
.text:00407160 ; Attributes: thunk
.text:00407160
.text:00407160 ; size_t __cdecl mbrtowc(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.text:00407160 mbrtowc         proc near               ; CODE XREF: sub_4053B0+757↑p
.text:00407160
.text:00407160 DstCh           = dword ptr  4
.text:00407160 SrcCh           = dword ptr  8
.text:00407160 SizeInBytes     = dword ptr  0Ch
.text:00407160 State           = dword ptr  10h
.text:00407160
.text:00407160                 jmp     ds:__imp_mbrtowc
.text:00407160 mbrtowc         endp
.text:00407160
.text:00407160 ; ---------------------------------------------------------------------------
.text:00407166                 align 10h
.text:00407170
.text:00407170 ; =============== S U B R O U T I N E =======================================
.text:00407170
.text:00407170 ; Attributes: bp-based frame
.text:00407170
.text:00407170 sub_407170      proc near               ; CODE XREF: sub_401080+C2↑p
.text:00407170                 push    ebp
.text:00407171                 mov     ecx, offset dword_40C000
.text:00407176                 cmp     ecx, offset dword_40C000
.text:0040717C                 mov     ebp, esp
.text:0040717E                 jnb     short loc_407196
.text:00407180
.text:00407180 loc_407180:                             ; CODE XREF: sub_407170+24↓j
.text:00407180                 mov     edx, [ecx+4]
.text:00407183                 mov     eax, [ecx]
.text:00407185                 add     ecx, 8
.text:00407188                 add     [edx+400000h], eax
.text:0040718E                 cmp     ecx, offset dword_40C000
.text:00407194                 jb      short loc_407180
.text:00407196
.text:00407196 loc_407196:                             ; CODE XREF: sub_407170+E↑j
.text:00407196                 pop     ebp
.text:00407197                 retn
.text:00407197 sub_407170      endp
.text:00407197
.text:00407197 ; ---------------------------------------------------------------------------
.text:00407198                 align 10h
.text:004071A0
.text:004071A0 ; =============== S U B R O U T I N E =======================================
.text:004071A0
.text:004071A0 ; Attributes: bp-based frame
.text:004071A0
.text:004071A0 sub_4071A0      proc near               ; CODE XREF: sub_401080+16↑p
.text:004071A0                                         ; TopLevelExceptionFilter+D7↑p
.text:004071A0                 push    ebp
.text:004071A1                 mov     ebp, esp
.text:004071A3                 fninit
.text:004071A5                 pop     ebp
.text:004071A6                 retn
.text:004071A6 sub_4071A0      endp
.text:004071A6
.text:004071A6 ; ---------------------------------------------------------------------------
.text:004071A7                 align 10h
.text:004071B0
.text:004071B0 ; =============== S U B R O U T I N E =======================================
.text:004071B0
.text:004071B0 ; Attributes: bp-based frame
.text:004071B0
.text:004071B0 ; void __cdecl sub_4071B0()
.text:004071B0 sub_4071B0      proc near               ; DATA XREF: .text:loc_4071F9↓o
.text:004071B0                                         ; sub_407240:loc_40726E↓o
.text:004071B0                 push    ebp
.text:004071B1                 mov     ebp, esp
.text:004071B3                 sub     esp, 8
.text:004071B6                 mov     eax, off_40B084
.text:004071BB                 mov     edx, [eax]
.text:004071BD                 test    edx, edx
.text:004071BF                 jnz     short loc_4071C5
.text:004071C1
.text:004071C1 loc_4071C1:                             ; CODE XREF: sub_4071B0+2C↓j
.text:004071C1                 mov     esp, ebp
.text:004071C3                 pop     ebp
.text:004071C4                 retn
.text:004071C5 ; ---------------------------------------------------------------------------
.text:004071C5
.text:004071C5 loc_4071C5:                             ; CODE XREF: sub_4071B0+F↑j
.text:004071C5                                         ; sub_4071B0+2A↓j
.text:004071C5                 call    dword ptr [eax]
.text:004071C7                 mov     edx, off_40B084
.text:004071CD                 mov     ecx, [edx+4]
.text:004071D0                 lea     eax, [edx+4]
.text:004071D3                 mov     off_40B084, eax
.text:004071D8                 test    ecx, ecx
.text:004071DA                 jnz     short loc_4071C5
.text:004071DC                 jmp     short loc_4071C1
.text:004071DC sub_4071B0      endp
.text:004071DC
.text:004071DC ; ---------------------------------------------------------------------------
.text:004071DE                 align 10h
.text:004071E0                 push    ebp
.text:004071E1                 mov     ebp, esp
.text:004071E3                 sub     esp, 8
.text:004071E6                 mov     [ebp-4], ebx
.text:004071E9                 mov     eax, ds:dword_40A0F0
.text:004071EE                 cmp     eax, 0FFFFFFFFh
.text:004071F1                 jz      short loc_40721C
.text:004071F3
.text:004071F3 loc_4071F3:                             ; CODE XREF: .text:00407226↓j
.text:004071F3                                         ; .text:00407239↓j
.text:004071F3                 test    eax, eax
.text:004071F5                 mov     ebx, eax
.text:004071F7                 jnz     short loc_407210
.text:004071F9
.text:004071F9 loc_4071F9:                             ; CODE XREF: .text:0040721A↓j
.text:004071F9                 mov     dword ptr [esp], offset sub_4071B0
.text:00407200                 call    sub_401040
.text:00407205                 mov     ebx, [ebp-4]
.text:00407208                 mov     esp, ebp
.text:0040720A                 pop     ebp
.text:0040720B                 retn
.text:0040720B ; ---------------------------------------------------------------------------
.text:0040720C                 align 10h
.text:00407210
.text:00407210 loc_407210:                             ; CODE XREF: .text:004071F7↑j
.text:00407210                                         ; .text:00407218↓j
.text:00407210                 call    ds:dword_40A0F0[ebx*4]
.text:00407217                 dec     ebx
.text:00407218                 jnz     short loc_407210
.text:0040721A                 jmp     short loc_4071F9
.text:0040721C ; ---------------------------------------------------------------------------
.text:0040721C
.text:0040721C loc_40721C:                             ; CODE XREF: .text:004071F1↑j
.text:0040721C                 mov     ecx, ds:dword_40A0F4
.text:00407222                 xor     eax, eax
.text:00407224                 test    ecx, ecx
.text:00407226                 jz      short loc_4071F3
.text:00407228                 mov     edx, offset dword_40A0F0
.text:0040722D                 lea     esi, [esi+0]
.text:00407230
.text:00407230 loc_407230:                             ; CODE XREF: .text:00407237↓j
.text:00407230                 inc     eax
.text:00407231                 mov     ecx, [edx+eax*4+4]
.text:00407235                 test    ecx, ecx
.text:00407237                 jnz     short loc_407230
.text:00407239                 jmp     short loc_4071F3
.text:00407239 ; ---------------------------------------------------------------------------
.text:0040723B                 align 10h
.text:00407240
.text:00407240 ; =============== S U B R O U T I N E =======================================
.text:00407240
.text:00407240 ; Attributes: bp-based frame
.text:00407240
.text:00407240 sub_407240      proc near               ; CODE XREF: sub_4013E0+16↑p
.text:00407240
.text:00407240 var_8           = dword ptr -8
.text:00407240 var_4           = dword ptr -4
.text:00407240
.text:00407240                 push    ebp
.text:00407241                 mov     ebp, esp
.text:00407243                 sub     esp, 8
.text:00407246                 mov     [ebp+var_4], ebx
.text:00407249                 mov     edx, dword_40B080
.text:0040724F                 test    edx, edx
.text:00407251                 jnz     short loc_40727A
.text:00407253                 mov     eax, ds:dword_40A0F0
.text:00407258                 mov     edx, 1
.text:0040725D                 mov     dword_40B080, edx
.text:00407263                 cmp     eax, 0FFFFFFFFh
.text:00407266                 jz      short loc_40728D
.text:00407268
.text:00407268 loc_407268:                             ; CODE XREF: sub_407240+57↓j
.text:00407268                                         ; sub_407240+69↓j
.text:00407268                 test    eax, eax
.text:0040726A                 mov     ebx, eax
.text:0040726C                 jnz     short loc_407281
.text:0040726E
.text:0040726E loc_40726E:                             ; CODE XREF: sub_407240+4B↓j
.text:0040726E                 mov     [esp+8+var_8], offset sub_4071B0 ; void (__cdecl *)()
.text:00407275                 call    sub_401040
.text:0040727A
.text:0040727A loc_40727A:                             ; CODE XREF: sub_407240+11↑j
.text:0040727A                 mov     ebx, [ebp+var_4]
.text:0040727D                 mov     esp, ebp
.text:0040727F                 pop     ebp
.text:00407280                 retn
.text:00407281 ; ---------------------------------------------------------------------------
.text:00407281
.text:00407281 loc_407281:                             ; CODE XREF: sub_407240+2C↑j
.text:00407281                                         ; sub_407240+49↓j
.text:00407281                 call    ds:dword_40A0F0[ebx*4]
.text:00407288                 dec     ebx
.text:00407289                 jnz     short loc_407281
.text:0040728B                 jmp     short loc_40726E
.text:0040728D ; ---------------------------------------------------------------------------
.text:0040728D
.text:0040728D loc_40728D:                             ; CODE XREF: sub_407240+26↑j
.text:0040728D                 mov     ecx, ds:dword_40A0F4
.text:00407293                 xor     eax, eax
.text:00407295                 test    ecx, ecx
.text:00407297                 jz      short loc_407268
.text:00407299                 mov     edx, offset dword_40A0F0
.text:0040729E                 mov     esi, esi
.text:004072A0
.text:004072A0 loc_4072A0:                             ; CODE XREF: sub_407240+67↓j
.text:004072A0                 inc     eax
.text:004072A1                 mov     ebx, [edx+eax*4+4]
.text:004072A5                 test    ebx, ebx
.text:004072A7                 jnz     short loc_4072A0
.text:004072A9                 jmp     short loc_407268
.text:004072A9 sub_407240      endp
.text:004072A9
.text:004072A9 ; ---------------------------------------------------------------------------
.text:004072AB                 align 10h
.text:004072B0
.text:004072B0 ; =============== S U B R O U T I N E =======================================
.text:004072B0
.text:004072B0 ; Attributes: info_from_lumina
.text:004072B0
.text:004072B0 ; void *__cdecl _alloca(size_t Size)
.text:004072B0 __alloca        proc near               ; CODE XREF: sub_4013E0+E↑p
.text:004072B0                                         ; ___asctoe64+5A↓p
.text:004072B0                 push    ecx
.text:004072B1                 mov     ecx, esp
.text:004072B3                 add     ecx, 8
.text:004072B6
.text:004072B6 loc_4072B6:                             ; CODE XREF: __alloca+1B↓j
.text:004072B6                 cmp     eax, 1000h
.text:004072BB                 jb      short loc_4072CD
.text:004072BD                 sub     ecx, 1000h
.text:004072C3                 or      dword ptr [ecx], 0
.text:004072C6                 sub     eax, 1000h
.text:004072CB                 jmp     short loc_4072B6
.text:004072CD ; ---------------------------------------------------------------------------
.text:004072CD
.text:004072CD loc_4072CD:                             ; CODE XREF: __alloca+B↑j
.text:004072CD                 sub     ecx, eax
.text:004072CF                 or      dword ptr [ecx], 0
.text:004072D2                 mov     eax, esp
.text:004072D4                 mov     esp, ecx
.text:004072D6                 mov     ecx, [eax]
.text:004072D8                 mov     eax, [eax+4]
.text:004072DB                 jmp     eax
.text:004072DB __alloca        endp
.text:004072DB
.text:004072DB ; ---------------------------------------------------------------------------
.text:004072DD                 align 10h
.text:004072E0
.text:004072E0 ; =============== S U B R O U T I N E =======================================
.text:004072E0
.text:004072E0 ; Attributes: info_from_lumina
.text:004072E0
.text:004072E0 ; unsigned __int64 __cdecl strtoull(const char *String, char **EndPtr, int Radix)
.text:004072E0 _strtoull       proc near               ; CODE XREF: sub_402900+6B9↑p
.text:004072E0
.text:004072E0 C               = dword ptr -3Ch
.text:004072E0 Type            = dword ptr -38h
.text:004072E0 var_34          = dword ptr -34h
.text:004072E0 var_30          = dword ptr -30h
.text:004072E0 var_2C          = dword ptr -2Ch
.text:004072E0 var_28          = dword ptr -28h
.text:004072E0 var_24          = dword ptr -24h
.text:004072E0 var_20          = dword ptr -20h
.text:004072E0 var_1C          = dword ptr -1Ch
.text:004072E0 var_18          = dword ptr -18h
.text:004072E0 String          = dword ptr  4
.text:004072E0 EndPtr          = dword ptr  8
.text:004072E0 Radix           = dword ptr  0Ch
.text:004072E0
.text:004072E0                 push    ebp
.text:004072E1                 push    edi
.text:004072E2                 push    esi
.text:004072E3                 push    ebx
.text:004072E4                 sub     esp, 2Ch
.text:004072E7                 mov     edx, [esp+3Ch+EndPtr]
.text:004072EB                 test    edx, edx
.text:004072ED                 jz      short loc_4072F9
.text:004072EF                 mov     eax, [esp+3Ch+String]
.text:004072F3                 mov     ecx, [esp+3Ch+EndPtr]
.text:004072F7                 mov     [ecx], eax
.text:004072F9
.text:004072F9 loc_4072F9:                             ; CODE XREF: _strtoull+D↑j
.text:004072F9                 mov     edx, [esp+3Ch+Radix]
.text:004072FD                 test    edx, edx
.text:004072FF                 js      short loc_40730F
.text:00407301                 cmp     [esp+3Ch+Radix], 1
.text:00407306                 jz      short loc_40730F
.text:00407308                 cmp     [esp+3Ch+Radix], 24h ; '$'
.text:0040730D                 jle     short loc_407326
.text:0040730F
.text:0040730F loc_40730F:                             ; CODE XREF: _strtoull+1F↑j
.text:0040730F                                         ; _strtoull+26↑j
.text:0040730F                 call    _errno
.text:00407314                 mov     dword ptr [eax], 21h ; '!'
.text:0040731A
.text:0040731A loc_40731A:                             ; CODE XREF: _strtoull+FF↓j
.text:0040731A                                         ; _strtoull+109↓j
.text:0040731A                 xor     eax, eax
.text:0040731C                 xor     edx, edx
.text:0040731E
.text:0040731E loc_40731E:                             ; CODE XREF: _strtoull+244↓j
.text:0040731E                                         ; _strtoull+251↓j ...
.text:0040731E                 add     esp, 2Ch
.text:00407321                 pop     ebx
.text:00407322                 pop     esi
.text:00407323                 pop     edi
.text:00407324                 pop     ebp
.text:00407325                 retn
.text:00407326 ; ---------------------------------------------------------------------------
.text:00407326
.text:00407326 loc_407326:                             ; CODE XREF: _strtoull+2D↑j
.text:00407326                 mov     ecx, ds:__mb_cur_max
.text:0040732C                 lea     esi, [esi+0]
.text:00407330
.text:00407330 loc_407330:                             ; CODE XREF: _strtoull+7E↓j
.text:00407330                 cmp     dword ptr [ecx], 1
.text:00407333                 mov     esi, [esp+3Ch+String]
.text:00407337                 movsx   edx, byte ptr [esi]
.text:0040733A                 jz      loc_407712
.text:00407340                 mov     [esp+3Ch+Type], 8 ; Type
.text:00407348                 mov     [esp+3Ch+C], edx ; C
.text:0040734B                 call    _isctype
.text:00407350                 mov     ecx, ds:__mb_cur_max
.text:00407356
.text:00407356 loc_407356:                             ; CODE XREF: _strtoull+445↓j
.text:00407356                 test    eax, eax
.text:00407358                 jz      short loc_407360
.text:0040735A                 inc     [esp+3Ch+String]
.text:0040735E                 jmp     short loc_407330
.text:00407360 ; ---------------------------------------------------------------------------
.text:00407360
.text:00407360 loc_407360:                             ; CODE XREF: _strtoull+78↑j
.text:00407360                 mov     esi, [esp+3Ch+String]
.text:00407364                 xor     ebx, ebx
.text:00407366                 movzx   edx, byte ptr [esi]
.text:00407369                 cmp     dl, 2Dh ; '-'
.text:0040736C                 setz    bl
.text:0040736F                 test    ebx, ebx
.text:00407371                 mov     [esp+3Ch+var_20], ebx
.text:00407375                 jnz     loc_407702
.text:0040737B                 cmp     dl, 2Bh ; '+'
.text:0040737E                 jz      loc_407702
.text:00407384
.text:00407384 loc_407384:                             ; CODE XREF: _strtoull+42D↓j
.text:00407384                 mov     ebp, [esp+3Ch+Radix]
.text:00407388                 test    ebp, ebp
.text:0040738A                 jnz     short loc_40739D
.text:0040738C                 cmp     dl, 30h ; '0'
.text:0040738F                 jz      loc_4076D9
.text:00407395                 mov     [esp+3Ch+Radix], 0Ah
.text:0040739D
.text:0040739D loc_40739D:                             ; CODE XREF: _strtoull+AA↑j
.text:0040739D                                         ; _strtoull+40F↓j ...
.text:0040739D                 cmp     [esp+3Ch+Radix], 10h
.text:004073A2                 jz      loc_4076AB
.text:004073A8
.text:004073A8 loc_4073A8:                             ; CODE XREF: _strtoull+3CE↓j
.text:004073A8                                         ; _strtoull+3E2↓j ...
.text:004073A8                 cmp     dword ptr [ecx], 1
.text:004073AB                 movsx   ebx, dl
.text:004073AE                 jz      loc_407693
.text:004073B4                 mov     [esp+3Ch+Type], 4 ; Type
.text:004073BC                 mov     [esp+3Ch+C], ebx ; C
.text:004073BF                 call    _isctype
.text:004073C4                 mov     esi, [esp+3Ch+String]
.text:004073C8                 movzx   edx, byte ptr [esi]
.text:004073CB
.text:004073CB loc_4073CB:                             ; CODE XREF: _strtoull+3C6↓j
.text:004073CB                 test    eax, eax
.text:004073CD                 jz      loc_4075FC
.text:004073D3                 movsx   eax, dl
.text:004073D6                 sub     eax, 30h ; '0'
.text:004073D9
.text:004073D9 loc_4073D9:                             ; CODE XREF: _strtoull+34B↓j
.text:004073D9                                         ; _strtoull+37C↓j ...
.text:004073D9                 inc     [esp+3Ch+String]
.text:004073DD                 test    eax, eax
.text:004073DF                 js      loc_40731A
.text:004073E5                 cmp     eax, [esp+3Ch+Radix]
.text:004073E9                 jge     loc_40731A
.text:004073EF                 mov     [esp+3Ch+var_1C], eax
.text:004073F3                 mov     edx, eax
.text:004073F5                 sar     edx, 1Fh
.text:004073F8                 mov     [esp+3Ch+var_18], edx
.text:004073FC                 mov     [esp+3Ch+var_24], 0
.text:00407404                 lea     esi, [esi+0]
.text:0040740A                 lea     edi, [edi+0]
.text:00407410
.text:00407410 loc_407410:                             ; CODE XREF: _strtoull+20C↓j
.text:00407410                 mov     ebp, [esp+3Ch+String]
.text:00407414                 mov     ebx, ds:__mb_cur_max
.text:0040741A                 movzx   edx, byte ptr [ebp+0]
.text:0040741E                 cmp     dword ptr [ebx], 1
.text:00407421                 movsx   ecx, dl
.text:00407424                 jz      loc_4075E5
.text:0040742A                 mov     [esp+3Ch+C], ecx ; C
.text:0040742D                 mov     [esp+3Ch+Type], 4 ; Type
.text:00407435                 call    _isctype
.text:0040743A                 mov     ecx, [esp+3Ch+String]
.text:0040743E                 movzx   edx, byte ptr [ecx]
.text:00407441
.text:00407441 loc_407441:                             ; CODE XREF: _strtoull+317↓j
.text:00407441                 test    eax, eax
.text:00407443                 jz      loc_407550
.text:00407449                 movsx   edi, dl
.text:0040744C                 lea     ebp, [edi-30h]
.text:0040744F
.text:0040744F loc_40744F:                             ; CODE XREF: _strtoull+2A3↓j
.text:0040744F                 test    ebp, ebp
.text:00407451                 js      loc_4074FB
.text:00407457                 cmp     ebp, [esp+3Ch+Radix]
.text:0040745B                 jge     loc_4074FB
.text:00407461                 mov     [esp+3Ch+C], 0FFFFFFFFh
.text:00407468                 mov     eax, [esp+3Ch+Radix]
.text:0040746C                 mov     [esp+3Ch+Type], 0FFFFFFFFh
.text:00407474                 cdq
.text:00407475                 mov     esi, eax
.text:00407477                 mov     [esp+3Ch+var_34], eax
.text:0040747B                 mov     edi, edx
.text:0040747D                 mov     [esp+3Ch+var_30], edx
.text:00407481                 call    sub_409E70
.text:00407486                 add     eax, 1
.text:00407489                 adc     edx, 0
.text:0040748C                 cmp     [esp+3Ch+var_18], edx
.text:00407490                 ja      short loc_4074E0
.text:00407492                 jb      short loc_40749A
.text:00407494                 cmp     [esp+3Ch+var_1C], eax
.text:00407498                 ja      short loc_4074E0
.text:0040749A
.text:0040749A loc_40749A:                             ; CODE XREF: _strtoull+1B2↑j
.text:0040749A                 mov     eax, [esp+3Ch+var_1C]
.text:0040749E                 mov     ebx, ebp
.text:004074A0                 mul     esi
.text:004074A2                 mov     ecx, edx
.text:004074A4                 mov     [esp+3Ch+var_2C], eax
.text:004074A8                 mov     eax, [esp+3Ch+var_18]
.text:004074AC                 mov     [esp+3Ch+var_28], edx
.text:004074B0                 imul    eax, esi
.text:004074B3                 mov     esi, [esp+3Ch+var_1C]
.text:004074B7                 imul    esi, edi
.text:004074BA                 add     ecx, eax
.text:004074BC                 lea     edi, [esi+ecx]
.text:004074BF                 mov     esi, ebp
.text:004074C1                 sar     esi, 1Fh
.text:004074C4                 add     ebx, [esp+3Ch+var_2C]
.text:004074C8                 mov     [esp+3Ch+var_28], edi
.text:004074CC                 adc     esi, [esp+3Ch+var_28]
.text:004074D0                 cmp     esi, [esp+3Ch+var_18]
.text:004074D4                 jb      short loc_4074E0
.text:004074D6                 ja      short loc_4074F1
.text:004074D8                 cmp     ebx, [esp+3Ch+var_1C]
.text:004074DC                 jnb     short loc_4074F1
.text:004074DE                 mov     esi, esi
.text:004074E0
.text:004074E0 loc_4074E0:                             ; CODE XREF: _strtoull+1B0↑j
.text:004074E0                                         ; _strtoull+1B8↑j ...
.text:004074E0                 mov     [esp+3Ch+var_24], 1
.text:004074E8
.text:004074E8 loc_4074E8:                             ; CODE XREF: _strtoull+219↓j
.text:004074E8                 inc     [esp+3Ch+String]
.text:004074EC                 jmp     loc_407410
.text:004074F1 ; ---------------------------------------------------------------------------
.text:004074F1
.text:004074F1 loc_4074F1:                             ; CODE XREF: _strtoull+1F6↑j
.text:004074F1                                         ; _strtoull+1FC↑j
.text:004074F1                 mov     [esp+3Ch+var_1C], ebx
.text:004074F5                 mov     [esp+3Ch+var_18], esi
.text:004074F9                 jmp     short loc_4074E8
.text:004074FB ; ---------------------------------------------------------------------------
.text:004074FB
.text:004074FB loc_4074FB:                             ; CODE XREF: _strtoull+171↑j
.text:004074FB                                         ; _strtoull+17B↑j
.text:004074FB                 mov     eax, [esp+3Ch+EndPtr]
.text:004074FF                 test    eax, eax
.text:00407501                 jz      short loc_40750E
.text:00407503                 mov     ecx, [esp+3Ch+String]
.text:00407507                 mov     ebp, [esp+3Ch+EndPtr]
.text:0040750B                 mov     [ebp+0], ecx
.text:0040750E
.text:0040750E loc_40750E:                             ; CODE XREF: _strtoull+221↑j
.text:0040750E                 mov     esi, [esp+3Ch+var_24]
.text:00407512                 test    esi, esi
.text:00407514                 jnz     short loc_407536
.text:00407516                 mov     ebx, [esp+3Ch+var_20]
.text:0040751A                 mov     eax, [esp+3Ch+var_1C]
.text:0040751E                 mov     edx, [esp+3Ch+var_18]
.text:00407522                 test    ebx, ebx
.text:00407524                 jz      loc_40731E
.text:0040752A                 neg     eax
.text:0040752C                 adc     edx, 0
.text:0040752F                 neg     edx
.text:00407531                 jmp     loc_40731E
.text:00407536 ; ---------------------------------------------------------------------------
.text:00407536
.text:00407536 loc_407536:                             ; CODE XREF: _strtoull+234↑j
.text:00407536                 call    _errno
.text:0040753B                 mov     edx, 0FFFFFFFFh
.text:00407540                 mov     dword ptr [eax], 22h ; '"'
.text:00407546                 mov     eax, 0FFFFFFFFh
.text:0040754B                 jmp     loc_40731E
.text:00407550 ; ---------------------------------------------------------------------------
.text:00407550
.text:00407550 loc_407550:                             ; CODE XREF: _strtoull+163↑j
.text:00407550                 mov     ebp, ds:__mb_cur_max
.text:00407556                 movsx   ecx, dl
.text:00407559                 cmp     dword ptr [ebp+0], 1
.text:0040755D                 jz      short loc_4075D1
.text:0040755F                 mov     [esp+3Ch+Type], 1 ; Type
.text:00407567                 mov     [esp+3Ch+C], ecx ; C
.text:0040756A                 call    _isctype
.text:0040756F                 mov     ebp, [esp+3Ch+String]
.text:00407573                 movzx   edx, byte ptr [ebp+0]
.text:00407577
.text:00407577 loc_407577:                             ; CODE XREF: _strtoull+303↓j
.text:00407577                 test    eax, eax
.text:00407579                 jz      short loc_407588
.text:0040757B                 movsx   eax, dl
.text:0040757E                 sub     eax, 37h ; '7'
.text:00407581
.text:00407581 loc_407581:                             ; CODE XREF: _strtoull+2D4↓j
.text:00407581                                         ; _strtoull+2DB↓j
.text:00407581                 mov     ebp, eax
.text:00407583                 jmp     loc_40744F
.text:00407588 ; ---------------------------------------------------------------------------
.text:00407588
.text:00407588 loc_407588:                             ; CODE XREF: _strtoull+299↑j
.text:00407588                 mov     ecx, ds:__mb_cur_max
.text:0040758E                 movsx   edx, dl
.text:00407591                 cmp     dword ptr [ecx], 1
.text:00407594                 jz      short loc_4075BD
.text:00407596                 mov     [esp+3Ch+Type], 2 ; Type
.text:0040759E                 mov     [esp+3Ch+C], edx ; C
.text:004075A1                 call    _isctype
.text:004075A6
.text:004075A6 loc_4075A6:                             ; CODE XREF: _strtoull+2EF↓j
.text:004075A6                 test    eax, eax
.text:004075A8                 jz      short loc_4075B6
.text:004075AA                 mov     edx, [esp+3Ch+String]
.text:004075AE                 movsx   eax, byte ptr [edx]
.text:004075B1                 sub     eax, 57h ; 'W'
.text:004075B4                 jmp     short loc_407581
.text:004075B6 ; ---------------------------------------------------------------------------
.text:004075B6
.text:004075B6 loc_4075B6:                             ; CODE XREF: _strtoull+2C8↑j
.text:004075B6                 mov     eax, 0FFFFFFFFh
.text:004075BB                 jmp     short loc_407581
.text:004075BD ; ---------------------------------------------------------------------------
.text:004075BD
.text:004075BD loc_4075BD:                             ; CODE XREF: _strtoull+2B4↑j
.text:004075BD                 mov     edi, ds:_pctype
.text:004075C3                 mov     ebx, [edi]
.text:004075C5                 movzx   esi, word ptr [ebx+edx*2]
.text:004075C9                 and     esi, 2
.text:004075CC                 movzx   eax, si
.text:004075CF                 jmp     short loc_4075A6
.text:004075D1 ; ---------------------------------------------------------------------------
.text:004075D1
.text:004075D1 loc_4075D1:                             ; CODE XREF: _strtoull+27D↑j
.text:004075D1                 mov     edi, ds:_pctype
.text:004075D7                 mov     ebx, [edi]
.text:004075D9                 movzx   esi, word ptr [ebx+ecx*2]
.text:004075DD                 and     esi, 1
.text:004075E0                 movzx   eax, si
.text:004075E3                 jmp     short loc_407577
.text:004075E5 ; ---------------------------------------------------------------------------
.text:004075E5
.text:004075E5 loc_4075E5:                             ; CODE XREF: _strtoull+144↑j
.text:004075E5                 mov     ebx, ds:_pctype
.text:004075EB                 mov     esi, [ebx]
.text:004075ED                 movzx   edi, word ptr [esi+ecx*2]
.text:004075F1                 and     edi, 4
.text:004075F4                 movzx   eax, di
.text:004075F7                 jmp     loc_407441
.text:004075FC ; ---------------------------------------------------------------------------
.text:004075FC
.text:004075FC loc_4075FC:                             ; CODE XREF: _strtoull+ED↑j
.text:004075FC                 mov     ebx, ds:__mb_cur_max
.text:00407602                 movsx   ecx, dl
.text:00407605                 cmp     dword ptr [ebx], 1
.text:00407608                 jz      short loc_40767F
.text:0040760A                 mov     [esp+3Ch+C], ecx ; C
.text:0040760D                 mov     [esp+3Ch+Type], 1 ; Type
.text:00407615                 call    _isctype
.text:0040761A                 mov     ecx, [esp+3Ch+String]
.text:0040761E                 movzx   edx, byte ptr [ecx]
.text:00407621
.text:00407621 loc_407621:                             ; CODE XREF: _strtoull+3B1↓j
.text:00407621                 test    eax, eax
.text:00407623                 jz      short loc_407630
.text:00407625                 movsx   eax, dl
.text:00407628                 sub     eax, 37h ; '7'
.text:0040762B                 jmp     loc_4073D9
.text:00407630 ; ---------------------------------------------------------------------------
.text:00407630
.text:00407630 loc_407630:                             ; CODE XREF: _strtoull+343↑j
.text:00407630                 mov     ebx, ds:__mb_cur_max
.text:00407636                 movsx   edx, dl
.text:00407639                 cmp     dword ptr [ebx], 1
.text:0040763C                 jz      short loc_40766B
.text:0040763E                 mov     [esp+3Ch+Type], 2 ; Type
.text:00407646                 mov     [esp+3Ch+C], edx ; C
.text:00407649                 call    _isctype
.text:0040764E
.text:0040764E loc_40764E:                             ; CODE XREF: _strtoull+39D↓j
.text:0040764E                 test    eax, eax
.text:00407650                 jz      short loc_407661
.text:00407652                 mov     ecx, [esp+3Ch+String]
.text:00407656                 movsx   eax, byte ptr [ecx]
.text:00407659                 sub     eax, 57h ; 'W'
.text:0040765C                 jmp     loc_4073D9
.text:00407661 ; ---------------------------------------------------------------------------
.text:00407661
.text:00407661 loc_407661:                             ; CODE XREF: _strtoull+370↑j
.text:00407661                 mov     eax, 0FFFFFFFFh
.text:00407666                 jmp     loc_4073D9
.text:0040766B ; ---------------------------------------------------------------------------
.text:0040766B
.text:0040766B loc_40766B:                             ; CODE XREF: _strtoull+35C↑j
.text:0040766B                 mov     esi, ds:_pctype
.text:00407671                 mov     edi, [esi]
.text:00407673                 movzx   ebp, word ptr [edi+edx*2]
.text:00407677                 and     ebp, 2
.text:0040767A                 movzx   eax, bp
.text:0040767D                 jmp     short loc_40764E
.text:0040767F ; ---------------------------------------------------------------------------
.text:0040767F
.text:0040767F loc_40767F:                             ; CODE XREF: _strtoull+328↑j
.text:0040767F                 mov     esi, ds:_pctype
.text:00407685                 mov     edi, [esi]
.text:00407687                 movzx   ebp, word ptr [edi+ecx*2]
.text:0040768B                 and     ebp, 1
.text:0040768E                 movzx   eax, bp
.text:00407691                 jmp     short loc_407621
.text:00407693 ; ---------------------------------------------------------------------------
.text:00407693
.text:00407693 loc_407693:                             ; CODE XREF: _strtoull+CE↑j
.text:00407693                 mov     edi, ds:_pctype
.text:00407699                 mov     ebp, [edi]
.text:0040769B                 movzx   ecx, word ptr [ebp+ebx*2+0]
.text:004076A0                 and     ecx, 4
.text:004076A3                 movzx   eax, cx
.text:004076A6                 jmp     loc_4073CB
.text:004076AB ; ---------------------------------------------------------------------------
.text:004076AB
.text:004076AB loc_4076AB:                             ; CODE XREF: _strtoull+C2↑j
.text:004076AB                 cmp     dl, 30h ; '0'
.text:004076AE                 jnz     loc_4073A8
.text:004076B4                 mov     esi, [esp+3Ch+String]
.text:004076B8                 movzx   eax, byte ptr [esi+1]
.text:004076BC                 cmp     al, 58h ; 'X'
.text:004076BE                 jz      short loc_4076C8
.text:004076C0                 cmp     al, 78h ; 'x'
.text:004076C2                 jnz     loc_4073A8
.text:004076C8
.text:004076C8 loc_4076C8:                             ; CODE XREF: _strtoull+3DE↑j
.text:004076C8                 add     [esp+3Ch+String], 2
.text:004076CD                 mov     ebx, [esp+3Ch+String]
.text:004076D1                 movzx   edx, byte ptr [ebx]
.text:004076D4                 jmp     loc_4073A8
.text:004076D9 ; ---------------------------------------------------------------------------
.text:004076D9
.text:004076D9 loc_4076D9:                             ; CODE XREF: _strtoull+AF↑j
.text:004076D9                 mov     edi, [esp+3Ch+String]
.text:004076DD                 movzx   eax, byte ptr [edi+1]
.text:004076E1                 cmp     al, 58h ; 'X'
.text:004076E3                 jz      short loc_4076F5
.text:004076E5                 mov     [esp+3Ch+Radix], 8
.text:004076ED                 cmp     al, 78h ; 'x'
.text:004076EF                 jnz     loc_40739D
.text:004076F5
.text:004076F5 loc_4076F5:                             ; CODE XREF: _strtoull+403↑j
.text:004076F5                 mov     [esp+3Ch+Radix], 10h
.text:004076FD                 jmp     loc_40739D
.text:00407702 ; ---------------------------------------------------------------------------
.text:00407702
.text:00407702 loc_407702:                             ; CODE XREF: _strtoull+95↑j
.text:00407702                                         ; _strtoull+9E↑j
.text:00407702                 inc     [esp+3Ch+String]
.text:00407706                 mov     eax, [esp+3Ch+String]
.text:0040770A                 movzx   edx, byte ptr [eax]
.text:0040770D                 jmp     loc_407384
.text:00407712 ; ---------------------------------------------------------------------------
.text:00407712
.text:00407712 loc_407712:                             ; CODE XREF: _strtoull+5A↑j
.text:00407712                 mov     ebp, ds:_pctype
.text:00407718                 mov     edi, [ebp+0]
.text:0040771B                 movzx   ebx, word ptr [edi+edx*2]
.text:0040771F                 and     ebx, 8
.text:00407722                 movzx   eax, bx
.text:00407725                 jmp     loc_407356
.text:00407725 _strtoull       endp
.text:00407725
.text:00407725 ; ---------------------------------------------------------------------------
.text:0040772A                 align 10h
.text:00407730
.text:00407730 ; =============== S U B R O U T I N E =======================================
.text:00407730
.text:00407730 ; Attributes: info_from_lumina
.text:00407730
.text:00407730 ; __int64 __cdecl strtoll(const char *String, char **EndPtr, int Radix)
.text:00407730 _strtoll        proc near               ; CODE XREF: sub_401CE0+3D8↑p
.text:00407730                                         ; sub_401CE0+5AB↑p ...
.text:00407730
.text:00407730 C               = dword ptr -3Ch
.text:00407730 Type            = dword ptr -38h
.text:00407730 var_34          = dword ptr -34h
.text:00407730 var_30          = dword ptr -30h
.text:00407730 var_2C          = dword ptr -2Ch
.text:00407730 var_28          = dword ptr -28h
.text:00407730 var_24          = dword ptr -24h
.text:00407730 var_20          = dword ptr -20h
.text:00407730 var_1C          = dword ptr -1Ch
.text:00407730 var_18          = dword ptr -18h
.text:00407730 String          = dword ptr  4
.text:00407730 EndPtr          = dword ptr  8
.text:00407730 Radix           = dword ptr  0Ch
.text:00407730
.text:00407730                 push    ebp
.text:00407731                 push    edi
.text:00407732                 push    esi
.text:00407733                 push    ebx
.text:00407734                 sub     esp, 2Ch
.text:00407737                 mov     edx, [esp+3Ch+EndPtr]
.text:0040773B                 test    edx, edx
.text:0040773D                 jz      short loc_407749
.text:0040773F                 mov     eax, [esp+3Ch+String]
.text:00407743                 mov     ecx, [esp+3Ch+EndPtr]
.text:00407747                 mov     [ecx], eax
.text:00407749
.text:00407749 loc_407749:                             ; CODE XREF: _strtoll+D↑j
.text:00407749                 mov     edx, [esp+3Ch+Radix]
.text:0040774D                 test    edx, edx
.text:0040774F                 js      short loc_40775F
.text:00407751                 cmp     [esp+3Ch+Radix], 1
.text:00407756                 jz      short loc_40775F
.text:00407758                 cmp     [esp+3Ch+Radix], 24h ; '$'
.text:0040775D                 jle     short loc_407776
.text:0040775F
.text:0040775F loc_40775F:                             ; CODE XREF: _strtoll+1F↑j
.text:0040775F                                         ; _strtoll+26↑j
.text:0040775F                 call    _errno
.text:00407764                 mov     dword ptr [eax], 21h ; '!'
.text:0040776A
.text:0040776A loc_40776A:                             ; CODE XREF: _strtoll+FF↓j
.text:0040776A                                         ; _strtoll+109↓j
.text:0040776A                 xor     eax, eax
.text:0040776C                 xor     edx, edx
.text:0040776E
.text:0040776E loc_40776E:                             ; CODE XREF: _strtoll+24B↓j
.text:0040776E                                         ; _strtoll+258↓j ...
.text:0040776E                 add     esp, 2Ch
.text:00407771                 pop     ebx
.text:00407772                 pop     esi
.text:00407773                 pop     edi
.text:00407774                 pop     ebp
.text:00407775                 retn
.text:00407776 ; ---------------------------------------------------------------------------
.text:00407776
.text:00407776 loc_407776:                             ; CODE XREF: _strtoll+2D↑j
.text:00407776                 mov     ecx, ds:__mb_cur_max
.text:0040777C                 lea     esi, [esi+0]
.text:00407780
.text:00407780 loc_407780:                             ; CODE XREF: _strtoll+7E↓j
.text:00407780                 cmp     dword ptr [ecx], 1
.text:00407783                 mov     esi, [esp+3Ch+String]
.text:00407787                 movsx   edx, byte ptr [esi]
.text:0040778A                 jz      loc_407B90
.text:00407790                 mov     [esp+3Ch+Type], 8 ; Type
.text:00407798                 mov     [esp+3Ch+C], edx ; C
.text:0040779B                 call    _isctype
.text:004077A0                 mov     ecx, ds:__mb_cur_max
.text:004077A6
.text:004077A6 loc_4077A6:                             ; CODE XREF: _strtoll+473↓j
.text:004077A6                 test    eax, eax
.text:004077A8                 jz      short loc_4077B0
.text:004077AA                 inc     [esp+3Ch+String]
.text:004077AE                 jmp     short loc_407780
.text:004077B0 ; ---------------------------------------------------------------------------
.text:004077B0
.text:004077B0 loc_4077B0:                             ; CODE XREF: _strtoll+78↑j
.text:004077B0                 mov     eax, [esp+3Ch+String]
.text:004077B4                 xor     ebx, ebx
.text:004077B6                 movzx   edx, byte ptr [eax]
.text:004077B9                 cmp     dl, 2Dh ; '-'
.text:004077BC                 setz    bl
.text:004077BF                 test    ebx, ebx
.text:004077C1                 mov     [esp+3Ch+var_20], ebx
.text:004077C5                 jnz     loc_407B80
.text:004077CB                 cmp     dl, 2Bh ; '+'
.text:004077CE                 jz      loc_407B80
.text:004077D4
.text:004077D4 loc_4077D4:                             ; CODE XREF: _strtoll+45B↓j
.text:004077D4                 mov     edi, [esp+3Ch+Radix]
.text:004077D8                 test    edi, edi
.text:004077DA                 jnz     short loc_4077ED
.text:004077DC                 cmp     dl, 30h ; '0'
.text:004077DF                 jz      loc_407B57
.text:004077E5                 mov     [esp+3Ch+Radix], 0Ah
.text:004077ED
.text:004077ED loc_4077ED:                             ; CODE XREF: _strtoll+AA↑j
.text:004077ED                                         ; _strtoll+43D↓j ...
.text:004077ED                 cmp     [esp+3Ch+Radix], 10h
.text:004077F2                 jz      loc_407B29
.text:004077F8
.text:004077F8 loc_4077F8:                             ; CODE XREF: _strtoll+3FC↓j
.text:004077F8                                         ; _strtoll+410↓j ...
.text:004077F8                 cmp     dword ptr [ecx], 1
.text:004077FB                 movsx   ebx, dl
.text:004077FE                 jz      loc_407B11
.text:00407804                 mov     [esp+3Ch+C], ebx ; C
.text:00407807                 mov     [esp+3Ch+Type], 4 ; Type
.text:0040780F                 call    _isctype
.text:00407814                 mov     ebx, [esp+3Ch+String]
.text:00407818                 movzx   edx, byte ptr [ebx]
.text:0040781B
.text:0040781B loc_40781B:                             ; CODE XREF: _strtoll+3F4↓j
.text:0040781B                 test    eax, eax
.text:0040781D                 jz      loc_407A78
.text:00407823                 movsx   eax, dl
.text:00407826                 sub     eax, 30h ; '0'
.text:00407829
.text:00407829 loc_407829:                             ; CODE XREF: _strtoll+377↓j
.text:00407829                                         ; _strtoll+3A8↓j ...
.text:00407829                 inc     [esp+3Ch+String]
.text:0040782D                 test    eax, eax
.text:0040782F                 js      loc_40776A
.text:00407835                 cmp     eax, [esp+3Ch+Radix]
.text:00407839                 jge     loc_40776A
.text:0040783F                 mov     [esp+3Ch+var_1C], eax
.text:00407843                 cdq
.text:00407844                 mov     [esp+3Ch+var_18], edx
.text:00407848                 mov     [esp+3Ch+var_24], 0
.text:00407850
.text:00407850 loc_407850:                             ; CODE XREF: _strtoll+1B2↓j
.text:00407850                 mov     ebx, [esp+3Ch+String]
.text:00407854                 mov     ebp, ds:__mb_cur_max
.text:0040785A                 movzx   edx, byte ptr [ebx]
.text:0040785D                 cmp     dword ptr [ebp+0], 1
.text:00407861                 movsx   ecx, dl
.text:00407864                 jz      loc_407A60
.text:0040786A                 mov     [esp+3Ch+C], ecx ; C
.text:0040786D                 mov     [esp+3Ch+Type], 4 ; Type
.text:00407875                 call    _isctype
.text:0040787A                 mov     ecx, [esp+3Ch+String]
.text:0040787E                 movzx   edx, byte ptr [ecx]
.text:00407881
.text:00407881 loc_407881:                             ; CODE XREF: _strtoll+343↓j
.text:00407881                 test    eax, eax
.text:00407883                 jz      loc_4079C6
.text:00407889                 movsx   ebx, dl
.text:0040788C                 lea     ebp, [ebx-30h]
.text:0040788F
.text:0040788F loc_40788F:                             ; CODE XREF: _strtoll+2C7↓j
.text:0040788F                 test    ebp, ebp
.text:00407891                 js      loc_407930
.text:00407897                 cmp     ebp, [esp+3Ch+Radix]
.text:0040789B                 jge     loc_407930
.text:004078A1                 mov     [esp+3Ch+C], 0FFFFFFFFh
.text:004078A8                 mov     eax, [esp+3Ch+Radix]
.text:004078AC                 mov     [esp+3Ch+Type], 7FFFFFFFh
.text:004078B4                 cdq
.text:004078B5                 mov     [esp+3Ch+var_34], eax
.text:004078B9                 mov     [esp+3Ch+var_30], edx
.text:004078BD                 call    sub_409F90
.text:004078C2                 add     eax, 2
.text:004078C5                 adc     edx, 0
.text:004078C8                 cmp     [esp+3Ch+var_18], edx
.text:004078CC                 jb      short loc_4078E7
.text:004078CE                 ja      short loc_4078D6
.text:004078D0                 cmp     [esp+3Ch+var_1C], eax
.text:004078D4                 jbe     short loc_4078E7
.text:004078D6
.text:004078D6 loc_4078D6:                             ; CODE XREF: _strtoll+19E↑j
.text:004078D6                 mov     [esp+3Ch+var_24], 1
.text:004078DE
.text:004078DE loc_4078DE:                             ; CODE XREF: _strtoll+1FE↓j
.text:004078DE                 inc     [esp+3Ch+String]
.text:004078E2                 jmp     loc_407850
.text:004078E7 ; ---------------------------------------------------------------------------
.text:004078E7
.text:004078E7 loc_4078E7:                             ; CODE XREF: _strtoll+19C↑j
.text:004078E7                                         ; _strtoll+1A4↑j
.text:004078E7                 mov     eax, [esp+3Ch+Radix]
.text:004078EB                 mov     ecx, [esp+3Ch+var_18]
.text:004078EF                 cdq
.text:004078F0                 mov     [esp+3Ch+var_2C], eax
.text:004078F4                 mov     esi, [esp+3Ch+var_2C]
.text:004078F8                 mov     [esp+3Ch+var_28], edx
.text:004078FC                 mov     eax, [esp+3Ch+var_1C]
.text:00407900                 mov     edi, [esp+3Ch+var_28]
.text:00407904                 mul     [esp+3Ch+var_2C]
.text:00407908                 imul    ecx, esi
.text:0040790B                 mov     esi, [esp+3Ch+var_1C]
.text:0040790F                 mov     [esp+3Ch+var_1C], ebp
.text:00407913                 imul    esi, edi
.text:00407916                 mov     ebx, eax
.text:00407918                 mov     eax, ebp
.text:0040791A                 add     edx, ecx
.text:0040791C                 sar     eax, 1Fh
.text:0040791F                 add     [esp+3Ch+var_1C], ebx
.text:00407923                 lea     ecx, [esi+edx]
.text:00407926                 mov     [esp+3Ch+var_18], eax
.text:0040792A                 adc     [esp+3Ch+var_18], ecx
.text:0040792E                 jmp     short loc_4078DE
.text:00407930 ; ---------------------------------------------------------------------------
.text:00407930
.text:00407930 loc_407930:                             ; CODE XREF: _strtoll+161↑j
.text:00407930                                         ; _strtoll+16B↑j
.text:00407930                 mov     eax, [esp+3Ch+EndPtr]
.text:00407934                 test    eax, eax
.text:00407936                 jz      short loc_407942
.text:00407938                 mov     edi, [esp+3Ch+String]
.text:0040793C                 mov     edx, [esp+3Ch+EndPtr]
.text:00407940                 mov     [edx], edi
.text:00407942
.text:00407942 loc_407942:                             ; CODE XREF: _strtoll+206↑j
.text:00407942                 mov     esi, [esp+3Ch+var_20]
.text:00407946                 test    esi, esi
.text:00407948                 jz      short loc_4079BA
.text:0040794A                 cmp     [esp+3Ch+var_18], 80000000h
.text:00407952                 jb      short loc_407965
.text:00407954                 ja      short loc_40795D
.text:00407956                 cmp     [esp+3Ch+var_1C], 0
.text:0040795B
.text:0040795B loc_40795B:                             ; CODE XREF: _strtoll+294↓j
.text:0040795B                 jbe     short loc_407965
.text:0040795D
.text:0040795D loc_40795D:                             ; CODE XREF: _strtoll+224↑j
.text:0040795D                 mov     [esp+3Ch+var_24], 1
.text:00407965
.text:00407965 loc_407965:                             ; CODE XREF: _strtoll+222↑j
.text:00407965                                         ; _strtoll:loc_40795B↑j ...
.text:00407965                 mov     ebp, [esp+3Ch+var_24]
.text:00407969                 test    ebp, ebp
.text:0040796B                 jnz     short loc_40798D
.text:0040796D                 mov     ebx, [esp+3Ch+var_20]
.text:00407971                 mov     eax, [esp+3Ch+var_1C]
.text:00407975                 mov     edx, [esp+3Ch+var_18]
.text:00407979                 test    ebx, ebx
.text:0040797B                 jz      loc_40776E
.text:00407981                 neg     eax
.text:00407983                 adc     edx, 0
.text:00407986                 neg     edx
.text:00407988                 jmp     loc_40776E
.text:0040798D ; ---------------------------------------------------------------------------
.text:0040798D
.text:0040798D loc_40798D:                             ; CODE XREF: _strtoll+23B↑j
.text:0040798D                 call    _errno
.text:00407992                 mov     ecx, [esp+3Ch+var_20]
.text:00407996                 mov     edx, 80000000h
.text:0040799B                 mov     dword ptr [eax], 22h ; '"'
.text:004079A1                 xor     eax, eax
.text:004079A3                 test    ecx, ecx
.text:004079A5                 jnz     loc_40776E
.text:004079AB                 mov     eax, 0FFFFFFFFh
.text:004079B0                 mov     edx, 7FFFFFFFh
.text:004079B5                 jmp     loc_40776E
.text:004079BA ; ---------------------------------------------------------------------------
.text:004079BA
.text:004079BA loc_4079BA:                             ; CODE XREF: _strtoll+218↑j
.text:004079BA                 cmp     [esp+3Ch+var_18], 7FFFFFFFh
.text:004079C2                 jb      short loc_407965
.text:004079C4                 jmp     short loc_40795B
.text:004079C6 ; ---------------------------------------------------------------------------
.text:004079C6
.text:004079C6 loc_4079C6:                             ; CODE XREF: _strtoll+153↑j
.text:004079C6                 mov     edi, ds:__mb_cur_max
.text:004079CC                 movsx   ecx, dl
.text:004079CF                 cmp     dword ptr [edi], 1
.text:004079D2                 jz      short loc_407A4A
.text:004079D4                 mov     [esp+3Ch+C], ecx ; C
.text:004079D7                 mov     [esp+3Ch+Type], 1 ; Type
.text:004079DF                 call    _isctype
.text:004079E4                 mov     ecx, [esp+3Ch+String]
.text:004079E8                 movzx   edx, byte ptr [ecx]
.text:004079EB
.text:004079EB loc_4079EB:                             ; CODE XREF: _strtoll+32D↓j
.text:004079EB                 test    eax, eax
.text:004079ED                 jz      short loc_407A00
.text:004079EF                 movsx   eax, dl
.text:004079F2                 sub     eax, 37h ; '7'
.text:004079F5
.text:004079F5 loc_4079F5:                             ; CODE XREF: _strtoll+2FC↓j
.text:004079F5                                         ; _strtoll+303↓j
.text:004079F5                 mov     ebp, eax
.text:004079F7                 jmp     loc_40788F
.text:004079F7 ; ---------------------------------------------------------------------------
.text:004079FC                 align 10h
.text:00407A00
.text:00407A00 loc_407A00:                             ; CODE XREF: _strtoll+2BD↑j
.text:00407A00                 mov     edi, ds:__mb_cur_max
.text:00407A06                 movsx   edx, dl
.text:00407A09                 cmp     dword ptr [edi], 1
.text:00407A0C                 jz      short loc_407A35
.text:00407A0E                 mov     [esp+3Ch+Type], 2 ; Type
.text:00407A16                 mov     [esp+3Ch+C], edx ; C
.text:00407A19                 call    _isctype
.text:00407A1E
.text:00407A1E loc_407A1E:                             ; CODE XREF: _strtoll+318↓j
.text:00407A1E                 test    eax, eax
.text:00407A20                 jz      short loc_407A2E
.text:00407A22                 mov     ecx, [esp+3Ch+String]
.text:00407A26                 movsx   eax, byte ptr [ecx]
.text:00407A29                 sub     eax, 57h ; 'W'
.text:00407A2C                 jmp     short loc_4079F5
.text:00407A2E ; ---------------------------------------------------------------------------
.text:00407A2E
.text:00407A2E loc_407A2E:                             ; CODE XREF: _strtoll+2F0↑j
.text:00407A2E                 mov     eax, 0FFFFFFFFh
.text:00407A33                 jmp     short loc_4079F5
.text:00407A35 ; ---------------------------------------------------------------------------
.text:00407A35
.text:00407A35 loc_407A35:                             ; CODE XREF: _strtoll+2DC↑j
.text:00407A35                 mov     ebx, ds:_pctype
.text:00407A3B                 mov     ebp, [ebx]
.text:00407A3D                 movzx   esi, word ptr [ebp+edx*2+0]
.text:00407A42                 and     esi, 2
.text:00407A45                 movzx   eax, si
.text:00407A48                 jmp     short loc_407A1E
.text:00407A4A ; ---------------------------------------------------------------------------
.text:00407A4A
.text:00407A4A loc_407A4A:                             ; CODE XREF: _strtoll+2A2↑j
.text:00407A4A                 mov     ebx, ds:_pctype
.text:00407A50                 mov     ebp, [ebx]
.text:00407A52                 movzx   esi, word ptr [ebp+ecx*2+0]
.text:00407A57                 and     esi, 1
.text:00407A5A                 movzx   eax, si
.text:00407A5D                 jmp     short loc_4079EB
.text:00407A5D ; ---------------------------------------------------------------------------
.text:00407A5F                 align 10h
.text:00407A60
.text:00407A60 loc_407A60:                             ; CODE XREF: _strtoll+134↑j
.text:00407A60                 mov     ebp, ds:_pctype
.text:00407A66                 mov     esi, [ebp+0]
.text:00407A69                 movzx   edi, word ptr [esi+ecx*2]
.text:00407A6D                 and     edi, 4
.text:00407A70                 movzx   eax, di
.text:00407A73                 jmp     loc_407881
.text:00407A78 ; ---------------------------------------------------------------------------
.text:00407A78
.text:00407A78 loc_407A78:                             ; CODE XREF: _strtoll+ED↑j
.text:00407A78                 mov     esi, ds:__mb_cur_max
.text:00407A7E                 movsx   ecx, dl
.text:00407A81                 cmp     dword ptr [esi], 1
.text:00407A84                 jz      short loc_407AFC
.text:00407A86                 mov     [esp+3Ch+C], ecx ; C
.text:00407A89                 mov     [esp+3Ch+Type], 1 ; Type
.text:00407A91                 call    _isctype
.text:00407A96                 mov     ecx, [esp+3Ch+String]
.text:00407A9A                 movzx   edx, byte ptr [ecx]
.text:00407A9D
.text:00407A9D loc_407A9D:                             ; CODE XREF: _strtoll+3DF↓j
.text:00407A9D                 test    eax, eax
.text:00407A9F                 jz      short loc_407AAC
.text:00407AA1                 movsx   eax, dl
.text:00407AA4                 sub     eax, 37h ; '7'
.text:00407AA7                 jmp     loc_407829
.text:00407AAC ; ---------------------------------------------------------------------------
.text:00407AAC
.text:00407AAC loc_407AAC:                             ; CODE XREF: _strtoll+36F↑j
.text:00407AAC                 mov     esi, ds:__mb_cur_max
.text:00407AB2                 movsx   edx, dl
.text:00407AB5                 cmp     dword ptr [esi], 1
.text:00407AB8                 jz      short loc_407AE7
.text:00407ABA                 mov     [esp+3Ch+Type], 2 ; Type
.text:00407AC2                 mov     [esp+3Ch+C], edx ; C
.text:00407AC5                 call    _isctype
.text:00407ACA
.text:00407ACA loc_407ACA:                             ; CODE XREF: _strtoll+3CA↓j
.text:00407ACA                 test    eax, eax
.text:00407ACC                 jz      short loc_407ADD
.text:00407ACE                 mov     edx, [esp+3Ch+String]
.text:00407AD2                 movsx   eax, byte ptr [edx]
.text:00407AD5                 sub     eax, 57h ; 'W'
.text:00407AD8                 jmp     loc_407829
.text:00407ADD ; ---------------------------------------------------------------------------
.text:00407ADD
.text:00407ADD loc_407ADD:                             ; CODE XREF: _strtoll+39C↑j
.text:00407ADD                 mov     eax, 0FFFFFFFFh
.text:00407AE2                 jmp     loc_407829
.text:00407AE7 ; ---------------------------------------------------------------------------
.text:00407AE7
.text:00407AE7 loc_407AE7:                             ; CODE XREF: _strtoll+388↑j
.text:00407AE7                 mov     ebx, ds:_pctype
.text:00407AED                 mov     ebp, [ebx]
.text:00407AEF                 movzx   edi, word ptr [ebp+edx*2+0]
.text:00407AF4                 and     edi, 2
.text:00407AF7                 movzx   eax, di
.text:00407AFA                 jmp     short loc_407ACA
.text:00407AFC ; ---------------------------------------------------------------------------
.text:00407AFC
.text:00407AFC loc_407AFC:                             ; CODE XREF: _strtoll+354↑j
.text:00407AFC                 mov     ebx, ds:_pctype
.text:00407B02                 mov     ebp, [ebx]
.text:00407B04                 movzx   edi, word ptr [ebp+ecx*2+0]
.text:00407B09                 and     edi, 1
.text:00407B0C                 movzx   eax, di
.text:00407B0F                 jmp     short loc_407A9D
.text:00407B11 ; ---------------------------------------------------------------------------
.text:00407B11
.text:00407B11 loc_407B11:                             ; CODE XREF: _strtoll+CE↑j
.text:00407B11                 mov     ebp, ds:_pctype
.text:00407B17                 mov     edi, [ebp+0]
.text:00407B1A                 movzx   ecx, word ptr [edi+ebx*2]
.text:00407B1E                 and     ecx, 4
.text:00407B21                 movzx   eax, cx
.text:00407B24                 jmp     loc_40781B
.text:00407B29 ; ---------------------------------------------------------------------------
.text:00407B29
.text:00407B29 loc_407B29:                             ; CODE XREF: _strtoll+C2↑j
.text:00407B29                 cmp     dl, 30h ; '0'
.text:00407B2C                 jnz     loc_4077F8
.text:00407B32                 mov     ebx, [esp+3Ch+String]
.text:00407B36                 movzx   eax, byte ptr [ebx+1]
.text:00407B3A                 cmp     al, 58h ; 'X'
.text:00407B3C                 jz      short loc_407B46
.text:00407B3E                 cmp     al, 78h ; 'x'
.text:00407B40                 jnz     loc_4077F8
.text:00407B46
.text:00407B46 loc_407B46:                             ; CODE XREF: _strtoll+40C↑j
.text:00407B46                 add     [esp+3Ch+String], 2
.text:00407B4B                 mov     esi, [esp+3Ch+String]
.text:00407B4F                 movzx   edx, byte ptr [esi]
.text:00407B52                 jmp     loc_4077F8
.text:00407B57 ; ---------------------------------------------------------------------------
.text:00407B57
.text:00407B57 loc_407B57:                             ; CODE XREF: _strtoll+AF↑j
.text:00407B57                 mov     ebp, [esp+3Ch+String]
.text:00407B5B                 movzx   eax, byte ptr [ebp+1]
.text:00407B5F                 cmp     al, 58h ; 'X'
.text:00407B61                 jz      short loc_407B73
.text:00407B63                 mov     [esp+3Ch+Radix], 8
.text:00407B6B                 cmp     al, 78h ; 'x'
.text:00407B6D                 jnz     loc_4077ED
.text:00407B73
.text:00407B73 loc_407B73:                             ; CODE XREF: _strtoll+431↑j
.text:00407B73                 mov     [esp+3Ch+Radix], 10h
.text:00407B7B                 jmp     loc_4077ED
.text:00407B80 ; ---------------------------------------------------------------------------
.text:00407B80
.text:00407B80 loc_407B80:                             ; CODE XREF: _strtoll+95↑j
.text:00407B80                                         ; _strtoll+9E↑j
.text:00407B80                 inc     [esp+3Ch+String]
.text:00407B84                 mov     esi, [esp+3Ch+String]
.text:00407B88                 movzx   edx, byte ptr [esi]
.text:00407B8B                 jmp     loc_4077D4
.text:00407B90 ; ---------------------------------------------------------------------------
.text:00407B90
.text:00407B90 loc_407B90:                             ; CODE XREF: _strtoll+5A↑j
.text:00407B90                 mov     ebp, ds:_pctype
.text:00407B96                 mov     edi, [ebp+0]
.text:00407B99                 movzx   ebx, word ptr [edi+edx*2]
.text:00407B9D                 and     ebx, 8
.text:00407BA0                 movzx   eax, bx
.text:00407BA3                 jmp     loc_4077A6
.text:00407BA3 _strtoll        endp
.text:00407BA3
.text:00407BA3 ; ---------------------------------------------------------------------------
.text:00407BA8                 align 10h
.text:00407BB0 dword_407BB0    dd 0                    ; DATA XREF: ___asctoe64:loc_4082DD↓r
.text:00407BB4 dword_407BB4    dd 0                    ; DATA XREF: ___asctoe64+668↓r
.text:00407BB8 dword_407BB8    dd 3FFF8000h            ; DATA XREF: ___asctoe64+671↓r
.text:00407BBC                 db 14h dup(90h)
.text:00407BD0 dword_407BD0    dd 979AC94Ch, 52028A20h, 7525C460h, 5DE4A74Dh, 3B5DC53Dh
.text:00407BD0                                         ; DATA XREF: ___asctoe64+77D↓o
.text:00407BD0                 dd 5A929E8Bh, 0C17650Dh, 75868175h, 4D48C976h, 91C6CC65h
.text:00407BD0                 dd 0A0AEA60Eh, 46A3E319h, 0DE8DDDBCh, 0EBFB9DF9h, 4351AA7Eh
.text:00407BD0                 dd 8CDFC66Fh, 47C980E9h, 41A893BAh, 0A6D53CBFh, 1F49FFCFh
.text:00407BD0                 dd 40D3C278h, 0B59DF020h, 0ADA82B70h, 40699DC5h, 0
.text:00407C34                 dd 0C9BF0400h, 40348E1Bh, 0
.text:00407C40                 dd 20000000h, 4019BEBCh, 2 dup(0)
.text:00407C50                 dd 400C9C40h, 2 dup(0)
.text:00407C5C                 dd 4005C800h
.text:00407C60 dword_407C60    dd 2 dup(0)             ; DATA XREF: ___asctoe64+663↓o
.text:00407C68                 dd 4002A000h
.text:00407C6C ; const char String1[4]
.text:00407C6C String1         db 'INF',0              ; DATA XREF: ___asctoe64+101↓o
.text:00407C70 ; const char aInity[]
.text:00407C70 aInity          db 'INITY',0            ; DATA XREF: ___asctoe64+12F↓o
.text:00407C76 ; const char aNan[]
.text:00407C76 aNan            db 'NAN',0              ; DATA XREF: ___asctoe64+202↓o
.text:00407C7A                 align 10h
.text:00407C80
.text:00407C80 ; =============== S U B R O U T I N E =======================================
.text:00407C80
.text:00407C80 ; Attributes: bp-based frame info_from_lumina
.text:00407C80
.text:00407C80 ; int __cdecl __asctoe64(char *Str, int)
.text:00407C80 ___asctoe64     proc near               ; CODE XREF: sub_408590+36↓p
.text:00407C80
.text:00407C80 Str             = dword ptr -0D8h
.text:00407C80 Type            = dword ptr -0D4h
.text:00407C80 MaxCount        = dword ptr -0D0h
.text:00407C80 var_CC          = dword ptr -0CCh
.text:00407C80 var_C8          = dword ptr -0C8h
.text:00407C80 var_C4          = dword ptr -0C4h
.text:00407C80 var_C0          = byte ptr -0C0h
.text:00407C80 var_AC          = dword ptr -0ACh
.text:00407C80 var_A5          = byte ptr -0A5h
.text:00407C80 String2         = dword ptr -0A4h
.text:00407C80 var_A0          = dword ptr -0A0h
.text:00407C80 var_9C          = dword ptr -9Ch
.text:00407C80 var_98          = dword ptr -98h
.text:00407C80 var_94          = dword ptr -94h
.text:00407C80 var_90          = dword ptr -90h
.text:00407C80 var_8C          = dword ptr -8Ch
.text:00407C80 var_88          = dword ptr -88h
.text:00407C80 var_84          = dword ptr -84h
.text:00407C80 var_80          = dword ptr -80h
.text:00407C80 var_7C          = dword ptr -7Ch
.text:00407C80 var_78          = byte ptr -78h
.text:00407C80 var_76          = word ptr -76h
.text:00407C80 var_58          = dword ptr -58h
.text:00407C80 var_54          = dword ptr -54h
.text:00407C80 var_50          = dword ptr -50h
.text:00407C80 var_4C          = dword ptr -4Ch
.text:00407C80 var_48          = word ptr -48h
.text:00407C80 var_38          = dword ptr -38h
.text:00407C80 var_34          = dword ptr -34h
.text:00407C80 var_30          = dword ptr -30h
.text:00407C80 var_2C          = dword ptr -2Ch
.text:00407C80 var_28          = word ptr -28h
.text:00407C80 Size            = dword ptr  8
.text:00407C80 arg_4           = dword ptr  0Ch
.text:00407C80
.text:00407C80                 push    ebp
.text:00407C81                 xor     ecx, ecx
.text:00407C83                 mov     ebp, esp
.text:00407C85                 push    edi
.text:00407C86                 xor     edx, edx
.text:00407C88                 xor     edi, edi
.text:00407C8A                 push    esi
.text:00407C8B                 xor     eax, eax
.text:00407C8D                 push    ebx
.text:00407C8E                 sub     esp, 0CCh
.text:00407C94                 mov     [ebp+var_A0], eax
.text:00407C9A                 mov     ebx, [ebp+Size]
.text:00407C9D                 mov     [ebp+var_94], ecx
.text:00407CA3                 mov     [ebp+var_98], edx
.text:00407CA9                 mov     [ebp+var_9C], edi
.text:00407CAF                 mov     edi, ebx
.text:00407CB1                 call    localeconv
.text:00407CB6                 mov     esi, [eax]
.text:00407CB8                 xor     edx, edx
.text:00407CBA                 movzx   ecx, byte ptr [esi]
.text:00407CBD                 mov     [esp+0D8h+Str], ebx ; Size
.text:00407CC0                 mov     [ebp+var_AC], edx
.text:00407CC6                 mov     [ebp+var_A5], cl
.text:00407CCC                 call    strlen
.text:00407CD1                 lea     esi, [eax+2]
.text:00407CD4                 add     eax, 11h
.text:00407CD7                 and     eax, 0FFFFFFF0h
.text:00407CDA                 call    __alloca
.text:00407CDF                 lea     edx, [esp+0D8h+var_C0]
.text:00407CE3                 mov     [ebp+String2], edx
.text:00407CE9                 lea     esi, [esi+0]
.text:00407CF0
.text:00407CF0 loc_407CF0:                             ; CODE XREF: ___asctoe64+9D↓j
.text:00407CF0                 movzx   edx, byte ptr [edi]
.text:00407CF3                 mov     ebx, ds:__mb_cur_max
.text:00407CF9                 cmp     dword ptr [ebx], 1
.text:00407CFC                 jz      loc_408577
.text:00407D02                 mov     [esp+0D8h+Type], 8 ; Type
.text:00407D0A                 mov     [esp+0D8h+Str], edx ; C
.text:00407D0D                 call    _isctype
.text:00407D12
.text:00407D12 loc_407D12:                             ; CODE XREF: ___asctoe64+909↓j
.text:00407D12                 test    eax, eax
.text:00407D14                 jz      short loc_407D1F
.text:00407D16                 inc     [ebp+var_AC]
.text:00407D1C                 inc     edi
.text:00407D1D                 jmp     short loc_407CF0
.text:00407D1F ; ---------------------------------------------------------------------------
.text:00407D1F
.text:00407D1F loc_407D1F:                             ; CODE XREF: ___asctoe64+94↑j
.text:00407D1F                 xor     ebx, ebx
.text:00407D21                 mov     edx, [ebp+String2]
.text:00407D27                 mov     [ebp+var_90], ebx
.text:00407D2D                 cmp     [ebp+var_90], esi
.text:00407D33                 jge     short loc_407D59
.text:00407D35                 lea     esi, [esi+0]
.text:00407D39                 lea     edi, [edi+0]
.text:00407D40
.text:00407D40 loc_407D40:                             ; CODE XREF: ___asctoe64+D7↓j
.text:00407D40                 movzx   ecx, byte ptr [edi]
.text:00407D43                 inc     edi
.text:00407D44                 mov     [edx], cl
.text:00407D46                 inc     edx
.text:00407D47                 test    cl, cl
.text:00407D49                 jz      short loc_407D59
.text:00407D4B                 inc     [ebp+var_90]
.text:00407D51                 cmp     [ebp+var_90], esi
.text:00407D57                 jl      short loc_407D40
.text:00407D59
.text:00407D59 loc_407D59:                             ; CODE XREF: ___asctoe64+B3↑j
.text:00407D59                                         ; ___asctoe64+C9↑j
.text:00407D59                 mov     byte ptr [edx], 0
.text:00407D5C                 mov     edi, [ebp+String2]
.text:00407D62                 movzx   eax, byte ptr [edi]
.text:00407D65                 cmp     al, 2Dh ; '-'
.text:00407D67                 jz      loc_40856A
.text:00407D6D                 cmp     al, 2Bh ; '+'
.text:00407D6F                 jz      loc_40855E
.text:00407D75
.text:00407D75 loc_407D75:                             ; CODE XREF: ___asctoe64+8E5↓j
.text:00407D75                 mov     [esp+0D8h+MaxCount], 3 ; MaxCount
.text:00407D7D                 mov     [esp+0D8h+Type], edi ; String2
.text:00407D81                 mov     [esp+0D8h+Str], offset String1 ; "INF"
.text:00407D88                 call    _strnicmp
.text:00407D8D                 test    eax, eax
.text:00407D8F                 jnz     loc_407E76
.text:00407D95                 mov     [esp+0D8h+MaxCount], 5 ; MaxCount
.text:00407D9D                 mov     edx, 1
.text:00407DA2                 add     edi, 3
.text:00407DA5                 mov     [ebp+var_94], edx
.text:00407DAB                 mov     [esp+0D8h+Type], edi ; String2
.text:00407DAF                 mov     [esp+0D8h+Str], offset aInity ; "INITY"
.text:00407DB6                 call    _strnicmp
.text:00407DBB                 test    eax, eax
.text:00407DBD                 jnz     short loc_407DC2
.text:00407DBF                 add     edi, 5
.text:00407DC2
.text:00407DC2 loc_407DC2:                             ; CODE XREF: ___asctoe64+13D↑j
.text:00407DC2                 mov     [ebp+var_38], 0
.text:00407DC9                 mov     [ebp+var_34], 0
.text:00407DD0                 mov     [ebp+var_30], 0
.text:00407DD7                 mov     [ebp+var_2C], 0
.text:00407DDE                 mov     [ebp+var_28], 0
.text:00407DE4
.text:00407DE4 loc_407DE4:                             ; CODE XREF: ___asctoe64+88A↓j
.text:00407DE4                 mov     word ptr [ebp+var_38+2], 7FFFh
.text:00407DEA
.text:00407DEA loc_407DEA:                             ; CODE XREF: ___asctoe64+24E↓j
.text:00407DEA                                         ; ___asctoe64+5EB↓j ...
.text:00407DEA                 mov     esi, [ebp+var_A0]
.text:00407DF0                 lea     ebx, [ebp+var_38]
.text:00407DF3                 mov     edx, [ebp+arg_4]
.text:00407DF6                 mov     [esp+0D8h+Str], ebx
.text:00407DF9                 mov     word ptr [ebp+var_38], si
.text:00407DFD                 mov     [esp+0D8h+Type], edx
.text:00407E01                 call    sub_409290
.text:00407E06                 mov     ecx, [ebp+var_98]
.text:00407E0C                 test    ecx, ecx
.text:00407E0E                 jz      short loc_407E35
.text:00407E10                 mov     ecx, [ebp+arg_4]
.text:00407E13                 fldz
.text:00407E15                 fld     tbyte ptr [ecx]
.text:00407E17                 fucom   st(1)
.text:00407E19                 fnstsw  ax
.text:00407E1B                 fstp    st(1)
.text:00407E1D                 sahf
.text:00407E1E                 jp      short loc_407E22
.text:00407E20                 jz      short loc_407E72
.text:00407E22
.text:00407E22 loc_407E22:                             ; CODE XREF: ___asctoe64+19E↑j
.text:00407E22                 fxam
.text:00407E24                 fstsw   ax
.text:00407E27                 fstp    st
.text:00407E29                 and     eax, 4500h
.text:00407E2E                 cmp     eax, 500h
.text:00407E33                 jz      short loc_407E65
.text:00407E35
.text:00407E35 loc_407E35:                             ; CODE XREF: ___asctoe64+18E↑j
.text:00407E35                                         ; ___asctoe64+1F0↓j
.text:00407E35                 mov     eax, [ebp+var_9C]
.text:00407E3B                 test    eax, eax
.text:00407E3D                 jnz     short loc_407E49
.text:00407E3F                 mov     ebx, [ebp+var_94]
.text:00407E45                 test    ebx, ebx
.text:00407E47                 jz      short loc_407E61
.text:00407E49
.text:00407E49 loc_407E49:                             ; CODE XREF: ___asctoe64+1BD↑j
.text:00407E49                 mov     edx, [ebp+String2]
.text:00407E4F                 mov     eax, [ebp+var_AC]
.text:00407E55                 sub     edi, edx
.text:00407E57                 add     eax, edi
.text:00407E59
.text:00407E59 loc_407E59:                             ; CODE XREF: ___asctoe64+1E3↓j
.text:00407E59                 lea     esp, [ebp-0Ch]
.text:00407E5C                 pop     ebx
.text:00407E5D                 pop     esi
.text:00407E5E                 pop     edi
.text:00407E5F                 pop     ebp
.text:00407E60                 retn
.text:00407E61 ; ---------------------------------------------------------------------------
.text:00407E61
.text:00407E61 loc_407E61:                             ; CODE XREF: ___asctoe64+1C7↑j
.text:00407E61                 xor     eax, eax
.text:00407E63                 jmp     short loc_407E59
.text:00407E65 ; ---------------------------------------------------------------------------
.text:00407E65
.text:00407E65 loc_407E65:                             ; CODE XREF: ___asctoe64+1B3↑j
.text:00407E65                                         ; ___asctoe64+1F4↓j
.text:00407E65                 call    _errno
.text:00407E6A                 mov     dword ptr [eax], 22h ; '"'
.text:00407E70                 jmp     short loc_407E35
.text:00407E72 ; ---------------------------------------------------------------------------
.text:00407E72
.text:00407E72 loc_407E72:                             ; CODE XREF: ___asctoe64+1A0↑j
.text:00407E72                 fstp    st
.text:00407E74                 jmp     short loc_407E65
.text:00407E76 ; ---------------------------------------------------------------------------
.text:00407E76
.text:00407E76 loc_407E76:                             ; CODE XREF: ___asctoe64+10F↑j
.text:00407E76                 mov     [esp+0D8h+MaxCount], 3 ; MaxCount
.text:00407E7E                 mov     [esp+0D8h+Type], edi ; String2
.text:00407E82                 mov     [esp+0D8h+Str], offset aNan ; "NAN"
.text:00407E89                 call    _strnicmp
.text:00407E8E                 test    eax, eax
.text:00407E90                 jnz     short loc_407ED3
.text:00407E92                 mov     word ptr [ebp+var_38], 0
.text:00407E98                 mov     ebx, 1
.text:00407E9D                 add     edi, 3
.text:00407EA0                 mov     [ebp+var_94], ebx
.text:00407EA6                 lea     edx, [ebp+var_30]
.text:00407EA9                 mov     eax, 4
.text:00407EAE                 mov     word ptr [ebp+var_38+2], 7FFFh
.text:00407EB4                 mov     word ptr [ebp+var_34], 0
.text:00407EBA                 mov     word ptr [ebp+var_34+2], 0C000h
.text:00407EC0
.text:00407EC0 loc_407EC0:                             ; CODE XREF: ___asctoe64+24C↓j
.text:00407EC0                 mov     word ptr [edx], 0
.text:00407EC5                 inc     eax
.text:00407EC6                 add     edx, 2
.text:00407EC9                 cmp     eax, 8
.text:00407ECC                 jle     short loc_407EC0
.text:00407ECE                 jmp     loc_407DEA
.text:00407ED3 ; ---------------------------------------------------------------------------
.text:00407ED3
.text:00407ED3 loc_407ED3:                             ; CODE XREF: ___asctoe64+210↑j
.text:00407ED3                 mov     [ebp+var_80], 0
.text:00407EDA                 xor     esi, esi
.text:00407EDC                 xor     ecx, ecx
.text:00407EDE                 mov     [ebp+var_8C], esi
.text:00407EE4                 xor     eax, eax
.text:00407EE6                 mov     [ebp+var_84], ecx
.text:00407EEC                 mov     [ebp+var_88], eax
.text:00407EF2                 mov     [ebp+var_38], 0
.text:00407EF9                 mov     [ebp+var_34], 0
.text:00407F00                 mov     [ebp+var_30], 0
.text:00407F07                 mov     [ebp+var_2C], 0
.text:00407F0E                 mov     [ebp+var_28], 0
.text:00407F14                 movzx   edx, byte ptr [edi]
.text:00407F17                 cmp     dl, 30h ; '0'
.text:00407F1A                 jz      loc_408545
.text:00407F20
.text:00407F20 loc_407F20:                             ; CODE XREF: ___asctoe64+419↓j
.text:00407F20                                         ; ___asctoe64+8D9↓j
.text:00407F20                 movsx   ebx, dl
.text:00407F23                 sub     ebx, 30h ; '0'
.text:00407F26                 cmp     ebx, 9
.text:00407F29                 mov     [ebp+var_90], ebx
.text:00407F2F                 ja      loc_4080C0
.text:00407F35                 cmp     word ptr [ebp+var_34], 0
.text:00407F3A                 jnz     loc_4080A0
.text:00407F40                 mov     eax, [ebp+var_80]
.text:00407F43                 test    eax, eax
.text:00407F45                 jz      short loc_407F4D
.text:00407F47                 inc     [ebp+var_84]
.text:00407F4D
.text:00407F4D loc_407F4D:                             ; CODE XREF: ___asctoe64+2C5↑j
.text:00407F4D                 lea     ecx, [ebp+var_28]
.text:00407F50                 xor     ebx, ebx
.text:00407F52                 mov     esi, 6
.text:00407F57                 mov     esi, esi
.text:00407F59                 lea     edi, [edi+0]
.text:00407F60
.text:00407F60 loc_407F60:                             ; CODE XREF: ___asctoe64+311↓j
.text:00407F60                 movzx   edx, word ptr [ecx]
.text:00407F63                 mov     eax, edx
.text:00407F65                 and     eax, 0FFFF8000h
.text:00407F6A                 test    ax, ax
.text:00407F6D                 jz      short loc_407F72
.text:00407F6F                 or      ebx, 1
.text:00407F72
.text:00407F72 loc_407F72:                             ; CODE XREF: ___asctoe64+2ED↑j
.text:00407F72                 mov     eax, ebx
.text:00407F74                 and     eax, 2
.text:00407F77                 add     edx, edx
.text:00407F79                 test    ax, ax
.text:00407F7C                 mov     [ecx], dx
.text:00407F7F                 jz      short loc_407F87
.text:00407F81                 or      edx, 1
.text:00407F84                 mov     [ecx], dx
.text:00407F87
.text:00407F87 loc_407F87:                             ; CODE XREF: ___asctoe64+2FF↑j
.text:00407F87                 lea     edx, [ebx+ebx]
.text:00407F8A                 sub     ecx, 2
.text:00407F8D                 dec     esi
.text:00407F8E                 movzx   ebx, dx
.text:00407F91                 jns     short loc_407F60
.text:00407F93                 mov     [ebp+var_48], 0
.text:00407F99                 mov     ebx, [ebp+var_34]
.text:00407F9C                 mov     esi, [ebp+var_30]
.text:00407F9F                 mov     ecx, [ebp+var_2C]
.text:00407FA2                 mov     edx, [ebp+var_38]
.text:00407FA5                 mov     [ebp+var_54], ebx
.text:00407FA8                 xor     ebx, ebx
.text:00407FAA                 mov     [ebp+var_50], esi
.text:00407FAD                 mov     esi, 6
.text:00407FB2                 mov     [ebp+var_4C], ecx
.text:00407FB5                 lea     ecx, [ebp+var_48]
.text:00407FB8                 mov     [ebp+var_58], edx
.text:00407FBB                 nop
.text:00407FBC                 lea     esi, [esi+0]
.text:00407FC0
.text:00407FC0 loc_407FC0:                             ; CODE XREF: ___asctoe64+371↓j
.text:00407FC0                 movzx   edx, word ptr [ecx]
.text:00407FC3                 mov     eax, edx
.text:00407FC5                 and     eax, 0FFFF8000h
.text:00407FCA                 test    ax, ax
.text:00407FCD                 jz      short loc_407FD2
.text:00407FCF                 or      ebx, 1
.text:00407FD2
.text:00407FD2 loc_407FD2:                             ; CODE XREF: ___asctoe64+34D↑j
.text:00407FD2                 mov     eax, ebx
.text:00407FD4                 and     eax, 2
.text:00407FD7                 add     edx, edx
.text:00407FD9                 test    ax, ax
.text:00407FDC                 mov     [ecx], dx
.text:00407FDF                 jz      short loc_407FE7
.text:00407FE1                 or      edx, 1
.text:00407FE4                 mov     [ecx], dx
.text:00407FE7
.text:00407FE7 loc_407FE7:                             ; CODE XREF: ___asctoe64+35F↑j
.text:00407FE7                 lea     edx, [ebx+ebx]
.text:00407FEA                 sub     ecx, 2
.text:00407FED                 dec     esi
.text:00407FEE                 movzx   ebx, dx
.text:00407FF1                 jns     short loc_407FC0
.text:00407FF3                 lea     ecx, [ebp+var_48]
.text:00407FF6                 xor     ebx, ebx
.text:00407FF8                 mov     esi, 6
.text:00407FFD                 lea     esi, [esi+0]
.text:00408000
.text:00408000 loc_408000:                             ; CODE XREF: ___asctoe64+3B1↓j
.text:00408000                 movzx   edx, word ptr [ecx]
.text:00408003                 mov     eax, edx
.text:00408005                 and     eax, 0FFFF8000h
.text:0040800A                 test    ax, ax
.text:0040800D                 jz      short loc_408012
.text:0040800F                 or      ebx, 1
.text:00408012
.text:00408012 loc_408012:                             ; CODE XREF: ___asctoe64+38D↑j
.text:00408012                 mov     eax, ebx
.text:00408014                 and     eax, 2
.text:00408017                 add     edx, edx
.text:00408019                 test    ax, ax
.text:0040801C                 mov     [ecx], dx
.text:0040801F                 jz      short loc_408027
.text:00408021                 or      edx, 1
.text:00408024                 mov     [ecx], dx
.text:00408027
.text:00408027 loc_408027:                             ; CODE XREF: ___asctoe64+39F↑j
.text:00408027                 lea     edx, [ebx+ebx]
.text:0040802A                 sub     ecx, 2
.text:0040802D                 dec     esi
.text:0040802E                 movzx   ebx, dx
.text:00408031                 jns     short loc_408000
.text:00408033                 lea     eax, [ebp+var_38]
.text:00408036                 lea     ebx, [ebp+var_58]
.text:00408039                 mov     [esp+0D8h+Type], eax
.text:0040803D                 mov     [esp+0D8h+Str], ebx
.text:00408040                 call    sub_409AB0
.text:00408045                 lea     eax, [ebp+var_58]
.text:00408048                 mov     esi, [ebp+var_90]
.text:0040804E                 lea     ecx, [ebp+var_38]
.text:00408051                 mov     [ebp+var_4C], 0
.text:00408058                 mov     [ebp+var_58], 0
.text:0040805F                 mov     [ebp+var_54], 0
.text:00408066                 mov     [ebp+var_50], 0
.text:0040806D                 mov     [ebp+var_48], 0
.text:00408073                 mov     word ptr [ebp+var_4C+2], si
.text:00408077                 mov     [esp+0D8h+Type], ecx
.text:0040807B                 mov     [esp+0D8h+Str], eax
.text:0040807E                 call    sub_409AB0
.text:00408083
.text:00408083 loc_408083:                             ; CODE XREF: ___asctoe64+431↓j
.text:00408083                                         ; ___asctoe64+439↓j
.text:00408083                 inc     [ebp+var_9C]
.text:00408089                 mov     esi, [ebp+var_90]
.text:0040808F                 or      [ebp+var_98], esi
.text:00408095
.text:00408095 loc_408095:                             ; CODE XREF: ___asctoe64+45A↓j
.text:00408095                 inc     edi
.text:00408096                 movzx   edx, byte ptr [edi]
.text:00408099                 jmp     loc_407F20
.text:00408099 ; ---------------------------------------------------------------------------
.text:0040809E                 align 10h
.text:004080A0
.text:004080A0 loc_4080A0:                             ; CODE XREF: ___asctoe64+2BA↑j
.text:004080A0                 mov     edx, [ebp+var_80]
.text:004080A3                 mov     ecx, [ebp+var_90]
.text:004080A9                 or      [ebp+var_8C], ecx
.text:004080AF                 test    edx, edx
.text:004080B1                 jnz     short loc_408083
.text:004080B3                 dec     [ebp+var_84]
.text:004080B9                 jmp     short loc_408083
.text:004080B9 ; ---------------------------------------------------------------------------
.text:004080BB                 align 10h
.text:004080C0
.text:004080C0 loc_4080C0:                             ; CODE XREF: ___asctoe64+2AF↑j
.text:004080C0                 cmp     dl, [ebp+var_A5]
.text:004080C6                 jnz     loc_408440
.text:004080CC                 mov     ebx, [ebp+var_80]
.text:004080CF                 test    ebx, ebx
.text:004080D1                 jnz     short loc_4080DC
.text:004080D3                 mov     [ebp+var_80], 1
.text:004080DA                 jmp     short loc_408095
.text:004080DC ; ---------------------------------------------------------------------------
.text:004080DC
.text:004080DC loc_4080DC:                             ; CODE XREF: ___asctoe64+451↑j
.text:004080DC                                         ; ___asctoe64+7C8↓j ...
.text:004080DC                 mov     edx, [ebp+var_84]
.text:004080E2                 mov     esi, [ebp+var_88]
.text:004080E8                 sub     esi, edx
.text:004080EA                 mov     [ebp+var_84], esi
.text:004080F0                 test    esi, esi
.text:004080F2                 jle     loc_408233
.text:004080F8                 cmp     word ptr [ebp+var_34], 0
.text:004080FD                 jnz     loc_408233
.text:00408103
.text:00408103 loc_408103:                             ; CODE XREF: ___asctoe64+5AD↓j
.text:00408103                 mov     [ebp+var_48], 0
.text:00408109                 mov     esi, [ebp+var_34]
.text:0040810C                 mov     ecx, [ebp+var_30]
.text:0040810F                 mov     ebx, [ebp+var_2C]
.text:00408112                 mov     edx, [ebp+var_38]
.text:00408115                 mov     [ebp+var_54], esi
.text:00408118                 xor     esi, esi
.text:0040811A                 mov     [ebp+var_50], ecx
.text:0040811D                 lea     ecx, [ebp+var_48]
.text:00408120                 mov     [ebp+var_4C], ebx
.text:00408123                 mov     ebx, 6
.text:00408128                 mov     [ebp+var_58], edx
.text:0040812B                 nop
.text:0040812C                 lea     esi, [esi+0]
.text:00408130
.text:00408130 loc_408130:                             ; CODE XREF: ___asctoe64+4E1↓j
.text:00408130                 movzx   edx, word ptr [ecx]
.text:00408133                 mov     eax, edx
.text:00408135                 and     eax, 0FFFF8000h
.text:0040813A                 test    ax, ax
.text:0040813D                 jz      short loc_408142
.text:0040813F                 or      esi, 1
.text:00408142
.text:00408142 loc_408142:                             ; CODE XREF: ___asctoe64+4BD↑j
.text:00408142                 mov     eax, esi
.text:00408144                 and     eax, 2
.text:00408147                 add     edx, edx
.text:00408149                 test    ax, ax
.text:0040814C                 mov     [ecx], dx
.text:0040814F                 jz      short loc_408157
.text:00408151                 or      edx, 1
.text:00408154                 mov     [ecx], dx
.text:00408157
.text:00408157 loc_408157:                             ; CODE XREF: ___asctoe64+4CF↑j
.text:00408157                 lea     edx, [esi+esi]
.text:0040815A                 sub     ecx, 2
.text:0040815D                 dec     ebx
.text:0040815E                 movzx   esi, dx
.text:00408161                 jns     short loc_408130
.text:00408163                 lea     ecx, [ebp+var_48]
.text:00408166                 xor     esi, esi
.text:00408168                 mov     ebx, 6
.text:0040816D                 lea     esi, [esi+0]
.text:00408170
.text:00408170 loc_408170:                             ; CODE XREF: ___asctoe64+521↓j
.text:00408170                 movzx   edx, word ptr [ecx]
.text:00408173                 mov     eax, edx
.text:00408175                 and     eax, 0FFFF8000h
.text:0040817A                 test    ax, ax
.text:0040817D                 jz      short loc_408182
.text:0040817F                 or      esi, 1
.text:00408182
.text:00408182 loc_408182:                             ; CODE XREF: ___asctoe64+4FD↑j
.text:00408182                 mov     eax, esi
.text:00408184                 and     eax, 2
.text:00408187                 add     edx, edx
.text:00408189                 test    ax, ax
.text:0040818C                 mov     [ecx], dx
.text:0040818F                 jz      short loc_408197
.text:00408191                 or      edx, 1
.text:00408194                 mov     [ecx], dx
.text:00408197
.text:00408197 loc_408197:                             ; CODE XREF: ___asctoe64+50F↑j
.text:00408197                 lea     edx, [esi+esi]
.text:0040819A                 sub     ecx, 2
.text:0040819D                 dec     ebx
.text:0040819E                 movzx   esi, dx
.text:004081A1                 jns     short loc_408170
.text:004081A3                 lea     ebx, [ebp+var_58]
.text:004081A6                 xor     esi, esi
.text:004081A8                 lea     eax, [ebp+var_38]
.text:004081AB                 mov     [esp+0D8h+Type], ebx
.text:004081AF                 mov     ebx, 6
.text:004081B4                 mov     [esp+0D8h+Str], eax
.text:004081B7                 call    sub_409AB0
.text:004081BC                 lea     ecx, [ebp+var_48]
.text:004081BF                 nop
.text:004081C0
.text:004081C0 loc_4081C0:                             ; CODE XREF: ___asctoe64+571↓j
.text:004081C0                 movzx   edx, word ptr [ecx]
.text:004081C3                 mov     eax, edx
.text:004081C5                 and     eax, 0FFFF8000h
.text:004081CA                 test    ax, ax
.text:004081CD                 jz      short loc_4081D2
.text:004081CF                 or      esi, 1
.text:004081D2
.text:004081D2 loc_4081D2:                             ; CODE XREF: ___asctoe64+54D↑j
.text:004081D2                 mov     eax, esi
.text:004081D4                 and     eax, 2
.text:004081D7                 add     edx, edx
.text:004081D9                 test    ax, ax
.text:004081DC                 mov     [ecx], dx
.text:004081DF                 jz      short loc_4081E7
.text:004081E1                 or      edx, 1
.text:004081E4                 mov     [ecx], dx
.text:004081E7
.text:004081E7 loc_4081E7:                             ; CODE XREF: ___asctoe64+55F↑j
.text:004081E7                 lea     edx, [esi+esi]
.text:004081EA                 sub     ecx, 2
.text:004081ED                 dec     ebx
.text:004081EE                 movzx   esi, dx
.text:004081F1                 jns     short loc_4081C0
.text:004081F3                 cmp     word ptr [ebp+var_54], 0
.text:004081F8                 jnz     short loc_408233
.text:004081FA                 dec     [ebp+var_84]
.text:00408200                 mov     esi, [ebp+var_58]
.text:00408203                 mov     [ebp+var_28], 0
.text:00408209                 mov     edx, [ebp+var_54]
.text:0040820C                 mov     ebx, [ebp+var_50]
.text:0040820F                 mov     [ebp+var_38], esi
.text:00408212                 mov     esi, [ebp+var_84]
.text:00408218                 mov     [ebp+var_34], edx
.text:0040821B                 mov     ecx, [ebp+var_4C]
.text:0040821E                 mov     [ebp+var_30], ebx
.text:00408221                 test    esi, esi
.text:00408223                 mov     [ebp+var_2C], ecx
.text:00408226                 jle     short loc_408233
.text:00408228                 cmp     word ptr [ebp+var_34], 0
.text:0040822D                 jz      loc_408103
.text:00408233
.text:00408233 loc_408233:                             ; CODE XREF: ___asctoe64+472↑j
.text:00408233                                         ; ___asctoe64+47D↑j ...
.text:00408233                 lea     ecx, [ebp+var_38]
.text:00408236                 mov     [esp+0D8h+Str], ecx
.text:00408239                 call    sub_4097D0
.text:0040823E                 mov     [ebp+var_90], eax
.text:00408244                 cmp     eax, 50h ; 'P'
.text:00408247                 jle     short loc_408270
.text:00408249
.text:00408249 loc_408249:                             ; CODE XREF: ___asctoe64+899↓j
.text:00408249                 mov     [ebp+var_38], 0
.text:00408250                 mov     [ebp+var_34], 0
.text:00408257                 mov     [ebp+var_30], 0
.text:0040825E                 mov     [ebp+var_2C], 0
.text:00408265                 mov     [ebp+var_28], 0
.text:0040826B                 jmp     loc_407DEA
.text:00408270 ; ---------------------------------------------------------------------------
.text:00408270
.text:00408270 loc_408270:                             ; CODE XREF: ___asctoe64+5C7↑j
.text:00408270                 mov     [esp+0D8h+var_C4], 50h ; 'P'
.text:00408278                 mov     ebx, [ebp+var_90]
.text:0040827E                 mov     ecx, 404Eh
.text:00408283                 mov     [esp+0D8h+var_C8], 40h ; '@'
.text:0040828B                 mov     eax, [ebp+var_8C]
.text:00408291                 lea     esi, [ebp+var_38]
.text:00408294                 mov     [esp+0D8h+Str], esi
.text:00408297                 sub     ecx, ebx
.text:00408299                 mov     [esp+0D8h+var_CC], ecx
.text:0040829D                 mov     [esp+0D8h+MaxCount], 0
.text:004082A5                 mov     [esp+0D8h+Type], eax
.text:004082A9                 call    ___emdnorm
.text:004082AE                 mov     ebx, [ebp+var_84]
.text:004082B4                 xor     edx, edx
.text:004082B6                 movzx   esi, word ptr [ebp+var_38+2]
.text:004082BA                 mov     [ebp+var_90], edx
.text:004082C0                 test    ebx, ebx
.text:004082C2                 jz      loc_40836C
.text:004082C8                 mov     [ebp+var_7C], 1
.text:004082CF                 mov     edx, [ebp+var_84]
.text:004082D5                 test    edx, edx
.text:004082D7                 js      loc_4083E0
.text:004082DD
.text:004082DD loc_4082DD:                             ; CODE XREF: ___asctoe64+777↓j
.text:004082DD                                         ; ___asctoe64+7B8↓j
.text:004082DD                 mov     ecx, ds:dword_407BB0
.text:004082E3                 mov     ebx, offset dword_407C60
.text:004082E8                 mov     edx, ds:dword_407BB4
.text:004082EE                 mov     [ebp+var_58], ecx
.text:004082F1                 mov     ecx, ds:dword_407BB8
.text:004082F7                 mov     [ebp+var_54], edx
.text:004082FA                 mov     edx, 1
.text:004082FF                 mov     [ebp+var_88], edx
.text:00408305                 mov     [ebp+var_50], ecx
.text:00408308
.text:00408308 loc_408308:                             ; CODE XREF: ___asctoe64+6AD↓j
.text:00408308                 mov     edx, [ebp+var_84]
.text:0040830E                 test    [ebp+var_88], edx
.text:00408314                 jnz     loc_4083C8
.text:0040831A
.text:0040831A loc_40831A:                             ; CODE XREF: ___asctoe64+75B↓j
.text:0040831A                 shl     [ebp+var_88], 1
.text:00408320                 sub     ebx, 0Ch
.text:00408323                 cmp     [ebp+var_88], 1000h
.text:0040832D                 jle     short loc_408308
.text:0040832F                 lea     ecx, [ebp+var_78]
.text:00408332                 lea     edx, [ebp+var_58]
.text:00408335                 mov     [esp+0D8h+Type], ecx
.text:00408339                 mov     [esp+0D8h+Str], edx
.text:0040833C                 call    sub_4085F0
.text:00408341                 mov     ebx, [ebp+var_7C]
.text:00408344                 test    ebx, ebx
.text:00408346                 js      short loc_4083A2
.text:00408348                 movzx   edx, [ebp+var_76]
.text:0040834C                 lea     ecx, [ebp+var_78]
.text:0040834F                 lea     ebx, [ebp+var_38]
.text:00408352                 mov     [esp+0D8h+Type], ebx
.text:00408356                 mov     [esp+0D8h+Str], ecx
.text:00408359                 add     esi, edx
.text:0040835B                 call    sub_4089E0
.text:00408360                 mov     [ebp+var_90], eax
.text:00408366                 sub     esi, 3FFEh
.text:0040836C
.text:0040836C loc_40836C:                             ; CODE XREF: ___asctoe64+642↑j
.text:0040836C                                         ; ___asctoe64+746↓j
.text:0040836C                 mov     [esp+0D8h+var_CC], esi
.text:00408370                 mov     eax, [ebp+var_90]
.text:00408376                 lea     esi, [ebp+var_38]
.text:00408379                 mov     [esp+0D8h+var_C4], 40h ; '@'
.text:00408381                 mov     [esp+0D8h+var_C8], 40h ; '@'
.text:00408389                 mov     [esp+0D8h+MaxCount], 0
.text:00408391                 mov     [esp+0D8h+Type], eax
.text:00408395                 mov     [esp+0D8h+Str], esi
.text:00408398                 call    ___emdnorm
.text:0040839D                 jmp     loc_407DEA
.text:004083A2 ; ---------------------------------------------------------------------------
.text:004083A2
.text:004083A2 loc_4083A2:                             ; CODE XREF: ___asctoe64+6C6↑j
.text:004083A2                 movzx   edx, [ebp+var_76]
.text:004083A6                 lea     eax, [ebp+var_38]
.text:004083A9                 lea     ebx, [ebp+var_78]
.text:004083AC                 mov     [esp+0D8h+Type], eax
.text:004083B0                 mov     [esp+0D8h+Str], ebx
.text:004083B3                 sub     esi, edx
.text:004083B5                 call    ___edivm
.text:004083BA                 mov     [ebp+var_90], eax
.text:004083C0                 add     esi, 3FFFh
.text:004083C6                 jmp     short loc_40836C
.text:004083C8 ; ---------------------------------------------------------------------------
.text:004083C8
.text:004083C8 loc_4083C8:                             ; CODE XREF: ___asctoe64+694↑j
.text:004083C8                 mov     [esp+0D8h+Str], ebx ; int
.text:004083CB                 lea     eax, [ebp+var_58]
.text:004083CE                 mov     [esp+0D8h+MaxCount], eax
.text:004083D2                 mov     [esp+0D8h+Type], eax ; int
.text:004083D6                 call    ___emul
.text:004083DB                 jmp     loc_40831A
.text:004083E0 ; ---------------------------------------------------------------------------
.text:004083E0
.text:004083E0 loc_4083E0:                             ; CODE XREF: ___asctoe64+657↑j
.text:004083E0                 neg     [ebp+var_84]
.text:004083E6                 mov     [ebp+var_7C], 0FFFFFFFFh
.text:004083ED                 cmp     [ebp+var_84], 1000h
.text:004083F7                 jle     loc_4082DD
.text:004083FD                 mov     [esp+0D8h+Str], offset dword_407BD0
.text:00408404                 lea     eax, [ebp+var_78]
.text:00408407                 mov     [esp+0D8h+Type], eax
.text:0040840B                 call    sub_4085F0
.text:00408410                 lea     eax, [ebp+var_78]
.text:00408413                 lea     ecx, [ebp+var_38]
.text:00408416                 movzx   ebx, [ebp+var_76]
.text:0040841A                 mov     [esp+0D8h+Type], ecx
.text:0040841E                 mov     [esp+0D8h+Str], eax
.text:00408421                 call    ___edivm
.text:00408426                 sub     [ebp+var_84], 1000h
.text:00408430                 sub     esi, ebx
.text:00408432                 add     esi, 3FFFh
.text:00408438                 jmp     loc_4082DD
.text:00408438 ; ---------------------------------------------------------------------------
.text:0040843D                 align 10h
.text:00408440
.text:00408440 loc_408440:                             ; CODE XREF: ___asctoe64+446↑j
.text:00408440                 cmp     dl, 45h ; 'E'
.text:00408443                 jz      short loc_40844E
.text:00408445                 cmp     dl, 65h ; 'e'
.text:00408448                 jnz     loc_4080DC
.text:0040844E
.text:0040844E loc_40844E:                             ; CODE XREF: ___asctoe64+7C3↑j
.text:0040844E                 mov     edx, [ebp+var_9C]
.text:00408454                 test    edx, edx
.text:00408456                 jnz     short loc_408466
.text:00408458                 mov     ecx, [ebp+var_94]
.text:0040845E                 test    ecx, ecx
.text:00408460                 jz      loc_4080DC
.text:00408466
.text:00408466 loc_408466:                             ; CODE XREF: ___asctoe64+7D6↑j
.text:00408466                 mov     [ebp+var_7C], 1
.text:0040846D                 xor     esi, esi
.text:0040846F                 inc     edi
.text:00408470                 mov     [ebp+var_88], esi
.text:00408476                 movzx   edx, byte ptr [edi]
.text:00408479                 cmp     dl, 2Dh ; '-'
.text:0040847C                 jz      loc_408535
.text:00408482
.text:00408482 loc_408482:                             ; CODE XREF: ___asctoe64+8C0↓j
.text:00408482                 cmp     dl, 2Bh ; '+'
.text:00408485                 jz      loc_40852C
.text:0040848B
.text:0040848B loc_40848B:                             ; CODE XREF: ___asctoe64+8B0↓j
.text:0040848B                 mov     bl, dl
.text:0040848D                 sub     bl, 30h ; '0'
.text:00408490                 cmp     bl, 9
.text:00408493                 mov     cl, dl
.text:00408495                 ja      short loc_4084C7
.text:00408497
.text:00408497 loc_408497:                             ; CODE XREF: ___asctoe64+845↓j
.text:00408497                 cmp     [ebp+var_88], 1371h
.text:004084A1                 jg      short loc_4084B9
.text:004084A3                 mov     edx, [ebp+var_88]
.text:004084A9                 movsx   esi, cl
.text:004084AC                 lea     ebx, [edx+edx*4]
.text:004084AF                 lea     ecx, [esi+ebx*2-30h]
.text:004084B3                 mov     [ebp+var_88], ecx
.text:004084B9
.text:004084B9 loc_4084B9:                             ; CODE XREF: ___asctoe64+821↑j
.text:004084B9                 inc     edi
.text:004084BA                 movzx   ecx, byte ptr [edi]
.text:004084BD                 mov     bl, cl
.text:004084BF                 sub     bl, 30h ; '0'
.text:004084C2                 cmp     bl, 9
.text:004084C5                 jbe     short loc_408497
.text:004084C7
.text:004084C7 loc_4084C7:                             ; CODE XREF: ___asctoe64+815↑j
.text:004084C7                 mov     ecx, [ebp+var_7C]
.text:004084CA                 test    ecx, ecx
.text:004084CC                 js      short loc_408524
.text:004084CE
.text:004084CE loc_4084CE:                             ; CODE XREF: ___asctoe64+8AA↓j
.text:004084CE                 cmp     [ebp+var_88], 1371h
.text:004084D8                 jle     short loc_40850F
.text:004084DA                 mov     [ebp+var_38], 0
.text:004084E1                 mov     eax, [ebp+var_98]
.text:004084E7                 mov     [ebp+var_34], 0
.text:004084EE                 mov     [ebp+var_30], 0
.text:004084F5                 test    eax, eax
.text:004084F7                 mov     [ebp+var_2C], 0
.text:004084FE                 mov     [ebp+var_28], 0
.text:00408504                 jz      loc_407DEA
.text:0040850A                 jmp     loc_407DE4
.text:0040850F ; ---------------------------------------------------------------------------
.text:0040850F
.text:0040850F loc_40850F:                             ; CODE XREF: ___asctoe64+858↑j
.text:0040850F                 cmp     [ebp+var_88], 0FFFFEC8Fh
.text:00408519                 jl      loc_408249
.text:0040851F                 jmp     loc_4080DC
.text:00408524 ; ---------------------------------------------------------------------------
.text:00408524
.text:00408524 loc_408524:                             ; CODE XREF: ___asctoe64+84C↑j
.text:00408524                 neg     [ebp+var_88]
.text:0040852A                 jmp     short loc_4084CE
.text:0040852C ; ---------------------------------------------------------------------------
.text:0040852C
.text:0040852C loc_40852C:                             ; CODE XREF: ___asctoe64+805↑j
.text:0040852C                 inc     edi
.text:0040852D                 movzx   edx, byte ptr [edi]
.text:00408530                 jmp     loc_40848B
.text:00408535 ; ---------------------------------------------------------------------------
.text:00408535
.text:00408535 loc_408535:                             ; CODE XREF: ___asctoe64+7FC↑j
.text:00408535                 mov     [ebp+var_7C], 0FFFFFFFFh
.text:0040853C                 inc     edi
.text:0040853D                 movzx   edx, byte ptr [edi]
.text:00408540                 jmp     loc_408482
.text:00408545 ; ---------------------------------------------------------------------------
.text:00408545
.text:00408545 loc_408545:                             ; CODE XREF: ___asctoe64+29A↑j
.text:00408545                 mov     edx, 1
.text:0040854A                 mov     [ebp+var_94], edx
.text:00408550
.text:00408550 loc_408550:                             ; CODE XREF: ___asctoe64+8D7↓j
.text:00408550                 inc     edi
.text:00408551                 movzx   edx, byte ptr [edi]
.text:00408554                 cmp     dl, 30h ; '0'
.text:00408557                 jz      short loc_408550
.text:00408559                 jmp     loc_407F20
.text:0040855E ; ---------------------------------------------------------------------------
.text:0040855E
.text:0040855E loc_40855E:                             ; CODE XREF: ___asctoe64+EF↑j
.text:0040855E                 mov     edi, [ebp+String2]
.text:00408564
.text:00408564 loc_408564:                             ; CODE XREF: ___asctoe64+8F5↓j
.text:00408564                 inc     edi
.text:00408565                 jmp     loc_407D75
.text:0040856A ; ---------------------------------------------------------------------------
.text:0040856A
.text:0040856A loc_40856A:                             ; CODE XREF: ___asctoe64+E7↑j
.text:0040856A                 mov     esi, 0FFFFh
.text:0040856F                 mov     [ebp+var_A0], esi
.text:00408575                 jmp     short loc_408564
.text:00408577 ; ---------------------------------------------------------------------------
.text:00408577
.text:00408577 loc_408577:                             ; CODE XREF: ___asctoe64+7C↑j
.text:00408577                 mov     ecx, ds:_pctype
.text:0040857D                 mov     ebx, [ecx]
.text:0040857F                 movzx   ecx, word ptr [ebx+edx*2]
.text:00408583                 and     ecx, 8
.text:00408586                 movzx   eax, cx
.text:00408589                 jmp     loc_407D12
.text:00408589 ___asctoe64     endp
.text:00408589
.text:00408589 ; ---------------------------------------------------------------------------
.text:0040858E                 align 10h
.text:00408590
.text:00408590 ; =============== S U B R O U T I N E =======================================
.text:00408590
.text:00408590
.text:00408590 ; int __cdecl sub_408590(char *, int)
.text:00408590 sub_408590      proc near               ; CODE XREF: sub_403C10+5A↑p
.text:00408590
.text:00408590 var_2C          = dword ptr -2Ch
.text:00408590 var_28          = dword ptr -28h
.text:00408590 var_1C          = tbyte ptr -1Ch
.text:00408590 var_8           = dword ptr -8
.text:00408590 var_4           = dword ptr -4
.text:00408590 arg_0           = dword ptr  4
.text:00408590 arg_4           = dword ptr  8
.text:00408590
.text:00408590                 sub     esp, 2Ch
.text:00408593                 lea     edx, [esp+2Ch+var_1C]
.text:00408597                 mov     [esp+2Ch+var_8], ebx
.text:0040859B                 mov     ebx, [esp+2Ch+arg_0]
.text:0040859F                 mov     [esp+2Ch+var_4], esi
.text:004085A3                 mov     esi, [esp+2Ch+arg_4]
.text:004085A7                 mov     dword ptr [esp+2Ch+var_1C], 0
.text:004085AF                 mov     dword ptr [esp+2Ch+var_1C+4], 0
.text:004085B7                 mov     dword ptr [esp+2Ch+var_1C+8], 0
.text:004085BF                 mov     [esp+2Ch+var_28], edx ; int
.text:004085C3                 mov     [esp+2Ch+var_2C], ebx ; char *
.text:004085C6                 call    ___asctoe64
.text:004085CB                 test    esi, esi
.text:004085CD                 jz      short loc_4085D4
.text:004085CF                 lea     edx, [eax+ebx]
.text:004085D2                 mov     [esi], edx
.text:004085D4
.text:004085D4 loc_4085D4:                             ; CODE XREF: sub_408590+3D↑j
.text:004085D4                 fld     [esp+2Ch+var_1C]
.text:004085D8                 mov     ebx, [esp+2Ch+var_8]
.text:004085DC                 mov     esi, [esp+2Ch+var_4]
.text:004085E0                 add     esp, 2Ch
.text:004085E3                 retn
.text:004085E3 sub_408590      endp
.text:004085E3
.text:004085E3 ; ---------------------------------------------------------------------------
.text:004085E4                 align 10h
.text:004085F0
.text:004085F0 ; =============== S U B R O U T I N E =======================================
.text:004085F0
.text:004085F0
.text:004085F0 sub_4085F0      proc near               ; CODE XREF: ___asctoe64+6BC↑p
.text:004085F0                                         ; ___asctoe64+78B↑p ...
.text:004085F0
.text:004085F0 arg_0           = dword ptr  4
.text:004085F0 arg_4           = dword ptr  8
.text:004085F0
.text:004085F0                 push    esi
.text:004085F1                 push    ebx
.text:004085F2                 mov     ecx, [esp+8+arg_0]
.text:004085F6                 mov     edx, [esp+8+arg_4]
.text:004085FA                 movzx   esi, word ptr [ecx+0Ah]
.text:004085FE                 lea     ebx, [ecx+0Ah]
.text:00408601                 and     esi, 0FFFF8000h
.text:00408607                 test    si, si
.text:0040860A                 jz      loc_4086E0
.text:00408610                 mov     word ptr [edx], 0FFFFh
.text:00408615
.text:00408615 loc_408615:                             ; CODE XREF: sub_4085F0+F5↓j
.text:00408615                 movzx   esi, word ptr [ebx]
.text:00408618                 add     edx, 2
.text:0040861B                 sub     ebx, 2
.text:0040861E                 and     esi, 7FFFh
.text:00408624                 mov     [edx], si
.text:00408627                 add     edx, 2
.text:0040862A                 movzx   esi, word ptr [edx-2]
.text:0040862E                 and     esi, 7FFFh
.text:00408634                 cmp     si, 7FFFh
.text:00408639                 jz      short loc_40865F
.text:0040863B                 mov     word ptr [edx], 0
.text:00408640                 mov     ecx, 4
.text:00408645                 add     edx, 2
.text:00408648
.text:00408648 loc_408648:                             ; CODE XREF: sub_4085F0+65↓j
.text:00408648                 movzx   esi, word ptr [ebx]
.text:0040864B                 sub     ebx, 2
.text:0040864E                 mov     [edx], si
.text:00408651                 add     edx, 2
.text:00408654                 dec     ecx
.text:00408655                 jns     short loc_408648
.text:00408657                 mov     word ptr [edx], 0
.text:0040865C
.text:0040865C loc_40865C:                             ; CODE XREF: sub_4085F0+B2↓j
.text:0040865C                                         ; sub_4085F0+CE↓j
.text:0040865C                 pop     ebx
.text:0040865D                 pop     esi
.text:0040865E                 retn
.text:0040865F ; ---------------------------------------------------------------------------
.text:0040865F
.text:0040865F loc_40865F:                             ; CODE XREF: sub_4085F0+49↑j
.text:0040865F                 movzx   esi, word ptr [ecx+0Ah]
.text:00408663                 and     esi, 7FFFh
.text:00408669                 cmp     si, 7FFFh
.text:0040866E                 jz      short loc_4086C0
.text:00408670
.text:00408670 loc_408670:                             ; CODE XREF: sub_4085F0+E3↓j
.text:00408670                 xor     eax, eax
.text:00408672
.text:00408672 loc_408672:                             ; CODE XREF: sub_4085F0+EA↓j
.text:00408672                 test    eax, eax
.text:00408674                 jz      short loc_4086A4
.text:00408676                 mov     word ptr [edx], 0
.text:0040867B                 mov     ecx, 3
.text:00408680                 add     edx, 2
.text:00408683                 lea     esi, [esi+0]
.text:00408689                 lea     edi, [edi+0]
.text:00408690
.text:00408690 loc_408690:                             ; CODE XREF: sub_4085F0+B0↓j
.text:00408690                 movzx   esi, word ptr [ebx]
.text:00408693                 inc     ecx
.text:00408694                 sub     ebx, 2
.text:00408697                 mov     [edx], si
.text:0040869A                 add     edx, 2
.text:0040869D                 cmp     ecx, 8
.text:004086A0                 jle     short loc_408690
.text:004086A2                 jmp     short loc_40865C
.text:004086A4 ; ---------------------------------------------------------------------------
.text:004086A4
.text:004086A4 loc_4086A4:                             ; CODE XREF: sub_4085F0+84↑j
.text:004086A4                 mov     ecx, 2
.text:004086A9                 lea     esi, [esi+0]
.text:004086B0
.text:004086B0 loc_4086B0:                             ; CODE XREF: sub_4085F0+CC↓j
.text:004086B0                 mov     word ptr [edx], 0
.text:004086B5                 inc     ecx
.text:004086B6                 add     edx, 2
.text:004086B9                 cmp     ecx, 8
.text:004086BC                 jle     short loc_4086B0
.text:004086BE                 jmp     short loc_40865C
.text:004086C0 ; ---------------------------------------------------------------------------
.text:004086C0
.text:004086C0 loc_4086C0:                             ; CODE XREF: sub_4085F0+7E↑j
.text:004086C0                 xor     esi, esi
.text:004086C2
.text:004086C2 loc_4086C2:                             ; CODE XREF: sub_4085F0+E1↓j
.text:004086C2                 movzx   eax, word ptr [ecx]
.text:004086C5                 add     ecx, 2
.text:004086C8                 test    ax, ax
.text:004086CB                 jnz     short loc_4086D5
.text:004086CD                 inc     esi
.text:004086CE                 cmp     esi, 4
.text:004086D1                 jle     short loc_4086C2
.text:004086D3                 jmp     short loc_408670
.text:004086D5 ; ---------------------------------------------------------------------------
.text:004086D5
.text:004086D5 loc_4086D5:                             ; CODE XREF: sub_4085F0+DB↑j
.text:004086D5                 mov     eax, 1
.text:004086DA                 jmp     short loc_408672
.text:004086DA ; ---------------------------------------------------------------------------
.text:004086DC                 align 10h
.text:004086E0
.text:004086E0 loc_4086E0:                             ; CODE XREF: sub_4085F0+1A↑j
.text:004086E0                 mov     word ptr [edx], 0
.text:004086E5                 jmp     loc_408615
.text:004086E5 sub_4085F0      endp
.text:004086E5
.text:004086E5 ; ---------------------------------------------------------------------------
.text:004086EA                 align 10h
.text:004086F0
.text:004086F0 ; =============== S U B R O U T I N E =======================================
.text:004086F0
.text:004086F0 ; Attributes: info_from_lumina
.text:004086F0
.text:004086F0 ___edivm        proc near               ; CODE XREF: ___asctoe64+735↑p
.text:004086F0                                         ; ___asctoe64+7A1↑p
.text:004086F0
.text:004086F0 var_8C          = dword ptr -8Ch
.text:004086F0 var_88          = dword ptr -88h
.text:004086F0 var_84          = dword ptr -84h
.text:004086F0 var_70          = dword ptr -70h
.text:004086F0 var_6C          = dword ptr -6Ch
.text:004086F0 var_68          = dword ptr -68h
.text:004086F0 var_64          = dword ptr -64h
.text:004086F0 var_60          = dword ptr -60h
.text:004086F0 var_5C          = dword ptr -5Ch
.text:004086F0 var_58          = byte ptr -58h
.text:004086F0 var_3C          = byte ptr -3Ch
.text:004086F0 var_38          = byte ptr -38h
.text:004086F0 var_2C          = byte ptr -2Ch
.text:004086F0 arg_0           = dword ptr  4
.text:004086F0 arg_4           = dword ptr  8
.text:004086F0
.text:004086F0                 push    ebp
.text:004086F1                 mov     ebp, 6
.text:004086F6                 push    edi
.text:004086F7                 push    esi
.text:004086F8                 push    ebx
.text:004086F9                 sub     esp, 7Ch
.text:004086FC                 mov     ebx, [esp+8Ch+arg_4]
.text:00408703                 movzx   edx, word ptr [ebx]
.text:00408706                 mov     word ptr [esp+8Ch+var_5C], dx
.text:0040870B                 lea     edx, [esp+8Ch+var_58]
.text:0040870F                 movzx   ecx, word ptr [ebx+2]
.text:00408713                 mov     word ptr [esp+8Ch+var_5C+2], cx
.text:00408718                 nop
.text:00408719                 lea     esi, [esi+0]
.text:00408720
.text:00408720 loc_408720:                             ; CODE XREF: ___edivm+39↓j
.text:00408720                 mov     word ptr [edx], 0
.text:00408725                 add     edx, 2
.text:00408728                 dec     ebp
.text:00408729                 jns     short loc_408720
.text:0040872B                 mov     ecx, [esp+8Ch+arg_4]
.text:00408732                 xor     ebx, ebx
.text:00408734                 mov     esi, 6
.text:00408739                 add     ecx, 4
.text:0040873C                 mov     [esp+8Ch+var_6C], ecx
.text:00408740
.text:00408740 loc_408740:                             ; CODE XREF: ___edivm+85↓j
.text:00408740                 movzx   edx, word ptr [ecx]
.text:00408743                 mov     edi, edx
.text:00408745                 and     edi, 1
.text:00408748                 test    di, di
.text:0040874B                 jz      short loc_408750
.text:0040874D                 or      ebx, 1
.text:00408750
.text:00408750 loc_408750:                             ; CODE XREF: ___edivm+5B↑j
.text:00408750                 mov     ebp, ebx
.text:00408752                 movzx   edx, dx
.text:00408755                 and     ebp, 2
.text:00408758                 shr     edx, 1
.text:0040875A                 test    bp, bp
.text:0040875D                 mov     [ecx], dx
.text:00408760                 jz      short loc_40876B
.text:00408762                 or      edx, 0FFFF8000h
.text:00408768                 mov     [ecx], dx
.text:0040876B
.text:0040876B loc_40876B:                             ; CODE XREF: ___edivm+70↑j
.text:0040876B                 lea     edx, [ebx+ebx]
.text:0040876E                 add     ecx, 2
.text:00408771                 dec     esi
.text:00408772                 movzx   ebx, dx
.text:00408775                 jns     short loc_408740
.text:00408777                 mov     ebx, [esp+8Ch+arg_0]
.text:0040877E                 mov     ebp, 2
.text:00408783                 mov     ecx, [esp+8Ch+arg_4]
.text:0040878A                 mov     eax, [esp+8Ch+arg_4]
.text:00408791                 movzx   esi, word ptr [ebx+6]
.text:00408795                 add     ecx, 10h
.text:00408798                 add     eax, 6
.text:0040879B                 mov     [esp+8Ch+var_68], ecx
.text:0040879F                 mov     [esp+8Ch+var_60], esi
.text:004087A3                 mov     [esp+8Ch+var_70], eax
.text:004087A7                 mov     esi, esi
.text:004087A9                 lea     edi, [edi+0]
.text:004087B0
.text:004087B0 loc_4087B0:                             ; CODE XREF: ___edivm+26D↓j
.text:004087B0                 mov     [esp+8Ch+var_64], 0FFFFh
.text:004087B8                 mov     edx, [esp+8Ch+arg_4]
.text:004087BF                 mov     edi, [esp+8Ch+var_60]
.text:004087C3                 mov     eax, [esp+8Ch+var_60]
.text:004087C7                 movzx   ebx, word ptr [edx+4]
.text:004087CB                 shl     edi, 10h
.text:004087CE                 sub     edi, eax
.text:004087D0                 movzx   esi, word ptr [edx+6]
.text:004087D4                 shl     ebx, 10h
.text:004087D7                 lea     edx, [esi+ebx]
.text:004087DA                 cmp     edi, edx
.text:004087DC                 jb      short loc_4087ED
.text:004087DE                 mov     eax, edx
.text:004087E0                 xor     edx, edx
.text:004087E2                 div     [esp+8Ch+var_60]
.text:004087E6                 movzx   ecx, ax
.text:004087E9                 mov     [esp+8Ch+var_64], ecx
.text:004087ED
.text:004087ED loc_4087ED:                             ; CODE XREF: ___edivm+EC↑j
.text:004087ED                 mov     eax, [esp+8Ch+arg_0]
.text:004087F4                 lea     esi, [esp+8Ch+var_3C]
.text:004087F8                 mov     edi, [esp+8Ch+var_64]
.text:004087FC                 mov     [esp+8Ch+var_84], esi
.text:00408800                 lea     ebx, [esp+8Ch+var_38]
.text:00408804                 mov     esi, 2
.text:00408809                 mov     [esp+8Ch+var_88], eax
.text:0040880D                 mov     [esp+8Ch+var_8C], edi
.text:00408810                 call    sub_409B50
.text:00408815                 mov     ecx, [esp+8Ch+var_6C]
.text:00408819
.text:00408819 loc_408819:                             ; CODE XREF: ___edivm+144↓j
.text:00408819                 movzx   edi, word ptr [ecx]
.text:0040881C                 add     ecx, 2
.text:0040881F                 movzx   edx, word ptr [ebx]
.text:00408822                 add     ebx, 2
.text:00408825                 cmp     dx, di
.text:00408828                 jnz     loc_4089C6
.text:0040882E                 inc     esi
.text:0040882F                 xor     eax, eax
.text:00408831                 cmp     esi, 8
.text:00408834                 jle     short loc_408819
.text:00408836
.text:00408836 loc_408836:                             ; CODE XREF: ___edivm+2E8↓j
.text:00408836                 test    eax, eax
.text:00408838                 jle     loc_4088F1
.text:0040883E                 mov     edx, [esp+8Ch+var_64]
.text:00408842                 lea     ecx, [esp+8Ch+var_2C]
.text:00408846                 mov     esi, 6
.text:0040884B                 mov     ebx, [esp+8Ch+arg_0]
.text:00408852                 dec     edx
.text:00408853                 movzx   edi, dx
.text:00408856                 mov     [esp+8Ch+var_64], edi
.text:0040885A                 add     ebx, 10h
.text:0040885D                 xor     edi, edi
.text:0040885F                 nop
.text:00408860
.text:00408860 loc_408860:                             ; CODE XREF: ___edivm+18F↓j
.text:00408860                 movzx   edx, word ptr [ebx]
.text:00408863                 movzx   eax, word ptr [ecx]
.text:00408866                 sub     eax, edx
.text:00408868                 sub     eax, edi
.text:0040886A                 mov     [ecx], ax
.text:0040886D                 test    eax, 10000h
.text:00408872                 setnz   dl
.text:00408875                 sub     ecx, 2
.text:00408878                 sub     ebx, 2
.text:0040887B                 dec     esi
.text:0040887C                 movzx   edi, dl
.text:0040887F                 jns     short loc_408860
.text:00408881                 mov     ecx, [esp+8Ch+var_6C]
.text:00408885                 lea     ebx, [esp+8Ch+var_38]
.text:00408889                 mov     esi, 2
.text:0040888E
.text:0040888E loc_40888E:                             ; CODE XREF: ___edivm+1B9↓j
.text:0040888E                 movzx   edi, word ptr [ecx]
.text:00408891                 add     ecx, 2
.text:00408894                 movzx   edx, word ptr [ebx]
.text:00408897                 add     ebx, 2
.text:0040889A                 cmp     dx, di
.text:0040889D                 jnz     loc_4089AF
.text:004088A3                 inc     esi
.text:004088A4                 xor     eax, eax
.text:004088A6                 cmp     esi, 8
.text:004088A9                 jle     short loc_40888E
.text:004088AB
.text:004088AB loc_4088AB:                             ; CODE XREF: ___edivm+2D1↓j
.text:004088AB                 test    eax, eax
.text:004088AD                 jle     short loc_4088F1
.text:004088AF                 mov     edx, [esp+8Ch+var_64]
.text:004088B3                 lea     ecx, [esp+8Ch+var_2C]
.text:004088B7                 mov     esi, 6
.text:004088BC                 mov     ebx, [esp+8Ch+arg_0]
.text:004088C3                 dec     edx
.text:004088C4                 movzx   edi, dx
.text:004088C7                 mov     [esp+8Ch+var_64], edi
.text:004088CB                 add     ebx, 10h
.text:004088CE                 xor     edi, edi
.text:004088D0
.text:004088D0 loc_4088D0:                             ; CODE XREF: ___edivm+1FF↓j
.text:004088D0                 movzx   edx, word ptr [ebx]
.text:004088D3                 movzx   eax, word ptr [ecx]
.text:004088D6                 sub     eax, edx
.text:004088D8                 sub     eax, edi
.text:004088DA                 mov     [ecx], ax
.text:004088DD                 test    eax, 10000h
.text:004088E2                 setnz   dl
.text:004088E5                 sub     ecx, 2
.text:004088E8                 sub     ebx, 2
.text:004088EB                 dec     esi
.text:004088EC                 movzx   edi, dl
.text:004088EF                 jns     short loc_4088D0
.text:004088F1
.text:004088F1 loc_4088F1:                             ; CODE XREF: ___edivm+148↑j
.text:004088F1                                         ; ___edivm+1BD↑j
.text:004088F1                 mov     ecx, [esp+8Ch+var_68]
.text:004088F5                 lea     ebx, [esp+8Ch+var_2C]
.text:004088F9                 xor     edi, edi
.text:004088FB                 mov     esi, 6
.text:00408900
.text:00408900 loc_408900:                             ; CODE XREF: ___edivm+22F↓j
.text:00408900                 movzx   edx, word ptr [ebx]
.text:00408903                 movzx   eax, word ptr [ecx]
.text:00408906                 sub     eax, edx
.text:00408908                 sub     eax, edi
.text:0040890A                 mov     [ecx], ax
.text:0040890D                 test    eax, 10000h
.text:00408912                 setnz   dl
.text:00408915                 sub     ecx, 2
.text:00408918                 sub     ebx, 2
.text:0040891B                 dec     esi
.text:0040891C                 movzx   edi, dl
.text:0040891F                 jns     short loc_408900
.text:00408921                 mov     ebx, [esp+8Ch+var_64]
.text:00408925                 mov     ecx, [esp+8Ch+var_6C]
.text:00408929                 mov     edx, [esp+8Ch+var_70]
.text:0040892D                 mov     word ptr [esp+ebp*2+8Ch+var_5C], bx
.text:00408932                 mov     ebx, 5
.text:00408937                 mov     esi, esi
.text:00408939                 lea     edi, [edi+0]
.text:00408940
.text:00408940 loc_408940:                             ; CODE XREF: ___edivm+25D↓j
.text:00408940                 movzx   esi, word ptr [edx]
.text:00408943                 add     edx, 2
.text:00408946                 mov     [ecx], si
.text:00408949                 add     ecx, 2
.text:0040894C                 dec     ebx
.text:0040894D                 jns     short loc_408940
.text:0040894F                 mov     edx, [esp+8Ch+var_6C]
.text:00408953                 inc     ebp
.text:00408954                 cmp     ebp, 8
.text:00408957                 mov     word ptr [edx+0Ch], 0
.text:0040895D                 jle     loc_4087B0
.text:00408963                 xor     ecx, ecx
.text:00408965                 mov     ebp, 6
.text:0040896A                 lea     esi, [esi+0]
.text:00408970
.text:00408970 loc_408970:                             ; CODE XREF: ___edivm+289↓j
.text:00408970                 movzx   edi, word ptr [edx]
.text:00408973                 add     edx, 2
.text:00408976                 or      ecx, edi
.text:00408978                 dec     ebp
.text:00408979                 jns     short loc_408970
.text:0040897B                 test    cx, cx
.text:0040897E                 jz      short loc_408985
.text:00408980                 mov     ecx, 1
.text:00408985
.text:00408985 loc_408985:                             ; CODE XREF: ___edivm+28E↑j
.text:00408985                 xor     ebp, ebp
.text:00408987                 mov     esi, esi
.text:00408989                 lea     edi, [edi+0]
.text:00408990
.text:00408990 loc_408990:                             ; CODE XREF: ___edivm+2B3↓j
.text:00408990                 mov     edx, [esp+ebp*2+8Ch+var_5C]
.text:00408994                 mov     ebx, [esp+8Ch+arg_4]
.text:0040899B                 mov     [ebx+ebp*2], dx
.text:0040899F                 inc     ebp
.text:004089A0                 cmp     ebp, 8
.text:004089A3                 jle     short loc_408990
.text:004089A5                 add     esp, 7Ch
.text:004089A8                 mov     eax, ecx
.text:004089AA                 pop     ebx
.text:004089AB                 pop     esi
.text:004089AC                 pop     edi
.text:004089AD                 pop     ebp
.text:004089AE                 retn
.text:004089AF ; ---------------------------------------------------------------------------
.text:004089AF
.text:004089AF loc_4089AF:                             ; CODE XREF: ___edivm+1AD↑j
.text:004089AF                 movzx   esi, word ptr [ecx-2]
.text:004089B3                 cmp     [ebx-2], si
.text:004089B7                 setnbe  cl
.text:004089BA                 movzx   ebx, cl
.text:004089BD                 lea     eax, [ebx+ebx-1]
.text:004089C1                 jmp     loc_4088AB
.text:004089C6 ; ---------------------------------------------------------------------------
.text:004089C6
.text:004089C6 loc_4089C6:                             ; CODE XREF: ___edivm+138↑j
.text:004089C6                 movzx   esi, word ptr [ecx-2]
.text:004089CA                 cmp     [ebx-2], si
.text:004089CE                 setnbe  cl
.text:004089D1                 movzx   ebx, cl
.text:004089D4                 lea     eax, [ebx+ebx-1]
.text:004089D8                 jmp     loc_408836
.text:004089D8 ___edivm        endp
.text:004089D8
.text:004089D8 ; ---------------------------------------------------------------------------
.text:004089DD                 align 10h
.text:004089E0
.text:004089E0 ; =============== S U B R O U T I N E =======================================
.text:004089E0
.text:004089E0
.text:004089E0 sub_4089E0      proc near               ; CODE XREF: ___asctoe64+6DB↑p
.text:004089E0                                         ; ___emul+2DB↓p
.text:004089E0
.text:004089E0 var_7C          = dword ptr -7Ch
.text:004089E0 var_78          = dword ptr -78h
.text:004089E0 var_74          = dword ptr -74h
.text:004089E0 var_64          = dword ptr -64h
.text:004089E0 var_60          = dword ptr -60h
.text:004089E0 var_5C          = word ptr -5Ch
.text:004089E0 var_5A          = word ptr -5Ah
.text:004089E0 var_58          = word ptr -58h
.text:004089E0 var_4C          = word ptr -4Ch
.text:004089E0 var_4A          = byte ptr -4Ah
.text:004089E0 var_3C          = byte ptr -3Ch
.text:004089E0 var_2C          = byte ptr -2Ch
.text:004089E0 arg_0           = dword ptr  4
.text:004089E0 arg_4           = dword ptr  8
.text:004089E0
.text:004089E0                 push    ebp
.text:004089E1                 push    edi
.text:004089E2                 mov     edi, 2
.text:004089E7                 push    esi
.text:004089E8                 push    ebx
.text:004089E9                 sub     esp, 6Ch
.text:004089EC                 mov     ebx, [esp+7Ch+arg_4]
.text:004089F3                 movzx   edx, word ptr [ebx]
.text:004089F6                 mov     [esp+7Ch+var_5C], dx
.text:004089FB                 movzx   ecx, word ptr [ebx+2]
.text:004089FF                 mov     [esp+7Ch+var_5A], cx
.text:00408A04                 lea     esi, [esi+0]
.text:00408A0A                 lea     edi, [edi+0]
.text:00408A10
.text:00408A10 loc_408A10:                             ; CODE XREF: sub_4089E0+3B↓j
.text:00408A10                 mov     [esp+edi*2+7Ch+var_5C], 0
.text:00408A17                 inc     edi
.text:00408A18                 cmp     edi, 8
.text:00408A1B                 jle     short loc_408A10
.text:00408A1D                 mov     [esp+7Ch+var_64], 0
.text:00408A25                 mov     ecx, [esp+7Ch+arg_0]
.text:00408A2C                 mov     edi, 3
.text:00408A31                 add     ecx, 10h
.text:00408A34                 mov     [esp+7Ch+var_60], ecx
.text:00408A38                 nop
.text:00408A39                 lea     esi, [esi+0]
.text:00408A40
.text:00408A40 loc_408A40:                             ; CODE XREF: sub_4089E0+AA↓j
.text:00408A40                 mov     edx, [esp+7Ch+var_60]
.text:00408A44                 movzx   eax, word ptr [edx]
.text:00408A47                 test    ax, ax
.text:00408A4A                 jnz     short loc_408AB2
.text:00408A4C                 sub     edx, 2
.text:00408A4F                 mov     [esp+7Ch+var_60], edx
.text:00408A53
.text:00408A53 loc_408A53:                             ; CODE XREF: sub_4089E0+131↓j
.text:00408A53                 movzx   edx, [esp+7Ch+var_4C]
.text:00408A58                 lea     ecx, [esp+7Ch+var_4C]
.text:00408A5C                 mov     ebx, 5
.text:00408A61                 or      [esp+7Ch+var_64], edx
.text:00408A65                 lea     edx, [esp+7Ch+var_4A]
.text:00408A69                 lea     esi, [esi+0]
.text:00408A70
.text:00408A70 loc_408A70:                             ; CODE XREF: sub_4089E0+9D↓j
.text:00408A70                 sub     ecx, 2
.text:00408A73                 sub     edx, 2
.text:00408A76                 dec     ebx
.text:00408A77                 movzx   esi, word ptr [ecx]
.text:00408A7A                 mov     [edx], si
.text:00408A7D                 jns     short loc_408A70
.text:00408A7F                 mov     [esp+7Ch+var_58], 0
.text:00408A86                 inc     edi
.text:00408A87                 cmp     edi, 8
.text:00408A8A                 jle     short loc_408A40
.text:00408A8C                 xor     edi, edi
.text:00408A8E                 mov     esi, esi
.text:00408A90
.text:00408A90 loc_408A90:                             ; CODE XREF: sub_4089E0+C4↓j
.text:00408A90                 movzx   ebp, [esp+edi*2+7Ch+var_5C]
.text:00408A95                 mov     ecx, [esp+7Ch+arg_4]
.text:00408A9C                 mov     [ecx+edi*2], bp
.text:00408AA0                 inc     edi
.text:00408AA1                 cmp     edi, 8
.text:00408AA4                 jle     short loc_408A90
.text:00408AA6                 mov     eax, [esp+7Ch+var_64]
.text:00408AAA                 add     esp, 6Ch
.text:00408AAD                 pop     ebx
.text:00408AAE                 pop     esi
.text:00408AAF                 pop     edi
.text:00408AB0                 pop     ebp
.text:00408AB1                 retn
.text:00408AB2 ; ---------------------------------------------------------------------------
.text:00408AB2
.text:00408AB2 loc_408AB2:                             ; CODE XREF: sub_4089E0+6A↑j
.text:00408AB2                 sub     [esp+7Ch+var_60], 2
.text:00408AB7                 movzx   esi, ax
.text:00408ABA                 mov     ebp, [esp+7Ch+arg_4]
.text:00408AC1                 mov     [esp+7Ch+var_7C], esi
.text:00408AC4                 lea     ebx, [esp+7Ch+var_3C]
.text:00408AC8                 lea     esi, [esp+7Ch+var_2C]
.text:00408ACC                 mov     [esp+7Ch+var_74], ebx
.text:00408AD0                 mov     ebx, 6
.text:00408AD5                 mov     [esp+7Ch+var_78], ebp
.text:00408AD9                 xor     ebp, ebp
.text:00408ADB                 call    sub_409B50
.text:00408AE0                 lea     ecx, [esp+7Ch+var_4C]
.text:00408AE4                 lea     esi, [esi+0]
.text:00408AEA                 lea     edi, [edi+0]
.text:00408AF0
.text:00408AF0 loc_408AF0:                             ; CODE XREF: sub_4089E0+12F↓j
.text:00408AF0                 movzx   edx, word ptr [ecx]
.text:00408AF3                 movzx   eax, word ptr [esi]
.text:00408AF6                 add     eax, edx
.text:00408AF8                 add     eax, ebp
.text:00408AFA                 mov     [ecx], ax
.text:00408AFD                 test    eax, 10000h
.text:00408B02                 setnz   dl
.text:00408B05                 sub     ecx, 2
.text:00408B08                 sub     esi, 2
.text:00408B0B                 dec     ebx
.text:00408B0C                 movzx   ebp, dl
.text:00408B0F                 jns     short loc_408AF0
.text:00408B11                 jmp     loc_408A53
.text:00408B11 sub_4089E0      endp
.text:00408B11
.text:00408B11 ; ---------------------------------------------------------------------------
.text:00408B16                 align 10h
.text:00408B20
.text:00408B20 ; =============== S U B R O U T I N E =======================================
.text:00408B20
.text:00408B20 ; Attributes: info_from_lumina
.text:00408B20
.text:00408B20 ___emdnorm      proc near               ; CODE XREF: ___asctoe64+629↑p
.text:00408B20                                         ; ___asctoe64+718↑p ...
.text:00408B20
.text:00408B20 var_5C          = dword ptr -5Ch
.text:00408B20 var_58          = dword ptr -58h
.text:00408B20 var_48          = dword ptr -48h
.text:00408B20 var_44          = dword ptr -44h
.text:00408B20 var_40          = dword ptr -40h
.text:00408B20 var_3C          = dword ptr -3Ch
.text:00408B20 var_38          = dword ptr -38h
.text:00408B20 var_34          = dword ptr -34h
.text:00408B20 var_30          = dword ptr -30h
.text:00408B20 var_2C          = word ptr -2Ch
.text:00408B20 arg_0           = dword ptr  4
.text:00408B20 arg_4           = dword ptr  8
.text:00408B20 arg_8           = dword ptr  0Ch
.text:00408B20 arg_C           = dword ptr  10h
.text:00408B20 arg_10          = dword ptr  14h
.text:00408B20 arg_14          = dword ptr  18h
.text:00408B20
.text:00408B20                 push    ebp
.text:00408B21                 push    edi
.text:00408B22                 push    esi
.text:00408B23                 push    ebx
.text:00408B24                 sub     esp, 4Ch
.text:00408B27                 mov     ebp, [esp+5Ch+arg_0]
.text:00408B2B                 mov     [esp+5Ch+var_30], 0
.text:00408B33                 mov     edi, [esp+5Ch+arg_C]
.text:00408B37                 mov     [esp+5Ch+var_40], 8
.text:00408B3F                 mov     [esp+5Ch+var_44], 7
.text:00408B47                 mov     [esp+5Ch+var_3C], 0
.text:00408B4F                 mov     [esp+5Ch+var_38], 0
.text:00408B57                 mov     [esp+5Ch+var_34], 0
.text:00408B5F                 mov     [esp+5Ch+var_2C], 0
.text:00408B66                 mov     word ptr [esp+5Ch+var_30+2], 1
.text:00408B6D                 mov     [esp+5Ch+var_5C], ebp
.text:00408B70                 call    sub_4097D0
.text:00408B75                 sub     edi, eax
.text:00408B77                 cmp     eax, 50h ; 'P'
.text:00408B7A                 jle     short loc_408B88
.text:00408B7C                 cmp     edi, 7FFEh
.text:00408B82                 jle     loc_408E04
.text:00408B88
.text:00408B88 loc_408B88:                             ; CODE XREF: ___emdnorm+5A↑j
.text:00408B88                 test    edi, edi
.text:00408B8A                 js      loc_408DFF
.text:00408B90
.text:00408B90 loc_408B90:                             ; CODE XREF: ___emdnorm+316↓j
.text:00408B90                                         ; ___emdnorm+324↓j
.text:00408B90                 mov     eax, [esp+5Ch+arg_10]
.text:00408B94                 test    eax, eax
.text:00408B96                 jz      loc_408CA8
.text:00408B9C                 cmp     [esp+5Ch+arg_14], 40h ; '@'
.text:00408BA1                 jz      loc_408DDC
.text:00408BA7
.text:00408BA7 loc_408BA7:                             ; CODE XREF: ___emdnorm+2DA↓j
.text:00408BA7                 test    edi, edi
.text:00408BA9                 jle     loc_408D7B
.text:00408BAF
.text:00408BAF loc_408BAF:                             ; CODE XREF: ___emdnorm+260↓j
.text:00408BAF                                         ; ___emdnorm+2B7↓j
.text:00408BAF                 cmp     [esp+5Ch+arg_14], 4Fh ; 'O'
.text:00408BB4                 mov     eax, [esp+5Ch+var_40]
.text:00408BB8                 movzx   edx, word ptr [ebp+eax*2+0]
.text:00408BBD                 jg      short loc_408BE8
.text:00408BBF                 inc     eax
.text:00408BC0                 cmp     eax, 8
.text:00408BC3                 jg      short loc_408BE8
.text:00408BC5                 lea     esi, [esi+0]
.text:00408BC9                 lea     edi, [edi+0]
.text:00408BD0
.text:00408BD0 loc_408BD0:                             ; CODE XREF: ___emdnorm+C6↓j
.text:00408BD0                 cmp     word ptr [ebp+eax*2+0], 0
.text:00408BD6                 jz      short loc_408BDB
.text:00408BD8                 or      edx, 1
.text:00408BDB
.text:00408BDB loc_408BDB:                             ; CODE XREF: ___emdnorm+B6↑j
.text:00408BDB                 mov     word ptr [ebp+eax*2+0], 0
.text:00408BE2                 inc     eax
.text:00408BE3                 cmp     eax, 8
.text:00408BE6                 jle     short loc_408BD0
.text:00408BE8
.text:00408BE8 loc_408BE8:                             ; CODE XREF: ___emdnorm+9D↑j
.text:00408BE8                                         ; ___emdnorm+A3↑j
.text:00408BE8                 mov     ebx, [esp+5Ch+var_40]
.text:00408BEC                 mov     ecx, edx
.text:00408BEE                 and     ecx, 0FFFF8000h
.text:00408BF4                 mov     word ptr [ebp+ebx*2+0], 0
.text:00408BFB                 test    cx, cx
.text:00408BFE                 jz      short loc_408C48
.text:00408C00                 cmp     dx, 8000h
.text:00408C05                 jz      loc_408D48
.text:00408C0B
.text:00408C0B loc_408C0B:                             ; CODE XREF: ___emdnorm+23F↓j
.text:00408C0B                                         ; ___emdnorm+256↓j
.text:00408C0B                 mov     [esp+5Ch+var_48], 0
.text:00408C13                 lea     esi, [esp+5Ch+var_2C]
.text:00408C17                 mov     ebx, 6
.text:00408C1C                 lea     ecx, [ebp+10h]
.text:00408C1F                 nop
.text:00408C20
.text:00408C20 loc_408C20:                             ; CODE XREF: ___emdnorm+126↓j
.text:00408C20                 movzx   edx, word ptr [ecx]
.text:00408C23                 movzx   eax, word ptr [esi]
.text:00408C26                 add     eax, edx
.text:00408C28                 mov     edx, [esp+5Ch+var_48]
.text:00408C2C                 add     eax, edx
.text:00408C2E                 xor     edx, edx
.text:00408C30                 test    eax, 10000h
.text:00408C35                 setnz   dl
.text:00408C38                 sub     esi, 2
.text:00408C3B                 mov     [ecx], ax
.text:00408C3E                 sub     ecx, 2
.text:00408C41                 dec     ebx
.text:00408C42                 mov     [esp+5Ch+var_48], edx
.text:00408C46                 jns     short loc_408C20
.text:00408C48
.text:00408C48 loc_408C48:                             ; CODE XREF: ___emdnorm+DE↑j
.text:00408C48                                         ; ___emdnorm+245↓j ...
.text:00408C48                 test    edi, edi
.text:00408C4A                 jle     loc_408CF7
.text:00408C50
.text:00408C50 loc_408C50:                             ; CODE XREF: ___emdnorm+1DC↓j
.text:00408C50                                         ; ___emdnorm+223↓j
.text:00408C50                 cmp     word ptr [ebp+4], 0
.text:00408C55                 jz      short loc_408CA8
.text:00408C57                 lea     ecx, [ebp+4]
.text:00408C5A                 xor     ebx, ebx
.text:00408C5C                 mov     esi, 6
.text:00408C61                 jmp     short loc_408C70
.text:00408C61 ; ---------------------------------------------------------------------------
.text:00408C63                 align 10h
.text:00408C70
.text:00408C70 loc_408C70:                             ; CODE XREF: ___emdnorm+141↑j
.text:00408C70                                         ; ___emdnorm+185↓j
.text:00408C70                 movzx   edx, word ptr [ecx]
.text:00408C73                 mov     eax, edx
.text:00408C75                 and     eax, 1
.text:00408C78                 test    ax, ax
.text:00408C7B                 jz      short loc_408C80
.text:00408C7D                 or      ebx, 1
.text:00408C80
.text:00408C80 loc_408C80:                             ; CODE XREF: ___emdnorm+15B↑j
.text:00408C80                 mov     eax, ebx
.text:00408C82                 movzx   edx, dx
.text:00408C85                 and     eax, 2
.text:00408C88                 shr     edx, 1
.text:00408C8A                 test    ax, ax
.text:00408C8D                 mov     [ecx], dx
.text:00408C90                 jz      short loc_408C9B
.text:00408C92                 or      edx, 0FFFF8000h
.text:00408C98                 mov     [ecx], dx
.text:00408C9B
.text:00408C9B loc_408C9B:                             ; CODE XREF: ___emdnorm+170↑j
.text:00408C9B                 lea     edx, [ebx+ebx]
.text:00408C9E                 add     ecx, 2
.text:00408CA1                 dec     esi
.text:00408CA2                 movzx   ebx, dx
.text:00408CA5                 jns     short loc_408C70
.text:00408CA7                 inc     edi
.text:00408CA8
.text:00408CA8 loc_408CA8:                             ; CODE XREF: ___emdnorm+76↑j
.text:00408CA8                                         ; ___emdnorm+135↑j
.text:00408CA8                 mov     word ptr [ebp+10h], 0
.text:00408CAE                 cmp     edi, 7FFEh
.text:00408CB4                 jle     short loc_408CE5
.text:00408CB6                 mov     word ptr [ebp+2], 7FFFh
.text:00408CBC                 mov     eax, 2
.text:00408CC1                 jmp     short loc_408CD0
.text:00408CC1 ; ---------------------------------------------------------------------------
.text:00408CC3                 align 10h
.text:00408CD0
.text:00408CD0 loc_408CD0:                             ; CODE XREF: ___emdnorm+1A1↑j
.text:00408CD0                                         ; ___emdnorm+1BB↓j
.text:00408CD0                 mov     word ptr [ebp+eax*2+0], 0
.text:00408CD7                 inc     eax
.text:00408CD8                 cmp     eax, 7
.text:00408CDB                 jle     short loc_408CD0
.text:00408CDD
.text:00408CDD loc_408CDD:                             ; CODE XREF: ___emdnorm+1CD↓j
.text:00408CDD                                         ; ___emdnorm+1D5↓j ...
.text:00408CDD                 add     esp, 4Ch
.text:00408CE0                 pop     ebx
.text:00408CE1                 pop     esi
.text:00408CE2                 pop     edi
.text:00408CE3                 pop     ebp
.text:00408CE4                 retn
.text:00408CE5 ; ---------------------------------------------------------------------------
.text:00408CE5
.text:00408CE5 loc_408CE5:                             ; CODE XREF: ___emdnorm+194↑j
.text:00408CE5                 test    edi, edi
.text:00408CE7                 js      short loc_408CEF
.text:00408CE9                 mov     [ebp+2], di
.text:00408CED                 jmp     short loc_408CDD
.text:00408CEF ; ---------------------------------------------------------------------------
.text:00408CEF
.text:00408CEF loc_408CEF:                             ; CODE XREF: ___emdnorm+1C7↑j
.text:00408CEF                 mov     word ptr [ebp+2], 0
.text:00408CF5                 jmp     short loc_408CDD
.text:00408CF7 ; ---------------------------------------------------------------------------
.text:00408CF7
.text:00408CF7 loc_408CF7:                             ; CODE XREF: ___emdnorm+12A↑j
.text:00408CF7                 cmp     [esp+5Ch+arg_14], 50h ; 'P'
.text:00408CFC                 jz      loc_408C50
.text:00408D02                 lea     ecx, [ebp+10h]
.text:00408D05                 xor     ebx, ebx
.text:00408D07                 mov     esi, 6
.text:00408D0C                 lea     esi, [esi+0]
.text:00408D10
.text:00408D10 loc_408D10:                             ; CODE XREF: ___emdnorm+221↓j
.text:00408D10                 movzx   edx, word ptr [ecx]
.text:00408D13                 mov     eax, edx
.text:00408D15                 and     eax, 0FFFF8000h
.text:00408D1A                 test    ax, ax
.text:00408D1D                 jz      short loc_408D22
.text:00408D1F                 or      ebx, 1
.text:00408D22
.text:00408D22 loc_408D22:                             ; CODE XREF: ___emdnorm+1FD↑j
.text:00408D22                 mov     eax, ebx
.text:00408D24                 and     eax, 2
.text:00408D27                 add     edx, edx
.text:00408D29                 test    ax, ax
.text:00408D2C                 mov     [ecx], dx
.text:00408D2F                 jz      short loc_408D37
.text:00408D31                 or      edx, 1
.text:00408D34                 mov     [ecx], dx
.text:00408D37
.text:00408D37 loc_408D37:                             ; CODE XREF: ___emdnorm+20F↑j
.text:00408D37                 lea     edx, [ebx+ebx]
.text:00408D3A                 sub     ecx, 2
.text:00408D3D                 dec     esi
.text:00408D3E                 movzx   ebx, dx
.text:00408D41                 jns     short loc_408D10
.text:00408D43                 jmp     loc_408C50
.text:00408D48 ; ---------------------------------------------------------------------------
.text:00408D48
.text:00408D48 loc_408D48:                             ; CODE XREF: ___emdnorm+E5↑j
.text:00408D48                 mov     esi, [esp+5Ch+arg_4]
.text:00408D4C                 test    esi, esi
.text:00408D4E                 jnz     short loc_408D6A
.text:00408D50                 mov     eax, [esp+5Ch+var_44]
.text:00408D54                 movzx   ecx, word ptr [ebp+eax*2+0]
.text:00408D59                 and     ecx, 1
.text:00408D5C                 test    cx, cx
.text:00408D5F                 jnz     loc_408C0B
.text:00408D65                 jmp     loc_408C48
.text:00408D6A ; ---------------------------------------------------------------------------
.text:00408D6A
.text:00408D6A loc_408D6A:                             ; CODE XREF: ___emdnorm+22E↑j
.text:00408D6A                 mov     edx, [esp+5Ch+arg_8]
.text:00408D6E                 test    edx, edx
.text:00408D70                 jnz     loc_408C48
.text:00408D76                 jmp     loc_408C0B
.text:00408D7B ; ---------------------------------------------------------------------------
.text:00408D7B
.text:00408D7B loc_408D7B:                             ; CODE XREF: ___emdnorm+89↑j
.text:00408D7B                 cmp     [esp+5Ch+arg_14], 50h ; 'P'
.text:00408D80                 jz      loc_408BAF
.text:00408D86                 mov     edx, [ebp+10h]
.text:00408D89                 lea     ecx, [ebp+4]
.text:00408D8C                 xor     ebx, ebx
.text:00408D8E                 mov     esi, 6
.text:00408D93                 and     edx, 1
.text:00408D96                 or      [esp+5Ch+arg_4], edx
.text:00408D9A                 lea     esi, [esi+0]
.text:00408DA0
.text:00408DA0 loc_408DA0:                             ; CODE XREF: ___emdnorm+2B5↓j
.text:00408DA0                 movzx   edx, word ptr [ecx]
.text:00408DA3                 mov     eax, edx
.text:00408DA5                 and     eax, 1
.text:00408DA8                 test    ax, ax
.text:00408DAB                 jz      short loc_408DB0
.text:00408DAD                 or      ebx, 1
.text:00408DB0
.text:00408DB0 loc_408DB0:                             ; CODE XREF: ___emdnorm+28B↑j
.text:00408DB0                 mov     eax, ebx
.text:00408DB2                 movzx   edx, dx
.text:00408DB5                 and     eax, 2
.text:00408DB8                 shr     edx, 1
.text:00408DBA                 test    ax, ax
.text:00408DBD                 mov     [ecx], dx
.text:00408DC0                 jz      short loc_408DCB
.text:00408DC2                 or      edx, 0FFFF8000h
.text:00408DC8                 mov     [ecx], dx
.text:00408DCB
.text:00408DCB loc_408DCB:                             ; CODE XREF: ___emdnorm+2A0↑j
.text:00408DCB                 lea     edx, [ebx+ebx]
.text:00408DCE                 add     ecx, 2
.text:00408DD1                 dec     esi
.text:00408DD2                 movzx   ebx, dx
.text:00408DD5                 jns     short loc_408DA0
.text:00408DD7                 jmp     loc_408BAF
.text:00408DDC ; ---------------------------------------------------------------------------
.text:00408DDC
.text:00408DDC loc_408DDC:                             ; CODE XREF: ___emdnorm+81↑j
.text:00408DDC                 mov     [esp+5Ch+var_40], 7
.text:00408DE4                 mov     [esp+5Ch+var_44], 6
.text:00408DEC                 mov     word ptr [esp+5Ch+var_30+2], 0
.text:00408DF3                 mov     word ptr [esp+5Ch+var_30], 1
.text:00408DFA                 jmp     loc_408BA7
.text:00408DFF ; ---------------------------------------------------------------------------
.text:00408DFF
.text:00408DFF loc_408DFF:                             ; CODE XREF: ___emdnorm+6A↑j
.text:00408DFF                 cmp     edi, 0FFFFFFAFh
.text:00408E02                 jg      short loc_408E28
.text:00408E04
.text:00408E04 loc_408E04:                             ; CODE XREF: ___emdnorm+62↑j
.text:00408E04                 mov     dword ptr [ebp+2], 0
.text:00408E0B                 lea     edx, [ebp+2]
.text:00408E0E                 mov     dword ptr [edx+4], 0
.text:00408E15                 mov     dword ptr [edx+8], 0
.text:00408E1C                 mov     dword ptr [edx+0Ch], 0
.text:00408E23                 jmp     loc_408CDD
.text:00408E28 ; ---------------------------------------------------------------------------
.text:00408E28
.text:00408E28 loc_408E28:                             ; CODE XREF: ___emdnorm+2E2↑j
.text:00408E28                 mov     [esp+5Ch+var_58], edi
.text:00408E2C                 mov     [esp+5Ch+var_5C], ebp
.text:00408E2F                 call    ___eshift
.text:00408E34                 test    eax, eax
.text:00408E36                 jz      loc_408B90
.text:00408E3C                 mov     [esp+5Ch+arg_4], 1
.text:00408E44                 jmp     loc_408B90
.text:00408E44 ___emdnorm      endp
.text:00408E44
.text:00408E44 ; ---------------------------------------------------------------------------
.text:00408E49                 align 10h
.text:00408E50
.text:00408E50 ; =============== S U B R O U T I N E =======================================
.text:00408E50
.text:00408E50 ; Attributes: info_from_lumina
.text:00408E50
.text:00408E50 ; __int64 __emul(int, int)
.text:00408E50 ___emul         proc near               ; CODE XREF: ___asctoe64+756↑p
.text:00408E50
.text:00408E50 var_8C          = dword ptr -8Ch
.text:00408E50 var_88          = dword ptr -88h
.text:00408E50 var_84          = dword ptr -84h
.text:00408E50 var_80          = dword ptr -80h
.text:00408E50 var_7C          = dword ptr -7Ch
.text:00408E50 var_78          = dword ptr -78h
.text:00408E50 var_6C          = dword ptr -6Ch
.text:00408E50 var_5C          = dword ptr -5Ch
.text:00408E50 var_3C          = word ptr -3Ch
.text:00408E50 var_3A          = word ptr -3Ah
.text:00408E50 arg_0           = dword ptr  4
.text:00408E50 arg_4           = dword ptr  8
.text:00408E50 arg_8           = dword ptr  0Ch
.text:00408E50
.text:00408E50                 push    ebp
.text:00408E51                 push    edi
.text:00408E52                 push    esi
.text:00408E53                 push    ebx
.text:00408E54                 sub     esp, 7Ch
.text:00408E57                 mov     ebx, [esp+8Ch+arg_0]
.text:00408E5E                 mov     edi, [esp+8Ch+arg_4]
.text:00408E65                 mov     ebp, [esp+8Ch+arg_8]
.text:00408E6C                 mov     edx, ebx
.text:00408E6E                 movzx   esi, word ptr [ebx+0Ah]
.text:00408E72                 mov     ecx, esi
.text:00408E74                 and     ecx, 7FFFh
.text:00408E7A                 cmp     cx, 7FFFh
.text:00408E7F                 jz      loc_409264
.text:00408E85
.text:00408E85 loc_408E85:                             ; CODE XREF: ___emul+427↓j
.text:00408E85                 xor     eax, eax
.text:00408E87
.text:00408E87 loc_408E87:                             ; CODE XREF: ___emul+431↓j
.text:00408E87                 test    eax, eax
.text:00408E89                 jz      short loc_408EA4
.text:00408E8B                 mov     ecx, [ebx]
.text:00408E8D                 mov     [ebp+0], ecx
.text:00408E90                 mov     edx, [ebx+4]
.text:00408E93                 mov     [ebp+4], edx
.text:00408E96                 mov     eax, [ebx+8]
.text:00408E99
.text:00408E99 loc_408E99:                             ; CODE XREF: ___emul+84↓j
.text:00408E99                 mov     [ebp+8], eax
.text:00408E9C
.text:00408E9C loc_408E9C:                             ; CODE XREF: ___emul+116↓j
.text:00408E9C                                         ; ___emul+1DD↓j ...
.text:00408E9C                 add     esp, 7Ch
.text:00408E9F                 pop     ebx
.text:00408EA0                 pop     esi
.text:00408EA1                 pop     edi
.text:00408EA2                 pop     ebp
.text:00408EA3                 retn
.text:00408EA4 ; ---------------------------------------------------------------------------
.text:00408EA4
.text:00408EA4 loc_408EA4:                             ; CODE XREF: ___emul+39↑j
.text:00408EA4                 movzx   ecx, word ptr [edi+0Ah]
.text:00408EA8                 mov     edx, edi
.text:00408EAA                 mov     word ptr [esp+8Ch+var_6C], cx
.text:00408EAF                 and     ecx, 7FFFh
.text:00408EB5                 cmp     cx, 7FFFh
.text:00408EBA                 jz      loc_409242
.text:00408EC0
.text:00408EC0 loc_408EC0:                             ; CODE XREF: ___emul+405↓j
.text:00408EC0                 xor     eax, eax
.text:00408EC2
.text:00408EC2 loc_408EC2:                             ; CODE XREF: ___emul+40F↓j
.text:00408EC2                 test    eax, eax
.text:00408EC4                 jz      short loc_408ED6
.text:00408EC6                 mov     esi, [edi]
.text:00408EC8                 mov     [ebp+0], esi
.text:00408ECB                 mov     ebx, [edi+4]
.text:00408ECE                 mov     [ebp+4], ebx
.text:00408ED1                 mov     eax, [edi+8]
.text:00408ED4                 jmp     short loc_408E99
.text:00408ED6 ; ---------------------------------------------------------------------------
.text:00408ED6
.text:00408ED6 loc_408ED6:                             ; CODE XREF: ___emul+74↑j
.text:00408ED6                 mov     edx, esi
.text:00408ED8                 and     edx, 7FFFh
.text:00408EDE                 cmp     dx, 7FFFh
.text:00408EE3                 jz      loc_409217
.text:00408EE9                 xor     eax, eax
.text:00408EEB
.text:00408EEB loc_408EEB:                             ; CODE XREF: ___emul+3E6↓j
.text:00408EEB                 test    eax, eax
.text:00408EED                 jz      short loc_408F0E
.text:00408EEF                 mov     eax, 1
.text:00408EF4
.text:00408EF4 loc_408EF4:                             ; CODE XREF: ___emul+B3↓j
.text:00408EF4                 cmp     word ptr [edi+eax*2], 0
.text:00408EF9                 jnz     loc_409210
.text:00408EFF                 inc     eax
.text:00408F00                 cmp     eax, 7
.text:00408F03                 jle     short loc_408EF4
.text:00408F05                 mov     eax, 1
.text:00408F0A
.text:00408F0A loc_408F0A:                             ; CODE XREF: ___emul+3C2↓j
.text:00408F0A                 test    eax, eax
.text:00408F0C                 jnz     short loc_408F48
.text:00408F0E
.text:00408F0E loc_408F0E:                             ; CODE XREF: ___emul+9D↑j
.text:00408F0E                 mov     edx, [esp+8Ch+var_6C]
.text:00408F12                 and     edx, 7FFFh
.text:00408F18                 cmp     dx, 7FFFh
.text:00408F1D                 jz      loc_4091E5
.text:00408F23                 xor     eax, eax
.text:00408F25
.text:00408F25 loc_408F25:                             ; CODE XREF: ___emul+3B4↓j
.text:00408F25                 test    eax, eax
.text:00408F27                 jz      short loc_408F70
.text:00408F29                 mov     eax, 1
.text:00408F2E
.text:00408F2E loc_408F2E:                             ; CODE XREF: ___emul+ED↓j
.text:00408F2E                 cmp     word ptr [ebx+eax*2], 0
.text:00408F33                 jnz     loc_4091DE
.text:00408F39                 inc     eax
.text:00408F3A                 cmp     eax, 7
.text:00408F3D                 jle     short loc_408F2E
.text:00408F3F                 mov     eax, 1
.text:00408F44
.text:00408F44 loc_408F44:                             ; CODE XREF: ___emul+390↓j
.text:00408F44                 test    eax, eax
.text:00408F46                 jz      short loc_408F70
.text:00408F48
.text:00408F48 loc_408F48:                             ; CODE XREF: ___emul+BC↑j
.text:00408F48                 mov     eax, ebp
.text:00408F4A                 mov     edx, 3
.text:00408F4F
.text:00408F4F loc_408F4F:                             ; CODE XREF: ___emul+108↓j
.text:00408F4F                 mov     word ptr [eax], 0
.text:00408F54                 add     eax, 2
.text:00408F57                 dec     edx
.text:00408F58                 jns     short loc_408F4F
.text:00408F5A                 mov     word ptr [ebp+8], 0C000h
.text:00408F60                 mov     word ptr [ebp+0Ah], 7FFFh
.text:00408F66                 jmp     loc_408E9C
.text:00408F66 ; ---------------------------------------------------------------------------
.text:00408F6B                 align 10h
.text:00408F70
.text:00408F70 loc_408F70:                             ; CODE XREF: ___emul+D7↑j
.text:00408F70                                         ; ___emul+F6↑j
.text:00408F70                 mov     edx, esi
.text:00408F72                 and     edx, 7FFFh
.text:00408F78                 cmp     dx, 7FFFh
.text:00408F7D                 jz      loc_4091B3
.text:00408F83                 xor     eax, eax
.text:00408F85
.text:00408F85 loc_408F85:                             ; CODE XREF: ___emul+382↓j
.text:00408F85                 test    eax, eax
.text:00408F87                 jnz     short loc_408FA8
.text:00408F89                 mov     edx, [esp+8Ch+var_6C]
.text:00408F8D                 and     edx, 7FFFh
.text:00408F93                 cmp     dx, 7FFFh
.text:00408F98                 jz      loc_409188
.text:00408F9E                 xor     eax, eax
.text:00408FA0
.text:00408FA0 loc_408FA0:                             ; CODE XREF: ___emul+357↓j
.text:00408FA0                 test    eax, eax
.text:00408FA2                 jz      loc_409078
.text:00408FA8
.text:00408FA8 loc_408FA8:                             ; CODE XREF: ___emul+137↑j
.text:00408FA8                 mov     edx, ebx
.text:00408FAA                 mov     ebx, esi
.text:00408FAC                 and     ebx, 7FFFh
.text:00408FB2                 cmp     bx, 7FFFh
.text:00408FB7                 jz      loc_409056
.text:00408FBD
.text:00408FBD loc_408FBD:                             ; CODE XREF: ___emul+219↓j
.text:00408FBD                 xor     eax, eax
.text:00408FBF
.text:00408FBF loc_408FBF:                             ; CODE XREF: ___emul+223↓j
.text:00408FBF                 xor     ebx, ebx
.text:00408FC1                 test    eax, eax
.text:00408FC3                 jnz     short loc_408FD5
.text:00408FC5                 mov     edx, esi
.text:00408FC7                 and     edx, 0FFFF8000h
.text:00408FCD                 xor     ebx, ebx
.text:00408FCF                 test    dx, dx
.text:00408FD2                 setnz   bl
.text:00408FD5
.text:00408FD5 loc_408FD5:                             ; CODE XREF: ___emul+173↑j
.text:00408FD5                 mov     edx, edi
.text:00408FD7                 mov     edi, [esp+8Ch+var_6C]
.text:00408FDB                 and     edi, 7FFFh
.text:00408FE1                 cmp     di, 7FFFh
.text:00408FE6                 jz      short loc_40903A
.text:00408FE8
.text:00408FE8 loc_408FE8:                             ; CODE XREF: ___emul+1FD↓j
.text:00408FE8                 xor     edx, edx
.text:00408FEA
.text:00408FEA loc_408FEA:                             ; CODE XREF: ___emul+204↓j
.text:00408FEA                 xor     eax, eax
.text:00408FEC                 test    edx, edx
.text:00408FEE                 jnz     short loc_409003
.text:00408FF0                 mov     edx, [esp+8Ch+var_6C]
.text:00408FF4                 and     edx, 0FFFF8000h
.text:00408FFA                 test    dx, dx
.text:00408FFD                 setnz   cl
.text:00409000                 movzx   eax, cl
.text:00409003
.text:00409003 loc_409003:                             ; CODE XREF: ___emul+19E↑j
.text:00409003                 cmp     ebx, eax
.text:00409005                 jz      short loc_409032
.text:00409007                 mov     word ptr [ebp+0Ah], 8000h
.text:0040900D
.text:0040900D loc_40900D:                             ; CODE XREF: ___emul+1E8↓j
.text:0040900D                 mov     eax, ebp
.text:0040900F                 mov     edx, 4
.text:00409014
.text:00409014 loc_409014:                             ; CODE XREF: ___emul+1CD↓j
.text:00409014                 mov     word ptr [eax], 0
.text:00409019                 add     eax, 2
.text:0040901C                 dec     edx
.text:0040901D                 jns     short loc_409014
.text:0040901F                 movzx   ebx, word ptr [ebp+0Ah]
.text:00409023                 or      ebx, 7FFFh
.text:00409029                 mov     [ebp+0Ah], bx
.text:0040902D                 jmp     loc_408E9C
.text:00409032 ; ---------------------------------------------------------------------------
.text:00409032
.text:00409032 loc_409032:                             ; CODE XREF: ___emul+1B5↑j
.text:00409032                 mov     word ptr [ebp+0Ah], 0
.text:00409038                 jmp     short loc_40900D
.text:0040903A ; ---------------------------------------------------------------------------
.text:0040903A
.text:0040903A loc_40903A:                             ; CODE XREF: ___emul+196↑j
.text:0040903A                 xor     ecx, ecx
.text:0040903C
.text:0040903C loc_40903C:                             ; CODE XREF: ___emul+1FB↓j
.text:0040903C                 movzx   esi, word ptr [edx]
.text:0040903F                 add     edx, 2
.text:00409042                 test    si, si
.text:00409045                 jnz     short loc_40904F
.text:00409047                 inc     ecx
.text:00409048                 cmp     ecx, 4
.text:0040904B                 jle     short loc_40903C
.text:0040904D                 jmp     short loc_408FE8
.text:0040904F ; ---------------------------------------------------------------------------
.text:0040904F
.text:0040904F loc_40904F:                             ; CODE XREF: ___emul+1F5↑j
.text:0040904F                 mov     edx, 1
.text:00409054                 jmp     short loc_408FEA
.text:00409056 ; ---------------------------------------------------------------------------
.text:00409056
.text:00409056 loc_409056:                             ; CODE XREF: ___emul+167↑j
.text:00409056                 xor     ecx, ecx
.text:00409058
.text:00409058 loc_409058:                             ; CODE XREF: ___emul+217↓j
.text:00409058                 movzx   ebx, word ptr [edx]
.text:0040905B                 add     edx, 2
.text:0040905E                 test    bx, bx
.text:00409061                 jnz     short loc_40906E
.text:00409063                 inc     ecx
.text:00409064                 cmp     ecx, 4
.text:00409067                 jle     short loc_409058
.text:00409069                 jmp     loc_408FBD
.text:0040906E ; ---------------------------------------------------------------------------
.text:0040906E
.text:0040906E loc_40906E:                             ; CODE XREF: ___emul+211↑j
.text:0040906E                 mov     eax, 1
.text:00409073                 jmp     loc_408FBF
.text:00409078 ; ---------------------------------------------------------------------------
.text:00409078
.text:00409078 loc_409078:                             ; CODE XREF: ___emul+152↑j
.text:00409078                 mov     [esp+8Ch+var_8C], ebx
.text:0040907B                 lea     ecx, [esp+8Ch+var_3C]
.text:0040907F                 lea     esi, [esp+8Ch+var_5C]
.text:00409083                 mov     [esp+8Ch+var_88], ecx
.text:00409087                 call    sub_4085F0
.text:0040908C                 mov     [esp+8Ch+var_88], esi
.text:00409090                 mov     [esp+8Ch+var_8C], edi
.text:00409093                 call    sub_4085F0
.text:00409098                 movzx   edx, word ptr [esp+8Ch+var_5C+2]
.text:0040909D                 movzx   edi, [esp+8Ch+var_3A]
.text:004090A2                 movzx   ebx, dx
.text:004090A5                 test    di, di
.text:004090A8                 movzx   esi, di
.text:004090AB                 jnz     short loc_4090ED
.text:004090AD                 mov     eax, 1
.text:004090B2
.text:004090B2 loc_4090B2:                             ; CODE XREF: ___emul+26E↓j
.text:004090B2                 cmp     [esp+eax*2+8Ch+var_3C], 0
.text:004090B8                 jnz     short loc_4090DA
.text:004090BA                 inc     eax
.text:004090BB                 cmp     eax, 7
.text:004090BE                 jle     short loc_4090B2
.text:004090C0
.text:004090C0 loc_4090C0:                             ; CODE XREF: ___emul+2B5↓j
.text:004090C0                 mov     dword ptr [ebp+0], 0
.text:004090C7                 mov     dword ptr [ebp+4], 0
.text:004090CE                 mov     dword ptr [ebp+8], 0
.text:004090D5                 jmp     loc_408E9C
.text:004090DA ; ---------------------------------------------------------------------------
.text:004090DA
.text:004090DA loc_4090DA:                             ; CODE XREF: ___emul+268↑j
.text:004090DA                 lea     edx, [esp+8Ch+var_3C]
.text:004090DE                 mov     [esp+8Ch+var_8C], edx
.text:004090E1                 call    sub_4097D0
.text:004090E6                 movzx   edx, word ptr [esp+8Ch+var_5C+2]
.text:004090EB                 sub     esi, eax
.text:004090ED
.text:004090ED loc_4090ED:                             ; CODE XREF: ___emul+25B↑j
.text:004090ED                 test    dx, dx
.text:004090F0                 jnz     short loc_409115
.text:004090F2                 mov     eax, 1
.text:004090F7
.text:004090F7 loc_4090F7:                             ; CODE XREF: ___emul+2B3↓j
.text:004090F7                 cmp     word ptr [esp+eax*2+8Ch+var_5C], 0
.text:004090FD                 jnz     short loc_409107
.text:004090FF                 inc     eax
.text:00409100                 cmp     eax, 7
.text:00409103                 jle     short loc_4090F7
.text:00409105                 jmp     short loc_4090C0
.text:00409107 ; ---------------------------------------------------------------------------
.text:00409107
.text:00409107 loc_409107:                             ; CODE XREF: ___emul+2AD↑j
.text:00409107                 lea     edi, [esp+8Ch+var_5C]
.text:0040910B                 mov     [esp+8Ch+var_8C], edi
.text:0040910E                 call    sub_4097D0
.text:00409113                 sub     ebx, eax
.text:00409115
.text:00409115 loc_409115:                             ; CODE XREF: ___emul+2A0↑j
.text:00409115                 lea     ecx, [esp+8Ch+var_3C]
.text:00409119                 lea     edx, [esp+8Ch+var_5C]
.text:0040911D                 mov     [esp+8Ch+var_8C], ecx
.text:00409120                 lea     edi, [ebx+esi-3FFEh]
.text:00409127                 mov     [esp+8Ch+var_88], edx
.text:0040912B                 call    sub_4089E0
.text:00409130                 lea     edx, [esp+8Ch+var_5C]
.text:00409134                 mov     [esp+8Ch+var_78], 50h ; 'P'
.text:0040913C                 mov     [esp+8Ch+var_7C], 40h ; '@'
.text:00409144                 mov     [esp+8Ch+var_80], edi
.text:00409148                 mov     [esp+8Ch+var_84], 0
.text:00409150                 mov     [esp+8Ch+var_88], eax
.text:00409154                 mov     [esp+8Ch+var_8C], edx
.text:00409157                 call    ___emdnorm
.text:0040915C                 mov     esi, [esp+8Ch+var_5C]
.text:00409160                 cmp     [esp+8Ch+var_3C], si
.text:00409165                 mov     [esp+8Ch+var_88], ebp
.text:00409169                 lea     ebp, [esp+8Ch+var_5C]
.text:0040916D                 mov     [esp+8Ch+var_8C], ebp
.text:00409170                 setnz   cl
.text:00409173                 movzx   bx, cl
.text:00409177                 neg     ebx
.text:00409179                 mov     word ptr [esp+8Ch+var_5C], bx
.text:0040917E                 call    sub_4099D0
.text:00409183                 jmp     loc_408E9C
.text:00409188 ; ---------------------------------------------------------------------------
.text:00409188
.text:00409188 loc_409188:                             ; CODE XREF: ___emul+148↑j
.text:00409188                 mov     edx, edi
.text:0040918A                 xor     ecx, ecx
.text:0040918C
.text:0040918C loc_40918C:                             ; CODE XREF: ___emul+34B↓j
.text:0040918C                 movzx   eax, word ptr [edx]
.text:0040918F                 add     edx, 2
.text:00409192                 test    ax, ax
.text:00409195                 jnz     short loc_4091AC
.text:00409197                 inc     ecx
.text:00409198                 cmp     ecx, 4
.text:0040919B                 jle     short loc_40918C
.text:0040919D                 xor     eax, eax
.text:0040919F
.text:0040919F loc_40919F:                             ; CODE XREF: ___emul+361↓j
.text:0040919F                 test    eax, eax
.text:004091A1                 setz    cl
.text:004091A4                 movzx   eax, cl
.text:004091A7                 jmp     loc_408FA0
.text:004091AC ; ---------------------------------------------------------------------------
.text:004091AC
.text:004091AC loc_4091AC:                             ; CODE XREF: ___emul+345↑j
.text:004091AC                 mov     eax, 1
.text:004091B1                 jmp     short loc_40919F
.text:004091B3 ; ---------------------------------------------------------------------------
.text:004091B3
.text:004091B3 loc_4091B3:                             ; CODE XREF: ___emul+12D↑j
.text:004091B3                 mov     edx, ebx
.text:004091B5                 xor     ecx, ecx
.text:004091B7
.text:004091B7 loc_4091B7:                             ; CODE XREF: ___emul+376↓j
.text:004091B7                 movzx   eax, word ptr [edx]
.text:004091BA                 add     edx, 2
.text:004091BD                 test    ax, ax
.text:004091C0                 jnz     short loc_4091D7
.text:004091C2                 inc     ecx
.text:004091C3                 cmp     ecx, 4
.text:004091C6                 jle     short loc_4091B7
.text:004091C8                 xor     eax, eax
.text:004091CA
.text:004091CA loc_4091CA:                             ; CODE XREF: ___emul+38C↓j
.text:004091CA                 test    eax, eax
.text:004091CC                 setz    cl
.text:004091CF                 movzx   eax, cl
.text:004091D2                 jmp     loc_408F85
.text:004091D7 ; ---------------------------------------------------------------------------
.text:004091D7
.text:004091D7 loc_4091D7:                             ; CODE XREF: ___emul+370↑j
.text:004091D7                 mov     eax, 1
.text:004091DC                 jmp     short loc_4091CA
.text:004091DE ; ---------------------------------------------------------------------------
.text:004091DE
.text:004091DE loc_4091DE:                             ; CODE XREF: ___emul+E3↑j
.text:004091DE                 xor     eax, eax
.text:004091E0                 jmp     loc_408F44
.text:004091E5 ; ---------------------------------------------------------------------------
.text:004091E5
.text:004091E5 loc_4091E5:                             ; CODE XREF: ___emul+CD↑j
.text:004091E5                 mov     edx, edi
.text:004091E7                 xor     ecx, ecx
.text:004091E9
.text:004091E9 loc_4091E9:                             ; CODE XREF: ___emul+3A8↓j
.text:004091E9                 movzx   eax, word ptr [edx]
.text:004091EC                 add     edx, 2
.text:004091EF                 test    ax, ax
.text:004091F2                 jnz     short loc_409209
.text:004091F4                 inc     ecx
.text:004091F5                 cmp     ecx, 4
.text:004091F8                 jle     short loc_4091E9
.text:004091FA                 xor     eax, eax
.text:004091FC
.text:004091FC loc_4091FC:                             ; CODE XREF: ___emul+3BE↓j
.text:004091FC                 test    eax, eax
.text:004091FE                 setz    cl
.text:00409201                 movzx   eax, cl
.text:00409204                 jmp     loc_408F25
.text:00409209 ; ---------------------------------------------------------------------------
.text:00409209
.text:00409209 loc_409209:                             ; CODE XREF: ___emul+3A2↑j
.text:00409209                 mov     eax, 1
.text:0040920E                 jmp     short loc_4091FC
.text:00409210 ; ---------------------------------------------------------------------------
.text:00409210
.text:00409210 loc_409210:                             ; CODE XREF: ___emul+A9↑j
.text:00409210                 xor     eax, eax
.text:00409212                 jmp     loc_408F0A
.text:00409217 ; ---------------------------------------------------------------------------
.text:00409217
.text:00409217 loc_409217:                             ; CODE XREF: ___emul+93↑j
.text:00409217                 mov     edx, ebx
.text:00409219                 xor     ecx, ecx
.text:0040921B
.text:0040921B loc_40921B:                             ; CODE XREF: ___emul+3DA↓j
.text:0040921B                 movzx   eax, word ptr [edx]
.text:0040921E                 add     edx, 2
.text:00409221                 test    ax, ax
.text:00409224                 jnz     short loc_40923B
.text:00409226                 inc     ecx
.text:00409227                 cmp     ecx, 4
.text:0040922A                 jle     short loc_40921B
.text:0040922C                 xor     eax, eax
.text:0040922E
.text:0040922E loc_40922E:                             ; CODE XREF: ___emul+3F0↓j
.text:0040922E                 test    eax, eax
.text:00409230                 setz    cl
.text:00409233                 movzx   eax, cl
.text:00409236                 jmp     loc_408EEB
.text:0040923B ; ---------------------------------------------------------------------------
.text:0040923B
.text:0040923B loc_40923B:                             ; CODE XREF: ___emul+3D4↑j
.text:0040923B                 mov     eax, 1
.text:00409240                 jmp     short loc_40922E
.text:00409242 ; ---------------------------------------------------------------------------
.text:00409242
.text:00409242 loc_409242:                             ; CODE XREF: ___emul+6A↑j
.text:00409242                 xor     ecx, ecx
.text:00409244
.text:00409244 loc_409244:                             ; CODE XREF: ___emul+403↓j
.text:00409244                 movzx   eax, word ptr [edx]
.text:00409247                 add     edx, 2
.text:0040924A                 test    ax, ax
.text:0040924D                 jnz     short loc_40925A
.text:0040924F                 inc     ecx
.text:00409250                 cmp     ecx, 4
.text:00409253                 jle     short loc_409244
.text:00409255                 jmp     loc_408EC0
.text:0040925A ; ---------------------------------------------------------------------------
.text:0040925A
.text:0040925A loc_40925A:                             ; CODE XREF: ___emul+3FD↑j
.text:0040925A                 mov     eax, 1
.text:0040925F                 jmp     loc_408EC2
.text:00409264 ; ---------------------------------------------------------------------------
.text:00409264
.text:00409264 loc_409264:                             ; CODE XREF: ___emul+2F↑j
.text:00409264                 xor     ecx, ecx
.text:00409266
.text:00409266 loc_409266:                             ; CODE XREF: ___emul+425↓j
.text:00409266                 movzx   eax, word ptr [edx]
.text:00409269                 add     edx, 2
.text:0040926C                 test    ax, ax
.text:0040926F                 jnz     short loc_40927C
.text:00409271                 inc     ecx
.text:00409272                 cmp     ecx, 4
.text:00409275                 jle     short loc_409266
.text:00409277                 jmp     loc_408E85
.text:0040927C ; ---------------------------------------------------------------------------
.text:0040927C
.text:0040927C loc_40927C:                             ; CODE XREF: ___emul+41F↑j
.text:0040927C                 mov     eax, 1
.text:00409281                 jmp     loc_408E87
.text:00409281 ___emul         endp
.text:00409281
.text:00409281 ; ---------------------------------------------------------------------------
.text:00409286                 align 10h
.text:00409290
.text:00409290 ; =============== S U B R O U T I N E =======================================
.text:00409290
.text:00409290
.text:00409290 sub_409290      proc near               ; CODE XREF: ___asctoe64+181↑p
.text:00409290
.text:00409290 arg_0           = dword ptr  4
.text:00409290 arg_4           = dword ptr  8
.text:00409290
.text:00409290                 push    ebp
.text:00409291                 push    edi
.text:00409292                 push    esi
.text:00409293                 push    ebx
.text:00409294                 mov     edi, [esp+10h+arg_0]
.text:00409298                 mov     ebp, [esp+10h+arg_4]
.text:0040929C                 movzx   edx, word ptr [edi+2]
.text:004092A0                 mov     ecx, edx
.text:004092A2                 and     ecx, 7FFFh
.text:004092A8                 cmp     cx, 7FFFh
.text:004092AD                 jz      loc_409408
.text:004092B3
.text:004092B3 loc_4092B3:                             ; CODE XREF: sub_409290+18A↓j
.text:004092B3                 xor     eax, eax
.text:004092B5
.text:004092B5 loc_4092B5:                             ; CODE XREF: sub_409290+194↓j
.text:004092B5                 test    eax, eax
.text:004092B7                 jz      short loc_4092E2
.text:004092B9                 mov     eax, ebp
.text:004092BB                 mov     edx, 2
.text:004092C0
.text:004092C0 loc_4092C0:                             ; CODE XREF: sub_409290+39↓j
.text:004092C0                 mov     word ptr [eax], 0
.text:004092C5                 add     eax, 2
.text:004092C8                 dec     edx
.text:004092C9                 jns     short loc_4092C0
.text:004092CB                 mov     word ptr [ebp+6], 0C000h
.text:004092D1                 mov     word ptr [ebp+8], 7FFFh
.text:004092D7                 mov     word ptr [ebp+0Ah], 0
.text:004092DD
.text:004092DD loc_4092DD:                             ; CODE XREF: sub_409290+120↓j
.text:004092DD                                         ; sub_409290+148↓j
.text:004092DD                 pop     ebx
.text:004092DE                 pop     esi
.text:004092DF                 pop     edi
.text:004092E0                 pop     ebp
.text:004092E1                 retn
.text:004092E2 ; ---------------------------------------------------------------------------
.text:004092E2
.text:004092E2 loc_4092E2:                             ; CODE XREF: sub_409290+27↑j
.text:004092E2                 test    dx, dx
.text:004092E5                 jnz     short loc_409337
.text:004092E7                 lea     ecx, [edi+4]
.text:004092EA                 xor     ebx, ebx
.text:004092EC                 mov     esi, 6
.text:004092F1                 jmp     short loc_409300
.text:004092F1 ; ---------------------------------------------------------------------------
.text:004092F3                 align 10h
.text:00409300
.text:00409300 loc_409300:                             ; CODE XREF: sub_409290+61↑j
.text:00409300                                         ; sub_409290+A5↓j
.text:00409300                 movzx   edx, word ptr [ecx]
.text:00409303                 mov     eax, edx
.text:00409305                 and     eax, 1
.text:00409308                 test    ax, ax
.text:0040930B                 jz      short loc_409310
.text:0040930D                 or      ebx, 1
.text:00409310
.text:00409310 loc_409310:                             ; CODE XREF: sub_409290+7B↑j
.text:00409310                 mov     eax, ebx
.text:00409312                 movzx   edx, dx
.text:00409315                 and     eax, 2
.text:00409318                 shr     edx, 1
.text:0040931A                 test    ax, ax
.text:0040931D                 mov     [ecx], dx
.text:00409320                 jz      short loc_40932B
.text:00409322                 or      edx, 0FFFF8000h
.text:00409328                 mov     [ecx], dx
.text:0040932B
.text:0040932B loc_40932B:                             ; CODE XREF: sub_409290+90↑j
.text:0040932B                 lea     edx, [ebx+ebx]
.text:0040932E                 add     ecx, 2
.text:00409331                 dec     esi
.text:00409332                 movzx   ebx, dx
.text:00409335                 jns     short loc_409300
.text:00409337
.text:00409337 loc_409337:                             ; CODE XREF: sub_409290+55↑j
.text:00409337                 mov     word ptr [ebp+0Ah], 0
.text:0040933D                 mov     ebx, edi
.text:0040933F                 add     ebx, 2
.text:00409342                 movzx   eax, word ptr [edi]
.text:00409345                 test    ax, ax
.text:00409348                 jz      loc_409400
.text:0040934E                 movzx   eax, word ptr [ebx]
.text:00409351                 or      eax, 0FFFF8000h
.text:00409356
.text:00409356 loc_409356:                             ; CODE XREF: sub_409290+173↓j
.text:00409356                 mov     [ebp+8], ax
.text:0040935A                 add     ebx, 2
.text:0040935D                 add     ebx, 2
.text:00409360                 movzx   esi, word ptr [edi+2]
.text:00409364                 lea     ecx, [ebp+6]
.text:00409367                 and     esi, 7FFFh
.text:0040936D                 cmp     si, 7FFFh
.text:00409372                 jz      short loc_4093DD
.text:00409374
.text:00409374 loc_409374:                             ; CODE XREF: sub_409290+15F↓j
.text:00409374                 xor     edx, edx
.text:00409376
.text:00409376 loc_409376:                             ; CODE XREF: sub_409290+166↓j
.text:00409376                 xor     eax, eax
.text:00409378                 test    edx, edx
.text:0040937A                 jnz     short loc_409391
.text:0040937C                 movzx   ebp, word ptr [edi+2]
.text:00409380                 and     ebp, 7FFFh
.text:00409386                 cmp     bp, 7FFFh
.text:0040938B                 setz    dl
.text:0040938E                 movzx   eax, dl
.text:00409391
.text:00409391 loc_409391:                             ; CODE XREF: sub_409290+EA↑j
.text:00409391                 test    eax, eax
.text:00409393                 jz      short loc_4093B5
.text:00409395                 mov     word ptr [ecx], 8000h
.text:0040939A                 sub     ecx, 2
.text:0040939D                 mov     word ptr [ecx], 0
.text:004093A2                 sub     ecx, 2
.text:004093A5                 mov     word ptr [ecx], 0
.text:004093AA                 mov     word ptr [ecx-2], 0
.text:004093B0                 jmp     loc_4092DD
.text:004093B5 ; ---------------------------------------------------------------------------
.text:004093B5
.text:004093B5 loc_4093B5:                             ; CODE XREF: sub_409290+103↑j
.text:004093B5                 xor     edx, edx
.text:004093B7                 mov     esi, esi
.text:004093B9                 lea     edi, [edi+0]
.text:004093C0
.text:004093C0 loc_4093C0:                             ; CODE XREF: sub_409290+146↓j
.text:004093C0                 movzx   esi, word ptr [ebx]
.text:004093C3                 lea     edi, [edx+1]
.text:004093C6                 movzx   edx, di
.text:004093C9                 add     ebx, 2
.text:004093CC                 mov     [ecx], si
.text:004093CF                 sub     ecx, 2
.text:004093D2                 cmp     dx, 3
.text:004093D6                 jbe     short loc_4093C0
.text:004093D8                 jmp     loc_4092DD
.text:004093DD ; ---------------------------------------------------------------------------
.text:004093DD
.text:004093DD loc_4093DD:                             ; CODE XREF: sub_409290+E2↑j
.text:004093DD                 mov     eax, 3
.text:004093E2
.text:004093E2 loc_4093E2:                             ; CODE XREF: sub_409290+15D↓j
.text:004093E2                 cmp     word ptr [edi+eax*2], 0
.text:004093E7                 jnz     short loc_4093F1
.text:004093E9                 inc     eax
.text:004093EA                 cmp     eax, 8
.text:004093ED                 jle     short loc_4093E2
.text:004093EF                 jmp     short loc_409374
.text:004093F1 ; ---------------------------------------------------------------------------
.text:004093F1
.text:004093F1 loc_4093F1:                             ; CODE XREF: sub_409290+157↑j
.text:004093F1                 mov     edx, 1
.text:004093F6                 jmp     loc_409376
.text:004093F6 ; ---------------------------------------------------------------------------
.text:004093FB                 align 10h
.text:00409400
.text:00409400 loc_409400:                             ; CODE XREF: sub_409290+B8↑j
.text:00409400                 movzx   eax, word ptr [ebx]
.text:00409403                 jmp     loc_409356
.text:00409408 ; ---------------------------------------------------------------------------
.text:00409408
.text:00409408 loc_409408:                             ; CODE XREF: sub_409290+1D↑j
.text:00409408                 mov     eax, 3
.text:0040940D
.text:0040940D loc_40940D:                             ; CODE XREF: sub_409290+188↓j
.text:0040940D                 cmp     word ptr [edi+eax*2], 0
.text:00409412                 jnz     short loc_40941F
.text:00409414                 inc     eax
.text:00409415                 cmp     eax, 8
.text:00409418                 jle     short loc_40940D
.text:0040941A                 jmp     loc_4092B3
.text:0040941F ; ---------------------------------------------------------------------------
.text:0040941F
.text:0040941F loc_40941F:                             ; CODE XREF: sub_409290+182↑j
.text:0040941F                 mov     eax, 1
.text:00409424                 jmp     loc_4092B5
.text:00409424 sub_409290      endp
.text:00409424
.text:00409424 ; ---------------------------------------------------------------------------
.text:00409429                 align 10h
.text:00409430                 push    ebp
.text:00409431                 push    edi
.text:00409432                 push    esi
.text:00409433                 push    ebx
.text:00409434                 sub     esp, 5Ch
.text:00409437                 mov     ebx, [esp+70h]
.text:0040943B                 mov     esi, [esp+74h]
.text:0040943F                 mov     edx, ebx
.text:00409441                 movzx   ecx, word ptr [ebx+0Ah]
.text:00409445                 and     ecx, 7FFFh
.text:0040944B                 cmp     cx, 7FFFh
.text:00409450                 jz      loc_409552
.text:00409456
.text:00409456 loc_409456:                             ; CODE XREF: .text:00409565↓j
.text:00409456                 xor     eax, eax
.text:00409458
.text:00409458 loc_409458:                             ; CODE XREF: .text:0040956F↓j
.text:00409458                 test    eax, eax
.text:0040945A                 jnz     short loc_409479
.text:0040945C                 movzx   ecx, word ptr [esi+0Ah]
.text:00409460                 mov     edx, esi
.text:00409462                 and     ecx, 7FFFh
.text:00409468                 cmp     cx, 7FFFh
.text:0040946D                 jz      loc_409530
.text:00409473
.text:00409473 loc_409473:                             ; CODE XREF: .text:00409543↓j
.text:00409473                 xor     eax, eax
.text:00409475
.text:00409475 loc_409475:                             ; CODE XREF: .text:0040954D↓j
.text:00409475                 test    eax, eax
.text:00409477                 jz      short loc_409486
.text:00409479
.text:00409479 loc_409479:                             ; CODE XREF: .text:0040945A↑j
.text:00409479                 mov     eax, 0FFFFFFFEh
.text:0040947E
.text:0040947E loc_40947E:                             ; CODE XREF: .text:004094CE↓j
.text:0040947E                                         ; .text:004094E0↓j ...
.text:0040947E                 add     esp, 5Ch
.text:00409481                 pop     ebx
.text:00409482                 pop     esi
.text:00409483                 pop     edi
.text:00409484                 pop     ebp
.text:00409485                 retn
.text:00409486 ; ---------------------------------------------------------------------------
.text:00409486
.text:00409486 loc_409486:                             ; CODE XREF: .text:00409477↑j
.text:00409486                 mov     [esp], ebx
.text:00409489                 lea     ebp, [esp+30h]
.text:0040948D                 lea     ebx, [esp+10h]
.text:00409491                 mov     [esp+4], ebp
.text:00409495                 mov     edi, ebp
.text:00409497                 call    sub_4085F0
.text:0040949C                 mov     [esp], esi
.text:0040949F                 mov     [esp+4], ebx
.text:004094A3                 call    sub_4085F0
.text:004094A8                 mov     eax, [esp+30h]
.text:004094AC                 cmp     ax, [esp+10h]
.text:004094B1                 jz      short loc_4094E2
.text:004094B3                 mov     ecx, 1
.text:004094B8
.text:004094B8 loc_4094B8:                             ; CODE XREF: .text:004094D0↓j
.text:004094B8                 cmp     word ptr [esp+ecx*2+30h], 0
.text:004094BE                 jnz     short loc_4094D2
.text:004094C0                 cmp     word ptr [esp+ecx*2+10h], 0
.text:004094C6                 jnz     short loc_4094D2
.text:004094C8                 inc     ecx
.text:004094C9                 xor     eax, eax
.text:004094CB                 cmp     ecx, 7
.text:004094CE                 jg      short loc_40947E
.text:004094D0                 jmp     short loc_4094B8
.text:004094D2 ; ---------------------------------------------------------------------------
.text:004094D2
.text:004094D2 loc_4094D2:                             ; CODE XREF: .text:004094BE↑j
.text:004094D2                                         ; .text:004094C6↑j
.text:004094D2                 xor     edx, edx
.text:004094D4                 cmp     word ptr [ebp+0], 0
.text:004094D9                 setz    dl
.text:004094DC                 lea     eax, [edx+edx-1]
.text:004094E0                 jmp     short loc_40947E
.text:004094E2 ; ---------------------------------------------------------------------------
.text:004094E2
.text:004094E2 loc_4094E2:                             ; CODE XREF: .text:004094B1↑j
.text:004094E2                 test    ax, ax
.text:004094E5                 setz    dl
.text:004094E8                 movzx   ecx, dl
.text:004094EB                 lea     esi, [ecx+ecx-1]
.text:004094EF                 mov     ecx, 8
.text:004094F4
.text:004094F4 loc_4094F4:                             ; CODE XREF: .text:00409510↓j
.text:004094F4                 movzx   ebp, word ptr [ebx]
.text:004094F7                 add     ebx, 2
.text:004094FA                 movzx   edx, word ptr [edi]
.text:004094FD                 add     edi, 2
.text:00409500                 cmp     dx, bp
.text:00409503                 jnz     short loc_409512
.text:00409505                 dec     ecx
.text:00409506                 xor     eax, eax
.text:00409508                 test    ecx, ecx
.text:0040950A                 jle     loc_40947E
.text:00409510                 jmp     short loc_4094F4
.text:00409512 ; ---------------------------------------------------------------------------
.text:00409512
.text:00409512 loc_409512:                             ; CODE XREF: .text:00409503↑j
.text:00409512                 movzx   ecx, word ptr [ebx-2]
.text:00409516                 cmp     [edi-2], cx
.text:0040951A                 jbe     short loc_409523
.text:0040951C                 mov     eax, esi
.text:0040951E                 jmp     loc_40947E
.text:00409523 ; ---------------------------------------------------------------------------
.text:00409523
.text:00409523 loc_409523:                             ; CODE XREF: .text:0040951A↑j
.text:00409523                 mov     eax, esi
.text:00409525                 neg     eax
.text:00409527                 jmp     loc_40947E
.text:00409527 ; ---------------------------------------------------------------------------
.text:0040952C                 align 10h
.text:00409530
.text:00409530 loc_409530:                             ; CODE XREF: .text:0040946D↑j
.text:00409530                 xor     ecx, ecx
.text:00409532
.text:00409532 loc_409532:                             ; CODE XREF: .text:00409541↓j
.text:00409532                 movzx   ebp, word ptr [edx]
.text:00409535                 add     edx, 2
.text:00409538                 test    bp, bp
.text:0040953B                 jnz     short loc_409548
.text:0040953D                 inc     ecx
.text:0040953E                 cmp     ecx, 4
.text:00409541                 jle     short loc_409532
.text:00409543                 jmp     loc_409473
.text:00409548 ; ---------------------------------------------------------------------------
.text:00409548
.text:00409548 loc_409548:                             ; CODE XREF: .text:0040953B↑j
.text:00409548                 mov     eax, 1
.text:0040954D                 jmp     loc_409475
.text:00409552 ; ---------------------------------------------------------------------------
.text:00409552
.text:00409552 loc_409552:                             ; CODE XREF: .text:00409450↑j
.text:00409552                 xor     ecx, ecx
.text:00409554
.text:00409554 loc_409554:                             ; CODE XREF: .text:00409563↓j
.text:00409554                 movzx   edi, word ptr [edx]
.text:00409557                 add     edx, 2
.text:0040955A                 test    di, di
.text:0040955D                 jnz     short loc_40956A
.text:0040955F                 inc     ecx
.text:00409560                 cmp     ecx, 4
.text:00409563                 jle     short loc_409554
.text:00409565                 jmp     loc_409456
.text:0040956A ; ---------------------------------------------------------------------------
.text:0040956A
.text:0040956A loc_40956A:                             ; CODE XREF: .text:0040955D↑j
.text:0040956A                 mov     eax, 1
.text:0040956F                 jmp     loc_409458
.text:0040956F ; ---------------------------------------------------------------------------
.text:00409574                 align 10h
.text:00409580
.text:00409580 ; =============== S U B R O U T I N E =======================================
.text:00409580
.text:00409580 ; Attributes: info_from_lumina
.text:00409580
.text:00409580 ___eshift       proc near               ; CODE XREF: ___emdnorm+30F↑p
.text:00409580
.text:00409580 var_1C          = dword ptr -1Ch
.text:00409580 var_18          = dword ptr -18h
.text:00409580 var_14          = dword ptr -14h
.text:00409580 arg_0           = dword ptr  4
.text:00409580 arg_4           = dword ptr  8
.text:00409580
.text:00409580                 push    ebp
.text:00409581                 xor     eax, eax
.text:00409583                 push    edi
.text:00409584                 push    esi
.text:00409585                 push    ebx
.text:00409586                 sub     esp, 0Ch
.text:00409589                 mov     edi, [esp+1Ch+arg_4]
.text:0040958D                 test    edi, edi
.text:0040958F                 jz      loc_40969D
.text:00409595                 mov     [esp+1Ch+var_14], 0
.text:0040959D                 mov     edx, [esp+1Ch+arg_0]
.text:004095A1                 add     edx, 10h
.text:004095A4                 test    edi, edi
.text:004095A6                 mov     [esp+1Ch+var_18], edx
.text:004095AA                 js      loc_4096A5
.text:004095B0                 cmp     edi, 0Fh
.text:004095B3                 jle     short loc_4095F6
.text:004095B5                 mov     esi, [esp+1Ch+arg_0]
.text:004095B9                 mov     ecx, [esp+1Ch+arg_0]
.text:004095BD                 add     esi, 4
.text:004095C0                 mov     [esp+1Ch+var_1C], esi
.text:004095C3                 mov     esi, ecx
.text:004095C5                 lea     ebp, [ecx+6]
.text:004095C8                 add     esi, 10h
.text:004095CB                 nop
.text:004095CC                 lea     esi, [esi+0]
.text:004095D0
.text:004095D0 loc_4095D0:                             ; CODE XREF: ___eshift+74↓j
.text:004095D0                 mov     ecx, [esp+1Ch+var_1C]
.text:004095D3                 mov     edx, ebp
.text:004095D5                 mov     ebx, 5
.text:004095DA
.text:004095DA loc_4095DA:                             ; CODE XREF: ___eshift+67↓j
.text:004095DA                 movzx   eax, word ptr [edx]
.text:004095DD                 add     edx, 2
.text:004095E0                 mov     [ecx], ax
.text:004095E3                 add     ecx, 2
.text:004095E6                 dec     ebx
.text:004095E7                 jns     short loc_4095DA
.text:004095E9                 mov     word ptr [esi], 0
.text:004095EE                 sub     edi, 10h
.text:004095F1                 cmp     edi, 0Fh
.text:004095F4                 jg      short loc_4095D0
.text:004095F6
.text:004095F6 loc_4095F6:                             ; CODE XREF: ___eshift+33↑j
.text:004095F6                 cmp     edi, 7
.text:004095F9                 jle     short loc_40962E
.text:004095FB                 nop
.text:004095FC                 lea     esi, [esi+0]
.text:00409600
.text:00409600 loc_409600:                             ; CODE XREF: ___eshift+AC↓j
.text:00409600                 mov     ecx, [esp+1Ch+var_18]
.text:00409604                 xor     esi, esi
.text:00409606                 mov     ebx, 6
.text:0040960B                 nop
.text:0040960C                 lea     esi, [esi+0]
.text:00409610
.text:00409610 loc_409610:                             ; CODE XREF: ___eshift+A4↓j
.text:00409610                 movzx   edx, word ptr [ecx]
.text:00409613                 mov     ebp, edx
.text:00409615                 shl     ebp, 8
.text:00409618                 or      esi, ebp
.text:0040961A                 mov     [ecx], si
.text:0040961D                 sub     ecx, 2
.text:00409620                 movzx   esi, dh
.text:00409623                 dec     ebx
.text:00409624                 jns     short loc_409610
.text:00409626                 sub     edi, 8
.text:00409629                 cmp     edi, 7
.text:0040962C                 jg      short loc_409600
.text:0040962E
.text:0040962E loc_40962E:                             ; CODE XREF: ___eshift+79↑j
.text:0040962E                 test    edi, edi
.text:00409630                 jle     short loc_409689
.text:00409632                 lea     esi, [esi+0]
.text:00409639                 lea     edi, [edi+0]
.text:00409640
.text:00409640 loc_409640:                             ; CODE XREF: ___eshift+107↓j
.text:00409640                 mov     ecx, [esp+1Ch+arg_0]
.text:00409644                 xor     ebx, ebx
.text:00409646                 mov     esi, 6
.text:0040964B                 add     ecx, 10h
.text:0040964E                 mov     esi, esi
.text:00409650
.text:00409650 loc_409650:                             ; CODE XREF: ___eshift+102↓j
.text:00409650                 movzx   edx, word ptr [ecx]
.text:00409653                 mov     ebp, edx
.text:00409655                 and     ebp, 0FFFF8000h
.text:0040965B                 test    bp, bp
.text:0040965E                 jz      short loc_409663
.text:00409660                 or      ebx, 1
.text:00409663
.text:00409663 loc_409663:                             ; CODE XREF: ___eshift+DE↑j
.text:00409663                 mov     ebp, ebx
.text:00409665                 and     ebp, 2
.text:00409668                 add     edx, edx
.text:0040966A                 test    bp, bp
.text:0040966D                 mov     [ecx], dx
.text:00409670                 jz      short loc_409678
.text:00409672                 or      edx, 1
.text:00409675                 mov     [ecx], dx
.text:00409678
.text:00409678 loc_409678:                             ; CODE XREF: ___eshift+F0↑j
.text:00409678                 lea     edx, [ebx+ebx]
.text:0040967B                 sub     ecx, 2
.text:0040967E                 dec     esi
.text:0040967F                 movzx   ebx, dx
.text:00409682                 jns     short loc_409650
.text:00409684                 dec     edi
.text:00409685                 test    edi, edi
.text:00409687                 jg      short loc_409640
.text:00409689
.text:00409689 loc_409689:                             ; CODE XREF: ___eshift+B0↑j
.text:00409689                                         ; ___eshift+1C8↓j ...
.text:00409689                 cmp     word ptr [esp+1Ch+var_14], 0
.text:0040968F                 jz      short loc_409699
.text:00409691                 mov     [esp+1Ch+var_14], 1
.text:00409699
.text:00409699 loc_409699:                             ; CODE XREF: ___eshift+10F↑j
.text:00409699                 mov     eax, [esp+1Ch+var_14]
.text:0040969D
.text:0040969D loc_40969D:                             ; CODE XREF: ___eshift+F↑j
.text:0040969D                 add     esp, 0Ch
.text:004096A0                 pop     ebx
.text:004096A1                 pop     esi
.text:004096A2                 pop     edi
.text:004096A3                 pop     ebp
.text:004096A4                 retn
.text:004096A5 ; ---------------------------------------------------------------------------
.text:004096A5
.text:004096A5 loc_4096A5:                             ; CODE XREF: ___eshift+2A↑j
.text:004096A5                 neg     edi
.text:004096A7                 cmp     edi, 0Fh
.text:004096AA                 jle     short loc_4096ED
.text:004096AC                 mov     eax, [esp+1Ch+arg_0]
.text:004096B0                 lea     esi, [eax+12h]
.text:004096B3
.text:004096B3 loc_4096B3:                             ; CODE XREF: ___eshift+16B↓j
.text:004096B3                 mov     ebx, [esp+1Ch+var_18]
.text:004096B7                 mov     ecx, ebx
.text:004096B9                 movzx   edx, word ptr [ebx]
.text:004096BC                 mov     ebx, 5
.text:004096C1                 or      [esp+1Ch+var_14], edx
.text:004096C5                 mov     edx, esi
.text:004096C7                 mov     esi, esi
.text:004096C9                 lea     edi, [edi+0]
.text:004096D0
.text:004096D0 loc_4096D0:                             ; CODE XREF: ___eshift+15D↓j
.text:004096D0                 sub     ecx, 2
.text:004096D3                 sub     edx, 2
.text:004096D6                 dec     ebx
.text:004096D7                 movzx   ebp, word ptr [ecx]
.text:004096DA                 mov     [edx], bp
.text:004096DD                 jns     short loc_4096D0
.text:004096DF                 mov     word ptr [esi-0Eh], 0
.text:004096E5                 sub     edi, 10h
.text:004096E8                 cmp     edi, 0Fh
.text:004096EB                 jg      short loc_4096B3
.text:004096ED
.text:004096ED loc_4096ED:                             ; CODE XREF: ___eshift+12A↑j
.text:004096ED                 cmp     edi, 7
.text:004096F0                 jle     short loc_409746
.text:004096F2                 mov     ecx, [esp+1Ch+arg_0]
.text:004096F6                 add     ecx, 4
.text:004096F9                 mov     [esp+1Ch+var_1C], ecx
.text:004096FC
.text:004096FC loc_4096FC:                             ; CODE XREF: ___eshift+1C4↓j
.text:004096FC                 mov     ebp, [esp+1Ch+var_18]
.text:00409700                 mov     eax, [esp+1Ch+var_14]
.text:00409704                 mov     ecx, [esp+1Ch+var_1C]
.text:00409707                 movzx   ebx, byte ptr [ebp+0]
.text:0040970B                 or      ebx, eax
.text:0040970D                 movzx   esi, bx
.text:00409710                 mov     ebx, 6
.text:00409715                 mov     [esp+1Ch+var_14], esi
.text:00409719                 xor     esi, esi
.text:0040971B                 nop
.text:0040971C                 lea     esi, [esi+0]
.text:00409720
.text:00409720 loc_409720:                             ; CODE XREF: ___eshift+1BC↓j
.text:00409720                 movzx   eax, word ptr [ecx]
.text:00409723                 mov     ebp, eax
.text:00409725                 movzx   edx, ah
.text:00409728                 or      esi, edx
.text:0040972A                 shl     ebp, 8
.text:0040972D                 mov     [ecx], si
.text:00409730                 add     ecx, 2
.text:00409733                 mov     esi, ebp
.text:00409735                 and     esi, 0FF00h
.text:0040973B                 dec     ebx
.text:0040973C                 jns     short loc_409720
.text:0040973E                 sub     edi, 8
.text:00409741                 cmp     edi, 7
.text:00409744                 jg      short loc_4096FC
.text:00409746
.text:00409746 loc_409746:                             ; CODE XREF: ___eshift+170↑j
.text:00409746                 test    edi, edi
.text:00409748                 jle     loc_409689
.text:0040974E                 mov     ecx, [esp+1Ch+arg_0]
.text:00409752                 add     ecx, 4
.text:00409755                 mov     [esp+1Ch+var_1C], ecx
.text:00409758
.text:00409758 loc_409758:                             ; CODE XREF: ___eshift+23A↓j
.text:00409758                 mov     ebp, [esp+1Ch+var_18]
.text:0040975C                 mov     eax, [esp+1Ch+var_14]
.text:00409760                 mov     ecx, [esp+1Ch+var_1C]
.text:00409763                 mov     ebx, [ebp+0]
.text:00409766                 and     ebx, 1
.text:00409769                 or      ebx, eax
.text:0040976B                 movzx   esi, bx
.text:0040976E                 xor     ebx, ebx
.text:00409770                 mov     [esp+1Ch+var_14], esi
.text:00409774                 mov     esi, 6
.text:00409779                 lea     esi, [esi+0]
.text:00409780
.text:00409780 loc_409780:                             ; CODE XREF: ___eshift+235↓j
.text:00409780                 movzx   edx, word ptr [ecx]
.text:00409783                 mov     ebp, edx
.text:00409785                 and     ebp, 1
.text:00409788                 test    bp, bp
.text:0040978B                 jz      short loc_409790
.text:0040978D                 or      ebx, 1
.text:00409790
.text:00409790 loc_409790:                             ; CODE XREF: ___eshift+20B↑j
.text:00409790                 mov     ebp, ebx
.text:00409792                 movzx   edx, dx
.text:00409795                 and     ebp, 2
.text:00409798                 shr     edx, 1
.text:0040979A                 test    bp, bp
.text:0040979D                 mov     [ecx], dx
.text:004097A0                 jz      short loc_4097AB
.text:004097A2                 or      edx, 0FFFF8000h
.text:004097A8                 mov     [ecx], dx
.text:004097AB
.text:004097AB loc_4097AB:                             ; CODE XREF: ___eshift+220↑j
.text:004097AB                 lea     edx, [ebx+ebx]
.text:004097AE                 add     ecx, 2
.text:004097B1                 dec     esi
.text:004097B2                 movzx   ebx, dx
.text:004097B5                 jns     short loc_409780
.text:004097B7                 dec     edi
.text:004097B8                 test    edi, edi
.text:004097BA                 jg      short loc_409758
.text:004097BC                 jmp     loc_409689
.text:004097BC ___eshift       endp
.text:004097BC
.text:004097C1 ; ---------------------------------------------------------------------------
.text:004097C1                 jmp     short sub_4097D0
.text:004097C1 ; ---------------------------------------------------------------------------
.text:004097C3                 align 10h
.text:004097D0
.text:004097D0 ; =============== S U B R O U T I N E =======================================
.text:004097D0
.text:004097D0
.text:004097D0 sub_4097D0      proc near               ; CODE XREF: ___asctoe64+5B9↑p
.text:004097D0                                         ; ___emdnorm+50↑p ...
.text:004097D0
.text:004097D0 var_18          = dword ptr -18h
.text:004097D0 var_14          = dword ptr -14h
.text:004097D0 arg_0           = dword ptr  4
.text:004097D0
.text:004097D0                 push    ebp
.text:004097D1                 push    edi
.text:004097D2                 xor     edi, edi
.text:004097D4                 push    esi
.text:004097D5                 push    ebx
.text:004097D6                 sub     esp, 8
.text:004097D9                 mov     edx, [esp+18h+arg_0]
.text:004097DD                 mov     ebp, [esp+18h+arg_0]
.text:004097E1                 movzx   eax, word ptr [edx+4]
.text:004097E5                 add     ebp, 4
.text:004097E8                 mov     [esp+18h+var_14], ebp
.text:004097EC                 test    ax, ax
.text:004097EF                 jnz     loc_40992B
.text:004097F5                 movzx   ecx, word ptr [edx+6]
.text:004097F9                 mov     ebp, edx
.text:004097FB                 xor     edx, edx
.text:004097FD                 add     ebp, 6
.text:00409800                 mov     ebx, ecx
.text:00409802                 and     ebx, 0FFFF8000h
.text:00409808                 test    bx, bx
.text:0040980B                 jnz     loc_409919
.text:00409811                 test    cx, cx
.text:00409814                 jnz     loc_409923
.text:0040981A                 mov     esi, [esp+18h+arg_0]
.text:0040981E                 add     esi, 10h
.text:00409821
.text:00409821 loc_409821:                             ; CODE XREF: sub_4097D0+86↓j
.text:00409821                 mov     ecx, [esp+18h+var_14]
.text:00409825                 mov     edx, ebp
.text:00409827                 mov     ebx, 5
.text:0040982C                 lea     esi, [esi+0]
.text:00409830
.text:00409830 loc_409830:                             ; CODE XREF: sub_4097D0+6D↓j
.text:00409830                 movzx   eax, word ptr [edx]
.text:00409833                 add     edx, 2
.text:00409836                 mov     [ecx], ax
.text:00409839                 add     ecx, 2
.text:0040983C                 dec     ebx
.text:0040983D                 jns     short loc_409830
.text:0040983F                 mov     word ptr [esi], 0
.text:00409844                 add     edi, 10h
.text:00409847                 cmp     edi, 50h ; 'P'
.text:0040984A                 jg      loc_409917
.text:00409850                 mov     edx, [ebp+0]
.text:00409853                 test    dx, dx
.text:00409856                 jz      short loc_409821
.text:00409858
.text:00409858 loc_409858:                             ; CODE XREF: sub_4097D0+156↓j
.text:00409858                 mov     ecx, edx
.text:0040985A                 and     ecx, 0FFFFFF00h
.text:00409860                 test    cx, cx
.text:00409863                 jnz     short loc_4098A9
.text:00409865                 mov     edx, [esp+18h+arg_0]
.text:00409869                 add     edx, 10h
.text:0040986C                 mov     [esp+18h+var_18], edx
.text:0040986F
.text:0040986F loc_40986F:                             ; CODE XREF: sub_4097D0+D7↓j
.text:0040986F                 mov     ecx, [esp+18h+var_18]
.text:00409872                 xor     esi, esi
.text:00409874                 mov     ebx, 6
.text:00409879                 lea     esi, [esi+0]
.text:00409880
.text:00409880 loc_409880:                             ; CODE XREF: sub_4097D0+C4↓j
.text:00409880                 movzx   edx, word ptr [ecx]
.text:00409883                 mov     eax, edx
.text:00409885                 shl     eax, 8
.text:00409888                 or      esi, eax
.text:0040988A                 mov     [ecx], si
.text:0040988D                 sub     ecx, 2
.text:00409890                 movzx   esi, dh
.text:00409893                 dec     ebx
.text:00409894                 jns     short loc_409880
.text:00409896                 mov     edx, [ebp+0]
.text:00409899                 add     edi, 8
.text:0040989C                 mov     ebx, edx
.text:0040989E                 and     ebx, 0FFFFFF00h
.text:004098A4                 test    bx, bx
.text:004098A7                 jz      short loc_40986F
.text:004098A9
.text:004098A9 loc_4098A9:                             ; CODE XREF: sub_4097D0+93↑j
.text:004098A9                 mov     esi, edx
.text:004098AB                 and     esi, 0FFFF8000h
.text:004098B1                 test    si, si
.text:004098B4                 jnz     short loc_409917
.text:004098B6                 mov     eax, [esp+18h+arg_0]
.text:004098BA                 add     eax, 10h
.text:004098BD                 mov     [esp+18h+var_18], eax
.text:004098C0
.text:004098C0 loc_4098C0:                             ; CODE XREF: sub_4097D0+145↓j
.text:004098C0                 mov     ecx, [esp+18h+var_18]
.text:004098C3                 xor     ebx, ebx
.text:004098C5                 mov     esi, 6
.text:004098CA                 lea     esi, [esi+0]
.text:004098D0
.text:004098D0 loc_4098D0:                             ; CODE XREF: sub_4097D0+131↓j
.text:004098D0                 movzx   edx, word ptr [ecx]
.text:004098D3                 mov     eax, edx
.text:004098D5                 and     eax, 0FFFF8000h
.text:004098DA                 test    ax, ax
.text:004098DD                 jz      short loc_4098E2
.text:004098DF                 or      ebx, 1
.text:004098E2
.text:004098E2 loc_4098E2:                             ; CODE XREF: sub_4097D0+10D↑j
.text:004098E2                 mov     eax, ebx
.text:004098E4                 and     eax, 2
.text:004098E7                 add     edx, edx
.text:004098E9                 test    ax, ax
.text:004098EC                 mov     [ecx], dx
.text:004098EF                 jz      short loc_4098F7
.text:004098F1                 or      edx, 1
.text:004098F4                 mov     [ecx], dx
.text:004098F7
.text:004098F7 loc_4098F7:                             ; CODE XREF: sub_4097D0+11F↑j
.text:004098F7                 lea     edx, [ebx+ebx]
.text:004098FA                 sub     ecx, 2
.text:004098FD                 dec     esi
.text:004098FE                 movzx   ebx, dx
.text:00409901                 jns     short loc_4098D0
.text:00409903                 inc     edi
.text:00409904                 cmp     edi, 60h ; '`'
.text:00409907                 jg      short loc_409917
.text:00409909                 mov     ecx, [ebp+0]
.text:0040990C                 and     ecx, 0FFFF8000h
.text:00409912                 test    cx, cx
.text:00409915                 jz      short loc_4098C0
.text:00409917
.text:00409917 loc_409917:                             ; CODE XREF: sub_4097D0+7A↑j
.text:00409917                                         ; sub_4097D0+E4↑j ...
.text:00409917                 mov     edx, edi
.text:00409919
.text:00409919 loc_409919:                             ; CODE XREF: sub_4097D0+3B↑j
.text:00409919                                         ; sub_4097D0+1ED↓j
.text:00409919                 add     esp, 8
.text:0040991C                 mov     eax, edx
.text:0040991E                 pop     ebx
.text:0040991F                 pop     esi
.text:00409920                 pop     edi
.text:00409921                 pop     ebp
.text:00409922                 retn
.text:00409923 ; ---------------------------------------------------------------------------
.text:00409923
.text:00409923 loc_409923:                             ; CODE XREF: sub_4097D0+44↑j
.text:00409923                 mov     edx, [ebp+0]
.text:00409926                 jmp     loc_409858
.text:0040992B ; ---------------------------------------------------------------------------
.text:0040992B
.text:0040992B loc_40992B:                             ; CODE XREF: sub_4097D0+1F↑j
.text:0040992B                 and     eax, 0FFFFFF00h
.text:00409930                 test    ax, ax
.text:00409933                 jz      short loc_409963
.text:00409935                 mov     ecx, ebp
.text:00409937                 xor     esi, esi
.text:00409939                 mov     ebx, 6
.text:0040993E                 mov     esi, esi
.text:00409940
.text:00409940 loc_409940:                             ; CODE XREF: sub_4097D0+18C↓j
.text:00409940                 movzx   eax, word ptr [ecx]
.text:00409943                 mov     edi, eax
.text:00409945                 movzx   edx, ah
.text:00409948                 or      esi, edx
.text:0040994A                 shl     edi, 8
.text:0040994D                 mov     [ecx], si
.text:00409950                 add     ecx, 2
.text:00409953                 mov     esi, edi
.text:00409955                 and     esi, 0FF00h
.text:0040995B                 dec     ebx
.text:0040995C                 jns     short loc_409940
.text:0040995E                 mov     edi, 0FFFFFFF8h
.text:00409963
.text:00409963 loc_409963:                             ; CODE XREF: sub_4097D0+163↑j
.text:00409963                 cmp     word ptr [ebp+0], 0
.text:00409968                 jz      short loc_409917
.text:0040996A                 lea     esi, [esi+0]
.text:00409970
.text:00409970 loc_409970:                             ; CODE XREF: sub_4097D0+1F8↓j
.text:00409970                 mov     ecx, [esp+18h+arg_0]
.text:00409974                 xor     ebx, ebx
.text:00409976                 mov     esi, 6
.text:0040997B                 add     ecx, 4
.text:0040997E                 mov     esi, esi
.text:00409980
.text:00409980 loc_409980:                             ; CODE XREF: sub_4097D0+1E5↓j
.text:00409980                 movzx   edx, word ptr [ecx]
.text:00409983                 mov     eax, edx
.text:00409985                 and     eax, 1
.text:00409988                 test    ax, ax
.text:0040998B                 jz      short loc_409990
.text:0040998D                 or      ebx, 1
.text:00409990
.text:00409990 loc_409990:                             ; CODE XREF: sub_4097D0+1BB↑j
.text:00409990                 mov     eax, ebx
.text:00409992                 movzx   edx, dx
.text:00409995                 and     eax, 2
.text:00409998                 shr     edx, 1
.text:0040999A                 test    ax, ax
.text:0040999D                 mov     [ecx], dx
.text:004099A0                 jz      short loc_4099AB
.text:004099A2                 or      edx, 0FFFF8000h
.text:004099A8                 mov     [ecx], dx
.text:004099AB
.text:004099AB loc_4099AB:                             ; CODE XREF: sub_4097D0+1D0↑j
.text:004099AB                 lea     edx, [ebx+ebx]
.text:004099AE                 add     ecx, 2
.text:004099B1                 dec     esi
.text:004099B2                 movzx   ebx, dx
.text:004099B5                 jns     short loc_409980
.text:004099B7                 dec     edi
.text:004099B8                 cmp     edi, 0FFFFFFB0h
.text:004099BB                 mov     edx, edi
.text:004099BD                 jl      loc_409919
.text:004099C3                 cmp     word ptr [ebp+0], 0
.text:004099C8                 jnz     short loc_409970
.text:004099CA                 jmp     loc_409917
.text:004099CA sub_4097D0      endp
.text:004099CA
.text:004099CA ; ---------------------------------------------------------------------------
.text:004099CF                 align 10h
.text:004099D0
.text:004099D0 ; =============== S U B R O U T I N E =======================================
.text:004099D0
.text:004099D0
.text:004099D0 sub_4099D0      proc near               ; CODE XREF: ___emul+32E↑p
.text:004099D0
.text:004099D0 arg_0           = dword ptr  4
.text:004099D0 arg_4           = dword ptr  8
.text:004099D0
.text:004099D0                 push    edi
.text:004099D1                 push    esi
.text:004099D2                 push    ebx
.text:004099D3                 mov     edi, [esp+0Ch+arg_0]
.text:004099D7                 mov     esi, [esp+0Ch+arg_4]
.text:004099DB                 movzx   eax, word ptr [edi]
.text:004099DE                 mov     ecx, edi
.text:004099E0                 add     ecx, 2
.text:004099E3                 test    ax, ax
.text:004099E6                 jz      loc_409AA0
.text:004099EC                 movzx   eax, word ptr [ecx]
.text:004099EF                 or      eax, 0FFFF8000h
.text:004099F4
.text:004099F4 loc_4099F4:                             ; CODE XREF: sub_4099D0+D3↓j
.text:004099F4                 mov     [esi+0Ah], ax
.text:004099F8                 add     ecx, 2
.text:004099FB                 lea     ebx, [esi+8]
.text:004099FE                 cmp     word ptr [ecx-2], 7FFFh
.text:00409A04                 jz      short loc_409A2C
.text:00409A06                 add     ecx, 2
.text:00409A09                 xor     edx, edx
.text:00409A0B                 nop
.text:00409A0C                 lea     esi, [esi+0]
.text:00409A10
.text:00409A10 loc_409A10:                             ; CODE XREF: sub_4099D0+56↓j
.text:00409A10                 movzx   edi, word ptr [ecx]
.text:00409A13                 lea     esi, [edx+1]
.text:00409A16                 movzx   edx, si
.text:00409A19                 add     ecx, 2
.text:00409A1C                 mov     [ebx], di
.text:00409A1F                 sub     ebx, 2
.text:00409A22                 cmp     dx, 4
.text:00409A26                 jbe     short loc_409A10
.text:00409A28
.text:00409A28 loc_409A28:                             ; CODE XREF: sub_4099D0+91↓j
.text:00409A28                                         ; sub_4099D0+B3↓j
.text:00409A28                 pop     ebx
.text:00409A29                 pop     esi
.text:00409A2A                 pop     edi
.text:00409A2B                 retn
.text:00409A2C ; ---------------------------------------------------------------------------
.text:00409A2C
.text:00409A2C loc_409A2C:                             ; CODE XREF: sub_4099D0+34↑j
.text:00409A2C                 movzx   edx, word ptr [edi+2]
.text:00409A30                 and     edx, 7FFFh
.text:00409A36                 cmp     dx, 7FFFh
.text:00409A3B                 jz      short loc_409A85
.text:00409A3D
.text:00409A3D loc_409A3D:                             ; CODE XREF: sub_4099D0+C7↓j
.text:00409A3D                 xor     eax, eax
.text:00409A3F
.text:00409A3F loc_409A3F:                             ; CODE XREF: sub_4099D0+CE↓j
.text:00409A3F                 test    eax, eax
.text:00409A41                 jz      short loc_409A63
.text:00409A43                 mov     eax, esi
.text:00409A45                 mov     edx, 3
.text:00409A4A
.text:00409A4A loc_409A4A:                             ; CODE XREF: sub_4099D0+83↓j
.text:00409A4A                 mov     word ptr [eax], 0
.text:00409A4F                 add     eax, 2
.text:00409A52                 dec     edx
.text:00409A53                 jns     short loc_409A4A
.text:00409A55                 mov     word ptr [esi+8], 0C000h
.text:00409A5B                 mov     word ptr [esi+0Ah], 7FFFh
.text:00409A61                 jmp     short loc_409A28
.text:00409A63 ; ---------------------------------------------------------------------------
.text:00409A63
.text:00409A63 loc_409A63:                             ; CODE XREF: sub_4099D0+71↑j
.text:00409A63                 mov     eax, esi
.text:00409A65                 mov     edx, 4
.text:00409A6A
.text:00409A6A loc_409A6A:                             ; CODE XREF: sub_4099D0+A3↓j
.text:00409A6A                 mov     word ptr [eax], 0
.text:00409A6F                 add     eax, 2
.text:00409A72                 dec     edx
.text:00409A73                 jns     short loc_409A6A
.text:00409A75                 movzx   ecx, word ptr [esi+0Ah]
.text:00409A79                 or      ecx, 7FFFh
.text:00409A7F                 mov     [esi+0Ah], cx
.text:00409A83                 jmp     short loc_409A28
.text:00409A85 ; ---------------------------------------------------------------------------
.text:00409A85
.text:00409A85 loc_409A85:                             ; CODE XREF: sub_4099D0+6B↑j
.text:00409A85                 mov     eax, 3
.text:00409A8A
.text:00409A8A loc_409A8A:                             ; CODE XREF: sub_4099D0+C5↓j
.text:00409A8A                 cmp     word ptr [edi+eax*2], 0
.text:00409A8F                 jnz     short loc_409A99
.text:00409A91                 inc     eax
.text:00409A92                 cmp     eax, 8
.text:00409A95                 jle     short loc_409A8A
.text:00409A97                 jmp     short loc_409A3D
.text:00409A99 ; ---------------------------------------------------------------------------
.text:00409A99
.text:00409A99 loc_409A99:                             ; CODE XREF: sub_4099D0+BF↑j
.text:00409A99                 mov     eax, 1
.text:00409A9E                 jmp     short loc_409A3F
.text:00409AA0 ; ---------------------------------------------------------------------------
.text:00409AA0
.text:00409AA0 loc_409AA0:                             ; CODE XREF: sub_4099D0+16↑j
.text:00409AA0                 movzx   eax, word ptr [ecx]
.text:00409AA3                 jmp     loc_4099F4
.text:00409AA3 sub_4099D0      endp
.text:00409AA3
.text:00409AA3 ; ---------------------------------------------------------------------------
.text:00409AA8                 align 10h
.text:00409AB0
.text:00409AB0 ; =============== S U B R O U T I N E =======================================
.text:00409AB0
.text:00409AB0
.text:00409AB0 sub_409AB0      proc near               ; CODE XREF: ___asctoe64+3C0↑p
.text:00409AB0                                         ; ___asctoe64+3FE↑p ...
.text:00409AB0
.text:00409AB0 arg_0           = dword ptr  4
.text:00409AB0 arg_4           = dword ptr  8
.text:00409AB0
.text:00409AB0                 push    edi
.text:00409AB1                 xor     edi, edi
.text:00409AB3                 push    esi
.text:00409AB4                 mov     esi, 6
.text:00409AB9                 push    ebx
.text:00409ABA                 mov     ebx, [esp+0Ch+arg_0]
.text:00409ABE                 mov     ecx, [esp+0Ch+arg_4]
.text:00409AC2                 add     ebx, 10h
.text:00409AC5                 add     ecx, 10h
.text:00409AC8                 nop
.text:00409AC9                 lea     esi, [esi+0]
.text:00409AD0
.text:00409AD0 loc_409AD0:                             ; CODE XREF: sub_409AB0+3F↓j
.text:00409AD0                 movzx   edx, word ptr [ecx]
.text:00409AD3                 movzx   eax, word ptr [ebx]
.text:00409AD6                 add     eax, edx
.text:00409AD8                 add     eax, edi
.text:00409ADA                 mov     [ecx], ax
.text:00409ADD                 test    eax, 10000h
.text:00409AE2                 setnz   dl
.text:00409AE5                 sub     ecx, 2
.text:00409AE8                 sub     ebx, 2
.text:00409AEB                 dec     esi
.text:00409AEC                 movzx   edi, dl
.text:00409AEF                 jns     short loc_409AD0
.text:00409AF1                 pop     ebx
.text:00409AF2                 pop     esi
.text:00409AF3                 pop     edi
.text:00409AF4                 retn
.text:00409AF4 sub_409AB0      endp
.text:00409AF4
.text:00409AF4 ; ---------------------------------------------------------------------------
.text:00409AF5                 align 10h
.text:00409B00                 push    edi
.text:00409B01                 xor     edi, edi
.text:00409B03                 push    esi
.text:00409B04                 mov     esi, 6
.text:00409B09                 push    ebx
.text:00409B0A                 mov     ebx, [esp+10h]
.text:00409B0E                 mov     ecx, [esp+14h]
.text:00409B12                 add     ebx, 10h
.text:00409B15                 add     ecx, 10h
.text:00409B18                 nop
.text:00409B19                 lea     esi, [esi+0]
.text:00409B20
.text:00409B20 loc_409B20:                             ; CODE XREF: .text:00409B3F↓j
.text:00409B20                 movzx   eax, word ptr [ecx]
.text:00409B23                 movzx   edx, word ptr [ebx]
.text:00409B26                 sub     eax, edx
.text:00409B28                 sub     eax, edi
.text:00409B2A                 mov     [ecx], ax
.text:00409B2D                 test    eax, 10000h
.text:00409B32                 setnz   dl
.text:00409B35                 sub     ecx, 2
.text:00409B38                 sub     ebx, 2
.text:00409B3B                 dec     esi
.text:00409B3C                 movzx   edi, dl
.text:00409B3F                 jns     short loc_409B20
.text:00409B41                 pop     ebx
.text:00409B42                 pop     esi
.text:00409B43                 pop     edi
.text:00409B44                 retn
.text:00409B44 ; ---------------------------------------------------------------------------
.text:00409B45                 align 10h
.text:00409B50
.text:00409B50 ; =============== S U B R O U T I N E =======================================
.text:00409B50
.text:00409B50
.text:00409B50 sub_409B50      proc near               ; CODE XREF: ___edivm+120↑p
.text:00409B50                                         ; sub_4089E0+FB↑p
.text:00409B50
.text:00409B50 var_3C          = word ptr -3Ch
.text:00409B50 var_2E          = word ptr -2Eh
.text:00409B50 var_2C          = word ptr -2Ch
.text:00409B50 arg_0           = word ptr  4
.text:00409B50 arg_4           = dword ptr  8
.text:00409B50 arg_8           = dword ptr  0Ch
.text:00409B50
.text:00409B50                 push    ebp
.text:00409B51                 push    edi
.text:00409B52                 push    esi
.text:00409B53                 push    ebx
.text:00409B54                 mov     ebx, 5
.text:00409B59                 sub     esp, 2Ch
.text:00409B5C                 movzx   ebp, [esp+3Ch+arg_0]
.text:00409B61                 lea     esi, [esp+3Ch+var_2C]
.text:00409B65                 mov     [esp+3Ch+var_2E], 0
.text:00409B6C                 mov     edi, [esp+3Ch+arg_4]
.text:00409B70                 mov     [esp+3Ch+var_2C], 0
.text:00409B77                 add     edi, 10h
.text:00409B7A                 lea     esi, [esi+0]
.text:00409B80
.text:00409B80 loc_409B80:                             ; CODE XREF: sub_409B50+45↓j
.text:00409B80                 movzx   eax, word ptr [edi]
.text:00409B83                 test    ax, ax
.text:00409B86                 jnz     short loc_409BC0
.text:00409B88                 sub     esi, 2
.text:00409B8B                 sub     edi, 2
.text:00409B8E                 mov     word ptr [esi-2], 0
.text:00409B94
.text:00409B94 loc_409B94:                             ; CODE XREF: sub_409B50+A1↓j
.text:00409B94                 dec     ebx
.text:00409B95                 jns     short loc_409B80
.text:00409B97                 mov     ebx, 2
.text:00409B9C                 lea     esi, [esi+0]
.text:00409BA0
.text:00409BA0 loc_409BA0:                             ; CODE XREF: sub_409B50+60↓j
.text:00409BA0                 movzx   edx, [esp+ebx*2+3Ch+var_3C]
.text:00409BA4                 mov     ecx, [esp+3Ch+arg_8]
.text:00409BA8                 mov     [ecx+ebx*2], dx
.text:00409BAC                 inc     ebx
.text:00409BAD                 cmp     ebx, 8
.text:00409BB0                 jle     short loc_409BA0
.text:00409BB2                 add     esp, 2Ch
.text:00409BB5                 pop     ebx
.text:00409BB6                 pop     esi
.text:00409BB7                 pop     edi
.text:00409BB8                 pop     ebp
.text:00409BB9                 retn
.text:00409BB9 ; ---------------------------------------------------------------------------
.text:00409BBA                 align 10h
.text:00409BC0
.text:00409BC0 loc_409BC0:                             ; CODE XREF: sub_409B50+36↑j
.text:00409BC0                 movzx   edx, word ptr [esi]
.text:00409BC3                 movzx   eax, ax
.text:00409BC6                 imul    eax, ebp
.text:00409BC9                 sub     edi, 2
.text:00409BCC                 movzx   ecx, ax
.text:00409BCF                 shr     eax, 10h
.text:00409BD2                 lea     edx, [edx+ecx]
.text:00409BD5                 mov     [esi], dx
.text:00409BD8                 shr     edx, 10h
.text:00409BDB                 sub     esi, 2
.text:00409BDE                 lea     eax, [eax+edx]
.text:00409BE1                 movzx   edx, word ptr [esi]
.text:00409BE4                 lea     ecx, [edx+eax]
.text:00409BE7                 mov     [esi], cx
.text:00409BEA                 shr     ecx, 10h
.text:00409BED                 mov     [esi-2], cx
.text:00409BF1                 jmp     short loc_409B94
.text:00409BF1 sub_409B50      endp
.text:00409BF1
.text:00409BF1 ; ---------------------------------------------------------------------------
.text:00409BF3                 align 10h
.text:00409C00                 jmp     ds:__set_app_type
.text:00409C00 ; ---------------------------------------------------------------------------
.text:00409C06                 align 10h
.text:00409C10
.text:00409C10 ; =============== S U B R O U T I N E =======================================
.text:00409C10
.text:00409C10 ; Attributes: thunk
.text:00409C10
.text:00409C10 ; void __cdecl cexit()
.text:00409C10 _cexit          proc near               ; CODE XREF: .text:0040116C↑p
.text:00409C10                 jmp     ds:__imp__cexit
.text:00409C10 _cexit          endp
.text:00409C10
.text:00409C10 ; ---------------------------------------------------------------------------
.text:00409C16                 align 10h
.text:00409C20
.text:00409C20 ; =============== S U B R O U T I N E =======================================
.text:00409C20
.text:00409C20 ; Attributes: thunk
.text:00409C20
.text:00409C20 ; char ***__cdecl _p__environ()
.text:00409C20 __p__environ    proc near               ; CODE XREF: sub_401080+C7↑p
.text:00409C20                 jmp     ds:__imp___p__environ
.text:00409C20 __p__environ    endp
.text:00409C20
.text:00409C20 ; ---------------------------------------------------------------------------
.text:00409C26                 align 10h
.text:00409C30
.text:00409C30 ; =============== S U B R O U T I N E =======================================
.text:00409C30
.text:00409C30 ; Attributes: thunk
.text:00409C30
.text:00409C30 ; _crt_signal_t __cdecl signal(int Signal, _crt_signal_t Function)
.text:00409C30 signal          proc near               ; CODE XREF: TopLevelExceptionFilter+4D↑p
.text:00409C30                                         ; TopLevelExceptionFilter+88↑p ...
.text:00409C30
.text:00409C30 Signal          = dword ptr  4
.text:00409C30 Function        = dword ptr  8
.text:00409C30
.text:00409C30                 jmp     ds:__imp_signal
.text:00409C30 signal          endp
.text:00409C30
.text:00409C30 ; ---------------------------------------------------------------------------
.text:00409C36                 align 10h
.text:00409C40
.text:00409C40 ; =============== S U B R O U T I N E =======================================
.text:00409C40
.text:00409C40 ; Attributes: thunk
.text:00409C40
.text:00409C40 ; int *__cdecl _p__fmode()
.text:00409C40 __p__fmode      proc near               ; CODE XREF: sub_401080:loc_401135↑p
.text:00409C40                 jmp     ds:__imp___p__fmode
.text:00409C40 __p__fmode      endp
.text:00409C40
.text:00409C40 ; ---------------------------------------------------------------------------
.text:00409C46                 align 10h
.text:00409C50
.text:00409C50 ; =============== S U B R O U T I N E =======================================
.text:00409C50
.text:00409C50 ; Attributes: thunk
.text:00409C50
.text:00409C50 ; int __cdecl setmode(int FileHandle, int Mode)
.text:00409C50 _setmode        proc near               ; CODE XREF: sub_401080+70↑p
.text:00409C50                                         ; sub_401080+90↑p ...
.text:00409C50
.text:00409C50 FileHandle      = dword ptr  4
.text:00409C50 Mode            = dword ptr  8
.text:00409C50
.text:00409C50                 jmp     ds:__imp__setmode
.text:00409C50 _setmode        endp
.text:00409C50
.text:00409C50 ; ---------------------------------------------------------------------------
.text:00409C56                 align 10h
.text:00409C60
.text:00409C60 ; =============== S U B R O U T I N E =======================================
.text:00409C60
.text:00409C60 ; Attributes: thunk
.text:00409C60
.text:00409C60 __getmainargs   proc near               ; CODE XREF: sub_401080+49↑p
.text:00409C60                 jmp     ds:__imp___getmainargs
.text:00409C60 __getmainargs   endp
.text:00409C60
.text:00409C60 ; ---------------------------------------------------------------------------
.text:00409C66                 align 10h
.text:00409C70
.text:00409C70 ; =============== S U B R O U T I N E =======================================
.text:00409C70
.text:00409C70 ; Attributes: thunk
.text:00409C70
.text:00409C70 ; char *__cdecl getenv(const char *VarName)
.text:00409C70 getenv          proc near               ; CODE XREF: sub_4013E0+77↑p
.text:00409C70                                         ; sub_403F10+B57↑p
.text:00409C70
.text:00409C70 VarName         = dword ptr  4
.text:00409C70
.text:00409C70                 jmp     ds:__imp_getenv
.text:00409C70 getenv          endp
.text:00409C70
.text:00409C70 ; ---------------------------------------------------------------------------
.text:00409C76                 align 10h
.text:00409C80
.text:00409C80 ; =============== S U B R O U T I N E =======================================
.text:00409C80
.text:00409C80 ; Attributes: thunk
.text:00409C80
.text:00409C80 ; char *__cdecl setlocale(int Category, const char *Locale)
.text:00409C80 setlocale       proc near               ; CODE XREF: sub_4013E0+35↑p
.text:00409C80                                         ; sub_403C10+22↑p ...
.text:00409C80
.text:00409C80 Category        = dword ptr  4
.text:00409C80 Locale          = dword ptr  8
.text:00409C80
.text:00409C80                 jmp     ds:__imp_setlocale
.text:00409C80 setlocale       endp
.text:00409C80
.text:00409C80 ; ---------------------------------------------------------------------------
.text:00409C86                 align 10h
.text:00409C90
.text:00409C90 ; =============== S U B R O U T I N E =======================================
.text:00409C90
.text:00409C90 ; Attributes: thunk
.text:00409C90
.text:00409C90 ; void __cdecl free(void *Block)
.text:00409C90 free            proc near               ; CODE XREF: sub_402900+337↑p
.text:00409C90                                         ; sub_403C10+86↑p ...
.text:00409C90
.text:00409C90 Block           = dword ptr  4
.text:00409C90
.text:00409C90                 jmp     ds:__imp_free
.text:00409C90 free            endp
.text:00409C90
.text:00409C90 ; ---------------------------------------------------------------------------
.text:00409C96                 align 10h
.text:00409CA0
.text:00409CA0 ; =============== S U B R O U T I N E =======================================
.text:00409CA0
.text:00409CA0 ; Attributes: thunk
.text:00409CA0
.text:00409CA0 ; int *__cdecl errno()
.text:00409CA0 _errno          proc near               ; CODE XREF: sub_401CE0+3B6↑p
.text:00409CA0                                         ; sub_401CE0+3E9↑p ...
.text:00409CA0                 jmp     ds:__imp__errno
.text:00409CA0 _errno          endp
.text:00409CA0
.text:00409CA0 ; ---------------------------------------------------------------------------
.text:00409CA6                 align 10h
.text:00409CB0
.text:00409CB0 ; =============== S U B R O U T I N E =======================================
.text:00409CB0
.text:00409CB0 ; Attributes: noreturn thunk
.text:00409CB0
.text:00409CB0 ; void __cdecl __noreturn exit(int Code)
.text:00409CB0 exit            proc near               ; CODE XREF: sub_4013E0:loc_401522↑p
.text:00409CB0                                         ; sub_401A80+3B↑p ...
.text:00409CB0
.text:00409CB0 Code            = dword ptr  4
.text:00409CB0
.text:00409CB0                 jmp     ds:__imp_exit
.text:00409CB0 exit            endp
.text:00409CB0
.text:00409CB0 ; ---------------------------------------------------------------------------
.text:00409CB6                 align 10h
.text:00409CC0
.text:00409CC0 ; =============== S U B R O U T I N E =======================================
.text:00409CC0
.text:00409CC0 ; Attributes: thunk
.text:00409CC0
.text:00409CC0 ; int __cdecl fputs(const char *Buffer, FILE *Stream)
.text:00409CC0 fputs           proc near               ; CODE XREF: sub_401A80+80↑p
.text:00409CC0                                         ; sub_401A80+A2↑p ...
.text:00409CC0
.text:00409CC0 Buffer          = dword ptr  4
.text:00409CC0 Stream          = dword ptr  8
.text:00409CC0
.text:00409CC0                 jmp     ds:__imp_fputs
.text:00409CC0 fputs           endp
.text:00409CC0
.text:00409CC0 ; ---------------------------------------------------------------------------
.text:00409CC6                 align 10h
.text:00409CD0
.text:00409CD0 ; =============== S U B R O U T I N E =======================================
.text:00409CD0
.text:00409CD0 ; Attributes: thunk
.text:00409CD0
.text:00409CD0 ; int printf(const char *const Format, ...)
.text:00409CD0 printf          proc near               ; CODE XREF: sub_401A80+5E↑p
.text:00409CD0                                         ; sub_401A80+18B↑p ...
.text:00409CD0
.text:00409CD0 Format          = dword ptr  4
.text:00409CD0
.text:00409CD0                 jmp     ds:__imp_printf
.text:00409CD0 printf          endp
.text:00409CD0
.text:00409CD0 ; ---------------------------------------------------------------------------
.text:00409CD6                 align 10h
.text:00409CE0
.text:00409CE0 ; =============== S U B R O U T I N E =======================================
.text:00409CE0
.text:00409CE0 ; Attributes: thunk
.text:00409CE0
.text:00409CE0 ; int fprintf(FILE *const Stream, const char *const Format, ...)
.text:00409CE0 fprintf         proc near               ; CODE XREF: sub_4013E0+136↑p
.text:00409CE0                                         ; sub_401A80+33↑p ...
.text:00409CE0
.text:00409CE0 Stream          = dword ptr  4
.text:00409CE0 Format          = dword ptr  8
.text:00409CE0
.text:00409CE0                 jmp     ds:__imp_fprintf
.text:00409CE0 fprintf         endp
.text:00409CE0
.text:00409CE0 ; ---------------------------------------------------------------------------
.text:00409CE6                 align 10h
.text:00409CF0
.text:00409CF0 ; =============== S U B R O U T I N E =======================================
.text:00409CF0
.text:00409CF0 ; Attributes: thunk
.text:00409CF0
.text:00409CF0 ; int __cdecl isctype(int C, int Type)
.text:00409CF0 _isctype        proc near               ; CODE XREF: sub_402550+19D↑p
.text:00409CF0                                         ; sub_402550+31D↑p ...
.text:00409CF0
.text:00409CF0 C               = dword ptr  4
.text:00409CF0 Type            = dword ptr  8
.text:00409CF0
.text:00409CF0                 jmp     ds:__imp__isctype
.text:00409CF0 _isctype        endp
.text:00409CF0
.text:00409CF0 ; ---------------------------------------------------------------------------
.text:00409CF6                 align 10h
.text:00409D00
.text:00409D00 ; =============== S U B R O U T I N E =======================================
.text:00409D00
.text:00409D00 ; Attributes: thunk
.text:00409D00
.text:00409D00 ; char *__cdecl strchr(const char *Str, int Val)
.text:00409D00 strchr          proc near               ; CODE XREF: sub_402550+2D3↑p
.text:00409D00                                         ; sub_403F10+469↑p ...
.text:00409D00
.text:00409D00 Str             = dword ptr  4
.text:00409D00 Val             = dword ptr  8
.text:00409D00
.text:00409D00                 jmp     ds:__imp_strchr
.text:00409D00 strchr          endp
.text:00409D00
.text:00409D00 ; ---------------------------------------------------------------------------
.text:00409D06                 align 10h
.text:00409D10
.text:00409D10 ; =============== S U B R O U T I N E =======================================
.text:00409D10
.text:00409D10 ; Attributes: thunk
.text:00409D10
.text:00409D10 ; int __cdecl flsbuf(int Ch, FILE *File)
.text:00409D10 _flsbuf         proc near               ; CODE XREF: sub_401CE0:loc_401D85↑p
.text:00409D10                                         ; sub_401CE0+7A2↑p ...
.text:00409D10
.text:00409D10 File            = dword ptr  8
.text:00409D10
.text:00409D10                 jmp     ds:__imp__flsbuf
.text:00409D10 _flsbuf         endp
.text:00409D10
.text:00409D10 ; ---------------------------------------------------------------------------
.text:00409D16                 align 10h
.text:00409D20
.text:00409D20 ; =============== S U B R O U T I N E =======================================
.text:00409D20
.text:00409D20 ; Attributes: thunk
.text:00409D20
.text:00409D20 ; int __cdecl fclose(FILE *Stream)
.text:00409D20 fclose          proc near               ; CODE XREF: sub_403370+27↑p
.text:00409D20
.text:00409D20 Stream          = dword ptr  4
.text:00409D20
.text:00409D20                 jmp     ds:__imp_fclose
.text:00409D20 fclose          endp
.text:00409D20
.text:00409D20 ; ---------------------------------------------------------------------------
.text:00409D26                 align 10h
.text:00409D30
.text:00409D30 ; =============== S U B R O U T I N E =======================================
.text:00409D30
.text:00409D30 ; Attributes: thunk
.text:00409D30
.text:00409D30 ; void *__cdecl memcpy(void *, const void *Src, size_t Size)
.text:00409D30 memcpy          proc near               ; CODE XREF: .text:00403638↑p
.text:00409D30                                         ; sub_403650+31↑p
.text:00409D30
.text:00409D30 Src             = dword ptr  8
.text:00409D30 Size            = dword ptr  0Ch
.text:00409D30
.text:00409D30                 jmp     ds:__imp_memcpy
.text:00409D30 memcpy          endp
.text:00409D30
.text:00409D30 ; ---------------------------------------------------------------------------
.text:00409D36                 align 10h
.text:00409D40
.text:00409D40 ; =============== S U B R O U T I N E =======================================
.text:00409D40
.text:00409D40 ; Attributes: thunk
.text:00409D40
.text:00409D40 ; void *__cdecl memset(void *, int Val, size_t Size)
.text:00409D40 memset          proc near               ; CODE XREF: .text:004035B6↑p
.text:00409D40
.text:00409D40 Val             = dword ptr  8
.text:00409D40 Size            = dword ptr  0Ch
.text:00409D40
.text:00409D40                 jmp     ds:__imp_memset
.text:00409D40 memset          endp
.text:00409D40
.text:00409D40 ; ---------------------------------------------------------------------------
.text:00409D46                 align 10h
.text:00409D50
.text:00409D50 ; =============== S U B R O U T I N E =======================================
.text:00409D50
.text:00409D50 ; Attributes: thunk
.text:00409D50
.text:00409D50 ; size_t __cdecl strlen(const char *Str)
.text:00409D50 strlen          proc near               ; CODE XREF: sub_403650+12↑p
.text:00409D50                                         ; sub_403F10+2A9↑p ...
.text:00409D50
.text:00409D50 Str             = dword ptr  4
.text:00409D50
.text:00409D50                 jmp     ds:__imp_strlen
.text:00409D50 strlen          endp
.text:00409D50
.text:00409D50 ; ---------------------------------------------------------------------------
.text:00409D56                 align 10h
.text:00409D60
.text:00409D60 ; =============== S U B R O U T I N E =======================================
.text:00409D60
.text:00409D60 ; Attributes: thunk
.text:00409D60
.text:00409D60 ; void *__cdecl calloc(size_t Count, size_t Size)
.text:00409D60 calloc          proc near               ; CODE XREF: .text:004035F3↑p
.text:00409D60
.text:00409D60 Count           = dword ptr  4
.text:00409D60 Size            = dword ptr  8
.text:00409D60
.text:00409D60                 jmp     ds:__imp_calloc
.text:00409D60 calloc          endp
.text:00409D60
.text:00409D60 ; ---------------------------------------------------------------------------
.text:00409D66                 align 10h
.text:00409D70
.text:00409D70 ; =============== S U B R O U T I N E =======================================
.text:00409D70
.text:00409D70 ; Attributes: thunk
.text:00409D70
.text:00409D70 ; void *__cdecl realloc(void *Block, size_t Size)
.text:00409D70 realloc         proc near               ; CODE XREF: .text:004034F0↑p
.text:00409D70                                         ; sub_403520+16↑p ...
.text:00409D70
.text:00409D70 Block           = dword ptr  4
.text:00409D70 Size            = dword ptr  8
.text:00409D70
.text:00409D70                 jmp     ds:__imp_realloc
.text:00409D70 realloc         endp
.text:00409D70
.text:00409D70 ; ---------------------------------------------------------------------------
.text:00409D76                 align 10h
.text:00409D80
.text:00409D80 ; =============== S U B R O U T I N E =======================================
.text:00409D80
.text:00409D80 ; Attributes: thunk
.text:00409D80
.text:00409D80 ; void *__cdecl malloc(size_t Size)
.text:00409D80 malloc          proc near               ; CODE XREF: .text:00403474↑p
.text:00409D80                                         ; sub_403490+E↑p ...
.text:00409D80
.text:00409D80 Size            = dword ptr  4
.text:00409D80
.text:00409D80                 jmp     ds:__imp_malloc
.text:00409D80 malloc          endp
.text:00409D80
.text:00409D80 ; ---------------------------------------------------------------------------
.text:00409D86                 align 10h
.text:00409D90
.text:00409D90 ; =============== S U B R O U T I N E =======================================
.text:00409D90
.text:00409D90 ; Attributes: thunk
.text:00409D90
.text:00409D90 ; size_t __cdecl fwrite(const void *Buffer, size_t ElementSize, size_t ElementCount, FILE *Stream)
.text:00409D90 fwrite          proc near               ; CODE XREF: sub_403940+22↑p
.text:00409D90
.text:00409D90 Buffer          = dword ptr  4
.text:00409D90 ElementSize     = dword ptr  8
.text:00409D90 ElementCount    = dword ptr  0Ch
.text:00409D90 Stream          = dword ptr  10h
.text:00409D90
.text:00409D90                 jmp     ds:__imp_fwrite
.text:00409D90 fwrite          endp
.text:00409D90
.text:00409D90 ; ---------------------------------------------------------------------------
.text:00409D96                 align 10h
.text:00409DA0
.text:00409DA0 ; =============== S U B R O U T I N E =======================================
.text:00409DA0
.text:00409DA0 ; Attributes: thunk
.text:00409DA0
.text:00409DA0 ; int __cdecl strncmp(const char *Str1, const char *Str2, size_t MaxCount)
.text:00409DA0 strncmp         proc near               ; CODE XREF: sub_403F10+23F↑p
.text:00409DA0                                         ; sub_403F10+699↑p
.text:00409DA0
.text:00409DA0 Str1            = dword ptr  4
.text:00409DA0 Str2            = dword ptr  8
.text:00409DA0 MaxCount        = dword ptr  0Ch
.text:00409DA0
.text:00409DA0                 jmp     ds:__imp_strncmp
.text:00409DA0 strncmp         endp
.text:00409DA0
.text:00409DA0 ; ---------------------------------------------------------------------------
.text:00409DA6                 align 10h
.text:00409DB0
.text:00409DB0 ; =============== S U B R O U T I N E =======================================
.text:00409DB0
.text:00409DB0 ; Attributes: thunk
.text:00409DB0
.text:00409DB0 ; int __cdecl vfprintf(FILE *const Stream, const char *const Format, va_list ArgList)
.text:00409DB0 vfprintf        proc near               ; CODE XREF: sub_404FD0+C1↑p
.text:00409DB0                                         ; sub_406970+49↑p ...
.text:00409DB0
.text:00409DB0 Stream          = dword ptr  4
.text:00409DB0 Format          = dword ptr  8
.text:00409DB0 ArgList         = dword ptr  0Ch
.text:00409DB0
.text:00409DB0                 jmp     ds:__imp_vfprintf
.text:00409DB0 vfprintf        endp
.text:00409DB0
.text:00409DB0 ; ---------------------------------------------------------------------------
.text:00409DB6                 align 10h
.text:00409DC0
.text:00409DC0 ; =============== S U B R O U T I N E =======================================
.text:00409DC0
.text:00409DC0 ; Attributes: noreturn thunk
.text:00409DC0
.text:00409DC0 ; void __cdecl __noreturn abort()
.text:00409DC0 abort           proc near               ; CODE XREF: sub_404FD0:loc_40506C↑p
.text:00409DC0                                         ; sub_4064F0:loc_4066AA↑p ...
.text:00409DC0                 jmp     ds:__imp_abort
.text:00409DC0 abort           endp
.text:00409DC0
.text:00409DC0 ; ---------------------------------------------------------------------------
.text:00409DC6                 align 10h
.text:00409DD0
.text:00409DD0 ; =============== S U B R O U T I N E =======================================
.text:00409DD0
.text:00409DD0 ; Attributes: thunk
.text:00409DD0
.text:00409DD0 ; int __cdecl iswctype(wint_t C, wctype_t Type)
.text:00409DD0 iswctype        proc near               ; CODE XREF: sub_4053B0+78B↑p
.text:00409DD0
.text:00409DD0 C               = word ptr  4
.text:00409DD0 Type            = word ptr  8
.text:00409DD0
.text:00409DD0                 jmp     ds:__imp_iswctype
.text:00409DD0 iswctype        endp
.text:00409DD0
.text:00409DD0 ; ---------------------------------------------------------------------------
.text:00409DD6                 align 10h
.text:00409DE0
.text:00409DE0 ; =============== S U B R O U T I N E =======================================
.text:00409DE0
.text:00409DE0 ; Attributes: thunk
.text:00409DE0
.text:00409DE0 ; int __cdecl strcmp(const char *Str1, const char *Str2)
.text:00409DE0 strcmp          proc near               ; CODE XREF: sub_406850+57↑p
.text:00409DE0                                         ; sub_406A74+180↑p
.text:00409DE0
.text:00409DE0 Str1            = dword ptr  4
.text:00409DE0 Str2            = dword ptr  8
.text:00409DE0
.text:00409DE0                 jmp     ds:__imp_strcmp
.text:00409DE0 strcmp          endp
.text:00409DE0
.text:00409DE0 ; ---------------------------------------------------------------------------
.text:00409DE6                 align 10h
.text:00409DF0
.text:00409DF0 ; =============== S U B R O U T I N E =======================================
.text:00409DF0
.text:00409DF0 ; Attributes: thunk
.text:00409DF0
.text:00409DF0 ; int sprintf(char *const Buffer, const char *const Format, ...)
.text:00409DF0 sprintf         proc near               ; CODE XREF: sub_406850+22↑p
.text:00409DF0
.text:00409DF0 Buffer          = dword ptr  4
.text:00409DF0 Format          = dword ptr  8
.text:00409DF0
.text:00409DF0                 jmp     ds:__imp_sprintf
.text:00409DF0 sprintf         endp
.text:00409DF0
.text:00409DF0 ; ---------------------------------------------------------------------------
.text:00409DF6                 align 10h
.text:00409E00
.text:00409E00 ; =============== S U B R O U T I N E =======================================
.text:00409E00
.text:00409E00 ; Attributes: thunk
.text:00409E00
.text:00409E00 ; int __cdecl fflush(FILE *Stream)
.text:00409E00 fflush          proc near               ; CODE XREF: sub_406970+19↑p
.text:00409E00                                         ; sub_406970+81↑p ...
.text:00409E00
.text:00409E00 Stream          = dword ptr  4
.text:00409E00
.text:00409E00                 jmp     ds:__imp_fflush
.text:00409E00 fflush          endp
.text:00409E00
.text:00409E00 ; ---------------------------------------------------------------------------
.text:00409E06                 align 10h
.text:00409E10
.text:00409E10 ; =============== S U B R O U T I N E =======================================
.text:00409E10
.text:00409E10 ; Attributes: thunk
.text:00409E10
.text:00409E10 ; char *__cdecl strerror(int ErrorMessage)
.text:00409E10 strerror        proc near               ; CODE XREF: sub_406970+A5↑p
.text:00409E10                                         ; sub_406A74+10F↑p
.text:00409E10
.text:00409E10 ErrorMessage    = dword ptr  4
.text:00409E10
.text:00409E10                 jmp     ds:__imp_strerror
.text:00409E10 strerror        endp
.text:00409E10
.text:00409E10 ; ---------------------------------------------------------------------------
.text:00409E16                 align 10h
.text:00409E20
.text:00409E20 ; =============== S U B R O U T I N E =======================================
.text:00409E20
.text:00409E20 ; Attributes: thunk
.text:00409E20
.text:00409E20 ; struct lconv *__cdecl localeconv()
.text:00409E20 localeconv      proc near               ; CODE XREF: ___asctoe64+31↑p
.text:00409E20                 jmp     ds:__imp_localeconv
.text:00409E20 localeconv      endp
.text:00409E20
.text:00409E20 ; ---------------------------------------------------------------------------
.text:00409E26                 align 10h
.text:00409E30
.text:00409E30 ; =============== S U B R O U T I N E =======================================
.text:00409E30
.text:00409E30 ; Attributes: thunk
.text:00409E30
.text:00409E30 ; int __cdecl strnicmp(const char *String1, const char *String2, size_t MaxCount)
.text:00409E30 _strnicmp       proc near               ; CODE XREF: ___asctoe64+108↑p
.text:00409E30                                         ; ___asctoe64+136↑p ...
.text:00409E30
.text:00409E30 String1         = dword ptr  4
.text:00409E30 String2         = dword ptr  8
.text:00409E30 MaxCount        = dword ptr  0Ch
.text:00409E30
.text:00409E30                 jmp     ds:__imp__strnicmp
.text:00409E30 _strnicmp       endp
.text:00409E30
.text:00409E30 ; ---------------------------------------------------------------------------
.text:00409E36                 align 10h
.text:00409E40
.text:00409E40 ; =============== S U B R O U T I N E =======================================
.text:00409E40
.text:00409E40 ; Attributes: thunk
.text:00409E40
.text:00409E40 ; LPTOP_LEVEL_EXCEPTION_FILTER __stdcall SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.text:00409E40 SetUnhandledExceptionFilter proc near   ; CODE XREF: sub_401080+E↑p
.text:00409E40
.text:00409E40 lpTopLevelExceptionFilter= dword ptr  4
.text:00409E40
.text:00409E40                 jmp     ds:__imp_SetUnhandledExceptionFilter
.text:00409E40 SetUnhandledExceptionFilter endp
.text:00409E40
.text:00409E40 ; ---------------------------------------------------------------------------
.text:00409E46                 align 10h
.text:00409E50
.text:00409E50 ; =============== S U B R O U T I N E =======================================
.text:00409E50
.text:00409E50 ; Attributes: noreturn thunk
.text:00409E50
.text:00409E50 ; void __stdcall __noreturn ExitProcess(UINT uExitCode)
.text:00409E50 ExitProcess     proc near               ; CODE XREF: .text:00401174↑p
.text:00409E50
.text:00409E50 uExitCode       = dword ptr  4
.text:00409E50
.text:00409E50                 jmp     ds:__imp_ExitProcess
.text:00409E50 ExitProcess     endp
.text:00409E50
.text:00409E50 ; ---------------------------------------------------------------------------
.text:00409E56                 align 10h
.text:00409E60
.text:00409E60 ; =============== S U B R O U T I N E =======================================
.text:00409E60
.text:00409E60 ; Attributes: thunk
.text:00409E60
.text:00409E60 ; UINT __stdcall GetACP()
.text:00409E60 GetACP          proc near               ; CODE XREF: sub_406850+A↑p
.text:00409E60                 jmp     ds:__imp_GetACP
.text:00409E60 GetACP          endp
.text:00409E60
.text:00409E60 ; ---------------------------------------------------------------------------
.text:00409E66                 align 10h
.text:00409E70
.text:00409E70 ; =============== S U B R O U T I N E =======================================
.text:00409E70
.text:00409E70 ; Attributes: bp-based frame
.text:00409E70
.text:00409E70 sub_409E70      proc near               ; CODE XREF: _strtoull+1A1↑p
.text:00409E70
.text:00409E70 var_24          = dword ptr -24h
.text:00409E70 var_20          = dword ptr -20h
.text:00409E70 var_1C          = dword ptr -1Ch
.text:00409E70 var_18          = dword ptr -18h
.text:00409E70 var_14          = dword ptr -14h
.text:00409E70 var_C           = dword ptr -0Ch
.text:00409E70 var_8           = dword ptr -8
.text:00409E70 var_4           = dword ptr -4
.text:00409E70 arg_0           = dword ptr  8
.text:00409E70 arg_4           = dword ptr  0Ch
.text:00409E70 arg_8           = dword ptr  10h
.text:00409E70 arg_C           = dword ptr  14h
.text:00409E70
.text:00409E70                 push    ebp
.text:00409E71                 mov     ebp, esp
.text:00409E73                 sub     esp, 28h
.text:00409E76                 mov     [ebp+var_C], ebx
.text:00409E79                 mov     edx, [ebp+arg_C]
.text:00409E7C                 mov     ecx, [ebp+arg_0]
.text:00409E7F                 mov     [ebp+var_8], esi
.text:00409E82                 mov     eax, [ebp+arg_8]
.text:00409E85                 test    edx, edx
.text:00409E87                 mov     [ebp+var_4], edi
.text:00409E8A                 mov     ebx, [ebp+arg_4]
.text:00409E8D                 mov     esi, eax
.text:00409E8F                 mov     [ebp+var_18], 0
.text:00409E96                 mov     [ebp+var_14], 0
.text:00409E9D                 mov     [ebp+var_1C], ecx
.text:00409EA0                 jnz     short loc_409EF2
.text:00409EA2                 cmp     eax, ebx
.text:00409EA4                 jbe     short loc_409ED0
.text:00409EA6                 mov     eax, ecx
.text:00409EA8                 mov     edx, ebx
.text:00409EAA                 div     esi
.text:00409EAC                 mov     edi, eax
.text:00409EAE                 mov     esi, esi
.text:00409EB0
.text:00409EB0 loc_409EB0:                             ; CODE XREF: sub_409E70+88↓j
.text:00409EB0                                         ; sub_409E70+A4↓j ...
.text:00409EB0                 xor     ecx, ecx
.text:00409EB2
.text:00409EB2 loc_409EB2:                             ; CODE XREF: sub_409E70+80↓j
.text:00409EB2                 mov     [ebp+var_18], edi
.text:00409EB5                 mov     ebx, [ebp+var_C]
.text:00409EB8                 mov     eax, [ebp+var_18]
.text:00409EBB                 mov     [ebp+var_14], ecx
.text:00409EBE                 mov     esi, [ebp+var_8]
.text:00409EC1                 mov     edx, [ebp+var_14]
.text:00409EC4                 mov     edi, [ebp+var_4]
.text:00409EC7                 mov     esp, ebp
.text:00409EC9                 pop     ebp
.text:00409ECA                 retn
.text:00409ECA ; ---------------------------------------------------------------------------
.text:00409ECB                 align 10h
.text:00409ED0
.text:00409ED0 loc_409ED0:                             ; CODE XREF: sub_409E70+34↑j
.text:00409ED0                 test    eax, eax
.text:00409ED2                 jnz     short loc_409EE1
.text:00409ED4                 mov     eax, 1
.text:00409ED9                 xor     ecx, ecx
.text:00409EDB                 xor     edx, edx
.text:00409EDD                 div     ecx
.text:00409EDF                 mov     esi, eax
.text:00409EE1
.text:00409EE1 loc_409EE1:                             ; CODE XREF: sub_409E70+62↑j
.text:00409EE1                 mov     eax, ebx
.text:00409EE3                 xor     edx, edx
.text:00409EE5                 div     esi
.text:00409EE7                 mov     ecx, eax
.text:00409EE9                 mov     eax, [ebp+var_1C]
.text:00409EEC                 div     esi
.text:00409EEE                 mov     edi, eax
.text:00409EF0                 jmp     short loc_409EB2
.text:00409EF2 ; ---------------------------------------------------------------------------
.text:00409EF2
.text:00409EF2 loc_409EF2:                             ; CODE XREF: sub_409E70+30↑j
.text:00409EF2                 cmp     edx, ebx
.text:00409EF4                 jbe     short loc_409F00
.text:00409EF6                 xor     edi, edi
.text:00409EF8                 jmp     short loc_409EB0
.text:00409EF8 ; ---------------------------------------------------------------------------
.text:00409EFA                 align 10h
.text:00409F00
.text:00409F00 loc_409F00:                             ; CODE XREF: sub_409E70+84↑j
.text:00409F00                 bsr     eax, edx
.text:00409F03                 xor     eax, 1Fh
.text:00409F06                 mov     [ebp+var_20], eax
.text:00409F09                 jnz     short loc_409F20
.text:00409F0B                 cmp     ebx, edx
.text:00409F0D                 ja      short loc_409F16
.text:00409F0F                 xor     edi, edi
.text:00409F11                 cmp     [ebp+var_1C], esi
.text:00409F14                 jb      short loc_409EB0
.text:00409F16
.text:00409F16 loc_409F16:                             ; CODE XREF: sub_409E70+9D↑j
.text:00409F16                 mov     edi, 1
.text:00409F1B                 jmp     short loc_409EB0
.text:00409F1B ; ---------------------------------------------------------------------------
.text:00409F1D                 align 10h
.text:00409F20
.text:00409F20 loc_409F20:                             ; CODE XREF: sub_409E70+99↑j
.text:00409F20                 mov     eax, [ebp+var_20]
.text:00409F23                 mov     ecx, 20h ; ' '
.text:00409F28                 sub     ecx, eax
.text:00409F2A                 mov     [ebp+var_24], ecx
.text:00409F2D                 mov     eax, esi
.text:00409F2F                 movzx   ecx, byte ptr [ebp+var_20]
.text:00409F33                 shl     edx, cl
.text:00409F35                 mov     edi, edx
.text:00409F37                 movzx   ecx, byte ptr [ebp+var_24]
.text:00409F3B                 mov     edx, ebx
.text:00409F3D                 shr     eax, cl
.text:00409F3F                 movzx   ecx, byte ptr [ebp+var_20]
.text:00409F43                 or      edi, eax
.text:00409F45                 mov     eax, [ebp+var_1C]
.text:00409F48                 shl     esi, cl
.text:00409F4A                 movzx   ecx, byte ptr [ebp+var_24]
.text:00409F4E                 shr     edx, cl
.text:00409F50                 movzx   ecx, byte ptr [ebp+var_20]
.text:00409F54                 shl     ebx, cl
.text:00409F56                 movzx   ecx, byte ptr [ebp+var_24]
.text:00409F5A                 shr     eax, cl
.text:00409F5C                 or      ebx, eax
.text:00409F5E                 movzx   ecx, byte ptr [ebp+var_20]
.text:00409F62                 mov     eax, ebx
.text:00409F64                 div     edi
.text:00409F66                 mov     ebx, edx
.text:00409F68                 mov     edi, eax
.text:00409F6A                 shl     [ebp+var_1C], cl
.text:00409F6D                 mul     esi
.text:00409F6F                 cmp     edx, ebx
.text:00409F71                 ja      short loc_409F84
.text:00409F73                 cmp     edx, ebx
.text:00409F75                 jnz     loc_409EB0
.text:00409F7B                 cmp     eax, [ebp+var_1C]
.text:00409F7E                 jbe     loc_409EB0
.text:00409F84
.text:00409F84 loc_409F84:                             ; CODE XREF: sub_409E70+101↑j
.text:00409F84                 dec     edi
.text:00409F85                 jmp     loc_409EB0
.text:00409F85 sub_409E70      endp
.text:00409F85
.text:00409F85 ; ---------------------------------------------------------------------------
.text:00409F8A                 align 10h
.text:00409F90
.text:00409F90 ; =============== S U B R O U T I N E =======================================
.text:00409F90
.text:00409F90 ; Attributes: bp-based frame
.text:00409F90
.text:00409F90 sub_409F90      proc near               ; CODE XREF: _strtoll+18D↑p
.text:00409F90
.text:00409F90 var_2C          = dword ptr -2Ch
.text:00409F90 var_28          = dword ptr -28h
.text:00409F90 var_24          = dword ptr -24h
.text:00409F90 var_20          = dword ptr -20h
.text:00409F90 var_1C          = dword ptr -1Ch
.text:00409F90 var_14          = dword ptr -14h
.text:00409F90 arg_0           = dword ptr  8
.text:00409F90 arg_4           = dword ptr  0Ch
.text:00409F90 arg_8           = dword ptr  10h
.text:00409F90 arg_C           = dword ptr  14h
.text:00409F90
.text:00409F90                 push    ebp
.text:00409F91                 mov     ebp, esp
.text:00409F93                 push    edi
.text:00409F94                 push    esi
.text:00409F95                 push    ebx
.text:00409F96                 sub     esp, 24h
.text:00409F99                 mov     ebx, [ebp+arg_4]
.text:00409F9C                 mov     [ebp+var_20], 0
.text:00409FA3                 mov     ecx, [ebp+arg_0]
.text:00409FA6                 mov     eax, [ebp+arg_8]
.text:00409FA9                 mov     [ebp+var_1C], 0
.text:00409FB0                 test    ebx, ebx
.text:00409FB2                 mov     edx, [ebp+arg_C]
.text:00409FB5                 mov     [ebp+var_14], 0
.text:00409FBC                 js      loc_40A0D0
.text:00409FC2
.text:00409FC2 loc_409FC2:                             ; CODE XREF: sub_409F90+14E↓j
.text:00409FC2                 test    edx, edx
.text:00409FC4                 js      loc_40A0C0
.text:00409FCA
.text:00409FCA loc_409FCA:                             ; CODE XREF: sub_409F90+13A↓j
.text:00409FCA                 mov     [ebp+var_24], ecx
.text:00409FCD                 test    edx, edx
.text:00409FCF                 mov     esi, eax
.text:00409FD1                 jnz     short loc_40A026
.text:00409FD3                 cmp     eax, ebx
.text:00409FD5                 jbe     short loc_40A004
.text:00409FD7                 mov     eax, ecx
.text:00409FD9                 mov     edx, ebx
.text:00409FDB                 div     esi
.text:00409FDD                 mov     edi, eax
.text:00409FDF                 nop
.text:00409FE0
.text:00409FE0 loc_409FE0:                             ; CODE XREF: sub_409F90+9C↓j
.text:00409FE0                                         ; sub_409F90+B4↓j ...
.text:00409FE0                 xor     ecx, ecx
.text:00409FE2
.text:00409FE2 loc_409FE2:                             ; CODE XREF: sub_409F90+94↓j
.text:00409FE2                 mov     [ebp+var_1C], ecx
.text:00409FE5                 mov     ecx, [ebp+var_14]
.text:00409FE8                 mov     [ebp+var_20], edi
.text:00409FEB                 mov     eax, [ebp+var_20]
.text:00409FEE                 mov     edx, [ebp+var_1C]
.text:00409FF1                 test    ecx, ecx
.text:00409FF3                 jz      short loc_409FFC
.text:00409FF5                 neg     eax
.text:00409FF7                 adc     edx, 0
.text:00409FFA                 neg     edx
.text:00409FFC
.text:00409FFC loc_409FFC:                             ; CODE XREF: sub_409F90+63↑j
.text:00409FFC                 add     esp, 24h
.text:00409FFF                 pop     ebx
.text:0040A000                 pop     esi
.text:0040A001                 pop     edi
.text:0040A002                 pop     ebp
.text:0040A003                 retn
.text:0040A004 ; ---------------------------------------------------------------------------
.text:0040A004
.text:0040A004 loc_40A004:                             ; CODE XREF: sub_409F90+45↑j
.text:0040A004                 test    eax, eax
.text:0040A006                 jnz     short loc_40A015
.text:0040A008                 mov     eax, 1
.text:0040A00D                 xor     ecx, ecx
.text:0040A00F                 xor     edx, edx
.text:0040A011                 div     ecx
.text:0040A013                 mov     esi, eax
.text:0040A015
.text:0040A015 loc_40A015:                             ; CODE XREF: sub_409F90+76↑j
.text:0040A015                 mov     eax, ebx
.text:0040A017                 xor     edx, edx
.text:0040A019                 div     esi
.text:0040A01B                 mov     ecx, eax
.text:0040A01D                 mov     eax, [ebp+var_24]
.text:0040A020                 div     esi
.text:0040A022                 mov     edi, eax
.text:0040A024                 jmp     short loc_409FE2
.text:0040A026 ; ---------------------------------------------------------------------------
.text:0040A026
.text:0040A026 loc_40A026:                             ; CODE XREF: sub_409F90+41↑j
.text:0040A026                 cmp     edx, ebx
.text:0040A028                 jbe     short loc_40A030
.text:0040A02A                 xor     edi, edi
.text:0040A02C                 jmp     short loc_409FE0
.text:0040A02C ; ---------------------------------------------------------------------------
.text:0040A02E                 align 10h
.text:0040A030
.text:0040A030 loc_40A030:                             ; CODE XREF: sub_409F90+98↑j
.text:0040A030                 bsr     eax, edx
.text:0040A033                 xor     eax, 1Fh
.text:0040A036                 mov     [ebp+var_28], eax
.text:0040A039                 jnz     short loc_40A050
.text:0040A03B                 cmp     ebx, edx
.text:0040A03D                 ja      short loc_40A046
.text:0040A03F                 xor     edi, edi
.text:0040A041                 cmp     [ebp+var_24], esi
.text:0040A044                 jb      short loc_409FE0
.text:0040A046
.text:0040A046 loc_40A046:                             ; CODE XREF: sub_409F90+AD↑j
.text:0040A046                 mov     edi, 1
.text:0040A04B                 jmp     short loc_409FE0
.text:0040A04B ; ---------------------------------------------------------------------------
.text:0040A04D                 align 10h
.text:0040A050
.text:0040A050 loc_40A050:                             ; CODE XREF: sub_409F90+A9↑j
.text:0040A050                 mov     eax, [ebp+var_28]
.text:0040A053                 mov     ecx, 20h ; ' '
.text:0040A058                 sub     ecx, eax
.text:0040A05A                 mov     [ebp+var_2C], ecx
.text:0040A05D                 mov     eax, esi
.text:0040A05F                 movzx   ecx, byte ptr [ebp+var_28]
.text:0040A063                 shl     edx, cl
.text:0040A065                 mov     edi, edx
.text:0040A067                 movzx   ecx, byte ptr [ebp+var_2C]
.text:0040A06B                 mov     edx, ebx
.text:0040A06D                 shr     eax, cl
.text:0040A06F                 movzx   ecx, byte ptr [ebp+var_28]
.text:0040A073                 or      edi, eax
.text:0040A075                 mov     eax, [ebp+var_24]
.text:0040A078                 shl     esi, cl
.text:0040A07A                 movzx   ecx, byte ptr [ebp+var_2C]
.text:0040A07E                 shr     edx, cl
.text:0040A080                 movzx   ecx, byte ptr [ebp+var_28]
.text:0040A084                 shl     ebx, cl
.text:0040A086                 movzx   ecx, byte ptr [ebp+var_2C]
.text:0040A08A                 shr     eax, cl
.text:0040A08C                 or      ebx, eax
.text:0040A08E                 movzx   ecx, byte ptr [ebp+var_28]
.text:0040A092                 mov     eax, ebx
.text:0040A094                 div     edi
.text:0040A096                 mov     ebx, edx
.text:0040A098                 mov     edi, eax
.text:0040A09A                 shl     [ebp+var_24], cl
.text:0040A09D                 mul     esi
.text:0040A09F                 cmp     edx, ebx
.text:0040A0A1                 ja      short loc_40A0B4
.text:0040A0A3                 cmp     edx, ebx
.text:0040A0A5                 jnz     loc_409FE0
.text:0040A0AB                 cmp     eax, [ebp+var_24]
.text:0040A0AE                 jbe     loc_409FE0
.text:0040A0B4
.text:0040A0B4 loc_40A0B4:                             ; CODE XREF: sub_409F90+111↑j
.text:0040A0B4                 dec     edi
.text:0040A0B5                 jmp     loc_409FE0
.text:0040A0B5 ; ---------------------------------------------------------------------------
.text:0040A0BA                 align 10h
.text:0040A0C0
.text:0040A0C0 loc_40A0C0:                             ; CODE XREF: sub_409F90+34↑j
.text:0040A0C0                 not     [ebp+var_14]
.text:0040A0C3                 neg     eax
.text:0040A0C5                 adc     edx, 0
.text:0040A0C8                 neg     edx
.text:0040A0CA                 jmp     loc_409FCA
.text:0040A0CA ; ---------------------------------------------------------------------------
.text:0040A0CF                 align 10h
.text:0040A0D0
.text:0040A0D0 loc_40A0D0:                             ; CODE XREF: sub_409F90+2C↑j
.text:0040A0D0                 mov     [ebp+var_14], 0FFFFFFFFh
.text:0040A0D7                 neg     ecx
.text:0040A0D9                 adc     ebx, 0
.text:0040A0DC                 neg     ebx
.text:0040A0DE                 jmp     loc_409FC2
.text:0040A0DE sub_409F90      endp
.text:0040A0DE
.text:0040A0DE ; ---------------------------------------------------------------------------
.text:0040A0E3                 align 10h
.text:0040A0F0 dword_40A0F0    dd 0FFFFFFFFh           ; DATA XREF: .text:004071E9↑r
.text:0040A0F0                                         ; .text:loc_407210↑r ...
.text:0040A0F4 dword_40A0F4    dd 0                    ; DATA XREF: .text:loc_40721C↑r
.text:0040A0F4                                         ; sub_407240:loc_40728D↑r
.text:0040A0F8                 dd 0FFFFFFFFh
.text:0040A0FC dword_40A0FC    dd 41h dup(0)           ; DATA XREF: .data:off_40B084↓o
.text:0040A200                 dd 380h dup(?)
.text:0040A200 _text           ends
.text:0040A200
.data:0040B000 ; Section 2. (virtual address 0000B000)
.data:0040B000 ; Virtual size                  : 000000A0 (    160.)
.data:0040B000 ; Section size in file          : 00000200 (    512.)
.data:0040B000 ; Offset to raw data for section: 00009600
.data:0040B000 ; Flags C0000040: Data Readable Writable
.data:0040B000 ; Alignment     : default
.data:0040B000 ; ===========================================================================
.data:0040B000
.data:0040B000 ; Segment type: Pure data
.data:0040B000 ; Segment permissions: Read/Write
.data:0040B000 _data           segment para public 'DATA' use32
.data:0040B000                 assume cs:_data
.data:0040B000                 ;org 40B000h
.data:0040B000 dword_40B000    dd 0                    ; DATA XREF: sub_401080+1B↑o
.data:0040B000                                         ; sub_401080+CC↑r
.data:0040B004 dword_40B004    dd 0                    ; DATA XREF: sub_401080+41↑o
.data:0040B004                                         ; sub_401080+D4↑r
.data:0040B008                 align 10h
.data:0040B010 dword_40B010    dd 1                    ; DATA XREF: sub_403280+27↑w
.data:0040B010                                         ; sub_404AA0+3↑r ...
.data:0040B014 dword_40B014    dd 1                    ; DATA XREF: sub_403280+E↑r
.data:0040B014                                         ; sub_403280+14↑w ...
.data:0040B018 dword_40B018    dd 3Fh                  ; DATA XREF: sub_404AA0+7D↑w
.data:0040B018                                         ; .text:00404BAD↑w
.data:0040B01C                 align 10h
.data:0040B020 ; char *Buffer
.data:0040B020 Buffer          dd offset aCopyrightC2005
.data:0040B020                                         ; DATA XREF: sub_404FD0+DC↑r
.data:0040B020                                         ; "Copyright (C) 2005 Free Software Founda"...
.data:0040B024                 align 10h
.data:0040B030 ; int Code
.data:0040B030 Code            dd 1                    ; DATA XREF: sub_403370+6D↑r
.data:0040B030                                         ; sub_403370+9A↑r ...
.data:0040B034                 align 10h
.data:0040B040 dword_40B040    dd 1                    ; DATA XREF: sub_4064F0+22↑r
.data:0040B040                                         ; sub_4064F0+65↑r ...
.data:0040B044 dword_40B044    dd 100h                 ; DATA XREF: sub_4064F0+3F↑o
.data:0040B044                                         ; sub_4064F0+1A2↑r ...
.data:0040B048 off_40B048      dd offset unk_40C090    ; DATA XREF: sub_4064F0+1AA↑r
.data:0040B04C ; void *off_40B04C
.data:0040B04C off_40B04C      dd offset dword_40B044  ; DATA XREF: sub_4064F0+39↑r
.data:0040B04C                                         ; sub_4064F0+60↑w ...
.data:0040B050 dword_40B050    dd 0FFFFFFFFh           ; DATA XREF: sub_401080+22↑r
.data:0040B054                 align 10h
.data:0040B060 ; int Mode
.data:0040B060 Mode            dd 0                    ; DATA XREF: sub_401080+4E↑r
.data:0040B060                                         ; sub_401080+80↑r ...
.data:0040B064                 align 10h
.data:0040B070 dword_40B070    dd 4000h                ; DATA XREF: sub_401080+57↑w
.data:0040B070                                         ; sub_401080+BA↑r
.data:0040B074                 align 10h
.data:0040B080 dword_40B080    dd 0                    ; DATA XREF: sub_407240+9↑r
.data:0040B080                                         ; sub_407240+1D↑w
.data:0040B084 off_40B084      dd offset dword_40A0FC  ; DATA XREF: sub_4071B0+6↑r
.data:0040B084                                         ; sub_4071B0+17↑r ...
.data:0040B088                 align 1000h
.data:0040B088 _data           ends
.data:0040B088
.bss:0040C000 ; Section 3. (virtual address 0000C000)
.bss:0040C000 ; Virtual size                  : 000002A0 (    672.)
.bss:0040C000 ; Section size in file          : 00000000 (      0.)
.bss:0040C000 ; Offset to raw data for section: 00000000
.bss:0040C000 ; Flags C0000080: Bss Readable Writable
.bss:0040C000 ; Alignment     : default
.bss:0040C000 ; ===========================================================================
.bss:0040C000
.bss:0040C000 ; Segment type: Uninitialized
.bss:0040C000 ; Segment permissions: Read/Write
.bss:0040C000 _bss            segment para public 'BSS' use32
.bss:0040C000                 assume cs:_bss
.bss:0040C000                 ;org 40C000h
.bss:0040C000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:0040C000 dword_40C000    dd ?                    ; DATA XREF: sub_4013E0+71↑w
.bss:0040C000                                         ; sub_4013E0:loc_40155C↑r ...
.bss:0040C004                 align 10h
.bss:0040C010 byte_40C010     db ?                    ; DATA XREF: sub_4013E0+89↑w
.bss:0040C010                                         ; sub_401CE0+50B↑r ...
.bss:0040C011                 align 10h
.bss:0040C020 ; char *dword_40C020
.bss:0040C020 dword_40C020    dd ?                    ; DATA XREF: .text:00403344↑w
.bss:0040C020                                         ; sub_403370+58↑r
.bss:0040C024                 align 10h
.bss:0040C030 dword_40C030    dd ?                    ; DATA XREF: sub_403760+7↑r
.bss:0040C030                                         ; sub_403760+19E↑w
.bss:0040C034                 align 10h
.bss:0040C040 dword_40C040    dd ?                    ; DATA XREF: sub_403760:loc_40377B↑r
.bss:0040C040                                         ; sub_403760+4A↑r ...
.bss:0040C044                 align 10h
.bss:0040C050 dword_40C050    dd ?                    ; DATA XREF: sub_403760+25↑r
.bss:0040C050                                         ; sub_403760+6C↑r ...
.bss:0040C054                 align 10h
.bss:0040C060 dword_40C060    dd ?                    ; DATA XREF: sub_404AA0+9↑o
.bss:0040C060                                         ; sub_404AA0+17↑w ...
.bss:0040C064 dword_40C064    dd ?                    ; DATA XREF: sub_404AA0+21↑w
.bss:0040C064                                         ; .text:00404B59↑w
.bss:0040C068 dword_40C068    dd ?                    ; DATA XREF: sub_404AA0+77↑r
.bss:0040C068                                         ; .text:00404BA7↑r
.bss:0040C06C dword_40C06C    dd ?                    ; DATA XREF: sub_404AA0+6B↑r
.bss:0040C06C                                         ; .text:00404B9B↑r
.bss:0040C070                 db    ? ;
.bss:0040C071                 db    ? ;
.bss:0040C072                 db    ? ;
.bss:0040C073                 db    ? ;
.bss:0040C074                 db    ? ;
.bss:0040C075                 db    ? ;
.bss:0040C076                 db    ? ;
.bss:0040C077                 db    ? ;
.bss:0040C078                 db    ? ;
.bss:0040C079                 db    ? ;
.bss:0040C07A                 db    ? ;
.bss:0040C07B                 db    ? ;
.bss:0040C07C                 db    ? ;
.bss:0040C07D                 db    ? ;
.bss:0040C07E                 db    ? ;
.bss:0040C07F                 db    ? ;
.bss:0040C080                 db    ? ;
.bss:0040C081                 db    ? ;
.bss:0040C082                 db    ? ;
.bss:0040C083                 db    ? ;
.bss:0040C084                 db    ? ;
.bss:0040C085                 db    ? ;
.bss:0040C086                 db    ? ;
.bss:0040C087                 db    ? ;
.bss:0040C088                 db    ? ;
.bss:0040C089                 db    ? ;
.bss:0040C08A                 db    ? ;
.bss:0040C08B                 db    ? ;
.bss:0040C08C                 db    ? ;
.bss:0040C08D                 db    ? ;
.bss:0040C08E                 db    ? ;
.bss:0040C08F                 db    ? ;
.bss:0040C090 unk_40C090      db    ? ;               ; DATA XREF: sub_4064F0+100↑o
.bss:0040C090                                         ; .data:off_40B048↑o
.bss:0040C091                 db    ? ;
.bss:0040C092                 db    ? ;
.bss:0040C093                 db    ? ;
.bss:0040C094                 db    ? ;
.bss:0040C095                 db    ? ;
.bss:0040C096                 db    ? ;
.bss:0040C097                 db    ? ;
.bss:0040C098                 db    ? ;
.bss:0040C099                 db    ? ;
.bss:0040C09A                 db    ? ;
.bss:0040C09B                 db    ? ;
.bss:0040C09C                 db    ? ;
.bss:0040C09D                 db    ? ;
.bss:0040C09E                 db    ? ;
.bss:0040C09F                 db    ? ;
.bss:0040C0A0                 db    ? ;
.bss:0040C0A1                 db    ? ;
.bss:0040C0A2                 db    ? ;
.bss:0040C0A3                 db    ? ;
.bss:0040C0A4                 db    ? ;
.bss:0040C0A5                 db    ? ;
.bss:0040C0A6                 db    ? ;
.bss:0040C0A7                 db    ? ;
.bss:0040C0A8                 db    ? ;
.bss:0040C0A9                 db    ? ;
.bss:0040C0AA                 db    ? ;
.bss:0040C0AB                 db    ? ;
.bss:0040C0AC                 db    ? ;
.bss:0040C0AD                 db    ? ;
.bss:0040C0AE                 db    ? ;
.bss:0040C0AF                 db    ? ;
.bss:0040C0B0                 db    ? ;
.bss:0040C0B1                 db    ? ;
.bss:0040C0B2                 db    ? ;
.bss:0040C0B3                 db    ? ;
.bss:0040C0B4                 db    ? ;
.bss:0040C0B5                 db    ? ;
.bss:0040C0B6                 db    ? ;
.bss:0040C0B7                 db    ? ;
.bss:0040C0B8                 db    ? ;
.bss:0040C0B9                 db    ? ;
.bss:0040C0BA                 db    ? ;
.bss:0040C0BB                 db    ? ;
.bss:0040C0BC                 db    ? ;
.bss:0040C0BD                 db    ? ;
.bss:0040C0BE                 db    ? ;
.bss:0040C0BF                 db    ? ;
.bss:0040C0C0                 db    ? ;
.bss:0040C0C1                 db    ? ;
.bss:0040C0C2                 db    ? ;
.bss:0040C0C3                 db    ? ;
.bss:0040C0C4                 db    ? ;
.bss:0040C0C5                 db    ? ;
.bss:0040C0C6                 db    ? ;
.bss:0040C0C7                 db    ? ;
.bss:0040C0C8                 db    ? ;
.bss:0040C0C9                 db    ? ;
.bss:0040C0CA                 db    ? ;
.bss:0040C0CB                 db    ? ;
.bss:0040C0CC                 db    ? ;
.bss:0040C0CD                 db    ? ;
.bss:0040C0CE                 db    ? ;
.bss:0040C0CF                 db    ? ;
.bss:0040C0D0                 db    ? ;
.bss:0040C0D1                 db    ? ;
.bss:0040C0D2                 db    ? ;
.bss:0040C0D3                 db    ? ;
.bss:0040C0D4                 db    ? ;
.bss:0040C0D5                 db    ? ;
.bss:0040C0D6                 db    ? ;
.bss:0040C0D7                 db    ? ;
.bss:0040C0D8                 db    ? ;
.bss:0040C0D9                 db    ? ;
.bss:0040C0DA                 db    ? ;
.bss:0040C0DB                 db    ? ;
.bss:0040C0DC                 db    ? ;
.bss:0040C0DD                 db    ? ;
.bss:0040C0DE                 db    ? ;
.bss:0040C0DF                 db    ? ;
.bss:0040C0E0                 db    ? ;
.bss:0040C0E1                 db    ? ;
.bss:0040C0E2                 db    ? ;
.bss:0040C0E3                 db    ? ;
.bss:0040C0E4                 db    ? ;
.bss:0040C0E5                 db    ? ;
.bss:0040C0E6                 db    ? ;
.bss:0040C0E7                 db    ? ;
.bss:0040C0E8                 db    ? ;
.bss:0040C0E9                 db    ? ;
.bss:0040C0EA                 db    ? ;
.bss:0040C0EB                 db    ? ;
.bss:0040C0EC                 db    ? ;
.bss:0040C0ED                 db    ? ;
.bss:0040C0EE                 db    ? ;
.bss:0040C0EF                 db    ? ;
.bss:0040C0F0                 db    ? ;
.bss:0040C0F1                 db    ? ;
.bss:0040C0F2                 db    ? ;
.bss:0040C0F3                 db    ? ;
.bss:0040C0F4                 db    ? ;
.bss:0040C0F5                 db    ? ;
.bss:0040C0F6                 db    ? ;
.bss:0040C0F7                 db    ? ;
.bss:0040C0F8                 db    ? ;
.bss:0040C0F9                 db    ? ;
.bss:0040C0FA                 db    ? ;
.bss:0040C0FB                 db    ? ;
.bss:0040C0FC                 db    ? ;
.bss:0040C0FD                 db    ? ;
.bss:0040C0FE                 db    ? ;
.bss:0040C0FF                 db    ? ;
.bss:0040C100                 db    ? ;
.bss:0040C101                 db    ? ;
.bss:0040C102                 db    ? ;
.bss:0040C103                 db    ? ;
.bss:0040C104                 db    ? ;
.bss:0040C105                 db    ? ;
.bss:0040C106                 db    ? ;
.bss:0040C107                 db    ? ;
.bss:0040C108                 db    ? ;
.bss:0040C109                 db    ? ;
.bss:0040C10A                 db    ? ;
.bss:0040C10B                 db    ? ;
.bss:0040C10C                 db    ? ;
.bss:0040C10D                 db    ? ;
.bss:0040C10E                 db    ? ;
.bss:0040C10F                 db    ? ;
.bss:0040C110                 db    ? ;
.bss:0040C111                 db    ? ;
.bss:0040C112                 db    ? ;
.bss:0040C113                 db    ? ;
.bss:0040C114                 db    ? ;
.bss:0040C115                 db    ? ;
.bss:0040C116                 db    ? ;
.bss:0040C117                 db    ? ;
.bss:0040C118                 db    ? ;
.bss:0040C119                 db    ? ;
.bss:0040C11A                 db    ? ;
.bss:0040C11B                 db    ? ;
.bss:0040C11C                 db    ? ;
.bss:0040C11D                 db    ? ;
.bss:0040C11E                 db    ? ;
.bss:0040C11F                 db    ? ;
.bss:0040C120                 db    ? ;
.bss:0040C121                 db    ? ;
.bss:0040C122                 db    ? ;
.bss:0040C123                 db    ? ;
.bss:0040C124                 db    ? ;
.bss:0040C125                 db    ? ;
.bss:0040C126                 db    ? ;
.bss:0040C127                 db    ? ;
.bss:0040C128                 db    ? ;
.bss:0040C129                 db    ? ;
.bss:0040C12A                 db    ? ;
.bss:0040C12B                 db    ? ;
.bss:0040C12C                 db    ? ;
.bss:0040C12D                 db    ? ;
.bss:0040C12E                 db    ? ;
.bss:0040C12F                 db    ? ;
.bss:0040C130                 db    ? ;
.bss:0040C131                 db    ? ;
.bss:0040C132                 db    ? ;
.bss:0040C133                 db    ? ;
.bss:0040C134                 db    ? ;
.bss:0040C135                 db    ? ;
.bss:0040C136                 db    ? ;
.bss:0040C137                 db    ? ;
.bss:0040C138                 db    ? ;
.bss:0040C139                 db    ? ;
.bss:0040C13A                 db    ? ;
.bss:0040C13B                 db    ? ;
.bss:0040C13C                 db    ? ;
.bss:0040C13D                 db    ? ;
.bss:0040C13E                 db    ? ;
.bss:0040C13F                 db    ? ;
.bss:0040C140                 db    ? ;
.bss:0040C141                 db    ? ;
.bss:0040C142                 db    ? ;
.bss:0040C143                 db    ? ;
.bss:0040C144                 db    ? ;
.bss:0040C145                 db    ? ;
.bss:0040C146                 db    ? ;
.bss:0040C147                 db    ? ;
.bss:0040C148                 db    ? ;
.bss:0040C149                 db    ? ;
.bss:0040C14A                 db    ? ;
.bss:0040C14B                 db    ? ;
.bss:0040C14C                 db    ? ;
.bss:0040C14D                 db    ? ;
.bss:0040C14E                 db    ? ;
.bss:0040C14F                 db    ? ;
.bss:0040C150                 db    ? ;
.bss:0040C151                 db    ? ;
.bss:0040C152                 db    ? ;
.bss:0040C153                 db    ? ;
.bss:0040C154                 db    ? ;
.bss:0040C155                 db    ? ;
.bss:0040C156                 db    ? ;
.bss:0040C157                 db    ? ;
.bss:0040C158                 db    ? ;
.bss:0040C159                 db    ? ;
.bss:0040C15A                 db    ? ;
.bss:0040C15B                 db    ? ;
.bss:0040C15C                 db    ? ;
.bss:0040C15D                 db    ? ;
.bss:0040C15E                 db    ? ;
.bss:0040C15F                 db    ? ;
.bss:0040C160                 db    ? ;
.bss:0040C161                 db    ? ;
.bss:0040C162                 db    ? ;
.bss:0040C163                 db    ? ;
.bss:0040C164                 db    ? ;
.bss:0040C165                 db    ? ;
.bss:0040C166                 db    ? ;
.bss:0040C167                 db    ? ;
.bss:0040C168                 db    ? ;
.bss:0040C169                 db    ? ;
.bss:0040C16A                 db    ? ;
.bss:0040C16B                 db    ? ;
.bss:0040C16C                 db    ? ;
.bss:0040C16D                 db    ? ;
.bss:0040C16E                 db    ? ;
.bss:0040C16F                 db    ? ;
.bss:0040C170                 db    ? ;
.bss:0040C171                 db    ? ;
.bss:0040C172                 db    ? ;
.bss:0040C173                 db    ? ;
.bss:0040C174                 db    ? ;
.bss:0040C175                 db    ? ;
.bss:0040C176                 db    ? ;
.bss:0040C177                 db    ? ;
.bss:0040C178                 db    ? ;
.bss:0040C179                 db    ? ;
.bss:0040C17A                 db    ? ;
.bss:0040C17B                 db    ? ;
.bss:0040C17C                 db    ? ;
.bss:0040C17D                 db    ? ;
.bss:0040C17E                 db    ? ;
.bss:0040C17F                 db    ? ;
.bss:0040C180                 db    ? ;
.bss:0040C181                 db    ? ;
.bss:0040C182                 db    ? ;
.bss:0040C183                 db    ? ;
.bss:0040C184                 db    ? ;
.bss:0040C185                 db    ? ;
.bss:0040C186                 db    ? ;
.bss:0040C187                 db    ? ;
.bss:0040C188                 db    ? ;
.bss:0040C189                 db    ? ;
.bss:0040C18A                 db    ? ;
.bss:0040C18B                 db    ? ;
.bss:0040C18C                 db    ? ;
.bss:0040C18D                 db    ? ;
.bss:0040C18E                 db    ? ;
.bss:0040C18F                 db    ? ;
.bss:0040C190 dword_40C190    dd ?                    ; DATA XREF: .text:loc_405E81↑o
.bss:0040C190                                         ; .text:loc_405EA0↑o ...
.bss:0040C194 dword_40C194    dd ?                    ; DATA XREF: .text:loc_405F20↑o
.bss:0040C194                                         ; .text:004063A8↑r ...
.bss:0040C198 dword_40C198    dd ?                    ; DATA XREF: .text:004063A2↑r
.bss:0040C198                                         ; sub_406450+2C↑r
.bss:0040C19C dword_40C19C    dd ?                    ; DATA XREF: .text:00406396↑r
.bss:0040C19C                                         ; sub_406450+22↑r
.bss:0040C1A0 dword_40C1A0    dd ?                    ; DATA XREF: .text:004063B2↑r
.bss:0040C1A0                                         ; sub_406450+36↑r
.bss:0040C1A4 dword_40C1A4    dd ?                    ; DATA XREF: .text:004063C2↑r
.bss:0040C1A4                                         ; sub_406450+4E↑r
.bss:0040C1A8 dword_40C1A8    dd ?                    ; DATA XREF: .text:004063DF↑r
.bss:0040C1A8                                         ; sub_406450+62↑r
.bss:0040C1AC dword_40C1AC    dd ?                    ; DATA XREF: .text:004063D5↑r
.bss:0040C1AC                                         ; sub_406450+70↑r
.bss:0040C1B0 dword_40C1B0    dd ?                    ; DATA XREF: .text:004063B8↑r
.bss:0040C1B0                                         ; sub_406450+7A↑r
.bss:0040C1B4                 align 10h
.bss:0040C1C0 ; char Str1[16]
.bss:0040C1C0 Str1            db 10h dup(?)           ; DATA XREF: sub_406850+1↑o
.bss:0040C1C0                                         ; sub_406850+1B↑o
.bss:0040C1D0 ; char *Str2
.bss:0040C1D0 Str2            dd ?                    ; DATA XREF: sub_406850:loc_40687B↑r
.bss:0040C1D0                                         ; sub_406850+A0↑w
.bss:0040C1D4                 align 10h
.bss:0040C1E0 ; char *dword_40C1E0
.bss:0040C1E0 dword_40C1E0    dd ?                    ; DATA XREF: sub_406A74:loc_406AAD↑w
.bss:0040C1E0                                         ; sub_406A74:loc_406BE0↑r
.bss:0040C1E4                 align 10h
.bss:0040C1F0 dword_40C1F0    dd ?                    ; DATA XREF: sub_406A74+2D↑r
.bss:0040C1F0                                         ; sub_406A74+3F↑w
.bss:0040C1F4                 align 10h
.bss:0040C200 dword_40C200    dd ?                    ; DATA XREF: sub_4013E0+2F↑w
.bss:0040C200                                         ; sub_4013E0+122↑r ...
.bss:0040C204                 align 20h
.bss:0040C220 dword_40C220    dd ?                    ; DATA XREF: sub_404AA0+71↑w
.bss:0040C220                                         ; .text:00404BA1↑w
.bss:0040C224                 align 10h
.bss:0040C230 dword_40C230    dd ?                    ; CODE XREF: sub_406A74+63↑p
.bss:0040C230                                         ; DATA XREF: sub_406970+1E↑r ...
.bss:0040C234                 align 10h
.bss:0040C240 dword_40C240    dd ?                    ; DATA XREF: sub_406970+4E↑w
.bss:0040C240                                         ; sub_406A74+AB↑w
.bss:0040C244                 db    ? ;
.bss:0040C245                 db    ? ;
.bss:0040C246                 db    ? ;
.bss:0040C247                 db    ? ;
.bss:0040C248                 db    ? ;
.bss:0040C249                 db    ? ;
.bss:0040C24A                 db    ? ;
.bss:0040C24B                 db    ? ;
.bss:0040C24C                 db    ? ;
.bss:0040C24D                 db    ? ;
.bss:0040C24E                 db    ? ;
.bss:0040C24F                 db    ? ;
.bss:0040C250                 db    ? ;
.bss:0040C251                 db    ? ;
.bss:0040C252                 db    ? ;
.bss:0040C253                 db    ? ;
.bss:0040C254                 db    ? ;
.bss:0040C255                 db    ? ;
.bss:0040C256                 db    ? ;
.bss:0040C257                 db    ? ;
.bss:0040C258                 db    ? ;
.bss:0040C259                 db    ? ;
.bss:0040C25A                 db    ? ;
.bss:0040C25B                 db    ? ;
.bss:0040C25C                 db    ? ;
.bss:0040C25D                 db    ? ;
.bss:0040C25E                 db    ? ;
.bss:0040C25F                 db    ? ;
.bss:0040C260                 db    ? ;
.bss:0040C261                 db    ? ;
.bss:0040C262                 db    ? ;
.bss:0040C263                 db    ? ;
.bss:0040C264                 db    ? ;
.bss:0040C265                 db    ? ;
.bss:0040C266                 db    ? ;
.bss:0040C267                 db    ? ;
.bss:0040C268                 db    ? ;
.bss:0040C269                 db    ? ;
.bss:0040C26A                 db    ? ;
.bss:0040C26B                 db    ? ;
.bss:0040C26C                 db    ? ;
.bss:0040C26D                 db    ? ;
.bss:0040C26E                 db    ? ;
.bss:0040C26F                 db    ? ;
.bss:0040C270 dword_40C270    dd ?                    ; DATA XREF: sub_406A74+13↑r
.bss:0040C274                 align 1000h
.bss:0040C274 _bss            ends
.bss:0040C274
.idata:0040D000 ; Section 4. (virtual address 0000D000)
.idata:0040D000 ; Virtual size                  : 00000608 (   1544.)
.idata:0040D000 ; Section size in file          : 00000800 (   2048.)
.idata:0040D000 ; Offset to raw data for section: 00009800
.idata:0040D000 ; Flags C0000040: Data Readable Writable
.idata:0040D000 ; Alignment     : default
.idata:0040D000 ; ===========================================================================
.idata:0040D000
.idata:0040D000 ; Segment type: Externs
.idata:0040D000 ; _idata
.idata:0040D000
.idata:0040D001
.idata:0040D16C ;
.idata:0040D16C ; Imports from libiconv2.dll
.idata:0040D16C ;
.idata:0040D16C                 extrn libiconv:dword    ; CODE XREF: sub_403760+99↑p
.idata:0040D16C                                         ; sub_403760+CB↑p
.idata:0040D16C                                         ; DATA XREF: ...
.idata:0040D170                 extrn libiconv_open:dword
.idata:0040D170                                         ; CODE XREF: sub_403760+1B3↑p
.idata:0040D170                                         ; sub_403760+1D0↑p
.idata:0040D170                                         ; DATA XREF: ...
.idata:0040D174
.idata:0040D17C ;
.idata:0040D17C ; Imports from libintl3.dll
.idata:0040D17C ;
.idata:0040D17C                 extrn libintl_bindtextdomain:dword
.idata:0040D17C                                         ; CODE XREF: sub_4013E0+49↑p
.idata:0040D17C                                         ; DATA XREF: sub_4013E0+49↑r ...
.idata:0040D180                 extrn libintl_gettext:dword
.idata:0040D180                                         ; CODE XREF: sub_4013E0+F1↑p
.idata:0040D180                                         ; sub_4013E0+116↑p ...
.idata:0040D184                 extrn libintl_textdomain:dword
.idata:0040D184                                         ; CODE XREF: sub_4013E0+56↑p
.idata:0040D184                                         ; DATA XREF: sub_4013E0+56↑r ...
.idata:0040D188
.idata:0040D190 ;
.idata:0040D190 ; Imports from KERNEL32.dll
.idata:0040D190 ;
.idata:0040D190 ; void (__stdcall __noreturn *ExitProcess)(UINT uExitCode)
.idata:0040D190                 extrn __imp_ExitProcess:dword
.idata:0040D190                                         ; DATA XREF: ExitProcess↑r
.idata:0040D194 ; UINT (__stdcall *GetACP)()
.idata:0040D194                 extrn __imp_GetACP:dword
.idata:0040D194                                         ; DATA XREF: GetACP↑r
.idata:0040D198 ; LPTOP_LEVEL_EXCEPTION_FILTER (__stdcall *SetUnhandledExceptionFilter)(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.idata:0040D198                 extrn __imp_SetUnhandledExceptionFilter:dword
.idata:0040D198                                         ; DATA XREF: SetUnhandledExceptionFilter↑r
.idata:0040D19C
.idata:0040D1A4 ;
.idata:0040D1A4 ; Imports from MSVCP60.DLL
.idata:0040D1A4 ;
.idata:0040D1A4 ; size_t (__cdecl *mbrtowc)(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.idata:0040D1A4                 extrn __imp_mbrtowc:dword
.idata:0040D1A4                                         ; DATA XREF: mbrtowc↑r
.idata:0040D1A8
.idata:0040D1B0 ;
.idata:0040D1B0 ; Imports from msvcrt.dll
.idata:0040D1B0 ;
.idata:0040D1B0                 extrn __imp___getmainargs:dword
.idata:0040D1B0                                         ; DATA XREF: __getmainargs↑r
.idata:0040D1B4 ; int _mb_cur_max
.idata:0040D1B4                 extrn __mb_cur_max:dword
.idata:0040D1B4                                         ; DATA XREF: sub_402550+183↑r
.idata:0040D1B4                                         ; sub_402550+303↑r ...
.idata:0040D1B8 ; char ***(__cdecl *__p__environ)()
.idata:0040D1B8                 extrn __imp___p__environ:dword
.idata:0040D1B8                                         ; DATA XREF: __p__environ↑r
.idata:0040D1BC ; int *(__cdecl *__p__fmode)()
.idata:0040D1BC                 extrn __imp___p__fmode:dword
.idata:0040D1BC                                         ; DATA XREF: __p__fmode↑r
.idata:0040D1C0 ; void (__cdecl *_set_app_type)(_crt_app_type Type)
.idata:0040D1C0                 extrn __set_app_type:dword
.idata:0040D1C0                                         ; CODE XREF: start+D↑p
.idata:0040D1C0                                         ; .text:0040102D↑p
.idata:0040D1C0                                         ; DATA XREF: ...
.idata:0040D1C4 ; void (__cdecl *_cexit)()
.idata:0040D1C4                 extrn __imp__cexit:dword
.idata:0040D1C4                                         ; DATA XREF: _cexit↑r
.idata:0040D1C8 ; int *(__cdecl *_errno)()
.idata:0040D1C8                 extrn __imp__errno:dword
.idata:0040D1C8                                         ; DATA XREF: _errno↑r
.idata:0040D1CC ; int (__cdecl *_flsbuf)(int Ch, FILE *File)
.idata:0040D1CC                 extrn __imp__flsbuf:dword
.idata:0040D1CC                                         ; DATA XREF: _flsbuf↑r
.idata:0040D1D0 ; FILE iob[]
.idata:0040D1D0                 extrn _iob:dword        ; DATA XREF: sub_401080+5C↑r
.idata:0040D1D0                                         ; sub_401080+75↑r ...
.idata:0040D1D4 ; int (__cdecl *_isctype)(int C, int Type)
.idata:0040D1D4                 extrn __imp__isctype:dword
.idata:0040D1D4                                         ; DATA XREF: _isctype↑r
.idata:0040D1D8 ; _onexit_t (__cdecl *onexit)(_onexit_t Func)
.idata:0040D1D8                 extrn _onexit:dword     ; CODE XREF: .text:0040106C↑p
.idata:0040D1D8                                         ; DATA XREF: .text:0040106C↑r
.idata:0040D1DC ; const unsigned __int16 *pctype
.idata:0040D1DC                 extrn _pctype:dword     ; DATA XREF: sub_402550:loc_402800↑r
.idata:0040D1DC                                         ; sub_402550:loc_4028E0↑r ...
.idata:0040D1E0 ; int (__cdecl *_setmode)(int FileHandle, int Mode)
.idata:0040D1E0                 extrn __imp__setmode:dword
.idata:0040D1E0                                         ; DATA XREF: _setmode↑r
.idata:0040D1E4 ; int (__cdecl *_strnicmp)(const char *String1, const char *String2, size_t MaxCount)
.idata:0040D1E4                 extrn __imp__strnicmp:dword
.idata:0040D1E4                                         ; DATA XREF: _strnicmp↑r
.idata:0040D1E8 ; void (__cdecl __noreturn *abort)()
.idata:0040D1E8                 extrn __imp_abort:dword ; DATA XREF: abort↑r
.idata:0040D1EC ; int (__cdecl *atexit)(void (__cdecl *)())
.idata:0040D1EC                 extrn atexit:dword      ; CODE XREF: sub_401040+C↑p
.idata:0040D1EC                                         ; DATA XREF: sub_401040+C↑r
.idata:0040D1F0 ; void *(__cdecl *calloc)(size_t Count, size_t Size)
.idata:0040D1F0                 extrn __imp_calloc:dword
.idata:0040D1F0                                         ; DATA XREF: calloc↑r
.idata:0040D1F4 ; void (__cdecl __noreturn *exit)(int Code)
.idata:0040D1F4                 extrn __imp_exit:dword  ; DATA XREF: exit↑r
.idata:0040D1F8 ; int (__cdecl *fclose)(FILE *Stream)
.idata:0040D1F8                 extrn __imp_fclose:dword
.idata:0040D1F8                                         ; DATA XREF: fclose↑r
.idata:0040D1FC ; int (__cdecl *fflush)(FILE *Stream)
.idata:0040D1FC                 extrn __imp_fflush:dword
.idata:0040D1FC                                         ; DATA XREF: fflush↑r
.idata:0040D200 ; int (*fprintf)(FILE *const Stream, const char *const Format, ...)
.idata:0040D200                 extrn __imp_fprintf:dword
.idata:0040D200                                         ; DATA XREF: fprintf↑r
.idata:0040D204 ; int (__cdecl *fputs)(const char *Buffer, FILE *Stream)
.idata:0040D204                 extrn __imp_fputs:dword ; DATA XREF: fputs↑r
.idata:0040D208 ; void (__cdecl *free)(void *Block)
.idata:0040D208                 extrn __imp_free:dword  ; DATA XREF: free↑r
.idata:0040D20C ; size_t (__cdecl *fwrite)(const void *Buffer, size_t ElementSize, size_t ElementCount, FILE *Stream)
.idata:0040D20C                 extrn __imp_fwrite:dword
.idata:0040D20C                                         ; DATA XREF: fwrite↑r
.idata:0040D210 ; char *(__cdecl *getenv)(const char *VarName)
.idata:0040D210                 extrn __imp_getenv:dword
.idata:0040D210                                         ; DATA XREF: getenv↑r
.idata:0040D214 ; int (__cdecl *iswctype)(wint_t C, wctype_t Type)
.idata:0040D214                 extrn __imp_iswctype:dword
.idata:0040D214                                         ; DATA XREF: iswctype↑r
.idata:0040D218 ; struct lconv *(__cdecl *localeconv)()
.idata:0040D218                 extrn __imp_localeconv:dword
.idata:0040D218                                         ; DATA XREF: localeconv↑r
.idata:0040D21C ; void *(__cdecl *malloc)(size_t Size)
.idata:0040D21C                 extrn __imp_malloc:dword
.idata:0040D21C                                         ; DATA XREF: malloc↑r
.idata:0040D220 ; void *(__cdecl *memcpy)(void *, const void *Src, size_t Size)
.idata:0040D220                 extrn __imp_memcpy:dword
.idata:0040D220                                         ; DATA XREF: memcpy↑r
.idata:0040D224 ; void *(__cdecl *memset)(void *, int Val, size_t Size)
.idata:0040D224                 extrn __imp_memset:dword
.idata:0040D224                                         ; DATA XREF: memset↑r
.idata:0040D228 ; int (*printf)(const char *const Format, ...)
.idata:0040D228                 extrn __imp_printf:dword
.idata:0040D228                                         ; DATA XREF: printf↑r
.idata:0040D22C ; void *(__cdecl *realloc)(void *Block, size_t Size)
.idata:0040D22C                 extrn __imp_realloc:dword
.idata:0040D22C                                         ; DATA XREF: realloc↑r
.idata:0040D230 ; char *(__cdecl *setlocale)(int Category, const char *Locale)
.idata:0040D230                 extrn __imp_setlocale:dword
.idata:0040D230                                         ; DATA XREF: setlocale↑r
.idata:0040D234 ; _crt_signal_t (__cdecl *signal)(int Signal, _crt_signal_t Function)
.idata:0040D234                 extrn __imp_signal:dword
.idata:0040D234                                         ; DATA XREF: signal↑r
.idata:0040D238 ; int (*sprintf)(char *const Buffer, const char *const Format, ...)
.idata:0040D238                 extrn __imp_sprintf:dword
.idata:0040D238                                         ; DATA XREF: sprintf↑r
.idata:0040D23C ; char *(__cdecl *strchr)(const char *Str, int Val)
.idata:0040D23C                 extrn __imp_strchr:dword
.idata:0040D23C                                         ; DATA XREF: strchr↑r
.idata:0040D240 ; int (__cdecl *strcmp)(const char *Str1, const char *Str2)
.idata:0040D240                 extrn __imp_strcmp:dword
.idata:0040D240                                         ; DATA XREF: strcmp↑r
.idata:0040D244 ; char *(__cdecl *strerror)(int ErrorMessage)
.idata:0040D244                 extrn __imp_strerror:dword
.idata:0040D244                                         ; DATA XREF: strerror↑r
.idata:0040D248 ; size_t (__cdecl *strlen)(const char *Str)
.idata:0040D248                 extrn __imp_strlen:dword
.idata:0040D248                                         ; DATA XREF: strlen↑r
.idata:0040D24C ; int (__cdecl *strncmp)(const char *Str1, const char *Str2, size_t MaxCount)
.idata:0040D24C                 extrn __imp_strncmp:dword
.idata:0040D24C                                         ; DATA XREF: strncmp↑r
.idata:0040D250 ; int (__cdecl *vfprintf)(FILE *const Stream, const char *const Format, va_list ArgList)
.idata:0040D250                 extrn __imp_vfprintf:dword
.idata:0040D250                                         ; DATA XREF: vfprintf↑r
.idata:0040D254
.idata:0040D254
.idata:0040D254
.idata:0040D254                 end start
