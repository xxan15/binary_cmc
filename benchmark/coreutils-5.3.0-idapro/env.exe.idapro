.text:00401000 ;
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
.text:00401000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
.text:00401000 ; |                      License info: 48-357D-7BC4-C6                      |
.text:00401000 ; |                              Virginia Tech                              |
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ;
.text:00401000 ; Input SHA256 : D2EF28580466384C4EE8C3E598975203DAC1A895FD4890F8EC24A55E95BF4E72
.text:00401000 ; Input MD5    : 587DE578254A61AA86D60FF8820E75A9
.text:00401000 ; Input CRC32  : A0AFE73C
.text:00401000
.text:00401000 ; File Name   : /home/cindy/Documents/Projects/binary_cmc/benchmark/coreutils-5.3.0-bin/bin/env.exe
.text:00401000 ; Format      : Portable executable for 80386 (PE)
.text:00401000 ; Imagebase   : 400000
.text:00401000 ; Timestamp   : 4266A267 (Wed Apr 20 18:41:43 2005)
.text:00401000 ; Section 1. (virtual address 00001000)
.text:00401000 ; Virtual size                  : 000041F0 (  16880.)
.text:00401000 ; Section size in file          : 00004200 (  16896.)
.text:00401000 ; Offset to raw data for section: 00000400
.text:00401000 ; Flags 60000020: Text Executable Readable
.text:00401000 ; Alignment     : default
.text:00401000
.text:00401000                 .686p
.text:00401000                 .mmx
.text:00401000                 .model flat
.text:00401000
.text:00401000 ; ===========================================================================
.text:00401000
.text:00401000 ; Segment type: Pure code
.text:00401000 ; Segment permissions: Read/Execute
.text:00401000 _text           segment para public 'CODE' use32
.text:00401000                 assume cs:_text
.text:00401000                 ;org 401000h
.text:00401000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00401000
.text:00401000 ; =============== S U B R O U T I N E =======================================
.text:00401000
.text:00401000 ; Attributes: noreturn bp-based frame
.text:00401000
.text:00401000                 public start
.text:00401000 start           proc near
.text:00401000
.text:00401000 Type            = dword ptr -8
.text:00401000
.text:00401000                 push    ebp
.text:00401001                 mov     ebp, esp
.text:00401003                 sub     esp, 8
.text:00401006                 mov     [esp+8+Type], 1 ; Type
.text:0040100D                 call    ds:__set_app_type
.text:00401013                 call    sub_401080
.text:00401013 start           endp
.text:00401013
.text:00401018 ; ---------------------------------------------------------------------------
.text:00401018                 mov     esp, ebp
.text:0040101A                 xor     eax, eax
.text:0040101C                 pop     ebp
.text:0040101D                 retn
.text:0040101D ; ---------------------------------------------------------------------------
.text:0040101E                 align 10h
.text:00401020                 push    ebp
.text:00401021                 mov     ebp, esp
.text:00401023                 sub     esp, 8
.text:00401026                 mov     dword ptr [esp], 2
.text:0040102D                 call    ds:__set_app_type
.text:00401033                 call    sub_401080
.text:00401038 ; ---------------------------------------------------------------------------
.text:00401038                 mov     esp, ebp
.text:0040103A                 xor     eax, eax
.text:0040103C                 pop     ebp
.text:0040103D                 retn
.text:0040103D ; ---------------------------------------------------------------------------
.text:0040103E                 align 10h
.text:00401040
.text:00401040 ; =============== S U B R O U T I N E =======================================
.text:00401040
.text:00401040 ; Attributes: bp-based frame
.text:00401040
.text:00401040 ; int __cdecl sub_401040(void (__cdecl *)())
.text:00401040 sub_401040      proc near               ; CODE XREF: sub_4015C0+67↓p
.text:00401040                                         ; .text:00404E90↓p ...
.text:00401040
.text:00401040 var_8           = dword ptr -8
.text:00401040 arg_0           = dword ptr  8
.text:00401040
.text:00401040                 push    ebp
.text:00401041                 mov     ebp, esp
.text:00401043                 sub     esp, 8
.text:00401046                 mov     edx, [ebp+arg_0]
.text:00401049                 mov     [esp+8+var_8], edx ; void (__cdecl *)()
.text:0040104C                 call    ds:atexit
.text:00401052                 mov     esp, ebp
.text:00401054                 pop     ebp
.text:00401055                 retn
.text:00401055 sub_401040      endp
.text:00401055
.text:00401055 ; ---------------------------------------------------------------------------
.text:00401056                 align 10h
.text:00401060                 push    ebp
.text:00401061                 mov     ebp, esp
.text:00401063                 sub     esp, 8
.text:00401066                 mov     edx, [ebp+8]
.text:00401069                 mov     [esp], edx
.text:0040106C                 call    ds:_onexit
.text:00401072                 mov     esp, ebp
.text:00401074                 pop     ebp
.text:00401075                 retn
.text:00401075 ; ---------------------------------------------------------------------------
.text:00401076                 align 10h
.text:00401080
.text:00401080 ; =============== S U B R O U T I N E =======================================
.text:00401080
.text:00401080 ; Attributes: noreturn bp-based frame
.text:00401080
.text:00401080 sub_401080      proc near               ; CODE XREF: start+13↑p
.text:00401080                                         ; .text:00401033↑p
.text:00401080
.text:00401080 lpTopLevelExceptionFilter= dword ptr -28h
.text:00401080 Mode            = dword ptr -24h
.text:00401080 var_20          = dword ptr -20h
.text:00401080 var_1C          = dword ptr -1Ch
.text:00401080 var_18          = dword ptr -18h
.text:00401080 var_C           = byte ptr -0Ch
.text:00401080 var_8           = dword ptr -8
.text:00401080
.text:00401080                 push    ebp
.text:00401081                 mov     ebp, esp
.text:00401083                 push    ebx
.text:00401084                 sub     esp, 24h
.text:00401087                 mov     [esp+28h+lpTopLevelExceptionFilter], offset TopLevelExceptionFilter ; lpTopLevelExceptionFilter
.text:0040108E                 call    SetUnhandledExceptionFilter
.text:00401093                 sub     esp, 4
.text:00401096                 call    sub_404E30
.text:0040109B                 mov     [esp+28h+lpTopLevelExceptionFilter], offset dword_406000
.text:004010A2                 mov     edx, dword_406050
.text:004010A8                 lea     ecx, [ebp+var_8]
.text:004010AB                 mov     [ebp+var_8], 0
.text:004010B2                 mov     [esp+28h+var_18], ecx
.text:004010B6                 mov     [esp+28h+var_1C], edx
.text:004010BA                 lea     edx, [ebp+var_C]
.text:004010BD                 mov     [esp+28h+var_20], edx
.text:004010C1                 mov     [esp+28h+Mode], offset dword_406004
.text:004010C9                 call    __getmainargs
.text:004010CE                 mov     eax, Mode
.text:004010D3                 test    eax, eax
.text:004010D5                 jz      short loc_401135
.text:004010D7                 mov     dword_406070, eax
.text:004010DC                 mov     edx, ds:_iob
.text:004010E2                 test    edx, edx
.text:004010E4                 jz      short loc_4010FB
.text:004010E6                 mov     [esp+28h+Mode], eax ; Mode
.text:004010EA                 mov     ebx, [edx+10h]
.text:004010ED                 mov     [esp+28h+lpTopLevelExceptionFilter], ebx ; FileHandle
.text:004010F0                 call    _setmode
.text:004010F5                 mov     edx, ds:_iob
.text:004010FB
.text:004010FB loc_4010FB:                             ; CODE XREF: sub_401080+64↑j
.text:004010FB                 cmp     edx, 0FFFFFFE0h
.text:004010FE                 jz      short loc_40111B
.text:00401100                 mov     ebx, Mode
.text:00401106                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040110A                 mov     ecx, [edx+30h]
.text:0040110D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401110                 call    _setmode
.text:00401115                 mov     edx, ds:_iob
.text:0040111B
.text:0040111B loc_40111B:                             ; CODE XREF: sub_401080+7E↑j
.text:0040111B                 cmp     edx, 0FFFFFFC0h
.text:0040111E                 jz      short loc_401135
.text:00401120                 mov     ebx, Mode
.text:00401126                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040112A                 mov     ecx, [edx+50h]
.text:0040112D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401130                 call    _setmode
.text:00401135
.text:00401135 loc_401135:                             ; CODE XREF: sub_401080+55↑j
.text:00401135                                         ; sub_401080+9E↑j
.text:00401135                 call    __p__fmode
.text:0040113A                 mov     ecx, dword_406070
.text:00401140                 mov     [eax], ecx
.text:00401142                 call    sub_404E00
.text:00401147                 call    __p__environ
.text:0040114C                 mov     edx, dword_406000
.text:00401152                 mov     ebx, [eax]
.text:00401154                 mov     ecx, dword_406004
.text:0040115A                 mov     [esp+28h+lpTopLevelExceptionFilter], edx
.text:0040115D                 mov     [esp+28h+var_20], ebx
.text:00401161                 mov     [esp+28h+Mode], ecx
.text:00401165                 call    sub_4015C0
.text:00401165 sub_401080      endp
.text:00401165
.text:0040116A ; ---------------------------------------------------------------------------
.text:0040116A                 mov     ebx, eax
.text:0040116C                 call    _cexit
.text:00401171                 mov     [esp], ebx
.text:00401174                 call    ExitProcess
.text:00401174 ; ---------------------------------------------------------------------------
.text:00401179                 align 10h
.text:00401180
.text:00401180 ; =============== S U B R O U T I N E =======================================
.text:00401180
.text:00401180 ; Attributes: bp-based frame
.text:00401180
.text:00401180 ; LONG __stdcall TopLevelExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo)
.text:00401180 TopLevelExceptionFilter proc near       ; DATA XREF: sub_401080+7↑o
.text:00401180
.text:00401180 Signal          = dword ptr -18h
.text:00401180 Function        = dword ptr -14h
.text:00401180 var_8           = dword ptr -8
.text:00401180 var_4           = dword ptr -4
.text:00401180 ExceptionInfo   = dword ptr  8
.text:00401180
.text:00401180                 push    ebp
.text:00401181                 mov     ebp, esp
.text:00401183                 sub     esp, 18h
.text:00401186                 mov     [ebp+var_8], ebx
.text:00401189                 mov     ecx, [ebp+ExceptionInfo]
.text:0040118C                 xor     ebx, ebx
.text:0040118E                 mov     [ebp+var_4], esi
.text:00401191                 xor     esi, esi
.text:00401193                 mov     edx, [ecx]
.text:00401195                 mov     eax, [edx]
.text:00401197                 cmp     eax, 0C0000091h
.text:0040119C                 ja      loc_401260
.text:004011A2                 cmp     eax, 0C000008Dh
.text:004011A7                 jnb     short loc_401210
.text:004011A9                 cmp     eax, 0C0000005h
.text:004011AE                 jz      short loc_4011BE
.text:004011B0
.text:004011B0 loc_4011B0:                             ; CODE XREF: TopLevelExceptionFilter+59↓j
.text:004011B0                                         ; TopLevelExceptionFilter+77↓j ...
.text:004011B0                 mov     eax, ebx
.text:004011B2                 mov     esi, [ebp+var_4]
.text:004011B5                 mov     ebx, [ebp+var_8]
.text:004011B8                 mov     esp, ebp
.text:004011BA                 pop     ebp
.text:004011BB                 retn    4
.text:004011BE ; ---------------------------------------------------------------------------
.text:004011BE
.text:004011BE loc_4011BE:                             ; CODE XREF: TopLevelExceptionFilter+2E↑j
.text:004011BE                 mov     [esp+18h+Function], 0 ; Function
.text:004011C6                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:004011CD                 call    signal
.text:004011D2                 cmp     eax, 1
.text:004011D5                 jz      short loc_4011F9
.text:004011D7                 test    eax, eax
.text:004011D9                 jz      short loc_4011B0
.text:004011DB                 mov     [esp+18h+Signal], 0Bh
.text:004011E2                 lea     esi, [esi+0]
.text:004011E9                 lea     edi, [edi+0]
.text:004011F0
.text:004011F0 loc_4011F0:                             ; CODE XREF: TopLevelExceptionFilter+BD↓j
.text:004011F0                 call    eax
.text:004011F2
.text:004011F2 loc_4011F2:                             ; CODE XREF: TopLevelExceptionFilter+8D↓j
.text:004011F2                                         ; TopLevelExceptionFilter+D5↓j ...
.text:004011F2                 mov     ebx, 0FFFFFFFFh
.text:004011F7                 jmp     short loc_4011B0
.text:004011F9 ; ---------------------------------------------------------------------------
.text:004011F9
.text:004011F9 loc_4011F9:                             ; CODE XREF: TopLevelExceptionFilter+55↑j
.text:004011F9                 mov     [esp+18h+Function], 1 ; Function
.text:00401201                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:00401208                 call    signal
.text:0040120D                 jmp     short loc_4011F2
.text:0040120D ; ---------------------------------------------------------------------------
.text:0040120F                 align 10h
.text:00401210
.text:00401210 loc_401210:                             ; CODE XREF: TopLevelExceptionFilter+27↑j
.text:00401210                                         ; TopLevelExceptionFilter+E5↓j
.text:00401210                 mov     esi, 1
.text:00401215
.text:00401215 loc_401215:                             ; CODE XREF: TopLevelExceptionFilter+EC↓j
.text:00401215                 mov     [esp+18h+Function], 0 ; Function
.text:0040121D                 mov     [esp+18h+Signal], 8 ; Signal
.text:00401224                 call    signal
.text:00401229                 cmp     eax, 1
.text:0040122C                 jz      short loc_40123F
.text:0040122E                 test    eax, eax
.text:00401230                 jz      loc_4011B0
.text:00401236                 mov     [esp+18h+Signal], 8
.text:0040123D                 jmp     short loc_4011F0
.text:0040123F ; ---------------------------------------------------------------------------
.text:0040123F
.text:0040123F loc_40123F:                             ; CODE XREF: TopLevelExceptionFilter+AC↑j
.text:0040123F                 mov     [esp+18h+Function], 1 ; Function
.text:00401247                 mov     [esp+18h+Signal], 8 ; Signal
.text:0040124E                 call    signal
.text:00401253                 test    esi, esi
.text:00401255                 jz      short loc_4011F2
.text:00401257                 call    sub_404E30
.text:0040125C                 jmp     short loc_4011F2
.text:0040125C ; ---------------------------------------------------------------------------
.text:0040125E                 align 10h
.text:00401260
.text:00401260 loc_401260:                             ; CODE XREF: TopLevelExceptionFilter+1C↑j
.text:00401260                 cmp     eax, 0C0000093h
.text:00401265                 jz      short loc_401210
.text:00401267                 cmp     eax, 0C0000094h
.text:0040126C                 jz      short loc_401215
.text:0040126E                 jmp     loc_4011B0
.text:0040126E TopLevelExceptionFilter endp
.text:0040126E
.text:0040126E ; ---------------------------------------------------------------------------
.text:00401273                 align 10h
.text:00401280 aIgnoreEnvironm db 'ignore-environment',0
.text:00401280                                         ; DATA XREF: .text:off_4012C0↓o
.text:00401293 aUnset          db 'unset',0            ; DATA XREF: .text:004012D0↓o
.text:00401299 aHelp           db 'help',0             ; DATA XREF: .text:004012E0↓o
.text:0040129E aVersion        db 'version',0          ; DATA XREF: .text:004012F0↓o
.text:004012A6                 align 20h
.text:004012C0 off_4012C0      dd offset aIgnoreEnvironm
.text:004012C0                                         ; DATA XREF: sub_4015C0+7B↓o
.text:004012C0                                         ; sub_4015C0+25B↓o
.text:004012C0                                         ; "ignore-environment"
.text:004012C4                 dd 2 dup(0)
.text:004012CC                 dd 69h
.text:004012D0                 dd offset aUnset        ; "unset"
.text:004012D4                 dd 1, 0
.text:004012DC                 dd 75h
.text:004012E0                 dd offset aHelp         ; "help"
.text:004012E4                 dd 2 dup(0)
.text:004012EC                 dd 0FFFFFF7Eh
.text:004012F0                 dd offset aVersion      ; "version"
.text:004012F4                 dd 2 dup(0)
.text:004012FC                 dd 0FFFFFF7Dh, 4 dup(0)
.text:00401310 ; const char Locale
.text:00401310 Locale          db 0                    ; DATA XREF: sub_4015C0+24↓o
.text:00401311                 db 0EBh, 0Dh, 90h
.text:00401314                 align 10h
.text:00401320 aCProgra1Coreut db 'c:/progra~1/CoreUtils/share/locale',0
.text:00401320                                         ; DATA XREF: sub_4015C0+3E↓o
.text:00401343 aCoreutils      db 'coreutils',0        ; DATA XREF: sub_4015C0+46↓o
.text:00401343                                         ; sub_4015C0+53↓o
.text:0040134D ; const char aIu[]
.text:0040134D aIu             db '+iu:',0             ; DATA XREF: sub_4015C0+83↓o
.text:0040134D                                         ; sub_4015C0+263↓o
.text:00401352                 align 10h
.text:00401360 aTrySHelpForMor db 'Try `%s --help',27h,' for more information.',0Ah,0
.text:00401360                                         ; DATA XREF: sub_4015C0:loc_40167C↓o
.text:00401360                                         ; .text:0040199F↓o
.text:00401387 aDavidMackenzie db 'David MacKenzie',0  ; DATA XREF: sub_4015C0+112↓o
.text:00401397 aRichardMlynari db 'Richard Mlynarik',0 ; DATA XREF: sub_4015C0+11A↓o
.text:004013A8 a530            db '5.3.0',0            ; DATA XREF: sub_4015C0+125↓o
.text:004013AE aGnuCoreutils   db 'GNU coreutils',0    ; DATA XREF: sub_4015C0+12D↓o
.text:004013BC ; const FILE stru_4013BC
.text:004013BC stru_4013BC     FILE <766E65h, 67617355h, 25203A65h, 4F5B2073h, 4F495450h, 2E2E5D4Eh, \
.text:004013BC                                         ; DATA XREF: sub_4015C0+135↓o
.text:004013BC                                         ; sub_4015C0:loc_40170E↓o ...
.text:004013BC                       2D5B202Eh, 4E5B205Dh>
.text:004013DC                 db  41h ; A
.text:004013DD                 db  4Dh ; M
.text:004013DE                 db  45h ; E
.text:004013DF                 db  3Dh ; =
.text:004013E0                 db  56h ; V
.text:004013E1                 db  41h ; A
.text:004013E2                 db  4Ch ; L
.text:004013E3                 db  55h ; U
.text:004013E4                 db  45h ; E
.text:004013E5                 db  5Dh ; ]
.text:004013E6                 db  2Eh ; .
.text:004013E7                 db  2Eh ; .
.text:004013E8                 db  2Eh ; .
.text:004013E9                 db  20h
.text:004013EA                 db  5Bh ; [
.text:004013EB                 db  43h ; C
.text:004013EC                 db  4Fh ; O
.text:004013ED                 db  4Dh ; M
.text:004013EE                 db  4Dh ; M
.text:004013EF                 db  41h ; A
.text:004013F0                 db  4Eh ; N
.text:004013F1                 db  44h ; D
.text:004013F2                 db  20h
.text:004013F3                 db  5Bh ; [
.text:004013F4                 db  41h ; A
.text:004013F5                 db  52h ; R
.text:004013F6                 db  47h ; G
.text:004013F7                 db  5Dh ; ]
.text:004013F8                 db  2Eh ; .
.text:004013F9                 db  2Eh ; .
.text:004013FA                 db  2Eh ; .
.text:004013FB                 db  5Dh ; ]
.text:004013FC                 db  0Ah
.text:004013FD                 db    0
.text:004013FE                 align 10h
.text:00401400 aSetEachNameToV db 'Set each NAME to VALUE in the environment and run COMMAND.',0Ah
.text:00401400                                         ; DATA XREF: sub_4015C0+16D↓o
.text:00401400                                         ; .text:004019F2↓o
.text:00401400                 db 0Ah
.text:00401400                 db '  -i, --ignore-environment   start with an empty environment',0Ah
.text:00401400                 db '  -u, --unset=NAME           remove variable from the environment'
.text:00401400                 db 0Ah,0
.text:004014BC                 align 10h
.text:004014C0 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.text:004014C0                                         ; DATA XREF: sub_4015C0+18F↓o
.text:004014C0                                         ; .text:00401A14↓o
.text:004014ED                 align 20h
.text:00401500 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.text:00401500                                         ; DATA XREF: sub_4015C0+1B1↓o
.text:00401500                                         ; .text:00401A36↓o
.text:00401536                 align 10h
.text:00401540 aAMereImpliesII db 0Ah                  ; DATA XREF: sub_4015C0+1D3↓o
.text:00401540                                         ; .text:00401A58↓o
.text:00401540                 db 'A mere - implies -i.  If no COMMAND, print the resulting environm'
.text:00401540                 db 'ent.',0Ah,0
.text:00401588 aReportBugsToS  db 0Ah                  ; DATA XREF: sub_4015C0+1F5↓o
.text:00401588                                         ; .text:00401A7A↓o
.text:00401588                 db 'Report bugs to <%s>.',0Ah,0
.text:0040159F aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.text:0040159F                                         ; DATA XREF: sub_4015C0+202↓o
.text:0040159F                                         ; .text:00401A87↓o
.text:004015B5 asc_4015B5      db '-',0                ; DATA XREF: sub_4015C0+224↓o
.text:004015B5                                         ; sub_4015C0+2A6↓o
.text:004015B7 ; const char aS[]
.text:004015B7 aS              db '%s',0               ; DATA XREF: sub_4015C0+392↓o
.text:004015BA                 align 10h
.text:004015C0
.text:004015C0 ; =============== S U B R O U T I N E =======================================
.text:004015C0
.text:004015C0 ; Attributes: noreturn bp-based frame fuzzy-sp
.text:004015C0
.text:004015C0 sub_4015C0      proc near               ; CODE XREF: sub_401080+E5↑p
.text:004015C0
.text:004015C0 Category        = dword ptr -38h
.text:004015C0 Locale          = dword ptr -34h
.text:004015C0 var_30          = dword ptr -30h
.text:004015C0 var_2C          = byte ptr -2Ch
.text:004015C0 var_28          = byte ptr -28h
.text:004015C0 var_24          = dword ptr -24h
.text:004015C0 var_20          = dword ptr -20h
.text:004015C0 var_14          = dword ptr -14h
.text:004015C0 var_D           = byte ptr -0Dh
.text:004015C0 arg_0           = dword ptr  8
.text:004015C0 arg_4           = dword ptr  0Ch
.text:004015C0
.text:004015C0                 push    ebp
.text:004015C1                 xor     eax, eax
.text:004015C3                 mov     ebp, esp
.text:004015C5                 push    edi
.text:004015C6                 push    esi
.text:004015C7                 push    ebx
.text:004015C8                 sub     esp, 2Ch
.text:004015CB                 and     esp, 0FFFFFFF0h
.text:004015CE                 call    __alloca
.text:004015D3                 mov     ebx, [ebp+arg_0]
.text:004015D6                 call    sub_404ED0
.text:004015DB                 mov     [ebp+var_D], 0
.text:004015DF                 mov     eax, [ebp+arg_4]
.text:004015E2                 mov     ecx, [eax]
.text:004015E4                 mov     [esp+38h+Locale], offset Locale ; Locale
.text:004015EC                 mov     [esp+38h+Category], 0 ; Category
.text:004015F3                 mov     ds:dword_4071A0, ecx
.text:004015F9                 call    setlocale
.text:004015FE                 mov     [esp+38h+Locale], offset aCProgra1Coreut ; "c:/progra~1/CoreUtils/share/locale"
.text:00401606                 mov     [esp+38h+Category], offset aCoreutils ; "coreutils"
.text:0040160D                 call    ds:__imp_libintl_bindtextdomain
.text:00401613                 mov     [esp+38h+Category], offset aCoreutils ; "coreutils"
.text:0040161A                 call    ds:libintl_textdomain
.text:00401620                 mov     [esp+38h+Category], offset sub_403130 ; void (__cdecl *)()
.text:00401627                 call    sub_401040
.text:0040162C                 lea     esi, [esi+0]
.text:00401630
.text:00401630 loc_401630:                             ; CODE XREF: sub_4015C0+BA↓j
.text:00401630                                         ; sub_4015C0+F8↓j
.text:00401630                 mov     dword ptr [esp+38h+var_28], 0 ; int
.text:00401638                 mov     eax, [ebp+arg_4]
.text:0040163B                 mov     dword ptr [esp+38h+var_2C], offset off_4012C0 ; int
.text:00401643                 mov     [esp+38h+var_30], offset aIu ; "+iu:"
.text:0040164B                 mov     [esp+38h+Locale], eax ; int
.text:0040164F                 mov     [esp+38h+Category], ebx ; int
.text:00401652                 call    sub_402FC0
.text:00401657                 cmp     eax, 0FFFFFFFFh
.text:0040165A                 jz      loc_4017D7
.text:00401660                 cmp     eax, 0FFFFFF7Eh
.text:00401665                 jz      loc_40170E
.text:0040166B                 cmp     eax, 0FFFFFF7Eh
.text:00401670                 jle     short loc_4016BD
.text:00401672                 cmp     eax, 69h ; 'i'
.text:00401675                 jz      short loc_4016B4
.text:00401677                 cmp     eax, 75h ; 'u'
.text:0040167A                 jz      short loc_401630
.text:0040167C
.text:0040167C loc_40167C:                             ; CODE XREF: sub_4015C0+102↓j
.text:0040167C                 mov     [esp+38h+Category], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:00401683                 call    ds:libintl_gettext
.text:00401689                 mov     ebx, ds:_iob
.text:0040168F                 mov     esi, ds:dword_4071A0
.text:00401695                 add     ebx, 40h ; '@'
.text:00401698                 mov     [esp+38h+var_30], esi
.text:0040169C                 mov     [esp+38h+Locale], eax ; Format
.text:004016A0                 mov     [esp+38h+Category], ebx ; Stream
.text:004016A3                 call    fprintf
.text:004016A8                 mov     [esp+38h+Category], 1 ; Code
.text:004016AF
.text:004016AF loc_4016AF:                             ; CODE XREF: sub_4015C0+14C↓j
.text:004016AF                                         ; sub_4015C0+3B3↓j
.text:004016AF                 call    exit
.text:004016B4 ; ---------------------------------------------------------------------------
.text:004016B4
.text:004016B4 loc_4016B4:                             ; CODE XREF: sub_4015C0+B5↑j
.text:004016B4                 mov     [ebp+var_D], 1
.text:004016B8                 jmp     loc_401630
.text:004016BD ; ---------------------------------------------------------------------------
.text:004016BD
.text:004016BD loc_4016BD:                             ; CODE XREF: sub_4015C0+B0↑j
.text:004016BD                 cmp     eax, 0FFFFFF7Dh
.text:004016C2                 jnz     short loc_40167C
.text:004016C4                 mov     [esp+38h+var_20], 0
.text:004016CC                 mov     edx, ds:_iob
.text:004016D2                 mov     [esp+38h+var_24], offset aDavidMackenzie ; "David MacKenzie"
.text:004016DA                 mov     dword ptr [esp+38h+var_28], offset aRichardMlynari ; "Richard Mlynarik"
.text:004016E2                 add     edx, 20h ; ' '
.text:004016E5                 mov     dword ptr [esp+38h+var_2C], offset a530 ; "5.3.0"
.text:004016ED                 mov     [esp+38h+var_30], offset aGnuCoreutils ; "GNU coreutils"
.text:004016F5                 mov     [esp+38h+Locale], offset stru_4013BC ; FILE *
.text:004016FD                 mov     [esp+38h+Category], edx ; FILE *
.text:00401700                 call    sub_402F80
.text:00401705
.text:00401705 loc_401705:                             ; CODE XREF: sub_4015C0+212↓j
.text:00401705                                         ; sub_4015C0+33B↓j
.text:00401705                 mov     [esp+38h+Category], 0
.text:0040170C                 jmp     short loc_4016AF
.text:0040170E ; ---------------------------------------------------------------------------
.text:0040170E
.text:0040170E loc_40170E:                             ; CODE XREF: sub_4015C0+A5↑j
.text:0040170E                 mov     [esp+38h+Category], offset stru_4013BC._cnt
.text:00401715                 call    ds:libintl_gettext
.text:0040171B                 mov     ecx, ds:dword_4071A0
.text:00401721                 mov     [esp+38h+Category], eax ; Format
.text:00401724                 mov     [esp+38h+Locale], ecx
.text:00401728                 call    printf
.text:0040172D                 mov     [esp+38h+Category], offset aSetEachNameToV ; "Set each NAME to VALUE in the environme"...
.text:00401734                 call    ds:libintl_gettext
.text:0040173A                 mov     edi, ds:_iob
.text:00401740                 add     edi, 20h ; ' '
.text:00401743                 mov     [esp+38h+Locale], edi ; Stream
.text:00401747                 mov     [esp+38h+Category], eax ; Buffer
.text:0040174A                 call    fputs
.text:0040174F                 mov     [esp+38h+Category], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:00401756                 call    ds:libintl_gettext
.text:0040175C                 mov     esi, ds:_iob
.text:00401762                 add     esi, 20h ; ' '
.text:00401765                 mov     [esp+38h+Locale], esi ; Stream
.text:00401769                 mov     [esp+38h+Category], eax ; Buffer
.text:0040176C                 call    fputs
.text:00401771                 mov     [esp+38h+Category], offset aVersionOutputV ; "      --version  output version informa"...
.text:00401778                 call    ds:libintl_gettext
.text:0040177E                 mov     ebx, ds:_iob
.text:00401784                 add     ebx, 20h ; ' '
.text:00401787                 mov     [esp+38h+Locale], ebx ; Stream
.text:0040178B                 mov     [esp+38h+Category], eax ; Buffer
.text:0040178E                 call    fputs
.text:00401793                 mov     [esp+38h+Category], offset aAMereImpliesII ; "\nA mere - implies -i.  If no COMMAND, "...
.text:0040179A                 call    ds:libintl_gettext
.text:004017A0                 mov     ecx, ds:_iob
.text:004017A6                 add     ecx, 20h ; ' '
.text:004017A9                 mov     [esp+38h+Locale], ecx ; Stream
.text:004017AD                 mov     [esp+38h+Category], eax ; Buffer
.text:004017B0                 call    fputs
.text:004017B5                 mov     [esp+38h+Category], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:004017BC                 call    ds:libintl_gettext
.text:004017C2                 mov     [esp+38h+Locale], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:004017CA                 mov     [esp+38h+Category], eax ; Format
.text:004017CD                 call    printf
.text:004017D2                 jmp     loc_401705
.text:004017D7 ; ---------------------------------------------------------------------------
.text:004017D7
.text:004017D7 loc_4017D7:                             ; CODE XREF: sub_4015C0+9A↑j
.text:004017D7                 mov     eax, dword_406010
.text:004017DC                 cmp     eax, ebx
.text:004017DE                 jge     short loc_4017FB
.text:004017E0                 cld
.text:004017E1                 mov     ecx, [ebp+arg_4]
.text:004017E4                 mov     edx, offset asc_4015B5 ; "-"
.text:004017E9                 mov     edi, edx
.text:004017EB                 mov     esi, [ecx+eax*4]
.text:004017EE                 mov     ecx, 2
.text:004017F3                 repe cmpsb
.text:004017F5                 jnz     short loc_4017FB
.text:004017F7                 mov     [ebp+var_D], 1
.text:004017FB
.text:004017FB loc_4017FB:                             ; CODE XREF: sub_4015C0+21E↑j
.text:004017FB                                         ; sub_4015C0+235↑j
.text:004017FB                 cmp     [ebp+var_D], 0
.text:004017FF                 jnz     loc_401978
.text:00401805
.text:00401805 loc_401805:                             ; CODE XREF: sub_4015C0+3C3↓j
.text:00401805                 xor     edi, edi
.text:00401807                 mov     dword_406010, edi
.text:0040180D                 lea     esi, [esi+0]
.text:00401810
.text:00401810 loc_401810:                             ; CODE XREF: sub_4015C0+27F↓j
.text:00401810                                         ; sub_4015C0+28F↓j
.text:00401810                 mov     dword ptr [esp+38h+var_28], 0 ; int
.text:00401818                 mov     edx, [ebp+arg_4]
.text:0040181B                 mov     dword ptr [esp+38h+var_2C], offset off_4012C0 ; int
.text:00401823                 mov     [esp+38h+var_30], offset aIu ; "+iu:"
.text:0040182B                 mov     [esp+38h+Locale], edx ; int
.text:0040182F                 mov     [esp+38h+Category], ebx ; int
.text:00401832                 call    sub_402FC0
.text:00401837                 cmp     eax, 0FFFFFFFFh
.text:0040183A                 jz      short loc_401851
.text:0040183C                 cmp     eax, 75h ; 'u'
.text:0040183F                 jnz     short loc_401810
.text:00401841                 mov     esi, ds:EnvString
.text:00401847                 mov     [esp+38h+Category], esi ; EnvString
.text:0040184A                 call    sub_404BD0
.text:0040184F                 jmp     short loc_401810
.text:00401851 ; ---------------------------------------------------------------------------
.text:00401851
.text:00401851 loc_401851:                             ; CODE XREF: sub_4015C0+27A↑j
.text:00401851                 mov     edx, dword_406010
.text:00401857                 cmp     edx, ebx
.text:00401859                 mov     [ebp+var_14], edx
.text:0040185C                 jge     loc_4018E1
.text:00401862                 cld
.text:00401863                 mov     eax, [ebp+arg_4]
.text:00401866                 mov     ecx, offset asc_4015B5 ; "-"
.text:0040186B                 mov     edi, ecx
.text:0040186D                 mov     esi, [eax+edx*4]
.text:00401870                 mov     eax, 2
.text:00401875                 mov     ecx, eax
.text:00401877                 repe cmpsb
.text:00401879                 jnz     short loc_401890
.text:0040187B                 inc     [ebp+var_14]
.text:0040187E                 mov     edi, [ebp+var_14]
.text:00401881                 mov     dword_406010, edi
.text:00401887                 mov     esi, esi
.text:00401889                 lea     edi, [edi+0]
.text:00401890
.text:00401890 loc_401890:                             ; CODE XREF: sub_4015C0+2B9↑j
.text:00401890                                         ; sub_4015C0+316↓j
.text:00401890                 cmp     [ebp+var_14], ebx
.text:00401893                 jge     short loc_4018E1
.text:00401895                 mov     [esp+38h+Locale], 3Dh ; '=' ; Val
.text:0040189D                 mov     ecx, [ebp+var_14]
.text:004018A0                 mov     edi, [ebp+arg_4]
.text:004018A3                 mov     esi, [edi+ecx*4]
.text:004018A6                 mov     [esp+38h+Category], esi ; Str
.text:004018A9                 call    strchr
.text:004018AE                 test    eax, eax
.text:004018B0                 jz      short loc_4018D8
.text:004018B2                 mov     edi, dword_406010
.text:004018B8                 mov     eax, [ebp+arg_4]
.text:004018BB                 mov     edx, [eax+edi*4]
.text:004018BE                 inc     edi
.text:004018BF                 mov     dword_406010, edi
.text:004018C5                 mov     [esp+38h+Category], edx ; EnvString
.text:004018C8                 call    sub_404BD0
.text:004018CD                 mov     esi, dword_406010
.text:004018D3                 mov     [ebp+var_14], esi
.text:004018D6                 jmp     short loc_401890
.text:004018D8 ; ---------------------------------------------------------------------------
.text:004018D8
.text:004018D8 loc_4018D8:                             ; CODE XREF: sub_4015C0+2F0↑j
.text:004018D8                 mov     edx, dword_406010
.text:004018DE                 mov     [ebp+var_14], edx
.text:004018E1
.text:004018E1 loc_4018E1:                             ; CODE XREF: sub_4015C0+29C↑j
.text:004018E1                                         ; sub_4015C0+2D3↑j
.text:004018E1                 cmp     ebx, [ebp+var_14]
.text:004018E4                 jg      short loc_401919
.text:004018E6                 lea     esi, [esi+0]
.text:004018E9                 lea     edi, [edi+0]
.text:004018F0
.text:004018F0 loc_4018F0:                             ; CODE XREF: sub_4015C0+357↓j
.text:004018F0                 call    __p__environ
.text:004018F5                 mov     edx, [eax]
.text:004018F7                 mov     ecx, [edx]
.text:004018F9                 test    ecx, ecx
.text:004018FB                 jz      loc_401705
.text:00401901                 call    __p__environ
.text:00401906                 mov     esi, [eax]
.text:00401908                 mov     ebx, [esi]
.text:0040190A                 lea     edi, [esi+4]
.text:0040190D                 mov     [eax], edi
.text:0040190F                 mov     [esp+38h+Category], ebx ; Buffer
.text:00401912                 call    puts
.text:00401917                 jmp     short loc_4018F0
.text:00401919 ; ---------------------------------------------------------------------------
.text:00401919
.text:00401919 loc_401919:                             ; CODE XREF: sub_4015C0+324↑j
.text:00401919                 mov     ecx, [ebp+var_14]
.text:0040191C                 mov     edi, [ebp+arg_4]
.text:0040191F                 lea     esi, [edi+ecx*4]
.text:00401922                 mov     [esp+38h+Locale], esi ; Arguments
.text:00401926                 mov     ebx, [edi+ecx*4]
.text:00401929                 mov     [esp+38h+Category], ebx ; FileName
.text:0040192C                 xor     ebx, ebx
.text:0040192E                 call    _execvp
.text:00401933                 call    _errno
.text:00401938                 cmp     dword ptr [eax], 2
.text:0040193B                 setz    bl
.text:0040193E                 call    _errno
.text:00401943                 mov     esi, dword_406010
.text:00401949                 mov     edx, [ebp+arg_4]
.text:0040194C                 add     ebx, 7Eh ; '~'
.text:0040194F                 mov     ecx, [edx+esi*4]
.text:00401952                 mov     [esp+38h+var_30], offset aS ; "%s"
.text:0040195A                 mov     dword ptr [esp+38h+var_2C], ecx ; char
.text:0040195E                 mov     esi, [eax]
.text:00401960                 mov     [esp+38h+Category], 0 ; Code
.text:00401967                 mov     [esp+38h+Locale], esi ; ErrorMessage
.text:0040196B                 call    sub_404930
.text:00401970                 mov     [esp+38h+Category], ebx
.text:00401973                 jmp     loc_4016AF
.text:00401978 ; ---------------------------------------------------------------------------
.text:00401978
.text:00401978 loc_401978:                             ; CODE XREF: sub_4015C0+23F↑j
.text:00401978                 call    __p__environ
.text:0040197D                 mov     dword ptr [eax], offset unk_407000
.text:00401983                 jmp     loc_401805
.text:00401983 sub_4015C0      endp
.text:00401983
.text:00401983 ; ---------------------------------------------------------------------------
.text:00401988                 align 10h
.text:00401990                 sub     esp, 1Ch
.text:00401993                 mov     [esp+18h], ebx
.text:00401997                 mov     ebx, [esp+20h]
.text:0040199B                 test    ebx, ebx
.text:0040199D                 jz      short loc_4019D3
.text:0040199F                 mov     dword ptr [esp], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:004019A6                 call    ds:libintl_gettext
.text:004019AC                 mov     edx, ds:_iob
.text:004019B2                 mov     ecx, ds:dword_4071A0
.text:004019B8                 add     edx, 40h ; '@'
.text:004019BB                 mov     [esp+8], ecx
.text:004019BF                 mov     [esp+4], eax
.text:004019C3                 mov     [esp], edx
.text:004019C6                 call    fprintf
.text:004019CB
.text:004019CB loc_4019CB:                             ; CODE XREF: .text:00401A97↓j
.text:004019CB                 mov     [esp], ebx
.text:004019CE                 call    exit
.text:004019D3 ; ---------------------------------------------------------------------------
.text:004019D3
.text:004019D3 loc_4019D3:                             ; CODE XREF: .text:0040199D↑j
.text:004019D3                 mov     dword ptr [esp], offset stru_4013BC._cnt
.text:004019DA                 call    ds:libintl_gettext
.text:004019E0                 mov     ecx, ds:dword_4071A0
.text:004019E6                 mov     [esp], eax
.text:004019E9                 mov     [esp+4], ecx
.text:004019ED                 call    printf
.text:004019F2                 mov     dword ptr [esp], offset aSetEachNameToV ; "Set each NAME to VALUE in the environme"...
.text:004019F9                 call    ds:libintl_gettext
.text:004019FF                 mov     ecx, ds:_iob
.text:00401A05                 add     ecx, 20h ; ' '
.text:00401A08                 mov     [esp+4], ecx
.text:00401A0C                 mov     [esp], eax
.text:00401A0F                 call    fputs
.text:00401A14                 mov     dword ptr [esp], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:00401A1B                 call    ds:libintl_gettext
.text:00401A21                 mov     ecx, ds:_iob
.text:00401A27                 add     ecx, 20h ; ' '
.text:00401A2A                 mov     [esp+4], ecx
.text:00401A2E                 mov     [esp], eax
.text:00401A31                 call    fputs
.text:00401A36                 mov     dword ptr [esp], offset aVersionOutputV ; "      --version  output version informa"...
.text:00401A3D                 call    ds:libintl_gettext
.text:00401A43                 mov     ecx, ds:_iob
.text:00401A49                 add     ecx, 20h ; ' '
.text:00401A4C                 mov     [esp+4], ecx
.text:00401A50                 mov     [esp], eax
.text:00401A53                 call    fputs
.text:00401A58                 mov     dword ptr [esp], offset aAMereImpliesII ; "\nA mere - implies -i.  If no COMMAND, "...
.text:00401A5F                 call    ds:libintl_gettext
.text:00401A65                 mov     ecx, ds:_iob
.text:00401A6B                 add     ecx, 20h ; ' '
.text:00401A6E                 mov     [esp+4], ecx
.text:00401A72                 mov     [esp], eax
.text:00401A75                 call    fputs
.text:00401A7A                 mov     dword ptr [esp], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:00401A81                 call    ds:libintl_gettext
.text:00401A87                 mov     dword ptr [esp+4], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:00401A8F                 mov     [esp], eax
.text:00401A92                 call    printf
.text:00401A97                 jmp     loc_4019CB
.text:00401A97 ; ---------------------------------------------------------------------------
.text:00401A9C                 align 10h
.text:00401AA0 dword_401AA0    dd 90002D2Dh, 7 dup(90909090h)
.text:00401AA0                                         ; DATA XREF: sub_401CF0+E4↓o
.text:00401AC0 aSOptionCSDoesn db '%s: option `%c%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00401AC0                                         ; DATA XREF: sub_401CF0+2FC↓o
.text:00401AED                 align 20h
.text:00401B00 aSOptionSDoesnT db '%s: option `--%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00401B00                                         ; DATA XREF: sub_401CF0:loc_402052↓o
.text:00401B2D                 align 20h
.text:00401B40 aSOptionSRequir db '%s: option `%s',27h,' requires an argument',0Ah,0
.text:00401B40                                         ; DATA XREF: sub_401CF0:loc_4020F0↓o
.text:00401B40                                         ; sub_401CF0:loc_4024B7↓o
.text:00401B66                 align 20h
.text:00401B80 aSUnrecognizedO db '%s: unrecognized option `%c%s',27h,0Ah,0
.text:00401B80                                         ; DATA XREF: sub_401CF0+48E↓o
.text:00401BA0 dword_401BA0    dd 90909000h, 7 dup(90909090h)
.text:00401BA0                                         ; DATA XREF: sub_401CF0:loc_4021C1↓o
.text:00401BC0 aSUnrecognizedO_0 db '%s: unrecognized option `--%s',27h,0Ah,0
.text:00401BC0                                         ; DATA XREF: sub_401CF0:loc_4021DA↓o
.text:00401BE0 aSOptionRequire db '%s: option requires an argument -- %c',0Ah,0
.text:00401BE0                                         ; DATA XREF: sub_401CF0:loc_4022BF↓o
.text:00401BE0                                         ; sub_401CF0:loc_4025EC↓o
.text:00401C07                 align 20h
.text:00401C20 aSOptionWSDoesn db '%s: option `-W %s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00401C20                                         ; DATA XREF: sub_401CF0:loc_402433↓o
.text:00401C4E                 align 20h
.text:00401C60 aSOptionWSIsAmb db '%s: option `-W %s',27h,' is ambiguous',0Ah,0
.text:00401C60                                         ; DATA XREF: sub_401CF0:loc_40251F↓o
.text:00401C81 aSIllegalOption db '%s: illegal option -- %c',0Ah,0
.text:00401C81                                         ; DATA XREF: sub_401CF0+93F↓o
.text:00401C9B aSInvalidOption db '%s: invalid option -- %c',0Ah,0
.text:00401C9B                                         ; DATA XREF: sub_401CF0:loc_402667↓o
.text:00401CB5 aSOptionSIsAmbi db '%s: option `%s',27h,' is ambiguous',0Ah,0
.text:00401CB5                                         ; DATA XREF: sub_401CF0:loc_40268E↓o
.text:00401CD3 ; const char VarName[]
.text:00401CD3 VarName         db 'POSIXLY_CORRECT',0  ; DATA XREF: sub_401CF0:loc_402840↓o
.text:00401CE3                 align 10h
.text:00401CF0
.text:00401CF0 ; =============== S U B R O U T I N E =======================================
.text:00401CF0
.text:00401CF0
.text:00401CF0 ; int __cdecl sub_401CF0(int, int, char *Str, int, int, int, int, int)
.text:00401CF0 sub_401CF0      proc near               ; CODE XREF: sub_402880+5A↓p
.text:00401CF0                                         ; .text:0040296A↓p ...
.text:00401CF0
.text:00401CF0 Str1            = dword ptr -5Ch
.text:00401CF0 Str2            = dword ptr -58h
.text:00401CF0 MaxCount        = dword ptr -54h
.text:00401CF0 var_50          = dword ptr -50h
.text:00401CF0 var_4C          = dword ptr -4Ch
.text:00401CF0 var_3C          = dword ptr -3Ch
.text:00401CF0 var_38          = dword ptr -38h
.text:00401CF0 var_34          = dword ptr -34h
.text:00401CF0 var_30          = dword ptr -30h
.text:00401CF0 var_2C          = dword ptr -2Ch
.text:00401CF0 var_28          = dword ptr -28h
.text:00401CF0 var_24          = dword ptr -24h
.text:00401CF0 var_20          = dword ptr -20h
.text:00401CF0 var_1C          = dword ptr -1Ch
.text:00401CF0 var_18          = dword ptr -18h
.text:00401CF0 var_14          = dword ptr -14h
.text:00401CF0 arg_0           = dword ptr  4
.text:00401CF0 arg_4           = dword ptr  8
.text:00401CF0 Str             = dword ptr  0Ch
.text:00401CF0 arg_C           = dword ptr  10h
.text:00401CF0 arg_10          = dword ptr  14h
.text:00401CF0 arg_14          = dword ptr  18h
.text:00401CF0 arg_18          = dword ptr  1Ch
.text:00401CF0 arg_1C          = dword ptr  20h
.text:00401CF0
.text:00401CF0                 push    ebp
.text:00401CF1                 mov     eax, 0FFFFFFFFh
.text:00401CF6                 push    edi
.text:00401CF7                 push    esi
.text:00401CF8                 push    ebx
.text:00401CF9                 sub     esp, 4Ch
.text:00401CFC                 mov     esi, [esp+5Ch+Str]
.text:00401D00                 mov     ebp, [esp+5Ch+arg_1C]
.text:00401D04                 cmp     byte ptr [esi], 3Ah ; ':'
.text:00401D07                 mov     ebx, [ebp+4]
.text:00401D0A                 setz    dl
.text:00401D0D                 movzx   ecx, dl
.text:00401D10                 dec     ecx
.text:00401D11                 and     ecx, ebx
.text:00401D13                 mov     [esp+5Ch+var_14], ecx
.text:00401D17                 mov     ecx, [esp+5Ch+arg_0]
.text:00401D1B                 test    ecx, ecx
.text:00401D1D                 jle     loc_401E47
.text:00401D23                 mov     dword ptr [ebp+0Ch], 0
.text:00401D2A                 mov     ebx, [ebp+0]
.text:00401D2D                 test    ebx, ebx
.text:00401D2F                 jz      loc_402860
.text:00401D35                 mov     edi, [ebp+10h]
.text:00401D38                 test    edi, edi
.text:00401D3A                 jnz     short loc_401D93
.text:00401D3C                 lea     esi, [esi+0]
.text:00401D40
.text:00401D40 loc_401D40:                             ; CODE XREF: sub_401CF0+B7C↓j
.text:00401D40                 mov     [ebp+24h], ebx
.text:00401D43                 mov     esi, [esp+5Ch+Str]
.text:00401D47                 mov     [ebp+20h], ebx
.text:00401D4A                 mov     ecx, [esp+5Ch+arg_18]
.text:00401D4E                 xor     ebx, ebx
.text:00401D50                 mov     dword ptr [ebp+14h], 0
.text:00401D57                 test    ecx, ecx
.text:00401D59                 jz      loc_402840
.text:00401D5F
.text:00401D5F loc_401D5F:                             ; CODE XREF: sub_401CF0+B64↓j
.text:00401D5F                 mov     ebx, 1
.text:00401D64
.text:00401D64 loc_401D64:                             ; CODE XREF: sub_401CF0+B5E↓j
.text:00401D64                 mov     [ebp+1Ch], ebx
.text:00401D67                 mov     ecx, [esp+5Ch+Str]
.text:00401D6B                 movzx   eax, byte ptr [ecx]
.text:00401D6E                 cmp     al, 2Dh ; '-'
.text:00401D70                 jz      loc_402830
.text:00401D76                 cmp     al, 2Bh ; '+'
.text:00401D78                 jz      loc_402819
.text:00401D7E                 xor     edx, edx
.text:00401D80                 test    ebx, ebx
.text:00401D82                 setz    dl
.text:00401D85                 mov     [ebp+18h], edx
.text:00401D88
.text:00401D88 loc_401D88:                             ; CODE XREF: sub_401CF0+B35↓j
.text:00401D88                 mov     [esp+5Ch+Str], esi
.text:00401D8C                 mov     dword ptr [ebp+10h], 1
.text:00401D93
.text:00401D93 loc_401D93:                             ; CODE XREF: sub_401CF0+4A↑j
.text:00401D93                 mov     eax, [ebp+14h]
.text:00401D96                 test    eax, eax
.text:00401D98                 jz      short loc_401DA3
.text:00401D9A                 cmp     byte ptr [eax], 0
.text:00401D9D                 jnz     loc_401E80
.text:00401DA3
.text:00401DA3 loc_401DA3:                             ; CODE XREF: sub_401CF0+A8↑j
.text:00401DA3                 mov     ebx, [ebp+0]
.text:00401DA6                 cmp     [ebp+24h], ebx
.text:00401DA9                 jle     short loc_401DAE
.text:00401DAB                 mov     [ebp+24h], ebx
.text:00401DAE
.text:00401DAE loc_401DAE:                             ; CODE XREF: sub_401CF0+B9↑j
.text:00401DAE                 cmp     [ebp+20h], ebx
.text:00401DB1                 jle     short loc_401DB6
.text:00401DB3                 mov     [ebp+20h], ebx
.text:00401DB6
.text:00401DB6 loc_401DB6:                             ; CODE XREF: sub_401CF0+C1↑j
.text:00401DB6                 cmp     dword ptr [ebp+18h], 1
.text:00401DBA                 jz      loc_402790
.text:00401DC0
.text:00401DC0 loc_401DC0:                             ; CODE XREF: sub_401CF0+B13↓j
.text:00401DC0                 cmp     ebx, [esp+5Ch+arg_0]
.text:00401DC4                 jz      loc_402774
.text:00401DCA                 cld
.text:00401DCB                 mov     ecx, [esp+5Ch+arg_4]
.text:00401DCF                 mov     edx, 3
.text:00401DD4                 mov     edi, offset dword_401AA0
.text:00401DD9                 mov     esi, [ecx+ebx*4]
.text:00401DDC                 mov     ecx, edx
.text:00401DDE                 repe cmpsb
.text:00401DE0                 jnz     short loc_401E1C
.text:00401DE2                 mov     edx, [ebp+24h]
.text:00401DE5                 lea     eax, [ebx+1]
.text:00401DE8                 cmp     [ebp+20h], edx
.text:00401DEB                 mov     [ebp+0], eax
.text:00401DEE                 jz      loc_402788
.text:00401DF4                 cmp     edx, eax
.text:00401DF6                 jz      short loc_401E10
.text:00401DF8                 mov     [esp+5Ch+Str2], ebp
.text:00401DFC                 mov     ebx, [esp+5Ch+arg_4]
.text:00401E00                 mov     [esp+5Ch+Str1], ebx
.text:00401E03                 call    sub_4029A0
.text:00401E08                 nop
.text:00401E09                 lea     esi, [esi+0]
.text:00401E10
.text:00401E10 loc_401E10:                             ; CODE XREF: sub_401CF0+106↑j
.text:00401E10                                         ; sub_401CF0+A9B↓j
.text:00401E10                 mov     eax, [esp+5Ch+arg_0]
.text:00401E14                 mov     ebx, eax
.text:00401E16                 mov     [ebp+24h], eax
.text:00401E19                 mov     [ebp+0], eax
.text:00401E1C
.text:00401E1C loc_401E1C:                             ; CODE XREF: sub_401CF0+F0↑j
.text:00401E1C                 cmp     ebx, [esp+5Ch+arg_0]
.text:00401E20                 jz      loc_402774
.text:00401E26                 mov     esi, [esp+5Ch+arg_4]
.text:00401E2A                 mov     eax, [esi+ebx*4]
.text:00401E2D                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00401E30                 jz      short loc_401E57
.text:00401E32
.text:00401E32 loc_401E32:                             ; CODE XREF: sub_401CF0+16D↓j
.text:00401E32                 mov     edx, [ebp+18h]
.text:00401E35                 test    edx, edx
.text:00401E37                 jz      short loc_401E50
.text:00401E39                 mov     [ebp+0Ch], eax
.text:00401E3C                 lea     edi, [ebx+1]
.text:00401E3F                 mov     eax, 1
.text:00401E44                 mov     [ebp+0], edi
.text:00401E47
.text:00401E47 loc_401E47:                             ; CODE XREF: sub_401CF0+2D↑j
.text:00401E47                                         ; sub_401CF0+165↓j ...
.text:00401E47                 add     esp, 4Ch
.text:00401E4A                 pop     ebx
.text:00401E4B                 pop     esi
.text:00401E4C                 pop     edi
.text:00401E4D                 pop     ebp
.text:00401E4E                 retn
.text:00401E4E ; ---------------------------------------------------------------------------
.text:00401E4F                 align 10h
.text:00401E50
.text:00401E50 loc_401E50:                             ; CODE XREF: sub_401CF0+147↑j
.text:00401E50                                         ; sub_401CF0+A8A↓j ...
.text:00401E50                 mov     eax, 0FFFFFFFFh
.text:00401E55                 jmp     short loc_401E47
.text:00401E57 ; ---------------------------------------------------------------------------
.text:00401E57
.text:00401E57 loc_401E57:                             ; CODE XREF: sub_401CF0+140↑j
.text:00401E57                 movzx   edx, byte ptr [eax+1]
.text:00401E5B                 test    dl, dl
.text:00401E5D                 jz      short loc_401E32
.text:00401E5F                 mov     ebx, [esp+5Ch+arg_C]
.text:00401E63                 xor     ecx, ecx
.text:00401E65                 test    ebx, ebx
.text:00401E67                 jz      short loc_401E72
.text:00401E69                 cmp     dl, 2Dh ; '-'
.text:00401E6C                 jz      loc_40276A
.text:00401E72
.text:00401E72 loc_401E72:                             ; CODE XREF: sub_401CF0+177↑j
.text:00401E72                                         ; sub_401CF0+A7F↓j
.text:00401E72                 lea     esi, [ecx+eax+1]
.text:00401E76                 mov     [ebp+14h], esi
.text:00401E79                 lea     esi, [esi+0]
.text:00401E80
.text:00401E80 loc_401E80:                             ; CODE XREF: sub_401CF0+AD↑j
.text:00401E80                 mov     ecx, [esp+5Ch+arg_C]
.text:00401E84                 test    ecx, ecx
.text:00401E86                 jz      loc_402210
.text:00401E8C                 mov     edx, [ebp+0]
.text:00401E8F                 mov     edi, [esp+5Ch+arg_4]
.text:00401E93                 mov     eax, [edi+edx*4]
.text:00401E96                 movzx   edx, byte ptr [eax+1]
.text:00401E9A                 cmp     dl, 2Dh ; '-'
.text:00401E9D                 jz      short loc_401EB5
.text:00401E9F                 mov     ebx, [esp+5Ch+arg_14]
.text:00401EA3                 test    ebx, ebx
.text:00401EA5                 jz      loc_402210
.text:00401EAB                 cmp     byte ptr [eax+2], 0
.text:00401EAF                 jz      loc_40274A
.text:00401EB5
.text:00401EB5 loc_401EB5:                             ; CODE XREF: sub_401CF0+1AD↑j
.text:00401EB5                                         ; sub_401CF0+A75↓j
.text:00401EB5                 mov     [esp+5Ch+var_18], 0
.text:00401EBD                 mov     ecx, [ebp+14h]
.text:00401EC0                 mov     [esp+5Ch+var_1C], 0
.text:00401EC8                 mov     [esp+5Ch+var_20], 0
.text:00401ED0                 mov     edi, ecx
.text:00401ED2                 mov     [esp+5Ch+var_24], 0FFFFFFFFh
.text:00401EDA                 movzx   eax, byte ptr [ecx]
.text:00401EDD                 test    al, al
.text:00401EDF                 jz      short loc_401EFC
.text:00401EE1                 cmp     al, 3Dh ; '='
.text:00401EE3                 jz      short loc_401EFC
.text:00401EE5                 lea     esi, [esi+0]
.text:00401EE9                 lea     edi, [edi+0]
.text:00401EF0
.text:00401EF0 loc_401EF0:                             ; CODE XREF: sub_401CF0+20A↓j
.text:00401EF0                 inc     edi
.text:00401EF1                 movzx   eax, byte ptr [edi]
.text:00401EF4                 test    al, al
.text:00401EF6                 jz      short loc_401EFC
.text:00401EF8                 cmp     al, 3Dh ; '='
.text:00401EFA                 jnz     short loc_401EF0
.text:00401EFC
.text:00401EFC loc_401EFC:                             ; CODE XREF: sub_401CF0+1EF↑j
.text:00401EFC                                         ; sub_401CF0+1F3↑j ...
.text:00401EFC                 mov     [esp+5Ch+var_28], 0
.text:00401F04                 mov     esi, [esp+5Ch+arg_C]
.text:00401F08                 mov     ebx, [esi]
.text:00401F0A                 test    ebx, ebx
.text:00401F0C                 mov     edx, ebx
.text:00401F0E                 jz      loc_402130
.text:00401F14                 lea     esi, [esi+0]
.text:00401F1A                 lea     edi, [edi+0]
.text:00401F20
.text:00401F20 loc_401F20:                             ; CODE XREF: sub_401CF0+25E↓j
.text:00401F20                 mov     [esp+5Ch+Str2], ecx ; Str2
.text:00401F24                 mov     ebx, edi
.text:00401F26                 sub     ebx, ecx
.text:00401F28                 mov     [esp+5Ch+MaxCount], ebx ; MaxCount
.text:00401F2C                 mov     [esp+5Ch+Str1], edx ; Str1
.text:00401F2F                 call    strncmp
.text:00401F34                 test    eax, eax
.text:00401F36                 jz      loc_4026C6
.text:00401F3C
.text:00401F3C loc_401F3C:                             ; CODE XREF: sub_401CF0+A0F↓j
.text:00401F3C                                         ; sub_401CF0+A24↓j ...
.text:00401F3C                 inc     [esp+5Ch+var_28]
.text:00401F40                 add     esi, 10h
.text:00401F43                 mov     ecx, [esi]
.text:00401F45                 test    ecx, ecx
.text:00401F47                 mov     edx, ecx
.text:00401F49                 jz      short loc_401F50
.text:00401F4B                 mov     ecx, [ebp+14h]
.text:00401F4E                 jmp     short loc_401F20
.text:00401F50 ; ---------------------------------------------------------------------------
.text:00401F50
.text:00401F50 loc_401F50:                             ; CODE XREF: sub_401CF0+259↑j
.text:00401F50                                         ; sub_401CF0+A55↓j
.text:00401F50                 mov     esi, [esp+5Ch+var_20]
.text:00401F54                 test    esi, esi
.text:00401F56                 jz      short loc_401F64
.text:00401F58                 mov     edx, [esp+5Ch+var_1C]
.text:00401F5C                 test    edx, edx
.text:00401F5E                 jz      loc_402670
.text:00401F64
.text:00401F64 loc_401F64:                             ; CODE XREF: sub_401CF0+266↑j
.text:00401F64                 mov     eax, [esp+5Ch+var_18]
.text:00401F68                 test    eax, eax
.text:00401F6A                 jz      loc_402130
.text:00401F70                 mov     ecx, [ebp+0]
.text:00401F73                 lea     eax, [ecx+1]
.text:00401F76                 mov     [ebp+0], eax
.text:00401F79                 cmp     byte ptr [edi], 0
.text:00401F7C                 jz      loc_402090
.text:00401F82                 mov     ecx, [esp+5Ch+var_18]
.text:00401F86                 mov     esi, [ecx+4]
.text:00401F89                 test    esi, esi
.text:00401F8B                 jz      short loc_401FD6
.text:00401F8D                 lea     ebx, [edi+1]
.text:00401F90                 mov     [ebp+0Ch], ebx
.text:00401F93
.text:00401F93 loc_401F93:                             ; CODE XREF: sub_401CF0+3A8↓j
.text:00401F93                                         ; sub_401CF0+3C4↓j
.text:00401F93                 mov     ebx, [ebp+14h]
.text:00401F96                 mov     [esp+5Ch+Str1], ebx ; Str
.text:00401F99                 call    strlen
.text:00401F9E                 add     [ebp+14h], eax
.text:00401FA1                 mov     esi, [esp+5Ch+arg_10]
.text:00401FA5                 test    esi, esi
.text:00401FA7                 jz      short loc_401FB3
.text:00401FA9                 mov     ebp, [esp+5Ch+var_24]
.text:00401FAD                 mov     ecx, [esp+5Ch+arg_10]
.text:00401FB1                 mov     [ecx], ebp
.text:00401FB3
.text:00401FB3 loc_401FB3:                             ; CODE XREF: sub_401CF0+2B7↑j
.text:00401FB3                 mov     eax, [esp+5Ch+var_18]
.text:00401FB7                 mov     ecx, [eax+8]
.text:00401FBA                 test    ecx, ecx
.text:00401FBC                 jnz     short loc_401FCA
.text:00401FBE                 mov     ecx, [esp+5Ch+var_18]
.text:00401FC2
.text:00401FC2 loc_401FC2:                             ; CODE XREF: sub_401CF0+723↓j
.text:00401FC2                 mov     eax, [ecx+0Ch]
.text:00401FC5                 jmp     loc_401E47
.text:00401FCA ; ---------------------------------------------------------------------------
.text:00401FCA
.text:00401FCA loc_401FCA:                             ; CODE XREF: sub_401CF0+2CC↑j
.text:00401FCA                                         ; sub_401CF0+719↓j
.text:00401FCA                 mov     esi, [eax+0Ch]
.text:00401FCD                 xor     eax, eax
.text:00401FCF                 mov     [ecx], esi
.text:00401FD1                 jmp     loc_401E47
.text:00401FD6 ; ---------------------------------------------------------------------------
.text:00401FD6
.text:00401FD6 loc_401FD6:                             ; CODE XREF: sub_401CF0+29B↑j
.text:00401FD6                 mov     edi, [esp+5Ch+var_14]
.text:00401FDA                 test    edi, edi
.text:00401FDC                 jz      short loc_402030
.text:00401FDE                 mov     esi, [esp+5Ch+arg_4]
.text:00401FE2                 mov     edx, [esi+eax*4-4]
.text:00401FE6                 cmp     byte ptr [edx+1], 2Dh ; '-'
.text:00401FEA                 jz      short loc_402052
.text:00401FEC                 mov     [esp+5Ch+Str1], offset aSOptionCSDoesn ; "%s: option `%c%s' doesn't allow an argu"...
.text:00401FF3                 call    ds:libintl_gettext
.text:00401FF9                 mov     edx, [esp+5Ch+var_18]
.text:00401FFD                 mov     edi, [edx]
.text:00401FFF                 mov     [esp+5Ch+var_4C], edi
.text:00402003                 mov     ebx, [ebp+0]
.text:00402006                 mov     edi, [esp+5Ch+arg_4]
.text:0040200A                 mov     ecx, [edi+ebx*4-4]
.text:0040200E                 movsx   esi, byte ptr [ecx]
.text:00402011                 mov     ecx, ds:_iob
.text:00402017                 add     ecx, 40h ; '@'
.text:0040201A                 mov     [esp+5Ch+var_50], esi
.text:0040201E                 mov     ebx, [edi]
.text:00402020                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402024                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00402027                 mov     [esp+5Ch+MaxCount], ebx
.text:0040202B                 call    fprintf
.text:00402030
.text:00402030 loc_402030:                             ; CODE XREF: sub_401CF0+2EC↑j
.text:00402030                                         ; sub_401CF0+398↓j
.text:00402030                 mov     ecx, [ebp+14h]
.text:00402033                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00402036                 call    strlen
.text:0040203B                 add     [ebp+14h], eax
.text:0040203E                 mov     eax, [esp+5Ch+var_18]
.text:00402042                 mov     esi, [eax+0Ch]
.text:00402045                 mov     [ebp+8], esi
.text:00402048
.text:00402048 loc_402048:                             ; CODE XREF: sub_401CF0+4E5↓j
.text:00402048                                         ; sub_401CF0+73E↓j ...
.text:00402048                 mov     eax, 3Fh ; '?'
.text:0040204D                 jmp     loc_401E47
.text:00402052 ; ---------------------------------------------------------------------------
.text:00402052
.text:00402052 loc_402052:                             ; CODE XREF: sub_401CF0+2FA↑j
.text:00402052                 mov     [esp+5Ch+Str1], offset aSOptionSDoesnT ; "%s: option `--%s' doesn't allow an argu"...
.text:00402059                 call    ds:libintl_gettext
.text:0040205F                 mov     edx, [esp+5Ch+var_18]
.text:00402063                 mov     edi, [esp+5Ch+arg_4]
.text:00402067                 mov     ecx, ds:_iob
.text:0040206D                 mov     esi, [edx]
.text:0040206F                 add     ecx, 40h ; '@'
.text:00402072                 mov     [esp+5Ch+var_50], esi
.text:00402076                 mov     ebx, [edi]
.text:00402078                 mov     [esp+5Ch+Str2], eax ; Format
.text:0040207C                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:0040207F                 mov     [esp+5Ch+MaxCount], ebx
.text:00402083                 call    fprintf
.text:00402088                 jmp     short loc_402030
.text:00402088 ; ---------------------------------------------------------------------------
.text:0040208A                 align 10h
.text:00402090
.text:00402090 loc_402090:                             ; CODE XREF: sub_401CF0+28C↑j
.text:00402090                 mov     ebx, [esp+5Ch+var_18]
.text:00402094                 cmp     dword ptr [ebx+4], 1
.text:00402098                 jnz     loc_401F93
.text:0040209E                 cmp     eax, [esp+5Ch+arg_0]
.text:004020A2                 jge     short loc_4020B9
.text:004020A4                 mov     ebx, [esp+5Ch+arg_4]
.text:004020A8                 lea     edi, [ecx+2]
.text:004020AB                 mov     [ebp+0], edi
.text:004020AE                 mov     esi, [ebx+eax*4]
.text:004020B1                 mov     [ebp+0Ch], esi
.text:004020B4                 jmp     loc_401F93
.text:004020B9 ; ---------------------------------------------------------------------------
.text:004020B9
.text:004020B9 loc_4020B9:                             ; CODE XREF: sub_401CF0+3B2↑j
.text:004020B9                 mov     edx, [esp+5Ch+var_14]
.text:004020BD                 test    edx, edx
.text:004020BF                 jnz     short loc_4020F0
.text:004020C1
.text:004020C1 loc_4020C1:                             ; CODE XREF: sub_401CF0+437↓j
.text:004020C1                 mov     edx, [ebp+14h]
.text:004020C4                 mov     [esp+5Ch+Str1], edx ; Str
.text:004020C7                 call    strlen
.text:004020CC                 add     [ebp+14h], eax
.text:004020CF                 mov     eax, [esp+5Ch+var_18]
.text:004020D3                 mov     edi, [eax+0Ch]
.text:004020D6                 mov     [ebp+8], edi
.text:004020D9
.text:004020D9 loc_4020D9:                             ; CODE XREF: sub_401CF0+7C2↓j
.text:004020D9                 mov     ebp, [esp+5Ch+Str]
.text:004020DD                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:004020E1                 setnz   bl
.text:004020E4                 movzx   esi, bl
.text:004020E7                 lea     eax, [esi+esi*4+3Ah]
.text:004020EB                 jmp     loc_401E47
.text:004020F0 ; ---------------------------------------------------------------------------
.text:004020F0
.text:004020F0 loc_4020F0:                             ; CODE XREF: sub_401CF0+3CF↑j
.text:004020F0                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:004020F7                 call    ds:libintl_gettext
.text:004020FD                 mov     ecx, [ebp+0]
.text:00402100                 mov     esi, [esp+5Ch+arg_4]
.text:00402104                 mov     ebx, [esi+ecx*4-4]
.text:00402108                 mov     ecx, ds:_iob
.text:0040210E                 mov     [esp+5Ch+var_50], ebx
.text:00402112                 mov     edi, [esi]
.text:00402114                 add     ecx, 40h ; '@'
.text:00402117                 mov     [esp+5Ch+Str2], eax ; Format
.text:0040211B                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:0040211E                 mov     [esp+5Ch+MaxCount], edi
.text:00402122                 call    fprintf
.text:00402127                 jmp     short loc_4020C1
.text:00402127 ; ---------------------------------------------------------------------------
.text:00402129                 align 10h
.text:00402130
.text:00402130 loc_402130:                             ; CODE XREF: sub_401CF0+21E↑j
.text:00402130                                         ; sub_401CF0+27A↑j
.text:00402130                 mov     eax, [esp+5Ch+arg_14]
.text:00402134                 test    eax, eax
.text:00402136                 jz      short loc_402166
.text:00402138                 mov     ebx, [ebp+0]
.text:0040213B                 mov     esi, [esp+5Ch+arg_4]
.text:0040213F                 mov     edi, [esi+ebx*4]
.text:00402142                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:00402146                 jz      short loc_402169
.text:00402148                 mov     ecx, [ebp+14h]
.text:0040214B                 mov     edx, [esp+5Ch+Str]
.text:0040214F                 movsx   ebx, byte ptr [ecx]
.text:00402152                 mov     [esp+5Ch+Str1], edx ; Str
.text:00402155                 mov     [esp+5Ch+Str2], ebx ; Val
.text:00402159                 call    strchr
.text:0040215E                 test    eax, eax
.text:00402160                 jnz     loc_402210
.text:00402166
.text:00402166 loc_402166:                             ; CODE XREF: sub_401CF0+446↑j
.text:00402166                 mov     ebx, [ebp+0]
.text:00402169
.text:00402169 loc_402169:                             ; CODE XREF: sub_401CF0+456↑j
.text:00402169                 mov     eax, [esp+5Ch+var_14]
.text:0040216D                 test    eax, eax
.text:0040216F                 jz      short loc_4021C1
.text:00402171                 mov     esi, [esp+5Ch+arg_4]
.text:00402175                 mov     edi, [esi+ebx*4]
.text:00402178                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:0040217C                 jz      short loc_4021DA
.text:0040217E                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO ; "%s: unrecognized option `%c%s'\n"
.text:00402185                 call    ds:libintl_gettext
.text:0040218B                 mov     edi, [ebp+14h]
.text:0040218E                 mov     [esp+5Ch+var_4C], edi
.text:00402192                 mov     ebx, [ebp+0]
.text:00402195                 mov     edi, [esp+5Ch+arg_4]
.text:00402199                 mov     esi, [edi+ebx*4]
.text:0040219C                 movsx   ecx, byte ptr [esi]
.text:0040219F                 mov     esi, ds:_iob
.text:004021A5                 add     esi, 40h ; '@'
.text:004021A8                 mov     [esp+5Ch+var_50], ecx
.text:004021AC                 mov     ebx, [edi]
.text:004021AE                 mov     [esp+5Ch+Str2], eax ; Format
.text:004021B2                 mov     [esp+5Ch+Str1], esi ; Stream
.text:004021B5                 mov     [esp+5Ch+MaxCount], ebx
.text:004021B9                 call    fprintf
.text:004021BE
.text:004021BE loc_4021BE:                             ; CODE XREF: sub_401CF0+51D↓j
.text:004021BE                 mov     ebx, [ebp+0]
.text:004021C1
.text:004021C1 loc_4021C1:                             ; CODE XREF: sub_401CF0+47F↑j
.text:004021C1                 mov     dword ptr [ebp+14h], offset dword_401BA0
.text:004021C8                 lea     edx, [ebx+1]
.text:004021CB                 mov     [ebp+0], edx
.text:004021CE
.text:004021CE loc_4021CE:                             ; CODE XREF: sub_401CF0+999↓j
.text:004021CE                 mov     dword ptr [ebp+8], 0
.text:004021D5                 jmp     loc_402048
.text:004021DA ; ---------------------------------------------------------------------------
.text:004021DA
.text:004021DA loc_4021DA:                             ; CODE XREF: sub_401CF0+48C↑j
.text:004021DA                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO_0 ; "%s: unrecognized option `--%s'\n"
.text:004021E1                 call    ds:libintl_gettext
.text:004021E7                 mov     ecx, [ebp+14h]
.text:004021EA                 mov     edi, [esp+5Ch+arg_4]
.text:004021EE                 mov     edx, ds:_iob
.text:004021F4                 mov     [esp+5Ch+var_50], ecx
.text:004021F8                 mov     ebx, [edi]
.text:004021FA                 add     edx, 40h ; '@'
.text:004021FD                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402201                 mov     [esp+5Ch+MaxCount], ebx
.text:00402205                 mov     [esp+5Ch+Str1], edx ; Stream
.text:00402208                 call    fprintf
.text:0040220D                 jmp     short loc_4021BE
.text:0040220D ; ---------------------------------------------------------------------------
.text:0040220F                 align 10h
.text:00402210
.text:00402210 loc_402210:                             ; CODE XREF: sub_401CF0+196↑j
.text:00402210                                         ; sub_401CF0+1B5↑j ...
.text:00402210                 mov     esi, [ebp+14h]
.text:00402213                 movzx   ebx, byte ptr [esi]
.text:00402216                 inc     esi
.text:00402217                 mov     [ebp+14h], esi
.text:0040221A                 mov     ecx, [esp+5Ch+Str]
.text:0040221E                 movsx   esi, bl
.text:00402221                 mov     [esp+5Ch+Str2], esi ; Val
.text:00402225                 mov     edi, esi
.text:00402227                 mov     [esp+5Ch+Str1], ecx ; Str
.text:0040222A                 call    strchr
.text:0040222F                 mov     ecx, [ebp+14h]
.text:00402232                 cmp     byte ptr [ecx], 0
.text:00402235                 jnz     short loc_40223A
.text:00402237                 inc     dword ptr [ebp+0]
.text:0040223A
.text:0040223A loc_40223A:                             ; CODE XREF: sub_401CF0+545↑j
.text:0040223A                 test    eax, eax
.text:0040223C                 jz      loc_402620
.text:00402242                 cmp     bl, 3Ah ; ':'
.text:00402245                 jz      loc_402620
.text:0040224B                 cmp     byte ptr [eax], 57h ; 'W'
.text:0040224E                 jz      loc_402306
.text:00402254                 movzx   edx, byte ptr [eax+1]
.text:00402258
.text:00402258 loc_402258:                             ; CODE XREF: sub_401CF0+61D↓j
.text:00402258                 cmp     dl, 3Ah ; ':'
.text:0040225B                 jz      short loc_402264
.text:0040225D
.text:0040225D loc_40225D:                             ; CODE XREF: sub_401CF0+590↓j
.text:0040225D                 mov     eax, esi
.text:0040225F                 jmp     loc_401E47
.text:00402264 ; ---------------------------------------------------------------------------
.text:00402264
.text:00402264 loc_402264:                             ; CODE XREF: sub_401CF0+56B↑j
.text:00402264                 cmp     byte ptr [eax+2], 3Ah ; ':'
.text:00402268                 jz      loc_4022F1
.text:0040226E                 cmp     byte ptr [ecx], 0
.text:00402271                 jz      short loc_402282
.text:00402273
.text:00402273 loc_402273:                             ; CODE XREF: sub_401CF0+604↓j
.text:00402273                 inc     dword ptr [ebp+0]
.text:00402276                 mov     [ebp+0Ch], ecx
.text:00402279
.text:00402279 loc_402279:                             ; CODE XREF: sub_401CF0+5AB↓j
.text:00402279                                         ; sub_401CF0+5C6↓j ...
.text:00402279                 mov     dword ptr [ebp+14h], 0
.text:00402280                 jmp     short loc_40225D
.text:00402282 ; ---------------------------------------------------------------------------
.text:00402282
.text:00402282 loc_402282:                             ; CODE XREF: sub_401CF0+581↑j
.text:00402282                 mov     ecx, [ebp+0]
.text:00402285                 cmp     ecx, [esp+5Ch+arg_0]
.text:00402289                 jz      short loc_40229D
.text:0040228B                 mov     eax, [esp+5Ch+arg_4]
.text:0040228F                 lea     edx, [ecx+1]
.text:00402292                 mov     [ebp+0], edx
.text:00402295                 mov     ebx, [eax+ecx*4]
.text:00402298                 mov     [ebp+0Ch], ebx
.text:0040229B                 jmp     short loc_402279
.text:0040229D ; ---------------------------------------------------------------------------
.text:0040229D
.text:0040229D loc_40229D:                             ; CODE XREF: sub_401CF0+599↑j
.text:0040229D                 mov     ecx, [esp+5Ch+var_14]
.text:004022A1                 test    ecx, ecx
.text:004022A3                 jnz     short loc_4022BF
.text:004022A5
.text:004022A5 loc_4022A5:                             ; CODE XREF: sub_401CF0+5FF↓j
.text:004022A5                 mov     [ebp+8], edi
.text:004022A8                 mov     edi, [esp+5Ch+Str]
.text:004022AC                 cmp     byte ptr [edi], 3Ah ; ':'
.text:004022AF                 jz      short loc_4022B8
.text:004022B1                 mov     esi, 3Fh ; '?'
.text:004022B6                 jmp     short loc_402279
.text:004022B8 ; ---------------------------------------------------------------------------
.text:004022B8
.text:004022B8 loc_4022B8:                             ; CODE XREF: sub_401CF0+5BF↑j
.text:004022B8                 mov     esi, 3Ah ; ':'
.text:004022BD                 jmp     short loc_402279
.text:004022BF ; ---------------------------------------------------------------------------
.text:004022BF
.text:004022BF loc_4022BF:                             ; CODE XREF: sub_401CF0+5B3↑j
.text:004022BF                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:004022C6                 call    ds:libintl_gettext
.text:004022CC                 mov     [esp+5Ch+var_50], edi
.text:004022D0                 mov     ebx, [esp+5Ch+arg_4]
.text:004022D4                 mov     edx, ds:_iob
.text:004022DA                 mov     esi, [ebx]
.text:004022DC                 add     edx, 40h ; '@'
.text:004022DF                 mov     [esp+5Ch+Str2], eax ; Format
.text:004022E3                 mov     [esp+5Ch+MaxCount], esi
.text:004022E7                 mov     [esp+5Ch+Str1], edx ; Stream
.text:004022EA                 call    fprintf
.text:004022EF                 jmp     short loc_4022A5
.text:004022F1 ; ---------------------------------------------------------------------------
.text:004022F1
.text:004022F1 loc_4022F1:                             ; CODE XREF: sub_401CF0+578↑j
.text:004022F1                 cmp     byte ptr [ecx], 0
.text:004022F4                 jnz     loc_402273
.text:004022FA                 mov     dword ptr [ebp+0Ch], 0
.text:00402301                 jmp     loc_402279
.text:00402306 ; ---------------------------------------------------------------------------
.text:00402306
.text:00402306 loc_402306:                             ; CODE XREF: sub_401CF0+55E↑j
.text:00402306                 movzx   edx, byte ptr [eax+1]
.text:0040230A                 cmp     dl, 3Bh ; ';'
.text:0040230D                 jnz     loc_402258
.text:00402313                 mov     [esp+5Ch+var_2C], 0
.text:0040231B                 mov     [esp+5Ch+var_30], 0
.text:00402323                 mov     [esp+5Ch+var_34], 0
.text:0040232B                 mov     [esp+5Ch+var_38], 0
.text:00402333                 cmp     byte ptr [ecx], 0
.text:00402336                 jz      loc_4025AB
.text:0040233C                 inc     dword ptr [ebp+0]
.text:0040233F                 mov     [ebp+0Ch], ecx
.text:00402342
.text:00402342 loc_402342:                             ; CODE XREF: sub_401CF0+8D4↓j
.text:00402342                 mov     edi, [ebp+0Ch]
.text:00402345                 mov     [ebp+14h], edi
.text:00402348                 movzx   eax, byte ptr [edi]
.text:0040234B                 test    al, al
.text:0040234D                 jz      short loc_40235F
.text:0040234F                 cmp     al, 3Dh ; '='
.text:00402351                 jz      short loc_40235F
.text:00402353
.text:00402353 loc_402353:                             ; CODE XREF: sub_401CF0+66D↓j
.text:00402353                 inc     edi
.text:00402354                 movzx   eax, byte ptr [edi]
.text:00402357                 test    al, al
.text:00402359                 jz      short loc_40235F
.text:0040235B                 cmp     al, 3Dh ; '='
.text:0040235D                 jnz     short loc_402353
.text:0040235F
.text:0040235F loc_40235F:                             ; CODE XREF: sub_401CF0+65D↑j
.text:0040235F                                         ; sub_401CF0+661↑j ...
.text:0040235F                 mov     [esp+5Ch+var_3C], 0
.text:00402367                 mov     esi, [esp+5Ch+arg_C]
.text:0040236B                 mov     eax, [esi]
.text:0040236D                 test    eax, eax
.text:0040236F                 jz      loc_4024F0
.text:00402375                 mov     ecx, eax
.text:00402377
.text:00402377 loc_402377:                             ; CODE XREF: sub_401CF0+6B3↓j
.text:00402377                 mov     ebx, [ebp+14h]
.text:0040237A                 mov     eax, edi
.text:0040237C                 mov     [esp+5Ch+Str1], ecx ; Str1
.text:0040237F                 sub     eax, ebx
.text:00402381                 mov     [esp+5Ch+MaxCount], eax ; MaxCount
.text:00402385                 mov     [esp+5Ch+Str2], ebx ; Str2
.text:00402389                 call    strncmp
.text:0040238E                 test    eax, eax
.text:00402390                 jz      loc_402557
.text:00402396
.text:00402396 loc_402396:                             ; CODE XREF: sub_401CF0+88C↓j
.text:00402396                                         ; sub_401CF0+89D↓j
.text:00402396                 inc     [esp+5Ch+var_3C]
.text:0040239A                 add     esi, 10h
.text:0040239D                 mov     edx, [esi]
.text:0040239F                 test    edx, edx
.text:004023A1                 mov     ecx, edx
.text:004023A3                 jnz     short loc_402377
.text:004023A5
.text:004023A5 loc_4023A5:                             ; CODE XREF: sub_401CF0+8B6↓j
.text:004023A5                 mov     esi, [esp+5Ch+var_34]
.text:004023A9                 test    esi, esi
.text:004023AB                 jz      short loc_4023B9
.text:004023AD                 mov     ebx, [esp+5Ch+var_30]
.text:004023B1                 test    ebx, ebx
.text:004023B3                 jz      loc_402501
.text:004023B9
.text:004023B9 loc_4023B9:                             ; CODE XREF: sub_401CF0+6BB↑j
.text:004023B9                 mov     esi, [esp+5Ch+var_2C]
.text:004023BD                 test    esi, esi
.text:004023BF                 jz      loc_4024F0
.text:004023C5                 cmp     byte ptr [edi], 0
.text:004023C8                 jz      loc_402470
.text:004023CE                 mov     ecx, [esp+5Ch+var_2C]
.text:004023D2                 mov     ebx, [ecx+4]
.text:004023D5                 test    ebx, ebx
.text:004023D7                 jz      short loc_402418
.text:004023D9                 lea     edx, [edi+1]
.text:004023DC                 mov     [ebp+0Ch], edx
.text:004023DF
.text:004023DF loc_4023DF:                             ; CODE XREF: sub_401CF0+788↓j
.text:004023DF                                         ; sub_401CF0+7A7↓j
.text:004023DF                 mov     edi, [ebp+14h]
.text:004023E2                 mov     [esp+5Ch+Str1], edi ; Str
.text:004023E5                 call    strlen
.text:004023EA                 add     [ebp+14h], eax
.text:004023ED                 mov     eax, [esp+5Ch+arg_10]
.text:004023F1                 test    eax, eax
.text:004023F3                 jz      short loc_402400
.text:004023F5                 mov     edx, [esp+5Ch+var_38]
.text:004023F9                 mov     ebp, [esp+5Ch+arg_10]
.text:004023FD                 mov     [ebp+0], edx
.text:00402400
.text:00402400 loc_402400:                             ; CODE XREF: sub_401CF0+703↑j
.text:00402400                 mov     eax, [esp+5Ch+var_2C]
.text:00402404                 mov     ecx, [eax+8]
.text:00402407                 test    ecx, ecx
.text:00402409                 jnz     loc_401FCA
.text:0040240F                 mov     ecx, [esp+5Ch+var_2C]
.text:00402413                 jmp     loc_401FC2
.text:00402418 ; ---------------------------------------------------------------------------
.text:00402418
.text:00402418 loc_402418:                             ; CODE XREF: sub_401CF0+6E7↑j
.text:00402418                 mov     eax, [esp+5Ch+var_14]
.text:0040241C                 test    eax, eax
.text:0040241E                 jnz     short loc_402433
.text:00402420
.text:00402420 loc_402420:                             ; CODE XREF: sub_401CF0+779↓j
.text:00402420                 mov     ecx, [ebp+14h]
.text:00402423                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00402426                 call    strlen
.text:0040242B                 add     [ebp+14h], eax
.text:0040242E                 jmp     loc_402048
.text:00402433 ; ---------------------------------------------------------------------------
.text:00402433
.text:00402433 loc_402433:                             ; CODE XREF: sub_401CF0+72E↑j
.text:00402433                 mov     [esp+5Ch+Str1], offset aSOptionWSDoesn ; "%s: option `-W %s' doesn't allow an arg"...
.text:0040243A                 call    ds:libintl_gettext
.text:00402440                 mov     edx, [esp+5Ch+var_2C]
.text:00402444                 mov     ebx, [esp+5Ch+arg_4]
.text:00402448                 mov     edi, [edx]
.text:0040244A                 mov     [esp+5Ch+var_50], edi
.text:0040244E                 mov     edi, ds:_iob
.text:00402454                 mov     esi, [ebx]
.text:00402456                 mov     [esp+5Ch+Str2], eax ; Format
.text:0040245A                 add     edi, 40h ; '@'
.text:0040245D                 mov     [esp+5Ch+MaxCount], esi
.text:00402461                 mov     [esp+5Ch+Str1], edi ; Stream
.text:00402464                 call    fprintf
.text:00402469                 jmp     short loc_402420
.text:00402469 ; ---------------------------------------------------------------------------
.text:0040246B                 align 10h
.text:00402470
.text:00402470 loc_402470:                             ; CODE XREF: sub_401CF0+6D8↑j
.text:00402470                 mov     esi, [esp+5Ch+var_2C]
.text:00402474                 cmp     dword ptr [esi+4], 1
.text:00402478                 jnz     loc_4023DF
.text:0040247E                 mov     ecx, [ebp+0]
.text:00402481                 cmp     ecx, [esp+5Ch+arg_0]
.text:00402485                 jge     short loc_40249C
.text:00402487                 mov     eax, [esp+5Ch+arg_4]
.text:0040248B                 lea     ebx, [ecx+1]
.text:0040248E                 mov     [ebp+0], ebx
.text:00402491                 mov     edi, [eax+ecx*4]
.text:00402494                 mov     [ebp+0Ch], edi
.text:00402497                 jmp     loc_4023DF
.text:0040249C ; ---------------------------------------------------------------------------
.text:0040249C
.text:0040249C loc_40249C:                             ; CODE XREF: sub_401CF0+795↑j
.text:0040249C                 mov     edx, [esp+5Ch+var_14]
.text:004024A0                 test    edx, edx
.text:004024A2                 jnz     short loc_4024B7
.text:004024A4
.text:004024A4 loc_4024A4:                             ; CODE XREF: sub_401CF0+7FE↓j
.text:004024A4                 mov     edx, [ebp+14h]
.text:004024A7                 mov     [esp+5Ch+Str1], edx ; Str
.text:004024AA                 call    strlen
.text:004024AF                 add     [ebp+14h], eax
.text:004024B2                 jmp     loc_4020D9
.text:004024B7 ; ---------------------------------------------------------------------------
.text:004024B7
.text:004024B7 loc_4024B7:                             ; CODE XREF: sub_401CF0+7B2↑j
.text:004024B7                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:004024BE                 call    ds:libintl_gettext
.text:004024C4                 mov     ecx, [ebp+0]
.text:004024C7                 mov     ebx, [esp+5Ch+arg_4]
.text:004024CB                 mov     edi, [ebx+ecx*4-4]
.text:004024CF                 mov     ecx, ds:_iob
.text:004024D5                 mov     [esp+5Ch+var_50], edi
.text:004024D9                 mov     esi, [ebx]
.text:004024DB                 add     ecx, 40h ; '@'
.text:004024DE                 mov     [esp+5Ch+Str2], eax ; Format
.text:004024E2                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:004024E5                 mov     [esp+5Ch+MaxCount], esi
.text:004024E9                 call    fprintf
.text:004024EE                 jmp     short loc_4024A4
.text:004024F0 ; ---------------------------------------------------------------------------
.text:004024F0
.text:004024F0 loc_4024F0:                             ; CODE XREF: sub_401CF0+67F↑j
.text:004024F0                                         ; sub_401CF0+6CF↑j
.text:004024F0                 mov     dword ptr [ebp+14h], 0
.text:004024F7                 mov     eax, 57h ; 'W'
.text:004024FC                 jmp     loc_401E47
.text:00402501 ; ---------------------------------------------------------------------------
.text:00402501
.text:00402501 loc_402501:                             ; CODE XREF: sub_401CF0+6C3↑j
.text:00402501                 mov     edi, [esp+5Ch+var_14]
.text:00402505                 test    edi, edi
.text:00402507                 jnz     short loc_40251F
.text:00402509
.text:00402509 loc_402509:                             ; CODE XREF: sub_401CF0+865↓j
.text:00402509                 mov     edx, [ebp+14h]
.text:0040250C                 mov     [esp+5Ch+Str1], edx ; Str
.text:0040250F                 call    strlen
.text:00402514                 add     [ebp+14h], eax
.text:00402517                 inc     dword ptr [ebp+0]
.text:0040251A                 jmp     loc_402048
.text:0040251F ; ---------------------------------------------------------------------------
.text:0040251F
.text:0040251F loc_40251F:                             ; CODE XREF: sub_401CF0+817↑j
.text:0040251F                 mov     [esp+5Ch+Str1], offset aSOptionWSIsAmb ; "%s: option `-W %s' is ambiguous\n"
.text:00402526                 call    ds:libintl_gettext
.text:0040252C                 mov     ecx, [ebp+0]
.text:0040252F                 mov     ebx, [esp+5Ch+arg_4]
.text:00402533                 mov     edi, [ebx+ecx*4]
.text:00402536                 mov     ecx, ds:_iob
.text:0040253C                 mov     [esp+5Ch+var_50], edi
.text:00402540                 mov     esi, [ebx]
.text:00402542                 add     ecx, 40h ; '@'
.text:00402545                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402549                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:0040254C                 mov     [esp+5Ch+MaxCount], esi
.text:00402550                 call    fprintf
.text:00402555                 jmp     short loc_402509
.text:00402557 ; ---------------------------------------------------------------------------
.text:00402557
.text:00402557 loc_402557:                             ; CODE XREF: sub_401CF0+6A0↑j
.text:00402557                 mov     edx, [ebp+14h]
.text:0040255A                 mov     ebx, edi
.text:0040255C                 mov     ecx, [esi]
.text:0040255E                 sub     ebx, edx
.text:00402560                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00402563                 call    strlen
.text:00402568                 cmp     ebx, eax
.text:0040256A                 jz      short loc_402592
.text:0040256C                 mov     ebx, [esp+5Ch+var_2C]
.text:00402570                 test    ebx, ebx
.text:00402572                 jz      short loc_402581
.text:00402574                 mov     [esp+5Ch+var_34], 1
.text:0040257C                 jmp     loc_402396
.text:00402581 ; ---------------------------------------------------------------------------
.text:00402581
.text:00402581 loc_402581:                             ; CODE XREF: sub_401CF0+882↑j
.text:00402581                 mov     [esp+5Ch+var_2C], esi
.text:00402585                 mov     ecx, [esp+5Ch+var_3C]
.text:00402589                 mov     [esp+5Ch+var_38], ecx
.text:0040258D                 jmp     loc_402396
.text:00402592 ; ---------------------------------------------------------------------------
.text:00402592
.text:00402592 loc_402592:                             ; CODE XREF: sub_401CF0+87A↑j
.text:00402592                 mov     [esp+5Ch+var_2C], esi
.text:00402596                 mov     eax, [esp+5Ch+var_3C]
.text:0040259A                 mov     [esp+5Ch+var_30], 1
.text:004025A2                 mov     [esp+5Ch+var_38], eax
.text:004025A6                 jmp     loc_4023A5
.text:004025AB ; ---------------------------------------------------------------------------
.text:004025AB
.text:004025AB loc_4025AB:                             ; CODE XREF: sub_401CF0+646↑j
.text:004025AB                 mov     edx, [ebp+0]
.text:004025AE                 cmp     edx, [esp+5Ch+arg_0]
.text:004025B2                 jz      short loc_4025C9
.text:004025B4                 mov     ebx, [esp+5Ch+arg_4]
.text:004025B8                 lea     esi, [edx+1]
.text:004025BB                 mov     [ebp+0], esi
.text:004025BE                 mov     edi, [ebx+edx*4]
.text:004025C1                 mov     [ebp+0Ch], edi
.text:004025C4                 jmp     loc_402342
.text:004025C9 ; ---------------------------------------------------------------------------
.text:004025C9
.text:004025C9 loc_4025C9:                             ; CODE XREF: sub_401CF0+8C2↑j
.text:004025C9                 mov     edi, [esp+5Ch+var_14]
.text:004025CD                 test    edi, edi
.text:004025CF                 jnz     short loc_4025EC
.text:004025D1
.text:004025D1 loc_4025D1:                             ; CODE XREF: sub_401CF0+92C↓j
.text:004025D1                 mov     [ebp+8], esi
.text:004025D4                 mov     ebp, [esp+5Ch+Str]
.text:004025D8                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:004025DC                 jz      short loc_4025E8
.text:004025DE                 mov     bl, 3Fh ; '?'
.text:004025E0
.text:004025E0 loc_4025E0:                             ; CODE XREF: sub_401CF0+8FA↓j
.text:004025E0                 movsx   eax, bl
.text:004025E3                 jmp     loc_401E47
.text:004025E8 ; ---------------------------------------------------------------------------
.text:004025E8
.text:004025E8 loc_4025E8:                             ; CODE XREF: sub_401CF0+8EC↑j
.text:004025E8                 mov     bl, 3Ah ; ':'
.text:004025EA                 jmp     short loc_4025E0
.text:004025EC ; ---------------------------------------------------------------------------
.text:004025EC
.text:004025EC loc_4025EC:                             ; CODE XREF: sub_401CF0+8DF↑j
.text:004025EC                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:004025F3                 call    ds:libintl_gettext
.text:004025F9                 mov     [esp+5Ch+var_50], esi
.text:004025FD                 mov     edx, [esp+5Ch+arg_4]
.text:00402601                 mov     ecx, ds:_iob
.text:00402607                 mov     ebx, [edx]
.text:00402609                 add     ecx, 40h ; '@'
.text:0040260C                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402610                 mov     [esp+5Ch+MaxCount], ebx
.text:00402614                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00402617                 call    fprintf
.text:0040261C                 jmp     short loc_4025D1
.text:0040261C ; ---------------------------------------------------------------------------
.text:0040261E                 align 10h
.text:00402620
.text:00402620 loc_402620:                             ; CODE XREF: sub_401CF0+54C↑j
.text:00402620                                         ; sub_401CF0+555↑j
.text:00402620                 mov     eax, [esp+5Ch+var_14]
.text:00402624                 test    eax, eax
.text:00402626                 jz      short loc_40265F
.text:00402628                 mov     ebx, [ebp+1Ch]
.text:0040262B                 test    ebx, ebx
.text:0040262D                 jz      short loc_402667
.text:0040262F                 mov     [esp+5Ch+Str1], offset aSIllegalOption ; "%s: illegal option -- %c\n"
.text:00402636
.text:00402636 loc_402636:                             ; CODE XREF: sub_401CF0+97E↓j
.text:00402636                 call    ds:libintl_gettext
.text:0040263C                 mov     [esp+5Ch+var_50], esi
.text:00402640                 mov     ebx, [esp+5Ch+arg_4]
.text:00402644                 mov     edx, ds:_iob
.text:0040264A                 mov     esi, [ebx]
.text:0040264C                 add     edx, 40h ; '@'
.text:0040264F                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402653                 mov     [esp+5Ch+MaxCount], esi
.text:00402657                 mov     [esp+5Ch+Str1], edx ; Stream
.text:0040265A                 call    fprintf
.text:0040265F
.text:0040265F loc_40265F:                             ; CODE XREF: sub_401CF0+936↑j
.text:0040265F                 mov     [ebp+8], edi
.text:00402662                 jmp     loc_402048
.text:00402667 ; ---------------------------------------------------------------------------
.text:00402667
.text:00402667 loc_402667:                             ; CODE XREF: sub_401CF0+93D↑j
.text:00402667                 mov     [esp+5Ch+Str1], offset aSInvalidOption ; "%s: invalid option -- %c\n"
.text:0040266E                 jmp     short loc_402636
.text:00402670 ; ---------------------------------------------------------------------------
.text:00402670
.text:00402670 loc_402670:                             ; CODE XREF: sub_401CF0+26E↑j
.text:00402670                 mov     edi, [esp+5Ch+var_14]
.text:00402674                 test    edi, edi
.text:00402676                 jnz     short loc_40268E
.text:00402678
.text:00402678 loc_402678:                             ; CODE XREF: sub_401CF0+9D4↓j
.text:00402678                 mov     edx, [ebp+14h]
.text:0040267B                 mov     [esp+5Ch+Str1], edx ; Str
.text:0040267E                 call    strlen
.text:00402683                 add     [ebp+14h], eax
.text:00402686                 inc     dword ptr [ebp+0]
.text:00402689                 jmp     loc_4021CE
.text:0040268E ; ---------------------------------------------------------------------------
.text:0040268E
.text:0040268E loc_40268E:                             ; CODE XREF: sub_401CF0+986↑j
.text:0040268E                 mov     [esp+5Ch+Str1], offset aSOptionSIsAmbi ; "%s: option `%s' is ambiguous\n"
.text:00402695                 call    ds:libintl_gettext
.text:0040269B                 mov     ebx, [ebp+0]
.text:0040269E                 mov     edi, [esp+5Ch+arg_4]
.text:004026A2                 mov     ecx, [edi+ebx*4]
.text:004026A5                 mov     ebx, ds:_iob
.text:004026AB                 mov     [esp+5Ch+var_50], ecx
.text:004026AF                 mov     esi, [edi]
.text:004026B1                 add     ebx, 40h ; '@'
.text:004026B4                 mov     [esp+5Ch+Str2], eax ; Format
.text:004026B8                 mov     [esp+5Ch+Str1], ebx ; Stream
.text:004026BB                 mov     [esp+5Ch+MaxCount], esi
.text:004026BF                 call    fprintf
.text:004026C4                 jmp     short loc_402678
.text:004026C6 ; ---------------------------------------------------------------------------
.text:004026C6
.text:004026C6 loc_4026C6:                             ; CODE XREF: sub_401CF0+246↑j
.text:004026C6                 mov     ecx, [ebp+14h]
.text:004026C9                 mov     ebx, edi
.text:004026CB                 mov     edx, [esi]
.text:004026CD                 sub     ebx, ecx
.text:004026CF                 mov     [esp+5Ch+Str1], edx ; Str
.text:004026D2                 call    strlen
.text:004026D7                 cmp     ebx, eax
.text:004026D9                 jz      short loc_402731
.text:004026DB                 mov     ebx, [esp+5Ch+var_18]
.text:004026DF                 test    ebx, ebx
.text:004026E1                 jz      short loc_402720
.text:004026E3                 mov     edx, [esp+5Ch+arg_14]
.text:004026E7                 test    edx, edx
.text:004026E9                 jnz     short loc_4026F7
.text:004026EB                 mov     ecx, [esp+5Ch+var_18]
.text:004026EF                 mov     ebx, [esi+4]
.text:004026F2                 cmp     [ecx+4], ebx
.text:004026F5                 jz      short loc_402704
.text:004026F7
.text:004026F7 loc_4026F7:                             ; CODE XREF: sub_401CF0+9F9↑j
.text:004026F7                                         ; sub_401CF0+A1A↓j ...
.text:004026F7                 mov     [esp+5Ch+var_20], 1
.text:004026FF                 jmp     loc_401F3C
.text:00402704 ; ---------------------------------------------------------------------------
.text:00402704
.text:00402704 loc_402704:                             ; CODE XREF: sub_401CF0+A05↑j
.text:00402704                 mov     edx, [esi+8]
.text:00402707                 cmp     [ecx+8], edx
.text:0040270A                 jnz     short loc_4026F7
.text:0040270C                 mov     ebx, [esi+0Ch]
.text:0040270F                 cmp     [ecx+0Ch], ebx
.text:00402712                 jnz     short loc_4026F7
.text:00402714                 jmp     loc_401F3C
.text:00402714 ; ---------------------------------------------------------------------------
.text:00402719                 align 10h
.text:00402720
.text:00402720 loc_402720:                             ; CODE XREF: sub_401CF0+9F1↑j
.text:00402720                 mov     [esp+5Ch+var_18], esi
.text:00402724                 mov     eax, [esp+5Ch+var_28]
.text:00402728                 mov     [esp+5Ch+var_24], eax
.text:0040272C                 jmp     loc_401F3C
.text:00402731 ; ---------------------------------------------------------------------------
.text:00402731
.text:00402731 loc_402731:                             ; CODE XREF: sub_401CF0+9E9↑j
.text:00402731                 mov     [esp+5Ch+var_18], esi
.text:00402735                 mov     ecx, [esp+5Ch+var_28]
.text:00402739                 mov     [esp+5Ch+var_1C], 1
.text:00402741                 mov     [esp+5Ch+var_24], ecx
.text:00402745                 jmp     loc_401F50
.text:0040274A ; ---------------------------------------------------------------------------
.text:0040274A
.text:0040274A loc_40274A:                             ; CODE XREF: sub_401CF0+1BF↑j
.text:0040274A                 mov     eax, [esp+5Ch+Str]
.text:0040274E                 movsx   esi, dl
.text:00402751                 mov     [esp+5Ch+Str2], esi ; Val
.text:00402755                 mov     [esp+5Ch+Str1], eax ; Str
.text:00402758                 call    strchr
.text:0040275D                 test    eax, eax
.text:0040275F                 jnz     loc_402210
.text:00402765                 jmp     loc_401EB5
.text:0040276A ; ---------------------------------------------------------------------------
.text:0040276A
.text:0040276A loc_40276A:                             ; CODE XREF: sub_401CF0+17C↑j
.text:0040276A                 mov     ecx, 1
.text:0040276F                 jmp     loc_401E72
.text:00402774 ; ---------------------------------------------------------------------------
.text:00402774
.text:00402774 loc_402774:                             ; CODE XREF: sub_401CF0+D4↑j
.text:00402774                                         ; sub_401CF0+130↑j
.text:00402774                 mov     eax, [ebp+20h]
.text:00402777                 cmp     eax, [ebp+24h]
.text:0040277A                 jz      loc_401E50
.text:00402780                 mov     [ebp+0], eax
.text:00402783                 jmp     loc_401E50
.text:00402788 ; ---------------------------------------------------------------------------
.text:00402788
.text:00402788 loc_402788:                             ; CODE XREF: sub_401CF0+FE↑j
.text:00402788                 mov     [ebp+20h], eax
.text:0040278B                 jmp     loc_401E10
.text:00402790 ; ---------------------------------------------------------------------------
.text:00402790
.text:00402790 loc_402790:                             ; CODE XREF: sub_401CF0+CA↑j
.text:00402790                 mov     edx, [ebp+20h]
.text:00402793                 mov     eax, [ebp+24h]
.text:00402796                 cmp     edx, eax
.text:00402798                 jz      short loc_402810
.text:0040279A                 cmp     eax, ebx
.text:0040279C                 jz      short loc_4027B1
.text:0040279E                 mov     [esp+5Ch+Str2], ebp
.text:004027A2                 mov     ebx, [esp+5Ch+arg_4]
.text:004027A6                 mov     [esp+5Ch+Str1], ebx
.text:004027A9                 call    sub_4029A0
.text:004027AE                 mov     ebx, [ebp+0]
.text:004027B1
.text:004027B1 loc_4027B1:                             ; CODE XREF: sub_401CF0+AAC↑j
.text:004027B1                                         ; sub_401CF0+B22↓j ...
.text:004027B1                 cmp     ebx, [esp+5Ch+arg_0]
.text:004027B5                 jge     short loc_402800
.text:004027B7                 mov     esi, [esp+5Ch+arg_4]
.text:004027BB                 mov     eax, [esi+ebx*4]
.text:004027BE                 cmp     byte ptr [eax], 2Dh ; '-'
.text:004027C1                 jz      short loc_402808
.text:004027C3                 lea     esi, [esi+0]
.text:004027C9                 lea     edi, [edi+0]
.text:004027D0
.text:004027D0 loc_4027D0:                             ; CODE XREF: sub_401CF0+AFC↓j
.text:004027D0                                         ; sub_401CF0+B1C↓j
.text:004027D0                 lea     eax, [ebx+1]
.text:004027D3                 mov     ebx, eax
.text:004027D5                 mov     [ebp+0], eax
.text:004027D8                 cmp     eax, [esp+5Ch+arg_0]
.text:004027DC                 jge     short loc_402800
.text:004027DE                 mov     edi, [esp+5Ch+arg_4]
.text:004027E2                 mov     edx, [edi+eax*4]
.text:004027E5                 cmp     byte ptr [edx], 2Dh ; '-'
.text:004027E8                 jz      short loc_4027F0
.text:004027EA
.text:004027EA loc_4027EA:                             ; CODE XREF: sub_401CF0+B04↓j
.text:004027EA                 mov     ebx, eax
.text:004027EC                 jmp     short loc_4027D0
.text:004027EC ; ---------------------------------------------------------------------------
.text:004027EE                 align 10h
.text:004027F0
.text:004027F0 loc_4027F0:                             ; CODE XREF: sub_401CF0+AF8↑j
.text:004027F0                 cmp     byte ptr [edx+1], 0
.text:004027F4                 jz      short loc_4027EA
.text:004027F6                 lea     esi, [esi+0]
.text:004027F9                 lea     edi, [edi+0]
.text:00402800
.text:00402800 loc_402800:                             ; CODE XREF: sub_401CF0+AC5↑j
.text:00402800                                         ; sub_401CF0+AEC↑j ...
.text:00402800                 mov     [ebp+24h], ebx
.text:00402803                 jmp     loc_401DC0
.text:00402808 ; ---------------------------------------------------------------------------
.text:00402808
.text:00402808 loc_402808:                             ; CODE XREF: sub_401CF0+AD1↑j
.text:00402808                 cmp     byte ptr [eax+1], 0
.text:0040280C                 jz      short loc_4027D0
.text:0040280E                 jmp     short loc_402800
.text:00402810 ; ---------------------------------------------------------------------------
.text:00402810
.text:00402810 loc_402810:                             ; CODE XREF: sub_401CF0+AA8↑j
.text:00402810                 cmp     edx, ebx
.text:00402812                 jz      short loc_4027B1
.text:00402814                 mov     [ebp+20h], ebx
.text:00402817                 jmp     short loc_4027B1
.text:00402819 ; ---------------------------------------------------------------------------
.text:00402819
.text:00402819 loc_402819:                             ; CODE XREF: sub_401CF0+88↑j
.text:00402819                 mov     dword ptr [ebp+18h], 0
.text:00402820                 mov     esi, [esp+5Ch+Str]
.text:00402824
.text:00402824 loc_402824:                             ; CODE XREF: sub_401CF0+B49↓j
.text:00402824                 inc     esi
.text:00402825                 jmp     loc_401D88
.text:00402825 ; ---------------------------------------------------------------------------
.text:0040282A                 align 10h
.text:00402830
.text:00402830 loc_402830:                             ; CODE XREF: sub_401CF0+80↑j
.text:00402830                 mov     dword ptr [ebp+18h], 2
.text:00402837                 mov     esi, ecx
.text:00402839                 jmp     short loc_402824
.text:00402839 ; ---------------------------------------------------------------------------
.text:0040283B                 align 10h
.text:00402840
.text:00402840 loc_402840:                             ; CODE XREF: sub_401CF0+69↑j
.text:00402840                 mov     [esp+5Ch+Str1], offset VarName ; "POSIXLY_CORRECT"
.text:00402847                 call    getenv
.text:0040284C                 test    eax, eax
.text:0040284E                 jz      loc_401D64
.text:00402854                 jmp     loc_401D5F
.text:00402854 ; ---------------------------------------------------------------------------
.text:00402859                 align 10h
.text:00402860
.text:00402860 loc_402860:                             ; CODE XREF: sub_401CF0+3F↑j
.text:00402860                 mov     dword ptr [ebp+0], 1
.text:00402867                 mov     ebx, 1
.text:0040286C                 jmp     loc_401D40
.text:0040286C sub_401CF0      endp
.text:0040286C
.text:00402871 ; ---------------------------------------------------------------------------
.text:00402871                 jmp     short sub_402880
.text:00402871 ; ---------------------------------------------------------------------------
.text:00402873                 align 10h
.text:00402880
.text:00402880 ; =============== S U B R O U T I N E =======================================
.text:00402880
.text:00402880
.text:00402880 ; int __cdecl sub_402880(int, int, char *, int, int, int, int)
.text:00402880 sub_402880      proc near               ; CODE XREF: .text:00402871↑j
.text:00402880                                         ; sub_402FC0+3A↓p ...
.text:00402880
.text:00402880 var_2C          = dword ptr -2Ch
.text:00402880 var_28          = dword ptr -28h
.text:00402880 Str             = dword ptr -24h
.text:00402880 var_20          = dword ptr -20h
.text:00402880 var_1C          = dword ptr -1Ch
.text:00402880 var_18          = dword ptr -18h
.text:00402880 var_14          = dword ptr -14h
.text:00402880 var_10          = dword ptr -10h
.text:00402880 arg_0           = dword ptr  4
.text:00402880 arg_4           = dword ptr  8
.text:00402880 arg_8           = dword ptr  0Ch
.text:00402880 arg_C           = dword ptr  10h
.text:00402880 arg_10          = dword ptr  14h
.text:00402880 arg_14          = dword ptr  18h
.text:00402880 arg_18          = dword ptr  1Ch
.text:00402880
.text:00402880                 sub     esp, 2Ch
.text:00402883                 mov     edx, dword_406010
.text:00402889                 mov     [esp+2Ch+var_10], offset dword_407010 ; int
.text:00402891                 mov     ecx, dword_406014
.text:00402897                 mov     ds:dword_407010, edx
.text:0040289D                 mov     edx, [esp+2Ch+arg_18]
.text:004028A1                 mov     ds:dword_407014, ecx
.text:004028A7                 mov     ecx, [esp+2Ch+arg_14]
.text:004028AB                 mov     [esp+2Ch+var_14], edx ; int
.text:004028AF                 mov     edx, [esp+2Ch+arg_10]
.text:004028B3                 mov     [esp+2Ch+var_18], ecx ; int
.text:004028B7                 mov     ecx, [esp+2Ch+arg_C]
.text:004028BB                 mov     [esp+2Ch+var_1C], edx ; int
.text:004028BF                 mov     edx, [esp+2Ch+arg_8]
.text:004028C3                 mov     [esp+2Ch+var_20], ecx ; int
.text:004028C7                 mov     ecx, [esp+2Ch+arg_4]
.text:004028CB                 mov     [esp+2Ch+Str], edx ; Str
.text:004028CF                 mov     edx, [esp+2Ch+arg_0]
.text:004028D3                 mov     [esp+2Ch+var_28], ecx ; int
.text:004028D7                 mov     [esp+2Ch+var_2C], edx ; int
.text:004028DA                 call    sub_401CF0
.text:004028DF                 mov     ecx, ds:dword_407010
.text:004028E5                 mov     dword_406010, ecx
.text:004028EB                 mov     ecx, ds:dword_40701C
.text:004028F1                 mov     ds:EnvString, ecx
.text:004028F7                 mov     ecx, ds:dword_407018
.text:004028FD                 mov     dword_406018, ecx
.text:00402903                 add     esp, 2Ch
.text:00402906                 retn
.text:00402906 sub_402880      endp
.text:00402906
.text:00402906 ; ---------------------------------------------------------------------------
.text:00402907                 align 10h
.text:00402910                 sub     esp, 2Ch
.text:00402913                 mov     edx, dword_406010
.text:00402919                 mov     dword ptr [esp+1Ch], offset dword_407010
.text:00402921                 mov     ecx, dword_406014
.text:00402927                 mov     dword ptr [esp+18h], 1
.text:0040292F                 mov     ds:dword_407010, edx
.text:00402935                 mov     edx, [esp+38h]
.text:00402939                 mov     ds:dword_407014, ecx
.text:0040293F                 mov     ecx, [esp+34h]
.text:00402943                 mov     [esp+8], edx
.text:00402947                 mov     edx, [esp+30h]
.text:0040294B                 mov     [esp+4], ecx
.text:0040294F                 mov     dword ptr [esp+14h], 0
.text:00402957                 mov     dword ptr [esp+10h], 0
.text:0040295F                 mov     dword ptr [esp+0Ch], 0
.text:00402967                 mov     [esp], edx
.text:0040296A                 call    sub_401CF0
.text:0040296F                 mov     ecx, ds:dword_407010
.text:00402975                 mov     dword_406010, ecx
.text:0040297B                 mov     ecx, ds:dword_40701C
.text:00402981                 mov     ds:EnvString, ecx
.text:00402987                 mov     ecx, ds:dword_407018
.text:0040298D                 mov     dword_406018, ecx
.text:00402993                 add     esp, 2Ch
.text:00402996                 retn
.text:00402996 ; ---------------------------------------------------------------------------
.text:00402997                 align 10h
.text:004029A0
.text:004029A0 ; =============== S U B R O U T I N E =======================================
.text:004029A0
.text:004029A0
.text:004029A0 sub_4029A0      proc near               ; CODE XREF: sub_401CF0+113↑p
.text:004029A0                                         ; sub_401CF0+AB9↑p
.text:004029A0
.text:004029A0 var_2C          = dword ptr -2Ch
.text:004029A0 var_28          = dword ptr -28h
.text:004029A0 var_24          = dword ptr -24h
.text:004029A0 var_20          = dword ptr -20h
.text:004029A0 var_1C          = dword ptr -1Ch
.text:004029A0 var_18          = dword ptr -18h
.text:004029A0 var_14          = dword ptr -14h
.text:004029A0 arg_0           = dword ptr  4
.text:004029A0 arg_4           = dword ptr  8
.text:004029A0
.text:004029A0                 push    ebp
.text:004029A1                 push    edi
.text:004029A2                 push    esi
.text:004029A3                 push    ebx
.text:004029A4                 sub     esp, 1Ch
.text:004029A7                 mov     ecx, [esp+2Ch+arg_4]
.text:004029AB                 mov     eax, [esp+2Ch+arg_4]
.text:004029AF                 mov     ebx, [esp+2Ch+arg_4]
.text:004029B3                 mov     edx, [ecx+20h]
.text:004029B6                 mov     edi, [esp+2Ch+arg_0]
.text:004029BA                 mov     ecx, [ebx]
.text:004029BC                 mov     [esp+2Ch+var_2C], edx
.text:004029BF                 mov     [esp+2Ch+var_14], edx
.text:004029C3                 mov     edx, [eax+24h]
.text:004029C6                 mov     [esp+2Ch+var_28], ecx
.text:004029CA                 mov     [esp+2Ch+var_1C], ecx
.text:004029CE                 cmp     ecx, edx
.text:004029D0                 mov     [esp+2Ch+var_18], edx
.text:004029D4                 jle     short loc_402A50
.text:004029D6                 mov     esi, [esp+2Ch+var_2C]
.text:004029D9                 cmp     edx, esi
.text:004029DB                 jle     short loc_402A50
.text:004029DD                 lea     esi, [esi+0]
.text:004029E0
.text:004029E0 loc_4029E0:                             ; CODE XREF: sub_4029A0+A1↓j
.text:004029E0                 mov     ebx, [esp+2Ch+var_1C]
.text:004029E4                 mov     edx, [esp+2Ch+var_18]
.text:004029E8                 mov     ebp, [esp+2Ch+var_18]
.text:004029EC                 mov     eax, [esp+2Ch+var_14]
.text:004029F0                 sub     ebx, edx
.text:004029F2                 mov     [esp+2Ch+var_20], ebx
.text:004029F6                 sub     ebp, eax
.text:004029F8                 cmp     ebx, ebp
.text:004029FA                 jle     short loc_402A75
.text:004029FC                 xor     esi, esi
.text:004029FE                 cmp     esi, ebp
.text:00402A00                 jge     short loc_402A2D
.text:00402A02                 mov     ecx, [esp+2Ch+var_1C]
.text:00402A06                 sub     ecx, ebp
.text:00402A08                 mov     [esp+2Ch+var_24], ecx
.text:00402A0C                 lea     esi, [esi+0]
.text:00402A10
.text:00402A10 loc_402A10:                             ; CODE XREF: sub_4029A0+8B↓j
.text:00402A10                 mov     ecx, [esp+2Ch+var_14]
.text:00402A14                 mov     edx, [esp+2Ch+var_24]
.text:00402A18                 add     ecx, esi
.text:00402A1A                 add     edx, esi
.text:00402A1C                 mov     ebx, [edi+ecx*4]
.text:00402A1F                 mov     eax, [edi+edx*4]
.text:00402A22                 inc     esi
.text:00402A23                 cmp     esi, ebp
.text:00402A25                 mov     [edi+ecx*4], eax
.text:00402A28                 mov     [edi+edx*4], ebx
.text:00402A2B                 jl      short loc_402A10
.text:00402A2D
.text:00402A2D loc_402A2D:                             ; CODE XREF: sub_4029A0+60↑j
.text:00402A2D                 sub     [esp+2Ch+var_1C], ebp
.text:00402A31
.text:00402A31 loc_402A31:                             ; CODE XREF: sub_4029A0+107↓j
.text:00402A31                 mov     eax, [esp+2Ch+var_18]
.text:00402A35                 cmp     [esp+2Ch+var_1C], eax
.text:00402A39                 jle     short loc_402A50
.text:00402A3B                 mov     ebp, [esp+2Ch+var_14]
.text:00402A3F                 cmp     eax, ebp
.text:00402A41                 jg      short loc_4029E0
.text:00402A43                 lea     esi, [esi+0]
.text:00402A49                 lea     edi, [edi+0]
.text:00402A50
.text:00402A50 loc_402A50:                             ; CODE XREF: sub_4029A0+34↑j
.text:00402A50                                         ; sub_4029A0+3B↑j ...
.text:00402A50                 mov     esi, [esp+2Ch+var_28]
.text:00402A54                 mov     ecx, [esp+2Ch+var_18]
.text:00402A58                 mov     eax, [esp+2Ch+var_2C]
.text:00402A5B                 mov     edi, [esp+2Ch+arg_4]
.text:00402A5F                 mov     edx, [esp+2Ch+var_28]
.text:00402A63                 sub     esi, ecx
.text:00402A65                 add     esi, eax
.text:00402A67                 mov     [edi+20h], esi
.text:00402A6A                 mov     [edi+24h], edx
.text:00402A6D                 add     esp, 1Ch
.text:00402A70                 pop     ebx
.text:00402A71                 pop     esi
.text:00402A72                 pop     edi
.text:00402A73                 pop     ebp
.text:00402A74                 retn
.text:00402A75 ; ---------------------------------------------------------------------------
.text:00402A75
.text:00402A75 loc_402A75:                             ; CODE XREF: sub_4029A0+5A↑j
.text:00402A75                 xor     esi, esi
.text:00402A77                 cmp     esi, [esp+2Ch+var_20]
.text:00402A7B                 jge     short loc_402A9F
.text:00402A7D                 lea     esi, [esi+0]
.text:00402A80
.text:00402A80 loc_402A80:                             ; CODE XREF: sub_4029A0+FD↓j
.text:00402A80                 mov     ebx, [esp+2Ch+var_14]
.text:00402A84                 mov     ebp, [esp+2Ch+var_18]
.text:00402A88                 add     ebx, esi
.text:00402A8A                 add     ebp, esi
.text:00402A8C                 mov     edx, [edi+ebx*4]
.text:00402A8F                 inc     esi
.text:00402A90                 cmp     esi, [esp+2Ch+var_20]
.text:00402A94                 mov     ecx, [edi+ebp*4]
.text:00402A97                 mov     [edi+ebx*4], ecx
.text:00402A9A                 mov     [edi+ebp*4], edx
.text:00402A9D                 jl      short loc_402A80
.text:00402A9F
.text:00402A9F loc_402A9F:                             ; CODE XREF: sub_4029A0+DB↑j
.text:00402A9F                 mov     esi, [esp+2Ch+var_20]
.text:00402AA3                 add     [esp+2Ch+var_14], esi
.text:00402AA7                 jmp     short loc_402A31
.text:00402AA7 sub_4029A0      endp
.text:00402AA7
.text:00402AA7 ; ---------------------------------------------------------------------------
.text:00402AA9                 align 20h
.text:00402AC0 aCopyrightC2005 db 'Copyright (C) 2005 Free Software Foundation, Inc.',0
.text:00402AC0                                         ; DATA XREF: .data:Buffer↓o
.text:00402AF2 ; const char Format[]
.text:00402AF2 Format          db '%s (%s) %s',0Ah,0   ; DATA XREF: sub_402DB0+50↓o
.text:00402AFE aWrittenByS     db 'Written by %s.',0Ah,0
.text:00402AFE                                         ; DATA XREF: sub_402DB0:loc_402E51↓o
.text:00402B0E                 align 20h
.text:00402B20 aThisIsFreeSoft db 'This is free software; see the source for copying conditions.  Th'
.text:00402B20                                         ; DATA XREF: sub_402DB0+100↓o
.text:00402B20                 db 'ere is NO',0Ah
.text:00402B20                 db 'warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULA'
.text:00402B20                 db 'R PURPOSE.',0Ah,0
.text:00402BB8 aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.text:00402BB8                                         ; DATA XREF: sub_402DB0:loc_402EF1↓o
.text:00402BCF aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.text:00402BCF                                         ; DATA XREF: sub_402DB0:loc_402EFD↓o
.text:00402BEB                 align 20h
.text:00402C00 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.text:00402C00                                         ; DATA XREF: sub_402DB0:loc_402F09↓o
.text:00402C00                 db 'and %s.',0Ah,0
.text:00402C20 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.text:00402C20                                         ; DATA XREF: sub_402DB0:loc_402F15↓o
.text:00402C20                 db '%s, and %s.',0Ah,0
.text:00402C44                 align 20h
.text:00402C60 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.text:00402C60                                         ; DATA XREF: sub_402DB0:loc_402F21↓o
.text:00402C60                 db '%s, %s, and %s.',0Ah,0
.text:00402C88                 align 20h
.text:00402CA0 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.text:00402CA0                                         ; DATA XREF: sub_402DB0:loc_402F2D↓o
.text:00402CA0                 db '%s, %s, %s, and %s.',0Ah,0
.text:00402CCC                 align 20h
.text:00402CE0 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.text:00402CE0                                         ; DATA XREF: sub_402DB0:loc_402F39↓o
.text:00402CE0                 db '%s, %s, %s, %s,',0Ah
.text:00402CE0                 db 'and %s.',0Ah,0
.text:00402D10                 align 20h
.text:00402D20 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.text:00402D20                                         ; DATA XREF: sub_402DB0:loc_402F45↓o
.text:00402D20                 db '%s, %s, %s, %s,',0Ah
.text:00402D20                 db '%s, and %s.',0Ah,0
.text:00402D54                 align 10h
.text:00402D60 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.text:00402D60                                         ; DATA XREF: sub_402DB0:def_402E1D↓o
.text:00402D60                 db '%s, %s, %s, %s,',0Ah
.text:00402D60                 db '%s, %s, and others.',0Ah,0
.text:00402D9C ; const char aSS[]
.text:00402D9C aSS             db '%s %s',0Ah,0        ; DATA XREF: sub_402DB0+1B5↓o
.text:00402DA3                 align 10h
.text:00402DB0
.text:00402DB0 ; =============== S U B R O U T I N E =======================================
.text:00402DB0
.text:00402DB0
.text:00402DB0 ; int __cdecl sub_402DB0(FILE *, FILE *, int, int, va_list)
.text:00402DB0 sub_402DB0      proc near               ; CODE XREF: sub_402F80+2A↓p
.text:00402DB0
.text:00402DB0 Stream          = dword ptr -2Ch
.text:00402DB0 Format          = dword ptr -28h
.text:00402DB0 ArgList         = dword ptr -24h
.text:00402DB0 var_20          = dword ptr -20h
.text:00402DB0 var_1C          = dword ptr -1Ch
.text:00402DB0 var_14          = dword ptr -14h
.text:00402DB0 arg_0           = dword ptr  4
.text:00402DB0 arg_4           = dword ptr  8
.text:00402DB0 arg_8           = dword ptr  0Ch
.text:00402DB0 arg_C           = dword ptr  10h
.text:00402DB0 arg_10          = dword ptr  14h
.text:00402DB0
.text:00402DB0                 push    ebp
.text:00402DB1                 push    edi
.text:00402DB2                 push    esi
.text:00402DB3                 push    ebx
.text:00402DB4                 sub     esp, 1Ch
.text:00402DB7                 xor     ebx, ebx
.text:00402DB9                 mov     edi, [esp+2Ch+arg_10]
.text:00402DBD                 mov     edx, [esp+2Ch+arg_8]
.text:00402DC1                 mov     esi, [esp+2Ch+arg_0]
.text:00402DC5                 mov     eax, [edi]
.text:00402DC7                 mov     ecx, [esp+2Ch+arg_4]
.text:00402DCB                 mov     [esp+2Ch+var_14], edx
.text:00402DCF                 mov     ebp, [esp+2Ch+arg_C]
.text:00402DD3                 lea     edx, [edi+4]
.text:00402DD6                 test    eax, eax
.text:00402DD8                 jz      short loc_402DEC
.text:00402DDA                 lea     esi, [esi+0]
.text:00402DE0
.text:00402DE0 loc_402DE0:                             ; CODE XREF: sub_402DB0+3A↓j
.text:00402DE0                 mov     eax, edx
.text:00402DE2                 inc     ebx
.text:00402DE3                 mov     eax, [eax]
.text:00402DE5                 add     edx, 4
.text:00402DE8                 test    eax, eax
.text:00402DEA                 jnz     short loc_402DE0
.text:00402DEC
.text:00402DEC loc_402DEC:                             ; CODE XREF: sub_402DB0+28↑j
.text:00402DEC                 test    ecx, ecx
.text:00402DEE                 jz      loc_402F5D
.text:00402DF4                 mov     [esp+2Ch+var_1C], ebp
.text:00402DF8                 mov     edx, [esp+2Ch+var_14]
.text:00402DFC                 mov     [esp+2Ch+ArgList], ecx
.text:00402E00                 mov     [esp+2Ch+Format], offset Format ; "%s (%s) %s\n"
.text:00402E08                 mov     [esp+2Ch+var_20], edx
.text:00402E0C                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00402E0F                 call    fprintf
.text:00402E14
.text:00402E14 loc_402E14:                             ; CODE XREF: sub_402DB0+1C9↓j
.text:00402E14                 cmp     ebx, 9          ; switch 10 cases
.text:00402E17                 ja      def_402E1D      ; jumptable 00402E1D default case
.text:00402E1D                 jmp     ds:jpt_402E1D[ebx*4] ; switch jump
.text:00402E1D ; ---------------------------------------------------------------------------
.text:00402E24 jpt_402E1D      dd offset loc_402E4C    ; DATA XREF: sub_402DB0+6D↑r
.text:00402E24                 dd offset loc_402E51    ; jump table for switch statement
.text:00402E24                 dd offset loc_402EF1
.text:00402E24                 dd offset loc_402EFD
.text:00402E24                 dd offset loc_402F09
.text:00402E24                 dd offset loc_402F15
.text:00402E24                 dd offset loc_402F21
.text:00402E24                 dd offset loc_402F2D
.text:00402E24                 dd offset loc_402F39
.text:00402E24                 dd offset loc_402F45
.text:00402E4C ; ---------------------------------------------------------------------------
.text:00402E4C
.text:00402E4C loc_402E4C:                             ; CODE XREF: sub_402DB0+6D↑j
.text:00402E4C                                         ; DATA XREF: sub_402DB0:jpt_402E1D↑o
.text:00402E4C                 call    abort           ; jumptable 00402E1D case 0
.text:00402E51 ; ---------------------------------------------------------------------------
.text:00402E51
.text:00402E51 loc_402E51:                             ; CODE XREF: sub_402DB0+6D↑j
.text:00402E51                                         ; DATA XREF: sub_402DB0:jpt_402E1D↑o
.text:00402E51                 mov     [esp+2Ch+Stream], offset aWrittenByS ; jumptable 00402E1D case 1
.text:00402E58                 nop
.text:00402E59                 lea     esi, [esi+0]
.text:00402E60
.text:00402E60 loc_402E60:                             ; CODE XREF: sub_402DB0+148↓j
.text:00402E60                                         ; sub_402DB0+154↓j ...
.text:00402E60                 call    ds:libintl_gettext
.text:00402E66                 mov     [esp+2Ch+ArgList], edi ; ArgList
.text:00402E6A                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00402E6D                 mov     [esp+2Ch+Format], eax ; Format
.text:00402E71                 call    vfprintf
.text:00402E76                 mov     ebx, [esi+4]
.text:00402E79                 dec     ebx
.text:00402E7A                 test    ebx, ebx
.text:00402E7C                 mov     [esi+4], ebx
.text:00402E7F                 js      short loc_402EDF
.text:00402E81                 mov     edi, [esi]
.text:00402E83                 mov     byte ptr [edi], 0Ah
.text:00402E86                 inc     dword ptr [esi]
.text:00402E88
.text:00402E88 loc_402E88:                             ; CODE XREF: sub_402DB0+13F↓j
.text:00402E88                 mov     [esp+2Ch+Format], esi ; Stream
.text:00402E8C                 mov     edx, Buffer
.text:00402E92                 mov     [esp+2Ch+Stream], edx ; Buffer
.text:00402E95                 call    fputs
.text:00402E9A                 mov     ebp, [esi+4]
.text:00402E9D                 dec     ebp
.text:00402E9E                 test    ebp, ebp
.text:00402EA0                 mov     [esi+4], ebp
.text:00402EA3                 js      short loc_402ECD
.text:00402EA5                 mov     ecx, [esi]
.text:00402EA7                 mov     byte ptr [ecx], 0Ah
.text:00402EAA                 inc     dword ptr [esi]
.text:00402EAC
.text:00402EAC loc_402EAC:                             ; CODE XREF: sub_402DB0+12D↓j
.text:00402EAC                 mov     [esp+2Ch+arg_4], esi ; Stream
.text:00402EB0                 mov     [esp+2Ch+Stream], offset aThisIsFreeSoft ; "This is free software; see the source f"...
.text:00402EB7                 call    ds:libintl_gettext
.text:00402EBD                 mov     [esp+2Ch+arg_0], eax ; Buffer
.text:00402EC1                 add     esp, 1Ch
.text:00402EC4                 pop     ebx
.text:00402EC5                 pop     esi
.text:00402EC6                 pop     edi
.text:00402EC7                 pop     ebp
.text:00402EC8                 jmp     fputs
.text:00402ECD ; ---------------------------------------------------------------------------
.text:00402ECD
.text:00402ECD loc_402ECD:                             ; CODE XREF: sub_402DB0+F3↑j
.text:00402ECD                 mov     [esp+2Ch+Format], esi ; File
.text:00402ED1                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:00402ED8                 call    _flsbuf
.text:00402EDD                 jmp     short loc_402EAC
.text:00402EDF ; ---------------------------------------------------------------------------
.text:00402EDF
.text:00402EDF loc_402EDF:                             ; CODE XREF: sub_402DB0+CF↑j
.text:00402EDF                 mov     [esp+2Ch+Format], esi ; File
.text:00402EE3                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:00402EEA                 call    _flsbuf
.text:00402EEF                 jmp     short loc_402E88
.text:00402EF1 ; ---------------------------------------------------------------------------
.text:00402EF1
.text:00402EF1 loc_402EF1:                             ; CODE XREF: sub_402DB0+6D↑j
.text:00402EF1                                         ; DATA XREF: sub_402DB0:jpt_402E1D↑o
.text:00402EF1                 mov     [esp+2Ch+Stream], offset aWrittenBySAndS ; jumptable 00402E1D case 2
.text:00402EF8                 jmp     loc_402E60
.text:00402EFD ; ---------------------------------------------------------------------------
.text:00402EFD
.text:00402EFD loc_402EFD:                             ; CODE XREF: sub_402DB0+6D↑j
.text:00402EFD                                         ; DATA XREF: sub_402DB0:jpt_402E1D↑o
.text:00402EFD                 mov     [esp+2Ch+Stream], offset aWrittenBySSAnd ; jumptable 00402E1D case 3
.text:00402F04                 jmp     loc_402E60
.text:00402F09 ; ---------------------------------------------------------------------------
.text:00402F09
.text:00402F09 loc_402F09:                             ; CODE XREF: sub_402DB0+6D↑j
.text:00402F09                                         ; DATA XREF: sub_402DB0:jpt_402E1D↑o
.text:00402F09                 mov     [esp+2Ch+Stream], offset aWrittenBySSSAn ; jumptable 00402E1D case 4
.text:00402F10                 jmp     loc_402E60
.text:00402F15 ; ---------------------------------------------------------------------------
.text:00402F15
.text:00402F15 loc_402F15:                             ; CODE XREF: sub_402DB0+6D↑j
.text:00402F15                                         ; DATA XREF: sub_402DB0:jpt_402E1D↑o
.text:00402F15                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSA ; jumptable 00402E1D case 5
.text:00402F1C                 jmp     loc_402E60
.text:00402F21 ; ---------------------------------------------------------------------------
.text:00402F21
.text:00402F21 loc_402F21:                             ; CODE XREF: sub_402DB0+6D↑j
.text:00402F21                                         ; DATA XREF: sub_402DB0:jpt_402E1D↑o
.text:00402F21                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_0 ; jumptable 00402E1D case 6
.text:00402F28                 jmp     loc_402E60
.text:00402F2D ; ---------------------------------------------------------------------------
.text:00402F2D
.text:00402F2D loc_402F2D:                             ; CODE XREF: sub_402DB0+6D↑j
.text:00402F2D                                         ; DATA XREF: sub_402DB0:jpt_402E1D↑o
.text:00402F2D                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_1 ; jumptable 00402E1D case 7
.text:00402F34                 jmp     loc_402E60
.text:00402F39 ; ---------------------------------------------------------------------------
.text:00402F39
.text:00402F39 loc_402F39:                             ; CODE XREF: sub_402DB0+6D↑j
.text:00402F39                                         ; DATA XREF: sub_402DB0:jpt_402E1D↑o
.text:00402F39                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_2 ; jumptable 00402E1D case 8
.text:00402F40                 jmp     loc_402E60
.text:00402F45 ; ---------------------------------------------------------------------------
.text:00402F45
.text:00402F45 loc_402F45:                             ; CODE XREF: sub_402DB0+6D↑j
.text:00402F45                                         ; DATA XREF: sub_402DB0:jpt_402E1D↑o
.text:00402F45                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_3 ; jumptable 00402E1D case 9
.text:00402F4C                 jmp     loc_402E60
.text:00402F51 ; ---------------------------------------------------------------------------
.text:00402F51
.text:00402F51 def_402E1D:                             ; CODE XREF: sub_402DB0+67↑j
.text:00402F51                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS ; jumptable 00402E1D default case
.text:00402F58                 jmp     loc_402E60
.text:00402F5D ; ---------------------------------------------------------------------------
.text:00402F5D
.text:00402F5D loc_402F5D:                             ; CODE XREF: sub_402DB0+3E↑j
.text:00402F5D                 mov     [esp+2Ch+var_20], ebp
.text:00402F61                 mov     ecx, [esp+2Ch+var_14]
.text:00402F65                 mov     [esp+2Ch+Format], offset aSS ; "%s %s\n"
.text:00402F6D                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00402F70                 mov     [esp+2Ch+ArgList], ecx
.text:00402F74                 call    fprintf
.text:00402F79                 jmp     loc_402E14
.text:00402F79 sub_402DB0      endp
.text:00402F79
.text:00402F79 ; ---------------------------------------------------------------------------
.text:00402F7E                 align 10h
.text:00402F80
.text:00402F80 ; =============== S U B R O U T I N E =======================================
.text:00402F80
.text:00402F80
.text:00402F80 ; int __cdecl sub_402F80(FILE *, FILE *, int, int, char)
.text:00402F80 sub_402F80      proc near               ; CODE XREF: sub_4015C0+140↑p
.text:00402F80
.text:00402F80 var_1C          = dword ptr -1Ch
.text:00402F80 var_18          = dword ptr -18h
.text:00402F80 var_14          = dword ptr -14h
.text:00402F80 var_10          = dword ptr -10h
.text:00402F80 var_C           = dword ptr -0Ch
.text:00402F80 arg_0           = dword ptr  4
.text:00402F80 arg_4           = dword ptr  8
.text:00402F80 arg_8           = dword ptr  0Ch
.text:00402F80 arg_C           = dword ptr  10h
.text:00402F80 arg_10          = byte ptr  14h
.text:00402F80
.text:00402F80                 sub     esp, 1Ch
.text:00402F83                 mov     edx, [esp+1Ch+arg_C]
.text:00402F87                 lea     ecx, [esp+1Ch+arg_10]
.text:00402F8B                 mov     [esp+1Ch+var_C], ecx ; va_list
.text:00402F8F                 mov     ecx, [esp+1Ch+arg_8]
.text:00402F93                 mov     [esp+1Ch+var_10], edx ; int
.text:00402F97                 mov     edx, [esp+1Ch+arg_4]
.text:00402F9B                 mov     [esp+1Ch+var_14], ecx ; int
.text:00402F9F                 mov     [esp+1Ch+var_18], edx ; FILE *
.text:00402FA3                 mov     edx, [esp+1Ch+arg_0]
.text:00402FA7                 mov     [esp+1Ch+var_1C], edx ; FILE *
.text:00402FAA                 call    sub_402DB0
.text:00402FAF                 add     esp, 1Ch
.text:00402FB2                 retn
.text:00402FB2 sub_402F80      endp
.text:00402FB2
.text:00402FB2 ; ---------------------------------------------------------------------------
.text:00402FB3                 align 10h
.text:00402FC0
.text:00402FC0 ; =============== S U B R O U T I N E =======================================
.text:00402FC0
.text:00402FC0
.text:00402FC0 ; int __cdecl sub_402FC0(int, int, char *, int, int)
.text:00402FC0 sub_402FC0      proc near               ; CODE XREF: sub_4015C0+92↑p
.text:00402FC0                                         ; sub_4015C0+272↑p
.text:00402FC0
.text:00402FC0 var_1C          = dword ptr -1Ch
.text:00402FC0 var_18          = dword ptr -18h
.text:00402FC0 var_14          = dword ptr -14h
.text:00402FC0 var_10          = dword ptr -10h
.text:00402FC0 var_C           = dword ptr -0Ch
.text:00402FC0 var_8           = dword ptr -8
.text:00402FC0 var_4           = dword ptr -4
.text:00402FC0 arg_0           = dword ptr  4
.text:00402FC0 arg_4           = dword ptr  8
.text:00402FC0 arg_8           = dword ptr  0Ch
.text:00402FC0 arg_C           = dword ptr  10h
.text:00402FC0 arg_10          = dword ptr  14h
.text:00402FC0
.text:00402FC0                 sub     esp, 1Ch
.text:00402FC3                 mov     edx, [esp+1Ch+arg_C]
.text:00402FC7                 mov     [esp+1Ch+var_4], 0 ; int
.text:00402FCF                 mov     ecx, [esp+1Ch+arg_10]
.text:00402FD3                 mov     [esp+1Ch+var_8], 0 ; int
.text:00402FDB                 mov     [esp+1Ch+var_10], edx ; int
.text:00402FDF                 mov     edx, [esp+1Ch+arg_4]
.text:00402FE3                 mov     [esp+1Ch+var_C], ecx ; int
.text:00402FE7                 mov     ecx, [esp+1Ch+arg_8]
.text:00402FEB                 mov     [esp+1Ch+var_18], edx ; int
.text:00402FEF                 mov     edx, [esp+1Ch+arg_0]
.text:00402FF3                 mov     [esp+1Ch+var_14], ecx ; char *
.text:00402FF7                 mov     [esp+1Ch+var_1C], edx ; int
.text:00402FFA                 call    sub_402880
.text:00402FFF                 add     esp, 1Ch
.text:00403002                 retn
.text:00403002 sub_402FC0      endp
.text:00403002
.text:00403002 ; ---------------------------------------------------------------------------
.text:00403003                 align 10h
.text:00403010                 sub     esp, 2Ch
.text:00403013                 mov     edx, [esp+44h]
.text:00403017                 mov     dword ptr [esp+18h], 0
.text:0040301F                 mov     ecx, [esp+40h]
.text:00403023                 mov     dword ptr [esp+14h], 0
.text:0040302B                 mov     [esp+1Ch], edx
.text:0040302F                 mov     edx, [esp+3Ch]
.text:00403033                 mov     [esp+10h], ecx
.text:00403037                 mov     ecx, [esp+38h]
.text:0040303B                 mov     [esp+0Ch], edx
.text:0040303F                 mov     edx, [esp+34h]
.text:00403043                 mov     [esp+8], ecx
.text:00403047                 mov     [esp+4], edx
.text:0040304B                 mov     edx, [esp+30h]
.text:0040304F                 mov     [esp], edx
.text:00403052                 call    sub_401CF0
.text:00403057                 add     esp, 2Ch
.text:0040305A                 retn
.text:0040305A ; ---------------------------------------------------------------------------
.text:0040305B                 align 10h
.text:00403060                 sub     esp, 1Ch
.text:00403063                 mov     edx, [esp+2Ch]
.text:00403067                 mov     dword ptr [esp+18h], 0
.text:0040306F                 mov     ecx, [esp+30h]
.text:00403073                 mov     dword ptr [esp+14h], 1
.text:0040307B                 mov     [esp+0Ch], edx
.text:0040307F                 mov     edx, [esp+24h]
.text:00403083                 mov     [esp+10h], ecx
.text:00403087                 mov     ecx, [esp+28h]
.text:0040308B                 mov     [esp+4], edx
.text:0040308F                 mov     edx, [esp+20h]
.text:00403093                 mov     [esp+8], ecx
.text:00403097                 mov     [esp], edx
.text:0040309A                 call    sub_402880
.text:0040309F                 add     esp, 1Ch
.text:004030A2                 retn
.text:004030A2 ; ---------------------------------------------------------------------------
.text:004030A3                 align 10h
.text:004030B0                 sub     esp, 2Ch
.text:004030B3                 mov     edx, [esp+44h]
.text:004030B7                 mov     dword ptr [esp+18h], 0
.text:004030BF                 mov     ecx, [esp+40h]
.text:004030C3                 mov     dword ptr [esp+14h], 1
.text:004030CB                 mov     [esp+1Ch], edx
.text:004030CF                 mov     edx, [esp+3Ch]
.text:004030D3                 mov     [esp+10h], ecx
.text:004030D7                 mov     ecx, [esp+38h]
.text:004030DB                 mov     [esp+0Ch], edx
.text:004030DF                 mov     edx, [esp+34h]
.text:004030E3                 mov     [esp+8], ecx
.text:004030E7                 mov     [esp+4], edx
.text:004030EB                 mov     edx, [esp+30h]
.text:004030EF                 mov     [esp], edx
.text:004030F2                 call    sub_401CF0
.text:004030F7                 add     esp, 2Ch
.text:004030FA                 retn
.text:004030FA ; ---------------------------------------------------------------------------
.text:004030FB                 align 10h
.text:00403100                 mov     edx, [esp+4]
.text:00403104                 mov     ds:dword_407040, edx
.text:0040310A                 retn
.text:0040310A ; ---------------------------------------------------------------------------
.text:0040310B aWriteError     db 'write error',0      ; DATA XREF: sub_403130:loc_403179↓o
.text:00403117 ; const char aSS_0[]
.text:00403117 aSS_0           db '%s: %s',0           ; DATA XREF: sub_403130+77↓o
.text:0040311E ; const char aS_2[]
.text:0040311E aS_2            db '%s',0               ; DATA XREF: sub_403130+A0↓o
.text:00403121 ; ---------------------------------------------------------------------------
.text:00403121                 jmp     short sub_403130
.text:00403121 ; ---------------------------------------------------------------------------
.text:00403123                 align 10h
.text:00403130
.text:00403130 ; =============== S U B R O U T I N E =======================================
.text:00403130
.text:00403130
.text:00403130 ; void __cdecl sub_403130()
.text:00403130 sub_403130      proc near               ; CODE XREF: .text:00403121↑j
.text:00403130                                         ; DATA XREF: sub_4015C0+60↑o
.text:00403130
.text:00403130 Stream          = dword ptr -2Ch
.text:00403130 ErrorMessage    = dword ptr -28h
.text:00403130 var_24          = dword ptr -24h
.text:00403130 var_20          = byte ptr -20h
.text:00403130 var_1C          = dword ptr -1Ch
.text:00403130 var_9           = byte ptr -9
.text:00403130
.text:00403130                 push    esi
.text:00403131                 push    ebx
.text:00403132                 sub     esp, 24h
.text:00403135                 mov     edx, ds:_iob
.text:0040313B                 mov     ecx, [edx+2Ch]
.text:0040313E                 lea     esi, [edx+20h]
.text:00403141                 shr     ecx, 5
.text:00403144                 mov     bl, cl
.text:00403146                 mov     ecx, [edx+20h]
.text:00403149                 and     bl, 1
.text:0040314C                 cmp     ecx, [esi+8]
.text:0040314F                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00403152                 setz    [esp+2Ch+var_9]
.text:00403157                 call    fclose
.text:0040315C                 test    eax, eax
.text:0040315E                 setnz   al
.text:00403161                 test    bl, bl
.text:00403163                 jnz     loc_4031F3
.text:00403169                 test    al, al
.text:0040316B                 jz      short loc_4031C0
.text:0040316D
.text:0040316D loc_40316D:                             ; CODE XREF: sub_403130+CD↓j
.text:0040316D                 call    _errno
.text:00403172                 mov     esi, [eax]
.text:00403174
.text:00403174 loc_403174:                             ; CODE XREF: sub_403130+C7↓j
.text:00403174                 cmp     esi, 9
.text:00403177                 jz      short loc_4031E6
.text:00403179
.text:00403179 loc_403179:                             ; CODE XREF: sub_403130+B8↓j
.text:00403179                                         ; sub_403130+C1↓j
.text:00403179                 mov     [esp+2Ch+Stream], offset aWriteError ; "write error"
.text:00403180                 call    ds:libintl_gettext
.text:00403186                 mov     ebx, eax
.text:00403188                 mov     eax, ds:dword_407040
.text:0040318D                 test    eax, eax
.text:0040318F                 jz      short loc_4031C6
.text:00403191                 mov     [esp+2Ch+Stream], eax ; char *
.text:00403194                 call    sub_404340
.text:00403199                 mov     dword ptr [esp+2Ch+var_20], eax ; char
.text:0040319D                 mov     edx, Code
.text:004031A3                 mov     [esp+2Ch+var_1C], ebx
.text:004031A7                 mov     [esp+2Ch+var_24], offset aSS_0 ; "%s: %s"
.text:004031AF                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:004031B3                 mov     [esp+2Ch+Stream], edx ; Code
.text:004031B6                 call    sub_404930
.text:004031BB                 nop
.text:004031BC                 lea     esi, [esi+0]
.text:004031C0
.text:004031C0 loc_4031C0:                             ; CODE XREF: sub_403130+3B↑j
.text:004031C0                                         ; sub_403130+B4↓j ...
.text:004031C0                 add     esp, 24h
.text:004031C3                 pop     ebx
.text:004031C4                 pop     esi
.text:004031C5                 retn
.text:004031C6 ; ---------------------------------------------------------------------------
.text:004031C6
.text:004031C6 loc_4031C6:                             ; CODE XREF: sub_403130+5F↑j
.text:004031C6                 mov     dword ptr [esp+2Ch+var_20], ebx ; char
.text:004031CA                 mov     ebx, Code
.text:004031D0                 mov     [esp+2Ch+var_24], offset aS_2 ; "%s"
.text:004031D8                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:004031DC                 mov     [esp+2Ch+Stream], ebx ; Code
.text:004031DF                 call    sub_404930
.text:004031E4                 jmp     short loc_4031C0
.text:004031E6 ; ---------------------------------------------------------------------------
.text:004031E6
.text:004031E6 loc_4031E6:                             ; CODE XREF: sub_403130+47↑j
.text:004031E6                 test    bl, bl
.text:004031E8                 jnz     short loc_403179
.text:004031EA                 cmp     [esp+2Ch+var_9], 0
.text:004031EF                 jnz     short loc_4031C0
.text:004031F1                 jmp     short loc_403179
.text:004031F3 ; ---------------------------------------------------------------------------
.text:004031F3
.text:004031F3 loc_4031F3:                             ; CODE XREF: sub_403130+33↑j
.text:004031F3                 xor     esi, esi
.text:004031F5                 test    al, al
.text:004031F7                 jz      loc_403174
.text:004031FD                 jmp     loc_40316D
.text:004031FD sub_403130      endp
.text:004031FD
.text:004031FD ; ---------------------------------------------------------------------------
.text:00403202                 align 10h
.text:00403210 aLiteral        db 'literal',0          ; DATA XREF: .text:00403250↓o
.text:00403218 aShell          db 'shell',0            ; DATA XREF: .text:00403254↓o
.text:0040321E aShellAlways    db 'shell-always',0     ; DATA XREF: .text:00403258↓o
.text:0040322B aC              db 'c',0                ; DATA XREF: .text:0040325C↓o
.text:0040322D aEscape         db 'escape',0           ; DATA XREF: .text:00403260↓o
.text:00403234 aLocale         db 'locale',0           ; DATA XREF: .text:00403264↓o
.text:0040323B aClocale        db 'clocale',0          ; DATA XREF: .text:00403268↓o
.text:00403243                 align 10h
.text:00403250                 dd offset aLiteral      ; "literal"
.text:00403254                 dd offset aShell        ; "shell"
.text:00403258                 dd offset aShellAlways  ; "shell-always"
.text:0040325C                 dd offset aC            ; "c"
.text:00403260                 dd offset aEscape       ; "escape"
.text:00403264                 dd offset aLocale       ; "locale"
.text:00403268                 dd offset aClocale      ; "clocale"
.text:0040326C                 dd 2 dup(0)
.text:00403274                 dd 1, 2, 3, 4, 5, 6
.text:0040328C asc_40328C:                             ; DATA XREF: sub_4032A0+7E↓o
.text:0040328C                                         ; sub_4032A0+A39↓o ...
.text:0040328C                 text "UTF-16LE", '"',27h,'`'
.text:00403292                 align 10h
.text:004032A0
.text:004032A0 ; =============== S U B R O U T I N E =======================================
.text:004032A0
.text:004032A0
.text:004032A0 ; int __cdecl sub_4032A0(int, int, char *Str, int, int, int)
.text:004032A0 sub_4032A0      proc near               ; CODE XREF: sub_4032A0+43A↓p
.text:004032A0                                         ; .text:00403E63↓p ...
.text:004032A0
.text:004032A0 C               = dword ptr -4Ch
.text:004032A0 Type            = dword ptr -48h
.text:004032A0 SizeInBytes     = dword ptr -44h
.text:004032A0 State           = dword ptr -40h
.text:004032A0 var_3C          = dword ptr -3Ch
.text:004032A0 var_38          = dword ptr -38h
.text:004032A0 var_34          = dword ptr -34h
.text:004032A0 var_30          = dword ptr -30h
.text:004032A0 var_29          = byte ptr -29h
.text:004032A0 var_28          = dword ptr -28h
.text:004032A0 var_22          = byte ptr -22h
.text:004032A0 var_21          = byte ptr -21h
.text:004032A0 var_20          = dword ptr -20h
.text:004032A0 var_1C          = dword ptr -1Ch
.text:004032A0 var_18          = mbstate_t ptr -18h
.text:004032A0 arg_0           = dword ptr  4
.text:004032A0 arg_4           = dword ptr  8
.text:004032A0 Str             = dword ptr  0Ch
.text:004032A0 arg_C           = dword ptr  10h
.text:004032A0 arg_10          = dword ptr  14h
.text:004032A0 arg_14          = dword ptr  18h
.text:004032A0
.text:004032A0                 push    ebp
.text:004032A1                 push    edi
.text:004032A2                 push    esi
.text:004032A3                 push    ebx
.text:004032A4                 sub     esp, 3Ch
.text:004032A7                 mov     edx, ds:__mb_cur_max
.text:004032AD                 mov     [esp+4Ch+var_34], 0
.text:004032B5                 mov     [esp+4Ch+var_1C], 0
.text:004032BD                 cmp     dword ptr [edx], 1
.text:004032C0                 mov     [esp+4Ch+var_20], 0
.text:004032C8                 mov     [esp+4Ch+var_21], 0
.text:004032CD                 setz    [esp+4Ch+var_22]
.text:004032D2                 cmp     [esp+4Ch+arg_10], 6 ; switch 7 cases
.text:004032D7                 ja      short def_4032DD ; jumptable 004032DD default case, cases 0,1
.text:004032D9                 mov     edx, [esp+4Ch+arg_10]
.text:004032DD                 jmp     ds:jpt_4032DD[edx*4] ; switch jump
.text:004032DD ; ---------------------------------------------------------------------------
.text:004032E4 jpt_4032DD      dd offset def_4032DD    ; DATA XREF: sub_4032A0+3D↑r
.text:004032E4                 dd offset def_4032DD    ; jump table for switch statement
.text:004032E4                 dd offset loc_403C25
.text:004032E4                 dd offset loc_403300
.text:004032E4                 dd offset loc_403C4B
.text:004032E4                 dd offset loc_403C55
.text:004032E4                 dd offset loc_403C55
.text:00403300 ; ---------------------------------------------------------------------------
.text:00403300
.text:00403300 loc_403300:                             ; CODE XREF: sub_4032A0+3D↑j
.text:00403300                                         ; DATA XREF: sub_4032A0:jpt_4032DD↑o
.text:00403300                 mov     eax, [esp+4Ch+arg_4] ; jumptable 004032DD case 3
.text:00403304                 cmp     [esp+4Ch+var_34], eax
.text:00403308                 jnb     short loc_403311
.text:0040330A                 mov     ebx, [esp+4Ch+arg_0]
.text:0040330E                 mov     byte ptr [ebx], 22h ; '"'
.text:00403311
.text:00403311 loc_403311:                             ; CODE XREF: sub_4032A0+68↑j
.text:00403311                 mov     [esp+4Ch+var_34], 1
.text:00403319                 mov     [esp+4Ch+var_21], 1
.text:0040331E                 mov     [esp+4Ch+var_1C], offset asc_40328C ; "\"'`"
.text:00403326
.text:00403326 loc_403326:                             ; CODE XREF: sub_4032A0+9A6↓j
.text:00403326                 mov     [esp+4Ch+var_20], 1
.text:0040332E
.text:0040332E def_4032DD:                             ; CODE XREF: sub_4032A0+37↑j
.text:0040332E                                         ; sub_4032A0+3D↑j ...
.text:0040332E                 xor     ebp, ebp        ; jumptable 004032DD default case, cases 0,1
.text:00403330
.text:00403330 loc_403330:                             ; CODE XREF: sub_4032A0+3DB↓j
.text:00403330                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00403335                 jz      loc_403C17
.text:0040333B                 cmp     ebp, [esp+4Ch+arg_C]
.text:0040333F
.text:0040333F loc_40333F:                             ; CODE XREF: sub_4032A0+980↓j
.text:0040333F                 jz      loc_403BAE
.text:00403345                 cmp     [esp+4Ch+var_21], 0
.text:0040334A                 jz      short loc_403390
.text:0040334C                 mov     esi, [esp+4Ch+var_20]
.text:00403350                 test    esi, esi
.text:00403352                 jz      short loc_403390
.text:00403354                 mov     ecx, [esp+4Ch+var_20]
.text:00403358                 lea     edi, [ecx+ebp]
.text:0040335B                 cmp     edi, [esp+4Ch+arg_C]
.text:0040335F                 ja      short loc_403390
.text:00403361                 cld
.text:00403362                 mov     ebx, [esp+4Ch+Str]
.text:00403366                 mov     edi, [esp+4Ch+var_1C]
.text:0040336A                 add     ebx, ebp
.text:0040336C                 mov     esi, ebx
.text:0040336E                 cmp     ecx, ecx
.text:00403370                 repe cmpsb
.text:00403372                 jnz     short loc_403390
.text:00403374                 mov     edx, [esp+4Ch+arg_4]
.text:00403378                 cmp     [esp+4Ch+var_34], edx
.text:0040337C                 jnb     short loc_40338A
.text:0040337E                 mov     ecx, [esp+4Ch+arg_0]
.text:00403382                 mov     eax, [esp+4Ch+var_34]
.text:00403386                 mov     byte ptr [eax+ecx], 5Ch ; '\'
.text:0040338A
.text:0040338A loc_40338A:                             ; CODE XREF: sub_4032A0+DC↑j
.text:0040338A                 inc     [esp+4Ch+var_34]
.text:0040338E                 mov     esi, esi
.text:00403390
.text:00403390 loc_403390:                             ; CODE XREF: sub_4032A0+AA↑j
.text:00403390                                         ; sub_4032A0+B2↑j ...
.text:00403390                 mov     edi, [esp+4Ch+Str]
.text:00403394                 movzx   ebx, byte ptr [ebp+edi+0]
.text:00403399                 movzx   eax, bl
.text:0040339C                 cmp     eax, 7Eh        ; switch 127 cases
.text:0040339F                 ja      def_4033A5      ; jumptable 004033A5 default case, cases 1-6,14-31,64
.text:004033A5                 jmp     ds:jpt_4033A5[eax*4] ; switch jump
.text:004033A5 ; ---------------------------------------------------------------------------
.text:004033AC jpt_4033A5      dd offset loc_4035A8, offset def_4033A5, offset def_4033A5
.text:004033AC                                         ; DATA XREF: sub_4032A0+105↑r
.text:004033AC                 dd offset def_4033A5, offset def_4033A5, offset def_4033A5 ; jump table for switch statement
.text:004033AC                 dd offset def_4033A5, offset loc_403680, offset loc_40369E
.text:004033AC                 dd offset loc_4036A2, offset loc_4036E7, offset loc_4036EB
.text:004033AC                 dd offset loc_4036EF, offset loc_4036F3, offset def_4033A5
.text:004033AC                 dd offset def_4033A5, offset def_4033A5, offset def_4033A5
.text:004033AC                 dd offset def_4033A5, offset def_4033A5, offset def_4033A5
.text:004033AC                 dd offset def_4033A5, offset def_4033A5, offset def_4033A5
.text:004033AC                 dd offset def_4033A5, offset def_4033A5, offset def_4033A5
.text:004033AC                 dd offset def_4033A5, offset def_4033A5, offset def_4033A5
.text:004033AC                 dd offset def_4033A5, offset def_4033A5, offset loc_403B78
.text:004033AC                 dd offset loc_403B78, offset loc_403B78, offset loc_403B9A
.text:004033AC                 dd offset loc_403B78, offset def_4037A2, offset loc_403B78
.text:004033AC                 dd offset loc_4036F7, offset loc_403B78, offset loc_403B78
.text:004033AC                 dd offset loc_403B78, offset def_4037A2, offset def_4037A2
.text:004033AC                 dd offset def_4037A2, offset def_4037A2, offset def_4037A2
.text:004033AC                 dd offset def_4037A2, offset def_4037A2, offset def_4037A2
.text:004033AC                 dd offset def_4037A2, offset def_4037A2, offset def_4037A2
.text:004033AC                 dd offset def_4037A2, offset def_4037A2, offset def_4037A2
.text:004033AC                 dd offset def_4037A2, offset def_4037A2, offset loc_403B78
.text:004033AC                 dd offset loc_403B78, offset loc_403B78, offset loc_403B78
.text:004033AC                 dd offset loc_40375C, offset def_4033A5, offset def_4037A2
.text:004033AC                 dd offset def_4037A2, offset def_4037A2, offset def_4037A2
.text:004033AC                 dd offset def_4037A2, offset def_4037A2, offset def_4037A2
.text:004033AC                 dd offset def_4037A2, offset def_4037A2, offset def_4037A2
.text:004033AC                 dd offset def_4037A2, offset def_4037A2, offset def_4037A2
.text:004033AC                 dd offset def_4037A2, offset def_4037A2, offset def_4037A2
.text:004033AC                 dd offset def_4037A2, offset def_4037A2, offset def_4037A2
.text:004033AC                 dd offset def_4037A2, offset def_4037A2, offset def_4037A2
.text:004033AC                 dd offset def_4037A2, offset def_4037A2, offset def_4037A2
.text:004033AC                 dd offset def_4037A2, offset loc_403B78, offset loc_403B71
.text:004033AC                 dd offset def_4037A2, offset loc_403B78, offset def_4037A2
.text:004033AC                 dd offset loc_403B78, offset def_4037A2, offset def_4037A2
.text:004033AC                 dd offset def_4037A2, offset def_4037A2, offset def_4037A2
.text:004033AC                 dd offset def_4037A2, offset def_4037A2, offset def_4037A2
.text:004033AC                 dd offset def_4037A2, offset def_4037A2, offset def_4037A2
.text:004033AC                 dd offset def_4037A2, offset def_4037A2, offset def_4037A2
.text:004033AC                 dd offset def_4037A2, offset def_4037A2, offset def_4037A2
.text:004033AC                 dd offset def_4037A2, offset def_4037A2, offset def_4037A2
.text:004033AC                 dd offset def_4037A2, offset def_4037A2, offset def_4037A2
.text:004033AC                 dd offset def_4037A2, offset def_4037A2, offset def_4037A2
.text:004033AC                 dd offset loc_403B88, offset loc_403B78, offset loc_403B88
.text:004033AC                 dd offset loc_403B9A
.text:004035A8 ; ---------------------------------------------------------------------------
.text:004035A8
.text:004035A8 loc_4035A8:                             ; CODE XREF: sub_4032A0+105↑j
.text:004035A8                                         ; DATA XREF: sub_4032A0:jpt_4033A5↑o
.text:004035A8                 cmp     [esp+4Ch+var_21], 0 ; jumptable 004033A5 case 0
.text:004035AD                 lea     eax, [ebp+1]
.text:004035B0                 jz      loc_403660
.text:004035B6                 mov     esi, [esp+4Ch+arg_4]
.text:004035BA                 cmp     [esp+4Ch+var_34], esi
.text:004035BE                 jnb     short loc_4035CC
.text:004035C0                 mov     eax, [esp+4Ch+arg_0]
.text:004035C4                 mov     ebx, [esp+4Ch+var_34]
.text:004035C8                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:004035CC
.text:004035CC loc_4035CC:                             ; CODE XREF: sub_4032A0+31E↑j
.text:004035CC                 inc     [esp+4Ch+var_34]
.text:004035D0                 mov     edx, [esp+4Ch+arg_4]
.text:004035D4                 cmp     [esp+4Ch+var_34], edx
.text:004035D8                 jnb     short loc_4035E6
.text:004035DA                 mov     edi, [esp+4Ch+arg_0]
.text:004035DE                 mov     ecx, [esp+4Ch+var_34]
.text:004035E2                 mov     byte ptr [ecx+edi], 30h ; '0'
.text:004035E6
.text:004035E6 loc_4035E6:                             ; CODE XREF: sub_4032A0+338↑j
.text:004035E6                 inc     [esp+4Ch+var_34]
.text:004035EA                 mov     esi, [esp+4Ch+arg_4]
.text:004035EE                 cmp     [esp+4Ch+var_34], esi
.text:004035F2                 jnb     short loc_403600
.text:004035F4                 mov     ebx, [esp+4Ch+arg_0]
.text:004035F8                 mov     eax, [esp+4Ch+var_34]
.text:004035FC                 mov     byte ptr [eax+ebx], 30h ; '0'
.text:00403600
.text:00403600 loc_403600:                             ; CODE XREF: sub_4032A0+352↑j
.text:00403600                 inc     [esp+4Ch+var_34]
.text:00403604                 mov     bl, 30h ; '0'
.text:00403606                 lea     esi, [esi+0]
.text:00403609                 lea     edi, [edi+0]
.text:00403610
.text:00403610 def_4037A2:                             ; CODE XREF: sub_4032A0+105↑j
.text:00403610                                         ; sub_4032A0+463↓j ...
.text:00403610                 cmp     [esp+4Ch+var_21], 0 ; jumptable 004033A5 cases 37,43-58,65-90,93,95,97-122
.text:00403610                                         ; jumptable 004037A2 default case, cases 34-38,42-44,46,48-59
.text:00403615                 lea     eax, [ebp+1]
.text:00403618                 jz      short loc_403660
.text:0040361A                 mov     cl, bl
.text:0040361C                 mov     edi, [esp+4Ch+arg_14]
.text:00403620                 mov     esi, 1
.text:00403625                 shr     cl, 5
.text:00403628                 movzx   edx, cl
.text:0040362B                 mov     ecx, ebx
.text:0040362D                 and     ecx, 1Fh
.text:00403630                 shl     esi, cl
.text:00403632                 test    [edi+edx*4+4], esi
.text:00403636                 jz      short loc_403652
.text:00403638
.text:00403638 loc_403638:                             ; CODE XREF: sub_4032A0+3FC↓j
.text:00403638                 mov     edx, [esp+4Ch+arg_4]
.text:0040363C                 cmp     [esp+4Ch+var_34], edx
.text:00403640                 jnb     short loc_40364E
.text:00403642                 mov     edi, [esp+4Ch+arg_0]
.text:00403646                 mov     esi, [esp+4Ch+var_34]
.text:0040364A                 mov     byte ptr [esi+edi], 5Ch ; '\'
.text:0040364E
.text:0040364E loc_40364E:                             ; CODE XREF: sub_4032A0+3A0↑j
.text:0040364E                 inc     [esp+4Ch+var_34]
.text:00403652
.text:00403652 loc_403652:                             ; CODE XREF: sub_4032A0+396↑j
.text:00403652                 lea     eax, [ebp+1]
.text:00403655                 lea     esi, [esi+0]
.text:00403659                 lea     edi, [edi+0]
.text:00403660
.text:00403660 loc_403660:                             ; CODE XREF: sub_4032A0+310↑j
.text:00403660                                         ; sub_4032A0+378↑j ...
.text:00403660                 mov     ebp, [esp+4Ch+arg_4]
.text:00403664                 cmp     [esp+4Ch+var_34], ebp
.text:00403668                 jnb     short loc_403675
.text:0040366A                 mov     edx, [esp+4Ch+arg_0]
.text:0040366E                 mov     ecx, [esp+4Ch+var_34]
.text:00403672                 mov     [ecx+edx], bl
.text:00403675
.text:00403675 loc_403675:                             ; CODE XREF: sub_4032A0+3C8↑j
.text:00403675                 inc     [esp+4Ch+var_34]
.text:00403679                 mov     ebp, eax
.text:0040367B                 jmp     loc_403330
.text:00403680 ; ---------------------------------------------------------------------------
.text:00403680
.text:00403680 loc_403680:                             ; CODE XREF: sub_4032A0+105↑j
.text:00403680                                         ; DATA XREF: sub_4032A0:jpt_4033A5↑o
.text:00403680                 mov     dl, 61h ; 'a'   ; jumptable 004033A5 case 7
.text:00403682                 lea     esi, [esi+0]
.text:00403689                 lea     edi, [edi+0]
.text:00403690
.text:00403690 loc_403690:                             ; CODE XREF: sub_4032A0+400↓j
.text:00403690                                         ; sub_4032A0+409↓j ...
.text:00403690                 cmp     [esp+4Ch+var_21], 0
.text:00403695                 lea     eax, [ebp+1]
.text:00403698                 jz      short loc_403660
.text:0040369A                 mov     bl, dl
.text:0040369C                 jmp     short loc_403638
.text:0040369E ; ---------------------------------------------------------------------------
.text:0040369E
.text:0040369E loc_40369E:                             ; CODE XREF: sub_4032A0+105↑j
.text:0040369E                                         ; DATA XREF: sub_4032A0:jpt_4033A5↑o
.text:0040369E                 mov     dl, 62h ; 'b'   ; jumptable 004033A5 case 8
.text:004036A0                 jmp     short loc_403690
.text:004036A2 ; ---------------------------------------------------------------------------
.text:004036A2
.text:004036A2 loc_4036A2:                             ; CODE XREF: sub_4032A0+105↑j
.text:004036A2                                         ; DATA XREF: sub_4032A0:jpt_4033A5↑o
.text:004036A2                 mov     dl, 74h ; 't'   ; jumptable 004033A5 case 9
.text:004036A4
.text:004036A4 loc_4036A4:                             ; CODE XREF: sub_4032A0+449↓j
.text:004036A4                                         ; sub_4032A0+455↓j ...
.text:004036A4                 cmp     [esp+4Ch+arg_10], 1
.text:004036A9                 jnz     short loc_403690
.text:004036AB
.text:004036AB loc_4036AB:                             ; CODE XREF: sub_4032A0+45C↓j
.text:004036AB                                         ; sub_4032A0+4C1↓j ...
.text:004036AB                 mov     [esp+4Ch+var_3C], 2 ; jumptable 00403A72 cases 91,92,94,96,124
.text:004036B3                 mov     eax, [esp+4Ch+arg_14]
.text:004036B7                 mov     edx, [esp+4Ch+arg_C]
.text:004036BB                 mov     ecx, [esp+4Ch+Str]
.text:004036BF                 mov     ebx, [esp+4Ch+arg_4]
.text:004036C3                 mov     [esp+4Ch+var_38], eax ; int
.text:004036C7                 mov     ebp, [esp+4Ch+arg_0]
.text:004036CB                 mov     [esp+4Ch+State], edx ; int
.text:004036CF                 mov     [esp+4Ch+SizeInBytes], ecx ; Str
.text:004036D3                 mov     [esp+4Ch+Type], ebx ; int
.text:004036D7                 mov     [esp+4Ch+C], ebp ; int
.text:004036DA                 call    sub_4032A0
.text:004036DF
.text:004036DF loc_4036DF:                             ; CODE XREF: sub_4032A0+972↓j
.text:004036DF                 add     esp, 3Ch
.text:004036E2                 pop     ebx
.text:004036E3                 pop     esi
.text:004036E4                 pop     edi
.text:004036E5                 pop     ebp
.text:004036E6                 retn
.text:004036E7 ; ---------------------------------------------------------------------------
.text:004036E7
.text:004036E7 loc_4036E7:                             ; CODE XREF: sub_4032A0+105↑j
.text:004036E7                                         ; DATA XREF: sub_4032A0:jpt_4033A5↑o
.text:004036E7                 mov     dl, 6Eh ; 'n'   ; jumptable 004033A5 case 10
.text:004036E9                 jmp     short loc_4036A4
.text:004036EB ; ---------------------------------------------------------------------------
.text:004036EB
.text:004036EB loc_4036EB:                             ; CODE XREF: sub_4032A0+105↑j
.text:004036EB                                         ; DATA XREF: sub_4032A0:jpt_4033A5↑o
.text:004036EB                 mov     dl, 76h ; 'v'   ; jumptable 004033A5 case 11
.text:004036ED                 jmp     short loc_403690
.text:004036EF ; ---------------------------------------------------------------------------
.text:004036EF
.text:004036EF loc_4036EF:                             ; CODE XREF: sub_4032A0+105↑j
.text:004036EF                                         ; DATA XREF: sub_4032A0:jpt_4033A5↑o
.text:004036EF                 mov     dl, 66h ; 'f'   ; jumptable 004033A5 case 12
.text:004036F1                 jmp     short loc_403690
.text:004036F3 ; ---------------------------------------------------------------------------
.text:004036F3
.text:004036F3 loc_4036F3:                             ; CODE XREF: sub_4032A0+105↑j
.text:004036F3                                         ; DATA XREF: sub_4032A0:jpt_4033A5↑o
.text:004036F3                 mov     dl, 72h ; 'r'   ; jumptable 004033A5 case 13
.text:004036F5                 jmp     short loc_4036A4
.text:004036F7 ; ---------------------------------------------------------------------------
.text:004036F7
.text:004036F7 loc_4036F7:                             ; CODE XREF: sub_4032A0+105↑j
.text:004036F7                                         ; DATA XREF: sub_4032A0:jpt_4033A5↑o
.text:004036F7                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 004033A5 case 39
.text:004036FC                 jz      short loc_4036AB ; jumptable 00403A72 cases 91,92,94,96,124
.text:004036FE                 cmp     [esp+4Ch+arg_10], 2
.text:00403703                 jnz     def_4037A2      ; jumptable 004033A5 cases 37,43-58,65-90,93,95,97-122
.text:00403703                                         ; jumptable 004037A2 default case, cases 34-38,42-44,46,48-59
.text:00403709                 mov     edx, [esp+4Ch+arg_4]
.text:0040370D                 cmp     [esp+4Ch+var_34], edx
.text:00403711                 jnb     short loc_40371F
.text:00403713                 mov     ecx, [esp+4Ch+arg_0]
.text:00403717                 mov     edi, [esp+4Ch+var_34]
.text:0040371B                 mov     byte ptr [edi+ecx], 27h ; '''
.text:0040371F
.text:0040371F loc_40371F:                             ; CODE XREF: sub_4032A0+471↑j
.text:0040371F                 inc     [esp+4Ch+var_34]
.text:00403723                 mov     eax, [esp+4Ch+arg_4]
.text:00403727                 cmp     [esp+4Ch+var_34], eax
.text:0040372B                 jnb     short loc_403739
.text:0040372D                 mov     esi, [esp+4Ch+arg_0]
.text:00403731                 mov     edx, [esp+4Ch+var_34]
.text:00403735                 mov     byte ptr [edx+esi], 5Ch ; '\'
.text:00403739
.text:00403739 loc_403739:                             ; CODE XREF: sub_4032A0+48B↑j
.text:00403739                 inc     [esp+4Ch+var_34]
.text:0040373D                 mov     edi, [esp+4Ch+arg_4]
.text:00403741                 cmp     [esp+4Ch+var_34], edi
.text:00403745                 jnb     short loc_403753
.text:00403747                 mov     ecx, [esp+4Ch+arg_0]
.text:0040374B                 mov     eax, [esp+4Ch+var_34]
.text:0040374F                 mov     byte ptr [eax+ecx], 27h ; '''
.text:00403753
.text:00403753 loc_403753:                             ; CODE XREF: sub_4032A0+4A5↑j
.text:00403753                                         ; sub_4032A0+5C4↓j ...
.text:00403753                 inc     [esp+4Ch+var_34]
.text:00403757                 jmp     def_4037A2      ; jumptable 004033A5 cases 37,43-58,65-90,93,95,97-122
.text:00403757                                         ; jumptable 004037A2 default case, cases 34-38,42-44,46,48-59
.text:0040375C ; ---------------------------------------------------------------------------
.text:0040375C
.text:0040375C loc_40375C:                             ; CODE XREF: sub_4032A0+105↑j
.text:0040375C                                         ; DATA XREF: sub_4032A0:jpt_4033A5↑o
.text:0040375C                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 004033A5 case 63
.text:00403761                 jz      loc_4036AB      ; jumptable 00403A72 cases 91,92,94,96,124
.text:00403767                 cmp     [esp+4Ch+arg_10], 3
.text:0040376C                 jnz     def_4037A2      ; jumptable 004033A5 cases 37,43-58,65-90,93,95,97-122
.text:0040376C                                         ; jumptable 004037A2 default case, cases 34-38,42-44,46,48-59
.text:00403772                 lea     edx, [ebp+2]
.text:00403775                 cmp     edx, [esp+4Ch+arg_C]
.text:00403779                 jnb     def_4037A2      ; jumptable 004033A5 cases 37,43-58,65-90,93,95,97-122
.text:00403779                                         ; jumptable 004037A2 default case, cases 34-38,42-44,46,48-59
.text:0040377F                 mov     esi, [esp+4Ch+Str]
.text:00403783                 cmp     byte ptr [ebp+esi+1], 3Fh ; '?'
.text:00403788                 jnz     def_4037A2      ; jumptable 004033A5 cases 37,43-58,65-90,93,95,97-122
.text:00403788                                         ; jumptable 004037A2 default case, cases 34-38,42-44,46,48-59
.text:0040378E                 movzx   ecx, byte ptr [ebp+esi+2]
.text:00403793                 movsx   eax, cl
.text:00403796                 sub     eax, 21h ; '!'  ; switch 30 cases
.text:00403799                 cmp     eax, 1Dh
.text:0040379C                 ja      def_4037A2      ; jumptable 004033A5 cases 37,43-58,65-90,93,95,97-122
.text:0040379C                                         ; jumptable 004037A2 default case, cases 34-38,42-44,46,48-59
.text:004037A2                 jmp     ds:jpt_4037A2[eax*4] ; switch jump
.text:004037A2 ; ---------------------------------------------------------------------------
.text:004037A9                 align 4
.text:004037AC jpt_4037A2      dd offset loc_403824    ; DATA XREF: sub_4032A0+502↑r
.text:004037AC                 dd offset def_4037A2    ; jump table for switch statement
.text:004037AC                 dd offset def_4037A2
.text:004037AC                 dd offset def_4037A2
.text:004037AC                 dd offset def_4037A2
.text:004037AC                 dd offset def_4037A2
.text:004037AC                 dd offset loc_403824
.text:004037AC                 dd offset loc_403824
.text:004037AC                 dd offset loc_403824
.text:004037AC                 dd offset def_4037A2
.text:004037AC                 dd offset def_4037A2
.text:004037AC                 dd offset def_4037A2
.text:004037AC                 dd offset loc_403824
.text:004037AC                 dd offset def_4037A2
.text:004037AC                 dd offset loc_403824
.text:004037AC                 dd offset def_4037A2
.text:004037AC                 dd offset def_4037A2
.text:004037AC                 dd offset def_4037A2
.text:004037AC                 dd offset def_4037A2
.text:004037AC                 dd offset def_4037A2
.text:004037AC                 dd offset def_4037A2
.text:004037AC                 dd offset def_4037A2
.text:004037AC                 dd offset def_4037A2
.text:004037AC                 dd offset def_4037A2
.text:004037AC                 dd offset def_4037A2
.text:004037AC                 dd offset def_4037A2
.text:004037AC                 dd offset def_4037A2
.text:004037AC                 dd offset loc_403824
.text:004037AC                 dd offset loc_403824
.text:004037AC                 dd offset loc_403824
.text:00403824 ; ---------------------------------------------------------------------------
.text:00403824
.text:00403824 loc_403824:                             ; CODE XREF: sub_4032A0+502↑j
.text:00403824                                         ; DATA XREF: sub_4032A0:jpt_4037A2↑o
.text:00403824                 mov     ebp, edx        ; jumptable 004037A2 cases 33,39-41,45,47,60-62
.text:00403826                 mov     bl, cl
.text:00403828                 mov     edx, [esp+4Ch+arg_4]
.text:0040382C                 cmp     [esp+4Ch+var_34], edx
.text:00403830                 jnb     short loc_40383E
.text:00403832                 mov     ecx, [esp+4Ch+arg_0]
.text:00403836                 mov     edi, [esp+4Ch+var_34]
.text:0040383A                 mov     byte ptr [edi+ecx], 3Fh ; '?'
.text:0040383E
.text:0040383E loc_40383E:                             ; CODE XREF: sub_4032A0+590↑j
.text:0040383E                 inc     [esp+4Ch+var_34]
.text:00403842                 mov     eax, [esp+4Ch+arg_4]
.text:00403846                 cmp     [esp+4Ch+var_34], eax
.text:0040384A                 jnb     short loc_403858
.text:0040384C                 mov     edx, [esp+4Ch+arg_0]
.text:00403850                 mov     esi, [esp+4Ch+var_34]
.text:00403854                 mov     byte ptr [esi+edx], 5Ch ; '\'
.text:00403858
.text:00403858 loc_403858:                             ; CODE XREF: sub_4032A0+5AA↑j
.text:00403858                 inc     [esp+4Ch+var_34]
.text:0040385C                 mov     edi, [esp+4Ch+arg_4]
.text:00403860                 cmp     [esp+4Ch+var_34], edi
.text:00403864                 jnb     loc_403753
.text:0040386A                 mov     eax, [esp+4Ch+arg_0]
.text:0040386E                 mov     ecx, [esp+4Ch+var_34]
.text:00403872                 mov     byte ptr [ecx+eax], 3Fh ; '?'
.text:00403876                 jmp     loc_403753
.text:00403876 ; ---------------------------------------------------------------------------
.text:0040387B                 align 10h
.text:00403880
.text:00403880 def_4033A5:                             ; CODE XREF: sub_4032A0+FF↑j
.text:00403880                                         ; sub_4032A0+105↑j
.text:00403880                                         ; DATA XREF: ...
.text:00403880                 cmp     [esp+4Ch+var_22], 0 ; jumptable 004033A5 default case, cases 1-6,14-31,64
.text:00403885                 jz      loc_4039B0
.text:0040388B                 mov     [esp+4Ch+var_28], 1
.text:00403893                 mov     esi, ds:__mb_cur_max
.text:00403899                 movzx   edx, bl
.text:0040389C                 cmp     dword ptr [esi], 1
.text:0040389F                 jz      loc_403994
.text:004038A5                 mov     [esp+4Ch+Type], 157h ; Type
.text:004038AD                 mov     [esp+4Ch+C], edx ; C
.text:004038B0                 call    _isctype
.text:004038B5
.text:004038B5 loc_4038B5:                             ; CODE XREF: sub_4032A0+705↓j
.text:004038B5                 test    eax, eax
.text:004038B7                 setnz   [esp+4Ch+var_29]
.text:004038BC
.text:004038BC loc_4038BC:                             ; CODE XREF: sub_4032A0+7A5↓j
.text:004038BC                 cmp     [esp+4Ch+var_21], 0
.text:004038C1                 lea     eax, [ebp+1]
.text:004038C4                 jz      loc_403660
.text:004038CA                 cmp     [esp+4Ch+var_29], 0
.text:004038CF                 jnz     def_4037A2      ; jumptable 004033A5 cases 37,43-58,65-90,93,95,97-122
.text:004038CF                                         ; jumptable 004037A2 default case, cases 34-38,42-44,46,48-59
.text:004038D5
.text:004038D5 loc_4038D5:                             ; CODE XREF: sub_4032A0+7AB↓j
.text:004038D5                 mov     eax, [esp+4Ch+var_28]
.text:004038D9                 lea     edx, [eax+ebp]
.text:004038DC                 lea     esi, [esi+0]
.text:004038E0
.text:004038E0 loc_4038E0:                             ; CODE XREF: sub_4032A0+6EF↓j
.text:004038E0                 cmp     [esp+4Ch+var_21], 0
.text:004038E5                 jz      short loc_403960
.text:004038E7                 cmp     [esp+4Ch+var_29], 0
.text:004038EC                 jnz     short loc_403960
.text:004038EE                 mov     edi, [esp+4Ch+arg_4]
.text:004038F2                 cmp     [esp+4Ch+var_34], edi
.text:004038F6                 jnb     short loc_403904
.text:004038F8                 mov     esi, [esp+4Ch+arg_0]
.text:004038FC                 mov     eax, [esp+4Ch+var_34]
.text:00403900                 mov     byte ptr [eax+esi], 5Ch ; '\'
.text:00403904
.text:00403904 loc_403904:                             ; CODE XREF: sub_4032A0+656↑j
.text:00403904                 inc     [esp+4Ch+var_34]
.text:00403908                 mov     ecx, [esp+4Ch+arg_4]
.text:0040390C                 cmp     [esp+4Ch+var_34], ecx
.text:00403910                 jnb     short loc_403925
.text:00403912                 mov     cl, bl
.text:00403914                 mov     esi, [esp+4Ch+arg_0]
.text:00403918                 mov     edi, [esp+4Ch+var_34]
.text:0040391C                 shr     cl, 6
.text:0040391F                 add     cl, 30h ; '0'
.text:00403922                 mov     [edi+esi], cl
.text:00403925
.text:00403925 loc_403925:                             ; CODE XREF: sub_4032A0+670↑j
.text:00403925                 inc     [esp+4Ch+var_34]
.text:00403929                 mov     edi, [esp+4Ch+arg_4]
.text:0040392D                 cmp     [esp+4Ch+var_34], edi
.text:00403931                 jnb     short loc_403949
.text:00403933                 mov     cl, bl
.text:00403935                 mov     esi, [esp+4Ch+arg_0]
.text:00403939                 shr     cl, 3
.text:0040393C                 mov     edi, [esp+4Ch+var_34]
.text:00403940                 and     cl, 7
.text:00403943                 add     cl, 30h ; '0'
.text:00403946                 mov     [edi+esi], cl
.text:00403949
.text:00403949 loc_403949:                             ; CODE XREF: sub_4032A0+691↑j
.text:00403949                 inc     [esp+4Ch+var_34]
.text:0040394D                 and     bl, 7
.text:00403950                 add     bl, 30h ; '0'
.text:00403953                 lea     esi, [esi+0]
.text:00403959                 lea     edi, [edi+0]
.text:00403960
.text:00403960 loc_403960:                             ; CODE XREF: sub_4032A0+645↑j
.text:00403960                                         ; sub_4032A0+64C↑j
.text:00403960                 lea     eax, [ebp+1]
.text:00403963                 cmp     edx, eax
.text:00403965                 jbe     loc_403660
.text:0040396B                 mov     ebp, [esp+4Ch+arg_4]
.text:0040396F                 cmp     [esp+4Ch+var_34], ebp
.text:00403973                 jnb     short loc_403980
.text:00403975                 mov     ecx, [esp+4Ch+arg_0]
.text:00403979                 mov     edi, [esp+4Ch+var_34]
.text:0040397D                 mov     [edi+ecx], bl
.text:00403980
.text:00403980 loc_403980:                             ; CODE XREF: sub_4032A0+6D3↑j
.text:00403980                 inc     [esp+4Ch+var_34]
.text:00403984                 mov     ebp, eax
.text:00403986                 mov     eax, [esp+4Ch+Str]
.text:0040398A                 movzx   ebx, byte ptr [ebp+eax+0]
.text:0040398F                 jmp     loc_4038E0
.text:00403994 ; ---------------------------------------------------------------------------
.text:00403994
.text:00403994 loc_403994:                             ; CODE XREF: sub_4032A0+5FF↑j
.text:00403994                 mov     ecx, ds:_pctype
.text:0040399A                 mov     edi, [ecx]
.text:0040399C                 movzx   eax, word ptr [edi+edx*2]
.text:004039A0                 and     eax, 157h
.text:004039A5                 jmp     loc_4038B5
.text:004039A5 ; ---------------------------------------------------------------------------
.text:004039AA                 align 10h
.text:004039B0
.text:004039B0 loc_4039B0:                             ; CODE XREF: sub_4032A0+5E5↑j
.text:004039B0                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:004039B5                 mov     [esp+4Ch+var_18._Wchar], 0
.text:004039BD                 mov     [esp+4Ch+var_28], 0
.text:004039C5                 mov     [esp+4Ch+var_29], 1
.text:004039CA                 jz      loc_403B5C
.text:004039D0
.text:004039D0 loc_4039D0:                             ; CODE XREF: sub_4032A0+8CC↓j
.text:004039D0                 mov     ecx, [esp+4Ch+arg_C]
.text:004039D4                 lea     edx, [esp+4Ch+var_18]
.text:004039D8                 mov     edi, [esp+4Ch+Str]
.text:004039DC                 mov     [esp+4Ch+State], edx ; State
.text:004039E0                 lea     esi, [esp+4Ch+var_18._State]
.text:004039E4                 sub     ecx, ebp
.text:004039E6                 mov     [esp+4Ch+SizeInBytes], ecx ; SizeInBytes
.text:004039EA                 add     edi, ebp
.text:004039EC                 mov     [esp+4Ch+var_30], edi
.text:004039F0                 mov     [esp+4Ch+Type], edi ; SrcCh
.text:004039F4                 mov     [esp+4Ch+C], esi ; DstCh
.text:004039F7                 call    mbrtowc
.text:004039FC                 test    eax, eax
.text:004039FE                 mov     edi, eax
.text:00403A00                 jz      short loc_403A40
.text:00403A02                 cmp     eax, 0FFFFFFFFh
.text:00403A05                 jz      loc_403B52
.text:00403A0B                 cmp     eax, 0FFFFFFFEh
.text:00403A0E                 jz      loc_403B12
.text:00403A14                 cmp     [esp+4Ch+arg_10], 1
.text:00403A19                 jz      short loc_403A50
.text:00403A1B
.text:00403A1B loc_403A1B:                             ; CODE XREF: sub_4032A0+7B9↓j
.text:00403A1B                                         ; sub_4032A0+86D↓j
.text:00403A1B                 movzx   ecx, [esp+4Ch+var_18._State]
.text:00403A20                 mov     [esp+4Ch+Type], 157h ; Type
.text:00403A28                 mov     [esp+4Ch+C], ecx ; C
.text:00403A2B                 call    iswctype
.text:00403A30                 test    eax, eax
.text:00403A32                 jnz     short loc_403A39
.text:00403A34                 mov     [esp+4Ch+var_29], 0
.text:00403A39
.text:00403A39 loc_403A39:                             ; CODE XREF: sub_4032A0+792↑j
.text:00403A39                 mov     [esp+4Ch+var_28], edi
.text:00403A3D                 lea     esi, [esi+0]
.text:00403A40
.text:00403A40 loc_403A40:                             ; CODE XREF: sub_4032A0+760↑j
.text:00403A40                                         ; sub_4032A0+87B↓j ...
.text:00403A40                 cmp     [esp+4Ch+var_28], 1
.text:00403A45                 jbe     loc_4038BC
.text:00403A4B                 jmp     loc_4038D5
.text:00403A50 ; ---------------------------------------------------------------------------
.text:00403A50
.text:00403A50 loc_403A50:                             ; CODE XREF: sub_4032A0+779↑j
.text:00403A50                 cmp     [esp+4Ch+arg_10], eax
.text:00403A54                 mov     edx, 1
.text:00403A59                 jnb     short loc_403A1B
.text:00403A5B
.text:00403A5B loc_403A5B:                             ; CODE XREF: sub_4032A0+867↓j
.text:00403A5B                 mov     ecx, [esp+4Ch+Str]
.text:00403A5F                 lea     esi, [edx+ebp]
.text:00403A62                 movsx   eax, byte ptr [esi+ecx]
.text:00403A66                 sub     eax, 5Bh ; '['  ; switch 34 cases
.text:00403A69                 cmp     eax, 21h
.text:00403A6C                 ja      def_403A72      ; jumptable 00403A72 default case, cases 93,95,97-123
.text:00403A72                 jmp     ds:jpt_403A72[eax*4] ; switch jump
.text:00403A72 ; ---------------------------------------------------------------------------
.text:00403A79                 align 4
.text:00403A7C jpt_403A72      dd offset loc_4036AB    ; DATA XREF: sub_4032A0+7D2↑r
.text:00403A7C                 dd offset loc_4036AB    ; jump table for switch statement
.text:00403A7C                 dd offset def_403A72
.text:00403A7C                 dd offset loc_4036AB
.text:00403A7C                 dd offset def_403A72
.text:00403A7C                 dd offset loc_4036AB
.text:00403A7C                 dd offset def_403A72
.text:00403A7C                 dd offset def_403A72
.text:00403A7C                 dd offset def_403A72
.text:00403A7C                 dd offset def_403A72
.text:00403A7C                 dd offset def_403A72
.text:00403A7C                 dd offset def_403A72
.text:00403A7C                 dd offset def_403A72
.text:00403A7C                 dd offset def_403A72
.text:00403A7C                 dd offset def_403A72
.text:00403A7C                 dd offset def_403A72
.text:00403A7C                 dd offset def_403A72
.text:00403A7C                 dd offset def_403A72
.text:00403A7C                 dd offset def_403A72
.text:00403A7C                 dd offset def_403A72
.text:00403A7C                 dd offset def_403A72
.text:00403A7C                 dd offset def_403A72
.text:00403A7C                 dd offset def_403A72
.text:00403A7C                 dd offset def_403A72
.text:00403A7C                 dd offset def_403A72
.text:00403A7C                 dd offset def_403A72
.text:00403A7C                 dd offset def_403A72
.text:00403A7C                 dd offset def_403A72
.text:00403A7C                 dd offset def_403A72
.text:00403A7C                 dd offset def_403A72
.text:00403A7C                 dd offset def_403A72
.text:00403A7C                 dd offset def_403A72
.text:00403A7C                 dd offset def_403A72
.text:00403A7C                 dd offset loc_4036AB
.text:00403B04 ; ---------------------------------------------------------------------------
.text:00403B04
.text:00403B04 def_403A72:                             ; CODE XREF: sub_4032A0+7CC↑j
.text:00403B04                                         ; sub_4032A0+7D2↑j
.text:00403B04                                         ; DATA XREF: ...
.text:00403B04                 inc     edx             ; jumptable 00403A72 default case, cases 93,95,97-123
.text:00403B05                 cmp     edx, edi
.text:00403B07                 jb      loc_403A5B
.text:00403B0D                 jmp     loc_403A1B
.text:00403B12 ; ---------------------------------------------------------------------------
.text:00403B12
.text:00403B12 loc_403B12:                             ; CODE XREF: sub_4032A0+76E↑j
.text:00403B12                 cmp     ebp, [esp+4Ch+arg_C]
.text:00403B16                 mov     [esp+4Ch+var_29], 0
.text:00403B1B                 jnb     loc_403A40
.text:00403B21                 mov     eax, [esp+4Ch+var_30]
.text:00403B25                 cmp     byte ptr [eax], 0
.text:00403B28                 jz      loc_403A40
.text:00403B2E
.text:00403B2E loc_403B2E:                             ; CODE XREF: sub_4032A0+8AB↓j
.text:00403B2E                 inc     [esp+4Ch+var_28]
.text:00403B32                 mov     esi, [esp+4Ch+var_28]
.text:00403B36                 lea     eax, [esi+ebp]
.text:00403B39                 cmp     eax, [esp+4Ch+arg_C]
.text:00403B3D                 jnb     loc_403A40
.text:00403B43                 mov     edi, [esp+4Ch+Str]
.text:00403B47                 cmp     byte ptr [eax+edi], 0
.text:00403B4B                 jnz     short loc_403B2E
.text:00403B4D                 jmp     loc_403A40
.text:00403B52 ; ---------------------------------------------------------------------------
.text:00403B52
.text:00403B52 loc_403B52:                             ; CODE XREF: sub_4032A0+765↑j
.text:00403B52                 mov     [esp+4Ch+var_29], 0
.text:00403B57                 jmp     loc_403A40
.text:00403B5C ; ---------------------------------------------------------------------------
.text:00403B5C
.text:00403B5C loc_403B5C:                             ; CODE XREF: sub_4032A0+72A↑j
.text:00403B5C                 mov     edx, [esp+4Ch+Str]
.text:00403B60                 mov     [esp+4Ch+C], edx ; Str
.text:00403B63                 call    strlen
.text:00403B68                 mov     [esp+4Ch+arg_C], eax
.text:00403B6C                 jmp     loc_4039D0
.text:00403B71 ; ---------------------------------------------------------------------------
.text:00403B71
.text:00403B71 loc_403B71:                             ; CODE XREF: sub_4032A0+105↑j
.text:00403B71                                         ; DATA XREF: sub_4032A0:jpt_4033A5↑o
.text:00403B71                 mov     dl, bl          ; jumptable 004033A5 case 92
.text:00403B73                 jmp     loc_4036A4
.text:00403B78 ; ---------------------------------------------------------------------------
.text:00403B78
.text:00403B78 loc_403B78:                             ; CODE XREF: sub_4032A0+105↑j
.text:00403B78                                         ; sub_4032A0+902↓j
.text:00403B78                                         ; DATA XREF: ...
.text:00403B78                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 004033A5 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:00403B7D                 jnz     def_4037A2      ; jumptable 004033A5 cases 37,43-58,65-90,93,95,97-122
.text:00403B7D                                         ; jumptable 004037A2 default case, cases 34-38,42-44,46,48-59
.text:00403B83                 jmp     loc_4036AB      ; jumptable 00403A72 cases 91,92,94,96,124
.text:00403B88 ; ---------------------------------------------------------------------------
.text:00403B88
.text:00403B88 loc_403B88:                             ; CODE XREF: sub_4032A0+105↑j
.text:00403B88                                         ; DATA XREF: sub_4032A0:jpt_4033A5↑o
.text:00403B88                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh ; jumptable 004033A5 cases 123,125
.text:00403B8D                 jz      short loc_403BA4
.text:00403B8F                 cmp     [esp+4Ch+arg_C], 1
.text:00403B94
.text:00403B94 loc_403B94:                             ; CODE XREF: sub_4032A0+90C↓j
.text:00403B94                 jnz     def_4037A2      ; jumptable 004033A5 cases 37,43-58,65-90,93,95,97-122
.text:00403B94                                         ; jumptable 004037A2 default case, cases 34-38,42-44,46,48-59
.text:00403B9A
.text:00403B9A loc_403B9A:                             ; CODE XREF: sub_4032A0+105↑j
.text:00403B9A                                         ; DATA XREF: sub_4032A0:jpt_4033A5↑o
.text:00403B9A                 test    ebp, ebp        ; jumptable 004033A5 cases 35,126
.text:00403B9C                 jnz     def_4037A2      ; jumptable 004033A5 cases 37,43-58,65-90,93,95,97-122
.text:00403B9C                                         ; jumptable 004037A2 default case, cases 34-38,42-44,46,48-59
.text:00403BA2                 jmp     short loc_403B78 ; jumptable 004033A5 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:00403BA4 ; ---------------------------------------------------------------------------
.text:00403BA4
.text:00403BA4 loc_403BA4:                             ; CODE XREF: sub_4032A0+8ED↑j
.text:00403BA4                 mov     esi, [esp+4Ch+Str]
.text:00403BA8                 cmp     byte ptr [esi+1], 0
.text:00403BAC                 jmp     short loc_403B94
.text:00403BAE ; ---------------------------------------------------------------------------
.text:00403BAE
.text:00403BAE loc_403BAE:                             ; CODE XREF: sub_4032A0:loc_40333F↑j
.text:00403BAE                 test    ebp, ebp
.text:00403BB0                 jnz     short loc_403BBD
.text:00403BB2                 cmp     [esp+4Ch+arg_10], 1
.text:00403BB7                 jz      loc_4036AB      ; jumptable 00403A72 cases 91,92,94,96,124
.text:00403BBD
.text:00403BBD loc_403BBD:                             ; CODE XREF: sub_4032A0+910↑j
.text:00403BBD                 mov     esi, [esp+4Ch+var_1C]
.text:00403BC1                 test    esi, esi
.text:00403BC3                 jz      short loc_403BF8
.text:00403BC5                 mov     edi, [esp+4Ch+var_1C]
.text:00403BC9                 movzx   eax, byte ptr [edi]
.text:00403BCC                 test    al, al
.text:00403BCE                 jz      short loc_403BF8
.text:00403BD0
.text:00403BD0 loc_403BD0:                             ; CODE XREF: sub_4032A0+956↓j
.text:00403BD0                 mov     ebp, [esp+4Ch+arg_4]
.text:00403BD4                 cmp     [esp+4Ch+var_34], ebp
.text:00403BD8                 jnb     short loc_403BE5
.text:00403BDA                 mov     ecx, [esp+4Ch+arg_0]
.text:00403BDE                 mov     ebx, [esp+4Ch+var_34]
.text:00403BE2                 mov     [ebx+ecx], al
.text:00403BE5
.text:00403BE5 loc_403BE5:                             ; CODE XREF: sub_4032A0+938↑j
.text:00403BE5                 inc     [esp+4Ch+var_1C]
.text:00403BE9                 inc     [esp+4Ch+var_34]
.text:00403BED                 mov     edx, [esp+4Ch+var_1C]
.text:00403BF1                 movzx   eax, byte ptr [edx]
.text:00403BF4                 test    al, al
.text:00403BF6                 jnz     short loc_403BD0
.text:00403BF8
.text:00403BF8 loc_403BF8:                             ; CODE XREF: sub_4032A0+923↑j
.text:00403BF8                                         ; sub_4032A0+92E↑j
.text:00403BF8                 mov     eax, [esp+4Ch+arg_4]
.text:00403BFC                 cmp     [esp+4Ch+var_34], eax
.text:00403C00                 jnb     short loc_403C0E
.text:00403C02                 mov     edi, [esp+4Ch+arg_0]
.text:00403C06                 mov     esi, [esp+4Ch+var_34]
.text:00403C0A                 mov     byte ptr [esi+edi], 0
.text:00403C0E
.text:00403C0E loc_403C0E:                             ; CODE XREF: sub_4032A0+960↑j
.text:00403C0E                 mov     eax, [esp+4Ch+var_34]
.text:00403C12                 jmp     loc_4036DF
.text:00403C17 ; ---------------------------------------------------------------------------
.text:00403C17
.text:00403C17 loc_403C17:                             ; CODE XREF: sub_4032A0+95↑j
.text:00403C17                 mov     ebx, [esp+4Ch+Str]
.text:00403C1B                 cmp     byte ptr [ebp+ebx+0], 0
.text:00403C20                 jmp     loc_40333F
.text:00403C25 ; ---------------------------------------------------------------------------
.text:00403C25
.text:00403C25 loc_403C25:                             ; CODE XREF: sub_4032A0+3D↑j
.text:00403C25                                         ; DATA XREF: sub_4032A0:jpt_4032DD↑o
.text:00403C25                 mov     edx, [esp+4Ch+arg_4] ; jumptable 004032DD case 2
.text:00403C29                 cmp     [esp+4Ch+var_34], edx
.text:00403C2D                 jnb     short loc_403C36
.text:00403C2F                 mov     ecx, [esp+4Ch+arg_0]
.text:00403C33                 mov     byte ptr [ecx], 27h ; '''
.text:00403C36
.text:00403C36 loc_403C36:                             ; CODE XREF: sub_4032A0+98D↑j
.text:00403C36                 mov     [esp+4Ch+var_34], 1
.text:00403C3E                 mov     [esp+4Ch+var_1C], 40328Eh
.text:00403C46                 jmp     loc_403326
.text:00403C4B ; ---------------------------------------------------------------------------
.text:00403C4B
.text:00403C4B loc_403C4B:                             ; CODE XREF: sub_4032A0+3D↑j
.text:00403C4B                                         ; DATA XREF: sub_4032A0:jpt_4032DD↑o
.text:00403C4B                 mov     [esp+4Ch+var_21], 1 ; jumptable 004032DD case 4
.text:00403C50                 jmp     def_4032DD      ; jumptable 004032DD default case, cases 0,1
.text:00403C55 ; ---------------------------------------------------------------------------
.text:00403C55
.text:00403C55 loc_403C55:                             ; CODE XREF: sub_4032A0+3D↑j
.text:00403C55                                         ; DATA XREF: sub_4032A0:jpt_4032DD↑o
.text:00403C55                 mov     [esp+4Ch+C], 403290h ; jumptable 004032DD cases 5,6
.text:00403C5C                 call    ds:libintl_gettext
.text:00403C62                 cmp     eax, 403290h
.text:00403C67                 mov     edi, eax
.text:00403C69                 jz      short loc_403CE0
.text:00403C6B
.text:00403C6B loc_403C6B:                             ; CODE XREF: sub_4032A0+A45↓j
.text:00403C6B                                         ; sub_4032A0+A4C↓j
.text:00403C6B                 mov     [esp+4Ch+C], 40328Eh
.text:00403C72                 call    ds:libintl_gettext
.text:00403C78                 cmp     eax, 40328Eh
.text:00403C7D                 mov     edx, eax
.text:00403C7F                 jz      short loc_403CD2
.text:00403C81
.text:00403C81 loc_403C81:                             ; CODE XREF: sub_4032A0+A37↓j
.text:00403C81                                         ; sub_4032A0+A3E↓j
.text:00403C81                 mov     [esp+4Ch+var_1C], edi
.text:00403C85                 cmp     byte ptr [edi], 0
.text:00403C88                 jz      short loc_403CB8
.text:00403C8A
.text:00403C8A loc_403C8A:                             ; CODE XREF: sub_4032A0+A16↓j
.text:00403C8A                 mov     ecx, [esp+4Ch+arg_4]
.text:00403C8E                 cmp     [esp+4Ch+var_34], ecx
.text:00403C92                 jnb     short loc_403CA7
.text:00403C94                 mov     ebp, [esp+4Ch+var_1C]
.text:00403C98                 mov     edi, [esp+4Ch+arg_0]
.text:00403C9C                 mov     esi, [esp+4Ch+var_34]
.text:00403CA0                 movzx   ebx, byte ptr [ebp+0]
.text:00403CA4                 mov     [esi+edi], bl
.text:00403CA7
.text:00403CA7 loc_403CA7:                             ; CODE XREF: sub_4032A0+9F2↑j
.text:00403CA7                 inc     [esp+4Ch+var_1C]
.text:00403CAB                 inc     [esp+4Ch+var_34]
.text:00403CAF                 mov     eax, [esp+4Ch+var_1C]
.text:00403CB3                 cmp     byte ptr [eax], 0
.text:00403CB6                 jnz     short loc_403C8A
.text:00403CB8
.text:00403CB8 loc_403CB8:                             ; CODE XREF: sub_4032A0+9E8↑j
.text:00403CB8                 mov     [esp+4Ch+var_21], 1
.text:00403CBD                 mov     [esp+4Ch+var_1C], edx
.text:00403CC1                 mov     [esp+4Ch+C], edx ; Str
.text:00403CC4                 call    strlen
.text:00403CC9                 mov     [esp+4Ch+var_20], eax
.text:00403CCD                 jmp     def_4032DD      ; jumptable 004032DD default case, cases 0,1
.text:00403CD2 ; ---------------------------------------------------------------------------
.text:00403CD2
.text:00403CD2 loc_403CD2:                             ; CODE XREF: sub_4032A0+9DF↑j
.text:00403CD2                 cmp     [esp+4Ch+arg_10], 6
.text:00403CD7                 jnz     short loc_403C81
.text:00403CD9                 mov     edx, offset asc_40328C ; "\"'`"
.text:00403CDE                 jmp     short loc_403C81
.text:00403CE0 ; ---------------------------------------------------------------------------
.text:00403CE0
.text:00403CE0 loc_403CE0:                             ; CODE XREF: sub_4032A0+9C9↑j
.text:00403CE0                 cmp     [esp+4Ch+arg_10], 6
.text:00403CE5                 jnz     short loc_403C6B
.text:00403CE7                 mov     edi, offset asc_40328C ; "\"'`"
.text:00403CEC                 jmp     loc_403C6B
.text:00403CEC sub_4032A0      endp
.text:00403CEC
.text:00403CF1 ; ---------------------------------------------------------------------------
.text:00403CF1                 jmp     short loc_403D00
.text:00403CF1 ; ---------------------------------------------------------------------------
.text:00403CF3                 align 10h
.text:00403D00
.text:00403D00 loc_403D00:                             ; CODE XREF: .text:00403CF1↑j
.text:00403D00                 sub     esp, 0Ch
.text:00403D03                 mov     [esp+4], ebx
.text:00403D07                 mov     [esp+8], esi
.text:00403D0B                 call    _errno
.text:00403D10                 mov     esi, [eax]
.text:00403D12                 mov     dword ptr [esp], 24h ; '$'
.text:00403D19                 call    sub_4045F0
.text:00403D1E                 mov     edx, [esp+10h]
.text:00403D22                 mov     ebx, eax
.text:00403D24                 test    edx, edx
.text:00403D26                 jz      short loc_403D71
.text:00403D28
.text:00403D28 loc_403D28:                             ; CODE XREF: .text:00403D76↓j
.text:00403D28                 mov     ecx, [edx]
.text:00403D2A                 mov     [ebx], ecx
.text:00403D2C                 mov     ecx, [edx+4]
.text:00403D2F                 mov     [ebx+4], ecx
.text:00403D32                 mov     ecx, [edx+8]
.text:00403D35                 mov     [ebx+8], ecx
.text:00403D38                 mov     ecx, [edx+0Ch]
.text:00403D3B                 mov     [ebx+0Ch], ecx
.text:00403D3E                 mov     ecx, [edx+10h]
.text:00403D41                 mov     [ebx+10h], ecx
.text:00403D44                 mov     ecx, [edx+14h]
.text:00403D47                 mov     [ebx+14h], ecx
.text:00403D4A                 mov     ecx, [edx+18h]
.text:00403D4D                 mov     [ebx+18h], ecx
.text:00403D50                 mov     ecx, [edx+1Ch]
.text:00403D53                 mov     [ebx+1Ch], ecx
.text:00403D56                 mov     ecx, [edx+20h]
.text:00403D59                 mov     [ebx+20h], ecx
.text:00403D5C                 call    _errno
.text:00403D61                 mov     [eax], esi
.text:00403D63                 mov     esi, [esp+8]
.text:00403D67                 mov     eax, ebx
.text:00403D69                 mov     ebx, [esp+4]
.text:00403D6D                 add     esp, 0Ch
.text:00403D70                 retn
.text:00403D71 ; ---------------------------------------------------------------------------
.text:00403D71
.text:00403D71 loc_403D71:                             ; CODE XREF: .text:00403D26↑j
.text:00403D71                 mov     edx, offset dword_407150
.text:00403D76                 jmp     short loc_403D28
.text:00403D76 ; ---------------------------------------------------------------------------
.text:00403D78                 align 10h
.text:00403D80                 mov     eax, [esp+4]
.text:00403D84                 test    eax, eax
.text:00403D86                 jz      short loc_403D90
.text:00403D88
.text:00403D88 loc_403D88:                             ; CODE XREF: .text:00403D95↓j
.text:00403D88                 mov     eax, [eax]
.text:00403D8A                 retn
.text:00403D8A ; ---------------------------------------------------------------------------
.text:00403D8B                 align 10h
.text:00403D90
.text:00403D90 loc_403D90:                             ; CODE XREF: .text:00403D86↑j
.text:00403D90                 mov     eax, offset dword_407150
.text:00403D95                 jmp     short loc_403D88
.text:00403D95 ; ---------------------------------------------------------------------------
.text:00403D97                 align 10h
.text:00403DA0                 mov     edx, [esp+4]
.text:00403DA4                 test    edx, edx
.text:00403DA6                 jz      short loc_403DB0
.text:00403DA8
.text:00403DA8 loc_403DA8:                             ; CODE XREF: .text:00403DB5↓j
.text:00403DA8                 mov     ecx, [esp+8]
.text:00403DAC                 mov     [edx], ecx
.text:00403DAE                 retn
.text:00403DAE ; ---------------------------------------------------------------------------
.text:00403DAF                 align 10h
.text:00403DB0
.text:00403DB0 loc_403DB0:                             ; CODE XREF: .text:00403DA6↑j
.text:00403DB0                 mov     edx, offset dword_407150
.text:00403DB5                 jmp     short loc_403DA8
.text:00403DB5 ; ---------------------------------------------------------------------------
.text:00403DB7                 align 10h
.text:00403DC0                 sub     esp, 8
.text:00403DC3                 mov     eax, [esp+0Ch]
.text:00403DC7                 movzx   ecx, byte ptr [esp+10h]
.text:00403DCC                 mov     [esp], ebx
.text:00403DCF                 mov     ebx, [esp+14h]
.text:00403DD3                 mov     [esp+4], esi
.text:00403DD7                 mov     dl, cl
.text:00403DD9                 shr     dl, 5
.text:00403DDC                 movzx   edx, dl
.text:00403DDF                 shl     edx, 2
.text:00403DE2                 test    eax, eax
.text:00403DE4                 lea     esi, [edx+eax+4]
.text:00403DE8                 jz      short loc_403E10
.text:00403DEA
.text:00403DEA loc_403DEA:                             ; CODE XREF: .text:00403E16↓j
.text:00403DEA                 mov     edx, [esi]
.text:00403DEC                 and     ecx, 1Fh
.text:00403DEF                 and     ebx, 1
.text:00403DF2                 mov     eax, edx
.text:00403DF4                 shr     eax, cl
.text:00403DF6                 and     eax, 1
.text:00403DF9                 xor     ebx, eax
.text:00403DFB                 shl     ebx, cl
.text:00403DFD                 xor     edx, ebx
.text:00403DFF                 mov     [esi], edx
.text:00403E01                 mov     ebx, [esp]
.text:00403E04                 mov     esi, [esp+4]
.text:00403E08                 add     esp, 8
.text:00403E0B                 retn
.text:00403E0B ; ---------------------------------------------------------------------------
.text:00403E0C                 align 10h
.text:00403E10
.text:00403E10 loc_403E10:                             ; CODE XREF: .text:00403DE8↑j
.text:00403E10                 lea     esi, dword_407154[edx]
.text:00403E16                 jmp     short loc_403DEA
.text:00403E16 ; ---------------------------------------------------------------------------
.text:00403E18                 align 10h
.text:00403E20                 sub     esp, 2Ch
.text:00403E23                 mov     [esp+24h], ebx
.text:00403E27                 mov     ebx, [esp+40h]
.text:00403E2B                 mov     [esp+28h], esi
.text:00403E2F                 test    ebx, ebx
.text:00403E31                 jz      short loc_403E80
.text:00403E33
.text:00403E33 loc_403E33:                             ; CODE XREF: .text:00403E85↓j
.text:00403E33                 call    _errno
.text:00403E38                 mov     esi, [eax]
.text:00403E3A                 mov     [esp+14h], ebx
.text:00403E3E                 mov     edx, [ebx]
.text:00403E40                 mov     ecx, [esp+38h]
.text:00403E44                 mov     ebx, [esp+3Ch]
.text:00403E48                 mov     [esp+10h], edx
.text:00403E4C                 mov     edx, [esp+34h]
.text:00403E50                 mov     [esp+0Ch], ebx
.text:00403E54                 mov     [esp+8], ecx
.text:00403E58                 mov     [esp+4], edx
.text:00403E5C                 mov     edx, [esp+30h]
.text:00403E60                 mov     [esp], edx
.text:00403E63                 call    sub_4032A0
.text:00403E68                 mov     ebx, eax
.text:00403E6A                 call    _errno
.text:00403E6F                 mov     [eax], esi
.text:00403E71                 mov     esi, [esp+28h]
.text:00403E75                 mov     eax, ebx
.text:00403E77                 mov     ebx, [esp+24h]
.text:00403E7B                 add     esp, 2Ch
.text:00403E7E                 retn
.text:00403E7E ; ---------------------------------------------------------------------------
.text:00403E7F                 align 10h
.text:00403E80
.text:00403E80 loc_403E80:                             ; CODE XREF: .text:00403E31↑j
.text:00403E80                 mov     ebx, offset dword_407150
.text:00403E85                 jmp     short loc_403E33
.text:00403E85 ; ---------------------------------------------------------------------------
.text:00403E87                 align 10h
.text:00403E90                 push    ebp
.text:00403E91                 push    edi
.text:00403E92                 push    esi
.text:00403E93                 push    ebx
.text:00403E94                 sub     esp, 2Ch
.text:00403E97                 mov     ebp, [esp+48h]
.text:00403E9B                 call    _errno
.text:00403EA0                 mov     edx, [eax]
.text:00403EA2                 test    ebp, ebp
.text:00403EA4                 mov     ebx, ebp
.text:00403EA6                 mov     [esp+28h], edx
.text:00403EAA                 jz      loc_403F60
.text:00403EB0
.text:00403EB0 loc_403EB0:                             ; CODE XREF: .text:00403F65↓j
.text:00403EB0                 call    _errno
.text:00403EB5                 mov     edi, [eax]
.text:00403EB7                 mov     esi, ebp
.text:00403EB9                 mov     [esp+14h], ebx
.text:00403EBD                 mov     ecx, [ebx]
.text:00403EBF                 mov     dword ptr [esp], 0
.text:00403EC6                 mov     edx, [esp+44h]
.text:00403ECA                 mov     dword ptr [esp+4], 0
.text:00403ED2                 mov     eax, [esp+40h]
.text:00403ED6                 mov     [esp+10h], ecx
.text:00403EDA                 mov     [esp+0Ch], edx
.text:00403EDE                 mov     [esp+8], eax
.text:00403EE2                 call    sub_4032A0
.text:00403EE7                 mov     ebx, eax
.text:00403EE9                 call    _errno
.text:00403EEE                 mov     [eax], edi
.text:00403EF0                 lea     edi, [ebx+1]
.text:00403EF3                 mov     [esp], edi
.text:00403EF6                 call    sub_4045F0
.text:00403EFB                 mov     [esp+24h], eax
.text:00403EFF                 test    ebp, ebp
.text:00403F01                 jz      short loc_403F52
.text:00403F03
.text:00403F03 loc_403F03:                             ; CODE XREF: .text:00403F57↓j
.text:00403F03                 call    _errno
.text:00403F08                 mov     ebp, [eax]
.text:00403F0A                 mov     [esp+14h], esi
.text:00403F0E                 mov     ecx, [esi]
.text:00403F10                 mov     [esp+4], edi
.text:00403F14                 mov     edx, [esp+44h]
.text:00403F18                 mov     esi, [esp+24h]
.text:00403F1C                 mov     [esp+10h], ecx
.text:00403F20                 mov     eax, [esp+40h]
.text:00403F24                 mov     [esp+0Ch], edx
.text:00403F28                 mov     [esp], esi
.text:00403F2B                 mov     [esp+8], eax
.text:00403F2F                 call    sub_4032A0
.text:00403F34                 call    _errno
.text:00403F39                 mov     [eax], ebp
.text:00403F3B                 call    _errno
.text:00403F40                 mov     ebx, [esp+28h]
.text:00403F44                 mov     [eax], ebx
.text:00403F46                 mov     eax, [esp+24h]
.text:00403F4A                 add     esp, 2Ch
.text:00403F4D                 pop     ebx
.text:00403F4E                 pop     esi
.text:00403F4F                 pop     edi
.text:00403F50                 pop     ebp
.text:00403F51                 retn
.text:00403F52 ; ---------------------------------------------------------------------------
.text:00403F52
.text:00403F52 loc_403F52:                             ; CODE XREF: .text:00403F01↑j
.text:00403F52                 mov     esi, offset dword_407150
.text:00403F57                 jmp     short loc_403F03
.text:00403F57 ; ---------------------------------------------------------------------------
.text:00403F59                 align 10h
.text:00403F60
.text:00403F60 loc_403F60:                             ; CODE XREF: .text:00403EAA↑j
.text:00403F60                 mov     ebx, offset dword_407150
.text:00403F65                 jmp     loc_403EB0
.text:00403F65 ; ---------------------------------------------------------------------------
.text:00403F6A                 align 10h
.text:00403F70                 sub     esp, 1Ch
.text:00403F73                 mov     edx, [esp+24h]
.text:00403F77                 mov     dword ptr [esp+0Ch], offset dword_407150
.text:00403F7F                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00403F87                 mov     [esp+4], edx
.text:00403F8B                 mov     edx, [esp+20h]
.text:00403F8F                 mov     [esp], edx
.text:00403F92                 call    sub_4043E0
.text:00403F97                 add     esp, 1Ch
.text:00403F9A                 retn
.text:00403F9A ; ---------------------------------------------------------------------------
.text:00403F9B                 align 10h
.text:00403FA0                 sub     esp, 1Ch
.text:00403FA3                 mov     edx, [esp+20h]
.text:00403FA7                 mov     dword ptr [esp+0Ch], offset dword_407150
.text:00403FAF                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00403FB7                 mov     [esp+4], edx
.text:00403FBB                 mov     dword ptr [esp], 0
.text:00403FC2                 call    sub_4043E0
.text:00403FC7                 add     esp, 1Ch
.text:00403FCA                 retn
.text:00403FCA ; ---------------------------------------------------------------------------
.text:00403FCB                 align 10h
.text:00403FD0                 push    ebp
.text:00403FD1                 xor     eax, eax
.text:00403FD3                 mov     ecx, 8
.text:00403FD8                 push    edi
.text:00403FD9                 push    esi
.text:00403FDA                 push    ebx
.text:00403FDB                 sub     esp, 0ACh
.text:00403FE1                 mov     ebp, [esp+0C4h]
.text:00403FE8                 cld
.text:00403FE9                 lea     edi, [esp+14h]
.text:00403FED                 mov     [esp+10h], ebp
.text:00403FF1                 rep stosd
.text:00403FF3                 mov     eax, [esp+30h]
.text:00403FF7                 mov     edi, [esp+10h]
.text:00403FFB                 mov     esi, [esp+14h]
.text:00403FFF                 mov     [esp+60h], eax
.text:00404003                 mov     ebp, [esp+18h]
.text:00404007                 mov     eax, [esp+10h]
.text:0040400B                 mov     [esp+40h], edi
.text:0040400F                 mov     ecx, [esp+28h]
.text:00404013                 mov     edi, [esp+1Ch]
.text:00404017                 mov     [esp+44h], esi
.text:0040401B                 mov     edx, [esp+2Ch]
.text:0040401F                 mov     esi, [esp+20h]
.text:00404023                 mov     [esp+70h], eax
.text:00404027                 mov     ebx, [esp+24h]
.text:0040402B                 mov     eax, [esp+14h]
.text:0040402F                 mov     [esp+48h], ebp
.text:00404033                 mov     [esp+4Ch], edi
.text:00404037                 mov     [esp+50h], esi
.text:0040403B                 mov     [esp+54h], ebx
.text:0040403F                 mov     [esp+58h], ecx
.text:00404043                 mov     [esp+5Ch], edx
.text:00404047                 mov     [esp+74h], eax
.text:0040404B                 mov     [esp+78h], ebp
.text:0040404F                 mov     [esp+7Ch], edi
.text:00404053                 mov     [esp+80h], esi
.text:0040405A                 mov     [esp+84h], ebx
.text:00404061                 mov     ebx, [esp+30h]
.text:00404065                 mov     [esp+8Ch], edx
.text:0040406C                 mov     edx, [esp+0C8h]
.text:00404073                 mov     [esp+88h], ecx
.text:0040407A                 lea     ecx, [esp+70h]
.text:0040407E                 mov     [esp+4], edx
.text:00404082                 mov     edx, [esp+0C0h]
.text:00404089                 mov     [esp+90h], ebx
.text:00404090                 mov     [esp+0Ch], ecx
.text:00404094                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:0040409C                 mov     [esp], edx
.text:0040409F                 call    sub_4043E0
.text:004040A4                 add     esp, 0ACh
.text:004040AA                 pop     ebx
.text:004040AB                 pop     esi
.text:004040AC                 pop     edi
.text:004040AD                 pop     ebp
.text:004040AE                 retn
.text:004040AE ; ---------------------------------------------------------------------------
.text:004040AF                 align 10h
.text:004040B0                 push    ebp
.text:004040B1                 xor     eax, eax
.text:004040B3                 mov     ecx, 8
.text:004040B8                 push    edi
.text:004040B9                 push    esi
.text:004040BA                 push    ebx
.text:004040BB                 sub     esp, 0ACh
.text:004040C1                 mov     edx, [esp+0C4h]
.text:004040C8                 cld
.text:004040C9                 lea     edi, [esp+14h]
.text:004040CD                 mov     [esp+10h], edx
.text:004040D1                 rep stosd
.text:004040D3                 mov     eax, [esp+30h]
.text:004040D7                 mov     ebp, [esp+10h]
.text:004040DB                 mov     edi, [esp+14h]
.text:004040DF                 mov     [esp+60h], eax
.text:004040E3                 mov     esi, [esp+20h]
.text:004040E7                 mov     eax, [esp+10h]
.text:004040EB                 mov     [esp+40h], ebp
.text:004040EF                 mov     ecx, [esp+28h]
.text:004040F3                 mov     ebp, [esp+18h]
.text:004040F7                 mov     [esp+44h], edi
.text:004040FB                 mov     edx, [esp+2Ch]
.text:004040FF                 mov     edi, [esp+1Ch]
.text:00404103                 mov     [esp+70h], eax
.text:00404107                 mov     ebx, [esp+24h]
.text:0040410B                 mov     eax, [esp+14h]
.text:0040410F                 mov     [esp+48h], ebp
.text:00404113                 mov     [esp+4Ch], edi
.text:00404117                 mov     [esp+50h], esi
.text:0040411B                 mov     [esp+54h], ebx
.text:0040411F                 mov     [esp+58h], ecx
.text:00404123                 mov     [esp+5Ch], edx
.text:00404127                 mov     [esp+74h], eax
.text:0040412B                 mov     [esp+78h], ebp
.text:0040412F                 mov     [esp+7Ch], edi
.text:00404133                 mov     [esp+80h], esi
.text:0040413A                 mov     [esp+84h], ebx
.text:00404141                 mov     esi, [esp+30h]
.text:00404145                 lea     ebx, [esp+70h]
.text:00404149                 mov     [esp+8Ch], edx
.text:00404150                 mov     edx, [esp+0C8h]
.text:00404157                 mov     [esp+88h], ecx
.text:0040415E                 mov     ecx, [esp+0CCh]
.text:00404165                 mov     [esp+4], edx
.text:00404169                 mov     edx, [esp+0C0h]
.text:00404170                 mov     [esp+90h], esi
.text:00404177                 mov     [esp+0Ch], ebx
.text:0040417B                 mov     [esp+8], ecx
.text:0040417F                 mov     [esp], edx
.text:00404182                 call    sub_4043E0
.text:00404187                 add     esp, 0ACh
.text:0040418D                 pop     ebx
.text:0040418E                 pop     esi
.text:0040418F                 pop     edi
.text:00404190                 pop     ebp
.text:00404191                 retn
.text:00404191 ; ---------------------------------------------------------------------------
.text:00404192                 align 10h
.text:004041A0                 push    ebp
.text:004041A1                 xor     eax, eax
.text:004041A3                 mov     ecx, 8
.text:004041A8                 push    edi
.text:004041A9                 push    esi
.text:004041AA                 push    ebx
.text:004041AB                 sub     esp, 0ACh
.text:004041B1                 mov     edi, [esp+0C0h]
.text:004041B8                 cld
.text:004041B9                 mov     [esp+10h], edi
.text:004041BD                 lea     edi, [esp+14h]
.text:004041C1                 rep stosd
.text:004041C3                 mov     eax, [esp+30h]
.text:004041C7                 mov     esi, [esp+10h]
.text:004041CB                 mov     ebx, [esp+14h]
.text:004041CF                 mov     [esp+60h], eax
.text:004041D3                 mov     ebp, [esp+18h]
.text:004041D7                 mov     eax, [esp+10h]
.text:004041DB                 mov     [esp+40h], esi
.text:004041DF                 mov     edi, [esp+1Ch]
.text:004041E3                 mov     esi, [esp+20h]
.text:004041E7                 mov     [esp+44h], ebx
.text:004041EB                 mov     ecx, [esp+28h]
.text:004041EF                 mov     edx, [esp+2Ch]
.text:004041F3                 mov     [esp+70h], eax
.text:004041F7                 mov     ebx, [esp+24h]
.text:004041FB                 mov     eax, [esp+14h]
.text:004041FF                 mov     [esp+48h], ebp
.text:00404203                 mov     [esp+4Ch], edi
.text:00404207                 mov     [esp+50h], esi
.text:0040420B                 mov     [esp+54h], ebx
.text:0040420F                 mov     [esp+58h], ecx
.text:00404213                 mov     [esp+5Ch], edx
.text:00404217                 mov     [esp+74h], eax
.text:0040421B                 mov     [esp+78h], ebp
.text:0040421F                 mov     [esp+7Ch], edi
.text:00404223                 mov     [esp+80h], esi
.text:0040422A                 mov     [esp+84h], ebx
.text:00404231                 mov     [esp+8Ch], edx
.text:00404238                 lea     edx, [esp+70h]
.text:0040423C                 mov     [esp+88h], ecx
.text:00404243                 mov     ecx, [esp+30h]
.text:00404247                 mov     [esp+0Ch], edx
.text:0040424B                 mov     edx, [esp+0C4h]
.text:00404252                 mov     [esp+90h], ecx
.text:00404259                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00404261                 mov     [esp+4], edx
.text:00404265                 mov     dword ptr [esp], 0
.text:0040426C                 call    sub_4043E0
.text:00404271                 add     esp, 0ACh
.text:00404277                 pop     ebx
.text:00404278                 pop     esi
.text:00404279                 pop     edi
.text:0040427A                 pop     ebp
.text:0040427B                 retn
.text:0040427B ; ---------------------------------------------------------------------------
.text:0040427C                 align 10h
.text:00404280                 push    edi
.text:00404281                 push    esi
.text:00404282                 push    ebx
.text:00404283                 sub     esp, 40h
.text:00404286                 mov     edx, ds:dword_40715C
.text:0040428C                 mov     ebx, ds:dword_407150
.text:00404292                 mov     esi, ds:dword_407158
.text:00404298                 mov     edi, ds:dword_407154
.text:0040429E                 mov     [esp+1Ch], edx
.text:004042A2                 mov     ecx, ds:dword_407160
.text:004042A8                 mov     edx, ds:dword_407170
.text:004042AE                 mov     [esp+10h], ebx
.text:004042B2                 mov     ebx, ds:dword_407164
.text:004042B8                 mov     [esp+30h], edx
.text:004042BC                 movzx   edx, byte ptr [esp+54h]
.text:004042C1                 mov     [esp+18h], esi
.text:004042C5                 mov     esi, ds:dword_40716C
.text:004042CB                 mov     [esp+14h], edi
.text:004042CF                 mov     edi, ds:dword_407168
.text:004042D5                 mov     [esp+20h], ecx
.text:004042D9                 mov     cl, dl
.text:004042DB                 shr     cl, 5
.text:004042DE                 mov     [esp+24h], ebx
.text:004042E2                 movzx   ebx, cl
.text:004042E5                 mov     [esp+2Ch], esi
.text:004042E9                 lea     esi, [esp+10h]
.text:004042ED                 mov     [esp+28h], edi
.text:004042F1                 lea     edi, [esi+ebx*4]
.text:004042F4                 mov     ebx, edx
.text:004042F6                 mov     edx, [edi+4]
.text:004042F9                 and     ebx, 1Fh
.text:004042FC                 mov     cl, bl
.text:004042FE                 mov     eax, edx
.text:00404300                 shr     eax, cl
.text:00404302                 and     eax, 1
.text:00404305                 xor     eax, 1
.text:00404308                 shl     eax, cl
.text:0040430A                 xor     edx, eax
.text:0040430C                 mov     [edi+4], edx
.text:0040430F                 mov     edx, [esp+50h]
.text:00404313                 mov     [esp+0Ch], esi
.text:00404317                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:0040431F                 mov     [esp+4], edx
.text:00404323                 mov     dword ptr [esp], 0
.text:0040432A                 call    sub_4043E0
.text:0040432F                 add     esp, 40h
.text:00404332                 pop     ebx
.text:00404333                 pop     esi
.text:00404334                 pop     edi
.text:00404335                 retn
.text:00404335 ; ---------------------------------------------------------------------------
.text:00404336                 align 10h
.text:00404340
.text:00404340 ; =============== S U B R O U T I N E =======================================
.text:00404340
.text:00404340
.text:00404340 ; int __cdecl sub_404340(char *)
.text:00404340 sub_404340      proc near               ; CODE XREF: sub_403130+64↑p
.text:00404340
.text:00404340 var_4C          = dword ptr -4Ch
.text:00404340 var_48          = dword ptr -48h
.text:00404340 var_44          = dword ptr -44h
.text:00404340 var_40          = dword ptr -40h
.text:00404340 var_3C          = dword ptr -3Ch
.text:00404340 var_38          = dword ptr -38h
.text:00404340 var_34          = dword ptr -34h
.text:00404340 var_30          = dword ptr -30h
.text:00404340 var_2C          = dword ptr -2Ch
.text:00404340 var_28          = dword ptr -28h
.text:00404340 var_24          = dword ptr -24h
.text:00404340 var_20          = dword ptr -20h
.text:00404340 var_1C          = dword ptr -1Ch
.text:00404340 arg_0           = dword ptr  4
.text:00404340
.text:00404340                 sub     esp, 4Ch
.text:00404343                 mov     ecx, ds:dword_407150
.text:00404349                 mov     [esp+4Ch+var_44], 0FFFFFFFFh ; int
.text:00404351                 mov     edx, ds:dword_407154
.text:00404357                 mov     [esp+4Ch+var_4C], 0 ; int
.text:0040435E                 mov     [esp+4Ch+var_3C], ecx
.text:00404362                 mov     ecx, ds:dword_40715C
.text:00404368                 mov     [esp+4Ch+var_38], edx
.text:0040436C                 mov     edx, ds:dword_407158
.text:00404372                 mov     [esp+4Ch+var_30], ecx
.text:00404376                 mov     ecx, ds:dword_407160
.text:0040437C                 mov     eax, edx
.text:0040437E                 shr     eax, 1Ah
.text:00404381                 and     eax, 1
.text:00404384                 xor     eax, 1
.text:00404387                 mov     [esp+4Ch+var_2C], ecx
.text:0040438B                 shl     eax, 1Ah
.text:0040438E                 mov     ecx, ds:dword_407164
.text:00404394                 xor     edx, eax
.text:00404396                 mov     [esp+4Ch+var_34], edx
.text:0040439A                 mov     edx, [esp+4Ch+arg_0]
.text:0040439E                 mov     [esp+4Ch+var_28], ecx
.text:004043A2                 mov     ecx, ds:dword_407168
.text:004043A8                 mov     [esp+4Ch+var_48], edx ; char *
.text:004043AC                 mov     [esp+4Ch+var_24], ecx
.text:004043B0                 mov     ecx, ds:dword_40716C
.text:004043B6                 mov     [esp+4Ch+var_20], ecx
.text:004043BA                 mov     ecx, ds:dword_407170
.text:004043C0                 mov     [esp+4Ch+var_1C], ecx
.text:004043C4                 lea     ecx, [esp+4Ch+var_3C]
.text:004043C8                 mov     [esp+4Ch+var_40], ecx ; int
.text:004043CC                 call    sub_4043E0
.text:004043D1                 add     esp, 4Ch
.text:004043D4                 retn
.text:004043D4 sub_404340      endp
.text:004043D4
.text:004043D4 ; ---------------------------------------------------------------------------
.text:004043D5                 align 10h
.text:004043E0
.text:004043E0 ; =============== S U B R O U T I N E =======================================
.text:004043E0
.text:004043E0
.text:004043E0 ; int __cdecl sub_4043E0(int, char *, int, int)
.text:004043E0 sub_4043E0      proc near               ; CODE XREF: .text:00403F92↑p
.text:004043E0                                         ; .text:00403FC2↑p ...
.text:004043E0
.text:004043E0 Block           = dword ptr -2Ch
.text:004043E0 var_28          = dword ptr -28h
.text:004043E0 Str             = dword ptr -24h
.text:004043E0 var_20          = dword ptr -20h
.text:004043E0 var_1C          = dword ptr -1Ch
.text:004043E0 var_18          = dword ptr -18h
.text:004043E0 var_14          = dword ptr -14h
.text:004043E0 arg_0           = dword ptr  4
.text:004043E0 arg_4           = dword ptr  8
.text:004043E0 arg_8           = dword ptr  0Ch
.text:004043E0 arg_C           = dword ptr  10h
.text:004043E0
.text:004043E0                 push    ebp
.text:004043E1                 push    edi
.text:004043E2                 push    esi
.text:004043E3                 push    ebx
.text:004043E4                 sub     esp, 1Ch
.text:004043E7                 call    _errno
.text:004043EC                 mov     edx, [eax]
.text:004043EE                 mov     eax, [esp+2Ch+arg_0]
.text:004043F2                 mov     [esp+2Ch+var_14], edx
.text:004043F6                 test    eax, eax
.text:004043F8                 js      loc_40459A
.text:004043FE                 mov     eax, [esp+2Ch+arg_0]
.text:00404402                 cmp     dword_406040, eax
.text:00404408                 ja      short loc_404480
.text:0040440A                 mov     esi, eax
.text:0040440C                 inc     esi
.text:0040440D                 cmp     esi, 1FFFFFFFh
.text:00404413                 ja      loc_40459F
.text:00404419                 mov     ebx, off_40604C
.text:0040441F                 cmp     ebx, offset dword_406044
.text:00404425                 jz      loc_404571
.text:0040442B
.text:0040442B loc_40442B:                             ; CODE XREF: sub_4043E0+1B5↓j
.text:0040442B                 mov     [esp+2Ch+Block], ebx ; void *
.text:0040442E                 lea     ecx, ds:0[esi*8]
.text:00404435                 mov     ebp, esi
.text:00404437                 mov     [esp+2Ch+var_28], ecx ; size_t
.text:0040443B                 call    sub_404680
.text:00404440                 mov     off_40604C, eax
.text:00404445                 mov     ebx, dword_406040
.text:0040444B                 sub     ebp, ebx
.text:0040444D                 lea     edi, [eax+ebx*8]
.text:00404450                 lea     eax, ds:0[ebp*8]
.text:00404457                 cmp     eax, 7
.text:0040445A                 jbe     short loc_404470
.text:0040445C                 test    edi, 4
.text:00404462                 jz      short loc_404470
.text:00404464                 mov     dword ptr [edi], 0
.text:0040446A                 sub     eax, 4
.text:0040446D                 add     edi, 4
.text:00404470
.text:00404470 loc_404470:                             ; CODE XREF: sub_4043E0+7A↑j
.text:00404470                                         ; sub_4043E0+82↑j
.text:00404470                 cld
.text:00404471                 mov     ecx, eax
.text:00404473                 shr     ecx, 2
.text:00404476                 xor     eax, eax
.text:00404478                 rep stosd
.text:0040447A                 mov     dword_406040, esi
.text:00404480
.text:00404480 loc_404480:                             ; CODE XREF: sub_4043E0+28↑j
.text:00404480                 mov     esi, off_40604C
.text:00404486                 mov     eax, [esp+2Ch+arg_0]
.text:0040448A                 mov     ebp, [esi+eax*8]
.text:0040448D                 mov     edi, [esi+eax*8+4]
.text:00404491                 mov     esi, [esp+2Ch+arg_C]
.text:00404495                 test    esi, esi
.text:00404497                 jz      loc_404567
.text:0040449D
.text:0040449D loc_40449D:                             ; CODE XREF: sub_4043E0+18C↓j
.text:0040449D                 call    _errno
.text:004044A2                 mov     ebx, [eax]
.text:004044A4                 mov     [esp+2Ch+var_18], esi ; int
.text:004044A8                 mov     ecx, [esi]
.text:004044AA                 mov     [esp+2Ch+Block], edi ; int
.text:004044AD                 mov     edx, [esp+2Ch+arg_8]
.text:004044B1                 mov     [esp+2Ch+var_28], ebp ; int
.text:004044B5                 mov     [esp+2Ch+var_1C], ecx ; int
.text:004044B9                 mov     ecx, [esp+2Ch+arg_4]
.text:004044BD                 mov     [esp+2Ch+var_20], edx ; int
.text:004044C1                 mov     [esp+2Ch+Str], ecx ; Str
.text:004044C5                 call    sub_4032A0
.text:004044CA                 mov     esi, eax
.text:004044CC                 call    _errno
.text:004044D1                 mov     [eax], ebx
.text:004044D3                 cmp     ebp, esi
.text:004044D5                 ja      short loc_40454B
.text:004044D7                 lea     ebp, [esi+1]
.text:004044DA                 mov     ebx, off_40604C
.text:004044E0                 cmp     edi, offset unk_407050
.text:004044E6                 mov     esi, [esp+2Ch+arg_0]
.text:004044EA                 mov     [ebx+esi*8], ebp
.text:004044ED                 jz      short loc_4044FD
.text:004044EF                 mov     [esp+2Ch+Block], edi ; Block
.text:004044F2                 call    free
.text:004044F7                 mov     ebx, off_40604C
.text:004044FD
.text:004044FD loc_4044FD:                             ; CODE XREF: sub_4043E0+10D↑j
.text:004044FD                 mov     [esp+2Ch+Block], ebp ; size_t
.text:00404500                 call    sub_4045F0
.text:00404505                 mov     esi, [esp+2Ch+arg_C]
.text:00404509                 mov     edi, eax
.text:0040450B                 mov     eax, [esp+2Ch+arg_0]
.text:0040450F                 test    esi, esi
.text:00404511                 mov     [ebx+eax*8+4], edi
.text:00404515                 jz      short loc_404560
.text:00404517
.text:00404517 loc_404517:                             ; CODE XREF: sub_4043E0+185↓j
.text:00404517                 call    _errno
.text:0040451C                 mov     ebx, [eax]
.text:0040451E                 mov     [esp+2Ch+var_18], esi ; int
.text:00404522                 mov     ecx, [esi]
.text:00404524                 mov     [esp+2Ch+Block], edi ; int
.text:00404527                 mov     edx, [esp+2Ch+arg_8]
.text:0040452B                 mov     [esp+2Ch+var_28], ebp ; int
.text:0040452F                 mov     [esp+2Ch+var_1C], ecx ; int
.text:00404533                 mov     ecx, [esp+2Ch+arg_4]
.text:00404537                 mov     [esp+2Ch+var_20], edx ; int
.text:0040453B                 mov     [esp+2Ch+Str], ecx ; Str
.text:0040453F                 call    sub_4032A0
.text:00404544                 call    _errno
.text:00404549                 mov     [eax], ebx
.text:0040454B
.text:0040454B loc_40454B:                             ; CODE XREF: sub_4043E0+F5↑j
.text:0040454B                 call    _errno
.text:00404550                 mov     ebp, [esp+2Ch+var_14]
.text:00404554                 mov     [eax], ebp
.text:00404556                 add     esp, 1Ch
.text:00404559                 mov     eax, edi
.text:0040455B                 pop     ebx
.text:0040455C                 pop     esi
.text:0040455D                 pop     edi
.text:0040455E                 pop     ebp
.text:0040455F                 retn
.text:00404560 ; ---------------------------------------------------------------------------
.text:00404560
.text:00404560 loc_404560:                             ; CODE XREF: sub_4043E0+135↑j
.text:00404560                 mov     esi, offset dword_407150
.text:00404565                 jmp     short loc_404517
.text:00404567 ; ---------------------------------------------------------------------------
.text:00404567
.text:00404567 loc_404567:                             ; CODE XREF: sub_4043E0+B7↑j
.text:00404567                 mov     esi, offset dword_407150
.text:0040456C                 jmp     loc_40449D
.text:00404571 ; ---------------------------------------------------------------------------
.text:00404571
.text:00404571 loc_404571:                             ; CODE XREF: sub_4043E0+45↑j
.text:00404571                 mov     [esp+2Ch+Block], 8 ; size_t
.text:00404578                 call    sub_4045F0
.text:0040457D                 mov     off_40604C, eax
.text:00404582                 mov     edi, dword_406044
.text:00404588                 mov     ebx, eax
.text:0040458A                 mov     ecx, off_406048
.text:00404590                 mov     [eax], edi
.text:00404592                 mov     [eax+4], ecx
.text:00404595                 jmp     loc_40442B
.text:0040459A ; ---------------------------------------------------------------------------
.text:0040459A
.text:0040459A loc_40459A:                             ; CODE XREF: sub_4043E0+18↑j
.text:0040459A                 call    abort
.text:0040459F ; ---------------------------------------------------------------------------
.text:0040459F
.text:0040459F loc_40459F:                             ; CODE XREF: sub_4043E0+33↑j
.text:0040459F                 call    sub_4048A0
.text:0040459F sub_4043E0      endp
.text:0040459F
.text:0040459F ; ---------------------------------------------------------------------------
.text:004045A4                 align 10h
.text:004045B0
.text:004045B0 ; =============== S U B R O U T I N E =======================================
.text:004045B0
.text:004045B0
.text:004045B0 sub_4045B0      proc near
.text:004045B0
.text:004045B0 Size            = dword ptr -0Ch
.text:004045B0 var_4           = dword ptr -4
.text:004045B0 arg_0           = dword ptr  4
.text:004045B0 arg_4           = dword ptr  8
.text:004045B0
.text:004045B0                 sub     esp, 0Ch
.text:004045B3                 xor     edx, edx
.text:004045B5                 mov     ecx, [esp+0Ch+arg_4]
.text:004045B9                 mov     [esp+0Ch+var_4], ebx
.text:004045BD                 mov     eax, 0FFFFFFFFh
.text:004045C2                 mov     ebx, [esp+0Ch+arg_0]
.text:004045C6                 div     ecx
.text:004045C8                 cmp     eax, ebx
.text:004045CA                 jb      short loc_4045E9
.text:004045CC                 mov     edx, ebx
.text:004045CE                 imul    edx, ecx
.text:004045D1                 mov     [esp+0Ch+Size], edx ; Size
.text:004045D4                 call    malloc
.text:004045D9                 test    eax, eax
.text:004045DB                 jz      short loc_4045E5
.text:004045DD
.text:004045DD loc_4045DD:                             ; CODE XREF: sub_4045B0+37↓j
.text:004045DD                 mov     ebx, [esp+0Ch+var_4]
.text:004045E1                 add     esp, 0Ch
.text:004045E4                 retn
.text:004045E5 ; ---------------------------------------------------------------------------
.text:004045E5
.text:004045E5 loc_4045E5:                             ; CODE XREF: sub_4045B0+2B↑j
.text:004045E5                 test    ebx, ebx
.text:004045E7                 jz      short loc_4045DD
.text:004045E9
.text:004045E9 loc_4045E9:                             ; CODE XREF: sub_4045B0+1A↑j
.text:004045E9                 call    sub_4048A0
.text:004045E9 sub_4045B0      endp
.text:004045E9
.text:004045E9 ; ---------------------------------------------------------------------------
.text:004045EE                 align 10h
.text:004045F0
.text:004045F0 ; =============== S U B R O U T I N E =======================================
.text:004045F0
.text:004045F0
.text:004045F0 ; int __cdecl sub_4045F0(size_t)
.text:004045F0 sub_4045F0      proc near               ; CODE XREF: .text:00403D19↑p
.text:004045F0                                         ; .text:00403EF6↑p ...
.text:004045F0
.text:004045F0 Size            = dword ptr -0Ch
.text:004045F0 var_4           = dword ptr -4
.text:004045F0 arg_0           = dword ptr  4
.text:004045F0
.text:004045F0                 sub     esp, 0Ch
.text:004045F3                 mov     [esp+0Ch+var_4], ebx
.text:004045F7                 mov     ebx, [esp+0Ch+arg_0]
.text:004045FB                 mov     [esp+0Ch+Size], ebx ; Size
.text:004045FE                 call    malloc
.text:00404603                 test    eax, eax
.text:00404605                 jz      short loc_404610
.text:00404607
.text:00404607 loc_404607:                             ; CODE XREF: sub_4045F0+22↓j
.text:00404607                 mov     ebx, [esp+0Ch+var_4]
.text:0040460B                 add     esp, 0Ch
.text:0040460E                 retn
.text:0040460E ; ---------------------------------------------------------------------------
.text:0040460F                 align 10h
.text:00404610
.text:00404610 loc_404610:                             ; CODE XREF: sub_4045F0+15↑j
.text:00404610                 test    ebx, ebx
.text:00404612                 jz      short loc_404607
.text:00404614                 call    sub_4048A0
.text:00404614 sub_4045F0      endp
.text:00404614
.text:00404614 ; ---------------------------------------------------------------------------
.text:00404619                 align 10h
.text:00404620                 sub     esp, 1Ch
.text:00404623                 xor     edx, edx
.text:00404625                 mov     eax, 0FFFFFFFFh
.text:0040462A                 mov     [esp+14h], ebx
.text:0040462E                 mov     ecx, [esp+20h]
.text:00404632                 mov     ebx, [esp+28h]
.text:00404636                 mov     [esp+18h], esi
.text:0040463A                 mov     esi, [esp+24h]
.text:0040463E                 div     ebx
.text:00404640                 cmp     eax, esi
.text:00404642                 jb      short loc_404674
.text:00404644                 mov     [esp], ecx
.text:00404647                 mov     edx, esi
.text:00404649                 imul    edx, ebx
.text:0040464C                 mov     [esp+4], edx
.text:00404650                 call    realloc
.text:00404655                 test    eax, eax
.text:00404657                 mov     ecx, eax
.text:00404659                 jz      short loc_404670
.text:0040465B
.text:0040465B loc_40465B:                             ; CODE XREF: .text:00404672↓j
.text:0040465B                 mov     ebx, [esp+14h]
.text:0040465F                 mov     eax, ecx
.text:00404661                 mov     esi, [esp+18h]
.text:00404665                 add     esp, 1Ch
.text:00404668                 retn
.text:00404668 ; ---------------------------------------------------------------------------
.text:00404669                 align 10h
.text:00404670
.text:00404670 loc_404670:                             ; CODE XREF: .text:00404659↑j
.text:00404670                 test    esi, esi
.text:00404672                 jz      short loc_40465B
.text:00404674
.text:00404674 loc_404674:                             ; CODE XREF: .text:00404642↑j
.text:00404674                 call    sub_4048A0
.text:00404674 ; ---------------------------------------------------------------------------
.text:00404679                 align 10h
.text:00404680
.text:00404680 ; =============== S U B R O U T I N E =======================================
.text:00404680
.text:00404680
.text:00404680 ; int __cdecl sub_404680(void *, size_t)
.text:00404680 sub_404680      proc near               ; CODE XREF: sub_4043E0+5B↑p
.text:00404680
.text:00404680 Block           = dword ptr -0Ch
.text:00404680 Size            = dword ptr -8
.text:00404680 var_4           = dword ptr -4
.text:00404680 arg_0           = dword ptr  4
.text:00404680 arg_4           = dword ptr  8
.text:00404680
.text:00404680                 sub     esp, 0Ch
.text:00404683                 mov     edx, [esp+0Ch+arg_0]
.text:00404687                 mov     [esp+0Ch+var_4], ebx
.text:0040468B                 mov     ebx, [esp+0Ch+arg_4]
.text:0040468F                 mov     [esp+0Ch+Block], edx ; Block
.text:00404692                 mov     [esp+0Ch+Size], ebx ; Size
.text:00404696                 call    realloc
.text:0040469B                 test    eax, eax
.text:0040469D                 jz      short loc_4046A7
.text:0040469F
.text:0040469F loc_40469F:                             ; CODE XREF: sub_404680+29↓j
.text:0040469F                 mov     ebx, [esp+0Ch+var_4]
.text:004046A3                 add     esp, 0Ch
.text:004046A6                 retn
.text:004046A7 ; ---------------------------------------------------------------------------
.text:004046A7
.text:004046A7 loc_4046A7:                             ; CODE XREF: sub_404680+1D↑j
.text:004046A7                 test    ebx, ebx
.text:004046A9                 jz      short loc_40469F
.text:004046AB                 call    sub_4048A0
.text:004046AB sub_404680      endp
.text:004046AB
.text:004046B0 ; ---------------------------------------------------------------------------
.text:004046B0                 jmp     sub_404800
.text:004046B0 ; ---------------------------------------------------------------------------
.text:004046B5                 align 10h
.text:004046C0                 sub     esp, 0Ch
.text:004046C3                 mov     edx, [esp+14h]
.text:004046C7                 mov     dword ptr [esp+8], 1
.text:004046CF                 mov     [esp+4], edx
.text:004046D3                 mov     edx, [esp+10h]
.text:004046D7                 mov     [esp], edx
.text:004046DA                 call    sub_404800
.text:004046DF                 add     esp, 0Ch
.text:004046E2                 retn
.text:004046E2 ; ---------------------------------------------------------------------------
.text:004046E3                 align 10h
.text:004046F0                 sub     esp, 1Ch
.text:004046F3                 mov     [esp+18h], ebx
.text:004046F7                 mov     ebx, [esp+20h]
.text:004046FB                 mov     [esp], ebx
.text:004046FE                 call    malloc
.text:00404703                 test    eax, eax
.text:00404705                 jz      short loc_404723
.text:00404707
.text:00404707 loc_404707:                             ; CODE XREF: .text:00404725↓j
.text:00404707                 mov     [esp+8], ebx
.text:0040470B                 mov     dword ptr [esp+4], 0
.text:00404713                 mov     [esp], eax
.text:00404716                 call    memset
.text:0040471B                 mov     ebx, [esp+18h]
.text:0040471F                 add     esp, 1Ch
.text:00404722                 retn
.text:00404723 ; ---------------------------------------------------------------------------
.text:00404723
.text:00404723 loc_404723:                             ; CODE XREF: .text:00404705↑j
.text:00404723                 test    ebx, ebx
.text:00404725                 jz      short loc_404707
.text:00404727                 call    sub_4048A0
.text:00404727 ; ---------------------------------------------------------------------------
.text:0040472C                 align 10h
.text:00404730                 sub     esp, 0Ch
.text:00404733                 xor     edx, edx
.text:00404735                 mov     ecx, [esp+14h]
.text:00404739                 mov     [esp+8], ebx
.text:0040473D                 mov     eax, 0FFFFFFFFh
.text:00404742                 mov     ebx, [esp+10h]
.text:00404746                 div     ecx
.text:00404748                 cmp     eax, ebx
.text:0040474A                 jb      short loc_404768
.text:0040474C                 mov     [esp+4], ecx
.text:00404750                 mov     [esp], ebx
.text:00404753                 call    calloc
.text:00404758                 test    eax, eax
.text:0040475A                 jz      short loc_404764
.text:0040475C
.text:0040475C loc_40475C:                             ; CODE XREF: .text:00404766↓j
.text:0040475C                 mov     ebx, [esp+8]
.text:00404760                 add     esp, 0Ch
.text:00404763                 retn
.text:00404764 ; ---------------------------------------------------------------------------
.text:00404764
.text:00404764 loc_404764:                             ; CODE XREF: .text:0040475A↑j
.text:00404764                 test    ebx, ebx
.text:00404766                 jz      short loc_40475C
.text:00404768
.text:00404768 loc_404768:                             ; CODE XREF: .text:0040474A↑j
.text:00404768                 call    sub_4048A0
.text:00404768 ; ---------------------------------------------------------------------------
.text:0040476D                 align 10h
.text:00404770                 sub     esp, 1Ch
.text:00404773                 mov     [esp+18h], ebx
.text:00404777                 mov     ebx, [esp+24h]
.text:0040477B                 mov     [esp], ebx
.text:0040477E                 call    malloc
.text:00404783                 test    eax, eax
.text:00404785                 mov     edx, eax
.text:00404787                 jz      short loc_4047A5
.text:00404789
.text:00404789 loc_404789:                             ; CODE XREF: .text:004047A7↓j
.text:00404789                 mov     [esp+8], ebx
.text:0040478D                 mov     ecx, [esp+20h]
.text:00404791                 mov     [esp], edx
.text:00404794                 mov     [esp+4], ecx
.text:00404798                 call    memcpy
.text:0040479D                 mov     ebx, [esp+18h]
.text:004047A1                 add     esp, 1Ch
.text:004047A4                 retn
.text:004047A5 ; ---------------------------------------------------------------------------
.text:004047A5
.text:004047A5 loc_4047A5:                             ; CODE XREF: .text:00404787↑j
.text:004047A5                 test    ebx, ebx
.text:004047A7                 jz      short loc_404789
.text:004047A9                 call    sub_4048A0
.text:004047A9 ; ---------------------------------------------------------------------------
.text:004047AE                 align 10h
.text:004047B0                 sub     esp, 1Ch
.text:004047B3                 mov     [esp+18h], esi
.text:004047B7                 mov     esi, [esp+20h]
.text:004047BB                 mov     [esp+14h], ebx
.text:004047BF                 mov     [esp], esi
.text:004047C2                 call    strlen
.text:004047C7                 lea     ebx, [eax+1]
.text:004047CA                 mov     [esp], ebx
.text:004047CD                 call    malloc
.text:004047D2                 test    eax, eax
.text:004047D4                 jz      short loc_4047F2
.text:004047D6
.text:004047D6 loc_4047D6:                             ; CODE XREF: .text:004047F4↓j
.text:004047D6                 mov     [esp+8], ebx
.text:004047DA                 mov     [esp+4], esi
.text:004047DE                 mov     [esp], eax
.text:004047E1                 call    memcpy
.text:004047E6                 mov     ebx, [esp+14h]
.text:004047EA                 mov     esi, [esp+18h]
.text:004047EE                 add     esp, 1Ch
.text:004047F1                 retn
.text:004047F2 ; ---------------------------------------------------------------------------
.text:004047F2
.text:004047F2 loc_4047F2:                             ; CODE XREF: .text:004047D4↑j
.text:004047F2                 test    ebx, ebx
.text:004047F4                 jz      short loc_4047D6
.text:004047F6                 call    sub_4048A0
.text:004047F6 ; ---------------------------------------------------------------------------
.text:004047FB                 align 10h
.text:00404800
.text:00404800 ; =============== S U B R O U T I N E =======================================
.text:00404800
.text:00404800
.text:00404800 ; int __cdecl sub_404800(void *, int, int)
.text:00404800 sub_404800      proc near               ; CODE XREF: .text:004046B0↑j
.text:00404800                                         ; .text:004046DA↑p
.text:00404800
.text:00404800 Block           = dword ptr -1Ch
.text:00404800 Size            = dword ptr -18h
.text:00404800 var_C           = dword ptr -0Ch
.text:00404800 var_8           = dword ptr -8
.text:00404800 var_4           = dword ptr -4
.text:00404800 arg_0           = dword ptr  4
.text:00404800 arg_4           = dword ptr  8
.text:00404800 arg_8           = dword ptr  0Ch
.text:00404800
.text:00404800                 sub     esp, 1Ch
.text:00404803                 mov     [esp+1Ch+var_8], esi
.text:00404807                 mov     esi, [esp+1Ch+arg_0]
.text:0040480B                 mov     [esp+1Ch+var_4], edi
.text:0040480F                 mov     edi, [esp+1Ch+arg_4]
.text:00404813                 test    esi, esi
.text:00404815                 mov     [esp+1Ch+var_C], ebx
.text:00404819                 mov     ecx, [edi]
.text:0040481B                 mov     ebx, [esp+1Ch+arg_8]
.text:0040481F                 jz      short loc_404860
.text:00404821                 xor     edx, edx
.text:00404823                 mov     eax, 7FFFFFFFh
.text:00404828                 div     ebx
.text:0040482A                 cmp     eax, ecx
.text:0040482C                 jb      short loc_404859
.text:0040482E                 add     ecx, ecx
.text:00404830
.text:00404830 loc_404830:                             ; CODE XREF: sub_404800+62↓j
.text:00404830                                         ; sub_404800+71↓j ...
.text:00404830                 mov     [edi], ecx
.text:00404832                 imul    ebx, ecx
.text:00404835                 mov     [esp+1Ch+Block], esi ; Block
.text:00404838                 mov     [esp+1Ch+Size], ebx ; Size
.text:0040483C                 call    realloc
.text:00404841                 test    eax, eax
.text:00404843                 jz      short loc_404855
.text:00404845
.text:00404845 loc_404845:                             ; CODE XREF: sub_404800+57↓j
.text:00404845                 mov     ebx, [esp+1Ch+var_C]
.text:00404849                 mov     esi, [esp+1Ch+var_8]
.text:0040484D                 mov     edi, [esp+1Ch+var_4]
.text:00404851                 add     esp, 1Ch
.text:00404854                 retn
.text:00404855 ; ---------------------------------------------------------------------------
.text:00404855
.text:00404855 loc_404855:                             ; CODE XREF: sub_404800+43↑j
.text:00404855                 test    ebx, ebx
.text:00404857                 jz      short loc_404845
.text:00404859
.text:00404859 loc_404859:                             ; CODE XREF: sub_404800+2C↑j
.text:00404859                 call    sub_4048A0
.text:00404859 ; ---------------------------------------------------------------------------
.text:0040485E                 align 10h
.text:00404860
.text:00404860 loc_404860:                             ; CODE XREF: sub_404800+1F↑j
.text:00404860                 test    ecx, ecx
.text:00404862                 jnz     short loc_404830
.text:00404864                 xor     edx, edx
.text:00404866                 mov     eax, 40h ; '@'
.text:0040486B                 div     ebx
.text:0040486D                 test    eax, eax
.text:0040486F                 mov     ecx, eax
.text:00404871                 jnz     short loc_404830
.text:00404873                 mov     ecx, 1
.text:00404878                 jmp     short loc_404830
.text:00404878 sub_404800      endp
.text:00404878
.text:00404878 ; ---------------------------------------------------------------------------
.text:0040487A                 align 10h
.text:00404880 aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: sub_4048A0+3↓o
.text:00404891 ; const char aS_3[]
.text:00404891 aS_3            db '%s',0               ; DATA XREF: sub_4048A0+10↓o
.text:00404894                 align 10h
.text:004048A0
.text:004048A0 ; =============== S U B R O U T I N E =======================================
.text:004048A0
.text:004048A0 ; Attributes: noreturn
.text:004048A0
.text:004048A0 sub_4048A0      proc near               ; CODE XREF: sub_4043E0:loc_40459F↑p
.text:004048A0                                         ; sub_4045B0:loc_4045E9↑p ...
.text:004048A0
.text:004048A0 Code            = dword ptr -1Ch
.text:004048A0 ErrorMessage    = dword ptr -18h
.text:004048A0 var_14          = dword ptr -14h
.text:004048A0 var_10          = byte ptr -10h
.text:004048A0
.text:004048A0                 sub     esp, 1Ch
.text:004048A3                 mov     [esp+1Ch+Code], offset aMemoryExhauste ; "memory exhausted"
.text:004048AA                 call    ds:libintl_gettext
.text:004048B0                 mov     [esp+1Ch+var_14], offset aS_3 ; "%s"
.text:004048B8                 mov     edx, Code
.text:004048BE                 mov     [esp+1Ch+ErrorMessage], 0 ; ErrorMessage
.text:004048C6                 mov     dword ptr [esp+1Ch+var_10], eax ; char
.text:004048CA                 mov     [esp+1Ch+Code], edx ; Code
.text:004048CD                 call    sub_404930
.text:004048D2                 call    abort
.text:004048D2 sub_4048A0      endp
.text:004048D2
.text:004048D2 ; ---------------------------------------------------------------------------
.text:004048D7                 align 10h
.text:004048E0
.text:004048E0 ; =============== S U B R O U T I N E =======================================
.text:004048E0
.text:004048E0 ; Attributes: thunk
.text:004048E0
.text:004048E0 libintl_bindtextdomain proc near
.text:004048E0                 jmp     ds:__imp_libintl_bindtextdomain
.text:004048E0 libintl_bindtextdomain endp
.text:004048E0
.text:004048E0 ; ---------------------------------------------------------------------------
.text:004048E6                 align 10h
.text:004048F0                 jmp     ds:libintl_textdomain
.text:004048F0 ; ---------------------------------------------------------------------------
.text:004048F6                 align 10h
.text:00404900                 jmp     ds:libintl_gettext
.text:00404900 ; ---------------------------------------------------------------------------
.text:00404906                 align 10h
.text:00404910 ; const char aS_0[]
.text:00404910 aS_0            db ': %s',0             ; DATA XREF: sub_404930+B8↓o
.text:00404910                                         ; sub_404A34+122↓o
.text:00404915 aUnknownSystemE db 'Unknown system error',0
.text:00404915                                         ; DATA XREF: sub_404930:loc_4049FD↓o
.text:00404915                                         ; sub_404A34:loc_404B6E↓o
.text:0040492A ; const char aS_1[]
.text:0040492A aS_1            db '%s: ',0             ; DATA XREF: sub_404930:loc_404A04↓o
.text:0040492F                 align 10h
.text:00404930
.text:00404930 ; =============== S U B R O U T I N E =======================================
.text:00404930
.text:00404930
.text:00404930 ; int __cdecl sub_404930(int Code, int ErrorMessage, char *, char)
.text:00404930 sub_404930      proc near               ; CODE XREF: sub_4015C0+3AB↑p
.text:00404930                                         ; sub_403130+86↑p ...
.text:00404930
.text:00404930 Stream          = dword ptr -1Ch
.text:00404930 Format          = dword ptr -18h
.text:00404930 ArgList         = dword ptr -14h
.text:00404930 Code            = dword ptr  4
.text:00404930 ErrorMessage    = dword ptr  8
.text:00404930 arg_8           = dword ptr  0Ch
.text:00404930 arg_C           = byte ptr  10h
.text:00404930
.text:00404930                 push    esi
.text:00404931                 push    ebx
.text:00404932                 sub     esp, 14h
.text:00404935                 mov     edx, ds:_iob
.text:0040493B                 mov     esi, [esp+1Ch+Code]
.text:0040493F                 mov     ebx, [esp+1Ch+ErrorMessage]
.text:00404943                 add     edx, 20h ; ' '
.text:00404946                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00404949                 call    fflush
.text:0040494E                 mov     eax, ds:dword_4071D0
.text:00404953                 test    eax, eax
.text:00404955                 jz      loc_404A04
.text:0040495B                 call    eax ; dword_4071D0
.text:0040495D
.text:0040495D loc_40495D:                             ; CODE XREF: sub_404930+F7↓j
.text:0040495D                 lea     edx, [esp+1Ch+arg_C]
.text:00404961                 mov     ecx, [esp+1Ch+arg_8]
.text:00404965                 mov     [esp+1Ch+ArgList], edx ; ArgList
.text:00404969                 mov     edx, ds:_iob
.text:0040496F                 mov     [esp+1Ch+Format], ecx ; Format
.text:00404973                 add     edx, 40h ; '@'
.text:00404976                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00404979                 call    vfprintf
.text:0040497E                 inc     ds:dword_4071E0
.text:00404984                 test    ebx, ebx
.text:00404986                 jnz     short loc_4049D2
.text:00404988
.text:00404988 loc_404988:                             ; CODE XREF: sub_404930+CB↓j
.text:00404988                 mov     edx, ds:_iob
.text:0040498E                 lea     ecx, [edx+40h]
.text:00404991                 mov     ebx, [ecx+4]
.text:00404994                 dec     ebx
.text:00404995                 test    ebx, ebx
.text:00404997                 mov     [ecx+4], ebx
.text:0040499A                 js      short loc_4049C0
.text:0040499C                 mov     ecx, [edx+40h]
.text:0040499F                 mov     byte ptr [ecx], 0Ah
.text:004049A2                 inc     dword ptr [edx+40h]
.text:004049A5
.text:004049A5 loc_4049A5:                             ; CODE XREF: sub_404930+A0↓j
.text:004049A5                 mov     edx, ds:_iob
.text:004049AB                 add     edx, 40h ; '@'
.text:004049AE                 mov     [esp+1Ch+Stream], edx ; Stream
.text:004049B1                 call    fflush
.text:004049B6                 test    esi, esi
.text:004049B8                 jnz     short loc_404A2C
.text:004049BA                 add     esp, 14h
.text:004049BD                 pop     ebx
.text:004049BE                 pop     esi
.text:004049BF                 retn
.text:004049C0 ; ---------------------------------------------------------------------------
.text:004049C0
.text:004049C0 loc_4049C0:                             ; CODE XREF: sub_404930+6A↑j
.text:004049C0                 mov     [esp+1Ch+Format], ecx ; File
.text:004049C4                 mov     [esp+1Ch+Stream], 0Ah ; Ch
.text:004049CB                 call    _flsbuf
.text:004049D0                 jmp     short loc_4049A5
.text:004049D2 ; ---------------------------------------------------------------------------
.text:004049D2
.text:004049D2 loc_4049D2:                             ; CODE XREF: sub_404930+56↑j
.text:004049D2                 mov     [esp+1Ch+Stream], ebx ; ErrorMessage
.text:004049D5                 call    strerror
.text:004049DA                 test    eax, eax
.text:004049DC                 jz      short loc_4049FD
.text:004049DE
.text:004049DE loc_4049DE:                             ; CODE XREF: sub_404930+D2↓j
.text:004049DE                 mov     [esp+1Ch+ArgList], eax
.text:004049E2                 mov     ebx, ds:_iob
.text:004049E8                 mov     [esp+1Ch+Format], offset aS_0 ; ": %s"
.text:004049F0                 add     ebx, 40h ; '@'
.text:004049F3                 mov     [esp+1Ch+Stream], ebx ; Stream
.text:004049F6                 call    fprintf
.text:004049FB                 jmp     short loc_404988
.text:004049FD ; ---------------------------------------------------------------------------
.text:004049FD
.text:004049FD loc_4049FD:                             ; CODE XREF: sub_404930+AC↑j
.text:004049FD                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:00404A02                 jmp     short loc_4049DE
.text:00404A04 ; ---------------------------------------------------------------------------
.text:00404A04
.text:00404A04 loc_404A04:                             ; CODE XREF: sub_404930+25↑j
.text:00404A04                 mov     [esp+1Ch+Format], offset aS_1 ; "%s: "
.text:00404A0C                 mov     edx, ds:_iob
.text:00404A12                 mov     ecx, ds:dword_4071A0
.text:00404A18                 add     edx, 40h ; '@'
.text:00404A1B                 mov     [esp+1Ch+ArgList], ecx
.text:00404A1F                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00404A22                 call    fprintf
.text:00404A27                 jmp     loc_40495D
.text:00404A2C ; ---------------------------------------------------------------------------
.text:00404A2C
.text:00404A2C loc_404A2C:                             ; CODE XREF: sub_404930+88↑j
.text:00404A2C                 mov     [esp+1Ch+Stream], esi ; Code
.text:00404A2F                 call    exit
.text:00404A2F sub_404930      endp
.text:00404A2F
.text:00404A34
.text:00404A34 ; =============== S U B R O U T I N E =======================================
.text:00404A34
.text:00404A34
.text:00404A34 ; int __cdecl sub_404A34(int, int Code, int ErrorMessage, char *Str2, int, char *, char)
.text:00404A34 sub_404A34      proc near               ; DATA XREF: sub_404A34+77↓o
.text:00404A34
.text:00404A34 Stream          = dword ptr -28h
.text:00404A34 Format          = dword ptr -24h
.text:00404A34 ArgList         = dword ptr -20h
.text:00404A34 var_1C          = dword ptr -1Ch
.text:00404A34 Code            = dword ptr  8
.text:00404A34 ErrorMessage    = dword ptr  0Ch
.text:00404A34 Str2            = dword ptr  10h
.text:00404A34 arg_10          = dword ptr  14h
.text:00404A34 arg_14          = dword ptr  18h
.text:00404A34 arg_18          = byte ptr  1Ch
.text:00404A34
.text:00404A34                 and     eax, 64253A73h
.text:00404A39                 cmp     ah, [eax]
.text:00404A3B
.text:00404A3B loc_404A3B:                             ; DATA XREF: sub_404A34:loc_404B75↓o
.text:00404A3B                 add     ds:55003A73h, ah
.text:00404A41                 push    edi
.text:00404A42                 push    esi
.text:00404A43                 push    ebx
.text:00404A44                 sub     esp, 1Ch
.text:00404A47                 mov     edx, ds:dword_407210
.text:00404A4D                 mov     ebp, [esp+28h+Code]
.text:00404A51                 mov     edi, [esp+28h+ErrorMessage]
.text:00404A55                 test    edx, edx
.text:00404A57                 mov     ebx, [esp+28h+Str2]
.text:00404A5B                 mov     esi, [esp+28h+arg_10]
.text:00404A5F                 jz      short loc_404A79
.text:00404A61                 cmp     ds:dword_407190, esi
.text:00404A67                 jz      loc_404BA0
.text:00404A6D
.text:00404A6D loc_404A6D:                             ; CODE XREF: sub_404A34+18D↓j
.text:00404A6D                 mov     ds:Str1, ebx
.text:00404A73                 mov     ds:dword_407190, esi
.text:00404A79
.text:00404A79 loc_404A79:                             ; CODE XREF: sub_404A34+2B↑j
.text:00404A79                 mov     edx, ds:_iob
.text:00404A7F                 add     edx, 20h ; ' '
.text:00404A82                 mov     [esp+28h+Stream], edx ; Stream
.text:00404A85                 call    fflush
.text:00404A8A                 mov     eax, ds:dword_4071D0
.text:00404A8F                 test    eax, eax
.text:00404A91                 jz      loc_404B75
.text:00404A97                 call    eax ; dword_4071D0
.text:00404A99
.text:00404A99 loc_404A99:                             ; CODE XREF: sub_404A34+164↓j
.text:00404A99                 test    ebx, ebx
.text:00404A9B                 jz      short loc_404ABE
.text:00404A9D                 mov     [esp+28h+ArgList], ebx
.text:00404AA1                 mov     ebx, ds:_iob
.text:00404AA7                 mov     [esp+28h+var_1C], esi
.text:00404AAB                 mov     [esp+28h+Format], offset sub_404A34 ; Format
.text:00404AB3                 add     ebx, 40h ; '@'
.text:00404AB6                 mov     [esp+28h+Stream], ebx ; Stream
.text:00404AB9                 call    fprintf
.text:00404ABE
.text:00404ABE loc_404ABE:                             ; CODE XREF: sub_404A34+67↑j
.text:00404ABE                 mov     esi, ds:_iob
.text:00404AC4                 lea     edx, [esp+28h+arg_18]
.text:00404AC8                 mov     ecx, [esp+28h+arg_14]
.text:00404ACC                 mov     [esp+28h+ArgList], edx ; ArgList
.text:00404AD0                 add     esi, 40h ; '@'
.text:00404AD3                 mov     [esp+28h+Format], ecx ; Format
.text:00404AD7                 mov     [esp+28h+Stream], esi ; Stream
.text:00404ADA                 call    vfprintf
.text:00404ADF                 inc     ds:dword_4071E0
.text:00404AE5                 test    edi, edi
.text:00404AE7                 jnz     short loc_404B40
.text:00404AE9
.text:00404AE9 loc_404AE9:                             ; CODE XREF: sub_404A34+135↓j
.text:00404AE9                 mov     edx, ds:_iob
.text:00404AEF                 lea     ecx, [edx+40h]
.text:00404AF2                 mov     ebx, [ecx+4]
.text:00404AF5                 dec     ebx
.text:00404AF6                 test    ebx, ebx
.text:00404AF8                 mov     [ecx+4], ebx
.text:00404AFB                 js      short loc_404B27
.text:00404AFD                 mov     esi, [edx+40h]
.text:00404B00                 mov     byte ptr [esi], 0Ah
.text:00404B03                 inc     dword ptr [edx+40h]
.text:00404B06
.text:00404B06 loc_404B06:                             ; CODE XREF: sub_404A34+103↓j
.text:00404B06                 mov     ecx, ds:_iob
.text:00404B0C                 add     ecx, 40h ; '@'
.text:00404B0F                 mov     [esp+28h+Stream], ecx ; Stream
.text:00404B12                 call    fflush
.text:00404B17                 test    ebp, ebp
.text:00404B19                 jnz     loc_404BC6
.text:00404B1F
.text:00404B1F loc_404B1F:                             ; CODE XREF: sub_404A34+173↓j
.text:00404B1F                                         ; sub_404A34+187↓j
.text:00404B1F                 add     esp, 1Ch
.text:00404B22                 pop     ebx
.text:00404B23                 pop     esi
.text:00404B24                 pop     edi
.text:00404B25                 pop     ebp
.text:00404B26                 retn
.text:00404B27 ; ---------------------------------------------------------------------------
.text:00404B27
.text:00404B27 loc_404B27:                             ; CODE XREF: sub_404A34+C7↑j
.text:00404B27                 mov     [esp+28h+Format], ecx ; File
.text:00404B2B                 mov     [esp+28h+Stream], 0Ah ; Ch
.text:00404B32                 call    _flsbuf
.text:00404B37                 jmp     short loc_404B06
.text:00404B37 ; ---------------------------------------------------------------------------
.text:00404B39                 align 10h
.text:00404B40
.text:00404B40 loc_404B40:                             ; CODE XREF: sub_404A34+B3↑j
.text:00404B40                 mov     [esp+28h+Stream], edi ; ErrorMessage
.text:00404B43                 call    strerror
.text:00404B48                 test    eax, eax
.text:00404B4A                 jz      short loc_404B6E
.text:00404B4C
.text:00404B4C loc_404B4C:                             ; CODE XREF: sub_404A34+13F↓j
.text:00404B4C                 mov     [esp+28h+ArgList], eax
.text:00404B50                 mov     edi, ds:_iob
.text:00404B56                 mov     [esp+28h+Format], offset aS_0 ; ": %s"
.text:00404B5E                 add     edi, 40h ; '@'
.text:00404B61                 mov     [esp+28h+Stream], edi ; Stream
.text:00404B64                 call    fprintf
.text:00404B69                 jmp     loc_404AE9
.text:00404B6E ; ---------------------------------------------------------------------------
.text:00404B6E
.text:00404B6E loc_404B6E:                             ; CODE XREF: sub_404A34+116↑j
.text:00404B6E                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:00404B73                 jmp     short loc_404B4C
.text:00404B75 ; ---------------------------------------------------------------------------
.text:00404B75
.text:00404B75 loc_404B75:                             ; CODE XREF: sub_404A34+5D↑j
.text:00404B75                 mov     [esp+28h+Format], (offset loc_404A3B+1) ; Format
.text:00404B7D                 mov     ecx, ds:_iob
.text:00404B83                 mov     edx, ds:dword_4071A0
.text:00404B89                 add     ecx, 40h ; '@'
.text:00404B8C                 mov     [esp+28h+ArgList], edx
.text:00404B90                 mov     [esp+28h+Stream], ecx ; Stream
.text:00404B93                 call    fprintf
.text:00404B98                 jmp     loc_404A99
.text:00404B98 ; ---------------------------------------------------------------------------
.text:00404B9D                 align 10h
.text:00404BA0
.text:00404BA0 loc_404BA0:                             ; CODE XREF: sub_404A34+33↑j
.text:00404BA0                 mov     eax, ds:Str1
.text:00404BA5                 cmp     ebx, eax
.text:00404BA7                 jz      loc_404B1F
.text:00404BAD                 mov     [esp+28h+Format], ebx ; Str2
.text:00404BB1                 mov     [esp+28h+Stream], eax ; Str1
.text:00404BB4                 call    strcmp
.text:00404BB9                 test    eax, eax
.text:00404BBB                 jz      loc_404B1F
.text:00404BC1                 jmp     loc_404A6D
.text:00404BC6 ; ---------------------------------------------------------------------------
.text:00404BC6
.text:00404BC6 loc_404BC6:                             ; CODE XREF: sub_404A34+E5↑j
.text:00404BC6                 mov     [esp+28h+Stream], ebp ; Code
.text:00404BC9                 call    exit
.text:00404BC9 sub_404A34      endp ; sp-analysis failed
.text:00404BC9
.text:00404BC9 ; ---------------------------------------------------------------------------
.text:00404BCE                 align 10h
.text:00404BD0
.text:00404BD0 ; =============== S U B R O U T I N E =======================================
.text:00404BD0
.text:00404BD0
.text:00404BD0 ; int __cdecl sub_404BD0(char *EnvString)
.text:00404BD0 sub_404BD0      proc near               ; CODE XREF: sub_4015C0+28A↑p
.text:00404BD0                                         ; sub_4015C0+308↑p
.text:00404BD0
.text:00404BD0 Str             = dword ptr -0Ch
.text:00404BD0 Val             = dword ptr -8
.text:00404BD0 var_4           = dword ptr -4
.text:00404BD0 EnvString       = dword ptr  4
.text:00404BD0
.text:00404BD0                 sub     esp, 0Ch
.text:00404BD3                 mov     [esp+0Ch+var_4], ebx
.text:00404BD7                 mov     ebx, [esp+0Ch+EnvString]
.text:00404BDB                 mov     [esp+0Ch+Val], 3Dh ; '=' ; Val
.text:00404BE3                 mov     [esp+0Ch+Str], ebx ; Str
.text:00404BE6                 call    strchr
.text:00404BEB                 test    eax, eax
.text:00404BED                 jz      short loc_404C00
.text:00404BEF                 mov     [esp+0Ch+EnvString], ebx ; EnvString
.text:00404BF3                 mov     ebx, [esp+0Ch+var_4]
.text:00404BF7                 add     esp, 0Ch
.text:00404BFA                 jmp     _putenv
.text:00404BFA ; ---------------------------------------------------------------------------
.text:00404BFF                 align 10h
.text:00404C00
.text:00404C00 loc_404C00:                             ; CODE XREF: sub_404BD0+1D↑j
.text:00404C00                 mov     [esp+0Ch+Str], ebx ; Source
.text:00404C03                 call    sub_404D10
.text:00404C08                 mov     ebx, [esp+0Ch+var_4]
.text:00404C0C                 xor     eax, eax
.text:00404C0E                 add     esp, 0Ch
.text:00404C11                 retn
.text:00404C11 sub_404BD0      endp
.text:00404C11
.text:00404C11 ; ---------------------------------------------------------------------------
.text:00404C12                 align 10h
.text:00404C20 ; const char Source[2]
.text:00404C20 Source          db '=',0                ; DATA XREF: .text:00404CD2↓o
.text:00404C20                                         ; sub_404D10+72↓o
.text:00404C22                 align 10h
.text:00404C30                 sub     esp, 1Ch
.text:00404C33                 mov     [esp+10h], ebx
.text:00404C37                 mov     ebx, [esp+20h]
.text:00404C3B                 mov     [esp+18h], edi
.text:00404C3F                 mov     edi, [esp+24h]
.text:00404C43                 test    ebx, ebx
.text:00404C45                 mov     [esp+14h], esi
.text:00404C49                 jz      short loc_404C50
.text:00404C4B                 cmp     byte ptr [ebx], 0
.text:00404C4E                 jnz     short loc_404C70
.text:00404C50
.text:00404C50 loc_404C50:                             ; CODE XREF: .text:00404C49↑j
.text:00404C50                                         ; .text:00404C82↓j
.text:00404C50                 call    _errno
.text:00404C55                 mov     dword ptr [eax], 16h
.text:00404C5B                 mov     eax, 0FFFFFFFFh
.text:00404C60
.text:00404C60 loc_404C60:                             ; CODE XREF: .text:00404C9B↓j
.text:00404C60                                         ; .text:00404CC4↓j ...
.text:00404C60                 mov     ebx, [esp+10h]
.text:00404C64                 mov     esi, [esp+14h]
.text:00404C68                 mov     edi, [esp+18h]
.text:00404C6C                 add     esp, 1Ch
.text:00404C6F                 retn
.text:00404C70 ; ---------------------------------------------------------------------------
.text:00404C70
.text:00404C70 loc_404C70:                             ; CODE XREF: .text:00404C4E↑j
.text:00404C70                 mov     dword ptr [esp+4], 3Dh ; '='
.text:00404C78                 mov     [esp], ebx
.text:00404C7B                 call    strchr
.text:00404C80                 test    eax, eax
.text:00404C82                 jnz     short loc_404C50
.text:00404C84                 mov     [esp], ebx
.text:00404C87                 call    getenv
.text:00404C8C                 test    eax, eax
.text:00404C8E                 jz      short loc_404C9D
.text:00404C90                 mov     ecx, [esp+28h]
.text:00404C94                 mov     eax, 0FFFFFFFFh
.text:00404C99                 test    ecx, ecx
.text:00404C9B                 jz      short loc_404C60
.text:00404C9D
.text:00404C9D loc_404C9D:                             ; CODE XREF: .text:00404C8E↑j
.text:00404C9D                 mov     [esp], ebx
.text:00404CA0                 call    strlen
.text:00404CA5                 mov     [esp], edi
.text:00404CA8                 mov     esi, eax
.text:00404CAA                 call    strlen
.text:00404CAF                 lea     edx, [eax+esi+2]
.text:00404CB3                 mov     [esp], edx
.text:00404CB6                 call    malloc
.text:00404CBB                 mov     esi, eax
.text:00404CBD                 test    esi, esi
.text:00404CBF                 mov     eax, 0FFFFFFFFh
.text:00404CC4                 jz      short loc_404C60
.text:00404CC6                 mov     [esp+4], ebx
.text:00404CCA                 mov     [esp], esi
.text:00404CCD                 call    strcpy
.text:00404CD2                 mov     dword ptr [esp+4], offset Source ; "="
.text:00404CDA                 mov     [esp], esi
.text:00404CDD                 call    strcat
.text:00404CE2                 mov     [esp+4], edi
.text:00404CE6                 mov     [esp], esi
.text:00404CE9                 call    strcat
.text:00404CEE                 mov     [esp], esi
.text:00404CF1                 call    _putenv
.text:00404CF6                 mov     [esp], esi
.text:00404CF9                 mov     edi, eax
.text:00404CFB                 call    free
.text:00404D00                 mov     eax, edi
.text:00404D02                 jmp     loc_404C60
.text:00404D02 ; ---------------------------------------------------------------------------
.text:00404D07                 align 10h
.text:00404D10
.text:00404D10 ; =============== S U B R O U T I N E =======================================
.text:00404D10
.text:00404D10
.text:00404D10 ; int __cdecl sub_404D10(char *Source)
.text:00404D10 sub_404D10      proc near               ; CODE XREF: sub_404BD0+33↑p
.text:00404D10
.text:00404D10 Str             = dword ptr -1Ch
.text:00404D10 Val             = dword ptr -18h
.text:00404D10 var_8           = dword ptr -8
.text:00404D10 var_4           = dword ptr -4
.text:00404D10 Source          = dword ptr  4
.text:00404D10
.text:00404D10                 sub     esp, 1Ch
.text:00404D13                 mov     [esp+1Ch+var_8], ebx
.text:00404D17                 mov     ebx, [esp+1Ch+Source]
.text:00404D1B                 mov     [esp+1Ch+var_4], esi
.text:00404D1F                 test    ebx, ebx
.text:00404D21                 jz      short loc_404D28
.text:00404D23                 cmp     byte ptr [ebx], 0
.text:00404D26                 jnz     short loc_404D44
.text:00404D28
.text:00404D28 loc_404D28:                             ; CODE XREF: sub_404D10+11↑j
.text:00404D28                                         ; sub_404D10+46↓j
.text:00404D28                 call    _errno
.text:00404D2D                 mov     dword ptr [eax], 16h
.text:00404D33                 mov     eax, 0FFFFFFFFh
.text:00404D38
.text:00404D38 loc_404D38:                             ; CODE XREF: sub_404D10+64↓j
.text:00404D38                                         ; sub_404D10+96↓j
.text:00404D38                 mov     ebx, [esp+1Ch+var_8]
.text:00404D3C                 mov     esi, [esp+1Ch+var_4]
.text:00404D40                 add     esp, 1Ch
.text:00404D43                 retn
.text:00404D44 ; ---------------------------------------------------------------------------
.text:00404D44
.text:00404D44 loc_404D44:                             ; CODE XREF: sub_404D10+16↑j
.text:00404D44                 mov     [esp+1Ch+Val], 3Dh ; '=' ; Val
.text:00404D4C                 mov     [esp+1Ch+Str], ebx ; Str
.text:00404D4F                 call    strchr
.text:00404D54                 test    eax, eax
.text:00404D56                 jnz     short loc_404D28
.text:00404D58                 mov     [esp+1Ch+Str], ebx ; Str
.text:00404D5B                 call    strlen
.text:00404D60                 add     eax, 2
.text:00404D63                 mov     [esp+1Ch+Str], eax ; Size
.text:00404D66                 call    malloc
.text:00404D6B                 mov     esi, eax
.text:00404D6D                 test    esi, esi
.text:00404D6F                 mov     eax, 0FFFFFFFFh
.text:00404D74                 jz      short loc_404D38
.text:00404D76                 mov     [esp+1Ch+Val], ebx ; Source
.text:00404D7A                 mov     [esp+1Ch+Str], esi ; Destination
.text:00404D7D                 call    strcpy
.text:00404D82                 mov     [esp+1Ch+Val], offset Source ; "="
.text:00404D8A                 mov     [esp+1Ch+Str], esi ; Destination
.text:00404D8D                 call    strcat
.text:00404D92                 mov     [esp+1Ch+Str], esi ; EnvString
.text:00404D95                 call    _putenv
.text:00404D9A                 mov     [esp+1Ch+Str], esi ; Block
.text:00404D9D                 mov     ebx, eax
.text:00404D9F                 call    free
.text:00404DA4                 mov     eax, ebx
.text:00404DA6                 jmp     short loc_404D38
.text:00404DA6 sub_404D10      endp
.text:00404DA6
.text:00404DA6 ; ---------------------------------------------------------------------------
.text:00404DA8                 align 10h
.text:00404DB0                 sub     esp, 0Ch
.text:00404DB3                 call    _errno
.text:00404DB8                 mov     dword ptr [eax], 28h ; '('
.text:00404DBE                 mov     eax, 0FFFFFFFFh
.text:00404DC3                 add     esp, 0Ch
.text:00404DC6                 retn
.text:00404DC6 ; ---------------------------------------------------------------------------
.text:00404DC7                 align 10h
.text:00404DD0                 sub     esp, 0Ch
.text:00404DD3                 call    _errno
.text:00404DD8                 mov     dword ptr [eax], 28h ; '('
.text:00404DDE                 add     esp, 0Ch
.text:00404DE1                 retn
.text:00404DE1 ; ---------------------------------------------------------------------------
.text:00404DE2                 align 10h
.text:00404DF0
.text:00404DF0 ; =============== S U B R O U T I N E =======================================
.text:00404DF0
.text:00404DF0 ; Attributes: thunk
.text:00404DF0
.text:00404DF0 ; size_t __cdecl mbrtowc(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.text:00404DF0 mbrtowc         proc near               ; CODE XREF: sub_4032A0+757↑p
.text:00404DF0
.text:00404DF0 DstCh           = dword ptr  4
.text:00404DF0 SrcCh           = dword ptr  8
.text:00404DF0 SizeInBytes     = dword ptr  0Ch
.text:00404DF0 State           = dword ptr  10h
.text:00404DF0
.text:00404DF0                 jmp     ds:__imp_mbrtowc
.text:00404DF0 mbrtowc         endp
.text:00404DF0
.text:00404DF0 ; ---------------------------------------------------------------------------
.text:00404DF6                 align 10h
.text:00404E00
.text:00404E00 ; =============== S U B R O U T I N E =======================================
.text:00404E00
.text:00404E00 ; Attributes: bp-based frame
.text:00404E00
.text:00404E00 sub_404E00      proc near               ; CODE XREF: sub_401080+C2↑p
.text:00404E00                 push    ebp
.text:00404E01                 mov     ecx, offset unk_407000
.text:00404E06                 cmp     ecx, offset unk_407000
.text:00404E0C                 mov     ebp, esp
.text:00404E0E                 jnb     short loc_404E26
.text:00404E10
.text:00404E10 loc_404E10:                             ; CODE XREF: sub_404E00+24↓j
.text:00404E10                 mov     edx, [ecx+4]
.text:00404E13                 mov     eax, [ecx]
.text:00404E15                 add     ecx, 8
.text:00404E18                 add     [edx+400000h], eax
.text:00404E1E                 cmp     ecx, offset unk_407000
.text:00404E24                 jb      short loc_404E10
.text:00404E26
.text:00404E26 loc_404E26:                             ; CODE XREF: sub_404E00+E↑j
.text:00404E26                 pop     ebp
.text:00404E27                 retn
.text:00404E27 sub_404E00      endp
.text:00404E27
.text:00404E27 ; ---------------------------------------------------------------------------
.text:00404E28                 align 10h
.text:00404E30
.text:00404E30 ; =============== S U B R O U T I N E =======================================
.text:00404E30
.text:00404E30 ; Attributes: bp-based frame
.text:00404E30
.text:00404E30 sub_404E30      proc near               ; CODE XREF: sub_401080+16↑p
.text:00404E30                                         ; TopLevelExceptionFilter+D7↑p
.text:00404E30                 push    ebp
.text:00404E31                 mov     ebp, esp
.text:00404E33                 fninit
.text:00404E35                 pop     ebp
.text:00404E36                 retn
.text:00404E36 sub_404E30      endp
.text:00404E36
.text:00404E36 ; ---------------------------------------------------------------------------
.text:00404E37                 align 10h
.text:00404E40
.text:00404E40 ; =============== S U B R O U T I N E =======================================
.text:00404E40
.text:00404E40 ; Attributes: bp-based frame
.text:00404E40
.text:00404E40 ; void __cdecl sub_404E40()
.text:00404E40 sub_404E40      proc near               ; DATA XREF: .text:loc_404E89↓o
.text:00404E40                                         ; sub_404ED0:loc_404EFE↓o
.text:00404E40                 push    ebp
.text:00404E41                 mov     ebp, esp
.text:00404E43                 sub     esp, 8
.text:00404E46                 mov     eax, off_406084
.text:00404E4B                 mov     edx, [eax]
.text:00404E4D                 test    edx, edx
.text:00404E4F                 jnz     short loc_404E55
.text:00404E51
.text:00404E51 loc_404E51:                             ; CODE XREF: sub_404E40+2C↓j
.text:00404E51                 mov     esp, ebp
.text:00404E53                 pop     ebp
.text:00404E54                 retn
.text:00404E55 ; ---------------------------------------------------------------------------
.text:00404E55
.text:00404E55 loc_404E55:                             ; CODE XREF: sub_404E40+F↑j
.text:00404E55                                         ; sub_404E40+2A↓j
.text:00404E55                 call    dword ptr [eax]
.text:00404E57                 mov     edx, off_406084
.text:00404E5D                 mov     ecx, [edx+4]
.text:00404E60                 lea     eax, [edx+4]
.text:00404E63                 mov     off_406084, eax
.text:00404E68                 test    ecx, ecx
.text:00404E6A                 jnz     short loc_404E55
.text:00404E6C                 jmp     short loc_404E51
.text:00404E6C sub_404E40      endp
.text:00404E6C
.text:00404E6C ; ---------------------------------------------------------------------------
.text:00404E6E                 align 10h
.text:00404E70                 push    ebp
.text:00404E71                 mov     ebp, esp
.text:00404E73                 sub     esp, 8
.text:00404E76                 mov     [ebp-4], ebx
.text:00404E79                 mov     eax, ds:dword_4051E0
.text:00404E7E                 cmp     eax, 0FFFFFFFFh
.text:00404E81                 jz      short loc_404EAC
.text:00404E83
.text:00404E83 loc_404E83:                             ; CODE XREF: .text:00404EB6↓j
.text:00404E83                                         ; .text:00404EC9↓j
.text:00404E83                 test    eax, eax
.text:00404E85                 mov     ebx, eax
.text:00404E87                 jnz     short loc_404EA0
.text:00404E89
.text:00404E89 loc_404E89:                             ; CODE XREF: .text:00404EAA↓j
.text:00404E89                 mov     dword ptr [esp], offset sub_404E40
.text:00404E90                 call    sub_401040
.text:00404E95                 mov     ebx, [ebp-4]
.text:00404E98                 mov     esp, ebp
.text:00404E9A                 pop     ebp
.text:00404E9B                 retn
.text:00404E9B ; ---------------------------------------------------------------------------
.text:00404E9C                 align 10h
.text:00404EA0
.text:00404EA0 loc_404EA0:                             ; CODE XREF: .text:00404E87↑j
.text:00404EA0                                         ; .text:00404EA8↓j
.text:00404EA0                 call    ds:dword_4051E0[ebx*4]
.text:00404EA7                 dec     ebx
.text:00404EA8                 jnz     short loc_404EA0
.text:00404EAA                 jmp     short loc_404E89
.text:00404EAC ; ---------------------------------------------------------------------------
.text:00404EAC
.text:00404EAC loc_404EAC:                             ; CODE XREF: .text:00404E81↑j
.text:00404EAC                 mov     ecx, ds:dword_4051E4
.text:00404EB2                 xor     eax, eax
.text:00404EB4                 test    ecx, ecx
.text:00404EB6                 jz      short loc_404E83
.text:00404EB8                 mov     edx, offset dword_4051E0
.text:00404EBD                 lea     esi, [esi+0]
.text:00404EC0
.text:00404EC0 loc_404EC0:                             ; CODE XREF: .text:00404EC7↓j
.text:00404EC0                 inc     eax
.text:00404EC1                 mov     ecx, [edx+eax*4+4]
.text:00404EC5                 test    ecx, ecx
.text:00404EC7                 jnz     short loc_404EC0
.text:00404EC9                 jmp     short loc_404E83
.text:00404EC9 ; ---------------------------------------------------------------------------
.text:00404ECB                 align 10h
.text:00404ED0
.text:00404ED0 ; =============== S U B R O U T I N E =======================================
.text:00404ED0
.text:00404ED0 ; Attributes: bp-based frame
.text:00404ED0
.text:00404ED0 sub_404ED0      proc near               ; CODE XREF: sub_4015C0+16↑p
.text:00404ED0
.text:00404ED0 var_8           = dword ptr -8
.text:00404ED0 var_4           = dword ptr -4
.text:00404ED0
.text:00404ED0                 push    ebp
.text:00404ED1                 mov     ebp, esp
.text:00404ED3                 sub     esp, 8
.text:00404ED6                 mov     [ebp+var_4], ebx
.text:00404ED9                 mov     edx, dword_406080
.text:00404EDF                 test    edx, edx
.text:00404EE1                 jnz     short loc_404F0A
.text:00404EE3                 mov     eax, ds:dword_4051E0
.text:00404EE8                 mov     edx, 1
.text:00404EED                 mov     dword_406080, edx
.text:00404EF3                 cmp     eax, 0FFFFFFFFh
.text:00404EF6                 jz      short loc_404F1D
.text:00404EF8
.text:00404EF8 loc_404EF8:                             ; CODE XREF: sub_404ED0+57↓j
.text:00404EF8                                         ; sub_404ED0+69↓j
.text:00404EF8                 test    eax, eax
.text:00404EFA                 mov     ebx, eax
.text:00404EFC                 jnz     short loc_404F11
.text:00404EFE
.text:00404EFE loc_404EFE:                             ; CODE XREF: sub_404ED0+4B↓j
.text:00404EFE                 mov     [esp+8+var_8], offset sub_404E40 ; void (__cdecl *)()
.text:00404F05                 call    sub_401040
.text:00404F0A
.text:00404F0A loc_404F0A:                             ; CODE XREF: sub_404ED0+11↑j
.text:00404F0A                 mov     ebx, [ebp+var_4]
.text:00404F0D                 mov     esp, ebp
.text:00404F0F                 pop     ebp
.text:00404F10                 retn
.text:00404F11 ; ---------------------------------------------------------------------------
.text:00404F11
.text:00404F11 loc_404F11:                             ; CODE XREF: sub_404ED0+2C↑j
.text:00404F11                                         ; sub_404ED0+49↓j
.text:00404F11                 call    ds:dword_4051E0[ebx*4]
.text:00404F18                 dec     ebx
.text:00404F19                 jnz     short loc_404F11
.text:00404F1B                 jmp     short loc_404EFE
.text:00404F1D ; ---------------------------------------------------------------------------
.text:00404F1D
.text:00404F1D loc_404F1D:                             ; CODE XREF: sub_404ED0+26↑j
.text:00404F1D                 mov     ecx, ds:dword_4051E4
.text:00404F23                 xor     eax, eax
.text:00404F25                 test    ecx, ecx
.text:00404F27                 jz      short loc_404EF8
.text:00404F29                 mov     edx, offset dword_4051E0
.text:00404F2E                 mov     esi, esi
.text:00404F30
.text:00404F30 loc_404F30:                             ; CODE XREF: sub_404ED0+67↓j
.text:00404F30                 inc     eax
.text:00404F31                 mov     ebx, [edx+eax*4+4]
.text:00404F35                 test    ebx, ebx
.text:00404F37                 jnz     short loc_404F30
.text:00404F39                 jmp     short loc_404EF8
.text:00404F39 sub_404ED0      endp
.text:00404F39
.text:00404F39 ; ---------------------------------------------------------------------------
.text:00404F3B                 align 10h
.text:00404F40
.text:00404F40 ; =============== S U B R O U T I N E =======================================
.text:00404F40
.text:00404F40 ; Attributes: info_from_lumina
.text:00404F40
.text:00404F40 ; void *__cdecl _alloca(size_t Size)
.text:00404F40 __alloca        proc near               ; CODE XREF: sub_4015C0+E↑p
.text:00404F40                 push    ecx
.text:00404F41                 mov     ecx, esp
.text:00404F43                 add     ecx, 8
.text:00404F46
.text:00404F46 loc_404F46:                             ; CODE XREF: __alloca+1B↓j
.text:00404F46                 cmp     eax, 1000h
.text:00404F4B                 jb      short loc_404F5D
.text:00404F4D                 sub     ecx, 1000h
.text:00404F53                 or      dword ptr [ecx], 0
.text:00404F56                 sub     eax, 1000h
.text:00404F5B                 jmp     short loc_404F46
.text:00404F5D ; ---------------------------------------------------------------------------
.text:00404F5D
.text:00404F5D loc_404F5D:                             ; CODE XREF: __alloca+B↑j
.text:00404F5D                 sub     ecx, eax
.text:00404F5F                 or      dword ptr [ecx], 0
.text:00404F62                 mov     eax, esp
.text:00404F64                 mov     esp, ecx
.text:00404F66                 mov     ecx, [eax]
.text:00404F68                 mov     eax, [eax+4]
.text:00404F6B                 jmp     eax
.text:00404F6B __alloca        endp
.text:00404F6B
.text:00404F6B ; ---------------------------------------------------------------------------
.text:00404F6D                 align 10h
.text:00404F70
.text:00404F70 ; =============== S U B R O U T I N E =======================================
.text:00404F70
.text:00404F70 ; Attributes: thunk
.text:00404F70
.text:00404F70 ; intptr_t __cdecl execvp(const char *FileName, const char *const *Arguments)
.text:00404F70 _execvp         proc near               ; CODE XREF: sub_4015C0+36E↑p
.text:00404F70
.text:00404F70 FileName        = dword ptr  4
.text:00404F70 Arguments       = dword ptr  8
.text:00404F70
.text:00404F70                 jmp     ds:__imp__execvp
.text:00404F70 _execvp         endp
.text:00404F70
.text:00404F70 ; ---------------------------------------------------------------------------
.text:00404F76                 align 10h
.text:00404F80                 jmp     ds:__set_app_type
.text:00404F80 ; ---------------------------------------------------------------------------
.text:00404F86                 align 10h
.text:00404F90
.text:00404F90 ; =============== S U B R O U T I N E =======================================
.text:00404F90
.text:00404F90 ; Attributes: thunk
.text:00404F90
.text:00404F90 ; void __cdecl cexit()
.text:00404F90 _cexit          proc near               ; CODE XREF: .text:0040116C↑p
.text:00404F90                 jmp     ds:__imp__cexit
.text:00404F90 _cexit          endp
.text:00404F90
.text:00404F90 ; ---------------------------------------------------------------------------
.text:00404F96                 align 10h
.text:00404FA0
.text:00404FA0 ; =============== S U B R O U T I N E =======================================
.text:00404FA0
.text:00404FA0 ; Attributes: thunk
.text:00404FA0
.text:00404FA0 ; char ***__cdecl _p__environ()
.text:00404FA0 __p__environ    proc near               ; CODE XREF: sub_401080+C7↑p
.text:00404FA0                                         ; sub_4015C0:loc_4018F0↑p ...
.text:00404FA0                 jmp     ds:__imp___p__environ
.text:00404FA0 __p__environ    endp
.text:00404FA0
.text:00404FA0 ; ---------------------------------------------------------------------------
.text:00404FA6                 align 10h
.text:00404FB0
.text:00404FB0 ; =============== S U B R O U T I N E =======================================
.text:00404FB0
.text:00404FB0 ; Attributes: thunk
.text:00404FB0
.text:00404FB0 ; _crt_signal_t __cdecl signal(int Signal, _crt_signal_t Function)
.text:00404FB0 signal          proc near               ; CODE XREF: TopLevelExceptionFilter+4D↑p
.text:00404FB0                                         ; TopLevelExceptionFilter+88↑p ...
.text:00404FB0
.text:00404FB0 Signal          = dword ptr  4
.text:00404FB0 Function        = dword ptr  8
.text:00404FB0
.text:00404FB0                 jmp     ds:__imp_signal
.text:00404FB0 signal          endp
.text:00404FB0
.text:00404FB0 ; ---------------------------------------------------------------------------
.text:00404FB6                 align 10h
.text:00404FC0
.text:00404FC0 ; =============== S U B R O U T I N E =======================================
.text:00404FC0
.text:00404FC0 ; Attributes: thunk
.text:00404FC0
.text:00404FC0 ; int *__cdecl _p__fmode()
.text:00404FC0 __p__fmode      proc near               ; CODE XREF: sub_401080:loc_401135↑p
.text:00404FC0                 jmp     ds:__imp___p__fmode
.text:00404FC0 __p__fmode      endp
.text:00404FC0
.text:00404FC0 ; ---------------------------------------------------------------------------
.text:00404FC6                 align 10h
.text:00404FD0
.text:00404FD0 ; =============== S U B R O U T I N E =======================================
.text:00404FD0
.text:00404FD0 ; Attributes: thunk
.text:00404FD0
.text:00404FD0 ; int __cdecl setmode(int FileHandle, int Mode)
.text:00404FD0 _setmode        proc near               ; CODE XREF: sub_401080+70↑p
.text:00404FD0                                         ; sub_401080+90↑p ...
.text:00404FD0
.text:00404FD0 FileHandle      = dword ptr  4
.text:00404FD0 Mode            = dword ptr  8
.text:00404FD0
.text:00404FD0                 jmp     ds:__imp__setmode
.text:00404FD0 _setmode        endp
.text:00404FD0
.text:00404FD0 ; ---------------------------------------------------------------------------
.text:00404FD6                 align 10h
.text:00404FE0
.text:00404FE0 ; =============== S U B R O U T I N E =======================================
.text:00404FE0
.text:00404FE0 ; Attributes: thunk
.text:00404FE0
.text:00404FE0 __getmainargs   proc near               ; CODE XREF: sub_401080+49↑p
.text:00404FE0                 jmp     ds:__imp___getmainargs
.text:00404FE0 __getmainargs   endp
.text:00404FE0
.text:00404FE0 ; ---------------------------------------------------------------------------
.text:00404FE6                 align 10h
.text:00404FF0
.text:00404FF0 ; =============== S U B R O U T I N E =======================================
.text:00404FF0
.text:00404FF0 ; Attributes: thunk
.text:00404FF0
.text:00404FF0 ; int *__cdecl errno()
.text:00404FF0 _errno          proc near               ; CODE XREF: sub_4015C0+373↑p
.text:00404FF0                                         ; sub_4015C0+37E↑p ...
.text:00404FF0                 jmp     ds:__imp__errno
.text:00404FF0 _errno          endp
.text:00404FF0
.text:00404FF0 ; ---------------------------------------------------------------------------
.text:00404FF6                 align 10h
.text:00405000
.text:00405000 ; =============== S U B R O U T I N E =======================================
.text:00405000
.text:00405000 ; Attributes: thunk
.text:00405000
.text:00405000 ; int __cdecl puts(const char *Buffer)
.text:00405000 puts            proc near               ; CODE XREF: sub_4015C0+352↑p
.text:00405000
.text:00405000 Buffer          = dword ptr  4
.text:00405000
.text:00405000                 jmp     ds:__imp_puts
.text:00405000 puts            endp
.text:00405000
.text:00405000 ; ---------------------------------------------------------------------------
.text:00405006                 align 10h
.text:00405010
.text:00405010 ; =============== S U B R O U T I N E =======================================
.text:00405010
.text:00405010 ; Attributes: thunk
.text:00405010
.text:00405010 ; char *__cdecl setlocale(int Category, const char *Locale)
.text:00405010 setlocale       proc near               ; CODE XREF: sub_4015C0+39↑p
.text:00405010
.text:00405010 Category        = dword ptr  4
.text:00405010 Locale          = dword ptr  8
.text:00405010
.text:00405010                 jmp     ds:__imp_setlocale
.text:00405010 setlocale       endp
.text:00405010
.text:00405010 ; ---------------------------------------------------------------------------
.text:00405016                 align 10h
.text:00405020
.text:00405020 ; =============== S U B R O U T I N E =======================================
.text:00405020
.text:00405020 ; Attributes: noreturn thunk
.text:00405020
.text:00405020 ; void __cdecl __noreturn exit(int Code)
.text:00405020 exit            proc near               ; CODE XREF: sub_4015C0:loc_4016AF↑p
.text:00405020                                         ; .text:004019CE↑p ...
.text:00405020
.text:00405020 Code            = dword ptr  4
.text:00405020
.text:00405020                 jmp     ds:__imp_exit
.text:00405020 exit            endp
.text:00405020
.text:00405020 ; ---------------------------------------------------------------------------
.text:00405026                 align 10h
.text:00405030
.text:00405030 ; =============== S U B R O U T I N E =======================================
.text:00405030
.text:00405030 ; Attributes: thunk
.text:00405030
.text:00405030 ; int __cdecl fputs(const char *Buffer, FILE *Stream)
.text:00405030 fputs           proc near               ; CODE XREF: sub_4015C0+18A↑p
.text:00405030                                         ; sub_4015C0+1AC↑p ...
.text:00405030
.text:00405030 Buffer          = dword ptr  4
.text:00405030 Stream          = dword ptr  8
.text:00405030
.text:00405030                 jmp     ds:__imp_fputs
.text:00405030 fputs           endp
.text:00405030
.text:00405030 ; ---------------------------------------------------------------------------
.text:00405036                 align 10h
.text:00405040
.text:00405040 ; =============== S U B R O U T I N E =======================================
.text:00405040
.text:00405040 ; Attributes: thunk
.text:00405040
.text:00405040 ; int printf(const char *const Format, ...)
.text:00405040 printf          proc near               ; CODE XREF: sub_4015C0+168↑p
.text:00405040                                         ; sub_4015C0+20D↑p ...
.text:00405040
.text:00405040 Format          = dword ptr  4
.text:00405040
.text:00405040                 jmp     ds:__imp_printf
.text:00405040 printf          endp
.text:00405040
.text:00405040 ; ---------------------------------------------------------------------------
.text:00405046                 align 10h
.text:00405050
.text:00405050 ; =============== S U B R O U T I N E =======================================
.text:00405050
.text:00405050 ; Attributes: thunk
.text:00405050
.text:00405050 ; int fprintf(FILE *const Stream, const char *const Format, ...)
.text:00405050 fprintf         proc near               ; CODE XREF: sub_4015C0+E3↑p
.text:00405050                                         ; .text:004019C6↑p ...
.text:00405050
.text:00405050 Stream          = dword ptr  4
.text:00405050 Format          = dword ptr  8
.text:00405050
.text:00405050                 jmp     ds:__imp_fprintf
.text:00405050 fprintf         endp
.text:00405050
.text:00405050 ; ---------------------------------------------------------------------------
.text:00405056                 align 10h
.text:00405060
.text:00405060 ; =============== S U B R O U T I N E =======================================
.text:00405060
.text:00405060 ; Attributes: thunk
.text:00405060
.text:00405060 ; char *__cdecl strchr(const char *Str, int Val)
.text:00405060 strchr          proc near               ; CODE XREF: sub_4015C0+2E9↑p
.text:00405060                                         ; sub_401CF0+469↑p ...
.text:00405060
.text:00405060 Str             = dword ptr  4
.text:00405060 Val             = dword ptr  8
.text:00405060
.text:00405060                 jmp     ds:__imp_strchr
.text:00405060 strchr          endp
.text:00405060
.text:00405060 ; ---------------------------------------------------------------------------
.text:00405066                 align 10h
.text:00405070
.text:00405070 ; =============== S U B R O U T I N E =======================================
.text:00405070
.text:00405070 ; Attributes: thunk
.text:00405070
.text:00405070 ; size_t __cdecl strlen(const char *Str)
.text:00405070 strlen          proc near               ; CODE XREF: sub_401CF0+2A9↑p
.text:00405070                                         ; sub_401CF0+346↑p ...
.text:00405070
.text:00405070 Str             = dword ptr  4
.text:00405070
.text:00405070                 jmp     ds:__imp_strlen
.text:00405070 strlen          endp
.text:00405070
.text:00405070 ; ---------------------------------------------------------------------------
.text:00405076                 align 10h
.text:00405080
.text:00405080 ; =============== S U B R O U T I N E =======================================
.text:00405080
.text:00405080 ; Attributes: thunk
.text:00405080
.text:00405080 ; int __cdecl strncmp(const char *Str1, const char *Str2, size_t MaxCount)
.text:00405080 strncmp         proc near               ; CODE XREF: sub_401CF0+23F↑p
.text:00405080                                         ; sub_401CF0+699↑p
.text:00405080
.text:00405080 Str1            = dword ptr  4
.text:00405080 Str2            = dword ptr  8
.text:00405080 MaxCount        = dword ptr  0Ch
.text:00405080
.text:00405080                 jmp     ds:__imp_strncmp
.text:00405080 strncmp         endp
.text:00405080
.text:00405080 ; ---------------------------------------------------------------------------
.text:00405086                 align 10h
.text:00405090
.text:00405090 ; =============== S U B R O U T I N E =======================================
.text:00405090
.text:00405090 ; Attributes: thunk
.text:00405090
.text:00405090 ; char *__cdecl getenv(const char *VarName)
.text:00405090 getenv          proc near               ; CODE XREF: sub_401CF0+B57↑p
.text:00405090                                         ; .text:00404C87↑p
.text:00405090
.text:00405090 VarName         = dword ptr  4
.text:00405090
.text:00405090                 jmp     ds:__imp_getenv
.text:00405090 getenv          endp
.text:00405090
.text:00405090 ; ---------------------------------------------------------------------------
.text:00405096                 align 10h
.text:004050A0
.text:004050A0 ; =============== S U B R O U T I N E =======================================
.text:004050A0
.text:004050A0 ; Attributes: thunk
.text:004050A0
.text:004050A0 ; int __cdecl vfprintf(FILE *const Stream, const char *const Format, va_list ArgList)
.text:004050A0 vfprintf        proc near               ; CODE XREF: sub_402DB0+C1↑p
.text:004050A0                                         ; sub_404930+49↑p ...
.text:004050A0
.text:004050A0 Stream          = dword ptr  4
.text:004050A0 Format          = dword ptr  8
.text:004050A0 ArgList         = dword ptr  0Ch
.text:004050A0
.text:004050A0                 jmp     ds:__imp_vfprintf
.text:004050A0 vfprintf        endp
.text:004050A0
.text:004050A0 ; ---------------------------------------------------------------------------
.text:004050A6                 align 10h
.text:004050B0
.text:004050B0 ; =============== S U B R O U T I N E =======================================
.text:004050B0
.text:004050B0 ; Attributes: noreturn thunk
.text:004050B0
.text:004050B0 ; void __cdecl __noreturn abort()
.text:004050B0 abort           proc near               ; CODE XREF: sub_402DB0:loc_402E4C↑p
.text:004050B0                                         ; sub_4043E0:loc_40459A↑p ...
.text:004050B0                 jmp     ds:__imp_abort
.text:004050B0 abort           endp
.text:004050B0
.text:004050B0 ; ---------------------------------------------------------------------------
.text:004050B6                 align 10h
.text:004050C0
.text:004050C0 ; =============== S U B R O U T I N E =======================================
.text:004050C0
.text:004050C0 ; Attributes: thunk
.text:004050C0
.text:004050C0 ; int __cdecl flsbuf(int Ch, FILE *File)
.text:004050C0 _flsbuf         proc near               ; CODE XREF: sub_402DB0+128↑p
.text:004050C0                                         ; sub_402DB0+13A↑p ...
.text:004050C0
.text:004050C0 File            = dword ptr  8
.text:004050C0
.text:004050C0                 jmp     ds:__imp__flsbuf
.text:004050C0 _flsbuf         endp
.text:004050C0
.text:004050C0 ; ---------------------------------------------------------------------------
.text:004050C6                 align 10h
.text:004050D0
.text:004050D0 ; =============== S U B R O U T I N E =======================================
.text:004050D0
.text:004050D0 ; Attributes: thunk
.text:004050D0
.text:004050D0 ; int __cdecl fclose(FILE *Stream)
.text:004050D0 fclose          proc near               ; CODE XREF: sub_403130+27↑p
.text:004050D0
.text:004050D0 Stream          = dword ptr  4
.text:004050D0
.text:004050D0                 jmp     ds:__imp_fclose
.text:004050D0 fclose          endp
.text:004050D0
.text:004050D0 ; ---------------------------------------------------------------------------
.text:004050D6                 align 10h
.text:004050E0
.text:004050E0 ; =============== S U B R O U T I N E =======================================
.text:004050E0
.text:004050E0 ; Attributes: thunk
.text:004050E0
.text:004050E0 ; void __cdecl free(void *Block)
.text:004050E0 free            proc near               ; CODE XREF: sub_4043E0+112↑p
.text:004050E0                                         ; .text:00404CFB↑p ...
.text:004050E0
.text:004050E0 Block           = dword ptr  4
.text:004050E0
.text:004050E0                 jmp     ds:__imp_free
.text:004050E0 free            endp
.text:004050E0
.text:004050E0 ; ---------------------------------------------------------------------------
.text:004050E6                 align 10h
.text:004050F0
.text:004050F0 ; =============== S U B R O U T I N E =======================================
.text:004050F0
.text:004050F0 ; Attributes: thunk
.text:004050F0
.text:004050F0 ; int __cdecl iswctype(wint_t C, wctype_t Type)
.text:004050F0 iswctype        proc near               ; CODE XREF: sub_4032A0+78B↑p
.text:004050F0
.text:004050F0 C               = word ptr  4
.text:004050F0 Type            = word ptr  8
.text:004050F0
.text:004050F0                 jmp     ds:__imp_iswctype
.text:004050F0 iswctype        endp
.text:004050F0
.text:004050F0 ; ---------------------------------------------------------------------------
.text:004050F6                 align 10h
.text:00405100
.text:00405100 ; =============== S U B R O U T I N E =======================================
.text:00405100
.text:00405100 ; Attributes: thunk
.text:00405100
.text:00405100 ; int __cdecl isctype(int C, int Type)
.text:00405100 _isctype        proc near               ; CODE XREF: sub_4032A0+610↑p
.text:00405100
.text:00405100 C               = dword ptr  4
.text:00405100 Type            = dword ptr  8
.text:00405100
.text:00405100                 jmp     ds:__imp__isctype
.text:00405100 _isctype        endp
.text:00405100
.text:00405100 ; ---------------------------------------------------------------------------
.text:00405106                 align 10h
.text:00405110
.text:00405110 ; =============== S U B R O U T I N E =======================================
.text:00405110
.text:00405110 ; Attributes: thunk
.text:00405110
.text:00405110 ; void *__cdecl memcpy(void *, const void *Src, size_t Size)
.text:00405110 memcpy          proc near               ; CODE XREF: .text:00404798↑p
.text:00405110                                         ; .text:004047E1↑p
.text:00405110
.text:00405110 Src             = dword ptr  8
.text:00405110 Size            = dword ptr  0Ch
.text:00405110
.text:00405110                 jmp     ds:__imp_memcpy
.text:00405110 memcpy          endp
.text:00405110
.text:00405110 ; ---------------------------------------------------------------------------
.text:00405116                 align 10h
.text:00405120
.text:00405120 ; =============== S U B R O U T I N E =======================================
.text:00405120
.text:00405120 ; Attributes: thunk
.text:00405120
.text:00405120 ; void *__cdecl memset(void *, int Val, size_t Size)
.text:00405120 memset          proc near               ; CODE XREF: .text:00404716↑p
.text:00405120
.text:00405120 Val             = dword ptr  8
.text:00405120 Size            = dword ptr  0Ch
.text:00405120
.text:00405120                 jmp     ds:__imp_memset
.text:00405120 memset          endp
.text:00405120
.text:00405120 ; ---------------------------------------------------------------------------
.text:00405126                 align 10h
.text:00405130
.text:00405130 ; =============== S U B R O U T I N E =======================================
.text:00405130
.text:00405130 ; Attributes: thunk
.text:00405130
.text:00405130 ; void *__cdecl calloc(size_t Count, size_t Size)
.text:00405130 calloc          proc near               ; CODE XREF: .text:00404753↑p
.text:00405130
.text:00405130 Count           = dword ptr  4
.text:00405130 Size            = dword ptr  8
.text:00405130
.text:00405130                 jmp     ds:__imp_calloc
.text:00405130 calloc          endp
.text:00405130
.text:00405130 ; ---------------------------------------------------------------------------
.text:00405136                 align 10h
.text:00405140
.text:00405140 ; =============== S U B R O U T I N E =======================================
.text:00405140
.text:00405140 ; Attributes: thunk
.text:00405140
.text:00405140 ; void *__cdecl realloc(void *Block, size_t Size)
.text:00405140 realloc         proc near               ; CODE XREF: .text:00404650↑p
.text:00405140                                         ; sub_404680+16↑p ...
.text:00405140
.text:00405140 Block           = dword ptr  4
.text:00405140 Size            = dword ptr  8
.text:00405140
.text:00405140                 jmp     ds:__imp_realloc
.text:00405140 realloc         endp
.text:00405140
.text:00405140 ; ---------------------------------------------------------------------------
.text:00405146                 align 10h
.text:00405150
.text:00405150 ; =============== S U B R O U T I N E =======================================
.text:00405150
.text:00405150 ; Attributes: thunk
.text:00405150
.text:00405150 ; void *__cdecl malloc(size_t Size)
.text:00405150 malloc          proc near               ; CODE XREF: sub_4045B0+24↑p
.text:00405150                                         ; sub_4045F0+E↑p ...
.text:00405150
.text:00405150 Size            = dword ptr  4
.text:00405150
.text:00405150                 jmp     ds:__imp_malloc
.text:00405150 malloc          endp
.text:00405150
.text:00405150 ; ---------------------------------------------------------------------------
.text:00405156                 align 10h
.text:00405160
.text:00405160 ; =============== S U B R O U T I N E =======================================
.text:00405160
.text:00405160 ; Attributes: thunk
.text:00405160
.text:00405160 ; int __cdecl strcmp(const char *Str1, const char *Str2)
.text:00405160 strcmp          proc near               ; CODE XREF: sub_404A34+180↑p
.text:00405160
.text:00405160 Str1            = dword ptr  4
.text:00405160 Str2            = dword ptr  8
.text:00405160
.text:00405160                 jmp     ds:__imp_strcmp
.text:00405160 strcmp          endp
.text:00405160
.text:00405160 ; ---------------------------------------------------------------------------
.text:00405166                 align 10h
.text:00405170
.text:00405170 ; =============== S U B R O U T I N E =======================================
.text:00405170
.text:00405170 ; Attributes: thunk
.text:00405170
.text:00405170 ; int __cdecl fflush(FILE *Stream)
.text:00405170 fflush          proc near               ; CODE XREF: sub_404930+19↑p
.text:00405170                                         ; sub_404930+81↑p ...
.text:00405170
.text:00405170 Stream          = dword ptr  4
.text:00405170
.text:00405170                 jmp     ds:__imp_fflush
.text:00405170 fflush          endp
.text:00405170
.text:00405170 ; ---------------------------------------------------------------------------
.text:00405176                 align 10h
.text:00405180
.text:00405180 ; =============== S U B R O U T I N E =======================================
.text:00405180
.text:00405180 ; Attributes: thunk
.text:00405180
.text:00405180 ; char *__cdecl strerror(int ErrorMessage)
.text:00405180 strerror        proc near               ; CODE XREF: sub_404930+A5↑p
.text:00405180                                         ; sub_404A34+10F↑p
.text:00405180
.text:00405180 ErrorMessage    = dword ptr  4
.text:00405180
.text:00405180                 jmp     ds:__imp_strerror
.text:00405180 strerror        endp
.text:00405180
.text:00405180 ; ---------------------------------------------------------------------------
.text:00405186                 align 10h
.text:00405190
.text:00405190 ; =============== S U B R O U T I N E =======================================
.text:00405190
.text:00405190 ; Attributes: thunk
.text:00405190
.text:00405190 ; int __cdecl putenv(const char *EnvString)
.text:00405190 _putenv         proc near               ; CODE XREF: sub_404BD0+2A↑j
.text:00405190                                         ; .text:00404CF1↑p ...
.text:00405190
.text:00405190 EnvString       = dword ptr  4
.text:00405190
.text:00405190                 jmp     ds:__imp__putenv
.text:00405190 _putenv         endp
.text:00405190
.text:00405190 ; ---------------------------------------------------------------------------
.text:00405196                 align 10h
.text:004051A0
.text:004051A0 ; =============== S U B R O U T I N E =======================================
.text:004051A0
.text:004051A0 ; Attributes: thunk
.text:004051A0
.text:004051A0 ; char *__cdecl strcat(char *Destination, const char *Source)
.text:004051A0 strcat          proc near               ; CODE XREF: .text:00404CDD↑p
.text:004051A0                                         ; .text:00404CE9↑p ...
.text:004051A0
.text:004051A0 Destination     = dword ptr  4
.text:004051A0 Source          = dword ptr  8
.text:004051A0
.text:004051A0                 jmp     ds:__imp_strcat
.text:004051A0 strcat          endp
.text:004051A0
.text:004051A0 ; ---------------------------------------------------------------------------
.text:004051A6                 align 10h
.text:004051B0
.text:004051B0 ; =============== S U B R O U T I N E =======================================
.text:004051B0
.text:004051B0 ; Attributes: thunk
.text:004051B0
.text:004051B0 ; char *__cdecl strcpy(char *Destination, const char *Source)
.text:004051B0 strcpy          proc near               ; CODE XREF: .text:00404CCD↑p
.text:004051B0                                         ; sub_404D10+6D↑p
.text:004051B0
.text:004051B0 Destination     = dword ptr  4
.text:004051B0 Source          = dword ptr  8
.text:004051B0
.text:004051B0                 jmp     ds:__imp_strcpy
.text:004051B0 strcpy          endp
.text:004051B0
.text:004051B0 ; ---------------------------------------------------------------------------
.text:004051B6                 align 10h
.text:004051C0
.text:004051C0 ; =============== S U B R O U T I N E =======================================
.text:004051C0
.text:004051C0 ; Attributes: thunk
.text:004051C0
.text:004051C0 ; LPTOP_LEVEL_EXCEPTION_FILTER __stdcall SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.text:004051C0 SetUnhandledExceptionFilter proc near   ; CODE XREF: sub_401080+E↑p
.text:004051C0
.text:004051C0 lpTopLevelExceptionFilter= dword ptr  4
.text:004051C0
.text:004051C0                 jmp     ds:__imp_SetUnhandledExceptionFilter
.text:004051C0 SetUnhandledExceptionFilter endp
.text:004051C0
.text:004051C0 ; ---------------------------------------------------------------------------
.text:004051C6                 align 10h
.text:004051D0
.text:004051D0 ; =============== S U B R O U T I N E =======================================
.text:004051D0
.text:004051D0 ; Attributes: noreturn thunk
.text:004051D0
.text:004051D0 ; void __stdcall __noreturn ExitProcess(UINT uExitCode)
.text:004051D0 ExitProcess     proc near               ; CODE XREF: .text:00401174↑p
.text:004051D0
.text:004051D0 uExitCode       = dword ptr  4
.text:004051D0
.text:004051D0                 jmp     ds:__imp_ExitProcess
.text:004051D0 ExitProcess     endp
.text:004051D0
.text:004051D0 ; ---------------------------------------------------------------------------
.text:004051D6                 align 10h
.text:004051E0 dword_4051E0    dd 0FFFFFFFFh           ; DATA XREF: .text:00404E79↑r
.text:004051E0                                         ; .text:loc_404EA0↑r ...
.text:004051E4 dword_4051E4    dd 0                    ; DATA XREF: .text:loc_404EAC↑r
.text:004051E4                                         ; sub_404ED0:loc_404F1D↑r
.text:004051E8                 dd 0FFFFFFFFh
.text:004051EC dword_4051EC    dd 5 dup(0)             ; DATA XREF: .data:off_406084↓o
.text:00405200                 dd 380h dup(?)
.text:00405200 _text           ends
.text:00405200
.data:00406000 ; Section 2. (virtual address 00006000)
.data:00406000 ; Virtual size                  : 000000A0 (    160.)
.data:00406000 ; Section size in file          : 00000200 (    512.)
.data:00406000 ; Offset to raw data for section: 00004600
.data:00406000 ; Flags C0000040: Data Readable Writable
.data:00406000 ; Alignment     : default
.data:00406000 ; ===========================================================================
.data:00406000
.data:00406000 ; Segment type: Pure data
.data:00406000 ; Segment permissions: Read/Write
.data:00406000 _data           segment para public 'DATA' use32
.data:00406000                 assume cs:_data
.data:00406000                 ;org 406000h
.data:00406000 dword_406000    dd 0                    ; DATA XREF: sub_401080+1B↑o
.data:00406000                                         ; sub_401080+CC↑r
.data:00406004 dword_406004    dd 0                    ; DATA XREF: sub_401080+41↑o
.data:00406004                                         ; sub_401080+D4↑r
.data:00406008                 align 10h
.data:00406010 dword_406010    dd 1                    ; DATA XREF: sub_4015C0:loc_4017D7↑r
.data:00406010                                         ; sub_4015C0+247↑w ...
.data:00406014 dword_406014    dd 1                    ; DATA XREF: sub_402880+11↑r
.data:00406014                                         ; .text:00402921↑r
.data:00406018 dword_406018    dd 3Fh                  ; DATA XREF: sub_402880+7D↑w
.data:00406018                                         ; .text:0040298D↑w
.data:0040601C                 align 10h
.data:00406020 ; char *Buffer
.data:00406020 Buffer          dd offset aCopyrightC2005
.data:00406020                                         ; DATA XREF: sub_402DB0+DC↑r
.data:00406020                                         ; "Copyright (C) 2005 Free Software Founda"...
.data:00406024                 align 10h
.data:00406030 ; int Code
.data:00406030 Code            dd 1                    ; DATA XREF: sub_403130+6D↑r
.data:00406030                                         ; sub_403130+9A↑r ...
.data:00406034                 align 10h
.data:00406040 dword_406040    dd 1                    ; DATA XREF: sub_4043E0+22↑r
.data:00406040                                         ; sub_4043E0+65↑r ...
.data:00406044 dword_406044    dd 100h                 ; DATA XREF: sub_4043E0+3F↑o
.data:00406044                                         ; sub_4043E0+1A2↑r ...
.data:00406048 off_406048      dd offset unk_407050    ; DATA XREF: sub_4043E0+1AA↑r
.data:0040604C ; void *off_40604C
.data:0040604C off_40604C      dd offset dword_406044  ; DATA XREF: sub_4043E0+39↑r
.data:0040604C                                         ; sub_4043E0+60↑w ...
.data:00406050 dword_406050    dd 0FFFFFFFFh           ; DATA XREF: sub_401080+22↑r
.data:00406054                 align 10h
.data:00406060 ; int Mode
.data:00406060 Mode            dd 0                    ; DATA XREF: sub_401080+4E↑r
.data:00406060                                         ; sub_401080+80↑r ...
.data:00406064                 align 10h
.data:00406070 dword_406070    dd 4000h                ; DATA XREF: sub_401080+57↑w
.data:00406070                                         ; sub_401080+BA↑r
.data:00406074                 align 10h
.data:00406080 dword_406080    dd 0                    ; DATA XREF: sub_404ED0+9↑r
.data:00406080                                         ; sub_404ED0+1D↑w
.data:00406084 off_406084      dd offset dword_4051EC  ; DATA XREF: sub_404E40+6↑r
.data:00406084                                         ; sub_404E40+17↑r ...
.data:00406088                 align 1000h
.data:00406088 _data           ends
.data:00406088
.bss:00407000 ; Section 3. (virtual address 00007000)
.bss:00407000 ; Virtual size                  : 00000240 (    576.)
.bss:00407000 ; Section size in file          : 00000000 (      0.)
.bss:00407000 ; Offset to raw data for section: 00000000
.bss:00407000 ; Flags C0000080: Bss Readable Writable
.bss:00407000 ; Alignment     : default
.bss:00407000 ; ===========================================================================
.bss:00407000
.bss:00407000 ; Segment type: Uninitialized
.bss:00407000 ; Segment permissions: Read/Write
.bss:00407000 _bss            segment para public 'BSS' use32
.bss:00407000                 assume cs:_bss
.bss:00407000                 ;org 407000h
.bss:00407000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00407000 unk_407000      db    ? ;               ; DATA XREF: sub_4015C0+3BD↑o
.bss:00407000                                         ; sub_404E00+1↑o ...
.bss:00407001                 db    ? ;
.bss:00407002                 db    ? ;
.bss:00407003                 db    ? ;
.bss:00407004                 db    ? ;
.bss:00407005                 db    ? ;
.bss:00407006                 db    ? ;
.bss:00407007                 db    ? ;
.bss:00407008                 db    ? ;
.bss:00407009                 db    ? ;
.bss:0040700A                 db    ? ;
.bss:0040700B                 db    ? ;
.bss:0040700C                 db    ? ;
.bss:0040700D                 db    ? ;
.bss:0040700E                 db    ? ;
.bss:0040700F                 db    ? ;
.bss:00407010 dword_407010    dd ?                    ; DATA XREF: sub_402880+9↑o
.bss:00407010                                         ; sub_402880+17↑w ...
.bss:00407014 dword_407014    dd ?                    ; DATA XREF: sub_402880+21↑w
.bss:00407014                                         ; .text:00402939↑w
.bss:00407018 dword_407018    dd ?                    ; DATA XREF: sub_402880+77↑r
.bss:00407018                                         ; .text:00402987↑r
.bss:0040701C dword_40701C    dd ?                    ; DATA XREF: sub_402880+6B↑r
.bss:0040701C                                         ; .text:0040297B↑r
.bss:00407020                 align 40h
.bss:00407040 ; char *dword_407040
.bss:00407040 dword_407040    dd ?                    ; DATA XREF: .text:00403104↑w
.bss:00407040                                         ; sub_403130+58↑r
.bss:00407044                 align 10h
.bss:00407050 unk_407050      db    ? ;               ; DATA XREF: sub_4043E0+100↑o
.bss:00407050                                         ; .data:off_406048↑o
.bss:00407051                 db    ? ;
.bss:00407052                 db    ? ;
.bss:00407053                 db    ? ;
.bss:00407054                 db    ? ;
.bss:00407055                 db    ? ;
.bss:00407056                 db    ? ;
.bss:00407057                 db    ? ;
.bss:00407058                 db    ? ;
.bss:00407059                 db    ? ;
.bss:0040705A                 db    ? ;
.bss:0040705B                 db    ? ;
.bss:0040705C                 db    ? ;
.bss:0040705D                 db    ? ;
.bss:0040705E                 db    ? ;
.bss:0040705F                 db    ? ;
.bss:00407060                 db    ? ;
.bss:00407061                 db    ? ;
.bss:00407062                 db    ? ;
.bss:00407063                 db    ? ;
.bss:00407064                 db    ? ;
.bss:00407065                 db    ? ;
.bss:00407066                 db    ? ;
.bss:00407067                 db    ? ;
.bss:00407068                 db    ? ;
.bss:00407069                 db    ? ;
.bss:0040706A                 db    ? ;
.bss:0040706B                 db    ? ;
.bss:0040706C                 db    ? ;
.bss:0040706D                 db    ? ;
.bss:0040706E                 db    ? ;
.bss:0040706F                 db    ? ;
.bss:00407070                 db    ? ;
.bss:00407071                 db    ? ;
.bss:00407072                 db    ? ;
.bss:00407073                 db    ? ;
.bss:00407074                 db    ? ;
.bss:00407075                 db    ? ;
.bss:00407076                 db    ? ;
.bss:00407077                 db    ? ;
.bss:00407078                 db    ? ;
.bss:00407079                 db    ? ;
.bss:0040707A                 db    ? ;
.bss:0040707B                 db    ? ;
.bss:0040707C                 db    ? ;
.bss:0040707D                 db    ? ;
.bss:0040707E                 db    ? ;
.bss:0040707F                 db    ? ;
.bss:00407080                 db    ? ;
.bss:00407081                 db    ? ;
.bss:00407082                 db    ? ;
.bss:00407083                 db    ? ;
.bss:00407084                 db    ? ;
.bss:00407085                 db    ? ;
.bss:00407086                 db    ? ;
.bss:00407087                 db    ? ;
.bss:00407088                 db    ? ;
.bss:00407089                 db    ? ;
.bss:0040708A                 db    ? ;
.bss:0040708B                 db    ? ;
.bss:0040708C                 db    ? ;
.bss:0040708D                 db    ? ;
.bss:0040708E                 db    ? ;
.bss:0040708F                 db    ? ;
.bss:00407090                 db    ? ;
.bss:00407091                 db    ? ;
.bss:00407092                 db    ? ;
.bss:00407093                 db    ? ;
.bss:00407094                 db    ? ;
.bss:00407095                 db    ? ;
.bss:00407096                 db    ? ;
.bss:00407097                 db    ? ;
.bss:00407098                 db    ? ;
.bss:00407099                 db    ? ;
.bss:0040709A                 db    ? ;
.bss:0040709B                 db    ? ;
.bss:0040709C                 db    ? ;
.bss:0040709D                 db    ? ;
.bss:0040709E                 db    ? ;
.bss:0040709F                 db    ? ;
.bss:004070A0                 db    ? ;
.bss:004070A1                 db    ? ;
.bss:004070A2                 db    ? ;
.bss:004070A3                 db    ? ;
.bss:004070A4                 db    ? ;
.bss:004070A5                 db    ? ;
.bss:004070A6                 db    ? ;
.bss:004070A7                 db    ? ;
.bss:004070A8                 db    ? ;
.bss:004070A9                 db    ? ;
.bss:004070AA                 db    ? ;
.bss:004070AB                 db    ? ;
.bss:004070AC                 db    ? ;
.bss:004070AD                 db    ? ;
.bss:004070AE                 db    ? ;
.bss:004070AF                 db    ? ;
.bss:004070B0                 db    ? ;
.bss:004070B1                 db    ? ;
.bss:004070B2                 db    ? ;
.bss:004070B3                 db    ? ;
.bss:004070B4                 db    ? ;
.bss:004070B5                 db    ? ;
.bss:004070B6                 db    ? ;
.bss:004070B7                 db    ? ;
.bss:004070B8                 db    ? ;
.bss:004070B9                 db    ? ;
.bss:004070BA                 db    ? ;
.bss:004070BB                 db    ? ;
.bss:004070BC                 db    ? ;
.bss:004070BD                 db    ? ;
.bss:004070BE                 db    ? ;
.bss:004070BF                 db    ? ;
.bss:004070C0                 db    ? ;
.bss:004070C1                 db    ? ;
.bss:004070C2                 db    ? ;
.bss:004070C3                 db    ? ;
.bss:004070C4                 db    ? ;
.bss:004070C5                 db    ? ;
.bss:004070C6                 db    ? ;
.bss:004070C7                 db    ? ;
.bss:004070C8                 db    ? ;
.bss:004070C9                 db    ? ;
.bss:004070CA                 db    ? ;
.bss:004070CB                 db    ? ;
.bss:004070CC                 db    ? ;
.bss:004070CD                 db    ? ;
.bss:004070CE                 db    ? ;
.bss:004070CF                 db    ? ;
.bss:004070D0                 db    ? ;
.bss:004070D1                 db    ? ;
.bss:004070D2                 db    ? ;
.bss:004070D3                 db    ? ;
.bss:004070D4                 db    ? ;
.bss:004070D5                 db    ? ;
.bss:004070D6                 db    ? ;
.bss:004070D7                 db    ? ;
.bss:004070D8                 db    ? ;
.bss:004070D9                 db    ? ;
.bss:004070DA                 db    ? ;
.bss:004070DB                 db    ? ;
.bss:004070DC                 db    ? ;
.bss:004070DD                 db    ? ;
.bss:004070DE                 db    ? ;
.bss:004070DF                 db    ? ;
.bss:004070E0                 db    ? ;
.bss:004070E1                 db    ? ;
.bss:004070E2                 db    ? ;
.bss:004070E3                 db    ? ;
.bss:004070E4                 db    ? ;
.bss:004070E5                 db    ? ;
.bss:004070E6                 db    ? ;
.bss:004070E7                 db    ? ;
.bss:004070E8                 db    ? ;
.bss:004070E9                 db    ? ;
.bss:004070EA                 db    ? ;
.bss:004070EB                 db    ? ;
.bss:004070EC                 db    ? ;
.bss:004070ED                 db    ? ;
.bss:004070EE                 db    ? ;
.bss:004070EF                 db    ? ;
.bss:004070F0                 db    ? ;
.bss:004070F1                 db    ? ;
.bss:004070F2                 db    ? ;
.bss:004070F3                 db    ? ;
.bss:004070F4                 db    ? ;
.bss:004070F5                 db    ? ;
.bss:004070F6                 db    ? ;
.bss:004070F7                 db    ? ;
.bss:004070F8                 db    ? ;
.bss:004070F9                 db    ? ;
.bss:004070FA                 db    ? ;
.bss:004070FB                 db    ? ;
.bss:004070FC                 db    ? ;
.bss:004070FD                 db    ? ;
.bss:004070FE                 db    ? ;
.bss:004070FF                 db    ? ;
.bss:00407100                 db    ? ;
.bss:00407101                 db    ? ;
.bss:00407102                 db    ? ;
.bss:00407103                 db    ? ;
.bss:00407104                 db    ? ;
.bss:00407105                 db    ? ;
.bss:00407106                 db    ? ;
.bss:00407107                 db    ? ;
.bss:00407108                 db    ? ;
.bss:00407109                 db    ? ;
.bss:0040710A                 db    ? ;
.bss:0040710B                 db    ? ;
.bss:0040710C                 db    ? ;
.bss:0040710D                 db    ? ;
.bss:0040710E                 db    ? ;
.bss:0040710F                 db    ? ;
.bss:00407110                 db    ? ;
.bss:00407111                 db    ? ;
.bss:00407112                 db    ? ;
.bss:00407113                 db    ? ;
.bss:00407114                 db    ? ;
.bss:00407115                 db    ? ;
.bss:00407116                 db    ? ;
.bss:00407117                 db    ? ;
.bss:00407118                 db    ? ;
.bss:00407119                 db    ? ;
.bss:0040711A                 db    ? ;
.bss:0040711B                 db    ? ;
.bss:0040711C                 db    ? ;
.bss:0040711D                 db    ? ;
.bss:0040711E                 db    ? ;
.bss:0040711F                 db    ? ;
.bss:00407120                 db    ? ;
.bss:00407121                 db    ? ;
.bss:00407122                 db    ? ;
.bss:00407123                 db    ? ;
.bss:00407124                 db    ? ;
.bss:00407125                 db    ? ;
.bss:00407126                 db    ? ;
.bss:00407127                 db    ? ;
.bss:00407128                 db    ? ;
.bss:00407129                 db    ? ;
.bss:0040712A                 db    ? ;
.bss:0040712B                 db    ? ;
.bss:0040712C                 db    ? ;
.bss:0040712D                 db    ? ;
.bss:0040712E                 db    ? ;
.bss:0040712F                 db    ? ;
.bss:00407130                 db    ? ;
.bss:00407131                 db    ? ;
.bss:00407132                 db    ? ;
.bss:00407133                 db    ? ;
.bss:00407134                 db    ? ;
.bss:00407135                 db    ? ;
.bss:00407136                 db    ? ;
.bss:00407137                 db    ? ;
.bss:00407138                 db    ? ;
.bss:00407139                 db    ? ;
.bss:0040713A                 db    ? ;
.bss:0040713B                 db    ? ;
.bss:0040713C                 db    ? ;
.bss:0040713D                 db    ? ;
.bss:0040713E                 db    ? ;
.bss:0040713F                 db    ? ;
.bss:00407140                 db    ? ;
.bss:00407141                 db    ? ;
.bss:00407142                 db    ? ;
.bss:00407143                 db    ? ;
.bss:00407144                 db    ? ;
.bss:00407145                 db    ? ;
.bss:00407146                 db    ? ;
.bss:00407147                 db    ? ;
.bss:00407148                 db    ? ;
.bss:00407149                 db    ? ;
.bss:0040714A                 db    ? ;
.bss:0040714B                 db    ? ;
.bss:0040714C                 db    ? ;
.bss:0040714D                 db    ? ;
.bss:0040714E                 db    ? ;
.bss:0040714F                 db    ? ;
.bss:00407150 dword_407150    dd ?                    ; DATA XREF: .text:loc_403D71↑o
.bss:00407150                                         ; .text:loc_403D90↑o ...
.bss:00407154 dword_407154    dd ?                    ; DATA XREF: .text:loc_403E10↑o
.bss:00407154                                         ; .text:00404298↑r ...
.bss:00407158 dword_407158    dd ?                    ; DATA XREF: .text:00404292↑r
.bss:00407158                                         ; sub_404340+2C↑r
.bss:0040715C dword_40715C    dd ?                    ; DATA XREF: .text:00404286↑r
.bss:0040715C                                         ; sub_404340+22↑r
.bss:00407160 dword_407160    dd ?                    ; DATA XREF: .text:004042A2↑r
.bss:00407160                                         ; sub_404340+36↑r
.bss:00407164 dword_407164    dd ?                    ; DATA XREF: .text:004042B2↑r
.bss:00407164                                         ; sub_404340+4E↑r
.bss:00407168 dword_407168    dd ?                    ; DATA XREF: .text:004042CF↑r
.bss:00407168                                         ; sub_404340+62↑r
.bss:0040716C dword_40716C    dd ?                    ; DATA XREF: .text:004042C5↑r
.bss:0040716C                                         ; sub_404340+70↑r
.bss:00407170 dword_407170    dd ?                    ; DATA XREF: .text:004042A8↑r
.bss:00407170                                         ; sub_404340+7A↑r
.bss:00407174                 align 10h
.bss:00407180 ; char *Str1
.bss:00407180 Str1            dd ?                    ; DATA XREF: sub_404A34:loc_404A6D↑w
.bss:00407180                                         ; sub_404A34:loc_404BA0↑r
.bss:00407184                 align 10h
.bss:00407190 dword_407190    dd ?                    ; DATA XREF: sub_404A34+2D↑r
.bss:00407190                                         ; sub_404A34+3F↑w
.bss:00407194                 align 10h
.bss:004071A0 dword_4071A0    dd ?                    ; DATA XREF: sub_4015C0+33↑w
.bss:004071A0                                         ; sub_4015C0+CF↑r ...
.bss:004071A4                 align 20h
.bss:004071C0 ; char *EnvString
.bss:004071C0 EnvString       dd ?                    ; DATA XREF: sub_4015C0+281↑r
.bss:004071C0                                         ; sub_402880+71↑w ...
.bss:004071C4                 align 10h
.bss:004071D0 dword_4071D0    dd ?                    ; CODE XREF: sub_404A34+63↑p
.bss:004071D0                                         ; DATA XREF: sub_404930+1E↑r ...
.bss:004071D4                 align 10h
.bss:004071E0 dword_4071E0    dd ?                    ; DATA XREF: sub_404930+4E↑w
.bss:004071E0                                         ; sub_404A34+AB↑w
.bss:004071E4                 db    ? ;
.bss:004071E5                 db    ? ;
.bss:004071E6                 db    ? ;
.bss:004071E7                 db    ? ;
.bss:004071E8                 db    ? ;
.bss:004071E9                 db    ? ;
.bss:004071EA                 db    ? ;
.bss:004071EB                 db    ? ;
.bss:004071EC                 db    ? ;
.bss:004071ED                 db    ? ;
.bss:004071EE                 db    ? ;
.bss:004071EF                 db    ? ;
.bss:004071F0                 db    ? ;
.bss:004071F1                 db    ? ;
.bss:004071F2                 db    ? ;
.bss:004071F3                 db    ? ;
.bss:004071F4                 db    ? ;
.bss:004071F5                 db    ? ;
.bss:004071F6                 db    ? ;
.bss:004071F7                 db    ? ;
.bss:004071F8                 db    ? ;
.bss:004071F9                 db    ? ;
.bss:004071FA                 db    ? ;
.bss:004071FB                 db    ? ;
.bss:004071FC                 db    ? ;
.bss:004071FD                 db    ? ;
.bss:004071FE                 db    ? ;
.bss:004071FF                 db    ? ;
.bss:00407200                 db    ? ;
.bss:00407201                 db    ? ;
.bss:00407202                 db    ? ;
.bss:00407203                 db    ? ;
.bss:00407204                 db    ? ;
.bss:00407205                 db    ? ;
.bss:00407206                 db    ? ;
.bss:00407207                 db    ? ;
.bss:00407208                 db    ? ;
.bss:00407209                 db    ? ;
.bss:0040720A                 db    ? ;
.bss:0040720B                 db    ? ;
.bss:0040720C                 db    ? ;
.bss:0040720D                 db    ? ;
.bss:0040720E                 db    ? ;
.bss:0040720F                 db    ? ;
.bss:00407210 dword_407210    dd ?                    ; DATA XREF: sub_404A34+13↑r
.bss:00407214                 align 1000h
.bss:00407214 _bss            ends
.bss:00407214
.idata:00408000 ; Section 4. (virtual address 00008000)
.idata:00408000 ; Virtual size                  : 000005C8 (   1480.)
.idata:00408000 ; Section size in file          : 00000600 (   1536.)
.idata:00408000 ; Offset to raw data for section: 00004800
.idata:00408000 ; Flags C0000040: Data Readable Writable
.idata:00408000 ; Alignment     : default
.idata:00408000 ; ===========================================================================
.idata:00408000
.idata:00408000 ; Segment type: Externs
.idata:00408000 ; _idata
.idata:00408000
.idata:00408001
.idata:00408164 ;
.idata:00408164 ; Imports from libintl3.dll
.idata:00408164 ;
.idata:00408164                 extrn __imp_libintl_bindtextdomain:dword
.idata:00408164                                         ; CODE XREF: sub_4015C0+4D↑p
.idata:00408164                                         ; DATA XREF: sub_4015C0+4D↑r ...
.idata:00408168                 extrn libintl_gettext:dword
.idata:00408168                                         ; CODE XREF: sub_4015C0+C3↑p
.idata:00408168                                         ; sub_4015C0+155↑p ...
.idata:0040816C                 extrn libintl_textdomain:dword
.idata:0040816C                                         ; CODE XREF: sub_4015C0+5A↑p
.idata:0040816C                                         ; DATA XREF: sub_4015C0+5A↑r ...
.idata:00408170
.idata:00408178 ;
.idata:00408178 ; Imports from KERNEL32.dll
.idata:00408178 ;
.idata:00408178 ; void (__stdcall __noreturn *ExitProcess)(UINT uExitCode)
.idata:00408178                 extrn __imp_ExitProcess:dword
.idata:00408178                                         ; DATA XREF: ExitProcess↑r
.idata:0040817C ; LPTOP_LEVEL_EXCEPTION_FILTER (__stdcall *SetUnhandledExceptionFilter)(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.idata:0040817C                 extrn __imp_SetUnhandledExceptionFilter:dword
.idata:0040817C                                         ; DATA XREF: SetUnhandledExceptionFilter↑r
.idata:00408180
.idata:00408188 ;
.idata:00408188 ; Imports from msvcrt.dll
.idata:00408188 ;
.idata:00408188 ; intptr_t (__cdecl *_execvp)(const char *FileName, const char *const *Arguments)
.idata:00408188                 extrn __imp__execvp:dword
.idata:00408188                                         ; DATA XREF: _execvp↑r
.idata:0040818C
.idata:00408194 ;
.idata:00408194 ; Imports from MSVCP60.DLL
.idata:00408194 ;
.idata:00408194 ; size_t (__cdecl *mbrtowc)(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.idata:00408194                 extrn __imp_mbrtowc:dword
.idata:00408194                                         ; DATA XREF: mbrtowc↑r
.idata:00408198
.idata:004081A0 ;
.idata:004081A0 ; Imports from msvcrt.dll
.idata:004081A0 ;
.idata:004081A0                 extrn __imp___getmainargs:dword
.idata:004081A0                                         ; DATA XREF: __getmainargs↑r
.idata:004081A4 ; int _mb_cur_max
.idata:004081A4                 extrn __mb_cur_max:dword
.idata:004081A4                                         ; DATA XREF: sub_4032A0+7↑r
.idata:004081A4                                         ; sub_4032A0+5F3↑r
.idata:004081A8 ; char ***(__cdecl *__p__environ)()
.idata:004081A8                 extrn __imp___p__environ:dword
.idata:004081A8                                         ; DATA XREF: __p__environ↑r
.idata:004081AC ; int *(__cdecl *__p__fmode)()
.idata:004081AC                 extrn __imp___p__fmode:dword
.idata:004081AC                                         ; DATA XREF: __p__fmode↑r
.idata:004081B0 ; void (__cdecl *_set_app_type)(_crt_app_type Type)
.idata:004081B0                 extrn __set_app_type:dword
.idata:004081B0                                         ; CODE XREF: start+D↑p
.idata:004081B0                                         ; .text:0040102D↑p
.idata:004081B0                                         ; DATA XREF: ...
.idata:004081B4 ; void (__cdecl *_cexit)()
.idata:004081B4                 extrn __imp__cexit:dword
.idata:004081B4                                         ; DATA XREF: _cexit↑r
.idata:004081B8 ; int *(__cdecl *_errno)()
.idata:004081B8                 extrn __imp__errno:dword
.idata:004081B8                                         ; DATA XREF: _errno↑r
.idata:004081BC ; int (__cdecl *_flsbuf)(int Ch, FILE *File)
.idata:004081BC                 extrn __imp__flsbuf:dword
.idata:004081BC                                         ; DATA XREF: _flsbuf↑r
.idata:004081C0 ; FILE iob[]
.idata:004081C0                 extrn _iob:dword        ; DATA XREF: sub_401080+5C↑r
.idata:004081C0                                         ; sub_401080+75↑r ...
.idata:004081C4 ; int (__cdecl *_isctype)(int C, int Type)
.idata:004081C4                 extrn __imp__isctype:dword
.idata:004081C4                                         ; DATA XREF: _isctype↑r
.idata:004081C8 ; _onexit_t (__cdecl *onexit)(_onexit_t Func)
.idata:004081C8                 extrn _onexit:dword     ; CODE XREF: .text:0040106C↑p
.idata:004081C8                                         ; DATA XREF: .text:0040106C↑r
.idata:004081CC ; const unsigned __int16 *pctype
.idata:004081CC                 extrn _pctype:dword     ; DATA XREF: sub_4032A0:loc_403994↑r
.idata:004081D0 ; int (__cdecl *_putenv)(const char *EnvString)
.idata:004081D0                 extrn __imp__putenv:dword
.idata:004081D0                                         ; DATA XREF: _putenv↑r
.idata:004081D4 ; int (__cdecl *_setmode)(int FileHandle, int Mode)
.idata:004081D4                 extrn __imp__setmode:dword
.idata:004081D4                                         ; DATA XREF: _setmode↑r
.idata:004081D8 ; void (__cdecl __noreturn *abort)()
.idata:004081D8                 extrn __imp_abort:dword ; DATA XREF: abort↑r
.idata:004081DC ; int (__cdecl *atexit)(void (__cdecl *)())
.idata:004081DC                 extrn atexit:dword      ; CODE XREF: sub_401040+C↑p
.idata:004081DC                                         ; DATA XREF: sub_401040+C↑r
.idata:004081E0 ; void *(__cdecl *calloc)(size_t Count, size_t Size)
.idata:004081E0                 extrn __imp_calloc:dword
.idata:004081E0                                         ; DATA XREF: calloc↑r
.idata:004081E4 ; void (__cdecl __noreturn *exit)(int Code)
.idata:004081E4                 extrn __imp_exit:dword  ; DATA XREF: exit↑r
.idata:004081E8 ; int (__cdecl *fclose)(FILE *Stream)
.idata:004081E8                 extrn __imp_fclose:dword
.idata:004081E8                                         ; DATA XREF: fclose↑r
.idata:004081EC ; int (__cdecl *fflush)(FILE *Stream)
.idata:004081EC                 extrn __imp_fflush:dword
.idata:004081EC                                         ; DATA XREF: fflush↑r
.idata:004081F0 ; int (*fprintf)(FILE *const Stream, const char *const Format, ...)
.idata:004081F0                 extrn __imp_fprintf:dword
.idata:004081F0                                         ; DATA XREF: fprintf↑r
.idata:004081F4 ; int (__cdecl *fputs)(const char *Buffer, FILE *Stream)
.idata:004081F4                 extrn __imp_fputs:dword ; DATA XREF: fputs↑r
.idata:004081F8 ; void (__cdecl *free)(void *Block)
.idata:004081F8                 extrn __imp_free:dword  ; DATA XREF: free↑r
.idata:004081FC ; char *(__cdecl *getenv)(const char *VarName)
.idata:004081FC                 extrn __imp_getenv:dword
.idata:004081FC                                         ; DATA XREF: getenv↑r
.idata:00408200 ; int (__cdecl *iswctype)(wint_t C, wctype_t Type)
.idata:00408200                 extrn __imp_iswctype:dword
.idata:00408200                                         ; DATA XREF: iswctype↑r
.idata:00408204 ; void *(__cdecl *malloc)(size_t Size)
.idata:00408204                 extrn __imp_malloc:dword
.idata:00408204                                         ; DATA XREF: malloc↑r
.idata:00408208 ; void *(__cdecl *memcpy)(void *, const void *Src, size_t Size)
.idata:00408208                 extrn __imp_memcpy:dword
.idata:00408208                                         ; DATA XREF: memcpy↑r
.idata:0040820C ; void *(__cdecl *memset)(void *, int Val, size_t Size)
.idata:0040820C                 extrn __imp_memset:dword
.idata:0040820C                                         ; DATA XREF: memset↑r
.idata:00408210 ; int (*printf)(const char *const Format, ...)
.idata:00408210                 extrn __imp_printf:dword
.idata:00408210                                         ; DATA XREF: printf↑r
.idata:00408214 ; int (__cdecl *puts)(const char *Buffer)
.idata:00408214                 extrn __imp_puts:dword  ; DATA XREF: puts↑r
.idata:00408218 ; void *(__cdecl *realloc)(void *Block, size_t Size)
.idata:00408218                 extrn __imp_realloc:dword
.idata:00408218                                         ; DATA XREF: realloc↑r
.idata:0040821C ; char *(__cdecl *setlocale)(int Category, const char *Locale)
.idata:0040821C                 extrn __imp_setlocale:dword
.idata:0040821C                                         ; DATA XREF: setlocale↑r
.idata:00408220 ; _crt_signal_t (__cdecl *signal)(int Signal, _crt_signal_t Function)
.idata:00408220                 extrn __imp_signal:dword
.idata:00408220                                         ; DATA XREF: signal↑r
.idata:00408224 ; char *(__cdecl *strcat)(char *Destination, const char *Source)
.idata:00408224                 extrn __imp_strcat:dword
.idata:00408224                                         ; DATA XREF: strcat↑r
.idata:00408228 ; char *(__cdecl *strchr)(const char *Str, int Val)
.idata:00408228                 extrn __imp_strchr:dword
.idata:00408228                                         ; DATA XREF: strchr↑r
.idata:0040822C ; int (__cdecl *strcmp)(const char *Str1, const char *Str2)
.idata:0040822C                 extrn __imp_strcmp:dword
.idata:0040822C                                         ; DATA XREF: strcmp↑r
.idata:00408230 ; char *(__cdecl *strcpy)(char *Destination, const char *Source)
.idata:00408230                 extrn __imp_strcpy:dword
.idata:00408230                                         ; DATA XREF: strcpy↑r
.idata:00408234 ; char *(__cdecl *strerror)(int ErrorMessage)
.idata:00408234                 extrn __imp_strerror:dword
.idata:00408234                                         ; DATA XREF: strerror↑r
.idata:00408238 ; size_t (__cdecl *strlen)(const char *Str)
.idata:00408238                 extrn __imp_strlen:dword
.idata:00408238                                         ; DATA XREF: strlen↑r
.idata:0040823C ; int (__cdecl *strncmp)(const char *Str1, const char *Str2, size_t MaxCount)
.idata:0040823C                 extrn __imp_strncmp:dword
.idata:0040823C                                         ; DATA XREF: strncmp↑r
.idata:00408240 ; int (__cdecl *vfprintf)(FILE *const Stream, const char *const Format, va_list ArgList)
.idata:00408240                 extrn __imp_vfprintf:dword
.idata:00408240                                         ; DATA XREF: vfprintf↑r
.idata:00408244
.idata:00408244
.idata:00408244
.idata:00408244                 end start
