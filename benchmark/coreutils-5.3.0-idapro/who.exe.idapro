.text:00401000 ;
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
.text:00401000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
.text:00401000 ; |                      License info: 48-357D-7BC4-C6                      |
.text:00401000 ; |                              Virginia Tech                              |
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ;
.text:00401000 ; Input SHA256 : 0223E13AB592DBE2AAEB978D02C503602FC2AC298E8CB2B8B3D88F3F5867EF59
.text:00401000 ; Input MD5    : B65B2E653BD7E1A576A249E3121DC33F
.text:00401000 ; Input CRC32  : E306CCC3
.text:00401000
.text:00401000 ; File Name   : /home/cindy/Documents/Projects/binary_cmc/benchmark/coreutils-5.3.0-bin/bin/who.exe
.text:00401000 ; Format      : Portable executable for 80386 (PE)
.text:00401000 ; Imagebase   : 400000
.text:00401000 ; Timestamp   : 4266A278 (Wed Apr 20 18:42:00 2005)
.text:00401000 ; Section 1. (virtual address 00001000)
.text:00401000 ; Virtual size                  : 0000F650 (  63056.)
.text:00401000 ; Section size in file          : 0000F800 (  63488.)
.text:00401000 ; Offset to raw data for section: 00000400
.text:00401000 ; Flags 60000020: Text Executable Readable
.text:00401000 ; Alignment     : default
.text:00401000
.text:00401000                 .686p
.text:00401000                 .mmx
.text:00401000                 .model flat
.text:00401000
.text:00401000 ; ===========================================================================
.text:00401000
.text:00401000 ; Segment type: Pure code
.text:00401000 ; Segment permissions: Read/Execute
.text:00401000 _text           segment para public 'CODE' use32
.text:00401000                 assume cs:_text
.text:00401000                 ;org 401000h
.text:00401000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00401000
.text:00401000 ; =============== S U B R O U T I N E =======================================
.text:00401000
.text:00401000 ; Attributes: noreturn bp-based frame
.text:00401000
.text:00401000                 public start
.text:00401000 start           proc near
.text:00401000
.text:00401000 Type            = dword ptr -8
.text:00401000
.text:00401000                 push    ebp
.text:00401001                 mov     ebp, esp
.text:00401003                 sub     esp, 8
.text:00401006                 mov     [esp+8+Type], 1 ; Type
.text:0040100D                 call    ds:__set_app_type
.text:00401013                 call    sub_401080
.text:00401013 start           endp
.text:00401013
.text:00401018 ; ---------------------------------------------------------------------------
.text:00401018                 mov     esp, ebp
.text:0040101A                 xor     eax, eax
.text:0040101C                 pop     ebp
.text:0040101D                 retn
.text:0040101D ; ---------------------------------------------------------------------------
.text:0040101E                 align 10h
.text:00401020                 push    ebp
.text:00401021                 mov     ebp, esp
.text:00401023                 sub     esp, 8
.text:00401026                 mov     dword ptr [esp], 2
.text:0040102D                 call    ds:__set_app_type
.text:00401033                 call    sub_401080
.text:00401038 ; ---------------------------------------------------------------------------
.text:00401038                 mov     esp, ebp
.text:0040103A                 xor     eax, eax
.text:0040103C                 pop     ebp
.text:0040103D                 retn
.text:0040103D ; ---------------------------------------------------------------------------
.text:0040103E                 align 10h
.text:00401040
.text:00401040 ; =============== S U B R O U T I N E =======================================
.text:00401040
.text:00401040 ; Attributes: bp-based frame
.text:00401040
.text:00401040 ; int __cdecl sub_401040(void (__cdecl *)())
.text:00401040 sub_401040      proc near               ; CODE XREF: sub_401B10+65↓p
.text:00401040                                         ; .text:0040F500↓p ...
.text:00401040
.text:00401040 var_8           = dword ptr -8
.text:00401040 arg_0           = dword ptr  8
.text:00401040
.text:00401040                 push    ebp
.text:00401041                 mov     ebp, esp
.text:00401043                 sub     esp, 8
.text:00401046                 mov     edx, [ebp+arg_0]
.text:00401049                 mov     [esp+8+var_8], edx ; void (__cdecl *)()
.text:0040104C                 call    ds:atexit
.text:00401052                 mov     esp, ebp
.text:00401054                 pop     ebp
.text:00401055                 retn
.text:00401055 sub_401040      endp
.text:00401055
.text:00401055 ; ---------------------------------------------------------------------------
.text:00401056                 align 10h
.text:00401060                 push    ebp
.text:00401061                 mov     ebp, esp
.text:00401063                 sub     esp, 8
.text:00401066                 mov     edx, [ebp+8]
.text:00401069                 mov     [esp], edx
.text:0040106C                 call    ds:_onexit
.text:00401072                 mov     esp, ebp
.text:00401074                 pop     ebp
.text:00401075                 retn
.text:00401075 ; ---------------------------------------------------------------------------
.text:00401076                 align 10h
.text:00401080
.text:00401080 ; =============== S U B R O U T I N E =======================================
.text:00401080
.text:00401080 ; Attributes: noreturn bp-based frame
.text:00401080
.text:00401080 sub_401080      proc near               ; CODE XREF: start+13↑p
.text:00401080                                         ; .text:00401033↑p
.text:00401080
.text:00401080 lpTopLevelExceptionFilter= dword ptr -28h
.text:00401080 Mode            = dword ptr -24h
.text:00401080 var_20          = dword ptr -20h
.text:00401080 var_1C          = dword ptr -1Ch
.text:00401080 var_18          = dword ptr -18h
.text:00401080 var_C           = byte ptr -0Ch
.text:00401080 var_8           = dword ptr -8
.text:00401080
.text:00401080                 push    ebp
.text:00401081                 mov     ebp, esp
.text:00401083                 push    ebx
.text:00401084                 sub     esp, 24h
.text:00401087                 mov     [esp+28h+lpTopLevelExceptionFilter], offset TopLevelExceptionFilter ; lpTopLevelExceptionFilter
.text:0040108E                 call    SetUnhandledExceptionFilter
.text:00401093                 sub     esp, 4
.text:00401096                 call    sub_40F4A0
.text:0040109B                 mov     [esp+28h+lpTopLevelExceptionFilter], offset dword_411000
.text:004010A2                 mov     edx, dword_411100
.text:004010A8                 lea     ecx, [ebp+var_8]
.text:004010AB                 mov     [ebp+var_8], 0
.text:004010B2                 mov     [esp+28h+var_18], ecx
.text:004010B6                 mov     [esp+28h+var_1C], edx
.text:004010BA                 lea     edx, [ebp+var_C]
.text:004010BD                 mov     [esp+28h+var_20], edx
.text:004010C1                 mov     [esp+28h+Mode], offset dword_411004
.text:004010C9                 call    __getmainargs
.text:004010CE                 mov     eax, Mode
.text:004010D3                 test    eax, eax
.text:004010D5                 jz      short loc_401135
.text:004010D7                 mov     dword_411120, eax
.text:004010DC                 mov     edx, ds:_iob
.text:004010E2                 test    edx, edx
.text:004010E4                 jz      short loc_4010FB
.text:004010E6                 mov     [esp+28h+Mode], eax ; Mode
.text:004010EA                 mov     ebx, [edx+10h]
.text:004010ED                 mov     [esp+28h+lpTopLevelExceptionFilter], ebx ; FileHandle
.text:004010F0                 call    _setmode
.text:004010F5                 mov     edx, ds:_iob
.text:004010FB
.text:004010FB loc_4010FB:                             ; CODE XREF: sub_401080+64↑j
.text:004010FB                 cmp     edx, 0FFFFFFE0h
.text:004010FE                 jz      short loc_40111B
.text:00401100                 mov     ebx, Mode
.text:00401106                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040110A                 mov     ecx, [edx+30h]
.text:0040110D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401110                 call    _setmode
.text:00401115                 mov     edx, ds:_iob
.text:0040111B
.text:0040111B loc_40111B:                             ; CODE XREF: sub_401080+7E↑j
.text:0040111B                 cmp     edx, 0FFFFFFC0h
.text:0040111E                 jz      short loc_401135
.text:00401120                 mov     ebx, Mode
.text:00401126                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040112A                 mov     ecx, [edx+50h]
.text:0040112D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401130                 call    _setmode
.text:00401135
.text:00401135 loc_401135:                             ; CODE XREF: sub_401080+55↑j
.text:00401135                                         ; sub_401080+9E↑j
.text:00401135                 call    __p__fmode
.text:0040113A                 mov     ecx, dword_411120
.text:00401140                 mov     [eax], ecx
.text:00401142                 call    sub_40F470
.text:00401147                 call    __p__environ
.text:0040114C                 mov     edx, dword_411000
.text:00401152                 mov     ebx, [eax]
.text:00401154                 mov     ecx, dword_411004
.text:0040115A                 mov     [esp+28h+lpTopLevelExceptionFilter], edx
.text:0040115D                 mov     [esp+28h+var_20], ebx
.text:00401161                 mov     [esp+28h+Mode], ecx
.text:00401165                 call    sub_401B10
.text:00401165 sub_401080      endp
.text:00401165
.text:0040116A ; ---------------------------------------------------------------------------
.text:0040116A                 mov     ebx, eax
.text:0040116C                 call    _cexit
.text:00401171                 mov     [esp], ebx
.text:00401174                 call    ExitProcess
.text:00401174 ; ---------------------------------------------------------------------------
.text:00401179                 align 10h
.text:00401180
.text:00401180 ; =============== S U B R O U T I N E =======================================
.text:00401180
.text:00401180 ; Attributes: bp-based frame
.text:00401180
.text:00401180 ; LONG __stdcall TopLevelExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo)
.text:00401180 TopLevelExceptionFilter proc near       ; DATA XREF: sub_401080+7↑o
.text:00401180
.text:00401180 Signal          = dword ptr -18h
.text:00401180 Function        = dword ptr -14h
.text:00401180 var_8           = dword ptr -8
.text:00401180 var_4           = dword ptr -4
.text:00401180 ExceptionInfo   = dword ptr  8
.text:00401180
.text:00401180                 push    ebp
.text:00401181                 mov     ebp, esp
.text:00401183                 sub     esp, 18h
.text:00401186                 mov     [ebp+var_8], ebx
.text:00401189                 mov     ecx, [ebp+ExceptionInfo]
.text:0040118C                 xor     ebx, ebx
.text:0040118E                 mov     [ebp+var_4], esi
.text:00401191                 xor     esi, esi
.text:00401193                 mov     edx, [ecx]
.text:00401195                 mov     eax, [edx]
.text:00401197                 cmp     eax, 0C0000091h
.text:0040119C                 ja      loc_401260
.text:004011A2                 cmp     eax, 0C000008Dh
.text:004011A7                 jnb     short loc_401210
.text:004011A9                 cmp     eax, 0C0000005h
.text:004011AE                 jz      short loc_4011BE
.text:004011B0
.text:004011B0 loc_4011B0:                             ; CODE XREF: TopLevelExceptionFilter+59↓j
.text:004011B0                                         ; TopLevelExceptionFilter+77↓j ...
.text:004011B0                 mov     eax, ebx
.text:004011B2                 mov     esi, [ebp+var_4]
.text:004011B5                 mov     ebx, [ebp+var_8]
.text:004011B8                 mov     esp, ebp
.text:004011BA                 pop     ebp
.text:004011BB                 retn    4
.text:004011BE ; ---------------------------------------------------------------------------
.text:004011BE
.text:004011BE loc_4011BE:                             ; CODE XREF: TopLevelExceptionFilter+2E↑j
.text:004011BE                 mov     [esp+18h+Function], 0 ; Function
.text:004011C6                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:004011CD                 call    signal
.text:004011D2                 cmp     eax, 1
.text:004011D5                 jz      short loc_4011F9
.text:004011D7                 test    eax, eax
.text:004011D9                 jz      short loc_4011B0
.text:004011DB                 mov     [esp+18h+Signal], 0Bh
.text:004011E2                 lea     esi, [esi+0]
.text:004011E9                 lea     edi, [edi+0]
.text:004011F0
.text:004011F0 loc_4011F0:                             ; CODE XREF: TopLevelExceptionFilter+BD↓j
.text:004011F0                 call    eax
.text:004011F2
.text:004011F2 loc_4011F2:                             ; CODE XREF: TopLevelExceptionFilter+8D↓j
.text:004011F2                                         ; TopLevelExceptionFilter+D5↓j ...
.text:004011F2                 mov     ebx, 0FFFFFFFFh
.text:004011F7                 jmp     short loc_4011B0
.text:004011F9 ; ---------------------------------------------------------------------------
.text:004011F9
.text:004011F9 loc_4011F9:                             ; CODE XREF: TopLevelExceptionFilter+55↑j
.text:004011F9                 mov     [esp+18h+Function], 1 ; Function
.text:00401201                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:00401208                 call    signal
.text:0040120D                 jmp     short loc_4011F2
.text:0040120D ; ---------------------------------------------------------------------------
.text:0040120F                 align 10h
.text:00401210
.text:00401210 loc_401210:                             ; CODE XREF: TopLevelExceptionFilter+27↑j
.text:00401210                                         ; TopLevelExceptionFilter+E5↓j
.text:00401210                 mov     esi, 1
.text:00401215
.text:00401215 loc_401215:                             ; CODE XREF: TopLevelExceptionFilter+EC↓j
.text:00401215                 mov     [esp+18h+Function], 0 ; Function
.text:0040121D                 mov     [esp+18h+Signal], 8 ; Signal
.text:00401224                 call    signal
.text:00401229                 cmp     eax, 1
.text:0040122C                 jz      short loc_40123F
.text:0040122E                 test    eax, eax
.text:00401230                 jz      loc_4011B0
.text:00401236                 mov     [esp+18h+Signal], 8
.text:0040123D                 jmp     short loc_4011F0
.text:0040123F ; ---------------------------------------------------------------------------
.text:0040123F
.text:0040123F loc_40123F:                             ; CODE XREF: TopLevelExceptionFilter+AC↑j
.text:0040123F                 mov     [esp+18h+Function], 1 ; Function
.text:00401247                 mov     [esp+18h+Signal], 8 ; Signal
.text:0040124E                 call    signal
.text:00401253                 test    esi, esi
.text:00401255                 jz      short loc_4011F2
.text:00401257                 call    sub_40F4A0
.text:0040125C                 jmp     short loc_4011F2
.text:0040125C ; ---------------------------------------------------------------------------
.text:0040125E                 align 10h
.text:00401260
.text:00401260 loc_401260:                             ; CODE XREF: TopLevelExceptionFilter+1C↑j
.text:00401260                 cmp     eax, 0C0000093h
.text:00401265                 jz      short loc_401210
.text:00401267                 cmp     eax, 0C0000094h
.text:0040126C                 jz      short loc_401215
.text:0040126E                 jmp     loc_4011B0
.text:0040126E TopLevelExceptionFilter endp
.text:0040126E
.text:0040126E ; ---------------------------------------------------------------------------
.text:00401273                 align 10h
.text:00401280 dword_401280    dd 6C6C61h, 746F6F62h, 756F6300h, 6400746Eh, 646165h, 64616568h
.text:00401280                                         ; DATA XREF: .text:off_401300↓o
.text:00401280                 dd 676E69h, 656C6469h, 676F6C00h, 6C006E69h, 756B6F6Fh
.text:00401280                 dd 656D0070h, 67617373h, 656D0065h, 70006773h, 65636F72h
.text:00401280                 dd 72007373h, 656C6E75h, 6C6576h, 726F6873h, 69740074h
.text:00401280                 dd 7500656Dh, 73726573h, 69727700h, 6C626174h, 65680065h
.text:00401280                 dd 7600706Ch, 69737265h, 8D006E6Fh, 0B6h, 27BC8D00h, 0
.text:00401300 off_401300      dd offset dword_401280  ; DATA XREF: sub_401B10+78↓o
.text:00401304                 dd 2 dup(0)
.text:0040130C                 dd 61h, 401284h, 2 dup(0)
.text:0040131C                 dd 62h, 401289h, 2 dup(0)
.text:0040132C                 dd 71h, 40128Fh, 2 dup(0)
.text:0040133C                 dd 64h, 401294h, 2 dup(0)
.text:0040134C                 dd 48h, 40129Ch, 2 dup(0)
.text:0040135C                 dd 69h, 4012A1h, 2 dup(0)
.text:0040136C                 dd 6Ch, 4012A7h, 2 dup(0)
.text:0040137C                 dd 80h, 4012AEh, 2 dup(0)
.text:0040138C                 dd 54h, 4012B6h, 2 dup(0)
.text:0040139C                 dd 54h, 4012BBh, 2 dup(0)
.text:004013AC                 dd 70h, 4012C3h, 2 dup(0)
.text:004013BC                 dd 72h, 4012CCh, 2 dup(0)
.text:004013CC                 dd 73h, 4012D2h, 2 dup(0)
.text:004013DC                 dd 74h, 4012D7h, 2 dup(0)
.text:004013EC                 dd 75h, 4012DDh, 2 dup(0)
.text:004013FC                 dd 54h, 4012E6h, 2 dup(0)
.text:0040140C                 dd 0FFFFFF7Eh, 4012EBh, 2 dup(0)
.text:0040141C                 dd 0FFFFFF7Dh, 4 dup(0)
.text:00401430 ; const char Locale
.text:00401430 Locale          db 0                    ; DATA XREF: sub_401B10+22↓o
.text:00401430                                         ; sub_401B10+54B↓o ...
.text:00401431                 db 0EBh, 0Dh, 90h
.text:00401434                 align 10h
.text:00401440 aCProgra1Coreut db 'c:/progra~1/CoreUtils/share/locale',0
.text:00401440                                         ; DATA XREF: sub_401B10+3C↓o
.text:00401463 aCoreutils      db 'coreutils',0        ; DATA XREF: sub_401B10+44↓o
.text:00401463                                         ; sub_401B10+51↓o
.text:0040146D ; const char aAbdilmpqrstuwh[]
.text:0040146D aAbdilmpqrstuwh db 'abdilmpqrstuwHT',0  ; DATA XREF: sub_401B10+80↓o
.text:0040147D                 align 10h
.text:00401480 aTrySHelpForMor db 'Try `%s --help',27h,' for more information.',0Ah,0
.text:00401480                                         ; DATA XREF: sub_401B10:loc_401BF1↓o
.text:00401480                                         ; .text:0040234C↓o
.text:004014A7 aMichaelStone   db 'Michael Stone',0    ; DATA XREF: sub_401B10+12E↓o
.text:004014B5 aDavidMackenzie db 'David MacKenzie',0  ; DATA XREF: sub_401B10+136↓o
.text:004014C5 aJosephArceneau db 'Joseph Arceneaux',0 ; DATA XREF: sub_401B10+141↓o
.text:004014D6 a530            db '5.3.0',0            ; DATA XREF: sub_401B10+149↓o
.text:004014DC aGnuCoreutils   db 'GNU coreutils',0    ; DATA XREF: sub_401B10+151↓o
.text:004014EA ; const FILE stru_4014EA
.text:004014EA stru_4014EA     FILE <6F6877h, 90909090h, 90909090h, 90909090h, 90909090h, 73559090h, \
.text:004014EA                                         ; DATA XREF: sub_401B10+159↓o
.text:004014EA                       3A656761h, 20732520h>
.text:0040150A                 db  5Bh ; [
.text:0040150B                 db  4Fh ; O
.text:0040150C                 db  50h ; P
.text:0040150D                 db  54h ; T
.text:0040150E                 db  49h ; I
.text:0040150F                 db  4Fh ; O
.text:00401510                 db  4Eh ; N
.text:00401511                 db  5Dh ; ]
.text:00401512                 db  2Eh ; .
.text:00401513                 db  2Eh ; .
.text:00401514                 db  2Eh ; .
.text:00401515                 db  20h
.text:00401516                 db  5Bh ; [
.text:00401517                 db  20h
.text:00401518                 db  46h ; F
.text:00401519                 db  49h ; I
.text:0040151A                 db  4Ch ; L
.text:0040151B                 db  45h ; E
.text:0040151C                 db  20h
.text:0040151D                 db  7Ch ; |
.text:0040151E                 db  20h
.text:0040151F                 db  41h ; A
.text:00401520                 db  52h ; R
.text:00401521                 db  47h ; G
.text:00401522                 db  31h ; 1
.text:00401523                 db  20h
.text:00401524                 db  41h ; A
.text:00401525                 db  52h ; R
.text:00401526                 db  47h ; G
.text:00401527                 db  32h ; 2
.text:00401528                 db  20h
.text:00401529                 db  5Dh ; ]
.text:0040152A                 db  0Ah
.text:0040152B                 db    0
.text:0040152C                 align 20h
.text:00401540 aAAllSameAsBDLo db 0Ah                  ; DATA XREF: sub_401B10+191↓o
.text:00401540                                         ; .text:0040239F↓o
.text:00401540                 db '  -a, --all         same as -b -d --login -p -r -t -T -u',0Ah
.text:00401540                 db '  -b, --boot        time of last system boot',0Ah
.text:00401540                 db '  -d, --dead        print dead processes',0Ah
.text:00401540                 db '  -H, --heading     print line of column headings',0Ah,0
.text:00401603                 align 20h
.text:00401620 aIIdleAddIdleTi db '  -i, --idle        add idle time as HOURS:MINUTES, . or old',0Ah
.text:00401620                                         ; DATA XREF: sub_401B10+1B3↓o
.text:00401620                                         ; .text:004023C1↓o
.text:00401620                 db '                    (deprecated, use -u)',0Ah
.text:00401620                 db '  -l, --login       print system login processes',0Ah,0
.text:004016B8                 align 10h
.text:004016C0 aLookupAttemptT db '      --lookup      attempt to canonicalize hostnames via DNS',0Ah
.text:004016C0                                         ; DATA XREF: sub_401B10+1D5↓o
.text:004016C0                                         ; .text:004023E3↓o
.text:004016C0                 db '  -m                only hostname and user associated with stdin',0Ah
.text:004016C0                 db '  -p, --process     print active processes spawned by init',0Ah,0
.text:0040177B                 align 10h
.text:00401780 aQCountAllLogin db '  -q, --count       all login names and number of users logged on'
.text:00401780                                         ; DATA XREF: sub_401B10+1F7↓o
.text:00401780                                         ; .text:00402405↓o
.text:00401780                 db 0Ah
.text:00401780                 db '  -r, --runlevel    print current runlevel',0Ah
.text:00401780                 db '  -s, --short       print only name, line, and time (default)',0Ah
.text:00401780                 db '  -t, --time        print last system clock change',0Ah,0
.text:0040185F                 align 10h
.text:00401860 aTWMesgAddUserS db '  -T, -w, --mesg    add user',27h,'s message status as +, - or ?',0Ah
.text:00401860                                         ; DATA XREF: sub_401B10+219↓o
.text:00401860                                         ; .text:00402427↓o
.text:00401860                 db '  -u, --users       list users logged in',0Ah
.text:00401860                 db '      --message     same as -T',0Ah
.text:00401860                 db '      --writable    same as -T',0Ah,0
.text:00401903                 align 20h
.text:00401920 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.text:00401920                                         ; DATA XREF: sub_401B10+23B↓o
.text:00401920                                         ; .text:00402449↓o
.text:0040194D                 align 20h
.text:00401960 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.text:00401960                                         ; DATA XREF: sub_401B10+25D↓o
.text:00401960                                         ; .text:0040246B↓o
.text:00401996                 align 10h
.text:004019A0 aIfFileIsNotSpe db 0Ah                  ; DATA XREF: sub_401B10+27F↓o
.text:004019A0                                         ; .text:0040248D↓o
.text:004019A0                 db 'If FILE is not specified, use %s.  %s as FILE is common.',0Ah
.text:004019A0                 db 'If ARG1 ARG2 given, -m presumed: `am i',27h,' or `mom likes',27h,' '
.text:004019A0                 db 'are usual.',0Ah,0
.text:00401A1D aVarLogWtmp     db '/var/log/wtmp',0    ; DATA XREF: sub_401B10+28C↓o
.text:00401A1D                                         ; .text:0040249A↓o
.text:00401A2B ; const char aVarRunUtmp[]
.text:00401A2B aVarRunUtmp     db '/var/run/utmp',0    ; DATA XREF: sub_401B10+294↓o
.text:00401A2B                                         ; sub_401B10+51D↓o ...
.text:00401A39 aReportBugsToS  db 0Ah                  ; DATA XREF: sub_401B10+2A4↓o
.text:00401A39                                         ; .text:004024B2↓o
.text:00401A39                 db 'Report bugs to <%s>.',0Ah,0
.text:00401A50 aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.text:00401A50                                         ; DATA XREF: sub_401B10+2B1↓o
.text:00401A50                                         ; .text:004024BF↓o
.text:00401A66                 align 20h
.text:00401A80 aWarningIWillBe db 'Warning: -i will be removed in a future release;   use -u instead'
.text:00401A80                                         ; DATA XREF: sub_401B10+345↓o
.text:00401A80                 db 0
.text:00401AC2 aYMDHM          db '%Y-%m-%d %H:%M',0   ; DATA XREF: sub_401B10+496↓o
.text:00401AD1 aExtraOperandS  db 'extra operand %s',0 ; DATA XREF: sub_401B10+4D8↓o
.text:00401AE2 aUsersLu        db 0Ah                  ; DATA XREF: sub_401B10:loc_402080↓o
.text:00401AE2                                         ; sub_401B10:loc_402189↓o ...
.text:00401AE2                 db '# users=%lu',0Ah,0
.text:00401AF0 ; const char Format[]
.text:00401AF0 Format          db '%s%s',0             ; DATA XREF: sub_401B10+5AD↓o
.text:00401AF0                                         ; sub_401B10+6AE↓o ...
.text:00401AF5 asc_401AF5      db ' ',0                ; DATA XREF: sub_401B10+5C8↓o
.text:00401AF5                                         ; sub_401B10+6C9↓o ...
.text:00401AF7 ; const char aS[]
.text:00401AF7 aS              db '%s',0               ; DATA XREF: sub_401B10+5F2↓o
.text:00401AF7                                         ; sub_401B10+6F3↓o ...
.text:00401AFA aBEHM           db '%b %e %H:%M',0      ; DATA XREF: sub_401B10:loc_402317↓o
.text:00401B06                 align 10h
.text:00401B10
.text:00401B10 ; =============== S U B R O U T I N E =======================================
.text:00401B10
.text:00401B10 ; Attributes: noreturn bp-based frame fuzzy-sp
.text:00401B10
.text:00401B10 sub_401B10      proc near               ; CODE XREF: sub_401080+E5↑p
.text:00401B10
.text:00401B10 Category        = dword ptr -68h
.text:00401B10 Locale          = dword ptr -64h
.text:00401B10 var_60          = dword ptr -60h
.text:00401B10 var_5C          = byte ptr -5Ch
.text:00401B10 var_58          = byte ptr -58h
.text:00401B10 var_54          = dword ptr -54h
.text:00401B10 var_50          = dword ptr -50h
.text:00401B10 var_4C          = dword ptr -4Ch
.text:00401B10 var_3C          = dword ptr -3Ch
.text:00401B10 var_38          = dword ptr -38h
.text:00401B10 var_34          = dword ptr -34h
.text:00401B10 var_30          = dword ptr -30h
.text:00401B10 var_2C          = dword ptr -2Ch
.text:00401B10 var_28          = dword ptr -28h
.text:00401B10 var_24          = dword ptr -24h
.text:00401B10 Block           = dword ptr -20h
.text:00401B10 var_1C          = dword ptr -1Ch
.text:00401B10 var_18          = dword ptr -18h
.text:00401B10 var_14          = dword ptr -14h
.text:00401B10 var_10          = dword ptr -10h
.text:00401B10 arg_0           = dword ptr  8
.text:00401B10 arg_4           = dword ptr  0Ch
.text:00401B10
.text:00401B10                 push    ebp
.text:00401B11                 xor     eax, eax
.text:00401B13                 mov     ebp, esp
.text:00401B15                 push    edi
.text:00401B16                 push    esi
.text:00401B17                 push    ebx
.text:00401B18                 sub     esp, 5Ch
.text:00401B1B                 mov     bl, 1
.text:00401B1D                 mov     esi, [ebp+arg_4]
.text:00401B20                 and     esp, 0FFFFFFF0h
.text:00401B23                 mov     edi, [ebp+arg_0]
.text:00401B26                 call    __alloca
.text:00401B2B                 call    sub_40F540
.text:00401B30                 mov     edx, [esi]
.text:00401B32                 mov     [esp+68h+Locale], offset Locale ; Locale
.text:00401B3A                 mov     [esp+68h+Category], 0 ; Category
.text:00401B41                 mov     ds:dword_4127F0, edx
.text:00401B47                 call    setlocale
.text:00401B4C                 mov     [esp+68h+Locale], offset aCProgra1Coreut ; "c:/progra~1/CoreUtils/share/locale"
.text:00401B54                 mov     [esp+68h+Category], offset aCoreutils ; "coreutils"
.text:00401B5B                 call    ds:__imp_libintl_bindtextdomain
.text:00401B61                 mov     [esp+68h+Category], offset aCoreutils ; "coreutils"
.text:00401B68                 call    ds:libintl_textdomain
.text:00401B6E                 mov     [esp+68h+Category], offset sub_404F90 ; void (__cdecl *)()
.text:00401B75                 call    sub_401040
.text:00401B7A                 lea     esi, [esi+0]
.text:00401B80
.text:00401B80 loc_401B80:                             ; CODE XREF: sub_401B10+DF↓j
.text:00401B80                                         ; sub_401B10+332↓j ...
.text:00401B80                 mov     dword ptr [esp+68h+var_58], 0 ; int
.text:00401B88                 mov     dword ptr [esp+68h+var_5C], offset off_401300 ; char
.text:00401B90                 mov     [esp+68h+var_60], offset aAbdilmpqrstuwh ; "abdilmpqrstuwHT"
.text:00401B98                 mov     [esp+68h+Locale], esi ; int
.text:00401B9C                 mov     [esp+68h+Category], edi ; int
.text:00401B9F                 call    sub_404E20
.text:00401BA4                 cmp     eax, 0FFFFFFFFh
.text:00401BA7                 jz      loc_401F70
.text:00401BAD                 cmp     eax, 6Ch ; 'l'
.text:00401BB0                 jz      loc_401F64
.text:00401BB6                 cmp     eax, 6Ch ; 'l'
.text:00401BB9                 jg      loc_401EC0
.text:00401BBF                 cmp     eax, 54h ; 'T'
.text:00401BC2                 jz      loc_401EB0
.text:00401BC8                 cmp     eax, 54h ; 'T'
.text:00401BCB                 jg      loc_401DD6
.text:00401BD1                 cmp     eax, 0FFFFFF7Eh
.text:00401BD6                 jz      loc_401C82
.text:00401BDC                 cmp     eax, 0FFFFFF7Eh
.text:00401BE1                 jle     short loc_401C29
.text:00401BE3                 cmp     eax, 48h ; 'H'
.text:00401BE6                 jnz     short loc_401BF1
.text:00401BE8                 mov     ds:byte_4120D0, 1
.text:00401BEF                 jmp     short loc_401B80
.text:00401BF1 ; ---------------------------------------------------------------------------
.text:00401BF1
.text:00401BF1 loc_401BF1:                             ; CODE XREF: sub_401B10+D6↑j
.text:00401BF1                                         ; sub_401B10+11E↓j ...
.text:00401BF1                 mov     [esp+68h+Category], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:00401BF8                 call    ds:libintl_gettext
.text:00401BFE                 mov     edi, ds:_iob
.text:00401C04                 mov     ebx, ds:dword_4127F0
.text:00401C0A                 add     edi, 40h ; '@'
.text:00401C0D                 mov     [esp+68h+var_60], ebx
.text:00401C11                 mov     [esp+68h+Locale], eax ; Format
.text:00401C15                 mov     [esp+68h+Category], edi ; Stream
.text:00401C18                 call    fprintf
.text:00401C1D                 mov     [esp+68h+Category], 1 ; Code
.text:00401C24
.text:00401C24 loc_401C24:                             ; CODE XREF: sub_401B10+170↓j
.text:00401C24                 call    exit
.text:00401C29 ; ---------------------------------------------------------------------------
.text:00401C29
.text:00401C29 loc_401C29:                             ; CODE XREF: sub_401B10+D1↑j
.text:00401C29                 cmp     eax, 0FFFFFF7Dh
.text:00401C2E                 jnz     short loc_401BF1
.text:00401C30                 mov     [esp+68h+var_4C], 0
.text:00401C38                 mov     edx, ds:_iob
.text:00401C3E                 mov     [esp+68h+var_50], offset aMichaelStone ; "Michael Stone"
.text:00401C46                 mov     [esp+68h+var_54], offset aDavidMackenzie ; "David MacKenzie"
.text:00401C4E                 add     edx, 20h ; ' '
.text:00401C51                 mov     dword ptr [esp+68h+var_58], offset aJosephArceneau ; "Joseph Arceneaux"
.text:00401C59                 mov     dword ptr [esp+68h+var_5C], offset a530 ; "5.3.0"
.text:00401C61                 mov     [esp+68h+var_60], offset aGnuCoreutils ; "GNU coreutils"
.text:00401C69                 mov     [esp+68h+Locale], offset stru_4014EA ; FILE *
.text:00401C71                 mov     [esp+68h+Category], edx ; FILE *
.text:00401C74                 call    sub_404DE0
.text:00401C79
.text:00401C79 loc_401C79:                             ; CODE XREF: sub_401B10+2C1↓j
.text:00401C79                                         ; sub_401B10+597↓j
.text:00401C79                 mov     [esp+68h+Category], 0
.text:00401C80                 jmp     short loc_401C24
.text:00401C82 ; ---------------------------------------------------------------------------
.text:00401C82
.text:00401C82 loc_401C82:                             ; CODE XREF: sub_401B10+C6↑j
.text:00401C82                 mov     [esp+68h+Category], (offset stru_4014EA._charbuf+2)
.text:00401C89                 call    ds:libintl_gettext
.text:00401C8F                 mov     edi, ds:dword_4127F0
.text:00401C95                 mov     [esp+68h+Category], eax ; Format
.text:00401C98                 mov     [esp+68h+Locale], edi
.text:00401C9C                 call    printf
.text:00401CA1                 mov     [esp+68h+Category], offset aAAllSameAsBDLo ; "\n  -a, --all         same as -b -d --l"...
.text:00401CA8                 call    ds:libintl_gettext
.text:00401CAE                 mov     esi, ds:_iob
.text:00401CB4                 add     esi, 20h ; ' '
.text:00401CB7                 mov     [esp+68h+Locale], esi ; Stream
.text:00401CBB                 mov     [esp+68h+Category], eax ; Buffer
.text:00401CBE                 call    fputs
.text:00401CC3                 mov     [esp+68h+Category], offset aIIdleAddIdleTi ; "  -i, --idle        add idle time as HO"...
.text:00401CCA                 call    ds:libintl_gettext
.text:00401CD0                 mov     ebx, ds:_iob
.text:00401CD6                 add     ebx, 20h ; ' '
.text:00401CD9                 mov     [esp+68h+Locale], ebx ; Stream
.text:00401CDD                 mov     [esp+68h+Category], eax ; Buffer
.text:00401CE0                 call    fputs
.text:00401CE5                 mov     [esp+68h+Category], offset aLookupAttemptT ; "      --lookup      attempt to canonica"...
.text:00401CEC                 call    ds:libintl_gettext
.text:00401CF2                 mov     ecx, ds:_iob
.text:00401CF8                 add     ecx, 20h ; ' '
.text:00401CFB                 mov     [esp+68h+Locale], ecx ; Stream
.text:00401CFF                 mov     [esp+68h+Category], eax ; Buffer
.text:00401D02                 call    fputs
.text:00401D07                 mov     [esp+68h+Category], offset aQCountAllLogin ; "  -q, --count       all login names and"...
.text:00401D0E                 call    ds:libintl_gettext
.text:00401D14                 mov     edi, ds:_iob
.text:00401D1A                 add     edi, 20h ; ' '
.text:00401D1D                 mov     [esp+68h+Locale], edi ; Stream
.text:00401D21                 mov     [esp+68h+Category], eax ; Buffer
.text:00401D24                 call    fputs
.text:00401D29                 mov     [esp+68h+Category], offset aTWMesgAddUserS ; "  -T, -w, --mesg    add user's message "...
.text:00401D30                 call    ds:libintl_gettext
.text:00401D36                 mov     esi, ds:_iob
.text:00401D3C                 add     esi, 20h ; ' '
.text:00401D3F                 mov     [esp+68h+Locale], esi ; Stream
.text:00401D43                 mov     [esp+68h+Category], eax ; Buffer
.text:00401D46                 call    fputs
.text:00401D4B                 mov     [esp+68h+Category], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:00401D52                 call    ds:libintl_gettext
.text:00401D58                 mov     ebx, ds:_iob
.text:00401D5E                 add     ebx, 20h ; ' '
.text:00401D61                 mov     [esp+68h+Locale], ebx ; Stream
.text:00401D65                 mov     [esp+68h+Category], eax ; Buffer
.text:00401D68                 call    fputs
.text:00401D6D                 mov     [esp+68h+Category], offset aVersionOutputV ; "      --version  output version informa"...
.text:00401D74                 call    ds:libintl_gettext
.text:00401D7A                 mov     ecx, ds:_iob
.text:00401D80                 add     ecx, 20h ; ' '
.text:00401D83                 mov     [esp+68h+Locale], ecx ; Stream
.text:00401D87                 mov     [esp+68h+Category], eax ; Buffer
.text:00401D8A                 call    fputs
.text:00401D8F                 mov     [esp+68h+Category], offset aIfFileIsNotSpe ; "\nIf FILE is not specified, use %s.  %s"...
.text:00401D96                 call    ds:libintl_gettext
.text:00401D9C                 mov     [esp+68h+var_60], offset aVarLogWtmp ; "/var/log/wtmp"
.text:00401DA4                 mov     [esp+68h+Locale], offset aVarRunUtmp ; "/var/run/utmp"
.text:00401DAC                 mov     [esp+68h+Category], eax ; Format
.text:00401DAF                 call    printf
.text:00401DB4                 mov     [esp+68h+Category], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:00401DBB                 call    ds:libintl_gettext
.text:00401DC1                 mov     [esp+68h+Locale], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:00401DC9                 mov     [esp+68h+Category], eax ; Format
.text:00401DCC                 call    printf
.text:00401DD1                 jmp     loc_401C79
.text:00401DD6 ; ---------------------------------------------------------------------------
.text:00401DD6
.text:00401DD6 loc_401DD6:                             ; CODE XREF: sub_401B10+BB↑j
.text:00401DD6                 cmp     eax, 62h ; 'b'
.text:00401DD9                 jz      loc_401EA2
.text:00401DDF                 cmp     eax, 62h ; 'b'
.text:00401DE2                 jg      short loc_401E47
.text:00401DE4                 cmp     eax, 61h ; 'a'
.text:00401DE7                 jnz     loc_401BF1
.text:00401DED                 mov     ds:byte_412100, 1
.text:00401DF4                 mov     ds:byte_412110, 1
.text:00401DFB                 mov     ds:byte_412120, 1
.text:00401E02                 mov     ds:byte_412130, 1
.text:00401E09                 mov     ds:byte_412150, 1
.text:00401E10                 mov     ds:byte_412140, 1
.text:00401E17                 mov     ds:byte_412160, 1
.text:00401E1E                 mov     ds:byte_4120E0, 1
.text:00401E25
.text:00401E25 loc_401E25:                             ; CODE XREF: sub_401B10+390↓j
.text:00401E25                 mov     ds:byte_4120C0, 1
.text:00401E2C                 mov     ds:byte_4120F0, 1
.text:00401E33                 lea     esi, [esi+0]
.text:00401E39                 lea     edi, [edi+0]
.text:00401E40
.text:00401E40 loc_401E40:                             ; CODE XREF: sub_401B10+387↓j
.text:00401E40                                         ; sub_401B10+399↓j ...
.text:00401E40                 xor     ebx, ebx
.text:00401E42                 jmp     loc_401B80
.text:00401E47 ; ---------------------------------------------------------------------------
.text:00401E47
.text:00401E47 loc_401E47:                             ; CODE XREF: sub_401B10+2D2↑j
.text:00401E47                 cmp     eax, 64h ; 'd'
.text:00401E4A                 jz      short loc_401E99
.text:00401E4C                 cmp     eax, 69h ; 'i'
.text:00401E4F                 jnz     loc_401BF1
.text:00401E55                 mov     [esp+68h+Category], offset aWarningIWillBe ; "Warning: -i will be removed in a future"...
.text:00401E5C                 call    ds:libintl_gettext
.text:00401E62                 mov     [esp+68h+Locale], 0 ; ErrorMessage
.text:00401E6A                 mov     [esp+68h+Category], 0 ; Code
.text:00401E71                 mov     [esp+68h+var_60], eax ; char *
.text:00401E75                 call    sub_406920
.text:00401E7A
.text:00401E7A loc_401E7A:                             ; CODE XREF: sub_401B10+413↓j
.text:00401E7A                 mov     ds:byte_412160, 1
.text:00401E81                 jmp     short loc_401E90
.text:00401E81 ; ---------------------------------------------------------------------------
.text:00401E83                 align 10h
.text:00401E90
.text:00401E90 loc_401E90:                             ; CODE XREF: sub_401B10+371↑j
.text:00401E90                                         ; sub_401B10+3F2↓j ...
.text:00401E90                 mov     ds:byte_4120C0, 1
.text:00401E97                 jmp     short loc_401E40
.text:00401E99 ; ---------------------------------------------------------------------------
.text:00401E99
.text:00401E99 loc_401E99:                             ; CODE XREF: sub_401B10+33A↑j
.text:00401E99                 mov     ds:byte_412110, 1
.text:00401EA0                 jmp     short loc_401E25
.text:00401EA2 ; ---------------------------------------------------------------------------
.text:00401EA2
.text:00401EA2 loc_401EA2:                             ; CODE XREF: sub_401B10+2C9↑j
.text:00401EA2                 mov     ds:byte_412100, 1
.text:00401EA9                 jmp     short loc_401E40
.text:00401EA9 ; ---------------------------------------------------------------------------
.text:00401EAB                 align 10h
.text:00401EB0
.text:00401EB0 loc_401EB0:                             ; CODE XREF: sub_401B10+B2↑j
.text:00401EB0                                         ; sub_401B10+421↓j
.text:00401EB0                 mov     ds:byte_4120E0, 1
.text:00401EB7                 jmp     loc_401B80
.text:00401EB7 ; ---------------------------------------------------------------------------
.text:00401EBC                 align 10h
.text:00401EC0
.text:00401EC0 loc_401EC0:                             ; CODE XREF: sub_401B10+A9↑j
.text:00401EC0                 cmp     eax, 73h ; 's'
.text:00401EC3                 jz      loc_401F58
.text:00401EC9                 cmp     eax, 73h ; 's'
.text:00401ECC                 jg      short loc_401F20
.text:00401ECE                 cmp     eax, 70h ; 'p'
.text:00401ED1                 jz      short loc_401F10
.text:00401ED3                 cmp     eax, 70h ; 'p'
.text:00401ED6                 jg      short loc_401EED
.text:00401ED8                 cmp     eax, 6Dh ; 'm'
.text:00401EDB                 jnz     loc_401BF1
.text:00401EE1                 mov     ds:byte_412170, 1
.text:00401EE8                 jmp     loc_401B80
.text:00401EED ; ---------------------------------------------------------------------------
.text:00401EED
.text:00401EED loc_401EED:                             ; CODE XREF: sub_401B10+3C6↑j
.text:00401EED                 cmp     eax, 71h ; 'q'
.text:00401EF0                 jz      short loc_401F04
.text:00401EF2                 cmp     eax, 72h ; 'r'
.text:00401EF5                 jnz     loc_401BF1
.text:00401EFB                 mov     ds:byte_412150, 1
.text:00401F02                 jmp     short loc_401E90
.text:00401F04 ; ---------------------------------------------------------------------------
.text:00401F04
.text:00401F04 loc_401F04:                             ; CODE XREF: sub_401B10+3E0↑j
.text:00401F04                 mov     ds:byte_4120A0, 1
.text:00401F0B                 jmp     loc_401B80
.text:00401F10 ; ---------------------------------------------------------------------------
.text:00401F10
.text:00401F10 loc_401F10:                             ; CODE XREF: sub_401B10+3C1↑j
.text:00401F10                 mov     ds:byte_412130, 1
.text:00401F17                 jmp     loc_401E40
.text:00401F17 ; ---------------------------------------------------------------------------
.text:00401F1C                 align 10h
.text:00401F20
.text:00401F20 loc_401F20:                             ; CODE XREF: sub_401B10+3BC↑j
.text:00401F20                 cmp     eax, 75h ; 'u'
.text:00401F23                 jz      loc_401E7A
.text:00401F29                 cmp     eax, 75h ; 'u'
.text:00401F2C                 jl      short loc_401F4C
.text:00401F2E                 cmp     eax, 77h ; 'w'
.text:00401F31                 jz      loc_401EB0
.text:00401F37                 add     eax, 0FFFFFF80h
.text:00401F3A                 jnz     loc_401BF1
.text:00401F40                 mov     ds:byte_412090, 1
.text:00401F47                 jmp     loc_401B80
.text:00401F4C ; ---------------------------------------------------------------------------
.text:00401F4C
.text:00401F4C loc_401F4C:                             ; CODE XREF: sub_401B10+41C↑j
.text:00401F4C                 mov     ds:byte_412140, 1
.text:00401F53                 jmp     loc_401E40
.text:00401F58 ; ---------------------------------------------------------------------------
.text:00401F58
.text:00401F58 loc_401F58:                             ; CODE XREF: sub_401B10+3B3↑j
.text:00401F58                 mov     ds:byte_4120B0, 1
.text:00401F5F                 jmp     loc_401B80
.text:00401F64 ; ---------------------------------------------------------------------------
.text:00401F64
.text:00401F64 loc_401F64:                             ; CODE XREF: sub_401B10+A0↑j
.text:00401F64                 mov     ds:byte_412120, 1
.text:00401F6B                 jmp     loc_401E90
.text:00401F70 ; ---------------------------------------------------------------------------
.text:00401F70
.text:00401F70 loc_401F70:                             ; CODE XREF: sub_401B10+97↑j
.text:00401F70                 test    bl, bl
.text:00401F72                 jz      short loc_401F82
.text:00401F74                 mov     ds:byte_412160, 1
.text:00401F7B                 mov     ds:byte_4120B0, 1
.text:00401F82
.text:00401F82 loc_401F82:                             ; CODE XREF: sub_401B10+462↑j
.text:00401F82                 cmp     ds:byte_4120F0, 0
.text:00401F89                 jz      short loc_401F92
.text:00401F8B                 mov     ds:byte_4120B0, 0
.text:00401F92
.text:00401F92 loc_401F92:                             ; CODE XREF: sub_401B10+479↑j
.text:00401F92                 mov     [esp+68h+Category], 5
.text:00401F99                 call    sub_4048B0
.text:00401F9E                 test    al, al
.text:00401FA0                 jz      loc_402317
.text:00401FA6                 mov     ecx, offset aYMDHM ; "%Y-%m-%d %H:%M"
.text:00401FAB                 mov     eax, 10h
.text:00401FB0                 mov     ds:dword_412180, ecx
.text:00401FB6                 mov     ds:dword_412190, eax
.text:00401FBB
.text:00401FBB loc_401FBB:                             ; CODE XREF: sub_401B10+81C↓j
.text:00401FBB                 mov     edx, dword_411020
.text:00401FC1                 mov     eax, edi
.text:00401FC3                 sub     eax, edx
.text:00401FC5                 cmp     eax, 1
.text:00401FC8                 jz      loc_402222
.text:00401FCE                 cmp     eax, 1
.text:00401FD1                 jle     loc_402121
.text:00401FD7                 cmp     eax, 2
.text:00401FDA                 jz      short loc_402018
.text:00401FDC
.text:00401FDC loc_401FDC:                             ; CODE XREF: sub_401B10+612↓j
.text:00401FDC                 mov     ecx, [esi+edx*4+8]
.text:00401FE0                 mov     [esp+68h+Category], ecx ; char *
.text:00401FE3                 call    sub_404870
.text:00401FE8                 mov     [esp+68h+Category], offset aExtraOperandS ; "extra operand %s"
.text:00401FEF                 mov     esi, eax
.text:00401FF1                 call    ds:libintl_gettext
.text:00401FF7                 mov     dword ptr [esp+68h+var_5C], esi ; char
.text:00401FFB                 mov     [esp+68h+Locale], 0 ; ErrorMessage
.text:00402003                 mov     [esp+68h+Category], 0 ; Code
.text:0040200A                 mov     [esp+68h+var_60], eax ; char *
.text:0040200E                 call    sub_406920
.text:00402013                 jmp     loc_401BF1
.text:00402018 ; ---------------------------------------------------------------------------
.text:00402018
.text:00402018 loc_402018:                             ; CODE XREF: sub_401B10+4CA↑j
.text:00402018                 mov     ds:byte_412170, 1
.text:0040201F                 lea     edx, [ebp+Block]
.text:00402022                 lea     ebx, [ebp+var_24]
.text:00402025                 mov     [esp+68h+var_60], edx ; int
.text:00402029                 mov     [esp+68h+Locale], ebx ; int
.text:0040202D                 mov     [esp+68h+Category], offset aVarRunUtmp ; "/var/run/utmp"
.text:00402034                 call    sub_403730
.text:00402039                 test    eax, eax
.text:0040203B                 jnz     loc_4020F5
.text:00402041
.text:00402041 loc_402041:                             ; CODE XREF: sub_401B10+60C↓j
.text:00402041                 cmp     ds:byte_4120A0, 0
.text:00402048                 jz      loc_4020E1
.text:0040204E                 mov     [ebp+var_38], 0
.text:00402055                 mov     esi, [ebp+var_24]
.text:00402058                 mov     edi, [ebp+Block]
.text:0040205B                 mov     [ebp+var_3C], offset Locale
.text:00402062                 dec     esi
.text:00402063                 cmp     esi, 0FFFFFFFFh
.text:00402066                 jz      short loc_402080
.text:00402068
.text:00402068 loc_402068:                             ; CODE XREF: sub_401B10+56E↓j
.text:00402068                 cmp     byte ptr [edi+2Ch], 0
.text:0040206C                 jz      short loc_402074
.text:0040206E                 cmp     word ptr [edi], 7
.text:00402072                 jz      short loc_4020AC
.text:00402074
.text:00402074 loc_402074:                             ; CODE XREF: sub_401B10+55C↑j
.text:00402074                                         ; sub_401B10+5CF↓j
.text:00402074                 dec     esi
.text:00402075                 add     edi, 180h
.text:0040207B                 cmp     esi, 0FFFFFFFFh
.text:0040207E                 jnz     short loc_402068
.text:00402080
.text:00402080 loc_402080:                             ; CODE XREF: sub_401B10+556↑j
.text:00402080                 mov     [esp+68h+Category], offset aUsersLu ; "\n# users=%lu\n"
.text:00402087                 call    ds:libintl_gettext
.text:0040208D                 mov     edi, [ebp+var_38]
.text:00402090                 mov     [esp+68h+Category], eax ; Format
.text:00402093                 mov     [esp+68h+Locale], edi
.text:00402097                 call    printf
.text:0040209C
.text:0040209C loc_40209C:                             ; CODE XREF: sub_401B10+5E3↓j
.text:0040209C                 mov     eax, [ebp+Block]
.text:0040209F
.text:0040209F loc_40209F:                             ; CODE XREF: sub_401B10+698↓j
.text:0040209F                                         ; sub_401B10+791↓j
.text:0040209F                 mov     [esp+68h+Category], eax ; Block
.text:004020A2                 call    free
.text:004020A7                 jmp     loc_401C79
.text:004020AC ; ---------------------------------------------------------------------------
.text:004020AC
.text:004020AC loc_4020AC:                             ; CODE XREF: sub_401B10+562↑j
.text:004020AC                 mov     [esp+68h+Category], edi
.text:004020AF                 call    sub_4036C0
.text:004020B4                 mov     [esp+68h+var_60], eax
.text:004020B8                 mov     ecx, [ebp+var_3C]
.text:004020BB                 mov     ebx, eax
.text:004020BD                 mov     [esp+68h+Category], offset Format ; "%s%s"
.text:004020C4                 mov     [esp+68h+Locale], ecx
.text:004020C8                 call    printf
.text:004020CD                 mov     [esp+68h+Category], ebx ; Block
.text:004020D0                 call    free
.text:004020D5                 inc     [ebp+var_38]
.text:004020D8                 mov     [ebp+var_3C], offset asc_401AF5 ; " "
.text:004020DF                 jmp     short loc_402074
.text:004020E1 ; ---------------------------------------------------------------------------
.text:004020E1
.text:004020E1 loc_4020E1:                             ; CODE XREF: sub_401B10+538↑j
.text:004020E1                 mov     edx, [ebp+Block]
.text:004020E4                 mov     ebx, [ebp+var_24]
.text:004020E7                 mov     [esp+68h+Locale], edx
.text:004020EB                 mov     [esp+68h+Category], ebx
.text:004020EE                 call    sub_402560
.text:004020F3                 jmp     short loc_40209C
.text:004020F5 ; ---------------------------------------------------------------------------
.text:004020F5
.text:004020F5 loc_4020F5:                             ; CODE XREF: sub_401B10+52B↑j
.text:004020F5                 call    _errno
.text:004020FA                 mov     dword ptr [esp+68h+var_5C], offset aVarRunUtmp ; "/var/run/utmp"
.text:00402102                 mov     [esp+68h+var_60], offset aS ; "%s"
.text:0040210A                 mov     esi, [eax]
.text:0040210C                 mov     [esp+68h+Category], 1 ; Code
.text:00402113                 mov     [esp+68h+Locale], esi ; ErrorMessage
.text:00402117                 call    sub_406920
.text:0040211C                 jmp     loc_402041
.text:00402121 ; ---------------------------------------------------------------------------
.text:00402121
.text:00402121 loc_402121:                             ; CODE XREF: sub_401B10+4C1↑j
.text:00402121                 inc     eax
.text:00402122                 jl      loc_401FDC
.text:00402128                 mov     [esp+68h+Category], offset aVarRunUtmp ; "/var/run/utmp"
.text:0040212F                 lea     edi, [ebp+var_10]
.text:00402132                 lea     esi, [ebp+var_14]
.text:00402135                 mov     [esp+68h+var_60], edi ; int
.text:00402139                 mov     [esp+68h+Locale], esi ; int
.text:0040213D                 call    sub_403730
.text:00402142                 test    eax, eax
.text:00402144                 jnz     loc_4021F6
.text:0040214A
.text:0040214A loc_40214A:                             ; CODE XREF: sub_401B10+70D↓j
.text:0040214A                 cmp     ds:byte_4120A0, 0
.text:00402151                 jz      loc_4021E2
.text:00402157                 mov     [ebp+var_28], 0
.text:0040215E                 mov     esi, [ebp+var_14]
.text:00402161                 mov     edi, [ebp+var_10]
.text:00402164                 mov     [ebp+var_2C], offset Locale
.text:0040216B                 dec     esi
.text:0040216C                 cmp     esi, 0FFFFFFFFh
.text:0040216F                 jz      short loc_402189
.text:00402171
.text:00402171 loc_402171:                             ; CODE XREF: sub_401B10+677↓j
.text:00402171                 cmp     byte ptr [edi+2Ch], 0
.text:00402175                 jz      short loc_40217D
.text:00402177                 cmp     word ptr [edi], 7
.text:0040217B                 jz      short loc_4021AD
.text:0040217D
.text:0040217D loc_40217D:                             ; CODE XREF: sub_401B10+665↑j
.text:0040217D                                         ; sub_401B10+6D0↓j
.text:0040217D                 dec     esi
.text:0040217E                 add     edi, 180h
.text:00402184                 cmp     esi, 0FFFFFFFFh
.text:00402187                 jnz     short loc_402171
.text:00402189
.text:00402189 loc_402189:                             ; CODE XREF: sub_401B10+65F↑j
.text:00402189                 mov     [esp+68h+Category], offset aUsersLu ; "\n# users=%lu\n"
.text:00402190                 call    ds:libintl_gettext
.text:00402196                 mov     ebx, [ebp+var_28]
.text:00402199                 mov     [esp+68h+Category], eax ; Format
.text:0040219C                 mov     [esp+68h+Locale], ebx
.text:004021A0                 call    printf
.text:004021A5
.text:004021A5 loc_4021A5:                             ; CODE XREF: sub_401B10+6E4↓j
.text:004021A5                 mov     eax, [ebp+var_10]
.text:004021A8                 jmp     loc_40209F
.text:004021AD ; ---------------------------------------------------------------------------
.text:004021AD
.text:004021AD loc_4021AD:                             ; CODE XREF: sub_401B10+66B↑j
.text:004021AD                 mov     [esp+68h+Category], edi
.text:004021B0                 call    sub_4036C0
.text:004021B5                 mov     [esp+68h+var_60], eax
.text:004021B9                 mov     ecx, [ebp+var_2C]
.text:004021BC                 mov     ebx, eax
.text:004021BE                 mov     [esp+68h+Category], offset Format ; "%s%s"
.text:004021C5                 mov     [esp+68h+Locale], ecx
.text:004021C9                 call    printf
.text:004021CE                 mov     [esp+68h+Category], ebx ; Block
.text:004021D1                 call    free
.text:004021D6                 inc     [ebp+var_28]
.text:004021D9                 mov     [ebp+var_2C], offset asc_401AF5 ; " "
.text:004021E0                 jmp     short loc_40217D
.text:004021E2 ; ---------------------------------------------------------------------------
.text:004021E2
.text:004021E2 loc_4021E2:                             ; CODE XREF: sub_401B10+641↑j
.text:004021E2                 mov     edi, [ebp+var_10]
.text:004021E5                 mov     esi, [ebp+var_14]
.text:004021E8                 mov     [esp+68h+Locale], edi
.text:004021EC                 mov     [esp+68h+Category], esi
.text:004021EF                 call    sub_402560
.text:004021F4                 jmp     short loc_4021A5
.text:004021F6 ; ---------------------------------------------------------------------------
.text:004021F6
.text:004021F6 loc_4021F6:                             ; CODE XREF: sub_401B10+634↑j
.text:004021F6                 call    _errno
.text:004021FB                 mov     dword ptr [esp+68h+var_5C], offset aVarRunUtmp ; "/var/run/utmp"
.text:00402203                 mov     [esp+68h+var_60], offset aS ; "%s"
.text:0040220B                 mov     edx, [eax]
.text:0040220D                 mov     [esp+68h+Category], 1 ; Code
.text:00402214                 mov     [esp+68h+Locale], edx ; ErrorMessage
.text:00402218                 call    sub_406920
.text:0040221D                 jmp     loc_40214A
.text:00402222 ; ---------------------------------------------------------------------------
.text:00402222
.text:00402222 loc_402222:                             ; CODE XREF: sub_401B10+4B8↑j
.text:00402222                 mov     ebx, [esi+edx*4]
.text:00402225                 lea     ecx, [ebp+var_18]
.text:00402228                 lea     edx, [ebp+var_1C]
.text:0040222B                 mov     [esp+68h+var_60], ecx ; int
.text:0040222F                 mov     [esp+68h+Locale], edx ; int
.text:00402233                 mov     [esp+68h+Category], ebx ; char *
.text:00402236                 call    sub_403730
.text:0040223B                 test    eax, eax
.text:0040223D                 jnz     loc_4022EF
.text:00402243
.text:00402243 loc_402243:                             ; CODE XREF: sub_401B10+802↓j
.text:00402243                 cmp     ds:byte_4120A0, 0
.text:0040224A                 jz      loc_4022DB
.text:00402250                 mov     [ebp+var_30], 0
.text:00402257                 mov     esi, [ebp+var_1C]
.text:0040225A                 mov     edi, [ebp+var_18]
.text:0040225D                 mov     [ebp+var_34], offset Locale
.text:00402264                 dec     esi
.text:00402265                 cmp     esi, 0FFFFFFFFh
.text:00402268                 jz      short loc_402282
.text:0040226A
.text:0040226A loc_40226A:                             ; CODE XREF: sub_401B10+770↓j
.text:0040226A                 cmp     byte ptr [edi+2Ch], 0
.text:0040226E                 jz      short loc_402276
.text:00402270                 cmp     word ptr [edi], 7
.text:00402274                 jz      short loc_4022A6
.text:00402276
.text:00402276 loc_402276:                             ; CODE XREF: sub_401B10+75E↑j
.text:00402276                                         ; sub_401B10+7C9↓j
.text:00402276                 dec     esi
.text:00402277                 add     edi, 180h
.text:0040227D                 cmp     esi, 0FFFFFFFFh
.text:00402280                 jnz     short loc_40226A
.text:00402282
.text:00402282 loc_402282:                             ; CODE XREF: sub_401B10+758↑j
.text:00402282                 mov     [esp+68h+Category], offset aUsersLu ; "\n# users=%lu\n"
.text:00402289                 call    ds:libintl_gettext
.text:0040228F                 mov     esi, [ebp+var_30]
.text:00402292                 mov     [esp+68h+Category], eax ; Format
.text:00402295                 mov     [esp+68h+Locale], esi
.text:00402299                 call    printf
.text:0040229E
.text:0040229E loc_40229E:                             ; CODE XREF: sub_401B10+7DD↓j
.text:0040229E                 mov     eax, [ebp+var_18]
.text:004022A1                 jmp     loc_40209F
.text:004022A6 ; ---------------------------------------------------------------------------
.text:004022A6
.text:004022A6 loc_4022A6:                             ; CODE XREF: sub_401B10+764↑j
.text:004022A6                 mov     [esp+68h+Category], edi
.text:004022A9                 call    sub_4036C0
.text:004022AE                 mov     [esp+68h+var_60], eax
.text:004022B2                 mov     edx, [ebp+var_34]
.text:004022B5                 mov     ebx, eax
.text:004022B7                 mov     [esp+68h+Category], offset Format ; "%s%s"
.text:004022BE                 mov     [esp+68h+Locale], edx
.text:004022C2                 call    printf
.text:004022C7                 mov     [esp+68h+Category], ebx ; Block
.text:004022CA                 call    free
.text:004022CF                 inc     [ebp+var_30]
.text:004022D2                 mov     [ebp+var_34], offset asc_401AF5 ; " "
.text:004022D9                 jmp     short loc_402276
.text:004022DB ; ---------------------------------------------------------------------------
.text:004022DB
.text:004022DB loc_4022DB:                             ; CODE XREF: sub_401B10+73A↑j
.text:004022DB                 mov     ecx, [ebp+var_18]
.text:004022DE                 mov     edi, [ebp+var_1C]
.text:004022E1                 mov     [esp+68h+Locale], ecx
.text:004022E5                 mov     [esp+68h+Category], edi
.text:004022E8                 call    sub_402560
.text:004022ED                 jmp     short loc_40229E
.text:004022EF ; ---------------------------------------------------------------------------
.text:004022EF
.text:004022EF loc_4022EF:                             ; CODE XREF: sub_401B10+72D↑j
.text:004022EF                 call    _errno
.text:004022F4                 mov     dword ptr [esp+68h+var_5C], ebx ; char
.text:004022F8                 mov     [esp+68h+var_60], offset aS ; "%s"
.text:00402300                 mov     ebx, [eax]
.text:00402302                 mov     [esp+68h+Category], 1 ; Code
.text:00402309                 mov     [esp+68h+Locale], ebx ; ErrorMessage
.text:0040230D                 call    sub_406920
.text:00402312                 jmp     loc_402243
.text:00402317 ; ---------------------------------------------------------------------------
.text:00402317
.text:00402317 loc_402317:                             ; CODE XREF: sub_401B10+490↑j
.text:00402317                 mov     eax, offset aBEHM ; "%b %e %H:%M"
.text:0040231C                 mov     ebx, 0Ch
.text:00402321                 mov     ds:dword_412180, eax
.text:00402326                 mov     ds:dword_412190, ebx
.text:0040232C                 jmp     loc_401FBB
.text:0040232C sub_401B10      endp
.text:0040232C
.text:00402331 ; ---------------------------------------------------------------------------
.text:00402331                 jmp     short loc_402340
.text:00402331 ; ---------------------------------------------------------------------------
.text:00402333                 align 10h
.text:00402340
.text:00402340 loc_402340:                             ; CODE XREF: .text:00402331↑j
.text:00402340                 push    ebx
.text:00402341                 sub     esp, 18h
.text:00402344                 mov     ebx, [esp+20h]
.text:00402348                 test    ebx, ebx
.text:0040234A                 jz      short loc_402380
.text:0040234C                 mov     dword ptr [esp], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:00402353                 call    ds:libintl_gettext
.text:00402359                 mov     edx, ds:_iob
.text:0040235F                 mov     ecx, ds:dword_4127F0
.text:00402365                 add     edx, 40h ; '@'
.text:00402368                 mov     [esp+8], ecx
.text:0040236C                 mov     [esp+4], eax
.text:00402370                 mov     [esp], edx
.text:00402373                 call    fprintf
.text:00402378
.text:00402378 loc_402378:                             ; CODE XREF: .text:004024CF↓j
.text:00402378                 mov     [esp], ebx
.text:0040237B                 call    exit
.text:00402380 ; ---------------------------------------------------------------------------
.text:00402380
.text:00402380 loc_402380:                             ; CODE XREF: .text:0040234A↑j
.text:00402380                 mov     dword ptr [esp], (offset stru_4014EA._charbuf+2)
.text:00402387                 call    ds:libintl_gettext
.text:0040238D                 mov     ecx, ds:dword_4127F0
.text:00402393                 mov     [esp], eax
.text:00402396                 mov     [esp+4], ecx
.text:0040239A                 call    printf
.text:0040239F                 mov     dword ptr [esp], offset aAAllSameAsBDLo ; "\n  -a, --all         same as -b -d --l"...
.text:004023A6                 call    ds:libintl_gettext
.text:004023AC                 mov     ecx, ds:_iob
.text:004023B2                 add     ecx, 20h ; ' '
.text:004023B5                 mov     [esp+4], ecx
.text:004023B9                 mov     [esp], eax
.text:004023BC                 call    fputs
.text:004023C1                 mov     dword ptr [esp], offset aIIdleAddIdleTi ; "  -i, --idle        add idle time as HO"...
.text:004023C8                 call    ds:libintl_gettext
.text:004023CE                 mov     ecx, ds:_iob
.text:004023D4                 add     ecx, 20h ; ' '
.text:004023D7                 mov     [esp+4], ecx
.text:004023DB                 mov     [esp], eax
.text:004023DE                 call    fputs
.text:004023E3                 mov     dword ptr [esp], offset aLookupAttemptT ; "      --lookup      attempt to canonica"...
.text:004023EA                 call    ds:libintl_gettext
.text:004023F0                 mov     ecx, ds:_iob
.text:004023F6                 add     ecx, 20h ; ' '
.text:004023F9                 mov     [esp+4], ecx
.text:004023FD                 mov     [esp], eax
.text:00402400                 call    fputs
.text:00402405                 mov     dword ptr [esp], offset aQCountAllLogin ; "  -q, --count       all login names and"...
.text:0040240C                 call    ds:libintl_gettext
.text:00402412                 mov     ecx, ds:_iob
.text:00402418                 add     ecx, 20h ; ' '
.text:0040241B                 mov     [esp+4], ecx
.text:0040241F                 mov     [esp], eax
.text:00402422                 call    fputs
.text:00402427                 mov     dword ptr [esp], offset aTWMesgAddUserS ; "  -T, -w, --mesg    add user's message "...
.text:0040242E                 call    ds:libintl_gettext
.text:00402434                 mov     ecx, ds:_iob
.text:0040243A                 add     ecx, 20h ; ' '
.text:0040243D                 mov     [esp+4], ecx
.text:00402441                 mov     [esp], eax
.text:00402444                 call    fputs
.text:00402449                 mov     dword ptr [esp], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:00402450                 call    ds:libintl_gettext
.text:00402456                 mov     ecx, ds:_iob
.text:0040245C                 add     ecx, 20h ; ' '
.text:0040245F                 mov     [esp+4], ecx
.text:00402463                 mov     [esp], eax
.text:00402466                 call    fputs
.text:0040246B                 mov     dword ptr [esp], offset aVersionOutputV ; "      --version  output version informa"...
.text:00402472                 call    ds:libintl_gettext
.text:00402478                 mov     ecx, ds:_iob
.text:0040247E                 add     ecx, 20h ; ' '
.text:00402481                 mov     [esp+4], ecx
.text:00402485                 mov     [esp], eax
.text:00402488                 call    fputs
.text:0040248D                 mov     dword ptr [esp], offset aIfFileIsNotSpe ; "\nIf FILE is not specified, use %s.  %s"...
.text:00402494                 call    ds:libintl_gettext
.text:0040249A                 mov     dword ptr [esp+8], offset aVarLogWtmp ; "/var/log/wtmp"
.text:004024A2                 mov     dword ptr [esp+4], offset aVarRunUtmp ; "/var/run/utmp"
.text:004024AA                 mov     [esp], eax
.text:004024AD                 call    printf
.text:004024B2                 mov     dword ptr [esp], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:004024B9                 call    ds:libintl_gettext
.text:004024BF                 mov     dword ptr [esp+4], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:004024C7                 mov     [esp], eax
.text:004024CA                 call    printf
.text:004024CF                 jmp     loc_402378
.text:004024CF ; ---------------------------------------------------------------------------
.text:004024D4 dword_4024D4    dd 3D6469h              ; DATA XREF: sub_402560:loc_402688↓o
.text:004024D4                                         ; sub_402560+148↓o ...
.text:004024D8 ; const char aLd[4]
.text:004024D8 aLd             db '%ld',0              ; DATA XREF: sub_402560+18B↓o
.text:004024D8                                         ; sub_402560+388↓o ...
.text:004024DC aExit           db 'exit=',0            ; DATA XREF: sub_402560:loc_402711↓o
.text:004024DC                                         ; sub_402560+2F4↓o
.text:004024E2 aTerm           db 'term=',0            ; DATA XREF: sub_402560+1BE↓o
.text:004024E2                                         ; sub_402560:loc_40283F↓o
.text:004024E8 ; const char aSDSD[]
.text:004024E8 aSDSD           db '%s%d %s%d',0        ; DATA XREF: sub_402560+1F4↓o
.text:004024F2 aLogin          db 'LOGIN',0            ; DATA XREF: sub_402560+41E↓o
.text:004024F8 aClockChange    db 'clock change',0     ; DATA XREF: sub_402560:loc_402B31↓o
.text:00402505 aSystemBoot     db 'system boot',0      ; DATA XREF: sub_402560+6C0↓o
.text:00402511 aRunLevel       db 'run-level',0        ; DATA XREF: sub_402560:loc_402CA1↓o
.text:00402511                                         ; sub_402560:loc_402DDC↓o
.text:0040251B ; const char aSC[]
.text:0040251B aSC             db '%s %c',0            ; DATA XREF: sub_402560+75B↓o
.text:00402521 aLast           db 'last=',0            ; DATA XREF: sub_402560:loc_402CDD↓o
.text:00402521                                         ; sub_402560:loc_402DB2↓o
.text:00402527 ; const char aSC_0[]
.text:00402527 aSC_0           db '%s%c',0             ; DATA XREF: sub_402560+7AD↓o
.text:0040252C aDev            db '/dev/',0            ; DATA XREF: sub_402560+94B↓o
.text:00402532 aExit_0         db 'EXIT',0             ; DATA XREF: sub_402560:loc_402ED0↓o
.text:00402537 aComment        db 'COMMENT',0          ; DATA XREF: sub_402560+97D↓o
.text:0040253F aPid            db 'PID',0              ; DATA XREF: sub_402560+98E↓o
.text:00402543 aIdle           db 'IDLE',0             ; DATA XREF: sub_402560+99F↓o
.text:00402548 aTime           db 'TIME',0             ; DATA XREF: sub_402560+9AE↓o
.text:0040254D aLine           db 'LINE',0             ; DATA XREF: sub_402560+9BD↓o
.text:00402552 aName           db 'NAME',0             ; DATA XREF: sub_402560+9CC↓o
.text:00402557                 align 10h
.text:00402560
.text:00402560 ; =============== S U B R O U T I N E =======================================
.text:00402560
.text:00402560
.text:00402560 sub_402560      proc near               ; CODE XREF: sub_401B10+5DE↑p
.text:00402560                                         ; sub_401B10+6DF↑p ...
.text:00402560
.text:00402560 Str             = dword ptr -0ACh
.text:00402560 Source          = dword ptr -0A8h
.text:00402560 Count           = dword ptr -0A4h
.text:00402560 Tm              = dword ptr -0A0h
.text:00402560 var_9C          = dword ptr -9Ch
.text:00402560 var_98          = dword ptr -98h
.text:00402560 var_94          = dword ptr -94h
.text:00402560 var_90          = dword ptr -90h
.text:00402560 var_8C          = dword ptr -8Ch
.text:00402560 var_88          = dword ptr -88h
.text:00402560 var_75          = byte ptr -75h
.text:00402560 var_74          = dword ptr -74h
.text:00402560 var_70          = dword ptr -70h
.text:00402560 var_6C          = dword ptr -6Ch
.text:00402560 Str1            = dword ptr -68h
.text:00402560 Time            = dword ptr -64h
.text:00402560 var_60          = dword ptr -60h
.text:00402560 var_5C          = dword ptr -5Ch
.text:00402560 var_58          = dword ptr -58h
.text:00402560 var_54          = dword ptr -54h
.text:00402560 var_50          = dword ptr -50h
.text:00402560 Buffer          = byte ptr -4Ch
.text:00402560 var_3C          = byte ptr -3Ch
.text:00402560 var_2C          = byte ptr -2Ch
.text:00402560 var_10          = dword ptr -10h
.text:00402560 var_C           = dword ptr -0Ch
.text:00402560 var_8           = dword ptr -8
.text:00402560 var_4           = dword ptr -4
.text:00402560 arg_0           = dword ptr  4
.text:00402560 arg_4           = dword ptr  8
.text:00402560
.text:00402560                 sub     esp, 0ACh
.text:00402566                 cmp     ds:byte_4120D0, 0
.text:0040256D                 mov     [esp+0ACh+var_10], ebx
.text:00402574                 mov     [esp+0ACh+var_C], esi
.text:0040257B                 mov     [esp+0ACh+var_8], edi
.text:00402582                 mov     [esp+0ACh+var_4], ebp
.text:00402589                 mov     [esp+0ACh+var_6C], 80000000h
.text:00402591                 jnz     loc_402ED0
.text:00402597
.text:00402597 loc_402597:                             ; CODE XREF: sub_402560+A1B↓j
.text:00402597                 cmp     ds:byte_412170, 0
.text:0040259E                 jnz     loc_402E96
.text:004025A4
.text:004025A4 loc_4025A4:                             ; CODE XREF: sub_402560+110↓j
.text:004025A4                                         ; sub_402560+959↓j ...
.text:004025A4                 dec     [esp+0ACh+arg_0]
.text:004025AB                 cmp     [esp+0ACh+arg_0], 0FFFFFFFFh
.text:004025B3                 jz      loc_402E73
.text:004025B9                 cmp     ds:byte_412170, 0
.text:004025C0                 jnz     loc_402E44
.text:004025C6
.text:004025C6 loc_4025C6:                             ; CODE XREF: sub_402560+90E↓j
.text:004025C6                 cmp     ds:byte_412160, 0
.text:004025CD                 jz      loc_402E35
.text:004025D3                 mov     edx, [esp+0ACh+arg_4]
.text:004025DA                 cmp     byte ptr [edx+2Ch], 0
.text:004025DE                 jz      loc_402E26
.text:004025E4                 movzx   eax, word ptr [edx]
.text:004025E7                 cmp     ax, 7
.text:004025EB                 jz      loc_402E11
.text:004025F1
.text:004025F1 loc_4025F1:                             ; CODE XREF: sub_402560+8D0↓j
.text:004025F1                                         ; sub_402560+8DF↓j
.text:004025F1                 cmp     ds:byte_412150, 0
.text:004025F8                 jz      short loc_402604
.text:004025FA                 cmp     ax, 1
.text:004025FE                 jz      loc_402C76
.text:00402604
.text:00402604 loc_402604:                             ; CODE XREF: sub_402560+98↑j
.text:00402604                 cmp     ds:byte_412100, 0
.text:0040260B                 jz      short loc_402617
.text:0040260D                 cmp     ax, 2
.text:00402611                 jz      loc_402BB0
.text:00402617
.text:00402617 loc_402617:                             ; CODE XREF: sub_402560+AB↑j
.text:00402617                 cmp     ds:byte_412140, 0
.text:0040261E                 jz      short loc_40262A
.text:00402620                 cmp     ax, 3
.text:00402624                 jz      loc_402AE5
.text:0040262A
.text:0040262A loc_40262A:                             ; CODE XREF: sub_402560+BE↑j
.text:0040262A                 cmp     ds:byte_412130, 0
.text:00402631                 jz      short loc_40263D
.text:00402633                 cmp     ax, 5
.text:00402637                 jz      loc_4029B9
.text:0040263D
.text:0040263D loc_40263D:                             ; CODE XREF: sub_402560+D1↑j
.text:0040263D                 cmp     ds:byte_412120, 0
.text:00402644                 jz      short loc_402650
.text:00402646                 cmp     ax, 6
.text:0040264A                 jz      loc_402881
.text:00402650
.text:00402650 loc_402650:                             ; CODE XREF: sub_402560+E4↑j
.text:00402650                 cmp     ds:byte_412110, 0
.text:00402657                 jz      short loc_40265F
.text:00402659                 cmp     ax, 8
.text:0040265D                 jz      short loc_402688
.text:0040265F
.text:0040265F loc_40265F:                             ; CODE XREF: sub_402560+F7↑j
.text:0040265F                                         ; sub_402560+2B6↓j ...
.text:0040265F                 cmp     ax, 2
.text:00402663                 jz      short loc_402675
.text:00402665
.text:00402665 loc_402665:                             ; CODE XREF: sub_402560+126↓j
.text:00402665                 add     [esp+0ACh+arg_4], 180h
.text:00402670                 jmp     loc_4025A4
.text:00402675 ; ---------------------------------------------------------------------------
.text:00402675
.text:00402675 loc_402675:                             ; CODE XREF: sub_402560+103↑j
.text:00402675                 mov     ecx, [esp+0ACh+arg_4]
.text:0040267C                 mov     ebp, [ecx+154h]
.text:00402682                 mov     [esp+0ACh+var_6C], ebp
.text:00402686                 jmp     short loc_402665
.text:00402688 ; ---------------------------------------------------------------------------
.text:00402688
.text:00402688 loc_402688:                             ; CODE XREF: sub_402560+FD↑j
.text:00402688                 mov     [esp+0ACh+Str], offset dword_4024D4
.text:0040268F                 call    ds:libintl_gettext
.text:00402695                 mov     [esp+0ACh+Str], eax ; Str
.text:00402698                 call    strlen
.text:0040269D                 add     eax, 5
.text:004026A0                 mov     [esp+0ACh+Str], eax ; size_t
.text:004026A3                 call    sub_4050B0
.text:004026A8                 mov     [esp+0ACh+Str], offset dword_4024D4
.text:004026AF                 mov     esi, eax
.text:004026B1                 call    ds:libintl_gettext
.text:004026B7                 mov     [esp+0ACh+Str], esi ; Destination
.text:004026BA                 mov     [esp+0ACh+Source], eax ; Source
.text:004026BE                 call    strcpy
.text:004026C3                 mov     [esp+0ACh+Count], 4 ; Count
.text:004026CB                 mov     ecx, [esp+0ACh+arg_4]
.text:004026D2                 mov     [esp+0ACh+Str], esi ; Destination
.text:004026D5                 add     ecx, 28h ; '('
.text:004026D8                 mov     [esp+0ACh+Source], ecx ; Source
.text:004026DC                 call    strncat
.text:004026E1                 mov     eax, [esp+0ACh+arg_4]
.text:004026E8                 mov     edi, [eax+4]
.text:004026EB                 mov     [esp+0ACh+Source], offset aLd ; "%ld"
.text:004026F3                 mov     [esp+0ACh+Count], edi
.text:004026F7                 lea     edi, [esp+0ACh+Buffer]
.text:004026FB                 mov     [esp+0ACh+Str], edi ; Buffer
.text:004026FE                 call    sprintf
.text:00402703                 mov     ebx, ds:Buffer
.text:00402709                 test    ebx, ebx
.text:0040270B                 jz      loc_40283F
.text:00402711
.text:00402711 loc_402711:                             ; CODE XREF: sub_402560+31C↓j
.text:00402711                 mov     [esp+0ACh+Str], offset aExit ; "exit="
.text:00402718                 call    ds:libintl_gettext
.text:0040271E                 mov     [esp+0ACh+Str], offset aTerm ; "term="
.text:00402725                 mov     ebp, eax
.text:00402727                 call    ds:libintl_gettext
.text:0040272D                 mov     ecx, [esp+0ACh+arg_4]
.text:00402734                 movsx   ebx, word ptr [ecx+14Eh]
.text:0040273B                 mov     [esp+0ACh+var_9C], ebp
.text:0040273F                 mov     [esp+0ACh+var_98], ebx
.text:00402743                 movsx   ebp, word ptr [ecx+14Ch]
.text:0040274A                 mov     ecx, ds:Buffer
.text:00402750                 mov     [esp+0ACh+Count], eax
.text:00402754                 mov     [esp+0ACh+Source], offset aSDSD ; "%s%d %s%d"
.text:0040275C                 mov     [esp+0ACh+Str], ecx ; Buffer
.text:0040275F                 mov     [esp+0ACh+Tm], ebp
.text:00402763                 call    sprintf
.text:00402768                 mov     eax, [esp+0ACh+arg_4]
.text:0040276F                 lea     edx, [esp+0ACh+Time]
.text:00402773                 mov     ebx, [eax+154h]
.text:00402779                 mov     [esp+0ACh+Str], edx ; Time
.text:0040277C                 mov     [esp+0ACh+Time], ebx
.text:00402780                 call    localtime
.text:00402785                 test    eax, eax
.text:00402787                 jz      loc_40281B
.text:0040278D                 mov     [esp+0ACh+Tm], eax ; Tm
.text:00402791                 mov     edx, ds:dword_412180
.text:00402797                 mov     [esp+0ACh+Source], 22h ; '"' ; SizeInBytes
.text:0040279F                 mov     [esp+0ACh+Str], offset byte_412030 ; Buffer
.text:004027A6                 mov     [esp+0ACh+Count], edx ; Format
.text:004027AA                 call    strftime
.text:004027AF                 mov     edx, offset byte_412030
.text:004027B4
.text:004027B4 loc_4027B4:                             ; CODE XREF: sub_402560+2DA↓j
.text:004027B4                 mov     [esp+0ACh+var_90], edi ; char *
.text:004027B8                 mov     ebx, ds:Buffer
.text:004027BE                 mov     edi, [esp+0ACh+arg_4]
.text:004027C5                 mov     [esp+0ACh+var_8C], esi ; int
.text:004027C9                 mov     [esp+0ACh+var_88], ebx ; char *
.text:004027CD                 add     edi, 8
.text:004027D0                 mov     [esp+0ACh+var_94], offset Locale ; char *
.text:004027D8                 mov     [esp+0ACh+var_98], edx ; int
.text:004027DC                 mov     [esp+0ACh+var_9C], edi ; int
.text:004027E0                 mov     [esp+0ACh+Tm], 20h ; ' ' ; int
.text:004027E8                 mov     [esp+0ACh+Count], 20h ; ' ' ; int
.text:004027F0                 mov     [esp+0ACh+Source], offset Locale ; int
.text:004027F8                 mov     [esp+0ACh+Str], 0FFFFFFFFh ; int
.text:004027FF                 call    sub_402FC0
.text:00402804                 mov     [esp+0ACh+Str], esi ; Block
.text:00402807
.text:00402807 loc_402807:                             ; CODE XREF: sub_402560+435↓j
.text:00402807                 call    free
.text:0040280C
.text:0040280C loc_40280C:                             ; CODE XREF: sub_402560+62A↓j
.text:0040280C                                         ; sub_402560+8C1↓j
.text:0040280C                 mov     esi, [esp+0ACh+arg_4]
.text:00402813                 movzx   eax, word ptr [esi]
.text:00402816                 jmp     loc_40265F
.text:0040281B ; ---------------------------------------------------------------------------
.text:0040281B
.text:0040281B loc_40281B:                             ; CODE XREF: sub_402560+227↑j
.text:0040281B                 mov     [esp+0ACh+Count], offset byte_412030
.text:00402823                 mov     ecx, [esp+0ACh+Time]
.text:00402827                 mov     ebp, ecx
.text:00402829                 mov     [esp+0ACh+Str], ecx
.text:0040282C                 sar     ebp, 1Fh
.text:0040282F                 mov     [esp+0ACh+Source], ebp
.text:00402833                 call    sub_405470
.text:00402838                 mov     edx, eax
.text:0040283A                 jmp     loc_4027B4
.text:0040283F ; ---------------------------------------------------------------------------
.text:0040283F
.text:0040283F loc_40283F:                             ; CODE XREF: sub_402560+1AB↑j
.text:0040283F                 mov     [esp+0ACh+Str], offset aTerm ; "term="
.text:00402846                 call    ds:libintl_gettext
.text:0040284C                 mov     [esp+0ACh+Str], eax ; Str
.text:0040284F                 call    strlen
.text:00402854                 mov     [esp+0ACh+Str], offset aExit ; "exit="
.text:0040285B                 mov     ebx, eax
.text:0040285D                 call    ds:libintl_gettext
.text:00402863                 mov     [esp+0ACh+Str], eax ; Str
.text:00402866                 call    strlen
.text:0040286B                 lea     ebp, [eax+ebx+0Eh]
.text:0040286F                 mov     [esp+0ACh+Str], ebp ; size_t
.text:00402872                 call    sub_4050B0
.text:00402877                 mov     ds:Buffer, eax
.text:0040287C                 jmp     loc_402711
.text:00402881 ; ---------------------------------------------------------------------------
.text:00402881
.text:00402881 loc_402881:                             ; CODE XREF: sub_402560+EA↑j
.text:00402881                 mov     [esp+0ACh+Str], offset dword_4024D4
.text:00402888                 call    ds:libintl_gettext
.text:0040288E                 mov     [esp+0ACh+Str], eax ; Str
.text:00402891                 call    strlen
.text:00402896                 add     eax, 5
.text:00402899                 mov     [esp+0ACh+Str], eax ; size_t
.text:0040289C                 call    sub_4050B0
.text:004028A1                 mov     [esp+0ACh+Str], offset dword_4024D4
.text:004028A8                 mov     ebx, eax
.text:004028AA                 call    ds:libintl_gettext
.text:004028B0                 mov     [esp+0ACh+Str], ebx ; Destination
.text:004028B3                 mov     [esp+0ACh+Source], eax ; Source
.text:004028B7                 call    strcpy
.text:004028BC                 mov     [esp+0ACh+Count], 4 ; Count
.text:004028C4                 mov     esi, [esp+0ACh+arg_4]
.text:004028CB                 mov     [esp+0ACh+Str], ebx ; Destination
.text:004028CE                 add     esi, 28h ; '('
.text:004028D1                 mov     [esp+0ACh+Source], esi ; Source
.text:004028D5                 lea     esi, [esp+0ACh+var_3C]
.text:004028D9                 call    strncat
.text:004028DE                 mov     edx, [esp+0ACh+arg_4]
.text:004028E5                 mov     ebp, [edx+4]
.text:004028E8                 mov     [esp+0ACh+Source], offset aLd ; "%ld"
.text:004028F0                 mov     [esp+0ACh+Str], esi ; Buffer
.text:004028F3                 mov     [esp+0ACh+Count], ebp
.text:004028F7                 call    sprintf
.text:004028FC                 mov     eax, [esp+0ACh+arg_4]
.text:00402903                 lea     ecx, [esp+0ACh+var_60]
.text:00402907                 mov     edi, [eax+154h]
.text:0040290D                 mov     [esp+0ACh+Str], ecx ; Time
.text:00402910                 mov     [esp+0ACh+var_60], edi
.text:00402914                 call    localtime
.text:00402919                 test    eax, eax
.text:0040291B                 jz      short loc_40299A
.text:0040291D                 mov     [esp+0ACh+Tm], eax ; Tm
.text:00402921                 mov     ecx, ds:dword_412180
.text:00402927                 mov     [esp+0ACh+Source], 22h ; '"' ; SizeInBytes
.text:0040292F                 mov     [esp+0ACh+Str], offset byte_412030 ; Buffer
.text:00402936                 mov     [esp+0ACh+Count], ecx ; Format
.text:0040293A                 call    strftime
.text:0040293F                 mov     eax, offset byte_412030
.text:00402944
.text:00402944 loc_402944:                             ; CODE XREF: sub_402560+457↓j
.text:00402944                 mov     [esp+0ACh+var_88], offset Locale ; char *
.text:0040294C                 mov     edx, [esp+0ACh+arg_4]
.text:00402953                 mov     [esp+0ACh+var_8C], ebx ; int
.text:00402957                 mov     [esp+0ACh+var_90], esi ; char *
.text:0040295B                 add     edx, 8
.text:0040295E                 mov     [esp+0ACh+var_94], offset Locale ; char *
.text:00402966                 mov     [esp+0ACh+var_98], eax ; int
.text:0040296A                 mov     [esp+0ACh+var_9C], edx ; int
.text:0040296E                 mov     [esp+0ACh+Tm], 20h ; ' ' ; int
.text:00402976                 mov     [esp+0ACh+Count], 20h ; ' ' ; int
.text:0040297E                 mov     [esp+0ACh+Source], offset aLogin ; "LOGIN"
.text:00402986
.text:00402986 loc_402986:                             ; CODE XREF: sub_402560+561↓j
.text:00402986                 mov     [esp+0ACh+Str], 0FFFFFFFFh ; int
.text:0040298D                 call    sub_402FC0
.text:00402992                 mov     [esp+0ACh+Str], ebx
.text:00402995                 jmp     loc_402807
.text:0040299A ; ---------------------------------------------------------------------------
.text:0040299A
.text:0040299A loc_40299A:                             ; CODE XREF: sub_402560+3BB↑j
.text:0040299A                 mov     [esp+0ACh+Count], offset byte_412030
.text:004029A2                 mov     ebp, [esp+0ACh+var_60]
.text:004029A6                 mov     edi, ebp
.text:004029A8                 mov     [esp+0ACh+Str], ebp
.text:004029AB                 sar     edi, 1Fh
.text:004029AE                 mov     [esp+0ACh+Source], edi
.text:004029B2                 call    sub_405470
.text:004029B7                 jmp     short loc_402944
.text:004029B9 ; ---------------------------------------------------------------------------
.text:004029B9
.text:004029B9 loc_4029B9:                             ; CODE XREF: sub_402560+D7↑j
.text:004029B9                 mov     [esp+0ACh+Str], offset dword_4024D4
.text:004029C0                 lea     edi, [esp+0ACh+var_5C]
.text:004029C4                 call    ds:libintl_gettext
.text:004029CA                 mov     [esp+0ACh+Str], eax ; Str
.text:004029CD                 call    strlen
.text:004029D2                 add     eax, 5
.text:004029D5                 mov     [esp+0ACh+Str], eax ; size_t
.text:004029D8                 call    sub_4050B0
.text:004029DD                 mov     [esp+0ACh+Str], offset dword_4024D4
.text:004029E4                 mov     ebx, eax
.text:004029E6                 call    ds:libintl_gettext
.text:004029EC                 mov     [esp+0ACh+Str], ebx ; Destination
.text:004029EF                 mov     [esp+0ACh+Source], eax ; Source
.text:004029F3                 call    strcpy
.text:004029F8                 mov     [esp+0ACh+Count], 4 ; Count
.text:00402A00                 mov     ecx, [esp+0ACh+arg_4]
.text:00402A07                 mov     [esp+0ACh+Str], ebx ; Destination
.text:00402A0A                 add     ecx, 28h ; '('
.text:00402A0D                 mov     [esp+0ACh+Source], ecx ; Source
.text:00402A11                 call    strncat
.text:00402A16                 mov     edx, [esp+0ACh+arg_4]
.text:00402A1D                 mov     esi, [edx+4]
.text:00402A20                 mov     [esp+0ACh+Source], offset aLd ; "%ld"
.text:00402A28                 mov     [esp+0ACh+Count], esi
.text:00402A2C                 lea     esi, [esp+0ACh+var_2C]
.text:00402A33                 mov     [esp+0ACh+Str], esi ; Buffer
.text:00402A36                 call    sprintf
.text:00402A3B                 mov     eax, [esp+0ACh+arg_4]
.text:00402A42                 mov     ebp, [eax+154h]
.text:00402A48                 mov     [esp+0ACh+Str], edi ; Time
.text:00402A4B                 mov     [esp+0ACh+var_5C], ebp
.text:00402A4F                 call    localtime
.text:00402A54                 test    eax, eax
.text:00402A56                 jz      short loc_402AC6
.text:00402A58                 mov     [esp+0ACh+Tm], eax ; Tm
.text:00402A5C                 mov     edi, ds:dword_412180
.text:00402A62                 mov     [esp+0ACh+Source], 22h ; '"' ; SizeInBytes
.text:00402A6A                 mov     [esp+0ACh+Str], offset byte_412030 ; Buffer
.text:00402A71                 mov     [esp+0ACh+Count], edi ; Format
.text:00402A75                 call    strftime
.text:00402A7A                 mov     eax, offset byte_412030
.text:00402A7F
.text:00402A7F loc_402A7F:                             ; CODE XREF: sub_402560+583↓j
.text:00402A7F                 mov     [esp+0ACh+var_90], esi
.text:00402A83                 mov     esi, [esp+0ACh+arg_4]
.text:00402A8A                 mov     [esp+0ACh+var_88], offset Locale
.text:00402A92                 mov     [esp+0ACh+var_8C], ebx
.text:00402A96                 add     esi, 8
.text:00402A99                 mov     [esp+0ACh+var_94], offset Locale
.text:00402AA1                 mov     [esp+0ACh+var_98], eax
.text:00402AA5                 mov     [esp+0ACh+var_9C], esi
.text:00402AA9                 mov     [esp+0ACh+Tm], 20h ; ' '
.text:00402AB1                 mov     [esp+0ACh+Count], 20h ; ' '
.text:00402AB9                 mov     [esp+0ACh+Source], offset Locale
.text:00402AC1                 jmp     loc_402986
.text:00402AC6 ; ---------------------------------------------------------------------------
.text:00402AC6
.text:00402AC6 loc_402AC6:                             ; CODE XREF: sub_402560+4F6↑j
.text:00402AC6                 mov     [esp+0ACh+Count], offset byte_412030
.text:00402ACE                 mov     edx, [esp+0ACh+var_5C]
.text:00402AD2                 mov     ebp, edx
.text:00402AD4                 mov     [esp+0ACh+Str], edx
.text:00402AD7                 sar     ebp, 1Fh
.text:00402ADA                 mov     [esp+0ACh+Source], ebp
.text:00402ADE                 call    sub_405470
.text:00402AE3                 jmp     short loc_402A7F
.text:00402AE5 ; ---------------------------------------------------------------------------
.text:00402AE5
.text:00402AE5 loc_402AE5:                             ; CODE XREF: sub_402560+C4↑j
.text:00402AE5                 mov     edi, [esp+0ACh+arg_4]
.text:00402AEC                 lea     ebx, [esp+0ACh+var_58]
.text:00402AF0                 mov     esi, [edi+154h]
.text:00402AF6                 mov     [esp+0ACh+Str], ebx ; Time
.text:00402AF9                 mov     [esp+0ACh+var_58], esi
.text:00402AFD                 call    localtime
.text:00402B02                 test    eax, eax
.text:00402B04                 jz      loc_402B8F
.text:00402B0A                 mov     [esp+0ACh+Tm], eax ; Tm
.text:00402B0E                 mov     ebp, ds:dword_412180
.text:00402B14                 mov     ebx, offset byte_412030
.text:00402B19                 mov     [esp+0ACh+Source], 22h ; '"' ; SizeInBytes
.text:00402B21                 mov     [esp+0ACh+Str], offset byte_412030 ; Buffer
.text:00402B28                 mov     [esp+0ACh+Count], ebp ; Format
.text:00402B2C                 call    strftime
.text:00402B31
.text:00402B31 loc_402B31:                             ; CODE XREF: sub_402560+64E↓j
.text:00402B31                 mov     [esp+0ACh+Str], offset aClockChange ; "clock change"
.text:00402B38                 call    ds:libintl_gettext
.text:00402B3E                 mov     [esp+0ACh+var_88], offset Locale ; char *
.text:00402B46                 mov     [esp+0ACh+var_8C], offset Locale ; int
.text:00402B4E                 mov     [esp+0ACh+var_90], offset Locale ; char *
.text:00402B56                 mov     [esp+0ACh+var_94], offset Locale ; char *
.text:00402B5E                 mov     [esp+0ACh+var_98], ebx ; int
.text:00402B62
.text:00402B62 loc_402B62:                             ; CODE XREF: sub_402560+82C↓j
.text:00402B62                 mov     [esp+0ACh+var_9C], eax ; int
.text:00402B66                 mov     [esp+0ACh+Tm], 0FFFFFFFFh ; int
.text:00402B6E                 mov     [esp+0ACh+Count], 20h ; ' ' ; int
.text:00402B76                 mov     [esp+0ACh+Source], offset Locale ; int
.text:00402B7E                 mov     [esp+0ACh+Str], 0FFFFFFFFh ; int
.text:00402B85                 call    sub_402FC0
.text:00402B8A                 jmp     loc_40280C
.text:00402B8F ; ---------------------------------------------------------------------------
.text:00402B8F
.text:00402B8F loc_402B8F:                             ; CODE XREF: sub_402560+5A4↑j
.text:00402B8F                 mov     [esp+0ACh+Count], offset byte_412030
.text:00402B97                 mov     ecx, [esp+0ACh+var_58]
.text:00402B9B                 mov     edx, ecx
.text:00402B9D                 mov     [esp+0ACh+Str], ecx
.text:00402BA0                 sar     edx, 1Fh
.text:00402BA3                 mov     [esp+0ACh+Source], edx
.text:00402BA7                 call    sub_405470
.text:00402BAC                 mov     ebx, eax
.text:00402BAE                 jmp     short loc_402B31
.text:00402BB0 ; ---------------------------------------------------------------------------
.text:00402BB0
.text:00402BB0 loc_402BB0:                             ; CODE XREF: sub_402560+B1↑j
.text:00402BB0                 mov     eax, [esp+0ACh+arg_4]
.text:00402BB7                 lea     ebp, [esp+0ACh+var_54]
.text:00402BBB                 mov     edx, [eax+154h]
.text:00402BC1                 mov     [esp+0ACh+Str], ebp ; Time
.text:00402BC4                 mov     [esp+0ACh+var_54], edx
.text:00402BC8                 call    localtime
.text:00402BCD                 test    eax, eax
.text:00402BCF                 jz      loc_402C5B
.text:00402BD5                 mov     [esp+0ACh+Tm], eax ; Tm
.text:00402BD9                 mov     ecx, ds:dword_412180
.text:00402BDF                 mov     [esp+0ACh+Source], 22h ; '"' ; SizeInBytes
.text:00402BE7                 mov     [esp+0ACh+Str], offset byte_412030 ; Buffer
.text:00402BEE                 mov     [esp+0ACh+Count], ecx ; Format
.text:00402BF2                 call    strftime
.text:00402BF7                 mov     eax, offset byte_412030
.text:00402BFC
.text:00402BFC loc_402BFC:                             ; CODE XREF: sub_402560+714↓j
.text:00402BFC                 mov     [esp+0ACh+var_88], offset Locale ; char *
.text:00402C04                 mov     [esp+0ACh+var_8C], offset Locale ; int
.text:00402C0C                 mov     [esp+0ACh+var_90], offset Locale ; char *
.text:00402C14                 mov     [esp+0ACh+var_94], offset Locale ; char *
.text:00402C1C                 mov     [esp+0ACh+var_98], eax ; int
.text:00402C20                 mov     [esp+0ACh+var_9C], offset aSystemBoot ; "system boot"
.text:00402C28                 mov     [esp+0ACh+Tm], 0FFFFFFFFh ; int
.text:00402C30                 mov     [esp+0ACh+Count], 20h ; ' ' ; int
.text:00402C38                 mov     [esp+0ACh+Source], offset Locale ; int
.text:00402C40                 mov     [esp+0ACh+Str], 0FFFFFFFFh ; int
.text:00402C47                 call    sub_402FC0
.text:00402C4C
.text:00402C4C loc_402C4C:                             ; CODE XREF: sub_402560+908↓j
.text:00402C4C                 mov     edx, [esp+0ACh+arg_4]
.text:00402C53                 movzx   eax, word ptr [edx]
.text:00402C56                 jmp     loc_40265F
.text:00402C5B ; ---------------------------------------------------------------------------
.text:00402C5B
.text:00402C5B loc_402C5B:                             ; CODE XREF: sub_402560+66F↑j
.text:00402C5B                 mov     [esp+0ACh+Count], offset byte_412030
.text:00402C63                 mov     eax, [esp+0ACh+var_54]
.text:00402C67                 cdq
.text:00402C68                 mov     [esp+0ACh+Str], eax
.text:00402C6B                 mov     [esp+0ACh+Source], edx
.text:00402C6F                 call    sub_405470
.text:00402C74                 jmp     short loc_402BFC
.text:00402C76 ; ---------------------------------------------------------------------------
.text:00402C76
.text:00402C76 loc_402C76:                             ; CODE XREF: sub_402560+9E↑j
.text:00402C76                 mov     ebp, [esp+0ACh+arg_4]
.text:00402C7D                 mov     eax, [ebp+4]
.text:00402C80                 test    eax, eax
.text:00402C82                 mov     edx, eax
.text:00402C84                 js      loc_402E06
.text:00402C8A
.text:00402C8A loc_402C8A:                             ; CODE XREF: sub_402560+8AC↓j
.text:00402C8A                 mov     ecx, ds:dword_412060
.text:00402C90                 sar     edx, 8
.text:00402C93                 mov     bl, al
.text:00402C95                 mov     [esp+0ACh+var_75], dl
.text:00402C99                 test    ecx, ecx
.text:00402C9B                 jz      loc_402DDC
.text:00402CA1
.text:00402CA1 loc_402CA1:                             ; CODE XREF: sub_402560+8A1↓j
.text:00402CA1                 mov     [esp+0ACh+Str], offset aRunLevel ; "run-level"
.text:00402CA8                 movzx   esi, bl
.text:00402CAB                 call    ds:libintl_gettext
.text:00402CB1                 mov     [esp+0ACh+Tm], esi
.text:00402CB5                 mov     ebx, ds:dword_412060
.text:00402CBB                 mov     [esp+0ACh+Source], offset aSC ; "%s %c"
.text:00402CC3                 mov     [esp+0ACh+Count], eax
.text:00402CC7                 mov     [esp+0ACh+Str], ebx ; Buffer
.text:00402CCA                 call    sprintf
.text:00402CCF                 mov     edx, ds:dword_412070
.text:00402CD5                 test    edx, edx
.text:00402CD7                 jz      loc_402DB2
.text:00402CDD
.text:00402CDD loc_402CDD:                             ; CODE XREF: sub_402560+877↓j
.text:00402CDD                 mov     [esp+0ACh+Str], offset aLast ; "last="
.text:00402CE4                 call    ds:libintl_gettext
.text:00402CEA                 cmp     [esp+0ACh+var_75], 4Eh ; 'N'
.text:00402CEF                 mov     edx, 53h ; 'S'
.text:00402CF4                 jz      short loc_402CFB
.text:00402CF6                 movzx   edx, [esp+0ACh+var_75]
.text:00402CFB
.text:00402CFB loc_402CFB:                             ; CODE XREF: sub_402560+794↑j
.text:00402CFB                 mov     [esp+0ACh+Tm], edx
.text:00402CFF                 mov     ecx, ds:dword_412070
.text:00402D05                 lea     edi, [esp+0ACh+var_50]
.text:00402D09                 mov     [esp+0ACh+Count], eax
.text:00402D0D                 mov     [esp+0ACh+Source], offset aSC_0 ; "%s%c"
.text:00402D15                 mov     [esp+0ACh+Str], ecx ; Buffer
.text:00402D18                 call    sprintf
.text:00402D1D                 mov     eax, [esp+0ACh+arg_4]
.text:00402D24                 mov     ebp, [eax+154h]
.text:00402D2A                 mov     [esp+0ACh+Str], edi ; Time
.text:00402D2D                 mov     [esp+0ACh+var_50], ebp
.text:00402D31                 call    localtime
.text:00402D36                 test    eax, eax
.text:00402D38                 jz      short loc_402D91
.text:00402D3A                 mov     [esp+0ACh+Tm], eax ; Tm
.text:00402D3E                 mov     edx, ds:dword_412180
.text:00402D44                 mov     [esp+0ACh+Source], 22h ; '"' ; SizeInBytes
.text:00402D4C                 mov     [esp+0ACh+Str], offset byte_412030 ; Buffer
.text:00402D53                 mov     [esp+0ACh+Count], edx ; Format
.text:00402D57                 call    strftime
.text:00402D5C                 mov     edx, offset byte_412030
.text:00402D61
.text:00402D61 loc_402D61:                             ; CODE XREF: sub_402560+850↓j
.text:00402D61                 mov     [esp+0ACh+var_88], offset Locale
.text:00402D69                 mov     edi, ds:dword_412070
.text:00402D6F                 mov     eax, ds:dword_412060
.text:00402D74                 mov     [esp+0ACh+var_90], offset Locale
.text:00402D7C                 mov     [esp+0ACh+var_8C], edi
.text:00402D80                 mov     [esp+0ACh+var_94], offset Locale
.text:00402D88                 mov     [esp+0ACh+var_98], edx
.text:00402D8C                 jmp     loc_402B62
.text:00402D91 ; ---------------------------------------------------------------------------
.text:00402D91
.text:00402D91 loc_402D91:                             ; CODE XREF: sub_402560+7D8↑j
.text:00402D91                 mov     [esp+0ACh+Count], offset byte_412030
.text:00402D99                 mov     esi, [esp+0ACh+var_50]
.text:00402D9D                 mov     ebx, esi
.text:00402D9F                 mov     [esp+0ACh+Str], esi
.text:00402DA2                 sar     ebx, 1Fh
.text:00402DA5                 mov     [esp+0ACh+Source], ebx
.text:00402DA9                 call    sub_405470
.text:00402DAE                 mov     edx, eax
.text:00402DB0                 jmp     short loc_402D61
.text:00402DB2 ; ---------------------------------------------------------------------------
.text:00402DB2
.text:00402DB2 loc_402DB2:                             ; CODE XREF: sub_402560+777↑j
.text:00402DB2                 mov     [esp+0ACh+Str], offset aLast ; "last="
.text:00402DB9                 call    ds:libintl_gettext
.text:00402DBF                 mov     [esp+0ACh+Str], eax ; Str
.text:00402DC2                 call    strlen
.text:00402DC7                 add     eax, 2
.text:00402DCA                 mov     [esp+0ACh+Str], eax ; size_t
.text:00402DCD                 call    sub_4050B0
.text:00402DD2                 mov     ds:dword_412070, eax
.text:00402DD7                 jmp     loc_402CDD
.text:00402DDC ; ---------------------------------------------------------------------------
.text:00402DDC
.text:00402DDC loc_402DDC:                             ; CODE XREF: sub_402560+73B↑j
.text:00402DDC                 mov     [esp+0ACh+Str], offset aRunLevel ; "run-level"
.text:00402DE3                 call    ds:libintl_gettext
.text:00402DE9                 mov     [esp+0ACh+Str], eax ; Str
.text:00402DEC                 call    strlen
.text:00402DF1                 add     eax, 3
.text:00402DF4                 mov     [esp+0ACh+Str], eax ; size_t
.text:00402DF7                 call    sub_4050B0
.text:00402DFC                 mov     ds:dword_412060, eax
.text:00402E01                 jmp     loc_402CA1
.text:00402E06 ; ---------------------------------------------------------------------------
.text:00402E06
.text:00402E06 loc_402E06:                             ; CODE XREF: sub_402560+724↑j
.text:00402E06                 lea     edx, [eax+0FFh]
.text:00402E0C                 jmp     loc_402C8A
.text:00402E11 ; ---------------------------------------------------------------------------
.text:00402E11
.text:00402E11 loc_402E11:                             ; CODE XREF: sub_402560+8B↑j
.text:00402E11                 mov     [esp+0ACh+Str], edx
.text:00402E14                 mov     eax, [esp+0ACh+var_6C]
.text:00402E18                 mov     [esp+0ACh+Source], eax
.text:00402E1C                 call    near ptr loc_40320D+3
.text:00402E21                 jmp     loc_40280C
.text:00402E26 ; ---------------------------------------------------------------------------
.text:00402E26
.text:00402E26 loc_402E26:                             ; CODE XREF: sub_402560+7E↑j
.text:00402E26                 mov     edi, [esp+0ACh+arg_4]
.text:00402E2D                 movzx   eax, word ptr [edi]
.text:00402E30                 jmp     loc_4025F1
.text:00402E35 ; ---------------------------------------------------------------------------
.text:00402E35
.text:00402E35 loc_402E35:                             ; CODE XREF: sub_402560+6D↑j
.text:00402E35                 mov     esi, [esp+0ACh+arg_4]
.text:00402E3C                 movzx   eax, word ptr [esi]
.text:00402E3F                 jmp     loc_4025F1
.text:00402E44 ; ---------------------------------------------------------------------------
.text:00402E44
.text:00402E44 loc_402E44:                             ; CODE XREF: sub_402560+60↑j
.text:00402E44                 mov     [esp+0ACh+Count], 20h ; ' ' ; MaxCount
.text:00402E4C                 mov     ebx, [esp+0ACh+arg_4]
.text:00402E53                 mov     edx, [esp+0ACh+Str1]
.text:00402E57                 add     ebx, 8
.text:00402E5A                 mov     [esp+0ACh+Source], ebx ; Str2
.text:00402E5E                 mov     [esp+0ACh+Str], edx ; Str1
.text:00402E61                 call    strncmp
.text:00402E66                 test    eax, eax
.text:00402E68                 jnz     loc_402C4C
.text:00402E6E                 jmp     loc_4025C6
.text:00402E73 ; ---------------------------------------------------------------------------
.text:00402E73
.text:00402E73 loc_402E73:                             ; CODE XREF: sub_402560+53↑j
.text:00402E73                                         ; sub_402560+948↓j
.text:00402E73                 mov     ebx, [esp+0ACh+var_10]
.text:00402E7A                 mov     esi, [esp+0ACh+var_C]
.text:00402E81                 mov     edi, [esp+0ACh+var_8]
.text:00402E88                 mov     ebp, [esp+0ACh+var_4]
.text:00402E8F                 add     esp, 0ACh
.text:00402E95                 retn
.text:00402E96 ; ---------------------------------------------------------------------------
.text:00402E96
.text:00402E96 loc_402E96:                             ; CODE XREF: sub_402560+3E↑j
.text:00402E96                 mov     [esp+0ACh+Str], 0
.text:00402E9D                 call    sub_406CC0
.text:00402EA2                 mov     [esp+0ACh+Str1], eax
.text:00402EA6                 test    eax, eax
.text:00402EA8                 jz      short loc_402E73
.text:00402EAA                 cld
.text:00402EAB                 mov     edi, offset aDev ; "/dev/"
.text:00402EB0                 mov     ecx, 5
.text:00402EB5                 mov     esi, eax
.text:00402EB7                 repe cmpsb
.text:00402EB9                 jnz     loc_4025A4
.text:00402EBF                 add     [esp+0ACh+Str1], 5
.text:00402EC4                 jmp     loc_4025A4
.text:00402EC4 ; ---------------------------------------------------------------------------
.text:00402EC9                 align 10h
.text:00402ED0
.text:00402ED0 loc_402ED0:                             ; CODE XREF: sub_402560+31↑j
.text:00402ED0                 mov     [esp+0ACh+Str], offset aExit_0 ; "EXIT"
.text:00402ED7                 call    ds:libintl_gettext
.text:00402EDD                 mov     [esp+0ACh+Str], offset aComment ; "COMMENT"
.text:00402EE4                 mov     [esp+0ACh+var_70], eax
.text:00402EE8                 call    ds:libintl_gettext
.text:00402EEE                 mov     [esp+0ACh+Str], offset aPid ; "PID"
.text:00402EF5                 mov     [esp+0ACh+var_74], eax
.text:00402EF9                 call    ds:libintl_gettext
.text:00402EFF                 mov     [esp+0ACh+Str], offset aIdle ; "IDLE"
.text:00402F06                 mov     ebp, eax
.text:00402F08                 call    ds:libintl_gettext
.text:00402F0E                 mov     [esp+0ACh+Str], offset aTime ; "TIME"
.text:00402F15                 mov     edi, eax
.text:00402F17                 call    ds:libintl_gettext
.text:00402F1D                 mov     [esp+0ACh+Str], offset aLine ; "LINE"
.text:00402F24                 mov     esi, eax
.text:00402F26                 call    ds:libintl_gettext
.text:00402F2C                 mov     [esp+0ACh+Str], offset aName ; "NAME"
.text:00402F33                 mov     ebx, eax
.text:00402F35                 call    ds:libintl_gettext
.text:00402F3B                 mov     [esp+0ACh+var_90], ebp ; char *
.text:00402F3F                 mov     ecx, [esp+0ACh+var_70]
.text:00402F43                 mov     edx, [esp+0ACh+var_74]
.text:00402F47                 mov     [esp+0ACh+var_94], edi ; char *
.text:00402F4B                 mov     [esp+0ACh+var_88], ecx ; char *
.text:00402F4F                 mov     [esp+0ACh+var_8C], edx ; int
.text:00402F53                 mov     [esp+0ACh+var_98], esi ; int
.text:00402F57                 mov     [esp+0ACh+var_9C], ebx ; int
.text:00402F5B                 mov     [esp+0ACh+Tm], 0FFFFFFFFh ; int
.text:00402F63                 mov     [esp+0ACh+Count], 20h ; ' ' ; int
.text:00402F6B                 mov     [esp+0ACh+Source], eax ; int
.text:00402F6F                 mov     [esp+0ACh+Str], 0FFFFFFFFh ; int
.text:00402F76                 call    sub_402FC0
.text:00402F7B                 jmp     loc_402597
.text:00402F7B sub_402560      endp
.text:00402F7B
.text:00402F7B ; ---------------------------------------------------------------------------
.text:00402F80 ; const char a8SS12SSSS8sS[]
.text:00402F80 a8SS12SSSS8sS   db '%-8.*s%s %-12.*s %-*s%s%s %-8s%s',0
.text:00402F80                                         ; DATA XREF: sub_402FC0+FD↓o
.text:00402FA1 asc_402FA1      db '   .',0             ; DATA XREF: sub_402FC0:loc_403122↓o
.text:00402FA6 ; const char a12s[]
.text:00402FA6 a12s            db ' %-12s',0           ; DATA XREF: sub_402FC0+177↓o
.text:00402FAD ; const char a10s[]
.text:00402FAD a10s            db ' %10s',0            ; DATA XREF: sub_402FC0+1CB↓o
.text:00402FB3 ; const char a6s[]
.text:00402FB3 a6s             db ' %-6s',0            ; DATA XREF: sub_402FC0+201↓o
.text:00402FB9                 align 10h
.text:00402FC0
.text:00402FC0 ; =============== S U B R O U T I N E =======================================
.text:00402FC0
.text:00402FC0
.text:00402FC0 ; int __cdecl sub_402FC0(int, int, int, int, int, int, char *, char *, int, char *)
.text:00402FC0 sub_402FC0      proc near               ; CODE XREF: sub_402560+29F↑p
.text:00402FC0                                         ; sub_402560+42D↑p ...
.text:00402FC0
.text:00402FC0 Str             = dword ptr -7Ch
.text:00402FC0 Format          = dword ptr -78h
.text:00402FC0 var_74          = dword ptr -74h
.text:00402FC0 var_70          = dword ptr -70h
.text:00402FC0 var_6C          = dword ptr -6Ch
.text:00402FC0 var_68          = dword ptr -68h
.text:00402FC0 var_64          = dword ptr -64h
.text:00402FC0 var_60          = dword ptr -60h
.text:00402FC0 var_5C          = dword ptr -5Ch
.text:00402FC0 var_58          = dword ptr -58h
.text:00402FC0 var_54          = dword ptr -54h
.text:00402FC0 var_50          = dword ptr -50h
.text:00402FC0 var_4C          = dword ptr -4Ch
.text:00402FC0 Buffer          = dword ptr -38h
.text:00402FC0 var_34          = byte ptr -34h
.text:00402FC0 var_2C          = byte ptr -2Ch
.text:00402FC0 arg_0           = dword ptr  4
.text:00402FC0 arg_4           = dword ptr  8
.text:00402FC0 arg_8           = dword ptr  0Ch
.text:00402FC0 arg_C           = dword ptr  10h
.text:00402FC0 arg_10          = dword ptr  14h
.text:00402FC0 arg_14          = dword ptr  18h
.text:00402FC0 arg_18          = dword ptr  1Ch
.text:00402FC0 arg_1C          = dword ptr  20h
.text:00402FC0 arg_20          = dword ptr  24h
.text:00402FC0 arg_24          = dword ptr  28h
.text:00402FC0
.text:00402FC0                 push    ebp
.text:00402FC1                 push    edi
.text:00402FC2                 push    esi
.text:00402FC3                 push    ebx
.text:00402FC4                 sub     esp, 6Ch
.text:00402FC7                 mov     edx, [esp+7Ch+arg_8]
.text:00402FCE                 cmp     ds:byte_4120C0, 0
.text:00402FD5                 mov     ebx, [esp+7Ch+arg_18]
.text:00402FDC                 mov     esi, [esp+7Ch+arg_1C]
.text:00402FE3                 mov     byte_411011, dl
.text:00402FE9                 mov     edi, [esp+7Ch+arg_24]
.text:00402FF0                 jz      loc_4031AD
.text:00402FF6                 movzx   eax, ds:byte_4120B0
.text:00402FFD                 test    al, al
.text:00402FFF                 jz      loc_4031A0
.text:00403005
.text:00403005 loc_403005:                             ; CODE XREF: sub_402FC0+1F4↓j
.text:00403005                 mov     [esp+7Ch+var_34], 0
.text:0040300A                 lea     ebp, [esp+7Ch+var_34]
.text:0040300E
.text:0040300E loc_40300E:                             ; CODE XREF: sub_402FC0+218↓j
.text:0040300E                 test    al, al
.text:00403010                 jz      loc_403172
.text:00403016
.text:00403016 loc_403016:                             ; CODE XREF: sub_402FC0+1BD↓j
.text:00403016                 mov     [esp+7Ch+var_2C], 0
.text:0040301B                 lea     esi, [esp+7Ch+var_2C]
.text:0040301F
.text:0040301F loc_40301F:                             ; CODE XREF: sub_402FC0+1DB↓j
.text:0040301F                 cmp     ds:byte_4120F0, 0
.text:00403026                 jnz     loc_40314C
.text:0040302C                 mov     edx, 1
.text:00403031
.text:00403031 loc_403031:                             ; CODE XREF: sub_402FC0+19C↓j
.text:00403031                                         ; sub_402FC0+1AD↓j
.text:00403031                 mov     [esp+7Ch+Str], edx ; size_t
.text:00403034                 call    sub_4050B0
.text:00403039                 cmp     ds:byte_4120F0, 0
.text:00403040                 mov     ebx, eax
.text:00403042                 jnz     loc_403133
.text:00403048                 mov     byte ptr [eax], 0
.text:0040304B
.text:0040304B loc_40304B:                             ; CODE XREF: sub_402FC0+187↓j
.text:0040304B                 cmp     ds:byte_4120E0, 0
.text:00403052                 mov     [esp+7Ch+var_54], esi
.text:00403056                 mov     edx, [esp+7Ch+arg_20]
.text:0040305D                 mov     [esp+7Ch+var_4C], ebx
.text:00403061                 mov     edi, [esp+7Ch+arg_14]
.text:00403068                 mov     [esp+7Ch+var_58], ebp
.text:0040306C                 mov     esi, ds:dword_412190
.text:00403072                 mov     ecx, [esp+7Ch+arg_10]
.text:00403079                 mov     [esp+7Ch+var_50], edx
.text:0040307D                 mov     edx, [esp+7Ch+arg_C]
.text:00403084                 mov     [esp+7Ch+var_5C], edi
.text:00403088                 mov     [esp+7Ch+var_60], esi
.text:0040308C                 mov     [esp+7Ch+var_64], ecx
.text:00403090                 mov     [esp+7Ch+var_68], edx
.text:00403094                 jz      loc_403129
.text:0040309A                 mov     eax, offset unk_411010
.text:0040309F
.text:0040309F loc_40309F:                             ; CODE XREF: sub_402FC0+16E↓j
.text:0040309F                 mov     [esp+7Ch+var_6C], eax
.text:004030A3                 mov     eax, [esp+7Ch+arg_4]
.text:004030AA                 test    eax, eax
.text:004030AC                 jz      short loc_403122
.text:004030AE
.text:004030AE loc_4030AE:                             ; CODE XREF: sub_402FC0+167↓j
.text:004030AE                 mov     [esp+7Ch+var_70], eax
.text:004030B2                 mov     ecx, [esp+7Ch+arg_0]
.text:004030B9                 lea     ebp, [esp+7Ch+Buffer]
.text:004030BD                 mov     [esp+7Ch+Format], offset a8SS12SSSS8sS ; "%-8.*s%s %-12.*s %-*s%s%s %-8s%s"
.text:004030C5                 mov     [esp+7Ch+Str], ebp ; int
.text:004030C8                 mov     [esp+7Ch+var_74], ecx ; int
.text:004030CC                 call    sub_40DCE0
.text:004030D1                 inc     eax
.text:004030D2                 jz      loc_4031DD
.text:004030D8                 mov     edi, [esp+7Ch+Buffer]
.text:004030DC                 mov     [esp+7Ch+Str], edi ; Str
.text:004030DF                 call    strlen
.text:004030E4                 mov     esi, [esp+7Ch+Buffer]
.text:004030E8                 add     eax, esi
.text:004030EA                 lea     esi, [esi+0]
.text:004030F0
.text:004030F0 loc_4030F0:                             ; CODE XREF: sub_402FC0+134↓j
.text:004030F0                 dec     eax
.text:004030F1                 cmp     byte ptr [eax], 20h ; ' '
.text:004030F4                 jz      short loc_4030F0
.text:004030F6                 mov     byte ptr [eax+1], 0
.text:004030FA                 mov     ebp, [esp+7Ch+Buffer]
.text:004030FE                 mov     [esp+7Ch+Str], ebp ; Buffer
.text:00403101                 call    puts
.text:00403106                 mov     edx, [esp+7Ch+Buffer]
.text:0040310A                 mov     [esp+7Ch+Str], edx ; Block
.text:0040310D                 call    free
.text:00403112                 mov     [esp+7Ch+Str], ebx ; Block
.text:00403115                 call    free
.text:0040311A                 add     esp, 6Ch
.text:0040311D                 pop     ebx
.text:0040311E                 pop     esi
.text:0040311F                 pop     edi
.text:00403120                 pop     ebp
.text:00403121                 retn
.text:00403122 ; ---------------------------------------------------------------------------
.text:00403122
.text:00403122 loc_403122:                             ; CODE XREF: sub_402FC0+EC↑j
.text:00403122                 mov     eax, offset asc_402FA1 ; "   ."
.text:00403127                 jmp     short loc_4030AE
.text:00403129 ; ---------------------------------------------------------------------------
.text:00403129
.text:00403129 loc_403129:                             ; CODE XREF: sub_402FC0+D4↑j
.text:00403129                 mov     eax, offset Locale
.text:0040312E                 jmp     loc_40309F
.text:00403133 ; ---------------------------------------------------------------------------
.text:00403133
.text:00403133 loc_403133:                             ; CODE XREF: sub_402FC0+82↑j
.text:00403133                 mov     [esp+7Ch+var_74], edi
.text:00403137                 mov     [esp+7Ch+Format], offset a12s ; " %-12s"
.text:0040313F                 mov     [esp+7Ch+Str], eax ; Buffer
.text:00403142                 call    sprintf
.text:00403147                 jmp     loc_40304B
.text:0040314C ; ---------------------------------------------------------------------------
.text:0040314C
.text:0040314C loc_40314C:                             ; CODE XREF: sub_402FC0+66↑j
.text:0040314C                 mov     [esp+7Ch+Str], edi ; Str
.text:0040314F                 call    strlen
.text:00403154                 cmp     eax, 0Bh
.text:00403157                 mov     edx, 0Eh
.text:0040315C                 jbe     loc_403031
.text:00403162                 mov     [esp+7Ch+Str], edi ; Str
.text:00403165                 call    strlen
.text:0040316A                 lea     edx, [eax+2]
.text:0040316D                 jmp     loc_403031
.text:00403172 ; ---------------------------------------------------------------------------
.text:00403172
.text:00403172 loc_403172:                             ; CODE XREF: sub_402FC0+50↑j
.text:00403172                 mov     [esp+7Ch+Str], esi ; Str
.text:00403175                 call    strlen
.text:0040317A                 cmp     eax, 0Bh
.text:0040317D                 ja      loc_403016
.text:00403183                 mov     [esp+7Ch+var_74], esi
.text:00403187                 lea     esi, [esp+7Ch+var_2C]
.text:0040318B                 mov     [esp+7Ch+Format], offset a10s ; " %10s"
.text:00403193                 mov     [esp+7Ch+Str], esi ; Buffer
.text:00403196                 call    sprintf
.text:0040319B                 jmp     loc_40301F
.text:004031A0 ; ---------------------------------------------------------------------------
.text:004031A0
.text:004031A0 loc_4031A0:                             ; CODE XREF: sub_402FC0+3F↑j
.text:004031A0                 mov     [esp+7Ch+Str], ebx ; Str
.text:004031A3                 call    strlen
.text:004031A8                 cmp     eax, 6
.text:004031AB                 jbe     short loc_4031B9
.text:004031AD
.text:004031AD loc_4031AD:                             ; CODE XREF: sub_402FC0+30↑j
.text:004031AD                 movzx   eax, ds:byte_4120B0
.text:004031B4                 jmp     loc_403005
.text:004031B9 ; ---------------------------------------------------------------------------
.text:004031B9
.text:004031B9 loc_4031B9:                             ; CODE XREF: sub_402FC0+1EB↑j
.text:004031B9                 mov     [esp+7Ch+var_74], ebx
.text:004031BD                 lea     ebp, [esp+7Ch+var_34]
.text:004031C1                 mov     [esp+7Ch+Format], offset a6s ; " %-6s"
.text:004031C9                 mov     [esp+7Ch+Str], ebp ; Buffer
.text:004031CC                 call    sprintf
.text:004031D1                 movzx   eax, ds:byte_4120B0
.text:004031D8                 jmp     loc_40300E
.text:004031DD ; ---------------------------------------------------------------------------
.text:004031DD
.text:004031DD loc_4031DD:                             ; CODE XREF: sub_402FC0+112↑j
.text:004031DD                 call    sub_405430
.text:004031DD sub_402FC0      endp
.text:004031DD
.text:004031DD ; ---------------------------------------------------------------------------
.text:004031E2 asc_4031E2      db '  .  ',0            ; DATA XREF: .text:0040330B↓o
.text:004031E8 ; ---------------------------------------------------------------------------
.text:004031E8
.text:004031E8 loc_4031E8:                             ; DATA XREF: .text:00403333↓o
.text:004031E8                 and     eax, 732A2Eh
.text:004031ED
.text:004031ED loc_4031ED:                             ; DATA XREF: .text:004034FD↓o
.text:004031ED                 sub     ds:73253A73h, ah
.text:004031F3                 sub     [eax], eax
.text:004031F5
.text:004031F5 loc_4031F5:                             ; DATA XREF: .text:00403578↓o
.text:004031F5                 sub     ds:25002973h, ah
.text:004031FB                 xor     [edx], dh
.text:004031FD                 cmp     ah, fs:643230h
.text:00403204
.text:00403204 loc_403204:                             ; DATA XREF: .text:loc_403627↓o
.text:00403204                 and     [edi+6Ch], ch
.text:00403207                 and     fs:[eax], al
.text:0040320A
.text:0040320A loc_40320A:                             ; DATA XREF: .text:loc_403651↓o
.text:0040320A                 and     [eax], ah
.text:0040320C                 aas
.text:0040320D
.text:0040320D loc_40320D:                             ; CODE XREF: sub_402560+8BC↑p
.text:0040320D                 add     [ecx+565755F6h], cl
.text:00403213                 push    ebx
.text:00403214                 sub     esp, 21Ch
.text:0040321A                 mov     ebp, [esp+230h]
.text:00403221                 mov     edx, [ebp+4]
.text:00403224                 mov     dword ptr [esp+4], offset aLd ; "%ld"
.text:0040322C                 mov     [esp+8], edx
.text:00403230                 lea     edx, [esp+150h]
.text:00403237                 mov     [esp], edx
.text:0040323A                 call    sprintf
.text:0040323F                 cmp     byte ptr [ebp+8], 2Fh ; '/'
.text:00403243                 jz      loc_403690
.text:00403249                 mov     dword ptr [esp+8], 20h ; ' '
.text:00403251                 lea     ebx, [ebp+8]
.text:00403254                 mov     esi, 7665642Fh
.text:00403259                 mov     [esp+34h], ebx
.text:0040325D                 lea     ecx, [esp+165h]
.text:00403264                 mov     edi, 2Fh ; '/'
.text:00403269                 mov     [esp+4], ebx
.text:0040326D                 lea     ebx, [esp+160h]
.text:00403274                 mov     [esp+160h], esi
.text:0040327B                 mov     [esp+164h], di
.text:00403283                 mov     [esp], ecx
.text:00403286                 call    strncpy
.text:0040328B                 mov     byte ptr [esp+185h], 0
.text:00403293
.text:00403293 loc_403293:                             ; CODE XREF: .text:004036BA↓j
.text:00403293                 mov     [esp], ebx
.text:00403296                 lea     edx, [esp+1A0h]
.text:0040329D                 mov     [esp+4], edx
.text:004032A1                 call    sub_406BC0
.text:004032A6                 test    eax, eax
.text:004032A8                 jnz     loc_403680
.text:004032AE                 test    byte ptr [esp+1A0h], 10h
.text:004032B6                 jz      loc_403670
.text:004032BC                 mov     byte ptr [esp+3Bh], 2Bh ; '+'
.text:004032C1
.text:004032C1 loc_4032C1:                             ; CODE XREF: .text:00403675↓j
.text:004032C1                 mov     ebx, [esp+1D8h]
.text:004032C8
.text:004032C8 loc_4032C8:                             ; CODE XREF: .text:00403687↓j
.text:004032C8                 test    ebx, ebx
.text:004032CA                 jz      loc_403651
.text:004032D0                 cmp     dword_411014, 80000000h
.text:004032DA                 jz      loc_403640
.text:004032E0
.text:004032E0 loc_4032E0:                             ; CODE XREF: .text:0040364C↓j
.text:004032E0                 cmp     [esp+234h], ebx
.text:004032E7                 jge     loc_403627
.text:004032ED                 mov     edx, dword_411014
.text:004032F3                 lea     ecx, [edx-15180h]
.text:004032F9                 cmp     ecx, ebx
.text:004032FB                 jge     loc_403627
.text:00403301                 cmp     ebx, edx
.text:00403303                 jg      loc_403627
.text:00403309                 sub     edx, ebx
.text:0040330B                 mov     eax, offset asc_4031E2 ; "  .  "
.text:00403310                 cmp     edx, 3Bh ; ';'
.text:00403313                 mov     ebx, edx
.text:00403315                 jg      loc_4035CE
.text:0040331B                 nop
.text:0040331C                 lea     esi, [esi+0]
.text:00403320
.text:00403320 loc_403320:                             ; CODE XREF: .text:00403622↓j
.text:00403320                                         ; .text:00403634↓j
.text:00403320                 mov     [esp+0Ch], eax
.text:00403324                 lea     eax, [esp+190h]
.text:0040332B                 mov     dword ptr [esp+8], 6
.text:00403333                 mov     dword ptr [esp+4], offset loc_4031E8
.text:0040333B                 mov     [esp], eax
.text:0040333E                 call    sprintf
.text:00403343
.text:00403343 loc_403343:                             ; CODE XREF: .text:00403668↓j
.text:00403343                 cmp     byte ptr [ebp+4Ch], 0
.text:00403347                 jnz     loc_403470
.text:0040334D                 mov     eax, ds:dword_412010
.text:00403352                 test    eax, eax
.text:00403354                 jz      loc_403440
.text:0040335A
.text:0040335A loc_40335A:                             ; CODE XREF: .text:00403466↓j
.text:0040335A                 mov     dword ptr [esp+4], offset Locale
.text:00403362                 mov     esi, ds:dword_412000
.text:00403368                 mov     [esp], esi
.text:0040336B                 call    sub_406CD0
.text:00403370
.text:00403370 loc_403370:                             ; CODE XREF: .text:00403513↓j
.text:00403370                                         ; .text:00403521↓j
.text:00403370                 mov     ecx, [ebp+154h]
.text:00403376                 lea     edx, [esp+3Ch]
.text:0040337A                 mov     [esp], edx
.text:0040337D                 mov     [esp+3Ch], ecx
.text:00403381                 call    localtime
.text:00403386                 test    eax, eax
.text:00403388                 jz      loc_403421
.text:0040338E                 mov     [esp+0Ch], eax
.text:00403392                 mov     edi, ds:dword_412180
.text:00403398                 mov     dword ptr [esp+4], 22h ; '"'
.text:004033A0                 mov     dword ptr [esp], offset byte_412030
.text:004033A7                 mov     [esp+8], edi
.text:004033AB                 call    strftime
.text:004033B0                 mov     eax, offset byte_412030
.text:004033B5
.text:004033B5 loc_4033B5:                             ; CODE XREF: .text:0040343A↓j
.text:004033B5                 mov     dword ptr [esp+24h], offset Locale
.text:004033BD                 mov     edx, ds:dword_412000
.text:004033C3                 test    edx, edx
.text:004033C5                 jnz     short loc_4033CC
.text:004033C7                 mov     edx, offset Locale
.text:004033CC
.text:004033CC loc_4033CC:                             ; CODE XREF: .text:004033C5↑j
.text:004033CC                 movsx   esi, byte ptr [esp+3Bh]
.text:004033D1                 lea     edi, [esp+150h]
.text:004033D8                 mov     [esp+20h], edx
.text:004033DC                 mov     edx, [esp+34h]
.text:004033E0                 lea     ecx, [esp+190h]
.text:004033E7                 mov     [esp+1Ch], edi
.text:004033EB                 lea     ebx, [ebp+2Ch]
.text:004033EE                 mov     [esp+4], ebx
.text:004033F2                 mov     [esp+8], esi
.text:004033F6                 mov     [esp+18h], ecx
.text:004033FA                 mov     [esp+14h], eax
.text:004033FE                 mov     [esp+10h], edx
.text:00403402                 mov     dword ptr [esp+0Ch], 20h ; ' '
.text:0040340A                 mov     dword ptr [esp], 20h ; ' '
.text:00403411                 call    sub_402FC0
.text:00403416                 add     esp, 21Ch
.text:0040341C                 pop     ebx
.text:0040341D                 pop     esi
.text:0040341E                 pop     edi
.text:0040341F                 pop     ebp
.text:00403420                 retn
.text:00403421 ; ---------------------------------------------------------------------------
.text:00403421
.text:00403421 loc_403421:                             ; CODE XREF: .text:00403388↑j
.text:00403421                 mov     dword ptr [esp+8], offset byte_412030
.text:00403429                 mov     eax, [esp+3Ch]
.text:0040342D                 cdq
.text:0040342E                 mov     [esp], eax
.text:00403431                 mov     [esp+4], edx
.text:00403435                 call    sub_405470
.text:0040343A                 jmp     loc_4033B5
.text:0040343A ; ---------------------------------------------------------------------------
.text:0040343F                 align 10h
.text:00403440
.text:00403440 loc_403440:                             ; CODE XREF: .text:00403354↑j
.text:00403440                 mov     dword ptr [esp+4], 1
.text:00403448                 mov     edi, ds:dword_412000
.text:0040344E                 mov     ebx, 1
.text:00403453                 mov     ds:dword_412010, ebx
.text:00403459                 mov     [esp], edi
.text:0040345C                 call    sub_405140
.text:00403461                 mov     ds:dword_412000, eax
.text:00403466                 jmp     loc_40335A
.text:00403466 ; ---------------------------------------------------------------------------
.text:0040346B                 align 10h
.text:00403470
.text:00403470 loc_403470:                             ; CODE XREF: .text:00403347↑j
.text:00403470                 mov     dword ptr [esp+8], 100h
.text:00403478                 lea     edx, [ebp+4Ch]
.text:0040347B                 lea     ecx, [esp+40h]
.text:0040347F                 mov     [esp+4], edx
.text:00403483                 lea     edi, [esp+40h]
.text:00403487                 mov     [esp], ecx
.text:0040348A                 call    strncpy
.text:0040348F                 mov     byte ptr [esp+140h], 0
.text:00403497                 mov     dword ptr [esp+4], 3Ah ; ':'
.text:0040349F                 mov     [esp], edi
.text:004034A2                 call    strchr
.text:004034A7                 test    eax, eax
.text:004034A9                 mov     ebx, eax
.text:004034AB                 jz      short loc_4034B1
.text:004034AD                 mov     byte ptr [eax], 0
.text:004034B0                 inc     ebx
.text:004034B1
.text:004034B1 loc_4034B1:                             ; CODE XREF: .text:004034AB↑j
.text:004034B1                 cmp     byte ptr [esp+40h], 0
.text:004034B6                 jz      short loc_4034C5
.text:004034B8                 cmp     ds:byte_412090, 0
.text:004034BF                 jnz     loc_4035B3
.text:004034C5
.text:004034C5 loc_4034C5:                             ; CODE XREF: .text:004034B6↑j
.text:004034C5                                         ; .text:004035C9↓j
.text:004034C5                 lea     edi, [esp+40h]
.text:004034C9
.text:004034C9 loc_4034C9:                             ; CODE XREF: .text:004035C3↓j
.text:004034C9                 test    ebx, ebx
.text:004034CB                 jz      loc_40355B
.text:004034D1                 mov     [esp], edi
.text:004034D4                 call    strlen
.text:004034D9                 mov     [esp], ebx
.text:004034DC                 mov     esi, eax
.text:004034DE                 call    strlen
.text:004034E3                 lea     ecx, [eax+esi+4]
.text:004034E7                 cmp     ds:dword_412010, ecx
.text:004034ED                 jb      short loc_403526
.text:004034EF
.text:004034EF loc_4034EF:                             ; CODE XREF: .text:00403559↓j
.text:004034EF                 mov     [esp+0Ch], ebx
.text:004034F3                 mov     ebx, ds:dword_412000
.text:004034F9                 mov     [esp+8], edi
.text:004034FD                 mov     dword ptr [esp+4], offset loc_4031ED
.text:00403505                 mov     [esp], ebx
.text:00403508                 call    sprintf
.text:0040350D
.text:0040350D loc_40350D:                             ; CODE XREF: .text:00403588↓j
.text:0040350D                 lea     ecx, [esp+40h]
.text:00403511                 cmp     edi, ecx
.text:00403513                 jz      loc_403370
.text:00403519                 mov     [esp], edi
.text:0040351C                 call    free
.text:00403521                 jmp     loc_403370
.text:00403526 ; ---------------------------------------------------------------------------
.text:00403526
.text:00403526 loc_403526:                             ; CODE XREF: .text:004034ED↑j
.text:00403526                 mov     [esp], edi
.text:00403529                 call    strlen
.text:0040352E                 mov     [esp], ebx
.text:00403531                 mov     esi, eax
.text:00403533                 call    strlen
.text:00403538                 mov     edx, ds:dword_412000
.text:0040353E                 lea     ecx, [eax+esi+4]
.text:00403542                 mov     ds:dword_412010, ecx
.text:00403548                 mov     [esp+4], ecx
.text:0040354C                 mov     [esp], edx
.text:0040354F                 call    sub_405140
.text:00403554                 mov     ds:dword_412000, eax
.text:00403559                 jmp     short loc_4034EF
.text:0040355B ; ---------------------------------------------------------------------------
.text:0040355B
.text:0040355B loc_40355B:                             ; CODE XREF: .text:004034CB↑j
.text:0040355B                 mov     [esp], edi
.text:0040355E                 call    strlen
.text:00403563                 add     eax, 3
.text:00403566                 cmp     ds:dword_412010, eax
.text:0040356C                 jb      short loc_40358A
.text:0040356E
.text:0040356E loc_40356E:                             ; CODE XREF: .text:004035B1↓j
.text:0040356E                 mov     [esp+8], edi
.text:00403572                 mov     edx, ds:dword_412000
.text:00403578                 mov     dword ptr [esp+4], offset loc_4031F5
.text:00403580                 mov     [esp], edx
.text:00403583                 call    sprintf
.text:00403588                 jmp     short loc_40350D
.text:0040358A ; ---------------------------------------------------------------------------
.text:0040358A
.text:0040358A loc_40358A:                             ; CODE XREF: .text:0040356C↑j
.text:0040358A                 mov     [esp], edi
.text:0040358D                 call    strlen
.text:00403592                 mov     esi, ds:dword_412000
.text:00403598                 add     eax, 3
.text:0040359B                 mov     ds:dword_412010, eax
.text:004035A0                 mov     [esp+4], eax
.text:004035A4                 mov     [esp], esi
.text:004035A7                 call    sub_405140
.text:004035AC                 mov     ds:dword_412000, eax
.text:004035B1                 jmp     short loc_40356E
.text:004035B3 ; ---------------------------------------------------------------------------
.text:004035B3
.text:004035B3 loc_4035B3:                             ; CODE XREF: .text:004034BF↑j
.text:004035B3                 lea     esi, [esp+40h]
.text:004035B7                 mov     [esp], esi
.text:004035BA                 call    sub_405340
.text:004035BF                 test    eax, eax
.text:004035C1                 mov     edi, eax
.text:004035C3                 jnz     loc_4034C9
.text:004035C9                 jmp     loc_4034C5
.text:004035CE ; ---------------------------------------------------------------------------
.text:004035CE
.text:004035CE loc_4035CE:                             ; CODE XREF: .text:00403315↑j
.text:004035CE                 mov     dword ptr [esp+4], 4031FAh
.text:004035D6                 mov     eax, 91A2B3C5h
.text:004035DB                 mov     esi, ebx
.text:004035DD                 mov     dword ptr [esp], offset unk_412020
.text:004035E4                 imul    edx
.text:004035E6                 mov     ecx, 88888889h
.text:004035EB                 sar     esi, 1Fh
.text:004035EE                 lea     edi, [edx+ebx]
.text:004035F1                 sar     edi, 0Bh
.text:004035F4                 sub     edi, esi
.text:004035F6                 mov     edx, edi
.text:004035F8                 imul    edx, 0E10h
.text:004035FE                 mov     [esp+8], edi
.text:00403602                 sub     ebx, edx
.text:00403604                 mov     eax, ebx
.text:00403606                 imul    ecx
.text:00403608                 mov     esi, ebx
.text:0040360A                 sar     esi, 1Fh
.text:0040360D                 add     edx, ebx
.text:0040360F                 sar     edx, 5
.text:00403612                 sub     edx, esi
.text:00403614                 mov     [esp+0Ch], edx
.text:00403618                 call    sprintf
.text:0040361D                 mov     eax, offset unk_412020
.text:00403622                 jmp     loc_403320
.text:00403627 ; ---------------------------------------------------------------------------
.text:00403627
.text:00403627 loc_403627:                             ; CODE XREF: .text:004032E7↑j
.text:00403627                                         ; .text:004032FB↑j ...
.text:00403627                 mov     dword ptr [esp], offset loc_403204
.text:0040362E                 call    ds:libintl_gettext
.text:00403634                 jmp     loc_403320
.text:00403634 ; ---------------------------------------------------------------------------
.text:00403639                 align 10h
.text:00403640
.text:00403640 loc_403640:                             ; CODE XREF: .text:004032DA↑j
.text:00403640                 mov     dword ptr [esp], offset dword_411014
.text:00403647                 call    time
.text:0040364C                 jmp     loc_4032E0
.text:00403651 ; ---------------------------------------------------------------------------
.text:00403651
.text:00403651 loc_403651:                             ; CODE XREF: .text:004032CA↑j
.text:00403651                 mov     dword ptr [esp+4], offset loc_40320A
.text:00403659                 lea     ebx, [esp+190h]
.text:00403660                 mov     [esp], ebx
.text:00403663                 call    sprintf
.text:00403668                 jmp     loc_403343
.text:00403668 ; ---------------------------------------------------------------------------
.text:0040366D                 align 10h
.text:00403670
.text:00403670 loc_403670:                             ; CODE XREF: .text:004032B6↑j
.text:00403670                 mov     byte ptr [esp+3Bh], 2Dh ; '-'
.text:00403675                 jmp     loc_4032C1
.text:00403675 ; ---------------------------------------------------------------------------
.text:0040367A                 align 10h
.text:00403680
.text:00403680 loc_403680:                             ; CODE XREF: .text:004032A8↑j
.text:00403680                 mov     byte ptr [esp+3Bh], 3Fh ; '?'
.text:00403685                 xor     ebx, ebx
.text:00403687                 jmp     loc_4032C8
.text:00403687 ; ---------------------------------------------------------------------------
.text:0040368C                 align 10h
.text:00403690
.text:00403690 loc_403690:                             ; CODE XREF: .text:00403243↑j
.text:00403690                 mov     dword ptr [esp+8], 20h ; ' '
.text:00403698                 lea     eax, [ebp+8]
.text:0040369B                 lea     ebx, [esp+160h]
.text:004036A2                 mov     [esp+34h], eax
.text:004036A6                 mov     [esp+4], eax
.text:004036AA                 mov     [esp], ebx
.text:004036AD                 call    strncpy
.text:004036B2                 mov     byte ptr [esp+180h], 0
.text:004036BA                 jmp     loc_403293
.text:004036BA ; ---------------------------------------------------------------------------
.text:004036BF                 align 10h
.text:004036C0
.text:004036C0 ; =============== S U B R O U T I N E =======================================
.text:004036C0
.text:004036C0
.text:004036C0 sub_4036C0      proc near               ; CODE XREF: sub_401B10+59F↑p
.text:004036C0                                         ; sub_401B10+6A0↑p ...
.text:004036C0
.text:004036C0 Destination     = dword ptr -1Ch
.text:004036C0 Source          = dword ptr -18h
.text:004036C0 Count           = dword ptr -14h
.text:004036C0 var_4           = dword ptr -4
.text:004036C0 arg_0           = dword ptr  4
.text:004036C0
.text:004036C0                 sub     esp, 1Ch
.text:004036C3                 mov     [esp+1Ch+var_4], ebx
.text:004036C7                 mov     [esp+1Ch+Destination], 21h ; '!' ; size_t
.text:004036CE                 call    sub_4050B0
.text:004036D3                 mov     [esp+1Ch+Destination], eax ; Destination
.text:004036D6                 mov     edx, [esp+1Ch+arg_0]
.text:004036DA                 mov     ebx, eax
.text:004036DC                 mov     [esp+1Ch+Count], 20h ; ' ' ; Count
.text:004036E4                 add     edx, 2Ch ; ','
.text:004036E7                 mov     [esp+1Ch+Source], edx ; Source
.text:004036EB                 call    strncpy
.text:004036F0                 mov     byte ptr [ebx+20h], 0
.text:004036F4                 mov     [esp+1Ch+Destination], ebx ; Str
.text:004036F7                 call    strlen
.text:004036FC                 lea     eax, [eax+ebx]
.text:004036FF                 cmp     ebx, eax
.text:00403701                 jnb     short loc_403710
.text:00403703                 cmp     byte ptr [eax-1], 20h ; ' '
.text:00403707                 jz      short loc_403720
.text:00403709                 lea     esi, [esi+0]
.text:00403710
.text:00403710 loc_403710:                             ; CODE XREF: sub_4036C0+41↑j
.text:00403710                                         ; sub_4036C0+66↓j ...
.text:00403710                 mov     eax, ebx
.text:00403712                 mov     ebx, [esp+1Ch+var_4]
.text:00403716                 add     esp, 1Ch
.text:00403719                 retn
.text:00403719 ; ---------------------------------------------------------------------------
.text:0040371A                 align 10h
.text:00403720
.text:00403720 loc_403720:                             ; CODE XREF: sub_4036C0+47↑j
.text:00403720                                         ; sub_4036C0+6E↓j
.text:00403720                 dec     eax
.text:00403721                 cmp     ebx, eax
.text:00403723                 mov     byte ptr [eax], 0
.text:00403726                 jnb     short loc_403710
.text:00403728                 cmp     byte ptr [eax-1], 20h ; ' '
.text:0040372C                 jnz     short loc_403710
.text:0040372E                 jmp     short loc_403720
.text:0040372E sub_4036C0      endp
.text:0040372E
.text:00403730
.text:00403730 ; =============== S U B R O U T I N E =======================================
.text:00403730
.text:00403730
.text:00403730 ; int __cdecl sub_403730(char *, int, int)
.text:00403730 sub_403730      proc near               ; CODE XREF: sub_401B10+524↑p
.text:00403730                                         ; sub_401B10+62D↑p ...
.text:00403730
.text:00403730 String          = dword ptr -2Ch
.text:00403730 var_28          = dword ptr -28h
.text:00403730 var_24          = dword ptr -24h
.text:00403730 var_1C          = dword ptr -1Ch
.text:00403730 var_18          = dword ptr -18h
.text:00403730 var_14          = dword ptr -14h
.text:00403730 arg_0           = dword ptr  4
.text:00403730 arg_4           = dword ptr  8
.text:00403730 arg_8           = dword ptr  0Ch
.text:00403730
.text:00403730                 push    ebp
.text:00403731                 xor     ebp, ebp
.text:00403733                 push    edi
.text:00403734                 push    esi
.text:00403735                 push    ebx
.text:00403736                 sub     esp, 1Ch
.text:00403739                 mov     [esp+2Ch+var_18], 4
.text:00403741                 mov     [esp+2Ch+String], 600h ; size_t
.text:00403748                 call    sub_4050B0
.text:0040374D                 mov     [esp+2Ch+var_1C], eax
.text:00403751                 mov     edx, [esp+2Ch+arg_0]
.text:00403755                 mov     [esp+2Ch+String], edx ; String
.text:00403758                 call    sub_406D30
.text:0040375D                 call    sub_406D20
.text:00403762                 mov     [esp+2Ch+var_14], 0
.text:0040376A                 lea     esi, [esi+0]
.text:00403770
.text:00403770 loc_403770:                             ; CODE XREF: sub_403730+9D↓j
.text:00403770                 call    sub_406D10
.text:00403775                 test    eax, eax
.text:00403777                 mov     ebx, eax
.text:00403779                 jz      loc_4037FC
.text:0040377F                 mov     edx, [esp+2Ch+var_18]
.text:00403783                 cmp     [esp+2Ch+var_14], edx
.text:00403787                 jz      short loc_4037D0
.text:00403789
.text:00403789 loc_403789:                             ; CODE XREF: sub_403730+CA↓j
.text:00403789                 inc     [esp+2Ch+var_14]
.text:0040378D                 add     ebp, 180h
.text:00403793                 mov     edi, [esp+2Ch+var_1C]
.text:00403797                 mov     esi, ebx
.text:00403799                 mov     eax, 180h
.text:0040379E                 lea     edx, [edi+ebp]
.text:004037A1                 lea     edi, [edx-180h]
.text:004037A7                 test    edi, 4
.text:004037AD                 jz      short loc_4037C5
.text:004037AF                 mov     ecx, [ebx]
.text:004037B1                 lea     edi, [edx-17Ch]
.text:004037B7                 mov     eax, 17Ch
.text:004037BC                 lea     esi, [ebx+4]
.text:004037BF                 mov     [edx-180h], ecx
.text:004037C5
.text:004037C5 loc_4037C5:                             ; CODE XREF: sub_403730+7D↑j
.text:004037C5                 cld
.text:004037C6                 mov     ecx, eax
.text:004037C8                 shr     ecx, 2
.text:004037CB                 rep movsd
.text:004037CD                 jmp     short loc_403770
.text:004037CD ; ---------------------------------------------------------------------------
.text:004037CF                 align 10h
.text:004037D0
.text:004037D0 loc_4037D0:                             ; CODE XREF: sub_403730+57↑j
.text:004037D0                 mov     [esp+2Ch+var_24], 300h ; int
.text:004037D8                 mov     esi, [esp+2Ch+var_14]
.text:004037DC                 mov     ecx, [esp+2Ch+var_1C]
.text:004037E0                 mov     [esp+2Ch+var_28], esi ; int
.text:004037E4                 mov     [esp+2Ch+String], ecx ; void *
.text:004037E7                 call    sub_4050E0
.text:004037EC                 mov     [esp+2Ch+var_1C], eax
.text:004037F0                 mov     eax, [esp+2Ch+var_14]
.text:004037F4                 add     eax, eax
.text:004037F6                 mov     [esp+2Ch+var_18], eax
.text:004037FA                 jmp     short loc_403789
.text:004037FC ; ---------------------------------------------------------------------------
.text:004037FC
.text:004037FC loc_4037FC:                             ; CODE XREF: sub_403730+49↑j
.text:004037FC                 call    sub_406D00
.text:00403801                 mov     esi, [esp+2Ch+arg_4]
.text:00403805                 mov     eax, [esp+2Ch+var_14]
.text:00403809                 mov     ebx, [esp+2Ch+arg_8]
.text:0040380D                 mov     ebp, [esp+2Ch+var_1C]
.text:00403811                 mov     [esi], eax
.text:00403813                 xor     eax, eax
.text:00403815                 mov     [ebx], ebp
.text:00403817                 add     esp, 1Ch
.text:0040381A                 pop     ebx
.text:0040381B                 pop     esi
.text:0040381C                 pop     edi
.text:0040381D                 pop     ebp
.text:0040381E                 retn
.text:0040381E sub_403730      endp
.text:0040381E
.text:0040381E ; ---------------------------------------------------------------------------
.text:0040381F                 align 10h
.text:00403820 dword_403820    dd 90002D2Dh, 7 dup(90909090h)
.text:00403820                                         ; DATA XREF: sub_403A70+E4↓o
.text:00403840 aSOptionCSDoesn db '%s: option `%c%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00403840                                         ; DATA XREF: sub_403A70+2FC↓o
.text:0040386D                 align 20h
.text:00403880 aSOptionSDoesnT db '%s: option `--%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00403880                                         ; DATA XREF: sub_403A70:loc_403DD2↓o
.text:004038AD                 align 20h
.text:004038C0 aSOptionSRequir db '%s: option `%s',27h,' requires an argument',0Ah,0
.text:004038C0                                         ; DATA XREF: sub_403A70:loc_403E70↓o
.text:004038C0                                         ; sub_403A70:loc_404237↓o
.text:004038E6                 align 20h
.text:00403900 aSUnrecognizedO db '%s: unrecognized option `%c%s',27h,0Ah,0
.text:00403900                                         ; DATA XREF: sub_403A70+48E↓o
.text:00403920 dword_403920    dd 90909000h, 7 dup(90909090h)
.text:00403920                                         ; DATA XREF: sub_403A70:loc_403F41↓o
.text:00403940 aSUnrecognizedO_0 db '%s: unrecognized option `--%s',27h,0Ah,0
.text:00403940                                         ; DATA XREF: sub_403A70:loc_403F5A↓o
.text:00403960 aSOptionRequire db '%s: option requires an argument -- %c',0Ah,0
.text:00403960                                         ; DATA XREF: sub_403A70:loc_40403F↓o
.text:00403960                                         ; sub_403A70:loc_40436C↓o
.text:00403987                 align 20h
.text:004039A0 aSOptionWSDoesn db '%s: option `-W %s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:004039A0                                         ; DATA XREF: sub_403A70:loc_4041B3↓o
.text:004039CE                 align 20h
.text:004039E0 aSOptionWSIsAmb db '%s: option `-W %s',27h,' is ambiguous',0Ah,0
.text:004039E0                                         ; DATA XREF: sub_403A70:loc_40429F↓o
.text:00403A01 aSIllegalOption db '%s: illegal option -- %c',0Ah,0
.text:00403A01                                         ; DATA XREF: sub_403A70+93F↓o
.text:00403A1B aSInvalidOption db '%s: invalid option -- %c',0Ah,0
.text:00403A1B                                         ; DATA XREF: sub_403A70:loc_4043E7↓o
.text:00403A35 aSOptionSIsAmbi db '%s: option `%s',27h,' is ambiguous',0Ah,0
.text:00403A35                                         ; DATA XREF: sub_403A70:loc_40440E↓o
.text:00403A53 ; const char VarName[]
.text:00403A53 VarName         db 'POSIXLY_CORRECT',0  ; DATA XREF: sub_403A70:loc_4045C0↓o
.text:00403A63                 align 10h
.text:00403A70
.text:00403A70 ; =============== S U B R O U T I N E =======================================
.text:00403A70
.text:00403A70
.text:00403A70 ; int __cdecl sub_403A70(int, int, char *Str, int, int, int, int, int)
.text:00403A70 sub_403A70      proc near               ; CODE XREF: sub_404600+5A↓p
.text:00403A70                                         ; .text:004046EA↓p ...
.text:00403A70
.text:00403A70 Str1            = dword ptr -5Ch
.text:00403A70 Str2            = dword ptr -58h
.text:00403A70 MaxCount        = dword ptr -54h
.text:00403A70 var_50          = dword ptr -50h
.text:00403A70 var_4C          = dword ptr -4Ch
.text:00403A70 var_3C          = dword ptr -3Ch
.text:00403A70 var_38          = dword ptr -38h
.text:00403A70 var_34          = dword ptr -34h
.text:00403A70 var_30          = dword ptr -30h
.text:00403A70 var_2C          = dword ptr -2Ch
.text:00403A70 var_28          = dword ptr -28h
.text:00403A70 var_24          = dword ptr -24h
.text:00403A70 var_20          = dword ptr -20h
.text:00403A70 var_1C          = dword ptr -1Ch
.text:00403A70 var_18          = dword ptr -18h
.text:00403A70 var_14          = dword ptr -14h
.text:00403A70 arg_0           = dword ptr  4
.text:00403A70 arg_4           = dword ptr  8
.text:00403A70 Str             = dword ptr  0Ch
.text:00403A70 arg_C           = dword ptr  10h
.text:00403A70 arg_10          = dword ptr  14h
.text:00403A70 arg_14          = dword ptr  18h
.text:00403A70 arg_18          = dword ptr  1Ch
.text:00403A70 arg_1C          = dword ptr  20h
.text:00403A70
.text:00403A70                 push    ebp
.text:00403A71                 mov     eax, 0FFFFFFFFh
.text:00403A76                 push    edi
.text:00403A77                 push    esi
.text:00403A78                 push    ebx
.text:00403A79                 sub     esp, 4Ch
.text:00403A7C                 mov     esi, [esp+5Ch+Str]
.text:00403A80                 mov     ebp, [esp+5Ch+arg_1C]
.text:00403A84                 cmp     byte ptr [esi], 3Ah ; ':'
.text:00403A87                 mov     ebx, [ebp+4]
.text:00403A8A                 setz    dl
.text:00403A8D                 movzx   ecx, dl
.text:00403A90                 dec     ecx
.text:00403A91                 and     ecx, ebx
.text:00403A93                 mov     [esp+5Ch+var_14], ecx
.text:00403A97                 mov     ecx, [esp+5Ch+arg_0]
.text:00403A9B                 test    ecx, ecx
.text:00403A9D                 jle     loc_403BC7
.text:00403AA3                 mov     dword ptr [ebp+0Ch], 0
.text:00403AAA                 mov     ebx, [ebp+0]
.text:00403AAD                 test    ebx, ebx
.text:00403AAF                 jz      loc_4045E0
.text:00403AB5                 mov     edi, [ebp+10h]
.text:00403AB8                 test    edi, edi
.text:00403ABA                 jnz     short loc_403B13
.text:00403ABC                 lea     esi, [esi+0]
.text:00403AC0
.text:00403AC0 loc_403AC0:                             ; CODE XREF: sub_403A70+B7C↓j
.text:00403AC0                 mov     [ebp+24h], ebx
.text:00403AC3                 mov     esi, [esp+5Ch+Str]
.text:00403AC7                 mov     [ebp+20h], ebx
.text:00403ACA                 mov     ecx, [esp+5Ch+arg_18]
.text:00403ACE                 xor     ebx, ebx
.text:00403AD0                 mov     dword ptr [ebp+14h], 0
.text:00403AD7                 test    ecx, ecx
.text:00403AD9                 jz      loc_4045C0
.text:00403ADF
.text:00403ADF loc_403ADF:                             ; CODE XREF: sub_403A70+B64↓j
.text:00403ADF                 mov     ebx, 1
.text:00403AE4
.text:00403AE4 loc_403AE4:                             ; CODE XREF: sub_403A70+B5E↓j
.text:00403AE4                 mov     [ebp+1Ch], ebx
.text:00403AE7                 mov     ecx, [esp+5Ch+Str]
.text:00403AEB                 movzx   eax, byte ptr [ecx]
.text:00403AEE                 cmp     al, 2Dh ; '-'
.text:00403AF0                 jz      loc_4045B0
.text:00403AF6                 cmp     al, 2Bh ; '+'
.text:00403AF8                 jz      loc_404599
.text:00403AFE                 xor     edx, edx
.text:00403B00                 test    ebx, ebx
.text:00403B02                 setz    dl
.text:00403B05                 mov     [ebp+18h], edx
.text:00403B08
.text:00403B08 loc_403B08:                             ; CODE XREF: sub_403A70+B35↓j
.text:00403B08                 mov     [esp+5Ch+Str], esi
.text:00403B0C                 mov     dword ptr [ebp+10h], 1
.text:00403B13
.text:00403B13 loc_403B13:                             ; CODE XREF: sub_403A70+4A↑j
.text:00403B13                 mov     eax, [ebp+14h]
.text:00403B16                 test    eax, eax
.text:00403B18                 jz      short loc_403B23
.text:00403B1A                 cmp     byte ptr [eax], 0
.text:00403B1D                 jnz     loc_403C00
.text:00403B23
.text:00403B23 loc_403B23:                             ; CODE XREF: sub_403A70+A8↑j
.text:00403B23                 mov     ebx, [ebp+0]
.text:00403B26                 cmp     [ebp+24h], ebx
.text:00403B29                 jle     short loc_403B2E
.text:00403B2B                 mov     [ebp+24h], ebx
.text:00403B2E
.text:00403B2E loc_403B2E:                             ; CODE XREF: sub_403A70+B9↑j
.text:00403B2E                 cmp     [ebp+20h], ebx
.text:00403B31                 jle     short loc_403B36
.text:00403B33                 mov     [ebp+20h], ebx
.text:00403B36
.text:00403B36 loc_403B36:                             ; CODE XREF: sub_403A70+C1↑j
.text:00403B36                 cmp     dword ptr [ebp+18h], 1
.text:00403B3A                 jz      loc_404510
.text:00403B40
.text:00403B40 loc_403B40:                             ; CODE XREF: sub_403A70+B13↓j
.text:00403B40                 cmp     ebx, [esp+5Ch+arg_0]
.text:00403B44                 jz      loc_4044F4
.text:00403B4A                 cld
.text:00403B4B                 mov     ecx, [esp+5Ch+arg_4]
.text:00403B4F                 mov     edx, 3
.text:00403B54                 mov     edi, offset dword_403820
.text:00403B59                 mov     esi, [ecx+ebx*4]
.text:00403B5C                 mov     ecx, edx
.text:00403B5E                 repe cmpsb
.text:00403B60                 jnz     short loc_403B9C
.text:00403B62                 mov     edx, [ebp+24h]
.text:00403B65                 lea     eax, [ebx+1]
.text:00403B68                 cmp     [ebp+20h], edx
.text:00403B6B                 mov     [ebp+0], eax
.text:00403B6E                 jz      loc_404508
.text:00403B74                 cmp     edx, eax
.text:00403B76                 jz      short loc_403B90
.text:00403B78                 mov     [esp+5Ch+Str2], ebp
.text:00403B7C                 mov     ebx, [esp+5Ch+arg_4]
.text:00403B80                 mov     [esp+5Ch+Str1], ebx
.text:00403B83                 call    sub_404720
.text:00403B88                 nop
.text:00403B89                 lea     esi, [esi+0]
.text:00403B90
.text:00403B90 loc_403B90:                             ; CODE XREF: sub_403A70+106↑j
.text:00403B90                                         ; sub_403A70+A9B↓j
.text:00403B90                 mov     eax, [esp+5Ch+arg_0]
.text:00403B94                 mov     ebx, eax
.text:00403B96                 mov     [ebp+24h], eax
.text:00403B99                 mov     [ebp+0], eax
.text:00403B9C
.text:00403B9C loc_403B9C:                             ; CODE XREF: sub_403A70+F0↑j
.text:00403B9C                 cmp     ebx, [esp+5Ch+arg_0]
.text:00403BA0                 jz      loc_4044F4
.text:00403BA6                 mov     esi, [esp+5Ch+arg_4]
.text:00403BAA                 mov     eax, [esi+ebx*4]
.text:00403BAD                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00403BB0                 jz      short loc_403BD7
.text:00403BB2
.text:00403BB2 loc_403BB2:                             ; CODE XREF: sub_403A70+16D↓j
.text:00403BB2                 mov     edx, [ebp+18h]
.text:00403BB5                 test    edx, edx
.text:00403BB7                 jz      short loc_403BD0
.text:00403BB9                 mov     [ebp+0Ch], eax
.text:00403BBC                 lea     edi, [ebx+1]
.text:00403BBF                 mov     eax, 1
.text:00403BC4                 mov     [ebp+0], edi
.text:00403BC7
.text:00403BC7 loc_403BC7:                             ; CODE XREF: sub_403A70+2D↑j
.text:00403BC7                                         ; sub_403A70+165↓j ...
.text:00403BC7                 add     esp, 4Ch
.text:00403BCA                 pop     ebx
.text:00403BCB                 pop     esi
.text:00403BCC                 pop     edi
.text:00403BCD                 pop     ebp
.text:00403BCE                 retn
.text:00403BCE ; ---------------------------------------------------------------------------
.text:00403BCF                 align 10h
.text:00403BD0
.text:00403BD0 loc_403BD0:                             ; CODE XREF: sub_403A70+147↑j
.text:00403BD0                                         ; sub_403A70+A8A↓j ...
.text:00403BD0                 mov     eax, 0FFFFFFFFh
.text:00403BD5                 jmp     short loc_403BC7
.text:00403BD7 ; ---------------------------------------------------------------------------
.text:00403BD7
.text:00403BD7 loc_403BD7:                             ; CODE XREF: sub_403A70+140↑j
.text:00403BD7                 movzx   edx, byte ptr [eax+1]
.text:00403BDB                 test    dl, dl
.text:00403BDD                 jz      short loc_403BB2
.text:00403BDF                 mov     ebx, [esp+5Ch+arg_C]
.text:00403BE3                 xor     ecx, ecx
.text:00403BE5                 test    ebx, ebx
.text:00403BE7                 jz      short loc_403BF2
.text:00403BE9                 cmp     dl, 2Dh ; '-'
.text:00403BEC                 jz      loc_4044EA
.text:00403BF2
.text:00403BF2 loc_403BF2:                             ; CODE XREF: sub_403A70+177↑j
.text:00403BF2                                         ; sub_403A70+A7F↓j
.text:00403BF2                 lea     esi, [ecx+eax+1]
.text:00403BF6                 mov     [ebp+14h], esi
.text:00403BF9                 lea     esi, [esi+0]
.text:00403C00
.text:00403C00 loc_403C00:                             ; CODE XREF: sub_403A70+AD↑j
.text:00403C00                 mov     ecx, [esp+5Ch+arg_C]
.text:00403C04                 test    ecx, ecx
.text:00403C06                 jz      loc_403F90
.text:00403C0C                 mov     edx, [ebp+0]
.text:00403C0F                 mov     edi, [esp+5Ch+arg_4]
.text:00403C13                 mov     eax, [edi+edx*4]
.text:00403C16                 movzx   edx, byte ptr [eax+1]
.text:00403C1A                 cmp     dl, 2Dh ; '-'
.text:00403C1D                 jz      short loc_403C35
.text:00403C1F                 mov     ebx, [esp+5Ch+arg_14]
.text:00403C23                 test    ebx, ebx
.text:00403C25                 jz      loc_403F90
.text:00403C2B                 cmp     byte ptr [eax+2], 0
.text:00403C2F                 jz      loc_4044CA
.text:00403C35
.text:00403C35 loc_403C35:                             ; CODE XREF: sub_403A70+1AD↑j
.text:00403C35                                         ; sub_403A70+A75↓j
.text:00403C35                 mov     [esp+5Ch+var_18], 0
.text:00403C3D                 mov     ecx, [ebp+14h]
.text:00403C40                 mov     [esp+5Ch+var_1C], 0
.text:00403C48                 mov     [esp+5Ch+var_20], 0
.text:00403C50                 mov     edi, ecx
.text:00403C52                 mov     [esp+5Ch+var_24], 0FFFFFFFFh
.text:00403C5A                 movzx   eax, byte ptr [ecx]
.text:00403C5D                 test    al, al
.text:00403C5F                 jz      short loc_403C7C
.text:00403C61                 cmp     al, 3Dh ; '='
.text:00403C63                 jz      short loc_403C7C
.text:00403C65                 lea     esi, [esi+0]
.text:00403C69                 lea     edi, [edi+0]
.text:00403C70
.text:00403C70 loc_403C70:                             ; CODE XREF: sub_403A70+20A↓j
.text:00403C70                 inc     edi
.text:00403C71                 movzx   eax, byte ptr [edi]
.text:00403C74                 test    al, al
.text:00403C76                 jz      short loc_403C7C
.text:00403C78                 cmp     al, 3Dh ; '='
.text:00403C7A                 jnz     short loc_403C70
.text:00403C7C
.text:00403C7C loc_403C7C:                             ; CODE XREF: sub_403A70+1EF↑j
.text:00403C7C                                         ; sub_403A70+1F3↑j ...
.text:00403C7C                 mov     [esp+5Ch+var_28], 0
.text:00403C84                 mov     esi, [esp+5Ch+arg_C]
.text:00403C88                 mov     ebx, [esi]
.text:00403C8A                 test    ebx, ebx
.text:00403C8C                 mov     edx, ebx
.text:00403C8E                 jz      loc_403EB0
.text:00403C94                 lea     esi, [esi+0]
.text:00403C9A                 lea     edi, [edi+0]
.text:00403CA0
.text:00403CA0 loc_403CA0:                             ; CODE XREF: sub_403A70+25E↓j
.text:00403CA0                 mov     [esp+5Ch+Str2], ecx ; Str2
.text:00403CA4                 mov     ebx, edi
.text:00403CA6                 sub     ebx, ecx
.text:00403CA8                 mov     [esp+5Ch+MaxCount], ebx ; MaxCount
.text:00403CAC                 mov     [esp+5Ch+Str1], edx ; Str1
.text:00403CAF                 call    strncmp
.text:00403CB4                 test    eax, eax
.text:00403CB6                 jz      loc_404446
.text:00403CBC
.text:00403CBC loc_403CBC:                             ; CODE XREF: sub_403A70+A0F↓j
.text:00403CBC                                         ; sub_403A70+A24↓j ...
.text:00403CBC                 inc     [esp+5Ch+var_28]
.text:00403CC0                 add     esi, 10h
.text:00403CC3                 mov     ecx, [esi]
.text:00403CC5                 test    ecx, ecx
.text:00403CC7                 mov     edx, ecx
.text:00403CC9                 jz      short loc_403CD0
.text:00403CCB                 mov     ecx, [ebp+14h]
.text:00403CCE                 jmp     short loc_403CA0
.text:00403CD0 ; ---------------------------------------------------------------------------
.text:00403CD0
.text:00403CD0 loc_403CD0:                             ; CODE XREF: sub_403A70+259↑j
.text:00403CD0                                         ; sub_403A70+A55↓j
.text:00403CD0                 mov     esi, [esp+5Ch+var_20]
.text:00403CD4                 test    esi, esi
.text:00403CD6                 jz      short loc_403CE4
.text:00403CD8                 mov     edx, [esp+5Ch+var_1C]
.text:00403CDC                 test    edx, edx
.text:00403CDE                 jz      loc_4043F0
.text:00403CE4
.text:00403CE4 loc_403CE4:                             ; CODE XREF: sub_403A70+266↑j
.text:00403CE4                 mov     eax, [esp+5Ch+var_18]
.text:00403CE8                 test    eax, eax
.text:00403CEA                 jz      loc_403EB0
.text:00403CF0                 mov     ecx, [ebp+0]
.text:00403CF3                 lea     eax, [ecx+1]
.text:00403CF6                 mov     [ebp+0], eax
.text:00403CF9                 cmp     byte ptr [edi], 0
.text:00403CFC                 jz      loc_403E10
.text:00403D02                 mov     ecx, [esp+5Ch+var_18]
.text:00403D06                 mov     esi, [ecx+4]
.text:00403D09                 test    esi, esi
.text:00403D0B                 jz      short loc_403D56
.text:00403D0D                 lea     ebx, [edi+1]
.text:00403D10                 mov     [ebp+0Ch], ebx
.text:00403D13
.text:00403D13 loc_403D13:                             ; CODE XREF: sub_403A70+3A8↓j
.text:00403D13                                         ; sub_403A70+3C4↓j
.text:00403D13                 mov     ebx, [ebp+14h]
.text:00403D16                 mov     [esp+5Ch+Str1], ebx ; Str
.text:00403D19                 call    strlen
.text:00403D1E                 add     [ebp+14h], eax
.text:00403D21                 mov     esi, [esp+5Ch+arg_10]
.text:00403D25                 test    esi, esi
.text:00403D27                 jz      short loc_403D33
.text:00403D29                 mov     ebp, [esp+5Ch+var_24]
.text:00403D2D                 mov     ecx, [esp+5Ch+arg_10]
.text:00403D31                 mov     [ecx], ebp
.text:00403D33
.text:00403D33 loc_403D33:                             ; CODE XREF: sub_403A70+2B7↑j
.text:00403D33                 mov     eax, [esp+5Ch+var_18]
.text:00403D37                 mov     ecx, [eax+8]
.text:00403D3A                 test    ecx, ecx
.text:00403D3C                 jnz     short loc_403D4A
.text:00403D3E                 mov     ecx, [esp+5Ch+var_18]
.text:00403D42
.text:00403D42 loc_403D42:                             ; CODE XREF: sub_403A70+723↓j
.text:00403D42                 mov     eax, [ecx+0Ch]
.text:00403D45                 jmp     loc_403BC7
.text:00403D4A ; ---------------------------------------------------------------------------
.text:00403D4A
.text:00403D4A loc_403D4A:                             ; CODE XREF: sub_403A70+2CC↑j
.text:00403D4A                                         ; sub_403A70+719↓j
.text:00403D4A                 mov     esi, [eax+0Ch]
.text:00403D4D                 xor     eax, eax
.text:00403D4F                 mov     [ecx], esi
.text:00403D51                 jmp     loc_403BC7
.text:00403D56 ; ---------------------------------------------------------------------------
.text:00403D56
.text:00403D56 loc_403D56:                             ; CODE XREF: sub_403A70+29B↑j
.text:00403D56                 mov     edi, [esp+5Ch+var_14]
.text:00403D5A                 test    edi, edi
.text:00403D5C                 jz      short loc_403DB0
.text:00403D5E                 mov     esi, [esp+5Ch+arg_4]
.text:00403D62                 mov     edx, [esi+eax*4-4]
.text:00403D66                 cmp     byte ptr [edx+1], 2Dh ; '-'
.text:00403D6A                 jz      short loc_403DD2
.text:00403D6C                 mov     [esp+5Ch+Str1], offset aSOptionCSDoesn ; "%s: option `%c%s' doesn't allow an argu"...
.text:00403D73                 call    ds:libintl_gettext
.text:00403D79                 mov     edx, [esp+5Ch+var_18]
.text:00403D7D                 mov     edi, [edx]
.text:00403D7F                 mov     [esp+5Ch+var_4C], edi
.text:00403D83                 mov     ebx, [ebp+0]
.text:00403D86                 mov     edi, [esp+5Ch+arg_4]
.text:00403D8A                 mov     ecx, [edi+ebx*4-4]
.text:00403D8E                 movsx   esi, byte ptr [ecx]
.text:00403D91                 mov     ecx, ds:_iob
.text:00403D97                 add     ecx, 40h ; '@'
.text:00403D9A                 mov     [esp+5Ch+var_50], esi
.text:00403D9E                 mov     ebx, [edi]
.text:00403DA0                 mov     [esp+5Ch+Str2], eax ; Format
.text:00403DA4                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00403DA7                 mov     [esp+5Ch+MaxCount], ebx
.text:00403DAB                 call    fprintf
.text:00403DB0
.text:00403DB0 loc_403DB0:                             ; CODE XREF: sub_403A70+2EC↑j
.text:00403DB0                                         ; sub_403A70+398↓j
.text:00403DB0                 mov     ecx, [ebp+14h]
.text:00403DB3                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00403DB6                 call    strlen
.text:00403DBB                 add     [ebp+14h], eax
.text:00403DBE                 mov     eax, [esp+5Ch+var_18]
.text:00403DC2                 mov     esi, [eax+0Ch]
.text:00403DC5                 mov     [ebp+8], esi
.text:00403DC8
.text:00403DC8 loc_403DC8:                             ; CODE XREF: sub_403A70+4E5↓j
.text:00403DC8                                         ; sub_403A70+73E↓j ...
.text:00403DC8                 mov     eax, 3Fh ; '?'
.text:00403DCD                 jmp     loc_403BC7
.text:00403DD2 ; ---------------------------------------------------------------------------
.text:00403DD2
.text:00403DD2 loc_403DD2:                             ; CODE XREF: sub_403A70+2FA↑j
.text:00403DD2                 mov     [esp+5Ch+Str1], offset aSOptionSDoesnT ; "%s: option `--%s' doesn't allow an argu"...
.text:00403DD9                 call    ds:libintl_gettext
.text:00403DDF                 mov     edx, [esp+5Ch+var_18]
.text:00403DE3                 mov     edi, [esp+5Ch+arg_4]
.text:00403DE7                 mov     ecx, ds:_iob
.text:00403DED                 mov     esi, [edx]
.text:00403DEF                 add     ecx, 40h ; '@'
.text:00403DF2                 mov     [esp+5Ch+var_50], esi
.text:00403DF6                 mov     ebx, [edi]
.text:00403DF8                 mov     [esp+5Ch+Str2], eax ; Format
.text:00403DFC                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00403DFF                 mov     [esp+5Ch+MaxCount], ebx
.text:00403E03                 call    fprintf
.text:00403E08                 jmp     short loc_403DB0
.text:00403E08 ; ---------------------------------------------------------------------------
.text:00403E0A                 align 10h
.text:00403E10
.text:00403E10 loc_403E10:                             ; CODE XREF: sub_403A70+28C↑j
.text:00403E10                 mov     ebx, [esp+5Ch+var_18]
.text:00403E14                 cmp     dword ptr [ebx+4], 1
.text:00403E18                 jnz     loc_403D13
.text:00403E1E                 cmp     eax, [esp+5Ch+arg_0]
.text:00403E22                 jge     short loc_403E39
.text:00403E24                 mov     ebx, [esp+5Ch+arg_4]
.text:00403E28                 lea     edi, [ecx+2]
.text:00403E2B                 mov     [ebp+0], edi
.text:00403E2E                 mov     esi, [ebx+eax*4]
.text:00403E31                 mov     [ebp+0Ch], esi
.text:00403E34                 jmp     loc_403D13
.text:00403E39 ; ---------------------------------------------------------------------------
.text:00403E39
.text:00403E39 loc_403E39:                             ; CODE XREF: sub_403A70+3B2↑j
.text:00403E39                 mov     edx, [esp+5Ch+var_14]
.text:00403E3D                 test    edx, edx
.text:00403E3F                 jnz     short loc_403E70
.text:00403E41
.text:00403E41 loc_403E41:                             ; CODE XREF: sub_403A70+437↓j
.text:00403E41                 mov     edx, [ebp+14h]
.text:00403E44                 mov     [esp+5Ch+Str1], edx ; Str
.text:00403E47                 call    strlen
.text:00403E4C                 add     [ebp+14h], eax
.text:00403E4F                 mov     eax, [esp+5Ch+var_18]
.text:00403E53                 mov     edi, [eax+0Ch]
.text:00403E56                 mov     [ebp+8], edi
.text:00403E59
.text:00403E59 loc_403E59:                             ; CODE XREF: sub_403A70+7C2↓j
.text:00403E59                 mov     ebp, [esp+5Ch+Str]
.text:00403E5D                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:00403E61                 setnz   bl
.text:00403E64                 movzx   esi, bl
.text:00403E67                 lea     eax, [esi+esi*4+3Ah]
.text:00403E6B                 jmp     loc_403BC7
.text:00403E70 ; ---------------------------------------------------------------------------
.text:00403E70
.text:00403E70 loc_403E70:                             ; CODE XREF: sub_403A70+3CF↑j
.text:00403E70                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:00403E77                 call    ds:libintl_gettext
.text:00403E7D                 mov     ecx, [ebp+0]
.text:00403E80                 mov     esi, [esp+5Ch+arg_4]
.text:00403E84                 mov     ebx, [esi+ecx*4-4]
.text:00403E88                 mov     ecx, ds:_iob
.text:00403E8E                 mov     [esp+5Ch+var_50], ebx
.text:00403E92                 mov     edi, [esi]
.text:00403E94                 add     ecx, 40h ; '@'
.text:00403E97                 mov     [esp+5Ch+Str2], eax ; Format
.text:00403E9B                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00403E9E                 mov     [esp+5Ch+MaxCount], edi
.text:00403EA2                 call    fprintf
.text:00403EA7                 jmp     short loc_403E41
.text:00403EA7 ; ---------------------------------------------------------------------------
.text:00403EA9                 align 10h
.text:00403EB0
.text:00403EB0 loc_403EB0:                             ; CODE XREF: sub_403A70+21E↑j
.text:00403EB0                                         ; sub_403A70+27A↑j
.text:00403EB0                 mov     eax, [esp+5Ch+arg_14]
.text:00403EB4                 test    eax, eax
.text:00403EB6                 jz      short loc_403EE6
.text:00403EB8                 mov     ebx, [ebp+0]
.text:00403EBB                 mov     esi, [esp+5Ch+arg_4]
.text:00403EBF                 mov     edi, [esi+ebx*4]
.text:00403EC2                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:00403EC6                 jz      short loc_403EE9
.text:00403EC8                 mov     ecx, [ebp+14h]
.text:00403ECB                 mov     edx, [esp+5Ch+Str]
.text:00403ECF                 movsx   ebx, byte ptr [ecx]
.text:00403ED2                 mov     [esp+5Ch+Str1], edx ; Str
.text:00403ED5                 mov     [esp+5Ch+Str2], ebx ; Val
.text:00403ED9                 call    strchr
.text:00403EDE                 test    eax, eax
.text:00403EE0                 jnz     loc_403F90
.text:00403EE6
.text:00403EE6 loc_403EE6:                             ; CODE XREF: sub_403A70+446↑j
.text:00403EE6                 mov     ebx, [ebp+0]
.text:00403EE9
.text:00403EE9 loc_403EE9:                             ; CODE XREF: sub_403A70+456↑j
.text:00403EE9                 mov     eax, [esp+5Ch+var_14]
.text:00403EED                 test    eax, eax
.text:00403EEF                 jz      short loc_403F41
.text:00403EF1                 mov     esi, [esp+5Ch+arg_4]
.text:00403EF5                 mov     edi, [esi+ebx*4]
.text:00403EF8                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:00403EFC                 jz      short loc_403F5A
.text:00403EFE                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO ; "%s: unrecognized option `%c%s'\n"
.text:00403F05                 call    ds:libintl_gettext
.text:00403F0B                 mov     edi, [ebp+14h]
.text:00403F0E                 mov     [esp+5Ch+var_4C], edi
.text:00403F12                 mov     ebx, [ebp+0]
.text:00403F15                 mov     edi, [esp+5Ch+arg_4]
.text:00403F19                 mov     esi, [edi+ebx*4]
.text:00403F1C                 movsx   ecx, byte ptr [esi]
.text:00403F1F                 mov     esi, ds:_iob
.text:00403F25                 add     esi, 40h ; '@'
.text:00403F28                 mov     [esp+5Ch+var_50], ecx
.text:00403F2C                 mov     ebx, [edi]
.text:00403F2E                 mov     [esp+5Ch+Str2], eax ; Format
.text:00403F32                 mov     [esp+5Ch+Str1], esi ; Stream
.text:00403F35                 mov     [esp+5Ch+MaxCount], ebx
.text:00403F39                 call    fprintf
.text:00403F3E
.text:00403F3E loc_403F3E:                             ; CODE XREF: sub_403A70+51D↓j
.text:00403F3E                 mov     ebx, [ebp+0]
.text:00403F41
.text:00403F41 loc_403F41:                             ; CODE XREF: sub_403A70+47F↑j
.text:00403F41                 mov     dword ptr [ebp+14h], offset dword_403920
.text:00403F48                 lea     edx, [ebx+1]
.text:00403F4B                 mov     [ebp+0], edx
.text:00403F4E
.text:00403F4E loc_403F4E:                             ; CODE XREF: sub_403A70+999↓j
.text:00403F4E                 mov     dword ptr [ebp+8], 0
.text:00403F55                 jmp     loc_403DC8
.text:00403F5A ; ---------------------------------------------------------------------------
.text:00403F5A
.text:00403F5A loc_403F5A:                             ; CODE XREF: sub_403A70+48C↑j
.text:00403F5A                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO_0 ; "%s: unrecognized option `--%s'\n"
.text:00403F61                 call    ds:libintl_gettext
.text:00403F67                 mov     ecx, [ebp+14h]
.text:00403F6A                 mov     edi, [esp+5Ch+arg_4]
.text:00403F6E                 mov     edx, ds:_iob
.text:00403F74                 mov     [esp+5Ch+var_50], ecx
.text:00403F78                 mov     ebx, [edi]
.text:00403F7A                 add     edx, 40h ; '@'
.text:00403F7D                 mov     [esp+5Ch+Str2], eax ; Format
.text:00403F81                 mov     [esp+5Ch+MaxCount], ebx
.text:00403F85                 mov     [esp+5Ch+Str1], edx ; Stream
.text:00403F88                 call    fprintf
.text:00403F8D                 jmp     short loc_403F3E
.text:00403F8D ; ---------------------------------------------------------------------------
.text:00403F8F                 align 10h
.text:00403F90
.text:00403F90 loc_403F90:                             ; CODE XREF: sub_403A70+196↑j
.text:00403F90                                         ; sub_403A70+1B5↑j ...
.text:00403F90                 mov     esi, [ebp+14h]
.text:00403F93                 movzx   ebx, byte ptr [esi]
.text:00403F96                 inc     esi
.text:00403F97                 mov     [ebp+14h], esi
.text:00403F9A                 mov     ecx, [esp+5Ch+Str]
.text:00403F9E                 movsx   esi, bl
.text:00403FA1                 mov     [esp+5Ch+Str2], esi ; Val
.text:00403FA5                 mov     edi, esi
.text:00403FA7                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00403FAA                 call    strchr
.text:00403FAF                 mov     ecx, [ebp+14h]
.text:00403FB2                 cmp     byte ptr [ecx], 0
.text:00403FB5                 jnz     short loc_403FBA
.text:00403FB7                 inc     dword ptr [ebp+0]
.text:00403FBA
.text:00403FBA loc_403FBA:                             ; CODE XREF: sub_403A70+545↑j
.text:00403FBA                 test    eax, eax
.text:00403FBC                 jz      loc_4043A0
.text:00403FC2                 cmp     bl, 3Ah ; ':'
.text:00403FC5                 jz      loc_4043A0
.text:00403FCB                 cmp     byte ptr [eax], 57h ; 'W'
.text:00403FCE                 jz      loc_404086
.text:00403FD4                 movzx   edx, byte ptr [eax+1]
.text:00403FD8
.text:00403FD8 loc_403FD8:                             ; CODE XREF: sub_403A70+61D↓j
.text:00403FD8                 cmp     dl, 3Ah ; ':'
.text:00403FDB                 jz      short loc_403FE4
.text:00403FDD
.text:00403FDD loc_403FDD:                             ; CODE XREF: sub_403A70+590↓j
.text:00403FDD                 mov     eax, esi
.text:00403FDF                 jmp     loc_403BC7
.text:00403FE4 ; ---------------------------------------------------------------------------
.text:00403FE4
.text:00403FE4 loc_403FE4:                             ; CODE XREF: sub_403A70+56B↑j
.text:00403FE4                 cmp     byte ptr [eax+2], 3Ah ; ':'
.text:00403FE8                 jz      loc_404071
.text:00403FEE                 cmp     byte ptr [ecx], 0
.text:00403FF1                 jz      short loc_404002
.text:00403FF3
.text:00403FF3 loc_403FF3:                             ; CODE XREF: sub_403A70+604↓j
.text:00403FF3                 inc     dword ptr [ebp+0]
.text:00403FF6                 mov     [ebp+0Ch], ecx
.text:00403FF9
.text:00403FF9 loc_403FF9:                             ; CODE XREF: sub_403A70+5AB↓j
.text:00403FF9                                         ; sub_403A70+5C6↓j ...
.text:00403FF9                 mov     dword ptr [ebp+14h], 0
.text:00404000                 jmp     short loc_403FDD
.text:00404002 ; ---------------------------------------------------------------------------
.text:00404002
.text:00404002 loc_404002:                             ; CODE XREF: sub_403A70+581↑j
.text:00404002                 mov     ecx, [ebp+0]
.text:00404005                 cmp     ecx, [esp+5Ch+arg_0]
.text:00404009                 jz      short loc_40401D
.text:0040400B                 mov     eax, [esp+5Ch+arg_4]
.text:0040400F                 lea     edx, [ecx+1]
.text:00404012                 mov     [ebp+0], edx
.text:00404015                 mov     ebx, [eax+ecx*4]
.text:00404018                 mov     [ebp+0Ch], ebx
.text:0040401B                 jmp     short loc_403FF9
.text:0040401D ; ---------------------------------------------------------------------------
.text:0040401D
.text:0040401D loc_40401D:                             ; CODE XREF: sub_403A70+599↑j
.text:0040401D                 mov     ecx, [esp+5Ch+var_14]
.text:00404021                 test    ecx, ecx
.text:00404023                 jnz     short loc_40403F
.text:00404025
.text:00404025 loc_404025:                             ; CODE XREF: sub_403A70+5FF↓j
.text:00404025                 mov     [ebp+8], edi
.text:00404028                 mov     edi, [esp+5Ch+Str]
.text:0040402C                 cmp     byte ptr [edi], 3Ah ; ':'
.text:0040402F                 jz      short loc_404038
.text:00404031                 mov     esi, 3Fh ; '?'
.text:00404036                 jmp     short loc_403FF9
.text:00404038 ; ---------------------------------------------------------------------------
.text:00404038
.text:00404038 loc_404038:                             ; CODE XREF: sub_403A70+5BF↑j
.text:00404038                 mov     esi, 3Ah ; ':'
.text:0040403D                 jmp     short loc_403FF9
.text:0040403F ; ---------------------------------------------------------------------------
.text:0040403F
.text:0040403F loc_40403F:                             ; CODE XREF: sub_403A70+5B3↑j
.text:0040403F                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:00404046                 call    ds:libintl_gettext
.text:0040404C                 mov     [esp+5Ch+var_50], edi
.text:00404050                 mov     ebx, [esp+5Ch+arg_4]
.text:00404054                 mov     edx, ds:_iob
.text:0040405A                 mov     esi, [ebx]
.text:0040405C                 add     edx, 40h ; '@'
.text:0040405F                 mov     [esp+5Ch+Str2], eax ; Format
.text:00404063                 mov     [esp+5Ch+MaxCount], esi
.text:00404067                 mov     [esp+5Ch+Str1], edx ; Stream
.text:0040406A                 call    fprintf
.text:0040406F                 jmp     short loc_404025
.text:00404071 ; ---------------------------------------------------------------------------
.text:00404071
.text:00404071 loc_404071:                             ; CODE XREF: sub_403A70+578↑j
.text:00404071                 cmp     byte ptr [ecx], 0
.text:00404074                 jnz     loc_403FF3
.text:0040407A                 mov     dword ptr [ebp+0Ch], 0
.text:00404081                 jmp     loc_403FF9
.text:00404086 ; ---------------------------------------------------------------------------
.text:00404086
.text:00404086 loc_404086:                             ; CODE XREF: sub_403A70+55E↑j
.text:00404086                 movzx   edx, byte ptr [eax+1]
.text:0040408A                 cmp     dl, 3Bh ; ';'
.text:0040408D                 jnz     loc_403FD8
.text:00404093                 mov     [esp+5Ch+var_2C], 0
.text:0040409B                 mov     [esp+5Ch+var_30], 0
.text:004040A3                 mov     [esp+5Ch+var_34], 0
.text:004040AB                 mov     [esp+5Ch+var_38], 0
.text:004040B3                 cmp     byte ptr [ecx], 0
.text:004040B6                 jz      loc_40432B
.text:004040BC                 inc     dword ptr [ebp+0]
.text:004040BF                 mov     [ebp+0Ch], ecx
.text:004040C2
.text:004040C2 loc_4040C2:                             ; CODE XREF: sub_403A70+8D4↓j
.text:004040C2                 mov     edi, [ebp+0Ch]
.text:004040C5                 mov     [ebp+14h], edi
.text:004040C8                 movzx   eax, byte ptr [edi]
.text:004040CB                 test    al, al
.text:004040CD                 jz      short loc_4040DF
.text:004040CF                 cmp     al, 3Dh ; '='
.text:004040D1                 jz      short loc_4040DF
.text:004040D3
.text:004040D3 loc_4040D3:                             ; CODE XREF: sub_403A70+66D↓j
.text:004040D3                 inc     edi
.text:004040D4                 movzx   eax, byte ptr [edi]
.text:004040D7                 test    al, al
.text:004040D9                 jz      short loc_4040DF
.text:004040DB                 cmp     al, 3Dh ; '='
.text:004040DD                 jnz     short loc_4040D3
.text:004040DF
.text:004040DF loc_4040DF:                             ; CODE XREF: sub_403A70+65D↑j
.text:004040DF                                         ; sub_403A70+661↑j ...
.text:004040DF                 mov     [esp+5Ch+var_3C], 0
.text:004040E7                 mov     esi, [esp+5Ch+arg_C]
.text:004040EB                 mov     eax, [esi]
.text:004040ED                 test    eax, eax
.text:004040EF                 jz      loc_404270
.text:004040F5                 mov     ecx, eax
.text:004040F7
.text:004040F7 loc_4040F7:                             ; CODE XREF: sub_403A70+6B3↓j
.text:004040F7                 mov     ebx, [ebp+14h]
.text:004040FA                 mov     eax, edi
.text:004040FC                 mov     [esp+5Ch+Str1], ecx ; Str1
.text:004040FF                 sub     eax, ebx
.text:00404101                 mov     [esp+5Ch+MaxCount], eax ; MaxCount
.text:00404105                 mov     [esp+5Ch+Str2], ebx ; Str2
.text:00404109                 call    strncmp
.text:0040410E                 test    eax, eax
.text:00404110                 jz      loc_4042D7
.text:00404116
.text:00404116 loc_404116:                             ; CODE XREF: sub_403A70+88C↓j
.text:00404116                                         ; sub_403A70+89D↓j
.text:00404116                 inc     [esp+5Ch+var_3C]
.text:0040411A                 add     esi, 10h
.text:0040411D                 mov     edx, [esi]
.text:0040411F                 test    edx, edx
.text:00404121                 mov     ecx, edx
.text:00404123                 jnz     short loc_4040F7
.text:00404125
.text:00404125 loc_404125:                             ; CODE XREF: sub_403A70+8B6↓j
.text:00404125                 mov     esi, [esp+5Ch+var_34]
.text:00404129                 test    esi, esi
.text:0040412B                 jz      short loc_404139
.text:0040412D                 mov     ebx, [esp+5Ch+var_30]
.text:00404131                 test    ebx, ebx
.text:00404133                 jz      loc_404281
.text:00404139
.text:00404139 loc_404139:                             ; CODE XREF: sub_403A70+6BB↑j
.text:00404139                 mov     esi, [esp+5Ch+var_2C]
.text:0040413D                 test    esi, esi
.text:0040413F                 jz      loc_404270
.text:00404145                 cmp     byte ptr [edi], 0
.text:00404148                 jz      loc_4041F0
.text:0040414E                 mov     ecx, [esp+5Ch+var_2C]
.text:00404152                 mov     ebx, [ecx+4]
.text:00404155                 test    ebx, ebx
.text:00404157                 jz      short loc_404198
.text:00404159                 lea     edx, [edi+1]
.text:0040415C                 mov     [ebp+0Ch], edx
.text:0040415F
.text:0040415F loc_40415F:                             ; CODE XREF: sub_403A70+788↓j
.text:0040415F                                         ; sub_403A70+7A7↓j
.text:0040415F                 mov     edi, [ebp+14h]
.text:00404162                 mov     [esp+5Ch+Str1], edi ; Str
.text:00404165                 call    strlen
.text:0040416A                 add     [ebp+14h], eax
.text:0040416D                 mov     eax, [esp+5Ch+arg_10]
.text:00404171                 test    eax, eax
.text:00404173                 jz      short loc_404180
.text:00404175                 mov     edx, [esp+5Ch+var_38]
.text:00404179                 mov     ebp, [esp+5Ch+arg_10]
.text:0040417D                 mov     [ebp+0], edx
.text:00404180
.text:00404180 loc_404180:                             ; CODE XREF: sub_403A70+703↑j
.text:00404180                 mov     eax, [esp+5Ch+var_2C]
.text:00404184                 mov     ecx, [eax+8]
.text:00404187                 test    ecx, ecx
.text:00404189                 jnz     loc_403D4A
.text:0040418F                 mov     ecx, [esp+5Ch+var_2C]
.text:00404193                 jmp     loc_403D42
.text:00404198 ; ---------------------------------------------------------------------------
.text:00404198
.text:00404198 loc_404198:                             ; CODE XREF: sub_403A70+6E7↑j
.text:00404198                 mov     eax, [esp+5Ch+var_14]
.text:0040419C                 test    eax, eax
.text:0040419E                 jnz     short loc_4041B3
.text:004041A0
.text:004041A0 loc_4041A0:                             ; CODE XREF: sub_403A70+779↓j
.text:004041A0                 mov     ecx, [ebp+14h]
.text:004041A3                 mov     [esp+5Ch+Str1], ecx ; Str
.text:004041A6                 call    strlen
.text:004041AB                 add     [ebp+14h], eax
.text:004041AE                 jmp     loc_403DC8
.text:004041B3 ; ---------------------------------------------------------------------------
.text:004041B3
.text:004041B3 loc_4041B3:                             ; CODE XREF: sub_403A70+72E↑j
.text:004041B3                 mov     [esp+5Ch+Str1], offset aSOptionWSDoesn ; "%s: option `-W %s' doesn't allow an arg"...
.text:004041BA                 call    ds:libintl_gettext
.text:004041C0                 mov     edx, [esp+5Ch+var_2C]
.text:004041C4                 mov     ebx, [esp+5Ch+arg_4]
.text:004041C8                 mov     edi, [edx]
.text:004041CA                 mov     [esp+5Ch+var_50], edi
.text:004041CE                 mov     edi, ds:_iob
.text:004041D4                 mov     esi, [ebx]
.text:004041D6                 mov     [esp+5Ch+Str2], eax ; Format
.text:004041DA                 add     edi, 40h ; '@'
.text:004041DD                 mov     [esp+5Ch+MaxCount], esi
.text:004041E1                 mov     [esp+5Ch+Str1], edi ; Stream
.text:004041E4                 call    fprintf
.text:004041E9                 jmp     short loc_4041A0
.text:004041E9 ; ---------------------------------------------------------------------------
.text:004041EB                 align 10h
.text:004041F0
.text:004041F0 loc_4041F0:                             ; CODE XREF: sub_403A70+6D8↑j
.text:004041F0                 mov     esi, [esp+5Ch+var_2C]
.text:004041F4                 cmp     dword ptr [esi+4], 1
.text:004041F8                 jnz     loc_40415F
.text:004041FE                 mov     ecx, [ebp+0]
.text:00404201                 cmp     ecx, [esp+5Ch+arg_0]
.text:00404205                 jge     short loc_40421C
.text:00404207                 mov     eax, [esp+5Ch+arg_4]
.text:0040420B                 lea     ebx, [ecx+1]
.text:0040420E                 mov     [ebp+0], ebx
.text:00404211                 mov     edi, [eax+ecx*4]
.text:00404214                 mov     [ebp+0Ch], edi
.text:00404217                 jmp     loc_40415F
.text:0040421C ; ---------------------------------------------------------------------------
.text:0040421C
.text:0040421C loc_40421C:                             ; CODE XREF: sub_403A70+795↑j
.text:0040421C                 mov     edx, [esp+5Ch+var_14]
.text:00404220                 test    edx, edx
.text:00404222                 jnz     short loc_404237
.text:00404224
.text:00404224 loc_404224:                             ; CODE XREF: sub_403A70+7FE↓j
.text:00404224                 mov     edx, [ebp+14h]
.text:00404227                 mov     [esp+5Ch+Str1], edx ; Str
.text:0040422A                 call    strlen
.text:0040422F                 add     [ebp+14h], eax
.text:00404232                 jmp     loc_403E59
.text:00404237 ; ---------------------------------------------------------------------------
.text:00404237
.text:00404237 loc_404237:                             ; CODE XREF: sub_403A70+7B2↑j
.text:00404237                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:0040423E                 call    ds:libintl_gettext
.text:00404244                 mov     ecx, [ebp+0]
.text:00404247                 mov     ebx, [esp+5Ch+arg_4]
.text:0040424B                 mov     edi, [ebx+ecx*4-4]
.text:0040424F                 mov     ecx, ds:_iob
.text:00404255                 mov     [esp+5Ch+var_50], edi
.text:00404259                 mov     esi, [ebx]
.text:0040425B                 add     ecx, 40h ; '@'
.text:0040425E                 mov     [esp+5Ch+Str2], eax ; Format
.text:00404262                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00404265                 mov     [esp+5Ch+MaxCount], esi
.text:00404269                 call    fprintf
.text:0040426E                 jmp     short loc_404224
.text:00404270 ; ---------------------------------------------------------------------------
.text:00404270
.text:00404270 loc_404270:                             ; CODE XREF: sub_403A70+67F↑j
.text:00404270                                         ; sub_403A70+6CF↑j
.text:00404270                 mov     dword ptr [ebp+14h], 0
.text:00404277                 mov     eax, 57h ; 'W'
.text:0040427C                 jmp     loc_403BC7
.text:00404281 ; ---------------------------------------------------------------------------
.text:00404281
.text:00404281 loc_404281:                             ; CODE XREF: sub_403A70+6C3↑j
.text:00404281                 mov     edi, [esp+5Ch+var_14]
.text:00404285                 test    edi, edi
.text:00404287                 jnz     short loc_40429F
.text:00404289
.text:00404289 loc_404289:                             ; CODE XREF: sub_403A70+865↓j
.text:00404289                 mov     edx, [ebp+14h]
.text:0040428C                 mov     [esp+5Ch+Str1], edx ; Str
.text:0040428F                 call    strlen
.text:00404294                 add     [ebp+14h], eax
.text:00404297                 inc     dword ptr [ebp+0]
.text:0040429A                 jmp     loc_403DC8
.text:0040429F ; ---------------------------------------------------------------------------
.text:0040429F
.text:0040429F loc_40429F:                             ; CODE XREF: sub_403A70+817↑j
.text:0040429F                 mov     [esp+5Ch+Str1], offset aSOptionWSIsAmb ; "%s: option `-W %s' is ambiguous\n"
.text:004042A6                 call    ds:libintl_gettext
.text:004042AC                 mov     ecx, [ebp+0]
.text:004042AF                 mov     ebx, [esp+5Ch+arg_4]
.text:004042B3                 mov     edi, [ebx+ecx*4]
.text:004042B6                 mov     ecx, ds:_iob
.text:004042BC                 mov     [esp+5Ch+var_50], edi
.text:004042C0                 mov     esi, [ebx]
.text:004042C2                 add     ecx, 40h ; '@'
.text:004042C5                 mov     [esp+5Ch+Str2], eax ; Format
.text:004042C9                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:004042CC                 mov     [esp+5Ch+MaxCount], esi
.text:004042D0                 call    fprintf
.text:004042D5                 jmp     short loc_404289
.text:004042D7 ; ---------------------------------------------------------------------------
.text:004042D7
.text:004042D7 loc_4042D7:                             ; CODE XREF: sub_403A70+6A0↑j
.text:004042D7                 mov     edx, [ebp+14h]
.text:004042DA                 mov     ebx, edi
.text:004042DC                 mov     ecx, [esi]
.text:004042DE                 sub     ebx, edx
.text:004042E0                 mov     [esp+5Ch+Str1], ecx ; Str
.text:004042E3                 call    strlen
.text:004042E8                 cmp     ebx, eax
.text:004042EA                 jz      short loc_404312
.text:004042EC                 mov     ebx, [esp+5Ch+var_2C]
.text:004042F0                 test    ebx, ebx
.text:004042F2                 jz      short loc_404301
.text:004042F4                 mov     [esp+5Ch+var_34], 1
.text:004042FC                 jmp     loc_404116
.text:00404301 ; ---------------------------------------------------------------------------
.text:00404301
.text:00404301 loc_404301:                             ; CODE XREF: sub_403A70+882↑j
.text:00404301                 mov     [esp+5Ch+var_2C], esi
.text:00404305                 mov     ecx, [esp+5Ch+var_3C]
.text:00404309                 mov     [esp+5Ch+var_38], ecx
.text:0040430D                 jmp     loc_404116
.text:00404312 ; ---------------------------------------------------------------------------
.text:00404312
.text:00404312 loc_404312:                             ; CODE XREF: sub_403A70+87A↑j
.text:00404312                 mov     [esp+5Ch+var_2C], esi
.text:00404316                 mov     eax, [esp+5Ch+var_3C]
.text:0040431A                 mov     [esp+5Ch+var_30], 1
.text:00404322                 mov     [esp+5Ch+var_38], eax
.text:00404326                 jmp     loc_404125
.text:0040432B ; ---------------------------------------------------------------------------
.text:0040432B
.text:0040432B loc_40432B:                             ; CODE XREF: sub_403A70+646↑j
.text:0040432B                 mov     edx, [ebp+0]
.text:0040432E                 cmp     edx, [esp+5Ch+arg_0]
.text:00404332                 jz      short loc_404349
.text:00404334                 mov     ebx, [esp+5Ch+arg_4]
.text:00404338                 lea     esi, [edx+1]
.text:0040433B                 mov     [ebp+0], esi
.text:0040433E                 mov     edi, [ebx+edx*4]
.text:00404341                 mov     [ebp+0Ch], edi
.text:00404344                 jmp     loc_4040C2
.text:00404349 ; ---------------------------------------------------------------------------
.text:00404349
.text:00404349 loc_404349:                             ; CODE XREF: sub_403A70+8C2↑j
.text:00404349                 mov     edi, [esp+5Ch+var_14]
.text:0040434D                 test    edi, edi
.text:0040434F                 jnz     short loc_40436C
.text:00404351
.text:00404351 loc_404351:                             ; CODE XREF: sub_403A70+92C↓j
.text:00404351                 mov     [ebp+8], esi
.text:00404354                 mov     ebp, [esp+5Ch+Str]
.text:00404358                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:0040435C                 jz      short loc_404368
.text:0040435E                 mov     bl, 3Fh ; '?'
.text:00404360
.text:00404360 loc_404360:                             ; CODE XREF: sub_403A70+8FA↓j
.text:00404360                 movsx   eax, bl
.text:00404363                 jmp     loc_403BC7
.text:00404368 ; ---------------------------------------------------------------------------
.text:00404368
.text:00404368 loc_404368:                             ; CODE XREF: sub_403A70+8EC↑j
.text:00404368                 mov     bl, 3Ah ; ':'
.text:0040436A                 jmp     short loc_404360
.text:0040436C ; ---------------------------------------------------------------------------
.text:0040436C
.text:0040436C loc_40436C:                             ; CODE XREF: sub_403A70+8DF↑j
.text:0040436C                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:00404373                 call    ds:libintl_gettext
.text:00404379                 mov     [esp+5Ch+var_50], esi
.text:0040437D                 mov     edx, [esp+5Ch+arg_4]
.text:00404381                 mov     ecx, ds:_iob
.text:00404387                 mov     ebx, [edx]
.text:00404389                 add     ecx, 40h ; '@'
.text:0040438C                 mov     [esp+5Ch+Str2], eax ; Format
.text:00404390                 mov     [esp+5Ch+MaxCount], ebx
.text:00404394                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00404397                 call    fprintf
.text:0040439C                 jmp     short loc_404351
.text:0040439C ; ---------------------------------------------------------------------------
.text:0040439E                 align 10h
.text:004043A0
.text:004043A0 loc_4043A0:                             ; CODE XREF: sub_403A70+54C↑j
.text:004043A0                                         ; sub_403A70+555↑j
.text:004043A0                 mov     eax, [esp+5Ch+var_14]
.text:004043A4                 test    eax, eax
.text:004043A6                 jz      short loc_4043DF
.text:004043A8                 mov     ebx, [ebp+1Ch]
.text:004043AB                 test    ebx, ebx
.text:004043AD                 jz      short loc_4043E7
.text:004043AF                 mov     [esp+5Ch+Str1], offset aSIllegalOption ; "%s: illegal option -- %c\n"
.text:004043B6
.text:004043B6 loc_4043B6:                             ; CODE XREF: sub_403A70+97E↓j
.text:004043B6                 call    ds:libintl_gettext
.text:004043BC                 mov     [esp+5Ch+var_50], esi
.text:004043C0                 mov     ebx, [esp+5Ch+arg_4]
.text:004043C4                 mov     edx, ds:_iob
.text:004043CA                 mov     esi, [ebx]
.text:004043CC                 add     edx, 40h ; '@'
.text:004043CF                 mov     [esp+5Ch+Str2], eax ; Format
.text:004043D3                 mov     [esp+5Ch+MaxCount], esi
.text:004043D7                 mov     [esp+5Ch+Str1], edx ; Stream
.text:004043DA                 call    fprintf
.text:004043DF
.text:004043DF loc_4043DF:                             ; CODE XREF: sub_403A70+936↑j
.text:004043DF                 mov     [ebp+8], edi
.text:004043E2                 jmp     loc_403DC8
.text:004043E7 ; ---------------------------------------------------------------------------
.text:004043E7
.text:004043E7 loc_4043E7:                             ; CODE XREF: sub_403A70+93D↑j
.text:004043E7                 mov     [esp+5Ch+Str1], offset aSInvalidOption ; "%s: invalid option -- %c\n"
.text:004043EE                 jmp     short loc_4043B6
.text:004043F0 ; ---------------------------------------------------------------------------
.text:004043F0
.text:004043F0 loc_4043F0:                             ; CODE XREF: sub_403A70+26E↑j
.text:004043F0                 mov     edi, [esp+5Ch+var_14]
.text:004043F4                 test    edi, edi
.text:004043F6                 jnz     short loc_40440E
.text:004043F8
.text:004043F8 loc_4043F8:                             ; CODE XREF: sub_403A70+9D4↓j
.text:004043F8                 mov     edx, [ebp+14h]
.text:004043FB                 mov     [esp+5Ch+Str1], edx ; Str
.text:004043FE                 call    strlen
.text:00404403                 add     [ebp+14h], eax
.text:00404406                 inc     dword ptr [ebp+0]
.text:00404409                 jmp     loc_403F4E
.text:0040440E ; ---------------------------------------------------------------------------
.text:0040440E
.text:0040440E loc_40440E:                             ; CODE XREF: sub_403A70+986↑j
.text:0040440E                 mov     [esp+5Ch+Str1], offset aSOptionSIsAmbi ; "%s: option `%s' is ambiguous\n"
.text:00404415                 call    ds:libintl_gettext
.text:0040441B                 mov     ebx, [ebp+0]
.text:0040441E                 mov     edi, [esp+5Ch+arg_4]
.text:00404422                 mov     ecx, [edi+ebx*4]
.text:00404425                 mov     ebx, ds:_iob
.text:0040442B                 mov     [esp+5Ch+var_50], ecx
.text:0040442F                 mov     esi, [edi]
.text:00404431                 add     ebx, 40h ; '@'
.text:00404434                 mov     [esp+5Ch+Str2], eax ; Format
.text:00404438                 mov     [esp+5Ch+Str1], ebx ; Stream
.text:0040443B                 mov     [esp+5Ch+MaxCount], esi
.text:0040443F                 call    fprintf
.text:00404444                 jmp     short loc_4043F8
.text:00404446 ; ---------------------------------------------------------------------------
.text:00404446
.text:00404446 loc_404446:                             ; CODE XREF: sub_403A70+246↑j
.text:00404446                 mov     ecx, [ebp+14h]
.text:00404449                 mov     ebx, edi
.text:0040444B                 mov     edx, [esi]
.text:0040444D                 sub     ebx, ecx
.text:0040444F                 mov     [esp+5Ch+Str1], edx ; Str
.text:00404452                 call    strlen
.text:00404457                 cmp     ebx, eax
.text:00404459                 jz      short loc_4044B1
.text:0040445B                 mov     ebx, [esp+5Ch+var_18]
.text:0040445F                 test    ebx, ebx
.text:00404461                 jz      short loc_4044A0
.text:00404463                 mov     edx, [esp+5Ch+arg_14]
.text:00404467                 test    edx, edx
.text:00404469                 jnz     short loc_404477
.text:0040446B                 mov     ecx, [esp+5Ch+var_18]
.text:0040446F                 mov     ebx, [esi+4]
.text:00404472                 cmp     [ecx+4], ebx
.text:00404475                 jz      short loc_404484
.text:00404477
.text:00404477 loc_404477:                             ; CODE XREF: sub_403A70+9F9↑j
.text:00404477                                         ; sub_403A70+A1A↓j ...
.text:00404477                 mov     [esp+5Ch+var_20], 1
.text:0040447F                 jmp     loc_403CBC
.text:00404484 ; ---------------------------------------------------------------------------
.text:00404484
.text:00404484 loc_404484:                             ; CODE XREF: sub_403A70+A05↑j
.text:00404484                 mov     edx, [esi+8]
.text:00404487                 cmp     [ecx+8], edx
.text:0040448A                 jnz     short loc_404477
.text:0040448C                 mov     ebx, [esi+0Ch]
.text:0040448F                 cmp     [ecx+0Ch], ebx
.text:00404492                 jnz     short loc_404477
.text:00404494                 jmp     loc_403CBC
.text:00404494 ; ---------------------------------------------------------------------------
.text:00404499                 align 10h
.text:004044A0
.text:004044A0 loc_4044A0:                             ; CODE XREF: sub_403A70+9F1↑j
.text:004044A0                 mov     [esp+5Ch+var_18], esi
.text:004044A4                 mov     eax, [esp+5Ch+var_28]
.text:004044A8                 mov     [esp+5Ch+var_24], eax
.text:004044AC                 jmp     loc_403CBC
.text:004044B1 ; ---------------------------------------------------------------------------
.text:004044B1
.text:004044B1 loc_4044B1:                             ; CODE XREF: sub_403A70+9E9↑j
.text:004044B1                 mov     [esp+5Ch+var_18], esi
.text:004044B5                 mov     ecx, [esp+5Ch+var_28]
.text:004044B9                 mov     [esp+5Ch+var_1C], 1
.text:004044C1                 mov     [esp+5Ch+var_24], ecx
.text:004044C5                 jmp     loc_403CD0
.text:004044CA ; ---------------------------------------------------------------------------
.text:004044CA
.text:004044CA loc_4044CA:                             ; CODE XREF: sub_403A70+1BF↑j
.text:004044CA                 mov     eax, [esp+5Ch+Str]
.text:004044CE                 movsx   esi, dl
.text:004044D1                 mov     [esp+5Ch+Str2], esi ; Val
.text:004044D5                 mov     [esp+5Ch+Str1], eax ; Str
.text:004044D8                 call    strchr
.text:004044DD                 test    eax, eax
.text:004044DF                 jnz     loc_403F90
.text:004044E5                 jmp     loc_403C35
.text:004044EA ; ---------------------------------------------------------------------------
.text:004044EA
.text:004044EA loc_4044EA:                             ; CODE XREF: sub_403A70+17C↑j
.text:004044EA                 mov     ecx, 1
.text:004044EF                 jmp     loc_403BF2
.text:004044F4 ; ---------------------------------------------------------------------------
.text:004044F4
.text:004044F4 loc_4044F4:                             ; CODE XREF: sub_403A70+D4↑j
.text:004044F4                                         ; sub_403A70+130↑j
.text:004044F4                 mov     eax, [ebp+20h]
.text:004044F7                 cmp     eax, [ebp+24h]
.text:004044FA                 jz      loc_403BD0
.text:00404500                 mov     [ebp+0], eax
.text:00404503                 jmp     loc_403BD0
.text:00404508 ; ---------------------------------------------------------------------------
.text:00404508
.text:00404508 loc_404508:                             ; CODE XREF: sub_403A70+FE↑j
.text:00404508                 mov     [ebp+20h], eax
.text:0040450B                 jmp     loc_403B90
.text:00404510 ; ---------------------------------------------------------------------------
.text:00404510
.text:00404510 loc_404510:                             ; CODE XREF: sub_403A70+CA↑j
.text:00404510                 mov     edx, [ebp+20h]
.text:00404513                 mov     eax, [ebp+24h]
.text:00404516                 cmp     edx, eax
.text:00404518                 jz      short loc_404590
.text:0040451A                 cmp     eax, ebx
.text:0040451C                 jz      short loc_404531
.text:0040451E                 mov     [esp+5Ch+Str2], ebp
.text:00404522                 mov     ebx, [esp+5Ch+arg_4]
.text:00404526                 mov     [esp+5Ch+Str1], ebx
.text:00404529                 call    sub_404720
.text:0040452E                 mov     ebx, [ebp+0]
.text:00404531
.text:00404531 loc_404531:                             ; CODE XREF: sub_403A70+AAC↑j
.text:00404531                                         ; sub_403A70+B22↓j ...
.text:00404531                 cmp     ebx, [esp+5Ch+arg_0]
.text:00404535                 jge     short loc_404580
.text:00404537                 mov     esi, [esp+5Ch+arg_4]
.text:0040453B                 mov     eax, [esi+ebx*4]
.text:0040453E                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00404541                 jz      short loc_404588
.text:00404543                 lea     esi, [esi+0]
.text:00404549                 lea     edi, [edi+0]
.text:00404550
.text:00404550 loc_404550:                             ; CODE XREF: sub_403A70+AFC↓j
.text:00404550                                         ; sub_403A70+B1C↓j
.text:00404550                 lea     eax, [ebx+1]
.text:00404553                 mov     ebx, eax
.text:00404555                 mov     [ebp+0], eax
.text:00404558                 cmp     eax, [esp+5Ch+arg_0]
.text:0040455C                 jge     short loc_404580
.text:0040455E                 mov     edi, [esp+5Ch+arg_4]
.text:00404562                 mov     edx, [edi+eax*4]
.text:00404565                 cmp     byte ptr [edx], 2Dh ; '-'
.text:00404568                 jz      short loc_404570
.text:0040456A
.text:0040456A loc_40456A:                             ; CODE XREF: sub_403A70+B04↓j
.text:0040456A                 mov     ebx, eax
.text:0040456C                 jmp     short loc_404550
.text:0040456C ; ---------------------------------------------------------------------------
.text:0040456E                 align 10h
.text:00404570
.text:00404570 loc_404570:                             ; CODE XREF: sub_403A70+AF8↑j
.text:00404570                 cmp     byte ptr [edx+1], 0
.text:00404574                 jz      short loc_40456A
.text:00404576                 lea     esi, [esi+0]
.text:00404579                 lea     edi, [edi+0]
.text:00404580
.text:00404580 loc_404580:                             ; CODE XREF: sub_403A70+AC5↑j
.text:00404580                                         ; sub_403A70+AEC↑j ...
.text:00404580                 mov     [ebp+24h], ebx
.text:00404583                 jmp     loc_403B40
.text:00404588 ; ---------------------------------------------------------------------------
.text:00404588
.text:00404588 loc_404588:                             ; CODE XREF: sub_403A70+AD1↑j
.text:00404588                 cmp     byte ptr [eax+1], 0
.text:0040458C                 jz      short loc_404550
.text:0040458E                 jmp     short loc_404580
.text:00404590 ; ---------------------------------------------------------------------------
.text:00404590
.text:00404590 loc_404590:                             ; CODE XREF: sub_403A70+AA8↑j
.text:00404590                 cmp     edx, ebx
.text:00404592                 jz      short loc_404531
.text:00404594                 mov     [ebp+20h], ebx
.text:00404597                 jmp     short loc_404531
.text:00404599 ; ---------------------------------------------------------------------------
.text:00404599
.text:00404599 loc_404599:                             ; CODE XREF: sub_403A70+88↑j
.text:00404599                 mov     dword ptr [ebp+18h], 0
.text:004045A0                 mov     esi, [esp+5Ch+Str]
.text:004045A4
.text:004045A4 loc_4045A4:                             ; CODE XREF: sub_403A70+B49↓j
.text:004045A4                 inc     esi
.text:004045A5                 jmp     loc_403B08
.text:004045A5 ; ---------------------------------------------------------------------------
.text:004045AA                 align 10h
.text:004045B0
.text:004045B0 loc_4045B0:                             ; CODE XREF: sub_403A70+80↑j
.text:004045B0                 mov     dword ptr [ebp+18h], 2
.text:004045B7                 mov     esi, ecx
.text:004045B9                 jmp     short loc_4045A4
.text:004045B9 ; ---------------------------------------------------------------------------
.text:004045BB                 align 10h
.text:004045C0
.text:004045C0 loc_4045C0:                             ; CODE XREF: sub_403A70+69↑j
.text:004045C0                 mov     [esp+5Ch+Str1], offset VarName ; "POSIXLY_CORRECT"
.text:004045C7                 call    getenv
.text:004045CC                 test    eax, eax
.text:004045CE                 jz      loc_403AE4
.text:004045D4                 jmp     loc_403ADF
.text:004045D4 ; ---------------------------------------------------------------------------
.text:004045D9                 align 10h
.text:004045E0
.text:004045E0 loc_4045E0:                             ; CODE XREF: sub_403A70+3F↑j
.text:004045E0                 mov     dword ptr [ebp+0], 1
.text:004045E7                 mov     ebx, 1
.text:004045EC                 jmp     loc_403AC0
.text:004045EC sub_403A70      endp
.text:004045EC
.text:004045F1 ; ---------------------------------------------------------------------------
.text:004045F1                 jmp     short sub_404600
.text:004045F1 ; ---------------------------------------------------------------------------
.text:004045F3                 align 10h
.text:00404600
.text:00404600 ; =============== S U B R O U T I N E =======================================
.text:00404600
.text:00404600
.text:00404600 ; int __cdecl sub_404600(int, int, char *, int, int, int, int)
.text:00404600 sub_404600      proc near               ; CODE XREF: .text:004045F1↑j
.text:00404600                                         ; sub_404E20+3A↓p ...
.text:00404600
.text:00404600 var_2C          = dword ptr -2Ch
.text:00404600 var_28          = dword ptr -28h
.text:00404600 Str             = dword ptr -24h
.text:00404600 var_20          = dword ptr -20h
.text:00404600 var_1C          = dword ptr -1Ch
.text:00404600 var_18          = dword ptr -18h
.text:00404600 var_14          = dword ptr -14h
.text:00404600 var_10          = dword ptr -10h
.text:00404600 arg_0           = dword ptr  4
.text:00404600 arg_4           = dword ptr  8
.text:00404600 arg_8           = dword ptr  0Ch
.text:00404600 arg_C           = dword ptr  10h
.text:00404600 arg_10          = dword ptr  14h
.text:00404600 arg_14          = dword ptr  18h
.text:00404600 arg_18          = dword ptr  1Ch
.text:00404600
.text:00404600                 sub     esp, 2Ch
.text:00404603                 mov     edx, dword_411020
.text:00404609                 mov     [esp+2Ch+var_10], offset dword_4121A0 ; int
.text:00404611                 mov     ecx, dword_411024
.text:00404617                 mov     ds:dword_4121A0, edx
.text:0040461D                 mov     edx, [esp+2Ch+arg_18]
.text:00404621                 mov     ds:dword_4121A4, ecx
.text:00404627                 mov     ecx, [esp+2Ch+arg_14]
.text:0040462B                 mov     [esp+2Ch+var_14], edx ; int
.text:0040462F                 mov     edx, [esp+2Ch+arg_10]
.text:00404633                 mov     [esp+2Ch+var_18], ecx ; int
.text:00404637                 mov     ecx, [esp+2Ch+arg_C]
.text:0040463B                 mov     [esp+2Ch+var_1C], edx ; int
.text:0040463F                 mov     edx, [esp+2Ch+arg_8]
.text:00404643                 mov     [esp+2Ch+var_20], ecx ; int
.text:00404647                 mov     ecx, [esp+2Ch+arg_4]
.text:0040464B                 mov     [esp+2Ch+Str], edx ; Str
.text:0040464F                 mov     edx, [esp+2Ch+arg_0]
.text:00404653                 mov     [esp+2Ch+var_28], ecx ; int
.text:00404657                 mov     [esp+2Ch+var_2C], edx ; int
.text:0040465A                 call    sub_403A70
.text:0040465F                 mov     ecx, ds:dword_4121A0
.text:00404665                 mov     dword_411020, ecx
.text:0040466B                 mov     ecx, ds:dword_4121AC
.text:00404671                 mov     ds:dword_412810, ecx
.text:00404677                 mov     ecx, ds:dword_4121A8
.text:0040467D                 mov     dword_411028, ecx
.text:00404683                 add     esp, 2Ch
.text:00404686                 retn
.text:00404686 sub_404600      endp
.text:00404686
.text:00404686 ; ---------------------------------------------------------------------------
.text:00404687                 align 10h
.text:00404690                 sub     esp, 2Ch
.text:00404693                 mov     edx, dword_411020
.text:00404699                 mov     dword ptr [esp+1Ch], offset dword_4121A0
.text:004046A1                 mov     ecx, dword_411024
.text:004046A7                 mov     dword ptr [esp+18h], 1
.text:004046AF                 mov     ds:dword_4121A0, edx
.text:004046B5                 mov     edx, [esp+38h]
.text:004046B9                 mov     ds:dword_4121A4, ecx
.text:004046BF                 mov     ecx, [esp+34h]
.text:004046C3                 mov     [esp+8], edx
.text:004046C7                 mov     edx, [esp+30h]
.text:004046CB                 mov     [esp+4], ecx
.text:004046CF                 mov     dword ptr [esp+14h], 0
.text:004046D7                 mov     dword ptr [esp+10h], 0
.text:004046DF                 mov     dword ptr [esp+0Ch], 0
.text:004046E7                 mov     [esp], edx
.text:004046EA                 call    sub_403A70
.text:004046EF                 mov     ecx, ds:dword_4121A0
.text:004046F5                 mov     dword_411020, ecx
.text:004046FB                 mov     ecx, ds:dword_4121AC
.text:00404701                 mov     ds:dword_412810, ecx
.text:00404707                 mov     ecx, ds:dword_4121A8
.text:0040470D                 mov     dword_411028, ecx
.text:00404713                 add     esp, 2Ch
.text:00404716                 retn
.text:00404716 ; ---------------------------------------------------------------------------
.text:00404717                 align 10h
.text:00404720
.text:00404720 ; =============== S U B R O U T I N E =======================================
.text:00404720
.text:00404720
.text:00404720 sub_404720      proc near               ; CODE XREF: sub_403A70+113↑p
.text:00404720                                         ; sub_403A70+AB9↑p
.text:00404720
.text:00404720 var_2C          = dword ptr -2Ch
.text:00404720 var_28          = dword ptr -28h
.text:00404720 var_24          = dword ptr -24h
.text:00404720 var_20          = dword ptr -20h
.text:00404720 var_1C          = dword ptr -1Ch
.text:00404720 var_18          = dword ptr -18h
.text:00404720 var_14          = dword ptr -14h
.text:00404720 arg_0           = dword ptr  4
.text:00404720 arg_4           = dword ptr  8
.text:00404720
.text:00404720                 push    ebp
.text:00404721                 push    edi
.text:00404722                 push    esi
.text:00404723                 push    ebx
.text:00404724                 sub     esp, 1Ch
.text:00404727                 mov     ecx, [esp+2Ch+arg_4]
.text:0040472B                 mov     eax, [esp+2Ch+arg_4]
.text:0040472F                 mov     ebx, [esp+2Ch+arg_4]
.text:00404733                 mov     edx, [ecx+20h]
.text:00404736                 mov     edi, [esp+2Ch+arg_0]
.text:0040473A                 mov     ecx, [ebx]
.text:0040473C                 mov     [esp+2Ch+var_2C], edx
.text:0040473F                 mov     [esp+2Ch+var_14], edx
.text:00404743                 mov     edx, [eax+24h]
.text:00404746                 mov     [esp+2Ch+var_28], ecx
.text:0040474A                 mov     [esp+2Ch+var_1C], ecx
.text:0040474E                 cmp     ecx, edx
.text:00404750                 mov     [esp+2Ch+var_18], edx
.text:00404754                 jle     short loc_4047D0
.text:00404756                 mov     esi, [esp+2Ch+var_2C]
.text:00404759                 cmp     edx, esi
.text:0040475B                 jle     short loc_4047D0
.text:0040475D                 lea     esi, [esi+0]
.text:00404760
.text:00404760 loc_404760:                             ; CODE XREF: sub_404720+A1↓j
.text:00404760                 mov     ebx, [esp+2Ch+var_1C]
.text:00404764                 mov     edx, [esp+2Ch+var_18]
.text:00404768                 mov     ebp, [esp+2Ch+var_18]
.text:0040476C                 mov     eax, [esp+2Ch+var_14]
.text:00404770                 sub     ebx, edx
.text:00404772                 mov     [esp+2Ch+var_20], ebx
.text:00404776                 sub     ebp, eax
.text:00404778                 cmp     ebx, ebp
.text:0040477A                 jle     short loc_4047F5
.text:0040477C                 xor     esi, esi
.text:0040477E                 cmp     esi, ebp
.text:00404780                 jge     short loc_4047AD
.text:00404782                 mov     ecx, [esp+2Ch+var_1C]
.text:00404786                 sub     ecx, ebp
.text:00404788                 mov     [esp+2Ch+var_24], ecx
.text:0040478C                 lea     esi, [esi+0]
.text:00404790
.text:00404790 loc_404790:                             ; CODE XREF: sub_404720+8B↓j
.text:00404790                 mov     ecx, [esp+2Ch+var_14]
.text:00404794                 mov     edx, [esp+2Ch+var_24]
.text:00404798                 add     ecx, esi
.text:0040479A                 add     edx, esi
.text:0040479C                 mov     ebx, [edi+ecx*4]
.text:0040479F                 mov     eax, [edi+edx*4]
.text:004047A2                 inc     esi
.text:004047A3                 cmp     esi, ebp
.text:004047A5                 mov     [edi+ecx*4], eax
.text:004047A8                 mov     [edi+edx*4], ebx
.text:004047AB                 jl      short loc_404790
.text:004047AD
.text:004047AD loc_4047AD:                             ; CODE XREF: sub_404720+60↑j
.text:004047AD                 sub     [esp+2Ch+var_1C], ebp
.text:004047B1
.text:004047B1 loc_4047B1:                             ; CODE XREF: sub_404720+107↓j
.text:004047B1                 mov     eax, [esp+2Ch+var_18]
.text:004047B5                 cmp     [esp+2Ch+var_1C], eax
.text:004047B9                 jle     short loc_4047D0
.text:004047BB                 mov     ebp, [esp+2Ch+var_14]
.text:004047BF                 cmp     eax, ebp
.text:004047C1                 jg      short loc_404760
.text:004047C3                 lea     esi, [esi+0]
.text:004047C9                 lea     edi, [edi+0]
.text:004047D0
.text:004047D0 loc_4047D0:                             ; CODE XREF: sub_404720+34↑j
.text:004047D0                                         ; sub_404720+3B↑j ...
.text:004047D0                 mov     esi, [esp+2Ch+var_28]
.text:004047D4                 mov     ecx, [esp+2Ch+var_18]
.text:004047D8                 mov     eax, [esp+2Ch+var_2C]
.text:004047DB                 mov     edi, [esp+2Ch+arg_4]
.text:004047DF                 mov     edx, [esp+2Ch+var_28]
.text:004047E3                 sub     esi, ecx
.text:004047E5                 add     esi, eax
.text:004047E7                 mov     [edi+20h], esi
.text:004047EA                 mov     [edi+24h], edx
.text:004047ED                 add     esp, 1Ch
.text:004047F0                 pop     ebx
.text:004047F1                 pop     esi
.text:004047F2                 pop     edi
.text:004047F3                 pop     ebp
.text:004047F4                 retn
.text:004047F5 ; ---------------------------------------------------------------------------
.text:004047F5
.text:004047F5 loc_4047F5:                             ; CODE XREF: sub_404720+5A↑j
.text:004047F5                 xor     esi, esi
.text:004047F7                 cmp     esi, [esp+2Ch+var_20]
.text:004047FB                 jge     short loc_40481F
.text:004047FD                 lea     esi, [esi+0]
.text:00404800
.text:00404800 loc_404800:                             ; CODE XREF: sub_404720+FD↓j
.text:00404800                 mov     ebx, [esp+2Ch+var_14]
.text:00404804                 mov     ebp, [esp+2Ch+var_18]
.text:00404808                 add     ebx, esi
.text:0040480A                 add     ebp, esi
.text:0040480C                 mov     edx, [edi+ebx*4]
.text:0040480F                 inc     esi
.text:00404810                 cmp     esi, [esp+2Ch+var_20]
.text:00404814                 mov     ecx, [edi+ebp*4]
.text:00404817                 mov     [edi+ebx*4], ecx
.text:0040481A                 mov     [edi+ebp*4], edx
.text:0040481D                 jl      short loc_404800
.text:0040481F
.text:0040481F loc_40481F:                             ; CODE XREF: sub_404720+DB↑j
.text:0040481F                 mov     esi, [esp+2Ch+var_20]
.text:00404823                 add     [esp+2Ch+var_14], esi
.text:00404827                 jmp     short loc_4047B1
.text:00404827 sub_404720      endp
.text:00404827
.text:00404827 ; ---------------------------------------------------------------------------
.text:00404829                 align 20h
.text:00404840                 sub     esp, 0Ch
.text:00404843                 mov     edx, [esp+14h]
.text:00404847                 mov     dword ptr [esp+4], 5
.text:0040484F                 mov     [esp+8], edx
.text:00404853                 mov     edx, [esp+10h]
.text:00404857                 mov     [esp], edx
.text:0040485A                 call    sub_4062F0
.text:0040485F                 add     esp, 0Ch
.text:00404862                 retn
.text:00404862 ; ---------------------------------------------------------------------------
.text:00404863                 align 10h
.text:00404870
.text:00404870 ; =============== S U B R O U T I N E =======================================
.text:00404870
.text:00404870
.text:00404870 ; int __cdecl sub_404870(char *)
.text:00404870 sub_404870      proc near               ; CODE XREF: sub_401B10+4D3↑p
.text:00404870
.text:00404870 var_C           = dword ptr -0Ch
.text:00404870 var_8           = dword ptr -8
.text:00404870 var_4           = dword ptr -4
.text:00404870 arg_0           = dword ptr  4
.text:00404870
.text:00404870                 sub     esp, 0Ch
.text:00404873                 mov     edx, [esp+0Ch+arg_0]
.text:00404877                 mov     [esp+0Ch+var_8], 5 ; int
.text:0040487F                 mov     [esp+0Ch+var_C], 0 ; int
.text:00404886                 mov     [esp+0Ch+var_4], edx ; char *
.text:0040488A                 call    sub_4062F0
.text:0040488F                 add     esp, 0Ch
.text:00404892                 retn
.text:00404892 sub_404870      endp
.text:00404892
.text:00404892 ; ---------------------------------------------------------------------------
.text:00404893                 align 10h
.text:004048A0 byte_4048A0     db 43h, 0               ; DATA XREF: sub_4048B0+33↓o
.text:004048A2 aPosix          db 'POSIX',0            ; DATA XREF: sub_4048B0+45↓o
.text:004048A8                 align 10h
.text:004048B0
.text:004048B0 ; =============== S U B R O U T I N E =======================================
.text:004048B0
.text:004048B0
.text:004048B0 sub_4048B0      proc near               ; CODE XREF: sub_401B10+489↑p
.text:004048B0
.text:004048B0 Category        = dword ptr -1Ch
.text:004048B0 Locale          = dword ptr -18h
.text:004048B0 var_10          = dword ptr -10h
.text:004048B0 var_C           = dword ptr -0Ch
.text:004048B0 var_8           = dword ptr -8
.text:004048B0 var_4           = dword ptr -4
.text:004048B0 arg_0           = dword ptr  4
.text:004048B0
.text:004048B0                 sub     esp, 1Ch
.text:004048B3                 mov     edx, [esp+1Ch+arg_0]
.text:004048B7                 mov     [esp+1Ch+var_10], ebx
.text:004048BB                 mov     bl, 1
.text:004048BD                 mov     [esp+1Ch+var_C], esi
.text:004048C1                 mov     [esp+1Ch+var_8], edi
.text:004048C5                 mov     [esp+1Ch+var_4], ebp
.text:004048C9                 mov     [esp+1Ch+Locale], 0 ; Locale
.text:004048D1                 mov     [esp+1Ch+Category], edx ; Category
.text:004048D4                 call    setlocale
.text:004048D9                 test    eax, eax
.text:004048DB                 jz      short loc_404904
.text:004048DD                 cld
.text:004048DE                 mov     edx, 2
.text:004048E3                 mov     edi, offset byte_4048A0
.text:004048E8                 mov     esi, eax
.text:004048EA                 mov     ecx, edx
.text:004048EC                 repe cmpsb
.text:004048EE                 jz      short loc_404902
.text:004048F0                 mov     edx, 6
.text:004048F5                 mov     edi, offset aPosix ; "POSIX"
.text:004048FA                 mov     esi, eax
.text:004048FC                 mov     ecx, edx
.text:004048FE                 repe cmpsb
.text:00404900                 jnz     short loc_404904
.text:00404902
.text:00404902 loc_404902:                             ; CODE XREF: sub_4048B0+3E↑j
.text:00404902                 xor     ebx, ebx
.text:00404904
.text:00404904 loc_404904:                             ; CODE XREF: sub_4048B0+2B↑j
.text:00404904                                         ; sub_4048B0+50↑j
.text:00404904                 movzx   eax, bl
.text:00404907                 mov     esi, [esp+1Ch+var_C]
.text:0040490B                 mov     ebx, [esp+1Ch+var_10]
.text:0040490F                 mov     edi, [esp+1Ch+var_8]
.text:00404913                 mov     ebp, [esp+1Ch+var_4]
.text:00404917                 add     esp, 1Ch
.text:0040491A                 retn
.text:0040491A sub_4048B0      endp
.text:0040491A
.text:0040491A ; ---------------------------------------------------------------------------
.text:0040491B                 align 10h
.text:00404920 aCopyrightC2005 db 'Copyright (C) 2005 Free Software Foundation, Inc.',0
.text:00404920                                         ; DATA XREF: .data:off_411030↓o
.text:00404952 ; const char aSSS[]
.text:00404952 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: sub_404C10+50↓o
.text:0040495E aWrittenByS     db 'Written by %s.',0Ah,0
.text:0040495E                                         ; DATA XREF: sub_404C10:loc_404CB1↓o
.text:0040496E                 align 20h
.text:00404980 aThisIsFreeSoft db 'This is free software; see the source for copying conditions.  Th'
.text:00404980                                         ; DATA XREF: sub_404C10+100↓o
.text:00404980                 db 'ere is NO',0Ah
.text:00404980                 db 'warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULA'
.text:00404980                 db 'R PURPOSE.',0Ah,0
.text:00404A18 aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.text:00404A18                                         ; DATA XREF: sub_404C10:loc_404D51↓o
.text:00404A2F aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.text:00404A2F                                         ; DATA XREF: sub_404C10:loc_404D5D↓o
.text:00404A4B                 align 20h
.text:00404A60 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.text:00404A60                                         ; DATA XREF: sub_404C10:loc_404D69↓o
.text:00404A60                 db 'and %s.',0Ah,0
.text:00404A80 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.text:00404A80                                         ; DATA XREF: sub_404C10:loc_404D75↓o
.text:00404A80                 db '%s, and %s.',0Ah,0
.text:00404AA4                 align 20h
.text:00404AC0 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.text:00404AC0                                         ; DATA XREF: sub_404C10:loc_404D81↓o
.text:00404AC0                 db '%s, %s, and %s.',0Ah,0
.text:00404AE8                 align 20h
.text:00404B00 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.text:00404B00                                         ; DATA XREF: sub_404C10:loc_404D8D↓o
.text:00404B00                 db '%s, %s, %s, and %s.',0Ah,0
.text:00404B2C                 align 20h
.text:00404B40 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.text:00404B40                                         ; DATA XREF: sub_404C10:loc_404D99↓o
.text:00404B40                 db '%s, %s, %s, %s,',0Ah
.text:00404B40                 db 'and %s.',0Ah,0
.text:00404B70                 align 20h
.text:00404B80 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.text:00404B80                                         ; DATA XREF: sub_404C10:loc_404DA5↓o
.text:00404B80                 db '%s, %s, %s, %s,',0Ah
.text:00404B80                 db '%s, and %s.',0Ah,0
.text:00404BB4                 align 10h
.text:00404BC0 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.text:00404BC0                                         ; DATA XREF: sub_404C10:def_404C7D↓o
.text:00404BC0                 db '%s, %s, %s, %s,',0Ah
.text:00404BC0                 db '%s, %s, and others.',0Ah,0
.text:00404BFC ; const char aSS_0[]
.text:00404BFC aSS_0           db '%s %s',0Ah,0        ; DATA XREF: sub_404C10+1B5↓o
.text:00404C03                 align 10h
.text:00404C10
.text:00404C10 ; =============== S U B R O U T I N E =======================================
.text:00404C10
.text:00404C10
.text:00404C10 ; int __cdecl sub_404C10(FILE *, FILE *, int, int, va_list)
.text:00404C10 sub_404C10      proc near               ; CODE XREF: sub_404DE0+2A↓p
.text:00404C10
.text:00404C10 Stream          = dword ptr -2Ch
.text:00404C10 Format          = dword ptr -28h
.text:00404C10 ArgList         = dword ptr -24h
.text:00404C10 var_20          = dword ptr -20h
.text:00404C10 var_1C          = dword ptr -1Ch
.text:00404C10 var_14          = dword ptr -14h
.text:00404C10 arg_0           = dword ptr  4
.text:00404C10 arg_4           = dword ptr  8
.text:00404C10 arg_8           = dword ptr  0Ch
.text:00404C10 arg_C           = dword ptr  10h
.text:00404C10 arg_10          = dword ptr  14h
.text:00404C10
.text:00404C10                 push    ebp
.text:00404C11                 push    edi
.text:00404C12                 push    esi
.text:00404C13                 push    ebx
.text:00404C14                 sub     esp, 1Ch
.text:00404C17                 xor     ebx, ebx
.text:00404C19                 mov     edi, [esp+2Ch+arg_10]
.text:00404C1D                 mov     edx, [esp+2Ch+arg_8]
.text:00404C21                 mov     esi, [esp+2Ch+arg_0]
.text:00404C25                 mov     eax, [edi]
.text:00404C27                 mov     ecx, [esp+2Ch+arg_4]
.text:00404C2B                 mov     [esp+2Ch+var_14], edx
.text:00404C2F                 mov     ebp, [esp+2Ch+arg_C]
.text:00404C33                 lea     edx, [edi+4]
.text:00404C36                 test    eax, eax
.text:00404C38                 jz      short loc_404C4C
.text:00404C3A                 lea     esi, [esi+0]
.text:00404C40
.text:00404C40 loc_404C40:                             ; CODE XREF: sub_404C10+3A↓j
.text:00404C40                 mov     eax, edx
.text:00404C42                 inc     ebx
.text:00404C43                 mov     eax, [eax]
.text:00404C45                 add     edx, 4
.text:00404C48                 test    eax, eax
.text:00404C4A                 jnz     short loc_404C40
.text:00404C4C
.text:00404C4C loc_404C4C:                             ; CODE XREF: sub_404C10+28↑j
.text:00404C4C                 test    ecx, ecx
.text:00404C4E                 jz      loc_404DBD
.text:00404C54                 mov     [esp+2Ch+var_1C], ebp
.text:00404C58                 mov     edx, [esp+2Ch+var_14]
.text:00404C5C                 mov     [esp+2Ch+ArgList], ecx
.text:00404C60                 mov     [esp+2Ch+Format], offset aSSS ; "%s (%s) %s\n"
.text:00404C68                 mov     [esp+2Ch+var_20], edx
.text:00404C6C                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00404C6F                 call    fprintf
.text:00404C74
.text:00404C74 loc_404C74:                             ; CODE XREF: sub_404C10+1C9↓j
.text:00404C74                 cmp     ebx, 9          ; switch 10 cases
.text:00404C77                 ja      def_404C7D      ; jumptable 00404C7D default case
.text:00404C7D                 jmp     ds:jpt_404C7D[ebx*4] ; switch jump
.text:00404C7D ; ---------------------------------------------------------------------------
.text:00404C84 jpt_404C7D      dd offset loc_404CAC    ; DATA XREF: sub_404C10+6D↑r
.text:00404C84                 dd offset loc_404CB1    ; jump table for switch statement
.text:00404C84                 dd offset loc_404D51
.text:00404C84                 dd offset loc_404D5D
.text:00404C84                 dd offset loc_404D69
.text:00404C84                 dd offset loc_404D75
.text:00404C84                 dd offset loc_404D81
.text:00404C84                 dd offset loc_404D8D
.text:00404C84                 dd offset loc_404D99
.text:00404C84                 dd offset loc_404DA5
.text:00404CAC ; ---------------------------------------------------------------------------
.text:00404CAC
.text:00404CAC loc_404CAC:                             ; CODE XREF: sub_404C10+6D↑j
.text:00404CAC                                         ; DATA XREF: sub_404C10:jpt_404C7D↑o
.text:00404CAC                 call    abort           ; jumptable 00404C7D case 0
.text:00404CB1 ; ---------------------------------------------------------------------------
.text:00404CB1
.text:00404CB1 loc_404CB1:                             ; CODE XREF: sub_404C10+6D↑j
.text:00404CB1                                         ; DATA XREF: sub_404C10:jpt_404C7D↑o
.text:00404CB1                 mov     [esp+2Ch+Stream], offset aWrittenByS ; jumptable 00404C7D case 1
.text:00404CB8                 nop
.text:00404CB9                 lea     esi, [esi+0]
.text:00404CC0
.text:00404CC0 loc_404CC0:                             ; CODE XREF: sub_404C10+148↓j
.text:00404CC0                                         ; sub_404C10+154↓j ...
.text:00404CC0                 call    ds:libintl_gettext
.text:00404CC6                 mov     [esp+2Ch+ArgList], edi ; ArgList
.text:00404CCA                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00404CCD                 mov     [esp+2Ch+Format], eax ; Format
.text:00404CD1                 call    vfprintf
.text:00404CD6                 mov     ebx, [esi+4]
.text:00404CD9                 dec     ebx
.text:00404CDA                 test    ebx, ebx
.text:00404CDC                 mov     [esi+4], ebx
.text:00404CDF                 js      short loc_404D3F
.text:00404CE1                 mov     edi, [esi]
.text:00404CE3                 mov     byte ptr [edi], 0Ah
.text:00404CE6                 inc     dword ptr [esi]
.text:00404CE8
.text:00404CE8 loc_404CE8:                             ; CODE XREF: sub_404C10+13F↓j
.text:00404CE8                 mov     [esp+2Ch+Format], esi ; Stream
.text:00404CEC                 mov     edx, off_411030 ; "Copyright (C) 2005 Free Software Founda"...
.text:00404CF2                 mov     [esp+2Ch+Stream], edx ; Buffer
.text:00404CF5                 call    fputs
.text:00404CFA                 mov     ebp, [esi+4]
.text:00404CFD                 dec     ebp
.text:00404CFE                 test    ebp, ebp
.text:00404D00                 mov     [esi+4], ebp
.text:00404D03                 js      short loc_404D2D
.text:00404D05                 mov     ecx, [esi]
.text:00404D07                 mov     byte ptr [ecx], 0Ah
.text:00404D0A                 inc     dword ptr [esi]
.text:00404D0C
.text:00404D0C loc_404D0C:                             ; CODE XREF: sub_404C10+12D↓j
.text:00404D0C                 mov     [esp+2Ch+arg_4], esi ; Stream
.text:00404D10                 mov     [esp+2Ch+Stream], offset aThisIsFreeSoft ; "This is free software; see the source f"...
.text:00404D17                 call    ds:libintl_gettext
.text:00404D1D                 mov     [esp+2Ch+arg_0], eax ; Buffer
.text:00404D21                 add     esp, 1Ch
.text:00404D24                 pop     ebx
.text:00404D25                 pop     esi
.text:00404D26                 pop     edi
.text:00404D27                 pop     ebp
.text:00404D28                 jmp     fputs
.text:00404D2D ; ---------------------------------------------------------------------------
.text:00404D2D
.text:00404D2D loc_404D2D:                             ; CODE XREF: sub_404C10+F3↑j
.text:00404D2D                 mov     [esp+2Ch+Format], esi ; File
.text:00404D31                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:00404D38                 call    _flsbuf
.text:00404D3D                 jmp     short loc_404D0C
.text:00404D3F ; ---------------------------------------------------------------------------
.text:00404D3F
.text:00404D3F loc_404D3F:                             ; CODE XREF: sub_404C10+CF↑j
.text:00404D3F                 mov     [esp+2Ch+Format], esi ; File
.text:00404D43                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:00404D4A                 call    _flsbuf
.text:00404D4F                 jmp     short loc_404CE8
.text:00404D51 ; ---------------------------------------------------------------------------
.text:00404D51
.text:00404D51 loc_404D51:                             ; CODE XREF: sub_404C10+6D↑j
.text:00404D51                                         ; DATA XREF: sub_404C10:jpt_404C7D↑o
.text:00404D51                 mov     [esp+2Ch+Stream], offset aWrittenBySAndS ; jumptable 00404C7D case 2
.text:00404D58                 jmp     loc_404CC0
.text:00404D5D ; ---------------------------------------------------------------------------
.text:00404D5D
.text:00404D5D loc_404D5D:                             ; CODE XREF: sub_404C10+6D↑j
.text:00404D5D                                         ; DATA XREF: sub_404C10:jpt_404C7D↑o
.text:00404D5D                 mov     [esp+2Ch+Stream], offset aWrittenBySSAnd ; jumptable 00404C7D case 3
.text:00404D64                 jmp     loc_404CC0
.text:00404D69 ; ---------------------------------------------------------------------------
.text:00404D69
.text:00404D69 loc_404D69:                             ; CODE XREF: sub_404C10+6D↑j
.text:00404D69                                         ; DATA XREF: sub_404C10:jpt_404C7D↑o
.text:00404D69                 mov     [esp+2Ch+Stream], offset aWrittenBySSSAn ; jumptable 00404C7D case 4
.text:00404D70                 jmp     loc_404CC0
.text:00404D75 ; ---------------------------------------------------------------------------
.text:00404D75
.text:00404D75 loc_404D75:                             ; CODE XREF: sub_404C10+6D↑j
.text:00404D75                                         ; DATA XREF: sub_404C10:jpt_404C7D↑o
.text:00404D75                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSA ; jumptable 00404C7D case 5
.text:00404D7C                 jmp     loc_404CC0
.text:00404D81 ; ---------------------------------------------------------------------------
.text:00404D81
.text:00404D81 loc_404D81:                             ; CODE XREF: sub_404C10+6D↑j
.text:00404D81                                         ; DATA XREF: sub_404C10:jpt_404C7D↑o
.text:00404D81                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_0 ; jumptable 00404C7D case 6
.text:00404D88                 jmp     loc_404CC0
.text:00404D8D ; ---------------------------------------------------------------------------
.text:00404D8D
.text:00404D8D loc_404D8D:                             ; CODE XREF: sub_404C10+6D↑j
.text:00404D8D                                         ; DATA XREF: sub_404C10:jpt_404C7D↑o
.text:00404D8D                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_1 ; jumptable 00404C7D case 7
.text:00404D94                 jmp     loc_404CC0
.text:00404D99 ; ---------------------------------------------------------------------------
.text:00404D99
.text:00404D99 loc_404D99:                             ; CODE XREF: sub_404C10+6D↑j
.text:00404D99                                         ; DATA XREF: sub_404C10:jpt_404C7D↑o
.text:00404D99                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_2 ; jumptable 00404C7D case 8
.text:00404DA0                 jmp     loc_404CC0
.text:00404DA5 ; ---------------------------------------------------------------------------
.text:00404DA5
.text:00404DA5 loc_404DA5:                             ; CODE XREF: sub_404C10+6D↑j
.text:00404DA5                                         ; DATA XREF: sub_404C10:jpt_404C7D↑o
.text:00404DA5                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_3 ; jumptable 00404C7D case 9
.text:00404DAC                 jmp     loc_404CC0
.text:00404DB1 ; ---------------------------------------------------------------------------
.text:00404DB1
.text:00404DB1 def_404C7D:                             ; CODE XREF: sub_404C10+67↑j
.text:00404DB1                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS ; jumptable 00404C7D default case
.text:00404DB8                 jmp     loc_404CC0
.text:00404DBD ; ---------------------------------------------------------------------------
.text:00404DBD
.text:00404DBD loc_404DBD:                             ; CODE XREF: sub_404C10+3E↑j
.text:00404DBD                 mov     [esp+2Ch+var_20], ebp
.text:00404DC1                 mov     ecx, [esp+2Ch+var_14]
.text:00404DC5                 mov     [esp+2Ch+Format], offset aSS_0 ; "%s %s\n"
.text:00404DCD                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00404DD0                 mov     [esp+2Ch+ArgList], ecx
.text:00404DD4                 call    fprintf
.text:00404DD9                 jmp     loc_404C74
.text:00404DD9 sub_404C10      endp
.text:00404DD9
.text:00404DD9 ; ---------------------------------------------------------------------------
.text:00404DDE                 align 10h
.text:00404DE0
.text:00404DE0 ; =============== S U B R O U T I N E =======================================
.text:00404DE0
.text:00404DE0
.text:00404DE0 ; int __cdecl sub_404DE0(FILE *, FILE *, int, int, char)
.text:00404DE0 sub_404DE0      proc near               ; CODE XREF: sub_401B10+164↑p
.text:00404DE0
.text:00404DE0 var_1C          = dword ptr -1Ch
.text:00404DE0 var_18          = dword ptr -18h
.text:00404DE0 var_14          = dword ptr -14h
.text:00404DE0 var_10          = dword ptr -10h
.text:00404DE0 var_C           = dword ptr -0Ch
.text:00404DE0 arg_0           = dword ptr  4
.text:00404DE0 arg_4           = dword ptr  8
.text:00404DE0 arg_8           = dword ptr  0Ch
.text:00404DE0 arg_C           = dword ptr  10h
.text:00404DE0 arg_10          = byte ptr  14h
.text:00404DE0
.text:00404DE0                 sub     esp, 1Ch
.text:00404DE3                 mov     edx, [esp+1Ch+arg_C]
.text:00404DE7                 lea     ecx, [esp+1Ch+arg_10]
.text:00404DEB                 mov     [esp+1Ch+var_C], ecx ; va_list
.text:00404DEF                 mov     ecx, [esp+1Ch+arg_8]
.text:00404DF3                 mov     [esp+1Ch+var_10], edx ; int
.text:00404DF7                 mov     edx, [esp+1Ch+arg_4]
.text:00404DFB                 mov     [esp+1Ch+var_14], ecx ; int
.text:00404DFF                 mov     [esp+1Ch+var_18], edx ; FILE *
.text:00404E03                 mov     edx, [esp+1Ch+arg_0]
.text:00404E07                 mov     [esp+1Ch+var_1C], edx ; FILE *
.text:00404E0A                 call    sub_404C10
.text:00404E0F                 add     esp, 1Ch
.text:00404E12                 retn
.text:00404E12 sub_404DE0      endp
.text:00404E12
.text:00404E12 ; ---------------------------------------------------------------------------
.text:00404E13                 align 10h
.text:00404E20
.text:00404E20 ; =============== S U B R O U T I N E =======================================
.text:00404E20
.text:00404E20
.text:00404E20 ; int __cdecl sub_404E20(int, int, char *, int, int)
.text:00404E20 sub_404E20      proc near               ; CODE XREF: sub_401B10+8F↑p
.text:00404E20
.text:00404E20 var_1C          = dword ptr -1Ch
.text:00404E20 var_18          = dword ptr -18h
.text:00404E20 var_14          = dword ptr -14h
.text:00404E20 var_10          = dword ptr -10h
.text:00404E20 var_C           = dword ptr -0Ch
.text:00404E20 var_8           = dword ptr -8
.text:00404E20 var_4           = dword ptr -4
.text:00404E20 arg_0           = dword ptr  4
.text:00404E20 arg_4           = dword ptr  8
.text:00404E20 arg_8           = dword ptr  0Ch
.text:00404E20 arg_C           = dword ptr  10h
.text:00404E20 arg_10          = dword ptr  14h
.text:00404E20
.text:00404E20                 sub     esp, 1Ch
.text:00404E23                 mov     edx, [esp+1Ch+arg_C]
.text:00404E27                 mov     [esp+1Ch+var_4], 0 ; int
.text:00404E2F                 mov     ecx, [esp+1Ch+arg_10]
.text:00404E33                 mov     [esp+1Ch+var_8], 0 ; int
.text:00404E3B                 mov     [esp+1Ch+var_10], edx ; int
.text:00404E3F                 mov     edx, [esp+1Ch+arg_4]
.text:00404E43                 mov     [esp+1Ch+var_C], ecx ; int
.text:00404E47                 mov     ecx, [esp+1Ch+arg_8]
.text:00404E4B                 mov     [esp+1Ch+var_18], edx ; int
.text:00404E4F                 mov     edx, [esp+1Ch+arg_0]
.text:00404E53                 mov     [esp+1Ch+var_14], ecx ; char *
.text:00404E57                 mov     [esp+1Ch+var_1C], edx ; int
.text:00404E5A                 call    sub_404600
.text:00404E5F                 add     esp, 1Ch
.text:00404E62                 retn
.text:00404E62 sub_404E20      endp
.text:00404E62
.text:00404E62 ; ---------------------------------------------------------------------------
.text:00404E63                 align 10h
.text:00404E70                 sub     esp, 2Ch
.text:00404E73                 mov     edx, [esp+44h]
.text:00404E77                 mov     dword ptr [esp+18h], 0
.text:00404E7F                 mov     ecx, [esp+40h]
.text:00404E83                 mov     dword ptr [esp+14h], 0
.text:00404E8B                 mov     [esp+1Ch], edx
.text:00404E8F                 mov     edx, [esp+3Ch]
.text:00404E93                 mov     [esp+10h], ecx
.text:00404E97                 mov     ecx, [esp+38h]
.text:00404E9B                 mov     [esp+0Ch], edx
.text:00404E9F                 mov     edx, [esp+34h]
.text:00404EA3                 mov     [esp+8], ecx
.text:00404EA7                 mov     [esp+4], edx
.text:00404EAB                 mov     edx, [esp+30h]
.text:00404EAF                 mov     [esp], edx
.text:00404EB2                 call    sub_403A70
.text:00404EB7                 add     esp, 2Ch
.text:00404EBA                 retn
.text:00404EBA ; ---------------------------------------------------------------------------
.text:00404EBB                 align 10h
.text:00404EC0                 sub     esp, 1Ch
.text:00404EC3                 mov     edx, [esp+2Ch]
.text:00404EC7                 mov     dword ptr [esp+18h], 0
.text:00404ECF                 mov     ecx, [esp+30h]
.text:00404ED3                 mov     dword ptr [esp+14h], 1
.text:00404EDB                 mov     [esp+0Ch], edx
.text:00404EDF                 mov     edx, [esp+24h]
.text:00404EE3                 mov     [esp+10h], ecx
.text:00404EE7                 mov     ecx, [esp+28h]
.text:00404EEB                 mov     [esp+4], edx
.text:00404EEF                 mov     edx, [esp+20h]
.text:00404EF3                 mov     [esp+8], ecx
.text:00404EF7                 mov     [esp], edx
.text:00404EFA                 call    sub_404600
.text:00404EFF                 add     esp, 1Ch
.text:00404F02                 retn
.text:00404F02 ; ---------------------------------------------------------------------------
.text:00404F03                 align 10h
.text:00404F10                 sub     esp, 2Ch
.text:00404F13                 mov     edx, [esp+44h]
.text:00404F17                 mov     dword ptr [esp+18h], 0
.text:00404F1F                 mov     ecx, [esp+40h]
.text:00404F23                 mov     dword ptr [esp+14h], 1
.text:00404F2B                 mov     [esp+1Ch], edx
.text:00404F2F                 mov     edx, [esp+3Ch]
.text:00404F33                 mov     [esp+10h], ecx
.text:00404F37                 mov     ecx, [esp+38h]
.text:00404F3B                 mov     [esp+0Ch], edx
.text:00404F3F                 mov     edx, [esp+34h]
.text:00404F43                 mov     [esp+8], ecx
.text:00404F47                 mov     [esp+4], edx
.text:00404F4B                 mov     edx, [esp+30h]
.text:00404F4F                 mov     [esp], edx
.text:00404F52                 call    sub_403A70
.text:00404F57                 add     esp, 2Ch
.text:00404F5A                 retn
.text:00404F5A ; ---------------------------------------------------------------------------
.text:00404F5B                 align 10h
.text:00404F60                 mov     edx, [esp+4]
.text:00404F64                 mov     ds:dword_4121D0, edx
.text:00404F6A                 retn
.text:00404F6A ; ---------------------------------------------------------------------------
.text:00404F6B aWriteError     db 'write error',0      ; DATA XREF: sub_404F90:loc_404FD9↓o
.text:00404F77 ; const char aSS_1[]
.text:00404F77 aSS_1           db '%s: %s',0           ; DATA XREF: sub_404F90+77↓o
.text:00404F7E ; const char aS_3[]
.text:00404F7E aS_3            db '%s',0               ; DATA XREF: sub_404F90+A0↓o
.text:00404F81 ; ---------------------------------------------------------------------------
.text:00404F81                 jmp     short sub_404F90
.text:00404F81 ; ---------------------------------------------------------------------------
.text:00404F83                 align 10h
.text:00404F90
.text:00404F90 ; =============== S U B R O U T I N E =======================================
.text:00404F90
.text:00404F90
.text:00404F90 ; void __cdecl sub_404F90()
.text:00404F90 sub_404F90      proc near               ; CODE XREF: .text:00404F81↑j
.text:00404F90                                         ; DATA XREF: sub_401B10+5E↑o
.text:00404F90
.text:00404F90 Stream          = dword ptr -2Ch
.text:00404F90 ErrorMessage    = dword ptr -28h
.text:00404F90 var_24          = dword ptr -24h
.text:00404F90 var_20          = byte ptr -20h
.text:00404F90 var_1C          = dword ptr -1Ch
.text:00404F90 var_9           = byte ptr -9
.text:00404F90
.text:00404F90                 push    esi
.text:00404F91                 push    ebx
.text:00404F92                 sub     esp, 24h
.text:00404F95                 mov     edx, ds:_iob
.text:00404F9B                 mov     ecx, [edx+2Ch]
.text:00404F9E                 lea     esi, [edx+20h]
.text:00404FA1                 shr     ecx, 5
.text:00404FA4                 mov     bl, cl
.text:00404FA6                 mov     ecx, [edx+20h]
.text:00404FA9                 and     bl, 1
.text:00404FAC                 cmp     ecx, [esi+8]
.text:00404FAF                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00404FB2                 setz    [esp+2Ch+var_9]
.text:00404FB7                 call    fclose
.text:00404FBC                 test    eax, eax
.text:00404FBE                 setnz   al
.text:00404FC1                 test    bl, bl
.text:00404FC3                 jnz     loc_405053
.text:00404FC9                 test    al, al
.text:00404FCB                 jz      short loc_405020
.text:00404FCD
.text:00404FCD loc_404FCD:                             ; CODE XREF: sub_404F90+CD↓j
.text:00404FCD                 call    _errno
.text:00404FD2                 mov     esi, [eax]
.text:00404FD4
.text:00404FD4 loc_404FD4:                             ; CODE XREF: sub_404F90+C7↓j
.text:00404FD4                 cmp     esi, 9
.text:00404FD7                 jz      short loc_405046
.text:00404FD9
.text:00404FD9 loc_404FD9:                             ; CODE XREF: sub_404F90+B8↓j
.text:00404FD9                                         ; sub_404F90+C1↓j
.text:00404FD9                 mov     [esp+2Ch+Stream], offset aWriteError ; "write error"
.text:00404FE0                 call    ds:libintl_gettext
.text:00404FE6                 mov     ebx, eax
.text:00404FE8                 mov     eax, ds:dword_4121D0
.text:00404FED                 test    eax, eax
.text:00404FEF                 jz      short loc_405026
.text:00404FF1                 mov     [esp+2Ch+Stream], eax ; char *
.text:00404FF4                 call    sub_406660
.text:00404FF9                 mov     dword ptr [esp+2Ch+var_20], eax ; char
.text:00404FFD                 mov     edx, Code
.text:00405003                 mov     [esp+2Ch+var_1C], ebx
.text:00405007                 mov     [esp+2Ch+var_24], offset aSS_1 ; "%s: %s"
.text:0040500F                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:00405013                 mov     [esp+2Ch+Stream], edx ; Code
.text:00405016                 call    sub_406920
.text:0040501B                 nop
.text:0040501C                 lea     esi, [esi+0]
.text:00405020
.text:00405020 loc_405020:                             ; CODE XREF: sub_404F90+3B↑j
.text:00405020                                         ; sub_404F90+B4↓j ...
.text:00405020                 add     esp, 24h
.text:00405023                 pop     ebx
.text:00405024                 pop     esi
.text:00405025                 retn
.text:00405026 ; ---------------------------------------------------------------------------
.text:00405026
.text:00405026 loc_405026:                             ; CODE XREF: sub_404F90+5F↑j
.text:00405026                 mov     dword ptr [esp+2Ch+var_20], ebx ; char
.text:0040502A                 mov     ebx, Code
.text:00405030                 mov     [esp+2Ch+var_24], offset aS_3 ; "%s"
.text:00405038                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:0040503C                 mov     [esp+2Ch+Stream], ebx ; Code
.text:0040503F                 call    sub_406920
.text:00405044                 jmp     short loc_405020
.text:00405046 ; ---------------------------------------------------------------------------
.text:00405046
.text:00405046 loc_405046:                             ; CODE XREF: sub_404F90+47↑j
.text:00405046                 test    bl, bl
.text:00405048                 jnz     short loc_404FD9
.text:0040504A                 cmp     [esp+2Ch+var_9], 0
.text:0040504F                 jnz     short loc_405020
.text:00405051                 jmp     short loc_404FD9
.text:00405053 ; ---------------------------------------------------------------------------
.text:00405053
.text:00405053 loc_405053:                             ; CODE XREF: sub_404F90+33↑j
.text:00405053                 xor     esi, esi
.text:00405055                 test    al, al
.text:00405057                 jz      loc_404FD4
.text:0040505D                 jmp     loc_404FCD
.text:0040505D sub_404F90      endp
.text:0040505D
.text:0040505D ; ---------------------------------------------------------------------------
.text:00405062                 align 10h
.text:00405070                 sub     esp, 0Ch
.text:00405073                 xor     edx, edx
.text:00405075                 mov     ecx, [esp+14h]
.text:00405079                 mov     [esp+8], ebx
.text:0040507D                 mov     eax, 0FFFFFFFFh
.text:00405082                 mov     ebx, [esp+10h]
.text:00405086                 div     ecx
.text:00405088                 cmp     eax, ebx
.text:0040508A                 jb      short loc_4050A9
.text:0040508C                 mov     edx, ebx
.text:0040508E                 imul    edx, ecx
.text:00405091                 mov     [esp], edx
.text:00405094                 call    malloc
.text:00405099                 test    eax, eax
.text:0040509B                 jz      short loc_4050A5
.text:0040509D
.text:0040509D loc_40509D:                             ; CODE XREF: .text:004050A7↓j
.text:0040509D                 mov     ebx, [esp+8]
.text:004050A1                 add     esp, 0Ch
.text:004050A4                 retn
.text:004050A5 ; ---------------------------------------------------------------------------
.text:004050A5
.text:004050A5 loc_4050A5:                             ; CODE XREF: .text:0040509B↑j
.text:004050A5                 test    ebx, ebx
.text:004050A7                 jz      short loc_40509D
.text:004050A9
.text:004050A9 loc_4050A9:                             ; CODE XREF: .text:0040508A↑j
.text:004050A9                 call    sub_405430
.text:004050A9 ; ---------------------------------------------------------------------------
.text:004050AE                 align 10h
.text:004050B0
.text:004050B0 ; =============== S U B R O U T I N E =======================================
.text:004050B0
.text:004050B0
.text:004050B0 ; int __cdecl sub_4050B0(size_t)
.text:004050B0 sub_4050B0      proc near               ; CODE XREF: sub_402560+143↑p
.text:004050B0                                         ; sub_402560+312↑p ...
.text:004050B0
.text:004050B0 Size            = dword ptr -0Ch
.text:004050B0 var_4           = dword ptr -4
.text:004050B0 arg_0           = dword ptr  4
.text:004050B0
.text:004050B0                 sub     esp, 0Ch
.text:004050B3                 mov     [esp+0Ch+var_4], ebx
.text:004050B7                 mov     ebx, [esp+0Ch+arg_0]
.text:004050BB                 mov     [esp+0Ch+Size], ebx ; Size
.text:004050BE                 call    malloc
.text:004050C3                 test    eax, eax
.text:004050C5                 jz      short loc_4050D0
.text:004050C7
.text:004050C7 loc_4050C7:                             ; CODE XREF: sub_4050B0+22↓j
.text:004050C7                 mov     ebx, [esp+0Ch+var_4]
.text:004050CB                 add     esp, 0Ch
.text:004050CE                 retn
.text:004050CE ; ---------------------------------------------------------------------------
.text:004050CF                 align 10h
.text:004050D0
.text:004050D0 loc_4050D0:                             ; CODE XREF: sub_4050B0+15↑j
.text:004050D0                 test    ebx, ebx
.text:004050D2                 jz      short loc_4050C7
.text:004050D4                 call    sub_405430
.text:004050D4 sub_4050B0      endp
.text:004050D4
.text:004050D4 ; ---------------------------------------------------------------------------
.text:004050D9                 align 10h
.text:004050E0
.text:004050E0 ; =============== S U B R O U T I N E =======================================
.text:004050E0
.text:004050E0
.text:004050E0 ; int __cdecl sub_4050E0(void *, int, int)
.text:004050E0 sub_4050E0      proc near               ; CODE XREF: sub_403730+B7↑p
.text:004050E0
.text:004050E0 Block           = dword ptr -1Ch
.text:004050E0 Size            = dword ptr -18h
.text:004050E0 var_8           = dword ptr -8
.text:004050E0 var_4           = dword ptr -4
.text:004050E0 arg_0           = dword ptr  4
.text:004050E0 arg_4           = dword ptr  8
.text:004050E0 arg_8           = dword ptr  0Ch
.text:004050E0
.text:004050E0                 sub     esp, 1Ch
.text:004050E3                 xor     edx, edx
.text:004050E5                 mov     eax, 0FFFFFFFFh
.text:004050EA                 mov     [esp+1Ch+var_8], ebx
.text:004050EE                 mov     ecx, [esp+1Ch+arg_0]
.text:004050F2                 mov     ebx, [esp+1Ch+arg_8]
.text:004050F6                 mov     [esp+1Ch+var_4], esi
.text:004050FA                 mov     esi, [esp+1Ch+arg_4]
.text:004050FE                 div     ebx
.text:00405100                 cmp     eax, esi
.text:00405102                 jb      short loc_405134
.text:00405104                 mov     [esp+1Ch+Block], ecx ; Block
.text:00405107                 mov     edx, esi
.text:00405109                 imul    edx, ebx
.text:0040510C                 mov     [esp+1Ch+Size], edx ; Size
.text:00405110                 call    realloc
.text:00405115                 test    eax, eax
.text:00405117                 mov     ecx, eax
.text:00405119                 jz      short loc_405130
.text:0040511B
.text:0040511B loc_40511B:                             ; CODE XREF: sub_4050E0+52↓j
.text:0040511B                 mov     ebx, [esp+1Ch+var_8]
.text:0040511F                 mov     eax, ecx
.text:00405121                 mov     esi, [esp+1Ch+var_4]
.text:00405125                 add     esp, 1Ch
.text:00405128                 retn
.text:00405128 ; ---------------------------------------------------------------------------
.text:00405129                 align 10h
.text:00405130
.text:00405130 loc_405130:                             ; CODE XREF: sub_4050E0+39↑j
.text:00405130                 test    esi, esi
.text:00405132                 jz      short loc_40511B
.text:00405134
.text:00405134 loc_405134:                             ; CODE XREF: sub_4050E0+22↑j
.text:00405134                 call    sub_405430
.text:00405134 sub_4050E0      endp
.text:00405134
.text:00405134 ; ---------------------------------------------------------------------------
.text:00405139                 align 10h
.text:00405140
.text:00405140 ; =============== S U B R O U T I N E =======================================
.text:00405140
.text:00405140
.text:00405140 ; int __cdecl sub_405140(void *, size_t)
.text:00405140 sub_405140      proc near               ; CODE XREF: .text:0040345C↑p
.text:00405140                                         ; .text:0040354F↑p ...
.text:00405140
.text:00405140 Block           = dword ptr -0Ch
.text:00405140 Size            = dword ptr -8
.text:00405140 var_4           = dword ptr -4
.text:00405140 arg_0           = dword ptr  4
.text:00405140 arg_4           = dword ptr  8
.text:00405140
.text:00405140                 sub     esp, 0Ch
.text:00405143                 mov     edx, [esp+0Ch+arg_0]
.text:00405147                 mov     [esp+0Ch+var_4], ebx
.text:0040514B                 mov     ebx, [esp+0Ch+arg_4]
.text:0040514F                 mov     [esp+0Ch+Block], edx ; Block
.text:00405152                 mov     [esp+0Ch+Size], ebx ; Size
.text:00405156                 call    realloc
.text:0040515B                 test    eax, eax
.text:0040515D                 jz      short loc_405167
.text:0040515F
.text:0040515F loc_40515F:                             ; CODE XREF: sub_405140+29↓j
.text:0040515F                 mov     ebx, [esp+0Ch+var_4]
.text:00405163                 add     esp, 0Ch
.text:00405166                 retn
.text:00405167 ; ---------------------------------------------------------------------------
.text:00405167
.text:00405167 loc_405167:                             ; CODE XREF: sub_405140+1D↑j
.text:00405167                 test    ebx, ebx
.text:00405169                 jz      short loc_40515F
.text:0040516B                 call    sub_405430
.text:0040516B sub_405140      endp
.text:0040516B
.text:00405170 ; ---------------------------------------------------------------------------
.text:00405170                 jmp     sub_4052C0
.text:00405170 ; ---------------------------------------------------------------------------
.text:00405175                 align 10h
.text:00405180                 sub     esp, 0Ch
.text:00405183                 mov     edx, [esp+14h]
.text:00405187                 mov     dword ptr [esp+8], 1
.text:0040518F                 mov     [esp+4], edx
.text:00405193                 mov     edx, [esp+10h]
.text:00405197                 mov     [esp], edx
.text:0040519A                 call    sub_4052C0
.text:0040519F                 add     esp, 0Ch
.text:004051A2                 retn
.text:004051A2 ; ---------------------------------------------------------------------------
.text:004051A3                 align 10h
.text:004051B0                 sub     esp, 1Ch
.text:004051B3                 mov     [esp+18h], ebx
.text:004051B7                 mov     ebx, [esp+20h]
.text:004051BB                 mov     [esp], ebx
.text:004051BE                 call    malloc
.text:004051C3                 test    eax, eax
.text:004051C5                 jz      short loc_4051E3
.text:004051C7
.text:004051C7 loc_4051C7:                             ; CODE XREF: .text:004051E5↓j
.text:004051C7                 mov     [esp+8], ebx
.text:004051CB                 mov     dword ptr [esp+4], 0
.text:004051D3                 mov     [esp], eax
.text:004051D6                 call    memset
.text:004051DB                 mov     ebx, [esp+18h]
.text:004051DF                 add     esp, 1Ch
.text:004051E2                 retn
.text:004051E3 ; ---------------------------------------------------------------------------
.text:004051E3
.text:004051E3 loc_4051E3:                             ; CODE XREF: .text:004051C5↑j
.text:004051E3                 test    ebx, ebx
.text:004051E5                 jz      short loc_4051C7
.text:004051E7                 call    sub_405430
.text:004051E7 ; ---------------------------------------------------------------------------
.text:004051EC                 align 10h
.text:004051F0                 sub     esp, 0Ch
.text:004051F3                 xor     edx, edx
.text:004051F5                 mov     ecx, [esp+14h]
.text:004051F9                 mov     [esp+8], ebx
.text:004051FD                 mov     eax, 0FFFFFFFFh
.text:00405202                 mov     ebx, [esp+10h]
.text:00405206                 div     ecx
.text:00405208                 cmp     eax, ebx
.text:0040520A                 jb      short loc_405228
.text:0040520C                 mov     [esp+4], ecx
.text:00405210                 mov     [esp], ebx
.text:00405213                 call    calloc
.text:00405218                 test    eax, eax
.text:0040521A                 jz      short loc_405224
.text:0040521C
.text:0040521C loc_40521C:                             ; CODE XREF: .text:00405226↓j
.text:0040521C                 mov     ebx, [esp+8]
.text:00405220                 add     esp, 0Ch
.text:00405223                 retn
.text:00405224 ; ---------------------------------------------------------------------------
.text:00405224
.text:00405224 loc_405224:                             ; CODE XREF: .text:0040521A↑j
.text:00405224                 test    ebx, ebx
.text:00405226                 jz      short loc_40521C
.text:00405228
.text:00405228 loc_405228:                             ; CODE XREF: .text:0040520A↑j
.text:00405228                 call    sub_405430
.text:00405228 ; ---------------------------------------------------------------------------
.text:0040522D                 align 10h
.text:00405230                 sub     esp, 1Ch
.text:00405233                 mov     [esp+18h], ebx
.text:00405237                 mov     ebx, [esp+24h]
.text:0040523B                 mov     [esp], ebx
.text:0040523E                 call    malloc
.text:00405243                 test    eax, eax
.text:00405245                 mov     edx, eax
.text:00405247                 jz      short loc_405265
.text:00405249
.text:00405249 loc_405249:                             ; CODE XREF: .text:00405267↓j
.text:00405249                 mov     [esp+8], ebx
.text:0040524D                 mov     ecx, [esp+20h]
.text:00405251                 mov     [esp], edx
.text:00405254                 mov     [esp+4], ecx
.text:00405258                 call    memcpy
.text:0040525D                 mov     ebx, [esp+18h]
.text:00405261                 add     esp, 1Ch
.text:00405264                 retn
.text:00405265 ; ---------------------------------------------------------------------------
.text:00405265
.text:00405265 loc_405265:                             ; CODE XREF: .text:00405247↑j
.text:00405265                 test    ebx, ebx
.text:00405267                 jz      short loc_405249
.text:00405269                 call    sub_405430
.text:00405269 ; ---------------------------------------------------------------------------
.text:0040526E                 align 10h
.text:00405270                 sub     esp, 1Ch
.text:00405273                 mov     [esp+18h], esi
.text:00405277                 mov     esi, [esp+20h]
.text:0040527B                 mov     [esp+14h], ebx
.text:0040527F                 mov     [esp], esi
.text:00405282                 call    strlen
.text:00405287                 lea     ebx, [eax+1]
.text:0040528A                 mov     [esp], ebx
.text:0040528D                 call    malloc
.text:00405292                 test    eax, eax
.text:00405294                 jz      short loc_4052B2
.text:00405296
.text:00405296 loc_405296:                             ; CODE XREF: .text:004052B4↓j
.text:00405296                 mov     [esp+8], ebx
.text:0040529A                 mov     [esp+4], esi
.text:0040529E                 mov     [esp], eax
.text:004052A1                 call    memcpy
.text:004052A6                 mov     ebx, [esp+14h]
.text:004052AA                 mov     esi, [esp+18h]
.text:004052AE                 add     esp, 1Ch
.text:004052B1                 retn
.text:004052B2 ; ---------------------------------------------------------------------------
.text:004052B2
.text:004052B2 loc_4052B2:                             ; CODE XREF: .text:00405294↑j
.text:004052B2                 test    ebx, ebx
.text:004052B4                 jz      short loc_405296
.text:004052B6                 call    sub_405430
.text:004052B6 ; ---------------------------------------------------------------------------
.text:004052BB                 align 10h
.text:004052C0
.text:004052C0 ; =============== S U B R O U T I N E =======================================
.text:004052C0
.text:004052C0
.text:004052C0 ; int __cdecl sub_4052C0(void *, int, int)
.text:004052C0 sub_4052C0      proc near               ; CODE XREF: .text:00405170↑j
.text:004052C0                                         ; .text:0040519A↑p
.text:004052C0
.text:004052C0 Block           = dword ptr -1Ch
.text:004052C0 Size            = dword ptr -18h
.text:004052C0 var_C           = dword ptr -0Ch
.text:004052C0 var_8           = dword ptr -8
.text:004052C0 var_4           = dword ptr -4
.text:004052C0 arg_0           = dword ptr  4
.text:004052C0 arg_4           = dword ptr  8
.text:004052C0 arg_8           = dword ptr  0Ch
.text:004052C0
.text:004052C0                 sub     esp, 1Ch
.text:004052C3                 mov     [esp+1Ch+var_8], esi
.text:004052C7                 mov     esi, [esp+1Ch+arg_0]
.text:004052CB                 mov     [esp+1Ch+var_4], edi
.text:004052CF                 mov     edi, [esp+1Ch+arg_4]
.text:004052D3                 test    esi, esi
.text:004052D5                 mov     [esp+1Ch+var_C], ebx
.text:004052D9                 mov     ecx, [edi]
.text:004052DB                 mov     ebx, [esp+1Ch+arg_8]
.text:004052DF                 jz      short loc_405320
.text:004052E1                 xor     edx, edx
.text:004052E3                 mov     eax, 7FFFFFFFh
.text:004052E8                 div     ebx
.text:004052EA                 cmp     eax, ecx
.text:004052EC                 jb      short loc_405319
.text:004052EE                 add     ecx, ecx
.text:004052F0
.text:004052F0 loc_4052F0:                             ; CODE XREF: sub_4052C0+62↓j
.text:004052F0                                         ; sub_4052C0+71↓j ...
.text:004052F0                 mov     [edi], ecx
.text:004052F2                 imul    ebx, ecx
.text:004052F5                 mov     [esp+1Ch+Block], esi ; Block
.text:004052F8                 mov     [esp+1Ch+Size], ebx ; Size
.text:004052FC                 call    realloc
.text:00405301                 test    eax, eax
.text:00405303                 jz      short loc_405315
.text:00405305
.text:00405305 loc_405305:                             ; CODE XREF: sub_4052C0+57↓j
.text:00405305                 mov     ebx, [esp+1Ch+var_C]
.text:00405309                 mov     esi, [esp+1Ch+var_8]
.text:0040530D                 mov     edi, [esp+1Ch+var_4]
.text:00405311                 add     esp, 1Ch
.text:00405314                 retn
.text:00405315 ; ---------------------------------------------------------------------------
.text:00405315
.text:00405315 loc_405315:                             ; CODE XREF: sub_4052C0+43↑j
.text:00405315                 test    ebx, ebx
.text:00405317                 jz      short loc_405305
.text:00405319
.text:00405319 loc_405319:                             ; CODE XREF: sub_4052C0+2C↑j
.text:00405319                 call    sub_405430
.text:00405319 ; ---------------------------------------------------------------------------
.text:0040531E                 align 10h
.text:00405320
.text:00405320 loc_405320:                             ; CODE XREF: sub_4052C0+1F↑j
.text:00405320                 test    ecx, ecx
.text:00405322                 jnz     short loc_4052F0
.text:00405324                 xor     edx, edx
.text:00405326                 mov     eax, 40h ; '@'
.text:0040532B                 div     ebx
.text:0040532D                 test    eax, eax
.text:0040532F                 mov     ecx, eax
.text:00405331                 jnz     short loc_4052F0
.text:00405333                 mov     ecx, 1
.text:00405338                 jmp     short loc_4052F0
.text:00405338 sub_4052C0      endp
.text:00405338
.text:00405338 ; ---------------------------------------------------------------------------
.text:0040533A                 align 10h
.text:00405340
.text:00405340 ; =============== S U B R O U T I N E =======================================
.text:00405340
.text:00405340
.text:00405340 ; int __cdecl sub_405340(char *)
.text:00405340 sub_405340      proc near               ; CODE XREF: .text:004035BA↑p
.text:00405340
.text:00405340 name            = dword ptr -1Ch
.text:00405340 Str2            = dword ptr -18h
.text:00405340 Size            = dword ptr -14h
.text:00405340 var_8           = dword ptr -8
.text:00405340 var_4           = dword ptr -4
.text:00405340 arg_0           = dword ptr  4
.text:00405340
.text:00405340                 sub     esp, 1Ch
.text:00405343                 mov     edx, [esp+1Ch+arg_0]
.text:00405347                 mov     [esp+1Ch+var_8], ebx
.text:0040534B                 mov     [esp+1Ch+var_4], esi
.text:0040534F                 xor     esi, esi
.text:00405351                 mov     [esp+1Ch+name], edx ; name
.text:00405354                 call    gethostbyname
.text:00405359                 sub     esp, 4
.text:0040535C                 mov     ebx, eax
.text:0040535E                 test    eax, eax
.text:00405360                 jz      short loc_405379
.text:00405362                 cmp     word ptr [eax+8], 2
.text:00405367                 jz      short loc_405387
.text:00405369
.text:00405369 loc_405369:                             ; CODE XREF: sub_405340+5B↓j
.text:00405369                                         ; sub_405340+6D↓j ...
.text:00405369                 test    ebx, ebx
.text:0040536B                 jz      short loc_405379
.text:0040536D                 mov     esi, [ebx]
.text:0040536F                 mov     [esp+1Ch+name], esi ; String
.text:00405372                 call    _strdup
.text:00405377                 mov     esi, eax
.text:00405379
.text:00405379 loc_405379:                             ; CODE XREF: sub_405340+20↑j
.text:00405379                                         ; sub_405340+2B↑j ...
.text:00405379                 mov     eax, esi
.text:0040537B                 mov     ebx, [esp+1Ch+var_8]
.text:0040537F                 mov     esi, [esp+1Ch+var_4]
.text:00405383                 add     esp, 1Ch
.text:00405386                 retn
.text:00405387 ; ---------------------------------------------------------------------------
.text:00405387
.text:00405387 loc_405387:                             ; CODE XREF: sub_405340+27↑j
.text:00405387                 mov     edx, [eax+0Ch]
.text:0040538A                 mov     ecx, [edx]
.text:0040538C                 mov     edx, [ecx]
.text:0040538E                 mov     [esp+1Ch+name], edx ; in
.text:00405391                 call    inet_ntoa
.text:00405396                 sub     esp, 4
.text:00405399                 test    eax, eax
.text:0040539B                 jz      short loc_405369
.text:0040539D                 mov     [esp+1Ch+Str2], eax ; Str2
.text:004053A1                 mov     ecx, [ebx]
.text:004053A3                 mov     [esp+1Ch+name], ecx ; Str1
.text:004053A6                 call    strcmp
.text:004053AB                 test    eax, eax
.text:004053AD                 jnz     short loc_405369
.text:004053AF                 movsx   esi, word ptr [ebx+0Ah]
.text:004053B3                 mov     [esp+1Ch+name], esi ; Size
.text:004053B6                 call    malloc
.text:004053BB                 test    eax, eax
.text:004053BD                 mov     esi, eax
.text:004053BF                 jz      short loc_405379
.text:004053C1                 movsx   edx, word ptr [ebx+0Ah]
.text:004053C5                 mov     eax, [ebx+0Ch]
.text:004053C8                 mov     ecx, [eax]
.text:004053CA                 mov     [esp+1Ch+Size], edx ; Size
.text:004053CE                 mov     [esp+1Ch+name], esi ; void *
.text:004053D1                 mov     [esp+1Ch+Str2], ecx ; Src
.text:004053D5                 call    memcpy
.text:004053DA                 movsx   ecx, word ptr [ebx+8]
.text:004053DE                 mov     [esp+1Ch+Size], ecx ; type
.text:004053E2                 movsx   edx, word ptr [ebx+0Ah]
.text:004053E6                 mov     [esp+1Ch+name], esi ; addr
.text:004053E9                 mov     [esp+1Ch+Str2], edx ; len
.text:004053ED                 call    gethostbyaddr
.text:004053F2                 sub     esp, 0Ch
.text:004053F5                 mov     ebx, eax
.text:004053F7                 mov     [esp+1Ch+name], esi ; Block
.text:004053FA                 call    free
.text:004053FF                 jmp     loc_405369
.text:004053FF sub_405340      endp
.text:004053FF
.text:004053FF ; ---------------------------------------------------------------------------
.text:00405404                 align 10h
.text:00405410 aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: sub_405430+3↓o
.text:00405421 ; const char aS_0[]
.text:00405421 aS_0            db '%s',0               ; DATA XREF: sub_405430+10↓o
.text:00405424                 align 10h
.text:00405430
.text:00405430 ; =============== S U B R O U T I N E =======================================
.text:00405430
.text:00405430 ; Attributes: noreturn
.text:00405430
.text:00405430 sub_405430      proc near               ; CODE XREF: sub_402FC0:loc_4031DD↑p
.text:00405430                                         ; .text:loc_4050A9↑p ...
.text:00405430
.text:00405430 Code            = dword ptr -1Ch
.text:00405430 ErrorMessage    = dword ptr -18h
.text:00405430 var_14          = dword ptr -14h
.text:00405430 var_10          = byte ptr -10h
.text:00405430
.text:00405430                 sub     esp, 1Ch
.text:00405433                 mov     [esp+1Ch+Code], offset aMemoryExhauste ; "memory exhausted"
.text:0040543A                 call    ds:libintl_gettext
.text:00405440                 mov     [esp+1Ch+var_14], offset aS_0 ; "%s"
.text:00405448                 mov     edx, Code
.text:0040544E                 mov     [esp+1Ch+ErrorMessage], 0 ; ErrorMessage
.text:00405456                 mov     dword ptr [esp+1Ch+var_10], eax ; char
.text:0040545A                 mov     [esp+1Ch+Code], edx ; Code
.text:0040545D                 call    sub_406920
.text:00405462                 call    abort
.text:00405462 sub_405430      endp
.text:00405462
.text:00405462 ; ---------------------------------------------------------------------------
.text:00405467                 align 10h
.text:00405470
.text:00405470 ; =============== S U B R O U T I N E =======================================
.text:00405470
.text:00405470
.text:00405470 sub_405470      proc near               ; CODE XREF: sub_402560+2D3↑p
.text:00405470                                         ; sub_402560+452↑p ...
.text:00405470
.text:00405470 var_1C          = dword ptr -1Ch
.text:00405470 var_18          = dword ptr -18h
.text:00405470 var_14          = dword ptr -14h
.text:00405470 var_10          = dword ptr -10h
.text:00405470 arg_0           = dword ptr  4
.text:00405470 arg_4           = dword ptr  8
.text:00405470 arg_8           = dword ptr  0Ch
.text:00405470
.text:00405470                 push    edi
.text:00405471                 push    esi
.text:00405472                 push    ebx
.text:00405473                 sub     esp, 10h
.text:00405476                 mov     esi, [esp+1Ch+arg_4]
.text:0040547A                 mov     edx, [esp+1Ch+arg_8]
.text:0040547E                 mov     ebx, [esp+1Ch+arg_0]
.text:00405482                 test    esi, esi
.text:00405484                 mov     byte ptr [edx+15h], 0
.text:00405488                 lea     edi, [edx+15h]
.text:0040548B                 js      short loc_4054E0
.text:0040548D                 lea     esi, [esi+0]
.text:00405490
.text:00405490 loc_405490:                             ; CODE XREF: sub_405470+65↓j
.text:00405490                 mov     [esp+1Ch+var_1C], ebx
.text:00405493                 dec     edi
.text:00405494                 mov     [esp+1Ch+var_18], esi
.text:00405498                 mov     [esp+1Ch+var_14], 0Ah
.text:004054A0                 mov     [esp+1Ch+var_10], 0
.text:004054A8                 call    sub_40F5E0
.text:004054AD                 add     al, 30h ; '0'
.text:004054AF                 mov     [edi], al
.text:004054B1                 mov     [esp+1Ch+var_1C], ebx
.text:004054B4                 mov     [esp+1Ch+var_18], esi
.text:004054B8                 mov     [esp+1Ch+var_14], 0Ah
.text:004054C0                 mov     [esp+1Ch+var_10], 0
.text:004054C8                 call    sub_40F7A0
.text:004054CD                 mov     ebx, eax
.text:004054CF                 mov     esi, edx
.text:004054D1                 mov     eax, edx
.text:004054D3                 or      eax, ebx
.text:004054D5                 jnz     short loc_405490
.text:004054D7
.text:004054D7 loc_4054D7:                             ; CODE XREF: sub_405470+BB↓j
.text:004054D7                 add     esp, 10h
.text:004054DA                 mov     eax, edi
.text:004054DC                 pop     ebx
.text:004054DD                 pop     esi
.text:004054DE                 pop     edi
.text:004054DF                 retn
.text:004054E0 ; ---------------------------------------------------------------------------
.text:004054E0
.text:004054E0 loc_4054E0:                             ; CODE XREF: sub_405470+1B↑j
.text:004054E0                                         ; sub_405470+B5↓j
.text:004054E0                 mov     [esp+1Ch+var_1C], ebx
.text:004054E3                 dec     edi
.text:004054E4                 mov     [esp+1Ch+var_18], esi
.text:004054E8                 mov     [esp+1Ch+var_14], 0Ah
.text:004054F0                 mov     [esp+1Ch+var_10], 0
.text:004054F8                 call    sub_40F5E0
.text:004054FD                 mov     cl, 30h ; '0'
.text:004054FF                 sub     cl, al
.text:00405501                 mov     [edi], cl
.text:00405503                 mov     [esp+1Ch+var_1C], ebx
.text:00405506                 mov     [esp+1Ch+var_18], esi
.text:0040550A                 mov     [esp+1Ch+var_14], 0Ah
.text:00405512                 mov     [esp+1Ch+var_10], 0
.text:0040551A                 call    sub_40F7A0
.text:0040551F                 mov     ebx, eax
.text:00405521                 mov     esi, edx
.text:00405523                 or      edx, ebx
.text:00405525                 jnz     short loc_4054E0
.text:00405527                 dec     edi
.text:00405528                 mov     byte ptr [edi], 2Dh ; '-'
.text:0040552B                 jmp     short loc_4054D7
.text:0040552B sub_405470      endp
.text:0040552B
.text:0040552B ; ---------------------------------------------------------------------------
.text:0040552D                 align 10h
.text:00405530 aLiteral        db 'literal',0          ; DATA XREF: .text:00405570↓o
.text:00405538 aShell          db 'shell',0            ; DATA XREF: .text:00405574↓o
.text:0040553E aShellAlways    db 'shell-always',0     ; DATA XREF: .text:00405578↓o
.text:0040554B aC              db 'c',0                ; DATA XREF: .text:0040557C↓o
.text:0040554D aEscape         db 'escape',0           ; DATA XREF: .text:00405580↓o
.text:00405554 aLocale         db 'locale',0           ; DATA XREF: .text:00405584↓o
.text:0040555B aClocale        db 'clocale',0          ; DATA XREF: .text:00405588↓o
.text:00405563                 align 10h
.text:00405570                 dd offset aLiteral      ; "literal"
.text:00405574                 dd offset aShell        ; "shell"
.text:00405578                 dd offset aShellAlways  ; "shell-always"
.text:0040557C                 dd offset aC            ; "c"
.text:00405580                 dd offset aEscape       ; "escape"
.text:00405584                 dd offset aLocale       ; "locale"
.text:00405588                 dd offset aClocale      ; "clocale"
.text:0040558C                 dd 2 dup(0)
.text:00405594                 dd 1, 2, 3, 4, 5, 6
.text:004055AC asc_4055AC:                             ; DATA XREF: sub_4055C0+7E↓o
.text:004055AC                                         ; sub_4055C0+A39↓o ...
.text:004055AC                 text "UTF-16LE", '"',27h,'`'
.text:004055B2                 align 10h
.text:004055C0
.text:004055C0 ; =============== S U B R O U T I N E =======================================
.text:004055C0
.text:004055C0
.text:004055C0 ; int __cdecl sub_4055C0(int, int, char *Str, int, int, int)
.text:004055C0 sub_4055C0      proc near               ; CODE XREF: sub_4055C0+43A↓p
.text:004055C0                                         ; .text:00406183↓p ...
.text:004055C0
.text:004055C0 C               = dword ptr -4Ch
.text:004055C0 Type            = dword ptr -48h
.text:004055C0 SizeInBytes     = dword ptr -44h
.text:004055C0 State           = dword ptr -40h
.text:004055C0 var_3C          = dword ptr -3Ch
.text:004055C0 var_38          = dword ptr -38h
.text:004055C0 var_34          = dword ptr -34h
.text:004055C0 var_30          = dword ptr -30h
.text:004055C0 var_29          = byte ptr -29h
.text:004055C0 var_28          = dword ptr -28h
.text:004055C0 var_22          = byte ptr -22h
.text:004055C0 var_21          = byte ptr -21h
.text:004055C0 var_20          = dword ptr -20h
.text:004055C0 var_1C          = dword ptr -1Ch
.text:004055C0 var_18          = mbstate_t ptr -18h
.text:004055C0 arg_0           = dword ptr  4
.text:004055C0 arg_4           = dword ptr  8
.text:004055C0 Str             = dword ptr  0Ch
.text:004055C0 arg_C           = dword ptr  10h
.text:004055C0 arg_10          = dword ptr  14h
.text:004055C0 arg_14          = dword ptr  18h
.text:004055C0
.text:004055C0                 push    ebp
.text:004055C1                 push    edi
.text:004055C2                 push    esi
.text:004055C3                 push    ebx
.text:004055C4                 sub     esp, 3Ch
.text:004055C7                 mov     edx, ds:__mb_cur_max
.text:004055CD                 mov     [esp+4Ch+var_34], 0
.text:004055D5                 mov     [esp+4Ch+var_1C], 0
.text:004055DD                 cmp     dword ptr [edx], 1
.text:004055E0                 mov     [esp+4Ch+var_20], 0
.text:004055E8                 mov     [esp+4Ch+var_21], 0
.text:004055ED                 setz    [esp+4Ch+var_22]
.text:004055F2                 cmp     [esp+4Ch+arg_10], 6 ; switch 7 cases
.text:004055F7                 ja      short def_4055FD ; jumptable 004055FD default case, cases 0,1
.text:004055F9                 mov     edx, [esp+4Ch+arg_10]
.text:004055FD                 jmp     ds:jpt_4055FD[edx*4] ; switch jump
.text:004055FD ; ---------------------------------------------------------------------------
.text:00405604 jpt_4055FD      dd offset def_4055FD    ; DATA XREF: sub_4055C0+3D↑r
.text:00405604                 dd offset def_4055FD    ; jump table for switch statement
.text:00405604                 dd offset loc_405F45
.text:00405604                 dd offset loc_405620
.text:00405604                 dd offset loc_405F6B
.text:00405604                 dd offset loc_405F75
.text:00405604                 dd offset loc_405F75
.text:00405620 ; ---------------------------------------------------------------------------
.text:00405620
.text:00405620 loc_405620:                             ; CODE XREF: sub_4055C0+3D↑j
.text:00405620                                         ; DATA XREF: sub_4055C0:jpt_4055FD↑o
.text:00405620                 mov     eax, [esp+4Ch+arg_4] ; jumptable 004055FD case 3
.text:00405624                 cmp     [esp+4Ch+var_34], eax
.text:00405628                 jnb     short loc_405631
.text:0040562A                 mov     ebx, [esp+4Ch+arg_0]
.text:0040562E                 mov     byte ptr [ebx], 22h ; '"'
.text:00405631
.text:00405631 loc_405631:                             ; CODE XREF: sub_4055C0+68↑j
.text:00405631                 mov     [esp+4Ch+var_34], 1
.text:00405639                 mov     [esp+4Ch+var_21], 1
.text:0040563E                 mov     [esp+4Ch+var_1C], offset asc_4055AC ; "\"'`"
.text:00405646
.text:00405646 loc_405646:                             ; CODE XREF: sub_4055C0+9A6↓j
.text:00405646                 mov     [esp+4Ch+var_20], 1
.text:0040564E
.text:0040564E def_4055FD:                             ; CODE XREF: sub_4055C0+37↑j
.text:0040564E                                         ; sub_4055C0+3D↑j ...
.text:0040564E                 xor     ebp, ebp        ; jumptable 004055FD default case, cases 0,1
.text:00405650
.text:00405650 loc_405650:                             ; CODE XREF: sub_4055C0+3DB↓j
.text:00405650                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00405655                 jz      loc_405F37
.text:0040565B                 cmp     ebp, [esp+4Ch+arg_C]
.text:0040565F
.text:0040565F loc_40565F:                             ; CODE XREF: sub_4055C0+980↓j
.text:0040565F                 jz      loc_405ECE
.text:00405665                 cmp     [esp+4Ch+var_21], 0
.text:0040566A                 jz      short loc_4056B0
.text:0040566C                 mov     esi, [esp+4Ch+var_20]
.text:00405670                 test    esi, esi
.text:00405672                 jz      short loc_4056B0
.text:00405674                 mov     ecx, [esp+4Ch+var_20]
.text:00405678                 lea     edi, [ecx+ebp]
.text:0040567B                 cmp     edi, [esp+4Ch+arg_C]
.text:0040567F                 ja      short loc_4056B0
.text:00405681                 cld
.text:00405682                 mov     ebx, [esp+4Ch+Str]
.text:00405686                 mov     edi, [esp+4Ch+var_1C]
.text:0040568A                 add     ebx, ebp
.text:0040568C                 mov     esi, ebx
.text:0040568E                 cmp     ecx, ecx
.text:00405690                 repe cmpsb
.text:00405692                 jnz     short loc_4056B0
.text:00405694                 mov     edx, [esp+4Ch+arg_4]
.text:00405698                 cmp     [esp+4Ch+var_34], edx
.text:0040569C                 jnb     short loc_4056AA
.text:0040569E                 mov     ecx, [esp+4Ch+arg_0]
.text:004056A2                 mov     eax, [esp+4Ch+var_34]
.text:004056A6                 mov     byte ptr [eax+ecx], 5Ch ; '\'
.text:004056AA
.text:004056AA loc_4056AA:                             ; CODE XREF: sub_4055C0+DC↑j
.text:004056AA                 inc     [esp+4Ch+var_34]
.text:004056AE                 mov     esi, esi
.text:004056B0
.text:004056B0 loc_4056B0:                             ; CODE XREF: sub_4055C0+AA↑j
.text:004056B0                                         ; sub_4055C0+B2↑j ...
.text:004056B0                 mov     edi, [esp+4Ch+Str]
.text:004056B4                 movzx   ebx, byte ptr [ebp+edi+0]
.text:004056B9                 movzx   eax, bl
.text:004056BC                 cmp     eax, 7Eh        ; switch 127 cases
.text:004056BF                 ja      def_4056C5      ; jumptable 004056C5 default case, cases 1-6,14-31,64
.text:004056C5                 jmp     ds:jpt_4056C5[eax*4] ; switch jump
.text:004056C5 ; ---------------------------------------------------------------------------
.text:004056CC jpt_4056C5      dd offset loc_4058C8, offset def_4056C5, offset def_4056C5
.text:004056CC                                         ; DATA XREF: sub_4055C0+105↑r
.text:004056CC                 dd offset def_4056C5, offset def_4056C5, offset def_4056C5 ; jump table for switch statement
.text:004056CC                 dd offset def_4056C5, offset loc_4059A0, offset loc_4059BE
.text:004056CC                 dd offset loc_4059C2, offset loc_405A07, offset loc_405A0B
.text:004056CC                 dd offset loc_405A0F, offset loc_405A13, offset def_4056C5
.text:004056CC                 dd offset def_4056C5, offset def_4056C5, offset def_4056C5
.text:004056CC                 dd offset def_4056C5, offset def_4056C5, offset def_4056C5
.text:004056CC                 dd offset def_4056C5, offset def_4056C5, offset def_4056C5
.text:004056CC                 dd offset def_4056C5, offset def_4056C5, offset def_4056C5
.text:004056CC                 dd offset def_4056C5, offset def_4056C5, offset def_4056C5
.text:004056CC                 dd offset def_4056C5, offset def_4056C5, offset loc_405E98
.text:004056CC                 dd offset loc_405E98, offset loc_405E98, offset loc_405EBA
.text:004056CC                 dd offset loc_405E98, offset def_405AC2, offset loc_405E98
.text:004056CC                 dd offset loc_405A17, offset loc_405E98, offset loc_405E98
.text:004056CC                 dd offset loc_405E98, offset def_405AC2, offset def_405AC2
.text:004056CC                 dd offset def_405AC2, offset def_405AC2, offset def_405AC2
.text:004056CC                 dd offset def_405AC2, offset def_405AC2, offset def_405AC2
.text:004056CC                 dd offset def_405AC2, offset def_405AC2, offset def_405AC2
.text:004056CC                 dd offset def_405AC2, offset def_405AC2, offset def_405AC2
.text:004056CC                 dd offset def_405AC2, offset def_405AC2, offset loc_405E98
.text:004056CC                 dd offset loc_405E98, offset loc_405E98, offset loc_405E98
.text:004056CC                 dd offset loc_405A7C, offset def_4056C5, offset def_405AC2
.text:004056CC                 dd offset def_405AC2, offset def_405AC2, offset def_405AC2
.text:004056CC                 dd offset def_405AC2, offset def_405AC2, offset def_405AC2
.text:004056CC                 dd offset def_405AC2, offset def_405AC2, offset def_405AC2
.text:004056CC                 dd offset def_405AC2, offset def_405AC2, offset def_405AC2
.text:004056CC                 dd offset def_405AC2, offset def_405AC2, offset def_405AC2
.text:004056CC                 dd offset def_405AC2, offset def_405AC2, offset def_405AC2
.text:004056CC                 dd offset def_405AC2, offset def_405AC2, offset def_405AC2
.text:004056CC                 dd offset def_405AC2, offset def_405AC2, offset def_405AC2
.text:004056CC                 dd offset def_405AC2, offset loc_405E98, offset loc_405E91
.text:004056CC                 dd offset def_405AC2, offset loc_405E98, offset def_405AC2
.text:004056CC                 dd offset loc_405E98, offset def_405AC2, offset def_405AC2
.text:004056CC                 dd offset def_405AC2, offset def_405AC2, offset def_405AC2
.text:004056CC                 dd offset def_405AC2, offset def_405AC2, offset def_405AC2
.text:004056CC                 dd offset def_405AC2, offset def_405AC2, offset def_405AC2
.text:004056CC                 dd offset def_405AC2, offset def_405AC2, offset def_405AC2
.text:004056CC                 dd offset def_405AC2, offset def_405AC2, offset def_405AC2
.text:004056CC                 dd offset def_405AC2, offset def_405AC2, offset def_405AC2
.text:004056CC                 dd offset def_405AC2, offset def_405AC2, offset def_405AC2
.text:004056CC                 dd offset def_405AC2, offset def_405AC2, offset def_405AC2
.text:004056CC                 dd offset loc_405EA8, offset loc_405E98, offset loc_405EA8
.text:004056CC                 dd offset loc_405EBA
.text:004058C8 ; ---------------------------------------------------------------------------
.text:004058C8
.text:004058C8 loc_4058C8:                             ; CODE XREF: sub_4055C0+105↑j
.text:004058C8                                         ; DATA XREF: sub_4055C0:jpt_4056C5↑o
.text:004058C8                 cmp     [esp+4Ch+var_21], 0 ; jumptable 004056C5 case 0
.text:004058CD                 lea     eax, [ebp+1]
.text:004058D0                 jz      loc_405980
.text:004058D6                 mov     esi, [esp+4Ch+arg_4]
.text:004058DA                 cmp     [esp+4Ch+var_34], esi
.text:004058DE                 jnb     short loc_4058EC
.text:004058E0                 mov     eax, [esp+4Ch+arg_0]
.text:004058E4                 mov     ebx, [esp+4Ch+var_34]
.text:004058E8                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:004058EC
.text:004058EC loc_4058EC:                             ; CODE XREF: sub_4055C0+31E↑j
.text:004058EC                 inc     [esp+4Ch+var_34]
.text:004058F0                 mov     edx, [esp+4Ch+arg_4]
.text:004058F4                 cmp     [esp+4Ch+var_34], edx
.text:004058F8                 jnb     short loc_405906
.text:004058FA                 mov     edi, [esp+4Ch+arg_0]
.text:004058FE                 mov     ecx, [esp+4Ch+var_34]
.text:00405902                 mov     byte ptr [ecx+edi], 30h ; '0'
.text:00405906
.text:00405906 loc_405906:                             ; CODE XREF: sub_4055C0+338↑j
.text:00405906                 inc     [esp+4Ch+var_34]
.text:0040590A                 mov     esi, [esp+4Ch+arg_4]
.text:0040590E                 cmp     [esp+4Ch+var_34], esi
.text:00405912                 jnb     short loc_405920
.text:00405914                 mov     ebx, [esp+4Ch+arg_0]
.text:00405918                 mov     eax, [esp+4Ch+var_34]
.text:0040591C                 mov     byte ptr [eax+ebx], 30h ; '0'
.text:00405920
.text:00405920 loc_405920:                             ; CODE XREF: sub_4055C0+352↑j
.text:00405920                 inc     [esp+4Ch+var_34]
.text:00405924                 mov     bl, 30h ; '0'
.text:00405926                 lea     esi, [esi+0]
.text:00405929                 lea     edi, [edi+0]
.text:00405930
.text:00405930 def_405AC2:                             ; CODE XREF: sub_4055C0+105↑j
.text:00405930                                         ; sub_4055C0+463↓j ...
.text:00405930                 cmp     [esp+4Ch+var_21], 0 ; jumptable 004056C5 cases 37,43-58,65-90,93,95,97-122
.text:00405930                                         ; jumptable 00405AC2 default case, cases 34-38,42-44,46,48-59
.text:00405935                 lea     eax, [ebp+1]
.text:00405938                 jz      short loc_405980
.text:0040593A                 mov     cl, bl
.text:0040593C                 mov     edi, [esp+4Ch+arg_14]
.text:00405940                 mov     esi, 1
.text:00405945                 shr     cl, 5
.text:00405948                 movzx   edx, cl
.text:0040594B                 mov     ecx, ebx
.text:0040594D                 and     ecx, 1Fh
.text:00405950                 shl     esi, cl
.text:00405952                 test    [edi+edx*4+4], esi
.text:00405956                 jz      short loc_405972
.text:00405958
.text:00405958 loc_405958:                             ; CODE XREF: sub_4055C0+3FC↓j
.text:00405958                 mov     edx, [esp+4Ch+arg_4]
.text:0040595C                 cmp     [esp+4Ch+var_34], edx
.text:00405960                 jnb     short loc_40596E
.text:00405962                 mov     edi, [esp+4Ch+arg_0]
.text:00405966                 mov     esi, [esp+4Ch+var_34]
.text:0040596A                 mov     byte ptr [esi+edi], 5Ch ; '\'
.text:0040596E
.text:0040596E loc_40596E:                             ; CODE XREF: sub_4055C0+3A0↑j
.text:0040596E                 inc     [esp+4Ch+var_34]
.text:00405972
.text:00405972 loc_405972:                             ; CODE XREF: sub_4055C0+396↑j
.text:00405972                 lea     eax, [ebp+1]
.text:00405975                 lea     esi, [esi+0]
.text:00405979                 lea     edi, [edi+0]
.text:00405980
.text:00405980 loc_405980:                             ; CODE XREF: sub_4055C0+310↑j
.text:00405980                                         ; sub_4055C0+378↑j ...
.text:00405980                 mov     ebp, [esp+4Ch+arg_4]
.text:00405984                 cmp     [esp+4Ch+var_34], ebp
.text:00405988                 jnb     short loc_405995
.text:0040598A                 mov     edx, [esp+4Ch+arg_0]
.text:0040598E                 mov     ecx, [esp+4Ch+var_34]
.text:00405992                 mov     [ecx+edx], bl
.text:00405995
.text:00405995 loc_405995:                             ; CODE XREF: sub_4055C0+3C8↑j
.text:00405995                 inc     [esp+4Ch+var_34]
.text:00405999                 mov     ebp, eax
.text:0040599B                 jmp     loc_405650
.text:004059A0 ; ---------------------------------------------------------------------------
.text:004059A0
.text:004059A0 loc_4059A0:                             ; CODE XREF: sub_4055C0+105↑j
.text:004059A0                                         ; DATA XREF: sub_4055C0:jpt_4056C5↑o
.text:004059A0                 mov     dl, 61h ; 'a'   ; jumptable 004056C5 case 7
.text:004059A2                 lea     esi, [esi+0]
.text:004059A9                 lea     edi, [edi+0]
.text:004059B0
.text:004059B0 loc_4059B0:                             ; CODE XREF: sub_4055C0+400↓j
.text:004059B0                                         ; sub_4055C0+409↓j ...
.text:004059B0                 cmp     [esp+4Ch+var_21], 0
.text:004059B5                 lea     eax, [ebp+1]
.text:004059B8                 jz      short loc_405980
.text:004059BA                 mov     bl, dl
.text:004059BC                 jmp     short loc_405958
.text:004059BE ; ---------------------------------------------------------------------------
.text:004059BE
.text:004059BE loc_4059BE:                             ; CODE XREF: sub_4055C0+105↑j
.text:004059BE                                         ; DATA XREF: sub_4055C0:jpt_4056C5↑o
.text:004059BE                 mov     dl, 62h ; 'b'   ; jumptable 004056C5 case 8
.text:004059C0                 jmp     short loc_4059B0
.text:004059C2 ; ---------------------------------------------------------------------------
.text:004059C2
.text:004059C2 loc_4059C2:                             ; CODE XREF: sub_4055C0+105↑j
.text:004059C2                                         ; DATA XREF: sub_4055C0:jpt_4056C5↑o
.text:004059C2                 mov     dl, 74h ; 't'   ; jumptable 004056C5 case 9
.text:004059C4
.text:004059C4 loc_4059C4:                             ; CODE XREF: sub_4055C0+449↓j
.text:004059C4                                         ; sub_4055C0+455↓j ...
.text:004059C4                 cmp     [esp+4Ch+arg_10], 1
.text:004059C9                 jnz     short loc_4059B0
.text:004059CB
.text:004059CB loc_4059CB:                             ; CODE XREF: sub_4055C0+45C↓j
.text:004059CB                                         ; sub_4055C0+4C1↓j ...
.text:004059CB                 mov     [esp+4Ch+var_3C], 2 ; jumptable 00405D92 cases 91,92,94,96,124
.text:004059D3                 mov     eax, [esp+4Ch+arg_14]
.text:004059D7                 mov     edx, [esp+4Ch+arg_C]
.text:004059DB                 mov     ecx, [esp+4Ch+Str]
.text:004059DF                 mov     ebx, [esp+4Ch+arg_4]
.text:004059E3                 mov     [esp+4Ch+var_38], eax ; int
.text:004059E7                 mov     ebp, [esp+4Ch+arg_0]
.text:004059EB                 mov     [esp+4Ch+State], edx ; int
.text:004059EF                 mov     [esp+4Ch+SizeInBytes], ecx ; Str
.text:004059F3                 mov     [esp+4Ch+Type], ebx ; int
.text:004059F7                 mov     [esp+4Ch+C], ebp ; int
.text:004059FA                 call    sub_4055C0
.text:004059FF
.text:004059FF loc_4059FF:                             ; CODE XREF: sub_4055C0+972↓j
.text:004059FF                 add     esp, 3Ch
.text:00405A02                 pop     ebx
.text:00405A03                 pop     esi
.text:00405A04                 pop     edi
.text:00405A05                 pop     ebp
.text:00405A06                 retn
.text:00405A07 ; ---------------------------------------------------------------------------
.text:00405A07
.text:00405A07 loc_405A07:                             ; CODE XREF: sub_4055C0+105↑j
.text:00405A07                                         ; DATA XREF: sub_4055C0:jpt_4056C5↑o
.text:00405A07                 mov     dl, 6Eh ; 'n'   ; jumptable 004056C5 case 10
.text:00405A09                 jmp     short loc_4059C4
.text:00405A0B ; ---------------------------------------------------------------------------
.text:00405A0B
.text:00405A0B loc_405A0B:                             ; CODE XREF: sub_4055C0+105↑j
.text:00405A0B                                         ; DATA XREF: sub_4055C0:jpt_4056C5↑o
.text:00405A0B                 mov     dl, 76h ; 'v'   ; jumptable 004056C5 case 11
.text:00405A0D                 jmp     short loc_4059B0
.text:00405A0F ; ---------------------------------------------------------------------------
.text:00405A0F
.text:00405A0F loc_405A0F:                             ; CODE XREF: sub_4055C0+105↑j
.text:00405A0F                                         ; DATA XREF: sub_4055C0:jpt_4056C5↑o
.text:00405A0F                 mov     dl, 66h ; 'f'   ; jumptable 004056C5 case 12
.text:00405A11                 jmp     short loc_4059B0
.text:00405A13 ; ---------------------------------------------------------------------------
.text:00405A13
.text:00405A13 loc_405A13:                             ; CODE XREF: sub_4055C0+105↑j
.text:00405A13                                         ; DATA XREF: sub_4055C0:jpt_4056C5↑o
.text:00405A13                 mov     dl, 72h ; 'r'   ; jumptable 004056C5 case 13
.text:00405A15                 jmp     short loc_4059C4
.text:00405A17 ; ---------------------------------------------------------------------------
.text:00405A17
.text:00405A17 loc_405A17:                             ; CODE XREF: sub_4055C0+105↑j
.text:00405A17                                         ; DATA XREF: sub_4055C0:jpt_4056C5↑o
.text:00405A17                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 004056C5 case 39
.text:00405A1C                 jz      short loc_4059CB ; jumptable 00405D92 cases 91,92,94,96,124
.text:00405A1E                 cmp     [esp+4Ch+arg_10], 2
.text:00405A23                 jnz     def_405AC2      ; jumptable 004056C5 cases 37,43-58,65-90,93,95,97-122
.text:00405A23                                         ; jumptable 00405AC2 default case, cases 34-38,42-44,46,48-59
.text:00405A29                 mov     edx, [esp+4Ch+arg_4]
.text:00405A2D                 cmp     [esp+4Ch+var_34], edx
.text:00405A31                 jnb     short loc_405A3F
.text:00405A33                 mov     ecx, [esp+4Ch+arg_0]
.text:00405A37                 mov     edi, [esp+4Ch+var_34]
.text:00405A3B                 mov     byte ptr [edi+ecx], 27h ; '''
.text:00405A3F
.text:00405A3F loc_405A3F:                             ; CODE XREF: sub_4055C0+471↑j
.text:00405A3F                 inc     [esp+4Ch+var_34]
.text:00405A43                 mov     eax, [esp+4Ch+arg_4]
.text:00405A47                 cmp     [esp+4Ch+var_34], eax
.text:00405A4B                 jnb     short loc_405A59
.text:00405A4D                 mov     esi, [esp+4Ch+arg_0]
.text:00405A51                 mov     edx, [esp+4Ch+var_34]
.text:00405A55                 mov     byte ptr [edx+esi], 5Ch ; '\'
.text:00405A59
.text:00405A59 loc_405A59:                             ; CODE XREF: sub_4055C0+48B↑j
.text:00405A59                 inc     [esp+4Ch+var_34]
.text:00405A5D                 mov     edi, [esp+4Ch+arg_4]
.text:00405A61                 cmp     [esp+4Ch+var_34], edi
.text:00405A65                 jnb     short loc_405A73
.text:00405A67                 mov     ecx, [esp+4Ch+arg_0]
.text:00405A6B                 mov     eax, [esp+4Ch+var_34]
.text:00405A6F                 mov     byte ptr [eax+ecx], 27h ; '''
.text:00405A73
.text:00405A73 loc_405A73:                             ; CODE XREF: sub_4055C0+4A5↑j
.text:00405A73                                         ; sub_4055C0+5C4↓j ...
.text:00405A73                 inc     [esp+4Ch+var_34]
.text:00405A77                 jmp     def_405AC2      ; jumptable 004056C5 cases 37,43-58,65-90,93,95,97-122
.text:00405A77                                         ; jumptable 00405AC2 default case, cases 34-38,42-44,46,48-59
.text:00405A7C ; ---------------------------------------------------------------------------
.text:00405A7C
.text:00405A7C loc_405A7C:                             ; CODE XREF: sub_4055C0+105↑j
.text:00405A7C                                         ; DATA XREF: sub_4055C0:jpt_4056C5↑o
.text:00405A7C                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 004056C5 case 63
.text:00405A81                 jz      loc_4059CB      ; jumptable 00405D92 cases 91,92,94,96,124
.text:00405A87                 cmp     [esp+4Ch+arg_10], 3
.text:00405A8C                 jnz     def_405AC2      ; jumptable 004056C5 cases 37,43-58,65-90,93,95,97-122
.text:00405A8C                                         ; jumptable 00405AC2 default case, cases 34-38,42-44,46,48-59
.text:00405A92                 lea     edx, [ebp+2]
.text:00405A95                 cmp     edx, [esp+4Ch+arg_C]
.text:00405A99                 jnb     def_405AC2      ; jumptable 004056C5 cases 37,43-58,65-90,93,95,97-122
.text:00405A99                                         ; jumptable 00405AC2 default case, cases 34-38,42-44,46,48-59
.text:00405A9F                 mov     esi, [esp+4Ch+Str]
.text:00405AA3                 cmp     byte ptr [ebp+esi+1], 3Fh ; '?'
.text:00405AA8                 jnz     def_405AC2      ; jumptable 004056C5 cases 37,43-58,65-90,93,95,97-122
.text:00405AA8                                         ; jumptable 00405AC2 default case, cases 34-38,42-44,46,48-59
.text:00405AAE                 movzx   ecx, byte ptr [ebp+esi+2]
.text:00405AB3                 movsx   eax, cl
.text:00405AB6                 sub     eax, 21h ; '!'  ; switch 30 cases
.text:00405AB9                 cmp     eax, 1Dh
.text:00405ABC                 ja      def_405AC2      ; jumptable 004056C5 cases 37,43-58,65-90,93,95,97-122
.text:00405ABC                                         ; jumptable 00405AC2 default case, cases 34-38,42-44,46,48-59
.text:00405AC2                 jmp     ds:jpt_405AC2[eax*4] ; switch jump
.text:00405AC2 ; ---------------------------------------------------------------------------
.text:00405AC9                 align 4
.text:00405ACC jpt_405AC2      dd offset loc_405B44    ; DATA XREF: sub_4055C0+502↑r
.text:00405ACC                 dd offset def_405AC2    ; jump table for switch statement
.text:00405ACC                 dd offset def_405AC2
.text:00405ACC                 dd offset def_405AC2
.text:00405ACC                 dd offset def_405AC2
.text:00405ACC                 dd offset def_405AC2
.text:00405ACC                 dd offset loc_405B44
.text:00405ACC                 dd offset loc_405B44
.text:00405ACC                 dd offset loc_405B44
.text:00405ACC                 dd offset def_405AC2
.text:00405ACC                 dd offset def_405AC2
.text:00405ACC                 dd offset def_405AC2
.text:00405ACC                 dd offset loc_405B44
.text:00405ACC                 dd offset def_405AC2
.text:00405ACC                 dd offset loc_405B44
.text:00405ACC                 dd offset def_405AC2
.text:00405ACC                 dd offset def_405AC2
.text:00405ACC                 dd offset def_405AC2
.text:00405ACC                 dd offset def_405AC2
.text:00405ACC                 dd offset def_405AC2
.text:00405ACC                 dd offset def_405AC2
.text:00405ACC                 dd offset def_405AC2
.text:00405ACC                 dd offset def_405AC2
.text:00405ACC                 dd offset def_405AC2
.text:00405ACC                 dd offset def_405AC2
.text:00405ACC                 dd offset def_405AC2
.text:00405ACC                 dd offset def_405AC2
.text:00405ACC                 dd offset loc_405B44
.text:00405ACC                 dd offset loc_405B44
.text:00405ACC                 dd offset loc_405B44
.text:00405B44 ; ---------------------------------------------------------------------------
.text:00405B44
.text:00405B44 loc_405B44:                             ; CODE XREF: sub_4055C0+502↑j
.text:00405B44                                         ; DATA XREF: sub_4055C0:jpt_405AC2↑o
.text:00405B44                 mov     ebp, edx        ; jumptable 00405AC2 cases 33,39-41,45,47,60-62
.text:00405B46                 mov     bl, cl
.text:00405B48                 mov     edx, [esp+4Ch+arg_4]
.text:00405B4C                 cmp     [esp+4Ch+var_34], edx
.text:00405B50                 jnb     short loc_405B5E
.text:00405B52                 mov     ecx, [esp+4Ch+arg_0]
.text:00405B56                 mov     edi, [esp+4Ch+var_34]
.text:00405B5A                 mov     byte ptr [edi+ecx], 3Fh ; '?'
.text:00405B5E
.text:00405B5E loc_405B5E:                             ; CODE XREF: sub_4055C0+590↑j
.text:00405B5E                 inc     [esp+4Ch+var_34]
.text:00405B62                 mov     eax, [esp+4Ch+arg_4]
.text:00405B66                 cmp     [esp+4Ch+var_34], eax
.text:00405B6A                 jnb     short loc_405B78
.text:00405B6C                 mov     edx, [esp+4Ch+arg_0]
.text:00405B70                 mov     esi, [esp+4Ch+var_34]
.text:00405B74                 mov     byte ptr [esi+edx], 5Ch ; '\'
.text:00405B78
.text:00405B78 loc_405B78:                             ; CODE XREF: sub_4055C0+5AA↑j
.text:00405B78                 inc     [esp+4Ch+var_34]
.text:00405B7C                 mov     edi, [esp+4Ch+arg_4]
.text:00405B80                 cmp     [esp+4Ch+var_34], edi
.text:00405B84                 jnb     loc_405A73
.text:00405B8A                 mov     eax, [esp+4Ch+arg_0]
.text:00405B8E                 mov     ecx, [esp+4Ch+var_34]
.text:00405B92                 mov     byte ptr [ecx+eax], 3Fh ; '?'
.text:00405B96                 jmp     loc_405A73
.text:00405B96 ; ---------------------------------------------------------------------------
.text:00405B9B                 align 10h
.text:00405BA0
.text:00405BA0 def_4056C5:                             ; CODE XREF: sub_4055C0+FF↑j
.text:00405BA0                                         ; sub_4055C0+105↑j
.text:00405BA0                                         ; DATA XREF: ...
.text:00405BA0                 cmp     [esp+4Ch+var_22], 0 ; jumptable 004056C5 default case, cases 1-6,14-31,64
.text:00405BA5                 jz      loc_405CD0
.text:00405BAB                 mov     [esp+4Ch+var_28], 1
.text:00405BB3                 mov     esi, ds:__mb_cur_max
.text:00405BB9                 movzx   edx, bl
.text:00405BBC                 cmp     dword ptr [esi], 1
.text:00405BBF                 jz      loc_405CB4
.text:00405BC5                 mov     [esp+4Ch+Type], 157h ; Type
.text:00405BCD                 mov     [esp+4Ch+C], edx ; C
.text:00405BD0                 call    _isctype
.text:00405BD5
.text:00405BD5 loc_405BD5:                             ; CODE XREF: sub_4055C0+705↓j
.text:00405BD5                 test    eax, eax
.text:00405BD7                 setnz   [esp+4Ch+var_29]
.text:00405BDC
.text:00405BDC loc_405BDC:                             ; CODE XREF: sub_4055C0+7A5↓j
.text:00405BDC                 cmp     [esp+4Ch+var_21], 0
.text:00405BE1                 lea     eax, [ebp+1]
.text:00405BE4                 jz      loc_405980
.text:00405BEA                 cmp     [esp+4Ch+var_29], 0
.text:00405BEF                 jnz     def_405AC2      ; jumptable 004056C5 cases 37,43-58,65-90,93,95,97-122
.text:00405BEF                                         ; jumptable 00405AC2 default case, cases 34-38,42-44,46,48-59
.text:00405BF5
.text:00405BF5 loc_405BF5:                             ; CODE XREF: sub_4055C0+7AB↓j
.text:00405BF5                 mov     eax, [esp+4Ch+var_28]
.text:00405BF9                 lea     edx, [eax+ebp]
.text:00405BFC                 lea     esi, [esi+0]
.text:00405C00
.text:00405C00 loc_405C00:                             ; CODE XREF: sub_4055C0+6EF↓j
.text:00405C00                 cmp     [esp+4Ch+var_21], 0
.text:00405C05                 jz      short loc_405C80
.text:00405C07                 cmp     [esp+4Ch+var_29], 0
.text:00405C0C                 jnz     short loc_405C80
.text:00405C0E                 mov     edi, [esp+4Ch+arg_4]
.text:00405C12                 cmp     [esp+4Ch+var_34], edi
.text:00405C16                 jnb     short loc_405C24
.text:00405C18                 mov     esi, [esp+4Ch+arg_0]
.text:00405C1C                 mov     eax, [esp+4Ch+var_34]
.text:00405C20                 mov     byte ptr [eax+esi], 5Ch ; '\'
.text:00405C24
.text:00405C24 loc_405C24:                             ; CODE XREF: sub_4055C0+656↑j
.text:00405C24                 inc     [esp+4Ch+var_34]
.text:00405C28                 mov     ecx, [esp+4Ch+arg_4]
.text:00405C2C                 cmp     [esp+4Ch+var_34], ecx
.text:00405C30                 jnb     short loc_405C45
.text:00405C32                 mov     cl, bl
.text:00405C34                 mov     esi, [esp+4Ch+arg_0]
.text:00405C38                 mov     edi, [esp+4Ch+var_34]
.text:00405C3C                 shr     cl, 6
.text:00405C3F                 add     cl, 30h ; '0'
.text:00405C42                 mov     [edi+esi], cl
.text:00405C45
.text:00405C45 loc_405C45:                             ; CODE XREF: sub_4055C0+670↑j
.text:00405C45                 inc     [esp+4Ch+var_34]
.text:00405C49                 mov     edi, [esp+4Ch+arg_4]
.text:00405C4D                 cmp     [esp+4Ch+var_34], edi
.text:00405C51                 jnb     short loc_405C69
.text:00405C53                 mov     cl, bl
.text:00405C55                 mov     esi, [esp+4Ch+arg_0]
.text:00405C59                 shr     cl, 3
.text:00405C5C                 mov     edi, [esp+4Ch+var_34]
.text:00405C60                 and     cl, 7
.text:00405C63                 add     cl, 30h ; '0'
.text:00405C66                 mov     [edi+esi], cl
.text:00405C69
.text:00405C69 loc_405C69:                             ; CODE XREF: sub_4055C0+691↑j
.text:00405C69                 inc     [esp+4Ch+var_34]
.text:00405C6D                 and     bl, 7
.text:00405C70                 add     bl, 30h ; '0'
.text:00405C73                 lea     esi, [esi+0]
.text:00405C79                 lea     edi, [edi+0]
.text:00405C80
.text:00405C80 loc_405C80:                             ; CODE XREF: sub_4055C0+645↑j
.text:00405C80                                         ; sub_4055C0+64C↑j
.text:00405C80                 lea     eax, [ebp+1]
.text:00405C83                 cmp     edx, eax
.text:00405C85                 jbe     loc_405980
.text:00405C8B                 mov     ebp, [esp+4Ch+arg_4]
.text:00405C8F                 cmp     [esp+4Ch+var_34], ebp
.text:00405C93                 jnb     short loc_405CA0
.text:00405C95                 mov     ecx, [esp+4Ch+arg_0]
.text:00405C99                 mov     edi, [esp+4Ch+var_34]
.text:00405C9D                 mov     [edi+ecx], bl
.text:00405CA0
.text:00405CA0 loc_405CA0:                             ; CODE XREF: sub_4055C0+6D3↑j
.text:00405CA0                 inc     [esp+4Ch+var_34]
.text:00405CA4                 mov     ebp, eax
.text:00405CA6                 mov     eax, [esp+4Ch+Str]
.text:00405CAA                 movzx   ebx, byte ptr [ebp+eax+0]
.text:00405CAF                 jmp     loc_405C00
.text:00405CB4 ; ---------------------------------------------------------------------------
.text:00405CB4
.text:00405CB4 loc_405CB4:                             ; CODE XREF: sub_4055C0+5FF↑j
.text:00405CB4                 mov     ecx, ds:_pctype
.text:00405CBA                 mov     edi, [ecx]
.text:00405CBC                 movzx   eax, word ptr [edi+edx*2]
.text:00405CC0                 and     eax, 157h
.text:00405CC5                 jmp     loc_405BD5
.text:00405CC5 ; ---------------------------------------------------------------------------
.text:00405CCA                 align 10h
.text:00405CD0
.text:00405CD0 loc_405CD0:                             ; CODE XREF: sub_4055C0+5E5↑j
.text:00405CD0                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00405CD5                 mov     [esp+4Ch+var_18._Wchar], 0
.text:00405CDD                 mov     [esp+4Ch+var_28], 0
.text:00405CE5                 mov     [esp+4Ch+var_29], 1
.text:00405CEA                 jz      loc_405E7C
.text:00405CF0
.text:00405CF0 loc_405CF0:                             ; CODE XREF: sub_4055C0+8CC↓j
.text:00405CF0                 mov     ecx, [esp+4Ch+arg_C]
.text:00405CF4                 lea     edx, [esp+4Ch+var_18]
.text:00405CF8                 mov     edi, [esp+4Ch+Str]
.text:00405CFC                 mov     [esp+4Ch+State], edx ; State
.text:00405D00                 lea     esi, [esp+4Ch+var_18._State]
.text:00405D04                 sub     ecx, ebp
.text:00405D06                 mov     [esp+4Ch+SizeInBytes], ecx ; SizeInBytes
.text:00405D0A                 add     edi, ebp
.text:00405D0C                 mov     [esp+4Ch+var_30], edi
.text:00405D10                 mov     [esp+4Ch+Type], edi ; SrcCh
.text:00405D14                 mov     [esp+4Ch+C], esi ; DstCh
.text:00405D17                 call    mbrtowc
.text:00405D1C                 test    eax, eax
.text:00405D1E                 mov     edi, eax
.text:00405D20                 jz      short loc_405D60
.text:00405D22                 cmp     eax, 0FFFFFFFFh
.text:00405D25                 jz      loc_405E72
.text:00405D2B                 cmp     eax, 0FFFFFFFEh
.text:00405D2E                 jz      loc_405E32
.text:00405D34                 cmp     [esp+4Ch+arg_10], 1
.text:00405D39                 jz      short loc_405D70
.text:00405D3B
.text:00405D3B loc_405D3B:                             ; CODE XREF: sub_4055C0+7B9↓j
.text:00405D3B                                         ; sub_4055C0+86D↓j
.text:00405D3B                 movzx   ecx, [esp+4Ch+var_18._State]
.text:00405D40                 mov     [esp+4Ch+Type], 157h ; Type
.text:00405D48                 mov     [esp+4Ch+C], ecx ; C
.text:00405D4B                 call    iswctype
.text:00405D50                 test    eax, eax
.text:00405D52                 jnz     short loc_405D59
.text:00405D54                 mov     [esp+4Ch+var_29], 0
.text:00405D59
.text:00405D59 loc_405D59:                             ; CODE XREF: sub_4055C0+792↑j
.text:00405D59                 mov     [esp+4Ch+var_28], edi
.text:00405D5D                 lea     esi, [esi+0]
.text:00405D60
.text:00405D60 loc_405D60:                             ; CODE XREF: sub_4055C0+760↑j
.text:00405D60                                         ; sub_4055C0+87B↓j ...
.text:00405D60                 cmp     [esp+4Ch+var_28], 1
.text:00405D65                 jbe     loc_405BDC
.text:00405D6B                 jmp     loc_405BF5
.text:00405D70 ; ---------------------------------------------------------------------------
.text:00405D70
.text:00405D70 loc_405D70:                             ; CODE XREF: sub_4055C0+779↑j
.text:00405D70                 cmp     [esp+4Ch+arg_10], eax
.text:00405D74                 mov     edx, 1
.text:00405D79                 jnb     short loc_405D3B
.text:00405D7B
.text:00405D7B loc_405D7B:                             ; CODE XREF: sub_4055C0+867↓j
.text:00405D7B                 mov     ecx, [esp+4Ch+Str]
.text:00405D7F                 lea     esi, [edx+ebp]
.text:00405D82                 movsx   eax, byte ptr [esi+ecx]
.text:00405D86                 sub     eax, 5Bh ; '['  ; switch 34 cases
.text:00405D89                 cmp     eax, 21h
.text:00405D8C                 ja      def_405D92      ; jumptable 00405D92 default case, cases 93,95,97-123
.text:00405D92                 jmp     ds:jpt_405D92[eax*4] ; switch jump
.text:00405D92 ; ---------------------------------------------------------------------------
.text:00405D99                 align 4
.text:00405D9C jpt_405D92      dd offset loc_4059CB    ; DATA XREF: sub_4055C0+7D2↑r
.text:00405D9C                 dd offset loc_4059CB    ; jump table for switch statement
.text:00405D9C                 dd offset def_405D92
.text:00405D9C                 dd offset loc_4059CB
.text:00405D9C                 dd offset def_405D92
.text:00405D9C                 dd offset loc_4059CB
.text:00405D9C                 dd offset def_405D92
.text:00405D9C                 dd offset def_405D92
.text:00405D9C                 dd offset def_405D92
.text:00405D9C                 dd offset def_405D92
.text:00405D9C                 dd offset def_405D92
.text:00405D9C                 dd offset def_405D92
.text:00405D9C                 dd offset def_405D92
.text:00405D9C                 dd offset def_405D92
.text:00405D9C                 dd offset def_405D92
.text:00405D9C                 dd offset def_405D92
.text:00405D9C                 dd offset def_405D92
.text:00405D9C                 dd offset def_405D92
.text:00405D9C                 dd offset def_405D92
.text:00405D9C                 dd offset def_405D92
.text:00405D9C                 dd offset def_405D92
.text:00405D9C                 dd offset def_405D92
.text:00405D9C                 dd offset def_405D92
.text:00405D9C                 dd offset def_405D92
.text:00405D9C                 dd offset def_405D92
.text:00405D9C                 dd offset def_405D92
.text:00405D9C                 dd offset def_405D92
.text:00405D9C                 dd offset def_405D92
.text:00405D9C                 dd offset def_405D92
.text:00405D9C                 dd offset def_405D92
.text:00405D9C                 dd offset def_405D92
.text:00405D9C                 dd offset def_405D92
.text:00405D9C                 dd offset def_405D92
.text:00405D9C                 dd offset loc_4059CB
.text:00405E24 ; ---------------------------------------------------------------------------
.text:00405E24
.text:00405E24 def_405D92:                             ; CODE XREF: sub_4055C0+7CC↑j
.text:00405E24                                         ; sub_4055C0+7D2↑j
.text:00405E24                                         ; DATA XREF: ...
.text:00405E24                 inc     edx             ; jumptable 00405D92 default case, cases 93,95,97-123
.text:00405E25                 cmp     edx, edi
.text:00405E27                 jb      loc_405D7B
.text:00405E2D                 jmp     loc_405D3B
.text:00405E32 ; ---------------------------------------------------------------------------
.text:00405E32
.text:00405E32 loc_405E32:                             ; CODE XREF: sub_4055C0+76E↑j
.text:00405E32                 cmp     ebp, [esp+4Ch+arg_C]
.text:00405E36                 mov     [esp+4Ch+var_29], 0
.text:00405E3B                 jnb     loc_405D60
.text:00405E41                 mov     eax, [esp+4Ch+var_30]
.text:00405E45                 cmp     byte ptr [eax], 0
.text:00405E48                 jz      loc_405D60
.text:00405E4E
.text:00405E4E loc_405E4E:                             ; CODE XREF: sub_4055C0+8AB↓j
.text:00405E4E                 inc     [esp+4Ch+var_28]
.text:00405E52                 mov     esi, [esp+4Ch+var_28]
.text:00405E56                 lea     eax, [esi+ebp]
.text:00405E59                 cmp     eax, [esp+4Ch+arg_C]
.text:00405E5D                 jnb     loc_405D60
.text:00405E63                 mov     edi, [esp+4Ch+Str]
.text:00405E67                 cmp     byte ptr [eax+edi], 0
.text:00405E6B                 jnz     short loc_405E4E
.text:00405E6D                 jmp     loc_405D60
.text:00405E72 ; ---------------------------------------------------------------------------
.text:00405E72
.text:00405E72 loc_405E72:                             ; CODE XREF: sub_4055C0+765↑j
.text:00405E72                 mov     [esp+4Ch+var_29], 0
.text:00405E77                 jmp     loc_405D60
.text:00405E7C ; ---------------------------------------------------------------------------
.text:00405E7C
.text:00405E7C loc_405E7C:                             ; CODE XREF: sub_4055C0+72A↑j
.text:00405E7C                 mov     edx, [esp+4Ch+Str]
.text:00405E80                 mov     [esp+4Ch+C], edx ; Str
.text:00405E83                 call    strlen
.text:00405E88                 mov     [esp+4Ch+arg_C], eax
.text:00405E8C                 jmp     loc_405CF0
.text:00405E91 ; ---------------------------------------------------------------------------
.text:00405E91
.text:00405E91 loc_405E91:                             ; CODE XREF: sub_4055C0+105↑j
.text:00405E91                                         ; DATA XREF: sub_4055C0:jpt_4056C5↑o
.text:00405E91                 mov     dl, bl          ; jumptable 004056C5 case 92
.text:00405E93                 jmp     loc_4059C4
.text:00405E98 ; ---------------------------------------------------------------------------
.text:00405E98
.text:00405E98 loc_405E98:                             ; CODE XREF: sub_4055C0+105↑j
.text:00405E98                                         ; sub_4055C0+902↓j
.text:00405E98                                         ; DATA XREF: ...
.text:00405E98                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 004056C5 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:00405E9D                 jnz     def_405AC2      ; jumptable 004056C5 cases 37,43-58,65-90,93,95,97-122
.text:00405E9D                                         ; jumptable 00405AC2 default case, cases 34-38,42-44,46,48-59
.text:00405EA3                 jmp     loc_4059CB      ; jumptable 00405D92 cases 91,92,94,96,124
.text:00405EA8 ; ---------------------------------------------------------------------------
.text:00405EA8
.text:00405EA8 loc_405EA8:                             ; CODE XREF: sub_4055C0+105↑j
.text:00405EA8                                         ; DATA XREF: sub_4055C0:jpt_4056C5↑o
.text:00405EA8                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh ; jumptable 004056C5 cases 123,125
.text:00405EAD                 jz      short loc_405EC4
.text:00405EAF                 cmp     [esp+4Ch+arg_C], 1
.text:00405EB4
.text:00405EB4 loc_405EB4:                             ; CODE XREF: sub_4055C0+90C↓j
.text:00405EB4                 jnz     def_405AC2      ; jumptable 004056C5 cases 37,43-58,65-90,93,95,97-122
.text:00405EB4                                         ; jumptable 00405AC2 default case, cases 34-38,42-44,46,48-59
.text:00405EBA
.text:00405EBA loc_405EBA:                             ; CODE XREF: sub_4055C0+105↑j
.text:00405EBA                                         ; DATA XREF: sub_4055C0:jpt_4056C5↑o
.text:00405EBA                 test    ebp, ebp        ; jumptable 004056C5 cases 35,126
.text:00405EBC                 jnz     def_405AC2      ; jumptable 004056C5 cases 37,43-58,65-90,93,95,97-122
.text:00405EBC                                         ; jumptable 00405AC2 default case, cases 34-38,42-44,46,48-59
.text:00405EC2                 jmp     short loc_405E98 ; jumptable 004056C5 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:00405EC4 ; ---------------------------------------------------------------------------
.text:00405EC4
.text:00405EC4 loc_405EC4:                             ; CODE XREF: sub_4055C0+8ED↑j
.text:00405EC4                 mov     esi, [esp+4Ch+Str]
.text:00405EC8                 cmp     byte ptr [esi+1], 0
.text:00405ECC                 jmp     short loc_405EB4
.text:00405ECE ; ---------------------------------------------------------------------------
.text:00405ECE
.text:00405ECE loc_405ECE:                             ; CODE XREF: sub_4055C0:loc_40565F↑j
.text:00405ECE                 test    ebp, ebp
.text:00405ED0                 jnz     short loc_405EDD
.text:00405ED2                 cmp     [esp+4Ch+arg_10], 1
.text:00405ED7                 jz      loc_4059CB      ; jumptable 00405D92 cases 91,92,94,96,124
.text:00405EDD
.text:00405EDD loc_405EDD:                             ; CODE XREF: sub_4055C0+910↑j
.text:00405EDD                 mov     esi, [esp+4Ch+var_1C]
.text:00405EE1                 test    esi, esi
.text:00405EE3                 jz      short loc_405F18
.text:00405EE5                 mov     edi, [esp+4Ch+var_1C]
.text:00405EE9                 movzx   eax, byte ptr [edi]
.text:00405EEC                 test    al, al
.text:00405EEE                 jz      short loc_405F18
.text:00405EF0
.text:00405EF0 loc_405EF0:                             ; CODE XREF: sub_4055C0+956↓j
.text:00405EF0                 mov     ebp, [esp+4Ch+arg_4]
.text:00405EF4                 cmp     [esp+4Ch+var_34], ebp
.text:00405EF8                 jnb     short loc_405F05
.text:00405EFA                 mov     ecx, [esp+4Ch+arg_0]
.text:00405EFE                 mov     ebx, [esp+4Ch+var_34]
.text:00405F02                 mov     [ebx+ecx], al
.text:00405F05
.text:00405F05 loc_405F05:                             ; CODE XREF: sub_4055C0+938↑j
.text:00405F05                 inc     [esp+4Ch+var_1C]
.text:00405F09                 inc     [esp+4Ch+var_34]
.text:00405F0D                 mov     edx, [esp+4Ch+var_1C]
.text:00405F11                 movzx   eax, byte ptr [edx]
.text:00405F14                 test    al, al
.text:00405F16                 jnz     short loc_405EF0
.text:00405F18
.text:00405F18 loc_405F18:                             ; CODE XREF: sub_4055C0+923↑j
.text:00405F18                                         ; sub_4055C0+92E↑j
.text:00405F18                 mov     eax, [esp+4Ch+arg_4]
.text:00405F1C                 cmp     [esp+4Ch+var_34], eax
.text:00405F20                 jnb     short loc_405F2E
.text:00405F22                 mov     edi, [esp+4Ch+arg_0]
.text:00405F26                 mov     esi, [esp+4Ch+var_34]
.text:00405F2A                 mov     byte ptr [esi+edi], 0
.text:00405F2E
.text:00405F2E loc_405F2E:                             ; CODE XREF: sub_4055C0+960↑j
.text:00405F2E                 mov     eax, [esp+4Ch+var_34]
.text:00405F32                 jmp     loc_4059FF
.text:00405F37 ; ---------------------------------------------------------------------------
.text:00405F37
.text:00405F37 loc_405F37:                             ; CODE XREF: sub_4055C0+95↑j
.text:00405F37                 mov     ebx, [esp+4Ch+Str]
.text:00405F3B                 cmp     byte ptr [ebp+ebx+0], 0
.text:00405F40                 jmp     loc_40565F
.text:00405F45 ; ---------------------------------------------------------------------------
.text:00405F45
.text:00405F45 loc_405F45:                             ; CODE XREF: sub_4055C0+3D↑j
.text:00405F45                                         ; DATA XREF: sub_4055C0:jpt_4055FD↑o
.text:00405F45                 mov     edx, [esp+4Ch+arg_4] ; jumptable 004055FD case 2
.text:00405F49                 cmp     [esp+4Ch+var_34], edx
.text:00405F4D                 jnb     short loc_405F56
.text:00405F4F                 mov     ecx, [esp+4Ch+arg_0]
.text:00405F53                 mov     byte ptr [ecx], 27h ; '''
.text:00405F56
.text:00405F56 loc_405F56:                             ; CODE XREF: sub_4055C0+98D↑j
.text:00405F56                 mov     [esp+4Ch+var_34], 1
.text:00405F5E                 mov     [esp+4Ch+var_1C], 4055AEh
.text:00405F66                 jmp     loc_405646
.text:00405F6B ; ---------------------------------------------------------------------------
.text:00405F6B
.text:00405F6B loc_405F6B:                             ; CODE XREF: sub_4055C0+3D↑j
.text:00405F6B                                         ; DATA XREF: sub_4055C0:jpt_4055FD↑o
.text:00405F6B                 mov     [esp+4Ch+var_21], 1 ; jumptable 004055FD case 4
.text:00405F70                 jmp     def_4055FD      ; jumptable 004055FD default case, cases 0,1
.text:00405F75 ; ---------------------------------------------------------------------------
.text:00405F75
.text:00405F75 loc_405F75:                             ; CODE XREF: sub_4055C0+3D↑j
.text:00405F75                                         ; DATA XREF: sub_4055C0:jpt_4055FD↑o
.text:00405F75                 mov     [esp+4Ch+C], 4055B0h ; jumptable 004055FD cases 5,6
.text:00405F7C                 call    ds:libintl_gettext
.text:00405F82                 cmp     eax, 4055B0h
.text:00405F87                 mov     edi, eax
.text:00405F89                 jz      short loc_406000
.text:00405F8B
.text:00405F8B loc_405F8B:                             ; CODE XREF: sub_4055C0+A45↓j
.text:00405F8B                                         ; sub_4055C0+A4C↓j
.text:00405F8B                 mov     [esp+4Ch+C], 4055AEh
.text:00405F92                 call    ds:libintl_gettext
.text:00405F98                 cmp     eax, 4055AEh
.text:00405F9D                 mov     edx, eax
.text:00405F9F                 jz      short loc_405FF2
.text:00405FA1
.text:00405FA1 loc_405FA1:                             ; CODE XREF: sub_4055C0+A37↓j
.text:00405FA1                                         ; sub_4055C0+A3E↓j
.text:00405FA1                 mov     [esp+4Ch+var_1C], edi
.text:00405FA5                 cmp     byte ptr [edi], 0
.text:00405FA8                 jz      short loc_405FD8
.text:00405FAA
.text:00405FAA loc_405FAA:                             ; CODE XREF: sub_4055C0+A16↓j
.text:00405FAA                 mov     ecx, [esp+4Ch+arg_4]
.text:00405FAE                 cmp     [esp+4Ch+var_34], ecx
.text:00405FB2                 jnb     short loc_405FC7
.text:00405FB4                 mov     ebp, [esp+4Ch+var_1C]
.text:00405FB8                 mov     edi, [esp+4Ch+arg_0]
.text:00405FBC                 mov     esi, [esp+4Ch+var_34]
.text:00405FC0                 movzx   ebx, byte ptr [ebp+0]
.text:00405FC4                 mov     [esi+edi], bl
.text:00405FC7
.text:00405FC7 loc_405FC7:                             ; CODE XREF: sub_4055C0+9F2↑j
.text:00405FC7                 inc     [esp+4Ch+var_1C]
.text:00405FCB                 inc     [esp+4Ch+var_34]
.text:00405FCF                 mov     eax, [esp+4Ch+var_1C]
.text:00405FD3                 cmp     byte ptr [eax], 0
.text:00405FD6                 jnz     short loc_405FAA
.text:00405FD8
.text:00405FD8 loc_405FD8:                             ; CODE XREF: sub_4055C0+9E8↑j
.text:00405FD8                 mov     [esp+4Ch+var_21], 1
.text:00405FDD                 mov     [esp+4Ch+var_1C], edx
.text:00405FE1                 mov     [esp+4Ch+C], edx ; Str
.text:00405FE4                 call    strlen
.text:00405FE9                 mov     [esp+4Ch+var_20], eax
.text:00405FED                 jmp     def_4055FD      ; jumptable 004055FD default case, cases 0,1
.text:00405FF2 ; ---------------------------------------------------------------------------
.text:00405FF2
.text:00405FF2 loc_405FF2:                             ; CODE XREF: sub_4055C0+9DF↑j
.text:00405FF2                 cmp     [esp+4Ch+arg_10], 6
.text:00405FF7                 jnz     short loc_405FA1
.text:00405FF9                 mov     edx, offset asc_4055AC ; "\"'`"
.text:00405FFE                 jmp     short loc_405FA1
.text:00406000 ; ---------------------------------------------------------------------------
.text:00406000
.text:00406000 loc_406000:                             ; CODE XREF: sub_4055C0+9C9↑j
.text:00406000                 cmp     [esp+4Ch+arg_10], 6
.text:00406005                 jnz     short loc_405F8B
.text:00406007                 mov     edi, offset asc_4055AC ; "\"'`"
.text:0040600C                 jmp     loc_405F8B
.text:0040600C sub_4055C0      endp
.text:0040600C
.text:00406011 ; ---------------------------------------------------------------------------
.text:00406011                 jmp     short loc_406020
.text:00406011 ; ---------------------------------------------------------------------------
.text:00406013                 align 10h
.text:00406020
.text:00406020 loc_406020:                             ; CODE XREF: .text:00406011↑j
.text:00406020                 sub     esp, 0Ch
.text:00406023                 mov     [esp+4], ebx
.text:00406027                 mov     [esp+8], esi
.text:0040602B                 call    _errno
.text:00406030                 mov     esi, [eax]
.text:00406032                 mov     dword ptr [esp], 24h ; '$'
.text:00406039                 call    sub_4050B0
.text:0040603E                 mov     edx, [esp+10h]
.text:00406042                 mov     ebx, eax
.text:00406044                 test    edx, edx
.text:00406046                 jz      short loc_406091
.text:00406048
.text:00406048 loc_406048:                             ; CODE XREF: .text:00406096↓j
.text:00406048                 mov     ecx, [edx]
.text:0040604A                 mov     [ebx], ecx
.text:0040604C                 mov     ecx, [edx+4]
.text:0040604F                 mov     [ebx+4], ecx
.text:00406052                 mov     ecx, [edx+8]
.text:00406055                 mov     [ebx+8], ecx
.text:00406058                 mov     ecx, [edx+0Ch]
.text:0040605B                 mov     [ebx+0Ch], ecx
.text:0040605E                 mov     ecx, [edx+10h]
.text:00406061                 mov     [ebx+10h], ecx
.text:00406064                 mov     ecx, [edx+14h]
.text:00406067                 mov     [ebx+14h], ecx
.text:0040606A                 mov     ecx, [edx+18h]
.text:0040606D                 mov     [ebx+18h], ecx
.text:00406070                 mov     ecx, [edx+1Ch]
.text:00406073                 mov     [ebx+1Ch], ecx
.text:00406076                 mov     ecx, [edx+20h]
.text:00406079                 mov     [ebx+20h], ecx
.text:0040607C                 call    _errno
.text:00406081                 mov     [eax], esi
.text:00406083                 mov     esi, [esp+8]
.text:00406087                 mov     eax, ebx
.text:00406089                 mov     ebx, [esp+4]
.text:0040608D                 add     esp, 0Ch
.text:00406090                 retn
.text:00406091 ; ---------------------------------------------------------------------------
.text:00406091
.text:00406091 loc_406091:                             ; CODE XREF: .text:00406046↑j
.text:00406091                 mov     edx, offset dword_4122E0
.text:00406096                 jmp     short loc_406048
.text:00406096 ; ---------------------------------------------------------------------------
.text:00406098                 align 10h
.text:004060A0                 mov     eax, [esp+4]
.text:004060A4                 test    eax, eax
.text:004060A6                 jz      short loc_4060B0
.text:004060A8
.text:004060A8 loc_4060A8:                             ; CODE XREF: .text:004060B5↓j
.text:004060A8                 mov     eax, [eax]
.text:004060AA                 retn
.text:004060AA ; ---------------------------------------------------------------------------
.text:004060AB                 align 10h
.text:004060B0
.text:004060B0 loc_4060B0:                             ; CODE XREF: .text:004060A6↑j
.text:004060B0                 mov     eax, offset dword_4122E0
.text:004060B5                 jmp     short loc_4060A8
.text:004060B5 ; ---------------------------------------------------------------------------
.text:004060B7                 align 10h
.text:004060C0                 mov     edx, [esp+4]
.text:004060C4                 test    edx, edx
.text:004060C6                 jz      short loc_4060D0
.text:004060C8
.text:004060C8 loc_4060C8:                             ; CODE XREF: .text:004060D5↓j
.text:004060C8                 mov     ecx, [esp+8]
.text:004060CC                 mov     [edx], ecx
.text:004060CE                 retn
.text:004060CE ; ---------------------------------------------------------------------------
.text:004060CF                 align 10h
.text:004060D0
.text:004060D0 loc_4060D0:                             ; CODE XREF: .text:004060C6↑j
.text:004060D0                 mov     edx, offset dword_4122E0
.text:004060D5                 jmp     short loc_4060C8
.text:004060D5 ; ---------------------------------------------------------------------------
.text:004060D7                 align 10h
.text:004060E0                 sub     esp, 8
.text:004060E3                 mov     eax, [esp+0Ch]
.text:004060E7                 movzx   ecx, byte ptr [esp+10h]
.text:004060EC                 mov     [esp], ebx
.text:004060EF                 mov     ebx, [esp+14h]
.text:004060F3                 mov     [esp+4], esi
.text:004060F7                 mov     dl, cl
.text:004060F9                 shr     dl, 5
.text:004060FC                 movzx   edx, dl
.text:004060FF                 shl     edx, 2
.text:00406102                 test    eax, eax
.text:00406104                 lea     esi, [edx+eax+4]
.text:00406108                 jz      short loc_406130
.text:0040610A
.text:0040610A loc_40610A:                             ; CODE XREF: .text:00406136↓j
.text:0040610A                 mov     edx, [esi]
.text:0040610C                 and     ecx, 1Fh
.text:0040610F                 and     ebx, 1
.text:00406112                 mov     eax, edx
.text:00406114                 shr     eax, cl
.text:00406116                 and     eax, 1
.text:00406119                 xor     ebx, eax
.text:0040611B                 shl     ebx, cl
.text:0040611D                 xor     edx, ebx
.text:0040611F                 mov     [esi], edx
.text:00406121                 mov     ebx, [esp]
.text:00406124                 mov     esi, [esp+4]
.text:00406128                 add     esp, 8
.text:0040612B                 retn
.text:0040612B ; ---------------------------------------------------------------------------
.text:0040612C                 align 10h
.text:00406130
.text:00406130 loc_406130:                             ; CODE XREF: .text:00406108↑j
.text:00406130                 lea     esi, dword_4122E4[edx]
.text:00406136                 jmp     short loc_40610A
.text:00406136 ; ---------------------------------------------------------------------------
.text:00406138                 align 10h
.text:00406140                 sub     esp, 2Ch
.text:00406143                 mov     [esp+24h], ebx
.text:00406147                 mov     ebx, [esp+40h]
.text:0040614B                 mov     [esp+28h], esi
.text:0040614F                 test    ebx, ebx
.text:00406151                 jz      short loc_4061A0
.text:00406153
.text:00406153 loc_406153:                             ; CODE XREF: .text:004061A5↓j
.text:00406153                 call    _errno
.text:00406158                 mov     esi, [eax]
.text:0040615A                 mov     [esp+14h], ebx
.text:0040615E                 mov     edx, [ebx]
.text:00406160                 mov     ecx, [esp+38h]
.text:00406164                 mov     ebx, [esp+3Ch]
.text:00406168                 mov     [esp+10h], edx
.text:0040616C                 mov     edx, [esp+34h]
.text:00406170                 mov     [esp+0Ch], ebx
.text:00406174                 mov     [esp+8], ecx
.text:00406178                 mov     [esp+4], edx
.text:0040617C                 mov     edx, [esp+30h]
.text:00406180                 mov     [esp], edx
.text:00406183                 call    sub_4055C0
.text:00406188                 mov     ebx, eax
.text:0040618A                 call    _errno
.text:0040618F                 mov     [eax], esi
.text:00406191                 mov     esi, [esp+28h]
.text:00406195                 mov     eax, ebx
.text:00406197                 mov     ebx, [esp+24h]
.text:0040619B                 add     esp, 2Ch
.text:0040619E                 retn
.text:0040619E ; ---------------------------------------------------------------------------
.text:0040619F                 align 10h
.text:004061A0
.text:004061A0 loc_4061A0:                             ; CODE XREF: .text:00406151↑j
.text:004061A0                 mov     ebx, offset dword_4122E0
.text:004061A5                 jmp     short loc_406153
.text:004061A5 ; ---------------------------------------------------------------------------
.text:004061A7                 align 10h
.text:004061B0                 push    ebp
.text:004061B1                 push    edi
.text:004061B2                 push    esi
.text:004061B3                 push    ebx
.text:004061B4                 sub     esp, 2Ch
.text:004061B7                 mov     ebp, [esp+48h]
.text:004061BB                 call    _errno
.text:004061C0                 mov     edx, [eax]
.text:004061C2                 test    ebp, ebp
.text:004061C4                 mov     ebx, ebp
.text:004061C6                 mov     [esp+28h], edx
.text:004061CA                 jz      loc_406280
.text:004061D0
.text:004061D0 loc_4061D0:                             ; CODE XREF: .text:00406285↓j
.text:004061D0                 call    _errno
.text:004061D5                 mov     edi, [eax]
.text:004061D7                 mov     esi, ebp
.text:004061D9                 mov     [esp+14h], ebx
.text:004061DD                 mov     ecx, [ebx]
.text:004061DF                 mov     dword ptr [esp], 0
.text:004061E6                 mov     edx, [esp+44h]
.text:004061EA                 mov     dword ptr [esp+4], 0
.text:004061F2                 mov     eax, [esp+40h]
.text:004061F6                 mov     [esp+10h], ecx
.text:004061FA                 mov     [esp+0Ch], edx
.text:004061FE                 mov     [esp+8], eax
.text:00406202                 call    sub_4055C0
.text:00406207                 mov     ebx, eax
.text:00406209                 call    _errno
.text:0040620E                 mov     [eax], edi
.text:00406210                 lea     edi, [ebx+1]
.text:00406213                 mov     [esp], edi
.text:00406216                 call    sub_4050B0
.text:0040621B                 mov     [esp+24h], eax
.text:0040621F                 test    ebp, ebp
.text:00406221                 jz      short loc_406272
.text:00406223
.text:00406223 loc_406223:                             ; CODE XREF: .text:00406277↓j
.text:00406223                 call    _errno
.text:00406228                 mov     ebp, [eax]
.text:0040622A                 mov     [esp+14h], esi
.text:0040622E                 mov     ecx, [esi]
.text:00406230                 mov     [esp+4], edi
.text:00406234                 mov     edx, [esp+44h]
.text:00406238                 mov     esi, [esp+24h]
.text:0040623C                 mov     [esp+10h], ecx
.text:00406240                 mov     eax, [esp+40h]
.text:00406244                 mov     [esp+0Ch], edx
.text:00406248                 mov     [esp], esi
.text:0040624B                 mov     [esp+8], eax
.text:0040624F                 call    sub_4055C0
.text:00406254                 call    _errno
.text:00406259                 mov     [eax], ebp
.text:0040625B                 call    _errno
.text:00406260                 mov     ebx, [esp+28h]
.text:00406264                 mov     [eax], ebx
.text:00406266                 mov     eax, [esp+24h]
.text:0040626A                 add     esp, 2Ch
.text:0040626D                 pop     ebx
.text:0040626E                 pop     esi
.text:0040626F                 pop     edi
.text:00406270                 pop     ebp
.text:00406271                 retn
.text:00406272 ; ---------------------------------------------------------------------------
.text:00406272
.text:00406272 loc_406272:                             ; CODE XREF: .text:00406221↑j
.text:00406272                 mov     esi, offset dword_4122E0
.text:00406277                 jmp     short loc_406223
.text:00406277 ; ---------------------------------------------------------------------------
.text:00406279                 align 10h
.text:00406280
.text:00406280 loc_406280:                             ; CODE XREF: .text:004061CA↑j
.text:00406280                 mov     ebx, offset dword_4122E0
.text:00406285                 jmp     loc_4061D0
.text:00406285 ; ---------------------------------------------------------------------------
.text:0040628A                 align 10h
.text:00406290                 sub     esp, 1Ch
.text:00406293                 mov     edx, [esp+24h]
.text:00406297                 mov     dword ptr [esp+0Ch], offset dword_4122E0
.text:0040629F                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:004062A7                 mov     [esp+4], edx
.text:004062AB                 mov     edx, [esp+20h]
.text:004062AF                 mov     [esp], edx
.text:004062B2                 call    sub_406700
.text:004062B7                 add     esp, 1Ch
.text:004062BA                 retn
.text:004062BA ; ---------------------------------------------------------------------------
.text:004062BB                 align 10h
.text:004062C0                 sub     esp, 1Ch
.text:004062C3                 mov     edx, [esp+20h]
.text:004062C7                 mov     dword ptr [esp+0Ch], offset dword_4122E0
.text:004062CF                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:004062D7                 mov     [esp+4], edx
.text:004062DB                 mov     dword ptr [esp], 0
.text:004062E2                 call    sub_406700
.text:004062E7                 add     esp, 1Ch
.text:004062EA                 retn
.text:004062EA ; ---------------------------------------------------------------------------
.text:004062EB                 align 10h
.text:004062F0
.text:004062F0 ; =============== S U B R O U T I N E =======================================
.text:004062F0
.text:004062F0
.text:004062F0 ; int __cdecl sub_4062F0(int, int, char *)
.text:004062F0 sub_4062F0      proc near               ; CODE XREF: .text:0040485A↑p
.text:004062F0                                         ; sub_404870+1A↑p
.text:004062F0
.text:004062F0 var_BC          = dword ptr -0BCh
.text:004062F0 var_B8          = dword ptr -0B8h
.text:004062F0 var_B4          = dword ptr -0B4h
.text:004062F0 var_B0          = dword ptr -0B0h
.text:004062F0 var_AC          = dword ptr -0ACh
.text:004062F0 var_A8          = dword ptr -0A8h
.text:004062F0 var_A4          = dword ptr -0A4h
.text:004062F0 var_A0          = dword ptr -0A0h
.text:004062F0 var_9C          = dword ptr -9Ch
.text:004062F0 var_98          = dword ptr -98h
.text:004062F0 var_94          = dword ptr -94h
.text:004062F0 var_90          = dword ptr -90h
.text:004062F0 var_8C          = dword ptr -8Ch
.text:004062F0 var_7C          = dword ptr -7Ch
.text:004062F0 var_78          = dword ptr -78h
.text:004062F0 var_74          = dword ptr -74h
.text:004062F0 var_70          = dword ptr -70h
.text:004062F0 var_6C          = dword ptr -6Ch
.text:004062F0 var_68          = dword ptr -68h
.text:004062F0 var_64          = dword ptr -64h
.text:004062F0 var_60          = dword ptr -60h
.text:004062F0 var_5C          = dword ptr -5Ch
.text:004062F0 var_4C          = dword ptr -4Ch
.text:004062F0 var_48          = dword ptr -48h
.text:004062F0 var_44          = dword ptr -44h
.text:004062F0 var_40          = dword ptr -40h
.text:004062F0 var_3C          = dword ptr -3Ch
.text:004062F0 var_38          = dword ptr -38h
.text:004062F0 var_34          = dword ptr -34h
.text:004062F0 var_30          = dword ptr -30h
.text:004062F0 var_2C          = dword ptr -2Ch
.text:004062F0 arg_0           = dword ptr  4
.text:004062F0 arg_4           = dword ptr  8
.text:004062F0 arg_8           = dword ptr  0Ch
.text:004062F0
.text:004062F0                 push    ebp
.text:004062F1                 xor     eax, eax
.text:004062F3                 mov     ecx, 8
.text:004062F8                 push    edi
.text:004062F9                 push    esi
.text:004062FA                 push    ebx
.text:004062FB                 sub     esp, 0ACh
.text:00406301                 mov     ebp, [esp+0BCh+arg_4]
.text:00406308                 cld
.text:00406309                 lea     edi, [esp+0BCh+var_A8]
.text:0040630D                 mov     [esp+0BCh+var_AC], ebp
.text:00406311                 rep stosd
.text:00406313                 mov     eax, [esp+0BCh+var_8C]
.text:00406317                 mov     edi, [esp+0BCh+var_AC]
.text:0040631B                 mov     esi, [esp+0BCh+var_A8]
.text:0040631F                 mov     [esp+0BCh+var_5C], eax
.text:00406323                 mov     ebp, [esp+0BCh+var_A4]
.text:00406327                 mov     eax, [esp+0BCh+var_AC]
.text:0040632B                 mov     [esp+0BCh+var_7C], edi
.text:0040632F                 mov     ecx, [esp+0BCh+var_94]
.text:00406333                 mov     edi, [esp+0BCh+var_A0]
.text:00406337                 mov     [esp+0BCh+var_78], esi
.text:0040633B                 mov     edx, [esp+0BCh+var_90]
.text:0040633F                 mov     esi, [esp+0BCh+var_9C]
.text:00406343                 mov     [esp+0BCh+var_4C], eax
.text:00406347                 mov     ebx, [esp+0BCh+var_98]
.text:0040634B                 mov     eax, [esp+0BCh+var_A8]
.text:0040634F                 mov     [esp+0BCh+var_74], ebp
.text:00406353                 mov     [esp+0BCh+var_70], edi
.text:00406357                 mov     [esp+0BCh+var_6C], esi
.text:0040635B                 mov     [esp+0BCh+var_68], ebx
.text:0040635F                 mov     [esp+0BCh+var_64], ecx
.text:00406363                 mov     [esp+0BCh+var_60], edx
.text:00406367                 mov     [esp+0BCh+var_48], eax
.text:0040636B                 mov     [esp+0BCh+var_44], ebp
.text:0040636F                 mov     [esp+0BCh+var_40], edi
.text:00406373                 mov     [esp+0BCh+var_3C], esi
.text:0040637A                 mov     [esp+0BCh+var_38], ebx
.text:00406381                 mov     ebx, [esp+0BCh+var_8C]
.text:00406385                 mov     [esp+0BCh+var_30], edx
.text:0040638C                 mov     edx, [esp+0BCh+arg_8]
.text:00406393                 mov     [esp+0BCh+var_34], ecx
.text:0040639A                 lea     ecx, [esp+0BCh+var_4C]
.text:0040639E                 mov     [esp+0BCh+var_B8], edx ; char *
.text:004063A2                 mov     edx, [esp+0BCh+arg_0]
.text:004063A9                 mov     [esp+0BCh+var_2C], ebx
.text:004063B0                 mov     [esp+0BCh+var_B0], ecx ; int
.text:004063B4                 mov     [esp+0BCh+var_B4], 0FFFFFFFFh ; int
.text:004063BC                 mov     [esp+0BCh+var_BC], edx ; int
.text:004063BF                 call    sub_406700
.text:004063C4                 add     esp, 0ACh
.text:004063CA                 pop     ebx
.text:004063CB                 pop     esi
.text:004063CC                 pop     edi
.text:004063CD                 pop     ebp
.text:004063CE                 retn
.text:004063CE sub_4062F0      endp
.text:004063CE
.text:004063CE ; ---------------------------------------------------------------------------
.text:004063CF                 align 10h
.text:004063D0                 push    ebp
.text:004063D1                 xor     eax, eax
.text:004063D3                 mov     ecx, 8
.text:004063D8                 push    edi
.text:004063D9                 push    esi
.text:004063DA                 push    ebx
.text:004063DB                 sub     esp, 0ACh
.text:004063E1                 mov     edx, [esp+0C4h]
.text:004063E8                 cld
.text:004063E9                 lea     edi, [esp+14h]
.text:004063ED                 mov     [esp+10h], edx
.text:004063F1                 rep stosd
.text:004063F3                 mov     eax, [esp+30h]
.text:004063F7                 mov     ebp, [esp+10h]
.text:004063FB                 mov     edi, [esp+14h]
.text:004063FF                 mov     [esp+60h], eax
.text:00406403                 mov     esi, [esp+20h]
.text:00406407                 mov     eax, [esp+10h]
.text:0040640B                 mov     [esp+40h], ebp
.text:0040640F                 mov     ecx, [esp+28h]
.text:00406413                 mov     ebp, [esp+18h]
.text:00406417                 mov     [esp+44h], edi
.text:0040641B                 mov     edx, [esp+2Ch]
.text:0040641F                 mov     edi, [esp+1Ch]
.text:00406423                 mov     [esp+70h], eax
.text:00406427                 mov     ebx, [esp+24h]
.text:0040642B                 mov     eax, [esp+14h]
.text:0040642F                 mov     [esp+48h], ebp
.text:00406433                 mov     [esp+4Ch], edi
.text:00406437                 mov     [esp+50h], esi
.text:0040643B                 mov     [esp+54h], ebx
.text:0040643F                 mov     [esp+58h], ecx
.text:00406443                 mov     [esp+5Ch], edx
.text:00406447                 mov     [esp+74h], eax
.text:0040644B                 mov     [esp+78h], ebp
.text:0040644F                 mov     [esp+7Ch], edi
.text:00406453                 mov     [esp+80h], esi
.text:0040645A                 mov     [esp+84h], ebx
.text:00406461                 mov     esi, [esp+30h]
.text:00406465                 lea     ebx, [esp+70h]
.text:00406469                 mov     [esp+8Ch], edx
.text:00406470                 mov     edx, [esp+0C8h]
.text:00406477                 mov     [esp+88h], ecx
.text:0040647E                 mov     ecx, [esp+0CCh]
.text:00406485                 mov     [esp+4], edx
.text:00406489                 mov     edx, [esp+0C0h]
.text:00406490                 mov     [esp+90h], esi
.text:00406497                 mov     [esp+0Ch], ebx
.text:0040649B                 mov     [esp+8], ecx
.text:0040649F                 mov     [esp], edx
.text:004064A2                 call    sub_406700
.text:004064A7                 add     esp, 0ACh
.text:004064AD                 pop     ebx
.text:004064AE                 pop     esi
.text:004064AF                 pop     edi
.text:004064B0                 pop     ebp
.text:004064B1                 retn
.text:004064B1 ; ---------------------------------------------------------------------------
.text:004064B2                 align 10h
.text:004064C0                 push    ebp
.text:004064C1                 xor     eax, eax
.text:004064C3                 mov     ecx, 8
.text:004064C8                 push    edi
.text:004064C9                 push    esi
.text:004064CA                 push    ebx
.text:004064CB                 sub     esp, 0ACh
.text:004064D1                 mov     edi, [esp+0C0h]
.text:004064D8                 cld
.text:004064D9                 mov     [esp+10h], edi
.text:004064DD                 lea     edi, [esp+14h]
.text:004064E1                 rep stosd
.text:004064E3                 mov     eax, [esp+30h]
.text:004064E7                 mov     esi, [esp+10h]
.text:004064EB                 mov     ebx, [esp+14h]
.text:004064EF                 mov     [esp+60h], eax
.text:004064F3                 mov     ebp, [esp+18h]
.text:004064F7                 mov     eax, [esp+10h]
.text:004064FB                 mov     [esp+40h], esi
.text:004064FF                 mov     edi, [esp+1Ch]
.text:00406503                 mov     esi, [esp+20h]
.text:00406507                 mov     [esp+44h], ebx
.text:0040650B                 mov     ecx, [esp+28h]
.text:0040650F                 mov     edx, [esp+2Ch]
.text:00406513                 mov     [esp+70h], eax
.text:00406517                 mov     ebx, [esp+24h]
.text:0040651B                 mov     eax, [esp+14h]
.text:0040651F                 mov     [esp+48h], ebp
.text:00406523                 mov     [esp+4Ch], edi
.text:00406527                 mov     [esp+50h], esi
.text:0040652B                 mov     [esp+54h], ebx
.text:0040652F                 mov     [esp+58h], ecx
.text:00406533                 mov     [esp+5Ch], edx
.text:00406537                 mov     [esp+74h], eax
.text:0040653B                 mov     [esp+78h], ebp
.text:0040653F                 mov     [esp+7Ch], edi
.text:00406543                 mov     [esp+80h], esi
.text:0040654A                 mov     [esp+84h], ebx
.text:00406551                 mov     [esp+8Ch], edx
.text:00406558                 lea     edx, [esp+70h]
.text:0040655C                 mov     [esp+88h], ecx
.text:00406563                 mov     ecx, [esp+30h]
.text:00406567                 mov     [esp+0Ch], edx
.text:0040656B                 mov     edx, [esp+0C4h]
.text:00406572                 mov     [esp+90h], ecx
.text:00406579                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00406581                 mov     [esp+4], edx
.text:00406585                 mov     dword ptr [esp], 0
.text:0040658C                 call    sub_406700
.text:00406591                 add     esp, 0ACh
.text:00406597                 pop     ebx
.text:00406598                 pop     esi
.text:00406599                 pop     edi
.text:0040659A                 pop     ebp
.text:0040659B                 retn
.text:0040659B ; ---------------------------------------------------------------------------
.text:0040659C                 align 10h
.text:004065A0                 push    edi
.text:004065A1                 push    esi
.text:004065A2                 push    ebx
.text:004065A3                 sub     esp, 40h
.text:004065A6                 mov     edx, ds:dword_4122EC
.text:004065AC                 mov     ebx, ds:dword_4122E0
.text:004065B2                 mov     esi, ds:dword_4122E8
.text:004065B8                 mov     edi, ds:dword_4122E4
.text:004065BE                 mov     [esp+1Ch], edx
.text:004065C2                 mov     ecx, ds:dword_4122F0
.text:004065C8                 mov     edx, ds:dword_412300
.text:004065CE                 mov     [esp+10h], ebx
.text:004065D2                 mov     ebx, ds:dword_4122F4
.text:004065D8                 mov     [esp+30h], edx
.text:004065DC                 movzx   edx, byte ptr [esp+54h]
.text:004065E1                 mov     [esp+18h], esi
.text:004065E5                 mov     esi, ds:dword_4122FC
.text:004065EB                 mov     [esp+14h], edi
.text:004065EF                 mov     edi, ds:dword_4122F8
.text:004065F5                 mov     [esp+20h], ecx
.text:004065F9                 mov     cl, dl
.text:004065FB                 shr     cl, 5
.text:004065FE                 mov     [esp+24h], ebx
.text:00406602                 movzx   ebx, cl
.text:00406605                 mov     [esp+2Ch], esi
.text:00406609                 lea     esi, [esp+10h]
.text:0040660D                 mov     [esp+28h], edi
.text:00406611                 lea     edi, [esi+ebx*4]
.text:00406614                 mov     ebx, edx
.text:00406616                 mov     edx, [edi+4]
.text:00406619                 and     ebx, 1Fh
.text:0040661C                 mov     cl, bl
.text:0040661E                 mov     eax, edx
.text:00406620                 shr     eax, cl
.text:00406622                 and     eax, 1
.text:00406625                 xor     eax, 1
.text:00406628                 shl     eax, cl
.text:0040662A                 xor     edx, eax
.text:0040662C                 mov     [edi+4], edx
.text:0040662F                 mov     edx, [esp+50h]
.text:00406633                 mov     [esp+0Ch], esi
.text:00406637                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:0040663F                 mov     [esp+4], edx
.text:00406643                 mov     dword ptr [esp], 0
.text:0040664A                 call    sub_406700
.text:0040664F                 add     esp, 40h
.text:00406652                 pop     ebx
.text:00406653                 pop     esi
.text:00406654                 pop     edi
.text:00406655                 retn
.text:00406655 ; ---------------------------------------------------------------------------
.text:00406656                 align 10h
.text:00406660
.text:00406660 ; =============== S U B R O U T I N E =======================================
.text:00406660
.text:00406660
.text:00406660 ; int __cdecl sub_406660(char *)
.text:00406660 sub_406660      proc near               ; CODE XREF: sub_404F90+64↑p
.text:00406660
.text:00406660 var_4C          = dword ptr -4Ch
.text:00406660 var_48          = dword ptr -48h
.text:00406660 var_44          = dword ptr -44h
.text:00406660 var_40          = dword ptr -40h
.text:00406660 var_3C          = dword ptr -3Ch
.text:00406660 var_38          = dword ptr -38h
.text:00406660 var_34          = dword ptr -34h
.text:00406660 var_30          = dword ptr -30h
.text:00406660 var_2C          = dword ptr -2Ch
.text:00406660 var_28          = dword ptr -28h
.text:00406660 var_24          = dword ptr -24h
.text:00406660 var_20          = dword ptr -20h
.text:00406660 var_1C          = dword ptr -1Ch
.text:00406660 arg_0           = dword ptr  4
.text:00406660
.text:00406660                 sub     esp, 4Ch
.text:00406663                 mov     ecx, ds:dword_4122E0
.text:00406669                 mov     [esp+4Ch+var_44], 0FFFFFFFFh ; int
.text:00406671                 mov     edx, ds:dword_4122E4
.text:00406677                 mov     [esp+4Ch+var_4C], 0 ; int
.text:0040667E                 mov     [esp+4Ch+var_3C], ecx
.text:00406682                 mov     ecx, ds:dword_4122EC
.text:00406688                 mov     [esp+4Ch+var_38], edx
.text:0040668C                 mov     edx, ds:dword_4122E8
.text:00406692                 mov     [esp+4Ch+var_30], ecx
.text:00406696                 mov     ecx, ds:dword_4122F0
.text:0040669C                 mov     eax, edx
.text:0040669E                 shr     eax, 1Ah
.text:004066A1                 and     eax, 1
.text:004066A4                 xor     eax, 1
.text:004066A7                 mov     [esp+4Ch+var_2C], ecx
.text:004066AB                 shl     eax, 1Ah
.text:004066AE                 mov     ecx, ds:dword_4122F4
.text:004066B4                 xor     edx, eax
.text:004066B6                 mov     [esp+4Ch+var_34], edx
.text:004066BA                 mov     edx, [esp+4Ch+arg_0]
.text:004066BE                 mov     [esp+4Ch+var_28], ecx
.text:004066C2                 mov     ecx, ds:dword_4122F8
.text:004066C8                 mov     [esp+4Ch+var_48], edx ; char *
.text:004066CC                 mov     [esp+4Ch+var_24], ecx
.text:004066D0                 mov     ecx, ds:dword_4122FC
.text:004066D6                 mov     [esp+4Ch+var_20], ecx
.text:004066DA                 mov     ecx, ds:dword_412300
.text:004066E0                 mov     [esp+4Ch+var_1C], ecx
.text:004066E4                 lea     ecx, [esp+4Ch+var_3C]
.text:004066E8                 mov     [esp+4Ch+var_40], ecx ; int
.text:004066EC                 call    sub_406700
.text:004066F1                 add     esp, 4Ch
.text:004066F4                 retn
.text:004066F4 sub_406660      endp
.text:004066F4
.text:004066F4 ; ---------------------------------------------------------------------------
.text:004066F5                 align 10h
.text:00406700
.text:00406700 ; =============== S U B R O U T I N E =======================================
.text:00406700
.text:00406700
.text:00406700 ; int __cdecl sub_406700(int, char *, int, int)
.text:00406700 sub_406700      proc near               ; CODE XREF: .text:004062B2↑p
.text:00406700                                         ; .text:004062E2↑p ...
.text:00406700
.text:00406700 Block           = dword ptr -2Ch
.text:00406700 var_28          = dword ptr -28h
.text:00406700 Str             = dword ptr -24h
.text:00406700 var_20          = dword ptr -20h
.text:00406700 var_1C          = dword ptr -1Ch
.text:00406700 var_18          = dword ptr -18h
.text:00406700 var_14          = dword ptr -14h
.text:00406700 arg_0           = dword ptr  4
.text:00406700 arg_4           = dword ptr  8
.text:00406700 arg_8           = dword ptr  0Ch
.text:00406700 arg_C           = dword ptr  10h
.text:00406700
.text:00406700                 push    ebp
.text:00406701                 push    edi
.text:00406702                 push    esi
.text:00406703                 push    ebx
.text:00406704                 sub     esp, 1Ch
.text:00406707                 call    _errno
.text:0040670C                 mov     edx, [eax]
.text:0040670E                 mov     eax, [esp+2Ch+arg_0]
.text:00406712                 mov     [esp+2Ch+var_14], edx
.text:00406716                 test    eax, eax
.text:00406718                 js      loc_4068BA
.text:0040671E                 mov     eax, [esp+2Ch+arg_0]
.text:00406722                 cmp     dword_411040, eax
.text:00406728                 ja      short loc_4067A0
.text:0040672A                 mov     esi, eax
.text:0040672C                 inc     esi
.text:0040672D                 cmp     esi, 1FFFFFFFh
.text:00406733                 ja      loc_4068BF
.text:00406739                 mov     ebx, off_41104C
.text:0040673F                 cmp     ebx, offset dword_411044
.text:00406745                 jz      loc_406891
.text:0040674B
.text:0040674B loc_40674B:                             ; CODE XREF: sub_406700+1B5↓j
.text:0040674B                 mov     [esp+2Ch+Block], ebx ; void *
.text:0040674E                 lea     ecx, ds:0[esi*8]
.text:00406755                 mov     ebp, esi
.text:00406757                 mov     [esp+2Ch+var_28], ecx ; size_t
.text:0040675B                 call    sub_405140
.text:00406760                 mov     off_41104C, eax
.text:00406765                 mov     ebx, dword_411040
.text:0040676B                 sub     ebp, ebx
.text:0040676D                 lea     edi, [eax+ebx*8]
.text:00406770                 lea     eax, ds:0[ebp*8]
.text:00406777                 cmp     eax, 7
.text:0040677A                 jbe     short loc_406790
.text:0040677C                 test    edi, 4
.text:00406782                 jz      short loc_406790
.text:00406784                 mov     dword ptr [edi], 0
.text:0040678A                 sub     eax, 4
.text:0040678D                 add     edi, 4
.text:00406790
.text:00406790 loc_406790:                             ; CODE XREF: sub_406700+7A↑j
.text:00406790                                         ; sub_406700+82↑j
.text:00406790                 cld
.text:00406791                 mov     ecx, eax
.text:00406793                 shr     ecx, 2
.text:00406796                 xor     eax, eax
.text:00406798                 rep stosd
.text:0040679A                 mov     dword_411040, esi
.text:004067A0
.text:004067A0 loc_4067A0:                             ; CODE XREF: sub_406700+28↑j
.text:004067A0                 mov     esi, off_41104C
.text:004067A6                 mov     eax, [esp+2Ch+arg_0]
.text:004067AA                 mov     ebp, [esi+eax*8]
.text:004067AD                 mov     edi, [esi+eax*8+4]
.text:004067B1                 mov     esi, [esp+2Ch+arg_C]
.text:004067B5                 test    esi, esi
.text:004067B7                 jz      loc_406887
.text:004067BD
.text:004067BD loc_4067BD:                             ; CODE XREF: sub_406700+18C↓j
.text:004067BD                 call    _errno
.text:004067C2                 mov     ebx, [eax]
.text:004067C4                 mov     [esp+2Ch+var_18], esi ; int
.text:004067C8                 mov     ecx, [esi]
.text:004067CA                 mov     [esp+2Ch+Block], edi ; int
.text:004067CD                 mov     edx, [esp+2Ch+arg_8]
.text:004067D1                 mov     [esp+2Ch+var_28], ebp ; int
.text:004067D5                 mov     [esp+2Ch+var_1C], ecx ; int
.text:004067D9                 mov     ecx, [esp+2Ch+arg_4]
.text:004067DD                 mov     [esp+2Ch+var_20], edx ; int
.text:004067E1                 mov     [esp+2Ch+Str], ecx ; Str
.text:004067E5                 call    sub_4055C0
.text:004067EA                 mov     esi, eax
.text:004067EC                 call    _errno
.text:004067F1                 mov     [eax], ebx
.text:004067F3                 cmp     ebp, esi
.text:004067F5                 ja      short loc_40686B
.text:004067F7                 lea     ebp, [esi+1]
.text:004067FA                 mov     ebx, off_41104C
.text:00406800                 cmp     edi, offset unk_4121E0
.text:00406806                 mov     esi, [esp+2Ch+arg_0]
.text:0040680A                 mov     [ebx+esi*8], ebp
.text:0040680D                 jz      short loc_40681D
.text:0040680F                 mov     [esp+2Ch+Block], edi ; Block
.text:00406812                 call    free
.text:00406817                 mov     ebx, off_41104C
.text:0040681D
.text:0040681D loc_40681D:                             ; CODE XREF: sub_406700+10D↑j
.text:0040681D                 mov     [esp+2Ch+Block], ebp ; size_t
.text:00406820                 call    sub_4050B0
.text:00406825                 mov     esi, [esp+2Ch+arg_C]
.text:00406829                 mov     edi, eax
.text:0040682B                 mov     eax, [esp+2Ch+arg_0]
.text:0040682F                 test    esi, esi
.text:00406831                 mov     [ebx+eax*8+4], edi
.text:00406835                 jz      short loc_406880
.text:00406837
.text:00406837 loc_406837:                             ; CODE XREF: sub_406700+185↓j
.text:00406837                 call    _errno
.text:0040683C                 mov     ebx, [eax]
.text:0040683E                 mov     [esp+2Ch+var_18], esi ; int
.text:00406842                 mov     ecx, [esi]
.text:00406844                 mov     [esp+2Ch+Block], edi ; int
.text:00406847                 mov     edx, [esp+2Ch+arg_8]
.text:0040684B                 mov     [esp+2Ch+var_28], ebp ; int
.text:0040684F                 mov     [esp+2Ch+var_1C], ecx ; int
.text:00406853                 mov     ecx, [esp+2Ch+arg_4]
.text:00406857                 mov     [esp+2Ch+var_20], edx ; int
.text:0040685B                 mov     [esp+2Ch+Str], ecx ; Str
.text:0040685F                 call    sub_4055C0
.text:00406864                 call    _errno
.text:00406869                 mov     [eax], ebx
.text:0040686B
.text:0040686B loc_40686B:                             ; CODE XREF: sub_406700+F5↑j
.text:0040686B                 call    _errno
.text:00406870                 mov     ebp, [esp+2Ch+var_14]
.text:00406874                 mov     [eax], ebp
.text:00406876                 add     esp, 1Ch
.text:00406879                 mov     eax, edi
.text:0040687B                 pop     ebx
.text:0040687C                 pop     esi
.text:0040687D                 pop     edi
.text:0040687E                 pop     ebp
.text:0040687F                 retn
.text:00406880 ; ---------------------------------------------------------------------------
.text:00406880
.text:00406880 loc_406880:                             ; CODE XREF: sub_406700+135↑j
.text:00406880                 mov     esi, offset dword_4122E0
.text:00406885                 jmp     short loc_406837
.text:00406887 ; ---------------------------------------------------------------------------
.text:00406887
.text:00406887 loc_406887:                             ; CODE XREF: sub_406700+B7↑j
.text:00406887                 mov     esi, offset dword_4122E0
.text:0040688C                 jmp     loc_4067BD
.text:00406891 ; ---------------------------------------------------------------------------
.text:00406891
.text:00406891 loc_406891:                             ; CODE XREF: sub_406700+45↑j
.text:00406891                 mov     [esp+2Ch+Block], 8 ; size_t
.text:00406898                 call    sub_4050B0
.text:0040689D                 mov     off_41104C, eax
.text:004068A2                 mov     edi, dword_411044
.text:004068A8                 mov     ebx, eax
.text:004068AA                 mov     ecx, off_411048
.text:004068B0                 mov     [eax], edi
.text:004068B2                 mov     [eax+4], ecx
.text:004068B5                 jmp     loc_40674B
.text:004068BA ; ---------------------------------------------------------------------------
.text:004068BA
.text:004068BA loc_4068BA:                             ; CODE XREF: sub_406700+18↑j
.text:004068BA                 call    abort
.text:004068BF ; ---------------------------------------------------------------------------
.text:004068BF
.text:004068BF loc_4068BF:                             ; CODE XREF: sub_406700+33↑j
.text:004068BF                 call    sub_405430
.text:004068BF sub_406700      endp
.text:004068BF
.text:004068BF ; ---------------------------------------------------------------------------
.text:004068C4                 align 10h
.text:004068D0
.text:004068D0 ; =============== S U B R O U T I N E =======================================
.text:004068D0
.text:004068D0 ; Attributes: thunk
.text:004068D0
.text:004068D0 libintl_bindtextdomain proc near
.text:004068D0                 jmp     ds:__imp_libintl_bindtextdomain
.text:004068D0 libintl_bindtextdomain endp
.text:004068D0
.text:004068D0 ; ---------------------------------------------------------------------------
.text:004068D6                 align 10h
.text:004068E0                 jmp     ds:libintl_textdomain
.text:004068E0 ; ---------------------------------------------------------------------------
.text:004068E6                 align 10h
.text:004068F0                 jmp     ds:libintl_gettext
.text:004068F0 ; ---------------------------------------------------------------------------
.text:004068F6                 align 10h
.text:00406900 ; const char aS_1[]
.text:00406900 aS_1            db ': %s',0             ; DATA XREF: sub_406920+B8↓o
.text:00406900                                         ; sub_406A24+122↓o
.text:00406905 aUnknownSystemE db 'Unknown system error',0
.text:00406905                                         ; DATA XREF: sub_406920:loc_4069ED↓o
.text:00406905                                         ; sub_406A24:loc_406B5E↓o
.text:0040691A ; const char aS_2[]
.text:0040691A aS_2            db '%s: ',0             ; DATA XREF: sub_406920:loc_4069F4↓o
.text:0040691F                 align 10h
.text:00406920
.text:00406920 ; =============== S U B R O U T I N E =======================================
.text:00406920
.text:00406920
.text:00406920 ; int __cdecl sub_406920(int Code, int ErrorMessage, char *, char)
.text:00406920 sub_406920      proc near               ; CODE XREF: sub_401B10+365↑p
.text:00406920                                         ; sub_401B10+4FE↑p ...
.text:00406920
.text:00406920 Stream          = dword ptr -1Ch
.text:00406920 Format          = dword ptr -18h
.text:00406920 ArgList         = dword ptr -14h
.text:00406920 Code            = dword ptr  4
.text:00406920 ErrorMessage    = dword ptr  8
.text:00406920 arg_8           = dword ptr  0Ch
.text:00406920 arg_C           = byte ptr  10h
.text:00406920
.text:00406920                 push    esi
.text:00406921                 push    ebx
.text:00406922                 sub     esp, 14h
.text:00406925                 mov     edx, ds:_iob
.text:0040692B                 mov     esi, [esp+1Ch+Code]
.text:0040692F                 mov     ebx, [esp+1Ch+ErrorMessage]
.text:00406933                 add     edx, 20h ; ' '
.text:00406936                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00406939                 call    fflush
.text:0040693E                 mov     eax, ds:dword_412820
.text:00406943                 test    eax, eax
.text:00406945                 jz      loc_4069F4
.text:0040694B                 call    eax ; dword_412820
.text:0040694D
.text:0040694D loc_40694D:                             ; CODE XREF: sub_406920+F7↓j
.text:0040694D                 lea     edx, [esp+1Ch+arg_C]
.text:00406951                 mov     ecx, [esp+1Ch+arg_8]
.text:00406955                 mov     [esp+1Ch+ArgList], edx ; ArgList
.text:00406959                 mov     edx, ds:_iob
.text:0040695F                 mov     [esp+1Ch+Format], ecx ; Format
.text:00406963                 add     edx, 40h ; '@'
.text:00406966                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00406969                 call    vfprintf
.text:0040696E                 inc     ds:dword_412830
.text:00406974                 test    ebx, ebx
.text:00406976                 jnz     short loc_4069C2
.text:00406978
.text:00406978 loc_406978:                             ; CODE XREF: sub_406920+CB↓j
.text:00406978                 mov     edx, ds:_iob
.text:0040697E                 lea     ecx, [edx+40h]
.text:00406981                 mov     ebx, [ecx+4]
.text:00406984                 dec     ebx
.text:00406985                 test    ebx, ebx
.text:00406987                 mov     [ecx+4], ebx
.text:0040698A                 js      short loc_4069B0
.text:0040698C                 mov     ecx, [edx+40h]
.text:0040698F                 mov     byte ptr [ecx], 0Ah
.text:00406992                 inc     dword ptr [edx+40h]
.text:00406995
.text:00406995 loc_406995:                             ; CODE XREF: sub_406920+A0↓j
.text:00406995                 mov     edx, ds:_iob
.text:0040699B                 add     edx, 40h ; '@'
.text:0040699E                 mov     [esp+1Ch+Stream], edx ; Stream
.text:004069A1                 call    fflush
.text:004069A6                 test    esi, esi
.text:004069A8                 jnz     short loc_406A1C
.text:004069AA                 add     esp, 14h
.text:004069AD                 pop     ebx
.text:004069AE                 pop     esi
.text:004069AF                 retn
.text:004069B0 ; ---------------------------------------------------------------------------
.text:004069B0
.text:004069B0 loc_4069B0:                             ; CODE XREF: sub_406920+6A↑j
.text:004069B0                 mov     [esp+1Ch+Format], ecx ; File
.text:004069B4                 mov     [esp+1Ch+Stream], 0Ah ; Ch
.text:004069BB                 call    _flsbuf
.text:004069C0                 jmp     short loc_406995
.text:004069C2 ; ---------------------------------------------------------------------------
.text:004069C2
.text:004069C2 loc_4069C2:                             ; CODE XREF: sub_406920+56↑j
.text:004069C2                 mov     [esp+1Ch+Stream], ebx ; ErrorMessage
.text:004069C5                 call    strerror
.text:004069CA                 test    eax, eax
.text:004069CC                 jz      short loc_4069ED
.text:004069CE
.text:004069CE loc_4069CE:                             ; CODE XREF: sub_406920+D2↓j
.text:004069CE                 mov     [esp+1Ch+ArgList], eax
.text:004069D2                 mov     ebx, ds:_iob
.text:004069D8                 mov     [esp+1Ch+Format], offset aS_1 ; ": %s"
.text:004069E0                 add     ebx, 40h ; '@'
.text:004069E3                 mov     [esp+1Ch+Stream], ebx ; Stream
.text:004069E6                 call    fprintf
.text:004069EB                 jmp     short loc_406978
.text:004069ED ; ---------------------------------------------------------------------------
.text:004069ED
.text:004069ED loc_4069ED:                             ; CODE XREF: sub_406920+AC↑j
.text:004069ED                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:004069F2                 jmp     short loc_4069CE
.text:004069F4 ; ---------------------------------------------------------------------------
.text:004069F4
.text:004069F4 loc_4069F4:                             ; CODE XREF: sub_406920+25↑j
.text:004069F4                 mov     [esp+1Ch+Format], offset aS_2 ; "%s: "
.text:004069FC                 mov     edx, ds:_iob
.text:00406A02                 mov     ecx, ds:dword_4127F0
.text:00406A08                 add     edx, 40h ; '@'
.text:00406A0B                 mov     [esp+1Ch+ArgList], ecx
.text:00406A0F                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00406A12                 call    fprintf
.text:00406A17                 jmp     loc_40694D
.text:00406A1C ; ---------------------------------------------------------------------------
.text:00406A1C
.text:00406A1C loc_406A1C:                             ; CODE XREF: sub_406920+88↑j
.text:00406A1C                 mov     [esp+1Ch+Stream], esi ; Code
.text:00406A1F                 call    exit
.text:00406A1F sub_406920      endp
.text:00406A1F
.text:00406A24
.text:00406A24 ; =============== S U B R O U T I N E =======================================
.text:00406A24
.text:00406A24
.text:00406A24 ; int __cdecl sub_406A24(int, int Code, int ErrorMessage, char *Str2, int, char *, char)
.text:00406A24 sub_406A24      proc near               ; DATA XREF: sub_406A24+77↓o
.text:00406A24
.text:00406A24 Stream          = dword ptr -28h
.text:00406A24 Format          = dword ptr -24h
.text:00406A24 ArgList         = dword ptr -20h
.text:00406A24 var_1C          = dword ptr -1Ch
.text:00406A24 Code            = dword ptr  8
.text:00406A24 ErrorMessage    = dword ptr  0Ch
.text:00406A24 Str2            = dword ptr  10h
.text:00406A24 arg_10          = dword ptr  14h
.text:00406A24 arg_14          = dword ptr  18h
.text:00406A24 arg_18          = byte ptr  1Ch
.text:00406A24
.text:00406A24                 and     eax, 64253A73h
.text:00406A29                 cmp     ah, [eax]
.text:00406A2B
.text:00406A2B loc_406A2B:                             ; DATA XREF: sub_406A24:loc_406B65↓o
.text:00406A2B                 add     ds:55003A73h, ah
.text:00406A31                 push    edi
.text:00406A32                 push    esi
.text:00406A33                 push    ebx
.text:00406A34                 sub     esp, 1Ch
.text:00406A37                 mov     edx, ds:dword_412860
.text:00406A3D                 mov     ebp, [esp+28h+Code]
.text:00406A41                 mov     edi, [esp+28h+ErrorMessage]
.text:00406A45                 test    edx, edx
.text:00406A47                 mov     ebx, [esp+28h+Str2]
.text:00406A4B                 mov     esi, [esp+28h+arg_10]
.text:00406A4F                 jz      short loc_406A69
.text:00406A51                 cmp     ds:dword_412320, esi
.text:00406A57                 jz      loc_406B90
.text:00406A5D
.text:00406A5D loc_406A5D:                             ; CODE XREF: sub_406A24+18D↓j
.text:00406A5D                 mov     ds:Str1, ebx
.text:00406A63                 mov     ds:dword_412320, esi
.text:00406A69
.text:00406A69 loc_406A69:                             ; CODE XREF: sub_406A24+2B↑j
.text:00406A69                 mov     edx, ds:_iob
.text:00406A6F                 add     edx, 20h ; ' '
.text:00406A72                 mov     [esp+28h+Stream], edx ; Stream
.text:00406A75                 call    fflush
.text:00406A7A                 mov     eax, ds:dword_412820
.text:00406A7F                 test    eax, eax
.text:00406A81                 jz      loc_406B65
.text:00406A87                 call    eax ; dword_412820
.text:00406A89
.text:00406A89 loc_406A89:                             ; CODE XREF: sub_406A24+164↓j
.text:00406A89                 test    ebx, ebx
.text:00406A8B                 jz      short loc_406AAE
.text:00406A8D                 mov     [esp+28h+ArgList], ebx
.text:00406A91                 mov     ebx, ds:_iob
.text:00406A97                 mov     [esp+28h+var_1C], esi
.text:00406A9B                 mov     [esp+28h+Format], offset sub_406A24 ; Format
.text:00406AA3                 add     ebx, 40h ; '@'
.text:00406AA6                 mov     [esp+28h+Stream], ebx ; Stream
.text:00406AA9                 call    fprintf
.text:00406AAE
.text:00406AAE loc_406AAE:                             ; CODE XREF: sub_406A24+67↑j
.text:00406AAE                 mov     esi, ds:_iob
.text:00406AB4                 lea     edx, [esp+28h+arg_18]
.text:00406AB8                 mov     ecx, [esp+28h+arg_14]
.text:00406ABC                 mov     [esp+28h+ArgList], edx ; ArgList
.text:00406AC0                 add     esi, 40h ; '@'
.text:00406AC3                 mov     [esp+28h+Format], ecx ; Format
.text:00406AC7                 mov     [esp+28h+Stream], esi ; Stream
.text:00406ACA                 call    vfprintf
.text:00406ACF                 inc     ds:dword_412830
.text:00406AD5                 test    edi, edi
.text:00406AD7                 jnz     short loc_406B30
.text:00406AD9
.text:00406AD9 loc_406AD9:                             ; CODE XREF: sub_406A24+135↓j
.text:00406AD9                 mov     edx, ds:_iob
.text:00406ADF                 lea     ecx, [edx+40h]
.text:00406AE2                 mov     ebx, [ecx+4]
.text:00406AE5                 dec     ebx
.text:00406AE6                 test    ebx, ebx
.text:00406AE8                 mov     [ecx+4], ebx
.text:00406AEB                 js      short loc_406B17
.text:00406AED                 mov     esi, [edx+40h]
.text:00406AF0                 mov     byte ptr [esi], 0Ah
.text:00406AF3                 inc     dword ptr [edx+40h]
.text:00406AF6
.text:00406AF6 loc_406AF6:                             ; CODE XREF: sub_406A24+103↓j
.text:00406AF6                 mov     ecx, ds:_iob
.text:00406AFC                 add     ecx, 40h ; '@'
.text:00406AFF                 mov     [esp+28h+Stream], ecx ; Stream
.text:00406B02                 call    fflush
.text:00406B07                 test    ebp, ebp
.text:00406B09                 jnz     loc_406BB6
.text:00406B0F
.text:00406B0F loc_406B0F:                             ; CODE XREF: sub_406A24+173↓j
.text:00406B0F                                         ; sub_406A24+187↓j
.text:00406B0F                 add     esp, 1Ch
.text:00406B12                 pop     ebx
.text:00406B13                 pop     esi
.text:00406B14                 pop     edi
.text:00406B15                 pop     ebp
.text:00406B16                 retn
.text:00406B17 ; ---------------------------------------------------------------------------
.text:00406B17
.text:00406B17 loc_406B17:                             ; CODE XREF: sub_406A24+C7↑j
.text:00406B17                 mov     [esp+28h+Format], ecx ; File
.text:00406B1B                 mov     [esp+28h+Stream], 0Ah ; Ch
.text:00406B22                 call    _flsbuf
.text:00406B27                 jmp     short loc_406AF6
.text:00406B27 ; ---------------------------------------------------------------------------
.text:00406B29                 align 10h
.text:00406B30
.text:00406B30 loc_406B30:                             ; CODE XREF: sub_406A24+B3↑j
.text:00406B30                 mov     [esp+28h+Stream], edi ; ErrorMessage
.text:00406B33                 call    strerror
.text:00406B38                 test    eax, eax
.text:00406B3A                 jz      short loc_406B5E
.text:00406B3C
.text:00406B3C loc_406B3C:                             ; CODE XREF: sub_406A24+13F↓j
.text:00406B3C                 mov     [esp+28h+ArgList], eax
.text:00406B40                 mov     edi, ds:_iob
.text:00406B46                 mov     [esp+28h+Format], offset aS_1 ; ": %s"
.text:00406B4E                 add     edi, 40h ; '@'
.text:00406B51                 mov     [esp+28h+Stream], edi ; Stream
.text:00406B54                 call    fprintf
.text:00406B59                 jmp     loc_406AD9
.text:00406B5E ; ---------------------------------------------------------------------------
.text:00406B5E
.text:00406B5E loc_406B5E:                             ; CODE XREF: sub_406A24+116↑j
.text:00406B5E                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:00406B63                 jmp     short loc_406B3C
.text:00406B65 ; ---------------------------------------------------------------------------
.text:00406B65
.text:00406B65 loc_406B65:                             ; CODE XREF: sub_406A24+5D↑j
.text:00406B65                 mov     [esp+28h+Format], (offset loc_406A2B+1) ; Format
.text:00406B6D                 mov     ecx, ds:_iob
.text:00406B73                 mov     edx, ds:dword_4127F0
.text:00406B79                 add     ecx, 40h ; '@'
.text:00406B7C                 mov     [esp+28h+ArgList], edx
.text:00406B80                 mov     [esp+28h+Stream], ecx ; Stream
.text:00406B83                 call    fprintf
.text:00406B88                 jmp     loc_406A89
.text:00406B88 ; ---------------------------------------------------------------------------
.text:00406B8D                 align 10h
.text:00406B90
.text:00406B90 loc_406B90:                             ; CODE XREF: sub_406A24+33↑j
.text:00406B90                 mov     eax, ds:Str1
.text:00406B95                 cmp     ebx, eax
.text:00406B97                 jz      loc_406B0F
.text:00406B9D                 mov     [esp+28h+Format], ebx ; Str2
.text:00406BA1                 mov     [esp+28h+Stream], eax ; Str1
.text:00406BA4                 call    strcmp
.text:00406BA9                 test    eax, eax
.text:00406BAB                 jz      loc_406B0F
.text:00406BB1                 jmp     loc_406A5D
.text:00406BB6 ; ---------------------------------------------------------------------------
.text:00406BB6
.text:00406BB6 loc_406BB6:                             ; CODE XREF: sub_406A24+E5↑j
.text:00406BB6                 mov     [esp+28h+Stream], ebp ; Code
.text:00406BB9                 call    exit
.text:00406BB9 sub_406A24      endp ; sp-analysis failed
.text:00406BB9
.text:00406BB9 ; ---------------------------------------------------------------------------
.text:00406BBE                 align 10h
.text:00406BC0
.text:00406BC0 ; =============== S U B R O U T I N E =======================================
.text:00406BC0
.text:00406BC0
.text:00406BC0 ; int __cdecl sub_406BC0(char *, int)
.text:00406BC0 sub_406BC0      proc near               ; CODE XREF: .text:004032A1↑p
.text:00406BC0
.text:00406BC0 var_C           = dword ptr -0Ch
.text:00406BC0 var_8           = dword ptr -8
.text:00406BC0 var_4           = dword ptr -4
.text:00406BC0 arg_0           = dword ptr  4
.text:00406BC0 arg_4           = dword ptr  8
.text:00406BC0
.text:00406BC0                 sub     esp, 0Ch
.text:00406BC3                 mov     edx, [esp+0Ch+arg_4]
.text:00406BC7                 mov     [esp+0Ch+var_C], 0 ; LPCSTR
.text:00406BCE                 mov     [esp+0Ch+var_4], edx ; int
.text:00406BD2                 mov     edx, [esp+0Ch+arg_0]
.text:00406BD6                 mov     [esp+0Ch+var_8], edx ; char *
.text:00406BDA                 call    sub_406BF0
.text:00406BDF                 add     esp, 0Ch
.text:00406BE2                 retn
.text:00406BE2 sub_406BC0      endp
.text:00406BE2
.text:00406BE2 ; ---------------------------------------------------------------------------
.text:00406BE3                 align 10h
.text:00406BF0
.text:00406BF0 ; =============== S U B R O U T I N E =======================================
.text:00406BF0
.text:00406BF0
.text:00406BF0 ; int __cdecl sub_406BF0(LPCSTR, char *, int)
.text:00406BF0 sub_406BF0      proc near               ; CODE XREF: sub_406BC0+1A↑p
.text:00406BF0                                         ; sub_40D2B0+104↓p ...
.text:00406BF0
.text:00406BF0 var_13C         = dword ptr -13Ch
.text:00406BF0 lpString1       = dword ptr -138h
.text:00406BF0 var_134         = dword ptr -134h
.text:00406BF0 String1         = byte ptr -12Ch
.text:00406BF0 var_10          = dword ptr -10h
.text:00406BF0 var_C           = dword ptr -0Ch
.text:00406BF0 var_8           = dword ptr -8
.text:00406BF0 var_4           = dword ptr -4
.text:00406BF0 arg_0           = dword ptr  4
.text:00406BF0 arg_4           = dword ptr  8
.text:00406BF0 arg_8           = dword ptr  0Ch
.text:00406BF0
.text:00406BF0                 sub     esp, 13Ch
.text:00406BF6                 mov     [esp+13Ch+var_10], ebx
.text:00406BFD                 mov     ebx, [esp+13Ch+arg_8]
.text:00406C04                 mov     [esp+13Ch+var_C], esi
.text:00406C0B                 mov     esi, [esp+13Ch+arg_4]
.text:00406C12                 mov     [esp+13Ch+var_8], edi
.text:00406C19                 mov     edi, [esp+13Ch+arg_0]
.text:00406C20                 mov     [esp+13Ch+var_4], ebp
.text:00406C27                 mov     [esp+13Ch+var_134], ebx ; int
.text:00406C2B                 mov     [esp+13Ch+lpString1], esi ; int
.text:00406C2F                 mov     [esp+13Ch+var_13C], edi ; LPCSTR
.text:00406C32                 call    sub_406FA0
.text:00406C37                 cmp     eax, 0FFFFFFFFh
.text:00406C3A                 mov     edx, eax
.text:00406C3C                 jz      short loc_406C4E
.text:00406C3E                 mov     ecx, [ebx]
.text:00406C40                 and     ecx, 0F000h
.text:00406C46                 cmp     ecx, 0A000h
.text:00406C4C                 jz      short loc_406C73
.text:00406C4E
.text:00406C4E loc_406C4E:                             ; CODE XREF: sub_406BF0+4C↑j
.text:00406C4E                                         ; sub_406BF0+A1↓j ...
.text:00406C4E                 mov     ebx, [esp+13Ch+var_10]
.text:00406C55                 mov     eax, edx
.text:00406C57                 mov     esi, [esp+13Ch+var_C]
.text:00406C5E                 mov     edi, [esp+13Ch+var_8]
.text:00406C65                 mov     ebp, [esp+13Ch+var_4]
.text:00406C6C                 add     esp, 13Ch
.text:00406C72                 retn
.text:00406C73 ; ---------------------------------------------------------------------------
.text:00406C73
.text:00406C73 loc_406C73:                             ; CODE XREF: sub_406BF0+5C↑j
.text:00406C73                 mov     [esp+13Ch+var_134], 104h
.text:00406C7B                 lea     ebp, [esp+13Ch+String1]
.text:00406C7F                 mov     [esp+13Ch+lpString1], ebp ; lpString1
.text:00406C83                 mov     [esp+13Ch+var_13C], esi ; char *
.text:00406C86                 call    sub_406EC0
.text:00406C8B                 inc     eax
.text:00406C8C                 mov     edx, 0FFFFFFFFh
.text:00406C91                 jz      short loc_406C4E
.text:00406C93                 mov     [esp+13Ch+var_134], ebx ; int
.text:00406C97                 mov     [esp+13Ch+lpString1], ebp ; int
.text:00406C9B                 mov     [esp+13Ch+var_13C], edi ; LPCSTR
.text:00406C9E                 call    sub_406FA0
.text:00406CA3                 mov     edx, eax
.text:00406CA5                 jmp     short loc_406C4E
.text:00406CA5 sub_406BF0      endp
.text:00406CA5
.text:00406CA5 ; ---------------------------------------------------------------------------
.text:00406CA7                 align 10h
.text:00406CB0 dword_406CB0    dd 4E4F43h, 0B68Dh, 0BF8D0000h, 0
.text:00406CB0                                         ; DATA XREF: .data:off_411060↓o
.text:00406CC0
.text:00406CC0 ; =============== S U B R O U T I N E =======================================
.text:00406CC0
.text:00406CC0
.text:00406CC0 sub_406CC0      proc near               ; CODE XREF: sub_402560+93D↑p
.text:00406CC0                 mov     eax, off_411060
.text:00406CC5                 retn
.text:00406CC5 sub_406CC0      endp
.text:00406CC5
.text:00406CC5 ; ---------------------------------------------------------------------------
.text:00406CC6                 align 10h
.text:00406CD0
.text:00406CD0 ; =============== S U B R O U T I N E =======================================
.text:00406CD0
.text:00406CD0
.text:00406CD0 sub_406CD0      proc near               ; CODE XREF: .text:0040336B↑p
.text:00406CD0
.text:00406CD0 arg_0           = dword ptr  4
.text:00406CD0 arg_4           = dword ptr  8
.text:00406CD0
.text:00406CD0                 mov     ecx, [esp+arg_0]
.text:00406CD4                 mov     edx, [esp+arg_4]
.text:00406CD8                 nop
.text:00406CD9                 lea     esi, [esi+0]
.text:00406CE0
.text:00406CE0 loc_406CE0:                             ; CODE XREF: sub_406CD0+1C↓j
.text:00406CE0                 movzx   eax, byte ptr [edx]
.text:00406CE3                 mov     [ecx], al
.text:00406CE5                 inc     ecx
.text:00406CE6                 movzx   eax, byte ptr [edx]
.text:00406CE9                 inc     edx
.text:00406CEA                 test    al, al
.text:00406CEC                 jnz     short loc_406CE0
.text:00406CEE                 lea     eax, [ecx-1]
.text:00406CF1                 retn
.text:00406CF1 sub_406CD0      endp
.text:00406CF1
.text:00406CF1 ; ---------------------------------------------------------------------------
.text:00406CF2                 align 10h
.text:00406D00
.text:00406D00 ; =============== S U B R O U T I N E =======================================
.text:00406D00
.text:00406D00 ; Attributes: thunk
.text:00406D00
.text:00406D00 sub_406D00      proc near               ; CODE XREF: sub_403730:loc_4037FC↑p
.text:00406D00                 jmp     sub_407040
.text:00406D00 sub_406D00      endp
.text:00406D00
.text:00406D00 ; ---------------------------------------------------------------------------
.text:00406D05                 align 10h
.text:00406D10
.text:00406D10 ; =============== S U B R O U T I N E =======================================
.text:00406D10
.text:00406D10 ; Attributes: thunk
.text:00406D10
.text:00406D10 sub_406D10      proc near               ; CODE XREF: sub_403730:loc_403770↑p
.text:00406D10                 jmp     sub_4071B0
.text:00406D10 sub_406D10      endp
.text:00406D10
.text:00406D10 ; ---------------------------------------------------------------------------
.text:00406D15                 align 10h
.text:00406D20
.text:00406D20 ; =============== S U B R O U T I N E =======================================
.text:00406D20
.text:00406D20 ; Attributes: thunk
.text:00406D20
.text:00406D20 sub_406D20      proc near               ; CODE XREF: sub_403730+2D↑p
.text:00406D20                 jmp     sub_406FF0
.text:00406D20 sub_406D20      endp
.text:00406D20
.text:00406D20 ; ---------------------------------------------------------------------------
.text:00406D25                 align 10h
.text:00406D30
.text:00406D30 ; =============== S U B R O U T I N E =======================================
.text:00406D30
.text:00406D30 ; Attributes: thunk
.text:00406D30
.text:00406D30 ; int __cdecl sub_406D30(char *String)
.text:00406D30 sub_406D30      proc near               ; CODE XREF: sub_403730+28↑p
.text:00406D30
.text:00406D30 String          = dword ptr  4
.text:00406D30
.text:00406D30                 jmp     sub_407210
.text:00406D30 sub_406D30      endp
.text:00406D30
.text:00406D30 ; ---------------------------------------------------------------------------
.text:00406D35                 align 10h
.text:00406D40
.text:00406D40 ; =============== S U B R O U T I N E =======================================
.text:00406D40
.text:00406D40
.text:00406D40 ; int __cdecl sub_406D40(LPCCH lpMultiByteStr, LPSTR lpString1)
.text:00406D40 sub_406D40      proc near               ; CODE XREF: sub_406EC0+93↓p
.text:00406D40
.text:00406D40 pvReserved      = dword ptr -35Ch
.text:00406D40 pUnkOuter       = dword ptr -358h
.text:00406D40 dwClsContext    = dword ptr -354h
.text:00406D40 riid            = dword ptr -350h
.text:00406D40 ppv             = dword ptr -34Ch
.text:00406D40 cchWideChar     = dword ptr -348h
.text:00406D40 var_334         = byte ptr -334h
.text:00406D40 var_330         = dword ptr -330h
.text:00406D40 String2         = byte ptr -32Ch
.text:00406D40 WideCharStr     = word ptr -21Ch
.text:00406D40 lpMultiByteStr  = dword ptr  4
.text:00406D40 lpString1       = dword ptr  8
.text:00406D40
.text:00406D40                 push    edi
.text:00406D41                 push    esi
.text:00406D42                 push    ebx
.text:00406D43                 sub     esp, 350h
.text:00406D49                 mov     edi, [esp+35Ch+lpString1]
.text:00406D50                 mov     byte ptr [edi], 0
.text:00406D53                 mov     [esp+35Ch+pvReserved], 0 ; pvReserved
.text:00406D5A                 call    OleInitialize
.text:00406D5F                 sub     esp, 4
.text:00406D62                 cmp     eax, 1
.text:00406D65                 ja      loc_406E9F
.text:00406D6B                 mov     [esp+35Ch+riid], offset riid ; riid
.text:00406D73                 lea     ecx, [esp+35Ch+var_330]
.text:00406D77                 mov     [esp+35Ch+ppv], ecx ; ppv
.text:00406D7B                 mov     [esp+35Ch+dwClsContext], 1 ; dwClsContext
.text:00406D83                 mov     [esp+35Ch+pUnkOuter], 0 ; pUnkOuter
.text:00406D8B                 mov     [esp+35Ch+pvReserved], offset rclsid ; rclsid
.text:00406D92                 call    CoCreateInstance
.text:00406D97                 sub     esp, 14h
.text:00406D9A                 test    eax, eax
.text:00406D9C                 js      loc_406E9F
.text:00406DA2                 mov     ebx, [esp+35Ch+var_330]
.text:00406DA6                 lea     edx, [esp+35Ch+var_334]
.text:00406DAA                 mov     esi, [ebx]
.text:00406DAC                 mov     [esp+35Ch+dwClsContext], edx
.text:00406DB0                 mov     [esp+35Ch+pvReserved], ebx
.text:00406DB3                 xor     ebx, ebx
.text:00406DB5                 mov     [esp+35Ch+pUnkOuter], offset dword_40ED90
.text:00406DBD                 call    dword ptr [esi]
.text:00406DBF                 sub     esp, 0Ch
.text:00406DC2                 lea     esi, [esp+35Ch+WideCharStr]
.text:00406DC9                 call    AreFileApisANSI
.text:00406DCE                 mov     [esp+35Ch+cchWideChar], 104h ; cchWideChar
.text:00406DD6                 test    eax, eax
.text:00406DD8                 mov     ecx, [esp+35Ch+lpMultiByteStr]
.text:00406DDF                 setz    bl
.text:00406DE2                 mov     [esp+35Ch+ppv], esi ; lpWideCharStr
.text:00406DE6                 mov     [esp+35Ch+riid], 0FFFFFFFFh ; cbMultiByte
.text:00406DEE                 mov     [esp+35Ch+dwClsContext], ecx ; lpMultiByteStr
.text:00406DF2                 mov     [esp+35Ch+pUnkOuter], 0 ; dwFlags
.text:00406DFA                 mov     [esp+35Ch+pvReserved], ebx ; CodePage
.text:00406DFD                 call    MultiByteToWideChar
.text:00406E02                 sub     esp, 18h
.text:00406E05                 test    eax, eax
.text:00406E07                 js      loc_406E9F
.text:00406E0D                 mov     edx, dword ptr [esp+35Ch+var_334]
.text:00406E11                 mov     ebx, [edx]
.text:00406E13                 mov     [esp+35Ch+dwClsContext], 0
.text:00406E1B                 mov     [esp+35Ch+pUnkOuter], esi
.text:00406E1F                 mov     [esp+35Ch+pvReserved], edx
.text:00406E22                 call    dword ptr [ebx+14h]
.text:00406E25                 sub     esp, 0Ch
.text:00406E28                 test    eax, eax
.text:00406E2A                 js      short loc_406E9F
.text:00406E2C                 mov     ebx, [esp+35Ch+var_330]
.text:00406E30                 lea     esi, [esp+35Ch+String2]
.text:00406E34                 mov     ecx, [ebx]
.text:00406E36                 mov     [esp+35Ch+pvReserved], ebx
.text:00406E39                 mov     [esp+35Ch+ppv], 0
.text:00406E41                 mov     [esp+35Ch+riid], 0
.text:00406E49                 mov     [esp+35Ch+dwClsContext], 104h
.text:00406E51                 mov     [esp+35Ch+pUnkOuter], esi
.text:00406E55                 call    dword ptr [ecx+0Ch]
.text:00406E58                 sub     esp, 14h
.text:00406E5B                 mov     ebx, eax
.text:00406E5D                 test    eax, eax
.text:00406E5F                 js      short loc_406E9F
.text:00406E61                 mov     [esp+35Ch+pUnkOuter], esi ; lpString2
.text:00406E65                 mov     [esp+35Ch+pvReserved], edi ; lpString1
.text:00406E68                 call    lstrcpyA
.text:00406E6D                 sub     esp, 8
.text:00406E70                 mov     edi, dword ptr [esp+35Ch+var_334]
.text:00406E74                 mov     ecx, [edi]
.text:00406E76                 mov     [esp+35Ch+pvReserved], edi
.text:00406E79                 call    dword ptr [ecx+8]
.text:00406E7C                 sub     esp, 4
.text:00406E7F                 mov     edx, [esp+35Ch+var_330]
.text:00406E83                 mov     esi, [edx]
.text:00406E85                 mov     [esp+35Ch+pvReserved], edx
.text:00406E88                 call    dword ptr [esi+8]
.text:00406E8B                 sub     esp, 4
.text:00406E8E                 call    CoUninitialize
.text:00406E93                 mov     eax, ebx
.text:00406E95
.text:00406E95 loc_406E95:                             ; CODE XREF: sub_406D40+177↓j
.text:00406E95                 add     esp, 350h
.text:00406E9B                 pop     ebx
.text:00406E9C                 pop     esi
.text:00406E9D                 pop     edi
.text:00406E9E                 retn
.text:00406E9F ; ---------------------------------------------------------------------------
.text:00406E9F
.text:00406E9F loc_406E9F:                             ; CODE XREF: sub_406D40+25↑j
.text:00406E9F                                         ; sub_406D40+5C↑j ...
.text:00406E9F                 call    sub_407DC0
.text:00406EA4                 mov     edi, eax
.text:00406EA6                 call    _errno
.text:00406EAB                 mov     [eax], edi
.text:00406EAD                 call    CoUninitialize
.text:00406EB2                 mov     eax, 0FFFFFFFFh
.text:00406EB7                 jmp     short loc_406E95
.text:00406EB7 sub_406D40      endp
.text:00406EB7
.text:00406EB7 ; ---------------------------------------------------------------------------
.text:00406EB9 ; const char Source[]
.text:00406EB9 Source          db '.lnk',0             ; DATA XREF: sub_406EC0+53↓o
.text:00406EB9                                         ; sub_406EC0:loc_406F25↓o
.text:00406EBE                 align 10h
.text:00406EC0
.text:00406EC0 ; =============== S U B R O U T I N E =======================================
.text:00406EC0
.text:00406EC0
.text:00406EC0 ; int __cdecl sub_406EC0(char *, LPSTR lpString1)
.text:00406EC0 sub_406EC0      proc near               ; CODE XREF: sub_406BF0+96↑p
.text:00406EC0
.text:00406EC0 Str             = dword ptr -1Ch
.text:00406EC0 Source          = dword ptr -18h
.text:00406EC0 Destination     = dword ptr -14h
.text:00406EC0 arg_0           = dword ptr  4
.text:00406EC0 lpString1       = dword ptr  8
.text:00406EC0
.text:00406EC0                 push    ebp
.text:00406EC1                 push    edi
.text:00406EC2                 push    esi
.text:00406EC3                 push    ebx
.text:00406EC4                 sub     esp, 0Ch
.text:00406EC7                 mov     ebx, [esp+1Ch+arg_0]
.text:00406ECB                 mov     ebp, [esp+1Ch+lpString1]
.text:00406ECF                 mov     [esp+1Ch+Str], ebx ; Str
.text:00406ED2                 call    strlen
.text:00406ED7                 add     eax, 5
.text:00406EDA                 mov     [esp+1Ch+Str], eax ; Size
.text:00406EDD                 call    malloc
.text:00406EE2                 mov     [esp+1Ch+Destination], eax
.text:00406EE6                 test    eax, eax
.text:00406EE8                 jz      loc_406F90
.text:00406EEE                 mov     [esp+1Ch+Source], ebx ; Source
.text:00406EF2                 mov     [esp+1Ch+Str], eax ; Destination
.text:00406EF5                 call    strcpy
.text:00406EFA                 mov     [esp+1Ch+Source], 2Eh ; '.' ; Ch
.text:00406F02                 mov     eax, [esp+1Ch+Destination]
.text:00406F06                 mov     [esp+1Ch+Str], eax ; Str
.text:00406F09                 call    strrchr
.text:00406F0E                 test    eax, eax
.text:00406F10                 jz      short loc_406F25
.text:00406F12                 cld
.text:00406F13                 mov     ebx, offset Source ; ".lnk"
.text:00406F18                 mov     ecx, 5
.text:00406F1D                 mov     esi, eax
.text:00406F1F                 mov     edi, ebx
.text:00406F21                 repe cmpsb
.text:00406F23                 jz      short loc_406F39
.text:00406F25
.text:00406F25 loc_406F25:                             ; CODE XREF: sub_406EC0+50↑j
.text:00406F25                 mov     [esp+1Ch+Source], offset Source ; ".lnk"
.text:00406F2D                 mov     edx, [esp+1Ch+Destination]
.text:00406F31                 mov     [esp+1Ch+Str], edx ; Destination
.text:00406F34                 call    strcat
.text:00406F39
.text:00406F39 loc_406F39:                             ; CODE XREF: sub_406EC0+63↑j
.text:00406F39                 mov     [esp+1Ch+Str], 8001h ; uMode
.text:00406F40                 call    SetErrorMode
.text:00406F45                 sub     esp, 4
.text:00406F48                 mov     ebx, [esp+1Ch+Destination]
.text:00406F4C                 mov     [esp+1Ch+Source], ebp ; lpString1
.text:00406F50                 mov     [esp+1Ch+Str], ebx ; lpMultiByteStr
.text:00406F53                 call    sub_406D40
.text:00406F58                 mov     [esp+1Ch+Str], ebx ; Block
.text:00406F5B                 mov     esi, eax
.text:00406F5D                 call    free
.text:00406F62                 mov     [esp+1Ch+Str], 0 ; uMode
.text:00406F69                 call    SetErrorMode
.text:00406F6E                 sub     esp, 4
.text:00406F71                 mov     [esp+1Ch+Str], ebp
.text:00406F74                 call    sub_407690
.text:00406F79                 inc     esi
.text:00406F7A                 jz      short loc_406F90
.text:00406F7C                 mov     [esp+1Ch+arg_0], ebp ; Str
.text:00406F80                 add     esp, 0Ch
.text:00406F83                 pop     ebx
.text:00406F84                 pop     esi
.text:00406F85                 pop     edi
.text:00406F86                 pop     ebp
.text:00406F87                 jmp     strlen
.text:00406F87 ; ---------------------------------------------------------------------------
.text:00406F8C                 align 10h
.text:00406F90
.text:00406F90 loc_406F90:                             ; CODE XREF: sub_406EC0+28↑j
.text:00406F90                                         ; sub_406EC0+BA↑j
.text:00406F90                 add     esp, 0Ch
.text:00406F93                 mov     eax, 0FFFFFFFFh
.text:00406F98                 pop     ebx
.text:00406F99                 pop     esi
.text:00406F9A                 pop     edi
.text:00406F9B                 pop     ebp
.text:00406F9C                 retn
.text:00406F9C sub_406EC0      endp
.text:00406F9C
.text:00406F9C ; ---------------------------------------------------------------------------
.text:00406F9D                 align 10h
.text:00406FA0
.text:00406FA0 ; =============== S U B R O U T I N E =======================================
.text:00406FA0
.text:00406FA0
.text:00406FA0 ; int __cdecl sub_406FA0(LPCSTR, int, int)
.text:00406FA0 sub_406FA0      proc near               ; CODE XREF: sub_406BF0+42↑p
.text:00406FA0                                         ; sub_406BF0+AE↑p ...
.text:00406FA0
.text:00406FA0 lpFileName      = dword ptr -2Ch
.text:00406FA0 dwDesiredAccess = dword ptr -28h
.text:00406FA0 dwShareMode     = dword ptr -24h
.text:00406FA0 lpSecurityAttributes= dword ptr -20h
.text:00406FA0 dwCreationDisposition= dword ptr -1Ch
.text:00406FA0 dwFlagsAndAttributes= dword ptr -18h
.text:00406FA0 hTemplateFile   = dword ptr -14h
.text:00406FA0 var_10          = dword ptr -10h
.text:00406FA0 var_C           = dword ptr -0Ch
.text:00406FA0 var_8           = dword ptr -8
.text:00406FA0 var_4           = dword ptr -4
.text:00406FA0 arg_0           = dword ptr  4
.text:00406FA0 arg_4           = dword ptr  8
.text:00406FA0 arg_8           = dword ptr  0Ch
.text:00406FA0
.text:00406FA0 ; FUNCTION CHUNK AT .text:004097D0 SIZE 0000013A BYTES
.text:00406FA0
.text:00406FA0                 sub     esp, 0Ch
.text:00406FA3                 mov     ecx, [esp+0Ch+arg_0]
.text:00406FA7                 mov     edx, [esp+0Ch+arg_4]
.text:00406FAB                 mov     eax, [esp+0Ch+arg_8]
.text:00406FAF                 test    ecx, ecx
.text:00406FB1                 jnz     short loc_406FD0
.text:00406FB3                 test    edx, edx
.text:00406FB5                 jz      short loc_406FD0
.text:00406FB7                 test    eax, eax
.text:00406FB9                 jz      short loc_406FD0
.text:00406FBB                 mov     [esp+0Ch+arg_4], eax
.text:00406FBF                 mov     [esp+0Ch+arg_0], edx
.text:00406FC3                 add     esp, 0Ch
.text:00406FC6                 jmp     loc_4097D0
.text:00406FC6 ; ---------------------------------------------------------------------------
.text:00406FCB                 align 10h
.text:00406FD0
.text:00406FD0 loc_406FD0:                             ; CODE XREF: sub_406FA0+11↑j
.text:00406FD0                                         ; sub_406FA0+15↑j ...
.text:00406FD0                 call    _errno
.text:00406FD5                 mov     dword ptr [eax], 16h
.text:00406FDB                 mov     eax, 0FFFFFFFFh
.text:00406FE0                 add     esp, 0Ch
.text:00406FE3                 retn
.text:00406FE3 sub_406FA0      endp
.text:00406FE3
.text:00406FE3 ; ---------------------------------------------------------------------------
.text:00406FE4                 align 10h
.text:00406FF0
.text:00406FF0 ; =============== S U B R O U T I N E =======================================
.text:00406FF0
.text:00406FF0
.text:00406FF0 sub_406FF0      proc near               ; CODE XREF: sub_406D20↑j
.text:00406FF0                 sub     esp, 0Ch
.text:00406FF3                 mov     eax, off_41108C
.text:00406FF8                 call    dword ptr [eax]
.text:00406FFA                 add     esp, 0Ch
.text:00406FFD                 retn
.text:00406FFD sub_406FF0      endp
.text:00406FFD
.text:00406FFD ; ---------------------------------------------------------------------------
.text:00406FFE                 align 10h
.text:00407000
.text:00407000 ; =============== S U B R O U T I N E =======================================
.text:00407000
.text:00407000
.text:00407000 sub_407000      proc near               ; CODE XREF: sub_4071B0+31↓p
.text:00407000
.text:00407000 var_C           = dword ptr -0Ch
.text:00407000 var_8           = dword ptr -8
.text:00407000 arg_0           = dword ptr  4
.text:00407000 arg_4           = dword ptr  8
.text:00407000
.text:00407000                 sub     esp, 0Ch
.text:00407003                 mov     edx, [esp+0Ch+arg_4]
.text:00407007                 mov     eax, off_41108C
.text:0040700C                 mov     [esp+0Ch+var_8], edx
.text:00407010                 mov     edx, [esp+0Ch+arg_0]
.text:00407014                 mov     [esp+0Ch+var_C], edx
.text:00407017                 call    dword ptr [eax+4]
.text:0040701A                 add     esp, 0Ch
.text:0040701D                 retn
.text:0040701D sub_407000      endp
.text:0040701D
.text:0040701D ; ---------------------------------------------------------------------------
.text:0040701E                 align 10h
.text:00407020                 sub     esp, 0Ch
.text:00407023                 mov     edx, [esp+10h]
.text:00407027                 mov     eax, off_41108C
.text:0040702C                 mov     [esp], edx
.text:0040702F                 call    dword ptr [eax+10h]
.text:00407032                 add     esp, 0Ch
.text:00407035                 retn
.text:00407035 ; ---------------------------------------------------------------------------
.text:00407036                 align 10h
.text:00407040
.text:00407040 ; =============== S U B R O U T I N E =======================================
.text:00407040
.text:00407040
.text:00407040 sub_407040      proc near               ; CODE XREF: sub_406D00↑j
.text:00407040                 sub     esp, 0Ch
.text:00407043                 mov     edx, off_41108C
.text:00407049                 call    dword ptr [edx+14h]
.text:0040704C                 mov     edx, offset off_411070
.text:00407051                 mov     off_41108C, edx
.text:00407057                 add     esp, 0Ch
.text:0040705A                 retn
.text:0040705A sub_407040      endp
.text:0040705A
.text:0040705A ; ---------------------------------------------------------------------------
.text:0040705B                 align 10h
.text:00407060
.text:00407060 ; =============== S U B R O U T I N E =======================================
.text:00407060
.text:00407060
.text:00407060 sub_407060      proc near               ; DATA XREF: .data:off_411070↓o
.text:00407060                 sub     esp, 0Ch
.text:00407063                 call    off_4110B4
.text:00407069                 test    eax, eax
.text:0040706B                 jz      short loc_407078
.text:0040706D                 mov     ecx, offset off_4110B4
.text:00407072                 mov     off_41108C, ecx
.text:00407078
.text:00407078 loc_407078:                             ; CODE XREF: sub_407060+B↑j
.text:00407078                 add     esp, 0Ch
.text:0040707B                 retn
.text:0040707B sub_407060      endp
.text:0040707B
.text:0040707B ; ---------------------------------------------------------------------------
.text:0040707C                 align 10h
.text:00407080
.text:00407080 ; =============== S U B R O U T I N E =======================================
.text:00407080
.text:00407080
.text:00407080 sub_407080      proc near               ; DATA XREF: .data:00411074↓o
.text:00407080
.text:00407080 var_C           = dword ptr -0Ch
.text:00407080 var_8           = dword ptr -8
.text:00407080 var_4           = dword ptr -4
.text:00407080 arg_0           = dword ptr  4
.text:00407080 arg_4           = dword ptr  8
.text:00407080
.text:00407080                 sub     esp, 0Ch
.text:00407083                 mov     [esp+0Ch+var_4], ebx
.text:00407087                 mov     ebx, [esp+0Ch+arg_4]
.text:0040708B                 call    off_4110B4
.text:00407091                 test    eax, eax
.text:00407093                 jz      short loc_4070B8
.text:00407095                 mov     [esp+0Ch+var_8], ebx
.text:00407099                 mov     edx, [esp+0Ch+arg_0]
.text:0040709D                 mov     eax, offset off_4110B4
.text:004070A2                 mov     off_41108C, eax
.text:004070A7                 mov     [esp+0Ch+var_C], edx
.text:004070AA                 call    off_4110B8
.text:004070B0
.text:004070B0 loc_4070B0:                             ; CODE XREF: sub_407080+43↓j
.text:004070B0                 mov     ebx, [esp+0Ch+var_4]
.text:004070B4                 add     esp, 0Ch
.text:004070B7                 retn
.text:004070B8 ; ---------------------------------------------------------------------------
.text:004070B8
.text:004070B8 loc_4070B8:                             ; CODE XREF: sub_407080+13↑j
.text:004070B8                 mov     dword ptr [ebx], 0
.text:004070BE                 mov     eax, 0FFFFFFFFh
.text:004070C3                 jmp     short loc_4070B0
.text:004070C3 sub_407080      endp
.text:004070C3
.text:004070C3 ; ---------------------------------------------------------------------------
.text:004070C5                 align 10h
.text:004070D0
.text:004070D0 ; =============== S U B R O U T I N E =======================================
.text:004070D0
.text:004070D0
.text:004070D0 sub_4070D0      proc near               ; DATA XREF: .data:00411078↓o
.text:004070D0
.text:004070D0 var_1C          = dword ptr -1Ch
.text:004070D0 var_18          = dword ptr -18h
.text:004070D0 var_14          = dword ptr -14h
.text:004070D0 var_4           = dword ptr -4
.text:004070D0 arg_0           = dword ptr  4
.text:004070D0 arg_4           = dword ptr  8
.text:004070D0 arg_8           = dword ptr  0Ch
.text:004070D0
.text:004070D0                 sub     esp, 1Ch
.text:004070D3                 mov     [esp+1Ch+var_4], ebx
.text:004070D7                 mov     ebx, [esp+1Ch+arg_8]
.text:004070DB                 call    off_4110B4
.text:004070E1                 test    eax, eax
.text:004070E3                 jz      short loc_407111
.text:004070E5                 mov     [esp+1Ch+var_14], ebx
.text:004070E9                 mov     edx, [esp+1Ch+arg_4]
.text:004070ED                 mov     ecx, offset off_4110B4
.text:004070F2                 mov     off_41108C, ecx
.text:004070F8                 mov     [esp+1Ch+var_18], edx
.text:004070FC                 mov     edx, [esp+1Ch+arg_0]
.text:00407100                 mov     [esp+1Ch+var_1C], edx
.text:00407103                 call    off_4110BC
.text:00407109
.text:00407109 loc_407109:                             ; CODE XREF: sub_4070D0+4C↓j
.text:00407109                 mov     ebx, [esp+1Ch+var_4]
.text:0040710D                 add     esp, 1Ch
.text:00407110                 retn
.text:00407111 ; ---------------------------------------------------------------------------
.text:00407111
.text:00407111 loc_407111:                             ; CODE XREF: sub_4070D0+13↑j
.text:00407111                 mov     dword ptr [ebx], 0
.text:00407117                 mov     eax, 0FFFFFFFFh
.text:0040711C                 jmp     short loc_407109
.text:0040711C sub_4070D0      endp
.text:0040711C
.text:0040711C ; ---------------------------------------------------------------------------
.text:0040711E                 align 10h
.text:00407120
.text:00407120 ; =============== S U B R O U T I N E =======================================
.text:00407120
.text:00407120
.text:00407120 sub_407120      proc near               ; DATA XREF: .data:0041107C↓o
.text:00407120
.text:00407120 var_1C          = dword ptr -1Ch
.text:00407120 var_18          = dword ptr -18h
.text:00407120 var_14          = dword ptr -14h
.text:00407120 var_4           = dword ptr -4
.text:00407120 arg_0           = dword ptr  4
.text:00407120 arg_4           = dword ptr  8
.text:00407120 arg_8           = dword ptr  0Ch
.text:00407120
.text:00407120                 sub     esp, 1Ch
.text:00407123                 mov     [esp+1Ch+var_4], ebx
.text:00407127                 mov     ebx, [esp+1Ch+arg_8]
.text:0040712B                 call    off_4110B4
.text:00407131                 test    eax, eax
.text:00407133                 jz      short loc_407161
.text:00407135                 mov     [esp+1Ch+var_14], ebx
.text:00407139                 mov     edx, [esp+1Ch+arg_4]
.text:0040713D                 mov     ecx, offset off_4110B4
.text:00407142                 mov     off_41108C, ecx
.text:00407148                 mov     [esp+1Ch+var_18], edx
.text:0040714C                 mov     edx, [esp+1Ch+arg_0]
.text:00407150                 mov     [esp+1Ch+var_1C], edx
.text:00407153                 call    off_4110C0
.text:00407159
.text:00407159 loc_407159:                             ; CODE XREF: sub_407120+4C↓j
.text:00407159                 mov     ebx, [esp+1Ch+var_4]
.text:0040715D                 add     esp, 1Ch
.text:00407160                 retn
.text:00407161 ; ---------------------------------------------------------------------------
.text:00407161
.text:00407161 loc_407161:                             ; CODE XREF: sub_407120+13↑j
.text:00407161                 mov     dword ptr [ebx], 0
.text:00407167                 mov     eax, 0FFFFFFFFh
.text:0040716C                 jmp     short loc_407159
.text:0040716C sub_407120      endp
.text:0040716C
.text:0040716C ; ---------------------------------------------------------------------------
.text:0040716E                 align 10h
.text:00407170
.text:00407170 ; =============== S U B R O U T I N E =======================================
.text:00407170
.text:00407170
.text:00407170 ; int __cdecl sub_407170(void *)
.text:00407170 sub_407170      proc near               ; DATA XREF: .data:00411080↓o
.text:00407170
.text:00407170 Buf             = dword ptr -0Ch
.text:00407170 arg_0           = dword ptr  4
.text:00407170
.text:00407170                 sub     esp, 0Ch
.text:00407173                 call    off_4110B4
.text:00407179                 xor     edx, edx
.text:0040717B                 test    eax, eax
.text:0040717D                 jz      short loc_407199
.text:0040717F                 mov     edx, offset off_4110B4
.text:00407184                 mov     off_41108C, edx
.text:0040718A                 mov     edx, [esp+0Ch+arg_0]
.text:0040718E                 mov     [esp+0Ch+Buf], edx ; Buf
.text:00407191                 call    off_4110C4
.text:00407197                 mov     edx, eax
.text:00407199
.text:00407199 loc_407199:                             ; CODE XREF: sub_407170+D↑j
.text:00407199                 mov     eax, edx
.text:0040719B                 add     esp, 0Ch
.text:0040719E                 retn
.text:0040719E sub_407170      endp
.text:0040719E
.text:0040719E ; ---------------------------------------------------------------------------
.text:0040719F                 align 10h
.text:004071A0
.text:004071A0 ; =============== S U B R O U T I N E =======================================
.text:004071A0
.text:004071A0
.text:004071A0 nullsub_1       proc near               ; DATA XREF: .data:00411084↓o
.text:004071A0                 retn
.text:004071A0 nullsub_1       endp
.text:004071A0
.text:004071A0 ; ---------------------------------------------------------------------------
.text:004071A1                 align 10h
.text:004071B0
.text:004071B0 ; =============== S U B R O U T I N E =======================================
.text:004071B0
.text:004071B0
.text:004071B0 sub_4071B0      proc near               ; CODE XREF: sub_406D10↑j
.text:004071B0
.text:004071B0 Size            = dword ptr -0Ch
.text:004071B0 var_8           = dword ptr -8
.text:004071B0 var_4           = dword ptr -4
.text:004071B0
.text:004071B0                 sub     esp, 0Ch
.text:004071B3                 mov     edx, ds:dword_412330
.text:004071B9                 test    edx, edx
.text:004071BB                 jnz     short loc_4071D6
.text:004071BD                 mov     [esp+0Ch+Size], 180h ; Size
.text:004071C4                 call    malloc
.text:004071C9                 mov     ds:dword_412330, eax
.text:004071CE                 mov     edx, eax
.text:004071D0                 xor     eax, eax
.text:004071D2                 test    edx, edx
.text:004071D4                 jz      short loc_4071F0
.text:004071D6
.text:004071D6 loc_4071D6:                             ; CODE XREF: sub_4071B0+B↑j
.text:004071D6                 mov     [esp+0Ch+Size], edx
.text:004071D9                 lea     ecx, [esp+0Ch+var_4]
.text:004071DD                 mov     [esp+0Ch+var_8], ecx
.text:004071E1                 call    sub_407000
.text:004071E6                 mov     ecx, [esp+0Ch+var_4]
.text:004071EA                 shr     eax, 1Fh
.text:004071ED                 dec     eax
.text:004071EE                 and     eax, ecx
.text:004071F0
.text:004071F0 loc_4071F0:                             ; CODE XREF: sub_4071B0+24↑j
.text:004071F0                 add     esp, 0Ch
.text:004071F3                 retn
.text:004071F3 sub_4071B0      endp
.text:004071F3
.text:004071F3 ; ---------------------------------------------------------------------------
.text:004071F4                 align 10h
.text:00407200 ; const char aVarRunUtmp_0[]
.text:00407200 aVarRunUtmp_0   db '/var/run/utmp',0    ; DATA XREF: sub_407210:loc_407260↓o
.text:00407200                                         ; sub_407210+69↓o ...
.text:0040720E                 align 10h
.text:00407210
.text:00407210 ; =============== S U B R O U T I N E =======================================
.text:00407210
.text:00407210
.text:00407210 ; int __cdecl sub_407210(char *String)
.text:00407210 sub_407210      proc near               ; CODE XREF: sub_406D30↑j
.text:00407210
.text:00407210 Str1            = dword ptr -1Ch
.text:00407210 Str2            = dword ptr -18h
.text:00407210 var_8           = dword ptr -8
.text:00407210 var_4           = dword ptr -4
.text:00407210 String          = dword ptr  4
.text:00407210
.text:00407210                 sub     esp, 1Ch
.text:00407213                 mov     edx, off_41108C
.text:00407219                 mov     [esp+1Ch+var_8], ebx
.text:0040721D                 mov     ebx, [esp+1Ch+String]
.text:00407221                 mov     [esp+1Ch+var_4], esi
.text:00407225                 mov     esi, 0FFFFFFFFh
.text:0040722A                 call    dword ptr [edx+14h]
.text:0040722D                 mov     [esp+1Ch+Str1], ebx ; Str1
.text:00407230                 mov     edx, FileName
.text:00407236                 mov     eax, offset off_411070
.text:0040723B                 mov     off_41108C, eax
.text:00407240                 mov     [esp+1Ch+Str2], edx ; Str2
.text:00407244                 call    strcmp
.text:00407249                 test    eax, eax
.text:0040724B                 jnz     short loc_407260
.text:0040724D
.text:0040724D loc_40724D:                             ; CODE XREF: sub_407210+83↓j
.text:0040724D                                         ; sub_407210+AD↓j
.text:0040724D                 xor     esi, esi
.text:0040724F
.text:0040724F loc_40724F:                             ; CODE XREF: sub_407210+91↓j
.text:0040724F                 mov     eax, esi
.text:00407251                 mov     ebx, [esp+1Ch+var_8]
.text:00407255                 mov     esi, [esp+1Ch+var_4]
.text:00407259                 add     esp, 1Ch
.text:0040725C                 retn
.text:0040725C ; ---------------------------------------------------------------------------
.text:0040725D                 align 10h
.text:00407260
.text:00407260 loc_407260:                             ; CODE XREF: sub_407210+3B↑j
.text:00407260                 mov     [esp+1Ch+Str2], offset aVarRunUtmp_0 ; "/var/run/utmp"
.text:00407268                 mov     [esp+1Ch+Str1], ebx ; Str1
.text:0040726B                 call    strcmp
.text:00407270                 test    eax, eax
.text:00407272                 jnz     short loc_407295
.text:00407274                 mov     eax, FileName
.text:00407279                 cmp     eax, offset aVarRunUtmp_0 ; "/var/run/utmp"
.text:0040727E                 jz      short loc_407288
.text:00407280                 mov     [esp+1Ch+Str1], eax ; Block
.text:00407283                 call    free
.text:00407288
.text:00407288 loc_407288:                             ; CODE XREF: sub_407210+6E↑j
.text:00407288                 mov     ecx, offset aVarRunUtmp_0 ; "/var/run/utmp"
.text:0040728D                 mov     FileName, ecx
.text:00407293                 jmp     short loc_40724D
.text:00407295 ; ---------------------------------------------------------------------------
.text:00407295
.text:00407295 loc_407295:                             ; CODE XREF: sub_407210+62↑j
.text:00407295                 mov     [esp+1Ch+Str1], ebx ; String
.text:00407298                 call    _strdup_0
.text:0040729D                 test    eax, eax
.text:0040729F                 mov     ebx, eax
.text:004072A1                 jz      short loc_40724F
.text:004072A3                 mov     eax, FileName
.text:004072A8                 cmp     eax, offset aVarRunUtmp_0 ; "/var/run/utmp"
.text:004072AD                 jz      short loc_4072B7
.text:004072AF                 mov     [esp+1Ch+Str1], eax ; Block
.text:004072B2                 call    free
.text:004072B7
.text:004072B7 loc_4072B7:                             ; CODE XREF: sub_407210+9D↑j
.text:004072B7                 mov     FileName, ebx
.text:004072BD                 jmp     short loc_40724D
.text:004072BD sub_407210      endp
.text:004072BD
.text:004072BD ; ---------------------------------------------------------------------------
.text:004072BF                 align 10h
.text:004072C0
.text:004072C0 ; =============== S U B R O U T I N E =======================================
.text:004072C0
.text:004072C0 ; Attributes: bp-based frame info_from_lumina fpd=268h
.text:004072C0
.text:004072C0 ; int __cdecl win32_longpath(LPCSTR lpFileName)
.text:004072C0 _win32_longpath proc near               ; CODE XREF: .text:00407A84↓p
.text:004072C0
.text:004072C0 C               = dword ptr -278h
.text:004072C0 lpFindFileData  = dword ptr -274h
.text:004072C0 Destination     = byte ptr -268h
.text:004072C0 var_267         = byte ptr -267h
.text:004072C0 FindFileData    = _WIN32_FIND_DATAA ptr -158h
.text:004072C0 lpFileName      = dword ptr  8
.text:004072C0
.text:004072C0                 push    ebp
.text:004072C1                 xor     eax, eax
.text:004072C3                 push    edi
.text:004072C4                 push    esi
.text:004072C5                 push    ebx
.text:004072C6                 sub     esp, 26Ch
.text:004072CC                 mov     esi, [esp+278h+lpFileName]
.text:004072D3                 lea     ebp, [esp+278h+Destination]
.text:004072D7                 test    esi, esi
.text:004072D9                 jz      loc_407437
.text:004072DF                 movsx   edx, byte ptr [esi]
.text:004072E2                 mov     [esp+278h+C], edx ; C
.text:004072E5                 call    isalpha
.text:004072EA                 test    eax, eax
.text:004072EC                 jz      short loc_4072FF
.text:004072EE                 mov     eax, [esp+278h+lpFileName]
.text:004072F5                 cmp     byte ptr [eax+1], 3Ah ; ':'
.text:004072F9                 jz      loc_40763B
.text:004072FF
.text:004072FF loc_4072FF:                             ; CODE XREF: _win32_longpath+2C↑j
.text:004072FF                 mov     edx, [esp+278h+lpFileName]
.text:00407306                 movzx   eax, byte ptr [edx]
.text:00407309                 cmp     al, 2Fh ; '/'
.text:0040730B                 jz      loc_40751B
.text:00407311                 cmp     al, 5Ch ; '\'
.text:00407313                 jz      loc_40751B
.text:00407319
.text:00407319 loc_407319:                             ; CODE XREF: _win32_longpath+26E↓j
.text:00407319                                         ; _win32_longpath+2B1↓j ...
.text:00407319                 mov     [ebp+268h+Destination], 0
.text:0040731D                 movzx   ebx, byte ptr [esi]
.text:00407320                 test    bl, bl
.text:00407322                 jz      loc_407419
.text:00407328                 nop
.text:00407329                 lea     esi, [esi+0]
.text:00407330
.text:00407330 loc_407330:                             ; CODE XREF: _win32_longpath+153↓j
.text:00407330                 cmp     bl, 2Fh ; '/'
.text:00407333                 jz      loc_4074D0
.text:00407339                 cmp     bl, 5Ch ; '\'
.text:0040733C                 jz      loc_4074D0
.text:00407342
.text:00407342 loc_407342:                             ; CODE XREF: _win32_longpath+21E↓j
.text:00407342                                         ; _win32_longpath+22C↓j ...
.text:00407342                 cmp     bl, 2Eh ; '.'
.text:00407345                 jz      loc_407470
.text:0040734B
.text:0040734B loc_40734B:                             ; CODE XREF: _win32_longpath+1EF↓j
.text:0040734B                                         ; _win32_longpath+203↓j
.text:0040734B                 test    bl, bl
.text:0040734D                 jz      loc_407419
.text:00407353                 cmp     bl, 2Fh ; '/'
.text:00407356                 jz      short loc_407372
.text:00407358                 cmp     bl, 5Ch ; '\'
.text:0040735B                 jz      short loc_407372
.text:0040735D                 lea     esi, [esi+0]
.text:00407360
.text:00407360 loc_407360:                             ; CODE XREF: _win32_longpath+B0↓j
.text:00407360                 inc     esi
.text:00407361                 movzx   ebx, byte ptr [esi]
.text:00407364                 test    bl, bl
.text:00407366                 jz      short loc_407372
.text:00407368                 cmp     bl, 2Fh ; '/'
.text:0040736B                 jz      short loc_407372
.text:0040736D                 cmp     bl, 5Ch ; '\'
.text:00407370                 jnz     short loc_407360
.text:00407372
.text:00407372 loc_407372:                             ; CODE XREF: _win32_longpath+96↑j
.text:00407372                                         ; _win32_longpath+9B↑j ...
.text:00407372                 mov     byte ptr [esi], 0
.text:00407375                 lea     edx, [esp+278h+FindFileData]
.text:0040737C                 mov     eax, [esp+278h+lpFileName]
.text:00407383                 mov     [esp+278h+lpFindFileData], edx ; lpFindFileData
.text:00407387                 mov     [esp+278h+C], eax ; lpFileName
.text:0040738A                 call    FindFirstFileA
.text:0040738F                 mov     [esi], bl
.text:00407391                 sub     esp, 8
.text:00407394                 mov     edi, eax
.text:00407396                 cmp     eax, 0FFFFFFFFh
.text:00407399                 jz      loc_40745C
.text:0040739F                 lea     ebx, [esp+278h+FindFileData.cFileName]
.text:004073A6                 mov     ecx, ebx
.text:004073A8                 nop
.text:004073A9                 lea     esi, [esi+0]
.text:004073B0
.text:004073B0 loc_4073B0:                             ; CODE XREF: _win32_longpath+105↓j
.text:004073B0                 mov     eax, [ebx]
.text:004073B2                 add     ebx, 4
.text:004073B5                 lea     edx, [eax-1010101h]
.text:004073BB                 not     eax
.text:004073BD                 and     edx, eax
.text:004073BF                 and     edx, 80808080h
.text:004073C5                 jz      short loc_4073B0
.text:004073C7                 test    edx, 8080h
.text:004073CD                 jnz     short loc_4073D5
.text:004073CF                 shr     edx, 10h
.text:004073D2                 add     ebx, 2
.text:004073D5
.text:004073D5 loc_4073D5:                             ; CODE XREF: _win32_longpath+10D↑j
.text:004073D5                 add     dl, dl
.text:004073D7                 sbb     ebx, 3
.text:004073DA                 sub     ebx, ecx
.text:004073DC                 lea     ecx, [esp+278h+Destination]
.text:004073E0                 sub     ecx, ebp
.text:004073E2                 add     ecx, 105h
.text:004073E8                 cmp     ecx, ebx
.text:004073EA                 jle     short loc_407442
.text:004073EC                 mov     [esp+278h+C], ebp ; Destination
.text:004073EF                 lea     edx, [esp+278h+FindFileData.cFileName]
.text:004073F6                 add     ebp, ebx
.text:004073F8                 mov     [esp+278h+lpFindFileData], edx ; Source
.text:004073FC                 call    strcpy
.text:00407401                 mov     [esp+278h+C], edi ; hFindFile
.text:00407404                 call    FindClose
.text:00407409                 sub     esp, 4
.text:0040740C
.text:0040740C loc_40740C:                             ; CODE XREF: _win32_longpath+1E0↓j
.text:0040740C                 movzx   ecx, byte ptr [esi]
.text:0040740F                 test    cl, cl
.text:00407411                 mov     bl, cl
.text:00407413                 jnz     loc_407330
.text:00407419
.text:00407419 loc_407419:                             ; CODE XREF: _win32_longpath+62↑j
.text:00407419                                         ; _win32_longpath+8D↑j
.text:00407419                 mov     esi, [esp+278h+lpFileName]
.text:00407420                 lea     ebp, [esp+278h+Destination]
.text:00407424                 mov     [esp+278h+lpFindFileData], ebp ; Source
.text:00407428                 mov     [esp+278h+C], esi ; Destination
.text:0040742B                 call    strcpy
.text:00407430                 mov     eax, [esp+278h+lpFileName]
.text:00407437
.text:00407437 loc_407437:                             ; CODE XREF: _win32_longpath+19↑j
.text:00407437                                         ; _win32_longpath+19A↓j
.text:00407437                 add     esp, 26Ch
.text:0040743D                 pop     ebx
.text:0040743E                 pop     esi
.text:0040743F                 pop     edi
.text:00407440                 pop     ebp
.text:00407441                 retn
.text:00407442 ; ---------------------------------------------------------------------------
.text:00407442
.text:00407442 loc_407442:                             ; CODE XREF: _win32_longpath+12A↑j
.text:00407442                 mov     [esp+278h+C], edi ; hFindFile
.text:00407445                 call    FindClose
.text:0040744A                 sub     esp, 4
.text:0040744D                 call    _errno
.text:00407452                 mov     dword ptr [eax], 22h ; '"'
.text:00407458
.text:00407458 loc_407458:                             ; CODE XREF: _win32_longpath+1A7↓j
.text:00407458                 xor     eax, eax
.text:0040745A                 jmp     short loc_407437
.text:0040745C ; ---------------------------------------------------------------------------
.text:0040745C
.text:0040745C loc_40745C:                             ; CODE XREF: _win32_longpath+D9↑j
.text:0040745C                 call    _errno
.text:00407461                 mov     dword ptr [eax], 16h
.text:00407467                 jmp     short loc_407458
.text:00407467 ; ---------------------------------------------------------------------------
.text:00407469                 align 10h
.text:00407470
.text:00407470 loc_407470:                             ; CODE XREF: _win32_longpath+85↑j
.text:00407470                 movzx   eax, byte ptr [esi+1]
.text:00407474                 test    al, al
.text:00407476                 jnz     short loc_4074A5
.text:00407478
.text:00407478 loc_407478:                             ; CODE XREF: _win32_longpath+1E7↓j
.text:00407478                                         ; _win32_longpath+1EB↓j ...
.text:00407478                 test    bl, bl
.text:0040747A                 jz      short loc_40749C
.text:0040747C                 cmp     bl, 2Fh ; '/'
.text:0040747F                 jz      short loc_40749C
.text:00407481                 cmp     bl, 5Ch ; '\'
.text:00407484                 jz      short loc_40749C
.text:00407486
.text:00407486 loc_407486:                             ; CODE XREF: _win32_longpath+1DA↓j
.text:00407486                 mov     [ebp+268h+Destination], bl
.text:00407489                 inc     esi
.text:0040748A                 inc     ebp
.text:0040748B                 movzx   ebx, byte ptr [esi]
.text:0040748E                 test    bl, bl
.text:00407490                 jz      short loc_40749C
.text:00407492                 cmp     bl, 2Fh ; '/'
.text:00407495                 jz      short loc_40749C
.text:00407497                 cmp     bl, 5Ch ; '\'
.text:0040749A                 jnz     short loc_407486
.text:0040749C
.text:0040749C loc_40749C:                             ; CODE XREF: _win32_longpath+1BA↑j
.text:0040749C                                         ; _win32_longpath+1BF↑j ...
.text:0040749C                 mov     [ebp+268h+Destination], 0
.text:004074A0                 jmp     loc_40740C
.text:004074A5 ; ---------------------------------------------------------------------------
.text:004074A5
.text:004074A5 loc_4074A5:                             ; CODE XREF: _win32_longpath+1B6↑j
.text:004074A5                 cmp     al, 2Fh ; '/'
.text:004074A7                 jz      short loc_407478
.text:004074A9                 cmp     al, 5Ch ; '\'
.text:004074AB                 jz      short loc_407478
.text:004074AD                 cmp     al, 2Eh ; '.'
.text:004074AF                 jnz     loc_40734B
.text:004074B5                 movzx   eax, byte ptr [esi+2]
.text:004074B9                 test    al, al
.text:004074BB                 jz      short loc_407478
.text:004074BD                 cmp     al, 2Fh ; '/'
.text:004074BF                 jz      short loc_407478
.text:004074C1                 cmp     al, 5Ch ; '\'
.text:004074C3                 jnz     loc_40734B
.text:004074C9                 jmp     short loc_407478
.text:004074C9 ; ---------------------------------------------------------------------------
.text:004074CB                 align 10h
.text:004074D0
.text:004074D0 loc_4074D0:                             ; CODE XREF: _win32_longpath+73↑j
.text:004074D0                                         ; _win32_longpath+7C↑j
.text:004074D0                 mov     [ebp+268h+Destination], bl
.text:004074D3                 inc     esi
.text:004074D4                 inc     ebp
.text:004074D5                 mov     [ebp+268h+Destination], 0
.text:004074D9                 movzx   ebx, byte ptr [esi]
.text:004074DC                 test    bl, bl
.text:004074DE                 jz      loc_407342
.text:004074E4                 cmp     bl, 2Fh ; '/'
.text:004074E7                 jz      short loc_407500
.text:004074E9                 cmp     bl, 5Ch ; '\'
.text:004074EC                 jnz     loc_407342
.text:004074F2                 lea     esi, [esi+0]
.text:004074F9                 lea     edi, [edi+0]
.text:00407500
.text:00407500 loc_407500:                             ; CODE XREF: _win32_longpath+227↑j
.text:00407500                                         ; _win32_longpath+24F↓j ...
.text:00407500                 inc     esi
.text:00407501                 movzx   ebx, byte ptr [esi]
.text:00407504                 test    bl, bl
.text:00407506                 jz      loc_407342
.text:0040750C                 cmp     bl, 2Fh ; '/'
.text:0040750F                 jz      short loc_407500
.text:00407511                 cmp     bl, 5Ch ; '\'
.text:00407514                 jz      short loc_407500
.text:00407516                 jmp     loc_407342
.text:0040751B ; ---------------------------------------------------------------------------
.text:0040751B
.text:0040751B loc_40751B:                             ; CODE XREF: _win32_longpath+4B↑j
.text:0040751B                                         ; _win32_longpath+53↑j
.text:0040751B                 mov     edi, [esp+278h+lpFileName]
.text:00407522                 movzx   edx, byte ptr [edi+1]
.text:00407526                 cmp     dl, 2Fh ; '/'
.text:00407529                 jz      short loc_407534
.text:0040752B                 cmp     dl, 5Ch ; '\'
.text:0040752E                 jnz     loc_407319
.text:00407534
.text:00407534 loc_407534:                             ; CODE XREF: _win32_longpath+269↑j
.text:00407534                 mov     esi, [esp+278h+lpFileName]
.text:0040753B                 mov     [ebp+268h+Destination], al
.text:0040753E                 mov     ecx, [esp+278h+lpFileName]
.text:00407545                 inc     ebp
.text:00407546                 add     esi, 2
.text:00407549                 movzx   ebx, byte ptr [ecx+1]
.text:0040754D                 mov     [ebp+268h+Destination], bl
.text:00407550                 inc     ebp
.text:00407551                 movzx   eax, byte ptr [ecx+2]
.text:00407555                 test    al, al
.text:00407557                 jz      loc_407633
.text:0040755D                 cmp     al, 2Fh ; '/'
.text:0040755F                 jz      loc_407618
.text:00407565                 cmp     al, 5Ch ; '\'
.text:00407567                 mov     bl, al
.text:00407569                 jz      loc_407618
.text:0040756F
.text:0040756F loc_40756F:                             ; CODE XREF: _win32_longpath+36E↓j
.text:0040756F                                         ; _win32_longpath+376↓j
.text:0040756F                 test    bl, bl
.text:00407571                 jz      loc_407319
.text:00407577                 cmp     bl, 2Fh ; '/'
.text:0040757A                 jz      short loc_40759B
.text:0040757C                 cmp     bl, 5Ch ; '\'
.text:0040757F                 jz      short loc_40759B
.text:00407581
.text:00407581 loc_407581:                             ; CODE XREF: _win32_longpath+2D9↓j
.text:00407581                 mov     [ebp+268h+Destination], bl
.text:00407584                 inc     esi
.text:00407585                 inc     ebp
.text:00407586                 movzx   ebx, byte ptr [esi]
.text:00407589                 test    bl, bl
.text:0040758B                 jz      loc_407319
.text:00407591                 cmp     bl, 2Fh ; '/'
.text:00407594                 jz      short loc_40759B
.text:00407596                 cmp     bl, 5Ch ; '\'
.text:00407599                 jnz     short loc_407581
.text:0040759B
.text:0040759B loc_40759B:                             ; CODE XREF: _win32_longpath+2BA↑j
.text:0040759B                                         ; _win32_longpath+2BF↑j ...
.text:0040759B                 test    bl, bl
.text:0040759D                 jz      loc_407319
.text:004075A3                 mov     [ebp+268h+Destination], bl
.text:004075A6                 inc     esi
.text:004075A7                 inc     ebp
.text:004075A8                 movzx   ebx, byte ptr [esi]
.text:004075AB                 test    bl, bl
.text:004075AD                 jz      loc_407319
.text:004075B3                 cmp     bl, 2Fh ; '/'
.text:004075B6                 jz      short loc_407600
.text:004075B8                 cmp     bl, 5Ch ; '\'
.text:004075BB                 jz      short loc_407600
.text:004075BD
.text:004075BD loc_4075BD:                             ; CODE XREF: _win32_longpath+356↓j
.text:004075BD                 test    bl, bl
.text:004075BF                 jz      loc_407319
.text:004075C5                 cmp     bl, 2Fh ; '/'
.text:004075C8                 jz      loc_407319
.text:004075CE                 cmp     bl, 5Ch ; '\'
.text:004075D1                 jz      loc_407319
.text:004075D7
.text:004075D7 loc_4075D7:                             ; CODE XREF: _win32_longpath+333↓j
.text:004075D7                 mov     [ebp+268h+Destination], bl
.text:004075DA                 inc     esi
.text:004075DB                 inc     ebp
.text:004075DC                 movzx   ebx, byte ptr [esi]
.text:004075DF                 test    bl, bl
.text:004075E1                 jz      loc_407319
.text:004075E7                 cmp     bl, 2Fh ; '/'
.text:004075EA                 jz      loc_407319
.text:004075F0                 cmp     bl, 5Ch ; '\'
.text:004075F3                 jnz     short loc_4075D7
.text:004075F5                 jmp     loc_407319
.text:004075F5 ; ---------------------------------------------------------------------------
.text:004075FA                 align 10h
.text:00407600
.text:00407600 loc_407600:                             ; CODE XREF: _win32_longpath+2F6↑j
.text:00407600                                         ; _win32_longpath+2FB↑j ...
.text:00407600                 inc     esi
.text:00407601                 movzx   ebx, byte ptr [esi]
.text:00407604                 test    bl, bl
.text:00407606                 jz      loc_407319
.text:0040760C                 cmp     bl, 2Fh ; '/'
.text:0040760F                 jz      short loc_407600
.text:00407611                 cmp     bl, 5Ch ; '\'
.text:00407614                 jz      short loc_407600
.text:00407616                 jmp     short loc_4075BD
.text:00407618 ; ---------------------------------------------------------------------------
.text:00407618
.text:00407618 loc_407618:                             ; CODE XREF: _win32_longpath+29F↑j
.text:00407618                                         ; _win32_longpath+2A9↑j ...
.text:00407618                 inc     esi
.text:00407619                 movzx   ebx, byte ptr [esi]
.text:0040761C                 test    bl, bl
.text:0040761E                 jz      loc_407319
.text:00407624                 cmp     bl, 2Fh ; '/'
.text:00407627                 jz      short loc_407618
.text:00407629                 cmp     bl, 5Ch ; '\'
.text:0040762C                 jz      short loc_407618
.text:0040762E                 jmp     loc_40756F
.text:00407633 ; ---------------------------------------------------------------------------
.text:00407633
.text:00407633 loc_407633:                             ; CODE XREF: _win32_longpath+297↑j
.text:00407633                 movzx   ebx, byte ptr [esi]
.text:00407636                 jmp     loc_40756F
.text:0040763B ; ---------------------------------------------------------------------------
.text:0040763B
.text:0040763B loc_40763B:                             ; CODE XREF: _win32_longpath+39↑j
.text:0040763B                 movzx   ecx, byte ptr [eax]
.text:0040763E                 mov     esi, eax
.text:00407640                 mov     [esp+278h+var_267], 3Ah ; ':'
.text:00407645                 add     esi, 2
.text:00407648                 lea     ebp, [esp+12h]
.text:0040764C                 mov     [esp+278h+Destination], cl
.text:00407650                 jmp     loc_407319
.text:00407650 _win32_longpath endp
.text:00407650
.text:00407650 ; ---------------------------------------------------------------------------
.text:00407655                 align 10h
.text:00407660                 sub     esp, 0Ch
.text:00407663                 mov     edx, [esp+10h]
.text:00407667                 mov     dword ptr [esp+4], 0
.text:0040766F                 mov     [esp], edx
.text:00407672                 call    sub_40B130
.text:00407677                 inc     eax
.text:00407678                 setnz   dl
.text:0040767B                 add     esp, 0Ch
.text:0040767E                 movzx   eax, dl
.text:00407681                 retn
.text:00407681 ; ---------------------------------------------------------------------------
.text:00407682                 align 10h
.text:00407690
.text:00407690 ; =============== S U B R O U T I N E =======================================
.text:00407690
.text:00407690
.text:00407690 sub_407690      proc near               ; CODE XREF: sub_406EC0+B4↑p
.text:00407690                                         ; sub_40B000+AA↓p
.text:00407690
.text:00407690 arg_0           = dword ptr  4
.text:00407690
.text:00407690                 mov     ecx, [esp+arg_0]
.text:00407694                 mov     edx, ecx
.text:00407696                 movzx   eax, byte ptr [ecx]
.text:00407699                 test    al, al
.text:0040769B                 jz      short loc_4076AC
.text:0040769D                 lea     esi, [esi+0]
.text:004076A0
.text:004076A0 loc_4076A0:                             ; CODE XREF: sub_407690+1A↓j
.text:004076A0                 cmp     al, 5Ch ; '\'
.text:004076A2                 jz      short loc_4076B0
.text:004076A4
.text:004076A4 loc_4076A4:                             ; CODE XREF: sub_407690+23↓j
.text:004076A4                 inc     edx
.text:004076A5                 movzx   eax, byte ptr [edx]
.text:004076A8                 test    al, al
.text:004076AA                 jnz     short loc_4076A0
.text:004076AC
.text:004076AC loc_4076AC:                             ; CODE XREF: sub_407690+B↑j
.text:004076AC                 mov     eax, ecx
.text:004076AE                 retn
.text:004076AE ; ---------------------------------------------------------------------------
.text:004076AF                 align 10h
.text:004076B0
.text:004076B0 loc_4076B0:                             ; CODE XREF: sub_407690+12↑j
.text:004076B0                 mov     byte ptr [edx], 2Fh ; '/'
.text:004076B3                 jmp     short loc_4076A4
.text:004076B3 sub_407690      endp
.text:004076B3
.text:004076B3 ; ---------------------------------------------------------------------------
.text:004076B5                 align 10h
.text:004076C0                 push    ebx
.text:004076C1                 sub     esp, 8
.text:004076C4                 mov     ebx, [esp+14h]
.text:004076C8                 mov     edx, [esp+10h]
.text:004076CC                 mov     [esp], ebx
.text:004076CF                 mov     [esp+4], edx
.text:004076D3                 call    strcpy
.text:004076D8                 movzx   eax, byte ptr [ebx]
.text:004076DB                 mov     edx, ebx
.text:004076DD                 test    al, al
.text:004076DF                 jz      short loc_4076FC
.text:004076E1                 jmp     short loc_4076F0
.text:004076E1 ; ---------------------------------------------------------------------------
.text:004076E3                 align 10h
.text:004076F0
.text:004076F0 loc_4076F0:                             ; CODE XREF: .text:004076E1↑j
.text:004076F0                                         ; .text:004076FA↓j
.text:004076F0                 cmp     al, 5Ch ; '\'
.text:004076F2                 jz      short loc_407703
.text:004076F4
.text:004076F4 loc_4076F4:                             ; CODE XREF: .text:00407706↓j
.text:004076F4                 inc     edx
.text:004076F5                 movzx   eax, byte ptr [edx]
.text:004076F8                 test    al, al
.text:004076FA                 jnz     short loc_4076F0
.text:004076FC
.text:004076FC loc_4076FC:                             ; CODE XREF: .text:004076DF↑j
.text:004076FC                 add     esp, 8
.text:004076FF                 xor     eax, eax
.text:00407701                 pop     ebx
.text:00407702                 retn
.text:00407703 ; ---------------------------------------------------------------------------
.text:00407703
.text:00407703 loc_407703:                             ; CODE XREF: .text:004076F2↑j
.text:00407703                 mov     byte ptr [edx], 2Fh ; '/'
.text:00407706                 jmp     short loc_4076F4
.text:00407706 ; ---------------------------------------------------------------------------
.text:00407708                 align 10h
.text:00407710
.text:00407710 ; =============== S U B R O U T I N E =======================================
.text:00407710
.text:00407710
.text:00407710 sub_407710      proc near               ; CODE XREF: sub_4085E0+16↓p
.text:00407710                                         ; sub_408AE0+1F↓p ...
.text:00407710
.text:00407710 arg_0           = dword ptr  4
.text:00407710
.text:00407710                 mov     ecx, [esp+arg_0]
.text:00407714                 mov     edx, ecx
.text:00407716                 movzx   eax, byte ptr [ecx]
.text:00407719                 test    al, al
.text:0040771B                 jz      short loc_40772C
.text:0040771D                 lea     esi, [esi+0]
.text:00407720
.text:00407720 loc_407720:                             ; CODE XREF: sub_407710+1A↓j
.text:00407720                 cmp     al, 2Fh ; '/'
.text:00407722                 jz      short loc_407730
.text:00407724
.text:00407724 loc_407724:                             ; CODE XREF: sub_407710+23↓j
.text:00407724                 inc     edx
.text:00407725                 movzx   eax, byte ptr [edx]
.text:00407728                 test    al, al
.text:0040772A                 jnz     short loc_407720
.text:0040772C
.text:0040772C loc_40772C:                             ; CODE XREF: sub_407710+B↑j
.text:0040772C                 mov     eax, ecx
.text:0040772E                 retn
.text:0040772E ; ---------------------------------------------------------------------------
.text:0040772F                 align 10h
.text:00407730
.text:00407730 loc_407730:                             ; CODE XREF: sub_407710+12↑j
.text:00407730                 mov     byte ptr [edx], 5Ch ; '\'
.text:00407733                 jmp     short loc_407724
.text:00407733 sub_407710      endp
.text:00407733
.text:00407733 ; ---------------------------------------------------------------------------
.text:00407735                 align 10h
.text:00407740                 push    ebx
.text:00407741                 sub     esp, 8
.text:00407744                 mov     ebx, [esp+14h]
.text:00407748                 mov     edx, [esp+10h]
.text:0040774C                 mov     [esp], ebx
.text:0040774F                 mov     [esp+4], edx
.text:00407753                 call    strcpy
.text:00407758                 movzx   eax, byte ptr [ebx]
.text:0040775B                 mov     edx, ebx
.text:0040775D                 test    al, al
.text:0040775F                 jz      short loc_40777C
.text:00407761                 jmp     short loc_407770
.text:00407761 ; ---------------------------------------------------------------------------
.text:00407763                 align 10h
.text:00407770
.text:00407770 loc_407770:                             ; CODE XREF: .text:00407761↑j
.text:00407770                                         ; .text:0040777A↓j
.text:00407770                 cmp     al, 2Fh ; '/'
.text:00407772                 jz      short loc_407783
.text:00407774
.text:00407774 loc_407774:                             ; CODE XREF: .text:00407786↓j
.text:00407774                 inc     edx
.text:00407775                 movzx   eax, byte ptr [edx]
.text:00407778                 test    al, al
.text:0040777A                 jnz     short loc_407770
.text:0040777C
.text:0040777C loc_40777C:                             ; CODE XREF: .text:0040775F↑j
.text:0040777C                 add     esp, 8
.text:0040777F                 xor     eax, eax
.text:00407781                 pop     ebx
.text:00407782                 retn
.text:00407783 ; ---------------------------------------------------------------------------
.text:00407783
.text:00407783 loc_407783:                             ; CODE XREF: .text:00407772↑j
.text:00407783                 mov     byte ptr [edx], 5Ch ; '\'
.text:00407786                 jmp     short loc_407774
.text:00407786 ; ---------------------------------------------------------------------------
.text:00407788                 align 10h
.text:00407790                 push    ebx
.text:00407791                 sub     esp, 8
.text:00407794                 mov     ebx, [esp+14h]
.text:00407798                 mov     edx, [esp+10h]
.text:0040779C                 mov     [esp+4], ebx
.text:004077A0                 mov     [esp], edx
.text:004077A3                 call    sub_40AFB0
.text:004077A8                 movzx   eax, byte ptr [ebx]
.text:004077AB                 mov     edx, ebx
.text:004077AD                 test    al, al
.text:004077AF                 jz      short loc_4077CC
.text:004077B1                 jmp     short loc_4077C0
.text:004077B1 ; ---------------------------------------------------------------------------
.text:004077B3                 align 10h
.text:004077C0
.text:004077C0 loc_4077C0:                             ; CODE XREF: .text:004077B1↑j
.text:004077C0                                         ; .text:004077CA↓j
.text:004077C0                 cmp     al, 2Fh ; '/'
.text:004077C2                 jz      short loc_4077D3
.text:004077C4
.text:004077C4 loc_4077C4:                             ; CODE XREF: .text:004077D6↓j
.text:004077C4                 inc     edx
.text:004077C5                 movzx   eax, byte ptr [edx]
.text:004077C8                 test    al, al
.text:004077CA                 jnz     short loc_4077C0
.text:004077CC
.text:004077CC loc_4077CC:                             ; CODE XREF: .text:004077AF↑j
.text:004077CC                 add     esp, 8
.text:004077CF                 xor     eax, eax
.text:004077D1                 pop     ebx
.text:004077D2                 retn
.text:004077D3 ; ---------------------------------------------------------------------------
.text:004077D3
.text:004077D3 loc_4077D3:                             ; CODE XREF: .text:004077C2↑j
.text:004077D3                 mov     byte ptr [edx], 5Ch ; '\'
.text:004077D6                 jmp     short loc_4077C4
.text:004077D6 ; ---------------------------------------------------------------------------
.text:004077D8                 align 10h
.text:004077E0                 push    ebx
.text:004077E1                 sub     esp, 8
.text:004077E4                 mov     ebx, [esp+14h]
.text:004077E8                 mov     edx, [esp+10h]
.text:004077EC                 mov     [esp], ebx
.text:004077EF                 mov     [esp+4], edx
.text:004077F3                 call    sub_40AFB0
.text:004077F8                 movzx   eax, byte ptr [ebx]
.text:004077FB                 mov     edx, ebx
.text:004077FD                 test    al, al
.text:004077FF                 jz      short loc_40781C
.text:00407801                 jmp     short loc_407810
.text:00407801 ; ---------------------------------------------------------------------------
.text:00407803                 align 10h
.text:00407810
.text:00407810 loc_407810:                             ; CODE XREF: .text:00407801↑j
.text:00407810                                         ; .text:0040781A↓j
.text:00407810                 cmp     al, 5Ch ; '\'
.text:00407812                 jz      short loc_407821
.text:00407814
.text:00407814 loc_407814:                             ; CODE XREF: .text:00407824↓j
.text:00407814                 inc     edx
.text:00407815                 movzx   eax, byte ptr [edx]
.text:00407818                 test    al, al
.text:0040781A                 jnz     short loc_407810
.text:0040781C
.text:0040781C loc_40781C:                             ; CODE XREF: .text:004077FF↑j
.text:0040781C                 add     esp, 8
.text:0040781F                 pop     ebx
.text:00407820                 retn
.text:00407821 ; ---------------------------------------------------------------------------
.text:00407821
.text:00407821 loc_407821:                             ; CODE XREF: .text:00407812↑j
.text:00407821                 mov     byte ptr [edx], 2Fh ; '/'
.text:00407824                 jmp     short loc_407814
.text:00407824 ; ---------------------------------------------------------------------------
.text:00407826                 align 10h
.text:00407830
.text:00407830 ; =============== S U B R O U T I N E =======================================
.text:00407830
.text:00407830
.text:00407830 ; int __cdecl sub_407830(LPSTR)
.text:00407830 sub_407830      proc near               ; CODE XREF: .text:004078BE↓p
.text:00407830                                         ; .text:004078FE↓p ...
.text:00407830
.text:00407830 hModule         = dword ptr -1Ch
.text:00407830 lpFilename      = dword ptr -18h
.text:00407830 nSize           = dword ptr -14h
.text:00407830 arg_0           = dword ptr  4
.text:00407830
.text:00407830                 push    esi
.text:00407831                 push    ebx
.text:00407832                 sub     esp, 14h
.text:00407835                 mov     esi, [esp+1Ch+arg_0]
.text:00407839                 mov     [esp+1Ch+nSize], 104h ; nSize
.text:00407841                 mov     [esp+1Ch+hModule], 0 ; hModule
.text:00407848                 mov     [esp+1Ch+lpFilename], esi ; lpFilename
.text:0040784C                 call    GetModuleFileNameA
.text:00407851                 sub     esp, 0Ch
.text:00407854                 test    eax, eax
.text:00407856                 jz      short loc_407898
.text:00407858                 cmp     eax, 104h
.text:0040785D                 jg      short loc_407889
.text:0040785F
.text:0040785F loc_40785F:                             ; CODE XREF: sub_407830+66↓j
.text:0040785F                                         ; sub_407830+78↓j
.text:0040785F                 movzx   eax, byte ptr [esi]
.text:00407862                 mov     edx, esi
.text:00407864                 test    al, al
.text:00407866                 jz      short loc_40787C
.text:00407868                 nop
.text:00407869                 lea     esi, [esi+0]
.text:00407870
.text:00407870 loc_407870:                             ; CODE XREF: sub_407830+4A↓j
.text:00407870                 cmp     al, 5Ch ; '\'
.text:00407872                 jz      short loc_407884
.text:00407874
.text:00407874 loc_407874:                             ; CODE XREF: sub_407830+57↓j
.text:00407874                 inc     edx
.text:00407875                 movzx   eax, byte ptr [edx]
.text:00407878                 test    al, al
.text:0040787A                 jnz     short loc_407870
.text:0040787C
.text:0040787C loc_40787C:                             ; CODE XREF: sub_407830+36↑j
.text:0040787C                 add     esp, 14h
.text:0040787F                 mov     eax, esi
.text:00407881                 pop     ebx
.text:00407882                 pop     esi
.text:00407883                 retn
.text:00407884 ; ---------------------------------------------------------------------------
.text:00407884
.text:00407884 loc_407884:                             ; CODE XREF: sub_407830+42↑j
.text:00407884                 mov     byte ptr [edx], 2Fh ; '/'
.text:00407887                 jmp     short loc_407874
.text:00407889 ; ---------------------------------------------------------------------------
.text:00407889
.text:00407889 loc_407889:                             ; CODE XREF: sub_407830+2D↑j
.text:00407889                 call    _errno
.text:0040788E                 mov     dword ptr [eax], 26h ; '&'
.text:00407894                 xor     esi, esi
.text:00407896                 jmp     short loc_40785F
.text:00407898 ; ---------------------------------------------------------------------------
.text:00407898
.text:00407898 loc_407898:                             ; CODE XREF: sub_407830+26↑j
.text:00407898                 call    sub_407DC0
.text:0040789D                 mov     ebx, eax
.text:0040789F                 xor     esi, esi
.text:004078A1                 call    _errno
.text:004078A6                 mov     [eax], ebx
.text:004078A8                 jmp     short loc_40785F
.text:004078A8 sub_407830      endp
.text:004078A8
.text:004078A8 ; ---------------------------------------------------------------------------
.text:004078AA                 align 10h
.text:004078B0                 sub     esp, 0Ch
.text:004078B3                 mov     [esp+8], ebx
.text:004078B7                 mov     ebx, [esp+10h]
.text:004078BB                 mov     [esp], ebx
.text:004078BE                 call    sub_407830
.text:004078C3                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:004078CB                 mov     [esp], ebx
.text:004078CE                 call    strrchr
.text:004078D3                 test    eax, eax
.text:004078D5                 jz      short loc_4078DA
.text:004078D7                 lea     ebx, [eax+1]
.text:004078DA
.text:004078DA loc_4078DA:                             ; CODE XREF: .text:004078D5↑j
.text:004078DA                 mov     eax, ebx
.text:004078DC                 mov     ebx, [esp+8]
.text:004078E0                 add     esp, 0Ch
.text:004078E3                 retn
.text:004078E3 ; ---------------------------------------------------------------------------
.text:004078E4                 align 10h
.text:004078F0                 sub     esp, 0Ch
.text:004078F3                 mov     [esp+8], ebx
.text:004078F7                 mov     ebx, [esp+10h]
.text:004078FB                 mov     [esp], ebx
.text:004078FE                 call    sub_407830
.text:00407903                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:0040790B                 mov     [esp], ebx
.text:0040790E                 call    strrchr
.text:00407913                 test    eax, eax
.text:00407915                 jz      short loc_40791A
.text:00407917                 mov     byte ptr [eax], 0
.text:0040791A
.text:0040791A loc_40791A:                             ; CODE XREF: .text:00407915↑j
.text:0040791A                 mov     eax, ebx
.text:0040791C                 mov     ebx, [esp+8]
.text:00407920                 add     esp, 0Ch
.text:00407923                 retn
.text:00407923 ; ---------------------------------------------------------------------------
.text:00407924                 align 10h
.text:00407930                 sub     esp, 0Ch
.text:00407933                 mov     [esp+8], ebx
.text:00407937                 mov     ebx, [esp+10h]
.text:0040793B                 mov     [esp], ebx
.text:0040793E                 call    sub_407830
.text:00407943                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:0040794B                 mov     [esp], ebx
.text:0040794E                 call    strrchr
.text:00407953                 test    eax, eax
.text:00407955                 jz      short loc_40795A
.text:00407957                 mov     byte ptr [eax], 0
.text:0040795A
.text:0040795A loc_40795A:                             ; CODE XREF: .text:00407955↑j
.text:0040795A                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:00407962                 mov     [esp], ebx
.text:00407965                 call    strrchr
.text:0040796A                 test    eax, eax
.text:0040796C                 jz      short loc_407971
.text:0040796E                 mov     byte ptr [eax], 0
.text:00407971
.text:00407971 loc_407971:                             ; CODE XREF: .text:0040796C↑j
.text:00407971                 mov     eax, ebx
.text:00407973                 mov     ebx, [esp+8]
.text:00407977                 add     esp, 0Ch
.text:0040797A                 retn
.text:0040797A ; ---------------------------------------------------------------------------
.text:0040797B                 align 10h
.text:00407980                 sub     esp, 1Ch
.text:00407983                 mov     edx, [esp+20h]
.text:00407987                 mov     [esp+10h], ebx
.text:0040798B                 xor     ebx, ebx
.text:0040798D                 mov     [esp+14h], esi
.text:00407991                 mov     [esp+18h], edi
.text:00407995                 mov     [esp], edx
.text:00407998                 call    sub_40AFE0
.text:0040799D                 mov     edx, [esp+24h]
.text:004079A1                 mov     edi, eax
.text:004079A3                 mov     [esp], edx
.text:004079A6                 call    sub_40AFE0
.text:004079AB                 mov     [esp+4], eax
.text:004079AF                 mov     esi, eax
.text:004079B1                 mov     [esp], edi
.text:004079B4                 call    _stricmp_0
.text:004079B9                 mov     [esp], edi
.text:004079BC                 test    eax, eax
.text:004079BE                 setz    bl
.text:004079C1                 call    free
.text:004079C6                 mov     [esp], esi
.text:004079C9                 call    free
.text:004079CE                 mov     eax, ebx
.text:004079D0                 mov     esi, [esp+14h]
.text:004079D4                 mov     ebx, [esp+10h]
.text:004079D8                 mov     edi, [esp+18h]
.text:004079DC                 add     esp, 1Ch
.text:004079DF                 retn
.text:004079E0 ; ---------------------------------------------------------------------------
.text:004079E0                 xor     eax, eax
.text:004079E2                 retn
.text:004079E2 ; ---------------------------------------------------------------------------
.text:004079E3 aKernel32Dll    db 'kernel32.dll',0     ; DATA XREF: .text:00407A17↓o
.text:004079F0 aGetlongpathnam db 'GetLongPathName',0  ; DATA XREF: .text:00407A26↓o
.text:00407A00 ; ---------------------------------------------------------------------------
.text:00407A00                 sub     esp, 1Ch
.text:00407A03                 mov     [esp+10h], ebx
.text:00407A07                 mov     ebx, [esp+20h]
.text:00407A0B                 mov     [esp+18h], edi
.text:00407A0F                 mov     edi, [esp+24h]
.text:00407A13                 mov     [esp+14h], esi
.text:00407A17                 mov     dword ptr [esp], offset aKernel32Dll ; "kernel32.dll"
.text:00407A1E                 call    GetModuleHandleA
.text:00407A23                 sub     esp, 4
.text:00407A26                 mov     dword ptr [esp+4], offset aGetlongpathnam ; "GetLongPathName"
.text:00407A2E                 mov     [esp], eax
.text:00407A31                 call    GetProcAddress
.text:00407A36                 sub     esp, 8
.text:00407A39                 test    eax, eax
.text:00407A3B                 jz      short loc_407A53
.text:00407A3D                 mov     dword ptr [esp+8], 104h
.text:00407A45                 mov     [esp+4], ebx
.text:00407A49                 mov     [esp], edi
.text:00407A4C                 call    eax
.text:00407A4E                 sub     esp, 0Ch
.text:00407A51                 mov     esi, eax
.text:00407A53
.text:00407A53 loc_407A53:                             ; CODE XREF: .text:00407A3B↑j
.text:00407A53                 test    esi, esi
.text:00407A55                 jz      short loc_407A70
.text:00407A57
.text:00407A57 loc_407A57:                             ; CODE XREF: .text:00407A8B↓j
.text:00407A57                 mov     eax, ebx
.text:00407A59                 mov     esi, [esp+14h]
.text:00407A5D                 mov     ebx, [esp+10h]
.text:00407A61                 mov     edi, [esp+18h]
.text:00407A65                 add     esp, 1Ch
.text:00407A68                 retn
.text:00407A68 ; ---------------------------------------------------------------------------
.text:00407A69                 align 10h
.text:00407A70
.text:00407A70 loc_407A70:                             ; CODE XREF: .text:00407A55↑j
.text:00407A70                 call    sub_40AD00
.text:00407A75                 mov     [esp], ebx
.text:00407A78                 mov     [esp+4], edi
.text:00407A7C                 call    strcpy
.text:00407A81                 mov     [esp], ebx
.text:00407A84                 call    _win32_longpath
.text:00407A89                 mov     ebx, eax
.text:00407A8B                 jmp     short loc_407A57
.text:00407A8B ; ---------------------------------------------------------------------------
.text:00407A8D                 align 10h
.text:00407A90                 sub     esp, 1Ch
.text:00407A93                 mov     [esp+18h], edi
.text:00407A97                 mov     edi, [esp+20h]
.text:00407A9B                 mov     [esp+10h], ebx
.text:00407A9F                 mov     [esp+14h], esi
.text:00407AA3                 mov     dword ptr [esp+8], 0
.text:00407AAB                 mov     dword ptr [esp+4], 0
.text:00407AB3                 mov     [esp], edi
.text:00407AB6                 call    GetShortPathNameA
.text:00407ABB                 sub     esp, 0Ch
.text:00407ABE                 mov     ebx, eax
.text:00407AC0                 test    eax, eax
.text:00407AC2                 jz      short loc_407B10
.text:00407AC4                 lea     edx, [eax+1]
.text:00407AC7                 mov     [esp], edx
.text:00407ACA                 call    malloc
.text:00407ACF                 test    eax, eax
.text:00407AD1                 mov     esi, eax
.text:00407AD3                 jz      short loc_407B10
.text:00407AD5                 mov     [esp+8], ebx
.text:00407AD9                 mov     [esp+4], eax
.text:00407ADD                 mov     [esp], edi
.text:00407AE0                 call    GetShortPathNameA
.text:00407AE5                 sub     esp, 0Ch
.text:00407AE8                 mov     edx, esi
.text:00407AEA                 test    eax, eax
.text:00407AEC                 jz      short loc_407B02
.text:00407AEE                 mov     esi, esi
.text:00407AF0
.text:00407AF0 loc_407AF0:                             ; CODE XREF: .text:00407B20↓j
.text:00407AF0                 mov     ebx, [esp+10h]
.text:00407AF4                 mov     eax, edx
.text:00407AF6                 mov     esi, [esp+14h]
.text:00407AFA                 mov     edi, [esp+18h]
.text:00407AFE                 add     esp, 1Ch
.text:00407B01                 retn
.text:00407B02 ; ---------------------------------------------------------------------------
.text:00407B02
.text:00407B02 loc_407B02:                             ; CODE XREF: .text:00407AEC↑j
.text:00407B02                 mov     [esp], esi
.text:00407B05                 call    free
.text:00407B0A                 lea     esi, [esi+0]
.text:00407B10
.text:00407B10 loc_407B10:                             ; CODE XREF: .text:00407AC2↑j
.text:00407B10                                         ; .text:00407AD3↑j
.text:00407B10                 call    sub_407DC0
.text:00407B15                 mov     esi, eax
.text:00407B17                 call    _errno
.text:00407B1C                 mov     [eax], esi
.text:00407B1E                 mov     edx, edi
.text:00407B20                 jmp     short loc_407AF0
.text:00407B20 ; ---------------------------------------------------------------------------
.text:00407B22                 align 10h
.text:00407B30
.text:00407B30 ; =============== S U B R O U T I N E =======================================
.text:00407B30
.text:00407B30 ; Attributes: info_from_lumina
.text:00407B30
.text:00407B30 ___get_errno    proc near               ; CODE XREF: sub_407DC0+B↓p
.text:00407B30
.text:00407B30 arg_0           = dword ptr  4
.text:00407B30
.text:00407B30                 mov     eax, [esp+arg_0]
.text:00407B34                 cmp     eax, 53h ; 'S'
.text:00407B37                 jg      loc_407C30
.text:00407B3D                 cmp     eax, 52h ; 'R'
.text:00407B40                 jge     short loc_407B92
.text:00407B42                 cmp     eax, 0Fh
.text:00407B45                 jz      short loc_407B60
.text:00407B47                 cmp     eax, 0Fh
.text:00407B4A                 jg      short loc_407BC0
.text:00407B4C                 cmp     eax, 9
.text:00407B4F                 jg      short loc_407BA0
.text:00407B51                 cmp     eax, 7
.text:00407B54                 jge     short loc_407B99
.text:00407B56                 cmp     eax, 3
.text:00407B59                 jg      short loc_407B7A
.text:00407B5B                 cmp     eax, 2
.text:00407B5E                 jl      short loc_407B73
.text:00407B60
.text:00407B60 loc_407B60:                             ; CODE XREF: ___get_errno+15↑j
.text:00407B60                                         ; ___get_errno+9D↓j ...
.text:00407B60                 mov     edx, 2
.text:00407B65                 lea     esi, [esi+0]
.text:00407B69                 lea     edi, [edi+0]
.text:00407B70
.text:00407B70 loc_407B70:                             ; CODE XREF: ___get_errno+48↓j
.text:00407B70                                         ; ___get_errno+59↓j ...
.text:00407B70                 mov     eax, edx
.text:00407B72                 retn
.text:00407B73 ; ---------------------------------------------------------------------------
.text:00407B73
.text:00407B73 loc_407B73:                             ; CODE XREF: ___get_errno+2E↑j
.text:00407B73                                         ; ___get_errno+78↓j ...
.text:00407B73                 mov     edx, 16h
.text:00407B78                 jmp     short loc_407B70
.text:00407B7A ; ---------------------------------------------------------------------------
.text:00407B7A
.text:00407B7A loc_407B7A:                             ; CODE XREF: ___get_errno+29↑j
.text:00407B7A                 cmp     eax, 5
.text:00407B7D                 jz      short loc_407B92
.text:00407B7F                 cmp     eax, 5
.text:00407B82                 jg      short loc_407B8B
.text:00407B84                 mov     edx, 18h
.text:00407B89                 jmp     short loc_407B70
.text:00407B8B ; ---------------------------------------------------------------------------
.text:00407B8B
.text:00407B8B loc_407B8B:                             ; CODE XREF: ___get_errno+52↑j
.text:00407B8B                                         ; ___get_errno+180↓j
.text:00407B8B                 mov     edx, 9
.text:00407B90                 jmp     short loc_407B70
.text:00407B92 ; ---------------------------------------------------------------------------
.text:00407B92
.text:00407B92 loc_407B92:                             ; CODE XREF: ___get_errno+10↑j
.text:00407B92                                         ; ___get_errno+4D↑j ...
.text:00407B92                 mov     edx, 0Dh
.text:00407B97                 jmp     short loc_407B70
.text:00407B99 ; ---------------------------------------------------------------------------
.text:00407B99
.text:00407B99 loc_407B99:                             ; CODE XREF: ___get_errno+24↑j
.text:00407B99                                         ; ___get_errno+73↓j ...
.text:00407B99                 mov     edx, 0Ch
.text:00407B9E                 jmp     short loc_407B70
.text:00407BA0 ; ---------------------------------------------------------------------------
.text:00407BA0
.text:00407BA0 loc_407BA0:                             ; CODE XREF: ___get_errno+1F↑j
.text:00407BA0                 cmp     eax, 0Dh
.text:00407BA3                 jg      short loc_407B99
.text:00407BA5                 cmp     eax, 0Ch
.text:00407BA8                 jge     short loc_407B73
.text:00407BAA                 cmp     eax, 0Ah
.text:00407BAD                 mov     edx, 7
.text:00407BB2                 jz      short loc_407B70
.text:00407BB4                 cmp     eax, 0Bh
.text:00407BB7                 jnz     short loc_407B73
.text:00407BB9
.text:00407BB9 loc_407BB9:                             ; CODE XREF: ___get_errno+21A↓j
.text:00407BB9                 mov     edx, 8
.text:00407BBE                 jmp     short loc_407B70
.text:00407BC0 ; ---------------------------------------------------------------------------
.text:00407BC0
.text:00407BC0 loc_407BC0:                             ; CODE XREF: ___get_errno+1A↑j
.text:00407BC0                 cmp     eax, 22h ; '"'
.text:00407BC3                 jg      short loc_407BF4
.text:00407BC5                 cmp     eax, 16h
.text:00407BC8                 jge     short loc_407B92
.text:00407BCA                 cmp     eax, 12h
.text:00407BCD                 jz      short loc_407B60
.text:00407BCF                 cmp     eax, 12h
.text:00407BD2                 jg      short loc_407BE5
.text:00407BD4                 cmp     eax, 10h
.text:00407BD7                 jz      short loc_407B92
.text:00407BD9                 mov     edx, 12h
.text:00407BDE                 cmp     eax, 11h
.text:00407BE1
.text:00407BE1 loc_407BE1:                             ; CODE XREF: ___get_errno+172↓j
.text:00407BE1                                         ; ___get_errno+24C↓j ...
.text:00407BE1                 jnz     short loc_407B73
.text:00407BE3                 jmp     short loc_407B70
.text:00407BE5 ; ---------------------------------------------------------------------------
.text:00407BE5
.text:00407BE5 loc_407BE5:                             ; CODE XREF: ___get_errno+A2↑j
.text:00407BE5                 cmp     eax, 14h
.text:00407BE8                 jle     short loc_407B92
.text:00407BEA
.text:00407BEA loc_407BEA:                             ; CODE XREF: ___get_errno+1D7↓j
.text:00407BEA                 mov     edx, 10h
.text:00407BEF                 jmp     loc_407B70
.text:00407BF4 ; ---------------------------------------------------------------------------
.text:00407BF4
.text:00407BF4 loc_407BF4:                             ; CODE XREF: ___get_errno+93↑j
.text:00407BF4                 cmp     eax, 41h ; 'A'
.text:00407BF7                 jz      short loc_407B92
.text:00407BF9                 cmp     eax, 41h ; 'A'
.text:00407BFC                 jg      short loc_407C11
.text:00407BFE                 cmp     eax, 24h ; '$'
.text:00407C01                 jz      short loc_407B92
.text:00407C03                 cmp     eax, 35h ; '5'
.text:00407C06                 jnz     loc_407B73
.text:00407C0C                 jmp     loc_407B60
.text:00407C11 ; ---------------------------------------------------------------------------
.text:00407C11
.text:00407C11 loc_407C11:                             ; CODE XREF: ___get_errno+CC↑j
.text:00407C11                 cmp     eax, 43h ; 'C'
.text:00407C14                 jz      loc_407B60
.text:00407C1A                 cmp     eax, 50h ; 'P'
.text:00407C1D                 jnz     loc_407B73
.text:00407C23
.text:00407C23 loc_407C23:                             ; CODE XREF: ___get_errno+1FB↓j
.text:00407C23                 mov     edx, 11h
.text:00407C28                 jmp     loc_407B70
.text:00407C28 ; ---------------------------------------------------------------------------
.text:00407C2D                 align 10h
.text:00407C30
.text:00407C30 loc_407C30:                             ; CODE XREF: ___get_errno+7↑j
.text:00407C30                 cmp     eax, 0A1h ; '¡'
.text:00407C35                 jz      loc_407B60
.text:00407C3B                 cmp     eax, 0A1h ; '¡'
.text:00407C40                 jg      loc_407CF0
.text:00407C46                 cmp     eax, 81h
.text:00407C4B                 jg      short loc_407CB5
.text:00407C4D                 cmp     eax, 80h ; '€'
.text:00407C52                 mov     edx, 0Ah
.text:00407C57                 jge     loc_407B70
.text:00407C5D                 cmp     eax, 6Ch ; 'l'
.text:00407C60                 jz      loc_407B92
.text:00407C66                 cmp     eax, 6Ch ; 'l'
.text:00407C69                 jg      short loc_407C87
.text:00407C6B                 cmp     eax, 57h ; 'W'
.text:00407C6E                 jz      loc_407B73
.text:00407C74                 cmp     eax, 59h ; 'Y'
.text:00407C77                 jnz     loc_407B73
.text:00407C7D
.text:00407C7D loc_407C7D:                             ; CODE XREF: ___get_errno+1E9↓j
.text:00407C7D                                         ; ___get_errno+23C↓j
.text:00407C7D                 mov     edx, 0Bh
.text:00407C82                 jmp     loc_407B70
.text:00407C87 ; ---------------------------------------------------------------------------
.text:00407C87
.text:00407C87 loc_407C87:                             ; CODE XREF: ___get_errno+139↑j
.text:00407C87                 cmp     eax, 70h ; 'p'
.text:00407C8A                 mov     edx, 1Ch
.text:00407C8F                 jz      loc_407B70
.text:00407C95                 cmp     eax, 70h ; 'p'
.text:00407C98                 jg      short loc_407CA7
.text:00407C9A                 mov     edx, 20h ; ' '
.text:00407C9F                 cmp     eax, 6Dh ; 'm'
.text:00407CA2                 jmp     loc_407BE1
.text:00407CA7 ; ---------------------------------------------------------------------------
.text:00407CA7
.text:00407CA7 loc_407CA7:                             ; CODE XREF: ___get_errno+168↑j
.text:00407CA7                 cmp     eax, 72h ; 'r'
.text:00407CAA
.text:00407CAA loc_407CAA:                             ; CODE XREF: ___get_errno+19C↓j
.text:00407CAA                 jnz     loc_407B73
.text:00407CB0                 jmp     loc_407B8B
.text:00407CB5 ; ---------------------------------------------------------------------------
.text:00407CB5
.text:00407CB5 loc_407CB5:                             ; CODE XREF: ___get_errno+11B↑j
.text:00407CB5                 cmp     eax, 84h ; '„'
.text:00407CBA                 jz      loc_407B92
.text:00407CC0                 cmp     eax, 84h ; '„'
.text:00407CC5                 jg      short loc_407CCE
.text:00407CC7                 cmp     eax, 82h ; '‚'
.text:00407CCC                 jmp     short loc_407CAA
.text:00407CCE ; ---------------------------------------------------------------------------
.text:00407CCE
.text:00407CCE loc_407CCE:                             ; CODE XREF: ___get_errno+195↑j
.text:00407CCE                 cmp     eax, 91h ; '‘'
.text:00407CD3                 mov     edx, 29h ; ')'
.text:00407CD8                 jz      loc_407B70
.text:00407CDE                 cmp     eax, 9Eh ; 'ž'
.text:00407CE3
.text:00407CE3 loc_407CE3:                             ; CODE XREF: ___get_errno+1F4↓j
.text:00407CE3                 jnz     loc_407B73
.text:00407CE9                 jmp     loc_407B92
.text:00407CE9 ; ---------------------------------------------------------------------------
.text:00407CEE                 align 10h
.text:00407CF0
.text:00407CF0 loc_407CF0:                             ; CODE XREF: ___get_errno+110↑j
.text:00407CF0                 cmp     eax, 0CEh ; 'Î'
.text:00407CF5                 jz      loc_407B60
.text:00407CFB                 cmp     eax, 0CEh ; 'Î'
.text:00407D00                 jg      short loc_407D50
.text:00407D02                 cmp     eax, 0AAh ; 'ª'
.text:00407D07                 jz      loc_407BEA
.text:00407D0D                 cmp     eax, 0AAh ; 'ª'
.text:00407D12                 jg      short loc_407D26
.text:00407D14                 cmp     eax, 0A4h ; '¤'
.text:00407D19                 jz      loc_407C7D
.text:00407D1F                 cmp     eax, 0A7h ; '§'
.text:00407D24                 jmp     short loc_407CE3
.text:00407D26 ; ---------------------------------------------------------------------------
.text:00407D26
.text:00407D26 loc_407D26:                             ; CODE XREF: ___get_errno+1E2↑j
.text:00407D26                 cmp     eax, 0B7h ; '·'
.text:00407D2B                 jz      loc_407C23
.text:00407D31                 cmp     eax, 0B7h ; '·'
.text:00407D36                 jl      loc_407B73
.text:00407D3C                 sub     eax, 0BCh ; '¼'
.text:00407D41                 cmp     eax, 0Eh
.text:00407D44                 ja      loc_407B73
.text:00407D4A                 jmp     loc_407BB9
.text:00407D4A ; ---------------------------------------------------------------------------
.text:00407D4F                 align 10h
.text:00407D50
.text:00407D50 loc_407D50:                             ; CODE XREF: ___get_errno+1D0↑j
.text:00407D50                 cmp     eax, 46Bh
.text:00407D55                 mov     edx, 24h ; '$'
.text:00407D5A                 jz      loc_407B70
.text:00407D60                 cmp     eax, 46Bh
.text:00407D65                 jg      short loc_407D81
.text:00407D67                 cmp     eax, 0D7h ; '×'
.text:00407D6C                 jz      loc_407C7D
.text:00407D72                 mov     edx, 5
.text:00407D77                 cmp     eax, 45Dh
.text:00407D7C                 jmp     loc_407BE1
.text:00407D81 ; ---------------------------------------------------------------------------
.text:00407D81
.text:00407D81 loc_407D81:                             ; CODE XREF: ___get_errno+235↑j
.text:00407D81                 cmp     eax, 4D5h
.text:00407D86                 mov     edx, 4
.text:00407D8B                 jz      loc_407B70
.text:00407D91                 cmp     eax, 4D5h
.text:00407D96                 jg      short loc_407DA7
.text:00407D98                 mov     edx, 13h
.text:00407D9D                 cmp     eax, 4B0h
.text:00407DA2                 jmp     loc_407BE1
.text:00407DA7 ; ---------------------------------------------------------------------------
.text:00407DA7
.text:00407DA7 loc_407DA7:                             ; CODE XREF: ___get_errno+266↑j
.text:00407DA7                 cmp     eax, 718h
.text:00407DAC                 jnz     loc_407B73
.text:00407DB2                 jmp     loc_407B99
.text:00407DB2 ___get_errno    endp
.text:00407DB2
.text:00407DB2 ; ---------------------------------------------------------------------------
.text:00407DB7                 align 10h
.text:00407DC0
.text:00407DC0 ; =============== S U B R O U T I N E =======================================
.text:00407DC0
.text:00407DC0
.text:00407DC0 sub_407DC0      proc near               ; CODE XREF: sub_406D40:loc_406E9F↑p
.text:00407DC0                                         ; sub_407830:loc_407898↑p ...
.text:00407DC0
.text:00407DC0 var_C           = dword ptr -0Ch
.text:00407DC0
.text:00407DC0                 sub     esp, 0Ch
.text:00407DC3                 call    GetLastError
.text:00407DC8                 mov     [esp+0Ch+var_C], eax
.text:00407DCB                 call    ___get_errno
.text:00407DD0                 add     esp, 0Ch
.text:00407DD3                 retn
.text:00407DD3 sub_407DC0      endp
.text:00407DD3
.text:00407DD3 ; ---------------------------------------------------------------------------
.text:00407DD4                 align 10h
.text:00407DE0 aComExeBatCmd   db '.com;.exe;.bat;.cmd',0
.text:00407DE0                                         ; DATA XREF: .data:off_4110A4↓o
.text:00407DF4 ; const CHAR LibFileName[]
.text:00407DF4 LibFileName     db 'KERNEL32.DLL',0     ; DATA XREF: sub_407E20+11↓o
.text:00407DF4                                         ; sub_407F90+C↓o ...
.text:00407E01 ; const CHAR ProcName[]
.text:00407E01 ProcName        db 'GetFileAttributesExA',0
.text:00407E01                                         ; DATA XREF: sub_407E20+28↓o
.text:00407E16                 align 10h
.text:00407E20
.text:00407E20 ; =============== S U B R O U T I N E =======================================
.text:00407E20
.text:00407E20
.text:00407E20 ; int __cdecl sub_407E20(LPCSTR lpFileName, int)
.text:00407E20 sub_407E20      proc near               ; CODE XREF: .text:00408FC4↓p
.text:00407E20                                         ; sub_4093C0+37↓p
.text:00407E20
.text:00407E20 lpModuleName    = dword ptr -18Ch
.text:00407E20 lpProcName      = dword ptr -188h
.text:00407E20 var_184         = dword ptr -184h
.text:00407E20 var_170         = dword ptr -170h
.text:00407E20 var_164         = dword ptr -164h
.text:00407E20 hModule         = dword ptr -160h
.text:00407E20 FindFileData    = _WIN32_FIND_DATAA ptr -15Ch
.text:00407E20 lpFileName      = dword ptr  4
.text:00407E20 arg_4           = dword ptr  8
.text:00407E20
.text:00407E20                 push    ebp
.text:00407E21                 push    edi
.text:00407E22                 push    esi
.text:00407E23                 push    ebx
.text:00407E24                 sub     esp, 17Ch
.text:00407E2A                 mov     ebx, [esp+18Ch+arg_4]
.text:00407E31                 mov     [esp+18Ch+lpModuleName], offset LibFileName ; "KERNEL32.DLL"
.text:00407E38                 call    GetModuleHandleA
.text:00407E3D                 sub     esp, 4
.text:00407E40                 mov     [esp+18Ch+hModule], eax
.text:00407E44                 mov     edx, [esp+18Ch+hModule]
.text:00407E48                 mov     [esp+18Ch+lpProcName], offset ProcName ; "GetFileAttributesExA"
.text:00407E50                 mov     [esp+18Ch+lpModuleName], edx ; hModule
.text:00407E53                 call    GetProcAddress
.text:00407E58                 sub     esp, 8
.text:00407E5B                 mov     ebp, eax
.text:00407E5D                 mov     eax, [esp+18Ch+lpFileName]
.text:00407E64                 mov     [esp+18Ch+lpModuleName], eax ; lpFileName
.text:00407E67                 call    GetFileAttributesA
.text:00407E6C                 sub     esp, 4
.text:00407E6F                 mov     [esp+18Ch+var_164], eax
.text:00407E73                 xor     eax, eax
.text:00407E75                 cmp     [esp+18Ch+var_164], 0FFFFFFFFh
.text:00407E7A                 jz      short loc_407ED1
.text:00407E7C                 cld
.text:00407E7D                 mov     ecx, 50h ; 'P'
.text:00407E82                 lea     esi, [esp+18Ch+FindFileData]
.text:00407E86                 mov     edi, esi
.text:00407E88                 test    ebp, ebp
.text:00407E8A                 rep stosd
.text:00407E8C                 mov     [esp+18Ch+var_170], 0
.text:00407E94                 jz      short loc_407EB5
.text:00407E96                 mov     [esp+18Ch+var_184], ebx
.text:00407E9A                 mov     ecx, [esp+18Ch+lpFileName]
.text:00407EA1                 mov     [esp+18Ch+lpProcName], 0
.text:00407EA9                 mov     [esp+18Ch+lpModuleName], ecx
.text:00407EAC                 call    ebp
.text:00407EAE                 sub     esp, 0Ch
.text:00407EB1                 mov     [esp+18Ch+var_170], eax
.text:00407EB5
.text:00407EB5 loc_407EB5:                             ; CODE XREF: sub_407E20+74↑j
.text:00407EB5                 mov     eax, [esp+18Ch+var_170]
.text:00407EB9                 test    eax, eax
.text:00407EBB                 jz      short loc_407EE0
.text:00407EBD
.text:00407EBD loc_407EBD:                             ; CODE XREF: sub_407E20+131↓j
.text:00407EBD                                         ; sub_407E20+14B↓j
.text:00407EBD                 mov     ebx, [esp+18Ch+hModule]
.text:00407EC1                 mov     [esp+18Ch+lpModuleName], ebx ; hLibModule
.text:00407EC4                 call    FreeLibrary
.text:00407EC9                 sub     esp, 4
.text:00407ECC                 mov     eax, 1
.text:00407ED1
.text:00407ED1 loc_407ED1:                             ; CODE XREF: sub_407E20+5A↑j
.text:00407ED1                 add     esp, 17Ch
.text:00407ED7                 pop     ebx
.text:00407ED8                 pop     esi
.text:00407ED9                 pop     edi
.text:00407EDA                 pop     ebp
.text:00407EDB                 retn
.text:00407EDB ; ---------------------------------------------------------------------------
.text:00407EDC                 align 10h
.text:00407EE0
.text:00407EE0 loc_407EE0:                             ; CODE XREF: sub_407E20+9B↑j
.text:00407EE0                 mov     [esp+18Ch+lpProcName], esi ; lpFindFileData
.text:00407EE4                 mov     edx, [esp+18Ch+lpFileName]
.text:00407EEB                 mov     [esp+18Ch+lpModuleName], edx ; lpFileName
.text:00407EEE                 call    FindFirstFileA
.text:00407EF3                 sub     esp, 8
.text:00407EF6                 xor     ecx, ecx
.text:00407EF8                 cmp     eax, 0FFFFFFFFh
.text:00407EFB                 setnz   cl
.text:00407EFE                 mov     edi, [esp+18Ch+FindFileData.dwFileAttributes]
.text:00407F02                 mov     [ebx], edi
.text:00407F04                 mov     esi, [esp+18Ch+FindFileData.ftCreationTime.dwHighDateTime]
.text:00407F08                 mov     [esp+18Ch+var_170], ecx
.text:00407F0C                 mov     ecx, [esp+18Ch+FindFileData.ftCreationTime.dwLowDateTime]
.text:00407F10                 mov     [ebx+8], esi
.text:00407F13                 mov     [ebx+4], ecx
.text:00407F16                 mov     ebp, [esp+18Ch+FindFileData.ftLastAccessTime.dwLowDateTime]
.text:00407F1A                 mov     edi, [esp+18Ch+FindFileData.ftLastAccessTime.dwHighDateTime]
.text:00407F1E                 mov     [ebx+0Ch], ebp
.text:00407F21                 mov     [ebx+10h], edi
.text:00407F24                 mov     esi, [esp+18Ch+FindFileData.ftLastWriteTime.dwHighDateTime]
.text:00407F28                 mov     ecx, [esp+18Ch+FindFileData.ftLastWriteTime.dwLowDateTime]
.text:00407F2C                 mov     [ebx+18h], esi
.text:00407F2F                 mov     [ebx+14h], ecx
.text:00407F32                 mov     ebp, [esp+18Ch+FindFileData.nFileSizeHigh]
.text:00407F36                 mov     [ebx+1Ch], ebp
.text:00407F39                 mov     edi, [esp+18Ch+FindFileData.nFileSizeLow]
.text:00407F3D                 mov     [ebx+20h], edi
.text:00407F40                 mov     [esp+18Ch+lpModuleName], eax ; hFindFile
.text:00407F43                 call    FindClose
.text:00407F48                 sub     esp, 4
.text:00407F4B                 mov     esi, [esp+18Ch+var_170]
.text:00407F4F                 test    esi, esi
.text:00407F51                 jnz     loc_407EBD
.text:00407F57                 cld
.text:00407F58                 mov     eax, [esp+18Ch+var_170]
.text:00407F5C                 mov     ecx, 9
.text:00407F61                 mov     edi, ebx
.text:00407F63                 rep stosd
.text:00407F65                 mov     ebp, [esp+18Ch+var_164]
.text:00407F69                 mov     [ebx], ebp
.text:00407F6B                 jmp     loc_407EBD
.text:00407F6B sub_407E20      endp
.text:00407F6B
.text:00407F6B ; ---------------------------------------------------------------------------
.text:00407F70 ; const CHAR aFindfirstfilee[]
.text:00407F70 aFindfirstfilee db 'FindFirstFileExA',0 ; DATA XREF: sub_407F90+23↓o
.text:00407F81 ; const char asc_407F81[]
.text:00407F81 asc_407F81      db '\*',0               ; DATA XREF: sub_407F90:loc_40801D↓o
.text:00407F84                 align 10h
.text:00407F90
.text:00407F90 ; =============== S U B R O U T I N E =======================================
.text:00407F90
.text:00407F90
.text:00407F90 ; int __cdecl sub_407F90(char *Str)
.text:00407F90 sub_407F90      proc near               ; CODE XREF: .text:004090C3↓p
.text:00407F90                                         ; sub_4093C0+3FA↓p ...
.text:00407F90
.text:00407F90 lpLibFileName   = dword ptr -18Ch
.text:00407F90 lpProcName      = dword ptr -188h
.text:00407F90 var_184         = dword ptr -184h
.text:00407F90 var_180         = dword ptr -180h
.text:00407F90 var_17C         = dword ptr -17Ch
.text:00407F90 var_178         = dword ptr -178h
.text:00407F90 var_164         = dword ptr -164h
.text:00407F90 hModule         = dword ptr -160h
.text:00407F90 FindFileData    = _WIN32_FIND_DATAA ptr -15Ch
.text:00407F90 Str             = dword ptr  4
.text:00407F90
.text:00407F90                 push    ebp
.text:00407F91                 push    edi
.text:00407F92                 xor     edi, edi
.text:00407F94                 push    esi
.text:00407F95                 push    ebx
.text:00407F96                 sub     esp, 17Ch
.text:00407F9C                 mov     [esp+18Ch+lpLibFileName], offset LibFileName ; "KERNEL32.DLL"
.text:00407FA3                 call    LoadLibraryA
.text:00407FA8                 sub     esp, 4
.text:00407FAB                 mov     [esp+18Ch+hModule], eax
.text:00407FAF                 mov     ecx, [esp+18Ch+hModule]
.text:00407FB3                 mov     [esp+18Ch+lpProcName], offset aFindfirstfilee ; "FindFirstFileExA"
.text:00407FBB                 mov     [esp+18Ch+lpLibFileName], ecx ; hModule
.text:00407FBE                 call    GetProcAddress
.text:00407FC3                 sub     esp, 8
.text:00407FC6                 mov     edx, [esp+18Ch+Str]
.text:00407FCD                 mov     [esp+18Ch+var_164], eax
.text:00407FD1                 mov     [esp+18Ch+lpLibFileName], edx ; Str
.text:00407FD4                 call    strlen
.text:00407FD9                 lea     edx, [eax+5]
.text:00407FDC                 mov     ebx, eax
.text:00407FDE                 mov     [esp+18Ch+lpLibFileName], edx ; Size
.text:00407FE1                 call    malloc
.text:00407FE6                 mov     esi, eax
.text:00407FE8                 test    esi, esi
.text:00407FEA                 mov     eax, 1
.text:00407FEF                 jz      loc_4080CD
.text:00407FF5                 mov     [esp+18Ch+lpLibFileName], esi ; Destination
.text:00407FF8                 mov     ebp, [esp+18Ch+Str]
.text:00407FFF                 mov     [esp+18Ch+lpProcName], ebp ; Source
.text:00408003                 call    strcpy
.text:00408008                 movzx   eax, byte ptr [ebx+esi-1]
.text:0040800D                 cmp     al, 2Fh ; '/'
.text:0040800F                 jz      loc_4080FB
.text:00408015                 cmp     al, 5Ch ; '\'
.text:00408017                 jz      loc_4080FB
.text:0040801D
.text:0040801D loc_40801D:                             ; CODE XREF: sub_407F90+170↓j
.text:0040801D                 mov     [esp+18Ch+lpProcName], offset asc_407F81 ; "\\*"
.text:00408025                 mov     [esp+18Ch+lpLibFileName], esi ; Destination
.text:00408028                 call    strcat
.text:0040802D                 mov     eax, [esp+18Ch+var_164]
.text:00408031                 test    eax, eax
.text:00408033                 jz      loc_4080F5
.text:00408039                 mov     [esp+18Ch+var_178], 0
.text:00408041                 lea     ebp, [esp+18Ch+FindFileData]
.text:00408045                 mov     [esp+18Ch+var_17C], 0
.text:0040804D                 mov     [esp+18Ch+var_180], 1
.text:00408055                 mov     [esp+18Ch+var_184], ebp
.text:00408059                 mov     [esp+18Ch+lpProcName], 0
.text:00408061                 mov     [esp+18Ch+lpLibFileName], esi
.text:00408064                 call    [esp+18Ch+var_164]
.text:00408068                 sub     esp, 18h
.text:0040806B                 mov     ebx, eax
.text:0040806D                 cmp     eax, 0FFFFFFFFh
.text:00408070                 jz      short loc_4080D8
.text:00408072                 lea     esi, [esi+0]
.text:00408079                 lea     edi, [edi+0]
.text:00408080
.text:00408080 loc_408080:                             ; CODE XREF: sub_407F90+109↓j
.text:00408080                                         ; sub_407F90+161↓j
.text:00408080                 test    byte ptr [esp+18Ch+FindFileData.dwFileAttributes], 10h
.text:00408085                 jz      short loc_408088
.text:00408087                 inc     edi
.text:00408088
.text:00408088 loc_408088:                             ; CODE XREF: sub_407F90+F5↑j
.text:00408088                 mov     [esp+18Ch+lpProcName], ebp ; lpFindFileData
.text:0040808C                 mov     [esp+18Ch+lpLibFileName], ebx ; hFindFile
.text:0040808F                 call    FindNextFileA
.text:00408094                 sub     esp, 8
.text:00408097                 test    eax, eax
.text:00408099                 jnz     short loc_408080
.text:0040809B                 mov     [esp+18Ch+lpLibFileName], ebx ; hFindFile
.text:0040809E                 call    FindClose
.text:004080A3                 sub     esp, 4
.text:004080A6                 mov     esi, [esp+18Ch+hModule]
.text:004080AA                 mov     [esp+18Ch+lpLibFileName], esi ; hLibModule
.text:004080AD                 call    FreeLibrary
.text:004080B2                 sub     esp, 4
.text:004080B5                 mov     ebx, [esp+18Ch+Str]
.text:004080BC                 mov     [esp+18Ch+lpLibFileName], ebx ; LPCSTR
.text:004080BF                 call    sub_40B5E0
.text:004080C4                 test    eax, eax
.text:004080C6                 jz      short loc_4080CB
.text:004080C8                 add     edi, 2
.text:004080CB
.text:004080CB loc_4080CB:                             ; CODE XREF: sub_407F90+136↑j
.text:004080CB                 mov     eax, edi
.text:004080CD
.text:004080CD loc_4080CD:                             ; CODE XREF: sub_407F90+5F↑j
.text:004080CD                                         ; sub_407F90+163↓j
.text:004080CD                 add     esp, 17Ch
.text:004080D3                 pop     ebx
.text:004080D4                 pop     esi
.text:004080D5                 pop     edi
.text:004080D6                 pop     ebp
.text:004080D7                 retn
.text:004080D8 ; ---------------------------------------------------------------------------
.text:004080D8
.text:004080D8 loc_4080D8:                             ; CODE XREF: sub_407F90+E0↑j
.text:004080D8                                         ; sub_407F90+169↓j
.text:004080D8                 mov     [esp+18Ch+lpProcName], ebp ; lpFindFileData
.text:004080DC                 mov     [esp+18Ch+lpLibFileName], esi ; lpFileName
.text:004080DF                 call    FindFirstFileA
.text:004080E4                 mov     ebx, eax
.text:004080E6                 sub     esp, 8
.text:004080E9                 cmp     ebx, 0FFFFFFFFh
.text:004080EC                 mov     eax, 2
.text:004080F1                 jnz     short loc_408080
.text:004080F3                 jmp     short loc_4080CD
.text:004080F5 ; ---------------------------------------------------------------------------
.text:004080F5
.text:004080F5 loc_4080F5:                             ; CODE XREF: sub_407F90+A3↑j
.text:004080F5                 lea     ebp, [esp+18Ch+FindFileData]
.text:004080F9                 jmp     short loc_4080D8
.text:004080FB ; ---------------------------------------------------------------------------
.text:004080FB
.text:004080FB loc_4080FB:                             ; CODE XREF: sub_407F90+7F↑j
.text:004080FB                                         ; sub_407F90+87↑j
.text:004080FB                 mov     byte ptr [ebx+esi-1], 0
.text:00408100                 jmp     loc_40801D
.text:00408100 sub_407F90      endp
.text:00408100
.text:00408100 ; ---------------------------------------------------------------------------
.text:00408105                 align 10h
.text:00408110
.text:00408110 ; =============== S U B R O U T I N E =======================================
.text:00408110
.text:00408110
.text:00408110 ; int __cdecl sub_408110(HANDLE hNamedPipe, int)
.text:00408110 sub_408110      proc near               ; CODE XREF: sub_406FA0+28E7↓p
.text:00408110                                         ; sub_40D020+52↓j
.text:00408110
.text:00408110 hFile           = dword ptr -0ECh
.text:00408110 lpFileInformation= dword ptr -0E8h
.text:00408110 nBufferSize     = dword ptr -0E4h
.text:00408110 lpBytesRead     = dword ptr -0E0h
.text:00408110 lpTotalBytesAvail= dword ptr -0DCh
.text:00408110 lpBytesLeftThisMessage= dword ptr -0D8h
.text:00408110 var_C4          = dword ptr -0C4h
.text:00408110 var_C0          = dword ptr -0C0h
.text:00408110 var_BC          = dword ptr -0BCh
.text:00408110 var_B8          = dword ptr -0B8h
.text:00408110 var_B4          = dword ptr -0B4h
.text:00408110 var_B0          = dword ptr -0B0h
.text:00408110 var_AC          = dword ptr -0ACh
.text:00408110 var_A8          = dword ptr -0A8h
.text:00408110 TotalBytesAvail = dword ptr -0A0h
.text:00408110 var_9C          = dword ptr -9Ch
.text:00408110 var_98          = dword ptr -98h
.text:00408110 var_94          = dword ptr -94h
.text:00408110 var_90          = dword ptr -90h
.text:00408110 var_8C          = dword ptr -8Ch
.text:00408110 var_88          = dword ptr -88h
.text:00408110 var_84          = dword ptr -84h
.text:00408110 var_80          = dword ptr -80h
.text:00408110 var_7C          = dword ptr -7Ch
.text:00408110 var_78          = dword ptr -78h
.text:00408110 var_74          = dword ptr -74h
.text:00408110 var_70          = dword ptr -70h
.text:00408110 var_6C          = dword ptr -6Ch
.text:00408110 FileInformation = _BY_HANDLE_FILE_INFORMATION ptr -5Ch
.text:00408110 hNamedPipe      = dword ptr  4
.text:00408110 arg_4           = dword ptr  8
.text:00408110
.text:00408110                 push    ebp
.text:00408111                 mov     eax, 0FFFFFFFFh
.text:00408116                 push    edi
.text:00408117                 push    esi
.text:00408118                 push    ebx
.text:00408119                 sub     esp, 0DCh
.text:0040811F                 mov     esi, [esp+0ECh+hNamedPipe]
.text:00408126                 mov     ebp, [esp+0ECh+arg_4]
.text:0040812D                 cmp     esi, 0FFFFFFFFh
.text:00408130                 jz      loc_4084B1
.text:00408136                 cld
.text:00408137                 xor     eax, eax
.text:00408139                 lea     ebx, [esp+0ECh+FileInformation]
.text:00408140                 mov     ecx, 0Dh
.text:00408145                 mov     edi, ebx
.text:00408147                 rep stosd
.text:00408149                 mov     dword ptr [ebp+18h], 1
.text:00408150                 mov     [esp+0ECh+hFile], esi ; hFile
.text:00408153                 call    GetFileType
.text:00408158                 sub     esp, 4
.text:0040815B                 xor     edx, edx
.text:0040815D                 cmp     eax, 2
.text:00408160                 jz      loc_408590
.text:00408166                 cmp     eax, 3
.text:00408169                 jz      loc_408580
.text:0040816F
.text:0040816F loc_40816F:                             ; CODE XREF: sub_408110+475↓j
.text:0040816F                                         ; sub_408110+485↓j
.text:0040816F                 or      [ebp+0], edx
.text:00408172                 mov     [esp+0ECh+lpFileInformation], ebx ; lpFileInformation
.text:00408176                 mov     [esp+0ECh+hFile], esi ; hFile
.text:00408179                 call    GetFileInformationByHandle
.text:0040817E                 sub     esp, 8
.text:00408181                 mov     ecx, [esp+0ECh+FileInformation.nFileSizeLow]
.text:00408188                 test    ecx, ecx
.text:0040818A                 jnz     short loc_4081C0
.text:0040818C                 mov     edx, [esp+0ECh+FileInformation.nFileSizeHigh]
.text:00408193                 test    edx, edx
.text:00408195                 jnz     short loc_4081C0
.text:00408197                 mov     edx, [ebp+0]
.text:0040819A                 and     edx, 0F000h
.text:004081A0                 cmp     edx, 1000h
.text:004081A6                 jz      loc_408516
.text:004081AC
.text:004081AC loc_4081AC:                             ; CODE XREF: sub_408110+459↓j
.text:004081AC                                         ; sub_408110+465↓j
.text:004081AC                 test    ecx, ecx
.text:004081AE                 jnz     short loc_4081C0
.text:004081B0                 mov     edx, [esp+0ECh+FileInformation.nFileSizeHigh]
.text:004081B7                 test    edx, edx
.text:004081B9                 jz      loc_4084F4
.text:004081BF                 nop
.text:004081C0
.text:004081C0 loc_4081C0:                             ; CODE XREF: sub_408110+7A↑j
.text:004081C0                                         ; sub_408110+85↑j ...
.text:004081C0                 cld
.text:004081C1                 mov     esi, ebx
.text:004081C3                 mov     dword ptr [ebp+14h], 0
.text:004081CA                 lea     edi, [esp+0ECh+var_9C]
.text:004081CE                 mov     ecx, 0Dh
.text:004081D3                 rep movsd
.text:004081D5                 xor     ebx, ebx
.text:004081D7                 xor     edi, edi
.text:004081D9                 mov     edx, [esp+0ECh+var_6C]
.text:004081E0                 mov     esi, [esp+0ECh+var_70]
.text:004081E4                 or      edx, ebx
.text:004081E6                 mov     ebx, [esp+0ECh+var_9C]
.text:004081EA                 mov     [ebp+8], edx
.text:004081ED                 or      edi, esi
.text:004081EF                 xor     edx, edx
.text:004081F1                 mov     [ebp+0Ch], edi
.text:004081F4                 test    bl, 10h
.text:004081F7                 mov     esi, [esp+0ECh+var_80]
.text:004081FB                 setz    dl
.text:004081FE                 mov     [ebp+10h], esi
.text:00408201                 dec     edx
.text:00408202                 and     edx, 0FFFFC000h
.text:00408208                 add     edx, 8000h
.text:0040820E                 or      edx, 124h
.text:00408214                 test    bl, 1
.text:00408217                 movzx   eax, dx
.text:0040821A                 jnz     short loc_408221
.text:0040821C                 or      eax, 92h
.text:00408221
.text:00408221 loc_408221:                             ; CODE XREF: sub_408110+10A↑j
.text:00408221                 or      [ebp+0], eax
.text:00408224                 xor     edx, edx
.text:00408226                 mov     ebx, [esp+0ECh+var_7C]
.text:0040822A                 mov     ecx, [esp+0ECh+var_78]
.text:0040822E                 mov     eax, edx
.text:00408230                 xor     esi, esi
.text:00408232                 mov     edx, [esp+0ECh+var_8C]
.text:00408236                 mov     edi, ebx
.text:00408238                 or      eax, edi
.text:0040823A                 mov     [esp+0ECh+var_A8], eax
.text:0040823E                 mov     ebx, ecx
.text:00408240                 mov     edi, [esp+0ECh+var_74]
.text:00408244                 or      ebx, esi
.text:00408246                 mov     esi, [esp+0ECh+var_A8]
.text:0040824A                 mov     [esp+0ECh+var_AC], ebx
.text:0040824E                 xor     ebx, ebx
.text:00408250                 mov     ecx, [esp+0ECh+var_AC]
.text:00408254                 mov     [ebp+34h], esi
.text:00408257                 mov     esi, [esp+0ECh+var_90]
.text:0040825B                 mov     [ebp+18h], edi
.text:0040825E                 xor     edi, edi
.text:00408260                 or      esi, ebx
.text:00408262                 mov     [ebp+30h], ecx
.text:00408265                 or      edi, edx
.text:00408267                 mov     edx, esi
.text:00408269                 mov     [esp+0ECh+nBufferSize], 989680h
.text:00408271                 sub     edx, 0D53E8000h
.text:00408277                 mov     ebx, edi
.text:00408279                 sbb     ebx, 19DB1DEh
.text:0040827F                 mov     [esp+0ECh+lpFileInformation], ebx
.text:00408283                 mov     [esp+0ECh+lpBytesRead], 0
.text:0040828B                 mov     [esp+0ECh+hFile], edx
.text:0040828E                 call    sub_40F900
.text:00408293                 mov     ecx, eax
.text:00408295                 shr     eax, 1Fh
.text:00408298                 dec     eax
.text:00408299                 and     ecx, eax
.text:0040829B                 mov     [ebp+38h], ecx
.text:0040829E                 mov     [esp+0ECh+hFile], esi
.text:004082A1                 mov     [esp+0ECh+lpFileInformation], edi
.text:004082A5                 mov     [esp+0ECh+nBufferSize], 989680h
.text:004082AD                 mov     [esp+0ECh+lpBytesRead], 0
.text:004082B5                 call    sub_40FA20
.text:004082BA                 lea     ebx, [eax+eax*4]
.text:004082BD                 xor     ecx, ecx
.text:004082BF                 lea     esi, [ebx+ebx*4]
.text:004082C2                 shl     esi, 2
.text:004082C5                 mov     edi, esi
.text:004082C7                 shr     edi, 1Fh
.text:004082CA                 dec     edi
.text:004082CB                 and     edi, esi
.text:004082CD                 mov     [ebp+3Ch], edi
.text:004082D0                 mov     esi, [esp+0ECh+var_98]
.text:004082D4                 xor     edi, edi
.text:004082D6                 mov     [esp+0ECh+nBufferSize], 989680h
.text:004082DE                 mov     edx, [esp+0ECh+var_94]
.text:004082E2                 mov     [esp+0ECh+lpBytesRead], 0
.text:004082EA                 or      esi, ecx
.text:004082EC                 or      edi, edx
.text:004082EE                 mov     edx, esi
.text:004082F0                 mov     ecx, edi
.text:004082F2                 sub     edx, 0D53E8000h
.text:004082F8                 sbb     ecx, 19DB1DEh
.text:004082FE                 mov     [esp+0ECh+lpFileInformation], ecx
.text:00408302                 mov     [esp+0ECh+hFile], edx
.text:00408305                 call    sub_40F900
.text:0040830A                 mov     ebx, eax
.text:0040830C                 shr     eax, 1Fh
.text:0040830F                 dec     eax
.text:00408310                 and     ebx, eax
.text:00408312                 mov     [ebp+48h], ebx
.text:00408315                 xor     ebx, ebx
.text:00408317                 mov     [esp+0ECh+hFile], esi
.text:0040831A                 mov     [esp+0ECh+lpFileInformation], edi
.text:0040831E                 mov     [esp+0ECh+nBufferSize], 989680h
.text:00408326                 mov     [esp+0ECh+lpBytesRead], 0
.text:0040832E                 call    sub_40FA20
.text:00408333                 lea     ecx, [eax+eax*4]
.text:00408336                 lea     esi, [ecx+ecx*4]
.text:00408339                 shl     esi, 2
.text:0040833C                 mov     edi, esi
.text:0040833E                 shr     edi, 1Fh
.text:00408341                 dec     edi
.text:00408342                 and     edi, esi
.text:00408344                 mov     [ebp+4Ch], edi
.text:00408347                 mov     esi, [esp+0ECh+var_88]
.text:0040834B                 xor     edi, edi
.text:0040834D                 mov     [esp+0ECh+nBufferSize], 989680h
.text:00408355                 mov     edx, [esp+0ECh+var_84]
.text:00408359                 mov     [esp+0ECh+lpBytesRead], 0
.text:00408361                 or      esi, ebx
.text:00408363                 or      edi, edx
.text:00408365                 mov     edx, esi
.text:00408367                 mov     ebx, edi
.text:00408369                 sub     edx, 0D53E8000h
.text:0040836F                 sbb     ebx, 19DB1DEh
.text:00408375                 mov     [esp+0ECh+lpFileInformation], ebx
.text:00408379                 mov     [esp+0ECh+hFile], edx
.text:0040837C                 call    sub_40F900
.text:00408381                 mov     ecx, eax
.text:00408383                 shr     eax, 1Fh
.text:00408386                 dec     eax
.text:00408387                 and     ecx, eax
.text:00408389                 mov     [ebp+40h], ecx
.text:0040838C                 mov     [esp+0ECh+lpFileInformation], edi
.text:00408390                 mov     [esp+0ECh+nBufferSize], 989680h
.text:00408398                 mov     [esp+0ECh+lpBytesRead], 0
.text:004083A0                 mov     [esp+0ECh+hFile], esi
.text:004083A3                 call    sub_40FA20
.text:004083A8                 mov     dword ptr [ebp+50h], 200h
.text:004083AF                 lea     ebx, [eax+eax*4]
.text:004083B2                 mov     edi, [esp+0ECh+var_A8]
.text:004083B6                 lea     edx, [ebx+ebx*4]
.text:004083B9                 mov     eax, [esp+0ECh+var_AC]
.text:004083BD                 shl     edx, 2
.text:004083C0                 mov     ecx, edx
.text:004083C2                 shr     ecx, 1Fh
.text:004083C5                 dec     ecx
.text:004083C6                 and     ecx, edx
.text:004083C8                 test    edi, edi
.text:004083CA                 mov     edx, [esp+0ECh+var_A8]
.text:004083CE                 mov     [ebp+44h], ecx
.text:004083D1                 js      loc_4084E7
.text:004083D7
.text:004083D7 loc_4083D7:                             ; CODE XREF: sub_408110+3DF↓j
.text:004083D7                 mov     edi, [esp+0ECh+var_AC]
.text:004083DB                 xor     esi, esi
.text:004083DD                 mov     ecx, eax
.text:004083DF                 shrd    ecx, edx, 9
.text:004083E3                 mov     ebx, edx
.text:004083E5                 mov     eax, esi
.text:004083E7                 and     edi, 1FFh
.text:004083ED                 sar     ebx, 9
.text:004083F0                 or      eax, edi
.text:004083F2                 jz      short loc_4083FA
.text:004083F4                 add     ecx, 1
.text:004083F7                 adc     ebx, 0
.text:004083FA
.text:004083FA loc_4083FA:                             ; CODE XREF: sub_408110+2E2↑j
.text:004083FA                 mov     [ebp+5Ch], ebx
.text:004083FD                 mov     esi, dword_4110A0
.text:00408403                 xor     edi, edi
.text:00408405                 mov     [ebp+58h], ecx
.text:00408408                 mov     ebx, dword_4110A0
.text:0040840E                 mov     ecx, [esp+0ECh+var_A8]
.text:00408412                 mov     edx, [esp+0ECh+var_AC]
.text:00408416                 mov     [ebp+50h], ebx
.text:00408419                 shr     ebx, 9
.text:0040841C                 mov     [esp+0ECh+lpBytesRead], edi
.text:00408420                 mov     [esp+0ECh+lpFileInformation], ecx
.text:00408424                 mov     [esp+0ECh+nBufferSize], esi
.text:00408428                 mov     [esp+0ECh+hFile], edx
.text:0040842B                 call    sub_40F900
.text:00408430                 mov     [esp+0ECh+lpBytesRead], edi
.text:00408434                 mov     ecx, [esp+0ECh+var_AC]
.text:00408438                 mov     edi, [esp+0ECh+var_A8]
.text:0040843C                 mov     [esp+0ECh+var_BC], ebx
.text:00408440                 mov     [esp+0ECh+var_B4], eax
.text:00408444                 mov     [esp+0ECh+var_B0], edx
.text:00408448                 mov     [esp+0ECh+var_B8], 0
.text:00408450                 mov     [esp+0ECh+nBufferSize], esi
.text:00408454                 mov     [esp+0ECh+hFile], ecx
.text:00408457                 mov     [esp+0ECh+lpFileInformation], edi
.text:0040845B                 call    sub_40FA20
.text:00408460                 mov     ebx, edx
.text:00408462                 or      ebx, eax
.text:00408464                 jz      short loc_4084C0
.text:00408466                 mov     edi, [esp+0ECh+var_B4]
.text:0040846A                 mov     esi, [esp+0ECh+var_B0]
.text:0040846E                 mov     eax, [esp+0ECh+var_BC]
.text:00408472                 mov     [esp+0ECh+var_C4], edi
.text:00408476                 mov     ecx, [esp+0ECh+var_B8]
.text:0040847A                 add     [esp+0ECh+var_C4], 1
.text:0040847F                 mov     [esp+0ECh+var_C0], esi
.text:00408483                 adc     [esp+0ECh+var_C0], 0
.text:00408488                 mul     [esp+0ECh+var_C4]
.text:0040848C                 mov     edi, [esp+0ECh+var_C0]
.text:00408490                 mov     ebx, edx
.text:00408492                 mov     edx, [esp+0ECh+var_C4]
.text:00408496                 mov     esi, eax
.text:00408498                 mov     eax, ebx
.text:0040849A                 imul    ecx, edx
.text:0040849D                 mov     edx, [esp+0ECh+var_BC]
.text:004084A1                 imul    edx, edi
.text:004084A4                 add     eax, ecx
.text:004084A6                 lea     edi, [edx+eax]
.text:004084A9
.text:004084A9 loc_4084A9:                             ; CODE XREF: sub_408110+3D5↓j
.text:004084A9                 mov     [ebp+58h], esi
.text:004084AC                 xor     eax, eax
.text:004084AE                 mov     [ebp+5Ch], edi
.text:004084B1
.text:004084B1 loc_4084B1:                             ; CODE XREF: sub_408110+20↑j
.text:004084B1                 add     esp, 0DCh
.text:004084B7                 pop     ebx
.text:004084B8                 pop     esi
.text:004084B9                 pop     edi
.text:004084BA                 pop     ebp
.text:004084BB                 retn
.text:004084BB ; ---------------------------------------------------------------------------
.text:004084BC                 align 10h
.text:004084C0
.text:004084C0 loc_4084C0:                             ; CODE XREF: sub_408110+354↑j
.text:004084C0                 mov     eax, [esp+0ECh+var_B4]
.text:004084C4                 mov     edi, [esp+0ECh+var_B8]
.text:004084C8                 mov     ebx, [esp+0ECh+var_B4]
.text:004084CC                 mul     [esp+0ECh+var_BC]
.text:004084D0                 mov     ecx, [esp+0ECh+var_BC]
.text:004084D4                 imul    ebx, edi
.text:004084D7                 mov     esi, eax
.text:004084D9                 mov     eax, [esp+0ECh+var_B0]
.text:004084DD                 add     edx, ebx
.text:004084DF                 imul    ecx, eax
.text:004084E2                 lea     edi, [ecx+edx]
.text:004084E5                 jmp     short loc_4084A9
.text:004084E7 ; ---------------------------------------------------------------------------
.text:004084E7
.text:004084E7 loc_4084E7:                             ; CODE XREF: sub_408110+2C1↑j
.text:004084E7                 add     eax, 1FFh
.text:004084EC                 adc     edx, 0
.text:004084EF                 jmp     loc_4083D7
.text:004084F4 ; ---------------------------------------------------------------------------
.text:004084F4
.text:004084F4 loc_4084F4:                             ; CODE XREF: sub_408110+A9↑j
.text:004084F4                 mov     [esp+0ECh+hFile], esi ; hFile
.text:004084F7                 lea     ecx, [esp+0ECh+FileInformation.nFileSizeHigh]
.text:004084FE                 mov     [esp+0ECh+lpFileInformation], ecx ; lpFileSizeHigh
.text:00408502                 call    GetFileSize
.text:00408507                 sub     esp, 8
.text:0040850A                 mov     [esp+0ECh+FileInformation.nFileSizeLow], eax
.text:00408511                 jmp     loc_4081C0
.text:00408516 ; ---------------------------------------------------------------------------
.text:00408516
.text:00408516 loc_408516:                             ; CODE XREF: sub_408110+96↑j
.text:00408516                 mov     [esp+0ECh+TotalBytesAvail], 0
.text:0040851E                 lea     ecx, [esp+0ECh+TotalBytesAvail]
.text:00408522                 mov     [esp+0ECh+lpBytesLeftThisMessage], 0 ; lpBytesLeftThisMessage
.text:0040852A                 mov     [esp+0ECh+lpTotalBytesAvail], ecx ; lpTotalBytesAvail
.text:0040852E                 mov     [esp+0ECh+lpBytesRead], 0 ; lpBytesRead
.text:00408536                 mov     [esp+0ECh+nBufferSize], 0 ; nBufferSize
.text:0040853E                 mov     [esp+0ECh+lpFileInformation], 0 ; lpBuffer
.text:00408546                 mov     [esp+0ECh+hFile], esi ; hNamedPipe
.text:00408549                 call    PeekNamedPipe
.text:0040854E                 sub     esp, 18h
.text:00408551                 test    eax, eax
.text:00408553                 jz      short loc_40856E
.text:00408555                 mov     ecx, [esp+0ECh+TotalBytesAvail]
.text:00408559                 xor     eax, eax
.text:0040855B                 mov     [esp+0ECh+FileInformation.nFileSizeHigh], eax
.text:00408562                 mov     [esp+0ECh+FileInformation.nFileSizeLow], ecx
.text:00408569                 jmp     loc_4081AC
.text:0040856E ; ---------------------------------------------------------------------------
.text:0040856E
.text:0040856E loc_40856E:                             ; CODE XREF: sub_408110+443↑j
.text:0040856E                 mov     ecx, [esp+0ECh+FileInformation.nFileSizeLow]
.text:00408575                 jmp     loc_4081AC
.text:00408575 ; ---------------------------------------------------------------------------
.text:0040857A                 align 10h
.text:00408580
.text:00408580 loc_408580:                             ; CODE XREF: sub_408110+59↑j
.text:00408580                 mov     edx, 1000h
.text:00408585                 jmp     loc_40816F
.text:00408585 ; ---------------------------------------------------------------------------
.text:0040858A                 align 10h
.text:00408590
.text:00408590 loc_408590:                             ; CODE XREF: sub_408110+50↑j
.text:00408590                 mov     edx, 2000h
.text:00408595                 jmp     loc_40816F
.text:00408595 sub_408110      endp
.text:00408595
.text:00408595 ; ---------------------------------------------------------------------------
.text:0040859A aLnk_0          db '.lnk',0             ; DATA XREF: sub_4085E0+E0↓o
.text:0040859A                                         ; .text:00408C8A↓o ...
.text:0040859F ; const CHAR aKernel32[]
.text:0040859F aKernel32       db 'KERNEL32',0         ; DATA XREF: sub_4085E0+12D↓o
.text:0040859F                                         ; .text:0040933B↓o
.text:004085A8 ; const CHAR aGetcompressedf[]
.text:004085A8 aGetcompressedf db 'GetCompressedFileSizeA',0
.text:004085A8                                         ; DATA XREF: sub_4085E0+13E↓o
.text:004085A8                                         ; .text:0040934C↓o
.text:004085BF ; const CHAR aGetbinarytypea[]
.text:004085BF aGetbinarytypea db 'GetBinaryTypeA',0   ; DATA XREF: sub_4085E0+333↓o
.text:004085BF                                         ; .text:00408CE6↓o ...
.text:004085CE ; const char aPathext[]
.text:004085CE aPathext        db 'PATHEXT',0          ; DATA XREF: sub_4085E0:loc_4089C7↓o
.text:004085CE                                         ; .text:loc_408D90↓o ...
.text:004085D6                 align 10h
.text:004085E0
.text:004085E0 ; =============== S U B R O U T I N E =======================================
.text:004085E0
.text:004085E0
.text:004085E0 ; int __cdecl sub_4085E0(char *String1, int)
.text:004085E0 sub_4085E0      proc near               ; CODE XREF: sub_4093C0+3CD↓p
.text:004085E0                                         ; sub_406FA0+2905↓p
.text:004085E0
.text:004085E0 Str             = dword ptr -6Ch
.text:004085E0 lpProcName      = dword ptr -68h
.text:004085E0 var_64          = dword ptr -64h
.text:004085E0 var_60          = dword ptr -60h
.text:004085E0 var_5C          = dword ptr -5Ch
.text:004085E0 var_4C          = dword ptr -4Ch
.text:004085E0 var_48          = dword ptr -48h
.text:004085E0 var_44          = dword ptr -44h
.text:004085E0 var_40          = dword ptr -40h
.text:004085E0 var_3C          = dword ptr -3Ch
.text:004085E0 var_38          = dword ptr -38h
.text:004085E0 lpRootPathName  = dword ptr -30h
.text:004085E0 var_2C          = byte ptr -2Ch
.text:004085E0 var_28          = dword ptr -28h
.text:004085E0 var_24          = dword ptr -24h
.text:004085E0 var_20          = dword ptr -20h
.text:004085E0 var_1C          = dword ptr -1Ch
.text:004085E0 var_18          = byte ptr -18h
.text:004085E0 String1         = dword ptr  4
.text:004085E0 arg_4           = dword ptr  8
.text:004085E0
.text:004085E0                 push    ebp
.text:004085E1                 push    edi
.text:004085E2                 push    esi
.text:004085E3                 push    ebx
.text:004085E4                 sub     esp, 5Ch
.text:004085E7                 mov     edx, [esp+6Ch+String1]
.text:004085EB                 mov     [esp+6Ch+Str], edx ; LPCSTR
.text:004085EE                 call    sub_40B210
.text:004085F3                 mov     [esp+6Ch+Str], eax
.text:004085F6                 call    sub_407710
.text:004085FB                 mov     [esp+6Ch+lpRootPathName], eax
.text:004085FF                 test    eax, eax
.text:00408601                 jz      loc_408833
.text:00408607                 mov     [esp+6Ch+Str], eax ; Str
.text:0040860A                 call    strlen
.text:0040860F                 mov     edx, [esp+6Ch+arg_4]
.text:00408613                 mov     ebx, eax
.text:00408615                 mov     esi, [edx+0Ch]
.text:00408618                 mov     edi, [edx+8]
.text:0040861B                 mov     eax, esi
.text:0040861D                 or      eax, edi
.text:0040861F                 jz      loc_408A40
.text:00408625                 mov     ecx, [esp+6Ch+lpRootPathName]
.text:00408629                 mov     [esp+6Ch+Str], ecx ; lpRootPathName
.text:0040862C                 call    GetDriveTypeA
.text:00408631                 sub     esp, 4
.text:00408634                 cmp     eax, 4
.text:00408637                 jz      loc_408A40
.text:0040863D
.text:0040863D loc_40863D:                             ; CODE XREF: sub_4085E0+48A↓j
.text:0040863D                                         ; sub_4085E0+4B2↓j
.text:0040863D                 mov     edx, [esp+6Ch+arg_4]
.text:00408641                 mov     esi, [edx+14h]
.text:00408644                 mov     edi, [edx+10h]
.text:00408647                 mov     ecx, esi
.text:00408649                 or      ecx, edi
.text:0040864B                 jnz     short loc_408675
.text:0040864D                 mov     ebp, [esp+6Ch+lpRootPathName]
.text:00408651                 xor     esi, esi
.text:00408653                 xor     edi, edi
.text:00408655                 test    ebp, ebp
.text:00408657                 jz      short loc_408667
.text:00408659                 movzx   ebx, byte ptr [ebp+0]
.text:0040865D                 test    bl, bl
.text:0040865F                 mov     cl, bl
.text:00408661                 jnz     loc_4089F1
.text:00408667
.text:00408667 loc_408667:                             ; CODE XREF: sub_4085E0+77↑j
.text:00408667                 xor     eax, eax
.text:00408669                 xor     edx, edx
.text:0040866B
.text:0040866B loc_40866B:                             ; CODE XREF: sub_4085E0+458↓j
.text:0040866B                 mov     ebp, [esp+6Ch+arg_4]
.text:0040866F                 mov     [ebp+10h], eax
.text:00408672                 mov     [ebp+14h], edx
.text:00408675
.text:00408675 loc_408675:                             ; CODE XREF: sub_4085E0+6B↑j
.text:00408675                 mov     edi, [esp+6Ch+String1]
.text:00408679                 xor     ebx, ebx
.text:0040867B                 test    edi, edi
.text:0040867D                 jz      loc_4088F3
.text:00408683                 mov     esi, [esp+6Ch+String1]
.text:00408687                 cmp     byte ptr [esi], 0
.text:0040868A                 jnz     loc_408900
.text:00408690
.text:00408690 loc_408690:                             ; CODE XREF: sub_4085E0+38C↓j
.text:00408690                                         ; sub_4085E0+397↓j
.text:00408690                 mov     ebp, [esp+6Ch+String1]
.text:00408694                 test    ebp, ebp
.text:00408696                 jz      loc_4088F3
.text:0040869C                 mov     [esp+6Ch+lpProcName], 2Eh ; '.' ; Ch
.text:004086A4                 mov     edi, [esp+6Ch+String1]
.text:004086A8                 mov     [esp+6Ch+Str], edi ; Str
.text:004086AB                 call    strrchr
.text:004086B0                 test    eax, eax
.text:004086B2                 jz      loc_4088F3
.text:004086B8                 cld
.text:004086B9                 mov     ecx, 5
.text:004086BE                 mov     esi, eax
.text:004086C0                 mov     edi, offset aLnk_0 ; ".lnk"
.text:004086C5                 repe cmpsb
.text:004086C7                 setz    cl
.text:004086CA                 movzx   eax, cl
.text:004086CD                 lea     esi, [esi+0]
.text:004086D0
.text:004086D0 loc_4086D0:                             ; CODE XREF: sub_4085E0+315↓j
.text:004086D0                 test    eax, eax
.text:004086D2                 jz      short loc_4086DA
.text:004086D4                 or      ebx, 0A000h
.text:004086DA
.text:004086DA loc_4086DA:                             ; CODE XREF: sub_4085E0+F2↑j
.text:004086DA                 mov     esi, [esp+6Ch+arg_4]
.text:004086DE                 xor     ecx, ecx
.text:004086E0                 mov     edi, ds:dword_412340
.text:004086E6                 or      [esi], ebx
.text:004086E8                 mov     ebx, [esi+14h]
.text:004086EB                 mov     ebp, [esi+10h]
.text:004086EE                 mov     eax, ebx
.text:004086F0                 xor     eax, ecx
.text:004086F2                 xor     ebp, edi
.text:004086F4                 or      eax, ebp
.text:004086F6                 jnz     loc_408880
.text:004086FC
.text:004086FC loc_4086FC:                             ; CODE XREF: sub_4085E0+30E↓j
.text:004086FC                 mov     ecx, dword_4110A0
.text:00408702                 xor     esi, esi
.text:00408704                 xor     edi, edi
.text:00408706                 mov     edx, [esp+6Ch+arg_4]
.text:0040870A                 mov     [edx+50h], ecx
.text:0040870D                 mov     [esp+6Ch+Str], offset aKernel32 ; "KERNEL32"
.text:00408714                 call    LoadLibraryA
.text:00408719                 sub     esp, 4
.text:0040871C                 mov     ebp, eax
.text:0040871E                 mov     [esp+6Ch+lpProcName], offset aGetcompressedf ; "GetCompressedFileSizeA"
.text:00408726                 mov     [esp+6Ch+Str], eax ; hModule
.text:00408729                 call    GetProcAddress
.text:0040872E                 sub     esp, 8
.text:00408731                 test    eax, eax
.text:00408733                 jz      short loc_408768
.text:00408735                 mov     ebx, [esp+6Ch+String1]
.text:00408739                 lea     esi, [esp+6Ch+var_2C]
.text:0040873D                 mov     [esp+6Ch+lpProcName], esi
.text:00408741                 mov     [esp+6Ch+Str], ebx
.text:00408744                 call    eax
.text:00408746                 sub     esp, 8
.text:00408749                 mov     ebx, eax
.text:0040874B                 cmp     eax, 0FFFFFFFFh
.text:0040874E                 jz      loc_408869
.text:00408754
.text:00408754 loc_408754:                             ; CODE XREF: sub_4085E0+29A↓j
.text:00408754                 mov     esi, dword ptr [esp+6Ch+var_2C]
.text:00408758                 mov     ecx, ebx
.text:0040875A                 xor     edi, edi
.text:0040875C                 xor     ebx, ebx
.text:0040875E                 mov     edx, esi
.text:00408760                 mov     esi, ecx
.text:00408762                 or      esi, edi
.text:00408764                 mov     edi, ebx
.text:00408766                 or      edi, edx
.text:00408768
.text:00408768 loc_408768:                             ; CODE XREF: sub_4085E0+153↑j
.text:00408768                                         ; sub_4085E0+294↓j
.text:00408768                 test    ebp, ebp
.text:0040876A                 jz      short loc_408777
.text:0040876C                 mov     [esp+6Ch+Str], ebp ; hLibModule
.text:0040876F                 call    FreeLibrary
.text:00408774                 sub     esp, 4
.text:00408777
.text:00408777 loc_408777:                             ; CODE XREF: sub_4085E0+18A↑j
.text:00408777                 mov     ebp, edi
.text:00408779                 mov     edx, ebp
.text:0040877B                 mov     edi, esi
.text:0040877D                 or      edx, esi
.text:0040877F                 jnz     short loc_40878B
.text:00408781                 mov     eax, [esp+6Ch+arg_4]
.text:00408785                 mov     edi, [eax+30h]
.text:00408788                 mov     ebp, [eax+34h]
.text:0040878B
.text:0040878B loc_40878B:                             ; CODE XREF: sub_4085E0+19F↑j
.text:0040878B                 mov     [esp+6Ch+lpProcName], ebp
.text:0040878F                 mov     ebx, dword_4110A0
.text:00408795                 xor     esi, esi
.text:00408797                 mov     [esp+6Ch+var_60], esi
.text:0040879B                 mov     [esp+6Ch+Str], edi
.text:0040879E                 mov     [esp+6Ch+var_64], ebx
.text:004087A2                 call    sub_40F900
.text:004087A7                 mov     [esp+6Ch+var_3C], eax
.text:004087AB                 mov     ecx, dword_4110A0
.text:004087B1                 mov     [esp+6Ch+lpProcName], ebp
.text:004087B5                 mov     [esp+6Ch+var_38], edx
.text:004087B9                 shr     ecx, 9
.text:004087BC                 mov     [esp+6Ch+var_44], ecx
.text:004087C0                 mov     [esp+6Ch+var_40], 0
.text:004087C8                 mov     [esp+6Ch+var_64], ebx
.text:004087CC                 mov     [esp+6Ch+var_60], esi
.text:004087D0                 mov     [esp+6Ch+Str], edi
.text:004087D3                 call    sub_40FA20
.text:004087D8                 mov     ebp, edx
.text:004087DA                 or      ebp, eax
.text:004087DC                 jz      short loc_408840
.text:004087DE                 mov     ebp, [esp+6Ch+var_3C]
.text:004087E2                 mov     esi, [esp+6Ch+var_38]
.text:004087E6                 mov     eax, [esp+6Ch+var_44]
.text:004087EA                 mov     [esp+6Ch+var_4C], ebp
.text:004087EE                 mov     ecx, [esp+6Ch+var_40]
.text:004087F2                 mov     ebx, [esp+6Ch+var_44]
.text:004087F6                 add     [esp+6Ch+var_4C], 1
.text:004087FB                 mov     [esp+6Ch+var_48], esi
.text:004087FF                 mov     edi, [esp+6Ch+var_4C]
.text:00408803                 adc     [esp+6Ch+var_48], 0
.text:00408808                 mul     [esp+6Ch+var_4C]
.text:0040880C                 imul    ecx, edi
.text:0040880F                 mov     esi, eax
.text:00408811                 mov     eax, [esp+6Ch+var_48]
.text:00408815                 add     edx, ecx
.text:00408817                 imul    ebx, eax
.text:0040881A                 lea     edi, [ebx+edx]
.text:0040881D
.text:0040881D loc_40881D:                             ; CODE XREF: sub_4085E0+287↓j
.text:0040881D                 mov     ebx, [esp+6Ch+arg_4]
.text:00408821                 mov     [ebx+58h], esi
.text:00408824                 mov     esi, [esp+6Ch+lpRootPathName]
.text:00408828                 mov     [ebx+5Ch], edi
.text:0040882B                 mov     [esp+6Ch+Str], esi ; Block
.text:0040882E                 call    free
.text:00408833
.text:00408833 loc_408833:                             ; CODE XREF: sub_4085E0+21↑j
.text:00408833                 add     esp, 5Ch
.text:00408836                 xor     eax, eax
.text:00408838                 pop     ebx
.text:00408839                 pop     esi
.text:0040883A                 pop     edi
.text:0040883B                 pop     ebp
.text:0040883C                 retn
.text:0040883C ; ---------------------------------------------------------------------------
.text:0040883D                 align 10h
.text:00408840
.text:00408840 loc_408840:                             ; CODE XREF: sub_4085E0+1FC↑j
.text:00408840                 mov     eax, [esp+6Ch+var_3C]
.text:00408844                 mov     edi, [esp+6Ch+var_40]
.text:00408848                 mov     ecx, [esp+6Ch+var_3C]
.text:0040884C                 mul     [esp+6Ch+var_44]
.text:00408850                 mov     ebx, [esp+6Ch+var_44]
.text:00408854                 imul    ecx, edi
.text:00408857                 mov     ebp, edx
.text:00408859                 mov     esi, eax
.text:0040885B                 mov     edx, [esp+6Ch+var_38]
.text:0040885F                 add     ebp, ecx
.text:00408861                 imul    ebx, edx
.text:00408864                 lea     edi, [ebx+ebp]
.text:00408867                 jmp     short loc_40881D
.text:00408869 ; ---------------------------------------------------------------------------
.text:00408869
.text:00408869 loc_408869:                             ; CODE XREF: sub_4085E0+16E↑j
.text:00408869                 call    GetLastError
.text:0040886E                 xor     esi, esi
.text:00408870                 xor     edi, edi
.text:00408872                 test    eax, eax
.text:00408874                 jnz     loc_408768
.text:0040887A                 jmp     loc_408754
.text:0040887A ; ---------------------------------------------------------------------------
.text:0040887F                 align 10h
.text:00408880
.text:00408880 loc_408880:                             ; CODE XREF: sub_4085E0+116↑j
.text:00408880                 mov     edx, [esp+6Ch+lpRootPathName]
.text:00408884                 lea     ecx, [esp+6Ch+var_20]
.text:00408888                 lea     ebx, [esp+6Ch+var_1C]
.text:0040888C                 mov     [esp+6Ch+var_5C], ebx ; LPDWORD
.text:00408890                 lea     edi, [esp+6Ch+var_24]
.text:00408894                 lea     ebp, [esp+6Ch+var_28]
.text:00408898                 mov     [esp+6Ch+var_60], ecx ; LPDWORD
.text:0040889C                 mov     [esp+6Ch+var_64], edi ; LPDWORD
.text:004088A0                 mov     [esp+6Ch+lpProcName], ebp ; LPDWORD
.text:004088A4                 mov     [esp+6Ch+Str], edx ; LPCSTR
.text:004088A7                 call    sub_40BC30
.text:004088AC                 test    eax, eax
.text:004088AE                 jnz     short loc_4088D0
.text:004088B0                 mov     [esp+6Ch+var_28], 1
.text:004088B8                 mov     [esp+6Ch+var_24], 200h
.text:004088C0                 mov     [esp+6Ch+var_20], 0
.text:004088C8                 mov     [esp+6Ch+var_1C], 0
.text:004088D0
.text:004088D0 loc_4088D0:                             ; CODE XREF: sub_4085E0+2CE↑j
.text:004088D0                 mov     ebp, [esp+6Ch+var_24]
.text:004088D4                 mov     edi, [esp+6Ch+var_28]
.text:004088D8                 mov     eax, [esp+6Ch+arg_4]
.text:004088DC                 imul    ebp, edi
.text:004088DF                 mov     esi, [eax+10h]
.text:004088E2                 mov     dword_4110A0, ebp
.text:004088E8                 mov     ds:dword_412340, esi
.text:004088EE                 jmp     loc_4086FC
.text:004088F3 ; ---------------------------------------------------------------------------
.text:004088F3
.text:004088F3 loc_4088F3:                             ; CODE XREF: sub_4085E0+9D↑j
.text:004088F3                                         ; sub_4085E0+B6↑j ...
.text:004088F3                 xor     eax, eax
.text:004088F5                 jmp     loc_4086D0
.text:004088F5 ; ---------------------------------------------------------------------------
.text:004088FA                 align 10h
.text:00408900
.text:00408900 loc_408900:                             ; CODE XREF: sub_4085E0+AA↑j
.text:00408900                 mov     [esp+6Ch+Str], offset LibFileName ; "KERNEL32.DLL"
.text:00408907                 xor     ebp, ebp
.text:00408909                 call    GetModuleHandleA
.text:0040890E                 sub     esp, 4
.text:00408911                 mov     edi, eax
.text:00408913                 mov     [esp+6Ch+lpProcName], offset aGetbinarytypea ; "GetBinaryTypeA"
.text:0040891B                 mov     [esp+6Ch+Str], eax ; hModule
.text:0040891E                 call    GetProcAddress
.text:00408923                 sub     esp, 8
.text:00408926                 mov     edx, eax
.text:00408928                 test    eax, eax
.text:0040892A                 jz      short loc_408944
.text:0040892C                 mov     eax, [esp+6Ch+String1]
.text:00408930                 lea     ecx, [esp+6Ch+var_18]
.text:00408934                 mov     [esp+6Ch+lpProcName], ecx
.text:00408938                 mov     [esp+6Ch+Str], eax
.text:0040893B                 call    edx
.text:0040893D                 sub     esp, 8
.text:00408940                 test    eax, eax
.text:00408942                 jnz     short loc_4089A8
.text:00408944
.text:00408944 loc_408944:                             ; CODE XREF: sub_4085E0+34A↑j
.text:00408944                 mov     edx, ds:Str
.text:0040894A                 test    edx, edx
.text:0040894C                 jz      short loc_4089C7
.text:0040894E
.text:0040894E loc_40894E:                             ; CODE XREF: sub_4085E0+3FA↓j
.text:0040894E                                         ; sub_4085E0+40C↓j
.text:0040894E                 mov     eax, [esp+6Ch+String1]
.text:00408952                 test    eax, eax
.text:00408954                 jz      short loc_40895F
.text:00408956                 mov     esi, [esp+6Ch+String1]
.text:0040895A                 cmp     byte ptr [esi], 0
.text:0040895D                 jnz     short loc_40897C
.text:0040895F
.text:0040895F loc_40895F:                             ; CODE XREF: sub_4085E0+374↑j
.text:0040895F                                         ; sub_4085E0+3B0↓j ...
.text:0040895F                 mov     [esp+6Ch+Str], edi ; hLibModule
.text:00408962                 call    FreeLibrary
.text:00408967                 sub     esp, 4
.text:0040896A                 test    ebp, ebp
.text:0040896C                 jz      loc_408690
.text:00408972                 mov     ebx, 49h ; 'I'
.text:00408977                 jmp     loc_408690
.text:0040897C ; ---------------------------------------------------------------------------
.text:0040897C
.text:0040897C loc_40897C:                             ; CODE XREF: sub_4085E0+37D↑j
.text:0040897C                 mov     [esp+6Ch+Str], esi ; Str
.text:0040897F                 mov     [esp+6Ch+lpProcName], 2Eh ; '.' ; Ch
.text:00408987                 call    strrchr
.text:0040898C                 test    eax, eax
.text:0040898E                 mov     esi, eax
.text:00408990                 jz      short loc_40895F
.text:00408992                 mov     [esp+6Ch+lpProcName], eax ; SubStr
.text:00408996                 mov     ecx, ds:Str
.text:0040899C                 mov     [esp+6Ch+Str], ecx ; Str
.text:0040899F                 call    strstr
.text:004089A4                 test    eax, eax
.text:004089A6                 jz      short loc_4089AF
.text:004089A8
.text:004089A8 loc_4089A8:                             ; CODE XREF: sub_4085E0+362↑j
.text:004089A8                                         ; sub_4085E0+3E5↓j
.text:004089A8                 mov     ebp, 1
.text:004089AD                 jmp     short loc_40895F
.text:004089AF ; ---------------------------------------------------------------------------
.text:004089AF
.text:004089AF loc_4089AF:                             ; CODE XREF: sub_4085E0+3C6↑j
.text:004089AF                 mov     [esp+6Ch+lpProcName], esi ; SubStr
.text:004089B3                 mov     edx, off_4110A4 ; ".com;.exe;.bat;.cmd"
.text:004089B9                 mov     [esp+6Ch+Str], edx ; Str
.text:004089BC                 call    strstr
.text:004089C1                 test    eax, eax
.text:004089C3                 jz      short loc_40895F
.text:004089C5                 jmp     short loc_4089A8
.text:004089C7 ; ---------------------------------------------------------------------------
.text:004089C7
.text:004089C7 loc_4089C7:                             ; CODE XREF: sub_4085E0+36C↑j
.text:004089C7                 mov     [esp+6Ch+Str], offset aPathext ; "PATHEXT"
.text:004089CE                 call    getenv
.text:004089D3                 mov     ds:Str, eax
.text:004089D8                 test    eax, eax
.text:004089DA                 jnz     loc_40894E
.text:004089E0                 mov     esi, off_4110A4 ; ".com;.exe;.bat;.cmd"
.text:004089E6                 mov     ds:Str, esi
.text:004089EC                 jmp     loc_40894E
.text:004089F1 ; ---------------------------------------------------------------------------
.text:004089F1
.text:004089F1 loc_4089F1:                             ; CODE XREF: sub_4085E0+81↑j
.text:004089F1                                         ; sub_4085E0+452↓j
.text:004089F1                 shld    edi, esi, 8
.text:004089F5                 movsx   eax, cl
.text:004089F8                 shl     esi, 8
.text:004089FB                 cdq
.text:004089FC                 add     esi, eax
.text:004089FE                 adc     edi, edx
.text:00408A00                 mov     edx, edi
.text:00408A02                 xor     ebx, ebx
.text:00408A04                 and     edx, 0FF000000h
.text:00408A0A                 mov     eax, edx
.text:00408A0C                 or      eax, ebx
.text:00408A0E                 jz      short loc_408A29
.text:00408A10                 mov     ecx, edx
.text:00408A12                 xor     eax, eax
.text:00408A14                 shr     ecx, 10h
.text:00408A17                 mov     edx, esi
.text:00408A19                 xor     edx, ecx
.text:00408A1B                 mov     ecx, edi
.text:00408A1D                 xor     ecx, eax
.text:00408A1F                 mov     esi, edx
.text:00408A21                 mov     edi, ecx
.text:00408A23                 and     edi, 0FFFFFFh
.text:00408A29
.text:00408A29 loc_408A29:                             ; CODE XREF: sub_4085E0+42E↑j
.text:00408A29                 inc     ebp
.text:00408A2A                 movzx   ebx, byte ptr [ebp+0]
.text:00408A2E                 test    bl, bl
.text:00408A30                 mov     cl, bl
.text:00408A32                 jnz     short loc_4089F1
.text:00408A34                 mov     eax, esi
.text:00408A36                 mov     edx, edi
.text:00408A38                 jmp     loc_40866B
.text:00408A38 ; ---------------------------------------------------------------------------
.text:00408A3D                 align 10h
.text:00408A40
.text:00408A40 loc_408A40:                             ; CODE XREF: sub_4085E0+3F↑j
.text:00408A40                                         ; sub_4085E0+57↑j
.text:00408A40                 mov     edi, [esp+6Ch+lpRootPathName]
.text:00408A44                 mov     ebp, [esp+6Ch+String1]
.text:00408A48                 mov     [esp+6Ch+lpProcName], edi ; String2
.text:00408A4C                 mov     [esp+6Ch+Str], ebp ; String1
.text:00408A4F                 call    _stricmp
.text:00408A54                 test    eax, eax
.text:00408A56                 jnz     short loc_408A70
.text:00408A58                 mov     ebx, [esp+6Ch+arg_4]
.text:00408A5C                 mov     dword ptr [ebx+8], 5
.text:00408A63                 mov     dword ptr [ebx+0Ch], 50000h
.text:00408A6A                 jmp     loc_40863D
.text:00408A6A ; ---------------------------------------------------------------------------
.text:00408A6F                 align 10h
.text:00408A70
.text:00408A70 loc_408A70:                             ; CODE XREF: sub_4085E0+476↑j
.text:00408A70                 mov     ebp, [esp+6Ch+String1]
.text:00408A74                 xor     esi, esi
.text:00408A76                 xor     edi, edi
.text:00408A78                 add     ebp, ebx
.text:00408A7A                 jz      short loc_408A84
.text:00408A7C                 movzx   ecx, byte ptr [ebp+0]
.text:00408A80                 test    cl, cl
.text:00408A82                 jnz     short loc_408A97
.text:00408A84
.text:00408A84 loc_408A84:                             ; CODE XREF: sub_4085E0+49A↑j
.text:00408A84                 xor     eax, eax
.text:00408A86                 xor     edx, edx
.text:00408A88
.text:00408A88 loc_408A88:                             ; CODE XREF: sub_4085E0+4FE↓j
.text:00408A88                 mov     ebp, [esp+6Ch+arg_4]
.text:00408A8C                 mov     [ebp+8], eax
.text:00408A8F                 mov     [ebp+0Ch], edx
.text:00408A92                 jmp     loc_40863D
.text:00408A97 ; ---------------------------------------------------------------------------
.text:00408A97
.text:00408A97 loc_408A97:                             ; CODE XREF: sub_4085E0+4A2↑j
.text:00408A97                                         ; sub_4085E0+4F8↓j
.text:00408A97                 shld    edi, esi, 8
.text:00408A9B                 movsx   eax, cl
.text:00408A9E                 shl     esi, 8
.text:00408AA1                 cdq
.text:00408AA2                 add     esi, eax
.text:00408AA4                 adc     edi, edx
.text:00408AA6                 mov     edx, edi
.text:00408AA8                 xor     ebx, ebx
.text:00408AAA                 and     edx, 0FF000000h
.text:00408AB0                 mov     eax, edx
.text:00408AB2                 or      eax, ebx
.text:00408AB4                 jz      short loc_408ACF
.text:00408AB6                 mov     ecx, edx
.text:00408AB8                 xor     eax, eax
.text:00408ABA                 shr     ecx, 10h
.text:00408ABD                 mov     edx, esi
.text:00408ABF                 xor     edx, ecx
.text:00408AC1                 mov     ecx, edi
.text:00408AC3                 xor     ecx, eax
.text:00408AC5                 mov     esi, edx
.text:00408AC7                 mov     edi, ecx
.text:00408AC9                 and     edi, 0FFFFFFh
.text:00408ACF
.text:00408ACF loc_408ACF:                             ; CODE XREF: sub_4085E0+4D4↑j
.text:00408ACF                 inc     ebp
.text:00408AD0                 movzx   ebx, byte ptr [ebp+0]
.text:00408AD4                 test    bl, bl
.text:00408AD6                 mov     cl, bl
.text:00408AD8                 jnz     short loc_408A97
.text:00408ADA                 mov     eax, esi
.text:00408ADC                 mov     edx, edi
.text:00408ADE                 jmp     short loc_408A88
.text:00408ADE sub_4085E0      endp
.text:00408ADE
.text:00408AE0
.text:00408AE0 ; =============== S U B R O U T I N E =======================================
.text:00408AE0
.text:00408AE0
.text:00408AE0 ; int __cdecl sub_408AE0(LPCSTR)
.text:00408AE0 sub_408AE0      proc near               ; CODE XREF: sub_40B330+CA↓p
.text:00408AE0
.text:00408AE0 lpRootPathName  = dword ptr -83Ch
.text:00408AE0 lpVolumeNameBuffer= dword ptr -838h
.text:00408AE0 nVolumeNameSize = dword ptr -834h
.text:00408AE0 lpVolumeSerialNumber= dword ptr -830h
.text:00408AE0 lpMaximumComponentLength= dword ptr -82Ch
.text:00408AE0 lpFileSystemFlags= dword ptr -828h
.text:00408AE0 lpFileSystemNameBuffer= dword ptr -824h
.text:00408AE0 nFileSystemNameSize= dword ptr -820h
.text:00408AE0 VolumeSerialNumber= dword ptr -818h
.text:00408AE0 MaximumComponentLength= dword ptr -814h
.text:00408AE0 FileSystemFlags = dword ptr -810h
.text:00408AE0 FileSystemNameBuffer= byte ptr -80Ch
.text:00408AE0 VolumeNameBuffer= byte ptr -40Ch
.text:00408AE0 var_4           = dword ptr -4
.text:00408AE0 arg_0           = dword ptr  4
.text:00408AE0
.text:00408AE0                 sub     esp, 83Ch
.text:00408AE6                 mov     [esp+83Ch+var_4], ebx
.text:00408AED                 mov     ebx, [esp+83Ch+arg_0]
.text:00408AF4                 mov     [esp+83Ch+lpRootPathName], ebx ; LPCSTR
.text:00408AF7                 call    sub_40B210
.text:00408AFC                 mov     [esp+83Ch+lpRootPathName], eax
.text:00408AFF                 call    sub_407710
.text:00408B04                 mov     [esp+83Ch+lpRootPathName], eax ; lpRootPathName
.text:00408B07                 lea     edx, [esp+83Ch+FileSystemNameBuffer]
.text:00408B0B                 mov     ebx, eax
.text:00408B0D                 mov     [esp+83Ch+lpFileSystemNameBuffer], edx ; lpFileSystemNameBuffer
.text:00408B11                 lea     ecx, [esp+83Ch+FileSystemFlags]
.text:00408B15                 lea     edx, [esp+83Ch+MaximumComponentLength]
.text:00408B19                 mov     [esp+83Ch+lpFileSystemFlags], ecx ; lpFileSystemFlags
.text:00408B1D                 lea     ecx, [esp+83Ch+VolumeSerialNumber]
.text:00408B21                 mov     [esp+83Ch+lpMaximumComponentLength], edx ; lpMaximumComponentLength
.text:00408B25                 lea     edx, [esp+83Ch+VolumeNameBuffer]
.text:00408B2C                 mov     [esp+83Ch+lpVolumeSerialNumber], ecx ; lpVolumeSerialNumber
.text:00408B30                 mov     [esp+83Ch+lpVolumeNameBuffer], edx ; lpVolumeNameBuffer
.text:00408B34                 mov     [esp+83Ch+nFileSystemNameSize], 400h ; nFileSystemNameSize
.text:00408B3C                 mov     [esp+83Ch+nVolumeNameSize], 400h ; nVolumeNameSize
.text:00408B44                 call    GetVolumeInformationA
.text:00408B49                 sub     esp, 20h
.text:00408B4C                 test    eax, eax
.text:00408B4E                 setz    cl
.text:00408B51                 mov     [esp+83Ch+lpRootPathName], ebx ; Block
.text:00408B54                 movzx   edx, cl
.text:00408B57                 dec     edx
.text:00408B58                 and     [esp+83Ch+VolumeSerialNumber], edx
.text:00408B5C                 call    free
.text:00408B61                 mov     eax, [esp+83Ch+VolumeSerialNumber]
.text:00408B65                 mov     ebx, [esp+83Ch+var_4]
.text:00408B6C                 add     esp, 83Ch
.text:00408B72                 retn
.text:00408B72 sub_408AE0      endp
.text:00408B72
.text:00408B72 ; ---------------------------------------------------------------------------
.text:00408B73                 align 10h
.text:00408B80                 push    ebp
.text:00408B81                 push    edi
.text:00408B82                 xor     edi, edi
.text:00408B84                 push    esi
.text:00408B85                 xor     esi, esi
.text:00408B87                 push    ebx
.text:00408B88                 mov     ebp, [esp+14h]
.text:00408B8C                 test    ebp, ebp
.text:00408B8E                 jz      short loc_408B98
.text:00408B90                 movzx   ecx, byte ptr [ebp+0]
.text:00408B94                 test    cl, cl
.text:00408B96                 jnz     short loc_408BA1
.text:00408B98
.text:00408B98 loc_408B98:                             ; CODE XREF: .text:00408B8E↑j
.text:00408B98                 xor     eax, eax
.text:00408B9A                 xor     edx, edx
.text:00408B9C
.text:00408B9C loc_408B9C:                             ; CODE XREF: .text:00408BE8↓j
.text:00408B9C                 pop     ebx
.text:00408B9D                 pop     esi
.text:00408B9E                 pop     edi
.text:00408B9F                 pop     ebp
.text:00408BA0                 retn
.text:00408BA1 ; ---------------------------------------------------------------------------
.text:00408BA1
.text:00408BA1 loc_408BA1:                             ; CODE XREF: .text:00408B96↑j
.text:00408BA1                                         ; .text:00408BE2↓j
.text:00408BA1                 shld    edi, esi, 8
.text:00408BA5                 movsx   eax, cl
.text:00408BA8                 shl     esi, 8
.text:00408BAB                 cdq
.text:00408BAC                 add     esi, eax
.text:00408BAE                 adc     edi, edx
.text:00408BB0                 mov     edx, edi
.text:00408BB2                 xor     ebx, ebx
.text:00408BB4                 and     edx, 0FF000000h
.text:00408BBA                 mov     eax, edx
.text:00408BBC                 or      eax, ebx
.text:00408BBE                 jz      short loc_408BD9
.text:00408BC0                 mov     ecx, edx
.text:00408BC2                 xor     eax, eax
.text:00408BC4                 shr     ecx, 10h
.text:00408BC7                 mov     edx, esi
.text:00408BC9                 xor     edx, ecx
.text:00408BCB                 mov     ecx, edi
.text:00408BCD                 xor     ecx, eax
.text:00408BCF                 mov     esi, edx
.text:00408BD1                 mov     edi, ecx
.text:00408BD3                 and     edi, 0FFFFFFh
.text:00408BD9
.text:00408BD9 loc_408BD9:                             ; CODE XREF: .text:00408BBE↑j
.text:00408BD9                 inc     ebp
.text:00408BDA                 movzx   ebx, byte ptr [ebp+0]
.text:00408BDE                 test    bl, bl
.text:00408BE0                 mov     cl, bl
.text:00408BE2                 jnz     short loc_408BA1
.text:00408BE4                 mov     eax, esi
.text:00408BE6                 mov     edx, edi
.text:00408BE8                 jmp     short loc_408B9C
.text:00408BE8 ; ---------------------------------------------------------------------------
.text:00408BEA                 align 10h
.text:00408BF0                 sub     esp, 2Ch
.text:00408BF3                 lea     edx, [esp+24h]
.text:00408BF7                 lea     ecx, [esp+28h]
.text:00408BFB                 mov     [esp+0Ch], edx
.text:00408BFF                 lea     edx, [esp+1Ch]
.text:00408C03                 mov     [esp+4], edx
.text:00408C07                 mov     edx, [esp+30h]
.text:00408C0B                 mov     [esp+10h], ecx
.text:00408C0F                 lea     ecx, [esp+20h]
.text:00408C13                 mov     [esp+8], ecx
.text:00408C17                 mov     [esp], edx
.text:00408C1A                 call    sub_40BC30
.text:00408C1F                 test    eax, eax
.text:00408C21                 jnz     short loc_408C43
.text:00408C23                 mov     dword ptr [esp+1Ch], 1
.text:00408C2B                 mov     dword ptr [esp+20h], 200h
.text:00408C33                 mov     dword ptr [esp+24h], 0
.text:00408C3B                 mov     dword ptr [esp+28h], 0
.text:00408C43
.text:00408C43 loc_408C43:                             ; CODE XREF: .text:00408C21↑j
.text:00408C43                 mov     eax, [esp+20h]
.text:00408C47                 mov     ecx, [esp+1Ch]
.text:00408C4B                 add     esp, 2Ch
.text:00408C4E                 imul    eax, ecx
.text:00408C51                 retn
.text:00408C51 ; ---------------------------------------------------------------------------
.text:00408C52                 align 10h
.text:00408C60                 sub     esp, 1Ch
.text:00408C63                 mov     eax, [esp+20h]
.text:00408C67                 mov     [esp+14h], esi
.text:00408C6B                 mov     [esp+18h], edi
.text:00408C6F                 test    eax, eax
.text:00408C71                 jz      short loc_408CB0
.text:00408C73                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:00408C7B                 mov     [esp], eax
.text:00408C7E                 call    strrchr
.text:00408C83                 test    eax, eax
.text:00408C85                 jz      short loc_408CB0
.text:00408C87                 cld
.text:00408C88                 mov     esi, eax
.text:00408C8A                 mov     edi, offset aLnk_0 ; ".lnk"
.text:00408C8F                 mov     ecx, 5
.text:00408C94                 repe cmpsb
.text:00408C96                 setz    dl
.text:00408C99                 movzx   eax, dl
.text:00408C9C                 lea     esi, [esi+0]
.text:00408CA0
.text:00408CA0 loc_408CA0:                             ; CODE XREF: .text:00408CB2↓j
.text:00408CA0                 mov     esi, [esp+14h]
.text:00408CA4                 mov     edi, [esp+18h]
.text:00408CA8                 add     esp, 1Ch
.text:00408CAB                 retn
.text:00408CAB ; ---------------------------------------------------------------------------
.text:00408CAC                 align 10h
.text:00408CB0
.text:00408CB0 loc_408CB0:                             ; CODE XREF: .text:00408C71↑j
.text:00408CB0                                         ; .text:00408C85↑j
.text:00408CB0                 xor     eax, eax
.text:00408CB2                 jmp     short loc_408CA0
.text:00408CB2 ; ---------------------------------------------------------------------------
.text:00408CB4                 align 10h
.text:00408CC0                 sub     esp, 1Ch
.text:00408CC3                 mov     [esp+10h], ebx
.text:00408CC7                 mov     ebx, [esp+20h]
.text:00408CCB                 mov     [esp+14h], esi
.text:00408CCF                 mov     [esp+18h], edi
.text:00408CD3                 xor     edi, edi
.text:00408CD5                 mov     dword ptr [esp], offset LibFileName ; "KERNEL32.DLL"
.text:00408CDC                 call    GetModuleHandleA
.text:00408CE1                 sub     esp, 4
.text:00408CE4                 mov     esi, eax
.text:00408CE6                 mov     dword ptr [esp+4], offset aGetbinarytypea ; "GetBinaryTypeA"
.text:00408CEE                 mov     [esp], eax
.text:00408CF1                 call    GetProcAddress
.text:00408CF6                 sub     esp, 8
.text:00408CF9                 test    eax, eax
.text:00408CFB                 jz      short loc_408D11
.text:00408CFD                 mov     [esp], ebx
.text:00408D00                 lea     ecx, [esp+0Ch]
.text:00408D04                 mov     [esp+4], ecx
.text:00408D08                 call    eax
.text:00408D0A                 sub     esp, 8
.text:00408D0D                 test    eax, eax
.text:00408D0F                 jnz     short loc_408D70
.text:00408D11
.text:00408D11 loc_408D11:                             ; CODE XREF: .text:00408CFB↑j
.text:00408D11                 mov     eax, ds:Str
.text:00408D16                 test    eax, eax
.text:00408D18                 jz      short loc_408D90
.text:00408D1A
.text:00408D1A loc_408D1A:                             ; CODE XREF: .text:00408DA3↓j
.text:00408D1A                                         ; .text:00408DB5↓j
.text:00408D1A                 test    ebx, ebx
.text:00408D1C                 jz      short loc_408D23
.text:00408D1E                 cmp     byte ptr [ebx], 0
.text:00408D21                 jnz     short loc_408D40
.text:00408D23
.text:00408D23 loc_408D23:                             ; CODE XREF: .text:00408D1C↑j
.text:00408D23                                         ; .text:00408D54↓j ...
.text:00408D23                 mov     [esp], esi
.text:00408D26                 call    FreeLibrary
.text:00408D2B                 sub     esp, 4
.text:00408D2E                 mov     eax, edi
.text:00408D30                 mov     ebx, [esp+10h]
.text:00408D34                 mov     esi, [esp+14h]
.text:00408D38                 mov     edi, [esp+18h]
.text:00408D3C                 add     esp, 1Ch
.text:00408D3F                 retn
.text:00408D40 ; ---------------------------------------------------------------------------
.text:00408D40
.text:00408D40 loc_408D40:                             ; CODE XREF: .text:00408D21↑j
.text:00408D40                 mov     [esp], ebx
.text:00408D43                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:00408D4B                 call    strrchr
.text:00408D50                 test    eax, eax
.text:00408D52                 mov     ebx, eax
.text:00408D54                 jz      short loc_408D23
.text:00408D56                 mov     [esp+4], eax
.text:00408D5A                 mov     ecx, ds:Str
.text:00408D60                 mov     [esp], ecx
.text:00408D63                 call    strstr
.text:00408D68                 test    eax, eax
.text:00408D6A                 jz      short loc_408D77
.text:00408D6C                 lea     esi, [esi+0]
.text:00408D70
.text:00408D70 loc_408D70:                             ; CODE XREF: .text:00408D0F↑j
.text:00408D70                                         ; .text:00408D8D↓j
.text:00408D70                 mov     edi, 1
.text:00408D75                 jmp     short loc_408D23
.text:00408D77 ; ---------------------------------------------------------------------------
.text:00408D77
.text:00408D77 loc_408D77:                             ; CODE XREF: .text:00408D6A↑j
.text:00408D77                 mov     [esp+4], ebx
.text:00408D7B                 mov     ebx, off_4110A4 ; ".com;.exe;.bat;.cmd"
.text:00408D81                 mov     [esp], ebx
.text:00408D84                 call    strstr
.text:00408D89                 test    eax, eax
.text:00408D8B                 jz      short loc_408D23
.text:00408D8D                 jmp     short loc_408D70
.text:00408D8D ; ---------------------------------------------------------------------------
.text:00408D8F                 align 10h
.text:00408D90
.text:00408D90 loc_408D90:                             ; CODE XREF: .text:00408D18↑j
.text:00408D90                 mov     dword ptr [esp], offset aPathext ; "PATHEXT"
.text:00408D97                 call    getenv
.text:00408D9C                 mov     ds:Str, eax
.text:00408DA1                 test    eax, eax
.text:00408DA3                 jnz     loc_408D1A
.text:00408DA9                 mov     edx, off_4110A4 ; ".com;.exe;.bat;.cmd"
.text:00408DAF                 mov     ds:Str, edx
.text:00408DB5                 jmp     loc_408D1A
.text:00408DB5 ; ---------------------------------------------------------------------------
.text:00408DBA                 align 10h
.text:00408DC0                 sub     esp, 0Ch
.text:00408DC3                 mov     edx, [esp+10h]
.text:00408DC7                 mov     [esp], edx
.text:00408DCA                 call    GetFileType
.text:00408DCF                 sub     esp, 4
.text:00408DD2                 xor     edx, edx
.text:00408DD4                 cmp     eax, 2
.text:00408DD7                 jz      short loc_408DF0
.text:00408DD9                 cmp     eax, 3
.text:00408DDC                 jz      short loc_408DE4
.text:00408DDE
.text:00408DDE loc_408DDE:                             ; CODE XREF: .text:00408DE9↓j
.text:00408DDE                                         ; .text:00408DF5↓j
.text:00408DDE                 mov     eax, edx
.text:00408DE0                 add     esp, 0Ch
.text:00408DE3                 retn
.text:00408DE4 ; ---------------------------------------------------------------------------
.text:00408DE4
.text:00408DE4 loc_408DE4:                             ; CODE XREF: .text:00408DDC↑j
.text:00408DE4                 mov     edx, 1000h
.text:00408DE9                 jmp     short loc_408DDE
.text:00408DE9 ; ---------------------------------------------------------------------------
.text:00408DEB                 align 10h
.text:00408DF0
.text:00408DF0 loc_408DF0:                             ; CODE XREF: .text:00408DD7↑j
.text:00408DF0                 mov     edx, 2000h
.text:00408DF5                 jmp     short loc_408DDE
.text:00408DF5 ; ---------------------------------------------------------------------------
.text:00408DF7                 align 10h
.text:00408E00                 mov     ecx, [esp+4]
.text:00408E04                 xor     edx, edx
.text:00408E06                 test    cl, 10h
.text:00408E09                 setz    dl
.text:00408E0C                 dec     edx
.text:00408E0D                 and     edx, 0FFFFC000h
.text:00408E13                 add     edx, 8000h
.text:00408E19                 or      edx, 124h
.text:00408E1F                 test    cl, 1
.text:00408E22                 movzx   eax, dx
.text:00408E25                 jnz     short locret_408E2C
.text:00408E27                 or      eax, 92h
.text:00408E2C
.text:00408E2C locret_408E2C:                          ; CODE XREF: .text:00408E25↑j
.text:00408E2C                 retn
.text:00408E2C ; ---------------------------------------------------------------------------
.text:00408E2D                 align 10h
.text:00408E30                 sub     esp, 2Ch
.text:00408E33                 mov     [esp+20h], esi
.text:00408E37                 mov     esi, [esp+30h]
.text:00408E3B                 mov     [esp+1Ch], ebx
.text:00408E3F                 xor     ebx, ebx
.text:00408E41                 test    esi, esi
.text:00408E43                 mov     [esp+24h], edi
.text:00408E47                 mov     [esp+28h], ebp
.text:00408E4B                 jz      short loc_408EA0
.text:00408E4D                 cmp     byte ptr [esi], 0
.text:00408E50                 jnz     short loc_408EA4
.text:00408E52
.text:00408E52 loc_408E52:                             ; CODE XREF: .text:00408F0C↓j
.text:00408E52                                         ; .text:00408F17↓j
.text:00408E52                 test    esi, esi
.text:00408E54                 jz      short loc_408EA0
.text:00408E56                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:00408E5E                 mov     [esp], esi
.text:00408E61                 call    strrchr
.text:00408E66                 test    eax, eax
.text:00408E68                 jz      short loc_408EA0
.text:00408E6A                 cld
.text:00408E6B                 mov     ecx, 5
.text:00408E70                 mov     esi, eax
.text:00408E72                 mov     edi, offset aLnk_0 ; ".lnk"
.text:00408E77                 repe cmpsb
.text:00408E79                 setz    cl
.text:00408E7C                 movzx   eax, cl
.text:00408E7F                 nop
.text:00408E80
.text:00408E80 loc_408E80:                             ; CODE XREF: .text:00408EA2↓j
.text:00408E80                 test    eax, eax
.text:00408E82                 jz      short loc_408E8A
.text:00408E84                 or      ebx, 0A000h
.text:00408E8A
.text:00408E8A loc_408E8A:                             ; CODE XREF: .text:00408E82↑j
.text:00408E8A                 mov     eax, ebx
.text:00408E8C                 mov     esi, [esp+20h]
.text:00408E90                 mov     ebx, [esp+1Ch]
.text:00408E94                 mov     edi, [esp+24h]
.text:00408E98                 mov     ebp, [esp+28h]
.text:00408E9C                 add     esp, 2Ch
.text:00408E9F                 retn
.text:00408EA0 ; ---------------------------------------------------------------------------
.text:00408EA0
.text:00408EA0 loc_408EA0:                             ; CODE XREF: .text:00408E4B↑j
.text:00408EA0                                         ; .text:00408E54↑j ...
.text:00408EA0                 xor     eax, eax
.text:00408EA2                 jmp     short loc_408E80
.text:00408EA4 ; ---------------------------------------------------------------------------
.text:00408EA4
.text:00408EA4 loc_408EA4:                             ; CODE XREF: .text:00408E50↑j
.text:00408EA4                 mov     dword ptr [esp], offset LibFileName ; "KERNEL32.DLL"
.text:00408EAB                 call    GetModuleHandleA
.text:00408EB0                 sub     esp, 4
.text:00408EB3                 mov     ebp, eax
.text:00408EB5                 mov     dword ptr [esp+4], offset aGetbinarytypea ; "GetBinaryTypeA"
.text:00408EBD                 mov     [esp], eax
.text:00408EC0                 call    GetProcAddress
.text:00408EC5                 sub     esp, 8
.text:00408EC8                 test    eax, eax
.text:00408ECA                 mov     dword ptr [esp+14h], 0
.text:00408ED2                 jz      short loc_408EE8
.text:00408ED4                 mov     [esp], esi
.text:00408ED7                 lea     ecx, [esp+18h]
.text:00408EDB                 mov     [esp+4], ecx
.text:00408EDF                 call    eax
.text:00408EE1                 sub     esp, 8
.text:00408EE4                 test    eax, eax
.text:00408EE6                 jnz     short loc_408F48
.text:00408EE8
.text:00408EE8 loc_408EE8:                             ; CODE XREF: .text:00408ED2↑j
.text:00408EE8                 mov     edx, ds:Str
.text:00408EEE                 test    edx, edx
.text:00408EF0                 jz      short loc_408F70
.text:00408EF2
.text:00408EF2 loc_408EF2:                             ; CODE XREF: .text:00408F83↓j
.text:00408EF2                                         ; .text:00408F95↓j
.text:00408EF2                 test    esi, esi
.text:00408EF4                 jz      short loc_408EFB
.text:00408EF6                 cmp     byte ptr [esi], 0
.text:00408EF9                 jnz     short loc_408F1C
.text:00408EFB
.text:00408EFB loc_408EFB:                             ; CODE XREF: .text:00408EF4↑j
.text:00408EFB                                         ; .text:00408F30↓j ...
.text:00408EFB                 mov     [esp], ebp
.text:00408EFE                 call    FreeLibrary
.text:00408F03                 sub     esp, 4
.text:00408F06                 mov     eax, [esp+14h]
.text:00408F0A                 test    eax, eax
.text:00408F0C                 jz      loc_408E52
.text:00408F12                 mov     ebx, 49h ; 'I'
.text:00408F17                 jmp     loc_408E52
.text:00408F1C ; ---------------------------------------------------------------------------
.text:00408F1C
.text:00408F1C loc_408F1C:                             ; CODE XREF: .text:00408EF9↑j
.text:00408F1C                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:00408F24                 mov     [esp], esi
.text:00408F27                 call    strrchr
.text:00408F2C                 test    eax, eax
.text:00408F2E                 mov     edi, eax
.text:00408F30                 jz      short loc_408EFB
.text:00408F32                 mov     [esp+4], eax
.text:00408F36                 mov     edx, ds:Str
.text:00408F3C                 mov     [esp], edx
.text:00408F3F                 call    strstr
.text:00408F44                 test    eax, eax
.text:00408F46                 jz      short loc_408F52
.text:00408F48
.text:00408F48 loc_408F48:                             ; CODE XREF: .text:00408EE6↑j
.text:00408F48                                         ; .text:00408F68↓j
.text:00408F48                 mov     dword ptr [esp+14h], 1
.text:00408F50                 jmp     short loc_408EFB
.text:00408F52 ; ---------------------------------------------------------------------------
.text:00408F52
.text:00408F52 loc_408F52:                             ; CODE XREF: .text:00408F46↑j
.text:00408F52                 mov     [esp+4], edi
.text:00408F56                 mov     edi, off_4110A4 ; ".com;.exe;.bat;.cmd"
.text:00408F5C                 mov     [esp], edi
.text:00408F5F                 call    strstr
.text:00408F64                 test    eax, eax
.text:00408F66                 jz      short loc_408EFB
.text:00408F68                 jmp     short loc_408F48
.text:00408F68 ; ---------------------------------------------------------------------------
.text:00408F6A                 align 10h
.text:00408F70
.text:00408F70 loc_408F70:                             ; CODE XREF: .text:00408EF0↑j
.text:00408F70                 mov     dword ptr [esp], offset aPathext ; "PATHEXT"
.text:00408F77                 call    getenv
.text:00408F7C                 mov     ds:Str, eax
.text:00408F81                 test    eax, eax
.text:00408F83                 jnz     loc_408EF2
.text:00408F89                 mov     ecx, off_4110A4 ; ".com;.exe;.bat;.cmd"
.text:00408F8F                 mov     ds:Str, ecx
.text:00408F95                 jmp     loc_408EF2
.text:00408F95 ; ---------------------------------------------------------------------------
.text:00408F9A                 align 10h
.text:00408FA0                 push    esi
.text:00408FA1                 push    ebx
.text:00408FA2                 sub     esp, 864h
.text:00408FA8                 mov     ebx, [esp+870h]
.text:00408FAF                 lea     edx, [esp+830h]
.text:00408FB6                 mov     esi, [esp+874h]
.text:00408FBD                 mov     [esp+4], edx
.text:00408FC1                 mov     [esp], ebx
.text:00408FC4                 call    sub_407E20
.text:00408FC9                 xor     edx, edx
.text:00408FCB                 test    eax, eax
.text:00408FCD                 jz      loc_4090B5
.text:00408FD3                 mov     ecx, [esp+830h]
.text:00408FDA                 test    cl, 10h
.text:00408FDD                 mov     [esi], ecx
.text:00408FDF                 mov     eax, [esp+834h]
.text:00408FE6                 mov     edx, [esp+838h]
.text:00408FED                 mov     [esi+4], eax
.text:00408FF0                 mov     [esi+8], edx
.text:00408FF3                 mov     eax, [esp+83Ch]
.text:00408FFA                 mov     edx, [esp+840h]
.text:00409001                 mov     [esi+0Ch], eax
.text:00409004                 mov     [esi+10h], edx
.text:00409007                 mov     edx, [esp+848h]
.text:0040900E                 mov     eax, [esp+844h]
.text:00409015                 mov     [esi+18h], edx
.text:00409018                 mov     [esi+14h], eax
.text:0040901B                 mov     edx, [esp+84Ch]
.text:00409022                 mov     [esi+20h], edx
.text:00409025                 mov     edx, [esp+850h]
.text:0040902C                 mov     [esi+24h], edx
.text:0040902F                 jnz     loc_4090C0
.text:00409035                 mov     dword ptr [esi+28h], 1
.text:0040903C
.text:0040903C loc_40903C:                             ; CODE XREF: .text:004090CB↓j
.text:0040903C                 mov     [esp], ebx
.text:0040903F                 call    sub_40B210
.text:00409044                 mov     [esp], eax
.text:00409047                 call    sub_407710
.text:0040904C                 mov     [esp], eax
.text:0040904F                 lea     edx, [esp+30h]
.text:00409053                 mov     ebx, eax
.text:00409055                 mov     [esp+18h], edx
.text:00409059                 lea     ecx, [esp+2Ch]
.text:0040905D                 lea     edx, [esp+28h]
.text:00409061                 mov     [esp+14h], ecx
.text:00409065                 lea     ecx, [esp+24h]
.text:00409069                 mov     [esp+10h], edx
.text:0040906D                 lea     edx, [esp+430h]
.text:00409074                 mov     [esp+0Ch], ecx
.text:00409078                 mov     [esp+4], edx
.text:0040907C                 mov     dword ptr [esp+1Ch], 400h
.text:00409084                 mov     dword ptr [esp+8], 400h
.text:0040908C                 call    GetVolumeInformationA
.text:00409091                 sub     esp, 20h
.text:00409094                 test    eax, eax
.text:00409096                 setz    cl
.text:00409099                 mov     [esp], ebx
.text:0040909C                 movzx   edx, cl
.text:0040909F                 dec     edx
.text:004090A0                 and     [esp+24h], edx
.text:004090A4                 call    free
.text:004090A9                 mov     ecx, [esp+24h]
.text:004090AD                 mov     edx, 1
.text:004090B2                 mov     [esi+1Ch], ecx
.text:004090B5
.text:004090B5 loc_4090B5:                             ; CODE XREF: .text:00408FCD↑j
.text:004090B5                 add     esp, 864h
.text:004090BB                 mov     eax, edx
.text:004090BD                 pop     ebx
.text:004090BE                 pop     esi
.text:004090BF                 retn
.text:004090C0 ; ---------------------------------------------------------------------------
.text:004090C0
.text:004090C0 loc_4090C0:                             ; CODE XREF: .text:0040902F↑j
.text:004090C0                 mov     [esp], ebx
.text:004090C3                 call    sub_407F90
.text:004090C8                 mov     [esi+28h], eax
.text:004090CB                 jmp     loc_40903C
.text:004090D0 ; ---------------------------------------------------------------------------
.text:004090D0                 push    ebp
.text:004090D1                 xor     edx, edx
.text:004090D3                 push    edi
.text:004090D4                 push    esi
.text:004090D5                 xor     esi, esi
.text:004090D7                 push    ebx
.text:004090D8                 sub     esp, 1Ch
.text:004090DB                 mov     ebx, [esp+5Ch]
.text:004090DF                 mov     ecx, [esp+30h]
.text:004090E3                 mov     edi, [esp+60h]
.text:004090E7                 or      esi, ebx
.text:004090E9                 mov     eax, [esp+4Ch]
.text:004090ED                 or      edi, edx
.text:004090EF                 mov     ebx, [esp+64h]
.text:004090F3                 xor     edx, edx
.text:004090F5                 test    cl, 10h
.text:004090F8                 setz    dl
.text:004090FB                 mov     [ebx+10h], eax
.text:004090FE                 mov     [ebx+8], edi
.text:00409101                 mov     [ebx+0Ch], esi
.text:00409104                 dec     edx
.text:00409105                 and     edx, 0FFFFC000h
.text:0040910B                 mov     dword ptr [ebx+14h], 0
.text:00409112                 add     edx, 8000h
.text:00409118                 or      edx, 124h
.text:0040911E                 test    cl, 1
.text:00409121                 movzx   eax, dx
.text:00409124                 jnz     short loc_40912B
.text:00409126                 or      eax, 92h
.text:0040912B
.text:0040912B loc_40912B:                             ; CODE XREF: .text:00409124↑j
.text:0040912B                 mov     ebx, [esp+54h]
.text:0040912F                 xor     edx, edx
.text:00409131                 xor     ebp, ebp
.text:00409133                 mov     edi, [esp+50h]
.text:00409137                 mov     ecx, [esp+64h]
.text:0040913B                 mov     esi, edi
.text:0040913D                 or      [ecx], eax
.text:0040913F                 mov     edi, ebx
.text:00409141                 or      edi, ebp
.text:00409143                 mov     ebp, edx
.text:00409145                 mov     ebx, [esp+64h]
.text:00409149                 or      ebp, esi
.text:0040914B                 mov     esi, [esp+58h]
.text:0040914F                 mov     edx, [esp+40h]
.text:00409153                 mov     [ebx+30h], edi
.text:00409156                 mov     [ebx+18h], esi
.text:00409159                 mov     ecx, edx
.text:0040915B                 xor     esi, esi
.text:0040915D                 mov     [ebx+34h], ebp
.text:00409160                 xor     edx, edx
.text:00409162                 or      esi, ecx
.text:00409164                 mov     dword ptr [esp+8], 989680h
.text:0040916C                 mov     ebx, [esp+3Ch]
.text:00409170                 mov     ecx, esi
.text:00409172                 mov     dword ptr [esp+0Ch], 0
.text:0040917A                 or      ebx, edx
.text:0040917C                 mov     edx, ebx
.text:0040917E                 sub     edx, 0D53E8000h
.text:00409184                 sbb     ecx, 19DB1DEh
.text:0040918A                 mov     [esp+4], ecx
.text:0040918E                 mov     [esp], edx
.text:00409191                 call    sub_40F900
.text:00409196                 mov     edx, eax
.text:00409198                 mov     ecx, [esp+64h]
.text:0040919C                 shr     eax, 1Fh
.text:0040919F                 dec     eax
.text:004091A0                 and     edx, eax
.text:004091A2                 mov     [ecx+38h], edx
.text:004091A5                 mov     [esp], ebx
.text:004091A8                 mov     [esp+4], esi
.text:004091AC                 mov     dword ptr [esp+8], 989680h
.text:004091B4                 mov     dword ptr [esp+0Ch], 0
.text:004091BC                 call    sub_40FA20
.text:004091C1                 lea     ecx, [eax+eax*4]
.text:004091C4                 lea     esi, [ecx+ecx*4]
.text:004091C7                 mov     eax, [esp+64h]
.text:004091CB                 shl     esi, 2
.text:004091CE                 mov     ebx, esi
.text:004091D0                 shr     ebx, 1Fh
.text:004091D3                 dec     ebx
.text:004091D4                 and     ebx, esi
.text:004091D6                 xor     esi, esi
.text:004091D8                 mov     [eax+3Ch], ebx
.text:004091DB                 mov     edx, [esp+38h]
.text:004091DF                 mov     dword ptr [esp+8], 989680h
.text:004091E7                 mov     ebx, [esp+34h]
.text:004091EB                 mov     dword ptr [esp+0Ch], 0
.text:004091F3                 mov     ecx, edx
.text:004091F5                 xor     edx, edx
.text:004091F7                 or      ebx, edx
.text:004091F9                 or      esi, ecx
.text:004091FB                 mov     edx, ebx
.text:004091FD                 sub     edx, 0D53E8000h
.text:00409203                 mov     ecx, esi
.text:00409205                 sbb     ecx, 19DB1DEh
.text:0040920B                 mov     [esp+4], ecx
.text:0040920F                 mov     [esp], edx
.text:00409212                 call    sub_40F900
.text:00409217                 mov     edx, eax
.text:00409219                 mov     ecx, [esp+64h]
.text:0040921D                 shr     eax, 1Fh
.text:00409220                 dec     eax
.text:00409221                 and     edx, eax
.text:00409223                 mov     [ecx+48h], edx
.text:00409226                 mov     [esp], ebx
.text:00409229                 mov     [esp+4], esi
.text:0040922D                 mov     dword ptr [esp+8], 989680h
.text:00409235                 mov     dword ptr [esp+0Ch], 0
.text:0040923D                 call    sub_40FA20
.text:00409242                 lea     edx, [eax+eax*4]
.text:00409245                 mov     ebx, [esp+64h]
.text:00409249                 lea     ecx, [edx+edx*4]
.text:0040924C                 shl     ecx, 2
.text:0040924F                 mov     esi, ecx
.text:00409251                 shr     esi, 1Fh
.text:00409254                 dec     esi
.text:00409255                 and     esi, ecx
.text:00409257                 mov     [ebx+4Ch], esi
.text:0040925A                 mov     edx, [esp+48h]
.text:0040925E                 xor     esi, esi
.text:00409260                 mov     dword ptr [esp+8], 989680h
.text:00409268                 mov     ebx, [esp+44h]
.text:0040926C                 mov     dword ptr [esp+0Ch], 0
.text:00409274                 mov     ecx, edx
.text:00409276                 xor     edx, edx
.text:00409278                 or      ebx, edx
.text:0040927A                 or      esi, ecx
.text:0040927C                 mov     edx, ebx
.text:0040927E                 sub     edx, 0D53E8000h
.text:00409284                 mov     ecx, esi
.text:00409286                 sbb     ecx, 19DB1DEh
.text:0040928C                 mov     [esp+4], ecx
.text:00409290                 mov     [esp], edx
.text:00409293                 call    sub_40F900
.text:00409298                 mov     edx, eax
.text:0040929A                 mov     ecx, [esp+64h]
.text:0040929E                 shr     eax, 1Fh
.text:004092A1                 dec     eax
.text:004092A2                 and     edx, eax
.text:004092A4                 mov     [ecx+40h], edx
.text:004092A7                 mov     [esp+4], esi
.text:004092AB                 mov     dword ptr [esp+8], 989680h
.text:004092B3                 mov     dword ptr [esp+0Ch], 0
.text:004092BB                 mov     [esp], ebx
.text:004092BE                 call    sub_40FA20
.text:004092C3                 lea     edx, [eax+eax*4]
.text:004092C6                 lea     esi, [edx+edx*4]
.text:004092C9                 mov     eax, [esp+64h]
.text:004092CD                 shl     esi, 2
.text:004092D0                 mov     edx, ebp
.text:004092D2                 mov     ecx, esi
.text:004092D4                 mov     dword ptr [eax+50h], 200h
.text:004092DB                 shr     ecx, 1Fh
.text:004092DE                 dec     ecx
.text:004092DF                 and     ecx, esi
.text:004092E1                 test    ebp, ebp
.text:004092E3                 mov     [eax+44h], ecx
.text:004092E6                 mov     eax, edi
.text:004092E8                 js      short loc_409322
.text:004092EA
.text:004092EA loc_4092EA:                             ; CODE XREF: .text:0040932A↓j
.text:004092EA                 xor     esi, esi
.text:004092EC                 mov     ebp, edi
.text:004092EE                 mov     ecx, eax
.text:004092F0                 shrd    ecx, edx, 9
.text:004092F4                 mov     ebx, edx
.text:004092F6                 and     ebp, 1FFh
.text:004092FC                 mov     eax, esi
.text:004092FE                 sar     ebx, 9
.text:00409301                 or      eax, ebp
.text:00409303                 jz      short loc_40930B
.text:00409305                 add     ecx, 1
.text:00409308                 adc     ebx, 0
.text:0040930B
.text:0040930B loc_40930B:                             ; CODE XREF: .text:00409303↑j
.text:0040930B                 mov     edx, [esp+64h]
.text:0040930F                 mov     eax, 1
.text:00409314                 mov     [edx+58h], ecx
.text:00409317                 mov     [edx+5Ch], ebx
.text:0040931A                 add     esp, 1Ch
.text:0040931D                 pop     ebx
.text:0040931E                 pop     esi
.text:0040931F                 pop     edi
.text:00409320                 pop     ebp
.text:00409321                 retn
.text:00409322 ; ---------------------------------------------------------------------------
.text:00409322
.text:00409322 loc_409322:                             ; CODE XREF: .text:004092E8↑j
.text:00409322                 add     eax, 1FFh
.text:00409327                 adc     edx, 0
.text:0040932A                 jmp     short loc_4092EA
.text:0040932A ; ---------------------------------------------------------------------------
.text:0040932C                 align 10h
.text:00409330                 push    ebp
.text:00409331                 push    edi
.text:00409332                 xor     edi, edi
.text:00409334                 push    esi
.text:00409335                 xor     esi, esi
.text:00409337                 push    ebx
.text:00409338                 sub     esp, 0Ch
.text:0040933B                 mov     dword ptr [esp], offset aKernel32 ; "KERNEL32"
.text:00409342                 call    LoadLibraryA
.text:00409347                 sub     esp, 4
.text:0040934A                 mov     ebp, eax
.text:0040934C                 mov     dword ptr [esp+4], offset aGetcompressedf ; "GetCompressedFileSizeA"
.text:00409354                 mov     [esp], eax
.text:00409357                 call    GetProcAddress
.text:0040935C                 sub     esp, 8
.text:0040935F                 test    eax, eax
.text:00409361                 jz      short loc_409392
.text:00409363                 lea     ecx, [esp+8]
.text:00409367                 mov     [esp+4], ecx
.text:0040936B                 mov     ecx, [esp+20h]
.text:0040936F                 mov     [esp], ecx
.text:00409372                 call    eax
.text:00409374                 sub     esp, 8
.text:00409377                 mov     ebx, eax
.text:00409379                 cmp     eax, 0FFFFFFFFh
.text:0040937C                 jz      short loc_4093AD
.text:0040937E
.text:0040937E loc_40937E:                             ; CODE XREF: .text:004093B6↓j
.text:0040937E                 mov     esi, [esp+8]
.text:00409382                 mov     ecx, ebx
.text:00409384                 xor     edi, edi
.text:00409386                 xor     ebx, ebx
.text:00409388                 mov     edx, esi
.text:0040938A                 mov     esi, ecx
.text:0040938C                 or      esi, edi
.text:0040938E                 mov     edi, ebx
.text:00409390                 or      edi, edx
.text:00409392
.text:00409392 loc_409392:                             ; CODE XREF: .text:00409361↑j
.text:00409392                                         ; .text:004093B4↓j
.text:00409392                 test    ebp, ebp
.text:00409394                 jz      short loc_4093A1
.text:00409396                 mov     [esp], ebp
.text:00409399                 call    FreeLibrary
.text:0040939E                 sub     esp, 4
.text:004093A1
.text:004093A1 loc_4093A1:                             ; CODE XREF: .text:00409394↑j
.text:004093A1                 add     esp, 0Ch
.text:004093A4                 mov     eax, esi
.text:004093A6                 mov     edx, edi
.text:004093A8                 pop     ebx
.text:004093A9                 pop     esi
.text:004093AA                 pop     edi
.text:004093AB                 pop     ebp
.text:004093AC                 retn
.text:004093AD ; ---------------------------------------------------------------------------
.text:004093AD
.text:004093AD loc_4093AD:                             ; CODE XREF: .text:0040937C↑j
.text:004093AD                 call    GetLastError
.text:004093B2                 test    eax, eax
.text:004093B4                 jnz     short loc_409392
.text:004093B6                 jmp     short loc_40937E
.text:004093B6 ; ---------------------------------------------------------------------------
.text:004093B8                 align 10h
.text:004093C0
.text:004093C0 ; =============== S U B R O U T I N E =======================================
.text:004093C0
.text:004093C0
.text:004093C0 ; int __cdecl sub_4093C0(LPCSTR lpFileName, int)
.text:004093C0 sub_4093C0      proc near               ; CODE XREF: sub_406FA0+2961↓p
.text:004093C0
.text:004093C0 lpRootPathName  = dword ptr -8FCh
.text:004093C0 lpVolumeNameBuffer= dword ptr -8F8h
.text:004093C0 nVolumeNameSize = dword ptr -8F4h
.text:004093C0 lpVolumeSerialNumber= dword ptr -8F0h
.text:004093C0 lpMaximumComponentLength= dword ptr -8ECh
.text:004093C0 lpFileSystemFlags= dword ptr -8E8h
.text:004093C0 lpFileSystemNameBuffer= dword ptr -8E4h
.text:004093C0 nFileSystemNameSize= dword ptr -8E0h
.text:004093C0 VolumeSerialNumber= dword ptr -8D8h
.text:004093C0 MaximumComponentLength= dword ptr -8D4h
.text:004093C0 FileSystemFlags = dword ptr -8D0h
.text:004093C0 var_8CC         = dword ptr -8CCh
.text:004093C0 var_8C8         = dword ptr -8C8h
.text:004093C0 var_8C4         = dword ptr -8C4h
.text:004093C0 var_8C0         = dword ptr -8C0h
.text:004093C0 var_8BC         = dword ptr -8BCh
.text:004093C0 var_8B8         = dword ptr -8B8h
.text:004093C0 var_8B4         = dword ptr -8B4h
.text:004093C0 var_8B0         = dword ptr -8B0h
.text:004093C0 var_8AC         = dword ptr -8ACh
.text:004093C0 var_8A8         = dword ptr -8A8h
.text:004093C0 var_8A4         = dword ptr -8A4h
.text:004093C0 var_8A0         = dword ptr -8A0h
.text:004093C0 var_89C         = dword ptr -89Ch
.text:004093C0 FileSystemNameBuffer= byte ptr -88Ch
.text:004093C0 VolumeNameBuffer= byte ptr -48Ch
.text:004093C0 var_8C          = dword ptr -8Ch
.text:004093C0 var_88          = dword ptr -88h
.text:004093C0 var_84          = dword ptr -84h
.text:004093C0 var_80          = dword ptr -80h
.text:004093C0 var_7C          = dword ptr -7Ch
.text:004093C0 var_78          = dword ptr -78h
.text:004093C0 var_74          = dword ptr -74h
.text:004093C0 var_70          = dword ptr -70h
.text:004093C0 var_6C          = dword ptr -6Ch
.text:004093C0 var_5C          = dword ptr -5Ch
.text:004093C0 var_58          = dword ptr -58h
.text:004093C0 var_54          = dword ptr -54h
.text:004093C0 var_50          = dword ptr -50h
.text:004093C0 var_4C          = dword ptr -4Ch
.text:004093C0 var_48          = dword ptr -48h
.text:004093C0 var_44          = dword ptr -44h
.text:004093C0 var_3C          = dword ptr -3Ch
.text:004093C0 var_38          = dword ptr -38h
.text:004093C0 var_34          = dword ptr -34h
.text:004093C0 lpFileName      = dword ptr  4
.text:004093C0 arg_4           = dword ptr  8
.text:004093C0
.text:004093C0                 push    ebp
.text:004093C1                 xor     eax, eax
.text:004093C3                 mov     ecx, 0Dh
.text:004093C8                 push    edi
.text:004093C9                 push    esi
.text:004093CA                 push    ebx
.text:004093CB                 sub     esp, 8ECh
.text:004093D1                 lea     edi, [esp+8FCh+var_5C]
.text:004093D8                 cld
.text:004093D9                 lea     edx, [esp+8FCh+var_8C]
.text:004093E0                 rep stosd
.text:004093E2                 mov     [esp+8FCh+lpVolumeNameBuffer], edx ; int
.text:004093E6                 lea     esi, [esp+8FCh+var_5C]
.text:004093ED                 mov     edx, [esp+8FCh+lpFileName]
.text:004093F4                 mov     [esp+8FCh+lpRootPathName], edx ; lpFileName
.text:004093F7                 call    sub_407E20
.text:004093FC                 test    eax, eax
.text:004093FE                 mov     edx, 0FFFFFFFFh
.text:00409403                 jz      loc_409794
.text:00409409                 mov     edx, [esp+8FCh+var_88]
.text:00409410                 mov     ebp, [esp+8FCh+var_84]
.text:00409417                 mov     edi, [esp+8FCh+var_80]
.text:0040941E                 mov     [esp+8FCh+var_58], edx
.text:00409425                 mov     ecx, [esp+8FCh+var_7C]
.text:0040942C                 mov     ebx, [esp+8FCh+var_8C]
.text:00409433                 mov     [esp+8FCh+var_54], ebp
.text:0040943A                 mov     edx, [esp+8FCh+var_78]
.text:00409441                 mov     ebp, [esp+8FCh+var_74]
.text:00409448                 mov     [esp+8FCh+var_50], edi
.text:0040944F                 test    bl, 10h
.text:00409452                 mov     edi, [esp+8FCh+var_70]
.text:00409459                 mov     [esp+8FCh+var_4C], ecx
.text:00409460                 mov     ecx, [esp+8FCh+var_6C]
.text:00409467                 mov     [esp+8FCh+var_5C], ebx
.text:0040946E                 mov     [esp+8FCh+var_48], edx
.text:00409475                 mov     [esp+8FCh+var_44], ebp
.text:0040947C                 mov     [esp+8FCh+var_3C], edi
.text:00409483                 mov     [esp+8FCh+var_38], ecx
.text:0040948A                 jnz     loc_4097B0
.text:00409490                 mov     ebx, 1
.text:00409495                 mov     [esp+8FCh+var_34], ebx
.text:0040949C
.text:0040949C loc_40949C:                             ; CODE XREF: sub_4093C0+406↓j
.text:0040949C                 mov     eax, [esp+8FCh+lpFileName]
.text:004094A3                 lea     edi, [esp+8FCh+FileSystemNameBuffer]
.text:004094A7                 lea     ebx, [esp+8FCh+FileSystemFlags]
.text:004094AB                 mov     [esp+8FCh+lpRootPathName], eax ; LPCSTR
.text:004094AE                 call    sub_40B210
.text:004094B3                 mov     [esp+8FCh+lpRootPathName], eax
.text:004094B6                 call    sub_407710
.text:004094BB                 mov     [esp+8FCh+lpFileSystemNameBuffer], edi ; lpFileSystemNameBuffer
.text:004094BF                 lea     ecx, [esp+8FCh+VolumeSerialNumber]
.text:004094C3                 mov     ebp, eax
.text:004094C5                 mov     [esp+8FCh+lpVolumeSerialNumber], ecx ; lpVolumeSerialNumber
.text:004094C9                 lea     edx, [esp+8FCh+MaximumComponentLength]
.text:004094CD                 lea     edi, [esp+8FCh+VolumeNameBuffer]
.text:004094D4                 mov     [esp+8FCh+lpFileSystemFlags], ebx ; lpFileSystemFlags
.text:004094D8                 mov     [esp+8FCh+lpMaximumComponentLength], edx ; lpMaximumComponentLength
.text:004094DC                 mov     [esp+8FCh+lpVolumeNameBuffer], edi ; lpVolumeNameBuffer
.text:004094E0                 mov     [esp+8FCh+nFileSystemNameSize], 400h ; nFileSystemNameSize
.text:004094E8                 mov     [esp+8FCh+nVolumeNameSize], 400h ; nVolumeNameSize
.text:004094F0                 mov     [esp+8FCh+lpRootPathName], eax ; lpRootPathName
.text:004094F3                 call    GetVolumeInformationA
.text:004094F8                 sub     esp, 20h
.text:004094FB                 test    eax, eax
.text:004094FD                 lea     edi, [esp+8FCh+var_8CC]
.text:00409501                 setz    bl
.text:00409504                 mov     [esp+8FCh+lpRootPathName], ebp ; Block
.text:00409507                 xor     ebp, ebp
.text:00409509                 movzx   edx, bl
.text:0040950C                 dec     edx
.text:0040950D                 xor     ebx, ebx
.text:0040950F                 and     [esp+8FCh+VolumeSerialNumber], edx
.text:00409513                 call    free
.text:00409518                 cld
.text:00409519                 mov     ecx, [esp+8FCh+VolumeSerialNumber]
.text:0040951D                 mov     [esi+1Ch], ecx
.text:00409520                 mov     ecx, 0Dh
.text:00409525                 rep movsd
.text:00409527                 mov     edi, [esp+8FCh+var_8A0]
.text:0040952B                 mov     edx, [esp+8FCh+var_89C]
.text:0040952F                 mov     ecx, [esp+8FCh+var_8CC]
.text:00409533                 or      ebp, edi
.text:00409535                 mov     esi, [esp+8FCh+var_8B0]
.text:00409539                 mov     edi, [esp+8FCh+arg_4]
.text:00409540                 or      edx, ebx
.text:00409542                 mov     [edi+8], edx
.text:00409545                 xor     edx, edx
.text:00409547                 test    cl, 10h
.text:0040954A                 setz    dl
.text:0040954D                 mov     [edi+0Ch], ebp
.text:00409550                 mov     [edi+10h], esi
.text:00409553                 mov     dword ptr [edi+14h], 0
.text:0040955A                 dec     edx
.text:0040955B                 and     edx, 0FFFFC000h
.text:00409561                 add     edx, 8000h
.text:00409567                 or      edx, 124h
.text:0040956D                 test    cl, 1
.text:00409570                 movzx   eax, dx
.text:00409573                 jnz     short loc_40957A
.text:00409575                 or      eax, 92h
.text:0040957A
.text:0040957A loc_40957A:                             ; CODE XREF: sub_4093C0+1B3↑j
.text:0040957A                 mov     ebx, [esp+8FCh+var_8A8]
.text:0040957E                 xor     edx, edx
.text:00409580                 xor     ebp, ebp
.text:00409582                 mov     edi, [esp+8FCh+var_8AC]
.text:00409586                 mov     ecx, [esp+8FCh+arg_4]
.text:0040958D                 mov     esi, edi
.text:0040958F                 or      [ecx], eax
.text:00409591                 mov     edi, ebx
.text:00409593                 or      edi, ebp
.text:00409595                 mov     ebp, edx
.text:00409597                 mov     ebx, [esp+8FCh+var_8A4]
.text:0040959B                 or      ebp, esi
.text:0040959D                 mov     esi, [esp+8FCh+arg_4]
.text:004095A4                 mov     edx, [esp+8FCh+var_8BC]
.text:004095A8                 mov     [esi+18h], ebx
.text:004095AB                 mov     ebx, [esp+8FCh+var_8C0]
.text:004095AF                 mov     ecx, edx
.text:004095B1                 mov     [esi+30h], edi
.text:004095B4                 xor     edx, edx
.text:004095B6                 mov     [esi+34h], ebp
.text:004095B9                 or      ebx, edx
.text:004095BB                 xor     esi, esi
.text:004095BD                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:004095C5                 or      esi, ecx
.text:004095C7                 mov     edx, ebx
.text:004095C9                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:004095D1                 sub     edx, 0D53E8000h
.text:004095D7                 mov     ecx, esi
.text:004095D9                 sbb     ecx, 19DB1DEh
.text:004095DF                 mov     [esp+8FCh+lpVolumeNameBuffer], ecx
.text:004095E3                 mov     [esp+8FCh+lpRootPathName], edx
.text:004095E6                 call    sub_40F900
.text:004095EB                 mov     edx, eax
.text:004095ED                 mov     ecx, [esp+8FCh+arg_4]
.text:004095F4                 shr     eax, 1Fh
.text:004095F7                 dec     eax
.text:004095F8                 and     edx, eax
.text:004095FA                 mov     [ecx+38h], edx
.text:004095FD                 mov     [esp+8FCh+lpRootPathName], ebx
.text:00409600                 mov     [esp+8FCh+lpVolumeNameBuffer], esi
.text:00409604                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:0040960C                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:00409614                 call    sub_40FA20
.text:00409619                 lea     ecx, [eax+eax*4]
.text:0040961C                 lea     ebx, [ecx+ecx*4]
.text:0040961F                 mov     eax, [esp+8FCh+arg_4]
.text:00409626                 shl     ebx, 2
.text:00409629                 mov     esi, ebx
.text:0040962B                 shr     esi, 1Fh
.text:0040962E                 dec     esi
.text:0040962F                 and     esi, ebx
.text:00409631                 mov     [eax+3Ch], esi
.text:00409634                 mov     edx, [esp+8FCh+var_8C4]
.text:00409638                 xor     esi, esi
.text:0040963A                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:00409642                 mov     ebx, [esp+8FCh+var_8C8]
.text:00409646                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:0040964E                 mov     ecx, edx
.text:00409650                 xor     edx, edx
.text:00409652                 or      ebx, edx
.text:00409654                 or      esi, ecx
.text:00409656                 mov     edx, ebx
.text:00409658                 sub     edx, 0D53E8000h
.text:0040965E                 mov     ecx, esi
.text:00409660                 sbb     ecx, 19DB1DEh
.text:00409666                 mov     [esp+8FCh+lpVolumeNameBuffer], ecx
.text:0040966A                 mov     [esp+8FCh+lpRootPathName], edx
.text:0040966D                 call    sub_40F900
.text:00409672                 mov     edx, eax
.text:00409674                 mov     ecx, [esp+8FCh+arg_4]
.text:0040967B                 shr     eax, 1Fh
.text:0040967E                 dec     eax
.text:0040967F                 and     edx, eax
.text:00409681                 mov     [ecx+48h], edx
.text:00409684                 mov     [esp+8FCh+lpRootPathName], ebx
.text:00409687                 mov     [esp+8FCh+lpVolumeNameBuffer], esi
.text:0040968B                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:00409693                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:0040969B                 call    sub_40FA20
.text:004096A0                 lea     ecx, [eax+eax*4]
.text:004096A3                 lea     ebx, [ecx+ecx*4]
.text:004096A6                 mov     eax, [esp+8FCh+arg_4]
.text:004096AD                 shl     ebx, 2
.text:004096B0                 mov     esi, ebx
.text:004096B2                 shr     esi, 1Fh
.text:004096B5                 dec     esi
.text:004096B6                 and     esi, ebx
.text:004096B8                 mov     [eax+4Ch], esi
.text:004096BB                 mov     edx, [esp+8FCh+var_8B4]
.text:004096BF                 xor     esi, esi
.text:004096C1                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:004096C9                 mov     ebx, [esp+8FCh+var_8B8]
.text:004096CD                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:004096D5                 mov     ecx, edx
.text:004096D7                 xor     edx, edx
.text:004096D9                 or      ebx, edx
.text:004096DB                 or      esi, ecx
.text:004096DD                 mov     edx, ebx
.text:004096DF                 sub     edx, 0D53E8000h
.text:004096E5                 mov     ecx, esi
.text:004096E7                 sbb     ecx, 19DB1DEh
.text:004096ED                 mov     [esp+8FCh+lpVolumeNameBuffer], ecx
.text:004096F1                 mov     [esp+8FCh+lpRootPathName], edx
.text:004096F4                 call    sub_40F900
.text:004096F9                 mov     edx, eax
.text:004096FB                 mov     ecx, [esp+8FCh+arg_4]
.text:00409702                 shr     eax, 1Fh
.text:00409705                 dec     eax
.text:00409706                 and     edx, eax
.text:00409708                 mov     [ecx+40h], edx
.text:0040970B                 mov     [esp+8FCh+lpRootPathName], ebx
.text:0040970E                 mov     [esp+8FCh+lpVolumeNameBuffer], esi
.text:00409712                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:0040971A                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:00409722                 call    sub_40FA20
.text:00409727                 lea     ebx, [eax+eax*4]
.text:0040972A                 mov     esi, [esp+8FCh+arg_4]
.text:00409731                 lea     edx, [ebx+ebx*4]
.text:00409734                 shl     edx, 2
.text:00409737                 mov     eax, edi
.text:00409739                 mov     ecx, edx
.text:0040973B                 mov     dword ptr [esi+50h], 200h
.text:00409742                 shr     ecx, 1Fh
.text:00409745                 dec     ecx
.text:00409746                 and     ecx, edx
.text:00409748                 test    ebp, ebp
.text:0040974A                 mov     edx, ebp
.text:0040974C                 mov     [esi+44h], ecx
.text:0040974F                 js      short loc_4097A1
.text:00409751
.text:00409751 loc_409751:                             ; CODE XREF: sub_4093C0+3E9↓j
.text:00409751                 xor     esi, esi
.text:00409753                 mov     ebp, edi
.text:00409755                 mov     ecx, eax
.text:00409757                 shrd    ecx, edx, 9
.text:0040975B                 mov     ebx, edx
.text:0040975D                 and     ebp, 1FFh
.text:00409763                 mov     eax, esi
.text:00409765                 sar     ebx, 9
.text:00409768                 or      eax, ebp
.text:0040976A                 jz      short loc_409772
.text:0040976C                 add     ecx, 1
.text:0040976F                 adc     ebx, 0
.text:00409772
.text:00409772 loc_409772:                             ; CODE XREF: sub_4093C0+3AA↑j
.text:00409772                 mov     edx, [esp+8FCh+arg_4]
.text:00409779                 mov     [edx+5Ch], ebx
.text:0040977C                 mov     ebx, [esp+8FCh+lpFileName]
.text:00409783                 mov     [edx+58h], ecx
.text:00409786                 mov     [esp+8FCh+lpVolumeNameBuffer], edx ; int
.text:0040978A                 mov     [esp+8FCh+lpRootPathName], ebx ; String1
.text:0040978D                 call    sub_4085E0
.text:00409792                 xor     edx, edx
.text:00409794
.text:00409794 loc_409794:                             ; CODE XREF: sub_4093C0+43↑j
.text:00409794                 add     esp, 8ECh
.text:0040979A                 mov     eax, edx
.text:0040979C                 pop     ebx
.text:0040979D                 pop     esi
.text:0040979E                 pop     edi
.text:0040979F                 pop     ebp
.text:004097A0                 retn
.text:004097A1 ; ---------------------------------------------------------------------------
.text:004097A1
.text:004097A1 loc_4097A1:                             ; CODE XREF: sub_4093C0+38F↑j
.text:004097A1                 add     eax, 1FFh
.text:004097A6                 adc     edx, 0
.text:004097A9                 jmp     short loc_409751
.text:004097A9 ; ---------------------------------------------------------------------------
.text:004097AB                 align 10h
.text:004097B0
.text:004097B0 loc_4097B0:                             ; CODE XREF: sub_4093C0+CA↑j
.text:004097B0                 mov     eax, [esp+8FCh+lpFileName]
.text:004097B7                 mov     [esp+8FCh+lpRootPathName], eax ; Str
.text:004097BA                 call    sub_407F90
.text:004097BF                 mov     [esp+8FCh+var_34], eax
.text:004097C6                 jmp     loc_40949C
.text:004097C6 sub_4093C0      endp
.text:004097C6
.text:004097C6 ; ---------------------------------------------------------------------------
.text:004097CB                 align 10h
.text:004097D0 ; START OF FUNCTION CHUNK FOR sub_406FA0
.text:004097D0
.text:004097D0 loc_4097D0:                             ; CODE XREF: sub_406FA0+26↑j
.text:004097D0                 cld
.text:004097D1                 sub     esp, 2Ch
.text:004097D4                 xor     eax, eax
.text:004097D6                 mov     [esp+2Ch+var_10], ebx
.text:004097DA                 mov     ecx, 18h
.text:004097DF                 mov     ebx, [esp+2Ch+arg_0]
.text:004097E3                 mov     [esp+2Ch+var_C], esi
.text:004097E7                 mov     esi, [esp+2Ch+arg_4]
.text:004097EB                 test    ebx, ebx
.text:004097ED                 mov     [esp+2Ch+var_8], edi
.text:004097F1                 mov     edi, esi
.text:004097F3                 mov     [esp+2Ch+var_4], ebp
.text:004097F7                 rep stosd
.text:004097F9                 jz      short loc_409800
.text:004097FB                 cmp     byte ptr [ebx], 0
.text:004097FE                 jnz     short loc_409818
.text:00409800
.text:00409800 loc_409800:                             ; CODE XREF: sub_406FA0+2859↑j
.text:00409800                 xor     edx, edx
.text:00409802
.text:00409802 loc_409802:                             ; CODE XREF: sub_406FA0+288F↓j
.text:00409802                                         ; sub_406FA0+2938↓j
.text:00409802                 mov     ebx, [esp+2Ch+var_10]
.text:00409806                 mov     eax, edx
.text:00409808                 mov     esi, [esp+2Ch+var_C]
.text:0040980C                 mov     edi, [esp+2Ch+var_8]
.text:00409810                 mov     ebp, [esp+2Ch+var_4]
.text:00409814                 add     esp, 2Ch
.text:00409817                 retn
.text:00409818 ; ---------------------------------------------------------------------------
.text:00409818
.text:00409818 loc_409818:                             ; CODE XREF: sub_406FA0+285E↑j
.text:00409818                 mov     [esp+2Ch+dwDesiredAccess], 0 ; int
.text:00409820                 mov     [esp+2Ch+lpFileName], ebx ; lpFileName
.text:00409823                 call    sub_40B130
.text:00409828                 test    eax, eax
.text:0040982A                 mov     edx, 0FFFFFFFFh
.text:0040982F                 jnz     short loc_409802
.text:00409831                 mov     [esp+2Ch+lpFileName], ebx ; LPCSTR
.text:00409834                 call    sub_40AFE0
.text:00409839                 mov     [esp+2Ch+lpFileName], eax
.text:0040983C                 call    sub_407710
.text:00409841                 mov     [esp+2Ch+lpFileName], eax ; lpFileName
.text:00409844                 mov     ebp, eax
.text:00409846                 mov     [esp+2Ch+hTemplateFile], 0 ; hTemplateFile
.text:0040984E                 mov     [esp+2Ch+dwFlagsAndAttributes], 2000001h ; dwFlagsAndAttributes
.text:00409856                 mov     [esp+2Ch+dwCreationDisposition], 3 ; dwCreationDisposition
.text:0040985E                 mov     [esp+2Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:00409866                 mov     [esp+2Ch+dwShareMode], 0 ; dwShareMode
.text:0040986E                 mov     [esp+2Ch+dwDesiredAccess], 0 ; dwDesiredAccess
.text:00409876                 call    CreateFileA
.text:0040987B                 sub     esp, 1Ch
.text:0040987E                 mov     ebx, eax
.text:00409880                 mov     [esp+2Ch+dwDesiredAccess], esi ; int
.text:00409884                 mov     [esp+2Ch+lpFileName], eax ; hNamedPipe
.text:00409887                 call    sub_408110
.text:0040988C                 mov     [esp+2Ch+lpFileName], ebx ; hObject
.text:0040988F                 mov     edi, eax
.text:00409891                 call    CloseHandle
.text:00409896                 sub     esp, 4
.text:00409899                 cmp     edi, 0FFFFFFFFh
.text:0040989C                 jz      short loc_4098FA
.text:0040989E                 mov     [esp+2Ch+dwDesiredAccess], esi ; int
.text:004098A2                 mov     [esp+2Ch+lpFileName], ebp ; String1
.text:004098A5                 call    sub_4085E0
.text:004098AA
.text:004098AA loc_4098AA:                             ; CODE XREF: sub_406FA0+2968↓j
.text:004098AA                 mov     edx, [esi]
.text:004098AC                 and     edx, 0F000h
.text:004098B2                 cmp     edx, 4000h
.text:004098B8                 jz      short loc_4098ED
.text:004098BA
.text:004098BA loc_4098BA:                             ; CODE XREF: sub_406FA0+2958↓j
.text:004098BA                 cmp     edi, 0FFFFFFFFh
.text:004098BD                 jz      short loc_4098DD
.text:004098BF
.text:004098BF loc_4098BF:                             ; CODE XREF: sub_406FA0+294B↓j
.text:004098BF                 mov     [esp+2Ch+lpFileName], 0 ; uMode
.text:004098C6                 call    SetErrorMode
.text:004098CB                 sub     esp, 4
.text:004098CE                 mov     [esp+2Ch+lpFileName], ebp ; Block
.text:004098D1                 call    free
.text:004098D6                 mov     edx, edi
.text:004098D8                 jmp     loc_409802
.text:004098DD ; ---------------------------------------------------------------------------
.text:004098DD
.text:004098DD loc_4098DD:                             ; CODE XREF: sub_406FA0+291D↑j
.text:004098DD                 call    sub_407DC0
.text:004098E2                 mov     esi, eax
.text:004098E4                 call    _errno
.text:004098E9                 mov     [eax], esi
.text:004098EB                 jmp     short loc_4098BF
.text:004098ED ; ---------------------------------------------------------------------------
.text:004098ED
.text:004098ED loc_4098ED:                             ; CODE XREF: sub_406FA0+2918↑j
.text:004098ED                 mov     [esp+2Ch+lpFileName], ebp ; Str
.text:004098F0                 call    sub_407F90
.text:004098F5                 mov     [esi+18h], eax
.text:004098F8                 jmp     short loc_4098BA
.text:004098FA ; ---------------------------------------------------------------------------
.text:004098FA
.text:004098FA loc_4098FA:                             ; CODE XREF: sub_406FA0+28FC↑j
.text:004098FA                 mov     [esp+2Ch+dwDesiredAccess], esi ; int
.text:004098FE                 mov     [esp+2Ch+lpFileName], ebp ; lpFileName
.text:00409901                 call    sub_4093C0
.text:00409906                 mov     edi, eax
.text:00409908                 jmp     short loc_4098AA
.text:00409908 ; END OF FUNCTION CHUNK FOR sub_406FA0
.text:00409908 ; ---------------------------------------------------------------------------
.text:0040990A                 align 10h
.text:00409910
.text:00409910 ; =============== S U B R O U T I N E =======================================
.text:00409910
.text:00409910
.text:00409910 sub_409910      proc near               ; CODE XREF: sub_407060+3↑p
.text:00409910                                         ; sub_407080+B↑p ...
.text:00409910
.text:00409910 FileHandle      = dword ptr -1Ch
.text:00409910 Offset          = qword ptr -18h
.text:00409910 Origin          = dword ptr -10h
.text:00409910 var_4           = dword ptr -4
.text:00409910
.text:00409910                 sub     esp, 1Ch
.text:00409913                 mov     eax, FileHandle
.text:00409918                 mov     [esp+1Ch+var_4], ebx
.text:0040991C                 test    eax, eax
.text:0040991E                 js      short loc_409970
.text:00409920
.text:00409920 loc_409920:                             ; CODE XREF: sub_409910+C5↓j
.text:00409920                 mov     [esp+1Ch+Origin], 0 ; Origin
.text:00409928                 mov     ebx, 0FFFFFFFFh
.text:0040992D                 mov     dword ptr [esp+1Ch+Offset], 0 ; Offset
.text:00409935                 mov     dword ptr [esp+1Ch+Offset+4], 0
.text:0040993D                 mov     [esp+1Ch+FileHandle], eax ; FileHandle
.text:00409940                 call    _lseeki64
.text:00409945                 mov     word ptr ds:dword_412370, bx
.text:0040994C                 xor     edx, edx
.text:0040994E                 xor     eax, eax
.text:00409950                 mov     ds:dword_412360, edx
.text:00409956                 mov     edx, 1
.text:0040995B                 mov     ds:dword_412364, eax
.text:00409960
.text:00409960 loc_409960:                             ; CODE XREF: sub_409910+DA↓j
.text:00409960                                         ; sub_409910+F9↓j
.text:00409960                 mov     ebx, [esp+1Ch+var_4]
.text:00409964                 mov     eax, edx
.text:00409966                 add     esp, 1Ch
.text:00409969                 retn
.text:00409969 ; ---------------------------------------------------------------------------
.text:0040996A                 align 10h
.text:00409970
.text:00409970 loc_409970:                             ; CODE XREF: sub_409910+E↑j
.text:00409970                 mov     dword ptr [esp+1Ch+Offset], 2 ; OpenFlag
.text:00409978                 mov     ebx, FileName
.text:0040997E                 mov     [esp+1Ch+FileHandle], ebx ; FileName
.text:00409981                 call    _open
.text:00409986                 mov     FileHandle, eax
.text:0040998B                 inc     eax
.text:0040998C                 jz      short loc_4099EF
.text:0040998E
.text:0040998E loc_40998E:                             ; CODE XREF: sub_409910+F7↓j
.text:0040998E                 mov     dword ptr [esp+1Ch+Offset+4], 0
.text:00409996                 mov     edx, FileHandle
.text:0040999C                 mov     dword ptr [esp+1Ch+Offset], 1
.text:004099A4                 mov     [esp+1Ch+FileHandle], edx
.text:004099A7                 call    sub_40C0A0
.text:004099AC                 test    eax, eax
.text:004099AE                 js      short loc_4099CD
.text:004099B0                 mov     dword ptr [esp+1Ch+Offset], 2
.text:004099B8                 mov     edx, FileHandle
.text:004099BE                 or      eax, 1
.text:004099C1                 mov     dword ptr [esp+1Ch+Offset+4], eax
.text:004099C5                 mov     [esp+1Ch+FileHandle], edx
.text:004099C8                 call    sub_40C0A0
.text:004099CD
.text:004099CD loc_4099CD:                             ; CODE XREF: sub_409910+9E↑j
.text:004099CD                 inc     eax
.text:004099CE                 jz      short loc_4099DA
.text:004099D0                 mov     eax, FileHandle
.text:004099D5                 jmp     loc_409920
.text:004099DA ; ---------------------------------------------------------------------------
.text:004099DA
.text:004099DA loc_4099DA:                             ; CODE XREF: sub_409910+BE↑j
.text:004099DA                 mov     ecx, FileHandle
.text:004099E0                 mov     [esp+1Ch+FileHandle], ecx ; FileHandle
.text:004099E3                 call    _close
.text:004099E8                 xor     edx, edx
.text:004099EA                 jmp     loc_409960
.text:004099EF ; ---------------------------------------------------------------------------
.text:004099EF
.text:004099EF loc_4099EF:                             ; CODE XREF: sub_409910+7C↑j
.text:004099EF                 mov     dword ptr [esp+1Ch+Offset], 0 ; OpenFlag
.text:004099F7                 mov     [esp+1Ch+FileHandle], ebx ; FileName
.text:004099FA                 call    _open
.text:004099FF                 mov     FileHandle, eax
.text:00409A04                 xor     edx, edx
.text:00409A06                 inc     eax
.text:00409A07                 jnz     short loc_40998E
.text:00409A09                 jmp     loc_409960
.text:00409A09 sub_409910      endp
.text:00409A09
.text:00409A09 ; ---------------------------------------------------------------------------
.text:00409A0E                 align 10h
.text:00409A10 aLibc05SrcLogin db '../../libc-0.5-src/login/utmp_file.c',0
.text:00409A10                                         ; DATA XREF: sub_409A50+136↓o
.text:00409A10                                         ; sub_409BA0+196↓o ...
.text:00409A35 aFileFd0        db 'file_fd >= 0',0     ; DATA XREF: sub_409A50+13E↓o
.text:00409A35                                         ; sub_409BA0+19E↓o ...
.text:00409A42                 align 10h
.text:00409A50
.text:00409A50 ; =============== S U B R O U T I N E =======================================
.text:00409A50
.text:00409A50
.text:00409A50 sub_409A50      proc near               ; CODE XREF: sub_407080+2A↑p
.text:00409A50                                         ; DATA XREF: .data:off_4110B8↓o
.text:00409A50
.text:00409A50 FileHandle      = dword ptr -5Ch
.text:00409A50 DstBuf          = dword ptr -58h
.text:00409A50 MaxCharCount    = dword ptr -54h
.text:00409A50 var_2C          = word ptr -2Ch
.text:00409A50 var_2A          = word ptr -2Ah
.text:00409A50 arg_0           = dword ptr  4
.text:00409A50 arg_4           = dword ptr  8
.text:00409A50
.text:00409A50                 push    ebp
.text:00409A51                 push    edi
.text:00409A52                 push    esi
.text:00409A53                 push    ebx
.text:00409A54                 sub     esp, 4Ch
.text:00409A57                 mov     esi, FileHandle
.text:00409A5D                 mov     ebx, [esp+5Ch+arg_0]
.text:00409A61                 mov     ebp, [esp+5Ch+arg_4]
.text:00409A65                 test    esi, esi
.text:00409A67                 js      loc_409B7E
.text:00409A6D                 mov     ecx, ds:dword_412360
.text:00409A73                 mov     eax, ds:dword_412364
.text:00409A78                 and     ecx, eax
.text:00409A7A                 inc     ecx
.text:00409A7B                 jz      loc_409B70
.text:00409A81                 cld
.text:00409A82                 xor     eax, eax
.text:00409A84                 lea     edi, [esp+5Ch+var_2C]
.text:00409A88                 mov     ecx, 4
.text:00409A8D                 rep stosd
.text:00409A8F                 mov     [esp+5Ch+var_2C], 1
.text:00409A96                 lea     edi, [esp+5Ch+var_2C]
.text:00409A9A                 mov     [esp+5Ch+var_2A], 0
.text:00409AA1                 mov     [esp+5Ch+MaxCharCount], edi
.text:00409AA5                 mov     [esp+5Ch+DstBuf], 9
.text:00409AAD                 mov     [esp+5Ch+FileHandle], esi
.text:00409AB0                 call    sub_40C0A0
.text:00409AB5                 test    eax, eax
.text:00409AB7                 js      loc_409B70
.text:00409ABD                 mov     [esp+5Ch+MaxCharCount], 180h ; MaxCharCount
.text:00409AC5                 mov     ecx, FileHandle
.text:00409ACB                 mov     [esp+5Ch+DstBuf], offset dword_412370 ; DstBuf
.text:00409AD3                 mov     [esp+5Ch+FileHandle], ecx ; FileHandle
.text:00409AD6                 call    _read
.text:00409ADB                 mov     [esp+5Ch+var_2C], 3
.text:00409AE2                 mov     edx, FileHandle
.text:00409AE8                 mov     esi, eax
.text:00409AEA                 mov     [esp+5Ch+MaxCharCount], edi
.text:00409AEE                 mov     [esp+5Ch+DstBuf], 9
.text:00409AF6                 mov     [esp+5Ch+FileHandle], edx
.text:00409AF9                 call    sub_40C0A0
.text:00409AFE                 cmp     esi, 180h
.text:00409B04                 jnz     short loc_409B52
.text:00409B06                 add     ds:dword_412360, 180h
.text:00409B10                 mov     edi, ebx
.text:00409B12                 mov     esi, offset dword_412370
.text:00409B17                 mov     eax, 180h
.text:00409B1C                 adc     ds:dword_412364, 0
.text:00409B23                 test    bl, 4
.text:00409B26                 jz      short loc_409B3D
.text:00409B28                 mov     edi, ds:dword_412370
.text:00409B2E                 mov     esi, offset unk_412374
.text:00409B33                 mov     eax, 17Ch
.text:00409B38                 mov     [ebx], edi
.text:00409B3A                 lea     edi, [ebx+4]
.text:00409B3D
.text:00409B3D loc_409B3D:                             ; CODE XREF: sub_409A50+D6↑j
.text:00409B3D                 cld
.text:00409B3E                 mov     ecx, eax
.text:00409B40                 shr     ecx, 2
.text:00409B43                 rep movsd
.text:00409B45                 mov     [ebp+0], ebx
.text:00409B48                 xor     eax, eax
.text:00409B4A
.text:00409B4A loc_409B4A:                             ; CODE XREF: sub_409A50+12C↓j
.text:00409B4A                 add     esp, 4Ch
.text:00409B4D                 pop     ebx
.text:00409B4E                 pop     esi
.text:00409B4F                 pop     edi
.text:00409B50                 pop     ebp
.text:00409B51                 retn
.text:00409B52 ; ---------------------------------------------------------------------------
.text:00409B52
.text:00409B52 loc_409B52:                             ; CODE XREF: sub_409A50+B4↑j
.text:00409B52                 test    esi, esi
.text:00409B54                 jz      short loc_409B70
.text:00409B56                 mov     ebx, 0FFFFFFFFh
.text:00409B5B                 mov     esi, 0FFFFFFFFh
.text:00409B60                 mov     ds:dword_412360, ebx
.text:00409B66                 mov     ds:dword_412364, esi
.text:00409B6C                 lea     esi, [esi+0]
.text:00409B70
.text:00409B70 loc_409B70:                             ; CODE XREF: sub_409A50+2B↑j
.text:00409B70                                         ; sub_409A50+67↑j ...
.text:00409B70                 mov     dword ptr [ebp+0], 0
.text:00409B77                 mov     eax, 0FFFFFFFFh
.text:00409B7C                 jmp     short loc_409B4A
.text:00409B7E ; ---------------------------------------------------------------------------
.text:00409B7E
.text:00409B7E loc_409B7E:                             ; CODE XREF: sub_409A50+17↑j
.text:00409B7E                 mov     [esp+5Ch+MaxCharCount], 0A3h ; '£'
.text:00409B86                 mov     [esp+5Ch+DstBuf], offset aLibc05SrcLogin ; "../../libc-0.5-src/login/utmp_file.c"
.text:00409B8E                 mov     [esp+5Ch+FileHandle], offset aFileFd0 ; "file_fd >= 0"
.text:00409B95                 call    _assert
.text:00409B95 sub_409A50      endp
.text:00409B95
.text:00409B95 ; ---------------------------------------------------------------------------
.text:00409B9A                 align 10h
.text:00409BA0
.text:00409BA0 ; =============== S U B R O U T I N E =======================================
.text:00409BA0
.text:00409BA0
.text:00409BA0 sub_409BA0      proc near               ; CODE XREF: sub_407120+33↑p
.text:00409BA0                                         ; DATA XREF: .data:off_4110C0↓o
.text:00409BA0
.text:00409BA0 FileHandle      = dword ptr -5Ch
.text:00409BA0 DstBuf          = dword ptr -58h
.text:00409BA0 MaxCharCount    = dword ptr -54h
.text:00409BA0 var_2C          = word ptr -2Ch
.text:00409BA0 var_2A          = word ptr -2Ah
.text:00409BA0 arg_0           = dword ptr  4
.text:00409BA0 arg_4           = dword ptr  8
.text:00409BA0 arg_8           = dword ptr  0Ch
.text:00409BA0
.text:00409BA0                 push    ebp
.text:00409BA1                 push    edi
.text:00409BA2                 push    esi
.text:00409BA3                 push    ebx
.text:00409BA4                 sub     esp, 4Ch
.text:00409BA7                 mov     ebx, FileHandle
.text:00409BAD                 mov     esi, [esp+5Ch+arg_0]
.text:00409BB1                 mov     ebp, [esp+5Ch+arg_8]
.text:00409BB5                 test    ebx, ebx
.text:00409BB7                 js      loc_409D2E
.text:00409BBD                 mov     ecx, ds:dword_412360
.text:00409BC3                 mov     eax, ds:dword_412364
.text:00409BC8                 and     ecx, eax
.text:00409BCA                 inc     ecx
.text:00409BCB                 jz      loc_409D20
.text:00409BD1                 cld
.text:00409BD2                 xor     eax, eax
.text:00409BD4                 lea     edi, [esp+5Ch+var_2C]
.text:00409BD8                 mov     ecx, 4
.text:00409BDD                 lea     edx, [esp+5Ch+var_2C]
.text:00409BE1                 rep stosd
.text:00409BE3                 mov     [esp+5Ch+var_2C], 1
.text:00409BEA                 mov     [esp+5Ch+var_2A], 0
.text:00409BF1                 mov     [esp+5Ch+MaxCharCount], edx
.text:00409BF5                 mov     [esp+5Ch+DstBuf], 9
.text:00409BFD                 mov     [esp+5Ch+FileHandle], ebx
.text:00409C00                 call    sub_40C0A0
.text:00409C05                 test    eax, eax
.text:00409C07                 js      loc_409D17
.text:00409C0D                 lea     esi, [esi+0]
.text:00409C10
.text:00409C10 loc_409C10:                             ; CODE XREF: sub_409BA0+B8↓j
.text:00409C10                                         ; sub_409BA0+D7↓j
.text:00409C10                 mov     [esp+5Ch+MaxCharCount], 180h ; MaxCharCount
.text:00409C18                 mov     edi, FileHandle
.text:00409C1E                 mov     [esp+5Ch+DstBuf], offset dword_412370 ; DstBuf
.text:00409C26                 mov     [esp+5Ch+FileHandle], edi ; FileHandle
.text:00409C29                 call    _read
.text:00409C2E                 cmp     eax, 180h
.text:00409C33                 jnz     loc_409CED
.text:00409C39                 movzx   edx, word ptr ds:dword_412370
.text:00409C40                 add     ds:dword_412360, 180h
.text:00409C4A                 adc     ds:dword_412364, 0
.text:00409C51                 sub     edx, 6
.text:00409C54                 cmp     dx, 1
.text:00409C58                 ja      short loc_409C10
.text:00409C5A                 mov     [esp+5Ch+MaxCharCount], 20h ; ' ' ; MaxCount
.text:00409C62                 lea     ecx, [esi+8]
.text:00409C65                 mov     [esp+5Ch+DstBuf], offset Str2 ; Str2
.text:00409C6D                 mov     [esp+5Ch+FileHandle], ecx ; Str1
.text:00409C70                 call    strncmp
.text:00409C75                 test    eax, eax
.text:00409C77                 jnz     short loc_409C10
.text:00409C79                 test    byte ptr [esp+5Ch+arg_4], 4
.text:00409C7E                 mov     esi, offset dword_412370
.text:00409C83                 mov     edi, [esp+5Ch+arg_4]
.text:00409C87                 mov     eax, 180h
.text:00409C8C                 jz      short loc_409CA7
.text:00409C8E                 mov     esi, ds:dword_412370
.text:00409C94                 mov     eax, 17Ch
.text:00409C99                 mov     [edi], esi
.text:00409C9B                 mov     edi, [esp+5Ch+arg_4]
.text:00409C9F                 mov     esi, offset unk_412374
.text:00409CA4                 add     edi, 4
.text:00409CA7
.text:00409CA7 loc_409CA7:                             ; CODE XREF: sub_409BA0+EC↑j
.text:00409CA7                 cld
.text:00409CA8                 mov     ecx, eax
.text:00409CAA                 shr     ecx, 2
.text:00409CAD                 rep movsd
.text:00409CAF                 mov     eax, [esp+5Ch+arg_4]
.text:00409CB3                 mov     [ebp+0], eax
.text:00409CB6
.text:00409CB6 loc_409CB6:                             ; CODE XREF: sub_409BA0+175↓j
.text:00409CB6                 mov     [esp+5Ch+var_2C], 3
.text:00409CBD                 mov     ebx, FileHandle
.text:00409CC3                 lea     edi, [esp+5Ch+var_2C]
.text:00409CC7                 mov     [esp+5Ch+MaxCharCount], edi
.text:00409CCB                 mov     [esp+5Ch+DstBuf], 9
.text:00409CD3                 mov     [esp+5Ch+FileHandle], ebx
.text:00409CD6                 call    sub_40C0A0
.text:00409CDB
.text:00409CDB loc_409CDB:                             ; CODE XREF: sub_409BA0+17E↓j
.text:00409CDB                 xor     eax, eax
.text:00409CDD                 cmp     dword ptr [ebp+0], 0
.text:00409CE1                 setnz   al
.text:00409CE4                 dec     eax
.text:00409CE5
.text:00409CE5 loc_409CE5:                             ; CODE XREF: sub_409BA0+18C↓j
.text:00409CE5                 add     esp, 4Ch
.text:00409CE8                 pop     ebx
.text:00409CE9                 pop     esi
.text:00409CEA                 pop     edi
.text:00409CEB                 pop     ebp
.text:00409CEC                 retn
.text:00409CED ; ---------------------------------------------------------------------------
.text:00409CED
.text:00409CED loc_409CED:                             ; CODE XREF: sub_409BA0+93↑j
.text:00409CED                 call    _errno
.text:00409CF2                 mov     dword ptr [eax], 3
.text:00409CF8                 mov     ebx, 0FFFFFFFFh
.text:00409CFD                 mov     ecx, 0FFFFFFFFh
.text:00409D02                 mov     ds:dword_412360, ebx
.text:00409D08                 mov     ds:dword_412364, ecx
.text:00409D0E                 mov     dword ptr [ebp+0], 0
.text:00409D15                 jmp     short loc_409CB6
.text:00409D17 ; ---------------------------------------------------------------------------
.text:00409D17
.text:00409D17 loc_409D17:                             ; CODE XREF: sub_409BA0+67↑j
.text:00409D17                 mov     dword ptr [ebp+0], 0
.text:00409D1E                 jmp     short loc_409CDB
.text:00409D20 ; ---------------------------------------------------------------------------
.text:00409D20
.text:00409D20 loc_409D20:                             ; CODE XREF: sub_409BA0+2B↑j
.text:00409D20                 mov     dword ptr [ebp+0], 0
.text:00409D27                 mov     eax, 0FFFFFFFFh
.text:00409D2C                 jmp     short loc_409CE5
.text:00409D2E ; ---------------------------------------------------------------------------
.text:00409D2E
.text:00409D2E loc_409D2E:                             ; CODE XREF: sub_409BA0+17↑j
.text:00409D2E                 mov     [esp+5Ch+MaxCharCount], 129h
.text:00409D36                 mov     [esp+5Ch+DstBuf], offset aLibc05SrcLogin ; "../../libc-0.5-src/login/utmp_file.c"
.text:00409D3E                 mov     [esp+5Ch+FileHandle], offset aFileFd0 ; "file_fd >= 0"
.text:00409D45                 call    _assert
.text:00409D45 sub_409BA0      endp
.text:00409D45
.text:00409D45 ; ---------------------------------------------------------------------------
.text:00409D4A                 align 10h
.text:00409D50
.text:00409D50 ; =============== S U B R O U T I N E =======================================
.text:00409D50
.text:00409D50
.text:00409D50 ; int __cdecl sub_409D50(void *Buf)
.text:00409D50 sub_409D50      proc near               ; CODE XREF: sub_407170+21↑p
.text:00409D50                                         ; DATA XREF: .data:off_4110C4↓o
.text:00409D50
.text:00409D50 Str1            = dword ptr -1ECh
.text:00409D50 Str2            = dword ptr -1E8h
.text:00409D50 MaxCount        = dword ptr -1E4h
.text:00409D50 Origin          = dword ptr -1E0h
.text:00409D50 var_1D0         = dword ptr -1D0h
.text:00409D50 var_1AC         = word ptr -1ACh
.text:00409D50 var_1AA         = word ptr -1AAh
.text:00409D50 var_19C         = byte ptr -19Ch
.text:00409D50 Buf             = dword ptr  4
.text:00409D50
.text:00409D50                 push    ebp
.text:00409D51                 push    edi
.text:00409D52                 push    esi
.text:00409D53                 push    ebx
.text:00409D54                 sub     esp, 1DCh
.text:00409D5A                 mov     ebx, FileHandle
.text:00409D60                 mov     ebp, [esp+1ECh+Buf]
.text:00409D67                 test    ebx, ebx
.text:00409D69                 js      loc_40A060
.text:00409D6F                 mov     edx, ds:dword_412364
.text:00409D75                 mov     eax, ds:dword_412360
.text:00409D7A                 test    edx, edx
.text:00409D7C                 js      loc_409FF0
.text:00409D82                 test    edx, edx
.text:00409D84                 jle     loc_40A056
.text:00409D8A
.text:00409D8A loc_409D8A:                             ; CODE XREF: sub_409D50+30B↓j
.text:00409D8A                 movzx   ecx, word ptr ds:dword_412370
.text:00409D91                 mov     edx, [ebp+0]
.text:00409D94                 cmp     cx, dx
.text:00409D97                 jz      loc_40A030
.text:00409D9D
.text:00409D9D loc_409D9D:                             ; CODE XREF: sub_409D50+2FB↓j
.text:00409D9D                 lea     ebx, [ecx-5]
.text:00409DA0                 cmp     bx, 3
.text:00409DA4                 ja      loc_409FF0
.text:00409DAA                 lea     ecx, [edx-5]
.text:00409DAD                 cmp     cx, 3
.text:00409DB1                 ja      loc_409FF0
.text:00409DB7                 cmp     ds:byte_412398, 0
.text:00409DBE                 jz      short loc_409DCA
.text:00409DC0                 cmp     byte ptr [ebp+28h], 0
.text:00409DC4                 jnz     loc_40A00F
.text:00409DCA
.text:00409DCA loc_409DCA:                             ; CODE XREF: sub_409D50+6E↑j
.text:00409DCA                 mov     [esp+1ECh+MaxCount], 20h ; ' ' ; MaxCount
.text:00409DD2                 lea     esi, [ebp+8]
.text:00409DD5                 mov     [esp+1ECh+Str2], esi ; Str2
.text:00409DD9                 mov     [esp+1ECh+Str1], offset Str2 ; Str1
.text:00409DE0
.text:00409DE0 loc_409DE0:                             ; CODE XREF: sub_409D50+2D5↓j
.text:00409DE0                 call    strncmp
.text:00409DE5                 test    eax, eax
.text:00409DE7                 jnz     loc_409FF0
.text:00409DED                 mov     ebx, FileHandle
.text:00409DF3                 lea     esi, [esi+0]
.text:00409DF9                 lea     edi, [edi+0]
.text:00409E00
.text:00409E00 loc_409E00:                             ; CODE XREF: sub_409D50+2E7↓j
.text:00409E00                                         ; sub_409D50+2F1↓j ...
.text:00409E00                 mov     [esp+1ECh+var_1D0], 1
.text:00409E08                 nop
.text:00409E09                 lea     esi, [esi+0]
.text:00409E10
.text:00409E10 loc_409E10:                             ; CODE XREF: sub_409D50+2BA↓j
.text:00409E10                 cld
.text:00409E11                 xor     eax, eax
.text:00409E13                 lea     edi, [esp+1ECh+var_1AC]
.text:00409E17                 mov     ecx, 4
.text:00409E1C                 rep stosd
.text:00409E1E                 mov     [esp+1ECh+Str1], ebx
.text:00409E21                 lea     edi, [esp+1ECh+var_1AC]
.text:00409E25                 xor     ebx, ebx
.text:00409E27                 mov     [esp+1ECh+var_1AC], 2
.text:00409E2E                 mov     [esp+1ECh+var_1AA], 0
.text:00409E35                 mov     [esp+1ECh+MaxCount], edi
.text:00409E39                 mov     [esp+1ECh+Str2], 9
.text:00409E41                 call    sub_40C0A0
.text:00409E46                 test    eax, eax
.text:00409E48                 js      loc_409EE5
.text:00409E4E                 mov     ebx, [esp+1ECh+var_1D0]
.text:00409E52                 test    ebx, ebx
.text:00409E54                 js      loc_409F30
.text:00409E5A                 mov     [esp+1ECh+Origin], 0 ; Origin
.text:00409E62                 mov     ebx, ds:dword_412360
.text:00409E68                 mov     esi, ds:dword_412364
.text:00409E6E                 mov     edx, FileHandle
.text:00409E74                 add     ebx, 0FFFFFE80h
.text:00409E7A                 adc     esi, 0FFFFFFFFh
.text:00409E7D                 mov     ds:dword_412360, ebx
.text:00409E83                 mov     ds:dword_412364, esi
.text:00409E89                 mov     [esp+1ECh+Str2], ebx ; Offset
.text:00409E8D                 mov     [esp+1ECh+MaxCount], esi
.text:00409E91                 mov     [esp+1ECh+Str1], edx ; FileHandle
.text:00409E94                 call    _lseeki64
.text:00409E99
.text:00409E99 loc_409E99:                             ; CODE XREF: sub_409D50+238↓j
.text:00409E99                                         ; sub_409D50+290↓j
.text:00409E99                 mov     [esp+1ECh+MaxCount], 180h ; MaxCharCount
.text:00409EA1                 mov     ecx, FileHandle
.text:00409EA7                 mov     [esp+1ECh+Str2], ebp ; Buf
.text:00409EAB                 mov     [esp+1ECh+Str1], ecx ; FileHandle
.text:00409EAE                 call    _write
.text:00409EB3                 cmp     eax, 180h
.text:00409EB8                 jz      short loc_409F16
.text:00409EBA                 mov     ebp, [esp+1ECh+var_1D0]
.text:00409EBE                 test    ebp, ebp
.text:00409EC0                 js      short loc_409EF2
.text:00409EC2
.text:00409EC2 loc_409EC2:                             ; CODE XREF: sub_409D50+1C4↓j
.text:00409EC2                 xor     ebx, ebx
.text:00409EC4
.text:00409EC4 loc_409EC4:                             ; CODE XREF: sub_409D50+1D9↓j
.text:00409EC4                                         ; sub_409D50+296↓j
.text:00409EC4                 mov     [esp+1ECh+MaxCount], edi
.text:00409EC8                 mov     edi, FileHandle
.text:00409ECE                 mov     [esp+1ECh+var_1AC], 3
.text:00409ED5                 mov     [esp+1ECh+Str2], 9
.text:00409EDD                 mov     [esp+1ECh+Str1], edi
.text:00409EE0                 call    sub_40C0A0
.text:00409EE5
.text:00409EE5 loc_409EE5:                             ; CODE XREF: sub_409D50+F8↑j
.text:00409EE5                 add     esp, 1DCh
.text:00409EEB                 mov     eax, ebx
.text:00409EED                 pop     ebx
.text:00409EEE                 pop     esi
.text:00409EEF                 pop     edi
.text:00409EF0                 pop     ebp
.text:00409EF1                 retn
.text:00409EF2 ; ---------------------------------------------------------------------------
.text:00409EF2
.text:00409EF2 loc_409EF2:                             ; CODE XREF: sub_409D50+170↑j
.text:00409EF2                 mov     ebx, ds:dword_412360
.text:00409EF8                 mov     esi, ds:dword_412364
.text:00409EFE                 mov     edx, FileHandle
.text:00409F04                 mov     [esp+1ECh+Str2], ebx
.text:00409F08                 mov     [esp+1ECh+MaxCount], esi
.text:00409F0C                 mov     [esp+1ECh+Str1], edx
.text:00409F0F                 call    sub_40BED0
.text:00409F14                 jmp     short loc_409EC2
.text:00409F16 ; ---------------------------------------------------------------------------
.text:00409F16
.text:00409F16 loc_409F16:                             ; CODE XREF: sub_409D50+168↑j
.text:00409F16                 add     ds:dword_412360, 180h
.text:00409F20                 mov     ebx, ebp
.text:00409F22                 adc     ds:dword_412364, 0
.text:00409F29                 jmp     short loc_409EC4
.text:00409F29 ; ---------------------------------------------------------------------------
.text:00409F2B                 align 10h
.text:00409F30
.text:00409F30 loc_409F30:                             ; CODE XREF: sub_409D50+104↑j
.text:00409F30                 mov     [esp+1ECh+Origin], 2 ; Origin
.text:00409F38                 mov     ecx, FileHandle
.text:00409F3E                 mov     [esp+1ECh+Str2], 0 ; Offset
.text:00409F46                 mov     [esp+1ECh+MaxCount], 0
.text:00409F4E                 mov     [esp+1ECh+Str1], ecx ; FileHandle
.text:00409F51                 call    _lseeki64
.text:00409F56                 mov     ds:dword_412360, eax
.text:00409F5B                 mov     esi, eax
.text:00409F5D                 mov     ebx, eax
.text:00409F5F                 mov     [esp+1ECh+MaxCount], 180h
.text:00409F67                 sar     esi, 1Fh
.text:00409F6A                 mov     ds:dword_412364, esi
.text:00409F70                 mov     [esp+1ECh+Origin], 0
.text:00409F78                 mov     [esp+1ECh+Str1], eax
.text:00409F7B                 mov     [esp+1ECh+Str2], esi
.text:00409F7F                 call    sub_40F5E0
.text:00409F84                 mov     ecx, edx
.text:00409F86                 or      ecx, eax
.text:00409F88                 jz      loc_409E99
.text:00409F8E                 sub     ebx, eax
.text:00409F90                 mov     ecx, ebx
.text:00409F92                 sbb     esi, edx
.text:00409F94                 xor     ebx, ebx
.text:00409F96                 mov     ds:dword_412364, esi
.text:00409F9C                 mov     [esp+1ECh+MaxCount], esi
.text:00409FA0                 mov     esi, FileHandle
.text:00409FA6                 mov     ds:dword_412360, ecx
.text:00409FAC                 mov     [esp+1ECh+Str2], ecx
.text:00409FB0                 mov     [esp+1ECh+Str1], esi
.text:00409FB3                 call    sub_40BED0
.text:00409FB8                 mov     [esp+1ECh+Origin], 2 ; Origin
.text:00409FC0                 mov     edx, FileHandle
.text:00409FC6                 mov     [esp+1ECh+Str2], 0 ; Offset
.text:00409FCE                 mov     [esp+1ECh+MaxCount], 0
.text:00409FD6                 mov     [esp+1ECh+Str1], edx ; FileHandle
.text:00409FD9                 call    _lseeki64
.text:00409FDE                 test    eax, eax
.text:00409FE0                 jns     loc_409E99
.text:00409FE6                 jmp     loc_409EC4
.text:00409FE6 ; ---------------------------------------------------------------------------
.text:00409FEB                 align 10h
.text:00409FF0
.text:00409FF0 loc_409FF0:                             ; CODE XREF: sub_409D50+2C↑j
.text:00409FF0                                         ; sub_409D50+54↑j ...
.text:00409FF0                 mov     [esp+1ECh+Str1], ebp ; int
.text:00409FF3                 lea     edi, [esp+1ECh+var_19C]
.text:00409FF7                 mov     [esp+1ECh+Str2], edi ; void *
.text:00409FFB                 call    sub_40A2E0
.text:0040A000                 mov     [esp+1ECh+var_1D0], eax
.text:0040A004                 mov     ebx, FileHandle
.text:0040A00A                 jmp     loc_409E10
.text:0040A00F ; ---------------------------------------------------------------------------
.text:0040A00F
.text:0040A00F loc_40A00F:                             ; CODE XREF: sub_409D50+74↑j
.text:0040A00F                 mov     [esp+1ECh+MaxCount], 4
.text:0040A017                 lea     edx, [ebp+28h]
.text:0040A01A                 mov     [esp+1ECh+Str2], edx
.text:0040A01E                 mov     [esp+1ECh+Str1], offset byte_412398
.text:0040A025                 jmp     loc_409DE0
.text:0040A025 ; ---------------------------------------------------------------------------
.text:0040A02A                 align 10h
.text:0040A030
.text:0040A030 loc_40A030:                             ; CODE XREF: sub_409D50+47↑j
.text:0040A030                 lea     esi, [edx-1]
.text:0040A033                 cmp     si, 1
.text:0040A037                 jbe     loc_409E00
.text:0040A03D                 cmp     dx, 4
.text:0040A041                 jz      loc_409E00
.text:0040A047                 cmp     dx, 3
.text:0040A04B                 jnz     loc_409D9D
.text:0040A051                 jmp     loc_409E00
.text:0040A056 ; ---------------------------------------------------------------------------
.text:0040A056
.text:0040A056 loc_40A056:                             ; CODE XREF: sub_409D50+34↑j
.text:0040A056                 cmp     eax, 0
.text:0040A059                 jbe     short loc_409FF0
.text:0040A05B                 jmp     loc_409D8A
.text:0040A060 ; ---------------------------------------------------------------------------
.text:0040A060
.text:0040A060 loc_40A060:                             ; CODE XREF: sub_409D50+19↑j
.text:0040A060                 mov     [esp+1ECh+MaxCount], 160h
.text:0040A068                 mov     [esp+1ECh+Str2], offset aLibc05SrcLogin ; "../../libc-0.5-src/login/utmp_file.c"
.text:0040A070                 mov     [esp+1ECh+Str1], offset aFileFd0 ; "file_fd >= 0"
.text:0040A077                 call    _assert
.text:0040A077 sub_409D50      endp
.text:0040A077
.text:0040A077 ; ---------------------------------------------------------------------------
.text:0040A07C                 align 10h
.text:0040A080
.text:0040A080 ; =============== S U B R O U T I N E =======================================
.text:0040A080
.text:0040A080
.text:0040A080 ; int __cdecl sub_40A080(char *, void *Buf)
.text:0040A080 sub_40A080      proc near               ; DATA XREF: .data:004110CC↓o
.text:0040A080
.text:0040A080 FileName        = dword ptr -6Ch
.text:0040A080 OpenFlag        = dword ptr -68h
.text:0040A080 MaxCharCount    = dword ptr -64h
.text:0040A080 Origin          = dword ptr -60h
.text:0040A080 var_50          = dword ptr -50h
.text:0040A080 var_2C          = word ptr -2Ch
.text:0040A080 var_2A          = word ptr -2Ah
.text:0040A080 arg_0           = dword ptr  4
.text:0040A080 Buf             = dword ptr  8
.text:0040A080
.text:0040A080                 push    ebp
.text:0040A081                 push    edi
.text:0040A082                 push    esi
.text:0040A083                 push    ebx
.text:0040A084                 sub     esp, 5Ch
.text:0040A087                 mov     edx, [esp+6Ch+arg_0]
.text:0040A08B                 mov     [esp+6Ch+var_50], 0FFFFFFFFh
.text:0040A093                 mov     [esp+6Ch+OpenFlag], 1 ; OpenFlag
.text:0040A09B                 mov     [esp+6Ch+FileName], edx ; FileName
.text:0040A09E                 call    _open
.text:0040A0A3                 mov     ebp, eax
.text:0040A0A5                 test    ebp, ebp
.text:0040A0A7                 mov     eax, 0FFFFFFFFh
.text:0040A0AC                 js      loc_40A1BD
.text:0040A0B2                 cld
.text:0040A0B3                 xor     eax, eax
.text:0040A0B5                 lea     edi, [esp+6Ch+var_2C]
.text:0040A0B9                 mov     ecx, 4
.text:0040A0BE                 rep stosd
.text:0040A0C0                 mov     [esp+6Ch+var_2C], 2
.text:0040A0C7                 lea     edi, [esp+6Ch+var_2C]
.text:0040A0CB                 mov     [esp+6Ch+var_2A], 0
.text:0040A0D2                 mov     [esp+6Ch+MaxCharCount], edi
.text:0040A0D6                 mov     [esp+6Ch+OpenFlag], 9
.text:0040A0DE                 mov     [esp+6Ch+FileName], ebp
.text:0040A0E1                 call    sub_40C0A0
.text:0040A0E6                 test    eax, eax
.text:0040A0E8                 js      loc_40A1B1
.text:0040A0EE                 mov     [esp+6Ch+Origin], 2 ; Origin
.text:0040A0F6                 mov     [esp+6Ch+OpenFlag], 0 ; Offset
.text:0040A0FE                 mov     [esp+6Ch+MaxCharCount], 0
.text:0040A106                 mov     [esp+6Ch+FileName], ebp ; FileHandle
.text:0040A109                 call    _lseeki64
.text:0040A10E                 mov     [esp+6Ch+FileName], eax
.text:0040A111                 mov     esi, eax
.text:0040A113                 mov     ebx, eax
.text:0040A115                 mov     [esp+6Ch+MaxCharCount], 180h
.text:0040A11D                 sar     esi, 1Fh
.text:0040A120                 mov     [esp+6Ch+Origin], 0
.text:0040A128                 mov     [esp+6Ch+OpenFlag], esi
.text:0040A12C                 call    sub_40F5E0
.text:0040A131                 mov     ecx, edx
.text:0040A133                 or      ecx, eax
.text:0040A135                 jz      short loc_40A16F
.text:0040A137                 mov     [esp+6Ch+FileName], ebp
.text:0040A13A                 sub     ebx, eax
.text:0040A13C                 sbb     esi, edx
.text:0040A13E                 mov     [esp+6Ch+OpenFlag], ebx
.text:0040A142                 mov     [esp+6Ch+MaxCharCount], esi
.text:0040A146                 call    sub_40BED0
.text:0040A14B                 mov     [esp+6Ch+Origin], 2 ; Origin
.text:0040A153                 mov     [esp+6Ch+OpenFlag], 0 ; Offset
.text:0040A15B                 mov     [esp+6Ch+MaxCharCount], 0
.text:0040A163                 mov     [esp+6Ch+FileName], ebp ; FileHandle
.text:0040A166                 call    _lseeki64
.text:0040A16B                 test    eax, eax
.text:0040A16D                 js      short loc_40A196
.text:0040A16F
.text:0040A16F loc_40A16F:                             ; CODE XREF: sub_40A080+B5↑j
.text:0040A16F                 mov     [esp+6Ch+MaxCharCount], 180h ; MaxCharCount
.text:0040A177                 mov     edx, [esp+6Ch+Buf]
.text:0040A17B                 mov     [esp+6Ch+FileName], ebp ; FileHandle
.text:0040A17E                 mov     [esp+6Ch+OpenFlag], edx ; Buf
.text:0040A182                 call    _write
.text:0040A187                 cmp     eax, 180h
.text:0040A18C                 jnz     short loc_40A1C5
.text:0040A18E                 mov     [esp+6Ch+var_50], 0
.text:0040A196
.text:0040A196 loc_40A196:                             ; CODE XREF: sub_40A080+ED↑j
.text:0040A196                                         ; sub_40A080+155↓j
.text:0040A196                 mov     [esp+6Ch+var_2C], 3
.text:0040A19D                 mov     [esp+6Ch+MaxCharCount], edi
.text:0040A1A1                 mov     [esp+6Ch+OpenFlag], 9
.text:0040A1A9                 mov     [esp+6Ch+FileName], ebp
.text:0040A1AC                 call    sub_40C0A0
.text:0040A1B1
.text:0040A1B1 loc_40A1B1:                             ; CODE XREF: sub_40A080+68↑j
.text:0040A1B1                 mov     [esp+6Ch+FileName], ebp ; FileHandle
.text:0040A1B4                 call    _close
.text:0040A1B9                 mov     eax, [esp+6Ch+var_50]
.text:0040A1BD
.text:0040A1BD loc_40A1BD:                             ; CODE XREF: sub_40A080+2C↑j
.text:0040A1BD                 add     esp, 5Ch
.text:0040A1C0                 pop     ebx
.text:0040A1C1                 pop     esi
.text:0040A1C2                 pop     edi
.text:0040A1C3                 pop     ebp
.text:0040A1C4                 retn
.text:0040A1C5 ; ---------------------------------------------------------------------------
.text:0040A1C5
.text:0040A1C5 loc_40A1C5:                             ; CODE XREF: sub_40A080+10C↑j
.text:0040A1C5                 mov     [esp+6Ch+OpenFlag], ebx
.text:0040A1C9                 mov     [esp+6Ch+MaxCharCount], esi
.text:0040A1CD                 mov     [esp+6Ch+FileName], ebp
.text:0040A1D0                 call    sub_40BED0
.text:0040A1D5                 jmp     short loc_40A196
.text:0040A1D5 sub_40A080      endp
.text:0040A1D5
.text:0040A1D5 ; ---------------------------------------------------------------------------
.text:0040A1D7                 align 10h
.text:0040A1E0
.text:0040A1E0 ; =============== S U B R O U T I N E =======================================
.text:0040A1E0
.text:0040A1E0
.text:0040A1E0 sub_40A1E0      proc near               ; CODE XREF: sub_4070D0+33↑p
.text:0040A1E0                                         ; DATA XREF: .data:off_4110BC↓o
.text:0040A1E0
.text:0040A1E0 var_1C          = dword ptr -1Ch
.text:0040A1E0 var_18          = dword ptr -18h
.text:0040A1E0 var_14          = dword ptr -14h
.text:0040A1E0 var_10          = dword ptr -10h
.text:0040A1E0 var_C           = dword ptr -0Ch
.text:0040A1E0 var_8           = dword ptr -8
.text:0040A1E0 var_4           = dword ptr -4
.text:0040A1E0 arg_0           = dword ptr  4
.text:0040A1E0 arg_4           = dword ptr  8
.text:0040A1E0 arg_8           = dword ptr  0Ch
.text:0040A1E0
.text:0040A1E0                 sub     esp, 1Ch
.text:0040A1E3                 mov     edx, FileHandle
.text:0040A1E9                 mov     [esp+1Ch+var_10], ebx
.text:0040A1ED                 mov     ebx, [esp+1Ch+arg_4]
.text:0040A1F1                 test    edx, edx
.text:0040A1F3                 mov     [esp+1Ch+var_4], ebp
.text:0040A1F7                 mov     ebp, [esp+1Ch+arg_8]
.text:0040A1FB                 mov     [esp+1Ch+var_C], esi
.text:0040A1FF                 mov     [esp+1Ch+var_8], edi
.text:0040A203                 js      short loc_40A282
.text:0040A205                 mov     ecx, ds:dword_412360
.text:0040A20B                 mov     eax, ds:dword_412364
.text:0040A210                 and     ecx, eax
.text:0040A212                 inc     ecx
.text:0040A213                 jz      short loc_40A274
.text:0040A215                 mov     [esp+1Ch+var_18], offset dword_412370 ; void *
.text:0040A21D                 mov     edx, [esp+1Ch+arg_0]
.text:0040A221                 mov     [esp+1Ch+var_1C], edx ; int
.text:0040A224                 call    sub_40A2E0
.text:0040A229                 test    eax, eax
.text:0040A22B                 js      short loc_40A274
.text:0040A22D                 test    bl, 4
.text:0040A230                 mov     edi, ebx
.text:0040A232                 mov     esi, offset dword_412370
.text:0040A237                 mov     eax, 180h
.text:0040A23C                 jz      short loc_40A253
.text:0040A23E                 mov     esi, ds:dword_412370
.text:0040A244                 lea     edi, [ebx+4]
.text:0040A247                 mov     eax, 17Ch
.text:0040A24C                 mov     [ebx], esi
.text:0040A24E                 mov     esi, offset unk_412374
.text:0040A253
.text:0040A253 loc_40A253:                             ; CODE XREF: sub_40A1E0+5C↑j
.text:0040A253                 cld
.text:0040A254                 mov     ecx, eax
.text:0040A256                 shr     ecx, 2
.text:0040A259                 rep movsd
.text:0040A25B                 mov     [ebp+0], ebx
.text:0040A25E                 xor     eax, eax
.text:0040A260
.text:0040A260 loc_40A260:                             ; CODE XREF: sub_40A1E0+A0↓j
.text:0040A260                 mov     ebx, [esp+1Ch+var_10]
.text:0040A264                 mov     esi, [esp+1Ch+var_C]
.text:0040A268                 mov     edi, [esp+1Ch+var_8]
.text:0040A26C                 mov     ebp, [esp+1Ch+var_4]
.text:0040A270                 add     esp, 1Ch
.text:0040A273                 retn
.text:0040A274 ; ---------------------------------------------------------------------------
.text:0040A274
.text:0040A274 loc_40A274:                             ; CODE XREF: sub_40A1E0+33↑j
.text:0040A274                                         ; sub_40A1E0+4B↑j
.text:0040A274                 mov     dword ptr [ebp+0], 0
.text:0040A27B                 mov     eax, 0FFFFFFFFh
.text:0040A280                 jmp     short loc_40A260
.text:0040A282 ; ---------------------------------------------------------------------------
.text:0040A282
.text:0040A282 loc_40A282:                             ; CODE XREF: sub_40A1E0+23↑j
.text:0040A282                 mov     [esp+1Ch+var_14], 10Eh
.text:0040A28A                 mov     [esp+1Ch+var_18], offset aLibc05SrcLogin ; "../../libc-0.5-src/login/utmp_file.c"
.text:0040A292                 mov     [esp+1Ch+var_1C], offset aFileFd0 ; "file_fd >= 0"
.text:0040A299                 call    _assert
.text:0040A299 sub_40A1E0      endp
.text:0040A299
.text:0040A299 ; ---------------------------------------------------------------------------
.text:0040A29E                 align 10h
.text:0040A2A0
.text:0040A2A0 ; =============== S U B R O U T I N E =======================================
.text:0040A2A0
.text:0040A2A0
.text:0040A2A0 sub_40A2A0      proc near               ; DATA XREF: .data:004110C8↓o
.text:0040A2A0
.text:0040A2A0 FileHandle      = dword ptr -0Ch
.text:0040A2A0 var_8           = dword ptr -8
.text:0040A2A0 var_4           = dword ptr -4
.text:0040A2A0
.text:0040A2A0                 sub     esp, 0Ch
.text:0040A2A3                 mov     eax, FileHandle
.text:0040A2A8                 test    eax, eax
.text:0040A2AA                 js      short loc_40A2C3
.text:0040A2AC                 mov     [esp+0Ch+FileHandle], eax ; FileHandle
.text:0040A2AF                 call    _close
.text:0040A2B4                 mov     edx, 0FFFFFFFFh
.text:0040A2B9                 mov     FileHandle, edx
.text:0040A2BF                 add     esp, 0Ch
.text:0040A2C2                 retn
.text:0040A2C3 ; ---------------------------------------------------------------------------
.text:0040A2C3
.text:0040A2C3 loc_40A2C3:                             ; CODE XREF: sub_40A2A0+A↑j
.text:0040A2C3                 mov     [esp+0Ch+var_4], 1A8h
.text:0040A2CB                 mov     [esp+0Ch+var_8], offset aLibc05SrcLogin ; "../../libc-0.5-src/login/utmp_file.c"
.text:0040A2D3                 mov     [esp+0Ch+FileHandle], offset aFileFd0 ; "file_fd >= 0"
.text:0040A2DA                 call    _assert
.text:0040A2DA sub_40A2A0      endp
.text:0040A2DA
.text:0040A2DA ; ---------------------------------------------------------------------------
.text:0040A2DF                 align 10h
.text:0040A2E0
.text:0040A2E0 ; =============== S U B R O U T I N E =======================================
.text:0040A2E0
.text:0040A2E0
.text:0040A2E0 ; int __cdecl sub_40A2E0(int, void *)
.text:0040A2E0 sub_40A2E0      proc near               ; CODE XREF: sub_409D50+2AB↑p
.text:0040A2E0                                         ; sub_40A1E0+44↑p
.text:0040A2E0
.text:0040A2E0 FileHandle      = dword ptr -5Ch
.text:0040A2E0 DstBuf          = dword ptr -58h
.text:0040A2E0 MaxCharCount    = dword ptr -54h
.text:0040A2E0 var_2C          = word ptr -2Ch
.text:0040A2E0 var_2A          = word ptr -2Ah
.text:0040A2E0 arg_0           = dword ptr  4
.text:0040A2E0 arg_4           = dword ptr  8
.text:0040A2E0
.text:0040A2E0                 push    ebp
.text:0040A2E1                 xor     eax, eax
.text:0040A2E3                 mov     ecx, 4
.text:0040A2E8                 push    edi
.text:0040A2E9                 mov     ebp, 0FFFFFFFFh
.text:0040A2EE                 push    esi
.text:0040A2EF                 push    ebx
.text:0040A2F0                 sub     esp, 4Ch
.text:0040A2F3                 lea     edi, [esp+5Ch+var_2C]
.text:0040A2F7                 cld
.text:0040A2F8                 mov     esi, [esp+5Ch+arg_0]
.text:0040A2FC                 mov     ebx, [esp+5Ch+arg_4]
.text:0040A300                 rep stosd
.text:0040A302                 mov     [esp+5Ch+var_2C], 1
.text:0040A309                 mov     edx, FileHandle
.text:0040A30F                 lea     edi, [esp+5Ch+var_2C]
.text:0040A313                 mov     [esp+5Ch+var_2A], 0
.text:0040A31A                 mov     [esp+5Ch+MaxCharCount], edi
.text:0040A31E                 mov     [esp+5Ch+DstBuf], 9
.text:0040A326                 mov     [esp+5Ch+FileHandle], edx
.text:0040A329                 call    sub_40C0A0
.text:0040A32E                 test    eax, eax
.text:0040A330                 js      loc_40A3FB
.text:0040A336                 movzx   edx, word ptr [esi]
.text:0040A339                 lea     ecx, [edx-1]
.text:0040A33C                 cmp     cx, 1
.text:0040A340                 jbe     loc_40A440
.text:0040A346                 cmp     dx, 4
.text:0040A34A                 jz      loc_40A440
.text:0040A350                 cmp     dx, 3
.text:0040A354                 jz      loc_40A440
.text:0040A35A                 lea     esi, [esi+0]
.text:0040A360
.text:0040A360 loc_40A360:                             ; CODE XREF: sub_40A2E0+C0↓j
.text:0040A360                                         ; sub_40A2E0+CC↓j ...
.text:0040A360                 mov     [esp+5Ch+MaxCharCount], 180h ; MaxCharCount
.text:0040A368                 mov     edx, FileHandle
.text:0040A36E                 mov     [esp+5Ch+DstBuf], ebx ; DstBuf
.text:0040A372                 mov     [esp+5Ch+FileHandle], edx ; FileHandle
.text:0040A375                 call    _read
.text:0040A37A                 cmp     eax, 180h
.text:0040A37F                 jnz     loc_40A419
.text:0040A385                 movzx   ecx, word ptr [ebx]
.text:0040A388                 add     ds:dword_412360, 180h
.text:0040A392                 adc     ds:dword_412364, 0
.text:0040A399                 sub     ecx, 5
.text:0040A39C                 cmp     cx, 3
.text:0040A3A0                 ja      short loc_40A360
.text:0040A3A2                 movzx   edx, word ptr [esi]
.text:0040A3A5                 sub     edx, 5
.text:0040A3A8                 cmp     dx, 3
.text:0040A3AC                 ja      short loc_40A360
.text:0040A3AE                 cmp     byte ptr [ebx+28h], 0
.text:0040A3B2                 jz      short loc_40A3BA
.text:0040A3B4                 cmp     byte ptr [esi+28h], 0
.text:0040A3B8                 jnz     short loc_40A405
.text:0040A3BA
.text:0040A3BA loc_40A3BA:                             ; CODE XREF: sub_40A2E0+D2↑j
.text:0040A3BA                 mov     [esp+5Ch+MaxCharCount], 20h ; ' ' ; MaxCount
.text:0040A3C2                 lea     edx, [esi+8]
.text:0040A3C5                 lea     eax, [ebx+8]
.text:0040A3C8                 mov     [esp+5Ch+DstBuf], edx ; Str2
.text:0040A3CC
.text:0040A3CC loc_40A3CC:                             ; CODE XREF: sub_40A2E0+137↓j
.text:0040A3CC                 mov     [esp+5Ch+FileHandle], eax ; Str1
.text:0040A3CF                 call    strncmp
.text:0040A3D4                 test    eax, eax
.text:0040A3D6                 jnz     short loc_40A360
.text:0040A3D8
.text:0040A3D8 loc_40A3D8:                             ; CODE XREF: sub_40A2E0+19A↓j
.text:0040A3D8                 xor     ebp, ebp
.text:0040A3DA
.text:0040A3DA loc_40A3DA:                             ; CODE XREF: sub_40A2E0+159↓j
.text:0040A3DA                 mov     [esp+5Ch+var_2C], 3
.text:0040A3E1                 mov     esi, FileHandle
.text:0040A3E7                 mov     [esp+5Ch+MaxCharCount], edi
.text:0040A3EB                 mov     [esp+5Ch+DstBuf], 9
.text:0040A3F3                 mov     [esp+5Ch+FileHandle], esi
.text:0040A3F6                 call    sub_40C0A0
.text:0040A3FB
.text:0040A3FB loc_40A3FB:                             ; CODE XREF: sub_40A2E0+50↑j
.text:0040A3FB                 add     esp, 4Ch
.text:0040A3FE                 mov     eax, ebp
.text:0040A400                 pop     ebx
.text:0040A401                 pop     esi
.text:0040A402                 pop     edi
.text:0040A403                 pop     ebp
.text:0040A404                 retn
.text:0040A405 ; ---------------------------------------------------------------------------
.text:0040A405
.text:0040A405 loc_40A405:                             ; CODE XREF: sub_40A2E0+D8↑j
.text:0040A405                 mov     [esp+5Ch+MaxCharCount], 4
.text:0040A40D                 lea     ecx, [esi+28h]
.text:0040A410                 lea     eax, [ebx+28h]
.text:0040A413                 mov     [esp+5Ch+DstBuf], ecx
.text:0040A417                 jmp     short loc_40A3CC
.text:0040A419 ; ---------------------------------------------------------------------------
.text:0040A419
.text:0040A419 loc_40A419:                             ; CODE XREF: sub_40A2E0+9F↑j
.text:0040A419                                         ; sub_40A2E0+17F↓j
.text:0040A419                 call    _errno
.text:0040A41E                 mov     dword ptr [eax], 3
.text:0040A424                 mov     ebx, 0FFFFFFFFh
.text:0040A429                 mov     eax, 0FFFFFFFFh
.text:0040A42E                 mov     ds:dword_412360, eax
.text:0040A433                 mov     ds:dword_412364, ebx
.text:0040A439                 jmp     short loc_40A3DA
.text:0040A439 ; ---------------------------------------------------------------------------
.text:0040A43B                 align 10h
.text:0040A440
.text:0040A440 loc_40A440:                             ; CODE XREF: sub_40A2E0+60↑j
.text:0040A440                                         ; sub_40A2E0+6A↑j ...
.text:0040A440                 mov     [esp+5Ch+MaxCharCount], 180h ; MaxCharCount
.text:0040A448                 mov     edx, FileHandle
.text:0040A44E                 mov     [esp+5Ch+DstBuf], ebx ; DstBuf
.text:0040A452                 mov     [esp+5Ch+FileHandle], edx ; FileHandle
.text:0040A455                 call    _read
.text:0040A45A                 cmp     eax, 180h
.text:0040A45F                 jnz     short loc_40A419
.text:0040A461                 add     ds:dword_412360, 180h
.text:0040A46B                 movzx   ecx, word ptr [ebx]
.text:0040A46E                 adc     ds:dword_412364, 0
.text:0040A475                 cmp     [esi], cx
.text:0040A478                 jnz     short loc_40A440
.text:0040A47A                 jmp     loc_40A3D8
.text:0040A47A sub_40A2E0      endp
.text:0040A47A
.text:0040A47A ; ---------------------------------------------------------------------------
.text:0040A47F                 db 11h dup(90h)
.text:0040A490 aLuLuLu         db '%lu.%lu.%lu',0      ; DATA XREF: .text:0040A6AF↓o
.text:0040A49C aLu             db '%lu',0              ; DATA XREF: .text:0040A6BF↓o
.text:0040A4A0 asc_40A4A0      db ' ',0                ; DATA XREF: .text:loc_40A7A8↓o
.text:0040A4A2                 align 10h
.text:0040A4B0 aServer40Enterp db 'Server 4.0, Enterprise Edition ',0
.text:0040A4B0                                         ; DATA XREF: .text:0040A7DF↓o
.text:0040A4D0 aServer40       db 'Server 4.0 ',0      ; DATA XREF: .text:loc_40A7ED↓o
.text:0040A4DC aServer         db ' Server',0          ; DATA XREF: .text:0040A816↓o
.text:0040A4DC                                         ; .text:loc_40A98E↓o
.text:0040A4E4 aAdvancedServer db ' Advanced Server',0 ; DATA XREF: .text:loc_40A828↓o
.text:0040A4F5 aDatacenterServ db ' Datacenter Server',0
.text:0040A4F5                                         ; DATA XREF: .text:loc_40A832↓o
.text:0040A508 aStandardEditio db ' Standard Edition',0
.text:0040A508                                         ; DATA XREF: .text:0040A85A↓o
.text:0040A51A aWebEdition     db ' Web Edition',0     ; DATA XREF: .text:loc_40A864↓o
.text:0040A527 aEnterpriseEdit db ' Enterprise Edition',0
.text:0040A527                                         ; DATA XREF: .text:loc_40A86E↓o
.text:0040A53B aDatacenterEdit db ' Datacenter Edition',0
.text:0040A53B                                         ; DATA XREF: .text:loc_40A878↓o
.text:0040A54F aHomeEdition    db ' Home Edition',0    ; DATA XREF: .text:0040A88B↓o
.text:0040A55D aProfessional   db ' Professional',0    ; DATA XREF: .text:loc_40A895↓o
.text:0040A55D                                         ; .text:loc_40A9A0↓o
.text:0040A56B                 align 10h
.text:0040A570 aSystemCurrentc db 'SYSTEM\CurrentControlSet\Control\ProductOptions',0
.text:0040A570                                         ; DATA XREF: .text:0040A8C2↓o
.text:0040A5A0 aProducttype    db 'ProductType',0      ; DATA XREF: .text:0040A909↓o
.text:0040A5AC aWinnt          db 'WINNT',0            ; DATA XREF: .text:0040A944↓o
.text:0040A5B2 aLanmannt       db 'LANMANNT',0         ; DATA XREF: .text:0040A95B↓o
.text:0040A5BB aServernt       db 'SERVERNT',0         ; DATA XREF: .text:0040A972↓o
.text:0040A5C4                 align 10h
.text:0040A5D0 aMicrosoftWindo db 'Microsoft Windows 3.1 with Win32s ',0
.text:0040A5D0                                         ; DATA XREF: .text:0040AAE7↓o
.text:0040A5F3                 db 1Dh dup(90h)
.text:0040A610 aMicrosoftWindo_0 db 'Microsoft Windows Millennium Edition ',0
.text:0040A610                                         ; DATA XREF: .text:0040AB46↓o
.text:0040A636 ; ---------------------------------------------------------------------------
.text:0040A636
.text:0040A636 loc_40A636:                             ; DATA XREF: .text:loc_40ABB1↓o
.text:0040A636                 and     [ebx+45h], dl
.text:0040A639                 add     [eax], ah
.text:0040A63B                 push    ebx
.text:0040A63C                 push    eax
.text:0040A63D                 xor     [eax], eax
.text:0040A63F
.text:0040A63F loc_40A63F:                             ; DATA XREF: .text:loc_40AC2B↓o
.text:0040A63F                 and     [edi+53h], cl
.text:0040A642                 push    edx
.text:0040A643                 xor     al, [eax]
.text:0040A645                 lea     esi, [esi+0]
.text:0040A649                 lea     edi, [edi+0]
.text:0040A650                 push    edi
.text:0040A651                 push    esi
.text:0040A652                 push    ebx
.text:0040A653                 sub     esp, 130h
.text:0040A659                 mov     ebx, [esp+140h]
.text:0040A660                 call    sub_40AD60
.text:0040A665                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0040A66A                 cmp     eax, 1
.text:0040A66D                 jz      loc_40AB10
.text:0040A673                 cmp     eax, 1
.text:0040A676                 jb      loc_40AAE6
.text:0040A67C                 cmp     eax, 2
.text:0040A67F                 jz      loc_40A730
.text:0040A685                 cmp     eax, 3
.text:0040A688                 jz      short loc_40A6EF
.text:0040A68A                 lea     esi, [esi+0]
.text:0040A690
.text:0040A690 loc_40A690:                             ; CODE XREF: .text:0040A725↓j
.text:0040A690                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:0040A696                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0040A69C
.text:0040A69C loc_40A69C:                             ; CODE XREF: .text:0040AB2F↓j
.text:0040A69C                 mov     [esp+10h], edx
.text:0040A6A0                 mov     ebx, [esp+144h]
.text:0040A6A7                 mov     [esp+0Ch], ecx
.text:0040A6AB                 mov     [esp+8], eax
.text:0040A6AF                 mov     dword ptr [esp+4], offset aLuLuLu ; "%lu.%lu.%lu"
.text:0040A6B7                 mov     [esp], ebx
.text:0040A6BA                 call    sprintf
.text:0040A6BF                 mov     dword ptr [esp+4], offset aLu ; "%lu"
.text:0040A6C7                 mov     edi, ds:VersionInformation.dwBuildNumber
.text:0040A6CD                 mov     ecx, [esp+148h]
.text:0040A6D4                 mov     [esp+8], edi
.text:0040A6D8                 mov     [esp], ecx
.text:0040A6DB                 call    sprintf
.text:0040A6E0                 mov     eax, 1
.text:0040A6E5
.text:0040A6E5 loc_40A6E5:                             ; CODE XREF: .text:0040A8DF↓j
.text:0040A6E5                                         ; .text:0040A92C↓j
.text:0040A6E5                 add     esp, 130h
.text:0040A6EB                 pop     ebx
.text:0040A6EC                 pop     esi
.text:0040A6ED                 pop     edi
.text:0040A6EE                 retn
.text:0040A6EF ; ---------------------------------------------------------------------------
.text:0040A6EF
.text:0040A6EF loc_40A6EF:                             ; CODE XREF: .text:0040A688↑j
.text:0040A6EF                 mov     dword ptr [ebx], 7263694Dh
.text:0040A6F5                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040A6FC                 mov     dword ptr [ebx+8], 69572074h
.text:0040A703                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040A70A                 mov     dword ptr [ebx+10h], 45432073h
.text:0040A711                 mov     word ptr [ebx+14h], 20h ; ' '
.text:0040A717                 mov     esi, esi
.text:0040A719                 lea     edi, [edi+0]
.text:0040A720
.text:0040A720 loc_40A720:                             ; CODE XREF: .text:0040A7C8↓j
.text:0040A720                                         ; .text:0040AB09↓j ...
.text:0040A720                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0040A725                 jmp     loc_40A690
.text:0040A725 ; ---------------------------------------------------------------------------
.text:0040A72A                 align 10h
.text:0040A730
.text:0040A730 loc_40A730:                             ; CODE XREF: .text:0040A67F↑j
.text:0040A730                 mov     edx, ds:VersionInformation.dwMajorVersion
.text:0040A736                 cmp     edx, 3
.text:0040A739                 mov     eax, edx
.text:0040A73B                 jz      loc_40AAA5
.text:0040A741
.text:0040A741 loc_40A741:                             ; CODE XREF: .text:0040AAAC↓j
.text:0040A741                 cmp     eax, 4
.text:0040A744                 jz      loc_40AA65
.text:0040A74A
.text:0040A74A loc_40A74A:                             ; CODE XREF: .text:0040AA6D↓j
.text:0040A74A                 cmp     eax, 4
.text:0040A74D                 ja      loc_40A9B2
.text:0040A753                 mov     ecx, ds:VersionInformation.dwMinorVersion
.text:0040A759                 test    ecx, ecx
.text:0040A75B                 jnz     loc_40A9B2
.text:0040A761                 mov     dword ptr [ebx], 7263694Dh
.text:0040A767                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040A76E                 mov     dword ptr [ebx+8], 69572074h
.text:0040A775                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040A77C                 mov     dword ptr [ebx+10h], 544E2073h
.text:0040A783
.text:0040A783 loc_40A783:                             ; CODE XREF: .text:0040AA25↓j
.text:0040A783                 mov     byte ptr [ebx+14h], 0
.text:0040A787
.text:0040A787 loc_40A787:                             ; CODE XREF: .text:0040A9B5↓j
.text:0040A787                                         ; .text:0040A9CC↓j ...
.text:0040A787                 mov     esi, dword_4110D0
.text:0040A78D                 test    esi, esi
.text:0040A78F                 jz      loc_40A8A2
.text:0040A795                 movzx   eax, ds:byte_41259A
.text:0040A79C                 cmp     al, 1
.text:0040A79E                 jz      loc_40A882
.text:0040A7A4                 cmp     al, 3
.text:0040A7A6                 jz      short loc_40A7CD
.text:0040A7A8
.text:0040A7A8 loc_40A7A8:                             ; CODE XREF: .text:0040A7EB↓j
.text:0040A7A8                                         ; .text:0040A826↓j ...
.text:0040A7A8                 mov     dword ptr [esp+4], offset asc_40A4A0 ; " "
.text:0040A7B0                 mov     [esp], ebx
.text:0040A7B3                 call    strcat
.text:0040A7B8                 mov     dword ptr [esp+4], offset VersionInformation.szCSDVersion
.text:0040A7C0                 mov     [esp], ebx
.text:0040A7C3                 call    strcat
.text:0040A7C8                 jmp     loc_40A720
.text:0040A7CD ; ---------------------------------------------------------------------------
.text:0040A7CD
.text:0040A7CD loc_40A7CD:                             ; CODE XREF: .text:0040A7A6↑j
.text:0040A7CD                 cmp     ds:VersionInformation.dwMajorVersion, 5
.text:0040A7D4                 jz      short loc_40A7F6
.text:0040A7D6
.text:0040A7D6 loc_40A7D6:                             ; CODE XREF: .text:0040A802↓j
.text:0040A7D6                 test    byte ptr ds:word_412598, 2
.text:0040A7DD                 jz      short loc_40A7ED
.text:0040A7DF                 mov     dword ptr [esp], offset aServer40Enterp ; "Server 4.0, Enterprise Edition "
.text:0040A7E6
.text:0040A7E6 loc_40A7E6:                             ; CODE XREF: .text:0040A7F4↓j
.text:0040A7E6                 call    printf
.text:0040A7EB                 jmp     short loc_40A7A8
.text:0040A7ED ; ---------------------------------------------------------------------------
.text:0040A7ED
.text:0040A7ED loc_40A7ED:                             ; CODE XREF: .text:0040A7DD↑j
.text:0040A7ED                 mov     dword ptr [esp], offset aServer40 ; "Server 4.0 "
.text:0040A7F4                 jmp     short loc_40A7E6
.text:0040A7F6 ; ---------------------------------------------------------------------------
.text:0040A7F6
.text:0040A7F6 loc_40A7F6:                             ; CODE XREF: .text:0040A7D4↑j
.text:0040A7F6                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0040A7FB                 cmp     eax, 2
.text:0040A7FE                 jz      short loc_40A840
.text:0040A800                 test    eax, eax
.text:0040A802                 jnz     short loc_40A7D6
.text:0040A804                 cmp     byte ptr ds:word_412598, 0
.text:0040A80B                 js      short loc_40A832
.text:0040A80D                 test    byte ptr ds:word_412598, 2
.text:0040A814                 jnz     short loc_40A828
.text:0040A816                 mov     dword ptr [esp+4], offset aServer ; " Server"
.text:0040A81E
.text:0040A81E loc_40A81E:                             ; CODE XREF: .text:0040A830↓j
.text:0040A81E                                         ; .text:0040A83A↓j ...
.text:0040A81E                 mov     [esp], ebx
.text:0040A821                 call    strcat
.text:0040A826                 jmp     short loc_40A7A8
.text:0040A828 ; ---------------------------------------------------------------------------
.text:0040A828
.text:0040A828 loc_40A828:                             ; CODE XREF: .text:0040A814↑j
.text:0040A828                                         ; .text:0040A989↓j
.text:0040A828                 mov     dword ptr [esp+4], offset aAdvancedServer ; " Advanced Server"
.text:0040A830                 jmp     short loc_40A81E
.text:0040A832 ; ---------------------------------------------------------------------------
.text:0040A832
.text:0040A832 loc_40A832:                             ; CODE XREF: .text:0040A80B↑j
.text:0040A832                 mov     dword ptr [esp+4], offset aDatacenterServ ; " Datacenter Server"
.text:0040A83A                 jmp     short loc_40A81E
.text:0040A83A ; ---------------------------------------------------------------------------
.text:0040A83C                 align 10h
.text:0040A840
.text:0040A840 loc_40A840:                             ; CODE XREF: .text:0040A7FE↑j
.text:0040A840                 cmp     byte ptr ds:word_412598, 0
.text:0040A847                 js      short loc_40A878
.text:0040A849                 movzx   eax, ds:word_412598
.text:0040A850                 test    al, 2
.text:0040A852                 jnz     short loc_40A86E
.text:0040A854                 cmp     ax, 400h
.text:0040A858                 jz      short loc_40A864
.text:0040A85A                 mov     dword ptr [esp+4], offset aStandardEditio ; " Standard Edition"
.text:0040A862                 jmp     short loc_40A81E
.text:0040A864 ; ---------------------------------------------------------------------------
.text:0040A864
.text:0040A864 loc_40A864:                             ; CODE XREF: .text:0040A858↑j
.text:0040A864                 mov     dword ptr [esp+4], offset aWebEdition ; " Web Edition"
.text:0040A86C                 jmp     short loc_40A81E
.text:0040A86E ; ---------------------------------------------------------------------------
.text:0040A86E
.text:0040A86E loc_40A86E:                             ; CODE XREF: .text:0040A852↑j
.text:0040A86E                 mov     dword ptr [esp+4], offset aEnterpriseEdit ; " Enterprise Edition"
.text:0040A876                 jmp     short loc_40A81E
.text:0040A878 ; ---------------------------------------------------------------------------
.text:0040A878
.text:0040A878 loc_40A878:                             ; CODE XREF: .text:0040A847↑j
.text:0040A878                 mov     dword ptr [esp+4], offset aDatacenterEdit ; " Datacenter Edition"
.text:0040A880                 jmp     short loc_40A81E
.text:0040A882 ; ---------------------------------------------------------------------------
.text:0040A882
.text:0040A882 loc_40A882:                             ; CODE XREF: .text:0040A79E↑j
.text:0040A882                 test    byte ptr ds:word_412598+1, 2
.text:0040A889                 jz      short loc_40A895
.text:0040A88B                 mov     dword ptr [esp+4], offset aHomeEdition ; " Home Edition"
.text:0040A893                 jmp     short loc_40A81E
.text:0040A895 ; ---------------------------------------------------------------------------
.text:0040A895
.text:0040A895 loc_40A895:                             ; CODE XREF: .text:0040A889↑j
.text:0040A895                 mov     dword ptr [esp+4], offset aProfessional ; " Professional"
.text:0040A89D                 jmp     loc_40A81E
.text:0040A8A2 ; ---------------------------------------------------------------------------
.text:0040A8A2
.text:0040A8A2 loc_40A8A2:                             ; CODE XREF: .text:0040A78F↑j
.text:0040A8A2                 mov     dword ptr [esp+28h], 0FFh
.text:0040A8AA                 lea     edx, [esp+2Ch]
.text:0040A8AE                 mov     [esp+10h], edx
.text:0040A8B2                 mov     dword ptr [esp+0Ch], 1
.text:0040A8BA                 mov     dword ptr [esp+8], 0
.text:0040A8C2                 mov     dword ptr [esp+4], offset aSystemCurrentc ; "SYSTEM\\CurrentControlSet\\Control\\Pro"...
.text:0040A8CA                 mov     dword ptr [esp], 80000002h
.text:0040A8D1                 call    RegOpenKeyExA
.text:0040A8D6                 mov     edi, eax
.text:0040A8D8                 sub     esp, 14h
.text:0040A8DB                 xor     eax, eax
.text:0040A8DD                 test    edi, edi
.text:0040A8DF                 jnz     loc_40A6E5
.text:0040A8E5                 mov     dword ptr [esp+0Ch], 0
.text:0040A8ED                 mov     edi, [esp+2Ch]
.text:0040A8F1                 lea     esi, [esp+28h]
.text:0040A8F5                 mov     [esp+14h], esi
.text:0040A8F9                 lea     esi, [esp+30h]
.text:0040A8FD                 mov     [esp+10h], esi
.text:0040A901                 mov     dword ptr [esp+8], 0
.text:0040A909                 mov     dword ptr [esp+4], offset aProducttype ; "ProductType"
.text:0040A911                 mov     [esp], edi
.text:0040A914                 call    RegQueryValueExA
.text:0040A919                 sub     esp, 18h
.text:0040A91C                 test    eax, eax
.text:0040A91E                 jnz     short loc_40A92A
.text:0040A920                 cmp     dword ptr [esp+28h], 0FFh
.text:0040A928                 jbe     short loc_40A931
.text:0040A92A
.text:0040A92A loc_40A92A:                             ; CODE XREF: .text:0040A91E↑j
.text:0040A92A                 xor     eax, eax
.text:0040A92C                 jmp     loc_40A6E5
.text:0040A931 ; ---------------------------------------------------------------------------
.text:0040A931
.text:0040A931 loc_40A931:                             ; CODE XREF: .text:0040A928↑j
.text:0040A931                 mov     edx, [esp+2Ch]
.text:0040A935                 mov     [esp], edx
.text:0040A938                 call    RegCloseKey
.text:0040A93D                 sub     esp, 4
.text:0040A940                 mov     [esp+4], esi
.text:0040A944                 mov     dword ptr [esp], offset aWinnt ; "WINNT"
.text:0040A94B                 call    lstrcmpiA
.text:0040A950                 sub     esp, 8
.text:0040A953                 test    eax, eax
.text:0040A955                 jz      short loc_40A9A0
.text:0040A957
.text:0040A957 loc_40A957:                             ; CODE XREF: .text:0040A9B0↓j
.text:0040A957                 mov     [esp+4], esi
.text:0040A95B                 mov     dword ptr [esp], offset aLanmannt ; "LANMANNT"
.text:0040A962                 call    lstrcmpiA
.text:0040A967                 sub     esp, 8
.text:0040A96A                 test    eax, eax
.text:0040A96C                 jz      short loc_40A98E
.text:0040A96E
.text:0040A96E loc_40A96E:                             ; CODE XREF: .text:0040A99E↓j
.text:0040A96E                 mov     [esp+4], esi
.text:0040A972                 mov     dword ptr [esp], offset aServernt ; "SERVERNT"
.text:0040A979                 call    lstrcmpiA
.text:0040A97E                 sub     esp, 8
.text:0040A981                 test    eax, eax
.text:0040A983                 jnz     loc_40A7A8
.text:0040A989                 jmp     loc_40A828
.text:0040A98E ; ---------------------------------------------------------------------------
.text:0040A98E
.text:0040A98E loc_40A98E:                             ; CODE XREF: .text:0040A96C↑j
.text:0040A98E                 mov     dword ptr [esp+4], offset aServer ; " Server"
.text:0040A996                 mov     [esp], ebx
.text:0040A999                 call    strcat
.text:0040A99E                 jmp     short loc_40A96E
.text:0040A9A0 ; ---------------------------------------------------------------------------
.text:0040A9A0
.text:0040A9A0 loc_40A9A0:                             ; CODE XREF: .text:0040A955↑j
.text:0040A9A0                 mov     dword ptr [esp+4], offset aProfessional ; " Professional"
.text:0040A9A8                 mov     [esp], ebx
.text:0040A9AB                 call    strcat
.text:0040A9B0                 jmp     short loc_40A957
.text:0040A9B2 ; ---------------------------------------------------------------------------
.text:0040A9B2
.text:0040A9B2 loc_40A9B2:                             ; CODE XREF: .text:0040A74D↑j
.text:0040A9B2                                         ; .text:0040A75B↑j
.text:0040A9B2                 cmp     eax, 5
.text:0040A9B5                 jnz     loc_40A787
.text:0040A9BB                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0040A9C0                 cmp     eax, 2
.text:0040A9C3                 jz      short loc_40AA2A
.text:0040A9C5                 cmp     eax, 1
.text:0040A9C8                 jz      short loc_40AA03
.text:0040A9CA                 test    eax, eax
.text:0040A9CC                 jnz     loc_40A787
.text:0040A9D2                 mov     dword ptr [ebx], 7263694Dh
.text:0040A9D8                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040A9DF                 mov     dword ptr [ebx+8], 69572074h
.text:0040A9E6                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040A9ED                 mov     dword ptr [ebx+10h], 30322073h
.text:0040A9F4                 mov     word ptr [ebx+14h], 3030h
.text:0040A9FA                 mov     byte ptr [ebx+16h], 0
.text:0040A9FE                 jmp     loc_40A787
.text:0040AA03 ; ---------------------------------------------------------------------------
.text:0040AA03
.text:0040AA03 loc_40AA03:                             ; CODE XREF: .text:0040A9C8↑j
.text:0040AA03                 mov     dword ptr [ebx], 7263694Dh
.text:0040AA09                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040AA10                 mov     dword ptr [ebx+8], 69572074h
.text:0040AA17                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040AA1E                 mov     dword ptr [ebx+10h], 50582073h
.text:0040AA25                 jmp     loc_40A783
.text:0040AA2A ; ---------------------------------------------------------------------------
.text:0040AA2A
.text:0040AA2A loc_40AA2A:                             ; CODE XREF: .text:0040A9C3↑j
.text:0040AA2A                 mov     dword ptr [ebx], 7263694Dh
.text:0040AA30                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040AA37                 mov     dword ptr [ebx+8], 69572074h
.text:0040AA3E                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040AA45                 mov     dword ptr [ebx+10h], 65532073h
.text:0040AA4C                 mov     dword ptr [ebx+14h], 72657672h
.text:0040AA53                 mov     dword ptr [ebx+18h], 30303220h
.text:0040AA5A                 mov     word ptr [ebx+1Ch], 33h ; '3'
.text:0040AA60                 jmp     loc_40A787
.text:0040AA65 ; ---------------------------------------------------------------------------
.text:0040AA65
.text:0040AA65 loc_40AA65:                             ; CODE XREF: .text:0040A744↑j
.text:0040AA65                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0040AA6B                 test    edx, edx
.text:0040AA6D                 jnz     loc_40A74A
.text:0040AA73                 mov     dword ptr [ebx], 7263694Dh
.text:0040AA79                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040AA80                 mov     dword ptr [ebx+8], 69572074h
.text:0040AA87                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040AA8E                 mov     dword ptr [ebx+10h], 544E2073h
.text:0040AA95                 mov     dword ptr [ebx+14h], 302E3420h
.text:0040AA9C                 mov     byte ptr [ebx+18h], 0
.text:0040AAA0                 jmp     loc_40A787
.text:0040AAA5 ; ---------------------------------------------------------------------------
.text:0040AAA5
.text:0040AAA5 loc_40AAA5:                             ; CODE XREF: .text:0040A73B↑j
.text:0040AAA5                 cmp     ds:VersionInformation.dwMinorVersion, 33h ; '3'
.text:0040AAAC                 jnz     loc_40A741
.text:0040AAB2                 mov     dword ptr [ebx], 7263694Dh
.text:0040AAB8                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040AABF                 mov     dword ptr [ebx+8], 69572074h
.text:0040AAC6                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040AACD                 mov     dword ptr [ebx+10h], 544E2073h
.text:0040AAD4                 mov     dword ptr [ebx+14h], 352E3320h
.text:0040AADB                 mov     word ptr [ebx+18h], 31h ; '1'
.text:0040AAE1                 jmp     loc_40A787
.text:0040AAE6 ; ---------------------------------------------------------------------------
.text:0040AAE6
.text:0040AAE6 loc_40AAE6:                             ; CODE XREF: .text:0040A676↑j
.text:0040AAE6                 cld
.text:0040AAE7                 mov     esi, offset aMicrosoftWindo ; "Microsoft Windows 3.1 with Win32s "
.text:0040AAEC                 mov     ecx, 8
.text:0040AAF1                 movzx   edx, byte ptr ds:aMicrosoftWindo+22h ; ""
.text:0040AAF8                 mov     edi, ebx
.text:0040AAFA                 rep movsd
.text:0040AAFC                 movzx   esi, word ptr ds:aMicrosoftWindo+20h ; "s "
.text:0040AB03                 mov     [edi+2], dl
.text:0040AB06                 mov     [edi], si
.text:0040AB09                 jmp     loc_40A720
.text:0040AB09 ; ---------------------------------------------------------------------------
.text:0040AB0E                 align 10h
.text:0040AB10
.text:0040AB10 loc_40AB10:                             ; CODE XREF: .text:0040A66D↑j
.text:0040AB10                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:0040AB16                 cmp     ecx, 4
.text:0040AB19                 jz      loc_40ABD0
.text:0040AB1F
.text:0040AB1F loc_40AB1F:                             ; CODE XREF: .text:0040AC26↓j
.text:0040AB1F                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0040AB25
.text:0040AB25 loc_40AB25:                             ; CODE XREF: .text:0040ABD8↓j
.text:0040AB25                 cmp     ecx, 4
.text:0040AB28                 jz      short loc_40AB34
.text:0040AB2A
.text:0040AB2A loc_40AB2A:                             ; CODE XREF: .text:0040AB3C↓j
.text:0040AB2A                                         ; .text:0040AB41↓j
.text:0040AB2A                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0040AB2F                 jmp     loc_40A69C
.text:0040AB34 ; ---------------------------------------------------------------------------
.text:0040AB34
.text:0040AB34 loc_40AB34:                             ; CODE XREF: .text:0040AB28↑j
.text:0040AB34                 cmp     edx, 0Ah
.text:0040AB37                 jz      short loc_40AB61
.text:0040AB39
.text:0040AB39 loc_40AB39:                             ; CODE XREF: .text:0040ABAF↓j
.text:0040AB39                 cmp     ecx, 4
.text:0040AB3C                 jnz     short loc_40AB2A
.text:0040AB3E                 cmp     edx, 5Ah ; 'Z'
.text:0040AB41                 jnz     short loc_40AB2A
.text:0040AB43                 cld
.text:0040AB44                 mov     edi, ebx
.text:0040AB46                 mov     esi, offset aMicrosoftWindo_0 ; "Microsoft Windows Millennium Edition "
.text:0040AB4B                 movzx   ebx, word ptr ds:aMicrosoftWindo_0+24h ; " "
.text:0040AB52                 mov     ecx, 9
.text:0040AB57                 rep movsd
.text:0040AB59                 mov     [edi], bx
.text:0040AB5C                 jmp     loc_40A720
.text:0040AB61 ; ---------------------------------------------------------------------------
.text:0040AB61
.text:0040AB61 loc_40AB61:                             ; CODE XREF: .text:0040AB37↑j
.text:0040AB61                 mov     dword ptr [ebx], 7263694Dh
.text:0040AB67                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040AB6E                 mov     dword ptr [ebx+8], 69572074h
.text:0040AB75                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040AB7C                 mov     dword ptr [ebx+10h], 38392073h
.text:0040AB83                 mov     byte ptr [ebx+14h], 0
.text:0040AB87                 mov     edx, ds:VersionInformation.dwBuildNumber
.text:0040AB8D                 lea     edi, [edx-7CFh]
.text:0040AB93                 cmp     edi, 0B7h ; '·'
.text:0040AB99                 jbe     short loc_40ABC3
.text:0040AB9B                 cmp     edx, 886h
.text:0040ABA1                 ja      short loc_40ABB1
.text:0040ABA3
.text:0040ABA3 loc_40ABA3:                             ; CODE XREF: .text:0040ABC1↓j
.text:0040ABA3                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:0040ABA9                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0040ABAF                 jmp     short loc_40AB39
.text:0040ABB1 ; ---------------------------------------------------------------------------
.text:0040ABB1
.text:0040ABB1 loc_40ABB1:                             ; CODE XREF: .text:0040ABA1↑j
.text:0040ABB1                 mov     dword ptr [esp+4], offset loc_40A636
.text:0040ABB9
.text:0040ABB9 loc_40ABB9:                             ; CODE XREF: .text:0040ABCB↓j
.text:0040ABB9                 mov     [esp], ebx
.text:0040ABBC                 call    strcat
.text:0040ABC1                 jmp     short loc_40ABA3
.text:0040ABC3 ; ---------------------------------------------------------------------------
.text:0040ABC3
.text:0040ABC3 loc_40ABC3:                             ; CODE XREF: .text:0040AB99↑j
.text:0040ABC3                 mov     dword ptr [esp+4], 40A63Ah
.text:0040ABCB                 jmp     short loc_40ABB9
.text:0040ABCB ; ---------------------------------------------------------------------------
.text:0040ABCD                 align 10h
.text:0040ABD0
.text:0040ABD0 loc_40ABD0:                             ; CODE XREF: .text:0040AB19↑j
.text:0040ABD0                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0040ABD6                 test    edx, edx
.text:0040ABD8                 jnz     loc_40AB25
.text:0040ABDE                 mov     dword ptr [ebx], 7263694Dh
.text:0040ABE4                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040ABEB                 mov     dword ptr [ebx+8], 69572074h
.text:0040ABF2                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040ABF9                 mov     dword ptr [ebx+10h], 35392073h
.text:0040AC00                 mov     byte ptr [ebx+14h], 0
.text:0040AC04                 mov     edx, ds:VersionInformation.dwBuildNumber
.text:0040AC0A                 lea     ecx, [edx-3B7h]
.text:0040AC10                 cmp     ecx, 81h
.text:0040AC16                 jbe     short loc_40AC3D
.text:0040AC18                 cmp     edx, 438h
.text:0040AC1E                 ja      short loc_40AC2B
.text:0040AC20
.text:0040AC20 loc_40AC20:                             ; CODE XREF: .text:0040AC3B↓j
.text:0040AC20                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:0040AC26                 jmp     loc_40AB1F
.text:0040AC2B ; ---------------------------------------------------------------------------
.text:0040AC2B
.text:0040AC2B loc_40AC2B:                             ; CODE XREF: .text:0040AC1E↑j
.text:0040AC2B                 mov     dword ptr [esp+4], offset loc_40A63F
.text:0040AC33
.text:0040AC33 loc_40AC33:                             ; CODE XREF: .text:0040AC45↓j
.text:0040AC33                 mov     [esp], ebx
.text:0040AC36                 call    strcat
.text:0040AC3B                 jmp     short loc_40AC20
.text:0040AC3D ; ---------------------------------------------------------------------------
.text:0040AC3D
.text:0040AC3D loc_40AC3D:                             ; CODE XREF: .text:0040AC16↑j
.text:0040AC3D                 mov     dword ptr [esp+4], 40A63Ah
.text:0040AC45                 jmp     short loc_40AC33
.text:0040AC45 ; ---------------------------------------------------------------------------
.text:0040AC47                 align 10h
.text:0040AC50
.text:0040AC50 ; =============== S U B R O U T I N E =======================================
.text:0040AC50
.text:0040AC50
.text:0040AC50 sub_40AC50      proc near               ; CODE XREF: .text:0040B7AE↓p
.text:0040AC50                                         ; sub_40BC30+12A↓p
.text:0040AC50                 sub     esp, 0Ch
.text:0040AC53                 call    sub_40AD60
.text:0040AC58                 mov     eax, ds:dword_4124F0
.text:0040AC5D                 add     esp, 0Ch
.text:0040AC60                 retn
.text:0040AC60 sub_40AC50      endp
.text:0040AC60
.text:0040AC61 ; ---------------------------------------------------------------------------
.text:0040AC61                 jmp     short loc_40AC70
.text:0040AC61 ; ---------------------------------------------------------------------------
.text:0040AC63                 align 10h
.text:0040AC70
.text:0040AC70 loc_40AC70:                             ; CODE XREF: .text:0040AC61↑j
.text:0040AC70                 sub     esp, 0Ch
.text:0040AC73                 call    sub_40AD60
.text:0040AC78                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0040AC7D                 add     esp, 0Ch
.text:0040AC80                 retn
.text:0040AC81 ; ---------------------------------------------------------------------------
.text:0040AC81                 jmp     short loc_40AC90
.text:0040AC81 ; ---------------------------------------------------------------------------
.text:0040AC83                 align 10h
.text:0040AC90
.text:0040AC90 loc_40AC90:                             ; CODE XREF: .text:0040AC81↑j
.text:0040AC90                 sub     esp, 0Ch
.text:0040AC93                 call    sub_40AD60
.text:0040AC98                 mov     eax, ds:VersionInformation.dwMajorVersion
.text:0040AC9D                 add     esp, 0Ch
.text:0040ACA0                 retn
.text:0040ACA1 ; ---------------------------------------------------------------------------
.text:0040ACA1                 jmp     short loc_40ACB0
.text:0040ACA1 ; ---------------------------------------------------------------------------
.text:0040ACA3                 align 10h
.text:0040ACB0
.text:0040ACB0 loc_40ACB0:                             ; CODE XREF: .text:0040ACA1↑j
.text:0040ACB0                 sub     esp, 0Ch
.text:0040ACB3                 call    sub_40AD60
.text:0040ACB8                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0040ACBD                 add     esp, 0Ch
.text:0040ACC0                 retn
.text:0040ACC1 ; ---------------------------------------------------------------------------
.text:0040ACC1                 jmp     short loc_40ACD0
.text:0040ACC1 ; ---------------------------------------------------------------------------
.text:0040ACC3                 align 10h
.text:0040ACD0
.text:0040ACD0 loc_40ACD0:                             ; CODE XREF: .text:0040ACC1↑j
.text:0040ACD0                 sub     esp, 0Ch
.text:0040ACD3                 call    GetVersion
.text:0040ACD8                 shr     eax, 10h
.text:0040ACDB                 add     esp, 0Ch
.text:0040ACDE                 retn
.text:0040ACDE ; ---------------------------------------------------------------------------
.text:0040ACDF                 align 10h
.text:0040ACE0                 sub     esp, 0Ch
.text:0040ACE3                 call    sub_40AD60
.text:0040ACE8                 xor     eax, eax
.text:0040ACEA                 cmp     ds:VersionInformation.dwPlatformId, 2
.text:0040ACF1                 setz    al
.text:0040ACF4                 add     esp, 0Ch
.text:0040ACF7                 retn
.text:0040ACF7 ; ---------------------------------------------------------------------------
.text:0040ACF8                 align 10h
.text:0040AD00
.text:0040AD00 ; =============== S U B R O U T I N E =======================================
.text:0040AD00
.text:0040AD00
.text:0040AD00 sub_40AD00      proc near               ; CODE XREF: .text:loc_407A70↑p
.text:0040AD00                                         ; .text:loc_40B794↓p ...
.text:0040AD00                 sub     esp, 0Ch
.text:0040AD03                 call    sub_40AD60
.text:0040AD08                 xor     eax, eax
.text:0040AD0A                 cmp     ds:VersionInformation.dwPlatformId, 1
.text:0040AD11                 setz    al
.text:0040AD14                 add     esp, 0Ch
.text:0040AD17                 retn
.text:0040AD17 sub_40AD00      endp
.text:0040AD17
.text:0040AD17 ; ---------------------------------------------------------------------------
.text:0040AD18                 align 10h
.text:0040AD20                 sub     esp, 0Ch
.text:0040AD23                 call    sub_40AD60
.text:0040AD28                 xor     eax, eax
.text:0040AD2A                 cmp     ds:VersionInformation.dwPlatformId, 0
.text:0040AD31                 setz    al
.text:0040AD34                 add     esp, 0Ch
.text:0040AD37                 retn
.text:0040AD37 ; ---------------------------------------------------------------------------
.text:0040AD38                 align 10h
.text:0040AD40                 sub     esp, 0Ch
.text:0040AD43                 call    sub_40AD60
.text:0040AD48                 xor     eax, eax
.text:0040AD4A                 cmp     ds:VersionInformation.dwPlatformId, 3
.text:0040AD51                 setz    al
.text:0040AD54                 add     esp, 0Ch
.text:0040AD57                 retn
.text:0040AD57 ; ---------------------------------------------------------------------------
.text:0040AD58                 align 10h
.text:0040AD60
.text:0040AD60 ; =============== S U B R O U T I N E =======================================
.text:0040AD60
.text:0040AD60
.text:0040AD60 sub_40AD60      proc near               ; CODE XREF: .text:0040A660↑p
.text:0040AD60                                         ; sub_40AC50+3↑p ...
.text:0040AD60
.text:0040AD60 lpVersionInformation= dword ptr -0BCh
.text:0040AD60 VersionInformation= _OSVERSIONINFOA ptr -0ACh
.text:0040AD60
.text:0040AD60                 sub     esp, 0BCh
.text:0040AD66                 mov     edx, ds:dword_4125A0
.text:0040AD6C                 test    edx, edx
.text:0040AD6E                 jz      short loc_40AD80
.text:0040AD70
.text:0040AD70 loc_40AD70:                             ; CODE XREF: sub_40AD60+7B↓j
.text:0040AD70                 mov     edx, 1
.text:0040AD75
.text:0040AD75 loc_40AD75:                             ; CODE XREF: sub_40AD60+217↓j
.text:0040AD75                 mov     eax, edx
.text:0040AD77                 add     esp, 0BCh
.text:0040AD7D                 retn
.text:0040AD7D ; ---------------------------------------------------------------------------
.text:0040AD7E                 align 10h
.text:0040AD80
.text:0040AD80 loc_40AD80:                             ; CODE XREF: sub_40AD60+E↑j
.text:0040AD80                 mov     [esp+0BCh+lpVersionInformation], offset VersionInformation ; lpVersionInformation
.text:0040AD87                 mov     edx, 9Ch ; 'œ'
.text:0040AD8C                 mov     ds:VersionInformation.dwOSVersionInfoSize, edx
.text:0040AD92                 call    GetVersionExA
.text:0040AD97                 sub     esp, 4
.text:0040AD9A                 test    eax, eax
.text:0040AD9C                 jz      loc_40AF54
.text:0040ADA2
.text:0040ADA2 loc_40ADA2:                             ; CODE XREF: sub_40AD60+245↓j
.text:0040ADA2                 movzx   edx, word ptr ds:VersionInformation.dwBuildNumber
.text:0040ADA9                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0040ADAE                 cmp     eax, 1
.text:0040ADB1                 mov     ds:VersionInformation.dwBuildNumber, edx
.text:0040ADB7                 jz      loc_40AEA0
.text:0040ADBD                 cmp     eax, 1
.text:0040ADC0                 jb      loc_40AE90
.text:0040ADC6                 cmp     eax, 2
.text:0040ADC9                 jz      short loc_40ADEA
.text:0040ADCB                 cmp     eax, 3
.text:0040ADCE                 jz      short loc_40ADDD
.text:0040ADD0
.text:0040ADD0 loc_40ADD0:                             ; CODE XREF: sub_40AD60+88↓j
.text:0040ADD0                                         ; sub_40AD60+C0↓j ...
.text:0040ADD0                 mov     edx, 1
.text:0040ADD5                 mov     ds:dword_4125A0, edx
.text:0040ADDB                 jmp     short loc_40AD70
.text:0040ADDD ; ---------------------------------------------------------------------------
.text:0040ADDD
.text:0040ADDD loc_40ADDD:                             ; CODE XREF: sub_40AD60+6E↑j
.text:0040ADDD                 mov     ecx, 17h
.text:0040ADE2
.text:0040ADE2 loc_40ADE2:                             ; CODE XREF: sub_40AD60+1A7↓j
.text:0040ADE2                 mov     ds:dword_4124F0, ecx
.text:0040ADE8                 jmp     short loc_40ADD0
.text:0040ADEA ; ---------------------------------------------------------------------------
.text:0040ADEA
.text:0040ADEA loc_40ADEA:                             ; CODE XREF: sub_40AD60+69↑j
.text:0040ADEA                 mov     eax, ds:VersionInformation.dwMajorVersion
.text:0040ADEF                 cmp     eax, 3
.text:0040ADF2                 jz      short loc_40AE6B
.text:0040ADF4                 cmp     eax, 4
.text:0040ADF7                 jz      short loc_40AE5A
.text:0040ADF9
.text:0040ADF9 loc_40ADF9:                             ; CODE XREF: sub_40AD60+102↓j
.text:0040ADF9                 cmp     eax, 4
.text:0040ADFC                 ja      short loc_40AE22
.text:0040ADFE                 mov     ecx, ds:VersionInformation.dwMinorVersion
.text:0040AE04                 test    ecx, ecx
.text:0040AE06                 jnz     short loc_40AE22
.text:0040AE08                 mov     edx, 1Eh
.text:0040AE0D
.text:0040AE0D loc_40AE0D:                             ; CODE XREF: sub_40AD60+DF↓j
.text:0040AE0D                 mov     ds:dword_4124F0, edx
.text:0040AE13
.text:0040AE13 loc_40AE13:                             ; CODE XREF: sub_40AD60+C5↓j
.text:0040AE13                                         ; sub_40AD60+D8↓j ...
.text:0040AE13                 movzx   ecx, ds:word_412594
.text:0040AE1A                 add     ds:dword_4124F0, ecx
.text:0040AE20                 jmp     short loc_40ADD0
.text:0040AE22 ; ---------------------------------------------------------------------------
.text:0040AE22
.text:0040AE22 loc_40AE22:                             ; CODE XREF: sub_40AD60+9C↑j
.text:0040AE22                                         ; sub_40AD60+A6↑j
.text:0040AE22                 cmp     eax, 5
.text:0040AE25                 jnz     short loc_40AE13
.text:0040AE27                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0040AE2C                 cmp     eax, 2
.text:0040AE2F                 jz      short loc_40AE4E
.text:0040AE31                 cmp     eax, 1
.text:0040AE34                 jz      short loc_40AE41
.text:0040AE36                 test    eax, eax
.text:0040AE38                 jnz     short loc_40AE13
.text:0040AE3A                 mov     edx, 32h ; '2'
.text:0040AE3F                 jmp     short loc_40AE0D
.text:0040AE41 ; ---------------------------------------------------------------------------
.text:0040AE41
.text:0040AE41 loc_40AE41:                             ; CODE XREF: sub_40AD60+D4↑j
.text:0040AE41                 mov     ecx, 3Ch ; '<'
.text:0040AE46
.text:0040AE46 loc_40AE46:                             ; CODE XREF: sub_40AD60+122↓j
.text:0040AE46                 mov     ds:dword_4124F0, ecx
.text:0040AE4C                 jmp     short loc_40AE13
.text:0040AE4E ; ---------------------------------------------------------------------------
.text:0040AE4E
.text:0040AE4E loc_40AE4E:                             ; CODE XREF: sub_40AD60+CF↑j
.text:0040AE4E                 mov     eax, 46h ; 'F'
.text:0040AE53
.text:0040AE53 loc_40AE53:                             ; CODE XREF: sub_40AD60+109↓j
.text:0040AE53                                         ; sub_40AD60+129↓j
.text:0040AE53                 mov     ds:dword_4124F0, eax
.text:0040AE58                 jmp     short loc_40AE13
.text:0040AE5A ; ---------------------------------------------------------------------------
.text:0040AE5A
.text:0040AE5A loc_40AE5A:                             ; CODE XREF: sub_40AD60+97↑j
.text:0040AE5A                 mov     ecx, ds:VersionInformation.dwMinorVersion
.text:0040AE60                 test    ecx, ecx
.text:0040AE62                 jnz     short loc_40ADF9
.text:0040AE64                 mov     eax, 28h ; '('
.text:0040AE69                 jmp     short loc_40AE53
.text:0040AE6B ; ---------------------------------------------------------------------------
.text:0040AE6B
.text:0040AE6B loc_40AE6B:                             ; CODE XREF: sub_40AD60+92↑j
.text:0040AE6B                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0040AE70                 cmp     eax, 33h ; '3'
.text:0040AE73                 jz      short loc_40AE84
.text:0040AE75                 cmp     eax, 5
.text:0040AE78                 setz    cl
.text:0040AE7B                 movzx   edx, cl
.text:0040AE7E                 lea     ecx, [edx+edx*4+1Eh]
.text:0040AE82                 jmp     short loc_40AE46
.text:0040AE84 ; ---------------------------------------------------------------------------
.text:0040AE84
.text:0040AE84 loc_40AE84:                             ; CODE XREF: sub_40AD60+113↑j
.text:0040AE84                 mov     eax, 24h ; '$'
.text:0040AE89                 jmp     short loc_40AE53
.text:0040AE89 ; ---------------------------------------------------------------------------
.text:0040AE8B                 align 10h
.text:0040AE90
.text:0040AE90 loc_40AE90:                             ; CODE XREF: sub_40AD60+60↑j
.text:0040AE90                 mov     edx, 2
.text:0040AE95                 mov     ds:dword_4124F0, edx
.text:0040AE9B                 jmp     loc_40ADD0
.text:0040AEA0 ; ---------------------------------------------------------------------------
.text:0040AEA0
.text:0040AEA0 loc_40AEA0:                             ; CODE XREF: sub_40AD60+57↑j
.text:0040AEA0                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:0040AEA6                 cmp     ecx, 4
.text:0040AEA9                 jnz     loc_40ADD0
.text:0040AEAF                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0040AEB4                 test    eax, eax
.text:0040AEB6                 jnz     short loc_40AEDA
.text:0040AEB8                 mov     eax, 0Ah
.text:0040AEBD                 mov     ds:dword_4124F0, eax
.text:0040AEC2                 lea     eax, [edx-3B7h]
.text:0040AEC8                 cmp     eax, 81h
.text:0040AECD                 ja      short loc_40AF45
.text:0040AECF                 mov     edx, 0Bh
.text:0040AED4
.text:0040AED4 loc_40AED4:                             ; CODE XREF: sub_40AD60+1F2↓j
.text:0040AED4                 mov     ds:dword_4124F0, edx
.text:0040AEDA
.text:0040AEDA loc_40AEDA:                             ; CODE XREF: sub_40AD60+156↑j
.text:0040AEDA                                         ; sub_40AD60+1EB↓j
.text:0040AEDA                 cmp     ecx, 4
.text:0040AEDD                 jnz     loc_40ADD0
.text:0040AEE3                 cmp     ds:VersionInformation.dwMinorVersion, 0Ah
.text:0040AEEA                 jz      short loc_40AF0C
.text:0040AEEC
.text:0040AEEC loc_40AEEC:                             ; CODE XREF: sub_40AD60+1D4↓j
.text:0040AEEC                                         ; sub_40AD60+1DC↓j
.text:0040AEEC                 cmp     ecx, 4
.text:0040AEEF                 jnz     loc_40ADD0
.text:0040AEF5                 cmp     ds:VersionInformation.dwMinorVersion, 5Ah ; 'Z'
.text:0040AEFC                 jnz     loc_40ADD0
.text:0040AF02                 mov     ecx, 12h
.text:0040AF07                 jmp     loc_40ADE2
.text:0040AF0C ; ---------------------------------------------------------------------------
.text:0040AF0C
.text:0040AF0C loc_40AF0C:                             ; CODE XREF: sub_40AD60+18A↑j
.text:0040AF0C                 mov     edx, ds:VersionInformation.dwBuildNumber
.text:0040AF12                 mov     eax, 0Eh
.text:0040AF17                 mov     ds:dword_4124F0, eax
.text:0040AF1C                 lea     eax, [edx-7CFh]
.text:0040AF22                 cmp     eax, 0B7h ; '·'
.text:0040AF27                 ja      short loc_40AF36
.text:0040AF29                 mov     edx, 0Fh
.text:0040AF2E
.text:0040AF2E loc_40AF2E:                             ; CODE XREF: sub_40AD60+1E3↓j
.text:0040AF2E                 mov     ds:dword_4124F0, edx
.text:0040AF34                 jmp     short loc_40AEEC
.text:0040AF36 ; ---------------------------------------------------------------------------
.text:0040AF36
.text:0040AF36 loc_40AF36:                             ; CODE XREF: sub_40AD60+1C7↑j
.text:0040AF36                 cmp     edx, 886h
.text:0040AF3C                 jbe     short loc_40AEEC
.text:0040AF3E                 mov     edx, 10h
.text:0040AF43                 jmp     short loc_40AF2E
.text:0040AF45 ; ---------------------------------------------------------------------------
.text:0040AF45
.text:0040AF45 loc_40AF45:                             ; CODE XREF: sub_40AD60+16D↑j
.text:0040AF45                 cmp     edx, 438h
.text:0040AF4B                 jbe     short loc_40AEDA
.text:0040AF4D                 mov     edx, 0Ch
.text:0040AF52                 jmp     short loc_40AED4
.text:0040AF54 ; ---------------------------------------------------------------------------
.text:0040AF54
.text:0040AF54 loc_40AF54:                             ; CODE XREF: sub_40AD60+3C↑j
.text:0040AF54                 mov     [esp+0BCh+VersionInformation.dwOSVersionInfoSize], 94h ; '”'
.text:0040AF5C                 xor     edx, edx
.text:0040AF5E                 lea     ecx, [esp+0BCh+VersionInformation]
.text:0040AF62                 mov     dword_4110D0, edx
.text:0040AF68                 mov     [esp+0BCh+lpVersionInformation], ecx ; lpVersionInformation
.text:0040AF6B                 call    GetVersionExA
.text:0040AF70                 sub     esp, 4
.text:0040AF73                 xor     edx, edx
.text:0040AF75                 test    eax, eax
.text:0040AF77                 jz      loc_40AD75
.text:0040AF7D                 mov     edx, [esp+0BCh+VersionInformation.dwMajorVersion]
.text:0040AF81                 mov     ecx, [esp+0BCh+VersionInformation.dwMinorVersion]
.text:0040AF85                 mov     ds:VersionInformation.dwMajorVersion, edx
.text:0040AF8B                 mov     edx, [esp+0BCh+VersionInformation.dwBuildNumber]
.text:0040AF8F                 mov     ds:VersionInformation.dwMinorVersion, ecx
.text:0040AF95                 mov     ecx, [esp+0BCh+VersionInformation.dwPlatformId]
.text:0040AF99                 mov     ds:VersionInformation.dwBuildNumber, edx
.text:0040AF9F                 mov     ds:VersionInformation.dwPlatformId, ecx
.text:0040AFA5                 jmp     loc_40ADA2
.text:0040AFA5 sub_40AD60      endp
.text:0040AFA5
.text:0040AFA5 ; ---------------------------------------------------------------------------
.text:0040AFAA                 align 10h
.text:0040AFB0
.text:0040AFB0 ; =============== S U B R O U T I N E =======================================
.text:0040AFB0
.text:0040AFB0
.text:0040AFB0 sub_40AFB0      proc near               ; CODE XREF: .text:004077A3↑p
.text:0040AFB0                                         ; .text:004077F3↑p
.text:0040AFB0
.text:0040AFB0 arg_4           = dword ptr  8
.text:0040AFB0
.text:0040AFB0                 sub     esp, 0Ch
.text:0040AFB3                 mov     edx, [esp+0Ch+arg_4]
.text:0040AFB7                 test    edx, edx
.text:0040AFB9                 jz      short loc_40AFC0
.text:0040AFBB                 add     esp, 0Ch
.text:0040AFBE                 jmp     short sub_40B000
.text:0040AFC0 ; ---------------------------------------------------------------------------
.text:0040AFC0
.text:0040AFC0 loc_40AFC0:                             ; CODE XREF: sub_40AFB0+9↑j
.text:0040AFC0                 call    _errno
.text:0040AFC5                 mov     dword ptr [eax], 16h
.text:0040AFCB                 xor     eax, eax
.text:0040AFCD                 add     esp, 0Ch
.text:0040AFD0                 retn
.text:0040AFD0 sub_40AFB0      endp
.text:0040AFD0
.text:0040AFD1 ; ---------------------------------------------------------------------------
.text:0040AFD1                 jmp     short sub_40AFE0
.text:0040AFD1 ; ---------------------------------------------------------------------------
.text:0040AFD3                 align 10h
.text:0040AFE0
.text:0040AFE0 ; =============== S U B R O U T I N E =======================================
.text:0040AFE0
.text:0040AFE0
.text:0040AFE0 ; int __cdecl sub_40AFE0(LPCSTR)
.text:0040AFE0 sub_40AFE0      proc near               ; CODE XREF: .text:00407998↑p
.text:0040AFE0                                         ; .text:004079A6↑p ...
.text:0040AFE0
.text:0040AFE0 lpFileName      = dword ptr -0Ch
.text:0040AFE0 Destination     = dword ptr -8
.text:0040AFE0 arg_0           = dword ptr  4
.text:0040AFE0
.text:0040AFE0                 sub     esp, 0Ch
.text:0040AFE3                 mov     edx, [esp+0Ch+arg_0]
.text:0040AFE7                 mov     [esp+0Ch+Destination], 0 ; Destination
.text:0040AFEF                 mov     [esp+0Ch+lpFileName], edx ; lpFileName
.text:0040AFF2                 call    sub_40B000
.text:0040AFF7                 add     esp, 0Ch
.text:0040AFFA                 retn
.text:0040AFFA sub_40AFE0      endp
.text:0040AFFA
.text:0040AFFA ; ---------------------------------------------------------------------------
.text:0040AFFB                 align 10h
.text:0040B000
.text:0040B000 ; =============== S U B R O U T I N E =======================================
.text:0040B000
.text:0040B000
.text:0040B000 ; int __cdecl sub_40B000(LPCSTR lpFileName, char *Destination)
.text:0040B000 sub_40B000      proc near               ; CODE XREF: sub_40AFB0+E↑j
.text:0040B000                                         ; sub_40AFE0+12↑p
.text:0040B000
.text:0040B000 Size            = dword ptr -2Ch
.text:0040B000 nBufferLength   = dword ptr -28h
.text:0040B000 lpBuffer        = dword ptr -24h
.text:0040B000 lpFilePart      = dword ptr -20h
.text:0040B000 FilePart        = dword ptr -14h
.text:0040B000 lpFileName      = dword ptr  4
.text:0040B000 Destination     = dword ptr  8
.text:0040B000
.text:0040B000                 push    ebp
.text:0040B001                 push    edi
.text:0040B002                 push    esi
.text:0040B003                 push    ebx
.text:0040B004                 sub     esp, 1Ch
.text:0040B007                 mov     edi, [esp+2Ch+lpFileName]
.text:0040B00B                 mov     ebp, [esp+2Ch+Destination]
.text:0040B00F                 test    edi, edi
.text:0040B011                 jz      loc_40B119
.text:0040B017                 cmp     byte ptr [edi], 0
.text:0040B01A                 jz      loc_40B10C
.text:0040B020                 mov     [esp+2Ch+Size], 104h ; Size
.text:0040B027                 call    malloc
.text:0040B02C                 mov     [esp+2Ch+lpBuffer], eax ; lpBuffer
.text:0040B030                 lea     edx, [esp+2Ch+FilePart]
.text:0040B034                 mov     ebx, eax
.text:0040B036                 mov     [esp+2Ch+lpFilePart], edx ; lpFilePart
.text:0040B03A                 mov     [esp+2Ch+nBufferLength], 104h ; nBufferLength
.text:0040B042                 mov     [esp+2Ch+Size], edi ; lpFileName
.text:0040B045                 call    GetFullPathNameA
.text:0040B04A                 sub     esp, 10h
.text:0040B04D                 mov     esi, eax
.text:0040B04F                 test    eax, eax
.text:0040B051                 jz      loc_40B0FA
.text:0040B057                 cmp     eax, 104h
.text:0040B05C                 jle     short loc_40B06D
.text:0040B05E                 test    ebp, ebp
.text:0040B060                 jz      short loc_40B0C9
.text:0040B062                 call    _errno
.text:0040B067                 mov     dword ptr [eax], 26h ; '&'
.text:0040B06D
.text:0040B06D loc_40B06D:                             ; CODE XREF: sub_40B000+5C↑j
.text:0040B06D                                         ; sub_40B000+F5↓j
.text:0040B06D                 call    _errno
.text:0040B072                 mov     edi, [eax]
.text:0040B074                 mov     [esp+2Ch+nBufferLength], 10h ; int
.text:0040B07C                 mov     [esp+2Ch+Size], ebx ; lpFileName
.text:0040B07F                 call    sub_40B130
.text:0040B084                 test    eax, eax
.text:0040B086                 jnz     short loc_40B0A0
.text:0040B088                 movzx   eax, byte ptr [esi+ebx-1]
.text:0040B08D                 cmp     al, 2Fh ; '/'
.text:0040B08F                 jz      short loc_40B0A0
.text:0040B091                 cmp     al, 5Ch ; '\'
.text:0040B093                 jz      short loc_40B0A0
.text:0040B095                 mov     byte ptr [esi+ebx], 5Ch ; '\'
.text:0040B099                 mov     byte ptr [esi+ebx+1], 0
.text:0040B09E                 mov     esi, esi
.text:0040B0A0
.text:0040B0A0 loc_40B0A0:                             ; CODE XREF: sub_40B000+86↑j
.text:0040B0A0                                         ; sub_40B000+8F↑j ...
.text:0040B0A0                 call    _errno
.text:0040B0A5                 mov     [eax], edi
.text:0040B0A7                 mov     [esp+2Ch+Size], ebx
.text:0040B0AA                 call    sub_407690
.text:0040B0AF                 test    ebp, ebp
.text:0040B0B1                 mov     eax, ebx
.text:0040B0B3                 jz      short loc_40B0C1
.text:0040B0B5                 mov     [esp+2Ch+nBufferLength], ebx ; Source
.text:0040B0B9                 mov     [esp+2Ch+Size], ebp ; Destination
.text:0040B0BC                 call    strcpy
.text:0040B0C1
.text:0040B0C1 loc_40B0C1:                             ; CODE XREF: sub_40B000+B3↑j
.text:0040B0C1                                         ; sub_40B000+10A↓j
.text:0040B0C1                 add     esp, 1Ch
.text:0040B0C4                 pop     ebx
.text:0040B0C5                 pop     esi
.text:0040B0C6                 pop     edi
.text:0040B0C7                 pop     ebp
.text:0040B0C8                 retn
.text:0040B0C9 ; ---------------------------------------------------------------------------
.text:0040B0C9
.text:0040B0C9 loc_40B0C9:                             ; CODE XREF: sub_40B000+60↑j
.text:0040B0C9                 mov     [esp+2Ch+Size], ebx ; Block
.text:0040B0CC                 lea     ecx, [eax+2]
.text:0040B0CF                 mov     [esp+2Ch+nBufferLength], ecx ; Size
.text:0040B0D3                 call    realloc
.text:0040B0D8                 mov     [esp+2Ch+lpBuffer], eax ; lpBuffer
.text:0040B0DC                 lea     edx, [esp+2Ch+FilePart]
.text:0040B0E0                 mov     ebx, eax
.text:0040B0E2                 mov     [esp+2Ch+lpFilePart], edx ; lpFilePart
.text:0040B0E6                 mov     [esp+2Ch+nBufferLength], esi ; nBufferLength
.text:0040B0EA                 mov     [esp+2Ch+Size], edi ; lpFileName
.text:0040B0ED                 call    GetFullPathNameA
.text:0040B0F2                 sub     esp, 10h
.text:0040B0F5                 jmp     loc_40B06D
.text:0040B0FA ; ---------------------------------------------------------------------------
.text:0040B0FA
.text:0040B0FA loc_40B0FA:                             ; CODE XREF: sub_40B000+51↑j
.text:0040B0FA                 call    sub_407DC0
.text:0040B0FF                 mov     esi, eax
.text:0040B101                 call    _errno
.text:0040B106                 mov     [eax], esi
.text:0040B108
.text:0040B108 loc_40B108:                             ; CODE XREF: sub_40B000+117↓j
.text:0040B108                                         ; sub_40B000+124↓j
.text:0040B108                 xor     eax, eax
.text:0040B10A                 jmp     short loc_40B0C1
.text:0040B10C ; ---------------------------------------------------------------------------
.text:0040B10C
.text:0040B10C loc_40B10C:                             ; CODE XREF: sub_40B000+1A↑j
.text:0040B10C                 call    _errno
.text:0040B111                 mov     dword ptr [eax], 2
.text:0040B117                 jmp     short loc_40B108
.text:0040B119 ; ---------------------------------------------------------------------------
.text:0040B119
.text:0040B119 loc_40B119:                             ; CODE XREF: sub_40B000+11↑j
.text:0040B119                 call    _errno
.text:0040B11E                 mov     dword ptr [eax], 16h
.text:0040B124                 jmp     short loc_40B108
.text:0040B124 sub_40B000      endp
.text:0040B124
.text:0040B124 ; ---------------------------------------------------------------------------
.text:0040B126                 align 10h
.text:0040B130
.text:0040B130 ; =============== S U B R O U T I N E =======================================
.text:0040B130
.text:0040B130
.text:0040B130 ; int __cdecl sub_40B130(LPCSTR lpFileName, int)
.text:0040B130 sub_40B130      proc near               ; CODE XREF: .text:00407672↑p
.text:0040B130                                         ; sub_406FA0+2883↑p ...
.text:0040B130
.text:0040B130 uMode           = dword ptr -1Ch
.text:0040B130 var_10          = dword ptr -10h
.text:0040B130 var_C           = dword ptr -0Ch
.text:0040B130 var_8           = dword ptr -8
.text:0040B130 var_4           = dword ptr -4
.text:0040B130 lpFileName      = dword ptr  4
.text:0040B130 arg_4           = dword ptr  8
.text:0040B130
.text:0040B130                 sub     esp, 1Ch
.text:0040B133                 mov     [esp+1Ch+var_10], ebx
.text:0040B137                 mov     ebx, [esp+1Ch+lpFileName]
.text:0040B13B                 mov     [esp+1Ch+var_4], ebp
.text:0040B13F                 xor     ebp, ebp
.text:0040B141                 test    ebx, ebx
.text:0040B143                 mov     [esp+1Ch+var_C], esi
.text:0040B147                 mov     esi, [esp+1Ch+arg_4]
.text:0040B14B                 mov     [esp+1Ch+var_8], edi
.text:0040B14F                 jz      short loc_40B159
.text:0040B151                 test    esi, 0FFFFFFE8h
.text:0040B157                 jz      short loc_40B180
.text:0040B159
.text:0040B159 loc_40B159:                             ; CODE XREF: sub_40B130+1F↑j
.text:0040B159                 call    _errno
.text:0040B15E                 mov     dword ptr [eax], 16h
.text:0040B164
.text:0040B164 loc_40B164:                             ; CODE XREF: sub_40B130+B1↓j
.text:0040B164                 mov     eax, 0FFFFFFFFh
.text:0040B169
.text:0040B169 loc_40B169:                             ; CODE XREF: sub_40B130+86↓j
.text:0040B169                                         ; sub_40B130+A4↓j
.text:0040B169                 mov     ebx, [esp+1Ch+var_10]
.text:0040B16D                 mov     esi, [esp+1Ch+var_C]
.text:0040B171                 mov     edi, [esp+1Ch+var_8]
.text:0040B175                 mov     ebp, [esp+1Ch+var_4]
.text:0040B179                 add     esp, 1Ch
.text:0040B17C                 retn
.text:0040B17C ; ---------------------------------------------------------------------------
.text:0040B17D                 align 10h
.text:0040B180
.text:0040B180 loc_40B180:                             ; CODE XREF: sub_40B130+27↑j
.text:0040B180                 mov     [esp+1Ch+uMode], 8001h ; uMode
.text:0040B187                 call    SetErrorMode
.text:0040B18C                 sub     esp, 4
.text:0040B18F                 mov     [esp+1Ch+uMode], ebx ; lpFileName
.text:0040B192                 call    GetFileAttributesA
.text:0040B197                 sub     esp, 4
.text:0040B19A                 mov     edi, eax
.text:0040B19C                 cmp     eax, 0FFFFFFFFh
.text:0040B19F                 jz      short loc_40B1E3
.text:0040B1A1
.text:0040B1A1 loc_40B1A1:                             ; CODE XREF: sub_40B130+C6↓j
.text:0040B1A1                 mov     [esp+1Ch+uMode], 0 ; uMode
.text:0040B1A8                 call    SetErrorMode
.text:0040B1AD                 sub     esp, 4
.text:0040B1B0                 mov     eax, 0FFFFFFFFh
.text:0040B1B5                 inc     ebp
.text:0040B1B6                 jz      short loc_40B169
.text:0040B1B8                 test    esi, 10h
.text:0040B1BE                 jz      short loc_40B1C8
.text:0040B1C0                 test    edi, 10h
.text:0040B1C6                 jz      short loc_40B1D6
.text:0040B1C8
.text:0040B1C8 loc_40B1C8:                             ; CODE XREF: sub_40B130+8E↑j
.text:0040B1C8                 and     esi, 2
.text:0040B1CB                 jz      short loc_40B1D2
.text:0040B1CD                 and     edi, 1
.text:0040B1D0                 jnz     short loc_40B1D6
.text:0040B1D2
.text:0040B1D2 loc_40B1D2:                             ; CODE XREF: sub_40B130+9B↑j
.text:0040B1D2                 xor     eax, eax
.text:0040B1D4                 jmp     short loc_40B169
.text:0040B1D6 ; ---------------------------------------------------------------------------
.text:0040B1D6
.text:0040B1D6 loc_40B1D6:                             ; CODE XREF: sub_40B130+96↑j
.text:0040B1D6                                         ; sub_40B130+A0↑j
.text:0040B1D6                 call    _errno
.text:0040B1DB                 mov     dword ptr [eax], 0Dh
.text:0040B1E1                 jmp     short loc_40B164
.text:0040B1E3 ; ---------------------------------------------------------------------------
.text:0040B1E3
.text:0040B1E3 loc_40B1E3:                             ; CODE XREF: sub_40B130+6F↑j
.text:0040B1E3                 call    sub_407DC0
.text:0040B1E8                 mov     ebp, eax
.text:0040B1EA                 call    _errno
.text:0040B1EF                 mov     [eax], ebp
.text:0040B1F1                 mov     ebp, 0FFFFFFFFh
.text:0040B1F6                 jmp     short loc_40B1A1
.text:0040B1F6 sub_40B130      endp
.text:0040B1F6
.text:0040B1F6 ; ---------------------------------------------------------------------------
.text:0040B1F8                 align 10h
.text:0040B200 ; const char String[4]
.text:0040B200 String          db ' :/',0              ; DATA XREF: sub_40B210+FA↓o
.text:0040B204                 align 10h
.text:0040B210
.text:0040B210 ; =============== S U B R O U T I N E =======================================
.text:0040B210
.text:0040B210
.text:0040B210 ; int __cdecl sub_40B210(LPCSTR)
.text:0040B210 sub_40B210      proc near               ; CODE XREF: sub_4085E0+E↑p
.text:0040B210                                         ; sub_408AE0+17↑p ...
.text:0040B210
.text:0040B210 Str             = dword ptr -1Ch
.text:0040B210 Val             = dword ptr -18h
.text:0040B210 Count           = dword ptr -14h
.text:0040B210 var_10          = dword ptr -10h
.text:0040B210 var_C           = dword ptr -0Ch
.text:0040B210 var_8           = dword ptr -8
.text:0040B210 var_4           = dword ptr -4
.text:0040B210 arg_0           = dword ptr  4
.text:0040B210
.text:0040B210                 sub     esp, 1Ch
.text:0040B213                 mov     edx, [esp+1Ch+arg_0]
.text:0040B217                 mov     [esp+1Ch+var_8], edi
.text:0040B21B                 mov     [esp+1Ch+var_10], ebx
.text:0040B21F                 mov     [esp+1Ch+var_C], esi
.text:0040B223                 mov     [esp+1Ch+var_4], ebp
.text:0040B227                 mov     [esp+1Ch+Str], edx ; LPCSTR
.text:0040B22A                 call    sub_40AFE0
.text:0040B22F                 test    eax, eax
.text:0040B231                 mov     edi, eax
.text:0040B233                 jz      short loc_40B270
.text:0040B235                 mov     [esp+1Ch+Str], eax ; Str
.text:0040B238                 call    strlen
.text:0040B23D                 cmp     eax, 2
.text:0040B240                 jbe     short loc_40B24C
.text:0040B242                 cmp     byte ptr [edi+1], 3Ah ; ':'
.text:0040B246                 jz      loc_40B300
.text:0040B24C
.text:0040B24C loc_40B24C:                             ; CODE XREF: sub_40B210+30↑j
.text:0040B24C                                         ; sub_40B210+F4↓j
.text:0040B24C                 test    edi, edi
.text:0040B24E                 jz      short loc_40B270
.text:0040B250                 mov     [esp+1Ch+Str], edi ; Str
.text:0040B253                 call    strlen
.text:0040B258                 cmp     eax, 4
.text:0040B25B                 mov     ebp, eax
.text:0040B25D                 jle     short loc_40B270
.text:0040B25F                 cmp     byte ptr [edi], 2Fh ; '/'
.text:0040B262                 jz      short loc_40B290
.text:0040B264                 lea     esi, [esi+0]
.text:0040B26A                 lea     edi, [edi+0]
.text:0040B270
.text:0040B270 loc_40B270:                             ; CODE XREF: sub_40B210+23↑j
.text:0040B270                                         ; sub_40B210+3E↑j ...
.text:0040B270                 xor     esi, esi
.text:0040B272
.text:0040B272 loc_40B272:                             ; CODE XREF: sub_40B210+CD↓j
.text:0040B272                                         ; sub_40B210+115↓j
.text:0040B272                 mov     [esp+1Ch+Str], edi ; Block
.text:0040B275                 call    free
.text:0040B27A                 mov     eax, esi
.text:0040B27C                 mov     ebx, [esp+1Ch+var_10]
.text:0040B280                 mov     esi, [esp+1Ch+var_C]
.text:0040B284                 mov     edi, [esp+1Ch+var_8]
.text:0040B288                 mov     ebp, [esp+1Ch+var_4]
.text:0040B28C                 add     esp, 1Ch
.text:0040B28F                 retn
.text:0040B290 ; ---------------------------------------------------------------------------
.text:0040B290
.text:0040B290 loc_40B290:                             ; CODE XREF: sub_40B210+52↑j
.text:0040B290                 cmp     byte ptr [edi+1], 2Fh ; '/'
.text:0040B294                 jnz     short loc_40B270
.text:0040B296                 mov     [esp+1Ch+Val], 2Fh ; '/' ; Val
.text:0040B29E                 lea     ecx, [edi+2]
.text:0040B2A1                 mov     [esp+1Ch+Str], ecx ; Str
.text:0040B2A4                 call    strchr
.text:0040B2A9                 test    eax, eax
.text:0040B2AB                 jnz     short loc_40B2DF
.text:0040B2AD
.text:0040B2AD loc_40B2AD:                             ; CODE XREF: sub_40B210+E2↓j
.text:0040B2AD                 inc     ebp
.text:0040B2AE
.text:0040B2AE loc_40B2AE:                             ; CODE XREF: sub_40B210+E9↓j
.text:0040B2AE                 mov     [esp+1Ch+Val], 1 ; Size
.text:0040B2B6                 lea     ebx, [ebp+1]
.text:0040B2B9                 mov     [esp+1Ch+Str], ebx ; Count
.text:0040B2BC                 call    calloc
.text:0040B2C1                 mov     [esp+1Ch+Str], eax ; Destination
.text:0040B2C4                 mov     esi, eax
.text:0040B2C6                 mov     [esp+1Ch+Count], ebx ; Count
.text:0040B2CA                 mov     [esp+1Ch+Val], edi ; Source
.text:0040B2CE                 call    strncpy
.text:0040B2D3                 mov     byte ptr [ebp+esi-1], 2Fh ; '/'
.text:0040B2D8                 mov     byte ptr [ebp+esi+0], 0
.text:0040B2DD                 jmp     short loc_40B272
.text:0040B2DF ; ---------------------------------------------------------------------------
.text:0040B2DF
.text:0040B2DF loc_40B2DF:                             ; CODE XREF: sub_40B210+9B↑j
.text:0040B2DF                 mov     [esp+1Ch+Val], 2Fh ; '/' ; Val
.text:0040B2E7                 inc     eax
.text:0040B2E8                 mov     [esp+1Ch+Str], eax ; Str
.text:0040B2EB                 call    strchr
.text:0040B2F0                 test    eax, eax
.text:0040B2F2                 jz      short loc_40B2AD
.text:0040B2F4                 sub     eax, edi
.text:0040B2F6                 lea     ebp, [eax+1]
.text:0040B2F9                 jmp     short loc_40B2AE
.text:0040B2F9 ; ---------------------------------------------------------------------------
.text:0040B2FB                 align 10h
.text:0040B300
.text:0040B300 loc_40B300:                             ; CODE XREF: sub_40B210+36↑j
.text:0040B300                 cmp     byte ptr [edi+2], 2Fh ; '/'
.text:0040B304                 jnz     loc_40B24C
.text:0040B30A                 mov     [esp+1Ch+Str], offset String ; " :/"
.text:0040B311                 call    _strdup
.text:0040B316                 movsx   edx, byte ptr [edi]
.text:0040B319                 mov     esi, eax
.text:0040B31B                 mov     [esp+1Ch+Str], edx ; C
.text:0040B31E                 call    toupper
.text:0040B323                 mov     [esi], al
.text:0040B325                 jmp     loc_40B272
.text:0040B325 sub_40B210      endp
.text:0040B325
.text:0040B325 ; ---------------------------------------------------------------------------
.text:0040B32A                 align 10h
.text:0040B330
.text:0040B330 ; =============== S U B R O U T I N E =======================================
.text:0040B330
.text:0040B330
.text:0040B330 sub_40B330      proc near               ; CODE XREF: .text:0040B484↓p
.text:0040B330                                         ; .text:0040B568↓p
.text:0040B330
.text:0040B330 Str             = dword ptr -2Ch
.text:0040B330 Val             = dword ptr -28h
.text:0040B330 var_18          = dword ptr -18h
.text:0040B330 var_11          = byte ptr -11h
.text:0040B330 arg_0           = dword ptr  4
.text:0040B330
.text:0040B330                 push    ebp
.text:0040B331                 push    edi
.text:0040B332                 push    esi
.text:0040B333                 push    ebx
.text:0040B334                 sub     esp, 1Ch
.text:0040B337                 mov     edx, [esp+2Ch+arg_0]
.text:0040B33B                 cmp     edx, ds:dword_4125C0
.text:0040B341                 mov     [esp+2Ch+var_11], 0
.text:0040B346                 jz      loc_40B444
.text:0040B34C                 mov     ebx, ds:dword_4125B0
.text:0040B352                 test    ebx, ebx
.text:0040B354                 jz      short loc_40B3C2
.text:0040B356
.text:0040B356 loc_40B356:                             ; CODE XREF: sub_40B330+10F↓j
.text:0040B356                 mov     ebx, [esp+2Ch+arg_0]
.text:0040B35A                 xor     edi, edi
.text:0040B35C                 xor     esi, esi
.text:0040B35E                 mov     ebp, offset dword_4125D8
.text:0040B363                 lea     esi, [esi+0]
.text:0040B369                 lea     edi, [edi+0]
.text:0040B370
.text:0040B370 loc_40B370:                             ; CODE XREF: sub_40B330+60↓j
.text:0040B370                 mov     edx, [ebp+4]
.text:0040B373                 mov     ecx, edi
.text:0040B375                 mov     eax, [ebp+0]
.text:0040B378                 shl     ecx, 4
.text:0040B37B                 mov     [esp+2Ch+var_18], ecx
.text:0040B37F                 mov     ecx, edx
.text:0040B381                 xor     eax, ebx
.text:0040B383                 xor     ecx, esi
.text:0040B385                 or      ecx, eax
.text:0040B387                 jz      short loc_40B3B1
.text:0040B389                 inc     edi
.text:0040B38A                 add     ebp, 10h
.text:0040B38D                 cmp     edi, 20h ; ' '
.text:0040B390                 jle     short loc_40B370
.text:0040B392
.text:0040B392 loc_40B392:                             ; CODE XREF: sub_40B330+90↓j
.text:0040B392                 movzx   ebx, [esp+2Ch+var_11]
.text:0040B397                 mov     eax, [esp+2Ch+arg_0]
.text:0040B39B                 mov     byte_4110E0, bl
.text:0040B3A1                 mov     ds:dword_4125C0, eax
.text:0040B3A6                 movsx   eax, bl
.text:0040B3A9
.text:0040B3A9 loc_40B3A9:                             ; CODE XREF: sub_40B330+11B↓j
.text:0040B3A9                 add     esp, 1Ch
.text:0040B3AC                 pop     ebx
.text:0040B3AD                 pop     esi
.text:0040B3AE                 pop     edi
.text:0040B3AF                 pop     ebp
.text:0040B3B0                 retn
.text:0040B3B1 ; ---------------------------------------------------------------------------
.text:0040B3B1
.text:0040B3B1 loc_40B3B1:                             ; CODE XREF: sub_40B330+57↑j
.text:0040B3B1                 mov     edx, [esp+2Ch+var_18]
.text:0040B3B5                 movzx   eax, byte ptr ds:dword_4125D0[edx]
.text:0040B3BC                 mov     [esp+2Ch+var_11], al
.text:0040B3C0                 jmp     short loc_40B392
.text:0040B3C2 ; ---------------------------------------------------------------------------
.text:0040B3C2
.text:0040B3C2 loc_40B3C2:                             ; CODE XREF: sub_40B330+24↑j
.text:0040B3C2                 mov     [esp+2Ch+Str], 0
.text:0040B3C9                 call    sub_40CE10
.text:0040B3CE                 test    eax, eax
.text:0040B3D0                 mov     ebx, eax
.text:0040B3D2                 jz      short loc_40B42C
.text:0040B3D4                 movzx   ecx, byte ptr [eax]
.text:0040B3D7                 mov     esi, 0FFFFFFF0h
.text:0040B3DC                 test    cl, cl
.text:0040B3DE                 jz      short loc_40B42C
.text:0040B3E0
.text:0040B3E0 loc_40B3E0:                             ; CODE XREF: sub_40B330+FA↓j
.text:0040B3E0                 mov     [esp+2Ch+Str], ebx ; LPCSTR
.text:0040B3E3                 movsx   ebp, cl
.text:0040B3E6                 add     esi, 10h
.text:0040B3E9                 mov     ds:dword_4125D0[esi], ebp
.text:0040B3EF                 mov     edi, ebp
.text:0040B3F1                 sar     edi, 1Fh
.text:0040B3F4                 mov     ds:dword_4125D4[esi], edi
.text:0040B3FA                 call    sub_408AE0
.text:0040B3FF                 mov     ds:dword_4125D8[esi], eax
.text:0040B405                 xor     ecx, ecx
.text:0040B407                 mov     [esp+2Ch+Str], ebx ; Str
.text:0040B40A                 mov     ds:dword_4125DC[esi], ecx
.text:0040B410                 mov     [esp+2Ch+Val], 0 ; Val
.text:0040B418                 call    strchr
.text:0040B41D                 mov     ebx, eax
.text:0040B41F                 inc     ebx
.text:0040B420                 jz      short loc_40B42C
.text:0040B422                 movzx   edx, byte ptr [eax+1]
.text:0040B426                 test    dl, dl
.text:0040B428                 mov     cl, dl
.text:0040B42A                 jnz     short loc_40B3E0
.text:0040B42C
.text:0040B42C loc_40B42C:                             ; CODE XREF: sub_40B330+A2↑j
.text:0040B42C                                         ; sub_40B330+AE↑j ...
.text:0040B42C                 mov     [esp+2Ch+Str], ebx ; Block
.text:0040B42F                 mov     esi, 1
.text:0040B434                 mov     ds:dword_4125B0, esi
.text:0040B43A                 call    free
.text:0040B43F                 jmp     loc_40B356
.text:0040B444 ; ---------------------------------------------------------------------------
.text:0040B444
.text:0040B444 loc_40B444:                             ; CODE XREF: sub_40B330+16↑j
.text:0040B444                 movsx   eax, byte_4110E0
.text:0040B44B                 jmp     loc_40B3A9
.text:0040B44B sub_40B330      endp
.text:0040B44B
.text:0040B44B ; ---------------------------------------------------------------------------
.text:0040B450 dword_40B450    dd 5C3A20h, 5C3A43h, 26B48D90h, 0
.text:0040B450                                         ; DATA XREF: .text:0040B473↓o
.text:0040B450                                         ; .text:0040B553↓o
.text:0040B460 ; ---------------------------------------------------------------------------
.text:0040B460                 sub     esp, 1Ch
.text:0040B463                 mov     [esp+14h], esi
.text:0040B467                 mov     esi, [esp+20h]
.text:0040B46B                 mov     [esp+18h], edi
.text:0040B46F                 mov     [esp+10h], ebx
.text:0040B473                 mov     dword ptr [esp], offset dword_40B450
.text:0040B47A                 call    _strdup
.text:0040B47F                 mov     [esp], esi
.text:0040B482                 mov     edi, eax
.text:0040B484                 call    sub_40B330
.text:0040B489                 mov     [edi], al
.text:0040B48B                 test    al, al
.text:0040B48D                 jz      short loc_40B4A1
.text:0040B48F                 mov     eax, edi
.text:0040B491                 mov     ebx, [esp+10h]
.text:0040B495                 mov     esi, [esp+14h]
.text:0040B499                 mov     edi, [esp+18h]
.text:0040B49D                 add     esp, 1Ch
.text:0040B4A0                 retn
.text:0040B4A1 ; ---------------------------------------------------------------------------
.text:0040B4A1
.text:0040B4A1 loc_40B4A1:                             ; CODE XREF: .text:0040B48D↑j
.text:0040B4A1                 mov     [esp], edi
.text:0040B4A4                 call    free
.text:0040B4A9                 mov     dword ptr [esp+4], 0
.text:0040B4B1                 mov     dword ptr [esp], 0
.text:0040B4B8                 call    GetCurrentDirectoryA
.text:0040B4BD                 sub     esp, 8
.text:0040B4C0                 lea     esi, [eax+1]
.text:0040B4C3                 mov     [esp], esi
.text:0040B4C6                 call    malloc
.text:0040B4CB                 mov     [esp+4], eax
.text:0040B4CF                 mov     edi, eax
.text:0040B4D1                 mov     [esp], esi
.text:0040B4D4                 call    GetCurrentDirectoryA
.text:0040B4D9                 sub     esp, 8
.text:0040B4DC                 test    eax, eax
.text:0040B4DE                 jnz     short loc_40B500
.text:0040B4E0                 mov     dword ptr [esp+20h], 40B454h
.text:0040B4E8                 mov     ebx, [esp+10h]
.text:0040B4EC                 mov     esi, [esp+14h]
.text:0040B4F0                 mov     edi, [esp+18h]
.text:0040B4F4                 add     esp, 1Ch
.text:0040B4F7                 jmp     _strdup
.text:0040B4F7 ; ---------------------------------------------------------------------------
.text:0040B4FC                 align 10h
.text:0040B500
.text:0040B500 loc_40B500:                             ; CODE XREF: .text:0040B4DE↑j
.text:0040B500                 mov     [esp+20h], edi
.text:0040B504                 mov     ebx, [esp+10h]
.text:0040B508                 mov     esi, [esp+14h]
.text:0040B50C                 mov     edi, [esp+18h]
.text:0040B510                 add     esp, 1Ch
.text:0040B513                 jmp     sub_40B210
.text:0040B513 ; ---------------------------------------------------------------------------
.text:0040B518                 align 10h
.text:0040B520                 sub     esp, 7Ch
.text:0040B523                 lea     edx, [esp+10h]
.text:0040B527                 mov     [esp+8], edx
.text:0040B52B                 mov     edx, [esp+80h]
.text:0040B532                 mov     [esp+70h], ebx
.text:0040B536                 mov     [esp+74h], esi
.text:0040B53A                 mov     [esp+4], edx
.text:0040B53E                 mov     [esp+78h], edi
.text:0040B542                 mov     dword ptr [esp], 0
.text:0040B549                 call    sub_40D020
.text:0040B54E                 xor     edx, edx
.text:0040B550                 inc     eax
.text:0040B551                 jz      short loc_40B575
.text:0040B553                 mov     dword ptr [esp], offset dword_40B450
.text:0040B55A                 mov     esi, [esp+20h]
.text:0040B55E                 call    _strdup
.text:0040B563                 mov     edi, eax
.text:0040B565                 mov     [esp], esi
.text:0040B568                 call    sub_40B330
.text:0040B56D                 mov     [edi], al
.text:0040B56F                 test    al, al
.text:0040B571                 mov     edx, edi
.text:0040B573                 jz      short loc_40B587
.text:0040B575
.text:0040B575 loc_40B575:                             ; CODE XREF: .text:0040B551↑j
.text:0040B575                                         ; .text:0040B5D4↓j
.text:0040B575                 mov     ebx, [esp+70h]
.text:0040B579                 mov     eax, edx
.text:0040B57B                 mov     esi, [esp+74h]
.text:0040B57F                 mov     edi, [esp+78h]
.text:0040B583                 add     esp, 7Ch
.text:0040B586                 retn
.text:0040B587 ; ---------------------------------------------------------------------------
.text:0040B587
.text:0040B587 loc_40B587:                             ; CODE XREF: .text:0040B573↑j
.text:0040B587                 mov     [esp], edi
.text:0040B58A                 call    free
.text:0040B58F                 mov     dword ptr [esp+4], 0
.text:0040B597                 mov     dword ptr [esp], 0
.text:0040B59E                 call    GetCurrentDirectoryA
.text:0040B5A3                 sub     esp, 8
.text:0040B5A6                 lea     esi, [eax+1]
.text:0040B5A9                 mov     [esp], esi
.text:0040B5AC                 call    malloc
.text:0040B5B1                 mov     [esp+4], eax
.text:0040B5B5                 mov     edi, eax
.text:0040B5B7                 mov     [esp], esi
.text:0040B5BA                 call    GetCurrentDirectoryA
.text:0040B5BF                 sub     esp, 8
.text:0040B5C2                 test    eax, eax
.text:0040B5C4                 jnz     short loc_40B5D6
.text:0040B5C6                 mov     dword ptr [esp], 40B454h
.text:0040B5CD                 call    _strdup
.text:0040B5D2
.text:0040B5D2 loc_40B5D2:                             ; CODE XREF: .text:0040B5DE↓j
.text:0040B5D2                 mov     edx, eax
.text:0040B5D4                 jmp     short loc_40B575
.text:0040B5D6 ; ---------------------------------------------------------------------------
.text:0040B5D6
.text:0040B5D6 loc_40B5D6:                             ; CODE XREF: .text:0040B5C4↑j
.text:0040B5D6                 mov     [esp], edi
.text:0040B5D9                 call    sub_40B210
.text:0040B5DE                 jmp     short loc_40B5D2
.text:0040B5E0
.text:0040B5E0 ; =============== S U B R O U T I N E =======================================
.text:0040B5E0
.text:0040B5E0
.text:0040B5E0 ; int __cdecl sub_40B5E0(LPCSTR)
.text:0040B5E0 sub_40B5E0      proc near               ; CODE XREF: sub_407F90+12F↑p
.text:0040B5E0
.text:0040B5E0 String1         = dword ptr -1Ch
.text:0040B5E0 String2         = dword ptr -18h
.text:0040B5E0 var_C           = dword ptr -0Ch
.text:0040B5E0 var_8           = dword ptr -8
.text:0040B5E0 var_4           = dword ptr -4
.text:0040B5E0 arg_0           = dword ptr  4
.text:0040B5E0
.text:0040B5E0                 sub     esp, 1Ch
.text:0040B5E3                 mov     [esp+1Ch+var_4], edi
.text:0040B5E7                 mov     edi, [esp+1Ch+arg_0]
.text:0040B5EB                 mov     [esp+1Ch+var_C], ebx
.text:0040B5EF                 mov     [esp+1Ch+var_8], esi
.text:0040B5F3                 mov     [esp+1Ch+String1], edi ; LPCSTR
.text:0040B5F6                 call    sub_40AFE0
.text:0040B5FB                 mov     [esp+1Ch+String1], edi ; LPCSTR
.text:0040B5FE                 mov     esi, eax
.text:0040B600                 call    sub_40B210
.text:0040B605                 mov     [esp+1Ch+String2], eax ; String2
.text:0040B609                 mov     ebx, eax
.text:0040B60B                 mov     [esp+1Ch+String1], esi ; String1
.text:0040B60E                 call    _stricmp
.text:0040B613                 test    eax, eax
.text:0040B615                 setz    dl
.text:0040B618                 test    esi, esi
.text:0040B61A                 movzx   edi, dl
.text:0040B61D                 jz      short loc_40B627
.text:0040B61F                 mov     [esp+1Ch+String1], esi ; Block
.text:0040B622                 call    free
.text:0040B627
.text:0040B627 loc_40B627:                             ; CODE XREF: sub_40B5E0+3D↑j
.text:0040B627                 test    ebx, ebx
.text:0040B629                 jz      short loc_40B633
.text:0040B62B                 mov     [esp+1Ch+String1], ebx ; Block
.text:0040B62E                 call    free
.text:0040B633
.text:0040B633 loc_40B633:                             ; CODE XREF: sub_40B5E0+49↑j
.text:0040B633                 mov     eax, edi
.text:0040B635                 mov     ebx, [esp+1Ch+var_C]
.text:0040B639                 mov     esi, [esp+1Ch+var_8]
.text:0040B63D                 mov     edi, [esp+1Ch+var_4]
.text:0040B641                 add     esp, 1Ch
.text:0040B644                 retn
.text:0040B644 sub_40B5E0      endp
.text:0040B644
.text:0040B644 ; ---------------------------------------------------------------------------
.text:0040B645                 align 10h
.text:0040B650 aKernel32_0     db 'KERNEL32',0         ; DATA XREF: .text:0040B6A1↓o
.text:0040B659 aGetdiskfreespa db 'GetDiskFreeSpaceExA',0
.text:0040B659                                         ; DATA XREF: .text:0040B6B2↓o
.text:0040B66D ; const CHAR aVwin32[]
.text:0040B66D aVwin32         db '\\.\vwin32',0       ; DATA XREF: .text:0040B7FC↓o
.text:0040B66D                                         ; sub_40BC30+17C↓o
.text:0040B678 ; ---------------------------------------------------------------------------
.text:0040B678
.text:0040B678 loc_40B678:                             ; DATA XREF: .text:0040B912↓o
.text:0040B678                 dec     esi
.text:0040B679                 push    esp
.text:0040B67A                 inc     esi
.text:0040B67B                 push    ebx
.text:0040B67C                 add     [esi+41h], al
.text:0040B67F                 push    esp
.text:0040B680                 xor     esi, [edx]
.text:0040B682                 add     [esi+41h], al
.text:0040B685                 push    esp
.text:0040B686                 add     [ebx+44h], al
.text:0040B689                 inc     esi
.text:0040B68A                 push    ebx
.text:0040B68B
.text:0040B68B loc_40B68B:                             ; CODE XREF: sub_40BC30+101↓p
.text:0040B68B                 add     [ebp+55002674h], cl
.text:0040B691                 push    edi
.text:0040B692                 push    esi
.text:0040B693                 push    ebx
.text:0040B694                 sub     esp, 8BCh
.text:0040B69A                 mov     ebp, [esp+8D0h]
.text:0040B6A1                 mov     dword ptr [esp], offset aKernel32_0 ; "KERNEL32"
.text:0040B6A8                 call    LoadLibraryA
.text:0040B6AD                 sub     esp, 4
.text:0040B6B0                 mov     edi, eax
.text:0040B6B2                 mov     dword ptr [esp+4], offset aGetdiskfreespa ; "GetDiskFreeSpaceExA"
.text:0040B6BA                 mov     [esp], eax
.text:0040B6BD                 call    GetProcAddress
.text:0040B6C2                 sub     esp, 8
.text:0040B6C5                 mov     esi, eax
.text:0040B6C7                 test    ebp, ebp
.text:0040B6C9                 mov     dword ptr [esp+20h], 0
.text:0040B6D1                 jz      loc_40BC11
.text:0040B6D7                 mov     [esp], ebp
.text:0040B6DA                 call    sub_407710
.text:0040B6DF                 mov     [esp], eax
.text:0040B6E2                 mov     ebp, eax
.text:0040B6E4                 call    strlen
.text:0040B6E9                 cmp     byte ptr [eax+ebp-1], 5Ch ; '\'
.text:0040B6EE                 mov     ebx, eax
.text:0040B6F0                 jz      short loc_40B70C
.text:0040B6F2                 mov     [esp], ebp
.text:0040B6F5                 lea     edx, [eax+1]
.text:0040B6F8                 mov     [esp+4], edx
.text:0040B6FC                 call    realloc
.text:0040B701                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:0040B705                 mov     ebp, eax
.text:0040B707                 mov     byte ptr [ebx+eax+1], 0
.text:0040B70C
.text:0040B70C loc_40B70C:                             ; CODE XREF: .text:0040B6F0↑j
.text:0040B70C                 mov     dword ptr [esp+1Ch], 400h
.text:0040B714                 lea     edx, [esp+0B0h]
.text:0040B71B                 lea     ebx, [esp+5Ch]
.text:0040B71F                 mov     [esp+18h], edx
.text:0040B723                 lea     ecx, [esp+58h]
.text:0040B727                 lea     edx, [esp+54h]
.text:0040B72B                 mov     [esp+14h], ebx
.text:0040B72F                 lea     eax, [esp+4B0h]
.text:0040B736                 mov     [esp+10h], ecx
.text:0040B73A                 mov     [esp+0Ch], edx
.text:0040B73E                 mov     dword ptr [esp+8], 400h
.text:0040B746                 mov     [esp+4], eax
.text:0040B74A                 mov     [esp], ebp
.text:0040B74D                 call    GetVolumeInformationA
.text:0040B752                 sub     esp, 20h
.text:0040B755                 test    eax, eax
.text:0040B757                 jz      loc_40BBEE
.text:0040B75D                 test    esi, esi
.text:0040B75F                 jz      short loc_40B785
.text:0040B761                 mov     [esp], ebp
.text:0040B764                 lea     edx, [esp+48h]
.text:0040B768                 lea     ebx, [esp+40h]
.text:0040B76C                 mov     [esp+0Ch], edx
.text:0040B770                 lea     ecx, [esp+38h]
.text:0040B774                 mov     [esp+8], ebx
.text:0040B778                 mov     [esp+4], ecx
.text:0040B77C                 call    esi
.text:0040B77E                 sub     esp, 10h
.text:0040B781                 mov     [esp+20h], eax
.text:0040B785
.text:0040B785 loc_40B785:                             ; CODE XREF: .text:0040B75F↑j
.text:0040B785                 test    edi, edi
.text:0040B787                 jz      short loc_40B794
.text:0040B789                 mov     [esp], edi
.text:0040B78C                 call    FreeLibrary
.text:0040B791                 sub     esp, 4
.text:0040B794
.text:0040B794 loc_40B794:                             ; CODE XREF: .text:0040B787↑j
.text:0040B794                 call    sub_40AD00
.text:0040B799                 test    eax, eax
.text:0040B79B                 lea     esi, [esp+28h]
.text:0040B79F                 jz      loc_40BBD0
.text:0040B7A5                 call    sub_40AD00
.text:0040B7AA                 test    eax, eax
.text:0040B7AC                 jz      short loc_40B7BC
.text:0040B7AE                 call    sub_40AC50
.text:0040B7B3                 cmp     eax, 0Bh
.text:0040B7B6                 jle     loc_40BBA4
.text:0040B7BC
.text:0040B7BC loc_40B7BC:                             ; CODE XREF: .text:0040B7AC↑j
.text:0040B7BC                 cld
.text:0040B7BD                 xor     eax, eax
.text:0040B7BF                 lea     ebx, [esp+60h]
.text:0040B7C3                 mov     ecx, 7
.text:0040B7C8                 mov     edi, ebx
.text:0040B7CA                 rep stosd
.text:0040B7CC                 mov     dword ptr [esp+18h], 0
.text:0040B7D4                 mov     dword ptr [esp+14h], 4000000h
.text:0040B7DC                 mov     dword ptr [esp+10h], 0
.text:0040B7E4                 mov     dword ptr [esp+0Ch], 0
.text:0040B7EC                 mov     dword ptr [esp+8], 0
.text:0040B7F4                 mov     dword ptr [esp+4], 0
.text:0040B7FC                 mov     dword ptr [esp], offset aVwin32 ; "\\\\.\\vwin32"
.text:0040B803                 call    CreateFileA
.text:0040B808                 sub     esp, 1Ch
.text:0040B80B                 mov     edi, eax
.text:0040B80D                 cmp     eax, 0FFFFFFFFh
.text:0040B810                 jz      short loc_40B890
.text:0040B812                 mov     [esp+10h], ebx
.text:0040B816                 lea     edx, [esp+80h]
.text:0040B81D                 lea     ecx, [esp+24h]
.text:0040B821                 mov     [esp+70h], edx
.text:0040B825                 mov     [esp+18h], ecx
.text:0040B829                 mov     [esp+8], ebx
.text:0040B82D                 mov     dword ptr [esp+6Ch], 7303h
.text:0040B835                 mov     dword ptr [esp+68h], 2Ch ; ','
.text:0040B83D                 mov     [esp+64h], ebp
.text:0040B841                 mov     dword ptr [esp+78h], 1
.text:0040B849                 mov     dword ptr [esp+1Ch], 0
.text:0040B851                 mov     dword ptr [esp+14h], 1Ch
.text:0040B859                 mov     dword ptr [esp+0Ch], 1Ch
.text:0040B861                 mov     dword ptr [esp+4], 6
.text:0040B869                 mov     [esp], eax
.text:0040B86C                 call    DeviceIoControl
.text:0040B871                 sub     esp, 20h
.text:0040B874                 mov     ebx, eax
.text:0040B876                 mov     [esp], edi
.text:0040B879                 call    CloseHandle
.text:0040B87E                 sub     esp, 4
.text:0040B881                 test    ebx, ebx
.text:0040B883                 jz      short loc_40B890
.text:0040B885                 test    byte ptr [esp+78h], 1
.text:0040B88A                 jz      loc_40BB70
.text:0040B890
.text:0040B890 loc_40B890:                             ; CODE XREF: .text:0040B810↑j
.text:0040B890                                         ; .text:0040B883↑j
.text:0040B890                 call    sub_407DC0
.text:0040B895                 mov     edi, eax
.text:0040B897                 call    _errno
.text:0040B89C                 mov     [eax], edi
.text:0040B89E                 xor     eax, eax
.text:0040B8A0
.text:0040B8A0 loc_40B8A0:                             ; CODE XREF: .text:0040BB9F↓j
.text:0040B8A0                                         ; .text:0040BBCB↓j
.text:0040B8A0                 test    eax, eax
.text:0040B8A2                 jnz     short loc_40B8C4
.text:0040B8A4                 mov     dword ptr [esp+34h], 1
.text:0040B8AC                 mov     dword ptr [esp+30h], 200h
.text:0040B8B4                 mov     dword ptr [esp+2Ch], 0
.text:0040B8BC                 mov     dword ptr [esp+28h], 0
.text:0040B8C4
.text:0040B8C4 loc_40B8C4:                             ; CODE XREF: .text:0040B8A2↑j
.text:0040B8C4                 mov     edx, [esp+30h]
.text:0040B8C8                 mov     edi, [esp+34h]
.text:0040B8CC                 mov     ecx, [esp+20h]
.text:0040B8D0                 imul    edi, edx
.text:0040B8D3                 test    ecx, ecx
.text:0040B8D5                 jnz     short loc_40B8FD
.text:0040B8D7                 mov     eax, [esp+28h]
.text:0040B8DB                 mul     edi
.text:0040B8DD                 mov     esi, eax
.text:0040B8DF                 mov     eax, [esp+2Ch]
.text:0040B8E3                 mov     [esp+44h], edx
.text:0040B8E7                 mov     [esp+40h], esi
.text:0040B8EB                 mul     edi
.text:0040B8ED                 mov     [esp+48h], eax
.text:0040B8F1                 mov     [esp+4Ch], edx
.text:0040B8F5                 mov     [esp+38h], eax
.text:0040B8F9                 mov     [esp+3Ch], edx
.text:0040B8FD
.text:0040B8FD loc_40B8FD:                             ; CODE XREF: .text:0040B8D5↑j
.text:0040B8FD                 mov     ebx, [esp+5Ch]
.text:0040B901                 lea     edx, [esp+0B0h]
.text:0040B908                 mov     ecx, [esp+8D4h]
.text:0040B90F                 mov     [ecx+48h], ebx
.text:0040B912                 mov     dword ptr [esp+4], offset loc_40B678
.text:0040B91A                 mov     [esp], edx
.text:0040B91D                 call    _stricmp
.text:0040B922                 test    eax, eax
.text:0040B924                 jnz     loc_40BAE0
.text:0040B92A                 mov     esi, [esp+8D4h]
.text:0040B931                 mov     dword ptr [esi], 5346544Eh
.text:0040B937
.text:0040B937 loc_40B937:                             ; CODE XREF: .text:0040BB08↓j
.text:0040B937                                         ; .text:0040BB35↓j ...
.text:0040B937                 mov     ebx, [esp+30h]
.text:0040B93B                 mov     esi, [esp+8D4h]
.text:0040B942                 mov     [esi+4], ebx
.text:0040B945                 mov     [esi+8], ebx
.text:0040B948                 mov     ebx, [esi+8]
.text:0040B94B                 mov     [esi+0Ch], edi
.text:0040B94E                 mov     ecx, [esp+44h]
.text:0040B952                 xor     esi, esi
.text:0040B954                 mov     [esp+8], ebx
.text:0040B958                 mov     edx, [esp+40h]
.text:0040B95C                 mov     [esp+0Ch], esi
.text:0040B960                 mov     [esp+4], ecx
.text:0040B964                 mov     [esp], edx
.text:0040B967                 call    sub_40F900
.text:0040B96C                 mov     ecx, [esp+8D4h]
.text:0040B973                 mov     [ecx+10h], eax
.text:0040B976                 mov     [ecx+14h], edx
.text:0040B979                 mov     ecx, [esp+4Ch]
.text:0040B97D                 mov     [esp+8], ebx
.text:0040B981                 mov     edx, [esp+48h]
.text:0040B985                 mov     [esp+0Ch], esi
.text:0040B989                 mov     [esp+4], ecx
.text:0040B98D                 mov     [esp], edx
.text:0040B990                 call    sub_40F900
.text:0040B995                 mov     ecx, [esp+8D4h]
.text:0040B99C                 mov     [ecx+18h], eax
.text:0040B99F                 mov     [ecx+1Ch], edx
.text:0040B9A2                 mov     ecx, [esp+38h]
.text:0040B9A6                 mov     [esp+8], ebx
.text:0040B9AA                 mov     ebx, [esp+3Ch]
.text:0040B9AE                 mov     [esp+0Ch], esi
.text:0040B9B2                 mov     [esp], ecx
.text:0040B9B5                 mov     [esp+4], ebx
.text:0040B9B9                 call    sub_40F900
.text:0040B9BE                 mov     esi, [esp+8D4h]
.text:0040B9C5                 mov     [esi+20h], eax
.text:0040B9C8                 mov     [esi+24h], edx
.text:0040B9CB                 mov     ecx, [esp+44h]
.text:0040B9CF                 mov     esi, edi
.text:0040B9D1                 mov     [esp+8], esi
.text:0040B9D5                 mov     edx, [esp+40h]
.text:0040B9D9                 xor     edi, edi
.text:0040B9DB                 mov     [esp+0Ch], edi
.text:0040B9DF                 mov     [esp+4], ecx
.text:0040B9E3                 mov     [esp], edx
.text:0040B9E6                 call    sub_40F900
.text:0040B9EB                 mov     ebx, [esp+8D4h]
.text:0040B9F2                 mov     [ebx+28h], eax
.text:0040B9F5                 mov     [ebx+2Ch], edx
.text:0040B9F8                 mov     ecx, [esp+4Ch]
.text:0040B9FC                 mov     [esp+8], esi
.text:0040BA00                 mov     edx, [esp+48h]
.text:0040BA04                 mov     [esp+0Ch], edi
.text:0040BA08                 mov     [esp+4], ecx
.text:0040BA0C                 mov     [esp], edx
.text:0040BA0F                 call    sub_40F900
.text:0040BA14                 mov     ebx, [esp+8D4h]
.text:0040BA1B                 mov     [ebx+30h], eax
.text:0040BA1E                 mov     [ebx+34h], edx
.text:0040BA21                 mov     ecx, [esp+3Ch]
.text:0040BA25                 mov     [esp+8], esi
.text:0040BA29                 mov     edx, [esp+38h]
.text:0040BA2D                 mov     [esp+0Ch], edi
.text:0040BA31                 mov     [esp+4], ecx
.text:0040BA35                 mov     [esp], edx
.text:0040BA38                 call    sub_40F900
.text:0040BA3D                 mov     edx, [esp+8D4h]
.text:0040BA44                 lea     ecx, [esp+0B0h]
.text:0040BA4B                 mov     [edx+38h], eax
.text:0040BA4E                 mov     esi, [esp+58h]
.text:0040BA52                 mov     dword ptr [edx+44h], 0FFFFFFFFh
.text:0040BA59                 mov     [edx+110h], esi
.text:0040BA5F                 mov     esi, edx
.text:0040BA61                 add     esi, 4Ch ; 'L'
.text:0040BA64                 movzx   ebx, word ptr [esp+56h]
.text:0040BA69                 movzx   edi, word ptr [esp+54h]
.text:0040BA6E                 mov     [edx+3Ch], ebx
.text:0040BA71                 lea     ebx, [esp+4B0h]
.text:0040BA78                 mov     [edx+40h], edi
.text:0040BA7B                 mov     [esp+4], ecx
.text:0040BA7F                 mov     dword ptr [esp+8], 10h
.text:0040BA87                 mov     [esp], esi
.text:0040BA8A                 call    strncpy
.text:0040BA8F                 mov     dword ptr [esp+8], 5Ah ; 'Z'
.text:0040BA97                 mov     edi, [esp+8D4h]
.text:0040BA9E                 mov     [esp+4], ebx
.text:0040BAA2                 add     edi, 5Ch ; '\'
.text:0040BAA5                 mov     [esp], edi
.text:0040BAA8                 call    strncpy
.text:0040BAAD                 mov     [esp+4], ebp
.text:0040BAB1                 mov     ebp, [esp+8D4h]
.text:0040BAB8                 mov     dword ptr [esp+8], 5Ah ; 'Z'
.text:0040BAC0                 add     ebp, 0B6h ; '¶'
.text:0040BAC6                 mov     [esp], ebp
.text:0040BAC9                 call    strncpy
.text:0040BACE                 xor     eax, eax
.text:0040BAD0
.text:0040BAD0 loc_40BAD0:                             ; CODE XREF: .text:0040BC0C↓j
.text:0040BAD0                 add     esp, 8BCh
.text:0040BAD6                 pop     ebx
.text:0040BAD7                 pop     esi
.text:0040BAD8                 pop     edi
.text:0040BAD9                 pop     ebp
.text:0040BADA                 retn
.text:0040BADA ; ---------------------------------------------------------------------------
.text:0040BADB                 align 10h
.text:0040BAE0
.text:0040BAE0 loc_40BAE0:                             ; CODE XREF: .text:0040B924↑j
.text:0040BAE0                 mov     dword ptr [esp+4], 40B67Dh
.text:0040BAE8                 lea     eax, [esp+0B0h]
.text:0040BAEF                 mov     [esp], eax
.text:0040BAF2                 call    _stricmp
.text:0040BAF7                 test    eax, eax
.text:0040BAF9                 jnz     short loc_40BB0D
.text:0040BAFB                 mov     edx, [esp+8D4h]
.text:0040BB02                 mov     dword ptr [edx], 4008h
.text:0040BB08                 jmp     loc_40B937
.text:0040BB0D ; ---------------------------------------------------------------------------
.text:0040BB0D
.text:0040BB0D loc_40BB0D:                             ; CODE XREF: .text:0040BAF9↑j
.text:0040BB0D                 mov     dword ptr [esp+4], 40B683h
.text:0040BB15                 lea     ecx, [esp+0B0h]
.text:0040BB1C                 mov     [esp], ecx
.text:0040BB1F                 call    _stricmp
.text:0040BB24                 test    eax, eax
.text:0040BB26                 jnz     short loc_40BB3A
.text:0040BB28                 mov     ebx, [esp+8D4h]
.text:0040BB2F                 mov     dword ptr [ebx], 4006h
.text:0040BB35                 jmp     loc_40B937
.text:0040BB3A ; ---------------------------------------------------------------------------
.text:0040BB3A
.text:0040BB3A loc_40BB3A:                             ; CODE XREF: .text:0040BB26↑j
.text:0040BB3A                 mov     dword ptr [esp+4], 40B687h
.text:0040BB42                 lea     eax, [esp+0B0h]
.text:0040BB49                 mov     [esp], eax
.text:0040BB4C                 call    _stricmp
.text:0040BB51                 test    eax, eax
.text:0040BB53                 mov     esi, [esp+8D4h]
.text:0040BB5A                 setnz   cl
.text:0040BB5D                 movzx   edx, cl
.text:0040BB60                 dec     edx
.text:0040BB61                 and     edx, 4000h
.text:0040BB67                 mov     [esi], edx
.text:0040BB69                 jmp     loc_40B937
.text:0040BB69 ; ---------------------------------------------------------------------------
.text:0040BB6E                 align 10h
.text:0040BB70
.text:0040BB70 loc_40BB70:                             ; CODE XREF: .text:0040B88A↑j
.text:0040BB70                 mov     edi, [esp+84h]
.text:0040BB77                 mov     eax, 1
.text:0040BB7C                 mov     edx, [esp+88h]
.text:0040BB83                 mov     ecx, [esp+8Ch]
.text:0040BB8A                 mov     ebx, [esp+90h]
.text:0040BB91                 mov     [esp+34h], edi
.text:0040BB95                 mov     [esp+30h], edx
.text:0040BB99                 mov     [esp+2Ch], ecx
.text:0040BB9D                 mov     [esi], ebx
.text:0040BB9F                 jmp     loc_40B8A0
.text:0040BBA4 ; ---------------------------------------------------------------------------
.text:0040BBA4
.text:0040BBA4 loc_40BBA4:                             ; CODE XREF: .text:0040B7B6↑j
.text:0040BBA4                 mov     [esp+10h], esi
.text:0040BBA8                 lea     eax, [esp+2Ch]
.text:0040BBAC                 lea     esi, [esp+30h]
.text:0040BBB0                 mov     [esp+0Ch], eax
.text:0040BBB4                 lea     edi, [esp+34h]
.text:0040BBB8                 mov     [esp+8], esi
.text:0040BBBC                 mov     [esp+4], edi
.text:0040BBC0
.text:0040BBC0 loc_40BBC0:                             ; CODE XREF: .text:0040BBEC↓j
.text:0040BBC0                 mov     [esp], ebp
.text:0040BBC3                 call    GetDiskFreeSpaceA
.text:0040BBC8                 sub     esp, 14h
.text:0040BBCB                 jmp     loc_40B8A0
.text:0040BBD0 ; ---------------------------------------------------------------------------
.text:0040BBD0
.text:0040BBD0 loc_40BBD0:                             ; CODE XREF: .text:0040B79F↑j
.text:0040BBD0                 mov     [esp+10h], esi
.text:0040BBD4                 lea     ebx, [esp+2Ch]
.text:0040BBD8                 lea     eax, [esp+30h]
.text:0040BBDC                 mov     [esp+0Ch], ebx
.text:0040BBE0                 lea     esi, [esp+34h]
.text:0040BBE4                 mov     [esp+8], eax
.text:0040BBE8                 mov     [esp+4], esi
.text:0040BBEC                 jmp     short loc_40BBC0
.text:0040BBEE ; ---------------------------------------------------------------------------
.text:0040BBEE
.text:0040BBEE loc_40BBEE:                             ; CODE XREF: .text:0040B757↑j
.text:0040BBEE                 mov     [esp], edi
.text:0040BBF1                 call    FreeLibrary
.text:0040BBF6                 sub     esp, 4
.text:0040BBF9                 call    sub_407DC0
.text:0040BBFE                 mov     esi, eax
.text:0040BC00                 call    _errno
.text:0040BC05                 mov     [eax], esi
.text:0040BC07
.text:0040BC07 loc_40BC07:                             ; CODE XREF: .text:0040BC27↓j
.text:0040BC07                 mov     eax, 0FFFFFFFFh
.text:0040BC0C                 jmp     loc_40BAD0
.text:0040BC11 ; ---------------------------------------------------------------------------
.text:0040BC11
.text:0040BC11 loc_40BC11:                             ; CODE XREF: .text:0040B6D1↑j
.text:0040BC11                 mov     [esp], edi
.text:0040BC14                 call    FreeLibrary
.text:0040BC19                 sub     esp, 4
.text:0040BC1C                 call    _errno
.text:0040BC21                 mov     dword ptr [eax], 2
.text:0040BC27                 jmp     short loc_40BC07
.text:0040BC27 ; ---------------------------------------------------------------------------
.text:0040BC29                 align 10h
.text:0040BC30
.text:0040BC30 ; =============== S U B R O U T I N E =======================================
.text:0040BC30
.text:0040BC30
.text:0040BC30 ; int __cdecl sub_40BC30(LPCSTR, LPDWORD, LPDWORD, LPDWORD, LPDWORD)
.text:0040BC30 sub_40BC30      proc near               ; CODE XREF: sub_4085E0+2C7↑p
.text:0040BC30                                         ; .text:00408C1A↑p
.text:0040BC30
.text:0040BC30 lpFileName      = dword ptr -9Ch
.text:0040BC30 dwDesiredAccess = dword ptr -98h
.text:0040BC30 dwShareMode     = dword ptr -94h
.text:0040BC30 lpSecurityAttributes= dword ptr -90h
.text:0040BC30 dwCreationDisposition= dword ptr -8Ch
.text:0040BC30 dwFlagsAndAttributes= dword ptr -88h
.text:0040BC30 hTemplateFile   = dword ptr -84h
.text:0040BC30 lpOverlapped    = dword ptr -80h
.text:0040BC30 BytesReturned   = dword ptr -70h
.text:0040BC30 InBuffer        = byte ptr -6Ch
.text:0040BC30 var_68          = dword ptr -68h
.text:0040BC30 var_64          = dword ptr -64h
.text:0040BC30 var_60          = dword ptr -60h
.text:0040BC30 var_5C          = dword ptr -5Ch
.text:0040BC30 var_54          = dword ptr -54h
.text:0040BC30 var_4C          = byte ptr -4Ch
.text:0040BC30 var_48          = dword ptr -48h
.text:0040BC30 var_44          = dword ptr -44h
.text:0040BC30 var_40          = dword ptr -40h
.text:0040BC30 var_3C          = dword ptr -3Ch
.text:0040BC30 lpRootPathName  = dword ptr -2Ch
.text:0040BC30 lpSectorsPerCluster= dword ptr -28h
.text:0040BC30 lpBytesPerSector= dword ptr -24h
.text:0040BC30 lpNumberOfFreeClusters= dword ptr -20h
.text:0040BC30 lpTotalNumberOfClusters= dword ptr -1Ch
.text:0040BC30 var_18          = dword ptr -18h
.text:0040BC30 var_14          = dword ptr -14h
.text:0040BC30 var_10          = dword ptr -10h
.text:0040BC30 var_C           = dword ptr -0Ch
.text:0040BC30 var_8           = dword ptr -8
.text:0040BC30 var_4           = dword ptr -4
.text:0040BC30 arg_0           = dword ptr  4
.text:0040BC30 arg_4           = dword ptr  8
.text:0040BC30 arg_8           = dword ptr  0Ch
.text:0040BC30 arg_C           = dword ptr  10h
.text:0040BC30 arg_10          = dword ptr  14h
.text:0040BC30
.text:0040BC30                 sub     esp, 2Ch
.text:0040BC33                 mov     edx, [esp+2Ch+arg_0]
.text:0040BC37                 mov     [esp+2Ch+var_10], ebx
.text:0040BC3B                 mov     ebx, [esp+2Ch+arg_10]
.text:0040BC3F                 mov     [esp+2Ch+var_C], esi
.text:0040BC43                 mov     esi, [esp+2Ch+arg_C]
.text:0040BC47                 mov     [esp+2Ch+var_8], edi
.text:0040BC4B                 mov     edi, [esp+2Ch+arg_8]
.text:0040BC4F                 mov     [esp+2Ch+var_4], ebp
.text:0040BC53                 mov     ebp, [esp+2Ch+arg_4]
.text:0040BC57                 mov     [esp+2Ch+var_14], edx
.text:0040BC5B                 call    sub_40AD00
.text:0040BC60                 test    eax, eax
.text:0040BC62                 jz      short loc_40BC94
.text:0040BC64                 mov     [esp+2Ch+arg_10], ebx
.text:0040BC68                 mov     edx, [esp+2Ch+var_14]
.text:0040BC6C                 mov     ebx, [esp+2Ch+var_10]
.text:0040BC70                 mov     [esp+2Ch+arg_C], esi
.text:0040BC74                 mov     esi, [esp+2Ch+var_C]
.text:0040BC78                 mov     [esp+2Ch+arg_8], edi
.text:0040BC7C                 mov     edi, [esp+2Ch+var_8]
.text:0040BC80                 mov     [esp+2Ch+arg_4], ebp
.text:0040BC84                 mov     ebp, [esp+2Ch+var_4]
.text:0040BC88                 mov     [esp+2Ch+arg_0], edx
.text:0040BC8C                 add     esp, 2Ch
.text:0040BC8F                 jmp     loc_40BD40
.text:0040BC94 ; ---------------------------------------------------------------------------
.text:0040BC94
.text:0040BC94 loc_40BC94:                             ; CODE XREF: sub_40BC30+32↑j
.text:0040BC94                 mov     [esp+2Ch+lpTotalNumberOfClusters], ebx ; lpTotalNumberOfClusters
.text:0040BC98                 mov     ecx, [esp+2Ch+var_14]
.text:0040BC9C                 mov     [esp+2Ch+lpNumberOfFreeClusters], esi ; lpNumberOfFreeClusters
.text:0040BCA0                 mov     [esp+2Ch+lpBytesPerSector], edi ; lpBytesPerSector
.text:0040BCA4                 mov     [esp+2Ch+lpSectorsPerCluster], ebp ; lpSectorsPerCluster
.text:0040BCA8                 mov     [esp+2Ch+lpRootPathName], ecx ; lpRootPathName
.text:0040BCAB                 call    GetDiskFreeSpaceA
.text:0040BCB0                 sub     esp, 14h
.text:0040BCB3                 mov     ebx, [esp+2Ch+var_10]
.text:0040BCB7                 mov     esi, [esp+2Ch+var_C]
.text:0040BCBB                 mov     edi, [esp+2Ch+var_8]
.text:0040BCBF                 mov     ebp, [esp+2Ch+var_4]
.text:0040BCC3                 add     esp, 2Ch
.text:0040BCC6                 retn
.text:0040BCC6 ; ---------------------------------------------------------------------------
.text:0040BCC7                 align 10h
.text:0040BCD0
.text:0040BCD0 loc_40BCD0:                             ; CODE XREF: .text:0040C34D↓p
.text:0040BCD0                 sub     esp, 1Ch
.text:0040BCD3                 mov     [esp+1Ch+var_4], esi
.text:0040BCD7                 mov     esi, [esp+1Ch+arg_0]
.text:0040BCDB                 mov     [esp+1Ch+var_8], ebx
.text:0040BCDF                 mov     [esp+1Ch+lpTotalNumberOfClusters], esi ; LPCSTR
.text:0040BCE2                 call    sub_40B210
.text:0040BCE7                 test    eax, eax
.text:0040BCE9                 mov     ebx, eax
.text:0040BCEB                 jz      short loc_40BD00
.text:0040BCED                 cmp     byte ptr [eax], 0
.text:0040BCF0                 jz      short loc_40BD00
.text:0040BCF2                 test    esi, esi
.text:0040BCF4                 jz      short loc_40BD00
.text:0040BCF6                 cmp     byte ptr [esi], 0
.text:0040BCF9                 jnz     short loc_40BD26
.text:0040BCFB                 nop
.text:0040BCFC                 lea     esi, [esi+0]
.text:0040BD00
.text:0040BD00 loc_40BD00:                             ; CODE XREF: sub_40BC30+BB↑j
.text:0040BD00                                         ; sub_40BC30+C0↑j ...
.text:0040BD00                 call    _errno
.text:0040BD05                 mov     dword ptr [eax], 2
.text:0040BD0B                 mov     esi, 0FFFFFFFFh
.text:0040BD10
.text:0040BD10 loc_40BD10:                             ; CODE XREF: sub_40BC30+108↓j
.text:0040BD10                 mov     [esp+1Ch+lpTotalNumberOfClusters], ebx ; Block
.text:0040BD13                 call    free
.text:0040BD18                 mov     eax, esi
.text:0040BD1A                 mov     ebx, [esp+1Ch+var_8]
.text:0040BD1E                 mov     esi, [esp+1Ch+var_4]
.text:0040BD22                 add     esp, 1Ch
.text:0040BD25                 retn
.text:0040BD26 ; ---------------------------------------------------------------------------
.text:0040BD26
.text:0040BD26 loc_40BD26:                             ; CODE XREF: sub_40BC30+C9↑j
.text:0040BD26                 mov     [esp+1Ch+lpTotalNumberOfClusters], eax
.text:0040BD29                 mov     edx, [esp+1Ch+arg_4]
.text:0040BD2D                 mov     [esp+1Ch+var_18], edx
.text:0040BD31                 call    near ptr loc_40B68B+5
.text:0040BD36                 mov     esi, eax
.text:0040BD38                 jmp     short loc_40BD10
.text:0040BD38 ; ---------------------------------------------------------------------------
.text:0040BD3A                 align 10h
.text:0040BD40
.text:0040BD40 loc_40BD40:                             ; CODE XREF: sub_40BC30+5F↑j
.text:0040BD40                 push    ebp
.text:0040BD41                 push    edi
.text:0040BD42                 push    esi
.text:0040BD43                 push    ebx
.text:0040BD44                 sub     esp, 8Ch
.text:0040BD4A                 mov     ebp, [esp+9Ch+arg_0]
.text:0040BD51                 call    sub_40AD00
.text:0040BD56                 test    eax, eax
.text:0040BD58                 jz      short loc_40BD68
.text:0040BD5A                 call    sub_40AC50
.text:0040BD5F                 cmp     eax, 0Bh
.text:0040BD62                 jle     loc_40BE90
.text:0040BD68
.text:0040BD68 loc_40BD68:                             ; CODE XREF: sub_40BC30+128↑j
.text:0040BD68                 cld
.text:0040BD69                 xor     eax, eax
.text:0040BD6B                 lea     ebx, [esp+9Ch+InBuffer]
.text:0040BD6F                 mov     ecx, 7
.text:0040BD74                 mov     edi, ebx
.text:0040BD76                 lea     esi, [esp+9Ch+var_4C]
.text:0040BD7A                 rep stosd
.text:0040BD7C                 mov     [esp+9Ch+hTemplateFile], 0 ; hTemplateFile
.text:0040BD84                 mov     [esp+9Ch+dwFlagsAndAttributes], 4000000h ; dwFlagsAndAttributes
.text:0040BD8C                 mov     [esp+9Ch+dwCreationDisposition], 0 ; dwCreationDisposition
.text:0040BD94                 mov     [esp+9Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:0040BD9C                 mov     [esp+9Ch+dwShareMode], 0 ; dwShareMode
.text:0040BDA4                 mov     [esp+9Ch+dwDesiredAccess], 0 ; dwDesiredAccess
.text:0040BDAC                 mov     [esp+9Ch+lpFileName], offset aVwin32 ; "\\\\.\\vwin32"
.text:0040BDB3                 call    CreateFileA
.text:0040BDB8                 sub     esp, 1Ch
.text:0040BDBB                 mov     edi, eax
.text:0040BDBD                 cmp     eax, 0FFFFFFFFh
.text:0040BDC0                 jz      short loc_40BE35
.text:0040BDC2                 mov     [esp+9Ch+var_68], ebp
.text:0040BDC6                 lea     ebp, [esp+9Ch+BytesReturned]
.text:0040BDCA                 mov     [esp+9Ch+var_5C], esi
.text:0040BDCE                 mov     [esp+9Ch+var_60], 7303h
.text:0040BDD6                 mov     [esp+9Ch+var_64], 2Ch ; ','
.text:0040BDDE                 mov     [esp+9Ch+var_54], 1
.text:0040BDE6                 mov     [esp+9Ch+lpOverlapped], 0 ; lpOverlapped
.text:0040BDEE                 mov     [esp+9Ch+hTemplateFile], ebp ; lpBytesReturned
.text:0040BDF2                 mov     [esp+9Ch+dwFlagsAndAttributes], 1Ch ; nOutBufferSize
.text:0040BDFA                 mov     [esp+9Ch+dwCreationDisposition], ebx ; lpOutBuffer
.text:0040BDFE                 mov     [esp+9Ch+lpSecurityAttributes], 1Ch ; nInBufferSize
.text:0040BE06                 mov     [esp+9Ch+dwShareMode], ebx ; lpInBuffer
.text:0040BE0A                 mov     [esp+9Ch+dwDesiredAccess], 6 ; dwIoControlCode
.text:0040BE12                 mov     [esp+9Ch+lpFileName], eax ; hDevice
.text:0040BE15                 call    DeviceIoControl
.text:0040BE1A                 sub     esp, 20h
.text:0040BE1D                 mov     esi, eax
.text:0040BE1F                 mov     [esp+9Ch+lpFileName], edi ; hObject
.text:0040BE22                 call    CloseHandle
.text:0040BE27                 sub     esp, 4
.text:0040BE2A                 test    esi, esi
.text:0040BE2C                 jz      short loc_40BE35
.text:0040BE2E                 test    byte ptr [esp+9Ch+var_54], 1
.text:0040BE33                 jz      short loc_40BE50
.text:0040BE35
.text:0040BE35 loc_40BE35:                             ; CODE XREF: sub_40BC30+190↑j
.text:0040BE35                                         ; sub_40BC30+1FC↑j
.text:0040BE35                 call    sub_407DC0
.text:0040BE3A                 mov     edi, eax
.text:0040BE3C                 call    _errno
.text:0040BE41                 mov     [eax], edi
.text:0040BE43                 xor     eax, eax
.text:0040BE45
.text:0040BE45 loc_40BE45:                             ; CODE XREF: sub_40BC30+25A↓j
.text:0040BE45                                         ; sub_40BC30+297↓j
.text:0040BE45                 add     esp, 8Ch
.text:0040BE4B                 pop     ebx
.text:0040BE4C                 pop     esi
.text:0040BE4D                 pop     edi
.text:0040BE4E                 pop     ebp
.text:0040BE4F                 retn
.text:0040BE50 ; ---------------------------------------------------------------------------
.text:0040BE50
.text:0040BE50 loc_40BE50:                             ; CODE XREF: sub_40BC30+203↑j
.text:0040BE50                 mov     edx, [esp+9Ch+var_48]
.text:0040BE54                 mov     eax, 1
.text:0040BE59                 mov     ebx, [esp+9Ch+arg_4]
.text:0040BE60                 mov     ebp, [esp+9Ch+arg_8]
.text:0040BE67                 mov     ecx, [esp+9Ch+arg_C]
.text:0040BE6E                 mov     [ebx], edx
.text:0040BE70                 mov     edi, [esp+9Ch+var_44]
.text:0040BE74                 mov     ebx, [esp+9Ch+arg_10]
.text:0040BE7B                 mov     [ebp+0], edi
.text:0040BE7E                 mov     esi, [esp+9Ch+var_40]
.text:0040BE82                 mov     [ecx], esi
.text:0040BE84                 mov     edx, [esp+9Ch+var_3C]
.text:0040BE88                 mov     [ebx], edx
.text:0040BE8A                 jmp     short loc_40BE45
.text:0040BE8A ; ---------------------------------------------------------------------------
.text:0040BE8C                 align 10h
.text:0040BE90
.text:0040BE90 loc_40BE90:                             ; CODE XREF: sub_40BC30+132↑j
.text:0040BE90                 mov     [esp+9Ch+lpFileName], ebp ; lpRootPathName
.text:0040BE93                 mov     eax, [esp+9Ch+arg_C]
.text:0040BE9A                 mov     ecx, [esp+9Ch+arg_10]
.text:0040BEA1                 mov     edx, [esp+9Ch+arg_8]
.text:0040BEA8                 mov     [esp+9Ch+lpSecurityAttributes], eax ; lpNumberOfFreeClusters
.text:0040BEAC                 mov     eax, [esp+9Ch+arg_4]
.text:0040BEB3                 mov     [esp+9Ch+dwCreationDisposition], ecx ; lpTotalNumberOfClusters
.text:0040BEB7                 mov     [esp+9Ch+dwShareMode], edx ; lpBytesPerSector
.text:0040BEBB                 mov     [esp+9Ch+dwDesiredAccess], eax ; lpSectorsPerCluster
.text:0040BEBF                 call    GetDiskFreeSpaceA
.text:0040BEC4                 sub     esp, 14h
.text:0040BEC7                 jmp     loc_40BE45
.text:0040BEC7 sub_40BC30      endp ; sp-analysis failed
.text:0040BEC7
.text:0040BEC7 ; ---------------------------------------------------------------------------
.text:0040BECC                 align 10h
.text:0040BED0
.text:0040BED0 ; =============== S U B R O U T I N E =======================================
.text:0040BED0
.text:0040BED0
.text:0040BED0 sub_40BED0      proc near               ; CODE XREF: sub_409D50+1BF↑p
.text:0040BED0                                         ; sub_409D50+263↑p ...
.text:0040BED0
.text:0040BED0 FileHandle      = dword ptr -2Ch
.text:0040BED0 Offset          = qword ptr -28h
.text:0040BED0 Origin          = dword ptr -20h
.text:0040BED0 var_10          = dword ptr -10h
.text:0040BED0 var_C           = dword ptr -0Ch
.text:0040BED0 var_8           = dword ptr -8
.text:0040BED0 var_4           = dword ptr -4
.text:0040BED0 arg_0           = dword ptr  4
.text:0040BED0 arg_4           = qword ptr  8
.text:0040BED0
.text:0040BED0                 sub     esp, 2Ch
.text:0040BED3                 mov     [esp+2Ch+var_4], ebp
.text:0040BED7                 mov     ebp, [esp+2Ch+arg_0]
.text:0040BEDB                 mov     [esp+2Ch+var_10], ebx
.text:0040BEDF                 mov     ebx, dword ptr [esp+2Ch+arg_4]
.text:0040BEE3                 mov     [esp+2Ch+var_C], esi
.text:0040BEE7                 mov     esi, dword ptr [esp+2Ch+arg_4+4]
.text:0040BEEB                 mov     [esp+2Ch+var_8], edi
.text:0040BEEF                 mov     [esp+2Ch+FileHandle], ebp ; FileHandle
.text:0040BEF2                 call    _get_osfhandle
.text:0040BEF7                 cmp     eax, 0FFFFFFFFh
.text:0040BEFA                 mov     edi, eax
.text:0040BEFC                 jz      short loc_40BF66
.text:0040BEFE                 mov     [esp+2Ch+FileHandle], ebp ; FileHandle
.text:0040BF01                 mov     [esp+2Ch+Origin], 0 ; Origin
.text:0040BF09                 mov     dword ptr [esp+2Ch+Offset], ebx ; Offset
.text:0040BF0D                 mov     dword ptr [esp+2Ch+Offset+4], esi
.text:0040BF11                 call    _lseeki64
.text:0040BF16                 mov     ebp, edx
.text:0040BF18                 xor     eax, ebx
.text:0040BF1A                 xor     ebp, esi
.text:0040BF1C                 or      ebp, eax
.text:0040BF1E                 jnz     short loc_40BF59
.text:0040BF20                 mov     [esp+2Ch+FileHandle], edi ; hFile
.text:0040BF23                 call    SetEndOfFile
.text:0040BF28                 sub     esp, 4
.text:0040BF2B                 xor     edx, edx
.text:0040BF2D                 test    eax, eax
.text:0040BF2F                 jz      short loc_40BF47
.text:0040BF31
.text:0040BF31 loc_40BF31:                             ; CODE XREF: sub_40BED0+87↓j
.text:0040BF31                 mov     ebx, [esp+2Ch+var_10]
.text:0040BF35                 mov     eax, edx
.text:0040BF37                 mov     esi, [esp+2Ch+var_C]
.text:0040BF3B                 mov     edi, [esp+2Ch+var_8]
.text:0040BF3F                 mov     ebp, [esp+2Ch+var_4]
.text:0040BF43                 add     esp, 2Ch
.text:0040BF46                 retn
.text:0040BF47 ; ---------------------------------------------------------------------------
.text:0040BF47
.text:0040BF47 loc_40BF47:                             ; CODE XREF: sub_40BED0+5F↑j
.text:0040BF47                 call    _errno
.text:0040BF4C                 mov     dword ptr [eax], offset sub_407DC0
.text:0040BF52
.text:0040BF52 loc_40BF52:                             ; CODE XREF: sub_40BED0+94↓j
.text:0040BF52                                         ; sub_40BED0+A1↓j
.text:0040BF52                 mov     edx, 0FFFFFFFFh
.text:0040BF57                 jmp     short loc_40BF31
.text:0040BF59 ; ---------------------------------------------------------------------------
.text:0040BF59
.text:0040BF59 loc_40BF59:                             ; CODE XREF: sub_40BED0+4E↑j
.text:0040BF59                 call    _errno
.text:0040BF5E                 mov     dword ptr [eax], 16h
.text:0040BF64                 jmp     short loc_40BF52
.text:0040BF66 ; ---------------------------------------------------------------------------
.text:0040BF66
.text:0040BF66 loc_40BF66:                             ; CODE XREF: sub_40BED0+2C↑j
.text:0040BF66                 call    _errno
.text:0040BF6B                 mov     dword ptr [eax], 9
.text:0040BF71                 jmp     short loc_40BF52
.text:0040BF71 sub_40BED0      endp
.text:0040BF71
.text:0040BF71 ; ---------------------------------------------------------------------------
.text:0040BF73                 align 10h
.text:0040BF80
.text:0040BF80 ; =============== S U B R O U T I N E =======================================
.text:0040BF80
.text:0040BF80
.text:0040BF80 sub_40BF80      proc near               ; CODE XREF: sub_40C0A0+152↓p
.text:0040BF80                                         ; .text:0040C26B↓p
.text:0040BF80
.text:0040BF80 FileHandle      = dword ptr -2Ch
.text:0040BF80 Offset          = qword ptr -28h
.text:0040BF80 Origin          = dword ptr -20h
.text:0040BF80 nNumberOfBytesToUnlockHigh= dword ptr -1Ch
.text:0040BF80 hFile           = dword ptr -14h
.text:0040BF80 arg_0           = dword ptr  4
.text:0040BF80 arg_4           = dword ptr  8
.text:0040BF80 arg_8           = dword ptr  0Ch
.text:0040BF80
.text:0040BF80                 push    ebp
.text:0040BF81                 push    edi
.text:0040BF82                 push    esi
.text:0040BF83                 push    ebx
.text:0040BF84                 sub     esp, 1Ch
.text:0040BF87                 mov     ebp, [esp+2Ch+arg_8]
.text:0040BF8B                 mov     edi, [esp+2Ch+arg_0]
.text:0040BF8F                 mov     [esp+2Ch+FileHandle], edi ; FileHandle
.text:0040BF92                 call    _get_osfhandle
.text:0040BF97                 movsx   edx, word ptr [ebp+2]
.text:0040BF9B                 mov     [esp+2Ch+hFile], eax
.text:0040BF9F                 mov     dword ptr [esp+2Ch+Offset], 0 ; Offset
.text:0040BFA7                 mov     dword ptr [esp+2Ch+Offset+4], 0
.text:0040BFAF                 mov     [esp+2Ch+Origin], edx ; Origin
.text:0040BFB3                 mov     [esp+2Ch+FileHandle], edi ; FileHandle
.text:0040BFB6                 call    _lseeki64
.text:0040BFBB                 mov     ebx, eax
.text:0040BFBD                 mov     esi, edx
.text:0040BFBF                 mov     edx, [ebp+14h]
.text:0040BFC2                 add     ebx, [ebp+8]
.text:0040BFC5                 mov     eax, [ebp+10h]
.text:0040BFC8                 mov     ecx, edx
.text:0040BFCA                 adc     esi, [ebp+0Ch]
.text:0040BFCD                 or      ecx, eax
.text:0040BFCF                 jz      loc_40C090
.text:0040BFD5                 add     eax, ebx
.text:0040BFD7                 adc     edx, esi
.text:0040BFD9
.text:0040BFD9 loc_40BFD9:                             ; CODE XREF: sub_40BF80+118↓j
.text:0040BFD9                 cmp     [esp+2Ch+arg_4], 7
.text:0040BFDE                 jz      loc_40C07E
.text:0040BFE4                 cmp     [esp+2Ch+arg_4], 7
.text:0040BFE9                 jl      short loc_40C005
.text:0040BFEB                 cmp     [esp+2Ch+arg_4], 9
.text:0040BFF0                 jg      short loc_40C005
.text:0040BFF2                 movsx   ecx, word ptr [ebp+0]
.text:0040BFF6                 cmp     ecx, 1
.text:0040BFF9                 jl      short loc_40C005
.text:0040BFFB                 cmp     ecx, 2
.text:0040BFFE                 jle     short loc_40C060
.text:0040C000                 cmp     ecx, 3
.text:0040C003                 jz      short loc_40C01D
.text:0040C005
.text:0040C005 loc_40C005:                             ; CODE XREF: sub_40BF80+69↑j
.text:0040C005                                         ; sub_40BF80+70↑j ...
.text:0040C005                 call    _errno
.text:0040C00A                 mov     dword ptr [eax], 16h
.text:0040C010
.text:0040C010 loc_40C010:                             ; CODE XREF: sub_40BF80+D9↓j
.text:0040C010                                         ; sub_40BF80+109↓j
.text:0040C010                 mov     eax, 0FFFFFFFFh
.text:0040C015
.text:0040C015 loc_40C015:                             ; CODE XREF: sub_40BF80+C9↓j
.text:0040C015                 add     esp, 1Ch
.text:0040C018                 pop     ebx
.text:0040C019                 pop     esi
.text:0040C01A                 pop     edi
.text:0040C01B                 pop     ebp
.text:0040C01C                 retn
.text:0040C01D ; ---------------------------------------------------------------------------
.text:0040C01D
.text:0040C01D loc_40C01D:                             ; CODE XREF: sub_40BF80+83↑j
.text:0040C01D                 mov     [esp+2Ch+Origin], eax ; nNumberOfBytesToUnlockLow
.text:0040C021                 mov     eax, [esp+2Ch+hFile]
.text:0040C025                 mov     [esp+2Ch+nNumberOfBytesToUnlockHigh], edx ; nNumberOfBytesToUnlockHigh
.text:0040C029                 mov     dword ptr [esp+2Ch+Offset+4], esi ; dwFileOffsetHigh
.text:0040C02D                 mov     dword ptr [esp+2Ch+Offset], ebx ; dwFileOffsetLow
.text:0040C031                 mov     [esp+2Ch+FileHandle], eax ; hFile
.text:0040C034                 call    UnlockFile
.text:0040C039                 lea     esi, [esi+0]
.text:0040C040
.text:0040C040 loc_40C040:                             ; CODE XREF: sub_40BF80+FC↓j
.text:0040C040                 mov     ecx, eax
.text:0040C042                 sub     esp, 14h
.text:0040C045                 xor     eax, eax
.text:0040C047                 test    ecx, ecx
.text:0040C049                 jnz     short loc_40C015
.text:0040C04B                 call    sub_407DC0
.text:0040C050                 mov     esi, eax
.text:0040C052                 call    _errno
.text:0040C057                 mov     [eax], esi
.text:0040C059                 jmp     short loc_40C010
.text:0040C059 ; ---------------------------------------------------------------------------
.text:0040C05B                 align 10h
.text:0040C060
.text:0040C060 loc_40C060:                             ; CODE XREF: sub_40BF80+7E↑j
.text:0040C060                 mov     [esp+2Ch+nNumberOfBytesToUnlockHigh], edx ; nNumberOfBytesToLockHigh
.text:0040C064                 mov     edx, [esp+2Ch+hFile]
.text:0040C068                 mov     dword ptr [esp+2Ch+Offset+4], esi ; dwFileOffsetHigh
.text:0040C06C                 mov     dword ptr [esp+2Ch+Offset], ebx ; dwFileOffsetLow
.text:0040C070                 mov     [esp+2Ch+FileHandle], edx ; hFile
.text:0040C073                 mov     [esp+2Ch+Origin], eax ; nNumberOfBytesToLockLow
.text:0040C077                 call    LockFile
.text:0040C07C                 jmp     short loc_40C040
.text:0040C07E ; ---------------------------------------------------------------------------
.text:0040C07E
.text:0040C07E loc_40C07E:                             ; CODE XREF: sub_40BF80+5E↑j
.text:0040C07E                 call    _errno
.text:0040C083                 mov     dword ptr [eax], 28h ; '('
.text:0040C089                 jmp     short loc_40C010
.text:0040C089 ; ---------------------------------------------------------------------------
.text:0040C08B                 align 10h
.text:0040C090
.text:0040C090 loc_40C090:                             ; CODE XREF: sub_40BF80+4F↑j
.text:0040C090                 mov     [esp+2Ch+FileHandle], edi ; FileHandle
.text:0040C093                 call    _filelengthi64
.text:0040C098                 jmp     loc_40BFD9
.text:0040C098 sub_40BF80      endp
.text:0040C098
.text:0040C098 ; ---------------------------------------------------------------------------
.text:0040C09D                 align 10h
.text:0040C0A0
.text:0040C0A0 ; =============== S U B R O U T I N E =======================================
.text:0040C0A0
.text:0040C0A0
.text:0040C0A0 sub_40C0A0      proc near               ; CODE XREF: sub_409910+97↑p
.text:0040C0A0                                         ; sub_409910+B8↑p ...
.text:0040C0A0
.text:0040C0A0 FileHandle      = dword ptr -1Ch
.text:0040C0A0 var_18          = dword ptr -18h
.text:0040C0A0 var_14          = dword ptr -14h
.text:0040C0A0 var_4           = dword ptr -4
.text:0040C0A0 arg_0           = dword ptr  4
.text:0040C0A0 arg_4           = dword ptr  8
.text:0040C0A0 arg_8           = byte ptr  0Ch
.text:0040C0A0
.text:0040C0A0                 sub     esp, 1Ch
.text:0040C0A3                 mov     ecx, [esp+1Ch+arg_0]
.text:0040C0A7                 mov     [esp+1Ch+var_4], ebx
.text:0040C0AB                 mov     edx, [esp+1Ch+arg_4]
.text:0040C0AF                 test    ecx, ecx
.text:0040C0B1                 js      loc_40C209
.text:0040C0B7                 cmp     edx, 9          ; switch 10 cases
.text:0040C0BA                 lea     eax, [esp+1Ch+arg_8]
.text:0040C0BE                 ja      def_40C0C4      ; jumptable 0040C0C4 default case
.text:0040C0C4                 jmp     ds:jpt_40C0C4[edx*4] ; switch jump
.text:0040C0C4 ; ---------------------------------------------------------------------------
.text:0040C0CB                 align 4
.text:0040C0CC jpt_40C0C4      dd offset loc_40C0F4    ; DATA XREF: sub_40C0A0+24↑r
.text:0040C0CC                 dd offset loc_40C108    ; jump table for switch statement
.text:0040C0CC                 dd offset loc_40C128
.text:0040C0CC                 dd offset loc_40C150
.text:0040C0CC                 dd offset loc_40C198
.text:0040C0CC                 dd offset loc_40C1D0
.text:0040C0CC                 dd offset loc_40C1D0
.text:0040C0CC                 dd offset loc_40C1D0
.text:0040C0CC                 dd offset loc_40C1E5
.text:0040C0CC                 dd offset loc_40C1E5
.text:0040C0F4 ; ---------------------------------------------------------------------------
.text:0040C0F4
.text:0040C0F4 loc_40C0F4:                             ; CODE XREF: sub_40C0A0+24↑j
.text:0040C0F4                                         ; DATA XREF: sub_40C0A0:jpt_40C0C4↑o
.text:0040C0F4                 mov     [esp+1Ch+FileHandle], ecx ; jumptable 0040C0C4 case 0
.text:0040C0F7                 call    _dup
.text:0040C0FC                 lea     esi, [esi+0]
.text:0040C100
.text:0040C100 loc_40C100:                             ; CODE XREF: sub_40C0A0+86↓j
.text:0040C100                                         ; sub_40C0A0+AC↓j ...
.text:0040C100                 mov     ebx, [esp+1Ch+var_4]
.text:0040C104                 add     esp, 1Ch
.text:0040C107                 retn
.text:0040C108 ; ---------------------------------------------------------------------------
.text:0040C108
.text:0040C108 loc_40C108:                             ; CODE XREF: sub_40C0A0+24↑j
.text:0040C108                                         ; DATA XREF: sub_40C0A0:jpt_40C0C4↑o
.text:0040C108                 mov     eax, ds:__pioinfo ; jumptable 0040C0C4 case 1
.text:0040C10D                 mov     edx, ecx
.text:0040C10F                 sar     edx, 5
.text:0040C112                 and     ecx, 1Fh
.text:0040C115                 mov     ebx, [eax+edx*4]
.text:0040C118                 lea     eax, [ecx+ecx*8]
.text:0040C11B                 test    byte ptr [ebx+eax*4+4], 10h
.text:0040C120                 setnz   dl
.text:0040C123                 movzx   eax, dl
.text:0040C126                 jmp     short loc_40C100
.text:0040C128 ; ---------------------------------------------------------------------------
.text:0040C128
.text:0040C128 loc_40C128:                             ; CODE XREF: sub_40C0A0+24↑j
.text:0040C128                                         ; DATA XREF: sub_40C0A0:jpt_40C0C4↑o
.text:0040C128                 test    bl, 1           ; jumptable 0040C0C4 case 2
.text:0040C12B                 jz      short loc_40C133
.text:0040C12D                 and     ebx, 0FFFFFFFEh
.text:0040C130                 or      ebx, 10h
.text:0040C133
.text:0040C133 loc_40C133:                             ; CODE XREF: sub_40C0A0+8B↑j
.text:0040C133                 mov     eax, ds:__pioinfo
.text:0040C138                 mov     edx, ecx
.text:0040C13A                 sar     edx, 5
.text:0040C13D                 and     ecx, 1Fh
.text:0040C140                 mov     edx, [eax+edx*4]
.text:0040C143                 lea     eax, [ecx+ecx*8]
.text:0040C146                 mov     [edx+eax*4+4], bl
.text:0040C14A
.text:0040C14A loc_40C14A:                             ; CODE XREF: sub_40C0A0+121↓j
.text:0040C14A                 xor     eax, eax
.text:0040C14C                 jmp     short loc_40C100
.text:0040C14C ; ---------------------------------------------------------------------------
.text:0040C14E                 align 10h
.text:0040C150
.text:0040C150 loc_40C150:                             ; CODE XREF: sub_40C0A0+24↑j
.text:0040C150                                         ; DATA XREF: sub_40C0A0:jpt_40C0C4↑o
.text:0040C150                 mov     eax, ds:__pioinfo ; jumptable 0040C0C4 case 3
.text:0040C155                 mov     ebx, ecx
.text:0040C157                 sar     ebx, 5
.text:0040C15A                 and     ecx, 1Fh
.text:0040C15D                 mov     edx, [eax+ebx*4]
.text:0040C160                 lea     ebx, [ecx+ecx*8]
.text:0040C163                 movsx   eax, byte ptr [edx+ebx*4+4]
.text:0040C168                 xor     edx, edx
.text:0040C16A                 test    al, 1
.text:0040C16C                 jz      short loc_40C177
.text:0040C16E                 mov     edx, 2
.text:0040C173
.text:0040C173 loc_40C173:                             ; CODE XREF: sub_40C0A0+E0↓j
.text:0040C173                                         ; sub_40C0A0+EB↓j ...
.text:0040C173                 mov     eax, edx
.text:0040C175                 jmp     short loc_40C100
.text:0040C177 ; ---------------------------------------------------------------------------
.text:0040C177
.text:0040C177 loc_40C177:                             ; CODE XREF: sub_40C0A0+CC↑j
.text:0040C177                 test    al, 20h
.text:0040C179                 jz      short loc_40C182
.text:0040C17B                 mov     edx, 8
.text:0040C180                 jmp     short loc_40C173
.text:0040C182 ; ---------------------------------------------------------------------------
.text:0040C182
.text:0040C182 loc_40C182:                             ; CODE XREF: sub_40C0A0+D9↑j
.text:0040C182                 test    al, 10h
.text:0040C184                 jz      short loc_40C18D
.text:0040C186                 mov     edx, 80h ; '€'
.text:0040C18B                 jmp     short loc_40C173
.text:0040C18D ; ---------------------------------------------------------------------------
.text:0040C18D
.text:0040C18D loc_40C18D:                             ; CODE XREF: sub_40C0A0+E4↑j
.text:0040C18D                 test    al, al
.text:0040C18F                 jns     short loc_40C173
.text:0040C191                 mov     edx, 4000h
.text:0040C196                 jmp     short loc_40C173
.text:0040C198 ; ---------------------------------------------------------------------------
.text:0040C198
.text:0040C198 loc_40C198:                             ; CODE XREF: sub_40C0A0+24↑j
.text:0040C198                                         ; DATA XREF: sub_40C0A0:jpt_40C0C4↑o
.text:0040C198                 mov     edx, ds:__pioinfo ; jumptable 0040C0C4 case 4
.text:0040C19E                 mov     ebx, [eax]
.text:0040C1A0                 mov     eax, ecx
.text:0040C1A2                 sar     eax, 5
.text:0040C1A5                 and     ecx, 1Fh
.text:0040C1A8                 mov     edx, [edx+eax*4]
.text:0040C1AB                 lea     eax, [ecx+ecx*8]
.text:0040C1AE                 shl     eax, 2
.text:0040C1B1                 xor     ecx, ecx
.text:0040C1B3                 test    bl, 8
.text:0040C1B6                 jz      short loc_40C1C3
.text:0040C1B8                 mov     ecx, 20h ; ' '
.text:0040C1BD
.text:0040C1BD loc_40C1BD:                             ; CODE XREF: sub_40C0A0+126↓j
.text:0040C1BD                                         ; sub_40C0A0+12D↓j
.text:0040C1BD                 mov     [edx+eax+4], cl
.text:0040C1C1                 jmp     short loc_40C14A
.text:0040C1C3 ; ---------------------------------------------------------------------------
.text:0040C1C3
.text:0040C1C3 loc_40C1C3:                             ; CODE XREF: sub_40C0A0+116↑j
.text:0040C1C3                 test    bh, 40h
.text:0040C1C6                 jz      short loc_40C1BD
.text:0040C1C8                 mov     ecx, 80h ; '€'
.text:0040C1CD                 jmp     short loc_40C1BD
.text:0040C1CD ; ---------------------------------------------------------------------------
.text:0040C1CF                 align 10h
.text:0040C1D0
.text:0040C1D0 loc_40C1D0:                             ; CODE XREF: sub_40C0A0+24↑j
.text:0040C1D0                                         ; DATA XREF: sub_40C0A0:jpt_40C0C4↑o
.text:0040C1D0                 call    _errno          ; jumptable 0040C0C4 cases 5-7
.text:0040C1D5                 mov     dword ptr [eax], 28h ; '('
.text:0040C1DB
.text:0040C1DB loc_40C1DB:                             ; CODE XREF: sub_40C0A0+167↓j
.text:0040C1DB                                         ; sub_40C0A0+174↓j
.text:0040C1DB                 mov     eax, 0FFFFFFFFh
.text:0040C1E0                 jmp     loc_40C100
.text:0040C1E5 ; ---------------------------------------------------------------------------
.text:0040C1E5
.text:0040C1E5 loc_40C1E5:                             ; CODE XREF: sub_40C0A0+24↑j
.text:0040C1E5                                         ; DATA XREF: sub_40C0A0:jpt_40C0C4↑o
.text:0040C1E5                 mov     ebx, [eax]      ; jumptable 0040C0C4 cases 8,9
.text:0040C1E7                 mov     [esp+1Ch+var_18], edx
.text:0040C1EB                 mov     [esp+1Ch+FileHandle], ecx
.text:0040C1EE                 mov     [esp+1Ch+var_14], ebx
.text:0040C1F2                 call    sub_40BF80
.text:0040C1F7                 jmp     loc_40C100
.text:0040C1FC ; ---------------------------------------------------------------------------
.text:0040C1FC
.text:0040C1FC def_40C0C4:                             ; CODE XREF: sub_40C0A0+1E↑j
.text:0040C1FC                 call    _errno          ; jumptable 0040C0C4 default case
.text:0040C201                 mov     dword ptr [eax], 16h
.text:0040C207                 jmp     short loc_40C1DB
.text:0040C209 ; ---------------------------------------------------------------------------
.text:0040C209
.text:0040C209 loc_40C209:                             ; CODE XREF: sub_40C0A0+11↑j
.text:0040C209                 call    _errno
.text:0040C20E                 mov     dword ptr [eax], 9
.text:0040C214                 jmp     short loc_40C1DB
.text:0040C214 sub_40C0A0      endp
.text:0040C214
.text:0040C214 ; ---------------------------------------------------------------------------
.text:0040C216                 align 10h
.text:0040C220                 sub     esp, 3Ch
.text:0040C223                 mov     edx, [esp+48h]
.text:0040C227                 mov     eax, [edx+4]
.text:0040C22A                 movzx   ecx, word ptr [edx]
.text:0040C22D                 mov     [esp+18h], eax
.text:0040C231                 mov     [esp+10h], cx
.text:0040C236                 movzx   ecx, word ptr [edx+2]
.text:0040C23A                 mov     [esp+12h], cx
.text:0040C23F                 mov     ecx, eax
.text:0040C241                 mov     eax, [edx+8]
.text:0040C244                 sar     ecx, 1Fh
.text:0040C247                 mov     [esp+1Ch], ecx
.text:0040C24B                 cdq
.text:0040C24C                 lea     ecx, [esp+10h]
.text:0040C250                 mov     [esp+24h], edx
.text:0040C254                 mov     edx, [esp+44h]
.text:0040C258                 mov     [esp+20h], eax
.text:0040C25C                 mov     [esp+8], ecx
.text:0040C260                 mov     [esp+4], edx
.text:0040C264                 mov     edx, [esp+40h]
.text:0040C268                 mov     [esp], edx
.text:0040C26B                 call    sub_40BF80
.text:0040C270                 add     esp, 3Ch
.text:0040C273                 retn
.text:0040C273 ; ---------------------------------------------------------------------------
.text:0040C274                 align 10h
.text:0040C280                 mov     edx, [esp+4]
.text:0040C284                 xor     eax, eax
.text:0040C286                 test    dl, 1
.text:0040C289                 jz      short loc_40C291
.text:0040C28B                 mov     eax, 2
.text:0040C290                 retn
.text:0040C291 ; ---------------------------------------------------------------------------
.text:0040C291
.text:0040C291 loc_40C291:                             ; CODE XREF: .text:0040C289↑j
.text:0040C291                 test    dl, 20h
.text:0040C294                 jz      short loc_40C2A0
.text:0040C296                 mov     eax, 8
.text:0040C29B                 retn
.text:0040C29B ; ---------------------------------------------------------------------------
.text:0040C29C                 align 10h
.text:0040C2A0
.text:0040C2A0 loc_40C2A0:                             ; CODE XREF: .text:0040C294↑j
.text:0040C2A0                 test    dl, 10h
.text:0040C2A3                 jz      short loc_40C2B0
.text:0040C2A5                 mov     eax, 80h ; '€'
.text:0040C2AA                 retn
.text:0040C2AA ; ---------------------------------------------------------------------------
.text:0040C2AB                 align 10h
.text:0040C2B0
.text:0040C2B0 loc_40C2B0:                             ; CODE XREF: .text:0040C2A3↑j
.text:0040C2B0                 test    dl, dl
.text:0040C2B2                 jns     short locret_40C2B9
.text:0040C2B4                 mov     eax, 4000h
.text:0040C2B9
.text:0040C2B9 locret_40C2B9:                          ; CODE XREF: .text:0040C2B2↑j
.text:0040C2B9                 retn
.text:0040C2B9 ; ---------------------------------------------------------------------------
.text:0040C2BA                 align 10h
.text:0040C2C0                 mov     edx, [esp+4]
.text:0040C2C4                 xor     eax, eax
.text:0040C2C6                 test    dl, 8
.text:0040C2C9                 jz      short loc_40C2D1
.text:0040C2CB                 mov     eax, 20h ; ' '
.text:0040C2D0                 retn
.text:0040C2D1 ; ---------------------------------------------------------------------------
.text:0040C2D1
.text:0040C2D1 loc_40C2D1:                             ; CODE XREF: .text:0040C2C9↑j
.text:0040C2D1                 test    dh, 40h
.text:0040C2D4                 jz      short locret_40C2DB
.text:0040C2D6                 mov     eax, 80h ; '€'
.text:0040C2DB
.text:0040C2DB locret_40C2DB:                          ; CODE XREF: .text:0040C2D4↑j
.text:0040C2DB                 retn
.text:0040C2DB ; ---------------------------------------------------------------------------
.text:0040C2DC                 align 10h
.text:0040C2E0 aNotset         db 'notset',0           ; DATA XREF: .data:off_4110F0↓o
.text:0040C2E0                                         ; .data:off_4110F4↓o
.text:0040C2E7 ; ---------------------------------------------------------------------------
.text:0040C2E7
.text:0040C2E7 loc_40C2E7:                             ; DATA XREF: .text:loc_40C385↓o
.text:0040C2E7                 jb      short loc_40C360
.text:0040C2E9                 add     [eax], ah
.text:0040C2EB                 or      [eax], eax
.text:0040C2ED
.text:0040C2ED loc_40C2ED:                             ; DATA XREF: .text:0040C3D8↓o
.text:0040C2ED                                         ; .text:0040C43E↓o ...
.text:0040C2ED                 add     [eax], ah
.text:0040C2EF                 and     eax, 64252064h
.text:0040C2F4                 and     [eax], al
.text:0040C2F6                 lea     esi, [esi+0]
.text:0040C2F9                 lea     edi, [edi+0]
.text:0040C300                 push    ebp
.text:0040C301                 push    edi
.text:0040C302                 push    esi
.text:0040C303                 push    ebx
.text:0040C304                 sub     esp, 14Ch
.text:0040C30A                 mov     edx, off_4110F0 ; "notset"
.text:0040C310                 mov     edi, [esp+164h]
.text:0040C317                 mov     ebp, [esp+168h]
.text:0040C31E                 mov     [esp+4], edx
.text:0040C322                 mov     edx, off_4110F4 ; "notset"
.text:0040C328                 mov     [esp], edx
.text:0040C32B                 call    strcmp
.text:0040C330                 test    eax, eax
.text:0040C332                 jz      loc_40C720
.text:0040C338
.text:0040C338 loc_40C338:                             ; CODE XREF: .text:0040C76C↓j
.text:0040C338                 lea     ebx, [esp+20h]
.text:0040C33C                 lea     esi, [esi+0]
.text:0040C340
.text:0040C340 loc_40C340:                             ; CODE XREF: .text:0040C376↓j
.text:0040C340                 mov     [esp+4], ebx
.text:0040C344                 mov     ecx, off_4110F4 ; "notset"
.text:0040C34A                 mov     [esp], ecx
.text:0040C34D                 call    loc_40BCD0
.text:0040C352                 test    eax, eax
.text:0040C354                 jns     short loc_40C385
.text:0040C356                 mov     eax, off_4110F4 ; "notset"
.text:0040C35B                 cmp     byte ptr [eax], 0
.text:0040C35E                 jz      short loc_40C378
.text:0040C360
.text:0040C360 loc_40C360:                             ; CODE XREF: .text:loc_40C2E7↑j
.text:0040C360                 mov     dword ptr [esp+4], 0
.text:0040C368                 mov     [esp], eax
.text:0040C36B                 call    strchr
.text:0040C370                 inc     eax
.text:0040C371                 mov     off_4110F4, eax ; "notset"
.text:0040C376                 jmp     short loc_40C340
.text:0040C378 ; ---------------------------------------------------------------------------
.text:0040C378
.text:0040C378 loc_40C378:                             ; CODE XREF: .text:0040C35E↑j
.text:0040C378                 xor     eax, eax
.text:0040C37A
.text:0040C37A loc_40C37A:                             ; CODE XREF: .text:0040C53C↓j
.text:0040C37A                 add     esp, 14Ch
.text:0040C380                 pop     ebx
.text:0040C381                 pop     esi
.text:0040C382                 pop     edi
.text:0040C383                 pop     ebp
.text:0040C384                 retn
.text:0040C385 ; ---------------------------------------------------------------------------
.text:0040C385
.text:0040C385 loc_40C385:                             ; CODE XREF: .text:0040C354↑j
.text:0040C385                 mov     dword ptr [edi+0Ch], offset loc_40C2E7
.text:0040C38C                 lea     ecx, [esp+0D6h]
.text:0040C393                 lea     edx, [esp+6Ch]
.text:0040C397                 mov     [edi+4], ecx
.text:0040C39A                 lea     ebx, [esp+7Ch]
.text:0040C39E                 mov     [edi+8], edx
.text:0040C3A1                 mov     [edi], ebx
.text:0040C3A3                 mov     [esp], ebp
.text:0040C3A6                 mov     [esp+4], edi
.text:0040C3AA                 call    ___addmntentstr
.text:0040C3AF                 mov     [esp], ebp
.text:0040C3B2                 mov     dword ptr [esp+4], 40C2EAh
.text:0040C3BA                 call    strspn
.text:0040C3BF                 mov     dword ptr [esp+4], 0
.text:0040C3C7                 mov     ebx, off_4110F4 ; "notset"
.text:0040C3CD                 lea     esi, [eax+ebp]
.text:0040C3D0                 mov     [esp+1Ch], esi
.text:0040C3D4                 lea     ebp, [esp+1Ch]
.text:0040C3D8                 mov     esi, offset loc_40C2ED
.text:0040C3DD                 mov     [esp], ebx
.text:0040C3E0                 call    strchr
.text:0040C3E5                 mov     dword ptr [esp+4], 40C2EAh
.text:0040C3ED                 inc     eax
.text:0040C3EE                 mov     off_4110F4, eax ; "notset"
.text:0040C3F3                 mov     [esp], ebp
.text:0040C3F6                 call    sub_40D140
.text:0040C3FB                 test    eax, eax
.text:0040C3FD                 mov     ebx, eax
.text:0040C3FF                 jz      short loc_40C428
.text:0040C401                 mov     edx, eax
.text:0040C403                 mov     ecx, eax
.text:0040C405                 lea     esi, [esi+0]
.text:0040C409                 lea     edi, [edi+0]
.text:0040C410
.text:0040C410 loc_40C410:                             ; CODE XREF: .text:0040C426↓j
.text:0040C410                 movzx   eax, byte ptr [edx]
.text:0040C413                 cmp     al, 5Ch ; '\'
.text:0040C415                 jz      loc_40C6C4
.text:0040C41B
.text:0040C41B loc_40C41B:                             ; CODE XREF: .text:0040C6CC↓j
.text:0040C41B                                         ; .text:0040C6DA↓j ...
.text:0040C41B                 mov     [ecx], al
.text:0040C41D
.text:0040C41D loc_40C41D:                             ; CODE XREF: .text:0040C6EE↓j
.text:0040C41D                 inc     ecx
.text:0040C41E
.text:0040C41E loc_40C41E:                             ; CODE XREF: .text:0040C706↓j
.text:0040C41E                 movzx   eax, byte ptr [edx]
.text:0040C421                 mov     esi, ebx
.text:0040C423                 inc     edx
.text:0040C424                 test    al, al
.text:0040C426                 jnz     short loc_40C410
.text:0040C428
.text:0040C428 loc_40C428:                             ; CODE XREF: .text:0040C3FF↑j
.text:0040C428                 mov     [edi], esi
.text:0040C42A                 mov     eax, [esp+1Ch]
.text:0040C42E                 test    eax, eax
.text:0040C430                 jnz     loc_40C6AB
.text:0040C436
.text:0040C436 loc_40C436:                             ; CODE XREF: .text:0040C6BF↓j
.text:0040C436                 mov     dword ptr [esp+4], 40C2EAh
.text:0040C43E                 mov     esi, offset loc_40C2ED
.text:0040C443                 mov     [esp], ebp
.text:0040C446                 call    sub_40D140
.text:0040C44B                 test    eax, eax
.text:0040C44D                 mov     ebx, eax
.text:0040C44F                 jz      short loc_40C478
.text:0040C451                 mov     edx, eax
.text:0040C453                 mov     ecx, eax
.text:0040C455                 lea     esi, [esi+0]
.text:0040C459                 lea     edi, [edi+0]
.text:0040C460
.text:0040C460 loc_40C460:                             ; CODE XREF: .text:0040C476↓j
.text:0040C460                 movzx   eax, byte ptr [edx]
.text:0040C463                 cmp     al, 5Ch ; '\'
.text:0040C465                 jz      loc_40C653
.text:0040C46B
.text:0040C46B loc_40C46B:                             ; CODE XREF: .text:0040C65B↓j
.text:0040C46B                                         ; .text:0040C669↓j ...
.text:0040C46B                 mov     [ecx], al
.text:0040C46D
.text:0040C46D loc_40C46D:                             ; CODE XREF: .text:0040C67D↓j
.text:0040C46D                 inc     ecx
.text:0040C46E
.text:0040C46E loc_40C46E:                             ; CODE XREF: .text:0040C695↓j
.text:0040C46E                 movzx   eax, byte ptr [edx]
.text:0040C471                 mov     esi, ebx
.text:0040C473                 inc     edx
.text:0040C474                 test    al, al
.text:0040C476                 jnz     short loc_40C460
.text:0040C478
.text:0040C478 loc_40C478:                             ; CODE XREF: .text:0040C44F↑j
.text:0040C478                 mov     [edi+4], esi
.text:0040C47B                 mov     eax, [esp+1Ch]
.text:0040C47F                 test    eax, eax
.text:0040C481                 jnz     loc_40C63A
.text:0040C487
.text:0040C487 loc_40C487:                             ; CODE XREF: .text:0040C64E↓j
.text:0040C487                 mov     dword ptr [esp+4], 40C2EAh
.text:0040C48F                 mov     esi, offset loc_40C2ED
.text:0040C494                 mov     [esp], ebp
.text:0040C497                 call    sub_40D140
.text:0040C49C                 test    eax, eax
.text:0040C49E                 mov     ebx, eax
.text:0040C4A0                 jz      short loc_40C4C8
.text:0040C4A2                 mov     edx, eax
.text:0040C4A4                 mov     ecx, eax
.text:0040C4A6                 lea     esi, [esi+0]
.text:0040C4A9                 lea     edi, [edi+0]
.text:0040C4B0
.text:0040C4B0 loc_40C4B0:                             ; CODE XREF: .text:0040C4C6↓j
.text:0040C4B0                 movzx   eax, byte ptr [edx]
.text:0040C4B3                 cmp     al, 5Ch ; '\'
.text:0040C4B5                 jz      loc_40C5E2
.text:0040C4BB
.text:0040C4BB loc_40C4BB:                             ; CODE XREF: .text:0040C5EA↓j
.text:0040C4BB                                         ; .text:0040C5F8↓j ...
.text:0040C4BB                 mov     [ecx], al
.text:0040C4BD
.text:0040C4BD loc_40C4BD:                             ; CODE XREF: .text:0040C60C↓j
.text:0040C4BD                 inc     ecx
.text:0040C4BE
.text:0040C4BE loc_40C4BE:                             ; CODE XREF: .text:0040C624↓j
.text:0040C4BE                 movzx   eax, byte ptr [edx]
.text:0040C4C1                 mov     esi, ebx
.text:0040C4C3                 inc     edx
.text:0040C4C4                 test    al, al
.text:0040C4C6                 jnz     short loc_40C4B0
.text:0040C4C8
.text:0040C4C8 loc_40C4C8:                             ; CODE XREF: .text:0040C4A0↑j
.text:0040C4C8                 mov     [edi+8], esi
.text:0040C4CB                 mov     eax, [esp+1Ch]
.text:0040C4CF                 test    eax, eax
.text:0040C4D1                 jnz     loc_40C5C9
.text:0040C4D7
.text:0040C4D7 loc_40C4D7:                             ; CODE XREF: .text:0040C5DD↓j
.text:0040C4D7                 mov     dword ptr [esp+4], 40C2EAh
.text:0040C4DF                 mov     esi, offset loc_40C2ED
.text:0040C4E4                 mov     [esp], ebp
.text:0040C4E7                 call    sub_40D140
.text:0040C4EC                 test    eax, eax
.text:0040C4EE                 mov     ebx, eax
.text:0040C4F0                 jz      short loc_40C514
.text:0040C4F2                 mov     edx, eax
.text:0040C4F4                 mov     ecx, eax
.text:0040C4F6                 lea     esi, [esi+0]
.text:0040C4F9                 lea     edi, [edi+0]
.text:0040C500
.text:0040C500 loc_40C500:                             ; CODE XREF: .text:0040C512↓j
.text:0040C500                 movzx   eax, byte ptr [edx]
.text:0040C503                 cmp     al, 5Ch ; '\'
.text:0040C505                 jz      short loc_40C575
.text:0040C507
.text:0040C507 loc_40C507:                             ; CODE XREF: .text:0040C57D↓j
.text:0040C507                                         ; .text:0040C587↓j ...
.text:0040C507                 mov     [ecx], al
.text:0040C509
.text:0040C509 loc_40C509:                             ; CODE XREF: .text:0040C59B↓j
.text:0040C509                 inc     ecx
.text:0040C50A
.text:0040C50A loc_40C50A:                             ; CODE XREF: .text:0040C5B3↓j
.text:0040C50A                 movzx   eax, byte ptr [edx]
.text:0040C50D                 mov     esi, ebx
.text:0040C50F                 inc     edx
.text:0040C510                 test    al, al
.text:0040C512                 jnz     short loc_40C500
.text:0040C514
.text:0040C514 loc_40C514:                             ; CODE XREF: .text:0040C4F0↑j
.text:0040C514                 mov     [edi+0Ch], esi
.text:0040C517                 xor     eax, eax
.text:0040C519                 mov     edx, [esp+1Ch]
.text:0040C51D                 test    edx, edx
.text:0040C51F                 jnz     short loc_40C555
.text:0040C521
.text:0040C521 loc_40C521:                             ; CODE XREF: .text:0040C573↓j
.text:0040C521                 cmp     eax, 1
.text:0040C524                 jz      short loc_40C54C
.text:0040C526                 cmp     eax, 1
.text:0040C529                 jle     short loc_40C541
.text:0040C52B
.text:0040C52B loc_40C52B:                             ; CODE XREF: .text:0040C543↓j
.text:0040C52B                                         ; .text:0040C553↓j
.text:0040C52B                 mov     edx, [esp+160h]
.text:0040C532                 mov     [esp], edx
.text:0040C535                 call    sub_40D0E0
.text:0040C53A                 mov     eax, edi
.text:0040C53C                 jmp     loc_40C37A
.text:0040C541 ; ---------------------------------------------------------------------------
.text:0040C541
.text:0040C541 loc_40C541:                             ; CODE XREF: .text:0040C529↑j
.text:0040C541                 test    eax, eax
.text:0040C543                 jnz     short loc_40C52B
.text:0040C545                 mov     dword ptr [edi+10h], 0
.text:0040C54C
.text:0040C54C loc_40C54C:                             ; CODE XREF: .text:0040C524↑j
.text:0040C54C                 mov     dword ptr [edi+14h], 0
.text:0040C553                 jmp     short loc_40C52B
.text:0040C555 ; ---------------------------------------------------------------------------
.text:0040C555
.text:0040C555 loc_40C555:                             ; CODE XREF: .text:0040C51F↑j
.text:0040C555                 mov     dword ptr [esp+4], 40C2EEh
.text:0040C55D                 lea     esi, [edi+14h]
.text:0040C560                 lea     ebp, [edi+10h]
.text:0040C563                 mov     [esp+0Ch], esi
.text:0040C567                 mov     [esp+8], ebp
.text:0040C56B                 mov     [esp], edx
.text:0040C56E                 call    sscanf
.text:0040C573                 jmp     short loc_40C521
.text:0040C575 ; ---------------------------------------------------------------------------
.text:0040C575
.text:0040C575 loc_40C575:                             ; CODE XREF: .text:0040C505↑j
.text:0040C575                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040C579                 jz      short loc_40C5B8
.text:0040C57B
.text:0040C57B loc_40C57B:                             ; CODE XREF: .text:0040C5BC↓j
.text:0040C57B                                         ; .text:0040C5C2↓j
.text:0040C57B                 cmp     al, 5Ch ; '\'
.text:0040C57D                 jnz     short loc_40C507
.text:0040C57F                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040C583                 jz      short loc_40C5A0
.text:0040C585
.text:0040C585 loc_40C585:                             ; CODE XREF: .text:0040C5A4↓j
.text:0040C585                                         ; .text:0040C5AA↓j
.text:0040C585                 cmp     al, 5Ch ; '\'
.text:0040C587                 jnz     loc_40C507
.text:0040C58D                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:0040C591                 jnz     loc_40C507
.text:0040C597                 mov     byte ptr [ecx], 5Ch ; '\'
.text:0040C59A                 inc     edx
.text:0040C59B                 jmp     loc_40C509
.text:0040C5A0 ; ---------------------------------------------------------------------------
.text:0040C5A0
.text:0040C5A0 loc_40C5A0:                             ; CODE XREF: .text:0040C583↑j
.text:0040C5A0                 cmp     byte ptr [edx+2], 31h ; '1'
.text:0040C5A4                 jnz     short loc_40C585
.text:0040C5A6                 cmp     byte ptr [edx+3], 32h ; '2'
.text:0040C5AA                 jnz     short loc_40C585
.text:0040C5AC                 mov     byte ptr [ecx], 9
.text:0040C5AF
.text:0040C5AF loc_40C5AF:                             ; CODE XREF: .text:0040C5C7↓j
.text:0040C5AF                 inc     ecx
.text:0040C5B0                 add     edx, 3
.text:0040C5B3                 jmp     loc_40C50A
.text:0040C5B8 ; ---------------------------------------------------------------------------
.text:0040C5B8
.text:0040C5B8 loc_40C5B8:                             ; CODE XREF: .text:0040C579↑j
.text:0040C5B8                 cmp     byte ptr [edx+2], 34h ; '4'
.text:0040C5BC                 jnz     short loc_40C57B
.text:0040C5BE                 cmp     byte ptr [edx+3], 30h ; '0'
.text:0040C5C2                 jnz     short loc_40C57B
.text:0040C5C4                 mov     byte ptr [ecx], 20h ; ' '
.text:0040C5C7                 jmp     short loc_40C5AF
.text:0040C5C9 ; ---------------------------------------------------------------------------
.text:0040C5C9
.text:0040C5C9 loc_40C5C9:                             ; CODE XREF: .text:0040C4D1↑j
.text:0040C5C9                 mov     dword ptr [esp+4], 40C2EAh
.text:0040C5D1                 mov     [esp], eax
.text:0040C5D4                 call    strspn
.text:0040C5D9                 add     [esp+1Ch], eax
.text:0040C5DD                 jmp     loc_40C4D7
.text:0040C5E2 ; ---------------------------------------------------------------------------
.text:0040C5E2
.text:0040C5E2 loc_40C5E2:                             ; CODE XREF: .text:0040C4B5↑j
.text:0040C5E2                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040C5E6                 jz      short loc_40C629
.text:0040C5E8
.text:0040C5E8 loc_40C5E8:                             ; CODE XREF: .text:0040C62D↓j
.text:0040C5E8                                         ; .text:0040C633↓j
.text:0040C5E8                 cmp     al, 5Ch ; '\'
.text:0040C5EA                 jnz     loc_40C4BB
.text:0040C5F0                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040C5F4                 jz      short loc_40C611
.text:0040C5F6
.text:0040C5F6 loc_40C5F6:                             ; CODE XREF: .text:0040C615↓j
.text:0040C5F6                                         ; .text:0040C61B↓j
.text:0040C5F6                 cmp     al, 5Ch ; '\'
.text:0040C5F8                 jnz     loc_40C4BB
.text:0040C5FE                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:0040C602                 jnz     loc_40C4BB
.text:0040C608                 mov     byte ptr [ecx], 5Ch ; '\'
.text:0040C60B                 inc     edx
.text:0040C60C                 jmp     loc_40C4BD
.text:0040C611 ; ---------------------------------------------------------------------------
.text:0040C611
.text:0040C611 loc_40C611:                             ; CODE XREF: .text:0040C5F4↑j
.text:0040C611                 cmp     byte ptr [edx+2], 31h ; '1'
.text:0040C615                 jnz     short loc_40C5F6
.text:0040C617                 cmp     byte ptr [edx+3], 32h ; '2'
.text:0040C61B                 jnz     short loc_40C5F6
.text:0040C61D                 mov     byte ptr [ecx], 9
.text:0040C620
.text:0040C620 loc_40C620:                             ; CODE XREF: .text:0040C638↓j
.text:0040C620                 inc     ecx
.text:0040C621                 add     edx, 3
.text:0040C624                 jmp     loc_40C4BE
.text:0040C629 ; ---------------------------------------------------------------------------
.text:0040C629
.text:0040C629 loc_40C629:                             ; CODE XREF: .text:0040C5E6↑j
.text:0040C629                 cmp     byte ptr [edx+2], 34h ; '4'
.text:0040C62D                 jnz     short loc_40C5E8
.text:0040C62F                 cmp     byte ptr [edx+3], 30h ; '0'
.text:0040C633                 jnz     short loc_40C5E8
.text:0040C635                 mov     byte ptr [ecx], 20h ; ' '
.text:0040C638                 jmp     short loc_40C620
.text:0040C63A ; ---------------------------------------------------------------------------
.text:0040C63A
.text:0040C63A loc_40C63A:                             ; CODE XREF: .text:0040C481↑j
.text:0040C63A                 mov     dword ptr [esp+4], 40C2EAh
.text:0040C642                 mov     [esp], eax
.text:0040C645                 call    strspn
.text:0040C64A                 add     [esp+1Ch], eax
.text:0040C64E                 jmp     loc_40C487
.text:0040C653 ; ---------------------------------------------------------------------------
.text:0040C653
.text:0040C653 loc_40C653:                             ; CODE XREF: .text:0040C465↑j
.text:0040C653                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040C657                 jz      short loc_40C69A
.text:0040C659
.text:0040C659 loc_40C659:                             ; CODE XREF: .text:0040C69E↓j
.text:0040C659                                         ; .text:0040C6A4↓j
.text:0040C659                 cmp     al, 5Ch ; '\'
.text:0040C65B                 jnz     loc_40C46B
.text:0040C661                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040C665                 jz      short loc_40C682
.text:0040C667
.text:0040C667 loc_40C667:                             ; CODE XREF: .text:0040C686↓j
.text:0040C667                                         ; .text:0040C68C↓j
.text:0040C667                 cmp     al, 5Ch ; '\'
.text:0040C669                 jnz     loc_40C46B
.text:0040C66F                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:0040C673                 jnz     loc_40C46B
.text:0040C679                 mov     byte ptr [ecx], 5Ch ; '\'
.text:0040C67C                 inc     edx
.text:0040C67D                 jmp     loc_40C46D
.text:0040C682 ; ---------------------------------------------------------------------------
.text:0040C682
.text:0040C682 loc_40C682:                             ; CODE XREF: .text:0040C665↑j
.text:0040C682                 cmp     byte ptr [edx+2], 31h ; '1'
.text:0040C686                 jnz     short loc_40C667
.text:0040C688                 cmp     byte ptr [edx+3], 32h ; '2'
.text:0040C68C                 jnz     short loc_40C667
.text:0040C68E                 mov     byte ptr [ecx], 9
.text:0040C691
.text:0040C691 loc_40C691:                             ; CODE XREF: .text:0040C6A9↓j
.text:0040C691                 inc     ecx
.text:0040C692                 add     edx, 3
.text:0040C695                 jmp     loc_40C46E
.text:0040C69A ; ---------------------------------------------------------------------------
.text:0040C69A
.text:0040C69A loc_40C69A:                             ; CODE XREF: .text:0040C657↑j
.text:0040C69A                 cmp     byte ptr [edx+2], 34h ; '4'
.text:0040C69E                 jnz     short loc_40C659
.text:0040C6A0                 cmp     byte ptr [edx+3], 30h ; '0'
.text:0040C6A4                 jnz     short loc_40C659
.text:0040C6A6                 mov     byte ptr [ecx], 20h ; ' '
.text:0040C6A9                 jmp     short loc_40C691
.text:0040C6AB ; ---------------------------------------------------------------------------
.text:0040C6AB
.text:0040C6AB loc_40C6AB:                             ; CODE XREF: .text:0040C430↑j
.text:0040C6AB                 mov     dword ptr [esp+4], 40C2EAh
.text:0040C6B3                 mov     [esp], eax
.text:0040C6B6                 call    strspn
.text:0040C6BB                 add     [esp+1Ch], eax
.text:0040C6BF                 jmp     loc_40C436
.text:0040C6C4 ; ---------------------------------------------------------------------------
.text:0040C6C4
.text:0040C6C4 loc_40C6C4:                             ; CODE XREF: .text:0040C415↑j
.text:0040C6C4                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040C6C8                 jz      short loc_40C70B
.text:0040C6CA
.text:0040C6CA loc_40C6CA:                             ; CODE XREF: .text:0040C70F↓j
.text:0040C6CA                                         ; .text:0040C715↓j
.text:0040C6CA                 cmp     al, 5Ch ; '\'
.text:0040C6CC                 jnz     loc_40C41B
.text:0040C6D2                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040C6D6                 jz      short loc_40C6F3
.text:0040C6D8
.text:0040C6D8 loc_40C6D8:                             ; CODE XREF: .text:0040C6F7↓j
.text:0040C6D8                                         ; .text:0040C6FD↓j
.text:0040C6D8                 cmp     al, 5Ch ; '\'
.text:0040C6DA                 jnz     loc_40C41B
.text:0040C6E0                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:0040C6E4                 jnz     loc_40C41B
.text:0040C6EA                 mov     byte ptr [ecx], 5Ch ; '\'
.text:0040C6ED                 inc     edx
.text:0040C6EE                 jmp     loc_40C41D
.text:0040C6F3 ; ---------------------------------------------------------------------------
.text:0040C6F3
.text:0040C6F3 loc_40C6F3:                             ; CODE XREF: .text:0040C6D6↑j
.text:0040C6F3                 cmp     byte ptr [edx+2], 31h ; '1'
.text:0040C6F7                 jnz     short loc_40C6D8
.text:0040C6F9                 cmp     byte ptr [edx+3], 32h ; '2'
.text:0040C6FD                 jnz     short loc_40C6D8
.text:0040C6FF                 mov     byte ptr [ecx], 9
.text:0040C702
.text:0040C702 loc_40C702:                             ; CODE XREF: .text:0040C71A↓j
.text:0040C702                 inc     ecx
.text:0040C703                 add     edx, 3
.text:0040C706                 jmp     loc_40C41E
.text:0040C70B ; ---------------------------------------------------------------------------
.text:0040C70B
.text:0040C70B loc_40C70B:                             ; CODE XREF: .text:0040C6C8↑j
.text:0040C70B                 cmp     byte ptr [edx+2], 34h ; '4'
.text:0040C70F                 jnz     short loc_40C6CA
.text:0040C711                 cmp     byte ptr [edx+3], 30h ; '0'
.text:0040C715                 jnz     short loc_40C6CA
.text:0040C717                 mov     byte ptr [ecx], 20h ; ' '
.text:0040C71A                 jmp     short loc_40C702
.text:0040C71A ; ---------------------------------------------------------------------------
.text:0040C71C                 align 10h
.text:0040C720
.text:0040C720 loc_40C720:                             ; CODE XREF: .text:0040C332↑j
.text:0040C720                 mov     dword ptr [esp+4], 0
.text:0040C728                 mov     dword ptr [esp], 0
.text:0040C72F                 call    GetLogicalDriveStringsA
.text:0040C734                 sub     esp, 8
.text:0040C737                 mov     ebx, eax
.text:0040C739                 call    GetProcessHeap
.text:0040C73E                 mov     [esp], eax
.text:0040C741                 mov     [esp+8], ebx
.text:0040C745                 mov     dword ptr [esp+4], 0
.text:0040C74D                 call    HeapAlloc
.text:0040C752                 sub     esp, 0Ch
.text:0040C755                 mov     esi, eax
.text:0040C757                 mov     [esp+4], eax
.text:0040C75B                 mov     [esp], ebx
.text:0040C75E                 call    GetLogicalDriveStringsA
.text:0040C763                 mov     off_4110F4, esi ; "notset"
.text:0040C769                 sub     esp, 8
.text:0040C76C                 jmp     loc_40C338
.text:0040C76C ; ---------------------------------------------------------------------------
.text:0040C771 ; const char aSSSSDD[]
.text:0040C771 aSSSSDD         db '%s %s %s %s %d %d',0Ah,0
.text:0040C771                                         ; DATA XREF: .text:0040C8B0↓o
.text:0040C771                                         ; ___addmntentstr+F0↓o
.text:0040C784                 align 10h
.text:0040C790                 push    esi
.text:0040C791                 push    ebx
.text:0040C792                 sub     esp, 44h
.text:0040C795                 mov     ebx, [esp+54h]
.text:0040C799                 mov     esi, [esp+50h]
.text:0040C79D                 mov     edx, [ebx]
.text:0040C79F                 mov     [esp+20h], edx
.text:0040C7A3                 mov     ecx, [ebx+4]
.text:0040C7A6                 mov     [esp+24h], ecx
.text:0040C7AA                 mov     edx, [ebx+8]
.text:0040C7AD                 mov     [esp+28h], edx
.text:0040C7B1                 mov     ecx, [ebx+0Ch]
.text:0040C7B4                 mov     [esp+2Ch], ecx
.text:0040C7B8                 mov     edx, [ebx+10h]
.text:0040C7BB                 mov     [esp+30h], edx
.text:0040C7BF                 mov     ecx, [ebx+14h]
.text:0040C7C2                 mov     dword ptr [esp+8], 2
.text:0040C7CA                 mov     dword ptr [esp+4], 0
.text:0040C7D2                 mov     [esp+34h], ecx
.text:0040C7D6                 mov     [esp], esi
.text:0040C7D9                 call    sub_40D0D0
.text:0040C7DE ; ---------------------------------------------------------------------------
.text:0040C7DE                 test    eax, eax
.text:0040C7E0                 mov     edx, 1
.text:0040C7E5                 jnz     loc_40C8E5
.text:0040C7EB                 mov     ebx, [esp+20h]
.text:0040C7EF                 mov     edx, ebx
.text:0040C7F1                 movzx   eax, byte ptr [ebx]
.text:0040C7F4                 test    al, al
.text:0040C7F6                 jz      short loc_40C820
.text:0040C7F8                 nop
.text:0040C7F9                 lea     esi, [esi+0]
.text:0040C800
.text:0040C800 loc_40C800:                             ; CODE XREF: .text:0040C81E↓j
.text:0040C800                 cmp     al, 20h ; ' '
.text:0040C802                 jz      loc_40CA5A
.text:0040C808                 cmp     al, 9
.text:0040C80A                 jz      loc_40CA5A
.text:0040C810                 cmp     al, 5Ch ; '\'
.text:0040C812                 jz      loc_40CA5A
.text:0040C818                 inc     ebx
.text:0040C819                 movzx   eax, byte ptr [ebx]
.text:0040C81C                 test    al, al
.text:0040C81E                 jnz     short loc_40C800
.text:0040C820
.text:0040C820 loc_40C820:                             ; CODE XREF: .text:0040C7F6↑j
.text:0040C820                                         ; .text:0040CA5C↓j ...
.text:0040C820                 mov     ebx, [esp+24h]
.text:0040C824                 mov     edx, ebx
.text:0040C826                 movzx   eax, byte ptr [ebx]
.text:0040C829                 test    al, al
.text:0040C82B                 jz      short loc_40C850
.text:0040C82D                 lea     esi, [esi+0]
.text:0040C830
.text:0040C830 loc_40C830:                             ; CODE XREF: .text:0040C84E↓j
.text:0040C830                 cmp     al, 20h ; ' '
.text:0040C832                 jz      loc_40C9DA
.text:0040C838                 cmp     al, 9
.text:0040C83A                 jz      loc_40C9DA
.text:0040C840                 cmp     al, 5Ch ; '\'
.text:0040C842                 jz      loc_40C9DA
.text:0040C848                 inc     ebx
.text:0040C849                 movzx   eax, byte ptr [ebx]
.text:0040C84C                 test    al, al
.text:0040C84E                 jnz     short loc_40C830
.text:0040C850
.text:0040C850 loc_40C850:                             ; CODE XREF: .text:0040C82B↑j
.text:0040C850                                         ; .text:0040C9DC↓j ...
.text:0040C850                 mov     ebx, [esp+28h]
.text:0040C854                 mov     edx, ebx
.text:0040C856                 movzx   eax, byte ptr [ebx]
.text:0040C859                 test    al, al
.text:0040C85B                 jz      short loc_40C880
.text:0040C85D                 lea     esi, [esi+0]
.text:0040C860
.text:0040C860 loc_40C860:                             ; CODE XREF: .text:0040C87E↓j
.text:0040C860                 cmp     al, 20h ; ' '
.text:0040C862                 jz      loc_40C95E
.text:0040C868                 cmp     al, 9
.text:0040C86A                 jz      loc_40C95E
.text:0040C870                 cmp     al, 5Ch ; '\'
.text:0040C872                 jz      loc_40C95E
.text:0040C878                 inc     ebx
.text:0040C879                 movzx   eax, byte ptr [ebx]
.text:0040C87C                 test    al, al
.text:0040C87E                 jnz     short loc_40C860
.text:0040C880
.text:0040C880 loc_40C880:                             ; CODE XREF: .text:0040C85B↑j
.text:0040C880                                         ; .text:0040C960↓j ...
.text:0040C880                 mov     edx, [esp+2Ch]
.text:0040C884                 mov     ebx, edx
.text:0040C886                 movzx   eax, byte ptr [edx]
.text:0040C889                 test    al, al
.text:0040C88B                 jz      short loc_40C8A4
.text:0040C88D                 lea     esi, [esi+0]
.text:0040C890
.text:0040C890 loc_40C890:                             ; CODE XREF: .text:0040C8A2↓j
.text:0040C890                 cmp     al, 20h ; ' '
.text:0040C892                 jz      short loc_40C8ED
.text:0040C894                 cmp     al, 9
.text:0040C896                 jz      short loc_40C8ED
.text:0040C898                 cmp     al, 5Ch ; '\'
.text:0040C89A                 jz      short loc_40C8ED
.text:0040C89C                 inc     ebx
.text:0040C89D                 movzx   eax, byte ptr [ebx]
.text:0040C8A0                 test    al, al
.text:0040C8A2                 jnz     short loc_40C890
.text:0040C8A4
.text:0040C8A4 loc_40C8A4:                             ; CODE XREF: .text:0040C88B↑j
.text:0040C8A4                                         ; .text:0040C8EF↓j ...
.text:0040C8A4                 mov     [esp+14h], edx
.text:0040C8A8                 mov     ecx, [esp+34h]
.text:0040C8AC                 mov     ebx, [esp+30h]
.text:0040C8B0                 mov     dword ptr [esp+4], offset aSSSSDD ; "%s %s %s %s %d %d\n"
.text:0040C8B8                 mov     edx, [esp+24h]
.text:0040C8BC                 mov     [esp+1Ch], ecx
.text:0040C8C0                 mov     ecx, [esp+28h]
.text:0040C8C4                 mov     [esp+18h], ebx
.text:0040C8C8                 mov     ebx, [esp+20h]
.text:0040C8CC                 mov     [esp+0Ch], edx
.text:0040C8D0                 mov     [esp+10h], ecx
.text:0040C8D4                 mov     [esp+8], ebx
.text:0040C8D8                 mov     [esp], esi
.text:0040C8DB                 call    fprintf
.text:0040C8E0                 mov     edx, eax
.text:0040C8E2                 shr     edx, 1Fh
.text:0040C8E5
.text:0040C8E5 loc_40C8E5:                             ; CODE XREF: .text:0040C7E5↑j
.text:0040C8E5                 add     esp, 44h
.text:0040C8E8                 mov     eax, edx
.text:0040C8EA                 pop     ebx
.text:0040C8EB                 pop     esi
.text:0040C8EC                 retn
.text:0040C8ED ; ---------------------------------------------------------------------------
.text:0040C8ED
.text:0040C8ED loc_40C8ED:                             ; CODE XREF: .text:0040C892↑j
.text:0040C8ED                                         ; .text:0040C896↑j ...
.text:0040C8ED                 test    al, al
.text:0040C8EF                 jz      short loc_40C8A4
.text:0040C8F1                 mov     [esp], edx
.text:0040C8F4                 mov     ebx, edx
.text:0040C8F6                 call    strlen
.text:0040C8FB                 lea     edx, ds:1[eax*4]
.text:0040C902                 mov     [esp], edx
.text:0040C905                 call    malloc
.text:0040C90A                 mov     [esp+2Ch], eax
.text:0040C90E                 mov     edx, eax
.text:0040C910
.text:0040C910 loc_40C910:                             ; CODE XREF: .text:0040C928↓j
.text:0040C910                 movzx   eax, byte ptr [ebx]
.text:0040C913                 cmp     al, 20h ; ' '
.text:0040C915                 jz      short loc_40C94D
.text:0040C917                 cmp     al, 9
.text:0040C919                 jz      short loc_40C93C
.text:0040C91B                 cmp     al, 5Ch ; '\'
.text:0040C91D                 jz      short loc_40C933
.text:0040C91F                 mov     [edx], al
.text:0040C921
.text:0040C921 loc_40C921:                             ; CODE XREF: .text:0040C93A↓j
.text:0040C921                                         ; .text:0040C94B↓j ...
.text:0040C921                 movzx   ecx, byte ptr [ebx]
.text:0040C924                 inc     edx
.text:0040C925                 inc     ebx
.text:0040C926                 test    cl, cl
.text:0040C928                 jnz     short loc_40C910
.text:0040C92A                 mov     edx, [esp+2Ch]
.text:0040C92E                 jmp     loc_40C8A4
.text:0040C933 ; ---------------------------------------------------------------------------
.text:0040C933
.text:0040C933 loc_40C933:                             ; CODE XREF: .text:0040C91D↑j
.text:0040C933                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040C936                 inc     edx
.text:0040C937                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040C93A                 jmp     short loc_40C921
.text:0040C93C ; ---------------------------------------------------------------------------
.text:0040C93C
.text:0040C93C loc_40C93C:                             ; CODE XREF: .text:0040C919↑j
.text:0040C93C                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040C93F                 inc     edx
.text:0040C940                 mov     byte ptr [edx], 30h ; '0'
.text:0040C943                 inc     edx
.text:0040C944                 mov     byte ptr [edx], 31h ; '1'
.text:0040C947                 inc     edx
.text:0040C948                 mov     byte ptr [edx], 32h ; '2'
.text:0040C94B                 jmp     short loc_40C921
.text:0040C94D ; ---------------------------------------------------------------------------
.text:0040C94D
.text:0040C94D loc_40C94D:                             ; CODE XREF: .text:0040C915↑j
.text:0040C94D                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040C950                 inc     edx
.text:0040C951                 mov     byte ptr [edx], 30h ; '0'
.text:0040C954                 inc     edx
.text:0040C955                 mov     byte ptr [edx], 34h ; '4'
.text:0040C958                 inc     edx
.text:0040C959                 mov     byte ptr [edx], 30h ; '0'
.text:0040C95C                 jmp     short loc_40C921
.text:0040C95E ; ---------------------------------------------------------------------------
.text:0040C95E
.text:0040C95E loc_40C95E:                             ; CODE XREF: .text:0040C862↑j
.text:0040C95E                                         ; .text:0040C86A↑j ...
.text:0040C95E                 test    al, al
.text:0040C960                 jz      loc_40C880
.text:0040C966                 mov     [esp], edx
.text:0040C969                 mov     ebx, edx
.text:0040C96B                 call    strlen
.text:0040C970                 lea     edx, ds:1[eax*4]
.text:0040C977                 mov     [esp], edx
.text:0040C97A                 call    malloc
.text:0040C97F                 mov     [esp+28h], eax
.text:0040C983                 mov     edx, eax
.text:0040C985                 lea     esi, [esi+0]
.text:0040C989                 lea     edi, [edi+0]
.text:0040C990
.text:0040C990 loc_40C990:                             ; CODE XREF: .text:0040C9A8↓j
.text:0040C990                 movzx   eax, byte ptr [ebx]
.text:0040C993                 cmp     al, 20h ; ' '
.text:0040C995                 jz      short loc_40C9C9
.text:0040C997                 cmp     al, 9
.text:0040C999                 jz      short loc_40C9B8
.text:0040C99B                 cmp     al, 5Ch ; '\'
.text:0040C99D                 jz      short loc_40C9AF
.text:0040C99F                 mov     [edx], al
.text:0040C9A1
.text:0040C9A1 loc_40C9A1:                             ; CODE XREF: .text:0040C9B6↓j
.text:0040C9A1                                         ; .text:0040C9C7↓j ...
.text:0040C9A1                 movzx   ecx, byte ptr [ebx]
.text:0040C9A4                 inc     edx
.text:0040C9A5                 inc     ebx
.text:0040C9A6                 test    cl, cl
.text:0040C9A8                 jnz     short loc_40C990
.text:0040C9AA                 jmp     loc_40C880
.text:0040C9AF ; ---------------------------------------------------------------------------
.text:0040C9AF
.text:0040C9AF loc_40C9AF:                             ; CODE XREF: .text:0040C99D↑j
.text:0040C9AF                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040C9B2                 inc     edx
.text:0040C9B3                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040C9B6                 jmp     short loc_40C9A1
.text:0040C9B8 ; ---------------------------------------------------------------------------
.text:0040C9B8
.text:0040C9B8 loc_40C9B8:                             ; CODE XREF: .text:0040C999↑j
.text:0040C9B8                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040C9BB                 inc     edx
.text:0040C9BC                 mov     byte ptr [edx], 30h ; '0'
.text:0040C9BF                 inc     edx
.text:0040C9C0                 mov     byte ptr [edx], 31h ; '1'
.text:0040C9C3                 inc     edx
.text:0040C9C4                 mov     byte ptr [edx], 32h ; '2'
.text:0040C9C7                 jmp     short loc_40C9A1
.text:0040C9C9 ; ---------------------------------------------------------------------------
.text:0040C9C9
.text:0040C9C9 loc_40C9C9:                             ; CODE XREF: .text:0040C995↑j
.text:0040C9C9                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040C9CC                 inc     edx
.text:0040C9CD                 mov     byte ptr [edx], 30h ; '0'
.text:0040C9D0                 inc     edx
.text:0040C9D1                 mov     byte ptr [edx], 34h ; '4'
.text:0040C9D4                 inc     edx
.text:0040C9D5                 mov     byte ptr [edx], 30h ; '0'
.text:0040C9D8                 jmp     short loc_40C9A1
.text:0040C9DA ; ---------------------------------------------------------------------------
.text:0040C9DA
.text:0040C9DA loc_40C9DA:                             ; CODE XREF: .text:0040C832↑j
.text:0040C9DA                                         ; .text:0040C83A↑j ...
.text:0040C9DA                 test    al, al
.text:0040C9DC                 jz      loc_40C850
.text:0040C9E2                 mov     [esp], edx
.text:0040C9E5                 mov     ebx, edx
.text:0040C9E7                 call    strlen
.text:0040C9EC                 lea     edx, ds:1[eax*4]
.text:0040C9F3                 mov     [esp], edx
.text:0040C9F6                 call    malloc
.text:0040C9FB                 mov     [esp+24h], eax
.text:0040C9FF                 mov     edx, eax
.text:0040CA01                 jmp     short loc_40CA10
.text:0040CA01 ; ---------------------------------------------------------------------------
.text:0040CA03                 align 10h
.text:0040CA10
.text:0040CA10 loc_40CA10:                             ; CODE XREF: .text:0040CA01↑j
.text:0040CA10                                         ; .text:0040CA28↓j
.text:0040CA10                 movzx   eax, byte ptr [ebx]
.text:0040CA13                 cmp     al, 20h ; ' '
.text:0040CA15                 jz      short loc_40CA49
.text:0040CA17                 cmp     al, 9
.text:0040CA19                 jz      short loc_40CA38
.text:0040CA1B                 cmp     al, 5Ch ; '\'
.text:0040CA1D                 jz      short loc_40CA2F
.text:0040CA1F                 mov     [edx], al
.text:0040CA21
.text:0040CA21 loc_40CA21:                             ; CODE XREF: .text:0040CA36↓j
.text:0040CA21                                         ; .text:0040CA47↓j ...
.text:0040CA21                 movzx   ecx, byte ptr [ebx]
.text:0040CA24                 inc     edx
.text:0040CA25                 inc     ebx
.text:0040CA26                 test    cl, cl
.text:0040CA28                 jnz     short loc_40CA10
.text:0040CA2A                 jmp     loc_40C850
.text:0040CA2F ; ---------------------------------------------------------------------------
.text:0040CA2F
.text:0040CA2F loc_40CA2F:                             ; CODE XREF: .text:0040CA1D↑j
.text:0040CA2F                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040CA32                 inc     edx
.text:0040CA33                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040CA36                 jmp     short loc_40CA21
.text:0040CA38 ; ---------------------------------------------------------------------------
.text:0040CA38
.text:0040CA38 loc_40CA38:                             ; CODE XREF: .text:0040CA19↑j
.text:0040CA38                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040CA3B                 inc     edx
.text:0040CA3C                 mov     byte ptr [edx], 30h ; '0'
.text:0040CA3F                 inc     edx
.text:0040CA40                 mov     byte ptr [edx], 31h ; '1'
.text:0040CA43                 inc     edx
.text:0040CA44                 mov     byte ptr [edx], 32h ; '2'
.text:0040CA47                 jmp     short loc_40CA21
.text:0040CA49 ; ---------------------------------------------------------------------------
.text:0040CA49
.text:0040CA49 loc_40CA49:                             ; CODE XREF: .text:0040CA15↑j
.text:0040CA49                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040CA4C                 inc     edx
.text:0040CA4D                 mov     byte ptr [edx], 30h ; '0'
.text:0040CA50                 inc     edx
.text:0040CA51                 mov     byte ptr [edx], 34h ; '4'
.text:0040CA54                 inc     edx
.text:0040CA55                 mov     byte ptr [edx], 30h ; '0'
.text:0040CA58                 jmp     short loc_40CA21
.text:0040CA5A ; ---------------------------------------------------------------------------
.text:0040CA5A
.text:0040CA5A loc_40CA5A:                             ; CODE XREF: .text:0040C802↑j
.text:0040CA5A                                         ; .text:0040C80A↑j ...
.text:0040CA5A                 test    al, al
.text:0040CA5C                 jz      loc_40C820
.text:0040CA62                 mov     [esp], edx
.text:0040CA65                 mov     ebx, edx
.text:0040CA67                 call    strlen
.text:0040CA6C                 lea     ecx, ds:1[eax*4]
.text:0040CA73                 mov     [esp], ecx
.text:0040CA76                 call    malloc
.text:0040CA7B                 mov     [esp+20h], eax
.text:0040CA7F                 mov     edx, eax
.text:0040CA81                 jmp     short loc_40CA90
.text:0040CA81 ; ---------------------------------------------------------------------------
.text:0040CA83                 align 10h
.text:0040CA90
.text:0040CA90 loc_40CA90:                             ; CODE XREF: .text:0040CA81↑j
.text:0040CA90                                         ; .text:0040CAA8↓j
.text:0040CA90                 movzx   eax, byte ptr [ebx]
.text:0040CA93                 cmp     al, 20h ; ' '
.text:0040CA95                 jz      short loc_40CAC9
.text:0040CA97                 cmp     al, 9
.text:0040CA99                 jz      short loc_40CAB8
.text:0040CA9B                 cmp     al, 5Ch ; '\'
.text:0040CA9D                 jz      short loc_40CAAF
.text:0040CA9F                 mov     [edx], al
.text:0040CAA1
.text:0040CAA1 loc_40CAA1:                             ; CODE XREF: .text:0040CAB6↓j
.text:0040CAA1                                         ; .text:0040CAC7↓j ...
.text:0040CAA1                 movzx   ecx, byte ptr [ebx]
.text:0040CAA4                 inc     edx
.text:0040CAA5                 inc     ebx
.text:0040CAA6                 test    cl, cl
.text:0040CAA8                 jnz     short loc_40CA90
.text:0040CAAA                 jmp     loc_40C820
.text:0040CAAF ; ---------------------------------------------------------------------------
.text:0040CAAF
.text:0040CAAF loc_40CAAF:                             ; CODE XREF: .text:0040CA9D↑j
.text:0040CAAF                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040CAB2                 inc     edx
.text:0040CAB3                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040CAB6                 jmp     short loc_40CAA1
.text:0040CAB8 ; ---------------------------------------------------------------------------
.text:0040CAB8
.text:0040CAB8 loc_40CAB8:                             ; CODE XREF: .text:0040CA99↑j
.text:0040CAB8                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040CABB                 inc     edx
.text:0040CABC                 mov     byte ptr [edx], 30h ; '0'
.text:0040CABF                 inc     edx
.text:0040CAC0                 mov     byte ptr [edx], 31h ; '1'
.text:0040CAC3                 inc     edx
.text:0040CAC4                 mov     byte ptr [edx], 32h ; '2'
.text:0040CAC7                 jmp     short loc_40CAA1
.text:0040CAC9 ; ---------------------------------------------------------------------------
.text:0040CAC9
.text:0040CAC9 loc_40CAC9:                             ; CODE XREF: .text:0040CA95↑j
.text:0040CAC9                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040CACC                 inc     edx
.text:0040CACD                 mov     byte ptr [edx], 30h ; '0'
.text:0040CAD0                 inc     edx
.text:0040CAD1                 mov     byte ptr [edx], 34h ; '4'
.text:0040CAD4                 inc     edx
.text:0040CAD5                 mov     byte ptr [edx], 30h ; '0'
.text:0040CAD8                 jmp     short loc_40CAA1
.text:0040CAD8 ; ---------------------------------------------------------------------------
.text:0040CADA                 align 10h
.text:0040CAE0
.text:0040CAE0 ; =============== S U B R O U T I N E =======================================
.text:0040CAE0
.text:0040CAE0 ; Attributes: info_from_lumina
.text:0040CAE0
.text:0040CAE0 ; int __cdecl __addmntentstr(char *, int)
.text:0040CAE0 ___addmntentstr proc near               ; CODE XREF: .text:0040C3AA↑p
.text:0040CAE0
.text:0040CAE0 Buffer          = dword ptr -4Ch
.text:0040CAE0 Format          = dword ptr -48h
.text:0040CAE0 var_44          = dword ptr -44h
.text:0040CAE0 var_40          = dword ptr -40h
.text:0040CAE0 var_3C          = dword ptr -3Ch
.text:0040CAE0 var_38          = dword ptr -38h
.text:0040CAE0 var_34          = dword ptr -34h
.text:0040CAE0 var_30          = dword ptr -30h
.text:0040CAE0 var_2C          = dword ptr -2Ch
.text:0040CAE0 var_28          = dword ptr -28h
.text:0040CAE0 var_24          = dword ptr -24h
.text:0040CAE0 Str             = dword ptr -20h
.text:0040CAE0 var_1C          = dword ptr -1Ch
.text:0040CAE0 var_18          = dword ptr -18h
.text:0040CAE0 arg_0           = dword ptr  4
.text:0040CAE0 arg_4           = dword ptr  8
.text:0040CAE0
.text:0040CAE0                 push    ebx
.text:0040CAE1                 sub     esp, 48h
.text:0040CAE4                 mov     edx, [esp+4Ch+arg_4]
.text:0040CAE8                 mov     ecx, [edx]
.text:0040CAEA                 mov     [esp+4Ch+var_2C], ecx
.text:0040CAEE                 mov     ebx, [edx+4]
.text:0040CAF1                 mov     [esp+4Ch+var_28], ebx
.text:0040CAF5                 mov     ebx, [edx+8]
.text:0040CAF8                 mov     [esp+4Ch+var_24], ebx
.text:0040CAFC                 mov     ebx, [edx+0Ch]
.text:0040CAFF                 mov     [esp+4Ch+Str], ebx
.text:0040CB03                 mov     ebx, [edx+10h]
.text:0040CB06                 mov     [esp+4Ch+var_1C], ebx
.text:0040CB0A                 mov     ebx, [edx+14h]
.text:0040CB0D                 mov     [esp+4Ch+var_18], ebx
.text:0040CB11                 mov     ebx, ecx
.text:0040CB13                 movzx   eax, byte ptr [ecx]
.text:0040CB16                 test    al, al
.text:0040CB18                 jz      loc_40CE01
.text:0040CB1E                 mov     esi, esi
.text:0040CB20
.text:0040CB20 loc_40CB20:                             ; CODE XREF: ___addmntentstr+5E↓j
.text:0040CB20                 cmp     al, 20h ; ' '
.text:0040CB22                 jz      loc_40CD80
.text:0040CB28                 cmp     al, 9
.text:0040CB2A                 jz      loc_40CD80
.text:0040CB30                 cmp     al, 5Ch ; '\'
.text:0040CB32                 jz      loc_40CD80
.text:0040CB38                 inc     ebx
.text:0040CB39                 movzx   eax, byte ptr [ebx]
.text:0040CB3C                 test    al, al
.text:0040CB3E                 jnz     short loc_40CB20
.text:0040CB40
.text:0040CB40 loc_40CB40:                             ; CODE XREF: ___addmntentstr+2A2↓j
.text:0040CB40                                         ; ___addmntentstr+2EA↓j
.text:0040CB40                 mov     ebx, [esp+4Ch+var_28]
.text:0040CB44                 mov     edx, ebx
.text:0040CB46                 movzx   eax, byte ptr [ebx]
.text:0040CB49                 test    al, al
.text:0040CB4B                 jz      short loc_40CB70
.text:0040CB4D                 lea     esi, [esi+0]
.text:0040CB50
.text:0040CB50 loc_40CB50:                             ; CODE XREF: ___addmntentstr+8E↓j
.text:0040CB50                 cmp     al, 20h ; ' '
.text:0040CB52                 jz      loc_40CCFA
.text:0040CB58                 cmp     al, 9
.text:0040CB5A                 jz      loc_40CCFA
.text:0040CB60                 cmp     al, 5Ch ; '\'
.text:0040CB62                 jz      loc_40CCFA
.text:0040CB68                 inc     ebx
.text:0040CB69                 movzx   eax, byte ptr [ebx]
.text:0040CB6C                 test    al, al
.text:0040CB6E                 jnz     short loc_40CB50
.text:0040CB70
.text:0040CB70 loc_40CB70:                             ; CODE XREF: ___addmntentstr+6B↑j
.text:0040CB70                                         ; ___addmntentstr+21C↓j ...
.text:0040CB70                 mov     ebx, [esp+4Ch+var_24]
.text:0040CB74                 mov     edx, ebx
.text:0040CB76                 movzx   eax, byte ptr [ebx]
.text:0040CB79                 test    al, al
.text:0040CB7B                 jz      short loc_40CBA0
.text:0040CB7D                 lea     esi, [esi+0]
.text:0040CB80
.text:0040CB80 loc_40CB80:                             ; CODE XREF: ___addmntentstr+BE↓j
.text:0040CB80                 cmp     al, 20h ; ' '
.text:0040CB82                 jz      loc_40CC7E
.text:0040CB88                 cmp     al, 9
.text:0040CB8A                 jz      loc_40CC7E
.text:0040CB90                 cmp     al, 5Ch ; '\'
.text:0040CB92                 jz      loc_40CC7E
.text:0040CB98                 inc     ebx
.text:0040CB99                 movzx   eax, byte ptr [ebx]
.text:0040CB9C                 test    al, al
.text:0040CB9E                 jnz     short loc_40CB80
.text:0040CBA0
.text:0040CBA0 loc_40CBA0:                             ; CODE XREF: ___addmntentstr+9B↑j
.text:0040CBA0                                         ; ___addmntentstr+1A0↓j ...
.text:0040CBA0                 mov     edx, [esp+4Ch+Str]
.text:0040CBA4                 mov     ebx, edx
.text:0040CBA6                 movzx   eax, byte ptr [edx]
.text:0040CBA9                 test    al, al
.text:0040CBAB                 jz      short loc_40CBC4
.text:0040CBAD                 lea     esi, [esi+0]
.text:0040CBB0
.text:0040CBB0 loc_40CBB0:                             ; CODE XREF: ___addmntentstr+E2↓j
.text:0040CBB0                 cmp     al, 20h ; ' '
.text:0040CBB2                 jz      short loc_40CC0C
.text:0040CBB4                 cmp     al, 9
.text:0040CBB6                 jz      short loc_40CC0C
.text:0040CBB8                 cmp     al, 5Ch ; '\'
.text:0040CBBA                 jz      short loc_40CC0C
.text:0040CBBC                 inc     ebx
.text:0040CBBD                 movzx   eax, byte ptr [ebx]
.text:0040CBC0                 test    al, al
.text:0040CBC2                 jnz     short loc_40CBB0
.text:0040CBC4
.text:0040CBC4 loc_40CBC4:                             ; CODE XREF: ___addmntentstr+CB↑j
.text:0040CBC4                                         ; ___addmntentstr+12E↓j ...
.text:0040CBC4                 mov     [esp+4Ch+var_38], edx
.text:0040CBC8                 mov     ebx, [esp+4Ch+var_18]
.text:0040CBCC                 mov     ecx, [esp+4Ch+var_1C]
.text:0040CBD0                 mov     [esp+4Ch+Format], offset aSSSSDD ; "%s %s %s %s %d %d\n"
.text:0040CBD8                 mov     edx, [esp+4Ch+var_2C]
.text:0040CBDC                 mov     [esp+4Ch+var_30], ebx
.text:0040CBE0                 mov     ebx, [esp+4Ch+var_24]
.text:0040CBE4                 mov     [esp+4Ch+var_34], ecx
.text:0040CBE8                 mov     ecx, [esp+4Ch+var_28]
.text:0040CBEC                 mov     [esp+4Ch+var_3C], ebx
.text:0040CBF0                 mov     ebx, [esp+4Ch+arg_0]
.text:0040CBF4                 mov     [esp+4Ch+var_40], ecx
.text:0040CBF8                 mov     [esp+4Ch+var_44], edx
.text:0040CBFC                 mov     [esp+4Ch+Buffer], ebx ; Buffer
.text:0040CBFF                 call    sprintf
.text:0040CC04                 add     esp, 48h
.text:0040CC07                 shr     eax, 1Fh
.text:0040CC0A                 pop     ebx
.text:0040CC0B                 retn
.text:0040CC0C ; ---------------------------------------------------------------------------
.text:0040CC0C
.text:0040CC0C loc_40CC0C:                             ; CODE XREF: ___addmntentstr+D2↑j
.text:0040CC0C                                         ; ___addmntentstr+D6↑j ...
.text:0040CC0C                 test    al, al
.text:0040CC0E                 jz      short loc_40CBC4
.text:0040CC10                 mov     [esp+4Ch+Buffer], edx ; Str
.text:0040CC13                 mov     ebx, edx
.text:0040CC15                 call    strlen
.text:0040CC1A                 lea     edx, ds:1[eax*4]
.text:0040CC21                 mov     [esp+4Ch+Buffer], edx ; Size
.text:0040CC24                 call    malloc
.text:0040CC29                 mov     [esp+4Ch+Str], eax
.text:0040CC2D                 mov     edx, eax
.text:0040CC2F                 nop
.text:0040CC30
.text:0040CC30 loc_40CC30:                             ; CODE XREF: ___addmntentstr+168↓j
.text:0040CC30                 movzx   eax, byte ptr [ebx]
.text:0040CC33                 cmp     al, 20h ; ' '
.text:0040CC35                 jz      short loc_40CC6D
.text:0040CC37                 cmp     al, 9
.text:0040CC39                 jz      short loc_40CC5C
.text:0040CC3B                 cmp     al, 5Ch ; '\'
.text:0040CC3D                 jz      short loc_40CC53
.text:0040CC3F                 mov     [edx], al
.text:0040CC41
.text:0040CC41 loc_40CC41:                             ; CODE XREF: ___addmntentstr+17A↓j
.text:0040CC41                                         ; ___addmntentstr+18B↓j ...
.text:0040CC41                 movzx   ecx, byte ptr [ebx]
.text:0040CC44                 inc     edx
.text:0040CC45                 inc     ebx
.text:0040CC46                 test    cl, cl
.text:0040CC48                 jnz     short loc_40CC30
.text:0040CC4A                 mov     edx, [esp+4Ch+Str]
.text:0040CC4E                 jmp     loc_40CBC4
.text:0040CC53 ; ---------------------------------------------------------------------------
.text:0040CC53
.text:0040CC53 loc_40CC53:                             ; CODE XREF: ___addmntentstr+15D↑j
.text:0040CC53                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040CC56                 inc     edx
.text:0040CC57                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040CC5A                 jmp     short loc_40CC41
.text:0040CC5C ; ---------------------------------------------------------------------------
.text:0040CC5C
.text:0040CC5C loc_40CC5C:                             ; CODE XREF: ___addmntentstr+159↑j
.text:0040CC5C                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040CC5F                 inc     edx
.text:0040CC60                 mov     byte ptr [edx], 30h ; '0'
.text:0040CC63                 inc     edx
.text:0040CC64                 mov     byte ptr [edx], 31h ; '1'
.text:0040CC67                 inc     edx
.text:0040CC68                 mov     byte ptr [edx], 32h ; '2'
.text:0040CC6B                 jmp     short loc_40CC41
.text:0040CC6D ; ---------------------------------------------------------------------------
.text:0040CC6D
.text:0040CC6D loc_40CC6D:                             ; CODE XREF: ___addmntentstr+155↑j
.text:0040CC6D                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040CC70                 inc     edx
.text:0040CC71                 mov     byte ptr [edx], 30h ; '0'
.text:0040CC74                 inc     edx
.text:0040CC75                 mov     byte ptr [edx], 34h ; '4'
.text:0040CC78                 inc     edx
.text:0040CC79                 mov     byte ptr [edx], 30h ; '0'
.text:0040CC7C                 jmp     short loc_40CC41
.text:0040CC7E ; ---------------------------------------------------------------------------
.text:0040CC7E
.text:0040CC7E loc_40CC7E:                             ; CODE XREF: ___addmntentstr+A2↑j
.text:0040CC7E                                         ; ___addmntentstr+AA↑j ...
.text:0040CC7E                 test    al, al
.text:0040CC80                 jz      loc_40CBA0
.text:0040CC86                 mov     [esp+4Ch+Buffer], edx ; Str
.text:0040CC89                 mov     ebx, edx
.text:0040CC8B                 call    strlen
.text:0040CC90                 lea     edx, ds:1[eax*4]
.text:0040CC97                 mov     [esp+4Ch+Buffer], edx ; Size
.text:0040CC9A                 call    malloc
.text:0040CC9F                 mov     [esp+4Ch+var_24], eax
.text:0040CCA3                 mov     edx, eax
.text:0040CCA5                 lea     esi, [esi+0]
.text:0040CCA9                 lea     edi, [edi+0]
.text:0040CCB0
.text:0040CCB0 loc_40CCB0:                             ; CODE XREF: ___addmntentstr+1E8↓j
.text:0040CCB0                 movzx   eax, byte ptr [ebx]
.text:0040CCB3                 cmp     al, 20h ; ' '
.text:0040CCB5                 jz      short loc_40CCE9
.text:0040CCB7                 cmp     al, 9
.text:0040CCB9                 jz      short loc_40CCD8
.text:0040CCBB                 cmp     al, 5Ch ; '\'
.text:0040CCBD                 jz      short loc_40CCCF
.text:0040CCBF                 mov     [edx], al
.text:0040CCC1
.text:0040CCC1 loc_40CCC1:                             ; CODE XREF: ___addmntentstr+1F6↓j
.text:0040CCC1                                         ; ___addmntentstr+207↓j ...
.text:0040CCC1                 movzx   ecx, byte ptr [ebx]
.text:0040CCC4                 inc     edx
.text:0040CCC5                 inc     ebx
.text:0040CCC6                 test    cl, cl
.text:0040CCC8                 jnz     short loc_40CCB0
.text:0040CCCA                 jmp     loc_40CBA0
.text:0040CCCF ; ---------------------------------------------------------------------------
.text:0040CCCF
.text:0040CCCF loc_40CCCF:                             ; CODE XREF: ___addmntentstr+1DD↑j
.text:0040CCCF                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040CCD2                 inc     edx
.text:0040CCD3                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040CCD6                 jmp     short loc_40CCC1
.text:0040CCD8 ; ---------------------------------------------------------------------------
.text:0040CCD8
.text:0040CCD8 loc_40CCD8:                             ; CODE XREF: ___addmntentstr+1D9↑j
.text:0040CCD8                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040CCDB                 inc     edx
.text:0040CCDC                 mov     byte ptr [edx], 30h ; '0'
.text:0040CCDF                 inc     edx
.text:0040CCE0                 mov     byte ptr [edx], 31h ; '1'
.text:0040CCE3                 inc     edx
.text:0040CCE4                 mov     byte ptr [edx], 32h ; '2'
.text:0040CCE7                 jmp     short loc_40CCC1
.text:0040CCE9 ; ---------------------------------------------------------------------------
.text:0040CCE9
.text:0040CCE9 loc_40CCE9:                             ; CODE XREF: ___addmntentstr+1D5↑j
.text:0040CCE9                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040CCEC                 inc     edx
.text:0040CCED                 mov     byte ptr [edx], 30h ; '0'
.text:0040CCF0                 inc     edx
.text:0040CCF1                 mov     byte ptr [edx], 34h ; '4'
.text:0040CCF4                 inc     edx
.text:0040CCF5                 mov     byte ptr [edx], 30h ; '0'
.text:0040CCF8                 jmp     short loc_40CCC1
.text:0040CCFA ; ---------------------------------------------------------------------------
.text:0040CCFA
.text:0040CCFA loc_40CCFA:                             ; CODE XREF: ___addmntentstr+72↑j
.text:0040CCFA                                         ; ___addmntentstr+7A↑j ...
.text:0040CCFA                 test    al, al
.text:0040CCFC                 jz      loc_40CB70
.text:0040CD02                 mov     [esp+4Ch+Buffer], edx ; Str
.text:0040CD05                 mov     ebx, edx
.text:0040CD07                 call    strlen
.text:0040CD0C                 lea     edx, ds:1[eax*4]
.text:0040CD13                 mov     [esp+4Ch+Buffer], edx ; Size
.text:0040CD16                 call    malloc
.text:0040CD1B                 mov     [esp+4Ch+var_28], eax
.text:0040CD1F                 mov     edx, eax
.text:0040CD21                 jmp     short loc_40CD30
.text:0040CD21 ; ---------------------------------------------------------------------------
.text:0040CD23                 align 10h
.text:0040CD30
.text:0040CD30 loc_40CD30:                             ; CODE XREF: ___addmntentstr+241↑j
.text:0040CD30                                         ; ___addmntentstr+268↓j
.text:0040CD30                 movzx   eax, byte ptr [ebx]
.text:0040CD33                 cmp     al, 20h ; ' '
.text:0040CD35                 jz      short loc_40CD69
.text:0040CD37                 cmp     al, 9
.text:0040CD39                 jz      short loc_40CD58
.text:0040CD3B                 cmp     al, 5Ch ; '\'
.text:0040CD3D                 jz      short loc_40CD4F
.text:0040CD3F                 mov     [edx], al
.text:0040CD41
.text:0040CD41 loc_40CD41:                             ; CODE XREF: ___addmntentstr+276↓j
.text:0040CD41                                         ; ___addmntentstr+287↓j ...
.text:0040CD41                 movzx   ecx, byte ptr [ebx]
.text:0040CD44                 inc     edx
.text:0040CD45                 inc     ebx
.text:0040CD46                 test    cl, cl
.text:0040CD48                 jnz     short loc_40CD30
.text:0040CD4A                 jmp     loc_40CB70
.text:0040CD4F ; ---------------------------------------------------------------------------
.text:0040CD4F
.text:0040CD4F loc_40CD4F:                             ; CODE XREF: ___addmntentstr+25D↑j
.text:0040CD4F                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040CD52                 inc     edx
.text:0040CD53                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040CD56                 jmp     short loc_40CD41
.text:0040CD58 ; ---------------------------------------------------------------------------
.text:0040CD58
.text:0040CD58 loc_40CD58:                             ; CODE XREF: ___addmntentstr+259↑j
.text:0040CD58                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040CD5B                 inc     edx
.text:0040CD5C                 mov     byte ptr [edx], 30h ; '0'
.text:0040CD5F                 inc     edx
.text:0040CD60                 mov     byte ptr [edx], 31h ; '1'
.text:0040CD63                 inc     edx
.text:0040CD64                 mov     byte ptr [edx], 32h ; '2'
.text:0040CD67                 jmp     short loc_40CD41
.text:0040CD69 ; ---------------------------------------------------------------------------
.text:0040CD69
.text:0040CD69 loc_40CD69:                             ; CODE XREF: ___addmntentstr+255↑j
.text:0040CD69                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040CD6C                 inc     edx
.text:0040CD6D                 mov     byte ptr [edx], 30h ; '0'
.text:0040CD70                 inc     edx
.text:0040CD71                 mov     byte ptr [edx], 34h ; '4'
.text:0040CD74                 inc     edx
.text:0040CD75                 mov     byte ptr [edx], 30h ; '0'
.text:0040CD78                 jmp     short loc_40CD41
.text:0040CD78 ; ---------------------------------------------------------------------------
.text:0040CD7A                 align 10h
.text:0040CD80
.text:0040CD80 loc_40CD80:                             ; CODE XREF: ___addmntentstr+42↑j
.text:0040CD80                                         ; ___addmntentstr+4A↑j ...
.text:0040CD80                 test    al, al
.text:0040CD82                 jz      loc_40CB40
.text:0040CD88                 mov     ebx, [esp+4Ch+var_2C]
.text:0040CD8C                 mov     [esp+4Ch+Buffer], ebx ; Str
.text:0040CD8F                 call    strlen
.text:0040CD94                 lea     edx, ds:1[eax*4]
.text:0040CD9B                 mov     [esp+4Ch+Buffer], edx ; Size
.text:0040CD9E                 call    malloc
.text:0040CDA3                 mov     [esp+4Ch+var_2C], eax
.text:0040CDA7                 mov     edx, eax
.text:0040CDA9                 lea     esi, [esi+0]
.text:0040CDB0
.text:0040CDB0 loc_40CDB0:                             ; CODE XREF: ___addmntentstr+2E8↓j
.text:0040CDB0                 movzx   eax, byte ptr [ebx]
.text:0040CDB3                 cmp     al, 20h ; ' '
.text:0040CDB5                 jz      short loc_40CDF0
.text:0040CDB7                 cmp     al, 9
.text:0040CDB9                 jz      short loc_40CDD8
.text:0040CDBB                 cmp     al, 5Ch ; '\'
.text:0040CDBD                 jz      short loc_40CDCF
.text:0040CDBF                 mov     [edx], al
.text:0040CDC1
.text:0040CDC1 loc_40CDC1:                             ; CODE XREF: ___addmntentstr+2F6↓j
.text:0040CDC1                                         ; ___addmntentstr+307↓j ...
.text:0040CDC1                 movzx   ecx, byte ptr [ebx]
.text:0040CDC4                 inc     edx
.text:0040CDC5                 inc     ebx
.text:0040CDC6                 test    cl, cl
.text:0040CDC8                 jnz     short loc_40CDB0
.text:0040CDCA                 jmp     loc_40CB40
.text:0040CDCF ; ---------------------------------------------------------------------------
.text:0040CDCF
.text:0040CDCF loc_40CDCF:                             ; CODE XREF: ___addmntentstr+2DD↑j
.text:0040CDCF                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040CDD2                 inc     edx
.text:0040CDD3                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040CDD6                 jmp     short loc_40CDC1
.text:0040CDD8 ; ---------------------------------------------------------------------------
.text:0040CDD8
.text:0040CDD8 loc_40CDD8:                             ; CODE XREF: ___addmntentstr+2D9↑j
.text:0040CDD8                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040CDDB                 inc     edx
.text:0040CDDC                 mov     byte ptr [edx], 30h ; '0'
.text:0040CDDF                 inc     edx
.text:0040CDE0                 mov     byte ptr [edx], 31h ; '1'
.text:0040CDE3                 inc     edx
.text:0040CDE4                 mov     byte ptr [edx], 32h ; '2'
.text:0040CDE7                 jmp     short loc_40CDC1
.text:0040CDE7 ; ---------------------------------------------------------------------------
.text:0040CDE9                 align 10h
.text:0040CDF0
.text:0040CDF0 loc_40CDF0:                             ; CODE XREF: ___addmntentstr+2D5↑j
.text:0040CDF0                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040CDF3                 inc     edx
.text:0040CDF4                 mov     byte ptr [edx], 30h ; '0'
.text:0040CDF7                 inc     edx
.text:0040CDF8                 mov     byte ptr [edx], 34h ; '4'
.text:0040CDFB                 inc     edx
.text:0040CDFC                 mov     byte ptr [edx], 30h ; '0'
.text:0040CDFF                 jmp     short loc_40CDC1
.text:0040CE01 ; ---------------------------------------------------------------------------
.text:0040CE01
.text:0040CE01 loc_40CE01:                             ; CODE XREF: ___addmntentstr+38↑j
.text:0040CE01                 movzx   eax, byte ptr [ecx]
.text:0040CE04                 jmp     loc_40CD80
.text:0040CE04 ___addmntentstr endp
.text:0040CE04
.text:0040CE04 ; ---------------------------------------------------------------------------
.text:0040CE09                 align 10h
.text:0040CE10
.text:0040CE10 ; =============== S U B R O U T I N E =======================================
.text:0040CE10
.text:0040CE10
.text:0040CE10 sub_40CE10      proc near               ; CODE XREF: sub_40B330+99↑p
.text:0040CE10
.text:0040CE10 nBufferLength   = dword ptr -1Ch
.text:0040CE10 lpBuffer        = dword ptr -18h
.text:0040CE10 dwBytes         = dword ptr -14h
.text:0040CE10 var_8           = dword ptr -8
.text:0040CE10 var_4           = dword ptr -4
.text:0040CE10
.text:0040CE10                 sub     esp, 1Ch
.text:0040CE13                 mov     [esp+1Ch+var_8], ebx
.text:0040CE17                 mov     [esp+1Ch+var_4], esi
.text:0040CE1B                 mov     [esp+1Ch+lpBuffer], 0 ; lpBuffer
.text:0040CE23                 mov     [esp+1Ch+nBufferLength], 0 ; nBufferLength
.text:0040CE2A                 call    GetLogicalDriveStringsA
.text:0040CE2F                 sub     esp, 8
.text:0040CE32                 mov     ebx, eax
.text:0040CE34                 call    GetProcessHeap
.text:0040CE39                 mov     [esp+1Ch+nBufferLength], eax ; hHeap
.text:0040CE3C                 mov     [esp+1Ch+dwBytes], ebx ; dwBytes
.text:0040CE40                 mov     [esp+1Ch+lpBuffer], 0 ; dwFlags
.text:0040CE48                 call    HeapAlloc
.text:0040CE4D                 sub     esp, 0Ch
.text:0040CE50                 mov     esi, eax
.text:0040CE52                 mov     [esp+1Ch+nBufferLength], ebx ; nBufferLength
.text:0040CE55                 mov     [esp+1Ch+lpBuffer], eax ; lpBuffer
.text:0040CE59                 call    GetLogicalDriveStringsA
.text:0040CE5E                 sub     esp, 8
.text:0040CE61                 mov     eax, esi
.text:0040CE63                 mov     ebx, [esp+1Ch+var_8]
.text:0040CE67                 mov     esi, [esp+1Ch+var_4]
.text:0040CE6B                 add     esp, 1Ch
.text:0040CE6E                 retn
.text:0040CE6E sub_40CE10      endp
.text:0040CE6E
.text:0040CE6F
.text:0040CE6F ; =============== S U B R O U T I N E =======================================
.text:0040CE6F
.text:0040CE6F
.text:0040CE6F ; int __cdecl sub_40CE6F(char *, char *)
.text:0040CE6F sub_40CE6F      proc near               ; DATA XREF: sub_40CE6F:loc_40CEFD↓o
.text:0040CE6F
.text:0040CE6F FileName        = dword ptr -1Ch
.text:0040CE6F Mode            = dword ptr -18h
.text:0040CE6F dwBytes         = dword ptr -14h
.text:0040CE6F arg_0           = dword ptr  4
.text:0040CE6F arg_4           = dword ptr  8
.text:0040CE6F
.text:0040CE6F                 ja      short $+2
.text:0040CE71
.text:0040CE71 loc_40CE71:                             ; CODE XREF: sub_40CE6F↑j
.text:0040CE71                 jmp     short loc_40CE80
.text:0040CE71 ; ---------------------------------------------------------------------------
.text:0040CE73                 align 10h
.text:0040CE80
.text:0040CE80 loc_40CE80:                             ; CODE XREF: sub_40CE6F:loc_40CE71↑j
.text:0040CE80                 push    edi
.text:0040CE81                 push    esi
.text:0040CE82                 push    ebx
.text:0040CE83                 sub     esp, 10h
.text:0040CE86                 mov     ebx, [esp+1Ch+arg_0]
.text:0040CE8A                 mov     edx, [esp+1Ch+arg_4]
.text:0040CE8E                 mov     [esp+1Ch+FileName], ebx ; FileName
.text:0040CE91                 mov     [esp+1Ch+Mode], edx ; Mode
.text:0040CE95                 call    fopen
.text:0040CE9A                 test    eax, eax
.text:0040CE9C                 mov     edi, eax
.text:0040CE9E                 jz      short loc_40CEFD
.text:0040CEA0
.text:0040CEA0 loc_40CEA0:                             ; CODE XREF: sub_40CE6F+A2↓j
.text:0040CEA0                                         ; sub_40CE6F+AB↓j
.text:0040CEA0                 mov     [esp+1Ch+Mode], 0 ; lpBuffer
.text:0040CEA8                 mov     [esp+1Ch+FileName], 0 ; nBufferLength
.text:0040CEAF                 call    GetLogicalDriveStringsA
.text:0040CEB4                 sub     esp, 8
.text:0040CEB7                 mov     esi, eax
.text:0040CEB9                 call    GetProcessHeap
.text:0040CEBE                 mov     [esp+1Ch+FileName], eax ; hHeap
.text:0040CEC1                 mov     [esp+1Ch+dwBytes], esi ; dwBytes
.text:0040CEC5                 mov     [esp+1Ch+Mode], 0 ; dwFlags
.text:0040CECD                 call    HeapAlloc
.text:0040CED2                 sub     esp, 0Ch
.text:0040CED5                 mov     ebx, eax
.text:0040CED7                 mov     [esp+1Ch+FileName], esi ; nBufferLength
.text:0040CEDA                 mov     [esp+1Ch+Mode], eax ; lpBuffer
.text:0040CEDE                 call    GetLogicalDriveStringsA
.text:0040CEE3                 mov     off_4110F4, ebx ; "notset"
.text:0040CEE9                 sub     esp, 8
.text:0040CEEC                 xor     eax, eax
.text:0040CEEE                 test    ebx, ebx
.text:0040CEF0                 setz    al
.text:0040CEF3                 add     esp, 10h
.text:0040CEF6                 pop     ebx
.text:0040CEF7                 dec     eax
.text:0040CEF8                 and     eax, edi
.text:0040CEFA                 pop     esi
.text:0040CEFB                 pop     edi
.text:0040CEFC                 retn
.text:0040CEFD ; ---------------------------------------------------------------------------
.text:0040CEFD
.text:0040CEFD loc_40CEFD:                             ; CODE XREF: sub_40CE6F+2F↑j
.text:0040CEFD                 mov     [esp+1Ch+Mode], offset sub_40CE6F ; Mode
.text:0040CF05                 mov     [esp+1Ch+FileName], ebx ; FileName
.text:0040CF08                 call    fopen
.text:0040CF0D                 test    eax, eax
.text:0040CF0F                 mov     edi, eax
.text:0040CF11                 jnz     short loc_40CEA0
.text:0040CF13                 call    sub_40D1E0
.text:0040CF18                 mov     edi, eax
.text:0040CF1A                 jmp     short loc_40CEA0
.text:0040CF1A sub_40CE6F      endp
.text:0040CF1A
.text:0040CF1A ; ---------------------------------------------------------------------------
.text:0040CF1C                 align 10h
.text:0040CF20                 sub     esp, 0Ch
.text:0040CF23                 mov     eax, [esp+10h]
.text:0040CF27                 test    eax, eax
.text:0040CF29                 jz      short loc_40CF33
.text:0040CF2B                 mov     [esp], eax
.text:0040CF2E                 call    fclose
.text:0040CF33
.text:0040CF33 loc_40CF33:                             ; CODE XREF: .text:0040CF29↑j
.text:0040CF33                 call    GetProcessHeap
.text:0040CF38                 mov     [esp], eax
.text:0040CF3B                 mov     ecx, off_4110F4 ; "notset"
.text:0040CF41                 mov     dword ptr [esp+4], 0
.text:0040CF49                 mov     [esp+8], ecx
.text:0040CF4D                 call    HeapFree
.text:0040CF52                 mov     edx, off_4110F0 ; "notset"
.text:0040CF58                 sub     esp, 0Ch
.text:0040CF5B                 mov     eax, 1
.text:0040CF60                 mov     off_4110F4, edx ; "notset"
.text:0040CF66                 add     esp, 0Ch
.text:0040CF69                 retn
.text:0040CF69 ; ---------------------------------------------------------------------------
.text:0040CF6A                 align 10h
.text:0040CF70                 push    edi
.text:0040CF71                 push    esi
.text:0040CF72                 push    ebx
.text:0040CF73                 sub     esp, 10h
.text:0040CF76                 mov     edi, [esp+24h]
.text:0040CF7A                 mov     [esp], edi
.text:0040CF7D                 call    strlen
.text:0040CF82                 mov     edx, [esp+20h]
.text:0040CF86                 mov     esi, eax
.text:0040CF88                 mov     ebx, [edx+0Ch]
.text:0040CF8B                 nop
.text:0040CF8C                 lea     esi, [esi+0]
.text:0040CF90
.text:0040CF90 loc_40CF90:                             ; CODE XREF: .text:0040CFC1↓j
.text:0040CF90                 mov     [esp+4], edi
.text:0040CF94                 mov     [esp], ebx
.text:0040CF97                 call    strstr
.text:0040CF9C                 test    eax, eax
.text:0040CF9E                 jz      short loc_40CFC3
.text:0040CFA0                 cmp     eax, ebx
.text:0040CFA2                 jz      short loc_40CFC5
.text:0040CFA4                 cmp     byte ptr [eax-1], 2Ch ; ','
.text:0040CFA8                 jz      short loc_40CFD0
.text:0040CFAA
.text:0040CFAA loc_40CFAA:                             ; CODE XREF: .text:0040CFE0↓j
.text:0040CFAA                 mov     [esp], ebx
.text:0040CFAD                 mov     dword ptr [esp+4], 2Ch ; ','
.text:0040CFB5                 call    strchr
.text:0040CFBA                 test    eax, eax
.text:0040CFBC                 mov     ebx, eax
.text:0040CFBE                 jz      short loc_40CFC3
.text:0040CFC0                 inc     ebx
.text:0040CFC1                 jmp     short loc_40CF90
.text:0040CFC3 ; ---------------------------------------------------------------------------
.text:0040CFC3
.text:0040CFC3 loc_40CFC3:                             ; CODE XREF: .text:0040CF9E↑j
.text:0040CFC3                                         ; .text:0040CFBE↑j
.text:0040CFC3                 xor     eax, eax
.text:0040CFC5
.text:0040CFC5 loc_40CFC5:                             ; CODE XREF: .text:0040CFA2↑j
.text:0040CFC5                                         ; .text:0040CFD6↓j ...
.text:0040CFC5                 add     esp, 10h
.text:0040CFC8                 pop     ebx
.text:0040CFC9                 pop     esi
.text:0040CFCA                 pop     edi
.text:0040CFCB                 retn
.text:0040CFCB ; ---------------------------------------------------------------------------
.text:0040CFCC                 align 10h
.text:0040CFD0
.text:0040CFD0 loc_40CFD0:                             ; CODE XREF: .text:0040CFA8↑j
.text:0040CFD0                 movzx   edx, byte ptr [esi+eax]
.text:0040CFD4                 test    dl, dl
.text:0040CFD6                 jz      short loc_40CFC5
.text:0040CFD8                 cmp     dl, 3Dh ; '='
.text:0040CFDB                 jz      short loc_40CFC5
.text:0040CFDD                 cmp     dl, 2Ch ; ','
.text:0040CFE0                 jnz     short loc_40CFAA
.text:0040CFE2                 jmp     short loc_40CFC5
.text:0040CFE2 ; ---------------------------------------------------------------------------
.text:0040CFE4                 align 10h
.text:0040CFF0 ; const char aFxstat64BadFil[]
.text:0040CFF0 aFxstat64BadFil db '__fxstat64: bad file descriptor %d',0Ah,0
.text:0040CFF0                                         ; DATA XREF: sub_40D020+7B↓o
.text:0040D014                 align 10h
.text:0040D020
.text:0040D020 ; =============== S U B R O U T I N E =======================================
.text:0040D020
.text:0040D020
.text:0040D020 ; int __cdecl sub_40D020(HANDLE hNamedPipe, int, int)
.text:0040D020 sub_40D020      proc near               ; CODE XREF: .text:0040B549↑p
.text:0040D020
.text:0040D020 FileHandle      = dword ptr -1Ch
.text:0040D020 var_18          = dword ptr -18h
.text:0040D020 var_C           = dword ptr -0Ch
.text:0040D020 var_8           = dword ptr -8
.text:0040D020 var_4           = dword ptr -4
.text:0040D020 hNamedPipe      = dword ptr  4
.text:0040D020 arg_4           = dword ptr  8
.text:0040D020 arg_8           = dword ptr  0Ch
.text:0040D020
.text:0040D020                 sub     esp, 1Ch
.text:0040D023                 mov     edx, [esp+1Ch+arg_4]
.text:0040D027                 mov     [esp+1Ch+var_C], ebx
.text:0040D02B                 mov     ebx, [esp+1Ch+hNamedPipe]
.text:0040D02F                 mov     [esp+1Ch+var_8], esi
.text:0040D033                 mov     esi, [esp+1Ch+arg_8]
.text:0040D037                 test    ebx, ebx
.text:0040D039                 mov     [esp+1Ch+var_4], edi
.text:0040D03D                 jnz     short loc_40D077
.text:0040D03F                 test    edx, edx
.text:0040D041                 js      short loc_40D097
.text:0040D043                 test    esi, esi
.text:0040D045                 jz      short loc_40D077
.text:0040D047                 cld
.text:0040D048                 mov     eax, ebx
.text:0040D04A                 mov     edi, esi
.text:0040D04C                 mov     ecx, 18h
.text:0040D051                 rep stosd
.text:0040D053                 mov     [esp+1Ch+arg_4], esi ; int
.text:0040D057                 mov     [esp+1Ch+FileHandle], edx ; FileHandle
.text:0040D05A                 call    _get_osfhandle
.text:0040D05F                 mov     [esp+1Ch+hNamedPipe], eax ; hNamedPipe
.text:0040D063                 mov     ebx, [esp+1Ch+var_C]
.text:0040D067                 mov     esi, [esp+1Ch+var_8]
.text:0040D06B                 mov     edi, [esp+1Ch+var_4]
.text:0040D06F                 add     esp, 1Ch
.text:0040D072                 jmp     sub_408110
.text:0040D077 ; ---------------------------------------------------------------------------
.text:0040D077
.text:0040D077 loc_40D077:                             ; CODE XREF: sub_40D020+1D↑j
.text:0040D077                                         ; sub_40D020+25↑j
.text:0040D077                 call    _errno
.text:0040D07C                 mov     dword ptr [eax], 16h
.text:0040D082
.text:0040D082 loc_40D082:                             ; CODE XREF: sub_40D020+92↓j
.text:0040D082                 mov     ebx, [esp+1Ch+var_C]
.text:0040D086                 mov     eax, 0FFFFFFFFh
.text:0040D08B                 mov     esi, [esp+1Ch+var_8]
.text:0040D08F                 mov     edi, [esp+1Ch+var_4]
.text:0040D093                 add     esp, 1Ch
.text:0040D096                 retn
.text:0040D097 ; ---------------------------------------------------------------------------
.text:0040D097
.text:0040D097 loc_40D097:                             ; CODE XREF: sub_40D020+21↑j
.text:0040D097                 mov     [esp+1Ch+var_18], edx
.text:0040D09B                 mov     [esp+1Ch+FileHandle], offset aFxstat64BadFil ; "__fxstat64: bad file descriptor %d\n"
.text:0040D0A2                 call    printf
.text:0040D0A7                 call    _errno
.text:0040D0AC                 mov     dword ptr [eax], 9
.text:0040D0B2                 jmp     short loc_40D082
.text:0040D0B2 sub_40D020      endp
.text:0040D0B2
.text:0040D0B2 ; ---------------------------------------------------------------------------
.text:0040D0B4                 db 1Ch dup(90h)
.text:0040D0D0
.text:0040D0D0 ; =============== S U B R O U T I N E =======================================
.text:0040D0D0
.text:0040D0D0 ; Attributes: noreturn
.text:0040D0D0
.text:0040D0D0 sub_40D0D0      proc near               ; CODE XREF: .text:0040C7D9↑p
.text:0040D0D0                                         ; sub_40D0D0↓j
.text:0040D0D0                 jmp     short sub_40D0D0
.text:0040D0D0 sub_40D0D0      endp
.text:0040D0D0
.text:0040D0D0 ; ---------------------------------------------------------------------------
.text:0040D0D2                 align 10h
.text:0040D0E0
.text:0040D0E0 ; =============== S U B R O U T I N E =======================================
.text:0040D0E0
.text:0040D0E0
.text:0040D0E0 sub_40D0E0      proc near               ; CODE XREF: .text:0040C535↑p
.text:0040D0E0
.text:0040D0E0 FileHandle      = dword ptr -1Ch
.text:0040D0E0 dwFileOffsetLow = dword ptr -18h
.text:0040D0E0 dwFileOffsetHigh= dword ptr -14h
.text:0040D0E0 nNumberOfBytesToUnlockLow= dword ptr -10h
.text:0040D0E0 nNumberOfBytesToUnlockHigh= dword ptr -0Ch
.text:0040D0E0 var_8           = dword ptr -8
.text:0040D0E0 var_4           = dword ptr -4
.text:0040D0E0 arg_0           = dword ptr  4
.text:0040D0E0
.text:0040D0E0                 sub     esp, 1Ch
.text:0040D0E3                 mov     edx, [esp+1Ch+arg_0]
.text:0040D0E7                 mov     [esp+1Ch+var_4], esi
.text:0040D0EB                 mov     [esp+1Ch+var_8], ebx
.text:0040D0EF                 mov     ebx, [edx+10h]
.text:0040D0F2                 mov     [esp+1Ch+FileHandle], ebx ; FileHandle
.text:0040D0F5                 call    _get_osfhandle
.text:0040D0FA                 mov     [esp+1Ch+FileHandle], ebx ; FileHandle
.text:0040D0FD                 mov     esi, eax
.text:0040D0FF                 call    _filelengthi64
.text:0040D104                 mov     [esp+1Ch+nNumberOfBytesToUnlockLow], eax ; nNumberOfBytesToUnlockLow
.text:0040D108                 cdq
.text:0040D109                 mov     [esp+1Ch+FileHandle], esi ; hFile
.text:0040D10C                 mov     [esp+1Ch+nNumberOfBytesToUnlockHigh], edx ; nNumberOfBytesToUnlockHigh
.text:0040D110                 mov     [esp+1Ch+dwFileOffsetHigh], 0 ; dwFileOffsetHigh
.text:0040D118                 mov     [esp+1Ch+dwFileOffsetLow], 0 ; dwFileOffsetLow
.text:0040D120                 call    UnlockFile
.text:0040D125                 sub     esp, 14h
.text:0040D128                 mov     ebx, [esp+1Ch+var_8]
.text:0040D12C                 mov     esi, [esp+1Ch+var_4]
.text:0040D130                 add     esp, 1Ch
.text:0040D133                 retn
.text:0040D133 sub_40D0E0      endp
.text:0040D133
.text:0040D133 ; ---------------------------------------------------------------------------
.text:0040D134                 align 10h
.text:0040D140
.text:0040D140 ; =============== S U B R O U T I N E =======================================
.text:0040D140
.text:0040D140
.text:0040D140 ; int __cdecl sub_40D140(int, char *Control)
.text:0040D140 sub_40D140      proc near               ; CODE XREF: .text:0040C3F6↑p
.text:0040D140                                         ; .text:0040C446↑p ...
.text:0040D140
.text:0040D140 Str             = dword ptr -1Ch
.text:0040D140 Val             = dword ptr -18h
.text:0040D140 var_8           = dword ptr -8
.text:0040D140 var_4           = dword ptr -4
.text:0040D140 arg_0           = dword ptr  4
.text:0040D140 Control         = dword ptr  8
.text:0040D140
.text:0040D140                 sub     esp, 1Ch
.text:0040D143                 xor     eax, eax
.text:0040D145                 mov     edx, [esp+1Ch+Control]
.text:0040D149                 mov     [esp+1Ch+var_4], esi
.text:0040D14D                 mov     esi, [esp+1Ch+arg_0]
.text:0040D151                 mov     [esp+1Ch+var_8], ebx
.text:0040D155                 mov     ebx, [esi]
.text:0040D157                 test    ebx, ebx
.text:0040D159                 jz      short loc_40D188
.text:0040D15B                 movzx   eax, byte ptr [edx]
.text:0040D15E                 test    al, al
.text:0040D160                 jz      short loc_40D180
.text:0040D162                 cmp     byte ptr [edx+1], 0
.text:0040D166                 jnz     short loc_40D1C0
.text:0040D168                 movzx   ecx, byte ptr [ebx]
.text:0040D16B                 mov     edx, ebx
.text:0040D16D                 cmp     cl, al
.text:0040D16F                 jz      short loc_40D1B2
.text:0040D171                 test    cl, cl
.text:0040D173                 jnz     short loc_40D194
.text:0040D175                 lea     esi, [esi+0]
.text:0040D179                 lea     edi, [edi+0]
.text:0040D180
.text:0040D180 loc_40D180:                             ; CODE XREF: sub_40D140+20↑j
.text:0040D180                                         ; sub_40D140+74↓j
.text:0040D180                 mov     dword ptr [esi], 0
.text:0040D186
.text:0040D186 loc_40D186:                             ; CODE XREF: sub_40D140+7C↓j
.text:0040D186                 mov     eax, ebx
.text:0040D188
.text:0040D188 loc_40D188:                             ; CODE XREF: sub_40D140+19↑j
.text:0040D188                 mov     ebx, [esp+1Ch+var_8]
.text:0040D18C                 mov     esi, [esp+1Ch+var_4]
.text:0040D190                 add     esp, 1Ch
.text:0040D193                 retn
.text:0040D194 ; ---------------------------------------------------------------------------
.text:0040D194
.text:0040D194 loc_40D194:                             ; CODE XREF: sub_40D140+33↑j
.text:0040D194                 movsx   edx, al
.text:0040D197                 mov     [esp+1Ch+Val], edx ; Val
.text:0040D19B                 lea     edx, [ebx+1]
.text:0040D19E                 mov     [esp+1Ch+Str], edx ; Str
.text:0040D1A1                 call    strchr
.text:0040D1A6                 lea     esi, [esi+0]
.text:0040D1A9                 lea     edi, [edi+0]
.text:0040D1B0
.text:0040D1B0 loc_40D1B0:                             ; CODE XREF: sub_40D140+8C↓j
.text:0040D1B0                 mov     edx, eax
.text:0040D1B2
.text:0040D1B2 loc_40D1B2:                             ; CODE XREF: sub_40D140+2F↑j
.text:0040D1B2                 test    edx, edx
.text:0040D1B4                 jz      short loc_40D180
.text:0040D1B6                 mov     byte ptr [edx], 0
.text:0040D1B9                 inc     edx
.text:0040D1BA                 mov     [esi], edx
.text:0040D1BC                 jmp     short loc_40D186
.text:0040D1BC ; ---------------------------------------------------------------------------
.text:0040D1BE                 align 10h
.text:0040D1C0
.text:0040D1C0 loc_40D1C0:                             ; CODE XREF: sub_40D140+26↑j
.text:0040D1C0                 mov     [esp+1Ch+Val], edx ; Control
.text:0040D1C4                 mov     [esp+1Ch+Str], ebx ; Str
.text:0040D1C7                 call    strpbrk
.text:0040D1CC                 jmp     short loc_40D1B0
.text:0040D1CC sub_40D140      endp
.text:0040D1CC
.text:0040D1CC ; ---------------------------------------------------------------------------
.text:0040D1CE                 align 10h
.text:0040D1D0 ; const char aTmpf[]
.text:0040D1D0 aTmpf           db 'tmpf',0             ; DATA XREF: sub_40D1E0+20↓o
.text:0040D1D5 ; const char aWBd[]
.text:0040D1D5 aWBd            db 'w+bD',0             ; DATA XREF: sub_40D1E0+5E↓o
.text:0040D1DA                 align 10h
.text:0040D1E0
.text:0040D1E0 ; =============== S U B R O U T I N E =======================================
.text:0040D1E0
.text:0040D1E0
.text:0040D1E0 sub_40D1E0      proc near               ; CODE XREF: sub_40CE6F+A4↑p
.text:0040D1E0
.text:0040D1E0 FileHandle      = dword ptr -13Ch
.text:0040D1E0 Format          = dword ptr -138h
.text:0040D1E0 var_134         = dword ptr -134h
.text:0040D1E0 var_130         = dword ptr -130h
.text:0040D1E0 var_12C         = dword ptr -12Ch
.text:0040D1E0 FileName        = byte ptr -11Ch
.text:0040D1E0 var_8           = dword ptr -8
.text:0040D1E0 var_4           = dword ptr -4
.text:0040D1E0
.text:0040D1E0                 sub     esp, 13Ch
.text:0040D1E6                 mov     [esp+13Ch+var_8], ebx
.text:0040D1ED                 lea     ebx, [esp+13Ch+FileName]
.text:0040D1F1                 mov     [esp+13Ch+var_4], esi
.text:0040D1F8                 mov     [esp+13Ch+var_12C], 0 ; int
.text:0040D200                 mov     [esp+13Ch+var_130], offset aTmpf ; "tmpf"
.text:0040D208                 mov     [esp+13Ch+var_134], 0 ; char *
.text:0040D210                 mov     [esp+13Ch+Format], 104h ; int
.text:0040D218                 mov     [esp+13Ch+FileHandle], ebx ; Buffer
.text:0040D21B                 call    sub_40D2B0
.text:0040D220                 xor     edx, edx
.text:0040D222                 test    eax, eax
.text:0040D224                 jnz     short loc_40D256
.text:0040D226                 mov     [esp+13Ch+FileHandle], ebx ; FileName
.text:0040D229                 mov     [esp+13Ch+Format], 0 ; int
.text:0040D231                 call    sub_40D630
.text:0040D236                 xor     edx, edx
.text:0040D238                 mov     ebx, eax
.text:0040D23A                 test    eax, eax
.text:0040D23C                 js      short loc_40D256
.text:0040D23E                 mov     [esp+13Ch+Format], offset aWBd ; "w+bD"
.text:0040D246                 mov     [esp+13Ch+FileHandle], eax ; FileHandle
.text:0040D249                 call    _fdopen
.text:0040D24E                 test    eax, eax
.text:0040D250                 mov     esi, eax
.text:0040D252                 jz      short loc_40D26D
.text:0040D254
.text:0040D254 loc_40D254:                             ; CODE XREF: sub_40D1E0+95↓j
.text:0040D254                 mov     edx, esi
.text:0040D256
.text:0040D256 loc_40D256:                             ; CODE XREF: sub_40D1E0+44↑j
.text:0040D256                                         ; sub_40D1E0+5C↑j
.text:0040D256                 mov     ebx, [esp+13Ch+var_8]
.text:0040D25D                 mov     eax, edx
.text:0040D25F                 mov     esi, [esp+13Ch+var_4]
.text:0040D266                 add     esp, 13Ch
.text:0040D26C                 retn
.text:0040D26D ; ---------------------------------------------------------------------------
.text:0040D26D
.text:0040D26D loc_40D26D:                             ; CODE XREF: sub_40D1E0+72↑j
.text:0040D26D                 mov     [esp+13Ch+FileHandle], ebx ; FileHandle
.text:0040D270                 call    _close
.text:0040D275                 jmp     short loc_40D254
.text:0040D275 sub_40D1E0      endp
.text:0040D275
.text:0040D275 ; ---------------------------------------------------------------------------
.text:0040D277                 align 10h
.text:0040D280 aFile           db 'file',0             ; DATA XREF: sub_40D2B0:loc_40D2DC↓o
.text:0040D285 ; const char aSSxxxxxx[]
.text:0040D285 aSSxxxxxx       db '%.*s/%.*sXXXXXX',0  ; DATA XREF: sub_40D2B0+9B↓o
.text:0040D295 ; const char aTemp[]
.text:0040D295 aTemp           db 'TEMP',0             ; DATA XREF: sub_40D2B0:loc_40D392↓o
.text:0040D295                                         ; sub_40D2B0:loc_40D3D2↓o ...
.text:0040D29A ; const char aTmp[]
.text:0040D29A aTmp            db '/tmp',0             ; DATA XREF: sub_40D2B0+12F↓o
.text:0040D29A                                         ; sub_40D2B0+141↓o ...
.text:0040D29F aTmpdir         db 'TMPDIR',0           ; DATA XREF: sub_40D2B0:loc_40D450↓o
.text:0040D2A6 aTmp_0          db 'TMP',0              ; DATA XREF: sub_40D2B0:loc_40D4E0↓o
.text:0040D2AA                 align 10h
.text:0040D2B0
.text:0040D2B0 ; =============== S U B R O U T I N E =======================================
.text:0040D2B0
.text:0040D2B0
.text:0040D2B0 ; int __cdecl sub_40D2B0(char *Buffer, int, char *, char *, int)
.text:0040D2B0 sub_40D2B0      proc near               ; CODE XREF: sub_40D1E0+3B↑p
.text:0040D2B0
.text:0040D2B0 Str             = dword ptr -1BCh
.text:0040D2B0 Format          = dword ptr -1B8h
.text:0040D2B0 var_1B4         = dword ptr -1B4h
.text:0040D2B0 var_1B0         = dword ptr -1B0h
.text:0040D2B0 var_1AC         = dword ptr -1ACh
.text:0040D2B0 var_1A8         = dword ptr -1A8h
.text:0040D2B0 var_19C         = dword ptr -19Ch
.text:0040D2B0 var_13C         = dword ptr -13Ch
.text:0040D2B0 var_DC          = dword ptr -0DCh
.text:0040D2B0 var_7C          = dword ptr -7Ch
.text:0040D2B0 Buffer          = dword ptr  4
.text:0040D2B0 arg_4           = dword ptr  8
.text:0040D2B0 arg_8           = dword ptr  0Ch
.text:0040D2B0 arg_C           = dword ptr  10h
.text:0040D2B0 arg_10          = dword ptr  14h
.text:0040D2B0
.text:0040D2B0                 push    ebp
.text:0040D2B1                 push    edi
.text:0040D2B2                 push    esi
.text:0040D2B3                 push    ebx
.text:0040D2B4                 sub     esp, 1ACh
.text:0040D2BA                 mov     eax, [esp+1BCh+arg_C]
.text:0040D2C1                 mov     esi, [esp+1BCh+arg_8]
.text:0040D2C8                 test    eax, eax
.text:0040D2CA                 jz      short loc_40D2DC
.text:0040D2CC                 mov     edx, [esp+1BCh+arg_C]
.text:0040D2D3                 cmp     byte ptr [edx], 0
.text:0040D2D6                 jnz     loc_40D510
.text:0040D2DC
.text:0040D2DC loc_40D2DC:                             ; CODE XREF: sub_40D2B0+1A↑j
.text:0040D2DC                 mov     eax, offset aFile ; "file"
.text:0040D2E1                 mov     ebp, 4
.text:0040D2E6                 mov     [esp+1BCh+arg_C], eax
.text:0040D2ED
.text:0040D2ED loc_40D2ED:                             ; CODE XREF: sub_40D2B0+274↓j
.text:0040D2ED                                         ; sub_40D2B0+27F↓j
.text:0040D2ED                 mov     ebx, [esp+1BCh+arg_10]
.text:0040D2F4                 test    ebx, ebx
.text:0040D2F6                 jnz     loc_40D450
.text:0040D2FC
.text:0040D2FC loc_40D2FC:                             ; CODE XREF: sub_40D2B0+21C↓j
.text:0040D2FC                                         ; sub_40D2B0+224↓j ...
.text:0040D2FC                 test    esi, esi
.text:0040D2FE                 jz      loc_40D392
.text:0040D304
.text:0040D304 loc_40D304:                             ; CODE XREF: sub_40D2B0+176↓j
.text:0040D304                                         ; sub_40D2B0+19A↓j
.text:0040D304                 mov     [esp+1BCh+Str], esi ; Str
.text:0040D307                 call    strlen
.text:0040D30C                 test    eax, eax
.text:0040D30E                 mov     edx, eax
.text:0040D310                 jz      short loc_40D320
.text:0040D312                 movzx   eax, byte ptr [eax+esi-1]
.text:0040D317                 cmp     al, 2Fh ; '/'
.text:0040D319                 jz      short loc_40D380
.text:0040D31B                 cmp     al, 5Ch ; '\'
.text:0040D31D                 jz      short loc_40D380
.text:0040D31F                 nop
.text:0040D320
.text:0040D320 loc_40D320:                             ; CODE XREF: sub_40D2B0+60↑j
.text:0040D320                                         ; sub_40D2B0+D1↓j ...
.text:0040D320                 lea     edi, [ebp+edx+8]
.text:0040D324                 cmp     [esp+1BCh+arg_4], edi
.text:0040D32B                 jb      short loc_40D368
.text:0040D32D                 mov     [esp+1BCh+var_1AC], ebp
.text:0040D331                 mov     ecx, [esp+1BCh+arg_C]
.text:0040D338                 mov     ebp, [esp+1BCh+Buffer]
.text:0040D33F                 mov     [esp+1BCh+var_1B0], esi
.text:0040D343                 mov     [esp+1BCh+var_1A8], ecx
.text:0040D347                 mov     [esp+1BCh+var_1B4], edx
.text:0040D34B                 mov     [esp+1BCh+Format], offset aSSxxxxxx ; "%.*s/%.*sXXXXXX"
.text:0040D353                 mov     [esp+1BCh+Str], ebp ; Buffer
.text:0040D356                 call    sprintf
.text:0040D35B                 xor     eax, eax
.text:0040D35D
.text:0040D35D loc_40D35D:                             ; CODE XREF: sub_40D2B0+C8↓j
.text:0040D35D                 add     esp, 1ACh
.text:0040D363                 pop     ebx
.text:0040D364                 pop     esi
.text:0040D365                 pop     edi
.text:0040D366                 pop     ebp
.text:0040D367                 retn
.text:0040D368 ; ---------------------------------------------------------------------------
.text:0040D368
.text:0040D368 loc_40D368:                             ; CODE XREF: sub_40D2B0+7B↑j
.text:0040D368                 call    _errno
.text:0040D36D                 mov     dword ptr [eax], 16h
.text:0040D373
.text:0040D373 loc_40D373:                             ; CODE XREF: sub_40D2B0+187↓j
.text:0040D373                 mov     eax, 0FFFFFFFFh
.text:0040D378                 jmp     short loc_40D35D
.text:0040D378 ; ---------------------------------------------------------------------------
.text:0040D37A                 align 10h
.text:0040D380
.text:0040D380 loc_40D380:                             ; CODE XREF: sub_40D2B0+69↑j
.text:0040D380                                         ; sub_40D2B0+6D↑j ...
.text:0040D380                 dec     edx
.text:0040D381                 jz      short loc_40D320
.text:0040D383                 movzx   eax, byte ptr [edx+esi-1]
.text:0040D388                 cmp     al, 2Fh ; '/'
.text:0040D38A                 jz      short loc_40D380
.text:0040D38C                 cmp     al, 5Ch ; '\'
.text:0040D38E                 jz      short loc_40D380
.text:0040D390                 jmp     short loc_40D320
.text:0040D392 ; ---------------------------------------------------------------------------
.text:0040D392
.text:0040D392 loc_40D392:                             ; CODE XREF: sub_40D2B0+4E↑j
.text:0040D392                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:0040D399                 lea     esi, [esp+1BCh+var_13C]
.text:0040D3A0                 call    getenv
.text:0040D3A5                 mov     [esp+1BCh+Format], eax ; char *
.text:0040D3A9                 mov     [esp+1BCh+var_1B4], esi ; int
.text:0040D3AD                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:0040D3B4                 call    sub_406BF0
.text:0040D3B9                 test    eax, eax
.text:0040D3BB                 jnz     short loc_40D3D2
.text:0040D3BD                 mov     edi, [esp+1BCh+var_13C]
.text:0040D3C4                 and     edi, 0F000h
.text:0040D3CA                 cmp     edi, 4000h
.text:0040D3D0                 jz      short loc_40D43C
.text:0040D3D2
.text:0040D3D2 loc_40D3D2:                             ; CODE XREF: sub_40D2B0+10B↑j
.text:0040D3D2                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:0040D3D9                 call    getenv
.text:0040D3DE                 cld
.text:0040D3DF                 mov     edx, offset aTmp ; "/tmp"
.text:0040D3E4                 mov     esi, eax
.text:0040D3E6                 mov     ecx, 5
.text:0040D3EB                 mov     edi, edx
.text:0040D3ED                 repe cmpsb
.text:0040D3EF                 jz      short loc_40D42C
.text:0040D3F1                 mov     [esp+1BCh+Format], offset aTmp ; "/tmp"
.text:0040D3F9                 lea     ecx, [esp+1BCh+var_19C]
.text:0040D3FD                 mov     [esp+1BCh+var_1B4], ecx ; int
.text:0040D401                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:0040D408                 call    sub_406BF0
.text:0040D40D                 test    eax, eax
.text:0040D40F                 jnz     short loc_40D42C
.text:0040D411                 mov     ebx, [esp+1BCh+var_19C]
.text:0040D415                 mov     esi, offset aTmp ; "/tmp"
.text:0040D41A                 and     ebx, 0F000h
.text:0040D420                 cmp     ebx, 4000h
.text:0040D426                 jz      loc_40D304
.text:0040D42C
.text:0040D42C loc_40D42C:                             ; CODE XREF: sub_40D2B0+13F↑j
.text:0040D42C                                         ; sub_40D2B0+15F↑j
.text:0040D42C                 call    _errno
.text:0040D431                 mov     dword ptr [eax], 2
.text:0040D437                 jmp     loc_40D373
.text:0040D43C ; ---------------------------------------------------------------------------
.text:0040D43C
.text:0040D43C loc_40D43C:                             ; CODE XREF: sub_40D2B0+120↑j
.text:0040D43C                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:0040D443                 call    getenv
.text:0040D448                 mov     esi, eax
.text:0040D44A                 jmp     loc_40D304
.text:0040D44A ; ---------------------------------------------------------------------------
.text:0040D44F                 align 10h
.text:0040D450
.text:0040D450 loc_40D450:                             ; CODE XREF: sub_40D2B0+46↑j
.text:0040D450                 mov     [esp+1BCh+Str], offset aTmpdir ; "TMPDIR"
.text:0040D457                 call    sub_40DB40
.text:0040D45C                 test    eax, eax
.text:0040D45E                 mov     ebx, eax
.text:0040D460                 jz      short loc_40D4E0
.text:0040D462
.text:0040D462 loc_40D462:                             ; CODE XREF: sub_40D2B0+240↓j
.text:0040D462                                         ; sub_40D2B0+256↓j
.text:0040D462                 mov     [esp+1BCh+Format], ebx ; char *
.text:0040D466                 lea     edi, [esp+1BCh+var_7C]
.text:0040D46D                 mov     [esp+1BCh+var_1B4], edi ; int
.text:0040D471                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:0040D478                 call    sub_406BF0
.text:0040D47D                 test    eax, eax
.text:0040D47F                 jnz     short loc_40D496
.text:0040D481                 mov     edx, [esp+1BCh+var_7C]
.text:0040D488                 and     edx, 0F000h
.text:0040D48E                 cmp     edx, 4000h
.text:0040D494                 jz      short loc_40D4D9
.text:0040D496
.text:0040D496 loc_40D496:                             ; CODE XREF: sub_40D2B0+1CF↑j
.text:0040D496                                         ; sub_40D2B0+25C↓j
.text:0040D496                 test    esi, esi
.text:0040D498                 jz      short loc_40D4D2
.text:0040D49A                 mov     [esp+1BCh+Format], esi ; char *
.text:0040D49E                 lea     ecx, [esp+1BCh+var_DC]
.text:0040D4A5                 mov     [esp+1BCh+var_1B4], ecx ; int
.text:0040D4A9                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:0040D4B0                 call    sub_406BF0
.text:0040D4B5                 test    eax, eax
.text:0040D4B7                 jnz     short loc_40D4D2
.text:0040D4B9                 mov     ebx, [esp+1BCh+var_DC]
.text:0040D4C0                 and     ebx, 0F000h
.text:0040D4C6                 cmp     ebx, 4000h
.text:0040D4CC                 jz      loc_40D2FC
.text:0040D4D2
.text:0040D4D2 loc_40D4D2:                             ; CODE XREF: sub_40D2B0+1E8↑j
.text:0040D4D2                                         ; sub_40D2B0+207↑j
.text:0040D4D2                 xor     esi, esi
.text:0040D4D4                 jmp     loc_40D2FC
.text:0040D4D9 ; ---------------------------------------------------------------------------
.text:0040D4D9
.text:0040D4D9 loc_40D4D9:                             ; CODE XREF: sub_40D2B0+1E4↑j
.text:0040D4D9                 mov     esi, ebx
.text:0040D4DB                 jmp     loc_40D2FC
.text:0040D4E0 ; ---------------------------------------------------------------------------
.text:0040D4E0
.text:0040D4E0 loc_40D4E0:                             ; CODE XREF: sub_40D2B0+1B0↑j
.text:0040D4E0                 mov     [esp+1BCh+Str], offset aTmp_0 ; "TMP"
.text:0040D4E7                 call    sub_40DB40
.text:0040D4EC                 test    eax, eax
.text:0040D4EE                 mov     ebx, eax
.text:0040D4F0                 jnz     loc_40D462
.text:0040D4F6                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:0040D4FD                 call    sub_40DB40
.text:0040D502                 test    eax, eax
.text:0040D504                 mov     ebx, eax
.text:0040D506                 jnz     loc_40D462
.text:0040D50C                 jmp     short loc_40D496
.text:0040D50C ; ---------------------------------------------------------------------------
.text:0040D50E                 align 10h
.text:0040D510
.text:0040D510 loc_40D510:                             ; CODE XREF: sub_40D2B0+26↑j
.text:0040D510                 mov     ecx, [esp+1BCh+arg_C]
.text:0040D517                 mov     [esp+1BCh+Str], ecx ; Str
.text:0040D51A                 call    strlen
.text:0040D51F                 cmp     eax, 5
.text:0040D522                 mov     ebp, eax
.text:0040D524                 jbe     loc_40D2ED
.text:0040D52A                 mov     ebp, 5
.text:0040D52F                 jmp     loc_40D2ED
.text:0040D52F sub_40D2B0      endp
.text:0040D52F
.text:0040D52F ; ---------------------------------------------------------------------------
.text:0040D534                 align 10h
.text:0040D540 byte_40D540     db 61h                  ; DATA XREF: sub_40D630+DC↓r
.text:0040D540                                         ; sub_40D630+122↓r ...
.text:0040D541 aBcdefghijklmno db 'bcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789',0
.text:0040D57F aXxxxxx         db 'XXXXXX',0           ; DATA XREF: sub_40D630+39↓o
.text:0040D586                 align 20h
.text:0040D5A0 aInvalidKindInG db 'invalid KIND in __gen_tempname',0
.text:0040D5A0                                         ; DATA XREF: sub_40D630:loc_40D8A8↓o
.text:0040D5BF                 align 10h
.text:0040D5C0 aLibc05SrcStdio db '../../libc-0.5-src/stdio-common/tempname.c',0
.text:0040D5C0                                         ; DATA XREF: sub_40D630+405↓o
.text:0040D5EB                 align 20h
.text:0040D600 aInvalidKindInG_0 db '! "invalid KIND in __gen_tempname"',0
.text:0040D600                                         ; DATA XREF: sub_40D630+40D↓o
.text:0040D623                 align 10h
.text:0040D630
.text:0040D630 ; =============== S U B R O U T I N E =======================================
.text:0040D630
.text:0040D630
.text:0040D630 ; int __cdecl sub_40D630(char *FileName, int)
.text:0040D630 sub_40D630      proc near               ; CODE XREF: sub_40D1E0+51↑p
.text:0040D630
.text:0040D630 Str             = dword ptr -9Ch
.text:0040D630 OpenFlag        = dword ptr -98h
.text:0040D630 var_94          = dword ptr -94h
.text:0040D630 var_90          = dword ptr -90h
.text:0040D630 var_8C          = dword ptr -8Ch
.text:0040D630 var_88          = dword ptr -88h
.text:0040D630 var_84          = dword ptr -84h
.text:0040D630 var_80          = dword ptr -80h
.text:0040D630 var_7C          = dword ptr -7Ch
.text:0040D630 FileName        = dword ptr  4
.text:0040D630 arg_4           = dword ptr  8
.text:0040D630
.text:0040D630                 push    ebp
.text:0040D631                 push    edi
.text:0040D632                 push    esi
.text:0040D633                 push    ebx
.text:0040D634                 sub     esp, 8Ch
.text:0040D63A                 mov     [esp+9Ch+var_88], 0FFFFFFFFh
.text:0040D642                 call    _errno
.text:0040D647                 mov     edx, [eax]
.text:0040D649                 mov     [esp+9Ch+var_8C], edx
.text:0040D64D                 mov     edx, [esp+9Ch+FileName]
.text:0040D654                 mov     [esp+9Ch+Str], edx ; Str
.text:0040D657                 call    strlen
.text:0040D65C                 cmp     eax, 5
.text:0040D65F                 jle     short loc_40D67D
.text:0040D661                 cld
.text:0040D662                 mov     ecx, [esp+9Ch+FileName]
.text:0040D669                 mov     edi, offset aXxxxxx ; "XXXXXX"
.text:0040D66E                 lea     esi, [eax+ecx-6]
.text:0040D672                 mov     ecx, 7
.text:0040D677                 mov     ebp, esi
.text:0040D679                 repe cmpsb
.text:0040D67B                 jz      short loc_40D698
.text:0040D67D
.text:0040D67D loc_40D67D:                             ; CODE XREF: sub_40D630+2F↑j
.text:0040D67D                 call    _errno
.text:0040D682                 mov     dword ptr [eax], 16h
.text:0040D688
.text:0040D688 loc_40D688:                             ; CODE XREF: sub_40D630+295↓j
.text:0040D688                                         ; sub_40D630+2D8↓j ...
.text:0040D688                 mov     eax, 0FFFFFFFFh
.text:0040D68D
.text:0040D68D loc_40D68D:                             ; CODE XREF: sub_40D630+2EF↓j
.text:0040D68D                                         ; sub_40D630+332↓j
.text:0040D68D                 add     esp, 8Ch
.text:0040D693                 pop     ebx
.text:0040D694                 pop     esi
.text:0040D695                 pop     edi
.text:0040D696                 pop     ebp
.text:0040D697                 retn
.text:0040D698 ; ---------------------------------------------------------------------------
.text:0040D698
.text:0040D698 loc_40D698:                             ; CODE XREF: sub_40D630+4B↑j
.text:0040D698                 mov     ecx, ds:dword_4127D4
.text:0040D69E                 mov     edi, ds:dword_4127D0
.text:0040D6A4                 mov     eax, ecx
.text:0040D6A6                 or      eax, edi
.text:0040D6A8                 jz      loc_40D9E3
.text:0040D6AE
.text:0040D6AE loc_40D6AE:                             ; CODE XREF: sub_40D630+3F8↓j
.text:0040D6AE                 rdtsc
.text:0040D6B0                 mov     edi, edx
.text:0040D6B2                 mov     esi, eax
.text:0040D6B4                 call    _getpid
.text:0040D6B9                 mov     ebx, eax
.text:0040D6BB                 mov     edx, esi
.text:0040D6BD                 sar     ebx, 1Fh
.text:0040D6C0                 xor     edx, eax
.text:0040D6C2                 mov     ecx, edi
.text:0040D6C4                 xor     ecx, ebx
.text:0040D6C6                 mov     ebx, edx
.text:0040D6C8                 mov     esi, ecx
.text:0040D6CA                 add     ebx, ds:dword_4127D0
.text:0040D6D0                 adc     esi, ds:dword_4127D4
.text:0040D6D6                 xor     edi, edi
.text:0040D6D8                 mov     ds:dword_4127D0, ebx
.text:0040D6DE                 mov     ds:dword_4127D4, esi
.text:0040D6E4                 lea     esi, [esi+0]
.text:0040D6EA                 lea     edi, [edi+0]
.text:0040D6F0
.text:0040D6F0 loc_40D6F0:                             ; CODE XREF: sub_40D630+2C7↓j
.text:0040D6F0                 mov     [esp+9Ch+Str], ebx
.text:0040D6F3                 mov     [esp+9Ch+OpenFlag], esi
.text:0040D6F7                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040D6FF                 mov     [esp+9Ch+var_90], 0
.text:0040D707                 call    sub_40FA20
.text:0040D70C                 movzx   ecx, ds:byte_40D540[eax]
.text:0040D713                 mov     [ebp+0], cl
.text:0040D716                 mov     [esp+9Ch+Str], ebx
.text:0040D719                 mov     [esp+9Ch+OpenFlag], esi
.text:0040D71D                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040D725                 mov     [esp+9Ch+var_90], 0
.text:0040D72D                 call    sub_40F900
.text:0040D732                 mov     [esp+9Ch+Str], eax
.text:0040D735                 mov     ebx, eax
.text:0040D737                 mov     esi, edx
.text:0040D739                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040D741                 mov     [esp+9Ch+var_90], 0
.text:0040D749                 mov     [esp+9Ch+OpenFlag], edx
.text:0040D74D                 call    sub_40FA20
.text:0040D752                 movzx   edx, ds:byte_40D540[eax]
.text:0040D759                 mov     [ebp+1], dl
.text:0040D75C                 mov     [esp+9Ch+Str], ebx
.text:0040D75F                 mov     [esp+9Ch+OpenFlag], esi
.text:0040D763                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040D76B                 mov     [esp+9Ch+var_90], 0
.text:0040D773                 call    sub_40F900
.text:0040D778                 mov     [esp+9Ch+Str], eax
.text:0040D77B                 mov     ebx, eax
.text:0040D77D                 mov     esi, edx
.text:0040D77F                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040D787                 mov     [esp+9Ch+var_90], 0
.text:0040D78F                 mov     [esp+9Ch+OpenFlag], edx
.text:0040D793                 call    sub_40FA20
.text:0040D798                 movzx   ecx, ds:byte_40D540[eax]
.text:0040D79F                 mov     [ebp+2], cl
.text:0040D7A2                 mov     [esp+9Ch+Str], ebx
.text:0040D7A5                 mov     [esp+9Ch+OpenFlag], esi
.text:0040D7A9                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040D7B1                 mov     [esp+9Ch+var_90], 0
.text:0040D7B9                 call    sub_40F900
.text:0040D7BE                 mov     [esp+9Ch+Str], eax
.text:0040D7C1                 mov     ebx, eax
.text:0040D7C3                 mov     esi, edx
.text:0040D7C5                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040D7CD                 mov     [esp+9Ch+var_90], 0
.text:0040D7D5                 mov     [esp+9Ch+OpenFlag], edx
.text:0040D7D9                 call    sub_40FA20
.text:0040D7DE                 movzx   edx, ds:byte_40D540[eax]
.text:0040D7E5                 mov     [ebp+3], dl
.text:0040D7E8                 mov     [esp+9Ch+Str], ebx
.text:0040D7EB                 mov     [esp+9Ch+OpenFlag], esi
.text:0040D7EF                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040D7F7                 mov     [esp+9Ch+var_90], 0
.text:0040D7FF                 call    sub_40F900
.text:0040D804                 mov     [esp+9Ch+Str], eax
.text:0040D807                 mov     ebx, eax
.text:0040D809                 mov     esi, edx
.text:0040D80B                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040D813                 mov     [esp+9Ch+var_90], 0
.text:0040D81B                 mov     [esp+9Ch+OpenFlag], edx
.text:0040D81F                 call    sub_40FA20
.text:0040D824                 movzx   ecx, ds:byte_40D540[eax]
.text:0040D82B                 mov     [ebp+4], cl
.text:0040D82E                 mov     [esp+9Ch+Str], ebx
.text:0040D831                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040D839                 mov     [esp+9Ch+var_90], 0
.text:0040D841                 mov     [esp+9Ch+OpenFlag], esi
.text:0040D845                 call    sub_40F900
.text:0040D84A                 mov     [esp+9Ch+Str], eax
.text:0040D84D                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040D855                 mov     [esp+9Ch+var_90], 0
.text:0040D85D                 mov     [esp+9Ch+OpenFlag], edx
.text:0040D861                 call    sub_40FA20
.text:0040D866                 movzx   ebx, ds:byte_40D540[eax]
.text:0040D86D                 mov     [ebp+5], bl
.text:0040D870                 cmp     [esp+9Ch+arg_4], 1
.text:0040D878                 jz      loc_40D9C7
.text:0040D87E                 cmp     [esp+9Ch+arg_4], 1
.text:0040D886                 jle     loc_40D990
.text:0040D88C                 cmp     [esp+9Ch+arg_4], 2
.text:0040D894                 jz      loc_40D967
.text:0040D89A                 cmp     [esp+9Ch+arg_4], 3
.text:0040D8A2                 jz      loc_40D924
.text:0040D8A8
.text:0040D8A8 loc_40D8A8:                             ; CODE XREF: sub_40D630+369↓j
.text:0040D8A8                 mov     ebx, offset aInvalidKindInG ; "invalid KIND in __gen_tempname"
.text:0040D8AD                 test    ebx, ebx
.text:0040D8AF                 jnz     loc_40DA2D
.text:0040D8B5
.text:0040D8B5 loc_40D8B5:                             ; CODE XREF: sub_40D630+354↓j
.text:0040D8B5                 mov     eax, [esp+9Ch+var_88]
.text:0040D8B9                 test    eax, eax
.text:0040D8BB                 jns     short loc_40D910
.text:0040D8BD                 call    _errno
.text:0040D8C2                 cmp     dword ptr [eax], 11h
.text:0040D8C5                 jnz     loc_40D688
.text:0040D8CB
.text:0040D8CB loc_40D8CB:                             ; CODE XREF: sub_40D630+315↓j
.text:0040D8CB                 mov     edx, ds:dword_4127D0
.text:0040D8D1                 mov     ecx, ds:dword_4127D4
.text:0040D8D7                 add     edx, 1E61h
.text:0040D8DD                 adc     ecx, 0
.text:0040D8E0                 mov     ebx, edx
.text:0040D8E2                 inc     edi
.text:0040D8E3                 mov     ds:dword_4127D0, edx
.text:0040D8E9                 cmp     edi, 3A2F8h
.text:0040D8EF                 mov     esi, ecx
.text:0040D8F1                 mov     ds:dword_4127D4, ecx
.text:0040D8F7                 jb      loc_40D6F0
.text:0040D8FD                 call    _errno
.text:0040D902                 mov     dword ptr [eax], 11h
.text:0040D908                 jmp     loc_40D688
.text:0040D908 ; ---------------------------------------------------------------------------
.text:0040D90D                 align 10h
.text:0040D910
.text:0040D910 loc_40D910:                             ; CODE XREF: sub_40D630+28B↑j
.text:0040D910                 call    _errno
.text:0040D915                 mov     esi, [esp+9Ch+var_8C]
.text:0040D919                 mov     [eax], esi
.text:0040D91B                 mov     eax, [esp+9Ch+var_88]
.text:0040D91F                 jmp     loc_40D68D
.text:0040D924 ; ---------------------------------------------------------------------------
.text:0040D924
.text:0040D924 loc_40D924:                             ; CODE XREF: sub_40D630+272↑j
.text:0040D924                 mov     [esp+9Ch+Str], 0 ; LPCSTR
.text:0040D92B                 mov     ecx, [esp+9Ch+FileName]
.text:0040D932                 lea     esi, [esp+9Ch+var_7C]
.text:0040D936                 mov     [esp+9Ch+var_94], esi ; int
.text:0040D93A                 mov     [esp+9Ch+OpenFlag], ecx ; int
.text:0040D93E                 call    sub_406FA0
.text:0040D943                 test    eax, eax
.text:0040D945                 jns     short loc_40D8CB
.text:0040D947                 call    _errno
.text:0040D94C                 cmp     dword ptr [eax], 2
.text:0040D94F                 jnz     loc_40D688
.text:0040D955                 call    _errno
.text:0040D95A                 mov     ebx, [esp+9Ch+var_8C]
.text:0040D95E                 mov     [eax], ebx
.text:0040D960                 xor     eax, eax
.text:0040D962                 jmp     loc_40D68D
.text:0040D967 ; ---------------------------------------------------------------------------
.text:0040D967
.text:0040D967 loc_40D967:                             ; CODE XREF: sub_40D630+264↑j
.text:0040D967                 mov     [esp+9Ch+OpenFlag], 1C0h ; AccessMode
.text:0040D96F                 mov     edx, [esp+9Ch+FileName]
.text:0040D976                 mov     [esp+9Ch+Str], edx ; LPCSTR
.text:0040D979                 call    sub_40DA60
.text:0040D97E                 mov     esi, esi
.text:0040D980
.text:0040D980 loc_40D980:                             ; CODE XREF: sub_40D630+395↓j
.text:0040D980                 mov     [esp+9Ch+var_88], eax
.text:0040D984                 jmp     loc_40D8B5
.text:0040D984 ; ---------------------------------------------------------------------------
.text:0040D989                 align 10h
.text:0040D990
.text:0040D990 loc_40D990:                             ; CODE XREF: sub_40D630+256↑j
.text:0040D990                 mov     eax, [esp+9Ch+arg_4]
.text:0040D997                 test    eax, eax
.text:0040D999                 jnz     loc_40D8A8
.text:0040D99F                 mov     [esp+9Ch+var_94], 180h
.text:0040D9A7                 mov     esi, [esp+9Ch+FileName]
.text:0040D9AE                 mov     [esp+9Ch+OpenFlag], 8502h ; OpenFlag
.text:0040D9B6                 mov     [esp+9Ch+Str], esi ; FileName
.text:0040D9B9                 lea     esi, [esi+0]
.text:0040D9C0
.text:0040D9C0 loc_40D9C0:                             ; CODE XREF: sub_40D630+3B1↓j
.text:0040D9C0                 call    _open
.text:0040D9C5                 jmp     short loc_40D980
.text:0040D9C7 ; ---------------------------------------------------------------------------
.text:0040D9C7
.text:0040D9C7 loc_40D9C7:                             ; CODE XREF: sub_40D630+248↑j
.text:0040D9C7                 mov     [esp+9Ch+var_94], 180h
.text:0040D9CF                 mov     ebx, [esp+9Ch+FileName]
.text:0040D9D6                 mov     [esp+9Ch+OpenFlag], 8502h
.text:0040D9DE                 mov     [esp+9Ch+Str], ebx
.text:0040D9E1                 jmp     short loc_40D9C0
.text:0040D9E3 ; ---------------------------------------------------------------------------
.text:0040D9E3
.text:0040D9E3 loc_40D9E3:                             ; CODE XREF: sub_40D630+78↑j
.text:0040D9E3                 mov     [esp+9Ch+OpenFlag], 0
.text:0040D9EB                 lea     ebx, [esp+9Ch+var_84]
.text:0040D9EF                 mov     [esp+9Ch+Str], ebx
.text:0040D9F2                 call    sub_40DAE0
.text:0040D9F7                 mov     edi, [esp+9Ch+var_80]
.text:0040D9FB                 mov     edx, [esp+9Ch+var_84]
.text:0040D9FF                 mov     ecx, edi
.text:0040DA01                 mov     ebx, edi
.text:0040DA03                 shl     ecx, 10h
.text:0040DA06                 sar     ebx, 1Fh
.text:0040DA09                 shld    ebx, edi, 10h
.text:0040DA0D                 mov     esi, edx
.text:0040DA0F                 mov     edi, edx
.text:0040DA11                 mov     edx, ecx
.text:0040DA13                 sar     edi, 1Fh
.text:0040DA16                 xor     edx, esi
.text:0040DA18                 mov     ds:dword_4127D0, edx
.text:0040DA1E                 mov     esi, ebx
.text:0040DA20                 xor     esi, edi
.text:0040DA22                 mov     ds:dword_4127D4, esi
.text:0040DA28                 jmp     loc_40D6AE
.text:0040DA2D ; ---------------------------------------------------------------------------
.text:0040DA2D
.text:0040DA2D loc_40DA2D:                             ; CODE XREF: sub_40D630+27F↑j
.text:0040DA2D                 mov     [esp+9Ch+var_94], 151h
.text:0040DA35                 mov     [esp+9Ch+OpenFlag], offset aLibc05SrcStdio ; "../../libc-0.5-src/stdio-common/tempnam"...
.text:0040DA3D                 mov     [esp+9Ch+Str], offset aInvalidKindInG_0 ; "! \"invalid KIND in __gen_tempname\""
.text:0040DA44                 call    _assert
.text:0040DA44 sub_40D630      endp
.text:0040DA44
.text:0040DA44 ; ---------------------------------------------------------------------------
.text:0040DA49                 align 20h
.text:0040DA60
.text:0040DA60 ; =============== S U B R O U T I N E =======================================
.text:0040DA60
.text:0040DA60
.text:0040DA60 ; int __cdecl sub_40DA60(LPCSTR, int AccessMode)
.text:0040DA60 sub_40DA60      proc near               ; CODE XREF: sub_40D630+349↑p
.text:0040DA60
.text:0040DA60 lpPathName      = dword ptr -1Ch
.text:0040DA60 lpSecurityAttributes= dword ptr -18h
.text:0040DA60 var_8           = dword ptr -8
.text:0040DA60 var_4           = dword ptr -4
.text:0040DA60 arg_0           = dword ptr  4
.text:0040DA60 AccessMode      = dword ptr  8
.text:0040DA60
.text:0040DA60                 sub     esp, 1Ch
.text:0040DA63                 mov     [esp+1Ch+var_8], ebx
.text:0040DA67                 mov     ebx, [esp+1Ch+arg_0]
.text:0040DA6B                 mov     [esp+1Ch+var_4], esi
.text:0040DA6F                 mov     esi, [esp+1Ch+AccessMode]
.text:0040DA73                 test    ebx, ebx
.text:0040DA75                 jz      short loc_40DAC5
.text:0040DA77                 mov     [esp+1Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:0040DA7F                 mov     [esp+1Ch+lpPathName], ebx ; lpPathName
.text:0040DA82                 call    CreateDirectoryA
.text:0040DA87                 sub     esp, 8
.text:0040DA8A                 test    eax, eax
.text:0040DA8C                 jz      short loc_40DAA6
.text:0040DA8E                 mov     [esp+1Ch+AccessMode], esi ; AccessMode
.text:0040DA92                 mov     esi, [esp+1Ch+var_4]
.text:0040DA96                 mov     [esp+1Ch+arg_0], ebx ; FileName
.text:0040DA9A                 mov     ebx, [esp+1Ch+var_8]
.text:0040DA9E                 add     esp, 1Ch
.text:0040DAA1                 jmp     _chmod
.text:0040DAA6 ; ---------------------------------------------------------------------------
.text:0040DAA6
.text:0040DAA6 loc_40DAA6:                             ; CODE XREF: sub_40DA60+2C↑j
.text:0040DAA6                 call    sub_407DC0
.text:0040DAAB                 mov     esi, eax
.text:0040DAAD                 call    _errno
.text:0040DAB2                 mov     [eax], esi
.text:0040DAB4
.text:0040DAB4 loc_40DAB4:                             ; CODE XREF: sub_40DA60+70↓j
.text:0040DAB4                 mov     ebx, [esp+1Ch+var_8]
.text:0040DAB8                 mov     eax, 0FFFFFFFFh
.text:0040DABD                 mov     esi, [esp+1Ch+var_4]
.text:0040DAC1                 add     esp, 1Ch
.text:0040DAC4                 retn
.text:0040DAC5 ; ---------------------------------------------------------------------------
.text:0040DAC5
.text:0040DAC5 loc_40DAC5:                             ; CODE XREF: sub_40DA60+15↑j
.text:0040DAC5                 call    _errno
.text:0040DACA                 mov     dword ptr [eax], 16h
.text:0040DAD0                 jmp     short loc_40DAB4
.text:0040DAD0 sub_40DA60      endp
.text:0040DAD0
.text:0040DAD0 ; ---------------------------------------------------------------------------
.text:0040DAD2                 align 10h
.text:0040DAE0
.text:0040DAE0 ; =============== S U B R O U T I N E =======================================
.text:0040DAE0
.text:0040DAE0
.text:0040DAE0 sub_40DAE0      proc near               ; CODE XREF: sub_40D630+3C2↑p
.text:0040DAE0
.text:0040DAE0 var_1C          = dword ptr -1Ch
.text:0040DAE0 var_18          = dword ptr -18h
.text:0040DAE0 var_C           = dword ptr -0Ch
.text:0040DAE0 var_8           = dword ptr -8
.text:0040DAE0 var_4           = dword ptr -4
.text:0040DAE0 arg_0           = dword ptr  4
.text:0040DAE0 arg_4           = dword ptr  8
.text:0040DAE0
.text:0040DAE0                 sub     esp, 1Ch
.text:0040DAE3                 mov     edx, [esp+1Ch+arg_4]
.text:0040DAE7                 mov     [esp+1Ch+var_4], ebx
.text:0040DAEB                 mov     ebx, [esp+1Ch+arg_0]
.text:0040DAEF                 mov     [esp+1Ch+var_18], edx
.text:0040DAF3                 lea     edx, [esp+1Ch+var_C]
.text:0040DAF7                 mov     [esp+1Ch+var_1C], edx
.text:0040DAFA                 call    sub_40DB60
.text:0040DAFF                 test    eax, eax
.text:0040DB01                 mov     edx, 0FFFFFFFFh
.text:0040DB06                 jnz     short loc_40DB2A
.text:0040DB08                 mov     ecx, [esp+1Ch+var_C]
.text:0040DB0C                 mov     edx, 10624DD3h
.text:0040DB11                 mov     [ebx], ecx
.text:0040DB13                 mov     ecx, [esp+1Ch+var_8]
.text:0040DB17                 mov     eax, ecx
.text:0040DB19                 imul    edx
.text:0040DB1B                 mov     eax, ecx
.text:0040DB1D                 sar     eax, 1Fh
.text:0040DB20                 sar     edx, 6
.text:0040DB23                 sub     edx, eax
.text:0040DB25                 mov     [ebx+4], edx
.text:0040DB28                 xor     edx, edx
.text:0040DB2A
.text:0040DB2A loc_40DB2A:                             ; CODE XREF: sub_40DAE0+26↑j
.text:0040DB2A                 mov     ebx, [esp+1Ch+var_4]
.text:0040DB2E                 mov     eax, edx
.text:0040DB30                 add     esp, 1Ch
.text:0040DB33                 retn
.text:0040DB33 sub_40DAE0      endp
.text:0040DB33
.text:0040DB33 ; ---------------------------------------------------------------------------
.text:0040DB34                 align 10h
.text:0040DB40
.text:0040DB40 ; =============== S U B R O U T I N E =======================================
.text:0040DB40
.text:0040DB40
.text:0040DB40 sub_40DB40      proc near               ; CODE XREF: sub_40D2B0+1A7↑p
.text:0040DB40                                         ; sub_40D2B0+237↑p ...
.text:0040DB40                 mov     edx, ds:dword_4127E0
.text:0040DB46                 test    edx, edx
.text:0040DB48                 jnz     short loc_40DB50
.text:0040DB4A                 jmp     getenv
.text:0040DB4A ; ---------------------------------------------------------------------------
.text:0040DB4F                 align 10h
.text:0040DB50
.text:0040DB50 loc_40DB50:                             ; CODE XREF: sub_40DB40+8↑j
.text:0040DB50                 xor     eax, eax
.text:0040DB52                 retn
.text:0040DB52 sub_40DB40      endp
.text:0040DB52
.text:0040DB52 ; ---------------------------------------------------------------------------
.text:0040DB53                 align 10h
.text:0040DB60
.text:0040DB60 ; =============== S U B R O U T I N E =======================================
.text:0040DB60
.text:0040DB60
.text:0040DB60 sub_40DB60      proc near               ; CODE XREF: sub_40DAE0+1A↑p
.text:0040DB60
.text:0040DB60 lpTimeZoneInformation= dword ptr -0DCh
.text:0040DB60 var_D8          = dword ptr -0D8h
.text:0040DB60 var_D4          = dword ptr -0D4h
.text:0040DB60 var_D0          = dword ptr -0D0h
.text:0040DB60 SystemTimeAsFileTime= _FILETIME ptr -0C4h
.text:0040DB60 TimeZoneInformation= _TIME_ZONE_INFORMATION ptr -0BCh
.text:0040DB60 arg_0           = dword ptr  4
.text:0040DB60 arg_4           = dword ptr  8
.text:0040DB60
.text:0040DB60                 push    edi
.text:0040DB61                 push    esi
.text:0040DB62                 push    ebx
.text:0040DB63                 sub     esp, 0D0h
.text:0040DB69                 mov     ebx, [esp+0DCh+arg_4]
.text:0040DB70                 mov     edi, [esp+0DCh+arg_0]
.text:0040DB77                 test    ebx, ebx
.text:0040DB79                 jz      short loc_40DBA4
.text:0040DB7B                 lea     edx, [esp+0DCh+TimeZoneInformation]
.text:0040DB7F                 mov     [esp+0DCh+lpTimeZoneInformation], edx ; lpTimeZoneInformation
.text:0040DB82                 call    GetTimeZoneInformation
.text:0040DB87                 sub     esp, 4
.text:0040DB8A                 cmp     eax, 0FFFFFFFFh
.text:0040DB8D                 jz      loc_40DC25
.text:0040DB93                 xor     ecx, ecx
.text:0040DB95                 mov     esi, [esp+0DCh+TimeZoneInformation.Bias]
.text:0040DB99                 cmp     eax, 2
.text:0040DB9C                 setz    cl
.text:0040DB9F                 mov     [ebx], esi
.text:0040DBA1                 mov     [ebx+4], ecx
.text:0040DBA4
.text:0040DBA4 loc_40DBA4:                             ; CODE XREF: sub_40DB60+19↑j
.text:0040DBA4                                         ; sub_40DB60+E0↓j
.text:0040DBA4                 test    edi, edi
.text:0040DBA6                 jz      short loc_40DC19
.text:0040DBA8                 lea     ecx, [esp+0DCh+SystemTimeAsFileTime]
.text:0040DBAC                 mov     [esp+0DCh+lpTimeZoneInformation], ecx ; lpSystemTimeAsFileTime
.text:0040DBAF                 call    GetSystemTimeAsFileTime
.text:0040DBB4                 sub     esp, 4
.text:0040DBB7                 mov     ebx, [esp+0DCh+SystemTimeAsFileTime.dwLowDateTime]
.text:0040DBBB                 mov     [esp+0DCh+var_D4], 989680h
.text:0040DBC3                 mov     esi, [esp+0DCh+SystemTimeAsFileTime.dwHighDateTime]
.text:0040DBC7                 mov     [esp+0DCh+var_D0], 0
.text:0040DBCF                 add     ebx, 2AC18000h
.text:0040DBD5                 adc     esi, 0FE624E21h
.text:0040DBDB                 mov     [esp+0DCh+SystemTimeAsFileTime.dwLowDateTime], ebx
.text:0040DBDF                 mov     [esp+0DCh+lpTimeZoneInformation], ebx
.text:0040DBE2                 mov     [esp+0DCh+SystemTimeAsFileTime.dwHighDateTime], esi
.text:0040DBE6                 mov     [esp+0DCh+var_D8], esi
.text:0040DBEA                 call    sub_40F900
.text:0040DBEF                 mov     [edi], eax
.text:0040DBF1                 mov     [esp+0DCh+lpTimeZoneInformation], ebx
.text:0040DBF4                 mov     [esp+0DCh+var_D4], 989680h
.text:0040DBFC                 mov     [esp+0DCh+var_D0], 0
.text:0040DC04                 mov     [esp+0DCh+var_D8], esi
.text:0040DC08                 call    sub_40FA20
.text:0040DC0D                 lea     ebx, [eax+eax*4]
.text:0040DC10                 lea     edx, [ebx+ebx*4]
.text:0040DC13                 shl     edx, 2
.text:0040DC16                 mov     [edi+4], edx
.text:0040DC19
.text:0040DC19 loc_40DC19:                             ; CODE XREF: sub_40DB60+46↑j
.text:0040DC19                 add     esp, 0D0h
.text:0040DC1F                 xor     eax, eax
.text:0040DC21                 pop     ebx
.text:0040DC22                 pop     esi
.text:0040DC23                 pop     edi
.text:0040DC24                 retn
.text:0040DC25 ; ---------------------------------------------------------------------------
.text:0040DC25
.text:0040DC25 loc_40DC25:                             ; CODE XREF: sub_40DB60+2D↑j
.text:0040DC25                 mov     dword ptr [ebx], 0
.text:0040DC2B                 mov     dword ptr [ebx+4], 0
.text:0040DC32                 call    sub_407DC0
.text:0040DC37                 mov     esi, eax
.text:0040DC39                 call    _errno
.text:0040DC3E                 mov     [eax], esi
.text:0040DC40                 jmp     loc_40DBA4
.text:0040DC40 sub_40DB60      endp
.text:0040DC40
.text:0040DC40 ; ---------------------------------------------------------------------------
.text:0040DC45                 align 10h
.text:0040DC50                 sub     esp, 0Ch
.text:0040DC53                 mov     [esp+4], ebx
.text:0040DC57                 mov     [esp+8], esi
.text:0040DC5B                 xor     esi, esi
.text:0040DC5D                 call    sub_40DCD0
.text:0040DC62                 mov     ebx, eax
.text:0040DC64                 call    sub_40DCC0
.text:0040DC69                 cmp     ebx, eax
.text:0040DC6B                 jz      short loc_40DC84
.text:0040DC6D
.text:0040DC6D loc_40DC6D:                             ; CODE XREF: .text:0040DC92↓j
.text:0040DC6D                 mov     esi, 1
.text:0040DC72
.text:0040DC72 loc_40DC72:                             ; CODE XREF: .text:0040DC94↓j
.text:0040DC72                 mov     ds:dword_4127E0, esi
.text:0040DC78                 mov     ebx, [esp+4]
.text:0040DC7C                 mov     esi, [esp+8]
.text:0040DC80                 add     esp, 0Ch
.text:0040DC83                 retn
.text:0040DC84 ; ---------------------------------------------------------------------------
.text:0040DC84
.text:0040DC84 loc_40DC84:                             ; CODE XREF: .text:0040DC6B↑j
.text:0040DC84                 call    sub_40DCB0
.text:0040DC89                 mov     ebx, eax
.text:0040DC8B                 call    sub_40DCA0
.text:0040DC90                 cmp     ebx, eax
.text:0040DC92                 jnz     short loc_40DC6D
.text:0040DC94                 jmp     short loc_40DC72
.text:0040DC94 ; ---------------------------------------------------------------------------
.text:0040DC96                 align 10h
.text:0040DCA0
.text:0040DCA0 ; =============== S U B R O U T I N E =======================================
.text:0040DCA0
.text:0040DCA0
.text:0040DCA0 sub_40DCA0      proc near               ; CODE XREF: .text:0040DC8B↑p
.text:0040DCA0                 xor     eax, eax
.text:0040DCA2                 retn
.text:0040DCA2 sub_40DCA0      endp
.text:0040DCA2
.text:0040DCA2 ; ---------------------------------------------------------------------------
.text:0040DCA3                 align 10h
.text:0040DCB0
.text:0040DCB0 ; =============== S U B R O U T I N E =======================================
.text:0040DCB0
.text:0040DCB0
.text:0040DCB0 sub_40DCB0      proc near               ; CODE XREF: .text:loc_40DC84↑p
.text:0040DCB0                 xor     eax, eax
.text:0040DCB2                 retn
.text:0040DCB2 sub_40DCB0      endp
.text:0040DCB2
.text:0040DCB2 ; ---------------------------------------------------------------------------
.text:0040DCB3                 align 10h
.text:0040DCC0
.text:0040DCC0 ; =============== S U B R O U T I N E =======================================
.text:0040DCC0
.text:0040DCC0
.text:0040DCC0 sub_40DCC0      proc near               ; CODE XREF: .text:0040DC64↑p
.text:0040DCC0                 xor     eax, eax
.text:0040DCC2                 retn
.text:0040DCC2 sub_40DCC0      endp
.text:0040DCC2
.text:0040DCC2 ; ---------------------------------------------------------------------------
.text:0040DCC3                 align 10h
.text:0040DCD0
.text:0040DCD0 ; =============== S U B R O U T I N E =======================================
.text:0040DCD0
.text:0040DCD0
.text:0040DCD0 sub_40DCD0      proc near               ; CODE XREF: .text:0040DC5D↑p
.text:0040DCD0                 xor     eax, eax
.text:0040DCD2                 retn
.text:0040DCD2 sub_40DCD0      endp
.text:0040DCD2
.text:0040DCD2 ; ---------------------------------------------------------------------------
.text:0040DCD3                 align 10h
.text:0040DCE0
.text:0040DCE0 ; =============== S U B R O U T I N E =======================================
.text:0040DCE0
.text:0040DCE0 ; Attributes: bp-based frame
.text:0040DCE0
.text:0040DCE0 ; int __cdecl sub_40DCE0(int, char *Str, int)
.text:0040DCE0 sub_40DCE0      proc near               ; CODE XREF: sub_402FC0+10C↑p
.text:0040DCE0
.text:0040DCE0 arg_0           = dword ptr  8
.text:0040DCE0 Str             = dword ptr  0Ch
.text:0040DCE0 arg_8           = dword ptr  10h
.text:0040DCE0
.text:0040DCE0                 push    ebp
.text:0040DCE1                 mov     ebp, esp
.text:0040DCE3                 sub     esp, 0Ch
.text:0040DCE6                 lea     eax, [ebp+arg_8]
.text:0040DCE9                 mov     edx, [ebp+Str]
.text:0040DCEC                 push    eax             ; int
.text:0040DCED                 mov     eax, [ebp+arg_0]
.text:0040DCF0                 push    edx             ; Str
.text:0040DCF1                 push    eax             ; int
.text:0040DCF2                 call    sub_40DF70
.text:0040DCF7                 mov     esp, ebp
.text:0040DCF9                 pop     ebp
.text:0040DCFA                 retn
.text:0040DCFA sub_40DCE0      endp
.text:0040DCFA
.text:0040DCFA ; ---------------------------------------------------------------------------
.text:0040DCFB                 align 10h
.text:0040DD00 ; const char a0[]
.text:0040DD00 a0              db '-+ #0',0            ; DATA XREF: sub_40DD10+79↓o
.text:0040DD06 ; const char aHll[]
.text:0040DD06 aHll            db 'hlL',0              ; DATA XREF: sub_40DD10+C6↓o
.text:0040DD0A                 align 10h
.text:0040DD10
.text:0040DD10 ; =============== S U B R O U T I N E =======================================
.text:0040DD10
.text:0040DD10 ; Attributes: bp-based frame
.text:0040DD10
.text:0040DD10 ; int __cdecl sub_40DD10(int, char *Str, int)
.text:0040DD10 sub_40DD10      proc near               ; CODE XREF: sub_40DF70+12↓p
.text:0040DD10
.text:0040DD10 String          = dword ptr -10h
.text:0040DD10 arg_0           = dword ptr  8
.text:0040DD10 Str             = dword ptr  0Ch
.text:0040DD10 arg_8           = dword ptr  10h
.text:0040DD10
.text:0040DD10                 push    ebp
.text:0040DD11                 mov     ebp, esp
.text:0040DD13                 push    edi
.text:0040DD14                 push    esi
.text:0040DD15                 push    ebx
.text:0040DD16                 sub     esp, 18h
.text:0040DD19                 mov     edi, [ebp+Str]
.text:0040DD1C                 push    edi             ; Str
.text:0040DD1D                 mov     [ebp+String], edi
.text:0040DD20                 call    strlen
.text:0040DD25                 mov     edx, [ebp+String]
.text:0040DD28                 add     esp, 10h
.text:0040DD2B                 lea     ebx, [eax+1]
.text:0040DD2E                 cmp     byte ptr [edx], 0
.text:0040DD31                 mov     eax, [ebp+arg_8]
.text:0040DD34                 mov     esi, [eax]
.text:0040DD36                 jz      short loc_40DD4B
.text:0040DD38
.text:0040DD38 loc_40DD38:                             ; CODE XREF: sub_40DD10+39↓j
.text:0040DD38                 mov     eax, edx
.text:0040DD3A                 inc     edx
.text:0040DD3B                 mov     [ebp+String], edx
.text:0040DD3E                 cmp     byte ptr [eax], 25h ; '%'
.text:0040DD41                 jz      short loc_40DD80
.text:0040DD43
.text:0040DD43 loc_40DD43:                             ; CODE XREF: sub_40DD10+1D9↓j
.text:0040DD43                 mov     edx, [ebp+String]
.text:0040DD46                 cmp     byte ptr [edx], 0
.text:0040DD49                 jnz     short loc_40DD38
.text:0040DD4B
.text:0040DD4B loc_40DD4B:                             ; CODE XREF: sub_40DD10+26↑j
.text:0040DD4B                 sub     esp, 0Ch
.text:0040DD4E                 push    ebx             ; Size
.text:0040DD4F                 call    malloc
.text:0040DD54                 add     esp, 10h
.text:0040DD57                 mov     edx, eax
.text:0040DD59                 mov     eax, [ebp+arg_0]
.text:0040DD5C                 test    edx, edx
.text:0040DD5E                 mov     [eax], edx
.text:0040DD60                 jz      short loc_40DD78
.text:0040DD62                 mov     eax, [ebp+arg_8]
.text:0040DD65                 push    ecx
.text:0040DD66                 mov     eax, [eax]
.text:0040DD68                 push    eax             ; ArgList
.text:0040DD69                 push    edi             ; Format
.text:0040DD6A                 push    edx             ; Buffer
.text:0040DD6B                 call    vsprintf
.text:0040DD70
.text:0040DD70 loc_40DD70:                             ; CODE XREF: sub_40DD10+6A↓j
.text:0040DD70                 lea     esp, [ebp-0Ch]
.text:0040DD73                 pop     ebx
.text:0040DD74                 pop     esi
.text:0040DD75                 pop     edi
.text:0040DD76                 pop     ebp
.text:0040DD77                 retn
.text:0040DD78 ; ---------------------------------------------------------------------------
.text:0040DD78
.text:0040DD78 loc_40DD78:                             ; CODE XREF: sub_40DD10+50↑j
.text:0040DD78                 xor     eax, eax
.text:0040DD7A                 jmp     short loc_40DD70
.text:0040DD7A ; ---------------------------------------------------------------------------
.text:0040DD7C                 align 10h
.text:0040DD80
.text:0040DD80 loc_40DD80:                             ; CODE XREF: sub_40DD10+31↑j
.text:0040DD80                                         ; sub_40DD10+91↓j
.text:0040DD80                 push    eax
.text:0040DD81                 push    eax
.text:0040DD82                 mov     eax, [ebp+String]
.text:0040DD85                 movsx   eax, byte ptr [eax]
.text:0040DD88                 push    eax             ; Val
.text:0040DD89                 push    offset a0       ; "-+ #0"
.text:0040DD8E                 call    strchr
.text:0040DD93                 add     esp, 10h
.text:0040DD96                 test    eax, eax
.text:0040DD98                 jz      short loc_40DDA3
.text:0040DD9A                 mov     eax, [ebp+String]
.text:0040DD9D                 inc     eax
.text:0040DD9E                 mov     [ebp+String], eax
.text:0040DDA1                 jmp     short loc_40DD80
.text:0040DDA3 ; ---------------------------------------------------------------------------
.text:0040DDA3
.text:0040DDA3 loc_40DDA3:                             ; CODE XREF: sub_40DD10+88↑j
.text:0040DDA3                 mov     edx, [ebp+String]
.text:0040DDA6                 cmp     byte ptr [edx], 2Ah ; '*'
.text:0040DDA9                 jz      loc_40DF50
.text:0040DDAF                 push    eax
.text:0040DDB0                 lea     eax, [ebp+String]
.text:0040DDB3                 push    0Ah             ; Radix
.text:0040DDB5                 push    eax             ; EndPtr
.text:0040DDB6                 push    edx             ; String
.text:0040DDB7                 call    strtoul
.text:0040DDBC                 add     esp, 10h
.text:0040DDBF                 add     ebx, eax
.text:0040DDC1
.text:0040DDC1 loc_40DDC1:                             ; CODE XREF: sub_40DD10+251↓j
.text:0040DDC1                 mov     edx, [ebp+String]
.text:0040DDC4                 mov     eax, edx
.text:0040DDC6                 cmp     byte ptr [edx], 2Eh ; '.'
.text:0040DDC9                 jz      loc_40DF0D
.text:0040DDCF                 nop
.text:0040DDD0
.text:0040DDD0 loc_40DDD0:                             ; CODE XREF: sub_40DD10+DE↓j
.text:0040DDD0                                         ; sub_40DD10+21C↓j ...
.text:0040DDD0                 push    eax
.text:0040DDD1                 push    eax
.text:0040DDD2                 movsx   eax, byte ptr [edx]
.text:0040DDD5                 push    eax             ; Val
.text:0040DDD6                 push    offset aHll     ; "hlL"
.text:0040DDDB                 call    strchr
.text:0040DDE0                 add     esp, 10h
.text:0040DDE3                 test    eax, eax
.text:0040DDE5                 jz      short loc_40DDF0
.text:0040DDE7                 mov     edx, [ebp+String]
.text:0040DDEA                 inc     edx
.text:0040DDEB                 mov     [ebp+String], edx
.text:0040DDEE                 jmp     short loc_40DDD0
.text:0040DDF0 ; ---------------------------------------------------------------------------
.text:0040DDF0
.text:0040DDF0 loc_40DDF0:                             ; CODE XREF: sub_40DD10+D5↑j
.text:0040DDF0                 mov     edx, [ebp+String]
.text:0040DDF3                 add     ebx, 1Eh
.text:0040DDF6                 movsx   eax, byte ptr [edx]
.text:0040DDF9                 sub     eax, 45h ; 'E'  ; switch 52 cases
.text:0040DDFC                 cmp     eax, 33h
.text:0040DDFF                 ja      def_40DE05      ; jumptable 0040DE05 default case, cases 70,72-87,89-98,104,106-109,113,114,116,118,119
.text:0040DE05                 jmp     ds:jpt_40DE05[eax*4] ; switch jump
.text:0040DE05 ; ---------------------------------------------------------------------------
.text:0040DE0C jpt_40DE05      dd offset loc_40DEDC, offset def_40DE05, offset loc_40DEDC
.text:0040DE0C                                         ; DATA XREF: sub_40DD10+F5↑r
.text:0040DE0C                 dd offset def_40DE05, offset def_40DE05, offset def_40DE05 ; jump table for switch statement
.text:0040DE0C                 dd offset def_40DE05, offset def_40DE05, offset def_40DE05
.text:0040DE0C                 dd offset def_40DE05, offset def_40DE05, offset def_40DE05
.text:0040DE0C                 dd offset def_40DE05, offset def_40DE05, offset def_40DE05
.text:0040DE0C                 dd offset def_40DE05, offset def_40DE05, offset def_40DE05
.text:0040DE0C                 dd offset def_40DE05, offset loc_40DEEE, offset def_40DE05
.text:0040DE0C                 dd offset def_40DE05, offset def_40DE05, offset def_40DE05
.text:0040DE0C                 dd offset def_40DE05, offset def_40DE05, offset def_40DE05
.text:0040DE0C                 dd offset def_40DE05, offset def_40DE05, offset def_40DE05
.text:0040DE0C                 dd offset loc_40DEEE, offset loc_40DEEE, offset loc_40DEDC
.text:0040DE0C                 dd offset loc_40DEDC, offset loc_40DEDC, offset def_40DE05
.text:0040DE0C                 dd offset loc_40DEEE, offset def_40DE05, offset def_40DE05
.text:0040DE0C                 dd offset def_40DE05, offset def_40DE05, offset loc_40DEEE
.text:0040DE0C                 dd offset loc_40DEEE, offset loc_40DEEE, offset def_40DE05
.text:0040DE0C                 dd offset def_40DE05, offset loc_40DEF3, offset def_40DE05
.text:0040DE0C                 dd offset loc_40DEEE, offset def_40DE05, offset def_40DE05
.text:0040DE0C                 dd offset loc_40DEEE
.text:0040DEDC ; ---------------------------------------------------------------------------
.text:0040DEDC
.text:0040DEDC loc_40DEDC:                             ; CODE XREF: sub_40DD10+F5↑j
.text:0040DEDC                                         ; DATA XREF: sub_40DD10:jpt_40DE05↑o
.text:0040DEDC                 add     esi, 8          ; jumptable 0040DE05 cases 69,71,101-103
.text:0040DEDF                 add     ebx, 133h
.text:0040DEE5
.text:0040DEE5 def_40DE05:                             ; CODE XREF: sub_40DD10+EF↑j
.text:0040DEE5                                         ; sub_40DD10+F5↑j ...
.text:0040DEE5                 inc     edx             ; jumptable 0040DE05 default case, cases 70,72-87,89-98,104,106-109,113,114,116,118,119
.text:0040DEE6                 mov     [ebp+String], edx
.text:0040DEE9                 jmp     loc_40DD43
.text:0040DEEE ; ---------------------------------------------------------------------------
.text:0040DEEE
.text:0040DEEE loc_40DEEE:                             ; CODE XREF: sub_40DD10+F5↑j
.text:0040DEEE                                         ; DATA XREF: sub_40DD10:jpt_40DE05↑o
.text:0040DEEE                 add     esi, 4          ; jumptable 0040DE05 cases 88,99,100,105,110-112,117,120
.text:0040DEF1                 jmp     short def_40DE05 ; jumptable 0040DE05 default case, cases 70,72-87,89-98,104,106-109,113,114,116,118,119
.text:0040DEF3 ; ---------------------------------------------------------------------------
.text:0040DEF3
.text:0040DEF3 loc_40DEF3:                             ; CODE XREF: sub_40DD10+F5↑j
.text:0040DEF3                                         ; DATA XREF: sub_40DD10:jpt_40DE05↑o
.text:0040DEF3                 mov     eax, esi        ; jumptable 0040DE05 case 115
.text:0040DEF5                 sub     esp, 0Ch
.text:0040DEF8                 add     esi, 4
.text:0040DEFB                 mov     eax, [eax]
.text:0040DEFD                 push    eax             ; Str
.text:0040DEFE                 call    strlen
.text:0040DF03                 mov     edx, [ebp+String]
.text:0040DF06                 add     ebx, eax
.text:0040DF08                 add     esp, 10h
.text:0040DF0B                 jmp     short def_40DE05 ; jumptable 0040DE05 default case, cases 70,72-87,89-98,104,106-109,113,114,116,118,119
.text:0040DF0D ; ---------------------------------------------------------------------------
.text:0040DF0D
.text:0040DF0D loc_40DF0D:                             ; CODE XREF: sub_40DD10+B9↑j
.text:0040DF0D                 inc     edx
.text:0040DF0E                 mov     [ebp+String], edx
.text:0040DF11                 cmp     byte ptr [eax+1], 2Ah ; '*'
.text:0040DF15                 jz      short loc_40DF31
.text:0040DF17                 push    eax
.text:0040DF18                 lea     eax, [ebp+String]
.text:0040DF1B                 push    0Ah             ; Radix
.text:0040DF1D                 push    eax             ; EndPtr
.text:0040DF1E                 push    edx             ; String
.text:0040DF1F                 call    strtoul
.text:0040DF24                 mov     edx, [ebp+String]
.text:0040DF27                 add     ebx, eax
.text:0040DF29                 add     esp, 10h
.text:0040DF2C                 jmp     loc_40DDD0
.text:0040DF31 ; ---------------------------------------------------------------------------
.text:0040DF31
.text:0040DF31 loc_40DF31:                             ; CODE XREF: sub_40DD10+205↑j
.text:0040DF31                 lea     edx, [eax+2]
.text:0040DF34                 mov     eax, esi
.text:0040DF36                 mov     [ebp+String], edx
.text:0040DF39                 add     esi, 4
.text:0040DF3C                 mov     eax, [eax]
.text:0040DF3E                 test    eax, eax
.text:0040DF40                 js      short loc_40DF49
.text:0040DF42
.text:0040DF42 loc_40DF42:                             ; CODE XREF: sub_40DD10+23B↓j
.text:0040DF42                 add     ebx, eax
.text:0040DF44                 jmp     loc_40DDD0
.text:0040DF49 ; ---------------------------------------------------------------------------
.text:0040DF49
.text:0040DF49 loc_40DF49:                             ; CODE XREF: sub_40DD10+230↑j
.text:0040DF49                 neg     eax
.text:0040DF4B                 jmp     short loc_40DF42
.text:0040DF4B ; ---------------------------------------------------------------------------
.text:0040DF4D                 align 10h
.text:0040DF50
.text:0040DF50 loc_40DF50:                             ; CODE XREF: sub_40DD10+99↑j
.text:0040DF50                 mov     eax, esi
.text:0040DF52                 inc     edx
.text:0040DF53                 add     esi, 4
.text:0040DF56                 mov     [ebp+String], edx
.text:0040DF59                 mov     eax, [eax]
.text:0040DF5B                 test    eax, eax
.text:0040DF5D                 js      short loc_40DF66
.text:0040DF5F
.text:0040DF5F loc_40DF5F:                             ; CODE XREF: sub_40DD10+258↓j
.text:0040DF5F                 add     ebx, eax
.text:0040DF61                 jmp     loc_40DDC1
.text:0040DF66 ; ---------------------------------------------------------------------------
.text:0040DF66
.text:0040DF66 loc_40DF66:                             ; CODE XREF: sub_40DD10+24D↑j
.text:0040DF66                 neg     eax
.text:0040DF68                 jmp     short loc_40DF5F
.text:0040DF68 sub_40DD10      endp
.text:0040DF68
.text:0040DF68 ; ---------------------------------------------------------------------------
.text:0040DF6A                 align 10h
.text:0040DF70
.text:0040DF70 ; =============== S U B R O U T I N E =======================================
.text:0040DF70
.text:0040DF70 ; Attributes: bp-based frame
.text:0040DF70
.text:0040DF70 ; int __cdecl sub_40DF70(int, char *Str, int)
.text:0040DF70 sub_40DF70      proc near               ; CODE XREF: sub_40DCE0+12↑p
.text:0040DF70
.text:0040DF70 arg_0           = dword ptr  8
.text:0040DF70 Str             = dword ptr  0Ch
.text:0040DF70 arg_8           = dword ptr  10h
.text:0040DF70
.text:0040DF70                 push    ebp
.text:0040DF71                 mov     ebp, esp
.text:0040DF73                 sub     esp, 0Ch
.text:0040DF76                 lea     eax, [ebp+arg_8]
.text:0040DF79                 mov     ecx, [ebp+Str]
.text:0040DF7C                 push    eax             ; int
.text:0040DF7D                 mov     edx, [ebp+arg_0]
.text:0040DF80                 push    ecx             ; Str
.text:0040DF81                 push    edx             ; int
.text:0040DF82                 call    sub_40DD10
.text:0040DF87                 mov     esp, ebp
.text:0040DF89                 pop     ebp
.text:0040DF8A                 retn
.text:0040DF8A sub_40DF70      endp
.text:0040DF8A
.text:0040DF8A ; ---------------------------------------------------------------------------
.text:0040DF8B                 align 10h
.text:0040DF90
.text:0040DF90 ; =============== S U B R O U T I N E =======================================
.text:0040DF90
.text:0040DF90 ; Attributes: thunk
.text:0040DF90
.text:0040DF90 ; struct hostent *__stdcall gethostbyname(const char *name)
.text:0040DF90 gethostbyname   proc near               ; CODE XREF: sub_405340+14↑p
.text:0040DF90
.text:0040DF90 name            = dword ptr  4
.text:0040DF90
.text:0040DF90                 jmp     ds:__imp_gethostbyname
.text:0040DF90 gethostbyname   endp
.text:0040DF90
.text:0040DF90 ; ---------------------------------------------------------------------------
.text:0040DF96                 align 10h
.text:0040DFA0
.text:0040DFA0 ; =============== S U B R O U T I N E =======================================
.text:0040DFA0
.text:0040DFA0 ; Attributes: thunk
.text:0040DFA0
.text:0040DFA0 ; char *__stdcall inet_ntoa(struct in_addr in)
.text:0040DFA0 inet_ntoa       proc near               ; CODE XREF: sub_405340+51↑p
.text:0040DFA0
.text:0040DFA0 in              = in_addr ptr  4
.text:0040DFA0
.text:0040DFA0                 jmp     ds:__imp_inet_ntoa
.text:0040DFA0 inet_ntoa       endp
.text:0040DFA0
.text:0040DFA0 ; ---------------------------------------------------------------------------
.text:0040DFA6                 align 10h
.text:0040DFB0
.text:0040DFB0 ; =============== S U B R O U T I N E =======================================
.text:0040DFB0
.text:0040DFB0 ; Attributes: thunk
.text:0040DFB0
.text:0040DFB0 ; struct hostent *__stdcall gethostbyaddr(const char *addr, int len, int type)
.text:0040DFB0 gethostbyaddr   proc near               ; CODE XREF: sub_405340+AD↑p
.text:0040DFB0
.text:0040DFB0 addr            = dword ptr  4
.text:0040DFB0 len             = dword ptr  8
.text:0040DFB0 type            = dword ptr  0Ch
.text:0040DFB0
.text:0040DFB0                 jmp     ds:__imp_gethostbyaddr
.text:0040DFB0 gethostbyaddr   endp
.text:0040DFB0
.text:0040DFB0 ; ---------------------------------------------------------------------------
.text:0040DFB6                 align 10h
.text:0040DFC0
.text:0040DFC0 ; =============== S U B R O U T I N E =======================================
.text:0040DFC0
.text:0040DFC0 ; Attributes: thunk
.text:0040DFC0
.text:0040DFC0 ; HRESULT __stdcall OleInitialize(LPVOID pvReserved)
.text:0040DFC0 OleInitialize   proc near               ; CODE XREF: sub_406D40+1A↑p
.text:0040DFC0
.text:0040DFC0 pvReserved      = dword ptr  4
.text:0040DFC0
.text:0040DFC0                 jmp     ds:__imp_OleInitialize
.text:0040DFC0 OleInitialize   endp
.text:0040DFC0
.text:0040DFC0 ; ---------------------------------------------------------------------------
.text:0040DFC6                 align 10h
.text:0040DFD0
.text:0040DFD0 ; =============== S U B R O U T I N E =======================================
.text:0040DFD0
.text:0040DFD0 ; Attributes: thunk
.text:0040DFD0
.text:0040DFD0 ; HRESULT __stdcall CoCreateInstance(const IID *const rclsid, LPUNKNOWN pUnkOuter, DWORD dwClsContext, const IID *const riid, LPVOID *ppv)
.text:0040DFD0 CoCreateInstance proc near              ; CODE XREF: sub_406D40+52↑p
.text:0040DFD0
.text:0040DFD0 rclsid          = dword ptr  4
.text:0040DFD0 pUnkOuter       = dword ptr  8
.text:0040DFD0 dwClsContext    = dword ptr  0Ch
.text:0040DFD0 riid            = dword ptr  10h
.text:0040DFD0 ppv             = dword ptr  14h
.text:0040DFD0
.text:0040DFD0                 jmp     ds:__imp_CoCreateInstance
.text:0040DFD0 CoCreateInstance endp
.text:0040DFD0
.text:0040DFD0 ; ---------------------------------------------------------------------------
.text:0040DFD6                 align 10h
.text:0040DFE0
.text:0040DFE0 ; =============== S U B R O U T I N E =======================================
.text:0040DFE0
.text:0040DFE0 ; Attributes: thunk
.text:0040DFE0
.text:0040DFE0 ; void __stdcall CoUninitialize()
.text:0040DFE0 CoUninitialize  proc near               ; CODE XREF: sub_406D40+14E↑p
.text:0040DFE0                                         ; sub_406D40+16D↑p
.text:0040DFE0                 jmp     ds:__imp_CoUninitialize
.text:0040DFE0 CoUninitialize  endp
.text:0040DFE0
.text:0040DFE0 ; ---------------------------------------------------------------------------
.text:0040DFE6                 align 10h
.text:0040DFF0                 add     al, 0BAh ; 'º'
.text:0040DFF2                 retf
.text:0040DFF2 ; ---------------------------------------------------------------------------
.text:0040DFF3                 db 7Eh
.text:0040DFF4                 dd 11CF2D97h, 0AA0029A2h, 52733D00h, 40FC6ED4h, 11CF2438h
.text:0040DFF4                 dd 8DBA3h, 225F136h, 40FC6ED8h, 11CF2438h, 8DBA3h, 225F136h
.text:0040DFF4                 dd 40FC6ED3h, 11CF2438h, 8DBA3h, 225F136h, 0DE86A58h, 11CF2BAAh
.text:0040DFF4                 dd 0AA0029A2h, 52733D00h, 40FC6ED6h, 11CF2438h, 8DBA3h
.text:0040DFF4                 dd 225F136h, 40FC6ED7h, 11CF2438h, 8DBA3h, 225F136h, 0DE86A56h
.text:0040DFF4                 dd 11CF2BAAh, 0AA0029A2h, 52733D00h, 0DE86A55h, 11CF2BAAh
.text:0040DFF4                 dd 0AA0029A2h, 52733D00h, 0DE86A51h, 11CF2BAAh, 0AA0029A2h
.text:0040DFF4                 dd 52733D00h, 0DE86A57h, 11CF2BAAh, 0AA0029A2h, 52733D00h
.text:0040DFF4                 dd 0DE86A52h, 11CF2BAAh, 0AA0029A2h, 52733D00h, 0DE86A54h
.text:0040DFF4                 dd 11CF2BAAh, 0AA0029A2h, 52733D00h, 0DE86A53h, 11CF2BAAh
.text:0040DFF4                 dd 0AA0029A2h, 52733D00h, 40FC6ED9h, 11CF2438h, 8DBA3h
.text:0040DFF4                 dd 225F136h, 40FC6ED5h, 11CF2438h, 8DBA3h, 225F136h, 0DE86A50h
.text:0040DFF4                 dd 11CF2BAAh, 0AA0029A2h, 52733D00h, 7DD95802h, 11CF9882h
.text:0040DFF4                 dd 0AA00A99Fh, 0C4426C00h, 7DD95801h, 11CF9882h, 0AA00A99Fh
.text:0040DFF4                 dd 0C4426C00h, 330h, 0
.text:0040E128                 dd 0C0h, 46000000h, 0BE35201h, 11CE8F91h, 0AA00E39Dh, 51B84B00h
.text:0040E128                 dd 0BE35200h, 11CE8F91h, 0AA00E39Dh, 51B84B00h, 0BE35202h
.text:0040E128                 dd 11CE8F91h, 0AA00E39Dh, 51B84B00h, 0FB8F0822h, 101B0164h
.text:0040E128                 dd 8ED84h, 13C72E2Bh, 332h, 0
.text:0040E178                 dd 0C0h, 46000000h, 79EAC9E7h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0040E178                 dd 79EAC9E3h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9E4h
.text:0040E178                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9E2h, 11CEBAF9h
.text:0040E178                 dd 0AA00828Ch, 0BA94B00h, 79EAC9E5h, 11CEBAF9h, 0AA00828Ch
.text:0040E178                 dd 0BA94B00h, 1Bh, 0
.text:0040E1D8                 dd 0C0h, 46000000h, 1Ch, 0
.text:0040E1E8                 dd 0C0h, 46000000h, 331h, 0
.text:0040E1F8                 dd 0C0h, 46000000h, 79EAC9E6h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0040E1F8                 dd 312h, 0
.text:0040E218                 dd 0C0h, 46000000h, 30Eh, 0
.text:0040E228                 dd 0C0h, 46000000h, 30Dh, 0
.text:0040E238                 dd 0C0h, 46000000h, 311h, 0
.text:0040E248                 dd 0C0h, 46000000h, 313h, 0
.text:0040E258                 dd 0C0h, 46000000h, 30Ch, 0
.text:0040E268                 dd 0C0h, 46000000h, 30Fh, 0
.text:0040E278                 dd 0C0h, 46000000h, 310h, 0
.text:0040E288                 dd 0C0h, 46000000h, 79EAC9F1h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0040E288                 dd 0FB8F0821h, 101B0164h, 8ED84h, 13C72E2Bh, 316h, 0
.text:0040E2B8                 dd 0C0h, 46000000h, 319h, 0
.text:0040E2C8                 dd 0C0h, 46000000h, 315h, 0
.text:0040E2D8                 dd 0C0h, 46000000h, 316h, 0
.text:0040E2E8                 dd 0C0h, 46000000h, 315h, 0
.text:0040E2F8                 dd 0C0h, 46000000h, 2E005h, 0
.text:0040E308                 dd 0C0h, 46000000h, 0BE35203h, 11CE8F91h, 0AA00E39Dh, 51B84B00h
.text:0040E308                 dd 79EAC9D0h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9D1h
.text:0040E308                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 17h, 0
.text:0040E348                 dd 0C0h, 46000000h, 0BE35204h, 11CE8F91h, 0AA00E39Dh, 51B84B00h
.text:0040E348                 dd 79EAC9E0h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9E1h
.text:0040E348                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 8856F961h, 11D0340Ah
.text:0040E348                 dd 0C0006BA9h, 0A205D74Fh, 0EAB22AC2h, 11CF30C1h, 0EBA7h
.text:0040E348                 dd 0BAE5BC0h, 34A715A0h, 11D06587h, 20004A92h, 4DACC7AFh
.text:0040E348                 dd 96300DA0h, 11CF2BABh, 0AA0029A2h, 52733D00h, 0D5CDD502h
.text:0040E348                 dd 101B2E9Ch, 89793h, 0AEF92C2Bh, 0F29F85E0h, 10684FF9h
.text:0040E348                 dd 891ABh, 0D9B3272Bh, 0D5CDD505h, 101B2E9Ch, 89793h, 0AEF92C2Bh
.text:0040E348                 dd 6650430Ch, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504301h
.text:0040E348                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 6650430Fh, 101ABE0Fh
.text:0040E348                 dd 0AA00BB8Bh, 0AB0C3000h, 66504310h, 101ABE0Fh, 0AA00BB8Bh
.text:0040E348                 dd 0AB0C3000h, 6650430Dh, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:0040E348                 dd 6650430Eh, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504312h
.text:0040E348                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504311h, 101ABE0Fh
.text:0040E348                 dd 0AA00BB8Bh, 0AB0C3000h, 66504313h, 101ABE0Fh, 0AA00BB8Bh
.text:0040E348                 dd 0AB0C3000h, 66504300h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:0040E348                 dd 2DE81h, 0
.text:0040E498                 dd 0C0h, 46000000h, 4 dup(0)
.text:0040E4B0                 dd 6650430Bh, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 2DE80h
.text:0040E4B0                 dd 0
.text:0040E4C8                 dd 0C0h, 46000000h, 6650430Ah, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:0040E4C8                 dd 66504306h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504302h
.text:0040E4C8                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504308h, 101ABE0Fh
.text:0040E4C8                 dd 0AA00BB8Bh, 0AB0C3000h, 66504304h, 101ABE0Fh, 0AA00BB8Bh
.text:0040E4C8                 dd 0AB0C3000h, 66504307h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:0040E4C8                 dd 66504303h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504309h
.text:0040E4C8                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504305h, 101ABE0Fh
.text:0040E4C8                 dd 0AA00BB8Bh, 0AB0C3000h, 618736E0h, 11CF3C3Dh, 0AA000C81h
.text:0040E4C8                 dd 719B3800h, 1EA4DBF0h, 11CF3C3Bh, 0AA000C81h, 719B3800h
.text:0040E4C8                 dd 0BB1A2AE1h, 11CFA4F9h, 8000208Fh, 64D02C5Fh, 0EAE1BA61h
.text:0040E4C8                 dd 11CFA4EDh, 8000208Fh, 64D02C5Fh, 0BB1A2AE2h, 11CFA4F9h
.text:0040E4C8                 dd 8000208Fh, 64D02C5Fh, 0DB01A1E3h, 11CFA42Bh, 8000208Fh
.text:0040E4C8                 dd 64D02C5Fh, 0D10F6761h, 11CF83E9h, 8000208Fh, 64D02C5Fh
.text:0040E4C8                 dd 10Fh, 0
.text:0040E5D8                 dd 0C0h, 46000000h, 125h, 0
.text:0040E5E8                 dd 0C0h, 46000000h, 3AF24290h, 11CE0C96h, 0AA00CFA0h, 0B80A6000h
.text:0040E5E8                 dd 79EAC9D3h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9D0h
.text:0040E5E8                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 0Eh, 0
.text:0040E628                 dd 0C0h, 46000000h, 0FC4801A1h, 11CF2BA9h, 0AA0029A2h
.text:0040E628                 dd 52733D00h, 79EAC9CDh, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0040E628                 dd 79EAC9C1h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9CBh
.text:0040E628                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9C0h, 11CEBAF9h
.text:0040E628                 dd 0AA00828Ch, 0BA94B00h, 2E013h, 0
.text:0040E688                 dd 0C0h, 46000000h, 2E012h, 0
.text:0040E698                 dd 0C0h, 46000000h, 1008C4A0h, 11CF7613h, 2000F19Ah, 0F4726EAFh
.text:0040E698                 dd 140h, 0
.text:0040E6B8                 dd 0C0h, 46000000h, 1, 0
.text:0040E6C8                 dd 0C0h, 46000000h, 0B196B28Fh, 101ABAB4h, 0AA009CB6h
.text:0040E6C8                 dd 71D3400h, 13Dh, 0
.text:0040E6E8                 dd 0C0h, 46000000h, 0F4F569D1h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:0040E6E8                 dd 79EAC9D1h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 0B196B286h
.text:0040E6E8                 dd 101ABAB4h, 0AA009CB6h, 71D3400h, 0B196B284h, 101ABAB4h
.text:0040E6E8                 dd 0AA009CB6h, 71D3400h, 12Ah, 0
.text:0040E738                 dd 0C0h, 46000000h, 0B722BCCAh, 101B4E68h, 0AA00BCA2h
.text:0040E738                 dd 70474000h, 22F03340h, 101B547Dh, 8658Eh, 19D12B2Bh
.text:0040E738                 dd 20405h, 0
.text:0040E768                 dd 0C0h, 46000000h, 2040Eh, 0
.text:0040E778                 dd 0C0h, 46000000h, 20406h, 0
.text:0040E788                 dd 0C0h, 46000000h, 2040Fh, 0
.text:0040E798                 dd 0C0h, 46000000h, 110h, 0
.text:0040E7A8                 dd 0C0h, 46000000h, 10Eh, 0
.text:0040E7B8                 dd 0C0h, 46000000h, 123h, 0
.text:0040E7C8                 dd 0C0h, 46000000h, 124h, 0
.text:0040E7D8                 dd 0C0h, 46000000h, 13h, 0
.text:0040E7E8                 dd 0C0h, 46000000h, 14h, 0
.text:0040E7F8                 dd 0C0h, 46000000h, 15h, 0
.text:0040E808                 dd 0C0h, 46000000h, 20400h, 0
.text:0040E818                 dd 0C0h, 46000000h, 121h, 0
.text:0040E828                 dd 0C0h, 46000000h, 122h, 0
.text:0040E838                 dd 0C0h, 46000000h, 2E011h, 0
.text:0040E848                 dd 0C0h, 46000000h, 108h, 0
.text:0040E858                 dd 0C0h, 46000000h, 0B196B285h, 101ABAB4h, 0AA009CB6h
.text:0040E858                 dd 71D3400h, 0B196B287h, 101ABAB4h, 0AA009CB6h, 71D3400h
.text:0040E858                 dd 103h, 0
.text:0040E888                 dd 0C0h, 46000000h, 2E000h, 0
.text:0040E898                 dd 0C0h, 46000000h, 106h, 0
.text:0040E8A8                 dd 0C0h, 46000000h, 79EAC9C6h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0040E8A8                 dd 107h, 0
.text:0040E8C8                 dd 0C0h, 46000000h, 102h, 0
.text:0040E8D8                 dd 0C0h, 46000000h, 104h, 0
.text:0040E8E8                 dd 0C0h, 46000000h, 0B722BCC8h, 101B4E68h, 0AA00BCA2h
.text:0040E8E8                 dd 70474000h, 0B3E7C340h, 11CEEF97h, 0AA00C99Bh, 18E6000h
.text:0040E8E8                 dd 105h, 0
.text:0040E918                 dd 0C0h, 46000000h, 13Bh, 0
.text:0040E928                 dd 0C0h, 46000000h, 139h, 0
.text:0040E938                 dd 0C0h, 46000000h, 0Dh, 0
.text:0040E948                 dd 0C0h, 46000000h, 3C374A42h, 11CFBAE4h, 0AA007DBFh, 0EE466900h
.text:0040E948                 dd 101h, 0
.text:0040E968                 dd 0C0h, 46000000h, 100h, 0
.text:0040E978                 dd 0C0h, 46000000h, 20404h, 0
.text:0040E988                 dd 0C0h, 46000000h, 1CF2B120h, 101B547Dh, 8658Eh, 19D12B2Bh
.text:0040E988                 dd 3127CA40h, 11CE446Eh, 0AA003581h, 51B84B00h, 19h, 0
.text:0040E9B8                 dd 0C0h, 46000000h, 99CAF010h, 11CF415Eh, 0AA001488h, 0F569B500h
.text:0040E9B8                 dd 89BCB740h, 101A6119h, 0DD00B7BCh, 0AF550601h, 0BEF6E002h
.text:0040E9B8                 dd 101AA874h, 0AA00BA8Bh, 0AB0C3000h, 0BEF6E003h, 101AA874h
.text:0040E9B8                 dd 0AA00BA8Bh, 0AB0C3000h, 146h, 0
.text:0040EA08                 dd 0C0h, 46000000h, 79EAC9C3h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0040EA08                 dd 79EAC9C7h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9C5h
.text:0040EA08                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9C2h, 11CEBAF9h
.text:0040EA08                 dd 0AA00828Ch, 0BA94B00h, 79EAC9C4h, 11CEBAF9h, 0AA00828Ch
.text:0040EA08                 dd 0BA94B00h, 79EAC9D2h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0040EA08                 dd 79EAC9D7h, 11CEBAFAh, 0AA00828Ch, 0BA94B00h, 11h, 0
.text:0040EA88                 dd 0C0h, 46000000h, 0E6D4D90h, 11CF6738h, 0AA000896h, 0B40D6800h
.text:0040EA88                 dd 0Ah, 0
.text:0040EAA8                 dd 0C0h, 46000000h, 2, 0
.text:0040EAB8                 dd 0C0h, 46000000h, 1Dh, 0
.text:0040EAC8                 dd 0C0h, 46000000h, 3, 0
.text:0040EAD8                 dd 0C0h, 46000000h, 16h, 0
.text:0040EAE8                 dd 0C0h, 46000000h, 0F77459A0h, 11CFBF9Ah, 0C0004EBAh
.text:0040EAE8                 dd 1608D74Fh, 0Fh, 0
.text:0040EB08                 dd 0C0h, 46000000h, 20h, 0
.text:0040EB18                 dd 0C0h, 46000000h, 0CB5BDC81h, 11CF93C1h, 8000208Fh, 64D02C5Fh
.text:0040EB18                 dd 0FC4801A3h, 11CF2BA9h, 0AA0029A2h, 52733D00h, 111h
.text:0040EB18                 dd 0
.text:0040EB48                 dd 0C0h, 46000000h, 11Eh, 0
.text:0040EB58                 dd 0C0h, 46000000h, 128h, 0
.text:0040EB68                 dd 0C0h, 46000000h, 129h, 0
.text:0040EB78                 dd 0C0h, 46000000h, 118h, 0
.text:0040EB88                 dd 0C0h, 46000000h, 0B722BCCBh, 101B4E68h, 0AA00BCA2h
.text:0040EB88                 dd 70474000h, 11Bh, 0
.text:0040EBA8                 dd 0C0h, 46000000h, 0B196B288h, 101ABAB4h, 0AA009CB6h
.text:0040EBA8                 dd 71D3400h, 0B196B289h, 101ABAB4h, 0AA009CB6h, 71D3400h
.text:0040EBA8                 dd 0B722BCC5h, 101B4E68h, 0AA00BCA2h, 70474000h, 0B722BCC7h
.text:0040EBA8                 dd 101B4E68h, 0AA00BCA2h, 70474000h, 0B722BCC6h, 101B4E68h
.text:0040EBA8                 dd 0AA00BCA2h, 70474000h, 117h, 0
.text:0040EC08                 dd 0C0h, 46000000h, 116h, 0
.text:0040EC18                 dd 0C0h, 46000000h, 113h, 0
.text:0040EC28                 dd 0C0h, 46000000h, 1C2056CCh, 101B5EF4h, 0AA00C88Bh, 293B3E00h
.text:0040EC28                 dd 119h, 0
.text:0040EC48                 dd 0C0h, 46000000h, 9C2CAD80h, 11CF3424h, 0AA0070B6h, 0D8D64C00h
.text:0040EC48                 dd 922EADA0h, 11CF3424h, 0AA0070B6h, 0D8D64C00h, 115h
.text:0040EC48                 dd 0
.text:0040EC78                 dd 0C0h, 46000000h, 11Ch, 0
.text:0040EC88                 dd 0C0h, 46000000h, 11Dh, 0
.text:0040EC98                 dd 0C0h, 46000000h, 11Fh, 0
.text:0040ECA8                 dd 0C0h, 46000000h, 112h, 0
.text:0040ECB8                 dd 0C0h, 46000000h, 0A1FAF330h, 11CEEF97h, 0AA00C99Bh
.text:0040ECB8                 dd 18E6000h, 120h, 0
.text:0040ECD8                 dd 0C0h, 46000000h, 97D001F2h, 9B11CEEFh, 0AA00C9h, 18E60h
.text:0040ECD8                 dd 0D001F200h, 11CEEF97h, 0AA00C99Bh, 18E6000h, 894AD3B0h
.text:0040ECD8                 dd 11CEEF97h, 0AA00C99Bh, 18E6000h, 114h, 0
.text:0040ED18                 dd 0C0h, 46000000h, 521A28F0h, 11CEE40Bh, 0AA00C9B2h, 37096800h
.text:0040ED18                 dd 49384070h, 11CEE40Ah, 0AA00C9B2h, 37096800h, 9, 0
.text:0040ED48                 dd 0C0h, 46000000h, 0D5F569D0h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:0040ED48                 dd 11Ah, 0
.text:0040ED68                 dd 0C0h, 46000000h, 376BD3AAh, 101B3845h, 8ED84h, 13C72E2Bh
.text:0040ED68                 dd 10Ch, 0
.text:0040ED88                 dd 0C0h, 46000000h
.text:0040ED90 dword_40ED90    dd 10Bh, 0              ; DATA XREF: sub_406D40+75↑o
.text:0040ED98                 dd 0C0h, 46000000h, 0BD1AE5E0h, 11CEA6AEh, 425037BDh, 0C100h
.text:0040ED98                 dd 79EAC9C9h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 37D84F60h
.text:0040ED98                 dd 11CE42CBh, 0AA003581h, 51B84B00h, 22F55881h, 11D0280Bh
.text:0040ED98                 dd 0A000A9A8h, 4200CC9h, 10Ah, 0
.text:0040EDE8                 dd 0C0h, 46000000h, 109h, 0
.text:0040EDF8                 dd 0C0h, 46000000h, 7FD52380h, 101B4E07h, 82DAEh, 13C72E2Bh
.text:0040EDF8                 dd 7BF80980h, 101ABF32h, 0AA00BB8Bh, 0AB0C3000h, 7BF80981h
.text:0040EDF8                 dd 101ABF32h, 0AA00BB8Bh, 0AB0C3000h, 55980BA0h, 11CF35AAh
.text:0040EDF8                 dd 0AA0071B6h, 0D8D64C00h, 0B722BCC9h, 101B4E68h, 0AA00BCA2h
.text:0040EDF8                 dd 70474000h, 0A9D758A0h, 11CF4617h, 0AA00FC95h, 0B40D6800h
.text:0040EDF8                 dd 55272A00h, 11CE42CBh, 0AA003581h, 51B84B00h, 22F55882h
.text:0040EDF8                 dd 11D0280Bh, 0A000A9A8h, 4200CC9h, 0B196B28Ah, 101ABAB4h
.text:0040EDF8                 dd 0AA009CB6h, 71D3400h, 9BFBBC02h, 101AEFF1h, 0AA00ED84h
.text:0040EDF8                 dd 71D3400h, 0B196B28Dh, 101ABAB4h, 0AA009CB6h, 71D3400h
.text:0040EDF8                 dd 1E44665h, 101B24ACh, 8ED84h, 13C72E2Bh, 0B196B28Ch
.text:0040EDF8                 dd 101ABAB4h, 0AA009CB6h, 71D3400h, 13Ah, 0
.text:0040EED8                 dd 0C0h, 46000000h, 138h, 0
.text:0040EEE8                 dd 0C0h, 46000000h, 0B196B283h, 101ABAB4h, 0AA009CB6h
.text:0040EEE8                 dd 71D3400h, 0A6BC3AC0h, 11CEDBAAh, 0AA00E39Dh, 51B84B00h
.text:0040EEE8                 dd 27h, 0
.text:0040EF18                 dd 0C0h, 46000000h, 8, 0
.text:0040EF28                 dd 0C0h, 46000000h, 0CF51ED10h, 11CF62FEh, 0A00086BFh
.text:0040EF28                 dd 364803C9h, 0F29F6BC0h, 11CE5021h, 15AAh, 3F290169h
.text:0040EF28                 dd 20D00h, 0
.text:0040EF58                 dd 0C0h, 46000000h, 20D03h, 0
.text:0040EF68                 dd 0C0h, 46000000h, 12h, 0
.text:0040EF78                 dd 0C0h, 46000000h, 4, 0
.text:0040EF88                 dd 0C0h, 46000000h, 0D5F56B60h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:0040EF88                 dd 7, 0
.text:0040EFA8                 dd 0C0h, 46000000h, 0D5F56A34h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:0040EFA8                 dd 3BD5F56Ah, 0B5101A59h, 2B000869h, 7ABF2Dh, 5, 0
.text:0040EFD8                 dd 0C0h, 46000000h, 0D5F56AFCh, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:0040EFD8                 dd 126h, 0
.text:0040EFF8                 dd 0C0h, 46000000h, 10h, 0
.text:0040F008                 dd 0C0h, 46000000h, 0C733A30h, 11CE2A1Ch, 0AA00E5ADh, 3D774400h
.text:0040F008                 dd 0F4F569D0h, 101A593Bh, 869B5h, 7ABF2D2Bh, 13Eh, 0
.text:0040F038                 dd 0C0h, 46000000h, 6D5140C1h, 11CE7436h, 0AA003480h, 0FA096000h
.text:0040F038                 dd 742B0E01h, 101B14E6h, 0AA004E91h, 0AB0C3000h, 0B196B28Bh
.text:0040F038                 dd 101ABAB4h, 0AA009CB6h, 71D3400h, 18h, 0
.text:0040F078                 dd 0C0h, 46000000h, 0Bh, 0
.text:0040F088                 dd 0C0h, 46000000h, 0Ch, 0
.text:0040F098                 dd 0C0h, 46000000h, 26h, 0
.text:0040F0A8                 dd 0C0h, 46000000h, 6, 0
.text:0040F0B8                 dd 0C0h, 46000000h, 0DF0B3D60h, 101B548Fh, 8658Eh, 19D12B2Bh
.text:0040F0B8                 dd 548793C0h, 11CF9E74h, 0A0005596h, 234903C9h, 0D5F78C80h
.text:0040F0B8                 dd 11CF5252h, 0AA00FA90h, 6E104200h, 20410h, 0
.text:0040F0F8                 dd 0C0h, 46000000h, 20403h, 0
.text:0040F108                 dd 0C0h, 46000000h, 20401h, 0
.text:0040F118                 dd 0C0h, 46000000h, 20412h, 0
.text:0040F128                 dd 0C0h, 46000000h, 20402h, 0
.text:0040F138                 dd 0C0h, 46000000h, 20411h, 0
.text:0040F148                 dd 0C0h, 46000000h, 2 dup(0)
.text:0040F158                 dd 0C0h, 46000000h, 3C374A41h, 11CFBAE4h, 0AA007DBFh, 0EE466900h
.text:0040F158                 dd 10Dh, 0
.text:0040F178                 dd 0C0h, 46000000h, 127h, 0
.text:0040F188                 dd 0C0h, 46000000h, 3AF24292h, 11CE0C96h, 0AA00CFA0h, 0B80A6000h
.text:0040F188                 dd 0EAB22AC1h, 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0D30C1661h
.text:0040F188                 dd 11D0CDAFh, 0C0003E8Ah, 6EE2C94Fh, 2DF05h, 0
.text:0040F1C8                 dd 0C0h, 46000000h, 79EAC9D8h, 11CEBAFAh, 0AA00828Ch, 0BA94B00h
.text:0040F1C8                 dd 79EAC9D6h, 11CEBAFAh, 0AA00828Ch, 0BA94B00h, 79EAC9D5h
.text:0040F1C8                 dd 11CEBAFAh, 0AA00828Ch, 0BA94B00h, 20430h, 0
.text:0040F208                 dd 0C0h, 46000000h, 2DE0Eh, 0
.text:0040F218                 dd 0C0h, 46000000h, 2DE18h, 0
.text:0040F228                 dd 0C0h, 46000000h, 2DE1Eh, 0
.text:0040F238                 dd 0C0h, 46000000h, 2DE19h, 0
.text:0040F248                 dd 0C0h, 46000000h, 2DE0Fh, 0
.text:0040F258                 dd 0C0h, 46000000h, 2DE12h, 0
.text:0040F268                 dd 0C0h, 46000000h, 2DE21h, 0
.text:0040F278                 dd 0C0h, 46000000h, 2DE01h, 0
.text:0040F288                 dd 0C0h, 46000000h, 2DE0Bh, 0
.text:0040F298                 dd 0C0h, 46000000h, 2DE0Dh, 0
.text:0040F2A8                 dd 0C0h, 46000000h, 2DE02h, 0
.text:0040F2B8                 dd 0C0h, 46000000h, 2DE1Fh, 0
.text:0040F2C8                 dd 0C0h, 46000000h, 2DE04h, 0
.text:0040F2D8                 dd 0C0h, 46000000h, 2DE0Ch, 0
.text:0040F2E8                 dd 0C0h, 46000000h, 2DE05h, 0
.text:0040F2F8                 dd 0C0h, 46000000h, 2DE1Ch, 0
.text:0040F308                 dd 0C0h, 46000000h, 2DE06h, 0
.text:0040F318                 dd 0C0h, 46000000h, 2DE13h, 0
.text:0040F328                 dd 0C0h, 46000000h, 2DE10h, 0
.text:0040F338                 dd 0C0h, 46000000h, 2DE22h, 0
.text:0040F348                 dd 0C0h, 46000000h, 2DE09h, 0
.text:0040F358                 dd 0C0h, 46000000h, 2DE23h, 0
.text:0040F368                 dd 0C0h, 46000000h, 2DE0Ah, 0
.text:0040F378                 dd 0C0h, 46000000h, 2DE1Dh, 0
.text:0040F388                 dd 0C0h, 46000000h, 2DE11h, 0
.text:0040F398                 dd 0C0h, 46000000h, 2DE15h, 0
.text:0040F3A8                 dd 0C0h, 46000000h, 2DE1Bh, 0
.text:0040F3B8                 dd 0C0h, 46000000h, 2DE16h, 0
.text:0040F3C8                 dd 0C0h, 46000000h, 2DE20h, 0
.text:0040F3D8                 dd 0C0h, 46000000h, 2DE07h, 0
.text:0040F3E8                 dd 0C0h, 46000000h, 2DE1Ah, 0
.text:0040F3F8                 dd 0C0h, 46000000h, 2DE17h, 0
.text:0040F408                 dd 0C0h, 46000000h, 2DE14h, 0
.text:0040F418                 dd 0C0h, 46000000h, 2DE03h, 0
.text:0040F428                 dd 0C0h, 46000000h, 2DE08h, 0
.text:0040F438                 dd 0C0h, 46000000h, 0B722BE00h, 101B4E68h, 0AA00BCA2h
.text:0040F438                 dd 70474000h, 0FC4801A5h, 11CF2BA9h, 0AA0029A2h, 52733D00h
.text:0040F460
.text:0040F460 ; =============== S U B R O U T I N E =======================================
.text:0040F460
.text:0040F460 ; Attributes: thunk
.text:0040F460
.text:0040F460 ; size_t __cdecl mbrtowc(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.text:0040F460 mbrtowc         proc near               ; CODE XREF: sub_4055C0+757↑p
.text:0040F460
.text:0040F460 DstCh           = dword ptr  4
.text:0040F460 SrcCh           = dword ptr  8
.text:0040F460 SizeInBytes     = dword ptr  0Ch
.text:0040F460 State           = dword ptr  10h
.text:0040F460
.text:0040F460                 jmp     ds:__imp_mbrtowc
.text:0040F460 mbrtowc         endp
.text:0040F460
.text:0040F460 ; ---------------------------------------------------------------------------
.text:0040F466                 align 10h
.text:0040F470
.text:0040F470 ; =============== S U B R O U T I N E =======================================
.text:0040F470
.text:0040F470 ; Attributes: bp-based frame
.text:0040F470
.text:0040F470 sub_40F470      proc near               ; CODE XREF: sub_401080+C2↑p
.text:0040F470                 push    ebp
.text:0040F471                 mov     ecx, offset dword_412000
.text:0040F476                 cmp     ecx, offset dword_412000
.text:0040F47C                 mov     ebp, esp
.text:0040F47E                 jnb     short loc_40F496
.text:0040F480
.text:0040F480 loc_40F480:                             ; CODE XREF: sub_40F470+24↓j
.text:0040F480                 mov     edx, [ecx+4]
.text:0040F483                 mov     eax, [ecx]
.text:0040F485                 add     ecx, 8
.text:0040F488                 add     [edx+400000h], eax
.text:0040F48E                 cmp     ecx, offset dword_412000
.text:0040F494                 jb      short loc_40F480
.text:0040F496
.text:0040F496 loc_40F496:                             ; CODE XREF: sub_40F470+E↑j
.text:0040F496                 pop     ebp
.text:0040F497                 retn
.text:0040F497 sub_40F470      endp
.text:0040F497
.text:0040F497 ; ---------------------------------------------------------------------------
.text:0040F498                 align 10h
.text:0040F4A0
.text:0040F4A0 ; =============== S U B R O U T I N E =======================================
.text:0040F4A0
.text:0040F4A0 ; Attributes: bp-based frame
.text:0040F4A0
.text:0040F4A0 sub_40F4A0      proc near               ; CODE XREF: sub_401080+16↑p
.text:0040F4A0                                         ; TopLevelExceptionFilter+D7↑p
.text:0040F4A0                 push    ebp
.text:0040F4A1                 mov     ebp, esp
.text:0040F4A3                 fninit
.text:0040F4A5                 pop     ebp
.text:0040F4A6                 retn
.text:0040F4A6 sub_40F4A0      endp
.text:0040F4A6
.text:0040F4A6 ; ---------------------------------------------------------------------------
.text:0040F4A7                 align 10h
.text:0040F4B0
.text:0040F4B0 ; =============== S U B R O U T I N E =======================================
.text:0040F4B0
.text:0040F4B0 ; Attributes: bp-based frame
.text:0040F4B0
.text:0040F4B0 ; void __cdecl sub_40F4B0()
.text:0040F4B0 sub_40F4B0      proc near               ; DATA XREF: .text:loc_40F4F9↓o
.text:0040F4B0                                         ; sub_40F540:loc_40F56E↓o
.text:0040F4B0                 push    ebp
.text:0040F4B1                 mov     ebp, esp
.text:0040F4B3                 sub     esp, 8
.text:0040F4B6                 mov     eax, off_411134
.text:0040F4BB                 mov     edx, [eax]
.text:0040F4BD                 test    edx, edx
.text:0040F4BF                 jnz     short loc_40F4C5
.text:0040F4C1
.text:0040F4C1 loc_40F4C1:                             ; CODE XREF: sub_40F4B0+2C↓j
.text:0040F4C1                 mov     esp, ebp
.text:0040F4C3                 pop     ebp
.text:0040F4C4                 retn
.text:0040F4C5 ; ---------------------------------------------------------------------------
.text:0040F4C5
.text:0040F4C5 loc_40F4C5:                             ; CODE XREF: sub_40F4B0+F↑j
.text:0040F4C5                                         ; sub_40F4B0+2A↓j
.text:0040F4C5                 call    dword ptr [eax]
.text:0040F4C7                 mov     edx, off_411134
.text:0040F4CD                 mov     ecx, [edx+4]
.text:0040F4D0                 lea     eax, [edx+4]
.text:0040F4D3                 mov     off_411134, eax
.text:0040F4D8                 test    ecx, ecx
.text:0040F4DA                 jnz     short loc_40F4C5
.text:0040F4DC                 jmp     short loc_40F4C1
.text:0040F4DC sub_40F4B0      endp
.text:0040F4DC
.text:0040F4DC ; ---------------------------------------------------------------------------
.text:0040F4DE                 align 10h
.text:0040F4E0                 push    ebp
.text:0040F4E1                 mov     ebp, esp
.text:0040F4E3                 sub     esp, 8
.text:0040F4E6                 mov     [ebp-4], ebx
.text:0040F4E9                 mov     eax, ds:dword_410640
.text:0040F4EE                 cmp     eax, 0FFFFFFFFh
.text:0040F4F1                 jz      short loc_40F51C
.text:0040F4F3
.text:0040F4F3 loc_40F4F3:                             ; CODE XREF: .text:0040F526↓j
.text:0040F4F3                                         ; .text:0040F539↓j
.text:0040F4F3                 test    eax, eax
.text:0040F4F5                 mov     ebx, eax
.text:0040F4F7                 jnz     short loc_40F510
.text:0040F4F9
.text:0040F4F9 loc_40F4F9:                             ; CODE XREF: .text:0040F51A↓j
.text:0040F4F9                 mov     dword ptr [esp], offset sub_40F4B0
.text:0040F500                 call    sub_401040
.text:0040F505                 mov     ebx, [ebp-4]
.text:0040F508                 mov     esp, ebp
.text:0040F50A                 pop     ebp
.text:0040F50B                 retn
.text:0040F50B ; ---------------------------------------------------------------------------
.text:0040F50C                 align 10h
.text:0040F510
.text:0040F510 loc_40F510:                             ; CODE XREF: .text:0040F4F7↑j
.text:0040F510                                         ; .text:0040F518↓j
.text:0040F510                 call    ds:dword_410640[ebx*4]
.text:0040F517                 dec     ebx
.text:0040F518                 jnz     short loc_40F510
.text:0040F51A                 jmp     short loc_40F4F9
.text:0040F51C ; ---------------------------------------------------------------------------
.text:0040F51C
.text:0040F51C loc_40F51C:                             ; CODE XREF: .text:0040F4F1↑j
.text:0040F51C                 mov     ecx, ds:dword_410644
.text:0040F522                 xor     eax, eax
.text:0040F524                 test    ecx, ecx
.text:0040F526                 jz      short loc_40F4F3
.text:0040F528                 mov     edx, offset dword_410640
.text:0040F52D                 lea     esi, [esi+0]
.text:0040F530
.text:0040F530 loc_40F530:                             ; CODE XREF: .text:0040F537↓j
.text:0040F530                 inc     eax
.text:0040F531                 mov     ecx, [edx+eax*4+4]
.text:0040F535                 test    ecx, ecx
.text:0040F537                 jnz     short loc_40F530
.text:0040F539                 jmp     short loc_40F4F3
.text:0040F539 ; ---------------------------------------------------------------------------
.text:0040F53B                 align 10h
.text:0040F540
.text:0040F540 ; =============== S U B R O U T I N E =======================================
.text:0040F540
.text:0040F540 ; Attributes: bp-based frame
.text:0040F540
.text:0040F540 sub_40F540      proc near               ; CODE XREF: sub_401B10+1B↑p
.text:0040F540
.text:0040F540 var_8           = dword ptr -8
.text:0040F540 var_4           = dword ptr -4
.text:0040F540
.text:0040F540                 push    ebp
.text:0040F541                 mov     ebp, esp
.text:0040F543                 sub     esp, 8
.text:0040F546                 mov     [ebp+var_4], ebx
.text:0040F549                 mov     edx, dword_411130
.text:0040F54F                 test    edx, edx
.text:0040F551                 jnz     short loc_40F57A
.text:0040F553                 mov     eax, ds:dword_410640
.text:0040F558                 mov     edx, 1
.text:0040F55D                 mov     dword_411130, edx
.text:0040F563                 cmp     eax, 0FFFFFFFFh
.text:0040F566                 jz      short loc_40F58D
.text:0040F568
.text:0040F568 loc_40F568:                             ; CODE XREF: sub_40F540+57↓j
.text:0040F568                                         ; sub_40F540+69↓j
.text:0040F568                 test    eax, eax
.text:0040F56A                 mov     ebx, eax
.text:0040F56C                 jnz     short loc_40F581
.text:0040F56E
.text:0040F56E loc_40F56E:                             ; CODE XREF: sub_40F540+4B↓j
.text:0040F56E                 mov     [esp+8+var_8], offset sub_40F4B0 ; void (__cdecl *)()
.text:0040F575                 call    sub_401040
.text:0040F57A
.text:0040F57A loc_40F57A:                             ; CODE XREF: sub_40F540+11↑j
.text:0040F57A                 mov     ebx, [ebp+var_4]
.text:0040F57D                 mov     esp, ebp
.text:0040F57F                 pop     ebp
.text:0040F580                 retn
.text:0040F581 ; ---------------------------------------------------------------------------
.text:0040F581
.text:0040F581 loc_40F581:                             ; CODE XREF: sub_40F540+2C↑j
.text:0040F581                                         ; sub_40F540+49↓j
.text:0040F581                 call    ds:dword_410640[ebx*4]
.text:0040F588                 dec     ebx
.text:0040F589                 jnz     short loc_40F581
.text:0040F58B                 jmp     short loc_40F56E
.text:0040F58D ; ---------------------------------------------------------------------------
.text:0040F58D
.text:0040F58D loc_40F58D:                             ; CODE XREF: sub_40F540+26↑j
.text:0040F58D                 mov     ecx, ds:dword_410644
.text:0040F593                 xor     eax, eax
.text:0040F595                 test    ecx, ecx
.text:0040F597                 jz      short loc_40F568
.text:0040F599                 mov     edx, offset dword_410640
.text:0040F59E                 mov     esi, esi
.text:0040F5A0
.text:0040F5A0 loc_40F5A0:                             ; CODE XREF: sub_40F540+67↓j
.text:0040F5A0                 inc     eax
.text:0040F5A1                 mov     ebx, [edx+eax*4+4]
.text:0040F5A5                 test    ebx, ebx
.text:0040F5A7                 jnz     short loc_40F5A0
.text:0040F5A9                 jmp     short loc_40F568
.text:0040F5A9 sub_40F540      endp
.text:0040F5A9
.text:0040F5A9 ; ---------------------------------------------------------------------------
.text:0040F5AB                 align 10h
.text:0040F5B0
.text:0040F5B0 ; =============== S U B R O U T I N E =======================================
.text:0040F5B0
.text:0040F5B0 ; Attributes: info_from_lumina
.text:0040F5B0
.text:0040F5B0 ; void *__cdecl _alloca(size_t Size)
.text:0040F5B0 __alloca        proc near               ; CODE XREF: sub_401B10+16↑p
.text:0040F5B0                 push    ecx
.text:0040F5B1                 mov     ecx, esp
.text:0040F5B3                 add     ecx, 8
.text:0040F5B6
.text:0040F5B6 loc_40F5B6:                             ; CODE XREF: __alloca+1B↓j
.text:0040F5B6                 cmp     eax, 1000h
.text:0040F5BB                 jb      short loc_40F5CD
.text:0040F5BD                 sub     ecx, 1000h
.text:0040F5C3                 or      dword ptr [ecx], 0
.text:0040F5C6                 sub     eax, 1000h
.text:0040F5CB                 jmp     short loc_40F5B6
.text:0040F5CD ; ---------------------------------------------------------------------------
.text:0040F5CD
.text:0040F5CD loc_40F5CD:                             ; CODE XREF: __alloca+B↑j
.text:0040F5CD                 sub     ecx, eax
.text:0040F5CF                 or      dword ptr [ecx], 0
.text:0040F5D2                 mov     eax, esp
.text:0040F5D4                 mov     esp, ecx
.text:0040F5D6                 mov     ecx, [eax]
.text:0040F5D8                 mov     eax, [eax+4]
.text:0040F5DB                 jmp     eax
.text:0040F5DB __alloca        endp
.text:0040F5DB
.text:0040F5DB ; ---------------------------------------------------------------------------
.text:0040F5DD                 align 10h
.text:0040F5E0
.text:0040F5E0 ; =============== S U B R O U T I N E =======================================
.text:0040F5E0
.text:0040F5E0 ; Attributes: bp-based frame
.text:0040F5E0
.text:0040F5E0 sub_40F5E0      proc near               ; CODE XREF: sub_405470+38↑p
.text:0040F5E0                                         ; sub_405470+88↑p ...
.text:0040F5E0
.text:0040F5E0 var_3C          = dword ptr -3Ch
.text:0040F5E0 var_34          = dword ptr -34h
.text:0040F5E0 var_30          = dword ptr -30h
.text:0040F5E0 var_2C          = dword ptr -2Ch
.text:0040F5E0 var_28          = dword ptr -28h
.text:0040F5E0 var_24          = dword ptr -24h
.text:0040F5E0 var_1C          = dword ptr -1Ch
.text:0040F5E0 var_18          = dword ptr -18h
.text:0040F5E0 var_14          = dword ptr -14h
.text:0040F5E0 arg_0           = dword ptr  8
.text:0040F5E0 arg_4           = dword ptr  0Ch
.text:0040F5E0 arg_8           = dword ptr  10h
.text:0040F5E0 arg_C           = dword ptr  14h
.text:0040F5E0
.text:0040F5E0                 push    ebp
.text:0040F5E1                 mov     ebp, esp
.text:0040F5E3                 push    edi
.text:0040F5E4                 push    esi
.text:0040F5E5                 push    ebx
.text:0040F5E6                 sub     esp, 34h
.text:0040F5E9                 mov     ebx, [ebp+arg_4]
.text:0040F5EC                 mov     [ebp+var_28], 0
.text:0040F5F3                 mov     ecx, [ebp+arg_0]
.text:0040F5F6                 mov     eax, [ebp+arg_8]
.text:0040F5F9                 mov     [ebp+var_24], 0
.text:0040F600                 test    ebx, ebx
.text:0040F602                 mov     edx, [ebp+arg_C]
.text:0040F605                 mov     [ebp+var_1C], 0
.text:0040F60C                 js      loc_40F784
.text:0040F612
.text:0040F612 loc_40F612:                             ; CODE XREF: sub_40F5E0+1B2↓j
.text:0040F612                 test    edx, edx
.text:0040F614                 js      loc_40F778
.text:0040F61A
.text:0040F61A loc_40F61A:                             ; CODE XREF: sub_40F5E0+19F↓j
.text:0040F61A                 mov     [ebp+var_2C], edx
.text:0040F61D                 test    edx, edx
.text:0040F61F                 mov     esi, eax
.text:0040F621                 mov     [ebp+var_30], ecx
.text:0040F624                 mov     edi, ebx
.text:0040F626                 jnz     short loc_40F691
.text:0040F628                 cmp     eax, ebx
.text:0040F62A                 jbe     short loc_40F674
.text:0040F62C                 mov     eax, ecx
.text:0040F62E                 mov     edx, ebx
.text:0040F630                 div     esi
.text:0040F632
.text:0040F632 loc_40F632:                             ; CODE XREF: sub_40F5E0+AF↓j
.text:0040F632                 mov     [ebp+var_30], edx
.text:0040F635                 lea     ecx, [ebp+var_18]
.text:0040F638                 test    ecx, ecx
.text:0040F63A                 jz      short loc_40F655
.text:0040F63C                 mov     [ebp+var_24], 0
.text:0040F643
.text:0040F643 loc_40F643:                             ; CODE XREF: sub_40F5E0+FE↓j
.text:0040F643                 mov     eax, [ebp+var_30]
.text:0040F646                 mov     [ebp+var_28], eax
.text:0040F649                 mov     edx, [ebp+var_28]
.text:0040F64C                 mov     ecx, [ebp+var_24]
.text:0040F64F                 mov     [ebp+var_18], edx
.text:0040F652                 mov     [ebp+var_14], ecx
.text:0040F655
.text:0040F655 loc_40F655:                             ; CODE XREF: sub_40F5E0+5A↑j
.text:0040F655                                         ; sub_40F5E0+C8↓j ...
.text:0040F655                 mov     eax, [ebp+var_1C]
.text:0040F658                 test    eax, eax
.text:0040F65A                 jz      short loc_40F666
.text:0040F65C                 neg     [ebp+var_18]
.text:0040F65F                 adc     [ebp+var_14], 0
.text:0040F663                 neg     [ebp+var_14]
.text:0040F666
.text:0040F666 loc_40F666:                             ; CODE XREF: sub_40F5E0+7A↑j
.text:0040F666                 mov     eax, [ebp+var_18]
.text:0040F669                 mov     edx, [ebp+var_14]
.text:0040F66C                 add     esp, 34h
.text:0040F66F                 pop     ebx
.text:0040F670                 pop     esi
.text:0040F671                 pop     edi
.text:0040F672                 pop     ebp
.text:0040F673                 retn
.text:0040F674 ; ---------------------------------------------------------------------------
.text:0040F674
.text:0040F674 loc_40F674:                             ; CODE XREF: sub_40F5E0+4A↑j
.text:0040F674                 test    eax, eax
.text:0040F676                 jnz     short loc_40F683
.text:0040F678                 mov     eax, 1
.text:0040F67D                 xor     edx, edx
.text:0040F67F                 div     esi
.text:0040F681                 mov     esi, eax
.text:0040F683
.text:0040F683 loc_40F683:                             ; CODE XREF: sub_40F5E0+96↑j
.text:0040F683                 mov     eax, edi
.text:0040F685                 mov     edx, [ebp+var_2C]
.text:0040F688                 div     esi
.text:0040F68A                 mov     eax, [ebp+var_30]
.text:0040F68D                 div     esi
.text:0040F68F                 jmp     short loc_40F632
.text:0040F691 ; ---------------------------------------------------------------------------
.text:0040F691
.text:0040F691 loc_40F691:                             ; CODE XREF: sub_40F5E0+46↑j
.text:0040F691                 cmp     [ebp+var_2C], ebx
.text:0040F694                 jbe     short loc_40F6B0
.text:0040F696                 mov     [ebp+var_28], ecx
.text:0040F699
.text:0040F699 loc_40F699:                             ; CODE XREF: sub_40F5E0+17E↓j
.text:0040F699                 mov     [ebp+var_24], edi
.text:0040F69C                 mov     eax, [ebp+var_28]
.text:0040F69F                 mov     edx, [ebp+var_24]
.text:0040F6A2                 mov     [ebp+var_18], eax
.text:0040F6A5                 mov     [ebp+var_14], edx
.text:0040F6A8                 jmp     short loc_40F655
.text:0040F6A8 ; ---------------------------------------------------------------------------
.text:0040F6AA                 align 10h
.text:0040F6B0
.text:0040F6B0 loc_40F6B0:                             ; CODE XREF: sub_40F5E0+B4↑j
.text:0040F6B0                 bsr     eax, [ebp+var_2C]
.text:0040F6B4                 mov     ebx, eax
.text:0040F6B6                 xor     ebx, 1Fh
.text:0040F6B9                 jnz     short loc_40F6E3
.text:0040F6BB                 cmp     edi, [ebp+var_2C]
.text:0040F6BE                 ja      short loc_40F6C5
.text:0040F6C0                 cmp     [ebp+var_30], esi
.text:0040F6C3                 jb      short loc_40F6D0
.text:0040F6C5
.text:0040F6C5 loc_40F6C5:                             ; CODE XREF: sub_40F5E0+DE↑j
.text:0040F6C5                 mov     edx, [ebp+var_30]
.text:0040F6C8                 sub     edx, esi
.text:0040F6CA                 sbb     edi, [ebp+var_2C]
.text:0040F6CD                 mov     [ebp+var_30], edx
.text:0040F6D0
.text:0040F6D0 loc_40F6D0:                             ; CODE XREF: sub_40F5E0+E3↑j
.text:0040F6D0                 lea     ecx, [ebp+var_18]
.text:0040F6D3                 test    ecx, ecx
.text:0040F6D5                 jz      loc_40F655
.text:0040F6DB                 mov     [ebp+var_24], edi
.text:0040F6DE                 jmp     loc_40F643
.text:0040F6E3 ; ---------------------------------------------------------------------------
.text:0040F6E3
.text:0040F6E3 loc_40F6E3:                             ; CODE XREF: sub_40F5E0+D9↑j
.text:0040F6E3                 mov     edx, [ebp+var_2C]
.text:0040F6E6                 mov     eax, 20h ; ' '
.text:0040F6EB                 mov     cl, bl
.text:0040F6ED                 sub     eax, ebx
.text:0040F6EF                 mov     [ebp+var_34], eax
.text:0040F6F2                 shl     edx, cl
.text:0040F6F4                 mov     eax, esi
.text:0040F6F6                 movzx   ecx, byte ptr [ebp+var_34]
.text:0040F6FA                 shr     eax, cl
.text:0040F6FC                 mov     cl, bl
.text:0040F6FE                 shl     esi, cl
.text:0040F700                 or      edx, eax
.text:0040F702                 mov     eax, [ebp+var_30]
.text:0040F705                 movzx   ecx, byte ptr [ebp+var_34]
.text:0040F709                 mov     [ebp+var_2C], edx
.text:0040F70C                 mov     edx, edi
.text:0040F70E                 shr     edx, cl
.text:0040F710                 mov     cl, bl
.text:0040F712                 shl     edi, cl
.text:0040F714                 movzx   ecx, byte ptr [ebp+var_34]
.text:0040F718                 shr     eax, cl
.text:0040F71A                 or      edi, eax
.text:0040F71C                 mov     eax, edi
.text:0040F71E                 mov     cl, bl
.text:0040F720                 div     [ebp+var_2C]
.text:0040F723                 shl     [ebp+var_30], cl
.text:0040F726                 mov     edi, edx
.text:0040F728                 mul     esi
.text:0040F72A                 mov     [ebp+var_3C], eax
.text:0040F72D                 cmp     edx, edi
.text:0040F72F                 ja      short loc_40F76B
.text:0040F731                 cmp     edx, edi
.text:0040F733                 jz      short loc_40F763
.text:0040F735
.text:0040F735 loc_40F735:                             ; CODE XREF: sub_40F5E0+189↓j
.text:0040F735                                         ; sub_40F5E0+196↓j
.text:0040F735                 lea     eax, [ebp+var_18]
.text:0040F738                 test    eax, eax
.text:0040F73A                 jz      loc_40F655
.text:0040F740                 movzx   ecx, byte ptr [ebp+var_34]
.text:0040F744                 mov     eax, [ebp+var_30]
.text:0040F747                 sub     eax, [ebp+var_3C]
.text:0040F74A                 sbb     edi, edx
.text:0040F74C                 mov     [ebp+var_30], eax
.text:0040F74F                 mov     edx, edi
.text:0040F751                 shl     edx, cl
.text:0040F753                 mov     cl, bl
.text:0040F755                 shr     eax, cl
.text:0040F757                 or      edx, eax
.text:0040F759                 mov     [ebp+var_28], edx
.text:0040F75C                 shr     edi, cl
.text:0040F75E                 jmp     loc_40F699
.text:0040F763 ; ---------------------------------------------------------------------------
.text:0040F763
.text:0040F763 loc_40F763:                             ; CODE XREF: sub_40F5E0+153↑j
.text:0040F763                 mov     eax, [ebp+var_30]
.text:0040F766                 cmp     [ebp+var_3C], eax
.text:0040F769                 jbe     short loc_40F735
.text:0040F76B
.text:0040F76B loc_40F76B:                             ; CODE XREF: sub_40F5E0+14F↑j
.text:0040F76B                 mov     ecx, [ebp+var_3C]
.text:0040F76E                 sub     ecx, esi
.text:0040F770                 sbb     edx, [ebp+var_2C]
.text:0040F773                 mov     [ebp+var_3C], ecx
.text:0040F776                 jmp     short loc_40F735
.text:0040F778 ; ---------------------------------------------------------------------------
.text:0040F778
.text:0040F778 loc_40F778:                             ; CODE XREF: sub_40F5E0+34↑j
.text:0040F778                 neg     eax
.text:0040F77A                 adc     edx, 0
.text:0040F77D                 neg     edx
.text:0040F77F                 jmp     loc_40F61A
.text:0040F784 ; ---------------------------------------------------------------------------
.text:0040F784
.text:0040F784 loc_40F784:                             ; CODE XREF: sub_40F5E0+2C↑j
.text:0040F784                 mov     [ebp+var_1C], 0FFFFFFFFh
.text:0040F78B                 neg     ecx
.text:0040F78D                 adc     ebx, 0
.text:0040F790                 neg     ebx
.text:0040F792                 jmp     loc_40F612
.text:0040F792 sub_40F5E0      endp
.text:0040F792
.text:0040F792 ; ---------------------------------------------------------------------------
.text:0040F797                 align 10h
.text:0040F7A0
.text:0040F7A0 ; =============== S U B R O U T I N E =======================================
.text:0040F7A0
.text:0040F7A0 ; Attributes: bp-based frame
.text:0040F7A0
.text:0040F7A0 sub_40F7A0      proc near               ; CODE XREF: sub_405470+58↑p
.text:0040F7A0                                         ; sub_405470+AA↑p
.text:0040F7A0
.text:0040F7A0 var_2C          = dword ptr -2Ch
.text:0040F7A0 var_28          = dword ptr -28h
.text:0040F7A0 var_24          = dword ptr -24h
.text:0040F7A0 var_20          = dword ptr -20h
.text:0040F7A0 var_1C          = dword ptr -1Ch
.text:0040F7A0 var_14          = dword ptr -14h
.text:0040F7A0 arg_0           = dword ptr  8
.text:0040F7A0 arg_4           = dword ptr  0Ch
.text:0040F7A0 arg_8           = dword ptr  10h
.text:0040F7A0 arg_C           = dword ptr  14h
.text:0040F7A0
.text:0040F7A0                 push    ebp
.text:0040F7A1                 mov     ebp, esp
.text:0040F7A3                 push    edi
.text:0040F7A4                 push    esi
.text:0040F7A5                 push    ebx
.text:0040F7A6                 sub     esp, 24h
.text:0040F7A9                 mov     ebx, [ebp+arg_4]
.text:0040F7AC                 mov     [ebp+var_20], 0
.text:0040F7B3                 mov     ecx, [ebp+arg_0]
.text:0040F7B6                 mov     eax, [ebp+arg_8]
.text:0040F7B9                 mov     [ebp+var_1C], 0
.text:0040F7C0                 test    ebx, ebx
.text:0040F7C2                 mov     edx, [ebp+arg_C]
.text:0040F7C5                 mov     [ebp+var_14], 0
.text:0040F7CC                 js      loc_40F8E0
.text:0040F7D2
.text:0040F7D2 loc_40F7D2:                             ; CODE XREF: sub_40F7A0+14E↓j
.text:0040F7D2                 test    edx, edx
.text:0040F7D4                 js      loc_40F8D0
.text:0040F7DA
.text:0040F7DA loc_40F7DA:                             ; CODE XREF: sub_40F7A0+13A↓j
.text:0040F7DA                 mov     [ebp+var_24], ecx
.text:0040F7DD                 test    edx, edx
.text:0040F7DF                 mov     esi, eax
.text:0040F7E1                 jnz     short loc_40F836
.text:0040F7E3                 cmp     eax, ebx
.text:0040F7E5                 jbe     short loc_40F814
.text:0040F7E7                 mov     eax, ecx
.text:0040F7E9                 mov     edx, ebx
.text:0040F7EB                 div     esi
.text:0040F7ED                 mov     edi, eax
.text:0040F7EF                 nop
.text:0040F7F0
.text:0040F7F0 loc_40F7F0:                             ; CODE XREF: sub_40F7A0+9C↓j
.text:0040F7F0                                         ; sub_40F7A0+B4↓j ...
.text:0040F7F0                 xor     ecx, ecx
.text:0040F7F2
.text:0040F7F2 loc_40F7F2:                             ; CODE XREF: sub_40F7A0+94↓j
.text:0040F7F2                 mov     [ebp+var_1C], ecx
.text:0040F7F5                 mov     ecx, [ebp+var_14]
.text:0040F7F8                 mov     [ebp+var_20], edi
.text:0040F7FB                 mov     eax, [ebp+var_20]
.text:0040F7FE                 mov     edx, [ebp+var_1C]
.text:0040F801                 test    ecx, ecx
.text:0040F803                 jz      short loc_40F80C
.text:0040F805                 neg     eax
.text:0040F807                 adc     edx, 0
.text:0040F80A                 neg     edx
.text:0040F80C
.text:0040F80C loc_40F80C:                             ; CODE XREF: sub_40F7A0+63↑j
.text:0040F80C                 add     esp, 24h
.text:0040F80F                 pop     ebx
.text:0040F810                 pop     esi
.text:0040F811                 pop     edi
.text:0040F812                 pop     ebp
.text:0040F813                 retn
.text:0040F814 ; ---------------------------------------------------------------------------
.text:0040F814
.text:0040F814 loc_40F814:                             ; CODE XREF: sub_40F7A0+45↑j
.text:0040F814                 test    eax, eax
.text:0040F816                 jnz     short loc_40F825
.text:0040F818                 mov     eax, 1
.text:0040F81D                 xor     ecx, ecx
.text:0040F81F                 xor     edx, edx
.text:0040F821                 div     ecx
.text:0040F823                 mov     esi, eax
.text:0040F825
.text:0040F825 loc_40F825:                             ; CODE XREF: sub_40F7A0+76↑j
.text:0040F825                 mov     eax, ebx
.text:0040F827                 xor     edx, edx
.text:0040F829                 div     esi
.text:0040F82B                 mov     ecx, eax
.text:0040F82D                 mov     eax, [ebp+var_24]
.text:0040F830                 div     esi
.text:0040F832                 mov     edi, eax
.text:0040F834                 jmp     short loc_40F7F2
.text:0040F836 ; ---------------------------------------------------------------------------
.text:0040F836
.text:0040F836 loc_40F836:                             ; CODE XREF: sub_40F7A0+41↑j
.text:0040F836                 cmp     edx, ebx
.text:0040F838                 jbe     short loc_40F840
.text:0040F83A                 xor     edi, edi
.text:0040F83C                 jmp     short loc_40F7F0
.text:0040F83C ; ---------------------------------------------------------------------------
.text:0040F83E                 align 10h
.text:0040F840
.text:0040F840 loc_40F840:                             ; CODE XREF: sub_40F7A0+98↑j
.text:0040F840                 bsr     eax, edx
.text:0040F843                 xor     eax, 1Fh
.text:0040F846                 mov     [ebp+var_28], eax
.text:0040F849                 jnz     short loc_40F860
.text:0040F84B                 cmp     ebx, edx
.text:0040F84D                 ja      short loc_40F856
.text:0040F84F                 xor     edi, edi
.text:0040F851                 cmp     [ebp+var_24], esi
.text:0040F854                 jb      short loc_40F7F0
.text:0040F856
.text:0040F856 loc_40F856:                             ; CODE XREF: sub_40F7A0+AD↑j
.text:0040F856                 mov     edi, 1
.text:0040F85B                 jmp     short loc_40F7F0
.text:0040F85B ; ---------------------------------------------------------------------------
.text:0040F85D                 align 10h
.text:0040F860
.text:0040F860 loc_40F860:                             ; CODE XREF: sub_40F7A0+A9↑j
.text:0040F860                 mov     eax, [ebp+var_28]
.text:0040F863                 mov     ecx, 20h ; ' '
.text:0040F868                 sub     ecx, eax
.text:0040F86A                 mov     [ebp+var_2C], ecx
.text:0040F86D                 mov     eax, esi
.text:0040F86F                 movzx   ecx, byte ptr [ebp+var_28]
.text:0040F873                 shl     edx, cl
.text:0040F875                 mov     edi, edx
.text:0040F877                 movzx   ecx, byte ptr [ebp+var_2C]
.text:0040F87B                 mov     edx, ebx
.text:0040F87D                 shr     eax, cl
.text:0040F87F                 movzx   ecx, byte ptr [ebp+var_28]
.text:0040F883                 or      edi, eax
.text:0040F885                 mov     eax, [ebp+var_24]
.text:0040F888                 shl     esi, cl
.text:0040F88A                 movzx   ecx, byte ptr [ebp+var_2C]
.text:0040F88E                 shr     edx, cl
.text:0040F890                 movzx   ecx, byte ptr [ebp+var_28]
.text:0040F894                 shl     ebx, cl
.text:0040F896                 movzx   ecx, byte ptr [ebp+var_2C]
.text:0040F89A                 shr     eax, cl
.text:0040F89C                 or      ebx, eax
.text:0040F89E                 movzx   ecx, byte ptr [ebp+var_28]
.text:0040F8A2                 mov     eax, ebx
.text:0040F8A4                 div     edi
.text:0040F8A6                 mov     ebx, edx
.text:0040F8A8                 mov     edi, eax
.text:0040F8AA                 shl     [ebp+var_24], cl
.text:0040F8AD                 mul     esi
.text:0040F8AF                 cmp     edx, ebx
.text:0040F8B1                 ja      short loc_40F8C4
.text:0040F8B3                 cmp     edx, ebx
.text:0040F8B5                 jnz     loc_40F7F0
.text:0040F8BB                 cmp     eax, [ebp+var_24]
.text:0040F8BE                 jbe     loc_40F7F0
.text:0040F8C4
.text:0040F8C4 loc_40F8C4:                             ; CODE XREF: sub_40F7A0+111↑j
.text:0040F8C4                 dec     edi
.text:0040F8C5                 jmp     loc_40F7F0
.text:0040F8C5 ; ---------------------------------------------------------------------------
.text:0040F8CA                 align 10h
.text:0040F8D0
.text:0040F8D0 loc_40F8D0:                             ; CODE XREF: sub_40F7A0+34↑j
.text:0040F8D0                 not     [ebp+var_14]
.text:0040F8D3                 neg     eax
.text:0040F8D5                 adc     edx, 0
.text:0040F8D8                 neg     edx
.text:0040F8DA                 jmp     loc_40F7DA
.text:0040F8DA ; ---------------------------------------------------------------------------
.text:0040F8DF                 align 10h
.text:0040F8E0
.text:0040F8E0 loc_40F8E0:                             ; CODE XREF: sub_40F7A0+2C↑j
.text:0040F8E0                 mov     [ebp+var_14], 0FFFFFFFFh
.text:0040F8E7                 neg     ecx
.text:0040F8E9                 adc     ebx, 0
.text:0040F8EC                 neg     ebx
.text:0040F8EE                 jmp     loc_40F7D2
.text:0040F8EE sub_40F7A0      endp
.text:0040F8EE
.text:0040F8EE ; ---------------------------------------------------------------------------
.text:0040F8F3                 align 10h
.text:0040F900
.text:0040F900 ; =============== S U B R O U T I N E =======================================
.text:0040F900
.text:0040F900 ; Attributes: bp-based frame
.text:0040F900
.text:0040F900 sub_40F900      proc near               ; CODE XREF: sub_408110+17E↑p
.text:0040F900                                         ; sub_408110+1F5↑p ...
.text:0040F900
.text:0040F900 var_24          = dword ptr -24h
.text:0040F900 var_20          = dword ptr -20h
.text:0040F900 var_1C          = dword ptr -1Ch
.text:0040F900 var_18          = dword ptr -18h
.text:0040F900 var_14          = dword ptr -14h
.text:0040F900 var_C           = dword ptr -0Ch
.text:0040F900 var_8           = dword ptr -8
.text:0040F900 var_4           = dword ptr -4
.text:0040F900 arg_0           = dword ptr  8
.text:0040F900 arg_4           = dword ptr  0Ch
.text:0040F900 arg_8           = dword ptr  10h
.text:0040F900 arg_C           = dword ptr  14h
.text:0040F900
.text:0040F900                 push    ebp
.text:0040F901                 mov     ebp, esp
.text:0040F903                 sub     esp, 28h
.text:0040F906                 mov     [ebp+var_C], ebx
.text:0040F909                 mov     edx, [ebp+arg_C]
.text:0040F90C                 mov     ecx, [ebp+arg_0]
.text:0040F90F                 mov     [ebp+var_8], esi
.text:0040F912                 mov     eax, [ebp+arg_8]
.text:0040F915                 test    edx, edx
.text:0040F917                 mov     [ebp+var_4], edi
.text:0040F91A                 mov     ebx, [ebp+arg_4]
.text:0040F91D                 mov     esi, eax
.text:0040F91F                 mov     [ebp+var_18], 0
.text:0040F926                 mov     [ebp+var_14], 0
.text:0040F92D                 mov     [ebp+var_1C], ecx
.text:0040F930                 jnz     short loc_40F982
.text:0040F932                 cmp     eax, ebx
.text:0040F934                 jbe     short loc_40F960
.text:0040F936                 mov     eax, ecx
.text:0040F938                 mov     edx, ebx
.text:0040F93A                 div     esi
.text:0040F93C                 mov     edi, eax
.text:0040F93E                 mov     esi, esi
.text:0040F940
.text:0040F940 loc_40F940:                             ; CODE XREF: sub_40F900+88↓j
.text:0040F940                                         ; sub_40F900+A4↓j ...
.text:0040F940                 xor     ecx, ecx
.text:0040F942
.text:0040F942 loc_40F942:                             ; CODE XREF: sub_40F900+80↓j
.text:0040F942                 mov     [ebp+var_18], edi
.text:0040F945                 mov     ebx, [ebp+var_C]
.text:0040F948                 mov     eax, [ebp+var_18]
.text:0040F94B                 mov     [ebp+var_14], ecx
.text:0040F94E                 mov     esi, [ebp+var_8]
.text:0040F951                 mov     edx, [ebp+var_14]
.text:0040F954                 mov     edi, [ebp+var_4]
.text:0040F957                 mov     esp, ebp
.text:0040F959                 pop     ebp
.text:0040F95A                 retn
.text:0040F95A ; ---------------------------------------------------------------------------
.text:0040F95B                 align 10h
.text:0040F960
.text:0040F960 loc_40F960:                             ; CODE XREF: sub_40F900+34↑j
.text:0040F960                 test    eax, eax
.text:0040F962                 jnz     short loc_40F971
.text:0040F964                 mov     eax, 1
.text:0040F969                 xor     ecx, ecx
.text:0040F96B                 xor     edx, edx
.text:0040F96D                 div     ecx
.text:0040F96F                 mov     esi, eax
.text:0040F971
.text:0040F971 loc_40F971:                             ; CODE XREF: sub_40F900+62↑j
.text:0040F971                 mov     eax, ebx
.text:0040F973                 xor     edx, edx
.text:0040F975                 div     esi
.text:0040F977                 mov     ecx, eax
.text:0040F979                 mov     eax, [ebp+var_1C]
.text:0040F97C                 div     esi
.text:0040F97E                 mov     edi, eax
.text:0040F980                 jmp     short loc_40F942
.text:0040F982 ; ---------------------------------------------------------------------------
.text:0040F982
.text:0040F982 loc_40F982:                             ; CODE XREF: sub_40F900+30↑j
.text:0040F982                 cmp     edx, ebx
.text:0040F984                 jbe     short loc_40F990
.text:0040F986                 xor     edi, edi
.text:0040F988                 jmp     short loc_40F940
.text:0040F988 ; ---------------------------------------------------------------------------
.text:0040F98A                 align 10h
.text:0040F990
.text:0040F990 loc_40F990:                             ; CODE XREF: sub_40F900+84↑j
.text:0040F990                 bsr     eax, edx
.text:0040F993                 xor     eax, 1Fh
.text:0040F996                 mov     [ebp+var_20], eax
.text:0040F999                 jnz     short loc_40F9B0
.text:0040F99B                 cmp     ebx, edx
.text:0040F99D                 ja      short loc_40F9A6
.text:0040F99F                 xor     edi, edi
.text:0040F9A1                 cmp     [ebp+var_1C], esi
.text:0040F9A4                 jb      short loc_40F940
.text:0040F9A6
.text:0040F9A6 loc_40F9A6:                             ; CODE XREF: sub_40F900+9D↑j
.text:0040F9A6                 mov     edi, 1
.text:0040F9AB                 jmp     short loc_40F940
.text:0040F9AB ; ---------------------------------------------------------------------------
.text:0040F9AD                 align 10h
.text:0040F9B0
.text:0040F9B0 loc_40F9B0:                             ; CODE XREF: sub_40F900+99↑j
.text:0040F9B0                 mov     eax, [ebp+var_20]
.text:0040F9B3                 mov     ecx, 20h ; ' '
.text:0040F9B8                 sub     ecx, eax
.text:0040F9BA                 mov     [ebp+var_24], ecx
.text:0040F9BD                 mov     eax, esi
.text:0040F9BF                 movzx   ecx, byte ptr [ebp+var_20]
.text:0040F9C3                 shl     edx, cl
.text:0040F9C5                 mov     edi, edx
.text:0040F9C7                 movzx   ecx, byte ptr [ebp+var_24]
.text:0040F9CB                 mov     edx, ebx
.text:0040F9CD                 shr     eax, cl
.text:0040F9CF                 movzx   ecx, byte ptr [ebp+var_20]
.text:0040F9D3                 or      edi, eax
.text:0040F9D5                 mov     eax, [ebp+var_1C]
.text:0040F9D8                 shl     esi, cl
.text:0040F9DA                 movzx   ecx, byte ptr [ebp+var_24]
.text:0040F9DE                 shr     edx, cl
.text:0040F9E0                 movzx   ecx, byte ptr [ebp+var_20]
.text:0040F9E4                 shl     ebx, cl
.text:0040F9E6                 movzx   ecx, byte ptr [ebp+var_24]
.text:0040F9EA                 shr     eax, cl
.text:0040F9EC                 or      ebx, eax
.text:0040F9EE                 movzx   ecx, byte ptr [ebp+var_20]
.text:0040F9F2                 mov     eax, ebx
.text:0040F9F4                 div     edi
.text:0040F9F6                 mov     ebx, edx
.text:0040F9F8                 mov     edi, eax
.text:0040F9FA                 shl     [ebp+var_1C], cl
.text:0040F9FD                 mul     esi
.text:0040F9FF                 cmp     edx, ebx
.text:0040FA01                 ja      short loc_40FA14
.text:0040FA03                 cmp     edx, ebx
.text:0040FA05                 jnz     loc_40F940
.text:0040FA0B                 cmp     eax, [ebp+var_1C]
.text:0040FA0E                 jbe     loc_40F940
.text:0040FA14
.text:0040FA14 loc_40FA14:                             ; CODE XREF: sub_40F900+101↑j
.text:0040FA14                 dec     edi
.text:0040FA15                 jmp     loc_40F940
.text:0040FA15 sub_40F900      endp
.text:0040FA15
.text:0040FA15 ; ---------------------------------------------------------------------------
.text:0040FA1A                 align 10h
.text:0040FA20
.text:0040FA20 ; =============== S U B R O U T I N E =======================================
.text:0040FA20
.text:0040FA20 ; Attributes: bp-based frame
.text:0040FA20
.text:0040FA20 sub_40FA20      proc near               ; CODE XREF: sub_408110+1A5↑p
.text:0040FA20                                         ; sub_408110+21E↑p ...
.text:0040FA20
.text:0040FA20 var_34          = dword ptr -34h
.text:0040FA20 var_2C          = dword ptr -2Ch
.text:0040FA20 var_28          = dword ptr -28h
.text:0040FA20 var_24          = dword ptr -24h
.text:0040FA20 var_20          = dword ptr -20h
.text:0040FA20 var_1C          = dword ptr -1Ch
.text:0040FA20 var_18          = dword ptr -18h
.text:0040FA20 var_14          = dword ptr -14h
.text:0040FA20 arg_0           = dword ptr  8
.text:0040FA20 arg_4           = dword ptr  0Ch
.text:0040FA20 arg_8           = dword ptr  10h
.text:0040FA20 arg_C           = dword ptr  14h
.text:0040FA20
.text:0040FA20                 push    ebp
.text:0040FA21                 mov     ebp, esp
.text:0040FA23                 push    edi
.text:0040FA24                 push    esi
.text:0040FA25                 push    ebx
.text:0040FA26                 sub     esp, 2Ch
.text:0040FA29                 mov     edx, [ebp+arg_C]
.text:0040FA2C                 mov     [ebp+var_20], 0
.text:0040FA33                 mov     ecx, [ebp+arg_0]
.text:0040FA36                 mov     ebx, [ebp+arg_4]
.text:0040FA39                 mov     [ebp+var_1C], 0
.text:0040FA40                 mov     eax, [ebp+arg_8]
.text:0040FA43                 test    edx, edx
.text:0040FA45                 mov     [ebp+var_24], edx
.text:0040FA48                 mov     edi, ebx
.text:0040FA4A                 mov     esi, eax
.text:0040FA4C                 mov     [ebp+var_28], ecx
.text:0040FA4F                 jnz     short loc_40FAB0
.text:0040FA51                 cmp     eax, ebx
.text:0040FA53                 jbe     short loc_40FA90
.text:0040FA55                 mov     eax, ecx
.text:0040FA57                 mov     edx, ebx
.text:0040FA59                 div     esi
.text:0040FA5B
.text:0040FA5B loc_40FA5B:                             ; CODE XREF: sub_40FA20+8B↓j
.text:0040FA5B                 mov     [ebp+var_28], edx
.text:0040FA5E                 lea     ecx, [ebp+var_18]
.text:0040FA61                 test    ecx, ecx
.text:0040FA63                 jz      short loc_40FA7E
.text:0040FA65                 mov     [ebp+var_1C], 0
.text:0040FA6C
.text:0040FA6C loc_40FA6C:                             ; CODE XREF: sub_40FA20+DA↓j
.text:0040FA6C                 mov     eax, [ebp+var_28]
.text:0040FA6F                 mov     [ebp+var_20], eax
.text:0040FA72                 mov     edx, [ebp+var_20]
.text:0040FA75                 mov     ecx, [ebp+var_1C]
.text:0040FA78                 mov     [ebp+var_18], edx
.text:0040FA7B                 mov     [ebp+var_14], ecx
.text:0040FA7E
.text:0040FA7E loc_40FA7E:                             ; CODE XREF: sub_40FA20+43↑j
.text:0040FA7E                                         ; sub_40FA20+A7↓j ...
.text:0040FA7E                 mov     eax, [ebp+var_18]
.text:0040FA81                 mov     edx, [ebp+var_14]
.text:0040FA84                 add     esp, 2Ch
.text:0040FA87                 pop     ebx
.text:0040FA88                 pop     esi
.text:0040FA89                 pop     edi
.text:0040FA8A                 pop     ebp
.text:0040FA8B                 retn
.text:0040FA8B ; ---------------------------------------------------------------------------
.text:0040FA8C                 align 10h
.text:0040FA90
.text:0040FA90 loc_40FA90:                             ; CODE XREF: sub_40FA20+33↑j
.text:0040FA90                 test    eax, eax
.text:0040FA92                 jnz     short loc_40FA9F
.text:0040FA94                 mov     eax, 1
.text:0040FA99                 xor     edx, edx
.text:0040FA9B                 div     esi
.text:0040FA9D                 mov     esi, eax
.text:0040FA9F
.text:0040FA9F loc_40FA9F:                             ; CODE XREF: sub_40FA20+72↑j
.text:0040FA9F                 mov     eax, edi
.text:0040FAA1                 mov     edx, [ebp+var_24]
.text:0040FAA4                 div     esi
.text:0040FAA6                 mov     eax, [ebp+var_28]
.text:0040FAA9                 div     esi
.text:0040FAAB                 jmp     short loc_40FA5B
.text:0040FAAB ; ---------------------------------------------------------------------------
.text:0040FAAD                 align 10h
.text:0040FAB0
.text:0040FAB0 loc_40FAB0:                             ; CODE XREF: sub_40FA20+2F↑j
.text:0040FAB0                 cmp     [ebp+var_24], ebx
.text:0040FAB3                 jbe     short loc_40FAD0
.text:0040FAB5                 mov     [ebp+var_20], ecx
.text:0040FAB8
.text:0040FAB8 loc_40FAB8:                             ; CODE XREF: sub_40FA20+15B↓j
.text:0040FAB8                 mov     [ebp+var_1C], edi
.text:0040FABB                 mov     eax, [ebp+var_20]
.text:0040FABE                 mov     edx, [ebp+var_1C]
.text:0040FAC1                 mov     [ebp+var_18], eax
.text:0040FAC4                 mov     [ebp+var_14], edx
.text:0040FAC7                 jmp     short loc_40FA7E
.text:0040FAC7 ; ---------------------------------------------------------------------------
.text:0040FAC9                 align 10h
.text:0040FAD0
.text:0040FAD0 loc_40FAD0:                             ; CODE XREF: sub_40FA20+93↑j
.text:0040FAD0                 bsr     eax, [ebp+var_24]
.text:0040FAD4                 mov     ebx, eax
.text:0040FAD6                 xor     ebx, 1Fh
.text:0040FAD9                 jnz     short loc_40FB00
.text:0040FADB                 cmp     edi, [ebp+var_24]
.text:0040FADE                 ja      short loc_40FAE5
.text:0040FAE0                 cmp     [ebp+var_28], esi
.text:0040FAE3                 jb      short loc_40FAF0
.text:0040FAE5
.text:0040FAE5 loc_40FAE5:                             ; CODE XREF: sub_40FA20+BE↑j
.text:0040FAE5                 mov     edx, [ebp+var_28]
.text:0040FAE8                 sub     edx, esi
.text:0040FAEA                 sbb     edi, [ebp+var_24]
.text:0040FAED                 mov     [ebp+var_28], edx
.text:0040FAF0
.text:0040FAF0 loc_40FAF0:                             ; CODE XREF: sub_40FA20+C3↑j
.text:0040FAF0                 lea     ecx, [ebp+var_18]
.text:0040FAF3                 test    ecx, ecx
.text:0040FAF5                 jz      short loc_40FA7E
.text:0040FAF7                 mov     [ebp+var_1C], edi
.text:0040FAFA                 jmp     loc_40FA6C
.text:0040FAFA ; ---------------------------------------------------------------------------
.text:0040FAFF                 align 10h
.text:0040FB00
.text:0040FB00 loc_40FB00:                             ; CODE XREF: sub_40FA20+B9↑j
.text:0040FB00                 mov     edx, [ebp+var_24]
.text:0040FB03                 mov     eax, 20h ; ' '
.text:0040FB08                 mov     cl, bl
.text:0040FB0A                 sub     eax, ebx
.text:0040FB0C                 mov     [ebp+var_2C], eax
.text:0040FB0F                 shl     edx, cl
.text:0040FB11                 mov     eax, esi
.text:0040FB13                 movzx   ecx, byte ptr [ebp+var_2C]
.text:0040FB17                 shr     eax, cl
.text:0040FB19                 mov     cl, bl
.text:0040FB1B                 shl     esi, cl
.text:0040FB1D                 or      edx, eax
.text:0040FB1F                 mov     eax, [ebp+var_28]
.text:0040FB22                 movzx   ecx, byte ptr [ebp+var_2C]
.text:0040FB26                 mov     [ebp+var_24], edx
.text:0040FB29                 mov     edx, edi
.text:0040FB2B                 shr     edx, cl
.text:0040FB2D                 mov     cl, bl
.text:0040FB2F                 shl     edi, cl
.text:0040FB31                 movzx   ecx, byte ptr [ebp+var_2C]
.text:0040FB35                 shr     eax, cl
.text:0040FB37                 or      edi, eax
.text:0040FB39                 mov     eax, edi
.text:0040FB3B                 mov     cl, bl
.text:0040FB3D                 div     [ebp+var_24]
.text:0040FB40                 shl     [ebp+var_28], cl
.text:0040FB43                 mov     edi, edx
.text:0040FB45                 mul     esi
.text:0040FB47                 mov     [ebp+var_34], eax
.text:0040FB4A                 cmp     edx, edi
.text:0040FB4C                 ja      short loc_40FB88
.text:0040FB4E                 cmp     edx, edi
.text:0040FB50                 jz      short loc_40FB80
.text:0040FB52
.text:0040FB52 loc_40FB52:                             ; CODE XREF: sub_40FA20+166↓j
.text:0040FB52                                         ; sub_40FA20+173↓j
.text:0040FB52                 lea     eax, [ebp+var_18]
.text:0040FB55                 test    eax, eax
.text:0040FB57                 jz      loc_40FA7E
.text:0040FB5D                 movzx   ecx, byte ptr [ebp+var_2C]
.text:0040FB61                 mov     eax, [ebp+var_28]
.text:0040FB64                 sub     eax, [ebp+var_34]
.text:0040FB67                 sbb     edi, edx
.text:0040FB69                 mov     [ebp+var_28], eax
.text:0040FB6C                 mov     edx, edi
.text:0040FB6E                 shl     edx, cl
.text:0040FB70                 mov     cl, bl
.text:0040FB72                 shr     eax, cl
.text:0040FB74                 or      edx, eax
.text:0040FB76                 mov     [ebp+var_20], edx
.text:0040FB79                 shr     edi, cl
.text:0040FB7B                 jmp     loc_40FAB8
.text:0040FB80 ; ---------------------------------------------------------------------------
.text:0040FB80
.text:0040FB80 loc_40FB80:                             ; CODE XREF: sub_40FA20+130↑j
.text:0040FB80                 mov     eax, [ebp+var_28]
.text:0040FB83                 cmp     [ebp+var_34], eax
.text:0040FB86                 jbe     short loc_40FB52
.text:0040FB88
.text:0040FB88 loc_40FB88:                             ; CODE XREF: sub_40FA20+12C↑j
.text:0040FB88                 mov     ecx, [ebp+var_34]
.text:0040FB8B                 sub     ecx, esi
.text:0040FB8D                 sbb     edx, [ebp+var_24]
.text:0040FB90                 mov     [ebp+var_34], ecx
.text:0040FB93                 jmp     short loc_40FB52
.text:0040FB93 sub_40FA20      endp
.text:0040FB93
.text:0040FB93 ; ---------------------------------------------------------------------------
.text:0040FB95                 align 10h
.text:0040FBA0
.text:0040FBA0 ; =============== S U B R O U T I N E =======================================
.text:0040FBA0
.text:0040FBA0 ; Attributes: thunk
.text:0040FBA0
.text:0040FBA0 ; char *__cdecl strdup(const char *String)
.text:0040FBA0 _strdup         proc near               ; CODE XREF: sub_405340+32↑p
.text:0040FBA0                                         ; sub_40B210+101↑p ...
.text:0040FBA0
.text:0040FBA0 String          = dword ptr  4
.text:0040FBA0
.text:0040FBA0                 jmp     ds:__imp__strdup
.text:0040FBA0 _strdup         endp
.text:0040FBA0
.text:0040FBA0 ; ---------------------------------------------------------------------------
.text:0040FBA6                 align 10h
.text:0040FBB0
.text:0040FBB0 ; =============== S U B R O U T I N E =======================================
.text:0040FBB0
.text:0040FBB0 ; Attributes: thunk
.text:0040FBB0
.text:0040FBB0 ; int __cdecl stricmp(const char *String1, const char *String2)
.text:0040FBB0 _stricmp        proc near               ; CODE XREF: sub_4085E0+46F↑p
.text:0040FBB0                                         ; sub_40B5E0+2E↑p ...
.text:0040FBB0
.text:0040FBB0 String1         = dword ptr  4
.text:0040FBB0 String2         = dword ptr  8
.text:0040FBB0
.text:0040FBB0                 jmp     ds:__imp__stricmp
.text:0040FBB0 _stricmp        endp
.text:0040FBB0
.text:0040FBB0 ; ---------------------------------------------------------------------------
.text:0040FBB6                 align 10h
.text:0040FBC0
.text:0040FBC0 ; =============== S U B R O U T I N E =======================================
.text:0040FBC0
.text:0040FBC0 ; Attributes: thunk
.text:0040FBC0
.text:0040FBC0 ; int __cdecl dup(int FileHandle)
.text:0040FBC0 _dup            proc near               ; CODE XREF: sub_40C0A0+57↑p
.text:0040FBC0
.text:0040FBC0 FileHandle      = dword ptr  4
.text:0040FBC0
.text:0040FBC0                 jmp     ds:__imp__dup
.text:0040FBC0 _dup            endp
.text:0040FBC0
.text:0040FBC0 ; ---------------------------------------------------------------------------
.text:0040FBC6                 align 10h
.text:0040FBD0
.text:0040FBD0 ; =============== S U B R O U T I N E =======================================
.text:0040FBD0
.text:0040FBD0 ; Attributes: thunk
.text:0040FBD0
.text:0040FBD0 ; int __cdecl getpid()
.text:0040FBD0 _getpid         proc near               ; CODE XREF: sub_40D630+84↑p
.text:0040FBD0                 jmp     ds:__imp__getpid
.text:0040FBD0 _getpid         endp
.text:0040FBD0
.text:0040FBD0 ; ---------------------------------------------------------------------------
.text:0040FBD6                 align 10h
.text:0040FBE0
.text:0040FBE0 ; =============== S U B R O U T I N E =======================================
.text:0040FBE0
.text:0040FBE0 ; Attributes: thunk
.text:0040FBE0
.text:0040FBE0 ; int __cdecl chmod(const char *FileName, int AccessMode)
.text:0040FBE0 _chmod          proc near               ; CODE XREF: sub_40DA60+41↑j
.text:0040FBE0
.text:0040FBE0 FileName        = dword ptr  4
.text:0040FBE0 AccessMode      = dword ptr  8
.text:0040FBE0
.text:0040FBE0                 jmp     ds:__imp__chmod
.text:0040FBE0 _chmod          endp
.text:0040FBE0
.text:0040FBE0 ; ---------------------------------------------------------------------------
.text:0040FBE6                 align 10h
.text:0040FBF0                 jmp     ds:__set_app_type
.text:0040FBF0 ; ---------------------------------------------------------------------------
.text:0040FBF6                 align 10h
.text:0040FC00
.text:0040FC00 ; =============== S U B R O U T I N E =======================================
.text:0040FC00
.text:0040FC00 ; Attributes: thunk
.text:0040FC00
.text:0040FC00 ; void __cdecl cexit()
.text:0040FC00 _cexit          proc near               ; CODE XREF: .text:0040116C↑p
.text:0040FC00                 jmp     ds:__imp__cexit
.text:0040FC00 _cexit          endp
.text:0040FC00
.text:0040FC00 ; ---------------------------------------------------------------------------
.text:0040FC06                 align 10h
.text:0040FC10
.text:0040FC10 ; =============== S U B R O U T I N E =======================================
.text:0040FC10
.text:0040FC10 ; Attributes: thunk
.text:0040FC10
.text:0040FC10 ; char ***__cdecl _p__environ()
.text:0040FC10 __p__environ    proc near               ; CODE XREF: sub_401080+C7↑p
.text:0040FC10                 jmp     ds:__imp___p__environ
.text:0040FC10 __p__environ    endp
.text:0040FC10
.text:0040FC10 ; ---------------------------------------------------------------------------
.text:0040FC16                 align 10h
.text:0040FC20
.text:0040FC20 ; =============== S U B R O U T I N E =======================================
.text:0040FC20
.text:0040FC20 ; Attributes: thunk
.text:0040FC20
.text:0040FC20 ; _crt_signal_t __cdecl signal(int Signal, _crt_signal_t Function)
.text:0040FC20 signal          proc near               ; CODE XREF: TopLevelExceptionFilter+4D↑p
.text:0040FC20                                         ; TopLevelExceptionFilter+88↑p ...
.text:0040FC20
.text:0040FC20 Signal          = dword ptr  4
.text:0040FC20 Function        = dword ptr  8
.text:0040FC20
.text:0040FC20                 jmp     ds:__imp_signal
.text:0040FC20 signal          endp
.text:0040FC20
.text:0040FC20 ; ---------------------------------------------------------------------------
.text:0040FC26                 align 10h
.text:0040FC30
.text:0040FC30 ; =============== S U B R O U T I N E =======================================
.text:0040FC30
.text:0040FC30 ; Attributes: thunk
.text:0040FC30
.text:0040FC30 ; int *__cdecl _p__fmode()
.text:0040FC30 __p__fmode      proc near               ; CODE XREF: sub_401080:loc_401135↑p
.text:0040FC30                 jmp     ds:__imp___p__fmode
.text:0040FC30 __p__fmode      endp
.text:0040FC30
.text:0040FC30 ; ---------------------------------------------------------------------------
.text:0040FC36                 align 10h
.text:0040FC40
.text:0040FC40 ; =============== S U B R O U T I N E =======================================
.text:0040FC40
.text:0040FC40 ; Attributes: thunk
.text:0040FC40
.text:0040FC40 ; int __cdecl setmode(int FileHandle, int Mode)
.text:0040FC40 _setmode        proc near               ; CODE XREF: sub_401080+70↑p
.text:0040FC40                                         ; sub_401080+90↑p ...
.text:0040FC40
.text:0040FC40 FileHandle      = dword ptr  4
.text:0040FC40 Mode            = dword ptr  8
.text:0040FC40
.text:0040FC40                 jmp     ds:__imp__setmode
.text:0040FC40 _setmode        endp
.text:0040FC40
.text:0040FC40 ; ---------------------------------------------------------------------------
.text:0040FC46                 align 10h
.text:0040FC50
.text:0040FC50 ; =============== S U B R O U T I N E =======================================
.text:0040FC50
.text:0040FC50 ; Attributes: thunk
.text:0040FC50
.text:0040FC50 __getmainargs   proc near               ; CODE XREF: sub_401080+49↑p
.text:0040FC50                 jmp     ds:__imp___getmainargs
.text:0040FC50 __getmainargs   endp
.text:0040FC50
.text:0040FC50 ; ---------------------------------------------------------------------------
.text:0040FC56                 align 10h
.text:0040FC60
.text:0040FC60 ; =============== S U B R O U T I N E =======================================
.text:0040FC60
.text:0040FC60 ; Attributes: thunk
.text:0040FC60
.text:0040FC60 ; char *__cdecl setlocale(int Category, const char *Locale)
.text:0040FC60 setlocale       proc near               ; CODE XREF: sub_401B10+37↑p
.text:0040FC60                                         ; sub_4048B0+24↑p
.text:0040FC60
.text:0040FC60 Category        = dword ptr  4
.text:0040FC60 Locale          = dword ptr  8
.text:0040FC60
.text:0040FC60                 jmp     ds:__imp_setlocale
.text:0040FC60 setlocale       endp
.text:0040FC60
.text:0040FC60 ; ---------------------------------------------------------------------------
.text:0040FC66                 align 10h
.text:0040FC70
.text:0040FC70 ; =============== S U B R O U T I N E =======================================
.text:0040FC70
.text:0040FC70 ; Attributes: noreturn thunk
.text:0040FC70
.text:0040FC70 ; void __cdecl __noreturn exit(int Code)
.text:0040FC70 exit            proc near               ; CODE XREF: sub_401B10:loc_401C24↑p
.text:0040FC70                                         ; .text:0040237B↑p ...
.text:0040FC70
.text:0040FC70 Code            = dword ptr  4
.text:0040FC70
.text:0040FC70                 jmp     ds:__imp_exit
.text:0040FC70 exit            endp
.text:0040FC70
.text:0040FC70 ; ---------------------------------------------------------------------------
.text:0040FC76                 align 10h
.text:0040FC80
.text:0040FC80 ; =============== S U B R O U T I N E =======================================
.text:0040FC80
.text:0040FC80 ; Attributes: thunk
.text:0040FC80
.text:0040FC80 ; int __cdecl fputs(const char *Buffer, FILE *Stream)
.text:0040FC80 fputs           proc near               ; CODE XREF: sub_401B10+1AE↑p
.text:0040FC80                                         ; sub_401B10+1D0↑p ...
.text:0040FC80
.text:0040FC80 Buffer          = dword ptr  4
.text:0040FC80 Stream          = dword ptr  8
.text:0040FC80
.text:0040FC80                 jmp     ds:__imp_fputs
.text:0040FC80 fputs           endp
.text:0040FC80
.text:0040FC80 ; ---------------------------------------------------------------------------
.text:0040FC86                 align 10h
.text:0040FC90
.text:0040FC90 ; =============== S U B R O U T I N E =======================================
.text:0040FC90
.text:0040FC90 ; Attributes: thunk
.text:0040FC90
.text:0040FC90 ; int fprintf(FILE *const Stream, const char *const Format, ...)
.text:0040FC90 fprintf         proc near               ; CODE XREF: sub_401B10+108↑p
.text:0040FC90                                         ; .text:00402373↑p ...
.text:0040FC90
.text:0040FC90 Stream          = dword ptr  4
.text:0040FC90 Format          = dword ptr  8
.text:0040FC90
.text:0040FC90                 jmp     ds:__imp_fprintf
.text:0040FC90 fprintf         endp
.text:0040FC90
.text:0040FC90 ; ---------------------------------------------------------------------------
.text:0040FC96                 align 10h
.text:0040FCA0
.text:0040FCA0 ; =============== S U B R O U T I N E =======================================
.text:0040FCA0
.text:0040FCA0 ; Attributes: thunk
.text:0040FCA0
.text:0040FCA0 ; int *__cdecl errno()
.text:0040FCA0 _errno          proc near               ; CODE XREF: sub_401B10:loc_4020F5↑p
.text:0040FCA0                                         ; sub_401B10:loc_4021F6↑p ...
.text:0040FCA0                 jmp     ds:__imp__errno
.text:0040FCA0 _errno          endp
.text:0040FCA0
.text:0040FCA0 ; ---------------------------------------------------------------------------
.text:0040FCA6                 align 10h
.text:0040FCB0
.text:0040FCB0 ; =============== S U B R O U T I N E =======================================
.text:0040FCB0
.text:0040FCB0 ; Attributes: thunk
.text:0040FCB0
.text:0040FCB0 ; int __cdecl strncmp(const char *Str1, const char *Str2, size_t MaxCount)
.text:0040FCB0 strncmp         proc near               ; CODE XREF: sub_402560+901↑p
.text:0040FCB0                                         ; sub_403A70+23F↑p ...
.text:0040FCB0
.text:0040FCB0 Str1            = dword ptr  4
.text:0040FCB0 Str2            = dword ptr  8
.text:0040FCB0 MaxCount        = dword ptr  0Ch
.text:0040FCB0
.text:0040FCB0                 jmp     ds:__imp_strncmp
.text:0040FCB0 strncmp         endp
.text:0040FCB0
.text:0040FCB0 ; ---------------------------------------------------------------------------
.text:0040FCB6                 align 10h
.text:0040FCC0
.text:0040FCC0 ; =============== S U B R O U T I N E =======================================
.text:0040FCC0
.text:0040FCC0 ; Attributes: thunk
.text:0040FCC0
.text:0040FCC0 ; int printf(const char *const Format, ...)
.text:0040FCC0 printf          proc near               ; CODE XREF: sub_401B10+18C↑p
.text:0040FCC0                                         ; sub_401B10+29F↑p ...
.text:0040FCC0
.text:0040FCC0 Format          = dword ptr  4
.text:0040FCC0
.text:0040FCC0                 jmp     ds:__imp_printf
.text:0040FCC0 printf          endp
.text:0040FCC0
.text:0040FCC0 ; ---------------------------------------------------------------------------
.text:0040FCC6                 align 10h
.text:0040FCD0
.text:0040FCD0 ; =============== S U B R O U T I N E =======================================
.text:0040FCD0
.text:0040FCD0 ; Attributes: thunk
.text:0040FCD0
.text:0040FCD0 ; char *__cdecl strncat(char *Destination, const char *Source, size_t Count)
.text:0040FCD0 strncat         proc near               ; CODE XREF: sub_402560+17C↑p
.text:0040FCD0                                         ; sub_402560+379↑p ...
.text:0040FCD0
.text:0040FCD0 Destination     = dword ptr  4
.text:0040FCD0 Source          = dword ptr  8
.text:0040FCD0 Count           = dword ptr  0Ch
.text:0040FCD0
.text:0040FCD0                 jmp     ds:__imp_strncat
.text:0040FCD0 strncat         endp
.text:0040FCD0
.text:0040FCD0 ; ---------------------------------------------------------------------------
.text:0040FCD6                 align 10h
.text:0040FCE0
.text:0040FCE0 ; =============== S U B R O U T I N E =======================================
.text:0040FCE0
.text:0040FCE0 ; Attributes: thunk
.text:0040FCE0
.text:0040FCE0 ; char *__cdecl strcpy(char *Destination, const char *Source)
.text:0040FCE0 strcpy          proc near               ; CODE XREF: sub_402560+15E↑p
.text:0040FCE0                                         ; sub_402560+357↑p ...
.text:0040FCE0
.text:0040FCE0 Destination     = dword ptr  4
.text:0040FCE0 Source          = dword ptr  8
.text:0040FCE0
.text:0040FCE0                 jmp     ds:__imp_strcpy
.text:0040FCE0 strcpy          endp
.text:0040FCE0
.text:0040FCE0 ; ---------------------------------------------------------------------------
.text:0040FCE6                 align 10h
.text:0040FCF0
.text:0040FCF0 ; =============== S U B R O U T I N E =======================================
.text:0040FCF0
.text:0040FCF0 ; Attributes: thunk
.text:0040FCF0
.text:0040FCF0 ; char *__cdecl strncpy(char *Destination, const char *Source, size_t Count)
.text:0040FCF0 strncpy         proc near               ; CODE XREF: .text:00403286↑p
.text:0040FCF0                                         ; .text:0040348A↑p ...
.text:0040FCF0
.text:0040FCF0 Destination     = dword ptr  4
.text:0040FCF0 Source          = dword ptr  8
.text:0040FCF0 Count           = dword ptr  0Ch
.text:0040FCF0
.text:0040FCF0                 jmp     ds:__imp_strncpy
.text:0040FCF0 strncpy         endp
.text:0040FCF0
.text:0040FCF0 ; ---------------------------------------------------------------------------
.text:0040FCF6                 align 10h
.text:0040FD00
.text:0040FD00 ; =============== S U B R O U T I N E =======================================
.text:0040FD00
.text:0040FD00 ; Attributes: thunk
.text:0040FD00
.text:0040FD00 ; void __cdecl free(void *Block)
.text:0040FD00 free            proc near               ; CODE XREF: sub_401B10+592↑p
.text:0040FD00                                         ; sub_401B10+5C0↑p ...
.text:0040FD00
.text:0040FD00 Block           = dword ptr  4
.text:0040FD00
.text:0040FD00                 jmp     ds:__imp_free
.text:0040FD00 free            endp
.text:0040FD00
.text:0040FD00 ; ---------------------------------------------------------------------------
.text:0040FD06                 align 10h
.text:0040FD10
.text:0040FD10 ; =============== S U B R O U T I N E =======================================
.text:0040FD10
.text:0040FD10 ; Attributes: thunk
.text:0040FD10
.text:0040FD10 ; int __cdecl puts(const char *Buffer)
.text:0040FD10 puts            proc near               ; CODE XREF: sub_402FC0+141↑p
.text:0040FD10
.text:0040FD10 Buffer          = dword ptr  4
.text:0040FD10
.text:0040FD10                 jmp     ds:__imp_puts
.text:0040FD10 puts            endp
.text:0040FD10
.text:0040FD10 ; ---------------------------------------------------------------------------
.text:0040FD16                 align 10h
.text:0040FD20
.text:0040FD20 ; =============== S U B R O U T I N E =======================================
.text:0040FD20
.text:0040FD20 ; Attributes: thunk
.text:0040FD20
.text:0040FD20 ; size_t __cdecl strlen(const char *Str)
.text:0040FD20 strlen          proc near               ; CODE XREF: sub_402560+138↑p
.text:0040FD20                                         ; sub_402560+2EF↑p ...
.text:0040FD20
.text:0040FD20 Str             = dword ptr  4
.text:0040FD20
.text:0040FD20                 jmp     ds:__imp_strlen
.text:0040FD20 strlen          endp
.text:0040FD20
.text:0040FD20 ; ---------------------------------------------------------------------------
.text:0040FD26                 align 10h
.text:0040FD30
.text:0040FD30 ; =============== S U B R O U T I N E =======================================
.text:0040FD30
.text:0040FD30 ; Attributes: thunk
.text:0040FD30
.text:0040FD30 ; size_t __cdecl strftime(char *Buffer, size_t SizeInBytes, const char *Format, const struct tm *Tm)
.text:0040FD30 strftime        proc near               ; CODE XREF: sub_402560+24A↑p
.text:0040FD30                                         ; sub_402560+3DA↑p ...
.text:0040FD30
.text:0040FD30 Buffer          = dword ptr  4
.text:0040FD30 SizeInBytes     = dword ptr  8
.text:0040FD30 Format          = dword ptr  0Ch
.text:0040FD30 Tm              = dword ptr  10h
.text:0040FD30
.text:0040FD30                 jmp     ds:__imp_strftime
.text:0040FD30 strftime        endp
.text:0040FD30
.text:0040FD30 ; ---------------------------------------------------------------------------
.text:0040FD36                 align 10h
.text:0040FD40
.text:0040FD40 ; =============== S U B R O U T I N E =======================================
.text:0040FD40
.text:0040FD40 ; Attributes: thunk
.text:0040FD40
.text:0040FD40 ; struct tm *__cdecl localtime(const __time32_t *const Time)
.text:0040FD40 localtime       proc near               ; CODE XREF: sub_402560+220↑p
.text:0040FD40                                         ; sub_402560+3B4↑p ...
.text:0040FD40
.text:0040FD40 Time            = dword ptr  4
.text:0040FD40
.text:0040FD40                 jmp     ds:__imp_localtime
.text:0040FD40 localtime       endp
.text:0040FD40
.text:0040FD40 ; ---------------------------------------------------------------------------
.text:0040FD46                 align 10h
.text:0040FD50
.text:0040FD50 ; =============== S U B R O U T I N E =======================================
.text:0040FD50
.text:0040FD50 ; Attributes: thunk
.text:0040FD50
.text:0040FD50 ; int sprintf(char *const Buffer, const char *const Format, ...)
.text:0040FD50 sprintf         proc near               ; CODE XREF: sub_402560+19E↑p
.text:0040FD50                                         ; sub_402560+203↑p ...
.text:0040FD50
.text:0040FD50 Buffer          = dword ptr  4
.text:0040FD50 Format          = dword ptr  8
.text:0040FD50
.text:0040FD50                 jmp     ds:__imp_sprintf
.text:0040FD50 sprintf         endp
.text:0040FD50
.text:0040FD50 ; ---------------------------------------------------------------------------
.text:0040FD56                 align 10h
.text:0040FD60
.text:0040FD60 ; =============== S U B R O U T I N E =======================================
.text:0040FD60
.text:0040FD60 ; Attributes: thunk
.text:0040FD60
.text:0040FD60 ; __time32_t __cdecl time(__time32_t *const Time)
.text:0040FD60 time            proc near               ; CODE XREF: .text:00403647↑p
.text:0040FD60
.text:0040FD60 Time            = dword ptr  4
.text:0040FD60
.text:0040FD60                 jmp     ds:__imp_time
.text:0040FD60 time            endp
.text:0040FD60
.text:0040FD60 ; ---------------------------------------------------------------------------
.text:0040FD66                 align 10h
.text:0040FD70
.text:0040FD70 ; =============== S U B R O U T I N E =======================================
.text:0040FD70
.text:0040FD70 ; Attributes: thunk
.text:0040FD70
.text:0040FD70 ; char *__cdecl strchr(const char *Str, int Val)
.text:0040FD70 strchr          proc near               ; CODE XREF: .text:004034A2↑p
.text:0040FD70                                         ; sub_403A70+469↑p ...
.text:0040FD70
.text:0040FD70 Str             = dword ptr  4
.text:0040FD70 Val             = dword ptr  8
.text:0040FD70
.text:0040FD70                 jmp     ds:__imp_strchr
.text:0040FD70 strchr          endp
.text:0040FD70
.text:0040FD70 ; ---------------------------------------------------------------------------
.text:0040FD76                 align 10h
.text:0040FD80
.text:0040FD80 ; =============== S U B R O U T I N E =======================================
.text:0040FD80
.text:0040FD80 ; Attributes: thunk
.text:0040FD80
.text:0040FD80 ; char *__cdecl getenv(const char *VarName)
.text:0040FD80 getenv          proc near               ; CODE XREF: sub_403A70+B57↑p
.text:0040FD80                                         ; sub_4085E0+3EE↑p ...
.text:0040FD80
.text:0040FD80 VarName         = dword ptr  4
.text:0040FD80
.text:0040FD80                 jmp     ds:__imp_getenv
.text:0040FD80 getenv          endp
.text:0040FD80
.text:0040FD80 ; ---------------------------------------------------------------------------
.text:0040FD86                 align 10h
.text:0040FD90
.text:0040FD90 ; =============== S U B R O U T I N E =======================================
.text:0040FD90
.text:0040FD90 ; Attributes: thunk
.text:0040FD90
.text:0040FD90 ; int __cdecl vfprintf(FILE *const Stream, const char *const Format, va_list ArgList)
.text:0040FD90 vfprintf        proc near               ; CODE XREF: sub_404C10+C1↑p
.text:0040FD90                                         ; sub_406920+49↑p ...
.text:0040FD90
.text:0040FD90 Stream          = dword ptr  4
.text:0040FD90 Format          = dword ptr  8
.text:0040FD90 ArgList         = dword ptr  0Ch
.text:0040FD90
.text:0040FD90                 jmp     ds:__imp_vfprintf
.text:0040FD90 vfprintf        endp
.text:0040FD90
.text:0040FD90 ; ---------------------------------------------------------------------------
.text:0040FD96                 align 10h
.text:0040FDA0
.text:0040FDA0 ; =============== S U B R O U T I N E =======================================
.text:0040FDA0
.text:0040FDA0 ; Attributes: noreturn thunk
.text:0040FDA0
.text:0040FDA0 ; void __cdecl __noreturn abort()
.text:0040FDA0 abort           proc near               ; CODE XREF: sub_404C10:loc_404CAC↑p
.text:0040FDA0                                         ; sub_405430+32↑p ...
.text:0040FDA0                 jmp     ds:__imp_abort
.text:0040FDA0 abort           endp
.text:0040FDA0
.text:0040FDA0 ; ---------------------------------------------------------------------------
.text:0040FDA6                 align 10h
.text:0040FDB0
.text:0040FDB0 ; =============== S U B R O U T I N E =======================================
.text:0040FDB0
.text:0040FDB0 ; Attributes: thunk
.text:0040FDB0
.text:0040FDB0 ; int __cdecl flsbuf(int Ch, FILE *File)
.text:0040FDB0 _flsbuf         proc near               ; CODE XREF: sub_404C10+128↑p
.text:0040FDB0                                         ; sub_404C10+13A↑p ...
.text:0040FDB0
.text:0040FDB0 File            = dword ptr  8
.text:0040FDB0
.text:0040FDB0                 jmp     ds:__imp__flsbuf
.text:0040FDB0 _flsbuf         endp
.text:0040FDB0
.text:0040FDB0 ; ---------------------------------------------------------------------------
.text:0040FDB6                 align 10h
.text:0040FDC0
.text:0040FDC0 ; =============== S U B R O U T I N E =======================================
.text:0040FDC0
.text:0040FDC0 ; Attributes: thunk
.text:0040FDC0
.text:0040FDC0 ; int __cdecl fclose(FILE *Stream)
.text:0040FDC0 fclose          proc near               ; CODE XREF: sub_404F90+27↑p
.text:0040FDC0                                         ; .text:0040CF2E↑p
.text:0040FDC0
.text:0040FDC0 Stream          = dword ptr  4
.text:0040FDC0
.text:0040FDC0                 jmp     ds:__imp_fclose
.text:0040FDC0 fclose          endp
.text:0040FDC0
.text:0040FDC0 ; ---------------------------------------------------------------------------
.text:0040FDC6                 align 10h
.text:0040FDD0
.text:0040FDD0 ; =============== S U B R O U T I N E =======================================
.text:0040FDD0
.text:0040FDD0 ; Attributes: thunk
.text:0040FDD0
.text:0040FDD0 ; void *__cdecl memcpy(void *, const void *Src, size_t Size)
.text:0040FDD0 memcpy          proc near               ; CODE XREF: .text:00405258↑p
.text:0040FDD0                                         ; .text:004052A1↑p ...
.text:0040FDD0
.text:0040FDD0 Src             = dword ptr  8
.text:0040FDD0 Size            = dword ptr  0Ch
.text:0040FDD0
.text:0040FDD0                 jmp     ds:__imp_memcpy
.text:0040FDD0 memcpy          endp
.text:0040FDD0
.text:0040FDD0 ; ---------------------------------------------------------------------------
.text:0040FDD6                 align 10h
.text:0040FDE0
.text:0040FDE0 ; =============== S U B R O U T I N E =======================================
.text:0040FDE0
.text:0040FDE0 ; Attributes: thunk
.text:0040FDE0
.text:0040FDE0 ; void *__cdecl memset(void *, int Val, size_t Size)
.text:0040FDE0 memset          proc near               ; CODE XREF: .text:004051D6↑p
.text:0040FDE0
.text:0040FDE0 Val             = dword ptr  8
.text:0040FDE0 Size            = dword ptr  0Ch
.text:0040FDE0
.text:0040FDE0                 jmp     ds:__imp_memset
.text:0040FDE0 memset          endp
.text:0040FDE0
.text:0040FDE0 ; ---------------------------------------------------------------------------
.text:0040FDE6                 align 10h
.text:0040FDF0
.text:0040FDF0 ; =============== S U B R O U T I N E =======================================
.text:0040FDF0
.text:0040FDF0 ; Attributes: thunk
.text:0040FDF0
.text:0040FDF0 ; void *__cdecl calloc(size_t Count, size_t Size)
.text:0040FDF0 calloc          proc near               ; CODE XREF: .text:00405213↑p
.text:0040FDF0                                         ; sub_40B210+AC↑p
.text:0040FDF0
.text:0040FDF0 Count           = dword ptr  4
.text:0040FDF0 Size            = dword ptr  8
.text:0040FDF0
.text:0040FDF0                 jmp     ds:__imp_calloc
.text:0040FDF0 calloc          endp
.text:0040FDF0
.text:0040FDF0 ; ---------------------------------------------------------------------------
.text:0040FDF6                 align 10h
.text:0040FE00
.text:0040FE00 ; =============== S U B R O U T I N E =======================================
.text:0040FE00
.text:0040FE00 ; Attributes: thunk
.text:0040FE00
.text:0040FE00 ; void *__cdecl realloc(void *Block, size_t Size)
.text:0040FE00 realloc         proc near               ; CODE XREF: sub_4050E0+30↑p
.text:0040FE00                                         ; sub_405140+16↑p ...
.text:0040FE00
.text:0040FE00 Block           = dword ptr  4
.text:0040FE00 Size            = dword ptr  8
.text:0040FE00
.text:0040FE00                 jmp     ds:__imp_realloc
.text:0040FE00 realloc         endp
.text:0040FE00
.text:0040FE00 ; ---------------------------------------------------------------------------
.text:0040FE06                 align 10h
.text:0040FE10
.text:0040FE10 ; =============== S U B R O U T I N E =======================================
.text:0040FE10
.text:0040FE10 ; Attributes: thunk
.text:0040FE10
.text:0040FE10 ; void *__cdecl malloc(size_t Size)
.text:0040FE10 malloc          proc near               ; CODE XREF: .text:00405094↑p
.text:0040FE10                                         ; sub_4050B0+E↑p ...
.text:0040FE10
.text:0040FE10 Size            = dword ptr  4
.text:0040FE10
.text:0040FE10                 jmp     ds:__imp_malloc
.text:0040FE10 malloc          endp
.text:0040FE10
.text:0040FE10 ; ---------------------------------------------------------------------------
.text:0040FE16                 align 10h
.text:0040FE20
.text:0040FE20 ; =============== S U B R O U T I N E =======================================
.text:0040FE20
.text:0040FE20 ; Attributes: thunk
.text:0040FE20
.text:0040FE20 ; int __cdecl strcmp(const char *Str1, const char *Str2)
.text:0040FE20 strcmp          proc near               ; CODE XREF: sub_405340+66↑p
.text:0040FE20                                         ; sub_406A24+180↑p ...
.text:0040FE20
.text:0040FE20 Str1            = dword ptr  4
.text:0040FE20 Str2            = dword ptr  8
.text:0040FE20
.text:0040FE20                 jmp     ds:__imp_strcmp
.text:0040FE20 strcmp          endp
.text:0040FE20
.text:0040FE20 ; ---------------------------------------------------------------------------
.text:0040FE26                 align 10h
.text:0040FE30
.text:0040FE30 ; =============== S U B R O U T I N E =======================================
.text:0040FE30
.text:0040FE30 ; Attributes: thunk
.text:0040FE30
.text:0040FE30 ; int __cdecl iswctype(wint_t C, wctype_t Type)
.text:0040FE30 iswctype        proc near               ; CODE XREF: sub_4055C0+78B↑p
.text:0040FE30
.text:0040FE30 C               = word ptr  4
.text:0040FE30 Type            = word ptr  8
.text:0040FE30
.text:0040FE30                 jmp     ds:__imp_iswctype
.text:0040FE30 iswctype        endp
.text:0040FE30
.text:0040FE30 ; ---------------------------------------------------------------------------
.text:0040FE36                 align 10h
.text:0040FE40
.text:0040FE40 ; =============== S U B R O U T I N E =======================================
.text:0040FE40
.text:0040FE40 ; Attributes: thunk
.text:0040FE40
.text:0040FE40 ; int __cdecl isctype(int C, int Type)
.text:0040FE40 _isctype        proc near               ; CODE XREF: sub_4055C0+610↑p
.text:0040FE40
.text:0040FE40 C               = dword ptr  4
.text:0040FE40 Type            = dword ptr  8
.text:0040FE40
.text:0040FE40                 jmp     ds:__imp__isctype
.text:0040FE40 _isctype        endp
.text:0040FE40
.text:0040FE40 ; ---------------------------------------------------------------------------
.text:0040FE46                 align 10h
.text:0040FE50
.text:0040FE50 ; =============== S U B R O U T I N E =======================================
.text:0040FE50
.text:0040FE50 ; Attributes: thunk
.text:0040FE50
.text:0040FE50 ; int __cdecl fflush(FILE *Stream)
.text:0040FE50 fflush          proc near               ; CODE XREF: sub_406920+19↑p
.text:0040FE50                                         ; sub_406920+81↑p ...
.text:0040FE50
.text:0040FE50 Stream          = dword ptr  4
.text:0040FE50
.text:0040FE50                 jmp     ds:__imp_fflush
.text:0040FE50 fflush          endp
.text:0040FE50
.text:0040FE50 ; ---------------------------------------------------------------------------
.text:0040FE56                 align 10h
.text:0040FE60
.text:0040FE60 ; =============== S U B R O U T I N E =======================================
.text:0040FE60
.text:0040FE60 ; Attributes: thunk
.text:0040FE60
.text:0040FE60 ; char *__cdecl strerror(int ErrorMessage)
.text:0040FE60 strerror        proc near               ; CODE XREF: sub_406920+A5↑p
.text:0040FE60                                         ; sub_406A24+10F↑p
.text:0040FE60
.text:0040FE60 ErrorMessage    = dword ptr  4
.text:0040FE60
.text:0040FE60                 jmp     ds:__imp_strerror
.text:0040FE60 strerror        endp
.text:0040FE60
.text:0040FE60 ; ---------------------------------------------------------------------------
.text:0040FE66                 align 10h
.text:0040FE70
.text:0040FE70 ; =============== S U B R O U T I N E =======================================
.text:0040FE70
.text:0040FE70 ; Attributes: thunk
.text:0040FE70
.text:0040FE70 ; char *__cdecl strcat(char *Destination, const char *Source)
.text:0040FE70 strcat          proc near               ; CODE XREF: sub_406EC0+74↑p
.text:0040FE70                                         ; sub_407F90+98↑p ...
.text:0040FE70
.text:0040FE70 Destination     = dword ptr  4
.text:0040FE70 Source          = dword ptr  8
.text:0040FE70
.text:0040FE70                 jmp     ds:__imp_strcat
.text:0040FE70 strcat          endp
.text:0040FE70
.text:0040FE70 ; ---------------------------------------------------------------------------
.text:0040FE76                 align 10h
.text:0040FE80
.text:0040FE80 ; =============== S U B R O U T I N E =======================================
.text:0040FE80
.text:0040FE80 ; Attributes: thunk
.text:0040FE80
.text:0040FE80 ; char *__cdecl strrchr(const char *Str, int Ch)
.text:0040FE80 strrchr         proc near               ; CODE XREF: sub_406EC0+49↑p
.text:0040FE80                                         ; .text:004078CE↑p ...
.text:0040FE80
.text:0040FE80 Str             = dword ptr  4
.text:0040FE80
.text:0040FE80                 jmp     ds:__imp_strrchr
.text:0040FE80 strrchr         endp
.text:0040FE80
.text:0040FE80 ; ---------------------------------------------------------------------------
.text:0040FE86                 align 10h
.text:0040FE90
.text:0040FE90 ; =============== S U B R O U T I N E =======================================
.text:0040FE90
.text:0040FE90 ; Attributes: thunk
.text:0040FE90
.text:0040FE90 ; char *__cdecl strdup_0(const char *String)
.text:0040FE90 _strdup_0       proc near               ; CODE XREF: sub_407210+88↑p
.text:0040FE90
.text:0040FE90 String          = dword ptr  4
.text:0040FE90
.text:0040FE90                 jmp     ds:__imp__strdup_0
.text:0040FE90 _strdup_0       endp
.text:0040FE90
.text:0040FE90 ; ---------------------------------------------------------------------------
.text:0040FE96                 align 10h
.text:0040FEA0
.text:0040FEA0 ; =============== S U B R O U T I N E =======================================
.text:0040FEA0
.text:0040FEA0 ; Attributes: thunk
.text:0040FEA0
.text:0040FEA0 ; int __cdecl isalpha(int C)
.text:0040FEA0 isalpha         proc near               ; CODE XREF: _win32_longpath+25↑p
.text:0040FEA0
.text:0040FEA0 C               = dword ptr  4
.text:0040FEA0
.text:0040FEA0                 jmp     ds:__imp_isalpha
.text:0040FEA0 isalpha         endp
.text:0040FEA0
.text:0040FEA0 ; ---------------------------------------------------------------------------
.text:0040FEA6                 align 10h
.text:0040FEB0
.text:0040FEB0 ; =============== S U B R O U T I N E =======================================
.text:0040FEB0
.text:0040FEB0 ; Attributes: thunk
.text:0040FEB0
.text:0040FEB0 ; int __cdecl stricmp_0(const char *String1, const char *String2)
.text:0040FEB0 _stricmp_0      proc near               ; CODE XREF: .text:004079B4↑p
.text:0040FEB0
.text:0040FEB0 String1         = dword ptr  4
.text:0040FEB0 String2         = dword ptr  8
.text:0040FEB0
.text:0040FEB0                 jmp     ds:__imp__stricmp_0
.text:0040FEB0 _stricmp_0      endp
.text:0040FEB0
.text:0040FEB0 ; ---------------------------------------------------------------------------
.text:0040FEB6                 align 10h
.text:0040FEC0
.text:0040FEC0 ; =============== S U B R O U T I N E =======================================
.text:0040FEC0
.text:0040FEC0 ; Attributes: thunk
.text:0040FEC0
.text:0040FEC0 ; char *__cdecl strstr(const char *Str, const char *SubStr)
.text:0040FEC0 strstr          proc near               ; CODE XREF: sub_4085E0+3BF↑p
.text:0040FEC0                                         ; sub_4085E0+3DC↑p ...
.text:0040FEC0
.text:0040FEC0 Str             = dword ptr  4
.text:0040FEC0 SubStr          = dword ptr  8
.text:0040FEC0
.text:0040FEC0                 jmp     ds:__imp_strstr
.text:0040FEC0 strstr          endp
.text:0040FEC0
.text:0040FEC0 ; ---------------------------------------------------------------------------
.text:0040FEC6                 align 10h
.text:0040FED0
.text:0040FED0 ; =============== S U B R O U T I N E =======================================
.text:0040FED0
.text:0040FED0 ; Attributes: thunk
.text:0040FED0
.text:0040FED0 ; __int64 __cdecl lseeki64(int FileHandle, __int64 Offset, int Origin)
.text:0040FED0 _lseeki64       proc near               ; CODE XREF: sub_409910+30↑p
.text:0040FED0                                         ; sub_409D50+144↑p ...
.text:0040FED0
.text:0040FED0 FileHandle      = dword ptr  4
.text:0040FED0 Offset          = qword ptr  8
.text:0040FED0 Origin          = dword ptr  10h
.text:0040FED0
.text:0040FED0                 jmp     ds:__imp__lseeki64
.text:0040FED0 _lseeki64       endp
.text:0040FED0
.text:0040FED0 ; ---------------------------------------------------------------------------
.text:0040FED6                 align 10h
.text:0040FEE0
.text:0040FEE0 ; =============== S U B R O U T I N E =======================================
.text:0040FEE0
.text:0040FEE0 ; Attributes: thunk
.text:0040FEE0
.text:0040FEE0 ; int open(const char *FileName, int OpenFlag, ...)
.text:0040FEE0 _open           proc near               ; CODE XREF: sub_409910+71↑p
.text:0040FEE0                                         ; sub_409910+EA↑p ...
.text:0040FEE0
.text:0040FEE0 FileName        = dword ptr  4
.text:0040FEE0 OpenFlag        = dword ptr  8
.text:0040FEE0
.text:0040FEE0                 jmp     ds:__imp__open
.text:0040FEE0 _open           endp
.text:0040FEE0
.text:0040FEE0 ; ---------------------------------------------------------------------------
.text:0040FEE6                 align 10h
.text:0040FEF0
.text:0040FEF0 ; =============== S U B R O U T I N E =======================================
.text:0040FEF0
.text:0040FEF0 ; Attributes: thunk
.text:0040FEF0
.text:0040FEF0 ; int __cdecl close(int FileHandle)
.text:0040FEF0 _close          proc near               ; CODE XREF: sub_409910+D3↑p
.text:0040FEF0                                         ; sub_40A080+134↑p ...
.text:0040FEF0
.text:0040FEF0 FileHandle      = dword ptr  4
.text:0040FEF0
.text:0040FEF0                 jmp     ds:__imp__close
.text:0040FEF0 _close          endp
.text:0040FEF0
.text:0040FEF0 ; ---------------------------------------------------------------------------
.text:0040FEF6                 align 10h
.text:0040FF00
.text:0040FF00 ; =============== S U B R O U T I N E =======================================
.text:0040FF00
.text:0040FF00 ; Attributes: thunk
.text:0040FF00
.text:0040FF00 ; int __cdecl write(int FileHandle, const void *Buf, unsigned int MaxCharCount)
.text:0040FF00 _write          proc near               ; CODE XREF: sub_409D50+15E↑p
.text:0040FF00                                         ; sub_40A080+102↑p
.text:0040FF00
.text:0040FF00 FileHandle      = dword ptr  4
.text:0040FF00 Buf             = dword ptr  8
.text:0040FF00 MaxCharCount    = dword ptr  0Ch
.text:0040FF00
.text:0040FF00                 jmp     ds:__imp__write
.text:0040FF00 _write          endp
.text:0040FF00
.text:0040FF00 ; ---------------------------------------------------------------------------
.text:0040FF06                 align 10h
.text:0040FF10
.text:0040FF10 ; =============== S U B R O U T I N E =======================================
.text:0040FF10
.text:0040FF10 ; Attributes: noreturn thunk
.text:0040FF10
.text:0040FF10 _assert         proc near               ; CODE XREF: sub_409A50+145↑p
.text:0040FF10                                         ; sub_409BA0+1A5↑p ...
.text:0040FF10                 jmp     ds:__imp__assert
.text:0040FF10 _assert         endp
.text:0040FF10
.text:0040FF10 ; ---------------------------------------------------------------------------
.text:0040FF16                 align 10h
.text:0040FF20
.text:0040FF20 ; =============== S U B R O U T I N E =======================================
.text:0040FF20
.text:0040FF20 ; Attributes: thunk
.text:0040FF20
.text:0040FF20 ; int __cdecl read(int FileHandle, void *DstBuf, unsigned int MaxCharCount)
.text:0040FF20 _read           proc near               ; CODE XREF: sub_409A50+86↑p
.text:0040FF20                                         ; sub_409BA0+89↑p ...
.text:0040FF20
.text:0040FF20 FileHandle      = dword ptr  4
.text:0040FF20 DstBuf          = dword ptr  8
.text:0040FF20 MaxCharCount    = dword ptr  0Ch
.text:0040FF20
.text:0040FF20                 jmp     ds:__imp__read
.text:0040FF20 _read           endp
.text:0040FF20
.text:0040FF20 ; ---------------------------------------------------------------------------
.text:0040FF26                 align 10h
.text:0040FF30
.text:0040FF30 ; =============== S U B R O U T I N E =======================================
.text:0040FF30
.text:0040FF30 ; Attributes: thunk
.text:0040FF30
.text:0040FF30 ; int __cdecl toupper(int C)
.text:0040FF30 toupper         proc near               ; CODE XREF: sub_40B210+10E↑p
.text:0040FF30
.text:0040FF30 C               = dword ptr  4
.text:0040FF30
.text:0040FF30                 jmp     ds:__imp_toupper
.text:0040FF30 toupper         endp
.text:0040FF30
.text:0040FF30 ; ---------------------------------------------------------------------------
.text:0040FF36                 align 10h
.text:0040FF40
.text:0040FF40 ; =============== S U B R O U T I N E =======================================
.text:0040FF40
.text:0040FF40 ; Attributes: thunk
.text:0040FF40
.text:0040FF40 ; intptr_t __cdecl get_osfhandle(int FileHandle)
.text:0040FF40 _get_osfhandle  proc near               ; CODE XREF: sub_40BED0+22↑p
.text:0040FF40                                         ; sub_40BF80+12↑p ...
.text:0040FF40
.text:0040FF40 FileHandle      = dword ptr  4
.text:0040FF40
.text:0040FF40                 jmp     ds:__imp__get_osfhandle
.text:0040FF40 _get_osfhandle  endp
.text:0040FF40
.text:0040FF40 ; ---------------------------------------------------------------------------
.text:0040FF46                 align 10h
.text:0040FF50
.text:0040FF50 ; =============== S U B R O U T I N E =======================================
.text:0040FF50
.text:0040FF50 ; Attributes: thunk
.text:0040FF50
.text:0040FF50 ; __int64 __cdecl filelengthi64(int FileHandle)
.text:0040FF50 _filelengthi64  proc near               ; CODE XREF: sub_40BF80+113↑p
.text:0040FF50                                         ; sub_40D0E0+1F↑p
.text:0040FF50
.text:0040FF50 FileHandle      = dword ptr  4
.text:0040FF50
.text:0040FF50                 jmp     ds:__imp__filelengthi64
.text:0040FF50 _filelengthi64  endp
.text:0040FF50
.text:0040FF50 ; ---------------------------------------------------------------------------
.text:0040FF56                 align 10h
.text:0040FF60
.text:0040FF60 ; =============== S U B R O U T I N E =======================================
.text:0040FF60
.text:0040FF60 ; Attributes: thunk
.text:0040FF60
.text:0040FF60 ; int sscanf(const char *const Buffer, const char *const Format, ...)
.text:0040FF60 sscanf          proc near               ; CODE XREF: .text:0040C56E↑p
.text:0040FF60
.text:0040FF60 Buffer          = dword ptr  4
.text:0040FF60 Format          = dword ptr  8
.text:0040FF60
.text:0040FF60                 jmp     ds:__imp_sscanf
.text:0040FF60 sscanf          endp
.text:0040FF60
.text:0040FF60 ; ---------------------------------------------------------------------------
.text:0040FF66                 align 10h
.text:0040FF70
.text:0040FF70 ; =============== S U B R O U T I N E =======================================
.text:0040FF70
.text:0040FF70 ; Attributes: thunk
.text:0040FF70
.text:0040FF70 ; size_t __cdecl strspn(const char *Str, const char *Control)
.text:0040FF70 strspn          proc near               ; CODE XREF: .text:0040C3BA↑p
.text:0040FF70                                         ; .text:0040C5D4↑p ...
.text:0040FF70
.text:0040FF70 Str             = dword ptr  4
.text:0040FF70 Control         = dword ptr  8
.text:0040FF70
.text:0040FF70                 jmp     ds:__imp_strspn
.text:0040FF70 strspn          endp
.text:0040FF70
.text:0040FF70 ; ---------------------------------------------------------------------------
.text:0040FF76                 align 10h
.text:0040FF80
.text:0040FF80 ; =============== S U B R O U T I N E =======================================
.text:0040FF80
.text:0040FF80 ; Attributes: thunk
.text:0040FF80
.text:0040FF80 ; FILE *__cdecl fopen(const char *FileName, const char *Mode)
.text:0040FF80 fopen           proc near               ; CODE XREF: sub_40CE6F+26↑p
.text:0040FF80                                         ; sub_40CE6F+99↑p
.text:0040FF80
.text:0040FF80 FileName        = dword ptr  4
.text:0040FF80 Mode            = dword ptr  8
.text:0040FF80
.text:0040FF80                 jmp     ds:__imp_fopen
.text:0040FF80 fopen           endp
.text:0040FF80
.text:0040FF80 ; ---------------------------------------------------------------------------
.text:0040FF86                 align 10h
.text:0040FF90
.text:0040FF90 ; =============== S U B R O U T I N E =======================================
.text:0040FF90
.text:0040FF90 ; Attributes: thunk
.text:0040FF90
.text:0040FF90 ; char *__cdecl strpbrk(const char *Str, const char *Control)
.text:0040FF90 strpbrk         proc near               ; CODE XREF: sub_40D140+87↑p
.text:0040FF90
.text:0040FF90 Str             = dword ptr  4
.text:0040FF90 Control         = dword ptr  8
.text:0040FF90
.text:0040FF90                 jmp     ds:__imp_strpbrk
.text:0040FF90 strpbrk         endp
.text:0040FF90
.text:0040FF90 ; ---------------------------------------------------------------------------
.text:0040FF96                 align 10h
.text:0040FFA0
.text:0040FFA0 ; =============== S U B R O U T I N E =======================================
.text:0040FFA0
.text:0040FFA0 ; Attributes: thunk
.text:0040FFA0
.text:0040FFA0 ; FILE *__cdecl fdopen(int FileHandle, const char *Format)
.text:0040FFA0 _fdopen         proc near               ; CODE XREF: sub_40D1E0+69↑p
.text:0040FFA0
.text:0040FFA0 FileHandle      = dword ptr  4
.text:0040FFA0 Format          = dword ptr  8
.text:0040FFA0
.text:0040FFA0                 jmp     ds:__imp__fdopen
.text:0040FFA0 _fdopen         endp
.text:0040FFA0
.text:0040FFA0 ; ---------------------------------------------------------------------------
.text:0040FFA6                 align 10h
.text:0040FFB0
.text:0040FFB0 ; =============== S U B R O U T I N E =======================================
.text:0040FFB0
.text:0040FFB0 ; Attributes: thunk
.text:0040FFB0
.text:0040FFB0 ; int __cdecl vsprintf(char *const Buffer, const char *const Format, va_list ArgList)
.text:0040FFB0 vsprintf        proc near               ; CODE XREF: sub_40DD10+5B↑p
.text:0040FFB0
.text:0040FFB0 Buffer          = dword ptr  4
.text:0040FFB0 Format          = dword ptr  8
.text:0040FFB0 ArgList         = dword ptr  0Ch
.text:0040FFB0
.text:0040FFB0                 jmp     ds:__imp_vsprintf
.text:0040FFB0 vsprintf        endp
.text:0040FFB0
.text:0040FFB0 ; ---------------------------------------------------------------------------
.text:0040FFB6                 align 10h
.text:0040FFC0
.text:0040FFC0 ; =============== S U B R O U T I N E =======================================
.text:0040FFC0
.text:0040FFC0 ; Attributes: thunk
.text:0040FFC0
.text:0040FFC0 ; unsigned int __cdecl strtoul(const char *String, char **EndPtr, int Radix)
.text:0040FFC0 strtoul         proc near               ; CODE XREF: sub_40DD10+A7↑p
.text:0040FFC0                                         ; sub_40DD10+20F↑p
.text:0040FFC0
.text:0040FFC0 String          = dword ptr  4
.text:0040FFC0 EndPtr          = dword ptr  8
.text:0040FFC0 Radix           = dword ptr  0Ch
.text:0040FFC0
.text:0040FFC0                 jmp     ds:__imp_strtoul
.text:0040FFC0 strtoul         endp
.text:0040FFC0
.text:0040FFC0 ; ---------------------------------------------------------------------------
.text:0040FFC6                 align 10h
.text:0040FFD0
.text:0040FFD0 ; =============== S U B R O U T I N E =======================================
.text:0040FFD0
.text:0040FFD0 ; Attributes: thunk
.text:0040FFD0
.text:0040FFD0 ; LPTOP_LEVEL_EXCEPTION_FILTER __stdcall SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.text:0040FFD0 SetUnhandledExceptionFilter proc near   ; CODE XREF: sub_401080+E↑p
.text:0040FFD0
.text:0040FFD0 lpTopLevelExceptionFilter= dword ptr  4
.text:0040FFD0
.text:0040FFD0                 jmp     ds:__imp_SetUnhandledExceptionFilter
.text:0040FFD0 SetUnhandledExceptionFilter endp
.text:0040FFD0
.text:0040FFD0 ; ---------------------------------------------------------------------------
.text:0040FFD6                 align 10h
.text:0040FFE0
.text:0040FFE0 ; =============== S U B R O U T I N E =======================================
.text:0040FFE0
.text:0040FFE0 ; Attributes: noreturn thunk
.text:0040FFE0
.text:0040FFE0 ; void __stdcall __noreturn ExitProcess(UINT uExitCode)
.text:0040FFE0 ExitProcess     proc near               ; CODE XREF: .text:00401174↑p
.text:0040FFE0
.text:0040FFE0 uExitCode       = dword ptr  4
.text:0040FFE0
.text:0040FFE0                 jmp     ds:__imp_ExitProcess
.text:0040FFE0 ExitProcess     endp
.text:0040FFE0
.text:0040FFE0 ; ---------------------------------------------------------------------------
.text:0040FFE6                 align 10h
.text:0040FFF0
.text:0040FFF0 ; =============== S U B R O U T I N E =======================================
.text:0040FFF0
.text:0040FFF0 ; Attributes: thunk
.text:0040FFF0
.text:0040FFF0 ; BOOL __stdcall AreFileApisANSI()
.text:0040FFF0 AreFileApisANSI proc near               ; CODE XREF: sub_406D40+89↑p
.text:0040FFF0                 jmp     ds:__imp_AreFileApisANSI
.text:0040FFF0 AreFileApisANSI endp
.text:0040FFF0
.text:0040FFF0 ; ---------------------------------------------------------------------------
.text:0040FFF6                 align 10h
.text:00410000
.text:00410000 ; =============== S U B R O U T I N E =======================================
.text:00410000
.text:00410000 ; Attributes: thunk
.text:00410000
.text:00410000 ; int __stdcall MultiByteToWideChar(UINT CodePage, DWORD dwFlags, LPCCH lpMultiByteStr, int cbMultiByte, LPWSTR lpWideCharStr, int cchWideChar)
.text:00410000 MultiByteToWideChar proc near           ; CODE XREF: sub_406D40+BD↑p
.text:00410000
.text:00410000 CodePage        = dword ptr  4
.text:00410000 dwFlags         = dword ptr  8
.text:00410000 lpMultiByteStr  = dword ptr  0Ch
.text:00410000 cbMultiByte     = dword ptr  10h
.text:00410000 lpWideCharStr   = dword ptr  14h
.text:00410000 cchWideChar     = dword ptr  18h
.text:00410000
.text:00410000                 jmp     ds:__imp_MultiByteToWideChar
.text:00410000 MultiByteToWideChar endp
.text:00410000
.text:00410000 ; ---------------------------------------------------------------------------
.text:00410006                 align 10h
.text:00410010
.text:00410010 ; =============== S U B R O U T I N E =======================================
.text:00410010
.text:00410010 ; Attributes: thunk
.text:00410010
.text:00410010 ; LPSTR __stdcall lstrcpyA(LPSTR lpString1, LPCSTR lpString2)
.text:00410010 lstrcpyA        proc near               ; CODE XREF: sub_406D40+128↑p
.text:00410010
.text:00410010 lpString1       = dword ptr  4
.text:00410010 lpString2       = dword ptr  8
.text:00410010
.text:00410010                 jmp     ds:__imp_lstrcpyA
.text:00410010 lstrcpyA        endp
.text:00410010
.text:00410010 ; ---------------------------------------------------------------------------
.text:00410016                 align 10h
.text:00410020
.text:00410020 ; =============== S U B R O U T I N E =======================================
.text:00410020
.text:00410020 ; Attributes: thunk
.text:00410020
.text:00410020 ; UINT __stdcall SetErrorMode(UINT uMode)
.text:00410020 SetErrorMode    proc near               ; CODE XREF: sub_406EC0+80↑p
.text:00410020                                         ; sub_406EC0+A9↑p ...
.text:00410020
.text:00410020 uMode           = dword ptr  4
.text:00410020
.text:00410020                 jmp     ds:__imp_SetErrorMode
.text:00410020 SetErrorMode    endp
.text:00410020
.text:00410020 ; ---------------------------------------------------------------------------
.text:00410026                 align 10h
.text:00410030
.text:00410030 ; =============== S U B R O U T I N E =======================================
.text:00410030
.text:00410030 ; Attributes: thunk
.text:00410030
.text:00410030 ; HANDLE __stdcall FindFirstFileA(LPCSTR lpFileName, LPWIN32_FIND_DATAA lpFindFileData)
.text:00410030 FindFirstFileA  proc near               ; CODE XREF: _win32_longpath+CA↑p
.text:00410030                                         ; sub_407E20+CE↑p ...
.text:00410030
.text:00410030 lpFileName      = dword ptr  4
.text:00410030 lpFindFileData  = dword ptr  8
.text:00410030
.text:00410030                 jmp     ds:__imp_FindFirstFileA
.text:00410030 FindFirstFileA  endp
.text:00410030
.text:00410030 ; ---------------------------------------------------------------------------
.text:00410036                 align 10h
.text:00410040
.text:00410040 ; =============== S U B R O U T I N E =======================================
.text:00410040
.text:00410040 ; Attributes: thunk
.text:00410040
.text:00410040 ; BOOL __stdcall FindClose(HANDLE hFindFile)
.text:00410040 FindClose       proc near               ; CODE XREF: _win32_longpath+144↑p
.text:00410040                                         ; _win32_longpath+185↑p ...
.text:00410040
.text:00410040 hFindFile       = dword ptr  4
.text:00410040
.text:00410040                 jmp     ds:__imp_FindClose
.text:00410040 FindClose       endp
.text:00410040
.text:00410040 ; ---------------------------------------------------------------------------
.text:00410046                 align 10h
.text:00410050
.text:00410050 ; =============== S U B R O U T I N E =======================================
.text:00410050
.text:00410050 ; Attributes: thunk
.text:00410050
.text:00410050 ; DWORD __stdcall GetModuleFileNameA(HMODULE hModule, LPSTR lpFilename, DWORD nSize)
.text:00410050 GetModuleFileNameA proc near            ; CODE XREF: sub_407830+1C↑p
.text:00410050
.text:00410050 hModule         = dword ptr  4
.text:00410050 lpFilename      = dword ptr  8
.text:00410050 nSize           = dword ptr  0Ch
.text:00410050
.text:00410050                 jmp     ds:__imp_GetModuleFileNameA
.text:00410050 GetModuleFileNameA endp
.text:00410050
.text:00410050 ; ---------------------------------------------------------------------------
.text:00410056                 align 10h
.text:00410060
.text:00410060 ; =============== S U B R O U T I N E =======================================
.text:00410060
.text:00410060 ; Attributes: thunk
.text:00410060
.text:00410060 ; HMODULE __stdcall GetModuleHandleA(LPCSTR lpModuleName)
.text:00410060 GetModuleHandleA proc near              ; CODE XREF: .text:00407A1E↑p
.text:00410060                                         ; sub_407E20+18↑p ...
.text:00410060
.text:00410060 lpModuleName    = dword ptr  4
.text:00410060
.text:00410060                 jmp     ds:__imp_GetModuleHandleA
.text:00410060 GetModuleHandleA endp
.text:00410060
.text:00410060 ; ---------------------------------------------------------------------------
.text:00410066                 align 10h
.text:00410070
.text:00410070 ; =============== S U B R O U T I N E =======================================
.text:00410070
.text:00410070 ; Attributes: thunk
.text:00410070
.text:00410070 ; FARPROC __stdcall GetProcAddress(HMODULE hModule, LPCSTR lpProcName)
.text:00410070 GetProcAddress  proc near               ; CODE XREF: .text:00407A31↑p
.text:00410070                                         ; sub_407E20+33↑p ...
.text:00410070
.text:00410070 hModule         = dword ptr  4
.text:00410070 lpProcName      = dword ptr  8
.text:00410070
.text:00410070                 jmp     ds:__imp_GetProcAddress
.text:00410070 GetProcAddress  endp
.text:00410070
.text:00410070 ; ---------------------------------------------------------------------------
.text:00410076                 align 10h
.text:00410080
.text:00410080 ; =============== S U B R O U T I N E =======================================
.text:00410080
.text:00410080 ; Attributes: thunk
.text:00410080
.text:00410080 ; DWORD __stdcall GetShortPathNameA(LPCSTR lpszLongPath, LPSTR lpszShortPath, DWORD cchBuffer)
.text:00410080 GetShortPathNameA proc near             ; CODE XREF: .text:00407AB6↑p
.text:00410080                                         ; .text:00407AE0↑p
.text:00410080
.text:00410080 lpszLongPath    = dword ptr  4
.text:00410080 lpszShortPath   = dword ptr  8
.text:00410080 cchBuffer       = dword ptr  0Ch
.text:00410080
.text:00410080                 jmp     ds:__imp_GetShortPathNameA
.text:00410080 GetShortPathNameA endp
.text:00410080
.text:00410080 ; ---------------------------------------------------------------------------
.text:00410086                 align 10h
.text:00410090
.text:00410090 ; =============== S U B R O U T I N E =======================================
.text:00410090
.text:00410090 ; Attributes: thunk
.text:00410090
.text:00410090 ; DWORD __stdcall GetLastError()
.text:00410090 GetLastError    proc near               ; CODE XREF: sub_407DC0+3↑p
.text:00410090                                         ; sub_4085E0:loc_408869↑p ...
.text:00410090                 jmp     ds:__imp_GetLastError
.text:00410090 GetLastError    endp
.text:00410090
.text:00410090 ; ---------------------------------------------------------------------------
.text:00410096                 align 10h
.text:004100A0
.text:004100A0 ; =============== S U B R O U T I N E =======================================
.text:004100A0
.text:004100A0 ; Attributes: thunk
.text:004100A0
.text:004100A0 ; DWORD __stdcall GetFileAttributesA(LPCSTR lpFileName)
.text:004100A0 GetFileAttributesA proc near            ; CODE XREF: sub_407E20+47↑p
.text:004100A0                                         ; sub_40B130+62↑p
.text:004100A0
.text:004100A0 lpFileName      = dword ptr  4
.text:004100A0
.text:004100A0                 jmp     ds:__imp_GetFileAttributesA
.text:004100A0 GetFileAttributesA endp
.text:004100A0
.text:004100A0 ; ---------------------------------------------------------------------------
.text:004100A6                 align 10h
.text:004100B0
.text:004100B0 ; =============== S U B R O U T I N E =======================================
.text:004100B0
.text:004100B0 ; Attributes: thunk
.text:004100B0
.text:004100B0 ; BOOL __stdcall FreeLibrary(HMODULE hLibModule)
.text:004100B0 FreeLibrary     proc near               ; CODE XREF: sub_407E20+A4↑p
.text:004100B0                                         ; sub_407F90+11D↑p ...
.text:004100B0
.text:004100B0 hLibModule      = dword ptr  4
.text:004100B0
.text:004100B0                 jmp     ds:__imp_FreeLibrary
.text:004100B0 FreeLibrary     endp
.text:004100B0
.text:004100B0 ; ---------------------------------------------------------------------------
.text:004100B6                 align 10h
.text:004100C0
.text:004100C0 ; =============== S U B R O U T I N E =======================================
.text:004100C0
.text:004100C0 ; Attributes: thunk
.text:004100C0
.text:004100C0 ; HMODULE __stdcall LoadLibraryA(LPCSTR lpLibFileName)
.text:004100C0 LoadLibraryA    proc near               ; CODE XREF: sub_407F90+13↑p
.text:004100C0                                         ; sub_4085E0+134↑p ...
.text:004100C0
.text:004100C0 lpLibFileName   = dword ptr  4
.text:004100C0
.text:004100C0                 jmp     ds:__imp_LoadLibraryA
.text:004100C0 LoadLibraryA    endp
.text:004100C0
.text:004100C0 ; ---------------------------------------------------------------------------
.text:004100C6                 align 10h
.text:004100D0
.text:004100D0 ; =============== S U B R O U T I N E =======================================
.text:004100D0
.text:004100D0 ; Attributes: thunk
.text:004100D0
.text:004100D0 ; BOOL __stdcall FindNextFileA(HANDLE hFindFile, LPWIN32_FIND_DATAA lpFindFileData)
.text:004100D0 FindNextFileA   proc near               ; CODE XREF: sub_407F90+FF↑p
.text:004100D0
.text:004100D0 hFindFile       = dword ptr  4
.text:004100D0 lpFindFileData  = dword ptr  8
.text:004100D0
.text:004100D0                 jmp     ds:__imp_FindNextFileA
.text:004100D0 FindNextFileA   endp
.text:004100D0
.text:004100D0 ; ---------------------------------------------------------------------------
.text:004100D6                 align 10h
.text:004100E0
.text:004100E0 ; =============== S U B R O U T I N E =======================================
.text:004100E0
.text:004100E0 ; Attributes: thunk
.text:004100E0
.text:004100E0 ; DWORD __stdcall GetFileType(HANDLE hFile)
.text:004100E0 GetFileType     proc near               ; CODE XREF: sub_408110+43↑p
.text:004100E0                                         ; .text:00408DCA↑p
.text:004100E0
.text:004100E0 hFile           = dword ptr  4
.text:004100E0
.text:004100E0                 jmp     ds:__imp_GetFileType
.text:004100E0 GetFileType     endp
.text:004100E0
.text:004100E0 ; ---------------------------------------------------------------------------
.text:004100E6                 align 10h
.text:004100F0
.text:004100F0 ; =============== S U B R O U T I N E =======================================
.text:004100F0
.text:004100F0 ; Attributes: thunk
.text:004100F0
.text:004100F0 ; BOOL __stdcall GetFileInformationByHandle(HANDLE hFile, LPBY_HANDLE_FILE_INFORMATION lpFileInformation)
.text:004100F0 GetFileInformationByHandle proc near    ; CODE XREF: sub_408110+69↑p
.text:004100F0
.text:004100F0 hFile           = dword ptr  4
.text:004100F0 lpFileInformation= dword ptr  8
.text:004100F0
.text:004100F0                 jmp     ds:__imp_GetFileInformationByHandle
.text:004100F0 GetFileInformationByHandle endp
.text:004100F0
.text:004100F0 ; ---------------------------------------------------------------------------
.text:004100F6                 align 10h
.text:00410100
.text:00410100 ; =============== S U B R O U T I N E =======================================
.text:00410100
.text:00410100 ; Attributes: thunk
.text:00410100
.text:00410100 ; DWORD __stdcall GetFileSize(HANDLE hFile, LPDWORD lpFileSizeHigh)
.text:00410100 GetFileSize     proc near               ; CODE XREF: sub_408110+3F2↑p
.text:00410100
.text:00410100 hFile           = dword ptr  4
.text:00410100 lpFileSizeHigh  = dword ptr  8
.text:00410100
.text:00410100                 jmp     ds:__imp_GetFileSize
.text:00410100 GetFileSize     endp
.text:00410100
.text:00410100 ; ---------------------------------------------------------------------------
.text:00410106                 align 10h
.text:00410110
.text:00410110 ; =============== S U B R O U T I N E =======================================
.text:00410110
.text:00410110 ; Attributes: thunk
.text:00410110
.text:00410110 ; BOOL __stdcall PeekNamedPipe(HANDLE hNamedPipe, LPVOID lpBuffer, DWORD nBufferSize, LPDWORD lpBytesRead, LPDWORD lpTotalBytesAvail, LPDWORD lpBytesLeftThisMessage)
.text:00410110 PeekNamedPipe   proc near               ; CODE XREF: sub_408110+439↑p
.text:00410110
.text:00410110 hNamedPipe      = dword ptr  4
.text:00410110 lpBuffer        = dword ptr  8
.text:00410110 nBufferSize     = dword ptr  0Ch
.text:00410110 lpBytesRead     = dword ptr  10h
.text:00410110 lpTotalBytesAvail= dword ptr  14h
.text:00410110 lpBytesLeftThisMessage= dword ptr  18h
.text:00410110
.text:00410110                 jmp     ds:__imp_PeekNamedPipe
.text:00410110 PeekNamedPipe   endp
.text:00410110
.text:00410110 ; ---------------------------------------------------------------------------
.text:00410116                 align 10h
.text:00410120
.text:00410120 ; =============== S U B R O U T I N E =======================================
.text:00410120
.text:00410120 ; Attributes: thunk
.text:00410120
.text:00410120 ; UINT __stdcall GetDriveTypeA(LPCSTR lpRootPathName)
.text:00410120 GetDriveTypeA   proc near               ; CODE XREF: sub_4085E0+4C↑p
.text:00410120
.text:00410120 lpRootPathName  = dword ptr  4
.text:00410120
.text:00410120                 jmp     ds:__imp_GetDriveTypeA
.text:00410120 GetDriveTypeA   endp
.text:00410120
.text:00410120 ; ---------------------------------------------------------------------------
.text:00410126                 align 10h
.text:00410130
.text:00410130 ; =============== S U B R O U T I N E =======================================
.text:00410130
.text:00410130 ; Attributes: thunk
.text:00410130
.text:00410130 ; BOOL __stdcall GetVolumeInformationA(LPCSTR lpRootPathName, LPSTR lpVolumeNameBuffer, DWORD nVolumeNameSize, LPDWORD lpVolumeSerialNumber, LPDWORD lpMaximumComponentLength, LPDWORD lpFileSystemFlags, LPSTR lpFileSystemNameBuffer, DWORD nFileSystemNameSize)
.text:00410130 GetVolumeInformationA proc near         ; CODE XREF: sub_408AE0+64↑p
.text:00410130                                         ; .text:0040908C↑p ...
.text:00410130
.text:00410130 lpRootPathName  = dword ptr  4
.text:00410130 lpVolumeNameBuffer= dword ptr  8
.text:00410130 nVolumeNameSize = dword ptr  0Ch
.text:00410130 lpVolumeSerialNumber= dword ptr  10h
.text:00410130 lpMaximumComponentLength= dword ptr  14h
.text:00410130 lpFileSystemFlags= dword ptr  18h
.text:00410130 lpFileSystemNameBuffer= dword ptr  1Ch
.text:00410130 nFileSystemNameSize= dword ptr  20h
.text:00410130
.text:00410130                 jmp     ds:__imp_GetVolumeInformationA
.text:00410130 GetVolumeInformationA endp
.text:00410130
.text:00410130 ; ---------------------------------------------------------------------------
.text:00410136                 align 10h
.text:00410140
.text:00410140 ; =============== S U B R O U T I N E =======================================
.text:00410140
.text:00410140 ; Attributes: thunk
.text:00410140
.text:00410140 ; HANDLE __stdcall CreateFileA(LPCSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile)
.text:00410140 CreateFileA     proc near               ; CODE XREF: sub_406FA0+28D6↑p
.text:00410140                                         ; .text:0040B803↑p ...
.text:00410140
.text:00410140 lpFileName      = dword ptr  4
.text:00410140 dwDesiredAccess = dword ptr  8
.text:00410140 dwShareMode     = dword ptr  0Ch
.text:00410140 lpSecurityAttributes= dword ptr  10h
.text:00410140 dwCreationDisposition= dword ptr  14h
.text:00410140 dwFlagsAndAttributes= dword ptr  18h
.text:00410140 hTemplateFile   = dword ptr  1Ch
.text:00410140
.text:00410140                 jmp     ds:__imp_CreateFileA
.text:00410140 CreateFileA     endp
.text:00410140
.text:00410140 ; ---------------------------------------------------------------------------
.text:00410146                 align 10h
.text:00410150
.text:00410150 ; =============== S U B R O U T I N E =======================================
.text:00410150
.text:00410150 ; Attributes: thunk
.text:00410150
.text:00410150 ; BOOL __stdcall CloseHandle(HANDLE hObject)
.text:00410150 CloseHandle     proc near               ; CODE XREF: sub_406FA0+28F1↑p
.text:00410150                                         ; .text:0040B879↑p ...
.text:00410150
.text:00410150 hObject         = dword ptr  4
.text:00410150
.text:00410150                 jmp     ds:__imp_CloseHandle
.text:00410150 CloseHandle     endp
.text:00410150
.text:00410150 ; ---------------------------------------------------------------------------
.text:00410156                 align 10h
.text:00410160
.text:00410160 ; =============== S U B R O U T I N E =======================================
.text:00410160
.text:00410160 ; Attributes: thunk
.text:00410160
.text:00410160 ; int __stdcall lstrcmpiA(LPCSTR lpString1, LPCSTR lpString2)
.text:00410160 lstrcmpiA       proc near               ; CODE XREF: .text:0040A94B↑p
.text:00410160                                         ; .text:0040A962↑p ...
.text:00410160
.text:00410160 lpString1       = dword ptr  4
.text:00410160 lpString2       = dword ptr  8
.text:00410160
.text:00410160                 jmp     ds:__imp_lstrcmpiA
.text:00410160 lstrcmpiA       endp
.text:00410160
.text:00410160 ; ---------------------------------------------------------------------------
.text:00410166                 align 10h
.text:00410170
.text:00410170 ; =============== S U B R O U T I N E =======================================
.text:00410170
.text:00410170 ; Attributes: thunk
.text:00410170
.text:00410170 ; DWORD __stdcall GetVersion()
.text:00410170 GetVersion      proc near               ; CODE XREF: .text:0040ACD3↑p
.text:00410170                 jmp     ds:__imp_GetVersion
.text:00410170 GetVersion      endp
.text:00410170
.text:00410170 ; ---------------------------------------------------------------------------
.text:00410176                 align 10h
.text:00410180
.text:00410180 ; =============== S U B R O U T I N E =======================================
.text:00410180
.text:00410180 ; Attributes: thunk
.text:00410180
.text:00410180 ; BOOL __stdcall GetVersionExA(LPOSVERSIONINFOA lpVersionInformation)
.text:00410180 GetVersionExA   proc near               ; CODE XREF: sub_40AD60+32↑p
.text:00410180                                         ; sub_40AD60+20B↑p
.text:00410180
.text:00410180 lpVersionInformation= dword ptr  4
.text:00410180
.text:00410180                 jmp     ds:__imp_GetVersionExA
.text:00410180 GetVersionExA   endp
.text:00410180
.text:00410180 ; ---------------------------------------------------------------------------
.text:00410186                 align 10h
.text:00410190
.text:00410190 ; =============== S U B R O U T I N E =======================================
.text:00410190
.text:00410190 ; Attributes: thunk
.text:00410190
.text:00410190 ; DWORD __stdcall GetFullPathNameA(LPCSTR lpFileName, DWORD nBufferLength, LPSTR lpBuffer, LPSTR *lpFilePart)
.text:00410190 GetFullPathNameA proc near              ; CODE XREF: sub_40B000+45↑p
.text:00410190                                         ; sub_40B000+ED↑p
.text:00410190
.text:00410190 lpFileName      = dword ptr  4
.text:00410190 nBufferLength   = dword ptr  8
.text:00410190 lpBuffer        = dword ptr  0Ch
.text:00410190 lpFilePart      = dword ptr  10h
.text:00410190
.text:00410190                 jmp     ds:__imp_GetFullPathNameA
.text:00410190 GetFullPathNameA endp
.text:00410190
.text:00410190 ; ---------------------------------------------------------------------------
.text:00410196                 align 10h
.text:004101A0
.text:004101A0 ; =============== S U B R O U T I N E =======================================
.text:004101A0
.text:004101A0 ; Attributes: thunk
.text:004101A0
.text:004101A0 ; DWORD __stdcall GetCurrentDirectoryA(DWORD nBufferLength, LPSTR lpBuffer)
.text:004101A0 GetCurrentDirectoryA proc near          ; CODE XREF: .text:0040B4B8↑p
.text:004101A0                                         ; .text:0040B4D4↑p ...
.text:004101A0
.text:004101A0 nBufferLength   = dword ptr  4
.text:004101A0 lpBuffer        = dword ptr  8
.text:004101A0
.text:004101A0                 jmp     ds:__imp_GetCurrentDirectoryA
.text:004101A0 GetCurrentDirectoryA endp
.text:004101A0
.text:004101A0 ; ---------------------------------------------------------------------------
.text:004101A6                 align 10h
.text:004101B0
.text:004101B0 ; =============== S U B R O U T I N E =======================================
.text:004101B0
.text:004101B0 ; Attributes: thunk
.text:004101B0
.text:004101B0 ; BOOL __stdcall DeviceIoControl(HANDLE hDevice, DWORD dwIoControlCode, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesReturned, LPOVERLAPPED lpOverlapped)
.text:004101B0 DeviceIoControl proc near               ; CODE XREF: .text:0040B86C↑p
.text:004101B0                                         ; sub_40BC30+1E5↑p
.text:004101B0
.text:004101B0 hDevice         = dword ptr  4
.text:004101B0 dwIoControlCode = dword ptr  8
.text:004101B0 lpInBuffer      = dword ptr  0Ch
.text:004101B0 nInBufferSize   = dword ptr  10h
.text:004101B0 lpOutBuffer     = dword ptr  14h
.text:004101B0 nOutBufferSize  = dword ptr  18h
.text:004101B0 lpBytesReturned = dword ptr  1Ch
.text:004101B0 lpOverlapped    = dword ptr  20h
.text:004101B0
.text:004101B0                 jmp     ds:__imp_DeviceIoControl
.text:004101B0 DeviceIoControl endp
.text:004101B0
.text:004101B0 ; ---------------------------------------------------------------------------
.text:004101B6                 align 10h
.text:004101C0
.text:004101C0 ; =============== S U B R O U T I N E =======================================
.text:004101C0
.text:004101C0 ; Attributes: thunk
.text:004101C0
.text:004101C0 ; BOOL __stdcall GetDiskFreeSpaceA(LPCSTR lpRootPathName, LPDWORD lpSectorsPerCluster, LPDWORD lpBytesPerSector, LPDWORD lpNumberOfFreeClusters, LPDWORD lpTotalNumberOfClusters)
.text:004101C0 GetDiskFreeSpaceA proc near             ; CODE XREF: .text:0040BBC3↑p
.text:004101C0                                         ; sub_40BC30+7B↑p ...
.text:004101C0
.text:004101C0 lpRootPathName  = dword ptr  4
.text:004101C0 lpSectorsPerCluster= dword ptr  8
.text:004101C0 lpBytesPerSector= dword ptr  0Ch
.text:004101C0 lpNumberOfFreeClusters= dword ptr  10h
.text:004101C0 lpTotalNumberOfClusters= dword ptr  14h
.text:004101C0
.text:004101C0                 jmp     ds:__imp_GetDiskFreeSpaceA
.text:004101C0 GetDiskFreeSpaceA endp
.text:004101C0
.text:004101C0 ; ---------------------------------------------------------------------------
.text:004101C6                 align 10h
.text:004101D0
.text:004101D0 ; =============== S U B R O U T I N E =======================================
.text:004101D0
.text:004101D0 ; Attributes: thunk
.text:004101D0
.text:004101D0 ; BOOL __stdcall SetEndOfFile(HANDLE hFile)
.text:004101D0 SetEndOfFile    proc near               ; CODE XREF: sub_40BED0+53↑p
.text:004101D0
.text:004101D0 hFile           = dword ptr  4
.text:004101D0
.text:004101D0                 jmp     ds:__imp_SetEndOfFile
.text:004101D0 SetEndOfFile    endp
.text:004101D0
.text:004101D0 ; ---------------------------------------------------------------------------
.text:004101D6                 align 10h
.text:004101E0
.text:004101E0 ; =============== S U B R O U T I N E =======================================
.text:004101E0
.text:004101E0 ; Attributes: thunk
.text:004101E0
.text:004101E0 ; BOOL __stdcall UnlockFile(HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToUnlockLow, DWORD nNumberOfBytesToUnlockHigh)
.text:004101E0 UnlockFile      proc near               ; CODE XREF: sub_40BF80+B4↑p
.text:004101E0                                         ; sub_40D0E0+40↑p
.text:004101E0
.text:004101E0 hFile           = dword ptr  4
.text:004101E0 dwFileOffsetLow = dword ptr  8
.text:004101E0 dwFileOffsetHigh= dword ptr  0Ch
.text:004101E0 nNumberOfBytesToUnlockLow= dword ptr  10h
.text:004101E0 nNumberOfBytesToUnlockHigh= dword ptr  14h
.text:004101E0
.text:004101E0                 jmp     ds:__imp_UnlockFile
.text:004101E0 UnlockFile      endp
.text:004101E0
.text:004101E0 ; ---------------------------------------------------------------------------
.text:004101E6                 align 10h
.text:004101F0
.text:004101F0 ; =============== S U B R O U T I N E =======================================
.text:004101F0
.text:004101F0 ; Attributes: thunk
.text:004101F0
.text:004101F0 ; BOOL __stdcall LockFile(HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToLockLow, DWORD nNumberOfBytesToLockHigh)
.text:004101F0 LockFile        proc near               ; CODE XREF: sub_40BF80+F7↑p
.text:004101F0
.text:004101F0 hFile           = dword ptr  4
.text:004101F0 dwFileOffsetLow = dword ptr  8
.text:004101F0 dwFileOffsetHigh= dword ptr  0Ch
.text:004101F0 nNumberOfBytesToLockLow= dword ptr  10h
.text:004101F0 nNumberOfBytesToLockHigh= dword ptr  14h
.text:004101F0
.text:004101F0                 jmp     ds:__imp_LockFile
.text:004101F0 LockFile        endp
.text:004101F0
.text:004101F0 ; ---------------------------------------------------------------------------
.text:004101F6                 align 10h
.text:00410200
.text:00410200 ; =============== S U B R O U T I N E =======================================
.text:00410200
.text:00410200 ; Attributes: thunk
.text:00410200
.text:00410200 ; DWORD __stdcall GetLogicalDriveStringsA(DWORD nBufferLength, LPSTR lpBuffer)
.text:00410200 GetLogicalDriveStringsA proc near       ; CODE XREF: .text:0040C72F↑p
.text:00410200                                         ; .text:0040C75E↑p ...
.text:00410200
.text:00410200 nBufferLength   = dword ptr  4
.text:00410200 lpBuffer        = dword ptr  8
.text:00410200
.text:00410200                 jmp     ds:__imp_GetLogicalDriveStringsA
.text:00410200 GetLogicalDriveStringsA endp
.text:00410200
.text:00410200 ; ---------------------------------------------------------------------------
.text:00410206                 align 10h
.text:00410210
.text:00410210 ; =============== S U B R O U T I N E =======================================
.text:00410210
.text:00410210 ; Attributes: thunk
.text:00410210
.text:00410210 ; HANDLE __stdcall GetProcessHeap()
.text:00410210 GetProcessHeap  proc near               ; CODE XREF: .text:0040C739↑p
.text:00410210                                         ; sub_40CE10+24↑p ...
.text:00410210                 jmp     ds:__imp_GetProcessHeap
.text:00410210 GetProcessHeap  endp
.text:00410210
.text:00410210 ; ---------------------------------------------------------------------------
.text:00410216                 align 10h
.text:00410220
.text:00410220 ; =============== S U B R O U T I N E =======================================
.text:00410220
.text:00410220 ; Attributes: thunk
.text:00410220
.text:00410220 ; LPVOID __stdcall HeapAlloc(HANDLE hHeap, DWORD dwFlags, SIZE_T dwBytes)
.text:00410220 HeapAlloc       proc near               ; CODE XREF: .text:0040C74D↑p
.text:00410220                                         ; sub_40CE10+38↑p ...
.text:00410220
.text:00410220 hHeap           = dword ptr  4
.text:00410220 dwFlags         = dword ptr  8
.text:00410220 dwBytes         = dword ptr  0Ch
.text:00410220
.text:00410220                 jmp     ds:__imp_HeapAlloc
.text:00410220 HeapAlloc       endp
.text:00410220
.text:00410220 ; ---------------------------------------------------------------------------
.text:00410226                 align 10h
.text:00410230
.text:00410230 ; =============== S U B R O U T I N E =======================================
.text:00410230
.text:00410230 ; Attributes: thunk
.text:00410230
.text:00410230 ; BOOL __stdcall HeapFree(HANDLE hHeap, DWORD dwFlags, LPVOID lpMem)
.text:00410230 HeapFree        proc near               ; CODE XREF: .text:0040CF4D↑p
.text:00410230
.text:00410230 hHeap           = dword ptr  4
.text:00410230 dwFlags         = dword ptr  8
.text:00410230 lpMem           = dword ptr  0Ch
.text:00410230
.text:00410230                 jmp     ds:__imp_HeapFree
.text:00410230 HeapFree        endp
.text:00410230
.text:00410230 ; ---------------------------------------------------------------------------
.text:00410236                 align 10h
.text:00410240
.text:00410240 ; =============== S U B R O U T I N E =======================================
.text:00410240
.text:00410240 ; Attributes: thunk
.text:00410240
.text:00410240 ; BOOL __stdcall CreateDirectoryA(LPCSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes)
.text:00410240 CreateDirectoryA proc near              ; CODE XREF: sub_40DA60+22↑p
.text:00410240
.text:00410240 lpPathName      = dword ptr  4
.text:00410240 lpSecurityAttributes= dword ptr  8
.text:00410240
.text:00410240                 jmp     ds:__imp_CreateDirectoryA
.text:00410240 CreateDirectoryA endp
.text:00410240
.text:00410240 ; ---------------------------------------------------------------------------
.text:00410246                 align 10h
.text:00410250
.text:00410250 ; =============== S U B R O U T I N E =======================================
.text:00410250
.text:00410250 ; Attributes: thunk
.text:00410250
.text:00410250 ; DWORD __stdcall GetTimeZoneInformation(LPTIME_ZONE_INFORMATION lpTimeZoneInformation)
.text:00410250 GetTimeZoneInformation proc near        ; CODE XREF: sub_40DB60+22↑p
.text:00410250
.text:00410250 lpTimeZoneInformation= dword ptr  4
.text:00410250
.text:00410250                 jmp     ds:__imp_GetTimeZoneInformation
.text:00410250 GetTimeZoneInformation endp
.text:00410250
.text:00410250 ; ---------------------------------------------------------------------------
.text:00410256                 align 10h
.text:00410260
.text:00410260 ; =============== S U B R O U T I N E =======================================
.text:00410260
.text:00410260 ; Attributes: thunk
.text:00410260
.text:00410260 ; void __stdcall GetSystemTimeAsFileTime(LPFILETIME lpSystemTimeAsFileTime)
.text:00410260 GetSystemTimeAsFileTime proc near       ; CODE XREF: sub_40DB60+4F↑p
.text:00410260
.text:00410260 lpSystemTimeAsFileTime= dword ptr  4
.text:00410260
.text:00410260                 jmp     ds:__imp_GetSystemTimeAsFileTime
.text:00410260 GetSystemTimeAsFileTime endp
.text:00410260
.text:00410260 ; ---------------------------------------------------------------------------
.text:00410266                 align 10h
.text:00410270
.text:00410270 ; =============== S U B R O U T I N E =======================================
.text:00410270
.text:00410270 ; Attributes: thunk
.text:00410270
.text:00410270 ; LSTATUS __stdcall RegOpenKeyExA(HKEY hKey, LPCSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult)
.text:00410270 RegOpenKeyExA   proc near               ; CODE XREF: .text:0040A8D1↑p
.text:00410270
.text:00410270 hKey            = dword ptr  4
.text:00410270 lpSubKey        = dword ptr  8
.text:00410270 ulOptions       = dword ptr  0Ch
.text:00410270 samDesired      = dword ptr  10h
.text:00410270 phkResult       = dword ptr  14h
.text:00410270
.text:00410270                 jmp     ds:__imp_RegOpenKeyExA
.text:00410270 RegOpenKeyExA   endp
.text:00410270
.text:00410270 ; ---------------------------------------------------------------------------
.text:00410276                 align 10h
.text:00410280
.text:00410280 ; =============== S U B R O U T I N E =======================================
.text:00410280
.text:00410280 ; Attributes: thunk
.text:00410280
.text:00410280 ; LSTATUS __stdcall RegQueryValueExA(HKEY hKey, LPCSTR lpValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData)
.text:00410280 RegQueryValueExA proc near              ; CODE XREF: .text:0040A914↑p
.text:00410280
.text:00410280 hKey            = dword ptr  4
.text:00410280 lpValueName     = dword ptr  8
.text:00410280 lpReserved      = dword ptr  0Ch
.text:00410280 lpType          = dword ptr  10h
.text:00410280 lpData          = dword ptr  14h
.text:00410280 lpcbData        = dword ptr  18h
.text:00410280
.text:00410280                 jmp     ds:__imp_RegQueryValueExA
.text:00410280 RegQueryValueExA endp
.text:00410280
.text:00410280 ; ---------------------------------------------------------------------------
.text:00410286                 align 10h
.text:00410290
.text:00410290 ; =============== S U B R O U T I N E =======================================
.text:00410290
.text:00410290 ; Attributes: thunk
.text:00410290
.text:00410290 ; LSTATUS __stdcall RegCloseKey(HKEY hKey)
.text:00410290 RegCloseKey     proc near               ; CODE XREF: .text:0040A938↑p
.text:00410290
.text:00410290 hKey            = dword ptr  4
.text:00410290
.text:00410290                 jmp     ds:__imp_RegCloseKey
.text:00410290 RegCloseKey     endp
.text:00410290
.text:00410290 ; ---------------------------------------------------------------------------
.text:00410296                 db 2 dup(90h)
.text:00410298                 dd 2 dup(0)
.text:004102A0                 dd 21400h, 0
.text:004102A8                 dd 0C0h, 46000000h
.text:004102B0 ; const IID rclsid
.text:004102B0 rclsid          dd 21401h               ; Data1
.text:004102B0                                         ; DATA XREF: sub_406D40+4B↑o
.text:004102B0                 dw 0                    ; Data2
.text:004102B0                 dw 0                    ; Data3
.text:004102B0                 db 0C0h, 6 dup(0), 46h  ; Data4
.text:004102C0                 dd 214A0h, 0
.text:004102C8                 dd 0C0h, 46000000h, 214A1h, 0
.text:004102D8                 dd 0C0h, 46000000h, 214D0h, 0
.text:004102E8                 dd 0C0h, 46000000h, 214D1h, 0
.text:004102F8                 dd 0C0h, 46000000h, 214D2h, 0
.text:00410308                 dd 0C0h, 46000000h, 214E1h, 0
.text:00410318                 dd 0C0h, 46000000h, 214E2h, 0
.text:00410328                 dd 0C0h, 46000000h, 214E3h, 0
.text:00410338                 dd 0C0h, 46000000h, 214E4h, 0
.text:00410348                 dd 0C0h, 46000000h, 21500h, 0
.text:00410358                 dd 0C0h, 46000000h, 214E5h, 0
.text:00410368                 dd 0C0h, 46000000h, 214E6h, 0
.text:00410378                 dd 0C0h, 46000000h, 214E8h, 0
.text:00410388                 dd 0C0h, 46000000h, 214E9h, 0
.text:00410398                 dd 0C0h, 46000000h, 214EAh, 0
.text:004103A8                 dd 0C0h, 46000000h, 214EBh, 0
.text:004103B8                 dd 0C0h, 46000000h
.text:004103C0 ; const IID riid
.text:004103C0 riid            dd 214EEh               ; Data1
.text:004103C0                                         ; DATA XREF: sub_406D40+2B↑o
.text:004103C0                 dw 0                    ; Data2
.text:004103C0                 dw 0                    ; Data3
.text:004103C0                 db 0C0h, 6 dup(0), 46h  ; Data4
.text:004103D0                 dd 214EFh, 0
.text:004103D8                 dd 0C0h, 46000000h, 214F0h, 0
.text:004103E8                 dd 0C0h, 46000000h, 214F1h, 0
.text:004103F8                 dd 0C0h, 46000000h, 214F2h, 0
.text:00410408                 dd 0C0h, 46000000h, 214F3h, 0
.text:00410418                 dd 0C0h, 46000000h, 214F4h, 0
.text:00410428                 dd 0C0h, 46000000h, 214F5h, 0
.text:00410438                 dd 0C0h, 46000000h, 214F6h, 0
.text:00410448                 dd 0C0h, 46000000h, 214F7h, 0
.text:00410458                 dd 0C0h, 46000000h, 214F8h, 0
.text:00410468                 dd 0C0h, 46000000h, 214F9h, 0
.text:00410478                 dd 0C0h, 46000000h, 214FAh, 0
.text:00410488                 dd 0C0h, 46000000h, 214FBh, 0
.text:00410498                 dd 0C0h, 46000000h, 214FCh, 0
.text:004104A8                 dd 0C0h, 46000000h, 88E39E80h, 11CF3578h, 869AEh, 62122E2Bh
.text:004104A8                 dd 93F2F68Ch, 11D31D1Bh, 0C0000EA3h, 0D1AB794Fh, 1AC3D9F0h
.text:004104A8                 dd 11D1175Ch, 6000BE95h, 4FEA9797h, 0CEF04FDFh, 11D2FE72h
.text:004104A8                 dd 0C000A587h, 0CF37684Fh, 1E18D10h, 11D24D8Bh, 60005D85h
.text:004104A8                 dd 67930508h, 0EAB22AC0h, 11CF30C1h, 0EBA7h, 0BAE5BC0h
.text:004104A8                 dd 0EAB22AC1h, 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0EAB22AC2h
.text:004104A8                 dd 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0EAB22AC3h, 11CF30C1h
.text:004104A8                 dd 0EBA7h, 0BAE5BC0h, 0EAB22AC4h, 11CF30C1h, 0EBA7h, 0BAE5BC0h
.text:004104A8                 dd 0EAB22AC5h, 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0EAB22AC6h
.text:004104A8                 dd 11CF30C1h, 0EBA7h, 0BAE5BC0h, 2DF07h, 0
.text:00410578                 dd 0C0h, 46000000h, 2DF05h, 0
.text:00410588                 dd 0C0h, 46000000h, 2DF06h, 0
.text:00410598                 dd 0C0h, 46000000h, 2DF01h, 0
.text:004105A8                 dd 0C0h, 46000000h, 2DF09h, 0
.text:004105B8                 dd 0C0h, 46000000h, 0B091E540h, 11CF83E3h, 200013A7h, 6297D7AFh
.text:004105B8                 dd 0FBF23B40h, 101BE3F0h, 0AA008884h, 0F8563E00h, 0FBF23B80h
.text:004105B8                 dd 101BE3F0h, 0AA008884h, 0F8563E00h, 4657278Ah, 11D2411Bh
.text:004105B8                 dd 0C0009A83h, 0D018D94Fh, 4657278Bh, 11D2411Bh, 0C0009A83h
.text:004105B8                 dd 0D018D94Fh, 0DE5BF786h, 11D2477Ah, 0C0009D83h, 0D018D94Fh
.text:004105B8                 dd 0E8025004h, 11D21C42h, 0A0002CBEh, 0A13DA8C9h, 0C6C4200h
.text:004105B8                 dd 11D0C589h, 0C0009A99h, 0E155D64Fh
.text:00410640 dword_410640    dd 0FFFFFFFFh           ; DATA XREF: .text:0040F4E9↑r
.text:00410640                                         ; .text:loc_40F510↑r ...
.text:00410644 dword_410644    dd 0                    ; DATA XREF: .text:loc_40F51C↑r
.text:00410644                                         ; sub_40F540:loc_40F58D↑r
.text:00410648                 dd 0FFFFFFFFh
.text:0041064C dword_41064C    dd 6Dh dup(0)           ; DATA XREF: .data:off_411134↓o
.text:00410800                 dd 200h dup(?)
.text:00410800 _text           ends
.text:00410800
.data:00411000 ; Section 2. (virtual address 00011000)
.data:00411000 ; Virtual size                  : 00000150 (    336.)
.data:00411000 ; Section size in file          : 00000200 (    512.)
.data:00411000 ; Offset to raw data for section: 0000FC00
.data:00411000 ; Flags C0000040: Data Readable Writable
.data:00411000 ; Alignment     : default
.data:00411000 ; ===========================================================================
.data:00411000
.data:00411000 ; Segment type: Pure data
.data:00411000 ; Segment permissions: Read/Write
.data:00411000 _data           segment para public 'DATA' use32
.data:00411000                 assume cs:_data
.data:00411000                 ;org 411000h
.data:00411000 dword_411000    dd 0                    ; DATA XREF: sub_401080+1B↑o
.data:00411000                                         ; sub_401080+CC↑r
.data:00411004 dword_411004    dd 0                    ; DATA XREF: sub_401080+41↑o
.data:00411004                                         ; sub_401080+D4↑r
.data:00411008                 align 10h
.data:00411010 unk_411010      db  20h                 ; DATA XREF: sub_402FC0+DA↑o
.data:00411011 byte_411011     db 78h                  ; DATA XREF: sub_402FC0+23↑w
.data:00411012                 align 4
.data:00411014 dword_411014    dd 80000000h            ; DATA XREF: .text:004032D0↑r
.data:00411014                                         ; .text:004032ED↑r ...
.data:00411018                 align 10h
.data:00411020 dword_411020    dd 1                    ; DATA XREF: sub_401B10:loc_401FBB↑r
.data:00411020                                         ; sub_404600+3↑r ...
.data:00411024 dword_411024    dd 1                    ; DATA XREF: sub_404600+11↑r
.data:00411024                                         ; .text:004046A1↑r
.data:00411028 dword_411028    dd 3Fh                  ; DATA XREF: sub_404600+7D↑w
.data:00411028                                         ; .text:0040470D↑w
.data:0041102C                 align 10h
.data:00411030 ; char *off_411030
.data:00411030 off_411030      dd offset aCopyrightC2005
.data:00411030                                         ; DATA XREF: sub_404C10+DC↑r
.data:00411030                                         ; "Copyright (C) 2005 Free Software Founda"...
.data:00411034                 align 10h
.data:00411040 dword_411040    dd 1                    ; DATA XREF: sub_406700+22↑r
.data:00411040                                         ; sub_406700+65↑r ...
.data:00411044 dword_411044    dd 100h                 ; DATA XREF: sub_406700+3F↑o
.data:00411044                                         ; sub_406700+1A2↑r ...
.data:00411048 off_411048      dd offset unk_4121E0    ; DATA XREF: sub_406700+1AA↑r
.data:0041104C ; void *off_41104C
.data:0041104C off_41104C      dd offset dword_411044  ; DATA XREF: sub_406700+39↑r
.data:0041104C                                         ; sub_406700+60↑w ...
.data:00411050 ; int Code
.data:00411050 Code            dd 1                    ; DATA XREF: sub_404F90+6D↑r
.data:00411050                                         ; sub_404F90+9A↑r ...
.data:00411054                 align 10h
.data:00411060 off_411060      dd offset dword_406CB0  ; DATA XREF: sub_406CC0↑r
.data:00411064                 align 10h
.data:00411070 off_411070      dd offset sub_407060    ; DATA XREF: sub_407040+C↑o
.data:00411070                                         ; sub_407210+26↑o ...
.data:00411074                 dd offset sub_407080
.data:00411078                 dd offset sub_4070D0
.data:0041107C                 dd offset sub_407120
.data:00411080                 dd offset sub_407170
.data:00411084                 dd offset nullsub_1
.data:00411088                 db    0
.data:00411089                 db    0
.data:0041108A                 db    0
.data:0041108B                 db    0
.data:0041108C off_41108C      dd offset off_411070    ; DATA XREF: sub_406FF0+3↑r
.data:0041108C                                         ; sub_407000+7↑r ...
.data:00411090 ; char *FileName
.data:00411090 FileName        dd offset aVarRunUtmp_0 ; DATA XREF: sub_407210+20↑r
.data:00411090                                         ; sub_407210+64↑r ...
.data:00411090                                         ; "/var/run/utmp"
.data:00411094                 align 10h
.data:004110A0 dword_4110A0    dd 200h                 ; DATA XREF: sub_408110+2ED↑r
.data:004110A0                                         ; sub_408110+2F8↑r ...
.data:004110A4 ; char *off_4110A4
.data:004110A4 off_4110A4      dd offset aComExeBatCmd ; DATA XREF: sub_4085E0+3D3↑r
.data:004110A4                                         ; sub_4085E0+400↑r ...
.data:004110A4                                         ; ".com;.exe;.bat;.cmd"
.data:004110A8                 align 10h
.data:004110B0 ; int FileHandle
.data:004110B0 FileHandle      dd 0FFFFFFFFh           ; DATA XREF: sub_409910+3↑r
.data:004110B0                                         ; sub_409910+76↑w ...
.data:004110B4 off_4110B4      dd offset sub_409910    ; DATA XREF: sub_407060+3↑r
.data:004110B4                                         ; sub_407060+D↑o ...
.data:004110B8 off_4110B8      dd offset sub_409A50    ; DATA XREF: sub_407080+2A↑r
.data:004110BC off_4110BC      dd offset sub_40A1E0    ; DATA XREF: sub_4070D0+33↑r
.data:004110C0 off_4110C0      dd offset sub_409BA0    ; DATA XREF: sub_407120+33↑r
.data:004110C4 off_4110C4      dd offset sub_409D50    ; DATA XREF: sub_407170+21↑r
.data:004110C8                 dd offset sub_40A2A0
.data:004110CC                 dd offset sub_40A080
.data:004110D0 dword_4110D0    dd 1                    ; DATA XREF: .text:loc_40A787↑r
.data:004110D0                                         ; sub_40AD60+202↑w
.data:004110D4                 align 10h
.data:004110E0 byte_4110E0     db 41h                  ; DATA XREF: sub_40B330+6B↑w
.data:004110E0                                         ; sub_40B330:loc_40B444↑r
.data:004110E1                 align 10h
.data:004110F0 off_4110F0      dd offset aNotset       ; DATA XREF: .text:0040C30A↑r
.data:004110F0                                         ; .text:0040CF52↑r
.data:004110F0                                         ; "notset"
.data:004110F4 off_4110F4      dd offset aNotset       ; DATA XREF: .text:0040C322↑r
.data:004110F4                                         ; .text:0040C344↑r ...
.data:004110F4                                         ; "notset"
.data:004110F8                 align 10h
.data:00411100 dword_411100    dd 0FFFFFFFFh           ; DATA XREF: sub_401080+22↑r
.data:00411104                 align 10h
.data:00411110 ; int Mode
.data:00411110 Mode            dd 0                    ; DATA XREF: sub_401080+4E↑r
.data:00411110                                         ; sub_401080+80↑r ...
.data:00411114                 align 10h
.data:00411120 dword_411120    dd 4000h                ; DATA XREF: sub_401080+57↑w
.data:00411120                                         ; sub_401080+BA↑r
.data:00411124                 align 10h
.data:00411130 dword_411130    dd 0                    ; DATA XREF: sub_40F540+9↑r
.data:00411130                                         ; sub_40F540+1D↑w
.data:00411134 off_411134      dd offset dword_41064C  ; DATA XREF: sub_40F4B0+6↑r
.data:00411134                                         ; sub_40F4B0+17↑r ...
.data:00411138                 align 1000h
.data:00411138 _data           ends
.data:00411138
.bss:00412000 ; Section 3. (virtual address 00012000)
.bss:00412000 ; Virtual size                  : 00000890 (   2192.)
.bss:00412000 ; Section size in file          : 00000000 (      0.)
.bss:00412000 ; Offset to raw data for section: 00000000
.bss:00412000 ; Flags C0000080: Bss Readable Writable
.bss:00412000 ; Alignment     : default
.bss:00412000 ; ===========================================================================
.bss:00412000
.bss:00412000 ; Segment type: Uninitialized
.bss:00412000 ; Segment permissions: Read/Write
.bss:00412000 _bss            segment para public 'BSS' use32
.bss:00412000                 assume cs:_bss
.bss:00412000                 ;org 412000h
.bss:00412000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00412000 dword_412000    dd ?                    ; DATA XREF: .text:00403362↑r
.bss:00412000                                         ; .text:004033BD↑r ...
.bss:00412004                 align 10h
.bss:00412010 dword_412010    dd ?                    ; DATA XREF: .text:0040334D↑r
.bss:00412010                                         ; .text:00403453↑w ...
.bss:00412014                 align 10h
.bss:00412020 unk_412020      db    ? ;               ; DATA XREF: .text:004035DD↑o
.bss:00412020                                         ; .text:0040361D↑o
.bss:00412021                 db    ? ;
.bss:00412022                 db    ? ;
.bss:00412023                 db    ? ;
.bss:00412024                 db    ? ;
.bss:00412025                 db    ? ;
.bss:00412026                 db    ? ;
.bss:00412027                 db    ? ;
.bss:00412028                 db    ? ;
.bss:00412029                 db    ? ;
.bss:0041202A                 db    ? ;
.bss:0041202B                 db    ? ;
.bss:0041202C                 db    ? ;
.bss:0041202D                 db    ? ;
.bss:0041202E                 db    ? ;
.bss:0041202F                 db    ? ;
.bss:00412030 ; char byte_412030[48]
.bss:00412030 byte_412030     db 30h dup(?)           ; DATA XREF: sub_402560+23F↑o
.bss:00412030                                         ; sub_402560+24F↑o ...
.bss:00412060 ; char *dword_412060
.bss:00412060 dword_412060    dd ?                    ; DATA XREF: sub_402560:loc_402C8A↑r
.bss:00412060                                         ; sub_402560+755↑r ...
.bss:00412064                 align 10h
.bss:00412070 ; char *dword_412070
.bss:00412070 dword_412070    dd ?                    ; DATA XREF: sub_402560+76F↑r
.bss:00412070                                         ; sub_402560+79F↑r ...
.bss:00412074                 align 10h
.bss:00412080 ; char *Buffer
.bss:00412080 Buffer          dd ?                    ; DATA XREF: sub_402560+1A3↑r
.bss:00412080                                         ; sub_402560+1EA↑r ...
.bss:00412084                 align 10h
.bss:00412090 byte_412090     db ?                    ; DATA XREF: sub_401B10+430↑w
.bss:00412090                                         ; .text:004034B8↑r
.bss:00412091                 align 10h
.bss:004120A0 byte_4120A0     db ?                    ; DATA XREF: sub_401B10:loc_401F04↑w
.bss:004120A0                                         ; sub_401B10:loc_402041↑r ...
.bss:004120A1                 align 10h
.bss:004120B0 byte_4120B0     db ?                    ; DATA XREF: sub_401B10:loc_401F58↑w
.bss:004120B0                                         ; sub_401B10+46B↑w ...
.bss:004120B1                 align 10h
.bss:004120C0 byte_4120C0     db ?                    ; DATA XREF: sub_401B10:loc_401E25↑w
.bss:004120C0                                         ; sub_401B10:loc_401E90↑w ...
.bss:004120C1                 align 10h
.bss:004120D0 byte_4120D0     db ?                    ; DATA XREF: sub_401B10+D8↑w
.bss:004120D0                                         ; sub_402560+6↑r
.bss:004120D1                 align 10h
.bss:004120E0 byte_4120E0     db ?                    ; DATA XREF: sub_401B10+30E↑w
.bss:004120E0                                         ; sub_401B10:loc_401EB0↑w ...
.bss:004120E1                 align 10h
.bss:004120F0 byte_4120F0     db ?                    ; DATA XREF: sub_401B10+31C↑w
.bss:004120F0                                         ; sub_401B10:loc_401F82↑r ...
.bss:004120F1                 align 10h
.bss:00412100 byte_412100     db ?                    ; DATA XREF: sub_401B10+2DD↑w
.bss:00412100                                         ; sub_401B10:loc_401EA2↑w ...
.bss:00412101                 align 10h
.bss:00412110 byte_412110     db ?                    ; DATA XREF: sub_401B10+2E4↑w
.bss:00412110                                         ; sub_401B10:loc_401E99↑w ...
.bss:00412111                 align 10h
.bss:00412120 byte_412120     db ?                    ; DATA XREF: sub_401B10+2EB↑w
.bss:00412120                                         ; sub_401B10:loc_401F64↑w ...
.bss:00412121                 align 10h
.bss:00412130 byte_412130     db ?                    ; DATA XREF: sub_401B10+2F2↑w
.bss:00412130                                         ; sub_401B10:loc_401F10↑w ...
.bss:00412131                 align 10h
.bss:00412140 byte_412140     db ?                    ; DATA XREF: sub_401B10+300↑w
.bss:00412140                                         ; sub_401B10:loc_401F4C↑w ...
.bss:00412141                 align 10h
.bss:00412150 byte_412150     db ?                    ; DATA XREF: sub_401B10+2F9↑w
.bss:00412150                                         ; sub_401B10+3EB↑w ...
.bss:00412151                 align 10h
.bss:00412160 byte_412160     db ?                    ; DATA XREF: sub_401B10+307↑w
.bss:00412160                                         ; sub_401B10:loc_401E7A↑w ...
.bss:00412161                 align 10h
.bss:00412170 byte_412170     db ?                    ; DATA XREF: sub_401B10+3D1↑w
.bss:00412170                                         ; sub_401B10:loc_402018↑w ...
.bss:00412171                 align 10h
.bss:00412180 ; char *dword_412180
.bss:00412180 dword_412180    dd ?                    ; DATA XREF: sub_401B10+4A0↑w
.bss:00412180                                         ; sub_401B10+811↑w ...
.bss:00412184                 align 10h
.bss:00412190 dword_412190    dd ?                    ; DATA XREF: sub_401B10+4A6↑w
.bss:00412190                                         ; sub_401B10+816↑w ...
.bss:00412194                 align 10h
.bss:004121A0 dword_4121A0    dd ?                    ; DATA XREF: sub_404600+9↑o
.bss:004121A0                                         ; sub_404600+17↑w ...
.bss:004121A4 dword_4121A4    dd ?                    ; DATA XREF: sub_404600+21↑w
.bss:004121A4                                         ; .text:004046B9↑w
.bss:004121A8 dword_4121A8    dd ?                    ; DATA XREF: sub_404600+77↑r
.bss:004121A8                                         ; .text:00404707↑r
.bss:004121AC dword_4121AC    dd ?                    ; DATA XREF: sub_404600+6B↑r
.bss:004121AC                                         ; .text:004046FB↑r
.bss:004121B0                 db    ? ;
.bss:004121B1                 db    ? ;
.bss:004121B2                 db    ? ;
.bss:004121B3                 db    ? ;
.bss:004121B4                 db    ? ;
.bss:004121B5                 db    ? ;
.bss:004121B6                 db    ? ;
.bss:004121B7                 db    ? ;
.bss:004121B8                 db    ? ;
.bss:004121B9                 db    ? ;
.bss:004121BA                 db    ? ;
.bss:004121BB                 db    ? ;
.bss:004121BC                 db    ? ;
.bss:004121BD                 db    ? ;
.bss:004121BE                 db    ? ;
.bss:004121BF                 db    ? ;
.bss:004121C0                 db    ? ;
.bss:004121C1                 db    ? ;
.bss:004121C2                 db    ? ;
.bss:004121C3                 db    ? ;
.bss:004121C4                 db    ? ;
.bss:004121C5                 db    ? ;
.bss:004121C6                 db    ? ;
.bss:004121C7                 db    ? ;
.bss:004121C8                 db    ? ;
.bss:004121C9                 db    ? ;
.bss:004121CA                 db    ? ;
.bss:004121CB                 db    ? ;
.bss:004121CC                 db    ? ;
.bss:004121CD                 db    ? ;
.bss:004121CE                 db    ? ;
.bss:004121CF                 db    ? ;
.bss:004121D0 ; char *dword_4121D0
.bss:004121D0 dword_4121D0    dd ?                    ; DATA XREF: .text:00404F64↑w
.bss:004121D0                                         ; sub_404F90+58↑r
.bss:004121D4                 align 10h
.bss:004121E0 unk_4121E0      db    ? ;               ; DATA XREF: sub_406700+100↑o
.bss:004121E0                                         ; .data:off_411048↑o
.bss:004121E1                 db    ? ;
.bss:004121E2                 db    ? ;
.bss:004121E3                 db    ? ;
.bss:004121E4                 db    ? ;
.bss:004121E5                 db    ? ;
.bss:004121E6                 db    ? ;
.bss:004121E7                 db    ? ;
.bss:004121E8                 db    ? ;
.bss:004121E9                 db    ? ;
.bss:004121EA                 db    ? ;
.bss:004121EB                 db    ? ;
.bss:004121EC                 db    ? ;
.bss:004121ED                 db    ? ;
.bss:004121EE                 db    ? ;
.bss:004121EF                 db    ? ;
.bss:004121F0                 db    ? ;
.bss:004121F1                 db    ? ;
.bss:004121F2                 db    ? ;
.bss:004121F3                 db    ? ;
.bss:004121F4                 db    ? ;
.bss:004121F5                 db    ? ;
.bss:004121F6                 db    ? ;
.bss:004121F7                 db    ? ;
.bss:004121F8                 db    ? ;
.bss:004121F9                 db    ? ;
.bss:004121FA                 db    ? ;
.bss:004121FB                 db    ? ;
.bss:004121FC                 db    ? ;
.bss:004121FD                 db    ? ;
.bss:004121FE                 db    ? ;
.bss:004121FF                 db    ? ;
.bss:00412200                 db    ? ;
.bss:00412201                 db    ? ;
.bss:00412202                 db    ? ;
.bss:00412203                 db    ? ;
.bss:00412204                 db    ? ;
.bss:00412205                 db    ? ;
.bss:00412206                 db    ? ;
.bss:00412207                 db    ? ;
.bss:00412208                 db    ? ;
.bss:00412209                 db    ? ;
.bss:0041220A                 db    ? ;
.bss:0041220B                 db    ? ;
.bss:0041220C                 db    ? ;
.bss:0041220D                 db    ? ;
.bss:0041220E                 db    ? ;
.bss:0041220F                 db    ? ;
.bss:00412210                 db    ? ;
.bss:00412211                 db    ? ;
.bss:00412212                 db    ? ;
.bss:00412213                 db    ? ;
.bss:00412214                 db    ? ;
.bss:00412215                 db    ? ;
.bss:00412216                 db    ? ;
.bss:00412217                 db    ? ;
.bss:00412218                 db    ? ;
.bss:00412219                 db    ? ;
.bss:0041221A                 db    ? ;
.bss:0041221B                 db    ? ;
.bss:0041221C                 db    ? ;
.bss:0041221D                 db    ? ;
.bss:0041221E                 db    ? ;
.bss:0041221F                 db    ? ;
.bss:00412220                 db    ? ;
.bss:00412221                 db    ? ;
.bss:00412222                 db    ? ;
.bss:00412223                 db    ? ;
.bss:00412224                 db    ? ;
.bss:00412225                 db    ? ;
.bss:00412226                 db    ? ;
.bss:00412227                 db    ? ;
.bss:00412228                 db    ? ;
.bss:00412229                 db    ? ;
.bss:0041222A                 db    ? ;
.bss:0041222B                 db    ? ;
.bss:0041222C                 db    ? ;
.bss:0041222D                 db    ? ;
.bss:0041222E                 db    ? ;
.bss:0041222F                 db    ? ;
.bss:00412230                 db    ? ;
.bss:00412231                 db    ? ;
.bss:00412232                 db    ? ;
.bss:00412233                 db    ? ;
.bss:00412234                 db    ? ;
.bss:00412235                 db    ? ;
.bss:00412236                 db    ? ;
.bss:00412237                 db    ? ;
.bss:00412238                 db    ? ;
.bss:00412239                 db    ? ;
.bss:0041223A                 db    ? ;
.bss:0041223B                 db    ? ;
.bss:0041223C                 db    ? ;
.bss:0041223D                 db    ? ;
.bss:0041223E                 db    ? ;
.bss:0041223F                 db    ? ;
.bss:00412240                 db    ? ;
.bss:00412241                 db    ? ;
.bss:00412242                 db    ? ;
.bss:00412243                 db    ? ;
.bss:00412244                 db    ? ;
.bss:00412245                 db    ? ;
.bss:00412246                 db    ? ;
.bss:00412247                 db    ? ;
.bss:00412248                 db    ? ;
.bss:00412249                 db    ? ;
.bss:0041224A                 db    ? ;
.bss:0041224B                 db    ? ;
.bss:0041224C                 db    ? ;
.bss:0041224D                 db    ? ;
.bss:0041224E                 db    ? ;
.bss:0041224F                 db    ? ;
.bss:00412250                 db    ? ;
.bss:00412251                 db    ? ;
.bss:00412252                 db    ? ;
.bss:00412253                 db    ? ;
.bss:00412254                 db    ? ;
.bss:00412255                 db    ? ;
.bss:00412256                 db    ? ;
.bss:00412257                 db    ? ;
.bss:00412258                 db    ? ;
.bss:00412259                 db    ? ;
.bss:0041225A                 db    ? ;
.bss:0041225B                 db    ? ;
.bss:0041225C                 db    ? ;
.bss:0041225D                 db    ? ;
.bss:0041225E                 db    ? ;
.bss:0041225F                 db    ? ;
.bss:00412260                 db    ? ;
.bss:00412261                 db    ? ;
.bss:00412262                 db    ? ;
.bss:00412263                 db    ? ;
.bss:00412264                 db    ? ;
.bss:00412265                 db    ? ;
.bss:00412266                 db    ? ;
.bss:00412267                 db    ? ;
.bss:00412268                 db    ? ;
.bss:00412269                 db    ? ;
.bss:0041226A                 db    ? ;
.bss:0041226B                 db    ? ;
.bss:0041226C                 db    ? ;
.bss:0041226D                 db    ? ;
.bss:0041226E                 db    ? ;
.bss:0041226F                 db    ? ;
.bss:00412270                 db    ? ;
.bss:00412271                 db    ? ;
.bss:00412272                 db    ? ;
.bss:00412273                 db    ? ;
.bss:00412274                 db    ? ;
.bss:00412275                 db    ? ;
.bss:00412276                 db    ? ;
.bss:00412277                 db    ? ;
.bss:00412278                 db    ? ;
.bss:00412279                 db    ? ;
.bss:0041227A                 db    ? ;
.bss:0041227B                 db    ? ;
.bss:0041227C                 db    ? ;
.bss:0041227D                 db    ? ;
.bss:0041227E                 db    ? ;
.bss:0041227F                 db    ? ;
.bss:00412280                 db    ? ;
.bss:00412281                 db    ? ;
.bss:00412282                 db    ? ;
.bss:00412283                 db    ? ;
.bss:00412284                 db    ? ;
.bss:00412285                 db    ? ;
.bss:00412286                 db    ? ;
.bss:00412287                 db    ? ;
.bss:00412288                 db    ? ;
.bss:00412289                 db    ? ;
.bss:0041228A                 db    ? ;
.bss:0041228B                 db    ? ;
.bss:0041228C                 db    ? ;
.bss:0041228D                 db    ? ;
.bss:0041228E                 db    ? ;
.bss:0041228F                 db    ? ;
.bss:00412290                 db    ? ;
.bss:00412291                 db    ? ;
.bss:00412292                 db    ? ;
.bss:00412293                 db    ? ;
.bss:00412294                 db    ? ;
.bss:00412295                 db    ? ;
.bss:00412296                 db    ? ;
.bss:00412297                 db    ? ;
.bss:00412298                 db    ? ;
.bss:00412299                 db    ? ;
.bss:0041229A                 db    ? ;
.bss:0041229B                 db    ? ;
.bss:0041229C                 db    ? ;
.bss:0041229D                 db    ? ;
.bss:0041229E                 db    ? ;
.bss:0041229F                 db    ? ;
.bss:004122A0                 db    ? ;
.bss:004122A1                 db    ? ;
.bss:004122A2                 db    ? ;
.bss:004122A3                 db    ? ;
.bss:004122A4                 db    ? ;
.bss:004122A5                 db    ? ;
.bss:004122A6                 db    ? ;
.bss:004122A7                 db    ? ;
.bss:004122A8                 db    ? ;
.bss:004122A9                 db    ? ;
.bss:004122AA                 db    ? ;
.bss:004122AB                 db    ? ;
.bss:004122AC                 db    ? ;
.bss:004122AD                 db    ? ;
.bss:004122AE                 db    ? ;
.bss:004122AF                 db    ? ;
.bss:004122B0                 db    ? ;
.bss:004122B1                 db    ? ;
.bss:004122B2                 db    ? ;
.bss:004122B3                 db    ? ;
.bss:004122B4                 db    ? ;
.bss:004122B5                 db    ? ;
.bss:004122B6                 db    ? ;
.bss:004122B7                 db    ? ;
.bss:004122B8                 db    ? ;
.bss:004122B9                 db    ? ;
.bss:004122BA                 db    ? ;
.bss:004122BB                 db    ? ;
.bss:004122BC                 db    ? ;
.bss:004122BD                 db    ? ;
.bss:004122BE                 db    ? ;
.bss:004122BF                 db    ? ;
.bss:004122C0                 db    ? ;
.bss:004122C1                 db    ? ;
.bss:004122C2                 db    ? ;
.bss:004122C3                 db    ? ;
.bss:004122C4                 db    ? ;
.bss:004122C5                 db    ? ;
.bss:004122C6                 db    ? ;
.bss:004122C7                 db    ? ;
.bss:004122C8                 db    ? ;
.bss:004122C9                 db    ? ;
.bss:004122CA                 db    ? ;
.bss:004122CB                 db    ? ;
.bss:004122CC                 db    ? ;
.bss:004122CD                 db    ? ;
.bss:004122CE                 db    ? ;
.bss:004122CF                 db    ? ;
.bss:004122D0                 db    ? ;
.bss:004122D1                 db    ? ;
.bss:004122D2                 db    ? ;
.bss:004122D3                 db    ? ;
.bss:004122D4                 db    ? ;
.bss:004122D5                 db    ? ;
.bss:004122D6                 db    ? ;
.bss:004122D7                 db    ? ;
.bss:004122D8                 db    ? ;
.bss:004122D9                 db    ? ;
.bss:004122DA                 db    ? ;
.bss:004122DB                 db    ? ;
.bss:004122DC                 db    ? ;
.bss:004122DD                 db    ? ;
.bss:004122DE                 db    ? ;
.bss:004122DF                 db    ? ;
.bss:004122E0 dword_4122E0    dd ?                    ; DATA XREF: .text:loc_406091↑o
.bss:004122E0                                         ; .text:loc_4060B0↑o ...
.bss:004122E4 dword_4122E4    dd ?                    ; DATA XREF: .text:loc_406130↑o
.bss:004122E4                                         ; .text:004065B8↑r ...
.bss:004122E8 dword_4122E8    dd ?                    ; DATA XREF: .text:004065B2↑r
.bss:004122E8                                         ; sub_406660+2C↑r
.bss:004122EC dword_4122EC    dd ?                    ; DATA XREF: .text:004065A6↑r
.bss:004122EC                                         ; sub_406660+22↑r
.bss:004122F0 dword_4122F0    dd ?                    ; DATA XREF: .text:004065C2↑r
.bss:004122F0                                         ; sub_406660+36↑r
.bss:004122F4 dword_4122F4    dd ?                    ; DATA XREF: .text:004065D2↑r
.bss:004122F4                                         ; sub_406660+4E↑r
.bss:004122F8 dword_4122F8    dd ?                    ; DATA XREF: .text:004065EF↑r
.bss:004122F8                                         ; sub_406660+62↑r
.bss:004122FC dword_4122FC    dd ?                    ; DATA XREF: .text:004065E5↑r
.bss:004122FC                                         ; sub_406660+70↑r
.bss:00412300 dword_412300    dd ?                    ; DATA XREF: .text:004065C8↑r
.bss:00412300                                         ; sub_406660+7A↑r
.bss:00412304                 align 10h
.bss:00412310 ; char *Str1
.bss:00412310 Str1            dd ?                    ; DATA XREF: sub_406A24:loc_406A5D↑w
.bss:00412310                                         ; sub_406A24:loc_406B90↑r
.bss:00412314                 align 10h
.bss:00412320 dword_412320    dd ?                    ; DATA XREF: sub_406A24+2D↑r
.bss:00412320                                         ; sub_406A24+3F↑w
.bss:00412324                 align 10h
.bss:00412330 dword_412330    dd ?                    ; DATA XREF: sub_4071B0+3↑r
.bss:00412330                                         ; sub_4071B0+19↑w
.bss:00412334                 align 10h
.bss:00412340 dword_412340    dd ?                    ; DATA XREF: sub_4085E0+100↑r
.bss:00412340                                         ; sub_4085E0+308↑w
.bss:00412344                 align 10h
.bss:00412350 ; char *Str
.bss:00412350 Str             dd ?                    ; DATA XREF: sub_4085E0:loc_408944↑r
.bss:00412350                                         ; sub_4085E0+3B6↑r ...
.bss:00412354                 align 10h
.bss:00412360 dword_412360    dd ?                    ; DATA XREF: sub_409910+40↑w
.bss:00412360                                         ; sub_409A50+1D↑r ...
.bss:00412364 dword_412364    dd ?                    ; DATA XREF: sub_409910+4B↑w
.bss:00412364                                         ; sub_409A50+23↑r ...
.bss:00412368                 align 10h
.bss:00412370 dword_412370    dd ?                    ; DATA XREF: sub_409910+35↑w
.bss:00412370                                         ; sub_409A50+7B↑o ...
.bss:00412374 unk_412374      db    ? ;               ; DATA XREF: sub_409A50+DE↑o
.bss:00412374                                         ; sub_409BA0+FF↑o ...
.bss:00412375                 db    ? ;
.bss:00412376                 db    ? ;
.bss:00412377                 db    ? ;
.bss:00412378 ; char Str2[32]
.bss:00412378 Str2            db 20h dup(?)           ; DATA XREF: sub_409BA0+C5↑o
.bss:00412378                                         ; sub_409D50+89↑o
.bss:00412398 byte_412398     db ?                    ; DATA XREF: sub_409D50+67↑r
.bss:00412398                                         ; sub_409D50+2CE↑o
.bss:00412399                 db    ? ;
.bss:0041239A                 db    ? ;
.bss:0041239B                 db    ? ;
.bss:0041239C                 db    ? ;
.bss:0041239D                 db    ? ;
.bss:0041239E                 db    ? ;
.bss:0041239F                 db    ? ;
.bss:004123A0                 db    ? ;
.bss:004123A1                 db    ? ;
.bss:004123A2                 db    ? ;
.bss:004123A3                 db    ? ;
.bss:004123A4                 db    ? ;
.bss:004123A5                 db    ? ;
.bss:004123A6                 db    ? ;
.bss:004123A7                 db    ? ;
.bss:004123A8                 db    ? ;
.bss:004123A9                 db    ? ;
.bss:004123AA                 db    ? ;
.bss:004123AB                 db    ? ;
.bss:004123AC                 db    ? ;
.bss:004123AD                 db    ? ;
.bss:004123AE                 db    ? ;
.bss:004123AF                 db    ? ;
.bss:004123B0                 db    ? ;
.bss:004123B1                 db    ? ;
.bss:004123B2                 db    ? ;
.bss:004123B3                 db    ? ;
.bss:004123B4                 db    ? ;
.bss:004123B5                 db    ? ;
.bss:004123B6                 db    ? ;
.bss:004123B7                 db    ? ;
.bss:004123B8                 db    ? ;
.bss:004123B9                 db    ? ;
.bss:004123BA                 db    ? ;
.bss:004123BB                 db    ? ;
.bss:004123BC                 db    ? ;
.bss:004123BD                 db    ? ;
.bss:004123BE                 db    ? ;
.bss:004123BF                 db    ? ;
.bss:004123C0                 db    ? ;
.bss:004123C1                 db    ? ;
.bss:004123C2                 db    ? ;
.bss:004123C3                 db    ? ;
.bss:004123C4                 db    ? ;
.bss:004123C5                 db    ? ;
.bss:004123C6                 db    ? ;
.bss:004123C7                 db    ? ;
.bss:004123C8                 db    ? ;
.bss:004123C9                 db    ? ;
.bss:004123CA                 db    ? ;
.bss:004123CB                 db    ? ;
.bss:004123CC                 db    ? ;
.bss:004123CD                 db    ? ;
.bss:004123CE                 db    ? ;
.bss:004123CF                 db    ? ;
.bss:004123D0                 db    ? ;
.bss:004123D1                 db    ? ;
.bss:004123D2                 db    ? ;
.bss:004123D3                 db    ? ;
.bss:004123D4                 db    ? ;
.bss:004123D5                 db    ? ;
.bss:004123D6                 db    ? ;
.bss:004123D7                 db    ? ;
.bss:004123D8                 db    ? ;
.bss:004123D9                 db    ? ;
.bss:004123DA                 db    ? ;
.bss:004123DB                 db    ? ;
.bss:004123DC                 db    ? ;
.bss:004123DD                 db    ? ;
.bss:004123DE                 db    ? ;
.bss:004123DF                 db    ? ;
.bss:004123E0                 db    ? ;
.bss:004123E1                 db    ? ;
.bss:004123E2                 db    ? ;
.bss:004123E3                 db    ? ;
.bss:004123E4                 db    ? ;
.bss:004123E5                 db    ? ;
.bss:004123E6                 db    ? ;
.bss:004123E7                 db    ? ;
.bss:004123E8                 db    ? ;
.bss:004123E9                 db    ? ;
.bss:004123EA                 db    ? ;
.bss:004123EB                 db    ? ;
.bss:004123EC                 db    ? ;
.bss:004123ED                 db    ? ;
.bss:004123EE                 db    ? ;
.bss:004123EF                 db    ? ;
.bss:004123F0                 db    ? ;
.bss:004123F1                 db    ? ;
.bss:004123F2                 db    ? ;
.bss:004123F3                 db    ? ;
.bss:004123F4                 db    ? ;
.bss:004123F5                 db    ? ;
.bss:004123F6                 db    ? ;
.bss:004123F7                 db    ? ;
.bss:004123F8                 db    ? ;
.bss:004123F9                 db    ? ;
.bss:004123FA                 db    ? ;
.bss:004123FB                 db    ? ;
.bss:004123FC                 db    ? ;
.bss:004123FD                 db    ? ;
.bss:004123FE                 db    ? ;
.bss:004123FF                 db    ? ;
.bss:00412400                 db    ? ;
.bss:00412401                 db    ? ;
.bss:00412402                 db    ? ;
.bss:00412403                 db    ? ;
.bss:00412404                 db    ? ;
.bss:00412405                 db    ? ;
.bss:00412406                 db    ? ;
.bss:00412407                 db    ? ;
.bss:00412408                 db    ? ;
.bss:00412409                 db    ? ;
.bss:0041240A                 db    ? ;
.bss:0041240B                 db    ? ;
.bss:0041240C                 db    ? ;
.bss:0041240D                 db    ? ;
.bss:0041240E                 db    ? ;
.bss:0041240F                 db    ? ;
.bss:00412410                 db    ? ;
.bss:00412411                 db    ? ;
.bss:00412412                 db    ? ;
.bss:00412413                 db    ? ;
.bss:00412414                 db    ? ;
.bss:00412415                 db    ? ;
.bss:00412416                 db    ? ;
.bss:00412417                 db    ? ;
.bss:00412418                 db    ? ;
.bss:00412419                 db    ? ;
.bss:0041241A                 db    ? ;
.bss:0041241B                 db    ? ;
.bss:0041241C                 db    ? ;
.bss:0041241D                 db    ? ;
.bss:0041241E                 db    ? ;
.bss:0041241F                 db    ? ;
.bss:00412420                 db    ? ;
.bss:00412421                 db    ? ;
.bss:00412422                 db    ? ;
.bss:00412423                 db    ? ;
.bss:00412424                 db    ? ;
.bss:00412425                 db    ? ;
.bss:00412426                 db    ? ;
.bss:00412427                 db    ? ;
.bss:00412428                 db    ? ;
.bss:00412429                 db    ? ;
.bss:0041242A                 db    ? ;
.bss:0041242B                 db    ? ;
.bss:0041242C                 db    ? ;
.bss:0041242D                 db    ? ;
.bss:0041242E                 db    ? ;
.bss:0041242F                 db    ? ;
.bss:00412430                 db    ? ;
.bss:00412431                 db    ? ;
.bss:00412432                 db    ? ;
.bss:00412433                 db    ? ;
.bss:00412434                 db    ? ;
.bss:00412435                 db    ? ;
.bss:00412436                 db    ? ;
.bss:00412437                 db    ? ;
.bss:00412438                 db    ? ;
.bss:00412439                 db    ? ;
.bss:0041243A                 db    ? ;
.bss:0041243B                 db    ? ;
.bss:0041243C                 db    ? ;
.bss:0041243D                 db    ? ;
.bss:0041243E                 db    ? ;
.bss:0041243F                 db    ? ;
.bss:00412440                 db    ? ;
.bss:00412441                 db    ? ;
.bss:00412442                 db    ? ;
.bss:00412443                 db    ? ;
.bss:00412444                 db    ? ;
.bss:00412445                 db    ? ;
.bss:00412446                 db    ? ;
.bss:00412447                 db    ? ;
.bss:00412448                 db    ? ;
.bss:00412449                 db    ? ;
.bss:0041244A                 db    ? ;
.bss:0041244B                 db    ? ;
.bss:0041244C                 db    ? ;
.bss:0041244D                 db    ? ;
.bss:0041244E                 db    ? ;
.bss:0041244F                 db    ? ;
.bss:00412450                 db    ? ;
.bss:00412451                 db    ? ;
.bss:00412452                 db    ? ;
.bss:00412453                 db    ? ;
.bss:00412454                 db    ? ;
.bss:00412455                 db    ? ;
.bss:00412456                 db    ? ;
.bss:00412457                 db    ? ;
.bss:00412458                 db    ? ;
.bss:00412459                 db    ? ;
.bss:0041245A                 db    ? ;
.bss:0041245B                 db    ? ;
.bss:0041245C                 db    ? ;
.bss:0041245D                 db    ? ;
.bss:0041245E                 db    ? ;
.bss:0041245F                 db    ? ;
.bss:00412460                 db    ? ;
.bss:00412461                 db    ? ;
.bss:00412462                 db    ? ;
.bss:00412463                 db    ? ;
.bss:00412464                 db    ? ;
.bss:00412465                 db    ? ;
.bss:00412466                 db    ? ;
.bss:00412467                 db    ? ;
.bss:00412468                 db    ? ;
.bss:00412469                 db    ? ;
.bss:0041246A                 db    ? ;
.bss:0041246B                 db    ? ;
.bss:0041246C                 db    ? ;
.bss:0041246D                 db    ? ;
.bss:0041246E                 db    ? ;
.bss:0041246F                 db    ? ;
.bss:00412470                 db    ? ;
.bss:00412471                 db    ? ;
.bss:00412472                 db    ? ;
.bss:00412473                 db    ? ;
.bss:00412474                 db    ? ;
.bss:00412475                 db    ? ;
.bss:00412476                 db    ? ;
.bss:00412477                 db    ? ;
.bss:00412478                 db    ? ;
.bss:00412479                 db    ? ;
.bss:0041247A                 db    ? ;
.bss:0041247B                 db    ? ;
.bss:0041247C                 db    ? ;
.bss:0041247D                 db    ? ;
.bss:0041247E                 db    ? ;
.bss:0041247F                 db    ? ;
.bss:00412480                 db    ? ;
.bss:00412481                 db    ? ;
.bss:00412482                 db    ? ;
.bss:00412483                 db    ? ;
.bss:00412484                 db    ? ;
.bss:00412485                 db    ? ;
.bss:00412486                 db    ? ;
.bss:00412487                 db    ? ;
.bss:00412488                 db    ? ;
.bss:00412489                 db    ? ;
.bss:0041248A                 db    ? ;
.bss:0041248B                 db    ? ;
.bss:0041248C                 db    ? ;
.bss:0041248D                 db    ? ;
.bss:0041248E                 db    ? ;
.bss:0041248F                 db    ? ;
.bss:00412490                 db    ? ;
.bss:00412491                 db    ? ;
.bss:00412492                 db    ? ;
.bss:00412493                 db    ? ;
.bss:00412494                 db    ? ;
.bss:00412495                 db    ? ;
.bss:00412496                 db    ? ;
.bss:00412497                 db    ? ;
.bss:00412498                 db    ? ;
.bss:00412499                 db    ? ;
.bss:0041249A                 db    ? ;
.bss:0041249B                 db    ? ;
.bss:0041249C                 db    ? ;
.bss:0041249D                 db    ? ;
.bss:0041249E                 db    ? ;
.bss:0041249F                 db    ? ;
.bss:004124A0                 db    ? ;
.bss:004124A1                 db    ? ;
.bss:004124A2                 db    ? ;
.bss:004124A3                 db    ? ;
.bss:004124A4                 db    ? ;
.bss:004124A5                 db    ? ;
.bss:004124A6                 db    ? ;
.bss:004124A7                 db    ? ;
.bss:004124A8                 db    ? ;
.bss:004124A9                 db    ? ;
.bss:004124AA                 db    ? ;
.bss:004124AB                 db    ? ;
.bss:004124AC                 db    ? ;
.bss:004124AD                 db    ? ;
.bss:004124AE                 db    ? ;
.bss:004124AF                 db    ? ;
.bss:004124B0                 db    ? ;
.bss:004124B1                 db    ? ;
.bss:004124B2                 db    ? ;
.bss:004124B3                 db    ? ;
.bss:004124B4                 db    ? ;
.bss:004124B5                 db    ? ;
.bss:004124B6                 db    ? ;
.bss:004124B7                 db    ? ;
.bss:004124B8                 db    ? ;
.bss:004124B9                 db    ? ;
.bss:004124BA                 db    ? ;
.bss:004124BB                 db    ? ;
.bss:004124BC                 db    ? ;
.bss:004124BD                 db    ? ;
.bss:004124BE                 db    ? ;
.bss:004124BF                 db    ? ;
.bss:004124C0                 db    ? ;
.bss:004124C1                 db    ? ;
.bss:004124C2                 db    ? ;
.bss:004124C3                 db    ? ;
.bss:004124C4                 db    ? ;
.bss:004124C5                 db    ? ;
.bss:004124C6                 db    ? ;
.bss:004124C7                 db    ? ;
.bss:004124C8                 db    ? ;
.bss:004124C9                 db    ? ;
.bss:004124CA                 db    ? ;
.bss:004124CB                 db    ? ;
.bss:004124CC                 db    ? ;
.bss:004124CD                 db    ? ;
.bss:004124CE                 db    ? ;
.bss:004124CF                 db    ? ;
.bss:004124D0                 db    ? ;
.bss:004124D1                 db    ? ;
.bss:004124D2                 db    ? ;
.bss:004124D3                 db    ? ;
.bss:004124D4                 db    ? ;
.bss:004124D5                 db    ? ;
.bss:004124D6                 db    ? ;
.bss:004124D7                 db    ? ;
.bss:004124D8                 db    ? ;
.bss:004124D9                 db    ? ;
.bss:004124DA                 db    ? ;
.bss:004124DB                 db    ? ;
.bss:004124DC                 db    ? ;
.bss:004124DD                 db    ? ;
.bss:004124DE                 db    ? ;
.bss:004124DF                 db    ? ;
.bss:004124E0                 db    ? ;
.bss:004124E1                 db    ? ;
.bss:004124E2                 db    ? ;
.bss:004124E3                 db    ? ;
.bss:004124E4                 db    ? ;
.bss:004124E5                 db    ? ;
.bss:004124E6                 db    ? ;
.bss:004124E7                 db    ? ;
.bss:004124E8                 db    ? ;
.bss:004124E9                 db    ? ;
.bss:004124EA                 db    ? ;
.bss:004124EB                 db    ? ;
.bss:004124EC                 db    ? ;
.bss:004124ED                 db    ? ;
.bss:004124EE                 db    ? ;
.bss:004124EF                 db    ? ;
.bss:004124F0 dword_4124F0    dd ?                    ; DATA XREF: sub_40AC50+8↑r
.bss:004124F0                                         ; sub_40AD60:loc_40ADE2↑w ...
.bss:004124F4                 align 10h
.bss:00412500 ; struct _OSVERSIONINFOA VersionInformation
.bss:00412500 VersionInformation _OSVERSIONINFOA <?>  ; DATA XREF: sub_40AD60:loc_40AD80↑o
.bss:00412500                                         ; sub_40AD60+2C↑w ...
.bss:00412594 word_412594     dw ?                    ; DATA XREF: sub_40AD60:loc_40AE13↑r
.bss:00412596                 align 4
.bss:00412598 word_412598     dw ?                    ; DATA XREF: .text:loc_40A7D6↑r
.bss:00412598                                         ; .text:0040A804↑r ...
.bss:0041259A byte_41259A     db ?                    ; DATA XREF: .text:0040A795↑r
.bss:0041259B                 align 10h
.bss:004125A0 dword_4125A0    dd ?                    ; DATA XREF: sub_40AD60+6↑r
.bss:004125A0                                         ; sub_40AD60+75↑w
.bss:004125A4                 align 10h
.bss:004125B0 dword_4125B0    dd ?                    ; DATA XREF: sub_40B330+1C↑r
.bss:004125B0                                         ; sub_40B330+104↑w
.bss:004125B4                 align 10h
.bss:004125C0 dword_4125C0    dd ?                    ; DATA XREF: sub_40B330+B↑r
.bss:004125C0                                         ; sub_40B330+71↑w
.bss:004125C4                 align 10h
.bss:004125D0 dword_4125D0    dd ?                    ; DATA XREF: sub_40B330+85↑r
.bss:004125D0                                         ; sub_40B330+B9↑w
.bss:004125D4 dword_4125D4    dd ?                    ; DATA XREF: sub_40B330+C4↑w
.bss:004125D8 dword_4125D8    dd ?                    ; DATA XREF: sub_40B330+2E↑o
.bss:004125D8                                         ; sub_40B330+CF↑w
.bss:004125DC dword_4125DC    dd ?                    ; DATA XREF: sub_40B330+DA↑w
.bss:004125E0                 db    ? ;
.bss:004125E1                 db    ? ;
.bss:004125E2                 db    ? ;
.bss:004125E3                 db    ? ;
.bss:004125E4                 db    ? ;
.bss:004125E5                 db    ? ;
.bss:004125E6                 db    ? ;
.bss:004125E7                 db    ? ;
.bss:004125E8                 db    ? ;
.bss:004125E9                 db    ? ;
.bss:004125EA                 db    ? ;
.bss:004125EB                 db    ? ;
.bss:004125EC                 db    ? ;
.bss:004125ED                 db    ? ;
.bss:004125EE                 db    ? ;
.bss:004125EF                 db    ? ;
.bss:004125F0                 db    ? ;
.bss:004125F1                 db    ? ;
.bss:004125F2                 db    ? ;
.bss:004125F3                 db    ? ;
.bss:004125F4                 db    ? ;
.bss:004125F5                 db    ? ;
.bss:004125F6                 db    ? ;
.bss:004125F7                 db    ? ;
.bss:004125F8                 db    ? ;
.bss:004125F9                 db    ? ;
.bss:004125FA                 db    ? ;
.bss:004125FB                 db    ? ;
.bss:004125FC                 db    ? ;
.bss:004125FD                 db    ? ;
.bss:004125FE                 db    ? ;
.bss:004125FF                 db    ? ;
.bss:00412600                 db    ? ;
.bss:00412601                 db    ? ;
.bss:00412602                 db    ? ;
.bss:00412603                 db    ? ;
.bss:00412604                 db    ? ;
.bss:00412605                 db    ? ;
.bss:00412606                 db    ? ;
.bss:00412607                 db    ? ;
.bss:00412608                 db    ? ;
.bss:00412609                 db    ? ;
.bss:0041260A                 db    ? ;
.bss:0041260B                 db    ? ;
.bss:0041260C                 db    ? ;
.bss:0041260D                 db    ? ;
.bss:0041260E                 db    ? ;
.bss:0041260F                 db    ? ;
.bss:00412610                 db    ? ;
.bss:00412611                 db    ? ;
.bss:00412612                 db    ? ;
.bss:00412613                 db    ? ;
.bss:00412614                 db    ? ;
.bss:00412615                 db    ? ;
.bss:00412616                 db    ? ;
.bss:00412617                 db    ? ;
.bss:00412618                 db    ? ;
.bss:00412619                 db    ? ;
.bss:0041261A                 db    ? ;
.bss:0041261B                 db    ? ;
.bss:0041261C                 db    ? ;
.bss:0041261D                 db    ? ;
.bss:0041261E                 db    ? ;
.bss:0041261F                 db    ? ;
.bss:00412620                 db    ? ;
.bss:00412621                 db    ? ;
.bss:00412622                 db    ? ;
.bss:00412623                 db    ? ;
.bss:00412624                 db    ? ;
.bss:00412625                 db    ? ;
.bss:00412626                 db    ? ;
.bss:00412627                 db    ? ;
.bss:00412628                 db    ? ;
.bss:00412629                 db    ? ;
.bss:0041262A                 db    ? ;
.bss:0041262B                 db    ? ;
.bss:0041262C                 db    ? ;
.bss:0041262D                 db    ? ;
.bss:0041262E                 db    ? ;
.bss:0041262F                 db    ? ;
.bss:00412630                 db    ? ;
.bss:00412631                 db    ? ;
.bss:00412632                 db    ? ;
.bss:00412633                 db    ? ;
.bss:00412634                 db    ? ;
.bss:00412635                 db    ? ;
.bss:00412636                 db    ? ;
.bss:00412637                 db    ? ;
.bss:00412638                 db    ? ;
.bss:00412639                 db    ? ;
.bss:0041263A                 db    ? ;
.bss:0041263B                 db    ? ;
.bss:0041263C                 db    ? ;
.bss:0041263D                 db    ? ;
.bss:0041263E                 db    ? ;
.bss:0041263F                 db    ? ;
.bss:00412640                 db    ? ;
.bss:00412641                 db    ? ;
.bss:00412642                 db    ? ;
.bss:00412643                 db    ? ;
.bss:00412644                 db    ? ;
.bss:00412645                 db    ? ;
.bss:00412646                 db    ? ;
.bss:00412647                 db    ? ;
.bss:00412648                 db    ? ;
.bss:00412649                 db    ? ;
.bss:0041264A                 db    ? ;
.bss:0041264B                 db    ? ;
.bss:0041264C                 db    ? ;
.bss:0041264D                 db    ? ;
.bss:0041264E                 db    ? ;
.bss:0041264F                 db    ? ;
.bss:00412650                 db    ? ;
.bss:00412651                 db    ? ;
.bss:00412652                 db    ? ;
.bss:00412653                 db    ? ;
.bss:00412654                 db    ? ;
.bss:00412655                 db    ? ;
.bss:00412656                 db    ? ;
.bss:00412657                 db    ? ;
.bss:00412658                 db    ? ;
.bss:00412659                 db    ? ;
.bss:0041265A                 db    ? ;
.bss:0041265B                 db    ? ;
.bss:0041265C                 db    ? ;
.bss:0041265D                 db    ? ;
.bss:0041265E                 db    ? ;
.bss:0041265F                 db    ? ;
.bss:00412660                 db    ? ;
.bss:00412661                 db    ? ;
.bss:00412662                 db    ? ;
.bss:00412663                 db    ? ;
.bss:00412664                 db    ? ;
.bss:00412665                 db    ? ;
.bss:00412666                 db    ? ;
.bss:00412667                 db    ? ;
.bss:00412668                 db    ? ;
.bss:00412669                 db    ? ;
.bss:0041266A                 db    ? ;
.bss:0041266B                 db    ? ;
.bss:0041266C                 db    ? ;
.bss:0041266D                 db    ? ;
.bss:0041266E                 db    ? ;
.bss:0041266F                 db    ? ;
.bss:00412670                 db    ? ;
.bss:00412671                 db    ? ;
.bss:00412672                 db    ? ;
.bss:00412673                 db    ? ;
.bss:00412674                 db    ? ;
.bss:00412675                 db    ? ;
.bss:00412676                 db    ? ;
.bss:00412677                 db    ? ;
.bss:00412678                 db    ? ;
.bss:00412679                 db    ? ;
.bss:0041267A                 db    ? ;
.bss:0041267B                 db    ? ;
.bss:0041267C                 db    ? ;
.bss:0041267D                 db    ? ;
.bss:0041267E                 db    ? ;
.bss:0041267F                 db    ? ;
.bss:00412680                 db    ? ;
.bss:00412681                 db    ? ;
.bss:00412682                 db    ? ;
.bss:00412683                 db    ? ;
.bss:00412684                 db    ? ;
.bss:00412685                 db    ? ;
.bss:00412686                 db    ? ;
.bss:00412687                 db    ? ;
.bss:00412688                 db    ? ;
.bss:00412689                 db    ? ;
.bss:0041268A                 db    ? ;
.bss:0041268B                 db    ? ;
.bss:0041268C                 db    ? ;
.bss:0041268D                 db    ? ;
.bss:0041268E                 db    ? ;
.bss:0041268F                 db    ? ;
.bss:00412690                 db    ? ;
.bss:00412691                 db    ? ;
.bss:00412692                 db    ? ;
.bss:00412693                 db    ? ;
.bss:00412694                 db    ? ;
.bss:00412695                 db    ? ;
.bss:00412696                 db    ? ;
.bss:00412697                 db    ? ;
.bss:00412698                 db    ? ;
.bss:00412699                 db    ? ;
.bss:0041269A                 db    ? ;
.bss:0041269B                 db    ? ;
.bss:0041269C                 db    ? ;
.bss:0041269D                 db    ? ;
.bss:0041269E                 db    ? ;
.bss:0041269F                 db    ? ;
.bss:004126A0                 db    ? ;
.bss:004126A1                 db    ? ;
.bss:004126A2                 db    ? ;
.bss:004126A3                 db    ? ;
.bss:004126A4                 db    ? ;
.bss:004126A5                 db    ? ;
.bss:004126A6                 db    ? ;
.bss:004126A7                 db    ? ;
.bss:004126A8                 db    ? ;
.bss:004126A9                 db    ? ;
.bss:004126AA                 db    ? ;
.bss:004126AB                 db    ? ;
.bss:004126AC                 db    ? ;
.bss:004126AD                 db    ? ;
.bss:004126AE                 db    ? ;
.bss:004126AF                 db    ? ;
.bss:004126B0                 db    ? ;
.bss:004126B1                 db    ? ;
.bss:004126B2                 db    ? ;
.bss:004126B3                 db    ? ;
.bss:004126B4                 db    ? ;
.bss:004126B5                 db    ? ;
.bss:004126B6                 db    ? ;
.bss:004126B7                 db    ? ;
.bss:004126B8                 db    ? ;
.bss:004126B9                 db    ? ;
.bss:004126BA                 db    ? ;
.bss:004126BB                 db    ? ;
.bss:004126BC                 db    ? ;
.bss:004126BD                 db    ? ;
.bss:004126BE                 db    ? ;
.bss:004126BF                 db    ? ;
.bss:004126C0                 db    ? ;
.bss:004126C1                 db    ? ;
.bss:004126C2                 db    ? ;
.bss:004126C3                 db    ? ;
.bss:004126C4                 db    ? ;
.bss:004126C5                 db    ? ;
.bss:004126C6                 db    ? ;
.bss:004126C7                 db    ? ;
.bss:004126C8                 db    ? ;
.bss:004126C9                 db    ? ;
.bss:004126CA                 db    ? ;
.bss:004126CB                 db    ? ;
.bss:004126CC                 db    ? ;
.bss:004126CD                 db    ? ;
.bss:004126CE                 db    ? ;
.bss:004126CF                 db    ? ;
.bss:004126D0                 db    ? ;
.bss:004126D1                 db    ? ;
.bss:004126D2                 db    ? ;
.bss:004126D3                 db    ? ;
.bss:004126D4                 db    ? ;
.bss:004126D5                 db    ? ;
.bss:004126D6                 db    ? ;
.bss:004126D7                 db    ? ;
.bss:004126D8                 db    ? ;
.bss:004126D9                 db    ? ;
.bss:004126DA                 db    ? ;
.bss:004126DB                 db    ? ;
.bss:004126DC                 db    ? ;
.bss:004126DD                 db    ? ;
.bss:004126DE                 db    ? ;
.bss:004126DF                 db    ? ;
.bss:004126E0                 db    ? ;
.bss:004126E1                 db    ? ;
.bss:004126E2                 db    ? ;
.bss:004126E3                 db    ? ;
.bss:004126E4                 db    ? ;
.bss:004126E5                 db    ? ;
.bss:004126E6                 db    ? ;
.bss:004126E7                 db    ? ;
.bss:004126E8                 db    ? ;
.bss:004126E9                 db    ? ;
.bss:004126EA                 db    ? ;
.bss:004126EB                 db    ? ;
.bss:004126EC                 db    ? ;
.bss:004126ED                 db    ? ;
.bss:004126EE                 db    ? ;
.bss:004126EF                 db    ? ;
.bss:004126F0                 db    ? ;
.bss:004126F1                 db    ? ;
.bss:004126F2                 db    ? ;
.bss:004126F3                 db    ? ;
.bss:004126F4                 db    ? ;
.bss:004126F5                 db    ? ;
.bss:004126F6                 db    ? ;
.bss:004126F7                 db    ? ;
.bss:004126F8                 db    ? ;
.bss:004126F9                 db    ? ;
.bss:004126FA                 db    ? ;
.bss:004126FB                 db    ? ;
.bss:004126FC                 db    ? ;
.bss:004126FD                 db    ? ;
.bss:004126FE                 db    ? ;
.bss:004126FF                 db    ? ;
.bss:00412700                 db    ? ;
.bss:00412701                 db    ? ;
.bss:00412702                 db    ? ;
.bss:00412703                 db    ? ;
.bss:00412704                 db    ? ;
.bss:00412705                 db    ? ;
.bss:00412706                 db    ? ;
.bss:00412707                 db    ? ;
.bss:00412708                 db    ? ;
.bss:00412709                 db    ? ;
.bss:0041270A                 db    ? ;
.bss:0041270B                 db    ? ;
.bss:0041270C                 db    ? ;
.bss:0041270D                 db    ? ;
.bss:0041270E                 db    ? ;
.bss:0041270F                 db    ? ;
.bss:00412710                 db    ? ;
.bss:00412711                 db    ? ;
.bss:00412712                 db    ? ;
.bss:00412713                 db    ? ;
.bss:00412714                 db    ? ;
.bss:00412715                 db    ? ;
.bss:00412716                 db    ? ;
.bss:00412717                 db    ? ;
.bss:00412718                 db    ? ;
.bss:00412719                 db    ? ;
.bss:0041271A                 db    ? ;
.bss:0041271B                 db    ? ;
.bss:0041271C                 db    ? ;
.bss:0041271D                 db    ? ;
.bss:0041271E                 db    ? ;
.bss:0041271F                 db    ? ;
.bss:00412720                 db    ? ;
.bss:00412721                 db    ? ;
.bss:00412722                 db    ? ;
.bss:00412723                 db    ? ;
.bss:00412724                 db    ? ;
.bss:00412725                 db    ? ;
.bss:00412726                 db    ? ;
.bss:00412727                 db    ? ;
.bss:00412728                 db    ? ;
.bss:00412729                 db    ? ;
.bss:0041272A                 db    ? ;
.bss:0041272B                 db    ? ;
.bss:0041272C                 db    ? ;
.bss:0041272D                 db    ? ;
.bss:0041272E                 db    ? ;
.bss:0041272F                 db    ? ;
.bss:00412730                 db    ? ;
.bss:00412731                 db    ? ;
.bss:00412732                 db    ? ;
.bss:00412733                 db    ? ;
.bss:00412734                 db    ? ;
.bss:00412735                 db    ? ;
.bss:00412736                 db    ? ;
.bss:00412737                 db    ? ;
.bss:00412738                 db    ? ;
.bss:00412739                 db    ? ;
.bss:0041273A                 db    ? ;
.bss:0041273B                 db    ? ;
.bss:0041273C                 db    ? ;
.bss:0041273D                 db    ? ;
.bss:0041273E                 db    ? ;
.bss:0041273F                 db    ? ;
.bss:00412740                 db    ? ;
.bss:00412741                 db    ? ;
.bss:00412742                 db    ? ;
.bss:00412743                 db    ? ;
.bss:00412744                 db    ? ;
.bss:00412745                 db    ? ;
.bss:00412746                 db    ? ;
.bss:00412747                 db    ? ;
.bss:00412748                 db    ? ;
.bss:00412749                 db    ? ;
.bss:0041274A                 db    ? ;
.bss:0041274B                 db    ? ;
.bss:0041274C                 db    ? ;
.bss:0041274D                 db    ? ;
.bss:0041274E                 db    ? ;
.bss:0041274F                 db    ? ;
.bss:00412750                 db    ? ;
.bss:00412751                 db    ? ;
.bss:00412752                 db    ? ;
.bss:00412753                 db    ? ;
.bss:00412754                 db    ? ;
.bss:00412755                 db    ? ;
.bss:00412756                 db    ? ;
.bss:00412757                 db    ? ;
.bss:00412758                 db    ? ;
.bss:00412759                 db    ? ;
.bss:0041275A                 db    ? ;
.bss:0041275B                 db    ? ;
.bss:0041275C                 db    ? ;
.bss:0041275D                 db    ? ;
.bss:0041275E                 db    ? ;
.bss:0041275F                 db    ? ;
.bss:00412760                 db    ? ;
.bss:00412761                 db    ? ;
.bss:00412762                 db    ? ;
.bss:00412763                 db    ? ;
.bss:00412764                 db    ? ;
.bss:00412765                 db    ? ;
.bss:00412766                 db    ? ;
.bss:00412767                 db    ? ;
.bss:00412768                 db    ? ;
.bss:00412769                 db    ? ;
.bss:0041276A                 db    ? ;
.bss:0041276B                 db    ? ;
.bss:0041276C                 db    ? ;
.bss:0041276D                 db    ? ;
.bss:0041276E                 db    ? ;
.bss:0041276F                 db    ? ;
.bss:00412770                 db    ? ;
.bss:00412771                 db    ? ;
.bss:00412772                 db    ? ;
.bss:00412773                 db    ? ;
.bss:00412774                 db    ? ;
.bss:00412775                 db    ? ;
.bss:00412776                 db    ? ;
.bss:00412777                 db    ? ;
.bss:00412778                 db    ? ;
.bss:00412779                 db    ? ;
.bss:0041277A                 db    ? ;
.bss:0041277B                 db    ? ;
.bss:0041277C                 db    ? ;
.bss:0041277D                 db    ? ;
.bss:0041277E                 db    ? ;
.bss:0041277F                 db    ? ;
.bss:00412780                 db    ? ;
.bss:00412781                 db    ? ;
.bss:00412782                 db    ? ;
.bss:00412783                 db    ? ;
.bss:00412784                 db    ? ;
.bss:00412785                 db    ? ;
.bss:00412786                 db    ? ;
.bss:00412787                 db    ? ;
.bss:00412788                 db    ? ;
.bss:00412789                 db    ? ;
.bss:0041278A                 db    ? ;
.bss:0041278B                 db    ? ;
.bss:0041278C                 db    ? ;
.bss:0041278D                 db    ? ;
.bss:0041278E                 db    ? ;
.bss:0041278F                 db    ? ;
.bss:00412790                 db    ? ;
.bss:00412791                 db    ? ;
.bss:00412792                 db    ? ;
.bss:00412793                 db    ? ;
.bss:00412794                 db    ? ;
.bss:00412795                 db    ? ;
.bss:00412796                 db    ? ;
.bss:00412797                 db    ? ;
.bss:00412798                 db    ? ;
.bss:00412799                 db    ? ;
.bss:0041279A                 db    ? ;
.bss:0041279B                 db    ? ;
.bss:0041279C                 db    ? ;
.bss:0041279D                 db    ? ;
.bss:0041279E                 db    ? ;
.bss:0041279F                 db    ? ;
.bss:004127A0                 db    ? ;
.bss:004127A1                 db    ? ;
.bss:004127A2                 db    ? ;
.bss:004127A3                 db    ? ;
.bss:004127A4                 db    ? ;
.bss:004127A5                 db    ? ;
.bss:004127A6                 db    ? ;
.bss:004127A7                 db    ? ;
.bss:004127A8                 db    ? ;
.bss:004127A9                 db    ? ;
.bss:004127AA                 db    ? ;
.bss:004127AB                 db    ? ;
.bss:004127AC                 db    ? ;
.bss:004127AD                 db    ? ;
.bss:004127AE                 db    ? ;
.bss:004127AF                 db    ? ;
.bss:004127B0                 db    ? ;
.bss:004127B1                 db    ? ;
.bss:004127B2                 db    ? ;
.bss:004127B3                 db    ? ;
.bss:004127B4                 db    ? ;
.bss:004127B5                 db    ? ;
.bss:004127B6                 db    ? ;
.bss:004127B7                 db    ? ;
.bss:004127B8                 db    ? ;
.bss:004127B9                 db    ? ;
.bss:004127BA                 db    ? ;
.bss:004127BB                 db    ? ;
.bss:004127BC                 db    ? ;
.bss:004127BD                 db    ? ;
.bss:004127BE                 db    ? ;
.bss:004127BF                 db    ? ;
.bss:004127C0                 db    ? ;
.bss:004127C1                 db    ? ;
.bss:004127C2                 db    ? ;
.bss:004127C3                 db    ? ;
.bss:004127C4                 db    ? ;
.bss:004127C5                 db    ? ;
.bss:004127C6                 db    ? ;
.bss:004127C7                 db    ? ;
.bss:004127C8                 db    ? ;
.bss:004127C9                 db    ? ;
.bss:004127CA                 db    ? ;
.bss:004127CB                 db    ? ;
.bss:004127CC                 db    ? ;
.bss:004127CD                 db    ? ;
.bss:004127CE                 db    ? ;
.bss:004127CF                 db    ? ;
.bss:004127D0 dword_4127D0    dd ?                    ; DATA XREF: sub_40D630+6E↑r
.bss:004127D0                                         ; sub_40D630+9A↑r ...
.bss:004127D4 dword_4127D4    dd ?                    ; DATA XREF: sub_40D630:loc_40D698↑r
.bss:004127D4                                         ; sub_40D630+A0↑r ...
.bss:004127D8                 align 10h
.bss:004127E0 dword_4127E0    dd ?                    ; DATA XREF: sub_40DB40↑r
.bss:004127E0                                         ; .text:loc_40DC72↑w
.bss:004127E4                 align 10h
.bss:004127F0 dword_4127F0    dd ?                    ; DATA XREF: sub_401B10+31↑w
.bss:004127F0                                         ; sub_401B10+F4↑r ...
.bss:004127F4                 db    ? ;
.bss:004127F5                 db    ? ;
.bss:004127F6                 db    ? ;
.bss:004127F7                 db    ? ;
.bss:004127F8                 db    ? ;
.bss:004127F9                 db    ? ;
.bss:004127FA                 db    ? ;
.bss:004127FB                 db    ? ;
.bss:004127FC                 db    ? ;
.bss:004127FD                 db    ? ;
.bss:004127FE                 db    ? ;
.bss:004127FF                 db    ? ;
.bss:00412800                 db    ? ;
.bss:00412801                 db    ? ;
.bss:00412802                 db    ? ;
.bss:00412803                 db    ? ;
.bss:00412804                 db    ? ;
.bss:00412805                 db    ? ;
.bss:00412806                 db    ? ;
.bss:00412807                 db    ? ;
.bss:00412808                 db    ? ;
.bss:00412809                 db    ? ;
.bss:0041280A                 db    ? ;
.bss:0041280B                 db    ? ;
.bss:0041280C                 db    ? ;
.bss:0041280D                 db    ? ;
.bss:0041280E                 db    ? ;
.bss:0041280F                 db    ? ;
.bss:00412810 dword_412810    dd ?                    ; DATA XREF: sub_404600+71↑w
.bss:00412810                                         ; .text:00404701↑w
.bss:00412814                 align 10h
.bss:00412820 dword_412820    dd ?                    ; CODE XREF: sub_406A24+63↑p
.bss:00412820                                         ; DATA XREF: sub_406920+1E↑r ...
.bss:00412824                 align 10h
.bss:00412830 dword_412830    dd ?                    ; DATA XREF: sub_406920+4E↑w
.bss:00412830                                         ; sub_406A24+AB↑w
.bss:00412834                 db    ? ;
.bss:00412835                 db    ? ;
.bss:00412836                 db    ? ;
.bss:00412837                 db    ? ;
.bss:00412838                 db    ? ;
.bss:00412839                 db    ? ;
.bss:0041283A                 db    ? ;
.bss:0041283B                 db    ? ;
.bss:0041283C                 db    ? ;
.bss:0041283D                 db    ? ;
.bss:0041283E                 db    ? ;
.bss:0041283F                 db    ? ;
.bss:00412840                 db    ? ;
.bss:00412841                 db    ? ;
.bss:00412842                 db    ? ;
.bss:00412843                 db    ? ;
.bss:00412844                 db    ? ;
.bss:00412845                 db    ? ;
.bss:00412846                 db    ? ;
.bss:00412847                 db    ? ;
.bss:00412848                 db    ? ;
.bss:00412849                 db    ? ;
.bss:0041284A                 db    ? ;
.bss:0041284B                 db    ? ;
.bss:0041284C                 db    ? ;
.bss:0041284D                 db    ? ;
.bss:0041284E                 db    ? ;
.bss:0041284F                 db    ? ;
.bss:00412850                 db    ? ;
.bss:00412851                 db    ? ;
.bss:00412852                 db    ? ;
.bss:00412853                 db    ? ;
.bss:00412854                 db    ? ;
.bss:00412855                 db    ? ;
.bss:00412856                 db    ? ;
.bss:00412857                 db    ? ;
.bss:00412858                 db    ? ;
.bss:00412859                 db    ? ;
.bss:0041285A                 db    ? ;
.bss:0041285B                 db    ? ;
.bss:0041285C                 db    ? ;
.bss:0041285D                 db    ? ;
.bss:0041285E                 db    ? ;
.bss:0041285F                 db    ? ;
.bss:00412860 dword_412860    dd ?                    ; DATA XREF: sub_406A24+13↑r
.bss:00412864                 align 800h
.bss:00412864 _bss            ends
.bss:00412864
.idata:00413000 ; Section 4. (virtual address 00013000)
.idata:00413000 ; Virtual size                  : 00000F10 (   3856.)
.idata:00413000 ; Section size in file          : 00001000 (   4096.)
.idata:00413000 ; Offset to raw data for section: 0000FE00
.idata:00413000 ; Flags C0000040: Data Readable Writable
.idata:00413000 ; Alignment     : default
.idata:00413000 ; ===========================================================================
.idata:00413000
.idata:00413000 ; Segment type: Externs
.idata:00413000 ; _idata
.idata:00413000
.idata:00413001
.idata:004132F8 ;
.idata:004132F8 ; Imports from libintl3.dll
.idata:004132F8 ;
.idata:004132F8                 extrn __imp_libintl_bindtextdomain:dword
.idata:004132F8                                         ; CODE XREF: sub_401B10+4B↑p
.idata:004132F8                                         ; DATA XREF: sub_401B10+4B↑r ...
.idata:004132FC                 extrn libintl_gettext:dword
.idata:004132FC                                         ; CODE XREF: sub_401B10+E8↑p
.idata:004132FC                                         ; sub_401B10+179↑p ...
.idata:00413300                 extrn libintl_textdomain:dword
.idata:00413300                                         ; CODE XREF: sub_401B10+58↑p
.idata:00413300                                         ; DATA XREF: sub_401B10+58↑r ...
.idata:00413304
.idata:0041330C ;
.idata:0041330C ; Imports from ADVAPI32.DLL
.idata:0041330C ;
.idata:0041330C ; LSTATUS (__stdcall *RegCloseKey)(HKEY hKey)
.idata:0041330C                 extrn __imp_RegCloseKey:dword
.idata:0041330C                                         ; DATA XREF: RegCloseKey↑r
.idata:00413310 ; LSTATUS (__stdcall *RegOpenKeyExA)(HKEY hKey, LPCSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult)
.idata:00413310                 extrn __imp_RegOpenKeyExA:dword
.idata:00413310                                         ; DATA XREF: RegOpenKeyExA↑r
.idata:00413314 ; LSTATUS (__stdcall *RegQueryValueExA)(HKEY hKey, LPCSTR lpValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData)
.idata:00413314                 extrn __imp_RegQueryValueExA:dword
.idata:00413314                                         ; DATA XREF: RegQueryValueExA↑r
.idata:00413318
.idata:00413320 ;
.idata:00413320 ; Imports from KERNEL32.dll
.idata:00413320 ;
.idata:00413320 ; BOOL (__stdcall *AreFileApisANSI)()
.idata:00413320                 extrn __imp_AreFileApisANSI:dword
.idata:00413320                                         ; DATA XREF: AreFileApisANSI↑r
.idata:00413324 ; BOOL (__stdcall *CloseHandle)(HANDLE hObject)
.idata:00413324                 extrn __imp_CloseHandle:dword
.idata:00413324                                         ; DATA XREF: CloseHandle↑r
.idata:00413328 ; BOOL (__stdcall *CreateDirectoryA)(LPCSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes)
.idata:00413328                 extrn __imp_CreateDirectoryA:dword
.idata:00413328                                         ; DATA XREF: CreateDirectoryA↑r
.idata:0041332C ; HANDLE (__stdcall *CreateFileA)(LPCSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile)
.idata:0041332C                 extrn __imp_CreateFileA:dword
.idata:0041332C                                         ; DATA XREF: CreateFileA↑r
.idata:00413330 ; BOOL (__stdcall *DeviceIoControl)(HANDLE hDevice, DWORD dwIoControlCode, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesReturned, LPOVERLAPPED lpOverlapped)
.idata:00413330                 extrn __imp_DeviceIoControl:dword
.idata:00413330                                         ; DATA XREF: DeviceIoControl↑r
.idata:00413334 ; void (__stdcall __noreturn *ExitProcess)(UINT uExitCode)
.idata:00413334                 extrn __imp_ExitProcess:dword
.idata:00413334                                         ; DATA XREF: ExitProcess↑r
.idata:00413338 ; BOOL (__stdcall *FindClose)(HANDLE hFindFile)
.idata:00413338                 extrn __imp_FindClose:dword
.idata:00413338                                         ; DATA XREF: FindClose↑r
.idata:0041333C ; HANDLE (__stdcall *FindFirstFileA)(LPCSTR lpFileName, LPWIN32_FIND_DATAA lpFindFileData)
.idata:0041333C                 extrn __imp_FindFirstFileA:dword
.idata:0041333C                                         ; DATA XREF: FindFirstFileA↑r
.idata:00413340 ; BOOL (__stdcall *FindNextFileA)(HANDLE hFindFile, LPWIN32_FIND_DATAA lpFindFileData)
.idata:00413340                 extrn __imp_FindNextFileA:dword
.idata:00413340                                         ; DATA XREF: FindNextFileA↑r
.idata:00413344 ; BOOL (__stdcall *FreeLibrary)(HMODULE hLibModule)
.idata:00413344                 extrn __imp_FreeLibrary:dword
.idata:00413344                                         ; DATA XREF: FreeLibrary↑r
.idata:00413348 ; DWORD (__stdcall *GetCurrentDirectoryA)(DWORD nBufferLength, LPSTR lpBuffer)
.idata:00413348                 extrn __imp_GetCurrentDirectoryA:dword
.idata:00413348                                         ; DATA XREF: GetCurrentDirectoryA↑r
.idata:0041334C ; BOOL (__stdcall *GetDiskFreeSpaceA)(LPCSTR lpRootPathName, LPDWORD lpSectorsPerCluster, LPDWORD lpBytesPerSector, LPDWORD lpNumberOfFreeClusters, LPDWORD lpTotalNumberOfClusters)
.idata:0041334C                 extrn __imp_GetDiskFreeSpaceA:dword
.idata:0041334C                                         ; DATA XREF: GetDiskFreeSpaceA↑r
.idata:00413350 ; UINT (__stdcall *GetDriveTypeA)(LPCSTR lpRootPathName)
.idata:00413350                 extrn __imp_GetDriveTypeA:dword
.idata:00413350                                         ; DATA XREF: GetDriveTypeA↑r
.idata:00413354 ; DWORD (__stdcall *GetFileAttributesA)(LPCSTR lpFileName)
.idata:00413354                 extrn __imp_GetFileAttributesA:dword
.idata:00413354                                         ; DATA XREF: GetFileAttributesA↑r
.idata:00413358 ; BOOL (__stdcall *GetFileInformationByHandle)(HANDLE hFile, LPBY_HANDLE_FILE_INFORMATION lpFileInformation)
.idata:00413358                 extrn __imp_GetFileInformationByHandle:dword
.idata:00413358                                         ; DATA XREF: GetFileInformationByHandle↑r
.idata:0041335C ; DWORD (__stdcall *GetFileSize)(HANDLE hFile, LPDWORD lpFileSizeHigh)
.idata:0041335C                 extrn __imp_GetFileSize:dword
.idata:0041335C                                         ; DATA XREF: GetFileSize↑r
.idata:00413360 ; DWORD (__stdcall *GetFileType)(HANDLE hFile)
.idata:00413360                 extrn __imp_GetFileType:dword
.idata:00413360                                         ; DATA XREF: GetFileType↑r
.idata:00413364 ; DWORD (__stdcall *GetFullPathNameA)(LPCSTR lpFileName, DWORD nBufferLength, LPSTR lpBuffer, LPSTR *lpFilePart)
.idata:00413364                 extrn __imp_GetFullPathNameA:dword
.idata:00413364                                         ; DATA XREF: GetFullPathNameA↑r
.idata:00413368 ; DWORD (__stdcall *GetLastError)()
.idata:00413368                 extrn __imp_GetLastError:dword
.idata:00413368                                         ; DATA XREF: GetLastError↑r
.idata:0041336C ; DWORD (__stdcall *GetLogicalDriveStringsA)(DWORD nBufferLength, LPSTR lpBuffer)
.idata:0041336C                 extrn __imp_GetLogicalDriveStringsA:dword
.idata:0041336C                                         ; DATA XREF: GetLogicalDriveStringsA↑r
.idata:00413370 ; DWORD (__stdcall *GetModuleFileNameA)(HMODULE hModule, LPSTR lpFilename, DWORD nSize)
.idata:00413370                 extrn __imp_GetModuleFileNameA:dword
.idata:00413370                                         ; DATA XREF: GetModuleFileNameA↑r
.idata:00413374 ; HMODULE (__stdcall *GetModuleHandleA)(LPCSTR lpModuleName)
.idata:00413374                 extrn __imp_GetModuleHandleA:dword
.idata:00413374                                         ; DATA XREF: GetModuleHandleA↑r
.idata:00413378 ; FARPROC (__stdcall *GetProcAddress)(HMODULE hModule, LPCSTR lpProcName)
.idata:00413378                 extrn __imp_GetProcAddress:dword
.idata:00413378                                         ; DATA XREF: GetProcAddress↑r
.idata:0041337C ; HANDLE (__stdcall *GetProcessHeap)()
.idata:0041337C                 extrn __imp_GetProcessHeap:dword
.idata:0041337C                                         ; DATA XREF: GetProcessHeap↑r
.idata:00413380 ; DWORD (__stdcall *GetShortPathNameA)(LPCSTR lpszLongPath, LPSTR lpszShortPath, DWORD cchBuffer)
.idata:00413380                 extrn __imp_GetShortPathNameA:dword
.idata:00413380                                         ; DATA XREF: GetShortPathNameA↑r
.idata:00413384 ; void (__stdcall *GetSystemTimeAsFileTime)(LPFILETIME lpSystemTimeAsFileTime)
.idata:00413384                 extrn __imp_GetSystemTimeAsFileTime:dword
.idata:00413384                                         ; DATA XREF: GetSystemTimeAsFileTime↑r
.idata:00413388 ; DWORD (__stdcall *GetTimeZoneInformation)(LPTIME_ZONE_INFORMATION lpTimeZoneInformation)
.idata:00413388                 extrn __imp_GetTimeZoneInformation:dword
.idata:00413388                                         ; DATA XREF: GetTimeZoneInformation↑r
.idata:0041338C ; DWORD (__stdcall *GetVersion)()
.idata:0041338C                 extrn __imp_GetVersion:dword
.idata:0041338C                                         ; DATA XREF: GetVersion↑r
.idata:00413390 ; BOOL (__stdcall *GetVersionExA)(LPOSVERSIONINFOA lpVersionInformation)
.idata:00413390                 extrn __imp_GetVersionExA:dword
.idata:00413390                                         ; DATA XREF: GetVersionExA↑r
.idata:00413394 ; BOOL (__stdcall *GetVolumeInformationA)(LPCSTR lpRootPathName, LPSTR lpVolumeNameBuffer, DWORD nVolumeNameSize, LPDWORD lpVolumeSerialNumber, LPDWORD lpMaximumComponentLength, LPDWORD lpFileSystemFlags, LPSTR lpFileSystemNameBuffer, DWORD nFileSystemNameSize)
.idata:00413394                 extrn __imp_GetVolumeInformationA:dword
.idata:00413394                                         ; DATA XREF: GetVolumeInformationA↑r
.idata:00413398 ; LPVOID (__stdcall *HeapAlloc)(HANDLE hHeap, DWORD dwFlags, SIZE_T dwBytes)
.idata:00413398                 extrn __imp_HeapAlloc:dword
.idata:00413398                                         ; DATA XREF: HeapAlloc↑r
.idata:0041339C ; BOOL (__stdcall *HeapFree)(HANDLE hHeap, DWORD dwFlags, LPVOID lpMem)
.idata:0041339C                 extrn __imp_HeapFree:dword
.idata:0041339C                                         ; DATA XREF: HeapFree↑r
.idata:004133A0 ; HMODULE (__stdcall *LoadLibraryA)(LPCSTR lpLibFileName)
.idata:004133A0                 extrn __imp_LoadLibraryA:dword
.idata:004133A0                                         ; DATA XREF: LoadLibraryA↑r
.idata:004133A4 ; BOOL (__stdcall *LockFile)(HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToLockLow, DWORD nNumberOfBytesToLockHigh)
.idata:004133A4                 extrn __imp_LockFile:dword
.idata:004133A4                                         ; DATA XREF: LockFile↑r
.idata:004133A8 ; int (__stdcall *MultiByteToWideChar)(UINT CodePage, DWORD dwFlags, LPCCH lpMultiByteStr, int cbMultiByte, LPWSTR lpWideCharStr, int cchWideChar)
.idata:004133A8                 extrn __imp_MultiByteToWideChar:dword
.idata:004133A8                                         ; DATA XREF: MultiByteToWideChar↑r
.idata:004133AC ; BOOL (__stdcall *PeekNamedPipe)(HANDLE hNamedPipe, LPVOID lpBuffer, DWORD nBufferSize, LPDWORD lpBytesRead, LPDWORD lpTotalBytesAvail, LPDWORD lpBytesLeftThisMessage)
.idata:004133AC                 extrn __imp_PeekNamedPipe:dword
.idata:004133AC                                         ; DATA XREF: PeekNamedPipe↑r
.idata:004133B0 ; BOOL (__stdcall *SetEndOfFile)(HANDLE hFile)
.idata:004133B0                 extrn __imp_SetEndOfFile:dword
.idata:004133B0                                         ; DATA XREF: SetEndOfFile↑r
.idata:004133B4 ; UINT (__stdcall *SetErrorMode)(UINT uMode)
.idata:004133B4                 extrn __imp_SetErrorMode:dword
.idata:004133B4                                         ; DATA XREF: SetErrorMode↑r
.idata:004133B8 ; LPTOP_LEVEL_EXCEPTION_FILTER (__stdcall *SetUnhandledExceptionFilter)(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.idata:004133B8                 extrn __imp_SetUnhandledExceptionFilter:dword
.idata:004133B8                                         ; DATA XREF: SetUnhandledExceptionFilter↑r
.idata:004133BC ; BOOL (__stdcall *UnlockFile)(HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToUnlockLow, DWORD nNumberOfBytesToUnlockHigh)
.idata:004133BC                 extrn __imp_UnlockFile:dword
.idata:004133BC                                         ; DATA XREF: UnlockFile↑r
.idata:004133C0 ; int (__stdcall *lstrcmpiA)(LPCSTR lpString1, LPCSTR lpString2)
.idata:004133C0                 extrn __imp_lstrcmpiA:dword
.idata:004133C0                                         ; DATA XREF: lstrcmpiA↑r
.idata:004133C4 ; LPSTR (__stdcall *lstrcpyA)(LPSTR lpString1, LPCSTR lpString2)
.idata:004133C4                 extrn __imp_lstrcpyA:dword
.idata:004133C4                                         ; DATA XREF: lstrcpyA↑r
.idata:004133C8
.idata:004133D0 ;
.idata:004133D0 ; Imports from msvcrt.dll
.idata:004133D0 ;
.idata:004133D0 ; int (__cdecl *_chmod)(const char *FileName, int AccessMode)
.idata:004133D0                 extrn __imp__chmod:dword
.idata:004133D0                                         ; DATA XREF: _chmod↑r
.idata:004133D4 ; int (__cdecl *_dup)(int FileHandle)
.idata:004133D4                 extrn __imp__dup:dword  ; DATA XREF: _dup↑r
.idata:004133D8 ; int (__cdecl *_getpid)()
.idata:004133D8                 extrn __imp__getpid:dword
.idata:004133D8                                         ; DATA XREF: _getpid↑r
.idata:004133DC ; char *(__cdecl *_strdup)(const char *String)
.idata:004133DC                 extrn __imp__strdup:dword
.idata:004133DC                                         ; DATA XREF: _strdup↑r
.idata:004133E0 ; int (__cdecl *_stricmp)(const char *String1, const char *String2)
.idata:004133E0                 extrn __imp__stricmp:dword
.idata:004133E0                                         ; DATA XREF: _stricmp↑r
.idata:004133E4
.idata:004133EC ;
.idata:004133EC ; Imports from MSVCP60.DLL
.idata:004133EC ;
.idata:004133EC ; size_t (__cdecl *mbrtowc)(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.idata:004133EC                 extrn __imp_mbrtowc:dword
.idata:004133EC                                         ; DATA XREF: mbrtowc↑r
.idata:004133F0
.idata:004133F8 ;
.idata:004133F8 ; Imports from msvcrt.dll
.idata:004133F8 ;
.idata:004133F8                 extrn __imp___getmainargs:dword
.idata:004133F8                                         ; DATA XREF: __getmainargs↑r
.idata:004133FC ; int _mb_cur_max
.idata:004133FC                 extrn __mb_cur_max:dword
.idata:004133FC                                         ; DATA XREF: sub_4055C0+7↑r
.idata:004133FC                                         ; sub_4055C0+5F3↑r
.idata:00413400 ; char ***(__cdecl *__p__environ)()
.idata:00413400                 extrn __imp___p__environ:dword
.idata:00413400                                         ; DATA XREF: __p__environ↑r
.idata:00413404 ; int *(__cdecl *__p__fmode)()
.idata:00413404                 extrn __imp___p__fmode:dword
.idata:00413404                                         ; DATA XREF: __p__fmode↑r
.idata:00413408                 extrn __pioinfo:dword   ; DATA XREF: sub_40C0A0:loc_40C108↑r
.idata:00413408                                         ; sub_40C0A0:loc_40C133↑r ...
.idata:0041340C ; void (__cdecl *_set_app_type)(_crt_app_type Type)
.idata:0041340C                 extrn __set_app_type:dword
.idata:0041340C                                         ; CODE XREF: start+D↑p
.idata:0041340C                                         ; .text:0040102D↑p
.idata:0041340C                                         ; DATA XREF: ...
.idata:00413410                 extrn __imp__assert:dword
.idata:00413410                                         ; DATA XREF: _assert↑r
.idata:00413414 ; void (__cdecl *_cexit)()
.idata:00413414                 extrn __imp__cexit:dword
.idata:00413414                                         ; DATA XREF: _cexit↑r
.idata:00413418 ; int (__cdecl *_close)(int FileHandle)
.idata:00413418                 extrn __imp__close:dword
.idata:00413418                                         ; DATA XREF: _close↑r
.idata:0041341C ; int *(__cdecl *_errno)()
.idata:0041341C                 extrn __imp__errno:dword
.idata:0041341C                                         ; DATA XREF: _errno↑r
.idata:00413420 ; FILE *(__cdecl *_fdopen)(int FileHandle, const char *Format)
.idata:00413420                 extrn __imp__fdopen:dword
.idata:00413420                                         ; DATA XREF: _fdopen↑r
.idata:00413424 ; __int64 (__cdecl *_filelengthi64)(int FileHandle)
.idata:00413424                 extrn __imp__filelengthi64:dword
.idata:00413424                                         ; DATA XREF: _filelengthi64↑r
.idata:00413428 ; int (__cdecl *_flsbuf)(int Ch, FILE *File)
.idata:00413428                 extrn __imp__flsbuf:dword
.idata:00413428                                         ; DATA XREF: _flsbuf↑r
.idata:0041342C ; intptr_t (__cdecl *_get_osfhandle)(int FileHandle)
.idata:0041342C                 extrn __imp__get_osfhandle:dword
.idata:0041342C                                         ; DATA XREF: _get_osfhandle↑r
.idata:00413430 ; FILE iob[]
.idata:00413430                 extrn _iob:dword        ; DATA XREF: sub_401080+5C↑r
.idata:00413430                                         ; sub_401080+75↑r ...
.idata:00413434 ; int (__cdecl *_isctype)(int C, int Type)
.idata:00413434                 extrn __imp__isctype:dword
.idata:00413434                                         ; DATA XREF: _isctype↑r
.idata:00413438 ; __int64 (__cdecl *_lseeki64)(int FileHandle, __int64 Offset, int Origin)
.idata:00413438                 extrn __imp__lseeki64:dword
.idata:00413438                                         ; DATA XREF: _lseeki64↑r
.idata:0041343C ; _onexit_t (__cdecl *onexit)(_onexit_t Func)
.idata:0041343C                 extrn _onexit:dword     ; CODE XREF: .text:0040106C↑p
.idata:0041343C                                         ; DATA XREF: .text:0040106C↑r
.idata:00413440 ; int (*_open)(const char *FileName, int OpenFlag, ...)
.idata:00413440                 extrn __imp__open:dword ; DATA XREF: _open↑r
.idata:00413444 ; const unsigned __int16 *pctype
.idata:00413444                 extrn _pctype:dword     ; DATA XREF: sub_4055C0:loc_405CB4↑r
.idata:00413448 ; int (__cdecl *_read)(int FileHandle, void *DstBuf, unsigned int MaxCharCount)
.idata:00413448                 extrn __imp__read:dword ; DATA XREF: _read↑r
.idata:0041344C ; int (__cdecl *_setmode)(int FileHandle, int Mode)
.idata:0041344C                 extrn __imp__setmode:dword
.idata:0041344C                                         ; DATA XREF: _setmode↑r
.idata:00413450 ; char *(__cdecl *_strdup_0)(const char *String)
.idata:00413450                 extrn __imp__strdup_0:dword
.idata:00413450                                         ; DATA XREF: _strdup_0↑r
.idata:00413454 ; int (__cdecl *_stricmp_0)(const char *String1, const char *String2)
.idata:00413454                 extrn __imp__stricmp_0:dword
.idata:00413454                                         ; DATA XREF: _stricmp_0↑r
.idata:00413458 ; int (__cdecl *_write)(int FileHandle, const void *Buf, unsigned int MaxCharCount)
.idata:00413458                 extrn __imp__write:dword
.idata:00413458                                         ; DATA XREF: _write↑r
.idata:0041345C ; void (__cdecl __noreturn *abort)()
.idata:0041345C                 extrn __imp_abort:dword ; DATA XREF: abort↑r
.idata:00413460 ; int (__cdecl *atexit)(void (__cdecl *)())
.idata:00413460                 extrn atexit:dword      ; CODE XREF: sub_401040+C↑p
.idata:00413460                                         ; DATA XREF: sub_401040+C↑r
.idata:00413464 ; void *(__cdecl *calloc)(size_t Count, size_t Size)
.idata:00413464                 extrn __imp_calloc:dword
.idata:00413464                                         ; DATA XREF: calloc↑r
.idata:00413468 ; void (__cdecl __noreturn *exit)(int Code)
.idata:00413468                 extrn __imp_exit:dword  ; DATA XREF: exit↑r
.idata:0041346C ; int (__cdecl *fclose)(FILE *Stream)
.idata:0041346C                 extrn __imp_fclose:dword
.idata:0041346C                                         ; DATA XREF: fclose↑r
.idata:00413470 ; int (__cdecl *fflush)(FILE *Stream)
.idata:00413470                 extrn __imp_fflush:dword
.idata:00413470                                         ; DATA XREF: fflush↑r
.idata:00413474 ; FILE *(__cdecl *fopen)(const char *FileName, const char *Mode)
.idata:00413474                 extrn __imp_fopen:dword ; DATA XREF: fopen↑r
.idata:00413478 ; int (*fprintf)(FILE *const Stream, const char *const Format, ...)
.idata:00413478                 extrn __imp_fprintf:dword
.idata:00413478                                         ; DATA XREF: fprintf↑r
.idata:0041347C ; int (__cdecl *fputs)(const char *Buffer, FILE *Stream)
.idata:0041347C                 extrn __imp_fputs:dword ; DATA XREF: fputs↑r
.idata:00413480 ; void (__cdecl *free)(void *Block)
.idata:00413480                 extrn __imp_free:dword  ; DATA XREF: free↑r
.idata:00413484 ; char *(__cdecl *getenv)(const char *VarName)
.idata:00413484                 extrn __imp_getenv:dword
.idata:00413484                                         ; DATA XREF: getenv↑r
.idata:00413488 ; int (__cdecl *isalpha)(int C)
.idata:00413488                 extrn __imp_isalpha:dword
.idata:00413488                                         ; DATA XREF: isalpha↑r
.idata:0041348C ; int (__cdecl *iswctype)(wint_t C, wctype_t Type)
.idata:0041348C                 extrn __imp_iswctype:dword
.idata:0041348C                                         ; DATA XREF: iswctype↑r
.idata:00413490 ; struct tm *(__cdecl *localtime)(const __time32_t *const Time)
.idata:00413490                 extrn __imp_localtime:dword
.idata:00413490                                         ; DATA XREF: localtime↑r
.idata:00413494 ; void *(__cdecl *malloc)(size_t Size)
.idata:00413494                 extrn __imp_malloc:dword
.idata:00413494                                         ; DATA XREF: malloc↑r
.idata:00413498 ; void *(__cdecl *memcpy)(void *, const void *Src, size_t Size)
.idata:00413498                 extrn __imp_memcpy:dword
.idata:00413498                                         ; DATA XREF: memcpy↑r
.idata:0041349C ; void *(__cdecl *memset)(void *, int Val, size_t Size)
.idata:0041349C                 extrn __imp_memset:dword
.idata:0041349C                                         ; DATA XREF: memset↑r
.idata:004134A0 ; int (*printf)(const char *const Format, ...)
.idata:004134A0                 extrn __imp_printf:dword
.idata:004134A0                                         ; DATA XREF: printf↑r
.idata:004134A4 ; int (__cdecl *puts)(const char *Buffer)
.idata:004134A4                 extrn __imp_puts:dword  ; DATA XREF: puts↑r
.idata:004134A8 ; void *(__cdecl *realloc)(void *Block, size_t Size)
.idata:004134A8                 extrn __imp_realloc:dword
.idata:004134A8                                         ; DATA XREF: realloc↑r
.idata:004134AC ; char *(__cdecl *setlocale)(int Category, const char *Locale)
.idata:004134AC                 extrn __imp_setlocale:dword
.idata:004134AC                                         ; DATA XREF: setlocale↑r
.idata:004134B0 ; _crt_signal_t (__cdecl *signal)(int Signal, _crt_signal_t Function)
.idata:004134B0                 extrn __imp_signal:dword
.idata:004134B0                                         ; DATA XREF: signal↑r
.idata:004134B4 ; int (*sprintf)(char *const Buffer, const char *const Format, ...)
.idata:004134B4                 extrn __imp_sprintf:dword
.idata:004134B4                                         ; DATA XREF: sprintf↑r
.idata:004134B8 ; int (*sscanf)(const char *const Buffer, const char *const Format, ...)
.idata:004134B8                 extrn __imp_sscanf:dword
.idata:004134B8                                         ; DATA XREF: sscanf↑r
.idata:004134BC ; char *(__cdecl *strcat)(char *Destination, const char *Source)
.idata:004134BC                 extrn __imp_strcat:dword
.idata:004134BC                                         ; DATA XREF: strcat↑r
.idata:004134C0 ; char *(__cdecl *strchr)(const char *Str, int Val)
.idata:004134C0                 extrn __imp_strchr:dword
.idata:004134C0                                         ; DATA XREF: strchr↑r
.idata:004134C4 ; int (__cdecl *strcmp)(const char *Str1, const char *Str2)
.idata:004134C4                 extrn __imp_strcmp:dword
.idata:004134C4                                         ; DATA XREF: strcmp↑r
.idata:004134C8 ; char *(__cdecl *strcpy)(char *Destination, const char *Source)
.idata:004134C8                 extrn __imp_strcpy:dword
.idata:004134C8                                         ; DATA XREF: strcpy↑r
.idata:004134CC ; char *(__cdecl *strerror)(int ErrorMessage)
.idata:004134CC                 extrn __imp_strerror:dword
.idata:004134CC                                         ; DATA XREF: strerror↑r
.idata:004134D0 ; size_t (__cdecl *strftime)(char *Buffer, size_t SizeInBytes, const char *Format, const struct tm *Tm)
.idata:004134D0                 extrn __imp_strftime:dword
.idata:004134D0                                         ; DATA XREF: strftime↑r
.idata:004134D4 ; size_t (__cdecl *strlen)(const char *Str)
.idata:004134D4                 extrn __imp_strlen:dword
.idata:004134D4                                         ; DATA XREF: strlen↑r
.idata:004134D8 ; char *(__cdecl *strncat)(char *Destination, const char *Source, size_t Count)
.idata:004134D8                 extrn __imp_strncat:dword
.idata:004134D8                                         ; DATA XREF: strncat↑r
.idata:004134DC ; int (__cdecl *strncmp)(const char *Str1, const char *Str2, size_t MaxCount)
.idata:004134DC                 extrn __imp_strncmp:dword
.idata:004134DC                                         ; DATA XREF: strncmp↑r
.idata:004134E0 ; char *(__cdecl *strncpy)(char *Destination, const char *Source, size_t Count)
.idata:004134E0                 extrn __imp_strncpy:dword
.idata:004134E0                                         ; DATA XREF: strncpy↑r
.idata:004134E4 ; char *(__cdecl *strpbrk)(const char *Str, const char *Control)
.idata:004134E4                 extrn __imp_strpbrk:dword
.idata:004134E4                                         ; DATA XREF: strpbrk↑r
.idata:004134E8 ; char *(__cdecl *strrchr)(const char *Str, int Ch)
.idata:004134E8                 extrn __imp_strrchr:dword
.idata:004134E8                                         ; DATA XREF: strrchr↑r
.idata:004134EC ; size_t (__cdecl *strspn)(const char *Str, const char *Control)
.idata:004134EC                 extrn __imp_strspn:dword
.idata:004134EC                                         ; DATA XREF: strspn↑r
.idata:004134F0 ; char *(__cdecl *strstr)(const char *Str, const char *SubStr)
.idata:004134F0                 extrn __imp_strstr:dword
.idata:004134F0                                         ; DATA XREF: strstr↑r
.idata:004134F4 ; unsigned int (__cdecl *strtoul)(const char *String, char **EndPtr, int Radix)
.idata:004134F4                 extrn __imp_strtoul:dword
.idata:004134F4                                         ; DATA XREF: strtoul↑r
.idata:004134F8 ; __time32_t (__cdecl *time)(__time32_t *const Time)
.idata:004134F8                 extrn __imp_time:dword  ; DATA XREF: time↑r
.idata:004134FC ; int (__cdecl *toupper)(int C)
.idata:004134FC                 extrn __imp_toupper:dword
.idata:004134FC                                         ; DATA XREF: toupper↑r
.idata:00413500 ; int (__cdecl *vfprintf)(FILE *const Stream, const char *const Format, va_list ArgList)
.idata:00413500                 extrn __imp_vfprintf:dword
.idata:00413500                                         ; DATA XREF: vfprintf↑r
.idata:00413504 ; int (__cdecl *vsprintf)(char *const Buffer, const char *const Format, va_list ArgList)
.idata:00413504                 extrn __imp_vsprintf:dword
.idata:00413504                                         ; DATA XREF: vsprintf↑r
.idata:00413508
.idata:00413510 ;
.idata:00413510 ; Imports from OLE32.dll
.idata:00413510 ;
.idata:00413510 ; HRESULT (__stdcall *CoCreateInstance)(const IID *const rclsid, LPUNKNOWN pUnkOuter, DWORD dwClsContext, const IID *const riid, LPVOID *ppv)
.idata:00413510                 extrn __imp_CoCreateInstance:dword
.idata:00413510                                         ; DATA XREF: CoCreateInstance↑r
.idata:00413514 ; void (__stdcall *CoUninitialize)()
.idata:00413514                 extrn __imp_CoUninitialize:dword
.idata:00413514                                         ; DATA XREF: CoUninitialize↑r
.idata:00413518 ; HRESULT (__stdcall *OleInitialize)(LPVOID pvReserved)
.idata:00413518                 extrn __imp_OleInitialize:dword
.idata:00413518                                         ; DATA XREF: OleInitialize↑r
.idata:0041351C
.idata:00413524 ;
.idata:00413524 ; Imports from WSOCK32.DLL
.idata:00413524 ;
.idata:00413524 ; struct hostent *(__stdcall *gethostbyaddr)(const char *addr, int len, int type)
.idata:00413524                 extrn __imp_gethostbyaddr:dword
.idata:00413524                                         ; DATA XREF: gethostbyaddr↑r
.idata:00413528 ; struct hostent *(__stdcall *gethostbyname)(const char *name)
.idata:00413528                 extrn __imp_gethostbyname:dword
.idata:00413528                                         ; DATA XREF: gethostbyname↑r
.idata:0041352C ; char *(__stdcall *inet_ntoa)(struct in_addr in)
.idata:0041352C                 extrn __imp_inet_ntoa:dword
.idata:0041352C                                         ; DATA XREF: inet_ntoa↑r
.idata:00413530
.idata:00413530
.idata:00413530
.idata:00413530                 end start
