.text:00401000 ;
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
.text:00401000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
.text:00401000 ; |                      License info: 48-357D-7BC4-C6                      |
.text:00401000 ; |                              Virginia Tech                              |
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ;
.text:00401000 ; Input SHA256 : 38F1031D69EDBBFE3882A3C6D8F5B23FBFD3222015E120BCD46F982E0B49A0FF
.text:00401000 ; Input MD5    : B4902B6EE6B3158A2E71CC23C8485374
.text:00401000 ; Input CRC32  : 1EE8835C
.text:00401000
.text:00401000 ; File Name   : /home/cindy/Documents/Projects/binary_cmc/benchmark/coreutils-5.3.0-bin/bin/rmdir.exe
.text:00401000 ; Format      : Portable executable for 80386 (PE)
.text:00401000 ; Imagebase   : 400000
.text:00401000 ; Timestamp   : 4266A24D (Wed Apr 20 18:41:17 2005)
.text:00401000 ; Section 1. (virtual address 00001000)
.text:00401000 ; Virtual size                  : 000045A0 (  17824.)
.text:00401000 ; Section size in file          : 00004600 (  17920.)
.text:00401000 ; Offset to raw data for section: 00000400
.text:00401000 ; Flags 60000020: Text Executable Readable
.text:00401000 ; Alignment     : default
.text:00401000
.text:00401000                 .686p
.text:00401000                 .mmx
.text:00401000                 .model flat
.text:00401000
.text:00401000 ; ===========================================================================
.text:00401000
.text:00401000 ; Segment type: Pure code
.text:00401000 ; Segment permissions: Read/Execute
.text:00401000 _text           segment para public 'CODE' use32
.text:00401000                 assume cs:_text
.text:00401000                 ;org 401000h
.text:00401000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00401000
.text:00401000 ; =============== S U B R O U T I N E =======================================
.text:00401000
.text:00401000 ; Attributes: noreturn bp-based frame
.text:00401000
.text:00401000                 public start
.text:00401000 start           proc near
.text:00401000
.text:00401000 Type            = dword ptr -8
.text:00401000
.text:00401000                 push    ebp
.text:00401001                 mov     ebp, esp
.text:00401003                 sub     esp, 8
.text:00401006                 mov     [esp+8+Type], 1 ; Type
.text:0040100D                 call    ds:__set_app_type
.text:00401013                 call    sub_401080
.text:00401013 start           endp
.text:00401013
.text:00401018 ; ---------------------------------------------------------------------------
.text:00401018                 mov     esp, ebp
.text:0040101A                 xor     eax, eax
.text:0040101C                 pop     ebp
.text:0040101D                 retn
.text:0040101D ; ---------------------------------------------------------------------------
.text:0040101E                 align 10h
.text:00401020                 push    ebp
.text:00401021                 mov     ebp, esp
.text:00401023                 sub     esp, 8
.text:00401026                 mov     dword ptr [esp], 2
.text:0040102D                 call    ds:__set_app_type
.text:00401033                 call    sub_401080
.text:00401038 ; ---------------------------------------------------------------------------
.text:00401038                 mov     esp, ebp
.text:0040103A                 xor     eax, eax
.text:0040103C                 pop     ebp
.text:0040103D                 retn
.text:0040103D ; ---------------------------------------------------------------------------
.text:0040103E                 align 10h
.text:00401040
.text:00401040 ; =============== S U B R O U T I N E =======================================
.text:00401040
.text:00401040 ; Attributes: bp-based frame
.text:00401040
.text:00401040 ; int __cdecl sub_401040(void (__cdecl *)())
.text:00401040 sub_401040      proc near               ; CODE XREF: sub_4016E0+65↓p
.text:00401040                                         ; .text:00405260↓p ...
.text:00401040
.text:00401040 var_8           = dword ptr -8
.text:00401040 arg_0           = dword ptr  8
.text:00401040
.text:00401040                 push    ebp
.text:00401041                 mov     ebp, esp
.text:00401043                 sub     esp, 8
.text:00401046                 mov     edx, [ebp+arg_0]
.text:00401049                 mov     [esp+8+var_8], edx ; void (__cdecl *)()
.text:0040104C                 call    ds:atexit
.text:00401052                 mov     esp, ebp
.text:00401054                 pop     ebp
.text:00401055                 retn
.text:00401055 sub_401040      endp
.text:00401055
.text:00401055 ; ---------------------------------------------------------------------------
.text:00401056                 align 10h
.text:00401060                 push    ebp
.text:00401061                 mov     ebp, esp
.text:00401063                 sub     esp, 8
.text:00401066                 mov     edx, [ebp+8]
.text:00401069                 mov     [esp], edx
.text:0040106C                 call    ds:_onexit
.text:00401072                 mov     esp, ebp
.text:00401074                 pop     ebp
.text:00401075                 retn
.text:00401075 ; ---------------------------------------------------------------------------
.text:00401076                 align 10h
.text:00401080
.text:00401080 ; =============== S U B R O U T I N E =======================================
.text:00401080
.text:00401080 ; Attributes: noreturn bp-based frame
.text:00401080
.text:00401080 sub_401080      proc near               ; CODE XREF: start+13↑p
.text:00401080                                         ; .text:00401033↑p
.text:00401080
.text:00401080 lpTopLevelExceptionFilter= dword ptr -28h
.text:00401080 Mode            = dword ptr -24h
.text:00401080 var_20          = dword ptr -20h
.text:00401080 var_1C          = dword ptr -1Ch
.text:00401080 var_18          = dword ptr -18h
.text:00401080 var_C           = byte ptr -0Ch
.text:00401080 var_8           = dword ptr -8
.text:00401080
.text:00401080                 push    ebp
.text:00401081                 mov     ebp, esp
.text:00401083                 push    ebx
.text:00401084                 sub     esp, 24h
.text:00401087                 mov     [esp+28h+lpTopLevelExceptionFilter], offset TopLevelExceptionFilter ; lpTopLevelExceptionFilter
.text:0040108E                 call    SetUnhandledExceptionFilter
.text:00401093                 sub     esp, 4
.text:00401096                 call    sub_405200
.text:0040109B                 mov     [esp+28h+lpTopLevelExceptionFilter], offset dword_406000
.text:004010A2                 mov     edx, dword_406050
.text:004010A8                 lea     ecx, [ebp+var_8]
.text:004010AB                 mov     [ebp+var_8], 0
.text:004010B2                 mov     [esp+28h+var_18], ecx
.text:004010B6                 mov     [esp+28h+var_1C], edx
.text:004010BA                 lea     edx, [ebp+var_C]
.text:004010BD                 mov     [esp+28h+var_20], edx
.text:004010C1                 mov     [esp+28h+Mode], offset dword_406004
.text:004010C9                 call    __getmainargs
.text:004010CE                 mov     eax, Mode
.text:004010D3                 test    eax, eax
.text:004010D5                 jz      short loc_401135
.text:004010D7                 mov     dword_406070, eax
.text:004010DC                 mov     edx, ds:_iob
.text:004010E2                 test    edx, edx
.text:004010E4                 jz      short loc_4010FB
.text:004010E6                 mov     [esp+28h+Mode], eax ; Mode
.text:004010EA                 mov     ebx, [edx+10h]
.text:004010ED                 mov     [esp+28h+lpTopLevelExceptionFilter], ebx ; FileHandle
.text:004010F0                 call    _setmode
.text:004010F5                 mov     edx, ds:_iob
.text:004010FB
.text:004010FB loc_4010FB:                             ; CODE XREF: sub_401080+64↑j
.text:004010FB                 cmp     edx, 0FFFFFFE0h
.text:004010FE                 jz      short loc_40111B
.text:00401100                 mov     ebx, Mode
.text:00401106                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040110A                 mov     ecx, [edx+30h]
.text:0040110D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401110                 call    _setmode
.text:00401115                 mov     edx, ds:_iob
.text:0040111B
.text:0040111B loc_40111B:                             ; CODE XREF: sub_401080+7E↑j
.text:0040111B                 cmp     edx, 0FFFFFFC0h
.text:0040111E                 jz      short loc_401135
.text:00401120                 mov     ebx, Mode
.text:00401126                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040112A                 mov     ecx, [edx+50h]
.text:0040112D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401130                 call    _setmode
.text:00401135
.text:00401135 loc_401135:                             ; CODE XREF: sub_401080+55↑j
.text:00401135                                         ; sub_401080+9E↑j
.text:00401135                 call    __p__fmode
.text:0040113A                 mov     ecx, dword_406070
.text:00401140                 mov     [eax], ecx
.text:00401142                 call    sub_4051D0
.text:00401147                 call    __p__environ
.text:0040114C                 mov     edx, dword_406000
.text:00401152                 mov     ebx, [eax]
.text:00401154                 mov     ecx, dword_406004
.text:0040115A                 mov     [esp+28h+lpTopLevelExceptionFilter], edx
.text:0040115D                 mov     [esp+28h+var_20], ebx
.text:00401161                 mov     [esp+28h+Mode], ecx
.text:00401165                 call    sub_4016E0
.text:00401165 sub_401080      endp
.text:00401165
.text:0040116A ; ---------------------------------------------------------------------------
.text:0040116A                 mov     ebx, eax
.text:0040116C                 call    _cexit
.text:00401171                 mov     [esp], ebx
.text:00401174                 call    ExitProcess
.text:00401174 ; ---------------------------------------------------------------------------
.text:00401179                 align 10h
.text:00401180
.text:00401180 ; =============== S U B R O U T I N E =======================================
.text:00401180
.text:00401180 ; Attributes: bp-based frame
.text:00401180
.text:00401180 ; LONG __stdcall TopLevelExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo)
.text:00401180 TopLevelExceptionFilter proc near       ; DATA XREF: sub_401080+7↑o
.text:00401180
.text:00401180 Signal          = dword ptr -18h
.text:00401180 Function        = dword ptr -14h
.text:00401180 var_8           = dword ptr -8
.text:00401180 var_4           = dword ptr -4
.text:00401180 ExceptionInfo   = dword ptr  8
.text:00401180
.text:00401180                 push    ebp
.text:00401181                 mov     ebp, esp
.text:00401183                 sub     esp, 18h
.text:00401186                 mov     [ebp+var_8], ebx
.text:00401189                 mov     ecx, [ebp+ExceptionInfo]
.text:0040118C                 xor     ebx, ebx
.text:0040118E                 mov     [ebp+var_4], esi
.text:00401191                 xor     esi, esi
.text:00401193                 mov     edx, [ecx]
.text:00401195                 mov     eax, [edx]
.text:00401197                 cmp     eax, 0C0000091h
.text:0040119C                 ja      loc_401260
.text:004011A2                 cmp     eax, 0C000008Dh
.text:004011A7                 jnb     short loc_401210
.text:004011A9                 cmp     eax, 0C0000005h
.text:004011AE                 jz      short loc_4011BE
.text:004011B0
.text:004011B0 loc_4011B0:                             ; CODE XREF: TopLevelExceptionFilter+59↓j
.text:004011B0                                         ; TopLevelExceptionFilter+77↓j ...
.text:004011B0                 mov     eax, ebx
.text:004011B2                 mov     esi, [ebp+var_4]
.text:004011B5                 mov     ebx, [ebp+var_8]
.text:004011B8                 mov     esp, ebp
.text:004011BA                 pop     ebp
.text:004011BB                 retn    4
.text:004011BE ; ---------------------------------------------------------------------------
.text:004011BE
.text:004011BE loc_4011BE:                             ; CODE XREF: TopLevelExceptionFilter+2E↑j
.text:004011BE                 mov     [esp+18h+Function], 0 ; Function
.text:004011C6                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:004011CD                 call    signal
.text:004011D2                 cmp     eax, 1
.text:004011D5                 jz      short loc_4011F9
.text:004011D7                 test    eax, eax
.text:004011D9                 jz      short loc_4011B0
.text:004011DB                 mov     [esp+18h+Signal], 0Bh
.text:004011E2                 lea     esi, [esi+0]
.text:004011E9                 lea     edi, [edi+0]
.text:004011F0
.text:004011F0 loc_4011F0:                             ; CODE XREF: TopLevelExceptionFilter+BD↓j
.text:004011F0                 call    eax
.text:004011F2
.text:004011F2 loc_4011F2:                             ; CODE XREF: TopLevelExceptionFilter+8D↓j
.text:004011F2                                         ; TopLevelExceptionFilter+D5↓j ...
.text:004011F2                 mov     ebx, 0FFFFFFFFh
.text:004011F7                 jmp     short loc_4011B0
.text:004011F9 ; ---------------------------------------------------------------------------
.text:004011F9
.text:004011F9 loc_4011F9:                             ; CODE XREF: TopLevelExceptionFilter+55↑j
.text:004011F9                 mov     [esp+18h+Function], 1 ; Function
.text:00401201                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:00401208                 call    signal
.text:0040120D                 jmp     short loc_4011F2
.text:0040120D ; ---------------------------------------------------------------------------
.text:0040120F                 align 10h
.text:00401210
.text:00401210 loc_401210:                             ; CODE XREF: TopLevelExceptionFilter+27↑j
.text:00401210                                         ; TopLevelExceptionFilter+E5↓j
.text:00401210                 mov     esi, 1
.text:00401215
.text:00401215 loc_401215:                             ; CODE XREF: TopLevelExceptionFilter+EC↓j
.text:00401215                 mov     [esp+18h+Function], 0 ; Function
.text:0040121D                 mov     [esp+18h+Signal], 8 ; Signal
.text:00401224                 call    signal
.text:00401229                 cmp     eax, 1
.text:0040122C                 jz      short loc_40123F
.text:0040122E                 test    eax, eax
.text:00401230                 jz      loc_4011B0
.text:00401236                 mov     [esp+18h+Signal], 8
.text:0040123D                 jmp     short loc_4011F0
.text:0040123F ; ---------------------------------------------------------------------------
.text:0040123F
.text:0040123F loc_40123F:                             ; CODE XREF: TopLevelExceptionFilter+AC↑j
.text:0040123F                 mov     [esp+18h+Function], 1 ; Function
.text:00401247                 mov     [esp+18h+Signal], 8 ; Signal
.text:0040124E                 call    signal
.text:00401253                 test    esi, esi
.text:00401255                 jz      short loc_4011F2
.text:00401257                 call    sub_405200
.text:0040125C                 jmp     short loc_4011F2
.text:0040125C ; ---------------------------------------------------------------------------
.text:0040125E                 align 10h
.text:00401260
.text:00401260 loc_401260:                             ; CODE XREF: TopLevelExceptionFilter+1C↑j
.text:00401260                 cmp     eax, 0C0000093h
.text:00401265                 jz      short loc_401210
.text:00401267                 cmp     eax, 0C0000094h
.text:0040126C                 jz      short loc_401215
.text:0040126E                 jmp     loc_4011B0
.text:0040126E TopLevelExceptionFilter endp
.text:0040126E
.text:0040126E ; ---------------------------------------------------------------------------
.text:00401273                 align 10h
.text:00401280 aIgnoreFailOnNo db 'ignore-fail-on-non-empty',0
.text:00401280                                         ; DATA XREF: .text:off_4012C0↓o
.text:00401299 aPath           db 'path',0             ; DATA XREF: .text:004012D0↓o
.text:0040129E aParents        db 'parents',0          ; DATA XREF: .text:004012E0↓o
.text:004012A6 aVerbose        db 'verbose',0          ; DATA XREF: .text:004012F0↓o
.text:004012AE aHelp           db 'help',0             ; DATA XREF: .text:00401300↓o
.text:004012B3 aVersion        db 'version',0          ; DATA XREF: .text:00401310↓o
.text:004012BB                 align 10h
.text:004012C0 off_4012C0      dd offset aIgnoreFailOnNo
.text:004012C0                                         ; DATA XREF: sub_4016E0+88↓o
.text:004012C0                                         ; "ignore-fail-on-non-empty"
.text:004012C4                 dd 2 dup(0)
.text:004012CC                 dd 80h
.text:004012D0                 dd offset aPath         ; "path"
.text:004012D4                 dd 2 dup(0)
.text:004012DC                 dd 70h
.text:004012E0                 dd offset aParents      ; "parents"
.text:004012E4                 dd 2 dup(0)
.text:004012EC                 dd 70h
.text:004012F0                 dd offset aVerbose      ; "verbose"
.text:004012F4                 dd 2 dup(0)
.text:004012FC                 dd 76h
.text:00401300                 dd offset aHelp         ; "help"
.text:00401304                 dd 2 dup(0)
.text:0040130C                 dd 0FFFFFF7Eh
.text:00401310                 dd offset aVersion      ; "version"
.text:00401314                 dd 2 dup(0)
.text:0040131C                 dd 0FFFFFF7Dh, 4 dup(0)
.text:00401330 ; const char Locale
.text:00401330 Locale          db 0                    ; DATA XREF: sub_4016E0+22↓o
.text:00401331                 db 0EBh, 0Dh, 90h
.text:00401334                 align 10h
.text:00401340 aCProgra1Coreut db 'c:/progra~1/CoreUtils/share/locale',0
.text:00401340                                         ; DATA XREF: sub_4016E0+3C↓o
.text:00401363 aCoreutils      db 'coreutils',0        ; DATA XREF: sub_4016E0+44↓o
.text:00401363                                         ; sub_4016E0+51↓o
.text:0040136D ; const char aPv[]
.text:0040136D aPv             db 'pv',0               ; DATA XREF: sub_4016E0+90↓o
.text:00401370                 align 20h
.text:00401380 aTrySHelpForMor db 'Try `%s --help',27h,' for more information.',0Ah,0
.text:00401380                                         ; DATA XREF: sub_4016E0:loc_4017AE↓o
.text:00401380                                         ; .text:00401A4F↓o
.text:004013A7                 align 20h
.text:004013C0 aUsageSOptionDi db 'Usage: %s [OPTION]... DIRECTORY...',0Ah,0
.text:004013C0                                         ; DATA XREF: sub_4016E0+124↓o
.text:004013C0                                         ; .text:loc_401A83↓o
.text:004013E4                 align 20h
.text:00401400 aRemoveTheDirec db 'Remove the DIRECTORY(ies), if they are empty.',0Ah
.text:00401400                                         ; DATA XREF: sub_4016E0+143↓o
.text:00401400                                         ; .text:00401AA2↓o
.text:00401400                 db 0Ah
.text:00401400                 db '      --ignore-fail-on-non-empty',0Ah
.text:00401400                 db '                  ignore each failure that is solely because a di'
.text:00401400                 db 'rectory',0Ah
.text:00401400                 db '                  is non-empty',0Ah,0
.text:004014B9                 align 10h
.text:004014C0 aPParentsRemove db '  -p, --parents   remove DIRECTORY, then try to remove each direc'
.text:004014C0                                         ; DATA XREF: sub_4016E0+165↓o
.text:004014C0                                         ; .text:00401AC4↓o
.text:004014C0                 db 'tory',0Ah
.text:004014C0                 db '                  component of that path name.  E.g., `rmdir -p a'
.text:004014C0                 db '/b/c',27h,' is',0Ah
.text:004014C0                 db '                  similar to `rmdir a/b/c a/b a',27h,'.',0Ah
.text:004014C0                 db '  -v, --verbose   output a diagnostic for every directory process'
.text:004014C0                 db 'ed',0Ah,0
.text:004015C7                 align 20h
.text:004015E0 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.text:004015E0                                         ; DATA XREF: sub_4016E0+187↓o
.text:004015E0                                         ; .text:00401AE6↓o
.text:0040160D                 align 20h
.text:00401620 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.text:00401620                                         ; DATA XREF: sub_4016E0+1A9↓o
.text:00401620                                         ; .text:00401B08↓o
.text:00401656 aReportBugsToS  db 0Ah                  ; DATA XREF: sub_4016E0+1CB↓o
.text:00401656                                         ; .text:00401B2A↓o
.text:00401656                 db 'Report bugs to <%s>.',0Ah,0
.text:0040166D aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.text:0040166D                                         ; DATA XREF: sub_4016E0+1D8↓o
.text:0040166D                                         ; .text:00401B37↓o
.text:00401683 aDavidMackenzie db 'David MacKenzie',0  ; DATA XREF: sub_4016E0+202↓o
.text:00401693 a530            db '5.3.0',0            ; DATA XREF: sub_4016E0+20A↓o
.text:00401699 aGnuCoreutils   db 'GNU coreutils',0    ; DATA XREF: sub_4016E0+215↓o
.text:004016A7 ; const FILE stru_4016A7
.text:004016A7 stru_4016A7     FILE <69646D72h, 696D0072h, 6E697373h, 706F2067h, 6E617265h, \
.text:004016A7                                         ; DATA XREF: sub_4016E0+21D↓o
.text:004016A7                                         ; sub_4016E0+245↓o
.text:004016A7                       73250064h, 6D657200h, 6E69766Fh>
.text:004016C7                 db  67h ; g
.text:004016C8                 db  20h
.text:004016C9                 db  64h ; d
.text:004016CA                 db  69h ; i
.text:004016CB                 db  72h ; r
.text:004016CC                 db  65h ; e
.text:004016CD                 db  63h ; c
.text:004016CE                 db  74h ; t
.text:004016CF                 db  6Fh ; o
.text:004016D0                 db  72h ; r
.text:004016D1                 db  79h ; y
.text:004016D2                 db  2Ch ; ,
.text:004016D3                 db  20h
.text:004016D4                 db  25h ; %
.text:004016D5                 db  73h ; s
.text:004016D6                 db    0
.text:004016D7                 align 10h
.text:004016E0
.text:004016E0 ; =============== S U B R O U T I N E =======================================
.text:004016E0
.text:004016E0 ; Attributes: noreturn bp-based frame fuzzy-sp
.text:004016E0
.text:004016E0 sub_4016E0      proc near               ; CODE XREF: sub_401080+E5↑p
.text:004016E0
.text:004016E0 Category        = dword ptr -38h
.text:004016E0 Locale          = dword ptr -34h
.text:004016E0 var_30          = dword ptr -30h
.text:004016E0 var_2C          = byte ptr -2Ch
.text:004016E0 var_28          = byte ptr -28h
.text:004016E0 var_24          = dword ptr -24h
.text:004016E0 var_11          = byte ptr -11h
.text:004016E0 var_10          = dword ptr -10h
.text:004016E0 arg_0           = dword ptr  8
.text:004016E0 arg_4           = dword ptr  0Ch
.text:004016E0
.text:004016E0                 push    ebp
.text:004016E1                 xor     eax, eax
.text:004016E3                 mov     ebp, esp
.text:004016E5                 push    edi
.text:004016E6                 push    esi
.text:004016E7                 push    ebx
.text:004016E8                 sub     esp, 2Ch
.text:004016EB                 mov     bl, 1
.text:004016ED                 mov     esi, [ebp+arg_4]
.text:004016F0                 and     esp, 0FFFFFFF0h
.text:004016F3                 mov     edi, [ebp+arg_0]
.text:004016F6                 call    __alloca
.text:004016FB                 call    sub_4052A0
.text:00401700                 mov     edx, [esi]
.text:00401702                 mov     [esp+38h+Locale], offset Locale ; Locale
.text:0040170A                 mov     [esp+38h+Category], 0 ; Category
.text:00401711                 mov     ds:dword_4071C0, edx
.text:00401717                 call    setlocale
.text:0040171C                 mov     [esp+38h+Locale], offset aCProgra1Coreut ; "c:/progra~1/CoreUtils/share/locale"
.text:00401724                 mov     [esp+38h+Category], offset aCoreutils ; "coreutils"
.text:0040172B                 call    ds:__imp_libintl_bindtextdomain
.text:00401731                 mov     [esp+38h+Category], offset aCoreutils ; "coreutils"
.text:00401738                 call    ds:libintl_textdomain
.text:0040173E                 mov     [esp+38h+Category], offset sub_4032D0 ; void (__cdecl *)()
.text:00401745                 call    sub_401040
.text:0040174A                 mov     ds:byte_407000, 0
.text:00401751                 jmp     short loc_401760
.text:00401751 ; ---------------------------------------------------------------------------
.text:00401753                 align 10h
.text:00401760
.text:00401760 loc_401760:                             ; CODE XREF: sub_4016E0+71↑j
.text:00401760                                         ; sub_4016E0+CC↓j ...
.text:00401760                 mov     dword ptr [esp+38h+var_28], 0 ; int
.text:00401768                 mov     dword ptr [esp+38h+var_2C], offset off_4012C0 ; char
.text:00401770                 mov     [esp+38h+var_30], offset aPv ; "pv"
.text:00401778                 mov     [esp+38h+Locale], esi ; int
.text:0040177C                 mov     [esp+38h+Category], edi ; int
.text:0040177F                 call    sub_403160
.text:00401784                 cmp     eax, 0FFFFFFFFh
.text:00401787                 jz      loc_40191C
.text:0040178D                 cmp     eax, 70h ; 'p'
.text:00401790                 jz      loc_401910
.text:00401796                 cmp     eax, 70h ; 'p'
.text:00401799                 jle     short loc_4017F2
.text:0040179B                 cmp     eax, 76h ; 'v'
.text:0040179E                 jz      short loc_4017E6
.text:004017A0                 add     eax, 0FFFFFF80h
.text:004017A3                 jnz     short loc_4017AE
.text:004017A5                 mov     ds:byte_407010, 1
.text:004017AC                 jmp     short loc_401760
.text:004017AE ; ---------------------------------------------------------------------------
.text:004017AE
.text:004017AE loc_4017AE:                             ; CODE XREF: sub_4016E0+C3↑j
.text:004017AE                                         ; sub_4016E0+122↓j ...
.text:004017AE                 mov     [esp+38h+Category], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:004017B5                 call    ds:libintl_gettext
.text:004017BB                 mov     ebx, ds:_iob
.text:004017C1                 mov     esi, ds:dword_4071C0
.text:004017C7                 add     ebx, 40h ; '@'
.text:004017CA                 mov     [esp+38h+var_30], esi
.text:004017CE                 mov     [esp+38h+Locale], eax ; Format
.text:004017D2                 mov     [esp+38h+Category], ebx ; Stream
.text:004017D5                 call    fprintf
.text:004017DA                 mov     [esp+38h+Category], 1 ; Code
.text:004017E1
.text:004017E1 loc_4017E1:                             ; CODE XREF: sub_4016E0+1EF↓j
.text:004017E1                                         ; sub_4016E0+2C1↓j
.text:004017E1                 call    exit
.text:004017E6 ; ---------------------------------------------------------------------------
.text:004017E6
.text:004017E6 loc_4017E6:                             ; CODE XREF: sub_4016E0+BE↑j
.text:004017E6                 mov     ds:byte_407020, 1
.text:004017ED                 jmp     loc_401760
.text:004017F2 ; ---------------------------------------------------------------------------
.text:004017F2
.text:004017F2 loc_4017F2:                             ; CODE XREF: sub_4016E0+B9↑j
.text:004017F2                 cmp     eax, 0FFFFFF7Dh
.text:004017F7                 jz      loc_4018D4
.text:004017FD                 cmp     eax, 0FFFFFF7Eh
.text:00401802                 jnz     short loc_4017AE
.text:00401804                 mov     [esp+38h+Category], offset aUsageSOptionDi ; "Usage: %s [OPTION]... DIRECTORY...\n"
.text:0040180B                 call    ds:libintl_gettext
.text:00401811                 mov     ecx, ds:dword_4071C0
.text:00401817                 mov     [esp+38h+Category], eax ; Format
.text:0040181A                 mov     [esp+38h+Locale], ecx
.text:0040181E                 call    printf
.text:00401823                 mov     [esp+38h+Category], offset aRemoveTheDirec ; "Remove the DIRECTORY(ies), if they are "...
.text:0040182A                 call    ds:libintl_gettext
.text:00401830                 mov     edi, ds:_iob
.text:00401836                 add     edi, 20h ; ' '
.text:00401839                 mov     [esp+38h+Locale], edi ; Stream
.text:0040183D                 mov     [esp+38h+Category], eax ; Buffer
.text:00401840                 call    fputs
.text:00401845                 mov     [esp+38h+Category], offset aPParentsRemove ; "  -p, --parents   remove DIRECTORY, the"...
.text:0040184C                 call    ds:libintl_gettext
.text:00401852                 mov     esi, ds:_iob
.text:00401858                 add     esi, 20h ; ' '
.text:0040185B                 mov     [esp+38h+Locale], esi ; Stream
.text:0040185F                 mov     [esp+38h+Category], eax ; Buffer
.text:00401862                 call    fputs
.text:00401867                 mov     [esp+38h+Category], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:0040186E                 call    ds:libintl_gettext
.text:00401874                 mov     ebx, ds:_iob
.text:0040187A                 add     ebx, 20h ; ' '
.text:0040187D                 mov     [esp+38h+Locale], ebx ; Stream
.text:00401881                 mov     [esp+38h+Category], eax ; Buffer
.text:00401884                 call    fputs
.text:00401889                 mov     [esp+38h+Category], offset aVersionOutputV ; "      --version  output version informa"...
.text:00401890                 call    ds:libintl_gettext
.text:00401896                 mov     ecx, ds:_iob
.text:0040189C                 add     ecx, 20h ; ' '
.text:0040189F                 mov     [esp+38h+Locale], ecx ; Stream
.text:004018A3                 mov     [esp+38h+Category], eax ; Buffer
.text:004018A6                 call    fputs
.text:004018AB                 mov     [esp+38h+Category], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:004018B2                 call    ds:libintl_gettext
.text:004018B8                 mov     [esp+38h+Locale], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:004018C0                 mov     [esp+38h+Category], eax ; Format
.text:004018C3                 call    printf
.text:004018C8
.text:004018C8 loc_4018C8:                             ; CODE XREF: sub_4016E0+22D↓j
.text:004018C8                 mov     [esp+38h+Category], 0
.text:004018CF                 jmp     loc_4017E1
.text:004018D4 ; ---------------------------------------------------------------------------
.text:004018D4
.text:004018D4 loc_4018D4:                             ; CODE XREF: sub_4016E0+117↑j
.text:004018D4                 mov     [esp+38h+var_24], 0
.text:004018DC                 mov     edx, ds:_iob
.text:004018E2                 mov     dword ptr [esp+38h+var_28], offset aDavidMackenzie ; "David MacKenzie"
.text:004018EA                 mov     dword ptr [esp+38h+var_2C], offset a530 ; "5.3.0"
.text:004018F2                 add     edx, 20h ; ' '
.text:004018F5                 mov     [esp+38h+var_30], offset aGnuCoreutils ; "GNU coreutils"
.text:004018FD                 mov     [esp+38h+Locale], offset stru_4016A7 ; FILE *
.text:00401905                 mov     [esp+38h+Category], edx ; FILE *
.text:00401908                 call    sub_403120
.text:0040190D                 jmp     short loc_4018C8
.text:0040190D ; ---------------------------------------------------------------------------
.text:0040190F                 align 10h
.text:00401910
.text:00401910 loc_401910:                             ; CODE XREF: sub_4016E0+B0↑j
.text:00401910                 mov     ds:byte_407000, 1
.text:00401917                 jmp     loc_401760
.text:0040191C ; ---------------------------------------------------------------------------
.text:0040191C
.text:0040191C loc_40191C:                             ; CODE XREF: sub_4016E0+A7↑j
.text:0040191C                 mov     eax, dword_406010
.text:00401921                 cmp     eax, edi
.text:00401923                 jnz     short loc_40194F
.text:00401925                 mov     [esp+38h+Category], (offset stru_4016A7._cnt+2)
.text:0040192C                 call    ds:libintl_gettext
.text:00401932                 mov     [esp+38h+Locale], 0 ; ErrorMessage
.text:0040193A                 mov     [esp+38h+Category], 0 ; Code
.text:00401941                 mov     [esp+38h+var_30], eax ; char *
.text:00401945                 call    sub_404C20
.text:0040194A                 jmp     loc_4017AE
.text:0040194F ; ---------------------------------------------------------------------------
.text:0040194F
.text:0040194F loc_40194F:                             ; CODE XREF: sub_4016E0+243↑j
.text:0040194F                 cmp     eax, edi
.text:00401951                 jge     short loc_401997
.text:00401953
.text:00401953 loc_401953:                             ; CODE XREF: sub_4016E0+2B5↓j
.text:00401953                 cmp     ds:byte_407020, 0
.text:0040195A                 mov     ecx, [esi+eax*4]
.text:0040195D                 mov     [ebp+var_10], ecx
.text:00401960                 jnz     loc_401A04
.text:00401966
.text:00401966 loc_401966:                             ; CODE XREF: sub_4016E0+350↓j
.text:00401966                 mov     edx, [ebp+var_10]
.text:00401969                 mov     [esp+38h+Category], edx ; LPCSTR
.text:0040196C                 call    sub_404EC0
.text:00401971                 test    eax, eax
.text:00401973                 jz      short loc_4019DA
.text:00401975                 cmp     ds:byte_407010, 0
.text:0040197C                 jz      short loc_4019A6
.text:0040197E                 call    _errno
.text:00401983                 cmp     dword ptr [eax], 29h ; ')'
.text:00401986                 jnz     short loc_4019A6
.text:00401988
.text:00401988 loc_401988:                             ; CODE XREF: sub_4016E0+2F8↓j
.text:00401988                                         ; sub_4016E0+301↓j ...
.text:00401988                 mov     eax, dword_406010
.text:0040198D                 inc     eax
.text:0040198E                 cmp     eax, edi
.text:00401990                 mov     dword_406010, eax
.text:00401995                 jl      short loc_401953
.text:00401997
.text:00401997 loc_401997:                             ; CODE XREF: sub_4016E0+271↑j
.text:00401997                 xor     edx, edx
.text:00401999                 test    bl, bl
.text:0040199B                 setz    dl
.text:0040199E                 mov     [esp+38h+Category], edx
.text:004019A1                 jmp     loc_4017E1
.text:004019A6 ; ---------------------------------------------------------------------------
.text:004019A6
.text:004019A6 loc_4019A6:                             ; CODE XREF: sub_4016E0+29C↑j
.text:004019A6                                         ; sub_4016E0+2A6↑j
.text:004019A6                 mov     eax, [ebp+var_10]
.text:004019A9                 mov     [esp+38h+Category], eax ; char *
.text:004019AC                 call    sub_4033E0
.text:004019B1                 mov     ebx, eax
.text:004019B3                 call    _errno
.text:004019B8                 mov     dword ptr [esp+38h+var_2C], ebx ; char
.text:004019BC                 mov     [esp+38h+var_30], (offset stru_4016A7._charbuf+2) ; char *
.text:004019C4                 mov     ebx, [eax]
.text:004019C6                 mov     [esp+38h+Category], 0 ; Code
.text:004019CD                 mov     [esp+38h+Locale], ebx ; ErrorMessage
.text:004019D1                 xor     ebx, ebx
.text:004019D3                 call    sub_404C20
.text:004019D8                 jmp     short loc_401988
.text:004019DA ; ---------------------------------------------------------------------------
.text:004019DA
.text:004019DA loc_4019DA:                             ; CODE XREF: sub_4016E0+293↑j
.text:004019DA                 cmp     ds:byte_407000, 0
.text:004019E1                 jz      short loc_401988
.text:004019E3                 mov     [ebp+var_11], 0
.text:004019E7                 mov     ecx, [ebp+var_10]
.text:004019EA                 mov     [esp+38h+Category], ecx ; LPCSTR
.text:004019ED                 call    sub_401B50
.text:004019F2                 test    al, al
.text:004019F4                 jz      short loc_4019FE
.text:004019F6                 test    bl, bl
.text:004019F8                 jz      short loc_4019FE
.text:004019FA                 mov     [ebp+var_11], 1
.text:004019FE
.text:004019FE loc_4019FE:                             ; CODE XREF: sub_4016E0+314↑j
.text:004019FE                                         ; sub_4016E0+318↑j
.text:004019FE                 movzx   ebx, [ebp+var_11]
.text:00401A02                 jmp     short loc_401988
.text:00401A04 ; ---------------------------------------------------------------------------
.text:00401A04
.text:00401A04 loc_401A04:                             ; CODE XREF: sub_4016E0+280↑j
.text:00401A04                 mov     [esp+38h+Category], (offset stru_4016A7._bufsiz+1)
.text:00401A0B                 call    ds:libintl_gettext
.text:00401A11                 mov     [esp+38h+Locale], 0 ; ErrorMessage
.text:00401A19                 mov     ecx, [ebp+var_10]
.text:00401A1C                 mov     [esp+38h+Category], 0 ; Code
.text:00401A23                 mov     dword ptr [esp+38h+var_2C], ecx ; char
.text:00401A27                 mov     [esp+38h+var_30], eax ; char *
.text:00401A2B                 call    sub_404C20
.text:00401A30                 jmp     loc_401966
.text:00401A30 sub_4016E0      endp
.text:00401A30
.text:00401A30 ; ---------------------------------------------------------------------------
.text:00401A35                 align 10h
.text:00401A40                 sub     esp, 1Ch
.text:00401A43                 mov     [esp+18h], ebx
.text:00401A47                 mov     ebx, [esp+20h]
.text:00401A4B                 test    ebx, ebx
.text:00401A4D                 jz      short loc_401A83
.text:00401A4F                 mov     dword ptr [esp], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:00401A56                 call    ds:libintl_gettext
.text:00401A5C                 mov     edx, ds:_iob
.text:00401A62                 mov     ecx, ds:dword_4071C0
.text:00401A68                 add     edx, 40h ; '@'
.text:00401A6B                 mov     [esp+8], ecx
.text:00401A6F                 mov     [esp+4], eax
.text:00401A73                 mov     [esp], edx
.text:00401A76                 call    fprintf
.text:00401A7B
.text:00401A7B loc_401A7B:                             ; CODE XREF: .text:00401B47↓j
.text:00401A7B                 mov     [esp], ebx
.text:00401A7E                 call    exit
.text:00401A83 ; ---------------------------------------------------------------------------
.text:00401A83
.text:00401A83 loc_401A83:                             ; CODE XREF: .text:00401A4D↑j
.text:00401A83                 mov     dword ptr [esp], offset aUsageSOptionDi ; "Usage: %s [OPTION]... DIRECTORY...\n"
.text:00401A8A                 call    ds:libintl_gettext
.text:00401A90                 mov     ecx, ds:dword_4071C0
.text:00401A96                 mov     [esp], eax
.text:00401A99                 mov     [esp+4], ecx
.text:00401A9D                 call    printf
.text:00401AA2                 mov     dword ptr [esp], offset aRemoveTheDirec ; "Remove the DIRECTORY(ies), if they are "...
.text:00401AA9                 call    ds:libintl_gettext
.text:00401AAF                 mov     ecx, ds:_iob
.text:00401AB5                 add     ecx, 20h ; ' '
.text:00401AB8                 mov     [esp+4], ecx
.text:00401ABC                 mov     [esp], eax
.text:00401ABF                 call    fputs
.text:00401AC4                 mov     dword ptr [esp], offset aPParentsRemove ; "  -p, --parents   remove DIRECTORY, the"...
.text:00401ACB                 call    ds:libintl_gettext
.text:00401AD1                 mov     ecx, ds:_iob
.text:00401AD7                 add     ecx, 20h ; ' '
.text:00401ADA                 mov     [esp+4], ecx
.text:00401ADE                 mov     [esp], eax
.text:00401AE1                 call    fputs
.text:00401AE6                 mov     dword ptr [esp], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:00401AED                 call    ds:libintl_gettext
.text:00401AF3                 mov     ecx, ds:_iob
.text:00401AF9                 add     ecx, 20h ; ' '
.text:00401AFC                 mov     [esp+4], ecx
.text:00401B00                 mov     [esp], eax
.text:00401B03                 call    fputs
.text:00401B08                 mov     dword ptr [esp], offset aVersionOutputV ; "      --version  output version informa"...
.text:00401B0F                 call    ds:libintl_gettext
.text:00401B15                 mov     ecx, ds:_iob
.text:00401B1B                 add     ecx, 20h ; ' '
.text:00401B1E                 mov     [esp+4], ecx
.text:00401B22                 mov     [esp], eax
.text:00401B25                 call    fputs
.text:00401B2A                 mov     dword ptr [esp], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:00401B31                 call    ds:libintl_gettext
.text:00401B37                 mov     dword ptr [esp+4], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:00401B3F                 mov     [esp], eax
.text:00401B42                 call    printf
.text:00401B47                 jmp     loc_401A7B
.text:00401B47 ; ---------------------------------------------------------------------------
.text:00401B4C                 align 10h
.text:00401B50
.text:00401B50 ; =============== S U B R O U T I N E =======================================
.text:00401B50
.text:00401B50
.text:00401B50 ; int __cdecl sub_401B50(LPCSTR)
.text:00401B50 sub_401B50      proc near               ; CODE XREF: sub_4016E0+30D↑p
.text:00401B50
.text:00401B50 Str             = dword ptr -1Ch
.text:00401B50 ErrorMessage    = dword ptr -18h
.text:00401B50 var_14          = dword ptr -14h
.text:00401B50 var_10          = byte ptr -10h
.text:00401B50 var_5           = byte ptr -5
.text:00401B50 arg_0           = dword ptr  4
.text:00401B50
.text:00401B50                 push    ebx
.text:00401B51                 sub     esp, 18h
.text:00401B54                 mov     ebx, [esp+1Ch+arg_0]
.text:00401B58                 mov     [esp+1Ch+var_5], 1
.text:00401B5D                 mov     [esp+1Ch+Str], ebx
.text:00401B60                 call    sub_403410
.text:00401B65                 lea     esi, [esi+0]
.text:00401B69                 lea     edi, [edi+0]
.text:00401B70
.text:00401B70 loc_401B70:                             ; CODE XREF: sub_401B50+6D↓j
.text:00401B70                 mov     [esp+1Ch+ErrorMessage], 2Fh ; '/' ; Ch
.text:00401B78                 mov     [esp+1Ch+Str], ebx ; Str
.text:00401B7B                 call    strrchr
.text:00401B80                 test    eax, eax
.text:00401B82                 jz      short loc_401BD7
.text:00401B84                 lea     esi, [esi+0]
.text:00401B8A                 lea     edi, [edi+0]
.text:00401B90
.text:00401B90 loc_401B90:                             ; CODE XREF: sub_401B50+4A↓j
.text:00401B90                 cmp     eax, ebx
.text:00401B92                 jbe     short loc_401B9C
.text:00401B94                 cmp     byte ptr [eax], 2Fh ; '/'
.text:00401B97                 jnz     short loc_401B9C
.text:00401B99                 dec     eax
.text:00401B9A                 jmp     short loc_401B90
.text:00401B9C ; ---------------------------------------------------------------------------
.text:00401B9C
.text:00401B9C loc_401B9C:                             ; CODE XREF: sub_401B50+42↑j
.text:00401B9C                                         ; sub_401B50+47↑j
.text:00401B9C                 mov     byte ptr [eax+1], 0
.text:00401BA0                 cmp     ds:byte_407020, 0
.text:00401BA7                 jnz     short loc_401C10
.text:00401BA9
.text:00401BA9 loc_401BA9:                             ; CODE XREF: sub_401B50+E9↓j
.text:00401BA9                 mov     [esp+1Ch+Str], ebx ; LPCSTR
.text:00401BAC                 call    sub_404EC0
.text:00401BB1                 test    eax, eax
.text:00401BB3                 setz    [esp+1Ch+var_5]
.text:00401BB8                 cmp     [esp+1Ch+var_5], 0
.text:00401BBD                 jnz     short loc_401B70
.text:00401BBF                 cmp     ds:byte_407010, 0
.text:00401BC6                 jz      short loc_401BE1
.text:00401BC8                 call    _errno
.text:00401BCD                 cmp     dword ptr [eax], 29h ; ')'
.text:00401BD0                 jnz     short loc_401BE1
.text:00401BD2                 mov     [esp+1Ch+var_5], 1
.text:00401BD7
.text:00401BD7 loc_401BD7:                             ; CODE XREF: sub_401B50+32↑j
.text:00401BD7                                         ; sub_401B50+BE↓j
.text:00401BD7                 movzx   eax, [esp+1Ch+var_5]
.text:00401BDC                 add     esp, 18h
.text:00401BDF                 pop     ebx
.text:00401BE0                 retn
.text:00401BE1 ; ---------------------------------------------------------------------------
.text:00401BE1
.text:00401BE1 loc_401BE1:                             ; CODE XREF: sub_401B50+76↑j
.text:00401BE1                                         ; sub_401B50+80↑j
.text:00401BE1                 mov     [esp+1Ch+Str], ebx ; char *
.text:00401BE4                 call    sub_4033E0
.text:00401BE9                 mov     ebx, eax
.text:00401BEB                 call    _errno
.text:00401BF0                 mov     dword ptr [esp+1Ch+var_10], ebx ; char
.text:00401BF4                 mov     [esp+1Ch+var_14], (offset stru_4016A7._charbuf+2) ; char *
.text:00401BFC                 mov     edx, [eax]
.text:00401BFE                 mov     [esp+1Ch+Str], 0 ; Code
.text:00401C05                 mov     [esp+1Ch+ErrorMessage], edx ; ErrorMessage
.text:00401C09                 call    sub_404C20
.text:00401C0E                 jmp     short loc_401BD7
.text:00401C10 ; ---------------------------------------------------------------------------
.text:00401C10
.text:00401C10 loc_401C10:                             ; CODE XREF: sub_401B50+57↑j
.text:00401C10                 mov     [esp+1Ch+Str], (offset stru_4016A7._bufsiz+1)
.text:00401C17                 call    ds:libintl_gettext
.text:00401C1D                 mov     dword ptr [esp+1Ch+var_10], ebx ; char
.text:00401C21                 mov     [esp+1Ch+ErrorMessage], 0 ; ErrorMessage
.text:00401C29                 mov     [esp+1Ch+Str], 0 ; Code
.text:00401C30                 mov     [esp+1Ch+var_14], eax ; char *
.text:00401C34                 call    sub_404C20
.text:00401C39                 jmp     loc_401BA9
.text:00401C39 sub_401B50      endp
.text:00401C39
.text:00401C39 ; ---------------------------------------------------------------------------
.text:00401C3E                 align 10h
.text:00401C40 dword_401C40    dd 90002D2Dh, 7 dup(90909090h)
.text:00401C40                                         ; DATA XREF: sub_401E90+E4↓o
.text:00401C60 aSOptionCSDoesn db '%s: option `%c%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00401C60                                         ; DATA XREF: sub_401E90+2FC↓o
.text:00401C8D                 align 20h
.text:00401CA0 aSOptionSDoesnT db '%s: option `--%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00401CA0                                         ; DATA XREF: sub_401E90:loc_4021F2↓o
.text:00401CCD                 align 20h
.text:00401CE0 aSOptionSRequir db '%s: option `%s',27h,' requires an argument',0Ah,0
.text:00401CE0                                         ; DATA XREF: sub_401E90:loc_402290↓o
.text:00401CE0                                         ; sub_401E90:loc_402657↓o
.text:00401D06                 align 20h
.text:00401D20 aSUnrecognizedO db '%s: unrecognized option `%c%s',27h,0Ah,0
.text:00401D20                                         ; DATA XREF: sub_401E90+48E↓o
.text:00401D40 dword_401D40    dd 90909000h, 7 dup(90909090h)
.text:00401D40                                         ; DATA XREF: sub_401E90:loc_402361↓o
.text:00401D60 aSUnrecognizedO_0 db '%s: unrecognized option `--%s',27h,0Ah,0
.text:00401D60                                         ; DATA XREF: sub_401E90:loc_40237A↓o
.text:00401D80 aSOptionRequire db '%s: option requires an argument -- %c',0Ah,0
.text:00401D80                                         ; DATA XREF: sub_401E90:loc_40245F↓o
.text:00401D80                                         ; sub_401E90:loc_40278C↓o
.text:00401DA7                 align 20h
.text:00401DC0 aSOptionWSDoesn db '%s: option `-W %s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00401DC0                                         ; DATA XREF: sub_401E90:loc_4025D3↓o
.text:00401DEE                 align 20h
.text:00401E00 aSOptionWSIsAmb db '%s: option `-W %s',27h,' is ambiguous',0Ah,0
.text:00401E00                                         ; DATA XREF: sub_401E90:loc_4026BF↓o
.text:00401E21 aSIllegalOption db '%s: illegal option -- %c',0Ah,0
.text:00401E21                                         ; DATA XREF: sub_401E90+93F↓o
.text:00401E3B aSInvalidOption db '%s: invalid option -- %c',0Ah,0
.text:00401E3B                                         ; DATA XREF: sub_401E90:loc_402807↓o
.text:00401E55 aSOptionSIsAmbi db '%s: option `%s',27h,' is ambiguous',0Ah,0
.text:00401E55                                         ; DATA XREF: sub_401E90:loc_40282E↓o
.text:00401E73 ; const char VarName[]
.text:00401E73 VarName         db 'POSIXLY_CORRECT',0  ; DATA XREF: sub_401E90:loc_4029E0↓o
.text:00401E83                 align 10h
.text:00401E90
.text:00401E90 ; =============== S U B R O U T I N E =======================================
.text:00401E90
.text:00401E90
.text:00401E90 ; int __cdecl sub_401E90(int, int, char *Str, int, int, int, int, int)
.text:00401E90 sub_401E90      proc near               ; CODE XREF: sub_402A20+5A↓p
.text:00401E90                                         ; .text:00402B0A↓p ...
.text:00401E90
.text:00401E90 Str1            = dword ptr -5Ch
.text:00401E90 Str2            = dword ptr -58h
.text:00401E90 MaxCount        = dword ptr -54h
.text:00401E90 var_50          = dword ptr -50h
.text:00401E90 var_4C          = dword ptr -4Ch
.text:00401E90 var_3C          = dword ptr -3Ch
.text:00401E90 var_38          = dword ptr -38h
.text:00401E90 var_34          = dword ptr -34h
.text:00401E90 var_30          = dword ptr -30h
.text:00401E90 var_2C          = dword ptr -2Ch
.text:00401E90 var_28          = dword ptr -28h
.text:00401E90 var_24          = dword ptr -24h
.text:00401E90 var_20          = dword ptr -20h
.text:00401E90 var_1C          = dword ptr -1Ch
.text:00401E90 var_18          = dword ptr -18h
.text:00401E90 var_14          = dword ptr -14h
.text:00401E90 arg_0           = dword ptr  4
.text:00401E90 arg_4           = dword ptr  8
.text:00401E90 Str             = dword ptr  0Ch
.text:00401E90 arg_C           = dword ptr  10h
.text:00401E90 arg_10          = dword ptr  14h
.text:00401E90 arg_14          = dword ptr  18h
.text:00401E90 arg_18          = dword ptr  1Ch
.text:00401E90 arg_1C          = dword ptr  20h
.text:00401E90
.text:00401E90                 push    ebp
.text:00401E91                 mov     eax, 0FFFFFFFFh
.text:00401E96                 push    edi
.text:00401E97                 push    esi
.text:00401E98                 push    ebx
.text:00401E99                 sub     esp, 4Ch
.text:00401E9C                 mov     esi, [esp+5Ch+Str]
.text:00401EA0                 mov     ebp, [esp+5Ch+arg_1C]
.text:00401EA4                 cmp     byte ptr [esi], 3Ah ; ':'
.text:00401EA7                 mov     ebx, [ebp+4]
.text:00401EAA                 setz    dl
.text:00401EAD                 movzx   ecx, dl
.text:00401EB0                 dec     ecx
.text:00401EB1                 and     ecx, ebx
.text:00401EB3                 mov     [esp+5Ch+var_14], ecx
.text:00401EB7                 mov     ecx, [esp+5Ch+arg_0]
.text:00401EBB                 test    ecx, ecx
.text:00401EBD                 jle     loc_401FE7
.text:00401EC3                 mov     dword ptr [ebp+0Ch], 0
.text:00401ECA                 mov     ebx, [ebp+0]
.text:00401ECD                 test    ebx, ebx
.text:00401ECF                 jz      loc_402A00
.text:00401ED5                 mov     edi, [ebp+10h]
.text:00401ED8                 test    edi, edi
.text:00401EDA                 jnz     short loc_401F33
.text:00401EDC                 lea     esi, [esi+0]
.text:00401EE0
.text:00401EE0 loc_401EE0:                             ; CODE XREF: sub_401E90+B7C↓j
.text:00401EE0                 mov     [ebp+24h], ebx
.text:00401EE3                 mov     esi, [esp+5Ch+Str]
.text:00401EE7                 mov     [ebp+20h], ebx
.text:00401EEA                 mov     ecx, [esp+5Ch+arg_18]
.text:00401EEE                 xor     ebx, ebx
.text:00401EF0                 mov     dword ptr [ebp+14h], 0
.text:00401EF7                 test    ecx, ecx
.text:00401EF9                 jz      loc_4029E0
.text:00401EFF
.text:00401EFF loc_401EFF:                             ; CODE XREF: sub_401E90+B64↓j
.text:00401EFF                 mov     ebx, 1
.text:00401F04
.text:00401F04 loc_401F04:                             ; CODE XREF: sub_401E90+B5E↓j
.text:00401F04                 mov     [ebp+1Ch], ebx
.text:00401F07                 mov     ecx, [esp+5Ch+Str]
.text:00401F0B                 movzx   eax, byte ptr [ecx]
.text:00401F0E                 cmp     al, 2Dh ; '-'
.text:00401F10                 jz      loc_4029D0
.text:00401F16                 cmp     al, 2Bh ; '+'
.text:00401F18                 jz      loc_4029B9
.text:00401F1E                 xor     edx, edx
.text:00401F20                 test    ebx, ebx
.text:00401F22                 setz    dl
.text:00401F25                 mov     [ebp+18h], edx
.text:00401F28
.text:00401F28 loc_401F28:                             ; CODE XREF: sub_401E90+B35↓j
.text:00401F28                 mov     [esp+5Ch+Str], esi
.text:00401F2C                 mov     dword ptr [ebp+10h], 1
.text:00401F33
.text:00401F33 loc_401F33:                             ; CODE XREF: sub_401E90+4A↑j
.text:00401F33                 mov     eax, [ebp+14h]
.text:00401F36                 test    eax, eax
.text:00401F38                 jz      short loc_401F43
.text:00401F3A                 cmp     byte ptr [eax], 0
.text:00401F3D                 jnz     loc_402020
.text:00401F43
.text:00401F43 loc_401F43:                             ; CODE XREF: sub_401E90+A8↑j
.text:00401F43                 mov     ebx, [ebp+0]
.text:00401F46                 cmp     [ebp+24h], ebx
.text:00401F49                 jle     short loc_401F4E
.text:00401F4B                 mov     [ebp+24h], ebx
.text:00401F4E
.text:00401F4E loc_401F4E:                             ; CODE XREF: sub_401E90+B9↑j
.text:00401F4E                 cmp     [ebp+20h], ebx
.text:00401F51                 jle     short loc_401F56
.text:00401F53                 mov     [ebp+20h], ebx
.text:00401F56
.text:00401F56 loc_401F56:                             ; CODE XREF: sub_401E90+C1↑j
.text:00401F56                 cmp     dword ptr [ebp+18h], 1
.text:00401F5A                 jz      loc_402930
.text:00401F60
.text:00401F60 loc_401F60:                             ; CODE XREF: sub_401E90+B13↓j
.text:00401F60                 cmp     ebx, [esp+5Ch+arg_0]
.text:00401F64                 jz      loc_402914
.text:00401F6A                 cld
.text:00401F6B                 mov     ecx, [esp+5Ch+arg_4]
.text:00401F6F                 mov     edx, 3
.text:00401F74                 mov     edi, offset dword_401C40
.text:00401F79                 mov     esi, [ecx+ebx*4]
.text:00401F7C                 mov     ecx, edx
.text:00401F7E                 repe cmpsb
.text:00401F80                 jnz     short loc_401FBC
.text:00401F82                 mov     edx, [ebp+24h]
.text:00401F85                 lea     eax, [ebx+1]
.text:00401F88                 cmp     [ebp+20h], edx
.text:00401F8B                 mov     [ebp+0], eax
.text:00401F8E                 jz      loc_402928
.text:00401F94                 cmp     edx, eax
.text:00401F96                 jz      short loc_401FB0
.text:00401F98                 mov     [esp+5Ch+Str2], ebp
.text:00401F9C                 mov     ebx, [esp+5Ch+arg_4]
.text:00401FA0                 mov     [esp+5Ch+Str1], ebx
.text:00401FA3                 call    sub_402B40
.text:00401FA8                 nop
.text:00401FA9                 lea     esi, [esi+0]
.text:00401FB0
.text:00401FB0 loc_401FB0:                             ; CODE XREF: sub_401E90+106↑j
.text:00401FB0                                         ; sub_401E90+A9B↓j
.text:00401FB0                 mov     eax, [esp+5Ch+arg_0]
.text:00401FB4                 mov     ebx, eax
.text:00401FB6                 mov     [ebp+24h], eax
.text:00401FB9                 mov     [ebp+0], eax
.text:00401FBC
.text:00401FBC loc_401FBC:                             ; CODE XREF: sub_401E90+F0↑j
.text:00401FBC                 cmp     ebx, [esp+5Ch+arg_0]
.text:00401FC0                 jz      loc_402914
.text:00401FC6                 mov     esi, [esp+5Ch+arg_4]
.text:00401FCA                 mov     eax, [esi+ebx*4]
.text:00401FCD                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00401FD0                 jz      short loc_401FF7
.text:00401FD2
.text:00401FD2 loc_401FD2:                             ; CODE XREF: sub_401E90+16D↓j
.text:00401FD2                 mov     edx, [ebp+18h]
.text:00401FD5                 test    edx, edx
.text:00401FD7                 jz      short loc_401FF0
.text:00401FD9                 mov     [ebp+0Ch], eax
.text:00401FDC                 lea     edi, [ebx+1]
.text:00401FDF                 mov     eax, 1
.text:00401FE4                 mov     [ebp+0], edi
.text:00401FE7
.text:00401FE7 loc_401FE7:                             ; CODE XREF: sub_401E90+2D↑j
.text:00401FE7                                         ; sub_401E90+165↓j ...
.text:00401FE7                 add     esp, 4Ch
.text:00401FEA                 pop     ebx
.text:00401FEB                 pop     esi
.text:00401FEC                 pop     edi
.text:00401FED                 pop     ebp
.text:00401FEE                 retn
.text:00401FEE ; ---------------------------------------------------------------------------
.text:00401FEF                 align 10h
.text:00401FF0
.text:00401FF0 loc_401FF0:                             ; CODE XREF: sub_401E90+147↑j
.text:00401FF0                                         ; sub_401E90+A8A↓j ...
.text:00401FF0                 mov     eax, 0FFFFFFFFh
.text:00401FF5                 jmp     short loc_401FE7
.text:00401FF7 ; ---------------------------------------------------------------------------
.text:00401FF7
.text:00401FF7 loc_401FF7:                             ; CODE XREF: sub_401E90+140↑j
.text:00401FF7                 movzx   edx, byte ptr [eax+1]
.text:00401FFB                 test    dl, dl
.text:00401FFD                 jz      short loc_401FD2
.text:00401FFF                 mov     ebx, [esp+5Ch+arg_C]
.text:00402003                 xor     ecx, ecx
.text:00402005                 test    ebx, ebx
.text:00402007                 jz      short loc_402012
.text:00402009                 cmp     dl, 2Dh ; '-'
.text:0040200C                 jz      loc_40290A
.text:00402012
.text:00402012 loc_402012:                             ; CODE XREF: sub_401E90+177↑j
.text:00402012                                         ; sub_401E90+A7F↓j
.text:00402012                 lea     esi, [ecx+eax+1]
.text:00402016                 mov     [ebp+14h], esi
.text:00402019                 lea     esi, [esi+0]
.text:00402020
.text:00402020 loc_402020:                             ; CODE XREF: sub_401E90+AD↑j
.text:00402020                 mov     ecx, [esp+5Ch+arg_C]
.text:00402024                 test    ecx, ecx
.text:00402026                 jz      loc_4023B0
.text:0040202C                 mov     edx, [ebp+0]
.text:0040202F                 mov     edi, [esp+5Ch+arg_4]
.text:00402033                 mov     eax, [edi+edx*4]
.text:00402036                 movzx   edx, byte ptr [eax+1]
.text:0040203A                 cmp     dl, 2Dh ; '-'
.text:0040203D                 jz      short loc_402055
.text:0040203F                 mov     ebx, [esp+5Ch+arg_14]
.text:00402043                 test    ebx, ebx
.text:00402045                 jz      loc_4023B0
.text:0040204B                 cmp     byte ptr [eax+2], 0
.text:0040204F                 jz      loc_4028EA
.text:00402055
.text:00402055 loc_402055:                             ; CODE XREF: sub_401E90+1AD↑j
.text:00402055                                         ; sub_401E90+A75↓j
.text:00402055                 mov     [esp+5Ch+var_18], 0
.text:0040205D                 mov     ecx, [ebp+14h]
.text:00402060                 mov     [esp+5Ch+var_1C], 0
.text:00402068                 mov     [esp+5Ch+var_20], 0
.text:00402070                 mov     edi, ecx
.text:00402072                 mov     [esp+5Ch+var_24], 0FFFFFFFFh
.text:0040207A                 movzx   eax, byte ptr [ecx]
.text:0040207D                 test    al, al
.text:0040207F                 jz      short loc_40209C
.text:00402081                 cmp     al, 3Dh ; '='
.text:00402083                 jz      short loc_40209C
.text:00402085                 lea     esi, [esi+0]
.text:00402089                 lea     edi, [edi+0]
.text:00402090
.text:00402090 loc_402090:                             ; CODE XREF: sub_401E90+20A↓j
.text:00402090                 inc     edi
.text:00402091                 movzx   eax, byte ptr [edi]
.text:00402094                 test    al, al
.text:00402096                 jz      short loc_40209C
.text:00402098                 cmp     al, 3Dh ; '='
.text:0040209A                 jnz     short loc_402090
.text:0040209C
.text:0040209C loc_40209C:                             ; CODE XREF: sub_401E90+1EF↑j
.text:0040209C                                         ; sub_401E90+1F3↑j ...
.text:0040209C                 mov     [esp+5Ch+var_28], 0
.text:004020A4                 mov     esi, [esp+5Ch+arg_C]
.text:004020A8                 mov     ebx, [esi]
.text:004020AA                 test    ebx, ebx
.text:004020AC                 mov     edx, ebx
.text:004020AE                 jz      loc_4022D0
.text:004020B4                 lea     esi, [esi+0]
.text:004020BA                 lea     edi, [edi+0]
.text:004020C0
.text:004020C0 loc_4020C0:                             ; CODE XREF: sub_401E90+25E↓j
.text:004020C0                 mov     [esp+5Ch+Str2], ecx ; Str2
.text:004020C4                 mov     ebx, edi
.text:004020C6                 sub     ebx, ecx
.text:004020C8                 mov     [esp+5Ch+MaxCount], ebx ; MaxCount
.text:004020CC                 mov     [esp+5Ch+Str1], edx ; Str1
.text:004020CF                 call    strncmp
.text:004020D4                 test    eax, eax
.text:004020D6                 jz      loc_402866
.text:004020DC
.text:004020DC loc_4020DC:                             ; CODE XREF: sub_401E90+A0F↓j
.text:004020DC                                         ; sub_401E90+A24↓j ...
.text:004020DC                 inc     [esp+5Ch+var_28]
.text:004020E0                 add     esi, 10h
.text:004020E3                 mov     ecx, [esi]
.text:004020E5                 test    ecx, ecx
.text:004020E7                 mov     edx, ecx
.text:004020E9                 jz      short loc_4020F0
.text:004020EB                 mov     ecx, [ebp+14h]
.text:004020EE                 jmp     short loc_4020C0
.text:004020F0 ; ---------------------------------------------------------------------------
.text:004020F0
.text:004020F0 loc_4020F0:                             ; CODE XREF: sub_401E90+259↑j
.text:004020F0                                         ; sub_401E90+A55↓j
.text:004020F0                 mov     esi, [esp+5Ch+var_20]
.text:004020F4                 test    esi, esi
.text:004020F6                 jz      short loc_402104
.text:004020F8                 mov     edx, [esp+5Ch+var_1C]
.text:004020FC                 test    edx, edx
.text:004020FE                 jz      loc_402810
.text:00402104
.text:00402104 loc_402104:                             ; CODE XREF: sub_401E90+266↑j
.text:00402104                 mov     eax, [esp+5Ch+var_18]
.text:00402108                 test    eax, eax
.text:0040210A                 jz      loc_4022D0
.text:00402110                 mov     ecx, [ebp+0]
.text:00402113                 lea     eax, [ecx+1]
.text:00402116                 mov     [ebp+0], eax
.text:00402119                 cmp     byte ptr [edi], 0
.text:0040211C                 jz      loc_402230
.text:00402122                 mov     ecx, [esp+5Ch+var_18]
.text:00402126                 mov     esi, [ecx+4]
.text:00402129                 test    esi, esi
.text:0040212B                 jz      short loc_402176
.text:0040212D                 lea     ebx, [edi+1]
.text:00402130                 mov     [ebp+0Ch], ebx
.text:00402133
.text:00402133 loc_402133:                             ; CODE XREF: sub_401E90+3A8↓j
.text:00402133                                         ; sub_401E90+3C4↓j
.text:00402133                 mov     ebx, [ebp+14h]
.text:00402136                 mov     [esp+5Ch+Str1], ebx ; Str
.text:00402139                 call    strlen
.text:0040213E                 add     [ebp+14h], eax
.text:00402141                 mov     esi, [esp+5Ch+arg_10]
.text:00402145                 test    esi, esi
.text:00402147                 jz      short loc_402153
.text:00402149                 mov     ebp, [esp+5Ch+var_24]
.text:0040214D                 mov     ecx, [esp+5Ch+arg_10]
.text:00402151                 mov     [ecx], ebp
.text:00402153
.text:00402153 loc_402153:                             ; CODE XREF: sub_401E90+2B7↑j
.text:00402153                 mov     eax, [esp+5Ch+var_18]
.text:00402157                 mov     ecx, [eax+8]
.text:0040215A                 test    ecx, ecx
.text:0040215C                 jnz     short loc_40216A
.text:0040215E                 mov     ecx, [esp+5Ch+var_18]
.text:00402162
.text:00402162 loc_402162:                             ; CODE XREF: sub_401E90+723↓j
.text:00402162                 mov     eax, [ecx+0Ch]
.text:00402165                 jmp     loc_401FE7
.text:0040216A ; ---------------------------------------------------------------------------
.text:0040216A
.text:0040216A loc_40216A:                             ; CODE XREF: sub_401E90+2CC↑j
.text:0040216A                                         ; sub_401E90+719↓j
.text:0040216A                 mov     esi, [eax+0Ch]
.text:0040216D                 xor     eax, eax
.text:0040216F                 mov     [ecx], esi
.text:00402171                 jmp     loc_401FE7
.text:00402176 ; ---------------------------------------------------------------------------
.text:00402176
.text:00402176 loc_402176:                             ; CODE XREF: sub_401E90+29B↑j
.text:00402176                 mov     edi, [esp+5Ch+var_14]
.text:0040217A                 test    edi, edi
.text:0040217C                 jz      short loc_4021D0
.text:0040217E                 mov     esi, [esp+5Ch+arg_4]
.text:00402182                 mov     edx, [esi+eax*4-4]
.text:00402186                 cmp     byte ptr [edx+1], 2Dh ; '-'
.text:0040218A                 jz      short loc_4021F2
.text:0040218C                 mov     [esp+5Ch+Str1], offset aSOptionCSDoesn ; "%s: option `%c%s' doesn't allow an argu"...
.text:00402193                 call    ds:libintl_gettext
.text:00402199                 mov     edx, [esp+5Ch+var_18]
.text:0040219D                 mov     edi, [edx]
.text:0040219F                 mov     [esp+5Ch+var_4C], edi
.text:004021A3                 mov     ebx, [ebp+0]
.text:004021A6                 mov     edi, [esp+5Ch+arg_4]
.text:004021AA                 mov     ecx, [edi+ebx*4-4]
.text:004021AE                 movsx   esi, byte ptr [ecx]
.text:004021B1                 mov     ecx, ds:_iob
.text:004021B7                 add     ecx, 40h ; '@'
.text:004021BA                 mov     [esp+5Ch+var_50], esi
.text:004021BE                 mov     ebx, [edi]
.text:004021C0                 mov     [esp+5Ch+Str2], eax ; Format
.text:004021C4                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:004021C7                 mov     [esp+5Ch+MaxCount], ebx
.text:004021CB                 call    fprintf
.text:004021D0
.text:004021D0 loc_4021D0:                             ; CODE XREF: sub_401E90+2EC↑j
.text:004021D0                                         ; sub_401E90+398↓j
.text:004021D0                 mov     ecx, [ebp+14h]
.text:004021D3                 mov     [esp+5Ch+Str1], ecx ; Str
.text:004021D6                 call    strlen
.text:004021DB                 add     [ebp+14h], eax
.text:004021DE                 mov     eax, [esp+5Ch+var_18]
.text:004021E2                 mov     esi, [eax+0Ch]
.text:004021E5                 mov     [ebp+8], esi
.text:004021E8
.text:004021E8 loc_4021E8:                             ; CODE XREF: sub_401E90+4E5↓j
.text:004021E8                                         ; sub_401E90+73E↓j ...
.text:004021E8                 mov     eax, 3Fh ; '?'
.text:004021ED                 jmp     loc_401FE7
.text:004021F2 ; ---------------------------------------------------------------------------
.text:004021F2
.text:004021F2 loc_4021F2:                             ; CODE XREF: sub_401E90+2FA↑j
.text:004021F2                 mov     [esp+5Ch+Str1], offset aSOptionSDoesnT ; "%s: option `--%s' doesn't allow an argu"...
.text:004021F9                 call    ds:libintl_gettext
.text:004021FF                 mov     edx, [esp+5Ch+var_18]
.text:00402203                 mov     edi, [esp+5Ch+arg_4]
.text:00402207                 mov     ecx, ds:_iob
.text:0040220D                 mov     esi, [edx]
.text:0040220F                 add     ecx, 40h ; '@'
.text:00402212                 mov     [esp+5Ch+var_50], esi
.text:00402216                 mov     ebx, [edi]
.text:00402218                 mov     [esp+5Ch+Str2], eax ; Format
.text:0040221C                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:0040221F                 mov     [esp+5Ch+MaxCount], ebx
.text:00402223                 call    fprintf
.text:00402228                 jmp     short loc_4021D0
.text:00402228 ; ---------------------------------------------------------------------------
.text:0040222A                 align 10h
.text:00402230
.text:00402230 loc_402230:                             ; CODE XREF: sub_401E90+28C↑j
.text:00402230                 mov     ebx, [esp+5Ch+var_18]
.text:00402234                 cmp     dword ptr [ebx+4], 1
.text:00402238                 jnz     loc_402133
.text:0040223E                 cmp     eax, [esp+5Ch+arg_0]
.text:00402242                 jge     short loc_402259
.text:00402244                 mov     ebx, [esp+5Ch+arg_4]
.text:00402248                 lea     edi, [ecx+2]
.text:0040224B                 mov     [ebp+0], edi
.text:0040224E                 mov     esi, [ebx+eax*4]
.text:00402251                 mov     [ebp+0Ch], esi
.text:00402254                 jmp     loc_402133
.text:00402259 ; ---------------------------------------------------------------------------
.text:00402259
.text:00402259 loc_402259:                             ; CODE XREF: sub_401E90+3B2↑j
.text:00402259                 mov     edx, [esp+5Ch+var_14]
.text:0040225D                 test    edx, edx
.text:0040225F                 jnz     short loc_402290
.text:00402261
.text:00402261 loc_402261:                             ; CODE XREF: sub_401E90+437↓j
.text:00402261                 mov     edx, [ebp+14h]
.text:00402264                 mov     [esp+5Ch+Str1], edx ; Str
.text:00402267                 call    strlen
.text:0040226C                 add     [ebp+14h], eax
.text:0040226F                 mov     eax, [esp+5Ch+var_18]
.text:00402273                 mov     edi, [eax+0Ch]
.text:00402276                 mov     [ebp+8], edi
.text:00402279
.text:00402279 loc_402279:                             ; CODE XREF: sub_401E90+7C2↓j
.text:00402279                 mov     ebp, [esp+5Ch+Str]
.text:0040227D                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:00402281                 setnz   bl
.text:00402284                 movzx   esi, bl
.text:00402287                 lea     eax, [esi+esi*4+3Ah]
.text:0040228B                 jmp     loc_401FE7
.text:00402290 ; ---------------------------------------------------------------------------
.text:00402290
.text:00402290 loc_402290:                             ; CODE XREF: sub_401E90+3CF↑j
.text:00402290                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:00402297                 call    ds:libintl_gettext
.text:0040229D                 mov     ecx, [ebp+0]
.text:004022A0                 mov     esi, [esp+5Ch+arg_4]
.text:004022A4                 mov     ebx, [esi+ecx*4-4]
.text:004022A8                 mov     ecx, ds:_iob
.text:004022AE                 mov     [esp+5Ch+var_50], ebx
.text:004022B2                 mov     edi, [esi]
.text:004022B4                 add     ecx, 40h ; '@'
.text:004022B7                 mov     [esp+5Ch+Str2], eax ; Format
.text:004022BB                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:004022BE                 mov     [esp+5Ch+MaxCount], edi
.text:004022C2                 call    fprintf
.text:004022C7                 jmp     short loc_402261
.text:004022C7 ; ---------------------------------------------------------------------------
.text:004022C9                 align 10h
.text:004022D0
.text:004022D0 loc_4022D0:                             ; CODE XREF: sub_401E90+21E↑j
.text:004022D0                                         ; sub_401E90+27A↑j
.text:004022D0                 mov     eax, [esp+5Ch+arg_14]
.text:004022D4                 test    eax, eax
.text:004022D6                 jz      short loc_402306
.text:004022D8                 mov     ebx, [ebp+0]
.text:004022DB                 mov     esi, [esp+5Ch+arg_4]
.text:004022DF                 mov     edi, [esi+ebx*4]
.text:004022E2                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:004022E6                 jz      short loc_402309
.text:004022E8                 mov     ecx, [ebp+14h]
.text:004022EB                 mov     edx, [esp+5Ch+Str]
.text:004022EF                 movsx   ebx, byte ptr [ecx]
.text:004022F2                 mov     [esp+5Ch+Str1], edx ; Str
.text:004022F5                 mov     [esp+5Ch+Str2], ebx ; Val
.text:004022F9                 call    strchr
.text:004022FE                 test    eax, eax
.text:00402300                 jnz     loc_4023B0
.text:00402306
.text:00402306 loc_402306:                             ; CODE XREF: sub_401E90+446↑j
.text:00402306                 mov     ebx, [ebp+0]
.text:00402309
.text:00402309 loc_402309:                             ; CODE XREF: sub_401E90+456↑j
.text:00402309                 mov     eax, [esp+5Ch+var_14]
.text:0040230D                 test    eax, eax
.text:0040230F                 jz      short loc_402361
.text:00402311                 mov     esi, [esp+5Ch+arg_4]
.text:00402315                 mov     edi, [esi+ebx*4]
.text:00402318                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:0040231C                 jz      short loc_40237A
.text:0040231E                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO ; "%s: unrecognized option `%c%s'\n"
.text:00402325                 call    ds:libintl_gettext
.text:0040232B                 mov     edi, [ebp+14h]
.text:0040232E                 mov     [esp+5Ch+var_4C], edi
.text:00402332                 mov     ebx, [ebp+0]
.text:00402335                 mov     edi, [esp+5Ch+arg_4]
.text:00402339                 mov     esi, [edi+ebx*4]
.text:0040233C                 movsx   ecx, byte ptr [esi]
.text:0040233F                 mov     esi, ds:_iob
.text:00402345                 add     esi, 40h ; '@'
.text:00402348                 mov     [esp+5Ch+var_50], ecx
.text:0040234C                 mov     ebx, [edi]
.text:0040234E                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402352                 mov     [esp+5Ch+Str1], esi ; Stream
.text:00402355                 mov     [esp+5Ch+MaxCount], ebx
.text:00402359                 call    fprintf
.text:0040235E
.text:0040235E loc_40235E:                             ; CODE XREF: sub_401E90+51D↓j
.text:0040235E                 mov     ebx, [ebp+0]
.text:00402361
.text:00402361 loc_402361:                             ; CODE XREF: sub_401E90+47F↑j
.text:00402361                 mov     dword ptr [ebp+14h], offset dword_401D40
.text:00402368                 lea     edx, [ebx+1]
.text:0040236B                 mov     [ebp+0], edx
.text:0040236E
.text:0040236E loc_40236E:                             ; CODE XREF: sub_401E90+999↓j
.text:0040236E                 mov     dword ptr [ebp+8], 0
.text:00402375                 jmp     loc_4021E8
.text:0040237A ; ---------------------------------------------------------------------------
.text:0040237A
.text:0040237A loc_40237A:                             ; CODE XREF: sub_401E90+48C↑j
.text:0040237A                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO_0 ; "%s: unrecognized option `--%s'\n"
.text:00402381                 call    ds:libintl_gettext
.text:00402387                 mov     ecx, [ebp+14h]
.text:0040238A                 mov     edi, [esp+5Ch+arg_4]
.text:0040238E                 mov     edx, ds:_iob
.text:00402394                 mov     [esp+5Ch+var_50], ecx
.text:00402398                 mov     ebx, [edi]
.text:0040239A                 add     edx, 40h ; '@'
.text:0040239D                 mov     [esp+5Ch+Str2], eax ; Format
.text:004023A1                 mov     [esp+5Ch+MaxCount], ebx
.text:004023A5                 mov     [esp+5Ch+Str1], edx ; Stream
.text:004023A8                 call    fprintf
.text:004023AD                 jmp     short loc_40235E
.text:004023AD ; ---------------------------------------------------------------------------
.text:004023AF                 align 10h
.text:004023B0
.text:004023B0 loc_4023B0:                             ; CODE XREF: sub_401E90+196↑j
.text:004023B0                                         ; sub_401E90+1B5↑j ...
.text:004023B0                 mov     esi, [ebp+14h]
.text:004023B3                 movzx   ebx, byte ptr [esi]
.text:004023B6                 inc     esi
.text:004023B7                 mov     [ebp+14h], esi
.text:004023BA                 mov     ecx, [esp+5Ch+Str]
.text:004023BE                 movsx   esi, bl
.text:004023C1                 mov     [esp+5Ch+Str2], esi ; Val
.text:004023C5                 mov     edi, esi
.text:004023C7                 mov     [esp+5Ch+Str1], ecx ; Str
.text:004023CA                 call    strchr
.text:004023CF                 mov     ecx, [ebp+14h]
.text:004023D2                 cmp     byte ptr [ecx], 0
.text:004023D5                 jnz     short loc_4023DA
.text:004023D7                 inc     dword ptr [ebp+0]
.text:004023DA
.text:004023DA loc_4023DA:                             ; CODE XREF: sub_401E90+545↑j
.text:004023DA                 test    eax, eax
.text:004023DC                 jz      loc_4027C0
.text:004023E2                 cmp     bl, 3Ah ; ':'
.text:004023E5                 jz      loc_4027C0
.text:004023EB                 cmp     byte ptr [eax], 57h ; 'W'
.text:004023EE                 jz      loc_4024A6
.text:004023F4                 movzx   edx, byte ptr [eax+1]
.text:004023F8
.text:004023F8 loc_4023F8:                             ; CODE XREF: sub_401E90+61D↓j
.text:004023F8                 cmp     dl, 3Ah ; ':'
.text:004023FB                 jz      short loc_402404
.text:004023FD
.text:004023FD loc_4023FD:                             ; CODE XREF: sub_401E90+590↓j
.text:004023FD                 mov     eax, esi
.text:004023FF                 jmp     loc_401FE7
.text:00402404 ; ---------------------------------------------------------------------------
.text:00402404
.text:00402404 loc_402404:                             ; CODE XREF: sub_401E90+56B↑j
.text:00402404                 cmp     byte ptr [eax+2], 3Ah ; ':'
.text:00402408                 jz      loc_402491
.text:0040240E                 cmp     byte ptr [ecx], 0
.text:00402411                 jz      short loc_402422
.text:00402413
.text:00402413 loc_402413:                             ; CODE XREF: sub_401E90+604↓j
.text:00402413                 inc     dword ptr [ebp+0]
.text:00402416                 mov     [ebp+0Ch], ecx
.text:00402419
.text:00402419 loc_402419:                             ; CODE XREF: sub_401E90+5AB↓j
.text:00402419                                         ; sub_401E90+5C6↓j ...
.text:00402419                 mov     dword ptr [ebp+14h], 0
.text:00402420                 jmp     short loc_4023FD
.text:00402422 ; ---------------------------------------------------------------------------
.text:00402422
.text:00402422 loc_402422:                             ; CODE XREF: sub_401E90+581↑j
.text:00402422                 mov     ecx, [ebp+0]
.text:00402425                 cmp     ecx, [esp+5Ch+arg_0]
.text:00402429                 jz      short loc_40243D
.text:0040242B                 mov     eax, [esp+5Ch+arg_4]
.text:0040242F                 lea     edx, [ecx+1]
.text:00402432                 mov     [ebp+0], edx
.text:00402435                 mov     ebx, [eax+ecx*4]
.text:00402438                 mov     [ebp+0Ch], ebx
.text:0040243B                 jmp     short loc_402419
.text:0040243D ; ---------------------------------------------------------------------------
.text:0040243D
.text:0040243D loc_40243D:                             ; CODE XREF: sub_401E90+599↑j
.text:0040243D                 mov     ecx, [esp+5Ch+var_14]
.text:00402441                 test    ecx, ecx
.text:00402443                 jnz     short loc_40245F
.text:00402445
.text:00402445 loc_402445:                             ; CODE XREF: sub_401E90+5FF↓j
.text:00402445                 mov     [ebp+8], edi
.text:00402448                 mov     edi, [esp+5Ch+Str]
.text:0040244C                 cmp     byte ptr [edi], 3Ah ; ':'
.text:0040244F                 jz      short loc_402458
.text:00402451                 mov     esi, 3Fh ; '?'
.text:00402456                 jmp     short loc_402419
.text:00402458 ; ---------------------------------------------------------------------------
.text:00402458
.text:00402458 loc_402458:                             ; CODE XREF: sub_401E90+5BF↑j
.text:00402458                 mov     esi, 3Ah ; ':'
.text:0040245D                 jmp     short loc_402419
.text:0040245F ; ---------------------------------------------------------------------------
.text:0040245F
.text:0040245F loc_40245F:                             ; CODE XREF: sub_401E90+5B3↑j
.text:0040245F                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:00402466                 call    ds:libintl_gettext
.text:0040246C                 mov     [esp+5Ch+var_50], edi
.text:00402470                 mov     ebx, [esp+5Ch+arg_4]
.text:00402474                 mov     edx, ds:_iob
.text:0040247A                 mov     esi, [ebx]
.text:0040247C                 add     edx, 40h ; '@'
.text:0040247F                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402483                 mov     [esp+5Ch+MaxCount], esi
.text:00402487                 mov     [esp+5Ch+Str1], edx ; Stream
.text:0040248A                 call    fprintf
.text:0040248F                 jmp     short loc_402445
.text:00402491 ; ---------------------------------------------------------------------------
.text:00402491
.text:00402491 loc_402491:                             ; CODE XREF: sub_401E90+578↑j
.text:00402491                 cmp     byte ptr [ecx], 0
.text:00402494                 jnz     loc_402413
.text:0040249A                 mov     dword ptr [ebp+0Ch], 0
.text:004024A1                 jmp     loc_402419
.text:004024A6 ; ---------------------------------------------------------------------------
.text:004024A6
.text:004024A6 loc_4024A6:                             ; CODE XREF: sub_401E90+55E↑j
.text:004024A6                 movzx   edx, byte ptr [eax+1]
.text:004024AA                 cmp     dl, 3Bh ; ';'
.text:004024AD                 jnz     loc_4023F8
.text:004024B3                 mov     [esp+5Ch+var_2C], 0
.text:004024BB                 mov     [esp+5Ch+var_30], 0
.text:004024C3                 mov     [esp+5Ch+var_34], 0
.text:004024CB                 mov     [esp+5Ch+var_38], 0
.text:004024D3                 cmp     byte ptr [ecx], 0
.text:004024D6                 jz      loc_40274B
.text:004024DC                 inc     dword ptr [ebp+0]
.text:004024DF                 mov     [ebp+0Ch], ecx
.text:004024E2
.text:004024E2 loc_4024E2:                             ; CODE XREF: sub_401E90+8D4↓j
.text:004024E2                 mov     edi, [ebp+0Ch]
.text:004024E5                 mov     [ebp+14h], edi
.text:004024E8                 movzx   eax, byte ptr [edi]
.text:004024EB                 test    al, al
.text:004024ED                 jz      short loc_4024FF
.text:004024EF                 cmp     al, 3Dh ; '='
.text:004024F1                 jz      short loc_4024FF
.text:004024F3
.text:004024F3 loc_4024F3:                             ; CODE XREF: sub_401E90+66D↓j
.text:004024F3                 inc     edi
.text:004024F4                 movzx   eax, byte ptr [edi]
.text:004024F7                 test    al, al
.text:004024F9                 jz      short loc_4024FF
.text:004024FB                 cmp     al, 3Dh ; '='
.text:004024FD                 jnz     short loc_4024F3
.text:004024FF
.text:004024FF loc_4024FF:                             ; CODE XREF: sub_401E90+65D↑j
.text:004024FF                                         ; sub_401E90+661↑j ...
.text:004024FF                 mov     [esp+5Ch+var_3C], 0
.text:00402507                 mov     esi, [esp+5Ch+arg_C]
.text:0040250B                 mov     eax, [esi]
.text:0040250D                 test    eax, eax
.text:0040250F                 jz      loc_402690
.text:00402515                 mov     ecx, eax
.text:00402517
.text:00402517 loc_402517:                             ; CODE XREF: sub_401E90+6B3↓j
.text:00402517                 mov     ebx, [ebp+14h]
.text:0040251A                 mov     eax, edi
.text:0040251C                 mov     [esp+5Ch+Str1], ecx ; Str1
.text:0040251F                 sub     eax, ebx
.text:00402521                 mov     [esp+5Ch+MaxCount], eax ; MaxCount
.text:00402525                 mov     [esp+5Ch+Str2], ebx ; Str2
.text:00402529                 call    strncmp
.text:0040252E                 test    eax, eax
.text:00402530                 jz      loc_4026F7
.text:00402536
.text:00402536 loc_402536:                             ; CODE XREF: sub_401E90+88C↓j
.text:00402536                                         ; sub_401E90+89D↓j
.text:00402536                 inc     [esp+5Ch+var_3C]
.text:0040253A                 add     esi, 10h
.text:0040253D                 mov     edx, [esi]
.text:0040253F                 test    edx, edx
.text:00402541                 mov     ecx, edx
.text:00402543                 jnz     short loc_402517
.text:00402545
.text:00402545 loc_402545:                             ; CODE XREF: sub_401E90+8B6↓j
.text:00402545                 mov     esi, [esp+5Ch+var_34]
.text:00402549                 test    esi, esi
.text:0040254B                 jz      short loc_402559
.text:0040254D                 mov     ebx, [esp+5Ch+var_30]
.text:00402551                 test    ebx, ebx
.text:00402553                 jz      loc_4026A1
.text:00402559
.text:00402559 loc_402559:                             ; CODE XREF: sub_401E90+6BB↑j
.text:00402559                 mov     esi, [esp+5Ch+var_2C]
.text:0040255D                 test    esi, esi
.text:0040255F                 jz      loc_402690
.text:00402565                 cmp     byte ptr [edi], 0
.text:00402568                 jz      loc_402610
.text:0040256E                 mov     ecx, [esp+5Ch+var_2C]
.text:00402572                 mov     ebx, [ecx+4]
.text:00402575                 test    ebx, ebx
.text:00402577                 jz      short loc_4025B8
.text:00402579                 lea     edx, [edi+1]
.text:0040257C                 mov     [ebp+0Ch], edx
.text:0040257F
.text:0040257F loc_40257F:                             ; CODE XREF: sub_401E90+788↓j
.text:0040257F                                         ; sub_401E90+7A7↓j
.text:0040257F                 mov     edi, [ebp+14h]
.text:00402582                 mov     [esp+5Ch+Str1], edi ; Str
.text:00402585                 call    strlen
.text:0040258A                 add     [ebp+14h], eax
.text:0040258D                 mov     eax, [esp+5Ch+arg_10]
.text:00402591                 test    eax, eax
.text:00402593                 jz      short loc_4025A0
.text:00402595                 mov     edx, [esp+5Ch+var_38]
.text:00402599                 mov     ebp, [esp+5Ch+arg_10]
.text:0040259D                 mov     [ebp+0], edx
.text:004025A0
.text:004025A0 loc_4025A0:                             ; CODE XREF: sub_401E90+703↑j
.text:004025A0                 mov     eax, [esp+5Ch+var_2C]
.text:004025A4                 mov     ecx, [eax+8]
.text:004025A7                 test    ecx, ecx
.text:004025A9                 jnz     loc_40216A
.text:004025AF                 mov     ecx, [esp+5Ch+var_2C]
.text:004025B3                 jmp     loc_402162
.text:004025B8 ; ---------------------------------------------------------------------------
.text:004025B8
.text:004025B8 loc_4025B8:                             ; CODE XREF: sub_401E90+6E7↑j
.text:004025B8                 mov     eax, [esp+5Ch+var_14]
.text:004025BC                 test    eax, eax
.text:004025BE                 jnz     short loc_4025D3
.text:004025C0
.text:004025C0 loc_4025C0:                             ; CODE XREF: sub_401E90+779↓j
.text:004025C0                 mov     ecx, [ebp+14h]
.text:004025C3                 mov     [esp+5Ch+Str1], ecx ; Str
.text:004025C6                 call    strlen
.text:004025CB                 add     [ebp+14h], eax
.text:004025CE                 jmp     loc_4021E8
.text:004025D3 ; ---------------------------------------------------------------------------
.text:004025D3
.text:004025D3 loc_4025D3:                             ; CODE XREF: sub_401E90+72E↑j
.text:004025D3                 mov     [esp+5Ch+Str1], offset aSOptionWSDoesn ; "%s: option `-W %s' doesn't allow an arg"...
.text:004025DA                 call    ds:libintl_gettext
.text:004025E0                 mov     edx, [esp+5Ch+var_2C]
.text:004025E4                 mov     ebx, [esp+5Ch+arg_4]
.text:004025E8                 mov     edi, [edx]
.text:004025EA                 mov     [esp+5Ch+var_50], edi
.text:004025EE                 mov     edi, ds:_iob
.text:004025F4                 mov     esi, [ebx]
.text:004025F6                 mov     [esp+5Ch+Str2], eax ; Format
.text:004025FA                 add     edi, 40h ; '@'
.text:004025FD                 mov     [esp+5Ch+MaxCount], esi
.text:00402601                 mov     [esp+5Ch+Str1], edi ; Stream
.text:00402604                 call    fprintf
.text:00402609                 jmp     short loc_4025C0
.text:00402609 ; ---------------------------------------------------------------------------
.text:0040260B                 align 10h
.text:00402610
.text:00402610 loc_402610:                             ; CODE XREF: sub_401E90+6D8↑j
.text:00402610                 mov     esi, [esp+5Ch+var_2C]
.text:00402614                 cmp     dword ptr [esi+4], 1
.text:00402618                 jnz     loc_40257F
.text:0040261E                 mov     ecx, [ebp+0]
.text:00402621                 cmp     ecx, [esp+5Ch+arg_0]
.text:00402625                 jge     short loc_40263C
.text:00402627                 mov     eax, [esp+5Ch+arg_4]
.text:0040262B                 lea     ebx, [ecx+1]
.text:0040262E                 mov     [ebp+0], ebx
.text:00402631                 mov     edi, [eax+ecx*4]
.text:00402634                 mov     [ebp+0Ch], edi
.text:00402637                 jmp     loc_40257F
.text:0040263C ; ---------------------------------------------------------------------------
.text:0040263C
.text:0040263C loc_40263C:                             ; CODE XREF: sub_401E90+795↑j
.text:0040263C                 mov     edx, [esp+5Ch+var_14]
.text:00402640                 test    edx, edx
.text:00402642                 jnz     short loc_402657
.text:00402644
.text:00402644 loc_402644:                             ; CODE XREF: sub_401E90+7FE↓j
.text:00402644                 mov     edx, [ebp+14h]
.text:00402647                 mov     [esp+5Ch+Str1], edx ; Str
.text:0040264A                 call    strlen
.text:0040264F                 add     [ebp+14h], eax
.text:00402652                 jmp     loc_402279
.text:00402657 ; ---------------------------------------------------------------------------
.text:00402657
.text:00402657 loc_402657:                             ; CODE XREF: sub_401E90+7B2↑j
.text:00402657                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:0040265E                 call    ds:libintl_gettext
.text:00402664                 mov     ecx, [ebp+0]
.text:00402667                 mov     ebx, [esp+5Ch+arg_4]
.text:0040266B                 mov     edi, [ebx+ecx*4-4]
.text:0040266F                 mov     ecx, ds:_iob
.text:00402675                 mov     [esp+5Ch+var_50], edi
.text:00402679                 mov     esi, [ebx]
.text:0040267B                 add     ecx, 40h ; '@'
.text:0040267E                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402682                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00402685                 mov     [esp+5Ch+MaxCount], esi
.text:00402689                 call    fprintf
.text:0040268E                 jmp     short loc_402644
.text:00402690 ; ---------------------------------------------------------------------------
.text:00402690
.text:00402690 loc_402690:                             ; CODE XREF: sub_401E90+67F↑j
.text:00402690                                         ; sub_401E90+6CF↑j
.text:00402690                 mov     dword ptr [ebp+14h], 0
.text:00402697                 mov     eax, 57h ; 'W'
.text:0040269C                 jmp     loc_401FE7
.text:004026A1 ; ---------------------------------------------------------------------------
.text:004026A1
.text:004026A1 loc_4026A1:                             ; CODE XREF: sub_401E90+6C3↑j
.text:004026A1                 mov     edi, [esp+5Ch+var_14]
.text:004026A5                 test    edi, edi
.text:004026A7                 jnz     short loc_4026BF
.text:004026A9
.text:004026A9 loc_4026A9:                             ; CODE XREF: sub_401E90+865↓j
.text:004026A9                 mov     edx, [ebp+14h]
.text:004026AC                 mov     [esp+5Ch+Str1], edx ; Str
.text:004026AF                 call    strlen
.text:004026B4                 add     [ebp+14h], eax
.text:004026B7                 inc     dword ptr [ebp+0]
.text:004026BA                 jmp     loc_4021E8
.text:004026BF ; ---------------------------------------------------------------------------
.text:004026BF
.text:004026BF loc_4026BF:                             ; CODE XREF: sub_401E90+817↑j
.text:004026BF                 mov     [esp+5Ch+Str1], offset aSOptionWSIsAmb ; "%s: option `-W %s' is ambiguous\n"
.text:004026C6                 call    ds:libintl_gettext
.text:004026CC                 mov     ecx, [ebp+0]
.text:004026CF                 mov     ebx, [esp+5Ch+arg_4]
.text:004026D3                 mov     edi, [ebx+ecx*4]
.text:004026D6                 mov     ecx, ds:_iob
.text:004026DC                 mov     [esp+5Ch+var_50], edi
.text:004026E0                 mov     esi, [ebx]
.text:004026E2                 add     ecx, 40h ; '@'
.text:004026E5                 mov     [esp+5Ch+Str2], eax ; Format
.text:004026E9                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:004026EC                 mov     [esp+5Ch+MaxCount], esi
.text:004026F0                 call    fprintf
.text:004026F5                 jmp     short loc_4026A9
.text:004026F7 ; ---------------------------------------------------------------------------
.text:004026F7
.text:004026F7 loc_4026F7:                             ; CODE XREF: sub_401E90+6A0↑j
.text:004026F7                 mov     edx, [ebp+14h]
.text:004026FA                 mov     ebx, edi
.text:004026FC                 mov     ecx, [esi]
.text:004026FE                 sub     ebx, edx
.text:00402700                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00402703                 call    strlen
.text:00402708                 cmp     ebx, eax
.text:0040270A                 jz      short loc_402732
.text:0040270C                 mov     ebx, [esp+5Ch+var_2C]
.text:00402710                 test    ebx, ebx
.text:00402712                 jz      short loc_402721
.text:00402714                 mov     [esp+5Ch+var_34], 1
.text:0040271C                 jmp     loc_402536
.text:00402721 ; ---------------------------------------------------------------------------
.text:00402721
.text:00402721 loc_402721:                             ; CODE XREF: sub_401E90+882↑j
.text:00402721                 mov     [esp+5Ch+var_2C], esi
.text:00402725                 mov     ecx, [esp+5Ch+var_3C]
.text:00402729                 mov     [esp+5Ch+var_38], ecx
.text:0040272D                 jmp     loc_402536
.text:00402732 ; ---------------------------------------------------------------------------
.text:00402732
.text:00402732 loc_402732:                             ; CODE XREF: sub_401E90+87A↑j
.text:00402732                 mov     [esp+5Ch+var_2C], esi
.text:00402736                 mov     eax, [esp+5Ch+var_3C]
.text:0040273A                 mov     [esp+5Ch+var_30], 1
.text:00402742                 mov     [esp+5Ch+var_38], eax
.text:00402746                 jmp     loc_402545
.text:0040274B ; ---------------------------------------------------------------------------
.text:0040274B
.text:0040274B loc_40274B:                             ; CODE XREF: sub_401E90+646↑j
.text:0040274B                 mov     edx, [ebp+0]
.text:0040274E                 cmp     edx, [esp+5Ch+arg_0]
.text:00402752                 jz      short loc_402769
.text:00402754                 mov     ebx, [esp+5Ch+arg_4]
.text:00402758                 lea     esi, [edx+1]
.text:0040275B                 mov     [ebp+0], esi
.text:0040275E                 mov     edi, [ebx+edx*4]
.text:00402761                 mov     [ebp+0Ch], edi
.text:00402764                 jmp     loc_4024E2
.text:00402769 ; ---------------------------------------------------------------------------
.text:00402769
.text:00402769 loc_402769:                             ; CODE XREF: sub_401E90+8C2↑j
.text:00402769                 mov     edi, [esp+5Ch+var_14]
.text:0040276D                 test    edi, edi
.text:0040276F                 jnz     short loc_40278C
.text:00402771
.text:00402771 loc_402771:                             ; CODE XREF: sub_401E90+92C↓j
.text:00402771                 mov     [ebp+8], esi
.text:00402774                 mov     ebp, [esp+5Ch+Str]
.text:00402778                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:0040277C                 jz      short loc_402788
.text:0040277E                 mov     bl, 3Fh ; '?'
.text:00402780
.text:00402780 loc_402780:                             ; CODE XREF: sub_401E90+8FA↓j
.text:00402780                 movsx   eax, bl
.text:00402783                 jmp     loc_401FE7
.text:00402788 ; ---------------------------------------------------------------------------
.text:00402788
.text:00402788 loc_402788:                             ; CODE XREF: sub_401E90+8EC↑j
.text:00402788                 mov     bl, 3Ah ; ':'
.text:0040278A                 jmp     short loc_402780
.text:0040278C ; ---------------------------------------------------------------------------
.text:0040278C
.text:0040278C loc_40278C:                             ; CODE XREF: sub_401E90+8DF↑j
.text:0040278C                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:00402793                 call    ds:libintl_gettext
.text:00402799                 mov     [esp+5Ch+var_50], esi
.text:0040279D                 mov     edx, [esp+5Ch+arg_4]
.text:004027A1                 mov     ecx, ds:_iob
.text:004027A7                 mov     ebx, [edx]
.text:004027A9                 add     ecx, 40h ; '@'
.text:004027AC                 mov     [esp+5Ch+Str2], eax ; Format
.text:004027B0                 mov     [esp+5Ch+MaxCount], ebx
.text:004027B4                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:004027B7                 call    fprintf
.text:004027BC                 jmp     short loc_402771
.text:004027BC ; ---------------------------------------------------------------------------
.text:004027BE                 align 10h
.text:004027C0
.text:004027C0 loc_4027C0:                             ; CODE XREF: sub_401E90+54C↑j
.text:004027C0                                         ; sub_401E90+555↑j
.text:004027C0                 mov     eax, [esp+5Ch+var_14]
.text:004027C4                 test    eax, eax
.text:004027C6                 jz      short loc_4027FF
.text:004027C8                 mov     ebx, [ebp+1Ch]
.text:004027CB                 test    ebx, ebx
.text:004027CD                 jz      short loc_402807
.text:004027CF                 mov     [esp+5Ch+Str1], offset aSIllegalOption ; "%s: illegal option -- %c\n"
.text:004027D6
.text:004027D6 loc_4027D6:                             ; CODE XREF: sub_401E90+97E↓j
.text:004027D6                 call    ds:libintl_gettext
.text:004027DC                 mov     [esp+5Ch+var_50], esi
.text:004027E0                 mov     ebx, [esp+5Ch+arg_4]
.text:004027E4                 mov     edx, ds:_iob
.text:004027EA                 mov     esi, [ebx]
.text:004027EC                 add     edx, 40h ; '@'
.text:004027EF                 mov     [esp+5Ch+Str2], eax ; Format
.text:004027F3                 mov     [esp+5Ch+MaxCount], esi
.text:004027F7                 mov     [esp+5Ch+Str1], edx ; Stream
.text:004027FA                 call    fprintf
.text:004027FF
.text:004027FF loc_4027FF:                             ; CODE XREF: sub_401E90+936↑j
.text:004027FF                 mov     [ebp+8], edi
.text:00402802                 jmp     loc_4021E8
.text:00402807 ; ---------------------------------------------------------------------------
.text:00402807
.text:00402807 loc_402807:                             ; CODE XREF: sub_401E90+93D↑j
.text:00402807                 mov     [esp+5Ch+Str1], offset aSInvalidOption ; "%s: invalid option -- %c\n"
.text:0040280E                 jmp     short loc_4027D6
.text:00402810 ; ---------------------------------------------------------------------------
.text:00402810
.text:00402810 loc_402810:                             ; CODE XREF: sub_401E90+26E↑j
.text:00402810                 mov     edi, [esp+5Ch+var_14]
.text:00402814                 test    edi, edi
.text:00402816                 jnz     short loc_40282E
.text:00402818
.text:00402818 loc_402818:                             ; CODE XREF: sub_401E90+9D4↓j
.text:00402818                 mov     edx, [ebp+14h]
.text:0040281B                 mov     [esp+5Ch+Str1], edx ; Str
.text:0040281E                 call    strlen
.text:00402823                 add     [ebp+14h], eax
.text:00402826                 inc     dword ptr [ebp+0]
.text:00402829                 jmp     loc_40236E
.text:0040282E ; ---------------------------------------------------------------------------
.text:0040282E
.text:0040282E loc_40282E:                             ; CODE XREF: sub_401E90+986↑j
.text:0040282E                 mov     [esp+5Ch+Str1], offset aSOptionSIsAmbi ; "%s: option `%s' is ambiguous\n"
.text:00402835                 call    ds:libintl_gettext
.text:0040283B                 mov     ebx, [ebp+0]
.text:0040283E                 mov     edi, [esp+5Ch+arg_4]
.text:00402842                 mov     ecx, [edi+ebx*4]
.text:00402845                 mov     ebx, ds:_iob
.text:0040284B                 mov     [esp+5Ch+var_50], ecx
.text:0040284F                 mov     esi, [edi]
.text:00402851                 add     ebx, 40h ; '@'
.text:00402854                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402858                 mov     [esp+5Ch+Str1], ebx ; Stream
.text:0040285B                 mov     [esp+5Ch+MaxCount], esi
.text:0040285F                 call    fprintf
.text:00402864                 jmp     short loc_402818
.text:00402866 ; ---------------------------------------------------------------------------
.text:00402866
.text:00402866 loc_402866:                             ; CODE XREF: sub_401E90+246↑j
.text:00402866                 mov     ecx, [ebp+14h]
.text:00402869                 mov     ebx, edi
.text:0040286B                 mov     edx, [esi]
.text:0040286D                 sub     ebx, ecx
.text:0040286F                 mov     [esp+5Ch+Str1], edx ; Str
.text:00402872                 call    strlen
.text:00402877                 cmp     ebx, eax
.text:00402879                 jz      short loc_4028D1
.text:0040287B                 mov     ebx, [esp+5Ch+var_18]
.text:0040287F                 test    ebx, ebx
.text:00402881                 jz      short loc_4028C0
.text:00402883                 mov     edx, [esp+5Ch+arg_14]
.text:00402887                 test    edx, edx
.text:00402889                 jnz     short loc_402897
.text:0040288B                 mov     ecx, [esp+5Ch+var_18]
.text:0040288F                 mov     ebx, [esi+4]
.text:00402892                 cmp     [ecx+4], ebx
.text:00402895                 jz      short loc_4028A4
.text:00402897
.text:00402897 loc_402897:                             ; CODE XREF: sub_401E90+9F9↑j
.text:00402897                                         ; sub_401E90+A1A↓j ...
.text:00402897                 mov     [esp+5Ch+var_20], 1
.text:0040289F                 jmp     loc_4020DC
.text:004028A4 ; ---------------------------------------------------------------------------
.text:004028A4
.text:004028A4 loc_4028A4:                             ; CODE XREF: sub_401E90+A05↑j
.text:004028A4                 mov     edx, [esi+8]
.text:004028A7                 cmp     [ecx+8], edx
.text:004028AA                 jnz     short loc_402897
.text:004028AC                 mov     ebx, [esi+0Ch]
.text:004028AF                 cmp     [ecx+0Ch], ebx
.text:004028B2                 jnz     short loc_402897
.text:004028B4                 jmp     loc_4020DC
.text:004028B4 ; ---------------------------------------------------------------------------
.text:004028B9                 align 10h
.text:004028C0
.text:004028C0 loc_4028C0:                             ; CODE XREF: sub_401E90+9F1↑j
.text:004028C0                 mov     [esp+5Ch+var_18], esi
.text:004028C4                 mov     eax, [esp+5Ch+var_28]
.text:004028C8                 mov     [esp+5Ch+var_24], eax
.text:004028CC                 jmp     loc_4020DC
.text:004028D1 ; ---------------------------------------------------------------------------
.text:004028D1
.text:004028D1 loc_4028D1:                             ; CODE XREF: sub_401E90+9E9↑j
.text:004028D1                 mov     [esp+5Ch+var_18], esi
.text:004028D5                 mov     ecx, [esp+5Ch+var_28]
.text:004028D9                 mov     [esp+5Ch+var_1C], 1
.text:004028E1                 mov     [esp+5Ch+var_24], ecx
.text:004028E5                 jmp     loc_4020F0
.text:004028EA ; ---------------------------------------------------------------------------
.text:004028EA
.text:004028EA loc_4028EA:                             ; CODE XREF: sub_401E90+1BF↑j
.text:004028EA                 mov     eax, [esp+5Ch+Str]
.text:004028EE                 movsx   esi, dl
.text:004028F1                 mov     [esp+5Ch+Str2], esi ; Val
.text:004028F5                 mov     [esp+5Ch+Str1], eax ; Str
.text:004028F8                 call    strchr
.text:004028FD                 test    eax, eax
.text:004028FF                 jnz     loc_4023B0
.text:00402905                 jmp     loc_402055
.text:0040290A ; ---------------------------------------------------------------------------
.text:0040290A
.text:0040290A loc_40290A:                             ; CODE XREF: sub_401E90+17C↑j
.text:0040290A                 mov     ecx, 1
.text:0040290F                 jmp     loc_402012
.text:00402914 ; ---------------------------------------------------------------------------
.text:00402914
.text:00402914 loc_402914:                             ; CODE XREF: sub_401E90+D4↑j
.text:00402914                                         ; sub_401E90+130↑j
.text:00402914                 mov     eax, [ebp+20h]
.text:00402917                 cmp     eax, [ebp+24h]
.text:0040291A                 jz      loc_401FF0
.text:00402920                 mov     [ebp+0], eax
.text:00402923                 jmp     loc_401FF0
.text:00402928 ; ---------------------------------------------------------------------------
.text:00402928
.text:00402928 loc_402928:                             ; CODE XREF: sub_401E90+FE↑j
.text:00402928                 mov     [ebp+20h], eax
.text:0040292B                 jmp     loc_401FB0
.text:00402930 ; ---------------------------------------------------------------------------
.text:00402930
.text:00402930 loc_402930:                             ; CODE XREF: sub_401E90+CA↑j
.text:00402930                 mov     edx, [ebp+20h]
.text:00402933                 mov     eax, [ebp+24h]
.text:00402936                 cmp     edx, eax
.text:00402938                 jz      short loc_4029B0
.text:0040293A                 cmp     eax, ebx
.text:0040293C                 jz      short loc_402951
.text:0040293E                 mov     [esp+5Ch+Str2], ebp
.text:00402942                 mov     ebx, [esp+5Ch+arg_4]
.text:00402946                 mov     [esp+5Ch+Str1], ebx
.text:00402949                 call    sub_402B40
.text:0040294E                 mov     ebx, [ebp+0]
.text:00402951
.text:00402951 loc_402951:                             ; CODE XREF: sub_401E90+AAC↑j
.text:00402951                                         ; sub_401E90+B22↓j ...
.text:00402951                 cmp     ebx, [esp+5Ch+arg_0]
.text:00402955                 jge     short loc_4029A0
.text:00402957                 mov     esi, [esp+5Ch+arg_4]
.text:0040295B                 mov     eax, [esi+ebx*4]
.text:0040295E                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00402961                 jz      short loc_4029A8
.text:00402963                 lea     esi, [esi+0]
.text:00402969                 lea     edi, [edi+0]
.text:00402970
.text:00402970 loc_402970:                             ; CODE XREF: sub_401E90+AFC↓j
.text:00402970                                         ; sub_401E90+B1C↓j
.text:00402970                 lea     eax, [ebx+1]
.text:00402973                 mov     ebx, eax
.text:00402975                 mov     [ebp+0], eax
.text:00402978                 cmp     eax, [esp+5Ch+arg_0]
.text:0040297C                 jge     short loc_4029A0
.text:0040297E                 mov     edi, [esp+5Ch+arg_4]
.text:00402982                 mov     edx, [edi+eax*4]
.text:00402985                 cmp     byte ptr [edx], 2Dh ; '-'
.text:00402988                 jz      short loc_402990
.text:0040298A
.text:0040298A loc_40298A:                             ; CODE XREF: sub_401E90+B04↓j
.text:0040298A                 mov     ebx, eax
.text:0040298C                 jmp     short loc_402970
.text:0040298C ; ---------------------------------------------------------------------------
.text:0040298E                 align 10h
.text:00402990
.text:00402990 loc_402990:                             ; CODE XREF: sub_401E90+AF8↑j
.text:00402990                 cmp     byte ptr [edx+1], 0
.text:00402994                 jz      short loc_40298A
.text:00402996                 lea     esi, [esi+0]
.text:00402999                 lea     edi, [edi+0]
.text:004029A0
.text:004029A0 loc_4029A0:                             ; CODE XREF: sub_401E90+AC5↑j
.text:004029A0                                         ; sub_401E90+AEC↑j ...
.text:004029A0                 mov     [ebp+24h], ebx
.text:004029A3                 jmp     loc_401F60
.text:004029A8 ; ---------------------------------------------------------------------------
.text:004029A8
.text:004029A8 loc_4029A8:                             ; CODE XREF: sub_401E90+AD1↑j
.text:004029A8                 cmp     byte ptr [eax+1], 0
.text:004029AC                 jz      short loc_402970
.text:004029AE                 jmp     short loc_4029A0
.text:004029B0 ; ---------------------------------------------------------------------------
.text:004029B0
.text:004029B0 loc_4029B0:                             ; CODE XREF: sub_401E90+AA8↑j
.text:004029B0                 cmp     edx, ebx
.text:004029B2                 jz      short loc_402951
.text:004029B4                 mov     [ebp+20h], ebx
.text:004029B7                 jmp     short loc_402951
.text:004029B9 ; ---------------------------------------------------------------------------
.text:004029B9
.text:004029B9 loc_4029B9:                             ; CODE XREF: sub_401E90+88↑j
.text:004029B9                 mov     dword ptr [ebp+18h], 0
.text:004029C0                 mov     esi, [esp+5Ch+Str]
.text:004029C4
.text:004029C4 loc_4029C4:                             ; CODE XREF: sub_401E90+B49↓j
.text:004029C4                 inc     esi
.text:004029C5                 jmp     loc_401F28
.text:004029C5 ; ---------------------------------------------------------------------------
.text:004029CA                 align 10h
.text:004029D0
.text:004029D0 loc_4029D0:                             ; CODE XREF: sub_401E90+80↑j
.text:004029D0                 mov     dword ptr [ebp+18h], 2
.text:004029D7                 mov     esi, ecx
.text:004029D9                 jmp     short loc_4029C4
.text:004029D9 ; ---------------------------------------------------------------------------
.text:004029DB                 align 10h
.text:004029E0
.text:004029E0 loc_4029E0:                             ; CODE XREF: sub_401E90+69↑j
.text:004029E0                 mov     [esp+5Ch+Str1], offset VarName ; "POSIXLY_CORRECT"
.text:004029E7                 call    getenv
.text:004029EC                 test    eax, eax
.text:004029EE                 jz      loc_401F04
.text:004029F4                 jmp     loc_401EFF
.text:004029F4 ; ---------------------------------------------------------------------------
.text:004029F9                 align 10h
.text:00402A00
.text:00402A00 loc_402A00:                             ; CODE XREF: sub_401E90+3F↑j
.text:00402A00                 mov     dword ptr [ebp+0], 1
.text:00402A07                 mov     ebx, 1
.text:00402A0C                 jmp     loc_401EE0
.text:00402A0C sub_401E90      endp
.text:00402A0C
.text:00402A11 ; ---------------------------------------------------------------------------
.text:00402A11                 jmp     short sub_402A20
.text:00402A11 ; ---------------------------------------------------------------------------
.text:00402A13                 align 10h
.text:00402A20
.text:00402A20 ; =============== S U B R O U T I N E =======================================
.text:00402A20
.text:00402A20
.text:00402A20 ; int __cdecl sub_402A20(int, int, char *, int, int, int, int)
.text:00402A20 sub_402A20      proc near               ; CODE XREF: .text:00402A11↑j
.text:00402A20                                         ; sub_403160+3A↓p ...
.text:00402A20
.text:00402A20 var_2C          = dword ptr -2Ch
.text:00402A20 var_28          = dword ptr -28h
.text:00402A20 Str             = dword ptr -24h
.text:00402A20 var_20          = dword ptr -20h
.text:00402A20 var_1C          = dword ptr -1Ch
.text:00402A20 var_18          = dword ptr -18h
.text:00402A20 var_14          = dword ptr -14h
.text:00402A20 var_10          = dword ptr -10h
.text:00402A20 arg_0           = dword ptr  4
.text:00402A20 arg_4           = dword ptr  8
.text:00402A20 arg_8           = dword ptr  0Ch
.text:00402A20 arg_C           = dword ptr  10h
.text:00402A20 arg_10          = dword ptr  14h
.text:00402A20 arg_14          = dword ptr  18h
.text:00402A20 arg_18          = dword ptr  1Ch
.text:00402A20
.text:00402A20                 sub     esp, 2Ch
.text:00402A23                 mov     edx, dword_406010
.text:00402A29                 mov     [esp+2Ch+var_10], offset dword_407030 ; int
.text:00402A31                 mov     ecx, dword_406014
.text:00402A37                 mov     ds:dword_407030, edx
.text:00402A3D                 mov     edx, [esp+2Ch+arg_18]
.text:00402A41                 mov     ds:dword_407034, ecx
.text:00402A47                 mov     ecx, [esp+2Ch+arg_14]
.text:00402A4B                 mov     [esp+2Ch+var_14], edx ; int
.text:00402A4F                 mov     edx, [esp+2Ch+arg_10]
.text:00402A53                 mov     [esp+2Ch+var_18], ecx ; int
.text:00402A57                 mov     ecx, [esp+2Ch+arg_C]
.text:00402A5B                 mov     [esp+2Ch+var_1C], edx ; int
.text:00402A5F                 mov     edx, [esp+2Ch+arg_8]
.text:00402A63                 mov     [esp+2Ch+var_20], ecx ; int
.text:00402A67                 mov     ecx, [esp+2Ch+arg_4]
.text:00402A6B                 mov     [esp+2Ch+Str], edx ; Str
.text:00402A6F                 mov     edx, [esp+2Ch+arg_0]
.text:00402A73                 mov     [esp+2Ch+var_28], ecx ; int
.text:00402A77                 mov     [esp+2Ch+var_2C], edx ; int
.text:00402A7A                 call    sub_401E90
.text:00402A7F                 mov     ecx, ds:dword_407030
.text:00402A85                 mov     dword_406010, ecx
.text:00402A8B                 mov     ecx, ds:dword_40703C
.text:00402A91                 mov     ds:dword_4071E0, ecx
.text:00402A97                 mov     ecx, ds:dword_407038
.text:00402A9D                 mov     dword_406018, ecx
.text:00402AA3                 add     esp, 2Ch
.text:00402AA6                 retn
.text:00402AA6 sub_402A20      endp
.text:00402AA6
.text:00402AA6 ; ---------------------------------------------------------------------------
.text:00402AA7                 align 10h
.text:00402AB0                 sub     esp, 2Ch
.text:00402AB3                 mov     edx, dword_406010
.text:00402AB9                 mov     dword ptr [esp+1Ch], offset dword_407030
.text:00402AC1                 mov     ecx, dword_406014
.text:00402AC7                 mov     dword ptr [esp+18h], 1
.text:00402ACF                 mov     ds:dword_407030, edx
.text:00402AD5                 mov     edx, [esp+38h]
.text:00402AD9                 mov     ds:dword_407034, ecx
.text:00402ADF                 mov     ecx, [esp+34h]
.text:00402AE3                 mov     [esp+8], edx
.text:00402AE7                 mov     edx, [esp+30h]
.text:00402AEB                 mov     [esp+4], ecx
.text:00402AEF                 mov     dword ptr [esp+14h], 0
.text:00402AF7                 mov     dword ptr [esp+10h], 0
.text:00402AFF                 mov     dword ptr [esp+0Ch], 0
.text:00402B07                 mov     [esp], edx
.text:00402B0A                 call    sub_401E90
.text:00402B0F                 mov     ecx, ds:dword_407030
.text:00402B15                 mov     dword_406010, ecx
.text:00402B1B                 mov     ecx, ds:dword_40703C
.text:00402B21                 mov     ds:dword_4071E0, ecx
.text:00402B27                 mov     ecx, ds:dword_407038
.text:00402B2D                 mov     dword_406018, ecx
.text:00402B33                 add     esp, 2Ch
.text:00402B36                 retn
.text:00402B36 ; ---------------------------------------------------------------------------
.text:00402B37                 align 10h
.text:00402B40
.text:00402B40 ; =============== S U B R O U T I N E =======================================
.text:00402B40
.text:00402B40
.text:00402B40 sub_402B40      proc near               ; CODE XREF: sub_401E90+113↑p
.text:00402B40                                         ; sub_401E90+AB9↑p
.text:00402B40
.text:00402B40 var_2C          = dword ptr -2Ch
.text:00402B40 var_28          = dword ptr -28h
.text:00402B40 var_24          = dword ptr -24h
.text:00402B40 var_20          = dword ptr -20h
.text:00402B40 var_1C          = dword ptr -1Ch
.text:00402B40 var_18          = dword ptr -18h
.text:00402B40 var_14          = dword ptr -14h
.text:00402B40 arg_0           = dword ptr  4
.text:00402B40 arg_4           = dword ptr  8
.text:00402B40
.text:00402B40                 push    ebp
.text:00402B41                 push    edi
.text:00402B42                 push    esi
.text:00402B43                 push    ebx
.text:00402B44                 sub     esp, 1Ch
.text:00402B47                 mov     ecx, [esp+2Ch+arg_4]
.text:00402B4B                 mov     eax, [esp+2Ch+arg_4]
.text:00402B4F                 mov     ebx, [esp+2Ch+arg_4]
.text:00402B53                 mov     edx, [ecx+20h]
.text:00402B56                 mov     edi, [esp+2Ch+arg_0]
.text:00402B5A                 mov     ecx, [ebx]
.text:00402B5C                 mov     [esp+2Ch+var_2C], edx
.text:00402B5F                 mov     [esp+2Ch+var_14], edx
.text:00402B63                 mov     edx, [eax+24h]
.text:00402B66                 mov     [esp+2Ch+var_28], ecx
.text:00402B6A                 mov     [esp+2Ch+var_1C], ecx
.text:00402B6E                 cmp     ecx, edx
.text:00402B70                 mov     [esp+2Ch+var_18], edx
.text:00402B74                 jle     short loc_402BF0
.text:00402B76                 mov     esi, [esp+2Ch+var_2C]
.text:00402B79                 cmp     edx, esi
.text:00402B7B                 jle     short loc_402BF0
.text:00402B7D                 lea     esi, [esi+0]
.text:00402B80
.text:00402B80 loc_402B80:                             ; CODE XREF: sub_402B40+A1↓j
.text:00402B80                 mov     ebx, [esp+2Ch+var_1C]
.text:00402B84                 mov     edx, [esp+2Ch+var_18]
.text:00402B88                 mov     ebp, [esp+2Ch+var_18]
.text:00402B8C                 mov     eax, [esp+2Ch+var_14]
.text:00402B90                 sub     ebx, edx
.text:00402B92                 mov     [esp+2Ch+var_20], ebx
.text:00402B96                 sub     ebp, eax
.text:00402B98                 cmp     ebx, ebp
.text:00402B9A                 jle     short loc_402C15
.text:00402B9C                 xor     esi, esi
.text:00402B9E                 cmp     esi, ebp
.text:00402BA0                 jge     short loc_402BCD
.text:00402BA2                 mov     ecx, [esp+2Ch+var_1C]
.text:00402BA6                 sub     ecx, ebp
.text:00402BA8                 mov     [esp+2Ch+var_24], ecx
.text:00402BAC                 lea     esi, [esi+0]
.text:00402BB0
.text:00402BB0 loc_402BB0:                             ; CODE XREF: sub_402B40+8B↓j
.text:00402BB0                 mov     ecx, [esp+2Ch+var_14]
.text:00402BB4                 mov     edx, [esp+2Ch+var_24]
.text:00402BB8                 add     ecx, esi
.text:00402BBA                 add     edx, esi
.text:00402BBC                 mov     ebx, [edi+ecx*4]
.text:00402BBF                 mov     eax, [edi+edx*4]
.text:00402BC2                 inc     esi
.text:00402BC3                 cmp     esi, ebp
.text:00402BC5                 mov     [edi+ecx*4], eax
.text:00402BC8                 mov     [edi+edx*4], ebx
.text:00402BCB                 jl      short loc_402BB0
.text:00402BCD
.text:00402BCD loc_402BCD:                             ; CODE XREF: sub_402B40+60↑j
.text:00402BCD                 sub     [esp+2Ch+var_1C], ebp
.text:00402BD1
.text:00402BD1 loc_402BD1:                             ; CODE XREF: sub_402B40+107↓j
.text:00402BD1                 mov     eax, [esp+2Ch+var_18]
.text:00402BD5                 cmp     [esp+2Ch+var_1C], eax
.text:00402BD9                 jle     short loc_402BF0
.text:00402BDB                 mov     ebp, [esp+2Ch+var_14]
.text:00402BDF                 cmp     eax, ebp
.text:00402BE1                 jg      short loc_402B80
.text:00402BE3                 lea     esi, [esi+0]
.text:00402BE9                 lea     edi, [edi+0]
.text:00402BF0
.text:00402BF0 loc_402BF0:                             ; CODE XREF: sub_402B40+34↑j
.text:00402BF0                                         ; sub_402B40+3B↑j ...
.text:00402BF0                 mov     esi, [esp+2Ch+var_28]
.text:00402BF4                 mov     ecx, [esp+2Ch+var_18]
.text:00402BF8                 mov     eax, [esp+2Ch+var_2C]
.text:00402BFB                 mov     edi, [esp+2Ch+arg_4]
.text:00402BFF                 mov     edx, [esp+2Ch+var_28]
.text:00402C03                 sub     esi, ecx
.text:00402C05                 add     esi, eax
.text:00402C07                 mov     [edi+20h], esi
.text:00402C0A                 mov     [edi+24h], edx
.text:00402C0D                 add     esp, 1Ch
.text:00402C10                 pop     ebx
.text:00402C11                 pop     esi
.text:00402C12                 pop     edi
.text:00402C13                 pop     ebp
.text:00402C14                 retn
.text:00402C15 ; ---------------------------------------------------------------------------
.text:00402C15
.text:00402C15 loc_402C15:                             ; CODE XREF: sub_402B40+5A↑j
.text:00402C15                 xor     esi, esi
.text:00402C17                 cmp     esi, [esp+2Ch+var_20]
.text:00402C1B                 jge     short loc_402C3F
.text:00402C1D                 lea     esi, [esi+0]
.text:00402C20
.text:00402C20 loc_402C20:                             ; CODE XREF: sub_402B40+FD↓j
.text:00402C20                 mov     ebx, [esp+2Ch+var_14]
.text:00402C24                 mov     ebp, [esp+2Ch+var_18]
.text:00402C28                 add     ebx, esi
.text:00402C2A                 add     ebp, esi
.text:00402C2C                 mov     edx, [edi+ebx*4]
.text:00402C2F                 inc     esi
.text:00402C30                 cmp     esi, [esp+2Ch+var_20]
.text:00402C34                 mov     ecx, [edi+ebp*4]
.text:00402C37                 mov     [edi+ebx*4], ecx
.text:00402C3A                 mov     [edi+ebp*4], edx
.text:00402C3D                 jl      short loc_402C20
.text:00402C3F
.text:00402C3F loc_402C3F:                             ; CODE XREF: sub_402B40+DB↑j
.text:00402C3F                 mov     esi, [esp+2Ch+var_20]
.text:00402C43                 add     [esp+2Ch+var_14], esi
.text:00402C47                 jmp     short loc_402BD1
.text:00402C47 sub_402B40      endp
.text:00402C47
.text:00402C47 ; ---------------------------------------------------------------------------
.text:00402C49                 align 20h
.text:00402C60 aCopyrightC2005 db 'Copyright (C) 2005 Free Software Foundation, Inc.',0
.text:00402C60                                         ; DATA XREF: .data:Buffer↓o
.text:00402C92 ; const char Format[]
.text:00402C92 Format          db '%s (%s) %s',0Ah,0   ; DATA XREF: sub_402F50+50↓o
.text:00402C9E aWrittenByS     db 'Written by %s.',0Ah,0
.text:00402C9E                                         ; DATA XREF: sub_402F50:loc_402FF1↓o
.text:00402CAE                 align 20h
.text:00402CC0 aThisIsFreeSoft db 'This is free software; see the source for copying conditions.  Th'
.text:00402CC0                                         ; DATA XREF: sub_402F50+100↓o
.text:00402CC0                 db 'ere is NO',0Ah
.text:00402CC0                 db 'warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULA'
.text:00402CC0                 db 'R PURPOSE.',0Ah,0
.text:00402D58 aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.text:00402D58                                         ; DATA XREF: sub_402F50:loc_403091↓o
.text:00402D6F aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.text:00402D6F                                         ; DATA XREF: sub_402F50:loc_40309D↓o
.text:00402D8B                 align 20h
.text:00402DA0 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.text:00402DA0                                         ; DATA XREF: sub_402F50:loc_4030A9↓o
.text:00402DA0                 db 'and %s.',0Ah,0
.text:00402DC0 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.text:00402DC0                                         ; DATA XREF: sub_402F50:loc_4030B5↓o
.text:00402DC0                 db '%s, and %s.',0Ah,0
.text:00402DE4                 align 20h
.text:00402E00 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.text:00402E00                                         ; DATA XREF: sub_402F50:loc_4030C1↓o
.text:00402E00                 db '%s, %s, and %s.',0Ah,0
.text:00402E28                 align 20h
.text:00402E40 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.text:00402E40                                         ; DATA XREF: sub_402F50:loc_4030CD↓o
.text:00402E40                 db '%s, %s, %s, and %s.',0Ah,0
.text:00402E6C                 align 20h
.text:00402E80 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.text:00402E80                                         ; DATA XREF: sub_402F50:loc_4030D9↓o
.text:00402E80                 db '%s, %s, %s, %s,',0Ah
.text:00402E80                 db 'and %s.',0Ah,0
.text:00402EB0                 align 20h
.text:00402EC0 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.text:00402EC0                                         ; DATA XREF: sub_402F50:loc_4030E5↓o
.text:00402EC0                 db '%s, %s, %s, %s,',0Ah
.text:00402EC0                 db '%s, and %s.',0Ah,0
.text:00402EF4                 align 10h
.text:00402F00 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.text:00402F00                                         ; DATA XREF: sub_402F50:def_402FBD↓o
.text:00402F00                 db '%s, %s, %s, %s,',0Ah
.text:00402F00                 db '%s, %s, and others.',0Ah,0
.text:00402F3C ; const char aSS[]
.text:00402F3C aSS             db '%s %s',0Ah,0        ; DATA XREF: sub_402F50+1B5↓o
.text:00402F43                 align 10h
.text:00402F50
.text:00402F50 ; =============== S U B R O U T I N E =======================================
.text:00402F50
.text:00402F50
.text:00402F50 ; int __cdecl sub_402F50(FILE *, FILE *, int, int, va_list)
.text:00402F50 sub_402F50      proc near               ; CODE XREF: sub_403120+2A↓p
.text:00402F50
.text:00402F50 Stream          = dword ptr -2Ch
.text:00402F50 Format          = dword ptr -28h
.text:00402F50 ArgList         = dword ptr -24h
.text:00402F50 var_20          = dword ptr -20h
.text:00402F50 var_1C          = dword ptr -1Ch
.text:00402F50 var_14          = dword ptr -14h
.text:00402F50 arg_0           = dword ptr  4
.text:00402F50 arg_4           = dword ptr  8
.text:00402F50 arg_8           = dword ptr  0Ch
.text:00402F50 arg_C           = dword ptr  10h
.text:00402F50 arg_10          = dword ptr  14h
.text:00402F50
.text:00402F50                 push    ebp
.text:00402F51                 push    edi
.text:00402F52                 push    esi
.text:00402F53                 push    ebx
.text:00402F54                 sub     esp, 1Ch
.text:00402F57                 xor     ebx, ebx
.text:00402F59                 mov     edi, [esp+2Ch+arg_10]
.text:00402F5D                 mov     edx, [esp+2Ch+arg_8]
.text:00402F61                 mov     esi, [esp+2Ch+arg_0]
.text:00402F65                 mov     eax, [edi]
.text:00402F67                 mov     ecx, [esp+2Ch+arg_4]
.text:00402F6B                 mov     [esp+2Ch+var_14], edx
.text:00402F6F                 mov     ebp, [esp+2Ch+arg_C]
.text:00402F73                 lea     edx, [edi+4]
.text:00402F76                 test    eax, eax
.text:00402F78                 jz      short loc_402F8C
.text:00402F7A                 lea     esi, [esi+0]
.text:00402F80
.text:00402F80 loc_402F80:                             ; CODE XREF: sub_402F50+3A↓j
.text:00402F80                 mov     eax, edx
.text:00402F82                 inc     ebx
.text:00402F83                 mov     eax, [eax]
.text:00402F85                 add     edx, 4
.text:00402F88                 test    eax, eax
.text:00402F8A                 jnz     short loc_402F80
.text:00402F8C
.text:00402F8C loc_402F8C:                             ; CODE XREF: sub_402F50+28↑j
.text:00402F8C                 test    ecx, ecx
.text:00402F8E                 jz      loc_4030FD
.text:00402F94                 mov     [esp+2Ch+var_1C], ebp
.text:00402F98                 mov     edx, [esp+2Ch+var_14]
.text:00402F9C                 mov     [esp+2Ch+ArgList], ecx
.text:00402FA0                 mov     [esp+2Ch+Format], offset Format ; "%s (%s) %s\n"
.text:00402FA8                 mov     [esp+2Ch+var_20], edx
.text:00402FAC                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00402FAF                 call    fprintf
.text:00402FB4
.text:00402FB4 loc_402FB4:                             ; CODE XREF: sub_402F50+1C9↓j
.text:00402FB4                 cmp     ebx, 9          ; switch 10 cases
.text:00402FB7                 ja      def_402FBD      ; jumptable 00402FBD default case
.text:00402FBD                 jmp     ds:jpt_402FBD[ebx*4] ; switch jump
.text:00402FBD ; ---------------------------------------------------------------------------
.text:00402FC4 jpt_402FBD      dd offset loc_402FEC    ; DATA XREF: sub_402F50+6D↑r
.text:00402FC4                 dd offset loc_402FF1    ; jump table for switch statement
.text:00402FC4                 dd offset loc_403091
.text:00402FC4                 dd offset loc_40309D
.text:00402FC4                 dd offset loc_4030A9
.text:00402FC4                 dd offset loc_4030B5
.text:00402FC4                 dd offset loc_4030C1
.text:00402FC4                 dd offset loc_4030CD
.text:00402FC4                 dd offset loc_4030D9
.text:00402FC4                 dd offset loc_4030E5
.text:00402FEC ; ---------------------------------------------------------------------------
.text:00402FEC
.text:00402FEC loc_402FEC:                             ; CODE XREF: sub_402F50+6D↑j
.text:00402FEC                                         ; DATA XREF: sub_402F50:jpt_402FBD↑o
.text:00402FEC                 call    abort           ; jumptable 00402FBD case 0
.text:00402FF1 ; ---------------------------------------------------------------------------
.text:00402FF1
.text:00402FF1 loc_402FF1:                             ; CODE XREF: sub_402F50+6D↑j
.text:00402FF1                                         ; DATA XREF: sub_402F50:jpt_402FBD↑o
.text:00402FF1                 mov     [esp+2Ch+Stream], offset aWrittenByS ; jumptable 00402FBD case 1
.text:00402FF8                 nop
.text:00402FF9                 lea     esi, [esi+0]
.text:00403000
.text:00403000 loc_403000:                             ; CODE XREF: sub_402F50+148↓j
.text:00403000                                         ; sub_402F50+154↓j ...
.text:00403000                 call    ds:libintl_gettext
.text:00403006                 mov     [esp+2Ch+ArgList], edi ; ArgList
.text:0040300A                 mov     [esp+2Ch+Stream], esi ; Stream
.text:0040300D                 mov     [esp+2Ch+Format], eax ; Format
.text:00403011                 call    vfprintf
.text:00403016                 mov     ebx, [esi+4]
.text:00403019                 dec     ebx
.text:0040301A                 test    ebx, ebx
.text:0040301C                 mov     [esi+4], ebx
.text:0040301F                 js      short loc_40307F
.text:00403021                 mov     edi, [esi]
.text:00403023                 mov     byte ptr [edi], 0Ah
.text:00403026                 inc     dword ptr [esi]
.text:00403028
.text:00403028 loc_403028:                             ; CODE XREF: sub_402F50+13F↓j
.text:00403028                 mov     [esp+2Ch+Format], esi ; Stream
.text:0040302C                 mov     edx, Buffer
.text:00403032                 mov     [esp+2Ch+Stream], edx ; Buffer
.text:00403035                 call    fputs
.text:0040303A                 mov     ebp, [esi+4]
.text:0040303D                 dec     ebp
.text:0040303E                 test    ebp, ebp
.text:00403040                 mov     [esi+4], ebp
.text:00403043                 js      short loc_40306D
.text:00403045                 mov     ecx, [esi]
.text:00403047                 mov     byte ptr [ecx], 0Ah
.text:0040304A                 inc     dword ptr [esi]
.text:0040304C
.text:0040304C loc_40304C:                             ; CODE XREF: sub_402F50+12D↓j
.text:0040304C                 mov     [esp+2Ch+arg_4], esi ; Stream
.text:00403050                 mov     [esp+2Ch+Stream], offset aThisIsFreeSoft ; "This is free software; see the source f"...
.text:00403057                 call    ds:libintl_gettext
.text:0040305D                 mov     [esp+2Ch+arg_0], eax ; Buffer
.text:00403061                 add     esp, 1Ch
.text:00403064                 pop     ebx
.text:00403065                 pop     esi
.text:00403066                 pop     edi
.text:00403067                 pop     ebp
.text:00403068                 jmp     fputs
.text:0040306D ; ---------------------------------------------------------------------------
.text:0040306D
.text:0040306D loc_40306D:                             ; CODE XREF: sub_402F50+F3↑j
.text:0040306D                 mov     [esp+2Ch+Format], esi ; File
.text:00403071                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:00403078                 call    _flsbuf
.text:0040307D                 jmp     short loc_40304C
.text:0040307F ; ---------------------------------------------------------------------------
.text:0040307F
.text:0040307F loc_40307F:                             ; CODE XREF: sub_402F50+CF↑j
.text:0040307F                 mov     [esp+2Ch+Format], esi ; File
.text:00403083                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:0040308A                 call    _flsbuf
.text:0040308F                 jmp     short loc_403028
.text:00403091 ; ---------------------------------------------------------------------------
.text:00403091
.text:00403091 loc_403091:                             ; CODE XREF: sub_402F50+6D↑j
.text:00403091                                         ; DATA XREF: sub_402F50:jpt_402FBD↑o
.text:00403091                 mov     [esp+2Ch+Stream], offset aWrittenBySAndS ; jumptable 00402FBD case 2
.text:00403098                 jmp     loc_403000
.text:0040309D ; ---------------------------------------------------------------------------
.text:0040309D
.text:0040309D loc_40309D:                             ; CODE XREF: sub_402F50+6D↑j
.text:0040309D                                         ; DATA XREF: sub_402F50:jpt_402FBD↑o
.text:0040309D                 mov     [esp+2Ch+Stream], offset aWrittenBySSAnd ; jumptable 00402FBD case 3
.text:004030A4                 jmp     loc_403000
.text:004030A9 ; ---------------------------------------------------------------------------
.text:004030A9
.text:004030A9 loc_4030A9:                             ; CODE XREF: sub_402F50+6D↑j
.text:004030A9                                         ; DATA XREF: sub_402F50:jpt_402FBD↑o
.text:004030A9                 mov     [esp+2Ch+Stream], offset aWrittenBySSSAn ; jumptable 00402FBD case 4
.text:004030B0                 jmp     loc_403000
.text:004030B5 ; ---------------------------------------------------------------------------
.text:004030B5
.text:004030B5 loc_4030B5:                             ; CODE XREF: sub_402F50+6D↑j
.text:004030B5                                         ; DATA XREF: sub_402F50:jpt_402FBD↑o
.text:004030B5                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSA ; jumptable 00402FBD case 5
.text:004030BC                 jmp     loc_403000
.text:004030C1 ; ---------------------------------------------------------------------------
.text:004030C1
.text:004030C1 loc_4030C1:                             ; CODE XREF: sub_402F50+6D↑j
.text:004030C1                                         ; DATA XREF: sub_402F50:jpt_402FBD↑o
.text:004030C1                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_0 ; jumptable 00402FBD case 6
.text:004030C8                 jmp     loc_403000
.text:004030CD ; ---------------------------------------------------------------------------
.text:004030CD
.text:004030CD loc_4030CD:                             ; CODE XREF: sub_402F50+6D↑j
.text:004030CD                                         ; DATA XREF: sub_402F50:jpt_402FBD↑o
.text:004030CD                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_1 ; jumptable 00402FBD case 7
.text:004030D4                 jmp     loc_403000
.text:004030D9 ; ---------------------------------------------------------------------------
.text:004030D9
.text:004030D9 loc_4030D9:                             ; CODE XREF: sub_402F50+6D↑j
.text:004030D9                                         ; DATA XREF: sub_402F50:jpt_402FBD↑o
.text:004030D9                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_2 ; jumptable 00402FBD case 8
.text:004030E0                 jmp     loc_403000
.text:004030E5 ; ---------------------------------------------------------------------------
.text:004030E5
.text:004030E5 loc_4030E5:                             ; CODE XREF: sub_402F50+6D↑j
.text:004030E5                                         ; DATA XREF: sub_402F50:jpt_402FBD↑o
.text:004030E5                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_3 ; jumptable 00402FBD case 9
.text:004030EC                 jmp     loc_403000
.text:004030F1 ; ---------------------------------------------------------------------------
.text:004030F1
.text:004030F1 def_402FBD:                             ; CODE XREF: sub_402F50+67↑j
.text:004030F1                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS ; jumptable 00402FBD default case
.text:004030F8                 jmp     loc_403000
.text:004030FD ; ---------------------------------------------------------------------------
.text:004030FD
.text:004030FD loc_4030FD:                             ; CODE XREF: sub_402F50+3E↑j
.text:004030FD                 mov     [esp+2Ch+var_20], ebp
.text:00403101                 mov     ecx, [esp+2Ch+var_14]
.text:00403105                 mov     [esp+2Ch+Format], offset aSS ; "%s %s\n"
.text:0040310D                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00403110                 mov     [esp+2Ch+ArgList], ecx
.text:00403114                 call    fprintf
.text:00403119                 jmp     loc_402FB4
.text:00403119 sub_402F50      endp
.text:00403119
.text:00403119 ; ---------------------------------------------------------------------------
.text:0040311E                 align 10h
.text:00403120
.text:00403120 ; =============== S U B R O U T I N E =======================================
.text:00403120
.text:00403120
.text:00403120 ; int __cdecl sub_403120(FILE *, FILE *, int, int, char)
.text:00403120 sub_403120      proc near               ; CODE XREF: sub_4016E0+228↑p
.text:00403120
.text:00403120 var_1C          = dword ptr -1Ch
.text:00403120 var_18          = dword ptr -18h
.text:00403120 var_14          = dword ptr -14h
.text:00403120 var_10          = dword ptr -10h
.text:00403120 var_C           = dword ptr -0Ch
.text:00403120 arg_0           = dword ptr  4
.text:00403120 arg_4           = dword ptr  8
.text:00403120 arg_8           = dword ptr  0Ch
.text:00403120 arg_C           = dword ptr  10h
.text:00403120 arg_10          = byte ptr  14h
.text:00403120
.text:00403120                 sub     esp, 1Ch
.text:00403123                 mov     edx, [esp+1Ch+arg_C]
.text:00403127                 lea     ecx, [esp+1Ch+arg_10]
.text:0040312B                 mov     [esp+1Ch+var_C], ecx ; va_list
.text:0040312F                 mov     ecx, [esp+1Ch+arg_8]
.text:00403133                 mov     [esp+1Ch+var_10], edx ; int
.text:00403137                 mov     edx, [esp+1Ch+arg_4]
.text:0040313B                 mov     [esp+1Ch+var_14], ecx ; int
.text:0040313F                 mov     [esp+1Ch+var_18], edx ; FILE *
.text:00403143                 mov     edx, [esp+1Ch+arg_0]
.text:00403147                 mov     [esp+1Ch+var_1C], edx ; FILE *
.text:0040314A                 call    sub_402F50
.text:0040314F                 add     esp, 1Ch
.text:00403152                 retn
.text:00403152 sub_403120      endp
.text:00403152
.text:00403152 ; ---------------------------------------------------------------------------
.text:00403153                 align 10h
.text:00403160
.text:00403160 ; =============== S U B R O U T I N E =======================================
.text:00403160
.text:00403160
.text:00403160 ; int __cdecl sub_403160(int, int, char *, int, int)
.text:00403160 sub_403160      proc near               ; CODE XREF: sub_4016E0+9F↑p
.text:00403160
.text:00403160 var_1C          = dword ptr -1Ch
.text:00403160 var_18          = dword ptr -18h
.text:00403160 var_14          = dword ptr -14h
.text:00403160 var_10          = dword ptr -10h
.text:00403160 var_C           = dword ptr -0Ch
.text:00403160 var_8           = dword ptr -8
.text:00403160 var_4           = dword ptr -4
.text:00403160 arg_0           = dword ptr  4
.text:00403160 arg_4           = dword ptr  8
.text:00403160 arg_8           = dword ptr  0Ch
.text:00403160 arg_C           = dword ptr  10h
.text:00403160 arg_10          = dword ptr  14h
.text:00403160
.text:00403160                 sub     esp, 1Ch
.text:00403163                 mov     edx, [esp+1Ch+arg_C]
.text:00403167                 mov     [esp+1Ch+var_4], 0 ; int
.text:0040316F                 mov     ecx, [esp+1Ch+arg_10]
.text:00403173                 mov     [esp+1Ch+var_8], 0 ; int
.text:0040317B                 mov     [esp+1Ch+var_10], edx ; int
.text:0040317F                 mov     edx, [esp+1Ch+arg_4]
.text:00403183                 mov     [esp+1Ch+var_C], ecx ; int
.text:00403187                 mov     ecx, [esp+1Ch+arg_8]
.text:0040318B                 mov     [esp+1Ch+var_18], edx ; int
.text:0040318F                 mov     edx, [esp+1Ch+arg_0]
.text:00403193                 mov     [esp+1Ch+var_14], ecx ; char *
.text:00403197                 mov     [esp+1Ch+var_1C], edx ; int
.text:0040319A                 call    sub_402A20
.text:0040319F                 add     esp, 1Ch
.text:004031A2                 retn
.text:004031A2 sub_403160      endp
.text:004031A2
.text:004031A2 ; ---------------------------------------------------------------------------
.text:004031A3                 align 10h
.text:004031B0                 sub     esp, 2Ch
.text:004031B3                 mov     edx, [esp+44h]
.text:004031B7                 mov     dword ptr [esp+18h], 0
.text:004031BF                 mov     ecx, [esp+40h]
.text:004031C3                 mov     dword ptr [esp+14h], 0
.text:004031CB                 mov     [esp+1Ch], edx
.text:004031CF                 mov     edx, [esp+3Ch]
.text:004031D3                 mov     [esp+10h], ecx
.text:004031D7                 mov     ecx, [esp+38h]
.text:004031DB                 mov     [esp+0Ch], edx
.text:004031DF                 mov     edx, [esp+34h]
.text:004031E3                 mov     [esp+8], ecx
.text:004031E7                 mov     [esp+4], edx
.text:004031EB                 mov     edx, [esp+30h]
.text:004031EF                 mov     [esp], edx
.text:004031F2                 call    sub_401E90
.text:004031F7                 add     esp, 2Ch
.text:004031FA                 retn
.text:004031FA ; ---------------------------------------------------------------------------
.text:004031FB                 align 10h
.text:00403200                 sub     esp, 1Ch
.text:00403203                 mov     edx, [esp+2Ch]
.text:00403207                 mov     dword ptr [esp+18h], 0
.text:0040320F                 mov     ecx, [esp+30h]
.text:00403213                 mov     dword ptr [esp+14h], 1
.text:0040321B                 mov     [esp+0Ch], edx
.text:0040321F                 mov     edx, [esp+24h]
.text:00403223                 mov     [esp+10h], ecx
.text:00403227                 mov     ecx, [esp+28h]
.text:0040322B                 mov     [esp+4], edx
.text:0040322F                 mov     edx, [esp+20h]
.text:00403233                 mov     [esp+8], ecx
.text:00403237                 mov     [esp], edx
.text:0040323A                 call    sub_402A20
.text:0040323F                 add     esp, 1Ch
.text:00403242                 retn
.text:00403242 ; ---------------------------------------------------------------------------
.text:00403243                 align 10h
.text:00403250                 sub     esp, 2Ch
.text:00403253                 mov     edx, [esp+44h]
.text:00403257                 mov     dword ptr [esp+18h], 0
.text:0040325F                 mov     ecx, [esp+40h]
.text:00403263                 mov     dword ptr [esp+14h], 1
.text:0040326B                 mov     [esp+1Ch], edx
.text:0040326F                 mov     edx, [esp+3Ch]
.text:00403273                 mov     [esp+10h], ecx
.text:00403277                 mov     ecx, [esp+38h]
.text:0040327B                 mov     [esp+0Ch], edx
.text:0040327F                 mov     edx, [esp+34h]
.text:00403283                 mov     [esp+8], ecx
.text:00403287                 mov     [esp+4], edx
.text:0040328B                 mov     edx, [esp+30h]
.text:0040328F                 mov     [esp], edx
.text:00403292                 call    sub_401E90
.text:00403297                 add     esp, 2Ch
.text:0040329A                 retn
.text:0040329A ; ---------------------------------------------------------------------------
.text:0040329B                 align 10h
.text:004032A0                 mov     edx, [esp+4]
.text:004032A4                 mov     ds:dword_407060, edx
.text:004032AA                 retn
.text:004032AA ; ---------------------------------------------------------------------------
.text:004032AB aWriteError     db 'write error',0      ; DATA XREF: sub_4032D0:loc_403319↓o
.text:004032B7 ; const char aSS_0[]
.text:004032B7 aSS_0           db '%s: %s',0           ; DATA XREF: sub_4032D0+77↓o
.text:004032BE ; const char aS_3[]
.text:004032BE aS_3            db '%s',0               ; DATA XREF: sub_4032D0+A0↓o
.text:004032C1 ; ---------------------------------------------------------------------------
.text:004032C1                 jmp     short sub_4032D0
.text:004032C1 ; ---------------------------------------------------------------------------
.text:004032C3                 align 10h
.text:004032D0
.text:004032D0 ; =============== S U B R O U T I N E =======================================
.text:004032D0
.text:004032D0
.text:004032D0 ; void __cdecl sub_4032D0()
.text:004032D0 sub_4032D0      proc near               ; CODE XREF: .text:004032C1↑j
.text:004032D0                                         ; DATA XREF: sub_4016E0+5E↑o
.text:004032D0
.text:004032D0 Stream          = dword ptr -2Ch
.text:004032D0 ErrorMessage    = dword ptr -28h
.text:004032D0 var_24          = dword ptr -24h
.text:004032D0 var_20          = byte ptr -20h
.text:004032D0 var_1C          = dword ptr -1Ch
.text:004032D0 var_9           = byte ptr -9
.text:004032D0
.text:004032D0                 push    esi
.text:004032D1                 push    ebx
.text:004032D2                 sub     esp, 24h
.text:004032D5                 mov     edx, ds:_iob
.text:004032DB                 mov     ecx, [edx+2Ch]
.text:004032DE                 lea     esi, [edx+20h]
.text:004032E1                 shr     ecx, 5
.text:004032E4                 mov     bl, cl
.text:004032E6                 mov     ecx, [edx+20h]
.text:004032E9                 and     bl, 1
.text:004032EC                 cmp     ecx, [esi+8]
.text:004032EF                 mov     [esp+2Ch+Stream], esi ; Stream
.text:004032F2                 setz    [esp+2Ch+var_9]
.text:004032F7                 call    fclose
.text:004032FC                 test    eax, eax
.text:004032FE                 setnz   al
.text:00403301                 test    bl, bl
.text:00403303                 jnz     loc_403393
.text:00403309                 test    al, al
.text:0040330B                 jz      short loc_403360
.text:0040330D
.text:0040330D loc_40330D:                             ; CODE XREF: sub_4032D0+CD↓j
.text:0040330D                 call    _errno
.text:00403312                 mov     esi, [eax]
.text:00403314
.text:00403314 loc_403314:                             ; CODE XREF: sub_4032D0+C7↓j
.text:00403314                 cmp     esi, 9
.text:00403317                 jz      short loc_403386
.text:00403319
.text:00403319 loc_403319:                             ; CODE XREF: sub_4032D0+B8↓j
.text:00403319                                         ; sub_4032D0+C1↓j
.text:00403319                 mov     [esp+2Ch+Stream], offset aWriteError ; "write error"
.text:00403320                 call    ds:libintl_gettext
.text:00403326                 mov     ebx, eax
.text:00403328                 mov     eax, ds:dword_407060
.text:0040332D                 test    eax, eax
.text:0040332F                 jz      short loc_403366
.text:00403331                 mov     [esp+2Ch+Stream], eax ; char *
.text:00403334                 call    sub_404580
.text:00403339                 mov     dword ptr [esp+2Ch+var_20], eax ; char
.text:0040333D                 mov     edx, Code
.text:00403343                 mov     [esp+2Ch+var_1C], ebx
.text:00403347                 mov     [esp+2Ch+var_24], offset aSS_0 ; "%s: %s"
.text:0040334F                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:00403353                 mov     [esp+2Ch+Stream], edx ; Code
.text:00403356                 call    sub_404C20
.text:0040335B                 nop
.text:0040335C                 lea     esi, [esi+0]
.text:00403360
.text:00403360 loc_403360:                             ; CODE XREF: sub_4032D0+3B↑j
.text:00403360                                         ; sub_4032D0+B4↓j ...
.text:00403360                 add     esp, 24h
.text:00403363                 pop     ebx
.text:00403364                 pop     esi
.text:00403365                 retn
.text:00403366 ; ---------------------------------------------------------------------------
.text:00403366
.text:00403366 loc_403366:                             ; CODE XREF: sub_4032D0+5F↑j
.text:00403366                 mov     dword ptr [esp+2Ch+var_20], ebx ; char
.text:0040336A                 mov     ebx, Code
.text:00403370                 mov     [esp+2Ch+var_24], offset aS_3 ; "%s"
.text:00403378                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:0040337C                 mov     [esp+2Ch+Stream], ebx ; Code
.text:0040337F                 call    sub_404C20
.text:00403384                 jmp     short loc_403360
.text:00403386 ; ---------------------------------------------------------------------------
.text:00403386
.text:00403386 loc_403386:                             ; CODE XREF: sub_4032D0+47↑j
.text:00403386                 test    bl, bl
.text:00403388                 jnz     short loc_403319
.text:0040338A                 cmp     [esp+2Ch+var_9], 0
.text:0040338F                 jnz     short loc_403360
.text:00403391                 jmp     short loc_403319
.text:00403393 ; ---------------------------------------------------------------------------
.text:00403393
.text:00403393 loc_403393:                             ; CODE XREF: sub_4032D0+33↑j
.text:00403393                 xor     esi, esi
.text:00403395                 test    al, al
.text:00403397                 jz      loc_403314
.text:0040339D                 jmp     loc_40330D
.text:0040339D sub_4032D0      endp
.text:0040339D
.text:0040339D ; ---------------------------------------------------------------------------
.text:004033A2                 align 10h
.text:004033B0                 sub     esp, 0Ch
.text:004033B3                 mov     edx, [esp+14h]
.text:004033B7                 mov     dword ptr [esp+4], 5
.text:004033BF                 mov     [esp+8], edx
.text:004033C3                 mov     edx, [esp+10h]
.text:004033C7                 mov     [esp], edx
.text:004033CA                 call    sub_404210
.text:004033CF                 add     esp, 0Ch
.text:004033D2                 retn
.text:004033D2 ; ---------------------------------------------------------------------------
.text:004033D3                 align 10h
.text:004033E0
.text:004033E0 ; =============== S U B R O U T I N E =======================================
.text:004033E0
.text:004033E0
.text:004033E0 ; int __cdecl sub_4033E0(char *)
.text:004033E0 sub_4033E0      proc near               ; CODE XREF: sub_4016E0+2CC↑p
.text:004033E0                                         ; sub_401B50+94↑p
.text:004033E0
.text:004033E0 var_C           = dword ptr -0Ch
.text:004033E0 var_8           = dword ptr -8
.text:004033E0 var_4           = dword ptr -4
.text:004033E0 arg_0           = dword ptr  4
.text:004033E0
.text:004033E0                 sub     esp, 0Ch
.text:004033E3                 mov     edx, [esp+0Ch+arg_0]
.text:004033E7                 mov     [esp+0Ch+var_8], 5 ; int
.text:004033EF                 mov     [esp+0Ch+var_C], 0 ; int
.text:004033F6                 mov     [esp+0Ch+var_4], edx ; char *
.text:004033FA                 call    sub_404210
.text:004033FF                 add     esp, 0Ch
.text:00403402                 retn
.text:00403402 sub_4033E0      endp
.text:00403402
.text:00403402 ; ---------------------------------------------------------------------------
.text:00403403                 align 10h
.text:00403410
.text:00403410 ; =============== S U B R O U T I N E =======================================
.text:00403410
.text:00403410
.text:00403410 sub_403410      proc near               ; CODE XREF: sub_401B50+10↑p
.text:00403410
.text:00403410 var_C           = dword ptr -0Ch
.text:00403410 var_4           = dword ptr -4
.text:00403410 arg_0           = dword ptr  4
.text:00403410
.text:00403410                 sub     esp, 0Ch
.text:00403413                 mov     edx, [esp+0Ch+arg_0]
.text:00403417                 mov     [esp+0Ch+var_4], ebx
.text:0040341B                 mov     [esp+0Ch+var_C], edx
.text:0040341E                 call    sub_4047F0
.text:00403423                 mov     [esp+0Ch+var_C], eax ; char *
.text:00403426                 mov     ebx, eax
.text:00403428                 call    sub_404850
.text:0040342D                 lea     edx, [eax+ebx]
.text:00403430                 cmp     byte ptr [edx], 0
.text:00403433                 mov     byte ptr [edx], 0
.text:00403436                 mov     ebx, [esp+0Ch+var_4]
.text:0040343A                 setnz   cl
.text:0040343D                 add     esp, 0Ch
.text:00403440                 movzx   eax, cl
.text:00403443                 retn
.text:00403443 sub_403410      endp
.text:00403443
.text:00403443 ; ---------------------------------------------------------------------------
.text:00403444                 align 10h
.text:00403450 aLiteral        db 'literal',0          ; DATA XREF: .text:00403490↓o
.text:00403458 aShell          db 'shell',0            ; DATA XREF: .text:00403494↓o
.text:0040345E aShellAlways    db 'shell-always',0     ; DATA XREF: .text:00403498↓o
.text:0040346B aC              db 'c',0                ; DATA XREF: .text:0040349C↓o
.text:0040346D aEscape         db 'escape',0           ; DATA XREF: .text:004034A0↓o
.text:00403474 aLocale         db 'locale',0           ; DATA XREF: .text:004034A4↓o
.text:0040347B aClocale        db 'clocale',0          ; DATA XREF: .text:004034A8↓o
.text:00403483                 align 10h
.text:00403490                 dd offset aLiteral      ; "literal"
.text:00403494                 dd offset aShell        ; "shell"
.text:00403498                 dd offset aShellAlways  ; "shell-always"
.text:0040349C                 dd offset aC            ; "c"
.text:004034A0                 dd offset aEscape       ; "escape"
.text:004034A4                 dd offset aLocale       ; "locale"
.text:004034A8                 dd offset aClocale      ; "clocale"
.text:004034AC                 dd 2 dup(0)
.text:004034B4                 dd 1, 2, 3, 4, 5, 6
.text:004034CC asc_4034CC:                             ; DATA XREF: sub_4034E0+7E↓o
.text:004034CC                                         ; sub_4034E0+A39↓o ...
.text:004034CC                 text "UTF-16LE", '"',27h,'`'
.text:004034D2                 align 10h
.text:004034E0
.text:004034E0 ; =============== S U B R O U T I N E =======================================
.text:004034E0
.text:004034E0
.text:004034E0 ; int __cdecl sub_4034E0(int, int, char *Str, int, int, int)
.text:004034E0 sub_4034E0      proc near               ; CODE XREF: sub_4034E0+43A↓p
.text:004034E0                                         ; .text:004040A3↓p ...
.text:004034E0
.text:004034E0 C               = dword ptr -4Ch
.text:004034E0 Type            = dword ptr -48h
.text:004034E0 SizeInBytes     = dword ptr -44h
.text:004034E0 State           = dword ptr -40h
.text:004034E0 var_3C          = dword ptr -3Ch
.text:004034E0 var_38          = dword ptr -38h
.text:004034E0 var_34          = dword ptr -34h
.text:004034E0 var_30          = dword ptr -30h
.text:004034E0 var_29          = byte ptr -29h
.text:004034E0 var_28          = dword ptr -28h
.text:004034E0 var_22          = byte ptr -22h
.text:004034E0 var_21          = byte ptr -21h
.text:004034E0 var_20          = dword ptr -20h
.text:004034E0 var_1C          = dword ptr -1Ch
.text:004034E0 var_18          = mbstate_t ptr -18h
.text:004034E0 arg_0           = dword ptr  4
.text:004034E0 arg_4           = dword ptr  8
.text:004034E0 Str             = dword ptr  0Ch
.text:004034E0 arg_C           = dword ptr  10h
.text:004034E0 arg_10          = dword ptr  14h
.text:004034E0 arg_14          = dword ptr  18h
.text:004034E0
.text:004034E0                 push    ebp
.text:004034E1                 push    edi
.text:004034E2                 push    esi
.text:004034E3                 push    ebx
.text:004034E4                 sub     esp, 3Ch
.text:004034E7                 mov     edx, ds:__mb_cur_max
.text:004034ED                 mov     [esp+4Ch+var_34], 0
.text:004034F5                 mov     [esp+4Ch+var_1C], 0
.text:004034FD                 cmp     dword ptr [edx], 1
.text:00403500                 mov     [esp+4Ch+var_20], 0
.text:00403508                 mov     [esp+4Ch+var_21], 0
.text:0040350D                 setz    [esp+4Ch+var_22]
.text:00403512                 cmp     [esp+4Ch+arg_10], 6 ; switch 7 cases
.text:00403517                 ja      short def_40351D ; jumptable 0040351D default case, cases 0,1
.text:00403519                 mov     edx, [esp+4Ch+arg_10]
.text:0040351D                 jmp     ds:jpt_40351D[edx*4] ; switch jump
.text:0040351D ; ---------------------------------------------------------------------------
.text:00403524 jpt_40351D      dd offset def_40351D    ; DATA XREF: sub_4034E0+3D↑r
.text:00403524                 dd offset def_40351D    ; jump table for switch statement
.text:00403524                 dd offset loc_403E65
.text:00403524                 dd offset loc_403540
.text:00403524                 dd offset loc_403E8B
.text:00403524                 dd offset loc_403E95
.text:00403524                 dd offset loc_403E95
.text:00403540 ; ---------------------------------------------------------------------------
.text:00403540
.text:00403540 loc_403540:                             ; CODE XREF: sub_4034E0+3D↑j
.text:00403540                                         ; DATA XREF: sub_4034E0:jpt_40351D↑o
.text:00403540                 mov     eax, [esp+4Ch+arg_4] ; jumptable 0040351D case 3
.text:00403544                 cmp     [esp+4Ch+var_34], eax
.text:00403548                 jnb     short loc_403551
.text:0040354A                 mov     ebx, [esp+4Ch+arg_0]
.text:0040354E                 mov     byte ptr [ebx], 22h ; '"'
.text:00403551
.text:00403551 loc_403551:                             ; CODE XREF: sub_4034E0+68↑j
.text:00403551                 mov     [esp+4Ch+var_34], 1
.text:00403559                 mov     [esp+4Ch+var_21], 1
.text:0040355E                 mov     [esp+4Ch+var_1C], offset asc_4034CC ; "\"'`"
.text:00403566
.text:00403566 loc_403566:                             ; CODE XREF: sub_4034E0+9A6↓j
.text:00403566                 mov     [esp+4Ch+var_20], 1
.text:0040356E
.text:0040356E def_40351D:                             ; CODE XREF: sub_4034E0+37↑j
.text:0040356E                                         ; sub_4034E0+3D↑j ...
.text:0040356E                 xor     ebp, ebp        ; jumptable 0040351D default case, cases 0,1
.text:00403570
.text:00403570 loc_403570:                             ; CODE XREF: sub_4034E0+3DB↓j
.text:00403570                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00403575                 jz      loc_403E57
.text:0040357B                 cmp     ebp, [esp+4Ch+arg_C]
.text:0040357F
.text:0040357F loc_40357F:                             ; CODE XREF: sub_4034E0+980↓j
.text:0040357F                 jz      loc_403DEE
.text:00403585                 cmp     [esp+4Ch+var_21], 0
.text:0040358A                 jz      short loc_4035D0
.text:0040358C                 mov     esi, [esp+4Ch+var_20]
.text:00403590                 test    esi, esi
.text:00403592                 jz      short loc_4035D0
.text:00403594                 mov     ecx, [esp+4Ch+var_20]
.text:00403598                 lea     edi, [ecx+ebp]
.text:0040359B                 cmp     edi, [esp+4Ch+arg_C]
.text:0040359F                 ja      short loc_4035D0
.text:004035A1                 cld
.text:004035A2                 mov     ebx, [esp+4Ch+Str]
.text:004035A6                 mov     edi, [esp+4Ch+var_1C]
.text:004035AA                 add     ebx, ebp
.text:004035AC                 mov     esi, ebx
.text:004035AE                 cmp     ecx, ecx
.text:004035B0                 repe cmpsb
.text:004035B2                 jnz     short loc_4035D0
.text:004035B4                 mov     edx, [esp+4Ch+arg_4]
.text:004035B8                 cmp     [esp+4Ch+var_34], edx
.text:004035BC                 jnb     short loc_4035CA
.text:004035BE                 mov     ecx, [esp+4Ch+arg_0]
.text:004035C2                 mov     eax, [esp+4Ch+var_34]
.text:004035C6                 mov     byte ptr [eax+ecx], 5Ch ; '\'
.text:004035CA
.text:004035CA loc_4035CA:                             ; CODE XREF: sub_4034E0+DC↑j
.text:004035CA                 inc     [esp+4Ch+var_34]
.text:004035CE                 mov     esi, esi
.text:004035D0
.text:004035D0 loc_4035D0:                             ; CODE XREF: sub_4034E0+AA↑j
.text:004035D0                                         ; sub_4034E0+B2↑j ...
.text:004035D0                 mov     edi, [esp+4Ch+Str]
.text:004035D4                 movzx   ebx, byte ptr [ebp+edi+0]
.text:004035D9                 movzx   eax, bl
.text:004035DC                 cmp     eax, 7Eh        ; switch 127 cases
.text:004035DF                 ja      def_4035E5      ; jumptable 004035E5 default case, cases 1-6,14-31,64
.text:004035E5                 jmp     ds:jpt_4035E5[eax*4] ; switch jump
.text:004035E5 ; ---------------------------------------------------------------------------
.text:004035EC jpt_4035E5      dd offset loc_4037E8, offset def_4035E5, offset def_4035E5
.text:004035EC                                         ; DATA XREF: sub_4034E0+105↑r
.text:004035EC                 dd offset def_4035E5, offset def_4035E5, offset def_4035E5 ; jump table for switch statement
.text:004035EC                 dd offset def_4035E5, offset loc_4038C0, offset loc_4038DE
.text:004035EC                 dd offset loc_4038E2, offset loc_403927, offset loc_40392B
.text:004035EC                 dd offset loc_40392F, offset loc_403933, offset def_4035E5
.text:004035EC                 dd offset def_4035E5, offset def_4035E5, offset def_4035E5
.text:004035EC                 dd offset def_4035E5, offset def_4035E5, offset def_4035E5
.text:004035EC                 dd offset def_4035E5, offset def_4035E5, offset def_4035E5
.text:004035EC                 dd offset def_4035E5, offset def_4035E5, offset def_4035E5
.text:004035EC                 dd offset def_4035E5, offset def_4035E5, offset def_4035E5
.text:004035EC                 dd offset def_4035E5, offset def_4035E5, offset loc_403DB8
.text:004035EC                 dd offset loc_403DB8, offset loc_403DB8, offset loc_403DDA
.text:004035EC                 dd offset loc_403DB8, offset def_4039E2, offset loc_403DB8
.text:004035EC                 dd offset loc_403937, offset loc_403DB8, offset loc_403DB8
.text:004035EC                 dd offset loc_403DB8, offset def_4039E2, offset def_4039E2
.text:004035EC                 dd offset def_4039E2, offset def_4039E2, offset def_4039E2
.text:004035EC                 dd offset def_4039E2, offset def_4039E2, offset def_4039E2
.text:004035EC                 dd offset def_4039E2, offset def_4039E2, offset def_4039E2
.text:004035EC                 dd offset def_4039E2, offset def_4039E2, offset def_4039E2
.text:004035EC                 dd offset def_4039E2, offset def_4039E2, offset loc_403DB8
.text:004035EC                 dd offset loc_403DB8, offset loc_403DB8, offset loc_403DB8
.text:004035EC                 dd offset loc_40399C, offset def_4035E5, offset def_4039E2
.text:004035EC                 dd offset def_4039E2, offset def_4039E2, offset def_4039E2
.text:004035EC                 dd offset def_4039E2, offset def_4039E2, offset def_4039E2
.text:004035EC                 dd offset def_4039E2, offset def_4039E2, offset def_4039E2
.text:004035EC                 dd offset def_4039E2, offset def_4039E2, offset def_4039E2
.text:004035EC                 dd offset def_4039E2, offset def_4039E2, offset def_4039E2
.text:004035EC                 dd offset def_4039E2, offset def_4039E2, offset def_4039E2
.text:004035EC                 dd offset def_4039E2, offset def_4039E2, offset def_4039E2
.text:004035EC                 dd offset def_4039E2, offset def_4039E2, offset def_4039E2
.text:004035EC                 dd offset def_4039E2, offset loc_403DB8, offset loc_403DB1
.text:004035EC                 dd offset def_4039E2, offset loc_403DB8, offset def_4039E2
.text:004035EC                 dd offset loc_403DB8, offset def_4039E2, offset def_4039E2
.text:004035EC                 dd offset def_4039E2, offset def_4039E2, offset def_4039E2
.text:004035EC                 dd offset def_4039E2, offset def_4039E2, offset def_4039E2
.text:004035EC                 dd offset def_4039E2, offset def_4039E2, offset def_4039E2
.text:004035EC                 dd offset def_4039E2, offset def_4039E2, offset def_4039E2
.text:004035EC                 dd offset def_4039E2, offset def_4039E2, offset def_4039E2
.text:004035EC                 dd offset def_4039E2, offset def_4039E2, offset def_4039E2
.text:004035EC                 dd offset def_4039E2, offset def_4039E2, offset def_4039E2
.text:004035EC                 dd offset def_4039E2, offset def_4039E2, offset def_4039E2
.text:004035EC                 dd offset loc_403DC8, offset loc_403DB8, offset loc_403DC8
.text:004035EC                 dd offset loc_403DDA
.text:004037E8 ; ---------------------------------------------------------------------------
.text:004037E8
.text:004037E8 loc_4037E8:                             ; CODE XREF: sub_4034E0+105↑j
.text:004037E8                                         ; DATA XREF: sub_4034E0:jpt_4035E5↑o
.text:004037E8                 cmp     [esp+4Ch+var_21], 0 ; jumptable 004035E5 case 0
.text:004037ED                 lea     eax, [ebp+1]
.text:004037F0                 jz      loc_4038A0
.text:004037F6                 mov     esi, [esp+4Ch+arg_4]
.text:004037FA                 cmp     [esp+4Ch+var_34], esi
.text:004037FE                 jnb     short loc_40380C
.text:00403800                 mov     eax, [esp+4Ch+arg_0]
.text:00403804                 mov     ebx, [esp+4Ch+var_34]
.text:00403808                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:0040380C
.text:0040380C loc_40380C:                             ; CODE XREF: sub_4034E0+31E↑j
.text:0040380C                 inc     [esp+4Ch+var_34]
.text:00403810                 mov     edx, [esp+4Ch+arg_4]
.text:00403814                 cmp     [esp+4Ch+var_34], edx
.text:00403818                 jnb     short loc_403826
.text:0040381A                 mov     edi, [esp+4Ch+arg_0]
.text:0040381E                 mov     ecx, [esp+4Ch+var_34]
.text:00403822                 mov     byte ptr [ecx+edi], 30h ; '0'
.text:00403826
.text:00403826 loc_403826:                             ; CODE XREF: sub_4034E0+338↑j
.text:00403826                 inc     [esp+4Ch+var_34]
.text:0040382A                 mov     esi, [esp+4Ch+arg_4]
.text:0040382E                 cmp     [esp+4Ch+var_34], esi
.text:00403832                 jnb     short loc_403840
.text:00403834                 mov     ebx, [esp+4Ch+arg_0]
.text:00403838                 mov     eax, [esp+4Ch+var_34]
.text:0040383C                 mov     byte ptr [eax+ebx], 30h ; '0'
.text:00403840
.text:00403840 loc_403840:                             ; CODE XREF: sub_4034E0+352↑j
.text:00403840                 inc     [esp+4Ch+var_34]
.text:00403844                 mov     bl, 30h ; '0'
.text:00403846                 lea     esi, [esi+0]
.text:00403849                 lea     edi, [edi+0]
.text:00403850
.text:00403850 def_4039E2:                             ; CODE XREF: sub_4034E0+105↑j
.text:00403850                                         ; sub_4034E0+463↓j ...
.text:00403850                 cmp     [esp+4Ch+var_21], 0 ; jumptable 004035E5 cases 37,43-58,65-90,93,95,97-122
.text:00403850                                         ; jumptable 004039E2 default case, cases 34-38,42-44,46,48-59
.text:00403855                 lea     eax, [ebp+1]
.text:00403858                 jz      short loc_4038A0
.text:0040385A                 mov     cl, bl
.text:0040385C                 mov     edi, [esp+4Ch+arg_14]
.text:00403860                 mov     esi, 1
.text:00403865                 shr     cl, 5
.text:00403868                 movzx   edx, cl
.text:0040386B                 mov     ecx, ebx
.text:0040386D                 and     ecx, 1Fh
.text:00403870                 shl     esi, cl
.text:00403872                 test    [edi+edx*4+4], esi
.text:00403876                 jz      short loc_403892
.text:00403878
.text:00403878 loc_403878:                             ; CODE XREF: sub_4034E0+3FC↓j
.text:00403878                 mov     edx, [esp+4Ch+arg_4]
.text:0040387C                 cmp     [esp+4Ch+var_34], edx
.text:00403880                 jnb     short loc_40388E
.text:00403882                 mov     edi, [esp+4Ch+arg_0]
.text:00403886                 mov     esi, [esp+4Ch+var_34]
.text:0040388A                 mov     byte ptr [esi+edi], 5Ch ; '\'
.text:0040388E
.text:0040388E loc_40388E:                             ; CODE XREF: sub_4034E0+3A0↑j
.text:0040388E                 inc     [esp+4Ch+var_34]
.text:00403892
.text:00403892 loc_403892:                             ; CODE XREF: sub_4034E0+396↑j
.text:00403892                 lea     eax, [ebp+1]
.text:00403895                 lea     esi, [esi+0]
.text:00403899                 lea     edi, [edi+0]
.text:004038A0
.text:004038A0 loc_4038A0:                             ; CODE XREF: sub_4034E0+310↑j
.text:004038A0                                         ; sub_4034E0+378↑j ...
.text:004038A0                 mov     ebp, [esp+4Ch+arg_4]
.text:004038A4                 cmp     [esp+4Ch+var_34], ebp
.text:004038A8                 jnb     short loc_4038B5
.text:004038AA                 mov     edx, [esp+4Ch+arg_0]
.text:004038AE                 mov     ecx, [esp+4Ch+var_34]
.text:004038B2                 mov     [ecx+edx], bl
.text:004038B5
.text:004038B5 loc_4038B5:                             ; CODE XREF: sub_4034E0+3C8↑j
.text:004038B5                 inc     [esp+4Ch+var_34]
.text:004038B9                 mov     ebp, eax
.text:004038BB                 jmp     loc_403570
.text:004038C0 ; ---------------------------------------------------------------------------
.text:004038C0
.text:004038C0 loc_4038C0:                             ; CODE XREF: sub_4034E0+105↑j
.text:004038C0                                         ; DATA XREF: sub_4034E0:jpt_4035E5↑o
.text:004038C0                 mov     dl, 61h ; 'a'   ; jumptable 004035E5 case 7
.text:004038C2                 lea     esi, [esi+0]
.text:004038C9                 lea     edi, [edi+0]
.text:004038D0
.text:004038D0 loc_4038D0:                             ; CODE XREF: sub_4034E0+400↓j
.text:004038D0                                         ; sub_4034E0+409↓j ...
.text:004038D0                 cmp     [esp+4Ch+var_21], 0
.text:004038D5                 lea     eax, [ebp+1]
.text:004038D8                 jz      short loc_4038A0
.text:004038DA                 mov     bl, dl
.text:004038DC                 jmp     short loc_403878
.text:004038DE ; ---------------------------------------------------------------------------
.text:004038DE
.text:004038DE loc_4038DE:                             ; CODE XREF: sub_4034E0+105↑j
.text:004038DE                                         ; DATA XREF: sub_4034E0:jpt_4035E5↑o
.text:004038DE                 mov     dl, 62h ; 'b'   ; jumptable 004035E5 case 8
.text:004038E0                 jmp     short loc_4038D0
.text:004038E2 ; ---------------------------------------------------------------------------
.text:004038E2
.text:004038E2 loc_4038E2:                             ; CODE XREF: sub_4034E0+105↑j
.text:004038E2                                         ; DATA XREF: sub_4034E0:jpt_4035E5↑o
.text:004038E2                 mov     dl, 74h ; 't'   ; jumptable 004035E5 case 9
.text:004038E4
.text:004038E4 loc_4038E4:                             ; CODE XREF: sub_4034E0+449↓j
.text:004038E4                                         ; sub_4034E0+455↓j ...
.text:004038E4                 cmp     [esp+4Ch+arg_10], 1
.text:004038E9                 jnz     short loc_4038D0
.text:004038EB
.text:004038EB loc_4038EB:                             ; CODE XREF: sub_4034E0+45C↓j
.text:004038EB                                         ; sub_4034E0+4C1↓j ...
.text:004038EB                 mov     [esp+4Ch+var_3C], 2 ; jumptable 00403CB2 cases 91,92,94,96,124
.text:004038F3                 mov     eax, [esp+4Ch+arg_14]
.text:004038F7                 mov     edx, [esp+4Ch+arg_C]
.text:004038FB                 mov     ecx, [esp+4Ch+Str]
.text:004038FF                 mov     ebx, [esp+4Ch+arg_4]
.text:00403903                 mov     [esp+4Ch+var_38], eax ; int
.text:00403907                 mov     ebp, [esp+4Ch+arg_0]
.text:0040390B                 mov     [esp+4Ch+State], edx ; int
.text:0040390F                 mov     [esp+4Ch+SizeInBytes], ecx ; Str
.text:00403913                 mov     [esp+4Ch+Type], ebx ; int
.text:00403917                 mov     [esp+4Ch+C], ebp ; int
.text:0040391A                 call    sub_4034E0
.text:0040391F
.text:0040391F loc_40391F:                             ; CODE XREF: sub_4034E0+972↓j
.text:0040391F                 add     esp, 3Ch
.text:00403922                 pop     ebx
.text:00403923                 pop     esi
.text:00403924                 pop     edi
.text:00403925                 pop     ebp
.text:00403926                 retn
.text:00403927 ; ---------------------------------------------------------------------------
.text:00403927
.text:00403927 loc_403927:                             ; CODE XREF: sub_4034E0+105↑j
.text:00403927                                         ; DATA XREF: sub_4034E0:jpt_4035E5↑o
.text:00403927                 mov     dl, 6Eh ; 'n'   ; jumptable 004035E5 case 10
.text:00403929                 jmp     short loc_4038E4
.text:0040392B ; ---------------------------------------------------------------------------
.text:0040392B
.text:0040392B loc_40392B:                             ; CODE XREF: sub_4034E0+105↑j
.text:0040392B                                         ; DATA XREF: sub_4034E0:jpt_4035E5↑o
.text:0040392B                 mov     dl, 76h ; 'v'   ; jumptable 004035E5 case 11
.text:0040392D                 jmp     short loc_4038D0
.text:0040392F ; ---------------------------------------------------------------------------
.text:0040392F
.text:0040392F loc_40392F:                             ; CODE XREF: sub_4034E0+105↑j
.text:0040392F                                         ; DATA XREF: sub_4034E0:jpt_4035E5↑o
.text:0040392F                 mov     dl, 66h ; 'f'   ; jumptable 004035E5 case 12
.text:00403931                 jmp     short loc_4038D0
.text:00403933 ; ---------------------------------------------------------------------------
.text:00403933
.text:00403933 loc_403933:                             ; CODE XREF: sub_4034E0+105↑j
.text:00403933                                         ; DATA XREF: sub_4034E0:jpt_4035E5↑o
.text:00403933                 mov     dl, 72h ; 'r'   ; jumptable 004035E5 case 13
.text:00403935                 jmp     short loc_4038E4
.text:00403937 ; ---------------------------------------------------------------------------
.text:00403937
.text:00403937 loc_403937:                             ; CODE XREF: sub_4034E0+105↑j
.text:00403937                                         ; DATA XREF: sub_4034E0:jpt_4035E5↑o
.text:00403937                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 004035E5 case 39
.text:0040393C                 jz      short loc_4038EB ; jumptable 00403CB2 cases 91,92,94,96,124
.text:0040393E                 cmp     [esp+4Ch+arg_10], 2
.text:00403943                 jnz     def_4039E2      ; jumptable 004035E5 cases 37,43-58,65-90,93,95,97-122
.text:00403943                                         ; jumptable 004039E2 default case, cases 34-38,42-44,46,48-59
.text:00403949                 mov     edx, [esp+4Ch+arg_4]
.text:0040394D                 cmp     [esp+4Ch+var_34], edx
.text:00403951                 jnb     short loc_40395F
.text:00403953                 mov     ecx, [esp+4Ch+arg_0]
.text:00403957                 mov     edi, [esp+4Ch+var_34]
.text:0040395B                 mov     byte ptr [edi+ecx], 27h ; '''
.text:0040395F
.text:0040395F loc_40395F:                             ; CODE XREF: sub_4034E0+471↑j
.text:0040395F                 inc     [esp+4Ch+var_34]
.text:00403963                 mov     eax, [esp+4Ch+arg_4]
.text:00403967                 cmp     [esp+4Ch+var_34], eax
.text:0040396B                 jnb     short loc_403979
.text:0040396D                 mov     esi, [esp+4Ch+arg_0]
.text:00403971                 mov     edx, [esp+4Ch+var_34]
.text:00403975                 mov     byte ptr [edx+esi], 5Ch ; '\'
.text:00403979
.text:00403979 loc_403979:                             ; CODE XREF: sub_4034E0+48B↑j
.text:00403979                 inc     [esp+4Ch+var_34]
.text:0040397D                 mov     edi, [esp+4Ch+arg_4]
.text:00403981                 cmp     [esp+4Ch+var_34], edi
.text:00403985                 jnb     short loc_403993
.text:00403987                 mov     ecx, [esp+4Ch+arg_0]
.text:0040398B                 mov     eax, [esp+4Ch+var_34]
.text:0040398F                 mov     byte ptr [eax+ecx], 27h ; '''
.text:00403993
.text:00403993 loc_403993:                             ; CODE XREF: sub_4034E0+4A5↑j
.text:00403993                                         ; sub_4034E0+5C4↓j ...
.text:00403993                 inc     [esp+4Ch+var_34]
.text:00403997                 jmp     def_4039E2      ; jumptable 004035E5 cases 37,43-58,65-90,93,95,97-122
.text:00403997                                         ; jumptable 004039E2 default case, cases 34-38,42-44,46,48-59
.text:0040399C ; ---------------------------------------------------------------------------
.text:0040399C
.text:0040399C loc_40399C:                             ; CODE XREF: sub_4034E0+105↑j
.text:0040399C                                         ; DATA XREF: sub_4034E0:jpt_4035E5↑o
.text:0040399C                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 004035E5 case 63
.text:004039A1                 jz      loc_4038EB      ; jumptable 00403CB2 cases 91,92,94,96,124
.text:004039A7                 cmp     [esp+4Ch+arg_10], 3
.text:004039AC                 jnz     def_4039E2      ; jumptable 004035E5 cases 37,43-58,65-90,93,95,97-122
.text:004039AC                                         ; jumptable 004039E2 default case, cases 34-38,42-44,46,48-59
.text:004039B2                 lea     edx, [ebp+2]
.text:004039B5                 cmp     edx, [esp+4Ch+arg_C]
.text:004039B9                 jnb     def_4039E2      ; jumptable 004035E5 cases 37,43-58,65-90,93,95,97-122
.text:004039B9                                         ; jumptable 004039E2 default case, cases 34-38,42-44,46,48-59
.text:004039BF                 mov     esi, [esp+4Ch+Str]
.text:004039C3                 cmp     byte ptr [ebp+esi+1], 3Fh ; '?'
.text:004039C8                 jnz     def_4039E2      ; jumptable 004035E5 cases 37,43-58,65-90,93,95,97-122
.text:004039C8                                         ; jumptable 004039E2 default case, cases 34-38,42-44,46,48-59
.text:004039CE                 movzx   ecx, byte ptr [ebp+esi+2]
.text:004039D3                 movsx   eax, cl
.text:004039D6                 sub     eax, 21h ; '!'  ; switch 30 cases
.text:004039D9                 cmp     eax, 1Dh
.text:004039DC                 ja      def_4039E2      ; jumptable 004035E5 cases 37,43-58,65-90,93,95,97-122
.text:004039DC                                         ; jumptable 004039E2 default case, cases 34-38,42-44,46,48-59
.text:004039E2                 jmp     ds:jpt_4039E2[eax*4] ; switch jump
.text:004039E2 ; ---------------------------------------------------------------------------
.text:004039E9                 align 4
.text:004039EC jpt_4039E2      dd offset loc_403A64    ; DATA XREF: sub_4034E0+502↑r
.text:004039EC                 dd offset def_4039E2    ; jump table for switch statement
.text:004039EC                 dd offset def_4039E2
.text:004039EC                 dd offset def_4039E2
.text:004039EC                 dd offset def_4039E2
.text:004039EC                 dd offset def_4039E2
.text:004039EC                 dd offset loc_403A64
.text:004039EC                 dd offset loc_403A64
.text:004039EC                 dd offset loc_403A64
.text:004039EC                 dd offset def_4039E2
.text:004039EC                 dd offset def_4039E2
.text:004039EC                 dd offset def_4039E2
.text:004039EC                 dd offset loc_403A64
.text:004039EC                 dd offset def_4039E2
.text:004039EC                 dd offset loc_403A64
.text:004039EC                 dd offset def_4039E2
.text:004039EC                 dd offset def_4039E2
.text:004039EC                 dd offset def_4039E2
.text:004039EC                 dd offset def_4039E2
.text:004039EC                 dd offset def_4039E2
.text:004039EC                 dd offset def_4039E2
.text:004039EC                 dd offset def_4039E2
.text:004039EC                 dd offset def_4039E2
.text:004039EC                 dd offset def_4039E2
.text:004039EC                 dd offset def_4039E2
.text:004039EC                 dd offset def_4039E2
.text:004039EC                 dd offset def_4039E2
.text:004039EC                 dd offset loc_403A64
.text:004039EC                 dd offset loc_403A64
.text:004039EC                 dd offset loc_403A64
.text:00403A64 ; ---------------------------------------------------------------------------
.text:00403A64
.text:00403A64 loc_403A64:                             ; CODE XREF: sub_4034E0+502↑j
.text:00403A64                                         ; DATA XREF: sub_4034E0:jpt_4039E2↑o
.text:00403A64                 mov     ebp, edx        ; jumptable 004039E2 cases 33,39-41,45,47,60-62
.text:00403A66                 mov     bl, cl
.text:00403A68                 mov     edx, [esp+4Ch+arg_4]
.text:00403A6C                 cmp     [esp+4Ch+var_34], edx
.text:00403A70                 jnb     short loc_403A7E
.text:00403A72                 mov     ecx, [esp+4Ch+arg_0]
.text:00403A76                 mov     edi, [esp+4Ch+var_34]
.text:00403A7A                 mov     byte ptr [edi+ecx], 3Fh ; '?'
.text:00403A7E
.text:00403A7E loc_403A7E:                             ; CODE XREF: sub_4034E0+590↑j
.text:00403A7E                 inc     [esp+4Ch+var_34]
.text:00403A82                 mov     eax, [esp+4Ch+arg_4]
.text:00403A86                 cmp     [esp+4Ch+var_34], eax
.text:00403A8A                 jnb     short loc_403A98
.text:00403A8C                 mov     edx, [esp+4Ch+arg_0]
.text:00403A90                 mov     esi, [esp+4Ch+var_34]
.text:00403A94                 mov     byte ptr [esi+edx], 5Ch ; '\'
.text:00403A98
.text:00403A98 loc_403A98:                             ; CODE XREF: sub_4034E0+5AA↑j
.text:00403A98                 inc     [esp+4Ch+var_34]
.text:00403A9C                 mov     edi, [esp+4Ch+arg_4]
.text:00403AA0                 cmp     [esp+4Ch+var_34], edi
.text:00403AA4                 jnb     loc_403993
.text:00403AAA                 mov     eax, [esp+4Ch+arg_0]
.text:00403AAE                 mov     ecx, [esp+4Ch+var_34]
.text:00403AB2                 mov     byte ptr [ecx+eax], 3Fh ; '?'
.text:00403AB6                 jmp     loc_403993
.text:00403AB6 ; ---------------------------------------------------------------------------
.text:00403ABB                 align 10h
.text:00403AC0
.text:00403AC0 def_4035E5:                             ; CODE XREF: sub_4034E0+FF↑j
.text:00403AC0                                         ; sub_4034E0+105↑j
.text:00403AC0                                         ; DATA XREF: ...
.text:00403AC0                 cmp     [esp+4Ch+var_22], 0 ; jumptable 004035E5 default case, cases 1-6,14-31,64
.text:00403AC5                 jz      loc_403BF0
.text:00403ACB                 mov     [esp+4Ch+var_28], 1
.text:00403AD3                 mov     esi, ds:__mb_cur_max
.text:00403AD9                 movzx   edx, bl
.text:00403ADC                 cmp     dword ptr [esi], 1
.text:00403ADF                 jz      loc_403BD4
.text:00403AE5                 mov     [esp+4Ch+Type], 157h ; Type
.text:00403AED                 mov     [esp+4Ch+C], edx ; C
.text:00403AF0                 call    _isctype
.text:00403AF5
.text:00403AF5 loc_403AF5:                             ; CODE XREF: sub_4034E0+705↓j
.text:00403AF5                 test    eax, eax
.text:00403AF7                 setnz   [esp+4Ch+var_29]
.text:00403AFC
.text:00403AFC loc_403AFC:                             ; CODE XREF: sub_4034E0+7A5↓j
.text:00403AFC                 cmp     [esp+4Ch+var_21], 0
.text:00403B01                 lea     eax, [ebp+1]
.text:00403B04                 jz      loc_4038A0
.text:00403B0A                 cmp     [esp+4Ch+var_29], 0
.text:00403B0F                 jnz     def_4039E2      ; jumptable 004035E5 cases 37,43-58,65-90,93,95,97-122
.text:00403B0F                                         ; jumptable 004039E2 default case, cases 34-38,42-44,46,48-59
.text:00403B15
.text:00403B15 loc_403B15:                             ; CODE XREF: sub_4034E0+7AB↓j
.text:00403B15                 mov     eax, [esp+4Ch+var_28]
.text:00403B19                 lea     edx, [eax+ebp]
.text:00403B1C                 lea     esi, [esi+0]
.text:00403B20
.text:00403B20 loc_403B20:                             ; CODE XREF: sub_4034E0+6EF↓j
.text:00403B20                 cmp     [esp+4Ch+var_21], 0
.text:00403B25                 jz      short loc_403BA0
.text:00403B27                 cmp     [esp+4Ch+var_29], 0
.text:00403B2C                 jnz     short loc_403BA0
.text:00403B2E                 mov     edi, [esp+4Ch+arg_4]
.text:00403B32                 cmp     [esp+4Ch+var_34], edi
.text:00403B36                 jnb     short loc_403B44
.text:00403B38                 mov     esi, [esp+4Ch+arg_0]
.text:00403B3C                 mov     eax, [esp+4Ch+var_34]
.text:00403B40                 mov     byte ptr [eax+esi], 5Ch ; '\'
.text:00403B44
.text:00403B44 loc_403B44:                             ; CODE XREF: sub_4034E0+656↑j
.text:00403B44                 inc     [esp+4Ch+var_34]
.text:00403B48                 mov     ecx, [esp+4Ch+arg_4]
.text:00403B4C                 cmp     [esp+4Ch+var_34], ecx
.text:00403B50                 jnb     short loc_403B65
.text:00403B52                 mov     cl, bl
.text:00403B54                 mov     esi, [esp+4Ch+arg_0]
.text:00403B58                 mov     edi, [esp+4Ch+var_34]
.text:00403B5C                 shr     cl, 6
.text:00403B5F                 add     cl, 30h ; '0'
.text:00403B62                 mov     [edi+esi], cl
.text:00403B65
.text:00403B65 loc_403B65:                             ; CODE XREF: sub_4034E0+670↑j
.text:00403B65                 inc     [esp+4Ch+var_34]
.text:00403B69                 mov     edi, [esp+4Ch+arg_4]
.text:00403B6D                 cmp     [esp+4Ch+var_34], edi
.text:00403B71                 jnb     short loc_403B89
.text:00403B73                 mov     cl, bl
.text:00403B75                 mov     esi, [esp+4Ch+arg_0]
.text:00403B79                 shr     cl, 3
.text:00403B7C                 mov     edi, [esp+4Ch+var_34]
.text:00403B80                 and     cl, 7
.text:00403B83                 add     cl, 30h ; '0'
.text:00403B86                 mov     [edi+esi], cl
.text:00403B89
.text:00403B89 loc_403B89:                             ; CODE XREF: sub_4034E0+691↑j
.text:00403B89                 inc     [esp+4Ch+var_34]
.text:00403B8D                 and     bl, 7
.text:00403B90                 add     bl, 30h ; '0'
.text:00403B93                 lea     esi, [esi+0]
.text:00403B99                 lea     edi, [edi+0]
.text:00403BA0
.text:00403BA0 loc_403BA0:                             ; CODE XREF: sub_4034E0+645↑j
.text:00403BA0                                         ; sub_4034E0+64C↑j
.text:00403BA0                 lea     eax, [ebp+1]
.text:00403BA3                 cmp     edx, eax
.text:00403BA5                 jbe     loc_4038A0
.text:00403BAB                 mov     ebp, [esp+4Ch+arg_4]
.text:00403BAF                 cmp     [esp+4Ch+var_34], ebp
.text:00403BB3                 jnb     short loc_403BC0
.text:00403BB5                 mov     ecx, [esp+4Ch+arg_0]
.text:00403BB9                 mov     edi, [esp+4Ch+var_34]
.text:00403BBD                 mov     [edi+ecx], bl
.text:00403BC0
.text:00403BC0 loc_403BC0:                             ; CODE XREF: sub_4034E0+6D3↑j
.text:00403BC0                 inc     [esp+4Ch+var_34]
.text:00403BC4                 mov     ebp, eax
.text:00403BC6                 mov     eax, [esp+4Ch+Str]
.text:00403BCA                 movzx   ebx, byte ptr [ebp+eax+0]
.text:00403BCF                 jmp     loc_403B20
.text:00403BD4 ; ---------------------------------------------------------------------------
.text:00403BD4
.text:00403BD4 loc_403BD4:                             ; CODE XREF: sub_4034E0+5FF↑j
.text:00403BD4                 mov     ecx, ds:_pctype
.text:00403BDA                 mov     edi, [ecx]
.text:00403BDC                 movzx   eax, word ptr [edi+edx*2]
.text:00403BE0                 and     eax, 157h
.text:00403BE5                 jmp     loc_403AF5
.text:00403BE5 ; ---------------------------------------------------------------------------
.text:00403BEA                 align 10h
.text:00403BF0
.text:00403BF0 loc_403BF0:                             ; CODE XREF: sub_4034E0+5E5↑j
.text:00403BF0                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00403BF5                 mov     [esp+4Ch+var_18._Wchar], 0
.text:00403BFD                 mov     [esp+4Ch+var_28], 0
.text:00403C05                 mov     [esp+4Ch+var_29], 1
.text:00403C0A                 jz      loc_403D9C
.text:00403C10
.text:00403C10 loc_403C10:                             ; CODE XREF: sub_4034E0+8CC↓j
.text:00403C10                 mov     ecx, [esp+4Ch+arg_C]
.text:00403C14                 lea     edx, [esp+4Ch+var_18]
.text:00403C18                 mov     edi, [esp+4Ch+Str]
.text:00403C1C                 mov     [esp+4Ch+State], edx ; State
.text:00403C20                 lea     esi, [esp+4Ch+var_18._State]
.text:00403C24                 sub     ecx, ebp
.text:00403C26                 mov     [esp+4Ch+SizeInBytes], ecx ; SizeInBytes
.text:00403C2A                 add     edi, ebp
.text:00403C2C                 mov     [esp+4Ch+var_30], edi
.text:00403C30                 mov     [esp+4Ch+Type], edi ; SrcCh
.text:00403C34                 mov     [esp+4Ch+C], esi ; DstCh
.text:00403C37                 call    mbrtowc
.text:00403C3C                 test    eax, eax
.text:00403C3E                 mov     edi, eax
.text:00403C40                 jz      short loc_403C80
.text:00403C42                 cmp     eax, 0FFFFFFFFh
.text:00403C45                 jz      loc_403D92
.text:00403C4B                 cmp     eax, 0FFFFFFFEh
.text:00403C4E                 jz      loc_403D52
.text:00403C54                 cmp     [esp+4Ch+arg_10], 1
.text:00403C59                 jz      short loc_403C90
.text:00403C5B
.text:00403C5B loc_403C5B:                             ; CODE XREF: sub_4034E0+7B9↓j
.text:00403C5B                                         ; sub_4034E0+86D↓j
.text:00403C5B                 movzx   ecx, [esp+4Ch+var_18._State]
.text:00403C60                 mov     [esp+4Ch+Type], 157h ; Type
.text:00403C68                 mov     [esp+4Ch+C], ecx ; C
.text:00403C6B                 call    iswctype
.text:00403C70                 test    eax, eax
.text:00403C72                 jnz     short loc_403C79
.text:00403C74                 mov     [esp+4Ch+var_29], 0
.text:00403C79
.text:00403C79 loc_403C79:                             ; CODE XREF: sub_4034E0+792↑j
.text:00403C79                 mov     [esp+4Ch+var_28], edi
.text:00403C7D                 lea     esi, [esi+0]
.text:00403C80
.text:00403C80 loc_403C80:                             ; CODE XREF: sub_4034E0+760↑j
.text:00403C80                                         ; sub_4034E0+87B↓j ...
.text:00403C80                 cmp     [esp+4Ch+var_28], 1
.text:00403C85                 jbe     loc_403AFC
.text:00403C8B                 jmp     loc_403B15
.text:00403C90 ; ---------------------------------------------------------------------------
.text:00403C90
.text:00403C90 loc_403C90:                             ; CODE XREF: sub_4034E0+779↑j
.text:00403C90                 cmp     [esp+4Ch+arg_10], eax
.text:00403C94                 mov     edx, 1
.text:00403C99                 jnb     short loc_403C5B
.text:00403C9B
.text:00403C9B loc_403C9B:                             ; CODE XREF: sub_4034E0+867↓j
.text:00403C9B                 mov     ecx, [esp+4Ch+Str]
.text:00403C9F                 lea     esi, [edx+ebp]
.text:00403CA2                 movsx   eax, byte ptr [esi+ecx]
.text:00403CA6                 sub     eax, 5Bh ; '['  ; switch 34 cases
.text:00403CA9                 cmp     eax, 21h
.text:00403CAC                 ja      def_403CB2      ; jumptable 00403CB2 default case, cases 93,95,97-123
.text:00403CB2                 jmp     ds:jpt_403CB2[eax*4] ; switch jump
.text:00403CB2 ; ---------------------------------------------------------------------------
.text:00403CB9                 align 4
.text:00403CBC jpt_403CB2      dd offset loc_4038EB    ; DATA XREF: sub_4034E0+7D2↑r
.text:00403CBC                 dd offset loc_4038EB    ; jump table for switch statement
.text:00403CBC                 dd offset def_403CB2
.text:00403CBC                 dd offset loc_4038EB
.text:00403CBC                 dd offset def_403CB2
.text:00403CBC                 dd offset loc_4038EB
.text:00403CBC                 dd offset def_403CB2
.text:00403CBC                 dd offset def_403CB2
.text:00403CBC                 dd offset def_403CB2
.text:00403CBC                 dd offset def_403CB2
.text:00403CBC                 dd offset def_403CB2
.text:00403CBC                 dd offset def_403CB2
.text:00403CBC                 dd offset def_403CB2
.text:00403CBC                 dd offset def_403CB2
.text:00403CBC                 dd offset def_403CB2
.text:00403CBC                 dd offset def_403CB2
.text:00403CBC                 dd offset def_403CB2
.text:00403CBC                 dd offset def_403CB2
.text:00403CBC                 dd offset def_403CB2
.text:00403CBC                 dd offset def_403CB2
.text:00403CBC                 dd offset def_403CB2
.text:00403CBC                 dd offset def_403CB2
.text:00403CBC                 dd offset def_403CB2
.text:00403CBC                 dd offset def_403CB2
.text:00403CBC                 dd offset def_403CB2
.text:00403CBC                 dd offset def_403CB2
.text:00403CBC                 dd offset def_403CB2
.text:00403CBC                 dd offset def_403CB2
.text:00403CBC                 dd offset def_403CB2
.text:00403CBC                 dd offset def_403CB2
.text:00403CBC                 dd offset def_403CB2
.text:00403CBC                 dd offset def_403CB2
.text:00403CBC                 dd offset def_403CB2
.text:00403CBC                 dd offset loc_4038EB
.text:00403D44 ; ---------------------------------------------------------------------------
.text:00403D44
.text:00403D44 def_403CB2:                             ; CODE XREF: sub_4034E0+7CC↑j
.text:00403D44                                         ; sub_4034E0+7D2↑j
.text:00403D44                                         ; DATA XREF: ...
.text:00403D44                 inc     edx             ; jumptable 00403CB2 default case, cases 93,95,97-123
.text:00403D45                 cmp     edx, edi
.text:00403D47                 jb      loc_403C9B
.text:00403D4D                 jmp     loc_403C5B
.text:00403D52 ; ---------------------------------------------------------------------------
.text:00403D52
.text:00403D52 loc_403D52:                             ; CODE XREF: sub_4034E0+76E↑j
.text:00403D52                 cmp     ebp, [esp+4Ch+arg_C]
.text:00403D56                 mov     [esp+4Ch+var_29], 0
.text:00403D5B                 jnb     loc_403C80
.text:00403D61                 mov     eax, [esp+4Ch+var_30]
.text:00403D65                 cmp     byte ptr [eax], 0
.text:00403D68                 jz      loc_403C80
.text:00403D6E
.text:00403D6E loc_403D6E:                             ; CODE XREF: sub_4034E0+8AB↓j
.text:00403D6E                 inc     [esp+4Ch+var_28]
.text:00403D72                 mov     esi, [esp+4Ch+var_28]
.text:00403D76                 lea     eax, [esi+ebp]
.text:00403D79                 cmp     eax, [esp+4Ch+arg_C]
.text:00403D7D                 jnb     loc_403C80
.text:00403D83                 mov     edi, [esp+4Ch+Str]
.text:00403D87                 cmp     byte ptr [eax+edi], 0
.text:00403D8B                 jnz     short loc_403D6E
.text:00403D8D                 jmp     loc_403C80
.text:00403D92 ; ---------------------------------------------------------------------------
.text:00403D92
.text:00403D92 loc_403D92:                             ; CODE XREF: sub_4034E0+765↑j
.text:00403D92                 mov     [esp+4Ch+var_29], 0
.text:00403D97                 jmp     loc_403C80
.text:00403D9C ; ---------------------------------------------------------------------------
.text:00403D9C
.text:00403D9C loc_403D9C:                             ; CODE XREF: sub_4034E0+72A↑j
.text:00403D9C                 mov     edx, [esp+4Ch+Str]
.text:00403DA0                 mov     [esp+4Ch+C], edx ; Str
.text:00403DA3                 call    strlen
.text:00403DA8                 mov     [esp+4Ch+arg_C], eax
.text:00403DAC                 jmp     loc_403C10
.text:00403DB1 ; ---------------------------------------------------------------------------
.text:00403DB1
.text:00403DB1 loc_403DB1:                             ; CODE XREF: sub_4034E0+105↑j
.text:00403DB1                                         ; DATA XREF: sub_4034E0:jpt_4035E5↑o
.text:00403DB1                 mov     dl, bl          ; jumptable 004035E5 case 92
.text:00403DB3                 jmp     loc_4038E4
.text:00403DB8 ; ---------------------------------------------------------------------------
.text:00403DB8
.text:00403DB8 loc_403DB8:                             ; CODE XREF: sub_4034E0+105↑j
.text:00403DB8                                         ; sub_4034E0+902↓j
.text:00403DB8                                         ; DATA XREF: ...
.text:00403DB8                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 004035E5 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:00403DBD                 jnz     def_4039E2      ; jumptable 004035E5 cases 37,43-58,65-90,93,95,97-122
.text:00403DBD                                         ; jumptable 004039E2 default case, cases 34-38,42-44,46,48-59
.text:00403DC3                 jmp     loc_4038EB      ; jumptable 00403CB2 cases 91,92,94,96,124
.text:00403DC8 ; ---------------------------------------------------------------------------
.text:00403DC8
.text:00403DC8 loc_403DC8:                             ; CODE XREF: sub_4034E0+105↑j
.text:00403DC8                                         ; DATA XREF: sub_4034E0:jpt_4035E5↑o
.text:00403DC8                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh ; jumptable 004035E5 cases 123,125
.text:00403DCD                 jz      short loc_403DE4
.text:00403DCF                 cmp     [esp+4Ch+arg_C], 1
.text:00403DD4
.text:00403DD4 loc_403DD4:                             ; CODE XREF: sub_4034E0+90C↓j
.text:00403DD4                 jnz     def_4039E2      ; jumptable 004035E5 cases 37,43-58,65-90,93,95,97-122
.text:00403DD4                                         ; jumptable 004039E2 default case, cases 34-38,42-44,46,48-59
.text:00403DDA
.text:00403DDA loc_403DDA:                             ; CODE XREF: sub_4034E0+105↑j
.text:00403DDA                                         ; DATA XREF: sub_4034E0:jpt_4035E5↑o
.text:00403DDA                 test    ebp, ebp        ; jumptable 004035E5 cases 35,126
.text:00403DDC                 jnz     def_4039E2      ; jumptable 004035E5 cases 37,43-58,65-90,93,95,97-122
.text:00403DDC                                         ; jumptable 004039E2 default case, cases 34-38,42-44,46,48-59
.text:00403DE2                 jmp     short loc_403DB8 ; jumptable 004035E5 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:00403DE4 ; ---------------------------------------------------------------------------
.text:00403DE4
.text:00403DE4 loc_403DE4:                             ; CODE XREF: sub_4034E0+8ED↑j
.text:00403DE4                 mov     esi, [esp+4Ch+Str]
.text:00403DE8                 cmp     byte ptr [esi+1], 0
.text:00403DEC                 jmp     short loc_403DD4
.text:00403DEE ; ---------------------------------------------------------------------------
.text:00403DEE
.text:00403DEE loc_403DEE:                             ; CODE XREF: sub_4034E0:loc_40357F↑j
.text:00403DEE                 test    ebp, ebp
.text:00403DF0                 jnz     short loc_403DFD
.text:00403DF2                 cmp     [esp+4Ch+arg_10], 1
.text:00403DF7                 jz      loc_4038EB      ; jumptable 00403CB2 cases 91,92,94,96,124
.text:00403DFD
.text:00403DFD loc_403DFD:                             ; CODE XREF: sub_4034E0+910↑j
.text:00403DFD                 mov     esi, [esp+4Ch+var_1C]
.text:00403E01                 test    esi, esi
.text:00403E03                 jz      short loc_403E38
.text:00403E05                 mov     edi, [esp+4Ch+var_1C]
.text:00403E09                 movzx   eax, byte ptr [edi]
.text:00403E0C                 test    al, al
.text:00403E0E                 jz      short loc_403E38
.text:00403E10
.text:00403E10 loc_403E10:                             ; CODE XREF: sub_4034E0+956↓j
.text:00403E10                 mov     ebp, [esp+4Ch+arg_4]
.text:00403E14                 cmp     [esp+4Ch+var_34], ebp
.text:00403E18                 jnb     short loc_403E25
.text:00403E1A                 mov     ecx, [esp+4Ch+arg_0]
.text:00403E1E                 mov     ebx, [esp+4Ch+var_34]
.text:00403E22                 mov     [ebx+ecx], al
.text:00403E25
.text:00403E25 loc_403E25:                             ; CODE XREF: sub_4034E0+938↑j
.text:00403E25                 inc     [esp+4Ch+var_1C]
.text:00403E29                 inc     [esp+4Ch+var_34]
.text:00403E2D                 mov     edx, [esp+4Ch+var_1C]
.text:00403E31                 movzx   eax, byte ptr [edx]
.text:00403E34                 test    al, al
.text:00403E36                 jnz     short loc_403E10
.text:00403E38
.text:00403E38 loc_403E38:                             ; CODE XREF: sub_4034E0+923↑j
.text:00403E38                                         ; sub_4034E0+92E↑j
.text:00403E38                 mov     eax, [esp+4Ch+arg_4]
.text:00403E3C                 cmp     [esp+4Ch+var_34], eax
.text:00403E40                 jnb     short loc_403E4E
.text:00403E42                 mov     edi, [esp+4Ch+arg_0]
.text:00403E46                 mov     esi, [esp+4Ch+var_34]
.text:00403E4A                 mov     byte ptr [esi+edi], 0
.text:00403E4E
.text:00403E4E loc_403E4E:                             ; CODE XREF: sub_4034E0+960↑j
.text:00403E4E                 mov     eax, [esp+4Ch+var_34]
.text:00403E52                 jmp     loc_40391F
.text:00403E57 ; ---------------------------------------------------------------------------
.text:00403E57
.text:00403E57 loc_403E57:                             ; CODE XREF: sub_4034E0+95↑j
.text:00403E57                 mov     ebx, [esp+4Ch+Str]
.text:00403E5B                 cmp     byte ptr [ebp+ebx+0], 0
.text:00403E60                 jmp     loc_40357F
.text:00403E65 ; ---------------------------------------------------------------------------
.text:00403E65
.text:00403E65 loc_403E65:                             ; CODE XREF: sub_4034E0+3D↑j
.text:00403E65                                         ; DATA XREF: sub_4034E0:jpt_40351D↑o
.text:00403E65                 mov     edx, [esp+4Ch+arg_4] ; jumptable 0040351D case 2
.text:00403E69                 cmp     [esp+4Ch+var_34], edx
.text:00403E6D                 jnb     short loc_403E76
.text:00403E6F                 mov     ecx, [esp+4Ch+arg_0]
.text:00403E73                 mov     byte ptr [ecx], 27h ; '''
.text:00403E76
.text:00403E76 loc_403E76:                             ; CODE XREF: sub_4034E0+98D↑j
.text:00403E76                 mov     [esp+4Ch+var_34], 1
.text:00403E7E                 mov     [esp+4Ch+var_1C], 4034CEh
.text:00403E86                 jmp     loc_403566
.text:00403E8B ; ---------------------------------------------------------------------------
.text:00403E8B
.text:00403E8B loc_403E8B:                             ; CODE XREF: sub_4034E0+3D↑j
.text:00403E8B                                         ; DATA XREF: sub_4034E0:jpt_40351D↑o
.text:00403E8B                 mov     [esp+4Ch+var_21], 1 ; jumptable 0040351D case 4
.text:00403E90                 jmp     def_40351D      ; jumptable 0040351D default case, cases 0,1
.text:00403E95 ; ---------------------------------------------------------------------------
.text:00403E95
.text:00403E95 loc_403E95:                             ; CODE XREF: sub_4034E0+3D↑j
.text:00403E95                                         ; DATA XREF: sub_4034E0:jpt_40351D↑o
.text:00403E95                 mov     [esp+4Ch+C], 4034D0h ; jumptable 0040351D cases 5,6
.text:00403E9C                 call    ds:libintl_gettext
.text:00403EA2                 cmp     eax, 4034D0h
.text:00403EA7                 mov     edi, eax
.text:00403EA9                 jz      short loc_403F20
.text:00403EAB
.text:00403EAB loc_403EAB:                             ; CODE XREF: sub_4034E0+A45↓j
.text:00403EAB                                         ; sub_4034E0+A4C↓j
.text:00403EAB                 mov     [esp+4Ch+C], 4034CEh
.text:00403EB2                 call    ds:libintl_gettext
.text:00403EB8                 cmp     eax, 4034CEh
.text:00403EBD                 mov     edx, eax
.text:00403EBF                 jz      short loc_403F12
.text:00403EC1
.text:00403EC1 loc_403EC1:                             ; CODE XREF: sub_4034E0+A37↓j
.text:00403EC1                                         ; sub_4034E0+A3E↓j
.text:00403EC1                 mov     [esp+4Ch+var_1C], edi
.text:00403EC5                 cmp     byte ptr [edi], 0
.text:00403EC8                 jz      short loc_403EF8
.text:00403ECA
.text:00403ECA loc_403ECA:                             ; CODE XREF: sub_4034E0+A16↓j
.text:00403ECA                 mov     ecx, [esp+4Ch+arg_4]
.text:00403ECE                 cmp     [esp+4Ch+var_34], ecx
.text:00403ED2                 jnb     short loc_403EE7
.text:00403ED4                 mov     ebp, [esp+4Ch+var_1C]
.text:00403ED8                 mov     edi, [esp+4Ch+arg_0]
.text:00403EDC                 mov     esi, [esp+4Ch+var_34]
.text:00403EE0                 movzx   ebx, byte ptr [ebp+0]
.text:00403EE4                 mov     [esi+edi], bl
.text:00403EE7
.text:00403EE7 loc_403EE7:                             ; CODE XREF: sub_4034E0+9F2↑j
.text:00403EE7                 inc     [esp+4Ch+var_1C]
.text:00403EEB                 inc     [esp+4Ch+var_34]
.text:00403EEF                 mov     eax, [esp+4Ch+var_1C]
.text:00403EF3                 cmp     byte ptr [eax], 0
.text:00403EF6                 jnz     short loc_403ECA
.text:00403EF8
.text:00403EF8 loc_403EF8:                             ; CODE XREF: sub_4034E0+9E8↑j
.text:00403EF8                 mov     [esp+4Ch+var_21], 1
.text:00403EFD                 mov     [esp+4Ch+var_1C], edx
.text:00403F01                 mov     [esp+4Ch+C], edx ; Str
.text:00403F04                 call    strlen
.text:00403F09                 mov     [esp+4Ch+var_20], eax
.text:00403F0D                 jmp     def_40351D      ; jumptable 0040351D default case, cases 0,1
.text:00403F12 ; ---------------------------------------------------------------------------
.text:00403F12
.text:00403F12 loc_403F12:                             ; CODE XREF: sub_4034E0+9DF↑j
.text:00403F12                 cmp     [esp+4Ch+arg_10], 6
.text:00403F17                 jnz     short loc_403EC1
.text:00403F19                 mov     edx, offset asc_4034CC ; "\"'`"
.text:00403F1E                 jmp     short loc_403EC1
.text:00403F20 ; ---------------------------------------------------------------------------
.text:00403F20
.text:00403F20 loc_403F20:                             ; CODE XREF: sub_4034E0+9C9↑j
.text:00403F20                 cmp     [esp+4Ch+arg_10], 6
.text:00403F25                 jnz     short loc_403EAB
.text:00403F27                 mov     edi, offset asc_4034CC ; "\"'`"
.text:00403F2C                 jmp     loc_403EAB
.text:00403F2C sub_4034E0      endp
.text:00403F2C
.text:00403F31 ; ---------------------------------------------------------------------------
.text:00403F31                 jmp     short loc_403F40
.text:00403F31 ; ---------------------------------------------------------------------------
.text:00403F33                 align 10h
.text:00403F40
.text:00403F40 loc_403F40:                             ; CODE XREF: .text:00403F31↑j
.text:00403F40                 sub     esp, 0Ch
.text:00403F43                 mov     [esp+4], ebx
.text:00403F47                 mov     [esp+8], esi
.text:00403F4B                 call    _errno
.text:00403F50                 mov     esi, [eax]
.text:00403F52                 mov     dword ptr [esp], 24h ; '$'
.text:00403F59                 call    sub_4048E0
.text:00403F5E                 mov     edx, [esp+10h]
.text:00403F62                 mov     ebx, eax
.text:00403F64                 test    edx, edx
.text:00403F66                 jz      short loc_403FB1
.text:00403F68
.text:00403F68 loc_403F68:                             ; CODE XREF: .text:00403FB6↓j
.text:00403F68                 mov     ecx, [edx]
.text:00403F6A                 mov     [ebx], ecx
.text:00403F6C                 mov     ecx, [edx+4]
.text:00403F6F                 mov     [ebx+4], ecx
.text:00403F72                 mov     ecx, [edx+8]
.text:00403F75                 mov     [ebx+8], ecx
.text:00403F78                 mov     ecx, [edx+0Ch]
.text:00403F7B                 mov     [ebx+0Ch], ecx
.text:00403F7E                 mov     ecx, [edx+10h]
.text:00403F81                 mov     [ebx+10h], ecx
.text:00403F84                 mov     ecx, [edx+14h]
.text:00403F87                 mov     [ebx+14h], ecx
.text:00403F8A                 mov     ecx, [edx+18h]
.text:00403F8D                 mov     [ebx+18h], ecx
.text:00403F90                 mov     ecx, [edx+1Ch]
.text:00403F93                 mov     [ebx+1Ch], ecx
.text:00403F96                 mov     ecx, [edx+20h]
.text:00403F99                 mov     [ebx+20h], ecx
.text:00403F9C                 call    _errno
.text:00403FA1                 mov     [eax], esi
.text:00403FA3                 mov     esi, [esp+8]
.text:00403FA7                 mov     eax, ebx
.text:00403FA9                 mov     ebx, [esp+4]
.text:00403FAD                 add     esp, 0Ch
.text:00403FB0                 retn
.text:00403FB1 ; ---------------------------------------------------------------------------
.text:00403FB1
.text:00403FB1 loc_403FB1:                             ; CODE XREF: .text:00403F66↑j
.text:00403FB1                 mov     edx, offset dword_407170
.text:00403FB6                 jmp     short loc_403F68
.text:00403FB6 ; ---------------------------------------------------------------------------
.text:00403FB8                 align 10h
.text:00403FC0                 mov     eax, [esp+4]
.text:00403FC4                 test    eax, eax
.text:00403FC6                 jz      short loc_403FD0
.text:00403FC8
.text:00403FC8 loc_403FC8:                             ; CODE XREF: .text:00403FD5↓j
.text:00403FC8                 mov     eax, [eax]
.text:00403FCA                 retn
.text:00403FCA ; ---------------------------------------------------------------------------
.text:00403FCB                 align 10h
.text:00403FD0
.text:00403FD0 loc_403FD0:                             ; CODE XREF: .text:00403FC6↑j
.text:00403FD0                 mov     eax, offset dword_407170
.text:00403FD5                 jmp     short loc_403FC8
.text:00403FD5 ; ---------------------------------------------------------------------------
.text:00403FD7                 align 10h
.text:00403FE0                 mov     edx, [esp+4]
.text:00403FE4                 test    edx, edx
.text:00403FE6                 jz      short loc_403FF0
.text:00403FE8
.text:00403FE8 loc_403FE8:                             ; CODE XREF: .text:00403FF5↓j
.text:00403FE8                 mov     ecx, [esp+8]
.text:00403FEC                 mov     [edx], ecx
.text:00403FEE                 retn
.text:00403FEE ; ---------------------------------------------------------------------------
.text:00403FEF                 align 10h
.text:00403FF0
.text:00403FF0 loc_403FF0:                             ; CODE XREF: .text:00403FE6↑j
.text:00403FF0                 mov     edx, offset dword_407170
.text:00403FF5                 jmp     short loc_403FE8
.text:00403FF5 ; ---------------------------------------------------------------------------
.text:00403FF7                 align 10h
.text:00404000                 sub     esp, 8
.text:00404003                 mov     eax, [esp+0Ch]
.text:00404007                 movzx   ecx, byte ptr [esp+10h]
.text:0040400C                 mov     [esp], ebx
.text:0040400F                 mov     ebx, [esp+14h]
.text:00404013                 mov     [esp+4], esi
.text:00404017                 mov     dl, cl
.text:00404019                 shr     dl, 5
.text:0040401C                 movzx   edx, dl
.text:0040401F                 shl     edx, 2
.text:00404022                 test    eax, eax
.text:00404024                 lea     esi, [edx+eax+4]
.text:00404028                 jz      short loc_404050
.text:0040402A
.text:0040402A loc_40402A:                             ; CODE XREF: .text:00404056↓j
.text:0040402A                 mov     edx, [esi]
.text:0040402C                 and     ecx, 1Fh
.text:0040402F                 and     ebx, 1
.text:00404032                 mov     eax, edx
.text:00404034                 shr     eax, cl
.text:00404036                 and     eax, 1
.text:00404039                 xor     ebx, eax
.text:0040403B                 shl     ebx, cl
.text:0040403D                 xor     edx, ebx
.text:0040403F                 mov     [esi], edx
.text:00404041                 mov     ebx, [esp]
.text:00404044                 mov     esi, [esp+4]
.text:00404048                 add     esp, 8
.text:0040404B                 retn
.text:0040404B ; ---------------------------------------------------------------------------
.text:0040404C                 align 10h
.text:00404050
.text:00404050 loc_404050:                             ; CODE XREF: .text:00404028↑j
.text:00404050                 lea     esi, dword_407174[edx]
.text:00404056                 jmp     short loc_40402A
.text:00404056 ; ---------------------------------------------------------------------------
.text:00404058                 align 10h
.text:00404060                 sub     esp, 2Ch
.text:00404063                 mov     [esp+24h], ebx
.text:00404067                 mov     ebx, [esp+40h]
.text:0040406B                 mov     [esp+28h], esi
.text:0040406F                 test    ebx, ebx
.text:00404071                 jz      short loc_4040C0
.text:00404073
.text:00404073 loc_404073:                             ; CODE XREF: .text:004040C5↓j
.text:00404073                 call    _errno
.text:00404078                 mov     esi, [eax]
.text:0040407A                 mov     [esp+14h], ebx
.text:0040407E                 mov     edx, [ebx]
.text:00404080                 mov     ecx, [esp+38h]
.text:00404084                 mov     ebx, [esp+3Ch]
.text:00404088                 mov     [esp+10h], edx
.text:0040408C                 mov     edx, [esp+34h]
.text:00404090                 mov     [esp+0Ch], ebx
.text:00404094                 mov     [esp+8], ecx
.text:00404098                 mov     [esp+4], edx
.text:0040409C                 mov     edx, [esp+30h]
.text:004040A0                 mov     [esp], edx
.text:004040A3                 call    sub_4034E0
.text:004040A8                 mov     ebx, eax
.text:004040AA                 call    _errno
.text:004040AF                 mov     [eax], esi
.text:004040B1                 mov     esi, [esp+28h]
.text:004040B5                 mov     eax, ebx
.text:004040B7                 mov     ebx, [esp+24h]
.text:004040BB                 add     esp, 2Ch
.text:004040BE                 retn
.text:004040BE ; ---------------------------------------------------------------------------
.text:004040BF                 align 10h
.text:004040C0
.text:004040C0 loc_4040C0:                             ; CODE XREF: .text:00404071↑j
.text:004040C0                 mov     ebx, offset dword_407170
.text:004040C5                 jmp     short loc_404073
.text:004040C5 ; ---------------------------------------------------------------------------
.text:004040C7                 align 10h
.text:004040D0                 push    ebp
.text:004040D1                 push    edi
.text:004040D2                 push    esi
.text:004040D3                 push    ebx
.text:004040D4                 sub     esp, 2Ch
.text:004040D7                 mov     ebp, [esp+48h]
.text:004040DB                 call    _errno
.text:004040E0                 mov     edx, [eax]
.text:004040E2                 test    ebp, ebp
.text:004040E4                 mov     ebx, ebp
.text:004040E6                 mov     [esp+28h], edx
.text:004040EA                 jz      loc_4041A0
.text:004040F0
.text:004040F0 loc_4040F0:                             ; CODE XREF: .text:004041A5↓j
.text:004040F0                 call    _errno
.text:004040F5                 mov     edi, [eax]
.text:004040F7                 mov     esi, ebp
.text:004040F9                 mov     [esp+14h], ebx
.text:004040FD                 mov     ecx, [ebx]
.text:004040FF                 mov     dword ptr [esp], 0
.text:00404106                 mov     edx, [esp+44h]
.text:0040410A                 mov     dword ptr [esp+4], 0
.text:00404112                 mov     eax, [esp+40h]
.text:00404116                 mov     [esp+10h], ecx
.text:0040411A                 mov     [esp+0Ch], edx
.text:0040411E                 mov     [esp+8], eax
.text:00404122                 call    sub_4034E0
.text:00404127                 mov     ebx, eax
.text:00404129                 call    _errno
.text:0040412E                 mov     [eax], edi
.text:00404130                 lea     edi, [ebx+1]
.text:00404133                 mov     [esp], edi
.text:00404136                 call    sub_4048E0
.text:0040413B                 mov     [esp+24h], eax
.text:0040413F                 test    ebp, ebp
.text:00404141                 jz      short loc_404192
.text:00404143
.text:00404143 loc_404143:                             ; CODE XREF: .text:00404197↓j
.text:00404143                 call    _errno
.text:00404148                 mov     ebp, [eax]
.text:0040414A                 mov     [esp+14h], esi
.text:0040414E                 mov     ecx, [esi]
.text:00404150                 mov     [esp+4], edi
.text:00404154                 mov     edx, [esp+44h]
.text:00404158                 mov     esi, [esp+24h]
.text:0040415C                 mov     [esp+10h], ecx
.text:00404160                 mov     eax, [esp+40h]
.text:00404164                 mov     [esp+0Ch], edx
.text:00404168                 mov     [esp], esi
.text:0040416B                 mov     [esp+8], eax
.text:0040416F                 call    sub_4034E0
.text:00404174                 call    _errno
.text:00404179                 mov     [eax], ebp
.text:0040417B                 call    _errno
.text:00404180                 mov     ebx, [esp+28h]
.text:00404184                 mov     [eax], ebx
.text:00404186                 mov     eax, [esp+24h]
.text:0040418A                 add     esp, 2Ch
.text:0040418D                 pop     ebx
.text:0040418E                 pop     esi
.text:0040418F                 pop     edi
.text:00404190                 pop     ebp
.text:00404191                 retn
.text:00404192 ; ---------------------------------------------------------------------------
.text:00404192
.text:00404192 loc_404192:                             ; CODE XREF: .text:00404141↑j
.text:00404192                 mov     esi, offset dword_407170
.text:00404197                 jmp     short loc_404143
.text:00404197 ; ---------------------------------------------------------------------------
.text:00404199                 align 10h
.text:004041A0
.text:004041A0 loc_4041A0:                             ; CODE XREF: .text:004040EA↑j
.text:004041A0                 mov     ebx, offset dword_407170
.text:004041A5                 jmp     loc_4040F0
.text:004041A5 ; ---------------------------------------------------------------------------
.text:004041AA                 align 10h
.text:004041B0                 sub     esp, 1Ch
.text:004041B3                 mov     edx, [esp+24h]
.text:004041B7                 mov     dword ptr [esp+0Ch], offset dword_407170
.text:004041BF                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:004041C7                 mov     [esp+4], edx
.text:004041CB                 mov     edx, [esp+20h]
.text:004041CF                 mov     [esp], edx
.text:004041D2                 call    sub_404620
.text:004041D7                 add     esp, 1Ch
.text:004041DA                 retn
.text:004041DA ; ---------------------------------------------------------------------------
.text:004041DB                 align 10h
.text:004041E0                 sub     esp, 1Ch
.text:004041E3                 mov     edx, [esp+20h]
.text:004041E7                 mov     dword ptr [esp+0Ch], offset dword_407170
.text:004041EF                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:004041F7                 mov     [esp+4], edx
.text:004041FB                 mov     dword ptr [esp], 0
.text:00404202                 call    sub_404620
.text:00404207                 add     esp, 1Ch
.text:0040420A                 retn
.text:0040420A ; ---------------------------------------------------------------------------
.text:0040420B                 align 10h
.text:00404210
.text:00404210 ; =============== S U B R O U T I N E =======================================
.text:00404210
.text:00404210
.text:00404210 ; int __cdecl sub_404210(int, int, char *)
.text:00404210 sub_404210      proc near               ; CODE XREF: .text:004033CA↑p
.text:00404210                                         ; sub_4033E0+1A↑p
.text:00404210
.text:00404210 var_BC          = dword ptr -0BCh
.text:00404210 var_B8          = dword ptr -0B8h
.text:00404210 var_B4          = dword ptr -0B4h
.text:00404210 var_B0          = dword ptr -0B0h
.text:00404210 var_AC          = dword ptr -0ACh
.text:00404210 var_A8          = dword ptr -0A8h
.text:00404210 var_A4          = dword ptr -0A4h
.text:00404210 var_A0          = dword ptr -0A0h
.text:00404210 var_9C          = dword ptr -9Ch
.text:00404210 var_98          = dword ptr -98h
.text:00404210 var_94          = dword ptr -94h
.text:00404210 var_90          = dword ptr -90h
.text:00404210 var_8C          = dword ptr -8Ch
.text:00404210 var_7C          = dword ptr -7Ch
.text:00404210 var_78          = dword ptr -78h
.text:00404210 var_74          = dword ptr -74h
.text:00404210 var_70          = dword ptr -70h
.text:00404210 var_6C          = dword ptr -6Ch
.text:00404210 var_68          = dword ptr -68h
.text:00404210 var_64          = dword ptr -64h
.text:00404210 var_60          = dword ptr -60h
.text:00404210 var_5C          = dword ptr -5Ch
.text:00404210 var_4C          = dword ptr -4Ch
.text:00404210 var_48          = dword ptr -48h
.text:00404210 var_44          = dword ptr -44h
.text:00404210 var_40          = dword ptr -40h
.text:00404210 var_3C          = dword ptr -3Ch
.text:00404210 var_38          = dword ptr -38h
.text:00404210 var_34          = dword ptr -34h
.text:00404210 var_30          = dword ptr -30h
.text:00404210 var_2C          = dword ptr -2Ch
.text:00404210 arg_0           = dword ptr  4
.text:00404210 arg_4           = dword ptr  8
.text:00404210 arg_8           = dword ptr  0Ch
.text:00404210
.text:00404210                 push    ebp
.text:00404211                 xor     eax, eax
.text:00404213                 mov     ecx, 8
.text:00404218                 push    edi
.text:00404219                 push    esi
.text:0040421A                 push    ebx
.text:0040421B                 sub     esp, 0ACh
.text:00404221                 mov     ebp, [esp+0BCh+arg_4]
.text:00404228                 cld
.text:00404229                 lea     edi, [esp+0BCh+var_A8]
.text:0040422D                 mov     [esp+0BCh+var_AC], ebp
.text:00404231                 rep stosd
.text:00404233                 mov     eax, [esp+0BCh+var_8C]
.text:00404237                 mov     edi, [esp+0BCh+var_AC]
.text:0040423B                 mov     esi, [esp+0BCh+var_A8]
.text:0040423F                 mov     [esp+0BCh+var_5C], eax
.text:00404243                 mov     ebp, [esp+0BCh+var_A4]
.text:00404247                 mov     eax, [esp+0BCh+var_AC]
.text:0040424B                 mov     [esp+0BCh+var_7C], edi
.text:0040424F                 mov     ecx, [esp+0BCh+var_94]
.text:00404253                 mov     edi, [esp+0BCh+var_A0]
.text:00404257                 mov     [esp+0BCh+var_78], esi
.text:0040425B                 mov     edx, [esp+0BCh+var_90]
.text:0040425F                 mov     esi, [esp+0BCh+var_9C]
.text:00404263                 mov     [esp+0BCh+var_4C], eax
.text:00404267                 mov     ebx, [esp+0BCh+var_98]
.text:0040426B                 mov     eax, [esp+0BCh+var_A8]
.text:0040426F                 mov     [esp+0BCh+var_74], ebp
.text:00404273                 mov     [esp+0BCh+var_70], edi
.text:00404277                 mov     [esp+0BCh+var_6C], esi
.text:0040427B                 mov     [esp+0BCh+var_68], ebx
.text:0040427F                 mov     [esp+0BCh+var_64], ecx
.text:00404283                 mov     [esp+0BCh+var_60], edx
.text:00404287                 mov     [esp+0BCh+var_48], eax
.text:0040428B                 mov     [esp+0BCh+var_44], ebp
.text:0040428F                 mov     [esp+0BCh+var_40], edi
.text:00404293                 mov     [esp+0BCh+var_3C], esi
.text:0040429A                 mov     [esp+0BCh+var_38], ebx
.text:004042A1                 mov     ebx, [esp+0BCh+var_8C]
.text:004042A5                 mov     [esp+0BCh+var_30], edx
.text:004042AC                 mov     edx, [esp+0BCh+arg_8]
.text:004042B3                 mov     [esp+0BCh+var_34], ecx
.text:004042BA                 lea     ecx, [esp+0BCh+var_4C]
.text:004042BE                 mov     [esp+0BCh+var_B8], edx ; char *
.text:004042C2                 mov     edx, [esp+0BCh+arg_0]
.text:004042C9                 mov     [esp+0BCh+var_2C], ebx
.text:004042D0                 mov     [esp+0BCh+var_B0], ecx ; int
.text:004042D4                 mov     [esp+0BCh+var_B4], 0FFFFFFFFh ; int
.text:004042DC                 mov     [esp+0BCh+var_BC], edx ; int
.text:004042DF                 call    sub_404620
.text:004042E4                 add     esp, 0ACh
.text:004042EA                 pop     ebx
.text:004042EB                 pop     esi
.text:004042EC                 pop     edi
.text:004042ED                 pop     ebp
.text:004042EE                 retn
.text:004042EE sub_404210      endp
.text:004042EE
.text:004042EE ; ---------------------------------------------------------------------------
.text:004042EF                 align 10h
.text:004042F0                 push    ebp
.text:004042F1                 xor     eax, eax
.text:004042F3                 mov     ecx, 8
.text:004042F8                 push    edi
.text:004042F9                 push    esi
.text:004042FA                 push    ebx
.text:004042FB                 sub     esp, 0ACh
.text:00404301                 mov     edx, [esp+0C4h]
.text:00404308                 cld
.text:00404309                 lea     edi, [esp+14h]
.text:0040430D                 mov     [esp+10h], edx
.text:00404311                 rep stosd
.text:00404313                 mov     eax, [esp+30h]
.text:00404317                 mov     ebp, [esp+10h]
.text:0040431B                 mov     edi, [esp+14h]
.text:0040431F                 mov     [esp+60h], eax
.text:00404323                 mov     esi, [esp+20h]
.text:00404327                 mov     eax, [esp+10h]
.text:0040432B                 mov     [esp+40h], ebp
.text:0040432F                 mov     ecx, [esp+28h]
.text:00404333                 mov     ebp, [esp+18h]
.text:00404337                 mov     [esp+44h], edi
.text:0040433B                 mov     edx, [esp+2Ch]
.text:0040433F                 mov     edi, [esp+1Ch]
.text:00404343                 mov     [esp+70h], eax
.text:00404347                 mov     ebx, [esp+24h]
.text:0040434B                 mov     eax, [esp+14h]
.text:0040434F                 mov     [esp+48h], ebp
.text:00404353                 mov     [esp+4Ch], edi
.text:00404357                 mov     [esp+50h], esi
.text:0040435B                 mov     [esp+54h], ebx
.text:0040435F                 mov     [esp+58h], ecx
.text:00404363                 mov     [esp+5Ch], edx
.text:00404367                 mov     [esp+74h], eax
.text:0040436B                 mov     [esp+78h], ebp
.text:0040436F                 mov     [esp+7Ch], edi
.text:00404373                 mov     [esp+80h], esi
.text:0040437A                 mov     [esp+84h], ebx
.text:00404381                 mov     esi, [esp+30h]
.text:00404385                 lea     ebx, [esp+70h]
.text:00404389                 mov     [esp+8Ch], edx
.text:00404390                 mov     edx, [esp+0C8h]
.text:00404397                 mov     [esp+88h], ecx
.text:0040439E                 mov     ecx, [esp+0CCh]
.text:004043A5                 mov     [esp+4], edx
.text:004043A9                 mov     edx, [esp+0C0h]
.text:004043B0                 mov     [esp+90h], esi
.text:004043B7                 mov     [esp+0Ch], ebx
.text:004043BB                 mov     [esp+8], ecx
.text:004043BF                 mov     [esp], edx
.text:004043C2                 call    sub_404620
.text:004043C7                 add     esp, 0ACh
.text:004043CD                 pop     ebx
.text:004043CE                 pop     esi
.text:004043CF                 pop     edi
.text:004043D0                 pop     ebp
.text:004043D1                 retn
.text:004043D1 ; ---------------------------------------------------------------------------
.text:004043D2                 align 10h
.text:004043E0                 push    ebp
.text:004043E1                 xor     eax, eax
.text:004043E3                 mov     ecx, 8
.text:004043E8                 push    edi
.text:004043E9                 push    esi
.text:004043EA                 push    ebx
.text:004043EB                 sub     esp, 0ACh
.text:004043F1                 mov     edi, [esp+0C0h]
.text:004043F8                 cld
.text:004043F9                 mov     [esp+10h], edi
.text:004043FD                 lea     edi, [esp+14h]
.text:00404401                 rep stosd
.text:00404403                 mov     eax, [esp+30h]
.text:00404407                 mov     esi, [esp+10h]
.text:0040440B                 mov     ebx, [esp+14h]
.text:0040440F                 mov     [esp+60h], eax
.text:00404413                 mov     ebp, [esp+18h]
.text:00404417                 mov     eax, [esp+10h]
.text:0040441B                 mov     [esp+40h], esi
.text:0040441F                 mov     edi, [esp+1Ch]
.text:00404423                 mov     esi, [esp+20h]
.text:00404427                 mov     [esp+44h], ebx
.text:0040442B                 mov     ecx, [esp+28h]
.text:0040442F                 mov     edx, [esp+2Ch]
.text:00404433                 mov     [esp+70h], eax
.text:00404437                 mov     ebx, [esp+24h]
.text:0040443B                 mov     eax, [esp+14h]
.text:0040443F                 mov     [esp+48h], ebp
.text:00404443                 mov     [esp+4Ch], edi
.text:00404447                 mov     [esp+50h], esi
.text:0040444B                 mov     [esp+54h], ebx
.text:0040444F                 mov     [esp+58h], ecx
.text:00404453                 mov     [esp+5Ch], edx
.text:00404457                 mov     [esp+74h], eax
.text:0040445B                 mov     [esp+78h], ebp
.text:0040445F                 mov     [esp+7Ch], edi
.text:00404463                 mov     [esp+80h], esi
.text:0040446A                 mov     [esp+84h], ebx
.text:00404471                 mov     [esp+8Ch], edx
.text:00404478                 lea     edx, [esp+70h]
.text:0040447C                 mov     [esp+88h], ecx
.text:00404483                 mov     ecx, [esp+30h]
.text:00404487                 mov     [esp+0Ch], edx
.text:0040448B                 mov     edx, [esp+0C4h]
.text:00404492                 mov     [esp+90h], ecx
.text:00404499                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:004044A1                 mov     [esp+4], edx
.text:004044A5                 mov     dword ptr [esp], 0
.text:004044AC                 call    sub_404620
.text:004044B1                 add     esp, 0ACh
.text:004044B7                 pop     ebx
.text:004044B8                 pop     esi
.text:004044B9                 pop     edi
.text:004044BA                 pop     ebp
.text:004044BB                 retn
.text:004044BB ; ---------------------------------------------------------------------------
.text:004044BC                 align 10h
.text:004044C0                 push    edi
.text:004044C1                 push    esi
.text:004044C2                 push    ebx
.text:004044C3                 sub     esp, 40h
.text:004044C6                 mov     edx, ds:dword_40717C
.text:004044CC                 mov     ebx, ds:dword_407170
.text:004044D2                 mov     esi, ds:dword_407178
.text:004044D8                 mov     edi, ds:dword_407174
.text:004044DE                 mov     [esp+1Ch], edx
.text:004044E2                 mov     ecx, ds:dword_407180
.text:004044E8                 mov     edx, ds:dword_407190
.text:004044EE                 mov     [esp+10h], ebx
.text:004044F2                 mov     ebx, ds:dword_407184
.text:004044F8                 mov     [esp+30h], edx
.text:004044FC                 movzx   edx, byte ptr [esp+54h]
.text:00404501                 mov     [esp+18h], esi
.text:00404505                 mov     esi, ds:dword_40718C
.text:0040450B                 mov     [esp+14h], edi
.text:0040450F                 mov     edi, ds:dword_407188
.text:00404515                 mov     [esp+20h], ecx
.text:00404519                 mov     cl, dl
.text:0040451B                 shr     cl, 5
.text:0040451E                 mov     [esp+24h], ebx
.text:00404522                 movzx   ebx, cl
.text:00404525                 mov     [esp+2Ch], esi
.text:00404529                 lea     esi, [esp+10h]
.text:0040452D                 mov     [esp+28h], edi
.text:00404531                 lea     edi, [esi+ebx*4]
.text:00404534                 mov     ebx, edx
.text:00404536                 mov     edx, [edi+4]
.text:00404539                 and     ebx, 1Fh
.text:0040453C                 mov     cl, bl
.text:0040453E                 mov     eax, edx
.text:00404540                 shr     eax, cl
.text:00404542                 and     eax, 1
.text:00404545                 xor     eax, 1
.text:00404548                 shl     eax, cl
.text:0040454A                 xor     edx, eax
.text:0040454C                 mov     [edi+4], edx
.text:0040454F                 mov     edx, [esp+50h]
.text:00404553                 mov     [esp+0Ch], esi
.text:00404557                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:0040455F                 mov     [esp+4], edx
.text:00404563                 mov     dword ptr [esp], 0
.text:0040456A                 call    sub_404620
.text:0040456F                 add     esp, 40h
.text:00404572                 pop     ebx
.text:00404573                 pop     esi
.text:00404574                 pop     edi
.text:00404575                 retn
.text:00404575 ; ---------------------------------------------------------------------------
.text:00404576                 align 10h
.text:00404580
.text:00404580 ; =============== S U B R O U T I N E =======================================
.text:00404580
.text:00404580
.text:00404580 ; int __cdecl sub_404580(char *)
.text:00404580 sub_404580      proc near               ; CODE XREF: sub_4032D0+64↑p
.text:00404580
.text:00404580 var_4C          = dword ptr -4Ch
.text:00404580 var_48          = dword ptr -48h
.text:00404580 var_44          = dword ptr -44h
.text:00404580 var_40          = dword ptr -40h
.text:00404580 var_3C          = dword ptr -3Ch
.text:00404580 var_38          = dword ptr -38h
.text:00404580 var_34          = dword ptr -34h
.text:00404580 var_30          = dword ptr -30h
.text:00404580 var_2C          = dword ptr -2Ch
.text:00404580 var_28          = dword ptr -28h
.text:00404580 var_24          = dword ptr -24h
.text:00404580 var_20          = dword ptr -20h
.text:00404580 var_1C          = dword ptr -1Ch
.text:00404580 arg_0           = dword ptr  4
.text:00404580
.text:00404580                 sub     esp, 4Ch
.text:00404583                 mov     ecx, ds:dword_407170
.text:00404589                 mov     [esp+4Ch+var_44], 0FFFFFFFFh ; int
.text:00404591                 mov     edx, ds:dword_407174
.text:00404597                 mov     [esp+4Ch+var_4C], 0 ; int
.text:0040459E                 mov     [esp+4Ch+var_3C], ecx
.text:004045A2                 mov     ecx, ds:dword_40717C
.text:004045A8                 mov     [esp+4Ch+var_38], edx
.text:004045AC                 mov     edx, ds:dword_407178
.text:004045B2                 mov     [esp+4Ch+var_30], ecx
.text:004045B6                 mov     ecx, ds:dword_407180
.text:004045BC                 mov     eax, edx
.text:004045BE                 shr     eax, 1Ah
.text:004045C1                 and     eax, 1
.text:004045C4                 xor     eax, 1
.text:004045C7                 mov     [esp+4Ch+var_2C], ecx
.text:004045CB                 shl     eax, 1Ah
.text:004045CE                 mov     ecx, ds:dword_407184
.text:004045D4                 xor     edx, eax
.text:004045D6                 mov     [esp+4Ch+var_34], edx
.text:004045DA                 mov     edx, [esp+4Ch+arg_0]
.text:004045DE                 mov     [esp+4Ch+var_28], ecx
.text:004045E2                 mov     ecx, ds:dword_407188
.text:004045E8                 mov     [esp+4Ch+var_48], edx ; char *
.text:004045EC                 mov     [esp+4Ch+var_24], ecx
.text:004045F0                 mov     ecx, ds:dword_40718C
.text:004045F6                 mov     [esp+4Ch+var_20], ecx
.text:004045FA                 mov     ecx, ds:dword_407190
.text:00404600                 mov     [esp+4Ch+var_1C], ecx
.text:00404604                 lea     ecx, [esp+4Ch+var_3C]
.text:00404608                 mov     [esp+4Ch+var_40], ecx ; int
.text:0040460C                 call    sub_404620
.text:00404611                 add     esp, 4Ch
.text:00404614                 retn
.text:00404614 sub_404580      endp
.text:00404614
.text:00404614 ; ---------------------------------------------------------------------------
.text:00404615                 align 10h
.text:00404620
.text:00404620 ; =============== S U B R O U T I N E =======================================
.text:00404620
.text:00404620
.text:00404620 ; int __cdecl sub_404620(int, char *, int, int)
.text:00404620 sub_404620      proc near               ; CODE XREF: .text:004041D2↑p
.text:00404620                                         ; .text:00404202↑p ...
.text:00404620
.text:00404620 Block           = dword ptr -2Ch
.text:00404620 var_28          = dword ptr -28h
.text:00404620 Str             = dword ptr -24h
.text:00404620 var_20          = dword ptr -20h
.text:00404620 var_1C          = dword ptr -1Ch
.text:00404620 var_18          = dword ptr -18h
.text:00404620 var_14          = dword ptr -14h
.text:00404620 arg_0           = dword ptr  4
.text:00404620 arg_4           = dword ptr  8
.text:00404620 arg_8           = dword ptr  0Ch
.text:00404620 arg_C           = dword ptr  10h
.text:00404620
.text:00404620                 push    ebp
.text:00404621                 push    edi
.text:00404622                 push    esi
.text:00404623                 push    ebx
.text:00404624                 sub     esp, 1Ch
.text:00404627                 call    _errno
.text:0040462C                 mov     edx, [eax]
.text:0040462E                 mov     eax, [esp+2Ch+arg_0]
.text:00404632                 mov     [esp+2Ch+var_14], edx
.text:00404636                 test    eax, eax
.text:00404638                 js      loc_4047DA
.text:0040463E                 mov     eax, [esp+2Ch+arg_0]
.text:00404642                 cmp     dword_406040, eax
.text:00404648                 ja      short loc_4046C0
.text:0040464A                 mov     esi, eax
.text:0040464C                 inc     esi
.text:0040464D                 cmp     esi, 1FFFFFFFh
.text:00404653                 ja      loc_4047DF
.text:00404659                 mov     ebx, off_40604C
.text:0040465F                 cmp     ebx, offset dword_406044
.text:00404665                 jz      loc_4047B1
.text:0040466B
.text:0040466B loc_40466B:                             ; CODE XREF: sub_404620+1B5↓j
.text:0040466B                 mov     [esp+2Ch+Block], ebx ; void *
.text:0040466E                 lea     ecx, ds:0[esi*8]
.text:00404675                 mov     ebp, esi
.text:00404677                 mov     [esp+2Ch+var_28], ecx ; size_t
.text:0040467B                 call    sub_404970
.text:00404680                 mov     off_40604C, eax
.text:00404685                 mov     ebx, dword_406040
.text:0040468B                 sub     ebp, ebx
.text:0040468D                 lea     edi, [eax+ebx*8]
.text:00404690                 lea     eax, ds:0[ebp*8]
.text:00404697                 cmp     eax, 7
.text:0040469A                 jbe     short loc_4046B0
.text:0040469C                 test    edi, 4
.text:004046A2                 jz      short loc_4046B0
.text:004046A4                 mov     dword ptr [edi], 0
.text:004046AA                 sub     eax, 4
.text:004046AD                 add     edi, 4
.text:004046B0
.text:004046B0 loc_4046B0:                             ; CODE XREF: sub_404620+7A↑j
.text:004046B0                                         ; sub_404620+82↑j
.text:004046B0                 cld
.text:004046B1                 mov     ecx, eax
.text:004046B3                 shr     ecx, 2
.text:004046B6                 xor     eax, eax
.text:004046B8                 rep stosd
.text:004046BA                 mov     dword_406040, esi
.text:004046C0
.text:004046C0 loc_4046C0:                             ; CODE XREF: sub_404620+28↑j
.text:004046C0                 mov     esi, off_40604C
.text:004046C6                 mov     eax, [esp+2Ch+arg_0]
.text:004046CA                 mov     ebp, [esi+eax*8]
.text:004046CD                 mov     edi, [esi+eax*8+4]
.text:004046D1                 mov     esi, [esp+2Ch+arg_C]
.text:004046D5                 test    esi, esi
.text:004046D7                 jz      loc_4047A7
.text:004046DD
.text:004046DD loc_4046DD:                             ; CODE XREF: sub_404620+18C↓j
.text:004046DD                 call    _errno
.text:004046E2                 mov     ebx, [eax]
.text:004046E4                 mov     [esp+2Ch+var_18], esi ; int
.text:004046E8                 mov     ecx, [esi]
.text:004046EA                 mov     [esp+2Ch+Block], edi ; int
.text:004046ED                 mov     edx, [esp+2Ch+arg_8]
.text:004046F1                 mov     [esp+2Ch+var_28], ebp ; int
.text:004046F5                 mov     [esp+2Ch+var_1C], ecx ; int
.text:004046F9                 mov     ecx, [esp+2Ch+arg_4]
.text:004046FD                 mov     [esp+2Ch+var_20], edx ; int
.text:00404701                 mov     [esp+2Ch+Str], ecx ; Str
.text:00404705                 call    sub_4034E0
.text:0040470A                 mov     esi, eax
.text:0040470C                 call    _errno
.text:00404711                 mov     [eax], ebx
.text:00404713                 cmp     ebp, esi
.text:00404715                 ja      short loc_40478B
.text:00404717                 lea     ebp, [esi+1]
.text:0040471A                 mov     ebx, off_40604C
.text:00404720                 cmp     edi, offset unk_407070
.text:00404726                 mov     esi, [esp+2Ch+arg_0]
.text:0040472A                 mov     [ebx+esi*8], ebp
.text:0040472D                 jz      short loc_40473D
.text:0040472F                 mov     [esp+2Ch+Block], edi ; Block
.text:00404732                 call    free
.text:00404737                 mov     ebx, off_40604C
.text:0040473D
.text:0040473D loc_40473D:                             ; CODE XREF: sub_404620+10D↑j
.text:0040473D                 mov     [esp+2Ch+Block], ebp ; size_t
.text:00404740                 call    sub_4048E0
.text:00404745                 mov     esi, [esp+2Ch+arg_C]
.text:00404749                 mov     edi, eax
.text:0040474B                 mov     eax, [esp+2Ch+arg_0]
.text:0040474F                 test    esi, esi
.text:00404751                 mov     [ebx+eax*8+4], edi
.text:00404755                 jz      short loc_4047A0
.text:00404757
.text:00404757 loc_404757:                             ; CODE XREF: sub_404620+185↓j
.text:00404757                 call    _errno
.text:0040475C                 mov     ebx, [eax]
.text:0040475E                 mov     [esp+2Ch+var_18], esi ; int
.text:00404762                 mov     ecx, [esi]
.text:00404764                 mov     [esp+2Ch+Block], edi ; int
.text:00404767                 mov     edx, [esp+2Ch+arg_8]
.text:0040476B                 mov     [esp+2Ch+var_28], ebp ; int
.text:0040476F                 mov     [esp+2Ch+var_1C], ecx ; int
.text:00404773                 mov     ecx, [esp+2Ch+arg_4]
.text:00404777                 mov     [esp+2Ch+var_20], edx ; int
.text:0040477B                 mov     [esp+2Ch+Str], ecx ; Str
.text:0040477F                 call    sub_4034E0
.text:00404784                 call    _errno
.text:00404789                 mov     [eax], ebx
.text:0040478B
.text:0040478B loc_40478B:                             ; CODE XREF: sub_404620+F5↑j
.text:0040478B                 call    _errno
.text:00404790                 mov     ebp, [esp+2Ch+var_14]
.text:00404794                 mov     [eax], ebp
.text:00404796                 add     esp, 1Ch
.text:00404799                 mov     eax, edi
.text:0040479B                 pop     ebx
.text:0040479C                 pop     esi
.text:0040479D                 pop     edi
.text:0040479E                 pop     ebp
.text:0040479F                 retn
.text:004047A0 ; ---------------------------------------------------------------------------
.text:004047A0
.text:004047A0 loc_4047A0:                             ; CODE XREF: sub_404620+135↑j
.text:004047A0                 mov     esi, offset dword_407170
.text:004047A5                 jmp     short loc_404757
.text:004047A7 ; ---------------------------------------------------------------------------
.text:004047A7
.text:004047A7 loc_4047A7:                             ; CODE XREF: sub_404620+B7↑j
.text:004047A7                 mov     esi, offset dword_407170
.text:004047AC                 jmp     loc_4046DD
.text:004047B1 ; ---------------------------------------------------------------------------
.text:004047B1
.text:004047B1 loc_4047B1:                             ; CODE XREF: sub_404620+45↑j
.text:004047B1                 mov     [esp+2Ch+Block], 8 ; size_t
.text:004047B8                 call    sub_4048E0
.text:004047BD                 mov     off_40604C, eax
.text:004047C2                 mov     edi, dword_406044
.text:004047C8                 mov     ebx, eax
.text:004047CA                 mov     ecx, off_406048
.text:004047D0                 mov     [eax], edi
.text:004047D2                 mov     [eax+4], ecx
.text:004047D5                 jmp     loc_40466B
.text:004047DA ; ---------------------------------------------------------------------------
.text:004047DA
.text:004047DA loc_4047DA:                             ; CODE XREF: sub_404620+18↑j
.text:004047DA                 call    abort
.text:004047DF ; ---------------------------------------------------------------------------
.text:004047DF
.text:004047DF loc_4047DF:                             ; CODE XREF: sub_404620+33↑j
.text:004047DF                 call    sub_404B90
.text:004047DF sub_404620      endp
.text:004047DF
.text:004047DF ; ---------------------------------------------------------------------------
.text:004047E4                 align 10h
.text:004047F0
.text:004047F0 ; =============== S U B R O U T I N E =======================================
.text:004047F0
.text:004047F0
.text:004047F0 sub_4047F0      proc near               ; CODE XREF: sub_403410+E↑p
.text:004047F0
.text:004047F0 arg_0           = dword ptr  4
.text:004047F0
.text:004047F0                 mov     ecx, [esp+arg_0]
.text:004047F4                 movzx   eax, byte ptr [ecx]
.text:004047F7                 test    al, al
.text:004047F9                 jz      short loc_404801
.text:004047FB                 cmp     byte ptr [ecx+1], 3Ah ; ':'
.text:004047FF                 jz      short loc_404847
.text:00404801
.text:00404801 loc_404801:                             ; CODE XREF: sub_4047F0+9↑j
.text:00404801                                         ; sub_4047F0+5D↓j
.text:00404801                 test    al, al
.text:00404803                 mov     edx, ecx
.text:00404805                 jz      short loc_404820
.text:00404807                 movzx   eax, byte ptr [ecx]
.text:0040480A                 lea     esi, [esi+0]
.text:00404810
.text:00404810 loc_404810:                             ; CODE XREF: sub_4047F0+2E↓j
.text:00404810                 cmp     al, 2Fh ; '/'
.text:00404812                 jz      short loc_404823
.text:00404814                 cmp     al, 5Ch ; '\'
.text:00404816                 jz      short loc_404823
.text:00404818
.text:00404818 loc_404818:                             ; CODE XREF: sub_4047F0+45↓j
.text:00404818                 inc     edx
.text:00404819                 movzx   eax, byte ptr [edx]
.text:0040481C                 test    al, al
.text:0040481E                 jnz     short loc_404810
.text:00404820
.text:00404820 loc_404820:                             ; CODE XREF: sub_4047F0+15↑j
.text:00404820                                         ; sub_4047F0+50↓j ...
.text:00404820                 mov     eax, ecx
.text:00404822                 retn
.text:00404823 ; ---------------------------------------------------------------------------
.text:00404823
.text:00404823 loc_404823:                             ; CODE XREF: sub_4047F0+22↑j
.text:00404823                                         ; sub_4047F0+26↑j ...
.text:00404823                 inc     edx
.text:00404824                 movzx   eax, byte ptr [edx]
.text:00404827                 cmp     al, 2Fh ; '/'
.text:00404829                 jz      short loc_404823
.text:0040482B                 cmp     al, 5Ch ; '\'
.text:0040482D                 jz      short loc_404823
.text:0040482F                 test    al, al
.text:00404831                 jz      short loc_404837
.text:00404833                 mov     ecx, edx
.text:00404835                 jmp     short loc_404818
.text:00404837 ; ---------------------------------------------------------------------------
.text:00404837
.text:00404837 loc_404837:                             ; CODE XREF: sub_4047F0+41↑j
.text:00404837                 movzx   eax, byte ptr [ecx]
.text:0040483A                 cmp     al, 2Fh ; '/'
.text:0040483C                 jz      short loc_404842
.text:0040483E                 cmp     al, 5Ch ; '\'
.text:00404840                 jnz     short loc_404820
.text:00404842
.text:00404842 loc_404842:                             ; CODE XREF: sub_4047F0+4C↑j
.text:00404842                 lea     ecx, [edx-1]
.text:00404845                 jmp     short loc_404820
.text:00404847 ; ---------------------------------------------------------------------------
.text:00404847
.text:00404847 loc_404847:                             ; CODE XREF: sub_4047F0+F↑j
.text:00404847                 add     ecx, 2
.text:0040484A                 movzx   eax, byte ptr [ecx]
.text:0040484D                 jmp     short loc_404801
.text:0040484D sub_4047F0      endp
.text:0040484D
.text:0040484D ; ---------------------------------------------------------------------------
.text:0040484F                 align 10h
.text:00404850
.text:00404850 ; =============== S U B R O U T I N E =======================================
.text:00404850
.text:00404850
.text:00404850 ; int __cdecl sub_404850(char *)
.text:00404850 sub_404850      proc near               ; CODE XREF: sub_403410+18↑p
.text:00404850
.text:00404850 Str             = dword ptr -0Ch
.text:00404850 arg_0           = dword ptr  4
.text:00404850
.text:00404850                 push    ebx
.text:00404851                 sub     esp, 8
.text:00404854                 mov     ebx, [esp+0Ch+arg_0]
.text:00404858                 mov     [esp+0Ch+Str], ebx ; Str
.text:0040485B                 call    strlen
.text:00404860                 cmp     eax, 1
.text:00404863                 jbe     short loc_404880
.text:00404865                 movzx   edx, byte ptr [eax+ebx-1]
.text:0040486A                 cmp     dl, 2Fh ; '/'
.text:0040486D                 jz      short loc_404885
.text:0040486F                 cmp     dl, 5Ch ; '\'
.text:00404872                 jz      short loc_404885
.text:00404874                 lea     esi, [esi+0]
.text:0040487A                 lea     edi, [edi+0]
.text:00404880
.text:00404880 loc_404880:                             ; CODE XREF: sub_404850+13↑j
.text:00404880                                         ; sub_404850+39↓j ...
.text:00404880                 add     esp, 8
.text:00404883                 pop     ebx
.text:00404884                 retn
.text:00404885 ; ---------------------------------------------------------------------------
.text:00404885
.text:00404885 loc_404885:                             ; CODE XREF: sub_404850+1D↑j
.text:00404885                                         ; sub_404850+22↑j ...
.text:00404885                 dec     eax
.text:00404886                 cmp     eax, 1
.text:00404889                 jbe     short loc_404880
.text:0040488B                 movzx   edx, byte ptr [eax+ebx-1]
.text:00404890                 cmp     dl, 2Fh ; '/'
.text:00404893                 jz      short loc_404885
.text:00404895                 cmp     dl, 5Ch ; '\'
.text:00404898                 jz      short loc_404885
.text:0040489A                 jmp     short loc_404880
.text:0040489A sub_404850      endp
.text:0040489A
.text:0040489A ; ---------------------------------------------------------------------------
.text:0040489C                 align 10h
.text:004048A0                 sub     esp, 0Ch
.text:004048A3                 xor     edx, edx
.text:004048A5                 mov     ecx, [esp+14h]
.text:004048A9                 mov     [esp+8], ebx
.text:004048AD                 mov     eax, 0FFFFFFFFh
.text:004048B2                 mov     ebx, [esp+10h]
.text:004048B6                 div     ecx
.text:004048B8                 cmp     eax, ebx
.text:004048BA                 jb      short loc_4048D9
.text:004048BC                 mov     edx, ebx
.text:004048BE                 imul    edx, ecx
.text:004048C1                 mov     [esp], edx
.text:004048C4                 call    malloc
.text:004048C9                 test    eax, eax
.text:004048CB                 jz      short loc_4048D5
.text:004048CD
.text:004048CD loc_4048CD:                             ; CODE XREF: .text:004048D7↓j
.text:004048CD                 mov     ebx, [esp+8]
.text:004048D1                 add     esp, 0Ch
.text:004048D4                 retn
.text:004048D5 ; ---------------------------------------------------------------------------
.text:004048D5
.text:004048D5 loc_4048D5:                             ; CODE XREF: .text:004048CB↑j
.text:004048D5                 test    ebx, ebx
.text:004048D7                 jz      short loc_4048CD
.text:004048D9
.text:004048D9 loc_4048D9:                             ; CODE XREF: .text:004048BA↑j
.text:004048D9                 call    sub_404B90
.text:004048D9 ; ---------------------------------------------------------------------------
.text:004048DE                 align 10h
.text:004048E0
.text:004048E0 ; =============== S U B R O U T I N E =======================================
.text:004048E0
.text:004048E0
.text:004048E0 ; int __cdecl sub_4048E0(size_t)
.text:004048E0 sub_4048E0      proc near               ; CODE XREF: .text:00403F59↑p
.text:004048E0                                         ; .text:00404136↑p ...
.text:004048E0
.text:004048E0 Size            = dword ptr -0Ch
.text:004048E0 var_4           = dword ptr -4
.text:004048E0 arg_0           = dword ptr  4
.text:004048E0
.text:004048E0                 sub     esp, 0Ch
.text:004048E3                 mov     [esp+0Ch+var_4], ebx
.text:004048E7                 mov     ebx, [esp+0Ch+arg_0]
.text:004048EB                 mov     [esp+0Ch+Size], ebx ; Size
.text:004048EE                 call    malloc
.text:004048F3                 test    eax, eax
.text:004048F5                 jz      short loc_404900
.text:004048F7
.text:004048F7 loc_4048F7:                             ; CODE XREF: sub_4048E0+22↓j
.text:004048F7                 mov     ebx, [esp+0Ch+var_4]
.text:004048FB                 add     esp, 0Ch
.text:004048FE                 retn
.text:004048FE ; ---------------------------------------------------------------------------
.text:004048FF                 align 10h
.text:00404900
.text:00404900 loc_404900:                             ; CODE XREF: sub_4048E0+15↑j
.text:00404900                 test    ebx, ebx
.text:00404902                 jz      short loc_4048F7
.text:00404904                 call    sub_404B90
.text:00404904 sub_4048E0      endp
.text:00404904
.text:00404904 ; ---------------------------------------------------------------------------
.text:00404909                 align 10h
.text:00404910                 sub     esp, 1Ch
.text:00404913                 xor     edx, edx
.text:00404915                 mov     eax, 0FFFFFFFFh
.text:0040491A                 mov     [esp+14h], ebx
.text:0040491E                 mov     ecx, [esp+20h]
.text:00404922                 mov     ebx, [esp+28h]
.text:00404926                 mov     [esp+18h], esi
.text:0040492A                 mov     esi, [esp+24h]
.text:0040492E                 div     ebx
.text:00404930                 cmp     eax, esi
.text:00404932                 jb      short loc_404964
.text:00404934                 mov     [esp], ecx
.text:00404937                 mov     edx, esi
.text:00404939                 imul    edx, ebx
.text:0040493C                 mov     [esp+4], edx
.text:00404940                 call    realloc
.text:00404945                 test    eax, eax
.text:00404947                 mov     ecx, eax
.text:00404949                 jz      short loc_404960
.text:0040494B
.text:0040494B loc_40494B:                             ; CODE XREF: .text:00404962↓j
.text:0040494B                 mov     ebx, [esp+14h]
.text:0040494F                 mov     eax, ecx
.text:00404951                 mov     esi, [esp+18h]
.text:00404955                 add     esp, 1Ch
.text:00404958                 retn
.text:00404958 ; ---------------------------------------------------------------------------
.text:00404959                 align 10h
.text:00404960
.text:00404960 loc_404960:                             ; CODE XREF: .text:00404949↑j
.text:00404960                 test    esi, esi
.text:00404962                 jz      short loc_40494B
.text:00404964
.text:00404964 loc_404964:                             ; CODE XREF: .text:00404932↑j
.text:00404964                 call    sub_404B90
.text:00404964 ; ---------------------------------------------------------------------------
.text:00404969                 align 10h
.text:00404970
.text:00404970 ; =============== S U B R O U T I N E =======================================
.text:00404970
.text:00404970
.text:00404970 ; int __cdecl sub_404970(void *, size_t)
.text:00404970 sub_404970      proc near               ; CODE XREF: sub_404620+5B↑p
.text:00404970
.text:00404970 Block           = dword ptr -0Ch
.text:00404970 Size            = dword ptr -8
.text:00404970 var_4           = dword ptr -4
.text:00404970 arg_0           = dword ptr  4
.text:00404970 arg_4           = dword ptr  8
.text:00404970
.text:00404970                 sub     esp, 0Ch
.text:00404973                 mov     edx, [esp+0Ch+arg_0]
.text:00404977                 mov     [esp+0Ch+var_4], ebx
.text:0040497B                 mov     ebx, [esp+0Ch+arg_4]
.text:0040497F                 mov     [esp+0Ch+Block], edx ; Block
.text:00404982                 mov     [esp+0Ch+Size], ebx ; Size
.text:00404986                 call    realloc
.text:0040498B                 test    eax, eax
.text:0040498D                 jz      short loc_404997
.text:0040498F
.text:0040498F loc_40498F:                             ; CODE XREF: sub_404970+29↓j
.text:0040498F                 mov     ebx, [esp+0Ch+var_4]
.text:00404993                 add     esp, 0Ch
.text:00404996                 retn
.text:00404997 ; ---------------------------------------------------------------------------
.text:00404997
.text:00404997 loc_404997:                             ; CODE XREF: sub_404970+1D↑j
.text:00404997                 test    ebx, ebx
.text:00404999                 jz      short loc_40498F
.text:0040499B                 call    sub_404B90
.text:0040499B sub_404970      endp
.text:0040499B
.text:004049A0 ; ---------------------------------------------------------------------------
.text:004049A0                 jmp     sub_404AF0
.text:004049A0 ; ---------------------------------------------------------------------------
.text:004049A5                 align 10h
.text:004049B0                 sub     esp, 0Ch
.text:004049B3                 mov     edx, [esp+14h]
.text:004049B7                 mov     dword ptr [esp+8], 1
.text:004049BF                 mov     [esp+4], edx
.text:004049C3                 mov     edx, [esp+10h]
.text:004049C7                 mov     [esp], edx
.text:004049CA                 call    sub_404AF0
.text:004049CF                 add     esp, 0Ch
.text:004049D2                 retn
.text:004049D2 ; ---------------------------------------------------------------------------
.text:004049D3                 align 10h
.text:004049E0                 sub     esp, 1Ch
.text:004049E3                 mov     [esp+18h], ebx
.text:004049E7                 mov     ebx, [esp+20h]
.text:004049EB                 mov     [esp], ebx
.text:004049EE                 call    malloc
.text:004049F3                 test    eax, eax
.text:004049F5                 jz      short loc_404A13
.text:004049F7
.text:004049F7 loc_4049F7:                             ; CODE XREF: .text:00404A15↓j
.text:004049F7                 mov     [esp+8], ebx
.text:004049FB                 mov     dword ptr [esp+4], 0
.text:00404A03                 mov     [esp], eax
.text:00404A06                 call    memset
.text:00404A0B                 mov     ebx, [esp+18h]
.text:00404A0F                 add     esp, 1Ch
.text:00404A12                 retn
.text:00404A13 ; ---------------------------------------------------------------------------
.text:00404A13
.text:00404A13 loc_404A13:                             ; CODE XREF: .text:004049F5↑j
.text:00404A13                 test    ebx, ebx
.text:00404A15                 jz      short loc_4049F7
.text:00404A17                 call    sub_404B90
.text:00404A17 ; ---------------------------------------------------------------------------
.text:00404A1C                 align 10h
.text:00404A20                 sub     esp, 0Ch
.text:00404A23                 xor     edx, edx
.text:00404A25                 mov     ecx, [esp+14h]
.text:00404A29                 mov     [esp+8], ebx
.text:00404A2D                 mov     eax, 0FFFFFFFFh
.text:00404A32                 mov     ebx, [esp+10h]
.text:00404A36                 div     ecx
.text:00404A38                 cmp     eax, ebx
.text:00404A3A                 jb      short loc_404A58
.text:00404A3C                 mov     [esp+4], ecx
.text:00404A40                 mov     [esp], ebx
.text:00404A43                 call    calloc
.text:00404A48                 test    eax, eax
.text:00404A4A                 jz      short loc_404A54
.text:00404A4C
.text:00404A4C loc_404A4C:                             ; CODE XREF: .text:00404A56↓j
.text:00404A4C                 mov     ebx, [esp+8]
.text:00404A50                 add     esp, 0Ch
.text:00404A53                 retn
.text:00404A54 ; ---------------------------------------------------------------------------
.text:00404A54
.text:00404A54 loc_404A54:                             ; CODE XREF: .text:00404A4A↑j
.text:00404A54                 test    ebx, ebx
.text:00404A56                 jz      short loc_404A4C
.text:00404A58
.text:00404A58 loc_404A58:                             ; CODE XREF: .text:00404A3A↑j
.text:00404A58                 call    sub_404B90
.text:00404A58 ; ---------------------------------------------------------------------------
.text:00404A5D                 align 10h
.text:00404A60                 sub     esp, 1Ch
.text:00404A63                 mov     [esp+18h], ebx
.text:00404A67                 mov     ebx, [esp+24h]
.text:00404A6B                 mov     [esp], ebx
.text:00404A6E                 call    malloc
.text:00404A73                 test    eax, eax
.text:00404A75                 mov     edx, eax
.text:00404A77                 jz      short loc_404A95
.text:00404A79
.text:00404A79 loc_404A79:                             ; CODE XREF: .text:00404A97↓j
.text:00404A79                 mov     [esp+8], ebx
.text:00404A7D                 mov     ecx, [esp+20h]
.text:00404A81                 mov     [esp], edx
.text:00404A84                 mov     [esp+4], ecx
.text:00404A88                 call    memcpy
.text:00404A8D                 mov     ebx, [esp+18h]
.text:00404A91                 add     esp, 1Ch
.text:00404A94                 retn
.text:00404A95 ; ---------------------------------------------------------------------------
.text:00404A95
.text:00404A95 loc_404A95:                             ; CODE XREF: .text:00404A77↑j
.text:00404A95                 test    ebx, ebx
.text:00404A97                 jz      short loc_404A79
.text:00404A99                 call    sub_404B90
.text:00404A99 ; ---------------------------------------------------------------------------
.text:00404A9E                 align 10h
.text:00404AA0                 sub     esp, 1Ch
.text:00404AA3                 mov     [esp+18h], esi
.text:00404AA7                 mov     esi, [esp+20h]
.text:00404AAB                 mov     [esp+14h], ebx
.text:00404AAF                 mov     [esp], esi
.text:00404AB2                 call    strlen
.text:00404AB7                 lea     ebx, [eax+1]
.text:00404ABA                 mov     [esp], ebx
.text:00404ABD                 call    malloc
.text:00404AC2                 test    eax, eax
.text:00404AC4                 jz      short loc_404AE2
.text:00404AC6
.text:00404AC6 loc_404AC6:                             ; CODE XREF: .text:00404AE4↓j
.text:00404AC6                 mov     [esp+8], ebx
.text:00404ACA                 mov     [esp+4], esi
.text:00404ACE                 mov     [esp], eax
.text:00404AD1                 call    memcpy
.text:00404AD6                 mov     ebx, [esp+14h]
.text:00404ADA                 mov     esi, [esp+18h]
.text:00404ADE                 add     esp, 1Ch
.text:00404AE1                 retn
.text:00404AE2 ; ---------------------------------------------------------------------------
.text:00404AE2
.text:00404AE2 loc_404AE2:                             ; CODE XREF: .text:00404AC4↑j
.text:00404AE2                 test    ebx, ebx
.text:00404AE4                 jz      short loc_404AC6
.text:00404AE6                 call    sub_404B90
.text:00404AE6 ; ---------------------------------------------------------------------------
.text:00404AEB                 align 10h
.text:00404AF0
.text:00404AF0 ; =============== S U B R O U T I N E =======================================
.text:00404AF0
.text:00404AF0
.text:00404AF0 ; int __cdecl sub_404AF0(void *, int, int)
.text:00404AF0 sub_404AF0      proc near               ; CODE XREF: .text:004049A0↑j
.text:00404AF0                                         ; .text:004049CA↑p
.text:00404AF0
.text:00404AF0 Block           = dword ptr -1Ch
.text:00404AF0 Size            = dword ptr -18h
.text:00404AF0 var_C           = dword ptr -0Ch
.text:00404AF0 var_8           = dword ptr -8
.text:00404AF0 var_4           = dword ptr -4
.text:00404AF0 arg_0           = dword ptr  4
.text:00404AF0 arg_4           = dword ptr  8
.text:00404AF0 arg_8           = dword ptr  0Ch
.text:00404AF0
.text:00404AF0                 sub     esp, 1Ch
.text:00404AF3                 mov     [esp+1Ch+var_8], esi
.text:00404AF7                 mov     esi, [esp+1Ch+arg_0]
.text:00404AFB                 mov     [esp+1Ch+var_4], edi
.text:00404AFF                 mov     edi, [esp+1Ch+arg_4]
.text:00404B03                 test    esi, esi
.text:00404B05                 mov     [esp+1Ch+var_C], ebx
.text:00404B09                 mov     ecx, [edi]
.text:00404B0B                 mov     ebx, [esp+1Ch+arg_8]
.text:00404B0F                 jz      short loc_404B50
.text:00404B11                 xor     edx, edx
.text:00404B13                 mov     eax, 7FFFFFFFh
.text:00404B18                 div     ebx
.text:00404B1A                 cmp     eax, ecx
.text:00404B1C                 jb      short loc_404B49
.text:00404B1E                 add     ecx, ecx
.text:00404B20
.text:00404B20 loc_404B20:                             ; CODE XREF: sub_404AF0+62↓j
.text:00404B20                                         ; sub_404AF0+71↓j ...
.text:00404B20                 mov     [edi], ecx
.text:00404B22                 imul    ebx, ecx
.text:00404B25                 mov     [esp+1Ch+Block], esi ; Block
.text:00404B28                 mov     [esp+1Ch+Size], ebx ; Size
.text:00404B2C                 call    realloc
.text:00404B31                 test    eax, eax
.text:00404B33                 jz      short loc_404B45
.text:00404B35
.text:00404B35 loc_404B35:                             ; CODE XREF: sub_404AF0+57↓j
.text:00404B35                 mov     ebx, [esp+1Ch+var_C]
.text:00404B39                 mov     esi, [esp+1Ch+var_8]
.text:00404B3D                 mov     edi, [esp+1Ch+var_4]
.text:00404B41                 add     esp, 1Ch
.text:00404B44                 retn
.text:00404B45 ; ---------------------------------------------------------------------------
.text:00404B45
.text:00404B45 loc_404B45:                             ; CODE XREF: sub_404AF0+43↑j
.text:00404B45                 test    ebx, ebx
.text:00404B47                 jz      short loc_404B35
.text:00404B49
.text:00404B49 loc_404B49:                             ; CODE XREF: sub_404AF0+2C↑j
.text:00404B49                 call    sub_404B90
.text:00404B49 ; ---------------------------------------------------------------------------
.text:00404B4E                 align 10h
.text:00404B50
.text:00404B50 loc_404B50:                             ; CODE XREF: sub_404AF0+1F↑j
.text:00404B50                 test    ecx, ecx
.text:00404B52                 jnz     short loc_404B20
.text:00404B54                 xor     edx, edx
.text:00404B56                 mov     eax, 40h ; '@'
.text:00404B5B                 div     ebx
.text:00404B5D                 test    eax, eax
.text:00404B5F                 mov     ecx, eax
.text:00404B61                 jnz     short loc_404B20
.text:00404B63                 mov     ecx, 1
.text:00404B68                 jmp     short loc_404B20
.text:00404B68 sub_404AF0      endp
.text:00404B68
.text:00404B68 ; ---------------------------------------------------------------------------
.text:00404B6A                 align 10h
.text:00404B70 aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: sub_404B90+3↓o
.text:00404B81 ; const char aS_0[]
.text:00404B81 aS_0            db '%s',0               ; DATA XREF: sub_404B90+10↓o
.text:00404B84                 align 10h
.text:00404B90
.text:00404B90 ; =============== S U B R O U T I N E =======================================
.text:00404B90
.text:00404B90 ; Attributes: noreturn
.text:00404B90
.text:00404B90 sub_404B90      proc near               ; CODE XREF: sub_404620:loc_4047DF↑p
.text:00404B90                                         ; .text:loc_4048D9↑p ...
.text:00404B90
.text:00404B90 Code            = dword ptr -1Ch
.text:00404B90 ErrorMessage    = dword ptr -18h
.text:00404B90 var_14          = dword ptr -14h
.text:00404B90 var_10          = byte ptr -10h
.text:00404B90
.text:00404B90                 sub     esp, 1Ch
.text:00404B93                 mov     [esp+1Ch+Code], offset aMemoryExhauste ; "memory exhausted"
.text:00404B9A                 call    ds:libintl_gettext
.text:00404BA0                 mov     [esp+1Ch+var_14], offset aS_0 ; "%s"
.text:00404BA8                 mov     edx, Code
.text:00404BAE                 mov     [esp+1Ch+ErrorMessage], 0 ; ErrorMessage
.text:00404BB6                 mov     dword ptr [esp+1Ch+var_10], eax ; char
.text:00404BBA                 mov     [esp+1Ch+Code], edx ; Code
.text:00404BBD                 call    sub_404C20
.text:00404BC2                 call    abort
.text:00404BC2 sub_404B90      endp
.text:00404BC2
.text:00404BC2 ; ---------------------------------------------------------------------------
.text:00404BC7                 align 10h
.text:00404BD0
.text:00404BD0 ; =============== S U B R O U T I N E =======================================
.text:00404BD0
.text:00404BD0 ; Attributes: thunk
.text:00404BD0
.text:00404BD0 libintl_bindtextdomain proc near
.text:00404BD0                 jmp     ds:__imp_libintl_bindtextdomain
.text:00404BD0 libintl_bindtextdomain endp
.text:00404BD0
.text:00404BD0 ; ---------------------------------------------------------------------------
.text:00404BD6                 align 10h
.text:00404BE0                 jmp     ds:libintl_textdomain
.text:00404BE0 ; ---------------------------------------------------------------------------
.text:00404BE6                 align 10h
.text:00404BF0                 jmp     ds:libintl_gettext
.text:00404BF0 ; ---------------------------------------------------------------------------
.text:00404BF6                 align 10h
.text:00404C00 ; const char aS_1[]
.text:00404C00 aS_1            db ': %s',0             ; DATA XREF: sub_404C20+B8↓o
.text:00404C00                                         ; sub_404D24+122↓o
.text:00404C05 aUnknownSystemE db 'Unknown system error',0
.text:00404C05                                         ; DATA XREF: sub_404C20:loc_404CED↓o
.text:00404C05                                         ; sub_404D24:loc_404E5E↓o
.text:00404C1A ; const char aS_2[]
.text:00404C1A aS_2            db '%s: ',0             ; DATA XREF: sub_404C20:loc_404CF4↓o
.text:00404C1F                 align 10h
.text:00404C20
.text:00404C20 ; =============== S U B R O U T I N E =======================================
.text:00404C20
.text:00404C20
.text:00404C20 ; int __cdecl sub_404C20(int Code, int ErrorMessage, char *, char)
.text:00404C20 sub_404C20      proc near               ; CODE XREF: sub_4016E0+265↑p
.text:00404C20                                         ; sub_4016E0+2F3↑p ...
.text:00404C20
.text:00404C20 Stream          = dword ptr -1Ch
.text:00404C20 Format          = dword ptr -18h
.text:00404C20 ArgList         = dword ptr -14h
.text:00404C20 Code            = dword ptr  4
.text:00404C20 ErrorMessage    = dword ptr  8
.text:00404C20 arg_8           = dword ptr  0Ch
.text:00404C20 arg_C           = byte ptr  10h
.text:00404C20
.text:00404C20                 push    esi
.text:00404C21                 push    ebx
.text:00404C22                 sub     esp, 14h
.text:00404C25                 mov     edx, ds:_iob
.text:00404C2B                 mov     esi, [esp+1Ch+Code]
.text:00404C2F                 mov     ebx, [esp+1Ch+ErrorMessage]
.text:00404C33                 add     edx, 20h ; ' '
.text:00404C36                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00404C39                 call    fflush
.text:00404C3E                 mov     eax, ds:dword_4071F0
.text:00404C43                 test    eax, eax
.text:00404C45                 jz      loc_404CF4
.text:00404C4B                 call    eax ; dword_4071F0
.text:00404C4D
.text:00404C4D loc_404C4D:                             ; CODE XREF: sub_404C20+F7↓j
.text:00404C4D                 lea     edx, [esp+1Ch+arg_C]
.text:00404C51                 mov     ecx, [esp+1Ch+arg_8]
.text:00404C55                 mov     [esp+1Ch+ArgList], edx ; ArgList
.text:00404C59                 mov     edx, ds:_iob
.text:00404C5F                 mov     [esp+1Ch+Format], ecx ; Format
.text:00404C63                 add     edx, 40h ; '@'
.text:00404C66                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00404C69                 call    vfprintf
.text:00404C6E                 inc     ds:dword_407200
.text:00404C74                 test    ebx, ebx
.text:00404C76                 jnz     short loc_404CC2
.text:00404C78
.text:00404C78 loc_404C78:                             ; CODE XREF: sub_404C20+CB↓j
.text:00404C78                 mov     edx, ds:_iob
.text:00404C7E                 lea     ecx, [edx+40h]
.text:00404C81                 mov     ebx, [ecx+4]
.text:00404C84                 dec     ebx
.text:00404C85                 test    ebx, ebx
.text:00404C87                 mov     [ecx+4], ebx
.text:00404C8A                 js      short loc_404CB0
.text:00404C8C                 mov     ecx, [edx+40h]
.text:00404C8F                 mov     byte ptr [ecx], 0Ah
.text:00404C92                 inc     dword ptr [edx+40h]
.text:00404C95
.text:00404C95 loc_404C95:                             ; CODE XREF: sub_404C20+A0↓j
.text:00404C95                 mov     edx, ds:_iob
.text:00404C9B                 add     edx, 40h ; '@'
.text:00404C9E                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00404CA1                 call    fflush
.text:00404CA6                 test    esi, esi
.text:00404CA8                 jnz     short loc_404D1C
.text:00404CAA                 add     esp, 14h
.text:00404CAD                 pop     ebx
.text:00404CAE                 pop     esi
.text:00404CAF                 retn
.text:00404CB0 ; ---------------------------------------------------------------------------
.text:00404CB0
.text:00404CB0 loc_404CB0:                             ; CODE XREF: sub_404C20+6A↑j
.text:00404CB0                 mov     [esp+1Ch+Format], ecx ; File
.text:00404CB4                 mov     [esp+1Ch+Stream], 0Ah ; Ch
.text:00404CBB                 call    _flsbuf
.text:00404CC0                 jmp     short loc_404C95
.text:00404CC2 ; ---------------------------------------------------------------------------
.text:00404CC2
.text:00404CC2 loc_404CC2:                             ; CODE XREF: sub_404C20+56↑j
.text:00404CC2                 mov     [esp+1Ch+Stream], ebx ; ErrorMessage
.text:00404CC5                 call    strerror
.text:00404CCA                 test    eax, eax
.text:00404CCC                 jz      short loc_404CED
.text:00404CCE
.text:00404CCE loc_404CCE:                             ; CODE XREF: sub_404C20+D2↓j
.text:00404CCE                 mov     [esp+1Ch+ArgList], eax
.text:00404CD2                 mov     ebx, ds:_iob
.text:00404CD8                 mov     [esp+1Ch+Format], offset aS_1 ; ": %s"
.text:00404CE0                 add     ebx, 40h ; '@'
.text:00404CE3                 mov     [esp+1Ch+Stream], ebx ; Stream
.text:00404CE6                 call    fprintf
.text:00404CEB                 jmp     short loc_404C78
.text:00404CED ; ---------------------------------------------------------------------------
.text:00404CED
.text:00404CED loc_404CED:                             ; CODE XREF: sub_404C20+AC↑j
.text:00404CED                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:00404CF2                 jmp     short loc_404CCE
.text:00404CF4 ; ---------------------------------------------------------------------------
.text:00404CF4
.text:00404CF4 loc_404CF4:                             ; CODE XREF: sub_404C20+25↑j
.text:00404CF4                 mov     [esp+1Ch+Format], offset aS_2 ; "%s: "
.text:00404CFC                 mov     edx, ds:_iob
.text:00404D02                 mov     ecx, ds:dword_4071C0
.text:00404D08                 add     edx, 40h ; '@'
.text:00404D0B                 mov     [esp+1Ch+ArgList], ecx
.text:00404D0F                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00404D12                 call    fprintf
.text:00404D17                 jmp     loc_404C4D
.text:00404D1C ; ---------------------------------------------------------------------------
.text:00404D1C
.text:00404D1C loc_404D1C:                             ; CODE XREF: sub_404C20+88↑j
.text:00404D1C                 mov     [esp+1Ch+Stream], esi ; Code
.text:00404D1F                 call    exit
.text:00404D1F sub_404C20      endp
.text:00404D1F
.text:00404D24
.text:00404D24 ; =============== S U B R O U T I N E =======================================
.text:00404D24
.text:00404D24
.text:00404D24 ; int __cdecl sub_404D24(int, int Code, int ErrorMessage, char *Str2, int, char *, char)
.text:00404D24 sub_404D24      proc near               ; DATA XREF: sub_404D24+77↓o
.text:00404D24
.text:00404D24 Stream          = dword ptr -28h
.text:00404D24 Format          = dword ptr -24h
.text:00404D24 ArgList         = dword ptr -20h
.text:00404D24 var_1C          = dword ptr -1Ch
.text:00404D24 Code            = dword ptr  8
.text:00404D24 ErrorMessage    = dword ptr  0Ch
.text:00404D24 Str2            = dword ptr  10h
.text:00404D24 arg_10          = dword ptr  14h
.text:00404D24 arg_14          = dword ptr  18h
.text:00404D24 arg_18          = byte ptr  1Ch
.text:00404D24
.text:00404D24                 and     eax, 64253A73h
.text:00404D29                 cmp     ah, [eax]
.text:00404D2B
.text:00404D2B loc_404D2B:                             ; DATA XREF: sub_404D24:loc_404E65↓o
.text:00404D2B                 add     ds:55003A73h, ah
.text:00404D31                 push    edi
.text:00404D32                 push    esi
.text:00404D33                 push    ebx
.text:00404D34                 sub     esp, 1Ch
.text:00404D37                 mov     edx, ds:dword_407230
.text:00404D3D                 mov     ebp, [esp+28h+Code]
.text:00404D41                 mov     edi, [esp+28h+ErrorMessage]
.text:00404D45                 test    edx, edx
.text:00404D47                 mov     ebx, [esp+28h+Str2]
.text:00404D4B                 mov     esi, [esp+28h+arg_10]
.text:00404D4F                 jz      short loc_404D69
.text:00404D51                 cmp     ds:dword_4071B0, esi
.text:00404D57                 jz      loc_404E90
.text:00404D5D
.text:00404D5D loc_404D5D:                             ; CODE XREF: sub_404D24+18D↓j
.text:00404D5D                 mov     ds:Str1, ebx
.text:00404D63                 mov     ds:dword_4071B0, esi
.text:00404D69
.text:00404D69 loc_404D69:                             ; CODE XREF: sub_404D24+2B↑j
.text:00404D69                 mov     edx, ds:_iob
.text:00404D6F                 add     edx, 20h ; ' '
.text:00404D72                 mov     [esp+28h+Stream], edx ; Stream
.text:00404D75                 call    fflush
.text:00404D7A                 mov     eax, ds:dword_4071F0
.text:00404D7F                 test    eax, eax
.text:00404D81                 jz      loc_404E65
.text:00404D87                 call    eax ; dword_4071F0
.text:00404D89
.text:00404D89 loc_404D89:                             ; CODE XREF: sub_404D24+164↓j
.text:00404D89                 test    ebx, ebx
.text:00404D8B                 jz      short loc_404DAE
.text:00404D8D                 mov     [esp+28h+ArgList], ebx
.text:00404D91                 mov     ebx, ds:_iob
.text:00404D97                 mov     [esp+28h+var_1C], esi
.text:00404D9B                 mov     [esp+28h+Format], offset sub_404D24 ; Format
.text:00404DA3                 add     ebx, 40h ; '@'
.text:00404DA6                 mov     [esp+28h+Stream], ebx ; Stream
.text:00404DA9                 call    fprintf
.text:00404DAE
.text:00404DAE loc_404DAE:                             ; CODE XREF: sub_404D24+67↑j
.text:00404DAE                 mov     esi, ds:_iob
.text:00404DB4                 lea     edx, [esp+28h+arg_18]
.text:00404DB8                 mov     ecx, [esp+28h+arg_14]
.text:00404DBC                 mov     [esp+28h+ArgList], edx ; ArgList
.text:00404DC0                 add     esi, 40h ; '@'
.text:00404DC3                 mov     [esp+28h+Format], ecx ; Format
.text:00404DC7                 mov     [esp+28h+Stream], esi ; Stream
.text:00404DCA                 call    vfprintf
.text:00404DCF                 inc     ds:dword_407200
.text:00404DD5                 test    edi, edi
.text:00404DD7                 jnz     short loc_404E30
.text:00404DD9
.text:00404DD9 loc_404DD9:                             ; CODE XREF: sub_404D24+135↓j
.text:00404DD9                 mov     edx, ds:_iob
.text:00404DDF                 lea     ecx, [edx+40h]
.text:00404DE2                 mov     ebx, [ecx+4]
.text:00404DE5                 dec     ebx
.text:00404DE6                 test    ebx, ebx
.text:00404DE8                 mov     [ecx+4], ebx
.text:00404DEB                 js      short loc_404E17
.text:00404DED                 mov     esi, [edx+40h]
.text:00404DF0                 mov     byte ptr [esi], 0Ah
.text:00404DF3                 inc     dword ptr [edx+40h]
.text:00404DF6
.text:00404DF6 loc_404DF6:                             ; CODE XREF: sub_404D24+103↓j
.text:00404DF6                 mov     ecx, ds:_iob
.text:00404DFC                 add     ecx, 40h ; '@'
.text:00404DFF                 mov     [esp+28h+Stream], ecx ; Stream
.text:00404E02                 call    fflush
.text:00404E07                 test    ebp, ebp
.text:00404E09                 jnz     loc_404EB6
.text:00404E0F
.text:00404E0F loc_404E0F:                             ; CODE XREF: sub_404D24+173↓j
.text:00404E0F                                         ; sub_404D24+187↓j
.text:00404E0F                 add     esp, 1Ch
.text:00404E12                 pop     ebx
.text:00404E13                 pop     esi
.text:00404E14                 pop     edi
.text:00404E15                 pop     ebp
.text:00404E16                 retn
.text:00404E17 ; ---------------------------------------------------------------------------
.text:00404E17
.text:00404E17 loc_404E17:                             ; CODE XREF: sub_404D24+C7↑j
.text:00404E17                 mov     [esp+28h+Format], ecx ; File
.text:00404E1B                 mov     [esp+28h+Stream], 0Ah ; Ch
.text:00404E22                 call    _flsbuf
.text:00404E27                 jmp     short loc_404DF6
.text:00404E27 ; ---------------------------------------------------------------------------
.text:00404E29                 align 10h
.text:00404E30
.text:00404E30 loc_404E30:                             ; CODE XREF: sub_404D24+B3↑j
.text:00404E30                 mov     [esp+28h+Stream], edi ; ErrorMessage
.text:00404E33                 call    strerror
.text:00404E38                 test    eax, eax
.text:00404E3A                 jz      short loc_404E5E
.text:00404E3C
.text:00404E3C loc_404E3C:                             ; CODE XREF: sub_404D24+13F↓j
.text:00404E3C                 mov     [esp+28h+ArgList], eax
.text:00404E40                 mov     edi, ds:_iob
.text:00404E46                 mov     [esp+28h+Format], offset aS_1 ; ": %s"
.text:00404E4E                 add     edi, 40h ; '@'
.text:00404E51                 mov     [esp+28h+Stream], edi ; Stream
.text:00404E54                 call    fprintf
.text:00404E59                 jmp     loc_404DD9
.text:00404E5E ; ---------------------------------------------------------------------------
.text:00404E5E
.text:00404E5E loc_404E5E:                             ; CODE XREF: sub_404D24+116↑j
.text:00404E5E                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:00404E63                 jmp     short loc_404E3C
.text:00404E65 ; ---------------------------------------------------------------------------
.text:00404E65
.text:00404E65 loc_404E65:                             ; CODE XREF: sub_404D24+5D↑j
.text:00404E65                 mov     [esp+28h+Format], (offset loc_404D2B+1) ; Format
.text:00404E6D                 mov     ecx, ds:_iob
.text:00404E73                 mov     edx, ds:dword_4071C0
.text:00404E79                 add     ecx, 40h ; '@'
.text:00404E7C                 mov     [esp+28h+ArgList], edx
.text:00404E80                 mov     [esp+28h+Stream], ecx ; Stream
.text:00404E83                 call    fprintf
.text:00404E88                 jmp     loc_404D89
.text:00404E88 ; ---------------------------------------------------------------------------
.text:00404E8D                 align 10h
.text:00404E90
.text:00404E90 loc_404E90:                             ; CODE XREF: sub_404D24+33↑j
.text:00404E90                 mov     eax, ds:Str1
.text:00404E95                 cmp     ebx, eax
.text:00404E97                 jz      loc_404E0F
.text:00404E9D                 mov     [esp+28h+Format], ebx ; Str2
.text:00404EA1                 mov     [esp+28h+Stream], eax ; Str1
.text:00404EA4                 call    strcmp
.text:00404EA9                 test    eax, eax
.text:00404EAB                 jz      loc_404E0F
.text:00404EB1                 jmp     loc_404D5D
.text:00404EB6 ; ---------------------------------------------------------------------------
.text:00404EB6
.text:00404EB6 loc_404EB6:                             ; CODE XREF: sub_404D24+E5↑j
.text:00404EB6                 mov     [esp+28h+Stream], ebp ; Code
.text:00404EB9                 call    exit
.text:00404EB9 sub_404D24      endp ; sp-analysis failed
.text:00404EB9
.text:00404EB9 ; ---------------------------------------------------------------------------
.text:00404EBE                 align 10h
.text:00404EC0
.text:00404EC0 ; =============== S U B R O U T I N E =======================================
.text:00404EC0
.text:00404EC0
.text:00404EC0 ; int __cdecl sub_404EC0(LPCSTR)
.text:00404EC0 sub_404EC0      proc near               ; CODE XREF: sub_4016E0+28C↑p
.text:00404EC0                                         ; sub_401B50+5C↑p
.text:00404EC0
.text:00404EC0 lpPathName      = dword ptr -0Ch
.text:00404EC0 var_4           = dword ptr -4
.text:00404EC0 arg_0           = dword ptr  4
.text:00404EC0
.text:00404EC0                 sub     esp, 0Ch
.text:00404EC3                 mov     eax, [esp+0Ch+arg_0]
.text:00404EC7                 mov     [esp+0Ch+var_4], ebx
.text:00404ECB                 test    eax, eax
.text:00404ECD                 jz      short loc_404EFF
.text:00404ECF                 mov     [esp+0Ch+lpPathName], eax ; lpPathName
.text:00404ED2                 call    RemoveDirectoryA
.text:00404ED7                 sub     esp, 4
.text:00404EDA                 xor     edx, edx
.text:00404EDC                 test    eax, eax
.text:00404EDE                 jz      short loc_404EEA
.text:00404EE0
.text:00404EE0 loc_404EE0:                             ; CODE XREF: sub_404EC0+3D↓j
.text:00404EE0                 mov     ebx, [esp+0Ch+var_4]
.text:00404EE4                 mov     eax, edx
.text:00404EE6                 add     esp, 0Ch
.text:00404EE9                 retn
.text:00404EEA ; ---------------------------------------------------------------------------
.text:00404EEA
.text:00404EEA loc_404EEA:                             ; CODE XREF: sub_404EC0+1E↑j
.text:00404EEA                 call    sub_4051A0
.text:00404EEF                 mov     ebx, eax
.text:00404EF1                 call    _errno
.text:00404EF6                 mov     [eax], ebx
.text:00404EF8
.text:00404EF8 loc_404EF8:                             ; CODE XREF: sub_404EC0+4A↓j
.text:00404EF8                 mov     edx, 0FFFFFFFFh
.text:00404EFD                 jmp     short loc_404EE0
.text:00404EFF ; ---------------------------------------------------------------------------
.text:00404EFF
.text:00404EFF loc_404EFF:                             ; CODE XREF: sub_404EC0+D↑j
.text:00404EFF                 call    _errno
.text:00404F04                 mov     dword ptr [eax], 16h
.text:00404F0A                 jmp     short loc_404EF8
.text:00404F0A sub_404EC0      endp
.text:00404F0A
.text:00404F0A ; ---------------------------------------------------------------------------
.text:00404F0C                 align 10h
.text:00404F10
.text:00404F10 ; =============== S U B R O U T I N E =======================================
.text:00404F10
.text:00404F10 ; Attributes: info_from_lumina
.text:00404F10
.text:00404F10 ___get_errno    proc near               ; CODE XREF: sub_4051A0+B↓p
.text:00404F10
.text:00404F10 arg_0           = dword ptr  4
.text:00404F10
.text:00404F10                 mov     eax, [esp+arg_0]
.text:00404F14                 cmp     eax, 53h ; 'S'
.text:00404F17                 jg      loc_405010
.text:00404F1D                 cmp     eax, 52h ; 'R'
.text:00404F20                 jge     short loc_404F72
.text:00404F22                 cmp     eax, 0Fh
.text:00404F25                 jz      short loc_404F40
.text:00404F27                 cmp     eax, 0Fh
.text:00404F2A                 jg      short loc_404FA0
.text:00404F2C                 cmp     eax, 9
.text:00404F2F                 jg      short loc_404F80
.text:00404F31                 cmp     eax, 7
.text:00404F34                 jge     short loc_404F79
.text:00404F36                 cmp     eax, 3
.text:00404F39                 jg      short loc_404F5A
.text:00404F3B                 cmp     eax, 2
.text:00404F3E                 jl      short loc_404F53
.text:00404F40
.text:00404F40 loc_404F40:                             ; CODE XREF: ___get_errno+15↑j
.text:00404F40                                         ; ___get_errno+9D↓j ...
.text:00404F40                 mov     edx, 2
.text:00404F45                 lea     esi, [esi+0]
.text:00404F49                 lea     edi, [edi+0]
.text:00404F50
.text:00404F50 loc_404F50:                             ; CODE XREF: ___get_errno+48↓j
.text:00404F50                                         ; ___get_errno+59↓j ...
.text:00404F50                 mov     eax, edx
.text:00404F52                 retn
.text:00404F53 ; ---------------------------------------------------------------------------
.text:00404F53
.text:00404F53 loc_404F53:                             ; CODE XREF: ___get_errno+2E↑j
.text:00404F53                                         ; ___get_errno+78↓j ...
.text:00404F53                 mov     edx, 16h
.text:00404F58                 jmp     short loc_404F50
.text:00404F5A ; ---------------------------------------------------------------------------
.text:00404F5A
.text:00404F5A loc_404F5A:                             ; CODE XREF: ___get_errno+29↑j
.text:00404F5A                 cmp     eax, 5
.text:00404F5D                 jz      short loc_404F72
.text:00404F5F                 cmp     eax, 5
.text:00404F62                 jg      short loc_404F6B
.text:00404F64                 mov     edx, 18h
.text:00404F69                 jmp     short loc_404F50
.text:00404F6B ; ---------------------------------------------------------------------------
.text:00404F6B
.text:00404F6B loc_404F6B:                             ; CODE XREF: ___get_errno+52↑j
.text:00404F6B                                         ; ___get_errno+180↓j
.text:00404F6B                 mov     edx, 9
.text:00404F70                 jmp     short loc_404F50
.text:00404F72 ; ---------------------------------------------------------------------------
.text:00404F72
.text:00404F72 loc_404F72:                             ; CODE XREF: ___get_errno+10↑j
.text:00404F72                                         ; ___get_errno+4D↑j ...
.text:00404F72                 mov     edx, 0Dh
.text:00404F77                 jmp     short loc_404F50
.text:00404F79 ; ---------------------------------------------------------------------------
.text:00404F79
.text:00404F79 loc_404F79:                             ; CODE XREF: ___get_errno+24↑j
.text:00404F79                                         ; ___get_errno+73↓j ...
.text:00404F79                 mov     edx, 0Ch
.text:00404F7E                 jmp     short loc_404F50
.text:00404F80 ; ---------------------------------------------------------------------------
.text:00404F80
.text:00404F80 loc_404F80:                             ; CODE XREF: ___get_errno+1F↑j
.text:00404F80                 cmp     eax, 0Dh
.text:00404F83                 jg      short loc_404F79
.text:00404F85                 cmp     eax, 0Ch
.text:00404F88                 jge     short loc_404F53
.text:00404F8A                 cmp     eax, 0Ah
.text:00404F8D                 mov     edx, 7
.text:00404F92                 jz      short loc_404F50
.text:00404F94                 cmp     eax, 0Bh
.text:00404F97                 jnz     short loc_404F53
.text:00404F99
.text:00404F99 loc_404F99:                             ; CODE XREF: ___get_errno+21A↓j
.text:00404F99                 mov     edx, 8
.text:00404F9E                 jmp     short loc_404F50
.text:00404FA0 ; ---------------------------------------------------------------------------
.text:00404FA0
.text:00404FA0 loc_404FA0:                             ; CODE XREF: ___get_errno+1A↑j
.text:00404FA0                 cmp     eax, 22h ; '"'
.text:00404FA3                 jg      short loc_404FD4
.text:00404FA5                 cmp     eax, 16h
.text:00404FA8                 jge     short loc_404F72
.text:00404FAA                 cmp     eax, 12h
.text:00404FAD                 jz      short loc_404F40
.text:00404FAF                 cmp     eax, 12h
.text:00404FB2                 jg      short loc_404FC5
.text:00404FB4                 cmp     eax, 10h
.text:00404FB7                 jz      short loc_404F72
.text:00404FB9                 mov     edx, 12h
.text:00404FBE                 cmp     eax, 11h
.text:00404FC1
.text:00404FC1 loc_404FC1:                             ; CODE XREF: ___get_errno+172↓j
.text:00404FC1                                         ; ___get_errno+24C↓j ...
.text:00404FC1                 jnz     short loc_404F53
.text:00404FC3                 jmp     short loc_404F50
.text:00404FC5 ; ---------------------------------------------------------------------------
.text:00404FC5
.text:00404FC5 loc_404FC5:                             ; CODE XREF: ___get_errno+A2↑j
.text:00404FC5                 cmp     eax, 14h
.text:00404FC8                 jle     short loc_404F72
.text:00404FCA
.text:00404FCA loc_404FCA:                             ; CODE XREF: ___get_errno+1D7↓j
.text:00404FCA                 mov     edx, 10h
.text:00404FCF                 jmp     loc_404F50
.text:00404FD4 ; ---------------------------------------------------------------------------
.text:00404FD4
.text:00404FD4 loc_404FD4:                             ; CODE XREF: ___get_errno+93↑j
.text:00404FD4                 cmp     eax, 41h ; 'A'
.text:00404FD7                 jz      short loc_404F72
.text:00404FD9                 cmp     eax, 41h ; 'A'
.text:00404FDC                 jg      short loc_404FF1
.text:00404FDE                 cmp     eax, 24h ; '$'
.text:00404FE1                 jz      short loc_404F72
.text:00404FE3                 cmp     eax, 35h ; '5'
.text:00404FE6                 jnz     loc_404F53
.text:00404FEC                 jmp     loc_404F40
.text:00404FF1 ; ---------------------------------------------------------------------------
.text:00404FF1
.text:00404FF1 loc_404FF1:                             ; CODE XREF: ___get_errno+CC↑j
.text:00404FF1                 cmp     eax, 43h ; 'C'
.text:00404FF4                 jz      loc_404F40
.text:00404FFA                 cmp     eax, 50h ; 'P'
.text:00404FFD                 jnz     loc_404F53
.text:00405003
.text:00405003 loc_405003:                             ; CODE XREF: ___get_errno+1FB↓j
.text:00405003                 mov     edx, 11h
.text:00405008                 jmp     loc_404F50
.text:00405008 ; ---------------------------------------------------------------------------
.text:0040500D                 align 10h
.text:00405010
.text:00405010 loc_405010:                             ; CODE XREF: ___get_errno+7↑j
.text:00405010                 cmp     eax, 0A1h ; '¡'
.text:00405015                 jz      loc_404F40
.text:0040501B                 cmp     eax, 0A1h ; '¡'
.text:00405020                 jg      loc_4050D0
.text:00405026                 cmp     eax, 81h
.text:0040502B                 jg      short loc_405095
.text:0040502D                 cmp     eax, 80h ; '€'
.text:00405032                 mov     edx, 0Ah
.text:00405037                 jge     loc_404F50
.text:0040503D                 cmp     eax, 6Ch ; 'l'
.text:00405040                 jz      loc_404F72
.text:00405046                 cmp     eax, 6Ch ; 'l'
.text:00405049                 jg      short loc_405067
.text:0040504B                 cmp     eax, 57h ; 'W'
.text:0040504E                 jz      loc_404F53
.text:00405054                 cmp     eax, 59h ; 'Y'
.text:00405057                 jnz     loc_404F53
.text:0040505D
.text:0040505D loc_40505D:                             ; CODE XREF: ___get_errno+1E9↓j
.text:0040505D                                         ; ___get_errno+23C↓j
.text:0040505D                 mov     edx, 0Bh
.text:00405062                 jmp     loc_404F50
.text:00405067 ; ---------------------------------------------------------------------------
.text:00405067
.text:00405067 loc_405067:                             ; CODE XREF: ___get_errno+139↑j
.text:00405067                 cmp     eax, 70h ; 'p'
.text:0040506A                 mov     edx, 1Ch
.text:0040506F                 jz      loc_404F50
.text:00405075                 cmp     eax, 70h ; 'p'
.text:00405078                 jg      short loc_405087
.text:0040507A                 mov     edx, 20h ; ' '
.text:0040507F                 cmp     eax, 6Dh ; 'm'
.text:00405082                 jmp     loc_404FC1
.text:00405087 ; ---------------------------------------------------------------------------
.text:00405087
.text:00405087 loc_405087:                             ; CODE XREF: ___get_errno+168↑j
.text:00405087                 cmp     eax, 72h ; 'r'
.text:0040508A
.text:0040508A loc_40508A:                             ; CODE XREF: ___get_errno+19C↓j
.text:0040508A                 jnz     loc_404F53
.text:00405090                 jmp     loc_404F6B
.text:00405095 ; ---------------------------------------------------------------------------
.text:00405095
.text:00405095 loc_405095:                             ; CODE XREF: ___get_errno+11B↑j
.text:00405095                 cmp     eax, 84h ; '„'
.text:0040509A                 jz      loc_404F72
.text:004050A0                 cmp     eax, 84h ; '„'
.text:004050A5                 jg      short loc_4050AE
.text:004050A7                 cmp     eax, 82h ; '‚'
.text:004050AC                 jmp     short loc_40508A
.text:004050AE ; ---------------------------------------------------------------------------
.text:004050AE
.text:004050AE loc_4050AE:                             ; CODE XREF: ___get_errno+195↑j
.text:004050AE                 cmp     eax, 91h ; '‘'
.text:004050B3                 mov     edx, 29h ; ')'
.text:004050B8                 jz      loc_404F50
.text:004050BE                 cmp     eax, 9Eh ; 'ž'
.text:004050C3
.text:004050C3 loc_4050C3:                             ; CODE XREF: ___get_errno+1F4↓j
.text:004050C3                 jnz     loc_404F53
.text:004050C9                 jmp     loc_404F72
.text:004050C9 ; ---------------------------------------------------------------------------
.text:004050CE                 align 10h
.text:004050D0
.text:004050D0 loc_4050D0:                             ; CODE XREF: ___get_errno+110↑j
.text:004050D0                 cmp     eax, 0CEh ; 'Î'
.text:004050D5                 jz      loc_404F40
.text:004050DB                 cmp     eax, 0CEh ; 'Î'
.text:004050E0                 jg      short loc_405130
.text:004050E2                 cmp     eax, 0AAh ; 'ª'
.text:004050E7                 jz      loc_404FCA
.text:004050ED                 cmp     eax, 0AAh ; 'ª'
.text:004050F2                 jg      short loc_405106
.text:004050F4                 cmp     eax, 0A4h ; '¤'
.text:004050F9                 jz      loc_40505D
.text:004050FF                 cmp     eax, 0A7h ; '§'
.text:00405104                 jmp     short loc_4050C3
.text:00405106 ; ---------------------------------------------------------------------------
.text:00405106
.text:00405106 loc_405106:                             ; CODE XREF: ___get_errno+1E2↑j
.text:00405106                 cmp     eax, 0B7h ; '·'
.text:0040510B                 jz      loc_405003
.text:00405111                 cmp     eax, 0B7h ; '·'
.text:00405116                 jl      loc_404F53
.text:0040511C                 sub     eax, 0BCh ; '¼'
.text:00405121                 cmp     eax, 0Eh
.text:00405124                 ja      loc_404F53
.text:0040512A                 jmp     loc_404F99
.text:0040512A ; ---------------------------------------------------------------------------
.text:0040512F                 align 10h
.text:00405130
.text:00405130 loc_405130:                             ; CODE XREF: ___get_errno+1D0↑j
.text:00405130                 cmp     eax, 46Bh
.text:00405135                 mov     edx, 24h ; '$'
.text:0040513A                 jz      loc_404F50
.text:00405140                 cmp     eax, 46Bh
.text:00405145                 jg      short loc_405161
.text:00405147                 cmp     eax, 0D7h ; '×'
.text:0040514C                 jz      loc_40505D
.text:00405152                 mov     edx, 5
.text:00405157                 cmp     eax, 45Dh
.text:0040515C                 jmp     loc_404FC1
.text:00405161 ; ---------------------------------------------------------------------------
.text:00405161
.text:00405161 loc_405161:                             ; CODE XREF: ___get_errno+235↑j
.text:00405161                 cmp     eax, 4D5h
.text:00405166                 mov     edx, 4
.text:0040516B                 jz      loc_404F50
.text:00405171                 cmp     eax, 4D5h
.text:00405176                 jg      short loc_405187
.text:00405178                 mov     edx, 13h
.text:0040517D                 cmp     eax, 4B0h
.text:00405182                 jmp     loc_404FC1
.text:00405187 ; ---------------------------------------------------------------------------
.text:00405187
.text:00405187 loc_405187:                             ; CODE XREF: ___get_errno+266↑j
.text:00405187                 cmp     eax, 718h
.text:0040518C                 jnz     loc_404F53
.text:00405192                 jmp     loc_404F79
.text:00405192 ___get_errno    endp
.text:00405192
.text:00405192 ; ---------------------------------------------------------------------------
.text:00405197                 align 10h
.text:004051A0
.text:004051A0 ; =============== S U B R O U T I N E =======================================
.text:004051A0
.text:004051A0
.text:004051A0 sub_4051A0      proc near               ; CODE XREF: sub_404EC0:loc_404EEA↑p
.text:004051A0
.text:004051A0 var_C           = dword ptr -0Ch
.text:004051A0
.text:004051A0                 sub     esp, 0Ch
.text:004051A3                 call    GetLastError
.text:004051A8                 mov     [esp+0Ch+var_C], eax
.text:004051AB                 call    ___get_errno
.text:004051B0                 add     esp, 0Ch
.text:004051B3                 retn
.text:004051B3 sub_4051A0      endp
.text:004051B3
.text:004051B3 ; ---------------------------------------------------------------------------
.text:004051B4                 align 10h
.text:004051C0
.text:004051C0 ; =============== S U B R O U T I N E =======================================
.text:004051C0
.text:004051C0 ; Attributes: thunk
.text:004051C0
.text:004051C0 ; size_t __cdecl mbrtowc(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.text:004051C0 mbrtowc         proc near               ; CODE XREF: sub_4034E0+757↑p
.text:004051C0
.text:004051C0 DstCh           = dword ptr  4
.text:004051C0 SrcCh           = dword ptr  8
.text:004051C0 SizeInBytes     = dword ptr  0Ch
.text:004051C0 State           = dword ptr  10h
.text:004051C0
.text:004051C0                 jmp     ds:__imp_mbrtowc
.text:004051C0 mbrtowc         endp
.text:004051C0
.text:004051C0 ; ---------------------------------------------------------------------------
.text:004051C6                 align 10h
.text:004051D0
.text:004051D0 ; =============== S U B R O U T I N E =======================================
.text:004051D0
.text:004051D0 ; Attributes: bp-based frame
.text:004051D0
.text:004051D0 sub_4051D0      proc near               ; CODE XREF: sub_401080+C2↑p
.text:004051D0                 push    ebp
.text:004051D1                 mov     ecx, offset byte_407000
.text:004051D6                 cmp     ecx, offset byte_407000
.text:004051DC                 mov     ebp, esp
.text:004051DE                 jnb     short loc_4051F6
.text:004051E0
.text:004051E0 loc_4051E0:                             ; CODE XREF: sub_4051D0+24↓j
.text:004051E0                 mov     edx, [ecx+4]
.text:004051E3                 mov     eax, [ecx]
.text:004051E5                 add     ecx, 8
.text:004051E8                 add     [edx+400000h], eax
.text:004051EE                 cmp     ecx, offset byte_407000
.text:004051F4                 jb      short loc_4051E0
.text:004051F6
.text:004051F6 loc_4051F6:                             ; CODE XREF: sub_4051D0+E↑j
.text:004051F6                 pop     ebp
.text:004051F7                 retn
.text:004051F7 sub_4051D0      endp
.text:004051F7
.text:004051F7 ; ---------------------------------------------------------------------------
.text:004051F8                 align 10h
.text:00405200
.text:00405200 ; =============== S U B R O U T I N E =======================================
.text:00405200
.text:00405200 ; Attributes: bp-based frame
.text:00405200
.text:00405200 sub_405200      proc near               ; CODE XREF: sub_401080+16↑p
.text:00405200                                         ; TopLevelExceptionFilter+D7↑p
.text:00405200                 push    ebp
.text:00405201                 mov     ebp, esp
.text:00405203                 fninit
.text:00405205                 pop     ebp
.text:00405206                 retn
.text:00405206 sub_405200      endp
.text:00405206
.text:00405206 ; ---------------------------------------------------------------------------
.text:00405207                 align 10h
.text:00405210
.text:00405210 ; =============== S U B R O U T I N E =======================================
.text:00405210
.text:00405210 ; Attributes: bp-based frame
.text:00405210
.text:00405210 ; void __cdecl sub_405210()
.text:00405210 sub_405210      proc near               ; DATA XREF: .text:loc_405259↓o
.text:00405210                                         ; sub_4052A0:loc_4052CE↓o
.text:00405210                 push    ebp
.text:00405211                 mov     ebp, esp
.text:00405213                 sub     esp, 8
.text:00405216                 mov     eax, off_406084
.text:0040521B                 mov     edx, [eax]
.text:0040521D                 test    edx, edx
.text:0040521F                 jnz     short loc_405225
.text:00405221
.text:00405221 loc_405221:                             ; CODE XREF: sub_405210+2C↓j
.text:00405221                 mov     esp, ebp
.text:00405223                 pop     ebp
.text:00405224                 retn
.text:00405225 ; ---------------------------------------------------------------------------
.text:00405225
.text:00405225 loc_405225:                             ; CODE XREF: sub_405210+F↑j
.text:00405225                                         ; sub_405210+2A↓j
.text:00405225                 call    dword ptr [eax]
.text:00405227                 mov     edx, off_406084
.text:0040522D                 mov     ecx, [edx+4]
.text:00405230                 lea     eax, [edx+4]
.text:00405233                 mov     off_406084, eax
.text:00405238                 test    ecx, ecx
.text:0040523A                 jnz     short loc_405225
.text:0040523C                 jmp     short loc_405221
.text:0040523C sub_405210      endp
.text:0040523C
.text:0040523C ; ---------------------------------------------------------------------------
.text:0040523E                 align 10h
.text:00405240                 push    ebp
.text:00405241                 mov     ebp, esp
.text:00405243                 sub     esp, 8
.text:00405246                 mov     [ebp-4], ebx
.text:00405249                 mov     eax, ds:dword_405590
.text:0040524E                 cmp     eax, 0FFFFFFFFh
.text:00405251                 jz      short loc_40527C
.text:00405253
.text:00405253 loc_405253:                             ; CODE XREF: .text:00405286↓j
.text:00405253                                         ; .text:00405299↓j
.text:00405253                 test    eax, eax
.text:00405255                 mov     ebx, eax
.text:00405257                 jnz     short loc_405270
.text:00405259
.text:00405259 loc_405259:                             ; CODE XREF: .text:0040527A↓j
.text:00405259                 mov     dword ptr [esp], offset sub_405210
.text:00405260                 call    sub_401040
.text:00405265                 mov     ebx, [ebp-4]
.text:00405268                 mov     esp, ebp
.text:0040526A                 pop     ebp
.text:0040526B                 retn
.text:0040526B ; ---------------------------------------------------------------------------
.text:0040526C                 align 10h
.text:00405270
.text:00405270 loc_405270:                             ; CODE XREF: .text:00405257↑j
.text:00405270                                         ; .text:00405278↓j
.text:00405270                 call    ds:dword_405590[ebx*4]
.text:00405277                 dec     ebx
.text:00405278                 jnz     short loc_405270
.text:0040527A                 jmp     short loc_405259
.text:0040527C ; ---------------------------------------------------------------------------
.text:0040527C
.text:0040527C loc_40527C:                             ; CODE XREF: .text:00405251↑j
.text:0040527C                 mov     ecx, ds:dword_405594
.text:00405282                 xor     eax, eax
.text:00405284                 test    ecx, ecx
.text:00405286                 jz      short loc_405253
.text:00405288                 mov     edx, offset dword_405590
.text:0040528D                 lea     esi, [esi+0]
.text:00405290
.text:00405290 loc_405290:                             ; CODE XREF: .text:00405297↓j
.text:00405290                 inc     eax
.text:00405291                 mov     ecx, [edx+eax*4+4]
.text:00405295                 test    ecx, ecx
.text:00405297                 jnz     short loc_405290
.text:00405299                 jmp     short loc_405253
.text:00405299 ; ---------------------------------------------------------------------------
.text:0040529B                 align 10h
.text:004052A0
.text:004052A0 ; =============== S U B R O U T I N E =======================================
.text:004052A0
.text:004052A0 ; Attributes: bp-based frame
.text:004052A0
.text:004052A0 sub_4052A0      proc near               ; CODE XREF: sub_4016E0+1B↑p
.text:004052A0
.text:004052A0 var_8           = dword ptr -8
.text:004052A0 var_4           = dword ptr -4
.text:004052A0
.text:004052A0                 push    ebp
.text:004052A1                 mov     ebp, esp
.text:004052A3                 sub     esp, 8
.text:004052A6                 mov     [ebp+var_4], ebx
.text:004052A9                 mov     edx, dword_406080
.text:004052AF                 test    edx, edx
.text:004052B1                 jnz     short loc_4052DA
.text:004052B3                 mov     eax, ds:dword_405590
.text:004052B8                 mov     edx, 1
.text:004052BD                 mov     dword_406080, edx
.text:004052C3                 cmp     eax, 0FFFFFFFFh
.text:004052C6                 jz      short loc_4052ED
.text:004052C8
.text:004052C8 loc_4052C8:                             ; CODE XREF: sub_4052A0+57↓j
.text:004052C8                                         ; sub_4052A0+69↓j
.text:004052C8                 test    eax, eax
.text:004052CA                 mov     ebx, eax
.text:004052CC                 jnz     short loc_4052E1
.text:004052CE
.text:004052CE loc_4052CE:                             ; CODE XREF: sub_4052A0+4B↓j
.text:004052CE                 mov     [esp+8+var_8], offset sub_405210 ; void (__cdecl *)()
.text:004052D5                 call    sub_401040
.text:004052DA
.text:004052DA loc_4052DA:                             ; CODE XREF: sub_4052A0+11↑j
.text:004052DA                 mov     ebx, [ebp+var_4]
.text:004052DD                 mov     esp, ebp
.text:004052DF                 pop     ebp
.text:004052E0                 retn
.text:004052E1 ; ---------------------------------------------------------------------------
.text:004052E1
.text:004052E1 loc_4052E1:                             ; CODE XREF: sub_4052A0+2C↑j
.text:004052E1                                         ; sub_4052A0+49↓j
.text:004052E1                 call    ds:dword_405590[ebx*4]
.text:004052E8                 dec     ebx
.text:004052E9                 jnz     short loc_4052E1
.text:004052EB                 jmp     short loc_4052CE
.text:004052ED ; ---------------------------------------------------------------------------
.text:004052ED
.text:004052ED loc_4052ED:                             ; CODE XREF: sub_4052A0+26↑j
.text:004052ED                 mov     ecx, ds:dword_405594
.text:004052F3                 xor     eax, eax
.text:004052F5                 test    ecx, ecx
.text:004052F7                 jz      short loc_4052C8
.text:004052F9                 mov     edx, offset dword_405590
.text:004052FE                 mov     esi, esi
.text:00405300
.text:00405300 loc_405300:                             ; CODE XREF: sub_4052A0+67↓j
.text:00405300                 inc     eax
.text:00405301                 mov     ebx, [edx+eax*4+4]
.text:00405305                 test    ebx, ebx
.text:00405307                 jnz     short loc_405300
.text:00405309                 jmp     short loc_4052C8
.text:00405309 sub_4052A0      endp
.text:00405309
.text:00405309 ; ---------------------------------------------------------------------------
.text:0040530B                 align 10h
.text:00405310
.text:00405310 ; =============== S U B R O U T I N E =======================================
.text:00405310
.text:00405310 ; Attributes: info_from_lumina
.text:00405310
.text:00405310 ; void *__cdecl _alloca(size_t Size)
.text:00405310 __alloca        proc near               ; CODE XREF: sub_4016E0+16↑p
.text:00405310                 push    ecx
.text:00405311                 mov     ecx, esp
.text:00405313                 add     ecx, 8
.text:00405316
.text:00405316 loc_405316:                             ; CODE XREF: __alloca+1B↓j
.text:00405316                 cmp     eax, 1000h
.text:0040531B                 jb      short loc_40532D
.text:0040531D                 sub     ecx, 1000h
.text:00405323                 or      dword ptr [ecx], 0
.text:00405326                 sub     eax, 1000h
.text:0040532B                 jmp     short loc_405316
.text:0040532D ; ---------------------------------------------------------------------------
.text:0040532D
.text:0040532D loc_40532D:                             ; CODE XREF: __alloca+B↑j
.text:0040532D                 sub     ecx, eax
.text:0040532F                 or      dword ptr [ecx], 0
.text:00405332                 mov     eax, esp
.text:00405334                 mov     esp, ecx
.text:00405336                 mov     ecx, [eax]
.text:00405338                 mov     eax, [eax+4]
.text:0040533B                 jmp     eax
.text:0040533B __alloca        endp
.text:0040533B
.text:0040533B ; ---------------------------------------------------------------------------
.text:0040533D                 align 10h
.text:00405340                 jmp     ds:__set_app_type
.text:00405340 ; ---------------------------------------------------------------------------
.text:00405346                 align 10h
.text:00405350
.text:00405350 ; =============== S U B R O U T I N E =======================================
.text:00405350
.text:00405350 ; Attributes: thunk
.text:00405350
.text:00405350 ; void __cdecl cexit()
.text:00405350 _cexit          proc near               ; CODE XREF: .text:0040116C↑p
.text:00405350                 jmp     ds:__imp__cexit
.text:00405350 _cexit          endp
.text:00405350
.text:00405350 ; ---------------------------------------------------------------------------
.text:00405356                 align 10h
.text:00405360
.text:00405360 ; =============== S U B R O U T I N E =======================================
.text:00405360
.text:00405360 ; Attributes: thunk
.text:00405360
.text:00405360 ; char ***__cdecl _p__environ()
.text:00405360 __p__environ    proc near               ; CODE XREF: sub_401080+C7↑p
.text:00405360                 jmp     ds:__imp___p__environ
.text:00405360 __p__environ    endp
.text:00405360
.text:00405360 ; ---------------------------------------------------------------------------
.text:00405366                 align 10h
.text:00405370
.text:00405370 ; =============== S U B R O U T I N E =======================================
.text:00405370
.text:00405370 ; Attributes: thunk
.text:00405370
.text:00405370 ; _crt_signal_t __cdecl signal(int Signal, _crt_signal_t Function)
.text:00405370 signal          proc near               ; CODE XREF: TopLevelExceptionFilter+4D↑p
.text:00405370                                         ; TopLevelExceptionFilter+88↑p ...
.text:00405370
.text:00405370 Signal          = dword ptr  4
.text:00405370 Function        = dword ptr  8
.text:00405370
.text:00405370                 jmp     ds:__imp_signal
.text:00405370 signal          endp
.text:00405370
.text:00405370 ; ---------------------------------------------------------------------------
.text:00405376                 align 10h
.text:00405380
.text:00405380 ; =============== S U B R O U T I N E =======================================
.text:00405380
.text:00405380 ; Attributes: thunk
.text:00405380
.text:00405380 ; int *__cdecl _p__fmode()
.text:00405380 __p__fmode      proc near               ; CODE XREF: sub_401080:loc_401135↑p
.text:00405380                 jmp     ds:__imp___p__fmode
.text:00405380 __p__fmode      endp
.text:00405380
.text:00405380 ; ---------------------------------------------------------------------------
.text:00405386                 align 10h
.text:00405390
.text:00405390 ; =============== S U B R O U T I N E =======================================
.text:00405390
.text:00405390 ; Attributes: thunk
.text:00405390
.text:00405390 ; int __cdecl setmode(int FileHandle, int Mode)
.text:00405390 _setmode        proc near               ; CODE XREF: sub_401080+70↑p
.text:00405390                                         ; sub_401080+90↑p ...
.text:00405390
.text:00405390 FileHandle      = dword ptr  4
.text:00405390 Mode            = dword ptr  8
.text:00405390
.text:00405390                 jmp     ds:__imp__setmode
.text:00405390 _setmode        endp
.text:00405390
.text:00405390 ; ---------------------------------------------------------------------------
.text:00405396                 align 10h
.text:004053A0
.text:004053A0 ; =============== S U B R O U T I N E =======================================
.text:004053A0
.text:004053A0 ; Attributes: thunk
.text:004053A0
.text:004053A0 __getmainargs   proc near               ; CODE XREF: sub_401080+49↑p
.text:004053A0                 jmp     ds:__imp___getmainargs
.text:004053A0 __getmainargs   endp
.text:004053A0
.text:004053A0 ; ---------------------------------------------------------------------------
.text:004053A6                 align 10h
.text:004053B0
.text:004053B0 ; =============== S U B R O U T I N E =======================================
.text:004053B0
.text:004053B0 ; Attributes: thunk
.text:004053B0
.text:004053B0 ; char *__cdecl setlocale(int Category, const char *Locale)
.text:004053B0 setlocale       proc near               ; CODE XREF: sub_4016E0+37↑p
.text:004053B0
.text:004053B0 Category        = dword ptr  4
.text:004053B0 Locale          = dword ptr  8
.text:004053B0
.text:004053B0                 jmp     ds:__imp_setlocale
.text:004053B0 setlocale       endp
.text:004053B0
.text:004053B0 ; ---------------------------------------------------------------------------
.text:004053B6                 align 10h
.text:004053C0
.text:004053C0 ; =============== S U B R O U T I N E =======================================
.text:004053C0
.text:004053C0 ; Attributes: noreturn thunk
.text:004053C0
.text:004053C0 ; void __cdecl __noreturn exit(int Code)
.text:004053C0 exit            proc near               ; CODE XREF: sub_4016E0:loc_4017E1↑p
.text:004053C0                                         ; .text:00401A7E↑p ...
.text:004053C0
.text:004053C0 Code            = dword ptr  4
.text:004053C0
.text:004053C0                 jmp     ds:__imp_exit
.text:004053C0 exit            endp
.text:004053C0
.text:004053C0 ; ---------------------------------------------------------------------------
.text:004053C6                 align 10h
.text:004053D0
.text:004053D0 ; =============== S U B R O U T I N E =======================================
.text:004053D0
.text:004053D0 ; Attributes: thunk
.text:004053D0
.text:004053D0 ; int __cdecl fputs(const char *Buffer, FILE *Stream)
.text:004053D0 fputs           proc near               ; CODE XREF: sub_4016E0+160↑p
.text:004053D0                                         ; sub_4016E0+182↑p ...
.text:004053D0
.text:004053D0 Buffer          = dword ptr  4
.text:004053D0 Stream          = dword ptr  8
.text:004053D0
.text:004053D0                 jmp     ds:__imp_fputs
.text:004053D0 fputs           endp
.text:004053D0
.text:004053D0 ; ---------------------------------------------------------------------------
.text:004053D6                 align 10h
.text:004053E0
.text:004053E0 ; =============== S U B R O U T I N E =======================================
.text:004053E0
.text:004053E0 ; Attributes: thunk
.text:004053E0
.text:004053E0 ; int printf(const char *const Format, ...)
.text:004053E0 printf          proc near               ; CODE XREF: sub_4016E0+13E↑p
.text:004053E0                                         ; sub_4016E0+1E3↑p ...
.text:004053E0
.text:004053E0 Format          = dword ptr  4
.text:004053E0
.text:004053E0                 jmp     ds:__imp_printf
.text:004053E0 printf          endp
.text:004053E0
.text:004053E0 ; ---------------------------------------------------------------------------
.text:004053E6                 align 10h
.text:004053F0
.text:004053F0 ; =============== S U B R O U T I N E =======================================
.text:004053F0
.text:004053F0 ; Attributes: thunk
.text:004053F0
.text:004053F0 ; int fprintf(FILE *const Stream, const char *const Format, ...)
.text:004053F0 fprintf         proc near               ; CODE XREF: sub_4016E0+F5↑p
.text:004053F0                                         ; .text:00401A76↑p ...
.text:004053F0
.text:004053F0 Stream          = dword ptr  4
.text:004053F0 Format          = dword ptr  8
.text:004053F0
.text:004053F0                 jmp     ds:__imp_fprintf
.text:004053F0 fprintf         endp
.text:004053F0
.text:004053F0 ; ---------------------------------------------------------------------------
.text:004053F6                 align 10h
.text:00405400
.text:00405400 ; =============== S U B R O U T I N E =======================================
.text:00405400
.text:00405400 ; Attributes: thunk
.text:00405400
.text:00405400 ; int *__cdecl errno()
.text:00405400 _errno          proc near               ; CODE XREF: sub_4016E0+29E↑p
.text:00405400                                         ; sub_4016E0+2D3↑p ...
.text:00405400                 jmp     ds:__imp__errno
.text:00405400 _errno          endp
.text:00405400
.text:00405400 ; ---------------------------------------------------------------------------
.text:00405406                 align 10h
.text:00405410
.text:00405410 ; =============== S U B R O U T I N E =======================================
.text:00405410
.text:00405410 ; Attributes: thunk
.text:00405410
.text:00405410 ; char *__cdecl strrchr(const char *Str, int Ch)
.text:00405410 strrchr         proc near               ; CODE XREF: sub_401B50+2B↑p
.text:00405410
.text:00405410 Str             = dword ptr  4
.text:00405410
.text:00405410                 jmp     ds:__imp_strrchr
.text:00405410 strrchr         endp
.text:00405410
.text:00405410 ; ---------------------------------------------------------------------------
.text:00405416                 align 10h
.text:00405420
.text:00405420 ; =============== S U B R O U T I N E =======================================
.text:00405420
.text:00405420 ; Attributes: thunk
.text:00405420
.text:00405420 ; size_t __cdecl strlen(const char *Str)
.text:00405420 strlen          proc near               ; CODE XREF: sub_401E90+2A9↑p
.text:00405420                                         ; sub_401E90+346↑p ...
.text:00405420
.text:00405420 Str             = dword ptr  4
.text:00405420
.text:00405420                 jmp     ds:__imp_strlen
.text:00405420 strlen          endp
.text:00405420
.text:00405420 ; ---------------------------------------------------------------------------
.text:00405426                 align 10h
.text:00405430
.text:00405430 ; =============== S U B R O U T I N E =======================================
.text:00405430
.text:00405430 ; Attributes: thunk
.text:00405430
.text:00405430 ; int __cdecl strncmp(const char *Str1, const char *Str2, size_t MaxCount)
.text:00405430 strncmp         proc near               ; CODE XREF: sub_401E90+23F↑p
.text:00405430                                         ; sub_401E90+699↑p
.text:00405430
.text:00405430 Str1            = dword ptr  4
.text:00405430 Str2            = dword ptr  8
.text:00405430 MaxCount        = dword ptr  0Ch
.text:00405430
.text:00405430                 jmp     ds:__imp_strncmp
.text:00405430 strncmp         endp
.text:00405430
.text:00405430 ; ---------------------------------------------------------------------------
.text:00405436                 align 10h
.text:00405440
.text:00405440 ; =============== S U B R O U T I N E =======================================
.text:00405440
.text:00405440 ; Attributes: thunk
.text:00405440
.text:00405440 ; char *__cdecl getenv(const char *VarName)
.text:00405440 getenv          proc near               ; CODE XREF: sub_401E90+B57↑p
.text:00405440
.text:00405440 VarName         = dword ptr  4
.text:00405440
.text:00405440                 jmp     ds:__imp_getenv
.text:00405440 getenv          endp
.text:00405440
.text:00405440 ; ---------------------------------------------------------------------------
.text:00405446                 align 10h
.text:00405450
.text:00405450 ; =============== S U B R O U T I N E =======================================
.text:00405450
.text:00405450 ; Attributes: thunk
.text:00405450
.text:00405450 ; char *__cdecl strchr(const char *Str, int Val)
.text:00405450 strchr          proc near               ; CODE XREF: sub_401E90+469↑p
.text:00405450                                         ; sub_401E90+53A↑p ...
.text:00405450
.text:00405450 Str             = dword ptr  4
.text:00405450 Val             = dword ptr  8
.text:00405450
.text:00405450                 jmp     ds:__imp_strchr
.text:00405450 strchr          endp
.text:00405450
.text:00405450 ; ---------------------------------------------------------------------------
.text:00405456                 align 10h
.text:00405460
.text:00405460 ; =============== S U B R O U T I N E =======================================
.text:00405460
.text:00405460 ; Attributes: thunk
.text:00405460
.text:00405460 ; int __cdecl vfprintf(FILE *const Stream, const char *const Format, va_list ArgList)
.text:00405460 vfprintf        proc near               ; CODE XREF: sub_402F50+C1↑p
.text:00405460                                         ; sub_404C20+49↑p ...
.text:00405460
.text:00405460 Stream          = dword ptr  4
.text:00405460 Format          = dword ptr  8
.text:00405460 ArgList         = dword ptr  0Ch
.text:00405460
.text:00405460                 jmp     ds:__imp_vfprintf
.text:00405460 vfprintf        endp
.text:00405460
.text:00405460 ; ---------------------------------------------------------------------------
.text:00405466                 align 10h
.text:00405470
.text:00405470 ; =============== S U B R O U T I N E =======================================
.text:00405470
.text:00405470 ; Attributes: noreturn thunk
.text:00405470
.text:00405470 ; void __cdecl __noreturn abort()
.text:00405470 abort           proc near               ; CODE XREF: sub_402F50:loc_402FEC↑p
.text:00405470                                         ; sub_404620:loc_4047DA↑p ...
.text:00405470                 jmp     ds:__imp_abort
.text:00405470 abort           endp
.text:00405470
.text:00405470 ; ---------------------------------------------------------------------------
.text:00405476                 align 10h
.text:00405480
.text:00405480 ; =============== S U B R O U T I N E =======================================
.text:00405480
.text:00405480 ; Attributes: thunk
.text:00405480
.text:00405480 ; int __cdecl flsbuf(int Ch, FILE *File)
.text:00405480 _flsbuf         proc near               ; CODE XREF: sub_402F50+128↑p
.text:00405480                                         ; sub_402F50+13A↑p ...
.text:00405480
.text:00405480 File            = dword ptr  8
.text:00405480
.text:00405480                 jmp     ds:__imp__flsbuf
.text:00405480 _flsbuf         endp
.text:00405480
.text:00405480 ; ---------------------------------------------------------------------------
.text:00405486                 align 10h
.text:00405490
.text:00405490 ; =============== S U B R O U T I N E =======================================
.text:00405490
.text:00405490 ; Attributes: thunk
.text:00405490
.text:00405490 ; int __cdecl fclose(FILE *Stream)
.text:00405490 fclose          proc near               ; CODE XREF: sub_4032D0+27↑p
.text:00405490
.text:00405490 Stream          = dword ptr  4
.text:00405490
.text:00405490                 jmp     ds:__imp_fclose
.text:00405490 fclose          endp
.text:00405490
.text:00405490 ; ---------------------------------------------------------------------------
.text:00405496                 align 10h
.text:004054A0
.text:004054A0 ; =============== S U B R O U T I N E =======================================
.text:004054A0
.text:004054A0 ; Attributes: thunk
.text:004054A0
.text:004054A0 ; void __cdecl free(void *Block)
.text:004054A0 free            proc near               ; CODE XREF: sub_404620+112↑p
.text:004054A0
.text:004054A0 Block           = dword ptr  4
.text:004054A0
.text:004054A0                 jmp     ds:__imp_free
.text:004054A0 free            endp
.text:004054A0
.text:004054A0 ; ---------------------------------------------------------------------------
.text:004054A6                 align 10h
.text:004054B0
.text:004054B0 ; =============== S U B R O U T I N E =======================================
.text:004054B0
.text:004054B0 ; Attributes: thunk
.text:004054B0
.text:004054B0 ; int __cdecl iswctype(wint_t C, wctype_t Type)
.text:004054B0 iswctype        proc near               ; CODE XREF: sub_4034E0+78B↑p
.text:004054B0
.text:004054B0 C               = word ptr  4
.text:004054B0 Type            = word ptr  8
.text:004054B0
.text:004054B0                 jmp     ds:__imp_iswctype
.text:004054B0 iswctype        endp
.text:004054B0
.text:004054B0 ; ---------------------------------------------------------------------------
.text:004054B6                 align 10h
.text:004054C0
.text:004054C0 ; =============== S U B R O U T I N E =======================================
.text:004054C0
.text:004054C0 ; Attributes: thunk
.text:004054C0
.text:004054C0 ; int __cdecl isctype(int C, int Type)
.text:004054C0 _isctype        proc near               ; CODE XREF: sub_4034E0+610↑p
.text:004054C0
.text:004054C0 C               = dword ptr  4
.text:004054C0 Type            = dword ptr  8
.text:004054C0
.text:004054C0                 jmp     ds:__imp__isctype
.text:004054C0 _isctype        endp
.text:004054C0
.text:004054C0 ; ---------------------------------------------------------------------------
.text:004054C6                 align 10h
.text:004054D0
.text:004054D0 ; =============== S U B R O U T I N E =======================================
.text:004054D0
.text:004054D0 ; Attributes: thunk
.text:004054D0
.text:004054D0 ; void *__cdecl memcpy(void *, const void *Src, size_t Size)
.text:004054D0 memcpy          proc near               ; CODE XREF: .text:00404A88↑p
.text:004054D0                                         ; .text:00404AD1↑p
.text:004054D0
.text:004054D0 Src             = dword ptr  8
.text:004054D0 Size            = dword ptr  0Ch
.text:004054D0
.text:004054D0                 jmp     ds:__imp_memcpy
.text:004054D0 memcpy          endp
.text:004054D0
.text:004054D0 ; ---------------------------------------------------------------------------
.text:004054D6                 align 10h
.text:004054E0
.text:004054E0 ; =============== S U B R O U T I N E =======================================
.text:004054E0
.text:004054E0 ; Attributes: thunk
.text:004054E0
.text:004054E0 ; void *__cdecl memset(void *, int Val, size_t Size)
.text:004054E0 memset          proc near               ; CODE XREF: .text:00404A06↑p
.text:004054E0
.text:004054E0 Val             = dword ptr  8
.text:004054E0 Size            = dword ptr  0Ch
.text:004054E0
.text:004054E0                 jmp     ds:__imp_memset
.text:004054E0 memset          endp
.text:004054E0
.text:004054E0 ; ---------------------------------------------------------------------------
.text:004054E6                 align 10h
.text:004054F0
.text:004054F0 ; =============== S U B R O U T I N E =======================================
.text:004054F0
.text:004054F0 ; Attributes: thunk
.text:004054F0
.text:004054F0 ; void *__cdecl calloc(size_t Count, size_t Size)
.text:004054F0 calloc          proc near               ; CODE XREF: .text:00404A43↑p
.text:004054F0
.text:004054F0 Count           = dword ptr  4
.text:004054F0 Size            = dword ptr  8
.text:004054F0
.text:004054F0                 jmp     ds:__imp_calloc
.text:004054F0 calloc          endp
.text:004054F0
.text:004054F0 ; ---------------------------------------------------------------------------
.text:004054F6                 align 10h
.text:00405500
.text:00405500 ; =============== S U B R O U T I N E =======================================
.text:00405500
.text:00405500 ; Attributes: thunk
.text:00405500
.text:00405500 ; void *__cdecl realloc(void *Block, size_t Size)
.text:00405500 realloc         proc near               ; CODE XREF: .text:00404940↑p
.text:00405500                                         ; sub_404970+16↑p ...
.text:00405500
.text:00405500 Block           = dword ptr  4
.text:00405500 Size            = dword ptr  8
.text:00405500
.text:00405500                 jmp     ds:__imp_realloc
.text:00405500 realloc         endp
.text:00405500
.text:00405500 ; ---------------------------------------------------------------------------
.text:00405506                 align 10h
.text:00405510
.text:00405510 ; =============== S U B R O U T I N E =======================================
.text:00405510
.text:00405510 ; Attributes: thunk
.text:00405510
.text:00405510 ; void *__cdecl malloc(size_t Size)
.text:00405510 malloc          proc near               ; CODE XREF: .text:004048C4↑p
.text:00405510                                         ; sub_4048E0+E↑p ...
.text:00405510
.text:00405510 Size            = dword ptr  4
.text:00405510
.text:00405510                 jmp     ds:__imp_malloc
.text:00405510 malloc          endp
.text:00405510
.text:00405510 ; ---------------------------------------------------------------------------
.text:00405516                 align 10h
.text:00405520
.text:00405520 ; =============== S U B R O U T I N E =======================================
.text:00405520
.text:00405520 ; Attributes: thunk
.text:00405520
.text:00405520 ; int __cdecl strcmp(const char *Str1, const char *Str2)
.text:00405520 strcmp          proc near               ; CODE XREF: sub_404D24+180↑p
.text:00405520
.text:00405520 Str1            = dword ptr  4
.text:00405520 Str2            = dword ptr  8
.text:00405520
.text:00405520                 jmp     ds:__imp_strcmp
.text:00405520 strcmp          endp
.text:00405520
.text:00405520 ; ---------------------------------------------------------------------------
.text:00405526                 align 10h
.text:00405530
.text:00405530 ; =============== S U B R O U T I N E =======================================
.text:00405530
.text:00405530 ; Attributes: thunk
.text:00405530
.text:00405530 ; int __cdecl fflush(FILE *Stream)
.text:00405530 fflush          proc near               ; CODE XREF: sub_404C20+19↑p
.text:00405530                                         ; sub_404C20+81↑p ...
.text:00405530
.text:00405530 Stream          = dword ptr  4
.text:00405530
.text:00405530                 jmp     ds:__imp_fflush
.text:00405530 fflush          endp
.text:00405530
.text:00405530 ; ---------------------------------------------------------------------------
.text:00405536                 align 10h
.text:00405540
.text:00405540 ; =============== S U B R O U T I N E =======================================
.text:00405540
.text:00405540 ; Attributes: thunk
.text:00405540
.text:00405540 ; char *__cdecl strerror(int ErrorMessage)
.text:00405540 strerror        proc near               ; CODE XREF: sub_404C20+A5↑p
.text:00405540                                         ; sub_404D24+10F↑p
.text:00405540
.text:00405540 ErrorMessage    = dword ptr  4
.text:00405540
.text:00405540                 jmp     ds:__imp_strerror
.text:00405540 strerror        endp
.text:00405540
.text:00405540 ; ---------------------------------------------------------------------------
.text:00405546                 align 10h
.text:00405550
.text:00405550 ; =============== S U B R O U T I N E =======================================
.text:00405550
.text:00405550 ; Attributes: thunk
.text:00405550
.text:00405550 ; LPTOP_LEVEL_EXCEPTION_FILTER __stdcall SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.text:00405550 SetUnhandledExceptionFilter proc near   ; CODE XREF: sub_401080+E↑p
.text:00405550
.text:00405550 lpTopLevelExceptionFilter= dword ptr  4
.text:00405550
.text:00405550                 jmp     ds:__imp_SetUnhandledExceptionFilter
.text:00405550 SetUnhandledExceptionFilter endp
.text:00405550
.text:00405550 ; ---------------------------------------------------------------------------
.text:00405556                 align 10h
.text:00405560
.text:00405560 ; =============== S U B R O U T I N E =======================================
.text:00405560
.text:00405560 ; Attributes: noreturn thunk
.text:00405560
.text:00405560 ; void __stdcall __noreturn ExitProcess(UINT uExitCode)
.text:00405560 ExitProcess     proc near               ; CODE XREF: .text:00401174↑p
.text:00405560
.text:00405560 uExitCode       = dword ptr  4
.text:00405560
.text:00405560                 jmp     ds:__imp_ExitProcess
.text:00405560 ExitProcess     endp
.text:00405560
.text:00405560 ; ---------------------------------------------------------------------------
.text:00405566                 align 10h
.text:00405570
.text:00405570 ; =============== S U B R O U T I N E =======================================
.text:00405570
.text:00405570 ; Attributes: thunk
.text:00405570
.text:00405570 ; BOOL __stdcall RemoveDirectoryA(LPCSTR lpPathName)
.text:00405570 RemoveDirectoryA proc near              ; CODE XREF: sub_404EC0+12↑p
.text:00405570
.text:00405570 lpPathName      = dword ptr  4
.text:00405570
.text:00405570                 jmp     ds:__imp_RemoveDirectoryA
.text:00405570 RemoveDirectoryA endp
.text:00405570
.text:00405570 ; ---------------------------------------------------------------------------
.text:00405576                 align 10h
.text:00405580
.text:00405580 ; =============== S U B R O U T I N E =======================================
.text:00405580
.text:00405580 ; Attributes: thunk
.text:00405580
.text:00405580 ; DWORD __stdcall GetLastError()
.text:00405580 GetLastError    proc near               ; CODE XREF: sub_4051A0+3↑p
.text:00405580                 jmp     ds:__imp_GetLastError
.text:00405580 GetLastError    endp
.text:00405580
.text:00405580 ; ---------------------------------------------------------------------------
.text:00405586                 align 10h
.text:00405590 dword_405590    dd 0FFFFFFFFh           ; DATA XREF: .text:00405249↑r
.text:00405590                                         ; .text:loc_405270↑r ...
.text:00405594 dword_405594    dd 0                    ; DATA XREF: .text:loc_40527C↑r
.text:00405594                                         ; sub_4052A0:loc_4052ED↑r
.text:00405598                 dd 0FFFFFFFFh
.text:0040559C dword_40559C    dd 19h dup(0)           ; DATA XREF: .data:off_406084↓o
.text:00405600                 dd 280h dup(?)
.text:00405600 _text           ends
.text:00405600
.data:00406000 ; Section 2. (virtual address 00006000)
.data:00406000 ; Virtual size                  : 000000A0 (    160.)
.data:00406000 ; Section size in file          : 00000200 (    512.)
.data:00406000 ; Offset to raw data for section: 00004A00
.data:00406000 ; Flags C0000040: Data Readable Writable
.data:00406000 ; Alignment     : default
.data:00406000 ; ===========================================================================
.data:00406000
.data:00406000 ; Segment type: Pure data
.data:00406000 ; Segment permissions: Read/Write
.data:00406000 _data           segment para public 'DATA' use32
.data:00406000                 assume cs:_data
.data:00406000                 ;org 406000h
.data:00406000 dword_406000    dd 0                    ; DATA XREF: sub_401080+1B↑o
.data:00406000                                         ; sub_401080+CC↑r
.data:00406004 dword_406004    dd 0                    ; DATA XREF: sub_401080+41↑o
.data:00406004                                         ; sub_401080+D4↑r
.data:00406008                 align 10h
.data:00406010 dword_406010    dd 1                    ; DATA XREF: sub_4016E0:loc_40191C↑r
.data:00406010                                         ; sub_4016E0:loc_401988↑r ...
.data:00406014 dword_406014    dd 1                    ; DATA XREF: sub_402A20+11↑r
.data:00406014                                         ; .text:00402AC1↑r
.data:00406018 dword_406018    dd 3Fh                  ; DATA XREF: sub_402A20+7D↑w
.data:00406018                                         ; .text:00402B2D↑w
.data:0040601C                 align 10h
.data:00406020 ; char *Buffer
.data:00406020 Buffer          dd offset aCopyrightC2005
.data:00406020                                         ; DATA XREF: sub_402F50+DC↑r
.data:00406020                                         ; "Copyright (C) 2005 Free Software Founda"...
.data:00406024                 align 10h
.data:00406030 ; int Code
.data:00406030 Code            dd 1                    ; DATA XREF: sub_4032D0+6D↑r
.data:00406030                                         ; sub_4032D0+9A↑r ...
.data:00406034                 align 10h
.data:00406040 dword_406040    dd 1                    ; DATA XREF: sub_404620+22↑r
.data:00406040                                         ; sub_404620+65↑r ...
.data:00406044 dword_406044    dd 100h                 ; DATA XREF: sub_404620+3F↑o
.data:00406044                                         ; sub_404620+1A2↑r ...
.data:00406048 off_406048      dd offset unk_407070    ; DATA XREF: sub_404620+1AA↑r
.data:0040604C ; void *off_40604C
.data:0040604C off_40604C      dd offset dword_406044  ; DATA XREF: sub_404620+39↑r
.data:0040604C                                         ; sub_404620+60↑w ...
.data:00406050 dword_406050    dd 0FFFFFFFFh           ; DATA XREF: sub_401080+22↑r
.data:00406054                 align 10h
.data:00406060 ; int Mode
.data:00406060 Mode            dd 0                    ; DATA XREF: sub_401080+4E↑r
.data:00406060                                         ; sub_401080+80↑r ...
.data:00406064                 align 10h
.data:00406070 dword_406070    dd 4000h                ; DATA XREF: sub_401080+57↑w
.data:00406070                                         ; sub_401080+BA↑r
.data:00406074                 align 10h
.data:00406080 dword_406080    dd 0                    ; DATA XREF: sub_4052A0+9↑r
.data:00406080                                         ; sub_4052A0+1D↑w
.data:00406084 off_406084      dd offset dword_40559C  ; DATA XREF: sub_405210+6↑r
.data:00406084                                         ; sub_405210+17↑r ...
.data:00406088                 align 1000h
.data:00406088 _data           ends
.data:00406088
.bss:00407000 ; Section 3. (virtual address 00007000)
.bss:00407000 ; Virtual size                  : 00000260 (    608.)
.bss:00407000 ; Section size in file          : 00000000 (      0.)
.bss:00407000 ; Offset to raw data for section: 00000000
.bss:00407000 ; Flags C0000080: Bss Readable Writable
.bss:00407000 ; Alignment     : default
.bss:00407000 ; ===========================================================================
.bss:00407000
.bss:00407000 ; Segment type: Uninitialized
.bss:00407000 ; Segment permissions: Read/Write
.bss:00407000 _bss            segment para public 'BSS' use32
.bss:00407000                 assume cs:_bss
.bss:00407000                 ;org 407000h
.bss:00407000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00407000 byte_407000     db ?                    ; DATA XREF: sub_4016E0+6A↑w
.bss:00407000                                         ; sub_4016E0:loc_401910↑w ...
.bss:00407001                 align 10h
.bss:00407010 byte_407010     db ?                    ; DATA XREF: sub_4016E0+C5↑w
.bss:00407010                                         ; sub_4016E0+295↑r ...
.bss:00407011                 align 10h
.bss:00407020 byte_407020     db ?                    ; DATA XREF: sub_4016E0:loc_4017E6↑w
.bss:00407020                                         ; sub_4016E0:loc_401953↑r ...
.bss:00407021                 align 10h
.bss:00407030 dword_407030    dd ?                    ; DATA XREF: sub_402A20+9↑o
.bss:00407030                                         ; sub_402A20+17↑w ...
.bss:00407034 dword_407034    dd ?                    ; DATA XREF: sub_402A20+21↑w
.bss:00407034                                         ; .text:00402AD9↑w
.bss:00407038 dword_407038    dd ?                    ; DATA XREF: sub_402A20+77↑r
.bss:00407038                                         ; .text:00402B27↑r
.bss:0040703C dword_40703C    dd ?                    ; DATA XREF: sub_402A20+6B↑r
.bss:0040703C                                         ; .text:00402B1B↑r
.bss:00407040                 db    ? ;
.bss:00407041                 db    ? ;
.bss:00407042                 db    ? ;
.bss:00407043                 db    ? ;
.bss:00407044                 db    ? ;
.bss:00407045                 db    ? ;
.bss:00407046                 db    ? ;
.bss:00407047                 db    ? ;
.bss:00407048                 db    ? ;
.bss:00407049                 db    ? ;
.bss:0040704A                 db    ? ;
.bss:0040704B                 db    ? ;
.bss:0040704C                 db    ? ;
.bss:0040704D                 db    ? ;
.bss:0040704E                 db    ? ;
.bss:0040704F                 db    ? ;
.bss:00407050                 db    ? ;
.bss:00407051                 db    ? ;
.bss:00407052                 db    ? ;
.bss:00407053                 db    ? ;
.bss:00407054                 db    ? ;
.bss:00407055                 db    ? ;
.bss:00407056                 db    ? ;
.bss:00407057                 db    ? ;
.bss:00407058                 db    ? ;
.bss:00407059                 db    ? ;
.bss:0040705A                 db    ? ;
.bss:0040705B                 db    ? ;
.bss:0040705C                 db    ? ;
.bss:0040705D                 db    ? ;
.bss:0040705E                 db    ? ;
.bss:0040705F                 db    ? ;
.bss:00407060 ; char *dword_407060
.bss:00407060 dword_407060    dd ?                    ; DATA XREF: .text:004032A4↑w
.bss:00407060                                         ; sub_4032D0+58↑r
.bss:00407064                 align 10h
.bss:00407070 unk_407070      db    ? ;               ; DATA XREF: sub_404620+100↑o
.bss:00407070                                         ; .data:off_406048↑o
.bss:00407071                 db    ? ;
.bss:00407072                 db    ? ;
.bss:00407073                 db    ? ;
.bss:00407074                 db    ? ;
.bss:00407075                 db    ? ;
.bss:00407076                 db    ? ;
.bss:00407077                 db    ? ;
.bss:00407078                 db    ? ;
.bss:00407079                 db    ? ;
.bss:0040707A                 db    ? ;
.bss:0040707B                 db    ? ;
.bss:0040707C                 db    ? ;
.bss:0040707D                 db    ? ;
.bss:0040707E                 db    ? ;
.bss:0040707F                 db    ? ;
.bss:00407080                 db    ? ;
.bss:00407081                 db    ? ;
.bss:00407082                 db    ? ;
.bss:00407083                 db    ? ;
.bss:00407084                 db    ? ;
.bss:00407085                 db    ? ;
.bss:00407086                 db    ? ;
.bss:00407087                 db    ? ;
.bss:00407088                 db    ? ;
.bss:00407089                 db    ? ;
.bss:0040708A                 db    ? ;
.bss:0040708B                 db    ? ;
.bss:0040708C                 db    ? ;
.bss:0040708D                 db    ? ;
.bss:0040708E                 db    ? ;
.bss:0040708F                 db    ? ;
.bss:00407090                 db    ? ;
.bss:00407091                 db    ? ;
.bss:00407092                 db    ? ;
.bss:00407093                 db    ? ;
.bss:00407094                 db    ? ;
.bss:00407095                 db    ? ;
.bss:00407096                 db    ? ;
.bss:00407097                 db    ? ;
.bss:00407098                 db    ? ;
.bss:00407099                 db    ? ;
.bss:0040709A                 db    ? ;
.bss:0040709B                 db    ? ;
.bss:0040709C                 db    ? ;
.bss:0040709D                 db    ? ;
.bss:0040709E                 db    ? ;
.bss:0040709F                 db    ? ;
.bss:004070A0                 db    ? ;
.bss:004070A1                 db    ? ;
.bss:004070A2                 db    ? ;
.bss:004070A3                 db    ? ;
.bss:004070A4                 db    ? ;
.bss:004070A5                 db    ? ;
.bss:004070A6                 db    ? ;
.bss:004070A7                 db    ? ;
.bss:004070A8                 db    ? ;
.bss:004070A9                 db    ? ;
.bss:004070AA                 db    ? ;
.bss:004070AB                 db    ? ;
.bss:004070AC                 db    ? ;
.bss:004070AD                 db    ? ;
.bss:004070AE                 db    ? ;
.bss:004070AF                 db    ? ;
.bss:004070B0                 db    ? ;
.bss:004070B1                 db    ? ;
.bss:004070B2                 db    ? ;
.bss:004070B3                 db    ? ;
.bss:004070B4                 db    ? ;
.bss:004070B5                 db    ? ;
.bss:004070B6                 db    ? ;
.bss:004070B7                 db    ? ;
.bss:004070B8                 db    ? ;
.bss:004070B9                 db    ? ;
.bss:004070BA                 db    ? ;
.bss:004070BB                 db    ? ;
.bss:004070BC                 db    ? ;
.bss:004070BD                 db    ? ;
.bss:004070BE                 db    ? ;
.bss:004070BF                 db    ? ;
.bss:004070C0                 db    ? ;
.bss:004070C1                 db    ? ;
.bss:004070C2                 db    ? ;
.bss:004070C3                 db    ? ;
.bss:004070C4                 db    ? ;
.bss:004070C5                 db    ? ;
.bss:004070C6                 db    ? ;
.bss:004070C7                 db    ? ;
.bss:004070C8                 db    ? ;
.bss:004070C9                 db    ? ;
.bss:004070CA                 db    ? ;
.bss:004070CB                 db    ? ;
.bss:004070CC                 db    ? ;
.bss:004070CD                 db    ? ;
.bss:004070CE                 db    ? ;
.bss:004070CF                 db    ? ;
.bss:004070D0                 db    ? ;
.bss:004070D1                 db    ? ;
.bss:004070D2                 db    ? ;
.bss:004070D3                 db    ? ;
.bss:004070D4                 db    ? ;
.bss:004070D5                 db    ? ;
.bss:004070D6                 db    ? ;
.bss:004070D7                 db    ? ;
.bss:004070D8                 db    ? ;
.bss:004070D9                 db    ? ;
.bss:004070DA                 db    ? ;
.bss:004070DB                 db    ? ;
.bss:004070DC                 db    ? ;
.bss:004070DD                 db    ? ;
.bss:004070DE                 db    ? ;
.bss:004070DF                 db    ? ;
.bss:004070E0                 db    ? ;
.bss:004070E1                 db    ? ;
.bss:004070E2                 db    ? ;
.bss:004070E3                 db    ? ;
.bss:004070E4                 db    ? ;
.bss:004070E5                 db    ? ;
.bss:004070E6                 db    ? ;
.bss:004070E7                 db    ? ;
.bss:004070E8                 db    ? ;
.bss:004070E9                 db    ? ;
.bss:004070EA                 db    ? ;
.bss:004070EB                 db    ? ;
.bss:004070EC                 db    ? ;
.bss:004070ED                 db    ? ;
.bss:004070EE                 db    ? ;
.bss:004070EF                 db    ? ;
.bss:004070F0                 db    ? ;
.bss:004070F1                 db    ? ;
.bss:004070F2                 db    ? ;
.bss:004070F3                 db    ? ;
.bss:004070F4                 db    ? ;
.bss:004070F5                 db    ? ;
.bss:004070F6                 db    ? ;
.bss:004070F7                 db    ? ;
.bss:004070F8                 db    ? ;
.bss:004070F9                 db    ? ;
.bss:004070FA                 db    ? ;
.bss:004070FB                 db    ? ;
.bss:004070FC                 db    ? ;
.bss:004070FD                 db    ? ;
.bss:004070FE                 db    ? ;
.bss:004070FF                 db    ? ;
.bss:00407100                 db    ? ;
.bss:00407101                 db    ? ;
.bss:00407102                 db    ? ;
.bss:00407103                 db    ? ;
.bss:00407104                 db    ? ;
.bss:00407105                 db    ? ;
.bss:00407106                 db    ? ;
.bss:00407107                 db    ? ;
.bss:00407108                 db    ? ;
.bss:00407109                 db    ? ;
.bss:0040710A                 db    ? ;
.bss:0040710B                 db    ? ;
.bss:0040710C                 db    ? ;
.bss:0040710D                 db    ? ;
.bss:0040710E                 db    ? ;
.bss:0040710F                 db    ? ;
.bss:00407110                 db    ? ;
.bss:00407111                 db    ? ;
.bss:00407112                 db    ? ;
.bss:00407113                 db    ? ;
.bss:00407114                 db    ? ;
.bss:00407115                 db    ? ;
.bss:00407116                 db    ? ;
.bss:00407117                 db    ? ;
.bss:00407118                 db    ? ;
.bss:00407119                 db    ? ;
.bss:0040711A                 db    ? ;
.bss:0040711B                 db    ? ;
.bss:0040711C                 db    ? ;
.bss:0040711D                 db    ? ;
.bss:0040711E                 db    ? ;
.bss:0040711F                 db    ? ;
.bss:00407120                 db    ? ;
.bss:00407121                 db    ? ;
.bss:00407122                 db    ? ;
.bss:00407123                 db    ? ;
.bss:00407124                 db    ? ;
.bss:00407125                 db    ? ;
.bss:00407126                 db    ? ;
.bss:00407127                 db    ? ;
.bss:00407128                 db    ? ;
.bss:00407129                 db    ? ;
.bss:0040712A                 db    ? ;
.bss:0040712B                 db    ? ;
.bss:0040712C                 db    ? ;
.bss:0040712D                 db    ? ;
.bss:0040712E                 db    ? ;
.bss:0040712F                 db    ? ;
.bss:00407130                 db    ? ;
.bss:00407131                 db    ? ;
.bss:00407132                 db    ? ;
.bss:00407133                 db    ? ;
.bss:00407134                 db    ? ;
.bss:00407135                 db    ? ;
.bss:00407136                 db    ? ;
.bss:00407137                 db    ? ;
.bss:00407138                 db    ? ;
.bss:00407139                 db    ? ;
.bss:0040713A                 db    ? ;
.bss:0040713B                 db    ? ;
.bss:0040713C                 db    ? ;
.bss:0040713D                 db    ? ;
.bss:0040713E                 db    ? ;
.bss:0040713F                 db    ? ;
.bss:00407140                 db    ? ;
.bss:00407141                 db    ? ;
.bss:00407142                 db    ? ;
.bss:00407143                 db    ? ;
.bss:00407144                 db    ? ;
.bss:00407145                 db    ? ;
.bss:00407146                 db    ? ;
.bss:00407147                 db    ? ;
.bss:00407148                 db    ? ;
.bss:00407149                 db    ? ;
.bss:0040714A                 db    ? ;
.bss:0040714B                 db    ? ;
.bss:0040714C                 db    ? ;
.bss:0040714D                 db    ? ;
.bss:0040714E                 db    ? ;
.bss:0040714F                 db    ? ;
.bss:00407150                 db    ? ;
.bss:00407151                 db    ? ;
.bss:00407152                 db    ? ;
.bss:00407153                 db    ? ;
.bss:00407154                 db    ? ;
.bss:00407155                 db    ? ;
.bss:00407156                 db    ? ;
.bss:00407157                 db    ? ;
.bss:00407158                 db    ? ;
.bss:00407159                 db    ? ;
.bss:0040715A                 db    ? ;
.bss:0040715B                 db    ? ;
.bss:0040715C                 db    ? ;
.bss:0040715D                 db    ? ;
.bss:0040715E                 db    ? ;
.bss:0040715F                 db    ? ;
.bss:00407160                 db    ? ;
.bss:00407161                 db    ? ;
.bss:00407162                 db    ? ;
.bss:00407163                 db    ? ;
.bss:00407164                 db    ? ;
.bss:00407165                 db    ? ;
.bss:00407166                 db    ? ;
.bss:00407167                 db    ? ;
.bss:00407168                 db    ? ;
.bss:00407169                 db    ? ;
.bss:0040716A                 db    ? ;
.bss:0040716B                 db    ? ;
.bss:0040716C                 db    ? ;
.bss:0040716D                 db    ? ;
.bss:0040716E                 db    ? ;
.bss:0040716F                 db    ? ;
.bss:00407170 dword_407170    dd ?                    ; DATA XREF: .text:loc_403FB1↑o
.bss:00407170                                         ; .text:loc_403FD0↑o ...
.bss:00407174 dword_407174    dd ?                    ; DATA XREF: .text:loc_404050↑o
.bss:00407174                                         ; .text:004044D8↑r ...
.bss:00407178 dword_407178    dd ?                    ; DATA XREF: .text:004044D2↑r
.bss:00407178                                         ; sub_404580+2C↑r
.bss:0040717C dword_40717C    dd ?                    ; DATA XREF: .text:004044C6↑r
.bss:0040717C                                         ; sub_404580+22↑r
.bss:00407180 dword_407180    dd ?                    ; DATA XREF: .text:004044E2↑r
.bss:00407180                                         ; sub_404580+36↑r
.bss:00407184 dword_407184    dd ?                    ; DATA XREF: .text:004044F2↑r
.bss:00407184                                         ; sub_404580+4E↑r
.bss:00407188 dword_407188    dd ?                    ; DATA XREF: .text:0040450F↑r
.bss:00407188                                         ; sub_404580+62↑r
.bss:0040718C dword_40718C    dd ?                    ; DATA XREF: .text:00404505↑r
.bss:0040718C                                         ; sub_404580+70↑r
.bss:00407190 dword_407190    dd ?                    ; DATA XREF: .text:004044E8↑r
.bss:00407190                                         ; sub_404580+7A↑r
.bss:00407194                 align 10h
.bss:004071A0 ; char *Str1
.bss:004071A0 Str1            dd ?                    ; DATA XREF: sub_404D24:loc_404D5D↑w
.bss:004071A0                                         ; sub_404D24:loc_404E90↑r
.bss:004071A4                 align 10h
.bss:004071B0 dword_4071B0    dd ?                    ; DATA XREF: sub_404D24+2D↑r
.bss:004071B0                                         ; sub_404D24+3F↑w
.bss:004071B4                 align 10h
.bss:004071C0 dword_4071C0    dd ?                    ; DATA XREF: sub_4016E0+31↑w
.bss:004071C0                                         ; sub_4016E0+E1↑r ...
.bss:004071C4                 align 20h
.bss:004071E0 dword_4071E0    dd ?                    ; DATA XREF: sub_402A20+71↑w
.bss:004071E0                                         ; .text:00402B21↑w
.bss:004071E4                 align 10h
.bss:004071F0 dword_4071F0    dd ?                    ; CODE XREF: sub_404D24+63↑p
.bss:004071F0                                         ; DATA XREF: sub_404C20+1E↑r ...
.bss:004071F4                 align 10h
.bss:00407200 dword_407200    dd ?                    ; DATA XREF: sub_404C20+4E↑w
.bss:00407200                                         ; sub_404D24+AB↑w
.bss:00407204                 db    ? ;
.bss:00407205                 db    ? ;
.bss:00407206                 db    ? ;
.bss:00407207                 db    ? ;
.bss:00407208                 db    ? ;
.bss:00407209                 db    ? ;
.bss:0040720A                 db    ? ;
.bss:0040720B                 db    ? ;
.bss:0040720C                 db    ? ;
.bss:0040720D                 db    ? ;
.bss:0040720E                 db    ? ;
.bss:0040720F                 db    ? ;
.bss:00407210                 db    ? ;
.bss:00407211                 db    ? ;
.bss:00407212                 db    ? ;
.bss:00407213                 db    ? ;
.bss:00407214                 db    ? ;
.bss:00407215                 db    ? ;
.bss:00407216                 db    ? ;
.bss:00407217                 db    ? ;
.bss:00407218                 db    ? ;
.bss:00407219                 db    ? ;
.bss:0040721A                 db    ? ;
.bss:0040721B                 db    ? ;
.bss:0040721C                 db    ? ;
.bss:0040721D                 db    ? ;
.bss:0040721E                 db    ? ;
.bss:0040721F                 db    ? ;
.bss:00407220                 db    ? ;
.bss:00407221                 db    ? ;
.bss:00407222                 db    ? ;
.bss:00407223                 db    ? ;
.bss:00407224                 db    ? ;
.bss:00407225                 db    ? ;
.bss:00407226                 db    ? ;
.bss:00407227                 db    ? ;
.bss:00407228                 db    ? ;
.bss:00407229                 db    ? ;
.bss:0040722A                 db    ? ;
.bss:0040722B                 db    ? ;
.bss:0040722C                 db    ? ;
.bss:0040722D                 db    ? ;
.bss:0040722E                 db    ? ;
.bss:0040722F                 db    ? ;
.bss:00407230 dword_407230    dd ?                    ; DATA XREF: sub_404D24+13↑r
.bss:00407234                 align 1000h
.bss:00407234 _bss            ends
.bss:00407234
.idata:00408000 ; Section 4. (virtual address 00008000)
.idata:00408000 ; Virtual size                  : 00000578 (   1400.)
.idata:00408000 ; Section size in file          : 00000600 (   1536.)
.idata:00408000 ; Offset to raw data for section: 00004C00
.idata:00408000 ; Flags C0000040: Data Readable Writable
.idata:00408000 ; Alignment     : default
.idata:00408000 ; ===========================================================================
.idata:00408000
.idata:00408000 ; Segment type: Externs
.idata:00408000 ; _idata
.idata:00408000
.idata:00408001
.idata:00408140 ;
.idata:00408140 ; Imports from libintl3.dll
.idata:00408140 ;
.idata:00408140                 extrn __imp_libintl_bindtextdomain:dword
.idata:00408140                                         ; CODE XREF: sub_4016E0+4B↑p
.idata:00408140                                         ; DATA XREF: sub_4016E0+4B↑r ...
.idata:00408144                 extrn libintl_gettext:dword
.idata:00408144                                         ; CODE XREF: sub_4016E0+D5↑p
.idata:00408144                                         ; sub_4016E0+12B↑p ...
.idata:00408148                 extrn libintl_textdomain:dword
.idata:00408148                                         ; CODE XREF: sub_4016E0+58↑p
.idata:00408148                                         ; DATA XREF: sub_4016E0+58↑r ...
.idata:0040814C
.idata:00408154 ;
.idata:00408154 ; Imports from KERNEL32.dll
.idata:00408154 ;
.idata:00408154 ; void (__stdcall __noreturn *ExitProcess)(UINT uExitCode)
.idata:00408154                 extrn __imp_ExitProcess:dword
.idata:00408154                                         ; DATA XREF: ExitProcess↑r
.idata:00408158 ; DWORD (__stdcall *GetLastError)()
.idata:00408158                 extrn __imp_GetLastError:dword
.idata:00408158                                         ; DATA XREF: GetLastError↑r
.idata:0040815C ; BOOL (__stdcall *RemoveDirectoryA)(LPCSTR lpPathName)
.idata:0040815C                 extrn __imp_RemoveDirectoryA:dword
.idata:0040815C                                         ; DATA XREF: RemoveDirectoryA↑r
.idata:00408160 ; LPTOP_LEVEL_EXCEPTION_FILTER (__stdcall *SetUnhandledExceptionFilter)(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.idata:00408160                 extrn __imp_SetUnhandledExceptionFilter:dword
.idata:00408160                                         ; DATA XREF: SetUnhandledExceptionFilter↑r
.idata:00408164
.idata:0040816C ;
.idata:0040816C ; Imports from MSVCP60.DLL
.idata:0040816C ;
.idata:0040816C ; size_t (__cdecl *mbrtowc)(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.idata:0040816C                 extrn __imp_mbrtowc:dword
.idata:0040816C                                         ; DATA XREF: mbrtowc↑r
.idata:00408170
.idata:00408178 ;
.idata:00408178 ; Imports from msvcrt.dll
.idata:00408178 ;
.idata:00408178                 extrn __imp___getmainargs:dword
.idata:00408178                                         ; DATA XREF: __getmainargs↑r
.idata:0040817C ; int _mb_cur_max
.idata:0040817C                 extrn __mb_cur_max:dword
.idata:0040817C                                         ; DATA XREF: sub_4034E0+7↑r
.idata:0040817C                                         ; sub_4034E0+5F3↑r
.idata:00408180 ; char ***(__cdecl *__p__environ)()
.idata:00408180                 extrn __imp___p__environ:dword
.idata:00408180                                         ; DATA XREF: __p__environ↑r
.idata:00408184 ; int *(__cdecl *__p__fmode)()
.idata:00408184                 extrn __imp___p__fmode:dword
.idata:00408184                                         ; DATA XREF: __p__fmode↑r
.idata:00408188 ; void (__cdecl *_set_app_type)(_crt_app_type Type)
.idata:00408188                 extrn __set_app_type:dword
.idata:00408188                                         ; CODE XREF: start+D↑p
.idata:00408188                                         ; .text:0040102D↑p
.idata:00408188                                         ; DATA XREF: ...
.idata:0040818C ; void (__cdecl *_cexit)()
.idata:0040818C                 extrn __imp__cexit:dword
.idata:0040818C                                         ; DATA XREF: _cexit↑r
.idata:00408190 ; int *(__cdecl *_errno)()
.idata:00408190                 extrn __imp__errno:dword
.idata:00408190                                         ; DATA XREF: _errno↑r
.idata:00408194 ; int (__cdecl *_flsbuf)(int Ch, FILE *File)
.idata:00408194                 extrn __imp__flsbuf:dword
.idata:00408194                                         ; DATA XREF: _flsbuf↑r
.idata:00408198 ; FILE iob[]
.idata:00408198                 extrn _iob:dword        ; DATA XREF: sub_401080+5C↑r
.idata:00408198                                         ; sub_401080+75↑r ...
.idata:0040819C ; int (__cdecl *_isctype)(int C, int Type)
.idata:0040819C                 extrn __imp__isctype:dword
.idata:0040819C                                         ; DATA XREF: _isctype↑r
.idata:004081A0 ; _onexit_t (__cdecl *onexit)(_onexit_t Func)
.idata:004081A0                 extrn _onexit:dword     ; CODE XREF: .text:0040106C↑p
.idata:004081A0                                         ; DATA XREF: .text:0040106C↑r
.idata:004081A4 ; const unsigned __int16 *pctype
.idata:004081A4                 extrn _pctype:dword     ; DATA XREF: sub_4034E0:loc_403BD4↑r
.idata:004081A8 ; int (__cdecl *_setmode)(int FileHandle, int Mode)
.idata:004081A8                 extrn __imp__setmode:dword
.idata:004081A8                                         ; DATA XREF: _setmode↑r
.idata:004081AC ; void (__cdecl __noreturn *abort)()
.idata:004081AC                 extrn __imp_abort:dword ; DATA XREF: abort↑r
.idata:004081B0 ; int (__cdecl *atexit)(void (__cdecl *)())
.idata:004081B0                 extrn atexit:dword      ; CODE XREF: sub_401040+C↑p
.idata:004081B0                                         ; DATA XREF: sub_401040+C↑r
.idata:004081B4 ; void *(__cdecl *calloc)(size_t Count, size_t Size)
.idata:004081B4                 extrn __imp_calloc:dword
.idata:004081B4                                         ; DATA XREF: calloc↑r
.idata:004081B8 ; void (__cdecl __noreturn *exit)(int Code)
.idata:004081B8                 extrn __imp_exit:dword  ; DATA XREF: exit↑r
.idata:004081BC ; int (__cdecl *fclose)(FILE *Stream)
.idata:004081BC                 extrn __imp_fclose:dword
.idata:004081BC                                         ; DATA XREF: fclose↑r
.idata:004081C0 ; int (__cdecl *fflush)(FILE *Stream)
.idata:004081C0                 extrn __imp_fflush:dword
.idata:004081C0                                         ; DATA XREF: fflush↑r
.idata:004081C4 ; int (*fprintf)(FILE *const Stream, const char *const Format, ...)
.idata:004081C4                 extrn __imp_fprintf:dword
.idata:004081C4                                         ; DATA XREF: fprintf↑r
.idata:004081C8 ; int (__cdecl *fputs)(const char *Buffer, FILE *Stream)
.idata:004081C8                 extrn __imp_fputs:dword ; DATA XREF: fputs↑r
.idata:004081CC ; void (__cdecl *free)(void *Block)
.idata:004081CC                 extrn __imp_free:dword  ; DATA XREF: free↑r
.idata:004081D0 ; char *(__cdecl *getenv)(const char *VarName)
.idata:004081D0                 extrn __imp_getenv:dword
.idata:004081D0                                         ; DATA XREF: getenv↑r
.idata:004081D4 ; int (__cdecl *iswctype)(wint_t C, wctype_t Type)
.idata:004081D4                 extrn __imp_iswctype:dword
.idata:004081D4                                         ; DATA XREF: iswctype↑r
.idata:004081D8 ; void *(__cdecl *malloc)(size_t Size)
.idata:004081D8                 extrn __imp_malloc:dword
.idata:004081D8                                         ; DATA XREF: malloc↑r
.idata:004081DC ; void *(__cdecl *memcpy)(void *, const void *Src, size_t Size)
.idata:004081DC                 extrn __imp_memcpy:dword
.idata:004081DC                                         ; DATA XREF: memcpy↑r
.idata:004081E0 ; void *(__cdecl *memset)(void *, int Val, size_t Size)
.idata:004081E0                 extrn __imp_memset:dword
.idata:004081E0                                         ; DATA XREF: memset↑r
.idata:004081E4 ; int (*printf)(const char *const Format, ...)
.idata:004081E4                 extrn __imp_printf:dword
.idata:004081E4                                         ; DATA XREF: printf↑r
.idata:004081E8 ; void *(__cdecl *realloc)(void *Block, size_t Size)
.idata:004081E8                 extrn __imp_realloc:dword
.idata:004081E8                                         ; DATA XREF: realloc↑r
.idata:004081EC ; char *(__cdecl *setlocale)(int Category, const char *Locale)
.idata:004081EC                 extrn __imp_setlocale:dword
.idata:004081EC                                         ; DATA XREF: setlocale↑r
.idata:004081F0 ; _crt_signal_t (__cdecl *signal)(int Signal, _crt_signal_t Function)
.idata:004081F0                 extrn __imp_signal:dword
.idata:004081F0                                         ; DATA XREF: signal↑r
.idata:004081F4 ; char *(__cdecl *strchr)(const char *Str, int Val)
.idata:004081F4                 extrn __imp_strchr:dword
.idata:004081F4                                         ; DATA XREF: strchr↑r
.idata:004081F8 ; int (__cdecl *strcmp)(const char *Str1, const char *Str2)
.idata:004081F8                 extrn __imp_strcmp:dword
.idata:004081F8                                         ; DATA XREF: strcmp↑r
.idata:004081FC ; char *(__cdecl *strerror)(int ErrorMessage)
.idata:004081FC                 extrn __imp_strerror:dword
.idata:004081FC                                         ; DATA XREF: strerror↑r
.idata:00408200 ; size_t (__cdecl *strlen)(const char *Str)
.idata:00408200                 extrn __imp_strlen:dword
.idata:00408200                                         ; DATA XREF: strlen↑r
.idata:00408204 ; int (__cdecl *strncmp)(const char *Str1, const char *Str2, size_t MaxCount)
.idata:00408204                 extrn __imp_strncmp:dword
.idata:00408204                                         ; DATA XREF: strncmp↑r
.idata:00408208 ; char *(__cdecl *strrchr)(const char *Str, int Ch)
.idata:00408208                 extrn __imp_strrchr:dword
.idata:00408208                                         ; DATA XREF: strrchr↑r
.idata:0040820C ; int (__cdecl *vfprintf)(FILE *const Stream, const char *const Format, va_list ArgList)
.idata:0040820C                 extrn __imp_vfprintf:dword
.idata:0040820C                                         ; DATA XREF: vfprintf↑r
.idata:00408210
.idata:00408210
.idata:00408210
.idata:00408210                 end start
