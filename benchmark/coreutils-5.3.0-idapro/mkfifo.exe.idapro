.text:00401000 ;
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
.text:00401000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
.text:00401000 ; |                      License info: 48-357D-7BC4-C6                      |
.text:00401000 ; |                              Virginia Tech                              |
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ;
.text:00401000 ; Input SHA256 : 48ABB5537A3EAB18B9FB1DCC77473917F7D0DE20B5713E7A74177C1FA158A11F
.text:00401000 ; Input MD5    : 21E26ECCDE4407319C61DBD58CAEF815
.text:00401000 ; Input CRC32  : FCD3006F
.text:00401000
.text:00401000 ; File Name   : /home/cindy/Documents/Projects/binary_cmc/benchmark/coreutils-5.3.0-bin/bin/mkfifo.exe
.text:00401000 ; Format      : Portable executable for 80386 (PE)
.text:00401000 ; Imagebase   : 400000
.text:00401000 ; Timestamp   : 4266A249 (Wed Apr 20 18:41:13 2005)
.text:00401000 ; Section 1. (virtual address 00001000)
.text:00401000 ; Virtual size                  : 0000CA30 (  51760.)
.text:00401000 ; Section size in file          : 0000CC00 (  52224.)
.text:00401000 ; Offset to raw data for section: 00000400
.text:00401000 ; Flags 60000020: Text Executable Readable
.text:00401000 ; Alignment     : default
.text:00401000
.text:00401000                 .686p
.text:00401000                 .mmx
.text:00401000                 .model flat
.text:00401000
.text:00401000 ; ===========================================================================
.text:00401000
.text:00401000 ; Segment type: Pure code
.text:00401000 ; Segment permissions: Read/Execute
.text:00401000 _text           segment para public 'CODE' use32
.text:00401000                 assume cs:_text
.text:00401000                 ;org 401000h
.text:00401000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00401000
.text:00401000 ; =============== S U B R O U T I N E =======================================
.text:00401000
.text:00401000 ; Attributes: noreturn bp-based frame
.text:00401000
.text:00401000                 public start
.text:00401000 start           proc near
.text:00401000
.text:00401000 Type            = dword ptr -8
.text:00401000
.text:00401000                 push    ebp
.text:00401001                 mov     ebp, esp
.text:00401003                 sub     esp, 8
.text:00401006                 mov     [esp+8+Type], 1 ; Type
.text:0040100D                 call    ds:__set_app_type
.text:00401013                 call    sub_401080
.text:00401013 start           endp
.text:00401013
.text:00401018 ; ---------------------------------------------------------------------------
.text:00401018                 mov     esp, ebp
.text:0040101A                 xor     eax, eax
.text:0040101C                 pop     ebp
.text:0040101D                 retn
.text:0040101D ; ---------------------------------------------------------------------------
.text:0040101E                 align 10h
.text:00401020                 push    ebp
.text:00401021                 mov     ebp, esp
.text:00401023                 sub     esp, 8
.text:00401026                 mov     dword ptr [esp], 2
.text:0040102D                 call    ds:__set_app_type
.text:00401033                 call    sub_401080
.text:00401038 ; ---------------------------------------------------------------------------
.text:00401038                 mov     esp, ebp
.text:0040103A                 xor     eax, eax
.text:0040103C                 pop     ebp
.text:0040103D                 retn
.text:0040103D ; ---------------------------------------------------------------------------
.text:0040103E                 align 10h
.text:00401040
.text:00401040 ; =============== S U B R O U T I N E =======================================
.text:00401040
.text:00401040 ; Attributes: bp-based frame
.text:00401040
.text:00401040 ; int __cdecl sub_401040(void (__cdecl *)())
.text:00401040 sub_401040      proc near               ; CODE XREF: sub_4015E0+67↓p
.text:00401040                                         ; .text:0040CCA0↓p ...
.text:00401040
.text:00401040 var_8           = dword ptr -8
.text:00401040 arg_0           = dword ptr  8
.text:00401040
.text:00401040                 push    ebp
.text:00401041                 mov     ebp, esp
.text:00401043                 sub     esp, 8
.text:00401046                 mov     edx, [ebp+arg_0]
.text:00401049                 mov     [esp+8+var_8], edx ; void (__cdecl *)()
.text:0040104C                 call    ds:atexit
.text:00401052                 mov     esp, ebp
.text:00401054                 pop     ebp
.text:00401055                 retn
.text:00401055 sub_401040      endp
.text:00401055
.text:00401055 ; ---------------------------------------------------------------------------
.text:00401056                 align 10h
.text:00401060                 push    ebp
.text:00401061                 mov     ebp, esp
.text:00401063                 sub     esp, 8
.text:00401066                 mov     edx, [ebp+8]
.text:00401069                 mov     [esp], edx
.text:0040106C                 call    ds:_onexit
.text:00401072                 mov     esp, ebp
.text:00401074                 pop     ebp
.text:00401075                 retn
.text:00401075 ; ---------------------------------------------------------------------------
.text:00401076                 align 10h
.text:00401080
.text:00401080 ; =============== S U B R O U T I N E =======================================
.text:00401080
.text:00401080 ; Attributes: noreturn bp-based frame
.text:00401080
.text:00401080 sub_401080      proc near               ; CODE XREF: start+13↑p
.text:00401080                                         ; .text:00401033↑p
.text:00401080
.text:00401080 lpTopLevelExceptionFilter= dword ptr -28h
.text:00401080 Mode            = dword ptr -24h
.text:00401080 var_20          = dword ptr -20h
.text:00401080 var_1C          = dword ptr -1Ch
.text:00401080 var_18          = dword ptr -18h
.text:00401080 var_C           = byte ptr -0Ch
.text:00401080 var_8           = dword ptr -8
.text:00401080
.text:00401080                 push    ebp
.text:00401081                 mov     ebp, esp
.text:00401083                 push    ebx
.text:00401084                 sub     esp, 24h
.text:00401087                 mov     [esp+28h+lpTopLevelExceptionFilter], offset TopLevelExceptionFilter ; lpTopLevelExceptionFilter
.text:0040108E                 call    SetUnhandledExceptionFilter
.text:00401093                 sub     esp, 4
.text:00401096                 call    sub_40CC40
.text:0040109B                 mov     [esp+28h+lpTopLevelExceptionFilter], offset dword_40E000
.text:004010A2                 mov     edx, dword_40E090
.text:004010A8                 lea     ecx, [ebp+var_8]
.text:004010AB                 mov     [ebp+var_8], 0
.text:004010B2                 mov     [esp+28h+var_18], ecx
.text:004010B6                 mov     [esp+28h+var_1C], edx
.text:004010BA                 lea     edx, [ebp+var_C]
.text:004010BD                 mov     [esp+28h+var_20], edx
.text:004010C1                 mov     [esp+28h+Mode], offset dword_40E004
.text:004010C9                 call    __getmainargs
.text:004010CE                 mov     eax, Mode
.text:004010D3                 test    eax, eax
.text:004010D5                 jz      short loc_401135
.text:004010D7                 mov     dword_40E0B0, eax
.text:004010DC                 mov     edx, ds:_iob
.text:004010E2                 test    edx, edx
.text:004010E4                 jz      short loc_4010FB
.text:004010E6                 mov     [esp+28h+Mode], eax ; Mode
.text:004010EA                 mov     ebx, [edx+10h]
.text:004010ED                 mov     [esp+28h+lpTopLevelExceptionFilter], ebx ; FileHandle
.text:004010F0                 call    _setmode
.text:004010F5                 mov     edx, ds:_iob
.text:004010FB
.text:004010FB loc_4010FB:                             ; CODE XREF: sub_401080+64↑j
.text:004010FB                 cmp     edx, 0FFFFFFE0h
.text:004010FE                 jz      short loc_40111B
.text:00401100                 mov     ebx, Mode
.text:00401106                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040110A                 mov     ecx, [edx+30h]
.text:0040110D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401110                 call    _setmode
.text:00401115                 mov     edx, ds:_iob
.text:0040111B
.text:0040111B loc_40111B:                             ; CODE XREF: sub_401080+7E↑j
.text:0040111B                 cmp     edx, 0FFFFFFC0h
.text:0040111E                 jz      short loc_401135
.text:00401120                 mov     ebx, Mode
.text:00401126                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040112A                 mov     ecx, [edx+50h]
.text:0040112D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401130                 call    _setmode
.text:00401135
.text:00401135 loc_401135:                             ; CODE XREF: sub_401080+55↑j
.text:00401135                                         ; sub_401080+9E↑j
.text:00401135                 call    __p__fmode
.text:0040113A                 mov     ecx, dword_40E0B0
.text:00401140                 mov     [eax], ecx
.text:00401142                 call    sub_40CC10
.text:00401147                 call    __p__environ
.text:0040114C                 mov     edx, dword_40E000
.text:00401152                 mov     ebx, [eax]
.text:00401154                 mov     ecx, dword_40E004
.text:0040115A                 mov     [esp+28h+lpTopLevelExceptionFilter], edx
.text:0040115D                 mov     [esp+28h+var_20], ebx
.text:00401161                 mov     [esp+28h+Mode], ecx
.text:00401165                 call    sub_4015E0
.text:00401165 sub_401080      endp
.text:00401165
.text:0040116A ; ---------------------------------------------------------------------------
.text:0040116A                 mov     ebx, eax
.text:0040116C                 call    _cexit
.text:00401171                 mov     [esp], ebx
.text:00401174                 call    ExitProcess
.text:00401174 ; ---------------------------------------------------------------------------
.text:00401179                 align 10h
.text:00401180
.text:00401180 ; =============== S U B R O U T I N E =======================================
.text:00401180
.text:00401180 ; Attributes: bp-based frame
.text:00401180
.text:00401180 ; LONG __stdcall TopLevelExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo)
.text:00401180 TopLevelExceptionFilter proc near       ; DATA XREF: sub_401080+7↑o
.text:00401180
.text:00401180 Signal          = dword ptr -18h
.text:00401180 Function        = dword ptr -14h
.text:00401180 var_8           = dword ptr -8
.text:00401180 var_4           = dword ptr -4
.text:00401180 ExceptionInfo   = dword ptr  8
.text:00401180
.text:00401180                 push    ebp
.text:00401181                 mov     ebp, esp
.text:00401183                 sub     esp, 18h
.text:00401186                 mov     [ebp+var_8], ebx
.text:00401189                 mov     ecx, [ebp+ExceptionInfo]
.text:0040118C                 xor     ebx, ebx
.text:0040118E                 mov     [ebp+var_4], esi
.text:00401191                 xor     esi, esi
.text:00401193                 mov     edx, [ecx]
.text:00401195                 mov     eax, [edx]
.text:00401197                 cmp     eax, 0C0000091h
.text:0040119C                 ja      loc_401260
.text:004011A2                 cmp     eax, 0C000008Dh
.text:004011A7                 jnb     short loc_401210
.text:004011A9                 cmp     eax, 0C0000005h
.text:004011AE                 jz      short loc_4011BE
.text:004011B0
.text:004011B0 loc_4011B0:                             ; CODE XREF: TopLevelExceptionFilter+59↓j
.text:004011B0                                         ; TopLevelExceptionFilter+77↓j ...
.text:004011B0                 mov     eax, ebx
.text:004011B2                 mov     esi, [ebp+var_4]
.text:004011B5                 mov     ebx, [ebp+var_8]
.text:004011B8                 mov     esp, ebp
.text:004011BA                 pop     ebp
.text:004011BB                 retn    4
.text:004011BE ; ---------------------------------------------------------------------------
.text:004011BE
.text:004011BE loc_4011BE:                             ; CODE XREF: TopLevelExceptionFilter+2E↑j
.text:004011BE                 mov     [esp+18h+Function], 0 ; Function
.text:004011C6                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:004011CD                 call    signal
.text:004011D2                 cmp     eax, 1
.text:004011D5                 jz      short loc_4011F9
.text:004011D7                 test    eax, eax
.text:004011D9                 jz      short loc_4011B0
.text:004011DB                 mov     [esp+18h+Signal], 0Bh
.text:004011E2                 lea     esi, [esi+0]
.text:004011E9                 lea     edi, [edi+0]
.text:004011F0
.text:004011F0 loc_4011F0:                             ; CODE XREF: TopLevelExceptionFilter+BD↓j
.text:004011F0                 call    eax
.text:004011F2
.text:004011F2 loc_4011F2:                             ; CODE XREF: TopLevelExceptionFilter+8D↓j
.text:004011F2                                         ; TopLevelExceptionFilter+D5↓j ...
.text:004011F2                 mov     ebx, 0FFFFFFFFh
.text:004011F7                 jmp     short loc_4011B0
.text:004011F9 ; ---------------------------------------------------------------------------
.text:004011F9
.text:004011F9 loc_4011F9:                             ; CODE XREF: TopLevelExceptionFilter+55↑j
.text:004011F9                 mov     [esp+18h+Function], 1 ; Function
.text:00401201                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:00401208                 call    signal
.text:0040120D                 jmp     short loc_4011F2
.text:0040120D ; ---------------------------------------------------------------------------
.text:0040120F                 align 10h
.text:00401210
.text:00401210 loc_401210:                             ; CODE XREF: TopLevelExceptionFilter+27↑j
.text:00401210                                         ; TopLevelExceptionFilter+E5↓j
.text:00401210                 mov     esi, 1
.text:00401215
.text:00401215 loc_401215:                             ; CODE XREF: TopLevelExceptionFilter+EC↓j
.text:00401215                 mov     [esp+18h+Function], 0 ; Function
.text:0040121D                 mov     [esp+18h+Signal], 8 ; Signal
.text:00401224                 call    signal
.text:00401229                 cmp     eax, 1
.text:0040122C                 jz      short loc_40123F
.text:0040122E                 test    eax, eax
.text:00401230                 jz      loc_4011B0
.text:00401236                 mov     [esp+18h+Signal], 8
.text:0040123D                 jmp     short loc_4011F0
.text:0040123F ; ---------------------------------------------------------------------------
.text:0040123F
.text:0040123F loc_40123F:                             ; CODE XREF: TopLevelExceptionFilter+AC↑j
.text:0040123F                 mov     [esp+18h+Function], 1 ; Function
.text:00401247                 mov     [esp+18h+Signal], 8 ; Signal
.text:0040124E                 call    signal
.text:00401253                 test    esi, esi
.text:00401255                 jz      short loc_4011F2
.text:00401257                 call    sub_40CC40
.text:0040125C                 jmp     short loc_4011F2
.text:0040125C ; ---------------------------------------------------------------------------
.text:0040125E                 align 10h
.text:00401260
.text:00401260 loc_401260:                             ; CODE XREF: TopLevelExceptionFilter+1C↑j
.text:00401260                 cmp     eax, 0C0000093h
.text:00401265                 jz      short loc_401210
.text:00401267                 cmp     eax, 0C0000094h
.text:0040126C                 jz      short loc_401215
.text:0040126E                 jmp     loc_4011B0
.text:0040126E TopLevelExceptionFilter endp
.text:0040126E
.text:0040126E ; ---------------------------------------------------------------------------
.text:00401273                 align 10h
.text:00401280 aMode           db 'mode',0             ; DATA XREF: .text:off_4012A0↓o
.text:00401285 aHelp           db 'help',0             ; DATA XREF: .text:004012B0↓o
.text:0040128A aVersion        db 'version',0          ; DATA XREF: .text:004012C0↓o
.text:00401292                 align 10h
.text:004012A0 off_4012A0      dd offset aMode         ; DATA XREF: sub_4015E0+8E↓o
.text:004012A0                                         ; "mode"
.text:004012A4                 dd 1, 0
.text:004012AC                 dd 6Dh
.text:004012B0                 dd offset aHelp         ; "help"
.text:004012B4                 dd 2 dup(0)
.text:004012BC                 dd 0FFFFFF7Eh
.text:004012C0                 dd offset aVersion      ; "version"
.text:004012C4                 dd 2 dup(0)
.text:004012CC                 dd 0FFFFFF7Dh, 4 dup(0)
.text:004012E0 ; const char Locale
.text:004012E0 Locale          db 0                    ; DATA XREF: sub_4015E0+24↓o
.text:004012E1                 align 20h
.text:00401300 aCProgra1Coreut db 'c:/progra~1/CoreUtils/share/locale',0
.text:00401300                                         ; DATA XREF: sub_4015E0+3E↓o
.text:00401323 aCoreutils      db 'coreutils',0        ; DATA XREF: sub_4015E0+46↓o
.text:00401323                                         ; sub_4015E0+53↓o
.text:0040132D ; const char aM[]
.text:0040132D aM              db 'm:',0               ; DATA XREF: sub_4015E0+96↓o
.text:00401330                 align 20h
.text:00401340 aTrySHelpForMor db 'Try `%s --help',27h,' for more information.',0Ah,0
.text:00401340                                         ; DATA XREF: sub_4015E0:loc_4016B5↓o
.text:00401340                                         ; .text:004019FC↓o
.text:00401367 aDavidMackenzie db 'David MacKenzie',0  ; DATA XREF: sub_4015E0+122↓o
.text:00401377 a530            db '5.3.0',0            ; DATA XREF: sub_4015E0+12A↓o
.text:0040137D aGnuCoreutils   db 'GNU coreutils',0    ; DATA XREF: sub_4015E0+135↓o
.text:0040138B ; const FILE stru_40138B
.text:0040138B stru_40138B     FILE <69666B6Dh, 55006F66h, 65676173h, 7325203Ah, 504F5B20h, \
.text:0040138B                                         ; DATA XREF: sub_4015E0+13D↓o
.text:0040138B                                         ; sub_4015E0:loc_401736↓o ...
.text:0040138B                       4E4F4954h, 414E205Dh, 2E2E454Dh>
.text:004013AB                 db  2Eh ; .
.text:004013AC                 db  0Ah
.text:004013AD                 db    0
.text:004013AE                 align 20h
.text:004013C0 aCreateNamedPip db 'Create named pipes (FIFOs) with the given NAMEs.',0Ah
.text:004013C0                                         ; DATA XREF: sub_4015E0+175↓o
.text:004013C0                                         ; .text:00401A4F↓o
.text:004013C0                 db 0Ah,0
.text:004013F3                 align 10h
.text:00401400 aMandatoryArgum db 'Mandatory arguments to long options are mandatory for short optio'
.text:00401400                                         ; DATA XREF: sub_4015E0+197↓o
.text:00401400                                         ; .text:00401A71↓o
.text:00401400                 db 'ns too.',0Ah,0
.text:0040144A                 align 20h
.text:00401460 aMModeModeSetPe db '  -m, --mode=MODE   set permission mode (as in chmod), not a=rw -'
.text:00401460                                         ; DATA XREF: sub_4015E0+1B9↓o
.text:00401460                                         ; .text:00401A93↓o
.text:00401460                 db ' umask',0Ah,0
.text:004014A9                 align 20h
.text:004014C0 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.text:004014C0                                         ; DATA XREF: sub_4015E0+1DB↓o
.text:004014C0                                         ; .text:00401AB5↓o
.text:004014ED                 align 20h
.text:00401500 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.text:00401500                                         ; DATA XREF: sub_4015E0+1FD↓o
.text:00401500                                         ; .text:00401AD7↓o
.text:00401536 aReportBugsToS  db 0Ah                  ; DATA XREF: sub_4015E0+21F↓o
.text:00401536                                         ; .text:00401AF9↓o
.text:00401536                 db 'Report bugs to <%s>.',0Ah,0
.text:0040154D aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.text:0040154D                                         ; DATA XREF: sub_4015E0+22C↓o
.text:0040154D                                         ; .text:00401B06↓o
.text:00401563                 align 20h
.text:00401580 aCannotSetPermi db 'cannot set permissions of fifo %s',0
.text:00401580                                         ; DATA XREF: sub_4015E0+333↓o
.text:004015A2 aCannotCreateFi db 'cannot create fifo %s',0
.text:004015A2                                         ; DATA XREF: sub_4015E0+384↓o
.text:004015B8 aInvalidMode    db 'invalid mode',0     ; DATA XREF: sub_4015E0:loc_401996↓o
.text:004015C5 aMissingOperand db 'missing operand',0  ; DATA XREF: sub_4015E0:loc_4019C0↓o
.text:004015D5                 align 10h
.text:004015E0
.text:004015E0 ; =============== S U B R O U T I N E =======================================
.text:004015E0
.text:004015E0 ; Attributes: noreturn bp-based frame fuzzy-sp
.text:004015E0
.text:004015E0 sub_4015E0      proc near               ; CODE XREF: sub_401080+E5↑p
.text:004015E0
.text:004015E0 Category        = dword ptr -38h
.text:004015E0 Locale          = dword ptr -34h
.text:004015E0 var_30          = dword ptr -30h
.text:004015E0 var_2C          = byte ptr -2Ch
.text:004015E0 var_28          = byte ptr -28h
.text:004015E0 var_24          = dword ptr -24h
.text:004015E0 var_18          = dword ptr -18h
.text:004015E0 var_14          = dword ptr -14h
.text:004015E0 var_10          = word ptr -10h
.text:004015E0 arg_0           = dword ptr  8
.text:004015E0 arg_4           = dword ptr  0Ch
.text:004015E0
.text:004015E0                 push    ebp
.text:004015E1                 xor     eax, eax
.text:004015E3                 mov     ebp, esp
.text:004015E5                 push    edi
.text:004015E6                 push    esi
.text:004015E7                 push    ebx
.text:004015E8                 sub     esp, 2Ch
.text:004015EB                 and     esp, 0FFFFFFF0h
.text:004015EE                 call    __alloca
.text:004015F3                 call    sub_40CCE0
.text:004015F8                 mov     [ebp+var_18], 0
.text:004015FF                 mov     eax, [ebp+arg_4]
.text:00401602                 mov     ecx, [eax]
.text:00401604                 mov     [esp+38h+Locale], offset Locale ; Locale
.text:0040160C                 mov     [esp+38h+Category], 0 ; Category
.text:00401613                 mov     ds:dword_40F4B0, ecx
.text:00401619                 call    setlocale
.text:0040161E                 mov     [esp+38h+Locale], offset aCProgra1Coreut ; "c:/progra~1/CoreUtils/share/locale"
.text:00401626                 mov     [esp+38h+Category], offset aCoreutils ; "coreutils"
.text:0040162D                 call    ds:libintl_bindtextdomain
.text:00401633                 mov     [esp+38h+Category], offset aCoreutils ; "coreutils"
.text:0040163A                 call    ds:libintl_textdomain
.text:00401640                 mov     [esp+38h+Category], offset sub_403830 ; void (__cdecl *)()
.text:00401647                 call    sub_401040
.text:0040164C                 mov     [ebp+var_14], 0
.text:00401653                 lea     esi, [esi+0]
.text:00401659                 lea     edi, [edi+0]
.text:00401660
.text:00401660 loc_401660:                             ; CODE XREF: sub_4015E0+D3↓j
.text:00401660                 mov     dword ptr [esp+38h+var_28], 0 ; int
.text:00401668                 mov     eax, [ebp+arg_4]
.text:0040166B                 mov     esi, [ebp+arg_0]
.text:0040166E                 mov     dword ptr [esp+38h+var_2C], offset off_4012A0 ; char
.text:00401676                 mov     [esp+38h+var_30], offset aM ; "m:"
.text:0040167E                 mov     [esp+38h+Locale], eax ; int
.text:00401682                 mov     [esp+38h+Category], esi ; int
.text:00401685                 call    sub_4036C0
.text:0040168A                 cmp     eax, 0FFFFFFFFh
.text:0040168D                 jz      loc_401821
.text:00401693                 cmp     eax, 0FFFFFF7Eh
.text:00401698                 jz      loc_401736
.text:0040169E                 cmp     eax, 0FFFFFF7Eh
.text:004016A3                 jle     short loc_4016ED
.text:004016A5                 cmp     eax, 6Dh ; 'm'
.text:004016A8                 jnz     short loc_4016B5
.text:004016AA                 mov     edx, ds:dword_40F4D0
.text:004016B0                 mov     [ebp+var_14], edx
.text:004016B3                 jmp     short loc_401660
.text:004016B5 ; ---------------------------------------------------------------------------
.text:004016B5
.text:004016B5 loc_4016B5:                             ; CODE XREF: sub_4015E0+C8↑j
.text:004016B5                                         ; sub_4015E0+112↓j ...
.text:004016B5                 mov     [esp+38h+Category], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:004016BC                 call    ds:libintl_gettext
.text:004016C2                 mov     edi, ds:_iob
.text:004016C8                 mov     ecx, ds:dword_40F4B0
.text:004016CE                 add     edi, 40h ; '@'
.text:004016D1                 mov     [esp+38h+var_30], ecx
.text:004016D5                 mov     [esp+38h+Locale], eax ; Format
.text:004016D9                 mov     [esp+38h+Category], edi ; Stream
.text:004016DC                 call    fprintf
.text:004016E1                 mov     [esp+38h+Category], 1 ; Code
.text:004016E8
.text:004016E8 loc_4016E8:                             ; CODE XREF: sub_4015E0+154↓j
.text:004016E8                                         ; sub_4015E0+2C1↓j
.text:004016E8                 call    exit
.text:004016ED ; ---------------------------------------------------------------------------
.text:004016ED
.text:004016ED loc_4016ED:                             ; CODE XREF: sub_4015E0+C3↑j
.text:004016ED                 cmp     eax, 0FFFFFF7Dh
.text:004016F2                 jnz     short loc_4016B5
.text:004016F4                 mov     [esp+38h+var_24], 0
.text:004016FC                 mov     edx, ds:_iob
.text:00401702                 mov     dword ptr [esp+38h+var_28], offset aDavidMackenzie ; "David MacKenzie"
.text:0040170A                 mov     dword ptr [esp+38h+var_2C], offset a530 ; "5.3.0"
.text:00401712                 add     edx, 20h ; ' '
.text:00401715                 mov     [esp+38h+var_30], offset aGnuCoreutils ; "GNU coreutils"
.text:0040171D                 mov     [esp+38h+Locale], offset stru_40138B ; FILE *
.text:00401725                 mov     [esp+38h+Category], edx ; FILE *
.text:00401728                 call    sub_403680
.text:0040172D
.text:0040172D loc_40172D:                             ; CODE XREF: sub_4015E0+23C↓j
.text:0040172D                 mov     [esp+38h+Category], 0
.text:00401734                 jmp     short loc_4016E8
.text:00401736 ; ---------------------------------------------------------------------------
.text:00401736
.text:00401736 loc_401736:                             ; CODE XREF: sub_4015E0+B8↑j
.text:00401736                 mov     [esp+38h+Category], (offset stru_40138B._cnt+3)
.text:0040173D                 call    ds:libintl_gettext
.text:00401743                 mov     ebx, ds:dword_40F4B0
.text:00401749                 mov     [esp+38h+Category], eax ; Format
.text:0040174C                 mov     [esp+38h+Locale], ebx
.text:00401750                 call    printf
.text:00401755                 mov     [esp+38h+Category], offset aCreateNamedPip ; "Create named pipes (FIFOs) with the giv"...
.text:0040175C                 call    ds:libintl_gettext
.text:00401762                 mov     ecx, ds:_iob
.text:00401768                 add     ecx, 20h ; ' '
.text:0040176B                 mov     [esp+38h+Locale], ecx ; Stream
.text:0040176F                 mov     [esp+38h+Category], eax ; Buffer
.text:00401772                 call    fputs
.text:00401777                 mov     [esp+38h+Category], offset aMandatoryArgum ; "Mandatory arguments to long options are"...
.text:0040177E                 call    ds:libintl_gettext
.text:00401784                 mov     edi, ds:_iob
.text:0040178A                 add     edi, 20h ; ' '
.text:0040178D                 mov     [esp+38h+Locale], edi ; Stream
.text:00401791                 mov     [esp+38h+Category], eax ; Buffer
.text:00401794                 call    fputs
.text:00401799                 mov     [esp+38h+Category], offset aMModeModeSetPe ; "  -m, --mode=MODE   set permission mode"...
.text:004017A0                 call    ds:libintl_gettext
.text:004017A6                 mov     esi, ds:_iob
.text:004017AC                 add     esi, 20h ; ' '
.text:004017AF                 mov     [esp+38h+Locale], esi ; Stream
.text:004017B3                 mov     [esp+38h+Category], eax ; Buffer
.text:004017B6                 call    fputs
.text:004017BB                 mov     [esp+38h+Category], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:004017C2                 call    ds:libintl_gettext
.text:004017C8                 mov     ebx, ds:_iob
.text:004017CE                 add     ebx, 20h ; ' '
.text:004017D1                 mov     [esp+38h+Locale], ebx ; Stream
.text:004017D5                 mov     [esp+38h+Category], eax ; Buffer
.text:004017D8                 call    fputs
.text:004017DD                 mov     [esp+38h+Category], offset aVersionOutputV ; "      --version  output version informa"...
.text:004017E4                 call    ds:libintl_gettext
.text:004017EA                 mov     ecx, ds:_iob
.text:004017F0                 add     ecx, 20h ; ' '
.text:004017F3                 mov     [esp+38h+Locale], ecx ; Stream
.text:004017F7                 mov     [esp+38h+Category], eax ; Buffer
.text:004017FA                 call    fputs
.text:004017FF                 mov     [esp+38h+Category], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:00401806                 call    ds:libintl_gettext
.text:0040180C                 mov     [esp+38h+Locale], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:00401814                 mov     [esp+38h+Category], eax ; Format
.text:00401817                 call    printf
.text:0040181C                 jmp     loc_40172D
.text:00401821 ; ---------------------------------------------------------------------------
.text:00401821
.text:00401821 loc_401821:                             ; CODE XREF: sub_4015E0+AD↑j
.text:00401821                 mov     eax, dword_40E010
.text:00401826                 cmp     eax, [ebp+arg_0]
.text:00401829                 jz      loc_4019C0
.text:0040182F                 mov     dword ptr [ebp+var_10], 1B6h
.text:00401836                 mov     ebx, [ebp+var_14]
.text:00401839                 test    ebx, ebx
.text:0040183B                 jz      short loc_401896
.text:0040183D                 mov     [esp+38h+Category], 0 ; Mode
.text:00401844                 call    _umask
.text:00401849                 mov     dword ptr [ebp+var_10], eax
.text:0040184C                 mov     esi, [ebp+var_14]
.text:0040184F                 not     dword ptr [ebp+var_10]
.text:00401852                 mov     [esp+38h+Locale], 0
.text:0040185A                 mov     [esp+38h+Category], esi
.text:0040185D                 and     dword ptr [ebp+var_10], 1B6h
.text:00401864                 call    sub_401B30
.text:00401869                 test    eax, eax
.text:0040186B                 mov     ebx, eax
.text:0040186D                 jz      loc_401996
.text:00401873                 cmp     eax, 1
.text:00401876                 jz      loc_4019EA
.text:0040187C
.text:0040187C loc_40187C:                             ; CODE XREF: sub_4015E0+3DB↓j
.text:0040187C                 mov     [esp+38h+Locale], ebx
.text:00401880                 mov     edi, dword ptr [ebp+var_10]
.text:00401883                 mov     [esp+38h+Category], edi
.text:00401886                 call    sub_401F00
.text:0040188B                 movzx   edx, ax
.text:0040188E                 mov     eax, dword_40E010
.text:00401893                 mov     dword ptr [ebp+var_10], edx
.text:00401896
.text:00401896 loc_401896:                             ; CODE XREF: sub_4015E0+25B↑j
.text:00401896                 cmp     eax, [ebp+arg_0]
.text:00401899                 jl      short loc_4018A6
.text:0040189B
.text:0040189B loc_40189B:                             ; CODE XREF: sub_4015E0+31D↓j
.text:0040189B                 mov     edi, [ebp+var_18]
.text:0040189E                 mov     [esp+38h+Category], edi
.text:004018A1                 jmp     loc_4016E8
.text:004018A6 ; ---------------------------------------------------------------------------
.text:004018A6
.text:004018A6 loc_4018A6:                             ; CODE XREF: sub_4015E0+2B9↑j
.text:004018A6                                         ; sub_4015E0+31B↓j
.text:004018A6                 mov     esi, dword ptr [ebp+var_10]
.text:004018A9                 mov     ebx, [ebp+arg_4]
.text:004018AC                 mov     [esp+38h+Locale], esi ; __int16
.text:004018B0                 mov     ecx, [ebx+eax*4]
.text:004018B3                 mov     [esp+38h+Category], ecx ; char *
.text:004018B6                 call    sub_405850
.text:004018BB                 test    eax, eax
.text:004018BD                 mov     edi, eax
.text:004018BF                 jnz     loc_401950
.text:004018C5                 mov     edx, [ebp+var_14]
.text:004018C8                 test    edx, edx
.text:004018CA                 jz      short loc_401943
.text:004018CC                 mov     esi, dword ptr [ebp+var_10]
.text:004018CF                 mov     ebx, dword_40E010
.text:004018D5                 mov     ecx, [ebp+arg_4]
.text:004018D8                 mov     [esp+38h+Locale], esi ; AccessMode
.text:004018DC                 mov     edi, [ecx+ebx*4]
.text:004018DF                 mov     [esp+38h+Category], edi ; FileName
.text:004018E2                 call    _chmod
.text:004018E7                 test    eax, eax
.text:004018E9                 mov     edi, eax
.text:004018EB                 jnz     short loc_4018FF
.text:004018ED
.text:004018ED loc_4018ED:                             ; CODE XREF: sub_4015E0+365↓j
.text:004018ED                                         ; sub_4015E0+36E↓j
.text:004018ED                 mov     eax, dword_40E010
.text:004018F2                 inc     eax
.text:004018F3                 cmp     eax, [ebp+arg_0]
.text:004018F6                 mov     dword_40E010, eax
.text:004018FB                 jl      short loc_4018A6
.text:004018FD                 jmp     short loc_40189B
.text:004018FF ; ---------------------------------------------------------------------------
.text:004018FF
.text:004018FF loc_4018FF:                             ; CODE XREF: sub_4015E0+30B↑j
.text:004018FF                 mov     ecx, dword_40E010
.text:00401905                 mov     eax, [ebp+arg_4]
.text:00401908                 mov     ebx, [eax+ecx*4]
.text:0040190B                 mov     [esp+38h+Category], ebx ; char *
.text:0040190E                 call    sub_403130
.text:00401913                 mov     [esp+38h+Category], offset aCannotSetPermi ; "cannot set permissions of fifo %s"
.text:0040191A                 mov     esi, eax
.text:0040191C                 call    ds:libintl_gettext
.text:00401922                 mov     ebx, eax
.text:00401924                 call    _errno
.text:00401929                 mov     dword ptr [esp+38h+var_2C], esi ; char
.text:0040192D                 mov     [esp+38h+var_30], ebx ; char *
.text:00401931                 mov     edx, [eax]
.text:00401933                 mov     [esp+38h+Category], 0 ; Code
.text:0040193A                 mov     [esp+38h+Locale], edx ; ErrorMessage
.text:0040193E                 call    sub_4055B0
.text:00401943
.text:00401943 loc_401943:                             ; CODE XREF: sub_4015E0+2EA↑j
.text:00401943                 test    edi, edi
.text:00401945                 jz      short loc_4018ED
.text:00401947
.text:00401947 loc_401947:                             ; CODE XREF: sub_4015E0+3B4↓j
.text:00401947                 mov     [ebp+var_18], 1
.text:0040194E                 jmp     short loc_4018ED
.text:00401950 ; ---------------------------------------------------------------------------
.text:00401950
.text:00401950 loc_401950:                             ; CODE XREF: sub_4015E0+2DF↑j
.text:00401950                 mov     esi, dword_40E010
.text:00401956                 mov     eax, [ebp+arg_4]
.text:00401959                 mov     ecx, [eax+esi*4]
.text:0040195C                 mov     [esp+38h+Category], ecx ; char *
.text:0040195F                 call    sub_403130
.text:00401964                 mov     [esp+38h+Category], offset aCannotCreateFi ; "cannot create fifo %s"
.text:0040196B                 mov     ebx, eax
.text:0040196D                 call    ds:libintl_gettext
.text:00401973                 mov     edi, eax
.text:00401975                 call    _errno
.text:0040197A                 mov     dword ptr [esp+38h+var_2C], ebx ; char
.text:0040197E                 mov     [esp+38h+var_30], edi ; char *
.text:00401982                 mov     edx, [eax]
.text:00401984                 mov     [esp+38h+Category], 0 ; Code
.text:0040198B                 mov     [esp+38h+Locale], edx ; ErrorMessage
.text:0040198F                 call    sub_4055B0
.text:00401994                 jmp     short loc_401947
.text:00401996 ; ---------------------------------------------------------------------------
.text:00401996
.text:00401996 loc_401996:                             ; CODE XREF: sub_4015E0+28D↑j
.text:00401996                 mov     [esp+38h+Category], offset aInvalidMode ; "invalid mode"
.text:0040199D                 call    ds:libintl_gettext
.text:004019A3                 mov     [esp+38h+Locale], 0 ; ErrorMessage
.text:004019AB                 mov     [esp+38h+Category], 1 ; Code
.text:004019B2                 mov     [esp+38h+var_30], eax ; char *
.text:004019B6                 call    sub_4055B0
.text:004019BB                 jmp     loc_40187C
.text:004019C0 ; ---------------------------------------------------------------------------
.text:004019C0
.text:004019C0 loc_4019C0:                             ; CODE XREF: sub_4015E0+249↑j
.text:004019C0                 mov     [esp+38h+Category], offset aMissingOperand ; "missing operand"
.text:004019C7                 call    ds:libintl_gettext
.text:004019CD                 mov     [esp+38h+Locale], 0 ; ErrorMessage
.text:004019D5                 mov     [esp+38h+Category], 0 ; Code
.text:004019DC                 mov     [esp+38h+var_30], eax ; char *
.text:004019E0                 call    sub_4055B0
.text:004019E5                 jmp     loc_4016B5
.text:004019EA ; ---------------------------------------------------------------------------
.text:004019EA
.text:004019EA loc_4019EA:                             ; CODE XREF: sub_4015E0+296↑j
.text:004019EA                 call    sub_403180
.text:004019EA sub_4015E0      endp
.text:004019EA
.text:004019EA ; ---------------------------------------------------------------------------
.text:004019EF                 align 10h
.text:004019F0                 push    ebx
.text:004019F1                 sub     esp, 18h
.text:004019F4                 mov     ebx, [esp+20h]
.text:004019F8                 test    ebx, ebx
.text:004019FA                 jz      short loc_401A30
.text:004019FC                 mov     dword ptr [esp], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:00401A03                 call    ds:libintl_gettext
.text:00401A09                 mov     edx, ds:_iob
.text:00401A0F                 mov     ecx, ds:dword_40F4B0
.text:00401A15                 add     edx, 40h ; '@'
.text:00401A18                 mov     [esp+8], ecx
.text:00401A1C                 mov     [esp+4], eax
.text:00401A20                 mov     [esp], edx
.text:00401A23                 call    fprintf
.text:00401A28
.text:00401A28 loc_401A28:                             ; CODE XREF: .text:00401B16↓j
.text:00401A28                 mov     [esp], ebx
.text:00401A2B                 call    exit
.text:00401A30 ; ---------------------------------------------------------------------------
.text:00401A30
.text:00401A30 loc_401A30:                             ; CODE XREF: .text:004019FA↑j
.text:00401A30                 mov     dword ptr [esp], (offset stru_40138B._cnt+3)
.text:00401A37                 call    ds:libintl_gettext
.text:00401A3D                 mov     ecx, ds:dword_40F4B0
.text:00401A43                 mov     [esp], eax
.text:00401A46                 mov     [esp+4], ecx
.text:00401A4A                 call    printf
.text:00401A4F                 mov     dword ptr [esp], offset aCreateNamedPip ; "Create named pipes (FIFOs) with the giv"...
.text:00401A56                 call    ds:libintl_gettext
.text:00401A5C                 mov     ecx, ds:_iob
.text:00401A62                 add     ecx, 20h ; ' '
.text:00401A65                 mov     [esp+4], ecx
.text:00401A69                 mov     [esp], eax
.text:00401A6C                 call    fputs
.text:00401A71                 mov     dword ptr [esp], offset aMandatoryArgum ; "Mandatory arguments to long options are"...
.text:00401A78                 call    ds:libintl_gettext
.text:00401A7E                 mov     ecx, ds:_iob
.text:00401A84                 add     ecx, 20h ; ' '
.text:00401A87                 mov     [esp+4], ecx
.text:00401A8B                 mov     [esp], eax
.text:00401A8E                 call    fputs
.text:00401A93                 mov     dword ptr [esp], offset aMModeModeSetPe ; "  -m, --mode=MODE   set permission mode"...
.text:00401A9A                 call    ds:libintl_gettext
.text:00401AA0                 mov     ecx, ds:_iob
.text:00401AA6                 add     ecx, 20h ; ' '
.text:00401AA9                 mov     [esp+4], ecx
.text:00401AAD                 mov     [esp], eax
.text:00401AB0                 call    fputs
.text:00401AB5                 mov     dword ptr [esp], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:00401ABC                 call    ds:libintl_gettext
.text:00401AC2                 mov     ecx, ds:_iob
.text:00401AC8                 add     ecx, 20h ; ' '
.text:00401ACB                 mov     [esp+4], ecx
.text:00401ACF                 mov     [esp], eax
.text:00401AD2                 call    fputs
.text:00401AD7                 mov     dword ptr [esp], offset aVersionOutputV ; "      --version  output version informa"...
.text:00401ADE                 call    ds:libintl_gettext
.text:00401AE4                 mov     ecx, ds:_iob
.text:00401AEA                 add     ecx, 20h ; ' '
.text:00401AED                 mov     [esp+4], ecx
.text:00401AF1                 mov     [esp], eax
.text:00401AF4                 call    fputs
.text:00401AF9                 mov     dword ptr [esp], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:00401B00                 call    ds:libintl_gettext
.text:00401B06                 mov     dword ptr [esp+4], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:00401B0E                 mov     [esp], eax
.text:00401B11                 call    printf
.text:00401B16                 jmp     loc_401A28
.text:00401B16 ; ---------------------------------------------------------------------------
.text:00401B1B                 align 10h
.text:00401B20 ; const char dword_401B20[]
.text:00401B20 dword_401B20    dd 900DEB00h, 3 dup(90909090h)
.text:00401B20                                         ; DATA XREF: sub_401B30+17↓o
.text:00401B30
.text:00401B30 ; =============== S U B R O U T I N E =======================================
.text:00401B30
.text:00401B30
.text:00401B30 sub_401B30      proc near               ; CODE XREF: sub_4015E0+284↑p
.text:00401B30
.text:00401B30 Size            = dword ptr -3Ch
.text:00401B30 var_38          = dword ptr -38h
.text:00401B30 var_34          = dword ptr -34h
.text:00401B30 var_30          = dword ptr -30h
.text:00401B30 Str             = dword ptr -2Ch
.text:00401B30 var_25          = byte ptr -25h
.text:00401B30 var_24          = dword ptr -24h
.text:00401B30 var_20          = dword ptr -20h
.text:00401B30 var_1C          = dword ptr -1Ch
.text:00401B30 var_18          = dword ptr -18h
.text:00401B30 var_14          = dword ptr -14h
.text:00401B30 arg_0           = dword ptr  4
.text:00401B30 arg_4           = dword ptr  8
.text:00401B30
.text:00401B30                 push    ebp
.text:00401B31                 push    edi
.text:00401B32                 push    esi
.text:00401B33                 push    ebx
.text:00401B34                 sub     esp, 2Ch
.text:00401B37                 mov     esi, [esp+3Ch+arg_0]
.text:00401B3B                 mov     [esp+3Ch+var_18], 0
.text:00401B43                 lea     edx, [esp+3Ch+var_14]
.text:00401B47                 mov     [esp+3Ch+Str], offset dword_401B20 ; Str
.text:00401B4F                 mov     [esp+3Ch+var_30], edx ; int
.text:00401B53                 mov     [esp+3Ch+var_34], 8 ; int
.text:00401B5B                 mov     [esp+3Ch+var_38], 0 ; int
.text:00401B63                 mov     [esp+3Ch+Size], esi ; int
.text:00401B66                 call    sub_403980
.text:00401B6B                 test    eax, eax
.text:00401B6D                 jnz     short loc_401BC7
.text:00401B6F                 mov     edx, [esp+3Ch+var_14]
.text:00401B73                 and     edx, 0FFFh
.text:00401B79                 cmp     edx, [esp+3Ch+var_14]
.text:00401B7D                 jnz     short loc_401BC3
.text:00401B7F                 movzx   ebx, word ptr [esp+3Ch+var_14]
.text:00401B84                 mov     [esp+3Ch+Size], 0Ch ; Size
.text:00401B8B                 call    malloc
.text:00401B90                 xor     edx, edx
.text:00401B92                 test    eax, eax
.text:00401B94                 jz      short loc_401BB0
.text:00401B96                 mov     dword ptr [eax+8], 0
.text:00401B9D                 mov     edx, eax
.text:00401B9F                 mov     byte ptr [eax], 3Dh ; '='
.text:00401BA2                 mov     byte ptr [eax+1], 0
.text:00401BA6                 mov     [eax+4], bx
.text:00401BAA                 mov     word ptr [eax+2], 0FFFh
.text:00401BB0
.text:00401BB0 loc_401BB0:                             ; CODE XREF: sub_401B30+64↑j
.text:00401BB0                 test    edx, edx
.text:00401BB2                 mov     eax, 1
.text:00401BB7                 jz      short loc_401BBB
.text:00401BB9                 mov     eax, edx
.text:00401BBB
.text:00401BBB loc_401BBB:                             ; CODE XREF: sub_401B30+87↑j
.text:00401BBB                                         ; sub_401B30+95↓j ...
.text:00401BBB                 add     esp, 2Ch
.text:00401BBE                 pop     ebx
.text:00401BBF                 pop     esi
.text:00401BC0                 pop     edi
.text:00401BC1                 pop     ebp
.text:00401BC2                 retn
.text:00401BC3 ; ---------------------------------------------------------------------------
.text:00401BC3
.text:00401BC3 loc_401BC3:                             ; CODE XREF: sub_401B30+4D↑j
.text:00401BC3                                         ; sub_401B30+133↓j
.text:00401BC3                 xor     eax, eax
.text:00401BC5                 jmp     short loc_401BBB
.text:00401BC7 ; ---------------------------------------------------------------------------
.text:00401BC7
.text:00401BC7 loc_401BC7:                             ; CODE XREF: sub_401B30+3D↑j
.text:00401BC7                 mov     [esp+3Ch+Size], 0 ; Mode
.text:00401BCE                 call    _umask
.text:00401BD3                 movzx   ecx, ax
.text:00401BD6                 mov     [esp+3Ch+var_20], ecx
.text:00401BDA                 mov     [esp+3Ch+Size], ecx ; Mode
.text:00401BDD                 call    _umask
.text:00401BE2
.text:00401BE2 loc_401BE2:                             ; CODE XREF: sub_401B30+119↓j
.text:00401BE2                 mov     [esp+3Ch+var_24], 0
.text:00401BEA                 xor     ebp, ebp
.text:00401BEC                 lea     esi, [esi+0]
.text:00401BF0
.text:00401BF0 loc_401BF0:                             ; CODE XREF: sub_401B30+E6↓j
.text:00401BF0                 movzx   edx, byte ptr [esi]
.text:00401BF3                 movsx   eax, dl
.text:00401BF6                 mov     cl, dl
.text:00401BF8                 cmp     eax, 67h ; 'g'
.text:00401BFB                 jz      loc_401EF4
.text:00401C01                 cmp     eax, 67h ; 'g'
.text:00401C04                 jg      loc_401ED0
.text:00401C0A                 cmp     eax, 61h ; 'a'
.text:00401C0D                 jnz     short loc_401C18
.text:00401C0F                 or      ebp, 0FFFh
.text:00401C15
.text:00401C15 loc_401C15:                             ; CODE XREF: sub_401B30+3B4↓j
.text:00401C15                                         ; sub_401B30+3BF↓j ...
.text:00401C15                 inc     esi
.text:00401C16                 jmp     short loc_401BF0
.text:00401C18 ; ---------------------------------------------------------------------------
.text:00401C18
.text:00401C18 loc_401C18:                             ; CODE XREF: sub_401B30+DD↑j
.text:00401C18                                         ; sub_401B30+3A8↓j
.text:00401C18                 mov     [esp+3Ch+var_25], 1
.text:00401C1D                 test    bp, bp
.text:00401C20                 jnz     short loc_401C34
.text:00401C22                 mov     [esp+3Ch+var_25], 0
.text:00401C27                 mov     ebx, [esp+3Ch+arg_4]
.text:00401C2B                 mov     ebp, 0FFFh
.text:00401C30                 mov     [esp+3Ch+var_24], ebx
.text:00401C34
.text:00401C34 loc_401C34:                             ; CODE XREF: sub_401B30+F0↑j
.text:00401C34                 cmp     cl, 3Dh ; '='
.text:00401C37                 jz      short loc_401C68
.text:00401C39                 cmp     cl, 2Bh ; '+'
.text:00401C3C                 jz      short loc_401C68
.text:00401C3E                 cmp     cl, 2Dh ; '-'
.text:00401C41                 jz      short loc_401C68
.text:00401C43
.text:00401C43 loc_401C43:                             ; CODE XREF: sub_401B30+2EB↓j
.text:00401C43                 cmp     dl, 2Ch ; ','
.text:00401C46                 jnz     short loc_401C4B
.text:00401C48                 inc     esi
.text:00401C49                 jmp     short loc_401BE2
.text:00401C4B ; ---------------------------------------------------------------------------
.text:00401C4B
.text:00401C4B loc_401C4B:                             ; CODE XREF: sub_401B30+116↑j
.text:00401C4B                 test    dl, dl
.text:00401C4D                 mov     eax, [esp+3Ch+var_18]
.text:00401C51                 jz      loc_401BBB
.text:00401C57
.text:00401C57 loc_401C57:                             ; CODE XREF: sub_401B30+27F↓j
.text:00401C57                                         ; sub_401B30+299↓j ...
.text:00401C57                 mov     edi, [esp+3Ch+var_18]
.text:00401C5B                 mov     [esp+3Ch+Size], edi ; void *
.text:00401C5E                 call    sub_402040
.text:00401C63                 jmp     loc_401BC3
.text:00401C68 ; ---------------------------------------------------------------------------
.text:00401C68
.text:00401C68 loc_401C68:                             ; CODE XREF: sub_401B30+107↑j
.text:00401C68                                         ; sub_401B30+10C↑j ...
.text:00401C68                 mov     [esp+3Ch+Size], 0Ch ; Size
.text:00401C6F                 call    malloc
.text:00401C74                 test    eax, eax
.text:00401C76                 mov     ebx, eax
.text:00401C78                 jz      loc_401EB9
.text:00401C7E                 mov     dword ptr [eax+8], 0
.text:00401C85                 mov     edi, ebp
.text:00401C87                 movzx   edx, byte ptr [esi]
.text:00401C8A                 mov     [eax], dl
.text:00401C8C                 cmp     [esp+3Ch+var_25], 0
.text:00401C91                 jnz     loc_401E4D
.text:00401C97                 cmp     dl, 3Dh ; '='
.text:00401C9A                 jz      loc_401E46
.text:00401CA0
.text:00401CA0 loc_401CA0:                             ; CODE XREF: sub_401B30+320↓j
.text:00401CA0                 cmp     dl, 2Bh ; '+'
.text:00401CA3                 jz      loc_401E3C
.text:00401CA9                 test    byte ptr [esp+3Ch+var_24], 4
.text:00401CAE
.text:00401CAE loc_401CAE:                             ; CODE XREF: sub_401B30+311↓j
.text:00401CAE                                         ; sub_401B30+32B↓j
.text:00401CAE                 jz      short loc_401CB8
.text:00401CB0                 mov     edi, [esp+3Ch+var_20]
.text:00401CB4                 not     edi
.text:00401CB6                 and     edi, ebp
.text:00401CB8
.text:00401CB8 loc_401CB8:                             ; CODE XREF: sub_401B30:loc_401CAE↑j
.text:00401CB8                 mov     byte ptr [ebx+1], 0
.text:00401CBC                 mov     edx, [esp+3Ch+var_18]
.text:00401CC0                 mov     [ebx+2], di
.text:00401CC4                 mov     word ptr [ebx+4], 0
.text:00401CCA                 test    edx, edx
.text:00401CCC                 jnz     loc_401E2C
.text:00401CD2                 mov     [esp+3Ch+var_1C], ebx
.text:00401CD6                 mov     [esp+3Ch+var_18], ebx
.text:00401CDA                 lea     esi, [esi+0]
.text:00401CE0
.text:00401CE0 loc_401CE0:                             ; CODE XREF: sub_401B30+26A↓j
.text:00401CE0                                         ; sub_401B30+28F↓j ...
.text:00401CE0                 inc     esi
.text:00401CE1                 movzx   edx, byte ptr [esi]
.text:00401CE4                 movsx   eax, dl
.text:00401CE7                 mov     cl, dl
.text:00401CE9                 sub     eax, 58h ; 'X'  ; switch 33 cases
.text:00401CEC                 cmp     eax, 20h
.text:00401CEF                 ja      def_401CF5      ; jumptable 00401CF5 default case, cases 89-102,104-110,112,113,118
.text:00401CF5                 jmp     ds:jpt_401CF5[eax*4] ; switch jump
.text:00401CF5 ; ---------------------------------------------------------------------------
.text:00401CFC jpt_401CF5      dd offset loc_401D9F    ; DATA XREF: sub_401B30+1C5↑r
.text:00401CFC                 dd offset def_401CF5    ; jump table for switch statement
.text:00401CFC                 dd offset def_401CF5
.text:00401CFC                 dd offset def_401CF5
.text:00401CFC                 dd offset def_401CF5
.text:00401CFC                 dd offset def_401CF5
.text:00401CFC                 dd offset def_401CF5
.text:00401CFC                 dd offset def_401CF5
.text:00401CFC                 dd offset def_401CF5
.text:00401CFC                 dd offset def_401CF5
.text:00401CFC                 dd offset def_401CF5
.text:00401CFC                 dd offset def_401CF5
.text:00401CFC                 dd offset def_401CF5
.text:00401CFC                 dd offset def_401CF5
.text:00401CFC                 dd offset def_401CF5
.text:00401CFC                 dd offset loc_401DAA
.text:00401CFC                 dd offset def_401CF5
.text:00401CFC                 dd offset def_401CF5
.text:00401CFC                 dd offset def_401CF5
.text:00401CFC                 dd offset def_401CF5
.text:00401CFC                 dd offset def_401CF5
.text:00401CFC                 dd offset def_401CF5
.text:00401CFC                 dd offset def_401CF5
.text:00401CFC                 dd offset loc_401DC4
.text:00401CFC                 dd offset def_401CF5
.text:00401CFC                 dd offset def_401CF5
.text:00401CFC                 dd offset loc_401D80
.text:00401CFC                 dd offset loc_401DD7
.text:00401CFC                 dd offset loc_401DE0
.text:00401CFC                 dd offset loc_401DE9
.text:00401CFC                 dd offset def_401CF5
.text:00401CFC                 dd offset loc_401E20
.text:00401CFC                 dd offset loc_401DA3
.text:00401D80 ; ---------------------------------------------------------------------------
.text:00401D80
.text:00401D80 loc_401D80:                             ; CODE XREF: sub_401B30+1C5↑j
.text:00401D80                                         ; DATA XREF: sub_401B30:jpt_401CF5↑o
.text:00401D80                 mov     eax, edi        ; jumptable 00401CF5 case 114
.text:00401D82                 and     eax, 124h
.text:00401D87                 mov     esi, esi
.text:00401D89                 lea     edi, [edi+0]
.text:00401D90
.text:00401D90 loc_401D90:                             ; CODE XREF: sub_401B30+278↓j
.text:00401D90                                         ; sub_401B30+2AE↓j ...
.text:00401D90                 movzx   ecx, word ptr [ebx+4]
.text:00401D94                 or      eax, ecx
.text:00401D96                 mov     [ebx+4], ax
.text:00401D9A                 jmp     loc_401CE0
.text:00401D9F ; ---------------------------------------------------------------------------
.text:00401D9F
.text:00401D9F loc_401D9F:                             ; CODE XREF: sub_401B30+1C5↑j
.text:00401D9F                                         ; DATA XREF: sub_401B30:jpt_401CF5↑o
.text:00401D9F                 or      byte ptr [ebx+1], 1 ; jumptable 00401CF5 case 88
.text:00401DA3
.text:00401DA3 loc_401DA3:                             ; CODE XREF: sub_401B30+1C5↑j
.text:00401DA3                                         ; DATA XREF: sub_401B30:jpt_401CF5↑o
.text:00401DA3                 mov     eax, edi        ; jumptable 00401CF5 case 120
.text:00401DA5                 and     eax, 49h
.text:00401DA8                 jmp     short loc_401D90
.text:00401DAA ; ---------------------------------------------------------------------------
.text:00401DAA
.text:00401DAA loc_401DAA:                             ; CODE XREF: sub_401B30+1C5↑j
.text:00401DAA                                         ; DATA XREF: sub_401B30:jpt_401CF5↑o
.text:00401DAA                 cmp     word ptr [ebx+4], 0 ; jumptable 00401CF5 case 103
.text:00401DAF                 jnz     loc_401C57
.text:00401DB5                 mov     word ptr [ebx+4], 38h ; '8'
.text:00401DBB
.text:00401DBB loc_401DBB:                             ; CODE XREF: sub_401B30+2A5↓j
.text:00401DBB                                         ; sub_401B30+2CA↓j
.text:00401DBB                 or      byte ptr [ebx+1], 2
.text:00401DBF                 jmp     loc_401CE0
.text:00401DC4 ; ---------------------------------------------------------------------------
.text:00401DC4
.text:00401DC4 loc_401DC4:                             ; CODE XREF: sub_401B30+1C5↑j
.text:00401DC4                                         ; DATA XREF: sub_401B30:jpt_401CF5↑o
.text:00401DC4                 cmp     word ptr [ebx+4], 0 ; jumptable 00401CF5 case 111
.text:00401DC9                 jnz     loc_401C57
.text:00401DCF                 mov     word ptr [ebx+4], 7
.text:00401DD5                 jmp     short loc_401DBB
.text:00401DD7 ; ---------------------------------------------------------------------------
.text:00401DD7
.text:00401DD7 loc_401DD7:                             ; CODE XREF: sub_401B30+1C5↑j
.text:00401DD7                                         ; DATA XREF: sub_401B30:jpt_401CF5↑o
.text:00401DD7                 mov     eax, edi        ; jumptable 00401CF5 case 115
.text:00401DD9                 and     eax, 0C00h
.text:00401DDE                 jmp     short loc_401D90
.text:00401DE0 ; ---------------------------------------------------------------------------
.text:00401DE0
.text:00401DE0 loc_401DE0:                             ; CODE XREF: sub_401B30+1C5↑j
.text:00401DE0                                         ; DATA XREF: sub_401B30:jpt_401CF5↑o
.text:00401DE0                 mov     eax, edi        ; jumptable 00401CF5 case 116
.text:00401DE2                 and     eax, 200h
.text:00401DE7                 jmp     short loc_401D90
.text:00401DE9 ; ---------------------------------------------------------------------------
.text:00401DE9
.text:00401DE9 loc_401DE9:                             ; CODE XREF: sub_401B30+1C5↑j
.text:00401DE9                                         ; DATA XREF: sub_401B30:jpt_401CF5↑o
.text:00401DE9                 cmp     word ptr [ebx+4], 0 ; jumptable 00401CF5 case 117
.text:00401DEE                 jnz     loc_401C57
.text:00401DF4                 mov     word ptr [ebx+4], 1C0h
.text:00401DFA                 jmp     short loc_401DBB
.text:00401DFA ; ---------------------------------------------------------------------------
.text:00401DFC                 align 10h
.text:00401E00
.text:00401E00 def_401CF5:                             ; CODE XREF: sub_401B30+1BF↑j
.text:00401E00                                         ; sub_401B30+1C5↑j
.text:00401E00                                         ; DATA XREF: ...
.text:00401E00                 cmp     cl, 3Dh ; '='   ; jumptable 00401CF5 default case, cases 89-102,104-110,112,113,118
.text:00401E03                 jz      loc_401C68
.text:00401E09                 cmp     cl, 2Bh ; '+'
.text:00401E0C                 jz      loc_401C68
.text:00401E12                 cmp     cl, 2Dh ; '-'
.text:00401E15                 jz      loc_401C68
.text:00401E1B                 jmp     loc_401C43
.text:00401E20 ; ---------------------------------------------------------------------------
.text:00401E20
.text:00401E20 loc_401E20:                             ; CODE XREF: sub_401B30+1C5↑j
.text:00401E20                                         ; DATA XREF: sub_401B30:jpt_401CF5↑o
.text:00401E20                 mov     eax, edi        ; jumptable 00401CF5 case 119
.text:00401E22                 and     eax, 92h
.text:00401E27                 jmp     loc_401D90
.text:00401E2C ; ---------------------------------------------------------------------------
.text:00401E2C
.text:00401E2C loc_401E2C:                             ; CODE XREF: sub_401B30+19C↑j
.text:00401E2C                 mov     ecx, [esp+3Ch+var_1C]
.text:00401E30                 mov     [esp+3Ch+var_1C], ebx
.text:00401E34                 mov     [ecx+8], ebx
.text:00401E37                 jmp     loc_401CE0
.text:00401E3C ; ---------------------------------------------------------------------------
.text:00401E3C
.text:00401E3C loc_401E3C:                             ; CODE XREF: sub_401B30+173↑j
.text:00401E3C                 test    byte ptr [esp+3Ch+var_24], 2
.text:00401E41                 jmp     loc_401CAE
.text:00401E46 ; ---------------------------------------------------------------------------
.text:00401E46
.text:00401E46 loc_401E46:                             ; CODE XREF: sub_401B30+16A↑j
.text:00401E46                 test    byte ptr [esp+3Ch+var_24], 1
.text:00401E4B                 jnz     short loc_401E60
.text:00401E4D
.text:00401E4D loc_401E4D:                             ; CODE XREF: sub_401B30+161↑j
.text:00401E4D                                         ; sub_401B30+37E↓j
.text:00401E4D                 cmp     dl, 3Dh ; '='
.text:00401E50                 jnz     loc_401CA0
.text:00401E56                 test    byte ptr [esp+3Ch+var_24], 1
.text:00401E5B                 jmp     loc_401CAE
.text:00401E60 ; ---------------------------------------------------------------------------
.text:00401E60
.text:00401E60 loc_401E60:                             ; CODE XREF: sub_401B30+31B↑j
.text:00401E60                 mov     [esp+3Ch+Size], 0Ch ; Size
.text:00401E67                 call    malloc
.text:00401E6C                 xor     edx, edx
.text:00401E6E                 test    eax, eax
.text:00401E70                 jz      short loc_401E8E
.text:00401E72                 mov     dword ptr [eax+8], 0
.text:00401E79                 mov     edx, eax
.text:00401E7B                 mov     byte ptr [eax], 3Dh ; '='
.text:00401E7E                 mov     byte ptr [eax+1], 0
.text:00401E82                 mov     word ptr [eax+4], 0
.text:00401E88                 mov     word ptr [eax+2], 0FFFh
.text:00401E8E
.text:00401E8E loc_401E8E:                             ; CODE XREF: sub_401B30+340↑j
.text:00401E8E                 test    edx, edx
.text:00401E90                 mov     eax, 1
.text:00401E95                 jz      loc_401BBB
.text:00401E9B                 mov     eax, [esp+3Ch+var_18]
.text:00401E9F                 test    eax, eax
.text:00401EA1                 jnz     short loc_401EB0
.text:00401EA3                 mov     [esp+3Ch+var_18], edx
.text:00401EA7
.text:00401EA7 loc_401EA7:                             ; CODE XREF: sub_401B30+387↓j
.text:00401EA7                 mov     [esp+3Ch+var_1C], edx
.text:00401EAB                 movzx   edx, byte ptr [esi]
.text:00401EAE                 jmp     short loc_401E4D
.text:00401EB0 ; ---------------------------------------------------------------------------
.text:00401EB0
.text:00401EB0 loc_401EB0:                             ; CODE XREF: sub_401B30+371↑j
.text:00401EB0                 mov     ecx, [esp+3Ch+var_1C]
.text:00401EB4                 mov     [ecx+8], edx
.text:00401EB7                 jmp     short loc_401EA7
.text:00401EB9 ; ---------------------------------------------------------------------------
.text:00401EB9
.text:00401EB9 loc_401EB9:                             ; CODE XREF: sub_401B30+148↑j
.text:00401EB9                 mov     esi, [esp+3Ch+var_18]
.text:00401EBD                 mov     [esp+3Ch+Size], esi ; void *
.text:00401EC0                 call    sub_402040
.text:00401EC5                 mov     eax, 1
.text:00401ECA                 jmp     loc_401BBB
.text:00401ECA ; ---------------------------------------------------------------------------
.text:00401ECF                 align 10h
.text:00401ED0
.text:00401ED0 loc_401ED0:                             ; CODE XREF: sub_401B30+D4↑j
.text:00401ED0                 cmp     eax, 6Fh ; 'o'
.text:00401ED3                 jz      short loc_401EE9
.text:00401ED5                 cmp     eax, 75h ; 'u'
.text:00401ED8                 jnz     loc_401C18
.text:00401EDE                 or      ebp, 9C0h
.text:00401EE4                 jmp     loc_401C15
.text:00401EE9 ; ---------------------------------------------------------------------------
.text:00401EE9
.text:00401EE9 loc_401EE9:                             ; CODE XREF: sub_401B30+3A3↑j
.text:00401EE9                 or      ebp, 207h
.text:00401EEF                 jmp     loc_401C15
.text:00401EF4 ; ---------------------------------------------------------------------------
.text:00401EF4
.text:00401EF4 loc_401EF4:                             ; CODE XREF: sub_401B30+CB↑j
.text:00401EF4                 or      ebp, 438h
.text:00401EFA                 jmp     loc_401C15
.text:00401EFA sub_401B30      endp
.text:00401EFA
.text:00401EFA ; ---------------------------------------------------------------------------
.text:00401EFF                 align 10h
.text:00401F00
.text:00401F00 ; =============== S U B R O U T I N E =======================================
.text:00401F00
.text:00401F00
.text:00401F00 sub_401F00      proc near               ; CODE XREF: sub_4015E0+2A6↑p
.text:00401F00
.text:00401F00 arg_0           = word ptr  4
.text:00401F00 arg_4           = dword ptr  8
.text:00401F00
.text:00401F00                 push    esi
.text:00401F01                 push    ebx
.text:00401F02                 mov     ecx, [esp+8+arg_4]
.text:00401F06                 movzx   esi, [esp+8+arg_0]
.text:00401F0B                 mov     ebx, esi
.text:00401F0D                 and     ebx, 0FFFh
.text:00401F13                 test    ecx, ecx
.text:00401F15                 jz      short loc_401F87
.text:00401F17                 mov     esi, esi
.text:00401F19                 lea     edi, [edi+0]
.text:00401F20
.text:00401F20 loc_401F20:                             ; CODE XREF: sub_401F00+85↓j
.text:00401F20                 movsx   eax, byte ptr [ecx+1]
.text:00401F24                 test    al, 2
.text:00401F26                 jz      loc_402000
.text:00401F2C                 movzx   eax, word ptr [ecx+4]
.text:00401F30                 mov     edx, ebx
.text:00401F32                 and     edx, eax
.text:00401F34                 test    eax, 1C0h
.text:00401F39                 jz      short loc_401FB0
.text:00401F3B                 xor     eax, eax
.text:00401F3D                 test    dh, 1
.text:00401F40                 setz    al
.text:00401F43                 dec     eax
.text:00401F44                 and     eax, 24h
.text:00401F47                 test    dl, dl
.text:00401F49                 jns     short loc_401F4E
.text:00401F4B                 or      eax, 12h
.text:00401F4E
.text:00401F4E loc_401F4E:                             ; CODE XREF: sub_401F00+49↑j
.text:00401F4E                 test    dl, 40h
.text:00401F51                 jz      short loc_401F60
.text:00401F53                 or      eax, 9
.text:00401F56                 lea     esi, [esi+0]
.text:00401F59                 lea     edi, [edi+0]
.text:00401F60
.text:00401F60 loc_401F60:                             ; CODE XREF: sub_401F00+51↑j
.text:00401F60                                         ; sub_401F00+CF↓j ...
.text:00401F60                 or      eax, edx
.text:00401F62                 movzx   edx, ax
.text:00401F65                 movzx   eax, word ptr [ecx+2]
.text:00401F69                 and     edx, eax
.text:00401F6B
.text:00401F6B loc_401F6B:                             ; CODE XREF: sub_401F00+106↓j
.text:00401F6B                                         ; sub_401F00+118↓j ...
.text:00401F6B                 movsx   eax, byte ptr [ecx]
.text:00401F6E                 cmp     eax, 2Dh ; '-'
.text:00401F71                 jz      short loc_401FA3
.text:00401F73                 cmp     eax, 2Dh ; '-'
.text:00401F76                 jg      short loc_401F94
.text:00401F78                 cmp     eax, 2Bh ; '+'
.text:00401F7B                 jz      short loc_401F90
.text:00401F7D                 lea     esi, [esi+0]
.text:00401F80
.text:00401F80 loc_401F80:                             ; CODE XREF: sub_401F00+92↓j
.text:00401F80                                         ; sub_401F00+97↓j ...
.text:00401F80                 mov     ecx, [ecx+8]
.text:00401F83                 test    ecx, ecx
.text:00401F85                 jnz     short loc_401F20
.text:00401F87
.text:00401F87 loc_401F87:                             ; CODE XREF: sub_401F00+15↑j
.text:00401F87                 mov     eax, ebx
.text:00401F89                 pop     ebx
.text:00401F8A                 pop     esi
.text:00401F8B                 retn
.text:00401F8B ; ---------------------------------------------------------------------------
.text:00401F8C                 align 10h
.text:00401F90
.text:00401F90 loc_401F90:                             ; CODE XREF: sub_401F00+7B↑j
.text:00401F90                                         ; sub_401F00+A1↓j
.text:00401F90                 or      ebx, edx
.text:00401F92                 jmp     short loc_401F80
.text:00401F94 ; ---------------------------------------------------------------------------
.text:00401F94
.text:00401F94 loc_401F94:                             ; CODE XREF: sub_401F00+76↑j
.text:00401F94                 cmp     eax, 3Dh ; '='
.text:00401F97                 jnz     short loc_401F80
.text:00401F99                 movzx   eax, word ptr [ecx+2]
.text:00401F9D                 not     eax
.text:00401F9F                 and     ebx, eax
.text:00401FA1                 jmp     short loc_401F90
.text:00401FA3 ; ---------------------------------------------------------------------------
.text:00401FA3
.text:00401FA3 loc_401FA3:                             ; CODE XREF: sub_401F00+71↑j
.text:00401FA3                 not     edx
.text:00401FA5                 and     ebx, edx
.text:00401FA7                 jmp     short loc_401F80
.text:00401FA7 ; ---------------------------------------------------------------------------
.text:00401FA9                 align 10h
.text:00401FB0
.text:00401FB0 loc_401FB0:                             ; CODE XREF: sub_401F00+39↑j
.text:00401FB0                 test    al, 38h
.text:00401FB2                 jz      short loc_401FD6
.text:00401FB4                 xor     eax, eax
.text:00401FB6                 test    dl, 20h
.text:00401FB9                 setz    al
.text:00401FBC                 dec     eax
.text:00401FBD                 and     eax, 104h
.text:00401FC2                 test    dl, 10h
.text:00401FC5                 jz      short loc_401FCC
.text:00401FC7                 or      eax, 82h
.text:00401FCC
.text:00401FCC loc_401FCC:                             ; CODE XREF: sub_401F00+C5↑j
.text:00401FCC                 test    dl, 8
.text:00401FCF                 jz      short loc_401F60
.text:00401FD1                 or      eax, 41h
.text:00401FD4                 jmp     short loc_401F60
.text:00401FD6 ; ---------------------------------------------------------------------------
.text:00401FD6
.text:00401FD6 loc_401FD6:                             ; CODE XREF: sub_401F00+B2↑j
.text:00401FD6                 xor     eax, eax
.text:00401FD8                 test    dl, 4
.text:00401FDB                 setz    al
.text:00401FDE                 dec     eax
.text:00401FDF                 and     eax, 120h
.text:00401FE4                 test    dl, 2
.text:00401FE7                 jz      short loc_401FEE
.text:00401FE9                 or      eax, 90h
.text:00401FEE
.text:00401FEE loc_401FEE:                             ; CODE XREF: sub_401F00+E7↑j
.text:00401FEE                 test    dl, 1
.text:00401FF1                 jz      loc_401F60
.text:00401FF7                 or      eax, 48h
.text:00401FFA                 jmp     loc_401F60
.text:00401FFA ; ---------------------------------------------------------------------------
.text:00401FFF                 align 10h
.text:00402000
.text:00402000 loc_402000:                             ; CODE XREF: sub_401F00+26↑j
.text:00402000                 movzx   edx, word ptr [ecx+4]
.text:00402004                 test    al, 1
.text:00402006                 jz      loc_401F6B
.text:0040200C                 mov     eax, esi
.text:0040200E                 and     eax, 0F000h
.text:00402013                 cmp     eax, 4000h
.text:00402018                 jz      loc_401F6B
.text:0040201E                 test    bl, 49h
.text:00402021                 jnz     loc_401F6B
.text:00402027                 and     edx, 0FFB6h
.text:0040202D                 jmp     loc_401F6B
.text:0040202D sub_401F00      endp
.text:0040202D
.text:0040202D ; ---------------------------------------------------------------------------
.text:00402032                 align 10h
.text:00402040
.text:00402040 ; =============== S U B R O U T I N E =======================================
.text:00402040
.text:00402040
.text:00402040 ; int __cdecl sub_402040(void *)
.text:00402040 sub_402040      proc near               ; CODE XREF: sub_401B30+12E↑p
.text:00402040                                         ; sub_401B30+390↑p
.text:00402040
.text:00402040 Block           = dword ptr -0Ch
.text:00402040 arg_0           = dword ptr  4
.text:00402040
.text:00402040                 push    ebx
.text:00402041                 sub     esp, 8
.text:00402044                 mov     eax, [esp+0Ch+arg_0]
.text:00402048                 test    eax, eax
.text:0040204A                 jz      short loc_402061
.text:0040204C                 lea     esi, [esi+0]
.text:00402050
.text:00402050 loc_402050:                             ; CODE XREF: sub_402040+1F↓j
.text:00402050                 mov     ebx, [eax+8]
.text:00402053                 mov     [esp+0Ch+Block], eax ; Block
.text:00402056                 call    free
.text:0040205B                 test    ebx, ebx
.text:0040205D                 mov     eax, ebx
.text:0040205F                 jnz     short loc_402050
.text:00402061
.text:00402061 loc_402061:                             ; CODE XREF: sub_402040+A↑j
.text:00402061                 add     esp, 8
.text:00402064                 pop     ebx
.text:00402065                 retn
.text:00402065 sub_402040      endp
.text:00402065
.text:00402065 ; ---------------------------------------------------------------------------
.text:00402066                 align 10h
.text:00402070                 sub     esp, 8Ch
.text:00402076                 lea     edx, [esp+10h]
.text:0040207A                 mov     [esp+4], edx
.text:0040207E                 mov     edx, [esp+90h]
.text:00402085                 mov     [esp], edx
.text:00402088                 call    sub_405930
.text:0040208D                 test    eax, eax
.text:0040208F                 mov     ecx, 2
.text:00402094                 jz      short loc_4020A0
.text:00402096
.text:00402096 loc_402096:                             ; CODE XREF: .text:004020B3↓j
.text:00402096                                         ; .text:004020D3↓j
.text:00402096                 mov     eax, ecx
.text:00402098                 add     esp, 8Ch
.text:0040209E                 retn
.text:0040209E ; ---------------------------------------------------------------------------
.text:0040209F                 align 10h
.text:004020A0
.text:004020A0 loc_4020A0:                             ; CODE XREF: .text:00402094↑j
.text:004020A0                 mov     dword ptr [esp], 0Ch
.text:004020A7                 call    malloc
.text:004020AC                 test    eax, eax
.text:004020AE                 mov     ecx, 1
.text:004020B3                 jz      short loc_402096
.text:004020B5                 mov     byte ptr [eax], 3Dh ; '='
.text:004020B8                 mov     byte ptr [eax+1], 0
.text:004020BC                 mov     ecx, [esp+10h]
.text:004020C0                 mov     word ptr [eax+2], 0FFFh
.text:004020C6                 mov     dword ptr [eax+8], 0
.text:004020CD                 mov     [eax+4], cx
.text:004020D1                 mov     ecx, eax
.text:004020D3                 jmp     short loc_402096
.text:004020D3 ; ---------------------------------------------------------------------------
.text:004020D5                 align 10h
.text:004020E0 dword_4020E0    dd 90002D2Dh, 7 dup(90909090h)
.text:004020E0                                         ; DATA XREF: sub_402330+E4↓o
.text:00402100 aSOptionCSDoesn db '%s: option `%c%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00402100                                         ; DATA XREF: sub_402330+2FC↓o
.text:0040212D                 align 20h
.text:00402140 aSOptionSDoesnT db '%s: option `--%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00402140                                         ; DATA XREF: sub_402330:loc_402692↓o
.text:0040216D                 align 20h
.text:00402180 aSOptionSRequir db '%s: option `%s',27h,' requires an argument',0Ah,0
.text:00402180                                         ; DATA XREF: sub_402330:loc_402730↓o
.text:00402180                                         ; sub_402330:loc_402AF7↓o
.text:004021A6                 align 20h
.text:004021C0 aSUnrecognizedO db '%s: unrecognized option `%c%s',27h,0Ah,0
.text:004021C0                                         ; DATA XREF: sub_402330+48E↓o
.text:004021E0 dword_4021E0    dd 90909000h, 7 dup(90909090h)
.text:004021E0                                         ; DATA XREF: sub_402330:loc_402801↓o
.text:00402200 aSUnrecognizedO_0 db '%s: unrecognized option `--%s',27h,0Ah,0
.text:00402200                                         ; DATA XREF: sub_402330:loc_40281A↓o
.text:00402220 aSOptionRequire db '%s: option requires an argument -- %c',0Ah,0
.text:00402220                                         ; DATA XREF: sub_402330:loc_4028FF↓o
.text:00402220                                         ; sub_402330:loc_402C2C↓o
.text:00402247                 align 20h
.text:00402260 aSOptionWSDoesn db '%s: option `-W %s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00402260                                         ; DATA XREF: sub_402330:loc_402A73↓o
.text:0040228E                 align 20h
.text:004022A0 aSOptionWSIsAmb db '%s: option `-W %s',27h,' is ambiguous',0Ah,0
.text:004022A0                                         ; DATA XREF: sub_402330:loc_402B5F↓o
.text:004022C1 aSIllegalOption db '%s: illegal option -- %c',0Ah,0
.text:004022C1                                         ; DATA XREF: sub_402330+93F↓o
.text:004022DB aSInvalidOption db '%s: invalid option -- %c',0Ah,0
.text:004022DB                                         ; DATA XREF: sub_402330:loc_402CA7↓o
.text:004022F5 aSOptionSIsAmbi db '%s: option `%s',27h,' is ambiguous',0Ah,0
.text:004022F5                                         ; DATA XREF: sub_402330:loc_402CCE↓o
.text:00402313 ; const char VarName[]
.text:00402313 VarName         db 'POSIXLY_CORRECT',0  ; DATA XREF: sub_402330:loc_402E80↓o
.text:00402323                 align 10h
.text:00402330
.text:00402330 ; =============== S U B R O U T I N E =======================================
.text:00402330
.text:00402330
.text:00402330 ; int __cdecl sub_402330(int, int, char *Str, int, int, int, int, int)
.text:00402330 sub_402330      proc near               ; CODE XREF: sub_402EC0+5A↓p
.text:00402330                                         ; .text:00402FAA↓p ...
.text:00402330
.text:00402330 Str1            = dword ptr -5Ch
.text:00402330 Str2            = dword ptr -58h
.text:00402330 MaxCount        = dword ptr -54h
.text:00402330 var_50          = dword ptr -50h
.text:00402330 var_4C          = dword ptr -4Ch
.text:00402330 var_3C          = dword ptr -3Ch
.text:00402330 var_38          = dword ptr -38h
.text:00402330 var_34          = dword ptr -34h
.text:00402330 var_30          = dword ptr -30h
.text:00402330 var_2C          = dword ptr -2Ch
.text:00402330 var_28          = dword ptr -28h
.text:00402330 var_24          = dword ptr -24h
.text:00402330 var_20          = dword ptr -20h
.text:00402330 var_1C          = dword ptr -1Ch
.text:00402330 var_18          = dword ptr -18h
.text:00402330 var_14          = dword ptr -14h
.text:00402330 arg_0           = dword ptr  4
.text:00402330 arg_4           = dword ptr  8
.text:00402330 Str             = dword ptr  0Ch
.text:00402330 arg_C           = dword ptr  10h
.text:00402330 arg_10          = dword ptr  14h
.text:00402330 arg_14          = dword ptr  18h
.text:00402330 arg_18          = dword ptr  1Ch
.text:00402330 arg_1C          = dword ptr  20h
.text:00402330
.text:00402330                 push    ebp
.text:00402331                 mov     eax, 0FFFFFFFFh
.text:00402336                 push    edi
.text:00402337                 push    esi
.text:00402338                 push    ebx
.text:00402339                 sub     esp, 4Ch
.text:0040233C                 mov     esi, [esp+5Ch+Str]
.text:00402340                 mov     ebp, [esp+5Ch+arg_1C]
.text:00402344                 cmp     byte ptr [esi], 3Ah ; ':'
.text:00402347                 mov     ebx, [ebp+4]
.text:0040234A                 setz    dl
.text:0040234D                 movzx   ecx, dl
.text:00402350                 dec     ecx
.text:00402351                 and     ecx, ebx
.text:00402353                 mov     [esp+5Ch+var_14], ecx
.text:00402357                 mov     ecx, [esp+5Ch+arg_0]
.text:0040235B                 test    ecx, ecx
.text:0040235D                 jle     loc_402487
.text:00402363                 mov     dword ptr [ebp+0Ch], 0
.text:0040236A                 mov     ebx, [ebp+0]
.text:0040236D                 test    ebx, ebx
.text:0040236F                 jz      loc_402EA0
.text:00402375                 mov     edi, [ebp+10h]
.text:00402378                 test    edi, edi
.text:0040237A                 jnz     short loc_4023D3
.text:0040237C                 lea     esi, [esi+0]
.text:00402380
.text:00402380 loc_402380:                             ; CODE XREF: sub_402330+B7C↓j
.text:00402380                 mov     [ebp+24h], ebx
.text:00402383                 mov     esi, [esp+5Ch+Str]
.text:00402387                 mov     [ebp+20h], ebx
.text:0040238A                 mov     ecx, [esp+5Ch+arg_18]
.text:0040238E                 xor     ebx, ebx
.text:00402390                 mov     dword ptr [ebp+14h], 0
.text:00402397                 test    ecx, ecx
.text:00402399                 jz      loc_402E80
.text:0040239F
.text:0040239F loc_40239F:                             ; CODE XREF: sub_402330+B64↓j
.text:0040239F                 mov     ebx, 1
.text:004023A4
.text:004023A4 loc_4023A4:                             ; CODE XREF: sub_402330+B5E↓j
.text:004023A4                 mov     [ebp+1Ch], ebx
.text:004023A7                 mov     ecx, [esp+5Ch+Str]
.text:004023AB                 movzx   eax, byte ptr [ecx]
.text:004023AE                 cmp     al, 2Dh ; '-'
.text:004023B0                 jz      loc_402E70
.text:004023B6                 cmp     al, 2Bh ; '+'
.text:004023B8                 jz      loc_402E59
.text:004023BE                 xor     edx, edx
.text:004023C0                 test    ebx, ebx
.text:004023C2                 setz    dl
.text:004023C5                 mov     [ebp+18h], edx
.text:004023C8
.text:004023C8 loc_4023C8:                             ; CODE XREF: sub_402330+B35↓j
.text:004023C8                 mov     [esp+5Ch+Str], esi
.text:004023CC                 mov     dword ptr [ebp+10h], 1
.text:004023D3
.text:004023D3 loc_4023D3:                             ; CODE XREF: sub_402330+4A↑j
.text:004023D3                 mov     eax, [ebp+14h]
.text:004023D6                 test    eax, eax
.text:004023D8                 jz      short loc_4023E3
.text:004023DA                 cmp     byte ptr [eax], 0
.text:004023DD                 jnz     loc_4024C0
.text:004023E3
.text:004023E3 loc_4023E3:                             ; CODE XREF: sub_402330+A8↑j
.text:004023E3                 mov     ebx, [ebp+0]
.text:004023E6                 cmp     [ebp+24h], ebx
.text:004023E9                 jle     short loc_4023EE
.text:004023EB                 mov     [ebp+24h], ebx
.text:004023EE
.text:004023EE loc_4023EE:                             ; CODE XREF: sub_402330+B9↑j
.text:004023EE                 cmp     [ebp+20h], ebx
.text:004023F1                 jle     short loc_4023F6
.text:004023F3                 mov     [ebp+20h], ebx
.text:004023F6
.text:004023F6 loc_4023F6:                             ; CODE XREF: sub_402330+C1↑j
.text:004023F6                 cmp     dword ptr [ebp+18h], 1
.text:004023FA                 jz      loc_402DD0
.text:00402400
.text:00402400 loc_402400:                             ; CODE XREF: sub_402330+B13↓j
.text:00402400                 cmp     ebx, [esp+5Ch+arg_0]
.text:00402404                 jz      loc_402DB4
.text:0040240A                 cld
.text:0040240B                 mov     ecx, [esp+5Ch+arg_4]
.text:0040240F                 mov     edx, 3
.text:00402414                 mov     edi, offset dword_4020E0
.text:00402419                 mov     esi, [ecx+ebx*4]
.text:0040241C                 mov     ecx, edx
.text:0040241E                 repe cmpsb
.text:00402420                 jnz     short loc_40245C
.text:00402422                 mov     edx, [ebp+24h]
.text:00402425                 lea     eax, [ebx+1]
.text:00402428                 cmp     [ebp+20h], edx
.text:0040242B                 mov     [ebp+0], eax
.text:0040242E                 jz      loc_402DC8
.text:00402434                 cmp     edx, eax
.text:00402436                 jz      short loc_402450
.text:00402438                 mov     [esp+5Ch+Str2], ebp
.text:0040243C                 mov     ebx, [esp+5Ch+arg_4]
.text:00402440                 mov     [esp+5Ch+Str1], ebx
.text:00402443                 call    sub_402FE0
.text:00402448                 nop
.text:00402449                 lea     esi, [esi+0]
.text:00402450
.text:00402450 loc_402450:                             ; CODE XREF: sub_402330+106↑j
.text:00402450                                         ; sub_402330+A9B↓j
.text:00402450                 mov     eax, [esp+5Ch+arg_0]
.text:00402454                 mov     ebx, eax
.text:00402456                 mov     [ebp+24h], eax
.text:00402459                 mov     [ebp+0], eax
.text:0040245C
.text:0040245C loc_40245C:                             ; CODE XREF: sub_402330+F0↑j
.text:0040245C                 cmp     ebx, [esp+5Ch+arg_0]
.text:00402460                 jz      loc_402DB4
.text:00402466                 mov     esi, [esp+5Ch+arg_4]
.text:0040246A                 mov     eax, [esi+ebx*4]
.text:0040246D                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00402470                 jz      short loc_402497
.text:00402472
.text:00402472 loc_402472:                             ; CODE XREF: sub_402330+16D↓j
.text:00402472                 mov     edx, [ebp+18h]
.text:00402475                 test    edx, edx
.text:00402477                 jz      short loc_402490
.text:00402479                 mov     [ebp+0Ch], eax
.text:0040247C                 lea     edi, [ebx+1]
.text:0040247F                 mov     eax, 1
.text:00402484                 mov     [ebp+0], edi
.text:00402487
.text:00402487 loc_402487:                             ; CODE XREF: sub_402330+2D↑j
.text:00402487                                         ; sub_402330+165↓j ...
.text:00402487                 add     esp, 4Ch
.text:0040248A                 pop     ebx
.text:0040248B                 pop     esi
.text:0040248C                 pop     edi
.text:0040248D                 pop     ebp
.text:0040248E                 retn
.text:0040248E ; ---------------------------------------------------------------------------
.text:0040248F                 align 10h
.text:00402490
.text:00402490 loc_402490:                             ; CODE XREF: sub_402330+147↑j
.text:00402490                                         ; sub_402330+A8A↓j ...
.text:00402490                 mov     eax, 0FFFFFFFFh
.text:00402495                 jmp     short loc_402487
.text:00402497 ; ---------------------------------------------------------------------------
.text:00402497
.text:00402497 loc_402497:                             ; CODE XREF: sub_402330+140↑j
.text:00402497                 movzx   edx, byte ptr [eax+1]
.text:0040249B                 test    dl, dl
.text:0040249D                 jz      short loc_402472
.text:0040249F                 mov     ebx, [esp+5Ch+arg_C]
.text:004024A3                 xor     ecx, ecx
.text:004024A5                 test    ebx, ebx
.text:004024A7                 jz      short loc_4024B2
.text:004024A9                 cmp     dl, 2Dh ; '-'
.text:004024AC                 jz      loc_402DAA
.text:004024B2
.text:004024B2 loc_4024B2:                             ; CODE XREF: sub_402330+177↑j
.text:004024B2                                         ; sub_402330+A7F↓j
.text:004024B2                 lea     esi, [ecx+eax+1]
.text:004024B6                 mov     [ebp+14h], esi
.text:004024B9                 lea     esi, [esi+0]
.text:004024C0
.text:004024C0 loc_4024C0:                             ; CODE XREF: sub_402330+AD↑j
.text:004024C0                 mov     ecx, [esp+5Ch+arg_C]
.text:004024C4                 test    ecx, ecx
.text:004024C6                 jz      loc_402850
.text:004024CC                 mov     edx, [ebp+0]
.text:004024CF                 mov     edi, [esp+5Ch+arg_4]
.text:004024D3                 mov     eax, [edi+edx*4]
.text:004024D6                 movzx   edx, byte ptr [eax+1]
.text:004024DA                 cmp     dl, 2Dh ; '-'
.text:004024DD                 jz      short loc_4024F5
.text:004024DF                 mov     ebx, [esp+5Ch+arg_14]
.text:004024E3                 test    ebx, ebx
.text:004024E5                 jz      loc_402850
.text:004024EB                 cmp     byte ptr [eax+2], 0
.text:004024EF                 jz      loc_402D8A
.text:004024F5
.text:004024F5 loc_4024F5:                             ; CODE XREF: sub_402330+1AD↑j
.text:004024F5                                         ; sub_402330+A75↓j
.text:004024F5                 mov     [esp+5Ch+var_18], 0
.text:004024FD                 mov     ecx, [ebp+14h]
.text:00402500                 mov     [esp+5Ch+var_1C], 0
.text:00402508                 mov     [esp+5Ch+var_20], 0
.text:00402510                 mov     edi, ecx
.text:00402512                 mov     [esp+5Ch+var_24], 0FFFFFFFFh
.text:0040251A                 movzx   eax, byte ptr [ecx]
.text:0040251D                 test    al, al
.text:0040251F                 jz      short loc_40253C
.text:00402521                 cmp     al, 3Dh ; '='
.text:00402523                 jz      short loc_40253C
.text:00402525                 lea     esi, [esi+0]
.text:00402529                 lea     edi, [edi+0]
.text:00402530
.text:00402530 loc_402530:                             ; CODE XREF: sub_402330+20A↓j
.text:00402530                 inc     edi
.text:00402531                 movzx   eax, byte ptr [edi]
.text:00402534                 test    al, al
.text:00402536                 jz      short loc_40253C
.text:00402538                 cmp     al, 3Dh ; '='
.text:0040253A                 jnz     short loc_402530
.text:0040253C
.text:0040253C loc_40253C:                             ; CODE XREF: sub_402330+1EF↑j
.text:0040253C                                         ; sub_402330+1F3↑j ...
.text:0040253C                 mov     [esp+5Ch+var_28], 0
.text:00402544                 mov     esi, [esp+5Ch+arg_C]
.text:00402548                 mov     ebx, [esi]
.text:0040254A                 test    ebx, ebx
.text:0040254C                 mov     edx, ebx
.text:0040254E                 jz      loc_402770
.text:00402554                 lea     esi, [esi+0]
.text:0040255A                 lea     edi, [edi+0]
.text:00402560
.text:00402560 loc_402560:                             ; CODE XREF: sub_402330+25E↓j
.text:00402560                 mov     [esp+5Ch+Str2], ecx ; Str2
.text:00402564                 mov     ebx, edi
.text:00402566                 sub     ebx, ecx
.text:00402568                 mov     [esp+5Ch+MaxCount], ebx ; MaxCount
.text:0040256C                 mov     [esp+5Ch+Str1], edx ; Str1
.text:0040256F                 call    strncmp
.text:00402574                 test    eax, eax
.text:00402576                 jz      loc_402D06
.text:0040257C
.text:0040257C loc_40257C:                             ; CODE XREF: sub_402330+A0F↓j
.text:0040257C                                         ; sub_402330+A24↓j ...
.text:0040257C                 inc     [esp+5Ch+var_28]
.text:00402580                 add     esi, 10h
.text:00402583                 mov     ecx, [esi]
.text:00402585                 test    ecx, ecx
.text:00402587                 mov     edx, ecx
.text:00402589                 jz      short loc_402590
.text:0040258B                 mov     ecx, [ebp+14h]
.text:0040258E                 jmp     short loc_402560
.text:00402590 ; ---------------------------------------------------------------------------
.text:00402590
.text:00402590 loc_402590:                             ; CODE XREF: sub_402330+259↑j
.text:00402590                                         ; sub_402330+A55↓j
.text:00402590                 mov     esi, [esp+5Ch+var_20]
.text:00402594                 test    esi, esi
.text:00402596                 jz      short loc_4025A4
.text:00402598                 mov     edx, [esp+5Ch+var_1C]
.text:0040259C                 test    edx, edx
.text:0040259E                 jz      loc_402CB0
.text:004025A4
.text:004025A4 loc_4025A4:                             ; CODE XREF: sub_402330+266↑j
.text:004025A4                 mov     eax, [esp+5Ch+var_18]
.text:004025A8                 test    eax, eax
.text:004025AA                 jz      loc_402770
.text:004025B0                 mov     ecx, [ebp+0]
.text:004025B3                 lea     eax, [ecx+1]
.text:004025B6                 mov     [ebp+0], eax
.text:004025B9                 cmp     byte ptr [edi], 0
.text:004025BC                 jz      loc_4026D0
.text:004025C2                 mov     ecx, [esp+5Ch+var_18]
.text:004025C6                 mov     esi, [ecx+4]
.text:004025C9                 test    esi, esi
.text:004025CB                 jz      short loc_402616
.text:004025CD                 lea     ebx, [edi+1]
.text:004025D0                 mov     [ebp+0Ch], ebx
.text:004025D3
.text:004025D3 loc_4025D3:                             ; CODE XREF: sub_402330+3A8↓j
.text:004025D3                                         ; sub_402330+3C4↓j
.text:004025D3                 mov     ebx, [ebp+14h]
.text:004025D6                 mov     [esp+5Ch+Str1], ebx ; Str
.text:004025D9                 call    strlen
.text:004025DE                 add     [ebp+14h], eax
.text:004025E1                 mov     esi, [esp+5Ch+arg_10]
.text:004025E5                 test    esi, esi
.text:004025E7                 jz      short loc_4025F3
.text:004025E9                 mov     ebp, [esp+5Ch+var_24]
.text:004025ED                 mov     ecx, [esp+5Ch+arg_10]
.text:004025F1                 mov     [ecx], ebp
.text:004025F3
.text:004025F3 loc_4025F3:                             ; CODE XREF: sub_402330+2B7↑j
.text:004025F3                 mov     eax, [esp+5Ch+var_18]
.text:004025F7                 mov     ecx, [eax+8]
.text:004025FA                 test    ecx, ecx
.text:004025FC                 jnz     short loc_40260A
.text:004025FE                 mov     ecx, [esp+5Ch+var_18]
.text:00402602
.text:00402602 loc_402602:                             ; CODE XREF: sub_402330+723↓j
.text:00402602                 mov     eax, [ecx+0Ch]
.text:00402605                 jmp     loc_402487
.text:0040260A ; ---------------------------------------------------------------------------
.text:0040260A
.text:0040260A loc_40260A:                             ; CODE XREF: sub_402330+2CC↑j
.text:0040260A                                         ; sub_402330+719↓j
.text:0040260A                 mov     esi, [eax+0Ch]
.text:0040260D                 xor     eax, eax
.text:0040260F                 mov     [ecx], esi
.text:00402611                 jmp     loc_402487
.text:00402616 ; ---------------------------------------------------------------------------
.text:00402616
.text:00402616 loc_402616:                             ; CODE XREF: sub_402330+29B↑j
.text:00402616                 mov     edi, [esp+5Ch+var_14]
.text:0040261A                 test    edi, edi
.text:0040261C                 jz      short loc_402670
.text:0040261E                 mov     esi, [esp+5Ch+arg_4]
.text:00402622                 mov     edx, [esi+eax*4-4]
.text:00402626                 cmp     byte ptr [edx+1], 2Dh ; '-'
.text:0040262A                 jz      short loc_402692
.text:0040262C                 mov     [esp+5Ch+Str1], offset aSOptionCSDoesn ; "%s: option `%c%s' doesn't allow an argu"...
.text:00402633                 call    ds:libintl_gettext
.text:00402639                 mov     edx, [esp+5Ch+var_18]
.text:0040263D                 mov     edi, [edx]
.text:0040263F                 mov     [esp+5Ch+var_4C], edi
.text:00402643                 mov     ebx, [ebp+0]
.text:00402646                 mov     edi, [esp+5Ch+arg_4]
.text:0040264A                 mov     ecx, [edi+ebx*4-4]
.text:0040264E                 movsx   esi, byte ptr [ecx]
.text:00402651                 mov     ecx, ds:_iob
.text:00402657                 add     ecx, 40h ; '@'
.text:0040265A                 mov     [esp+5Ch+var_50], esi
.text:0040265E                 mov     ebx, [edi]
.text:00402660                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402664                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00402667                 mov     [esp+5Ch+MaxCount], ebx
.text:0040266B                 call    fprintf
.text:00402670
.text:00402670 loc_402670:                             ; CODE XREF: sub_402330+2EC↑j
.text:00402670                                         ; sub_402330+398↓j
.text:00402670                 mov     ecx, [ebp+14h]
.text:00402673                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00402676                 call    strlen
.text:0040267B                 add     [ebp+14h], eax
.text:0040267E                 mov     eax, [esp+5Ch+var_18]
.text:00402682                 mov     esi, [eax+0Ch]
.text:00402685                 mov     [ebp+8], esi
.text:00402688
.text:00402688 loc_402688:                             ; CODE XREF: sub_402330+4E5↓j
.text:00402688                                         ; sub_402330+73E↓j ...
.text:00402688                 mov     eax, 3Fh ; '?'
.text:0040268D                 jmp     loc_402487
.text:00402692 ; ---------------------------------------------------------------------------
.text:00402692
.text:00402692 loc_402692:                             ; CODE XREF: sub_402330+2FA↑j
.text:00402692                 mov     [esp+5Ch+Str1], offset aSOptionSDoesnT ; "%s: option `--%s' doesn't allow an argu"...
.text:00402699                 call    ds:libintl_gettext
.text:0040269F                 mov     edx, [esp+5Ch+var_18]
.text:004026A3                 mov     edi, [esp+5Ch+arg_4]
.text:004026A7                 mov     ecx, ds:_iob
.text:004026AD                 mov     esi, [edx]
.text:004026AF                 add     ecx, 40h ; '@'
.text:004026B2                 mov     [esp+5Ch+var_50], esi
.text:004026B6                 mov     ebx, [edi]
.text:004026B8                 mov     [esp+5Ch+Str2], eax ; Format
.text:004026BC                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:004026BF                 mov     [esp+5Ch+MaxCount], ebx
.text:004026C3                 call    fprintf
.text:004026C8                 jmp     short loc_402670
.text:004026C8 ; ---------------------------------------------------------------------------
.text:004026CA                 align 10h
.text:004026D0
.text:004026D0 loc_4026D0:                             ; CODE XREF: sub_402330+28C↑j
.text:004026D0                 mov     ebx, [esp+5Ch+var_18]
.text:004026D4                 cmp     dword ptr [ebx+4], 1
.text:004026D8                 jnz     loc_4025D3
.text:004026DE                 cmp     eax, [esp+5Ch+arg_0]
.text:004026E2                 jge     short loc_4026F9
.text:004026E4                 mov     ebx, [esp+5Ch+arg_4]
.text:004026E8                 lea     edi, [ecx+2]
.text:004026EB                 mov     [ebp+0], edi
.text:004026EE                 mov     esi, [ebx+eax*4]
.text:004026F1                 mov     [ebp+0Ch], esi
.text:004026F4                 jmp     loc_4025D3
.text:004026F9 ; ---------------------------------------------------------------------------
.text:004026F9
.text:004026F9 loc_4026F9:                             ; CODE XREF: sub_402330+3B2↑j
.text:004026F9                 mov     edx, [esp+5Ch+var_14]
.text:004026FD                 test    edx, edx
.text:004026FF                 jnz     short loc_402730
.text:00402701
.text:00402701 loc_402701:                             ; CODE XREF: sub_402330+437↓j
.text:00402701                 mov     edx, [ebp+14h]
.text:00402704                 mov     [esp+5Ch+Str1], edx ; Str
.text:00402707                 call    strlen
.text:0040270C                 add     [ebp+14h], eax
.text:0040270F                 mov     eax, [esp+5Ch+var_18]
.text:00402713                 mov     edi, [eax+0Ch]
.text:00402716                 mov     [ebp+8], edi
.text:00402719
.text:00402719 loc_402719:                             ; CODE XREF: sub_402330+7C2↓j
.text:00402719                 mov     ebp, [esp+5Ch+Str]
.text:0040271D                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:00402721                 setnz   bl
.text:00402724                 movzx   esi, bl
.text:00402727                 lea     eax, [esi+esi*4+3Ah]
.text:0040272B                 jmp     loc_402487
.text:00402730 ; ---------------------------------------------------------------------------
.text:00402730
.text:00402730 loc_402730:                             ; CODE XREF: sub_402330+3CF↑j
.text:00402730                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:00402737                 call    ds:libintl_gettext
.text:0040273D                 mov     ecx, [ebp+0]
.text:00402740                 mov     esi, [esp+5Ch+arg_4]
.text:00402744                 mov     ebx, [esi+ecx*4-4]
.text:00402748                 mov     ecx, ds:_iob
.text:0040274E                 mov     [esp+5Ch+var_50], ebx
.text:00402752                 mov     edi, [esi]
.text:00402754                 add     ecx, 40h ; '@'
.text:00402757                 mov     [esp+5Ch+Str2], eax ; Format
.text:0040275B                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:0040275E                 mov     [esp+5Ch+MaxCount], edi
.text:00402762                 call    fprintf
.text:00402767                 jmp     short loc_402701
.text:00402767 ; ---------------------------------------------------------------------------
.text:00402769                 align 10h
.text:00402770
.text:00402770 loc_402770:                             ; CODE XREF: sub_402330+21E↑j
.text:00402770                                         ; sub_402330+27A↑j
.text:00402770                 mov     eax, [esp+5Ch+arg_14]
.text:00402774                 test    eax, eax
.text:00402776                 jz      short loc_4027A6
.text:00402778                 mov     ebx, [ebp+0]
.text:0040277B                 mov     esi, [esp+5Ch+arg_4]
.text:0040277F                 mov     edi, [esi+ebx*4]
.text:00402782                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:00402786                 jz      short loc_4027A9
.text:00402788                 mov     ecx, [ebp+14h]
.text:0040278B                 mov     edx, [esp+5Ch+Str]
.text:0040278F                 movsx   ebx, byte ptr [ecx]
.text:00402792                 mov     [esp+5Ch+Str1], edx ; Str
.text:00402795                 mov     [esp+5Ch+Str2], ebx ; Val
.text:00402799                 call    strchr
.text:0040279E                 test    eax, eax
.text:004027A0                 jnz     loc_402850
.text:004027A6
.text:004027A6 loc_4027A6:                             ; CODE XREF: sub_402330+446↑j
.text:004027A6                 mov     ebx, [ebp+0]
.text:004027A9
.text:004027A9 loc_4027A9:                             ; CODE XREF: sub_402330+456↑j
.text:004027A9                 mov     eax, [esp+5Ch+var_14]
.text:004027AD                 test    eax, eax
.text:004027AF                 jz      short loc_402801
.text:004027B1                 mov     esi, [esp+5Ch+arg_4]
.text:004027B5                 mov     edi, [esi+ebx*4]
.text:004027B8                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:004027BC                 jz      short loc_40281A
.text:004027BE                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO ; "%s: unrecognized option `%c%s'\n"
.text:004027C5                 call    ds:libintl_gettext
.text:004027CB                 mov     edi, [ebp+14h]
.text:004027CE                 mov     [esp+5Ch+var_4C], edi
.text:004027D2                 mov     ebx, [ebp+0]
.text:004027D5                 mov     edi, [esp+5Ch+arg_4]
.text:004027D9                 mov     esi, [edi+ebx*4]
.text:004027DC                 movsx   ecx, byte ptr [esi]
.text:004027DF                 mov     esi, ds:_iob
.text:004027E5                 add     esi, 40h ; '@'
.text:004027E8                 mov     [esp+5Ch+var_50], ecx
.text:004027EC                 mov     ebx, [edi]
.text:004027EE                 mov     [esp+5Ch+Str2], eax ; Format
.text:004027F2                 mov     [esp+5Ch+Str1], esi ; Stream
.text:004027F5                 mov     [esp+5Ch+MaxCount], ebx
.text:004027F9                 call    fprintf
.text:004027FE
.text:004027FE loc_4027FE:                             ; CODE XREF: sub_402330+51D↓j
.text:004027FE                 mov     ebx, [ebp+0]
.text:00402801
.text:00402801 loc_402801:                             ; CODE XREF: sub_402330+47F↑j
.text:00402801                 mov     dword ptr [ebp+14h], offset dword_4021E0
.text:00402808                 lea     edx, [ebx+1]
.text:0040280B                 mov     [ebp+0], edx
.text:0040280E
.text:0040280E loc_40280E:                             ; CODE XREF: sub_402330+999↓j
.text:0040280E                 mov     dword ptr [ebp+8], 0
.text:00402815                 jmp     loc_402688
.text:0040281A ; ---------------------------------------------------------------------------
.text:0040281A
.text:0040281A loc_40281A:                             ; CODE XREF: sub_402330+48C↑j
.text:0040281A                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO_0 ; "%s: unrecognized option `--%s'\n"
.text:00402821                 call    ds:libintl_gettext
.text:00402827                 mov     ecx, [ebp+14h]
.text:0040282A                 mov     edi, [esp+5Ch+arg_4]
.text:0040282E                 mov     edx, ds:_iob
.text:00402834                 mov     [esp+5Ch+var_50], ecx
.text:00402838                 mov     ebx, [edi]
.text:0040283A                 add     edx, 40h ; '@'
.text:0040283D                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402841                 mov     [esp+5Ch+MaxCount], ebx
.text:00402845                 mov     [esp+5Ch+Str1], edx ; Stream
.text:00402848                 call    fprintf
.text:0040284D                 jmp     short loc_4027FE
.text:0040284D ; ---------------------------------------------------------------------------
.text:0040284F                 align 10h
.text:00402850
.text:00402850 loc_402850:                             ; CODE XREF: sub_402330+196↑j
.text:00402850                                         ; sub_402330+1B5↑j ...
.text:00402850                 mov     esi, [ebp+14h]
.text:00402853                 movzx   ebx, byte ptr [esi]
.text:00402856                 inc     esi
.text:00402857                 mov     [ebp+14h], esi
.text:0040285A                 mov     ecx, [esp+5Ch+Str]
.text:0040285E                 movsx   esi, bl
.text:00402861                 mov     [esp+5Ch+Str2], esi ; Val
.text:00402865                 mov     edi, esi
.text:00402867                 mov     [esp+5Ch+Str1], ecx ; Str
.text:0040286A                 call    strchr
.text:0040286F                 mov     ecx, [ebp+14h]
.text:00402872                 cmp     byte ptr [ecx], 0
.text:00402875                 jnz     short loc_40287A
.text:00402877                 inc     dword ptr [ebp+0]
.text:0040287A
.text:0040287A loc_40287A:                             ; CODE XREF: sub_402330+545↑j
.text:0040287A                 test    eax, eax
.text:0040287C                 jz      loc_402C60
.text:00402882                 cmp     bl, 3Ah ; ':'
.text:00402885                 jz      loc_402C60
.text:0040288B                 cmp     byte ptr [eax], 57h ; 'W'
.text:0040288E                 jz      loc_402946
.text:00402894                 movzx   edx, byte ptr [eax+1]
.text:00402898
.text:00402898 loc_402898:                             ; CODE XREF: sub_402330+61D↓j
.text:00402898                 cmp     dl, 3Ah ; ':'
.text:0040289B                 jz      short loc_4028A4
.text:0040289D
.text:0040289D loc_40289D:                             ; CODE XREF: sub_402330+590↓j
.text:0040289D                 mov     eax, esi
.text:0040289F                 jmp     loc_402487
.text:004028A4 ; ---------------------------------------------------------------------------
.text:004028A4
.text:004028A4 loc_4028A4:                             ; CODE XREF: sub_402330+56B↑j
.text:004028A4                 cmp     byte ptr [eax+2], 3Ah ; ':'
.text:004028A8                 jz      loc_402931
.text:004028AE                 cmp     byte ptr [ecx], 0
.text:004028B1                 jz      short loc_4028C2
.text:004028B3
.text:004028B3 loc_4028B3:                             ; CODE XREF: sub_402330+604↓j
.text:004028B3                 inc     dword ptr [ebp+0]
.text:004028B6                 mov     [ebp+0Ch], ecx
.text:004028B9
.text:004028B9 loc_4028B9:                             ; CODE XREF: sub_402330+5AB↓j
.text:004028B9                                         ; sub_402330+5C6↓j ...
.text:004028B9                 mov     dword ptr [ebp+14h], 0
.text:004028C0                 jmp     short loc_40289D
.text:004028C2 ; ---------------------------------------------------------------------------
.text:004028C2
.text:004028C2 loc_4028C2:                             ; CODE XREF: sub_402330+581↑j
.text:004028C2                 mov     ecx, [ebp+0]
.text:004028C5                 cmp     ecx, [esp+5Ch+arg_0]
.text:004028C9                 jz      short loc_4028DD
.text:004028CB                 mov     eax, [esp+5Ch+arg_4]
.text:004028CF                 lea     edx, [ecx+1]
.text:004028D2                 mov     [ebp+0], edx
.text:004028D5                 mov     ebx, [eax+ecx*4]
.text:004028D8                 mov     [ebp+0Ch], ebx
.text:004028DB                 jmp     short loc_4028B9
.text:004028DD ; ---------------------------------------------------------------------------
.text:004028DD
.text:004028DD loc_4028DD:                             ; CODE XREF: sub_402330+599↑j
.text:004028DD                 mov     ecx, [esp+5Ch+var_14]
.text:004028E1                 test    ecx, ecx
.text:004028E3                 jnz     short loc_4028FF
.text:004028E5
.text:004028E5 loc_4028E5:                             ; CODE XREF: sub_402330+5FF↓j
.text:004028E5                 mov     [ebp+8], edi
.text:004028E8                 mov     edi, [esp+5Ch+Str]
.text:004028EC                 cmp     byte ptr [edi], 3Ah ; ':'
.text:004028EF                 jz      short loc_4028F8
.text:004028F1                 mov     esi, 3Fh ; '?'
.text:004028F6                 jmp     short loc_4028B9
.text:004028F8 ; ---------------------------------------------------------------------------
.text:004028F8
.text:004028F8 loc_4028F8:                             ; CODE XREF: sub_402330+5BF↑j
.text:004028F8                 mov     esi, 3Ah ; ':'
.text:004028FD                 jmp     short loc_4028B9
.text:004028FF ; ---------------------------------------------------------------------------
.text:004028FF
.text:004028FF loc_4028FF:                             ; CODE XREF: sub_402330+5B3↑j
.text:004028FF                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:00402906                 call    ds:libintl_gettext
.text:0040290C                 mov     [esp+5Ch+var_50], edi
.text:00402910                 mov     ebx, [esp+5Ch+arg_4]
.text:00402914                 mov     edx, ds:_iob
.text:0040291A                 mov     esi, [ebx]
.text:0040291C                 add     edx, 40h ; '@'
.text:0040291F                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402923                 mov     [esp+5Ch+MaxCount], esi
.text:00402927                 mov     [esp+5Ch+Str1], edx ; Stream
.text:0040292A                 call    fprintf
.text:0040292F                 jmp     short loc_4028E5
.text:00402931 ; ---------------------------------------------------------------------------
.text:00402931
.text:00402931 loc_402931:                             ; CODE XREF: sub_402330+578↑j
.text:00402931                 cmp     byte ptr [ecx], 0
.text:00402934                 jnz     loc_4028B3
.text:0040293A                 mov     dword ptr [ebp+0Ch], 0
.text:00402941                 jmp     loc_4028B9
.text:00402946 ; ---------------------------------------------------------------------------
.text:00402946
.text:00402946 loc_402946:                             ; CODE XREF: sub_402330+55E↑j
.text:00402946                 movzx   edx, byte ptr [eax+1]
.text:0040294A                 cmp     dl, 3Bh ; ';'
.text:0040294D                 jnz     loc_402898
.text:00402953                 mov     [esp+5Ch+var_2C], 0
.text:0040295B                 mov     [esp+5Ch+var_30], 0
.text:00402963                 mov     [esp+5Ch+var_34], 0
.text:0040296B                 mov     [esp+5Ch+var_38], 0
.text:00402973                 cmp     byte ptr [ecx], 0
.text:00402976                 jz      loc_402BEB
.text:0040297C                 inc     dword ptr [ebp+0]
.text:0040297F                 mov     [ebp+0Ch], ecx
.text:00402982
.text:00402982 loc_402982:                             ; CODE XREF: sub_402330+8D4↓j
.text:00402982                 mov     edi, [ebp+0Ch]
.text:00402985                 mov     [ebp+14h], edi
.text:00402988                 movzx   eax, byte ptr [edi]
.text:0040298B                 test    al, al
.text:0040298D                 jz      short loc_40299F
.text:0040298F                 cmp     al, 3Dh ; '='
.text:00402991                 jz      short loc_40299F
.text:00402993
.text:00402993 loc_402993:                             ; CODE XREF: sub_402330+66D↓j
.text:00402993                 inc     edi
.text:00402994                 movzx   eax, byte ptr [edi]
.text:00402997                 test    al, al
.text:00402999                 jz      short loc_40299F
.text:0040299B                 cmp     al, 3Dh ; '='
.text:0040299D                 jnz     short loc_402993
.text:0040299F
.text:0040299F loc_40299F:                             ; CODE XREF: sub_402330+65D↑j
.text:0040299F                                         ; sub_402330+661↑j ...
.text:0040299F                 mov     [esp+5Ch+var_3C], 0
.text:004029A7                 mov     esi, [esp+5Ch+arg_C]
.text:004029AB                 mov     eax, [esi]
.text:004029AD                 test    eax, eax
.text:004029AF                 jz      loc_402B30
.text:004029B5                 mov     ecx, eax
.text:004029B7
.text:004029B7 loc_4029B7:                             ; CODE XREF: sub_402330+6B3↓j
.text:004029B7                 mov     ebx, [ebp+14h]
.text:004029BA                 mov     eax, edi
.text:004029BC                 mov     [esp+5Ch+Str1], ecx ; Str1
.text:004029BF                 sub     eax, ebx
.text:004029C1                 mov     [esp+5Ch+MaxCount], eax ; MaxCount
.text:004029C5                 mov     [esp+5Ch+Str2], ebx ; Str2
.text:004029C9                 call    strncmp
.text:004029CE                 test    eax, eax
.text:004029D0                 jz      loc_402B97
.text:004029D6
.text:004029D6 loc_4029D6:                             ; CODE XREF: sub_402330+88C↓j
.text:004029D6                                         ; sub_402330+89D↓j
.text:004029D6                 inc     [esp+5Ch+var_3C]
.text:004029DA                 add     esi, 10h
.text:004029DD                 mov     edx, [esi]
.text:004029DF                 test    edx, edx
.text:004029E1                 mov     ecx, edx
.text:004029E3                 jnz     short loc_4029B7
.text:004029E5
.text:004029E5 loc_4029E5:                             ; CODE XREF: sub_402330+8B6↓j
.text:004029E5                 mov     esi, [esp+5Ch+var_34]
.text:004029E9                 test    esi, esi
.text:004029EB                 jz      short loc_4029F9
.text:004029ED                 mov     ebx, [esp+5Ch+var_30]
.text:004029F1                 test    ebx, ebx
.text:004029F3                 jz      loc_402B41
.text:004029F9
.text:004029F9 loc_4029F9:                             ; CODE XREF: sub_402330+6BB↑j
.text:004029F9                 mov     esi, [esp+5Ch+var_2C]
.text:004029FD                 test    esi, esi
.text:004029FF                 jz      loc_402B30
.text:00402A05                 cmp     byte ptr [edi], 0
.text:00402A08                 jz      loc_402AB0
.text:00402A0E                 mov     ecx, [esp+5Ch+var_2C]
.text:00402A12                 mov     ebx, [ecx+4]
.text:00402A15                 test    ebx, ebx
.text:00402A17                 jz      short loc_402A58
.text:00402A19                 lea     edx, [edi+1]
.text:00402A1C                 mov     [ebp+0Ch], edx
.text:00402A1F
.text:00402A1F loc_402A1F:                             ; CODE XREF: sub_402330+788↓j
.text:00402A1F                                         ; sub_402330+7A7↓j
.text:00402A1F                 mov     edi, [ebp+14h]
.text:00402A22                 mov     [esp+5Ch+Str1], edi ; Str
.text:00402A25                 call    strlen
.text:00402A2A                 add     [ebp+14h], eax
.text:00402A2D                 mov     eax, [esp+5Ch+arg_10]
.text:00402A31                 test    eax, eax
.text:00402A33                 jz      short loc_402A40
.text:00402A35                 mov     edx, [esp+5Ch+var_38]
.text:00402A39                 mov     ebp, [esp+5Ch+arg_10]
.text:00402A3D                 mov     [ebp+0], edx
.text:00402A40
.text:00402A40 loc_402A40:                             ; CODE XREF: sub_402330+703↑j
.text:00402A40                 mov     eax, [esp+5Ch+var_2C]
.text:00402A44                 mov     ecx, [eax+8]
.text:00402A47                 test    ecx, ecx
.text:00402A49                 jnz     loc_40260A
.text:00402A4F                 mov     ecx, [esp+5Ch+var_2C]
.text:00402A53                 jmp     loc_402602
.text:00402A58 ; ---------------------------------------------------------------------------
.text:00402A58
.text:00402A58 loc_402A58:                             ; CODE XREF: sub_402330+6E7↑j
.text:00402A58                 mov     eax, [esp+5Ch+var_14]
.text:00402A5C                 test    eax, eax
.text:00402A5E                 jnz     short loc_402A73
.text:00402A60
.text:00402A60 loc_402A60:                             ; CODE XREF: sub_402330+779↓j
.text:00402A60                 mov     ecx, [ebp+14h]
.text:00402A63                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00402A66                 call    strlen
.text:00402A6B                 add     [ebp+14h], eax
.text:00402A6E                 jmp     loc_402688
.text:00402A73 ; ---------------------------------------------------------------------------
.text:00402A73
.text:00402A73 loc_402A73:                             ; CODE XREF: sub_402330+72E↑j
.text:00402A73                 mov     [esp+5Ch+Str1], offset aSOptionWSDoesn ; "%s: option `-W %s' doesn't allow an arg"...
.text:00402A7A                 call    ds:libintl_gettext
.text:00402A80                 mov     edx, [esp+5Ch+var_2C]
.text:00402A84                 mov     ebx, [esp+5Ch+arg_4]
.text:00402A88                 mov     edi, [edx]
.text:00402A8A                 mov     [esp+5Ch+var_50], edi
.text:00402A8E                 mov     edi, ds:_iob
.text:00402A94                 mov     esi, [ebx]
.text:00402A96                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402A9A                 add     edi, 40h ; '@'
.text:00402A9D                 mov     [esp+5Ch+MaxCount], esi
.text:00402AA1                 mov     [esp+5Ch+Str1], edi ; Stream
.text:00402AA4                 call    fprintf
.text:00402AA9                 jmp     short loc_402A60
.text:00402AA9 ; ---------------------------------------------------------------------------
.text:00402AAB                 align 10h
.text:00402AB0
.text:00402AB0 loc_402AB0:                             ; CODE XREF: sub_402330+6D8↑j
.text:00402AB0                 mov     esi, [esp+5Ch+var_2C]
.text:00402AB4                 cmp     dword ptr [esi+4], 1
.text:00402AB8                 jnz     loc_402A1F
.text:00402ABE                 mov     ecx, [ebp+0]
.text:00402AC1                 cmp     ecx, [esp+5Ch+arg_0]
.text:00402AC5                 jge     short loc_402ADC
.text:00402AC7                 mov     eax, [esp+5Ch+arg_4]
.text:00402ACB                 lea     ebx, [ecx+1]
.text:00402ACE                 mov     [ebp+0], ebx
.text:00402AD1                 mov     edi, [eax+ecx*4]
.text:00402AD4                 mov     [ebp+0Ch], edi
.text:00402AD7                 jmp     loc_402A1F
.text:00402ADC ; ---------------------------------------------------------------------------
.text:00402ADC
.text:00402ADC loc_402ADC:                             ; CODE XREF: sub_402330+795↑j
.text:00402ADC                 mov     edx, [esp+5Ch+var_14]
.text:00402AE0                 test    edx, edx
.text:00402AE2                 jnz     short loc_402AF7
.text:00402AE4
.text:00402AE4 loc_402AE4:                             ; CODE XREF: sub_402330+7FE↓j
.text:00402AE4                 mov     edx, [ebp+14h]
.text:00402AE7                 mov     [esp+5Ch+Str1], edx ; Str
.text:00402AEA                 call    strlen
.text:00402AEF                 add     [ebp+14h], eax
.text:00402AF2                 jmp     loc_402719
.text:00402AF7 ; ---------------------------------------------------------------------------
.text:00402AF7
.text:00402AF7 loc_402AF7:                             ; CODE XREF: sub_402330+7B2↑j
.text:00402AF7                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:00402AFE                 call    ds:libintl_gettext
.text:00402B04                 mov     ecx, [ebp+0]
.text:00402B07                 mov     ebx, [esp+5Ch+arg_4]
.text:00402B0B                 mov     edi, [ebx+ecx*4-4]
.text:00402B0F                 mov     ecx, ds:_iob
.text:00402B15                 mov     [esp+5Ch+var_50], edi
.text:00402B19                 mov     esi, [ebx]
.text:00402B1B                 add     ecx, 40h ; '@'
.text:00402B1E                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402B22                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00402B25                 mov     [esp+5Ch+MaxCount], esi
.text:00402B29                 call    fprintf
.text:00402B2E                 jmp     short loc_402AE4
.text:00402B30 ; ---------------------------------------------------------------------------
.text:00402B30
.text:00402B30 loc_402B30:                             ; CODE XREF: sub_402330+67F↑j
.text:00402B30                                         ; sub_402330+6CF↑j
.text:00402B30                 mov     dword ptr [ebp+14h], 0
.text:00402B37                 mov     eax, 57h ; 'W'
.text:00402B3C                 jmp     loc_402487
.text:00402B41 ; ---------------------------------------------------------------------------
.text:00402B41
.text:00402B41 loc_402B41:                             ; CODE XREF: sub_402330+6C3↑j
.text:00402B41                 mov     edi, [esp+5Ch+var_14]
.text:00402B45                 test    edi, edi
.text:00402B47                 jnz     short loc_402B5F
.text:00402B49
.text:00402B49 loc_402B49:                             ; CODE XREF: sub_402330+865↓j
.text:00402B49                 mov     edx, [ebp+14h]
.text:00402B4C                 mov     [esp+5Ch+Str1], edx ; Str
.text:00402B4F                 call    strlen
.text:00402B54                 add     [ebp+14h], eax
.text:00402B57                 inc     dword ptr [ebp+0]
.text:00402B5A                 jmp     loc_402688
.text:00402B5F ; ---------------------------------------------------------------------------
.text:00402B5F
.text:00402B5F loc_402B5F:                             ; CODE XREF: sub_402330+817↑j
.text:00402B5F                 mov     [esp+5Ch+Str1], offset aSOptionWSIsAmb ; "%s: option `-W %s' is ambiguous\n"
.text:00402B66                 call    ds:libintl_gettext
.text:00402B6C                 mov     ecx, [ebp+0]
.text:00402B6F                 mov     ebx, [esp+5Ch+arg_4]
.text:00402B73                 mov     edi, [ebx+ecx*4]
.text:00402B76                 mov     ecx, ds:_iob
.text:00402B7C                 mov     [esp+5Ch+var_50], edi
.text:00402B80                 mov     esi, [ebx]
.text:00402B82                 add     ecx, 40h ; '@'
.text:00402B85                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402B89                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00402B8C                 mov     [esp+5Ch+MaxCount], esi
.text:00402B90                 call    fprintf
.text:00402B95                 jmp     short loc_402B49
.text:00402B97 ; ---------------------------------------------------------------------------
.text:00402B97
.text:00402B97 loc_402B97:                             ; CODE XREF: sub_402330+6A0↑j
.text:00402B97                 mov     edx, [ebp+14h]
.text:00402B9A                 mov     ebx, edi
.text:00402B9C                 mov     ecx, [esi]
.text:00402B9E                 sub     ebx, edx
.text:00402BA0                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00402BA3                 call    strlen
.text:00402BA8                 cmp     ebx, eax
.text:00402BAA                 jz      short loc_402BD2
.text:00402BAC                 mov     ebx, [esp+5Ch+var_2C]
.text:00402BB0                 test    ebx, ebx
.text:00402BB2                 jz      short loc_402BC1
.text:00402BB4                 mov     [esp+5Ch+var_34], 1
.text:00402BBC                 jmp     loc_4029D6
.text:00402BC1 ; ---------------------------------------------------------------------------
.text:00402BC1
.text:00402BC1 loc_402BC1:                             ; CODE XREF: sub_402330+882↑j
.text:00402BC1                 mov     [esp+5Ch+var_2C], esi
.text:00402BC5                 mov     ecx, [esp+5Ch+var_3C]
.text:00402BC9                 mov     [esp+5Ch+var_38], ecx
.text:00402BCD                 jmp     loc_4029D6
.text:00402BD2 ; ---------------------------------------------------------------------------
.text:00402BD2
.text:00402BD2 loc_402BD2:                             ; CODE XREF: sub_402330+87A↑j
.text:00402BD2                 mov     [esp+5Ch+var_2C], esi
.text:00402BD6                 mov     eax, [esp+5Ch+var_3C]
.text:00402BDA                 mov     [esp+5Ch+var_30], 1
.text:00402BE2                 mov     [esp+5Ch+var_38], eax
.text:00402BE6                 jmp     loc_4029E5
.text:00402BEB ; ---------------------------------------------------------------------------
.text:00402BEB
.text:00402BEB loc_402BEB:                             ; CODE XREF: sub_402330+646↑j
.text:00402BEB                 mov     edx, [ebp+0]
.text:00402BEE                 cmp     edx, [esp+5Ch+arg_0]
.text:00402BF2                 jz      short loc_402C09
.text:00402BF4                 mov     ebx, [esp+5Ch+arg_4]
.text:00402BF8                 lea     esi, [edx+1]
.text:00402BFB                 mov     [ebp+0], esi
.text:00402BFE                 mov     edi, [ebx+edx*4]
.text:00402C01                 mov     [ebp+0Ch], edi
.text:00402C04                 jmp     loc_402982
.text:00402C09 ; ---------------------------------------------------------------------------
.text:00402C09
.text:00402C09 loc_402C09:                             ; CODE XREF: sub_402330+8C2↑j
.text:00402C09                 mov     edi, [esp+5Ch+var_14]
.text:00402C0D                 test    edi, edi
.text:00402C0F                 jnz     short loc_402C2C
.text:00402C11
.text:00402C11 loc_402C11:                             ; CODE XREF: sub_402330+92C↓j
.text:00402C11                 mov     [ebp+8], esi
.text:00402C14                 mov     ebp, [esp+5Ch+Str]
.text:00402C18                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:00402C1C                 jz      short loc_402C28
.text:00402C1E                 mov     bl, 3Fh ; '?'
.text:00402C20
.text:00402C20 loc_402C20:                             ; CODE XREF: sub_402330+8FA↓j
.text:00402C20                 movsx   eax, bl
.text:00402C23                 jmp     loc_402487
.text:00402C28 ; ---------------------------------------------------------------------------
.text:00402C28
.text:00402C28 loc_402C28:                             ; CODE XREF: sub_402330+8EC↑j
.text:00402C28                 mov     bl, 3Ah ; ':'
.text:00402C2A                 jmp     short loc_402C20
.text:00402C2C ; ---------------------------------------------------------------------------
.text:00402C2C
.text:00402C2C loc_402C2C:                             ; CODE XREF: sub_402330+8DF↑j
.text:00402C2C                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:00402C33                 call    ds:libintl_gettext
.text:00402C39                 mov     [esp+5Ch+var_50], esi
.text:00402C3D                 mov     edx, [esp+5Ch+arg_4]
.text:00402C41                 mov     ecx, ds:_iob
.text:00402C47                 mov     ebx, [edx]
.text:00402C49                 add     ecx, 40h ; '@'
.text:00402C4C                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402C50                 mov     [esp+5Ch+MaxCount], ebx
.text:00402C54                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00402C57                 call    fprintf
.text:00402C5C                 jmp     short loc_402C11
.text:00402C5C ; ---------------------------------------------------------------------------
.text:00402C5E                 align 10h
.text:00402C60
.text:00402C60 loc_402C60:                             ; CODE XREF: sub_402330+54C↑j
.text:00402C60                                         ; sub_402330+555↑j
.text:00402C60                 mov     eax, [esp+5Ch+var_14]
.text:00402C64                 test    eax, eax
.text:00402C66                 jz      short loc_402C9F
.text:00402C68                 mov     ebx, [ebp+1Ch]
.text:00402C6B                 test    ebx, ebx
.text:00402C6D                 jz      short loc_402CA7
.text:00402C6F                 mov     [esp+5Ch+Str1], offset aSIllegalOption ; "%s: illegal option -- %c\n"
.text:00402C76
.text:00402C76 loc_402C76:                             ; CODE XREF: sub_402330+97E↓j
.text:00402C76                 call    ds:libintl_gettext
.text:00402C7C                 mov     [esp+5Ch+var_50], esi
.text:00402C80                 mov     ebx, [esp+5Ch+arg_4]
.text:00402C84                 mov     edx, ds:_iob
.text:00402C8A                 mov     esi, [ebx]
.text:00402C8C                 add     edx, 40h ; '@'
.text:00402C8F                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402C93                 mov     [esp+5Ch+MaxCount], esi
.text:00402C97                 mov     [esp+5Ch+Str1], edx ; Stream
.text:00402C9A                 call    fprintf
.text:00402C9F
.text:00402C9F loc_402C9F:                             ; CODE XREF: sub_402330+936↑j
.text:00402C9F                 mov     [ebp+8], edi
.text:00402CA2                 jmp     loc_402688
.text:00402CA7 ; ---------------------------------------------------------------------------
.text:00402CA7
.text:00402CA7 loc_402CA7:                             ; CODE XREF: sub_402330+93D↑j
.text:00402CA7                 mov     [esp+5Ch+Str1], offset aSInvalidOption ; "%s: invalid option -- %c\n"
.text:00402CAE                 jmp     short loc_402C76
.text:00402CB0 ; ---------------------------------------------------------------------------
.text:00402CB0
.text:00402CB0 loc_402CB0:                             ; CODE XREF: sub_402330+26E↑j
.text:00402CB0                 mov     edi, [esp+5Ch+var_14]
.text:00402CB4                 test    edi, edi
.text:00402CB6                 jnz     short loc_402CCE
.text:00402CB8
.text:00402CB8 loc_402CB8:                             ; CODE XREF: sub_402330+9D4↓j
.text:00402CB8                 mov     edx, [ebp+14h]
.text:00402CBB                 mov     [esp+5Ch+Str1], edx ; Str
.text:00402CBE                 call    strlen
.text:00402CC3                 add     [ebp+14h], eax
.text:00402CC6                 inc     dword ptr [ebp+0]
.text:00402CC9                 jmp     loc_40280E
.text:00402CCE ; ---------------------------------------------------------------------------
.text:00402CCE
.text:00402CCE loc_402CCE:                             ; CODE XREF: sub_402330+986↑j
.text:00402CCE                 mov     [esp+5Ch+Str1], offset aSOptionSIsAmbi ; "%s: option `%s' is ambiguous\n"
.text:00402CD5                 call    ds:libintl_gettext
.text:00402CDB                 mov     ebx, [ebp+0]
.text:00402CDE                 mov     edi, [esp+5Ch+arg_4]
.text:00402CE2                 mov     ecx, [edi+ebx*4]
.text:00402CE5                 mov     ebx, ds:_iob
.text:00402CEB                 mov     [esp+5Ch+var_50], ecx
.text:00402CEF                 mov     esi, [edi]
.text:00402CF1                 add     ebx, 40h ; '@'
.text:00402CF4                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402CF8                 mov     [esp+5Ch+Str1], ebx ; Stream
.text:00402CFB                 mov     [esp+5Ch+MaxCount], esi
.text:00402CFF                 call    fprintf
.text:00402D04                 jmp     short loc_402CB8
.text:00402D06 ; ---------------------------------------------------------------------------
.text:00402D06
.text:00402D06 loc_402D06:                             ; CODE XREF: sub_402330+246↑j
.text:00402D06                 mov     ecx, [ebp+14h]
.text:00402D09                 mov     ebx, edi
.text:00402D0B                 mov     edx, [esi]
.text:00402D0D                 sub     ebx, ecx
.text:00402D0F                 mov     [esp+5Ch+Str1], edx ; Str
.text:00402D12                 call    strlen
.text:00402D17                 cmp     ebx, eax
.text:00402D19                 jz      short loc_402D71
.text:00402D1B                 mov     ebx, [esp+5Ch+var_18]
.text:00402D1F                 test    ebx, ebx
.text:00402D21                 jz      short loc_402D60
.text:00402D23                 mov     edx, [esp+5Ch+arg_14]
.text:00402D27                 test    edx, edx
.text:00402D29                 jnz     short loc_402D37
.text:00402D2B                 mov     ecx, [esp+5Ch+var_18]
.text:00402D2F                 mov     ebx, [esi+4]
.text:00402D32                 cmp     [ecx+4], ebx
.text:00402D35                 jz      short loc_402D44
.text:00402D37
.text:00402D37 loc_402D37:                             ; CODE XREF: sub_402330+9F9↑j
.text:00402D37                                         ; sub_402330+A1A↓j ...
.text:00402D37                 mov     [esp+5Ch+var_20], 1
.text:00402D3F                 jmp     loc_40257C
.text:00402D44 ; ---------------------------------------------------------------------------
.text:00402D44
.text:00402D44 loc_402D44:                             ; CODE XREF: sub_402330+A05↑j
.text:00402D44                 mov     edx, [esi+8]
.text:00402D47                 cmp     [ecx+8], edx
.text:00402D4A                 jnz     short loc_402D37
.text:00402D4C                 mov     ebx, [esi+0Ch]
.text:00402D4F                 cmp     [ecx+0Ch], ebx
.text:00402D52                 jnz     short loc_402D37
.text:00402D54                 jmp     loc_40257C
.text:00402D54 ; ---------------------------------------------------------------------------
.text:00402D59                 align 10h
.text:00402D60
.text:00402D60 loc_402D60:                             ; CODE XREF: sub_402330+9F1↑j
.text:00402D60                 mov     [esp+5Ch+var_18], esi
.text:00402D64                 mov     eax, [esp+5Ch+var_28]
.text:00402D68                 mov     [esp+5Ch+var_24], eax
.text:00402D6C                 jmp     loc_40257C
.text:00402D71 ; ---------------------------------------------------------------------------
.text:00402D71
.text:00402D71 loc_402D71:                             ; CODE XREF: sub_402330+9E9↑j
.text:00402D71                 mov     [esp+5Ch+var_18], esi
.text:00402D75                 mov     ecx, [esp+5Ch+var_28]
.text:00402D79                 mov     [esp+5Ch+var_1C], 1
.text:00402D81                 mov     [esp+5Ch+var_24], ecx
.text:00402D85                 jmp     loc_402590
.text:00402D8A ; ---------------------------------------------------------------------------
.text:00402D8A
.text:00402D8A loc_402D8A:                             ; CODE XREF: sub_402330+1BF↑j
.text:00402D8A                 mov     eax, [esp+5Ch+Str]
.text:00402D8E                 movsx   esi, dl
.text:00402D91                 mov     [esp+5Ch+Str2], esi ; Val
.text:00402D95                 mov     [esp+5Ch+Str1], eax ; Str
.text:00402D98                 call    strchr
.text:00402D9D                 test    eax, eax
.text:00402D9F                 jnz     loc_402850
.text:00402DA5                 jmp     loc_4024F5
.text:00402DAA ; ---------------------------------------------------------------------------
.text:00402DAA
.text:00402DAA loc_402DAA:                             ; CODE XREF: sub_402330+17C↑j
.text:00402DAA                 mov     ecx, 1
.text:00402DAF                 jmp     loc_4024B2
.text:00402DB4 ; ---------------------------------------------------------------------------
.text:00402DB4
.text:00402DB4 loc_402DB4:                             ; CODE XREF: sub_402330+D4↑j
.text:00402DB4                                         ; sub_402330+130↑j
.text:00402DB4                 mov     eax, [ebp+20h]
.text:00402DB7                 cmp     eax, [ebp+24h]
.text:00402DBA                 jz      loc_402490
.text:00402DC0                 mov     [ebp+0], eax
.text:00402DC3                 jmp     loc_402490
.text:00402DC8 ; ---------------------------------------------------------------------------
.text:00402DC8
.text:00402DC8 loc_402DC8:                             ; CODE XREF: sub_402330+FE↑j
.text:00402DC8                 mov     [ebp+20h], eax
.text:00402DCB                 jmp     loc_402450
.text:00402DD0 ; ---------------------------------------------------------------------------
.text:00402DD0
.text:00402DD0 loc_402DD0:                             ; CODE XREF: sub_402330+CA↑j
.text:00402DD0                 mov     edx, [ebp+20h]
.text:00402DD3                 mov     eax, [ebp+24h]
.text:00402DD6                 cmp     edx, eax
.text:00402DD8                 jz      short loc_402E50
.text:00402DDA                 cmp     eax, ebx
.text:00402DDC                 jz      short loc_402DF1
.text:00402DDE                 mov     [esp+5Ch+Str2], ebp
.text:00402DE2                 mov     ebx, [esp+5Ch+arg_4]
.text:00402DE6                 mov     [esp+5Ch+Str1], ebx
.text:00402DE9                 call    sub_402FE0
.text:00402DEE                 mov     ebx, [ebp+0]
.text:00402DF1
.text:00402DF1 loc_402DF1:                             ; CODE XREF: sub_402330+AAC↑j
.text:00402DF1                                         ; sub_402330+B22↓j ...
.text:00402DF1                 cmp     ebx, [esp+5Ch+arg_0]
.text:00402DF5                 jge     short loc_402E40
.text:00402DF7                 mov     esi, [esp+5Ch+arg_4]
.text:00402DFB                 mov     eax, [esi+ebx*4]
.text:00402DFE                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00402E01                 jz      short loc_402E48
.text:00402E03                 lea     esi, [esi+0]
.text:00402E09                 lea     edi, [edi+0]
.text:00402E10
.text:00402E10 loc_402E10:                             ; CODE XREF: sub_402330+AFC↓j
.text:00402E10                                         ; sub_402330+B1C↓j
.text:00402E10                 lea     eax, [ebx+1]
.text:00402E13                 mov     ebx, eax
.text:00402E15                 mov     [ebp+0], eax
.text:00402E18                 cmp     eax, [esp+5Ch+arg_0]
.text:00402E1C                 jge     short loc_402E40
.text:00402E1E                 mov     edi, [esp+5Ch+arg_4]
.text:00402E22                 mov     edx, [edi+eax*4]
.text:00402E25                 cmp     byte ptr [edx], 2Dh ; '-'
.text:00402E28                 jz      short loc_402E30
.text:00402E2A
.text:00402E2A loc_402E2A:                             ; CODE XREF: sub_402330+B04↓j
.text:00402E2A                 mov     ebx, eax
.text:00402E2C                 jmp     short loc_402E10
.text:00402E2C ; ---------------------------------------------------------------------------
.text:00402E2E                 align 10h
.text:00402E30
.text:00402E30 loc_402E30:                             ; CODE XREF: sub_402330+AF8↑j
.text:00402E30                 cmp     byte ptr [edx+1], 0
.text:00402E34                 jz      short loc_402E2A
.text:00402E36                 lea     esi, [esi+0]
.text:00402E39                 lea     edi, [edi+0]
.text:00402E40
.text:00402E40 loc_402E40:                             ; CODE XREF: sub_402330+AC5↑j
.text:00402E40                                         ; sub_402330+AEC↑j ...
.text:00402E40                 mov     [ebp+24h], ebx
.text:00402E43                 jmp     loc_402400
.text:00402E48 ; ---------------------------------------------------------------------------
.text:00402E48
.text:00402E48 loc_402E48:                             ; CODE XREF: sub_402330+AD1↑j
.text:00402E48                 cmp     byte ptr [eax+1], 0
.text:00402E4C                 jz      short loc_402E10
.text:00402E4E                 jmp     short loc_402E40
.text:00402E50 ; ---------------------------------------------------------------------------
.text:00402E50
.text:00402E50 loc_402E50:                             ; CODE XREF: sub_402330+AA8↑j
.text:00402E50                 cmp     edx, ebx
.text:00402E52                 jz      short loc_402DF1
.text:00402E54                 mov     [ebp+20h], ebx
.text:00402E57                 jmp     short loc_402DF1
.text:00402E59 ; ---------------------------------------------------------------------------
.text:00402E59
.text:00402E59 loc_402E59:                             ; CODE XREF: sub_402330+88↑j
.text:00402E59                 mov     dword ptr [ebp+18h], 0
.text:00402E60                 mov     esi, [esp+5Ch+Str]
.text:00402E64
.text:00402E64 loc_402E64:                             ; CODE XREF: sub_402330+B49↓j
.text:00402E64                 inc     esi
.text:00402E65                 jmp     loc_4023C8
.text:00402E65 ; ---------------------------------------------------------------------------
.text:00402E6A                 align 10h
.text:00402E70
.text:00402E70 loc_402E70:                             ; CODE XREF: sub_402330+80↑j
.text:00402E70                 mov     dword ptr [ebp+18h], 2
.text:00402E77                 mov     esi, ecx
.text:00402E79                 jmp     short loc_402E64
.text:00402E79 ; ---------------------------------------------------------------------------
.text:00402E7B                 align 10h
.text:00402E80
.text:00402E80 loc_402E80:                             ; CODE XREF: sub_402330+69↑j
.text:00402E80                 mov     [esp+5Ch+Str1], offset VarName ; "POSIXLY_CORRECT"
.text:00402E87                 call    getenv
.text:00402E8C                 test    eax, eax
.text:00402E8E                 jz      loc_4023A4
.text:00402E94                 jmp     loc_40239F
.text:00402E94 ; ---------------------------------------------------------------------------
.text:00402E99                 align 10h
.text:00402EA0
.text:00402EA0 loc_402EA0:                             ; CODE XREF: sub_402330+3F↑j
.text:00402EA0                 mov     dword ptr [ebp+0], 1
.text:00402EA7                 mov     ebx, 1
.text:00402EAC                 jmp     loc_402380
.text:00402EAC sub_402330      endp
.text:00402EAC
.text:00402EB1 ; ---------------------------------------------------------------------------
.text:00402EB1                 jmp     short sub_402EC0
.text:00402EB1 ; ---------------------------------------------------------------------------
.text:00402EB3                 align 10h
.text:00402EC0
.text:00402EC0 ; =============== S U B R O U T I N E =======================================
.text:00402EC0
.text:00402EC0
.text:00402EC0 ; int __cdecl sub_402EC0(int, int, char *, int, int, int, int)
.text:00402EC0 sub_402EC0      proc near               ; CODE XREF: .text:00402EB1↑j
.text:00402EC0                                         ; sub_4036C0+3A↓p ...
.text:00402EC0
.text:00402EC0 var_2C          = dword ptr -2Ch
.text:00402EC0 var_28          = dword ptr -28h
.text:00402EC0 Str             = dword ptr -24h
.text:00402EC0 var_20          = dword ptr -20h
.text:00402EC0 var_1C          = dword ptr -1Ch
.text:00402EC0 var_18          = dword ptr -18h
.text:00402EC0 var_14          = dword ptr -14h
.text:00402EC0 var_10          = dword ptr -10h
.text:00402EC0 arg_0           = dword ptr  4
.text:00402EC0 arg_4           = dword ptr  8
.text:00402EC0 arg_8           = dword ptr  0Ch
.text:00402EC0 arg_C           = dword ptr  10h
.text:00402EC0 arg_10          = dword ptr  14h
.text:00402EC0 arg_14          = dword ptr  18h
.text:00402EC0 arg_18          = dword ptr  1Ch
.text:00402EC0
.text:00402EC0                 sub     esp, 2Ch
.text:00402EC3                 mov     edx, dword_40E010
.text:00402EC9                 mov     [esp+2Ch+var_10], offset dword_40F000 ; int
.text:00402ED1                 mov     ecx, dword_40E014
.text:00402ED7                 mov     ds:dword_40F000, edx
.text:00402EDD                 mov     edx, [esp+2Ch+arg_18]
.text:00402EE1                 mov     ds:dword_40F004, ecx
.text:00402EE7                 mov     ecx, [esp+2Ch+arg_14]
.text:00402EEB                 mov     [esp+2Ch+var_14], edx ; int
.text:00402EEF                 mov     edx, [esp+2Ch+arg_10]
.text:00402EF3                 mov     [esp+2Ch+var_18], ecx ; int
.text:00402EF7                 mov     ecx, [esp+2Ch+arg_C]
.text:00402EFB                 mov     [esp+2Ch+var_1C], edx ; int
.text:00402EFF                 mov     edx, [esp+2Ch+arg_8]
.text:00402F03                 mov     [esp+2Ch+var_20], ecx ; int
.text:00402F07                 mov     ecx, [esp+2Ch+arg_4]
.text:00402F0B                 mov     [esp+2Ch+Str], edx ; Str
.text:00402F0F                 mov     edx, [esp+2Ch+arg_0]
.text:00402F13                 mov     [esp+2Ch+var_28], ecx ; int
.text:00402F17                 mov     [esp+2Ch+var_2C], edx ; int
.text:00402F1A                 call    sub_402330
.text:00402F1F                 mov     ecx, ds:dword_40F000
.text:00402F25                 mov     dword_40E010, ecx
.text:00402F2B                 mov     ecx, ds:dword_40F00C
.text:00402F31                 mov     ds:dword_40F4D0, ecx
.text:00402F37                 mov     ecx, ds:dword_40F008
.text:00402F3D                 mov     dword_40E018, ecx
.text:00402F43                 add     esp, 2Ch
.text:00402F46                 retn
.text:00402F46 sub_402EC0      endp
.text:00402F46
.text:00402F46 ; ---------------------------------------------------------------------------
.text:00402F47                 align 10h
.text:00402F50                 sub     esp, 2Ch
.text:00402F53                 mov     edx, dword_40E010
.text:00402F59                 mov     dword ptr [esp+1Ch], offset dword_40F000
.text:00402F61                 mov     ecx, dword_40E014
.text:00402F67                 mov     dword ptr [esp+18h], 1
.text:00402F6F                 mov     ds:dword_40F000, edx
.text:00402F75                 mov     edx, [esp+38h]
.text:00402F79                 mov     ds:dword_40F004, ecx
.text:00402F7F                 mov     ecx, [esp+34h]
.text:00402F83                 mov     [esp+8], edx
.text:00402F87                 mov     edx, [esp+30h]
.text:00402F8B                 mov     [esp+4], ecx
.text:00402F8F                 mov     dword ptr [esp+14h], 0
.text:00402F97                 mov     dword ptr [esp+10h], 0
.text:00402F9F                 mov     dword ptr [esp+0Ch], 0
.text:00402FA7                 mov     [esp], edx
.text:00402FAA                 call    sub_402330
.text:00402FAF                 mov     ecx, ds:dword_40F000
.text:00402FB5                 mov     dword_40E010, ecx
.text:00402FBB                 mov     ecx, ds:dword_40F00C
.text:00402FC1                 mov     ds:dword_40F4D0, ecx
.text:00402FC7                 mov     ecx, ds:dword_40F008
.text:00402FCD                 mov     dword_40E018, ecx
.text:00402FD3                 add     esp, 2Ch
.text:00402FD6                 retn
.text:00402FD6 ; ---------------------------------------------------------------------------
.text:00402FD7                 align 10h
.text:00402FE0
.text:00402FE0 ; =============== S U B R O U T I N E =======================================
.text:00402FE0
.text:00402FE0
.text:00402FE0 sub_402FE0      proc near               ; CODE XREF: sub_402330+113↑p
.text:00402FE0                                         ; sub_402330+AB9↑p
.text:00402FE0
.text:00402FE0 var_2C          = dword ptr -2Ch
.text:00402FE0 var_28          = dword ptr -28h
.text:00402FE0 var_24          = dword ptr -24h
.text:00402FE0 var_20          = dword ptr -20h
.text:00402FE0 var_1C          = dword ptr -1Ch
.text:00402FE0 var_18          = dword ptr -18h
.text:00402FE0 var_14          = dword ptr -14h
.text:00402FE0 arg_0           = dword ptr  4
.text:00402FE0 arg_4           = dword ptr  8
.text:00402FE0
.text:00402FE0                 push    ebp
.text:00402FE1                 push    edi
.text:00402FE2                 push    esi
.text:00402FE3                 push    ebx
.text:00402FE4                 sub     esp, 1Ch
.text:00402FE7                 mov     ecx, [esp+2Ch+arg_4]
.text:00402FEB                 mov     eax, [esp+2Ch+arg_4]
.text:00402FEF                 mov     ebx, [esp+2Ch+arg_4]
.text:00402FF3                 mov     edx, [ecx+20h]
.text:00402FF6                 mov     edi, [esp+2Ch+arg_0]
.text:00402FFA                 mov     ecx, [ebx]
.text:00402FFC                 mov     [esp+2Ch+var_2C], edx
.text:00402FFF                 mov     [esp+2Ch+var_14], edx
.text:00403003                 mov     edx, [eax+24h]
.text:00403006                 mov     [esp+2Ch+var_28], ecx
.text:0040300A                 mov     [esp+2Ch+var_1C], ecx
.text:0040300E                 cmp     ecx, edx
.text:00403010                 mov     [esp+2Ch+var_18], edx
.text:00403014                 jle     short loc_403090
.text:00403016                 mov     esi, [esp+2Ch+var_2C]
.text:00403019                 cmp     edx, esi
.text:0040301B                 jle     short loc_403090
.text:0040301D                 lea     esi, [esi+0]
.text:00403020
.text:00403020 loc_403020:                             ; CODE XREF: sub_402FE0+A1↓j
.text:00403020                 mov     ebx, [esp+2Ch+var_1C]
.text:00403024                 mov     edx, [esp+2Ch+var_18]
.text:00403028                 mov     ebp, [esp+2Ch+var_18]
.text:0040302C                 mov     eax, [esp+2Ch+var_14]
.text:00403030                 sub     ebx, edx
.text:00403032                 mov     [esp+2Ch+var_20], ebx
.text:00403036                 sub     ebp, eax
.text:00403038                 cmp     ebx, ebp
.text:0040303A                 jle     short loc_4030B5
.text:0040303C                 xor     esi, esi
.text:0040303E                 cmp     esi, ebp
.text:00403040                 jge     short loc_40306D
.text:00403042                 mov     ecx, [esp+2Ch+var_1C]
.text:00403046                 sub     ecx, ebp
.text:00403048                 mov     [esp+2Ch+var_24], ecx
.text:0040304C                 lea     esi, [esi+0]
.text:00403050
.text:00403050 loc_403050:                             ; CODE XREF: sub_402FE0+8B↓j
.text:00403050                 mov     ecx, [esp+2Ch+var_14]
.text:00403054                 mov     edx, [esp+2Ch+var_24]
.text:00403058                 add     ecx, esi
.text:0040305A                 add     edx, esi
.text:0040305C                 mov     ebx, [edi+ecx*4]
.text:0040305F                 mov     eax, [edi+edx*4]
.text:00403062                 inc     esi
.text:00403063                 cmp     esi, ebp
.text:00403065                 mov     [edi+ecx*4], eax
.text:00403068                 mov     [edi+edx*4], ebx
.text:0040306B                 jl      short loc_403050
.text:0040306D
.text:0040306D loc_40306D:                             ; CODE XREF: sub_402FE0+60↑j
.text:0040306D                 sub     [esp+2Ch+var_1C], ebp
.text:00403071
.text:00403071 loc_403071:                             ; CODE XREF: sub_402FE0+107↓j
.text:00403071                 mov     eax, [esp+2Ch+var_18]
.text:00403075                 cmp     [esp+2Ch+var_1C], eax
.text:00403079                 jle     short loc_403090
.text:0040307B                 mov     ebp, [esp+2Ch+var_14]
.text:0040307F                 cmp     eax, ebp
.text:00403081                 jg      short loc_403020
.text:00403083                 lea     esi, [esi+0]
.text:00403089                 lea     edi, [edi+0]
.text:00403090
.text:00403090 loc_403090:                             ; CODE XREF: sub_402FE0+34↑j
.text:00403090                                         ; sub_402FE0+3B↑j ...
.text:00403090                 mov     esi, [esp+2Ch+var_28]
.text:00403094                 mov     ecx, [esp+2Ch+var_18]
.text:00403098                 mov     eax, [esp+2Ch+var_2C]
.text:0040309B                 mov     edi, [esp+2Ch+arg_4]
.text:0040309F                 mov     edx, [esp+2Ch+var_28]
.text:004030A3                 sub     esi, ecx
.text:004030A5                 add     esi, eax
.text:004030A7                 mov     [edi+20h], esi
.text:004030AA                 mov     [edi+24h], edx
.text:004030AD                 add     esp, 1Ch
.text:004030B0                 pop     ebx
.text:004030B1                 pop     esi
.text:004030B2                 pop     edi
.text:004030B3                 pop     ebp
.text:004030B4                 retn
.text:004030B5 ; ---------------------------------------------------------------------------
.text:004030B5
.text:004030B5 loc_4030B5:                             ; CODE XREF: sub_402FE0+5A↑j
.text:004030B5                 xor     esi, esi
.text:004030B7                 cmp     esi, [esp+2Ch+var_20]
.text:004030BB                 jge     short loc_4030DF
.text:004030BD                 lea     esi, [esi+0]
.text:004030C0
.text:004030C0 loc_4030C0:                             ; CODE XREF: sub_402FE0+FD↓j
.text:004030C0                 mov     ebx, [esp+2Ch+var_14]
.text:004030C4                 mov     ebp, [esp+2Ch+var_18]
.text:004030C8                 add     ebx, esi
.text:004030CA                 add     ebp, esi
.text:004030CC                 mov     edx, [edi+ebx*4]
.text:004030CF                 inc     esi
.text:004030D0                 cmp     esi, [esp+2Ch+var_20]
.text:004030D4                 mov     ecx, [edi+ebp*4]
.text:004030D7                 mov     [edi+ebx*4], ecx
.text:004030DA                 mov     [edi+ebp*4], edx
.text:004030DD                 jl      short loc_4030C0
.text:004030DF
.text:004030DF loc_4030DF:                             ; CODE XREF: sub_402FE0+DB↑j
.text:004030DF                 mov     esi, [esp+2Ch+var_20]
.text:004030E3                 add     [esp+2Ch+var_14], esi
.text:004030E7                 jmp     short loc_403071
.text:004030E7 sub_402FE0      endp
.text:004030E7
.text:004030E7 ; ---------------------------------------------------------------------------
.text:004030E9                 align 20h
.text:00403100                 sub     esp, 0Ch
.text:00403103                 mov     edx, [esp+14h]
.text:00403107                 mov     dword ptr [esp+4], 5
.text:0040310F                 mov     [esp+8], edx
.text:00403113                 mov     edx, [esp+10h]
.text:00403117                 mov     [esp], edx
.text:0040311A                 call    sub_404CB0
.text:0040311F                 add     esp, 0Ch
.text:00403122                 retn
.text:00403122 ; ---------------------------------------------------------------------------
.text:00403123                 align 10h
.text:00403130
.text:00403130 ; =============== S U B R O U T I N E =======================================
.text:00403130
.text:00403130
.text:00403130 ; int __cdecl sub_403130(char *)
.text:00403130 sub_403130      proc near               ; CODE XREF: sub_4015E0+32E↑p
.text:00403130                                         ; sub_4015E0+37F↑p
.text:00403130
.text:00403130 var_C           = dword ptr -0Ch
.text:00403130 var_8           = dword ptr -8
.text:00403130 var_4           = dword ptr -4
.text:00403130 arg_0           = dword ptr  4
.text:00403130
.text:00403130                 sub     esp, 0Ch
.text:00403133                 mov     edx, [esp+0Ch+arg_0]
.text:00403137                 mov     [esp+0Ch+var_8], 5 ; int
.text:0040313F                 mov     [esp+0Ch+var_C], 0 ; int
.text:00403146                 mov     [esp+0Ch+var_4], edx ; char *
.text:0040314A                 call    sub_404CB0
.text:0040314F                 add     esp, 0Ch
.text:00403152                 retn
.text:00403152 sub_403130      endp
.text:00403152
.text:00403152 ; ---------------------------------------------------------------------------
.text:00403153                 align 10h
.text:00403160 aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: sub_403180+3↓o
.text:00403171 ; const char aS[]
.text:00403171 aS              db '%s',0               ; DATA XREF: sub_403180+10↓o
.text:00403174                 align 10h
.text:00403180
.text:00403180 ; =============== S U B R O U T I N E =======================================
.text:00403180
.text:00403180 ; Attributes: noreturn
.text:00403180
.text:00403180 sub_403180      proc near               ; CODE XREF: sub_4015E0:loc_4019EA↑p
.text:00403180                                         ; sub_4050C0:loc_40527F↓p ...
.text:00403180
.text:00403180 Code            = dword ptr -1Ch
.text:00403180 ErrorMessage    = dword ptr -18h
.text:00403180 var_14          = dword ptr -14h
.text:00403180 var_10          = byte ptr -10h
.text:00403180
.text:00403180                 sub     esp, 1Ch
.text:00403183                 mov     [esp+1Ch+Code], offset aMemoryExhauste ; "memory exhausted"
.text:0040318A                 call    ds:libintl_gettext
.text:00403190                 mov     [esp+1Ch+var_14], offset aS ; "%s"
.text:00403198                 mov     edx, Code
.text:0040319E                 mov     [esp+1Ch+ErrorMessage], 0 ; ErrorMessage
.text:004031A6                 mov     dword ptr [esp+1Ch+var_10], eax ; char
.text:004031AA                 mov     [esp+1Ch+Code], edx ; Code
.text:004031AD                 call    sub_4055B0
.text:004031B2                 call    abort
.text:004031B2 sub_403180      endp
.text:004031B2
.text:004031B2 ; ---------------------------------------------------------------------------
.text:004031B7                 align 10h
.text:004031C0 aCopyrightC2005 db 'Copyright (C) 2005 Free Software Foundation, Inc.',0
.text:004031C0                                         ; DATA XREF: .data:Buffer↓o
.text:004031F2 ; const char Format[12]
.text:004031F2 Format          db '%s (%s) %s',0Ah,0   ; DATA XREF: sub_4034B0+50↓o
.text:004031FE aWrittenByS     db 'Written by %s.',0Ah,0
.text:0040320E                 align 20h
.text:00403220
.text:00403220 ; =============== S U B R O U T I N E =======================================
.text:00403220
.text:00403220
.text:00403220 sub_403220      proc near               ; DATA XREF: sub_4034B0+100↓o
.text:00403220                 push    esp
.text:00403221                 push    69207369h
.text:00403226                 jnb     short loc_403248
.text:00403228                 db      66h
.text:00403228                 jb      short near ptr 3290h
.text:0040322B                 and     gs:[ebx+6Fh], dh
.text:0040322F                 db      66h
.text:0040322F                 jz      short near ptr 32A9h
.text:00403232                 popa
.text:00403233                 jb      short loc_40329A
.text:00403235                 cmp     esp, [eax]
.text:00403237                 jnb     short near ptr loc_40329C+2
.text:00403239                 and     gs:[eax+ebp*2+65h], dh
.text:0040323E                 and     [ebx+6Fh], dh
.text:00403241                 jnz     short loc_4032B5
.text:00403243                 arpl    [ebp+20h], sp
.text:00403246                 outsw
.text:00403248
.text:00403248 loc_403248:                             ; CODE XREF: sub_403220+6↑j
.text:00403248                 jb      short loc_40326A
.text:0040324A                 arpl    [edi+70h], bp
.text:0040324D                 jns     short loc_4032B8
.text:0040324F                 outsb
.text:00403250                 and     [bp+di+6Fh], ah
.text:00403254                 outsb
.text:00403255                 imul    esi, fs:[ecx+ebp*2+6Fh], 202E736Eh
.text:0040325E                 and     [eax+ebp*2+65h], dl
.text:00403262                 jb      short near ptr loc_4032C8+1
.text:00403264                 and     [ecx+73h], ch
.text:00403267                 and     [esi+4Fh], cl
.text:0040326A
.text:0040326A loc_40326A:                             ; CODE XREF: sub_403220:loc_403248↑j
.text:0040326A                 or      dh, [edi+61h]
.text:0040326D                 jb      short loc_4032E1
.text:0040326F                 popa
.text:00403270                 outsb
.text:00403271                 jz      short loc_4032EC
.text:00403273                 cmp     esp, [eax]
.text:00403275                 outsb
.text:00403276                 outsd
.text:00403277                 jz      short loc_403299
.text:00403279                 db      65h
.text:00403279                 jbe     short loc_4032E1
.text:0040327C                 outsb
.text:0040327D                 and     [esi+6Fh], ah
.text:00403280                 jb      short near ptr loc_4032A0+2
.text:00403282                 dec     ebp
.text:00403283                 inc     ebp
.text:00403284                 push    edx
.text:00403285                 inc     ebx
.text:00403286                 dec     eax
.text:00403287                 inc     ecx
.text:00403288                 dec     esi
.text:00403289                 push    esp
.text:0040328A                 inc     ecx
.text:0040328B                 inc     edx
.text:0040328C                 dec     ecx
.text:0040328D                 dec     esp
.text:0040328E                 dec     ecx
.text:0040328F                 push    esp
.text:00403290                 pop     ecx
.text:00403291                 and     [edi+72h], ch
.text:00403294                 and     [esi+49h], al
.text:00403297                 push    esp
.text:00403298                 dec     esi
.text:00403299
.text:00403299 loc_403299:                             ; CODE XREF: sub_403220+57↑j
.text:00403299                 inc     ebp
.text:0040329A
.text:0040329A loc_40329A:                             ; CODE XREF: sub_403220+13↑j
.text:0040329A                 push    ebx
.text:0040329B                 push    ebx
.text:0040329C
.text:0040329C loc_40329C:                             ; CODE XREF: sub_403220+17↑j
.text:0040329C                 and     [esi+4Fh], al
.text:0040329F                 push    edx
.text:004032A0
.text:004032A0 loc_4032A0:                             ; CODE XREF: sub_403220+60↑j
.text:004032A0                 and     [ecx+20h], al
.text:004032A3                 push    eax
.text:004032A4                 inc     ecx
.text:004032A5                 push    edx
.text:004032A6                 push    esp
.text:004032A7                 dec     ecx
.text:004032A8                 inc     ebx
.text:004032A9                 push    ebp
.text:004032AA                 dec     esp
.text:004032AB                 inc     ecx
.text:004032AC                 push    edx
.text:004032AD                 and     [eax+55h], dl
.text:004032B0                 push    edx
.text:004032B1                 push    eax
.text:004032B2                 dec     edi
.text:004032B3                 push    ebx
.text:004032B4                 inc     ebp
.text:004032B5
.text:004032B5 loc_4032B5:                             ; CODE XREF: sub_403220+21↑j
.text:004032B5                 or      al, cs:[eax]
.text:004032B8
.text:004032B8 loc_4032B8:                             ; CODE XREF: sub_403220+2D↑j
.text:004032B8                                         ; DATA XREF: sub_4034B0:loc_4035F1↓o
.text:004032B8                 push    edi
.text:004032B9                 jb      short near ptr loc_403323+1
.text:004032BB                 jz      short near ptr loc_403330+1
.text:004032BD                 outs    dx, byte ptr gs:[esi]
.text:004032BF                 and     [edx+79h], ah
.text:004032C2                 and     ds:6E612073h, ah
.text:004032C8
.text:004032C8 loc_4032C8:                             ; CODE XREF: sub_403220+42↑j
.text:004032C8                 and     fs:0A2E73h, ah
.text:004032CF
.text:004032CF loc_4032CF:                             ; DATA XREF: sub_4034B0:loc_4035FD↓o
.text:004032CF                 push    edi
.text:004032D0                 jb      short near ptr loc_40333A+1
.text:004032D2                 jz      short loc_403348
.text:004032D4                 outs    dx, byte ptr gs:[esi]
.text:004032D6                 and     [edx+79h], ah
.text:004032D9                 and     ds:25202C73h, ah
.text:004032DF                 jnb     short near ptr loc_40330A+3
.text:004032E1
.text:004032E1 loc_4032E1:                             ; CODE XREF: sub_403220+4D↑j
.text:004032E1                                         ; sub_403220+59↑j
.text:004032E1                 and     [ecx+6Eh], ah
.text:004032E4                 and     fs:0A2E73h, ah
.text:004032EB                 nop
.text:004032EC
.text:004032EC loc_4032EC:                             ; CODE XREF: sub_403220+51↑j
.text:004032EC                 nop
.text:004032ED                 nop
.text:004032EE                 nop
.text:004032EF                 nop
.text:004032F0                 nop
.text:004032F1                 nop
.text:004032F2                 nop
.text:004032F3                 nop
.text:004032F4                 nop
.text:004032F5                 nop
.text:004032F6                 nop
.text:004032F7                 nop
.text:004032F8                 nop
.text:004032F9                 nop
.text:004032FA                 nop
.text:004032FB                 nop
.text:004032FC                 nop
.text:004032FD                 nop
.text:004032FE                 nop
.text:004032FF                 nop
.text:004032FF sub_403220      endp ; sp-analysis failed
.text:004032FF
.text:00403300
.text:00403300 ; =============== S U B R O U T I N E =======================================
.text:00403300
.text:00403300
.text:00403300 sub_403300      proc near               ; DATA XREF: sub_4034B0:loc_403609↓o
.text:00403300                 push    edi
.text:00403301                 jb      short near ptr loc_40336A+2
.text:00403303                 jz      short near ptr loc_403378+1
.text:00403305                 outs    dx, byte ptr gs:[esi]
.text:00403307                 and     [edx+79h], ah
.text:0040330A
.text:0040330A loc_40330A:                             ; CODE XREF: sub_403220+BF↑j
.text:0040330A                 and     ds:25202C73h, ah
.text:00403310                 jnb     short near ptr loc_40333D+1
.text:00403312                 and     ds:610A2C73h, ah
.text:00403318                 outsb
.text:00403319                 and     fs:0A2E73h, ah
.text:00403320
.text:00403320 loc_403320:                             ; DATA XREF: sub_4034B0:loc_403615↓o
.text:00403320                 push    edi
.text:00403321                 jb      short loc_40338C
.text:00403323
.text:00403323 loc_403323:                             ; CODE XREF: sub_403220+99↑j
.text:00403323                 jz      short loc_403399
.text:00403325                 outs    dx, byte ptr gs:[esi]
.text:00403327                 and     [edx+79h], ah
.text:0040332A                 and     ds:25202C73h, ah
.text:00403330
.text:00403330 loc_403330:                             ; CODE XREF: sub_403220+9B↑j
.text:00403330                 jnb     short loc_40335E
.text:00403332                 and     ds:250A2C73h, ah
.text:00403338                 jnb     short near ptr loc_403365+1
.text:0040333A
.text:0040333A loc_40333A:                             ; CODE XREF: sub_403220+B0↑j
.text:0040333A                 and     [ecx+6Eh], ah
.text:0040333D
.text:0040333D loc_40333D:                             ; CODE XREF: sub_403300+10↑j
.text:0040333D                 and     fs:0A2E73h, ah
.text:00403344                 nop
.text:00403345                 nop
.text:00403346                 nop
.text:00403347                 nop
.text:00403348
.text:00403348 loc_403348:                             ; CODE XREF: sub_403220+B2↑j
.text:00403348                 nop
.text:00403349                 nop
.text:0040334A                 nop
.text:0040334B                 nop
.text:0040334C                 nop
.text:0040334D                 nop
.text:0040334E                 nop
.text:0040334F                 nop
.text:00403350                 nop
.text:00403351                 nop
.text:00403352                 nop
.text:00403353                 nop
.text:00403354                 nop
.text:00403355                 nop
.text:00403356                 nop
.text:00403357                 nop
.text:00403358                 nop
.text:00403359                 nop
.text:0040335A                 nop
.text:0040335B                 nop
.text:0040335C                 nop
.text:0040335D                 nop
.text:0040335E
.text:0040335E loc_40335E:                             ; CODE XREF: sub_403300:loc_403330↑j
.text:0040335E                 nop
.text:0040335F                 nop
.text:0040335F sub_403300      endp ; sp-analysis failed
.text:0040335F
.text:00403360
.text:00403360 ; =============== S U B R O U T I N E =======================================
.text:00403360
.text:00403360
.text:00403360 sub_403360      proc near               ; DATA XREF: sub_4034B0:loc_403621↓o
.text:00403360                 push    edi
.text:00403361                 jb      short loc_4033CC
.text:00403363                 jz      short loc_4033D9
.text:00403365
.text:00403365 loc_403365:                             ; CODE XREF: sub_403300+38↑j
.text:00403365                 outs    dx, byte ptr gs:[esi]
.text:00403367                 and     [edx+79h], ah
.text:0040336A
.text:0040336A loc_40336A:                             ; CODE XREF: sub_403300+1↑j
.text:0040336A                 and     ds:25202C73h, ah
.text:00403370                 jnb     short loc_40339E
.text:00403372                 and     ds:250A2C73h, ah
.text:00403378
.text:00403378 loc_403378:                             ; CODE XREF: sub_403300+3↑j
.text:00403378                 jnb     short near ptr loc_4033A5+1
.text:0040337A                 and     ds:61202C73h, ah
.text:00403380                 outsb
.text:00403381                 and     fs:0A2E73h, ah
.text:00403388                 nop
.text:00403389                 nop
.text:0040338A                 nop
.text:0040338B                 nop
.text:0040338C
.text:0040338C loc_40338C:                             ; CODE XREF: sub_403300+21↑j
.text:0040338C                 nop
.text:0040338D                 nop
.text:0040338E                 nop
.text:0040338F                 nop
.text:00403390                 nop
.text:00403391                 nop
.text:00403392                 nop
.text:00403393                 nop
.text:00403394                 nop
.text:00403395                 nop
.text:00403396                 nop
.text:00403397                 nop
.text:00403398                 nop
.text:00403399
.text:00403399 loc_403399:                             ; CODE XREF: sub_403300:loc_403323↑j
.text:00403399                 nop
.text:0040339A                 nop
.text:0040339B                 nop
.text:0040339C                 nop
.text:0040339D                 nop
.text:0040339E
.text:0040339E loc_40339E:                             ; CODE XREF: sub_403360+10↑j
.text:0040339E                 nop
.text:0040339F                 nop
.text:0040339F sub_403360      endp ; sp-analysis failed
.text:0040339F
.text:004033A0
.text:004033A0 ; =============== S U B R O U T I N E =======================================
.text:004033A0
.text:004033A0
.text:004033A0 sub_4033A0      proc near               ; DATA XREF: sub_4034B0:loc_40362D↓o
.text:004033A0                 push    edi
.text:004033A1                 jb      short near ptr loc_403409+3
.text:004033A3                 jz      short loc_403419
.text:004033A5
.text:004033A5 loc_4033A5:                             ; CODE XREF: sub_403360:loc_403378↑j
.text:004033A5                 outs    dx, byte ptr gs:[esi]
.text:004033A7                 and     [edx+79h], ah
.text:004033AA                 and     ds:25202C73h, ah
.text:004033B0                 jnb     short loc_4033DE
.text:004033B2                 and     ds:250A2C73h, ah
.text:004033B8                 jnb     short near ptr loc_4033E5+1
.text:004033BA                 and     ds:25202C73h, ah
.text:004033C0                 jnb     short near ptr loc_4033EA+4
.text:004033C2                 and     [ecx+6Eh], ah
.text:004033C5                 and     fs:0A2E73h, ah
.text:004033CC
.text:004033CC loc_4033CC:                             ; CODE XREF: sub_403360+1↑j
.text:004033CC                 nop
.text:004033CD                 nop
.text:004033CE                 nop
.text:004033CF                 nop
.text:004033D0                 nop
.text:004033D1                 nop
.text:004033D2                 nop
.text:004033D3                 nop
.text:004033D4                 nop
.text:004033D5                 nop
.text:004033D6                 nop
.text:004033D7                 nop
.text:004033D8                 nop
.text:004033D9
.text:004033D9 loc_4033D9:                             ; CODE XREF: sub_403360+3↑j
.text:004033D9                 nop
.text:004033DA                 nop
.text:004033DB                 nop
.text:004033DC                 nop
.text:004033DD                 nop
.text:004033DE
.text:004033DE loc_4033DE:                             ; CODE XREF: sub_4033A0+10↑j
.text:004033DE                 nop
.text:004033DF                 nop
.text:004033DF sub_4033A0      endp ; sp-analysis failed
.text:004033DF
.text:004033E0
.text:004033E0 ; =============== S U B R O U T I N E =======================================
.text:004033E0
.text:004033E0
.text:004033E0 sub_4033E0      proc near               ; DATA XREF: sub_4034B0:loc_403639↓o
.text:004033E0                 push    edi
.text:004033E1                 jb      short near ptr loc_40344A+2
.text:004033E3                 jz      short near ptr loc_403454+5
.text:004033E5
.text:004033E5 loc_4033E5:                             ; CODE XREF: sub_4033A0+18↑j
.text:004033E5                 outs    dx, byte ptr gs:[esi]
.text:004033E7                 and     [edx+79h], ah
.text:004033EA
.text:004033EA loc_4033EA:                             ; CODE XREF: sub_4033A0+20↑j
.text:004033EA                 and     ds:25202C73h, ah
.text:004033F0                 jnb     short loc_40341E
.text:004033F2                 and     ds:250A2C73h, ah
.text:004033F8                 jnb     short near ptr loc_403425+1
.text:004033FA                 and     ds:25202C73h, ah
.text:00403400                 jnb     short near ptr loc_40342A+4
.text:00403402                 and     ds:610A2C73h, ah
.text:00403408                 outsb
.text:00403409
.text:00403409 loc_403409:                             ; CODE XREF: sub_4033A0+1↑j
.text:00403409                 and     fs:0A2E73h, ah
.text:00403410                 nop
.text:00403411                 nop
.text:00403412                 nop
.text:00403413                 nop
.text:00403414                 nop
.text:00403415                 nop
.text:00403416                 nop
.text:00403417                 nop
.text:00403418                 nop
.text:00403419
.text:00403419 loc_403419:                             ; CODE XREF: sub_4033A0+3↑j
.text:00403419                 nop
.text:0040341A                 nop
.text:0040341B                 nop
.text:0040341C                 nop
.text:0040341D                 nop
.text:0040341E
.text:0040341E loc_40341E:                             ; CODE XREF: sub_4033E0+10↑j
.text:0040341E                 nop
.text:0040341F                 nop
.text:0040341F sub_4033E0      endp ; sp-analysis failed
.text:0040341F
.text:00403420
.text:00403420 ; =============== S U B R O U T I N E =======================================
.text:00403420
.text:00403420
.text:00403420 sub_403420      proc near               ; DATA XREF: sub_4034B0:loc_403645↓o
.text:00403420                 push    edi
.text:00403421                 jb      short near ptr loc_40348A+2
.text:00403423                 jz      short near ptr loc_403495+4
.text:00403425
.text:00403425 loc_403425:                             ; CODE XREF: sub_4033E0+18↑j
.text:00403425                 outs    dx, byte ptr gs:[esi]
.text:00403427                 and     [edx+79h], ah
.text:0040342A
.text:0040342A loc_40342A:                             ; CODE XREF: sub_4033E0+20↑j
.text:0040342A                 and     ds:25202C73h, ah
.text:00403430                 jnb     short near ptr loc_40345A+4
.text:00403432                 and     ds:250A2C73h, ah
.text:00403438                 jnb     short near ptr loc_403465+1
.text:0040343A                 and     ds:25202C73h, ah
.text:00403440                 jnb     short near ptr loc_40346A+4
.text:00403442                 and     ds:250A2C73h, ah
.text:00403448                 jnb     short near ptr loc_403472+4
.text:0040344A
.text:0040344A loc_40344A:                             ; CODE XREF: sub_4033E0+1↑j
.text:0040344A                 and     [ecx+6Eh], ah
.text:0040344D                 and     fs:0A2E73h, ah
.text:00403454
.text:00403454 loc_403454:                             ; CODE XREF: sub_4033E0+3↑j
.text:00403454                 lea     esi, [esi+0]
.text:0040345A
.text:0040345A loc_40345A:                             ; CODE XREF: sub_403420+10↑j
.text:0040345A                 lea     edi, [edi+0]
.text:00403460
.text:00403460 loc_403460:                             ; DATA XREF: sub_4034B0:def_40351D↓o
.text:00403460                 push    edi
.text:00403461                 jb      short near ptr loc_4034CB+1
.text:00403463                 jz      short near ptr loc_4034D8+1
.text:00403465
.text:00403465 loc_403465:                             ; CODE XREF: sub_403420+18↑j
.text:00403465                 outs    dx, byte ptr gs:[esi]
.text:00403467                 and     [edx+79h], ah
.text:0040346A
.text:0040346A loc_40346A:                             ; CODE XREF: sub_403420+20↑j
.text:0040346A                 and     ds:25202C73h, ah
.text:00403470                 jnb     short near ptr loc_40349C+2
.text:00403472
.text:00403472 loc_403472:                             ; CODE XREF: sub_403420+28↑j
.text:00403472                 and     ds:250A2C73h, ah
.text:00403478                 jnb     short near ptr loc_4034A3+3
.text:0040347A                 and     ds:25202C73h, ah
.text:00403480                 jnb     short near ptr loc_4034A9+5
.text:00403482                 and     ds:250A2C73h, ah
.text:00403488                 jnb     short near ptr loc_4034B4+2
.text:0040348A
.text:0040348A loc_40348A:                             ; CODE XREF: sub_403420+1↑j
.text:0040348A                 and     ds:61202C73h, ah
.text:00403490                 outsb
.text:00403491                 and     fs:[edi+74h], ch
.text:00403495
.text:00403495 loc_403495:                             ; CODE XREF: sub_403420+3↑j
.text:00403495                 push    2E737265h
.text:0040349A                 or      al, [eax]
.text:0040349C
.text:0040349C loc_40349C:                             ; CODE XREF: sub_403420+50↑j
.text:0040349C                                         ; DATA XREF: sub_4034B0+1B5↓o
.text:0040349C                 and     eax, 73252073h
.text:004034A1                 or      al, [eax]
.text:004034A3
.text:004034A3 loc_4034A3:                             ; CODE XREF: sub_403420+58↑j
.text:004034A3                 lea     esi, [esi+0]
.text:004034A9
.text:004034A9 loc_4034A9:                             ; CODE XREF: sub_403420+60↑j
.text:004034A9                 lea     edi, [edi+0]
.text:004034A9 sub_403420      endp ; sp-analysis failed
.text:004034A9
.text:004034B0
.text:004034B0 ; =============== S U B R O U T I N E =======================================
.text:004034B0
.text:004034B0
.text:004034B0 ; int __cdecl sub_4034B0(FILE *, FILE *, int, int, va_list)
.text:004034B0 sub_4034B0      proc near               ; CODE XREF: sub_403680+2A↓p
.text:004034B0
.text:004034B0 Stream          = dword ptr -2Ch
.text:004034B0 Format          = dword ptr -28h
.text:004034B0 ArgList         = dword ptr -24h
.text:004034B0 var_20          = dword ptr -20h
.text:004034B0 var_1C          = dword ptr -1Ch
.text:004034B0 var_14          = dword ptr -14h
.text:004034B0 arg_0           = dword ptr  4
.text:004034B0 arg_4           = dword ptr  8
.text:004034B0 arg_8           = dword ptr  0Ch
.text:004034B0 arg_C           = dword ptr  10h
.text:004034B0 arg_10          = dword ptr  14h
.text:004034B0
.text:004034B0                 push    ebp
.text:004034B1                 push    edi
.text:004034B2                 push    esi
.text:004034B3                 push    ebx
.text:004034B4
.text:004034B4 loc_4034B4:                             ; CODE XREF: sub_403420+68↑j
.text:004034B4                 sub     esp, 1Ch
.text:004034B7                 xor     ebx, ebx
.text:004034B9                 mov     edi, [esp+2Ch+arg_10]
.text:004034BD                 mov     edx, [esp+2Ch+arg_8]
.text:004034C1                 mov     esi, [esp+2Ch+arg_0]
.text:004034C5                 mov     eax, [edi]
.text:004034C7                 mov     ecx, [esp+2Ch+arg_4]
.text:004034CB
.text:004034CB loc_4034CB:                             ; CODE XREF: sub_403420+41↑j
.text:004034CB                 mov     [esp+2Ch+var_14], edx
.text:004034CF                 mov     ebp, [esp+2Ch+arg_C]
.text:004034D3                 lea     edx, [edi+4]
.text:004034D6                 test    eax, eax
.text:004034D8
.text:004034D8 loc_4034D8:                             ; CODE XREF: sub_403420+43↑j
.text:004034D8                 jz      short loc_4034EC
.text:004034DA                 lea     esi, [esi+0]
.text:004034E0
.text:004034E0 loc_4034E0:                             ; CODE XREF: sub_4034B0+3A↓j
.text:004034E0                 mov     eax, edx
.text:004034E2                 inc     ebx
.text:004034E3                 mov     eax, [eax]
.text:004034E5                 add     edx, 4
.text:004034E8                 test    eax, eax
.text:004034EA                 jnz     short loc_4034E0
.text:004034EC
.text:004034EC loc_4034EC:                             ; CODE XREF: sub_4034B0:loc_4034D8↑j
.text:004034EC                 test    ecx, ecx
.text:004034EE                 jz      loc_40365D
.text:004034F4                 mov     [esp+2Ch+var_1C], ebp
.text:004034F8                 mov     edx, [esp+2Ch+var_14]
.text:004034FC                 mov     [esp+2Ch+ArgList], ecx
.text:00403500                 mov     [esp+2Ch+Format], offset Format ; Format
.text:00403508                 mov     [esp+2Ch+var_20], edx
.text:0040350C                 mov     [esp+2Ch+Stream], esi ; Stream
.text:0040350F                 call    fprintf
.text:00403514
.text:00403514 loc_403514:                             ; CODE XREF: sub_4034B0+1C9↓j
.text:00403514                 cmp     ebx, 9          ; switch 10 cases
.text:00403517                 ja      def_40351D      ; jumptable 0040351D default case
.text:0040351D                 jmp     ds:jpt_40351D[ebx*4] ; switch jump
.text:0040351D ; ---------------------------------------------------------------------------
.text:00403524 jpt_40351D      dd offset loc_40354C    ; DATA XREF: sub_4034B0+6D↑r
.text:00403524                 dd offset loc_403551    ; jump table for switch statement
.text:00403524                 dd offset loc_4035F1
.text:00403524                 dd offset loc_4035FD
.text:00403524                 dd offset loc_403609
.text:00403524                 dd offset loc_403615
.text:00403524                 dd offset loc_403621
.text:00403524                 dd offset loc_40362D
.text:00403524                 dd offset loc_403639
.text:00403524                 dd offset loc_403645
.text:0040354C ; ---------------------------------------------------------------------------
.text:0040354C
.text:0040354C loc_40354C:                             ; CODE XREF: sub_4034B0+6D↑j
.text:0040354C                                         ; DATA XREF: sub_4034B0:jpt_40351D↑o
.text:0040354C                 call    abort           ; jumptable 0040351D case 0
.text:00403551 ; ---------------------------------------------------------------------------
.text:00403551
.text:00403551 loc_403551:                             ; CODE XREF: sub_4034B0+6D↑j
.text:00403551                                         ; DATA XREF: sub_4034B0:jpt_40351D↑o
.text:00403551                 mov     [esp+2Ch+Stream], 4031FEh ; jumptable 0040351D case 1
.text:00403558                 nop
.text:00403559                 lea     esi, [esi+0]
.text:00403560
.text:00403560 loc_403560:                             ; CODE XREF: sub_4034B0+148↓j
.text:00403560                                         ; sub_4034B0+154↓j ...
.text:00403560                 call    ds:libintl_gettext
.text:00403566                 mov     [esp+2Ch+ArgList], edi ; ArgList
.text:0040356A                 mov     [esp+2Ch+Stream], esi ; Stream
.text:0040356D                 mov     [esp+2Ch+Format], eax ; Format
.text:00403571                 call    vfprintf
.text:00403576                 mov     ebx, [esi+4]
.text:00403579                 dec     ebx
.text:0040357A                 test    ebx, ebx
.text:0040357C                 mov     [esi+4], ebx
.text:0040357F                 js      short loc_4035DF
.text:00403581                 mov     edi, [esi]
.text:00403583                 mov     byte ptr [edi], 0Ah
.text:00403586                 inc     dword ptr [esi]
.text:00403588
.text:00403588 loc_403588:                             ; CODE XREF: sub_4034B0+13F↓j
.text:00403588                 mov     [esp+2Ch+Format], esi ; Stream
.text:0040358C                 mov     edx, Buffer
.text:00403592                 mov     [esp+2Ch+Stream], edx ; Buffer
.text:00403595                 call    fputs
.text:0040359A                 mov     ebp, [esi+4]
.text:0040359D                 dec     ebp
.text:0040359E                 test    ebp, ebp
.text:004035A0                 mov     [esi+4], ebp
.text:004035A3                 js      short loc_4035CD
.text:004035A5                 mov     ecx, [esi]
.text:004035A7                 mov     byte ptr [ecx], 0Ah
.text:004035AA                 inc     dword ptr [esi]
.text:004035AC
.text:004035AC loc_4035AC:                             ; CODE XREF: sub_4034B0+12D↓j
.text:004035AC                 mov     [esp+2Ch+arg_4], esi ; Stream
.text:004035B0                 mov     [esp+2Ch+Stream], offset sub_403220
.text:004035B7                 call    ds:libintl_gettext
.text:004035BD                 mov     [esp+2Ch+arg_0], eax ; Buffer
.text:004035C1                 add     esp, 1Ch
.text:004035C4                 pop     ebx
.text:004035C5                 pop     esi
.text:004035C6                 pop     edi
.text:004035C7                 pop     ebp
.text:004035C8                 jmp     fputs
.text:004035CD ; ---------------------------------------------------------------------------
.text:004035CD
.text:004035CD loc_4035CD:                             ; CODE XREF: sub_4034B0+F3↑j
.text:004035CD                 mov     [esp+2Ch+Format], esi ; File
.text:004035D1                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:004035D8                 call    _flsbuf
.text:004035DD                 jmp     short loc_4035AC
.text:004035DF ; ---------------------------------------------------------------------------
.text:004035DF
.text:004035DF loc_4035DF:                             ; CODE XREF: sub_4034B0+CF↑j
.text:004035DF                 mov     [esp+2Ch+Format], esi ; File
.text:004035E3                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:004035EA                 call    _flsbuf
.text:004035EF                 jmp     short loc_403588
.text:004035F1 ; ---------------------------------------------------------------------------
.text:004035F1
.text:004035F1 loc_4035F1:                             ; CODE XREF: sub_4034B0+6D↑j
.text:004035F1                                         ; DATA XREF: sub_4034B0:jpt_40351D↑o
.text:004035F1                 mov     [esp+2Ch+Stream], offset loc_4032B8 ; jumptable 0040351D case 2
.text:004035F8                 jmp     loc_403560
.text:004035FD ; ---------------------------------------------------------------------------
.text:004035FD
.text:004035FD loc_4035FD:                             ; CODE XREF: sub_4034B0+6D↑j
.text:004035FD                                         ; DATA XREF: sub_4034B0:jpt_40351D↑o
.text:004035FD                 mov     [esp+2Ch+Stream], offset loc_4032CF ; jumptable 0040351D case 3
.text:00403604                 jmp     loc_403560
.text:00403609 ; ---------------------------------------------------------------------------
.text:00403609
.text:00403609 loc_403609:                             ; CODE XREF: sub_4034B0+6D↑j
.text:00403609                                         ; DATA XREF: sub_4034B0:jpt_40351D↑o
.text:00403609                 mov     [esp+2Ch+Stream], offset sub_403300 ; jumptable 0040351D case 4
.text:00403610                 jmp     loc_403560
.text:00403615 ; ---------------------------------------------------------------------------
.text:00403615
.text:00403615 loc_403615:                             ; CODE XREF: sub_4034B0+6D↑j
.text:00403615                                         ; DATA XREF: sub_4034B0:jpt_40351D↑o
.text:00403615                 mov     [esp+2Ch+Stream], offset loc_403320 ; jumptable 0040351D case 5
.text:0040361C                 jmp     loc_403560
.text:00403621 ; ---------------------------------------------------------------------------
.text:00403621
.text:00403621 loc_403621:                             ; CODE XREF: sub_4034B0+6D↑j
.text:00403621                                         ; DATA XREF: sub_4034B0:jpt_40351D↑o
.text:00403621                 mov     [esp+2Ch+Stream], offset sub_403360 ; jumptable 0040351D case 6
.text:00403628                 jmp     loc_403560
.text:0040362D ; ---------------------------------------------------------------------------
.text:0040362D
.text:0040362D loc_40362D:                             ; CODE XREF: sub_4034B0+6D↑j
.text:0040362D                                         ; DATA XREF: sub_4034B0:jpt_40351D↑o
.text:0040362D                 mov     [esp+2Ch+Stream], offset sub_4033A0 ; jumptable 0040351D case 7
.text:00403634                 jmp     loc_403560
.text:00403639 ; ---------------------------------------------------------------------------
.text:00403639
.text:00403639 loc_403639:                             ; CODE XREF: sub_4034B0+6D↑j
.text:00403639                                         ; DATA XREF: sub_4034B0:jpt_40351D↑o
.text:00403639                 mov     [esp+2Ch+Stream], offset sub_4033E0 ; jumptable 0040351D case 8
.text:00403640                 jmp     loc_403560
.text:00403645 ; ---------------------------------------------------------------------------
.text:00403645
.text:00403645 loc_403645:                             ; CODE XREF: sub_4034B0+6D↑j
.text:00403645                                         ; DATA XREF: sub_4034B0:jpt_40351D↑o
.text:00403645                 mov     [esp+2Ch+Stream], offset sub_403420 ; jumptable 0040351D case 9
.text:0040364C                 jmp     loc_403560
.text:00403651 ; ---------------------------------------------------------------------------
.text:00403651
.text:00403651 def_40351D:                             ; CODE XREF: sub_4034B0+67↑j
.text:00403651                 mov     [esp+2Ch+Stream], offset loc_403460 ; jumptable 0040351D default case
.text:00403658                 jmp     loc_403560
.text:0040365D ; ---------------------------------------------------------------------------
.text:0040365D
.text:0040365D loc_40365D:                             ; CODE XREF: sub_4034B0+3E↑j
.text:0040365D                 mov     [esp+2Ch+var_20], ebp
.text:00403661                 mov     ecx, [esp+2Ch+var_14]
.text:00403665                 mov     [esp+2Ch+Format], offset loc_40349C ; Format
.text:0040366D                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00403670                 mov     [esp+2Ch+ArgList], ecx
.text:00403674                 call    fprintf
.text:00403679                 jmp     loc_403514
.text:00403679 sub_4034B0      endp
.text:00403679
.text:00403679 ; ---------------------------------------------------------------------------
.text:0040367E                 align 10h
.text:00403680
.text:00403680 ; =============== S U B R O U T I N E =======================================
.text:00403680
.text:00403680
.text:00403680 ; int __cdecl sub_403680(FILE *, FILE *, int, int, char)
.text:00403680 sub_403680      proc near               ; CODE XREF: sub_4015E0+148↑p
.text:00403680
.text:00403680 var_1C          = dword ptr -1Ch
.text:00403680 var_18          = dword ptr -18h
.text:00403680 var_14          = dword ptr -14h
.text:00403680 var_10          = dword ptr -10h
.text:00403680 var_C           = dword ptr -0Ch
.text:00403680 arg_0           = dword ptr  4
.text:00403680 arg_4           = dword ptr  8
.text:00403680 arg_8           = dword ptr  0Ch
.text:00403680 arg_C           = dword ptr  10h
.text:00403680 arg_10          = byte ptr  14h
.text:00403680
.text:00403680                 sub     esp, 1Ch
.text:00403683                 mov     edx, [esp+1Ch+arg_C]
.text:00403687                 lea     ecx, [esp+1Ch+arg_10]
.text:0040368B                 mov     [esp+1Ch+var_C], ecx ; va_list
.text:0040368F                 mov     ecx, [esp+1Ch+arg_8]
.text:00403693                 mov     [esp+1Ch+var_10], edx ; int
.text:00403697                 mov     edx, [esp+1Ch+arg_4]
.text:0040369B                 mov     [esp+1Ch+var_14], ecx ; int
.text:0040369F                 mov     [esp+1Ch+var_18], edx ; FILE *
.text:004036A3                 mov     edx, [esp+1Ch+arg_0]
.text:004036A7                 mov     [esp+1Ch+var_1C], edx ; FILE *
.text:004036AA                 call    sub_4034B0
.text:004036AF                 add     esp, 1Ch
.text:004036B2                 retn
.text:004036B2 sub_403680      endp
.text:004036B2
.text:004036B2 ; ---------------------------------------------------------------------------
.text:004036B3                 align 10h
.text:004036C0
.text:004036C0 ; =============== S U B R O U T I N E =======================================
.text:004036C0
.text:004036C0
.text:004036C0 ; int __cdecl sub_4036C0(int, int, char *, int, int)
.text:004036C0 sub_4036C0      proc near               ; CODE XREF: sub_4015E0+A5↑p
.text:004036C0
.text:004036C0 var_1C          = dword ptr -1Ch
.text:004036C0 var_18          = dword ptr -18h
.text:004036C0 var_14          = dword ptr -14h
.text:004036C0 var_10          = dword ptr -10h
.text:004036C0 var_C           = dword ptr -0Ch
.text:004036C0 var_8           = dword ptr -8
.text:004036C0 var_4           = dword ptr -4
.text:004036C0 arg_0           = dword ptr  4
.text:004036C0 arg_4           = dword ptr  8
.text:004036C0 arg_8           = dword ptr  0Ch
.text:004036C0 arg_C           = dword ptr  10h
.text:004036C0 arg_10          = dword ptr  14h
.text:004036C0
.text:004036C0                 sub     esp, 1Ch
.text:004036C3                 mov     edx, [esp+1Ch+arg_C]
.text:004036C7                 mov     [esp+1Ch+var_4], 0 ; int
.text:004036CF                 mov     ecx, [esp+1Ch+arg_10]
.text:004036D3                 mov     [esp+1Ch+var_8], 0 ; int
.text:004036DB                 mov     [esp+1Ch+var_10], edx ; int
.text:004036DF                 mov     edx, [esp+1Ch+arg_4]
.text:004036E3                 mov     [esp+1Ch+var_C], ecx ; int
.text:004036E7                 mov     ecx, [esp+1Ch+arg_8]
.text:004036EB                 mov     [esp+1Ch+var_18], edx ; int
.text:004036EF                 mov     edx, [esp+1Ch+arg_0]
.text:004036F3                 mov     [esp+1Ch+var_14], ecx ; char *
.text:004036F7                 mov     [esp+1Ch+var_1C], edx ; int
.text:004036FA                 call    sub_402EC0
.text:004036FF                 add     esp, 1Ch
.text:00403702                 retn
.text:00403702 sub_4036C0      endp
.text:00403702
.text:00403702 ; ---------------------------------------------------------------------------
.text:00403703                 align 10h
.text:00403710                 sub     esp, 2Ch
.text:00403713                 mov     edx, [esp+44h]
.text:00403717                 mov     dword ptr [esp+18h], 0
.text:0040371F                 mov     ecx, [esp+40h]
.text:00403723                 mov     dword ptr [esp+14h], 0
.text:0040372B                 mov     [esp+1Ch], edx
.text:0040372F                 mov     edx, [esp+3Ch]
.text:00403733                 mov     [esp+10h], ecx
.text:00403737                 mov     ecx, [esp+38h]
.text:0040373B                 mov     [esp+0Ch], edx
.text:0040373F                 mov     edx, [esp+34h]
.text:00403743                 mov     [esp+8], ecx
.text:00403747                 mov     [esp+4], edx
.text:0040374B                 mov     edx, [esp+30h]
.text:0040374F                 mov     [esp], edx
.text:00403752                 call    sub_402330
.text:00403757                 add     esp, 2Ch
.text:0040375A                 retn
.text:0040375A ; ---------------------------------------------------------------------------
.text:0040375B                 align 10h
.text:00403760                 sub     esp, 1Ch
.text:00403763                 mov     edx, [esp+2Ch]
.text:00403767                 mov     dword ptr [esp+18h], 0
.text:0040376F                 mov     ecx, [esp+30h]
.text:00403773                 mov     dword ptr [esp+14h], 1
.text:0040377B                 mov     [esp+0Ch], edx
.text:0040377F                 mov     edx, [esp+24h]
.text:00403783                 mov     [esp+10h], ecx
.text:00403787                 mov     ecx, [esp+28h]
.text:0040378B                 mov     [esp+4], edx
.text:0040378F                 mov     edx, [esp+20h]
.text:00403793                 mov     [esp+8], ecx
.text:00403797                 mov     [esp], edx
.text:0040379A                 call    sub_402EC0
.text:0040379F                 add     esp, 1Ch
.text:004037A2                 retn
.text:004037A2 ; ---------------------------------------------------------------------------
.text:004037A3                 align 10h
.text:004037B0                 sub     esp, 2Ch
.text:004037B3                 mov     edx, [esp+44h]
.text:004037B7                 mov     dword ptr [esp+18h], 0
.text:004037BF                 mov     ecx, [esp+40h]
.text:004037C3                 mov     dword ptr [esp+14h], 1
.text:004037CB                 mov     [esp+1Ch], edx
.text:004037CF                 mov     edx, [esp+3Ch]
.text:004037D3                 mov     [esp+10h], ecx
.text:004037D7                 mov     ecx, [esp+38h]
.text:004037DB                 mov     [esp+0Ch], edx
.text:004037DF                 mov     edx, [esp+34h]
.text:004037E3                 mov     [esp+8], ecx
.text:004037E7                 mov     [esp+4], edx
.text:004037EB                 mov     edx, [esp+30h]
.text:004037EF                 mov     [esp], edx
.text:004037F2                 call    sub_402330
.text:004037F7                 add     esp, 2Ch
.text:004037FA                 retn
.text:004037FA ; ---------------------------------------------------------------------------
.text:004037FB                 align 10h
.text:00403800                 mov     edx, [esp+4]
.text:00403804                 mov     ds:dword_40F030, edx
.text:0040380A                 retn
.text:0040380A ; ---------------------------------------------------------------------------
.text:0040380B aWriteError     db 'write error',0      ; DATA XREF: sub_403830:loc_403879↓o
.text:00403817 ; const char aSS[]
.text:00403817 aSS             db '%s: %s',0           ; DATA XREF: sub_403830+77↓o
.text:0040381E ; const char aS_2[]
.text:0040381E aS_2            db '%s',0               ; DATA XREF: sub_403830+A0↓o
.text:00403821 ; ---------------------------------------------------------------------------
.text:00403821                 jmp     short sub_403830
.text:00403821 ; ---------------------------------------------------------------------------
.text:00403823                 align 10h
.text:00403830
.text:00403830 ; =============== S U B R O U T I N E =======================================
.text:00403830
.text:00403830
.text:00403830 ; void __cdecl sub_403830()
.text:00403830 sub_403830      proc near               ; CODE XREF: .text:00403821↑j
.text:00403830                                         ; DATA XREF: sub_4015E0+60↑o
.text:00403830
.text:00403830 Stream          = dword ptr -2Ch
.text:00403830 ErrorMessage    = dword ptr -28h
.text:00403830 var_24          = dword ptr -24h
.text:00403830 var_20          = byte ptr -20h
.text:00403830 var_1C          = dword ptr -1Ch
.text:00403830 var_9           = byte ptr -9
.text:00403830
.text:00403830                 push    esi
.text:00403831                 push    ebx
.text:00403832                 sub     esp, 24h
.text:00403835                 mov     edx, ds:_iob
.text:0040383B                 mov     ecx, [edx+2Ch]
.text:0040383E                 lea     esi, [edx+20h]
.text:00403841                 shr     ecx, 5
.text:00403844                 mov     bl, cl
.text:00403846                 mov     ecx, [edx+20h]
.text:00403849                 and     bl, 1
.text:0040384C                 cmp     ecx, [esi+8]
.text:0040384F                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00403852                 setz    [esp+2Ch+var_9]
.text:00403857                 call    fclose
.text:0040385C                 test    eax, eax
.text:0040385E                 setnz   al
.text:00403861                 test    bl, bl
.text:00403863                 jnz     loc_4038F3
.text:00403869                 test    al, al
.text:0040386B                 jz      short loc_4038C0
.text:0040386D
.text:0040386D loc_40386D:                             ; CODE XREF: sub_403830+CD↓j
.text:0040386D                 call    _errno
.text:00403872                 mov     esi, [eax]
.text:00403874
.text:00403874 loc_403874:                             ; CODE XREF: sub_403830+C7↓j
.text:00403874                 cmp     esi, 9
.text:00403877                 jz      short loc_4038E6
.text:00403879
.text:00403879 loc_403879:                             ; CODE XREF: sub_403830+B8↓j
.text:00403879                                         ; sub_403830+C1↓j
.text:00403879                 mov     [esp+2Ch+Stream], offset aWriteError ; "write error"
.text:00403880                 call    ds:libintl_gettext
.text:00403886                 mov     ebx, eax
.text:00403888                 mov     eax, ds:dword_40F030
.text:0040388D                 test    eax, eax
.text:0040388F                 jz      short loc_4038C6
.text:00403891                 mov     [esp+2Ch+Stream], eax ; char *
.text:00403894                 call    sub_405020
.text:00403899                 mov     dword ptr [esp+2Ch+var_20], eax ; char
.text:0040389D                 mov     edx, Code
.text:004038A3                 mov     [esp+2Ch+var_1C], ebx
.text:004038A7                 mov     [esp+2Ch+var_24], offset aSS ; "%s: %s"
.text:004038AF                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:004038B3                 mov     [esp+2Ch+Stream], edx ; Code
.text:004038B6                 call    sub_4055B0
.text:004038BB                 nop
.text:004038BC                 lea     esi, [esi+0]
.text:004038C0
.text:004038C0 loc_4038C0:                             ; CODE XREF: sub_403830+3B↑j
.text:004038C0                                         ; sub_403830+B4↓j ...
.text:004038C0                 add     esp, 24h
.text:004038C3                 pop     ebx
.text:004038C4                 pop     esi
.text:004038C5                 retn
.text:004038C6 ; ---------------------------------------------------------------------------
.text:004038C6
.text:004038C6 loc_4038C6:                             ; CODE XREF: sub_403830+5F↑j
.text:004038C6                 mov     dword ptr [esp+2Ch+var_20], ebx ; char
.text:004038CA                 mov     ebx, Code
.text:004038D0                 mov     [esp+2Ch+var_24], offset aS_2 ; "%s"
.text:004038D8                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:004038DC                 mov     [esp+2Ch+Stream], ebx ; Code
.text:004038DF                 call    sub_4055B0
.text:004038E4                 jmp     short loc_4038C0
.text:004038E6 ; ---------------------------------------------------------------------------
.text:004038E6
.text:004038E6 loc_4038E6:                             ; CODE XREF: sub_403830+47↑j
.text:004038E6                 test    bl, bl
.text:004038E8                 jnz     short loc_403879
.text:004038EA                 cmp     [esp+2Ch+var_9], 0
.text:004038EF                 jnz     short loc_4038C0
.text:004038F1                 jmp     short loc_403879
.text:004038F3 ; ---------------------------------------------------------------------------
.text:004038F3
.text:004038F3 loc_4038F3:                             ; CODE XREF: sub_403830+33↑j
.text:004038F3                 xor     esi, esi
.text:004038F5                 test    al, al
.text:004038F7                 jz      loc_403874
.text:004038FD                 jmp     loc_40386D
.text:004038FD sub_403830      endp
.text:004038FD
.text:004038FD ; ---------------------------------------------------------------------------
.text:00403902                 align 10h
.text:00403910 aCoreutils530Sr db '../../coreutils-5.3.0-src/lib/xstrtol.c',0
.text:00403910                                         ; DATA XREF: sub_403980+544↓o
.text:00403938                 db 18h dup(90h)
.text:00403950 a0StrtolBaseStr db '0 <= strtol_base && strtol_base <= 36',0
.text:00403950                                         ; DATA XREF: sub_403980+54C↓o
.text:00403976                 align 10h
.text:00403980
.text:00403980 ; =============== S U B R O U T I N E =======================================
.text:00403980
.text:00403980
.text:00403980 ; int __cdecl sub_403980(int, int, int, int, char *Str)
.text:00403980 sub_403980      proc near               ; CODE XREF: sub_401B30+36↑p
.text:00403980
.text:00403980 C               = dword ptr -3Ch
.text:00403980 Type            = dword ptr -38h
.text:00403980 Radix           = dword ptr -34h
.text:00403980 var_28          = dword ptr -28h
.text:00403980 var_24          = dword ptr -24h
.text:00403980 var_1D          = byte ptr -1Dh
.text:00403980 var_1C          = dword ptr -1Ch
.text:00403980 var_18          = dword ptr -18h
.text:00403980 var_14          = byte ptr -14h
.text:00403980 arg_0           = dword ptr  4
.text:00403980 arg_4           = dword ptr  8
.text:00403980 arg_8           = dword ptr  0Ch
.text:00403980 arg_C           = dword ptr  10h
.text:00403980 Str             = dword ptr  14h
.text:00403980
.text:00403980                 push    ebp
.text:00403981                 push    edi
.text:00403982                 push    esi
.text:00403983                 push    ebx
.text:00403984                 sub     esp, 2Ch
.text:00403987                 mov     ebp, [esp+3Ch+arg_8]
.text:0040398B                 mov     [esp+3Ch+var_1C], 0
.text:00403993                 mov     esi, [esp+3Ch+arg_0]
.text:00403997                 cmp     ebp, 24h ; '$'
.text:0040399A                 ja      loc_403EBC
.text:004039A0                 mov     edi, [esp+3Ch+arg_4]
.text:004039A4                 test    edi, edi
.text:004039A6                 jz      loc_403EB3
.text:004039AC
.text:004039AC loc_4039AC:                             ; CODE XREF: sub_403980+537↓j
.text:004039AC                 movzx   edx, byte ptr [esi]
.text:004039AF                 mov     ebx, esi
.text:004039B1                 mov     [esp+3Ch+var_1D], dl
.text:004039B5                 lea     esi, [esi+0]
.text:004039B9                 lea     edi, [edi+0]
.text:004039C0
.text:004039C0 loc_4039C0:                             ; CODE XREF: sub_403980+70↓j
.text:004039C0                 movzx   edx, [esp+3Ch+var_1D]
.text:004039C5                 mov     ecx, ds:__mb_cur_max
.text:004039CB                 cmp     dword ptr [ecx], 1
.text:004039CE                 jz      loc_403EA0
.text:004039D4                 mov     [esp+3Ch+Type], 8 ; Type
.text:004039DC                 mov     [esp+3Ch+C], edx ; C
.text:004039DF                 call    _isctype
.text:004039E4
.text:004039E4 loc_4039E4:                             ; CODE XREF: sub_403980+52E↓j
.text:004039E4                 test    eax, eax
.text:004039E6                 jz      short loc_4039F2
.text:004039E8                 inc     ebx
.text:004039E9                 movzx   eax, byte ptr [ebx]
.text:004039EC                 mov     [esp+3Ch+var_1D], al
.text:004039F0                 jmp     short loc_4039C0
.text:004039F2 ; ---------------------------------------------------------------------------
.text:004039F2
.text:004039F2 loc_4039F2:                             ; CODE XREF: sub_403980+66↑j
.text:004039F2                 cmp     [esp+3Ch+var_1D], 2Dh ; '-'
.text:004039F7                 mov     eax, 4
.text:004039FC                 jz      short loc_403A55
.text:004039FE                 call    _errno
.text:00403A03                 mov     dword ptr [eax], 0
.text:00403A09                 mov     [esp+3Ch+Radix], ebp ; Radix
.text:00403A0D                 mov     [esp+3Ch+Type], edi ; EndPtr
.text:00403A11                 mov     [esp+3Ch+C], esi ; String
.text:00403A14                 call    strtoul
.text:00403A19                 mov     [esp+3Ch+var_18], eax
.text:00403A1D                 mov     eax, [edi]
.text:00403A1F                 cmp     eax, esi
.text:00403A21                 jz      loc_403E6C
.text:00403A27                 call    _errno
.text:00403A2C                 mov     ebp, [eax]
.text:00403A2E                 test    ebp, ebp
.text:00403A30                 jnz     loc_403E4B
.text:00403A36
.text:00403A36 loc_403A36:                             ; CODE XREF: sub_403980+4DD↓j
.text:00403A36                                         ; sub_403980+51A↓j
.text:00403A36                 mov     eax, [esp+3Ch+Str]
.text:00403A3A                 test    eax, eax
.text:00403A3C                 jz      short loc_403A47
.text:00403A3E                 mov     ecx, [edi]
.text:00403A40                 movzx   eax, byte ptr [ecx]
.text:00403A43                 test    al, al
.text:00403A45                 jnz     short loc_403A5D
.text:00403A47
.text:00403A47 loc_403A47:                             ; CODE XREF: sub_403980+BC↑j
.text:00403A47                                         ; sub_403980+26C↓j ...
.text:00403A47                 mov     edx, [esp+3Ch+var_18]
.text:00403A4B                 mov     esi, [esp+3Ch+arg_C]
.text:00403A4F                 mov     eax, [esp+3Ch+var_1C]
.text:00403A53                 mov     [esi], edx
.text:00403A55
.text:00403A55 loc_403A55:                             ; CODE XREF: sub_403980+7C↑j
.text:00403A55                                         ; sub_403980+112↓j ...
.text:00403A55                 add     esp, 2Ch
.text:00403A58                 pop     ebx
.text:00403A59                 pop     esi
.text:00403A5A                 pop     edi
.text:00403A5B                 pop     ebp
.text:00403A5C                 retn
.text:00403A5D ; ---------------------------------------------------------------------------
.text:00403A5D
.text:00403A5D loc_403A5D:                             ; CODE XREF: sub_403980+C5↑j
.text:00403A5D                 mov     [esp+3Ch+var_24], 1
.text:00403A65                 mov     edx, [esp+3Ch+Str]
.text:00403A69                 movsx   esi, al
.text:00403A6C                 mov     [esp+3Ch+Type], esi ; Val
.text:00403A70                 mov     ebx, 400h
.text:00403A75                 mov     [esp+3Ch+C], edx ; Str
.text:00403A78                 call    strchr
.text:00403A7D                 test    eax, eax
.text:00403A7F                 jnz     short loc_403A94
.text:00403A81
.text:00403A81 def_403AE4:                             ; CODE XREF: sub_403980+162↓j
.text:00403A81                                         ; sub_403980+164↓j
.text:00403A81                                         ; DATA XREF: ...
.text:00403A81                 mov     eax, [esp+3Ch+var_1C] ; jumptable 00403AE4 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:00403A85                 mov     ebx, [esp+3Ch+var_18]
.text:00403A89                 mov     edi, [esp+3Ch+arg_C]
.text:00403A8D                 or      eax, 2
.text:00403A90                 mov     [edi], ebx
.text:00403A92                 jmp     short loc_403A55
.text:00403A94 ; ---------------------------------------------------------------------------
.text:00403A94
.text:00403A94 loc_403A94:                             ; CODE XREF: sub_403980+FF↑j
.text:00403A94                 mov     [esp+3Ch+Type], 30h ; '0' ; Val
.text:00403A9C                 mov     ebp, [esp+3Ch+Str]
.text:00403AA0                 mov     [esp+3Ch+C], ebp ; Str
.text:00403AA3                 call    strchr
.text:00403AA8                 test    eax, eax
.text:00403AAA                 jz      loc_403E40
.text:00403AB0                 mov     ecx, [edi]
.text:00403AB2                 mov     [esp+3Ch+var_28], ecx
.text:00403AB6                 movsx   eax, byte ptr [ecx+1]
.text:00403ABA                 cmp     eax, 44h ; 'D'
.text:00403ABD                 jz      loc_403E09
.text:00403AC3                 cmp     eax, 44h ; 'D'
.text:00403AC6                 jg      loc_403E1B
.text:00403ACC                 cmp     eax, 42h ; 'B'
.text:00403ACF                 jz      loc_403E09
.text:00403AD5
.text:00403AD5 loc_403AD5:                             ; CODE XREF: sub_403980+496↓j
.text:00403AD5                                         ; sub_403980+49E↓j ...
.text:00403AD5                 mov     esi, [esp+3Ch+var_28]
.text:00403AD9                 movsx   eax, byte ptr [esi]
.text:00403ADC                 sub     eax, 42h ; 'B'  ; switch 54 cases
.text:00403ADF                 cmp     eax, 35h
.text:00403AE2                 ja      short def_403AE4 ; jumptable 00403AE4 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:00403AE4                 jmp     ds:jpt_403AE4[eax*4] ; switch jump
.text:00403AE4 ; ---------------------------------------------------------------------------
.text:00403AEB                 align 4
.text:00403AEC jpt_403AE4      dd offset loc_403C0B, offset def_403AE4, offset def_403AE4
.text:00403AEC                                         ; DATA XREF: sub_403980+164↑r
.text:00403AEC                 dd offset loc_403C1B, offset def_403AE4, offset loc_403D0C ; jump table for switch statement
.text:00403AEC                 dd offset def_403AE4, offset def_403AE4, offset def_403AE4
.text:00403AEC                 dd offset loc_403D49, offset def_403AE4, offset loc_403D7B
.text:00403AEC                 dd offset def_403AE4, offset def_403AE4, offset loc_403C55
.text:00403AEC                 dd offset def_403AE4, offset def_403AE4, offset def_403AE4
.text:00403AEC                 dd offset loc_403DB9, offset def_403AE4, offset def_403AE4
.text:00403AEC                 dd offset def_403AE4, offset def_403AE4, offset loc_403C92
.text:00403AEC                 dd offset loc_403CCF, offset def_403AE4, offset def_403AE4
.text:00403AEC                 dd offset def_403AE4, offset def_403AE4, offset def_403AE4
.text:00403AEC                 dd offset def_403AE4, offset def_403AE4, offset loc_403BC4
.text:00403AEC                 dd offset loc_403BD6, offset def_403AE4, offset def_403AE4
.text:00403AEC                 dd offset def_403AE4, offset loc_403D0C, offset def_403AE4
.text:00403AEC                 dd offset def_403AE4, offset def_403AE4, offset loc_403D49
.text:00403AEC                 dd offset def_403AE4, offset loc_403D7B, offset def_403AE4
.text:00403AEC                 dd offset def_403AE4, offset def_403AE4, offset def_403AE4
.text:00403AEC                 dd offset def_403AE4, offset def_403AE4, offset loc_403DB9
.text:00403AEC                 dd offset def_403AE4, offset def_403AE4, offset loc_403DF6
.text:00403BC4 ; ---------------------------------------------------------------------------
.text:00403BC4
.text:00403BC4 loc_403BC4:                             ; CODE XREF: sub_403980+164↑j
.text:00403BC4                                         ; DATA XREF: sub_403980:jpt_403AE4↑o
.text:00403BC4                 mov     eax, [esp+3Ch+var_18] ; jumptable 00403AE4 case 98
.text:00403BC8                 cmp     eax, 7FFFFFh
.text:00403BCD                 ja      short loc_403BFC
.text:00403BCF                 shl     eax, 9
.text:00403BD2
.text:00403BD2 loc_403BD2:                             ; CODE XREF: sub_403980+299↓j
.text:00403BD2                                         ; sub_403980+484↓j
.text:00403BD2                 mov     [esp+3Ch+var_18], eax
.text:00403BD6
.text:00403BD6 loc_403BD6:                             ; CODE XREF: sub_403980+164↑j
.text:00403BD6                                         ; DATA XREF: sub_403980:jpt_403AE4↑o
.text:00403BD6                 xor     eax, eax        ; jumptable 00403AE4 case 99
.text:00403BD8
.text:00403BD8 loc_403BD8:                             ; CODE XREF: sub_403980+289↓j
.text:00403BD8                                         ; sub_403980+2CA↓j ...
.text:00403BD8                 or      [esp+3Ch+var_1C], eax
.text:00403BDC                 mov     ebp, [esp+3Ch+var_28]
.text:00403BE0                 mov     ecx, [esp+3Ch+var_24]
.text:00403BE4                 add     ebp, ecx
.text:00403BE6                 mov     [edi], ebp
.text:00403BE8                 cmp     byte ptr [ebp+0], 0
.text:00403BEC                 jz      loc_403A47
.text:00403BF2                 or      [esp+3Ch+var_1C], 2
.text:00403BF7                 jmp     loc_403A47
.text:00403BFC ; ---------------------------------------------------------------------------
.text:00403BFC
.text:00403BFC loc_403BFC:                             ; CODE XREF: sub_403980+24D↑j
.text:00403BFC                                         ; sub_403980+294↓j ...
.text:00403BFC                 mov     [esp+3Ch+var_18], 0FFFFFFFFh
.text:00403C04                 mov     eax, 1
.text:00403C09                 jmp     short loc_403BD8
.text:00403C0B ; ---------------------------------------------------------------------------
.text:00403C0B
.text:00403C0B loc_403C0B:                             ; CODE XREF: sub_403980+164↑j
.text:00403C0B                                         ; DATA XREF: sub_403980:jpt_403AE4↑o
.text:00403C0B                 mov     eax, [esp+3Ch+var_18] ; jumptable 00403AE4 case 66
.text:00403C0F                 cmp     eax, 3FFFFFh
.text:00403C14                 ja      short loc_403BFC
.text:00403C16                 shl     eax, 0Ah
.text:00403C19                 jmp     short loc_403BD2
.text:00403C1B ; ---------------------------------------------------------------------------
.text:00403C1B
.text:00403C1B loc_403C1B:                             ; CODE XREF: sub_403980+164↑j
.text:00403C1B                                         ; DATA XREF: sub_403980:jpt_403AE4↑o
.text:00403C1B                 lea     ecx, [esp+3Ch+var_18] ; jumptable 00403AE4 case 69
.text:00403C1F                 xor     ebp, ebp
.text:00403C21                 mov     esi, 5
.text:00403C26
.text:00403C26 loc_403C26:                             ; CODE XREF: sub_403980+2C8↓j
.text:00403C26                 xor     edx, edx
.text:00403C28                 mov     eax, 0FFFFFFFFh
.text:00403C2D                 div     ebx
.text:00403C2F                 mov     edx, [ecx]
.text:00403C31                 cmp     eax, edx
.text:00403C33                 jnb     short loc_403C4C
.text:00403C35                 mov     dword ptr [ecx], 0FFFFFFFFh
.text:00403C3B                 mov     eax, 1
.text:00403C40
.text:00403C40 loc_403C40:                             ; CODE XREF: sub_403980+2D3↓j
.text:00403C40                 dec     esi
.text:00403C41                 or      ebp, eax
.text:00403C43                 cmp     esi, 0FFFFFFFFh
.text:00403C46                 mov     eax, ebp
.text:00403C48                 jnz     short loc_403C26
.text:00403C4A                 jmp     short loc_403BD8
.text:00403C4C ; ---------------------------------------------------------------------------
.text:00403C4C
.text:00403C4C loc_403C4C:                             ; CODE XREF: sub_403980+2B3↑j
.text:00403C4C                 imul    edx, ebx
.text:00403C4F                 xor     eax, eax
.text:00403C51                 mov     [ecx], edx
.text:00403C53                 jmp     short loc_403C40
.text:00403C55 ; ---------------------------------------------------------------------------
.text:00403C55
.text:00403C55 loc_403C55:                             ; CODE XREF: sub_403980+164↑j
.text:00403C55                                         ; DATA XREF: sub_403980:jpt_403AE4↑o
.text:00403C55                 lea     ecx, [esp+3Ch+var_18] ; jumptable 00403AE4 case 80
.text:00403C59                 xor     ebp, ebp
.text:00403C5B                 mov     esi, 4
.text:00403C60
.text:00403C60 loc_403C60:                             ; CODE XREF: sub_403980+302↓j
.text:00403C60                 xor     edx, edx
.text:00403C62                 mov     eax, 0FFFFFFFFh
.text:00403C67                 div     ebx
.text:00403C69                 mov     edx, [ecx]
.text:00403C6B                 cmp     eax, edx
.text:00403C6D                 jnb     short loc_403C89
.text:00403C6F                 mov     dword ptr [ecx], 0FFFFFFFFh
.text:00403C75                 mov     eax, 1
.text:00403C7A
.text:00403C7A loc_403C7A:                             ; CODE XREF: sub_403980+310↓j
.text:00403C7A                 dec     esi
.text:00403C7B                 or      ebp, eax
.text:00403C7D                 cmp     esi, 0FFFFFFFFh
.text:00403C80                 mov     eax, ebp
.text:00403C82                 jnz     short loc_403C60
.text:00403C84                 jmp     loc_403BD8
.text:00403C89 ; ---------------------------------------------------------------------------
.text:00403C89
.text:00403C89 loc_403C89:                             ; CODE XREF: sub_403980+2ED↑j
.text:00403C89                 imul    edx, ebx
.text:00403C8C                 xor     eax, eax
.text:00403C8E                 mov     [ecx], edx
.text:00403C90                 jmp     short loc_403C7A
.text:00403C92 ; ---------------------------------------------------------------------------
.text:00403C92
.text:00403C92 loc_403C92:                             ; CODE XREF: sub_403980+164↑j
.text:00403C92                                         ; DATA XREF: sub_403980:jpt_403AE4↑o
.text:00403C92                 lea     ecx, [esp+3Ch+var_18] ; jumptable 00403AE4 case 89
.text:00403C96                 xor     ebp, ebp
.text:00403C98                 mov     esi, 7
.text:00403C9D
.text:00403C9D loc_403C9D:                             ; CODE XREF: sub_403980+33F↓j
.text:00403C9D                 xor     edx, edx
.text:00403C9F                 mov     eax, 0FFFFFFFFh
.text:00403CA4                 div     ebx
.text:00403CA6                 mov     edx, [ecx]
.text:00403CA8                 cmp     eax, edx
.text:00403CAA                 jnb     short loc_403CC6
.text:00403CAC                 mov     dword ptr [ecx], 0FFFFFFFFh
.text:00403CB2                 mov     eax, 1
.text:00403CB7
.text:00403CB7 loc_403CB7:                             ; CODE XREF: sub_403980+34D↓j
.text:00403CB7                 dec     esi
.text:00403CB8                 or      ebp, eax
.text:00403CBA                 cmp     esi, 0FFFFFFFFh
.text:00403CBD                 mov     eax, ebp
.text:00403CBF                 jnz     short loc_403C9D
.text:00403CC1                 jmp     loc_403BD8
.text:00403CC6 ; ---------------------------------------------------------------------------
.text:00403CC6
.text:00403CC6 loc_403CC6:                             ; CODE XREF: sub_403980+32A↑j
.text:00403CC6                 imul    edx, ebx
.text:00403CC9                 xor     eax, eax
.text:00403CCB                 mov     [ecx], edx
.text:00403CCD                 jmp     short loc_403CB7
.text:00403CCF ; ---------------------------------------------------------------------------
.text:00403CCF
.text:00403CCF loc_403CCF:                             ; CODE XREF: sub_403980+164↑j
.text:00403CCF                                         ; DATA XREF: sub_403980:jpt_403AE4↑o
.text:00403CCF                 lea     ecx, [esp+3Ch+var_18] ; jumptable 00403AE4 case 90
.text:00403CD3                 xor     ebp, ebp
.text:00403CD5                 mov     esi, 6
.text:00403CDA
.text:00403CDA loc_403CDA:                             ; CODE XREF: sub_403980+37C↓j
.text:00403CDA                 xor     edx, edx
.text:00403CDC                 mov     eax, 0FFFFFFFFh
.text:00403CE1                 div     ebx
.text:00403CE3                 mov     edx, [ecx]
.text:00403CE5                 cmp     eax, edx
.text:00403CE7                 jnb     short loc_403D03
.text:00403CE9                 mov     dword ptr [ecx], 0FFFFFFFFh
.text:00403CEF                 mov     eax, 1
.text:00403CF4
.text:00403CF4 loc_403CF4:                             ; CODE XREF: sub_403980+38A↓j
.text:00403CF4                 dec     esi
.text:00403CF5                 or      ebp, eax
.text:00403CF7                 cmp     esi, 0FFFFFFFFh
.text:00403CFA                 mov     eax, ebp
.text:00403CFC                 jnz     short loc_403CDA
.text:00403CFE                 jmp     loc_403BD8
.text:00403D03 ; ---------------------------------------------------------------------------
.text:00403D03
.text:00403D03 loc_403D03:                             ; CODE XREF: sub_403980+367↑j
.text:00403D03                 imul    edx, ebx
.text:00403D06                 xor     eax, eax
.text:00403D08                 mov     [ecx], edx
.text:00403D0A                 jmp     short loc_403CF4
.text:00403D0C ; ---------------------------------------------------------------------------
.text:00403D0C
.text:00403D0C loc_403D0C:                             ; CODE XREF: sub_403980+164↑j
.text:00403D0C                                         ; DATA XREF: sub_403980:jpt_403AE4↑o
.text:00403D0C                 lea     ecx, [esp+3Ch+var_18] ; jumptable 00403AE4 cases 71,103
.text:00403D10                 xor     ebp, ebp
.text:00403D12                 mov     esi, 2
.text:00403D17
.text:00403D17 loc_403D17:                             ; CODE XREF: sub_403980+3B9↓j
.text:00403D17                 xor     edx, edx
.text:00403D19                 mov     eax, 0FFFFFFFFh
.text:00403D1E                 div     ebx
.text:00403D20                 mov     edx, [ecx]
.text:00403D22                 cmp     eax, edx
.text:00403D24                 jnb     short loc_403D40
.text:00403D26                 mov     dword ptr [ecx], 0FFFFFFFFh
.text:00403D2C                 mov     eax, 1
.text:00403D31
.text:00403D31 loc_403D31:                             ; CODE XREF: sub_403980+3C7↓j
.text:00403D31                 dec     esi
.text:00403D32                 or      ebp, eax
.text:00403D34                 cmp     esi, 0FFFFFFFFh
.text:00403D37                 mov     eax, ebp
.text:00403D39                 jnz     short loc_403D17
.text:00403D3B                 jmp     loc_403BD8
.text:00403D40 ; ---------------------------------------------------------------------------
.text:00403D40
.text:00403D40 loc_403D40:                             ; CODE XREF: sub_403980+3A4↑j
.text:00403D40                 imul    edx, ebx
.text:00403D43                 xor     eax, eax
.text:00403D45                 mov     [ecx], edx
.text:00403D47                 jmp     short loc_403D31
.text:00403D49 ; ---------------------------------------------------------------------------
.text:00403D49
.text:00403D49 loc_403D49:                             ; CODE XREF: sub_403980+164↑j
.text:00403D49                                         ; DATA XREF: sub_403980:jpt_403AE4↑o
.text:00403D49                 xor     edx, edx        ; jumptable 00403AE4 cases 75,107
.text:00403D4B                 mov     eax, 0FFFFFFFFh
.text:00403D50                 div     ebx
.text:00403D52                 mov     edx, [esp+3Ch+var_18]
.text:00403D56                 cmp     eax, edx
.text:00403D58                 jnb     short loc_403D70
.text:00403D5A                 mov     [esp+3Ch+var_18], 0FFFFFFFFh
.text:00403D62                 mov     edx, 1
.text:00403D67
.text:00403D67 loc_403D67:                             ; CODE XREF: sub_403980+3F9↓j
.text:00403D67                 xor     eax, eax
.text:00403D69                 or      eax, edx
.text:00403D6B                 jmp     loc_403BD8
.text:00403D70 ; ---------------------------------------------------------------------------
.text:00403D70
.text:00403D70 loc_403D70:                             ; CODE XREF: sub_403980+3D8↑j
.text:00403D70                 imul    edx, ebx
.text:00403D73                 mov     [esp+3Ch+var_18], edx
.text:00403D77                 xor     edx, edx
.text:00403D79                 jmp     short loc_403D67
.text:00403D7B ; ---------------------------------------------------------------------------
.text:00403D7B
.text:00403D7B loc_403D7B:                             ; CODE XREF: sub_403980+164↑j
.text:00403D7B                                         ; DATA XREF: sub_403980:jpt_403AE4↑o
.text:00403D7B                 lea     ecx, [esp+3Ch+var_18] ; jumptable 00403AE4 cases 77,109
.text:00403D7F                 xor     ebp, ebp
.text:00403D81                 mov     esi, 1
.text:00403D86
.text:00403D86 loc_403D86:                             ; CODE XREF: sub_403980+42E↓j
.text:00403D86                 xor     edx, edx
.text:00403D88                 mov     eax, 0FFFFFFFFh
.text:00403D8D                 div     ebx
.text:00403D8F                 mov     edx, [ecx]
.text:00403D91                 cmp     eax, edx
.text:00403D93                 jnb     short loc_403DB0
.text:00403D95                 mov     dword ptr [ecx], 0FFFFFFFFh
.text:00403D9B                 mov     eax, 1
.text:00403DA0
.text:00403DA0 loc_403DA0:                             ; CODE XREF: sub_403980+437↓j
.text:00403DA0                 dec     esi
.text:00403DA1                 or      ebp, eax
.text:00403DA3                 cmp     esi, 0FFFFFFFFh
.text:00403DA6                 mov     eax, ebp
.text:00403DA8                 jz      loc_403BD8
.text:00403DAE                 jmp     short loc_403D86
.text:00403DB0 ; ---------------------------------------------------------------------------
.text:00403DB0
.text:00403DB0 loc_403DB0:                             ; CODE XREF: sub_403980+413↑j
.text:00403DB0                 imul    edx, ebx
.text:00403DB3                 xor     eax, eax
.text:00403DB5                 mov     [ecx], edx
.text:00403DB7                 jmp     short loc_403DA0
.text:00403DB9 ; ---------------------------------------------------------------------------
.text:00403DB9
.text:00403DB9 loc_403DB9:                             ; CODE XREF: sub_403980+164↑j
.text:00403DB9                                         ; DATA XREF: sub_403980:jpt_403AE4↑o
.text:00403DB9                 lea     ecx, [esp+3Ch+var_18] ; jumptable 00403AE4 cases 84,116
.text:00403DBD                 xor     ebp, ebp
.text:00403DBF                 mov     esi, 3
.text:00403DC4
.text:00403DC4 loc_403DC4:                             ; CODE XREF: sub_403980+466↓j
.text:00403DC4                 xor     edx, edx
.text:00403DC6                 mov     eax, 0FFFFFFFFh
.text:00403DCB                 div     ebx
.text:00403DCD                 mov     edx, [ecx]
.text:00403DCF                 cmp     eax, edx
.text:00403DD1                 jnb     short loc_403DED
.text:00403DD3                 mov     dword ptr [ecx], 0FFFFFFFFh
.text:00403DD9                 mov     eax, 1
.text:00403DDE
.text:00403DDE loc_403DDE:                             ; CODE XREF: sub_403980+474↓j
.text:00403DDE                 dec     esi
.text:00403DDF                 or      ebp, eax
.text:00403DE1                 cmp     esi, 0FFFFFFFFh
.text:00403DE4                 mov     eax, ebp
.text:00403DE6                 jnz     short loc_403DC4
.text:00403DE8                 jmp     loc_403BD8
.text:00403DED ; ---------------------------------------------------------------------------
.text:00403DED
.text:00403DED loc_403DED:                             ; CODE XREF: sub_403980+451↑j
.text:00403DED                 imul    edx, ebx
.text:00403DF0                 xor     eax, eax
.text:00403DF2                 mov     [ecx], edx
.text:00403DF4                 jmp     short loc_403DDE
.text:00403DF6 ; ---------------------------------------------------------------------------
.text:00403DF6
.text:00403DF6 loc_403DF6:                             ; CODE XREF: sub_403980+164↑j
.text:00403DF6                                         ; DATA XREF: sub_403980:jpt_403AE4↑o
.text:00403DF6                 mov     eax, [esp+3Ch+var_18] ; jumptable 00403AE4 case 119
.text:00403DFA                 test    eax, eax
.text:00403DFC                 js      loc_403BFC
.text:00403E02                 add     eax, eax
.text:00403E04                 jmp     loc_403BD2
.text:00403E09 ; ---------------------------------------------------------------------------
.text:00403E09
.text:00403E09 loc_403E09:                             ; CODE XREF: sub_403980+13D↑j
.text:00403E09                                         ; sub_403980+14F↑j
.text:00403E09                 mov     [esp+3Ch+var_24], 2
.text:00403E11                 mov     ebx, 3E8h
.text:00403E16                 jmp     loc_403AD5
.text:00403E1B ; ---------------------------------------------------------------------------
.text:00403E1B
.text:00403E1B loc_403E1B:                             ; CODE XREF: sub_403980+146↑j
.text:00403E1B                 cmp     eax, 69h ; 'i'
.text:00403E1E                 jnz     loc_403AD5
.text:00403E24                 mov     edx, [esp+3Ch+var_28]
.text:00403E28                 cmp     byte ptr [edx+2], 42h ; 'B'
.text:00403E2C                 jnz     loc_403AD5
.text:00403E32                 mov     [esp+3Ch+var_24], 3
.text:00403E3A                 jmp     loc_403AD5
.text:00403E3A ; ---------------------------------------------------------------------------
.text:00403E3F                 align 10h
.text:00403E40
.text:00403E40 loc_403E40:                             ; CODE XREF: sub_403980+12A↑j
.text:00403E40                 mov     eax, [edi]
.text:00403E42                 mov     [esp+3Ch+var_28], eax
.text:00403E46                 jmp     loc_403AD5
.text:00403E4B ; ---------------------------------------------------------------------------
.text:00403E4B
.text:00403E4B loc_403E4B:                             ; CODE XREF: sub_403980+B0↑j
.text:00403E4B                 call    _errno
.text:00403E50                 cmp     dword ptr [eax], 22h ; '"'
.text:00403E53                 jnz     short loc_403E62
.text:00403E55                 mov     [esp+3Ch+var_1C], 1
.text:00403E5D                 jmp     loc_403A36
.text:00403E62 ; ---------------------------------------------------------------------------
.text:00403E62
.text:00403E62 loc_403E62:                             ; CODE XREF: sub_403980+4D3↑j
.text:00403E62                                         ; sub_403980+4F2↓j ...
.text:00403E62                 mov     eax, 4
.text:00403E67                 jmp     loc_403A55
.text:00403E6C ; ---------------------------------------------------------------------------
.text:00403E6C
.text:00403E6C loc_403E6C:                             ; CODE XREF: sub_403980+A1↑j
.text:00403E6C                 mov     edx, [esp+3Ch+Str]
.text:00403E70                 test    edx, edx
.text:00403E72                 jz      short loc_403E62
.text:00403E74                 movzx   eax, byte ptr [eax]
.text:00403E77                 test    al, al
.text:00403E79                 jz      short loc_403E62
.text:00403E7B                 mov     ebx, [esp+3Ch+Str]
.text:00403E7F                 movsx   esi, al
.text:00403E82                 mov     [esp+3Ch+Type], esi ; Val
.text:00403E86                 mov     [esp+3Ch+C], ebx ; Str
.text:00403E89                 call    strchr
.text:00403E8E                 test    eax, eax
.text:00403E90                 jz      short loc_403E62
.text:00403E92                 mov     [esp+3Ch+var_18], 1
.text:00403E9A                 jmp     loc_403A36
.text:00403E9A ; ---------------------------------------------------------------------------
.text:00403E9F                 align 10h
.text:00403EA0
.text:00403EA0 loc_403EA0:                             ; CODE XREF: sub_403980+4E↑j
.text:00403EA0                 mov     eax, ds:_pctype
.text:00403EA5                 mov     ecx, [eax]
.text:00403EA7                 movzx   eax, word ptr [ecx+edx*2]
.text:00403EAB                 and     eax, 8
.text:00403EAE                 jmp     loc_4039E4
.text:00403EB3 ; ---------------------------------------------------------------------------
.text:00403EB3
.text:00403EB3 loc_403EB3:                             ; CODE XREF: sub_403980+26↑j
.text:00403EB3                 lea     edi, [esp+3Ch+var_14]
.text:00403EB7                 jmp     loc_4039AC
.text:00403EBC ; ---------------------------------------------------------------------------
.text:00403EBC
.text:00403EBC loc_403EBC:                             ; CODE XREF: sub_403980+1A↑j
.text:00403EBC                 mov     [esp+3Ch+Radix], 70h ; 'p'
.text:00403EC4                 mov     [esp+3Ch+Type], offset aCoreutils530Sr ; "../../coreutils-5.3.0-src/lib/xstrtol.c"
.text:00403ECC                 mov     [esp+3Ch+C], offset a0StrtolBaseStr ; "0 <= strtol_base && strtol_base <= 36"
.text:00403ED3                 call    _assert
.text:00403ED3 sub_403980      endp
.text:00403ED3
.text:00403ED3 ; ---------------------------------------------------------------------------
.text:00403ED8                 db 18h dup(90h)
.text:00403EF0 aLiteral        db 'literal',0          ; DATA XREF: .text:00403F30↓o
.text:00403EF8 aShell          db 'shell',0            ; DATA XREF: .text:00403F34↓o
.text:00403EFE aShellAlways    db 'shell-always',0     ; DATA XREF: .text:00403F38↓o
.text:00403F0B aC              db 'c',0                ; DATA XREF: .text:00403F3C↓o
.text:00403F0D aEscape         db 'escape',0           ; DATA XREF: .text:00403F40↓o
.text:00403F14 aLocale         db 'locale',0           ; DATA XREF: .text:00403F44↓o
.text:00403F1B aClocale        db 'clocale',0          ; DATA XREF: .text:00403F48↓o
.text:00403F23                 align 10h
.text:00403F30                 dd offset aLiteral      ; "literal"
.text:00403F34                 dd offset aShell        ; "shell"
.text:00403F38                 dd offset aShellAlways  ; "shell-always"
.text:00403F3C                 dd offset aC            ; "c"
.text:00403F40                 dd offset aEscape       ; "escape"
.text:00403F44                 dd offset aLocale       ; "locale"
.text:00403F48                 dd offset aClocale      ; "clocale"
.text:00403F4C                 dd 2 dup(0)
.text:00403F54                 dd 1, 2, 3, 4, 5, 6
.text:00403F6C asc_403F6C:                             ; DATA XREF: sub_403F80+7E↓o
.text:00403F6C                                         ; sub_403F80+A39↓o ...
.text:00403F6C                 text "UTF-16LE", '"',27h,'`'
.text:00403F72                 align 10h
.text:00403F80
.text:00403F80 ; =============== S U B R O U T I N E =======================================
.text:00403F80
.text:00403F80
.text:00403F80 ; int __cdecl sub_403F80(int, int, char *Str, int, int, int)
.text:00403F80 sub_403F80      proc near               ; CODE XREF: sub_403F80+43A↓p
.text:00403F80                                         ; .text:00404B43↓p ...
.text:00403F80
.text:00403F80 C               = dword ptr -4Ch
.text:00403F80 Type            = dword ptr -48h
.text:00403F80 SizeInBytes     = dword ptr -44h
.text:00403F80 State           = dword ptr -40h
.text:00403F80 var_3C          = dword ptr -3Ch
.text:00403F80 var_38          = dword ptr -38h
.text:00403F80 var_34          = dword ptr -34h
.text:00403F80 var_30          = dword ptr -30h
.text:00403F80 var_29          = byte ptr -29h
.text:00403F80 var_28          = dword ptr -28h
.text:00403F80 var_22          = byte ptr -22h
.text:00403F80 var_21          = byte ptr -21h
.text:00403F80 var_20          = dword ptr -20h
.text:00403F80 var_1C          = dword ptr -1Ch
.text:00403F80 var_18          = mbstate_t ptr -18h
.text:00403F80 arg_0           = dword ptr  4
.text:00403F80 arg_4           = dword ptr  8
.text:00403F80 Str             = dword ptr  0Ch
.text:00403F80 arg_C           = dword ptr  10h
.text:00403F80 arg_10          = dword ptr  14h
.text:00403F80 arg_14          = dword ptr  18h
.text:00403F80
.text:00403F80                 push    ebp
.text:00403F81                 push    edi
.text:00403F82                 push    esi
.text:00403F83                 push    ebx
.text:00403F84                 sub     esp, 3Ch
.text:00403F87                 mov     edx, ds:__mb_cur_max
.text:00403F8D                 mov     [esp+4Ch+var_34], 0
.text:00403F95                 mov     [esp+4Ch+var_1C], 0
.text:00403F9D                 cmp     dword ptr [edx], 1
.text:00403FA0                 mov     [esp+4Ch+var_20], 0
.text:00403FA8                 mov     [esp+4Ch+var_21], 0
.text:00403FAD                 setz    [esp+4Ch+var_22]
.text:00403FB2                 cmp     [esp+4Ch+arg_10], 6 ; switch 7 cases
.text:00403FB7                 ja      short def_403FBD ; jumptable 00403FBD default case, cases 0,1
.text:00403FB9                 mov     edx, [esp+4Ch+arg_10]
.text:00403FBD                 jmp     ds:jpt_403FBD[edx*4] ; switch jump
.text:00403FBD ; ---------------------------------------------------------------------------
.text:00403FC4 jpt_403FBD      dd offset def_403FBD    ; DATA XREF: sub_403F80+3D↑r
.text:00403FC4                 dd offset def_403FBD    ; jump table for switch statement
.text:00403FC4                 dd offset loc_404905
.text:00403FC4                 dd offset loc_403FE0
.text:00403FC4                 dd offset loc_40492B
.text:00403FC4                 dd offset loc_404935
.text:00403FC4                 dd offset loc_404935
.text:00403FE0 ; ---------------------------------------------------------------------------
.text:00403FE0
.text:00403FE0 loc_403FE0:                             ; CODE XREF: sub_403F80+3D↑j
.text:00403FE0                                         ; DATA XREF: sub_403F80:jpt_403FBD↑o
.text:00403FE0                 mov     eax, [esp+4Ch+arg_4] ; jumptable 00403FBD case 3
.text:00403FE4                 cmp     [esp+4Ch+var_34], eax
.text:00403FE8                 jnb     short loc_403FF1
.text:00403FEA                 mov     ebx, [esp+4Ch+arg_0]
.text:00403FEE                 mov     byte ptr [ebx], 22h ; '"'
.text:00403FF1
.text:00403FF1 loc_403FF1:                             ; CODE XREF: sub_403F80+68↑j
.text:00403FF1                 mov     [esp+4Ch+var_34], 1
.text:00403FF9                 mov     [esp+4Ch+var_21], 1
.text:00403FFE                 mov     [esp+4Ch+var_1C], offset asc_403F6C ; "\"'`"
.text:00404006
.text:00404006 loc_404006:                             ; CODE XREF: sub_403F80+9A6↓j
.text:00404006                 mov     [esp+4Ch+var_20], 1
.text:0040400E
.text:0040400E def_403FBD:                             ; CODE XREF: sub_403F80+37↑j
.text:0040400E                                         ; sub_403F80+3D↑j ...
.text:0040400E                 xor     ebp, ebp        ; jumptable 00403FBD default case, cases 0,1
.text:00404010
.text:00404010 loc_404010:                             ; CODE XREF: sub_403F80+3DB↓j
.text:00404010                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00404015                 jz      loc_4048F7
.text:0040401B                 cmp     ebp, [esp+4Ch+arg_C]
.text:0040401F
.text:0040401F loc_40401F:                             ; CODE XREF: sub_403F80+980↓j
.text:0040401F                 jz      loc_40488E
.text:00404025                 cmp     [esp+4Ch+var_21], 0
.text:0040402A                 jz      short loc_404070
.text:0040402C                 mov     esi, [esp+4Ch+var_20]
.text:00404030                 test    esi, esi
.text:00404032                 jz      short loc_404070
.text:00404034                 mov     ecx, [esp+4Ch+var_20]
.text:00404038                 lea     edi, [ecx+ebp]
.text:0040403B                 cmp     edi, [esp+4Ch+arg_C]
.text:0040403F                 ja      short loc_404070
.text:00404041                 cld
.text:00404042                 mov     ebx, [esp+4Ch+Str]
.text:00404046                 mov     edi, [esp+4Ch+var_1C]
.text:0040404A                 add     ebx, ebp
.text:0040404C                 mov     esi, ebx
.text:0040404E                 cmp     ecx, ecx
.text:00404050                 repe cmpsb
.text:00404052                 jnz     short loc_404070
.text:00404054                 mov     edx, [esp+4Ch+arg_4]
.text:00404058                 cmp     [esp+4Ch+var_34], edx
.text:0040405C                 jnb     short loc_40406A
.text:0040405E                 mov     ecx, [esp+4Ch+arg_0]
.text:00404062                 mov     eax, [esp+4Ch+var_34]
.text:00404066                 mov     byte ptr [eax+ecx], 5Ch ; '\'
.text:0040406A
.text:0040406A loc_40406A:                             ; CODE XREF: sub_403F80+DC↑j
.text:0040406A                 inc     [esp+4Ch+var_34]
.text:0040406E                 mov     esi, esi
.text:00404070
.text:00404070 loc_404070:                             ; CODE XREF: sub_403F80+AA↑j
.text:00404070                                         ; sub_403F80+B2↑j ...
.text:00404070                 mov     edi, [esp+4Ch+Str]
.text:00404074                 movzx   ebx, byte ptr [ebp+edi+0]
.text:00404079                 movzx   eax, bl
.text:0040407C                 cmp     eax, 7Eh        ; switch 127 cases
.text:0040407F                 ja      def_404085      ; jumptable 00404085 default case, cases 1-6,14-31,64
.text:00404085                 jmp     ds:jpt_404085[eax*4] ; switch jump
.text:00404085 ; ---------------------------------------------------------------------------
.text:0040408C jpt_404085      dd offset loc_404288, offset def_404085, offset def_404085
.text:0040408C                                         ; DATA XREF: sub_403F80+105↑r
.text:0040408C                 dd offset def_404085, offset def_404085, offset def_404085 ; jump table for switch statement
.text:0040408C                 dd offset def_404085, offset loc_404360, offset loc_40437E
.text:0040408C                 dd offset loc_404382, offset loc_4043C7, offset loc_4043CB
.text:0040408C                 dd offset loc_4043CF, offset loc_4043D3, offset def_404085
.text:0040408C                 dd offset def_404085, offset def_404085, offset def_404085
.text:0040408C                 dd offset def_404085, offset def_404085, offset def_404085
.text:0040408C                 dd offset def_404085, offset def_404085, offset def_404085
.text:0040408C                 dd offset def_404085, offset def_404085, offset def_404085
.text:0040408C                 dd offset def_404085, offset def_404085, offset def_404085
.text:0040408C                 dd offset def_404085, offset def_404085, offset loc_404858
.text:0040408C                 dd offset loc_404858, offset loc_404858, offset loc_40487A
.text:0040408C                 dd offset loc_404858, offset def_404482, offset loc_404858
.text:0040408C                 dd offset loc_4043D7, offset loc_404858, offset loc_404858
.text:0040408C                 dd offset loc_404858, offset def_404482, offset def_404482
.text:0040408C                 dd offset def_404482, offset def_404482, offset def_404482
.text:0040408C                 dd offset def_404482, offset def_404482, offset def_404482
.text:0040408C                 dd offset def_404482, offset def_404482, offset def_404482
.text:0040408C                 dd offset def_404482, offset def_404482, offset def_404482
.text:0040408C                 dd offset def_404482, offset def_404482, offset loc_404858
.text:0040408C                 dd offset loc_404858, offset loc_404858, offset loc_404858
.text:0040408C                 dd offset loc_40443C, offset def_404085, offset def_404482
.text:0040408C                 dd offset def_404482, offset def_404482, offset def_404482
.text:0040408C                 dd offset def_404482, offset def_404482, offset def_404482
.text:0040408C                 dd offset def_404482, offset def_404482, offset def_404482
.text:0040408C                 dd offset def_404482, offset def_404482, offset def_404482
.text:0040408C                 dd offset def_404482, offset def_404482, offset def_404482
.text:0040408C                 dd offset def_404482, offset def_404482, offset def_404482
.text:0040408C                 dd offset def_404482, offset def_404482, offset def_404482
.text:0040408C                 dd offset def_404482, offset def_404482, offset def_404482
.text:0040408C                 dd offset def_404482, offset loc_404858, offset loc_404851
.text:0040408C                 dd offset def_404482, offset loc_404858, offset def_404482
.text:0040408C                 dd offset loc_404858, offset def_404482, offset def_404482
.text:0040408C                 dd offset def_404482, offset def_404482, offset def_404482
.text:0040408C                 dd offset def_404482, offset def_404482, offset def_404482
.text:0040408C                 dd offset def_404482, offset def_404482, offset def_404482
.text:0040408C                 dd offset def_404482, offset def_404482, offset def_404482
.text:0040408C                 dd offset def_404482, offset def_404482, offset def_404482
.text:0040408C                 dd offset def_404482, offset def_404482, offset def_404482
.text:0040408C                 dd offset def_404482, offset def_404482, offset def_404482
.text:0040408C                 dd offset def_404482, offset def_404482, offset def_404482
.text:0040408C                 dd offset loc_404868, offset loc_404858, offset loc_404868
.text:0040408C                 dd offset loc_40487A
.text:00404288 ; ---------------------------------------------------------------------------
.text:00404288
.text:00404288 loc_404288:                             ; CODE XREF: sub_403F80+105↑j
.text:00404288                                         ; DATA XREF: sub_403F80:jpt_404085↑o
.text:00404288                 cmp     [esp+4Ch+var_21], 0 ; jumptable 00404085 case 0
.text:0040428D                 lea     eax, [ebp+1]
.text:00404290                 jz      loc_404340
.text:00404296                 mov     esi, [esp+4Ch+arg_4]
.text:0040429A                 cmp     [esp+4Ch+var_34], esi
.text:0040429E                 jnb     short loc_4042AC
.text:004042A0                 mov     eax, [esp+4Ch+arg_0]
.text:004042A4                 mov     ebx, [esp+4Ch+var_34]
.text:004042A8                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:004042AC
.text:004042AC loc_4042AC:                             ; CODE XREF: sub_403F80+31E↑j
.text:004042AC                 inc     [esp+4Ch+var_34]
.text:004042B0                 mov     edx, [esp+4Ch+arg_4]
.text:004042B4                 cmp     [esp+4Ch+var_34], edx
.text:004042B8                 jnb     short loc_4042C6
.text:004042BA                 mov     edi, [esp+4Ch+arg_0]
.text:004042BE                 mov     ecx, [esp+4Ch+var_34]
.text:004042C2                 mov     byte ptr [ecx+edi], 30h ; '0'
.text:004042C6
.text:004042C6 loc_4042C6:                             ; CODE XREF: sub_403F80+338↑j
.text:004042C6                 inc     [esp+4Ch+var_34]
.text:004042CA                 mov     esi, [esp+4Ch+arg_4]
.text:004042CE                 cmp     [esp+4Ch+var_34], esi
.text:004042D2                 jnb     short loc_4042E0
.text:004042D4                 mov     ebx, [esp+4Ch+arg_0]
.text:004042D8                 mov     eax, [esp+4Ch+var_34]
.text:004042DC                 mov     byte ptr [eax+ebx], 30h ; '0'
.text:004042E0
.text:004042E0 loc_4042E0:                             ; CODE XREF: sub_403F80+352↑j
.text:004042E0                 inc     [esp+4Ch+var_34]
.text:004042E4                 mov     bl, 30h ; '0'
.text:004042E6                 lea     esi, [esi+0]
.text:004042E9                 lea     edi, [edi+0]
.text:004042F0
.text:004042F0 def_404482:                             ; CODE XREF: sub_403F80+105↑j
.text:004042F0                                         ; sub_403F80+463↓j ...
.text:004042F0                 cmp     [esp+4Ch+var_21], 0 ; jumptable 00404085 cases 37,43-58,65-90,93,95,97-122
.text:004042F0                                         ; jumptable 00404482 default case, cases 34-38,42-44,46,48-59
.text:004042F5                 lea     eax, [ebp+1]
.text:004042F8                 jz      short loc_404340
.text:004042FA                 mov     cl, bl
.text:004042FC                 mov     edi, [esp+4Ch+arg_14]
.text:00404300                 mov     esi, 1
.text:00404305                 shr     cl, 5
.text:00404308                 movzx   edx, cl
.text:0040430B                 mov     ecx, ebx
.text:0040430D                 and     ecx, 1Fh
.text:00404310                 shl     esi, cl
.text:00404312                 test    [edi+edx*4+4], esi
.text:00404316                 jz      short loc_404332
.text:00404318
.text:00404318 loc_404318:                             ; CODE XREF: sub_403F80+3FC↓j
.text:00404318                 mov     edx, [esp+4Ch+arg_4]
.text:0040431C                 cmp     [esp+4Ch+var_34], edx
.text:00404320                 jnb     short loc_40432E
.text:00404322                 mov     edi, [esp+4Ch+arg_0]
.text:00404326                 mov     esi, [esp+4Ch+var_34]
.text:0040432A                 mov     byte ptr [esi+edi], 5Ch ; '\'
.text:0040432E
.text:0040432E loc_40432E:                             ; CODE XREF: sub_403F80+3A0↑j
.text:0040432E                 inc     [esp+4Ch+var_34]
.text:00404332
.text:00404332 loc_404332:                             ; CODE XREF: sub_403F80+396↑j
.text:00404332                 lea     eax, [ebp+1]
.text:00404335                 lea     esi, [esi+0]
.text:00404339                 lea     edi, [edi+0]
.text:00404340
.text:00404340 loc_404340:                             ; CODE XREF: sub_403F80+310↑j
.text:00404340                                         ; sub_403F80+378↑j ...
.text:00404340                 mov     ebp, [esp+4Ch+arg_4]
.text:00404344                 cmp     [esp+4Ch+var_34], ebp
.text:00404348                 jnb     short loc_404355
.text:0040434A                 mov     edx, [esp+4Ch+arg_0]
.text:0040434E                 mov     ecx, [esp+4Ch+var_34]
.text:00404352                 mov     [ecx+edx], bl
.text:00404355
.text:00404355 loc_404355:                             ; CODE XREF: sub_403F80+3C8↑j
.text:00404355                 inc     [esp+4Ch+var_34]
.text:00404359                 mov     ebp, eax
.text:0040435B                 jmp     loc_404010
.text:00404360 ; ---------------------------------------------------------------------------
.text:00404360
.text:00404360 loc_404360:                             ; CODE XREF: sub_403F80+105↑j
.text:00404360                                         ; DATA XREF: sub_403F80:jpt_404085↑o
.text:00404360                 mov     dl, 61h ; 'a'   ; jumptable 00404085 case 7
.text:00404362                 lea     esi, [esi+0]
.text:00404369                 lea     edi, [edi+0]
.text:00404370
.text:00404370 loc_404370:                             ; CODE XREF: sub_403F80+400↓j
.text:00404370                                         ; sub_403F80+409↓j ...
.text:00404370                 cmp     [esp+4Ch+var_21], 0
.text:00404375                 lea     eax, [ebp+1]
.text:00404378                 jz      short loc_404340
.text:0040437A                 mov     bl, dl
.text:0040437C                 jmp     short loc_404318
.text:0040437E ; ---------------------------------------------------------------------------
.text:0040437E
.text:0040437E loc_40437E:                             ; CODE XREF: sub_403F80+105↑j
.text:0040437E                                         ; DATA XREF: sub_403F80:jpt_404085↑o
.text:0040437E                 mov     dl, 62h ; 'b'   ; jumptable 00404085 case 8
.text:00404380                 jmp     short loc_404370
.text:00404382 ; ---------------------------------------------------------------------------
.text:00404382
.text:00404382 loc_404382:                             ; CODE XREF: sub_403F80+105↑j
.text:00404382                                         ; DATA XREF: sub_403F80:jpt_404085↑o
.text:00404382                 mov     dl, 74h ; 't'   ; jumptable 00404085 case 9
.text:00404384
.text:00404384 loc_404384:                             ; CODE XREF: sub_403F80+449↓j
.text:00404384                                         ; sub_403F80+455↓j ...
.text:00404384                 cmp     [esp+4Ch+arg_10], 1
.text:00404389                 jnz     short loc_404370
.text:0040438B
.text:0040438B loc_40438B:                             ; CODE XREF: sub_403F80+45C↓j
.text:0040438B                                         ; sub_403F80+4C1↓j ...
.text:0040438B                 mov     [esp+4Ch+var_3C], 2 ; jumptable 00404752 cases 91,92,94,96,124
.text:00404393                 mov     eax, [esp+4Ch+arg_14]
.text:00404397                 mov     edx, [esp+4Ch+arg_C]
.text:0040439B                 mov     ecx, [esp+4Ch+Str]
.text:0040439F                 mov     ebx, [esp+4Ch+arg_4]
.text:004043A3                 mov     [esp+4Ch+var_38], eax ; int
.text:004043A7                 mov     ebp, [esp+4Ch+arg_0]
.text:004043AB                 mov     [esp+4Ch+State], edx ; int
.text:004043AF                 mov     [esp+4Ch+SizeInBytes], ecx ; Str
.text:004043B3                 mov     [esp+4Ch+Type], ebx ; int
.text:004043B7                 mov     [esp+4Ch+C], ebp ; int
.text:004043BA                 call    sub_403F80
.text:004043BF
.text:004043BF loc_4043BF:                             ; CODE XREF: sub_403F80+972↓j
.text:004043BF                 add     esp, 3Ch
.text:004043C2                 pop     ebx
.text:004043C3                 pop     esi
.text:004043C4                 pop     edi
.text:004043C5                 pop     ebp
.text:004043C6                 retn
.text:004043C7 ; ---------------------------------------------------------------------------
.text:004043C7
.text:004043C7 loc_4043C7:                             ; CODE XREF: sub_403F80+105↑j
.text:004043C7                                         ; DATA XREF: sub_403F80:jpt_404085↑o
.text:004043C7                 mov     dl, 6Eh ; 'n'   ; jumptable 00404085 case 10
.text:004043C9                 jmp     short loc_404384
.text:004043CB ; ---------------------------------------------------------------------------
.text:004043CB
.text:004043CB loc_4043CB:                             ; CODE XREF: sub_403F80+105↑j
.text:004043CB                                         ; DATA XREF: sub_403F80:jpt_404085↑o
.text:004043CB                 mov     dl, 76h ; 'v'   ; jumptable 00404085 case 11
.text:004043CD                 jmp     short loc_404370
.text:004043CF ; ---------------------------------------------------------------------------
.text:004043CF
.text:004043CF loc_4043CF:                             ; CODE XREF: sub_403F80+105↑j
.text:004043CF                                         ; DATA XREF: sub_403F80:jpt_404085↑o
.text:004043CF                 mov     dl, 66h ; 'f'   ; jumptable 00404085 case 12
.text:004043D1                 jmp     short loc_404370
.text:004043D3 ; ---------------------------------------------------------------------------
.text:004043D3
.text:004043D3 loc_4043D3:                             ; CODE XREF: sub_403F80+105↑j
.text:004043D3                                         ; DATA XREF: sub_403F80:jpt_404085↑o
.text:004043D3                 mov     dl, 72h ; 'r'   ; jumptable 00404085 case 13
.text:004043D5                 jmp     short loc_404384
.text:004043D7 ; ---------------------------------------------------------------------------
.text:004043D7
.text:004043D7 loc_4043D7:                             ; CODE XREF: sub_403F80+105↑j
.text:004043D7                                         ; DATA XREF: sub_403F80:jpt_404085↑o
.text:004043D7                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00404085 case 39
.text:004043DC                 jz      short loc_40438B ; jumptable 00404752 cases 91,92,94,96,124
.text:004043DE                 cmp     [esp+4Ch+arg_10], 2
.text:004043E3                 jnz     def_404482      ; jumptable 00404085 cases 37,43-58,65-90,93,95,97-122
.text:004043E3                                         ; jumptable 00404482 default case, cases 34-38,42-44,46,48-59
.text:004043E9                 mov     edx, [esp+4Ch+arg_4]
.text:004043ED                 cmp     [esp+4Ch+var_34], edx
.text:004043F1                 jnb     short loc_4043FF
.text:004043F3                 mov     ecx, [esp+4Ch+arg_0]
.text:004043F7                 mov     edi, [esp+4Ch+var_34]
.text:004043FB                 mov     byte ptr [edi+ecx], 27h ; '''
.text:004043FF
.text:004043FF loc_4043FF:                             ; CODE XREF: sub_403F80+471↑j
.text:004043FF                 inc     [esp+4Ch+var_34]
.text:00404403                 mov     eax, [esp+4Ch+arg_4]
.text:00404407                 cmp     [esp+4Ch+var_34], eax
.text:0040440B                 jnb     short loc_404419
.text:0040440D                 mov     esi, [esp+4Ch+arg_0]
.text:00404411                 mov     edx, [esp+4Ch+var_34]
.text:00404415                 mov     byte ptr [edx+esi], 5Ch ; '\'
.text:00404419
.text:00404419 loc_404419:                             ; CODE XREF: sub_403F80+48B↑j
.text:00404419                 inc     [esp+4Ch+var_34]
.text:0040441D                 mov     edi, [esp+4Ch+arg_4]
.text:00404421                 cmp     [esp+4Ch+var_34], edi
.text:00404425                 jnb     short loc_404433
.text:00404427                 mov     ecx, [esp+4Ch+arg_0]
.text:0040442B                 mov     eax, [esp+4Ch+var_34]
.text:0040442F                 mov     byte ptr [eax+ecx], 27h ; '''
.text:00404433
.text:00404433 loc_404433:                             ; CODE XREF: sub_403F80+4A5↑j
.text:00404433                                         ; sub_403F80+5C4↓j ...
.text:00404433                 inc     [esp+4Ch+var_34]
.text:00404437                 jmp     def_404482      ; jumptable 00404085 cases 37,43-58,65-90,93,95,97-122
.text:00404437                                         ; jumptable 00404482 default case, cases 34-38,42-44,46,48-59
.text:0040443C ; ---------------------------------------------------------------------------
.text:0040443C
.text:0040443C loc_40443C:                             ; CODE XREF: sub_403F80+105↑j
.text:0040443C                                         ; DATA XREF: sub_403F80:jpt_404085↑o
.text:0040443C                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00404085 case 63
.text:00404441                 jz      loc_40438B      ; jumptable 00404752 cases 91,92,94,96,124
.text:00404447                 cmp     [esp+4Ch+arg_10], 3
.text:0040444C                 jnz     def_404482      ; jumptable 00404085 cases 37,43-58,65-90,93,95,97-122
.text:0040444C                                         ; jumptable 00404482 default case, cases 34-38,42-44,46,48-59
.text:00404452                 lea     edx, [ebp+2]
.text:00404455                 cmp     edx, [esp+4Ch+arg_C]
.text:00404459                 jnb     def_404482      ; jumptable 00404085 cases 37,43-58,65-90,93,95,97-122
.text:00404459                                         ; jumptable 00404482 default case, cases 34-38,42-44,46,48-59
.text:0040445F                 mov     esi, [esp+4Ch+Str]
.text:00404463                 cmp     byte ptr [ebp+esi+1], 3Fh ; '?'
.text:00404468                 jnz     def_404482      ; jumptable 00404085 cases 37,43-58,65-90,93,95,97-122
.text:00404468                                         ; jumptable 00404482 default case, cases 34-38,42-44,46,48-59
.text:0040446E                 movzx   ecx, byte ptr [ebp+esi+2]
.text:00404473                 movsx   eax, cl
.text:00404476                 sub     eax, 21h ; '!'  ; switch 30 cases
.text:00404479                 cmp     eax, 1Dh
.text:0040447C                 ja      def_404482      ; jumptable 00404085 cases 37,43-58,65-90,93,95,97-122
.text:0040447C                                         ; jumptable 00404482 default case, cases 34-38,42-44,46,48-59
.text:00404482                 jmp     ds:jpt_404482[eax*4] ; switch jump
.text:00404482 ; ---------------------------------------------------------------------------
.text:00404489                 align 4
.text:0040448C jpt_404482      dd offset loc_404504    ; DATA XREF: sub_403F80+502↑r
.text:0040448C                 dd offset def_404482    ; jump table for switch statement
.text:0040448C                 dd offset def_404482
.text:0040448C                 dd offset def_404482
.text:0040448C                 dd offset def_404482
.text:0040448C                 dd offset def_404482
.text:0040448C                 dd offset loc_404504
.text:0040448C                 dd offset loc_404504
.text:0040448C                 dd offset loc_404504
.text:0040448C                 dd offset def_404482
.text:0040448C                 dd offset def_404482
.text:0040448C                 dd offset def_404482
.text:0040448C                 dd offset loc_404504
.text:0040448C                 dd offset def_404482
.text:0040448C                 dd offset loc_404504
.text:0040448C                 dd offset def_404482
.text:0040448C                 dd offset def_404482
.text:0040448C                 dd offset def_404482
.text:0040448C                 dd offset def_404482
.text:0040448C                 dd offset def_404482
.text:0040448C                 dd offset def_404482
.text:0040448C                 dd offset def_404482
.text:0040448C                 dd offset def_404482
.text:0040448C                 dd offset def_404482
.text:0040448C                 dd offset def_404482
.text:0040448C                 dd offset def_404482
.text:0040448C                 dd offset def_404482
.text:0040448C                 dd offset loc_404504
.text:0040448C                 dd offset loc_404504
.text:0040448C                 dd offset loc_404504
.text:00404504 ; ---------------------------------------------------------------------------
.text:00404504
.text:00404504 loc_404504:                             ; CODE XREF: sub_403F80+502↑j
.text:00404504                                         ; DATA XREF: sub_403F80:jpt_404482↑o
.text:00404504                 mov     ebp, edx        ; jumptable 00404482 cases 33,39-41,45,47,60-62
.text:00404506                 mov     bl, cl
.text:00404508                 mov     edx, [esp+4Ch+arg_4]
.text:0040450C                 cmp     [esp+4Ch+var_34], edx
.text:00404510                 jnb     short loc_40451E
.text:00404512                 mov     ecx, [esp+4Ch+arg_0]
.text:00404516                 mov     edi, [esp+4Ch+var_34]
.text:0040451A                 mov     byte ptr [edi+ecx], 3Fh ; '?'
.text:0040451E
.text:0040451E loc_40451E:                             ; CODE XREF: sub_403F80+590↑j
.text:0040451E                 inc     [esp+4Ch+var_34]
.text:00404522                 mov     eax, [esp+4Ch+arg_4]
.text:00404526                 cmp     [esp+4Ch+var_34], eax
.text:0040452A                 jnb     short loc_404538
.text:0040452C                 mov     edx, [esp+4Ch+arg_0]
.text:00404530                 mov     esi, [esp+4Ch+var_34]
.text:00404534                 mov     byte ptr [esi+edx], 5Ch ; '\'
.text:00404538
.text:00404538 loc_404538:                             ; CODE XREF: sub_403F80+5AA↑j
.text:00404538                 inc     [esp+4Ch+var_34]
.text:0040453C                 mov     edi, [esp+4Ch+arg_4]
.text:00404540                 cmp     [esp+4Ch+var_34], edi
.text:00404544                 jnb     loc_404433
.text:0040454A                 mov     eax, [esp+4Ch+arg_0]
.text:0040454E                 mov     ecx, [esp+4Ch+var_34]
.text:00404552                 mov     byte ptr [ecx+eax], 3Fh ; '?'
.text:00404556                 jmp     loc_404433
.text:00404556 ; ---------------------------------------------------------------------------
.text:0040455B                 align 10h
.text:00404560
.text:00404560 def_404085:                             ; CODE XREF: sub_403F80+FF↑j
.text:00404560                                         ; sub_403F80+105↑j
.text:00404560                                         ; DATA XREF: ...
.text:00404560                 cmp     [esp+4Ch+var_22], 0 ; jumptable 00404085 default case, cases 1-6,14-31,64
.text:00404565                 jz      loc_404690
.text:0040456B                 mov     [esp+4Ch+var_28], 1
.text:00404573                 mov     esi, ds:__mb_cur_max
.text:00404579                 movzx   edx, bl
.text:0040457C                 cmp     dword ptr [esi], 1
.text:0040457F                 jz      loc_404674
.text:00404585                 mov     [esp+4Ch+Type], 157h ; Type
.text:0040458D                 mov     [esp+4Ch+C], edx ; C
.text:00404590                 call    _isctype
.text:00404595
.text:00404595 loc_404595:                             ; CODE XREF: sub_403F80+705↓j
.text:00404595                 test    eax, eax
.text:00404597                 setnz   [esp+4Ch+var_29]
.text:0040459C
.text:0040459C loc_40459C:                             ; CODE XREF: sub_403F80+7A5↓j
.text:0040459C                 cmp     [esp+4Ch+var_21], 0
.text:004045A1                 lea     eax, [ebp+1]
.text:004045A4                 jz      loc_404340
.text:004045AA                 cmp     [esp+4Ch+var_29], 0
.text:004045AF                 jnz     def_404482      ; jumptable 00404085 cases 37,43-58,65-90,93,95,97-122
.text:004045AF                                         ; jumptable 00404482 default case, cases 34-38,42-44,46,48-59
.text:004045B5
.text:004045B5 loc_4045B5:                             ; CODE XREF: sub_403F80+7AB↓j
.text:004045B5                 mov     eax, [esp+4Ch+var_28]
.text:004045B9                 lea     edx, [eax+ebp]
.text:004045BC                 lea     esi, [esi+0]
.text:004045C0
.text:004045C0 loc_4045C0:                             ; CODE XREF: sub_403F80+6EF↓j
.text:004045C0                 cmp     [esp+4Ch+var_21], 0
.text:004045C5                 jz      short loc_404640
.text:004045C7                 cmp     [esp+4Ch+var_29], 0
.text:004045CC                 jnz     short loc_404640
.text:004045CE                 mov     edi, [esp+4Ch+arg_4]
.text:004045D2                 cmp     [esp+4Ch+var_34], edi
.text:004045D6                 jnb     short loc_4045E4
.text:004045D8                 mov     esi, [esp+4Ch+arg_0]
.text:004045DC                 mov     eax, [esp+4Ch+var_34]
.text:004045E0                 mov     byte ptr [eax+esi], 5Ch ; '\'
.text:004045E4
.text:004045E4 loc_4045E4:                             ; CODE XREF: sub_403F80+656↑j
.text:004045E4                 inc     [esp+4Ch+var_34]
.text:004045E8                 mov     ecx, [esp+4Ch+arg_4]
.text:004045EC                 cmp     [esp+4Ch+var_34], ecx
.text:004045F0                 jnb     short loc_404605
.text:004045F2                 mov     cl, bl
.text:004045F4                 mov     esi, [esp+4Ch+arg_0]
.text:004045F8                 mov     edi, [esp+4Ch+var_34]
.text:004045FC                 shr     cl, 6
.text:004045FF                 add     cl, 30h ; '0'
.text:00404602                 mov     [edi+esi], cl
.text:00404605
.text:00404605 loc_404605:                             ; CODE XREF: sub_403F80+670↑j
.text:00404605                 inc     [esp+4Ch+var_34]
.text:00404609                 mov     edi, [esp+4Ch+arg_4]
.text:0040460D                 cmp     [esp+4Ch+var_34], edi
.text:00404611                 jnb     short loc_404629
.text:00404613                 mov     cl, bl
.text:00404615                 mov     esi, [esp+4Ch+arg_0]
.text:00404619                 shr     cl, 3
.text:0040461C                 mov     edi, [esp+4Ch+var_34]
.text:00404620                 and     cl, 7
.text:00404623                 add     cl, 30h ; '0'
.text:00404626                 mov     [edi+esi], cl
.text:00404629
.text:00404629 loc_404629:                             ; CODE XREF: sub_403F80+691↑j
.text:00404629                 inc     [esp+4Ch+var_34]
.text:0040462D                 and     bl, 7
.text:00404630                 add     bl, 30h ; '0'
.text:00404633                 lea     esi, [esi+0]
.text:00404639                 lea     edi, [edi+0]
.text:00404640
.text:00404640 loc_404640:                             ; CODE XREF: sub_403F80+645↑j
.text:00404640                                         ; sub_403F80+64C↑j
.text:00404640                 lea     eax, [ebp+1]
.text:00404643                 cmp     edx, eax
.text:00404645                 jbe     loc_404340
.text:0040464B                 mov     ebp, [esp+4Ch+arg_4]
.text:0040464F                 cmp     [esp+4Ch+var_34], ebp
.text:00404653                 jnb     short loc_404660
.text:00404655                 mov     ecx, [esp+4Ch+arg_0]
.text:00404659                 mov     edi, [esp+4Ch+var_34]
.text:0040465D                 mov     [edi+ecx], bl
.text:00404660
.text:00404660 loc_404660:                             ; CODE XREF: sub_403F80+6D3↑j
.text:00404660                 inc     [esp+4Ch+var_34]
.text:00404664                 mov     ebp, eax
.text:00404666                 mov     eax, [esp+4Ch+Str]
.text:0040466A                 movzx   ebx, byte ptr [ebp+eax+0]
.text:0040466F                 jmp     loc_4045C0
.text:00404674 ; ---------------------------------------------------------------------------
.text:00404674
.text:00404674 loc_404674:                             ; CODE XREF: sub_403F80+5FF↑j
.text:00404674                 mov     ecx, ds:_pctype
.text:0040467A                 mov     edi, [ecx]
.text:0040467C                 movzx   eax, word ptr [edi+edx*2]
.text:00404680                 and     eax, 157h
.text:00404685                 jmp     loc_404595
.text:00404685 ; ---------------------------------------------------------------------------
.text:0040468A                 align 10h
.text:00404690
.text:00404690 loc_404690:                             ; CODE XREF: sub_403F80+5E5↑j
.text:00404690                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00404695                 mov     [esp+4Ch+var_18._Wchar], 0
.text:0040469D                 mov     [esp+4Ch+var_28], 0
.text:004046A5                 mov     [esp+4Ch+var_29], 1
.text:004046AA                 jz      loc_40483C
.text:004046B0
.text:004046B0 loc_4046B0:                             ; CODE XREF: sub_403F80+8CC↓j
.text:004046B0                 mov     ecx, [esp+4Ch+arg_C]
.text:004046B4                 lea     edx, [esp+4Ch+var_18]
.text:004046B8                 mov     edi, [esp+4Ch+Str]
.text:004046BC                 mov     [esp+4Ch+State], edx ; State
.text:004046C0                 lea     esi, [esp+4Ch+var_18._State]
.text:004046C4                 sub     ecx, ebp
.text:004046C6                 mov     [esp+4Ch+SizeInBytes], ecx ; SizeInBytes
.text:004046CA                 add     edi, ebp
.text:004046CC                 mov     [esp+4Ch+var_30], edi
.text:004046D0                 mov     [esp+4Ch+Type], edi ; SrcCh
.text:004046D4                 mov     [esp+4Ch+C], esi ; DstCh
.text:004046D7                 call    mbrtowc
.text:004046DC                 test    eax, eax
.text:004046DE                 mov     edi, eax
.text:004046E0                 jz      short loc_404720
.text:004046E2                 cmp     eax, 0FFFFFFFFh
.text:004046E5                 jz      loc_404832
.text:004046EB                 cmp     eax, 0FFFFFFFEh
.text:004046EE                 jz      loc_4047F2
.text:004046F4                 cmp     [esp+4Ch+arg_10], 1
.text:004046F9                 jz      short loc_404730
.text:004046FB
.text:004046FB loc_4046FB:                             ; CODE XREF: sub_403F80+7B9↓j
.text:004046FB                                         ; sub_403F80+86D↓j
.text:004046FB                 movzx   ecx, [esp+4Ch+var_18._State]
.text:00404700                 mov     [esp+4Ch+Type], 157h ; Type
.text:00404708                 mov     [esp+4Ch+C], ecx ; C
.text:0040470B                 call    iswctype
.text:00404710                 test    eax, eax
.text:00404712                 jnz     short loc_404719
.text:00404714                 mov     [esp+4Ch+var_29], 0
.text:00404719
.text:00404719 loc_404719:                             ; CODE XREF: sub_403F80+792↑j
.text:00404719                 mov     [esp+4Ch+var_28], edi
.text:0040471D                 lea     esi, [esi+0]
.text:00404720
.text:00404720 loc_404720:                             ; CODE XREF: sub_403F80+760↑j
.text:00404720                                         ; sub_403F80+87B↓j ...
.text:00404720                 cmp     [esp+4Ch+var_28], 1
.text:00404725                 jbe     loc_40459C
.text:0040472B                 jmp     loc_4045B5
.text:00404730 ; ---------------------------------------------------------------------------
.text:00404730
.text:00404730 loc_404730:                             ; CODE XREF: sub_403F80+779↑j
.text:00404730                 cmp     [esp+4Ch+arg_10], eax
.text:00404734                 mov     edx, 1
.text:00404739                 jnb     short loc_4046FB
.text:0040473B
.text:0040473B loc_40473B:                             ; CODE XREF: sub_403F80+867↓j
.text:0040473B                 mov     ecx, [esp+4Ch+Str]
.text:0040473F                 lea     esi, [edx+ebp]
.text:00404742                 movsx   eax, byte ptr [esi+ecx]
.text:00404746                 sub     eax, 5Bh ; '['  ; switch 34 cases
.text:00404749                 cmp     eax, 21h
.text:0040474C                 ja      def_404752      ; jumptable 00404752 default case, cases 93,95,97-123
.text:00404752                 jmp     ds:jpt_404752[eax*4] ; switch jump
.text:00404752 ; ---------------------------------------------------------------------------
.text:00404759                 align 4
.text:0040475C jpt_404752      dd offset loc_40438B    ; DATA XREF: sub_403F80+7D2↑r
.text:0040475C                 dd offset loc_40438B    ; jump table for switch statement
.text:0040475C                 dd offset def_404752
.text:0040475C                 dd offset loc_40438B
.text:0040475C                 dd offset def_404752
.text:0040475C                 dd offset loc_40438B
.text:0040475C                 dd offset def_404752
.text:0040475C                 dd offset def_404752
.text:0040475C                 dd offset def_404752
.text:0040475C                 dd offset def_404752
.text:0040475C                 dd offset def_404752
.text:0040475C                 dd offset def_404752
.text:0040475C                 dd offset def_404752
.text:0040475C                 dd offset def_404752
.text:0040475C                 dd offset def_404752
.text:0040475C                 dd offset def_404752
.text:0040475C                 dd offset def_404752
.text:0040475C                 dd offset def_404752
.text:0040475C                 dd offset def_404752
.text:0040475C                 dd offset def_404752
.text:0040475C                 dd offset def_404752
.text:0040475C                 dd offset def_404752
.text:0040475C                 dd offset def_404752
.text:0040475C                 dd offset def_404752
.text:0040475C                 dd offset def_404752
.text:0040475C                 dd offset def_404752
.text:0040475C                 dd offset def_404752
.text:0040475C                 dd offset def_404752
.text:0040475C                 dd offset def_404752
.text:0040475C                 dd offset def_404752
.text:0040475C                 dd offset def_404752
.text:0040475C                 dd offset def_404752
.text:0040475C                 dd offset def_404752
.text:0040475C                 dd offset loc_40438B
.text:004047E4 ; ---------------------------------------------------------------------------
.text:004047E4
.text:004047E4 def_404752:                             ; CODE XREF: sub_403F80+7CC↑j
.text:004047E4                                         ; sub_403F80+7D2↑j
.text:004047E4                                         ; DATA XREF: ...
.text:004047E4                 inc     edx             ; jumptable 00404752 default case, cases 93,95,97-123
.text:004047E5                 cmp     edx, edi
.text:004047E7                 jb      loc_40473B
.text:004047ED                 jmp     loc_4046FB
.text:004047F2 ; ---------------------------------------------------------------------------
.text:004047F2
.text:004047F2 loc_4047F2:                             ; CODE XREF: sub_403F80+76E↑j
.text:004047F2                 cmp     ebp, [esp+4Ch+arg_C]
.text:004047F6                 mov     [esp+4Ch+var_29], 0
.text:004047FB                 jnb     loc_404720
.text:00404801                 mov     eax, [esp+4Ch+var_30]
.text:00404805                 cmp     byte ptr [eax], 0
.text:00404808                 jz      loc_404720
.text:0040480E
.text:0040480E loc_40480E:                             ; CODE XREF: sub_403F80+8AB↓j
.text:0040480E                 inc     [esp+4Ch+var_28]
.text:00404812                 mov     esi, [esp+4Ch+var_28]
.text:00404816                 lea     eax, [esi+ebp]
.text:00404819                 cmp     eax, [esp+4Ch+arg_C]
.text:0040481D                 jnb     loc_404720
.text:00404823                 mov     edi, [esp+4Ch+Str]
.text:00404827                 cmp     byte ptr [eax+edi], 0
.text:0040482B                 jnz     short loc_40480E
.text:0040482D                 jmp     loc_404720
.text:00404832 ; ---------------------------------------------------------------------------
.text:00404832
.text:00404832 loc_404832:                             ; CODE XREF: sub_403F80+765↑j
.text:00404832                 mov     [esp+4Ch+var_29], 0
.text:00404837                 jmp     loc_404720
.text:0040483C ; ---------------------------------------------------------------------------
.text:0040483C
.text:0040483C loc_40483C:                             ; CODE XREF: sub_403F80+72A↑j
.text:0040483C                 mov     edx, [esp+4Ch+Str]
.text:00404840                 mov     [esp+4Ch+C], edx ; Str
.text:00404843                 call    strlen
.text:00404848                 mov     [esp+4Ch+arg_C], eax
.text:0040484C                 jmp     loc_4046B0
.text:00404851 ; ---------------------------------------------------------------------------
.text:00404851
.text:00404851 loc_404851:                             ; CODE XREF: sub_403F80+105↑j
.text:00404851                                         ; DATA XREF: sub_403F80:jpt_404085↑o
.text:00404851                 mov     dl, bl          ; jumptable 00404085 case 92
.text:00404853                 jmp     loc_404384
.text:00404858 ; ---------------------------------------------------------------------------
.text:00404858
.text:00404858 loc_404858:                             ; CODE XREF: sub_403F80+105↑j
.text:00404858                                         ; sub_403F80+902↓j
.text:00404858                                         ; DATA XREF: ...
.text:00404858                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00404085 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:0040485D                 jnz     def_404482      ; jumptable 00404085 cases 37,43-58,65-90,93,95,97-122
.text:0040485D                                         ; jumptable 00404482 default case, cases 34-38,42-44,46,48-59
.text:00404863                 jmp     loc_40438B      ; jumptable 00404752 cases 91,92,94,96,124
.text:00404868 ; ---------------------------------------------------------------------------
.text:00404868
.text:00404868 loc_404868:                             ; CODE XREF: sub_403F80+105↑j
.text:00404868                                         ; DATA XREF: sub_403F80:jpt_404085↑o
.text:00404868                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh ; jumptable 00404085 cases 123,125
.text:0040486D                 jz      short loc_404884
.text:0040486F                 cmp     [esp+4Ch+arg_C], 1
.text:00404874
.text:00404874 loc_404874:                             ; CODE XREF: sub_403F80+90C↓j
.text:00404874                 jnz     def_404482      ; jumptable 00404085 cases 37,43-58,65-90,93,95,97-122
.text:00404874                                         ; jumptable 00404482 default case, cases 34-38,42-44,46,48-59
.text:0040487A
.text:0040487A loc_40487A:                             ; CODE XREF: sub_403F80+105↑j
.text:0040487A                                         ; DATA XREF: sub_403F80:jpt_404085↑o
.text:0040487A                 test    ebp, ebp        ; jumptable 00404085 cases 35,126
.text:0040487C                 jnz     def_404482      ; jumptable 00404085 cases 37,43-58,65-90,93,95,97-122
.text:0040487C                                         ; jumptable 00404482 default case, cases 34-38,42-44,46,48-59
.text:00404882                 jmp     short loc_404858 ; jumptable 00404085 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:00404884 ; ---------------------------------------------------------------------------
.text:00404884
.text:00404884 loc_404884:                             ; CODE XREF: sub_403F80+8ED↑j
.text:00404884                 mov     esi, [esp+4Ch+Str]
.text:00404888                 cmp     byte ptr [esi+1], 0
.text:0040488C                 jmp     short loc_404874
.text:0040488E ; ---------------------------------------------------------------------------
.text:0040488E
.text:0040488E loc_40488E:                             ; CODE XREF: sub_403F80:loc_40401F↑j
.text:0040488E                 test    ebp, ebp
.text:00404890                 jnz     short loc_40489D
.text:00404892                 cmp     [esp+4Ch+arg_10], 1
.text:00404897                 jz      loc_40438B      ; jumptable 00404752 cases 91,92,94,96,124
.text:0040489D
.text:0040489D loc_40489D:                             ; CODE XREF: sub_403F80+910↑j
.text:0040489D                 mov     esi, [esp+4Ch+var_1C]
.text:004048A1                 test    esi, esi
.text:004048A3                 jz      short loc_4048D8
.text:004048A5                 mov     edi, [esp+4Ch+var_1C]
.text:004048A9                 movzx   eax, byte ptr [edi]
.text:004048AC                 test    al, al
.text:004048AE                 jz      short loc_4048D8
.text:004048B0
.text:004048B0 loc_4048B0:                             ; CODE XREF: sub_403F80+956↓j
.text:004048B0                 mov     ebp, [esp+4Ch+arg_4]
.text:004048B4                 cmp     [esp+4Ch+var_34], ebp
.text:004048B8                 jnb     short loc_4048C5
.text:004048BA                 mov     ecx, [esp+4Ch+arg_0]
.text:004048BE                 mov     ebx, [esp+4Ch+var_34]
.text:004048C2                 mov     [ebx+ecx], al
.text:004048C5
.text:004048C5 loc_4048C5:                             ; CODE XREF: sub_403F80+938↑j
.text:004048C5                 inc     [esp+4Ch+var_1C]
.text:004048C9                 inc     [esp+4Ch+var_34]
.text:004048CD                 mov     edx, [esp+4Ch+var_1C]
.text:004048D1                 movzx   eax, byte ptr [edx]
.text:004048D4                 test    al, al
.text:004048D6                 jnz     short loc_4048B0
.text:004048D8
.text:004048D8 loc_4048D8:                             ; CODE XREF: sub_403F80+923↑j
.text:004048D8                                         ; sub_403F80+92E↑j
.text:004048D8                 mov     eax, [esp+4Ch+arg_4]
.text:004048DC                 cmp     [esp+4Ch+var_34], eax
.text:004048E0                 jnb     short loc_4048EE
.text:004048E2                 mov     edi, [esp+4Ch+arg_0]
.text:004048E6                 mov     esi, [esp+4Ch+var_34]
.text:004048EA                 mov     byte ptr [esi+edi], 0
.text:004048EE
.text:004048EE loc_4048EE:                             ; CODE XREF: sub_403F80+960↑j
.text:004048EE                 mov     eax, [esp+4Ch+var_34]
.text:004048F2                 jmp     loc_4043BF
.text:004048F7 ; ---------------------------------------------------------------------------
.text:004048F7
.text:004048F7 loc_4048F7:                             ; CODE XREF: sub_403F80+95↑j
.text:004048F7                 mov     ebx, [esp+4Ch+Str]
.text:004048FB                 cmp     byte ptr [ebp+ebx+0], 0
.text:00404900                 jmp     loc_40401F
.text:00404905 ; ---------------------------------------------------------------------------
.text:00404905
.text:00404905 loc_404905:                             ; CODE XREF: sub_403F80+3D↑j
.text:00404905                                         ; DATA XREF: sub_403F80:jpt_403FBD↑o
.text:00404905                 mov     edx, [esp+4Ch+arg_4] ; jumptable 00403FBD case 2
.text:00404909                 cmp     [esp+4Ch+var_34], edx
.text:0040490D                 jnb     short loc_404916
.text:0040490F                 mov     ecx, [esp+4Ch+arg_0]
.text:00404913                 mov     byte ptr [ecx], 27h ; '''
.text:00404916
.text:00404916 loc_404916:                             ; CODE XREF: sub_403F80+98D↑j
.text:00404916                 mov     [esp+4Ch+var_34], 1
.text:0040491E                 mov     [esp+4Ch+var_1C], 403F6Eh
.text:00404926                 jmp     loc_404006
.text:0040492B ; ---------------------------------------------------------------------------
.text:0040492B
.text:0040492B loc_40492B:                             ; CODE XREF: sub_403F80+3D↑j
.text:0040492B                                         ; DATA XREF: sub_403F80:jpt_403FBD↑o
.text:0040492B                 mov     [esp+4Ch+var_21], 1 ; jumptable 00403FBD case 4
.text:00404930                 jmp     def_403FBD      ; jumptable 00403FBD default case, cases 0,1
.text:00404935 ; ---------------------------------------------------------------------------
.text:00404935
.text:00404935 loc_404935:                             ; CODE XREF: sub_403F80+3D↑j
.text:00404935                                         ; DATA XREF: sub_403F80:jpt_403FBD↑o
.text:00404935                 mov     [esp+4Ch+C], 403F70h ; jumptable 00403FBD cases 5,6
.text:0040493C                 call    ds:libintl_gettext
.text:00404942                 cmp     eax, 403F70h
.text:00404947                 mov     edi, eax
.text:00404949                 jz      short loc_4049C0
.text:0040494B
.text:0040494B loc_40494B:                             ; CODE XREF: sub_403F80+A45↓j
.text:0040494B                                         ; sub_403F80+A4C↓j
.text:0040494B                 mov     [esp+4Ch+C], 403F6Eh
.text:00404952                 call    ds:libintl_gettext
.text:00404958                 cmp     eax, 403F6Eh
.text:0040495D                 mov     edx, eax
.text:0040495F                 jz      short loc_4049B2
.text:00404961
.text:00404961 loc_404961:                             ; CODE XREF: sub_403F80+A37↓j
.text:00404961                                         ; sub_403F80+A3E↓j
.text:00404961                 mov     [esp+4Ch+var_1C], edi
.text:00404965                 cmp     byte ptr [edi], 0
.text:00404968                 jz      short loc_404998
.text:0040496A
.text:0040496A loc_40496A:                             ; CODE XREF: sub_403F80+A16↓j
.text:0040496A                 mov     ecx, [esp+4Ch+arg_4]
.text:0040496E                 cmp     [esp+4Ch+var_34], ecx
.text:00404972                 jnb     short loc_404987
.text:00404974                 mov     ebp, [esp+4Ch+var_1C]
.text:00404978                 mov     edi, [esp+4Ch+arg_0]
.text:0040497C                 mov     esi, [esp+4Ch+var_34]
.text:00404980                 movzx   ebx, byte ptr [ebp+0]
.text:00404984                 mov     [esi+edi], bl
.text:00404987
.text:00404987 loc_404987:                             ; CODE XREF: sub_403F80+9F2↑j
.text:00404987                 inc     [esp+4Ch+var_1C]
.text:0040498B                 inc     [esp+4Ch+var_34]
.text:0040498F                 mov     eax, [esp+4Ch+var_1C]
.text:00404993                 cmp     byte ptr [eax], 0
.text:00404996                 jnz     short loc_40496A
.text:00404998
.text:00404998 loc_404998:                             ; CODE XREF: sub_403F80+9E8↑j
.text:00404998                 mov     [esp+4Ch+var_21], 1
.text:0040499D                 mov     [esp+4Ch+var_1C], edx
.text:004049A1                 mov     [esp+4Ch+C], edx ; Str
.text:004049A4                 call    strlen
.text:004049A9                 mov     [esp+4Ch+var_20], eax
.text:004049AD                 jmp     def_403FBD      ; jumptable 00403FBD default case, cases 0,1
.text:004049B2 ; ---------------------------------------------------------------------------
.text:004049B2
.text:004049B2 loc_4049B2:                             ; CODE XREF: sub_403F80+9DF↑j
.text:004049B2                 cmp     [esp+4Ch+arg_10], 6
.text:004049B7                 jnz     short loc_404961
.text:004049B9                 mov     edx, offset asc_403F6C ; "\"'`"
.text:004049BE                 jmp     short loc_404961
.text:004049C0 ; ---------------------------------------------------------------------------
.text:004049C0
.text:004049C0 loc_4049C0:                             ; CODE XREF: sub_403F80+9C9↑j
.text:004049C0                 cmp     [esp+4Ch+arg_10], 6
.text:004049C5                 jnz     short loc_40494B
.text:004049C7                 mov     edi, offset asc_403F6C ; "\"'`"
.text:004049CC                 jmp     loc_40494B
.text:004049CC sub_403F80      endp
.text:004049CC
.text:004049D1 ; ---------------------------------------------------------------------------
.text:004049D1                 jmp     short loc_4049E0
.text:004049D1 ; ---------------------------------------------------------------------------
.text:004049D3                 align 10h
.text:004049E0
.text:004049E0 loc_4049E0:                             ; CODE XREF: .text:004049D1↑j
.text:004049E0                 sub     esp, 0Ch
.text:004049E3                 mov     [esp+4], ebx
.text:004049E7                 mov     [esp+8], esi
.text:004049EB                 call    _errno
.text:004049F0                 mov     esi, [eax]
.text:004049F2                 mov     dword ptr [esp], 24h ; '$'
.text:004049F9                 call    sub_4052D0
.text:004049FE                 mov     edx, [esp+10h]
.text:00404A02                 mov     ebx, eax
.text:00404A04                 test    edx, edx
.text:00404A06                 jz      short loc_404A51
.text:00404A08
.text:00404A08 loc_404A08:                             ; CODE XREF: .text:00404A56↓j
.text:00404A08                 mov     ecx, [edx]
.text:00404A0A                 mov     [ebx], ecx
.text:00404A0C                 mov     ecx, [edx+4]
.text:00404A0F                 mov     [ebx+4], ecx
.text:00404A12                 mov     ecx, [edx+8]
.text:00404A15                 mov     [ebx+8], ecx
.text:00404A18                 mov     ecx, [edx+0Ch]
.text:00404A1B                 mov     [ebx+0Ch], ecx
.text:00404A1E                 mov     ecx, [edx+10h]
.text:00404A21                 mov     [ebx+10h], ecx
.text:00404A24                 mov     ecx, [edx+14h]
.text:00404A27                 mov     [ebx+14h], ecx
.text:00404A2A                 mov     ecx, [edx+18h]
.text:00404A2D                 mov     [ebx+18h], ecx
.text:00404A30                 mov     ecx, [edx+1Ch]
.text:00404A33                 mov     [ebx+1Ch], ecx
.text:00404A36                 mov     ecx, [edx+20h]
.text:00404A39                 mov     [ebx+20h], ecx
.text:00404A3C                 call    _errno
.text:00404A41                 mov     [eax], esi
.text:00404A43                 mov     esi, [esp+8]
.text:00404A47                 mov     eax, ebx
.text:00404A49                 mov     ebx, [esp+4]
.text:00404A4D                 add     esp, 0Ch
.text:00404A50                 retn
.text:00404A51 ; ---------------------------------------------------------------------------
.text:00404A51
.text:00404A51 loc_404A51:                             ; CODE XREF: .text:00404A06↑j
.text:00404A51                 mov     edx, offset dword_40F140
.text:00404A56                 jmp     short loc_404A08
.text:00404A56 ; ---------------------------------------------------------------------------
.text:00404A58                 align 10h
.text:00404A60                 mov     eax, [esp+4]
.text:00404A64                 test    eax, eax
.text:00404A66                 jz      short loc_404A70
.text:00404A68
.text:00404A68 loc_404A68:                             ; CODE XREF: .text:00404A75↓j
.text:00404A68                 mov     eax, [eax]
.text:00404A6A                 retn
.text:00404A6A ; ---------------------------------------------------------------------------
.text:00404A6B                 align 10h
.text:00404A70
.text:00404A70 loc_404A70:                             ; CODE XREF: .text:00404A66↑j
.text:00404A70                 mov     eax, offset dword_40F140
.text:00404A75                 jmp     short loc_404A68
.text:00404A75 ; ---------------------------------------------------------------------------
.text:00404A77                 align 10h
.text:00404A80                 mov     edx, [esp+4]
.text:00404A84                 test    edx, edx
.text:00404A86                 jz      short loc_404A90
.text:00404A88
.text:00404A88 loc_404A88:                             ; CODE XREF: .text:00404A95↓j
.text:00404A88                 mov     ecx, [esp+8]
.text:00404A8C                 mov     [edx], ecx
.text:00404A8E                 retn
.text:00404A8E ; ---------------------------------------------------------------------------
.text:00404A8F                 align 10h
.text:00404A90
.text:00404A90 loc_404A90:                             ; CODE XREF: .text:00404A86↑j
.text:00404A90                 mov     edx, offset dword_40F140
.text:00404A95                 jmp     short loc_404A88
.text:00404A95 ; ---------------------------------------------------------------------------
.text:00404A97                 align 10h
.text:00404AA0                 sub     esp, 8
.text:00404AA3                 mov     eax, [esp+0Ch]
.text:00404AA7                 movzx   ecx, byte ptr [esp+10h]
.text:00404AAC                 mov     [esp], ebx
.text:00404AAF                 mov     ebx, [esp+14h]
.text:00404AB3                 mov     [esp+4], esi
.text:00404AB7                 mov     dl, cl
.text:00404AB9                 shr     dl, 5
.text:00404ABC                 movzx   edx, dl
.text:00404ABF                 shl     edx, 2
.text:00404AC2                 test    eax, eax
.text:00404AC4                 lea     esi, [edx+eax+4]
.text:00404AC8                 jz      short loc_404AF0
.text:00404ACA
.text:00404ACA loc_404ACA:                             ; CODE XREF: .text:00404AF6↓j
.text:00404ACA                 mov     edx, [esi]
.text:00404ACC                 and     ecx, 1Fh
.text:00404ACF                 and     ebx, 1
.text:00404AD2                 mov     eax, edx
.text:00404AD4                 shr     eax, cl
.text:00404AD6                 and     eax, 1
.text:00404AD9                 xor     ebx, eax
.text:00404ADB                 shl     ebx, cl
.text:00404ADD                 xor     edx, ebx
.text:00404ADF                 mov     [esi], edx
.text:00404AE1                 mov     ebx, [esp]
.text:00404AE4                 mov     esi, [esp+4]
.text:00404AE8                 add     esp, 8
.text:00404AEB                 retn
.text:00404AEB ; ---------------------------------------------------------------------------
.text:00404AEC                 align 10h
.text:00404AF0
.text:00404AF0 loc_404AF0:                             ; CODE XREF: .text:00404AC8↑j
.text:00404AF0                 lea     esi, dword_40F144[edx]
.text:00404AF6                 jmp     short loc_404ACA
.text:00404AF6 ; ---------------------------------------------------------------------------
.text:00404AF8                 align 10h
.text:00404B00                 sub     esp, 2Ch
.text:00404B03                 mov     [esp+24h], ebx
.text:00404B07                 mov     ebx, [esp+40h]
.text:00404B0B                 mov     [esp+28h], esi
.text:00404B0F                 test    ebx, ebx
.text:00404B11                 jz      short loc_404B60
.text:00404B13
.text:00404B13 loc_404B13:                             ; CODE XREF: .text:00404B65↓j
.text:00404B13                 call    _errno
.text:00404B18                 mov     esi, [eax]
.text:00404B1A                 mov     [esp+14h], ebx
.text:00404B1E                 mov     edx, [ebx]
.text:00404B20                 mov     ecx, [esp+38h]
.text:00404B24                 mov     ebx, [esp+3Ch]
.text:00404B28                 mov     [esp+10h], edx
.text:00404B2C                 mov     edx, [esp+34h]
.text:00404B30                 mov     [esp+0Ch], ebx
.text:00404B34                 mov     [esp+8], ecx
.text:00404B38                 mov     [esp+4], edx
.text:00404B3C                 mov     edx, [esp+30h]
.text:00404B40                 mov     [esp], edx
.text:00404B43                 call    sub_403F80
.text:00404B48                 mov     ebx, eax
.text:00404B4A                 call    _errno
.text:00404B4F                 mov     [eax], esi
.text:00404B51                 mov     esi, [esp+28h]
.text:00404B55                 mov     eax, ebx
.text:00404B57                 mov     ebx, [esp+24h]
.text:00404B5B                 add     esp, 2Ch
.text:00404B5E                 retn
.text:00404B5E ; ---------------------------------------------------------------------------
.text:00404B5F                 align 10h
.text:00404B60
.text:00404B60 loc_404B60:                             ; CODE XREF: .text:00404B11↑j
.text:00404B60                 mov     ebx, offset dword_40F140
.text:00404B65                 jmp     short loc_404B13
.text:00404B65 ; ---------------------------------------------------------------------------
.text:00404B67                 align 10h
.text:00404B70                 push    ebp
.text:00404B71                 push    edi
.text:00404B72                 push    esi
.text:00404B73                 push    ebx
.text:00404B74                 sub     esp, 2Ch
.text:00404B77                 mov     ebp, [esp+48h]
.text:00404B7B                 call    _errno
.text:00404B80                 mov     edx, [eax]
.text:00404B82                 test    ebp, ebp
.text:00404B84                 mov     ebx, ebp
.text:00404B86                 mov     [esp+28h], edx
.text:00404B8A                 jz      loc_404C40
.text:00404B90
.text:00404B90 loc_404B90:                             ; CODE XREF: .text:00404C45↓j
.text:00404B90                 call    _errno
.text:00404B95                 mov     edi, [eax]
.text:00404B97                 mov     esi, ebp
.text:00404B99                 mov     [esp+14h], ebx
.text:00404B9D                 mov     ecx, [ebx]
.text:00404B9F                 mov     dword ptr [esp], 0
.text:00404BA6                 mov     edx, [esp+44h]
.text:00404BAA                 mov     dword ptr [esp+4], 0
.text:00404BB2                 mov     eax, [esp+40h]
.text:00404BB6                 mov     [esp+10h], ecx
.text:00404BBA                 mov     [esp+0Ch], edx
.text:00404BBE                 mov     [esp+8], eax
.text:00404BC2                 call    sub_403F80
.text:00404BC7                 mov     ebx, eax
.text:00404BC9                 call    _errno
.text:00404BCE                 mov     [eax], edi
.text:00404BD0                 lea     edi, [ebx+1]
.text:00404BD3                 mov     [esp], edi
.text:00404BD6                 call    sub_4052D0
.text:00404BDB                 mov     [esp+24h], eax
.text:00404BDF                 test    ebp, ebp
.text:00404BE1                 jz      short loc_404C32
.text:00404BE3
.text:00404BE3 loc_404BE3:                             ; CODE XREF: .text:00404C37↓j
.text:00404BE3                 call    _errno
.text:00404BE8                 mov     ebp, [eax]
.text:00404BEA                 mov     [esp+14h], esi
.text:00404BEE                 mov     ecx, [esi]
.text:00404BF0                 mov     [esp+4], edi
.text:00404BF4                 mov     edx, [esp+44h]
.text:00404BF8                 mov     esi, [esp+24h]
.text:00404BFC                 mov     [esp+10h], ecx
.text:00404C00                 mov     eax, [esp+40h]
.text:00404C04                 mov     [esp+0Ch], edx
.text:00404C08                 mov     [esp], esi
.text:00404C0B                 mov     [esp+8], eax
.text:00404C0F                 call    sub_403F80
.text:00404C14                 call    _errno
.text:00404C19                 mov     [eax], ebp
.text:00404C1B                 call    _errno
.text:00404C20                 mov     ebx, [esp+28h]
.text:00404C24                 mov     [eax], ebx
.text:00404C26                 mov     eax, [esp+24h]
.text:00404C2A                 add     esp, 2Ch
.text:00404C2D                 pop     ebx
.text:00404C2E                 pop     esi
.text:00404C2F                 pop     edi
.text:00404C30                 pop     ebp
.text:00404C31                 retn
.text:00404C32 ; ---------------------------------------------------------------------------
.text:00404C32
.text:00404C32 loc_404C32:                             ; CODE XREF: .text:00404BE1↑j
.text:00404C32                 mov     esi, offset dword_40F140
.text:00404C37                 jmp     short loc_404BE3
.text:00404C37 ; ---------------------------------------------------------------------------
.text:00404C39                 align 10h
.text:00404C40
.text:00404C40 loc_404C40:                             ; CODE XREF: .text:00404B8A↑j
.text:00404C40                 mov     ebx, offset dword_40F140
.text:00404C45                 jmp     loc_404B90
.text:00404C45 ; ---------------------------------------------------------------------------
.text:00404C4A                 align 10h
.text:00404C50                 sub     esp, 1Ch
.text:00404C53                 mov     edx, [esp+24h]
.text:00404C57                 mov     dword ptr [esp+0Ch], offset dword_40F140
.text:00404C5F                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00404C67                 mov     [esp+4], edx
.text:00404C6B                 mov     edx, [esp+20h]
.text:00404C6F                 mov     [esp], edx
.text:00404C72                 call    sub_4050C0
.text:00404C77                 add     esp, 1Ch
.text:00404C7A                 retn
.text:00404C7A ; ---------------------------------------------------------------------------
.text:00404C7B                 align 10h
.text:00404C80                 sub     esp, 1Ch
.text:00404C83                 mov     edx, [esp+20h]
.text:00404C87                 mov     dword ptr [esp+0Ch], offset dword_40F140
.text:00404C8F                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00404C97                 mov     [esp+4], edx
.text:00404C9B                 mov     dword ptr [esp], 0
.text:00404CA2                 call    sub_4050C0
.text:00404CA7                 add     esp, 1Ch
.text:00404CAA                 retn
.text:00404CAA ; ---------------------------------------------------------------------------
.text:00404CAB                 align 10h
.text:00404CB0
.text:00404CB0 ; =============== S U B R O U T I N E =======================================
.text:00404CB0
.text:00404CB0
.text:00404CB0 ; int __cdecl sub_404CB0(int, int, char *)
.text:00404CB0 sub_404CB0      proc near               ; CODE XREF: .text:0040311A↑p
.text:00404CB0                                         ; sub_403130+1A↑p
.text:00404CB0
.text:00404CB0 var_BC          = dword ptr -0BCh
.text:00404CB0 var_B8          = dword ptr -0B8h
.text:00404CB0 var_B4          = dword ptr -0B4h
.text:00404CB0 var_B0          = dword ptr -0B0h
.text:00404CB0 var_AC          = dword ptr -0ACh
.text:00404CB0 var_A8          = dword ptr -0A8h
.text:00404CB0 var_A4          = dword ptr -0A4h
.text:00404CB0 var_A0          = dword ptr -0A0h
.text:00404CB0 var_9C          = dword ptr -9Ch
.text:00404CB0 var_98          = dword ptr -98h
.text:00404CB0 var_94          = dword ptr -94h
.text:00404CB0 var_90          = dword ptr -90h
.text:00404CB0 var_8C          = dword ptr -8Ch
.text:00404CB0 var_7C          = dword ptr -7Ch
.text:00404CB0 var_78          = dword ptr -78h
.text:00404CB0 var_74          = dword ptr -74h
.text:00404CB0 var_70          = dword ptr -70h
.text:00404CB0 var_6C          = dword ptr -6Ch
.text:00404CB0 var_68          = dword ptr -68h
.text:00404CB0 var_64          = dword ptr -64h
.text:00404CB0 var_60          = dword ptr -60h
.text:00404CB0 var_5C          = dword ptr -5Ch
.text:00404CB0 var_4C          = dword ptr -4Ch
.text:00404CB0 var_48          = dword ptr -48h
.text:00404CB0 var_44          = dword ptr -44h
.text:00404CB0 var_40          = dword ptr -40h
.text:00404CB0 var_3C          = dword ptr -3Ch
.text:00404CB0 var_38          = dword ptr -38h
.text:00404CB0 var_34          = dword ptr -34h
.text:00404CB0 var_30          = dword ptr -30h
.text:00404CB0 var_2C          = dword ptr -2Ch
.text:00404CB0 arg_0           = dword ptr  4
.text:00404CB0 arg_4           = dword ptr  8
.text:00404CB0 arg_8           = dword ptr  0Ch
.text:00404CB0
.text:00404CB0                 push    ebp
.text:00404CB1                 xor     eax, eax
.text:00404CB3                 mov     ecx, 8
.text:00404CB8                 push    edi
.text:00404CB9                 push    esi
.text:00404CBA                 push    ebx
.text:00404CBB                 sub     esp, 0ACh
.text:00404CC1                 mov     ebp, [esp+0BCh+arg_4]
.text:00404CC8                 cld
.text:00404CC9                 lea     edi, [esp+0BCh+var_A8]
.text:00404CCD                 mov     [esp+0BCh+var_AC], ebp
.text:00404CD1                 rep stosd
.text:00404CD3                 mov     eax, [esp+0BCh+var_8C]
.text:00404CD7                 mov     edi, [esp+0BCh+var_AC]
.text:00404CDB                 mov     esi, [esp+0BCh+var_A8]
.text:00404CDF                 mov     [esp+0BCh+var_5C], eax
.text:00404CE3                 mov     ebp, [esp+0BCh+var_A4]
.text:00404CE7                 mov     eax, [esp+0BCh+var_AC]
.text:00404CEB                 mov     [esp+0BCh+var_7C], edi
.text:00404CEF                 mov     ecx, [esp+0BCh+var_94]
.text:00404CF3                 mov     edi, [esp+0BCh+var_A0]
.text:00404CF7                 mov     [esp+0BCh+var_78], esi
.text:00404CFB                 mov     edx, [esp+0BCh+var_90]
.text:00404CFF                 mov     esi, [esp+0BCh+var_9C]
.text:00404D03                 mov     [esp+0BCh+var_4C], eax
.text:00404D07                 mov     ebx, [esp+0BCh+var_98]
.text:00404D0B                 mov     eax, [esp+0BCh+var_A8]
.text:00404D0F                 mov     [esp+0BCh+var_74], ebp
.text:00404D13                 mov     [esp+0BCh+var_70], edi
.text:00404D17                 mov     [esp+0BCh+var_6C], esi
.text:00404D1B                 mov     [esp+0BCh+var_68], ebx
.text:00404D1F                 mov     [esp+0BCh+var_64], ecx
.text:00404D23                 mov     [esp+0BCh+var_60], edx
.text:00404D27                 mov     [esp+0BCh+var_48], eax
.text:00404D2B                 mov     [esp+0BCh+var_44], ebp
.text:00404D2F                 mov     [esp+0BCh+var_40], edi
.text:00404D33                 mov     [esp+0BCh+var_3C], esi
.text:00404D3A                 mov     [esp+0BCh+var_38], ebx
.text:00404D41                 mov     ebx, [esp+0BCh+var_8C]
.text:00404D45                 mov     [esp+0BCh+var_30], edx
.text:00404D4C                 mov     edx, [esp+0BCh+arg_8]
.text:00404D53                 mov     [esp+0BCh+var_34], ecx
.text:00404D5A                 lea     ecx, [esp+0BCh+var_4C]
.text:00404D5E                 mov     [esp+0BCh+var_B8], edx ; char *
.text:00404D62                 mov     edx, [esp+0BCh+arg_0]
.text:00404D69                 mov     [esp+0BCh+var_2C], ebx
.text:00404D70                 mov     [esp+0BCh+var_B0], ecx ; int
.text:00404D74                 mov     [esp+0BCh+var_B4], 0FFFFFFFFh ; int
.text:00404D7C                 mov     [esp+0BCh+var_BC], edx ; int
.text:00404D7F                 call    sub_4050C0
.text:00404D84                 add     esp, 0ACh
.text:00404D8A                 pop     ebx
.text:00404D8B                 pop     esi
.text:00404D8C                 pop     edi
.text:00404D8D                 pop     ebp
.text:00404D8E                 retn
.text:00404D8E sub_404CB0      endp
.text:00404D8E
.text:00404D8E ; ---------------------------------------------------------------------------
.text:00404D8F                 align 10h
.text:00404D90                 push    ebp
.text:00404D91                 xor     eax, eax
.text:00404D93                 mov     ecx, 8
.text:00404D98                 push    edi
.text:00404D99                 push    esi
.text:00404D9A                 push    ebx
.text:00404D9B                 sub     esp, 0ACh
.text:00404DA1                 mov     edx, [esp+0C4h]
.text:00404DA8                 cld
.text:00404DA9                 lea     edi, [esp+14h]
.text:00404DAD                 mov     [esp+10h], edx
.text:00404DB1                 rep stosd
.text:00404DB3                 mov     eax, [esp+30h]
.text:00404DB7                 mov     ebp, [esp+10h]
.text:00404DBB                 mov     edi, [esp+14h]
.text:00404DBF                 mov     [esp+60h], eax
.text:00404DC3                 mov     esi, [esp+20h]
.text:00404DC7                 mov     eax, [esp+10h]
.text:00404DCB                 mov     [esp+40h], ebp
.text:00404DCF                 mov     ecx, [esp+28h]
.text:00404DD3                 mov     ebp, [esp+18h]
.text:00404DD7                 mov     [esp+44h], edi
.text:00404DDB                 mov     edx, [esp+2Ch]
.text:00404DDF                 mov     edi, [esp+1Ch]
.text:00404DE3                 mov     [esp+70h], eax
.text:00404DE7                 mov     ebx, [esp+24h]
.text:00404DEB                 mov     eax, [esp+14h]
.text:00404DEF                 mov     [esp+48h], ebp
.text:00404DF3                 mov     [esp+4Ch], edi
.text:00404DF7                 mov     [esp+50h], esi
.text:00404DFB                 mov     [esp+54h], ebx
.text:00404DFF                 mov     [esp+58h], ecx
.text:00404E03                 mov     [esp+5Ch], edx
.text:00404E07                 mov     [esp+74h], eax
.text:00404E0B                 mov     [esp+78h], ebp
.text:00404E0F                 mov     [esp+7Ch], edi
.text:00404E13                 mov     [esp+80h], esi
.text:00404E1A                 mov     [esp+84h], ebx
.text:00404E21                 mov     esi, [esp+30h]
.text:00404E25                 lea     ebx, [esp+70h]
.text:00404E29                 mov     [esp+8Ch], edx
.text:00404E30                 mov     edx, [esp+0C8h]
.text:00404E37                 mov     [esp+88h], ecx
.text:00404E3E                 mov     ecx, [esp+0CCh]
.text:00404E45                 mov     [esp+4], edx
.text:00404E49                 mov     edx, [esp+0C0h]
.text:00404E50                 mov     [esp+90h], esi
.text:00404E57                 mov     [esp+0Ch], ebx
.text:00404E5B                 mov     [esp+8], ecx
.text:00404E5F                 mov     [esp], edx
.text:00404E62                 call    sub_4050C0
.text:00404E67                 add     esp, 0ACh
.text:00404E6D                 pop     ebx
.text:00404E6E                 pop     esi
.text:00404E6F                 pop     edi
.text:00404E70                 pop     ebp
.text:00404E71                 retn
.text:00404E71 ; ---------------------------------------------------------------------------
.text:00404E72                 align 10h
.text:00404E80                 push    ebp
.text:00404E81                 xor     eax, eax
.text:00404E83                 mov     ecx, 8
.text:00404E88                 push    edi
.text:00404E89                 push    esi
.text:00404E8A                 push    ebx
.text:00404E8B                 sub     esp, 0ACh
.text:00404E91                 mov     edi, [esp+0C0h]
.text:00404E98                 cld
.text:00404E99                 mov     [esp+10h], edi
.text:00404E9D                 lea     edi, [esp+14h]
.text:00404EA1                 rep stosd
.text:00404EA3                 mov     eax, [esp+30h]
.text:00404EA7                 mov     esi, [esp+10h]
.text:00404EAB                 mov     ebx, [esp+14h]
.text:00404EAF                 mov     [esp+60h], eax
.text:00404EB3                 mov     ebp, [esp+18h]
.text:00404EB7                 mov     eax, [esp+10h]
.text:00404EBB                 mov     [esp+40h], esi
.text:00404EBF                 mov     edi, [esp+1Ch]
.text:00404EC3                 mov     esi, [esp+20h]
.text:00404EC7                 mov     [esp+44h], ebx
.text:00404ECB                 mov     ecx, [esp+28h]
.text:00404ECF                 mov     edx, [esp+2Ch]
.text:00404ED3                 mov     [esp+70h], eax
.text:00404ED7                 mov     ebx, [esp+24h]
.text:00404EDB                 mov     eax, [esp+14h]
.text:00404EDF                 mov     [esp+48h], ebp
.text:00404EE3                 mov     [esp+4Ch], edi
.text:00404EE7                 mov     [esp+50h], esi
.text:00404EEB                 mov     [esp+54h], ebx
.text:00404EEF                 mov     [esp+58h], ecx
.text:00404EF3                 mov     [esp+5Ch], edx
.text:00404EF7                 mov     [esp+74h], eax
.text:00404EFB                 mov     [esp+78h], ebp
.text:00404EFF                 mov     [esp+7Ch], edi
.text:00404F03                 mov     [esp+80h], esi
.text:00404F0A                 mov     [esp+84h], ebx
.text:00404F11                 mov     [esp+8Ch], edx
.text:00404F18                 lea     edx, [esp+70h]
.text:00404F1C                 mov     [esp+88h], ecx
.text:00404F23                 mov     ecx, [esp+30h]
.text:00404F27                 mov     [esp+0Ch], edx
.text:00404F2B                 mov     edx, [esp+0C4h]
.text:00404F32                 mov     [esp+90h], ecx
.text:00404F39                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00404F41                 mov     [esp+4], edx
.text:00404F45                 mov     dword ptr [esp], 0
.text:00404F4C                 call    sub_4050C0
.text:00404F51                 add     esp, 0ACh
.text:00404F57                 pop     ebx
.text:00404F58                 pop     esi
.text:00404F59                 pop     edi
.text:00404F5A                 pop     ebp
.text:00404F5B                 retn
.text:00404F5B ; ---------------------------------------------------------------------------
.text:00404F5C                 align 10h
.text:00404F60                 push    edi
.text:00404F61                 push    esi
.text:00404F62                 push    ebx
.text:00404F63                 sub     esp, 40h
.text:00404F66                 mov     edx, ds:dword_40F14C
.text:00404F6C                 mov     ebx, ds:dword_40F140
.text:00404F72                 mov     esi, ds:dword_40F148
.text:00404F78                 mov     edi, ds:dword_40F144
.text:00404F7E                 mov     [esp+1Ch], edx
.text:00404F82                 mov     ecx, ds:dword_40F150
.text:00404F88                 mov     edx, ds:dword_40F160
.text:00404F8E                 mov     [esp+10h], ebx
.text:00404F92                 mov     ebx, ds:dword_40F154
.text:00404F98                 mov     [esp+30h], edx
.text:00404F9C                 movzx   edx, byte ptr [esp+54h]
.text:00404FA1                 mov     [esp+18h], esi
.text:00404FA5                 mov     esi, ds:dword_40F15C
.text:00404FAB                 mov     [esp+14h], edi
.text:00404FAF                 mov     edi, ds:dword_40F158
.text:00404FB5                 mov     [esp+20h], ecx
.text:00404FB9                 mov     cl, dl
.text:00404FBB                 shr     cl, 5
.text:00404FBE                 mov     [esp+24h], ebx
.text:00404FC2                 movzx   ebx, cl
.text:00404FC5                 mov     [esp+2Ch], esi
.text:00404FC9                 lea     esi, [esp+10h]
.text:00404FCD                 mov     [esp+28h], edi
.text:00404FD1                 lea     edi, [esi+ebx*4]
.text:00404FD4                 mov     ebx, edx
.text:00404FD6                 mov     edx, [edi+4]
.text:00404FD9                 and     ebx, 1Fh
.text:00404FDC                 mov     cl, bl
.text:00404FDE                 mov     eax, edx
.text:00404FE0                 shr     eax, cl
.text:00404FE2                 and     eax, 1
.text:00404FE5                 xor     eax, 1
.text:00404FE8                 shl     eax, cl
.text:00404FEA                 xor     edx, eax
.text:00404FEC                 mov     [edi+4], edx
.text:00404FEF                 mov     edx, [esp+50h]
.text:00404FF3                 mov     [esp+0Ch], esi
.text:00404FF7                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00404FFF                 mov     [esp+4], edx
.text:00405003                 mov     dword ptr [esp], 0
.text:0040500A                 call    sub_4050C0
.text:0040500F                 add     esp, 40h
.text:00405012                 pop     ebx
.text:00405013                 pop     esi
.text:00405014                 pop     edi
.text:00405015                 retn
.text:00405015 ; ---------------------------------------------------------------------------
.text:00405016                 align 10h
.text:00405020
.text:00405020 ; =============== S U B R O U T I N E =======================================
.text:00405020
.text:00405020
.text:00405020 ; int __cdecl sub_405020(char *)
.text:00405020 sub_405020      proc near               ; CODE XREF: sub_403830+64↑p
.text:00405020
.text:00405020 var_4C          = dword ptr -4Ch
.text:00405020 var_48          = dword ptr -48h
.text:00405020 var_44          = dword ptr -44h
.text:00405020 var_40          = dword ptr -40h
.text:00405020 var_3C          = dword ptr -3Ch
.text:00405020 var_38          = dword ptr -38h
.text:00405020 var_34          = dword ptr -34h
.text:00405020 var_30          = dword ptr -30h
.text:00405020 var_2C          = dword ptr -2Ch
.text:00405020 var_28          = dword ptr -28h
.text:00405020 var_24          = dword ptr -24h
.text:00405020 var_20          = dword ptr -20h
.text:00405020 var_1C          = dword ptr -1Ch
.text:00405020 arg_0           = dword ptr  4
.text:00405020
.text:00405020                 sub     esp, 4Ch
.text:00405023                 mov     ecx, ds:dword_40F140
.text:00405029                 mov     [esp+4Ch+var_44], 0FFFFFFFFh ; int
.text:00405031                 mov     edx, ds:dword_40F144
.text:00405037                 mov     [esp+4Ch+var_4C], 0 ; int
.text:0040503E                 mov     [esp+4Ch+var_3C], ecx
.text:00405042                 mov     ecx, ds:dword_40F14C
.text:00405048                 mov     [esp+4Ch+var_38], edx
.text:0040504C                 mov     edx, ds:dword_40F148
.text:00405052                 mov     [esp+4Ch+var_30], ecx
.text:00405056                 mov     ecx, ds:dword_40F150
.text:0040505C                 mov     eax, edx
.text:0040505E                 shr     eax, 1Ah
.text:00405061                 and     eax, 1
.text:00405064                 xor     eax, 1
.text:00405067                 mov     [esp+4Ch+var_2C], ecx
.text:0040506B                 shl     eax, 1Ah
.text:0040506E                 mov     ecx, ds:dword_40F154
.text:00405074                 xor     edx, eax
.text:00405076                 mov     [esp+4Ch+var_34], edx
.text:0040507A                 mov     edx, [esp+4Ch+arg_0]
.text:0040507E                 mov     [esp+4Ch+var_28], ecx
.text:00405082                 mov     ecx, ds:dword_40F158
.text:00405088                 mov     [esp+4Ch+var_48], edx ; char *
.text:0040508C                 mov     [esp+4Ch+var_24], ecx
.text:00405090                 mov     ecx, ds:dword_40F15C
.text:00405096                 mov     [esp+4Ch+var_20], ecx
.text:0040509A                 mov     ecx, ds:dword_40F160
.text:004050A0                 mov     [esp+4Ch+var_1C], ecx
.text:004050A4                 lea     ecx, [esp+4Ch+var_3C]
.text:004050A8                 mov     [esp+4Ch+var_40], ecx ; int
.text:004050AC                 call    sub_4050C0
.text:004050B1                 add     esp, 4Ch
.text:004050B4                 retn
.text:004050B4 sub_405020      endp
.text:004050B4
.text:004050B4 ; ---------------------------------------------------------------------------
.text:004050B5                 align 10h
.text:004050C0
.text:004050C0 ; =============== S U B R O U T I N E =======================================
.text:004050C0
.text:004050C0
.text:004050C0 ; int __cdecl sub_4050C0(int, char *, int, int)
.text:004050C0 sub_4050C0      proc near               ; CODE XREF: .text:00404C72↑p
.text:004050C0                                         ; .text:00404CA2↑p ...
.text:004050C0
.text:004050C0 Block           = dword ptr -2Ch
.text:004050C0 var_28          = dword ptr -28h
.text:004050C0 Str             = dword ptr -24h
.text:004050C0 var_20          = dword ptr -20h
.text:004050C0 var_1C          = dword ptr -1Ch
.text:004050C0 var_18          = dword ptr -18h
.text:004050C0 var_14          = dword ptr -14h
.text:004050C0 arg_0           = dword ptr  4
.text:004050C0 arg_4           = dword ptr  8
.text:004050C0 arg_8           = dword ptr  0Ch
.text:004050C0 arg_C           = dword ptr  10h
.text:004050C0
.text:004050C0                 push    ebp
.text:004050C1                 push    edi
.text:004050C2                 push    esi
.text:004050C3                 push    ebx
.text:004050C4                 sub     esp, 1Ch
.text:004050C7                 call    _errno
.text:004050CC                 mov     edx, [eax]
.text:004050CE                 mov     eax, [esp+2Ch+arg_0]
.text:004050D2                 mov     [esp+2Ch+var_14], edx
.text:004050D6                 test    eax, eax
.text:004050D8                 js      loc_40527A
.text:004050DE                 mov     eax, [esp+2Ch+arg_0]
.text:004050E2                 cmp     dword_40E030, eax
.text:004050E8                 ja      short loc_405160
.text:004050EA                 mov     esi, eax
.text:004050EC                 inc     esi
.text:004050ED                 cmp     esi, 1FFFFFFFh
.text:004050F3                 ja      loc_40527F
.text:004050F9                 mov     ebx, off_40E03C
.text:004050FF                 cmp     ebx, offset dword_40E034
.text:00405105                 jz      loc_405251
.text:0040510B
.text:0040510B loc_40510B:                             ; CODE XREF: sub_4050C0+1B5↓j
.text:0040510B                 mov     [esp+2Ch+Block], ebx ; void *
.text:0040510E                 lea     ecx, ds:0[esi*8]
.text:00405115                 mov     ebp, esi
.text:00405117                 mov     [esp+2Ch+var_28], ecx ; size_t
.text:0040511B                 call    sub_405360
.text:00405120                 mov     off_40E03C, eax
.text:00405125                 mov     ebx, dword_40E030
.text:0040512B                 sub     ebp, ebx
.text:0040512D                 lea     edi, [eax+ebx*8]
.text:00405130                 lea     eax, ds:0[ebp*8]
.text:00405137                 cmp     eax, 7
.text:0040513A                 jbe     short loc_405150
.text:0040513C                 test    edi, 4
.text:00405142                 jz      short loc_405150
.text:00405144                 mov     dword ptr [edi], 0
.text:0040514A                 sub     eax, 4
.text:0040514D                 add     edi, 4
.text:00405150
.text:00405150 loc_405150:                             ; CODE XREF: sub_4050C0+7A↑j
.text:00405150                                         ; sub_4050C0+82↑j
.text:00405150                 cld
.text:00405151                 mov     ecx, eax
.text:00405153                 shr     ecx, 2
.text:00405156                 xor     eax, eax
.text:00405158                 rep stosd
.text:0040515A                 mov     dword_40E030, esi
.text:00405160
.text:00405160 loc_405160:                             ; CODE XREF: sub_4050C0+28↑j
.text:00405160                 mov     esi, off_40E03C
.text:00405166                 mov     eax, [esp+2Ch+arg_0]
.text:0040516A                 mov     ebp, [esi+eax*8]
.text:0040516D                 mov     edi, [esi+eax*8+4]
.text:00405171                 mov     esi, [esp+2Ch+arg_C]
.text:00405175                 test    esi, esi
.text:00405177                 jz      loc_405247
.text:0040517D
.text:0040517D loc_40517D:                             ; CODE XREF: sub_4050C0+18C↓j
.text:0040517D                 call    _errno
.text:00405182                 mov     ebx, [eax]
.text:00405184                 mov     [esp+2Ch+var_18], esi ; int
.text:00405188                 mov     ecx, [esi]
.text:0040518A                 mov     [esp+2Ch+Block], edi ; int
.text:0040518D                 mov     edx, [esp+2Ch+arg_8]
.text:00405191                 mov     [esp+2Ch+var_28], ebp ; int
.text:00405195                 mov     [esp+2Ch+var_1C], ecx ; int
.text:00405199                 mov     ecx, [esp+2Ch+arg_4]
.text:0040519D                 mov     [esp+2Ch+var_20], edx ; int
.text:004051A1                 mov     [esp+2Ch+Str], ecx ; Str
.text:004051A5                 call    sub_403F80
.text:004051AA                 mov     esi, eax
.text:004051AC                 call    _errno
.text:004051B1                 mov     [eax], ebx
.text:004051B3                 cmp     ebp, esi
.text:004051B5                 ja      short loc_40522B
.text:004051B7                 lea     ebp, [esi+1]
.text:004051BA                 mov     ebx, off_40E03C
.text:004051C0                 cmp     edi, offset unk_40F040
.text:004051C6                 mov     esi, [esp+2Ch+arg_0]
.text:004051CA                 mov     [ebx+esi*8], ebp
.text:004051CD                 jz      short loc_4051DD
.text:004051CF                 mov     [esp+2Ch+Block], edi ; Block
.text:004051D2                 call    free
.text:004051D7                 mov     ebx, off_40E03C
.text:004051DD
.text:004051DD loc_4051DD:                             ; CODE XREF: sub_4050C0+10D↑j
.text:004051DD                 mov     [esp+2Ch+Block], ebp ; size_t
.text:004051E0                 call    sub_4052D0
.text:004051E5                 mov     esi, [esp+2Ch+arg_C]
.text:004051E9                 mov     edi, eax
.text:004051EB                 mov     eax, [esp+2Ch+arg_0]
.text:004051EF                 test    esi, esi
.text:004051F1                 mov     [ebx+eax*8+4], edi
.text:004051F5                 jz      short loc_405240
.text:004051F7
.text:004051F7 loc_4051F7:                             ; CODE XREF: sub_4050C0+185↓j
.text:004051F7                 call    _errno
.text:004051FC                 mov     ebx, [eax]
.text:004051FE                 mov     [esp+2Ch+var_18], esi ; int
.text:00405202                 mov     ecx, [esi]
.text:00405204                 mov     [esp+2Ch+Block], edi ; int
.text:00405207                 mov     edx, [esp+2Ch+arg_8]
.text:0040520B                 mov     [esp+2Ch+var_28], ebp ; int
.text:0040520F                 mov     [esp+2Ch+var_1C], ecx ; int
.text:00405213                 mov     ecx, [esp+2Ch+arg_4]
.text:00405217                 mov     [esp+2Ch+var_20], edx ; int
.text:0040521B                 mov     [esp+2Ch+Str], ecx ; Str
.text:0040521F                 call    sub_403F80
.text:00405224                 call    _errno
.text:00405229                 mov     [eax], ebx
.text:0040522B
.text:0040522B loc_40522B:                             ; CODE XREF: sub_4050C0+F5↑j
.text:0040522B                 call    _errno
.text:00405230                 mov     ebp, [esp+2Ch+var_14]
.text:00405234                 mov     [eax], ebp
.text:00405236                 add     esp, 1Ch
.text:00405239                 mov     eax, edi
.text:0040523B                 pop     ebx
.text:0040523C                 pop     esi
.text:0040523D                 pop     edi
.text:0040523E                 pop     ebp
.text:0040523F                 retn
.text:00405240 ; ---------------------------------------------------------------------------
.text:00405240
.text:00405240 loc_405240:                             ; CODE XREF: sub_4050C0+135↑j
.text:00405240                 mov     esi, offset dword_40F140
.text:00405245                 jmp     short loc_4051F7
.text:00405247 ; ---------------------------------------------------------------------------
.text:00405247
.text:00405247 loc_405247:                             ; CODE XREF: sub_4050C0+B7↑j
.text:00405247                 mov     esi, offset dword_40F140
.text:0040524C                 jmp     loc_40517D
.text:00405251 ; ---------------------------------------------------------------------------
.text:00405251
.text:00405251 loc_405251:                             ; CODE XREF: sub_4050C0+45↑j
.text:00405251                 mov     [esp+2Ch+Block], 8 ; size_t
.text:00405258                 call    sub_4052D0
.text:0040525D                 mov     off_40E03C, eax
.text:00405262                 mov     edi, dword_40E034
.text:00405268                 mov     ebx, eax
.text:0040526A                 mov     ecx, off_40E038
.text:00405270                 mov     [eax], edi
.text:00405272                 mov     [eax+4], ecx
.text:00405275                 jmp     loc_40510B
.text:0040527A ; ---------------------------------------------------------------------------
.text:0040527A
.text:0040527A loc_40527A:                             ; CODE XREF: sub_4050C0+18↑j
.text:0040527A                 call    abort
.text:0040527F ; ---------------------------------------------------------------------------
.text:0040527F
.text:0040527F loc_40527F:                             ; CODE XREF: sub_4050C0+33↑j
.text:0040527F                 call    sub_403180
.text:0040527F sub_4050C0      endp
.text:0040527F
.text:0040527F ; ---------------------------------------------------------------------------
.text:00405284                 align 10h
.text:00405290
.text:00405290 ; =============== S U B R O U T I N E =======================================
.text:00405290
.text:00405290
.text:00405290 sub_405290      proc near
.text:00405290
.text:00405290 Size            = dword ptr -0Ch
.text:00405290 var_4           = dword ptr -4
.text:00405290 arg_0           = dword ptr  4
.text:00405290 arg_4           = dword ptr  8
.text:00405290
.text:00405290                 sub     esp, 0Ch
.text:00405293                 xor     edx, edx
.text:00405295                 mov     ecx, [esp+0Ch+arg_4]
.text:00405299                 mov     [esp+0Ch+var_4], ebx
.text:0040529D                 mov     eax, 0FFFFFFFFh
.text:004052A2                 mov     ebx, [esp+0Ch+arg_0]
.text:004052A6                 div     ecx
.text:004052A8                 cmp     eax, ebx
.text:004052AA                 jb      short loc_4052C9
.text:004052AC                 mov     edx, ebx
.text:004052AE                 imul    edx, ecx
.text:004052B1                 mov     [esp+0Ch+Size], edx ; Size
.text:004052B4                 call    malloc
.text:004052B9                 test    eax, eax
.text:004052BB                 jz      short loc_4052C5
.text:004052BD
.text:004052BD loc_4052BD:                             ; CODE XREF: sub_405290+37↓j
.text:004052BD                 mov     ebx, [esp+0Ch+var_4]
.text:004052C1                 add     esp, 0Ch
.text:004052C4                 retn
.text:004052C5 ; ---------------------------------------------------------------------------
.text:004052C5
.text:004052C5 loc_4052C5:                             ; CODE XREF: sub_405290+2B↑j
.text:004052C5                 test    ebx, ebx
.text:004052C7                 jz      short loc_4052BD
.text:004052C9
.text:004052C9 loc_4052C9:                             ; CODE XREF: sub_405290+1A↑j
.text:004052C9                 call    sub_403180
.text:004052C9 sub_405290      endp
.text:004052C9
.text:004052C9 ; ---------------------------------------------------------------------------
.text:004052CE                 align 10h
.text:004052D0
.text:004052D0 ; =============== S U B R O U T I N E =======================================
.text:004052D0
.text:004052D0
.text:004052D0 ; int __cdecl sub_4052D0(size_t)
.text:004052D0 sub_4052D0      proc near               ; CODE XREF: .text:004049F9↑p
.text:004052D0                                         ; .text:00404BD6↑p ...
.text:004052D0
.text:004052D0 Size            = dword ptr -0Ch
.text:004052D0 var_4           = dword ptr -4
.text:004052D0 arg_0           = dword ptr  4
.text:004052D0
.text:004052D0                 sub     esp, 0Ch
.text:004052D3                 mov     [esp+0Ch+var_4], ebx
.text:004052D7                 mov     ebx, [esp+0Ch+arg_0]
.text:004052DB                 mov     [esp+0Ch+Size], ebx ; Size
.text:004052DE                 call    malloc
.text:004052E3                 test    eax, eax
.text:004052E5                 jz      short loc_4052F0
.text:004052E7
.text:004052E7 loc_4052E7:                             ; CODE XREF: sub_4052D0+22↓j
.text:004052E7                 mov     ebx, [esp+0Ch+var_4]
.text:004052EB                 add     esp, 0Ch
.text:004052EE                 retn
.text:004052EE ; ---------------------------------------------------------------------------
.text:004052EF                 align 10h
.text:004052F0
.text:004052F0 loc_4052F0:                             ; CODE XREF: sub_4052D0+15↑j
.text:004052F0                 test    ebx, ebx
.text:004052F2                 jz      short loc_4052E7
.text:004052F4                 call    sub_403180
.text:004052F4 sub_4052D0      endp
.text:004052F4
.text:004052F4 ; ---------------------------------------------------------------------------
.text:004052F9                 align 10h
.text:00405300                 sub     esp, 1Ch
.text:00405303                 xor     edx, edx
.text:00405305                 mov     eax, 0FFFFFFFFh
.text:0040530A                 mov     [esp+14h], ebx
.text:0040530E                 mov     ecx, [esp+20h]
.text:00405312                 mov     ebx, [esp+28h]
.text:00405316                 mov     [esp+18h], esi
.text:0040531A                 mov     esi, [esp+24h]
.text:0040531E                 div     ebx
.text:00405320                 cmp     eax, esi
.text:00405322                 jb      short loc_405354
.text:00405324                 mov     [esp], ecx
.text:00405327                 mov     edx, esi
.text:00405329                 imul    edx, ebx
.text:0040532C                 mov     [esp+4], edx
.text:00405330                 call    realloc
.text:00405335                 test    eax, eax
.text:00405337                 mov     ecx, eax
.text:00405339                 jz      short loc_405350
.text:0040533B
.text:0040533B loc_40533B:                             ; CODE XREF: .text:00405352↓j
.text:0040533B                 mov     ebx, [esp+14h]
.text:0040533F                 mov     eax, ecx
.text:00405341                 mov     esi, [esp+18h]
.text:00405345                 add     esp, 1Ch
.text:00405348                 retn
.text:00405348 ; ---------------------------------------------------------------------------
.text:00405349                 align 10h
.text:00405350
.text:00405350 loc_405350:                             ; CODE XREF: .text:00405339↑j
.text:00405350                 test    esi, esi
.text:00405352                 jz      short loc_40533B
.text:00405354
.text:00405354 loc_405354:                             ; CODE XREF: .text:00405322↑j
.text:00405354                 call    sub_403180
.text:00405354 ; ---------------------------------------------------------------------------
.text:00405359                 align 10h
.text:00405360
.text:00405360 ; =============== S U B R O U T I N E =======================================
.text:00405360
.text:00405360
.text:00405360 ; int __cdecl sub_405360(void *, size_t)
.text:00405360 sub_405360      proc near               ; CODE XREF: sub_4050C0+5B↑p
.text:00405360
.text:00405360 Block           = dword ptr -0Ch
.text:00405360 Size            = dword ptr -8
.text:00405360 var_4           = dword ptr -4
.text:00405360 arg_0           = dword ptr  4
.text:00405360 arg_4           = dword ptr  8
.text:00405360
.text:00405360                 sub     esp, 0Ch
.text:00405363                 mov     edx, [esp+0Ch+arg_0]
.text:00405367                 mov     [esp+0Ch+var_4], ebx
.text:0040536B                 mov     ebx, [esp+0Ch+arg_4]
.text:0040536F                 mov     [esp+0Ch+Block], edx ; Block
.text:00405372                 mov     [esp+0Ch+Size], ebx ; Size
.text:00405376                 call    realloc
.text:0040537B                 test    eax, eax
.text:0040537D                 jz      short loc_405387
.text:0040537F
.text:0040537F loc_40537F:                             ; CODE XREF: sub_405360+29↓j
.text:0040537F                 mov     ebx, [esp+0Ch+var_4]
.text:00405383                 add     esp, 0Ch
.text:00405386                 retn
.text:00405387 ; ---------------------------------------------------------------------------
.text:00405387
.text:00405387 loc_405387:                             ; CODE XREF: sub_405360+1D↑j
.text:00405387                 test    ebx, ebx
.text:00405389                 jz      short loc_40537F
.text:0040538B                 call    sub_403180
.text:0040538B sub_405360      endp
.text:0040538B
.text:00405390 ; ---------------------------------------------------------------------------
.text:00405390                 jmp     sub_4054E0
.text:00405390 ; ---------------------------------------------------------------------------
.text:00405395                 align 10h
.text:004053A0                 sub     esp, 0Ch
.text:004053A3                 mov     edx, [esp+14h]
.text:004053A7                 mov     dword ptr [esp+8], 1
.text:004053AF                 mov     [esp+4], edx
.text:004053B3                 mov     edx, [esp+10h]
.text:004053B7                 mov     [esp], edx
.text:004053BA                 call    sub_4054E0
.text:004053BF                 add     esp, 0Ch
.text:004053C2                 retn
.text:004053C2 ; ---------------------------------------------------------------------------
.text:004053C3                 align 10h
.text:004053D0                 sub     esp, 1Ch
.text:004053D3                 mov     [esp+18h], ebx
.text:004053D7                 mov     ebx, [esp+20h]
.text:004053DB                 mov     [esp], ebx
.text:004053DE                 call    malloc
.text:004053E3                 test    eax, eax
.text:004053E5                 jz      short loc_405403
.text:004053E7
.text:004053E7 loc_4053E7:                             ; CODE XREF: .text:00405405↓j
.text:004053E7                 mov     [esp+8], ebx
.text:004053EB                 mov     dword ptr [esp+4], 0
.text:004053F3                 mov     [esp], eax
.text:004053F6                 call    memset
.text:004053FB                 mov     ebx, [esp+18h]
.text:004053FF                 add     esp, 1Ch
.text:00405402                 retn
.text:00405403 ; ---------------------------------------------------------------------------
.text:00405403
.text:00405403 loc_405403:                             ; CODE XREF: .text:004053E5↑j
.text:00405403                 test    ebx, ebx
.text:00405405                 jz      short loc_4053E7
.text:00405407                 call    sub_403180
.text:00405407 ; ---------------------------------------------------------------------------
.text:0040540C                 align 10h
.text:00405410                 sub     esp, 0Ch
.text:00405413                 xor     edx, edx
.text:00405415                 mov     ecx, [esp+14h]
.text:00405419                 mov     [esp+8], ebx
.text:0040541D                 mov     eax, 0FFFFFFFFh
.text:00405422                 mov     ebx, [esp+10h]
.text:00405426                 div     ecx
.text:00405428                 cmp     eax, ebx
.text:0040542A                 jb      short loc_405448
.text:0040542C                 mov     [esp+4], ecx
.text:00405430                 mov     [esp], ebx
.text:00405433                 call    calloc
.text:00405438                 test    eax, eax
.text:0040543A                 jz      short loc_405444
.text:0040543C
.text:0040543C loc_40543C:                             ; CODE XREF: .text:00405446↓j
.text:0040543C                 mov     ebx, [esp+8]
.text:00405440                 add     esp, 0Ch
.text:00405443                 retn
.text:00405444 ; ---------------------------------------------------------------------------
.text:00405444
.text:00405444 loc_405444:                             ; CODE XREF: .text:0040543A↑j
.text:00405444                 test    ebx, ebx
.text:00405446                 jz      short loc_40543C
.text:00405448
.text:00405448 loc_405448:                             ; CODE XREF: .text:0040542A↑j
.text:00405448                 call    sub_403180
.text:00405448 ; ---------------------------------------------------------------------------
.text:0040544D                 align 10h
.text:00405450                 sub     esp, 1Ch
.text:00405453                 mov     [esp+18h], ebx
.text:00405457                 mov     ebx, [esp+24h]
.text:0040545B                 mov     [esp], ebx
.text:0040545E                 call    malloc
.text:00405463                 test    eax, eax
.text:00405465                 mov     edx, eax
.text:00405467                 jz      short loc_405485
.text:00405469
.text:00405469 loc_405469:                             ; CODE XREF: .text:00405487↓j
.text:00405469                 mov     [esp+8], ebx
.text:0040546D                 mov     ecx, [esp+20h]
.text:00405471                 mov     [esp], edx
.text:00405474                 mov     [esp+4], ecx
.text:00405478                 call    memcpy
.text:0040547D                 mov     ebx, [esp+18h]
.text:00405481                 add     esp, 1Ch
.text:00405484                 retn
.text:00405485 ; ---------------------------------------------------------------------------
.text:00405485
.text:00405485 loc_405485:                             ; CODE XREF: .text:00405467↑j
.text:00405485                 test    ebx, ebx
.text:00405487                 jz      short loc_405469
.text:00405489                 call    sub_403180
.text:00405489 ; ---------------------------------------------------------------------------
.text:0040548E                 align 10h
.text:00405490                 sub     esp, 1Ch
.text:00405493                 mov     [esp+18h], esi
.text:00405497                 mov     esi, [esp+20h]
.text:0040549B                 mov     [esp+14h], ebx
.text:0040549F                 mov     [esp], esi
.text:004054A2                 call    strlen
.text:004054A7                 lea     ebx, [eax+1]
.text:004054AA                 mov     [esp], ebx
.text:004054AD                 call    malloc
.text:004054B2                 test    eax, eax
.text:004054B4                 jz      short loc_4054D2
.text:004054B6
.text:004054B6 loc_4054B6:                             ; CODE XREF: .text:004054D4↓j
.text:004054B6                 mov     [esp+8], ebx
.text:004054BA                 mov     [esp+4], esi
.text:004054BE                 mov     [esp], eax
.text:004054C1                 call    memcpy
.text:004054C6                 mov     ebx, [esp+14h]
.text:004054CA                 mov     esi, [esp+18h]
.text:004054CE                 add     esp, 1Ch
.text:004054D1                 retn
.text:004054D2 ; ---------------------------------------------------------------------------
.text:004054D2
.text:004054D2 loc_4054D2:                             ; CODE XREF: .text:004054B4↑j
.text:004054D2                 test    ebx, ebx
.text:004054D4                 jz      short loc_4054B6
.text:004054D6                 call    sub_403180
.text:004054D6 ; ---------------------------------------------------------------------------
.text:004054DB                 align 10h
.text:004054E0
.text:004054E0 ; =============== S U B R O U T I N E =======================================
.text:004054E0
.text:004054E0
.text:004054E0 ; int __cdecl sub_4054E0(void *, int, int)
.text:004054E0 sub_4054E0      proc near               ; CODE XREF: .text:00405390↑j
.text:004054E0                                         ; .text:004053BA↑p
.text:004054E0
.text:004054E0 Block           = dword ptr -1Ch
.text:004054E0 Size            = dword ptr -18h
.text:004054E0 var_C           = dword ptr -0Ch
.text:004054E0 var_8           = dword ptr -8
.text:004054E0 var_4           = dword ptr -4
.text:004054E0 arg_0           = dword ptr  4
.text:004054E0 arg_4           = dword ptr  8
.text:004054E0 arg_8           = dword ptr  0Ch
.text:004054E0
.text:004054E0                 sub     esp, 1Ch
.text:004054E3                 mov     [esp+1Ch+var_8], esi
.text:004054E7                 mov     esi, [esp+1Ch+arg_0]
.text:004054EB                 mov     [esp+1Ch+var_4], edi
.text:004054EF                 mov     edi, [esp+1Ch+arg_4]
.text:004054F3                 test    esi, esi
.text:004054F5                 mov     [esp+1Ch+var_C], ebx
.text:004054F9                 mov     ecx, [edi]
.text:004054FB                 mov     ebx, [esp+1Ch+arg_8]
.text:004054FF                 jz      short loc_405540
.text:00405501                 xor     edx, edx
.text:00405503                 mov     eax, 7FFFFFFFh
.text:00405508                 div     ebx
.text:0040550A                 cmp     eax, ecx
.text:0040550C                 jb      short loc_405539
.text:0040550E                 add     ecx, ecx
.text:00405510
.text:00405510 loc_405510:                             ; CODE XREF: sub_4054E0+62↓j
.text:00405510                                         ; sub_4054E0+71↓j ...
.text:00405510                 mov     [edi], ecx
.text:00405512                 imul    ebx, ecx
.text:00405515                 mov     [esp+1Ch+Block], esi ; Block
.text:00405518                 mov     [esp+1Ch+Size], ebx ; Size
.text:0040551C                 call    realloc
.text:00405521                 test    eax, eax
.text:00405523                 jz      short loc_405535
.text:00405525
.text:00405525 loc_405525:                             ; CODE XREF: sub_4054E0+57↓j
.text:00405525                 mov     ebx, [esp+1Ch+var_C]
.text:00405529                 mov     esi, [esp+1Ch+var_8]
.text:0040552D                 mov     edi, [esp+1Ch+var_4]
.text:00405531                 add     esp, 1Ch
.text:00405534                 retn
.text:00405535 ; ---------------------------------------------------------------------------
.text:00405535
.text:00405535 loc_405535:                             ; CODE XREF: sub_4054E0+43↑j
.text:00405535                 test    ebx, ebx
.text:00405537                 jz      short loc_405525
.text:00405539
.text:00405539 loc_405539:                             ; CODE XREF: sub_4054E0+2C↑j
.text:00405539                 call    sub_403180
.text:00405539 ; ---------------------------------------------------------------------------
.text:0040553E                 align 10h
.text:00405540
.text:00405540 loc_405540:                             ; CODE XREF: sub_4054E0+1F↑j
.text:00405540                 test    ecx, ecx
.text:00405542                 jnz     short loc_405510
.text:00405544                 xor     edx, edx
.text:00405546                 mov     eax, 40h ; '@'
.text:0040554B                 div     ebx
.text:0040554D                 test    eax, eax
.text:0040554F                 mov     ecx, eax
.text:00405551                 jnz     short loc_405510
.text:00405553                 mov     ecx, 1
.text:00405558                 jmp     short loc_405510
.text:00405558 sub_4054E0      endp
.text:00405558
.text:00405558 ; ---------------------------------------------------------------------------
.text:0040555A                 align 10h
.text:00405560                 jmp     ds:libintl_bindtextdomain
.text:00405560 ; ---------------------------------------------------------------------------
.text:00405566                 align 10h
.text:00405570                 jmp     ds:libintl_textdomain
.text:00405570 ; ---------------------------------------------------------------------------
.text:00405576                 align 10h
.text:00405580                 jmp     ds:libintl_gettext
.text:00405580 ; ---------------------------------------------------------------------------
.text:00405586                 align 10h
.text:00405590 ; const char aS_0[]
.text:00405590 aS_0            db ': %s',0             ; DATA XREF: sub_4055B0+B8↓o
.text:00405590                                         ; sub_4056B4+122↓o
.text:00405595 aUnknownSystemE db 'Unknown system error',0
.text:00405595                                         ; DATA XREF: sub_4055B0:loc_40567D↓o
.text:00405595                                         ; sub_4056B4:loc_4057EE↓o
.text:004055AA ; const char aS_1[]
.text:004055AA aS_1            db '%s: ',0             ; DATA XREF: sub_4055B0:loc_405684↓o
.text:004055AF                 align 10h
.text:004055B0
.text:004055B0 ; =============== S U B R O U T I N E =======================================
.text:004055B0
.text:004055B0
.text:004055B0 ; int __cdecl sub_4055B0(int Code, int ErrorMessage, char *, char)
.text:004055B0 sub_4055B0      proc near               ; CODE XREF: sub_4015E0+35E↑p
.text:004055B0                                         ; sub_4015E0+3AF↑p ...
.text:004055B0
.text:004055B0 Stream          = dword ptr -1Ch
.text:004055B0 Format          = dword ptr -18h
.text:004055B0 ArgList         = dword ptr -14h
.text:004055B0 Code            = dword ptr  4
.text:004055B0 ErrorMessage    = dword ptr  8
.text:004055B0 arg_8           = dword ptr  0Ch
.text:004055B0 arg_C           = byte ptr  10h
.text:004055B0
.text:004055B0                 push    esi
.text:004055B1                 push    ebx
.text:004055B2                 sub     esp, 14h
.text:004055B5                 mov     edx, ds:_iob
.text:004055BB                 mov     esi, [esp+1Ch+Code]
.text:004055BF                 mov     ebx, [esp+1Ch+ErrorMessage]
.text:004055C3                 add     edx, 20h ; ' '
.text:004055C6                 mov     [esp+1Ch+Stream], edx ; Stream
.text:004055C9                 call    fflush
.text:004055CE                 mov     eax, ds:dword_40F4E0
.text:004055D3                 test    eax, eax
.text:004055D5                 jz      loc_405684
.text:004055DB                 call    eax ; dword_40F4E0
.text:004055DD
.text:004055DD loc_4055DD:                             ; CODE XREF: sub_4055B0+F7↓j
.text:004055DD                 lea     edx, [esp+1Ch+arg_C]
.text:004055E1                 mov     ecx, [esp+1Ch+arg_8]
.text:004055E5                 mov     [esp+1Ch+ArgList], edx ; ArgList
.text:004055E9                 mov     edx, ds:_iob
.text:004055EF                 mov     [esp+1Ch+Format], ecx ; Format
.text:004055F3                 add     edx, 40h ; '@'
.text:004055F6                 mov     [esp+1Ch+Stream], edx ; Stream
.text:004055F9                 call    vfprintf
.text:004055FE                 inc     ds:dword_40F4F0
.text:00405604                 test    ebx, ebx
.text:00405606                 jnz     short loc_405652
.text:00405608
.text:00405608 loc_405608:                             ; CODE XREF: sub_4055B0+CB↓j
.text:00405608                 mov     edx, ds:_iob
.text:0040560E                 lea     ecx, [edx+40h]
.text:00405611                 mov     ebx, [ecx+4]
.text:00405614                 dec     ebx
.text:00405615                 test    ebx, ebx
.text:00405617                 mov     [ecx+4], ebx
.text:0040561A                 js      short loc_405640
.text:0040561C                 mov     ecx, [edx+40h]
.text:0040561F                 mov     byte ptr [ecx], 0Ah
.text:00405622                 inc     dword ptr [edx+40h]
.text:00405625
.text:00405625 loc_405625:                             ; CODE XREF: sub_4055B0+A0↓j
.text:00405625                 mov     edx, ds:_iob
.text:0040562B                 add     edx, 40h ; '@'
.text:0040562E                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00405631                 call    fflush
.text:00405636                 test    esi, esi
.text:00405638                 jnz     short loc_4056AC
.text:0040563A                 add     esp, 14h
.text:0040563D                 pop     ebx
.text:0040563E                 pop     esi
.text:0040563F                 retn
.text:00405640 ; ---------------------------------------------------------------------------
.text:00405640
.text:00405640 loc_405640:                             ; CODE XREF: sub_4055B0+6A↑j
.text:00405640                 mov     [esp+1Ch+Format], ecx ; File
.text:00405644                 mov     [esp+1Ch+Stream], 0Ah ; Ch
.text:0040564B                 call    _flsbuf
.text:00405650                 jmp     short loc_405625
.text:00405652 ; ---------------------------------------------------------------------------
.text:00405652
.text:00405652 loc_405652:                             ; CODE XREF: sub_4055B0+56↑j
.text:00405652                 mov     [esp+1Ch+Stream], ebx ; ErrorMessage
.text:00405655                 call    strerror
.text:0040565A                 test    eax, eax
.text:0040565C                 jz      short loc_40567D
.text:0040565E
.text:0040565E loc_40565E:                             ; CODE XREF: sub_4055B0+D2↓j
.text:0040565E                 mov     [esp+1Ch+ArgList], eax
.text:00405662                 mov     ebx, ds:_iob
.text:00405668                 mov     [esp+1Ch+Format], offset aS_0 ; ": %s"
.text:00405670                 add     ebx, 40h ; '@'
.text:00405673                 mov     [esp+1Ch+Stream], ebx ; Stream
.text:00405676                 call    fprintf
.text:0040567B                 jmp     short loc_405608
.text:0040567D ; ---------------------------------------------------------------------------
.text:0040567D
.text:0040567D loc_40567D:                             ; CODE XREF: sub_4055B0+AC↑j
.text:0040567D                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:00405682                 jmp     short loc_40565E
.text:00405684 ; ---------------------------------------------------------------------------
.text:00405684
.text:00405684 loc_405684:                             ; CODE XREF: sub_4055B0+25↑j
.text:00405684                 mov     [esp+1Ch+Format], offset aS_1 ; "%s: "
.text:0040568C                 mov     edx, ds:_iob
.text:00405692                 mov     ecx, ds:dword_40F4B0
.text:00405698                 add     edx, 40h ; '@'
.text:0040569B                 mov     [esp+1Ch+ArgList], ecx
.text:0040569F                 mov     [esp+1Ch+Stream], edx ; Stream
.text:004056A2                 call    fprintf
.text:004056A7                 jmp     loc_4055DD
.text:004056AC ; ---------------------------------------------------------------------------
.text:004056AC
.text:004056AC loc_4056AC:                             ; CODE XREF: sub_4055B0+88↑j
.text:004056AC                 mov     [esp+1Ch+Stream], esi ; Code
.text:004056AF                 call    exit
.text:004056AF sub_4055B0      endp
.text:004056AF
.text:004056B4
.text:004056B4 ; =============== S U B R O U T I N E =======================================
.text:004056B4
.text:004056B4
.text:004056B4 ; int __cdecl sub_4056B4(int, int Code, int ErrorMessage, char *Str2, int, char *, char)
.text:004056B4 sub_4056B4      proc near               ; DATA XREF: sub_4056B4+77↓o
.text:004056B4
.text:004056B4 Stream          = dword ptr -28h
.text:004056B4 Format          = dword ptr -24h
.text:004056B4 ArgList         = dword ptr -20h
.text:004056B4 var_1C          = dword ptr -1Ch
.text:004056B4 Code            = dword ptr  8
.text:004056B4 ErrorMessage    = dword ptr  0Ch
.text:004056B4 Str2            = dword ptr  10h
.text:004056B4 arg_10          = dword ptr  14h
.text:004056B4 arg_14          = dword ptr  18h
.text:004056B4 arg_18          = byte ptr  1Ch
.text:004056B4
.text:004056B4                 and     eax, 64253A73h
.text:004056B9                 cmp     ah, [eax]
.text:004056BB
.text:004056BB loc_4056BB:                             ; DATA XREF: sub_4056B4:loc_4057F5↓o
.text:004056BB                 add     ds:55003A73h, ah
.text:004056C1                 push    edi
.text:004056C2                 push    esi
.text:004056C3                 push    ebx
.text:004056C4                 sub     esp, 1Ch
.text:004056C7                 mov     edx, ds:dword_40F520
.text:004056CD                 mov     ebp, [esp+28h+Code]
.text:004056D1                 mov     edi, [esp+28h+ErrorMessage]
.text:004056D5                 test    edx, edx
.text:004056D7                 mov     ebx, [esp+28h+Str2]
.text:004056DB                 mov     esi, [esp+28h+arg_10]
.text:004056DF                 jz      short loc_4056F9
.text:004056E1                 cmp     ds:dword_40F180, esi
.text:004056E7                 jz      loc_405820
.text:004056ED
.text:004056ED loc_4056ED:                             ; CODE XREF: sub_4056B4+18D↓j
.text:004056ED                 mov     ds:Str1, ebx
.text:004056F3                 mov     ds:dword_40F180, esi
.text:004056F9
.text:004056F9 loc_4056F9:                             ; CODE XREF: sub_4056B4+2B↑j
.text:004056F9                 mov     edx, ds:_iob
.text:004056FF                 add     edx, 20h ; ' '
.text:00405702                 mov     [esp+28h+Stream], edx ; Stream
.text:00405705                 call    fflush
.text:0040570A                 mov     eax, ds:dword_40F4E0
.text:0040570F                 test    eax, eax
.text:00405711                 jz      loc_4057F5
.text:00405717                 call    eax ; dword_40F4E0
.text:00405719
.text:00405719 loc_405719:                             ; CODE XREF: sub_4056B4+164↓j
.text:00405719                 test    ebx, ebx
.text:0040571B                 jz      short loc_40573E
.text:0040571D                 mov     [esp+28h+ArgList], ebx
.text:00405721                 mov     ebx, ds:_iob
.text:00405727                 mov     [esp+28h+var_1C], esi
.text:0040572B                 mov     [esp+28h+Format], offset sub_4056B4 ; Format
.text:00405733                 add     ebx, 40h ; '@'
.text:00405736                 mov     [esp+28h+Stream], ebx ; Stream
.text:00405739                 call    fprintf
.text:0040573E
.text:0040573E loc_40573E:                             ; CODE XREF: sub_4056B4+67↑j
.text:0040573E                 mov     esi, ds:_iob
.text:00405744                 lea     edx, [esp+28h+arg_18]
.text:00405748                 mov     ecx, [esp+28h+arg_14]
.text:0040574C                 mov     [esp+28h+ArgList], edx ; ArgList
.text:00405750                 add     esi, 40h ; '@'
.text:00405753                 mov     [esp+28h+Format], ecx ; Format
.text:00405757                 mov     [esp+28h+Stream], esi ; Stream
.text:0040575A                 call    vfprintf
.text:0040575F                 inc     ds:dword_40F4F0
.text:00405765                 test    edi, edi
.text:00405767                 jnz     short loc_4057C0
.text:00405769
.text:00405769 loc_405769:                             ; CODE XREF: sub_4056B4+135↓j
.text:00405769                 mov     edx, ds:_iob
.text:0040576F                 lea     ecx, [edx+40h]
.text:00405772                 mov     ebx, [ecx+4]
.text:00405775                 dec     ebx
.text:00405776                 test    ebx, ebx
.text:00405778                 mov     [ecx+4], ebx
.text:0040577B                 js      short loc_4057A7
.text:0040577D                 mov     esi, [edx+40h]
.text:00405780                 mov     byte ptr [esi], 0Ah
.text:00405783                 inc     dword ptr [edx+40h]
.text:00405786
.text:00405786 loc_405786:                             ; CODE XREF: sub_4056B4+103↓j
.text:00405786                 mov     ecx, ds:_iob
.text:0040578C                 add     ecx, 40h ; '@'
.text:0040578F                 mov     [esp+28h+Stream], ecx ; Stream
.text:00405792                 call    fflush
.text:00405797                 test    ebp, ebp
.text:00405799                 jnz     loc_405846
.text:0040579F
.text:0040579F loc_40579F:                             ; CODE XREF: sub_4056B4+173↓j
.text:0040579F                                         ; sub_4056B4+187↓j
.text:0040579F                 add     esp, 1Ch
.text:004057A2                 pop     ebx
.text:004057A3                 pop     esi
.text:004057A4                 pop     edi
.text:004057A5                 pop     ebp
.text:004057A6                 retn
.text:004057A7 ; ---------------------------------------------------------------------------
.text:004057A7
.text:004057A7 loc_4057A7:                             ; CODE XREF: sub_4056B4+C7↑j
.text:004057A7                 mov     [esp+28h+Format], ecx ; File
.text:004057AB                 mov     [esp+28h+Stream], 0Ah ; Ch
.text:004057B2                 call    _flsbuf
.text:004057B7                 jmp     short loc_405786
.text:004057B7 ; ---------------------------------------------------------------------------
.text:004057B9                 align 10h
.text:004057C0
.text:004057C0 loc_4057C0:                             ; CODE XREF: sub_4056B4+B3↑j
.text:004057C0                 mov     [esp+28h+Stream], edi ; ErrorMessage
.text:004057C3                 call    strerror
.text:004057C8                 test    eax, eax
.text:004057CA                 jz      short loc_4057EE
.text:004057CC
.text:004057CC loc_4057CC:                             ; CODE XREF: sub_4056B4+13F↓j
.text:004057CC                 mov     [esp+28h+ArgList], eax
.text:004057D0                 mov     edi, ds:_iob
.text:004057D6                 mov     [esp+28h+Format], offset aS_0 ; ": %s"
.text:004057DE                 add     edi, 40h ; '@'
.text:004057E1                 mov     [esp+28h+Stream], edi ; Stream
.text:004057E4                 call    fprintf
.text:004057E9                 jmp     loc_405769
.text:004057EE ; ---------------------------------------------------------------------------
.text:004057EE
.text:004057EE loc_4057EE:                             ; CODE XREF: sub_4056B4+116↑j
.text:004057EE                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:004057F3                 jmp     short loc_4057CC
.text:004057F5 ; ---------------------------------------------------------------------------
.text:004057F5
.text:004057F5 loc_4057F5:                             ; CODE XREF: sub_4056B4+5D↑j
.text:004057F5                 mov     [esp+28h+Format], (offset loc_4056BB+1) ; Format
.text:004057FD                 mov     ecx, ds:_iob
.text:00405803                 mov     edx, ds:dword_40F4B0
.text:00405809                 add     ecx, 40h ; '@'
.text:0040580C                 mov     [esp+28h+ArgList], edx
.text:00405810                 mov     [esp+28h+Stream], ecx ; Stream
.text:00405813                 call    fprintf
.text:00405818                 jmp     loc_405719
.text:00405818 ; ---------------------------------------------------------------------------
.text:0040581D                 align 10h
.text:00405820
.text:00405820 loc_405820:                             ; CODE XREF: sub_4056B4+33↑j
.text:00405820                 mov     eax, ds:Str1
.text:00405825                 cmp     ebx, eax
.text:00405827                 jz      loc_40579F
.text:0040582D                 mov     [esp+28h+Format], ebx ; Str2
.text:00405831                 mov     [esp+28h+Stream], eax ; Str1
.text:00405834                 call    strcmp
.text:00405839                 test    eax, eax
.text:0040583B                 jz      loc_40579F
.text:00405841                 jmp     loc_4056ED
.text:00405846 ; ---------------------------------------------------------------------------
.text:00405846
.text:00405846 loc_405846:                             ; CODE XREF: sub_4056B4+E5↑j
.text:00405846                 mov     [esp+28h+Stream], ebp ; Code
.text:00405849                 call    exit
.text:00405849 sub_4056B4      endp ; sp-analysis failed
.text:00405849
.text:00405849 ; ---------------------------------------------------------------------------
.text:0040584E                 align 10h
.text:00405850
.text:00405850 ; =============== S U B R O U T I N E =======================================
.text:00405850
.text:00405850
.text:00405850 ; int __cdecl sub_405850(char *, __int16)
.text:00405850 sub_405850      proc near               ; CODE XREF: sub_4015E0+2D6↑p
.text:00405850
.text:00405850 Destination     = dword ptr -13Ch
.text:00405850 Source          = dword ptr -138h
.text:00405850 dwPipeMode      = dword ptr -134h
.text:00405850 nMaxInstances   = dword ptr -130h
.text:00405850 nOutBufferSize  = dword ptr -12Ch
.text:00405850 nInBufferSize   = dword ptr -128h
.text:00405850 nDefaultTimeOut = dword ptr -124h
.text:00405850 lpSecurityAttributes= dword ptr -120h
.text:00405850 Name            = byte ptr -11Ch
.text:00405850 var_118         = dword ptr -118h
.text:00405850 var_114         = word ptr -114h
.text:00405850 var_8           = dword ptr -8
.text:00405850 var_4           = dword ptr -4
.text:00405850 arg_0           = dword ptr  4
.text:00405850 arg_4           = word ptr  8
.text:00405850
.text:00405850                 sub     esp, 13Ch
.text:00405856                 mov     eax, [esp+13Ch+arg_0]
.text:0040585D                 mov     [esp+13Ch+var_4], esi
.text:00405864                 mov     [esp+13Ch+var_8], ebx
.text:0040586B                 test    eax, eax
.text:0040586D                 movzx   esi, [esp+13Ch+arg_4]
.text:00405875                 jz      loc_40591D
.text:0040587B                 mov     dword ptr [esp+13Ch+Name], 5C2E5C5Ch
.text:00405883                 lea     ebx, [esp+13Ch+Name]
.text:00405887                 mov     [esp+13Ch+var_118], 65706970h
.text:0040588F                 mov     [esp+13Ch+var_114], 5Ch ; '\'
.text:00405896                 mov     [esp+13Ch+Source], eax ; Source
.text:0040589A                 mov     [esp+13Ch+Destination], ebx ; Destination
.text:0040589D                 call    strcat
.text:004058A2                 mov     [esp+13Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:004058AA                 mov     [esp+13Ch+nDefaultTimeOut], 1388h ; nDefaultTimeOut
.text:004058B2                 mov     [esp+13Ch+nInBufferSize], 400h ; nInBufferSize
.text:004058BA                 mov     [esp+13Ch+nOutBufferSize], 400h ; nOutBufferSize
.text:004058C2                 mov     [esp+13Ch+nMaxInstances], 0FFh ; nMaxInstances
.text:004058CA                 mov     [esp+13Ch+dwPipeMode], 6 ; dwPipeMode
.text:004058D2                 mov     [esp+13Ch+Source], 3 ; dwOpenMode
.text:004058DA                 mov     [esp+13Ch+Destination], ebx ; lpName
.text:004058DD                 call    CreateNamedPipeA
.text:004058E2                 sub     esp, 20h
.text:004058E5                 cmp     eax, 0FFFFFFFFh
.text:004058E8                 jz      short loc_40590B
.text:004058EA                 mov     [esp+13Ch+Source], esi ; Flags
.text:004058EE                 mov     [esp+13Ch+Destination], eax ; OSFileHandle
.text:004058F1                 call    _open_osfhandle
.text:004058F6
.text:004058F6 loc_4058F6:                             ; CODE XREF: sub_405850+CB↓j
.text:004058F6                 mov     ebx, [esp+13Ch+var_8]
.text:004058FD                 mov     esi, [esp+13Ch+var_4]
.text:00405904                 add     esp, 13Ch
.text:0040590A                 retn
.text:0040590B ; ---------------------------------------------------------------------------
.text:0040590B
.text:0040590B loc_40590B:                             ; CODE XREF: sub_405850+98↑j
.text:0040590B                 call    _errno
.text:00405910                 mov     dword ptr [eax], 9
.text:00405916
.text:00405916 loc_405916:                             ; CODE XREF: sub_405850+D8↓j
.text:00405916                 mov     eax, 0FFFFFFFFh
.text:0040591B                 jmp     short loc_4058F6
.text:0040591D ; ---------------------------------------------------------------------------
.text:0040591D
.text:0040591D loc_40591D:                             ; CODE XREF: sub_405850+25↑j
.text:0040591D                 call    _errno
.text:00405922                 mov     dword ptr [eax], 16h
.text:00405928                 jmp     short loc_405916
.text:00405928 sub_405850      endp
.text:00405928
.text:00405928 ; ---------------------------------------------------------------------------
.text:0040592A                 align 10h
.text:00405930
.text:00405930 ; =============== S U B R O U T I N E =======================================
.text:00405930
.text:00405930
.text:00405930 ; int __cdecl sub_405930(char *, int)
.text:00405930 sub_405930      proc near               ; CODE XREF: .text:00402088↑p
.text:00405930
.text:00405930 var_C           = dword ptr -0Ch
.text:00405930 var_8           = dword ptr -8
.text:00405930 var_4           = dword ptr -4
.text:00405930 arg_0           = dword ptr  4
.text:00405930 arg_4           = dword ptr  8
.text:00405930
.text:00405930                 sub     esp, 0Ch
.text:00405933                 mov     edx, [esp+0Ch+arg_4]
.text:00405937                 mov     [esp+0Ch+var_C], 0 ; LPCSTR
.text:0040593E                 mov     [esp+0Ch+var_4], edx ; int
.text:00405942                 mov     edx, [esp+0Ch+arg_0]
.text:00405946                 mov     [esp+0Ch+var_8], edx ; char *
.text:0040594A                 call    sub_405960
.text:0040594F                 add     esp, 0Ch
.text:00405952                 retn
.text:00405952 sub_405930      endp
.text:00405952
.text:00405952 ; ---------------------------------------------------------------------------
.text:00405953                 align 10h
.text:00405960
.text:00405960 ; =============== S U B R O U T I N E =======================================
.text:00405960
.text:00405960
.text:00405960 ; int __cdecl sub_405960(LPCSTR, char *, int)
.text:00405960 sub_405960      proc near               ; CODE XREF: sub_405930+1A↑p
.text:00405960                                         ; sub_40AD30+104↓p ...
.text:00405960
.text:00405960 var_13C         = dword ptr -13Ch
.text:00405960 lpString1       = dword ptr -138h
.text:00405960 var_134         = dword ptr -134h
.text:00405960 String1         = byte ptr -12Ch
.text:00405960 var_10          = dword ptr -10h
.text:00405960 var_C           = dword ptr -0Ch
.text:00405960 var_8           = dword ptr -8
.text:00405960 var_4           = dword ptr -4
.text:00405960 arg_0           = dword ptr  4
.text:00405960 arg_4           = dword ptr  8
.text:00405960 arg_8           = dword ptr  0Ch
.text:00405960
.text:00405960                 sub     esp, 13Ch
.text:00405966                 mov     [esp+13Ch+var_10], ebx
.text:0040596D                 mov     ebx, [esp+13Ch+arg_8]
.text:00405974                 mov     [esp+13Ch+var_C], esi
.text:0040597B                 mov     esi, [esp+13Ch+arg_4]
.text:00405982                 mov     [esp+13Ch+var_8], edi
.text:00405989                 mov     edi, [esp+13Ch+arg_0]
.text:00405990                 mov     [esp+13Ch+var_4], ebp
.text:00405997                 mov     [esp+13Ch+var_134], ebx ; int
.text:0040599B                 mov     [esp+13Ch+lpString1], esi ; int
.text:0040599F                 mov     [esp+13Ch+var_13C], edi ; LPCSTR
.text:004059A2                 call    sub_405C80
.text:004059A7                 cmp     eax, 0FFFFFFFFh
.text:004059AA                 mov     edx, eax
.text:004059AC                 jz      short loc_4059BE
.text:004059AE                 mov     ecx, [ebx]
.text:004059B0                 and     ecx, 0F000h
.text:004059B6                 cmp     ecx, 0A000h
.text:004059BC                 jz      short loc_4059E3
.text:004059BE
.text:004059BE loc_4059BE:                             ; CODE XREF: sub_405960+4C↑j
.text:004059BE                                         ; sub_405960+A1↓j ...
.text:004059BE                 mov     ebx, [esp+13Ch+var_10]
.text:004059C5                 mov     eax, edx
.text:004059C7                 mov     esi, [esp+13Ch+var_C]
.text:004059CE                 mov     edi, [esp+13Ch+var_8]
.text:004059D5                 mov     ebp, [esp+13Ch+var_4]
.text:004059DC                 add     esp, 13Ch
.text:004059E2                 retn
.text:004059E3 ; ---------------------------------------------------------------------------
.text:004059E3
.text:004059E3 loc_4059E3:                             ; CODE XREF: sub_405960+5C↑j
.text:004059E3                 mov     [esp+13Ch+var_134], 104h
.text:004059EB                 lea     ebp, [esp+13Ch+String1]
.text:004059EF                 mov     [esp+13Ch+lpString1], ebp ; lpString1
.text:004059F3                 mov     [esp+13Ch+var_13C], esi ; char *
.text:004059F6                 call    sub_405BA0
.text:004059FB                 inc     eax
.text:004059FC                 mov     edx, 0FFFFFFFFh
.text:00405A01                 jz      short loc_4059BE
.text:00405A03                 mov     [esp+13Ch+var_134], ebx ; int
.text:00405A07                 mov     [esp+13Ch+lpString1], ebp ; int
.text:00405A0B                 mov     [esp+13Ch+var_13C], edi ; LPCSTR
.text:00405A0E                 call    sub_405C80
.text:00405A13                 mov     edx, eax
.text:00405A15                 jmp     short loc_4059BE
.text:00405A15 sub_405960      endp
.text:00405A15
.text:00405A15 ; ---------------------------------------------------------------------------
.text:00405A17                 align 10h
.text:00405A20
.text:00405A20 ; =============== S U B R O U T I N E =======================================
.text:00405A20
.text:00405A20
.text:00405A20 ; int __cdecl sub_405A20(LPCCH lpMultiByteStr, LPSTR lpString1)
.text:00405A20 sub_405A20      proc near               ; CODE XREF: sub_405BA0+93↓p
.text:00405A20
.text:00405A20 pvReserved      = dword ptr -35Ch
.text:00405A20 pUnkOuter       = dword ptr -358h
.text:00405A20 dwClsContext    = dword ptr -354h
.text:00405A20 riid            = dword ptr -350h
.text:00405A20 ppv             = dword ptr -34Ch
.text:00405A20 cchWideChar     = dword ptr -348h
.text:00405A20 var_334         = byte ptr -334h
.text:00405A20 var_330         = dword ptr -330h
.text:00405A20 String2         = byte ptr -32Ch
.text:00405A20 WideCharStr     = word ptr -21Ch
.text:00405A20 lpMultiByteStr  = dword ptr  4
.text:00405A20 lpString1       = dword ptr  8
.text:00405A20
.text:00405A20                 push    edi
.text:00405A21                 push    esi
.text:00405A22                 push    ebx
.text:00405A23                 sub     esp, 350h
.text:00405A29                 mov     edi, [esp+35Ch+lpString1]
.text:00405A30                 mov     byte ptr [edi], 0
.text:00405A33                 mov     [esp+35Ch+pvReserved], 0 ; pvReserved
.text:00405A3A                 call    OleInitialize
.text:00405A3F                 sub     esp, 4
.text:00405A42                 cmp     eax, 1
.text:00405A45                 ja      loc_405B7F
.text:00405A4B                 mov     [esp+35Ch+riid], offset riid ; riid
.text:00405A53                 lea     ecx, [esp+35Ch+var_330]
.text:00405A57                 mov     [esp+35Ch+ppv], ecx ; ppv
.text:00405A5B                 mov     [esp+35Ch+dwClsContext], 1 ; dwClsContext
.text:00405A63                 mov     [esp+35Ch+pUnkOuter], 0 ; pUnkOuter
.text:00405A6B                 mov     [esp+35Ch+pvReserved], offset rclsid ; rclsid
.text:00405A72                 call    CoCreateInstance
.text:00405A77                 sub     esp, 14h
.text:00405A7A                 test    eax, eax
.text:00405A7C                 js      loc_405B7F
.text:00405A82                 mov     ebx, [esp+35Ch+var_330]
.text:00405A86                 lea     edx, [esp+35Ch+var_334]
.text:00405A8A                 mov     esi, [ebx]
.text:00405A8C                 mov     [esp+35Ch+dwClsContext], edx
.text:00405A90                 mov     [esp+35Ch+pvReserved], ebx
.text:00405A93                 xor     ebx, ebx
.text:00405A95                 mov     [esp+35Ch+pUnkOuter], offset dword_40C530
.text:00405A9D                 call    dword ptr [esi]
.text:00405A9F                 sub     esp, 0Ch
.text:00405AA2                 lea     esi, [esp+35Ch+WideCharStr]
.text:00405AA9                 call    AreFileApisANSI
.text:00405AAE                 mov     [esp+35Ch+cchWideChar], 104h ; cchWideChar
.text:00405AB6                 test    eax, eax
.text:00405AB8                 mov     ecx, [esp+35Ch+lpMultiByteStr]
.text:00405ABF                 setz    bl
.text:00405AC2                 mov     [esp+35Ch+ppv], esi ; lpWideCharStr
.text:00405AC6                 mov     [esp+35Ch+riid], 0FFFFFFFFh ; cbMultiByte
.text:00405ACE                 mov     [esp+35Ch+dwClsContext], ecx ; lpMultiByteStr
.text:00405AD2                 mov     [esp+35Ch+pUnkOuter], 0 ; dwFlags
.text:00405ADA                 mov     [esp+35Ch+pvReserved], ebx ; CodePage
.text:00405ADD                 call    MultiByteToWideChar
.text:00405AE2                 sub     esp, 18h
.text:00405AE5                 test    eax, eax
.text:00405AE7                 js      loc_405B7F
.text:00405AED                 mov     edx, dword ptr [esp+35Ch+var_334]
.text:00405AF1                 mov     ebx, [edx]
.text:00405AF3                 mov     [esp+35Ch+dwClsContext], 0
.text:00405AFB                 mov     [esp+35Ch+pUnkOuter], esi
.text:00405AFF                 mov     [esp+35Ch+pvReserved], edx
.text:00405B02                 call    dword ptr [ebx+14h]
.text:00405B05                 sub     esp, 0Ch
.text:00405B08                 test    eax, eax
.text:00405B0A                 js      short loc_405B7F
.text:00405B0C                 mov     ebx, [esp+35Ch+var_330]
.text:00405B10                 lea     esi, [esp+35Ch+String2]
.text:00405B14                 mov     ecx, [ebx]
.text:00405B16                 mov     [esp+35Ch+pvReserved], ebx
.text:00405B19                 mov     [esp+35Ch+ppv], 0
.text:00405B21                 mov     [esp+35Ch+riid], 0
.text:00405B29                 mov     [esp+35Ch+dwClsContext], 104h
.text:00405B31                 mov     [esp+35Ch+pUnkOuter], esi
.text:00405B35                 call    dword ptr [ecx+0Ch]
.text:00405B38                 sub     esp, 14h
.text:00405B3B                 mov     ebx, eax
.text:00405B3D                 test    eax, eax
.text:00405B3F                 js      short loc_405B7F
.text:00405B41                 mov     [esp+35Ch+pUnkOuter], esi ; lpString2
.text:00405B45                 mov     [esp+35Ch+pvReserved], edi ; lpString1
.text:00405B48                 call    lstrcpyA
.text:00405B4D                 sub     esp, 8
.text:00405B50                 mov     edi, dword ptr [esp+35Ch+var_334]
.text:00405B54                 mov     ecx, [edi]
.text:00405B56                 mov     [esp+35Ch+pvReserved], edi
.text:00405B59                 call    dword ptr [ecx+8]
.text:00405B5C                 sub     esp, 4
.text:00405B5F                 mov     edx, [esp+35Ch+var_330]
.text:00405B63                 mov     esi, [edx]
.text:00405B65                 mov     [esp+35Ch+pvReserved], edx
.text:00405B68                 call    dword ptr [esi+8]
.text:00405B6B                 sub     esp, 4
.text:00405B6E                 call    CoUninitialize
.text:00405B73                 mov     eax, ebx
.text:00405B75
.text:00405B75 loc_405B75:                             ; CODE XREF: sub_405A20+177↓j
.text:00405B75                 add     esp, 350h
.text:00405B7B                 pop     ebx
.text:00405B7C                 pop     esi
.text:00405B7D                 pop     edi
.text:00405B7E                 retn
.text:00405B7F ; ---------------------------------------------------------------------------
.text:00405B7F
.text:00405B7F loc_405B7F:                             ; CODE XREF: sub_405A20+25↑j
.text:00405B7F                                         ; sub_405A20+5C↑j ...
.text:00405B7F                 call    sub_4067D0
.text:00405B84                 mov     edi, eax
.text:00405B86                 call    _errno
.text:00405B8B                 mov     [eax], edi
.text:00405B8D                 call    CoUninitialize
.text:00405B92                 mov     eax, 0FFFFFFFFh
.text:00405B97                 jmp     short loc_405B75
.text:00405B97 sub_405A20      endp
.text:00405B97
.text:00405B97 ; ---------------------------------------------------------------------------
.text:00405B99 ; const char Source[]
.text:00405B99 Source          db '.lnk',0             ; DATA XREF: sub_405BA0+53↓o
.text:00405B99                                         ; sub_405BA0:loc_405C05↓o
.text:00405B9E                 align 10h
.text:00405BA0
.text:00405BA0 ; =============== S U B R O U T I N E =======================================
.text:00405BA0
.text:00405BA0
.text:00405BA0 ; int __cdecl sub_405BA0(char *, LPSTR lpString1)
.text:00405BA0 sub_405BA0      proc near               ; CODE XREF: sub_405960+96↑p
.text:00405BA0
.text:00405BA0 Str             = dword ptr -1Ch
.text:00405BA0 Source          = dword ptr -18h
.text:00405BA0 Destination     = dword ptr -14h
.text:00405BA0 arg_0           = dword ptr  4
.text:00405BA0 lpString1       = dword ptr  8
.text:00405BA0
.text:00405BA0                 push    ebp
.text:00405BA1                 push    edi
.text:00405BA2                 push    esi
.text:00405BA3                 push    ebx
.text:00405BA4                 sub     esp, 0Ch
.text:00405BA7                 mov     ebx, [esp+1Ch+arg_0]
.text:00405BAB                 mov     ebp, [esp+1Ch+lpString1]
.text:00405BAF                 mov     [esp+1Ch+Str], ebx ; Str
.text:00405BB2                 call    strlen
.text:00405BB7                 add     eax, 5
.text:00405BBA                 mov     [esp+1Ch+Str], eax ; Size
.text:00405BBD                 call    malloc
.text:00405BC2                 mov     [esp+1Ch+Destination], eax
.text:00405BC6                 test    eax, eax
.text:00405BC8                 jz      loc_405C70
.text:00405BCE                 mov     [esp+1Ch+Source], ebx ; Source
.text:00405BD2                 mov     [esp+1Ch+Str], eax ; Destination
.text:00405BD5                 call    strcpy
.text:00405BDA                 mov     [esp+1Ch+Source], 2Eh ; '.' ; Ch
.text:00405BE2                 mov     eax, [esp+1Ch+Destination]
.text:00405BE6                 mov     [esp+1Ch+Str], eax ; Str
.text:00405BE9                 call    strrchr
.text:00405BEE                 test    eax, eax
.text:00405BF0                 jz      short loc_405C05
.text:00405BF2                 cld
.text:00405BF3                 mov     ebx, offset Source ; ".lnk"
.text:00405BF8                 mov     ecx, 5
.text:00405BFD                 mov     esi, eax
.text:00405BFF                 mov     edi, ebx
.text:00405C01                 repe cmpsb
.text:00405C03                 jz      short loc_405C19
.text:00405C05
.text:00405C05 loc_405C05:                             ; CODE XREF: sub_405BA0+50↑j
.text:00405C05                 mov     [esp+1Ch+Source], offset Source ; ".lnk"
.text:00405C0D                 mov     edx, [esp+1Ch+Destination]
.text:00405C11                 mov     [esp+1Ch+Str], edx ; Destination
.text:00405C14                 call    strcat
.text:00405C19
.text:00405C19 loc_405C19:                             ; CODE XREF: sub_405BA0+63↑j
.text:00405C19                 mov     [esp+1Ch+Str], 8001h ; uMode
.text:00405C20                 call    SetErrorMode
.text:00405C25                 sub     esp, 4
.text:00405C28                 mov     ebx, [esp+1Ch+Destination]
.text:00405C2C                 mov     [esp+1Ch+Source], ebp ; lpString1
.text:00405C30                 mov     [esp+1Ch+Str], ebx ; lpMultiByteStr
.text:00405C33                 call    sub_405A20
.text:00405C38                 mov     [esp+1Ch+Str], ebx ; Block
.text:00405C3B                 mov     esi, eax
.text:00405C3D                 call    free
.text:00405C42                 mov     [esp+1Ch+Str], 0 ; uMode
.text:00405C49                 call    SetErrorMode
.text:00405C4E                 sub     esp, 4
.text:00405C51                 mov     [esp+1Ch+Str], ebp
.text:00405C54                 call    sub_4060A0
.text:00405C59                 inc     esi
.text:00405C5A                 jz      short loc_405C70
.text:00405C5C                 mov     [esp+1Ch+arg_0], ebp
.text:00405C60                 add     esp, 0Ch
.text:00405C63                 pop     ebx
.text:00405C64                 pop     esi
.text:00405C65                 pop     edi
.text:00405C66                 pop     ebp
.text:00405C67                 jmp     strlen
.text:00405C67 ; ---------------------------------------------------------------------------
.text:00405C6C                 align 10h
.text:00405C70
.text:00405C70 loc_405C70:                             ; CODE XREF: sub_405BA0+28↑j
.text:00405C70                                         ; sub_405BA0+BA↑j
.text:00405C70                 add     esp, 0Ch
.text:00405C73                 mov     eax, 0FFFFFFFFh
.text:00405C78                 pop     ebx
.text:00405C79                 pop     esi
.text:00405C7A                 pop     edi
.text:00405C7B                 pop     ebp
.text:00405C7C                 retn
.text:00405C7C sub_405BA0      endp
.text:00405C7C
.text:00405C7C ; ---------------------------------------------------------------------------
.text:00405C7D                 align 10h
.text:00405C80
.text:00405C80 ; =============== S U B R O U T I N E =======================================
.text:00405C80
.text:00405C80
.text:00405C80 ; int __cdecl sub_405C80(LPCSTR, int, int)
.text:00405C80 sub_405C80      proc near               ; CODE XREF: sub_405960+42↑p
.text:00405C80                                         ; sub_405960+AE↑p ...
.text:00405C80
.text:00405C80 lpFileName      = dword ptr -2Ch
.text:00405C80 dwDesiredAccess = dword ptr -28h
.text:00405C80 dwShareMode     = dword ptr -24h
.text:00405C80 lpSecurityAttributes= dword ptr -20h
.text:00405C80 dwCreationDisposition= dword ptr -1Ch
.text:00405C80 dwFlagsAndAttributes= dword ptr -18h
.text:00405C80 hTemplateFile   = dword ptr -14h
.text:00405C80 var_10          = dword ptr -10h
.text:00405C80 var_C           = dword ptr -0Ch
.text:00405C80 var_8           = dword ptr -8
.text:00405C80 var_4           = dword ptr -4
.text:00405C80 arg_0           = dword ptr  4
.text:00405C80 arg_4           = dword ptr  8
.text:00405C80 arg_8           = dword ptr  0Ch
.text:00405C80
.text:00405C80 ; FUNCTION CHUNK AT .text:004081E0 SIZE 0000013A BYTES
.text:00405C80
.text:00405C80                 sub     esp, 0Ch
.text:00405C83                 mov     ecx, [esp+0Ch+arg_0]
.text:00405C87                 mov     edx, [esp+0Ch+arg_4]
.text:00405C8B                 mov     eax, [esp+0Ch+arg_8]
.text:00405C8F                 test    ecx, ecx
.text:00405C91                 jnz     short loc_405CB0
.text:00405C93                 test    edx, edx
.text:00405C95                 jz      short loc_405CB0
.text:00405C97                 test    eax, eax
.text:00405C99                 jz      short loc_405CB0
.text:00405C9B                 mov     [esp+0Ch+arg_4], eax
.text:00405C9F                 mov     [esp+0Ch+arg_0], edx
.text:00405CA3                 add     esp, 0Ch
.text:00405CA6                 jmp     loc_4081E0
.text:00405CA6 ; ---------------------------------------------------------------------------
.text:00405CAB                 align 10h
.text:00405CB0
.text:00405CB0 loc_405CB0:                             ; CODE XREF: sub_405C80+11↑j
.text:00405CB0                                         ; sub_405C80+15↑j ...
.text:00405CB0                 call    _errno
.text:00405CB5                 mov     dword ptr [eax], 16h
.text:00405CBB                 mov     eax, 0FFFFFFFFh
.text:00405CC0                 add     esp, 0Ch
.text:00405CC3                 retn
.text:00405CC3 sub_405C80      endp
.text:00405CC3
.text:00405CC3 ; ---------------------------------------------------------------------------
.text:00405CC4                 align 10h
.text:00405CD0
.text:00405CD0 ; =============== S U B R O U T I N E =======================================
.text:00405CD0
.text:00405CD0 ; Attributes: bp-based frame info_from_lumina fpd=268h
.text:00405CD0
.text:00405CD0 ; int __cdecl win32_longpath(LPCSTR lpFileName)
.text:00405CD0 _win32_longpath proc near               ; CODE XREF: .text:00406494↓p
.text:00405CD0
.text:00405CD0 C               = dword ptr -278h
.text:00405CD0 lpFindFileData  = dword ptr -274h
.text:00405CD0 Destination     = byte ptr -268h
.text:00405CD0 var_267         = byte ptr -267h
.text:00405CD0 FindFileData    = _WIN32_FIND_DATAA ptr -158h
.text:00405CD0 lpFileName      = dword ptr  8
.text:00405CD0
.text:00405CD0                 push    ebp
.text:00405CD1                 xor     eax, eax
.text:00405CD3                 push    edi
.text:00405CD4                 push    esi
.text:00405CD5                 push    ebx
.text:00405CD6                 sub     esp, 26Ch
.text:00405CDC                 mov     esi, [esp+278h+lpFileName]
.text:00405CE3                 lea     ebp, [esp+278h+Destination]
.text:00405CE7                 test    esi, esi
.text:00405CE9                 jz      loc_405E47
.text:00405CEF                 movsx   edx, byte ptr [esi]
.text:00405CF2                 mov     [esp+278h+C], edx ; C
.text:00405CF5                 call    isalpha
.text:00405CFA                 test    eax, eax
.text:00405CFC                 jz      short loc_405D0F
.text:00405CFE                 mov     eax, [esp+278h+lpFileName]
.text:00405D05                 cmp     byte ptr [eax+1], 3Ah ; ':'
.text:00405D09                 jz      loc_40604B
.text:00405D0F
.text:00405D0F loc_405D0F:                             ; CODE XREF: _win32_longpath+2C↑j
.text:00405D0F                 mov     edx, [esp+278h+lpFileName]
.text:00405D16                 movzx   eax, byte ptr [edx]
.text:00405D19                 cmp     al, 2Fh ; '/'
.text:00405D1B                 jz      loc_405F2B
.text:00405D21                 cmp     al, 5Ch ; '\'
.text:00405D23                 jz      loc_405F2B
.text:00405D29
.text:00405D29 loc_405D29:                             ; CODE XREF: _win32_longpath+26E↓j
.text:00405D29                                         ; _win32_longpath+2B1↓j ...
.text:00405D29                 mov     [ebp+268h+Destination], 0
.text:00405D2D                 movzx   ebx, byte ptr [esi]
.text:00405D30                 test    bl, bl
.text:00405D32                 jz      loc_405E29
.text:00405D38                 nop
.text:00405D39                 lea     esi, [esi+0]
.text:00405D40
.text:00405D40 loc_405D40:                             ; CODE XREF: _win32_longpath+153↓j
.text:00405D40                 cmp     bl, 2Fh ; '/'
.text:00405D43                 jz      loc_405EE0
.text:00405D49                 cmp     bl, 5Ch ; '\'
.text:00405D4C                 jz      loc_405EE0
.text:00405D52
.text:00405D52 loc_405D52:                             ; CODE XREF: _win32_longpath+21E↓j
.text:00405D52                                         ; _win32_longpath+22C↓j ...
.text:00405D52                 cmp     bl, 2Eh ; '.'
.text:00405D55                 jz      loc_405E80
.text:00405D5B
.text:00405D5B loc_405D5B:                             ; CODE XREF: _win32_longpath+1EF↓j
.text:00405D5B                                         ; _win32_longpath+203↓j
.text:00405D5B                 test    bl, bl
.text:00405D5D                 jz      loc_405E29
.text:00405D63                 cmp     bl, 2Fh ; '/'
.text:00405D66                 jz      short loc_405D82
.text:00405D68                 cmp     bl, 5Ch ; '\'
.text:00405D6B                 jz      short loc_405D82
.text:00405D6D                 lea     esi, [esi+0]
.text:00405D70
.text:00405D70 loc_405D70:                             ; CODE XREF: _win32_longpath+B0↓j
.text:00405D70                 inc     esi
.text:00405D71                 movzx   ebx, byte ptr [esi]
.text:00405D74                 test    bl, bl
.text:00405D76                 jz      short loc_405D82
.text:00405D78                 cmp     bl, 2Fh ; '/'
.text:00405D7B                 jz      short loc_405D82
.text:00405D7D                 cmp     bl, 5Ch ; '\'
.text:00405D80                 jnz     short loc_405D70
.text:00405D82
.text:00405D82 loc_405D82:                             ; CODE XREF: _win32_longpath+96↑j
.text:00405D82                                         ; _win32_longpath+9B↑j ...
.text:00405D82                 mov     byte ptr [esi], 0
.text:00405D85                 lea     edx, [esp+278h+FindFileData]
.text:00405D8C                 mov     eax, [esp+278h+lpFileName]
.text:00405D93                 mov     [esp+278h+lpFindFileData], edx ; lpFindFileData
.text:00405D97                 mov     [esp+278h+C], eax ; lpFileName
.text:00405D9A                 call    FindFirstFileA
.text:00405D9F                 mov     [esi], bl
.text:00405DA1                 sub     esp, 8
.text:00405DA4                 mov     edi, eax
.text:00405DA6                 cmp     eax, 0FFFFFFFFh
.text:00405DA9                 jz      loc_405E6C
.text:00405DAF                 lea     ebx, [esp+278h+FindFileData.cFileName]
.text:00405DB6                 mov     ecx, ebx
.text:00405DB8                 nop
.text:00405DB9                 lea     esi, [esi+0]
.text:00405DC0
.text:00405DC0 loc_405DC0:                             ; CODE XREF: _win32_longpath+105↓j
.text:00405DC0                 mov     eax, [ebx]
.text:00405DC2                 add     ebx, 4
.text:00405DC5                 lea     edx, [eax-1010101h]
.text:00405DCB                 not     eax
.text:00405DCD                 and     edx, eax
.text:00405DCF                 and     edx, 80808080h
.text:00405DD5                 jz      short loc_405DC0
.text:00405DD7                 test    edx, 8080h
.text:00405DDD                 jnz     short loc_405DE5
.text:00405DDF                 shr     edx, 10h
.text:00405DE2                 add     ebx, 2
.text:00405DE5
.text:00405DE5 loc_405DE5:                             ; CODE XREF: _win32_longpath+10D↑j
.text:00405DE5                 add     dl, dl
.text:00405DE7                 sbb     ebx, 3
.text:00405DEA                 sub     ebx, ecx
.text:00405DEC                 lea     ecx, [esp+278h+Destination]
.text:00405DF0                 sub     ecx, ebp
.text:00405DF2                 add     ecx, 105h
.text:00405DF8                 cmp     ecx, ebx
.text:00405DFA                 jle     short loc_405E52
.text:00405DFC                 mov     [esp+278h+C], ebp ; Destination
.text:00405DFF                 lea     edx, [esp+278h+FindFileData.cFileName]
.text:00405E06                 add     ebp, ebx
.text:00405E08                 mov     [esp+278h+lpFindFileData], edx ; Source
.text:00405E0C                 call    strcpy
.text:00405E11                 mov     [esp+278h+C], edi ; hFindFile
.text:00405E14                 call    FindClose
.text:00405E19                 sub     esp, 4
.text:00405E1C
.text:00405E1C loc_405E1C:                             ; CODE XREF: _win32_longpath+1E0↓j
.text:00405E1C                 movzx   ecx, byte ptr [esi]
.text:00405E1F                 test    cl, cl
.text:00405E21                 mov     bl, cl
.text:00405E23                 jnz     loc_405D40
.text:00405E29
.text:00405E29 loc_405E29:                             ; CODE XREF: _win32_longpath+62↑j
.text:00405E29                                         ; _win32_longpath+8D↑j
.text:00405E29                 mov     esi, [esp+278h+lpFileName]
.text:00405E30                 lea     ebp, [esp+278h+Destination]
.text:00405E34                 mov     [esp+278h+lpFindFileData], ebp ; Source
.text:00405E38                 mov     [esp+278h+C], esi ; Destination
.text:00405E3B                 call    strcpy
.text:00405E40                 mov     eax, [esp+278h+lpFileName]
.text:00405E47
.text:00405E47 loc_405E47:                             ; CODE XREF: _win32_longpath+19↑j
.text:00405E47                                         ; _win32_longpath+19A↓j
.text:00405E47                 add     esp, 26Ch
.text:00405E4D                 pop     ebx
.text:00405E4E                 pop     esi
.text:00405E4F                 pop     edi
.text:00405E50                 pop     ebp
.text:00405E51                 retn
.text:00405E52 ; ---------------------------------------------------------------------------
.text:00405E52
.text:00405E52 loc_405E52:                             ; CODE XREF: _win32_longpath+12A↑j
.text:00405E52                 mov     [esp+278h+C], edi ; hFindFile
.text:00405E55                 call    FindClose
.text:00405E5A                 sub     esp, 4
.text:00405E5D                 call    _errno
.text:00405E62                 mov     dword ptr [eax], 22h ; '"'
.text:00405E68
.text:00405E68 loc_405E68:                             ; CODE XREF: _win32_longpath+1A7↓j
.text:00405E68                 xor     eax, eax
.text:00405E6A                 jmp     short loc_405E47
.text:00405E6C ; ---------------------------------------------------------------------------
.text:00405E6C
.text:00405E6C loc_405E6C:                             ; CODE XREF: _win32_longpath+D9↑j
.text:00405E6C                 call    _errno
.text:00405E71                 mov     dword ptr [eax], 16h
.text:00405E77                 jmp     short loc_405E68
.text:00405E77 ; ---------------------------------------------------------------------------
.text:00405E79                 align 10h
.text:00405E80
.text:00405E80 loc_405E80:                             ; CODE XREF: _win32_longpath+85↑j
.text:00405E80                 movzx   eax, byte ptr [esi+1]
.text:00405E84                 test    al, al
.text:00405E86                 jnz     short loc_405EB5
.text:00405E88
.text:00405E88 loc_405E88:                             ; CODE XREF: _win32_longpath+1E7↓j
.text:00405E88                                         ; _win32_longpath+1EB↓j ...
.text:00405E88                 test    bl, bl
.text:00405E8A                 jz      short loc_405EAC
.text:00405E8C                 cmp     bl, 2Fh ; '/'
.text:00405E8F                 jz      short loc_405EAC
.text:00405E91                 cmp     bl, 5Ch ; '\'
.text:00405E94                 jz      short loc_405EAC
.text:00405E96
.text:00405E96 loc_405E96:                             ; CODE XREF: _win32_longpath+1DA↓j
.text:00405E96                 mov     [ebp+268h+Destination], bl
.text:00405E99                 inc     esi
.text:00405E9A                 inc     ebp
.text:00405E9B                 movzx   ebx, byte ptr [esi]
.text:00405E9E                 test    bl, bl
.text:00405EA0                 jz      short loc_405EAC
.text:00405EA2                 cmp     bl, 2Fh ; '/'
.text:00405EA5                 jz      short loc_405EAC
.text:00405EA7                 cmp     bl, 5Ch ; '\'
.text:00405EAA                 jnz     short loc_405E96
.text:00405EAC
.text:00405EAC loc_405EAC:                             ; CODE XREF: _win32_longpath+1BA↑j
.text:00405EAC                                         ; _win32_longpath+1BF↑j ...
.text:00405EAC                 mov     [ebp+268h+Destination], 0
.text:00405EB0                 jmp     loc_405E1C
.text:00405EB5 ; ---------------------------------------------------------------------------
.text:00405EB5
.text:00405EB5 loc_405EB5:                             ; CODE XREF: _win32_longpath+1B6↑j
.text:00405EB5                 cmp     al, 2Fh ; '/'
.text:00405EB7                 jz      short loc_405E88
.text:00405EB9                 cmp     al, 5Ch ; '\'
.text:00405EBB                 jz      short loc_405E88
.text:00405EBD                 cmp     al, 2Eh ; '.'
.text:00405EBF                 jnz     loc_405D5B
.text:00405EC5                 movzx   eax, byte ptr [esi+2]
.text:00405EC9                 test    al, al
.text:00405ECB                 jz      short loc_405E88
.text:00405ECD                 cmp     al, 2Fh ; '/'
.text:00405ECF                 jz      short loc_405E88
.text:00405ED1                 cmp     al, 5Ch ; '\'
.text:00405ED3                 jnz     loc_405D5B
.text:00405ED9                 jmp     short loc_405E88
.text:00405ED9 ; ---------------------------------------------------------------------------
.text:00405EDB                 align 10h
.text:00405EE0
.text:00405EE0 loc_405EE0:                             ; CODE XREF: _win32_longpath+73↑j
.text:00405EE0                                         ; _win32_longpath+7C↑j
.text:00405EE0                 mov     [ebp+268h+Destination], bl
.text:00405EE3                 inc     esi
.text:00405EE4                 inc     ebp
.text:00405EE5                 mov     [ebp+268h+Destination], 0
.text:00405EE9                 movzx   ebx, byte ptr [esi]
.text:00405EEC                 test    bl, bl
.text:00405EEE                 jz      loc_405D52
.text:00405EF4                 cmp     bl, 2Fh ; '/'
.text:00405EF7                 jz      short loc_405F10
.text:00405EF9                 cmp     bl, 5Ch ; '\'
.text:00405EFC                 jnz     loc_405D52
.text:00405F02                 lea     esi, [esi+0]
.text:00405F09                 lea     edi, [edi+0]
.text:00405F10
.text:00405F10 loc_405F10:                             ; CODE XREF: _win32_longpath+227↑j
.text:00405F10                                         ; _win32_longpath+24F↓j ...
.text:00405F10                 inc     esi
.text:00405F11                 movzx   ebx, byte ptr [esi]
.text:00405F14                 test    bl, bl
.text:00405F16                 jz      loc_405D52
.text:00405F1C                 cmp     bl, 2Fh ; '/'
.text:00405F1F                 jz      short loc_405F10
.text:00405F21                 cmp     bl, 5Ch ; '\'
.text:00405F24                 jz      short loc_405F10
.text:00405F26                 jmp     loc_405D52
.text:00405F2B ; ---------------------------------------------------------------------------
.text:00405F2B
.text:00405F2B loc_405F2B:                             ; CODE XREF: _win32_longpath+4B↑j
.text:00405F2B                                         ; _win32_longpath+53↑j
.text:00405F2B                 mov     edi, [esp+278h+lpFileName]
.text:00405F32                 movzx   edx, byte ptr [edi+1]
.text:00405F36                 cmp     dl, 2Fh ; '/'
.text:00405F39                 jz      short loc_405F44
.text:00405F3B                 cmp     dl, 5Ch ; '\'
.text:00405F3E                 jnz     loc_405D29
.text:00405F44
.text:00405F44 loc_405F44:                             ; CODE XREF: _win32_longpath+269↑j
.text:00405F44                 mov     esi, [esp+278h+lpFileName]
.text:00405F4B                 mov     [ebp+268h+Destination], al
.text:00405F4E                 mov     ecx, [esp+278h+lpFileName]
.text:00405F55                 inc     ebp
.text:00405F56                 add     esi, 2
.text:00405F59                 movzx   ebx, byte ptr [ecx+1]
.text:00405F5D                 mov     [ebp+268h+Destination], bl
.text:00405F60                 inc     ebp
.text:00405F61                 movzx   eax, byte ptr [ecx+2]
.text:00405F65                 test    al, al
.text:00405F67                 jz      loc_406043
.text:00405F6D                 cmp     al, 2Fh ; '/'
.text:00405F6F                 jz      loc_406028
.text:00405F75                 cmp     al, 5Ch ; '\'
.text:00405F77                 mov     bl, al
.text:00405F79                 jz      loc_406028
.text:00405F7F
.text:00405F7F loc_405F7F:                             ; CODE XREF: _win32_longpath+36E↓j
.text:00405F7F                                         ; _win32_longpath+376↓j
.text:00405F7F                 test    bl, bl
.text:00405F81                 jz      loc_405D29
.text:00405F87                 cmp     bl, 2Fh ; '/'
.text:00405F8A                 jz      short loc_405FAB
.text:00405F8C                 cmp     bl, 5Ch ; '\'
.text:00405F8F                 jz      short loc_405FAB
.text:00405F91
.text:00405F91 loc_405F91:                             ; CODE XREF: _win32_longpath+2D9↓j
.text:00405F91                 mov     [ebp+268h+Destination], bl
.text:00405F94                 inc     esi
.text:00405F95                 inc     ebp
.text:00405F96                 movzx   ebx, byte ptr [esi]
.text:00405F99                 test    bl, bl
.text:00405F9B                 jz      loc_405D29
.text:00405FA1                 cmp     bl, 2Fh ; '/'
.text:00405FA4                 jz      short loc_405FAB
.text:00405FA6                 cmp     bl, 5Ch ; '\'
.text:00405FA9                 jnz     short loc_405F91
.text:00405FAB
.text:00405FAB loc_405FAB:                             ; CODE XREF: _win32_longpath+2BA↑j
.text:00405FAB                                         ; _win32_longpath+2BF↑j ...
.text:00405FAB                 test    bl, bl
.text:00405FAD                 jz      loc_405D29
.text:00405FB3                 mov     [ebp+268h+Destination], bl
.text:00405FB6                 inc     esi
.text:00405FB7                 inc     ebp
.text:00405FB8                 movzx   ebx, byte ptr [esi]
.text:00405FBB                 test    bl, bl
.text:00405FBD                 jz      loc_405D29
.text:00405FC3                 cmp     bl, 2Fh ; '/'
.text:00405FC6                 jz      short loc_406010
.text:00405FC8                 cmp     bl, 5Ch ; '\'
.text:00405FCB                 jz      short loc_406010
.text:00405FCD
.text:00405FCD loc_405FCD:                             ; CODE XREF: _win32_longpath+356↓j
.text:00405FCD                 test    bl, bl
.text:00405FCF                 jz      loc_405D29
.text:00405FD5                 cmp     bl, 2Fh ; '/'
.text:00405FD8                 jz      loc_405D29
.text:00405FDE                 cmp     bl, 5Ch ; '\'
.text:00405FE1                 jz      loc_405D29
.text:00405FE7
.text:00405FE7 loc_405FE7:                             ; CODE XREF: _win32_longpath+333↓j
.text:00405FE7                 mov     [ebp+268h+Destination], bl
.text:00405FEA                 inc     esi
.text:00405FEB                 inc     ebp
.text:00405FEC                 movzx   ebx, byte ptr [esi]
.text:00405FEF                 test    bl, bl
.text:00405FF1                 jz      loc_405D29
.text:00405FF7                 cmp     bl, 2Fh ; '/'
.text:00405FFA                 jz      loc_405D29
.text:00406000                 cmp     bl, 5Ch ; '\'
.text:00406003                 jnz     short loc_405FE7
.text:00406005                 jmp     loc_405D29
.text:00406005 ; ---------------------------------------------------------------------------
.text:0040600A                 align 10h
.text:00406010
.text:00406010 loc_406010:                             ; CODE XREF: _win32_longpath+2F6↑j
.text:00406010                                         ; _win32_longpath+2FB↑j ...
.text:00406010                 inc     esi
.text:00406011                 movzx   ebx, byte ptr [esi]
.text:00406014                 test    bl, bl
.text:00406016                 jz      loc_405D29
.text:0040601C                 cmp     bl, 2Fh ; '/'
.text:0040601F                 jz      short loc_406010
.text:00406021                 cmp     bl, 5Ch ; '\'
.text:00406024                 jz      short loc_406010
.text:00406026                 jmp     short loc_405FCD
.text:00406028 ; ---------------------------------------------------------------------------
.text:00406028
.text:00406028 loc_406028:                             ; CODE XREF: _win32_longpath+29F↑j
.text:00406028                                         ; _win32_longpath+2A9↑j ...
.text:00406028                 inc     esi
.text:00406029                 movzx   ebx, byte ptr [esi]
.text:0040602C                 test    bl, bl
.text:0040602E                 jz      loc_405D29
.text:00406034                 cmp     bl, 2Fh ; '/'
.text:00406037                 jz      short loc_406028
.text:00406039                 cmp     bl, 5Ch ; '\'
.text:0040603C                 jz      short loc_406028
.text:0040603E                 jmp     loc_405F7F
.text:00406043 ; ---------------------------------------------------------------------------
.text:00406043
.text:00406043 loc_406043:                             ; CODE XREF: _win32_longpath+297↑j
.text:00406043                 movzx   ebx, byte ptr [esi]
.text:00406046                 jmp     loc_405F7F
.text:0040604B ; ---------------------------------------------------------------------------
.text:0040604B
.text:0040604B loc_40604B:                             ; CODE XREF: _win32_longpath+39↑j
.text:0040604B                 movzx   ecx, byte ptr [eax]
.text:0040604E                 mov     esi, eax
.text:00406050                 mov     [esp+278h+var_267], 3Ah ; ':'
.text:00406055                 add     esi, 2
.text:00406058                 lea     ebp, [esp+12h]
.text:0040605C                 mov     [esp+278h+Destination], cl
.text:00406060                 jmp     loc_405D29
.text:00406060 _win32_longpath endp
.text:00406060
.text:00406060 ; ---------------------------------------------------------------------------
.text:00406065                 align 10h
.text:00406070                 sub     esp, 0Ch
.text:00406073                 mov     edx, [esp+10h]
.text:00406077                 mov     dword ptr [esp+4], 0
.text:0040607F                 mov     [esp], edx
.text:00406082                 call    sub_408FC0
.text:00406087                 inc     eax
.text:00406088                 setnz   dl
.text:0040608B                 add     esp, 0Ch
.text:0040608E                 movzx   eax, dl
.text:00406091                 retn
.text:00406091 ; ---------------------------------------------------------------------------
.text:00406092                 align 10h
.text:004060A0
.text:004060A0 ; =============== S U B R O U T I N E =======================================
.text:004060A0
.text:004060A0
.text:004060A0 sub_4060A0      proc near               ; CODE XREF: sub_405BA0+B4↑p
.text:004060A0                                         ; sub_408E90+AA↓p
.text:004060A0
.text:004060A0 arg_0           = dword ptr  4
.text:004060A0
.text:004060A0                 mov     ecx, [esp+arg_0]
.text:004060A4                 mov     edx, ecx
.text:004060A6                 movzx   eax, byte ptr [ecx]
.text:004060A9                 test    al, al
.text:004060AB                 jz      short loc_4060BC
.text:004060AD                 lea     esi, [esi+0]
.text:004060B0
.text:004060B0 loc_4060B0:                             ; CODE XREF: sub_4060A0+1A↓j
.text:004060B0                 cmp     al, 5Ch ; '\'
.text:004060B2                 jz      short loc_4060C0
.text:004060B4
.text:004060B4 loc_4060B4:                             ; CODE XREF: sub_4060A0+23↓j
.text:004060B4                 inc     edx
.text:004060B5                 movzx   eax, byte ptr [edx]
.text:004060B8                 test    al, al
.text:004060BA                 jnz     short loc_4060B0
.text:004060BC
.text:004060BC loc_4060BC:                             ; CODE XREF: sub_4060A0+B↑j
.text:004060BC                 mov     eax, ecx
.text:004060BE                 retn
.text:004060BE ; ---------------------------------------------------------------------------
.text:004060BF                 align 10h
.text:004060C0
.text:004060C0 loc_4060C0:                             ; CODE XREF: sub_4060A0+12↑j
.text:004060C0                 mov     byte ptr [edx], 2Fh ; '/'
.text:004060C3                 jmp     short loc_4060B4
.text:004060C3 sub_4060A0      endp
.text:004060C3
.text:004060C3 ; ---------------------------------------------------------------------------
.text:004060C5                 align 10h
.text:004060D0                 push    ebx
.text:004060D1                 sub     esp, 8
.text:004060D4                 mov     ebx, [esp+14h]
.text:004060D8                 mov     edx, [esp+10h]
.text:004060DC                 mov     [esp], ebx
.text:004060DF                 mov     [esp+4], edx
.text:004060E3                 call    strcpy
.text:004060E8                 movzx   eax, byte ptr [ebx]
.text:004060EB                 mov     edx, ebx
.text:004060ED                 test    al, al
.text:004060EF                 jz      short loc_40610C
.text:004060F1                 jmp     short loc_406100
.text:004060F1 ; ---------------------------------------------------------------------------
.text:004060F3                 align 10h
.text:00406100
.text:00406100 loc_406100:                             ; CODE XREF: .text:004060F1↑j
.text:00406100                                         ; .text:0040610A↓j
.text:00406100                 cmp     al, 5Ch ; '\'
.text:00406102                 jz      short loc_406113
.text:00406104
.text:00406104 loc_406104:                             ; CODE XREF: .text:00406116↓j
.text:00406104                 inc     edx
.text:00406105                 movzx   eax, byte ptr [edx]
.text:00406108                 test    al, al
.text:0040610A                 jnz     short loc_406100
.text:0040610C
.text:0040610C loc_40610C:                             ; CODE XREF: .text:004060EF↑j
.text:0040610C                 add     esp, 8
.text:0040610F                 xor     eax, eax
.text:00406111                 pop     ebx
.text:00406112                 retn
.text:00406113 ; ---------------------------------------------------------------------------
.text:00406113
.text:00406113 loc_406113:                             ; CODE XREF: .text:00406102↑j
.text:00406113                 mov     byte ptr [edx], 2Fh ; '/'
.text:00406116                 jmp     short loc_406104
.text:00406116 ; ---------------------------------------------------------------------------
.text:00406118                 align 10h
.text:00406120
.text:00406120 ; =============== S U B R O U T I N E =======================================
.text:00406120
.text:00406120
.text:00406120 sub_406120      proc near               ; CODE XREF: sub_406FF0+16↓p
.text:00406120                                         ; sub_4074F0+1F↓p ...
.text:00406120
.text:00406120 arg_0           = dword ptr  4
.text:00406120
.text:00406120                 mov     ecx, [esp+arg_0]
.text:00406124                 mov     edx, ecx
.text:00406126                 movzx   eax, byte ptr [ecx]
.text:00406129                 test    al, al
.text:0040612B                 jz      short loc_40613C
.text:0040612D                 lea     esi, [esi+0]
.text:00406130
.text:00406130 loc_406130:                             ; CODE XREF: sub_406120+1A↓j
.text:00406130                 cmp     al, 2Fh ; '/'
.text:00406132                 jz      short loc_406140
.text:00406134
.text:00406134 loc_406134:                             ; CODE XREF: sub_406120+23↓j
.text:00406134                 inc     edx
.text:00406135                 movzx   eax, byte ptr [edx]
.text:00406138                 test    al, al
.text:0040613A                 jnz     short loc_406130
.text:0040613C
.text:0040613C loc_40613C:                             ; CODE XREF: sub_406120+B↑j
.text:0040613C                 mov     eax, ecx
.text:0040613E                 retn
.text:0040613E ; ---------------------------------------------------------------------------
.text:0040613F                 align 10h
.text:00406140
.text:00406140 loc_406140:                             ; CODE XREF: sub_406120+12↑j
.text:00406140                 mov     byte ptr [edx], 5Ch ; '\'
.text:00406143                 jmp     short loc_406134
.text:00406143 sub_406120      endp
.text:00406143
.text:00406143 ; ---------------------------------------------------------------------------
.text:00406145                 align 10h
.text:00406150                 push    ebx
.text:00406151                 sub     esp, 8
.text:00406154                 mov     ebx, [esp+14h]
.text:00406158                 mov     edx, [esp+10h]
.text:0040615C                 mov     [esp], ebx
.text:0040615F                 mov     [esp+4], edx
.text:00406163                 call    strcpy
.text:00406168                 movzx   eax, byte ptr [ebx]
.text:0040616B                 mov     edx, ebx
.text:0040616D                 test    al, al
.text:0040616F                 jz      short loc_40618C
.text:00406171                 jmp     short loc_406180
.text:00406171 ; ---------------------------------------------------------------------------
.text:00406173                 align 10h
.text:00406180
.text:00406180 loc_406180:                             ; CODE XREF: .text:00406171↑j
.text:00406180                                         ; .text:0040618A↓j
.text:00406180                 cmp     al, 2Fh ; '/'
.text:00406182                 jz      short loc_406193
.text:00406184
.text:00406184 loc_406184:                             ; CODE XREF: .text:00406196↓j
.text:00406184                 inc     edx
.text:00406185                 movzx   eax, byte ptr [edx]
.text:00406188                 test    al, al
.text:0040618A                 jnz     short loc_406180
.text:0040618C
.text:0040618C loc_40618C:                             ; CODE XREF: .text:0040616F↑j
.text:0040618C                 add     esp, 8
.text:0040618F                 xor     eax, eax
.text:00406191                 pop     ebx
.text:00406192                 retn
.text:00406193 ; ---------------------------------------------------------------------------
.text:00406193
.text:00406193 loc_406193:                             ; CODE XREF: .text:00406182↑j
.text:00406193                 mov     byte ptr [edx], 5Ch ; '\'
.text:00406196                 jmp     short loc_406184
.text:00406196 ; ---------------------------------------------------------------------------
.text:00406198                 align 10h
.text:004061A0                 push    ebx
.text:004061A1                 sub     esp, 8
.text:004061A4                 mov     ebx, [esp+14h]
.text:004061A8                 mov     edx, [esp+10h]
.text:004061AC                 mov     [esp+4], ebx
.text:004061B0                 mov     [esp], edx
.text:004061B3                 call    sub_408E40
.text:004061B8                 movzx   eax, byte ptr [ebx]
.text:004061BB                 mov     edx, ebx
.text:004061BD                 test    al, al
.text:004061BF                 jz      short loc_4061DC
.text:004061C1                 jmp     short loc_4061D0
.text:004061C1 ; ---------------------------------------------------------------------------
.text:004061C3                 align 10h
.text:004061D0
.text:004061D0 loc_4061D0:                             ; CODE XREF: .text:004061C1↑j
.text:004061D0                                         ; .text:004061DA↓j
.text:004061D0                 cmp     al, 2Fh ; '/'
.text:004061D2                 jz      short loc_4061E3
.text:004061D4
.text:004061D4 loc_4061D4:                             ; CODE XREF: .text:004061E6↓j
.text:004061D4                 inc     edx
.text:004061D5                 movzx   eax, byte ptr [edx]
.text:004061D8                 test    al, al
.text:004061DA                 jnz     short loc_4061D0
.text:004061DC
.text:004061DC loc_4061DC:                             ; CODE XREF: .text:004061BF↑j
.text:004061DC                 add     esp, 8
.text:004061DF                 xor     eax, eax
.text:004061E1                 pop     ebx
.text:004061E2                 retn
.text:004061E3 ; ---------------------------------------------------------------------------
.text:004061E3
.text:004061E3 loc_4061E3:                             ; CODE XREF: .text:004061D2↑j
.text:004061E3                 mov     byte ptr [edx], 5Ch ; '\'
.text:004061E6                 jmp     short loc_4061D4
.text:004061E6 ; ---------------------------------------------------------------------------
.text:004061E8                 align 10h
.text:004061F0                 push    ebx
.text:004061F1                 sub     esp, 8
.text:004061F4                 mov     ebx, [esp+14h]
.text:004061F8                 mov     edx, [esp+10h]
.text:004061FC                 mov     [esp], ebx
.text:004061FF                 mov     [esp+4], edx
.text:00406203                 call    sub_408E40
.text:00406208                 movzx   eax, byte ptr [ebx]
.text:0040620B                 mov     edx, ebx
.text:0040620D                 test    al, al
.text:0040620F                 jz      short loc_40622C
.text:00406211                 jmp     short loc_406220
.text:00406211 ; ---------------------------------------------------------------------------
.text:00406213                 align 10h
.text:00406220
.text:00406220 loc_406220:                             ; CODE XREF: .text:00406211↑j
.text:00406220                                         ; .text:0040622A↓j
.text:00406220                 cmp     al, 5Ch ; '\'
.text:00406222                 jz      short loc_406231
.text:00406224
.text:00406224 loc_406224:                             ; CODE XREF: .text:00406234↓j
.text:00406224                 inc     edx
.text:00406225                 movzx   eax, byte ptr [edx]
.text:00406228                 test    al, al
.text:0040622A                 jnz     short loc_406220
.text:0040622C
.text:0040622C loc_40622C:                             ; CODE XREF: .text:0040620F↑j
.text:0040622C                 add     esp, 8
.text:0040622F                 pop     ebx
.text:00406230                 retn
.text:00406231 ; ---------------------------------------------------------------------------
.text:00406231
.text:00406231 loc_406231:                             ; CODE XREF: .text:00406222↑j
.text:00406231                 mov     byte ptr [edx], 2Fh ; '/'
.text:00406234                 jmp     short loc_406224
.text:00406234 ; ---------------------------------------------------------------------------
.text:00406236                 align 10h
.text:00406240
.text:00406240 ; =============== S U B R O U T I N E =======================================
.text:00406240
.text:00406240
.text:00406240 ; int __cdecl sub_406240(LPSTR)
.text:00406240 sub_406240      proc near               ; CODE XREF: .text:004062CE↓p
.text:00406240                                         ; .text:0040630E↓p ...
.text:00406240
.text:00406240 hModule         = dword ptr -1Ch
.text:00406240 lpFilename      = dword ptr -18h
.text:00406240 nSize           = dword ptr -14h
.text:00406240 arg_0           = dword ptr  4
.text:00406240
.text:00406240                 push    esi
.text:00406241                 push    ebx
.text:00406242                 sub     esp, 14h
.text:00406245                 mov     esi, [esp+1Ch+arg_0]
.text:00406249                 mov     [esp+1Ch+nSize], 104h ; nSize
.text:00406251                 mov     [esp+1Ch+hModule], 0 ; hModule
.text:00406258                 mov     [esp+1Ch+lpFilename], esi ; lpFilename
.text:0040625C                 call    GetModuleFileNameA
.text:00406261                 sub     esp, 0Ch
.text:00406264                 test    eax, eax
.text:00406266                 jz      short loc_4062A8
.text:00406268                 cmp     eax, 104h
.text:0040626D                 jg      short loc_406299
.text:0040626F
.text:0040626F loc_40626F:                             ; CODE XREF: sub_406240+66↓j
.text:0040626F                                         ; sub_406240+78↓j
.text:0040626F                 movzx   eax, byte ptr [esi]
.text:00406272                 mov     edx, esi
.text:00406274                 test    al, al
.text:00406276                 jz      short loc_40628C
.text:00406278                 nop
.text:00406279                 lea     esi, [esi+0]
.text:00406280
.text:00406280 loc_406280:                             ; CODE XREF: sub_406240+4A↓j
.text:00406280                 cmp     al, 5Ch ; '\'
.text:00406282                 jz      short loc_406294
.text:00406284
.text:00406284 loc_406284:                             ; CODE XREF: sub_406240+57↓j
.text:00406284                 inc     edx
.text:00406285                 movzx   eax, byte ptr [edx]
.text:00406288                 test    al, al
.text:0040628A                 jnz     short loc_406280
.text:0040628C
.text:0040628C loc_40628C:                             ; CODE XREF: sub_406240+36↑j
.text:0040628C                 add     esp, 14h
.text:0040628F                 mov     eax, esi
.text:00406291                 pop     ebx
.text:00406292                 pop     esi
.text:00406293                 retn
.text:00406294 ; ---------------------------------------------------------------------------
.text:00406294
.text:00406294 loc_406294:                             ; CODE XREF: sub_406240+42↑j
.text:00406294                 mov     byte ptr [edx], 2Fh ; '/'
.text:00406297                 jmp     short loc_406284
.text:00406299 ; ---------------------------------------------------------------------------
.text:00406299
.text:00406299 loc_406299:                             ; CODE XREF: sub_406240+2D↑j
.text:00406299                 call    _errno
.text:0040629E                 mov     dword ptr [eax], 26h ; '&'
.text:004062A4                 xor     esi, esi
.text:004062A6                 jmp     short loc_40626F
.text:004062A8 ; ---------------------------------------------------------------------------
.text:004062A8
.text:004062A8 loc_4062A8:                             ; CODE XREF: sub_406240+26↑j
.text:004062A8                 call    sub_4067D0
.text:004062AD                 mov     ebx, eax
.text:004062AF                 xor     esi, esi
.text:004062B1                 call    _errno
.text:004062B6                 mov     [eax], ebx
.text:004062B8                 jmp     short loc_40626F
.text:004062B8 sub_406240      endp
.text:004062B8
.text:004062B8 ; ---------------------------------------------------------------------------
.text:004062BA                 align 10h
.text:004062C0                 sub     esp, 0Ch
.text:004062C3                 mov     [esp+8], ebx
.text:004062C7                 mov     ebx, [esp+10h]
.text:004062CB                 mov     [esp], ebx
.text:004062CE                 call    sub_406240
.text:004062D3                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:004062DB                 mov     [esp], ebx
.text:004062DE                 call    strrchr
.text:004062E3                 test    eax, eax
.text:004062E5                 jz      short loc_4062EA
.text:004062E7                 lea     ebx, [eax+1]
.text:004062EA
.text:004062EA loc_4062EA:                             ; CODE XREF: .text:004062E5↑j
.text:004062EA                 mov     eax, ebx
.text:004062EC                 mov     ebx, [esp+8]
.text:004062F0                 add     esp, 0Ch
.text:004062F3                 retn
.text:004062F3 ; ---------------------------------------------------------------------------
.text:004062F4                 align 10h
.text:00406300                 sub     esp, 0Ch
.text:00406303                 mov     [esp+8], ebx
.text:00406307                 mov     ebx, [esp+10h]
.text:0040630B                 mov     [esp], ebx
.text:0040630E                 call    sub_406240
.text:00406313                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:0040631B                 mov     [esp], ebx
.text:0040631E                 call    strrchr
.text:00406323                 test    eax, eax
.text:00406325                 jz      short loc_40632A
.text:00406327                 mov     byte ptr [eax], 0
.text:0040632A
.text:0040632A loc_40632A:                             ; CODE XREF: .text:00406325↑j
.text:0040632A                 mov     eax, ebx
.text:0040632C                 mov     ebx, [esp+8]
.text:00406330                 add     esp, 0Ch
.text:00406333                 retn
.text:00406333 ; ---------------------------------------------------------------------------
.text:00406334                 align 10h
.text:00406340                 sub     esp, 0Ch
.text:00406343                 mov     [esp+8], ebx
.text:00406347                 mov     ebx, [esp+10h]
.text:0040634B                 mov     [esp], ebx
.text:0040634E                 call    sub_406240
.text:00406353                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:0040635B                 mov     [esp], ebx
.text:0040635E                 call    strrchr
.text:00406363                 test    eax, eax
.text:00406365                 jz      short loc_40636A
.text:00406367                 mov     byte ptr [eax], 0
.text:0040636A
.text:0040636A loc_40636A:                             ; CODE XREF: .text:00406365↑j
.text:0040636A                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:00406372                 mov     [esp], ebx
.text:00406375                 call    strrchr
.text:0040637A                 test    eax, eax
.text:0040637C                 jz      short loc_406381
.text:0040637E                 mov     byte ptr [eax], 0
.text:00406381
.text:00406381 loc_406381:                             ; CODE XREF: .text:0040637C↑j
.text:00406381                 mov     eax, ebx
.text:00406383                 mov     ebx, [esp+8]
.text:00406387                 add     esp, 0Ch
.text:0040638A                 retn
.text:0040638A ; ---------------------------------------------------------------------------
.text:0040638B                 align 10h
.text:00406390                 sub     esp, 1Ch
.text:00406393                 mov     edx, [esp+20h]
.text:00406397                 mov     [esp+10h], ebx
.text:0040639B                 xor     ebx, ebx
.text:0040639D                 mov     [esp+14h], esi
.text:004063A1                 mov     [esp+18h], edi
.text:004063A5                 mov     [esp], edx
.text:004063A8                 call    sub_408E70
.text:004063AD                 mov     edx, [esp+24h]
.text:004063B1                 mov     edi, eax
.text:004063B3                 mov     [esp], edx
.text:004063B6                 call    sub_408E70
.text:004063BB                 mov     [esp+4], eax
.text:004063BF                 mov     esi, eax
.text:004063C1                 mov     [esp], edi
.text:004063C4                 call    _stricmp_0
.text:004063C9                 mov     [esp], edi
.text:004063CC                 test    eax, eax
.text:004063CE                 setz    bl
.text:004063D1                 call    free
.text:004063D6                 mov     [esp], esi
.text:004063D9                 call    free
.text:004063DE                 mov     eax, ebx
.text:004063E0                 mov     esi, [esp+14h]
.text:004063E4                 mov     ebx, [esp+10h]
.text:004063E8                 mov     edi, [esp+18h]
.text:004063EC                 add     esp, 1Ch
.text:004063EF                 retn
.text:004063F0 ; ---------------------------------------------------------------------------
.text:004063F0                 xor     eax, eax
.text:004063F2                 retn
.text:004063F2 ; ---------------------------------------------------------------------------
.text:004063F3 aKernel32Dll    db 'kernel32.dll',0     ; DATA XREF: .text:00406427↓o
.text:00406400 aGetlongpathnam db 'GetLongPathName',0  ; DATA XREF: .text:00406436↓o
.text:00406410 ; ---------------------------------------------------------------------------
.text:00406410                 sub     esp, 1Ch
.text:00406413                 mov     [esp+10h], ebx
.text:00406417                 mov     ebx, [esp+20h]
.text:0040641B                 mov     [esp+18h], edi
.text:0040641F                 mov     edi, [esp+24h]
.text:00406423                 mov     [esp+14h], esi
.text:00406427                 mov     dword ptr [esp], offset aKernel32Dll ; "kernel32.dll"
.text:0040642E                 call    GetModuleHandleA
.text:00406433                 sub     esp, 4
.text:00406436                 mov     dword ptr [esp+4], offset aGetlongpathnam ; "GetLongPathName"
.text:0040643E                 mov     [esp], eax
.text:00406441                 call    GetProcAddress
.text:00406446                 sub     esp, 8
.text:00406449                 test    eax, eax
.text:0040644B                 jz      short loc_406463
.text:0040644D                 mov     dword ptr [esp+8], 104h
.text:00406455                 mov     [esp+4], ebx
.text:00406459                 mov     [esp], edi
.text:0040645C                 call    eax
.text:0040645E                 sub     esp, 0Ch
.text:00406461                 mov     esi, eax
.text:00406463
.text:00406463 loc_406463:                             ; CODE XREF: .text:0040644B↑j
.text:00406463                 test    esi, esi
.text:00406465                 jz      short loc_406480
.text:00406467
.text:00406467 loc_406467:                             ; CODE XREF: .text:0040649B↓j
.text:00406467                 mov     eax, ebx
.text:00406469                 mov     esi, [esp+14h]
.text:0040646D                 mov     ebx, [esp+10h]
.text:00406471                 mov     edi, [esp+18h]
.text:00406475                 add     esp, 1Ch
.text:00406478                 retn
.text:00406478 ; ---------------------------------------------------------------------------
.text:00406479                 align 10h
.text:00406480
.text:00406480 loc_406480:                             ; CODE XREF: .text:00406465↑j
.text:00406480                 call    sub_408B90
.text:00406485                 mov     [esp], ebx
.text:00406488                 mov     [esp+4], edi
.text:0040648C                 call    strcpy
.text:00406491                 mov     [esp], ebx
.text:00406494                 call    _win32_longpath
.text:00406499                 mov     ebx, eax
.text:0040649B                 jmp     short loc_406467
.text:0040649B ; ---------------------------------------------------------------------------
.text:0040649D                 align 10h
.text:004064A0                 sub     esp, 1Ch
.text:004064A3                 mov     [esp+18h], edi
.text:004064A7                 mov     edi, [esp+20h]
.text:004064AB                 mov     [esp+10h], ebx
.text:004064AF                 mov     [esp+14h], esi
.text:004064B3                 mov     dword ptr [esp+8], 0
.text:004064BB                 mov     dword ptr [esp+4], 0
.text:004064C3                 mov     [esp], edi
.text:004064C6                 call    GetShortPathNameA
.text:004064CB                 sub     esp, 0Ch
.text:004064CE                 mov     ebx, eax
.text:004064D0                 test    eax, eax
.text:004064D2                 jz      short loc_406520
.text:004064D4                 lea     edx, [eax+1]
.text:004064D7                 mov     [esp], edx
.text:004064DA                 call    malloc
.text:004064DF                 test    eax, eax
.text:004064E1                 mov     esi, eax
.text:004064E3                 jz      short loc_406520
.text:004064E5                 mov     [esp+8], ebx
.text:004064E9                 mov     [esp+4], eax
.text:004064ED                 mov     [esp], edi
.text:004064F0                 call    GetShortPathNameA
.text:004064F5                 sub     esp, 0Ch
.text:004064F8                 mov     edx, esi
.text:004064FA                 test    eax, eax
.text:004064FC                 jz      short loc_406512
.text:004064FE                 mov     esi, esi
.text:00406500
.text:00406500 loc_406500:                             ; CODE XREF: .text:00406530↓j
.text:00406500                 mov     ebx, [esp+10h]
.text:00406504                 mov     eax, edx
.text:00406506                 mov     esi, [esp+14h]
.text:0040650A                 mov     edi, [esp+18h]
.text:0040650E                 add     esp, 1Ch
.text:00406511                 retn
.text:00406512 ; ---------------------------------------------------------------------------
.text:00406512
.text:00406512 loc_406512:                             ; CODE XREF: .text:004064FC↑j
.text:00406512                 mov     [esp], esi
.text:00406515                 call    free
.text:0040651A                 lea     esi, [esi+0]
.text:00406520
.text:00406520 loc_406520:                             ; CODE XREF: .text:004064D2↑j
.text:00406520                                         ; .text:004064E3↑j
.text:00406520                 call    sub_4067D0
.text:00406525                 mov     esi, eax
.text:00406527                 call    _errno
.text:0040652C                 mov     [eax], esi
.text:0040652E                 mov     edx, edi
.text:00406530                 jmp     short loc_406500
.text:00406530 ; ---------------------------------------------------------------------------
.text:00406532                 align 10h
.text:00406540
.text:00406540 ; =============== S U B R O U T I N E =======================================
.text:00406540
.text:00406540 ; Attributes: info_from_lumina
.text:00406540
.text:00406540 ___get_errno    proc near               ; CODE XREF: sub_4067D0+B↓p
.text:00406540
.text:00406540 arg_0           = dword ptr  4
.text:00406540
.text:00406540                 mov     eax, [esp+arg_0]
.text:00406544                 cmp     eax, 53h ; 'S'
.text:00406547                 jg      loc_406640
.text:0040654D                 cmp     eax, 52h ; 'R'
.text:00406550                 jge     short loc_4065A2
.text:00406552                 cmp     eax, 0Fh
.text:00406555                 jz      short loc_406570
.text:00406557                 cmp     eax, 0Fh
.text:0040655A                 jg      short loc_4065D0
.text:0040655C                 cmp     eax, 9
.text:0040655F                 jg      short loc_4065B0
.text:00406561                 cmp     eax, 7
.text:00406564                 jge     short loc_4065A9
.text:00406566                 cmp     eax, 3
.text:00406569                 jg      short loc_40658A
.text:0040656B                 cmp     eax, 2
.text:0040656E                 jl      short loc_406583
.text:00406570
.text:00406570 loc_406570:                             ; CODE XREF: ___get_errno+15↑j
.text:00406570                                         ; ___get_errno+9D↓j ...
.text:00406570                 mov     edx, 2
.text:00406575                 lea     esi, [esi+0]
.text:00406579                 lea     edi, [edi+0]
.text:00406580
.text:00406580 loc_406580:                             ; CODE XREF: ___get_errno+48↓j
.text:00406580                                         ; ___get_errno+59↓j ...
.text:00406580                 mov     eax, edx
.text:00406582                 retn
.text:00406583 ; ---------------------------------------------------------------------------
.text:00406583
.text:00406583 loc_406583:                             ; CODE XREF: ___get_errno+2E↑j
.text:00406583                                         ; ___get_errno+78↓j ...
.text:00406583                 mov     edx, 16h
.text:00406588                 jmp     short loc_406580
.text:0040658A ; ---------------------------------------------------------------------------
.text:0040658A
.text:0040658A loc_40658A:                             ; CODE XREF: ___get_errno+29↑j
.text:0040658A                 cmp     eax, 5
.text:0040658D                 jz      short loc_4065A2
.text:0040658F                 cmp     eax, 5
.text:00406592                 jg      short loc_40659B
.text:00406594                 mov     edx, 18h
.text:00406599                 jmp     short loc_406580
.text:0040659B ; ---------------------------------------------------------------------------
.text:0040659B
.text:0040659B loc_40659B:                             ; CODE XREF: ___get_errno+52↑j
.text:0040659B                                         ; ___get_errno+180↓j
.text:0040659B                 mov     edx, 9
.text:004065A0                 jmp     short loc_406580
.text:004065A2 ; ---------------------------------------------------------------------------
.text:004065A2
.text:004065A2 loc_4065A2:                             ; CODE XREF: ___get_errno+10↑j
.text:004065A2                                         ; ___get_errno+4D↑j ...
.text:004065A2                 mov     edx, 0Dh
.text:004065A7                 jmp     short loc_406580
.text:004065A9 ; ---------------------------------------------------------------------------
.text:004065A9
.text:004065A9 loc_4065A9:                             ; CODE XREF: ___get_errno+24↑j
.text:004065A9                                         ; ___get_errno+73↓j ...
.text:004065A9                 mov     edx, 0Ch
.text:004065AE                 jmp     short loc_406580
.text:004065B0 ; ---------------------------------------------------------------------------
.text:004065B0
.text:004065B0 loc_4065B0:                             ; CODE XREF: ___get_errno+1F↑j
.text:004065B0                 cmp     eax, 0Dh
.text:004065B3                 jg      short loc_4065A9
.text:004065B5                 cmp     eax, 0Ch
.text:004065B8                 jge     short loc_406583
.text:004065BA                 cmp     eax, 0Ah
.text:004065BD                 mov     edx, 7
.text:004065C2                 jz      short loc_406580
.text:004065C4                 cmp     eax, 0Bh
.text:004065C7                 jnz     short loc_406583
.text:004065C9
.text:004065C9 loc_4065C9:                             ; CODE XREF: ___get_errno+21A↓j
.text:004065C9                 mov     edx, 8
.text:004065CE                 jmp     short loc_406580
.text:004065D0 ; ---------------------------------------------------------------------------
.text:004065D0
.text:004065D0 loc_4065D0:                             ; CODE XREF: ___get_errno+1A↑j
.text:004065D0                 cmp     eax, 22h ; '"'
.text:004065D3                 jg      short loc_406604
.text:004065D5                 cmp     eax, 16h
.text:004065D8                 jge     short loc_4065A2
.text:004065DA                 cmp     eax, 12h
.text:004065DD                 jz      short loc_406570
.text:004065DF                 cmp     eax, 12h
.text:004065E2                 jg      short loc_4065F5
.text:004065E4                 cmp     eax, 10h
.text:004065E7                 jz      short loc_4065A2
.text:004065E9                 mov     edx, 12h
.text:004065EE                 cmp     eax, 11h
.text:004065F1
.text:004065F1 loc_4065F1:                             ; CODE XREF: ___get_errno+172↓j
.text:004065F1                                         ; ___get_errno+24C↓j ...
.text:004065F1                 jnz     short loc_406583
.text:004065F3                 jmp     short loc_406580
.text:004065F5 ; ---------------------------------------------------------------------------
.text:004065F5
.text:004065F5 loc_4065F5:                             ; CODE XREF: ___get_errno+A2↑j
.text:004065F5                 cmp     eax, 14h
.text:004065F8                 jle     short loc_4065A2
.text:004065FA
.text:004065FA loc_4065FA:                             ; CODE XREF: ___get_errno+1D7↓j
.text:004065FA                 mov     edx, 10h
.text:004065FF                 jmp     loc_406580
.text:00406604 ; ---------------------------------------------------------------------------
.text:00406604
.text:00406604 loc_406604:                             ; CODE XREF: ___get_errno+93↑j
.text:00406604                 cmp     eax, 41h ; 'A'
.text:00406607                 jz      short loc_4065A2
.text:00406609                 cmp     eax, 41h ; 'A'
.text:0040660C                 jg      short loc_406621
.text:0040660E                 cmp     eax, 24h ; '$'
.text:00406611                 jz      short loc_4065A2
.text:00406613                 cmp     eax, 35h ; '5'
.text:00406616                 jnz     loc_406583
.text:0040661C                 jmp     loc_406570
.text:00406621 ; ---------------------------------------------------------------------------
.text:00406621
.text:00406621 loc_406621:                             ; CODE XREF: ___get_errno+CC↑j
.text:00406621                 cmp     eax, 43h ; 'C'
.text:00406624                 jz      loc_406570
.text:0040662A                 cmp     eax, 50h ; 'P'
.text:0040662D                 jnz     loc_406583
.text:00406633
.text:00406633 loc_406633:                             ; CODE XREF: ___get_errno+1FB↓j
.text:00406633                 mov     edx, 11h
.text:00406638                 jmp     loc_406580
.text:00406638 ; ---------------------------------------------------------------------------
.text:0040663D                 align 10h
.text:00406640
.text:00406640 loc_406640:                             ; CODE XREF: ___get_errno+7↑j
.text:00406640                 cmp     eax, 0A1h ; '¡'
.text:00406645                 jz      loc_406570
.text:0040664B                 cmp     eax, 0A1h ; '¡'
.text:00406650                 jg      loc_406700
.text:00406656                 cmp     eax, 81h
.text:0040665B                 jg      short loc_4066C5
.text:0040665D                 cmp     eax, 80h ; '€'
.text:00406662                 mov     edx, 0Ah
.text:00406667                 jge     loc_406580
.text:0040666D                 cmp     eax, 6Ch ; 'l'
.text:00406670                 jz      loc_4065A2
.text:00406676                 cmp     eax, 6Ch ; 'l'
.text:00406679                 jg      short loc_406697
.text:0040667B                 cmp     eax, 57h ; 'W'
.text:0040667E                 jz      loc_406583
.text:00406684                 cmp     eax, 59h ; 'Y'
.text:00406687                 jnz     loc_406583
.text:0040668D
.text:0040668D loc_40668D:                             ; CODE XREF: ___get_errno+1E9↓j
.text:0040668D                                         ; ___get_errno+23C↓j
.text:0040668D                 mov     edx, 0Bh
.text:00406692                 jmp     loc_406580
.text:00406697 ; ---------------------------------------------------------------------------
.text:00406697
.text:00406697 loc_406697:                             ; CODE XREF: ___get_errno+139↑j
.text:00406697                 cmp     eax, 70h ; 'p'
.text:0040669A                 mov     edx, 1Ch
.text:0040669F                 jz      loc_406580
.text:004066A5                 cmp     eax, 70h ; 'p'
.text:004066A8                 jg      short loc_4066B7
.text:004066AA                 mov     edx, 20h ; ' '
.text:004066AF                 cmp     eax, 6Dh ; 'm'
.text:004066B2                 jmp     loc_4065F1
.text:004066B7 ; ---------------------------------------------------------------------------
.text:004066B7
.text:004066B7 loc_4066B7:                             ; CODE XREF: ___get_errno+168↑j
.text:004066B7                 cmp     eax, 72h ; 'r'
.text:004066BA
.text:004066BA loc_4066BA:                             ; CODE XREF: ___get_errno+19C↓j
.text:004066BA                 jnz     loc_406583
.text:004066C0                 jmp     loc_40659B
.text:004066C5 ; ---------------------------------------------------------------------------
.text:004066C5
.text:004066C5 loc_4066C5:                             ; CODE XREF: ___get_errno+11B↑j
.text:004066C5                 cmp     eax, 84h ; '„'
.text:004066CA                 jz      loc_4065A2
.text:004066D0                 cmp     eax, 84h ; '„'
.text:004066D5                 jg      short loc_4066DE
.text:004066D7                 cmp     eax, 82h ; '‚'
.text:004066DC                 jmp     short loc_4066BA
.text:004066DE ; ---------------------------------------------------------------------------
.text:004066DE
.text:004066DE loc_4066DE:                             ; CODE XREF: ___get_errno+195↑j
.text:004066DE                 cmp     eax, 91h ; '‘'
.text:004066E3                 mov     edx, 29h ; ')'
.text:004066E8                 jz      loc_406580
.text:004066EE                 cmp     eax, 9Eh ; 'ž'
.text:004066F3
.text:004066F3 loc_4066F3:                             ; CODE XREF: ___get_errno+1F4↓j
.text:004066F3                 jnz     loc_406583
.text:004066F9                 jmp     loc_4065A2
.text:004066F9 ; ---------------------------------------------------------------------------
.text:004066FE                 align 10h
.text:00406700
.text:00406700 loc_406700:                             ; CODE XREF: ___get_errno+110↑j
.text:00406700                 cmp     eax, 0CEh ; 'Î'
.text:00406705                 jz      loc_406570
.text:0040670B                 cmp     eax, 0CEh ; 'Î'
.text:00406710                 jg      short loc_406760
.text:00406712                 cmp     eax, 0AAh ; 'ª'
.text:00406717                 jz      loc_4065FA
.text:0040671D                 cmp     eax, 0AAh ; 'ª'
.text:00406722                 jg      short loc_406736
.text:00406724                 cmp     eax, 0A4h ; '¤'
.text:00406729                 jz      loc_40668D
.text:0040672F                 cmp     eax, 0A7h ; '§'
.text:00406734                 jmp     short loc_4066F3
.text:00406736 ; ---------------------------------------------------------------------------
.text:00406736
.text:00406736 loc_406736:                             ; CODE XREF: ___get_errno+1E2↑j
.text:00406736                 cmp     eax, 0B7h ; '·'
.text:0040673B                 jz      loc_406633
.text:00406741                 cmp     eax, 0B7h ; '·'
.text:00406746                 jl      loc_406583
.text:0040674C                 sub     eax, 0BCh ; '¼'
.text:00406751                 cmp     eax, 0Eh
.text:00406754                 ja      loc_406583
.text:0040675A                 jmp     loc_4065C9
.text:0040675A ; ---------------------------------------------------------------------------
.text:0040675F                 align 10h
.text:00406760
.text:00406760 loc_406760:                             ; CODE XREF: ___get_errno+1D0↑j
.text:00406760                 cmp     eax, 46Bh
.text:00406765                 mov     edx, 24h ; '$'
.text:0040676A                 jz      loc_406580
.text:00406770                 cmp     eax, 46Bh
.text:00406775                 jg      short loc_406791
.text:00406777                 cmp     eax, 0D7h ; '×'
.text:0040677C                 jz      loc_40668D
.text:00406782                 mov     edx, 5
.text:00406787                 cmp     eax, 45Dh
.text:0040678C                 jmp     loc_4065F1
.text:00406791 ; ---------------------------------------------------------------------------
.text:00406791
.text:00406791 loc_406791:                             ; CODE XREF: ___get_errno+235↑j
.text:00406791                 cmp     eax, 4D5h
.text:00406796                 mov     edx, 4
.text:0040679B                 jz      loc_406580
.text:004067A1                 cmp     eax, 4D5h
.text:004067A6                 jg      short loc_4067B7
.text:004067A8                 mov     edx, 13h
.text:004067AD                 cmp     eax, 4B0h
.text:004067B2                 jmp     loc_4065F1
.text:004067B7 ; ---------------------------------------------------------------------------
.text:004067B7
.text:004067B7 loc_4067B7:                             ; CODE XREF: ___get_errno+266↑j
.text:004067B7                 cmp     eax, 718h
.text:004067BC                 jnz     loc_406583
.text:004067C2                 jmp     loc_4065A9
.text:004067C2 ___get_errno    endp
.text:004067C2
.text:004067C2 ; ---------------------------------------------------------------------------
.text:004067C7                 align 10h
.text:004067D0
.text:004067D0 ; =============== S U B R O U T I N E =======================================
.text:004067D0
.text:004067D0
.text:004067D0 sub_4067D0      proc near               ; CODE XREF: sub_405A20:loc_405B7F↑p
.text:004067D0                                         ; sub_406240:loc_4062A8↑p ...
.text:004067D0
.text:004067D0 var_C           = dword ptr -0Ch
.text:004067D0
.text:004067D0                 sub     esp, 0Ch
.text:004067D3                 call    GetLastError
.text:004067D8                 mov     [esp+0Ch+var_C], eax
.text:004067DB                 call    ___get_errno
.text:004067E0                 add     esp, 0Ch
.text:004067E3                 retn
.text:004067E3 sub_4067D0      endp
.text:004067E3
.text:004067E3 ; ---------------------------------------------------------------------------
.text:004067E4                 align 10h
.text:004067F0 aComExeBatCmd   db '.com;.exe;.bat;.cmd',0
.text:004067F0                                         ; DATA XREF: .data:off_40E054↓o
.text:00406804 ; const CHAR LibFileName[]
.text:00406804 LibFileName     db 'KERNEL32.DLL',0     ; DATA XREF: sub_406830+11↓o
.text:00406804                                         ; sub_4069A0+C↓o ...
.text:00406811 ; const CHAR ProcName[]
.text:00406811 ProcName        db 'GetFileAttributesExA',0
.text:00406811                                         ; DATA XREF: sub_406830+28↓o
.text:00406826                 align 10h
.text:00406830
.text:00406830 ; =============== S U B R O U T I N E =======================================
.text:00406830
.text:00406830
.text:00406830 ; int __cdecl sub_406830(LPCSTR lpFileName, int)
.text:00406830 sub_406830      proc near               ; CODE XREF: .text:004079D4↓p
.text:00406830                                         ; sub_407DD0+37↓p
.text:00406830
.text:00406830 lpModuleName    = dword ptr -18Ch
.text:00406830 lpProcName      = dword ptr -188h
.text:00406830 var_184         = dword ptr -184h
.text:00406830 var_170         = dword ptr -170h
.text:00406830 var_164         = dword ptr -164h
.text:00406830 hModule         = dword ptr -160h
.text:00406830 FindFileData    = _WIN32_FIND_DATAA ptr -15Ch
.text:00406830 lpFileName      = dword ptr  4
.text:00406830 arg_4           = dword ptr  8
.text:00406830
.text:00406830                 push    ebp
.text:00406831                 push    edi
.text:00406832                 push    esi
.text:00406833                 push    ebx
.text:00406834                 sub     esp, 17Ch
.text:0040683A                 mov     ebx, [esp+18Ch+arg_4]
.text:00406841                 mov     [esp+18Ch+lpModuleName], offset LibFileName ; "KERNEL32.DLL"
.text:00406848                 call    GetModuleHandleA
.text:0040684D                 sub     esp, 4
.text:00406850                 mov     [esp+18Ch+hModule], eax
.text:00406854                 mov     edx, [esp+18Ch+hModule]
.text:00406858                 mov     [esp+18Ch+lpProcName], offset ProcName ; "GetFileAttributesExA"
.text:00406860                 mov     [esp+18Ch+lpModuleName], edx ; hModule
.text:00406863                 call    GetProcAddress
.text:00406868                 sub     esp, 8
.text:0040686B                 mov     ebp, eax
.text:0040686D                 mov     eax, [esp+18Ch+lpFileName]
.text:00406874                 mov     [esp+18Ch+lpModuleName], eax ; lpFileName
.text:00406877                 call    GetFileAttributesA
.text:0040687C                 sub     esp, 4
.text:0040687F                 mov     [esp+18Ch+var_164], eax
.text:00406883                 xor     eax, eax
.text:00406885                 cmp     [esp+18Ch+var_164], 0FFFFFFFFh
.text:0040688A                 jz      short loc_4068E1
.text:0040688C                 cld
.text:0040688D                 mov     ecx, 50h ; 'P'
.text:00406892                 lea     esi, [esp+18Ch+FindFileData]
.text:00406896                 mov     edi, esi
.text:00406898                 test    ebp, ebp
.text:0040689A                 rep stosd
.text:0040689C                 mov     [esp+18Ch+var_170], 0
.text:004068A4                 jz      short loc_4068C5
.text:004068A6                 mov     [esp+18Ch+var_184], ebx
.text:004068AA                 mov     ecx, [esp+18Ch+lpFileName]
.text:004068B1                 mov     [esp+18Ch+lpProcName], 0
.text:004068B9                 mov     [esp+18Ch+lpModuleName], ecx
.text:004068BC                 call    ebp
.text:004068BE                 sub     esp, 0Ch
.text:004068C1                 mov     [esp+18Ch+var_170], eax
.text:004068C5
.text:004068C5 loc_4068C5:                             ; CODE XREF: sub_406830+74↑j
.text:004068C5                 mov     eax, [esp+18Ch+var_170]
.text:004068C9                 test    eax, eax
.text:004068CB                 jz      short loc_4068F0
.text:004068CD
.text:004068CD loc_4068CD:                             ; CODE XREF: sub_406830+131↓j
.text:004068CD                                         ; sub_406830+14B↓j
.text:004068CD                 mov     ebx, [esp+18Ch+hModule]
.text:004068D1                 mov     [esp+18Ch+lpModuleName], ebx ; hLibModule
.text:004068D4                 call    FreeLibrary
.text:004068D9                 sub     esp, 4
.text:004068DC                 mov     eax, 1
.text:004068E1
.text:004068E1 loc_4068E1:                             ; CODE XREF: sub_406830+5A↑j
.text:004068E1                 add     esp, 17Ch
.text:004068E7                 pop     ebx
.text:004068E8                 pop     esi
.text:004068E9                 pop     edi
.text:004068EA                 pop     ebp
.text:004068EB                 retn
.text:004068EB ; ---------------------------------------------------------------------------
.text:004068EC                 align 10h
.text:004068F0
.text:004068F0 loc_4068F0:                             ; CODE XREF: sub_406830+9B↑j
.text:004068F0                 mov     [esp+18Ch+lpProcName], esi ; lpFindFileData
.text:004068F4                 mov     edx, [esp+18Ch+lpFileName]
.text:004068FB                 mov     [esp+18Ch+lpModuleName], edx ; lpFileName
.text:004068FE                 call    FindFirstFileA
.text:00406903                 sub     esp, 8
.text:00406906                 xor     ecx, ecx
.text:00406908                 cmp     eax, 0FFFFFFFFh
.text:0040690B                 setnz   cl
.text:0040690E                 mov     edi, [esp+18Ch+FindFileData.dwFileAttributes]
.text:00406912                 mov     [ebx], edi
.text:00406914                 mov     esi, [esp+18Ch+FindFileData.ftCreationTime.dwHighDateTime]
.text:00406918                 mov     [esp+18Ch+var_170], ecx
.text:0040691C                 mov     ecx, [esp+18Ch+FindFileData.ftCreationTime.dwLowDateTime]
.text:00406920                 mov     [ebx+8], esi
.text:00406923                 mov     [ebx+4], ecx
.text:00406926                 mov     ebp, [esp+18Ch+FindFileData.ftLastAccessTime.dwLowDateTime]
.text:0040692A                 mov     edi, [esp+18Ch+FindFileData.ftLastAccessTime.dwHighDateTime]
.text:0040692E                 mov     [ebx+0Ch], ebp
.text:00406931                 mov     [ebx+10h], edi
.text:00406934                 mov     esi, [esp+18Ch+FindFileData.ftLastWriteTime.dwHighDateTime]
.text:00406938                 mov     ecx, [esp+18Ch+FindFileData.ftLastWriteTime.dwLowDateTime]
.text:0040693C                 mov     [ebx+18h], esi
.text:0040693F                 mov     [ebx+14h], ecx
.text:00406942                 mov     ebp, [esp+18Ch+FindFileData.nFileSizeHigh]
.text:00406946                 mov     [ebx+1Ch], ebp
.text:00406949                 mov     edi, [esp+18Ch+FindFileData.nFileSizeLow]
.text:0040694D                 mov     [ebx+20h], edi
.text:00406950                 mov     [esp+18Ch+lpModuleName], eax ; hFindFile
.text:00406953                 call    FindClose
.text:00406958                 sub     esp, 4
.text:0040695B                 mov     esi, [esp+18Ch+var_170]
.text:0040695F                 test    esi, esi
.text:00406961                 jnz     loc_4068CD
.text:00406967                 cld
.text:00406968                 mov     eax, [esp+18Ch+var_170]
.text:0040696C                 mov     ecx, 9
.text:00406971                 mov     edi, ebx
.text:00406973                 rep stosd
.text:00406975                 mov     ebp, [esp+18Ch+var_164]
.text:00406979                 mov     [ebx], ebp
.text:0040697B                 jmp     loc_4068CD
.text:0040697B sub_406830      endp
.text:0040697B
.text:0040697B ; ---------------------------------------------------------------------------
.text:00406980 ; const CHAR aFindfirstfilee[]
.text:00406980 aFindfirstfilee db 'FindFirstFileExA',0 ; DATA XREF: sub_4069A0+23↓o
.text:00406991 ; const char asc_406991[]
.text:00406991 asc_406991      db '\*',0               ; DATA XREF: sub_4069A0:loc_406A2D↓o
.text:00406994                 align 10h
.text:004069A0
.text:004069A0 ; =============== S U B R O U T I N E =======================================
.text:004069A0
.text:004069A0
.text:004069A0 ; int __cdecl sub_4069A0(char *Str)
.text:004069A0 sub_4069A0      proc near               ; CODE XREF: .text:00407AD3↓p
.text:004069A0                                         ; sub_407DD0+3FA↓p ...
.text:004069A0
.text:004069A0 lpLibFileName   = dword ptr -18Ch
.text:004069A0 lpProcName      = dword ptr -188h
.text:004069A0 var_184         = dword ptr -184h
.text:004069A0 var_180         = dword ptr -180h
.text:004069A0 var_17C         = dword ptr -17Ch
.text:004069A0 var_178         = dword ptr -178h
.text:004069A0 var_164         = dword ptr -164h
.text:004069A0 hModule         = dword ptr -160h
.text:004069A0 FindFileData    = _WIN32_FIND_DATAA ptr -15Ch
.text:004069A0 Str             = dword ptr  4
.text:004069A0
.text:004069A0                 push    ebp
.text:004069A1                 push    edi
.text:004069A2                 xor     edi, edi
.text:004069A4                 push    esi
.text:004069A5                 push    ebx
.text:004069A6                 sub     esp, 17Ch
.text:004069AC                 mov     [esp+18Ch+lpLibFileName], offset LibFileName ; "KERNEL32.DLL"
.text:004069B3                 call    LoadLibraryA
.text:004069B8                 sub     esp, 4
.text:004069BB                 mov     [esp+18Ch+hModule], eax
.text:004069BF                 mov     ecx, [esp+18Ch+hModule]
.text:004069C3                 mov     [esp+18Ch+lpProcName], offset aFindfirstfilee ; "FindFirstFileExA"
.text:004069CB                 mov     [esp+18Ch+lpLibFileName], ecx ; hModule
.text:004069CE                 call    GetProcAddress
.text:004069D3                 sub     esp, 8
.text:004069D6                 mov     edx, [esp+18Ch+Str]
.text:004069DD                 mov     [esp+18Ch+var_164], eax
.text:004069E1                 mov     [esp+18Ch+lpLibFileName], edx ; Str
.text:004069E4                 call    strlen
.text:004069E9                 lea     edx, [eax+5]
.text:004069EC                 mov     ebx, eax
.text:004069EE                 mov     [esp+18Ch+lpLibFileName], edx ; Size
.text:004069F1                 call    malloc
.text:004069F6                 mov     esi, eax
.text:004069F8                 test    esi, esi
.text:004069FA                 mov     eax, 1
.text:004069FF                 jz      loc_406ADD
.text:00406A05                 mov     [esp+18Ch+lpLibFileName], esi ; Destination
.text:00406A08                 mov     ebp, [esp+18Ch+Str]
.text:00406A0F                 mov     [esp+18Ch+lpProcName], ebp ; Source
.text:00406A13                 call    strcpy
.text:00406A18                 movzx   eax, byte ptr [ebx+esi-1]
.text:00406A1D                 cmp     al, 2Fh ; '/'
.text:00406A1F                 jz      loc_406B0B
.text:00406A25                 cmp     al, 5Ch ; '\'
.text:00406A27                 jz      loc_406B0B
.text:00406A2D
.text:00406A2D loc_406A2D:                             ; CODE XREF: sub_4069A0+170↓j
.text:00406A2D                 mov     [esp+18Ch+lpProcName], offset asc_406991 ; "\\*"
.text:00406A35                 mov     [esp+18Ch+lpLibFileName], esi ; Destination
.text:00406A38                 call    strcat
.text:00406A3D                 mov     eax, [esp+18Ch+var_164]
.text:00406A41                 test    eax, eax
.text:00406A43                 jz      loc_406B05
.text:00406A49                 mov     [esp+18Ch+var_178], 0
.text:00406A51                 lea     ebp, [esp+18Ch+FindFileData]
.text:00406A55                 mov     [esp+18Ch+var_17C], 0
.text:00406A5D                 mov     [esp+18Ch+var_180], 1
.text:00406A65                 mov     [esp+18Ch+var_184], ebp
.text:00406A69                 mov     [esp+18Ch+lpProcName], 0
.text:00406A71                 mov     [esp+18Ch+lpLibFileName], esi
.text:00406A74                 call    [esp+18Ch+var_164]
.text:00406A78                 sub     esp, 18h
.text:00406A7B                 mov     ebx, eax
.text:00406A7D                 cmp     eax, 0FFFFFFFFh
.text:00406A80                 jz      short loc_406AE8
.text:00406A82                 lea     esi, [esi+0]
.text:00406A89                 lea     edi, [edi+0]
.text:00406A90
.text:00406A90 loc_406A90:                             ; CODE XREF: sub_4069A0+109↓j
.text:00406A90                                         ; sub_4069A0+161↓j
.text:00406A90                 test    byte ptr [esp+18Ch+FindFileData.dwFileAttributes], 10h
.text:00406A95                 jz      short loc_406A98
.text:00406A97                 inc     edi
.text:00406A98
.text:00406A98 loc_406A98:                             ; CODE XREF: sub_4069A0+F5↑j
.text:00406A98                 mov     [esp+18Ch+lpProcName], ebp ; lpFindFileData
.text:00406A9C                 mov     [esp+18Ch+lpLibFileName], ebx ; hFindFile
.text:00406A9F                 call    FindNextFileA
.text:00406AA4                 sub     esp, 8
.text:00406AA7                 test    eax, eax
.text:00406AA9                 jnz     short loc_406A90
.text:00406AAB                 mov     [esp+18Ch+lpLibFileName], ebx ; hFindFile
.text:00406AAE                 call    FindClose
.text:00406AB3                 sub     esp, 4
.text:00406AB6                 mov     esi, [esp+18Ch+hModule]
.text:00406ABA                 mov     [esp+18Ch+lpLibFileName], esi ; hLibModule
.text:00406ABD                 call    FreeLibrary
.text:00406AC2                 sub     esp, 4
.text:00406AC5                 mov     ebx, [esp+18Ch+Str]
.text:00406ACC                 mov     [esp+18Ch+lpLibFileName], ebx ; LPCSTR
.text:00406ACF                 call    sub_409470
.text:00406AD4                 test    eax, eax
.text:00406AD6                 jz      short loc_406ADB
.text:00406AD8                 add     edi, 2
.text:00406ADB
.text:00406ADB loc_406ADB:                             ; CODE XREF: sub_4069A0+136↑j
.text:00406ADB                 mov     eax, edi
.text:00406ADD
.text:00406ADD loc_406ADD:                             ; CODE XREF: sub_4069A0+5F↑j
.text:00406ADD                                         ; sub_4069A0+163↓j
.text:00406ADD                 add     esp, 17Ch
.text:00406AE3                 pop     ebx
.text:00406AE4                 pop     esi
.text:00406AE5                 pop     edi
.text:00406AE6                 pop     ebp
.text:00406AE7                 retn
.text:00406AE8 ; ---------------------------------------------------------------------------
.text:00406AE8
.text:00406AE8 loc_406AE8:                             ; CODE XREF: sub_4069A0+E0↑j
.text:00406AE8                                         ; sub_4069A0+169↓j
.text:00406AE8                 mov     [esp+18Ch+lpProcName], ebp ; lpFindFileData
.text:00406AEC                 mov     [esp+18Ch+lpLibFileName], esi ; lpFileName
.text:00406AEF                 call    FindFirstFileA
.text:00406AF4                 mov     ebx, eax
.text:00406AF6                 sub     esp, 8
.text:00406AF9                 cmp     ebx, 0FFFFFFFFh
.text:00406AFC                 mov     eax, 2
.text:00406B01                 jnz     short loc_406A90
.text:00406B03                 jmp     short loc_406ADD
.text:00406B05 ; ---------------------------------------------------------------------------
.text:00406B05
.text:00406B05 loc_406B05:                             ; CODE XREF: sub_4069A0+A3↑j
.text:00406B05                 lea     ebp, [esp+18Ch+FindFileData]
.text:00406B09                 jmp     short loc_406AE8
.text:00406B0B ; ---------------------------------------------------------------------------
.text:00406B0B
.text:00406B0B loc_406B0B:                             ; CODE XREF: sub_4069A0+7F↑j
.text:00406B0B                                         ; sub_4069A0+87↑j
.text:00406B0B                 mov     byte ptr [ebx+esi-1], 0
.text:00406B10                 jmp     loc_406A2D
.text:00406B10 sub_4069A0      endp
.text:00406B10
.text:00406B10 ; ---------------------------------------------------------------------------
.text:00406B15                 align 10h
.text:00406B20
.text:00406B20 ; =============== S U B R O U T I N E =======================================
.text:00406B20
.text:00406B20
.text:00406B20 ; int __cdecl sub_406B20(HANDLE hNamedPipe, int)
.text:00406B20 sub_406B20      proc near               ; CODE XREF: sub_405C80+2617↓p
.text:00406B20                                         ; sub_40AAA0+52↓j
.text:00406B20
.text:00406B20 hFile           = dword ptr -0ECh
.text:00406B20 lpFileInformation= dword ptr -0E8h
.text:00406B20 nBufferSize     = dword ptr -0E4h
.text:00406B20 lpBytesRead     = dword ptr -0E0h
.text:00406B20 lpTotalBytesAvail= dword ptr -0DCh
.text:00406B20 lpBytesLeftThisMessage= dword ptr -0D8h
.text:00406B20 var_C4          = dword ptr -0C4h
.text:00406B20 var_C0          = dword ptr -0C0h
.text:00406B20 var_BC          = dword ptr -0BCh
.text:00406B20 var_B8          = dword ptr -0B8h
.text:00406B20 var_B4          = dword ptr -0B4h
.text:00406B20 var_B0          = dword ptr -0B0h
.text:00406B20 var_AC          = dword ptr -0ACh
.text:00406B20 var_A8          = dword ptr -0A8h
.text:00406B20 TotalBytesAvail = dword ptr -0A0h
.text:00406B20 var_9C          = dword ptr -9Ch
.text:00406B20 var_98          = dword ptr -98h
.text:00406B20 var_94          = dword ptr -94h
.text:00406B20 var_90          = dword ptr -90h
.text:00406B20 var_8C          = dword ptr -8Ch
.text:00406B20 var_88          = dword ptr -88h
.text:00406B20 var_84          = dword ptr -84h
.text:00406B20 var_80          = dword ptr -80h
.text:00406B20 var_7C          = dword ptr -7Ch
.text:00406B20 var_78          = dword ptr -78h
.text:00406B20 var_74          = dword ptr -74h
.text:00406B20 var_70          = dword ptr -70h
.text:00406B20 var_6C          = dword ptr -6Ch
.text:00406B20 FileInformation = _BY_HANDLE_FILE_INFORMATION ptr -5Ch
.text:00406B20 hNamedPipe      = dword ptr  4
.text:00406B20 arg_4           = dword ptr  8
.text:00406B20
.text:00406B20                 push    ebp
.text:00406B21                 mov     eax, 0FFFFFFFFh
.text:00406B26                 push    edi
.text:00406B27                 push    esi
.text:00406B28                 push    ebx
.text:00406B29                 sub     esp, 0DCh
.text:00406B2F                 mov     esi, [esp+0ECh+hNamedPipe]
.text:00406B36                 mov     ebp, [esp+0ECh+arg_4]
.text:00406B3D                 cmp     esi, 0FFFFFFFFh
.text:00406B40                 jz      loc_406EC1
.text:00406B46                 cld
.text:00406B47                 xor     eax, eax
.text:00406B49                 lea     ebx, [esp+0ECh+FileInformation]
.text:00406B50                 mov     ecx, 0Dh
.text:00406B55                 mov     edi, ebx
.text:00406B57                 rep stosd
.text:00406B59                 mov     dword ptr [ebp+18h], 1
.text:00406B60                 mov     [esp+0ECh+hFile], esi ; hFile
.text:00406B63                 call    GetFileType
.text:00406B68                 sub     esp, 4
.text:00406B6B                 xor     edx, edx
.text:00406B6D                 cmp     eax, 2
.text:00406B70                 jz      loc_406FA0
.text:00406B76                 cmp     eax, 3
.text:00406B79                 jz      loc_406F90
.text:00406B7F
.text:00406B7F loc_406B7F:                             ; CODE XREF: sub_406B20+475↓j
.text:00406B7F                                         ; sub_406B20+485↓j
.text:00406B7F                 or      [ebp+0], edx
.text:00406B82                 mov     [esp+0ECh+lpFileInformation], ebx ; lpFileInformation
.text:00406B86                 mov     [esp+0ECh+hFile], esi ; hFile
.text:00406B89                 call    GetFileInformationByHandle
.text:00406B8E                 sub     esp, 8
.text:00406B91                 mov     ecx, [esp+0ECh+FileInformation.nFileSizeLow]
.text:00406B98                 test    ecx, ecx
.text:00406B9A                 jnz     short loc_406BD0
.text:00406B9C                 mov     edx, [esp+0ECh+FileInformation.nFileSizeHigh]
.text:00406BA3                 test    edx, edx
.text:00406BA5                 jnz     short loc_406BD0
.text:00406BA7                 mov     edx, [ebp+0]
.text:00406BAA                 and     edx, 0F000h
.text:00406BB0                 cmp     edx, 1000h
.text:00406BB6                 jz      loc_406F26
.text:00406BBC
.text:00406BBC loc_406BBC:                             ; CODE XREF: sub_406B20+459↓j
.text:00406BBC                                         ; sub_406B20+465↓j
.text:00406BBC                 test    ecx, ecx
.text:00406BBE                 jnz     short loc_406BD0
.text:00406BC0                 mov     edx, [esp+0ECh+FileInformation.nFileSizeHigh]
.text:00406BC7                 test    edx, edx
.text:00406BC9                 jz      loc_406F04
.text:00406BCF                 nop
.text:00406BD0
.text:00406BD0 loc_406BD0:                             ; CODE XREF: sub_406B20+7A↑j
.text:00406BD0                                         ; sub_406B20+85↑j ...
.text:00406BD0                 cld
.text:00406BD1                 mov     esi, ebx
.text:00406BD3                 mov     dword ptr [ebp+14h], 0
.text:00406BDA                 lea     edi, [esp+0ECh+var_9C]
.text:00406BDE                 mov     ecx, 0Dh
.text:00406BE3                 rep movsd
.text:00406BE5                 xor     ebx, ebx
.text:00406BE7                 xor     edi, edi
.text:00406BE9                 mov     edx, [esp+0ECh+var_6C]
.text:00406BF0                 mov     esi, [esp+0ECh+var_70]
.text:00406BF4                 or      edx, ebx
.text:00406BF6                 mov     ebx, [esp+0ECh+var_9C]
.text:00406BFA                 mov     [ebp+8], edx
.text:00406BFD                 or      edi, esi
.text:00406BFF                 xor     edx, edx
.text:00406C01                 mov     [ebp+0Ch], edi
.text:00406C04                 test    bl, 10h
.text:00406C07                 mov     esi, [esp+0ECh+var_80]
.text:00406C0B                 setz    dl
.text:00406C0E                 mov     [ebp+10h], esi
.text:00406C11                 dec     edx
.text:00406C12                 and     edx, 0FFFFC000h
.text:00406C18                 add     edx, 8000h
.text:00406C1E                 or      edx, 124h
.text:00406C24                 test    bl, 1
.text:00406C27                 movzx   eax, dx
.text:00406C2A                 jnz     short loc_406C31
.text:00406C2C                 or      eax, 92h
.text:00406C31
.text:00406C31 loc_406C31:                             ; CODE XREF: sub_406B20+10A↑j
.text:00406C31                 or      [ebp+0], eax
.text:00406C34                 xor     edx, edx
.text:00406C36                 mov     ebx, [esp+0ECh+var_7C]
.text:00406C3A                 mov     ecx, [esp+0ECh+var_78]
.text:00406C3E                 mov     eax, edx
.text:00406C40                 xor     esi, esi
.text:00406C42                 mov     edx, [esp+0ECh+var_8C]
.text:00406C46                 mov     edi, ebx
.text:00406C48                 or      eax, edi
.text:00406C4A                 mov     [esp+0ECh+var_A8], eax
.text:00406C4E                 mov     ebx, ecx
.text:00406C50                 mov     edi, [esp+0ECh+var_74]
.text:00406C54                 or      ebx, esi
.text:00406C56                 mov     esi, [esp+0ECh+var_A8]
.text:00406C5A                 mov     [esp+0ECh+var_AC], ebx
.text:00406C5E                 xor     ebx, ebx
.text:00406C60                 mov     ecx, [esp+0ECh+var_AC]
.text:00406C64                 mov     [ebp+34h], esi
.text:00406C67                 mov     esi, [esp+0ECh+var_90]
.text:00406C6B                 mov     [ebp+18h], edi
.text:00406C6E                 xor     edi, edi
.text:00406C70                 or      esi, ebx
.text:00406C72                 mov     [ebp+30h], ecx
.text:00406C75                 or      edi, edx
.text:00406C77                 mov     edx, esi
.text:00406C79                 mov     [esp+0ECh+nBufferSize], 989680h
.text:00406C81                 sub     edx, 0D53E8000h
.text:00406C87                 mov     ebx, edi
.text:00406C89                 sbb     ebx, 19DB1DEh
.text:00406C8F                 mov     [esp+0ECh+lpFileInformation], ebx
.text:00406C93                 mov     [esp+0ECh+lpBytesRead], 0
.text:00406C9B                 mov     [esp+0ECh+hFile], edx
.text:00406C9E                 call    sub_40CD80
.text:00406CA3                 mov     ecx, eax
.text:00406CA5                 shr     eax, 1Fh
.text:00406CA8                 dec     eax
.text:00406CA9                 and     ecx, eax
.text:00406CAB                 mov     [ebp+38h], ecx
.text:00406CAE                 mov     [esp+0ECh+hFile], esi
.text:00406CB1                 mov     [esp+0ECh+lpFileInformation], edi
.text:00406CB5                 mov     [esp+0ECh+nBufferSize], 989680h
.text:00406CBD                 mov     [esp+0ECh+lpBytesRead], 0
.text:00406CC5                 call    sub_40CEA0
.text:00406CCA                 lea     ebx, [eax+eax*4]
.text:00406CCD                 xor     ecx, ecx
.text:00406CCF                 lea     esi, [ebx+ebx*4]
.text:00406CD2                 shl     esi, 2
.text:00406CD5                 mov     edi, esi
.text:00406CD7                 shr     edi, 1Fh
.text:00406CDA                 dec     edi
.text:00406CDB                 and     edi, esi
.text:00406CDD                 mov     [ebp+3Ch], edi
.text:00406CE0                 mov     esi, [esp+0ECh+var_98]
.text:00406CE4                 xor     edi, edi
.text:00406CE6                 mov     [esp+0ECh+nBufferSize], 989680h
.text:00406CEE                 mov     edx, [esp+0ECh+var_94]
.text:00406CF2                 mov     [esp+0ECh+lpBytesRead], 0
.text:00406CFA                 or      esi, ecx
.text:00406CFC                 or      edi, edx
.text:00406CFE                 mov     edx, esi
.text:00406D00                 mov     ecx, edi
.text:00406D02                 sub     edx, 0D53E8000h
.text:00406D08                 sbb     ecx, 19DB1DEh
.text:00406D0E                 mov     [esp+0ECh+lpFileInformation], ecx
.text:00406D12                 mov     [esp+0ECh+hFile], edx
.text:00406D15                 call    sub_40CD80
.text:00406D1A                 mov     ebx, eax
.text:00406D1C                 shr     eax, 1Fh
.text:00406D1F                 dec     eax
.text:00406D20                 and     ebx, eax
.text:00406D22                 mov     [ebp+48h], ebx
.text:00406D25                 xor     ebx, ebx
.text:00406D27                 mov     [esp+0ECh+hFile], esi
.text:00406D2A                 mov     [esp+0ECh+lpFileInformation], edi
.text:00406D2E                 mov     [esp+0ECh+nBufferSize], 989680h
.text:00406D36                 mov     [esp+0ECh+lpBytesRead], 0
.text:00406D3E                 call    sub_40CEA0
.text:00406D43                 lea     ecx, [eax+eax*4]
.text:00406D46                 lea     esi, [ecx+ecx*4]
.text:00406D49                 shl     esi, 2
.text:00406D4C                 mov     edi, esi
.text:00406D4E                 shr     edi, 1Fh
.text:00406D51                 dec     edi
.text:00406D52                 and     edi, esi
.text:00406D54                 mov     [ebp+4Ch], edi
.text:00406D57                 mov     esi, [esp+0ECh+var_88]
.text:00406D5B                 xor     edi, edi
.text:00406D5D                 mov     [esp+0ECh+nBufferSize], 989680h
.text:00406D65                 mov     edx, [esp+0ECh+var_84]
.text:00406D69                 mov     [esp+0ECh+lpBytesRead], 0
.text:00406D71                 or      esi, ebx
.text:00406D73                 or      edi, edx
.text:00406D75                 mov     edx, esi
.text:00406D77                 mov     ebx, edi
.text:00406D79                 sub     edx, 0D53E8000h
.text:00406D7F                 sbb     ebx, 19DB1DEh
.text:00406D85                 mov     [esp+0ECh+lpFileInformation], ebx
.text:00406D89                 mov     [esp+0ECh+hFile], edx
.text:00406D8C                 call    sub_40CD80
.text:00406D91                 mov     ecx, eax
.text:00406D93                 shr     eax, 1Fh
.text:00406D96                 dec     eax
.text:00406D97                 and     ecx, eax
.text:00406D99                 mov     [ebp+40h], ecx
.text:00406D9C                 mov     [esp+0ECh+lpFileInformation], edi
.text:00406DA0                 mov     [esp+0ECh+nBufferSize], 989680h
.text:00406DA8                 mov     [esp+0ECh+lpBytesRead], 0
.text:00406DB0                 mov     [esp+0ECh+hFile], esi
.text:00406DB3                 call    sub_40CEA0
.text:00406DB8                 mov     dword ptr [ebp+50h], 200h
.text:00406DBF                 lea     ebx, [eax+eax*4]
.text:00406DC2                 mov     edi, [esp+0ECh+var_A8]
.text:00406DC6                 lea     edx, [ebx+ebx*4]
.text:00406DC9                 mov     eax, [esp+0ECh+var_AC]
.text:00406DCD                 shl     edx, 2
.text:00406DD0                 mov     ecx, edx
.text:00406DD2                 shr     ecx, 1Fh
.text:00406DD5                 dec     ecx
.text:00406DD6                 and     ecx, edx
.text:00406DD8                 test    edi, edi
.text:00406DDA                 mov     edx, [esp+0ECh+var_A8]
.text:00406DDE                 mov     [ebp+44h], ecx
.text:00406DE1                 js      loc_406EF7
.text:00406DE7
.text:00406DE7 loc_406DE7:                             ; CODE XREF: sub_406B20+3DF↓j
.text:00406DE7                 mov     edi, [esp+0ECh+var_AC]
.text:00406DEB                 xor     esi, esi
.text:00406DED                 mov     ecx, eax
.text:00406DEF                 shrd    ecx, edx, 9
.text:00406DF3                 mov     ebx, edx
.text:00406DF5                 mov     eax, esi
.text:00406DF7                 and     edi, 1FFh
.text:00406DFD                 sar     ebx, 9
.text:00406E00                 or      eax, edi
.text:00406E02                 jz      short loc_406E0A
.text:00406E04                 add     ecx, 1
.text:00406E07                 adc     ebx, 0
.text:00406E0A
.text:00406E0A loc_406E0A:                             ; CODE XREF: sub_406B20+2E2↑j
.text:00406E0A                 mov     [ebp+5Ch], ebx
.text:00406E0D                 mov     esi, dword_40E050
.text:00406E13                 xor     edi, edi
.text:00406E15                 mov     [ebp+58h], ecx
.text:00406E18                 mov     ebx, dword_40E050
.text:00406E1E                 mov     ecx, [esp+0ECh+var_A8]
.text:00406E22                 mov     edx, [esp+0ECh+var_AC]
.text:00406E26                 mov     [ebp+50h], ebx
.text:00406E29                 shr     ebx, 9
.text:00406E2C                 mov     [esp+0ECh+lpBytesRead], edi
.text:00406E30                 mov     [esp+0ECh+lpFileInformation], ecx
.text:00406E34                 mov     [esp+0ECh+nBufferSize], esi
.text:00406E38                 mov     [esp+0ECh+hFile], edx
.text:00406E3B                 call    sub_40CD80
.text:00406E40                 mov     [esp+0ECh+lpBytesRead], edi
.text:00406E44                 mov     ecx, [esp+0ECh+var_AC]
.text:00406E48                 mov     edi, [esp+0ECh+var_A8]
.text:00406E4C                 mov     [esp+0ECh+var_BC], ebx
.text:00406E50                 mov     [esp+0ECh+var_B4], eax
.text:00406E54                 mov     [esp+0ECh+var_B0], edx
.text:00406E58                 mov     [esp+0ECh+var_B8], 0
.text:00406E60                 mov     [esp+0ECh+nBufferSize], esi
.text:00406E64                 mov     [esp+0ECh+hFile], ecx
.text:00406E67                 mov     [esp+0ECh+lpFileInformation], edi
.text:00406E6B                 call    sub_40CEA0
.text:00406E70                 mov     ebx, edx
.text:00406E72                 or      ebx, eax
.text:00406E74                 jz      short loc_406ED0
.text:00406E76                 mov     edi, [esp+0ECh+var_B4]
.text:00406E7A                 mov     esi, [esp+0ECh+var_B0]
.text:00406E7E                 mov     eax, [esp+0ECh+var_BC]
.text:00406E82                 mov     [esp+0ECh+var_C4], edi
.text:00406E86                 mov     ecx, [esp+0ECh+var_B8]
.text:00406E8A                 add     [esp+0ECh+var_C4], 1
.text:00406E8F                 mov     [esp+0ECh+var_C0], esi
.text:00406E93                 adc     [esp+0ECh+var_C0], 0
.text:00406E98                 mul     [esp+0ECh+var_C4]
.text:00406E9C                 mov     edi, [esp+0ECh+var_C0]
.text:00406EA0                 mov     ebx, edx
.text:00406EA2                 mov     edx, [esp+0ECh+var_C4]
.text:00406EA6                 mov     esi, eax
.text:00406EA8                 mov     eax, ebx
.text:00406EAA                 imul    ecx, edx
.text:00406EAD                 mov     edx, [esp+0ECh+var_BC]
.text:00406EB1                 imul    edx, edi
.text:00406EB4                 add     eax, ecx
.text:00406EB6                 lea     edi, [edx+eax]
.text:00406EB9
.text:00406EB9 loc_406EB9:                             ; CODE XREF: sub_406B20+3D5↓j
.text:00406EB9                 mov     [ebp+58h], esi
.text:00406EBC                 xor     eax, eax
.text:00406EBE                 mov     [ebp+5Ch], edi
.text:00406EC1
.text:00406EC1 loc_406EC1:                             ; CODE XREF: sub_406B20+20↑j
.text:00406EC1                 add     esp, 0DCh
.text:00406EC7                 pop     ebx
.text:00406EC8                 pop     esi
.text:00406EC9                 pop     edi
.text:00406ECA                 pop     ebp
.text:00406ECB                 retn
.text:00406ECB ; ---------------------------------------------------------------------------
.text:00406ECC                 align 10h
.text:00406ED0
.text:00406ED0 loc_406ED0:                             ; CODE XREF: sub_406B20+354↑j
.text:00406ED0                 mov     eax, [esp+0ECh+var_B4]
.text:00406ED4                 mov     edi, [esp+0ECh+var_B8]
.text:00406ED8                 mov     ebx, [esp+0ECh+var_B4]
.text:00406EDC                 mul     [esp+0ECh+var_BC]
.text:00406EE0                 mov     ecx, [esp+0ECh+var_BC]
.text:00406EE4                 imul    ebx, edi
.text:00406EE7                 mov     esi, eax
.text:00406EE9                 mov     eax, [esp+0ECh+var_B0]
.text:00406EED                 add     edx, ebx
.text:00406EEF                 imul    ecx, eax
.text:00406EF2                 lea     edi, [ecx+edx]
.text:00406EF5                 jmp     short loc_406EB9
.text:00406EF7 ; ---------------------------------------------------------------------------
.text:00406EF7
.text:00406EF7 loc_406EF7:                             ; CODE XREF: sub_406B20+2C1↑j
.text:00406EF7                 add     eax, 1FFh
.text:00406EFC                 adc     edx, 0
.text:00406EFF                 jmp     loc_406DE7
.text:00406F04 ; ---------------------------------------------------------------------------
.text:00406F04
.text:00406F04 loc_406F04:                             ; CODE XREF: sub_406B20+A9↑j
.text:00406F04                 mov     [esp+0ECh+hFile], esi ; hFile
.text:00406F07                 lea     ecx, [esp+0ECh+FileInformation.nFileSizeHigh]
.text:00406F0E                 mov     [esp+0ECh+lpFileInformation], ecx ; lpFileSizeHigh
.text:00406F12                 call    GetFileSize
.text:00406F17                 sub     esp, 8
.text:00406F1A                 mov     [esp+0ECh+FileInformation.nFileSizeLow], eax
.text:00406F21                 jmp     loc_406BD0
.text:00406F26 ; ---------------------------------------------------------------------------
.text:00406F26
.text:00406F26 loc_406F26:                             ; CODE XREF: sub_406B20+96↑j
.text:00406F26                 mov     [esp+0ECh+TotalBytesAvail], 0
.text:00406F2E                 lea     ecx, [esp+0ECh+TotalBytesAvail]
.text:00406F32                 mov     [esp+0ECh+lpBytesLeftThisMessage], 0 ; lpBytesLeftThisMessage
.text:00406F3A                 mov     [esp+0ECh+lpTotalBytesAvail], ecx ; lpTotalBytesAvail
.text:00406F3E                 mov     [esp+0ECh+lpBytesRead], 0 ; lpBytesRead
.text:00406F46                 mov     [esp+0ECh+nBufferSize], 0 ; nBufferSize
.text:00406F4E                 mov     [esp+0ECh+lpFileInformation], 0 ; lpBuffer
.text:00406F56                 mov     [esp+0ECh+hFile], esi ; hNamedPipe
.text:00406F59                 call    PeekNamedPipe
.text:00406F5E                 sub     esp, 18h
.text:00406F61                 test    eax, eax
.text:00406F63                 jz      short loc_406F7E
.text:00406F65                 mov     ecx, [esp+0ECh+TotalBytesAvail]
.text:00406F69                 xor     eax, eax
.text:00406F6B                 mov     [esp+0ECh+FileInformation.nFileSizeHigh], eax
.text:00406F72                 mov     [esp+0ECh+FileInformation.nFileSizeLow], ecx
.text:00406F79                 jmp     loc_406BBC
.text:00406F7E ; ---------------------------------------------------------------------------
.text:00406F7E
.text:00406F7E loc_406F7E:                             ; CODE XREF: sub_406B20+443↑j
.text:00406F7E                 mov     ecx, [esp+0ECh+FileInformation.nFileSizeLow]
.text:00406F85                 jmp     loc_406BBC
.text:00406F85 ; ---------------------------------------------------------------------------
.text:00406F8A                 align 10h
.text:00406F90
.text:00406F90 loc_406F90:                             ; CODE XREF: sub_406B20+59↑j
.text:00406F90                 mov     edx, 1000h
.text:00406F95                 jmp     loc_406B7F
.text:00406F95 ; ---------------------------------------------------------------------------
.text:00406F9A                 align 10h
.text:00406FA0
.text:00406FA0 loc_406FA0:                             ; CODE XREF: sub_406B20+50↑j
.text:00406FA0                 mov     edx, 2000h
.text:00406FA5                 jmp     loc_406B7F
.text:00406FA5 sub_406B20      endp
.text:00406FA5
.text:00406FA5 ; ---------------------------------------------------------------------------
.text:00406FAA aLnk_0          db '.lnk',0             ; DATA XREF: sub_406FF0+E0↓o
.text:00406FAA                                         ; .text:0040769A↓o ...
.text:00406FAF ; const CHAR aKernel32[]
.text:00406FAF aKernel32       db 'KERNEL32',0         ; DATA XREF: sub_406FF0+12D↓o
.text:00406FAF                                         ; .text:00407D4B↓o
.text:00406FB8 ; const CHAR aGetcompressedf[]
.text:00406FB8 aGetcompressedf db 'GetCompressedFileSizeA',0
.text:00406FB8                                         ; DATA XREF: sub_406FF0+13E↓o
.text:00406FB8                                         ; .text:00407D5C↓o
.text:00406FCF ; const CHAR aGetbinarytypea[]
.text:00406FCF aGetbinarytypea db 'GetBinaryTypeA',0   ; DATA XREF: sub_406FF0+333↓o
.text:00406FCF                                         ; .text:004076F6↓o ...
.text:00406FDE ; const char aPathext[]
.text:00406FDE aPathext        db 'PATHEXT',0          ; DATA XREF: sub_406FF0:loc_4073D7↓o
.text:00406FDE                                         ; .text:loc_4077A0↓o ...
.text:00406FE6                 align 10h
.text:00406FF0
.text:00406FF0 ; =============== S U B R O U T I N E =======================================
.text:00406FF0
.text:00406FF0
.text:00406FF0 ; int __cdecl sub_406FF0(char *String1, int)
.text:00406FF0 sub_406FF0      proc near               ; CODE XREF: sub_407DD0+3CD↓p
.text:00406FF0                                         ; sub_405C80+2635↓p
.text:00406FF0
.text:00406FF0 Str             = dword ptr -6Ch
.text:00406FF0 lpProcName      = dword ptr -68h
.text:00406FF0 var_64          = dword ptr -64h
.text:00406FF0 var_60          = dword ptr -60h
.text:00406FF0 var_5C          = dword ptr -5Ch
.text:00406FF0 var_4C          = dword ptr -4Ch
.text:00406FF0 var_48          = dword ptr -48h
.text:00406FF0 var_44          = dword ptr -44h
.text:00406FF0 var_40          = dword ptr -40h
.text:00406FF0 var_3C          = dword ptr -3Ch
.text:00406FF0 var_38          = dword ptr -38h
.text:00406FF0 lpRootPathName  = dword ptr -30h
.text:00406FF0 var_2C          = byte ptr -2Ch
.text:00406FF0 var_28          = dword ptr -28h
.text:00406FF0 var_24          = dword ptr -24h
.text:00406FF0 var_20          = dword ptr -20h
.text:00406FF0 var_1C          = dword ptr -1Ch
.text:00406FF0 var_18          = byte ptr -18h
.text:00406FF0 String1         = dword ptr  4
.text:00406FF0 arg_4           = dword ptr  8
.text:00406FF0
.text:00406FF0                 push    ebp
.text:00406FF1                 push    edi
.text:00406FF2                 push    esi
.text:00406FF3                 push    ebx
.text:00406FF4                 sub     esp, 5Ch
.text:00406FF7                 mov     edx, [esp+6Ch+String1]
.text:00406FFB                 mov     [esp+6Ch+Str], edx ; LPCSTR
.text:00406FFE                 call    sub_4090A0
.text:00407003                 mov     [esp+6Ch+Str], eax
.text:00407006                 call    sub_406120
.text:0040700B                 mov     [esp+6Ch+lpRootPathName], eax
.text:0040700F                 test    eax, eax
.text:00407011                 jz      loc_407243
.text:00407017                 mov     [esp+6Ch+Str], eax ; Str
.text:0040701A                 call    strlen
.text:0040701F                 mov     edx, [esp+6Ch+arg_4]
.text:00407023                 mov     ebx, eax
.text:00407025                 mov     esi, [edx+0Ch]
.text:00407028                 mov     edi, [edx+8]
.text:0040702B                 mov     eax, esi
.text:0040702D                 or      eax, edi
.text:0040702F                 jz      loc_407450
.text:00407035                 mov     ecx, [esp+6Ch+lpRootPathName]
.text:00407039                 mov     [esp+6Ch+Str], ecx ; lpRootPathName
.text:0040703C                 call    GetDriveTypeA
.text:00407041                 sub     esp, 4
.text:00407044                 cmp     eax, 4
.text:00407047                 jz      loc_407450
.text:0040704D
.text:0040704D loc_40704D:                             ; CODE XREF: sub_406FF0+48A↓j
.text:0040704D                                         ; sub_406FF0+4B2↓j
.text:0040704D                 mov     edx, [esp+6Ch+arg_4]
.text:00407051                 mov     esi, [edx+14h]
.text:00407054                 mov     edi, [edx+10h]
.text:00407057                 mov     ecx, esi
.text:00407059                 or      ecx, edi
.text:0040705B                 jnz     short loc_407085
.text:0040705D                 mov     ebp, [esp+6Ch+lpRootPathName]
.text:00407061                 xor     esi, esi
.text:00407063                 xor     edi, edi
.text:00407065                 test    ebp, ebp
.text:00407067                 jz      short loc_407077
.text:00407069                 movzx   ebx, byte ptr [ebp+0]
.text:0040706D                 test    bl, bl
.text:0040706F                 mov     cl, bl
.text:00407071                 jnz     loc_407401
.text:00407077
.text:00407077 loc_407077:                             ; CODE XREF: sub_406FF0+77↑j
.text:00407077                 xor     eax, eax
.text:00407079                 xor     edx, edx
.text:0040707B
.text:0040707B loc_40707B:                             ; CODE XREF: sub_406FF0+458↓j
.text:0040707B                 mov     ebp, [esp+6Ch+arg_4]
.text:0040707F                 mov     [ebp+10h], eax
.text:00407082                 mov     [ebp+14h], edx
.text:00407085
.text:00407085 loc_407085:                             ; CODE XREF: sub_406FF0+6B↑j
.text:00407085                 mov     edi, [esp+6Ch+String1]
.text:00407089                 xor     ebx, ebx
.text:0040708B                 test    edi, edi
.text:0040708D                 jz      loc_407303
.text:00407093                 mov     esi, [esp+6Ch+String1]
.text:00407097                 cmp     byte ptr [esi], 0
.text:0040709A                 jnz     loc_407310
.text:004070A0
.text:004070A0 loc_4070A0:                             ; CODE XREF: sub_406FF0+38C↓j
.text:004070A0                                         ; sub_406FF0+397↓j
.text:004070A0                 mov     ebp, [esp+6Ch+String1]
.text:004070A4                 test    ebp, ebp
.text:004070A6                 jz      loc_407303
.text:004070AC                 mov     [esp+6Ch+lpProcName], 2Eh ; '.' ; Ch
.text:004070B4                 mov     edi, [esp+6Ch+String1]
.text:004070B8                 mov     [esp+6Ch+Str], edi ; Str
.text:004070BB                 call    strrchr
.text:004070C0                 test    eax, eax
.text:004070C2                 jz      loc_407303
.text:004070C8                 cld
.text:004070C9                 mov     ecx, 5
.text:004070CE                 mov     esi, eax
.text:004070D0                 mov     edi, offset aLnk_0 ; ".lnk"
.text:004070D5                 repe cmpsb
.text:004070D7                 setz    cl
.text:004070DA                 movzx   eax, cl
.text:004070DD                 lea     esi, [esi+0]
.text:004070E0
.text:004070E0 loc_4070E0:                             ; CODE XREF: sub_406FF0+315↓j
.text:004070E0                 test    eax, eax
.text:004070E2                 jz      short loc_4070EA
.text:004070E4                 or      ebx, 0A000h
.text:004070EA
.text:004070EA loc_4070EA:                             ; CODE XREF: sub_406FF0+F2↑j
.text:004070EA                 mov     esi, [esp+6Ch+arg_4]
.text:004070EE                 xor     ecx, ecx
.text:004070F0                 mov     edi, ds:dword_40F190
.text:004070F6                 or      [esi], ebx
.text:004070F8                 mov     ebx, [esi+14h]
.text:004070FB                 mov     ebp, [esi+10h]
.text:004070FE                 mov     eax, ebx
.text:00407100                 xor     eax, ecx
.text:00407102                 xor     ebp, edi
.text:00407104                 or      eax, ebp
.text:00407106                 jnz     loc_407290
.text:0040710C
.text:0040710C loc_40710C:                             ; CODE XREF: sub_406FF0+30E↓j
.text:0040710C                 mov     ecx, dword_40E050
.text:00407112                 xor     esi, esi
.text:00407114                 xor     edi, edi
.text:00407116                 mov     edx, [esp+6Ch+arg_4]
.text:0040711A                 mov     [edx+50h], ecx
.text:0040711D                 mov     [esp+6Ch+Str], offset aKernel32 ; "KERNEL32"
.text:00407124                 call    LoadLibraryA
.text:00407129                 sub     esp, 4
.text:0040712C                 mov     ebp, eax
.text:0040712E                 mov     [esp+6Ch+lpProcName], offset aGetcompressedf ; "GetCompressedFileSizeA"
.text:00407136                 mov     [esp+6Ch+Str], eax ; hModule
.text:00407139                 call    GetProcAddress
.text:0040713E                 sub     esp, 8
.text:00407141                 test    eax, eax
.text:00407143                 jz      short loc_407178
.text:00407145                 mov     ebx, [esp+6Ch+String1]
.text:00407149                 lea     esi, [esp+6Ch+var_2C]
.text:0040714D                 mov     [esp+6Ch+lpProcName], esi
.text:00407151                 mov     [esp+6Ch+Str], ebx
.text:00407154                 call    eax
.text:00407156                 sub     esp, 8
.text:00407159                 mov     ebx, eax
.text:0040715B                 cmp     eax, 0FFFFFFFFh
.text:0040715E                 jz      loc_407279
.text:00407164
.text:00407164 loc_407164:                             ; CODE XREF: sub_406FF0+29A↓j
.text:00407164                 mov     esi, dword ptr [esp+6Ch+var_2C]
.text:00407168                 mov     ecx, ebx
.text:0040716A                 xor     edi, edi
.text:0040716C                 xor     ebx, ebx
.text:0040716E                 mov     edx, esi
.text:00407170                 mov     esi, ecx
.text:00407172                 or      esi, edi
.text:00407174                 mov     edi, ebx
.text:00407176                 or      edi, edx
.text:00407178
.text:00407178 loc_407178:                             ; CODE XREF: sub_406FF0+153↑j
.text:00407178                                         ; sub_406FF0+294↓j
.text:00407178                 test    ebp, ebp
.text:0040717A                 jz      short loc_407187
.text:0040717C                 mov     [esp+6Ch+Str], ebp ; hLibModule
.text:0040717F                 call    FreeLibrary
.text:00407184                 sub     esp, 4
.text:00407187
.text:00407187 loc_407187:                             ; CODE XREF: sub_406FF0+18A↑j
.text:00407187                 mov     ebp, edi
.text:00407189                 mov     edx, ebp
.text:0040718B                 mov     edi, esi
.text:0040718D                 or      edx, esi
.text:0040718F                 jnz     short loc_40719B
.text:00407191                 mov     eax, [esp+6Ch+arg_4]
.text:00407195                 mov     edi, [eax+30h]
.text:00407198                 mov     ebp, [eax+34h]
.text:0040719B
.text:0040719B loc_40719B:                             ; CODE XREF: sub_406FF0+19F↑j
.text:0040719B                 mov     [esp+6Ch+lpProcName], ebp
.text:0040719F                 mov     ebx, dword_40E050
.text:004071A5                 xor     esi, esi
.text:004071A7                 mov     [esp+6Ch+var_60], esi
.text:004071AB                 mov     [esp+6Ch+Str], edi
.text:004071AE                 mov     [esp+6Ch+var_64], ebx
.text:004071B2                 call    sub_40CD80
.text:004071B7                 mov     [esp+6Ch+var_3C], eax
.text:004071BB                 mov     ecx, dword_40E050
.text:004071C1                 mov     [esp+6Ch+lpProcName], ebp
.text:004071C5                 mov     [esp+6Ch+var_38], edx
.text:004071C9                 shr     ecx, 9
.text:004071CC                 mov     [esp+6Ch+var_44], ecx
.text:004071D0                 mov     [esp+6Ch+var_40], 0
.text:004071D8                 mov     [esp+6Ch+var_64], ebx
.text:004071DC                 mov     [esp+6Ch+var_60], esi
.text:004071E0                 mov     [esp+6Ch+Str], edi
.text:004071E3                 call    sub_40CEA0
.text:004071E8                 mov     ebp, edx
.text:004071EA                 or      ebp, eax
.text:004071EC                 jz      short loc_407250
.text:004071EE                 mov     ebp, [esp+6Ch+var_3C]
.text:004071F2                 mov     esi, [esp+6Ch+var_38]
.text:004071F6                 mov     eax, [esp+6Ch+var_44]
.text:004071FA                 mov     [esp+6Ch+var_4C], ebp
.text:004071FE                 mov     ecx, [esp+6Ch+var_40]
.text:00407202                 mov     ebx, [esp+6Ch+var_44]
.text:00407206                 add     [esp+6Ch+var_4C], 1
.text:0040720B                 mov     [esp+6Ch+var_48], esi
.text:0040720F                 mov     edi, [esp+6Ch+var_4C]
.text:00407213                 adc     [esp+6Ch+var_48], 0
.text:00407218                 mul     [esp+6Ch+var_4C]
.text:0040721C                 imul    ecx, edi
.text:0040721F                 mov     esi, eax
.text:00407221                 mov     eax, [esp+6Ch+var_48]
.text:00407225                 add     edx, ecx
.text:00407227                 imul    ebx, eax
.text:0040722A                 lea     edi, [ebx+edx]
.text:0040722D
.text:0040722D loc_40722D:                             ; CODE XREF: sub_406FF0+287↓j
.text:0040722D                 mov     ebx, [esp+6Ch+arg_4]
.text:00407231                 mov     [ebx+58h], esi
.text:00407234                 mov     esi, [esp+6Ch+lpRootPathName]
.text:00407238                 mov     [ebx+5Ch], edi
.text:0040723B                 mov     [esp+6Ch+Str], esi ; Block
.text:0040723E                 call    free
.text:00407243
.text:00407243 loc_407243:                             ; CODE XREF: sub_406FF0+21↑j
.text:00407243                 add     esp, 5Ch
.text:00407246                 xor     eax, eax
.text:00407248                 pop     ebx
.text:00407249                 pop     esi
.text:0040724A                 pop     edi
.text:0040724B                 pop     ebp
.text:0040724C                 retn
.text:0040724C ; ---------------------------------------------------------------------------
.text:0040724D                 align 10h
.text:00407250
.text:00407250 loc_407250:                             ; CODE XREF: sub_406FF0+1FC↑j
.text:00407250                 mov     eax, [esp+6Ch+var_3C]
.text:00407254                 mov     edi, [esp+6Ch+var_40]
.text:00407258                 mov     ecx, [esp+6Ch+var_3C]
.text:0040725C                 mul     [esp+6Ch+var_44]
.text:00407260                 mov     ebx, [esp+6Ch+var_44]
.text:00407264                 imul    ecx, edi
.text:00407267                 mov     ebp, edx
.text:00407269                 mov     esi, eax
.text:0040726B                 mov     edx, [esp+6Ch+var_38]
.text:0040726F                 add     ebp, ecx
.text:00407271                 imul    ebx, edx
.text:00407274                 lea     edi, [ebx+ebp]
.text:00407277                 jmp     short loc_40722D
.text:00407279 ; ---------------------------------------------------------------------------
.text:00407279
.text:00407279 loc_407279:                             ; CODE XREF: sub_406FF0+16E↑j
.text:00407279                 call    GetLastError
.text:0040727E                 xor     esi, esi
.text:00407280                 xor     edi, edi
.text:00407282                 test    eax, eax
.text:00407284                 jnz     loc_407178
.text:0040728A                 jmp     loc_407164
.text:0040728A ; ---------------------------------------------------------------------------
.text:0040728F                 align 10h
.text:00407290
.text:00407290 loc_407290:                             ; CODE XREF: sub_406FF0+116↑j
.text:00407290                 mov     edx, [esp+6Ch+lpRootPathName]
.text:00407294                 lea     ecx, [esp+6Ch+var_20]
.text:00407298                 lea     ebx, [esp+6Ch+var_1C]
.text:0040729C                 mov     [esp+6Ch+var_5C], ebx ; LPDWORD
.text:004072A0                 lea     edi, [esp+6Ch+var_24]
.text:004072A4                 lea     ebp, [esp+6Ch+var_28]
.text:004072A8                 mov     [esp+6Ch+var_60], ecx ; LPDWORD
.text:004072AC                 mov     [esp+6Ch+var_64], edi ; LPDWORD
.text:004072B0                 mov     [esp+6Ch+lpProcName], ebp ; LPDWORD
.text:004072B4                 mov     [esp+6Ch+Str], edx ; LPCSTR
.text:004072B7                 call    sub_409AC0
.text:004072BC                 test    eax, eax
.text:004072BE                 jnz     short loc_4072E0
.text:004072C0                 mov     [esp+6Ch+var_28], 1
.text:004072C8                 mov     [esp+6Ch+var_24], 200h
.text:004072D0                 mov     [esp+6Ch+var_20], 0
.text:004072D8                 mov     [esp+6Ch+var_1C], 0
.text:004072E0
.text:004072E0 loc_4072E0:                             ; CODE XREF: sub_406FF0+2CE↑j
.text:004072E0                 mov     ebp, [esp+6Ch+var_24]
.text:004072E4                 mov     edi, [esp+6Ch+var_28]
.text:004072E8                 mov     eax, [esp+6Ch+arg_4]
.text:004072EC                 imul    ebp, edi
.text:004072EF                 mov     esi, [eax+10h]
.text:004072F2                 mov     dword_40E050, ebp
.text:004072F8                 mov     ds:dword_40F190, esi
.text:004072FE                 jmp     loc_40710C
.text:00407303 ; ---------------------------------------------------------------------------
.text:00407303
.text:00407303 loc_407303:                             ; CODE XREF: sub_406FF0+9D↑j
.text:00407303                                         ; sub_406FF0+B6↑j ...
.text:00407303                 xor     eax, eax
.text:00407305                 jmp     loc_4070E0
.text:00407305 ; ---------------------------------------------------------------------------
.text:0040730A                 align 10h
.text:00407310
.text:00407310 loc_407310:                             ; CODE XREF: sub_406FF0+AA↑j
.text:00407310                 mov     [esp+6Ch+Str], offset LibFileName ; "KERNEL32.DLL"
.text:00407317                 xor     ebp, ebp
.text:00407319                 call    GetModuleHandleA
.text:0040731E                 sub     esp, 4
.text:00407321                 mov     edi, eax
.text:00407323                 mov     [esp+6Ch+lpProcName], offset aGetbinarytypea ; "GetBinaryTypeA"
.text:0040732B                 mov     [esp+6Ch+Str], eax ; hModule
.text:0040732E                 call    GetProcAddress
.text:00407333                 sub     esp, 8
.text:00407336                 mov     edx, eax
.text:00407338                 test    eax, eax
.text:0040733A                 jz      short loc_407354
.text:0040733C                 mov     eax, [esp+6Ch+String1]
.text:00407340                 lea     ecx, [esp+6Ch+var_18]
.text:00407344                 mov     [esp+6Ch+lpProcName], ecx
.text:00407348                 mov     [esp+6Ch+Str], eax
.text:0040734B                 call    edx
.text:0040734D                 sub     esp, 8
.text:00407350                 test    eax, eax
.text:00407352                 jnz     short loc_4073B8
.text:00407354
.text:00407354 loc_407354:                             ; CODE XREF: sub_406FF0+34A↑j
.text:00407354                 mov     edx, ds:Str
.text:0040735A                 test    edx, edx
.text:0040735C                 jz      short loc_4073D7
.text:0040735E
.text:0040735E loc_40735E:                             ; CODE XREF: sub_406FF0+3FA↓j
.text:0040735E                                         ; sub_406FF0+40C↓j
.text:0040735E                 mov     eax, [esp+6Ch+String1]
.text:00407362                 test    eax, eax
.text:00407364                 jz      short loc_40736F
.text:00407366                 mov     esi, [esp+6Ch+String1]
.text:0040736A                 cmp     byte ptr [esi], 0
.text:0040736D                 jnz     short loc_40738C
.text:0040736F
.text:0040736F loc_40736F:                             ; CODE XREF: sub_406FF0+374↑j
.text:0040736F                                         ; sub_406FF0+3B0↓j ...
.text:0040736F                 mov     [esp+6Ch+Str], edi ; hLibModule
.text:00407372                 call    FreeLibrary
.text:00407377                 sub     esp, 4
.text:0040737A                 test    ebp, ebp
.text:0040737C                 jz      loc_4070A0
.text:00407382                 mov     ebx, 49h ; 'I'
.text:00407387                 jmp     loc_4070A0
.text:0040738C ; ---------------------------------------------------------------------------
.text:0040738C
.text:0040738C loc_40738C:                             ; CODE XREF: sub_406FF0+37D↑j
.text:0040738C                 mov     [esp+6Ch+Str], esi ; Str
.text:0040738F                 mov     [esp+6Ch+lpProcName], 2Eh ; '.' ; Ch
.text:00407397                 call    strrchr
.text:0040739C                 test    eax, eax
.text:0040739E                 mov     esi, eax
.text:004073A0                 jz      short loc_40736F
.text:004073A2                 mov     [esp+6Ch+lpProcName], eax ; SubStr
.text:004073A6                 mov     ecx, ds:Str
.text:004073AC                 mov     [esp+6Ch+Str], ecx ; Str
.text:004073AF                 call    strstr
.text:004073B4                 test    eax, eax
.text:004073B6                 jz      short loc_4073BF
.text:004073B8
.text:004073B8 loc_4073B8:                             ; CODE XREF: sub_406FF0+362↑j
.text:004073B8                                         ; sub_406FF0+3E5↓j
.text:004073B8                 mov     ebp, 1
.text:004073BD                 jmp     short loc_40736F
.text:004073BF ; ---------------------------------------------------------------------------
.text:004073BF
.text:004073BF loc_4073BF:                             ; CODE XREF: sub_406FF0+3C6↑j
.text:004073BF                 mov     [esp+6Ch+lpProcName], esi ; SubStr
.text:004073C3                 mov     edx, off_40E054 ; ".com;.exe;.bat;.cmd"
.text:004073C9                 mov     [esp+6Ch+Str], edx ; Str
.text:004073CC                 call    strstr
.text:004073D1                 test    eax, eax
.text:004073D3                 jz      short loc_40736F
.text:004073D5                 jmp     short loc_4073B8
.text:004073D7 ; ---------------------------------------------------------------------------
.text:004073D7
.text:004073D7 loc_4073D7:                             ; CODE XREF: sub_406FF0+36C↑j
.text:004073D7                 mov     [esp+6Ch+Str], offset aPathext ; "PATHEXT"
.text:004073DE                 call    getenv
.text:004073E3                 mov     ds:Str, eax
.text:004073E8                 test    eax, eax
.text:004073EA                 jnz     loc_40735E
.text:004073F0                 mov     esi, off_40E054 ; ".com;.exe;.bat;.cmd"
.text:004073F6                 mov     ds:Str, esi
.text:004073FC                 jmp     loc_40735E
.text:00407401 ; ---------------------------------------------------------------------------
.text:00407401
.text:00407401 loc_407401:                             ; CODE XREF: sub_406FF0+81↑j
.text:00407401                                         ; sub_406FF0+452↓j
.text:00407401                 shld    edi, esi, 8
.text:00407405                 movsx   eax, cl
.text:00407408                 shl     esi, 8
.text:0040740B                 cdq
.text:0040740C                 add     esi, eax
.text:0040740E                 adc     edi, edx
.text:00407410                 mov     edx, edi
.text:00407412                 xor     ebx, ebx
.text:00407414                 and     edx, 0FF000000h
.text:0040741A                 mov     eax, edx
.text:0040741C                 or      eax, ebx
.text:0040741E                 jz      short loc_407439
.text:00407420                 mov     ecx, edx
.text:00407422                 xor     eax, eax
.text:00407424                 shr     ecx, 10h
.text:00407427                 mov     edx, esi
.text:00407429                 xor     edx, ecx
.text:0040742B                 mov     ecx, edi
.text:0040742D                 xor     ecx, eax
.text:0040742F                 mov     esi, edx
.text:00407431                 mov     edi, ecx
.text:00407433                 and     edi, 0FFFFFFh
.text:00407439
.text:00407439 loc_407439:                             ; CODE XREF: sub_406FF0+42E↑j
.text:00407439                 inc     ebp
.text:0040743A                 movzx   ebx, byte ptr [ebp+0]
.text:0040743E                 test    bl, bl
.text:00407440                 mov     cl, bl
.text:00407442                 jnz     short loc_407401
.text:00407444                 mov     eax, esi
.text:00407446                 mov     edx, edi
.text:00407448                 jmp     loc_40707B
.text:00407448 ; ---------------------------------------------------------------------------
.text:0040744D                 align 10h
.text:00407450
.text:00407450 loc_407450:                             ; CODE XREF: sub_406FF0+3F↑j
.text:00407450                                         ; sub_406FF0+57↑j
.text:00407450                 mov     edi, [esp+6Ch+lpRootPathName]
.text:00407454                 mov     ebp, [esp+6Ch+String1]
.text:00407458                 mov     [esp+6Ch+lpProcName], edi ; String2
.text:0040745C                 mov     [esp+6Ch+Str], ebp ; String1
.text:0040745F                 call    _stricmp
.text:00407464                 test    eax, eax
.text:00407466                 jnz     short loc_407480
.text:00407468                 mov     ebx, [esp+6Ch+arg_4]
.text:0040746C                 mov     dword ptr [ebx+8], 5
.text:00407473                 mov     dword ptr [ebx+0Ch], 50000h
.text:0040747A                 jmp     loc_40704D
.text:0040747A ; ---------------------------------------------------------------------------
.text:0040747F                 align 10h
.text:00407480
.text:00407480 loc_407480:                             ; CODE XREF: sub_406FF0+476↑j
.text:00407480                 mov     ebp, [esp+6Ch+String1]
.text:00407484                 xor     esi, esi
.text:00407486                 xor     edi, edi
.text:00407488                 add     ebp, ebx
.text:0040748A                 jz      short loc_407494
.text:0040748C                 movzx   ecx, byte ptr [ebp+0]
.text:00407490                 test    cl, cl
.text:00407492                 jnz     short loc_4074A7
.text:00407494
.text:00407494 loc_407494:                             ; CODE XREF: sub_406FF0+49A↑j
.text:00407494                 xor     eax, eax
.text:00407496                 xor     edx, edx
.text:00407498
.text:00407498 loc_407498:                             ; CODE XREF: sub_406FF0+4FE↓j
.text:00407498                 mov     ebp, [esp+6Ch+arg_4]
.text:0040749C                 mov     [ebp+8], eax
.text:0040749F                 mov     [ebp+0Ch], edx
.text:004074A2                 jmp     loc_40704D
.text:004074A7 ; ---------------------------------------------------------------------------
.text:004074A7
.text:004074A7 loc_4074A7:                             ; CODE XREF: sub_406FF0+4A2↑j
.text:004074A7                                         ; sub_406FF0+4F8↓j
.text:004074A7                 shld    edi, esi, 8
.text:004074AB                 movsx   eax, cl
.text:004074AE                 shl     esi, 8
.text:004074B1                 cdq
.text:004074B2                 add     esi, eax
.text:004074B4                 adc     edi, edx
.text:004074B6                 mov     edx, edi
.text:004074B8                 xor     ebx, ebx
.text:004074BA                 and     edx, 0FF000000h
.text:004074C0                 mov     eax, edx
.text:004074C2                 or      eax, ebx
.text:004074C4                 jz      short loc_4074DF
.text:004074C6                 mov     ecx, edx
.text:004074C8                 xor     eax, eax
.text:004074CA                 shr     ecx, 10h
.text:004074CD                 mov     edx, esi
.text:004074CF                 xor     edx, ecx
.text:004074D1                 mov     ecx, edi
.text:004074D3                 xor     ecx, eax
.text:004074D5                 mov     esi, edx
.text:004074D7                 mov     edi, ecx
.text:004074D9                 and     edi, 0FFFFFFh
.text:004074DF
.text:004074DF loc_4074DF:                             ; CODE XREF: sub_406FF0+4D4↑j
.text:004074DF                 inc     ebp
.text:004074E0                 movzx   ebx, byte ptr [ebp+0]
.text:004074E4                 test    bl, bl
.text:004074E6                 mov     cl, bl
.text:004074E8                 jnz     short loc_4074A7
.text:004074EA                 mov     eax, esi
.text:004074EC                 mov     edx, edi
.text:004074EE                 jmp     short loc_407498
.text:004074EE sub_406FF0      endp
.text:004074EE
.text:004074F0
.text:004074F0 ; =============== S U B R O U T I N E =======================================
.text:004074F0
.text:004074F0
.text:004074F0 ; int __cdecl sub_4074F0(LPCSTR)
.text:004074F0 sub_4074F0      proc near               ; CODE XREF: sub_4091C0+CA↓p
.text:004074F0
.text:004074F0 lpRootPathName  = dword ptr -83Ch
.text:004074F0 lpVolumeNameBuffer= dword ptr -838h
.text:004074F0 nVolumeNameSize = dword ptr -834h
.text:004074F0 lpVolumeSerialNumber= dword ptr -830h
.text:004074F0 lpMaximumComponentLength= dword ptr -82Ch
.text:004074F0 lpFileSystemFlags= dword ptr -828h
.text:004074F0 lpFileSystemNameBuffer= dword ptr -824h
.text:004074F0 nFileSystemNameSize= dword ptr -820h
.text:004074F0 VolumeSerialNumber= dword ptr -818h
.text:004074F0 MaximumComponentLength= dword ptr -814h
.text:004074F0 FileSystemFlags = dword ptr -810h
.text:004074F0 FileSystemNameBuffer= byte ptr -80Ch
.text:004074F0 VolumeNameBuffer= byte ptr -40Ch
.text:004074F0 var_4           = dword ptr -4
.text:004074F0 arg_0           = dword ptr  4
.text:004074F0
.text:004074F0                 sub     esp, 83Ch
.text:004074F6                 mov     [esp+83Ch+var_4], ebx
.text:004074FD                 mov     ebx, [esp+83Ch+arg_0]
.text:00407504                 mov     [esp+83Ch+lpRootPathName], ebx ; LPCSTR
.text:00407507                 call    sub_4090A0
.text:0040750C                 mov     [esp+83Ch+lpRootPathName], eax
.text:0040750F                 call    sub_406120
.text:00407514                 mov     [esp+83Ch+lpRootPathName], eax ; lpRootPathName
.text:00407517                 lea     edx, [esp+83Ch+FileSystemNameBuffer]
.text:0040751B                 mov     ebx, eax
.text:0040751D                 mov     [esp+83Ch+lpFileSystemNameBuffer], edx ; lpFileSystemNameBuffer
.text:00407521                 lea     ecx, [esp+83Ch+FileSystemFlags]
.text:00407525                 lea     edx, [esp+83Ch+MaximumComponentLength]
.text:00407529                 mov     [esp+83Ch+lpFileSystemFlags], ecx ; lpFileSystemFlags
.text:0040752D                 lea     ecx, [esp+83Ch+VolumeSerialNumber]
.text:00407531                 mov     [esp+83Ch+lpMaximumComponentLength], edx ; lpMaximumComponentLength
.text:00407535                 lea     edx, [esp+83Ch+VolumeNameBuffer]
.text:0040753C                 mov     [esp+83Ch+lpVolumeSerialNumber], ecx ; lpVolumeSerialNumber
.text:00407540                 mov     [esp+83Ch+lpVolumeNameBuffer], edx ; lpVolumeNameBuffer
.text:00407544                 mov     [esp+83Ch+nFileSystemNameSize], 400h ; nFileSystemNameSize
.text:0040754C                 mov     [esp+83Ch+nVolumeNameSize], 400h ; nVolumeNameSize
.text:00407554                 call    GetVolumeInformationA
.text:00407559                 sub     esp, 20h
.text:0040755C                 test    eax, eax
.text:0040755E                 setz    cl
.text:00407561                 mov     [esp+83Ch+lpRootPathName], ebx ; Block
.text:00407564                 movzx   edx, cl
.text:00407567                 dec     edx
.text:00407568                 and     [esp+83Ch+VolumeSerialNumber], edx
.text:0040756C                 call    free
.text:00407571                 mov     eax, [esp+83Ch+VolumeSerialNumber]
.text:00407575                 mov     ebx, [esp+83Ch+var_4]
.text:0040757C                 add     esp, 83Ch
.text:00407582                 retn
.text:00407582 sub_4074F0      endp
.text:00407582
.text:00407582 ; ---------------------------------------------------------------------------
.text:00407583                 align 10h
.text:00407590                 push    ebp
.text:00407591                 push    edi
.text:00407592                 xor     edi, edi
.text:00407594                 push    esi
.text:00407595                 xor     esi, esi
.text:00407597                 push    ebx
.text:00407598                 mov     ebp, [esp+14h]
.text:0040759C                 test    ebp, ebp
.text:0040759E                 jz      short loc_4075A8
.text:004075A0                 movzx   ecx, byte ptr [ebp+0]
.text:004075A4                 test    cl, cl
.text:004075A6                 jnz     short loc_4075B1
.text:004075A8
.text:004075A8 loc_4075A8:                             ; CODE XREF: .text:0040759E↑j
.text:004075A8                 xor     eax, eax
.text:004075AA                 xor     edx, edx
.text:004075AC
.text:004075AC loc_4075AC:                             ; CODE XREF: .text:004075F8↓j
.text:004075AC                 pop     ebx
.text:004075AD                 pop     esi
.text:004075AE                 pop     edi
.text:004075AF                 pop     ebp
.text:004075B0                 retn
.text:004075B1 ; ---------------------------------------------------------------------------
.text:004075B1
.text:004075B1 loc_4075B1:                             ; CODE XREF: .text:004075A6↑j
.text:004075B1                                         ; .text:004075F2↓j
.text:004075B1                 shld    edi, esi, 8
.text:004075B5                 movsx   eax, cl
.text:004075B8                 shl     esi, 8
.text:004075BB                 cdq
.text:004075BC                 add     esi, eax
.text:004075BE                 adc     edi, edx
.text:004075C0                 mov     edx, edi
.text:004075C2                 xor     ebx, ebx
.text:004075C4                 and     edx, 0FF000000h
.text:004075CA                 mov     eax, edx
.text:004075CC                 or      eax, ebx
.text:004075CE                 jz      short loc_4075E9
.text:004075D0                 mov     ecx, edx
.text:004075D2                 xor     eax, eax
.text:004075D4                 shr     ecx, 10h
.text:004075D7                 mov     edx, esi
.text:004075D9                 xor     edx, ecx
.text:004075DB                 mov     ecx, edi
.text:004075DD                 xor     ecx, eax
.text:004075DF                 mov     esi, edx
.text:004075E1                 mov     edi, ecx
.text:004075E3                 and     edi, 0FFFFFFh
.text:004075E9
.text:004075E9 loc_4075E9:                             ; CODE XREF: .text:004075CE↑j
.text:004075E9                 inc     ebp
.text:004075EA                 movzx   ebx, byte ptr [ebp+0]
.text:004075EE                 test    bl, bl
.text:004075F0                 mov     cl, bl
.text:004075F2                 jnz     short loc_4075B1
.text:004075F4                 mov     eax, esi
.text:004075F6                 mov     edx, edi
.text:004075F8                 jmp     short loc_4075AC
.text:004075F8 ; ---------------------------------------------------------------------------
.text:004075FA                 align 10h
.text:00407600                 sub     esp, 2Ch
.text:00407603                 lea     edx, [esp+24h]
.text:00407607                 lea     ecx, [esp+28h]
.text:0040760B                 mov     [esp+0Ch], edx
.text:0040760F                 lea     edx, [esp+1Ch]
.text:00407613                 mov     [esp+4], edx
.text:00407617                 mov     edx, [esp+30h]
.text:0040761B                 mov     [esp+10h], ecx
.text:0040761F                 lea     ecx, [esp+20h]
.text:00407623                 mov     [esp+8], ecx
.text:00407627                 mov     [esp], edx
.text:0040762A                 call    sub_409AC0
.text:0040762F                 test    eax, eax
.text:00407631                 jnz     short loc_407653
.text:00407633                 mov     dword ptr [esp+1Ch], 1
.text:0040763B                 mov     dword ptr [esp+20h], 200h
.text:00407643                 mov     dword ptr [esp+24h], 0
.text:0040764B                 mov     dword ptr [esp+28h], 0
.text:00407653
.text:00407653 loc_407653:                             ; CODE XREF: .text:00407631↑j
.text:00407653                 mov     eax, [esp+20h]
.text:00407657                 mov     ecx, [esp+1Ch]
.text:0040765B                 add     esp, 2Ch
.text:0040765E                 imul    eax, ecx
.text:00407661                 retn
.text:00407661 ; ---------------------------------------------------------------------------
.text:00407662                 align 10h
.text:00407670                 sub     esp, 1Ch
.text:00407673                 mov     eax, [esp+20h]
.text:00407677                 mov     [esp+14h], esi
.text:0040767B                 mov     [esp+18h], edi
.text:0040767F                 test    eax, eax
.text:00407681                 jz      short loc_4076C0
.text:00407683                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:0040768B                 mov     [esp], eax
.text:0040768E                 call    strrchr
.text:00407693                 test    eax, eax
.text:00407695                 jz      short loc_4076C0
.text:00407697                 cld
.text:00407698                 mov     esi, eax
.text:0040769A                 mov     edi, offset aLnk_0 ; ".lnk"
.text:0040769F                 mov     ecx, 5
.text:004076A4                 repe cmpsb
.text:004076A6                 setz    dl
.text:004076A9                 movzx   eax, dl
.text:004076AC                 lea     esi, [esi+0]
.text:004076B0
.text:004076B0 loc_4076B0:                             ; CODE XREF: .text:004076C2↓j
.text:004076B0                 mov     esi, [esp+14h]
.text:004076B4                 mov     edi, [esp+18h]
.text:004076B8                 add     esp, 1Ch
.text:004076BB                 retn
.text:004076BB ; ---------------------------------------------------------------------------
.text:004076BC                 align 10h
.text:004076C0
.text:004076C0 loc_4076C0:                             ; CODE XREF: .text:00407681↑j
.text:004076C0                                         ; .text:00407695↑j
.text:004076C0                 xor     eax, eax
.text:004076C2                 jmp     short loc_4076B0
.text:004076C2 ; ---------------------------------------------------------------------------
.text:004076C4                 align 10h
.text:004076D0                 sub     esp, 1Ch
.text:004076D3                 mov     [esp+10h], ebx
.text:004076D7                 mov     ebx, [esp+20h]
.text:004076DB                 mov     [esp+14h], esi
.text:004076DF                 mov     [esp+18h], edi
.text:004076E3                 xor     edi, edi
.text:004076E5                 mov     dword ptr [esp], offset LibFileName ; "KERNEL32.DLL"
.text:004076EC                 call    GetModuleHandleA
.text:004076F1                 sub     esp, 4
.text:004076F4                 mov     esi, eax
.text:004076F6                 mov     dword ptr [esp+4], offset aGetbinarytypea ; "GetBinaryTypeA"
.text:004076FE                 mov     [esp], eax
.text:00407701                 call    GetProcAddress
.text:00407706                 sub     esp, 8
.text:00407709                 test    eax, eax
.text:0040770B                 jz      short loc_407721
.text:0040770D                 mov     [esp], ebx
.text:00407710                 lea     ecx, [esp+0Ch]
.text:00407714                 mov     [esp+4], ecx
.text:00407718                 call    eax
.text:0040771A                 sub     esp, 8
.text:0040771D                 test    eax, eax
.text:0040771F                 jnz     short loc_407780
.text:00407721
.text:00407721 loc_407721:                             ; CODE XREF: .text:0040770B↑j
.text:00407721                 mov     eax, ds:Str
.text:00407726                 test    eax, eax
.text:00407728                 jz      short loc_4077A0
.text:0040772A
.text:0040772A loc_40772A:                             ; CODE XREF: .text:004077B3↓j
.text:0040772A                                         ; .text:004077C5↓j
.text:0040772A                 test    ebx, ebx
.text:0040772C                 jz      short loc_407733
.text:0040772E                 cmp     byte ptr [ebx], 0
.text:00407731                 jnz     short loc_407750
.text:00407733
.text:00407733 loc_407733:                             ; CODE XREF: .text:0040772C↑j
.text:00407733                                         ; .text:00407764↓j ...
.text:00407733                 mov     [esp], esi
.text:00407736                 call    FreeLibrary
.text:0040773B                 sub     esp, 4
.text:0040773E                 mov     eax, edi
.text:00407740                 mov     ebx, [esp+10h]
.text:00407744                 mov     esi, [esp+14h]
.text:00407748                 mov     edi, [esp+18h]
.text:0040774C                 add     esp, 1Ch
.text:0040774F                 retn
.text:00407750 ; ---------------------------------------------------------------------------
.text:00407750
.text:00407750 loc_407750:                             ; CODE XREF: .text:00407731↑j
.text:00407750                 mov     [esp], ebx
.text:00407753                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:0040775B                 call    strrchr
.text:00407760                 test    eax, eax
.text:00407762                 mov     ebx, eax
.text:00407764                 jz      short loc_407733
.text:00407766                 mov     [esp+4], eax
.text:0040776A                 mov     ecx, ds:Str
.text:00407770                 mov     [esp], ecx
.text:00407773                 call    strstr
.text:00407778                 test    eax, eax
.text:0040777A                 jz      short loc_407787
.text:0040777C                 lea     esi, [esi+0]
.text:00407780
.text:00407780 loc_407780:                             ; CODE XREF: .text:0040771F↑j
.text:00407780                                         ; .text:0040779D↓j
.text:00407780                 mov     edi, 1
.text:00407785                 jmp     short loc_407733
.text:00407787 ; ---------------------------------------------------------------------------
.text:00407787
.text:00407787 loc_407787:                             ; CODE XREF: .text:0040777A↑j
.text:00407787                 mov     [esp+4], ebx
.text:0040778B                 mov     ebx, off_40E054 ; ".com;.exe;.bat;.cmd"
.text:00407791                 mov     [esp], ebx
.text:00407794                 call    strstr
.text:00407799                 test    eax, eax
.text:0040779B                 jz      short loc_407733
.text:0040779D                 jmp     short loc_407780
.text:0040779D ; ---------------------------------------------------------------------------
.text:0040779F                 align 10h
.text:004077A0
.text:004077A0 loc_4077A0:                             ; CODE XREF: .text:00407728↑j
.text:004077A0                 mov     dword ptr [esp], offset aPathext ; "PATHEXT"
.text:004077A7                 call    getenv
.text:004077AC                 mov     ds:Str, eax
.text:004077B1                 test    eax, eax
.text:004077B3                 jnz     loc_40772A
.text:004077B9                 mov     edx, off_40E054 ; ".com;.exe;.bat;.cmd"
.text:004077BF                 mov     ds:Str, edx
.text:004077C5                 jmp     loc_40772A
.text:004077C5 ; ---------------------------------------------------------------------------
.text:004077CA                 align 10h
.text:004077D0                 sub     esp, 0Ch
.text:004077D3                 mov     edx, [esp+10h]
.text:004077D7                 mov     [esp], edx
.text:004077DA                 call    GetFileType
.text:004077DF                 sub     esp, 4
.text:004077E2                 xor     edx, edx
.text:004077E4                 cmp     eax, 2
.text:004077E7                 jz      short loc_407800
.text:004077E9                 cmp     eax, 3
.text:004077EC                 jz      short loc_4077F4
.text:004077EE
.text:004077EE loc_4077EE:                             ; CODE XREF: .text:004077F9↓j
.text:004077EE                                         ; .text:00407805↓j
.text:004077EE                 mov     eax, edx
.text:004077F0                 add     esp, 0Ch
.text:004077F3                 retn
.text:004077F4 ; ---------------------------------------------------------------------------
.text:004077F4
.text:004077F4 loc_4077F4:                             ; CODE XREF: .text:004077EC↑j
.text:004077F4                 mov     edx, 1000h
.text:004077F9                 jmp     short loc_4077EE
.text:004077F9 ; ---------------------------------------------------------------------------
.text:004077FB                 align 10h
.text:00407800
.text:00407800 loc_407800:                             ; CODE XREF: .text:004077E7↑j
.text:00407800                 mov     edx, 2000h
.text:00407805                 jmp     short loc_4077EE
.text:00407805 ; ---------------------------------------------------------------------------
.text:00407807                 align 10h
.text:00407810                 mov     ecx, [esp+4]
.text:00407814                 xor     edx, edx
.text:00407816                 test    cl, 10h
.text:00407819                 setz    dl
.text:0040781C                 dec     edx
.text:0040781D                 and     edx, 0FFFFC000h
.text:00407823                 add     edx, 8000h
.text:00407829                 or      edx, 124h
.text:0040782F                 test    cl, 1
.text:00407832                 movzx   eax, dx
.text:00407835                 jnz     short locret_40783C
.text:00407837                 or      eax, 92h
.text:0040783C
.text:0040783C locret_40783C:                          ; CODE XREF: .text:00407835↑j
.text:0040783C                 retn
.text:0040783C ; ---------------------------------------------------------------------------
.text:0040783D                 align 10h
.text:00407840                 sub     esp, 2Ch
.text:00407843                 mov     [esp+20h], esi
.text:00407847                 mov     esi, [esp+30h]
.text:0040784B                 mov     [esp+1Ch], ebx
.text:0040784F                 xor     ebx, ebx
.text:00407851                 test    esi, esi
.text:00407853                 mov     [esp+24h], edi
.text:00407857                 mov     [esp+28h], ebp
.text:0040785B                 jz      short loc_4078B0
.text:0040785D                 cmp     byte ptr [esi], 0
.text:00407860                 jnz     short loc_4078B4
.text:00407862
.text:00407862 loc_407862:                             ; CODE XREF: .text:0040791C↓j
.text:00407862                                         ; .text:00407927↓j
.text:00407862                 test    esi, esi
.text:00407864                 jz      short loc_4078B0
.text:00407866                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:0040786E                 mov     [esp], esi
.text:00407871                 call    strrchr
.text:00407876                 test    eax, eax
.text:00407878                 jz      short loc_4078B0
.text:0040787A                 cld
.text:0040787B                 mov     ecx, 5
.text:00407880                 mov     esi, eax
.text:00407882                 mov     edi, offset aLnk_0 ; ".lnk"
.text:00407887                 repe cmpsb
.text:00407889                 setz    cl
.text:0040788C                 movzx   eax, cl
.text:0040788F                 nop
.text:00407890
.text:00407890 loc_407890:                             ; CODE XREF: .text:004078B2↓j
.text:00407890                 test    eax, eax
.text:00407892                 jz      short loc_40789A
.text:00407894                 or      ebx, 0A000h
.text:0040789A
.text:0040789A loc_40789A:                             ; CODE XREF: .text:00407892↑j
.text:0040789A                 mov     eax, ebx
.text:0040789C                 mov     esi, [esp+20h]
.text:004078A0                 mov     ebx, [esp+1Ch]
.text:004078A4                 mov     edi, [esp+24h]
.text:004078A8                 mov     ebp, [esp+28h]
.text:004078AC                 add     esp, 2Ch
.text:004078AF                 retn
.text:004078B0 ; ---------------------------------------------------------------------------
.text:004078B0
.text:004078B0 loc_4078B0:                             ; CODE XREF: .text:0040785B↑j
.text:004078B0                                         ; .text:00407864↑j ...
.text:004078B0                 xor     eax, eax
.text:004078B2                 jmp     short loc_407890
.text:004078B4 ; ---------------------------------------------------------------------------
.text:004078B4
.text:004078B4 loc_4078B4:                             ; CODE XREF: .text:00407860↑j
.text:004078B4                 mov     dword ptr [esp], offset LibFileName ; "KERNEL32.DLL"
.text:004078BB                 call    GetModuleHandleA
.text:004078C0                 sub     esp, 4
.text:004078C3                 mov     ebp, eax
.text:004078C5                 mov     dword ptr [esp+4], offset aGetbinarytypea ; "GetBinaryTypeA"
.text:004078CD                 mov     [esp], eax
.text:004078D0                 call    GetProcAddress
.text:004078D5                 sub     esp, 8
.text:004078D8                 test    eax, eax
.text:004078DA                 mov     dword ptr [esp+14h], 0
.text:004078E2                 jz      short loc_4078F8
.text:004078E4                 mov     [esp], esi
.text:004078E7                 lea     ecx, [esp+18h]
.text:004078EB                 mov     [esp+4], ecx
.text:004078EF                 call    eax
.text:004078F1                 sub     esp, 8
.text:004078F4                 test    eax, eax
.text:004078F6                 jnz     short loc_407958
.text:004078F8
.text:004078F8 loc_4078F8:                             ; CODE XREF: .text:004078E2↑j
.text:004078F8                 mov     edx, ds:Str
.text:004078FE                 test    edx, edx
.text:00407900                 jz      short loc_407980
.text:00407902
.text:00407902 loc_407902:                             ; CODE XREF: .text:00407993↓j
.text:00407902                                         ; .text:004079A5↓j
.text:00407902                 test    esi, esi
.text:00407904                 jz      short loc_40790B
.text:00407906                 cmp     byte ptr [esi], 0
.text:00407909                 jnz     short loc_40792C
.text:0040790B
.text:0040790B loc_40790B:                             ; CODE XREF: .text:00407904↑j
.text:0040790B                                         ; .text:00407940↓j ...
.text:0040790B                 mov     [esp], ebp
.text:0040790E                 call    FreeLibrary
.text:00407913                 sub     esp, 4
.text:00407916                 mov     eax, [esp+14h]
.text:0040791A                 test    eax, eax
.text:0040791C                 jz      loc_407862
.text:00407922                 mov     ebx, 49h ; 'I'
.text:00407927                 jmp     loc_407862
.text:0040792C ; ---------------------------------------------------------------------------
.text:0040792C
.text:0040792C loc_40792C:                             ; CODE XREF: .text:00407909↑j
.text:0040792C                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:00407934                 mov     [esp], esi
.text:00407937                 call    strrchr
.text:0040793C                 test    eax, eax
.text:0040793E                 mov     edi, eax
.text:00407940                 jz      short loc_40790B
.text:00407942                 mov     [esp+4], eax
.text:00407946                 mov     edx, ds:Str
.text:0040794C                 mov     [esp], edx
.text:0040794F                 call    strstr
.text:00407954                 test    eax, eax
.text:00407956                 jz      short loc_407962
.text:00407958
.text:00407958 loc_407958:                             ; CODE XREF: .text:004078F6↑j
.text:00407958                                         ; .text:00407978↓j
.text:00407958                 mov     dword ptr [esp+14h], 1
.text:00407960                 jmp     short loc_40790B
.text:00407962 ; ---------------------------------------------------------------------------
.text:00407962
.text:00407962 loc_407962:                             ; CODE XREF: .text:00407956↑j
.text:00407962                 mov     [esp+4], edi
.text:00407966                 mov     edi, off_40E054 ; ".com;.exe;.bat;.cmd"
.text:0040796C                 mov     [esp], edi
.text:0040796F                 call    strstr
.text:00407974                 test    eax, eax
.text:00407976                 jz      short loc_40790B
.text:00407978                 jmp     short loc_407958
.text:00407978 ; ---------------------------------------------------------------------------
.text:0040797A                 align 10h
.text:00407980
.text:00407980 loc_407980:                             ; CODE XREF: .text:00407900↑j
.text:00407980                 mov     dword ptr [esp], offset aPathext ; "PATHEXT"
.text:00407987                 call    getenv
.text:0040798C                 mov     ds:Str, eax
.text:00407991                 test    eax, eax
.text:00407993                 jnz     loc_407902
.text:00407999                 mov     ecx, off_40E054 ; ".com;.exe;.bat;.cmd"
.text:0040799F                 mov     ds:Str, ecx
.text:004079A5                 jmp     loc_407902
.text:004079A5 ; ---------------------------------------------------------------------------
.text:004079AA                 align 10h
.text:004079B0                 push    esi
.text:004079B1                 push    ebx
.text:004079B2                 sub     esp, 864h
.text:004079B8                 mov     ebx, [esp+870h]
.text:004079BF                 lea     edx, [esp+830h]
.text:004079C6                 mov     esi, [esp+874h]
.text:004079CD                 mov     [esp+4], edx
.text:004079D1                 mov     [esp], ebx
.text:004079D4                 call    sub_406830
.text:004079D9                 xor     edx, edx
.text:004079DB                 test    eax, eax
.text:004079DD                 jz      loc_407AC5
.text:004079E3                 mov     ecx, [esp+830h]
.text:004079EA                 test    cl, 10h
.text:004079ED                 mov     [esi], ecx
.text:004079EF                 mov     eax, [esp+834h]
.text:004079F6                 mov     edx, [esp+838h]
.text:004079FD                 mov     [esi+4], eax
.text:00407A00                 mov     [esi+8], edx
.text:00407A03                 mov     eax, [esp+83Ch]
.text:00407A0A                 mov     edx, [esp+840h]
.text:00407A11                 mov     [esi+0Ch], eax
.text:00407A14                 mov     [esi+10h], edx
.text:00407A17                 mov     edx, [esp+848h]
.text:00407A1E                 mov     eax, [esp+844h]
.text:00407A25                 mov     [esi+18h], edx
.text:00407A28                 mov     [esi+14h], eax
.text:00407A2B                 mov     edx, [esp+84Ch]
.text:00407A32                 mov     [esi+20h], edx
.text:00407A35                 mov     edx, [esp+850h]
.text:00407A3C                 mov     [esi+24h], edx
.text:00407A3F                 jnz     loc_407AD0
.text:00407A45                 mov     dword ptr [esi+28h], 1
.text:00407A4C
.text:00407A4C loc_407A4C:                             ; CODE XREF: .text:00407ADB↓j
.text:00407A4C                 mov     [esp], ebx
.text:00407A4F                 call    sub_4090A0
.text:00407A54                 mov     [esp], eax
.text:00407A57                 call    sub_406120
.text:00407A5C                 mov     [esp], eax
.text:00407A5F                 lea     edx, [esp+30h]
.text:00407A63                 mov     ebx, eax
.text:00407A65                 mov     [esp+18h], edx
.text:00407A69                 lea     ecx, [esp+2Ch]
.text:00407A6D                 lea     edx, [esp+28h]
.text:00407A71                 mov     [esp+14h], ecx
.text:00407A75                 lea     ecx, [esp+24h]
.text:00407A79                 mov     [esp+10h], edx
.text:00407A7D                 lea     edx, [esp+430h]
.text:00407A84                 mov     [esp+0Ch], ecx
.text:00407A88                 mov     [esp+4], edx
.text:00407A8C                 mov     dword ptr [esp+1Ch], 400h
.text:00407A94                 mov     dword ptr [esp+8], 400h
.text:00407A9C                 call    GetVolumeInformationA
.text:00407AA1                 sub     esp, 20h
.text:00407AA4                 test    eax, eax
.text:00407AA6                 setz    cl
.text:00407AA9                 mov     [esp], ebx
.text:00407AAC                 movzx   edx, cl
.text:00407AAF                 dec     edx
.text:00407AB0                 and     [esp+24h], edx
.text:00407AB4                 call    free
.text:00407AB9                 mov     ecx, [esp+24h]
.text:00407ABD                 mov     edx, 1
.text:00407AC2                 mov     [esi+1Ch], ecx
.text:00407AC5
.text:00407AC5 loc_407AC5:                             ; CODE XREF: .text:004079DD↑j
.text:00407AC5                 add     esp, 864h
.text:00407ACB                 mov     eax, edx
.text:00407ACD                 pop     ebx
.text:00407ACE                 pop     esi
.text:00407ACF                 retn
.text:00407AD0 ; ---------------------------------------------------------------------------
.text:00407AD0
.text:00407AD0 loc_407AD0:                             ; CODE XREF: .text:00407A3F↑j
.text:00407AD0                 mov     [esp], ebx
.text:00407AD3                 call    sub_4069A0
.text:00407AD8                 mov     [esi+28h], eax
.text:00407ADB                 jmp     loc_407A4C
.text:00407AE0 ; ---------------------------------------------------------------------------
.text:00407AE0                 push    ebp
.text:00407AE1                 xor     edx, edx
.text:00407AE3                 push    edi
.text:00407AE4                 push    esi
.text:00407AE5                 xor     esi, esi
.text:00407AE7                 push    ebx
.text:00407AE8                 sub     esp, 1Ch
.text:00407AEB                 mov     ebx, [esp+5Ch]
.text:00407AEF                 mov     ecx, [esp+30h]
.text:00407AF3                 mov     edi, [esp+60h]
.text:00407AF7                 or      esi, ebx
.text:00407AF9                 mov     eax, [esp+4Ch]
.text:00407AFD                 or      edi, edx
.text:00407AFF                 mov     ebx, [esp+64h]
.text:00407B03                 xor     edx, edx
.text:00407B05                 test    cl, 10h
.text:00407B08                 setz    dl
.text:00407B0B                 mov     [ebx+10h], eax
.text:00407B0E                 mov     [ebx+8], edi
.text:00407B11                 mov     [ebx+0Ch], esi
.text:00407B14                 dec     edx
.text:00407B15                 and     edx, 0FFFFC000h
.text:00407B1B                 mov     dword ptr [ebx+14h], 0
.text:00407B22                 add     edx, 8000h
.text:00407B28                 or      edx, 124h
.text:00407B2E                 test    cl, 1
.text:00407B31                 movzx   eax, dx
.text:00407B34                 jnz     short loc_407B3B
.text:00407B36                 or      eax, 92h
.text:00407B3B
.text:00407B3B loc_407B3B:                             ; CODE XREF: .text:00407B34↑j
.text:00407B3B                 mov     ebx, [esp+54h]
.text:00407B3F                 xor     edx, edx
.text:00407B41                 xor     ebp, ebp
.text:00407B43                 mov     edi, [esp+50h]
.text:00407B47                 mov     ecx, [esp+64h]
.text:00407B4B                 mov     esi, edi
.text:00407B4D                 or      [ecx], eax
.text:00407B4F                 mov     edi, ebx
.text:00407B51                 or      edi, ebp
.text:00407B53                 mov     ebp, edx
.text:00407B55                 mov     ebx, [esp+64h]
.text:00407B59                 or      ebp, esi
.text:00407B5B                 mov     esi, [esp+58h]
.text:00407B5F                 mov     edx, [esp+40h]
.text:00407B63                 mov     [ebx+30h], edi
.text:00407B66                 mov     [ebx+18h], esi
.text:00407B69                 mov     ecx, edx
.text:00407B6B                 xor     esi, esi
.text:00407B6D                 mov     [ebx+34h], ebp
.text:00407B70                 xor     edx, edx
.text:00407B72                 or      esi, ecx
.text:00407B74                 mov     dword ptr [esp+8], 989680h
.text:00407B7C                 mov     ebx, [esp+3Ch]
.text:00407B80                 mov     ecx, esi
.text:00407B82                 mov     dword ptr [esp+0Ch], 0
.text:00407B8A                 or      ebx, edx
.text:00407B8C                 mov     edx, ebx
.text:00407B8E                 sub     edx, 0D53E8000h
.text:00407B94                 sbb     ecx, 19DB1DEh
.text:00407B9A                 mov     [esp+4], ecx
.text:00407B9E                 mov     [esp], edx
.text:00407BA1                 call    sub_40CD80
.text:00407BA6                 mov     edx, eax
.text:00407BA8                 mov     ecx, [esp+64h]
.text:00407BAC                 shr     eax, 1Fh
.text:00407BAF                 dec     eax
.text:00407BB0                 and     edx, eax
.text:00407BB2                 mov     [ecx+38h], edx
.text:00407BB5                 mov     [esp], ebx
.text:00407BB8                 mov     [esp+4], esi
.text:00407BBC                 mov     dword ptr [esp+8], 989680h
.text:00407BC4                 mov     dword ptr [esp+0Ch], 0
.text:00407BCC                 call    sub_40CEA0
.text:00407BD1                 lea     ecx, [eax+eax*4]
.text:00407BD4                 lea     esi, [ecx+ecx*4]
.text:00407BD7                 mov     eax, [esp+64h]
.text:00407BDB                 shl     esi, 2
.text:00407BDE                 mov     ebx, esi
.text:00407BE0                 shr     ebx, 1Fh
.text:00407BE3                 dec     ebx
.text:00407BE4                 and     ebx, esi
.text:00407BE6                 xor     esi, esi
.text:00407BE8                 mov     [eax+3Ch], ebx
.text:00407BEB                 mov     edx, [esp+38h]
.text:00407BEF                 mov     dword ptr [esp+8], 989680h
.text:00407BF7                 mov     ebx, [esp+34h]
.text:00407BFB                 mov     dword ptr [esp+0Ch], 0
.text:00407C03                 mov     ecx, edx
.text:00407C05                 xor     edx, edx
.text:00407C07                 or      ebx, edx
.text:00407C09                 or      esi, ecx
.text:00407C0B                 mov     edx, ebx
.text:00407C0D                 sub     edx, 0D53E8000h
.text:00407C13                 mov     ecx, esi
.text:00407C15                 sbb     ecx, 19DB1DEh
.text:00407C1B                 mov     [esp+4], ecx
.text:00407C1F                 mov     [esp], edx
.text:00407C22                 call    sub_40CD80
.text:00407C27                 mov     edx, eax
.text:00407C29                 mov     ecx, [esp+64h]
.text:00407C2D                 shr     eax, 1Fh
.text:00407C30                 dec     eax
.text:00407C31                 and     edx, eax
.text:00407C33                 mov     [ecx+48h], edx
.text:00407C36                 mov     [esp], ebx
.text:00407C39                 mov     [esp+4], esi
.text:00407C3D                 mov     dword ptr [esp+8], 989680h
.text:00407C45                 mov     dword ptr [esp+0Ch], 0
.text:00407C4D                 call    sub_40CEA0
.text:00407C52                 lea     edx, [eax+eax*4]
.text:00407C55                 mov     ebx, [esp+64h]
.text:00407C59                 lea     ecx, [edx+edx*4]
.text:00407C5C                 shl     ecx, 2
.text:00407C5F                 mov     esi, ecx
.text:00407C61                 shr     esi, 1Fh
.text:00407C64                 dec     esi
.text:00407C65                 and     esi, ecx
.text:00407C67                 mov     [ebx+4Ch], esi
.text:00407C6A                 mov     edx, [esp+48h]
.text:00407C6E                 xor     esi, esi
.text:00407C70                 mov     dword ptr [esp+8], 989680h
.text:00407C78                 mov     ebx, [esp+44h]
.text:00407C7C                 mov     dword ptr [esp+0Ch], 0
.text:00407C84                 mov     ecx, edx
.text:00407C86                 xor     edx, edx
.text:00407C88                 or      ebx, edx
.text:00407C8A                 or      esi, ecx
.text:00407C8C                 mov     edx, ebx
.text:00407C8E                 sub     edx, 0D53E8000h
.text:00407C94                 mov     ecx, esi
.text:00407C96                 sbb     ecx, 19DB1DEh
.text:00407C9C                 mov     [esp+4], ecx
.text:00407CA0                 mov     [esp], edx
.text:00407CA3                 call    sub_40CD80
.text:00407CA8                 mov     edx, eax
.text:00407CAA                 mov     ecx, [esp+64h]
.text:00407CAE                 shr     eax, 1Fh
.text:00407CB1                 dec     eax
.text:00407CB2                 and     edx, eax
.text:00407CB4                 mov     [ecx+40h], edx
.text:00407CB7                 mov     [esp+4], esi
.text:00407CBB                 mov     dword ptr [esp+8], 989680h
.text:00407CC3                 mov     dword ptr [esp+0Ch], 0
.text:00407CCB                 mov     [esp], ebx
.text:00407CCE                 call    sub_40CEA0
.text:00407CD3                 lea     edx, [eax+eax*4]
.text:00407CD6                 lea     esi, [edx+edx*4]
.text:00407CD9                 mov     eax, [esp+64h]
.text:00407CDD                 shl     esi, 2
.text:00407CE0                 mov     edx, ebp
.text:00407CE2                 mov     ecx, esi
.text:00407CE4                 mov     dword ptr [eax+50h], 200h
.text:00407CEB                 shr     ecx, 1Fh
.text:00407CEE                 dec     ecx
.text:00407CEF                 and     ecx, esi
.text:00407CF1                 test    ebp, ebp
.text:00407CF3                 mov     [eax+44h], ecx
.text:00407CF6                 mov     eax, edi
.text:00407CF8                 js      short loc_407D32
.text:00407CFA
.text:00407CFA loc_407CFA:                             ; CODE XREF: .text:00407D3A↓j
.text:00407CFA                 xor     esi, esi
.text:00407CFC                 mov     ebp, edi
.text:00407CFE                 mov     ecx, eax
.text:00407D00                 shrd    ecx, edx, 9
.text:00407D04                 mov     ebx, edx
.text:00407D06                 and     ebp, 1FFh
.text:00407D0C                 mov     eax, esi
.text:00407D0E                 sar     ebx, 9
.text:00407D11                 or      eax, ebp
.text:00407D13                 jz      short loc_407D1B
.text:00407D15                 add     ecx, 1
.text:00407D18                 adc     ebx, 0
.text:00407D1B
.text:00407D1B loc_407D1B:                             ; CODE XREF: .text:00407D13↑j
.text:00407D1B                 mov     edx, [esp+64h]
.text:00407D1F                 mov     eax, 1
.text:00407D24                 mov     [edx+58h], ecx
.text:00407D27                 mov     [edx+5Ch], ebx
.text:00407D2A                 add     esp, 1Ch
.text:00407D2D                 pop     ebx
.text:00407D2E                 pop     esi
.text:00407D2F                 pop     edi
.text:00407D30                 pop     ebp
.text:00407D31                 retn
.text:00407D32 ; ---------------------------------------------------------------------------
.text:00407D32
.text:00407D32 loc_407D32:                             ; CODE XREF: .text:00407CF8↑j
.text:00407D32                 add     eax, 1FFh
.text:00407D37                 adc     edx, 0
.text:00407D3A                 jmp     short loc_407CFA
.text:00407D3A ; ---------------------------------------------------------------------------
.text:00407D3C                 align 10h
.text:00407D40                 push    ebp
.text:00407D41                 push    edi
.text:00407D42                 xor     edi, edi
.text:00407D44                 push    esi
.text:00407D45                 xor     esi, esi
.text:00407D47                 push    ebx
.text:00407D48                 sub     esp, 0Ch
.text:00407D4B                 mov     dword ptr [esp], offset aKernel32 ; "KERNEL32"
.text:00407D52                 call    LoadLibraryA
.text:00407D57                 sub     esp, 4
.text:00407D5A                 mov     ebp, eax
.text:00407D5C                 mov     dword ptr [esp+4], offset aGetcompressedf ; "GetCompressedFileSizeA"
.text:00407D64                 mov     [esp], eax
.text:00407D67                 call    GetProcAddress
.text:00407D6C                 sub     esp, 8
.text:00407D6F                 test    eax, eax
.text:00407D71                 jz      short loc_407DA2
.text:00407D73                 lea     ecx, [esp+8]
.text:00407D77                 mov     [esp+4], ecx
.text:00407D7B                 mov     ecx, [esp+20h]
.text:00407D7F                 mov     [esp], ecx
.text:00407D82                 call    eax
.text:00407D84                 sub     esp, 8
.text:00407D87                 mov     ebx, eax
.text:00407D89                 cmp     eax, 0FFFFFFFFh
.text:00407D8C                 jz      short loc_407DBD
.text:00407D8E
.text:00407D8E loc_407D8E:                             ; CODE XREF: .text:00407DC6↓j
.text:00407D8E                 mov     esi, [esp+8]
.text:00407D92                 mov     ecx, ebx
.text:00407D94                 xor     edi, edi
.text:00407D96                 xor     ebx, ebx
.text:00407D98                 mov     edx, esi
.text:00407D9A                 mov     esi, ecx
.text:00407D9C                 or      esi, edi
.text:00407D9E                 mov     edi, ebx
.text:00407DA0                 or      edi, edx
.text:00407DA2
.text:00407DA2 loc_407DA2:                             ; CODE XREF: .text:00407D71↑j
.text:00407DA2                                         ; .text:00407DC4↓j
.text:00407DA2                 test    ebp, ebp
.text:00407DA4                 jz      short loc_407DB1
.text:00407DA6                 mov     [esp], ebp
.text:00407DA9                 call    FreeLibrary
.text:00407DAE                 sub     esp, 4
.text:00407DB1
.text:00407DB1 loc_407DB1:                             ; CODE XREF: .text:00407DA4↑j
.text:00407DB1                 add     esp, 0Ch
.text:00407DB4                 mov     eax, esi
.text:00407DB6                 mov     edx, edi
.text:00407DB8                 pop     ebx
.text:00407DB9                 pop     esi
.text:00407DBA                 pop     edi
.text:00407DBB                 pop     ebp
.text:00407DBC                 retn
.text:00407DBD ; ---------------------------------------------------------------------------
.text:00407DBD
.text:00407DBD loc_407DBD:                             ; CODE XREF: .text:00407D8C↑j
.text:00407DBD                 call    GetLastError
.text:00407DC2                 test    eax, eax
.text:00407DC4                 jnz     short loc_407DA2
.text:00407DC6                 jmp     short loc_407D8E
.text:00407DC6 ; ---------------------------------------------------------------------------
.text:00407DC8                 align 10h
.text:00407DD0
.text:00407DD0 ; =============== S U B R O U T I N E =======================================
.text:00407DD0
.text:00407DD0
.text:00407DD0 ; int __cdecl sub_407DD0(LPCSTR lpFileName, int)
.text:00407DD0 sub_407DD0      proc near               ; CODE XREF: sub_405C80+2691↓p
.text:00407DD0
.text:00407DD0 lpRootPathName  = dword ptr -8FCh
.text:00407DD0 lpVolumeNameBuffer= dword ptr -8F8h
.text:00407DD0 nVolumeNameSize = dword ptr -8F4h
.text:00407DD0 lpVolumeSerialNumber= dword ptr -8F0h
.text:00407DD0 lpMaximumComponentLength= dword ptr -8ECh
.text:00407DD0 lpFileSystemFlags= dword ptr -8E8h
.text:00407DD0 lpFileSystemNameBuffer= dword ptr -8E4h
.text:00407DD0 nFileSystemNameSize= dword ptr -8E0h
.text:00407DD0 VolumeSerialNumber= dword ptr -8D8h
.text:00407DD0 MaximumComponentLength= dword ptr -8D4h
.text:00407DD0 FileSystemFlags = dword ptr -8D0h
.text:00407DD0 var_8CC         = dword ptr -8CCh
.text:00407DD0 var_8C8         = dword ptr -8C8h
.text:00407DD0 var_8C4         = dword ptr -8C4h
.text:00407DD0 var_8C0         = dword ptr -8C0h
.text:00407DD0 var_8BC         = dword ptr -8BCh
.text:00407DD0 var_8B8         = dword ptr -8B8h
.text:00407DD0 var_8B4         = dword ptr -8B4h
.text:00407DD0 var_8B0         = dword ptr -8B0h
.text:00407DD0 var_8AC         = dword ptr -8ACh
.text:00407DD0 var_8A8         = dword ptr -8A8h
.text:00407DD0 var_8A4         = dword ptr -8A4h
.text:00407DD0 var_8A0         = dword ptr -8A0h
.text:00407DD0 var_89C         = dword ptr -89Ch
.text:00407DD0 FileSystemNameBuffer= byte ptr -88Ch
.text:00407DD0 VolumeNameBuffer= byte ptr -48Ch
.text:00407DD0 var_8C          = dword ptr -8Ch
.text:00407DD0 var_88          = dword ptr -88h
.text:00407DD0 var_84          = dword ptr -84h
.text:00407DD0 var_80          = dword ptr -80h
.text:00407DD0 var_7C          = dword ptr -7Ch
.text:00407DD0 var_78          = dword ptr -78h
.text:00407DD0 var_74          = dword ptr -74h
.text:00407DD0 var_70          = dword ptr -70h
.text:00407DD0 var_6C          = dword ptr -6Ch
.text:00407DD0 var_5C          = dword ptr -5Ch
.text:00407DD0 var_58          = dword ptr -58h
.text:00407DD0 var_54          = dword ptr -54h
.text:00407DD0 var_50          = dword ptr -50h
.text:00407DD0 var_4C          = dword ptr -4Ch
.text:00407DD0 var_48          = dword ptr -48h
.text:00407DD0 var_44          = dword ptr -44h
.text:00407DD0 var_3C          = dword ptr -3Ch
.text:00407DD0 var_38          = dword ptr -38h
.text:00407DD0 var_34          = dword ptr -34h
.text:00407DD0 lpFileName      = dword ptr  4
.text:00407DD0 arg_4           = dword ptr  8
.text:00407DD0
.text:00407DD0                 push    ebp
.text:00407DD1                 xor     eax, eax
.text:00407DD3                 mov     ecx, 0Dh
.text:00407DD8                 push    edi
.text:00407DD9                 push    esi
.text:00407DDA                 push    ebx
.text:00407DDB                 sub     esp, 8ECh
.text:00407DE1                 lea     edi, [esp+8FCh+var_5C]
.text:00407DE8                 cld
.text:00407DE9                 lea     edx, [esp+8FCh+var_8C]
.text:00407DF0                 rep stosd
.text:00407DF2                 mov     [esp+8FCh+lpVolumeNameBuffer], edx ; int
.text:00407DF6                 lea     esi, [esp+8FCh+var_5C]
.text:00407DFD                 mov     edx, [esp+8FCh+lpFileName]
.text:00407E04                 mov     [esp+8FCh+lpRootPathName], edx ; lpFileName
.text:00407E07                 call    sub_406830
.text:00407E0C                 test    eax, eax
.text:00407E0E                 mov     edx, 0FFFFFFFFh
.text:00407E13                 jz      loc_4081A4
.text:00407E19                 mov     edx, [esp+8FCh+var_88]
.text:00407E20                 mov     ebp, [esp+8FCh+var_84]
.text:00407E27                 mov     edi, [esp+8FCh+var_80]
.text:00407E2E                 mov     [esp+8FCh+var_58], edx
.text:00407E35                 mov     ecx, [esp+8FCh+var_7C]
.text:00407E3C                 mov     ebx, [esp+8FCh+var_8C]
.text:00407E43                 mov     [esp+8FCh+var_54], ebp
.text:00407E4A                 mov     edx, [esp+8FCh+var_78]
.text:00407E51                 mov     ebp, [esp+8FCh+var_74]
.text:00407E58                 mov     [esp+8FCh+var_50], edi
.text:00407E5F                 test    bl, 10h
.text:00407E62                 mov     edi, [esp+8FCh+var_70]
.text:00407E69                 mov     [esp+8FCh+var_4C], ecx
.text:00407E70                 mov     ecx, [esp+8FCh+var_6C]
.text:00407E77                 mov     [esp+8FCh+var_5C], ebx
.text:00407E7E                 mov     [esp+8FCh+var_48], edx
.text:00407E85                 mov     [esp+8FCh+var_44], ebp
.text:00407E8C                 mov     [esp+8FCh+var_3C], edi
.text:00407E93                 mov     [esp+8FCh+var_38], ecx
.text:00407E9A                 jnz     loc_4081C0
.text:00407EA0                 mov     ebx, 1
.text:00407EA5                 mov     [esp+8FCh+var_34], ebx
.text:00407EAC
.text:00407EAC loc_407EAC:                             ; CODE XREF: sub_407DD0+406↓j
.text:00407EAC                 mov     eax, [esp+8FCh+lpFileName]
.text:00407EB3                 lea     edi, [esp+8FCh+FileSystemNameBuffer]
.text:00407EB7                 lea     ebx, [esp+8FCh+FileSystemFlags]
.text:00407EBB                 mov     [esp+8FCh+lpRootPathName], eax ; LPCSTR
.text:00407EBE                 call    sub_4090A0
.text:00407EC3                 mov     [esp+8FCh+lpRootPathName], eax
.text:00407EC6                 call    sub_406120
.text:00407ECB                 mov     [esp+8FCh+lpFileSystemNameBuffer], edi ; lpFileSystemNameBuffer
.text:00407ECF                 lea     ecx, [esp+8FCh+VolumeSerialNumber]
.text:00407ED3                 mov     ebp, eax
.text:00407ED5                 mov     [esp+8FCh+lpVolumeSerialNumber], ecx ; lpVolumeSerialNumber
.text:00407ED9                 lea     edx, [esp+8FCh+MaximumComponentLength]
.text:00407EDD                 lea     edi, [esp+8FCh+VolumeNameBuffer]
.text:00407EE4                 mov     [esp+8FCh+lpFileSystemFlags], ebx ; lpFileSystemFlags
.text:00407EE8                 mov     [esp+8FCh+lpMaximumComponentLength], edx ; lpMaximumComponentLength
.text:00407EEC                 mov     [esp+8FCh+lpVolumeNameBuffer], edi ; lpVolumeNameBuffer
.text:00407EF0                 mov     [esp+8FCh+nFileSystemNameSize], 400h ; nFileSystemNameSize
.text:00407EF8                 mov     [esp+8FCh+nVolumeNameSize], 400h ; nVolumeNameSize
.text:00407F00                 mov     [esp+8FCh+lpRootPathName], eax ; lpRootPathName
.text:00407F03                 call    GetVolumeInformationA
.text:00407F08                 sub     esp, 20h
.text:00407F0B                 test    eax, eax
.text:00407F0D                 lea     edi, [esp+8FCh+var_8CC]
.text:00407F11                 setz    bl
.text:00407F14                 mov     [esp+8FCh+lpRootPathName], ebp ; Block
.text:00407F17                 xor     ebp, ebp
.text:00407F19                 movzx   edx, bl
.text:00407F1C                 dec     edx
.text:00407F1D                 xor     ebx, ebx
.text:00407F1F                 and     [esp+8FCh+VolumeSerialNumber], edx
.text:00407F23                 call    free
.text:00407F28                 cld
.text:00407F29                 mov     ecx, [esp+8FCh+VolumeSerialNumber]
.text:00407F2D                 mov     [esi+1Ch], ecx
.text:00407F30                 mov     ecx, 0Dh
.text:00407F35                 rep movsd
.text:00407F37                 mov     edi, [esp+8FCh+var_8A0]
.text:00407F3B                 mov     edx, [esp+8FCh+var_89C]
.text:00407F3F                 mov     ecx, [esp+8FCh+var_8CC]
.text:00407F43                 or      ebp, edi
.text:00407F45                 mov     esi, [esp+8FCh+var_8B0]
.text:00407F49                 mov     edi, [esp+8FCh+arg_4]
.text:00407F50                 or      edx, ebx
.text:00407F52                 mov     [edi+8], edx
.text:00407F55                 xor     edx, edx
.text:00407F57                 test    cl, 10h
.text:00407F5A                 setz    dl
.text:00407F5D                 mov     [edi+0Ch], ebp
.text:00407F60                 mov     [edi+10h], esi
.text:00407F63                 mov     dword ptr [edi+14h], 0
.text:00407F6A                 dec     edx
.text:00407F6B                 and     edx, 0FFFFC000h
.text:00407F71                 add     edx, 8000h
.text:00407F77                 or      edx, 124h
.text:00407F7D                 test    cl, 1
.text:00407F80                 movzx   eax, dx
.text:00407F83                 jnz     short loc_407F8A
.text:00407F85                 or      eax, 92h
.text:00407F8A
.text:00407F8A loc_407F8A:                             ; CODE XREF: sub_407DD0+1B3↑j
.text:00407F8A                 mov     ebx, [esp+8FCh+var_8A8]
.text:00407F8E                 xor     edx, edx
.text:00407F90                 xor     ebp, ebp
.text:00407F92                 mov     edi, [esp+8FCh+var_8AC]
.text:00407F96                 mov     ecx, [esp+8FCh+arg_4]
.text:00407F9D                 mov     esi, edi
.text:00407F9F                 or      [ecx], eax
.text:00407FA1                 mov     edi, ebx
.text:00407FA3                 or      edi, ebp
.text:00407FA5                 mov     ebp, edx
.text:00407FA7                 mov     ebx, [esp+8FCh+var_8A4]
.text:00407FAB                 or      ebp, esi
.text:00407FAD                 mov     esi, [esp+8FCh+arg_4]
.text:00407FB4                 mov     edx, [esp+8FCh+var_8BC]
.text:00407FB8                 mov     [esi+18h], ebx
.text:00407FBB                 mov     ebx, [esp+8FCh+var_8C0]
.text:00407FBF                 mov     ecx, edx
.text:00407FC1                 mov     [esi+30h], edi
.text:00407FC4                 xor     edx, edx
.text:00407FC6                 mov     [esi+34h], ebp
.text:00407FC9                 or      ebx, edx
.text:00407FCB                 xor     esi, esi
.text:00407FCD                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:00407FD5                 or      esi, ecx
.text:00407FD7                 mov     edx, ebx
.text:00407FD9                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:00407FE1                 sub     edx, 0D53E8000h
.text:00407FE7                 mov     ecx, esi
.text:00407FE9                 sbb     ecx, 19DB1DEh
.text:00407FEF                 mov     [esp+8FCh+lpVolumeNameBuffer], ecx
.text:00407FF3                 mov     [esp+8FCh+lpRootPathName], edx
.text:00407FF6                 call    sub_40CD80
.text:00407FFB                 mov     edx, eax
.text:00407FFD                 mov     ecx, [esp+8FCh+arg_4]
.text:00408004                 shr     eax, 1Fh
.text:00408007                 dec     eax
.text:00408008                 and     edx, eax
.text:0040800A                 mov     [ecx+38h], edx
.text:0040800D                 mov     [esp+8FCh+lpRootPathName], ebx
.text:00408010                 mov     [esp+8FCh+lpVolumeNameBuffer], esi
.text:00408014                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:0040801C                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:00408024                 call    sub_40CEA0
.text:00408029                 lea     ecx, [eax+eax*4]
.text:0040802C                 lea     ebx, [ecx+ecx*4]
.text:0040802F                 mov     eax, [esp+8FCh+arg_4]
.text:00408036                 shl     ebx, 2
.text:00408039                 mov     esi, ebx
.text:0040803B                 shr     esi, 1Fh
.text:0040803E                 dec     esi
.text:0040803F                 and     esi, ebx
.text:00408041                 mov     [eax+3Ch], esi
.text:00408044                 mov     edx, [esp+8FCh+var_8C4]
.text:00408048                 xor     esi, esi
.text:0040804A                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:00408052                 mov     ebx, [esp+8FCh+var_8C8]
.text:00408056                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:0040805E                 mov     ecx, edx
.text:00408060                 xor     edx, edx
.text:00408062                 or      ebx, edx
.text:00408064                 or      esi, ecx
.text:00408066                 mov     edx, ebx
.text:00408068                 sub     edx, 0D53E8000h
.text:0040806E                 mov     ecx, esi
.text:00408070                 sbb     ecx, 19DB1DEh
.text:00408076                 mov     [esp+8FCh+lpVolumeNameBuffer], ecx
.text:0040807A                 mov     [esp+8FCh+lpRootPathName], edx
.text:0040807D                 call    sub_40CD80
.text:00408082                 mov     edx, eax
.text:00408084                 mov     ecx, [esp+8FCh+arg_4]
.text:0040808B                 shr     eax, 1Fh
.text:0040808E                 dec     eax
.text:0040808F                 and     edx, eax
.text:00408091                 mov     [ecx+48h], edx
.text:00408094                 mov     [esp+8FCh+lpRootPathName], ebx
.text:00408097                 mov     [esp+8FCh+lpVolumeNameBuffer], esi
.text:0040809B                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:004080A3                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:004080AB                 call    sub_40CEA0
.text:004080B0                 lea     ecx, [eax+eax*4]
.text:004080B3                 lea     ebx, [ecx+ecx*4]
.text:004080B6                 mov     eax, [esp+8FCh+arg_4]
.text:004080BD                 shl     ebx, 2
.text:004080C0                 mov     esi, ebx
.text:004080C2                 shr     esi, 1Fh
.text:004080C5                 dec     esi
.text:004080C6                 and     esi, ebx
.text:004080C8                 mov     [eax+4Ch], esi
.text:004080CB                 mov     edx, [esp+8FCh+var_8B4]
.text:004080CF                 xor     esi, esi
.text:004080D1                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:004080D9                 mov     ebx, [esp+8FCh+var_8B8]
.text:004080DD                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:004080E5                 mov     ecx, edx
.text:004080E7                 xor     edx, edx
.text:004080E9                 or      ebx, edx
.text:004080EB                 or      esi, ecx
.text:004080ED                 mov     edx, ebx
.text:004080EF                 sub     edx, 0D53E8000h
.text:004080F5                 mov     ecx, esi
.text:004080F7                 sbb     ecx, 19DB1DEh
.text:004080FD                 mov     [esp+8FCh+lpVolumeNameBuffer], ecx
.text:00408101                 mov     [esp+8FCh+lpRootPathName], edx
.text:00408104                 call    sub_40CD80
.text:00408109                 mov     edx, eax
.text:0040810B                 mov     ecx, [esp+8FCh+arg_4]
.text:00408112                 shr     eax, 1Fh
.text:00408115                 dec     eax
.text:00408116                 and     edx, eax
.text:00408118                 mov     [ecx+40h], edx
.text:0040811B                 mov     [esp+8FCh+lpRootPathName], ebx
.text:0040811E                 mov     [esp+8FCh+lpVolumeNameBuffer], esi
.text:00408122                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:0040812A                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:00408132                 call    sub_40CEA0
.text:00408137                 lea     ebx, [eax+eax*4]
.text:0040813A                 mov     esi, [esp+8FCh+arg_4]
.text:00408141                 lea     edx, [ebx+ebx*4]
.text:00408144                 shl     edx, 2
.text:00408147                 mov     eax, edi
.text:00408149                 mov     ecx, edx
.text:0040814B                 mov     dword ptr [esi+50h], 200h
.text:00408152                 shr     ecx, 1Fh
.text:00408155                 dec     ecx
.text:00408156                 and     ecx, edx
.text:00408158                 test    ebp, ebp
.text:0040815A                 mov     edx, ebp
.text:0040815C                 mov     [esi+44h], ecx
.text:0040815F                 js      short loc_4081B1
.text:00408161
.text:00408161 loc_408161:                             ; CODE XREF: sub_407DD0+3E9↓j
.text:00408161                 xor     esi, esi
.text:00408163                 mov     ebp, edi
.text:00408165                 mov     ecx, eax
.text:00408167                 shrd    ecx, edx, 9
.text:0040816B                 mov     ebx, edx
.text:0040816D                 and     ebp, 1FFh
.text:00408173                 mov     eax, esi
.text:00408175                 sar     ebx, 9
.text:00408178                 or      eax, ebp
.text:0040817A                 jz      short loc_408182
.text:0040817C                 add     ecx, 1
.text:0040817F                 adc     ebx, 0
.text:00408182
.text:00408182 loc_408182:                             ; CODE XREF: sub_407DD0+3AA↑j
.text:00408182                 mov     edx, [esp+8FCh+arg_4]
.text:00408189                 mov     [edx+5Ch], ebx
.text:0040818C                 mov     ebx, [esp+8FCh+lpFileName]
.text:00408193                 mov     [edx+58h], ecx
.text:00408196                 mov     [esp+8FCh+lpVolumeNameBuffer], edx ; int
.text:0040819A                 mov     [esp+8FCh+lpRootPathName], ebx ; String1
.text:0040819D                 call    sub_406FF0
.text:004081A2                 xor     edx, edx
.text:004081A4
.text:004081A4 loc_4081A4:                             ; CODE XREF: sub_407DD0+43↑j
.text:004081A4                 add     esp, 8ECh
.text:004081AA                 mov     eax, edx
.text:004081AC                 pop     ebx
.text:004081AD                 pop     esi
.text:004081AE                 pop     edi
.text:004081AF                 pop     ebp
.text:004081B0                 retn
.text:004081B1 ; ---------------------------------------------------------------------------
.text:004081B1
.text:004081B1 loc_4081B1:                             ; CODE XREF: sub_407DD0+38F↑j
.text:004081B1                 add     eax, 1FFh
.text:004081B6                 adc     edx, 0
.text:004081B9                 jmp     short loc_408161
.text:004081B9 ; ---------------------------------------------------------------------------
.text:004081BB                 align 10h
.text:004081C0
.text:004081C0 loc_4081C0:                             ; CODE XREF: sub_407DD0+CA↑j
.text:004081C0                 mov     eax, [esp+8FCh+lpFileName]
.text:004081C7                 mov     [esp+8FCh+lpRootPathName], eax ; Str
.text:004081CA                 call    sub_4069A0
.text:004081CF                 mov     [esp+8FCh+var_34], eax
.text:004081D6                 jmp     loc_407EAC
.text:004081D6 sub_407DD0      endp
.text:004081D6
.text:004081D6 ; ---------------------------------------------------------------------------
.text:004081DB                 align 10h
.text:004081E0 ; START OF FUNCTION CHUNK FOR sub_405C80
.text:004081E0
.text:004081E0 loc_4081E0:                             ; CODE XREF: sub_405C80+26↑j
.text:004081E0                 cld
.text:004081E1                 sub     esp, 2Ch
.text:004081E4                 xor     eax, eax
.text:004081E6                 mov     [esp+2Ch+var_10], ebx
.text:004081EA                 mov     ecx, 18h
.text:004081EF                 mov     ebx, [esp+2Ch+arg_0]
.text:004081F3                 mov     [esp+2Ch+var_C], esi
.text:004081F7                 mov     esi, [esp+2Ch+arg_4]
.text:004081FB                 test    ebx, ebx
.text:004081FD                 mov     [esp+2Ch+var_8], edi
.text:00408201                 mov     edi, esi
.text:00408203                 mov     [esp+2Ch+var_4], ebp
.text:00408207                 rep stosd
.text:00408209                 jz      short loc_408210
.text:0040820B                 cmp     byte ptr [ebx], 0
.text:0040820E                 jnz     short loc_408228
.text:00408210
.text:00408210 loc_408210:                             ; CODE XREF: sub_405C80+2589↑j
.text:00408210                 xor     edx, edx
.text:00408212
.text:00408212 loc_408212:                             ; CODE XREF: sub_405C80+25BF↓j
.text:00408212                                         ; sub_405C80+2668↓j
.text:00408212                 mov     ebx, [esp+2Ch+var_10]
.text:00408216                 mov     eax, edx
.text:00408218                 mov     esi, [esp+2Ch+var_C]
.text:0040821C                 mov     edi, [esp+2Ch+var_8]
.text:00408220                 mov     ebp, [esp+2Ch+var_4]
.text:00408224                 add     esp, 2Ch
.text:00408227                 retn
.text:00408228 ; ---------------------------------------------------------------------------
.text:00408228
.text:00408228 loc_408228:                             ; CODE XREF: sub_405C80+258E↑j
.text:00408228                 mov     [esp+2Ch+dwDesiredAccess], 0 ; int
.text:00408230                 mov     [esp+2Ch+lpFileName], ebx ; lpFileName
.text:00408233                 call    sub_408FC0
.text:00408238                 test    eax, eax
.text:0040823A                 mov     edx, 0FFFFFFFFh
.text:0040823F                 jnz     short loc_408212
.text:00408241                 mov     [esp+2Ch+lpFileName], ebx ; LPCSTR
.text:00408244                 call    sub_408E70
.text:00408249                 mov     [esp+2Ch+lpFileName], eax
.text:0040824C                 call    sub_406120
.text:00408251                 mov     [esp+2Ch+lpFileName], eax ; lpFileName
.text:00408254                 mov     ebp, eax
.text:00408256                 mov     [esp+2Ch+hTemplateFile], 0 ; hTemplateFile
.text:0040825E                 mov     [esp+2Ch+dwFlagsAndAttributes], 2000001h ; dwFlagsAndAttributes
.text:00408266                 mov     [esp+2Ch+dwCreationDisposition], 3 ; dwCreationDisposition
.text:0040826E                 mov     [esp+2Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:00408276                 mov     [esp+2Ch+dwShareMode], 0 ; dwShareMode
.text:0040827E                 mov     [esp+2Ch+dwDesiredAccess], 0 ; dwDesiredAccess
.text:00408286                 call    CreateFileA
.text:0040828B                 sub     esp, 1Ch
.text:0040828E                 mov     ebx, eax
.text:00408290                 mov     [esp+2Ch+dwDesiredAccess], esi ; int
.text:00408294                 mov     [esp+2Ch+lpFileName], eax ; hNamedPipe
.text:00408297                 call    sub_406B20
.text:0040829C                 mov     [esp+2Ch+lpFileName], ebx ; hObject
.text:0040829F                 mov     edi, eax
.text:004082A1                 call    CloseHandle
.text:004082A6                 sub     esp, 4
.text:004082A9                 cmp     edi, 0FFFFFFFFh
.text:004082AC                 jz      short loc_40830A
.text:004082AE                 mov     [esp+2Ch+dwDesiredAccess], esi ; int
.text:004082B2                 mov     [esp+2Ch+lpFileName], ebp ; String1
.text:004082B5                 call    sub_406FF0
.text:004082BA
.text:004082BA loc_4082BA:                             ; CODE XREF: sub_405C80+2698↓j
.text:004082BA                 mov     edx, [esi]
.text:004082BC                 and     edx, 0F000h
.text:004082C2                 cmp     edx, 4000h
.text:004082C8                 jz      short loc_4082FD
.text:004082CA
.text:004082CA loc_4082CA:                             ; CODE XREF: sub_405C80+2688↓j
.text:004082CA                 cmp     edi, 0FFFFFFFFh
.text:004082CD                 jz      short loc_4082ED
.text:004082CF
.text:004082CF loc_4082CF:                             ; CODE XREF: sub_405C80+267B↓j
.text:004082CF                 mov     [esp+2Ch+lpFileName], 0 ; uMode
.text:004082D6                 call    SetErrorMode
.text:004082DB                 sub     esp, 4
.text:004082DE                 mov     [esp+2Ch+lpFileName], ebp ; Block
.text:004082E1                 call    free
.text:004082E6                 mov     edx, edi
.text:004082E8                 jmp     loc_408212
.text:004082ED ; ---------------------------------------------------------------------------
.text:004082ED
.text:004082ED loc_4082ED:                             ; CODE XREF: sub_405C80+264D↑j
.text:004082ED                 call    sub_4067D0
.text:004082F2                 mov     esi, eax
.text:004082F4                 call    _errno
.text:004082F9                 mov     [eax], esi
.text:004082FB                 jmp     short loc_4082CF
.text:004082FD ; ---------------------------------------------------------------------------
.text:004082FD
.text:004082FD loc_4082FD:                             ; CODE XREF: sub_405C80+2648↑j
.text:004082FD                 mov     [esp+2Ch+lpFileName], ebp ; Str
.text:00408300                 call    sub_4069A0
.text:00408305                 mov     [esi+18h], eax
.text:00408308                 jmp     short loc_4082CA
.text:0040830A ; ---------------------------------------------------------------------------
.text:0040830A
.text:0040830A loc_40830A:                             ; CODE XREF: sub_405C80+262C↑j
.text:0040830A                 mov     [esp+2Ch+dwDesiredAccess], esi ; int
.text:0040830E                 mov     [esp+2Ch+lpFileName], ebp ; lpFileName
.text:00408311                 call    sub_407DD0
.text:00408316                 mov     edi, eax
.text:00408318                 jmp     short loc_4082BA
.text:00408318 ; END OF FUNCTION CHUNK FOR sub_405C80
.text:00408318 ; ---------------------------------------------------------------------------
.text:0040831A                 align 10h
.text:00408320 aLuLuLu         db '%lu.%lu.%lu',0      ; DATA XREF: .text:0040853F↓o
.text:0040832C aLu             db '%lu',0              ; DATA XREF: .text:0040854F↓o
.text:00408330 asc_408330      db ' ',0                ; DATA XREF: .text:loc_408638↓o
.text:00408332                 align 10h
.text:00408340 aServer40Enterp db 'Server 4.0, Enterprise Edition ',0
.text:00408340                                         ; DATA XREF: .text:0040866F↓o
.text:00408360 aServer40       db 'Server 4.0 ',0      ; DATA XREF: .text:loc_40867D↓o
.text:0040836C aServer         db ' Server',0          ; DATA XREF: .text:004086A6↓o
.text:0040836C                                         ; .text:loc_40881E↓o
.text:00408374 aAdvancedServer db ' Advanced Server',0 ; DATA XREF: .text:loc_4086B8↓o
.text:00408385 aDatacenterServ db ' Datacenter Server',0
.text:00408385                                         ; DATA XREF: .text:loc_4086C2↓o
.text:00408398 aStandardEditio db ' Standard Edition',0
.text:00408398                                         ; DATA XREF: .text:004086EA↓o
.text:004083AA aWebEdition     db ' Web Edition',0     ; DATA XREF: .text:loc_4086F4↓o
.text:004083B7 aEnterpriseEdit db ' Enterprise Edition',0
.text:004083B7                                         ; DATA XREF: .text:loc_4086FE↓o
.text:004083CB aDatacenterEdit db ' Datacenter Edition',0
.text:004083CB                                         ; DATA XREF: .text:loc_408708↓o
.text:004083DF aHomeEdition    db ' Home Edition',0    ; DATA XREF: .text:0040871B↓o
.text:004083ED aProfessional   db ' Professional',0    ; DATA XREF: .text:loc_408725↓o
.text:004083ED                                         ; .text:loc_408830↓o
.text:004083FB                 align 10h
.text:00408400 aSystemCurrentc db 'SYSTEM\CurrentControlSet\Control\ProductOptions',0
.text:00408400                                         ; DATA XREF: .text:00408752↓o
.text:00408430 aProducttype    db 'ProductType',0      ; DATA XREF: .text:00408799↓o
.text:0040843C aWinnt          db 'WINNT',0            ; DATA XREF: .text:004087D4↓o
.text:00408442 aLanmannt       db 'LANMANNT',0         ; DATA XREF: .text:004087EB↓o
.text:0040844B aServernt       db 'SERVERNT',0         ; DATA XREF: .text:00408802↓o
.text:00408454                 align 10h
.text:00408460 aMicrosoftWindo db 'Microsoft Windows 3.1 with Win32s ',0
.text:00408460                                         ; DATA XREF: .text:00408977↓o
.text:00408483                 align 20h
.text:004084A0 aMicrosoftWindo_0 db 'Microsoft Windows Millennium Edition ',0
.text:004084A0                                         ; DATA XREF: .text:004089D6↓o
.text:004084C6 ; ---------------------------------------------------------------------------
.text:004084C6
.text:004084C6 loc_4084C6:                             ; DATA XREF: .text:loc_408A41↓o
.text:004084C6                 and     [ebx+45h], dl
.text:004084C9                 add     [eax], ah
.text:004084CB                 push    ebx
.text:004084CC                 push    eax
.text:004084CD                 xor     [eax], eax
.text:004084CF
.text:004084CF loc_4084CF:                             ; DATA XREF: .text:loc_408ABB↓o
.text:004084CF                 and     [edi+53h], cl
.text:004084D2                 push    edx
.text:004084D3                 xor     al, [eax]
.text:004084D5                 lea     esi, [esi+0]
.text:004084D9                 lea     edi, [edi+0]
.text:004084E0                 push    edi
.text:004084E1                 push    esi
.text:004084E2                 push    ebx
.text:004084E3                 sub     esp, 130h
.text:004084E9                 mov     ebx, [esp+140h]
.text:004084F0                 call    sub_408BF0
.text:004084F5                 mov     eax, ds:VersionInformation.dwPlatformId
.text:004084FA                 cmp     eax, 1
.text:004084FD                 jz      loc_4089A0
.text:00408503                 cmp     eax, 1
.text:00408506                 jb      loc_408976
.text:0040850C                 cmp     eax, 2
.text:0040850F                 jz      loc_4085C0
.text:00408515                 cmp     eax, 3
.text:00408518                 jz      short loc_40857F
.text:0040851A                 lea     esi, [esi+0]
.text:00408520
.text:00408520 loc_408520:                             ; CODE XREF: .text:004085B5↓j
.text:00408520                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:00408526                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0040852C
.text:0040852C loc_40852C:                             ; CODE XREF: .text:004089BF↓j
.text:0040852C                 mov     [esp+10h], edx
.text:00408530                 mov     ebx, [esp+144h]
.text:00408537                 mov     [esp+0Ch], ecx
.text:0040853B                 mov     [esp+8], eax
.text:0040853F                 mov     dword ptr [esp+4], offset aLuLuLu ; "%lu.%lu.%lu"
.text:00408547                 mov     [esp], ebx
.text:0040854A                 call    sprintf
.text:0040854F                 mov     dword ptr [esp+4], offset aLu ; "%lu"
.text:00408557                 mov     edi, ds:VersionInformation.dwBuildNumber
.text:0040855D                 mov     ecx, [esp+148h]
.text:00408564                 mov     [esp+8], edi
.text:00408568                 mov     [esp], ecx
.text:0040856B                 call    sprintf
.text:00408570                 mov     eax, 1
.text:00408575
.text:00408575 loc_408575:                             ; CODE XREF: .text:0040876F↓j
.text:00408575                                         ; .text:004087BC↓j
.text:00408575                 add     esp, 130h
.text:0040857B                 pop     ebx
.text:0040857C                 pop     esi
.text:0040857D                 pop     edi
.text:0040857E                 retn
.text:0040857F ; ---------------------------------------------------------------------------
.text:0040857F
.text:0040857F loc_40857F:                             ; CODE XREF: .text:00408518↑j
.text:0040857F                 mov     dword ptr [ebx], 7263694Dh
.text:00408585                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040858C                 mov     dword ptr [ebx+8], 69572074h
.text:00408593                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040859A                 mov     dword ptr [ebx+10h], 45432073h
.text:004085A1                 mov     word ptr [ebx+14h], 20h ; ' '
.text:004085A7                 mov     esi, esi
.text:004085A9                 lea     edi, [edi+0]
.text:004085B0
.text:004085B0 loc_4085B0:                             ; CODE XREF: .text:00408658↓j
.text:004085B0                                         ; .text:00408999↓j ...
.text:004085B0                 mov     eax, ds:VersionInformation.dwPlatformId
.text:004085B5                 jmp     loc_408520
.text:004085B5 ; ---------------------------------------------------------------------------
.text:004085BA                 align 10h
.text:004085C0
.text:004085C0 loc_4085C0:                             ; CODE XREF: .text:0040850F↑j
.text:004085C0                 mov     edx, ds:VersionInformation.dwMajorVersion
.text:004085C6                 cmp     edx, 3
.text:004085C9                 mov     eax, edx
.text:004085CB                 jz      loc_408935
.text:004085D1
.text:004085D1 loc_4085D1:                             ; CODE XREF: .text:0040893C↓j
.text:004085D1                 cmp     eax, 4
.text:004085D4                 jz      loc_4088F5
.text:004085DA
.text:004085DA loc_4085DA:                             ; CODE XREF: .text:004088FD↓j
.text:004085DA                 cmp     eax, 4
.text:004085DD                 ja      loc_408842
.text:004085E3                 mov     ecx, ds:VersionInformation.dwMinorVersion
.text:004085E9                 test    ecx, ecx
.text:004085EB                 jnz     loc_408842
.text:004085F1                 mov     dword ptr [ebx], 7263694Dh
.text:004085F7                 mov     dword ptr [ebx+4], 666F736Fh
.text:004085FE                 mov     dword ptr [ebx+8], 69572074h
.text:00408605                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040860C                 mov     dword ptr [ebx+10h], 544E2073h
.text:00408613
.text:00408613 loc_408613:                             ; CODE XREF: .text:004088B5↓j
.text:00408613                 mov     byte ptr [ebx+14h], 0
.text:00408617
.text:00408617 loc_408617:                             ; CODE XREF: .text:00408845↓j
.text:00408617                                         ; .text:0040885C↓j ...
.text:00408617                 mov     esi, dword_40E060
.text:0040861D                 test    esi, esi
.text:0040861F                 jz      loc_408732
.text:00408625                 movzx   eax, ds:byte_40F25A
.text:0040862C                 cmp     al, 1
.text:0040862E                 jz      loc_408712
.text:00408634                 cmp     al, 3
.text:00408636                 jz      short loc_40865D
.text:00408638
.text:00408638 loc_408638:                             ; CODE XREF: .text:0040867B↓j
.text:00408638                                         ; .text:004086B6↓j ...
.text:00408638                 mov     dword ptr [esp+4], offset asc_408330 ; " "
.text:00408640                 mov     [esp], ebx
.text:00408643                 call    strcat
.text:00408648                 mov     dword ptr [esp+4], offset VersionInformation.szCSDVersion
.text:00408650                 mov     [esp], ebx
.text:00408653                 call    strcat
.text:00408658                 jmp     loc_4085B0
.text:0040865D ; ---------------------------------------------------------------------------
.text:0040865D
.text:0040865D loc_40865D:                             ; CODE XREF: .text:00408636↑j
.text:0040865D                 cmp     ds:VersionInformation.dwMajorVersion, 5
.text:00408664                 jz      short loc_408686
.text:00408666
.text:00408666 loc_408666:                             ; CODE XREF: .text:00408692↓j
.text:00408666                 test    byte ptr ds:word_40F258, 2
.text:0040866D                 jz      short loc_40867D
.text:0040866F                 mov     dword ptr [esp], offset aServer40Enterp ; "Server 4.0, Enterprise Edition "
.text:00408676
.text:00408676 loc_408676:                             ; CODE XREF: .text:00408684↓j
.text:00408676                 call    printf
.text:0040867B                 jmp     short loc_408638
.text:0040867D ; ---------------------------------------------------------------------------
.text:0040867D
.text:0040867D loc_40867D:                             ; CODE XREF: .text:0040866D↑j
.text:0040867D                 mov     dword ptr [esp], offset aServer40 ; "Server 4.0 "
.text:00408684                 jmp     short loc_408676
.text:00408686 ; ---------------------------------------------------------------------------
.text:00408686
.text:00408686 loc_408686:                             ; CODE XREF: .text:00408664↑j
.text:00408686                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0040868B                 cmp     eax, 2
.text:0040868E                 jz      short loc_4086D0
.text:00408690                 test    eax, eax
.text:00408692                 jnz     short loc_408666
.text:00408694                 cmp     byte ptr ds:word_40F258, 0
.text:0040869B                 js      short loc_4086C2
.text:0040869D                 test    byte ptr ds:word_40F258, 2
.text:004086A4                 jnz     short loc_4086B8
.text:004086A6                 mov     dword ptr [esp+4], offset aServer ; " Server"
.text:004086AE
.text:004086AE loc_4086AE:                             ; CODE XREF: .text:004086C0↓j
.text:004086AE                                         ; .text:004086CA↓j ...
.text:004086AE                 mov     [esp], ebx
.text:004086B1                 call    strcat
.text:004086B6                 jmp     short loc_408638
.text:004086B8 ; ---------------------------------------------------------------------------
.text:004086B8
.text:004086B8 loc_4086B8:                             ; CODE XREF: .text:004086A4↑j
.text:004086B8                                         ; .text:00408819↓j
.text:004086B8                 mov     dword ptr [esp+4], offset aAdvancedServer ; " Advanced Server"
.text:004086C0                 jmp     short loc_4086AE
.text:004086C2 ; ---------------------------------------------------------------------------
.text:004086C2
.text:004086C2 loc_4086C2:                             ; CODE XREF: .text:0040869B↑j
.text:004086C2                 mov     dword ptr [esp+4], offset aDatacenterServ ; " Datacenter Server"
.text:004086CA                 jmp     short loc_4086AE
.text:004086CA ; ---------------------------------------------------------------------------
.text:004086CC                 align 10h
.text:004086D0
.text:004086D0 loc_4086D0:                             ; CODE XREF: .text:0040868E↑j
.text:004086D0                 cmp     byte ptr ds:word_40F258, 0
.text:004086D7                 js      short loc_408708
.text:004086D9                 movzx   eax, ds:word_40F258
.text:004086E0                 test    al, 2
.text:004086E2                 jnz     short loc_4086FE
.text:004086E4                 cmp     ax, 400h
.text:004086E8                 jz      short loc_4086F4
.text:004086EA                 mov     dword ptr [esp+4], offset aStandardEditio ; " Standard Edition"
.text:004086F2                 jmp     short loc_4086AE
.text:004086F4 ; ---------------------------------------------------------------------------
.text:004086F4
.text:004086F4 loc_4086F4:                             ; CODE XREF: .text:004086E8↑j
.text:004086F4                 mov     dword ptr [esp+4], offset aWebEdition ; " Web Edition"
.text:004086FC                 jmp     short loc_4086AE
.text:004086FE ; ---------------------------------------------------------------------------
.text:004086FE
.text:004086FE loc_4086FE:                             ; CODE XREF: .text:004086E2↑j
.text:004086FE                 mov     dword ptr [esp+4], offset aEnterpriseEdit ; " Enterprise Edition"
.text:00408706                 jmp     short loc_4086AE
.text:00408708 ; ---------------------------------------------------------------------------
.text:00408708
.text:00408708 loc_408708:                             ; CODE XREF: .text:004086D7↑j
.text:00408708                 mov     dword ptr [esp+4], offset aDatacenterEdit ; " Datacenter Edition"
.text:00408710                 jmp     short loc_4086AE
.text:00408712 ; ---------------------------------------------------------------------------
.text:00408712
.text:00408712 loc_408712:                             ; CODE XREF: .text:0040862E↑j
.text:00408712                 test    byte ptr ds:word_40F258+1, 2
.text:00408719                 jz      short loc_408725
.text:0040871B                 mov     dword ptr [esp+4], offset aHomeEdition ; " Home Edition"
.text:00408723                 jmp     short loc_4086AE
.text:00408725 ; ---------------------------------------------------------------------------
.text:00408725
.text:00408725 loc_408725:                             ; CODE XREF: .text:00408719↑j
.text:00408725                 mov     dword ptr [esp+4], offset aProfessional ; " Professional"
.text:0040872D                 jmp     loc_4086AE
.text:00408732 ; ---------------------------------------------------------------------------
.text:00408732
.text:00408732 loc_408732:                             ; CODE XREF: .text:0040861F↑j
.text:00408732                 mov     dword ptr [esp+28h], 0FFh
.text:0040873A                 lea     edx, [esp+2Ch]
.text:0040873E                 mov     [esp+10h], edx
.text:00408742                 mov     dword ptr [esp+0Ch], 1
.text:0040874A                 mov     dword ptr [esp+8], 0
.text:00408752                 mov     dword ptr [esp+4], offset aSystemCurrentc ; "SYSTEM\\CurrentControlSet\\Control\\Pro"...
.text:0040875A                 mov     dword ptr [esp], 80000002h
.text:00408761                 call    RegOpenKeyExA
.text:00408766                 mov     edi, eax
.text:00408768                 sub     esp, 14h
.text:0040876B                 xor     eax, eax
.text:0040876D                 test    edi, edi
.text:0040876F                 jnz     loc_408575
.text:00408775                 mov     dword ptr [esp+0Ch], 0
.text:0040877D                 mov     edi, [esp+2Ch]
.text:00408781                 lea     esi, [esp+28h]
.text:00408785                 mov     [esp+14h], esi
.text:00408789                 lea     esi, [esp+30h]
.text:0040878D                 mov     [esp+10h], esi
.text:00408791                 mov     dword ptr [esp+8], 0
.text:00408799                 mov     dword ptr [esp+4], offset aProducttype ; "ProductType"
.text:004087A1                 mov     [esp], edi
.text:004087A4                 call    RegQueryValueExA
.text:004087A9                 sub     esp, 18h
.text:004087AC                 test    eax, eax
.text:004087AE                 jnz     short loc_4087BA
.text:004087B0                 cmp     dword ptr [esp+28h], 0FFh
.text:004087B8                 jbe     short loc_4087C1
.text:004087BA
.text:004087BA loc_4087BA:                             ; CODE XREF: .text:004087AE↑j
.text:004087BA                 xor     eax, eax
.text:004087BC                 jmp     loc_408575
.text:004087C1 ; ---------------------------------------------------------------------------
.text:004087C1
.text:004087C1 loc_4087C1:                             ; CODE XREF: .text:004087B8↑j
.text:004087C1                 mov     edx, [esp+2Ch]
.text:004087C5                 mov     [esp], edx
.text:004087C8                 call    RegCloseKey
.text:004087CD                 sub     esp, 4
.text:004087D0                 mov     [esp+4], esi
.text:004087D4                 mov     dword ptr [esp], offset aWinnt ; "WINNT"
.text:004087DB                 call    lstrcmpiA
.text:004087E0                 sub     esp, 8
.text:004087E3                 test    eax, eax
.text:004087E5                 jz      short loc_408830
.text:004087E7
.text:004087E7 loc_4087E7:                             ; CODE XREF: .text:00408840↓j
.text:004087E7                 mov     [esp+4], esi
.text:004087EB                 mov     dword ptr [esp], offset aLanmannt ; "LANMANNT"
.text:004087F2                 call    lstrcmpiA
.text:004087F7                 sub     esp, 8
.text:004087FA                 test    eax, eax
.text:004087FC                 jz      short loc_40881E
.text:004087FE
.text:004087FE loc_4087FE:                             ; CODE XREF: .text:0040882E↓j
.text:004087FE                 mov     [esp+4], esi
.text:00408802                 mov     dword ptr [esp], offset aServernt ; "SERVERNT"
.text:00408809                 call    lstrcmpiA
.text:0040880E                 sub     esp, 8
.text:00408811                 test    eax, eax
.text:00408813                 jnz     loc_408638
.text:00408819                 jmp     loc_4086B8
.text:0040881E ; ---------------------------------------------------------------------------
.text:0040881E
.text:0040881E loc_40881E:                             ; CODE XREF: .text:004087FC↑j
.text:0040881E                 mov     dword ptr [esp+4], offset aServer ; " Server"
.text:00408826                 mov     [esp], ebx
.text:00408829                 call    strcat
.text:0040882E                 jmp     short loc_4087FE
.text:00408830 ; ---------------------------------------------------------------------------
.text:00408830
.text:00408830 loc_408830:                             ; CODE XREF: .text:004087E5↑j
.text:00408830                 mov     dword ptr [esp+4], offset aProfessional ; " Professional"
.text:00408838                 mov     [esp], ebx
.text:0040883B                 call    strcat
.text:00408840                 jmp     short loc_4087E7
.text:00408842 ; ---------------------------------------------------------------------------
.text:00408842
.text:00408842 loc_408842:                             ; CODE XREF: .text:004085DD↑j
.text:00408842                                         ; .text:004085EB↑j
.text:00408842                 cmp     eax, 5
.text:00408845                 jnz     loc_408617
.text:0040884B                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:00408850                 cmp     eax, 2
.text:00408853                 jz      short loc_4088BA
.text:00408855                 cmp     eax, 1
.text:00408858                 jz      short loc_408893
.text:0040885A                 test    eax, eax
.text:0040885C                 jnz     loc_408617
.text:00408862                 mov     dword ptr [ebx], 7263694Dh
.text:00408868                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040886F                 mov     dword ptr [ebx+8], 69572074h
.text:00408876                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040887D                 mov     dword ptr [ebx+10h], 30322073h
.text:00408884                 mov     word ptr [ebx+14h], 3030h
.text:0040888A                 mov     byte ptr [ebx+16h], 0
.text:0040888E                 jmp     loc_408617
.text:00408893 ; ---------------------------------------------------------------------------
.text:00408893
.text:00408893 loc_408893:                             ; CODE XREF: .text:00408858↑j
.text:00408893                 mov     dword ptr [ebx], 7263694Dh
.text:00408899                 mov     dword ptr [ebx+4], 666F736Fh
.text:004088A0                 mov     dword ptr [ebx+8], 69572074h
.text:004088A7                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:004088AE                 mov     dword ptr [ebx+10h], 50582073h
.text:004088B5                 jmp     loc_408613
.text:004088BA ; ---------------------------------------------------------------------------
.text:004088BA
.text:004088BA loc_4088BA:                             ; CODE XREF: .text:00408853↑j
.text:004088BA                 mov     dword ptr [ebx], 7263694Dh
.text:004088C0                 mov     dword ptr [ebx+4], 666F736Fh
.text:004088C7                 mov     dword ptr [ebx+8], 69572074h
.text:004088CE                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:004088D5                 mov     dword ptr [ebx+10h], 65532073h
.text:004088DC                 mov     dword ptr [ebx+14h], 72657672h
.text:004088E3                 mov     dword ptr [ebx+18h], 30303220h
.text:004088EA                 mov     word ptr [ebx+1Ch], 33h ; '3'
.text:004088F0                 jmp     loc_408617
.text:004088F5 ; ---------------------------------------------------------------------------
.text:004088F5
.text:004088F5 loc_4088F5:                             ; CODE XREF: .text:004085D4↑j
.text:004088F5                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:004088FB                 test    edx, edx
.text:004088FD                 jnz     loc_4085DA
.text:00408903                 mov     dword ptr [ebx], 7263694Dh
.text:00408909                 mov     dword ptr [ebx+4], 666F736Fh
.text:00408910                 mov     dword ptr [ebx+8], 69572074h
.text:00408917                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040891E                 mov     dword ptr [ebx+10h], 544E2073h
.text:00408925                 mov     dword ptr [ebx+14h], 302E3420h
.text:0040892C                 mov     byte ptr [ebx+18h], 0
.text:00408930                 jmp     loc_408617
.text:00408935 ; ---------------------------------------------------------------------------
.text:00408935
.text:00408935 loc_408935:                             ; CODE XREF: .text:004085CB↑j
.text:00408935                 cmp     ds:VersionInformation.dwMinorVersion, 33h ; '3'
.text:0040893C                 jnz     loc_4085D1
.text:00408942                 mov     dword ptr [ebx], 7263694Dh
.text:00408948                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040894F                 mov     dword ptr [ebx+8], 69572074h
.text:00408956                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040895D                 mov     dword ptr [ebx+10h], 544E2073h
.text:00408964                 mov     dword ptr [ebx+14h], 352E3320h
.text:0040896B                 mov     word ptr [ebx+18h], 31h ; '1'
.text:00408971                 jmp     loc_408617
.text:00408976 ; ---------------------------------------------------------------------------
.text:00408976
.text:00408976 loc_408976:                             ; CODE XREF: .text:00408506↑j
.text:00408976                 cld
.text:00408977                 mov     esi, offset aMicrosoftWindo ; "Microsoft Windows 3.1 with Win32s "
.text:0040897C                 mov     ecx, 8
.text:00408981                 movzx   edx, byte ptr ds:aMicrosoftWindo+22h ; ""
.text:00408988                 mov     edi, ebx
.text:0040898A                 rep movsd
.text:0040898C                 movzx   esi, word ptr ds:aMicrosoftWindo+20h ; "s "
.text:00408993                 mov     [edi+2], dl
.text:00408996                 mov     [edi], si
.text:00408999                 jmp     loc_4085B0
.text:00408999 ; ---------------------------------------------------------------------------
.text:0040899E                 align 10h
.text:004089A0
.text:004089A0 loc_4089A0:                             ; CODE XREF: .text:004084FD↑j
.text:004089A0                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:004089A6                 cmp     ecx, 4
.text:004089A9                 jz      loc_408A60
.text:004089AF
.text:004089AF loc_4089AF:                             ; CODE XREF: .text:00408AB6↓j
.text:004089AF                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:004089B5
.text:004089B5 loc_4089B5:                             ; CODE XREF: .text:00408A68↓j
.text:004089B5                 cmp     ecx, 4
.text:004089B8                 jz      short loc_4089C4
.text:004089BA
.text:004089BA loc_4089BA:                             ; CODE XREF: .text:004089CC↓j
.text:004089BA                                         ; .text:004089D1↓j
.text:004089BA                 mov     eax, ds:VersionInformation.dwPlatformId
.text:004089BF                 jmp     loc_40852C
.text:004089C4 ; ---------------------------------------------------------------------------
.text:004089C4
.text:004089C4 loc_4089C4:                             ; CODE XREF: .text:004089B8↑j
.text:004089C4                 cmp     edx, 0Ah
.text:004089C7                 jz      short loc_4089F1
.text:004089C9
.text:004089C9 loc_4089C9:                             ; CODE XREF: .text:00408A3F↓j
.text:004089C9                 cmp     ecx, 4
.text:004089CC                 jnz     short loc_4089BA
.text:004089CE                 cmp     edx, 5Ah ; 'Z'
.text:004089D1                 jnz     short loc_4089BA
.text:004089D3                 cld
.text:004089D4                 mov     edi, ebx
.text:004089D6                 mov     esi, offset aMicrosoftWindo_0 ; "Microsoft Windows Millennium Edition "
.text:004089DB                 movzx   ebx, word ptr ds:aMicrosoftWindo_0+24h ; " "
.text:004089E2                 mov     ecx, 9
.text:004089E7                 rep movsd
.text:004089E9                 mov     [edi], bx
.text:004089EC                 jmp     loc_4085B0
.text:004089F1 ; ---------------------------------------------------------------------------
.text:004089F1
.text:004089F1 loc_4089F1:                             ; CODE XREF: .text:004089C7↑j
.text:004089F1                 mov     dword ptr [ebx], 7263694Dh
.text:004089F7                 mov     dword ptr [ebx+4], 666F736Fh
.text:004089FE                 mov     dword ptr [ebx+8], 69572074h
.text:00408A05                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:00408A0C                 mov     dword ptr [ebx+10h], 38392073h
.text:00408A13                 mov     byte ptr [ebx+14h], 0
.text:00408A17                 mov     edx, ds:VersionInformation.dwBuildNumber
.text:00408A1D                 lea     edi, [edx-7CFh]
.text:00408A23                 cmp     edi, 0B7h ; '·'
.text:00408A29                 jbe     short loc_408A53
.text:00408A2B                 cmp     edx, 886h
.text:00408A31                 ja      short loc_408A41
.text:00408A33
.text:00408A33 loc_408A33:                             ; CODE XREF: .text:00408A51↓j
.text:00408A33                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:00408A39                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:00408A3F                 jmp     short loc_4089C9
.text:00408A41 ; ---------------------------------------------------------------------------
.text:00408A41
.text:00408A41 loc_408A41:                             ; CODE XREF: .text:00408A31↑j
.text:00408A41                 mov     dword ptr [esp+4], offset loc_4084C6
.text:00408A49
.text:00408A49 loc_408A49:                             ; CODE XREF: .text:00408A5B↓j
.text:00408A49                 mov     [esp], ebx
.text:00408A4C                 call    strcat
.text:00408A51                 jmp     short loc_408A33
.text:00408A53 ; ---------------------------------------------------------------------------
.text:00408A53
.text:00408A53 loc_408A53:                             ; CODE XREF: .text:00408A29↑j
.text:00408A53                 mov     dword ptr [esp+4], 4084CAh
.text:00408A5B                 jmp     short loc_408A49
.text:00408A5B ; ---------------------------------------------------------------------------
.text:00408A5D                 align 10h
.text:00408A60
.text:00408A60 loc_408A60:                             ; CODE XREF: .text:004089A9↑j
.text:00408A60                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:00408A66                 test    edx, edx
.text:00408A68                 jnz     loc_4089B5
.text:00408A6E                 mov     dword ptr [ebx], 7263694Dh
.text:00408A74                 mov     dword ptr [ebx+4], 666F736Fh
.text:00408A7B                 mov     dword ptr [ebx+8], 69572074h
.text:00408A82                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:00408A89                 mov     dword ptr [ebx+10h], 35392073h
.text:00408A90                 mov     byte ptr [ebx+14h], 0
.text:00408A94                 mov     edx, ds:VersionInformation.dwBuildNumber
.text:00408A9A                 lea     ecx, [edx-3B7h]
.text:00408AA0                 cmp     ecx, 81h
.text:00408AA6                 jbe     short loc_408ACD
.text:00408AA8                 cmp     edx, 438h
.text:00408AAE                 ja      short loc_408ABB
.text:00408AB0
.text:00408AB0 loc_408AB0:                             ; CODE XREF: .text:00408ACB↓j
.text:00408AB0                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:00408AB6                 jmp     loc_4089AF
.text:00408ABB ; ---------------------------------------------------------------------------
.text:00408ABB
.text:00408ABB loc_408ABB:                             ; CODE XREF: .text:00408AAE↑j
.text:00408ABB                 mov     dword ptr [esp+4], offset loc_4084CF
.text:00408AC3
.text:00408AC3 loc_408AC3:                             ; CODE XREF: .text:00408AD5↓j
.text:00408AC3                 mov     [esp], ebx
.text:00408AC6                 call    strcat
.text:00408ACB                 jmp     short loc_408AB0
.text:00408ACD ; ---------------------------------------------------------------------------
.text:00408ACD
.text:00408ACD loc_408ACD:                             ; CODE XREF: .text:00408AA6↑j
.text:00408ACD                 mov     dword ptr [esp+4], 4084CAh
.text:00408AD5                 jmp     short loc_408AC3
.text:00408AD5 ; ---------------------------------------------------------------------------
.text:00408AD7                 align 10h
.text:00408AE0
.text:00408AE0 ; =============== S U B R O U T I N E =======================================
.text:00408AE0
.text:00408AE0
.text:00408AE0 sub_408AE0      proc near               ; CODE XREF: .text:0040963E↓p
.text:00408AE0                                         ; sub_409AC0+12A↓p
.text:00408AE0                 sub     esp, 0Ch
.text:00408AE3                 call    sub_408BF0
.text:00408AE8                 mov     eax, ds:dword_40F1B0
.text:00408AED                 add     esp, 0Ch
.text:00408AF0                 retn
.text:00408AF0 sub_408AE0      endp
.text:00408AF0
.text:00408AF1 ; ---------------------------------------------------------------------------
.text:00408AF1                 jmp     short loc_408B00
.text:00408AF1 ; ---------------------------------------------------------------------------
.text:00408AF3                 align 10h
.text:00408B00
.text:00408B00 loc_408B00:                             ; CODE XREF: .text:00408AF1↑j
.text:00408B00                 sub     esp, 0Ch
.text:00408B03                 call    sub_408BF0
.text:00408B08                 mov     eax, ds:VersionInformation.dwPlatformId
.text:00408B0D                 add     esp, 0Ch
.text:00408B10                 retn
.text:00408B11 ; ---------------------------------------------------------------------------
.text:00408B11                 jmp     short loc_408B20
.text:00408B11 ; ---------------------------------------------------------------------------
.text:00408B13                 align 10h
.text:00408B20
.text:00408B20 loc_408B20:                             ; CODE XREF: .text:00408B11↑j
.text:00408B20                 sub     esp, 0Ch
.text:00408B23                 call    sub_408BF0
.text:00408B28                 mov     eax, ds:VersionInformation.dwMajorVersion
.text:00408B2D                 add     esp, 0Ch
.text:00408B30                 retn
.text:00408B31 ; ---------------------------------------------------------------------------
.text:00408B31                 jmp     short loc_408B40
.text:00408B31 ; ---------------------------------------------------------------------------
.text:00408B33                 align 10h
.text:00408B40
.text:00408B40 loc_408B40:                             ; CODE XREF: .text:00408B31↑j
.text:00408B40                 sub     esp, 0Ch
.text:00408B43                 call    sub_408BF0
.text:00408B48                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:00408B4D                 add     esp, 0Ch
.text:00408B50                 retn
.text:00408B51 ; ---------------------------------------------------------------------------
.text:00408B51                 jmp     short loc_408B60
.text:00408B51 ; ---------------------------------------------------------------------------
.text:00408B53                 align 10h
.text:00408B60
.text:00408B60 loc_408B60:                             ; CODE XREF: .text:00408B51↑j
.text:00408B60                 sub     esp, 0Ch
.text:00408B63                 call    GetVersion
.text:00408B68                 shr     eax, 10h
.text:00408B6B                 add     esp, 0Ch
.text:00408B6E                 retn
.text:00408B6E ; ---------------------------------------------------------------------------
.text:00408B6F                 align 10h
.text:00408B70                 sub     esp, 0Ch
.text:00408B73                 call    sub_408BF0
.text:00408B78                 xor     eax, eax
.text:00408B7A                 cmp     ds:VersionInformation.dwPlatformId, 2
.text:00408B81                 setz    al
.text:00408B84                 add     esp, 0Ch
.text:00408B87                 retn
.text:00408B87 ; ---------------------------------------------------------------------------
.text:00408B88                 align 10h
.text:00408B90
.text:00408B90 ; =============== S U B R O U T I N E =======================================
.text:00408B90
.text:00408B90
.text:00408B90 sub_408B90      proc near               ; CODE XREF: .text:loc_406480↑p
.text:00408B90                                         ; .text:loc_409624↓p ...
.text:00408B90                 sub     esp, 0Ch
.text:00408B93                 call    sub_408BF0
.text:00408B98                 xor     eax, eax
.text:00408B9A                 cmp     ds:VersionInformation.dwPlatformId, 1
.text:00408BA1                 setz    al
.text:00408BA4                 add     esp, 0Ch
.text:00408BA7                 retn
.text:00408BA7 sub_408B90      endp
.text:00408BA7
.text:00408BA7 ; ---------------------------------------------------------------------------
.text:00408BA8                 align 10h
.text:00408BB0                 sub     esp, 0Ch
.text:00408BB3                 call    sub_408BF0
.text:00408BB8                 xor     eax, eax
.text:00408BBA                 cmp     ds:VersionInformation.dwPlatformId, 0
.text:00408BC1                 setz    al
.text:00408BC4                 add     esp, 0Ch
.text:00408BC7                 retn
.text:00408BC7 ; ---------------------------------------------------------------------------
.text:00408BC8                 align 10h
.text:00408BD0                 sub     esp, 0Ch
.text:00408BD3                 call    sub_408BF0
.text:00408BD8                 xor     eax, eax
.text:00408BDA                 cmp     ds:VersionInformation.dwPlatformId, 3
.text:00408BE1                 setz    al
.text:00408BE4                 add     esp, 0Ch
.text:00408BE7                 retn
.text:00408BE7 ; ---------------------------------------------------------------------------
.text:00408BE8                 align 10h
.text:00408BF0
.text:00408BF0 ; =============== S U B R O U T I N E =======================================
.text:00408BF0
.text:00408BF0
.text:00408BF0 sub_408BF0      proc near               ; CODE XREF: .text:004084F0↑p
.text:00408BF0                                         ; sub_408AE0+3↑p ...
.text:00408BF0
.text:00408BF0 lpVersionInformation= dword ptr -0BCh
.text:00408BF0 VersionInformation= _OSVERSIONINFOA ptr -0ACh
.text:00408BF0
.text:00408BF0                 sub     esp, 0BCh
.text:00408BF6                 mov     edx, ds:dword_40F260
.text:00408BFC                 test    edx, edx
.text:00408BFE                 jz      short loc_408C10
.text:00408C00
.text:00408C00 loc_408C00:                             ; CODE XREF: sub_408BF0+7B↓j
.text:00408C00                 mov     edx, 1
.text:00408C05
.text:00408C05 loc_408C05:                             ; CODE XREF: sub_408BF0+217↓j
.text:00408C05                 mov     eax, edx
.text:00408C07                 add     esp, 0BCh
.text:00408C0D                 retn
.text:00408C0D ; ---------------------------------------------------------------------------
.text:00408C0E                 align 10h
.text:00408C10
.text:00408C10 loc_408C10:                             ; CODE XREF: sub_408BF0+E↑j
.text:00408C10                 mov     [esp+0BCh+lpVersionInformation], offset VersionInformation ; lpVersionInformation
.text:00408C17                 mov     edx, 9Ch ; 'œ'
.text:00408C1C                 mov     ds:VersionInformation.dwOSVersionInfoSize, edx
.text:00408C22                 call    GetVersionExA
.text:00408C27                 sub     esp, 4
.text:00408C2A                 test    eax, eax
.text:00408C2C                 jz      loc_408DE4
.text:00408C32
.text:00408C32 loc_408C32:                             ; CODE XREF: sub_408BF0+245↓j
.text:00408C32                 movzx   edx, word ptr ds:VersionInformation.dwBuildNumber
.text:00408C39                 mov     eax, ds:VersionInformation.dwPlatformId
.text:00408C3E                 cmp     eax, 1
.text:00408C41                 mov     ds:VersionInformation.dwBuildNumber, edx
.text:00408C47                 jz      loc_408D30
.text:00408C4D                 cmp     eax, 1
.text:00408C50                 jb      loc_408D20
.text:00408C56                 cmp     eax, 2
.text:00408C59                 jz      short loc_408C7A
.text:00408C5B                 cmp     eax, 3
.text:00408C5E                 jz      short loc_408C6D
.text:00408C60
.text:00408C60 loc_408C60:                             ; CODE XREF: sub_408BF0+88↓j
.text:00408C60                                         ; sub_408BF0+C0↓j ...
.text:00408C60                 mov     edx, 1
.text:00408C65                 mov     ds:dword_40F260, edx
.text:00408C6B                 jmp     short loc_408C00
.text:00408C6D ; ---------------------------------------------------------------------------
.text:00408C6D
.text:00408C6D loc_408C6D:                             ; CODE XREF: sub_408BF0+6E↑j
.text:00408C6D                 mov     ecx, 17h
.text:00408C72
.text:00408C72 loc_408C72:                             ; CODE XREF: sub_408BF0+1A7↓j
.text:00408C72                 mov     ds:dword_40F1B0, ecx
.text:00408C78                 jmp     short loc_408C60
.text:00408C7A ; ---------------------------------------------------------------------------
.text:00408C7A
.text:00408C7A loc_408C7A:                             ; CODE XREF: sub_408BF0+69↑j
.text:00408C7A                 mov     eax, ds:VersionInformation.dwMajorVersion
.text:00408C7F                 cmp     eax, 3
.text:00408C82                 jz      short loc_408CFB
.text:00408C84                 cmp     eax, 4
.text:00408C87                 jz      short loc_408CEA
.text:00408C89
.text:00408C89 loc_408C89:                             ; CODE XREF: sub_408BF0+102↓j
.text:00408C89                 cmp     eax, 4
.text:00408C8C                 ja      short loc_408CB2
.text:00408C8E                 mov     ecx, ds:VersionInformation.dwMinorVersion
.text:00408C94                 test    ecx, ecx
.text:00408C96                 jnz     short loc_408CB2
.text:00408C98                 mov     edx, 1Eh
.text:00408C9D
.text:00408C9D loc_408C9D:                             ; CODE XREF: sub_408BF0+DF↓j
.text:00408C9D                 mov     ds:dword_40F1B0, edx
.text:00408CA3
.text:00408CA3 loc_408CA3:                             ; CODE XREF: sub_408BF0+C5↓j
.text:00408CA3                                         ; sub_408BF0+D8↓j ...
.text:00408CA3                 movzx   ecx, ds:word_40F254
.text:00408CAA                 add     ds:dword_40F1B0, ecx
.text:00408CB0                 jmp     short loc_408C60
.text:00408CB2 ; ---------------------------------------------------------------------------
.text:00408CB2
.text:00408CB2 loc_408CB2:                             ; CODE XREF: sub_408BF0+9C↑j
.text:00408CB2                                         ; sub_408BF0+A6↑j
.text:00408CB2                 cmp     eax, 5
.text:00408CB5                 jnz     short loc_408CA3
.text:00408CB7                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:00408CBC                 cmp     eax, 2
.text:00408CBF                 jz      short loc_408CDE
.text:00408CC1                 cmp     eax, 1
.text:00408CC4                 jz      short loc_408CD1
.text:00408CC6                 test    eax, eax
.text:00408CC8                 jnz     short loc_408CA3
.text:00408CCA                 mov     edx, 32h ; '2'
.text:00408CCF                 jmp     short loc_408C9D
.text:00408CD1 ; ---------------------------------------------------------------------------
.text:00408CD1
.text:00408CD1 loc_408CD1:                             ; CODE XREF: sub_408BF0+D4↑j
.text:00408CD1                 mov     ecx, 3Ch ; '<'
.text:00408CD6
.text:00408CD6 loc_408CD6:                             ; CODE XREF: sub_408BF0+122↓j
.text:00408CD6                 mov     ds:dword_40F1B0, ecx
.text:00408CDC                 jmp     short loc_408CA3
.text:00408CDE ; ---------------------------------------------------------------------------
.text:00408CDE
.text:00408CDE loc_408CDE:                             ; CODE XREF: sub_408BF0+CF↑j
.text:00408CDE                 mov     eax, 46h ; 'F'
.text:00408CE3
.text:00408CE3 loc_408CE3:                             ; CODE XREF: sub_408BF0+109↓j
.text:00408CE3                                         ; sub_408BF0+129↓j
.text:00408CE3                 mov     ds:dword_40F1B0, eax
.text:00408CE8                 jmp     short loc_408CA3
.text:00408CEA ; ---------------------------------------------------------------------------
.text:00408CEA
.text:00408CEA loc_408CEA:                             ; CODE XREF: sub_408BF0+97↑j
.text:00408CEA                 mov     ecx, ds:VersionInformation.dwMinorVersion
.text:00408CF0                 test    ecx, ecx
.text:00408CF2                 jnz     short loc_408C89
.text:00408CF4                 mov     eax, 28h ; '('
.text:00408CF9                 jmp     short loc_408CE3
.text:00408CFB ; ---------------------------------------------------------------------------
.text:00408CFB
.text:00408CFB loc_408CFB:                             ; CODE XREF: sub_408BF0+92↑j
.text:00408CFB                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:00408D00                 cmp     eax, 33h ; '3'
.text:00408D03                 jz      short loc_408D14
.text:00408D05                 cmp     eax, 5
.text:00408D08                 setz    cl
.text:00408D0B                 movzx   edx, cl
.text:00408D0E                 lea     ecx, [edx+edx*4+1Eh]
.text:00408D12                 jmp     short loc_408CD6
.text:00408D14 ; ---------------------------------------------------------------------------
.text:00408D14
.text:00408D14 loc_408D14:                             ; CODE XREF: sub_408BF0+113↑j
.text:00408D14                 mov     eax, 24h ; '$'
.text:00408D19                 jmp     short loc_408CE3
.text:00408D19 ; ---------------------------------------------------------------------------
.text:00408D1B                 align 10h
.text:00408D20
.text:00408D20 loc_408D20:                             ; CODE XREF: sub_408BF0+60↑j
.text:00408D20                 mov     edx, 2
.text:00408D25                 mov     ds:dword_40F1B0, edx
.text:00408D2B                 jmp     loc_408C60
.text:00408D30 ; ---------------------------------------------------------------------------
.text:00408D30
.text:00408D30 loc_408D30:                             ; CODE XREF: sub_408BF0+57↑j
.text:00408D30                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:00408D36                 cmp     ecx, 4
.text:00408D39                 jnz     loc_408C60
.text:00408D3F                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:00408D44                 test    eax, eax
.text:00408D46                 jnz     short loc_408D6A
.text:00408D48                 mov     eax, 0Ah
.text:00408D4D                 mov     ds:dword_40F1B0, eax
.text:00408D52                 lea     eax, [edx-3B7h]
.text:00408D58                 cmp     eax, 81h
.text:00408D5D                 ja      short loc_408DD5
.text:00408D5F                 mov     edx, 0Bh
.text:00408D64
.text:00408D64 loc_408D64:                             ; CODE XREF: sub_408BF0+1F2↓j
.text:00408D64                 mov     ds:dword_40F1B0, edx
.text:00408D6A
.text:00408D6A loc_408D6A:                             ; CODE XREF: sub_408BF0+156↑j
.text:00408D6A                                         ; sub_408BF0+1EB↓j
.text:00408D6A                 cmp     ecx, 4
.text:00408D6D                 jnz     loc_408C60
.text:00408D73                 cmp     ds:VersionInformation.dwMinorVersion, 0Ah
.text:00408D7A                 jz      short loc_408D9C
.text:00408D7C
.text:00408D7C loc_408D7C:                             ; CODE XREF: sub_408BF0+1D4↓j
.text:00408D7C                                         ; sub_408BF0+1DC↓j
.text:00408D7C                 cmp     ecx, 4
.text:00408D7F                 jnz     loc_408C60
.text:00408D85                 cmp     ds:VersionInformation.dwMinorVersion, 5Ah ; 'Z'
.text:00408D8C                 jnz     loc_408C60
.text:00408D92                 mov     ecx, 12h
.text:00408D97                 jmp     loc_408C72
.text:00408D9C ; ---------------------------------------------------------------------------
.text:00408D9C
.text:00408D9C loc_408D9C:                             ; CODE XREF: sub_408BF0+18A↑j
.text:00408D9C                 mov     edx, ds:VersionInformation.dwBuildNumber
.text:00408DA2                 mov     eax, 0Eh
.text:00408DA7                 mov     ds:dword_40F1B0, eax
.text:00408DAC                 lea     eax, [edx-7CFh]
.text:00408DB2                 cmp     eax, 0B7h ; '·'
.text:00408DB7                 ja      short loc_408DC6
.text:00408DB9                 mov     edx, 0Fh
.text:00408DBE
.text:00408DBE loc_408DBE:                             ; CODE XREF: sub_408BF0+1E3↓j
.text:00408DBE                 mov     ds:dword_40F1B0, edx
.text:00408DC4                 jmp     short loc_408D7C
.text:00408DC6 ; ---------------------------------------------------------------------------
.text:00408DC6
.text:00408DC6 loc_408DC6:                             ; CODE XREF: sub_408BF0+1C7↑j
.text:00408DC6                 cmp     edx, 886h
.text:00408DCC                 jbe     short loc_408D7C
.text:00408DCE                 mov     edx, 10h
.text:00408DD3                 jmp     short loc_408DBE
.text:00408DD5 ; ---------------------------------------------------------------------------
.text:00408DD5
.text:00408DD5 loc_408DD5:                             ; CODE XREF: sub_408BF0+16D↑j
.text:00408DD5                 cmp     edx, 438h
.text:00408DDB                 jbe     short loc_408D6A
.text:00408DDD                 mov     edx, 0Ch
.text:00408DE2                 jmp     short loc_408D64
.text:00408DE4 ; ---------------------------------------------------------------------------
.text:00408DE4
.text:00408DE4 loc_408DE4:                             ; CODE XREF: sub_408BF0+3C↑j
.text:00408DE4                 mov     [esp+0BCh+VersionInformation.dwOSVersionInfoSize], 94h ; '”'
.text:00408DEC                 xor     edx, edx
.text:00408DEE                 lea     ecx, [esp+0BCh+VersionInformation]
.text:00408DF2                 mov     dword_40E060, edx
.text:00408DF8                 mov     [esp+0BCh+lpVersionInformation], ecx ; lpVersionInformation
.text:00408DFB                 call    GetVersionExA
.text:00408E00                 sub     esp, 4
.text:00408E03                 xor     edx, edx
.text:00408E05                 test    eax, eax
.text:00408E07                 jz      loc_408C05
.text:00408E0D                 mov     edx, [esp+0BCh+VersionInformation.dwMajorVersion]
.text:00408E11                 mov     ecx, [esp+0BCh+VersionInformation.dwMinorVersion]
.text:00408E15                 mov     ds:VersionInformation.dwMajorVersion, edx
.text:00408E1B                 mov     edx, [esp+0BCh+VersionInformation.dwBuildNumber]
.text:00408E1F                 mov     ds:VersionInformation.dwMinorVersion, ecx
.text:00408E25                 mov     ecx, [esp+0BCh+VersionInformation.dwPlatformId]
.text:00408E29                 mov     ds:VersionInformation.dwBuildNumber, edx
.text:00408E2F                 mov     ds:VersionInformation.dwPlatformId, ecx
.text:00408E35                 jmp     loc_408C32
.text:00408E35 sub_408BF0      endp
.text:00408E35
.text:00408E35 ; ---------------------------------------------------------------------------
.text:00408E3A                 align 10h
.text:00408E40
.text:00408E40 ; =============== S U B R O U T I N E =======================================
.text:00408E40
.text:00408E40
.text:00408E40 sub_408E40      proc near               ; CODE XREF: .text:004061B3↑p
.text:00408E40                                         ; .text:00406203↑p
.text:00408E40
.text:00408E40 arg_4           = dword ptr  8
.text:00408E40
.text:00408E40                 sub     esp, 0Ch
.text:00408E43                 mov     edx, [esp+0Ch+arg_4]
.text:00408E47                 test    edx, edx
.text:00408E49                 jz      short loc_408E50
.text:00408E4B                 add     esp, 0Ch
.text:00408E4E                 jmp     short sub_408E90
.text:00408E50 ; ---------------------------------------------------------------------------
.text:00408E50
.text:00408E50 loc_408E50:                             ; CODE XREF: sub_408E40+9↑j
.text:00408E50                 call    _errno
.text:00408E55                 mov     dword ptr [eax], 16h
.text:00408E5B                 xor     eax, eax
.text:00408E5D                 add     esp, 0Ch
.text:00408E60                 retn
.text:00408E60 sub_408E40      endp
.text:00408E60
.text:00408E61 ; ---------------------------------------------------------------------------
.text:00408E61                 jmp     short sub_408E70
.text:00408E61 ; ---------------------------------------------------------------------------
.text:00408E63                 align 10h
.text:00408E70
.text:00408E70 ; =============== S U B R O U T I N E =======================================
.text:00408E70
.text:00408E70
.text:00408E70 ; int __cdecl sub_408E70(LPCSTR)
.text:00408E70 sub_408E70      proc near               ; CODE XREF: .text:004063A8↑p
.text:00408E70                                         ; .text:004063B6↑p ...
.text:00408E70
.text:00408E70 lpFileName      = dword ptr -0Ch
.text:00408E70 Destination     = dword ptr -8
.text:00408E70 arg_0           = dword ptr  4
.text:00408E70
.text:00408E70                 sub     esp, 0Ch
.text:00408E73                 mov     edx, [esp+0Ch+arg_0]
.text:00408E77                 mov     [esp+0Ch+Destination], 0 ; Destination
.text:00408E7F                 mov     [esp+0Ch+lpFileName], edx ; lpFileName
.text:00408E82                 call    sub_408E90
.text:00408E87                 add     esp, 0Ch
.text:00408E8A                 retn
.text:00408E8A sub_408E70      endp
.text:00408E8A
.text:00408E8A ; ---------------------------------------------------------------------------
.text:00408E8B                 align 10h
.text:00408E90
.text:00408E90 ; =============== S U B R O U T I N E =======================================
.text:00408E90
.text:00408E90
.text:00408E90 ; int __cdecl sub_408E90(LPCSTR lpFileName, char *Destination)
.text:00408E90 sub_408E90      proc near               ; CODE XREF: sub_408E40+E↑j
.text:00408E90                                         ; sub_408E70+12↑p
.text:00408E90
.text:00408E90 Size            = dword ptr -2Ch
.text:00408E90 nBufferLength   = dword ptr -28h
.text:00408E90 lpBuffer        = dword ptr -24h
.text:00408E90 lpFilePart      = dword ptr -20h
.text:00408E90 FilePart        = dword ptr -14h
.text:00408E90 lpFileName      = dword ptr  4
.text:00408E90 Destination     = dword ptr  8
.text:00408E90
.text:00408E90                 push    ebp
.text:00408E91                 push    edi
.text:00408E92                 push    esi
.text:00408E93                 push    ebx
.text:00408E94                 sub     esp, 1Ch
.text:00408E97                 mov     edi, [esp+2Ch+lpFileName]
.text:00408E9B                 mov     ebp, [esp+2Ch+Destination]
.text:00408E9F                 test    edi, edi
.text:00408EA1                 jz      loc_408FA9
.text:00408EA7                 cmp     byte ptr [edi], 0
.text:00408EAA                 jz      loc_408F9C
.text:00408EB0                 mov     [esp+2Ch+Size], 104h ; Size
.text:00408EB7                 call    malloc
.text:00408EBC                 mov     [esp+2Ch+lpBuffer], eax ; lpBuffer
.text:00408EC0                 lea     edx, [esp+2Ch+FilePart]
.text:00408EC4                 mov     ebx, eax
.text:00408EC6                 mov     [esp+2Ch+lpFilePart], edx ; lpFilePart
.text:00408ECA                 mov     [esp+2Ch+nBufferLength], 104h ; nBufferLength
.text:00408ED2                 mov     [esp+2Ch+Size], edi ; lpFileName
.text:00408ED5                 call    GetFullPathNameA
.text:00408EDA                 sub     esp, 10h
.text:00408EDD                 mov     esi, eax
.text:00408EDF                 test    eax, eax
.text:00408EE1                 jz      loc_408F8A
.text:00408EE7                 cmp     eax, 104h
.text:00408EEC                 jle     short loc_408EFD
.text:00408EEE                 test    ebp, ebp
.text:00408EF0                 jz      short loc_408F59
.text:00408EF2                 call    _errno
.text:00408EF7                 mov     dword ptr [eax], 26h ; '&'
.text:00408EFD
.text:00408EFD loc_408EFD:                             ; CODE XREF: sub_408E90+5C↑j
.text:00408EFD                                         ; sub_408E90+F5↓j
.text:00408EFD                 call    _errno
.text:00408F02                 mov     edi, [eax]
.text:00408F04                 mov     [esp+2Ch+nBufferLength], 10h ; int
.text:00408F0C                 mov     [esp+2Ch+Size], ebx ; lpFileName
.text:00408F0F                 call    sub_408FC0
.text:00408F14                 test    eax, eax
.text:00408F16                 jnz     short loc_408F30
.text:00408F18                 movzx   eax, byte ptr [esi+ebx-1]
.text:00408F1D                 cmp     al, 2Fh ; '/'
.text:00408F1F                 jz      short loc_408F30
.text:00408F21                 cmp     al, 5Ch ; '\'
.text:00408F23                 jz      short loc_408F30
.text:00408F25                 mov     byte ptr [esi+ebx], 5Ch ; '\'
.text:00408F29                 mov     byte ptr [esi+ebx+1], 0
.text:00408F2E                 mov     esi, esi
.text:00408F30
.text:00408F30 loc_408F30:                             ; CODE XREF: sub_408E90+86↑j
.text:00408F30                                         ; sub_408E90+8F↑j ...
.text:00408F30                 call    _errno
.text:00408F35                 mov     [eax], edi
.text:00408F37                 mov     [esp+2Ch+Size], ebx
.text:00408F3A                 call    sub_4060A0
.text:00408F3F                 test    ebp, ebp
.text:00408F41                 mov     eax, ebx
.text:00408F43                 jz      short loc_408F51
.text:00408F45                 mov     [esp+2Ch+nBufferLength], ebx ; Source
.text:00408F49                 mov     [esp+2Ch+Size], ebp ; Destination
.text:00408F4C                 call    strcpy
.text:00408F51
.text:00408F51 loc_408F51:                             ; CODE XREF: sub_408E90+B3↑j
.text:00408F51                                         ; sub_408E90+10A↓j
.text:00408F51                 add     esp, 1Ch
.text:00408F54                 pop     ebx
.text:00408F55                 pop     esi
.text:00408F56                 pop     edi
.text:00408F57                 pop     ebp
.text:00408F58                 retn
.text:00408F59 ; ---------------------------------------------------------------------------
.text:00408F59
.text:00408F59 loc_408F59:                             ; CODE XREF: sub_408E90+60↑j
.text:00408F59                 mov     [esp+2Ch+Size], ebx ; Block
.text:00408F5C                 lea     ecx, [eax+2]
.text:00408F5F                 mov     [esp+2Ch+nBufferLength], ecx ; Size
.text:00408F63                 call    realloc
.text:00408F68                 mov     [esp+2Ch+lpBuffer], eax ; lpBuffer
.text:00408F6C                 lea     edx, [esp+2Ch+FilePart]
.text:00408F70                 mov     ebx, eax
.text:00408F72                 mov     [esp+2Ch+lpFilePart], edx ; lpFilePart
.text:00408F76                 mov     [esp+2Ch+nBufferLength], esi ; nBufferLength
.text:00408F7A                 mov     [esp+2Ch+Size], edi ; lpFileName
.text:00408F7D                 call    GetFullPathNameA
.text:00408F82                 sub     esp, 10h
.text:00408F85                 jmp     loc_408EFD
.text:00408F8A ; ---------------------------------------------------------------------------
.text:00408F8A
.text:00408F8A loc_408F8A:                             ; CODE XREF: sub_408E90+51↑j
.text:00408F8A                 call    sub_4067D0
.text:00408F8F                 mov     esi, eax
.text:00408F91                 call    _errno
.text:00408F96                 mov     [eax], esi
.text:00408F98
.text:00408F98 loc_408F98:                             ; CODE XREF: sub_408E90+117↓j
.text:00408F98                                         ; sub_408E90+124↓j
.text:00408F98                 xor     eax, eax
.text:00408F9A                 jmp     short loc_408F51
.text:00408F9C ; ---------------------------------------------------------------------------
.text:00408F9C
.text:00408F9C loc_408F9C:                             ; CODE XREF: sub_408E90+1A↑j
.text:00408F9C                 call    _errno
.text:00408FA1                 mov     dword ptr [eax], 2
.text:00408FA7                 jmp     short loc_408F98
.text:00408FA9 ; ---------------------------------------------------------------------------
.text:00408FA9
.text:00408FA9 loc_408FA9:                             ; CODE XREF: sub_408E90+11↑j
.text:00408FA9                 call    _errno
.text:00408FAE                 mov     dword ptr [eax], 16h
.text:00408FB4                 jmp     short loc_408F98
.text:00408FB4 sub_408E90      endp
.text:00408FB4
.text:00408FB4 ; ---------------------------------------------------------------------------
.text:00408FB6                 align 10h
.text:00408FC0
.text:00408FC0 ; =============== S U B R O U T I N E =======================================
.text:00408FC0
.text:00408FC0
.text:00408FC0 ; int __cdecl sub_408FC0(LPCSTR lpFileName, int)
.text:00408FC0 sub_408FC0      proc near               ; CODE XREF: .text:00406082↑p
.text:00408FC0                                         ; sub_405C80+25B3↑p ...
.text:00408FC0
.text:00408FC0 uMode           = dword ptr -1Ch
.text:00408FC0 var_10          = dword ptr -10h
.text:00408FC0 var_C           = dword ptr -0Ch
.text:00408FC0 var_8           = dword ptr -8
.text:00408FC0 var_4           = dword ptr -4
.text:00408FC0 lpFileName      = dword ptr  4
.text:00408FC0 arg_4           = dword ptr  8
.text:00408FC0
.text:00408FC0                 sub     esp, 1Ch
.text:00408FC3                 mov     [esp+1Ch+var_10], ebx
.text:00408FC7                 mov     ebx, [esp+1Ch+lpFileName]
.text:00408FCB                 mov     [esp+1Ch+var_4], ebp
.text:00408FCF                 xor     ebp, ebp
.text:00408FD1                 test    ebx, ebx
.text:00408FD3                 mov     [esp+1Ch+var_C], esi
.text:00408FD7                 mov     esi, [esp+1Ch+arg_4]
.text:00408FDB                 mov     [esp+1Ch+var_8], edi
.text:00408FDF                 jz      short loc_408FE9
.text:00408FE1                 test    esi, 0FFFFFFE8h
.text:00408FE7                 jz      short loc_409010
.text:00408FE9
.text:00408FE9 loc_408FE9:                             ; CODE XREF: sub_408FC0+1F↑j
.text:00408FE9                 call    _errno
.text:00408FEE                 mov     dword ptr [eax], 16h
.text:00408FF4
.text:00408FF4 loc_408FF4:                             ; CODE XREF: sub_408FC0+B1↓j
.text:00408FF4                 mov     eax, 0FFFFFFFFh
.text:00408FF9
.text:00408FF9 loc_408FF9:                             ; CODE XREF: sub_408FC0+86↓j
.text:00408FF9                                         ; sub_408FC0+A4↓j
.text:00408FF9                 mov     ebx, [esp+1Ch+var_10]
.text:00408FFD                 mov     esi, [esp+1Ch+var_C]
.text:00409001                 mov     edi, [esp+1Ch+var_8]
.text:00409005                 mov     ebp, [esp+1Ch+var_4]
.text:00409009                 add     esp, 1Ch
.text:0040900C                 retn
.text:0040900C ; ---------------------------------------------------------------------------
.text:0040900D                 align 10h
.text:00409010
.text:00409010 loc_409010:                             ; CODE XREF: sub_408FC0+27↑j
.text:00409010                 mov     [esp+1Ch+uMode], 8001h ; uMode
.text:00409017                 call    SetErrorMode
.text:0040901C                 sub     esp, 4
.text:0040901F                 mov     [esp+1Ch+uMode], ebx ; lpFileName
.text:00409022                 call    GetFileAttributesA
.text:00409027                 sub     esp, 4
.text:0040902A                 mov     edi, eax
.text:0040902C                 cmp     eax, 0FFFFFFFFh
.text:0040902F                 jz      short loc_409073
.text:00409031
.text:00409031 loc_409031:                             ; CODE XREF: sub_408FC0+C6↓j
.text:00409031                 mov     [esp+1Ch+uMode], 0 ; uMode
.text:00409038                 call    SetErrorMode
.text:0040903D                 sub     esp, 4
.text:00409040                 mov     eax, 0FFFFFFFFh
.text:00409045                 inc     ebp
.text:00409046                 jz      short loc_408FF9
.text:00409048                 test    esi, 10h
.text:0040904E                 jz      short loc_409058
.text:00409050                 test    edi, 10h
.text:00409056                 jz      short loc_409066
.text:00409058
.text:00409058 loc_409058:                             ; CODE XREF: sub_408FC0+8E↑j
.text:00409058                 and     esi, 2
.text:0040905B                 jz      short loc_409062
.text:0040905D                 and     edi, 1
.text:00409060                 jnz     short loc_409066
.text:00409062
.text:00409062 loc_409062:                             ; CODE XREF: sub_408FC0+9B↑j
.text:00409062                 xor     eax, eax
.text:00409064                 jmp     short loc_408FF9
.text:00409066 ; ---------------------------------------------------------------------------
.text:00409066
.text:00409066 loc_409066:                             ; CODE XREF: sub_408FC0+96↑j
.text:00409066                                         ; sub_408FC0+A0↑j
.text:00409066                 call    _errno
.text:0040906B                 mov     dword ptr [eax], 0Dh
.text:00409071                 jmp     short loc_408FF4
.text:00409073 ; ---------------------------------------------------------------------------
.text:00409073
.text:00409073 loc_409073:                             ; CODE XREF: sub_408FC0+6F↑j
.text:00409073                 call    sub_4067D0
.text:00409078                 mov     ebp, eax
.text:0040907A                 call    _errno
.text:0040907F                 mov     [eax], ebp
.text:00409081                 mov     ebp, 0FFFFFFFFh
.text:00409086                 jmp     short loc_409031
.text:00409086 sub_408FC0      endp
.text:00409086
.text:00409086 ; ---------------------------------------------------------------------------
.text:00409088                 align 10h
.text:00409090 ; const char String[4]
.text:00409090 String          db ' :/',0              ; DATA XREF: sub_4090A0+FA↓o
.text:00409094                 align 10h
.text:004090A0
.text:004090A0 ; =============== S U B R O U T I N E =======================================
.text:004090A0
.text:004090A0
.text:004090A0 ; int __cdecl sub_4090A0(LPCSTR)
.text:004090A0 sub_4090A0      proc near               ; CODE XREF: sub_406FF0+E↑p
.text:004090A0                                         ; sub_4074F0+17↑p ...
.text:004090A0
.text:004090A0 Str             = dword ptr -1Ch
.text:004090A0 Val             = dword ptr -18h
.text:004090A0 Count           = dword ptr -14h
.text:004090A0 var_10          = dword ptr -10h
.text:004090A0 var_C           = dword ptr -0Ch
.text:004090A0 var_8           = dword ptr -8
.text:004090A0 var_4           = dword ptr -4
.text:004090A0 arg_0           = dword ptr  4
.text:004090A0
.text:004090A0                 sub     esp, 1Ch
.text:004090A3                 mov     edx, [esp+1Ch+arg_0]
.text:004090A7                 mov     [esp+1Ch+var_8], edi
.text:004090AB                 mov     [esp+1Ch+var_10], ebx
.text:004090AF                 mov     [esp+1Ch+var_C], esi
.text:004090B3                 mov     [esp+1Ch+var_4], ebp
.text:004090B7                 mov     [esp+1Ch+Str], edx ; LPCSTR
.text:004090BA                 call    sub_408E70
.text:004090BF                 test    eax, eax
.text:004090C1                 mov     edi, eax
.text:004090C3                 jz      short loc_409100
.text:004090C5                 mov     [esp+1Ch+Str], eax ; Str
.text:004090C8                 call    strlen
.text:004090CD                 cmp     eax, 2
.text:004090D0                 jbe     short loc_4090DC
.text:004090D2                 cmp     byte ptr [edi+1], 3Ah ; ':'
.text:004090D6                 jz      loc_409190
.text:004090DC
.text:004090DC loc_4090DC:                             ; CODE XREF: sub_4090A0+30↑j
.text:004090DC                                         ; sub_4090A0+F4↓j
.text:004090DC                 test    edi, edi
.text:004090DE                 jz      short loc_409100
.text:004090E0                 mov     [esp+1Ch+Str], edi ; Str
.text:004090E3                 call    strlen
.text:004090E8                 cmp     eax, 4
.text:004090EB                 mov     ebp, eax
.text:004090ED                 jle     short loc_409100
.text:004090EF                 cmp     byte ptr [edi], 2Fh ; '/'
.text:004090F2                 jz      short loc_409120
.text:004090F4                 lea     esi, [esi+0]
.text:004090FA                 lea     edi, [edi+0]
.text:00409100
.text:00409100 loc_409100:                             ; CODE XREF: sub_4090A0+23↑j
.text:00409100                                         ; sub_4090A0+3E↑j ...
.text:00409100                 xor     esi, esi
.text:00409102
.text:00409102 loc_409102:                             ; CODE XREF: sub_4090A0+CD↓j
.text:00409102                                         ; sub_4090A0+115↓j
.text:00409102                 mov     [esp+1Ch+Str], edi ; Block
.text:00409105                 call    free
.text:0040910A                 mov     eax, esi
.text:0040910C                 mov     ebx, [esp+1Ch+var_10]
.text:00409110                 mov     esi, [esp+1Ch+var_C]
.text:00409114                 mov     edi, [esp+1Ch+var_8]
.text:00409118                 mov     ebp, [esp+1Ch+var_4]
.text:0040911C                 add     esp, 1Ch
.text:0040911F                 retn
.text:00409120 ; ---------------------------------------------------------------------------
.text:00409120
.text:00409120 loc_409120:                             ; CODE XREF: sub_4090A0+52↑j
.text:00409120                 cmp     byte ptr [edi+1], 2Fh ; '/'
.text:00409124                 jnz     short loc_409100
.text:00409126                 mov     [esp+1Ch+Val], 2Fh ; '/' ; Val
.text:0040912E                 lea     ecx, [edi+2]
.text:00409131                 mov     [esp+1Ch+Str], ecx ; Str
.text:00409134                 call    strchr
.text:00409139                 test    eax, eax
.text:0040913B                 jnz     short loc_40916F
.text:0040913D
.text:0040913D loc_40913D:                             ; CODE XREF: sub_4090A0+E2↓j
.text:0040913D                 inc     ebp
.text:0040913E
.text:0040913E loc_40913E:                             ; CODE XREF: sub_4090A0+E9↓j
.text:0040913E                 mov     [esp+1Ch+Val], 1 ; Size
.text:00409146                 lea     ebx, [ebp+1]
.text:00409149                 mov     [esp+1Ch+Str], ebx ; Count
.text:0040914C                 call    calloc
.text:00409151                 mov     [esp+1Ch+Str], eax ; Destination
.text:00409154                 mov     esi, eax
.text:00409156                 mov     [esp+1Ch+Count], ebx ; Count
.text:0040915A                 mov     [esp+1Ch+Val], edi ; Source
.text:0040915E                 call    strncpy
.text:00409163                 mov     byte ptr [ebp+esi-1], 2Fh ; '/'
.text:00409168                 mov     byte ptr [ebp+esi+0], 0
.text:0040916D                 jmp     short loc_409102
.text:0040916F ; ---------------------------------------------------------------------------
.text:0040916F
.text:0040916F loc_40916F:                             ; CODE XREF: sub_4090A0+9B↑j
.text:0040916F                 mov     [esp+1Ch+Val], 2Fh ; '/' ; Val
.text:00409177                 inc     eax
.text:00409178                 mov     [esp+1Ch+Str], eax ; Str
.text:0040917B                 call    strchr
.text:00409180                 test    eax, eax
.text:00409182                 jz      short loc_40913D
.text:00409184                 sub     eax, edi
.text:00409186                 lea     ebp, [eax+1]
.text:00409189                 jmp     short loc_40913E
.text:00409189 ; ---------------------------------------------------------------------------
.text:0040918B                 align 10h
.text:00409190
.text:00409190 loc_409190:                             ; CODE XREF: sub_4090A0+36↑j
.text:00409190                 cmp     byte ptr [edi+2], 2Fh ; '/'
.text:00409194                 jnz     loc_4090DC
.text:0040919A                 mov     [esp+1Ch+Str], offset String ; " :/"
.text:004091A1                 call    _strdup
.text:004091A6                 movsx   edx, byte ptr [edi]
.text:004091A9                 mov     esi, eax
.text:004091AB                 mov     [esp+1Ch+Str], edx ; C
.text:004091AE                 call    toupper
.text:004091B3                 mov     [esi], al
.text:004091B5                 jmp     loc_409102
.text:004091B5 sub_4090A0      endp
.text:004091B5
.text:004091B5 ; ---------------------------------------------------------------------------
.text:004091BA                 align 10h
.text:004091C0
.text:004091C0 ; =============== S U B R O U T I N E =======================================
.text:004091C0
.text:004091C0
.text:004091C0 sub_4091C0      proc near               ; CODE XREF: .text:00409314↓p
.text:004091C0                                         ; .text:004093F8↓p
.text:004091C0
.text:004091C0 Str             = dword ptr -2Ch
.text:004091C0 Val             = dword ptr -28h
.text:004091C0 var_18          = dword ptr -18h
.text:004091C0 var_11          = byte ptr -11h
.text:004091C0 arg_0           = dword ptr  4
.text:004091C0
.text:004091C0                 push    ebp
.text:004091C1                 push    edi
.text:004091C2                 push    esi
.text:004091C3                 push    ebx
.text:004091C4                 sub     esp, 1Ch
.text:004091C7                 mov     edx, [esp+2Ch+arg_0]
.text:004091CB                 cmp     edx, ds:dword_40F280
.text:004091D1                 mov     [esp+2Ch+var_11], 0
.text:004091D6                 jz      loc_4092D4
.text:004091DC                 mov     ebx, ds:dword_40F270
.text:004091E2                 test    ebx, ebx
.text:004091E4                 jz      short loc_409252
.text:004091E6
.text:004091E6 loc_4091E6:                             ; CODE XREF: sub_4091C0+10F↓j
.text:004091E6                 mov     ebx, [esp+2Ch+arg_0]
.text:004091EA                 xor     edi, edi
.text:004091EC                 xor     esi, esi
.text:004091EE                 mov     ebp, offset dword_40F298
.text:004091F3                 lea     esi, [esi+0]
.text:004091F9                 lea     edi, [edi+0]
.text:00409200
.text:00409200 loc_409200:                             ; CODE XREF: sub_4091C0+60↓j
.text:00409200                 mov     edx, [ebp+4]
.text:00409203                 mov     ecx, edi
.text:00409205                 mov     eax, [ebp+0]
.text:00409208                 shl     ecx, 4
.text:0040920B                 mov     [esp+2Ch+var_18], ecx
.text:0040920F                 mov     ecx, edx
.text:00409211                 xor     eax, ebx
.text:00409213                 xor     ecx, esi
.text:00409215                 or      ecx, eax
.text:00409217                 jz      short loc_409241
.text:00409219                 inc     edi
.text:0040921A                 add     ebp, 10h
.text:0040921D                 cmp     edi, 20h ; ' '
.text:00409220                 jle     short loc_409200
.text:00409222
.text:00409222 loc_409222:                             ; CODE XREF: sub_4091C0+90↓j
.text:00409222                 movzx   ebx, [esp+2Ch+var_11]
.text:00409227                 mov     eax, [esp+2Ch+arg_0]
.text:0040922B                 mov     byte_40E070, bl
.text:00409231                 mov     ds:dword_40F280, eax
.text:00409236                 movsx   eax, bl
.text:00409239
.text:00409239 loc_409239:                             ; CODE XREF: sub_4091C0+11B↓j
.text:00409239                 add     esp, 1Ch
.text:0040923C                 pop     ebx
.text:0040923D                 pop     esi
.text:0040923E                 pop     edi
.text:0040923F                 pop     ebp
.text:00409240                 retn
.text:00409241 ; ---------------------------------------------------------------------------
.text:00409241
.text:00409241 loc_409241:                             ; CODE XREF: sub_4091C0+57↑j
.text:00409241                 mov     edx, [esp+2Ch+var_18]
.text:00409245                 movzx   eax, byte ptr ds:dword_40F290[edx]
.text:0040924C                 mov     [esp+2Ch+var_11], al
.text:00409250                 jmp     short loc_409222
.text:00409252 ; ---------------------------------------------------------------------------
.text:00409252
.text:00409252 loc_409252:                             ; CODE XREF: sub_4091C0+24↑j
.text:00409252                 mov     [esp+2Ch+Str], 0
.text:00409259                 call    sub_40A890
.text:0040925E                 test    eax, eax
.text:00409260                 mov     ebx, eax
.text:00409262                 jz      short loc_4092BC
.text:00409264                 movzx   ecx, byte ptr [eax]
.text:00409267                 mov     esi, 0FFFFFFF0h
.text:0040926C                 test    cl, cl
.text:0040926E                 jz      short loc_4092BC
.text:00409270
.text:00409270 loc_409270:                             ; CODE XREF: sub_4091C0+FA↓j
.text:00409270                 mov     [esp+2Ch+Str], ebx ; LPCSTR
.text:00409273                 movsx   ebp, cl
.text:00409276                 add     esi, 10h
.text:00409279                 mov     ds:dword_40F290[esi], ebp
.text:0040927F                 mov     edi, ebp
.text:00409281                 sar     edi, 1Fh
.text:00409284                 mov     ds:dword_40F294[esi], edi
.text:0040928A                 call    sub_4074F0
.text:0040928F                 mov     ds:dword_40F298[esi], eax
.text:00409295                 xor     ecx, ecx
.text:00409297                 mov     [esp+2Ch+Str], ebx ; Str
.text:0040929A                 mov     ds:dword_40F29C[esi], ecx
.text:004092A0                 mov     [esp+2Ch+Val], 0 ; Val
.text:004092A8                 call    strchr
.text:004092AD                 mov     ebx, eax
.text:004092AF                 inc     ebx
.text:004092B0                 jz      short loc_4092BC
.text:004092B2                 movzx   edx, byte ptr [eax+1]
.text:004092B6                 test    dl, dl
.text:004092B8                 mov     cl, dl
.text:004092BA                 jnz     short loc_409270
.text:004092BC
.text:004092BC loc_4092BC:                             ; CODE XREF: sub_4091C0+A2↑j
.text:004092BC                                         ; sub_4091C0+AE↑j ...
.text:004092BC                 mov     [esp+2Ch+Str], ebx ; Block
.text:004092BF                 mov     esi, 1
.text:004092C4                 mov     ds:dword_40F270, esi
.text:004092CA                 call    free
.text:004092CF                 jmp     loc_4091E6
.text:004092D4 ; ---------------------------------------------------------------------------
.text:004092D4
.text:004092D4 loc_4092D4:                             ; CODE XREF: sub_4091C0+16↑j
.text:004092D4                 movsx   eax, byte_40E070
.text:004092DB                 jmp     loc_409239
.text:004092DB sub_4091C0      endp
.text:004092DB
.text:004092DB ; ---------------------------------------------------------------------------
.text:004092E0 dword_4092E0    dd 5C3A20h, 5C3A43h, 26B48D90h, 0
.text:004092E0                                         ; DATA XREF: .text:00409303↓o
.text:004092E0                                         ; .text:004093E3↓o
.text:004092F0 ; ---------------------------------------------------------------------------
.text:004092F0                 sub     esp, 1Ch
.text:004092F3                 mov     [esp+14h], esi
.text:004092F7                 mov     esi, [esp+20h]
.text:004092FB                 mov     [esp+18h], edi
.text:004092FF                 mov     [esp+10h], ebx
.text:00409303                 mov     dword ptr [esp], offset dword_4092E0
.text:0040930A                 call    _strdup
.text:0040930F                 mov     [esp], esi
.text:00409312                 mov     edi, eax
.text:00409314                 call    sub_4091C0
.text:00409319                 mov     [edi], al
.text:0040931B                 test    al, al
.text:0040931D                 jz      short loc_409331
.text:0040931F                 mov     eax, edi
.text:00409321                 mov     ebx, [esp+10h]
.text:00409325                 mov     esi, [esp+14h]
.text:00409329                 mov     edi, [esp+18h]
.text:0040932D                 add     esp, 1Ch
.text:00409330                 retn
.text:00409331 ; ---------------------------------------------------------------------------
.text:00409331
.text:00409331 loc_409331:                             ; CODE XREF: .text:0040931D↑j
.text:00409331                 mov     [esp], edi
.text:00409334                 call    free
.text:00409339                 mov     dword ptr [esp+4], 0
.text:00409341                 mov     dword ptr [esp], 0
.text:00409348                 call    GetCurrentDirectoryA
.text:0040934D                 sub     esp, 8
.text:00409350                 lea     esi, [eax+1]
.text:00409353                 mov     [esp], esi
.text:00409356                 call    malloc
.text:0040935B                 mov     [esp+4], eax
.text:0040935F                 mov     edi, eax
.text:00409361                 mov     [esp], esi
.text:00409364                 call    GetCurrentDirectoryA
.text:00409369                 sub     esp, 8
.text:0040936C                 test    eax, eax
.text:0040936E                 jnz     short loc_409390
.text:00409370                 mov     dword ptr [esp+20h], 4092E4h
.text:00409378                 mov     ebx, [esp+10h]
.text:0040937C                 mov     esi, [esp+14h]
.text:00409380                 mov     edi, [esp+18h]
.text:00409384                 add     esp, 1Ch
.text:00409387                 jmp     _strdup
.text:00409387 ; ---------------------------------------------------------------------------
.text:0040938C                 align 10h
.text:00409390
.text:00409390 loc_409390:                             ; CODE XREF: .text:0040936E↑j
.text:00409390                 mov     [esp+20h], edi
.text:00409394                 mov     ebx, [esp+10h]
.text:00409398                 mov     esi, [esp+14h]
.text:0040939C                 mov     edi, [esp+18h]
.text:004093A0                 add     esp, 1Ch
.text:004093A3                 jmp     sub_4090A0
.text:004093A3 ; ---------------------------------------------------------------------------
.text:004093A8                 align 10h
.text:004093B0                 sub     esp, 7Ch
.text:004093B3                 lea     edx, [esp+10h]
.text:004093B7                 mov     [esp+8], edx
.text:004093BB                 mov     edx, [esp+80h]
.text:004093C2                 mov     [esp+70h], ebx
.text:004093C6                 mov     [esp+74h], esi
.text:004093CA                 mov     [esp+4], edx
.text:004093CE                 mov     [esp+78h], edi
.text:004093D2                 mov     dword ptr [esp], 0
.text:004093D9                 call    sub_40AAA0
.text:004093DE                 xor     edx, edx
.text:004093E0                 inc     eax
.text:004093E1                 jz      short loc_409405
.text:004093E3                 mov     dword ptr [esp], offset dword_4092E0
.text:004093EA                 mov     esi, [esp+20h]
.text:004093EE                 call    _strdup
.text:004093F3                 mov     edi, eax
.text:004093F5                 mov     [esp], esi
.text:004093F8                 call    sub_4091C0
.text:004093FD                 mov     [edi], al
.text:004093FF                 test    al, al
.text:00409401                 mov     edx, edi
.text:00409403                 jz      short loc_409417
.text:00409405
.text:00409405 loc_409405:                             ; CODE XREF: .text:004093E1↑j
.text:00409405                                         ; .text:00409464↓j
.text:00409405                 mov     ebx, [esp+70h]
.text:00409409                 mov     eax, edx
.text:0040940B                 mov     esi, [esp+74h]
.text:0040940F                 mov     edi, [esp+78h]
.text:00409413                 add     esp, 7Ch
.text:00409416                 retn
.text:00409417 ; ---------------------------------------------------------------------------
.text:00409417
.text:00409417 loc_409417:                             ; CODE XREF: .text:00409403↑j
.text:00409417                 mov     [esp], edi
.text:0040941A                 call    free
.text:0040941F                 mov     dword ptr [esp+4], 0
.text:00409427                 mov     dword ptr [esp], 0
.text:0040942E                 call    GetCurrentDirectoryA
.text:00409433                 sub     esp, 8
.text:00409436                 lea     esi, [eax+1]
.text:00409439                 mov     [esp], esi
.text:0040943C                 call    malloc
.text:00409441                 mov     [esp+4], eax
.text:00409445                 mov     edi, eax
.text:00409447                 mov     [esp], esi
.text:0040944A                 call    GetCurrentDirectoryA
.text:0040944F                 sub     esp, 8
.text:00409452                 test    eax, eax
.text:00409454                 jnz     short loc_409466
.text:00409456                 mov     dword ptr [esp], 4092E4h
.text:0040945D                 call    _strdup
.text:00409462
.text:00409462 loc_409462:                             ; CODE XREF: .text:0040946E↓j
.text:00409462                 mov     edx, eax
.text:00409464                 jmp     short loc_409405
.text:00409466 ; ---------------------------------------------------------------------------
.text:00409466
.text:00409466 loc_409466:                             ; CODE XREF: .text:00409454↑j
.text:00409466                 mov     [esp], edi
.text:00409469                 call    sub_4090A0
.text:0040946E                 jmp     short loc_409462
.text:00409470
.text:00409470 ; =============== S U B R O U T I N E =======================================
.text:00409470
.text:00409470
.text:00409470 ; int __cdecl sub_409470(LPCSTR)
.text:00409470 sub_409470      proc near               ; CODE XREF: sub_4069A0+12F↑p
.text:00409470
.text:00409470 String1         = dword ptr -1Ch
.text:00409470 String2         = dword ptr -18h
.text:00409470 var_C           = dword ptr -0Ch
.text:00409470 var_8           = dword ptr -8
.text:00409470 var_4           = dword ptr -4
.text:00409470 arg_0           = dword ptr  4
.text:00409470
.text:00409470                 sub     esp, 1Ch
.text:00409473                 mov     [esp+1Ch+var_4], edi
.text:00409477                 mov     edi, [esp+1Ch+arg_0]
.text:0040947B                 mov     [esp+1Ch+var_C], ebx
.text:0040947F                 mov     [esp+1Ch+var_8], esi
.text:00409483                 mov     [esp+1Ch+String1], edi ; LPCSTR
.text:00409486                 call    sub_408E70
.text:0040948B                 mov     [esp+1Ch+String1], edi ; LPCSTR
.text:0040948E                 mov     esi, eax
.text:00409490                 call    sub_4090A0
.text:00409495                 mov     [esp+1Ch+String2], eax ; String2
.text:00409499                 mov     ebx, eax
.text:0040949B                 mov     [esp+1Ch+String1], esi ; String1
.text:0040949E                 call    _stricmp
.text:004094A3                 test    eax, eax
.text:004094A5                 setz    dl
.text:004094A8                 test    esi, esi
.text:004094AA                 movzx   edi, dl
.text:004094AD                 jz      short loc_4094B7
.text:004094AF                 mov     [esp+1Ch+String1], esi ; Block
.text:004094B2                 call    free
.text:004094B7
.text:004094B7 loc_4094B7:                             ; CODE XREF: sub_409470+3D↑j
.text:004094B7                 test    ebx, ebx
.text:004094B9                 jz      short loc_4094C3
.text:004094BB                 mov     [esp+1Ch+String1], ebx ; Block
.text:004094BE                 call    free
.text:004094C3
.text:004094C3 loc_4094C3:                             ; CODE XREF: sub_409470+49↑j
.text:004094C3                 mov     eax, edi
.text:004094C5                 mov     ebx, [esp+1Ch+var_C]
.text:004094C9                 mov     esi, [esp+1Ch+var_8]
.text:004094CD                 mov     edi, [esp+1Ch+var_4]
.text:004094D1                 add     esp, 1Ch
.text:004094D4                 retn
.text:004094D4 sub_409470      endp
.text:004094D4
.text:004094D4 ; ---------------------------------------------------------------------------
.text:004094D5                 align 10h
.text:004094E0 aKernel32_0     db 'KERNEL32',0         ; DATA XREF: .text:00409531↓o
.text:004094E9 aGetdiskfreespa db 'GetDiskFreeSpaceExA',0
.text:004094E9                                         ; DATA XREF: .text:00409542↓o
.text:004094FD ; const CHAR FileName[]
.text:004094FD FileName        db '\\.\vwin32',0       ; DATA XREF: .text:0040968C↓o
.text:004094FD                                         ; sub_409AC0+17C↓o
.text:00409508 ; ---------------------------------------------------------------------------
.text:00409508
.text:00409508 loc_409508:                             ; DATA XREF: .text:004097A2↓o
.text:00409508                 dec     esi
.text:00409509                 push    esp
.text:0040950A                 inc     esi
.text:0040950B                 push    ebx
.text:0040950C                 add     [esi+41h], al
.text:0040950F                 push    esp
.text:00409510                 xor     esi, [edx]
.text:00409512                 add     [esi+41h], al
.text:00409515                 push    esp
.text:00409516                 add     [ebx+44h], al
.text:00409519                 inc     esi
.text:0040951A                 push    ebx
.text:0040951B
.text:0040951B loc_40951B:                             ; CODE XREF: sub_409AC0+101↓p
.text:0040951B                 add     [ebp+55002674h], cl
.text:00409521                 push    edi
.text:00409522                 push    esi
.text:00409523                 push    ebx
.text:00409524                 sub     esp, 8BCh
.text:0040952A                 mov     ebp, [esp+8D0h]
.text:00409531                 mov     dword ptr [esp], offset aKernel32_0 ; "KERNEL32"
.text:00409538                 call    LoadLibraryA
.text:0040953D                 sub     esp, 4
.text:00409540                 mov     edi, eax
.text:00409542                 mov     dword ptr [esp+4], offset aGetdiskfreespa ; "GetDiskFreeSpaceExA"
.text:0040954A                 mov     [esp], eax
.text:0040954D                 call    GetProcAddress
.text:00409552                 sub     esp, 8
.text:00409555                 mov     esi, eax
.text:00409557                 test    ebp, ebp
.text:00409559                 mov     dword ptr [esp+20h], 0
.text:00409561                 jz      loc_409AA1
.text:00409567                 mov     [esp], ebp
.text:0040956A                 call    sub_406120
.text:0040956F                 mov     [esp], eax
.text:00409572                 mov     ebp, eax
.text:00409574                 call    strlen
.text:00409579                 cmp     byte ptr [eax+ebp-1], 5Ch ; '\'
.text:0040957E                 mov     ebx, eax
.text:00409580                 jz      short loc_40959C
.text:00409582                 mov     [esp], ebp
.text:00409585                 lea     edx, [eax+1]
.text:00409588                 mov     [esp+4], edx
.text:0040958C                 call    realloc
.text:00409591                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:00409595                 mov     ebp, eax
.text:00409597                 mov     byte ptr [ebx+eax+1], 0
.text:0040959C
.text:0040959C loc_40959C:                             ; CODE XREF: .text:00409580↑j
.text:0040959C                 mov     dword ptr [esp+1Ch], 400h
.text:004095A4                 lea     edx, [esp+0B0h]
.text:004095AB                 lea     ebx, [esp+5Ch]
.text:004095AF                 mov     [esp+18h], edx
.text:004095B3                 lea     ecx, [esp+58h]
.text:004095B7                 lea     edx, [esp+54h]
.text:004095BB                 mov     [esp+14h], ebx
.text:004095BF                 lea     eax, [esp+4B0h]
.text:004095C6                 mov     [esp+10h], ecx
.text:004095CA                 mov     [esp+0Ch], edx
.text:004095CE                 mov     dword ptr [esp+8], 400h
.text:004095D6                 mov     [esp+4], eax
.text:004095DA                 mov     [esp], ebp
.text:004095DD                 call    GetVolumeInformationA
.text:004095E2                 sub     esp, 20h
.text:004095E5                 test    eax, eax
.text:004095E7                 jz      loc_409A7E
.text:004095ED                 test    esi, esi
.text:004095EF                 jz      short loc_409615
.text:004095F1                 mov     [esp], ebp
.text:004095F4                 lea     edx, [esp+48h]
.text:004095F8                 lea     ebx, [esp+40h]
.text:004095FC                 mov     [esp+0Ch], edx
.text:00409600                 lea     ecx, [esp+38h]
.text:00409604                 mov     [esp+8], ebx
.text:00409608                 mov     [esp+4], ecx
.text:0040960C                 call    esi
.text:0040960E                 sub     esp, 10h
.text:00409611                 mov     [esp+20h], eax
.text:00409615
.text:00409615 loc_409615:                             ; CODE XREF: .text:004095EF↑j
.text:00409615                 test    edi, edi
.text:00409617                 jz      short loc_409624
.text:00409619                 mov     [esp], edi
.text:0040961C                 call    FreeLibrary
.text:00409621                 sub     esp, 4
.text:00409624
.text:00409624 loc_409624:                             ; CODE XREF: .text:00409617↑j
.text:00409624                 call    sub_408B90
.text:00409629                 test    eax, eax
.text:0040962B                 lea     esi, [esp+28h]
.text:0040962F                 jz      loc_409A60
.text:00409635                 call    sub_408B90
.text:0040963A                 test    eax, eax
.text:0040963C                 jz      short loc_40964C
.text:0040963E                 call    sub_408AE0
.text:00409643                 cmp     eax, 0Bh
.text:00409646                 jle     loc_409A34
.text:0040964C
.text:0040964C loc_40964C:                             ; CODE XREF: .text:0040963C↑j
.text:0040964C                 cld
.text:0040964D                 xor     eax, eax
.text:0040964F                 lea     ebx, [esp+60h]
.text:00409653                 mov     ecx, 7
.text:00409658                 mov     edi, ebx
.text:0040965A                 rep stosd
.text:0040965C                 mov     dword ptr [esp+18h], 0
.text:00409664                 mov     dword ptr [esp+14h], 4000000h
.text:0040966C                 mov     dword ptr [esp+10h], 0
.text:00409674                 mov     dword ptr [esp+0Ch], 0
.text:0040967C                 mov     dword ptr [esp+8], 0
.text:00409684                 mov     dword ptr [esp+4], 0
.text:0040968C                 mov     dword ptr [esp], offset FileName ; "\\\\.\\vwin32"
.text:00409693                 call    CreateFileA
.text:00409698                 sub     esp, 1Ch
.text:0040969B                 mov     edi, eax
.text:0040969D                 cmp     eax, 0FFFFFFFFh
.text:004096A0                 jz      short loc_409720
.text:004096A2                 mov     [esp+10h], ebx
.text:004096A6                 lea     edx, [esp+80h]
.text:004096AD                 lea     ecx, [esp+24h]
.text:004096B1                 mov     [esp+70h], edx
.text:004096B5                 mov     [esp+18h], ecx
.text:004096B9                 mov     [esp+8], ebx
.text:004096BD                 mov     dword ptr [esp+6Ch], 7303h
.text:004096C5                 mov     dword ptr [esp+68h], 2Ch ; ','
.text:004096CD                 mov     [esp+64h], ebp
.text:004096D1                 mov     dword ptr [esp+78h], 1
.text:004096D9                 mov     dword ptr [esp+1Ch], 0
.text:004096E1                 mov     dword ptr [esp+14h], 1Ch
.text:004096E9                 mov     dword ptr [esp+0Ch], 1Ch
.text:004096F1                 mov     dword ptr [esp+4], 6
.text:004096F9                 mov     [esp], eax
.text:004096FC                 call    DeviceIoControl
.text:00409701                 sub     esp, 20h
.text:00409704                 mov     ebx, eax
.text:00409706                 mov     [esp], edi
.text:00409709                 call    CloseHandle
.text:0040970E                 sub     esp, 4
.text:00409711                 test    ebx, ebx
.text:00409713                 jz      short loc_409720
.text:00409715                 test    byte ptr [esp+78h], 1
.text:0040971A                 jz      loc_409A00
.text:00409720
.text:00409720 loc_409720:                             ; CODE XREF: .text:004096A0↑j
.text:00409720                                         ; .text:00409713↑j
.text:00409720                 call    sub_4067D0
.text:00409725                 mov     edi, eax
.text:00409727                 call    _errno
.text:0040972C                 mov     [eax], edi
.text:0040972E                 xor     eax, eax
.text:00409730
.text:00409730 loc_409730:                             ; CODE XREF: .text:00409A2F↓j
.text:00409730                                         ; .text:00409A5B↓j
.text:00409730                 test    eax, eax
.text:00409732                 jnz     short loc_409754
.text:00409734                 mov     dword ptr [esp+34h], 1
.text:0040973C                 mov     dword ptr [esp+30h], 200h
.text:00409744                 mov     dword ptr [esp+2Ch], 0
.text:0040974C                 mov     dword ptr [esp+28h], 0
.text:00409754
.text:00409754 loc_409754:                             ; CODE XREF: .text:00409732↑j
.text:00409754                 mov     edx, [esp+30h]
.text:00409758                 mov     edi, [esp+34h]
.text:0040975C                 mov     ecx, [esp+20h]
.text:00409760                 imul    edi, edx
.text:00409763                 test    ecx, ecx
.text:00409765                 jnz     short loc_40978D
.text:00409767                 mov     eax, [esp+28h]
.text:0040976B                 mul     edi
.text:0040976D                 mov     esi, eax
.text:0040976F                 mov     eax, [esp+2Ch]
.text:00409773                 mov     [esp+44h], edx
.text:00409777                 mov     [esp+40h], esi
.text:0040977B                 mul     edi
.text:0040977D                 mov     [esp+48h], eax
.text:00409781                 mov     [esp+4Ch], edx
.text:00409785                 mov     [esp+38h], eax
.text:00409789                 mov     [esp+3Ch], edx
.text:0040978D
.text:0040978D loc_40978D:                             ; CODE XREF: .text:00409765↑j
.text:0040978D                 mov     ebx, [esp+5Ch]
.text:00409791                 lea     edx, [esp+0B0h]
.text:00409798                 mov     ecx, [esp+8D4h]
.text:0040979F                 mov     [ecx+48h], ebx
.text:004097A2                 mov     dword ptr [esp+4], offset loc_409508
.text:004097AA                 mov     [esp], edx
.text:004097AD                 call    _stricmp
.text:004097B2                 test    eax, eax
.text:004097B4                 jnz     loc_409970
.text:004097BA                 mov     esi, [esp+8D4h]
.text:004097C1                 mov     dword ptr [esi], 5346544Eh
.text:004097C7
.text:004097C7 loc_4097C7:                             ; CODE XREF: .text:00409998↓j
.text:004097C7                                         ; .text:004099C5↓j ...
.text:004097C7                 mov     ebx, [esp+30h]
.text:004097CB                 mov     esi, [esp+8D4h]
.text:004097D2                 mov     [esi+4], ebx
.text:004097D5                 mov     [esi+8], ebx
.text:004097D8                 mov     ebx, [esi+8]
.text:004097DB                 mov     [esi+0Ch], edi
.text:004097DE                 mov     ecx, [esp+44h]
.text:004097E2                 xor     esi, esi
.text:004097E4                 mov     [esp+8], ebx
.text:004097E8                 mov     edx, [esp+40h]
.text:004097EC                 mov     [esp+0Ch], esi
.text:004097F0                 mov     [esp+4], ecx
.text:004097F4                 mov     [esp], edx
.text:004097F7                 call    sub_40CD80
.text:004097FC                 mov     ecx, [esp+8D4h]
.text:00409803                 mov     [ecx+10h], eax
.text:00409806                 mov     [ecx+14h], edx
.text:00409809                 mov     ecx, [esp+4Ch]
.text:0040980D                 mov     [esp+8], ebx
.text:00409811                 mov     edx, [esp+48h]
.text:00409815                 mov     [esp+0Ch], esi
.text:00409819                 mov     [esp+4], ecx
.text:0040981D                 mov     [esp], edx
.text:00409820                 call    sub_40CD80
.text:00409825                 mov     ecx, [esp+8D4h]
.text:0040982C                 mov     [ecx+18h], eax
.text:0040982F                 mov     [ecx+1Ch], edx
.text:00409832                 mov     ecx, [esp+38h]
.text:00409836                 mov     [esp+8], ebx
.text:0040983A                 mov     ebx, [esp+3Ch]
.text:0040983E                 mov     [esp+0Ch], esi
.text:00409842                 mov     [esp], ecx
.text:00409845                 mov     [esp+4], ebx
.text:00409849                 call    sub_40CD80
.text:0040984E                 mov     esi, [esp+8D4h]
.text:00409855                 mov     [esi+20h], eax
.text:00409858                 mov     [esi+24h], edx
.text:0040985B                 mov     ecx, [esp+44h]
.text:0040985F                 mov     esi, edi
.text:00409861                 mov     [esp+8], esi
.text:00409865                 mov     edx, [esp+40h]
.text:00409869                 xor     edi, edi
.text:0040986B                 mov     [esp+0Ch], edi
.text:0040986F                 mov     [esp+4], ecx
.text:00409873                 mov     [esp], edx
.text:00409876                 call    sub_40CD80
.text:0040987B                 mov     ebx, [esp+8D4h]
.text:00409882                 mov     [ebx+28h], eax
.text:00409885                 mov     [ebx+2Ch], edx
.text:00409888                 mov     ecx, [esp+4Ch]
.text:0040988C                 mov     [esp+8], esi
.text:00409890                 mov     edx, [esp+48h]
.text:00409894                 mov     [esp+0Ch], edi
.text:00409898                 mov     [esp+4], ecx
.text:0040989C                 mov     [esp], edx
.text:0040989F                 call    sub_40CD80
.text:004098A4                 mov     ebx, [esp+8D4h]
.text:004098AB                 mov     [ebx+30h], eax
.text:004098AE                 mov     [ebx+34h], edx
.text:004098B1                 mov     ecx, [esp+3Ch]
.text:004098B5                 mov     [esp+8], esi
.text:004098B9                 mov     edx, [esp+38h]
.text:004098BD                 mov     [esp+0Ch], edi
.text:004098C1                 mov     [esp+4], ecx
.text:004098C5                 mov     [esp], edx
.text:004098C8                 call    sub_40CD80
.text:004098CD                 mov     edx, [esp+8D4h]
.text:004098D4                 lea     ecx, [esp+0B0h]
.text:004098DB                 mov     [edx+38h], eax
.text:004098DE                 mov     esi, [esp+58h]
.text:004098E2                 mov     dword ptr [edx+44h], 0FFFFFFFFh
.text:004098E9                 mov     [edx+110h], esi
.text:004098EF                 mov     esi, edx
.text:004098F1                 add     esi, 4Ch ; 'L'
.text:004098F4                 movzx   ebx, word ptr [esp+56h]
.text:004098F9                 movzx   edi, word ptr [esp+54h]
.text:004098FE                 mov     [edx+3Ch], ebx
.text:00409901                 lea     ebx, [esp+4B0h]
.text:00409908                 mov     [edx+40h], edi
.text:0040990B                 mov     [esp+4], ecx
.text:0040990F                 mov     dword ptr [esp+8], 10h
.text:00409917                 mov     [esp], esi
.text:0040991A                 call    strncpy
.text:0040991F                 mov     dword ptr [esp+8], 5Ah ; 'Z'
.text:00409927                 mov     edi, [esp+8D4h]
.text:0040992E                 mov     [esp+4], ebx
.text:00409932                 add     edi, 5Ch ; '\'
.text:00409935                 mov     [esp], edi
.text:00409938                 call    strncpy
.text:0040993D                 mov     [esp+4], ebp
.text:00409941                 mov     ebp, [esp+8D4h]
.text:00409948                 mov     dword ptr [esp+8], 5Ah ; 'Z'
.text:00409950                 add     ebp, 0B6h ; '¶'
.text:00409956                 mov     [esp], ebp
.text:00409959                 call    strncpy
.text:0040995E                 xor     eax, eax
.text:00409960
.text:00409960 loc_409960:                             ; CODE XREF: .text:00409A9C↓j
.text:00409960                 add     esp, 8BCh
.text:00409966                 pop     ebx
.text:00409967                 pop     esi
.text:00409968                 pop     edi
.text:00409969                 pop     ebp
.text:0040996A                 retn
.text:0040996A ; ---------------------------------------------------------------------------
.text:0040996B                 align 10h
.text:00409970
.text:00409970 loc_409970:                             ; CODE XREF: .text:004097B4↑j
.text:00409970                 mov     dword ptr [esp+4], 40950Dh
.text:00409978                 lea     eax, [esp+0B0h]
.text:0040997F                 mov     [esp], eax
.text:00409982                 call    _stricmp
.text:00409987                 test    eax, eax
.text:00409989                 jnz     short loc_40999D
.text:0040998B                 mov     edx, [esp+8D4h]
.text:00409992                 mov     dword ptr [edx], 4008h
.text:00409998                 jmp     loc_4097C7
.text:0040999D ; ---------------------------------------------------------------------------
.text:0040999D
.text:0040999D loc_40999D:                             ; CODE XREF: .text:00409989↑j
.text:0040999D                 mov     dword ptr [esp+4], 409513h
.text:004099A5                 lea     ecx, [esp+0B0h]
.text:004099AC                 mov     [esp], ecx
.text:004099AF                 call    _stricmp
.text:004099B4                 test    eax, eax
.text:004099B6                 jnz     short loc_4099CA
.text:004099B8                 mov     ebx, [esp+8D4h]
.text:004099BF                 mov     dword ptr [ebx], 4006h
.text:004099C5                 jmp     loc_4097C7
.text:004099CA ; ---------------------------------------------------------------------------
.text:004099CA
.text:004099CA loc_4099CA:                             ; CODE XREF: .text:004099B6↑j
.text:004099CA                 mov     dword ptr [esp+4], 409517h
.text:004099D2                 lea     eax, [esp+0B0h]
.text:004099D9                 mov     [esp], eax
.text:004099DC                 call    _stricmp
.text:004099E1                 test    eax, eax
.text:004099E3                 mov     esi, [esp+8D4h]
.text:004099EA                 setnz   cl
.text:004099ED                 movzx   edx, cl
.text:004099F0                 dec     edx
.text:004099F1                 and     edx, 4000h
.text:004099F7                 mov     [esi], edx
.text:004099F9                 jmp     loc_4097C7
.text:004099F9 ; ---------------------------------------------------------------------------
.text:004099FE                 align 10h
.text:00409A00
.text:00409A00 loc_409A00:                             ; CODE XREF: .text:0040971A↑j
.text:00409A00                 mov     edi, [esp+84h]
.text:00409A07                 mov     eax, 1
.text:00409A0C                 mov     edx, [esp+88h]
.text:00409A13                 mov     ecx, [esp+8Ch]
.text:00409A1A                 mov     ebx, [esp+90h]
.text:00409A21                 mov     [esp+34h], edi
.text:00409A25                 mov     [esp+30h], edx
.text:00409A29                 mov     [esp+2Ch], ecx
.text:00409A2D                 mov     [esi], ebx
.text:00409A2F                 jmp     loc_409730
.text:00409A34 ; ---------------------------------------------------------------------------
.text:00409A34
.text:00409A34 loc_409A34:                             ; CODE XREF: .text:00409646↑j
.text:00409A34                 mov     [esp+10h], esi
.text:00409A38                 lea     eax, [esp+2Ch]
.text:00409A3C                 lea     esi, [esp+30h]
.text:00409A40                 mov     [esp+0Ch], eax
.text:00409A44                 lea     edi, [esp+34h]
.text:00409A48                 mov     [esp+8], esi
.text:00409A4C                 mov     [esp+4], edi
.text:00409A50
.text:00409A50 loc_409A50:                             ; CODE XREF: .text:00409A7C↓j
.text:00409A50                 mov     [esp], ebp
.text:00409A53                 call    GetDiskFreeSpaceA
.text:00409A58                 sub     esp, 14h
.text:00409A5B                 jmp     loc_409730
.text:00409A60 ; ---------------------------------------------------------------------------
.text:00409A60
.text:00409A60 loc_409A60:                             ; CODE XREF: .text:0040962F↑j
.text:00409A60                 mov     [esp+10h], esi
.text:00409A64                 lea     ebx, [esp+2Ch]
.text:00409A68                 lea     eax, [esp+30h]
.text:00409A6C                 mov     [esp+0Ch], ebx
.text:00409A70                 lea     esi, [esp+34h]
.text:00409A74                 mov     [esp+8], eax
.text:00409A78                 mov     [esp+4], esi
.text:00409A7C                 jmp     short loc_409A50
.text:00409A7E ; ---------------------------------------------------------------------------
.text:00409A7E
.text:00409A7E loc_409A7E:                             ; CODE XREF: .text:004095E7↑j
.text:00409A7E                 mov     [esp], edi
.text:00409A81                 call    FreeLibrary
.text:00409A86                 sub     esp, 4
.text:00409A89                 call    sub_4067D0
.text:00409A8E                 mov     esi, eax
.text:00409A90                 call    _errno
.text:00409A95                 mov     [eax], esi
.text:00409A97
.text:00409A97 loc_409A97:                             ; CODE XREF: .text:00409AB7↓j
.text:00409A97                 mov     eax, 0FFFFFFFFh
.text:00409A9C                 jmp     loc_409960
.text:00409AA1 ; ---------------------------------------------------------------------------
.text:00409AA1
.text:00409AA1 loc_409AA1:                             ; CODE XREF: .text:00409561↑j
.text:00409AA1                 mov     [esp], edi
.text:00409AA4                 call    FreeLibrary
.text:00409AA9                 sub     esp, 4
.text:00409AAC                 call    _errno
.text:00409AB1                 mov     dword ptr [eax], 2
.text:00409AB7                 jmp     short loc_409A97
.text:00409AB7 ; ---------------------------------------------------------------------------
.text:00409AB9                 align 10h
.text:00409AC0
.text:00409AC0 ; =============== S U B R O U T I N E =======================================
.text:00409AC0
.text:00409AC0
.text:00409AC0 ; int __cdecl sub_409AC0(LPCSTR, LPDWORD, LPDWORD, LPDWORD, LPDWORD)
.text:00409AC0 sub_409AC0      proc near               ; CODE XREF: sub_406FF0+2C7↑p
.text:00409AC0                                         ; .text:0040762A↑p
.text:00409AC0
.text:00409AC0 lpFileName      = dword ptr -9Ch
.text:00409AC0 dwDesiredAccess = dword ptr -98h
.text:00409AC0 dwShareMode     = dword ptr -94h
.text:00409AC0 lpSecurityAttributes= dword ptr -90h
.text:00409AC0 dwCreationDisposition= dword ptr -8Ch
.text:00409AC0 dwFlagsAndAttributes= dword ptr -88h
.text:00409AC0 hTemplateFile   = dword ptr -84h
.text:00409AC0 lpOverlapped    = dword ptr -80h
.text:00409AC0 BytesReturned   = dword ptr -70h
.text:00409AC0 InBuffer        = byte ptr -6Ch
.text:00409AC0 var_68          = dword ptr -68h
.text:00409AC0 var_64          = dword ptr -64h
.text:00409AC0 var_60          = dword ptr -60h
.text:00409AC0 var_5C          = dword ptr -5Ch
.text:00409AC0 var_54          = dword ptr -54h
.text:00409AC0 var_4C          = byte ptr -4Ch
.text:00409AC0 var_48          = dword ptr -48h
.text:00409AC0 var_44          = dword ptr -44h
.text:00409AC0 var_40          = dword ptr -40h
.text:00409AC0 var_3C          = dword ptr -3Ch
.text:00409AC0 lpRootPathName  = dword ptr -2Ch
.text:00409AC0 lpSectorsPerCluster= dword ptr -28h
.text:00409AC0 lpBytesPerSector= dword ptr -24h
.text:00409AC0 lpNumberOfFreeClusters= dword ptr -20h
.text:00409AC0 lpTotalNumberOfClusters= dword ptr -1Ch
.text:00409AC0 var_18          = dword ptr -18h
.text:00409AC0 var_14          = dword ptr -14h
.text:00409AC0 var_10          = dword ptr -10h
.text:00409AC0 var_C           = dword ptr -0Ch
.text:00409AC0 var_8           = dword ptr -8
.text:00409AC0 var_4           = dword ptr -4
.text:00409AC0 arg_0           = dword ptr  4
.text:00409AC0 arg_4           = dword ptr  8
.text:00409AC0 arg_8           = dword ptr  0Ch
.text:00409AC0 arg_C           = dword ptr  10h
.text:00409AC0 arg_10          = dword ptr  14h
.text:00409AC0
.text:00409AC0                 sub     esp, 2Ch
.text:00409AC3                 mov     edx, [esp+2Ch+arg_0]
.text:00409AC7                 mov     [esp+2Ch+var_10], ebx
.text:00409ACB                 mov     ebx, [esp+2Ch+arg_10]
.text:00409ACF                 mov     [esp+2Ch+var_C], esi
.text:00409AD3                 mov     esi, [esp+2Ch+arg_C]
.text:00409AD7                 mov     [esp+2Ch+var_8], edi
.text:00409ADB                 mov     edi, [esp+2Ch+arg_8]
.text:00409ADF                 mov     [esp+2Ch+var_4], ebp
.text:00409AE3                 mov     ebp, [esp+2Ch+arg_4]
.text:00409AE7                 mov     [esp+2Ch+var_14], edx
.text:00409AEB                 call    sub_408B90
.text:00409AF0                 test    eax, eax
.text:00409AF2                 jz      short loc_409B24
.text:00409AF4                 mov     [esp+2Ch+arg_10], ebx
.text:00409AF8                 mov     edx, [esp+2Ch+var_14]
.text:00409AFC                 mov     ebx, [esp+2Ch+var_10]
.text:00409B00                 mov     [esp+2Ch+arg_C], esi
.text:00409B04                 mov     esi, [esp+2Ch+var_C]
.text:00409B08                 mov     [esp+2Ch+arg_8], edi
.text:00409B0C                 mov     edi, [esp+2Ch+var_8]
.text:00409B10                 mov     [esp+2Ch+arg_4], ebp
.text:00409B14                 mov     ebp, [esp+2Ch+var_4]
.text:00409B18                 mov     [esp+2Ch+arg_0], edx
.text:00409B1C                 add     esp, 2Ch
.text:00409B1F                 jmp     loc_409BD0
.text:00409B24 ; ---------------------------------------------------------------------------
.text:00409B24
.text:00409B24 loc_409B24:                             ; CODE XREF: sub_409AC0+32↑j
.text:00409B24                 mov     [esp+2Ch+lpTotalNumberOfClusters], ebx ; lpTotalNumberOfClusters
.text:00409B28                 mov     ecx, [esp+2Ch+var_14]
.text:00409B2C                 mov     [esp+2Ch+lpNumberOfFreeClusters], esi ; lpNumberOfFreeClusters
.text:00409B30                 mov     [esp+2Ch+lpBytesPerSector], edi ; lpBytesPerSector
.text:00409B34                 mov     [esp+2Ch+lpSectorsPerCluster], ebp ; lpSectorsPerCluster
.text:00409B38                 mov     [esp+2Ch+lpRootPathName], ecx ; lpRootPathName
.text:00409B3B                 call    GetDiskFreeSpaceA
.text:00409B40                 sub     esp, 14h
.text:00409B43                 mov     ebx, [esp+2Ch+var_10]
.text:00409B47                 mov     esi, [esp+2Ch+var_C]
.text:00409B4B                 mov     edi, [esp+2Ch+var_8]
.text:00409B4F                 mov     ebp, [esp+2Ch+var_4]
.text:00409B53                 add     esp, 2Ch
.text:00409B56                 retn
.text:00409B56 ; ---------------------------------------------------------------------------
.text:00409B57                 align 10h
.text:00409B60
.text:00409B60 loc_409B60:                             ; CODE XREF: .text:00409DCD↓p
.text:00409B60                 sub     esp, 1Ch
.text:00409B63                 mov     [esp+1Ch+var_4], esi
.text:00409B67                 mov     esi, [esp+1Ch+arg_0]
.text:00409B6B                 mov     [esp+1Ch+var_8], ebx
.text:00409B6F                 mov     [esp+1Ch+lpTotalNumberOfClusters], esi ; LPCSTR
.text:00409B72                 call    sub_4090A0
.text:00409B77                 test    eax, eax
.text:00409B79                 mov     ebx, eax
.text:00409B7B                 jz      short loc_409B90
.text:00409B7D                 cmp     byte ptr [eax], 0
.text:00409B80                 jz      short loc_409B90
.text:00409B82                 test    esi, esi
.text:00409B84                 jz      short loc_409B90
.text:00409B86                 cmp     byte ptr [esi], 0
.text:00409B89                 jnz     short loc_409BB6
.text:00409B8B                 nop
.text:00409B8C                 lea     esi, [esi+0]
.text:00409B90
.text:00409B90 loc_409B90:                             ; CODE XREF: sub_409AC0+BB↑j
.text:00409B90                                         ; sub_409AC0+C0↑j ...
.text:00409B90                 call    _errno
.text:00409B95                 mov     dword ptr [eax], 2
.text:00409B9B                 mov     esi, 0FFFFFFFFh
.text:00409BA0
.text:00409BA0 loc_409BA0:                             ; CODE XREF: sub_409AC0+108↓j
.text:00409BA0                 mov     [esp+1Ch+lpTotalNumberOfClusters], ebx ; Block
.text:00409BA3                 call    free
.text:00409BA8                 mov     eax, esi
.text:00409BAA                 mov     ebx, [esp+1Ch+var_8]
.text:00409BAE                 mov     esi, [esp+1Ch+var_4]
.text:00409BB2                 add     esp, 1Ch
.text:00409BB5                 retn
.text:00409BB6 ; ---------------------------------------------------------------------------
.text:00409BB6
.text:00409BB6 loc_409BB6:                             ; CODE XREF: sub_409AC0+C9↑j
.text:00409BB6                 mov     [esp+1Ch+lpTotalNumberOfClusters], eax
.text:00409BB9                 mov     edx, [esp+1Ch+arg_4]
.text:00409BBD                 mov     [esp+1Ch+var_18], edx
.text:00409BC1                 call    near ptr loc_40951B+5
.text:00409BC6                 mov     esi, eax
.text:00409BC8                 jmp     short loc_409BA0
.text:00409BC8 ; ---------------------------------------------------------------------------
.text:00409BCA                 align 10h
.text:00409BD0
.text:00409BD0 loc_409BD0:                             ; CODE XREF: sub_409AC0+5F↑j
.text:00409BD0                 push    ebp
.text:00409BD1                 push    edi
.text:00409BD2                 push    esi
.text:00409BD3                 push    ebx
.text:00409BD4                 sub     esp, 8Ch
.text:00409BDA                 mov     ebp, [esp+9Ch+arg_0]
.text:00409BE1                 call    sub_408B90
.text:00409BE6                 test    eax, eax
.text:00409BE8                 jz      short loc_409BF8
.text:00409BEA                 call    sub_408AE0
.text:00409BEF                 cmp     eax, 0Bh
.text:00409BF2                 jle     loc_409D20
.text:00409BF8
.text:00409BF8 loc_409BF8:                             ; CODE XREF: sub_409AC0+128↑j
.text:00409BF8                 cld
.text:00409BF9                 xor     eax, eax
.text:00409BFB                 lea     ebx, [esp+9Ch+InBuffer]
.text:00409BFF                 mov     ecx, 7
.text:00409C04                 mov     edi, ebx
.text:00409C06                 lea     esi, [esp+9Ch+var_4C]
.text:00409C0A                 rep stosd
.text:00409C0C                 mov     [esp+9Ch+hTemplateFile], 0 ; hTemplateFile
.text:00409C14                 mov     [esp+9Ch+dwFlagsAndAttributes], 4000000h ; dwFlagsAndAttributes
.text:00409C1C                 mov     [esp+9Ch+dwCreationDisposition], 0 ; dwCreationDisposition
.text:00409C24                 mov     [esp+9Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:00409C2C                 mov     [esp+9Ch+dwShareMode], 0 ; dwShareMode
.text:00409C34                 mov     [esp+9Ch+dwDesiredAccess], 0 ; dwDesiredAccess
.text:00409C3C                 mov     [esp+9Ch+lpFileName], offset FileName ; "\\\\.\\vwin32"
.text:00409C43                 call    CreateFileA
.text:00409C48                 sub     esp, 1Ch
.text:00409C4B                 mov     edi, eax
.text:00409C4D                 cmp     eax, 0FFFFFFFFh
.text:00409C50                 jz      short loc_409CC5
.text:00409C52                 mov     [esp+9Ch+var_68], ebp
.text:00409C56                 lea     ebp, [esp+9Ch+BytesReturned]
.text:00409C5A                 mov     [esp+9Ch+var_5C], esi
.text:00409C5E                 mov     [esp+9Ch+var_60], 7303h
.text:00409C66                 mov     [esp+9Ch+var_64], 2Ch ; ','
.text:00409C6E                 mov     [esp+9Ch+var_54], 1
.text:00409C76                 mov     [esp+9Ch+lpOverlapped], 0 ; lpOverlapped
.text:00409C7E                 mov     [esp+9Ch+hTemplateFile], ebp ; lpBytesReturned
.text:00409C82                 mov     [esp+9Ch+dwFlagsAndAttributes], 1Ch ; nOutBufferSize
.text:00409C8A                 mov     [esp+9Ch+dwCreationDisposition], ebx ; lpOutBuffer
.text:00409C8E                 mov     [esp+9Ch+lpSecurityAttributes], 1Ch ; nInBufferSize
.text:00409C96                 mov     [esp+9Ch+dwShareMode], ebx ; lpInBuffer
.text:00409C9A                 mov     [esp+9Ch+dwDesiredAccess], 6 ; dwIoControlCode
.text:00409CA2                 mov     [esp+9Ch+lpFileName], eax ; hDevice
.text:00409CA5                 call    DeviceIoControl
.text:00409CAA                 sub     esp, 20h
.text:00409CAD                 mov     esi, eax
.text:00409CAF                 mov     [esp+9Ch+lpFileName], edi ; hObject
.text:00409CB2                 call    CloseHandle
.text:00409CB7                 sub     esp, 4
.text:00409CBA                 test    esi, esi
.text:00409CBC                 jz      short loc_409CC5
.text:00409CBE                 test    byte ptr [esp+9Ch+var_54], 1
.text:00409CC3                 jz      short loc_409CE0
.text:00409CC5
.text:00409CC5 loc_409CC5:                             ; CODE XREF: sub_409AC0+190↑j
.text:00409CC5                                         ; sub_409AC0+1FC↑j
.text:00409CC5                 call    sub_4067D0
.text:00409CCA                 mov     edi, eax
.text:00409CCC                 call    _errno
.text:00409CD1                 mov     [eax], edi
.text:00409CD3                 xor     eax, eax
.text:00409CD5
.text:00409CD5 loc_409CD5:                             ; CODE XREF: sub_409AC0+25A↓j
.text:00409CD5                                         ; sub_409AC0+297↓j
.text:00409CD5                 add     esp, 8Ch
.text:00409CDB                 pop     ebx
.text:00409CDC                 pop     esi
.text:00409CDD                 pop     edi
.text:00409CDE                 pop     ebp
.text:00409CDF                 retn
.text:00409CE0 ; ---------------------------------------------------------------------------
.text:00409CE0
.text:00409CE0 loc_409CE0:                             ; CODE XREF: sub_409AC0+203↑j
.text:00409CE0                 mov     edx, [esp+9Ch+var_48]
.text:00409CE4                 mov     eax, 1
.text:00409CE9                 mov     ebx, [esp+9Ch+arg_4]
.text:00409CF0                 mov     ebp, [esp+9Ch+arg_8]
.text:00409CF7                 mov     ecx, [esp+9Ch+arg_C]
.text:00409CFE                 mov     [ebx], edx
.text:00409D00                 mov     edi, [esp+9Ch+var_44]
.text:00409D04                 mov     ebx, [esp+9Ch+arg_10]
.text:00409D0B                 mov     [ebp+0], edi
.text:00409D0E                 mov     esi, [esp+9Ch+var_40]
.text:00409D12                 mov     [ecx], esi
.text:00409D14                 mov     edx, [esp+9Ch+var_3C]
.text:00409D18                 mov     [ebx], edx
.text:00409D1A                 jmp     short loc_409CD5
.text:00409D1A ; ---------------------------------------------------------------------------
.text:00409D1C                 align 10h
.text:00409D20
.text:00409D20 loc_409D20:                             ; CODE XREF: sub_409AC0+132↑j
.text:00409D20                 mov     [esp+9Ch+lpFileName], ebp ; lpRootPathName
.text:00409D23                 mov     eax, [esp+9Ch+arg_C]
.text:00409D2A                 mov     ecx, [esp+9Ch+arg_10]
.text:00409D31                 mov     edx, [esp+9Ch+arg_8]
.text:00409D38                 mov     [esp+9Ch+lpSecurityAttributes], eax ; lpNumberOfFreeClusters
.text:00409D3C                 mov     eax, [esp+9Ch+arg_4]
.text:00409D43                 mov     [esp+9Ch+dwCreationDisposition], ecx ; lpTotalNumberOfClusters
.text:00409D47                 mov     [esp+9Ch+dwShareMode], edx ; lpBytesPerSector
.text:00409D4B                 mov     [esp+9Ch+dwDesiredAccess], eax ; lpSectorsPerCluster
.text:00409D4F                 call    GetDiskFreeSpaceA
.text:00409D54                 sub     esp, 14h
.text:00409D57                 jmp     loc_409CD5
.text:00409D57 sub_409AC0      endp ; sp-analysis failed
.text:00409D57
.text:00409D57 ; ---------------------------------------------------------------------------
.text:00409D5C                 align 10h
.text:00409D60 aNotset         db 'notset',0           ; DATA XREF: .data:off_40E080↓o
.text:00409D60                                         ; .data:off_40E084↓o
.text:00409D67 ; ---------------------------------------------------------------------------
.text:00409D67
.text:00409D67 loc_409D67:                             ; DATA XREF: .text:loc_409E05↓o
.text:00409D67                 jb      short loc_409DE0
.text:00409D69                 add     [eax], ah
.text:00409D6B                 or      [eax], eax
.text:00409D6D
.text:00409D6D loc_409D6D:                             ; DATA XREF: .text:00409E58↓o
.text:00409D6D                                         ; .text:00409EBE↓o ...
.text:00409D6D                 add     [eax], ah
.text:00409D6F                 and     eax, 64252064h
.text:00409D74                 and     [eax], al
.text:00409D76                 lea     esi, [esi+0]
.text:00409D79                 lea     edi, [edi+0]
.text:00409D80                 push    ebp
.text:00409D81                 push    edi
.text:00409D82                 push    esi
.text:00409D83                 push    ebx
.text:00409D84                 sub     esp, 14Ch
.text:00409D8A                 mov     edx, off_40E080 ; "notset"
.text:00409D90                 mov     edi, [esp+164h]
.text:00409D97                 mov     ebp, [esp+168h]
.text:00409D9E                 mov     [esp+4], edx
.text:00409DA2                 mov     edx, off_40E084 ; "notset"
.text:00409DA8                 mov     [esp], edx
.text:00409DAB                 call    strcmp
.text:00409DB0                 test    eax, eax
.text:00409DB2                 jz      loc_40A1A0
.text:00409DB8
.text:00409DB8 loc_409DB8:                             ; CODE XREF: .text:0040A1EC↓j
.text:00409DB8                 lea     ebx, [esp+20h]
.text:00409DBC                 lea     esi, [esi+0]
.text:00409DC0
.text:00409DC0 loc_409DC0:                             ; CODE XREF: .text:00409DF6↓j
.text:00409DC0                 mov     [esp+4], ebx
.text:00409DC4                 mov     ecx, off_40E084 ; "notset"
.text:00409DCA                 mov     [esp], ecx
.text:00409DCD                 call    loc_409B60
.text:00409DD2                 test    eax, eax
.text:00409DD4                 jns     short loc_409E05
.text:00409DD6                 mov     eax, off_40E084 ; "notset"
.text:00409DDB                 cmp     byte ptr [eax], 0
.text:00409DDE                 jz      short loc_409DF8
.text:00409DE0
.text:00409DE0 loc_409DE0:                             ; CODE XREF: .text:loc_409D67↑j
.text:00409DE0                 mov     dword ptr [esp+4], 0
.text:00409DE8                 mov     [esp], eax
.text:00409DEB                 call    strchr
.text:00409DF0                 inc     eax
.text:00409DF1                 mov     off_40E084, eax ; "notset"
.text:00409DF6                 jmp     short loc_409DC0
.text:00409DF8 ; ---------------------------------------------------------------------------
.text:00409DF8
.text:00409DF8 loc_409DF8:                             ; CODE XREF: .text:00409DDE↑j
.text:00409DF8                 xor     eax, eax
.text:00409DFA
.text:00409DFA loc_409DFA:                             ; CODE XREF: .text:00409FBC↓j
.text:00409DFA                 add     esp, 14Ch
.text:00409E00                 pop     ebx
.text:00409E01                 pop     esi
.text:00409E02                 pop     edi
.text:00409E03                 pop     ebp
.text:00409E04                 retn
.text:00409E05 ; ---------------------------------------------------------------------------
.text:00409E05
.text:00409E05 loc_409E05:                             ; CODE XREF: .text:00409DD4↑j
.text:00409E05                 mov     dword ptr [edi+0Ch], offset loc_409D67
.text:00409E0C                 lea     ecx, [esp+0D6h]
.text:00409E13                 lea     edx, [esp+6Ch]
.text:00409E17                 mov     [edi+4], ecx
.text:00409E1A                 lea     ebx, [esp+7Ch]
.text:00409E1E                 mov     [edi+8], edx
.text:00409E21                 mov     [edi], ebx
.text:00409E23                 mov     [esp], ebp
.text:00409E26                 mov     [esp+4], edi
.text:00409E2A                 call    ___addmntentstr
.text:00409E2F                 mov     [esp], ebp
.text:00409E32                 mov     dword ptr [esp+4], 409D6Ah
.text:00409E3A                 call    strspn
.text:00409E3F                 mov     dword ptr [esp+4], 0
.text:00409E47                 mov     ebx, off_40E084 ; "notset"
.text:00409E4D                 lea     esi, [eax+ebp]
.text:00409E50                 mov     [esp+1Ch], esi
.text:00409E54                 lea     ebp, [esp+1Ch]
.text:00409E58                 mov     esi, offset loc_409D6D
.text:00409E5D                 mov     [esp], ebx
.text:00409E60                 call    strchr
.text:00409E65                 mov     dword ptr [esp+4], 409D6Ah
.text:00409E6D                 inc     eax
.text:00409E6E                 mov     off_40E084, eax ; "notset"
.text:00409E73                 mov     [esp], ebp
.text:00409E76                 call    sub_40ABC0
.text:00409E7B                 test    eax, eax
.text:00409E7D                 mov     ebx, eax
.text:00409E7F                 jz      short loc_409EA8
.text:00409E81                 mov     edx, eax
.text:00409E83                 mov     ecx, eax
.text:00409E85                 lea     esi, [esi+0]
.text:00409E89                 lea     edi, [edi+0]
.text:00409E90
.text:00409E90 loc_409E90:                             ; CODE XREF: .text:00409EA6↓j
.text:00409E90                 movzx   eax, byte ptr [edx]
.text:00409E93                 cmp     al, 5Ch ; '\'
.text:00409E95                 jz      loc_40A144
.text:00409E9B
.text:00409E9B loc_409E9B:                             ; CODE XREF: .text:0040A14C↓j
.text:00409E9B                                         ; .text:0040A15A↓j ...
.text:00409E9B                 mov     [ecx], al
.text:00409E9D
.text:00409E9D loc_409E9D:                             ; CODE XREF: .text:0040A16E↓j
.text:00409E9D                 inc     ecx
.text:00409E9E
.text:00409E9E loc_409E9E:                             ; CODE XREF: .text:0040A186↓j
.text:00409E9E                 movzx   eax, byte ptr [edx]
.text:00409EA1                 mov     esi, ebx
.text:00409EA3                 inc     edx
.text:00409EA4                 test    al, al
.text:00409EA6                 jnz     short loc_409E90
.text:00409EA8
.text:00409EA8 loc_409EA8:                             ; CODE XREF: .text:00409E7F↑j
.text:00409EA8                 mov     [edi], esi
.text:00409EAA                 mov     eax, [esp+1Ch]
.text:00409EAE                 test    eax, eax
.text:00409EB0                 jnz     loc_40A12B
.text:00409EB6
.text:00409EB6 loc_409EB6:                             ; CODE XREF: .text:0040A13F↓j
.text:00409EB6                 mov     dword ptr [esp+4], 409D6Ah
.text:00409EBE                 mov     esi, offset loc_409D6D
.text:00409EC3                 mov     [esp], ebp
.text:00409EC6                 call    sub_40ABC0
.text:00409ECB                 test    eax, eax
.text:00409ECD                 mov     ebx, eax
.text:00409ECF                 jz      short loc_409EF8
.text:00409ED1                 mov     edx, eax
.text:00409ED3                 mov     ecx, eax
.text:00409ED5                 lea     esi, [esi+0]
.text:00409ED9                 lea     edi, [edi+0]
.text:00409EE0
.text:00409EE0 loc_409EE0:                             ; CODE XREF: .text:00409EF6↓j
.text:00409EE0                 movzx   eax, byte ptr [edx]
.text:00409EE3                 cmp     al, 5Ch ; '\'
.text:00409EE5                 jz      loc_40A0D3
.text:00409EEB
.text:00409EEB loc_409EEB:                             ; CODE XREF: .text:0040A0DB↓j
.text:00409EEB                                         ; .text:0040A0E9↓j ...
.text:00409EEB                 mov     [ecx], al
.text:00409EED
.text:00409EED loc_409EED:                             ; CODE XREF: .text:0040A0FD↓j
.text:00409EED                 inc     ecx
.text:00409EEE
.text:00409EEE loc_409EEE:                             ; CODE XREF: .text:0040A115↓j
.text:00409EEE                 movzx   eax, byte ptr [edx]
.text:00409EF1                 mov     esi, ebx
.text:00409EF3                 inc     edx
.text:00409EF4                 test    al, al
.text:00409EF6                 jnz     short loc_409EE0
.text:00409EF8
.text:00409EF8 loc_409EF8:                             ; CODE XREF: .text:00409ECF↑j
.text:00409EF8                 mov     [edi+4], esi
.text:00409EFB                 mov     eax, [esp+1Ch]
.text:00409EFF                 test    eax, eax
.text:00409F01                 jnz     loc_40A0BA
.text:00409F07
.text:00409F07 loc_409F07:                             ; CODE XREF: .text:0040A0CE↓j
.text:00409F07                 mov     dword ptr [esp+4], 409D6Ah
.text:00409F0F                 mov     esi, offset loc_409D6D
.text:00409F14                 mov     [esp], ebp
.text:00409F17                 call    sub_40ABC0
.text:00409F1C                 test    eax, eax
.text:00409F1E                 mov     ebx, eax
.text:00409F20                 jz      short loc_409F48
.text:00409F22                 mov     edx, eax
.text:00409F24                 mov     ecx, eax
.text:00409F26                 lea     esi, [esi+0]
.text:00409F29                 lea     edi, [edi+0]
.text:00409F30
.text:00409F30 loc_409F30:                             ; CODE XREF: .text:00409F46↓j
.text:00409F30                 movzx   eax, byte ptr [edx]
.text:00409F33                 cmp     al, 5Ch ; '\'
.text:00409F35                 jz      loc_40A062
.text:00409F3B
.text:00409F3B loc_409F3B:                             ; CODE XREF: .text:0040A06A↓j
.text:00409F3B                                         ; .text:0040A078↓j ...
.text:00409F3B                 mov     [ecx], al
.text:00409F3D
.text:00409F3D loc_409F3D:                             ; CODE XREF: .text:0040A08C↓j
.text:00409F3D                 inc     ecx
.text:00409F3E
.text:00409F3E loc_409F3E:                             ; CODE XREF: .text:0040A0A4↓j
.text:00409F3E                 movzx   eax, byte ptr [edx]
.text:00409F41                 mov     esi, ebx
.text:00409F43                 inc     edx
.text:00409F44                 test    al, al
.text:00409F46                 jnz     short loc_409F30
.text:00409F48
.text:00409F48 loc_409F48:                             ; CODE XREF: .text:00409F20↑j
.text:00409F48                 mov     [edi+8], esi
.text:00409F4B                 mov     eax, [esp+1Ch]
.text:00409F4F                 test    eax, eax
.text:00409F51                 jnz     loc_40A049
.text:00409F57
.text:00409F57 loc_409F57:                             ; CODE XREF: .text:0040A05D↓j
.text:00409F57                 mov     dword ptr [esp+4], 409D6Ah
.text:00409F5F                 mov     esi, offset loc_409D6D
.text:00409F64                 mov     [esp], ebp
.text:00409F67                 call    sub_40ABC0
.text:00409F6C                 test    eax, eax
.text:00409F6E                 mov     ebx, eax
.text:00409F70                 jz      short loc_409F94
.text:00409F72                 mov     edx, eax
.text:00409F74                 mov     ecx, eax
.text:00409F76                 lea     esi, [esi+0]
.text:00409F79                 lea     edi, [edi+0]
.text:00409F80
.text:00409F80 loc_409F80:                             ; CODE XREF: .text:00409F92↓j
.text:00409F80                 movzx   eax, byte ptr [edx]
.text:00409F83                 cmp     al, 5Ch ; '\'
.text:00409F85                 jz      short loc_409FF5
.text:00409F87
.text:00409F87 loc_409F87:                             ; CODE XREF: .text:00409FFD↓j
.text:00409F87                                         ; .text:0040A007↓j ...
.text:00409F87                 mov     [ecx], al
.text:00409F89
.text:00409F89 loc_409F89:                             ; CODE XREF: .text:0040A01B↓j
.text:00409F89                 inc     ecx
.text:00409F8A
.text:00409F8A loc_409F8A:                             ; CODE XREF: .text:0040A033↓j
.text:00409F8A                 movzx   eax, byte ptr [edx]
.text:00409F8D                 mov     esi, ebx
.text:00409F8F                 inc     edx
.text:00409F90                 test    al, al
.text:00409F92                 jnz     short loc_409F80
.text:00409F94
.text:00409F94 loc_409F94:                             ; CODE XREF: .text:00409F70↑j
.text:00409F94                 mov     [edi+0Ch], esi
.text:00409F97                 xor     eax, eax
.text:00409F99                 mov     edx, [esp+1Ch]
.text:00409F9D                 test    edx, edx
.text:00409F9F                 jnz     short loc_409FD5
.text:00409FA1
.text:00409FA1 loc_409FA1:                             ; CODE XREF: .text:00409FF3↓j
.text:00409FA1                 cmp     eax, 1
.text:00409FA4                 jz      short loc_409FCC
.text:00409FA6                 cmp     eax, 1
.text:00409FA9                 jle     short loc_409FC1
.text:00409FAB
.text:00409FAB loc_409FAB:                             ; CODE XREF: .text:00409FC3↓j
.text:00409FAB                                         ; .text:00409FD3↓j
.text:00409FAB                 mov     edx, [esp+160h]
.text:00409FB2                 mov     [esp], edx
.text:00409FB5                 call    sub_40AB60
.text:00409FBA                 mov     eax, edi
.text:00409FBC                 jmp     loc_409DFA
.text:00409FC1 ; ---------------------------------------------------------------------------
.text:00409FC1
.text:00409FC1 loc_409FC1:                             ; CODE XREF: .text:00409FA9↑j
.text:00409FC1                 test    eax, eax
.text:00409FC3                 jnz     short loc_409FAB
.text:00409FC5                 mov     dword ptr [edi+10h], 0
.text:00409FCC
.text:00409FCC loc_409FCC:                             ; CODE XREF: .text:00409FA4↑j
.text:00409FCC                 mov     dword ptr [edi+14h], 0
.text:00409FD3                 jmp     short loc_409FAB
.text:00409FD5 ; ---------------------------------------------------------------------------
.text:00409FD5
.text:00409FD5 loc_409FD5:                             ; CODE XREF: .text:00409F9F↑j
.text:00409FD5                 mov     dword ptr [esp+4], 409D6Eh
.text:00409FDD                 lea     esi, [edi+14h]
.text:00409FE0                 lea     ebp, [edi+10h]
.text:00409FE3                 mov     [esp+0Ch], esi
.text:00409FE7                 mov     [esp+8], ebp
.text:00409FEB                 mov     [esp], edx
.text:00409FEE                 call    sscanf
.text:00409FF3                 jmp     short loc_409FA1
.text:00409FF5 ; ---------------------------------------------------------------------------
.text:00409FF5
.text:00409FF5 loc_409FF5:                             ; CODE XREF: .text:00409F85↑j
.text:00409FF5                 cmp     byte ptr [edx+1], 30h ; '0'
.text:00409FF9                 jz      short loc_40A038
.text:00409FFB
.text:00409FFB loc_409FFB:                             ; CODE XREF: .text:0040A03C↓j
.text:00409FFB                                         ; .text:0040A042↓j
.text:00409FFB                 cmp     al, 5Ch ; '\'
.text:00409FFD                 jnz     short loc_409F87
.text:00409FFF                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040A003                 jz      short loc_40A020
.text:0040A005
.text:0040A005 loc_40A005:                             ; CODE XREF: .text:0040A024↓j
.text:0040A005                                         ; .text:0040A02A↓j
.text:0040A005                 cmp     al, 5Ch ; '\'
.text:0040A007                 jnz     loc_409F87
.text:0040A00D                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:0040A011                 jnz     loc_409F87
.text:0040A017                 mov     byte ptr [ecx], 5Ch ; '\'
.text:0040A01A                 inc     edx
.text:0040A01B                 jmp     loc_409F89
.text:0040A020 ; ---------------------------------------------------------------------------
.text:0040A020
.text:0040A020 loc_40A020:                             ; CODE XREF: .text:0040A003↑j
.text:0040A020                 cmp     byte ptr [edx+2], 31h ; '1'
.text:0040A024                 jnz     short loc_40A005
.text:0040A026                 cmp     byte ptr [edx+3], 32h ; '2'
.text:0040A02A                 jnz     short loc_40A005
.text:0040A02C                 mov     byte ptr [ecx], 9
.text:0040A02F
.text:0040A02F loc_40A02F:                             ; CODE XREF: .text:0040A047↓j
.text:0040A02F                 inc     ecx
.text:0040A030                 add     edx, 3
.text:0040A033                 jmp     loc_409F8A
.text:0040A038 ; ---------------------------------------------------------------------------
.text:0040A038
.text:0040A038 loc_40A038:                             ; CODE XREF: .text:00409FF9↑j
.text:0040A038                 cmp     byte ptr [edx+2], 34h ; '4'
.text:0040A03C                 jnz     short loc_409FFB
.text:0040A03E                 cmp     byte ptr [edx+3], 30h ; '0'
.text:0040A042                 jnz     short loc_409FFB
.text:0040A044                 mov     byte ptr [ecx], 20h ; ' '
.text:0040A047                 jmp     short loc_40A02F
.text:0040A049 ; ---------------------------------------------------------------------------
.text:0040A049
.text:0040A049 loc_40A049:                             ; CODE XREF: .text:00409F51↑j
.text:0040A049                 mov     dword ptr [esp+4], 409D6Ah
.text:0040A051                 mov     [esp], eax
.text:0040A054                 call    strspn
.text:0040A059                 add     [esp+1Ch], eax
.text:0040A05D                 jmp     loc_409F57
.text:0040A062 ; ---------------------------------------------------------------------------
.text:0040A062
.text:0040A062 loc_40A062:                             ; CODE XREF: .text:00409F35↑j
.text:0040A062                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040A066                 jz      short loc_40A0A9
.text:0040A068
.text:0040A068 loc_40A068:                             ; CODE XREF: .text:0040A0AD↓j
.text:0040A068                                         ; .text:0040A0B3↓j
.text:0040A068                 cmp     al, 5Ch ; '\'
.text:0040A06A                 jnz     loc_409F3B
.text:0040A070                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040A074                 jz      short loc_40A091
.text:0040A076
.text:0040A076 loc_40A076:                             ; CODE XREF: .text:0040A095↓j
.text:0040A076                                         ; .text:0040A09B↓j
.text:0040A076                 cmp     al, 5Ch ; '\'
.text:0040A078                 jnz     loc_409F3B
.text:0040A07E                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:0040A082                 jnz     loc_409F3B
.text:0040A088                 mov     byte ptr [ecx], 5Ch ; '\'
.text:0040A08B                 inc     edx
.text:0040A08C                 jmp     loc_409F3D
.text:0040A091 ; ---------------------------------------------------------------------------
.text:0040A091
.text:0040A091 loc_40A091:                             ; CODE XREF: .text:0040A074↑j
.text:0040A091                 cmp     byte ptr [edx+2], 31h ; '1'
.text:0040A095                 jnz     short loc_40A076
.text:0040A097                 cmp     byte ptr [edx+3], 32h ; '2'
.text:0040A09B                 jnz     short loc_40A076
.text:0040A09D                 mov     byte ptr [ecx], 9
.text:0040A0A0
.text:0040A0A0 loc_40A0A0:                             ; CODE XREF: .text:0040A0B8↓j
.text:0040A0A0                 inc     ecx
.text:0040A0A1                 add     edx, 3
.text:0040A0A4                 jmp     loc_409F3E
.text:0040A0A9 ; ---------------------------------------------------------------------------
.text:0040A0A9
.text:0040A0A9 loc_40A0A9:                             ; CODE XREF: .text:0040A066↑j
.text:0040A0A9                 cmp     byte ptr [edx+2], 34h ; '4'
.text:0040A0AD                 jnz     short loc_40A068
.text:0040A0AF                 cmp     byte ptr [edx+3], 30h ; '0'
.text:0040A0B3                 jnz     short loc_40A068
.text:0040A0B5                 mov     byte ptr [ecx], 20h ; ' '
.text:0040A0B8                 jmp     short loc_40A0A0
.text:0040A0BA ; ---------------------------------------------------------------------------
.text:0040A0BA
.text:0040A0BA loc_40A0BA:                             ; CODE XREF: .text:00409F01↑j
.text:0040A0BA                 mov     dword ptr [esp+4], 409D6Ah
.text:0040A0C2                 mov     [esp], eax
.text:0040A0C5                 call    strspn
.text:0040A0CA                 add     [esp+1Ch], eax
.text:0040A0CE                 jmp     loc_409F07
.text:0040A0D3 ; ---------------------------------------------------------------------------
.text:0040A0D3
.text:0040A0D3 loc_40A0D3:                             ; CODE XREF: .text:00409EE5↑j
.text:0040A0D3                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040A0D7                 jz      short loc_40A11A
.text:0040A0D9
.text:0040A0D9 loc_40A0D9:                             ; CODE XREF: .text:0040A11E↓j
.text:0040A0D9                                         ; .text:0040A124↓j
.text:0040A0D9                 cmp     al, 5Ch ; '\'
.text:0040A0DB                 jnz     loc_409EEB
.text:0040A0E1                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040A0E5                 jz      short loc_40A102
.text:0040A0E7
.text:0040A0E7 loc_40A0E7:                             ; CODE XREF: .text:0040A106↓j
.text:0040A0E7                                         ; .text:0040A10C↓j
.text:0040A0E7                 cmp     al, 5Ch ; '\'
.text:0040A0E9                 jnz     loc_409EEB
.text:0040A0EF                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:0040A0F3                 jnz     loc_409EEB
.text:0040A0F9                 mov     byte ptr [ecx], 5Ch ; '\'
.text:0040A0FC                 inc     edx
.text:0040A0FD                 jmp     loc_409EED
.text:0040A102 ; ---------------------------------------------------------------------------
.text:0040A102
.text:0040A102 loc_40A102:                             ; CODE XREF: .text:0040A0E5↑j
.text:0040A102                 cmp     byte ptr [edx+2], 31h ; '1'
.text:0040A106                 jnz     short loc_40A0E7
.text:0040A108                 cmp     byte ptr [edx+3], 32h ; '2'
.text:0040A10C                 jnz     short loc_40A0E7
.text:0040A10E                 mov     byte ptr [ecx], 9
.text:0040A111
.text:0040A111 loc_40A111:                             ; CODE XREF: .text:0040A129↓j
.text:0040A111                 inc     ecx
.text:0040A112                 add     edx, 3
.text:0040A115                 jmp     loc_409EEE
.text:0040A11A ; ---------------------------------------------------------------------------
.text:0040A11A
.text:0040A11A loc_40A11A:                             ; CODE XREF: .text:0040A0D7↑j
.text:0040A11A                 cmp     byte ptr [edx+2], 34h ; '4'
.text:0040A11E                 jnz     short loc_40A0D9
.text:0040A120                 cmp     byte ptr [edx+3], 30h ; '0'
.text:0040A124                 jnz     short loc_40A0D9
.text:0040A126                 mov     byte ptr [ecx], 20h ; ' '
.text:0040A129                 jmp     short loc_40A111
.text:0040A12B ; ---------------------------------------------------------------------------
.text:0040A12B
.text:0040A12B loc_40A12B:                             ; CODE XREF: .text:00409EB0↑j
.text:0040A12B                 mov     dword ptr [esp+4], 409D6Ah
.text:0040A133                 mov     [esp], eax
.text:0040A136                 call    strspn
.text:0040A13B                 add     [esp+1Ch], eax
.text:0040A13F                 jmp     loc_409EB6
.text:0040A144 ; ---------------------------------------------------------------------------
.text:0040A144
.text:0040A144 loc_40A144:                             ; CODE XREF: .text:00409E95↑j
.text:0040A144                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040A148                 jz      short loc_40A18B
.text:0040A14A
.text:0040A14A loc_40A14A:                             ; CODE XREF: .text:0040A18F↓j
.text:0040A14A                                         ; .text:0040A195↓j
.text:0040A14A                 cmp     al, 5Ch ; '\'
.text:0040A14C                 jnz     loc_409E9B
.text:0040A152                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040A156                 jz      short loc_40A173
.text:0040A158
.text:0040A158 loc_40A158:                             ; CODE XREF: .text:0040A177↓j
.text:0040A158                                         ; .text:0040A17D↓j
.text:0040A158                 cmp     al, 5Ch ; '\'
.text:0040A15A                 jnz     loc_409E9B
.text:0040A160                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:0040A164                 jnz     loc_409E9B
.text:0040A16A                 mov     byte ptr [ecx], 5Ch ; '\'
.text:0040A16D                 inc     edx
.text:0040A16E                 jmp     loc_409E9D
.text:0040A173 ; ---------------------------------------------------------------------------
.text:0040A173
.text:0040A173 loc_40A173:                             ; CODE XREF: .text:0040A156↑j
.text:0040A173                 cmp     byte ptr [edx+2], 31h ; '1'
.text:0040A177                 jnz     short loc_40A158
.text:0040A179                 cmp     byte ptr [edx+3], 32h ; '2'
.text:0040A17D                 jnz     short loc_40A158
.text:0040A17F                 mov     byte ptr [ecx], 9
.text:0040A182
.text:0040A182 loc_40A182:                             ; CODE XREF: .text:0040A19A↓j
.text:0040A182                 inc     ecx
.text:0040A183                 add     edx, 3
.text:0040A186                 jmp     loc_409E9E
.text:0040A18B ; ---------------------------------------------------------------------------
.text:0040A18B
.text:0040A18B loc_40A18B:                             ; CODE XREF: .text:0040A148↑j
.text:0040A18B                 cmp     byte ptr [edx+2], 34h ; '4'
.text:0040A18F                 jnz     short loc_40A14A
.text:0040A191                 cmp     byte ptr [edx+3], 30h ; '0'
.text:0040A195                 jnz     short loc_40A14A
.text:0040A197                 mov     byte ptr [ecx], 20h ; ' '
.text:0040A19A                 jmp     short loc_40A182
.text:0040A19A ; ---------------------------------------------------------------------------
.text:0040A19C                 align 10h
.text:0040A1A0
.text:0040A1A0 loc_40A1A0:                             ; CODE XREF: .text:00409DB2↑j
.text:0040A1A0                 mov     dword ptr [esp+4], 0
.text:0040A1A8                 mov     dword ptr [esp], 0
.text:0040A1AF                 call    GetLogicalDriveStringsA
.text:0040A1B4                 sub     esp, 8
.text:0040A1B7                 mov     ebx, eax
.text:0040A1B9                 call    GetProcessHeap
.text:0040A1BE                 mov     [esp], eax
.text:0040A1C1                 mov     [esp+8], ebx
.text:0040A1C5                 mov     dword ptr [esp+4], 0
.text:0040A1CD                 call    HeapAlloc
.text:0040A1D2                 sub     esp, 0Ch
.text:0040A1D5                 mov     esi, eax
.text:0040A1D7                 mov     [esp+4], eax
.text:0040A1DB                 mov     [esp], ebx
.text:0040A1DE                 call    GetLogicalDriveStringsA
.text:0040A1E3                 mov     off_40E084, esi ; "notset"
.text:0040A1E9                 sub     esp, 8
.text:0040A1EC                 jmp     loc_409DB8
.text:0040A1EC ; ---------------------------------------------------------------------------
.text:0040A1F1 ; const char aSSSSDD[]
.text:0040A1F1 aSSSSDD         db '%s %s %s %s %d %d',0Ah,0
.text:0040A1F1                                         ; DATA XREF: .text:0040A330↓o
.text:0040A1F1                                         ; ___addmntentstr+F0↓o
.text:0040A204                 align 10h
.text:0040A210                 push    esi
.text:0040A211                 push    ebx
.text:0040A212                 sub     esp, 44h
.text:0040A215                 mov     ebx, [esp+54h]
.text:0040A219                 mov     esi, [esp+50h]
.text:0040A21D                 mov     edx, [ebx]
.text:0040A21F                 mov     [esp+20h], edx
.text:0040A223                 mov     ecx, [ebx+4]
.text:0040A226                 mov     [esp+24h], ecx
.text:0040A22A                 mov     edx, [ebx+8]
.text:0040A22D                 mov     [esp+28h], edx
.text:0040A231                 mov     ecx, [ebx+0Ch]
.text:0040A234                 mov     [esp+2Ch], ecx
.text:0040A238                 mov     edx, [ebx+10h]
.text:0040A23B                 mov     [esp+30h], edx
.text:0040A23F                 mov     ecx, [ebx+14h]
.text:0040A242                 mov     dword ptr [esp+8], 2
.text:0040A24A                 mov     dword ptr [esp+4], 0
.text:0040A252                 mov     [esp+34h], ecx
.text:0040A256                 mov     [esp], esi
.text:0040A259                 call    sub_40AB50
.text:0040A25E ; ---------------------------------------------------------------------------
.text:0040A25E                 test    eax, eax
.text:0040A260                 mov     edx, 1
.text:0040A265                 jnz     loc_40A365
.text:0040A26B                 mov     ebx, [esp+20h]
.text:0040A26F                 mov     edx, ebx
.text:0040A271                 movzx   eax, byte ptr [ebx]
.text:0040A274                 test    al, al
.text:0040A276                 jz      short loc_40A2A0
.text:0040A278                 nop
.text:0040A279                 lea     esi, [esi+0]
.text:0040A280
.text:0040A280 loc_40A280:                             ; CODE XREF: .text:0040A29E↓j
.text:0040A280                 cmp     al, 20h ; ' '
.text:0040A282                 jz      loc_40A4DA
.text:0040A288                 cmp     al, 9
.text:0040A28A                 jz      loc_40A4DA
.text:0040A290                 cmp     al, 5Ch ; '\'
.text:0040A292                 jz      loc_40A4DA
.text:0040A298                 inc     ebx
.text:0040A299                 movzx   eax, byte ptr [ebx]
.text:0040A29C                 test    al, al
.text:0040A29E                 jnz     short loc_40A280
.text:0040A2A0
.text:0040A2A0 loc_40A2A0:                             ; CODE XREF: .text:0040A276↑j
.text:0040A2A0                                         ; .text:0040A4DC↓j ...
.text:0040A2A0                 mov     ebx, [esp+24h]
.text:0040A2A4                 mov     edx, ebx
.text:0040A2A6                 movzx   eax, byte ptr [ebx]
.text:0040A2A9                 test    al, al
.text:0040A2AB                 jz      short loc_40A2D0
.text:0040A2AD                 lea     esi, [esi+0]
.text:0040A2B0
.text:0040A2B0 loc_40A2B0:                             ; CODE XREF: .text:0040A2CE↓j
.text:0040A2B0                 cmp     al, 20h ; ' '
.text:0040A2B2                 jz      loc_40A45A
.text:0040A2B8                 cmp     al, 9
.text:0040A2BA                 jz      loc_40A45A
.text:0040A2C0                 cmp     al, 5Ch ; '\'
.text:0040A2C2                 jz      loc_40A45A
.text:0040A2C8                 inc     ebx
.text:0040A2C9                 movzx   eax, byte ptr [ebx]
.text:0040A2CC                 test    al, al
.text:0040A2CE                 jnz     short loc_40A2B0
.text:0040A2D0
.text:0040A2D0 loc_40A2D0:                             ; CODE XREF: .text:0040A2AB↑j
.text:0040A2D0                                         ; .text:0040A45C↓j ...
.text:0040A2D0                 mov     ebx, [esp+28h]
.text:0040A2D4                 mov     edx, ebx
.text:0040A2D6                 movzx   eax, byte ptr [ebx]
.text:0040A2D9                 test    al, al
.text:0040A2DB                 jz      short loc_40A300
.text:0040A2DD                 lea     esi, [esi+0]
.text:0040A2E0
.text:0040A2E0 loc_40A2E0:                             ; CODE XREF: .text:0040A2FE↓j
.text:0040A2E0                 cmp     al, 20h ; ' '
.text:0040A2E2                 jz      loc_40A3DE
.text:0040A2E8                 cmp     al, 9
.text:0040A2EA                 jz      loc_40A3DE
.text:0040A2F0                 cmp     al, 5Ch ; '\'
.text:0040A2F2                 jz      loc_40A3DE
.text:0040A2F8                 inc     ebx
.text:0040A2F9                 movzx   eax, byte ptr [ebx]
.text:0040A2FC                 test    al, al
.text:0040A2FE                 jnz     short loc_40A2E0
.text:0040A300
.text:0040A300 loc_40A300:                             ; CODE XREF: .text:0040A2DB↑j
.text:0040A300                                         ; .text:0040A3E0↓j ...
.text:0040A300                 mov     edx, [esp+2Ch]
.text:0040A304                 mov     ebx, edx
.text:0040A306                 movzx   eax, byte ptr [edx]
.text:0040A309                 test    al, al
.text:0040A30B                 jz      short loc_40A324
.text:0040A30D                 lea     esi, [esi+0]
.text:0040A310
.text:0040A310 loc_40A310:                             ; CODE XREF: .text:0040A322↓j
.text:0040A310                 cmp     al, 20h ; ' '
.text:0040A312                 jz      short loc_40A36D
.text:0040A314                 cmp     al, 9
.text:0040A316                 jz      short loc_40A36D
.text:0040A318                 cmp     al, 5Ch ; '\'
.text:0040A31A                 jz      short loc_40A36D
.text:0040A31C                 inc     ebx
.text:0040A31D                 movzx   eax, byte ptr [ebx]
.text:0040A320                 test    al, al
.text:0040A322                 jnz     short loc_40A310
.text:0040A324
.text:0040A324 loc_40A324:                             ; CODE XREF: .text:0040A30B↑j
.text:0040A324                                         ; .text:0040A36F↓j ...
.text:0040A324                 mov     [esp+14h], edx
.text:0040A328                 mov     ecx, [esp+34h]
.text:0040A32C                 mov     ebx, [esp+30h]
.text:0040A330                 mov     dword ptr [esp+4], offset aSSSSDD ; "%s %s %s %s %d %d\n"
.text:0040A338                 mov     edx, [esp+24h]
.text:0040A33C                 mov     [esp+1Ch], ecx
.text:0040A340                 mov     ecx, [esp+28h]
.text:0040A344                 mov     [esp+18h], ebx
.text:0040A348                 mov     ebx, [esp+20h]
.text:0040A34C                 mov     [esp+0Ch], edx
.text:0040A350                 mov     [esp+10h], ecx
.text:0040A354                 mov     [esp+8], ebx
.text:0040A358                 mov     [esp], esi
.text:0040A35B                 call    fprintf
.text:0040A360                 mov     edx, eax
.text:0040A362                 shr     edx, 1Fh
.text:0040A365
.text:0040A365 loc_40A365:                             ; CODE XREF: .text:0040A265↑j
.text:0040A365                 add     esp, 44h
.text:0040A368                 mov     eax, edx
.text:0040A36A                 pop     ebx
.text:0040A36B                 pop     esi
.text:0040A36C                 retn
.text:0040A36D ; ---------------------------------------------------------------------------
.text:0040A36D
.text:0040A36D loc_40A36D:                             ; CODE XREF: .text:0040A312↑j
.text:0040A36D                                         ; .text:0040A316↑j ...
.text:0040A36D                 test    al, al
.text:0040A36F                 jz      short loc_40A324
.text:0040A371                 mov     [esp], edx
.text:0040A374                 mov     ebx, edx
.text:0040A376                 call    strlen
.text:0040A37B                 lea     edx, ds:1[eax*4]
.text:0040A382                 mov     [esp], edx
.text:0040A385                 call    malloc
.text:0040A38A                 mov     [esp+2Ch], eax
.text:0040A38E                 mov     edx, eax
.text:0040A390
.text:0040A390 loc_40A390:                             ; CODE XREF: .text:0040A3A8↓j
.text:0040A390                 movzx   eax, byte ptr [ebx]
.text:0040A393                 cmp     al, 20h ; ' '
.text:0040A395                 jz      short loc_40A3CD
.text:0040A397                 cmp     al, 9
.text:0040A399                 jz      short loc_40A3BC
.text:0040A39B                 cmp     al, 5Ch ; '\'
.text:0040A39D                 jz      short loc_40A3B3
.text:0040A39F                 mov     [edx], al
.text:0040A3A1
.text:0040A3A1 loc_40A3A1:                             ; CODE XREF: .text:0040A3BA↓j
.text:0040A3A1                                         ; .text:0040A3CB↓j ...
.text:0040A3A1                 movzx   ecx, byte ptr [ebx]
.text:0040A3A4                 inc     edx
.text:0040A3A5                 inc     ebx
.text:0040A3A6                 test    cl, cl
.text:0040A3A8                 jnz     short loc_40A390
.text:0040A3AA                 mov     edx, [esp+2Ch]
.text:0040A3AE                 jmp     loc_40A324
.text:0040A3B3 ; ---------------------------------------------------------------------------
.text:0040A3B3
.text:0040A3B3 loc_40A3B3:                             ; CODE XREF: .text:0040A39D↑j
.text:0040A3B3                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A3B6                 inc     edx
.text:0040A3B7                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A3BA                 jmp     short loc_40A3A1
.text:0040A3BC ; ---------------------------------------------------------------------------
.text:0040A3BC
.text:0040A3BC loc_40A3BC:                             ; CODE XREF: .text:0040A399↑j
.text:0040A3BC                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A3BF                 inc     edx
.text:0040A3C0                 mov     byte ptr [edx], 30h ; '0'
.text:0040A3C3                 inc     edx
.text:0040A3C4                 mov     byte ptr [edx], 31h ; '1'
.text:0040A3C7                 inc     edx
.text:0040A3C8                 mov     byte ptr [edx], 32h ; '2'
.text:0040A3CB                 jmp     short loc_40A3A1
.text:0040A3CD ; ---------------------------------------------------------------------------
.text:0040A3CD
.text:0040A3CD loc_40A3CD:                             ; CODE XREF: .text:0040A395↑j
.text:0040A3CD                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A3D0                 inc     edx
.text:0040A3D1                 mov     byte ptr [edx], 30h ; '0'
.text:0040A3D4                 inc     edx
.text:0040A3D5                 mov     byte ptr [edx], 34h ; '4'
.text:0040A3D8                 inc     edx
.text:0040A3D9                 mov     byte ptr [edx], 30h ; '0'
.text:0040A3DC                 jmp     short loc_40A3A1
.text:0040A3DE ; ---------------------------------------------------------------------------
.text:0040A3DE
.text:0040A3DE loc_40A3DE:                             ; CODE XREF: .text:0040A2E2↑j
.text:0040A3DE                                         ; .text:0040A2EA↑j ...
.text:0040A3DE                 test    al, al
.text:0040A3E0                 jz      loc_40A300
.text:0040A3E6                 mov     [esp], edx
.text:0040A3E9                 mov     ebx, edx
.text:0040A3EB                 call    strlen
.text:0040A3F0                 lea     edx, ds:1[eax*4]
.text:0040A3F7                 mov     [esp], edx
.text:0040A3FA                 call    malloc
.text:0040A3FF                 mov     [esp+28h], eax
.text:0040A403                 mov     edx, eax
.text:0040A405                 lea     esi, [esi+0]
.text:0040A409                 lea     edi, [edi+0]
.text:0040A410
.text:0040A410 loc_40A410:                             ; CODE XREF: .text:0040A428↓j
.text:0040A410                 movzx   eax, byte ptr [ebx]
.text:0040A413                 cmp     al, 20h ; ' '
.text:0040A415                 jz      short loc_40A449
.text:0040A417                 cmp     al, 9
.text:0040A419                 jz      short loc_40A438
.text:0040A41B                 cmp     al, 5Ch ; '\'
.text:0040A41D                 jz      short loc_40A42F
.text:0040A41F                 mov     [edx], al
.text:0040A421
.text:0040A421 loc_40A421:                             ; CODE XREF: .text:0040A436↓j
.text:0040A421                                         ; .text:0040A447↓j ...
.text:0040A421                 movzx   ecx, byte ptr [ebx]
.text:0040A424                 inc     edx
.text:0040A425                 inc     ebx
.text:0040A426                 test    cl, cl
.text:0040A428                 jnz     short loc_40A410
.text:0040A42A                 jmp     loc_40A300
.text:0040A42F ; ---------------------------------------------------------------------------
.text:0040A42F
.text:0040A42F loc_40A42F:                             ; CODE XREF: .text:0040A41D↑j
.text:0040A42F                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A432                 inc     edx
.text:0040A433                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A436                 jmp     short loc_40A421
.text:0040A438 ; ---------------------------------------------------------------------------
.text:0040A438
.text:0040A438 loc_40A438:                             ; CODE XREF: .text:0040A419↑j
.text:0040A438                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A43B                 inc     edx
.text:0040A43C                 mov     byte ptr [edx], 30h ; '0'
.text:0040A43F                 inc     edx
.text:0040A440                 mov     byte ptr [edx], 31h ; '1'
.text:0040A443                 inc     edx
.text:0040A444                 mov     byte ptr [edx], 32h ; '2'
.text:0040A447                 jmp     short loc_40A421
.text:0040A449 ; ---------------------------------------------------------------------------
.text:0040A449
.text:0040A449 loc_40A449:                             ; CODE XREF: .text:0040A415↑j
.text:0040A449                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A44C                 inc     edx
.text:0040A44D                 mov     byte ptr [edx], 30h ; '0'
.text:0040A450                 inc     edx
.text:0040A451                 mov     byte ptr [edx], 34h ; '4'
.text:0040A454                 inc     edx
.text:0040A455                 mov     byte ptr [edx], 30h ; '0'
.text:0040A458                 jmp     short loc_40A421
.text:0040A45A ; ---------------------------------------------------------------------------
.text:0040A45A
.text:0040A45A loc_40A45A:                             ; CODE XREF: .text:0040A2B2↑j
.text:0040A45A                                         ; .text:0040A2BA↑j ...
.text:0040A45A                 test    al, al
.text:0040A45C                 jz      loc_40A2D0
.text:0040A462                 mov     [esp], edx
.text:0040A465                 mov     ebx, edx
.text:0040A467                 call    strlen
.text:0040A46C                 lea     edx, ds:1[eax*4]
.text:0040A473                 mov     [esp], edx
.text:0040A476                 call    malloc
.text:0040A47B                 mov     [esp+24h], eax
.text:0040A47F                 mov     edx, eax
.text:0040A481                 jmp     short loc_40A490
.text:0040A481 ; ---------------------------------------------------------------------------
.text:0040A483                 align 10h
.text:0040A490
.text:0040A490 loc_40A490:                             ; CODE XREF: .text:0040A481↑j
.text:0040A490                                         ; .text:0040A4A8↓j
.text:0040A490                 movzx   eax, byte ptr [ebx]
.text:0040A493                 cmp     al, 20h ; ' '
.text:0040A495                 jz      short loc_40A4C9
.text:0040A497                 cmp     al, 9
.text:0040A499                 jz      short loc_40A4B8
.text:0040A49B                 cmp     al, 5Ch ; '\'
.text:0040A49D                 jz      short loc_40A4AF
.text:0040A49F                 mov     [edx], al
.text:0040A4A1
.text:0040A4A1 loc_40A4A1:                             ; CODE XREF: .text:0040A4B6↓j
.text:0040A4A1                                         ; .text:0040A4C7↓j ...
.text:0040A4A1                 movzx   ecx, byte ptr [ebx]
.text:0040A4A4                 inc     edx
.text:0040A4A5                 inc     ebx
.text:0040A4A6                 test    cl, cl
.text:0040A4A8                 jnz     short loc_40A490
.text:0040A4AA                 jmp     loc_40A2D0
.text:0040A4AF ; ---------------------------------------------------------------------------
.text:0040A4AF
.text:0040A4AF loc_40A4AF:                             ; CODE XREF: .text:0040A49D↑j
.text:0040A4AF                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A4B2                 inc     edx
.text:0040A4B3                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A4B6                 jmp     short loc_40A4A1
.text:0040A4B8 ; ---------------------------------------------------------------------------
.text:0040A4B8
.text:0040A4B8 loc_40A4B8:                             ; CODE XREF: .text:0040A499↑j
.text:0040A4B8                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A4BB                 inc     edx
.text:0040A4BC                 mov     byte ptr [edx], 30h ; '0'
.text:0040A4BF                 inc     edx
.text:0040A4C0                 mov     byte ptr [edx], 31h ; '1'
.text:0040A4C3                 inc     edx
.text:0040A4C4                 mov     byte ptr [edx], 32h ; '2'
.text:0040A4C7                 jmp     short loc_40A4A1
.text:0040A4C9 ; ---------------------------------------------------------------------------
.text:0040A4C9
.text:0040A4C9 loc_40A4C9:                             ; CODE XREF: .text:0040A495↑j
.text:0040A4C9                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A4CC                 inc     edx
.text:0040A4CD                 mov     byte ptr [edx], 30h ; '0'
.text:0040A4D0                 inc     edx
.text:0040A4D1                 mov     byte ptr [edx], 34h ; '4'
.text:0040A4D4                 inc     edx
.text:0040A4D5                 mov     byte ptr [edx], 30h ; '0'
.text:0040A4D8                 jmp     short loc_40A4A1
.text:0040A4DA ; ---------------------------------------------------------------------------
.text:0040A4DA
.text:0040A4DA loc_40A4DA:                             ; CODE XREF: .text:0040A282↑j
.text:0040A4DA                                         ; .text:0040A28A↑j ...
.text:0040A4DA                 test    al, al
.text:0040A4DC                 jz      loc_40A2A0
.text:0040A4E2                 mov     [esp], edx
.text:0040A4E5                 mov     ebx, edx
.text:0040A4E7                 call    strlen
.text:0040A4EC                 lea     ecx, ds:1[eax*4]
.text:0040A4F3                 mov     [esp], ecx
.text:0040A4F6                 call    malloc
.text:0040A4FB                 mov     [esp+20h], eax
.text:0040A4FF                 mov     edx, eax
.text:0040A501                 jmp     short loc_40A510
.text:0040A501 ; ---------------------------------------------------------------------------
.text:0040A503                 align 10h
.text:0040A510
.text:0040A510 loc_40A510:                             ; CODE XREF: .text:0040A501↑j
.text:0040A510                                         ; .text:0040A528↓j
.text:0040A510                 movzx   eax, byte ptr [ebx]
.text:0040A513                 cmp     al, 20h ; ' '
.text:0040A515                 jz      short loc_40A549
.text:0040A517                 cmp     al, 9
.text:0040A519                 jz      short loc_40A538
.text:0040A51B                 cmp     al, 5Ch ; '\'
.text:0040A51D                 jz      short loc_40A52F
.text:0040A51F                 mov     [edx], al
.text:0040A521
.text:0040A521 loc_40A521:                             ; CODE XREF: .text:0040A536↓j
.text:0040A521                                         ; .text:0040A547↓j ...
.text:0040A521                 movzx   ecx, byte ptr [ebx]
.text:0040A524                 inc     edx
.text:0040A525                 inc     ebx
.text:0040A526                 test    cl, cl
.text:0040A528                 jnz     short loc_40A510
.text:0040A52A                 jmp     loc_40A2A0
.text:0040A52F ; ---------------------------------------------------------------------------
.text:0040A52F
.text:0040A52F loc_40A52F:                             ; CODE XREF: .text:0040A51D↑j
.text:0040A52F                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A532                 inc     edx
.text:0040A533                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A536                 jmp     short loc_40A521
.text:0040A538 ; ---------------------------------------------------------------------------
.text:0040A538
.text:0040A538 loc_40A538:                             ; CODE XREF: .text:0040A519↑j
.text:0040A538                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A53B                 inc     edx
.text:0040A53C                 mov     byte ptr [edx], 30h ; '0'
.text:0040A53F                 inc     edx
.text:0040A540                 mov     byte ptr [edx], 31h ; '1'
.text:0040A543                 inc     edx
.text:0040A544                 mov     byte ptr [edx], 32h ; '2'
.text:0040A547                 jmp     short loc_40A521
.text:0040A549 ; ---------------------------------------------------------------------------
.text:0040A549
.text:0040A549 loc_40A549:                             ; CODE XREF: .text:0040A515↑j
.text:0040A549                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A54C                 inc     edx
.text:0040A54D                 mov     byte ptr [edx], 30h ; '0'
.text:0040A550                 inc     edx
.text:0040A551                 mov     byte ptr [edx], 34h ; '4'
.text:0040A554                 inc     edx
.text:0040A555                 mov     byte ptr [edx], 30h ; '0'
.text:0040A558                 jmp     short loc_40A521
.text:0040A558 ; ---------------------------------------------------------------------------
.text:0040A55A                 align 10h
.text:0040A560
.text:0040A560 ; =============== S U B R O U T I N E =======================================
.text:0040A560
.text:0040A560 ; Attributes: info_from_lumina
.text:0040A560
.text:0040A560 ; int __cdecl __addmntentstr(char *, int)
.text:0040A560 ___addmntentstr proc near               ; CODE XREF: .text:00409E2A↑p
.text:0040A560
.text:0040A560 Buffer          = dword ptr -4Ch
.text:0040A560 Format          = dword ptr -48h
.text:0040A560 var_44          = dword ptr -44h
.text:0040A560 var_40          = dword ptr -40h
.text:0040A560 var_3C          = dword ptr -3Ch
.text:0040A560 var_38          = dword ptr -38h
.text:0040A560 var_34          = dword ptr -34h
.text:0040A560 var_30          = dword ptr -30h
.text:0040A560 var_2C          = dword ptr -2Ch
.text:0040A560 var_28          = dword ptr -28h
.text:0040A560 var_24          = dword ptr -24h
.text:0040A560 Str             = dword ptr -20h
.text:0040A560 var_1C          = dword ptr -1Ch
.text:0040A560 var_18          = dword ptr -18h
.text:0040A560 arg_0           = dword ptr  4
.text:0040A560 arg_4           = dword ptr  8
.text:0040A560
.text:0040A560                 push    ebx
.text:0040A561                 sub     esp, 48h
.text:0040A564                 mov     edx, [esp+4Ch+arg_4]
.text:0040A568                 mov     ecx, [edx]
.text:0040A56A                 mov     [esp+4Ch+var_2C], ecx
.text:0040A56E                 mov     ebx, [edx+4]
.text:0040A571                 mov     [esp+4Ch+var_28], ebx
.text:0040A575                 mov     ebx, [edx+8]
.text:0040A578                 mov     [esp+4Ch+var_24], ebx
.text:0040A57C                 mov     ebx, [edx+0Ch]
.text:0040A57F                 mov     [esp+4Ch+Str], ebx
.text:0040A583                 mov     ebx, [edx+10h]
.text:0040A586                 mov     [esp+4Ch+var_1C], ebx
.text:0040A58A                 mov     ebx, [edx+14h]
.text:0040A58D                 mov     [esp+4Ch+var_18], ebx
.text:0040A591                 mov     ebx, ecx
.text:0040A593                 movzx   eax, byte ptr [ecx]
.text:0040A596                 test    al, al
.text:0040A598                 jz      loc_40A881
.text:0040A59E                 mov     esi, esi
.text:0040A5A0
.text:0040A5A0 loc_40A5A0:                             ; CODE XREF: ___addmntentstr+5E↓j
.text:0040A5A0                 cmp     al, 20h ; ' '
.text:0040A5A2                 jz      loc_40A800
.text:0040A5A8                 cmp     al, 9
.text:0040A5AA                 jz      loc_40A800
.text:0040A5B0                 cmp     al, 5Ch ; '\'
.text:0040A5B2                 jz      loc_40A800
.text:0040A5B8                 inc     ebx
.text:0040A5B9                 movzx   eax, byte ptr [ebx]
.text:0040A5BC                 test    al, al
.text:0040A5BE                 jnz     short loc_40A5A0
.text:0040A5C0
.text:0040A5C0 loc_40A5C0:                             ; CODE XREF: ___addmntentstr+2A2↓j
.text:0040A5C0                                         ; ___addmntentstr+2EA↓j
.text:0040A5C0                 mov     ebx, [esp+4Ch+var_28]
.text:0040A5C4                 mov     edx, ebx
.text:0040A5C6                 movzx   eax, byte ptr [ebx]
.text:0040A5C9                 test    al, al
.text:0040A5CB                 jz      short loc_40A5F0
.text:0040A5CD                 lea     esi, [esi+0]
.text:0040A5D0
.text:0040A5D0 loc_40A5D0:                             ; CODE XREF: ___addmntentstr+8E↓j
.text:0040A5D0                 cmp     al, 20h ; ' '
.text:0040A5D2                 jz      loc_40A77A
.text:0040A5D8                 cmp     al, 9
.text:0040A5DA                 jz      loc_40A77A
.text:0040A5E0                 cmp     al, 5Ch ; '\'
.text:0040A5E2                 jz      loc_40A77A
.text:0040A5E8                 inc     ebx
.text:0040A5E9                 movzx   eax, byte ptr [ebx]
.text:0040A5EC                 test    al, al
.text:0040A5EE                 jnz     short loc_40A5D0
.text:0040A5F0
.text:0040A5F0 loc_40A5F0:                             ; CODE XREF: ___addmntentstr+6B↑j
.text:0040A5F0                                         ; ___addmntentstr+21C↓j ...
.text:0040A5F0                 mov     ebx, [esp+4Ch+var_24]
.text:0040A5F4                 mov     edx, ebx
.text:0040A5F6                 movzx   eax, byte ptr [ebx]
.text:0040A5F9                 test    al, al
.text:0040A5FB                 jz      short loc_40A620
.text:0040A5FD                 lea     esi, [esi+0]
.text:0040A600
.text:0040A600 loc_40A600:                             ; CODE XREF: ___addmntentstr+BE↓j
.text:0040A600                 cmp     al, 20h ; ' '
.text:0040A602                 jz      loc_40A6FE
.text:0040A608                 cmp     al, 9
.text:0040A60A                 jz      loc_40A6FE
.text:0040A610                 cmp     al, 5Ch ; '\'
.text:0040A612                 jz      loc_40A6FE
.text:0040A618                 inc     ebx
.text:0040A619                 movzx   eax, byte ptr [ebx]
.text:0040A61C                 test    al, al
.text:0040A61E                 jnz     short loc_40A600
.text:0040A620
.text:0040A620 loc_40A620:                             ; CODE XREF: ___addmntentstr+9B↑j
.text:0040A620                                         ; ___addmntentstr+1A0↓j ...
.text:0040A620                 mov     edx, [esp+4Ch+Str]
.text:0040A624                 mov     ebx, edx
.text:0040A626                 movzx   eax, byte ptr [edx]
.text:0040A629                 test    al, al
.text:0040A62B                 jz      short loc_40A644
.text:0040A62D                 lea     esi, [esi+0]
.text:0040A630
.text:0040A630 loc_40A630:                             ; CODE XREF: ___addmntentstr+E2↓j
.text:0040A630                 cmp     al, 20h ; ' '
.text:0040A632                 jz      short loc_40A68C
.text:0040A634                 cmp     al, 9
.text:0040A636                 jz      short loc_40A68C
.text:0040A638                 cmp     al, 5Ch ; '\'
.text:0040A63A                 jz      short loc_40A68C
.text:0040A63C                 inc     ebx
.text:0040A63D                 movzx   eax, byte ptr [ebx]
.text:0040A640                 test    al, al
.text:0040A642                 jnz     short loc_40A630
.text:0040A644
.text:0040A644 loc_40A644:                             ; CODE XREF: ___addmntentstr+CB↑j
.text:0040A644                                         ; ___addmntentstr+12E↓j ...
.text:0040A644                 mov     [esp+4Ch+var_38], edx
.text:0040A648                 mov     ebx, [esp+4Ch+var_18]
.text:0040A64C                 mov     ecx, [esp+4Ch+var_1C]
.text:0040A650                 mov     [esp+4Ch+Format], offset aSSSSDD ; "%s %s %s %s %d %d\n"
.text:0040A658                 mov     edx, [esp+4Ch+var_2C]
.text:0040A65C                 mov     [esp+4Ch+var_30], ebx
.text:0040A660                 mov     ebx, [esp+4Ch+var_24]
.text:0040A664                 mov     [esp+4Ch+var_34], ecx
.text:0040A668                 mov     ecx, [esp+4Ch+var_28]
.text:0040A66C                 mov     [esp+4Ch+var_3C], ebx
.text:0040A670                 mov     ebx, [esp+4Ch+arg_0]
.text:0040A674                 mov     [esp+4Ch+var_40], ecx
.text:0040A678                 mov     [esp+4Ch+var_44], edx
.text:0040A67C                 mov     [esp+4Ch+Buffer], ebx ; Buffer
.text:0040A67F                 call    sprintf
.text:0040A684                 add     esp, 48h
.text:0040A687                 shr     eax, 1Fh
.text:0040A68A                 pop     ebx
.text:0040A68B                 retn
.text:0040A68C ; ---------------------------------------------------------------------------
.text:0040A68C
.text:0040A68C loc_40A68C:                             ; CODE XREF: ___addmntentstr+D2↑j
.text:0040A68C                                         ; ___addmntentstr+D6↑j ...
.text:0040A68C                 test    al, al
.text:0040A68E                 jz      short loc_40A644
.text:0040A690                 mov     [esp+4Ch+Buffer], edx ; Str
.text:0040A693                 mov     ebx, edx
.text:0040A695                 call    strlen
.text:0040A69A                 lea     edx, ds:1[eax*4]
.text:0040A6A1                 mov     [esp+4Ch+Buffer], edx ; Size
.text:0040A6A4                 call    malloc
.text:0040A6A9                 mov     [esp+4Ch+Str], eax
.text:0040A6AD                 mov     edx, eax
.text:0040A6AF                 nop
.text:0040A6B0
.text:0040A6B0 loc_40A6B0:                             ; CODE XREF: ___addmntentstr+168↓j
.text:0040A6B0                 movzx   eax, byte ptr [ebx]
.text:0040A6B3                 cmp     al, 20h ; ' '
.text:0040A6B5                 jz      short loc_40A6ED
.text:0040A6B7                 cmp     al, 9
.text:0040A6B9                 jz      short loc_40A6DC
.text:0040A6BB                 cmp     al, 5Ch ; '\'
.text:0040A6BD                 jz      short loc_40A6D3
.text:0040A6BF                 mov     [edx], al
.text:0040A6C1
.text:0040A6C1 loc_40A6C1:                             ; CODE XREF: ___addmntentstr+17A↓j
.text:0040A6C1                                         ; ___addmntentstr+18B↓j ...
.text:0040A6C1                 movzx   ecx, byte ptr [ebx]
.text:0040A6C4                 inc     edx
.text:0040A6C5                 inc     ebx
.text:0040A6C6                 test    cl, cl
.text:0040A6C8                 jnz     short loc_40A6B0
.text:0040A6CA                 mov     edx, [esp+4Ch+Str]
.text:0040A6CE                 jmp     loc_40A644
.text:0040A6D3 ; ---------------------------------------------------------------------------
.text:0040A6D3
.text:0040A6D3 loc_40A6D3:                             ; CODE XREF: ___addmntentstr+15D↑j
.text:0040A6D3                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A6D6                 inc     edx
.text:0040A6D7                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A6DA                 jmp     short loc_40A6C1
.text:0040A6DC ; ---------------------------------------------------------------------------
.text:0040A6DC
.text:0040A6DC loc_40A6DC:                             ; CODE XREF: ___addmntentstr+159↑j
.text:0040A6DC                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A6DF                 inc     edx
.text:0040A6E0                 mov     byte ptr [edx], 30h ; '0'
.text:0040A6E3                 inc     edx
.text:0040A6E4                 mov     byte ptr [edx], 31h ; '1'
.text:0040A6E7                 inc     edx
.text:0040A6E8                 mov     byte ptr [edx], 32h ; '2'
.text:0040A6EB                 jmp     short loc_40A6C1
.text:0040A6ED ; ---------------------------------------------------------------------------
.text:0040A6ED
.text:0040A6ED loc_40A6ED:                             ; CODE XREF: ___addmntentstr+155↑j
.text:0040A6ED                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A6F0                 inc     edx
.text:0040A6F1                 mov     byte ptr [edx], 30h ; '0'
.text:0040A6F4                 inc     edx
.text:0040A6F5                 mov     byte ptr [edx], 34h ; '4'
.text:0040A6F8                 inc     edx
.text:0040A6F9                 mov     byte ptr [edx], 30h ; '0'
.text:0040A6FC                 jmp     short loc_40A6C1
.text:0040A6FE ; ---------------------------------------------------------------------------
.text:0040A6FE
.text:0040A6FE loc_40A6FE:                             ; CODE XREF: ___addmntentstr+A2↑j
.text:0040A6FE                                         ; ___addmntentstr+AA↑j ...
.text:0040A6FE                 test    al, al
.text:0040A700                 jz      loc_40A620
.text:0040A706                 mov     [esp+4Ch+Buffer], edx ; Str
.text:0040A709                 mov     ebx, edx
.text:0040A70B                 call    strlen
.text:0040A710                 lea     edx, ds:1[eax*4]
.text:0040A717                 mov     [esp+4Ch+Buffer], edx ; Size
.text:0040A71A                 call    malloc
.text:0040A71F                 mov     [esp+4Ch+var_24], eax
.text:0040A723                 mov     edx, eax
.text:0040A725                 lea     esi, [esi+0]
.text:0040A729                 lea     edi, [edi+0]
.text:0040A730
.text:0040A730 loc_40A730:                             ; CODE XREF: ___addmntentstr+1E8↓j
.text:0040A730                 movzx   eax, byte ptr [ebx]
.text:0040A733                 cmp     al, 20h ; ' '
.text:0040A735                 jz      short loc_40A769
.text:0040A737                 cmp     al, 9
.text:0040A739                 jz      short loc_40A758
.text:0040A73B                 cmp     al, 5Ch ; '\'
.text:0040A73D                 jz      short loc_40A74F
.text:0040A73F                 mov     [edx], al
.text:0040A741
.text:0040A741 loc_40A741:                             ; CODE XREF: ___addmntentstr+1F6↓j
.text:0040A741                                         ; ___addmntentstr+207↓j ...
.text:0040A741                 movzx   ecx, byte ptr [ebx]
.text:0040A744                 inc     edx
.text:0040A745                 inc     ebx
.text:0040A746                 test    cl, cl
.text:0040A748                 jnz     short loc_40A730
.text:0040A74A                 jmp     loc_40A620
.text:0040A74F ; ---------------------------------------------------------------------------
.text:0040A74F
.text:0040A74F loc_40A74F:                             ; CODE XREF: ___addmntentstr+1DD↑j
.text:0040A74F                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A752                 inc     edx
.text:0040A753                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A756                 jmp     short loc_40A741
.text:0040A758 ; ---------------------------------------------------------------------------
.text:0040A758
.text:0040A758 loc_40A758:                             ; CODE XREF: ___addmntentstr+1D9↑j
.text:0040A758                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A75B                 inc     edx
.text:0040A75C                 mov     byte ptr [edx], 30h ; '0'
.text:0040A75F                 inc     edx
.text:0040A760                 mov     byte ptr [edx], 31h ; '1'
.text:0040A763                 inc     edx
.text:0040A764                 mov     byte ptr [edx], 32h ; '2'
.text:0040A767                 jmp     short loc_40A741
.text:0040A769 ; ---------------------------------------------------------------------------
.text:0040A769
.text:0040A769 loc_40A769:                             ; CODE XREF: ___addmntentstr+1D5↑j
.text:0040A769                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A76C                 inc     edx
.text:0040A76D                 mov     byte ptr [edx], 30h ; '0'
.text:0040A770                 inc     edx
.text:0040A771                 mov     byte ptr [edx], 34h ; '4'
.text:0040A774                 inc     edx
.text:0040A775                 mov     byte ptr [edx], 30h ; '0'
.text:0040A778                 jmp     short loc_40A741
.text:0040A77A ; ---------------------------------------------------------------------------
.text:0040A77A
.text:0040A77A loc_40A77A:                             ; CODE XREF: ___addmntentstr+72↑j
.text:0040A77A                                         ; ___addmntentstr+7A↑j ...
.text:0040A77A                 test    al, al
.text:0040A77C                 jz      loc_40A5F0
.text:0040A782                 mov     [esp+4Ch+Buffer], edx ; Str
.text:0040A785                 mov     ebx, edx
.text:0040A787                 call    strlen
.text:0040A78C                 lea     edx, ds:1[eax*4]
.text:0040A793                 mov     [esp+4Ch+Buffer], edx ; Size
.text:0040A796                 call    malloc
.text:0040A79B                 mov     [esp+4Ch+var_28], eax
.text:0040A79F                 mov     edx, eax
.text:0040A7A1                 jmp     short loc_40A7B0
.text:0040A7A1 ; ---------------------------------------------------------------------------
.text:0040A7A3                 align 10h
.text:0040A7B0
.text:0040A7B0 loc_40A7B0:                             ; CODE XREF: ___addmntentstr+241↑j
.text:0040A7B0                                         ; ___addmntentstr+268↓j
.text:0040A7B0                 movzx   eax, byte ptr [ebx]
.text:0040A7B3                 cmp     al, 20h ; ' '
.text:0040A7B5                 jz      short loc_40A7E9
.text:0040A7B7                 cmp     al, 9
.text:0040A7B9                 jz      short loc_40A7D8
.text:0040A7BB                 cmp     al, 5Ch ; '\'
.text:0040A7BD                 jz      short loc_40A7CF
.text:0040A7BF                 mov     [edx], al
.text:0040A7C1
.text:0040A7C1 loc_40A7C1:                             ; CODE XREF: ___addmntentstr+276↓j
.text:0040A7C1                                         ; ___addmntentstr+287↓j ...
.text:0040A7C1                 movzx   ecx, byte ptr [ebx]
.text:0040A7C4                 inc     edx
.text:0040A7C5                 inc     ebx
.text:0040A7C6                 test    cl, cl
.text:0040A7C8                 jnz     short loc_40A7B0
.text:0040A7CA                 jmp     loc_40A5F0
.text:0040A7CF ; ---------------------------------------------------------------------------
.text:0040A7CF
.text:0040A7CF loc_40A7CF:                             ; CODE XREF: ___addmntentstr+25D↑j
.text:0040A7CF                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A7D2                 inc     edx
.text:0040A7D3                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A7D6                 jmp     short loc_40A7C1
.text:0040A7D8 ; ---------------------------------------------------------------------------
.text:0040A7D8
.text:0040A7D8 loc_40A7D8:                             ; CODE XREF: ___addmntentstr+259↑j
.text:0040A7D8                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A7DB                 inc     edx
.text:0040A7DC                 mov     byte ptr [edx], 30h ; '0'
.text:0040A7DF                 inc     edx
.text:0040A7E0                 mov     byte ptr [edx], 31h ; '1'
.text:0040A7E3                 inc     edx
.text:0040A7E4                 mov     byte ptr [edx], 32h ; '2'
.text:0040A7E7                 jmp     short loc_40A7C1
.text:0040A7E9 ; ---------------------------------------------------------------------------
.text:0040A7E9
.text:0040A7E9 loc_40A7E9:                             ; CODE XREF: ___addmntentstr+255↑j
.text:0040A7E9                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A7EC                 inc     edx
.text:0040A7ED                 mov     byte ptr [edx], 30h ; '0'
.text:0040A7F0                 inc     edx
.text:0040A7F1                 mov     byte ptr [edx], 34h ; '4'
.text:0040A7F4                 inc     edx
.text:0040A7F5                 mov     byte ptr [edx], 30h ; '0'
.text:0040A7F8                 jmp     short loc_40A7C1
.text:0040A7F8 ; ---------------------------------------------------------------------------
.text:0040A7FA                 align 10h
.text:0040A800
.text:0040A800 loc_40A800:                             ; CODE XREF: ___addmntentstr+42↑j
.text:0040A800                                         ; ___addmntentstr+4A↑j ...
.text:0040A800                 test    al, al
.text:0040A802                 jz      loc_40A5C0
.text:0040A808                 mov     ebx, [esp+4Ch+var_2C]
.text:0040A80C                 mov     [esp+4Ch+Buffer], ebx ; Str
.text:0040A80F                 call    strlen
.text:0040A814                 lea     edx, ds:1[eax*4]
.text:0040A81B                 mov     [esp+4Ch+Buffer], edx ; Size
.text:0040A81E                 call    malloc
.text:0040A823                 mov     [esp+4Ch+var_2C], eax
.text:0040A827                 mov     edx, eax
.text:0040A829                 lea     esi, [esi+0]
.text:0040A830
.text:0040A830 loc_40A830:                             ; CODE XREF: ___addmntentstr+2E8↓j
.text:0040A830                 movzx   eax, byte ptr [ebx]
.text:0040A833                 cmp     al, 20h ; ' '
.text:0040A835                 jz      short loc_40A870
.text:0040A837                 cmp     al, 9
.text:0040A839                 jz      short loc_40A858
.text:0040A83B                 cmp     al, 5Ch ; '\'
.text:0040A83D                 jz      short loc_40A84F
.text:0040A83F                 mov     [edx], al
.text:0040A841
.text:0040A841 loc_40A841:                             ; CODE XREF: ___addmntentstr+2F6↓j
.text:0040A841                                         ; ___addmntentstr+307↓j ...
.text:0040A841                 movzx   ecx, byte ptr [ebx]
.text:0040A844                 inc     edx
.text:0040A845                 inc     ebx
.text:0040A846                 test    cl, cl
.text:0040A848                 jnz     short loc_40A830
.text:0040A84A                 jmp     loc_40A5C0
.text:0040A84F ; ---------------------------------------------------------------------------
.text:0040A84F
.text:0040A84F loc_40A84F:                             ; CODE XREF: ___addmntentstr+2DD↑j
.text:0040A84F                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A852                 inc     edx
.text:0040A853                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A856                 jmp     short loc_40A841
.text:0040A858 ; ---------------------------------------------------------------------------
.text:0040A858
.text:0040A858 loc_40A858:                             ; CODE XREF: ___addmntentstr+2D9↑j
.text:0040A858                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A85B                 inc     edx
.text:0040A85C                 mov     byte ptr [edx], 30h ; '0'
.text:0040A85F                 inc     edx
.text:0040A860                 mov     byte ptr [edx], 31h ; '1'
.text:0040A863                 inc     edx
.text:0040A864                 mov     byte ptr [edx], 32h ; '2'
.text:0040A867                 jmp     short loc_40A841
.text:0040A867 ; ---------------------------------------------------------------------------
.text:0040A869                 align 10h
.text:0040A870
.text:0040A870 loc_40A870:                             ; CODE XREF: ___addmntentstr+2D5↑j
.text:0040A870                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A873                 inc     edx
.text:0040A874                 mov     byte ptr [edx], 30h ; '0'
.text:0040A877                 inc     edx
.text:0040A878                 mov     byte ptr [edx], 34h ; '4'
.text:0040A87B                 inc     edx
.text:0040A87C                 mov     byte ptr [edx], 30h ; '0'
.text:0040A87F                 jmp     short loc_40A841
.text:0040A881 ; ---------------------------------------------------------------------------
.text:0040A881
.text:0040A881 loc_40A881:                             ; CODE XREF: ___addmntentstr+38↑j
.text:0040A881                 movzx   eax, byte ptr [ecx]
.text:0040A884                 jmp     loc_40A800
.text:0040A884 ___addmntentstr endp
.text:0040A884
.text:0040A884 ; ---------------------------------------------------------------------------
.text:0040A889                 align 10h
.text:0040A890
.text:0040A890 ; =============== S U B R O U T I N E =======================================
.text:0040A890
.text:0040A890
.text:0040A890 sub_40A890      proc near               ; CODE XREF: sub_4091C0+99↑p
.text:0040A890
.text:0040A890 nBufferLength   = dword ptr -1Ch
.text:0040A890 lpBuffer        = dword ptr -18h
.text:0040A890 dwBytes         = dword ptr -14h
.text:0040A890 var_8           = dword ptr -8
.text:0040A890 var_4           = dword ptr -4
.text:0040A890
.text:0040A890                 sub     esp, 1Ch
.text:0040A893                 mov     [esp+1Ch+var_8], ebx
.text:0040A897                 mov     [esp+1Ch+var_4], esi
.text:0040A89B                 mov     [esp+1Ch+lpBuffer], 0 ; lpBuffer
.text:0040A8A3                 mov     [esp+1Ch+nBufferLength], 0 ; nBufferLength
.text:0040A8AA                 call    GetLogicalDriveStringsA
.text:0040A8AF                 sub     esp, 8
.text:0040A8B2                 mov     ebx, eax
.text:0040A8B4                 call    GetProcessHeap
.text:0040A8B9                 mov     [esp+1Ch+nBufferLength], eax ; hHeap
.text:0040A8BC                 mov     [esp+1Ch+dwBytes], ebx ; dwBytes
.text:0040A8C0                 mov     [esp+1Ch+lpBuffer], 0 ; dwFlags
.text:0040A8C8                 call    HeapAlloc
.text:0040A8CD                 sub     esp, 0Ch
.text:0040A8D0                 mov     esi, eax
.text:0040A8D2                 mov     [esp+1Ch+nBufferLength], ebx ; nBufferLength
.text:0040A8D5                 mov     [esp+1Ch+lpBuffer], eax ; lpBuffer
.text:0040A8D9                 call    GetLogicalDriveStringsA
.text:0040A8DE                 sub     esp, 8
.text:0040A8E1                 mov     eax, esi
.text:0040A8E3                 mov     ebx, [esp+1Ch+var_8]
.text:0040A8E7                 mov     esi, [esp+1Ch+var_4]
.text:0040A8EB                 add     esp, 1Ch
.text:0040A8EE                 retn
.text:0040A8EE sub_40A890      endp
.text:0040A8EE
.text:0040A8EF
.text:0040A8EF ; =============== S U B R O U T I N E =======================================
.text:0040A8EF
.text:0040A8EF
.text:0040A8EF ; int __cdecl sub_40A8EF(char *, char *)
.text:0040A8EF sub_40A8EF      proc near               ; DATA XREF: sub_40A8EF:loc_40A97D↓o
.text:0040A8EF
.text:0040A8EF FileName        = dword ptr -1Ch
.text:0040A8EF Mode            = dword ptr -18h
.text:0040A8EF dwBytes         = dword ptr -14h
.text:0040A8EF arg_0           = dword ptr  4
.text:0040A8EF arg_4           = dword ptr  8
.text:0040A8EF
.text:0040A8EF                 ja      short $+2
.text:0040A8F1
.text:0040A8F1 loc_40A8F1:                             ; CODE XREF: sub_40A8EF↑j
.text:0040A8F1                 jmp     short loc_40A900
.text:0040A8F1 ; ---------------------------------------------------------------------------
.text:0040A8F3                 align 10h
.text:0040A900
.text:0040A900 loc_40A900:                             ; CODE XREF: sub_40A8EF:loc_40A8F1↑j
.text:0040A900                 push    edi
.text:0040A901                 push    esi
.text:0040A902                 push    ebx
.text:0040A903                 sub     esp, 10h
.text:0040A906                 mov     ebx, [esp+1Ch+arg_0]
.text:0040A90A                 mov     edx, [esp+1Ch+arg_4]
.text:0040A90E                 mov     [esp+1Ch+FileName], ebx ; FileName
.text:0040A911                 mov     [esp+1Ch+Mode], edx ; Mode
.text:0040A915                 call    fopen
.text:0040A91A                 test    eax, eax
.text:0040A91C                 mov     edi, eax
.text:0040A91E                 jz      short loc_40A97D
.text:0040A920
.text:0040A920 loc_40A920:                             ; CODE XREF: sub_40A8EF+A2↓j
.text:0040A920                                         ; sub_40A8EF+AB↓j
.text:0040A920                 mov     [esp+1Ch+Mode], 0 ; lpBuffer
.text:0040A928                 mov     [esp+1Ch+FileName], 0 ; nBufferLength
.text:0040A92F                 call    GetLogicalDriveStringsA
.text:0040A934                 sub     esp, 8
.text:0040A937                 mov     esi, eax
.text:0040A939                 call    GetProcessHeap
.text:0040A93E                 mov     [esp+1Ch+FileName], eax ; hHeap
.text:0040A941                 mov     [esp+1Ch+dwBytes], esi ; dwBytes
.text:0040A945                 mov     [esp+1Ch+Mode], 0 ; dwFlags
.text:0040A94D                 call    HeapAlloc
.text:0040A952                 sub     esp, 0Ch
.text:0040A955                 mov     ebx, eax
.text:0040A957                 mov     [esp+1Ch+FileName], esi ; nBufferLength
.text:0040A95A                 mov     [esp+1Ch+Mode], eax ; lpBuffer
.text:0040A95E                 call    GetLogicalDriveStringsA
.text:0040A963                 mov     off_40E084, ebx ; "notset"
.text:0040A969                 sub     esp, 8
.text:0040A96C                 xor     eax, eax
.text:0040A96E                 test    ebx, ebx
.text:0040A970                 setz    al
.text:0040A973                 add     esp, 10h
.text:0040A976                 pop     ebx
.text:0040A977                 dec     eax
.text:0040A978                 and     eax, edi
.text:0040A97A                 pop     esi
.text:0040A97B                 pop     edi
.text:0040A97C                 retn
.text:0040A97D ; ---------------------------------------------------------------------------
.text:0040A97D
.text:0040A97D loc_40A97D:                             ; CODE XREF: sub_40A8EF+2F↑j
.text:0040A97D                 mov     [esp+1Ch+Mode], offset sub_40A8EF ; Mode
.text:0040A985                 mov     [esp+1Ch+FileName], ebx ; FileName
.text:0040A988                 call    fopen
.text:0040A98D                 test    eax, eax
.text:0040A98F                 mov     edi, eax
.text:0040A991                 jnz     short loc_40A920
.text:0040A993                 call    sub_40AC60
.text:0040A998                 mov     edi, eax
.text:0040A99A                 jmp     short loc_40A920
.text:0040A99A sub_40A8EF      endp
.text:0040A99A
.text:0040A99A ; ---------------------------------------------------------------------------
.text:0040A99C                 align 10h
.text:0040A9A0                 sub     esp, 0Ch
.text:0040A9A3                 mov     eax, [esp+10h]
.text:0040A9A7                 test    eax, eax
.text:0040A9A9                 jz      short loc_40A9B3
.text:0040A9AB                 mov     [esp], eax
.text:0040A9AE                 call    fclose
.text:0040A9B3
.text:0040A9B3 loc_40A9B3:                             ; CODE XREF: .text:0040A9A9↑j
.text:0040A9B3                 call    GetProcessHeap
.text:0040A9B8                 mov     [esp], eax
.text:0040A9BB                 mov     ecx, off_40E084 ; "notset"
.text:0040A9C1                 mov     dword ptr [esp+4], 0
.text:0040A9C9                 mov     [esp+8], ecx
.text:0040A9CD                 call    HeapFree
.text:0040A9D2                 mov     edx, off_40E080 ; "notset"
.text:0040A9D8                 sub     esp, 0Ch
.text:0040A9DB                 mov     eax, 1
.text:0040A9E0                 mov     off_40E084, edx ; "notset"
.text:0040A9E6                 add     esp, 0Ch
.text:0040A9E9                 retn
.text:0040A9E9 ; ---------------------------------------------------------------------------
.text:0040A9EA                 align 10h
.text:0040A9F0                 push    edi
.text:0040A9F1                 push    esi
.text:0040A9F2                 push    ebx
.text:0040A9F3                 sub     esp, 10h
.text:0040A9F6                 mov     edi, [esp+24h]
.text:0040A9FA                 mov     [esp], edi
.text:0040A9FD                 call    strlen
.text:0040AA02                 mov     edx, [esp+20h]
.text:0040AA06                 mov     esi, eax
.text:0040AA08                 mov     ebx, [edx+0Ch]
.text:0040AA0B                 nop
.text:0040AA0C                 lea     esi, [esi+0]
.text:0040AA10
.text:0040AA10 loc_40AA10:                             ; CODE XREF: .text:0040AA41↓j
.text:0040AA10                 mov     [esp+4], edi
.text:0040AA14                 mov     [esp], ebx
.text:0040AA17                 call    strstr
.text:0040AA1C                 test    eax, eax
.text:0040AA1E                 jz      short loc_40AA43
.text:0040AA20                 cmp     eax, ebx
.text:0040AA22                 jz      short loc_40AA45
.text:0040AA24                 cmp     byte ptr [eax-1], 2Ch ; ','
.text:0040AA28                 jz      short loc_40AA50
.text:0040AA2A
.text:0040AA2A loc_40AA2A:                             ; CODE XREF: .text:0040AA60↓j
.text:0040AA2A                 mov     [esp], ebx
.text:0040AA2D                 mov     dword ptr [esp+4], 2Ch ; ','
.text:0040AA35                 call    strchr
.text:0040AA3A                 test    eax, eax
.text:0040AA3C                 mov     ebx, eax
.text:0040AA3E                 jz      short loc_40AA43
.text:0040AA40                 inc     ebx
.text:0040AA41                 jmp     short loc_40AA10
.text:0040AA43 ; ---------------------------------------------------------------------------
.text:0040AA43
.text:0040AA43 loc_40AA43:                             ; CODE XREF: .text:0040AA1E↑j
.text:0040AA43                                         ; .text:0040AA3E↑j
.text:0040AA43                 xor     eax, eax
.text:0040AA45
.text:0040AA45 loc_40AA45:                             ; CODE XREF: .text:0040AA22↑j
.text:0040AA45                                         ; .text:0040AA56↓j ...
.text:0040AA45                 add     esp, 10h
.text:0040AA48                 pop     ebx
.text:0040AA49                 pop     esi
.text:0040AA4A                 pop     edi
.text:0040AA4B                 retn
.text:0040AA4B ; ---------------------------------------------------------------------------
.text:0040AA4C                 align 10h
.text:0040AA50
.text:0040AA50 loc_40AA50:                             ; CODE XREF: .text:0040AA28↑j
.text:0040AA50                 movzx   edx, byte ptr [esi+eax]
.text:0040AA54                 test    dl, dl
.text:0040AA56                 jz      short loc_40AA45
.text:0040AA58                 cmp     dl, 3Dh ; '='
.text:0040AA5B                 jz      short loc_40AA45
.text:0040AA5D                 cmp     dl, 2Ch ; ','
.text:0040AA60                 jnz     short loc_40AA2A
.text:0040AA62                 jmp     short loc_40AA45
.text:0040AA62 ; ---------------------------------------------------------------------------
.text:0040AA64                 align 10h
.text:0040AA70 ; const char aFxstat64BadFil[]
.text:0040AA70 aFxstat64BadFil db '__fxstat64: bad file descriptor %d',0Ah,0
.text:0040AA70                                         ; DATA XREF: sub_40AAA0+7B↓o
.text:0040AA94                 align 10h
.text:0040AAA0
.text:0040AAA0 ; =============== S U B R O U T I N E =======================================
.text:0040AAA0
.text:0040AAA0
.text:0040AAA0 ; int __cdecl sub_40AAA0(HANDLE hNamedPipe, int, int)
.text:0040AAA0 sub_40AAA0      proc near               ; CODE XREF: .text:004093D9↑p
.text:0040AAA0
.text:0040AAA0 FileHandle      = dword ptr -1Ch
.text:0040AAA0 var_18          = dword ptr -18h
.text:0040AAA0 var_C           = dword ptr -0Ch
.text:0040AAA0 var_8           = dword ptr -8
.text:0040AAA0 var_4           = dword ptr -4
.text:0040AAA0 hNamedPipe      = dword ptr  4
.text:0040AAA0 arg_4           = dword ptr  8
.text:0040AAA0 arg_8           = dword ptr  0Ch
.text:0040AAA0
.text:0040AAA0                 sub     esp, 1Ch
.text:0040AAA3                 mov     edx, [esp+1Ch+arg_4]
.text:0040AAA7                 mov     [esp+1Ch+var_C], ebx
.text:0040AAAB                 mov     ebx, [esp+1Ch+hNamedPipe]
.text:0040AAAF                 mov     [esp+1Ch+var_8], esi
.text:0040AAB3                 mov     esi, [esp+1Ch+arg_8]
.text:0040AAB7                 test    ebx, ebx
.text:0040AAB9                 mov     [esp+1Ch+var_4], edi
.text:0040AABD                 jnz     short loc_40AAF7
.text:0040AABF                 test    edx, edx
.text:0040AAC1                 js      short loc_40AB17
.text:0040AAC3                 test    esi, esi
.text:0040AAC5                 jz      short loc_40AAF7
.text:0040AAC7                 cld
.text:0040AAC8                 mov     eax, ebx
.text:0040AACA                 mov     edi, esi
.text:0040AACC                 mov     ecx, 18h
.text:0040AAD1                 rep stosd
.text:0040AAD3                 mov     [esp+1Ch+arg_4], esi ; int
.text:0040AAD7                 mov     [esp+1Ch+FileHandle], edx ; FileHandle
.text:0040AADA                 call    _get_osfhandle
.text:0040AADF                 mov     [esp+1Ch+hNamedPipe], eax ; hNamedPipe
.text:0040AAE3                 mov     ebx, [esp+1Ch+var_C]
.text:0040AAE7                 mov     esi, [esp+1Ch+var_8]
.text:0040AAEB                 mov     edi, [esp+1Ch+var_4]
.text:0040AAEF                 add     esp, 1Ch
.text:0040AAF2                 jmp     sub_406B20
.text:0040AAF7 ; ---------------------------------------------------------------------------
.text:0040AAF7
.text:0040AAF7 loc_40AAF7:                             ; CODE XREF: sub_40AAA0+1D↑j
.text:0040AAF7                                         ; sub_40AAA0+25↑j
.text:0040AAF7                 call    _errno
.text:0040AAFC                 mov     dword ptr [eax], 16h
.text:0040AB02
.text:0040AB02 loc_40AB02:                             ; CODE XREF: sub_40AAA0+92↓j
.text:0040AB02                 mov     ebx, [esp+1Ch+var_C]
.text:0040AB06                 mov     eax, 0FFFFFFFFh
.text:0040AB0B                 mov     esi, [esp+1Ch+var_8]
.text:0040AB0F                 mov     edi, [esp+1Ch+var_4]
.text:0040AB13                 add     esp, 1Ch
.text:0040AB16                 retn
.text:0040AB17 ; ---------------------------------------------------------------------------
.text:0040AB17
.text:0040AB17 loc_40AB17:                             ; CODE XREF: sub_40AAA0+21↑j
.text:0040AB17                 mov     [esp+1Ch+var_18], edx
.text:0040AB1B                 mov     [esp+1Ch+FileHandle], offset aFxstat64BadFil ; "__fxstat64: bad file descriptor %d\n"
.text:0040AB22                 call    printf
.text:0040AB27                 call    _errno
.text:0040AB2C                 mov     dword ptr [eax], 9
.text:0040AB32                 jmp     short loc_40AB02
.text:0040AB32 sub_40AAA0      endp
.text:0040AB32
.text:0040AB32 ; ---------------------------------------------------------------------------
.text:0040AB34                 db 1Ch dup(90h)
.text:0040AB50
.text:0040AB50 ; =============== S U B R O U T I N E =======================================
.text:0040AB50
.text:0040AB50 ; Attributes: noreturn
.text:0040AB50
.text:0040AB50 sub_40AB50      proc near               ; CODE XREF: .text:0040A259↑p
.text:0040AB50                                         ; sub_40AB50↓j
.text:0040AB50                 jmp     short sub_40AB50
.text:0040AB50 sub_40AB50      endp
.text:0040AB50
.text:0040AB50 ; ---------------------------------------------------------------------------
.text:0040AB52                 align 10h
.text:0040AB60
.text:0040AB60 ; =============== S U B R O U T I N E =======================================
.text:0040AB60
.text:0040AB60
.text:0040AB60 sub_40AB60      proc near               ; CODE XREF: .text:00409FB5↑p
.text:0040AB60
.text:0040AB60 FileHandle      = dword ptr -1Ch
.text:0040AB60 dwFileOffsetLow = dword ptr -18h
.text:0040AB60 dwFileOffsetHigh= dword ptr -14h
.text:0040AB60 nNumberOfBytesToUnlockLow= dword ptr -10h
.text:0040AB60 nNumberOfBytesToUnlockHigh= dword ptr -0Ch
.text:0040AB60 var_8           = dword ptr -8
.text:0040AB60 var_4           = dword ptr -4
.text:0040AB60 arg_0           = dword ptr  4
.text:0040AB60
.text:0040AB60                 sub     esp, 1Ch
.text:0040AB63                 mov     edx, [esp+1Ch+arg_0]
.text:0040AB67                 mov     [esp+1Ch+var_4], esi
.text:0040AB6B                 mov     [esp+1Ch+var_8], ebx
.text:0040AB6F                 mov     ebx, [edx+10h]
.text:0040AB72                 mov     [esp+1Ch+FileHandle], ebx ; FileHandle
.text:0040AB75                 call    _get_osfhandle
.text:0040AB7A                 mov     [esp+1Ch+FileHandle], ebx ; FileHandle
.text:0040AB7D                 mov     esi, eax
.text:0040AB7F                 call    _filelengthi64
.text:0040AB84                 mov     [esp+1Ch+nNumberOfBytesToUnlockLow], eax ; nNumberOfBytesToUnlockLow
.text:0040AB88                 cdq
.text:0040AB89                 mov     [esp+1Ch+FileHandle], esi ; hFile
.text:0040AB8C                 mov     [esp+1Ch+nNumberOfBytesToUnlockHigh], edx ; nNumberOfBytesToUnlockHigh
.text:0040AB90                 mov     [esp+1Ch+dwFileOffsetHigh], 0 ; dwFileOffsetHigh
.text:0040AB98                 mov     [esp+1Ch+dwFileOffsetLow], 0 ; dwFileOffsetLow
.text:0040ABA0                 call    UnlockFile
.text:0040ABA5                 sub     esp, 14h
.text:0040ABA8                 mov     ebx, [esp+1Ch+var_8]
.text:0040ABAC                 mov     esi, [esp+1Ch+var_4]
.text:0040ABB0                 add     esp, 1Ch
.text:0040ABB3                 retn
.text:0040ABB3 sub_40AB60      endp
.text:0040ABB3
.text:0040ABB3 ; ---------------------------------------------------------------------------
.text:0040ABB4                 align 10h
.text:0040ABC0
.text:0040ABC0 ; =============== S U B R O U T I N E =======================================
.text:0040ABC0
.text:0040ABC0
.text:0040ABC0 ; int __cdecl sub_40ABC0(int, char *Control)
.text:0040ABC0 sub_40ABC0      proc near               ; CODE XREF: .text:00409E76↑p
.text:0040ABC0                                         ; .text:00409EC6↑p ...
.text:0040ABC0
.text:0040ABC0 Str             = dword ptr -1Ch
.text:0040ABC0 Val             = dword ptr -18h
.text:0040ABC0 var_8           = dword ptr -8
.text:0040ABC0 var_4           = dword ptr -4
.text:0040ABC0 arg_0           = dword ptr  4
.text:0040ABC0 Control         = dword ptr  8
.text:0040ABC0
.text:0040ABC0                 sub     esp, 1Ch
.text:0040ABC3                 xor     eax, eax
.text:0040ABC5                 mov     edx, [esp+1Ch+Control]
.text:0040ABC9                 mov     [esp+1Ch+var_4], esi
.text:0040ABCD                 mov     esi, [esp+1Ch+arg_0]
.text:0040ABD1                 mov     [esp+1Ch+var_8], ebx
.text:0040ABD5                 mov     ebx, [esi]
.text:0040ABD7                 test    ebx, ebx
.text:0040ABD9                 jz      short loc_40AC08
.text:0040ABDB                 movzx   eax, byte ptr [edx]
.text:0040ABDE                 test    al, al
.text:0040ABE0                 jz      short loc_40AC00
.text:0040ABE2                 cmp     byte ptr [edx+1], 0
.text:0040ABE6                 jnz     short loc_40AC40
.text:0040ABE8                 movzx   ecx, byte ptr [ebx]
.text:0040ABEB                 mov     edx, ebx
.text:0040ABED                 cmp     cl, al
.text:0040ABEF                 jz      short loc_40AC32
.text:0040ABF1                 test    cl, cl
.text:0040ABF3                 jnz     short loc_40AC14
.text:0040ABF5                 lea     esi, [esi+0]
.text:0040ABF9                 lea     edi, [edi+0]
.text:0040AC00
.text:0040AC00 loc_40AC00:                             ; CODE XREF: sub_40ABC0+20↑j
.text:0040AC00                                         ; sub_40ABC0+74↓j
.text:0040AC00                 mov     dword ptr [esi], 0
.text:0040AC06
.text:0040AC06 loc_40AC06:                             ; CODE XREF: sub_40ABC0+7C↓j
.text:0040AC06                 mov     eax, ebx
.text:0040AC08
.text:0040AC08 loc_40AC08:                             ; CODE XREF: sub_40ABC0+19↑j
.text:0040AC08                 mov     ebx, [esp+1Ch+var_8]
.text:0040AC0C                 mov     esi, [esp+1Ch+var_4]
.text:0040AC10                 add     esp, 1Ch
.text:0040AC13                 retn
.text:0040AC14 ; ---------------------------------------------------------------------------
.text:0040AC14
.text:0040AC14 loc_40AC14:                             ; CODE XREF: sub_40ABC0+33↑j
.text:0040AC14                 movsx   edx, al
.text:0040AC17                 mov     [esp+1Ch+Val], edx ; Val
.text:0040AC1B                 lea     edx, [ebx+1]
.text:0040AC1E                 mov     [esp+1Ch+Str], edx ; Str
.text:0040AC21                 call    strchr
.text:0040AC26                 lea     esi, [esi+0]
.text:0040AC29                 lea     edi, [edi+0]
.text:0040AC30
.text:0040AC30 loc_40AC30:                             ; CODE XREF: sub_40ABC0+8C↓j
.text:0040AC30                 mov     edx, eax
.text:0040AC32
.text:0040AC32 loc_40AC32:                             ; CODE XREF: sub_40ABC0+2F↑j
.text:0040AC32                 test    edx, edx
.text:0040AC34                 jz      short loc_40AC00
.text:0040AC36                 mov     byte ptr [edx], 0
.text:0040AC39                 inc     edx
.text:0040AC3A                 mov     [esi], edx
.text:0040AC3C                 jmp     short loc_40AC06
.text:0040AC3C ; ---------------------------------------------------------------------------
.text:0040AC3E                 align 10h
.text:0040AC40
.text:0040AC40 loc_40AC40:                             ; CODE XREF: sub_40ABC0+26↑j
.text:0040AC40                 mov     [esp+1Ch+Val], edx ; Control
.text:0040AC44                 mov     [esp+1Ch+Str], ebx ; Str
.text:0040AC47                 call    strpbrk
.text:0040AC4C                 jmp     short loc_40AC30
.text:0040AC4C sub_40ABC0      endp
.text:0040AC4C
.text:0040AC4C ; ---------------------------------------------------------------------------
.text:0040AC4E                 align 10h
.text:0040AC50 ; const char aTmpf[]
.text:0040AC50 aTmpf           db 'tmpf',0             ; DATA XREF: sub_40AC60+20↓o
.text:0040AC55 ; const char aWBd[]
.text:0040AC55 aWBd            db 'w+bD',0             ; DATA XREF: sub_40AC60+5E↓o
.text:0040AC5A                 align 10h
.text:0040AC60
.text:0040AC60 ; =============== S U B R O U T I N E =======================================
.text:0040AC60
.text:0040AC60
.text:0040AC60 sub_40AC60      proc near               ; CODE XREF: sub_40A8EF+A4↑p
.text:0040AC60
.text:0040AC60 FileHandle      = dword ptr -13Ch
.text:0040AC60 Format          = dword ptr -138h
.text:0040AC60 var_134         = dword ptr -134h
.text:0040AC60 var_130         = dword ptr -130h
.text:0040AC60 var_12C         = dword ptr -12Ch
.text:0040AC60 FileName        = byte ptr -11Ch
.text:0040AC60 var_8           = dword ptr -8
.text:0040AC60 var_4           = dword ptr -4
.text:0040AC60
.text:0040AC60                 sub     esp, 13Ch
.text:0040AC66                 mov     [esp+13Ch+var_8], ebx
.text:0040AC6D                 lea     ebx, [esp+13Ch+FileName]
.text:0040AC71                 mov     [esp+13Ch+var_4], esi
.text:0040AC78                 mov     [esp+13Ch+var_12C], 0 ; int
.text:0040AC80                 mov     [esp+13Ch+var_130], offset aTmpf ; "tmpf"
.text:0040AC88                 mov     [esp+13Ch+var_134], 0 ; char *
.text:0040AC90                 mov     [esp+13Ch+Format], 104h ; int
.text:0040AC98                 mov     [esp+13Ch+FileHandle], ebx ; Buffer
.text:0040AC9B                 call    sub_40AD30
.text:0040ACA0                 xor     edx, edx
.text:0040ACA2                 test    eax, eax
.text:0040ACA4                 jnz     short loc_40ACD6
.text:0040ACA6                 mov     [esp+13Ch+FileHandle], ebx ; FileName
.text:0040ACA9                 mov     [esp+13Ch+Format], 0 ; int
.text:0040ACB1                 call    sub_40B0B0
.text:0040ACB6                 xor     edx, edx
.text:0040ACB8                 mov     ebx, eax
.text:0040ACBA                 test    eax, eax
.text:0040ACBC                 js      short loc_40ACD6
.text:0040ACBE                 mov     [esp+13Ch+Format], offset aWBd ; "w+bD"
.text:0040ACC6                 mov     [esp+13Ch+FileHandle], eax ; FileHandle
.text:0040ACC9                 call    _fdopen
.text:0040ACCE                 test    eax, eax
.text:0040ACD0                 mov     esi, eax
.text:0040ACD2                 jz      short loc_40ACED
.text:0040ACD4
.text:0040ACD4 loc_40ACD4:                             ; CODE XREF: sub_40AC60+95↓j
.text:0040ACD4                 mov     edx, esi
.text:0040ACD6
.text:0040ACD6 loc_40ACD6:                             ; CODE XREF: sub_40AC60+44↑j
.text:0040ACD6                                         ; sub_40AC60+5C↑j
.text:0040ACD6                 mov     ebx, [esp+13Ch+var_8]
.text:0040ACDD                 mov     eax, edx
.text:0040ACDF                 mov     esi, [esp+13Ch+var_4]
.text:0040ACE6                 add     esp, 13Ch
.text:0040ACEC                 retn
.text:0040ACED ; ---------------------------------------------------------------------------
.text:0040ACED
.text:0040ACED loc_40ACED:                             ; CODE XREF: sub_40AC60+72↑j
.text:0040ACED                 mov     [esp+13Ch+FileHandle], ebx ; FileHandle
.text:0040ACF0                 call    _close
.text:0040ACF5                 jmp     short loc_40ACD4
.text:0040ACF5 sub_40AC60      endp
.text:0040ACF5
.text:0040ACF5 ; ---------------------------------------------------------------------------
.text:0040ACF7                 align 10h
.text:0040AD00 aFile           db 'file',0             ; DATA XREF: sub_40AD30:loc_40AD5C↓o
.text:0040AD05 ; const char aSSxxxxxx[]
.text:0040AD05 aSSxxxxxx       db '%.*s/%.*sXXXXXX',0  ; DATA XREF: sub_40AD30+9B↓o
.text:0040AD15 ; const char aTemp[]
.text:0040AD15 aTemp           db 'TEMP',0             ; DATA XREF: sub_40AD30:loc_40AE12↓o
.text:0040AD15                                         ; sub_40AD30:loc_40AE52↓o ...
.text:0040AD1A ; const char aTmp[]
.text:0040AD1A aTmp            db '/tmp',0             ; DATA XREF: sub_40AD30+12F↓o
.text:0040AD1A                                         ; sub_40AD30+141↓o ...
.text:0040AD1F aTmpdir         db 'TMPDIR',0           ; DATA XREF: sub_40AD30:loc_40AED0↓o
.text:0040AD26 aTmp_0          db 'TMP',0              ; DATA XREF: sub_40AD30:loc_40AF60↓o
.text:0040AD2A                 align 10h
.text:0040AD30
.text:0040AD30 ; =============== S U B R O U T I N E =======================================
.text:0040AD30
.text:0040AD30
.text:0040AD30 ; int __cdecl sub_40AD30(char *Buffer, int, char *, char *, int)
.text:0040AD30 sub_40AD30      proc near               ; CODE XREF: sub_40AC60+3B↑p
.text:0040AD30
.text:0040AD30 Str             = dword ptr -1BCh
.text:0040AD30 Format          = dword ptr -1B8h
.text:0040AD30 var_1B4         = dword ptr -1B4h
.text:0040AD30 var_1B0         = dword ptr -1B0h
.text:0040AD30 var_1AC         = dword ptr -1ACh
.text:0040AD30 var_1A8         = dword ptr -1A8h
.text:0040AD30 var_19C         = dword ptr -19Ch
.text:0040AD30 var_13C         = dword ptr -13Ch
.text:0040AD30 var_DC          = dword ptr -0DCh
.text:0040AD30 var_7C          = dword ptr -7Ch
.text:0040AD30 Buffer          = dword ptr  4
.text:0040AD30 arg_4           = dword ptr  8
.text:0040AD30 arg_8           = dword ptr  0Ch
.text:0040AD30 arg_C           = dword ptr  10h
.text:0040AD30 arg_10          = dword ptr  14h
.text:0040AD30
.text:0040AD30                 push    ebp
.text:0040AD31                 push    edi
.text:0040AD32                 push    esi
.text:0040AD33                 push    ebx
.text:0040AD34                 sub     esp, 1ACh
.text:0040AD3A                 mov     eax, [esp+1BCh+arg_C]
.text:0040AD41                 mov     esi, [esp+1BCh+arg_8]
.text:0040AD48                 test    eax, eax
.text:0040AD4A                 jz      short loc_40AD5C
.text:0040AD4C                 mov     edx, [esp+1BCh+arg_C]
.text:0040AD53                 cmp     byte ptr [edx], 0
.text:0040AD56                 jnz     loc_40AF90
.text:0040AD5C
.text:0040AD5C loc_40AD5C:                             ; CODE XREF: sub_40AD30+1A↑j
.text:0040AD5C                 mov     eax, offset aFile ; "file"
.text:0040AD61                 mov     ebp, 4
.text:0040AD66                 mov     [esp+1BCh+arg_C], eax
.text:0040AD6D
.text:0040AD6D loc_40AD6D:                             ; CODE XREF: sub_40AD30+274↓j
.text:0040AD6D                                         ; sub_40AD30+27F↓j
.text:0040AD6D                 mov     ebx, [esp+1BCh+arg_10]
.text:0040AD74                 test    ebx, ebx
.text:0040AD76                 jnz     loc_40AED0
.text:0040AD7C
.text:0040AD7C loc_40AD7C:                             ; CODE XREF: sub_40AD30+21C↓j
.text:0040AD7C                                         ; sub_40AD30+224↓j ...
.text:0040AD7C                 test    esi, esi
.text:0040AD7E                 jz      loc_40AE12
.text:0040AD84
.text:0040AD84 loc_40AD84:                             ; CODE XREF: sub_40AD30+176↓j
.text:0040AD84                                         ; sub_40AD30+19A↓j
.text:0040AD84                 mov     [esp+1BCh+Str], esi ; Str
.text:0040AD87                 call    strlen
.text:0040AD8C                 test    eax, eax
.text:0040AD8E                 mov     edx, eax
.text:0040AD90                 jz      short loc_40ADA0
.text:0040AD92                 movzx   eax, byte ptr [eax+esi-1]
.text:0040AD97                 cmp     al, 2Fh ; '/'
.text:0040AD99                 jz      short loc_40AE00
.text:0040AD9B                 cmp     al, 5Ch ; '\'
.text:0040AD9D                 jz      short loc_40AE00
.text:0040AD9F                 nop
.text:0040ADA0
.text:0040ADA0 loc_40ADA0:                             ; CODE XREF: sub_40AD30+60↑j
.text:0040ADA0                                         ; sub_40AD30+D1↓j ...
.text:0040ADA0                 lea     edi, [ebp+edx+8]
.text:0040ADA4                 cmp     [esp+1BCh+arg_4], edi
.text:0040ADAB                 jb      short loc_40ADE8
.text:0040ADAD                 mov     [esp+1BCh+var_1AC], ebp
.text:0040ADB1                 mov     ecx, [esp+1BCh+arg_C]
.text:0040ADB8                 mov     ebp, [esp+1BCh+Buffer]
.text:0040ADBF                 mov     [esp+1BCh+var_1B0], esi
.text:0040ADC3                 mov     [esp+1BCh+var_1A8], ecx
.text:0040ADC7                 mov     [esp+1BCh+var_1B4], edx
.text:0040ADCB                 mov     [esp+1BCh+Format], offset aSSxxxxxx ; "%.*s/%.*sXXXXXX"
.text:0040ADD3                 mov     [esp+1BCh+Str], ebp ; Buffer
.text:0040ADD6                 call    sprintf
.text:0040ADDB                 xor     eax, eax
.text:0040ADDD
.text:0040ADDD loc_40ADDD:                             ; CODE XREF: sub_40AD30+C8↓j
.text:0040ADDD                 add     esp, 1ACh
.text:0040ADE3                 pop     ebx
.text:0040ADE4                 pop     esi
.text:0040ADE5                 pop     edi
.text:0040ADE6                 pop     ebp
.text:0040ADE7                 retn
.text:0040ADE8 ; ---------------------------------------------------------------------------
.text:0040ADE8
.text:0040ADE8 loc_40ADE8:                             ; CODE XREF: sub_40AD30+7B↑j
.text:0040ADE8                 call    _errno
.text:0040ADED                 mov     dword ptr [eax], 16h
.text:0040ADF3
.text:0040ADF3 loc_40ADF3:                             ; CODE XREF: sub_40AD30+187↓j
.text:0040ADF3                 mov     eax, 0FFFFFFFFh
.text:0040ADF8                 jmp     short loc_40ADDD
.text:0040ADF8 ; ---------------------------------------------------------------------------
.text:0040ADFA                 align 10h
.text:0040AE00
.text:0040AE00 loc_40AE00:                             ; CODE XREF: sub_40AD30+69↑j
.text:0040AE00                                         ; sub_40AD30+6D↑j ...
.text:0040AE00                 dec     edx
.text:0040AE01                 jz      short loc_40ADA0
.text:0040AE03                 movzx   eax, byte ptr [edx+esi-1]
.text:0040AE08                 cmp     al, 2Fh ; '/'
.text:0040AE0A                 jz      short loc_40AE00
.text:0040AE0C                 cmp     al, 5Ch ; '\'
.text:0040AE0E                 jz      short loc_40AE00
.text:0040AE10                 jmp     short loc_40ADA0
.text:0040AE12 ; ---------------------------------------------------------------------------
.text:0040AE12
.text:0040AE12 loc_40AE12:                             ; CODE XREF: sub_40AD30+4E↑j
.text:0040AE12                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:0040AE19                 lea     esi, [esp+1BCh+var_13C]
.text:0040AE20                 call    getenv
.text:0040AE25                 mov     [esp+1BCh+Format], eax ; char *
.text:0040AE29                 mov     [esp+1BCh+var_1B4], esi ; int
.text:0040AE2D                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:0040AE34                 call    sub_405960
.text:0040AE39                 test    eax, eax
.text:0040AE3B                 jnz     short loc_40AE52
.text:0040AE3D                 mov     edi, [esp+1BCh+var_13C]
.text:0040AE44                 and     edi, 0F000h
.text:0040AE4A                 cmp     edi, 4000h
.text:0040AE50                 jz      short loc_40AEBC
.text:0040AE52
.text:0040AE52 loc_40AE52:                             ; CODE XREF: sub_40AD30+10B↑j
.text:0040AE52                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:0040AE59                 call    getenv
.text:0040AE5E                 cld
.text:0040AE5F                 mov     edx, offset aTmp ; "/tmp"
.text:0040AE64                 mov     esi, eax
.text:0040AE66                 mov     ecx, 5
.text:0040AE6B                 mov     edi, edx
.text:0040AE6D                 repe cmpsb
.text:0040AE6F                 jz      short loc_40AEAC
.text:0040AE71                 mov     [esp+1BCh+Format], offset aTmp ; "/tmp"
.text:0040AE79                 lea     ecx, [esp+1BCh+var_19C]
.text:0040AE7D                 mov     [esp+1BCh+var_1B4], ecx ; int
.text:0040AE81                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:0040AE88                 call    sub_405960
.text:0040AE8D                 test    eax, eax
.text:0040AE8F                 jnz     short loc_40AEAC
.text:0040AE91                 mov     ebx, [esp+1BCh+var_19C]
.text:0040AE95                 mov     esi, offset aTmp ; "/tmp"
.text:0040AE9A                 and     ebx, 0F000h
.text:0040AEA0                 cmp     ebx, 4000h
.text:0040AEA6                 jz      loc_40AD84
.text:0040AEAC
.text:0040AEAC loc_40AEAC:                             ; CODE XREF: sub_40AD30+13F↑j
.text:0040AEAC                                         ; sub_40AD30+15F↑j
.text:0040AEAC                 call    _errno
.text:0040AEB1                 mov     dword ptr [eax], 2
.text:0040AEB7                 jmp     loc_40ADF3
.text:0040AEBC ; ---------------------------------------------------------------------------
.text:0040AEBC
.text:0040AEBC loc_40AEBC:                             ; CODE XREF: sub_40AD30+120↑j
.text:0040AEBC                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:0040AEC3                 call    getenv
.text:0040AEC8                 mov     esi, eax
.text:0040AECA                 jmp     loc_40AD84
.text:0040AECA ; ---------------------------------------------------------------------------
.text:0040AECF                 align 10h
.text:0040AED0
.text:0040AED0 loc_40AED0:                             ; CODE XREF: sub_40AD30+46↑j
.text:0040AED0                 mov     [esp+1BCh+Str], offset aTmpdir ; "TMPDIR"
.text:0040AED7                 call    sub_40B5C0
.text:0040AEDC                 test    eax, eax
.text:0040AEDE                 mov     ebx, eax
.text:0040AEE0                 jz      short loc_40AF60
.text:0040AEE2
.text:0040AEE2 loc_40AEE2:                             ; CODE XREF: sub_40AD30+240↓j
.text:0040AEE2                                         ; sub_40AD30+256↓j
.text:0040AEE2                 mov     [esp+1BCh+Format], ebx ; char *
.text:0040AEE6                 lea     edi, [esp+1BCh+var_7C]
.text:0040AEED                 mov     [esp+1BCh+var_1B4], edi ; int
.text:0040AEF1                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:0040AEF8                 call    sub_405960
.text:0040AEFD                 test    eax, eax
.text:0040AEFF                 jnz     short loc_40AF16
.text:0040AF01                 mov     edx, [esp+1BCh+var_7C]
.text:0040AF08                 and     edx, 0F000h
.text:0040AF0E                 cmp     edx, 4000h
.text:0040AF14                 jz      short loc_40AF59
.text:0040AF16
.text:0040AF16 loc_40AF16:                             ; CODE XREF: sub_40AD30+1CF↑j
.text:0040AF16                                         ; sub_40AD30+25C↓j
.text:0040AF16                 test    esi, esi
.text:0040AF18                 jz      short loc_40AF52
.text:0040AF1A                 mov     [esp+1BCh+Format], esi ; char *
.text:0040AF1E                 lea     ecx, [esp+1BCh+var_DC]
.text:0040AF25                 mov     [esp+1BCh+var_1B4], ecx ; int
.text:0040AF29                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:0040AF30                 call    sub_405960
.text:0040AF35                 test    eax, eax
.text:0040AF37                 jnz     short loc_40AF52
.text:0040AF39                 mov     ebx, [esp+1BCh+var_DC]
.text:0040AF40                 and     ebx, 0F000h
.text:0040AF46                 cmp     ebx, 4000h
.text:0040AF4C                 jz      loc_40AD7C
.text:0040AF52
.text:0040AF52 loc_40AF52:                             ; CODE XREF: sub_40AD30+1E8↑j
.text:0040AF52                                         ; sub_40AD30+207↑j
.text:0040AF52                 xor     esi, esi
.text:0040AF54                 jmp     loc_40AD7C
.text:0040AF59 ; ---------------------------------------------------------------------------
.text:0040AF59
.text:0040AF59 loc_40AF59:                             ; CODE XREF: sub_40AD30+1E4↑j
.text:0040AF59                 mov     esi, ebx
.text:0040AF5B                 jmp     loc_40AD7C
.text:0040AF60 ; ---------------------------------------------------------------------------
.text:0040AF60
.text:0040AF60 loc_40AF60:                             ; CODE XREF: sub_40AD30+1B0↑j
.text:0040AF60                 mov     [esp+1BCh+Str], offset aTmp_0 ; "TMP"
.text:0040AF67                 call    sub_40B5C0
.text:0040AF6C                 test    eax, eax
.text:0040AF6E                 mov     ebx, eax
.text:0040AF70                 jnz     loc_40AEE2
.text:0040AF76                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:0040AF7D                 call    sub_40B5C0
.text:0040AF82                 test    eax, eax
.text:0040AF84                 mov     ebx, eax
.text:0040AF86                 jnz     loc_40AEE2
.text:0040AF8C                 jmp     short loc_40AF16
.text:0040AF8C ; ---------------------------------------------------------------------------
.text:0040AF8E                 align 10h
.text:0040AF90
.text:0040AF90 loc_40AF90:                             ; CODE XREF: sub_40AD30+26↑j
.text:0040AF90                 mov     ecx, [esp+1BCh+arg_C]
.text:0040AF97                 mov     [esp+1BCh+Str], ecx ; Str
.text:0040AF9A                 call    strlen
.text:0040AF9F                 cmp     eax, 5
.text:0040AFA2                 mov     ebp, eax
.text:0040AFA4                 jbe     loc_40AD6D
.text:0040AFAA                 mov     ebp, 5
.text:0040AFAF                 jmp     loc_40AD6D
.text:0040AFAF sub_40AD30      endp
.text:0040AFAF
.text:0040AFAF ; ---------------------------------------------------------------------------
.text:0040AFB4                 align 10h
.text:0040AFC0 byte_40AFC0     db 61h                  ; DATA XREF: sub_40B0B0+DC↓r
.text:0040AFC0                                         ; sub_40B0B0+122↓r ...
.text:0040AFC1 aBcdefghijklmno db 'bcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789',0
.text:0040AFFF aXxxxxx         db 'XXXXXX',0           ; DATA XREF: sub_40B0B0+39↓o
.text:0040B006                 align 20h
.text:0040B020 aInvalidKindInG db 'invalid KIND in __gen_tempname',0
.text:0040B020                                         ; DATA XREF: sub_40B0B0:loc_40B328↓o
.text:0040B03F                 align 10h
.text:0040B040 aLibc05SrcStdio db '../../libc-0.5-src/stdio-common/tempname.c',0
.text:0040B040                                         ; DATA XREF: sub_40B0B0+405↓o
.text:0040B06B                 align 20h
.text:0040B080 aInvalidKindInG_0 db '! "invalid KIND in __gen_tempname"',0
.text:0040B080                                         ; DATA XREF: sub_40B0B0+40D↓o
.text:0040B0A3                 align 10h
.text:0040B0B0
.text:0040B0B0 ; =============== S U B R O U T I N E =======================================
.text:0040B0B0
.text:0040B0B0
.text:0040B0B0 ; int __cdecl sub_40B0B0(char *FileName, int)
.text:0040B0B0 sub_40B0B0      proc near               ; CODE XREF: sub_40AC60+51↑p
.text:0040B0B0
.text:0040B0B0 Str             = dword ptr -9Ch
.text:0040B0B0 OpenFlag        = dword ptr -98h
.text:0040B0B0 var_94          = dword ptr -94h
.text:0040B0B0 var_90          = dword ptr -90h
.text:0040B0B0 var_8C          = dword ptr -8Ch
.text:0040B0B0 var_88          = dword ptr -88h
.text:0040B0B0 var_84          = dword ptr -84h
.text:0040B0B0 var_80          = dword ptr -80h
.text:0040B0B0 var_7C          = dword ptr -7Ch
.text:0040B0B0 FileName        = dword ptr  4
.text:0040B0B0 arg_4           = dword ptr  8
.text:0040B0B0
.text:0040B0B0                 push    ebp
.text:0040B0B1                 push    edi
.text:0040B0B2                 push    esi
.text:0040B0B3                 push    ebx
.text:0040B0B4                 sub     esp, 8Ch
.text:0040B0BA                 mov     [esp+9Ch+var_88], 0FFFFFFFFh
.text:0040B0C2                 call    _errno
.text:0040B0C7                 mov     edx, [eax]
.text:0040B0C9                 mov     [esp+9Ch+var_8C], edx
.text:0040B0CD                 mov     edx, [esp+9Ch+FileName]
.text:0040B0D4                 mov     [esp+9Ch+Str], edx ; Str
.text:0040B0D7                 call    strlen
.text:0040B0DC                 cmp     eax, 5
.text:0040B0DF                 jle     short loc_40B0FD
.text:0040B0E1                 cld
.text:0040B0E2                 mov     ecx, [esp+9Ch+FileName]
.text:0040B0E9                 mov     edi, offset aXxxxxx ; "XXXXXX"
.text:0040B0EE                 lea     esi, [eax+ecx-6]
.text:0040B0F2                 mov     ecx, 7
.text:0040B0F7                 mov     ebp, esi
.text:0040B0F9                 repe cmpsb
.text:0040B0FB                 jz      short loc_40B118
.text:0040B0FD
.text:0040B0FD loc_40B0FD:                             ; CODE XREF: sub_40B0B0+2F↑j
.text:0040B0FD                 call    _errno
.text:0040B102                 mov     dword ptr [eax], 16h
.text:0040B108
.text:0040B108 loc_40B108:                             ; CODE XREF: sub_40B0B0+295↓j
.text:0040B108                                         ; sub_40B0B0+2D8↓j ...
.text:0040B108                 mov     eax, 0FFFFFFFFh
.text:0040B10D
.text:0040B10D loc_40B10D:                             ; CODE XREF: sub_40B0B0+2EF↓j
.text:0040B10D                                         ; sub_40B0B0+332↓j
.text:0040B10D                 add     esp, 8Ch
.text:0040B113                 pop     ebx
.text:0040B114                 pop     esi
.text:0040B115                 pop     edi
.text:0040B116                 pop     ebp
.text:0040B117                 retn
.text:0040B118 ; ---------------------------------------------------------------------------
.text:0040B118
.text:0040B118 loc_40B118:                             ; CODE XREF: sub_40B0B0+4B↑j
.text:0040B118                 mov     ecx, ds:dword_40F494
.text:0040B11E                 mov     edi, ds:dword_40F490
.text:0040B124                 mov     eax, ecx
.text:0040B126                 or      eax, edi
.text:0040B128                 jz      loc_40B463
.text:0040B12E
.text:0040B12E loc_40B12E:                             ; CODE XREF: sub_40B0B0+3F8↓j
.text:0040B12E                 rdtsc
.text:0040B130                 mov     edi, edx
.text:0040B132                 mov     esi, eax
.text:0040B134                 call    _getpid
.text:0040B139                 mov     ebx, eax
.text:0040B13B                 mov     edx, esi
.text:0040B13D                 sar     ebx, 1Fh
.text:0040B140                 xor     edx, eax
.text:0040B142                 mov     ecx, edi
.text:0040B144                 xor     ecx, ebx
.text:0040B146                 mov     ebx, edx
.text:0040B148                 mov     esi, ecx
.text:0040B14A                 add     ebx, ds:dword_40F490
.text:0040B150                 adc     esi, ds:dword_40F494
.text:0040B156                 xor     edi, edi
.text:0040B158                 mov     ds:dword_40F490, ebx
.text:0040B15E                 mov     ds:dword_40F494, esi
.text:0040B164                 lea     esi, [esi+0]
.text:0040B16A                 lea     edi, [edi+0]
.text:0040B170
.text:0040B170 loc_40B170:                             ; CODE XREF: sub_40B0B0+2C7↓j
.text:0040B170                 mov     [esp+9Ch+Str], ebx
.text:0040B173                 mov     [esp+9Ch+OpenFlag], esi
.text:0040B177                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040B17F                 mov     [esp+9Ch+var_90], 0
.text:0040B187                 call    sub_40CEA0
.text:0040B18C                 movzx   ecx, ds:byte_40AFC0[eax]
.text:0040B193                 mov     [ebp+0], cl
.text:0040B196                 mov     [esp+9Ch+Str], ebx
.text:0040B199                 mov     [esp+9Ch+OpenFlag], esi
.text:0040B19D                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040B1A5                 mov     [esp+9Ch+var_90], 0
.text:0040B1AD                 call    sub_40CD80
.text:0040B1B2                 mov     [esp+9Ch+Str], eax
.text:0040B1B5                 mov     ebx, eax
.text:0040B1B7                 mov     esi, edx
.text:0040B1B9                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040B1C1                 mov     [esp+9Ch+var_90], 0
.text:0040B1C9                 mov     [esp+9Ch+OpenFlag], edx
.text:0040B1CD                 call    sub_40CEA0
.text:0040B1D2                 movzx   edx, ds:byte_40AFC0[eax]
.text:0040B1D9                 mov     [ebp+1], dl
.text:0040B1DC                 mov     [esp+9Ch+Str], ebx
.text:0040B1DF                 mov     [esp+9Ch+OpenFlag], esi
.text:0040B1E3                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040B1EB                 mov     [esp+9Ch+var_90], 0
.text:0040B1F3                 call    sub_40CD80
.text:0040B1F8                 mov     [esp+9Ch+Str], eax
.text:0040B1FB                 mov     ebx, eax
.text:0040B1FD                 mov     esi, edx
.text:0040B1FF                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040B207                 mov     [esp+9Ch+var_90], 0
.text:0040B20F                 mov     [esp+9Ch+OpenFlag], edx
.text:0040B213                 call    sub_40CEA0
.text:0040B218                 movzx   ecx, ds:byte_40AFC0[eax]
.text:0040B21F                 mov     [ebp+2], cl
.text:0040B222                 mov     [esp+9Ch+Str], ebx
.text:0040B225                 mov     [esp+9Ch+OpenFlag], esi
.text:0040B229                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040B231                 mov     [esp+9Ch+var_90], 0
.text:0040B239                 call    sub_40CD80
.text:0040B23E                 mov     [esp+9Ch+Str], eax
.text:0040B241                 mov     ebx, eax
.text:0040B243                 mov     esi, edx
.text:0040B245                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040B24D                 mov     [esp+9Ch+var_90], 0
.text:0040B255                 mov     [esp+9Ch+OpenFlag], edx
.text:0040B259                 call    sub_40CEA0
.text:0040B25E                 movzx   edx, ds:byte_40AFC0[eax]
.text:0040B265                 mov     [ebp+3], dl
.text:0040B268                 mov     [esp+9Ch+Str], ebx
.text:0040B26B                 mov     [esp+9Ch+OpenFlag], esi
.text:0040B26F                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040B277                 mov     [esp+9Ch+var_90], 0
.text:0040B27F                 call    sub_40CD80
.text:0040B284                 mov     [esp+9Ch+Str], eax
.text:0040B287                 mov     ebx, eax
.text:0040B289                 mov     esi, edx
.text:0040B28B                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040B293                 mov     [esp+9Ch+var_90], 0
.text:0040B29B                 mov     [esp+9Ch+OpenFlag], edx
.text:0040B29F                 call    sub_40CEA0
.text:0040B2A4                 movzx   ecx, ds:byte_40AFC0[eax]
.text:0040B2AB                 mov     [ebp+4], cl
.text:0040B2AE                 mov     [esp+9Ch+Str], ebx
.text:0040B2B1                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040B2B9                 mov     [esp+9Ch+var_90], 0
.text:0040B2C1                 mov     [esp+9Ch+OpenFlag], esi
.text:0040B2C5                 call    sub_40CD80
.text:0040B2CA                 mov     [esp+9Ch+Str], eax
.text:0040B2CD                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040B2D5                 mov     [esp+9Ch+var_90], 0
.text:0040B2DD                 mov     [esp+9Ch+OpenFlag], edx
.text:0040B2E1                 call    sub_40CEA0
.text:0040B2E6                 movzx   ebx, ds:byte_40AFC0[eax]
.text:0040B2ED                 mov     [ebp+5], bl
.text:0040B2F0                 cmp     [esp+9Ch+arg_4], 1
.text:0040B2F8                 jz      loc_40B447
.text:0040B2FE                 cmp     [esp+9Ch+arg_4], 1
.text:0040B306                 jle     loc_40B410
.text:0040B30C                 cmp     [esp+9Ch+arg_4], 2
.text:0040B314                 jz      loc_40B3E7
.text:0040B31A                 cmp     [esp+9Ch+arg_4], 3
.text:0040B322                 jz      loc_40B3A4
.text:0040B328
.text:0040B328 loc_40B328:                             ; CODE XREF: sub_40B0B0+369↓j
.text:0040B328                 mov     ebx, offset aInvalidKindInG ; "invalid KIND in __gen_tempname"
.text:0040B32D                 test    ebx, ebx
.text:0040B32F                 jnz     loc_40B4AD
.text:0040B335
.text:0040B335 loc_40B335:                             ; CODE XREF: sub_40B0B0+354↓j
.text:0040B335                 mov     eax, [esp+9Ch+var_88]
.text:0040B339                 test    eax, eax
.text:0040B33B                 jns     short loc_40B390
.text:0040B33D                 call    _errno
.text:0040B342                 cmp     dword ptr [eax], 11h
.text:0040B345                 jnz     loc_40B108
.text:0040B34B
.text:0040B34B loc_40B34B:                             ; CODE XREF: sub_40B0B0+315↓j
.text:0040B34B                 mov     edx, ds:dword_40F490
.text:0040B351                 mov     ecx, ds:dword_40F494
.text:0040B357                 add     edx, 1E61h
.text:0040B35D                 adc     ecx, 0
.text:0040B360                 mov     ebx, edx
.text:0040B362                 inc     edi
.text:0040B363                 mov     ds:dword_40F490, edx
.text:0040B369                 cmp     edi, 3A2F8h
.text:0040B36F                 mov     esi, ecx
.text:0040B371                 mov     ds:dword_40F494, ecx
.text:0040B377                 jb      loc_40B170
.text:0040B37D                 call    _errno
.text:0040B382                 mov     dword ptr [eax], 11h
.text:0040B388                 jmp     loc_40B108
.text:0040B388 ; ---------------------------------------------------------------------------
.text:0040B38D                 align 10h
.text:0040B390
.text:0040B390 loc_40B390:                             ; CODE XREF: sub_40B0B0+28B↑j
.text:0040B390                 call    _errno
.text:0040B395                 mov     esi, [esp+9Ch+var_8C]
.text:0040B399                 mov     [eax], esi
.text:0040B39B                 mov     eax, [esp+9Ch+var_88]
.text:0040B39F                 jmp     loc_40B10D
.text:0040B3A4 ; ---------------------------------------------------------------------------
.text:0040B3A4
.text:0040B3A4 loc_40B3A4:                             ; CODE XREF: sub_40B0B0+272↑j
.text:0040B3A4                 mov     [esp+9Ch+Str], 0 ; LPCSTR
.text:0040B3AB                 mov     ecx, [esp+9Ch+FileName]
.text:0040B3B2                 lea     esi, [esp+9Ch+var_7C]
.text:0040B3B6                 mov     [esp+9Ch+var_94], esi ; int
.text:0040B3BA                 mov     [esp+9Ch+OpenFlag], ecx ; int
.text:0040B3BE                 call    sub_405C80
.text:0040B3C3                 test    eax, eax
.text:0040B3C5                 jns     short loc_40B34B
.text:0040B3C7                 call    _errno
.text:0040B3CC                 cmp     dword ptr [eax], 2
.text:0040B3CF                 jnz     loc_40B108
.text:0040B3D5                 call    _errno
.text:0040B3DA                 mov     ebx, [esp+9Ch+var_8C]
.text:0040B3DE                 mov     [eax], ebx
.text:0040B3E0                 xor     eax, eax
.text:0040B3E2                 jmp     loc_40B10D
.text:0040B3E7 ; ---------------------------------------------------------------------------
.text:0040B3E7
.text:0040B3E7 loc_40B3E7:                             ; CODE XREF: sub_40B0B0+264↑j
.text:0040B3E7                 mov     [esp+9Ch+OpenFlag], 1C0h ; int
.text:0040B3EF                 mov     edx, [esp+9Ch+FileName]
.text:0040B3F6                 mov     [esp+9Ch+Str], edx ; LPCSTR
.text:0040B3F9                 call    sub_40B4E0
.text:0040B3FE                 mov     esi, esi
.text:0040B400
.text:0040B400 loc_40B400:                             ; CODE XREF: sub_40B0B0+395↓j
.text:0040B400                 mov     [esp+9Ch+var_88], eax
.text:0040B404                 jmp     loc_40B335
.text:0040B404 ; ---------------------------------------------------------------------------
.text:0040B409                 align 10h
.text:0040B410
.text:0040B410 loc_40B410:                             ; CODE XREF: sub_40B0B0+256↑j
.text:0040B410                 mov     eax, [esp+9Ch+arg_4]
.text:0040B417                 test    eax, eax
.text:0040B419                 jnz     loc_40B328
.text:0040B41F                 mov     [esp+9Ch+var_94], 180h
.text:0040B427                 mov     esi, [esp+9Ch+FileName]
.text:0040B42E                 mov     [esp+9Ch+OpenFlag], 8502h ; OpenFlag
.text:0040B436                 mov     [esp+9Ch+Str], esi ; FileName
.text:0040B439                 lea     esi, [esi+0]
.text:0040B440
.text:0040B440 loc_40B440:                             ; CODE XREF: sub_40B0B0+3B1↓j
.text:0040B440                 call    _open
.text:0040B445                 jmp     short loc_40B400
.text:0040B447 ; ---------------------------------------------------------------------------
.text:0040B447
.text:0040B447 loc_40B447:                             ; CODE XREF: sub_40B0B0+248↑j
.text:0040B447                 mov     [esp+9Ch+var_94], 180h
.text:0040B44F                 mov     ebx, [esp+9Ch+FileName]
.text:0040B456                 mov     [esp+9Ch+OpenFlag], 8502h
.text:0040B45E                 mov     [esp+9Ch+Str], ebx
.text:0040B461                 jmp     short loc_40B440
.text:0040B463 ; ---------------------------------------------------------------------------
.text:0040B463
.text:0040B463 loc_40B463:                             ; CODE XREF: sub_40B0B0+78↑j
.text:0040B463                 mov     [esp+9Ch+OpenFlag], 0
.text:0040B46B                 lea     ebx, [esp+9Ch+var_84]
.text:0040B46F                 mov     [esp+9Ch+Str], ebx
.text:0040B472                 call    sub_40B560
.text:0040B477                 mov     edi, [esp+9Ch+var_80]
.text:0040B47B                 mov     edx, [esp+9Ch+var_84]
.text:0040B47F                 mov     ecx, edi
.text:0040B481                 mov     ebx, edi
.text:0040B483                 shl     ecx, 10h
.text:0040B486                 sar     ebx, 1Fh
.text:0040B489                 shld    ebx, edi, 10h
.text:0040B48D                 mov     esi, edx
.text:0040B48F                 mov     edi, edx
.text:0040B491                 mov     edx, ecx
.text:0040B493                 sar     edi, 1Fh
.text:0040B496                 xor     edx, esi
.text:0040B498                 mov     ds:dword_40F490, edx
.text:0040B49E                 mov     esi, ebx
.text:0040B4A0                 xor     esi, edi
.text:0040B4A2                 mov     ds:dword_40F494, esi
.text:0040B4A8                 jmp     loc_40B12E
.text:0040B4AD ; ---------------------------------------------------------------------------
.text:0040B4AD
.text:0040B4AD loc_40B4AD:                             ; CODE XREF: sub_40B0B0+27F↑j
.text:0040B4AD                 mov     [esp+9Ch+var_94], 151h
.text:0040B4B5                 mov     [esp+9Ch+OpenFlag], offset aLibc05SrcStdio ; "../../libc-0.5-src/stdio-common/tempnam"...
.text:0040B4BD                 mov     [esp+9Ch+Str], offset aInvalidKindInG_0 ; "! \"invalid KIND in __gen_tempname\""
.text:0040B4C4                 call    _assert
.text:0040B4C4 sub_40B0B0      endp
.text:0040B4C4
.text:0040B4C4 ; ---------------------------------------------------------------------------
.text:0040B4C9                 align 20h
.text:0040B4E0
.text:0040B4E0 ; =============== S U B R O U T I N E =======================================
.text:0040B4E0
.text:0040B4E0
.text:0040B4E0 ; int __cdecl sub_40B4E0(LPCSTR, int)
.text:0040B4E0 sub_40B4E0      proc near               ; CODE XREF: sub_40B0B0+349↑p
.text:0040B4E0
.text:0040B4E0 lpPathName      = dword ptr -1Ch
.text:0040B4E0 lpSecurityAttributes= dword ptr -18h
.text:0040B4E0 var_8           = dword ptr -8
.text:0040B4E0 var_4           = dword ptr -4
.text:0040B4E0 arg_0           = dword ptr  4
.text:0040B4E0 arg_4           = dword ptr  8
.text:0040B4E0
.text:0040B4E0                 sub     esp, 1Ch
.text:0040B4E3                 mov     [esp+1Ch+var_8], ebx
.text:0040B4E7                 mov     ebx, [esp+1Ch+arg_0]
.text:0040B4EB                 mov     [esp+1Ch+var_4], esi
.text:0040B4EF                 mov     esi, [esp+1Ch+arg_4]
.text:0040B4F3                 test    ebx, ebx
.text:0040B4F5                 jz      short loc_40B545
.text:0040B4F7                 mov     [esp+1Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:0040B4FF                 mov     [esp+1Ch+lpPathName], ebx ; lpPathName
.text:0040B502                 call    CreateDirectoryA
.text:0040B507                 sub     esp, 8
.text:0040B50A                 test    eax, eax
.text:0040B50C                 jz      short loc_40B526
.text:0040B50E                 mov     [esp+1Ch+arg_4], esi
.text:0040B512                 mov     esi, [esp+1Ch+var_4]
.text:0040B516                 mov     [esp+1Ch+arg_0], ebx
.text:0040B51A                 mov     ebx, [esp+1Ch+var_8]
.text:0040B51E                 add     esp, 1Ch
.text:0040B521                 jmp     _chmod
.text:0040B526 ; ---------------------------------------------------------------------------
.text:0040B526
.text:0040B526 loc_40B526:                             ; CODE XREF: sub_40B4E0+2C↑j
.text:0040B526                 call    sub_4067D0
.text:0040B52B                 mov     esi, eax
.text:0040B52D                 call    _errno
.text:0040B532                 mov     [eax], esi
.text:0040B534
.text:0040B534 loc_40B534:                             ; CODE XREF: sub_40B4E0+70↓j
.text:0040B534                 mov     ebx, [esp+1Ch+var_8]
.text:0040B538                 mov     eax, 0FFFFFFFFh
.text:0040B53D                 mov     esi, [esp+1Ch+var_4]
.text:0040B541                 add     esp, 1Ch
.text:0040B544                 retn
.text:0040B545 ; ---------------------------------------------------------------------------
.text:0040B545
.text:0040B545 loc_40B545:                             ; CODE XREF: sub_40B4E0+15↑j
.text:0040B545                 call    _errno
.text:0040B54A                 mov     dword ptr [eax], 16h
.text:0040B550                 jmp     short loc_40B534
.text:0040B550 sub_40B4E0      endp
.text:0040B550
.text:0040B550 ; ---------------------------------------------------------------------------
.text:0040B552                 align 10h
.text:0040B560
.text:0040B560 ; =============== S U B R O U T I N E =======================================
.text:0040B560
.text:0040B560
.text:0040B560 sub_40B560      proc near               ; CODE XREF: sub_40B0B0+3C2↑p
.text:0040B560
.text:0040B560 var_1C          = dword ptr -1Ch
.text:0040B560 var_18          = dword ptr -18h
.text:0040B560 var_C           = dword ptr -0Ch
.text:0040B560 var_8           = dword ptr -8
.text:0040B560 var_4           = dword ptr -4
.text:0040B560 arg_0           = dword ptr  4
.text:0040B560 arg_4           = dword ptr  8
.text:0040B560
.text:0040B560                 sub     esp, 1Ch
.text:0040B563                 mov     edx, [esp+1Ch+arg_4]
.text:0040B567                 mov     [esp+1Ch+var_4], ebx
.text:0040B56B                 mov     ebx, [esp+1Ch+arg_0]
.text:0040B56F                 mov     [esp+1Ch+var_18], edx
.text:0040B573                 lea     edx, [esp+1Ch+var_C]
.text:0040B577                 mov     [esp+1Ch+var_1C], edx
.text:0040B57A                 call    sub_40B5E0
.text:0040B57F                 test    eax, eax
.text:0040B581                 mov     edx, 0FFFFFFFFh
.text:0040B586                 jnz     short loc_40B5AA
.text:0040B588                 mov     ecx, [esp+1Ch+var_C]
.text:0040B58C                 mov     edx, 10624DD3h
.text:0040B591                 mov     [ebx], ecx
.text:0040B593                 mov     ecx, [esp+1Ch+var_8]
.text:0040B597                 mov     eax, ecx
.text:0040B599                 imul    edx
.text:0040B59B                 mov     eax, ecx
.text:0040B59D                 sar     eax, 1Fh
.text:0040B5A0                 sar     edx, 6
.text:0040B5A3                 sub     edx, eax
.text:0040B5A5                 mov     [ebx+4], edx
.text:0040B5A8                 xor     edx, edx
.text:0040B5AA
.text:0040B5AA loc_40B5AA:                             ; CODE XREF: sub_40B560+26↑j
.text:0040B5AA                 mov     ebx, [esp+1Ch+var_4]
.text:0040B5AE                 mov     eax, edx
.text:0040B5B0                 add     esp, 1Ch
.text:0040B5B3                 retn
.text:0040B5B3 sub_40B560      endp
.text:0040B5B3
.text:0040B5B3 ; ---------------------------------------------------------------------------
.text:0040B5B4                 align 10h
.text:0040B5C0
.text:0040B5C0 ; =============== S U B R O U T I N E =======================================
.text:0040B5C0
.text:0040B5C0
.text:0040B5C0 sub_40B5C0      proc near               ; CODE XREF: sub_40AD30+1A7↑p
.text:0040B5C0                                         ; sub_40AD30+237↑p ...
.text:0040B5C0                 mov     edx, ds:dword_40F4A0
.text:0040B5C6                 test    edx, edx
.text:0040B5C8                 jnz     short loc_40B5D0
.text:0040B5CA                 jmp     getenv
.text:0040B5CA ; ---------------------------------------------------------------------------
.text:0040B5CF                 align 10h
.text:0040B5D0
.text:0040B5D0 loc_40B5D0:                             ; CODE XREF: sub_40B5C0+8↑j
.text:0040B5D0                 xor     eax, eax
.text:0040B5D2                 retn
.text:0040B5D2 sub_40B5C0      endp
.text:0040B5D2
.text:0040B5D2 ; ---------------------------------------------------------------------------
.text:0040B5D3                 align 10h
.text:0040B5E0
.text:0040B5E0 ; =============== S U B R O U T I N E =======================================
.text:0040B5E0
.text:0040B5E0
.text:0040B5E0 sub_40B5E0      proc near               ; CODE XREF: sub_40B560+1A↑p
.text:0040B5E0
.text:0040B5E0 lpTimeZoneInformation= dword ptr -0DCh
.text:0040B5E0 var_D8          = dword ptr -0D8h
.text:0040B5E0 var_D4          = dword ptr -0D4h
.text:0040B5E0 var_D0          = dword ptr -0D0h
.text:0040B5E0 SystemTimeAsFileTime= _FILETIME ptr -0C4h
.text:0040B5E0 TimeZoneInformation= _TIME_ZONE_INFORMATION ptr -0BCh
.text:0040B5E0 arg_0           = dword ptr  4
.text:0040B5E0 arg_4           = dword ptr  8
.text:0040B5E0
.text:0040B5E0                 push    edi
.text:0040B5E1                 push    esi
.text:0040B5E2                 push    ebx
.text:0040B5E3                 sub     esp, 0D0h
.text:0040B5E9                 mov     ebx, [esp+0DCh+arg_4]
.text:0040B5F0                 mov     edi, [esp+0DCh+arg_0]
.text:0040B5F7                 test    ebx, ebx
.text:0040B5F9                 jz      short loc_40B624
.text:0040B5FB                 lea     edx, [esp+0DCh+TimeZoneInformation]
.text:0040B5FF                 mov     [esp+0DCh+lpTimeZoneInformation], edx ; lpTimeZoneInformation
.text:0040B602                 call    GetTimeZoneInformation
.text:0040B607                 sub     esp, 4
.text:0040B60A                 cmp     eax, 0FFFFFFFFh
.text:0040B60D                 jz      loc_40B6A5
.text:0040B613                 xor     ecx, ecx
.text:0040B615                 mov     esi, [esp+0DCh+TimeZoneInformation.Bias]
.text:0040B619                 cmp     eax, 2
.text:0040B61C                 setz    cl
.text:0040B61F                 mov     [ebx], esi
.text:0040B621                 mov     [ebx+4], ecx
.text:0040B624
.text:0040B624 loc_40B624:                             ; CODE XREF: sub_40B5E0+19↑j
.text:0040B624                                         ; sub_40B5E0+E0↓j
.text:0040B624                 test    edi, edi
.text:0040B626                 jz      short loc_40B699
.text:0040B628                 lea     ecx, [esp+0DCh+SystemTimeAsFileTime]
.text:0040B62C                 mov     [esp+0DCh+lpTimeZoneInformation], ecx ; lpSystemTimeAsFileTime
.text:0040B62F                 call    GetSystemTimeAsFileTime
.text:0040B634                 sub     esp, 4
.text:0040B637                 mov     ebx, [esp+0DCh+SystemTimeAsFileTime.dwLowDateTime]
.text:0040B63B                 mov     [esp+0DCh+var_D4], 989680h
.text:0040B643                 mov     esi, [esp+0DCh+SystemTimeAsFileTime.dwHighDateTime]
.text:0040B647                 mov     [esp+0DCh+var_D0], 0
.text:0040B64F                 add     ebx, 2AC18000h
.text:0040B655                 adc     esi, 0FE624E21h
.text:0040B65B                 mov     [esp+0DCh+SystemTimeAsFileTime.dwLowDateTime], ebx
.text:0040B65F                 mov     [esp+0DCh+lpTimeZoneInformation], ebx
.text:0040B662                 mov     [esp+0DCh+SystemTimeAsFileTime.dwHighDateTime], esi
.text:0040B666                 mov     [esp+0DCh+var_D8], esi
.text:0040B66A                 call    sub_40CD80
.text:0040B66F                 mov     [edi], eax
.text:0040B671                 mov     [esp+0DCh+lpTimeZoneInformation], ebx
.text:0040B674                 mov     [esp+0DCh+var_D4], 989680h
.text:0040B67C                 mov     [esp+0DCh+var_D0], 0
.text:0040B684                 mov     [esp+0DCh+var_D8], esi
.text:0040B688                 call    sub_40CEA0
.text:0040B68D                 lea     ebx, [eax+eax*4]
.text:0040B690                 lea     edx, [ebx+ebx*4]
.text:0040B693                 shl     edx, 2
.text:0040B696                 mov     [edi+4], edx
.text:0040B699
.text:0040B699 loc_40B699:                             ; CODE XREF: sub_40B5E0+46↑j
.text:0040B699                 add     esp, 0D0h
.text:0040B69F                 xor     eax, eax
.text:0040B6A1                 pop     ebx
.text:0040B6A2                 pop     esi
.text:0040B6A3                 pop     edi
.text:0040B6A4                 retn
.text:0040B6A5 ; ---------------------------------------------------------------------------
.text:0040B6A5
.text:0040B6A5 loc_40B6A5:                             ; CODE XREF: sub_40B5E0+2D↑j
.text:0040B6A5                 mov     dword ptr [ebx], 0
.text:0040B6AB                 mov     dword ptr [ebx+4], 0
.text:0040B6B2                 call    sub_4067D0
.text:0040B6B7                 mov     esi, eax
.text:0040B6B9                 call    _errno
.text:0040B6BE                 mov     [eax], esi
.text:0040B6C0                 jmp     loc_40B624
.text:0040B6C0 sub_40B5E0      endp
.text:0040B6C0
.text:0040B6C0 ; ---------------------------------------------------------------------------
.text:0040B6C5                 align 10h
.text:0040B6D0                 sub     esp, 0Ch
.text:0040B6D3                 mov     [esp+4], ebx
.text:0040B6D7                 mov     [esp+8], esi
.text:0040B6DB                 xor     esi, esi
.text:0040B6DD                 call    sub_40B750
.text:0040B6E2                 mov     ebx, eax
.text:0040B6E4                 call    sub_40B740
.text:0040B6E9                 cmp     ebx, eax
.text:0040B6EB                 jz      short loc_40B704
.text:0040B6ED
.text:0040B6ED loc_40B6ED:                             ; CODE XREF: .text:0040B712↓j
.text:0040B6ED                 mov     esi, 1
.text:0040B6F2
.text:0040B6F2 loc_40B6F2:                             ; CODE XREF: .text:0040B714↓j
.text:0040B6F2                 mov     ds:dword_40F4A0, esi
.text:0040B6F8                 mov     ebx, [esp+4]
.text:0040B6FC                 mov     esi, [esp+8]
.text:0040B700                 add     esp, 0Ch
.text:0040B703                 retn
.text:0040B704 ; ---------------------------------------------------------------------------
.text:0040B704
.text:0040B704 loc_40B704:                             ; CODE XREF: .text:0040B6EB↑j
.text:0040B704                 call    sub_40B730
.text:0040B709                 mov     ebx, eax
.text:0040B70B                 call    sub_40B720
.text:0040B710                 cmp     ebx, eax
.text:0040B712                 jnz     short loc_40B6ED
.text:0040B714                 jmp     short loc_40B6F2
.text:0040B714 ; ---------------------------------------------------------------------------
.text:0040B716                 align 10h
.text:0040B720
.text:0040B720 ; =============== S U B R O U T I N E =======================================
.text:0040B720
.text:0040B720
.text:0040B720 sub_40B720      proc near               ; CODE XREF: .text:0040B70B↑p
.text:0040B720                 xor     eax, eax
.text:0040B722                 retn
.text:0040B722 sub_40B720      endp
.text:0040B722
.text:0040B722 ; ---------------------------------------------------------------------------
.text:0040B723                 align 10h
.text:0040B730
.text:0040B730 ; =============== S U B R O U T I N E =======================================
.text:0040B730
.text:0040B730
.text:0040B730 sub_40B730      proc near               ; CODE XREF: .text:loc_40B704↑p
.text:0040B730                 xor     eax, eax
.text:0040B732                 retn
.text:0040B732 sub_40B730      endp
.text:0040B732
.text:0040B732 ; ---------------------------------------------------------------------------
.text:0040B733                 align 10h
.text:0040B740
.text:0040B740 ; =============== S U B R O U T I N E =======================================
.text:0040B740
.text:0040B740
.text:0040B740 sub_40B740      proc near               ; CODE XREF: .text:0040B6E4↑p
.text:0040B740                 xor     eax, eax
.text:0040B742                 retn
.text:0040B742 sub_40B740      endp
.text:0040B742
.text:0040B742 ; ---------------------------------------------------------------------------
.text:0040B743                 align 10h
.text:0040B750
.text:0040B750 ; =============== S U B R O U T I N E =======================================
.text:0040B750
.text:0040B750
.text:0040B750 sub_40B750      proc near               ; CODE XREF: .text:0040B6DD↑p
.text:0040B750                 xor     eax, eax
.text:0040B752                 retn
.text:0040B752 sub_40B750      endp
.text:0040B752
.text:0040B752 ; ---------------------------------------------------------------------------
.text:0040B753                 align 10h
.text:0040B760
.text:0040B760 ; =============== S U B R O U T I N E =======================================
.text:0040B760
.text:0040B760 ; Attributes: thunk
.text:0040B760
.text:0040B760 ; HRESULT __stdcall OleInitialize(LPVOID pvReserved)
.text:0040B760 OleInitialize   proc near               ; CODE XREF: sub_405A20+1A↑p
.text:0040B760
.text:0040B760 pvReserved      = dword ptr  4
.text:0040B760
.text:0040B760                 jmp     ds:__imp_OleInitialize
.text:0040B760 OleInitialize   endp
.text:0040B760
.text:0040B760 ; ---------------------------------------------------------------------------
.text:0040B766                 align 10h
.text:0040B770
.text:0040B770 ; =============== S U B R O U T I N E =======================================
.text:0040B770
.text:0040B770 ; Attributes: thunk
.text:0040B770
.text:0040B770 ; HRESULT __stdcall CoCreateInstance(const IID *const rclsid, LPUNKNOWN pUnkOuter, DWORD dwClsContext, const IID *const riid, LPVOID *ppv)
.text:0040B770 CoCreateInstance proc near              ; CODE XREF: sub_405A20+52↑p
.text:0040B770
.text:0040B770 rclsid          = dword ptr  4
.text:0040B770 pUnkOuter       = dword ptr  8
.text:0040B770 dwClsContext    = dword ptr  0Ch
.text:0040B770 riid            = dword ptr  10h
.text:0040B770 ppv             = dword ptr  14h
.text:0040B770
.text:0040B770                 jmp     ds:__imp_CoCreateInstance
.text:0040B770 CoCreateInstance endp
.text:0040B770
.text:0040B770 ; ---------------------------------------------------------------------------
.text:0040B776                 align 10h
.text:0040B780
.text:0040B780 ; =============== S U B R O U T I N E =======================================
.text:0040B780
.text:0040B780 ; Attributes: thunk
.text:0040B780
.text:0040B780 ; void __stdcall CoUninitialize()
.text:0040B780 CoUninitialize  proc near               ; CODE XREF: sub_405A20+14E↑p
.text:0040B780                                         ; sub_405A20+16D↑p
.text:0040B780                 jmp     ds:__imp_CoUninitialize
.text:0040B780 CoUninitialize  endp
.text:0040B780
.text:0040B780 ; ---------------------------------------------------------------------------
.text:0040B786                 align 10h
.text:0040B790                 add     al, 0BAh ; 'º'
.text:0040B792                 retf
.text:0040B792 ; ---------------------------------------------------------------------------
.text:0040B793                 db 7Eh
.text:0040B794                 dd 11CF2D97h, 0AA0029A2h, 52733D00h, 40FC6ED4h, 11CF2438h
.text:0040B794                 dd 8DBA3h, 225F136h, 40FC6ED8h, 11CF2438h, 8DBA3h, 225F136h
.text:0040B794                 dd 40FC6ED3h, 11CF2438h, 8DBA3h, 225F136h, 0DE86A58h, 11CF2BAAh
.text:0040B794                 dd 0AA0029A2h, 52733D00h, 40FC6ED6h, 11CF2438h, 8DBA3h
.text:0040B794                 dd 225F136h, 40FC6ED7h, 11CF2438h, 8DBA3h, 225F136h, 0DE86A56h
.text:0040B794                 dd 11CF2BAAh, 0AA0029A2h, 52733D00h, 0DE86A55h, 11CF2BAAh
.text:0040B794                 dd 0AA0029A2h, 52733D00h, 0DE86A51h, 11CF2BAAh, 0AA0029A2h
.text:0040B794                 dd 52733D00h, 0DE86A57h, 11CF2BAAh, 0AA0029A2h, 52733D00h
.text:0040B794                 dd 0DE86A52h, 11CF2BAAh, 0AA0029A2h, 52733D00h, 0DE86A54h
.text:0040B794                 dd 11CF2BAAh, 0AA0029A2h, 52733D00h, 0DE86A53h, 11CF2BAAh
.text:0040B794                 dd 0AA0029A2h, 52733D00h, 40FC6ED9h, 11CF2438h, 8DBA3h
.text:0040B794                 dd 225F136h, 40FC6ED5h, 11CF2438h, 8DBA3h, 225F136h, 0DE86A50h
.text:0040B794                 dd 11CF2BAAh, 0AA0029A2h, 52733D00h, 7DD95802h, 11CF9882h
.text:0040B794                 dd 0AA00A99Fh, 0C4426C00h, 7DD95801h, 11CF9882h, 0AA00A99Fh
.text:0040B794                 dd 0C4426C00h, 330h, 0
.text:0040B8C8                 dd 0C0h, 46000000h, 0BE35201h, 11CE8F91h, 0AA00E39Dh, 51B84B00h
.text:0040B8C8                 dd 0BE35200h, 11CE8F91h, 0AA00E39Dh, 51B84B00h, 0BE35202h
.text:0040B8C8                 dd 11CE8F91h, 0AA00E39Dh, 51B84B00h, 0FB8F0822h, 101B0164h
.text:0040B8C8                 dd 8ED84h, 13C72E2Bh, 332h, 0
.text:0040B918                 dd 0C0h, 46000000h, 79EAC9E7h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0040B918                 dd 79EAC9E3h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9E4h
.text:0040B918                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9E2h, 11CEBAF9h
.text:0040B918                 dd 0AA00828Ch, 0BA94B00h, 79EAC9E5h, 11CEBAF9h, 0AA00828Ch
.text:0040B918                 dd 0BA94B00h, 1Bh, 0
.text:0040B978                 dd 0C0h, 46000000h, 1Ch, 0
.text:0040B988                 dd 0C0h, 46000000h, 331h, 0
.text:0040B998                 dd 0C0h, 46000000h, 79EAC9E6h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0040B998                 dd 312h, 0
.text:0040B9B8                 dd 0C0h, 46000000h, 30Eh, 0
.text:0040B9C8                 dd 0C0h, 46000000h, 30Dh, 0
.text:0040B9D8                 dd 0C0h, 46000000h, 311h, 0
.text:0040B9E8                 dd 0C0h, 46000000h, 313h, 0
.text:0040B9F8                 dd 0C0h, 46000000h, 30Ch, 0
.text:0040BA08                 dd 0C0h, 46000000h, 30Fh, 0
.text:0040BA18                 dd 0C0h, 46000000h, 310h, 0
.text:0040BA28                 dd 0C0h, 46000000h, 79EAC9F1h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0040BA28                 dd 0FB8F0821h, 101B0164h, 8ED84h, 13C72E2Bh, 316h, 0
.text:0040BA58                 dd 0C0h, 46000000h, 319h, 0
.text:0040BA68                 dd 0C0h, 46000000h, 315h, 0
.text:0040BA78                 dd 0C0h, 46000000h, 316h, 0
.text:0040BA88                 dd 0C0h, 46000000h, 315h, 0
.text:0040BA98                 dd 0C0h, 46000000h, 2E005h, 0
.text:0040BAA8                 dd 0C0h, 46000000h, 0BE35203h, 11CE8F91h, 0AA00E39Dh, 51B84B00h
.text:0040BAA8                 dd 79EAC9D0h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9D1h
.text:0040BAA8                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 17h, 0
.text:0040BAE8                 dd 0C0h, 46000000h, 0BE35204h, 11CE8F91h, 0AA00E39Dh, 51B84B00h
.text:0040BAE8                 dd 79EAC9E0h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9E1h
.text:0040BAE8                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 8856F961h, 11D0340Ah
.text:0040BAE8                 dd 0C0006BA9h, 0A205D74Fh, 0EAB22AC2h, 11CF30C1h, 0EBA7h
.text:0040BAE8                 dd 0BAE5BC0h, 34A715A0h, 11D06587h, 20004A92h, 4DACC7AFh
.text:0040BAE8                 dd 96300DA0h, 11CF2BABh, 0AA0029A2h, 52733D00h, 0D5CDD502h
.text:0040BAE8                 dd 101B2E9Ch, 89793h, 0AEF92C2Bh, 0F29F85E0h, 10684FF9h
.text:0040BAE8                 dd 891ABh, 0D9B3272Bh, 0D5CDD505h, 101B2E9Ch, 89793h, 0AEF92C2Bh
.text:0040BAE8                 dd 6650430Ch, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504301h
.text:0040BAE8                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 6650430Fh, 101ABE0Fh
.text:0040BAE8                 dd 0AA00BB8Bh, 0AB0C3000h, 66504310h, 101ABE0Fh, 0AA00BB8Bh
.text:0040BAE8                 dd 0AB0C3000h, 6650430Dh, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:0040BAE8                 dd 6650430Eh, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504312h
.text:0040BAE8                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504311h, 101ABE0Fh
.text:0040BAE8                 dd 0AA00BB8Bh, 0AB0C3000h, 66504313h, 101ABE0Fh, 0AA00BB8Bh
.text:0040BAE8                 dd 0AB0C3000h, 66504300h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:0040BAE8                 dd 2DE81h, 0
.text:0040BC38                 dd 0C0h, 46000000h, 4 dup(0)
.text:0040BC50                 dd 6650430Bh, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 2DE80h
.text:0040BC50                 dd 0
.text:0040BC68                 dd 0C0h, 46000000h, 6650430Ah, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:0040BC68                 dd 66504306h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504302h
.text:0040BC68                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504308h, 101ABE0Fh
.text:0040BC68                 dd 0AA00BB8Bh, 0AB0C3000h, 66504304h, 101ABE0Fh, 0AA00BB8Bh
.text:0040BC68                 dd 0AB0C3000h, 66504307h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:0040BC68                 dd 66504303h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504309h
.text:0040BC68                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504305h, 101ABE0Fh
.text:0040BC68                 dd 0AA00BB8Bh, 0AB0C3000h, 618736E0h, 11CF3C3Dh, 0AA000C81h
.text:0040BC68                 dd 719B3800h, 1EA4DBF0h, 11CF3C3Bh, 0AA000C81h, 719B3800h
.text:0040BC68                 dd 0BB1A2AE1h, 11CFA4F9h, 8000208Fh, 64D02C5Fh, 0EAE1BA61h
.text:0040BC68                 dd 11CFA4EDh, 8000208Fh, 64D02C5Fh, 0BB1A2AE2h, 11CFA4F9h
.text:0040BC68                 dd 8000208Fh, 64D02C5Fh, 0DB01A1E3h, 11CFA42Bh, 8000208Fh
.text:0040BC68                 dd 64D02C5Fh, 0D10F6761h, 11CF83E9h, 8000208Fh, 64D02C5Fh
.text:0040BC68                 dd 10Fh, 0
.text:0040BD78                 dd 0C0h, 46000000h, 125h, 0
.text:0040BD88                 dd 0C0h, 46000000h, 3AF24290h, 11CE0C96h, 0AA00CFA0h, 0B80A6000h
.text:0040BD88                 dd 79EAC9D3h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9D0h
.text:0040BD88                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 0Eh, 0
.text:0040BDC8                 dd 0C0h, 46000000h, 0FC4801A1h, 11CF2BA9h, 0AA0029A2h
.text:0040BDC8                 dd 52733D00h, 79EAC9CDh, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0040BDC8                 dd 79EAC9C1h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9CBh
.text:0040BDC8                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9C0h, 11CEBAF9h
.text:0040BDC8                 dd 0AA00828Ch, 0BA94B00h, 2E013h, 0
.text:0040BE28                 dd 0C0h, 46000000h, 2E012h, 0
.text:0040BE38                 dd 0C0h, 46000000h, 1008C4A0h, 11CF7613h, 2000F19Ah, 0F4726EAFh
.text:0040BE38                 dd 140h, 0
.text:0040BE58                 dd 0C0h, 46000000h, 1, 0
.text:0040BE68                 dd 0C0h, 46000000h, 0B196B28Fh, 101ABAB4h, 0AA009CB6h
.text:0040BE68                 dd 71D3400h, 13Dh, 0
.text:0040BE88                 dd 0C0h, 46000000h, 0F4F569D1h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:0040BE88                 dd 79EAC9D1h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 0B196B286h
.text:0040BE88                 dd 101ABAB4h, 0AA009CB6h, 71D3400h, 0B196B284h, 101ABAB4h
.text:0040BE88                 dd 0AA009CB6h, 71D3400h, 12Ah, 0
.text:0040BED8                 dd 0C0h, 46000000h, 0B722BCCAh, 101B4E68h, 0AA00BCA2h
.text:0040BED8                 dd 70474000h, 22F03340h, 101B547Dh, 8658Eh, 19D12B2Bh
.text:0040BED8                 dd 20405h, 0
.text:0040BF08                 dd 0C0h, 46000000h, 2040Eh, 0
.text:0040BF18                 dd 0C0h, 46000000h, 20406h, 0
.text:0040BF28                 dd 0C0h, 46000000h, 2040Fh, 0
.text:0040BF38                 dd 0C0h, 46000000h, 110h, 0
.text:0040BF48                 dd 0C0h, 46000000h, 10Eh, 0
.text:0040BF58                 dd 0C0h, 46000000h, 123h, 0
.text:0040BF68                 dd 0C0h, 46000000h, 124h, 0
.text:0040BF78                 dd 0C0h, 46000000h, 13h, 0
.text:0040BF88                 dd 0C0h, 46000000h, 14h, 0
.text:0040BF98                 dd 0C0h, 46000000h, 15h, 0
.text:0040BFA8                 dd 0C0h, 46000000h, 20400h, 0
.text:0040BFB8                 dd 0C0h, 46000000h, 121h, 0
.text:0040BFC8                 dd 0C0h, 46000000h, 122h, 0
.text:0040BFD8                 dd 0C0h, 46000000h, 2E011h, 0
.text:0040BFE8                 dd 0C0h, 46000000h, 108h, 0
.text:0040BFF8                 dd 0C0h, 46000000h, 0B196B285h, 101ABAB4h, 0AA009CB6h
.text:0040BFF8                 dd 71D3400h, 0B196B287h, 101ABAB4h, 0AA009CB6h, 71D3400h
.text:0040BFF8                 dd 103h, 0
.text:0040C028                 dd 0C0h, 46000000h, 2E000h, 0
.text:0040C038                 dd 0C0h, 46000000h, 106h, 0
.text:0040C048                 dd 0C0h, 46000000h, 79EAC9C6h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0040C048                 dd 107h, 0
.text:0040C068                 dd 0C0h, 46000000h, 102h, 0
.text:0040C078                 dd 0C0h, 46000000h, 104h, 0
.text:0040C088                 dd 0C0h, 46000000h, 0B722BCC8h, 101B4E68h, 0AA00BCA2h
.text:0040C088                 dd 70474000h, 0B3E7C340h, 11CEEF97h, 0AA00C99Bh, 18E6000h
.text:0040C088                 dd 105h, 0
.text:0040C0B8                 dd 0C0h, 46000000h, 13Bh, 0
.text:0040C0C8                 dd 0C0h, 46000000h, 139h, 0
.text:0040C0D8                 dd 0C0h, 46000000h, 0Dh, 0
.text:0040C0E8                 dd 0C0h, 46000000h, 3C374A42h, 11CFBAE4h, 0AA007DBFh, 0EE466900h
.text:0040C0E8                 dd 101h, 0
.text:0040C108                 dd 0C0h, 46000000h, 100h, 0
.text:0040C118                 dd 0C0h, 46000000h, 20404h, 0
.text:0040C128                 dd 0C0h, 46000000h, 1CF2B120h, 101B547Dh, 8658Eh, 19D12B2Bh
.text:0040C128                 dd 3127CA40h, 11CE446Eh, 0AA003581h, 51B84B00h, 19h, 0
.text:0040C158                 dd 0C0h, 46000000h, 99CAF010h, 11CF415Eh, 0AA001488h, 0F569B500h
.text:0040C158                 dd 89BCB740h, 101A6119h, 0DD00B7BCh, 0AF550601h, 0BEF6E002h
.text:0040C158                 dd 101AA874h, 0AA00BA8Bh, 0AB0C3000h, 0BEF6E003h, 101AA874h
.text:0040C158                 dd 0AA00BA8Bh, 0AB0C3000h, 146h, 0
.text:0040C1A8                 dd 0C0h, 46000000h, 79EAC9C3h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0040C1A8                 dd 79EAC9C7h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9C5h
.text:0040C1A8                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9C2h, 11CEBAF9h
.text:0040C1A8                 dd 0AA00828Ch, 0BA94B00h, 79EAC9C4h, 11CEBAF9h, 0AA00828Ch
.text:0040C1A8                 dd 0BA94B00h, 79EAC9D2h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0040C1A8                 dd 79EAC9D7h, 11CEBAFAh, 0AA00828Ch, 0BA94B00h, 11h, 0
.text:0040C228                 dd 0C0h, 46000000h, 0E6D4D90h, 11CF6738h, 0AA000896h, 0B40D6800h
.text:0040C228                 dd 0Ah, 0
.text:0040C248                 dd 0C0h, 46000000h, 2, 0
.text:0040C258                 dd 0C0h, 46000000h, 1Dh, 0
.text:0040C268                 dd 0C0h, 46000000h, 3, 0
.text:0040C278                 dd 0C0h, 46000000h, 16h, 0
.text:0040C288                 dd 0C0h, 46000000h, 0F77459A0h, 11CFBF9Ah, 0C0004EBAh
.text:0040C288                 dd 1608D74Fh, 0Fh, 0
.text:0040C2A8                 dd 0C0h, 46000000h, 20h, 0
.text:0040C2B8                 dd 0C0h, 46000000h, 0CB5BDC81h, 11CF93C1h, 8000208Fh, 64D02C5Fh
.text:0040C2B8                 dd 0FC4801A3h, 11CF2BA9h, 0AA0029A2h, 52733D00h, 111h
.text:0040C2B8                 dd 0
.text:0040C2E8                 dd 0C0h, 46000000h, 11Eh, 0
.text:0040C2F8                 dd 0C0h, 46000000h, 128h, 0
.text:0040C308                 dd 0C0h, 46000000h, 129h, 0
.text:0040C318                 dd 0C0h, 46000000h, 118h, 0
.text:0040C328                 dd 0C0h, 46000000h, 0B722BCCBh, 101B4E68h, 0AA00BCA2h
.text:0040C328                 dd 70474000h, 11Bh, 0
.text:0040C348                 dd 0C0h, 46000000h, 0B196B288h, 101ABAB4h, 0AA009CB6h
.text:0040C348                 dd 71D3400h, 0B196B289h, 101ABAB4h, 0AA009CB6h, 71D3400h
.text:0040C348                 dd 0B722BCC5h, 101B4E68h, 0AA00BCA2h, 70474000h, 0B722BCC7h
.text:0040C348                 dd 101B4E68h, 0AA00BCA2h, 70474000h, 0B722BCC6h, 101B4E68h
.text:0040C348                 dd 0AA00BCA2h, 70474000h, 117h, 0
.text:0040C3A8                 dd 0C0h, 46000000h, 116h, 0
.text:0040C3B8                 dd 0C0h, 46000000h, 113h, 0
.text:0040C3C8                 dd 0C0h, 46000000h, 1C2056CCh, 101B5EF4h, 0AA00C88Bh, 293B3E00h
.text:0040C3C8                 dd 119h, 0
.text:0040C3E8                 dd 0C0h, 46000000h, 9C2CAD80h, 11CF3424h, 0AA0070B6h, 0D8D64C00h
.text:0040C3E8                 dd 922EADA0h, 11CF3424h, 0AA0070B6h, 0D8D64C00h, 115h
.text:0040C3E8                 dd 0
.text:0040C418                 dd 0C0h, 46000000h, 11Ch, 0
.text:0040C428                 dd 0C0h, 46000000h, 11Dh, 0
.text:0040C438                 dd 0C0h, 46000000h, 11Fh, 0
.text:0040C448                 dd 0C0h, 46000000h, 112h, 0
.text:0040C458                 dd 0C0h, 46000000h, 0A1FAF330h, 11CEEF97h, 0AA00C99Bh
.text:0040C458                 dd 18E6000h, 120h, 0
.text:0040C478                 dd 0C0h, 46000000h, 97D001F2h, 9B11CEEFh, 0AA00C9h, 18E60h
.text:0040C478                 dd 0D001F200h, 11CEEF97h, 0AA00C99Bh, 18E6000h, 894AD3B0h
.text:0040C478                 dd 11CEEF97h, 0AA00C99Bh, 18E6000h, 114h, 0
.text:0040C4B8                 dd 0C0h, 46000000h, 521A28F0h, 11CEE40Bh, 0AA00C9B2h, 37096800h
.text:0040C4B8                 dd 49384070h, 11CEE40Ah, 0AA00C9B2h, 37096800h, 9, 0
.text:0040C4E8                 dd 0C0h, 46000000h, 0D5F569D0h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:0040C4E8                 dd 11Ah, 0
.text:0040C508                 dd 0C0h, 46000000h, 376BD3AAh, 101B3845h, 8ED84h, 13C72E2Bh
.text:0040C508                 dd 10Ch, 0
.text:0040C528                 dd 0C0h, 46000000h
.text:0040C530 dword_40C530    dd 10Bh, 0              ; DATA XREF: sub_405A20+75↑o
.text:0040C538                 dd 0C0h, 46000000h, 0BD1AE5E0h, 11CEA6AEh, 425037BDh, 0C100h
.text:0040C538                 dd 79EAC9C9h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 37D84F60h
.text:0040C538                 dd 11CE42CBh, 0AA003581h, 51B84B00h, 22F55881h, 11D0280Bh
.text:0040C538                 dd 0A000A9A8h, 4200CC9h, 10Ah, 0
.text:0040C588                 dd 0C0h, 46000000h, 109h, 0
.text:0040C598                 dd 0C0h, 46000000h, 7FD52380h, 101B4E07h, 82DAEh, 13C72E2Bh
.text:0040C598                 dd 7BF80980h, 101ABF32h, 0AA00BB8Bh, 0AB0C3000h, 7BF80981h
.text:0040C598                 dd 101ABF32h, 0AA00BB8Bh, 0AB0C3000h, 55980BA0h, 11CF35AAh
.text:0040C598                 dd 0AA0071B6h, 0D8D64C00h, 0B722BCC9h, 101B4E68h, 0AA00BCA2h
.text:0040C598                 dd 70474000h, 0A9D758A0h, 11CF4617h, 0AA00FC95h, 0B40D6800h
.text:0040C598                 dd 55272A00h, 11CE42CBh, 0AA003581h, 51B84B00h, 22F55882h
.text:0040C598                 dd 11D0280Bh, 0A000A9A8h, 4200CC9h, 0B196B28Ah, 101ABAB4h
.text:0040C598                 dd 0AA009CB6h, 71D3400h, 9BFBBC02h, 101AEFF1h, 0AA00ED84h
.text:0040C598                 dd 71D3400h, 0B196B28Dh, 101ABAB4h, 0AA009CB6h, 71D3400h
.text:0040C598                 dd 1E44665h, 101B24ACh, 8ED84h, 13C72E2Bh, 0B196B28Ch
.text:0040C598                 dd 101ABAB4h, 0AA009CB6h, 71D3400h, 13Ah, 0
.text:0040C678                 dd 0C0h, 46000000h, 138h, 0
.text:0040C688                 dd 0C0h, 46000000h, 0B196B283h, 101ABAB4h, 0AA009CB6h
.text:0040C688                 dd 71D3400h, 0A6BC3AC0h, 11CEDBAAh, 0AA00E39Dh, 51B84B00h
.text:0040C688                 dd 27h, 0
.text:0040C6B8                 dd 0C0h, 46000000h, 8, 0
.text:0040C6C8                 dd 0C0h, 46000000h, 0CF51ED10h, 11CF62FEh, 0A00086BFh
.text:0040C6C8                 dd 364803C9h, 0F29F6BC0h, 11CE5021h, 15AAh, 3F290169h
.text:0040C6C8                 dd 20D00h, 0
.text:0040C6F8                 dd 0C0h, 46000000h, 20D03h, 0
.text:0040C708                 dd 0C0h, 46000000h, 12h, 0
.text:0040C718                 dd 0C0h, 46000000h, 4, 0
.text:0040C728                 dd 0C0h, 46000000h, 0D5F56B60h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:0040C728                 dd 7, 0
.text:0040C748                 dd 0C0h, 46000000h, 0D5F56A34h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:0040C748                 dd 3BD5F56Ah, 0B5101A59h, 2B000869h, 7ABF2Dh, 5, 0
.text:0040C778                 dd 0C0h, 46000000h, 0D5F56AFCh, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:0040C778                 dd 126h, 0
.text:0040C798                 dd 0C0h, 46000000h, 10h, 0
.text:0040C7A8                 dd 0C0h, 46000000h, 0C733A30h, 11CE2A1Ch, 0AA00E5ADh, 3D774400h
.text:0040C7A8                 dd 0F4F569D0h, 101A593Bh, 869B5h, 7ABF2D2Bh, 13Eh, 0
.text:0040C7D8                 dd 0C0h, 46000000h, 6D5140C1h, 11CE7436h, 0AA003480h, 0FA096000h
.text:0040C7D8                 dd 742B0E01h, 101B14E6h, 0AA004E91h, 0AB0C3000h, 0B196B28Bh
.text:0040C7D8                 dd 101ABAB4h, 0AA009CB6h, 71D3400h, 18h, 0
.text:0040C818                 dd 0C0h, 46000000h, 0Bh, 0
.text:0040C828                 dd 0C0h, 46000000h, 0Ch, 0
.text:0040C838                 dd 0C0h, 46000000h, 26h, 0
.text:0040C848                 dd 0C0h, 46000000h, 6, 0
.text:0040C858                 dd 0C0h, 46000000h, 0DF0B3D60h, 101B548Fh, 8658Eh, 19D12B2Bh
.text:0040C858                 dd 548793C0h, 11CF9E74h, 0A0005596h, 234903C9h, 0D5F78C80h
.text:0040C858                 dd 11CF5252h, 0AA00FA90h, 6E104200h, 20410h, 0
.text:0040C898                 dd 0C0h, 46000000h, 20403h, 0
.text:0040C8A8                 dd 0C0h, 46000000h, 20401h, 0
.text:0040C8B8                 dd 0C0h, 46000000h, 20412h, 0
.text:0040C8C8                 dd 0C0h, 46000000h, 20402h, 0
.text:0040C8D8                 dd 0C0h, 46000000h, 20411h, 0
.text:0040C8E8                 dd 0C0h, 46000000h, 2 dup(0)
.text:0040C8F8                 dd 0C0h, 46000000h, 3C374A41h, 11CFBAE4h, 0AA007DBFh, 0EE466900h
.text:0040C8F8                 dd 10Dh, 0
.text:0040C918                 dd 0C0h, 46000000h, 127h, 0
.text:0040C928                 dd 0C0h, 46000000h, 3AF24292h, 11CE0C96h, 0AA00CFA0h, 0B80A6000h
.text:0040C928                 dd 0EAB22AC1h, 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0D30C1661h
.text:0040C928                 dd 11D0CDAFh, 0C0003E8Ah, 6EE2C94Fh, 2DF05h, 0
.text:0040C968                 dd 0C0h, 46000000h, 79EAC9D8h, 11CEBAFAh, 0AA00828Ch, 0BA94B00h
.text:0040C968                 dd 79EAC9D6h, 11CEBAFAh, 0AA00828Ch, 0BA94B00h, 79EAC9D5h
.text:0040C968                 dd 11CEBAFAh, 0AA00828Ch, 0BA94B00h, 20430h, 0
.text:0040C9A8                 dd 0C0h, 46000000h, 2DE0Eh, 0
.text:0040C9B8                 dd 0C0h, 46000000h, 2DE18h, 0
.text:0040C9C8                 dd 0C0h, 46000000h, 2DE1Eh, 0
.text:0040C9D8                 dd 0C0h, 46000000h, 2DE19h, 0
.text:0040C9E8                 dd 0C0h, 46000000h, 2DE0Fh, 0
.text:0040C9F8                 dd 0C0h, 46000000h, 2DE12h, 0
.text:0040CA08                 dd 0C0h, 46000000h, 2DE21h, 0
.text:0040CA18                 dd 0C0h, 46000000h, 2DE01h, 0
.text:0040CA28                 dd 0C0h, 46000000h, 2DE0Bh, 0
.text:0040CA38                 dd 0C0h, 46000000h, 2DE0Dh, 0
.text:0040CA48                 dd 0C0h, 46000000h, 2DE02h, 0
.text:0040CA58                 dd 0C0h, 46000000h, 2DE1Fh, 0
.text:0040CA68                 dd 0C0h, 46000000h, 2DE04h, 0
.text:0040CA78                 dd 0C0h, 46000000h, 2DE0Ch, 0
.text:0040CA88                 dd 0C0h, 46000000h, 2DE05h, 0
.text:0040CA98                 dd 0C0h, 46000000h, 2DE1Ch, 0
.text:0040CAA8                 dd 0C0h, 46000000h, 2DE06h, 0
.text:0040CAB8                 dd 0C0h, 46000000h, 2DE13h, 0
.text:0040CAC8                 dd 0C0h, 46000000h, 2DE10h, 0
.text:0040CAD8                 dd 0C0h, 46000000h, 2DE22h, 0
.text:0040CAE8                 dd 0C0h, 46000000h, 2DE09h, 0
.text:0040CAF8                 dd 0C0h, 46000000h, 2DE23h, 0
.text:0040CB08                 dd 0C0h, 46000000h, 2DE0Ah, 0
.text:0040CB18                 dd 0C0h, 46000000h, 2DE1Dh, 0
.text:0040CB28                 dd 0C0h, 46000000h, 2DE11h, 0
.text:0040CB38                 dd 0C0h, 46000000h, 2DE15h, 0
.text:0040CB48                 dd 0C0h, 46000000h, 2DE1Bh, 0
.text:0040CB58                 dd 0C0h, 46000000h, 2DE16h, 0
.text:0040CB68                 dd 0C0h, 46000000h, 2DE20h, 0
.text:0040CB78                 dd 0C0h, 46000000h, 2DE07h, 0
.text:0040CB88                 dd 0C0h, 46000000h, 2DE1Ah, 0
.text:0040CB98                 dd 0C0h, 46000000h, 2DE17h, 0
.text:0040CBA8                 dd 0C0h, 46000000h, 2DE14h, 0
.text:0040CBB8                 dd 0C0h, 46000000h, 2DE03h, 0
.text:0040CBC8                 dd 0C0h, 46000000h, 2DE08h, 0
.text:0040CBD8                 dd 0C0h, 46000000h, 0B722BE00h, 101B4E68h, 0AA00BCA2h
.text:0040CBD8                 dd 70474000h, 0FC4801A5h, 11CF2BA9h, 0AA0029A2h, 52733D00h
.text:0040CC00
.text:0040CC00 ; =============== S U B R O U T I N E =======================================
.text:0040CC00
.text:0040CC00 ; Attributes: thunk
.text:0040CC00
.text:0040CC00 ; size_t __cdecl mbrtowc(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.text:0040CC00 mbrtowc         proc near               ; CODE XREF: sub_403F80+757↑p
.text:0040CC00
.text:0040CC00 DstCh           = dword ptr  4
.text:0040CC00 SrcCh           = dword ptr  8
.text:0040CC00 SizeInBytes     = dword ptr  0Ch
.text:0040CC00 State           = dword ptr  10h
.text:0040CC00
.text:0040CC00                 jmp     ds:__imp_mbrtowc
.text:0040CC00 mbrtowc         endp
.text:0040CC00
.text:0040CC00 ; ---------------------------------------------------------------------------
.text:0040CC06                 align 10h
.text:0040CC10
.text:0040CC10 ; =============== S U B R O U T I N E =======================================
.text:0040CC10
.text:0040CC10 ; Attributes: bp-based frame
.text:0040CC10
.text:0040CC10 sub_40CC10      proc near               ; CODE XREF: sub_401080+C2↑p
.text:0040CC10                 push    ebp
.text:0040CC11                 mov     ecx, offset dword_40F000
.text:0040CC16                 cmp     ecx, offset dword_40F000
.text:0040CC1C                 mov     ebp, esp
.text:0040CC1E                 jnb     short loc_40CC36
.text:0040CC20
.text:0040CC20 loc_40CC20:                             ; CODE XREF: sub_40CC10+24↓j
.text:0040CC20                 mov     edx, [ecx+4]
.text:0040CC23                 mov     eax, [ecx]
.text:0040CC25                 add     ecx, 8
.text:0040CC28                 add     [edx+400000h], eax
.text:0040CC2E                 cmp     ecx, offset dword_40F000
.text:0040CC34                 jb      short loc_40CC20
.text:0040CC36
.text:0040CC36 loc_40CC36:                             ; CODE XREF: sub_40CC10+E↑j
.text:0040CC36                 pop     ebp
.text:0040CC37                 retn
.text:0040CC37 sub_40CC10      endp
.text:0040CC37
.text:0040CC37 ; ---------------------------------------------------------------------------
.text:0040CC38                 align 10h
.text:0040CC40
.text:0040CC40 ; =============== S U B R O U T I N E =======================================
.text:0040CC40
.text:0040CC40 ; Attributes: bp-based frame
.text:0040CC40
.text:0040CC40 sub_40CC40      proc near               ; CODE XREF: sub_401080+16↑p
.text:0040CC40                                         ; TopLevelExceptionFilter+D7↑p
.text:0040CC40                 push    ebp
.text:0040CC41                 mov     ebp, esp
.text:0040CC43                 fninit
.text:0040CC45                 pop     ebp
.text:0040CC46                 retn
.text:0040CC46 sub_40CC40      endp
.text:0040CC46
.text:0040CC46 ; ---------------------------------------------------------------------------
.text:0040CC47                 align 10h
.text:0040CC50
.text:0040CC50 ; =============== S U B R O U T I N E =======================================
.text:0040CC50
.text:0040CC50 ; Attributes: bp-based frame
.text:0040CC50
.text:0040CC50 ; void __cdecl sub_40CC50()
.text:0040CC50 sub_40CC50      proc near               ; DATA XREF: .text:loc_40CC99↓o
.text:0040CC50                                         ; sub_40CCE0:loc_40CD0E↓o
.text:0040CC50                 push    ebp
.text:0040CC51                 mov     ebp, esp
.text:0040CC53                 sub     esp, 8
.text:0040CC56                 mov     eax, off_40E0C4
.text:0040CC5B                 mov     edx, [eax]
.text:0040CC5D                 test    edx, edx
.text:0040CC5F                 jnz     short loc_40CC65
.text:0040CC61
.text:0040CC61 loc_40CC61:                             ; CODE XREF: sub_40CC50+2C↓j
.text:0040CC61                 mov     esp, ebp
.text:0040CC63                 pop     ebp
.text:0040CC64                 retn
.text:0040CC65 ; ---------------------------------------------------------------------------
.text:0040CC65
.text:0040CC65 loc_40CC65:                             ; CODE XREF: sub_40CC50+F↑j
.text:0040CC65                                         ; sub_40CC50+2A↓j
.text:0040CC65                 call    dword ptr [eax]
.text:0040CC67                 mov     edx, off_40E0C4
.text:0040CC6D                 mov     ecx, [edx+4]
.text:0040CC70                 lea     eax, [edx+4]
.text:0040CC73                 mov     off_40E0C4, eax
.text:0040CC78                 test    ecx, ecx
.text:0040CC7A                 jnz     short loc_40CC65
.text:0040CC7C                 jmp     short loc_40CC61
.text:0040CC7C sub_40CC50      endp
.text:0040CC7C
.text:0040CC7C ; ---------------------------------------------------------------------------
.text:0040CC7E                 align 10h
.text:0040CC80                 push    ebp
.text:0040CC81                 mov     ebp, esp
.text:0040CC83                 sub     esp, 8
.text:0040CC86                 mov     [ebp-4], ebx
.text:0040CC89                 mov     eax, ds:dword_40DA20
.text:0040CC8E                 cmp     eax, 0FFFFFFFFh
.text:0040CC91                 jz      short loc_40CCBC
.text:0040CC93
.text:0040CC93 loc_40CC93:                             ; CODE XREF: .text:0040CCC6↓j
.text:0040CC93                                         ; .text:0040CCD9↓j
.text:0040CC93                 test    eax, eax
.text:0040CC95                 mov     ebx, eax
.text:0040CC97                 jnz     short loc_40CCB0
.text:0040CC99
.text:0040CC99 loc_40CC99:                             ; CODE XREF: .text:0040CCBA↓j
.text:0040CC99                 mov     dword ptr [esp], offset sub_40CC50
.text:0040CCA0                 call    sub_401040
.text:0040CCA5                 mov     ebx, [ebp-4]
.text:0040CCA8                 mov     esp, ebp
.text:0040CCAA                 pop     ebp
.text:0040CCAB                 retn
.text:0040CCAB ; ---------------------------------------------------------------------------
.text:0040CCAC                 align 10h
.text:0040CCB0
.text:0040CCB0 loc_40CCB0:                             ; CODE XREF: .text:0040CC97↑j
.text:0040CCB0                                         ; .text:0040CCB8↓j
.text:0040CCB0                 call    ds:dword_40DA20[ebx*4]
.text:0040CCB7                 dec     ebx
.text:0040CCB8                 jnz     short loc_40CCB0
.text:0040CCBA                 jmp     short loc_40CC99
.text:0040CCBC ; ---------------------------------------------------------------------------
.text:0040CCBC
.text:0040CCBC loc_40CCBC:                             ; CODE XREF: .text:0040CC91↑j
.text:0040CCBC                 mov     ecx, ds:dword_40DA24
.text:0040CCC2                 xor     eax, eax
.text:0040CCC4                 test    ecx, ecx
.text:0040CCC6                 jz      short loc_40CC93
.text:0040CCC8                 mov     edx, offset dword_40DA20
.text:0040CCCD                 lea     esi, [esi+0]
.text:0040CCD0
.text:0040CCD0 loc_40CCD0:                             ; CODE XREF: .text:0040CCD7↓j
.text:0040CCD0                 inc     eax
.text:0040CCD1                 mov     ecx, [edx+eax*4+4]
.text:0040CCD5                 test    ecx, ecx
.text:0040CCD7                 jnz     short loc_40CCD0
.text:0040CCD9                 jmp     short loc_40CC93
.text:0040CCD9 ; ---------------------------------------------------------------------------
.text:0040CCDB                 align 10h
.text:0040CCE0
.text:0040CCE0 ; =============== S U B R O U T I N E =======================================
.text:0040CCE0
.text:0040CCE0 ; Attributes: bp-based frame
.text:0040CCE0
.text:0040CCE0 sub_40CCE0      proc near               ; CODE XREF: sub_4015E0+13↑p
.text:0040CCE0
.text:0040CCE0 var_8           = dword ptr -8
.text:0040CCE0 var_4           = dword ptr -4
.text:0040CCE0
.text:0040CCE0                 push    ebp
.text:0040CCE1                 mov     ebp, esp
.text:0040CCE3                 sub     esp, 8
.text:0040CCE6                 mov     [ebp+var_4], ebx
.text:0040CCE9                 mov     edx, dword_40E0C0
.text:0040CCEF                 test    edx, edx
.text:0040CCF1                 jnz     short loc_40CD1A
.text:0040CCF3                 mov     eax, ds:dword_40DA20
.text:0040CCF8                 mov     edx, 1
.text:0040CCFD                 mov     dword_40E0C0, edx
.text:0040CD03                 cmp     eax, 0FFFFFFFFh
.text:0040CD06                 jz      short loc_40CD2D
.text:0040CD08
.text:0040CD08 loc_40CD08:                             ; CODE XREF: sub_40CCE0+57↓j
.text:0040CD08                                         ; sub_40CCE0+69↓j
.text:0040CD08                 test    eax, eax
.text:0040CD0A                 mov     ebx, eax
.text:0040CD0C                 jnz     short loc_40CD21
.text:0040CD0E
.text:0040CD0E loc_40CD0E:                             ; CODE XREF: sub_40CCE0+4B↓j
.text:0040CD0E                 mov     [esp+8+var_8], offset sub_40CC50 ; void (__cdecl *)()
.text:0040CD15                 call    sub_401040
.text:0040CD1A
.text:0040CD1A loc_40CD1A:                             ; CODE XREF: sub_40CCE0+11↑j
.text:0040CD1A                 mov     ebx, [ebp+var_4]
.text:0040CD1D                 mov     esp, ebp
.text:0040CD1F                 pop     ebp
.text:0040CD20                 retn
.text:0040CD21 ; ---------------------------------------------------------------------------
.text:0040CD21
.text:0040CD21 loc_40CD21:                             ; CODE XREF: sub_40CCE0+2C↑j
.text:0040CD21                                         ; sub_40CCE0+49↓j
.text:0040CD21                 call    ds:dword_40DA20[ebx*4]
.text:0040CD28                 dec     ebx
.text:0040CD29                 jnz     short loc_40CD21
.text:0040CD2B                 jmp     short loc_40CD0E
.text:0040CD2D ; ---------------------------------------------------------------------------
.text:0040CD2D
.text:0040CD2D loc_40CD2D:                             ; CODE XREF: sub_40CCE0+26↑j
.text:0040CD2D                 mov     ecx, ds:dword_40DA24
.text:0040CD33                 xor     eax, eax
.text:0040CD35                 test    ecx, ecx
.text:0040CD37                 jz      short loc_40CD08
.text:0040CD39                 mov     edx, offset dword_40DA20
.text:0040CD3E                 mov     esi, esi
.text:0040CD40
.text:0040CD40 loc_40CD40:                             ; CODE XREF: sub_40CCE0+67↓j
.text:0040CD40                 inc     eax
.text:0040CD41                 mov     ebx, [edx+eax*4+4]
.text:0040CD45                 test    ebx, ebx
.text:0040CD47                 jnz     short loc_40CD40
.text:0040CD49                 jmp     short loc_40CD08
.text:0040CD49 sub_40CCE0      endp
.text:0040CD49
.text:0040CD49 ; ---------------------------------------------------------------------------
.text:0040CD4B                 align 10h
.text:0040CD50
.text:0040CD50 ; =============== S U B R O U T I N E =======================================
.text:0040CD50
.text:0040CD50 ; Attributes: info_from_lumina
.text:0040CD50
.text:0040CD50 ; void *__cdecl _alloca(size_t Size)
.text:0040CD50 __alloca        proc near               ; CODE XREF: sub_4015E0+E↑p
.text:0040CD50                 push    ecx
.text:0040CD51                 mov     ecx, esp
.text:0040CD53                 add     ecx, 8
.text:0040CD56
.text:0040CD56 loc_40CD56:                             ; CODE XREF: __alloca+1B↓j
.text:0040CD56                 cmp     eax, 1000h
.text:0040CD5B                 jb      short loc_40CD6D
.text:0040CD5D                 sub     ecx, 1000h
.text:0040CD63                 or      dword ptr [ecx], 0
.text:0040CD66                 sub     eax, 1000h
.text:0040CD6B                 jmp     short loc_40CD56
.text:0040CD6D ; ---------------------------------------------------------------------------
.text:0040CD6D
.text:0040CD6D loc_40CD6D:                             ; CODE XREF: __alloca+B↑j
.text:0040CD6D                 sub     ecx, eax
.text:0040CD6F                 or      dword ptr [ecx], 0
.text:0040CD72                 mov     eax, esp
.text:0040CD74                 mov     esp, ecx
.text:0040CD76                 mov     ecx, [eax]
.text:0040CD78                 mov     eax, [eax+4]
.text:0040CD7B                 jmp     eax
.text:0040CD7B __alloca        endp
.text:0040CD7B
.text:0040CD7B ; ---------------------------------------------------------------------------
.text:0040CD7D                 align 10h
.text:0040CD80
.text:0040CD80 ; =============== S U B R O U T I N E =======================================
.text:0040CD80
.text:0040CD80 ; Attributes: bp-based frame
.text:0040CD80
.text:0040CD80 sub_40CD80      proc near               ; CODE XREF: sub_406B20+17E↑p
.text:0040CD80                                         ; sub_406B20+1F5↑p ...
.text:0040CD80
.text:0040CD80 var_24          = dword ptr -24h
.text:0040CD80 var_20          = dword ptr -20h
.text:0040CD80 var_1C          = dword ptr -1Ch
.text:0040CD80 var_18          = dword ptr -18h
.text:0040CD80 var_14          = dword ptr -14h
.text:0040CD80 var_C           = dword ptr -0Ch
.text:0040CD80 var_8           = dword ptr -8
.text:0040CD80 var_4           = dword ptr -4
.text:0040CD80 arg_0           = dword ptr  8
.text:0040CD80 arg_4           = dword ptr  0Ch
.text:0040CD80 arg_8           = dword ptr  10h
.text:0040CD80 arg_C           = dword ptr  14h
.text:0040CD80
.text:0040CD80                 push    ebp
.text:0040CD81                 mov     ebp, esp
.text:0040CD83                 sub     esp, 28h
.text:0040CD86                 mov     [ebp+var_C], ebx
.text:0040CD89                 mov     edx, [ebp+arg_C]
.text:0040CD8C                 mov     ecx, [ebp+arg_0]
.text:0040CD8F                 mov     [ebp+var_8], esi
.text:0040CD92                 mov     eax, [ebp+arg_8]
.text:0040CD95                 test    edx, edx
.text:0040CD97                 mov     [ebp+var_4], edi
.text:0040CD9A                 mov     ebx, [ebp+arg_4]
.text:0040CD9D                 mov     esi, eax
.text:0040CD9F                 mov     [ebp+var_18], 0
.text:0040CDA6                 mov     [ebp+var_14], 0
.text:0040CDAD                 mov     [ebp+var_1C], ecx
.text:0040CDB0                 jnz     short loc_40CE02
.text:0040CDB2                 cmp     eax, ebx
.text:0040CDB4                 jbe     short loc_40CDE0
.text:0040CDB6                 mov     eax, ecx
.text:0040CDB8                 mov     edx, ebx
.text:0040CDBA                 div     esi
.text:0040CDBC                 mov     edi, eax
.text:0040CDBE                 mov     esi, esi
.text:0040CDC0
.text:0040CDC0 loc_40CDC0:                             ; CODE XREF: sub_40CD80+88↓j
.text:0040CDC0                                         ; sub_40CD80+A4↓j ...
.text:0040CDC0                 xor     ecx, ecx
.text:0040CDC2
.text:0040CDC2 loc_40CDC2:                             ; CODE XREF: sub_40CD80+80↓j
.text:0040CDC2                 mov     [ebp+var_18], edi
.text:0040CDC5                 mov     ebx, [ebp+var_C]
.text:0040CDC8                 mov     eax, [ebp+var_18]
.text:0040CDCB                 mov     [ebp+var_14], ecx
.text:0040CDCE                 mov     esi, [ebp+var_8]
.text:0040CDD1                 mov     edx, [ebp+var_14]
.text:0040CDD4                 mov     edi, [ebp+var_4]
.text:0040CDD7                 mov     esp, ebp
.text:0040CDD9                 pop     ebp
.text:0040CDDA                 retn
.text:0040CDDA ; ---------------------------------------------------------------------------
.text:0040CDDB                 align 10h
.text:0040CDE0
.text:0040CDE0 loc_40CDE0:                             ; CODE XREF: sub_40CD80+34↑j
.text:0040CDE0                 test    eax, eax
.text:0040CDE2                 jnz     short loc_40CDF1
.text:0040CDE4                 mov     eax, 1
.text:0040CDE9                 xor     ecx, ecx
.text:0040CDEB                 xor     edx, edx
.text:0040CDED                 div     ecx
.text:0040CDEF                 mov     esi, eax
.text:0040CDF1
.text:0040CDF1 loc_40CDF1:                             ; CODE XREF: sub_40CD80+62↑j
.text:0040CDF1                 mov     eax, ebx
.text:0040CDF3                 xor     edx, edx
.text:0040CDF5                 div     esi
.text:0040CDF7                 mov     ecx, eax
.text:0040CDF9                 mov     eax, [ebp+var_1C]
.text:0040CDFC                 div     esi
.text:0040CDFE                 mov     edi, eax
.text:0040CE00                 jmp     short loc_40CDC2
.text:0040CE02 ; ---------------------------------------------------------------------------
.text:0040CE02
.text:0040CE02 loc_40CE02:                             ; CODE XREF: sub_40CD80+30↑j
.text:0040CE02                 cmp     edx, ebx
.text:0040CE04                 jbe     short loc_40CE10
.text:0040CE06                 xor     edi, edi
.text:0040CE08                 jmp     short loc_40CDC0
.text:0040CE08 ; ---------------------------------------------------------------------------
.text:0040CE0A                 align 10h
.text:0040CE10
.text:0040CE10 loc_40CE10:                             ; CODE XREF: sub_40CD80+84↑j
.text:0040CE10                 bsr     eax, edx
.text:0040CE13                 xor     eax, 1Fh
.text:0040CE16                 mov     [ebp+var_20], eax
.text:0040CE19                 jnz     short loc_40CE30
.text:0040CE1B                 cmp     ebx, edx
.text:0040CE1D                 ja      short loc_40CE26
.text:0040CE1F                 xor     edi, edi
.text:0040CE21                 cmp     [ebp+var_1C], esi
.text:0040CE24                 jb      short loc_40CDC0
.text:0040CE26
.text:0040CE26 loc_40CE26:                             ; CODE XREF: sub_40CD80+9D↑j
.text:0040CE26                 mov     edi, 1
.text:0040CE2B                 jmp     short loc_40CDC0
.text:0040CE2B ; ---------------------------------------------------------------------------
.text:0040CE2D                 align 10h
.text:0040CE30
.text:0040CE30 loc_40CE30:                             ; CODE XREF: sub_40CD80+99↑j
.text:0040CE30                 mov     eax, [ebp+var_20]
.text:0040CE33                 mov     ecx, 20h ; ' '
.text:0040CE38                 sub     ecx, eax
.text:0040CE3A                 mov     [ebp+var_24], ecx
.text:0040CE3D                 mov     eax, esi
.text:0040CE3F                 movzx   ecx, byte ptr [ebp+var_20]
.text:0040CE43                 shl     edx, cl
.text:0040CE45                 mov     edi, edx
.text:0040CE47                 movzx   ecx, byte ptr [ebp+var_24]
.text:0040CE4B                 mov     edx, ebx
.text:0040CE4D                 shr     eax, cl
.text:0040CE4F                 movzx   ecx, byte ptr [ebp+var_20]
.text:0040CE53                 or      edi, eax
.text:0040CE55                 mov     eax, [ebp+var_1C]
.text:0040CE58                 shl     esi, cl
.text:0040CE5A                 movzx   ecx, byte ptr [ebp+var_24]
.text:0040CE5E                 shr     edx, cl
.text:0040CE60                 movzx   ecx, byte ptr [ebp+var_20]
.text:0040CE64                 shl     ebx, cl
.text:0040CE66                 movzx   ecx, byte ptr [ebp+var_24]
.text:0040CE6A                 shr     eax, cl
.text:0040CE6C                 or      ebx, eax
.text:0040CE6E                 movzx   ecx, byte ptr [ebp+var_20]
.text:0040CE72                 mov     eax, ebx
.text:0040CE74                 div     edi
.text:0040CE76                 mov     ebx, edx
.text:0040CE78                 mov     edi, eax
.text:0040CE7A                 shl     [ebp+var_1C], cl
.text:0040CE7D                 mul     esi
.text:0040CE7F                 cmp     edx, ebx
.text:0040CE81                 ja      short loc_40CE94
.text:0040CE83                 cmp     edx, ebx
.text:0040CE85                 jnz     loc_40CDC0
.text:0040CE8B                 cmp     eax, [ebp+var_1C]
.text:0040CE8E                 jbe     loc_40CDC0
.text:0040CE94
.text:0040CE94 loc_40CE94:                             ; CODE XREF: sub_40CD80+101↑j
.text:0040CE94                 dec     edi
.text:0040CE95                 jmp     loc_40CDC0
.text:0040CE95 sub_40CD80      endp
.text:0040CE95
.text:0040CE95 ; ---------------------------------------------------------------------------
.text:0040CE9A                 align 10h
.text:0040CEA0
.text:0040CEA0 ; =============== S U B R O U T I N E =======================================
.text:0040CEA0
.text:0040CEA0 ; Attributes: bp-based frame
.text:0040CEA0
.text:0040CEA0 sub_40CEA0      proc near               ; CODE XREF: sub_406B20+1A5↑p
.text:0040CEA0                                         ; sub_406B20+21E↑p ...
.text:0040CEA0
.text:0040CEA0 var_34          = dword ptr -34h
.text:0040CEA0 var_2C          = dword ptr -2Ch
.text:0040CEA0 var_28          = dword ptr -28h
.text:0040CEA0 var_24          = dword ptr -24h
.text:0040CEA0 var_20          = dword ptr -20h
.text:0040CEA0 var_1C          = dword ptr -1Ch
.text:0040CEA0 var_18          = dword ptr -18h
.text:0040CEA0 var_14          = dword ptr -14h
.text:0040CEA0 arg_0           = dword ptr  8
.text:0040CEA0 arg_4           = dword ptr  0Ch
.text:0040CEA0 arg_8           = dword ptr  10h
.text:0040CEA0 arg_C           = dword ptr  14h
.text:0040CEA0
.text:0040CEA0                 push    ebp
.text:0040CEA1                 mov     ebp, esp
.text:0040CEA3                 push    edi
.text:0040CEA4                 push    esi
.text:0040CEA5                 push    ebx
.text:0040CEA6                 sub     esp, 2Ch
.text:0040CEA9                 mov     edx, [ebp+arg_C]
.text:0040CEAC                 mov     [ebp+var_20], 0
.text:0040CEB3                 mov     ecx, [ebp+arg_0]
.text:0040CEB6                 mov     ebx, [ebp+arg_4]
.text:0040CEB9                 mov     [ebp+var_1C], 0
.text:0040CEC0                 mov     eax, [ebp+arg_8]
.text:0040CEC3                 test    edx, edx
.text:0040CEC5                 mov     [ebp+var_24], edx
.text:0040CEC8                 mov     edi, ebx
.text:0040CECA                 mov     esi, eax
.text:0040CECC                 mov     [ebp+var_28], ecx
.text:0040CECF                 jnz     short loc_40CF30
.text:0040CED1                 cmp     eax, ebx
.text:0040CED3                 jbe     short loc_40CF10
.text:0040CED5                 mov     eax, ecx
.text:0040CED7                 mov     edx, ebx
.text:0040CED9                 div     esi
.text:0040CEDB
.text:0040CEDB loc_40CEDB:                             ; CODE XREF: sub_40CEA0+8B↓j
.text:0040CEDB                 mov     [ebp+var_28], edx
.text:0040CEDE                 lea     ecx, [ebp+var_18]
.text:0040CEE1                 test    ecx, ecx
.text:0040CEE3                 jz      short loc_40CEFE
.text:0040CEE5                 mov     [ebp+var_1C], 0
.text:0040CEEC
.text:0040CEEC loc_40CEEC:                             ; CODE XREF: sub_40CEA0+DA↓j
.text:0040CEEC                 mov     eax, [ebp+var_28]
.text:0040CEEF                 mov     [ebp+var_20], eax
.text:0040CEF2                 mov     edx, [ebp+var_20]
.text:0040CEF5                 mov     ecx, [ebp+var_1C]
.text:0040CEF8                 mov     [ebp+var_18], edx
.text:0040CEFB                 mov     [ebp+var_14], ecx
.text:0040CEFE
.text:0040CEFE loc_40CEFE:                             ; CODE XREF: sub_40CEA0+43↑j
.text:0040CEFE                                         ; sub_40CEA0+A7↓j ...
.text:0040CEFE                 mov     eax, [ebp+var_18]
.text:0040CF01                 mov     edx, [ebp+var_14]
.text:0040CF04                 add     esp, 2Ch
.text:0040CF07                 pop     ebx
.text:0040CF08                 pop     esi
.text:0040CF09                 pop     edi
.text:0040CF0A                 pop     ebp
.text:0040CF0B                 retn
.text:0040CF0B ; ---------------------------------------------------------------------------
.text:0040CF0C                 align 10h
.text:0040CF10
.text:0040CF10 loc_40CF10:                             ; CODE XREF: sub_40CEA0+33↑j
.text:0040CF10                 test    eax, eax
.text:0040CF12                 jnz     short loc_40CF1F
.text:0040CF14                 mov     eax, 1
.text:0040CF19                 xor     edx, edx
.text:0040CF1B                 div     esi
.text:0040CF1D                 mov     esi, eax
.text:0040CF1F
.text:0040CF1F loc_40CF1F:                             ; CODE XREF: sub_40CEA0+72↑j
.text:0040CF1F                 mov     eax, edi
.text:0040CF21                 mov     edx, [ebp+var_24]
.text:0040CF24                 div     esi
.text:0040CF26                 mov     eax, [ebp+var_28]
.text:0040CF29                 div     esi
.text:0040CF2B                 jmp     short loc_40CEDB
.text:0040CF2B ; ---------------------------------------------------------------------------
.text:0040CF2D                 align 10h
.text:0040CF30
.text:0040CF30 loc_40CF30:                             ; CODE XREF: sub_40CEA0+2F↑j
.text:0040CF30                 cmp     [ebp+var_24], ebx
.text:0040CF33                 jbe     short loc_40CF50
.text:0040CF35                 mov     [ebp+var_20], ecx
.text:0040CF38
.text:0040CF38 loc_40CF38:                             ; CODE XREF: sub_40CEA0+15B↓j
.text:0040CF38                 mov     [ebp+var_1C], edi
.text:0040CF3B                 mov     eax, [ebp+var_20]
.text:0040CF3E                 mov     edx, [ebp+var_1C]
.text:0040CF41                 mov     [ebp+var_18], eax
.text:0040CF44                 mov     [ebp+var_14], edx
.text:0040CF47                 jmp     short loc_40CEFE
.text:0040CF47 ; ---------------------------------------------------------------------------
.text:0040CF49                 align 10h
.text:0040CF50
.text:0040CF50 loc_40CF50:                             ; CODE XREF: sub_40CEA0+93↑j
.text:0040CF50                 bsr     eax, [ebp+var_24]
.text:0040CF54                 mov     ebx, eax
.text:0040CF56                 xor     ebx, 1Fh
.text:0040CF59                 jnz     short loc_40CF80
.text:0040CF5B                 cmp     edi, [ebp+var_24]
.text:0040CF5E                 ja      short loc_40CF65
.text:0040CF60                 cmp     [ebp+var_28], esi
.text:0040CF63                 jb      short loc_40CF70
.text:0040CF65
.text:0040CF65 loc_40CF65:                             ; CODE XREF: sub_40CEA0+BE↑j
.text:0040CF65                 mov     edx, [ebp+var_28]
.text:0040CF68                 sub     edx, esi
.text:0040CF6A                 sbb     edi, [ebp+var_24]
.text:0040CF6D                 mov     [ebp+var_28], edx
.text:0040CF70
.text:0040CF70 loc_40CF70:                             ; CODE XREF: sub_40CEA0+C3↑j
.text:0040CF70                 lea     ecx, [ebp+var_18]
.text:0040CF73                 test    ecx, ecx
.text:0040CF75                 jz      short loc_40CEFE
.text:0040CF77                 mov     [ebp+var_1C], edi
.text:0040CF7A                 jmp     loc_40CEEC
.text:0040CF7A ; ---------------------------------------------------------------------------
.text:0040CF7F                 align 10h
.text:0040CF80
.text:0040CF80 loc_40CF80:                             ; CODE XREF: sub_40CEA0+B9↑j
.text:0040CF80                 mov     edx, [ebp+var_24]
.text:0040CF83                 mov     eax, 20h ; ' '
.text:0040CF88                 mov     cl, bl
.text:0040CF8A                 sub     eax, ebx
.text:0040CF8C                 mov     [ebp+var_2C], eax
.text:0040CF8F                 shl     edx, cl
.text:0040CF91                 mov     eax, esi
.text:0040CF93                 movzx   ecx, byte ptr [ebp+var_2C]
.text:0040CF97                 shr     eax, cl
.text:0040CF99                 mov     cl, bl
.text:0040CF9B                 shl     esi, cl
.text:0040CF9D                 or      edx, eax
.text:0040CF9F                 mov     eax, [ebp+var_28]
.text:0040CFA2                 movzx   ecx, byte ptr [ebp+var_2C]
.text:0040CFA6                 mov     [ebp+var_24], edx
.text:0040CFA9                 mov     edx, edi
.text:0040CFAB                 shr     edx, cl
.text:0040CFAD                 mov     cl, bl
.text:0040CFAF                 shl     edi, cl
.text:0040CFB1                 movzx   ecx, byte ptr [ebp+var_2C]
.text:0040CFB5                 shr     eax, cl
.text:0040CFB7                 or      edi, eax
.text:0040CFB9                 mov     eax, edi
.text:0040CFBB                 mov     cl, bl
.text:0040CFBD                 div     [ebp+var_24]
.text:0040CFC0                 shl     [ebp+var_28], cl
.text:0040CFC3                 mov     edi, edx
.text:0040CFC5                 mul     esi
.text:0040CFC7                 mov     [ebp+var_34], eax
.text:0040CFCA                 cmp     edx, edi
.text:0040CFCC                 ja      short loc_40D008
.text:0040CFCE                 cmp     edx, edi
.text:0040CFD0                 jz      short loc_40D000
.text:0040CFD2
.text:0040CFD2 loc_40CFD2:                             ; CODE XREF: sub_40CEA0+166↓j
.text:0040CFD2                                         ; sub_40CEA0+173↓j
.text:0040CFD2                 lea     eax, [ebp+var_18]
.text:0040CFD5                 test    eax, eax
.text:0040CFD7                 jz      loc_40CEFE
.text:0040CFDD                 movzx   ecx, byte ptr [ebp+var_2C]
.text:0040CFE1                 mov     eax, [ebp+var_28]
.text:0040CFE4                 sub     eax, [ebp+var_34]
.text:0040CFE7                 sbb     edi, edx
.text:0040CFE9                 mov     [ebp+var_28], eax
.text:0040CFEC                 mov     edx, edi
.text:0040CFEE                 shl     edx, cl
.text:0040CFF0                 mov     cl, bl
.text:0040CFF2                 shr     eax, cl
.text:0040CFF4                 or      edx, eax
.text:0040CFF6                 mov     [ebp+var_20], edx
.text:0040CFF9                 shr     edi, cl
.text:0040CFFB                 jmp     loc_40CF38
.text:0040D000 ; ---------------------------------------------------------------------------
.text:0040D000
.text:0040D000 loc_40D000:                             ; CODE XREF: sub_40CEA0+130↑j
.text:0040D000                 mov     eax, [ebp+var_28]
.text:0040D003                 cmp     [ebp+var_34], eax
.text:0040D006                 jbe     short loc_40CFD2
.text:0040D008
.text:0040D008 loc_40D008:                             ; CODE XREF: sub_40CEA0+12C↑j
.text:0040D008                 mov     ecx, [ebp+var_34]
.text:0040D00B                 sub     ecx, esi
.text:0040D00D                 sbb     edx, [ebp+var_24]
.text:0040D010                 mov     [ebp+var_34], ecx
.text:0040D013                 jmp     short loc_40CFD2
.text:0040D013 sub_40CEA0      endp
.text:0040D013
.text:0040D013 ; ---------------------------------------------------------------------------
.text:0040D015                 align 10h
.text:0040D020
.text:0040D020 ; =============== S U B R O U T I N E =======================================
.text:0040D020
.text:0040D020 ; Attributes: thunk
.text:0040D020
.text:0040D020 ; int __cdecl chmod(const char *FileName, int AccessMode)
.text:0040D020 _chmod          proc near               ; CODE XREF: sub_4015E0+302↑p
.text:0040D020                                         ; sub_40B4E0+41↑j
.text:0040D020
.text:0040D020 FileName        = dword ptr  4
.text:0040D020 AccessMode      = dword ptr  8
.text:0040D020
.text:0040D020                 jmp     ds:__imp__chmod
.text:0040D020 _chmod          endp
.text:0040D020
.text:0040D020 ; ---------------------------------------------------------------------------
.text:0040D026                 align 10h
.text:0040D030
.text:0040D030 ; =============== S U B R O U T I N E =======================================
.text:0040D030
.text:0040D030 ; Attributes: thunk
.text:0040D030
.text:0040D030 ; int __cdecl umask(int Mode)
.text:0040D030 _umask          proc near               ; CODE XREF: sub_4015E0+264↑p
.text:0040D030                                         ; sub_401B30+9E↑p ...
.text:0040D030
.text:0040D030 Mode            = dword ptr  4
.text:0040D030
.text:0040D030                 jmp     ds:__imp__umask
.text:0040D030 _umask          endp
.text:0040D030
.text:0040D030 ; ---------------------------------------------------------------------------
.text:0040D036                 align 10h
.text:0040D040
.text:0040D040 ; =============== S U B R O U T I N E =======================================
.text:0040D040
.text:0040D040 ; Attributes: thunk
.text:0040D040
.text:0040D040 ; int __cdecl stricmp(const char *String1, const char *String2)
.text:0040D040 _stricmp        proc near               ; CODE XREF: sub_406FF0+46F↑p
.text:0040D040                                         ; sub_409470+2E↑p ...
.text:0040D040
.text:0040D040 String1         = dword ptr  4
.text:0040D040 String2         = dword ptr  8
.text:0040D040
.text:0040D040                 jmp     ds:__imp__stricmp
.text:0040D040 _stricmp        endp
.text:0040D040
.text:0040D040 ; ---------------------------------------------------------------------------
.text:0040D046                 align 10h
.text:0040D050
.text:0040D050 ; =============== S U B R O U T I N E =======================================
.text:0040D050
.text:0040D050 ; Attributes: thunk
.text:0040D050
.text:0040D050 ; char *__cdecl strdup(const char *String)
.text:0040D050 _strdup         proc near               ; CODE XREF: sub_4090A0+101↑p
.text:0040D050                                         ; .text:0040930A↑p ...
.text:0040D050
.text:0040D050 String          = dword ptr  4
.text:0040D050
.text:0040D050                 jmp     ds:__imp__strdup
.text:0040D050 _strdup         endp
.text:0040D050
.text:0040D050 ; ---------------------------------------------------------------------------
.text:0040D056                 align 10h
.text:0040D060
.text:0040D060 ; =============== S U B R O U T I N E =======================================
.text:0040D060
.text:0040D060 ; Attributes: thunk
.text:0040D060
.text:0040D060 ; int __cdecl getpid()
.text:0040D060 _getpid         proc near               ; CODE XREF: sub_40B0B0+84↑p
.text:0040D060                 jmp     ds:__imp__getpid
.text:0040D060 _getpid         endp
.text:0040D060
.text:0040D060 ; ---------------------------------------------------------------------------
.text:0040D066                 align 10h
.text:0040D070                 jmp     ds:__set_app_type
.text:0040D070 ; ---------------------------------------------------------------------------
.text:0040D076                 align 10h
.text:0040D080
.text:0040D080 ; =============== S U B R O U T I N E =======================================
.text:0040D080
.text:0040D080 ; Attributes: thunk
.text:0040D080
.text:0040D080 ; void __cdecl cexit()
.text:0040D080 _cexit          proc near               ; CODE XREF: .text:0040116C↑p
.text:0040D080                 jmp     ds:__imp__cexit
.text:0040D080 _cexit          endp
.text:0040D080
.text:0040D080 ; ---------------------------------------------------------------------------
.text:0040D086                 align 10h
.text:0040D090
.text:0040D090 ; =============== S U B R O U T I N E =======================================
.text:0040D090
.text:0040D090 ; Attributes: thunk
.text:0040D090
.text:0040D090 ; char ***__cdecl _p__environ()
.text:0040D090 __p__environ    proc near               ; CODE XREF: sub_401080+C7↑p
.text:0040D090                 jmp     ds:__imp___p__environ
.text:0040D090 __p__environ    endp
.text:0040D090
.text:0040D090 ; ---------------------------------------------------------------------------
.text:0040D096                 align 10h
.text:0040D0A0
.text:0040D0A0 ; =============== S U B R O U T I N E =======================================
.text:0040D0A0
.text:0040D0A0 ; Attributes: thunk
.text:0040D0A0
.text:0040D0A0 ; _crt_signal_t __cdecl signal(int Signal, _crt_signal_t Function)
.text:0040D0A0 signal          proc near               ; CODE XREF: TopLevelExceptionFilter+4D↑p
.text:0040D0A0                                         ; TopLevelExceptionFilter+88↑p ...
.text:0040D0A0
.text:0040D0A0 Signal          = dword ptr  4
.text:0040D0A0 Function        = dword ptr  8
.text:0040D0A0
.text:0040D0A0                 jmp     ds:__imp_signal
.text:0040D0A0 signal          endp
.text:0040D0A0
.text:0040D0A0 ; ---------------------------------------------------------------------------
.text:0040D0A6                 align 10h
.text:0040D0B0
.text:0040D0B0 ; =============== S U B R O U T I N E =======================================
.text:0040D0B0
.text:0040D0B0 ; Attributes: thunk
.text:0040D0B0
.text:0040D0B0 ; int *__cdecl _p__fmode()
.text:0040D0B0 __p__fmode      proc near               ; CODE XREF: sub_401080:loc_401135↑p
.text:0040D0B0                 jmp     ds:__imp___p__fmode
.text:0040D0B0 __p__fmode      endp
.text:0040D0B0
.text:0040D0B0 ; ---------------------------------------------------------------------------
.text:0040D0B6                 align 10h
.text:0040D0C0
.text:0040D0C0 ; =============== S U B R O U T I N E =======================================
.text:0040D0C0
.text:0040D0C0 ; Attributes: thunk
.text:0040D0C0
.text:0040D0C0 ; int __cdecl setmode(int FileHandle, int Mode)
.text:0040D0C0 _setmode        proc near               ; CODE XREF: sub_401080+70↑p
.text:0040D0C0                                         ; sub_401080+90↑p ...
.text:0040D0C0
.text:0040D0C0 FileHandle      = dword ptr  4
.text:0040D0C0 Mode            = dword ptr  8
.text:0040D0C0
.text:0040D0C0                 jmp     ds:__imp__setmode
.text:0040D0C0 _setmode        endp
.text:0040D0C0
.text:0040D0C0 ; ---------------------------------------------------------------------------
.text:0040D0C6                 align 10h
.text:0040D0D0
.text:0040D0D0 ; =============== S U B R O U T I N E =======================================
.text:0040D0D0
.text:0040D0D0 ; Attributes: thunk
.text:0040D0D0
.text:0040D0D0 __getmainargs   proc near               ; CODE XREF: sub_401080+49↑p
.text:0040D0D0                 jmp     ds:__imp___getmainargs
.text:0040D0D0 __getmainargs   endp
.text:0040D0D0
.text:0040D0D0 ; ---------------------------------------------------------------------------
.text:0040D0D6                 align 10h
.text:0040D0E0
.text:0040D0E0 ; =============== S U B R O U T I N E =======================================
.text:0040D0E0
.text:0040D0E0 ; Attributes: thunk
.text:0040D0E0
.text:0040D0E0 ; int *__cdecl errno()
.text:0040D0E0 _errno          proc near               ; CODE XREF: sub_4015E0+344↑p
.text:0040D0E0                                         ; sub_4015E0+395↑p ...
.text:0040D0E0                 jmp     ds:__imp__errno
.text:0040D0E0 _errno          endp
.text:0040D0E0
.text:0040D0E0 ; ---------------------------------------------------------------------------
.text:0040D0E6                 align 10h
.text:0040D0F0
.text:0040D0F0 ; =============== S U B R O U T I N E =======================================
.text:0040D0F0
.text:0040D0F0 ; Attributes: thunk
.text:0040D0F0
.text:0040D0F0 ; char *__cdecl setlocale(int Category, const char *Locale)
.text:0040D0F0 setlocale       proc near               ; CODE XREF: sub_4015E0+39↑p
.text:0040D0F0
.text:0040D0F0 Category        = dword ptr  4
.text:0040D0F0 Locale          = dword ptr  8
.text:0040D0F0
.text:0040D0F0                 jmp     ds:__imp_setlocale
.text:0040D0F0 setlocale       endp
.text:0040D0F0
.text:0040D0F0 ; ---------------------------------------------------------------------------
.text:0040D0F6                 align 10h
.text:0040D100
.text:0040D100 ; =============== S U B R O U T I N E =======================================
.text:0040D100
.text:0040D100 ; Attributes: noreturn thunk
.text:0040D100
.text:0040D100 ; void __cdecl __noreturn exit(int Code)
.text:0040D100 exit            proc near               ; CODE XREF: sub_4015E0:loc_4016E8↑p
.text:0040D100                                         ; .text:00401A2B↑p ...
.text:0040D100
.text:0040D100 Code            = dword ptr  4
.text:0040D100
.text:0040D100                 jmp     ds:__imp_exit
.text:0040D100 exit            endp
.text:0040D100
.text:0040D100 ; ---------------------------------------------------------------------------
.text:0040D106                 align 10h
.text:0040D110
.text:0040D110 ; =============== S U B R O U T I N E =======================================
.text:0040D110
.text:0040D110 ; Attributes: thunk
.text:0040D110
.text:0040D110 ; int __cdecl fputs(const char *Buffer, FILE *Stream)
.text:0040D110 fputs           proc near               ; CODE XREF: sub_4015E0+192↑p
.text:0040D110                                         ; sub_4015E0+1B4↑p ...
.text:0040D110
.text:0040D110 Buffer          = dword ptr  4
.text:0040D110 Stream          = dword ptr  8
.text:0040D110
.text:0040D110                 jmp     ds:__imp_fputs
.text:0040D110 fputs           endp
.text:0040D110
.text:0040D110 ; ---------------------------------------------------------------------------
.text:0040D116                 align 10h
.text:0040D120
.text:0040D120 ; =============== S U B R O U T I N E =======================================
.text:0040D120
.text:0040D120 ; Attributes: thunk
.text:0040D120
.text:0040D120 ; int printf(const char *const Format, ...)
.text:0040D120 printf          proc near               ; CODE XREF: sub_4015E0+170↑p
.text:0040D120                                         ; sub_4015E0+237↑p ...
.text:0040D120
.text:0040D120 Format          = dword ptr  4
.text:0040D120
.text:0040D120                 jmp     ds:__imp_printf
.text:0040D120 printf          endp
.text:0040D120
.text:0040D120 ; ---------------------------------------------------------------------------
.text:0040D126                 align 10h
.text:0040D130
.text:0040D130 ; =============== S U B R O U T I N E =======================================
.text:0040D130
.text:0040D130 ; Attributes: thunk
.text:0040D130
.text:0040D130 ; int fprintf(FILE *const Stream, const char *const Format, ...)
.text:0040D130 fprintf         proc near               ; CODE XREF: sub_4015E0+FC↑p
.text:0040D130                                         ; .text:00401A23↑p ...
.text:0040D130
.text:0040D130 Stream          = dword ptr  4
.text:0040D130 Format          = dword ptr  8
.text:0040D130
.text:0040D130                 jmp     ds:__imp_fprintf
.text:0040D130 fprintf         endp
.text:0040D130
.text:0040D130 ; ---------------------------------------------------------------------------
.text:0040D136                 align 10h
.text:0040D140
.text:0040D140 ; =============== S U B R O U T I N E =======================================
.text:0040D140
.text:0040D140 ; Attributes: thunk
.text:0040D140
.text:0040D140 ; void __cdecl free(void *Block)
.text:0040D140 free            proc near               ; CODE XREF: sub_402040+16↑p
.text:0040D140                                         ; sub_4050C0+112↑p ...
.text:0040D140
.text:0040D140 Block           = dword ptr  4
.text:0040D140
.text:0040D140                 jmp     ds:__imp_free
.text:0040D140 free            endp
.text:0040D140
.text:0040D140 ; ---------------------------------------------------------------------------
.text:0040D146                 align 10h
.text:0040D150
.text:0040D150 ; =============== S U B R O U T I N E =======================================
.text:0040D150
.text:0040D150 ; Attributes: thunk
.text:0040D150
.text:0040D150 ; void *__cdecl malloc(size_t Size)
.text:0040D150 malloc          proc near               ; CODE XREF: sub_401B30+5B↑p
.text:0040D150                                         ; sub_401B30+13F↑p ...
.text:0040D150
.text:0040D150 Size            = dword ptr  4
.text:0040D150
.text:0040D150                 jmp     ds:__imp_malloc
.text:0040D150 malloc          endp
.text:0040D150
.text:0040D150 ; ---------------------------------------------------------------------------
.text:0040D156                 align 10h
.text:0040D160
.text:0040D160 ; =============== S U B R O U T I N E =======================================
.text:0040D160
.text:0040D160 ; Attributes: thunk
.text:0040D160
.text:0040D160 ; size_t __cdecl strlen(const char *Str)
.text:0040D160 strlen          proc near               ; CODE XREF: sub_402330+2A9↑p
.text:0040D160                                         ; sub_402330+346↑p ...
.text:0040D160
.text:0040D160 Str             = dword ptr  4
.text:0040D160
.text:0040D160                 jmp     ds:__imp_strlen
.text:0040D160 strlen          endp
.text:0040D160
.text:0040D160 ; ---------------------------------------------------------------------------
.text:0040D166                 align 10h
.text:0040D170
.text:0040D170 ; =============== S U B R O U T I N E =======================================
.text:0040D170
.text:0040D170 ; Attributes: thunk
.text:0040D170
.text:0040D170 ; int __cdecl strncmp(const char *Str1, const char *Str2, size_t MaxCount)
.text:0040D170 strncmp         proc near               ; CODE XREF: sub_402330+23F↑p
.text:0040D170                                         ; sub_402330+699↑p
.text:0040D170
.text:0040D170 Str1            = dword ptr  4
.text:0040D170 Str2            = dword ptr  8
.text:0040D170 MaxCount        = dword ptr  0Ch
.text:0040D170
.text:0040D170                 jmp     ds:__imp_strncmp
.text:0040D170 strncmp         endp
.text:0040D170
.text:0040D170 ; ---------------------------------------------------------------------------
.text:0040D176                 align 10h
.text:0040D180
.text:0040D180 ; =============== S U B R O U T I N E =======================================
.text:0040D180
.text:0040D180 ; Attributes: thunk
.text:0040D180
.text:0040D180 ; char *__cdecl getenv(const char *VarName)
.text:0040D180 getenv          proc near               ; CODE XREF: sub_402330+B57↑p
.text:0040D180                                         ; sub_406FF0+3EE↑p ...
.text:0040D180
.text:0040D180 VarName         = dword ptr  4
.text:0040D180
.text:0040D180                 jmp     ds:__imp_getenv
.text:0040D180 getenv          endp
.text:0040D180
.text:0040D180 ; ---------------------------------------------------------------------------
.text:0040D186                 align 10h
.text:0040D190
.text:0040D190 ; =============== S U B R O U T I N E =======================================
.text:0040D190
.text:0040D190 ; Attributes: thunk
.text:0040D190
.text:0040D190 ; char *__cdecl strchr(const char *Str, int Val)
.text:0040D190 strchr          proc near               ; CODE XREF: sub_402330+469↑p
.text:0040D190                                         ; sub_402330+53A↑p ...
.text:0040D190
.text:0040D190 Str             = dword ptr  4
.text:0040D190 Val             = dword ptr  8
.text:0040D190
.text:0040D190                 jmp     ds:__imp_strchr
.text:0040D190 strchr          endp
.text:0040D190
.text:0040D190 ; ---------------------------------------------------------------------------
.text:0040D196                 align 10h
.text:0040D1A0
.text:0040D1A0 ; =============== S U B R O U T I N E =======================================
.text:0040D1A0
.text:0040D1A0 ; Attributes: noreturn thunk
.text:0040D1A0
.text:0040D1A0 ; void __cdecl __noreturn abort()
.text:0040D1A0 abort           proc near               ; CODE XREF: sub_403180+32↑p
.text:0040D1A0                                         ; sub_4034B0:loc_40354C↑p ...
.text:0040D1A0                 jmp     ds:__imp_abort
.text:0040D1A0 abort           endp
.text:0040D1A0
.text:0040D1A0 ; ---------------------------------------------------------------------------
.text:0040D1A6                 align 10h
.text:0040D1B0
.text:0040D1B0 ; =============== S U B R O U T I N E =======================================
.text:0040D1B0
.text:0040D1B0 ; Attributes: thunk
.text:0040D1B0
.text:0040D1B0 ; int __cdecl vfprintf(FILE *const Stream, const char *const Format, va_list ArgList)
.text:0040D1B0 vfprintf        proc near               ; CODE XREF: sub_4034B0+C1↑p
.text:0040D1B0                                         ; sub_4055B0+49↑p ...
.text:0040D1B0
.text:0040D1B0 Stream          = dword ptr  4
.text:0040D1B0 Format          = dword ptr  8
.text:0040D1B0 ArgList         = dword ptr  0Ch
.text:0040D1B0
.text:0040D1B0                 jmp     ds:__imp_vfprintf
.text:0040D1B0 vfprintf        endp
.text:0040D1B0
.text:0040D1B0 ; ---------------------------------------------------------------------------
.text:0040D1B6                 align 10h
.text:0040D1C0
.text:0040D1C0 ; =============== S U B R O U T I N E =======================================
.text:0040D1C0
.text:0040D1C0 ; Attributes: thunk
.text:0040D1C0
.text:0040D1C0 ; int __cdecl flsbuf(int Ch, FILE *File)
.text:0040D1C0 _flsbuf         proc near               ; CODE XREF: sub_4034B0+128↑p
.text:0040D1C0                                         ; sub_4034B0+13A↑p ...
.text:0040D1C0
.text:0040D1C0 File            = dword ptr  8
.text:0040D1C0
.text:0040D1C0                 jmp     ds:__imp__flsbuf
.text:0040D1C0 _flsbuf         endp
.text:0040D1C0
.text:0040D1C0 ; ---------------------------------------------------------------------------
.text:0040D1C6                 align 10h
.text:0040D1D0
.text:0040D1D0 ; =============== S U B R O U T I N E =======================================
.text:0040D1D0
.text:0040D1D0 ; Attributes: thunk
.text:0040D1D0
.text:0040D1D0 ; int __cdecl fclose(FILE *Stream)
.text:0040D1D0 fclose          proc near               ; CODE XREF: sub_403830+27↑p
.text:0040D1D0                                         ; .text:0040A9AE↑p
.text:0040D1D0
.text:0040D1D0 Stream          = dword ptr  4
.text:0040D1D0
.text:0040D1D0                 jmp     ds:__imp_fclose
.text:0040D1D0 fclose          endp
.text:0040D1D0
.text:0040D1D0 ; ---------------------------------------------------------------------------
.text:0040D1D6                 align 10h
.text:0040D1E0
.text:0040D1E0 ; =============== S U B R O U T I N E =======================================
.text:0040D1E0
.text:0040D1E0 ; Attributes: thunk
.text:0040D1E0
.text:0040D1E0 ; unsigned int __cdecl strtoul(const char *String, char **EndPtr, int Radix)
.text:0040D1E0 strtoul         proc near               ; CODE XREF: sub_403980+94↑p
.text:0040D1E0
.text:0040D1E0 String          = dword ptr  4
.text:0040D1E0 EndPtr          = dword ptr  8
.text:0040D1E0 Radix           = dword ptr  0Ch
.text:0040D1E0
.text:0040D1E0                 jmp     ds:__imp_strtoul
.text:0040D1E0 strtoul         endp
.text:0040D1E0
.text:0040D1E0 ; ---------------------------------------------------------------------------
.text:0040D1E6                 align 10h
.text:0040D1F0
.text:0040D1F0 ; =============== S U B R O U T I N E =======================================
.text:0040D1F0
.text:0040D1F0 ; Attributes: noreturn thunk
.text:0040D1F0
.text:0040D1F0 _assert         proc near               ; CODE XREF: sub_403980+553↑p
.text:0040D1F0                                         ; sub_40B0B0+414↑p
.text:0040D1F0                 jmp     ds:__imp__assert
.text:0040D1F0 _assert         endp
.text:0040D1F0
.text:0040D1F0 ; ---------------------------------------------------------------------------
.text:0040D1F6                 align 10h
.text:0040D200
.text:0040D200 ; =============== S U B R O U T I N E =======================================
.text:0040D200
.text:0040D200 ; Attributes: thunk
.text:0040D200
.text:0040D200 ; int __cdecl isctype(int C, int Type)
.text:0040D200 _isctype        proc near               ; CODE XREF: sub_403980+5F↑p
.text:0040D200                                         ; sub_403F80+610↑p
.text:0040D200
.text:0040D200 C               = dword ptr  4
.text:0040D200 Type            = dword ptr  8
.text:0040D200
.text:0040D200                 jmp     ds:__imp__isctype
.text:0040D200 _isctype        endp
.text:0040D200
.text:0040D200 ; ---------------------------------------------------------------------------
.text:0040D206                 align 10h
.text:0040D210
.text:0040D210 ; =============== S U B R O U T I N E =======================================
.text:0040D210
.text:0040D210 ; Attributes: thunk
.text:0040D210
.text:0040D210 ; int __cdecl iswctype(wint_t C, wctype_t Type)
.text:0040D210 iswctype        proc near               ; CODE XREF: sub_403F80+78B↑p
.text:0040D210
.text:0040D210 C               = word ptr  4
.text:0040D210 Type            = word ptr  8
.text:0040D210
.text:0040D210                 jmp     ds:__imp_iswctype
.text:0040D210 iswctype        endp
.text:0040D210
.text:0040D210 ; ---------------------------------------------------------------------------
.text:0040D216                 align 10h
.text:0040D220
.text:0040D220 ; =============== S U B R O U T I N E =======================================
.text:0040D220
.text:0040D220 ; Attributes: thunk
.text:0040D220
.text:0040D220 ; void *__cdecl memcpy(void *, const void *Src, size_t Size)
.text:0040D220 memcpy          proc near               ; CODE XREF: .text:00405478↑p
.text:0040D220                                         ; .text:004054C1↑p
.text:0040D220
.text:0040D220 Src             = dword ptr  8
.text:0040D220 Size            = dword ptr  0Ch
.text:0040D220
.text:0040D220                 jmp     ds:__imp_memcpy
.text:0040D220 memcpy          endp
.text:0040D220
.text:0040D220 ; ---------------------------------------------------------------------------
.text:0040D226                 align 10h
.text:0040D230
.text:0040D230 ; =============== S U B R O U T I N E =======================================
.text:0040D230
.text:0040D230 ; Attributes: thunk
.text:0040D230
.text:0040D230 ; void *__cdecl memset(void *, int Val, size_t Size)
.text:0040D230 memset          proc near               ; CODE XREF: .text:004053F6↑p
.text:0040D230
.text:0040D230 Val             = dword ptr  8
.text:0040D230 Size            = dword ptr  0Ch
.text:0040D230
.text:0040D230                 jmp     ds:__imp_memset
.text:0040D230 memset          endp
.text:0040D230
.text:0040D230 ; ---------------------------------------------------------------------------
.text:0040D236                 align 10h
.text:0040D240
.text:0040D240 ; =============== S U B R O U T I N E =======================================
.text:0040D240
.text:0040D240 ; Attributes: thunk
.text:0040D240
.text:0040D240 ; void *__cdecl calloc(size_t Count, size_t Size)
.text:0040D240 calloc          proc near               ; CODE XREF: .text:00405433↑p
.text:0040D240                                         ; sub_4090A0+AC↑p
.text:0040D240
.text:0040D240 Count           = dword ptr  4
.text:0040D240 Size            = dword ptr  8
.text:0040D240
.text:0040D240                 jmp     ds:__imp_calloc
.text:0040D240 calloc          endp
.text:0040D240
.text:0040D240 ; ---------------------------------------------------------------------------
.text:0040D246                 align 10h
.text:0040D250
.text:0040D250 ; =============== S U B R O U T I N E =======================================
.text:0040D250
.text:0040D250 ; Attributes: thunk
.text:0040D250
.text:0040D250 ; void *__cdecl realloc(void *Block, size_t Size)
.text:0040D250 realloc         proc near               ; CODE XREF: .text:00405330↑p
.text:0040D250                                         ; sub_405360+16↑p ...
.text:0040D250
.text:0040D250 Block           = dword ptr  4
.text:0040D250 Size            = dword ptr  8
.text:0040D250
.text:0040D250                 jmp     ds:__imp_realloc
.text:0040D250 realloc         endp
.text:0040D250
.text:0040D250 ; ---------------------------------------------------------------------------
.text:0040D256                 align 10h
.text:0040D260
.text:0040D260 ; =============== S U B R O U T I N E =======================================
.text:0040D260
.text:0040D260 ; Attributes: thunk
.text:0040D260
.text:0040D260 ; int __cdecl strcmp(const char *Str1, const char *Str2)
.text:0040D260 strcmp          proc near               ; CODE XREF: sub_4056B4+180↑p
.text:0040D260                                         ; .text:00409DAB↑p
.text:0040D260
.text:0040D260 Str1            = dword ptr  4
.text:0040D260 Str2            = dword ptr  8
.text:0040D260
.text:0040D260                 jmp     ds:__imp_strcmp
.text:0040D260 strcmp          endp
.text:0040D260
.text:0040D260 ; ---------------------------------------------------------------------------
.text:0040D266                 align 10h
.text:0040D270
.text:0040D270 ; =============== S U B R O U T I N E =======================================
.text:0040D270
.text:0040D270 ; Attributes: thunk
.text:0040D270
.text:0040D270 ; int __cdecl fflush(FILE *Stream)
.text:0040D270 fflush          proc near               ; CODE XREF: sub_4055B0+19↑p
.text:0040D270                                         ; sub_4055B0+81↑p ...
.text:0040D270
.text:0040D270 Stream          = dword ptr  4
.text:0040D270
.text:0040D270                 jmp     ds:__imp_fflush
.text:0040D270 fflush          endp
.text:0040D270
.text:0040D270 ; ---------------------------------------------------------------------------
.text:0040D276                 align 10h
.text:0040D280
.text:0040D280 ; =============== S U B R O U T I N E =======================================
.text:0040D280
.text:0040D280 ; Attributes: thunk
.text:0040D280
.text:0040D280 ; char *__cdecl strerror(int ErrorMessage)
.text:0040D280 strerror        proc near               ; CODE XREF: sub_4055B0+A5↑p
.text:0040D280                                         ; sub_4056B4+10F↑p
.text:0040D280
.text:0040D280 ErrorMessage    = dword ptr  4
.text:0040D280
.text:0040D280                 jmp     ds:__imp_strerror
.text:0040D280 strerror        endp
.text:0040D280
.text:0040D280 ; ---------------------------------------------------------------------------
.text:0040D286                 align 10h
.text:0040D290
.text:0040D290 ; =============== S U B R O U T I N E =======================================
.text:0040D290
.text:0040D290 ; Attributes: thunk
.text:0040D290
.text:0040D290 ; int __cdecl open_osfhandle(intptr_t OSFileHandle, int Flags)
.text:0040D290 _open_osfhandle proc near               ; CODE XREF: sub_405850+A1↑p
.text:0040D290
.text:0040D290 OSFileHandle    = dword ptr  4
.text:0040D290 Flags           = dword ptr  8
.text:0040D290
.text:0040D290                 jmp     ds:__imp__open_osfhandle
.text:0040D290 _open_osfhandle endp
.text:0040D290
.text:0040D290 ; ---------------------------------------------------------------------------
.text:0040D296                 align 10h
.text:0040D2A0
.text:0040D2A0 ; =============== S U B R O U T I N E =======================================
.text:0040D2A0
.text:0040D2A0 ; Attributes: thunk
.text:0040D2A0
.text:0040D2A0 ; char *__cdecl strcat(char *Destination, const char *Source)
.text:0040D2A0 strcat          proc near               ; CODE XREF: sub_405850+4D↑p
.text:0040D2A0                                         ; sub_405BA0+74↑p ...
.text:0040D2A0
.text:0040D2A0 Destination     = dword ptr  4
.text:0040D2A0 Source          = dword ptr  8
.text:0040D2A0
.text:0040D2A0                 jmp     ds:__imp_strcat
.text:0040D2A0 strcat          endp
.text:0040D2A0
.text:0040D2A0 ; ---------------------------------------------------------------------------
.text:0040D2A6                 align 10h
.text:0040D2B0
.text:0040D2B0 ; =============== S U B R O U T I N E =======================================
.text:0040D2B0
.text:0040D2B0 ; Attributes: thunk
.text:0040D2B0
.text:0040D2B0 ; char *__cdecl strcpy(char *Destination, const char *Source)
.text:0040D2B0 strcpy          proc near               ; CODE XREF: sub_405BA0+35↑p
.text:0040D2B0                                         ; _win32_longpath+13C↑p ...
.text:0040D2B0
.text:0040D2B0 Destination     = dword ptr  4
.text:0040D2B0 Source          = dword ptr  8
.text:0040D2B0
.text:0040D2B0                 jmp     ds:__imp_strcpy
.text:0040D2B0 strcpy          endp
.text:0040D2B0
.text:0040D2B0 ; ---------------------------------------------------------------------------
.text:0040D2B6                 align 10h
.text:0040D2C0
.text:0040D2C0 ; =============== S U B R O U T I N E =======================================
.text:0040D2C0
.text:0040D2C0 ; Attributes: thunk
.text:0040D2C0
.text:0040D2C0 ; char *__cdecl strrchr(const char *Str, int Ch)
.text:0040D2C0 strrchr         proc near               ; CODE XREF: sub_405BA0+49↑p
.text:0040D2C0                                         ; .text:004062DE↑p ...
.text:0040D2C0
.text:0040D2C0 Str             = dword ptr  4
.text:0040D2C0
.text:0040D2C0                 jmp     ds:__imp_strrchr
.text:0040D2C0 strrchr         endp
.text:0040D2C0
.text:0040D2C0 ; ---------------------------------------------------------------------------
.text:0040D2C6                 align 10h
.text:0040D2D0
.text:0040D2D0 ; =============== S U B R O U T I N E =======================================
.text:0040D2D0
.text:0040D2D0 ; Attributes: thunk
.text:0040D2D0
.text:0040D2D0 ; int __cdecl isalpha(int C)
.text:0040D2D0 isalpha         proc near               ; CODE XREF: _win32_longpath+25↑p
.text:0040D2D0
.text:0040D2D0 C               = dword ptr  4
.text:0040D2D0
.text:0040D2D0                 jmp     ds:__imp_isalpha
.text:0040D2D0 isalpha         endp
.text:0040D2D0
.text:0040D2D0 ; ---------------------------------------------------------------------------
.text:0040D2D6                 align 10h
.text:0040D2E0
.text:0040D2E0 ; =============== S U B R O U T I N E =======================================
.text:0040D2E0
.text:0040D2E0 ; Attributes: thunk
.text:0040D2E0
.text:0040D2E0 ; int __cdecl stricmp_0(const char *String1, const char *String2)
.text:0040D2E0 _stricmp_0      proc near               ; CODE XREF: .text:004063C4↑p
.text:0040D2E0
.text:0040D2E0 String1         = dword ptr  4
.text:0040D2E0 String2         = dword ptr  8
.text:0040D2E0
.text:0040D2E0                 jmp     ds:__imp__stricmp_0
.text:0040D2E0 _stricmp_0      endp
.text:0040D2E0
.text:0040D2E0 ; ---------------------------------------------------------------------------
.text:0040D2E6                 align 10h
.text:0040D2F0
.text:0040D2F0 ; =============== S U B R O U T I N E =======================================
.text:0040D2F0
.text:0040D2F0 ; Attributes: thunk
.text:0040D2F0
.text:0040D2F0 ; char *__cdecl strstr(const char *Str, const char *SubStr)
.text:0040D2F0 strstr          proc near               ; CODE XREF: sub_406FF0+3BF↑p
.text:0040D2F0                                         ; sub_406FF0+3DC↑p ...
.text:0040D2F0
.text:0040D2F0 Str             = dword ptr  4
.text:0040D2F0 SubStr          = dword ptr  8
.text:0040D2F0
.text:0040D2F0                 jmp     ds:__imp_strstr
.text:0040D2F0 strstr          endp
.text:0040D2F0
.text:0040D2F0 ; ---------------------------------------------------------------------------
.text:0040D2F6                 align 10h
.text:0040D300
.text:0040D300 ; =============== S U B R O U T I N E =======================================
.text:0040D300
.text:0040D300 ; Attributes: thunk
.text:0040D300
.text:0040D300 ; int sprintf(char *const Buffer, const char *const Format, ...)
.text:0040D300 sprintf         proc near               ; CODE XREF: .text:0040854A↑p
.text:0040D300                                         ; .text:0040856B↑p ...
.text:0040D300
.text:0040D300 Buffer          = dword ptr  4
.text:0040D300 Format          = dword ptr  8
.text:0040D300
.text:0040D300                 jmp     ds:__imp_sprintf
.text:0040D300 sprintf         endp
.text:0040D300
.text:0040D300 ; ---------------------------------------------------------------------------
.text:0040D306                 align 10h
.text:0040D310
.text:0040D310 ; =============== S U B R O U T I N E =======================================
.text:0040D310
.text:0040D310 ; Attributes: thunk
.text:0040D310
.text:0040D310 ; char *__cdecl strncpy(char *Destination, const char *Source, size_t Count)
.text:0040D310 strncpy         proc near               ; CODE XREF: sub_4090A0+BE↑p
.text:0040D310                                         ; .text:0040991A↑p ...
.text:0040D310
.text:0040D310 Destination     = dword ptr  4
.text:0040D310 Source          = dword ptr  8
.text:0040D310 Count           = dword ptr  0Ch
.text:0040D310
.text:0040D310                 jmp     ds:__imp_strncpy
.text:0040D310 strncpy         endp
.text:0040D310
.text:0040D310 ; ---------------------------------------------------------------------------
.text:0040D316                 align 10h
.text:0040D320
.text:0040D320 ; =============== S U B R O U T I N E =======================================
.text:0040D320
.text:0040D320 ; Attributes: thunk
.text:0040D320
.text:0040D320 ; int __cdecl toupper(int C)
.text:0040D320 toupper         proc near               ; CODE XREF: sub_4090A0+10E↑p
.text:0040D320
.text:0040D320 C               = dword ptr  4
.text:0040D320
.text:0040D320                 jmp     ds:__imp_toupper
.text:0040D320 toupper         endp
.text:0040D320
.text:0040D320 ; ---------------------------------------------------------------------------
.text:0040D326                 align 10h
.text:0040D330
.text:0040D330 ; =============== S U B R O U T I N E =======================================
.text:0040D330
.text:0040D330 ; Attributes: thunk
.text:0040D330
.text:0040D330 ; int sscanf(const char *const Buffer, const char *const Format, ...)
.text:0040D330 sscanf          proc near               ; CODE XREF: .text:00409FEE↑p
.text:0040D330
.text:0040D330 Buffer          = dword ptr  4
.text:0040D330 Format          = dword ptr  8
.text:0040D330
.text:0040D330                 jmp     ds:__imp_sscanf
.text:0040D330 sscanf          endp
.text:0040D330
.text:0040D330 ; ---------------------------------------------------------------------------
.text:0040D336                 align 10h
.text:0040D340
.text:0040D340 ; =============== S U B R O U T I N E =======================================
.text:0040D340
.text:0040D340 ; Attributes: thunk
.text:0040D340
.text:0040D340 ; size_t __cdecl strspn(const char *Str, const char *Control)
.text:0040D340 strspn          proc near               ; CODE XREF: .text:00409E3A↑p
.text:0040D340                                         ; .text:0040A054↑p ...
.text:0040D340
.text:0040D340 Str             = dword ptr  4
.text:0040D340 Control         = dword ptr  8
.text:0040D340
.text:0040D340                 jmp     ds:__imp_strspn
.text:0040D340 strspn          endp
.text:0040D340
.text:0040D340 ; ---------------------------------------------------------------------------
.text:0040D346                 align 10h
.text:0040D350
.text:0040D350 ; =============== S U B R O U T I N E =======================================
.text:0040D350
.text:0040D350 ; Attributes: thunk
.text:0040D350
.text:0040D350 ; FILE *__cdecl fopen(const char *FileName, const char *Mode)
.text:0040D350 fopen           proc near               ; CODE XREF: sub_40A8EF+26↑p
.text:0040D350                                         ; sub_40A8EF+99↑p
.text:0040D350
.text:0040D350 FileName        = dword ptr  4
.text:0040D350 Mode            = dword ptr  8
.text:0040D350
.text:0040D350                 jmp     ds:__imp_fopen
.text:0040D350 fopen           endp
.text:0040D350
.text:0040D350 ; ---------------------------------------------------------------------------
.text:0040D356                 align 10h
.text:0040D360
.text:0040D360 ; =============== S U B R O U T I N E =======================================
.text:0040D360
.text:0040D360 ; Attributes: thunk
.text:0040D360
.text:0040D360 ; intptr_t __cdecl get_osfhandle(int FileHandle)
.text:0040D360 _get_osfhandle  proc near               ; CODE XREF: sub_40AAA0+3A↑p
.text:0040D360                                         ; sub_40AB60+15↑p
.text:0040D360
.text:0040D360 FileHandle      = dword ptr  4
.text:0040D360
.text:0040D360                 jmp     ds:__imp__get_osfhandle
.text:0040D360 _get_osfhandle  endp
.text:0040D360
.text:0040D360 ; ---------------------------------------------------------------------------
.text:0040D366                 align 10h
.text:0040D370
.text:0040D370 ; =============== S U B R O U T I N E =======================================
.text:0040D370
.text:0040D370 ; Attributes: thunk
.text:0040D370
.text:0040D370 ; __int64 __cdecl filelengthi64(int FileHandle)
.text:0040D370 _filelengthi64  proc near               ; CODE XREF: sub_40AB60+1F↑p
.text:0040D370
.text:0040D370 FileHandle      = dword ptr  4
.text:0040D370
.text:0040D370                 jmp     ds:__imp__filelengthi64
.text:0040D370 _filelengthi64  endp
.text:0040D370
.text:0040D370 ; ---------------------------------------------------------------------------
.text:0040D376                 align 10h
.text:0040D380
.text:0040D380 ; =============== S U B R O U T I N E =======================================
.text:0040D380
.text:0040D380 ; Attributes: thunk
.text:0040D380
.text:0040D380 ; char *__cdecl strpbrk(const char *Str, const char *Control)
.text:0040D380 strpbrk         proc near               ; CODE XREF: sub_40ABC0+87↑p
.text:0040D380
.text:0040D380 Str             = dword ptr  4
.text:0040D380 Control         = dword ptr  8
.text:0040D380
.text:0040D380                 jmp     ds:__imp_strpbrk
.text:0040D380 strpbrk         endp
.text:0040D380
.text:0040D380 ; ---------------------------------------------------------------------------
.text:0040D386                 align 10h
.text:0040D390
.text:0040D390 ; =============== S U B R O U T I N E =======================================
.text:0040D390
.text:0040D390 ; Attributes: thunk
.text:0040D390
.text:0040D390 ; FILE *__cdecl fdopen(int FileHandle, const char *Format)
.text:0040D390 _fdopen         proc near               ; CODE XREF: sub_40AC60+69↑p
.text:0040D390
.text:0040D390 FileHandle      = dword ptr  4
.text:0040D390 Format          = dword ptr  8
.text:0040D390
.text:0040D390                 jmp     ds:__imp__fdopen
.text:0040D390 _fdopen         endp
.text:0040D390
.text:0040D390 ; ---------------------------------------------------------------------------
.text:0040D396                 align 10h
.text:0040D3A0
.text:0040D3A0 ; =============== S U B R O U T I N E =======================================
.text:0040D3A0
.text:0040D3A0 ; Attributes: thunk
.text:0040D3A0
.text:0040D3A0 ; int __cdecl close(int FileHandle)
.text:0040D3A0 _close          proc near               ; CODE XREF: sub_40AC60+90↑p
.text:0040D3A0
.text:0040D3A0 FileHandle      = dword ptr  4
.text:0040D3A0
.text:0040D3A0                 jmp     ds:__imp__close
.text:0040D3A0 _close          endp
.text:0040D3A0
.text:0040D3A0 ; ---------------------------------------------------------------------------
.text:0040D3A6                 align 10h
.text:0040D3B0
.text:0040D3B0 ; =============== S U B R O U T I N E =======================================
.text:0040D3B0
.text:0040D3B0 ; Attributes: thunk
.text:0040D3B0
.text:0040D3B0 ; int open(const char *FileName, int OpenFlag, ...)
.text:0040D3B0 _open           proc near               ; CODE XREF: sub_40B0B0:loc_40B440↑p
.text:0040D3B0
.text:0040D3B0 FileName        = dword ptr  4
.text:0040D3B0 OpenFlag        = dword ptr  8
.text:0040D3B0
.text:0040D3B0                 jmp     ds:__imp__open
.text:0040D3B0 _open           endp
.text:0040D3B0
.text:0040D3B0 ; ---------------------------------------------------------------------------
.text:0040D3B6                 align 10h
.text:0040D3C0
.text:0040D3C0 ; =============== S U B R O U T I N E =======================================
.text:0040D3C0
.text:0040D3C0 ; Attributes: thunk
.text:0040D3C0
.text:0040D3C0 ; LPTOP_LEVEL_EXCEPTION_FILTER __stdcall SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.text:0040D3C0 SetUnhandledExceptionFilter proc near   ; CODE XREF: sub_401080+E↑p
.text:0040D3C0
.text:0040D3C0 lpTopLevelExceptionFilter= dword ptr  4
.text:0040D3C0
.text:0040D3C0                 jmp     ds:__imp_SetUnhandledExceptionFilter
.text:0040D3C0 SetUnhandledExceptionFilter endp
.text:0040D3C0
.text:0040D3C0 ; ---------------------------------------------------------------------------
.text:0040D3C6                 align 10h
.text:0040D3D0
.text:0040D3D0 ; =============== S U B R O U T I N E =======================================
.text:0040D3D0
.text:0040D3D0 ; Attributes: noreturn thunk
.text:0040D3D0
.text:0040D3D0 ; void __stdcall __noreturn ExitProcess(UINT uExitCode)
.text:0040D3D0 ExitProcess     proc near               ; CODE XREF: .text:00401174↑p
.text:0040D3D0
.text:0040D3D0 uExitCode       = dword ptr  4
.text:0040D3D0
.text:0040D3D0                 jmp     ds:__imp_ExitProcess
.text:0040D3D0 ExitProcess     endp
.text:0040D3D0
.text:0040D3D0 ; ---------------------------------------------------------------------------
.text:0040D3D6                 align 10h
.text:0040D3E0
.text:0040D3E0 ; =============== S U B R O U T I N E =======================================
.text:0040D3E0
.text:0040D3E0 ; Attributes: thunk
.text:0040D3E0
.text:0040D3E0 ; HANDLE __stdcall CreateNamedPipeA(LPCSTR lpName, DWORD dwOpenMode, DWORD dwPipeMode, DWORD nMaxInstances, DWORD nOutBufferSize, DWORD nInBufferSize, DWORD nDefaultTimeOut, LPSECURITY_ATTRIBUTES lpSecurityAttributes)
.text:0040D3E0 CreateNamedPipeA proc near              ; CODE XREF: sub_405850+8D↑p
.text:0040D3E0
.text:0040D3E0 lpName          = dword ptr  4
.text:0040D3E0 dwOpenMode      = dword ptr  8
.text:0040D3E0 dwPipeMode      = dword ptr  0Ch
.text:0040D3E0 nMaxInstances   = dword ptr  10h
.text:0040D3E0 nOutBufferSize  = dword ptr  14h
.text:0040D3E0 nInBufferSize   = dword ptr  18h
.text:0040D3E0 nDefaultTimeOut = dword ptr  1Ch
.text:0040D3E0 lpSecurityAttributes= dword ptr  20h
.text:0040D3E0
.text:0040D3E0                 jmp     ds:__imp_CreateNamedPipeA
.text:0040D3E0 CreateNamedPipeA endp
.text:0040D3E0
.text:0040D3E0 ; ---------------------------------------------------------------------------
.text:0040D3E6                 align 10h
.text:0040D3F0
.text:0040D3F0 ; =============== S U B R O U T I N E =======================================
.text:0040D3F0
.text:0040D3F0 ; Attributes: thunk
.text:0040D3F0
.text:0040D3F0 ; BOOL __stdcall AreFileApisANSI()
.text:0040D3F0 AreFileApisANSI proc near               ; CODE XREF: sub_405A20+89↑p
.text:0040D3F0                 jmp     ds:__imp_AreFileApisANSI
.text:0040D3F0 AreFileApisANSI endp
.text:0040D3F0
.text:0040D3F0 ; ---------------------------------------------------------------------------
.text:0040D3F6                 align 10h
.text:0040D400
.text:0040D400 ; =============== S U B R O U T I N E =======================================
.text:0040D400
.text:0040D400 ; Attributes: thunk
.text:0040D400
.text:0040D400 ; int __stdcall MultiByteToWideChar(UINT CodePage, DWORD dwFlags, LPCCH lpMultiByteStr, int cbMultiByte, LPWSTR lpWideCharStr, int cchWideChar)
.text:0040D400 MultiByteToWideChar proc near           ; CODE XREF: sub_405A20+BD↑p
.text:0040D400
.text:0040D400 CodePage        = dword ptr  4
.text:0040D400 dwFlags         = dword ptr  8
.text:0040D400 lpMultiByteStr  = dword ptr  0Ch
.text:0040D400 cbMultiByte     = dword ptr  10h
.text:0040D400 lpWideCharStr   = dword ptr  14h
.text:0040D400 cchWideChar     = dword ptr  18h
.text:0040D400
.text:0040D400                 jmp     ds:__imp_MultiByteToWideChar
.text:0040D400 MultiByteToWideChar endp
.text:0040D400
.text:0040D400 ; ---------------------------------------------------------------------------
.text:0040D406                 align 10h
.text:0040D410
.text:0040D410 ; =============== S U B R O U T I N E =======================================
.text:0040D410
.text:0040D410 ; Attributes: thunk
.text:0040D410
.text:0040D410 ; LPSTR __stdcall lstrcpyA(LPSTR lpString1, LPCSTR lpString2)
.text:0040D410 lstrcpyA        proc near               ; CODE XREF: sub_405A20+128↑p
.text:0040D410
.text:0040D410 lpString1       = dword ptr  4
.text:0040D410 lpString2       = dword ptr  8
.text:0040D410
.text:0040D410                 jmp     ds:__imp_lstrcpyA
.text:0040D410 lstrcpyA        endp
.text:0040D410
.text:0040D410 ; ---------------------------------------------------------------------------
.text:0040D416                 align 10h
.text:0040D420
.text:0040D420 ; =============== S U B R O U T I N E =======================================
.text:0040D420
.text:0040D420 ; Attributes: thunk
.text:0040D420
.text:0040D420 ; UINT __stdcall SetErrorMode(UINT uMode)
.text:0040D420 SetErrorMode    proc near               ; CODE XREF: sub_405BA0+80↑p
.text:0040D420                                         ; sub_405BA0+A9↑p ...
.text:0040D420
.text:0040D420 uMode           = dword ptr  4
.text:0040D420
.text:0040D420                 jmp     ds:__imp_SetErrorMode
.text:0040D420 SetErrorMode    endp
.text:0040D420
.text:0040D420 ; ---------------------------------------------------------------------------
.text:0040D426                 align 10h
.text:0040D430
.text:0040D430 ; =============== S U B R O U T I N E =======================================
.text:0040D430
.text:0040D430 ; Attributes: thunk
.text:0040D430
.text:0040D430 ; HANDLE __stdcall FindFirstFileA(LPCSTR lpFileName, LPWIN32_FIND_DATAA lpFindFileData)
.text:0040D430 FindFirstFileA  proc near               ; CODE XREF: _win32_longpath+CA↑p
.text:0040D430                                         ; sub_406830+CE↑p ...
.text:0040D430
.text:0040D430 lpFileName      = dword ptr  4
.text:0040D430 lpFindFileData  = dword ptr  8
.text:0040D430
.text:0040D430                 jmp     ds:__imp_FindFirstFileA
.text:0040D430 FindFirstFileA  endp
.text:0040D430
.text:0040D430 ; ---------------------------------------------------------------------------
.text:0040D436                 align 10h
.text:0040D440
.text:0040D440 ; =============== S U B R O U T I N E =======================================
.text:0040D440
.text:0040D440 ; Attributes: thunk
.text:0040D440
.text:0040D440 ; BOOL __stdcall FindClose(HANDLE hFindFile)
.text:0040D440 FindClose       proc near               ; CODE XREF: _win32_longpath+144↑p
.text:0040D440                                         ; _win32_longpath+185↑p ...
.text:0040D440
.text:0040D440 hFindFile       = dword ptr  4
.text:0040D440
.text:0040D440                 jmp     ds:__imp_FindClose
.text:0040D440 FindClose       endp
.text:0040D440
.text:0040D440 ; ---------------------------------------------------------------------------
.text:0040D446                 align 10h
.text:0040D450
.text:0040D450 ; =============== S U B R O U T I N E =======================================
.text:0040D450
.text:0040D450 ; Attributes: thunk
.text:0040D450
.text:0040D450 ; DWORD __stdcall GetModuleFileNameA(HMODULE hModule, LPSTR lpFilename, DWORD nSize)
.text:0040D450 GetModuleFileNameA proc near            ; CODE XREF: sub_406240+1C↑p
.text:0040D450
.text:0040D450 hModule         = dword ptr  4
.text:0040D450 lpFilename      = dword ptr  8
.text:0040D450 nSize           = dword ptr  0Ch
.text:0040D450
.text:0040D450                 jmp     ds:__imp_GetModuleFileNameA
.text:0040D450 GetModuleFileNameA endp
.text:0040D450
.text:0040D450 ; ---------------------------------------------------------------------------
.text:0040D456                 align 10h
.text:0040D460
.text:0040D460 ; =============== S U B R O U T I N E =======================================
.text:0040D460
.text:0040D460 ; Attributes: thunk
.text:0040D460
.text:0040D460 ; HMODULE __stdcall GetModuleHandleA(LPCSTR lpModuleName)
.text:0040D460 GetModuleHandleA proc near              ; CODE XREF: .text:0040642E↑p
.text:0040D460                                         ; sub_406830+18↑p ...
.text:0040D460
.text:0040D460 lpModuleName    = dword ptr  4
.text:0040D460
.text:0040D460                 jmp     ds:__imp_GetModuleHandleA
.text:0040D460 GetModuleHandleA endp
.text:0040D460
.text:0040D460 ; ---------------------------------------------------------------------------
.text:0040D466                 align 10h
.text:0040D470
.text:0040D470 ; =============== S U B R O U T I N E =======================================
.text:0040D470
.text:0040D470 ; Attributes: thunk
.text:0040D470
.text:0040D470 ; FARPROC __stdcall GetProcAddress(HMODULE hModule, LPCSTR lpProcName)
.text:0040D470 GetProcAddress  proc near               ; CODE XREF: .text:00406441↑p
.text:0040D470                                         ; sub_406830+33↑p ...
.text:0040D470
.text:0040D470 hModule         = dword ptr  4
.text:0040D470 lpProcName      = dword ptr  8
.text:0040D470
.text:0040D470                 jmp     ds:__imp_GetProcAddress
.text:0040D470 GetProcAddress  endp
.text:0040D470
.text:0040D470 ; ---------------------------------------------------------------------------
.text:0040D476                 align 10h
.text:0040D480
.text:0040D480 ; =============== S U B R O U T I N E =======================================
.text:0040D480
.text:0040D480 ; Attributes: thunk
.text:0040D480
.text:0040D480 ; DWORD __stdcall GetShortPathNameA(LPCSTR lpszLongPath, LPSTR lpszShortPath, DWORD cchBuffer)
.text:0040D480 GetShortPathNameA proc near             ; CODE XREF: .text:004064C6↑p
.text:0040D480                                         ; .text:004064F0↑p
.text:0040D480
.text:0040D480 lpszLongPath    = dword ptr  4
.text:0040D480 lpszShortPath   = dword ptr  8
.text:0040D480 cchBuffer       = dword ptr  0Ch
.text:0040D480
.text:0040D480                 jmp     ds:__imp_GetShortPathNameA
.text:0040D480 GetShortPathNameA endp
.text:0040D480
.text:0040D480 ; ---------------------------------------------------------------------------
.text:0040D486                 align 10h
.text:0040D490
.text:0040D490 ; =============== S U B R O U T I N E =======================================
.text:0040D490
.text:0040D490 ; Attributes: thunk
.text:0040D490
.text:0040D490 ; DWORD __stdcall GetLastError()
.text:0040D490 GetLastError    proc near               ; CODE XREF: sub_4067D0+3↑p
.text:0040D490                                         ; sub_406FF0:loc_407279↑p ...
.text:0040D490                 jmp     ds:__imp_GetLastError
.text:0040D490 GetLastError    endp
.text:0040D490
.text:0040D490 ; ---------------------------------------------------------------------------
.text:0040D496                 align 10h
.text:0040D4A0
.text:0040D4A0 ; =============== S U B R O U T I N E =======================================
.text:0040D4A0
.text:0040D4A0 ; Attributes: thunk
.text:0040D4A0
.text:0040D4A0 ; DWORD __stdcall GetFileAttributesA(LPCSTR lpFileName)
.text:0040D4A0 GetFileAttributesA proc near            ; CODE XREF: sub_406830+47↑p
.text:0040D4A0                                         ; sub_408FC0+62↑p
.text:0040D4A0
.text:0040D4A0 lpFileName      = dword ptr  4
.text:0040D4A0
.text:0040D4A0                 jmp     ds:__imp_GetFileAttributesA
.text:0040D4A0 GetFileAttributesA endp
.text:0040D4A0
.text:0040D4A0 ; ---------------------------------------------------------------------------
.text:0040D4A6                 align 10h
.text:0040D4B0
.text:0040D4B0 ; =============== S U B R O U T I N E =======================================
.text:0040D4B0
.text:0040D4B0 ; Attributes: thunk
.text:0040D4B0
.text:0040D4B0 ; BOOL __stdcall FreeLibrary(HMODULE hLibModule)
.text:0040D4B0 FreeLibrary     proc near               ; CODE XREF: sub_406830+A4↑p
.text:0040D4B0                                         ; sub_4069A0+11D↑p ...
.text:0040D4B0
.text:0040D4B0 hLibModule      = dword ptr  4
.text:0040D4B0
.text:0040D4B0                 jmp     ds:__imp_FreeLibrary
.text:0040D4B0 FreeLibrary     endp
.text:0040D4B0
.text:0040D4B0 ; ---------------------------------------------------------------------------
.text:0040D4B6                 align 10h
.text:0040D4C0
.text:0040D4C0 ; =============== S U B R O U T I N E =======================================
.text:0040D4C0
.text:0040D4C0 ; Attributes: thunk
.text:0040D4C0
.text:0040D4C0 ; HMODULE __stdcall LoadLibraryA(LPCSTR lpLibFileName)
.text:0040D4C0 LoadLibraryA    proc near               ; CODE XREF: sub_4069A0+13↑p
.text:0040D4C0                                         ; sub_406FF0+134↑p ...
.text:0040D4C0
.text:0040D4C0 lpLibFileName   = dword ptr  4
.text:0040D4C0
.text:0040D4C0                 jmp     ds:__imp_LoadLibraryA
.text:0040D4C0 LoadLibraryA    endp
.text:0040D4C0
.text:0040D4C0 ; ---------------------------------------------------------------------------
.text:0040D4C6                 align 10h
.text:0040D4D0
.text:0040D4D0 ; =============== S U B R O U T I N E =======================================
.text:0040D4D0
.text:0040D4D0 ; Attributes: thunk
.text:0040D4D0
.text:0040D4D0 ; BOOL __stdcall FindNextFileA(HANDLE hFindFile, LPWIN32_FIND_DATAA lpFindFileData)
.text:0040D4D0 FindNextFileA   proc near               ; CODE XREF: sub_4069A0+FF↑p
.text:0040D4D0
.text:0040D4D0 hFindFile       = dword ptr  4
.text:0040D4D0 lpFindFileData  = dword ptr  8
.text:0040D4D0
.text:0040D4D0                 jmp     ds:__imp_FindNextFileA
.text:0040D4D0 FindNextFileA   endp
.text:0040D4D0
.text:0040D4D0 ; ---------------------------------------------------------------------------
.text:0040D4D6                 align 10h
.text:0040D4E0
.text:0040D4E0 ; =============== S U B R O U T I N E =======================================
.text:0040D4E0
.text:0040D4E0 ; Attributes: thunk
.text:0040D4E0
.text:0040D4E0 ; DWORD __stdcall GetFileType(HANDLE hFile)
.text:0040D4E0 GetFileType     proc near               ; CODE XREF: sub_406B20+43↑p
.text:0040D4E0                                         ; .text:004077DA↑p
.text:0040D4E0
.text:0040D4E0 hFile           = dword ptr  4
.text:0040D4E0
.text:0040D4E0                 jmp     ds:__imp_GetFileType
.text:0040D4E0 GetFileType     endp
.text:0040D4E0
.text:0040D4E0 ; ---------------------------------------------------------------------------
.text:0040D4E6                 align 10h
.text:0040D4F0
.text:0040D4F0 ; =============== S U B R O U T I N E =======================================
.text:0040D4F0
.text:0040D4F0 ; Attributes: thunk
.text:0040D4F0
.text:0040D4F0 ; BOOL __stdcall GetFileInformationByHandle(HANDLE hFile, LPBY_HANDLE_FILE_INFORMATION lpFileInformation)
.text:0040D4F0 GetFileInformationByHandle proc near    ; CODE XREF: sub_406B20+69↑p
.text:0040D4F0
.text:0040D4F0 hFile           = dword ptr  4
.text:0040D4F0 lpFileInformation= dword ptr  8
.text:0040D4F0
.text:0040D4F0                 jmp     ds:__imp_GetFileInformationByHandle
.text:0040D4F0 GetFileInformationByHandle endp
.text:0040D4F0
.text:0040D4F0 ; ---------------------------------------------------------------------------
.text:0040D4F6                 align 10h
.text:0040D500
.text:0040D500 ; =============== S U B R O U T I N E =======================================
.text:0040D500
.text:0040D500 ; Attributes: thunk
.text:0040D500
.text:0040D500 ; DWORD __stdcall GetFileSize(HANDLE hFile, LPDWORD lpFileSizeHigh)
.text:0040D500 GetFileSize     proc near               ; CODE XREF: sub_406B20+3F2↑p
.text:0040D500
.text:0040D500 hFile           = dword ptr  4
.text:0040D500 lpFileSizeHigh  = dword ptr  8
.text:0040D500
.text:0040D500                 jmp     ds:__imp_GetFileSize
.text:0040D500 GetFileSize     endp
.text:0040D500
.text:0040D500 ; ---------------------------------------------------------------------------
.text:0040D506                 align 10h
.text:0040D510
.text:0040D510 ; =============== S U B R O U T I N E =======================================
.text:0040D510
.text:0040D510 ; Attributes: thunk
.text:0040D510
.text:0040D510 ; BOOL __stdcall PeekNamedPipe(HANDLE hNamedPipe, LPVOID lpBuffer, DWORD nBufferSize, LPDWORD lpBytesRead, LPDWORD lpTotalBytesAvail, LPDWORD lpBytesLeftThisMessage)
.text:0040D510 PeekNamedPipe   proc near               ; CODE XREF: sub_406B20+439↑p
.text:0040D510
.text:0040D510 hNamedPipe      = dword ptr  4
.text:0040D510 lpBuffer        = dword ptr  8
.text:0040D510 nBufferSize     = dword ptr  0Ch
.text:0040D510 lpBytesRead     = dword ptr  10h
.text:0040D510 lpTotalBytesAvail= dword ptr  14h
.text:0040D510 lpBytesLeftThisMessage= dword ptr  18h
.text:0040D510
.text:0040D510                 jmp     ds:__imp_PeekNamedPipe
.text:0040D510 PeekNamedPipe   endp
.text:0040D510
.text:0040D510 ; ---------------------------------------------------------------------------
.text:0040D516                 align 10h
.text:0040D520
.text:0040D520 ; =============== S U B R O U T I N E =======================================
.text:0040D520
.text:0040D520 ; Attributes: thunk
.text:0040D520
.text:0040D520 ; UINT __stdcall GetDriveTypeA(LPCSTR lpRootPathName)
.text:0040D520 GetDriveTypeA   proc near               ; CODE XREF: sub_406FF0+4C↑p
.text:0040D520
.text:0040D520 lpRootPathName  = dword ptr  4
.text:0040D520
.text:0040D520                 jmp     ds:__imp_GetDriveTypeA
.text:0040D520 GetDriveTypeA   endp
.text:0040D520
.text:0040D520 ; ---------------------------------------------------------------------------
.text:0040D526                 align 10h
.text:0040D530
.text:0040D530 ; =============== S U B R O U T I N E =======================================
.text:0040D530
.text:0040D530 ; Attributes: thunk
.text:0040D530
.text:0040D530 ; BOOL __stdcall GetVolumeInformationA(LPCSTR lpRootPathName, LPSTR lpVolumeNameBuffer, DWORD nVolumeNameSize, LPDWORD lpVolumeSerialNumber, LPDWORD lpMaximumComponentLength, LPDWORD lpFileSystemFlags, LPSTR lpFileSystemNameBuffer, DWORD nFileSystemNameSize)
.text:0040D530 GetVolumeInformationA proc near         ; CODE XREF: sub_4074F0+64↑p
.text:0040D530                                         ; .text:00407A9C↑p ...
.text:0040D530
.text:0040D530 lpRootPathName  = dword ptr  4
.text:0040D530 lpVolumeNameBuffer= dword ptr  8
.text:0040D530 nVolumeNameSize = dword ptr  0Ch
.text:0040D530 lpVolumeSerialNumber= dword ptr  10h
.text:0040D530 lpMaximumComponentLength= dword ptr  14h
.text:0040D530 lpFileSystemFlags= dword ptr  18h
.text:0040D530 lpFileSystemNameBuffer= dword ptr  1Ch
.text:0040D530 nFileSystemNameSize= dword ptr  20h
.text:0040D530
.text:0040D530                 jmp     ds:__imp_GetVolumeInformationA
.text:0040D530 GetVolumeInformationA endp
.text:0040D530
.text:0040D530 ; ---------------------------------------------------------------------------
.text:0040D536                 align 10h
.text:0040D540
.text:0040D540 ; =============== S U B R O U T I N E =======================================
.text:0040D540
.text:0040D540 ; Attributes: thunk
.text:0040D540
.text:0040D540 ; HANDLE __stdcall CreateFileA(LPCSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile)
.text:0040D540 CreateFileA     proc near               ; CODE XREF: sub_405C80+2606↑p
.text:0040D540                                         ; .text:00409693↑p ...
.text:0040D540
.text:0040D540 lpFileName      = dword ptr  4
.text:0040D540 dwDesiredAccess = dword ptr  8
.text:0040D540 dwShareMode     = dword ptr  0Ch
.text:0040D540 lpSecurityAttributes= dword ptr  10h
.text:0040D540 dwCreationDisposition= dword ptr  14h
.text:0040D540 dwFlagsAndAttributes= dword ptr  18h
.text:0040D540 hTemplateFile   = dword ptr  1Ch
.text:0040D540
.text:0040D540                 jmp     ds:__imp_CreateFileA
.text:0040D540 CreateFileA     endp
.text:0040D540
.text:0040D540 ; ---------------------------------------------------------------------------
.text:0040D546                 align 10h
.text:0040D550
.text:0040D550 ; =============== S U B R O U T I N E =======================================
.text:0040D550
.text:0040D550 ; Attributes: thunk
.text:0040D550
.text:0040D550 ; BOOL __stdcall CloseHandle(HANDLE hObject)
.text:0040D550 CloseHandle     proc near               ; CODE XREF: sub_405C80+2621↑p
.text:0040D550                                         ; .text:00409709↑p ...
.text:0040D550
.text:0040D550 hObject         = dword ptr  4
.text:0040D550
.text:0040D550                 jmp     ds:__imp_CloseHandle
.text:0040D550 CloseHandle     endp
.text:0040D550
.text:0040D550 ; ---------------------------------------------------------------------------
.text:0040D556                 align 10h
.text:0040D560
.text:0040D560 ; =============== S U B R O U T I N E =======================================
.text:0040D560
.text:0040D560 ; Attributes: thunk
.text:0040D560
.text:0040D560 ; int __stdcall lstrcmpiA(LPCSTR lpString1, LPCSTR lpString2)
.text:0040D560 lstrcmpiA       proc near               ; CODE XREF: .text:004087DB↑p
.text:0040D560                                         ; .text:004087F2↑p ...
.text:0040D560
.text:0040D560 lpString1       = dword ptr  4
.text:0040D560 lpString2       = dword ptr  8
.text:0040D560
.text:0040D560                 jmp     ds:__imp_lstrcmpiA
.text:0040D560 lstrcmpiA       endp
.text:0040D560
.text:0040D560 ; ---------------------------------------------------------------------------
.text:0040D566                 align 10h
.text:0040D570
.text:0040D570 ; =============== S U B R O U T I N E =======================================
.text:0040D570
.text:0040D570 ; Attributes: thunk
.text:0040D570
.text:0040D570 ; DWORD __stdcall GetVersion()
.text:0040D570 GetVersion      proc near               ; CODE XREF: .text:00408B63↑p
.text:0040D570                 jmp     ds:__imp_GetVersion
.text:0040D570 GetVersion      endp
.text:0040D570
.text:0040D570 ; ---------------------------------------------------------------------------
.text:0040D576                 align 10h
.text:0040D580
.text:0040D580 ; =============== S U B R O U T I N E =======================================
.text:0040D580
.text:0040D580 ; Attributes: thunk
.text:0040D580
.text:0040D580 ; BOOL __stdcall GetVersionExA(LPOSVERSIONINFOA lpVersionInformation)
.text:0040D580 GetVersionExA   proc near               ; CODE XREF: sub_408BF0+32↑p
.text:0040D580                                         ; sub_408BF0+20B↑p
.text:0040D580
.text:0040D580 lpVersionInformation= dword ptr  4
.text:0040D580
.text:0040D580                 jmp     ds:__imp_GetVersionExA
.text:0040D580 GetVersionExA   endp
.text:0040D580
.text:0040D580 ; ---------------------------------------------------------------------------
.text:0040D586                 align 10h
.text:0040D590
.text:0040D590 ; =============== S U B R O U T I N E =======================================
.text:0040D590
.text:0040D590 ; Attributes: thunk
.text:0040D590
.text:0040D590 ; DWORD __stdcall GetFullPathNameA(LPCSTR lpFileName, DWORD nBufferLength, LPSTR lpBuffer, LPSTR *lpFilePart)
.text:0040D590 GetFullPathNameA proc near              ; CODE XREF: sub_408E90+45↑p
.text:0040D590                                         ; sub_408E90+ED↑p
.text:0040D590
.text:0040D590 lpFileName      = dword ptr  4
.text:0040D590 nBufferLength   = dword ptr  8
.text:0040D590 lpBuffer        = dword ptr  0Ch
.text:0040D590 lpFilePart      = dword ptr  10h
.text:0040D590
.text:0040D590                 jmp     ds:__imp_GetFullPathNameA
.text:0040D590 GetFullPathNameA endp
.text:0040D590
.text:0040D590 ; ---------------------------------------------------------------------------
.text:0040D596                 align 10h
.text:0040D5A0
.text:0040D5A0 ; =============== S U B R O U T I N E =======================================
.text:0040D5A0
.text:0040D5A0 ; Attributes: thunk
.text:0040D5A0
.text:0040D5A0 ; DWORD __stdcall GetCurrentDirectoryA(DWORD nBufferLength, LPSTR lpBuffer)
.text:0040D5A0 GetCurrentDirectoryA proc near          ; CODE XREF: .text:00409348↑p
.text:0040D5A0                                         ; .text:00409364↑p ...
.text:0040D5A0
.text:0040D5A0 nBufferLength   = dword ptr  4
.text:0040D5A0 lpBuffer        = dword ptr  8
.text:0040D5A0
.text:0040D5A0                 jmp     ds:__imp_GetCurrentDirectoryA
.text:0040D5A0 GetCurrentDirectoryA endp
.text:0040D5A0
.text:0040D5A0 ; ---------------------------------------------------------------------------
.text:0040D5A6                 align 10h
.text:0040D5B0
.text:0040D5B0 ; =============== S U B R O U T I N E =======================================
.text:0040D5B0
.text:0040D5B0 ; Attributes: thunk
.text:0040D5B0
.text:0040D5B0 ; BOOL __stdcall DeviceIoControl(HANDLE hDevice, DWORD dwIoControlCode, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesReturned, LPOVERLAPPED lpOverlapped)
.text:0040D5B0 DeviceIoControl proc near               ; CODE XREF: .text:004096FC↑p
.text:0040D5B0                                         ; sub_409AC0+1E5↑p
.text:0040D5B0
.text:0040D5B0 hDevice         = dword ptr  4
.text:0040D5B0 dwIoControlCode = dword ptr  8
.text:0040D5B0 lpInBuffer      = dword ptr  0Ch
.text:0040D5B0 nInBufferSize   = dword ptr  10h
.text:0040D5B0 lpOutBuffer     = dword ptr  14h
.text:0040D5B0 nOutBufferSize  = dword ptr  18h
.text:0040D5B0 lpBytesReturned = dword ptr  1Ch
.text:0040D5B0 lpOverlapped    = dword ptr  20h
.text:0040D5B0
.text:0040D5B0                 jmp     ds:__imp_DeviceIoControl
.text:0040D5B0 DeviceIoControl endp
.text:0040D5B0
.text:0040D5B0 ; ---------------------------------------------------------------------------
.text:0040D5B6                 align 10h
.text:0040D5C0
.text:0040D5C0 ; =============== S U B R O U T I N E =======================================
.text:0040D5C0
.text:0040D5C0 ; Attributes: thunk
.text:0040D5C0
.text:0040D5C0 ; BOOL __stdcall GetDiskFreeSpaceA(LPCSTR lpRootPathName, LPDWORD lpSectorsPerCluster, LPDWORD lpBytesPerSector, LPDWORD lpNumberOfFreeClusters, LPDWORD lpTotalNumberOfClusters)
.text:0040D5C0 GetDiskFreeSpaceA proc near             ; CODE XREF: .text:00409A53↑p
.text:0040D5C0                                         ; sub_409AC0+7B↑p ...
.text:0040D5C0
.text:0040D5C0 lpRootPathName  = dword ptr  4
.text:0040D5C0 lpSectorsPerCluster= dword ptr  8
.text:0040D5C0 lpBytesPerSector= dword ptr  0Ch
.text:0040D5C0 lpNumberOfFreeClusters= dword ptr  10h
.text:0040D5C0 lpTotalNumberOfClusters= dword ptr  14h
.text:0040D5C0
.text:0040D5C0                 jmp     ds:__imp_GetDiskFreeSpaceA
.text:0040D5C0 GetDiskFreeSpaceA endp
.text:0040D5C0
.text:0040D5C0 ; ---------------------------------------------------------------------------
.text:0040D5C6                 align 10h
.text:0040D5D0
.text:0040D5D0 ; =============== S U B R O U T I N E =======================================
.text:0040D5D0
.text:0040D5D0 ; Attributes: thunk
.text:0040D5D0
.text:0040D5D0 ; DWORD __stdcall GetLogicalDriveStringsA(DWORD nBufferLength, LPSTR lpBuffer)
.text:0040D5D0 GetLogicalDriveStringsA proc near       ; CODE XREF: .text:0040A1AF↑p
.text:0040D5D0                                         ; .text:0040A1DE↑p ...
.text:0040D5D0
.text:0040D5D0 nBufferLength   = dword ptr  4
.text:0040D5D0 lpBuffer        = dword ptr  8
.text:0040D5D0
.text:0040D5D0                 jmp     ds:__imp_GetLogicalDriveStringsA
.text:0040D5D0 GetLogicalDriveStringsA endp
.text:0040D5D0
.text:0040D5D0 ; ---------------------------------------------------------------------------
.text:0040D5D6                 align 10h
.text:0040D5E0
.text:0040D5E0 ; =============== S U B R O U T I N E =======================================
.text:0040D5E0
.text:0040D5E0 ; Attributes: thunk
.text:0040D5E0
.text:0040D5E0 ; HANDLE __stdcall GetProcessHeap()
.text:0040D5E0 GetProcessHeap  proc near               ; CODE XREF: .text:0040A1B9↑p
.text:0040D5E0                                         ; sub_40A890+24↑p ...
.text:0040D5E0                 jmp     ds:__imp_GetProcessHeap
.text:0040D5E0 GetProcessHeap  endp
.text:0040D5E0
.text:0040D5E0 ; ---------------------------------------------------------------------------
.text:0040D5E6                 align 10h
.text:0040D5F0
.text:0040D5F0 ; =============== S U B R O U T I N E =======================================
.text:0040D5F0
.text:0040D5F0 ; Attributes: thunk
.text:0040D5F0
.text:0040D5F0 ; LPVOID __stdcall HeapAlloc(HANDLE hHeap, DWORD dwFlags, SIZE_T dwBytes)
.text:0040D5F0 HeapAlloc       proc near               ; CODE XREF: .text:0040A1CD↑p
.text:0040D5F0                                         ; sub_40A890+38↑p ...
.text:0040D5F0
.text:0040D5F0 hHeap           = dword ptr  4
.text:0040D5F0 dwFlags         = dword ptr  8
.text:0040D5F0 dwBytes         = dword ptr  0Ch
.text:0040D5F0
.text:0040D5F0                 jmp     ds:__imp_HeapAlloc
.text:0040D5F0 HeapAlloc       endp
.text:0040D5F0
.text:0040D5F0 ; ---------------------------------------------------------------------------
.text:0040D5F6                 align 10h
.text:0040D600
.text:0040D600 ; =============== S U B R O U T I N E =======================================
.text:0040D600
.text:0040D600 ; Attributes: thunk
.text:0040D600
.text:0040D600 ; BOOL __stdcall HeapFree(HANDLE hHeap, DWORD dwFlags, LPVOID lpMem)
.text:0040D600 HeapFree        proc near               ; CODE XREF: .text:0040A9CD↑p
.text:0040D600
.text:0040D600 hHeap           = dword ptr  4
.text:0040D600 dwFlags         = dword ptr  8
.text:0040D600 lpMem           = dword ptr  0Ch
.text:0040D600
.text:0040D600                 jmp     ds:__imp_HeapFree
.text:0040D600 HeapFree        endp
.text:0040D600
.text:0040D600 ; ---------------------------------------------------------------------------
.text:0040D606                 align 10h
.text:0040D610
.text:0040D610 ; =============== S U B R O U T I N E =======================================
.text:0040D610
.text:0040D610 ; Attributes: thunk
.text:0040D610
.text:0040D610 ; BOOL __stdcall UnlockFile(HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToUnlockLow, DWORD nNumberOfBytesToUnlockHigh)
.text:0040D610 UnlockFile      proc near               ; CODE XREF: sub_40AB60+40↑p
.text:0040D610
.text:0040D610 hFile           = dword ptr  4
.text:0040D610 dwFileOffsetLow = dword ptr  8
.text:0040D610 dwFileOffsetHigh= dword ptr  0Ch
.text:0040D610 nNumberOfBytesToUnlockLow= dword ptr  10h
.text:0040D610 nNumberOfBytesToUnlockHigh= dword ptr  14h
.text:0040D610
.text:0040D610                 jmp     ds:__imp_UnlockFile
.text:0040D610 UnlockFile      endp
.text:0040D610
.text:0040D610 ; ---------------------------------------------------------------------------
.text:0040D616                 align 10h
.text:0040D620
.text:0040D620 ; =============== S U B R O U T I N E =======================================
.text:0040D620
.text:0040D620 ; Attributes: thunk
.text:0040D620
.text:0040D620 ; BOOL __stdcall CreateDirectoryA(LPCSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes)
.text:0040D620 CreateDirectoryA proc near              ; CODE XREF: sub_40B4E0+22↑p
.text:0040D620
.text:0040D620 lpPathName      = dword ptr  4
.text:0040D620 lpSecurityAttributes= dword ptr  8
.text:0040D620
.text:0040D620                 jmp     ds:__imp_CreateDirectoryA
.text:0040D620 CreateDirectoryA endp
.text:0040D620
.text:0040D620 ; ---------------------------------------------------------------------------
.text:0040D626                 align 10h
.text:0040D630
.text:0040D630 ; =============== S U B R O U T I N E =======================================
.text:0040D630
.text:0040D630 ; Attributes: thunk
.text:0040D630
.text:0040D630 ; DWORD __stdcall GetTimeZoneInformation(LPTIME_ZONE_INFORMATION lpTimeZoneInformation)
.text:0040D630 GetTimeZoneInformation proc near        ; CODE XREF: sub_40B5E0+22↑p
.text:0040D630
.text:0040D630 lpTimeZoneInformation= dword ptr  4
.text:0040D630
.text:0040D630                 jmp     ds:__imp_GetTimeZoneInformation
.text:0040D630 GetTimeZoneInformation endp
.text:0040D630
.text:0040D630 ; ---------------------------------------------------------------------------
.text:0040D636                 align 10h
.text:0040D640
.text:0040D640 ; =============== S U B R O U T I N E =======================================
.text:0040D640
.text:0040D640 ; Attributes: thunk
.text:0040D640
.text:0040D640 ; void __stdcall GetSystemTimeAsFileTime(LPFILETIME lpSystemTimeAsFileTime)
.text:0040D640 GetSystemTimeAsFileTime proc near       ; CODE XREF: sub_40B5E0+4F↑p
.text:0040D640
.text:0040D640 lpSystemTimeAsFileTime= dword ptr  4
.text:0040D640
.text:0040D640                 jmp     ds:__imp_GetSystemTimeAsFileTime
.text:0040D640 GetSystemTimeAsFileTime endp
.text:0040D640
.text:0040D640 ; ---------------------------------------------------------------------------
.text:0040D646                 align 10h
.text:0040D650
.text:0040D650 ; =============== S U B R O U T I N E =======================================
.text:0040D650
.text:0040D650 ; Attributes: thunk
.text:0040D650
.text:0040D650 ; LSTATUS __stdcall RegOpenKeyExA(HKEY hKey, LPCSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult)
.text:0040D650 RegOpenKeyExA   proc near               ; CODE XREF: .text:00408761↑p
.text:0040D650
.text:0040D650 hKey            = dword ptr  4
.text:0040D650 lpSubKey        = dword ptr  8
.text:0040D650 ulOptions       = dword ptr  0Ch
.text:0040D650 samDesired      = dword ptr  10h
.text:0040D650 phkResult       = dword ptr  14h
.text:0040D650
.text:0040D650                 jmp     ds:__imp_RegOpenKeyExA
.text:0040D650 RegOpenKeyExA   endp
.text:0040D650
.text:0040D650 ; ---------------------------------------------------------------------------
.text:0040D656                 align 10h
.text:0040D660
.text:0040D660 ; =============== S U B R O U T I N E =======================================
.text:0040D660
.text:0040D660 ; Attributes: thunk
.text:0040D660
.text:0040D660 ; LSTATUS __stdcall RegQueryValueExA(HKEY hKey, LPCSTR lpValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData)
.text:0040D660 RegQueryValueExA proc near              ; CODE XREF: .text:004087A4↑p
.text:0040D660
.text:0040D660 hKey            = dword ptr  4
.text:0040D660 lpValueName     = dword ptr  8
.text:0040D660 lpReserved      = dword ptr  0Ch
.text:0040D660 lpType          = dword ptr  10h
.text:0040D660 lpData          = dword ptr  14h
.text:0040D660 lpcbData        = dword ptr  18h
.text:0040D660
.text:0040D660                 jmp     ds:__imp_RegQueryValueExA
.text:0040D660 RegQueryValueExA endp
.text:0040D660
.text:0040D660 ; ---------------------------------------------------------------------------
.text:0040D666                 align 10h
.text:0040D670
.text:0040D670 ; =============== S U B R O U T I N E =======================================
.text:0040D670
.text:0040D670 ; Attributes: thunk
.text:0040D670
.text:0040D670 ; LSTATUS __stdcall RegCloseKey(HKEY hKey)
.text:0040D670 RegCloseKey     proc near               ; CODE XREF: .text:004087C8↑p
.text:0040D670
.text:0040D670 hKey            = dword ptr  4
.text:0040D670
.text:0040D670                 jmp     ds:__imp_RegCloseKey
.text:0040D670 RegCloseKey     endp
.text:0040D670
.text:0040D670 ; ---------------------------------------------------------------------------
.text:0040D676                 db 2 dup(90h)
.text:0040D678                 dd 2 dup(0)
.text:0040D680                 dd 21400h, 0
.text:0040D688                 dd 0C0h, 46000000h
.text:0040D690 ; const IID rclsid
.text:0040D690 rclsid          dd 21401h               ; Data1
.text:0040D690                                         ; DATA XREF: sub_405A20+4B↑o
.text:0040D690                 dw 0                    ; Data2
.text:0040D690                 dw 0                    ; Data3
.text:0040D690                 db 0C0h, 6 dup(0), 46h  ; Data4
.text:0040D6A0                 dd 214A0h, 0
.text:0040D6A8                 dd 0C0h, 46000000h, 214A1h, 0
.text:0040D6B8                 dd 0C0h, 46000000h, 214D0h, 0
.text:0040D6C8                 dd 0C0h, 46000000h, 214D1h, 0
.text:0040D6D8                 dd 0C0h, 46000000h, 214D2h, 0
.text:0040D6E8                 dd 0C0h, 46000000h, 214E1h, 0
.text:0040D6F8                 dd 0C0h, 46000000h, 214E2h, 0
.text:0040D708                 dd 0C0h, 46000000h, 214E3h, 0
.text:0040D718                 dd 0C0h, 46000000h, 214E4h, 0
.text:0040D728                 dd 0C0h, 46000000h, 21500h, 0
.text:0040D738                 dd 0C0h, 46000000h, 214E5h, 0
.text:0040D748                 dd 0C0h, 46000000h, 214E6h, 0
.text:0040D758                 dd 0C0h, 46000000h, 214E8h, 0
.text:0040D768                 dd 0C0h, 46000000h, 214E9h, 0
.text:0040D778                 dd 0C0h, 46000000h, 214EAh, 0
.text:0040D788                 dd 0C0h, 46000000h, 214EBh, 0
.text:0040D798                 dd 0C0h, 46000000h
.text:0040D7A0 ; const IID riid
.text:0040D7A0 riid            dd 214EEh               ; Data1
.text:0040D7A0                                         ; DATA XREF: sub_405A20+2B↑o
.text:0040D7A0                 dw 0                    ; Data2
.text:0040D7A0                 dw 0                    ; Data3
.text:0040D7A0                 db 0C0h, 6 dup(0), 46h  ; Data4
.text:0040D7B0                 dd 214EFh, 0
.text:0040D7B8                 dd 0C0h, 46000000h, 214F0h, 0
.text:0040D7C8                 dd 0C0h, 46000000h, 214F1h, 0
.text:0040D7D8                 dd 0C0h, 46000000h, 214F2h, 0
.text:0040D7E8                 dd 0C0h, 46000000h, 214F3h, 0
.text:0040D7F8                 dd 0C0h, 46000000h, 214F4h, 0
.text:0040D808                 dd 0C0h, 46000000h, 214F5h, 0
.text:0040D818                 dd 0C0h, 46000000h, 214F6h, 0
.text:0040D828                 dd 0C0h, 46000000h, 214F7h, 0
.text:0040D838                 dd 0C0h, 46000000h, 214F8h, 0
.text:0040D848                 dd 0C0h, 46000000h, 214F9h, 0
.text:0040D858                 dd 0C0h, 46000000h, 214FAh, 0
.text:0040D868                 dd 0C0h, 46000000h, 214FBh, 0
.text:0040D878                 dd 0C0h, 46000000h, 214FCh, 0
.text:0040D888                 dd 0C0h, 46000000h, 88E39E80h, 11CF3578h, 869AEh, 62122E2Bh
.text:0040D888                 dd 93F2F68Ch, 11D31D1Bh, 0C0000EA3h, 0D1AB794Fh, 1AC3D9F0h
.text:0040D888                 dd 11D1175Ch, 6000BE95h, 4FEA9797h, 0CEF04FDFh, 11D2FE72h
.text:0040D888                 dd 0C000A587h, 0CF37684Fh, 1E18D10h, 11D24D8Bh, 60005D85h
.text:0040D888                 dd 67930508h, 0EAB22AC0h, 11CF30C1h, 0EBA7h, 0BAE5BC0h
.text:0040D888                 dd 0EAB22AC1h, 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0EAB22AC2h
.text:0040D888                 dd 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0EAB22AC3h, 11CF30C1h
.text:0040D888                 dd 0EBA7h, 0BAE5BC0h, 0EAB22AC4h, 11CF30C1h, 0EBA7h, 0BAE5BC0h
.text:0040D888                 dd 0EAB22AC5h, 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0EAB22AC6h
.text:0040D888                 dd 11CF30C1h, 0EBA7h, 0BAE5BC0h, 2DF07h, 0
.text:0040D958                 dd 0C0h, 46000000h, 2DF05h, 0
.text:0040D968                 dd 0C0h, 46000000h, 2DF06h, 0
.text:0040D978                 dd 0C0h, 46000000h, 2DF01h, 0
.text:0040D988                 dd 0C0h, 46000000h, 2DF09h, 0
.text:0040D998                 dd 0C0h, 46000000h, 0B091E540h, 11CF83E3h, 200013A7h, 6297D7AFh
.text:0040D998                 dd 0FBF23B40h, 101BE3F0h, 0AA008884h, 0F8563E00h, 0FBF23B80h
.text:0040D998                 dd 101BE3F0h, 0AA008884h, 0F8563E00h, 4657278Ah, 11D2411Bh
.text:0040D998                 dd 0C0009A83h, 0D018D94Fh, 4657278Bh, 11D2411Bh, 0C0009A83h
.text:0040D998                 dd 0D018D94Fh, 0DE5BF786h, 11D2477Ah, 0C0009D83h, 0D018D94Fh
.text:0040D998                 dd 0E8025004h, 11D21C42h, 0A0002CBEh, 0A13DA8C9h, 0C6C4200h
.text:0040D998                 dd 11D0C589h, 0C0009A99h, 0E155D64Fh
.text:0040DA20 dword_40DA20    dd 0FFFFFFFFh           ; DATA XREF: .text:0040CC89↑r
.text:0040DA20                                         ; .text:loc_40CCB0↑r ...
.text:0040DA24 dword_40DA24    dd 0                    ; DATA XREF: .text:loc_40CCBC↑r
.text:0040DA24                                         ; sub_40CCE0:loc_40CD2D↑r
.text:0040DA28                 dd 0FFFFFFFFh
.text:0040DA2C dword_40DA2C    dd 75h dup(0)           ; DATA XREF: .data:off_40E0C4↓o
.text:0040DC00                 dd 100h dup(?)
.text:0040DC00 _text           ends
.text:0040DC00
.data:0040E000 ; Section 2. (virtual address 0000E000)
.data:0040E000 ; Virtual size                  : 000000E0 (    224.)
.data:0040E000 ; Section size in file          : 00000200 (    512.)
.data:0040E000 ; Offset to raw data for section: 0000D000
.data:0040E000 ; Flags C0000040: Data Readable Writable
.data:0040E000 ; Alignment     : default
.data:0040E000 ; ===========================================================================
.data:0040E000
.data:0040E000 ; Segment type: Pure data
.data:0040E000 ; Segment permissions: Read/Write
.data:0040E000 _data           segment para public 'DATA' use32
.data:0040E000                 assume cs:_data
.data:0040E000                 ;org 40E000h
.data:0040E000 dword_40E000    dd 0                    ; DATA XREF: sub_401080+1B↑o
.data:0040E000                                         ; sub_401080+CC↑r
.data:0040E004 dword_40E004    dd 0                    ; DATA XREF: sub_401080+41↑o
.data:0040E004                                         ; sub_401080+D4↑r
.data:0040E008                 align 10h
.data:0040E010 dword_40E010    dd 1                    ; DATA XREF: sub_4015E0:loc_401821↑r
.data:0040E010                                         ; sub_4015E0+2AE↑r ...
.data:0040E014 dword_40E014    dd 1                    ; DATA XREF: sub_402EC0+11↑r
.data:0040E014                                         ; .text:00402F61↑r
.data:0040E018 dword_40E018    dd 3Fh                  ; DATA XREF: sub_402EC0+7D↑w
.data:0040E018                                         ; .text:00402FCD↑w
.data:0040E01C                 align 10h
.data:0040E020 ; char *Buffer
.data:0040E020 Buffer          dd offset aCopyrightC2005
.data:0040E020                                         ; DATA XREF: sub_4034B0+DC↑r
.data:0040E020                                         ; "Copyright (C) 2005 Free Software Founda"...
.data:0040E024                 align 10h
.data:0040E030 dword_40E030    dd 1                    ; DATA XREF: sub_4050C0+22↑r
.data:0040E030                                         ; sub_4050C0+65↑r ...
.data:0040E034 dword_40E034    dd 100h                 ; DATA XREF: sub_4050C0+3F↑o
.data:0040E034                                         ; sub_4050C0+1A2↑r ...
.data:0040E038 off_40E038      dd offset unk_40F040    ; DATA XREF: sub_4050C0+1AA↑r
.data:0040E03C ; void *off_40E03C
.data:0040E03C off_40E03C      dd offset dword_40E034  ; DATA XREF: sub_4050C0+39↑r
.data:0040E03C                                         ; sub_4050C0+60↑w ...
.data:0040E040 ; int Code
.data:0040E040 Code            dd 1                    ; DATA XREF: sub_403180+18↑r
.data:0040E040                                         ; sub_403830+6D↑r ...
.data:0040E044                 align 10h
.data:0040E050 dword_40E050    dd 200h                 ; DATA XREF: sub_406B20+2ED↑r
.data:0040E050                                         ; sub_406B20+2F8↑r ...
.data:0040E054 ; char *off_40E054
.data:0040E054 off_40E054      dd offset aComExeBatCmd ; DATA XREF: sub_406FF0+3D3↑r
.data:0040E054                                         ; sub_406FF0+400↑r ...
.data:0040E054                                         ; ".com;.exe;.bat;.cmd"
.data:0040E058                 align 10h
.data:0040E060 dword_40E060    dd 1                    ; DATA XREF: .text:loc_408617↑r
.data:0040E060                                         ; sub_408BF0+202↑w
.data:0040E064                 align 10h
.data:0040E070 byte_40E070     db 41h                  ; DATA XREF: sub_4091C0+6B↑w
.data:0040E070                                         ; sub_4091C0:loc_4092D4↑r
.data:0040E071                 align 10h
.data:0040E080 off_40E080      dd offset aNotset       ; DATA XREF: .text:00409D8A↑r
.data:0040E080                                         ; .text:0040A9D2↑r
.data:0040E080                                         ; "notset"
.data:0040E084 off_40E084      dd offset aNotset       ; DATA XREF: .text:00409DA2↑r
.data:0040E084                                         ; .text:00409DC4↑r ...
.data:0040E084                                         ; "notset"
.data:0040E088                 align 10h
.data:0040E090 dword_40E090    dd 0FFFFFFFFh           ; DATA XREF: sub_401080+22↑r
.data:0040E094                 align 10h
.data:0040E0A0 ; int Mode
.data:0040E0A0 Mode            dd 0                    ; DATA XREF: sub_401080+4E↑r
.data:0040E0A0                                         ; sub_401080+80↑r ...
.data:0040E0A4                 align 10h
.data:0040E0B0 dword_40E0B0    dd 4000h                ; DATA XREF: sub_401080+57↑w
.data:0040E0B0                                         ; sub_401080+BA↑r
.data:0040E0B4                 align 10h
.data:0040E0C0 dword_40E0C0    dd 0                    ; DATA XREF: sub_40CCE0+9↑r
.data:0040E0C0                                         ; sub_40CCE0+1D↑w
.data:0040E0C4 off_40E0C4      dd offset dword_40DA2C  ; DATA XREF: sub_40CC50+6↑r
.data:0040E0C4                                         ; sub_40CC50+17↑r ...
.data:0040E0C8                 align 1000h
.data:0040E0C8 _data           ends
.data:0040E0C8
.bss:0040F000 ; Section 3. (virtual address 0000F000)
.bss:0040F000 ; Virtual size                  : 00000550 (   1360.)
.bss:0040F000 ; Section size in file          : 00000000 (      0.)
.bss:0040F000 ; Offset to raw data for section: 00000000
.bss:0040F000 ; Flags C0000080: Bss Readable Writable
.bss:0040F000 ; Alignment     : default
.bss:0040F000 ; ===========================================================================
.bss:0040F000
.bss:0040F000 ; Segment type: Uninitialized
.bss:0040F000 ; Segment permissions: Read/Write
.bss:0040F000 _bss            segment para public 'BSS' use32
.bss:0040F000                 assume cs:_bss
.bss:0040F000                 ;org 40F000h
.bss:0040F000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:0040F000 dword_40F000    dd ?                    ; DATA XREF: sub_402EC0+9↑o
.bss:0040F000                                         ; sub_402EC0+17↑w ...
.bss:0040F004 dword_40F004    dd ?                    ; DATA XREF: sub_402EC0+21↑w
.bss:0040F004                                         ; .text:00402F79↑w
.bss:0040F008 dword_40F008    dd ?                    ; DATA XREF: sub_402EC0+77↑r
.bss:0040F008                                         ; .text:00402FC7↑r
.bss:0040F00C dword_40F00C    dd ?                    ; DATA XREF: sub_402EC0+6B↑r
.bss:0040F00C                                         ; .text:00402FBB↑r
.bss:0040F010                 db    ? ;
.bss:0040F011                 db    ? ;
.bss:0040F012                 db    ? ;
.bss:0040F013                 db    ? ;
.bss:0040F014                 db    ? ;
.bss:0040F015                 db    ? ;
.bss:0040F016                 db    ? ;
.bss:0040F017                 db    ? ;
.bss:0040F018                 db    ? ;
.bss:0040F019                 db    ? ;
.bss:0040F01A                 db    ? ;
.bss:0040F01B                 db    ? ;
.bss:0040F01C                 db    ? ;
.bss:0040F01D                 db    ? ;
.bss:0040F01E                 db    ? ;
.bss:0040F01F                 db    ? ;
.bss:0040F020                 db    ? ;
.bss:0040F021                 db    ? ;
.bss:0040F022                 db    ? ;
.bss:0040F023                 db    ? ;
.bss:0040F024                 db    ? ;
.bss:0040F025                 db    ? ;
.bss:0040F026                 db    ? ;
.bss:0040F027                 db    ? ;
.bss:0040F028                 db    ? ;
.bss:0040F029                 db    ? ;
.bss:0040F02A                 db    ? ;
.bss:0040F02B                 db    ? ;
.bss:0040F02C                 db    ? ;
.bss:0040F02D                 db    ? ;
.bss:0040F02E                 db    ? ;
.bss:0040F02F                 db    ? ;
.bss:0040F030 ; char *dword_40F030
.bss:0040F030 dword_40F030    dd ?                    ; DATA XREF: .text:00403804↑w
.bss:0040F030                                         ; sub_403830+58↑r
.bss:0040F034                 align 10h
.bss:0040F040 unk_40F040      db    ? ;               ; DATA XREF: sub_4050C0+100↑o
.bss:0040F040                                         ; .data:off_40E038↑o
.bss:0040F041                 db    ? ;
.bss:0040F042                 db    ? ;
.bss:0040F043                 db    ? ;
.bss:0040F044                 db    ? ;
.bss:0040F045                 db    ? ;
.bss:0040F046                 db    ? ;
.bss:0040F047                 db    ? ;
.bss:0040F048                 db    ? ;
.bss:0040F049                 db    ? ;
.bss:0040F04A                 db    ? ;
.bss:0040F04B                 db    ? ;
.bss:0040F04C                 db    ? ;
.bss:0040F04D                 db    ? ;
.bss:0040F04E                 db    ? ;
.bss:0040F04F                 db    ? ;
.bss:0040F050                 db    ? ;
.bss:0040F051                 db    ? ;
.bss:0040F052                 db    ? ;
.bss:0040F053                 db    ? ;
.bss:0040F054                 db    ? ;
.bss:0040F055                 db    ? ;
.bss:0040F056                 db    ? ;
.bss:0040F057                 db    ? ;
.bss:0040F058                 db    ? ;
.bss:0040F059                 db    ? ;
.bss:0040F05A                 db    ? ;
.bss:0040F05B                 db    ? ;
.bss:0040F05C                 db    ? ;
.bss:0040F05D                 db    ? ;
.bss:0040F05E                 db    ? ;
.bss:0040F05F                 db    ? ;
.bss:0040F060                 db    ? ;
.bss:0040F061                 db    ? ;
.bss:0040F062                 db    ? ;
.bss:0040F063                 db    ? ;
.bss:0040F064                 db    ? ;
.bss:0040F065                 db    ? ;
.bss:0040F066                 db    ? ;
.bss:0040F067                 db    ? ;
.bss:0040F068                 db    ? ;
.bss:0040F069                 db    ? ;
.bss:0040F06A                 db    ? ;
.bss:0040F06B                 db    ? ;
.bss:0040F06C                 db    ? ;
.bss:0040F06D                 db    ? ;
.bss:0040F06E                 db    ? ;
.bss:0040F06F                 db    ? ;
.bss:0040F070                 db    ? ;
.bss:0040F071                 db    ? ;
.bss:0040F072                 db    ? ;
.bss:0040F073                 db    ? ;
.bss:0040F074                 db    ? ;
.bss:0040F075                 db    ? ;
.bss:0040F076                 db    ? ;
.bss:0040F077                 db    ? ;
.bss:0040F078                 db    ? ;
.bss:0040F079                 db    ? ;
.bss:0040F07A                 db    ? ;
.bss:0040F07B                 db    ? ;
.bss:0040F07C                 db    ? ;
.bss:0040F07D                 db    ? ;
.bss:0040F07E                 db    ? ;
.bss:0040F07F                 db    ? ;
.bss:0040F080                 db    ? ;
.bss:0040F081                 db    ? ;
.bss:0040F082                 db    ? ;
.bss:0040F083                 db    ? ;
.bss:0040F084                 db    ? ;
.bss:0040F085                 db    ? ;
.bss:0040F086                 db    ? ;
.bss:0040F087                 db    ? ;
.bss:0040F088                 db    ? ;
.bss:0040F089                 db    ? ;
.bss:0040F08A                 db    ? ;
.bss:0040F08B                 db    ? ;
.bss:0040F08C                 db    ? ;
.bss:0040F08D                 db    ? ;
.bss:0040F08E                 db    ? ;
.bss:0040F08F                 db    ? ;
.bss:0040F090                 db    ? ;
.bss:0040F091                 db    ? ;
.bss:0040F092                 db    ? ;
.bss:0040F093                 db    ? ;
.bss:0040F094                 db    ? ;
.bss:0040F095                 db    ? ;
.bss:0040F096                 db    ? ;
.bss:0040F097                 db    ? ;
.bss:0040F098                 db    ? ;
.bss:0040F099                 db    ? ;
.bss:0040F09A                 db    ? ;
.bss:0040F09B                 db    ? ;
.bss:0040F09C                 db    ? ;
.bss:0040F09D                 db    ? ;
.bss:0040F09E                 db    ? ;
.bss:0040F09F                 db    ? ;
.bss:0040F0A0                 db    ? ;
.bss:0040F0A1                 db    ? ;
.bss:0040F0A2                 db    ? ;
.bss:0040F0A3                 db    ? ;
.bss:0040F0A4                 db    ? ;
.bss:0040F0A5                 db    ? ;
.bss:0040F0A6                 db    ? ;
.bss:0040F0A7                 db    ? ;
.bss:0040F0A8                 db    ? ;
.bss:0040F0A9                 db    ? ;
.bss:0040F0AA                 db    ? ;
.bss:0040F0AB                 db    ? ;
.bss:0040F0AC                 db    ? ;
.bss:0040F0AD                 db    ? ;
.bss:0040F0AE                 db    ? ;
.bss:0040F0AF                 db    ? ;
.bss:0040F0B0                 db    ? ;
.bss:0040F0B1                 db    ? ;
.bss:0040F0B2                 db    ? ;
.bss:0040F0B3                 db    ? ;
.bss:0040F0B4                 db    ? ;
.bss:0040F0B5                 db    ? ;
.bss:0040F0B6                 db    ? ;
.bss:0040F0B7                 db    ? ;
.bss:0040F0B8                 db    ? ;
.bss:0040F0B9                 db    ? ;
.bss:0040F0BA                 db    ? ;
.bss:0040F0BB                 db    ? ;
.bss:0040F0BC                 db    ? ;
.bss:0040F0BD                 db    ? ;
.bss:0040F0BE                 db    ? ;
.bss:0040F0BF                 db    ? ;
.bss:0040F0C0                 db    ? ;
.bss:0040F0C1                 db    ? ;
.bss:0040F0C2                 db    ? ;
.bss:0040F0C3                 db    ? ;
.bss:0040F0C4                 db    ? ;
.bss:0040F0C5                 db    ? ;
.bss:0040F0C6                 db    ? ;
.bss:0040F0C7                 db    ? ;
.bss:0040F0C8                 db    ? ;
.bss:0040F0C9                 db    ? ;
.bss:0040F0CA                 db    ? ;
.bss:0040F0CB                 db    ? ;
.bss:0040F0CC                 db    ? ;
.bss:0040F0CD                 db    ? ;
.bss:0040F0CE                 db    ? ;
.bss:0040F0CF                 db    ? ;
.bss:0040F0D0                 db    ? ;
.bss:0040F0D1                 db    ? ;
.bss:0040F0D2                 db    ? ;
.bss:0040F0D3                 db    ? ;
.bss:0040F0D4                 db    ? ;
.bss:0040F0D5                 db    ? ;
.bss:0040F0D6                 db    ? ;
.bss:0040F0D7                 db    ? ;
.bss:0040F0D8                 db    ? ;
.bss:0040F0D9                 db    ? ;
.bss:0040F0DA                 db    ? ;
.bss:0040F0DB                 db    ? ;
.bss:0040F0DC                 db    ? ;
.bss:0040F0DD                 db    ? ;
.bss:0040F0DE                 db    ? ;
.bss:0040F0DF                 db    ? ;
.bss:0040F0E0                 db    ? ;
.bss:0040F0E1                 db    ? ;
.bss:0040F0E2                 db    ? ;
.bss:0040F0E3                 db    ? ;
.bss:0040F0E4                 db    ? ;
.bss:0040F0E5                 db    ? ;
.bss:0040F0E6                 db    ? ;
.bss:0040F0E7                 db    ? ;
.bss:0040F0E8                 db    ? ;
.bss:0040F0E9                 db    ? ;
.bss:0040F0EA                 db    ? ;
.bss:0040F0EB                 db    ? ;
.bss:0040F0EC                 db    ? ;
.bss:0040F0ED                 db    ? ;
.bss:0040F0EE                 db    ? ;
.bss:0040F0EF                 db    ? ;
.bss:0040F0F0                 db    ? ;
.bss:0040F0F1                 db    ? ;
.bss:0040F0F2                 db    ? ;
.bss:0040F0F3                 db    ? ;
.bss:0040F0F4                 db    ? ;
.bss:0040F0F5                 db    ? ;
.bss:0040F0F6                 db    ? ;
.bss:0040F0F7                 db    ? ;
.bss:0040F0F8                 db    ? ;
.bss:0040F0F9                 db    ? ;
.bss:0040F0FA                 db    ? ;
.bss:0040F0FB                 db    ? ;
.bss:0040F0FC                 db    ? ;
.bss:0040F0FD                 db    ? ;
.bss:0040F0FE                 db    ? ;
.bss:0040F0FF                 db    ? ;
.bss:0040F100                 db    ? ;
.bss:0040F101                 db    ? ;
.bss:0040F102                 db    ? ;
.bss:0040F103                 db    ? ;
.bss:0040F104                 db    ? ;
.bss:0040F105                 db    ? ;
.bss:0040F106                 db    ? ;
.bss:0040F107                 db    ? ;
.bss:0040F108                 db    ? ;
.bss:0040F109                 db    ? ;
.bss:0040F10A                 db    ? ;
.bss:0040F10B                 db    ? ;
.bss:0040F10C                 db    ? ;
.bss:0040F10D                 db    ? ;
.bss:0040F10E                 db    ? ;
.bss:0040F10F                 db    ? ;
.bss:0040F110                 db    ? ;
.bss:0040F111                 db    ? ;
.bss:0040F112                 db    ? ;
.bss:0040F113                 db    ? ;
.bss:0040F114                 db    ? ;
.bss:0040F115                 db    ? ;
.bss:0040F116                 db    ? ;
.bss:0040F117                 db    ? ;
.bss:0040F118                 db    ? ;
.bss:0040F119                 db    ? ;
.bss:0040F11A                 db    ? ;
.bss:0040F11B                 db    ? ;
.bss:0040F11C                 db    ? ;
.bss:0040F11D                 db    ? ;
.bss:0040F11E                 db    ? ;
.bss:0040F11F                 db    ? ;
.bss:0040F120                 db    ? ;
.bss:0040F121                 db    ? ;
.bss:0040F122                 db    ? ;
.bss:0040F123                 db    ? ;
.bss:0040F124                 db    ? ;
.bss:0040F125                 db    ? ;
.bss:0040F126                 db    ? ;
.bss:0040F127                 db    ? ;
.bss:0040F128                 db    ? ;
.bss:0040F129                 db    ? ;
.bss:0040F12A                 db    ? ;
.bss:0040F12B                 db    ? ;
.bss:0040F12C                 db    ? ;
.bss:0040F12D                 db    ? ;
.bss:0040F12E                 db    ? ;
.bss:0040F12F                 db    ? ;
.bss:0040F130                 db    ? ;
.bss:0040F131                 db    ? ;
.bss:0040F132                 db    ? ;
.bss:0040F133                 db    ? ;
.bss:0040F134                 db    ? ;
.bss:0040F135                 db    ? ;
.bss:0040F136                 db    ? ;
.bss:0040F137                 db    ? ;
.bss:0040F138                 db    ? ;
.bss:0040F139                 db    ? ;
.bss:0040F13A                 db    ? ;
.bss:0040F13B                 db    ? ;
.bss:0040F13C                 db    ? ;
.bss:0040F13D                 db    ? ;
.bss:0040F13E                 db    ? ;
.bss:0040F13F                 db    ? ;
.bss:0040F140 dword_40F140    dd ?                    ; DATA XREF: .text:loc_404A51↑o
.bss:0040F140                                         ; .text:loc_404A70↑o ...
.bss:0040F144 dword_40F144    dd ?                    ; DATA XREF: .text:loc_404AF0↑o
.bss:0040F144                                         ; .text:00404F78↑r ...
.bss:0040F148 dword_40F148    dd ?                    ; DATA XREF: .text:00404F72↑r
.bss:0040F148                                         ; sub_405020+2C↑r
.bss:0040F14C dword_40F14C    dd ?                    ; DATA XREF: .text:00404F66↑r
.bss:0040F14C                                         ; sub_405020+22↑r
.bss:0040F150 dword_40F150    dd ?                    ; DATA XREF: .text:00404F82↑r
.bss:0040F150                                         ; sub_405020+36↑r
.bss:0040F154 dword_40F154    dd ?                    ; DATA XREF: .text:00404F92↑r
.bss:0040F154                                         ; sub_405020+4E↑r
.bss:0040F158 dword_40F158    dd ?                    ; DATA XREF: .text:00404FAF↑r
.bss:0040F158                                         ; sub_405020+62↑r
.bss:0040F15C dword_40F15C    dd ?                    ; DATA XREF: .text:00404FA5↑r
.bss:0040F15C                                         ; sub_405020+70↑r
.bss:0040F160 dword_40F160    dd ?                    ; DATA XREF: .text:00404F88↑r
.bss:0040F160                                         ; sub_405020+7A↑r
.bss:0040F164                 align 10h
.bss:0040F170 ; char *Str1
.bss:0040F170 Str1            dd ?                    ; DATA XREF: sub_4056B4:loc_4056ED↑w
.bss:0040F170                                         ; sub_4056B4:loc_405820↑r
.bss:0040F174                 align 10h
.bss:0040F180 dword_40F180    dd ?                    ; DATA XREF: sub_4056B4+2D↑r
.bss:0040F180                                         ; sub_4056B4+3F↑w
.bss:0040F184                 align 10h
.bss:0040F190 dword_40F190    dd ?                    ; DATA XREF: sub_406FF0+100↑r
.bss:0040F190                                         ; sub_406FF0+308↑w
.bss:0040F194                 align 10h
.bss:0040F1A0 ; char *Str
.bss:0040F1A0 Str             dd ?                    ; DATA XREF: sub_406FF0:loc_407354↑r
.bss:0040F1A0                                         ; sub_406FF0+3B6↑r ...
.bss:0040F1A4                 align 10h
.bss:0040F1B0 dword_40F1B0    dd ?                    ; DATA XREF: sub_408AE0+8↑r
.bss:0040F1B0                                         ; sub_408BF0:loc_408C72↑w ...
.bss:0040F1B4                 align 10h
.bss:0040F1C0 ; struct _OSVERSIONINFOA VersionInformation
.bss:0040F1C0 VersionInformation _OSVERSIONINFOA <?>  ; DATA XREF: sub_408BF0:loc_408C10↑o
.bss:0040F1C0                                         ; sub_408BF0+2C↑w ...
.bss:0040F254 word_40F254     dw ?                    ; DATA XREF: sub_408BF0:loc_408CA3↑r
.bss:0040F256                 align 4
.bss:0040F258 word_40F258     dw ?                    ; DATA XREF: .text:loc_408666↑r
.bss:0040F258                                         ; .text:00408694↑r ...
.bss:0040F25A byte_40F25A     db ?                    ; DATA XREF: .text:00408625↑r
.bss:0040F25B                 align 10h
.bss:0040F260 dword_40F260    dd ?                    ; DATA XREF: sub_408BF0+6↑r
.bss:0040F260                                         ; sub_408BF0+75↑w
.bss:0040F264                 align 10h
.bss:0040F270 dword_40F270    dd ?                    ; DATA XREF: sub_4091C0+1C↑r
.bss:0040F270                                         ; sub_4091C0+104↑w
.bss:0040F274                 align 10h
.bss:0040F280 dword_40F280    dd ?                    ; DATA XREF: sub_4091C0+B↑r
.bss:0040F280                                         ; sub_4091C0+71↑w
.bss:0040F284                 align 10h
.bss:0040F290 dword_40F290    dd ?                    ; DATA XREF: sub_4091C0+85↑r
.bss:0040F290                                         ; sub_4091C0+B9↑w
.bss:0040F294 dword_40F294    dd ?                    ; DATA XREF: sub_4091C0+C4↑w
.bss:0040F298 dword_40F298    dd ?                    ; DATA XREF: sub_4091C0+2E↑o
.bss:0040F298                                         ; sub_4091C0+CF↑w
.bss:0040F29C dword_40F29C    dd ?                    ; DATA XREF: sub_4091C0+DA↑w
.bss:0040F2A0                 db    ? ;
.bss:0040F2A1                 db    ? ;
.bss:0040F2A2                 db    ? ;
.bss:0040F2A3                 db    ? ;
.bss:0040F2A4                 db    ? ;
.bss:0040F2A5                 db    ? ;
.bss:0040F2A6                 db    ? ;
.bss:0040F2A7                 db    ? ;
.bss:0040F2A8                 db    ? ;
.bss:0040F2A9                 db    ? ;
.bss:0040F2AA                 db    ? ;
.bss:0040F2AB                 db    ? ;
.bss:0040F2AC                 db    ? ;
.bss:0040F2AD                 db    ? ;
.bss:0040F2AE                 db    ? ;
.bss:0040F2AF                 db    ? ;
.bss:0040F2B0                 db    ? ;
.bss:0040F2B1                 db    ? ;
.bss:0040F2B2                 db    ? ;
.bss:0040F2B3                 db    ? ;
.bss:0040F2B4                 db    ? ;
.bss:0040F2B5                 db    ? ;
.bss:0040F2B6                 db    ? ;
.bss:0040F2B7                 db    ? ;
.bss:0040F2B8                 db    ? ;
.bss:0040F2B9                 db    ? ;
.bss:0040F2BA                 db    ? ;
.bss:0040F2BB                 db    ? ;
.bss:0040F2BC                 db    ? ;
.bss:0040F2BD                 db    ? ;
.bss:0040F2BE                 db    ? ;
.bss:0040F2BF                 db    ? ;
.bss:0040F2C0                 db    ? ;
.bss:0040F2C1                 db    ? ;
.bss:0040F2C2                 db    ? ;
.bss:0040F2C3                 db    ? ;
.bss:0040F2C4                 db    ? ;
.bss:0040F2C5                 db    ? ;
.bss:0040F2C6                 db    ? ;
.bss:0040F2C7                 db    ? ;
.bss:0040F2C8                 db    ? ;
.bss:0040F2C9                 db    ? ;
.bss:0040F2CA                 db    ? ;
.bss:0040F2CB                 db    ? ;
.bss:0040F2CC                 db    ? ;
.bss:0040F2CD                 db    ? ;
.bss:0040F2CE                 db    ? ;
.bss:0040F2CF                 db    ? ;
.bss:0040F2D0                 db    ? ;
.bss:0040F2D1                 db    ? ;
.bss:0040F2D2                 db    ? ;
.bss:0040F2D3                 db    ? ;
.bss:0040F2D4                 db    ? ;
.bss:0040F2D5                 db    ? ;
.bss:0040F2D6                 db    ? ;
.bss:0040F2D7                 db    ? ;
.bss:0040F2D8                 db    ? ;
.bss:0040F2D9                 db    ? ;
.bss:0040F2DA                 db    ? ;
.bss:0040F2DB                 db    ? ;
.bss:0040F2DC                 db    ? ;
.bss:0040F2DD                 db    ? ;
.bss:0040F2DE                 db    ? ;
.bss:0040F2DF                 db    ? ;
.bss:0040F2E0                 db    ? ;
.bss:0040F2E1                 db    ? ;
.bss:0040F2E2                 db    ? ;
.bss:0040F2E3                 db    ? ;
.bss:0040F2E4                 db    ? ;
.bss:0040F2E5                 db    ? ;
.bss:0040F2E6                 db    ? ;
.bss:0040F2E7                 db    ? ;
.bss:0040F2E8                 db    ? ;
.bss:0040F2E9                 db    ? ;
.bss:0040F2EA                 db    ? ;
.bss:0040F2EB                 db    ? ;
.bss:0040F2EC                 db    ? ;
.bss:0040F2ED                 db    ? ;
.bss:0040F2EE                 db    ? ;
.bss:0040F2EF                 db    ? ;
.bss:0040F2F0                 db    ? ;
.bss:0040F2F1                 db    ? ;
.bss:0040F2F2                 db    ? ;
.bss:0040F2F3                 db    ? ;
.bss:0040F2F4                 db    ? ;
.bss:0040F2F5                 db    ? ;
.bss:0040F2F6                 db    ? ;
.bss:0040F2F7                 db    ? ;
.bss:0040F2F8                 db    ? ;
.bss:0040F2F9                 db    ? ;
.bss:0040F2FA                 db    ? ;
.bss:0040F2FB                 db    ? ;
.bss:0040F2FC                 db    ? ;
.bss:0040F2FD                 db    ? ;
.bss:0040F2FE                 db    ? ;
.bss:0040F2FF                 db    ? ;
.bss:0040F300                 db    ? ;
.bss:0040F301                 db    ? ;
.bss:0040F302                 db    ? ;
.bss:0040F303                 db    ? ;
.bss:0040F304                 db    ? ;
.bss:0040F305                 db    ? ;
.bss:0040F306                 db    ? ;
.bss:0040F307                 db    ? ;
.bss:0040F308                 db    ? ;
.bss:0040F309                 db    ? ;
.bss:0040F30A                 db    ? ;
.bss:0040F30B                 db    ? ;
.bss:0040F30C                 db    ? ;
.bss:0040F30D                 db    ? ;
.bss:0040F30E                 db    ? ;
.bss:0040F30F                 db    ? ;
.bss:0040F310                 db    ? ;
.bss:0040F311                 db    ? ;
.bss:0040F312                 db    ? ;
.bss:0040F313                 db    ? ;
.bss:0040F314                 db    ? ;
.bss:0040F315                 db    ? ;
.bss:0040F316                 db    ? ;
.bss:0040F317                 db    ? ;
.bss:0040F318                 db    ? ;
.bss:0040F319                 db    ? ;
.bss:0040F31A                 db    ? ;
.bss:0040F31B                 db    ? ;
.bss:0040F31C                 db    ? ;
.bss:0040F31D                 db    ? ;
.bss:0040F31E                 db    ? ;
.bss:0040F31F                 db    ? ;
.bss:0040F320                 db    ? ;
.bss:0040F321                 db    ? ;
.bss:0040F322                 db    ? ;
.bss:0040F323                 db    ? ;
.bss:0040F324                 db    ? ;
.bss:0040F325                 db    ? ;
.bss:0040F326                 db    ? ;
.bss:0040F327                 db    ? ;
.bss:0040F328                 db    ? ;
.bss:0040F329                 db    ? ;
.bss:0040F32A                 db    ? ;
.bss:0040F32B                 db    ? ;
.bss:0040F32C                 db    ? ;
.bss:0040F32D                 db    ? ;
.bss:0040F32E                 db    ? ;
.bss:0040F32F                 db    ? ;
.bss:0040F330                 db    ? ;
.bss:0040F331                 db    ? ;
.bss:0040F332                 db    ? ;
.bss:0040F333                 db    ? ;
.bss:0040F334                 db    ? ;
.bss:0040F335                 db    ? ;
.bss:0040F336                 db    ? ;
.bss:0040F337                 db    ? ;
.bss:0040F338                 db    ? ;
.bss:0040F339                 db    ? ;
.bss:0040F33A                 db    ? ;
.bss:0040F33B                 db    ? ;
.bss:0040F33C                 db    ? ;
.bss:0040F33D                 db    ? ;
.bss:0040F33E                 db    ? ;
.bss:0040F33F                 db    ? ;
.bss:0040F340                 db    ? ;
.bss:0040F341                 db    ? ;
.bss:0040F342                 db    ? ;
.bss:0040F343                 db    ? ;
.bss:0040F344                 db    ? ;
.bss:0040F345                 db    ? ;
.bss:0040F346                 db    ? ;
.bss:0040F347                 db    ? ;
.bss:0040F348                 db    ? ;
.bss:0040F349                 db    ? ;
.bss:0040F34A                 db    ? ;
.bss:0040F34B                 db    ? ;
.bss:0040F34C                 db    ? ;
.bss:0040F34D                 db    ? ;
.bss:0040F34E                 db    ? ;
.bss:0040F34F                 db    ? ;
.bss:0040F350                 db    ? ;
.bss:0040F351                 db    ? ;
.bss:0040F352                 db    ? ;
.bss:0040F353                 db    ? ;
.bss:0040F354                 db    ? ;
.bss:0040F355                 db    ? ;
.bss:0040F356                 db    ? ;
.bss:0040F357                 db    ? ;
.bss:0040F358                 db    ? ;
.bss:0040F359                 db    ? ;
.bss:0040F35A                 db    ? ;
.bss:0040F35B                 db    ? ;
.bss:0040F35C                 db    ? ;
.bss:0040F35D                 db    ? ;
.bss:0040F35E                 db    ? ;
.bss:0040F35F                 db    ? ;
.bss:0040F360                 db    ? ;
.bss:0040F361                 db    ? ;
.bss:0040F362                 db    ? ;
.bss:0040F363                 db    ? ;
.bss:0040F364                 db    ? ;
.bss:0040F365                 db    ? ;
.bss:0040F366                 db    ? ;
.bss:0040F367                 db    ? ;
.bss:0040F368                 db    ? ;
.bss:0040F369                 db    ? ;
.bss:0040F36A                 db    ? ;
.bss:0040F36B                 db    ? ;
.bss:0040F36C                 db    ? ;
.bss:0040F36D                 db    ? ;
.bss:0040F36E                 db    ? ;
.bss:0040F36F                 db    ? ;
.bss:0040F370                 db    ? ;
.bss:0040F371                 db    ? ;
.bss:0040F372                 db    ? ;
.bss:0040F373                 db    ? ;
.bss:0040F374                 db    ? ;
.bss:0040F375                 db    ? ;
.bss:0040F376                 db    ? ;
.bss:0040F377                 db    ? ;
.bss:0040F378                 db    ? ;
.bss:0040F379                 db    ? ;
.bss:0040F37A                 db    ? ;
.bss:0040F37B                 db    ? ;
.bss:0040F37C                 db    ? ;
.bss:0040F37D                 db    ? ;
.bss:0040F37E                 db    ? ;
.bss:0040F37F                 db    ? ;
.bss:0040F380                 db    ? ;
.bss:0040F381                 db    ? ;
.bss:0040F382                 db    ? ;
.bss:0040F383                 db    ? ;
.bss:0040F384                 db    ? ;
.bss:0040F385                 db    ? ;
.bss:0040F386                 db    ? ;
.bss:0040F387                 db    ? ;
.bss:0040F388                 db    ? ;
.bss:0040F389                 db    ? ;
.bss:0040F38A                 db    ? ;
.bss:0040F38B                 db    ? ;
.bss:0040F38C                 db    ? ;
.bss:0040F38D                 db    ? ;
.bss:0040F38E                 db    ? ;
.bss:0040F38F                 db    ? ;
.bss:0040F390                 db    ? ;
.bss:0040F391                 db    ? ;
.bss:0040F392                 db    ? ;
.bss:0040F393                 db    ? ;
.bss:0040F394                 db    ? ;
.bss:0040F395                 db    ? ;
.bss:0040F396                 db    ? ;
.bss:0040F397                 db    ? ;
.bss:0040F398                 db    ? ;
.bss:0040F399                 db    ? ;
.bss:0040F39A                 db    ? ;
.bss:0040F39B                 db    ? ;
.bss:0040F39C                 db    ? ;
.bss:0040F39D                 db    ? ;
.bss:0040F39E                 db    ? ;
.bss:0040F39F                 db    ? ;
.bss:0040F3A0                 db    ? ;
.bss:0040F3A1                 db    ? ;
.bss:0040F3A2                 db    ? ;
.bss:0040F3A3                 db    ? ;
.bss:0040F3A4                 db    ? ;
.bss:0040F3A5                 db    ? ;
.bss:0040F3A6                 db    ? ;
.bss:0040F3A7                 db    ? ;
.bss:0040F3A8                 db    ? ;
.bss:0040F3A9                 db    ? ;
.bss:0040F3AA                 db    ? ;
.bss:0040F3AB                 db    ? ;
.bss:0040F3AC                 db    ? ;
.bss:0040F3AD                 db    ? ;
.bss:0040F3AE                 db    ? ;
.bss:0040F3AF                 db    ? ;
.bss:0040F3B0                 db    ? ;
.bss:0040F3B1                 db    ? ;
.bss:0040F3B2                 db    ? ;
.bss:0040F3B3                 db    ? ;
.bss:0040F3B4                 db    ? ;
.bss:0040F3B5                 db    ? ;
.bss:0040F3B6                 db    ? ;
.bss:0040F3B7                 db    ? ;
.bss:0040F3B8                 db    ? ;
.bss:0040F3B9                 db    ? ;
.bss:0040F3BA                 db    ? ;
.bss:0040F3BB                 db    ? ;
.bss:0040F3BC                 db    ? ;
.bss:0040F3BD                 db    ? ;
.bss:0040F3BE                 db    ? ;
.bss:0040F3BF                 db    ? ;
.bss:0040F3C0                 db    ? ;
.bss:0040F3C1                 db    ? ;
.bss:0040F3C2                 db    ? ;
.bss:0040F3C3                 db    ? ;
.bss:0040F3C4                 db    ? ;
.bss:0040F3C5                 db    ? ;
.bss:0040F3C6                 db    ? ;
.bss:0040F3C7                 db    ? ;
.bss:0040F3C8                 db    ? ;
.bss:0040F3C9                 db    ? ;
.bss:0040F3CA                 db    ? ;
.bss:0040F3CB                 db    ? ;
.bss:0040F3CC                 db    ? ;
.bss:0040F3CD                 db    ? ;
.bss:0040F3CE                 db    ? ;
.bss:0040F3CF                 db    ? ;
.bss:0040F3D0                 db    ? ;
.bss:0040F3D1                 db    ? ;
.bss:0040F3D2                 db    ? ;
.bss:0040F3D3                 db    ? ;
.bss:0040F3D4                 db    ? ;
.bss:0040F3D5                 db    ? ;
.bss:0040F3D6                 db    ? ;
.bss:0040F3D7                 db    ? ;
.bss:0040F3D8                 db    ? ;
.bss:0040F3D9                 db    ? ;
.bss:0040F3DA                 db    ? ;
.bss:0040F3DB                 db    ? ;
.bss:0040F3DC                 db    ? ;
.bss:0040F3DD                 db    ? ;
.bss:0040F3DE                 db    ? ;
.bss:0040F3DF                 db    ? ;
.bss:0040F3E0                 db    ? ;
.bss:0040F3E1                 db    ? ;
.bss:0040F3E2                 db    ? ;
.bss:0040F3E3                 db    ? ;
.bss:0040F3E4                 db    ? ;
.bss:0040F3E5                 db    ? ;
.bss:0040F3E6                 db    ? ;
.bss:0040F3E7                 db    ? ;
.bss:0040F3E8                 db    ? ;
.bss:0040F3E9                 db    ? ;
.bss:0040F3EA                 db    ? ;
.bss:0040F3EB                 db    ? ;
.bss:0040F3EC                 db    ? ;
.bss:0040F3ED                 db    ? ;
.bss:0040F3EE                 db    ? ;
.bss:0040F3EF                 db    ? ;
.bss:0040F3F0                 db    ? ;
.bss:0040F3F1                 db    ? ;
.bss:0040F3F2                 db    ? ;
.bss:0040F3F3                 db    ? ;
.bss:0040F3F4                 db    ? ;
.bss:0040F3F5                 db    ? ;
.bss:0040F3F6                 db    ? ;
.bss:0040F3F7                 db    ? ;
.bss:0040F3F8                 db    ? ;
.bss:0040F3F9                 db    ? ;
.bss:0040F3FA                 db    ? ;
.bss:0040F3FB                 db    ? ;
.bss:0040F3FC                 db    ? ;
.bss:0040F3FD                 db    ? ;
.bss:0040F3FE                 db    ? ;
.bss:0040F3FF                 db    ? ;
.bss:0040F400                 db    ? ;
.bss:0040F401                 db    ? ;
.bss:0040F402                 db    ? ;
.bss:0040F403                 db    ? ;
.bss:0040F404                 db    ? ;
.bss:0040F405                 db    ? ;
.bss:0040F406                 db    ? ;
.bss:0040F407                 db    ? ;
.bss:0040F408                 db    ? ;
.bss:0040F409                 db    ? ;
.bss:0040F40A                 db    ? ;
.bss:0040F40B                 db    ? ;
.bss:0040F40C                 db    ? ;
.bss:0040F40D                 db    ? ;
.bss:0040F40E                 db    ? ;
.bss:0040F40F                 db    ? ;
.bss:0040F410                 db    ? ;
.bss:0040F411                 db    ? ;
.bss:0040F412                 db    ? ;
.bss:0040F413                 db    ? ;
.bss:0040F414                 db    ? ;
.bss:0040F415                 db    ? ;
.bss:0040F416                 db    ? ;
.bss:0040F417                 db    ? ;
.bss:0040F418                 db    ? ;
.bss:0040F419                 db    ? ;
.bss:0040F41A                 db    ? ;
.bss:0040F41B                 db    ? ;
.bss:0040F41C                 db    ? ;
.bss:0040F41D                 db    ? ;
.bss:0040F41E                 db    ? ;
.bss:0040F41F                 db    ? ;
.bss:0040F420                 db    ? ;
.bss:0040F421                 db    ? ;
.bss:0040F422                 db    ? ;
.bss:0040F423                 db    ? ;
.bss:0040F424                 db    ? ;
.bss:0040F425                 db    ? ;
.bss:0040F426                 db    ? ;
.bss:0040F427                 db    ? ;
.bss:0040F428                 db    ? ;
.bss:0040F429                 db    ? ;
.bss:0040F42A                 db    ? ;
.bss:0040F42B                 db    ? ;
.bss:0040F42C                 db    ? ;
.bss:0040F42D                 db    ? ;
.bss:0040F42E                 db    ? ;
.bss:0040F42F                 db    ? ;
.bss:0040F430                 db    ? ;
.bss:0040F431                 db    ? ;
.bss:0040F432                 db    ? ;
.bss:0040F433                 db    ? ;
.bss:0040F434                 db    ? ;
.bss:0040F435                 db    ? ;
.bss:0040F436                 db    ? ;
.bss:0040F437                 db    ? ;
.bss:0040F438                 db    ? ;
.bss:0040F439                 db    ? ;
.bss:0040F43A                 db    ? ;
.bss:0040F43B                 db    ? ;
.bss:0040F43C                 db    ? ;
.bss:0040F43D                 db    ? ;
.bss:0040F43E                 db    ? ;
.bss:0040F43F                 db    ? ;
.bss:0040F440                 db    ? ;
.bss:0040F441                 db    ? ;
.bss:0040F442                 db    ? ;
.bss:0040F443                 db    ? ;
.bss:0040F444                 db    ? ;
.bss:0040F445                 db    ? ;
.bss:0040F446                 db    ? ;
.bss:0040F447                 db    ? ;
.bss:0040F448                 db    ? ;
.bss:0040F449                 db    ? ;
.bss:0040F44A                 db    ? ;
.bss:0040F44B                 db    ? ;
.bss:0040F44C                 db    ? ;
.bss:0040F44D                 db    ? ;
.bss:0040F44E                 db    ? ;
.bss:0040F44F                 db    ? ;
.bss:0040F450                 db    ? ;
.bss:0040F451                 db    ? ;
.bss:0040F452                 db    ? ;
.bss:0040F453                 db    ? ;
.bss:0040F454                 db    ? ;
.bss:0040F455                 db    ? ;
.bss:0040F456                 db    ? ;
.bss:0040F457                 db    ? ;
.bss:0040F458                 db    ? ;
.bss:0040F459                 db    ? ;
.bss:0040F45A                 db    ? ;
.bss:0040F45B                 db    ? ;
.bss:0040F45C                 db    ? ;
.bss:0040F45D                 db    ? ;
.bss:0040F45E                 db    ? ;
.bss:0040F45F                 db    ? ;
.bss:0040F460                 db    ? ;
.bss:0040F461                 db    ? ;
.bss:0040F462                 db    ? ;
.bss:0040F463                 db    ? ;
.bss:0040F464                 db    ? ;
.bss:0040F465                 db    ? ;
.bss:0040F466                 db    ? ;
.bss:0040F467                 db    ? ;
.bss:0040F468                 db    ? ;
.bss:0040F469                 db    ? ;
.bss:0040F46A                 db    ? ;
.bss:0040F46B                 db    ? ;
.bss:0040F46C                 db    ? ;
.bss:0040F46D                 db    ? ;
.bss:0040F46E                 db    ? ;
.bss:0040F46F                 db    ? ;
.bss:0040F470                 db    ? ;
.bss:0040F471                 db    ? ;
.bss:0040F472                 db    ? ;
.bss:0040F473                 db    ? ;
.bss:0040F474                 db    ? ;
.bss:0040F475                 db    ? ;
.bss:0040F476                 db    ? ;
.bss:0040F477                 db    ? ;
.bss:0040F478                 db    ? ;
.bss:0040F479                 db    ? ;
.bss:0040F47A                 db    ? ;
.bss:0040F47B                 db    ? ;
.bss:0040F47C                 db    ? ;
.bss:0040F47D                 db    ? ;
.bss:0040F47E                 db    ? ;
.bss:0040F47F                 db    ? ;
.bss:0040F480                 db    ? ;
.bss:0040F481                 db    ? ;
.bss:0040F482                 db    ? ;
.bss:0040F483                 db    ? ;
.bss:0040F484                 db    ? ;
.bss:0040F485                 db    ? ;
.bss:0040F486                 db    ? ;
.bss:0040F487                 db    ? ;
.bss:0040F488                 db    ? ;
.bss:0040F489                 db    ? ;
.bss:0040F48A                 db    ? ;
.bss:0040F48B                 db    ? ;
.bss:0040F48C                 db    ? ;
.bss:0040F48D                 db    ? ;
.bss:0040F48E                 db    ? ;
.bss:0040F48F                 db    ? ;
.bss:0040F490 dword_40F490    dd ?                    ; DATA XREF: sub_40B0B0+6E↑r
.bss:0040F490                                         ; sub_40B0B0+9A↑r ...
.bss:0040F494 dword_40F494    dd ?                    ; DATA XREF: sub_40B0B0:loc_40B118↑r
.bss:0040F494                                         ; sub_40B0B0+A0↑r ...
.bss:0040F498                 align 10h
.bss:0040F4A0 dword_40F4A0    dd ?                    ; DATA XREF: sub_40B5C0↑r
.bss:0040F4A0                                         ; .text:loc_40B6F2↑w
.bss:0040F4A4                 align 10h
.bss:0040F4B0 dword_40F4B0    dd ?                    ; DATA XREF: sub_4015E0+33↑w
.bss:0040F4B0                                         ; sub_4015E0+E8↑r ...
.bss:0040F4B4                 db    ? ;
.bss:0040F4B5                 db    ? ;
.bss:0040F4B6                 db    ? ;
.bss:0040F4B7                 db    ? ;
.bss:0040F4B8                 db    ? ;
.bss:0040F4B9                 db    ? ;
.bss:0040F4BA                 db    ? ;
.bss:0040F4BB                 db    ? ;
.bss:0040F4BC                 db    ? ;
.bss:0040F4BD                 db    ? ;
.bss:0040F4BE                 db    ? ;
.bss:0040F4BF                 db    ? ;
.bss:0040F4C0                 db    ? ;
.bss:0040F4C1                 db    ? ;
.bss:0040F4C2                 db    ? ;
.bss:0040F4C3                 db    ? ;
.bss:0040F4C4                 db    ? ;
.bss:0040F4C5                 db    ? ;
.bss:0040F4C6                 db    ? ;
.bss:0040F4C7                 db    ? ;
.bss:0040F4C8                 db    ? ;
.bss:0040F4C9                 db    ? ;
.bss:0040F4CA                 db    ? ;
.bss:0040F4CB                 db    ? ;
.bss:0040F4CC                 db    ? ;
.bss:0040F4CD                 db    ? ;
.bss:0040F4CE                 db    ? ;
.bss:0040F4CF                 db    ? ;
.bss:0040F4D0 dword_40F4D0    dd ?                    ; DATA XREF: sub_4015E0+CA↑r
.bss:0040F4D0                                         ; sub_402EC0+71↑w ...
.bss:0040F4D4                 align 10h
.bss:0040F4E0 dword_40F4E0    dd ?                    ; CODE XREF: sub_4056B4+63↑p
.bss:0040F4E0                                         ; DATA XREF: sub_4055B0+1E↑r ...
.bss:0040F4E4                 align 10h
.bss:0040F4F0 dword_40F4F0    dd ?                    ; DATA XREF: sub_4055B0+4E↑w
.bss:0040F4F0                                         ; sub_4056B4+AB↑w
.bss:0040F4F4                 db    ? ;
.bss:0040F4F5                 db    ? ;
.bss:0040F4F6                 db    ? ;
.bss:0040F4F7                 db    ? ;
.bss:0040F4F8                 db    ? ;
.bss:0040F4F9                 db    ? ;
.bss:0040F4FA                 db    ? ;
.bss:0040F4FB                 db    ? ;
.bss:0040F4FC                 db    ? ;
.bss:0040F4FD                 db    ? ;
.bss:0040F4FE                 db    ? ;
.bss:0040F4FF                 db    ? ;
.bss:0040F500                 db    ? ;
.bss:0040F501                 db    ? ;
.bss:0040F502                 db    ? ;
.bss:0040F503                 db    ? ;
.bss:0040F504                 db    ? ;
.bss:0040F505                 db    ? ;
.bss:0040F506                 db    ? ;
.bss:0040F507                 db    ? ;
.bss:0040F508                 db    ? ;
.bss:0040F509                 db    ? ;
.bss:0040F50A                 db    ? ;
.bss:0040F50B                 db    ? ;
.bss:0040F50C                 db    ? ;
.bss:0040F50D                 db    ? ;
.bss:0040F50E                 db    ? ;
.bss:0040F50F                 db    ? ;
.bss:0040F510                 db    ? ;
.bss:0040F511                 db    ? ;
.bss:0040F512                 db    ? ;
.bss:0040F513                 db    ? ;
.bss:0040F514                 db    ? ;
.bss:0040F515                 db    ? ;
.bss:0040F516                 db    ? ;
.bss:0040F517                 db    ? ;
.bss:0040F518                 db    ? ;
.bss:0040F519                 db    ? ;
.bss:0040F51A                 db    ? ;
.bss:0040F51B                 db    ? ;
.bss:0040F51C                 db    ? ;
.bss:0040F51D                 db    ? ;
.bss:0040F51E                 db    ? ;
.bss:0040F51F                 db    ? ;
.bss:0040F520 dword_40F520    dd ?                    ; DATA XREF: sub_4056B4+13↑r
.bss:0040F524                 align 1000h
.bss:0040F524 _bss            ends
.bss:0040F524
.idata:00410000 ; Section 4. (virtual address 00010000)
.idata:00410000 ; Virtual size                  : 00000DA4 (   3492.)
.idata:00410000 ; Section size in file          : 00000E00 (   3584.)
.idata:00410000 ; Offset to raw data for section: 0000D200
.idata:00410000 ; Flags C0000040: Data Readable Writable
.idata:00410000 ; Alignment     : default
.idata:00410000 ; ===========================================================================
.idata:00410000
.idata:00410000 ; Segment type: Externs
.idata:00410000 ; _idata
.idata:00410000
.idata:00410001
.idata:004102A4 ;
.idata:004102A4 ; Imports from libintl3.dll
.idata:004102A4 ;
.idata:004102A4                 extrn libintl_bindtextdomain:dword
.idata:004102A4                                         ; CODE XREF: sub_4015E0+4D↑p
.idata:004102A4                                         ; DATA XREF: sub_4015E0+4D↑r ...
.idata:004102A8                 extrn libintl_gettext:dword
.idata:004102A8                                         ; CODE XREF: sub_4015E0+DC↑p
.idata:004102A8                                         ; sub_4015E0+15D↑p ...
.idata:004102AC                 extrn libintl_textdomain:dword
.idata:004102AC                                         ; CODE XREF: sub_4015E0+5A↑p
.idata:004102AC                                         ; DATA XREF: sub_4015E0+5A↑r ...
.idata:004102B0
.idata:004102B8 ;
.idata:004102B8 ; Imports from ADVAPI32.DLL
.idata:004102B8 ;
.idata:004102B8 ; LSTATUS (__stdcall *RegCloseKey)(HKEY hKey)
.idata:004102B8                 extrn __imp_RegCloseKey:dword
.idata:004102B8                                         ; DATA XREF: RegCloseKey↑r
.idata:004102BC ; LSTATUS (__stdcall *RegOpenKeyExA)(HKEY hKey, LPCSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult)
.idata:004102BC                 extrn __imp_RegOpenKeyExA:dword
.idata:004102BC                                         ; DATA XREF: RegOpenKeyExA↑r
.idata:004102C0 ; LSTATUS (__stdcall *RegQueryValueExA)(HKEY hKey, LPCSTR lpValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData)
.idata:004102C0                 extrn __imp_RegQueryValueExA:dword
.idata:004102C0                                         ; DATA XREF: RegQueryValueExA↑r
.idata:004102C4
.idata:004102CC ;
.idata:004102CC ; Imports from KERNEL32.dll
.idata:004102CC ;
.idata:004102CC ; BOOL (__stdcall *AreFileApisANSI)()
.idata:004102CC                 extrn __imp_AreFileApisANSI:dword
.idata:004102CC                                         ; DATA XREF: AreFileApisANSI↑r
.idata:004102D0 ; BOOL (__stdcall *CloseHandle)(HANDLE hObject)
.idata:004102D0                 extrn __imp_CloseHandle:dword
.idata:004102D0                                         ; DATA XREF: CloseHandle↑r
.idata:004102D4 ; BOOL (__stdcall *CreateDirectoryA)(LPCSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes)
.idata:004102D4                 extrn __imp_CreateDirectoryA:dword
.idata:004102D4                                         ; DATA XREF: CreateDirectoryA↑r
.idata:004102D8 ; HANDLE (__stdcall *CreateFileA)(LPCSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile)
.idata:004102D8                 extrn __imp_CreateFileA:dword
.idata:004102D8                                         ; DATA XREF: CreateFileA↑r
.idata:004102DC ; HANDLE (__stdcall *CreateNamedPipeA)(LPCSTR lpName, DWORD dwOpenMode, DWORD dwPipeMode, DWORD nMaxInstances, DWORD nOutBufferSize, DWORD nInBufferSize, DWORD nDefaultTimeOut, LPSECURITY_ATTRIBUTES lpSecurityAttributes)
.idata:004102DC                 extrn __imp_CreateNamedPipeA:dword
.idata:004102DC                                         ; DATA XREF: CreateNamedPipeA↑r
.idata:004102E0 ; BOOL (__stdcall *DeviceIoControl)(HANDLE hDevice, DWORD dwIoControlCode, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesReturned, LPOVERLAPPED lpOverlapped)
.idata:004102E0                 extrn __imp_DeviceIoControl:dword
.idata:004102E0                                         ; DATA XREF: DeviceIoControl↑r
.idata:004102E4 ; void (__stdcall __noreturn *ExitProcess)(UINT uExitCode)
.idata:004102E4                 extrn __imp_ExitProcess:dword
.idata:004102E4                                         ; DATA XREF: ExitProcess↑r
.idata:004102E8 ; BOOL (__stdcall *FindClose)(HANDLE hFindFile)
.idata:004102E8                 extrn __imp_FindClose:dword
.idata:004102E8                                         ; DATA XREF: FindClose↑r
.idata:004102EC ; HANDLE (__stdcall *FindFirstFileA)(LPCSTR lpFileName, LPWIN32_FIND_DATAA lpFindFileData)
.idata:004102EC                 extrn __imp_FindFirstFileA:dword
.idata:004102EC                                         ; DATA XREF: FindFirstFileA↑r
.idata:004102F0 ; BOOL (__stdcall *FindNextFileA)(HANDLE hFindFile, LPWIN32_FIND_DATAA lpFindFileData)
.idata:004102F0                 extrn __imp_FindNextFileA:dword
.idata:004102F0                                         ; DATA XREF: FindNextFileA↑r
.idata:004102F4 ; BOOL (__stdcall *FreeLibrary)(HMODULE hLibModule)
.idata:004102F4                 extrn __imp_FreeLibrary:dword
.idata:004102F4                                         ; DATA XREF: FreeLibrary↑r
.idata:004102F8 ; DWORD (__stdcall *GetCurrentDirectoryA)(DWORD nBufferLength, LPSTR lpBuffer)
.idata:004102F8                 extrn __imp_GetCurrentDirectoryA:dword
.idata:004102F8                                         ; DATA XREF: GetCurrentDirectoryA↑r
.idata:004102FC ; BOOL (__stdcall *GetDiskFreeSpaceA)(LPCSTR lpRootPathName, LPDWORD lpSectorsPerCluster, LPDWORD lpBytesPerSector, LPDWORD lpNumberOfFreeClusters, LPDWORD lpTotalNumberOfClusters)
.idata:004102FC                 extrn __imp_GetDiskFreeSpaceA:dword
.idata:004102FC                                         ; DATA XREF: GetDiskFreeSpaceA↑r
.idata:00410300 ; UINT (__stdcall *GetDriveTypeA)(LPCSTR lpRootPathName)
.idata:00410300                 extrn __imp_GetDriveTypeA:dword
.idata:00410300                                         ; DATA XREF: GetDriveTypeA↑r
.idata:00410304 ; DWORD (__stdcall *GetFileAttributesA)(LPCSTR lpFileName)
.idata:00410304                 extrn __imp_GetFileAttributesA:dword
.idata:00410304                                         ; DATA XREF: GetFileAttributesA↑r
.idata:00410308 ; BOOL (__stdcall *GetFileInformationByHandle)(HANDLE hFile, LPBY_HANDLE_FILE_INFORMATION lpFileInformation)
.idata:00410308                 extrn __imp_GetFileInformationByHandle:dword
.idata:00410308                                         ; DATA XREF: GetFileInformationByHandle↑r
.idata:0041030C ; DWORD (__stdcall *GetFileSize)(HANDLE hFile, LPDWORD lpFileSizeHigh)
.idata:0041030C                 extrn __imp_GetFileSize:dword
.idata:0041030C                                         ; DATA XREF: GetFileSize↑r
.idata:00410310 ; DWORD (__stdcall *GetFileType)(HANDLE hFile)
.idata:00410310                 extrn __imp_GetFileType:dword
.idata:00410310                                         ; DATA XREF: GetFileType↑r
.idata:00410314 ; DWORD (__stdcall *GetFullPathNameA)(LPCSTR lpFileName, DWORD nBufferLength, LPSTR lpBuffer, LPSTR *lpFilePart)
.idata:00410314                 extrn __imp_GetFullPathNameA:dword
.idata:00410314                                         ; DATA XREF: GetFullPathNameA↑r
.idata:00410318 ; DWORD (__stdcall *GetLastError)()
.idata:00410318                 extrn __imp_GetLastError:dword
.idata:00410318                                         ; DATA XREF: GetLastError↑r
.idata:0041031C ; DWORD (__stdcall *GetLogicalDriveStringsA)(DWORD nBufferLength, LPSTR lpBuffer)
.idata:0041031C                 extrn __imp_GetLogicalDriveStringsA:dword
.idata:0041031C                                         ; DATA XREF: GetLogicalDriveStringsA↑r
.idata:00410320 ; DWORD (__stdcall *GetModuleFileNameA)(HMODULE hModule, LPSTR lpFilename, DWORD nSize)
.idata:00410320                 extrn __imp_GetModuleFileNameA:dword
.idata:00410320                                         ; DATA XREF: GetModuleFileNameA↑r
.idata:00410324 ; HMODULE (__stdcall *GetModuleHandleA)(LPCSTR lpModuleName)
.idata:00410324                 extrn __imp_GetModuleHandleA:dword
.idata:00410324                                         ; DATA XREF: GetModuleHandleA↑r
.idata:00410328 ; FARPROC (__stdcall *GetProcAddress)(HMODULE hModule, LPCSTR lpProcName)
.idata:00410328                 extrn __imp_GetProcAddress:dword
.idata:00410328                                         ; DATA XREF: GetProcAddress↑r
.idata:0041032C ; HANDLE (__stdcall *GetProcessHeap)()
.idata:0041032C                 extrn __imp_GetProcessHeap:dword
.idata:0041032C                                         ; DATA XREF: GetProcessHeap↑r
.idata:00410330 ; DWORD (__stdcall *GetShortPathNameA)(LPCSTR lpszLongPath, LPSTR lpszShortPath, DWORD cchBuffer)
.idata:00410330                 extrn __imp_GetShortPathNameA:dword
.idata:00410330                                         ; DATA XREF: GetShortPathNameA↑r
.idata:00410334 ; void (__stdcall *GetSystemTimeAsFileTime)(LPFILETIME lpSystemTimeAsFileTime)
.idata:00410334                 extrn __imp_GetSystemTimeAsFileTime:dword
.idata:00410334                                         ; DATA XREF: GetSystemTimeAsFileTime↑r
.idata:00410338 ; DWORD (__stdcall *GetTimeZoneInformation)(LPTIME_ZONE_INFORMATION lpTimeZoneInformation)
.idata:00410338                 extrn __imp_GetTimeZoneInformation:dword
.idata:00410338                                         ; DATA XREF: GetTimeZoneInformation↑r
.idata:0041033C ; DWORD (__stdcall *GetVersion)()
.idata:0041033C                 extrn __imp_GetVersion:dword
.idata:0041033C                                         ; DATA XREF: GetVersion↑r
.idata:00410340 ; BOOL (__stdcall *GetVersionExA)(LPOSVERSIONINFOA lpVersionInformation)
.idata:00410340                 extrn __imp_GetVersionExA:dword
.idata:00410340                                         ; DATA XREF: GetVersionExA↑r
.idata:00410344 ; BOOL (__stdcall *GetVolumeInformationA)(LPCSTR lpRootPathName, LPSTR lpVolumeNameBuffer, DWORD nVolumeNameSize, LPDWORD lpVolumeSerialNumber, LPDWORD lpMaximumComponentLength, LPDWORD lpFileSystemFlags, LPSTR lpFileSystemNameBuffer, DWORD nFileSystemNameSize)
.idata:00410344                 extrn __imp_GetVolumeInformationA:dword
.idata:00410344                                         ; DATA XREF: GetVolumeInformationA↑r
.idata:00410348 ; LPVOID (__stdcall *HeapAlloc)(HANDLE hHeap, DWORD dwFlags, SIZE_T dwBytes)
.idata:00410348                 extrn __imp_HeapAlloc:dword
.idata:00410348                                         ; DATA XREF: HeapAlloc↑r
.idata:0041034C ; BOOL (__stdcall *HeapFree)(HANDLE hHeap, DWORD dwFlags, LPVOID lpMem)
.idata:0041034C                 extrn __imp_HeapFree:dword
.idata:0041034C                                         ; DATA XREF: HeapFree↑r
.idata:00410350 ; HMODULE (__stdcall *LoadLibraryA)(LPCSTR lpLibFileName)
.idata:00410350                 extrn __imp_LoadLibraryA:dword
.idata:00410350                                         ; DATA XREF: LoadLibraryA↑r
.idata:00410354 ; int (__stdcall *MultiByteToWideChar)(UINT CodePage, DWORD dwFlags, LPCCH lpMultiByteStr, int cbMultiByte, LPWSTR lpWideCharStr, int cchWideChar)
.idata:00410354                 extrn __imp_MultiByteToWideChar:dword
.idata:00410354                                         ; DATA XREF: MultiByteToWideChar↑r
.idata:00410358 ; BOOL (__stdcall *PeekNamedPipe)(HANDLE hNamedPipe, LPVOID lpBuffer, DWORD nBufferSize, LPDWORD lpBytesRead, LPDWORD lpTotalBytesAvail, LPDWORD lpBytesLeftThisMessage)
.idata:00410358                 extrn __imp_PeekNamedPipe:dword
.idata:00410358                                         ; DATA XREF: PeekNamedPipe↑r
.idata:0041035C ; UINT (__stdcall *SetErrorMode)(UINT uMode)
.idata:0041035C                 extrn __imp_SetErrorMode:dword
.idata:0041035C                                         ; DATA XREF: SetErrorMode↑r
.idata:00410360 ; LPTOP_LEVEL_EXCEPTION_FILTER (__stdcall *SetUnhandledExceptionFilter)(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.idata:00410360                 extrn __imp_SetUnhandledExceptionFilter:dword
.idata:00410360                                         ; DATA XREF: SetUnhandledExceptionFilter↑r
.idata:00410364 ; BOOL (__stdcall *UnlockFile)(HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToUnlockLow, DWORD nNumberOfBytesToUnlockHigh)
.idata:00410364                 extrn __imp_UnlockFile:dword
.idata:00410364                                         ; DATA XREF: UnlockFile↑r
.idata:00410368 ; int (__stdcall *lstrcmpiA)(LPCSTR lpString1, LPCSTR lpString2)
.idata:00410368                 extrn __imp_lstrcmpiA:dword
.idata:00410368                                         ; DATA XREF: lstrcmpiA↑r
.idata:0041036C ; LPSTR (__stdcall *lstrcpyA)(LPSTR lpString1, LPCSTR lpString2)
.idata:0041036C                 extrn __imp_lstrcpyA:dword
.idata:0041036C                                         ; DATA XREF: lstrcpyA↑r
.idata:00410370
.idata:00410378 ;
.idata:00410378 ; Imports from msvcrt.dll
.idata:00410378 ;
.idata:00410378 ; int (__cdecl *_chmod)(const char *FileName, int AccessMode)
.idata:00410378                 extrn __imp__chmod:dword
.idata:00410378                                         ; DATA XREF: _chmod↑r
.idata:0041037C ; int (__cdecl *_getpid)()
.idata:0041037C                 extrn __imp__getpid:dword
.idata:0041037C                                         ; DATA XREF: _getpid↑r
.idata:00410380 ; char *(__cdecl *_strdup)(const char *String)
.idata:00410380                 extrn __imp__strdup:dword
.idata:00410380                                         ; DATA XREF: _strdup↑r
.idata:00410384 ; int (__cdecl *_stricmp)(const char *String1, const char *String2)
.idata:00410384                 extrn __imp__stricmp:dword
.idata:00410384                                         ; DATA XREF: _stricmp↑r
.idata:00410388 ; int (__cdecl *_umask)(int Mode)
.idata:00410388                 extrn __imp__umask:dword
.idata:00410388                                         ; DATA XREF: _umask↑r
.idata:0041038C
.idata:00410394 ;
.idata:00410394 ; Imports from MSVCP60.DLL
.idata:00410394 ;
.idata:00410394 ; size_t (__cdecl *mbrtowc)(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.idata:00410394                 extrn __imp_mbrtowc:dword
.idata:00410394                                         ; DATA XREF: mbrtowc↑r
.idata:00410398
.idata:004103A0 ;
.idata:004103A0 ; Imports from msvcrt.dll
.idata:004103A0 ;
.idata:004103A0                 extrn __imp___getmainargs:dword
.idata:004103A0                                         ; DATA XREF: __getmainargs↑r
.idata:004103A4 ; int _mb_cur_max
.idata:004103A4                 extrn __mb_cur_max:dword
.idata:004103A4                                         ; DATA XREF: sub_403980+45↑r
.idata:004103A4                                         ; sub_403F80+7↑r ...
.idata:004103A8 ; char ***(__cdecl *__p__environ)()
.idata:004103A8                 extrn __imp___p__environ:dword
.idata:004103A8                                         ; DATA XREF: __p__environ↑r
.idata:004103AC ; int *(__cdecl *__p__fmode)()
.idata:004103AC                 extrn __imp___p__fmode:dword
.idata:004103AC                                         ; DATA XREF: __p__fmode↑r
.idata:004103B0 ; void (__cdecl *_set_app_type)(_crt_app_type Type)
.idata:004103B0                 extrn __set_app_type:dword
.idata:004103B0                                         ; CODE XREF: start+D↑p
.idata:004103B0                                         ; .text:0040102D↑p
.idata:004103B0                                         ; DATA XREF: ...
.idata:004103B4                 extrn __imp__assert:dword
.idata:004103B4                                         ; DATA XREF: _assert↑r
.idata:004103B8 ; void (__cdecl *_cexit)()
.idata:004103B8                 extrn __imp__cexit:dword
.idata:004103B8                                         ; DATA XREF: _cexit↑r
.idata:004103BC ; int (__cdecl *_close)(int FileHandle)
.idata:004103BC                 extrn __imp__close:dword
.idata:004103BC                                         ; DATA XREF: _close↑r
.idata:004103C0 ; int *(__cdecl *_errno)()
.idata:004103C0                 extrn __imp__errno:dword
.idata:004103C0                                         ; DATA XREF: _errno↑r
.idata:004103C4 ; FILE *(__cdecl *_fdopen)(int FileHandle, const char *Format)
.idata:004103C4                 extrn __imp__fdopen:dword
.idata:004103C4                                         ; DATA XREF: _fdopen↑r
.idata:004103C8 ; __int64 (__cdecl *_filelengthi64)(int FileHandle)
.idata:004103C8                 extrn __imp__filelengthi64:dword
.idata:004103C8                                         ; DATA XREF: _filelengthi64↑r
.idata:004103CC ; int (__cdecl *_flsbuf)(int Ch, FILE *File)
.idata:004103CC                 extrn __imp__flsbuf:dword
.idata:004103CC                                         ; DATA XREF: _flsbuf↑r
.idata:004103D0 ; intptr_t (__cdecl *_get_osfhandle)(int FileHandle)
.idata:004103D0                 extrn __imp__get_osfhandle:dword
.idata:004103D0                                         ; DATA XREF: _get_osfhandle↑r
.idata:004103D4 ; FILE iob[]
.idata:004103D4                 extrn _iob:dword        ; DATA XREF: sub_401080+5C↑r
.idata:004103D4                                         ; sub_401080+75↑r ...
.idata:004103D8 ; int (__cdecl *_isctype)(int C, int Type)
.idata:004103D8                 extrn __imp__isctype:dword
.idata:004103D8                                         ; DATA XREF: _isctype↑r
.idata:004103DC ; _onexit_t (__cdecl *onexit)(_onexit_t Func)
.idata:004103DC                 extrn _onexit:dword     ; CODE XREF: .text:0040106C↑p
.idata:004103DC                                         ; DATA XREF: .text:0040106C↑r
.idata:004103E0 ; int (*_open)(const char *FileName, int OpenFlag, ...)
.idata:004103E0                 extrn __imp__open:dword ; DATA XREF: _open↑r
.idata:004103E4 ; int (__cdecl *_open_osfhandle)(intptr_t OSFileHandle, int Flags)
.idata:004103E4                 extrn __imp__open_osfhandle:dword
.idata:004103E4                                         ; DATA XREF: _open_osfhandle↑r
.idata:004103E8 ; const unsigned __int16 *pctype
.idata:004103E8                 extrn _pctype:dword     ; DATA XREF: sub_403980:loc_403EA0↑r
.idata:004103E8                                         ; sub_403F80:loc_404674↑r
.idata:004103EC ; int (__cdecl *_setmode)(int FileHandle, int Mode)
.idata:004103EC                 extrn __imp__setmode:dword
.idata:004103EC                                         ; DATA XREF: _setmode↑r
.idata:004103F0 ; int (__cdecl *_stricmp_0)(const char *String1, const char *String2)
.idata:004103F0                 extrn __imp__stricmp_0:dword
.idata:004103F0                                         ; DATA XREF: _stricmp_0↑r
.idata:004103F4 ; void (__cdecl __noreturn *abort)()
.idata:004103F4                 extrn __imp_abort:dword ; DATA XREF: abort↑r
.idata:004103F8 ; int (__cdecl *atexit)(void (__cdecl *)())
.idata:004103F8                 extrn atexit:dword      ; CODE XREF: sub_401040+C↑p
.idata:004103F8                                         ; DATA XREF: sub_401040+C↑r
.idata:004103FC ; void *(__cdecl *calloc)(size_t Count, size_t Size)
.idata:004103FC                 extrn __imp_calloc:dword
.idata:004103FC                                         ; DATA XREF: calloc↑r
.idata:00410400 ; void (__cdecl __noreturn *exit)(int Code)
.idata:00410400                 extrn __imp_exit:dword  ; DATA XREF: exit↑r
.idata:00410404 ; int (__cdecl *fclose)(FILE *Stream)
.idata:00410404                 extrn __imp_fclose:dword
.idata:00410404                                         ; DATA XREF: fclose↑r
.idata:00410408 ; int (__cdecl *fflush)(FILE *Stream)
.idata:00410408                 extrn __imp_fflush:dword
.idata:00410408                                         ; DATA XREF: fflush↑r
.idata:0041040C ; FILE *(__cdecl *fopen)(const char *FileName, const char *Mode)
.idata:0041040C                 extrn __imp_fopen:dword ; DATA XREF: fopen↑r
.idata:00410410 ; int (*fprintf)(FILE *const Stream, const char *const Format, ...)
.idata:00410410                 extrn __imp_fprintf:dword
.idata:00410410                                         ; DATA XREF: fprintf↑r
.idata:00410414 ; int (__cdecl *fputs)(const char *Buffer, FILE *Stream)
.idata:00410414                 extrn __imp_fputs:dword ; DATA XREF: fputs↑r
.idata:00410418 ; void (__cdecl *free)(void *Block)
.idata:00410418                 extrn __imp_free:dword  ; DATA XREF: free↑r
.idata:0041041C ; char *(__cdecl *getenv)(const char *VarName)
.idata:0041041C                 extrn __imp_getenv:dword
.idata:0041041C                                         ; DATA XREF: getenv↑r
.idata:00410420 ; int (__cdecl *isalpha)(int C)
.idata:00410420                 extrn __imp_isalpha:dword
.idata:00410420                                         ; DATA XREF: isalpha↑r
.idata:00410424 ; int (__cdecl *iswctype)(wint_t C, wctype_t Type)
.idata:00410424                 extrn __imp_iswctype:dword
.idata:00410424                                         ; DATA XREF: iswctype↑r
.idata:00410428 ; void *(__cdecl *malloc)(size_t Size)
.idata:00410428                 extrn __imp_malloc:dword
.idata:00410428                                         ; DATA XREF: malloc↑r
.idata:0041042C ; void *(__cdecl *memcpy)(void *, const void *Src, size_t Size)
.idata:0041042C                 extrn __imp_memcpy:dword
.idata:0041042C                                         ; DATA XREF: memcpy↑r
.idata:00410430 ; void *(__cdecl *memset)(void *, int Val, size_t Size)
.idata:00410430                 extrn __imp_memset:dword
.idata:00410430                                         ; DATA XREF: memset↑r
.idata:00410434 ; int (*printf)(const char *const Format, ...)
.idata:00410434                 extrn __imp_printf:dword
.idata:00410434                                         ; DATA XREF: printf↑r
.idata:00410438 ; void *(__cdecl *realloc)(void *Block, size_t Size)
.idata:00410438                 extrn __imp_realloc:dword
.idata:00410438                                         ; DATA XREF: realloc↑r
.idata:0041043C ; char *(__cdecl *setlocale)(int Category, const char *Locale)
.idata:0041043C                 extrn __imp_setlocale:dword
.idata:0041043C                                         ; DATA XREF: setlocale↑r
.idata:00410440 ; _crt_signal_t (__cdecl *signal)(int Signal, _crt_signal_t Function)
.idata:00410440                 extrn __imp_signal:dword
.idata:00410440                                         ; DATA XREF: signal↑r
.idata:00410444 ; int (*sprintf)(char *const Buffer, const char *const Format, ...)
.idata:00410444                 extrn __imp_sprintf:dword
.idata:00410444                                         ; DATA XREF: sprintf↑r
.idata:00410448 ; int (*sscanf)(const char *const Buffer, const char *const Format, ...)
.idata:00410448                 extrn __imp_sscanf:dword
.idata:00410448                                         ; DATA XREF: sscanf↑r
.idata:0041044C ; char *(__cdecl *strcat)(char *Destination, const char *Source)
.idata:0041044C                 extrn __imp_strcat:dword
.idata:0041044C                                         ; DATA XREF: strcat↑r
.idata:00410450 ; char *(__cdecl *strchr)(const char *Str, int Val)
.idata:00410450                 extrn __imp_strchr:dword
.idata:00410450                                         ; DATA XREF: strchr↑r
.idata:00410454 ; int (__cdecl *strcmp)(const char *Str1, const char *Str2)
.idata:00410454                 extrn __imp_strcmp:dword
.idata:00410454                                         ; DATA XREF: strcmp↑r
.idata:00410458 ; char *(__cdecl *strcpy)(char *Destination, const char *Source)
.idata:00410458                 extrn __imp_strcpy:dword
.idata:00410458                                         ; DATA XREF: strcpy↑r
.idata:0041045C ; char *(__cdecl *strerror)(int ErrorMessage)
.idata:0041045C                 extrn __imp_strerror:dword
.idata:0041045C                                         ; DATA XREF: strerror↑r
.idata:00410460 ; size_t (__cdecl *strlen)(const char *Str)
.idata:00410460                 extrn __imp_strlen:dword
.idata:00410460                                         ; DATA XREF: strlen↑r
.idata:00410464 ; int (__cdecl *strncmp)(const char *Str1, const char *Str2, size_t MaxCount)
.idata:00410464                 extrn __imp_strncmp:dword
.idata:00410464                                         ; DATA XREF: strncmp↑r
.idata:00410468 ; char *(__cdecl *strncpy)(char *Destination, const char *Source, size_t Count)
.idata:00410468                 extrn __imp_strncpy:dword
.idata:00410468                                         ; DATA XREF: strncpy↑r
.idata:0041046C ; char *(__cdecl *strpbrk)(const char *Str, const char *Control)
.idata:0041046C                 extrn __imp_strpbrk:dword
.idata:0041046C                                         ; DATA XREF: strpbrk↑r
.idata:00410470 ; char *(__cdecl *strrchr)(const char *Str, int Ch)
.idata:00410470                 extrn __imp_strrchr:dword
.idata:00410470                                         ; DATA XREF: strrchr↑r
.idata:00410474 ; size_t (__cdecl *strspn)(const char *Str, const char *Control)
.idata:00410474                 extrn __imp_strspn:dword
.idata:00410474                                         ; DATA XREF: strspn↑r
.idata:00410478 ; char *(__cdecl *strstr)(const char *Str, const char *SubStr)
.idata:00410478                 extrn __imp_strstr:dword
.idata:00410478                                         ; DATA XREF: strstr↑r
.idata:0041047C ; unsigned int (__cdecl *strtoul)(const char *String, char **EndPtr, int Radix)
.idata:0041047C                 extrn __imp_strtoul:dword
.idata:0041047C                                         ; DATA XREF: strtoul↑r
.idata:00410480 ; int (__cdecl *toupper)(int C)
.idata:00410480                 extrn __imp_toupper:dword
.idata:00410480                                         ; DATA XREF: toupper↑r
.idata:00410484 ; int (__cdecl *vfprintf)(FILE *const Stream, const char *const Format, va_list ArgList)
.idata:00410484                 extrn __imp_vfprintf:dword
.idata:00410484                                         ; DATA XREF: vfprintf↑r
.idata:00410488
.idata:00410490 ;
.idata:00410490 ; Imports from OLE32.dll
.idata:00410490 ;
.idata:00410490 ; HRESULT (__stdcall *CoCreateInstance)(const IID *const rclsid, LPUNKNOWN pUnkOuter, DWORD dwClsContext, const IID *const riid, LPVOID *ppv)
.idata:00410490                 extrn __imp_CoCreateInstance:dword
.idata:00410490                                         ; DATA XREF: CoCreateInstance↑r
.idata:00410494 ; void (__stdcall *CoUninitialize)()
.idata:00410494                 extrn __imp_CoUninitialize:dword
.idata:00410494                                         ; DATA XREF: CoUninitialize↑r
.idata:00410498 ; HRESULT (__stdcall *OleInitialize)(LPVOID pvReserved)
.idata:00410498                 extrn __imp_OleInitialize:dword
.idata:00410498                                         ; DATA XREF: OleInitialize↑r
.idata:0041049C
.idata:0041049C
.idata:0041049C
.idata:0041049C                 end start
